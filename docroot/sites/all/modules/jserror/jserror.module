<?php

/**
 * @file
 * JavaScript errors logging for administrators.
 *
 * JSerror module tacks your sites JavaScript errors and sends the data back
 * to the server.
 */

/**
 * Implements hook_help().
 */
function jserror_help($path, $arg) {
  switch ($path) {
    case 'admin/help#jserror':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('JSerror module logs JavaScript errors in the Drupal database. For more information, see the online handbook entry for the <a href="@jserror">JSerror module</a>.', array('@jserror' => 'http://drupal.org/documentation/modules/jserror')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Monitoring your sites JavaScript Errors') . '</dt>';
      $output .= '<dd>' . t('JSerror module allows you to view JavaScript error log on the <a href="@jserror">Recent error messages</a> page. The log is a chronological list of recorded errors containing error message, page where the error occurred, line number, column number, browser, platform, stacktrace and timestamp. Administrators should check the error logs on a regular basis to ensure their site is working properly.', array('@jserror' => url('admin/reports/jserror'))) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'admin/reports/jserror':
      return '<p>' . t('JSerror module watches your JavaScript code while it executes on a client, capturing errors in a log (shown here) to be reviewed by an authorized individual at a later time. This log is a list of recorded errors containing error message, page where the error occurred, line number, column number, browser, platform, stacktrace and timestamp.') . '</p>';
  }
}

/**
 * Implements hook_page_build().
 */
function jserror_page_build() {
  // Check if jserr_en cookie is enabled. If not set,
  // generate the cookie and decide if the client should be included in test.
  $jserr_en = isset($_COOKIE['jserr_en']) ? $_COOKIE['jserr_en'] : _jserror_choose_client();

  // If the request has to be included in error logging,
  // add the required JavaScript.
  // Uncompressed JavaScript code can be found in jserror-init.js,
  // compression necessary for performance.
  if ($jserr_en) {
    if (!variable_get('jserror_debug_mode', 0)) {
      $script = '(function(e,t){jserror={data:[],onError:function(){jserror.data.push(arguments);return ' . (variable_get('jserror_suppress_warning', 1) ? 'true' : 'false') . '}};var n=function(){var e=t.createElement("script"),n=t.getElementsByTagName("script")[0];e.src=Drupal.settings.jserrorPath+"/jserror.min.js";e.async=!0;n.parentNode.insertBefore(e,n)};e.addEventListener?e.addEventListener("load",n,!1):e.attachEvent("onload",n);e.onerror=jserror.onError})(window,document)';
    }
    else {
      $script = file_get_contents(drupal_get_path('module', 'jserror') . "/jserror.init.js");
    }
    drupal_add_js($script, array(
      'scope' => 'header',
      'type' => 'inline',
      'group' => JS_LIBRARY - 1,
      'preprocess' => FALSE,
    ));
  }
  // If jserror_suppress_warning is enabled, add the required JavaScript.
  elseif (variable_get('jserror_suppress_warning', 1)) {
    drupal_add_js('(function(e){e.onerror=function(){return true}})(window)', array(
      'scope' => 'header',
      'type' => 'inline',
      'group' => JS_LIBRARY - 1,
      'preprocess' => FALSE,
    ));
  }
  // Expose the path to JSerror module in JavaScript.
  drupal_add_js(array('jserrorPath' => base_path() . drupal_get_path('module', 'jserror')), 'setting');
  // Set the error request per page limit.
  drupal_add_js(array('jserrorLimit' => variable_get('jserror_page_limit', 100)), 'setting');
}

/**
 * Implements hook_menu().
 */
function jserror_menu() {
  $items = array();
  $items['jserror'] = array(
    'page callback' => 'jserror_save_errors',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/jserror'] = array(
    'title' => 'Recent JavaScript log messages',
    'description' => 'View events that have recently been logged.',
    'page callback' => 'jserror_errors_overview',
    'access arguments' => array('access site reports'),
    'weight' => -1,
    'file' => 'jserror.admin.inc',
  );
  $items['admin/reports/jserror/%'] = array(
    'description' => 'View events that have recently been logged.',
    'page callback' => 'jserror_error_details',
    'page arguments' => array(3),
    'access arguments' => array('access site reports'),
    'weight' => -1,
    'file' => 'jserror.admin.inc',
  );
  $items['admin/config/development/jserror'] = array(
    'title' => 'JSerror module settings',
    'description' => 'Set options for jserror module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jserror_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'jserror.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function jserror_theme() {
  return array(
    'jserror_list' => array(
      'template' => 'jserror_list',
      'variables' => array('errors' => NULL, 'empty' => 'No Value'),
    ),
    'jserror' => array(
      'template' => 'jserror',
      'variables' => array('errors' => NULL, 'empty' => 'No Value'),
    ),
  );
}

/**
 * Page callback: saves the JavaScript errors to the database.
 *
 * Receives errors as POST requests from the client and saves to the database.
 *
 * @return string
 *   SUCCESS if the errors were saved.
 */
function jserror_save_errors() {
  // Check if payload was set.
  if (isset($_POST['payload'])) {
    $allowed = FALSE;
    $client_limit = variable_get('jserror_client_limit', 10000);
    if ($client_limit == -1) {
      $allowed = TRUE;
    }
    else {
      // Register the request for flood control.
      flood_register_event('jserror');
      // Check if the Request limit has reached.
      if (flood_is_allowed('jserror', $client_limit)) {
        $allowed = TRUE;
      }
    }

    if ($allowed) {
      $payload = json_decode($_POST['payload']);

      // Find out the browser information from UA string.
      $browser = browscap_get_browser($payload->client->userAgent);

      // Save errors to the database.
      foreach ($payload->data as $data) {
        Database::getConnection('default', 'default')->insert('jserror')
        ->fields(array(
          'mid' => md5($data->m),
          'message' => $data->m,
          'file' => $data->f,
          'page' => $payload->client->page,
          'line' => $data->l,
          'col' => isset($data->c) ? $data->c : 0,
          'pageload' => $data->w,
          'user_agent' => $payload->client->userAgent,
          'browser' => $browser['browser'],
          'browser_version' => (!is_numeric($browser['majorver'])) ? '0' : $browser['majorver'],
          'platform' => $browser['platform'],
          'platform_version' => (!is_numeric($browser['platform_version'])) ? '0' : $browser['platform_version'],
          'stack' => (isset($data->s) ? $data->s : ''),
          'lang' => isset($payload->client->lang) ? $payload->client->lang : '',
          'cookie' => $payload->client->cookie,
          'timestamp' => time(),
        ))
        ->execute();
      }
      $status = 'SUCCESS';
    }
    else {
      $status = 'LIMIT_OVERFLOW';
    }
  }
  else {
    $status = 'NO_DATA';
  }
  return drupal_json_output($status);
}

/**
 * Implements hook_cron().
 *
 * Controls the size of the error table,
 * paring it to 'jserror_row_limit' messages.
 */
function jserror_cron() {
  // Clean-up the jserror table.
  $row_limit = variable_get('jserror_row_limit', 1000);

  // For row limit n, get the eid of the nth row in descending eid order.
  // Counting the most recent n rows avoids issues with eid number sequences,
  // e.g., auto_increment value > 1 or rows deleted directly from the table.
  if ($row_limit > 0) {
    $min_row = db_select('jserror', 'j')
    ->fields('j', array('eid'))
    ->orderBy('eid', 'DESC')
    ->range($row_limit - 1, 1)
    ->execute()->fetchField();

    // Delete all table entries older than the nth row, if nth row was found.
    if ($min_row) {
      db_delete('jserror')
      ->condition('eid', $min_row, '<')
      ->execute();
    }
  }
}
/**
 * Decide weather or not include a client for test.
 *
 * @return bool
 *   value set to jserr_en cookie
 */
function _jserror_choose_client() {
  // Generate a random number between 0 to 100,
  // check if the value is <= jserror_percentage.
  $value = (rand(0, 100) <= variable_get('jserror_percentage', 100)) ? 1 : 0;

  // Set jserr_rn cookie.
  setcookie('jserr_en', $value);

  return $value;
}
