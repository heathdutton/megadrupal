<?php

/**
 * @file
 * Drupal Sync initial setup module.
 */

/**
 * Implements hook_menu().
 */
function drupal_sync_initial_setup_menu() {
  $items = array();

  $items['admin/config/drupal_sync/drupal_sync_initial_setup'] = array(
    'title' => 'Drupal Sync Initial Setup',
    'description' => 'Sync Additional Setup.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_initial_setup_admin_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer drupal sync settings'),
    'file' => 'drupal_sync_initial_setup.admin.inc',
  );

  $items['admin/config/drupal_sync/drupal_sync_initial_setup/run'] = array(
    'title' => 'Run Drupal Sync Initial Setup',
    'description' => 'Run Sync Additional Setup.',
    'page callback' => 'drupal_sync_initial_setup_run',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer drupal sync settings'),
  );

  return $items;
}

/**
 * Menu callback. Run initial setup.
 */
function drupal_sync_initial_setup_run() {
  $sync_settings = variable_get('drupal_sync_settings', array());
  $setup_settings = variable_get('drupal_sync_initial_setup_settings', array('node_types' => array(), 'vocabularies' => array(), 'remote_sites' => array()));
  if (isset($sync_settings['drupal_sync_remote']) && is_array($sync_settings['drupal_sync_remote'])) {
    // terms
    $custom_data = array('action' => 'get_terms');
    foreach ($sync_settings['drupal_sync_remote'] as $remote) {
      if (in_array($remote['name'], $setup_settings['remote_sites'])) {
        $custom_data_answer = drupal_sync_xmlrpc_custom_send($remote['name'], $custom_data);

        if (isset($custom_data_answer['action']) && $custom_data_answer['action'] == 'get_terms') {
          if (isset($custom_data_answer['result']) && is_array($custom_data_answer['result'])) {
            drupal_sync_initial_setup_compare($remote['name'], $custom_data_answer['result'], 'taxonomy_term');
          }
        }
      }
    }

    // nodes
    $custom_data = array('action' => 'get_nodes');
    foreach ($sync_settings['drupal_sync_remote'] as $remote) {
      if (in_array($remote['name'], $setup_settings['remote_sites'])) {
        $custom_data_answer = drupal_sync_xmlrpc_custom_send($remote['name'], $custom_data);
        if (isset($custom_data_answer['action']) && $custom_data_answer['action'] == 'get_nodes') {
          if (isset($custom_data_answer['result']) && is_array($custom_data_answer['result'])) {
            drupal_sync_initial_setup_compare($remote['name'], $custom_data_answer['result'], 'node');
          }
        }
      }
    }
    // menus
    $custom_data = array('action' => 'get_menus');
    foreach ($sync_settings['drupal_sync_remote'] as $remote) {
      if (in_array($remote['name'], $setup_settings['remote_sites'])) {
        $custom_data_answer = drupal_sync_xmlrpc_custom_send($remote['name'], $custom_data);
        if (isset($custom_data_answer['action']) && $custom_data_answer['action'] == 'get_menus') {
          if (isset($custom_data_answer['result']) && is_array($custom_data_answer['result'])) {
            drupal_sync_initial_setup_compare($remote['name'], $custom_data_answer['result'], 'menu_item');
          }
        }
      }
    }
  }

  drupal_set_message(t('Setup has been done.'));
  drupal_goto('admin/config/drupal_sync/drupal_sync_initial_setup');
}


/**
 * Compare remote and local entities (titles)
 *
 * @global string $base_url
 * @param string $remote_name
 * @param array $remote_entities
 * @param string $type
 *
 * @return boolean
 */
function drupal_sync_initial_setup_compare($remote_name, $remote_entities = array(), $type = 'node') {
  global $base_url;
  $setup_settings = variable_get('drupal_sync_initial_setup_settings', array('node_types' => array(), 'vocabularies' => array(), 'remote_sites' => array()));
  $compare_method = !empty($setup_settings['compare_method']) ? $setup_settings['compare_method'] : 'title';
  $local_entities = array();

  switch ($type) {
    case 'node':
      foreach ($setup_settings['node_types'] as $node_type => $title) {
        $local_entities[$node_type] = drupal_sync_initial_setup_get_nodes($node_type);
      }
      break;
    case 'taxonomy_term':
      foreach ($setup_settings['vocabularies'] as $vid => $name) {
        $local_entities[$vid] = drupal_sync_initial_setup_get_terms($vid);
      }
      break;
    case 'menu_item':
      foreach ($setup_settings['menus'] as $menu_id => $name) {
        $local_entities[$menu_id] = drupal_sync_initial_setup_get_menu_links($menu_id);
      }
      break;
  }

  $compare_results = array();
  $local_entities_count = 0;

  foreach ($remote_entities as $key => $remote_entity) {
      $local_entities_count += isset($local_entities[$key]) ? count($local_entities[$key]) : 0;
      foreach ($remote_entity as $remote_eid => $remote_title) {
        if (isset($local_entities[$key]) && $local_eid = drupal_sync_initial_setup_find_matches($remote_eid, $remote_title, $local_entities[$key], $compare_method)) {
          $compare_results[$remote_name . "_" . $type . "_" . $local_eid] = array(
            'eid' => $local_eid,
            'reid' => $remote_eid,
            'entity_type' => $type,
            'site_id' => $remote_name,
            'source_eid' => $local_eid,
            'source_site_id' => drupal_sync_make_site_id_hash(),
            'source_changed' => REQUEST_TIME
          );
        }
        else {
          watchdog("drupal_sync_initial_setup_error", "<pre>" . $remote_name . "<br>" . $remote_eid . "<br>" . $remote_title . "</br>" . var_export($remote_entity, TRUE) . "</pre>");
        }
      }

  }
  drupal_set_message(t('@site @entity_type relations found: @relations (checked @local_count local entities)', array('@site' => $remote_name, '@relations' => count($compare_results), '@entity_type' => $type, '@local_count' => $local_entities_count)), 'status');
  if (!empty($compare_results)) {
    drupal_sync_initial_setup_save_relations($compare_results);
    // send to remote
    $custom_data = array(
      'action' => 'set_relations',
      'data' => $compare_results,
      'remote_url' => $base_url,
    );
    return drupal_sync_xmlrpc_custom_send($remote_name, $custom_data);
  }

  return TRUE;
}

/**
 * Find mathc entity and return entity id, or FALSE
 *
 * @param int $remote_eid
 * @param string $remote_title
 * @param array $local_entities
 * @param string $compare_method
 */
function drupal_sync_initial_setup_find_matches($remote_eid, $remote_title, $local_entities, $compare_method) {
  $local_eid = FALSE;
  switch ($compare_method) {
    case 'title':
      $local_eid = array_search($remote_title, $local_entities);
      break;
    case 'id':
      $local_eid = isset($local_entities[$remote_eid]) ? $remote_eid : FALSE;
      break;
  }

  return $local_eid;
}

/**
 * Save relations to drupal_sync table.
 *
 * @param array $compare_results
 *
 * @return boolean
 */
function drupal_sync_initial_setup_save_relations($compare_results = array()) {
  foreach ($compare_results as $key => $data) {
    db_merge('drupal_sync')
        ->key(array(
          'eid' => $data['eid'],
          'reid' => $data['reid'],
          'site_id' => $data['site_id'],
          'entity_type' => $data['entity_type'],
        ))
        ->insertFields($data)
        ->updateFields(array(
          'source_eid' => $data['source_eid'],
          'source_site_id' => $data['source_site_id'],
          'source_changed' => $data['source_changed'],
        ))
        ->execute();
  }
  return TRUE;
}


/**
 * Get all nids/titles for selecter node type
 *
 * @param string $type
 * @return array
 */
function drupal_sync_initial_setup_get_nodes($type) {
  return db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('n.type', $type)
          ->execute()
          ->fetchAllKeyed();
}

/**
 * Get all tids/names for selected vocabulary
 *
 * @param string $mashine_name
 * @return array
 */
function drupal_sync_initial_setup_get_terms($vid) {
  return db_select('taxonomy_term_data', 'ttd')
          ->fields('ttd', array('tid', 'name'))
          ->condition('ttd.vid', $vid)
          ->execute()->fetchAllKeyed();
}

/**
 * Get all menu_links for selected menu
 *
 * @param string $menu_name
 * @return array
 */
function drupal_sync_initial_setup_get_menu_links($menu_name) {
 $links =  menu_load_links('main-menu');
 $result = array();
 foreach ($links as $value) {
   $result[$value['mlid']] = $value['link_title'];
 }
  return $result;
}

/**
 * Implements hook_drupal_sync_xmlrpc_custom_answer_alter().
 */
function drupal_sync_initial_setup_drupal_sync_xmlrpc_custom_answer_alter(&$data) {
  if (isset($data['action'])) {
    $setup_settings = variable_get('drupal_sync_initial_setup_settings', array('node_types' => array(), 'vocabularies' => array(), 'menus' => array()));

    switch ($data['action']) {
      case 'get_nodes':
        foreach ($setup_settings['node_types'] as $type => $title) {
          $data['result'][$type] = drupal_sync_initial_setup_get_nodes($type);
        }
        break;
      case 'get_terms':
        foreach ($setup_settings['vocabularies'] as $vid => $name) {
          $data['result'][$vid] = drupal_sync_initial_setup_get_terms($vid);
        }
        break;
      case 'get_menus':
        foreach ($setup_settings['menus'] as $menu_id => $name) {
          $data['result'][$menu_id] = drupal_sync_initial_setup_get_menu_links($menu_id);
        }
        break;
      case 'set_relations':
        $data['result'][] = drupal_sync_initial_setup_set_relations($data);
        break;
    }
  }
}

/**
 * Prepare to save relations to drypal_sync table
 *
 * @param array $data
 *
 * @return boolean
 */
function drupal_sync_initial_setup_set_relations($data) {
  $result = FALSE;
  if (isset($data['remote_url'])) {
    $remote_config = drupal_sync_get_remote_site_access($data['remote_url']);
    if (isset($remote_config['name'])) {

      $compare_results = (isset($data['data']) && is_array($data['data'])) ? $data['data'] : array();
      foreach ($compare_results as $key => $data) {
        $reid = $data['eid'];
        $eid = $data['reid'];

        $compare_results[$key]['eid'] = $eid;
        $compare_results[$key]['reid'] = $reid;
        $compare_results[$key]['site_id'] = $remote_config['name'];
      }
      drupal_sync_initial_setup_save_relations($compare_results);
      $result = TRUE;
    }
  }
  return $result;
}