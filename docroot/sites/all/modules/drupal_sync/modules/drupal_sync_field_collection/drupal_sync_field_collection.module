<?php

/**
 * @file
 * Drupal Sync menu module.
 */

  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.forms');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.api');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.queue');
  module_load_include('module', 'drupal_sync', 'drupal_sync');

/**
 * Implements hook_menu();
 */
function drupal_sync_field_collection_menu() {
  $items = array();

  $items['admin/structure/field-collections/%field_collection_field_name/sync_settings'] = array(
    'title' => 'Synchronization settings',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'drupal_sync_access_entity_settings_menu_tabs',
    'access arguments' => array('field_collection_item', 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_add_entity_sync_settings_form', 'field_collection_item', 3),
  );

  return $items;
}

/**
 *  Implements hook_init().
 */
function drupal_sync_field_collection_init() {

}

/**************************************************
 *  Drupal_sync hooks implementations
 **************************************************/

/**
 * Implements hook_drupal_sync_default_fields_info().
 */
function drupal_sync_field_collection_drupal_sync_default_fields_info($fields) {

  $fields['field_collection_item'] = array(
  );

  return $fields;
}

/**
 * Implements hook_drupal_sync_prepare_types().
 */
function drupal_sync_field_collection_drupal_sync_prepare_types($types) {

  $instances = field_info_instances();
  $field_types = field_info_field_types();
  $bundles = field_info_bundles();
  $types = array();
  foreach ($instances as $entity_type => $type_bundles) {
    foreach ($type_bundles as $bundle => $bundle_instances) {
      foreach ($bundle_instances as $field_name => $instance) {
        $field = field_info_field($field_name);
        if ($field['type'] == 'field_collection') {
          $types['field_collection_item'][$field_name] = array(
            'name' => $field_name,
          );

        }
      }
    }
  }

  return $types;
}

/**
 * Implements hook_drupal_menu_sync_types_build_form_alter().
 */
function drupal_sync_field_collection_drupal_sync_types_build_form_alter(&$form, $types, $defaults = array()) {
  foreach ($types as $type => $value) {
    switch ($type) {
      case 'field_collection_item':
        $options = array();
        foreach ($value as $option) {
          $options[$option['name']] = $option['name'];
        }

        $form['drupal_sync_settings']['drupal_sync_entities']['drupal_sync_field_collection_item_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Available field collections'),
          '#collapsible' => TRUE,
        );

        $form['drupal_sync_settings']['drupal_sync_entities']['drupal_sync_field_collection_item_settings']['drupal_sync_field_collection_names'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Choose field collections for sync'),
          '#default_value' => (isset($defaults['field_collection_item'])) ? array_keys($defaults['field_collection_item']) : array(),
          '#options' => $options,
        );

        break;
    }
  }
  return $form;
}

/**
 * Implements hook_drupal_sync_field_to_send_alter().
 *
 * @param array $field
 * @param string $field_name
 * @param string $context
 */
function drupal_sync_field_collection_drupal_sync_field_to_send_alter(&$field, $field_name, $context) {

  if ($context['local_field_type'] == 'list<field_collection_item>' || $context['local_field_type'] == 'field_collection_item') {

    $new_field = array();
    if (!empty($field) && is_array($field)) {

      $drupal_sync_relation_settings = variable_get('drupal_sync_remote_relation_settings', array());
      $remote_site_info = drupal_sync_get_remote_site_access_by_name($context['entity']['remote_site_name']);
      $ref = (isset($drupal_sync_relation_settings['field_collection_item'][$field_name][$remote_site_info['key']]['ref'])) ? $drupal_sync_relation_settings['field_collection_item'][$field_name][$remote_site_info['key']]['ref'] : array();

      // if sync was set only to one side. (not selected remote field_collection)
      if (empty($ref)) {
        $field = array();
        return;
      }

      foreach ($field as $delta => $value) {
        if (!empty($value['value']) && is_numeric($value['value'])) {
          $field_collection = (array) field_collection_item_load($value['value']);
          $field_collection['remote_site_name'] = $context['entity']['remote_site_name'];
          $fields_mapping = drupal_sync_get_entity_fields_for_sending('field_collection_item', $field_name, $field_collection, $ref);

            foreach ($fields_mapping as $key => $value) {
              $new_field[$delta][$key] = $value;
            }

        }
      }
    }
    $field = $new_field;
  }
}

/**
 * Implements hook_drupal_sync_entity_add_field().
 */
function drupal_sync_field_collection_drupal_sync_entity_add_field($field_key, $values, $local_field_type, $entity_local, $entity_remote, $entity_type) {
  if ($local_field_type == 'list<field_collection_item>' || $local_field_type == 'field_collection_item') {

    $local_values = !empty($entity_local->{$field_key}[LANGUAGE_NONE]) ? $entity_local->{$field_key}[LANGUAGE_NONE] : array();
    $count_local_field_collection_items = (!empty($local_values) && is_array($local_values)) ? count($local_values) : 0;
    $count_remote_field_collection_items = (!empty($values) && is_array($values)) ? count($values) : 0;

    $iterations = max(array($count_local_field_collection_items, $count_remote_field_collection_items));

    for ($delta = 0; $delta < $iterations; $delta++) {
      $remote_item_each = each($values);
      $remote_item = isset($remote_item_each['value']) ? array('entity_fields' => $remote_item_each['value'], 'entity_content_type' => $field_key) : NULL;

      $local_item_each = each($local_values);
      $local_item_id = isset($local_item_each['value']['value']) ? $local_item_each['value']['value'] : NULL;

      if (isset($remote_item) && isset($local_item_id)) {
        //UPDATE local field_collection_item
        $field_collection_item = field_collection_item_load($local_item_id);
        drupal_sync_entity_add_fields($field_collection_item, $remote_item, 'field_collection_item');
        $field_collection_item->save();
      }
      elseif (isset($remote_item) && !isset($local_item_id)) {
        //ADD local field_collection_item
        $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_key));

        drupal_sync_entity_add_fields($field_collection_item, $remote_item, 'field_collection_item');
        $field_collection_item->setHostEntity($entity_type, $entity_local);
        $field_collection_item->save();
      }
      elseif (!isset($remote_item) && isset($local_item_id)) {
        //DELETE local field_collection_item
        entity_delete_multiple('field_collection_item', array($local_item_id));
      }
    }
    return $entity_local->$field_key;
  }
}

/**
 * Implements hook_drupal_sync_settings_submit_form_alter().
 */
function drupal_sync_field_collection_drupal_sync_settings_submit_form_alter(&$data, $form_state) {
  $settings = (isset($form_state['values']['drupal_sync_settings'])) ? $form_state['values']['drupal_sync_settings'] : array();

  $menu_settings = isset($settings['drupal_sync_entities']['drupal_sync_field_collection_item_settings']['drupal_sync_field_collection_names']) ? $settings['drupal_sync_entities']['drupal_sync_field_collection_item_settings']['drupal_sync_field_collection_names'] : array();
  $menu_settings = array_filter($menu_settings);

  foreach ($menu_settings as $key => $value) {
    $menu_settings[$key] = (isset($form_state['original_entity_types']['field_collection_item'][$key]['name'])) ? $form_state['original_entity_types']['field_collection_item'][$key]['name'] : $value;
  }

  $data['drupal_sync_entities']['field_collection_item'] = $menu_settings;
}

/**
 * Implements hook_drupal_sync_get_entity_type_id_alter().
 */
function drupal_sync_field_collection_drupal_sync_get_entity_type_id_alter(&$type_id, $entity_type, $entity_type_obj) {

  switch ($entity_type) {
    case 'field_collection_item' :
      $type_id = $entity_type_obj;
      break;
  }
}

/**
 * Implements of hook_drupal_sync_get_sync_types().
 */
function drupal_sync_field_collection_drupal_sync_get_sync_types() {
  $drupal_sync_settings = variable_get('drupal_sync_settings', array());
  $types_info = (isset($drupal_sync_settings['drupal_sync_entities'])) ? $drupal_sync_settings['drupal_sync_entities'] : array();
  $types = array();
  $fields = array();
  $fields = module_invoke_all('drupal_sync_default_fields_info', $fields);

  foreach ($types_info as $type => $entity) {
    switch ($type) {
      case 'field_collection_item':
        foreach ($entity as $key => $value) {
          $default_fields = (isset($fields['field_collection_item'])) ? $fields['field_collection_item'] : array();
          $current_fields = $default_fields + field_info_instances('field_collection_item', $key);
          $types[$type][$key] = array(
            'name' => $value,
            'fields' => $current_fields
          );
        }
        break;
    }
  }
  return $types;

}

/**
 * Implements hook_drupal_sync_entity_bundle_properties
 *
 * @param string $type
 * @param string $entity_type_id
 */
function drupal_sync_field_collection_drupal_sync_entity_bundle_properties($type, $entity_type_id) {
  $entity_property_info = entity_get_property_info($type);
  $properties = array();

  switch ($type) {
    case 'field_collection_item':
      $properties = (isset($entity_property_info['bundles'][$entity_type_id]['properties'])) ? $entity_property_info['bundles'][$entity_type_id]['properties'] : array();
      break;
  }
  return $properties;
}
