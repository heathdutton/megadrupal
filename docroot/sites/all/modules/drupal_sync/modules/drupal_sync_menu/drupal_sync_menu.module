<?php

/**
 * @file
 * Drupal Sync menu module.
 */

/**
 * Implements hook_menu();
 */
function drupal_sync_menu_menu() {
  $items = array();

  $items['admin/structure/menu/manage/%menu/sync_settings'] = array(
    'title' => 'Synchronization settings',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'drupal_sync_access_entity_settings_menu_tabs',
    'access arguments' => array('menu_item', 4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_add_entity_sync_settings_form', 'menu_item', 4),
  );

  return $items;
}

/**
 *  Implements hook_init().
 */
function drupal_sync_menu_init() {
  drupal_sync_menu_include_core_files();
}

/**************************************************
 *  Drupal_sync hooks implementations
 **************************************************/

/**
 * Implements hook_drupal_sync_default_fields_info().
 */
function drupal_sync_menu_drupal_sync_default_fields_info($fields) {

  $fields['menu_item'] = array(
    'link_title' => array(
      'label' => t('Link title'),
    ),
    'link_path' => array(
      'label' => t('Link path'),
    ),
    'description' => array(
      'label' => t('Description'),
    ),
    'parent' => array(
      'label' => t('Parent'),
    ),
    'weight' => array(
      'label' => t('Weight'),
    ),
    'hidden' => array(
      'label' => t('Enabled'),
    ),
  );

  return $fields;
}

/**
 * Implements hook_drupal_sync_prepare_types().
 */
function drupal_sync_menu_drupal_sync_prepare_types($types) {

  $menus = menu_get_menus();
  foreach ($menus as $key => $value) {
    $types['menu_item'][$key] = array(
      'menu_name' => $key,
      'name' => $value,
    );
  }

  return $types;
}

/**
 * Implements hook_drupal_menu_sync_types_build_form_alter().
 */
function drupal_sync_menu_drupal_sync_types_build_form_alter(&$form, $types, $defaults = array()) {
  foreach ($types as $type => $value) {
    switch ($type) {
      case 'menu_item':
        $options = array();
        foreach ($value as $option) {
          $options[$option['menu_name']] = $option['name'];
        }

        $form['drupal_sync_settings']['drupal_sync_entities']['drupal_sync_menu_item_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Available menus'),
          '#collapsible' => TRUE,
        );

        $form['drupal_sync_settings']['drupal_sync_entities']['drupal_sync_menu_item_settings']['drupal_sync_menu_names'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Choose menu for sync'),
          '#default_value' => (isset($defaults['menu_item'])) ? array_keys($defaults['menu_item']) : array(),
          '#options' => $options,
        );

        break;
    }
  }
  return $form;
}

/**
 * Implements hook_drupal_sync_field_to_send_alter().
 *
 * @param array $field
 * @param string $field_name
 * @param string $context
 */
function drupal_sync_menu_drupal_sync_field_to_send_alter(&$field, $field_name, $context) {

  if ($context['entity_type'] == 'menu_item' && $field_name == 'parent') {
    //if this parent mlid from remote site, change mlid on remote sorce mlid and add site source id
    $new_field = array();
    if (is_string($field)) {
      $parent_array = explode(':', $field);
      if (isset($parent_array[0]) && isset($parent_array[1])) {
        $menu_name = $parent_array[0];
        $link_local_mlid = $parent_array[1];
        if (is_numeric($link_local_mlid)) {
          $link_source_info = drupal_sync_get_local_store_info($link_local_mlid, $context['entity_type']);

          if (!empty($link_source_info)) {
            $new_field = array(
              'remote_menu_name' => $menu_name,
              'mlid' => $link_source_info['source_eid'],
              'source_site_id' => $link_source_info['source_site_id'],
            );
          }
        }
      }
    }

    $field = $new_field;
  }

  if ($context['entity_type'] == 'menu_item' && $field_name == 'link_path') {
    //if this parent mlid from remote site, change mlid on sorce mlid and add site source id
    $new_field = array();
    if (is_string($field)) {
      $new_field['remote_link'] = $field;
      if (!url_is_external($field)) {
        $matches = 0;
        preg_match('/^node\/(\d+$)/', $field, $matches);
        if (!empty($matches[1])) {
          $local_nid = $matches[1];
          $new_field['link_type'] = 'node_link';
          $node_source_info = drupal_sync_get_local_store_info($local_nid, 'node');
          if (!empty($node_source_info)) {
            $new_field['source_nid'] = $node_source_info['source_eid'];
            $new_field['source_site_id'] = $node_source_info['source_site_id'];
          }
          else {
            $new_field['source_nid'] = $local_nid;
            $new_field['source_site_id'] = drupal_sync_make_site_id_hash();
          }
        }
      }
    }

    $field = $new_field;
  }
}

/**
 * Implements hook_drupal_sync_settings_submit_form_alter().
 */
function drupal_sync_menu_drupal_sync_settings_submit_form_alter(&$data, $form_state) {
  $settings = (isset($form_state['values']['drupal_sync_settings'])) ? $form_state['values']['drupal_sync_settings'] : array();

  $menu_settings = isset($settings['drupal_sync_entities']['drupal_sync_menu_item_settings']['drupal_sync_menu_names']) ? $settings['drupal_sync_entities']['drupal_sync_menu_item_settings']['drupal_sync_menu_names'] : array();
  $menu_settings = array_filter($menu_settings);

  foreach ($menu_settings as $key => $value) {
    $menu_settings[$key] = (isset($form_state['original_entity_types']['menu_item'][$key]['name'])) ? $form_state['original_entity_types']['menu_item'][$key]['name'] : $value;
  }

  $data['drupal_sync_entities']['menu_item'] = $menu_settings;
}

/**
 * Implements hook_drupal_sync_get_entity_type_id_alter().
 */
function drupal_sync_menu_drupal_sync_get_entity_type_id_alter(&$type_id, $entity_type, $entity_type_obj) {

  switch ($entity_type) {
    case 'menu_item' :
      $type_id = $entity_type_obj['menu_name'];
      break;
  }
}

/**
 * Implements hook_drupal_sync_get_entity_type_id_alter().
 */
function drupal_sync_menu_drupal_sync_get_entity_id_alter(&$type_id, $entity_type, $entity) {

  switch ($entity_type) {
    case 'menu_item' :
      $type_id = $entity['mlid'];
      break;
  }
}

/**
 * Implements of hook_drupal_sync_get_sync_types().
 */
function drupal_sync_menu_drupal_sync_get_sync_types() {
  $drupal_sync_settings = variable_get('drupal_sync_settings', array());
  $types_info = (isset($drupal_sync_settings['drupal_sync_entities'])) ? $drupal_sync_settings['drupal_sync_entities'] : array();
  $types = array();
  $fields = array();
  $fields = module_invoke_all('drupal_sync_default_fields_info', $fields);

  foreach ($types_info as $type => $entity) {
    switch ($type) {
      case 'menu_item':
        foreach ($entity as $key => $value) {
          $default_fields = (isset($fields['menu_item'])) ? $fields['menu_item'] : array();
          $types[$type][$key] = array(
            'name' => $value,
            'fields' => $default_fields
          );
        }
        break;
    }
  }
  return $types;
}

/**
 * Implements hook_drupal_sync_entity_prepare_to_queue()
 *
 * @param array $entities_settings
 * @param string $type
 * @param object $entity
 * @param string $op
 */
function drupal_sync_menu_drupal_sync_entity_prepare_to_queue($entities_settings, $type, $menu_link, $op, $source_changed) {

  if ($type == 'menu_item') {
    // check if $menu_link['menu_name'] in settings
    if (isset($entities_settings[$type][$menu_link['menu_name']])) {

      // send menu_links to remote sites
      drupal_sync_add_to_queue($menu_link['mlid'], $type, (array) $menu_link, $menu_link['menu_name'], $op, $source_changed);
    }
  }
}

/**
 * Implements hook_drupal_sync_xmlrpc_sync_alert();
 */
function drupal_sync_menu_drupal_sync_processings_incoming_operation_after_alter(&$op_result, $entity, $context) {

  switch ($context['type']) {
    case 'menu_item':
      switch ($context['op']) {
        case 'insert':
          $op_result = drupal_sync_menu_menu_item_insert($entity, $context['remote_site_name']);
          if ($op_result['status'] == 'ok') {
            drupal_sync_local_store_insert($op_result['id'], $entity['entity_id'], $context['type'], $context['remote_site_name'], $entity);
          }
          drupal_sync_delete_in_progress_operation($entity, $context['op'], $context['type']);
          break;
        case 'update':
          $op_result = drupal_sync_menu_menu_item_update($entity, $context['remote_site_name']);
          if ($op_result['status'] == 'ok') {
            drupal_sync_local_store_update($op_result['id'], $entity['entity_id'], $context['type'], $context['remote_site_name'], $entity);
          }
          drupal_sync_delete_in_progress_operation($entity, $context['op'], $context['type']);
          break;
        case 'delete':
          $op_result = drupal_sync_menu_menu_item_delete($entity, $context['remote_site_name']);
          if ($op_result['status'] == 'ok') {
            drupal_sync_local_store_delete($op_result['id'], $entity['entity_id'], $context['type'], $context['remote_site_name']);
          }
          break;
      }
      break;
  }
}

/* * ************************************************
 *  drupal_sync_manager hooks implementation
 * ************************************************ */

/**
 * Implements hook_drupal_sync_manager_entity_edit_link().
 */
function drupal_sync_menu_drupal_sync_manager_entity_edit_link($entity_type, $entity_id) {
  $edit_link = NULL;
  switch ($entity_type) {
    case 'menu_item':
      $edit_link = 'admin/structure/menu/item/' . $entity_id . "/edit";
      break;
  }
  return $edit_link;
}

/* * ************************************************
 *  Drupal_sync menu hooks processings
 * ************************************************ */

/**
 * Implements hook_menu_link_insert().
 */
function drupal_sync_menu_menu_link_insert($menu_link) {
  drupal_sync_menu_include_core_files();
  drupal_sync_entity_prepare_to_queue($menu_link, 'menu_item', 'insert');
}

/**
 * Implements hook_menu_link_update().
 */
function drupal_sync_menu_menu_link_update($menu_link) {
  drupal_sync_menu_include_core_files();
  drupal_sync_entity_prepare_to_queue($menu_link, 'menu_item', 'update');
}

/**
 * Implements hook_menu_link_delete().
 */
function drupal_sync_menu_menu_link_delete($menu_link) {
  drupal_sync_menu_include_core_files();
  drupal_sync_entity_prepare_to_queue($menu_link, 'menu_item', 'delete');
}

/**************************************************
 *  Operations with menu items
 **************************************************/

/**
 * Insert local menu item
 *
 * @param array $entity
 * @param string $remote_site_name
 *
 * @return string
 */
function drupal_sync_menu_menu_item_insert($entity, $remote_site_name) {

  $link = array();
  $result = drupal_sync_menu_add_link_fields($link, $entity, $remote_site_name);
  if (!empty($result['status']) && $result['status'] == 'error') {
    return $result;
  }

  try {
    $mlid = menu_link_save($link);
  } catch (Exception $e) {
    watchdog('sync_error', 'Error saving menu_item:' . '<pre>' . 'Exception' . print_r($e->getMessage(), TRUE) . ' Menu_item: ' . print_r($link, TRUE) . '</pre>');
    return array(
      'status' => 'error',
      'error_info' => array(
        'exception' => $e->getMessage(),
      )
    );
  }

  return array(
    'status' => 'ok',
    'id' => $mlid,
  );
}

/**
 * Update local menu item
 *
 * @param array $entity
 * @param string $remote_site_name
 *
 * @return array
 */
function drupal_sync_menu_menu_item_update($entity, $remote_site_name) {
  $mlid = drupal_sync_local_store_get_id_by_source($entity['source_eid'], $entity['source_site_id'], 'menu_item');

  $link = menu_link_load($mlid);
  if (empty($link)) {
    return drupal_sync_menu_menu_item_insert($entity, $remote_site_name);
  }

  $result = drupal_sync_menu_add_link_fields($link, $entity, $remote_site_name);
  if (!empty($result['status']) && $result['status'] == 'error') {
    return $result;
  }


  try {
    $mlid = menu_link_save($link);
  } catch (Exception $e) {
    watchdog('sync_error', 'Error saving menu_item:' . '<pre>' . 'Exception' . print_r($e->getMessage(), TRUE) . ' Menu_item: ' . print_r($link, TRUE) . '</pre>');
    return array(
      'status' => 'error',
      'error_info' => array(
        'exception' => $e->getMessage(),
      )
    );
  }

  return array(
    'status' => 'ok',
    'id' => $mlid,
  );
}

/**
 * Delete local menu item
 *
 * @param array $entity
 * @param string $remote_site_name
 *
 * @return array
 */
function drupal_sync_menu_menu_item_delete($entity, $remote_site_name) {
  $mlid = drupal_sync_local_store_get_id_by_source($entity['source_eid'], $entity['source_site_id'], 'menu_item');

  menu_link_delete($mlid);
  return array(
    'status' => 'ok',
    'id' => $mlid,
  );
}

/**
 * Attach fields from menu link, to local menu link
 *
 * @param array $entity_local
 * @param array $entity_remote
 * @param string $entity_type
 */
function drupal_sync_menu_add_link_fields(&$link, $entity, $remote_site_name) {

  $link['menu_name'] = $entity['entity_content_type'];
  $link['drupal_sync_is_remote'] = TRUE;
  $link['drupal_sync_source_eid'] = $entity['source_eid'];
  $link['drupal_sync_source_site_id'] = $entity['source_site_id'];
  $link['drupal_sync_source_changed'] = $entity['source_changed'];
  $link['drupal_sync_remote_site_name'] = $remote_site_name;

  foreach ($entity['entity_fields'] as $key => $value) {
    switch ($key) {
      case 'parent':
        if (!empty($value['mlid']) && !empty($value['source_site_id'])) {
          $local_paret_mlid = drupal_sync_local_store_get_id_by_source($value['mlid'], $value['source_site_id'], 'menu_item');
          if (!empty($local_paret_mlid)) {
            $local_paret_menu_item = menu_link_load($local_paret_mlid);
            if (!empty($local_paret_menu_item)) {
              $link[$key] = $local_paret_menu_item['menu_name'] . ':' . $local_paret_menu_item['mlid'];
              $link['plid'] = $local_paret_menu_item['mlid'];
            }
          }
        }
        break;
      case 'link_path':
        $new_path_value = '';
        if (isset($value['link_type']) && $value['link_type'] == 'node_link') {
          if (!empty($value['source_nid']) && !empty($value['source_nid'])) {
            $local_nid = drupal_sync_local_store_get_id_by_source($value['source_nid'], $value['source_site_id'], 'node');
            if (!empty($local_nid)) {
              $new_path_value = 'node/' . $local_nid;
            }
          }
        }
        elseif (!empty($value['remote_link']) && drupal_valid_path($value['remote_link'])) {
          $new_path_value = $value['remote_link'];
        }

        if (!empty($new_path_value)) {
          $link[$key] = $new_path_value;
        }
        else {
          if (!empty($value['source_nid']) && !empty($value['source_site_id'])) {
            $error_message = t('Invalide link path, cant provide local node for sorce_nid: @nid and sorce_site_id: @id', array('@nid' => $value['source_nid'], '@id' => $value['source_site_id']));
          }
          else {
            $error_message = t('Invalide incoming link_path value: @value', array('@value' => print_r($value, TRUE)));
          }
          return array(
            'status' => 'error',
            'error_info' => array(
              'message' => $error_message,
            )
          );
        }
        break;
      default:
        $link[$key] = $value;
        break;
    }
  }
}

/**
 * Include files from main drupal_sync module
 */
function drupal_sync_menu_include_core_files() {
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.forms');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.api');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.queue');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.entity');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.xmlrpc');
  module_load_include('module', 'drupal_sync', 'drupal_sync');
}