<?php

/**
 * @file
 * Drupal Sync additional module.
 */

/**
 * Implements hook_menu().
 */
function drupal_sync_additional_taxonomy_rules_menu() {
  $items = array();

  $items['admin/config/drupal_sync/drupal_sync_additional_taxonomy_rules'] = array(
    'title' => 'Drupal Sync Additional Taxonomy Rules module settings',
    'description' => 'Sync Additional Taxonomy Rules module settings.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_additional_taxonomy_rules_admin_settings_form'),
    'access arguments' => array('administer drupal sync settings'),
    'file' => 'drupal_sync_additional_taxonomy_rules.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_drupal_sync_settings_submit_form_alter().
 */
function drupal_sync_additional_taxonomy_rules_drupal_sync_settings_submit_form_alter(&$data, $form_state) {
  // save
  foreach ($data['drupal_sync_remote'] as $key => $value) {
    $term_tid = isset($form_state['values']['drupal_sync_settings']['drupal_sync_remote'][$key]['term_tid']) ? $form_state['values']['drupal_sync_settings']['drupal_sync_remote'][$key]['term_tid'] : 0;
    $data['drupal_sync_remote'][$key]['term_tid'] = $term_tid;
  }

  $data['drupal_sync_node_type_field_name'] = drupal_sync_additional_taxonomy_rules_get_node_type_taxonomy_field_name();
}

/**
 * Implements hook_form_alter();
 */
function drupal_sync_additional_taxonomy_rules_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case "drupal_sync_admin_settings_form":
      $settings = variable_get('drupal_sync_settings', array());
      $data = variable_get('drupal_sync_additional_taxonomy_rules_manage_content_type_vocabulary', array(0 => 0));

      $vid = $data[key($data)];
      $node_type = key($data);

      $options = array(0 => t('-- None --'));
      if (!empty($node_type) && !empty($vid)) {
        $terms = taxonomy_get_tree($vid);

        foreach ($terms as $key => $term) {
          $prefix = "";
          for ($i = 0; $i < $term->depth; $i++) {
            $prefix .= "-";
          }
          $options[$term->tid] = $prefix . " " . $term->name;
        }
      }

      $count = (isset($form_state['drupal_sync_remote_num'])) ? $form_state['drupal_sync_remote_num'] : 0;
      if ($count) {
        for ($i = 0; $i < $count; $i++) {
          $form['drupal_sync_settings']['drupal_sync_remote'][$i]['term_tid'] = array(
            '#type' => 'select',
            '#description' => t('Term for sync must be unique for each site.'),
            '#title' => t('Choose term for sync rules'),
            '#default_value' => (isset($settings['drupal_sync_remote'][$i]['term_tid'])) ? $settings['drupal_sync_remote'][$i]['term_tid'] : 0,
            '#options' => $options
          );
        }
        $form['#validate'][] = "drupal_sync_additional_taxonomy_rules_drupal_sync_admin_settings_form_validate";
      }
      break;
  }
}

/**
 * Additional validation for drupal_sync admin settings form
 *
 * @param array $form
 * @param array $form_state
 */
function drupal_sync_additional_taxonomy_rules_drupal_sync_admin_settings_form_validate($form, $form_state) {
  $term_tid_values = array();

  foreach ($form_state['values']['drupal_sync_settings']['drupal_sync_remote'] as $key => $value) {
    if (is_numeric($key)) {
      $term_tid_values[$key] = $value['term_tid'];
    }
  }

  //check term_tid_values duplicates
  $term_tid_duplicate_values = _drupal_sync_get_duplicates_values($term_tid_values);
  if (!empty($term_tid_duplicate_values)) {
    //search term_tid_values duplicates
    foreach ($term_tid_values as $i => $value) {
      if (in_array($value, $term_tid_duplicate_values) && $value != 0) {
        form_set_error('drupal_sync_settings][drupal_sync_remote][' . $i . '][term_tid', 'Error, term for sync must be unique for each site');
      }
    }
  }
}

/**
 * Get taxonomy field name which related to node
 *
 * @return string
 */
function drupal_sync_additional_taxonomy_rules_get_node_type_taxonomy_field_name() {
  $data = variable_get('drupal_sync_additional_taxonomy_rules_manage_content_type_vocabulary', array(0 => 0));
  list($node_type, $vid) = each($data);
  $voc = taxonomy_vocabulary_load($vid);

  $properties = entity_get_property_info('node');
  $fields = isset($properties['bundles'][$node_type]['properties']) ? $properties['bundles'][$node_type]['properties'] : array();

  $node_type_field_name = '';
  foreach ($fields as $field_name => $field_data) {
    if (isset($field_data['bundle']) && $field_data['bundle'] == $voc->machine_name) {
      $node_type_field_name = $field_name;
      break;
    }
  }
  return $node_type_field_name;
}



/**
 * Implements hook_drupal_sync_add_to_queue_alter().
 *
 * @param array $entity_data
 */
function drupal_sync_additional_taxonomy_rules_drupal_sync_add_to_queue_alter($entity, &$entity_data, &$op) {
  // SEND to remote
  $data = variable_get('drupal_sync_additional_taxonomy_rules_manage_content_type_vocabulary', array(0 => 0));
  $node_type = key($data);

  $settings = variable_get('drupal_sync_settings', array());
  $node_type_field_name = (isset($settings['drupal_sync_node_type_field_name'])) ? $settings['drupal_sync_node_type_field_name'] : '';

  $available_terms = drupal_sync_additional_taxonomy_rules_get_available_terms($settings);

  if (isset($entity_data['entity_content_type']) && $entity_data['entity_content_type'] != $node_type) {
    return TRUE;
  }

  if (isset($entity['remote_site_name']) && !empty($node_type_field_name)) {
    // get selected term from node
    $local_tids_data = (isset($entity[$node_type_field_name][LANGUAGE_NONE])) ? $entity[$node_type_field_name][LANGUAGE_NONE] : array();
    $local_tids = array();
    foreach ($local_tids_data as $key => $tid) {
      $local_tids[$key] = $tid['tid'];
    }

    $previous_local_tids_data = (isset($entity['original']->{$node_type_field_name}[LANGUAGE_NONE])) ? $entity['original']->{$node_type_field_name}[LANGUAGE_NONE] : array();
    $previous_local_tids = array();
    foreach ($previous_local_tids_data as $key => $tid) {
      $previous_local_tids[$key] = $tid['tid'];
    }
    // get remote site tid
    $send_to_tid = (isset($available_terms[$entity['remote_site_name']])) ? $available_terms[$entity['remote_site_name']] : NULL;

    if (!empty($send_to_tid)) {
      if (!in_array($send_to_tid, $local_tids)) {

        if (in_array($send_to_tid, $previous_local_tids)) {
          // if site not choosed in node term referense, but was chosen before node update, change op to delete for this site
          $op = 'delete';

          //delete not sended other operations in queue for this remote site if exist
          drupal_sync_delete_from_queue_by_filter('node', $entity['remote_site_name'], $entity_data['entity_id']);

          if (drupal_sync_count_relations($entity_data['entity_id'], 'node') <= 1) {
            //if it's last relation, delete all old not sended operations
            db_delete('drupal_sync_queue')
                ->condition('entity_id', $entity_data['entity_id'])
                ->condition('entity_type', 'node')
                ->condition('created', REQUEST_TIME, '<>')
                ->execute();
          }

          //delete sync relation to the remote entity of this remote_site
          drupal_sync_local_store_delete_remote_site($entity_data['entity_id'], 'node', $entity['remote_site_name']);
        }
        else {
           //if site not choosed in node term refferense, so we not do sync
          $entity_data = array();
        }

      }
    }
  }

}

/**
 * Get dependence remove site name from term tids
 *
 * @param array $settings
 *
 * @return array
 */
function drupal_sync_additional_taxonomy_rules_get_available_terms($settings) {
  $remote = isset($settings['drupal_sync_remote']) ? $settings['drupal_sync_remote'] : array();
  $data = array();
  foreach ($remote as $site) {
    if (isset($site['term_tid'])) {
      $data[$site['name']] = $site['term_tid'];
    }
  }
  return $data;
}

/**
 * Implements hook_drupal_sync_entity_node_insert_alter().
 */
function drupal_sync_additional_taxonomy_rules_drupal_sync_entity_node_insert_alter(&$entity, &$node, &$remote_site_name) {
  $settings = variable_get('drupal_sync_settings', array());
  $node_type_field_name = (isset($settings['drupal_sync_node_type_field_name'])) ? $settings['drupal_sync_node_type_field_name'] : '';
  $available_terms = drupal_sync_additional_taxonomy_rules_get_available_terms($settings);

  $data = variable_get('drupal_sync_additional_taxonomy_rules_manage_content_type_vocabulary', array(0 => 0));
  $node_type = key($data);

  if (isset($node->type) && $node->type == $node_type && isset($available_terms[$node->drupal_sync_remote_site_name])) {
    $tag_tid = $available_terms[$node->drupal_sync_remote_site_name];
    // add tag to node.
    $tids_tree = taxonomy_get_parents_all($tag_tid);

    foreach ($tids_tree as $key => $term) {
      $node->{$node_type_field_name}[LANGUAGE_NONE][] = array('tid' => $term->tid);
    }
  }
}

/**
 * Implements hook_drupal_sync_processings_incoming_operation_before_alter().
 */
function drupal_sync_additional_taxonomy_rules_drupal_sync_processings_incoming_operation_before_alter(&$op_result, $entity, $context) {

  if ($context['op'] == 'update' || $context['op'] == 'delete' && $context['type'] == 'node') {
    $settings = variable_get('drupal_sync_settings', array());
    $node_type_field_name = (isset($settings['drupal_sync_node_type_field_name'])) ? $settings['drupal_sync_node_type_field_name'] : '';
    $available_terms = drupal_sync_additional_taxonomy_rules_get_available_terms($settings);

    $data = variable_get('drupal_sync_additional_taxonomy_rules_manage_content_type_vocabulary', array(0 => 0));
    $node_type = key($data);

    if ($entity['entity_content_type'] == $node_type) {
      if (!empty($available_terms[$context['remote_site_name']])) {
        $local_node_info = drupal_sync_get_local_store_info_for_remote_site($entity['entity_id'], $context['type'], $context['remote_site_name']);
        if (empty($local_node_info)) {
          //if we dont have drupal_sync relation in local storage, return 'OK' result and dont process this operation
          $op_result = array(
            'status' => 'ok',
            'id' => 0,
          );
        }
      }
    }
  }
}