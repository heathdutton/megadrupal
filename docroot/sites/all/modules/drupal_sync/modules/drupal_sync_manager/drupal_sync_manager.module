<?php

/**
 * @file
 * Drupal Sync manager module.
 */

/**
 * Implements hook_menu().
 */
function drupal_sync_manager_menu() {
  $items = array();

  $items['admin/config/drupal_sync/drupal_sync_manager'] = array(
    'title' => 'Drupal Sync manager',
    'description' => 'Manager sync operations.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_sync_manager_queue',
    'access arguments' => array('administer drupal sync settings'),
  );


  $items['admin/config/drupal_sync/drupal_sync_manager/queue/edit'] = array(
    'title' => 'Queue of synchronization',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/drupal_sync/drupal_sync_manager/queue/clear_error_status/%'] = array(
    'title' => 'Remove row from queue of synchronization',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_sync_manager_clear_error_status',
    'page arguments' => array( 6),
    'access arguments' => array('administer drupal sync settings'),
  );

  $items['admin/config/drupal_sync/drupal_sync_manager/queue/remove/%'] = array(
    'title' => 'Remove row from queue of synchronization',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_manager_queue_delete_confirm', 6),
    'access arguments' => array('administer drupal sync settings'),
  );

  $items['admin/config/drupal_sync/drupal_sync_manager/queue/relations'] = array(
    'title' => 'Relations of synchronization',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer drupal sync settings'),
    'page callback' => 'drupal_sync_manager_relations',
  );

  $items['admin/config/drupal_sync/drupal_sync_manager/local_operations/inprogress'] = array(
    'title' => 'Incoming operations in progress',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer drupal sync settings'),
    'page callback' => 'drupal_sync_manager_operations_in_progress',
    'weight' => 10,
  );

  $items['admin/config/drupal_sync/drupal_sync_manager/queue/relations/remove/%'] = array(
    'title' => 'Remove relations in synchronization',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_manager_relations_delete_confirm', 7),
    'access arguments' => array('administer drupal sync settings'),
  );

  $items['admin/config/drupal_sync/drupal_sync_manager/inprogress/operations/remove/%'] = array(
    'title' => 'Remove relations in synchronization',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_manager_inprogress_operations_delete_confirm', 7),
    'access arguments' => array('administer drupal sync settings'),
  );

  return $items;
}

/**
 * Menu callback. Queue manager page.
 *
 * @return string
 *  Page HTML
 */
function drupal_sync_manager_queue() {
  drupal_add_css(drupal_get_path('module', 'drupal_sync_manager') . "/css/drupal_sync_manager.css");
  $output = '';

  $header = array(
    array('data' => t('Operation'), 'field' => 'operation'),
    array('data' => t('Type'), 'field' => 'entity_type'),
    array('data' => t('ID'), 'field' => 'entity_id'),
    array('data' => t('Remote site'), 'field' => 'remote_site_id'),
    array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc'),
    array('data' => t('Status'), 'field' => 'status'),
    array('data' => t('Operation')),
  );
  $rows = array();

  $query = db_select("drupal_sync_queue", "dsq");
  $query->fields('dsq', array('id', 'operation', 'entity_type', 'entity_id', 'remote_site_id', 'created', 'status'));
  $query = $query->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
  $result = $query->execute();

  while ($data = $result->fetchObject()) {
    $edit_link = module_invoke_all('drupal_sync_manager_entity_edit_link', $data->entity_type, $data->entity_id);
    $edit_link = (isset($edit_link[0])) ? $edit_link[0] : '';

    $operations = ($edit_link) ? l("[" . t('Edit entity') . "]", $edit_link) : '';
    $operations .= " " . l("[" . t('Remove from queue') . "]", "admin/config/drupal_sync/drupal_sync_manager/queue/remove/" . $data->id);
    $operations .= " " . l("[" . t('Remove Error Status') . "]", "admin/config/drupal_sync/drupal_sync_manager/queue/clear_error_status/" . $data->id, array('query' => drupal_get_destination()));

    $rows[] = array(
      'data' => array(
        $data->operation,
        $data->entity_type,
        $data->entity_id,
        $data->remote_site_id,
        format_date($data->created, 'shot'),
        $data->status,
        $operations,
      ),
      'class' => ($data->status != 'awaiting') ? array('drupal_sync_failures_queue_row') : array()
    );
  }


  $output = l("[" . t('Run drupal sync manually') . "]", "run-drupal-sync") . "<br><br>";

  $output .= l("[" . t('Remove all items from queue') . "]", "admin/config/drupal_sync/drupal_sync_manager/queue/remove/all") . "<br><br>";

  $output .= theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array(),
        'sticky' => TRUE,
        'caption' => "",
        'colgroups' => array(),
        'empty' => t("Table has no row!")
          )
      ) . theme('pager');
  return $output;
}

/**
 * Confirm delete queue row form
 *
 * @param array $form_state
 * @param int $qid
 *
 * @return array
 */
function drupal_sync_manager_queue_delete_confirm($form, &$form_state, $qid) {
  $form['qid'] = array(
    '#type' => 'value',
    '#value' => $qid,
  );
  return confirm_form($form, t('Are you sure you want to delete queue row ID: #qid ?', array("#qid" => check_plain($qid))), 'admin/config/drupal_sync/drupal_sync_manager/queue', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Confirm delete queue row submit
 *
 * @param array $form
 * @param array $form_state
 */
function drupal_sync_manager_queue_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    if (isset($form_state['values']['qid']) && $form_state['values']['qid'] == 'all') {
      db_delete("drupal_sync_queue")->execute();
      drupal_set_message(t('Queue has been cleared.'));
    }
    elseif (isset($form_state['values']['qid']) && is_numeric($form_state['values']['qid'])) {
      db_delete("drupal_sync_queue")
          ->condition('id', $form_state['values']['qid'])
          ->execute();
      drupal_set_message(t('Queue row has been deleted.'));
    }
  }

  drupal_goto('admin/config/drupal_sync/drupal_sync_manager/queue');
}

/**
 * Page callback, in progress operations manager page
 *
 * @return string
 */
function drupal_sync_manager_operations_in_progress() {
   drupal_add_css(drupal_get_path('module', 'drupal_sync_manager') . "/css/drupal_sync_manager.css");
  $output = '';

  $header = array(
    array('data' => t('Source Entity ID'), 'field' => 'source_eid'),
    array('data' => t('Type'), 'field' => 'entity_type'),
    array('data' => t('Source site id'), 'field' => 'source_site_id'),
    array('data' => t('Changed Time'), 'field' => 'source_changed'),
    array('data' => t('Operation.'), 'field' => 'operation'),
  );

  $rows = array();

  $query = db_select("drupal_sync_in_progress", "ds");
  $query->fields('ds', array('source_eid', 'entity_type', 'source_site_id', 'source_changed', 'operation'));
  $query = $query->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
  $result = $query->execute();

  while ($data = $result->fetchObject()) {

    $rows[] = array(
      'data' => array(
        $data->source_eid,
        $data->entity_type,
        $data->source_site_id,
        format_date($data->source_changed, 'shot'),
        $data->operation,
      ),
      'class' => array()
    );
  }

  $output = '<h4>' . t('In this table are pending transactions that come from other sites. Possible during operations error occurred.') . '</h4>';
  $output .= l("[" . t('Remove all in progress operations') . "]", "admin/config/drupal_sync/drupal_sync_manager/inprogress/operations/remove/all") . "<br><br>";

  $output .= theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array(),
        'sticky' => TRUE,
        'caption' => "",
        'colgroups' => array(),
        'empty' => t("Table has no row!")
          )
      ) . theme('pager');
  return $output;
}

/**
 * Menu callback. Queue manager page
 *
 * @return string
 */
function drupal_sync_manager_relations() {
  drupal_add_css(drupal_get_path('module', 'drupal_sync_manager') . "/css/drupal_sync_manager.css");
  $output = '';

  $header = array(
    array('data' => t('Entity ID'), 'field' => 'eid'),
    array('data' => t('Remore entity ID'), 'field' => 'reid'),
    array('data' => t('Type'), 'field' => 'entity_type'),
    array('data' => t('Remote site'), 'field' => 'site_id'),
    array('data' => t('The entity identifier for first source.'), 'field' => 'source_eid'),
    array('data' => t('Source site'), 'field' => 'source_site_id'),
    array('data' => t('Source operation date'), 'field' => 'source_changed', 'sort' => 'desc'),
    array('data' => t('Operation')),
  );

  $rows = array();

  $query = db_select("drupal_sync", "ds");
  $query->fields('ds', array('eid', 'reid', 'entity_type', 'site_id', 'source_eid', 'source_site_id', 'source_changed'));
  $query = $query->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
  $result = $query->execute();

  while ($data = $result->fetchObject()) {
    $edit_link = module_invoke_all('drupal_sync_manager_entity_edit_link', $data->entity_type, $data->eid);
    $edit_link = $edit_link[0];

    $operations = ($edit_link) ? l("[" . t('Edit entity') . "]", $edit_link) : '';

    $rows[] = array(
      'data' => array(
        $data->eid,
        $data->reid,
        $data->entity_type,
        $data->site_id,
        $data->source_eid,
        $data->source_site_id,
        format_date($data->source_changed, 'shot'),
        $operations,
      ),
      'class' => array()
    );
  }

  $output = l("[" . t('Remove all relations') . "]", "admin/config/drupal_sync/drupal_sync_manager/queue/relations/remove/all") . "<br><br>";

  $output .= theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array(),
        'sticky' => TRUE,
        'caption' => "",
        'colgroups' => array(),
        'empty' => t("Table has no row!")
          )
      ) . theme('pager');
  return $output;
}



/**
 * Confirm delete relations form
 *
 * @param array $form_state
 * @param int $qid
 *
 * @return array
 */
function drupal_sync_manager_relations_delete_confirm($form, &$form_state, $rel) {
  $form['rel'] = array(
    '#type' => 'value',
    '#value' => $rel,
  );
  return confirm_form($form, t('Are you sure you want to delete #rel relations ?', array("#rel" => check_plain($rel))), 'admin/config/drupal_sync/drupal_sync_manager/queue/relations', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Confirm delete relations submit
 *
 * @param array $form
 * @param array $form_state
 */
function drupal_sync_manager_relations_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    if (isset($form_state['values']['rel']) && $form_state['values']['rel'] == 'all') {
      db_delete("drupal_sync")->execute();
      db_delete("drupal_sync_in_progress")->execute();
      drupal_set_message(t('Relations has been removed.'));
    }
  }
  drupal_goto('admin/config/drupal_sync/drupal_sync_manager/queue/relations');
}

/**
 * Confirm delete inprogress operations submit
 *
 * @param array $form
 * @param array $form_state
 */
function drupal_sync_manager_inprogress_operations_delete_confirm($form, &$form_state, $rel) {

  $form['rel'] = array(
    '#type' => 'value',
    '#value' => $rel,
  );
  return confirm_form($form, t('Are you sure you want to delete all operations ?', array("#rel" => check_plain($rel))), 'admin/config/drupal_sync/drupal_sync_manager/queue/relations', t('This action cannot be undone.'), t('Delete ALL'), t('Cancel'));
}

/**
 * Confirm delete inprogress operations submit
 *
 * @param array $form
 * @param array $form_state
 */
function drupal_sync_manager_inprogress_operations_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    if (isset($form_state['values']['rel']) && $form_state['values']['rel'] == 'all') {
      db_delete("drupal_sync_in_progress")->execute();
      drupal_set_message(t('All operations has been removed.'));
    }
  }
  drupal_goto('admin/config/drupal_sync/drupal_sync_manager/local_operations/inprogress');
}

/**
 * Menu callback, remove error status for sync queue operation
 *
 * @param int $sync_op_id
 */
function drupal_sync_manager_clear_error_status($sync_op_id) {
  if (!empty($sync_op_id) && is_numeric($sync_op_id)) {
    db_update('drupal_sync_queue')
        ->fields(array(
          'status' => 'awaiting'
        ))
        ->condition('id', $sync_op_id)
        ->execute();
    drupal_set_message(t('Error status has been removed. You can try send this operation again.'), 'status');
    drupal_goto();
  }
  else {
    druapl_set_message('Invalid id parameter', 'error');
    drupal_goto();
  }
}

/**
 * Implements hook_drupal_sync_manager_entity_edit_link().
 */
function drupal_sync_manager_drupal_sync_manager_entity_edit_link($entity_type, $entity_id) {
  $edit_link = NULL;
  switch ($entity_type) {
    case 'node':
      $edit_link = 'node/' . $entity_id . "/edit";
      break;
    case 'taxonomy_term':
      $edit_link = 'taxonomy/term/' . $entity_id . "/edit";
      break;
  }
  return $edit_link;
}
