<?php

/**
 * @file
 * Drupal Sync module.
 */
define('DRUPAL_SYNC_MAX_ERRORS', 3);

  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.api');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.xmlrpc');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.entity');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.queue');
  module_load_include('inc', 'drupal_sync', 'includes/drupal_sync.forms');
  module_load_include('inc', 'drupal_sync', 'drupal_sync.admin');

/**
 * Implements hook_menu().
 */
function drupal_sync_menu() {
  $items = array();

  $items['admin/config/drupal_sync'] = array(
    'title' => 'Drupal Sync',
    'description' => 'Adjust Drupal Sync options.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/drupal_sync/settings'] = array(
    'title' => 'Drupal Sync settings',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer drupal sync settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_admin_settings_form'),
    'file' => 'drupal_sync.admin.inc',
  );

  $items['admin/config/drupal_sync/settings/edit'] = array(
    'title' => 'Drupal Sync settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );


  $items['admin/config/drupal_sync/settings/backup'] = array(
    'title' => 'Drupal Sync settings backup/restore',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer drupal sync settings'),
    'page callback' => 'drupal_sync_settings_backup',
    'file' => 'drupal_sync.admin.inc',
  );


  $items['run-drupal-sync'] = array(
    'title' => 'Run drupal sync manually',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_sync_run_manually',
    'access arguments' => array('administer drupal sync settings'),
  );


  //add node sync settings tab
  $items['admin/structure/types/manage/%node_type/sync_settings'] = array(
    'title' => 'Synchronization settings',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'drupal_sync_access_entity_settings_menu_tabs',
    'access arguments' => array('node', 4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_add_entity_sync_settings_form', 'node', 4),
  );

  //add taxonomy sync settings tab
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/sync_settings'] = array(
    'title' => 'Synchronization settings',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'drupal_sync_access_entity_settings_menu_tabs',
    'access arguments' => array('taxonomy_term', 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_sync_add_entity_sync_settings_form', 'taxonomy_term', 3),
  );
  return $items;
}

/***********************************************************
 * Menu callbacks
 ***********************************************************/

/**
 * Manually run drupal sync process.
 */
function drupal_sync_run_manually() {
  drupal_sync_run_sync();
  drupal_set_message(t("Drupal sync ran successfully."));
  drupal_goto("admin/config/drupal_sync/drupal_sync_manager");
}

/**
 * Menu access callback
 *
 * @param type $entity_type
 * @param type $entity_type_obj
 *
 * @return boolean
 */
function drupal_sync_access_entity_settings_menu_tabs($entity_type, $entity_type_obj) {
  if (!user_access('administer drupal sync settings')) {
    return FALSE;
  }
  else {
    $drupal_sync_settings = variable_get('drupal_sync_settings', array());
    $entity_type_id = _drupal_sync_get_entity_type_id($entity_type, $entity_type_obj);
    if (isset($drupal_sync_settings['drupal_sync_entities'][$entity_type][$entity_type_id])) {
      return TRUE;
    }
  }
  return FALSE;
}

/***********************************************************
 * Hooks implementations
 ***********************************************************/

/**
 * Implements of hook_cron().
 */
function drupal_sync_cron() {
  $last_update_time = variable_get('drupal_sync_update_last_time', 0);
  if ((time() - $last_update_time) > variable_get('drupal_sync_queue_update_frequency', 0)) {
    variable_set('drupal_sync_update_last_time', time());
    // start synct
    drupal_sync_run_sync();
  }
}

/**
 * Implements hook_init().
 */
function drupal_sync_init() {

  if (!drupal_sync_check_site_domain()) {
    $message = t('Drupal sync settings is wrong. Check settings and site domain !link.', array('!link' => l(t("here"), 'admin/config/drupal_sync/settings')));
    drupal_set_message($message, 'warning');
  }
}

/**
 * Implements hook_permission().
 */
function drupal_sync_permission() {
  return array(
    'administer drupal sync settings' => array(
      'title' => t('Administer drupal sync settings'),
      'description' => t('Administer drupal sync settings'),
    ),
    'access drupal sync' => array(
      'title' => t('Access to Drupal Sync'),
      'description' => t('Access to Drupal Sync'),
    ),
  );
}

/***********************************************************
 * Module functions
 ***********************************************************/

/**
 * Get entity type id
 *
 * @param type $entity_type
 * @param type $entity_type_obj
 *
 * @return type
 */
function _drupal_sync_get_entity_type_id($entity_type, $entity_type_obj) {
  $type_id = NULL;
  switch ($entity_type) {
    case 'node' :
      $type_id =  $entity_type_obj->type;
      break;
    case 'taxonomy_term':
      $type_id =  $entity_type_obj->vid;
      break;
  }

  drupal_alter('drupal_sync_get_entity_type_id', $type_id, $entity_type, $entity_type_obj);

  return isset($type_id) ? $type_id : NULL ;
}

/**
 * Get entity type id
 *
 * @param type $entity_type
 * @param array $entity
 *
 * @return type
 */
function _drupal_sync_get_entity_id($entity_type, $entity) {
  $type_id = NULL;
  switch ($entity_type) {
    case 'node' :
      $type_id =  $entity['nid'];
      break;
    case 'taxonomy_term':
      $type_id =  $entity['tid'];
      break;
  }

  drupal_alter('drupal_sync_get_entity_id', $type_id, $entity_type, $entity);

  return isset($type_id) ? $type_id : NULL ;
}

/**
 * Make 'sha256' hash based on site info, and curent time
 *
 * @return string
 */
function drupal_sync_make_site_id_hash() {

  $data =  $_SERVER['HTTP_HOST'];
  $data_hash = hash('sha256', $data);
  return $data_hash;
}
