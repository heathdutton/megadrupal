<?php
/**
 * @file
 * Edge suite primary module file.
 *
 * TODO
 *
 * General:
 * - Readme update
 * - Hooks: Hook access
 * - UI improvements
 * - JQuery replace
 *
 * Build process:
 * - Edge version file diff
 *
 * Composition:
 * - Add replace functionality (!)
 * - Add archive download
 * - Change construction of JS AdobeEdge variable (static) and namespace.
 * - Theme template for stage, add width and height (!)
 *
 * Block config:
 * - Integrate block and instance configuration
 *
 * Global settings:
 * - Configurable group weight
 *
 * Other
 * - Permissions(!)
 *
 * Roadmap:
 * - Field support (!)
 * - Font/CSS support (showcases: shadow, perspective)
 * - Panels support
 */

define('EDGE_SUITE_PUBLIC_DIR', 'public://edge_suite');
define('EDGE_SUITE_PRIVATE_DIR', 'private://edge_suite');
define('EDGE_SUITE_COMP_ARCHIVE_DIR', EDGE_SUITE_PRIVATE_DIR . '/comp_src');
define('EDGE_SUITE_COMP_PROJECT_DIR', EDGE_SUITE_PUBLIC_DIR . '/project');

require_once 'includes/edge_suite_comp.inc';

/**
 * Implements hook_menu().
 */
function edge_suite_menu() {
  $items['admin/config/media/edge_suite'] = array(
    'title' => 'Edge Suite',
    'description' => 'Configure general Edge Suite settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_settings'),
    'access arguments' => array('administer edge suite'),
    'file' => 'includes/edge_suite.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/edge_suite'] = array(
    'title' => 'Edge Suite',
    'description' => 'Import, manage and configure your Edge content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_admin_form'),
    'access arguments' => array('administer edge suite'),
    'file' => 'includes/edge_suite.admin.inc',
  );

  // Composition definition actions: add instance, rebuild, delete.
  // TODO: implement reupload.
  $items['admin/structure/edge_suite/%/add'] = array(
    'title' => 'Add instance',
    'description' => 'Add a new instance of a compositions, e.g. a block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_instance_form_add', 3),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('create instance', 3),
    'file' => 'includes/edge_suite.admin.inc',
  );

  $items['admin/structure/edge_suite/%/edit/%'] = array(
    'title' => 'Edit composition instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_instance_form_edit', 3, 5),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('edit instance', 3, 5),
    'file' => 'includes/edge_suite.admin.inc',
  );

  $items['admin/structure/edge_suite/%/reupload'] = array(
    'title' => 'Reupload composition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_definition_reupload_confirm', 3),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('reupload definition', 3),
    'file' => 'includes/edge_suite.admin.inc',
  );

  $items['admin/structure/edge_suite/%/delete'] = array(
    'title' => 'Delete composition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_definition_delete_confirm', 3),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('delete definition', 3),
    'file' => 'includes/edge_suite.admin.inc',
  );

  $items['admin/structure/edge_suite/%/rebuild'] = array(
    'title' => 'Rebuild composition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_definition_rebuild_confirm', 3),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('rebuild definition', 3),
    'file' => 'includes/edge_suite.admin.inc',
  );

  // Composition instance actions: test, edit, delete.
  $items['admin/structure/edge_suite/%/test/%'] = array(
    'title' => 'Instance testing',
    'description' => 'Testing of an instance',
    'page callback' => 'edge_suite_comp_view',
    'page arguments' => array(5),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('test instance', 3, 5),
    'file' => 'includes/edge_suite.admin.inc',
  );

  $items['admin/structure/edge_suite/%/delete/%'] = array(
    'title' => 'Delete composition instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edge_suite_instance_delete_confirm', 3, 5),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('delete instance', 3, 5),
    'file' => 'includes/edge_suite.admin.inc',
  );

  $items['edge_suite/iframe/%'] = array(
    'title' => 'Edge iframe',
    'page callback' => 'edge_suite_comp_view',
    'page arguments' => array(2, TRUE),
    'access callback' => 'edge_suite_access',
    'access arguments' => array('view iframe', 3),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function edge_suite_permission() {
  return array(
    'administer edge suite' => array(
      'title' => t('Administer Edge suite'),
      'description' => t('Fully administrate Edge suite.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Check if the current user is allowed to perform the given operation.
 *
 * @param string $operation
 *   The operation that should be checked
 * @param int $definition_id
 *   Composition definition id
 * @param int $instance_id
 *   Composition instance id
 *
 * @return bool
 *   True if operation is allowed, false otherwise.
 * @todo implement access callbacks and permissions.
 */
function edge_suite_access($operation = 'view', $definition_id = NULL, $instance_id = NULL) {
  if (user_access('administer edge suite')) {
    return TRUE;
  }

  if ($definition_id == NULL && $instance_id == NULL) {
    return FALSE;
  }
  return FALSE;

}

/**
 * Implements hook_block_info().
 */
function edge_suite_block_info() {
  $blocks = array();
  // Check if blocks are enabled.
  if (variable_get('edge_suite_block_enable', TRUE)) {
    // Get all available composition instances.
    $query = db_select('edge_suite_composition_instance', 'i');
    $query->leftJoin('edge_suite_composition_definition', 'd', 'i.definition_id = d.definition_id');
    $rows = $query->fields('i')
      ->fields('d')
      ->execute();

    // Provide a block for each composition instance.
    if ($rows->rowCount() > 0) {
      foreach ($rows as $row) {
        // Use a prefix and the instance id to be able to identify the block
        // when it's rendered.
        $blocks['edge_suite_composition_block_' . $row->instance_id] = array(
          'info' => t('Edge composition: @project - @label', array(
            '@project' => $row->project_name,
            '@label' => $row->label,
          )),
        );
      }
    }
  }
  return $blocks;
}

/**
 * Implements block_view().
 */
function edge_suite_block_view($delta = '') {
  $block = array(
    'subject' => '',
    'content' => '',
  );

  // Todo: Remove check so that blocks on a page show up even though blocks are
  // disabled?
  // Check if blocks are enabled.
  if (variable_get('edge_suite_block_enable', TRUE)) {
    // Extract the instance id from the delta.
    $instance_id = edge_suite_delta_to_id($delta);

    // Render composition.
    if ($instance_id > 0) {
      $block['content'] = edge_suite_comp_view($instance_id);
    }
  }

  return $block;
}

/**
 * Implements hook_form_alter().
 */
function edge_suite_form_alter(&$form, &$form_state, $form_id) {

}

/**
 * Implements hook_page_alter().
 */
function edge_suite_page_alter(&$page) {
  // TODO: Only consider adding X-UA when showing a composition.
  // TODO: X-UA still needed at all?
  if (variable_get('edge_suite_xua_compatible', FALSE)) {
    $data = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'http-equiv' => "X-UA-Compatible",
        'content' => "IE=edge",
      ),
      // TODO: Move further up?
      '#weight' => '-999',
    );

    drupal_add_html_head($data, 'edge_suite_compatible');
  }
}

/***** HELPER FUNCTIONS *****/

/**
 * Extract the Edge id from a delta used in an edge block.
 *
 * @param string $delta
 *   The delta value of an edge block
 *
 * @return int
 *   The id of the composition which is shown in the block
 */
function edge_suite_delta_to_id($delta) {
  $id = -1;
  $matches = array();

  // Extract the key from the delta value.
  $found = preg_match('/^edge_suite_composition_block_([0-9]*)/', $delta, $matches);
  if ($found && count($matches) == 2) {
    // Fetch id.
    $id = intval($matches[1]);
  }
  return $id;
}

/**
 * Convert schema path to the according relative real path.
 *
 * Converts e.g. public://edge_suite to /sites/default/files/edge_suite
 *
 * @param string $schema_path
 *   Schema path
 *
 * @return null
 *   Returns the relative real path, null if conversion fails
 */
function edge_suite_schema_to_relative_real_path($schema_path) {
  $path = NULL;
  $url = file_create_url($schema_path);
  $url_parts = parse_url($url);
  if (isset($url_parts['path'])) {
    $path = $url_parts['path'];
  }
  return $path;
}
