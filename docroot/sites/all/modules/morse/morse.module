<?php
/**
 * @file
 * morse.module
 * Converts the alphanumeric values into morse code and
 * Morse code into alphanumeric value.
 */

/**
 * Implements hook_help().
 */
function morse_help($path, $arg) {
  switch ($path) {
    case 'admin/help#morse':
      $output = '<p>' . t('The morse module converts alphanumeric values into morse code') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_perm().
 */
function morse_perm() {
  return array('access morse converter');
}

/**
 * Implements hook_menu().
 */
function morse_menu() {
  $items = array();
  $items['morse'] = array(
    'title' => 'Morse converter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('morse',1),
    'access arguments' => array('access morse converter'),
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Enter the alphanumeric value to convert to morse.',
  );

  $items['morse/arebic'] = array(
    'title' => 'Morse to Arebic',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('morse_arebic',1),
    'access arguments' => array('access morse converter'),
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Enter the morse value to convert to alphanumeric message.',
  );
  return $items;
}

/**
 * Form constructor for generating the form to take alphabetical values.
 *
 * @see morse_submit()
 */
function morse(&$form, $form_state) {
  $form = array();
  static $output;
  $form['alphabet'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter the Code to be converted.'),
    '#required' => TRUE,
    '#description' => t("Please do not enter any special character other than A-Z and 0-9."),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Convert'),
    '#weight' => 30,
  );

  return $form;
}

/**
 * Form submission handler for morse() function.
 */
function morse_submit($form, &$form_state) {
  $alphabets = $form_state['values']['alphabet'];
  $output = morse_convert_to_morse($alphabets);
  drupal_set_message($output);
}

/**
 * Function to convert alphanumeric to morse code.
 *
 * @param string $alphabets
 *   A string which needs to be converted into morse.
 *
 * @return output
 *   A string with morse code.
 */
function morse_convert_to_morse($alphabets) {
  $morse_codes = _morse_alphabets();
  $bigarr = str_split($alphabets);
  foreach ($bigarr as $key => $value) {
    if (array_key_exists($value, $morse_codes)) {
      $output .= $morse_codes[$value] . "  ";
    }
    elseif ($value == " ") {
      $output .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
    }
  }
  return $output;
}


/**
 * Form constructor for generating the form to take morse values.
 *
 * @see morse_arebic_submit()
 */
function morse_arebic($form, $form_state) {
  $form = array();
  $form['morse'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter the morse code here.'),
    '#required' => TRUE,
    '#description' => t("Enter the valid morse code to avoid wrong ouput."),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Convert'),
    '#weight' => 30,
  );
  return $form;
}

/**
 * Form submission handler for morse_arebic() function.
 */
function morse_arebic_submit($form, &$form_state) {
  $morsecode = $form_state['values']['morse'];
  $output = morse_convert_to_arebic($morsecode);
  drupal_set_message($output);
}

/**
 * Function to convert morse to alphanumeric language.
 *
 * @param string $morsecode
 *   A string in morse format which needs to be converted into alphanumeric.
 *
 * @return output
 *   A string Alphanumeric value of morse code.
 */
function morse_convert_to_arebic($morsecode) {
  $morse_codes = _morse_alphabets();
  $alpha = explode("       ", $morsecode);
  foreach ($alpha as $key => $value) {
    if ($value) {
      $innerword = explode(" ", $value);
      foreach ($innerword as $k => $v) {
        if (in_array($v, $morse_codes)) {
          $output .= array_search($v, $morse_codes);
        }
        else {
          $output .= "";
        }
      }
      $output .= " ";
    }
  }
  return $output;
}

/**
 * Helper function to get array of morse and alphanumeric words.
 * @return array
 *   Array of morse codes.
 */
function _morse_alphabets() {
  // Defined morse variables in array.
  return array(
    "A" => ".-",
    "B" => "-...",
    "C" => "-.-.",
    "D" => "-..",
    "E" => ".",
    "F" => "..-.",
    "G" => "--.",
    "H" => "....",
    "I" => "..",
    "J" => ".---",
    "K" => "-.-",
    "L" => ".-..",
    "M" => "--",
    "N" => "-.",
    "O" => "---",
    "P" => ".--.",
    "Q" => "--.-",
    "R" => ".-.",
    "S" => "...",
    "T" => "-",
    "U" => "..-",
    "V" => "...-",
    "W" => ".--",
    "X" => "-..-",
    "Y" => "-.--",
    "Z" => "--..",
    "a" => ".-",
    "b" => "-...",
    "c" => "-.-.",
    "d" => "-..",
    "e" => ".",
    "f" => "..-.",
    "g" => "--.",
    "h" => "....",
    "i" => "..",
    "j" => ".---",
    "k" => "-.-",
    "l" => ".-..",
    "m" => "--",
    "n" => "-.",
    "o" => "---",
    "p" => ".--.",
    "q" => "--.-",
    "r" => ".-.",
    "s" => "...",
    "t" => "-",
    "u" => "..-",
    "v" => "...-",
    "w" => ".--",
    "x" => "-..-",
    "y" => "-.--",
    "z" => "--..",
    "1" => ".----",
    "2" => "..---",
    "3" => "...--",
    "4" => "....-",
    "5" => ".....",
    "6" => "-....",
    "7" => "--...",
    "8" => "---..",
    "9" => "----.",
    "0" => "-----",
    "." => ".-.-.-",
    "," => "--..--",
    "?" => "..--..",
    "/" => "-..-.",
    "@" => ".--.-.",
  );
}
