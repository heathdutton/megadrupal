<?php

/** 
 * Scans our directory structure to find all options and choices to expose to 
 * the user
 *
 * @return array keyed by option name and the available options keyed by file
 * URI and the filename omitting the .css extension as the choice name.
 */
function css_options_get_options($theme) {
  $css = &drupal_static(__FUNCTION__);
  
  if (!isset($css)) {
    $mypath = drupal_get_path('theme', $theme);
    $options = array('recurse' => FALSE);
    $dirs = file_scan_directory($mypath . '/css_options', '/(.*).option/', $options);
    $css = array();
    foreach($dirs as $key => $dir) {
      $choices = file_scan_directory($dir->uri, '/(.*).css/', $options);
      if (!empty($choices)) {
        $css[$dir->name]['options'] = array();
        foreach($choices as $choice) {
          $css[$dir->name]['options'][$choice->uri] = $choice->name; 
        }
      }
    }
  }
  return $css;
}

/**
 * Implements hook_init()
 */
function css_options_init() {
  global $theme_key;

  $options = array(
    'group' => CSS_THEME + 10, // add our css after the theme
  );

  $css = variable_get('css_options_' . $theme_key, array());
  if (!empty($css)) {
    foreach($css as $file) {
      drupal_add_css($file, $options);
    }
  }
}

function css_options_get_widgets($theme = '') {
  $css = css_options_get_options($theme);
  
  $widgets = array();
  $settings = variable_get('css_options_' . $theme, array());

  foreach($css as $widget => $options) {
    if (!empty($options)) {
      $options['options'] = array('<none>' => t('No Additional Style')) + $options['options'];
      $widgetname = str_replace(' ', '_', strtolower($widget));
      $varname = 'css_options_include_' . $theme . '__' . $widgetname;
      $widgets[$varname] = array(
        '#title' => $widget,
        '#type' => 'select',
        '#options' => $options['options'],
        '#default_value' => empty($settings[$widgetname]) ? '<none>' : $settings[$widgetname],
      );
    }
  }
  
  if (!empty($widgets)) {
    $element = array(
      '#type' => 'fieldset',
      '#title' => t('Custom Styles'),
    );
    $element = $element + $widgets;

    return $element;
  }
  else {
    return array();
  }
}

function css_options_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'system_theme_settings') {
    $parts = explode('_', $form['var']['#value']);
    if (!empty($parts[1]) && count($parts) == 3) {
      $theme = $parts[1];
    }
    else {
      // currently global settings doesn't do anything
      $theme = '';
    }

    if (!empty($theme)) {
      $widgets = css_options_get_widgets($theme);
      if (!empty($widgets)) {
        $form['css_options'] = $widgets;
        $form['#submit'][] = 'css_options_widget_submit';
      }
    }
  }
}

function css_options_widget_submit($form, &$form_state) {
  if (!empty($form['css_options'])) {
    $parts = explode('_', $form_state['values']['var']);

    if (!empty($parts[1])) {
      $theme = $parts[1];
    }
    else {
      $theme = '';
    }

    $pattern = '/css_options_include_(.*)__(.*)/';
    $settings = array();

    foreach(array_keys($form_state['values']) as $key) {
      // $matches[1] has the theme name
      // $matches[2] has the option
      if (preg_match($pattern, $key, $matches)) {
        if ($form_state['values'][$key] != '<none>') {
          $settings[$matches[2]] = $form_state['values'][$key];
        }
      }
    }

    if (!empty($settings)) {
      variable_set('css_options_' . $theme, $settings);
    }
    elseif (!empty($theme)) {
      variable_del('css_options_' . $theme);
    }
  }
}

