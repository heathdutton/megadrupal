<?php

/**
 * @file
 * Implements Conekta payment methods, see: https://www.conekta.io/
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_conekta_libraries_info() {
  $libraries['conekta-php'] = array(
    'name' => 'Conekta PHP library',
    'vendor url' => 'https://www.conekta.io/en/docs/libraries',
    'download url' => 'https://github.com/conekta/conekta-php/archive/master.zip',
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '/Conekta PHP v\.([0-9\.]+)/',
      'lines' => 20,
    ),
    'files' => array(
      'php' => array(
        'lib/Conekta.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function commerce_conekta_block_info() {
  $blocks = array();
  $mark_measures = array('37x23', '50x34', '60x38', '180x113');

  foreach ($mark_measures as $mark_measure) {
    $blocks['acceptance_mark_' . $mark_measure] = array(
      'info' => t("Provide an accepted payment methods acceptane mark.")
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function commerce_conekta_block_view($delta = '') {
  $block = array('subject' => 'This site accepts credit card');
  // the logo measure is indicated in the last 5 chars of $delta
  $mark_measure = substr($delta, strlen($delta)-5);

  switch ($delta) {
    case 'acceptance_mark_37x23':
    case 'acceptance_mark_50x34':
    case 'acceptance_mark_60x38':
    case 'acceptance_mark_180x113':
      $block['content'] = theme('commerce_conekta_acceptance_mark', array('mark_measure' => $mark_measure));
      break;
  }

  return $block;
}

function commerce_conekta_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_conekta_acceptance_mark' => array(
      'variables' => array('mark_measure' => NULL),
      'path' => drupal_get_path('module', 'commerce_conekta') . '/theme',
      'template' => 'commerce-conekta-acceptance-mark',
    ),
  );
}

/**
 * Implements hook_js_alter().
 *
 * Remove the commerce_checkout.js when the payment method is conekta cc due the
 * clone of the continue button affects the click bind used for trigger card
 * tokenization.
 */
function commerce_conekta_js_alter(&$javascript) {
  $is_conekta_cc = FALSE;

  foreach ($javascript as $item) {
    if ($item['type'] == 'file') {
      // Determine if conecta cc is included
      if (strpos($item['data'], 'conekta_cc.js')) {
        $is_conekta_cc = TRUE;
      }

      if (strpos($item['data'], 'commerce_checkout.js')) {
        $path_commerce_checkout = $item['data'];
      }
    }
  }

  if ($is_conekta_cc && isset($path_commerce_checkout)) {
    unset($javascript[$path_commerce_checkout]);
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_conekta_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['conekta_cc'] = array(
    'base' => 'commerce_conekta_cc',
    'title' => t('Conekta Credit Card'),
    'short_title' => t('Credit Card'),
    'display_title' => t('Credit Card'),
    'description' => t('Allow users to pay with credit card through Conekta payment service.'),
    'terminal' => FALSE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,
    'file' => 'includes/conekta_cc.inc'
  );

  $payment_methods['conekta_oxxo'] = array(
    'base' => 'commerce_conekta_oxxo',
    'title' => t('Conekta OXXO'),
    'short_title' => t('OXXO deposit'),
    'display_title' => t('OXXO'),
    'description' => t('Allow users to pay by deposit on any OXXO store.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'file' => 'includes/conekta_oxxo.inc'
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_transaction_status_info()
 *
 * Define a new payment_transaction status to identify the refunds.
 */
function commerce_conekta_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses['oxxo_pending'] = array(
    'status' => 'oxxo_pending',
    'title' => t('OXXO pending deposit'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-failure.png',
    'total' => TRUE,
  );
}

/**
 * Returns the URL to the specified Conekta environment.
 *
 * @param $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the PayPal ec server.
 */
function commerce_conekta_api_url($server) {
  switch ($server) {
    case 'sandbox' :
      return 'https://api-3t.sandbox.paypal.com/nvp';
    case 'live' :
      return 'https://api-3t.paypal.com/nvp';
  }
}

/**
 * Returns an array of all possible currency codes.
 */
function commerce_conekta_currencies() {
  return drupal_map_assoc(array('USD', 'MXN'));
}

/**
 * Determine if a currency code is in the supported Conekta currencies and if not select the default.
 */
function _commerce_conekta_lookup_currency_code($order, $payment_settings) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  return in_array($currency_code, array_keys(commerce_conekta_currencies())) ? $currency_code : $payment_settings['currency_code'];
}

/**
 * Build the line items array.
 *
 * @param object $order_wrapper
 *   The wrapper user order.
 * @param array $request_params
 *   A reference of request params array.
 */
function commerce_conekta_order_line_items_list($order_wrapper) {
  $line_items = array();

  // iterate and add all line items to the request_params
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If the line item is not a product then skip it, we don't want to include
    // taxes or coupons here
    if (!in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      continue;
    }

    // determine the line item title via title callback
    $title = commerce_line_item_title($line_item_wrapper->value());
    // if no title is defined then use the SKU
    if (empty($title)) {
      $title = $line_item_wrapper->line_item_label->value();
    }

    // calculate item total
    $item_price = $line_item_wrapper->commerce_unit_price->value();
    $line_item = array(
      'name' => $title,
      'unit_price' => $item_price['amount'],
      'description' => $title,
      'quantity' => (int) $line_item_wrapper->quantity->value(),
      'sku' => $line_item_wrapper->line_item_label->value(),
      'type' => $line_item_wrapper->type->value(),
    );

    $line_items = array_merge($line_items, $line_item);
  }

  return $line_items;
}

/**
 * Calculate the total coupons discount of an order.
 */
function commerce_conekta_coupons_total_discount($price) {
  // generate all the possibles names of coupon price components
  $component_names = array();
  $coupons = commerce_coupon_load_multiple(array(), array('is_active' => TRUE));
  foreach ($coupons as $coupon) {
    $name = commerce_coupon_type_get_name($coupon->type);
    $coupon_machine_name = commerce_coupon_machine_name_code($coupon);
    $component_names[] = $coupon->type . '_' . $coupon_machine_name;
  }

  $total = array(
    'amount' => 0,
    'currency_code' => $price['currency_code'],
    'data' => array(),
  );

  if (empty($price['data']['components'])) {
    return $total;
  }

  // Sum all the discount components
  foreach ($price['data']['components'] as $key => $component) {
    if (empty($name) || in_array($component['name'], $component_names)) {
      $total['amount'] += commerce_currency_convert(
        $component['price']['amount'],
        $component['price']['currency_code'],
        $total['currency_code']
      );
    }
  }

  return $total;
}
