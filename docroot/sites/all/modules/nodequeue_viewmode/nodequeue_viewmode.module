<?php

define('NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW', 0);
define('NODEQUEUE_VIEWMODE_PREVIEW_SCREENSHOT', 1);
define('NODEQUEUE_VIEWMODE_PREVIEW_RENDER', 2);

/**
 * Implements hook_theme().
 */
function nodequeue_viewmode_theme() {
  return array(
    'nodequeue_viewmode_arrange_subqueue_form_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_nodequeue_alter().
 */
function nodequeue_viewmode_nodequeue_alter($queues, $op) {
  switch ($op) {
    case 'load_queues':
      foreach ($queues as $key => $queue) {
        if (variable_get('ds_extras_switch_view_mode', FALSE)) {
          $queues[$key]->viewmode = variable_get('nodequeue_viewmode_enabled_nodequeue_' . $queue->qid, 0);
        }
        else {
          $queues[$key]->viewmode = 0;
        }
      }
      break;
    default:
      // dpm($op);
  }
}

/**
 * Implements hook_form_alter().
 */
function nodequeue_viewmode_form_alter(&$form, &$form_state, $form_id) {
  // Add option to enable / disable view mode preview
  if ( $form_id == 'nodequeue_admin_settings' ) {
    $form['nodequeue_viewmode_preview'] = array(
      '#type' => 'select',
      '#title' => t('Enable view mode preview in the queue table'),
      '#disabled' => variable_get('ds_extras_switch_view_mode', FALSE) ? FALSE : TRUE,
      '#default_value' => variable_get('nodequeue_viewmode_preview', NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW),
      '#options' => array(
        NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW => t('No preview'),
        NODEQUEUE_VIEWMODE_PREVIEW_SCREENSHOT => t('Screenshot'),
        NODEQUEUE_VIEWMODE_PREVIEW_RENDER => t('Rendered node'),
      ),
      '#description' => t('Only available if \'view mode per node\' is enabled at the !url.', array('!url' => l('ds extra page', 'admin/structure/ds/list/extras', array('query' => array('destination' => 'admin/structure/nodequeue/settings'), 'fragment' => 'edit-additional-settings-fs4')))),
      '#weight' => 1,
    );
  }

  // Add option to enable / disable view mode selection
  if ( $form_id == 'nodequeue_edit_queue_form' ) {
    if ( isset($form['qid']['#value']) ) {
      $default = (bool) variable_get('nodequeue_viewmode_enabled_nodequeue_' . $form['qid']['#value'], 0);
      $destination = 'admin/structure/nodequeue/' . $form['qid']['#value'] . '/edit';
    }
    else {
      $default = FALSE;
      $destination = 'admin/structure/nodequeue/add/nodequeue';
    }

    $form['viewmode'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable view mode selection in the queue table'),
      '#disabled' => variable_get('ds_extras_switch_view_mode', FALSE) ? FALSE : TRUE,
      '#default_value' => $default,
      '#description' => t('Only available if \'view mode per node\' is enabled at the !url.', array('!url' => l('ds extra page', 'admin/structure/ds/list/extras', array('query' => array('destination' => $destination), 'fragment' => 'edit-additional-settings-fs4')))),
      '#weight' => 1,
    );

    // Play with weights of elements to put viewmode selection not at the bottom of the form
    $form['roles']['#weight'] = 5;
    $form['types']['#weight'] = 5;
    $form['submit']['#weight'] = 10;
    $form[0]['#weight'] = 10;

    // Extra submit callback
    $form['#submit'][] = 'nodequeue_viewmode_edit_queue_form_submit';
  }

  // Add view mode selection to queues
  if ( strstr($form_id, 'nodequeue_arrange_subqueue_form_')) {
    drupal_add_css(drupal_get_path('module', 'nodequeue_viewmode') . '/nodequeue_viewmode.css');

    $qid = (int) str_replace('nodequeue_arrange_subqueue_form_', '', $form_id);
    $queue = nodequeue_load($qid);

    if ($queue->viewmode == 1) {
      foreach ( $form['nodes'] as $nid => $node_properties ) {
        if (is_numeric($nid)) {
          $viewmode = (!empty($node_properties['#node']['ds_switch'])) ? $node_properties['#node']['ds_switch'] : '';

          $form['nodes'][$nid]['viewmode'] = array(
            '#type' => 'select',
            '#default_value' => $viewmode,
            '#options' => nodequeue_viewmode_list_viewmodes($node_properties['#node']['type']),
          );

          $preview = variable_get('nodequeue_viewmode_preview', NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW);
          if ( $preview > 0 ) {
            $form['nodes'][$nid]['viewmode']['#ajax'] = array(
              'callback' => 'nodequeue_viewmode_preview_callback',
              'wrapper' => 'nodequeue_viewmode_preview_wrapper_' . $nid,
            );

            $form['nodes'][$nid]['preview'] = array(
              '#type' => 'markup',
              '#prefix' => '<div id="nodequeue_viewmode_preview_wrapper_' . $nid . '">',
              '#markup' => nodequeue_viewmode_preview($nid, $viewmode),
              '#suffix' => '</div>',
            );
          }
        }
      }

      // Change theme function to add view mode selection fields
      $form['nodes']['#theme'] = 'nodequeue_viewmode_arrange_subqueue_form_table';

      // Add extra submit function to alter view modes
      $form['actions']['submit']['#submit'][] = 'nodequeue_viewmode_arrange_subqueue_form_submit';
      $form['#submit'][] = 'nodequeue_viewmode_arrange_subqueue_form_submit';
    }
  }
}

/**
 * Callback to return preview of a node
 */
function nodequeue_viewmode_preview_callback($form, $form_state) {
  $wrapper = $form_state['triggering_element']['#ajax']['wrapper'];
  $nid = (int) str_replace('nodequeue_viewmode_preview_wrapper_', '', $wrapper);
  $viewmode = $form_state['triggering_element']['#value'];

  $preview = nodequeue_viewmode_preview($nid, $viewmode);

  return '<div id="' . $wrapper . '">' . $preview . '</div>';
}

/**
 * Return preview of a node
 */
function nodequeue_viewmode_preview($nid, $viewmode) {
  $nodes = entity_load('node', array($nid));

  if (!isset($nodes[$nid])) {
    $preview = t('Content was not found.');
  }
  else {
    $node = $nodes[$nid];
    $preview_type = variable_get('nodequeue_viewmode_preview', NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW);
    switch ( $preview_type ) {
      case NODEQUEUE_VIEWMODE_PREVIEW_SCREENSHOT:
        $preview = nodequeue_viewmode_preview_image($node->type, $viewmode);
        break;
      case NODEQUEUE_VIEWMODE_PREVIEW_RENDER:
        $preview = nodequeue_viewmode_preview_render($node, $viewmode);
        break;
    }
  }

  return $preview;
}

/**
 * Return rendered preview of a node
 *
 * Source: ds_extras module
 */
function nodequeue_viewmode_preview_render($node, $viewmode) {
  if (node_access('view', $node)) {
    $element = node_view($node, $viewmode);
    $content = drupal_render($element);
  }
  else {
    $content = t('Access denied');
  }

  return $content;
}

/**
 * Return preview image of a viewmode
 *
 * Source: ds_extras module
 */
function nodequeue_viewmode_preview_image($bundle, $viewmode) {
  $image = drupal_get_path('module', 'ds') . '/images/preview.png';

  $chosen_layout = ds_get_layout('node', $bundle, $viewmode, FALSE);

  if ( $chosen_layout ) {
    $image = (isset($chosen_layout['image']) && !empty($chosen_layout['image'])) ? $chosen_layout['path'] . '/' . $chosen_layout['layout'] . '.png' : $image;
    if (isset($chosen_layout['panels']) && !empty($chosen_layout['panels']['icon'])) {
      $image = $chosen_layout['panels']['path'] . '/' . $chosen_layout['panels']['icon'];
    }
  }

  return '<img src="' . base_path() . $image . '"/>';
}

/**
 * Submit handler for nodequeue edit form. Updates view mode status.
 */
function nodequeue_viewmode_edit_queue_form_submit($form, &$form_state) {
  if (isset($form_state['values']['viewmode'])) {
    variable_set('nodequeue_viewmode_enabled_nodequeue_' . $form_state['values']['qid'], $form_state['values']['viewmode']);
  }
  else {
    variable_set('nodequeue_viewmode_enabled_nodequeue_' . $form_state['values']['qid'], 0);
  }
}

/**
 * Theme the subqueue overview as a sortable list.
 *
 * Copy van theme_nodequeue_arrange_subqueue_form_table met viewmode properties toegevoegd.
 *
 * @ingroup themeable
 */
function theme_nodequeue_viewmode_arrange_subqueue_form_table($variables) {
  $form = $variables['form'];

  $output = '';

  // Get css to hide some of the help text if javascript is disabled.
  drupal_add_css(drupal_get_path('module', 'nodequeue') . '/nodequeue.css');

  $table_id = 'nodequeue-dragdrop-' . $form['#subqueue']['sqid'];
  $table_classes = array(
    'nodequeue-dragdrop',
    'nodequeue-dragdrop-qid-' . $form['#subqueue']['qid'],
    'nodequeue-dragdrop-sqid-' . $form['#subqueue']['sqid'],
    'nodequeue-dragdrop-reference-' . $form['#subqueue']['reference'],
  );
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'node-position');
  drupal_add_js(drupal_get_path('module', 'nodequeue') . '/nodequeue_dragdrop.js');

  $reverse[str_replace('-', '_', $table_id)] = (bool) $form['#queue']['reverse'];
  drupal_add_js(
    array(
      'nodequeue' => array(
        'reverse' => $reverse,
      )
    ),
    array(
      'type' => 'setting',
      'scope' => JS_DEFAULT,
    )
  );

  // Render form as table rows.
  $rows = array();
  $counter = 1;
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['title'])) {
      $row = array();

      $row[] = drupal_render($form[$key]['title']);
      $row[] = drupal_render($form[$key]['author']);
      $row[] = drupal_render($form[$key]['viewmode']);
      if ( variable_get('nodequeue_viewmode_preview', NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW) != NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW ) {
        $row[] = drupal_render($form[$key]['preview']);
      }
      $row[] = drupal_render($form[$key]['date']);
      $row[] = drupal_render($form[$key]['position']);
      $row[] = (!empty($form[$key]['edit'])) ? drupal_render($form[$key]['edit']) : '&nbsp;';
      $row[] = drupal_render($form[$key]['remove']);
      $row[] = array(
        'data' => $counter,
        'class' => array('position')
      );

      $rows[] = array(
        'data'  => $row,
        'class' => array('draggable'),
      );
    }

    $counter++;
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No nodes in this queue.'), 'colspan' => 7));
  }

  // Render the main nodequeue table.
  if ( variable_get('nodequeue_viewmode_preview', NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW) != NODEQUEUE_VIEWMODE_PREVIEW_NOPREVIEW ) {
    $header = array(t('Title'), t('Author'), t('View mode'), t('Preview'), t('Post Date'), t('Position'), array('data' => t('Operations'), 'colspan' => 2), t('Position'));
  }
  else {
    $header = array(t('Title'), t('Author'), t('View mode'), t('Post Date'), t('Position'), array('data' => t('Operations'), 'colspan' => 2), t('Position'));
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => $table_classes)));

  return $output;
}

/**
 * Submit handler for nodequeue drag'n'drop form. Updates view modes.
 */
function nodequeue_viewmode_arrange_subqueue_form_submit($form, &$form_state) {
  // Get nids from queue
  $nids = array();
  foreach ($form_state['values']['nodes'] as $nid => $element) {
    if (is_numeric($nid) && isset($element['viewmode'])) {
      $nids[] = $nid;
    }
  }

  // Load nodes, update view mode and save
  if (count($nids)) {
    $entities = entity_load('node', $nids);
    foreach ( $entities as $nid => $entity ) {
      $entity->ds_switch = $form_state['values']['nodes'][$nid]['viewmode'];
      entity_save('node', $entity);
    }
  }
}

/**
 * List view modes of a specific bundle
 *
 * Source: ds_extras module
 *
 * @param  string $bundle Node type
 *
 * @return array          View modes
 */
function nodequeue_viewmode_list_viewmodes($bundle) {
  $view_mode_settings = field_view_mode_settings('node', $bundle);

  $vm = ds_entity_view_modes('node');
  $options = array('' => t('Default'));
  foreach ($vm as $key => $item) {
    $overriden = (!empty($view_mode_settings[$key]['custom_settings']) ? TRUE : FALSE);
    if ($overriden) {
      $options[$key] = $item['label'];
    }
  }

  return $options;
}
