<?php


/**
 * @file
 * maestro_webform_task.module
 */

include_once './' . drupal_get_path('module', 'maestro_webform_task') . '/maestro_webform_task.handlers.inc';

/**
 * Implements hook_menu()
 */
function maestro_webform_task_menu() {
  $items = array();

  $items['maestro/webform_viewdialog/%/%/%ctools_js'] = array(
      'title' => 'View Webform',
      'page callback' => 'maestro_webform_viewdialog',
      'page arguments' => array(2,3,4),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}



/* Implements HOOK_menu_alter
 * Needed a way to remove the local tab menu when viewing a webform submission from a maestro controlled link
 * Replace the webform modules access callback with our own
 */
function maestro_webform_task_menu_alter(&$items) {
  $items['node/%webform_menu/submission/%webform_menu_submission/view']['access callback'] = 'maestro_webform_tab_local_menu_access';
  $items['node/%webform_menu/submission/%webform_menu_submission/edit']['access callback'] = 'maestro_webform_tab_local_menu_access';
  $items['node/%webform_menu/submission/%webform_menu_submission/delete']['access callback'] = 'maestro_webform_tab_local_menu_access';
  //$items['node/%webform_menu/webform-results']['access callback'] = 'maestro_webform_tab_local_hide_results_menu_access';
}

/* Custom access callback function to test if user viewing a webform
 * submission from a maestro controlled link
 * Only need to test if it should be hidden if user already has access
 * and don't want to over-ride the default access checks
 *
 * Need access webresults and edit webresults permissions
 */
function maestro_webform_tab_local_menu_access($node, $account = NULL) {
 $args = func_get_args();
 $default_access = webform_results_access($node);
 return $default_access;
 /* Was exploring altering the viewing of the local tabs - needs more work, so returning default for now */
 if ($default_access) {
  $url_comp = explode('/', request_path());
  return !in_array('maestro', $url_comp);
 } else {
   return $default_access;
 }
}

function maestro_webform_tab_local_hide_results_menu_access($node, $account = NULL) {
  $url_comp = explode('/', request_path());
  if (in_array('maestro_hidelocaltasks', $url_comp)) {
    return FALSE;
 }
 return TRUE;
}



/* Implements HOOK_theme
 * Theme functions and templates to view and edit a task
 * in the workflow editor
 */
function maestro_webform_task_theme() {
  return array(
    'maestro_task_webform' => array(
      'template' => 'theme/maestro-task-webform',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_webform_edit' => array(
      'template' => 'theme/maestro-task-webform-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL)
    ),
  );
}



/**
 * Implements hook_form_alter()
 *
 * For webforms types managed by Maestro, sets custom submit handler
 */
function maestro_webform_task_form_alter(&$form, $form_state, $form_id) {
  /* Determine if the cached list of webforms being used by configured maestro workflow templates is setup. */
  $maestro_webforms = cache_get('maestro_webforms');
  if ($maestro_webforms === FALSE) {  // if not set - scan templates for unique webforms
    $webforms = array();
    $query = db_select('maestro_template_data', 'template_data');
    $query->addField('template_data', 'task_data', 'task_data');
    $query->condition('task_class_name', 'MaestroTaskTypeWebform', '=');
    $res = $query->execute();
    foreach ($res as $rec) {
      $data = unserialize($rec->task_data);
      $webform_form_id = "webform_client_form_{$data['webform_nid']}";
      if (!empty($data['webform_nid']) AND !in_array($webform_form_id, $webforms)) {
        $webforms[] = $webform_form_id;
      }
    }
    cache_set('maestro_webforms', $webforms);
    $maestro_webforms = $webforms;
  }
    else {
    $maestro_webforms = ($maestro_webforms->data);
  }

  if (in_array($form_id, $maestro_webforms)) {
    //Determine the submit key name in the $form array
    $submitkey = '';
    foreach ($form['actions'] as $key => $field) {
      if (isset($field['#type']) AND $field['#type'] == 'submit') {
        $submitkey = $key;
      }
    }
    $request = urldecode(request_uri());
    $requestParms = explode('/', $request);

    $maestroIndex=-1;
    foreach ($requestParms as $index => $val) {
      if ($val == 'maestro') {
        $maestroIndex = $index;
        //removed the break, because we are looking for the last occurrance
        //of 'maestro' in the requestParms.
      }
    }
    if ($maestroIndex >= 2) { //really only applies if your site is named maestro, ie localhost/maestro, but a valid index should be around 5
      if (isset($requestParms[$maestroIndex]) AND $requestParms[$maestroIndex] == 'maestro' AND isset($requestParms[$maestroIndex + 1])) {
        if ($requestParms[$maestroIndex + 1] == 'edit' AND intval($requestParms[$maestroIndex + 2] > 0)) {
          $form['maestro_taskid'] = array(
            '#value'  => intval($requestParms[$maestroIndex + 2]),
            '#type'   => 'hidden',
          );
          // The extra option is added to the URL via MaestroTaskTypeWebform->getTaskConsoleURL()
          // Clicking on a EDIT Form as a direct task - should complete the task on submit.
          if (isset($requestParms[$maestroIndex + 3]) AND strpos($requestParms[$maestroIndex + 3], 'completeonsubmit') !== FALSE) {
            $form['maestro_completeonsubmit'] = array(
              '#value'  => 1,
              '#type'   => 'hidden',
            );
          }
        }
        else {
          $form['maestro_taskid'] = array(
            '#value'  => intval($requestParms[$maestroIndex + 1]),
            '#type'   => 'hidden',
          );
        }
        /** Overwrite the default node submission handler with our own.
         * Had a real issue getting this to work as the available docs indicate
         * $form['#submit'][] = 'maestro_webform_form_submit';
         * should work but the default node submit handler 'node_form_submit()' would always be used.
         * Posted to rfay's blog: http://randyfay.com/node/66
         * On IRC, DamZ recommended this syntax which works
         */
        if (!empty($submitkey)) {
          $form['#submit'][] = 'maestro_webform_form_submit_handler';
        }
      }
    }
    elseif (array_key_exists('complete form', $form_state) && array_key_exists('maestro_taskid', $form_state['complete form'])) {
      /** If there is a get/post action called, such as when an attachment field's upload button is clicked,
       * we need to re-add the fields to the form. so we check the form_state to see if the previous values
       * there so that we know it is a maestro webform type task form we are dealing with.
       */
      if (!empty($submitkey)) {
        $form['#submit'][] = 'maestro_webform_form_submit_handler';
      }
      $form['maestro_taskid'] = array(
        '#value'  => $form_state['complete form']['maestro_taskid']['#value'],
        '#type'   => 'hidden',
      );
      if (array_key_exists('maestro_completeonsubmit', $form_state['complete form'])) {
        $form['maestro_completeonsubmit'] = array(
          '#value'  => $form_state['complete form']['maestro_completeonsubmit']['#value'],
          '#type'   => 'hidden',
        );
      }
    }
  }

}

/**
 * Custom submit handler for webforms managed by Maestro
 * Provides redirection to the Maestro task console
 *
 * @see maestro_form_alter()
 */
function maestro_webform_form_submit_handler($form, &$form_state) {
  if (isset($form_state['values']['maestro_taskid'])) {
    // Need to determine if this is a new submission or an update
    $taskid = $form_state['values']['maestro_taskid'];

    $webform_nid = $form_state['values']['details']['nid'];
    $webform_submission_id = $form_state['values']['details']['sid'];

    $data = array('nid' => $webform_nid, 'sid' => $webform_submission_id);

    // Determine if we need to insert or update the submission where $webform_submission_id is unique
    $query = db_select('maestro_project_content', 'a');
    $query->addField('a', 'id');
    $query->condition('a.content_type', 'webform', '=');
    $query->condition('a.nid', $webform_nid, '=');
    $query->condition('a.instance', $webform_submission_id, '=');
    $res = $query->execute();
    $reccount = $query->countQuery()->execute()->fetchField();
    if ($reccount == 0) {
      $task = new MaestroTaskTypeWebform;
      $task->processContent($taskid, 'insert', $data);
    } else {
      // Extra form field set by maestro_form_alter if taskconsole task is a contentType task - Edit operation
      // Inline tasks that prompt user to review/edit a node (contentType) may also redirect user to Edit but
      // It's up to the interactiveFunction's code to complete that task.
      // Usually after someone clicks on 'accept' or 'reject' in the custom interactiveFunctions inline action form.
      if (isset($form_state['values']['maestro_completeonsubmit']) AND $form_state['values']['maestro_completeonsubmit'] == 1) {

        // Initiate the maestro workflow engine and complete the task
        $maestro = Maestro::createMaestroObject(1);
        $queue_id = intval($taskid);
        $maestro->engine()->completeTask($queue_id);
      }
    }

  }

  $form_state['redirect'] = 'maestro/taskconsole';
}



/* Handles the rendering of the webform for the Ctools modal dialog that is used
 * in the task details 'content' area to view the node attached to the workflow
 * Called from the menu handler function.
 */
function maestro_webform_viewdialog($nid, $sid, $ajax) {
  // if user has js enabled...
  ctools_include('modal');
  ctools_include('ajax');
  drupal_add_css(drupal_get_path('module', 'maestro') . '/css/maestro_ctools.css');
  if ($ajax) {
    if ($nid > 0 AND $sid > 0) {
      module_load_include('inc', 'webform' , 'includes/webform.submissions');
      $node = node_load($nid);
      $submission = webform_get_submission($nid, $sid);
      $title = $node->title;
      $content  = webform_submission_render($node, $submission, NULL, 'html');
    }
    else {
      $content = t('Invalid webform');
      $title = t('Error');
    }
    ctools_modal_render($title, $content);

  } else {
      $node = node_load($nid);
      $title = $node->title;
      unset($node->title);
      $content = drupal_render(node_view($node));
  }

}



/**
 * Maestro Hooks
 */

/**
* Implementation of hook_maestro_get_taskobject_info().
*
* Registers task type
*/
function maestro_webform_task_maestro_get_taskobject_info() {
  $options = array(
    array('display_name' => t('Webform Task'),
      'class_name' => 'MaestroTaskInterfaceWebform'
    ),
  );
  return $options;
}

/**
* Implementation of hook_maestro_set_process_variable_methods().
*
* Registers available methods available to set a process variable
* for the code maestro setProcessVariable task type
*/
function maestro_webform_task_maestro_set_process_variable_methods() {
  return array(
    'maestro_webform_task' => array (
      'title' => t('Webform Field value'),
      'description' => t('Instance Name:Field Name - where instance name is the name used in the workflow'),
      'engine_handler' => 'maestro_webform_task_maestro_set_process_variable_handler'
    ),
  );
}


/* Maestro function that provides an option for the Set Process Variable task to
 * set a workflow process variable to a value from a webform field
 */
function maestro_webform_task_maestro_set_process_variable_handler(&$task, $current_value, $arg) {

  $args = explode(':', $arg);
  $instance_name = $args[0];
  $field_name = $args[1];
  $retval = '';

  $tracking_id = db_select('maestro_process')
    ->fields('maestro_process', array('tracking_id'))
    ->condition('id', $task->_properties->process_id, '=')
    ->execute()->fetchField();

  $rec = db_select('maestro_project_content', 'a')
    ->fields('a', array('nid', 'instance'))
    ->condition('tracking_id', $tracking_id, '=')
    ->condition('instance_name', $instance_name, '=')
    ->execute()->fetchObject();

  if (isset($rec->instance) AND !empty($rec->instance)) {
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($rec->nid, $rec->instance);

    $webform_definition_node = node_load($rec->nid);
    $webform_components = $webform_definition_node->webform['components'];
    $field_id = 0;
    foreach($webform_components as $key => $component) {
      if ($component['form_key'] == $field_name) {
        $field_id = $key;
        break;
      }
    }
    if ($field_id > 0 AND array_key_exists($field_id, $submission->data)) {
      $retval = $submission->data[$field_id]['value'][0];
    }
  }
  return $retval;

}





