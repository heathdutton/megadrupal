<?php

/**
 * @file
 * Provides a gallery formatter for the Image Zoom module.
 */

/**
 * Implements hook_field_formatter().
 */
function imagezoom_gallery_field_formatter_info() {
  $formatters = array(
    'imagezoom_gallery' => array(
      'label' => t('Image Zoom Gallery'),
      'field types' => array('image'),
      'settings' => array(
        'imagezoom_zoom_type' => '',
        'imagezoom_display_style' => '',
        'imagezoom_zoom_style' => '',
        'imagezoom_thumb_style' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function imagezoom_gallery_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = imagezoom_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element['imagezoom_thumb_style'] = $element['imagezoom_display_style'];
  $element['imagezoom_thumb_style']['#title'] = t('Thumbnail image style');
  $element['imagezoom_thumb_style']['#default_value'] = $settings['imagezoom_thumb_style'];

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function imagezoom_gallery_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = imagezoom_field_formatter_settings_summary($field, $instance, $view_mode);
  $summary = explode('<br />', $summary);

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that define
  // their styles in code.
  $summary[] = t('Thumbnail image style: @style', array(
    '@style' => isset($image_styles[$settings['imagezoom_thumb_style']]) ?
    $image_styles[$settings['imagezoom_thumb_style']] : 'original',
  ));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function imagezoom_gallery_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // If there are no items, don't do anything.
  if (empty($items)) {
    return array();
  }

  $display_style = $display['settings']['imagezoom_display_style'];
  $zoom_style = $display['settings']['imagezoom_zoom_style'];
  $thumb_style = $display['settings']['imagezoom_thumb_style'];

  $settings = array(
    'zoomType' => $display['settings']['imagezoom_zoom_type'],
    'gallery' => 'imagezoom-thumb-wrapper',
  );
  $context = array(
    'field' => $field,
    'instance' => $instance,
  );
  drupal_alter('imagezoom_settings', $settings, $context);

  $element = array(
    '#theme' => 'imagezoom_gallery',
    '#items' => $items,
    '#display_style' => $display_style,
    '#zoom_style' => $zoom_style,
    '#thumb_style' => $thumb_style,
    '#settings' => $settings,
  );

  return $element;
}

/**
 * Implements hook_theme().
 */
function imagezoom_gallery_theme($existing, $type, $theme, $path) {
  return array(
    'imagezoom_gallery' => array(
      'variables' => array(
        'items' => NULL,
        'display_style' => NULL,
        'zoom_style' => NULL,
        'thumb_style' => NULL,
        'settings' => NULL,
        'image' => NULL,
        'thumbs' => NULL,
      ),
      'template' => 'imagezoom_gallery',
      'path' => $path . '/theme',
    ),
    'imagezoom_thumb' => array(
      'variables' => array(
        'item' => NULL,
        'display_style' => NULL,
        'zoom_style' => NULL,
        'settings' => NULL,
      ),
      'template' => 'imagezoom_thumb',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Preprocess function for imagezoom_gallery.
 */
function template_preprocess_imagezoom_gallery(&$variables) {
  $items = $variables['items'];

  $variables['image'] = theme('imagezoom_image', array(
    'item' => $items[0],
    'display_style' => $variables['display_style'],
    'zoom_style' => $variables['zoom_style'],
    'settings' => $variables['settings'],
  ));

  $variables['thumbs'] = array();
  foreach ($items as $key => $item) {
    $variables['thumbs'][] = theme('imagezoom_thumb', array(
      'item' => $item,
      'display_style' => $variables['display_style'],
      'thumb_style' => $variables['thumb_style'],
      'zoom_style' => $variables['zoom_style'],
      'settings' => $variables['settings'],
    ));
  }
}

/**
 * Preprocess function for imagezoom_thumb.
 */
function template_preprocess_imagezoom_thumb(&$variables) {
  $item = $variables['item'];

  if ($variables['display_style']) {
    $image_style = image_style_load($variables['display_style']);
    $derivative_uri = image_style_path($variables['display_style'], $item['uri']);
    image_style_create_derivative($image_style, $item['uri'], $derivative_uri);
    $variables['image'] = image_style_url($variables['display_style'], $item['uri']);
    $info = image_get_info($derivative_uri);
  }
  else {
    $variables['image'] = file_create_url($item['uri']);
    $info = image_get_info($item['uri']);
  }

  if ($variables['zoom_style']) {
    $image_style = image_style_load($variables['zoom_style']);
    $derivative_uri = image_style_path($variables['zoom_style'], $item['uri']);
    image_style_create_derivative($image_style, $item['uri'], $derivative_uri);
    $variables['zoom'] = image_style_url($variables['zoom_style'], $item['uri']);
  }
  else {
    $variables['zoom'] = file_create_url($item['uri']);
  }

  if ($variables['thumb_style']) {
    $image_style = image_style_load($variables['thumb_style']);
    $derivative_uri = image_style_path($variables['thumb_style'], $item['uri']);
    image_style_create_derivative($image_style, $item['uri'], $derivative_uri);
    $variables['thumb'] = image_style_url($variables['thumb_style'], $item['uri']);
    $info = image_get_info($derivative_uri);
  }
  else {
    $variables['thumb'] = file_create_url($item['uri']);
    $info = image_get_info($item['uri']);
  }

  $variables['width'] = $info['width'];
  $variables['height'] = $info['height'];
}
