

/**
 * Disregard this file for regular usage of module.
 *
 * This reference file can be helpful for background information to
 * understand Drupal Commerce payment modules and Quantum Gateway
 * 
 * This file is has notes that are for developer reference, and
 * it has excerpts from various web sites that may be useful.
 *
 */





//------------------------------------------------------------------------------------
/*              EXAMPLES OF SIMILAR MODULES but different vendors                   */
//------------------------------------------------------------------------------------

// code for commerce_authnet 
//  This module is also by authors of drupal commerce and recommended for study
//  http://drupalcode.org/project/commerce_authnet.git/blob/HEAD:/commerce_authnet.module

// code for commerce_firstdata 
//  First Data requires a phone number in transactions and this module does something 
//  interesting by using a hook to add to the billing customer profile
//  http://drupalcode.org/project/commerce_firstdata.git/blob/HEAD:/commerce_firstdata.module
  
// code for commerce_eurobank 
//  Like quantum the gateway response isxml not pairs, and creating the cURL $post is different
//  than authnet. This moudule uses preg_match for testing if success in xml.
//  Using preb_match may not be a good way to evaluate with Quantum. Instead we used simplXML 
//  objects but had to be careful to pass as string.
//  http://drupalcode.org/project/Commerce_eurobank.git/blob/HEAD:/commerce_eurobank.module

// Other relevant examples?

//------------------------------------------------------------------------------------
/*                             Quantum Gateway notes                                */
//------------------------------------------------------------------------------------

// If you apply for a merchant service with CDG commerce, please consider using the 
// referral account number 2655.  Not using the referral link may not save any fees, 
// and using the referral number when applying can the reward the originating author. 
// Referrals and donations help encourage open source support, thanks in advance.
//   CDG Commerce is the well known merchant service using the Quantum Gateway.
//       http://www.cdgcommerce.com/internet-services.php?R=2655
//   For more information,
//       http://cocoavillagepublishing.com/e-commerce/creditcards

// Quantum Gateway supports serveral methods. At the time of writing these notes
// the XML Requestor method was most promising. The web page for the documentation
// was http://www.quantumgateway.com/developer.php
//  and  http://www.quantumgateway.com/files/QuantumGatewayXMLRequester.pdf

// ------------------ XML Requestor notes for Quantum Gateway -----------------------

// NOTE: For testing supply your test GatewayLogin and GatewayKey
// QGWRequest is the outer tag for Requestor XML request.

//Authentication
// The Authentication tag for requests is a child of the QGWRequest tag. 
// It contains two child elements. GatewayLogin and GatewayKey. 
// Every request must have an authentication tag with valid contents in its two child elements.

//Request
// The Request tag must be included in all requests. 
// The RequestType selects the command for the Requester. 
// For details of each Request along with the parameters of the RequestType, see the Request Listings.

//Response Wrapper
// Each request in a transmission will return an associated response 
// result in the response transmission. The response wrappers structure 
// is similar to the request wrapper.

//ResponseSummary
// The responssummary tag is a child of QGWRequest.
// It contains several child elements pertaining to the results of the request.

//Result
// The result tag is a child of QGWRequest.
// It contains several child elements pertaining to the results of the request.

//SearchTransactions
// Used as a search engine to find transactions based on request parameters.
// If no Request Parameter is supplied all transactions are returned.

//ShowTransactionDetails
// Used to show all details of a specific transaction

//Create Vault Debit/Credit Transaction
// Used to create an individual Debit or Credit Transaction from Vault Customers

//SearchVault
// Used as a search engine to search for customers in the vault.

//ShowVaultDetails
// Used as a search engine to search for customers in the vault. 

//CustomerAdd
// Adds a new Customer to the Vault.

//CustomerUpdate
// Update a current Vault Customers information.

//AddUpdateCustomer
// Adds a new Customer to the Vault or Updates current customer.

//CustomerRemove
// Remove a current Vault Customers information.

//ExpiringVaultCustomers
// Search for Vault Customers who.s credit card is expiring.

//SearchRecurring
// Search for Recurring Entries.

//ShowRecurringCustomer
// Search for Recurring Entries.

//UpdateRecurringCustomer
// Update a Recurring Customer

//Create Recurring Transactions From Vault
// Used to create an individual Debit or Credit Transaction from Vault Customers


/**
  * Example of a XML Single transaction reqeust
  * XML Requester API
<QGWRequest>
<Authentication>
<GatewayLogin>demoacct</GatewayLogin>
<GatewayKey>************</GatewayKey>
</Authentication>
<Request>
<RequestType>ProcessSingleTransaction</RequestType>
<TransactionType>CREDIT</TransactionType>
<PaymentType>CC</PaymentType>
<Amount>10.00</Amount>
<CreditCardNumber>5454545454545454</CreditCardNumber>
<ExpireMonth>12</ExpireMonth>
<ExpireYear>2010</ExpireYear>
<CVV2>111</CVV2>
<Memo>6812300000</Memo>
<FirstName>John</FirstName>
<LastName>Doe</LastName>
<Address>1021 eden way</Address>
<City>Aberdeen</City>
<State>WA</State>
<ZipCode>66666</ZipCode>
<Country>USA</Country>
<EmailAddress>test@cdgcommerce.com</EmailAddress>
<PhoneNumber>8885863346</PhoneNumber>
<IPAddress>216.223.17.34</IPAddress>
<TransactionDate>2007-09-05</TransactionDate>
<CustomerID>xml_requester</CustomerID>
<RID>1</RID>
</Request>
</QGWRequest>
  *

EXAMPLE OF RESPONSE


  **/

/**
  * Example of XML post with curl from QuantumGatewayXMLREquester.pfd
<?
/***********************************************
* Post to Quantum Gateway using CURL
* By John Doe
************************************************/
$url = .https://secure.quantumgateway.com/cgi/xml_requester.php.;
$xml = .<QGWRequest>\n.; 
$xml .= . <Authentication>\n.; 
$xml .= . <GatewayLogin>99</GatewayLogin>\n.; 
$xml .= . <GatewayKey>CKhK29CkVrmHUbJ</GatewayKey>\n.; 
$xml .= . </Authentication>\n.; 
$xml .= . <Request>\n.; 
$xml .= . <RequestType>ShowVaultDetails</RequestType>\n.;
$xml .= . <CustomerID>4041000000</CustomerID>\n.; 
$xml .= . </Request>\n.; 
$xml .= .</QGWRequest>\n.;
$header = "POST $url HTTP/1.1\n";
$header.= "Host: <your domain>\n";
$header.= "Content-Length: ".strlen($xml)."\n";
$header.= "Content-type: text/xml; charset=UTF8\n";
$header.= "Connection: close; Keep-Alive\n\n";
$header.= $xml;
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL,$this->gatewayUrl);
curl_setopt($ch, CURLOPT_TIMEOUT, 120);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST,$header);
$responseXml=curl_exec($ch);
curl_close($ch);
?>
 *
 */

//------------------------------- excerpt from QuantumGatewayXMLRequestor.pdf -----------------
//
// NOTE that the below is NOT for vaulted, vaulted has more and different parametes!
// (see a different page of same document for those... won't need till we use cardonfile...)
// page 16 of 49,  http://www.quantumgateway.com/files/QuantumGatewayXMLRequester.pdf
/**
 *
 *             Process Single Credit/Debit Transactions
 *        Used to create an individual Debit/Credit Transaction.
 *
 * Request Parameters
 * -----------------------------------------------------
 * ParameterName 	Required	Type 	Notes
 *
 * TransactionID 	(integer)
 * TransactionType 	Yes 		(string) DEBIT/CREDIT
 * ProcessType 		No 		(string) RETURN
 *						  AUTH_CAPTURE . Auth Then Sales
 *						  AUTH_ONLY . Auth only
 *						  SALES (default) . Skips AVS and CVV2
 * 						  *VOID . Requires TransactionID
 * 						  *PREVIOUS_SALE . Force An AUTH
 * PaymentType 		Yes 		(string) CC/EFT
 * Amount 		Yes 		(currency) Payment amount
 * CreditCardNumber 	No 		(string) Only required for PaymentType CC
 * ExpireMonth 		No 		(string) Only required for PaymentType CC
 * ExpireYear 		No 		(string) Only required for PaymentType CC
 * CVV2 		No 		(string)
 * ABANumber 		No 		(string) Only required for PaymentType EFT
 * AccountNumber 	No 		(string) Only required for PaymentType EFT
 * 						 Customer's checking or savings account number
 * EFTType 		No 		(string) Only required for PaymentType EFT **
 * AccountType 		No 		(string) Checking/Savings
 * Memo 		No 		(string) User defined field . For Internal Notes
 * FirstName 		No 		(string) Customer's first name as it is on the Credit
 * LastName 		No 		(string) Customer's last name as it is on the Credit
 * Address 		No 		(string) Customer's billing address
 * City 		No 		(string) Customer's billing city
 * State 		No 		(string) Customer's billing state
 * ZipCode 		No 		(string) Customer's billing zipcode
 * Country 		No 		(string) Customer's billing Country
 * EmailAddress 	No 		(string) Customer's email address
 * PhoneNumber   	No 		(string) Customer's phone number
 * IPAddress 		No 		(string) Customer's IP address
 * InvoiceNumber 	No 		(string) Invoice number
 * InvoiceDescription 	No 		(string) Invoice description
 * TransactionDate 	No 		(datetime) Defaults to transaction creation Date
 * RID 			No 		(integer) Recipe ID
 * CustomerID 		No 		(string) Customer ID
 * RecurAmount 		No 		(currency) Override Recuring Amount
 * RecurTimes 		No 		(integer) Number of times to recur, 0 for no limit
 * MerchantEmail 	No 		(integer) Y/N (Y will always send email)
 * CustomerEmail 	No 		(integer) Y/N (Y will always send email)
 * OverRideRecureDay 	No 		(string) Y/N (Y will set the recurring day to current date)
 * RequestType2 	No 		(string) ***CustomerAdd/CustomerUpdate
 * EnablePartialAuths   No 		(integer) Yes/No
 * PartialPaymentID 	No 		(integer) id assigned on original transaction
 *
 *  * Requires TransactionID
 * 
 * 
 * Response Parameters
 * -----------------------------------------------------------------------------------
 * Parameter Name 	Type 		Notes
 *
 * TransactionID 	(integer)
 * TransactionType 	(string) 	DEBIT/CREDIT
 * TransactionDate 	(datetime)
 * Status 		(string) 	APPROVED/DECLINED/ERROR
 * StatusDescription 	(string)
 * ACHTransactionID 	(string)
 * ACHStatus 		(string) 	PENDING/RETURNED/SETTLED/TRANSMITTED
 * ACHStatusDescription	(string) 	Log details of status. ie reason for return
 * Amount 		(currency)
 * CustomerID 		(string)
 * FirstName     	(string)
 * LastName     	(string)
 * Address    		(string)
 * ZipCode 		(string)
 * EmailAddress 	(string)
 * Memo 		(string)
 * PaymentType    	(string) 	CC/EFT
 * CardType    		(string) 	MC/VI/DS/AE/DC/JC
 * CreditCardNumber 	(string) 	Last 4 Digits of the credit card number. Only returned
 * 					if PaymentType = CC
 * ExpireMonth 		(integer) 	Only returned if PaymentType = CC
 * ExpireYear      	(integer) 	Only returned if PaymentType = CC
 * AuthorizationCode 	(string)
 * CVV2ResponseCode 	(string)
 * AVSResponseCode 	(string)
 * MaxScore 		(string) 	Maxmind Score
 * RecurrID      	(integer) 	RecurrID if RID was submitted
 * ErrorCode    	(integer) 	Declined Error Code
 * PartialPaymentID 	(integer) 	id assigned on original transaction
 * RequestedAmount 	(currency)
 * BALANCE      	(currency) 	Balance 1 left on Purchase/Debit card
 * CURRENCY 		(string) 	Currency 1 of Purchase/Debit card
 * BALLANCE2   		(currency) 	Balance 1 left on Purchase/Debit card
 * CURRENCY2     	(string) 	Currency 1 of Purchase/Debit card
 *
 * If a PartialPaymentID is received if there was a partial authorization.
 * On partial authorizations the Amount is what was approved and the RequestedAmount is the 
 * amount submited for the transaction
 *
 *
 **/




//------------------------------------------------------------------------------------
/*                            DRUPAL COMMERCE NOTES                                 */
//------------------------------------------------------------------------------------


//NOTES for dupal commerce payment api:  http://www.drupalcommerce.org/specification/apis/payment-methods
//The responsibilities of a payment method module include the following main points:
//  Defining the payment method via hook_commerce_payment_method_info(). This hook is documented in the specification
//   and allows you to define the titles and display name for the payment method along with various callback functions
//   used to integrate with the payment system.
//  Defining your callback functions to add a settings form to the payment method's rules, collect the necessary information
//   on the checkout and administrative payment forms, and accommodate the redirection process for off-site payment methods.
//  Integrating with the payment service to actually process payments, validate payment notifications, and otherwise
//   interact with the available APIs.
//  Defining menu items for additional payment transaction operations and providing the forms and API integration
//   necessary to perform the operations.
//  Regular maintenance to ensure the module remains up to date with changes in the payment service's API, changes in
//   Drupal Commerce, and security reports. Payment method modules should be managed through drupal.org's project hosting
//   infrastructure where they benefit from version control, issue tracking, and community feedback and security oversight.
//

/*******************************************************************************
 * Hook Functions (Commerce)
 ******************************************************************************/

/**
 * Implement hook_commerce_payment_method_info().
 * some of this information was taken from and old webpage no loner available:
 * http://www.drupalcommerce.org/specification/info-hooks/payment
 *
 * The Payment module uses this hook to gather information on payment methods defined by enabled modules.
 * Drupal Commerce doesn't maintain Ubercart's separation of payment methods from payment gateways but
 * rather defines payment methods as any single way of collecting payment from a customer per payment provider.
 * This means there will not be a single Credit Card payment method with plugin modules for CyberSource,
 * Authorize.Net, etc. but a separate CC payment method for each payment provider with a common base set of
 * code for building credit card forms and handling the data securely
 *
 * method_id - string identifying the payment method, lowercase using alphanumerics, -, and _
 *  base - string used as the base for the magically constructed callback names, each of which will be
 *  defaulted to [base]_[callback] unless explicitly set; defaults to the method_id
 * title - the translatable full title of the payment method, used in administrative interfaces
 * display_title - the title to display on forms where the payment method is selected and may include
 *  HTML for methods that require images and special descriptions; defaults to the title
 * short_title - an abbreviated title that may simply include the payment provider's name as it makes sense
 *  to the customer (i.e. you would display PayPal, not PayPal WPS to a customer); also defaults to the title
 * description - a translatable description of the payment method, including the nature of the payment and
 *  the payment gateway that actually captures the payment
 * active - TRUE of FALSE indicating whether or not the default payment method rule configuration for this
 *  payment method should be enabled by default
 * terminal - TRUE or FALSE indicating whether or not payments can be processed via this payment method
 *  through the administrative payment terminal on an order's Payment tab
 * offsite - TRUE or FALSE indicating whether or not the customer must be redirected offsite to put in
 *  their payment information; used specifically by the Off-site payment redirect checkout pane
 * callbacks - an array of callback function names for the various types of callback required
 * for all the payment method operations, arguments per callback in parentheses:
 *  settings_form - ($settings = NULL) - returns form elements for the payment method's settings form
 *   included as part of the payment method.s enabling action in Rules
 *  submit_form - ($payment_method, $pane_values, $checkout_pane, $order) - returns form elements to collect
 *   details from the customer required to process the payment
 *  submit_form_validate - ($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) -
 *   validates data inputted via the payment details form elements and returns TRUE or FALSE indicating whether
 *   or not all the data passed validation
 *  submit_form_submit - ($payment_method, $pane_form, $pane_values, $order, $charge) - processes payment as
 *   necessary using data inputted via the payment details form elements on the form, resulting in the
 *   creation of a payment transaction
 *  redirect_form - ($form, &$form_state, $order, $payment_method) - returns form elements that should be submitted
 *   to the redirected payment service; because of the array merge that happens upon return, the service's URL
 *   that should receive the POST variables should be set in the #action property of the returned form array
 *  redirect_form_validate - ($order, $payment_method) - upon return from a redirected payment service, this callback
 *   provides the payment method an opportunity to validate any returned data before proceeding to checkout completion;
 *   should return TRUE or FALSE indicating whether or not the customer should proceed to checkout completion or go
 *   back a step in the checkout process from the payment page
 *  redirect_form_submit - ($order, $payment_method) - upon return from a redirected payment service, this callback
 *   provides the payment method an opportunity to perform any submission functions necessary before the customer
 *   is redirected to checkout completion
 */


/*
 * http://api.drupalcommerce.org/
 *
 * Notes about the application interface
 *
 * commerce.api.php
 * ----------------
 * hook_commerce_currency_info 		Defines currencies available to the Commerce currency formatting and price APIs.
 * hook_commerce_currency_info_alter	Allows modules to alter Commerce currency definitions.
 * hook_commerce_entity_access		Allows modules to deny or provide access for a user to perform a non-view operation
 * 					on an entity before any other access check occurs.
 * hook_commerce_entity_access_condition_alter		Allows modules to alter the conditions used on the query to 
 * 							grant view access to a Commerce entity.
 * hook_commerce_entity_access_condition_ENTITY_TYPE_alter 	Allows modules to alter the conditions used on the query to 
 * 							grant view access to a Commerce entity of the specified ENTITY TYPE.
 * hook_commerce_entity_create_alter	Allows modules to alter newly created Commerce entities.
 *
 * commerce_cart.api.php
 * ---------------------
 *
 * commerce_checkout.api.php
 * -------------------------
 *
 * commerce_customer.api.php
 * -------------------------
 * 
 * commerce_line_item.api.php
 * --------------------------
 *
 * commerce_order.api.php
 * ----------------------
 *
 * commerce_payment.api.php
 * ------------------------
 * CALLBACK_commerce_payment_method_redirect_form
 *		Payment method callback; generation callback for the payment redirect form.
 * CALLBACK_commerce_payment_method_redirect_form_submit
 *	Payment method callback; submission callback for redirected payments.
 * CALLBACK_commerce_payment_method_redirect_form_validate
 *	Payment method callback; validation callback for redirected payments.
 * CALLBACK_commerce_payment_method_settings_form
 *	Payment method callback; return the settings form for a payment method.
 * CALLBACK_commerce_payment_method_submit_form	
 *	Payment method callback; generation callback for the payment submission form.
 * CALLBACK_commerce_payment_method_submit_form_submit
 *	Payment method callback; validate callback for the payment submission form.
 * CALLBACK_commerce_payment_method_submit_form_validate	
 * 	Payment method callback; validate callback for the payment submission form.
 * hook_commerce_payment_methods		
 *	Populates an order's data array with payment methods available in checkout.
 * hook_commerce_payment_method_info	
 *	Define payment methods available to the Commerce Payment framework.
 * hook_commerce_payment_method_info_alter
 *	Alter payment methods defined by other modules.
 * hook_commerce_payment_order_paid_in_full
 *	Allows you to respond when an order is first considered paid in full.
 * hook_commerce_payment_totals_row_info
 * 	Defines rows for use in payment totals area handlers on Views.
 * hook_commerce_payment_totals_row_info_alter
 *	Allows you to alter payment totals rows.
 * hook_commerce_payment_transaction_presave
 * 	Allows you to prepare payment transaction data before it is saved.
 * hook_commerce_payment_transaction_status_info
 *	Defines payment transaction statuses.
 * hook_commerce_payment_transaction_uri
 *	Allows modules to specify a uri for a payment transaction.
 *
 * The constants can be referenced at web page:
 * http://api.drupalize.me/api/drupal/sites!all!modules!commerce!modules!payment!commerce_payment.module/7
 *   Defines the payment system and checkout integration
 * COMMERCE_CREDIT_AUTH_CAPTURE	 	
 * COMMERCE_CREDIT_AUTH_ONLY		
 * COMMERCE_CREDIT_CAPTURE_ONLY	
 * COMMERCE_CREDIT_CREDIT	
 * COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE	
 * COMMERCE_CREDIT_REFERENCE_CREDIT	
 * COMMERCE_CREDIT_REFERENCE_REMOVE	
 * COMMERCE_CREDIT_REFERENCE_SET	
 * COMMERCE_CREDIT_REFERENCE_TXN	
 * COMMERCE_CREDIT_VOID	
 * COMMERCE_PAYMENT_STATUS_FAILURE	
 * COMMERCE_PAYMENT_STATUS_PENDING	
 * COMMERCE_PAYMENT_STATUS_SUCCESS


// excerpted from http://drupalcode.org/project/commerce.git/blob_plain/HEAD:/modules/payment/commerce_payment.module
/*----

// Pending is used when a transaction has been initialized but is still awaiting
// resolution; e.g. a CC authorization awaiting capture or an e-check payment
// pending at the payment provider.
define('COMMERCE_PAYMENT_STATUS_PENDING', 'pending');

// Success is used when a transaction has completed resulting in money being
// transferred from the customer to the store or vice versa.
define('COMMERCE_PAYMENT_STATUS_SUCCESS', 'success');

// Failure is used when a transaction cannot be completed or is rejected.
define('COMMERCE_PAYMENT_STATUS_FAILURE', 'failure');

// Credit card transaction types definitions:

// Used to just authorize an amount on a credit card account.
define('COMMERCE_CREDIT_AUTH_ONLY', 'authorize');

// User to just capture an amount on a credit card account.
define('COMMERCE_CREDIT_CAPTURE_ONLY', 'capture');

// Used to capture funds from a prior authorization.
define('COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE', 'prior_auth_capture');

// Used to authorize and capture money all at once.
define('COMMERCE_CREDIT_AUTH_CAPTURE', 'auth_capture');

// Used to set up a credit card reference through the payment gateway.
define('COMMERCE_CREDIT_REFERENCE_SET', 'reference_set');

// Used to capture funds using a credit card reference.
define('COMMERCE_CREDIT_REFERENCE_TXN', 'reference_txn');

// Used to remove a reference from the payment gateway.
define('COMMERCE_CREDIT_REFERENCE_REMOVE', 'reference_remove');

// Used to credit funds to a reference at the payment gateway.
define('COMMERCE_CREDIT_REFERENCE_CREDIT', 'reference_credit');

// Used to credit funds to a credit card account.
define('COMMERCE_CREDIT_CREDIT', 'credit');

// Used to void a transaction before the transaction clears.
define('COMMERCE_CREDIT_VOID', 'void');
 
 *
 * commerce_price.api.php
 * ----------------------
 *
 * commerce_product_pricing.api.php
 * --------------------------------
 *
 * commerce_tax.api.php
 * --------------------
 * 
 * commerce_coupon.api.php
 * -----------------------
 *
 * commerce_bpc.api.php
 * --------------------
 * 
 * addressfield.api.php
 * --------------------
 * CALLBACK_addressfield_format_callback 	Format generation callback.
 *
 * ctools.api.php 		Hooks provided by the Chaos Tool Suite
 * --------------
 *
 * rules.api.php
 * -------------
 *
 * views ?
 * -------
 *
 */



/* 
 *
 *   DrupalCommerce includes/commerce_payment.credit_card.inc
 *   http://api.drupalcommerce.org/api/Drupal%20Commerce/sites!all!modules!commerce!modules!payment!includes!commerce_payment.credit_card.inc/DC
 *
 *   Credit-card helper functions for Drupal Commerce
 *   Including these functions will reduce code effort in handling cards 
 *
 * commerce_payment_credit_card_form			Returns a set of credit card form elements that payment method modules 
 *							 can incorporate into their submission form callbacks.
 * commerce_payment_credit_card_types			Returns an associative array of credit card types.
 * commerce_payment_credit_card_validate		Validates a set of credit card details entered via the credit card form.
 * commerce_payment_validate_credit_card_exp_date	Validates a credit card expiration date.
 * commerce_payment_validate_credit_card_issue		Validates that an issue number is numeric if present.
 * commerce_payment_validate_credit_card_number		Validates a credit card number using the Luhn algorithm.
 * commerce_payment_validate_credit_card_security_code	Validates a card security code based on the type of the credit card.
 * commerce_payment_validate_credit_card_start_date	Validates a credit card start date.
 * commerce_payment_validate_credit_card_type		Validates a credit card number using an array of approved card types.
 *
 */





//------------------------------------------------------------------------------------ 
/*                                misc notes                                        */
//------------------------------------------------------------------------------------


//--------------------  $nvp, name-value pairs
/*
 * A common method to prepare information to submit an outgoing string is to put the informatin in name-value pairs.
 * thus we see someting like $nvp populated in a function then used for to generate XML output in Authorize.net module.
 *
 * http://en.wikipedia.org/wiki/Attribute-value_pair 
 * A name-value pair, key-value pair, field-value pair or attribute-value pair is a fundamental data representation 
 * in computing systems and applications. Designers often desire an open-ended data structure that allows for future 
 * extension without modifying existing code or data. In such situations, all or part of the data model may be expressed 
 * as a collection of tuples <attribute name, value>; each element is an attribute-value pair.
 *
 */


//-------------------    Authorize.net
/*
 * As recommended by drupal commerce the payment module for authorize.net can be a studied for how to do similar
 * payment modules. For study of Authorize.net transaction response, this page is helpful:
 *  http://www.authorize.net/support/merchant/Transaction_Response/Transaction_Response.htm
 *   Note that arrays start with zero, so response[11] may be 12 on that chart.
 *
 */


//------------------- reading raw post data in php and xml stuff
/*
 * While we can attempt to convert or cast the xml into arrays, perhaps
 * we should work with simpleXML and use the raw_response as an simpleXML object
 * and use SimpleXML 
 * SimpleXML can also access element attributes. Access attributes of an element 
 * just as you would elements of an array.
 *
 * Basic SimpleXML usage
 * http://php.net/manual/en/simplexml.examples-basic.php
 * "The simplicity of SimpleXML appears most clearly when one extracts a string or number from a basic XML document."
 * 
 * Just using as an object when returning.... THIS DID NOT WORK.... GOT THIS ERROR:
 *     Exception: Serialization of 'SimpleXMLElement' is not allowed in serialize() 
 *     (line 7052 of /var/www/htdocs/drupal7/includes/common.inc).
 * 
 *  So... converting the xml string into an object causes grief when it wants to be stored....
 *
 * The approach that worked was to use as simpleXML when looking at values but to 
 * cast typt as string when returning from functions and for outputs
 * // http://php.net/manual/en/language.types.type-juggling.php
 * For example when we return a result that may be an object that is okay to pass as string...
 *   $response = (string)$result;
 * We can use the php function SimpleXMLElement to create an object that we can use much
 * like an array, but remember that it is an object not array.
 * http://php.net/manual/en/simplexml.examples-basic.php
 * Example..
 *  $simplexmlGWresponse = simplexml_load_string($stringGWresponse);
 * And later an example for when we want information out of the xml,
 *  $transaction->remote_id = (string) $simplexmlGWresponse->Result->TransactionID;
 *  
 * AND AN ANOTHER NOTE....
 *  Notice that when we get the TransactionID we are not using the 
 *  very outer wrapping xml tag <QGWRequest> 
 *  !!!THIS DOES NOT WORK: $simplexmlGWresponse->QGWRequest->Result->TransactionID;
 *  !!!BUT THIS DOES WORK: $simplexmlGWresponse->Result->TransactionID;
 *
 **/


