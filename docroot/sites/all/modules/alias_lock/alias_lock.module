<?php
/**
 * @file
 * Base module file for alias_lock
 *
 * @todo Make aliases visible locked at admin/config/search/path
 * @todo Allow lock toggle on admin/config/search/path/edit/PID
 *
 * @defgroup alias_lock Alias Lock
 * @{
 */

/**
 * Determine if a node's alias is locked
 *
 * @param int $nid
 *
 * @return bool
 */
function alias_lock_is_locked($nid) {
  if (!is_numeric($nid)) {
    return NULL;
  }
  return (bool) alias_lock_load('node/' . $nid);
}

/**
 * Fetch a specific URL alias from the locked table
 *
 * @param $conditions
 *   A string representing the source, a number representing the pid, or an
 *   array of query conditions.
 *
 * @return
 *   FALSE if no alias was found or an associative array containing the
 *   following keys:
 *   - source: The internal system path.
 *   - alias: The URL alias.
 *   - pid: Unique path alias identifier.
 *   - language: The language of the alias.
 */
function alias_lock_load($conditions) {
  if (is_numeric($conditions)) {
    $conditions = array('pid' => $conditions);
  }
  elseif (is_string($conditions)) {
    $conditions = array('source' => $conditions);
  }

  if (is_array($conditions) &&
          ($schema = drupal_get_schema('alias_lock')) &&
          !empty($schema['fields']) &&
          ($keys = array_intersect_key($conditions, $schema['fields']))) {
    $select = db_select('alias_lock');
    foreach (element_children($keys) as $key) {
      $value = $keys[$key];
      $select->condition($key, $value);
    }
    $data = $select
      ->fields('alias_lock')
      ->execute()
      ->fetchAssoc();
    if (!empty($data)) {
      $data['#alias_locked'] = TRUE;
    }
    return $data;
  }
  return FALSE;
}

/**
 * Process multiple nodes actions: lock/unlock
 */
function alias_lock_node_multiple($nids, $op) {
  foreach ($nids as $nid) {
    if ($data = path_load('node/' . $nid)) {
      $func = 'alias_lock_' . $op;
      if (function_exists($func)) {
        $func($data);
      }
    }
  }
}

/**
 * Lock an alias
 *
 * @param $path
 *   An associative array containing the following keys:
 *   - source: The internal system path.
 *   - alias: The URL alias.
 *   - pid: (optional) Unique path alias identifier.
 *   - language: (optional) The language of the alias.
 */
function alias_lock_lock(&$path) {
  $path += array('language' => LANGUAGE_NONE);

  if (empty($path['alias'])) {
    drupal_set_message(t('You cannot lock an empty alias!'), 'warning');
  }

  // Load the stored alias, if any.
  if (!empty($path['pid']) && !isset($path['original'])) {
    $path['original'] = path_load($path['pid']);
  }

  if (!alias_lock_load($path)) {
    drupal_write_record('alias_lock', $path);
  }
  else {
    drupal_write_record('alias_lock', $path, array('pid'));
  }

  // Clear internal properties.
  unset($path['original']);

  // Clear the static alias cache.
  drupal_clear_path_cache($path['source']);
}

/**
 * Unlock an alias
 *
 * @param $criteria
 *   A number representing the pid or an array of criteria.
 */
function alias_lock_unlock($criteria) {
  if (!is_array($criteria)) {
    $criteria = array('pid' => $criteria);
  }
  if (!($path = alias_lock_load($criteria))) {
    return;
  }
  $query = db_delete('alias_lock');
  foreach (element_children($path) as $field) {
    $value = $path[$field];
    $query->condition($field, $value);
  }
  $query->execute();
  drupal_clear_path_cache($path['source']);
}

/**
 * Implements alias_lock_form_BASE_FORM_ID_alter() for node_form().
 *
 * @see path_form_element_validate()
 */
function alias_lock_form_node_form_alter(&$form, $form_state) {
  if (!empty($form['path']['pid']['#value'])) {
    $locked = !empty($form['#node']->nid) ? alias_lock_is_locked($form['#node']->nid) : FALSE;
    $form['path']['alias_lock'] = array(
      '#type' => 'checkbox',
      '#title' => t('Lock alias from being deleted or updated?'),
      '#default_value' => $locked,
      '#access' => user_access('create url aliases') || user_access('administer url aliases'),
    );
  }
}

/**
 * Implements alias_lock_node_insert().
 */
function alias_lock_node_insert($node) {
  if (isset($node->path)) {
    alias_lock_node_update($node);
  }
}

/**
 * Implements alias_lock_node_update().
 */
function alias_lock_node_update($node) {
  if (isset($node->path)) {
    $path = $node->path;
    if (array_key_exists('alias_lock', $path)) {
      if ($path['alias_lock']) {
        alias_lock_lock($path);
      }
      else {
        alias_lock_unlock($path);
      }
    }
  }
}

/**
 * Respond to a path being updated.
 *
 * @param $path
 *   An associative array containing the following keys:
 *   - source: The internal system path.
 *   - alias: The URL alias.
 *   - pid: Unique path alias identifier.
 *   - language: The language of the alias.
 *
 * @see path_save()
 */
function alias_lock_path_update($path) {
  // When updating a locked alias; we'll overwrite it with the locked version.
  if (empty($path['#alias_locked']) && ($locked = alias_lock_load($path['original']))) {
    drupal_set_message(t('One or more locked aliases were <strong>restored to their original values</strong>.'), 'warning');
    path_save($locked);
  }
}

/**
 * Respond to a path being deleted.
 *
 * @param $path
 *   An associative array containing the following keys:
 *   - source: The internal system path.
 *   - alias: The URL alias.
 *   - pid: Unique path alias identifier.
 *   - language: The language of the alias.
 *
 * @see path_delete()
 */
function alias_lock_path_delete($path) {
  // When updating a locked alias; we'll overwrite it with the locked version.
  if (($locked = alias_lock_load($path))) {
    drupal_set_message(t('One or more locked aliases were <strong>restored to their original values</strong>.'), 'warning');
    path_save($locked);
  }
}

/**
 * Add mass node operations.
 *
 * This hook enables modules to inject custom operations into the mass
 * operations dropdown found at admin/content, by associating a callback
 * function with the operation, which is called when the form is submitted. The
 * callback function receives one initial argument, which is an array of the
 * checked nodes.
 *
 * @return
 *   An array of operations. Each operation is an associative array that may
 *   contain the following key-value pairs:
 *   - 'label': Required. The label for the operation, displayed in the dropdown
 *     menu.
 *   - 'callback': Required. The function to call for the operation.
 *   - 'callback arguments': Optional. An array of additional arguments to pass
 *     to the callback function.
 */
function alias_lock_node_operations() {
  $operations = array(
    'alias_lock' => array(
      'label' => t('Lock URL aliases'),
      'callback' => 'alias_lock_node_multiple',
      'callback arguments' => array('lock'),
    ),
    'alias_unlock' => array(
      'label' => t('Unlock URL aliases'),
      'callback' => 'alias_lock_node_multiple',
      'callback arguments' => array('unlock'),
    ),
  );
  return $operations;
}

/**
 * Implements hook_form_alter().
 */
function alias_lock_form_pathauto_admin_delete_alter(&$form, $form_state) {
  $form['#submit'][] = 'alias_lock_restore_locked';
  //array_unshift($form['#submit'], '_alias_lock_form_pathauto_admin_delete_catch_keys');
}

/**
 * Capture the pids before they're deleted
 */
//function _alias_lock_form_pathauto_admin_delete_catch_keys($form, &$form_state) {
//  $objects = module_invoke_all('path_alias_types');
//  $keys = array_intersect_key($objects, array_filter($form_state['values']));
//  foreach (array_keys($keys) as $key) {
//    $form_state['alias_lock']['pids'] = db_select('url_alias', 'a')
//      ->fields('a', array('pid',))
//      ->condition('source', db_like($key) . '%', 'LIKE')
//      ->execute()->fetchCol();
//  }
//}

/**
 * Restore all locked aliases
 */
function alias_lock_restore_locked($form, &$form_state) {

  //// These are the aliases we need to restore
  //if (empty($form_state['alias_lock']['pids'])) {
  //  return;
  //}
  $pids = db_select('alias_lock', 'a')
    ->fields('a', array('pid'))
    //->condition('pid', $form_state['alias_lock']['pids'], 'IN')
    ->execute()->fetchCol();

  foreach ($pids as $pid) {
    drupal_set_message(format_plural(count($pids), '1 locked alias has been verified', '@count locked aliases have been verified.'), 'status', FALSE);
    $restore = alias_lock_load($pid);
    if (!path_load($pid)) {
      unset($restore['pid']);
    }
    path_save($restore);
    if ($restore['pid'] != $pid) {
      $count = db_update('alias_lock')
        ->fields(array('pid' => $restore['pid']))
        ->condition('pid', $pid)
        ->execute();
    }
  }
}
