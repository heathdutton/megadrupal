<?php

/**
 * @file
 * The main file of the Github Widget module.
 */

define('GITHUB_BASE_URL', 'https://github.com');

/**
 * Implementation of hook_menu().
 */
function github_widget_menu() {
  $items = array();

  $items['admin/config/system/github_widget'] = array(
    'title'            => 'Github Widget',
    'description'      => 'Select the content types that can use the github widget.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_github_widget_admin_settings'),
    'access arguments' => array('access administration pages'),
    'file'             => 'github_widget.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function github_widget_form_alter(&$form, &$form_state, $form_id) {
  $github_widget_node_types = variable_get('github_widget_type_filters', array());

  // Only add a fields for nodes that are marked as possible github nodes.
  if (isset($form['type']) && isset($form['#node']) && $github_widget_node_types[$form['type']['#value']]) {
    $form['github'] = _github_widget_extend_node_form($form['#node']);
  }
}

/**
 * Implementation of hook_node_insert().
 */
function github_widget_node_insert($node) {
  // When using the promote and demote action the node is not completely
  // loaded and thus values are not set. This can give problems.
  if (!empty($node->github_repo_name) && !empty($node->github_username)) {
    github_widget_node_delete($node);
    db_insert('github_widget')
    ->fields(array(
    'nid' => $node->nid,
    'repo' => $node->github_repo_name,
    'username' => $node->github_username,
    ))
    ->execute();
  }
}

/**
 * Implementation of hook_node_delete().
 */
function github_widget_node_delete($node) {
  db_delete('github_widget')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implementation of hook_node_update().
 */
function github_widget_node_update($node) {
  $github_widget_node_types = variable_get('github_widget_type_filters', array());
  if ($github_widget_node_types[$node->type]) {
    if (!empty($node->github_repo_name) && !empty($node->github_username)) {
      db_update('github_widget')
      ->fields(array('repo' => $node->github_repo_name, 'username' => $node->github_username))
      ->condition('nid', $node->nid)
      ->execute();
    }
  }
}

/**
 * Implementation of hook_node_load().
 */
function github_widget_node_load($nodes, $types) {
  $result = db_query('SELECT nid, repo AS github_repo_name, username AS github_username FROM {github_widget} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->github_repository = $record->github_repo_name;
    $nodes[$record->nid]->github_owner = $record->github_username;
  }
}

/**
 * Implementation of hook_node_view().
 */
function github_widget_node_view($node, $view_mode, $langcode) {
  $github_widget_node_types = variable_get('github_widget_type_filters', array());
  if ($github_widget_node_types[$node->type]) {
    if (!variable_get('github_widget_block_only', 0)) {
      $node->content['github_widget'] = array(
      '#markup' => _github_widget_show_repo_info($node),
      '#weight' => 10,
      );
    }
  }
}

/**
 * Implementation of hook_node_validate.
 */
function github_widget_node_validate($node, $form, &$form_state) {
  $github_widget_node_types = variable_get('github_widget_type_filters', array());
  if ($github_widget_node_types[$node->type]) {
     _github_widget_validate($node, $form, $form_state);
  }
}

/**
 * Implementation of hook_block_info().
 */
function github_widget_block_info() {
  $blocks['github_widget'] = array(
    'info' => t('Github widget'),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function github_widget_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'github_widget':
      $block['github_widget'] = t('Github Widget');
      
      // Show block only on node pages.
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $github_widget_node_types = variable_get('github_widget_type_filters', array());
        $query = db_query("SELECT n.type FROM {node} n WHERE n.nid = :nid", array(':nid' => arg(1)));
        $type = $query->fetchField();
        if ($github_widget_node_types[$type]) {
          $node = node_load(arg(1));
          $block = array(
          'subject' => t('Github Project'),
          'content' => _github_widget_show_repo_info($node),
          );
        }
      }
      break;
  }
  return $block;
}

/**
 * Implementation of hook_block().
 */
function github_widget_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Github widget'),
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        // Show block only on node pages.
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $github_widget_node_types = variable_get('github_widget_type_filters', array());

          $type = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", arg(1)));
          if ($github_widget_node_types[$type]) {
            $node = node_load(arg(1));
            $block = array(
              'subject' => t('Github Project'),
              'content' => _github_widget_show_repo_info($node),
            );
          }
        }
        break;
    }
    return $block;
  }
}

/**
 * Helper function for form generation. Extend node form with own fields.
 *
 * @param $node
 */
function _github_widget_extend_node_form($node) {
  $form['github'] = array(
    '#type' => 'fieldset',
    '#title' => t('Github settings'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['github']['github_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Owner of the Github repository'),
    '#description' => t('Enter the username of the owner of the Github repository'),
    '#default_value' => isset($node->github_owner) ? $node->github_owner : NULL,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
  );

  $form['github']['github_repo_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of the Github repository'),
    '#description' => t('The name of the Github repository'),
    '#default_value' => isset($node->github_repository) ? $node->github_repository : NULL,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
  );

  return $form;
}

/**
 * Helper function for showing repo info on the node view.
 *
 * @param $node
 */
function _github_widget_show_repo_info($node) {
  global $user;
  static $output = NULL;

  // Only use the static on the node pages. On pages where more then one node
  // is shown it can give problems.
  if ((!is_null($output)) && (arg(0) == 'node') && is_numeric(arg(1))) {
    return $output;
  }

  if (!empty($node->github_owner) && !empty($node->github_repository)) {
    $url = _github_widget_url_exists(_github_widget_build_url($node->github_owner, $node->github_repository));
    if ($url) {
      // Get the Github info.
      include_once(drupal_get_path('module', 'github_widget') . '/Github/Autoloader.php');
      Github_Autoloader::register();
      $github = new Github_Client();
      $repo = $github->getRepoApi()->show($node->github_owner, $node->github_repository);
      $tags = $github->getRepoApi()->getRepoBranches($node->github_owner, $node->github_repository);
      // Highest tags on top.
      krsort($tags, SORT_NUMERIC);

      if (!variable_get('github_widget_releases_only', 0)) {
        // Build project information table.
        $project_header = array(array('data' => ('Project information'), 'colspan' => 2));
        $project_rows['name'] = array(t('Name'), l($repo['name'], _github_widget_build_url($node->github_owner, $node->github_repository), array('attributes' => array('target' => array('_blank')))));
        $project_rows['owner'] = array(t('Owner'), $repo['owner']);
        $project_rows['description'] = array(t('Description'), $repo['description']);
        $project_rows['readme'] = array(t('Information'), _github_widget_find_readme($github, $tags, $node));
        $output = theme('table', array('header' => $project_header, 'rows' => $project_rows, 'attributes' => array('id' => 'github_widget_table')));
      }

      // Releases.
      if (count($tags)) {
        $release_header = array(array('data' => ('Releases'), 'colspan' => 2));
        foreach ($tags as $tag_key => $tag_value) {

          // Support 7.x-1.0 and 7.x style tags.
          $pattern = '/^[0-9]\.(x|x-[0-9]\.(x|[0-9])(-dev)?)$/';
          preg_match($pattern, $tag_key, $matches);

          // Support 2.3.6 or 3.x-dev tags too.
          $pattern_mediamosa = '/^[0-9]\.(x|[0-9])(\.(x|[0-9]))?(-dev)?$/';
          preg_match($pattern_mediamosa, $tag_key, $matches_mediamosa);

          if (!variable_get('github_widget_allowed_releases', 1) || count($matches) || count($matches_mediamosa)) {
            $release_rows[$tag_key] = _github_widget_build_links($node, $tag_key, $tag_value);
          }
        }
        $output .= theme('table', array('header' => $release_header, 'rows' => $release_rows , 'attributes' => array('id' => 'github_widget_table')));
      }
      return $output;
    }
    // URL is no longer valid. Give a nice message
    else {
      $error_message = t('The url !url is not available. Check the Github username and the name of the repository.', array('!url' => _github_widget_build_url($node->github_owner, $node->github_repository)));
      watchdog('content', $error_message, array(), WATCHDOG_ERROR);
      // show message for the owner or admin
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $query = db_query("SELECT n.uid FROM {node} n WHERE n.nid = :nid", array(':nid' => arg(1)));
        $uid_owner = $query->fetchField();
        if ($user->uid == $uid_owner || user_access('administer nodes', $user)) {
          drupal_set_message($error_message, 'error', FALSE);
        }
      }
    }
  }
}

/**
 * Helper function for validating the node.
 *
 * @param $node
 * @param $form
 */
function _github_widget_validate($node, $form, $form_state) {
  if (!empty($node->github_username) && empty($node->github_repo_name)) {
    form_set_error('github_repo_name', t('The owner of the Github repository has been set, but not the name of the repository.'));
  }

  if (empty($node->github_username) && !empty($node->github_repo_name)) {
    form_set_error('github_username', t('The name of the Github repository has been set, but not the owner of the repository.'));
  }

  if (!empty($node->github_username) && !empty($node->github_repo_name)) {
    $uri = _github_widget_build_url($node->github_username, $node->github_repo_name);
    if (!_github_widget_url_exists($uri)) {
      form_set_error('github_repo_name', t("The Github page !link doesn't exist. Check the username and the name of the repository.", array('!link' => l($uri, $uri))));
    }
  }
}

/**
 * Helper function for validating if a github page exists.
 *
 * @param $url
 *
 * @return boolean
 */
function _github_widget_url_exists($url) {
  if ($url == NULL) {
    return FALSE;
  }

  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_TIMEOUT, 5);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $data = curl_exec($ch);
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  if ($httpcode >= 200 && $httpcode < 300) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function for building links in the widget.
 *
 * @param $node
 * @param $tag_key
 * @param $tag_value
 */
function _github_widget_build_links($node, $tag_key, $tag_value) {
  $uri = _github_widget_build_url($node->github_owner, $node->github_repository);

  $tar =  l(t('tar.gz'), $uri . '/tarball/' . $tag_value);
  $zip =  l(t('zip'), $uri . '/zipball/' . $tag_value);

  return array($tag_key, $tar . ' | ' . $zip);
}

/**
 * Helper function for building link to READme file.
 */
function _github_widget_find_readme($github, $tags, $node) {
  $keys = array_keys($tags);
  $tree = $github->getObjectApi()->showTree($node->github_owner, $node->github_repository, $tags[$keys[0]]);

  foreach ($tree as $key => $file) {
    if (strtolower(drupal_substr($file['name'], 0, 6)) == "readme") {
      // Example: https://github.com/drupal/drupal/blob/7.x/README.txt
      return l(t('View !readme', array('!readme' => $file['name'])), _github_widget_build_url($node->github_owner, $node->github_repository) . '/blob/' . $tags[$keys[0]] . '/' . $file['name'] , array('attributes' => array('target' => array('_blank'))));
    }
  }
}

/**
 * build the url of a project
 *
 */
function _github_widget_build_url($username, $repo_name) {
  return $uri = GITHUB_BASE_URL . '/' . $username . '/' . $repo_name;
}