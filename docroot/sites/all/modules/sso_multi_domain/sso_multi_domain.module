<?php

/**
 * @file
 * This module provides single sign on to multiple drupal websites.
 */

/**
 * Implements hook_user_login().
 */
function sso_multi_domain_user_login(&$edit, $account) {
  if (arg(0) != 'sso_multi_domain') {
    // Stores the encrypted users details on primary domain with a unique hash.
    $hash = md5(time());
    db_insert('sso_multi_domain_sessions')->fields(array(
      'hash' => $hash,
      'username' => sso_multi_domain_encrypt_string($edit['values']['name']),
      'password' => sso_multi_domain_encrypt_string($edit['values']['pass']),
      'uid' => $account->uid,
      'created' => time(),
    ))->execute();

    // Creates a session to trigger the single sign on process on execution
    // page.
    $_SESSION['process_sso'] = 1;
    // Creates a session for hash which can be further used.
    $_SESSION['sso_multi_domain_hash'] = $hash;
    // Stores destination after login so that we can redirect the user back to
    // the correct location after login.
    $_SESSION['destination'] = $_GET['destination'];
    // Change the destination to our processing page to execute the single sign
    // on process.
    $_GET['destination'] = 'sso_multi_domain/execute/sso';
  }
}

/**
 * Implements hook_menu().
 */
function sso_multi_domain_menu() {

  $items = array();
  $items['admin/config/system/sso_multi_domain'] = array(
    'title' => 'Single Sign On Setting',
    'description' => 'Configure Single Sign On setting.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sso_multi_domain_configure'),
    'access arguments' => array('administer site configuration'),
    'file' => 'sso_multi_domain.admin.inc',
  );

  $items['sso_multi_domain/execute/sso'] = array(
    'title' => 'Please Wait...',
    'page callback' => 'sso_multi_domain_execute_sso',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'sso_multi_domain.pages.inc',
  );

  $items['sso_multi_domain/spacer/%/%'] = array(
    'page callback' => 'sso_multi_domain_spacer_image',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'sso_multi_domain.pages.inc',
  );

  $items['sso_multi_domain/fetch_login_details/%'] = array(
    'access callback' => TRUE,
    'page callback' => 'sso_multi_domain_fetch_login_details',
    'page arguments' => array(2),
    'delivery callback' => 'drupal_json_output',
    'file' => 'sso_multi_domain.pages.inc',
  );

  return $items;
}

/**
 * Custom helper function to encrypt a string.
 */
function sso_multi_domain_encrypt_string($string) {
  $string_prefix = sso_multi_domain_random_string();
  $string_suffix = sso_multi_domain_random_string();
  $separator = '#SEP#';
  $string = $string_prefix . $separator . $string . $separator . $string_suffix;

  return base64_encode($string);
}

/**
 * Custom helper function to decrypt a string.
 */
function sso_multi_domain_decrypt_string($string) {
  $separator = '#SEP#';
  $string = base64_decode($string);
  $exploded_string_array = explode($separator, $string);

  return $exploded_string_array[1];
}

/**
 * Custom helper function to generate a random string.
 */
function sso_multi_domain_random_string($length = 10) {

  $valid_characters = "abcdefghijklmnopqrstuxyvwzABCDEFGHIJKLMNOPQRSTUXYVWZ+-*&@!?";

  $valid_char_number = strlen($valid_characters);

  $result = "";

  for ($i = 0; $i < $length; $i++) {

    $index = mt_rand(0, $valid_char_number - 1);

    $result .= $valid_characters[$index];
  }

  return $result;
}

/**
 * Implements hook_cron().
 */
function sso_multi_domain_cron() {
  // Finds time one hour ago.
  $time_one_hour_ago = time() - 3600;

  // Delete all records more than one hour old.
  db_delete('sso_multi_domain_sessions')
      ->condition('created', $time_one_hour_ago, '<')
      ->execute();
}

/**
 * Implements hook_theme().
 */
function sso_multi_domain_theme() {
  return array(
    'sso_multi_domain_process_page' => array(
      'variables' => array(),
      'template' => 'templates/sso-multi-domain-process-page',
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function sso_multi_domain_preprocess_page(&$variables) {
  if (drupal_match_path(current_path(), 'sso_multi_domain/*')) {
    $variables['theme_hook_suggestions'][] = 'page__ssomultidomain';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function sso_multi_domain_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'sso_multi_domain') . '/templates';
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('page');
  foreach ($hooks as $h) {
    if (is_array($theme_registry[$h]['theme path'])) {
      $first_element = array_shift($theme_registry[$h]['theme path']);
      array_unshift($theme_registry[$h]['theme path'], $first_element, $mod_path);
    }
  }
}
