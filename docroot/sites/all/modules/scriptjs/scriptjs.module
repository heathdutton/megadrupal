<?php
/**
 * @file
 * Script.js module. 
 */

/**
 * Implements hook_permission().
 */
function scriptjs_permission() {
  return array(
    'administer scriptjs' => array(
      'title' => t('Administer Script.js'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function scriptjs_menu() {
  $items = array();

  $items['admin/config/development/performance/default'] = array(
    'title' => 'Performance',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'system'),
    'weight' => 0,
  );

  $items['admin/config/development/performance/scriptjs'] = array(
    'title' => 'Script.js',
    'description' => 'Configure settings for the Script.js module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scriptjs_settings_form'),
    'access arguments' => array('administer scriptjs'),
    'file' => 'scriptjs.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function scriptjs_help($path) {
  switch ($path) {
    case 'admin/help#scriptjs':
    case 'admin/config/development/performance/scriptjs':
      $output = '<p>' . t('The Script.js module uses the <a href="!link">$script.js</a> javascript library to dramatically improve javascript loading times by downloading individual script files asynchronously.', array('!link' => 'https://github.com/ded/script.js')) . '</p>';
      $output .= '<p>' . t('Since downloading many small files at the same time is faster than downloading one big file, $script.js makes pages load blazingly fast and is especially beneficial for certain mobile browsers who limit the size of individually cached javascript files.') . '</p>';
      $output .= '<p>' . t('For more information see the original $script.js <a href="!link">blog post</a>', array('!link' => 'http://dustindiaz.com/scriptjs')) . '</p>';
      $output .= '<p>' . t('If something is not working as expected please <a href="http://drupal.org/node/add/project-issue/scriptjs">file an issue</a>.');
      return $output;
      break;
  }
}

/**
 * Implements hook_js_alter().
 */
function scriptjs_js_alter(&$javascript) {
  // Load dependencies.
  module_load_include('inc', 'scriptjs');
  
  // Module must be enabled and path not excluded.
  if (!_scriptjs_is_enabled()) {
    return;
  }
  
  $scriptjs_file = scriptjs_get_path();
  
  // Check if library exists & is readable before doing anything else.
  if (!is_readable($scriptjs_file)) {
    drupal_set_message(t('Download the $script.js library at <a href="!link">!link</a> to /sites/all/libraries/scriptjs. You can alternatively use Drush, see the README.txt for more information.', array('!link' => 'https://github.com/ded/script.js')), 'error', FALSE);
    return;
  }
  
  // Detach settings.
  $settings = $javascript['settings'];
  unset($javascript['settings']);
  
  // Backup original javascript array & clear it.
  $js = $javascript;
  $javascript = array();

  // Sort the JavaScript so that it appears in the correct order.
  uasort($js, 'drupal_sort_css_js');
  
  // Detach scripts with defer flag.
  $defer = array_filter($js, '_scriptjs_filter_defer');
  
  // Detach scripts with header scope.
  $header = array_filter($js, '_scriptjs_filter_header');
  
  // Detach scripts with footer scope.
  $footer = array_filter($js, '_scriptjs_filter_footer');
  
  // Detach inline scripts in header scope.
  $header_inline = array_filter($js, '_scriptjs_filter_inline');
  
  // Detach inline scripts in footer scope.
  $footer_inline = array_filter($js, '_scriptjs_filter_inline');
  
  // Get default query string to control caching.
  // @see drupal_get_js().
  $default_query_string = variable_get('css_js_query_string', '0');
  
  // Finally, flatten script arrays & make paths absolute.
  if (!empty($header)) {
    $header = array_map('_scriptjs_flatten', $header, array($default_query_string));
  }

  if (!empty($footer)) {
    $footer = array_map('_scriptjs_flatten', $footer, array($default_query_string));
  }
  
  if (!empty($defer)) {
    $defer = array_map('_scriptjs_flatten', $defer, array($default_query_string));
  }
  
  // Provide the page with information about the individual JavaScript files used.
  // This information is not otherwise available when aggregation is enabled.
  // @see drupal_get_js().
  $ajaxPageState = array_fill_keys(array_keys($js), 1);

  // Find ajaxPageState in settings array.
  foreach ($settings['data'] as $k => $v) {
    if (is_array($v)) {
      foreach ($v as $kk => $vv) {
        if ($kk === 'ajaxPageState') {
          $pos = $k;
          break;
        }
      }
    }
  }

  // Add ajaxPageState info to settings.
  if (isset($pos)) {
    $settings['data'][$pos]['ajaxPageState']['js'] = $ajaxPageState;
  } else {
    $settings['data'][]['ajaxPageState']['js'] = $ajaxPageState;
  }
  
  // Build settings JavaScript call.
  // @see drupal_get_js().
  if ($settings) {
    $settings = 'jQuery.extend(Drupal.settings, ' . drupal_json_encode(drupal_array_merge_deep_array($settings['data'])) . ");";
  }
  
  // Add scriptjs to the $javascript array.
  if (variable_get('scriptjs_embed', FALSE)) {
    $javascript['scriptjs--script'] = array(
      'group' => JS_LIBRARY - 10,
      'weight' => -50,
      'every_page' => 1,
      'preprocess' => FALSE,
      'type' => 'inline',
      'scope' => 'header',
      'defer' => FALSE,
      'data' => file_get_contents($scriptjs_file),
    );
  } else {
    $javascript[$scriptjs_file] = array(
      'group' => JS_LIBRARY - 10,
      'weight' => -50,
      'every_page' => 1,
      'inline' => FALSE,
      'preprocess' => FALSE,
      'type' => 'file',
      'scope' => 'header',
      'cache' => TRUE,
      'defer' => FALSE,
      'data' => $scriptjs_file
    );
  }
  
  // Track next dependency.
  $next = NULL;
  
  // Initialize inline scripts.
  $scriptjs = '';
  
  // Treat first 3 scripts differently.
  if (count($header) >= 3) {
    $core = array_splice($header, 0, 3);
    $scriptjs .= '$script([\'' . implode('\', \'', $core) . '\'], \'core\');' . "\n";
    $next = 'core';
  }
  
  // Build header call.
  if (!empty($header)) {
    $scriptjs .= '$script.ready(\'' . $next . '\', function() {' . "\n";
    $scriptjs .= '  $script([\'' . implode('\', \'', $header) . '\'], \'header\');';
    $scriptjs .= '});' . "\n";
    $next = 'header';
  }
  
  // Build inline header call.
  if (!empty($header_inline)) {
    $scriptjs .= '$script.ready(\'' . $next . '\', function() {' . "\n";

    foreach ($header_inline as $inline) {
      $scriptjs .= $inline['data'] . ';';
    }

    $scriptjs .= '});' . "\n";
    $next = 'header';
  }
  
  // Build settings call.
  if (!empty($settings)) {
    $scriptjs .= '$script.ready(\'' . $next . '\', function() {' . "\n";
    $scriptjs .= "  {$settings}";
    $scriptjs .= '});' . "\n";
  }
  
  // Build footer call.
  if (!empty($footer)) {
    $scriptjs .= '$script.ready(\'' . $next . '\', function() {' . "\n";
    $scriptjs .= '  $script([\'' . implode('\', \'', $footer) . '\'], \'footer\');';
    $scriptjs .= '});' . "\n";
    $next = 'footer';
  }
  
  // Build inline footer call.
  if (!empty($footer_inline)) {
    $scriptjs .= '$script.ready(\'' . $next . '\', function() {' . "\n";

    foreach ($footer_inline as $inline) {
      $scriptjs .= $inline['data'] . ';';
    }

    $scriptjs .= '});' . "\n";
    $next = 'footer';
  }
  
  // Finally, build deferred call.
  if (!empty($defer)) {
    $scriptjs .= '$script.ready(\'' . $next . '\', function() {' . "\n";
    $scriptjs .= '  $script([\'' . implode('\', \'', $defer) . '\'], \'defer\');';
    $scriptjs .= '});' . "\n";
    $next = 'defer';
  }
  
  // Let Drupal.js know which was the last step.
  $scriptjs .= "var scriptjs_module_last='{$next}';";
  
  // Add built scripts string to $javascript array.
  $javascript['scriptjs--includes'] = array(
    'group' => JS_LIBRARY,
    'weight' => -49,
    'every_page' => 1,
    'defer' => FALSE,
    'type' => 'inline',
    'scope' => 'header',
    'data' => $scriptjs,
  );
  
//  include_once drupal_get_path('module', 'devel') . '/krumo/class.krumo.php';
//  krumo($javascript);die;
}