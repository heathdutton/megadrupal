<?php

/**
 * Implements hook_menu().
 */
function og_default_members_menu() {
  $items = array();

  $items['admin/config/group/default-members'] = array(
    'title' => 'OG default members',
    'description' => 'Manage default member settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_default_members_admin_form'),
    'access arguments' => array('administer group'),
    'file' => 'og_default_members.admin.inc',
  );

  $items['og-default-members/remove-default-member/%user'] = array(
    'title' => 'Remove a default og member',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer group'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_default_members_remove_default_member', 2),
    'file' => 'og_default_members.admin.inc',
  );

  $items['group/%/%/admin/default-members'] = array(
    'title callback' => 'og_ui_menu_title_callback',
    'title arguments' => array(t('Default members in @group'), 1, 2),
    'description' => 'Find and manage group members.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_default_members_manage_default_members', 1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('manage default members', 1, 2),
    'file' => 'og_default_members.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_og_permission().
 */
function og_default_members_og_permission() {
  $items = array();

  $items['manage default members'] = array(
    'title' => t('Manage default members'),
    'description' => t('Allow members to determine users who should become group members by default.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
    'restrict access' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function og_default_members_og_ui_get_group_admin($group_type, $gid) {
  $items = array();

  if (og_user_access($group_type, $gid, 'manage default members')) {
    $items['default_members'] = array(
      'title' => t('Default members'),
      'description' => t('Manage default member settings.'),
      'href' => 'admin/default-members',
    );
  }

  return $items;
}

/**
 * Implements hook_user_insert().
 */
function og_default_members_user_insert(&$edit, $account, $category) {
  _og_default_members_update_user_memberships($account);
}

/**
 * Implements hook_user_update().
 */
function og_default_members_user_update(&$edit, $account, $category) {
  _og_default_members_update_user_memberships($account);
}

/**
 * Implements hook_entity_insert().
 *
 * Add the default users as a group member into the newly created group.
 */
function og_default_members_entity_insert($entity, $entity_type) {
  // Check if the inserted entity is a group.
  if (!og_is_group($entity_type, $entity)) {
    return;
  }

  // Check that there are any default users configured.
  $default_members = variable_get('og_default_members_default_users', array());
  if (empty($default_members)) {
    return;
  }

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  // Save $default_members as a group member.
  foreach ($default_members as $uid) {
    $account = entity_load_single('user', $uid);
    if (!empty($account)) {
      _og_default_members_associate_user_with_group($entity, $entity_type, $account);
    }
  }
}

/**
 * Implements hook_user_role_delete().
 *
 * If the removed role was used as an enabled  group default role, update the
 * configuration settings and also clear group database entries which are using it.
 */
function og_default_members_user_role_delete($role) {
  $default_roles = variable_get('og_default_members_enabled_roles', array());
  if (!empty($default_roles[$role->rid])) {
    _og_default_members_remove_default_group_roles(array($role->rid));
  }
}

/**
 * Implements hook_theme().
 */
function og_default_members_theme($existing, $type, $theme, $path) {
  return array(
    'og_default_members_admin_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme callback to render the default group members as a table.
 */
function theme_og_default_members_admin_form(&$variables) {
  $output = NULL;
  $rows = array();

  $form = $variables['form'];
  $header = array(t('Username'), t('Mail'), t('Delete'));

  if (!empty($form['og_default_members_default_users'])) {
    foreach (element_children($form['og_default_members_default_users']) as $key) {
      $row = array();
      $row[] = drupal_render($form['og_default_members_default_users'][$key]['name']);
      $row[] = drupal_render($form['og_default_members_default_users'][$key]['mail']);
      $row[] = drupal_render($form['og_default_members_default_users'][$key]['delete']);
      $rows[] = $row;
    }
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows,
    'attributes' => array('id' => 'og-default-members-user-list')));
  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Update the given user membership according to the user roles.
 *
 * @param $account
 *  User account.
 */
function _og_default_members_update_user_memberships($account) {
  foreach ($account->roles as $rid => $role) {
    // Load groups that enabled $role.
    $values = _og_default_members_get_groups_by_role(array($rid));

    if (!empty($values)) {
      foreach ($values as $value) {
        // Associate the user with group.
        $group = entity_load_single($value->group_type, $value->gid);
        _og_default_members_associate_user_with_group($group, $value->group_type, $account);
      }
    }
  }
}

/**
 * Gets the role's groups.
 *
 * @param $rid
 *   The user role ID.
 * @return
 *   An array of the role's groups.
 */
function _og_default_members_get_groups_by_role(array $rid) {
  $query = db_select('og_default_members', 'odm');
  $query->condition('rid', $rid, 'IN');
  $query->fields('odm', array('gid', 'group_type'));

  return $query->execute()->fetchAll();
}

/**
 * Gets the group's roles.
 *
 * @param $gid
 *   The organic group ID.
 *
 * @return
 *   An array of the group's roles.
 */
function _og_default_members_get_roles_by_group($gid) {
  $query = db_select('og_default_members', 'odm');
  $query->condition('gid', $gid);
  $query->fields('odm', array('rid'));

  return $query->execute()->fetchCol();

}

/**
 * Save a group default member roles into the database.
 *
 * @param $group_id
 * @param $group_type
 * @param array $role_ids
 */
function _og_default_members_save($group_id, $group_type, array $role_ids) {
  $values = array();

  // Delete all records from the group.
  db_delete('og_default_members')
    ->condition('gid', $group_id)
    ->execute();

  // Check selected roles.
  foreach ($role_ids as $rid) {
    if ($rid) {
      $values[] = array(
        'rid' => $rid,
        'gid' => $group_id,
        'group_type' => $group_type,
      );
    }
  }

  // If role selected insert them to the database.
  if (!empty($values)) {
    $query = db_insert('og_default_members')
      ->fields(array('rid', 'gid', 'group_type'));
    foreach ($values as $record) {
      $query->values($record);
    }
    $query->execute();
  }
}

/**
 * Remove default group roles.
 *
 * @param array $roles
 */
function _og_default_members_remove_default_group_roles(array $roles) {
  if (empty($roles)) {
    return;
  }

  db_delete('og_default_members')
    ->condition('rid', $roles, 'IN')
    ->execute();
}

/**
 * Import group members according to the group configurations.
 *
 * @param $group_id
 *  The organic group ID.
 * @param $group_type
 *  The type of the group.
 */
function _og_default_members_update_group_members($group_id, $group_type) {
  // Load default member roles.
  $default_roles = _og_default_members_get_roles_by_group($group_id);

  if (!empty($default_roles)) {
    $batch = array(
      'title' => t('Updating group members'),
      'init_message' => t('Updating group members is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'finished' => t('_og_default_members_update_group_members_process_finished'),
      'operations' => array(),
    );

    $query = db_select('users_roles', 'ur')
      ->distinct()
      ->fields('ur', array('uid'))
      ->condition('rid', $default_roles, 'IN')
      ->orderBy('ur.uid');

    $users = $query->execute()->fetchCol();

    foreach ($users as $user) {
      $batch['operations'][] = array(
        '_og_default_members_update_group_members_process',
        array(
          $group_id,
          $group_type,
          $user,
        ),
      );
    }

    batch_set($batch);
  }
}

/**
 * Import every user with the given into the group.
 *
 * @param $group_id
 * @param $group_type
 * @param $user
 * @param $context
 */
function _og_default_members_update_group_members_process($group_id, $group_type, $user, &$context) {
  $account = entity_load_single('user', $user);
  if ($account) {
    // Create the membership.
    $group = entity_load_single($group_type, $group_id);
    _og_default_members_associate_user_with_group($group, $group_type, $account);
    // Mark the process as finished.
    $context['finished'] = 1;
  }
}

/**
 * Initialize default group memberships.
 */
function _og_default_members_initialize_memberships() {
  $batch = array(
    'title' => t('Initialize group memberships'),
    'init_message' => t('Initialization is starting'),
    'progress_message' => t('Processed @current out of @total.'),
    'operations' => array(),
  );

  $default_group_members = variable_get('og_default_members_default_users', array());

  $query = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('status', 1)
    ->orderBy('u.uid');

  $users = $query->execute()->fetchCol();
  foreach ($users as $user) {
    $batch['operations'][] = array(
      '_og_default_members_initialize_memberships_process',
      array(
        $user,
        $default_group_members,
      ),
    );
  }


  batch_set($batch);
}

/**
 * Initialize group memberships.
 *
 * @param $user
 * @param $default_group_members
 * @param $context
 */
function _og_default_members_initialize_memberships_process($user, $default_group_members, &$context) {
  $account = entity_load_single('user', $user);
  if (!empty($account)) {
    // Check if the user was marked as a default group member.
    if (!empty($default_group_members) && in_array($account->uid, $default_group_members)) {
      // Add into every group as a member.
      _og_default_members_register_default_user_to_all_groups($account);
      // Since the user has became group member in every group the loop should
      // continue with the next iteration.
    }
    else {
      $role_ids = array_keys($account->roles);
      $values = _og_default_members_get_groups_by_role($role_ids);
      foreach ($values as $value) {
        $group = entity_load_single($value->group_type, $value->gid);
        _og_default_members_associate_user_with_group($group, $value->group_type, $account);
      }
    }

    $context['finished'] = 1;
  }
}

/**
 * Add a user to all group as a group member.
 *
 * @param $account
 */
function _og_default_members_register_default_user_to_all_groups($account) {
  // Load all group entities.
  $group_entities = og_get_all_group_entity();

  foreach ($group_entities as $entity_type => $label) {
    // Load all groups from the given entity type.
    $group_ids = og_get_all_group($entity_type);
    $groups = entity_load($entity_type, $group_ids);
    foreach ($groups as $group) {
      // Create the membership.
      _og_default_members_associate_user_with_group($group, $entity_type, $account);
    }
  }
}

/**
 * Associate a user with a group.
 *
 * @param $group
 * @param $entity_type
 * @param $account
 */
function _og_default_members_associate_user_with_group($group, $entity_type, $account) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $group);
  // Check that the entity is already being a member of the group.
  if (og_is_member($entity_type, $id, 'user', $account)) {
    return;
  }

  // Create the membership.
  og_group($entity_type, $group, array('entity' => $account->uid));
  // Get the uri of the group.
  $uri = entity_uri($entity_type, $group);
  drupal_set_message(t('@username became a group member of the !group group.',
    array('@username' => $account->name, '!group' => l($group->title, $uri['path']))));
}
