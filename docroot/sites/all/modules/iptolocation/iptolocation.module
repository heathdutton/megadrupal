<?php
/**
 * @file
 * Ip to location manager module.
 */


/**
 * Implements hook_help().
 */
function iptolocation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#iptolocation':
      return '<p>' . t("Ip to Location identify visitor's geographical location (longitude/latitude), country, region and city based on the IP address of the user. These information will be stored at session variable (&#36;_SESSION) with array key 'iptolocation'. Source of IP to Location module is the use") . ' ' . l(t("easyjquery.com"), "http://www.easyjquery.com/") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function iptolocation_permission() {
  return array(
    'administer iptolocation' => array(
      'title' => t('Administer Ip to Location'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function iptolocation_init() {

  $connect_status = iptolocation_checkConnection();
  if (!$connect_status) {
    drupal_set_message(t('Please check inernet connection.'), 'error');
  }
  else {
    $ip_int_val = ip2long(variable_get('iptolocation_test_ip_address', ip_address()));
    $ip_int_test_val = ip2long(ip_address());
    if ($ip_int_test_val == $ip_int_val) {
      $ip = ip_address();
    }
    else {
      $ip = variable_get('iptolocation_test_ip_address', ip_address());
    }
    if (empty($ip)) {
      $ip = ip_address();
    }

    $check_cache = variable_get('iptolocation_cache', FALSE);

    if ($check_cache) {
      $file = $_SERVER['DOCUMENT_ROOT'] . base_path() . variable_get('file_public_path', conf_path() . '/files/') . variable_get('iptolocation_cache_folder', 'iptolocation_cache') . "/" . $ip;
      if (!file_exists($file)) {
        // Request.
        $json = file_get_contents("http://api.codehelper.io/ips/?php&ip=".$ip);
        $json = iptolocation_get_location_json($json);
        $f = fopen($file, "w+");
        fwrite($f, $json);
        fclose($f);
      }
      else {
        $json = file_get_contents($file);
      }
    }
    else {
      $json = file_get_contents("http://api.easyjquery.com/ips/?ip=" . $ip . "&full=true");
      $json = iptolocation_get_location_json($json);
    }
    $json = json_decode($json, TRUE);
    iptolocation_assigned_session($json);
  }
}

/**
 * Assigned location into session iptoloaction for use client machine.
 */
function iptolocation_assigned_session($ses_variable) {
  // Unset session values.
  unset($_SESSION['iptolocation']);
  $iptolocation = array();
  foreach ($ses_variable as $key => $values) {
    $keys_loc = $key;
    $_SESSION['iptolocation'][$keys_loc] = $values;
  }
}


/**
 * Implements hook_menu().
 *
 * Called when Drupal is building menus.  Cache parameter lets module know
 * if Drupal intends to cache menu or not - different results may be
 * returned for either case.
 */
function iptolocation_menu() {
  $items = array();
  $items['admin/config/people/iptolocation'] = array(
    'title' => 'Administer IP to Location',
    'description' => 'Configure the IP to Location settings',
    'access arguments' => array('administer iptolocation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iptolocation_settings'),
  );

  return $items;
}

/**
 * Admin interface callbacks/handlers to configure IP to Location.
 */
function iptolocation_settings($form, &$form_state) {

  // Define submit handler function.
  $form['#validate'][] = 'iptolocation_admin_settings_validate';
  $form['#submit'][] = 'iptolocation_admin_settings_submit';
  // Container for preference forms.
  $form['iptolocation_preferences'] = array(
    '#type' => 'fieldset',
    '#title' => t('IP to Location settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['iptolocation_preferences']['location'] = array(
    '#type' => 'item',
    '#title' => t('Location attributes ($_SESSION["iptolocation"])'),
    '#markup' => iptolocation_show_session_location(),
  );

  $form['iptolocation_preferences']['iptolocation_test_ip_address'] = array(
    '#type' => 'textfield',
    '#title' => t('IP address to use for testing'),
    '#default_value' => variable_get('iptolocation_test_ip_address', ip_address()),
  );
  // Form to turn on debugging.
  $form['iptolocation_preferences']['iptolocation_cache'] = array(
    '#type' => 'checkbox',
    '#title' => t('Admin Cache'),
    '#default_value' => variable_get('iptolocation_cache', FALSE),
    '#description' => t('Enables administrator to cache an IP Address.'),
  );

  $form['iptolocation_preferences']['iptolocation_cache_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('IP address cache path'),
    '#default_value' => variable_get('iptolocation_cache_folder', 'iptolocation_cache'),
    '#description' => t('A local file system path where location will be stored. This directory must exist and be writable by Drupal. Default file name is iptolocation_cache.'),
  );

  return system_settings_form($form);
}

/**
 * Implementaion of admin submit validate.
 */
function iptolocation_admin_settings_validate($form, &$form_state) {
  if (empty($form_state['values']['iptolocation_cache_folder'])) {
    form_set_error('iptolocation_cache_folder', t('Please provide chech folder or leave it default.'));
  }

  if (!empty($form_state['values']['iptolocation_test_ip_address'])) {
    if (filter_var($form_state['values']['iptolocation_test_ip_address'], FILTER_VALIDATE_IP)) {
      // it's valid.
    }
    else {
      form_set_error('iptolocation_test_ip_address', t('Please enter valid ip address.'));
    }
  }
}

/**
 * Implementaion of admin submit.
 */
function iptolocation_admin_settings_submit($form, &$form_state) {
  if (!empty($form_state['values']['iptolocation_test_ip_address'])) {
    variable_set('iptolocation_test_ip_address', ip_address());
  }
  $dir_path = $_SERVER['DOCUMENT_ROOT'] . base_path() . variable_get('file_public_path', conf_path() . '/files/') . $form_state['values']['iptolocation_cache_folder'];

  // Check directory exist and writebale.
  if (is_dir($dir_path)) {
    chmod($dir_path, 0777);
  }
  else {
    mkdir($dir_path);
    chmod($dir_path, 0777);
  }
}

/**
 * Return json file of location.
 */
function iptolocation_get_location_json($string_json) {
  // Return json array.
  $matches = array();
  preg_match_all('/\{(.*?)\}/', $string_json, $matches);
  return $matches[0][0];
}

/**
 * Used for assigned location.
 */
function iptolocation_show_session_location() {
  $location = "";
  if (count(@$_SESSION['iptolocation'])) {
    foreach ($_SESSION['iptolocation'] as $key => $values) {
      $location .= $key . " => " . $values . "</br>";
    }
  }
  return $location;
}

/**
 * Function to check if the local machine has internet connection.
 */
function iptolocation_checkConnection() {
  // Initiates a socket connection to www.itechroom.com at port 80.
  $conn = @fsockopen("www.itechroom.com", 80, $errno, $errstr, 30);
  if ($conn) {
    $status = TRUE;
    fclose($conn);
  }
  else {
    $status = FALSE;
  }
  return $status;
}
