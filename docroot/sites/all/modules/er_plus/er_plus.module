<?php
/**
 * @file er_plus.module
 * Entity Reference Plus module file
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function er_plus_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function er_plus_field_widget_info() {
  $widgets['er_plus_autocomplete'] = array(
    'label' => t('ER Plus Autocomplete'),
    'description' => t('An autocomplete text field.'),
    'field types' => array('entityreference'),
    'settings' => array(
      'match_operator' => 'CONTAINS',
      'size' => 60,
      // We don't have a default here, because it's not the same between
      // the two widgets, and the Field API doesn't update default
      // settings when the widget changes.
      'path' => '',
    ),
  );

  return $widgets;
}


/**
 * Implements hook_field_widget_settings_form().
 */
function er_plus_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'] + field_info_widget_settings($widget['type']);

  $form = array();

  if ($widget['type'] == 'er_plus_autocomplete') {
    $form['match_operator'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['match_operator'],
      '#options' => array(
        'STARTS_WITH' => t('Starts with'),
        'CONTAINS' => t('Contains'),
      ),
      '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
    );
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }

  return $form;
}


/**
 * Implements hook_field_widget_form().
 */
function er_plus_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Autocomplete code from EntityReference autocomplete widget.
  $entity_type = $instance['entity_type'];
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

  if ($instance['widget']['type'] == 'er_plus_autocomplete') {

    if ($instance['widget']['type'] == 'er_plus_autocomplete') {
      // We let the Field API handles multiple values for us, only take
      // care of the one matching our delta.
      if (isset($items[$delta])) {
        $items = array($items[$delta]);
      }
      else {
        $items = array();
      }
    }

    $entity_ids = array();
    $entity_labels = array();

    // Build an array of entities ID.
    foreach ($items as $item) {
      $entity_ids[] = $item['target_id'];
    }

    // Load those entities and loop through them to extract their labels.
    $entities = entity_load($field['settings']['target_type'], $entity_ids);

    foreach ($entities as $entity_id => $entity_item) {
      $label = $handler->getLabel($entity_item);
      $key = "$label ($entity_id)";
      // Labels containing commas or quotes must be wrapped in quotes.
      if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
        $key = '"' . str_replace('"', '""', $key) . '"';
      }
      $entity_labels[] = $key;
    }

    // Prepare the autocomplete path.
    if (!empty($instance['widget']['settings']['path'])) {
      $autocomplete_path = $instance['widget']['settings']['path'];
    }
    else {
      $autocomplete_path = $instance['widget']['type'] == 'er_plus_autocomplete' ? 'entityreference/autocomplete/single' : 'entityreference/autocomplete/tags';
    }

    $autocomplete_path .= '/' . $field['field_name'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/';
    // Use <NULL> as a placeholder in the URL when we don't have an entity.
    // Most webservers collapse two consecutive slashes.
    $id = 'NULL';
    if ($entity) {
      list($eid) = entity_extract_ids($entity_type, $entity);
      if ($eid) {
        $id = $eid;
      }
    }
    $autocomplete_path .= $id;

    $element['auto'] = array(
      '#type' => 'textfield',
      '#maxlength' => 1024,
      '#entity_type' => $entity_type,
      '#bundle' => $instance['bundle'],
      '#field_name' => $field['field_name'],
      '#default_value' => implode(', ', $entity_labels),
      '#autocomplete_path' => $autocomplete_path,
      '#size' => $instance['widget']['settings']['size'],
      '#element_validate' => array('_entityreference_autocomplete_validate'),
      '#attributes' => array(
        'view_mode_id' => $delta,
        'class' => array(
          'er_plus',
        ),
      ),
    );

    $target_type = $field['settings']['target_type'];
    $entity_info = entity_get_info($target_type);
    $view_modes = array('full' => 'Default');
    foreach ($entity_info['view modes'] as $view_key => $view_mode) {
      $view_modes[$view_key] = $view_mode['label'];
    }

    $element['view_mode'] = array(
      '#type' => 'select',
      '#title' => 'View Mode',
      '#options' => $view_modes,
      '#default_value' => isset($item) ? $item['view_mode'] : 0,
      '#id' => 'view-mode-' . $delta,
    );

    $element['header'] = array(
      '#type' => 'textfield',
      '#title' => 'Header',
      '#maxlength' => 255,
      '#default_value' => isset($item) ? $item['header'] : '',
      '#element_validate' => array('er_plus_field_widget_form_validate'),
    );

    return array(
      'target_id' => $element['auto'],
      'view_mode' => $element['view_mode'],
      'header' => $element['header'],
    );
  }
}

/**
 * Header field validation
 */
function er_plus_field_widget_form_validate($element, &$form_state) {
  $error_field = implode('][', $element['#parents']);
  $header_len =  strlen($element['#value']);
  $max = $element['#maxlength'];
  if ($header_len > $max) {
    form_set_error($error_field, t('Header should be less than @len characters.', array('@len' => $max)));
    return;
  }
}


/**
 * Implements hook_field_formatter_info().
 */
function er_plus_field_formatter_info() {
  return array(
    'er_plus_formatter' => array(
      'label' => t('ER Plus'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function er_plus_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $ref_entity_type = $field['settings']['target_type'];
  switch ($display['type']) {
    case 'er_plus_formatter':
      foreach ($items as $delta => $item) {
        $ref_entity = entity_load($ref_entity_type, array($item['target_id']));
        if ($ref_entity) {
          $ref_entity_view = entity_view(
            $ref_entity_type,
            array($ref_entity[$item['target_id']]),
            $item['view_mode']
          );
          if ($item['header'] != '') {
            $ref_entity_view['header'] = array(
              '#type' => 'markup',
              '#markup' => $item['header'],
              '#prefix' => '<h3>',
              '#suffix' => '</h3>',
              '#weight' => -100,
            );
          }
          $output = drupal_render($ref_entity_view);
          $element[$delta] = array('#markup' => $output);
        }

      }
      break;
  }

  return $element;
}

/**
 * Implements hook_references_dialog_widgets().
 */
function er_plus_references_dialog_widgets() {
  return array(
    'er_plus_autocomplete' => array(
      'element_type' => 'textfield',
      'dialog_form' => 'entityreference_autocomplete_dialog_form',
      'views_query' => 'references_dialog_entityreference_views_query',
      'type_callback' => 'references_dialog_entityreference_get_type',
      'format' => '$label ($entity_id)',
      'operations' => array(
        'edit' => array(
          'function' => 'references_dialog_entityreference_edit_link',
          'title' => t('Edit dialog'),
        ),
        'add' => array(
          'function' => 'references_dialog_entityreference_add_link',
          'title' => t('Add dialog'),
        ),
        'search' => array(
          'function' => 'references_dialog_get_field_search_links',
          'title' => t('Search Dialog'),
        ),
      ),
    ),
  );
}
