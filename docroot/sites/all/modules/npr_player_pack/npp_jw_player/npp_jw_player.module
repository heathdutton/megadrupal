<?php
/**
 * @file
 * Adds a formatter for the npr_audio field.
 */

/**
 * Implements hook_field_formatter_info().
 */
function npp_jw_player_field_formatter_info() {
  return array(
    'npp_jwplayer_formatter' => array(
      'label' => t('NPP JW Player'),
      'field types' => array('npr_audio'),
      'settings' => array(
        'jwplayer_height' => '24',
        'jwplayer_width' => '290',
        'jwplayer_location' => '/sites/all/libraries/player/jwplayer/jwplayer.js',
        'jwplayer_swf_location' => '/sites/all/libraries/player/jwplayer/jwplayer.swf',
        'jwplayer_load_message' => 'Loading the player...',
        'jwplayer_id_prefix' => 'npp_jwplayer',
        'jwplayer_image' => '',
        'jwplayer_key' => '',
        'jwplayer_skin' => '',
        'jwplayer_primary_playback' => 'html5',
        'jwplayer_fallback' => TRUE,
        'jwplayer_autostart' => FALSE,
        'jwplayer_automute' => FALSE,
        'jwplayer_repeat' => FALSE,
        'jwplayer_download_link' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function npp_jw_player_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['jwplayer_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Height'),
    '#description' => t('Set the height of the player (pixels).'),
    '#default_value' => $settings['jwplayer_height'],
  );
  $element['jwplayer_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Width'),
    '#description' => t('Set the width of the player (pixels).'),
    '#default_value' => $settings['jwplayer_width'],
  );
  $element['jwplayer_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Player JS Location'),
    '#description' => t('Set the absolute, relative, or external location of the JW Player source. This should be a file, not a directory.'),
    '#default_value' => $settings['jwplayer_location'],
  );
  $element['jwplayer_swf_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Player SWF Location'),
    '#description' => t('Set the location of the .SWF JW Player. This should be a file, not a directory.'),
    '#default_value' => $settings['jwplayer_swf_location'],
  );
  $element['jwplayer_load_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Load Message'),
    '#description' => t('Set the message to be displayed when the player is loading.'),
    '#default_value' => $settings['jwplayer_load_message'],
  );
  $element['jwplayer_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Image'),
    '#description' => t('Set the location of the image to display during audio playback. Leave blank to disable.'),
    '#default_value' => $settings['jwplayer_image'],
  );
  $element['jwplayer_id_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Element ID Prefix'),
    '#description' => t('JW Player requires a unique element ID for every instance on a page. This setting sets the prefix of that ID.
                         A hyphen followed by a four-digit random string will be appended to the prefix.'),
    '#default_value' => $settings['jwplayer_id_prefix'],
  );
  $element['jwplayer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('JW Player Key'),
    '#description' => t('If you have a Pro or Ads key and are locally hosting the player, put your key here.
                         If you don\'t have a key or are using the hosted version of JW Player where the key
                         is included in the Javascript, leave this blank.'),
    '#default_value' => $settings['jwplayer_key'],
  );
  $element['jwplayer_skin'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Skin'),
    '#description' => t('The name or location of the XML file of the JW Player skin you want to use. Leave blank to disable.'),
    '#default_value' => $settings['jwplayer_skin'],
  );
  $element['jwplayer_primary_playback'] = array(
    '#type' => 'radios',
    '#title' => t('Primary Playback Method'),
    '#description' => t('Choose the primary playback method.'),
    '#options' => array(
      'html5' => 'HTML5',
      'flash' => 'Flash',
    ),
    '#default_value' => $settings['jwplayer_primary_playback'],
  );
  $element['jwplayer_fallback'] = array(
    '#type' => 'checkbox',
    '#title' => t('Player Fallback'),
    '#description' => t('Set if the player should provide a download link for the content if Flash and HTML5 are not supported.'),
    '#default_value' => $settings['jwplayer_fallback'],
  );
  $element['jwplayer_autostart'] = array(
    '#type' => 'checkbox',
    '#title' => t('Player Autostart'),
    '#description' => t('Set if the player should autostart when the page loads.'),
    '#default_value' => $settings['jwplayer_autostart'],
  );
  $element['jwplayer_automute'] = array(
    '#type' => 'checkbox',
    '#title' => t('Player Automute'),
    '#description' => t('Set if the player should automute when the page loads.'),
    '#default_value' => $settings['jwplayer_automute'],
  );
  $element['jwplayer_repeat'] = array(
    '#type' => 'checkbox',
    '#title' => t('Player Repeat'),
    '#description' => t('Set if the player should repeat playback when a file finishes.'),
    '#default_value' => $settings['jwplayer_repeat'],
  );
  $element['jwplayer_download_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Audio Download Link'),
    '#description' => t('Display a download link for the audio.'),
    '#default_value' => $settings['jwplayer_download_link'],
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function npp_jw_player_field_formatter_settings_summary($field, $instance, $view_mode) {
  return t('Configure some player settings like load message and player locations.');
}

/**
 * Implements hook_theme().
 */
function npp_jw_player_theme($existing, $type, $theme, $path) {
  $functions = array();
  $functions['jw_player'] = array(
    'variables' => array(
      'prefix' => NULL,
      'swf_location' => NULL,
      'mp3' => NULL,
      'height' => NULL,
      'width' => NULL,
      'image' => NULL,
      'skin' => NULL,
      'primary' => NULL,
      'autostart' => NULL,
      'mute' => NULL,
      'repeat' => NULL,
      'fallback' => NULL,
      'rstring' => NULL,
      'load_message' => NULL,
      'downloadlink' => NULL,
    ),
  );
  return $functions;
}

/**
 * Registered theme function that outputs the player's HTML.
 */
function theme_jw_player($args) {
  $load_message = $args['load_message'];
  $prefix = $args['prefix'];
  $rstring = $args['rstring'];
  $swf_location = $args['swf_location'];
  $mp3 = $args['mp3'];
  $height = $args['height'];
  $width = $args['width'];
  $image = $args['image'];
  $skin = $args['skin'];
  $primary = $args['primary'];
  $autostart = $args['autostart'];
  $mute = $args['mute'];
  $repeat = $args['repeat'];
  $fallback = $args['fallback'];

  $html = <<<HTML
    <div id="$prefix-$rstring">$load_message</div>
      <script type="text/javascript">
        jwplayer("$prefix-$rstring").setup({
          flashplayer: "$swf_location",
          file: "$mp3",
          height: $height,
          width: $width,
          controlbar: "bottom",
          image: "$image",
          skin: "$skin",
          primary: "$primary",
          autostart: $autostart,
          mute: $mute,
          repeat: $repeat,
          fallback: $fallback
        });
      </script>
HTML;
  if ($args['downloadlink']) {
    $html .= '<div class="npp_download_link"><a href="' . $mp3 . '">Download this audio</a></div>';
  }

  return $html;
}

/**
 * Implements hook_field_formatter_view().
 */
function npp_jw_player_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Require the mp3 scraper library.
  $path = dirname(__FILE__);
  require_once "$path/../npp_library.php";

  $mp3 = '';
  foreach ($items as $item) {
    if ($item['mp3']) {
      $mp3 = _npp_get_mp3($item['mp3']);
      $mp3 = check_plain($mp3);
    }
  }

  if (!$mp3) {
    return $element;
  }

  $height = check_plain($display['settings']['jwplayer_height']);
  $width = check_plain($display['settings']['jwplayer_width']);
  $location = check_plain($display['settings']['jwplayer_location']);
  $swf_location = check_plain($display['settings']['jwplayer_swf_location']);
  $load_message = check_plain($display['settings']['jwplayer_load_message']);
  $prefix = check_plain($display['settings']['jwplayer_id_prefix']);
  $primary = check_plain($display['settings']['jwplayer_primary_playback']);
  $image = check_plain($display['settings']['jwplayer_image']);
  $skin = check_plain($display['settings']['jwplayer_skin']);
  $repeat = ($display['settings']['jwplayer_repeat']) ? 'true' : 'false';
  $autostart = ($display['settings']['jwplayer_autostart']) ? 'true' : 'false';
  $mute = ($display['settings']['jwplayer_automute']) ? 'true' : 'false';
  $fallback = ($display['settings']['jwplayer_fallback']) ? 'true' : 'false';
  $downloadlink = ($display['settings']['jwplayer_download_link']) ? TRUE : FALSE;

  // Check for a JW Player key.
  $js = array();
  if ($display['settings']['jwplayer_key']) {
    $key = 'jwplayer.key="' . $display['settings']['jwplayer_key'] . '";';
    $js[$key] = array('type' => 'inline', 'scope' => 'header');
  }
  // Insert the JW Player source.
  $js[$location] = array('type' => 'file');

  // Generate a random string.
  $rstring = user_password(4);
  $element[0]['#markup'] = theme(
    'jw_player', array(
      'prefix' => $prefix,
      'swf_location' => $swf_location,
      'mp3' => $mp3,
      'height' => $height,
      'width' => $width,
      'image' => $image,
      'skin' => $skin,
      'primary' => $primary,
      'autostart' => $autostart,
      'mute' => $mute,
      'repeat' => $repeat,
      'fallback' => $fallback,
      'rstring' => $rstring,
      'load_message' => $load_message,
      'downloadlink' => $downloadlink,
    )
  );
  $element['#attached']['js'] = $js;

  return $element;
}
