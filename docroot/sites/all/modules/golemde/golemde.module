<?php

/**
 * @file
 * Module to get data from golem.de using their API and show it in blocks.
 */

/**
 * Implements hook_menu().
 */
function golemde_menu() {
  $items = array();
  $items['admin/config/development/golemde'] = array(
    'title' => 'Golem.de API',
    'access arguments' => array('administer golemde'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('golemde_settings_form'),
    'file' => 'golemde.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function golemde_permission() {
  return array(
    'administer golemde' => array(
      'title' => t('Administer Golem.de API'),
      'description' => t('Allow administration of Golem.de API.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function golemde_block_info() {
  $blocks['golem_articles'] = array(
    'info' => t('Articles from Golem.de'),
  );
  $blocks['golem_videos'] = array(
    'info' => t('Videos from Golem.de'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function golemde_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'golem_articles':
      $form['golemde']['set'] = array(
        '#type' => 'select',
        '#title' => t('Set of articles'),
        '#default_value' => variable_get('golemde_block_articles_set', 'latest'),
        '#options' => array('latest' => 'Latest articles', 'top' => 'Top articles'),
      );
      $form['golemde']['items'] = array(
        '#type' => 'select',
        '#title' => t('Number of items'),
        '#default_value' => variable_get('golemde_block_articles_items', 3),
        '#options' => drupal_map_assoc(range(1, 10)),
      );
      $form['golemde']['theme'] = array(
        '#type' => 'select',
        '#title' => t('Category'),
        '#description' => t('Get articles only from the specified category, only for latest articles.'),
        '#default_value' => variable_get('golemde_block_articles_category', ''),
        '#options' => _golemde_getcategories(),
      );
      $form['golemde']['text'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show articles text.'),
        '#default_value' => variable_get('golemde_block_articles_text', 0),
      );
      $form['golemde']['images'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show images from articles if available.'),
        '#default_value' => variable_get('golemde_block_articles_images', 0),
      );
      break;
    case 'golem_videos':
      $form['golemde']['set'] = array(
        '#type' => 'select',
        '#title' => t('Set of videos'),
        '#default_value' => variable_get('golemde_block_videos_set', 'latest'),
        '#options' => array('latest' => 'Latest videos', 'top' => 'Top videos'),
      );
      $form['golemde']['items'] = array(
        '#type' => 'select',
        '#title' => t('Number of items'),
        '#default_value' => variable_get('golemde_block_videos_items', 3),
        '#options' => drupal_map_assoc(range(1, 10)),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function golemde_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'golem_articles':
      variable_set('golemde_block_articles_set', $edit['set']);
      variable_set('golemde_block_articles_items', $edit['items']);
      variable_set('golemde_block_articles_theme', $edit['theme']);
      variable_set('golemde_block_articles_text', $edit['text']);
      variable_set('golemde_block_articles_images', $edit['images']);
      break;
    case 'golem_videos':
      variable_set('golemde_block_videos_set', $edit['set']);
      variable_set('golemde_block_videos_items', $edit['items']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function golemde_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'golem_articles':
      $block = array(
        'subject' => t('Articles from Golem.de'),
        'content' => golemde_display_block_articles());
      break;
    case 'golem_videos':
      $block = array(
        'subject' => t('Videos from Golem.de'),
        'content' => golemde_display_block_videos());
      break;
  }
  return $block;
}

/**
 * Display articles in block golem_articles.
 */
function golemde_display_block_articles() {
  if (variable_get('golemde_block_articles_category', 0)) {
    $articles_object = _golemde_getdata('articles_category');
  }
  else {
    $articles_object = _golemde_getdata('articles');
  }
  foreach ($articles_object->data as $article) {
    $output = '';
    if (variable_get('golemde_block_articles_images', 0) && (!empty($article->leadimg->url))) {
      $output = '<div class="leadimg"><img src="' . $article->leadimg->url . '" alt="' . check_plain($article->headline) . '" /></div>';
    }
    $output .= '<div class="headline">' . l($article->headline, $article->url, array('attributes' => array('rel' => 'nofollow'))) . '</div>';
    if (variable_get('golemde_block_articles_text', 0)) {
      $output .= $article->abstracttext;
    }
    $articles[] = $output;
  }
  return theme('item_list', array('items' => $articles));
}

/**
 * Display videos in block golem_videos.
 */
function golemde_display_block_videos() {
  $videos_object = _golemde_getdata('videos');

  foreach ($videos_object->data as $video) {
    $videos[] = l($video->title, $video->url, array('attributes' => array('rel' => 'nofollow')));
  }
  return theme('item_list', array('items' => $videos));
}

/**
 * Helper function to get the data.
 */
function _golemde_getdata($type) {
  $path = '';
  switch ($type) {
    case 'articles':
      $path = 'article/' . variable_get('golemde_block_articles_set', 'latest') . '/' . variable_get('golemde_block_articles_items', 3);
      break;
    case 'articles_category':
      $path = 'theme/article/' . variable_get('golemde_block_articles_category', 0) . '/' . variable_get('golemde_block_articles_items', 3);
      break;
    case 'videos':
      $path = 'video/' . variable_get('golemde_block_videos_set', 'latest') . '/' . variable_get('golemde_block_videos_items', 3);
      break;
    case 'categories':
      $path = 'theme/list';
      break;
  }
  $path = url('http://api.golem.de/api/' . $path . '/', array('query' => array('key' => variable_get('golemde_developer_key', ''), 'format' => 'json'), 'external' => TRUE));
  $request = drupal_http_request($path);
  $data = json_decode($request->data);

  if ($data->errorCode) {
    watchdog('error', check_plain($data->errorMessage));
    return array();
  }

  return $data;
}

/**
 * Helper function to get the categories.
 */
function _golemde_getcategories() {
  $categories_object = _golemde_getdata('categories');
  $categories[0] = t('All');
  foreach ($categories_object->data as $category) {
    $categories[check_plain($category->shortname)] = check_plain($category->name);
  }
  return $categories;
}
