<?php
/**
 * @file
 * Define test cases for the Web Links module
 * Drupal 7 Version
 */
class WeblinksTestCase extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      // 'name' should start with what is being tested (menu item) followed by what
      // about it is being tested (creation/deletion).
      'name' => t('Weblinks tests'),
      // 'description' should be one or more complete sentences
      // explaining the test.
      'description' => t('Test Weblinks module.'),
      // 'group' should be a logical grouping of test cases, like a category.
      // Suggestion: Use the name of the module to be tested.
      'group' => t('Weblinks'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Installs the Weblinks module and Weblinks Checker sub-module.
    parent::setUp('weblinks', 'weblinks_checker', 'node', 'menu');
    // The taxonomy module seems to be active by default. However, it can be
    // turned off using module_disable(array('taxonomy')) for extra testing.

    // Make sure "Powered by" and "Navigation" blocks are turned off for performance.
    $num_updated = db_update('block')
      ->fields(array('status' => 0))
      ->condition('status', 1)
      ->where('module=:system and (delta=:poweredby or delta=:navigation)', array(
      ':system' => 'system', ':poweredby' => 'powered-by', ':navigation' => 'navigation'))->execute();

    // Turn off "submitted by."
    $theme_settings = variable_get('theme_settings', array());
    $theme_settings['toggle_node_info_weblinks'] = 0;
    variable_set('theme_settings', $theme_settings);
    // Clean urls are not enabled on Drupal Testbots, so replicate this for
    // local testing.
    variable_set('clean_url', 0);
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    // Perform any clean-up tasks.

    // The last thing a tearDown() method should always do is call its parent tearDown() method.
    parent::tearDown();
  }

  /**
   * One-sentence description of test.
   */
  function testWeblinksCreate() {
    // @TODO: add a test for "user's links"
    // Prepare a user to do the stuff.
    $user = $this->drupalCreateUser(array('access content', 'access weblinks', 'create weblinks content', 'edit own weblinks content'));
    $this->drupalLogin($user);

    // Show the weblink variables
    $result = db_select('variable', 'v')->fields('v')->condition('name', '%weblinks%', 'like')->execute();
    $vars = array();
    while ($row = $result->fetchObject()) {
      $vars[$row->name] = $row->value;
    }

    if (module_exists('taxonomy')) {
      // Before we visit any page, check that the default weblinks vocabulary
      // does not exist.
      $weblinks_vocabulary = taxonomy_vocabulary_load(variable_get('weblinks_nav_vocabulary', 0));
      $this->assertFalse($weblinks_vocabulary, 'The default vocabulary does not exist initially.');

      // Visit the weblinks page and check that the vocabulary has been created.
      $content = $this->drupalGet('weblinks');
      $weblinks_vocabulary = taxonomy_vocabulary_load(variable_get('weblinks_nav_vocabulary', 0));
      $this->assertTrue($weblinks_vocabulary, 'The default vocabulary has been created.');

      // Check field info.
      $field_info = field_info_field('taxonomy_weblinks');
      $this->assertTrue($field_info, 'Field Info for taxonomy_weblinks returns OK.');
    }

    $settings = array(
      'type' => 'weblinks',
      'title' => 'A sample link',
      'url' => 'http://www.example.com',
      'weight' => 0,
      'promote' => 1,
      'status' => 1,
      );
    $link1 = $this->drupalCreateNode($settings);

    // Go to the node in full-page view and check that it is shown.
    $this->drupalGet('node/' . $link1->nid);
    $this->assertText($link1->title, t('Link 1 title is viewable in full-page mode.'), 'Basic');
    $this->assertText($link1->body['und'][0]['value'], t('Link 1 body text is viewable in full-page mode.'), 'Basic');

    $settings = array(
      'type' => 'weblinks',
      'title' => 'Drupal Community',
      'url' => 'http://drupal.org',
      'weight' => 0,
      'promote' => 0,
      'status' => 0,
      );
    $link2 = $this->drupalCreateNode($settings);
    //debug($link2, 'unpromoted and unpublished link2')

    // Check the database tables.
    $count_nodes = db_query("SELECT COUNT(nid) FROM {node} WHERE type='weblinks'")->fetchField();
    $this->assertEqual($count_nodes, 2, t('Correct number of weblinks in the {node} db table.'), 'Basic');
    $count_links = db_query("SELECT COUNT(nid) FROM {weblinks}")->fetchField();
    $this->assertEqual($count_links, 2, t('Correct number of rows in the {weblinks} db table.'), 'Basic');
    $count_unpub = db_query("SELECT COUNT(nid) FROM {node} WHERE type='weblinks' AND status=0")->fetchField();
    $this->assertEqual($count_unpub, 1, t('Correct number of unpublished links in the {node} db table.'), 'Basic');

    // Check that the url is sucessfully stored in the database
    $check = db_query("SELECT url FROM {weblinks} WHERE nid = :nid", array(':nid' => $link1->nid))->fetchField();
    $this->assertEqual($link1->url, $check, t('URL for link1 is successfully stored.'), 'Basic');

    // Is the promoted link on the home page?
    $content = $this->drupalGet('node');
    $this->assertText($link1->title, t('Link is promoted to the home page.'), 'Basic');

    // Go to the weblinks main page.
    $content = $this->drupalGet('weblinks');
    $this->assertText($link1->title, t('Node title appears on the list.'), 'Basic');
    $this->assertNoText($link2->title, t('Unpublished node does not appear on the list.'), 'Basic');
    $this->assertNoText(t('There are no weblinks to display yet.'), t('No empty list message.'), 'Basic');
    $this->assertNoText(t('Weblinks settings'), t('Settings link not displayed.'), 'Basic');
    $this->assertText(t('Add a new link'), t('"Add new" link displayed.'), 'Basic');
    $this->assertText(t('Unclassified'), t('Unclassified group displayed.'), 'Basic');
    $this->assertText($user->name, t('User name displayed.'), 'Basic');
    $link1_shouldbe = '<a href="' . $link1->url . '" target="_blank" title="' . $link1->title . '">' . $link1->url . '</a>';
    $this->assertRaw($link1_shouldbe, t('URL displayed in URL mode.'), 'Basic');

    // Check that the fieldset for the unclassified group (term 0) exists, and
    // has the default attributes of collapsible but not collapsed.
    $fieldset = $this->xpath('//fieldset[@id="weblinks-fieldset-0"]');
    $this->assertTrue(!empty($fieldset), 'Fieldset for Unclassified exists.', 'Basic');
    if (isset($fieldset[0])) {
      $fieldset_attributes = (array)$fieldset[0]->attributes();
      $fieldset_class = $fieldset_attributes['@attributes']['class'];
      $this->assertTrue(stristr($fieldset_class, 'collapsible'), 'The fieldset is collapsible.', 'Basic');
      $this->assertFalse(stristr($fieldset_class, 'collapsed'), 'The fieldset is not collapsed.', 'Basic');
    }
    else {
      $this->error('The Unclassified fieldset does not exist.', 'Basic');
    }

    // Check that a normal user can't admin.
    $this->drupalGet('admin/config/content/weblinks');
    $this->assertResponse(403, t('Access is denied on the administration page.'), 'Basic');

    // Prepare an admin user.
    $admin = $this->drupalCreateUser(array('access content', 'access weblinks', 'administer weblinks'));
    $this->drupalLogin($admin);

    // Set the default to collapsed fieldsets and switch mode to 'redirect'
    $settings = array(
      'weblinks_collapsed' => '1',
      'weblinks_redirect' => '1',
    );
    $this->drupalPost('admin/config/content/weblinks', $settings, t('Save configuration'));

    $content = $this->drupalGet('weblinks');
    $link1_shouldbe = '<a href="' . url('weblinks/goto/' . $link1->nid) . '" target="_blank" title="' . $link1->title . '">' . $link1->url . '</a>';
    $this->assertRaw($link1_shouldbe, t('URL displayed in Redirect mode.'), 'Basic');

    // Check that the fieldset for Unclassified is collapsible and is collapsed.
    $fieldset = $this->xpath('//fieldset[@id="weblinks-fieldset-0"]');
    if (isset($fieldset[0])) {
      $fieldset_attributes = (array)$fieldset[0]->attributes();
      $fieldset_class = $fieldset_attributes['@attributes']['class'];
      $this->assertTrue(stristr($fieldset_class, 'collapsible'), 'The fieldset is collapsible.', 'Basic');
      $this->assertTrue(stristr($fieldset_class, 'collapsed'), 'The fieldset is collapsed.', 'Basic');
    }

    // Set the default to non-collapsible fieldsets.
    // Show the extra title.
    // Set the linkdesc to 'body' to avoid the 'read more' link.
    $settings = array(
      'weblinks_collapsible' => '0',
      'weblinks_show_title' => '1',
      'weblinks_linkdesc' => 'body',
    );
    $this->drupalPost('admin/config/content/weblinks', $settings, t('Save configuration'));

    $content = $this->drupalGet('weblinks');
    // Check that the fieldset is not collapsible and not collapsed.
    $fieldset = $this->xpath('//fieldset[@id="weblinks-fieldset-0"]');
    if (isset($fieldset[0])) {
      $fieldset_attributes = (array)$fieldset[0]->attributes();
      $fieldset_class = $fieldset_attributes['@attributes']['class'];
      $this->assertFalse(stristr($fieldset_class, 'collapsible'), 'The fieldset is not collapsible.', 'Basic');
      $this->assertFalse(stristr($fieldset_class, 'collapsed'), 'The fieldset is not collapsed.', 'Basic');
    }

    // Check that the secondary node title is displayed. The assertLinkByHref
    // matches links which start with the given text but also matches any links
    // with additional parts or ? query elements. There should be four links
    // which match (two for the title plus edit and delete). The index is
    // zero-based, so to check for four links we use '3'.
    $title_link = url(drupal_get_path_alias('node/' . $link1->nid));
    $this->assertLinkByHref($title_link, 3, 'There are (at least) four links to the node', 'Basic');

    // Make sure the hidden groups and settings tab show up.
    $this->assertText(t('Unclassified'), t('Unclassified group is displayed.'), 'Basic');
    $this->assertText(t('Unpublished'), t('Unpublished group is displayed.'), 'Basic');
    $this->assertText(t('Settings'), t('Settings tab is available.'), 'Basic');
    if (module_exists('taxonomy')) {
      $this->assertText(t('Add a group'), t('Add Group tab is available.'), 'Basic');
    }

    // Check that the group settings page is accessible.
    $content = $this->drupalGet('admin/config/content/weblinks');
    $this->assertResponse(200, t('Access is granted on the administration page.'), 'Settings');
    $this->assertText('Description for unclassified links', t('Group settings includes "Unclassified".'), 'Settings');

    // Checker settings should be turned off.
    $content = $this->drupalGet('admin/config/content/weblinks/checker');
    $this->assertFieldByName('weblinks_checker_enabled', 0, t('Checker disabled.'), 'Settings');
  }

}
