<?php

/**
 * @file
 * Install, update, and uninstall functions for the Web Links module.
 * Drupal 7 Version
 */

/**
 * Implements hook_install().
 */
function weblinks_install() {
  // Done by Drupal core
  // $result = drupal_install_schema('weblinks');
  // @todo: This can be removed
  // The testing of $result['0']['success'] is meaningless now that the value
  // has to be set to 1. This whole code can be removed and just give the
  // message as that is in effect what will always happen anyway.
  $result['0']['success'] = 1;

  if ($result['0']['success']) {
    drupal_set_message(st('Weblinks module installed.'));
  }
  else {
    drupal_set_message(st('Weblinks table creation failed. Please "uninstall" the module and retry.'));
    module_disable('weblinks');
  }
}

/**
 * Implements hook_enable().
 */
function weblinks_enable() {
  // Ensure the weblinks node type is available.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['weblinks'], t('Link Description'));
}

/**
 * Implements hook_schema().
 */
function weblinks_schema() {
  $schema['weblinks'] = array(
    'module' => 'Web Links',
    'description' => 'Extra node information for the weblinks content type.',
    'fields' => array(
    'nid' => array(
      'description' => 'Node identifier',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      ),
    'vid' => array(
      'description' => 'Version identifier',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      ),
    'click_count' => array(
      'description' => 'Click counter',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      ),
    'last_click' => array(
      'description' => 'Date/time of the last click',
      'type' => 'datetime',
      'mysql_type' => 'DATETIME',
      ),
    'last_status' => array(
      'description' => 'Status from the last validity check',
      'type' => 'char',
      'length' => 6,
      'default' => '200',
      ),
    'last_status_info' => array(
      'description' => 'When the status changed (either the date or number of cron runs ago)',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => NULL,
      ),
    'last_checked' => array(
      'description' => 'Date/time of the last validity check',
      'type' => 'datetime',
      'mysql_type' => 'DATETIME',
      ),
    'urlhash' => array(
      'description' => 'The hashed value of the URL',
      'type' => 'char',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
      ),
    'url' => array(
      'description' => 'The actual URL',
      'type' => 'text',
      'not null' => TRUE,
      ),
    'reciprocal' => array(
      'description' => 'A reciprocal URL for matching referers',
      'type' => 'text',
      'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'last_checked' => array('last_checked'),
      'urlhash' => array('urlhash'),
      ),
    'primary key' => array('nid', 'vid'),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function weblinks_uninstall() {
  $had_vocab = variable_get('weblinks_nav_vocabulary', 0);
  if ($had_vocab) {
    if (db_table_exists('taxonomy_vocabulary')) {
      // To delete the vocabulary we need to load the dependent Taxonomy module,
      // in case it has been disabled. Only do this if the table still exists,
      // otherwise taxonomy_vocabulary_delete gives a fatal error.
      drupal_load('module', 'taxonomy');
      taxonomy_vocabulary_delete($had_vocab);
    }
    // Remove any term reference fields.
    field_delete_field('taxonomy_weblinks');
    // Purge field data now to allow taxonomy module to be uninstalled if this
    // is the only field remaining.
    field_purge_batch(10);
  }

  // Remove all weblinks nodes.
  $result = db_query("SELECT nid FROM {node} WHERE type='weblinks'");
  foreach ($result as $obj) {
    node_delete($obj->nid);
  }

  // Remove the node type.
  node_type_delete('weblinks');

  // Get the variables that have a tid at the end.
  // @@@ I'm not crazy about this, but it works.
  $result = db_query("SELECT v.name FROM {variable} v WHERE v.name LIKE ('weblinks_filter_%')"
    . " OR name LIKE ('weblinks_maxdisp_%')"
    . " OR name LIKE ('weblinks_collapse_%')"
    . " OR name LIKE ('weblinks_group_sort_%')"
  );
  foreach ($result as $obj) {
    variable_del($obj->name);
  }
  // Keep variables in alphabetical order for ease of checking.
  variable_del('weblinks_admin_override');
  variable_del('weblinks_body_stub');
  variable_del('weblinks_catdesc');
  variable_del('weblinks_clickthru');
  variable_del('weblinks_collapsed');
  variable_del('weblinks_collapsible');
  variable_del('weblinks_comment_links');
  variable_del('weblinks_empty_text');
  variable_del('weblinks_external');
  variable_del('weblinks_extra_classes');
  variable_del('weblinks_format');
  variable_del('weblinks_linkdesc');
  variable_del('weblinks_linkinfo');
  variable_del('weblinks_linktitle');
  variable_del('weblinks_maxdepth');
  variable_del('weblinks_maxfrontdepth');
  variable_del('weblinks_nav_vocabulary');
  variable_del('weblinks_new_redirect');
  variable_del('weblinks_nofollow');
  variable_del('weblinks_pagedesc');
  variable_del('weblinks_page_sort');
  variable_del('weblinks_popular_list_type');
  variable_del('weblinks_redirect');
  variable_del('weblinks_show_title');
  variable_del('weblinks_show_url');
  variable_del('weblinks_simplelinks');
  variable_del('weblinks_sort');
  variable_del('weblinks_strip');
  variable_del('weblinks_subcatdesc');
  variable_del('weblinks_title_link');
  variable_del('weblinks_trim');
  variable_del('weblinks_trim_block');
  variable_del('weblinks_unclassified_desc');
  variable_del('weblinks_unclassified_title');
  variable_del('weblinks_unpublished_desc');
  variable_del('weblinks_unpublished_title');
  variable_del('weblinks_url_stub');
  variable_del('weblinks_urlnode');
  variable_del('weblinks_user_links');
  variable_del('weblinks_view_as');
  variable_del('weblinks_view_position');
  variable_del('weblinks_visit_text');

  drupal_set_message(st('Weblinks module uninstalled.'));
}

/**
 * Implements hook_update_last_removed().
 */
function weblinks_update_last_removed() {
  return 6116;
}

/**
 * Implements hook_update_dependencies().
 */
function weblinks_update_dependencies() {
  $dependencies['weblinks'][7000] = array(
    // Web Links update 7000 uses field API update functions, so must run after
    // Field API has been enabled.
    'system' => 7020,
    // Web Links update 7000 relies on updated taxonomy module schema. Ensure it
    // runs after all taxonomy updates.
    'taxonomy' => 7010,
  );
  return $dependencies;
}

/**
 * Rename field to 'taxonomy_weblinks'.
 */
function weblinks_update_7000() {
  $messages = array();

  $new_field_name = 'taxonomy_weblinks';

  // Test to see if the taxonomy_weblinks field exists.
  $fields = _update_7000_field_read_fields(array('field_name' => $new_field_name));
  if ($fields) {
    // Since the field exists, we're done.
    return;
  }

  // Calculate the old field name.
  $vid = variable_get('weblinks_nav_vocabulary', 0);
  $vocabulary_machine_name = db_select('taxonomy_vocabulary', 'tv')
    ->fields('tv', array('machine_name'))
    ->condition('vid', $vid)
    ->execute()
    ->fetchField();
  $old_field_name = 'taxonomy_' . $vocabulary_machine_name;

  // Read the old fields.
  $old_fields = _update_7000_field_read_fields(array('field_name' => $old_field_name));
  foreach ($old_fields as $old_field) {
    if ($old_field['storage']['type'] != 'field_sql_storage') {
      $messages[] = t('Cannot rename field %id (%old_field_name) to %new_field_name because it does not use the field_sql_storage storage type.', array(
        '%id' => $old_field['id'],
        '%old_field_name' => $old_field_name,
        '%new_field_name' => $new_field_name,
      ));
      continue;
    }

    // Update {field_config}.
    db_update('field_config')
      ->fields(array('field_name' => $new_field_name))
      ->condition('id', $old_field['id'])
      ->execute();

    // Update {field_config_instance}.
    db_update('field_config_instance')
      ->fields(array('field_name' => $new_field_name))
      ->condition('field_id', $old_field['id'])
      ->execute();

    // The tables that need updating in the form 'old_name' => 'new_name'.
    $tables = array(
      'field_data_' . $old_field_name => 'field_data_' . $new_field_name,
      'field_revision_' . $old_field_name => 'field_revision_' . $new_field_name,
    );
    foreach ($tables as $old_table => $new_table) {
      $old_column_name = $old_field_name . '_tid';
      $new_column_name = $new_field_name . '_tid';

      // Rename the column.
      db_drop_index($old_table, $old_column_name);
      db_change_field($old_table, $old_column_name, $new_column_name, array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ));
      db_drop_index($old_table, $new_column_name);
      db_add_index($old_table, $new_column_name, array($new_column_name));

      // Rename the table.
      db_rename_table($old_table, $new_table);
    }
  }

  cache_clear_all('*', 'cache_field', TRUE);

  // Remove any left over variables from earlier installations.
  variable_del('weblinks_6113');

  return $messages;
}

/**
 * Increase 'last status' field from 4 to 6 characters.
 */
function weblinks_update_7001() {
  $table = 'weblinks';
  $field_name = 'last_status';
  // Get field specification from the schema, instead of duplicating the values.
  $schema = weblinks_schema();
  $spec = $schema[$table]['fields'][$field_name];
  $ret = db_change_field($table, $field_name, $field_name, $spec);
  return t('OK');
}

/**
 * Correct previously altered sticky values that were used for weighting.
 * See readme.txt or weblinks.install for more details.
 */
function weblinks_update_7002() {
  // Weblinks 6.x used the node sticky attribute to store an encoded weight
  // value for oredring links. This feature has been removed in 7.x as it
  // corrupted the sticky value for non-weblinks nodes. For better control of
  // link order you can use the Weight module
  // @see https://www.drupal.org/node/2030765
  // @see https://www.drupal.org/project/weight

  // Correct the sticky values.
  $sticky = db_update('node')
    ->fields(array('sticky' => 1))
    ->condition('sticky', 1, '>')
    ->execute();
  $sticky_revisions = db_update('node_revision')
    ->fields(array('sticky' => 1))
    ->condition('sticky', 1, '>')
    ->execute();
  // Correct the non-sticky values.
  $non_sticky = db_update('node')
    ->fields(array('sticky' => 0))
    ->condition('sticky', 0, '<')
    ->execute();
  $non_sticky_revisions = db_update('node_revision')
    ->fields(array('sticky' => 0))
    ->condition('sticky', 0, '<')
    ->execute();

  return t('Corrected sticky nodes:@sticky, revisions:@sticky_revisions, Non-sticky nodes:@non_sticky, revisions:@non_sticky_revisions', array(
    '@sticky' => $sticky,
    '@sticky_revisions' => $sticky_revisions,
    '@non_sticky' => $non_sticky,
    '@non_sticky_revisions' => $non_sticky_revisions,
  ));
}

/**
 * Remove Weblinks Alexa Pagerank table and variables.
 */
function weblinks_update_7003() {
  // Delete the ranking variables.
  variable_del('pralexa_cron_interval');
  variable_del('pralexa_cron_last');
  variable_del('pralexa_link_title');
  variable_del('pralexa_links_per_cron');
  variable_del('pralexa_rows_per_page');
  variable_del('pralexa_show_rank');
  variable_del('pralexa_show_title');
  variable_del('pralexa_show_when');
  variable_del('pralexa_url_trim');

  // Delete the table.
  db_drop_table('weblinks_pralexa');

  // Disable and uninstall the module;
  module_disable(array('pralexa'));
  drupal_uninstall_modules(array('pralexa'));

  return t('Alexa Pagerank variables and table deleted.');
}

/**
 * Update permissions.
 */
function weblinks_update_7004() {
  // Two permissions that were provided in weblinks are now created automaticaly
  // in the Node module. Also change two permission text strings.
  // @see https://www.drupal.org/node/2442557

  foreach (array('create' => 'create weblinks' , 'edit_own' => 'edit own weblinks') as $key => $old_perm) {
    $new_perm = $old_perm . ' content';
    // First get all roles which already have the core permission, as the old
    // weblinks permission for any of these roles should be deleted not updated.
    $query = db_select('role_permission', 'rp')
      ->condition('permission', $new_perm)
      ->condition('module', 'node');
    $query->addfield('rp', 'rid');
    $roles = $query->execute()->fetchCol();
    // Delete the rows which have the old permission for these roles.
    $$key = 0;
    if (sizeof($roles)) {
      $$key = db_delete('role_permission')
        ->condition('permission', $old_perm)
        ->condition('rid', array($roles))
        ->execute();
    }

    // Then update any remaining old permissions to the new core one.
    $$key += db_update('role_permission')
      ->fields(array('permission' => $new_perm, 'module' => 'node'))
      ->condition('permission', $old_perm)
      ->execute();
  }

  // Change the permission 'access web links' to 'access weblinks'.
  $access = db_update('role_permission')
    ->fields(array('permission' => 'access weblinks'))
    ->condition('permission', 'access web links')
    ->execute();

  // Change the permission 'view click count' to 'view weblinks click count'.
  $view_click_count = db_update('role_permission')
    ->fields(array('permission' => 'view weblinks click count'))
    ->condition('permission', 'view click count')
    ->execute();

  $result = t("Permissions updated: 'create weblinks' @create, 'edit own weblinks' @edit_own, 'access web links' @access, 'view click count' @view_click_count",
  array(
    '@create' => $create,
    '@edit_own' => $edit_own,
    '@access' => $access,
    '@view_click_count' => $view_click_count,
  ));

  // Rebuild menus because of changes to the permission strings.
  menu_rebuild();
  return $result;
}