<?php

/**
 * @file
 * Allows users to include links with [links-embed: title].
 */

/**
 * Implements hook_filter_info().
 */
function weblinks_embed_filter_info() {
  $filters['weblinks_embed'] = array(
    'title' => t('Web Links embed'),
    'description' => t('Allows users to include a link group in a node with [links-embed: <em>id | name</em>].'),
    'process callback' => '_weblinks_embed_process',
    'settings callback' => '_weblinks_embed_settings',
    'tips callback'  => '_weblinks_embed_filter_tips',
    'cache' => FALSE,
  );
  return $filters;
}


/**
 *  Process the content for filters we provide.
 */
function _weblinks_embed_process($text, $filter, $format) {
  if (preg_match_all("/\[links-embed?:([^=\]]+)=?([^=\]]+)?=?([^\]]*)?\]/i", $text, $match)) {
    // Save the string we found.
    $search = $match[0];

    $replace = array();
    $special = array(0 => 'unclassified', 'unpublished' => 'unpublished');
    // Process all the terms.
    foreach ($match[1] as $key => $tid) {
      $output = NULL;
      $error = FALSE;
      $tid = trim($tid);
      if (!is_numeric($tid)) {
        $special_tid = array_search($tid, $special);
        if ($special_tid === FALSE) {
          $terms = taxonomy_get_term_by_name($tid);
          if ($terms) {
            $tid = $terms[0]->tid;
          }
          else {
            $error = TRUE;
          }
        }
        else {
          $tid = $special_tid;
        }
      }
      if (!$error) {
        $tree = weblinks_get_tree($tid);
        $tree[$tid]->collapsible = variable_get('weblinks_embed_collapse_' . $format->format, variable_get('weblinks_collapsible', TRUE)) && !empty($tree[$tid]->title);
        $output .= _weblinks_format_group($tree[$tid], $tree);
      }
      if (!$output) {
        $output .= '<p>' . t('There are no weblinks in group "@id".', array('@id' => $tid)) . '</p>';
      }
      $replace[$key] = $output;
    }
    return str_replace($search, $replace, $text);
  }
  else {
    return $text;
  }
}

/**
 *  Provide settings for filters we provide.
 */
function _weblinks_embed_settings($form, $form_state, $filter, $format, $defaults) {
  drupal_add_css(drupal_get_path('module', 'weblinks') . '/weblinks.admin.css');
  $settings = array();
  $settings['link'] = array('#attributes' => array('class' => array('weblinks-settings')));

  $settings['link'] = array(
    '#type' => 'fieldset',
    '#title' => t('Weblinks embed settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    );

  $settings['link']['weblinks_embed_collapse_' . $format->format] = array(
    '#type' => 'radios',
    '#title' => t('Make groups collapsible'),
    '#default_value' => variable_get('weblinks_embed_collapse_' . $format->format, variable_get('weblinks_collapsible', TRUE)),
    '#description' => t('This will override the main setting for making the top-level group collapsible.'),
    '#options' => array(1 => t('Yes'), 0 => t('No')),
    '#prefix' => '<div class="weblinks-radios">',
    '#suffix' => '</div>',
    );

  return $settings;
}

/**
 * Callback to give the filter tip text.
 */
function _weblinks_embed_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('To insert a Weblinks group into your content, you may use the pseudo-tag: [links-embed: <em>id | name</em>]. The Weblinks module will insert the appropriate links at that spot in the content.');
  }
  else {
    return t('You may insert a links group with [links-embed: <em>id | name</em>].');
  }
}
