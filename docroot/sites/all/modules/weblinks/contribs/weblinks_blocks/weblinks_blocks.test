<?php
/**
 * @file
 * Define test cases for the Web Links Blocks sub-module.
 * Drupal 7 Version
 */
class WeblinksBlocksTestCase extends DrupalWebTestCase {

  protected $admin_user, $weblinks_user, $ordinary_user;

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Weblinks Blocks'),
      'description' => t('Test the basic block functionality.'),
      'group' => t('Weblinks'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Install the Weblinks module and Weblinks Blocks sub-module.
    parent::setUp('weblinks', 'weblinks_blocks');

    // Clean urls are not enabled on Drupal Testbots, so replicate this for
    // local testing.
    variable_set('clean_url', 0);
  }

  /**
   * Basic tests for block functionality and configuration.
   */
  function testWeblinksBlocks() {
    // Create admin user with the required permissions.
    $admin_user = $this->drupalCreateUser(array(
      'access content',
      'access weblinks',
      'administer blocks',
    ));
    // Create weblinks user without admin permissions.
    $weblinks_user = $this->drupalCreateUser(array(
      'access content',
      'access weblinks',
    ));
    // Create ordinary user without access to weblinks.
    $ordinary_user = $this->drupalCreateUser(array(
      'access content',
    ));

    // Create some links.
    $number_of_links = 20;
    $total_published = 0;
    $total_promoted = 0;
    for ($i = 1; $i <= $number_of_links; $i++) {
      $status = min($i % 3, 1); // Every third link is unpublished.
      $promote = min($i % 4, 1); // Every fourth link is unpromoted.
      $settings = array(
        'type' => 'weblinks',
        'title' => implode(' ', array('Link', $i, $status ? 'published' : 'unpublished', $promote ? 'promoted' : 'not promoted')),
        'url' => 'http://www.example.com',
        'status' => $status,
        'promote' => $promote,
        );
      $link = $this->drupalCreateNode($settings);
      $total_published += $status;
      $total_promoted += $promote;
    }

    // Display the first and last links.
    $this->drupalGet('node/1');
    $this->drupalGet('node/' . ($i-1));

    // Login as the admin user to configure the blocks.
    $this->drupalLogin($admin_user);

    // Verify that blocks are not shown.
    $this->drupalGet('/');
    $this->assertNoRaw(t('Unpublished Links'), '"Unpublished Links" block is not shown.');
    $this->assertNoRaw(t('Random Links'), '"Random Links" block is not shown.');

    // Check that the blocks are available in the block listing page.
    $this->drupalGet('admin/structure/block');
    $this->assertRaw(t('Web Links: All Links'), '"All Links" block found in block list.');
    $this->assertRaw(t('Web Links: My Links'), '"My Links" block found in block list.');
    $this->assertRaw(t('Web Links: Unclassified'), '"Unclassified" block found in block list.');
    $this->assertRaw(t('Web Links: Unpublished'), '"Unpublished" block found in block list.');
    $this->assertRaw(t('Web Links: Random'), '"Random" block found in block list.');
    $this->assertRaw(t('Web Links: Recent'), '"Recent" block found in block list.');
    $this->assertRaw(t('Web Links: Most Popular'), '"Most Popular" block found in block list.');

    // ********************************
    // Test the Random block
    // ********************************

    // Enable the Random block and verify that it is shown.
    $this->drupalPost('admin/structure/block', array('blocks[weblinks_blocks_weblink-random][region]' => 'sidebar_first'), t('Save blocks'));
    $this->assertTrue($this->xpath('//div[@id = "block-weblinks-blocks-weblink-random"]'), 'The Random block is shown.');

    // Check that the defualt of ten links are shown, using the default url.
    $random_links = $this->xpath('//a[contains(@href, :href)]', array(':href' => 'http://www.example.com'));
    $this->assertEqual(sizeof($random_links), 10, 'The Random block contains ten links, unchanged from the default number.');

    // Check the description text is not shown. Each link is a list item with
    //class=weblinks-item followed by div with class=description.
    $descriptions = $this->xpath('//li[contains(@class, "weblinks-item")]/div[contains(@class, "description")]');
    $this->assertFalse($descriptions, 'The Random block teaser descriptions are not shown');

    // Configure the Random block to have five links to node, with teaser text.
    $this->drupalPost('admin/structure/block/manage/weblinks_blocks/weblink-random/configure', array(
      'weblinks_maxdisp_blocks' => 5,
      'weblinks_blocks_urlnode' => 'node',
      'weblinks_blocks_description' => 'teaser',
    ), t('Save block'));

    // Check that now we have only five links in the block, with teaser text.
    $random_links = $this->xpath('//a[contains(@href, :href)]', array(':href' => url('node')));
    $this->assertEqual(sizeof($random_links), 5, 'The Random block now contains five links');
    $descriptions = $this->xpath('//li[contains(@class, "weblinks-item")]/div[contains(@class, "description")]');
    $this->assertEqual(sizeof($descriptions), 5, 'The Random block teaser decsriptions are shown');

    // ********************************
    // Test the Unpublished block
    // ********************************

    // Enable the Unpublished block and verify that it is shown.
    $this->drupalPost('admin/structure/block', array('blocks[weblinks_blocks_weblink-unpublished][region]' => 'sidebar_first'), t('Save blocks'));
    $this->assertRaw(t('Unpublished Links'), 'The Unpublished block is shown.');

    // Count the unpublished links.
    $unpublished_links = $this->xpath('//div[@id = "block-weblinks-blocks-weblink-unpublished"]/div/div/ul/li[contains(@class, "weblinks-item")]');
    $this->assertEqual(sizeof($unpublished_links), $number_of_links - $total_published, 'The Unpublished block contains all unpublished links');

    // Check that the 'more' link is not shown by default.
    $more = $this->xpath('//div[contains(@class, "more-link")]/a[contains(@href, :href)]', array(':href' => url('weblinks/unpublished')));
    $this->assertFalse($more, 'The Unpublished "more" link is not shown by default.');

    // Configure the Unpublished block.
    $this->drupalPost('admin/structure/block/manage/weblinks_blocks/weblink-unpublished/configure', array(
      'weblinks_blocks_classes' => 'test-class',
      'weblinks_maxdisp_blocks' => 3,
      'weblinks_blocks_more' => 1,
    ), t('Save block'));

    // Login as a standard weblinks user, without admin authority.
    $this->drupalLogin($weblinks_user);

    // Check that the 'more' link is shown.
    $more = $this->xpath('//div[contains(@class, "more-link")]/a[contains(@href, :href)]', array(':href' => url('weblinks/unpublished')));
    $this->assertTrue($more, 'The Unpublished "more" link is shown after turning it on in block configuration.');

    // Follow the 'more' link to the full page.
    $this->drupalGet('weblinks/unpublished');

    // Check that all the unpublished links are displayed.
    $all_unpublished_links = $this->xpath('//div[contains(@class, "weblinkCat")]//div[contains(@class, "item-list")]//li');
    $this->assertEqual(sizeof($all_unpublished_links), $number_of_links - $total_published, 'The Unpublished page displays all unpublished links');

    // ********************************
    // Test the Recent block
    // ********************************

    // Login as the admin user.
    $this->drupalLogin($admin_user);

    // Enable the Recent block.
    $this->drupalPost('admin/structure/block', array('blocks[weblinks_blocks_weblink-recent][region]' => 'sidebar_first'), t('Save blocks'));

    // Check that the Recent block is shown.
    $this->assertTrue($this->xpath('//div[@id = "block-weblinks-blocks-weblink-recent"]'), 'The Recent block is shown.');

    // Check that the 'more' link is not shown by default.
    $more = $this->xpath('//div[contains(@class, "more-link")]/a[contains(@href, :href)]', array(':href' => url('weblinks/recent')));
    $this->assertFalse($more, 'The Recent "more" link is not shown by default.');

    // Configure the Recent block.
    $this->drupalPost('admin/structure/block/manage/weblinks_blocks/weblink-recent/configure', array(
      'weblinks_maxdisp_blocks' => 3,
      'weblinks_blocks_more' => 1,
    ), t('Save block'));

    // Check that the 'more' link is shown.
    $more = $this->xpath('//div[contains(@class, "more-link")]/a[contains(@href, :href)]', array(':href' => url('weblinks/recent')));
    $this->assertTrue($more, 'The Recent "more" link is shown after turning it on in block configuration.');

    // Go to the 'Recent Links' full page and check that all links are shown.
    $this->drupalGet('weblinks/recent');
    $all_recent_links = $this->xpath('//div[contains(@class, "weblinkCat")]//div[contains(@class, "item-list")]//li');
    $this->assertEqual(sizeof($all_recent_links), $total_published, 'The Recent Links page displays all the published links');

    // Login as ordinary user who does not have access to the weblinks pages.
    $this->drupalLogin($ordinary_user);

    // Check that the Recent block is shown.
    $recent_block = $this->xpath('//div[@id = "block-weblinks-blocks-weblink-recent"]');
    $this->assertTrue($recent_block, 'The Recent block is shown for ordinary users.');

    // Check that only three links are shown in the recent block.
    $recent_links = $this->xpath('//div[@id = "block-weblinks-blocks-weblink-recent"]//div[contains(@class, "item-list")]//li');
    //debug(sizeof($recent_links), 'sizeof(recent_links)')
    $this->assertEqual(sizeof($recent_links), 3, 'The Recent block contains three links');

    // Check that the 'more' link is not shown for the ordinary user.
    $more = $this->xpath('//div[@id = "block-weblinks-blocks-weblink-recent"]//div[contains(@class, "more-link")]');
    $this->assertFalse($more, 'The Recent "more" link is not shown for users who cannot follow the links.');
  }

}
