<?php

/**
 * @file
 * Checks validity of submitted links and handles user deletion.
 * Drupal 7 Version
 */

/**
 * Implements hook_help().
 */
function weblinks_checker_help($path, $args) {
  switch ($path) {
    case 'admin/config/content/weblinks/checker':
      return t('Checks validity of submitted links and handles user deletion.');
  }
}

/**
 * Implements hook_menu().
 */
function weblinks_checker_menu() {
  $items = array();

  $items['admin/config/content/weblinks/checker'] = array(
    'title' => 'Checker settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weblinks_checker_settings'),
    'file' => 'weblinks_checker.admin.inc',
    'access arguments' => array('administer weblinks'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    );

  return $items;
}

/**
 * Implements hook_theme().
 */
function weblinks_checker_theme() {
  return array(
    'weblinks_status' => array(
      'variables' => array('node' => NULL),
      ),
    );
}

/**
 *  Theme the link status.
 *
 *  @param $variables['node']
 *    Object containing the node information.
 *  @return
 *    String containing the formatted status or NULL if status is okay.
 */
function theme_weblinks_status($variables) {
  $node = $variables['node'];
  $output = NULL;
  if (!function_exists('weblinks_error_codes')) {
    include(drupal_get_path('module', 'weblinks') . '/weblinks_errors.inc');
  }
  $errors = weblinks_error_codes();

  // Are we checking?
  if (!variable_get('weblinks_checker_enabled', FALSE)) {
    return NULL;
  }

  // Check the validity of the link.
  $error_text = array_key_exists($node->last_status, $errors) ? $errors[$node->last_status] : t('Invalid status code');
  switch ($node->last_status) {
    case '200':
    case '0':
    case '':
      return NULL;

    case '301':
    case '302':
      $output = '<div class="weblinks-status-notice">';
      break;

    default:
      $output = '<div class="weblinks-status-warning">';
  }
  $last_checked = strtotime($node->last_checked);
  $output .= t('As of !date, this link is reporting @text.',
    array('!date' => format_date($last_checked, 'small'), '@text' => $error_text))
    . '</div>';

  return $output;
}

/**
 * Implements hook_weblinks_preprocess().
 */
function weblinks_checker_weblinks_preprocess($node) {
  if (variable_get('weblinks_checker_show_status', TRUE)) {
    return array('link_status' => theme('weblinks_status', array('node' => $node)));
  }
  else {
    return array('link_status' => NULL);
  }
}

/**
 * Implements hook_user_cancel().
 */
function weblinks_checker_user_cancel($edit, $account, $method) {
  // This hook is called during user delete when the admin selects 'delete
  // account and move content to anonymous'. The weblinks_checker module weight
  // is -2 so weblinks_checker_user_cancel is called before node_user_cancel
  // (which would move the content to anon user but weblinks gets there first)
  $move_to = variable_get('weblinks_rescue_move', 1);
  if ((!$move_to_user = user_load($move_to)) || ($account->uid == $move_to)) {
    // The user no longer exists, or is being deleted, so switch to user 1.
    $move_to = 1;
    $move_to_user = user_load($move_to);
  }
  // User 0 loads, but has no name, so use the system variable.
  $move_to_name = ($move_to == 0) ? variable_get('anonymous', t('Anonymous')) : $move_to_user->name;
  $status = variable_get('weblinks_rescue_unpub', 0);
  $num_updated = db_update('node')
    ->fields(array(
      'status' => $status,
      'uid' => $move_to,
    ))
    ->condition('uid', $account->uid, '=')
    ->execute();
  drupal_set_message(t('Weblinks moved @links from user %source_user to user %target_user.', array(
    '@links' => format_plural($num_updated, '1 link', '@count links'),
    '%source_user' => $account->name,
    '%target_user' => $move_to_name,
  )));
  watchdog('Weblinks', 'Weblinks moved @links from user %source_user to user %target_user.', array(
    '@links' => format_plural($num_updated, '1 link', '@count links'),
    '%source_user' => $account->name,
    '%target_user' => $move_to_name,
  ));
}

/**
 * Implements hook_form_alter().
 */
function weblinks_checker_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'weblinks_node_form') {
    // Add validation and submit to the node add/edit form.
    $form['#validate'][] = 'weblinks_checker_validate';
    $form['#submit'][] = 'weblinks_checker_submit';
  }
  if ($form_id == 'user_multiple_cancel_confirm') {
    // Add description to show which user the links will be moved to.
    $move_to = variable_get('weblinks_rescue_move', 1);
    if (!$move_to_user = user_load($move_to)) {
      // The specified user no longer exists, so load user 1.
      $move_to_user = user_load(1);
    }
    // User 0 loads, but has no name, so use the system variable.
    $move_to_name = ($move_to == 0) ? variable_get('anonymous', t('Anonymous')) : $move_to_user->name;
    $desc = t('With this option, <a href="!checker_settings">Web Links Checker Settings</a> will reassign Web Links to user %target_user.', array(
      '!checker_settings' => url('admin/config/content/weblinks/checker'),
      '%target_user' => $move_to_name,
    ));
    if (isset($form['user_cancel_method']['user_cancel_reassign']['#description'])) {
      $form['user_cancel_method']['user_cancel_reassign']['#description'] .= '<br>' . $desc;
    }
    else {
      $form['user_cancel_method']['user_cancel_reassign']['#description'] = $desc;
    }
  }
}

/**
 * Implements hook_validate().
 */
function weblinks_checker_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Delete')) {
    return '';
  }

  $new = _weblinks_checker_fix_url($form_state['values']['url']);
  if (!valid_url($new, TRUE)) {
    form_set_error('url', t('"@url" does not look like a valid URL.', array('@url' => $new)));
    // We can't do much more after this error.
    return;
  }

  $allow_dupes = variable_get('weblinks_allow_dupes', FALSE);
  if ($allow_dupes != 1) {
    // See if this url is already in the database.
    $urlhash = md5($new);
    $url_exists_nid = db_query(
      "SELECT nid FROM {weblinks} l WHERE l.urlhash=':urlh' AND l.url=':url'",
      array(':urlh' => $urlhash, ':url' => $new))->fetchField();
    if ($url_exists_nid) {
      if ($form['#node']->nid != $url_exists_nid) {
        if (!$allow_dupes) {
          form_set_error('url', t('A link with that URL already exists.'));
        }
        else {
          drupal_set_message(t('A link with that URL already exists.'), 'warning');
        }
      }
    }
  }

  if (variable_get('weblinks_validate_check', FALSE)) {
    // Verify that the link is working. Only retrieve header not full page.
    $response = drupal_http_request($new, array('max_redirects' => 0, 'method' => 'HEAD'));
    $status = $response->code;

    $ignore = variable_get('weblinks_checker_ignore', array());
    // Force ignoring 200 OK status.
    $ignore['200'] = '200';
    // Create a value for $ignore['0'] from the separate variable behind the
    // '0' checkbox. See admin.inc for details.
    $ignore['0'] = current(variable_get('weblinks_checker_ignore_zero', array(0)));

    // Did it work?
    if (!$ignore[$status]) {
      if ($status >= 300 && $status <= 307) {
        // Display redirect information as well
        $response->status_message .= ' ' . $response->redirect_url;
      }
      form_set_error('url', t('This link is returning an error code of @err (@text).',
        array('@err' => $status, '@text' => isset($response->error) ? $response->error : $response->status_message)));
    }
  }
}

/**
 * Helper function for URLs.
 */
function _weblinks_checker_fix_url($url) {
  // This is needed for WYSIWYG editors.
  $url = strip_tags(trim($url));

  // Repeat basic validation from core module.
  if ($url == variable_get('weblinks_url_stub', 'http://')) {
    return t('Incomplete URL.');
  }

  // Note that we have to try to bypass a core bug in valid_url().
  // See http://drupal.org/node/295021.
  $y = parse_url($url);
  return (isset($y['scheme']) ? $y['scheme'] . '://' : NULL)
    . $y['host']
    . (isset($y['port']) ? (':' . $y['port']) : '')
    . (isset($y['path']) ? '' : '/')
    . @$y['path']
    . (isset($y['query']) ? '?' . rawurlencode($y['query']) : NULL);
}

/**
 * Implements hook_submit().
 * This function corrects the URL before it gets saved.
 */
function weblinks_checker_submit($form, &$form_state) {
  $form_state['values']['url'] = rawurldecode(_weblinks_checker_fix_url($form_state['values']['url']));
}

/**
 * Implements hook_node_presave().
 */
function weblinks_checker_node_presave($node) {
  if ($node->type == 'weblinks' && isset($node->original) && empty($node->checker_cron)) {
    // If the link url has been changed, or the node has been published or
    // unpublished manually, erase the last_status, last_status_info and
    // last_checked values. If the node remains published then it will continue
    // to be checked during cron, but if the node is unpublished this has the
    // effect of taking it out of the control of checker.
    if ($node->status != $node->original->status || $node->url != $node->original->url) {
      $node->last_status = '';
      $node->last_status_info = NULL;
      $node->last_checked = NULL;
    }
  }
}

/**
 * Implements hook_cron().
 * Checks if the links are still valid.
 */
function weblinks_checker_cron() {
  if (!variable_get('weblinks_checker_enabled', FALSE)) {
    // Checker is turned off, so finish here.
    return '';
  }

  $interval = variable_get('weblinks_checker_interval', 86400);
  $last_run = variable_get('weblinks_checker_last', 0);
  $now = isset($_SERVER['REQUEST_TIME']) ? $_SERVER['REQUEST_TIME'] : time();

  // Is it time to check yet?
  if ($last_run + $interval > $now) {
    return '';
  }

  $limit = variable_get('weblinks_checker_limit', 5);
  // $unpublish: 1 = Unpublish after N cron runs, 2 = Unpublish after N days,
  // 0 = Do not unpublish.
  $unpublish = variable_get('weblinks_checker_unpublish', 0);
  // $action_on_unpublished: 1 = Include in checking,
  // 2 = Include and re-publish if OK, 0 = Exclude from checking.
  $action_on_unpublished = variable_get('weblinks_checker_action_on_unpublished', 0);
  $redir_update = variable_get('weblinks_checker_redirect', FALSE);
  $detail_log = variable_get('weblinks_checker_detail_log', FALSE);
  // $checker_order: 1 = Give priority to links in error,
  // 0 = Check links in strict rotation.
  $checker_order = variable_get('weblinks_checker_order', 0);
  $checked = array();
  // $errors_found: Count how many links are reporting errors on this run.
  $errors_found = 0;

  $ignore = variable_get('weblinks_checker_ignore', array());
  $ignore_zero = variable_get('weblinks_checker_ignore_zero', array(0));
  // Force ignoring 200 OK status.
  $ignore['200'] = '200';
  // Ignore ignoring 301.
  unset($ignore['301']);
  // Create a value for $ignore['0'] from the separate variable behind the
  // '0' checkbox. See admin.inc for details.
  $ignore['0'] = current($ignore_zero);

  // When giving priority to links which are unpublished, currently reporting an
  // error status or not yet checked, we need to sort by an expression which
  // will put bad status links ahead of good status ones. In preparation for
  // this, we need a list of the codes that we are considering to be 'good'.
  // First take the $ignore list and remove all values of 0.
  $good_status_list = array_diff($ignore, array(0));
  // If we need to ignore zero as a status code then add this to the array.
  if (current($ignore_zero)) {
    $good_status_list[] = '0';
    // The value in key '0' will not be a status code so remove it.
    unset($good_status_list['0']);
  }

  // Select which weblinks to check.
  // The node's status field is renamed to node_published to improve the
  // readability of the code because 'status' is used as the link's status.
  // The meanings of values in last_status_info are as follows:
  //   NULL
  //     Checker has/is not actively monitoring this yet. The default is NULL so
  //     that if a new link is manually unpublished then it wont be picked up by
  //     checker until it is manually published.
  //   0
  //     Checker has monitored this link, and either it is OK or the method of
  //     counting (days/crons) has been changed by admin.
  //   > 0
  //     The link is reporting an error and the date of change or number of
  //     crons since the change is being monitored by checker.
  //
  // If including unpublished links then we must only include ones which
  // weblinks_checker_cron has previously checked and set to unpublished. This
  // is done by selecting where last_status has a value and last_status_info is
  // not NULL. Otherwise weblinks_cron would pick up and publish new nodes which
  // have been manually set to unpublished.
  $query = db_select('weblinks', 'l');
  $query->fields('l', array('nid', 'vid', 'url', 'last_checked', 'last_status', 'last_status_info'));
  $query->addJoin('INNER', 'node', 'n', 'l.nid = n.nid and l.vid = n.vid');
  $query->addField('n', 'status', 'node_published');
  $query->addField('n', 'title');
  $query->addExpression("(case when (l.last_status in (:good_status_list) or ISNULL(l.last_status)) then ' ' else l.last_status end)", 'bad_status_seq', array(':good_status_list' => $good_status_list));
  if ($action_on_unpublished) {
    $query->where('(n.status = 1) OR (last_status <> :blank and !ISNULL(last_status_info))', array(':blank' => ''));
  }
  else {
    $query->condition('n.status', 1);
  }
  if ($checker_order) {
    // First give priority to unpublished links.
    $query->orderBy('node_published', 'ASC');
    // Then 'bad_status_seq' puts links with bad status ahead of good ones.
    $query->orderBy('bad_status_seq', 'DESC');
  }
  // Always order by the last checked date.
  $query->orderBy('last_checked', 'ASC');
  $query->range(0, $limit);

  foreach ($query->execute() as $key => $link) {
    $url = $newurl = $link->url;
    $last_status = $link->last_status != '' ? $link->last_status : t('Unknown');
    $last_status_info = $link->last_status_info;
    $status = 'dead';
    $extra = NULL;

    // Store whether a separate update of 'weblinks' table is required. Default
    // to TRUE but may be set to FALSE if a node_save() is executed.
    $weblinks_update_required = TRUE;

    // Hit the site. Don't follow redirects. Only retrieve header not full page.
    $response = drupal_http_request($url, array('max_redirects' => 0, 'method' => 'HEAD'));
    $status = $response->code;

    // Log site with errors.
    // Define a reset value for last_status_info. For "Unpublish after N crons"
    // reset to 1. For "Unpublish after N days" reset to the current datetime.
    $reset_value = ($unpublish == 1 ? 1 : ($unpublish == 2 ? $now : NULL));
    if (!isset($ignore[$status]) || $ignore[$status] == 0) {
      ++$errors_found;
      $extra = isset($response->error) ? $response->error : $response->status_message;
      // Use (string)$status whenever comparing against $status to get the
      // correct result when $last_status is text.
      if ($last_status != (string)$status) {
        if ($detail_log != 0) {
          // The http status has changed and the 'none' reporting option is not
          // selected, so report it to the log.
          watchdog('Weblinks', 'Status changed from @last_status to @status for @title @url @extra.',
            array('@title' => $link->title, '@url' => $url, '@status' => $status, '@last_status' => $last_status, '@extra' => $extra),
            WATCHDOG_WARNING, l(t('View'), 'node/' . $link->nid));
        }
        // Reset the last_status_info.
        $last_status_info = $reset_value;
      }
      else {
        // The site is in error and has not changed status from the last time it
        // was checked.
        if ($detail_log == 1) {
          // Reporting every link checked.
          watchdog('Weblinks', 'Status @status unchanged for @title @url @extra.',
            array('@title' => $link->title, '@url' => $url, '@status' => $status, '@extra' => $extra),
            WATCHDOG_WARNING, l(t('View'), 'node/' . $link->nid));
        }

        if ($last_status_info == 0 || $last_status_info == NULL) {
          // The stored last_status_info has been previously cleared, so put in
          // the reset value.
          $last_status_info = $reset_value;
        }
        elseif ($unpublish == 1) {
          // The option for unpublishing by number of cron runs is selected, so
          // increment the counter.
          $last_status_info++;
        }
      }

      if ($status == '301' && $redir_update) {
        // Update the link because of redirect. It will get checked and
        // optionally re-published on a subsequent cron run.
        $newurl = substr($response->redirect_url, 0, 1) == '/' ? $url . $response->redirect_url : $response->redirect_url;
        watchdog('Weblinks', '@title @url returned 301, updated to @new',
          array('@title' => $link->title, '@url' => $url, '@new' => $newurl),
          WATCHDOG_NOTICE, l(t('View'), 'node/' . $link->nid));
      }

      if ($unpublish) {
        // The option to unpublish links in error is selected. Get the number of
        // days or cron runs after which to unpublish.
        $unpublish_after = variable_get('weblinks_checker_unpublish_after', 0);
        // Get the number of days or cron runs that this link has been in this
        // error state.
        $n_in_error = $unpublish == 2 ? ceil(($now - $last_status_info)/86400) : $last_status_info;
        if ($link->node_published == 1 && $n_in_error >= $unpublish_after)  {
          // The link is currently published but the number of cron runs or days
          // in error has reached the level where the link must be unpublished.
          $node = node_load($link->nid);
          $node->status = NODE_NOT_PUBLISHED;
          $node->revision = variable_get('weblinks_checker_new_revision', 0);
          if ($node->revision) {
            // Creating a new revision.
            $node->revision_save_click_data = TRUE;
            $node->log = t('@title @url unpublished by Web Links Checker on @now. URL status has been @url_status for @n_in_error @crons_or_days.', array(
              '@title' => $link->title,
              '@url' => $url,
              '@url_status' => $status,
              '@n_in_error' => $n_in_error,
              '@crons_or_days' => ($unpublish == 2) ? t('days') : t('cron runs'),
              '@now' => format_date($now, 'short'),
            ));
          }
          $node->last_status = $status;
          $node->last_status_info = $last_status_info;
          $node->last_checked = date('Y-m-d H:i:s', $now);
          $node->url = $newurl;
          $node->checker_cron = TRUE; // Flag for use in hook_node_presave.
          node_save($node);

          // We do not need to update the separate weblinks table as all of the
          // checker information is stored via the node_save() above, either in
          // the existing version or the new revision.
          $weblinks_update_required = FALSE;

          // Log the action. Inform user as they may be running interactively.
          watchdog('Weblinks', '@title @url unpublished by Web Links Checker.', array('@title' => $link->title, '@url' => $url),
            WATCHDOG_WARNING, l(t('View'), 'node/' . $link->nid));
          drupal_set_message(t('@title @url unpublished by Web Links Checker.', array('@title' => $link->title, '@url' => $url)));
        }
      }
    }
    else {
      // It's either OK or we want to ignore it.
      if ($detail_log == 1 || (string)$status != $last_status) {
        if ((string)$status != $last_status) {
          watchdog('Weblinks', 'Status changed from @last_status to @status for @title @url',
            array('@title' => $link->title, '@url' => $url, '@status' => $status, '@last_status' => $last_status),
            WATCHDOG_NOTICE, l(t('View'), 'node/' . $link->nid));
        }
        else {
          watchdog('Weblinks', 'Status @status unchanged for @title @url',
            array('@title' => $link->title, '@url' => $url, '@status' => $status, '@last_status' => $last_status),
            WATCHDOG_NOTICE, l(t('View'), 'node/' . $link->nid));
        }
      }
      // Clear the last_status_info as the link is not in error.
      $last_status_info = 0;
      if ($link->node_published == 0 && $action_on_unpublished == 2) {
        // The link is not reporting errors anymore but it is currently
        // unpublished and we want to republish good links.
        $node = node_load($link->nid);
        $node->status = NODE_PUBLISHED;
        $node->revision = variable_get('weblinks_checker_new_revision', 0);
        if ($node->revision) {
          // Creating a new revision.
          $node->revision_save_click_data = TRUE;
          $node->log = t('@title @url re-published by Web Links Checker on @now. URL status changed from @last_status to @status.', array(
            '@title' => $link->title,
            '@url' => $url,
            '@last_status' => $last_status,
            '@status' => $status,
            '@now' => format_date($now, 'short'),
          ));
        }
        $node->last_status = $status;
        $node->last_status_info = $last_status_info;
        $node->last_checked = date('Y-m-d H:i:s', $now);
        $node->checker_cron = TRUE; // Flag for use in hook_node_presave.
        node_save($node);

        $weblinks_update_required = FALSE;

        // Log the action. Inform user as they may be running interactively.
        watchdog('Weblinks', '@title @url re-published by Web Links Checker.', array('@title' => $link->title, '@url' => $url),
          WATCHDOG_NOTICE, l(t('View'), 'node/' . $link->nid));
        drupal_set_message(t('@title @url re-published by Web Links Checker.', array('@title' => $link->title, '@url' => $url)));
      }
    }

    // Update the 'weblinks' table if required.
    if ($weblinks_update_required) {
      $link->last_status = $status;
      $link->last_status_info = $last_status_info;
      $link->last_checked = date('Y-m-d H:i:s', $now); // datetime format
      $link->url = $newurl;
      $link->urlhash = md5($newurl);
      drupal_write_record('weblinks', $link, array('nid', 'vid'));
    }

    $checked[$link->nid] = $link->title;
  }

  $summary_msg = variable_get('weblinks_checker_summary_msg', 0);
  if ($summary_msg) {
    watchdog('Weblinks', 'Weblinks checked !links @titles',
      array('!links' => format_plural(count($checked), '1 link', '@count links'),
            '@titles' => ($summary_msg == 2 && count($checked)) ? '(' . implode(', ', $checked) . ')' : ''),
      WATCHDOG_NOTICE, l(t('Settings'), 'admin/config/content/weblinks/checker'));
  }

  // If priority is being given to links in error and the number of links
  // returning an error is equal to the max number being checked on a run then
  // other links will never get checked until some of the bad links return to a
  // good status or the URLs are fixed. Give a warning in the log to alert the
  // admin, who may wish to increase the number of links tested or change the
  // priority of checking.
  if ($errors_found >= $limit && $checker_order) {

    // Get the full number in error, which may be more than the limit.
    $query_all_errors = db_select('weblinks', 'l');
    $query_all_errors->addExpression('COUNT(*)');
    $query_all_errors->where('last_status <> :blank and !ISNULL(last_status_info) and last_status_info <> 0', array(':blank' => ''));
    $total_in_error = $query_all_errors->execute()->fetchField();

    watchdog('Weblinks',
      '@links_reported_errors. The total number of links with errors is @total_in_error and the maximum number being checked per run is @limit. Other links will not get checked because priority is given to links in error, so you may wish to change your settings.',
      array(
        '@links_reported_errors' => format_plural($errors_found, '1 link reported an error in this cron run', '@count links reported errors in this cron run'),
        '@total_in_error' => $total_in_error,
        '@limit' => $limit,
      ),
      WATCHDOG_WARNING,
      l(t('Settings'), 'admin/config/content/weblinks/checker')
    );
  }

  variable_set('weblinks_checker_last', $now);
}
