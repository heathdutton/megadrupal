<?php
/**
 * @file
 * Offer search function via the DigitalNZ API http://digitalnz.org
 * Some aspects based on apachesolr module.
 * This module was produced at the DigitalNZ-sponsored Christchurch Hackfest, 12 September 2009.
 *
 * @author digitalnz_search.module@huntdesign.co.nz
 *
 * @todo:
 * - Add search toggle for showing thumbnails
 * - Use Imagecache to limit thumbnail size?
 * - Support fielded search
 * - Support facets
 * - Need to indicate active direction similar to Solr search.
 * - retain active search and direction on new search (to help refine existing results).
 */

/**
 * Define callback for settings (number of results per page).
 * Implements hook_menu().
 */
function digitalnzsearch_menu() {

  $items['admin/config/search/digitalnz/search'] = array(
    'title' => t('DigitalNZ Search'),
    'description' => t('Configure search settings.'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('digitalnzsearch_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'digitalnzsearch.admin.inc',
  );
  return $items;
}

/**
 * Show DigitalNZ as search option.
 * Implements hook_search_info().
 */
function digitalnzsearch_search_info() {
  return array(
    'title' => 'Digital NZ', 
    'path' => 'digitalnz', 
    //'conditions_callback' => 'digitalnzsearch',
  );
}

/**
 * Return results from API when DigitalNZ search is invoked.
 * Implements hook_search_execute().
 */
function digitalnzsearch_search_execute($keys = NULL, $conditions = NULL) {
  flog_it(__FUNCTION__ . ': keys=' . $keys . ', conditions=' . $conditions);

  $page = pager_find_page();
  $num_per_page = variable_get('digitalnz_search_rows', 10);
  $offset = $num_per_page * $page;
  $sort = '';

  if (isset($_GET['sort'])) {
    $sort = check_plain($_GET['sort']);
  }

  // @todo: This seems a bit ugly.
  if (isset($_GET['direction'])) {
    $direction = check_plain($_GET['direction']);
    $xml = digitalnzapi_do_search($keys, $offset, $num_per_page, $sort, $direction);
  }
  else {
    $xml = digitalnzapi_do_search($keys, $offset, $num_per_page, $sort);
  }

  if (!empty($xml)) {
    $xml = new SimpleXMLElement($xml);
    flog_it(__FUNCTION__ . ': xml=' . print_r($xml, TRUE));
  
    // Initialize pager.
    pager_default_initialize($xml->{'result-count'}, $num_per_page);
  
    $output = digitalnzapi_results($xml);
  
    return $output;
  }
}

/**
 * Override search_results to introduce DigitalNZ logo, per Digital NZ terms.
 * Implements hook_search_page().
 */
function digitalnzsearch_search_page($results) {
  if (count($results)) {
  $output['prefix']['#markup'] = '<ol class="search-results digitalnzsearch-results">';

    foreach ($results as $entry) {
      $output[] = array(
        '#theme' => 'search_result', 
        '#result' => $entry, 
        '#module' => 'digitalnzsearch',
      );
    }
    $output['suffix']['#markup'] = '</ol>' . theme('pager');
  
    $output['suffix']['#markup'] .= '<a href="http://digitalnz.org/"><img src="/'. drupal_get_path('module', 'digitalnzsearch') .'/DNZ_Logo.jpg" alt="Powered by DigitalNZ"/></a>';
  
    return $output;
  }
}

/**
 * Define block for sorting search results.
 * Implementsf hook_block_info().
 */
function digitalnzsearch_block_info() {
  $blocks['digitalnzsearch_sort'] = array(
    'info' => t('DigitalNZ: Sorting'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function digitalnzsearch_block_view($delta = '') {
  switch($delta) {
    case 'digitalnzsearch_sort':
      if (digitalnz_has_searched()) {
        // Get the query and response. Without these no blocks make sense.
        $response = digitalnz_static_response_cache();
        if (empty($response)) {
          return;
        }
      
        $sorts = array(
          'relevancy' => array('name' => t('Relevancy'), 'default' => 'asc'),
          'title' => array('name' => t('Title'), 'default' => 'asc'),
          'category' => array('name' => t('Type'), 'default' => 'asc'),
          'content_partner' => array('name' => t('Provider'), 'default' => 'asc'),
          'date' => array('name' => t('Date'), 'default' => 'desc'),
        );
  
        //$digitalnzsorts = array();
        //$sort_parameter = isset($_GET['sort']) ? check_plain($_GET['sort']) : FALSE;
        $sort_field = isset($_GET['sort']) ? check_plain($_GET['sort']) : FALSE;
        //foreach (explode(',', $sort_parameter) as $digitalnzsort) {
        //  $parts = explode(' ', $digitalnzsort);
        //  if (!empty($parts[0]) && !empty($parts[1])) {
        //    $digitalnzsorts[$parts[0]] = $parts[1];
        //  }
        //}
  
        // Current query
        // @todo: Default to none=relevancy
        $arg0 = arg(0);
        $arg1 = arg(1);
        $arg2 = arg(2);
  
        $sort_links = array();
        /* $path = 'search/' . arg(1) . '/' . $query->get_query_basic();
        $new_query = clone $query; */
  
        // Toggle direction
        $direction = isset($_GET['direction']) ? check_plain($_GET['direction']) : FALSE;
  
        foreach ($sorts as $type => $sort) {
          //$new_sort = isset($digitalnzsorts[$type]) ? $digitalnzsorts[$type] == 'asc' ? 'desc' : 'asc' : $sort['default'];
          // If we have a sort, toggle direction
          if ($sort_field == $type) {
            if (isset($direction)) {
              $new_direction = ($direction == 'asc') ? 'desc' : 'asc';
            }
            else {
              // If we are using default direction, toggle it.
              $new_direction = $sort['default']; // == 'asc' ? 'desc' : 'asc';
            }
          }
          else {
            $new_direction = $sort['default'];
          }
  
          //$active = isset($solrsorts[$type]) || ($type == "relevancy" && !$solrsorts);
  
          // @todo: Not sure if relevancy has direction
          if ($type == 'relevancy') {
            $options = array();
          }
          else {
            $options = array('query' => array(
              'sort' => $type,
              'direction' => $new_direction,
            ));
          }
          $sort_links[] = l($sort['name'], $arg0 .'/'. $arg1 .'/'. $arg2, $options);
        } // foreach sorts
  
        $item_list = theme('item_list', array('items' => $sort_links));
  
        // @todo: Reintroduce theming
        $block['subject'] = t('Sort by');
        $block['content'] = array('#markup' => $item_list);
        return $block;
      } // if

  } // switch
}