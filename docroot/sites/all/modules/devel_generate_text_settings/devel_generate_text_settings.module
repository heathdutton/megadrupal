<?php

/**
 * @file
 * This module allows you to control the length and format of generated content for text and long text fields.
 */

/**
 * Implements hook_node_presave().
 */
function devel_generate_text_settings_node_presave($node) {
  if (isset($node->devel_generate)) {
    // If there's a title_prefix, use it
    $title_prefix = variable_get('devel_generate_text_settings_node_title_prefix', '');
    if (!empty($title_prefix)) {
      $node->title = trim($title_prefix) . ' ' . $node->title;
    }

    // If there are text_field_settings overrides, apply them
    $defined_text_settings = variable_get('devel_generate_text_settings_node_text_settings', '');
    if ($defined_text_settings) {
      $defined_text_settings = explode("\n", $defined_text_settings);
      $instances = field_info_instances('node', $node->type);
      foreach ($defined_text_settings as $def) {
        $def = array_map('trim', explode(',', $def));
        if (isset($instances[$def[0]])) {
          $field = field_info_field($def[0]);
          devel_generate_text_settings_apply_node_text_settings_to_field($node, $field, $instances[$def[0]], $def);
        }
      }
    }
  }
}

/**
 * Generates new values for a field based on the settings set in the admin
 *
 * @param object &$node
 *   Node object
 * @param array $field
 *   Field definition
 * @param array $instance
 *   Instance of a field
 * @param $def
 *   Devel text settings definition for the field
 */
function devel_generate_text_settings_apply_node_text_settings_to_field(&$node, $field, $instance, $def) {
  // If this is a multiple-upload field, we'll need to loop through each item
  switch ($field['cardinality']) {
    case FIELD_CARDINALITY_UNLIMITED:
      $max = rand(0, 3); // just an arbitrary number for 'unlimited'
      break;
    default:
      $max = $field['cardinality'] - 1;
      break;
  }

  $treat_as_title = (isset($def[4]) && strtolower($def[4]) == 'true') ? TRUE : FALSE;

  $field_result = array();

  // Loop through each
  for ($i = 0; $i <= $max; $i++) {
    $field_result[$i]['value'] = '';

    // Determine and save the format for the text field
    if (!empty($instance['settings']['text_processing'])) {
      $formats = filter_formats();
      $field_result[$i]['format'] = array_rand($formats);
    }
    else {
      $field_result[$i]['format'] = filter_fallback_format();
    }

    if (empty($field['settings']['max_length'])) {
      // Textarea handling
      if ($def[1] == 'char') {
        // Limit number of characters
        // Generate greeking (words) to ensure we will have enough characters to fulfill max character count
        // This means if every word was only 2 characters we'd still have enough. It might be overkill, but this will always work.
        $field_result[$i]['value'] = substr(devel_create_greeking(floor($def[3] / 2), $treat_as_title), 0, mt_rand($def[2], $def[3]));
      }
      elseif ($def[1] == 'word') {
        // Limit number of words
        // Generate greeking for a random number of words between min and max; unfortunately this always returns more than the count we pass
        $devel_greeking = devel_create_greeking(mt_rand($def[2], $def[3]), $treat_as_title);

        // Because $devel_greeking will have more than the desired word count, trim correctly
        $field_result[$i]['value'] = implode(' ', array_slice(explode(' ', $devel_greeking), 0, mt_rand($def[2], $def[3])));
      }
      else {
        // Limit number of paragraphs
        $rand_max = mt_rand($def[2], $def[3]);
        for ($c = 1; $c <= $rand_max; $c++) {
          $field_result[$i]['value'] .= devel_create_para(mt_rand(10, 60)) . "\n\n";
        }
      }

      if ($instance['widget']['type'] == 'text_textarea_with_summary' && !empty($instance['display_summary'])) {
        // TODO summary ought to be a smaller piece of ['value']
        // TODO could be my setup, but $instance['display_summary'] is never set
        $field_result[$i]['summary'] = $field_result[$i]['value'];
      }
    }
    else {
      // Textfield handling
      if ($def[1] == 'char') {
        // Limit number of characters
        // Use the max length from the definition if it's smaller than the field's actual max_length property
        $calc_max_length = ($def[3] < $field['settings']['max_length']) ? $def[3] : $field['settings']['max_length'];

        // Generate greeking (words) to ensure we will have enough characters to fulfill max character count
        // This means if every word was only 2 characters we'd still have enough. It might be overkill, but this will always work.
        $field_result[$i]['value'] = substr(devel_create_greeking(floor($calc_max_length / 2), $treat_as_title), 0, mt_rand($def[2], $calc_max_length));
      }
      else {
        // Limit number of words (can't handle paragraphs for textfields, so assume "words")
        // Generate greeking for a random number of words between min and max; unfortunately this always returns more than the count we pass
        $devel_greeking = devel_create_greeking(mt_rand($def[2], $def[3]), $treat_as_title);

        // Because $devel_greeking will have more than the desired word count, trim correctly, then trim to field's maximum value
        $field_result[$i]['value'] = substr(implode(' ', array_slice(explode(' ', $devel_greeking), 0, mt_rand($def[2], $def[3]))), 0, $field['settings']['max_length']);
      }
    }
  }

  // Update the node to use the new field value(s)
  $node->{$field['field_name']} = array(
    $field['translatable'] ? $node->language : LANGUAGE_NONE => $field_result,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function devel_generate_text_settings_form_devel_generate_content_form_alter(&$form, &$form_state, $form_id) {
  $form['title_length']['#title'] = t('Maximum number of words in title (excluding <em>title prefix</em> if set below)');

  // Add a new title_prefix field to allow automatic title prefixing (useful for identifying auto-generated content)
  $form['title_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix for title values'),
    '#description' => t('If set, this value will be prepended to the auto-generated node title.'),
    '#default_value' => variable_get('devel_generate_text_settings_node_title_prefix', ''),
    '#weight' => 98,
  );

  // Add a settings field to allow fine-grained control of text and long text fields
  $form['text_field_settings'] = array(
    '#type' => 'textarea',
    '#title' => t('Text field settings'),
    '#description' => t('Control the length and format of generated content for text and long text fields.<ul>' .
        '<li>Configure one field per line</li>' .
        '<li>If the min and max are the same, that exact value will be used</li>' .
        '<li>Set the fifth parameter to "true" to use title formatting (capital words, no punctuation) - only works with <em>char</em> and <em>word</em> counts</li>' .
        '</ul><p><strong>Format:</strong> field_machine_name, count_type, min, max, treat_as_title</p>' .
        '<strong>Examples:</strong><ul>' .
        '<li>Between 100 and 250 characters, with sentences:<ul><li><code>field_blog_preview, char, 100, 250</code></li></ul></li>' .
        '<li>Between 3 and 7 words, no sentences, all words start with capital letter:<ul><li><code>field_program_name, word, 3, 7, true</code></li></ul></li>' .
        '<li>One paragraph, with sentences:<ul><li><code>body, para, 1, 1</code></li></ul></li>' .
        '</ul>'),
    '#default_value' => variable_get('devel_generate_text_settings_node_text_settings', ''),
    '#weight' => 99,
  );

  $form['submit']['#weight'] = 100;

  // Add additional validation and processing to handle the new fields
  $form['#validate'][] = 'devel_generate_text_settings_node_text_settings_validate_callback';
  array_unshift($form['#submit'], 'devel_generate_text_settings_node_text_settings_submit_callback');
}

/**
 * Additional validate callback for the devel_generate_content_form
 */
function devel_generate_text_settings_node_text_settings_validate_callback($form, &$form_state) {
  $defined_text_settings = explode("\n", $form_state['values']['text_field_settings']);

  // Get all text fields in the database
  $query = db_query('SELECT field_name, type FROM {field_config}');
  $all_fields = $query->fetchAllKeyed(0, 1);

  // Loop through each definition and validate it
  foreach ($defined_text_settings as $def) {
    $def = array_map('trim', explode(',', $def));

    // Validate the count type
    if ($def[1] != 'char' && $def[1] != 'word' && $def[1] != 'para') {
      form_set_error('text_field_settings', t('Text count type must be <em>char</em>, <em>word</em>, or <em>para</em>'));
    }

    // Validate the actual field name and makes sure it's a valid text field type
    if (!isset($all_fields[$def[0]])) {
      form_set_error('text_field_settings', t('%field - Field not found', array('%field' => $def[0])));
    }
    else {
      if ($all_fields[$def[0]] !== 'text' && $all_fields[$def[0]] !== 'text_long' && $all_fields[$def[0]] !== 'text_with_summary') {
        form_set_error('text_field_settings', t('%field - This is not a valid text field', array('%field' => $def[0])));
      }
    }

    // Check parameter values to make sure they're valid
    if ($def[2] < 1) {
      form_set_error('text_field_settings', t('%field - Minimum must be a positive integer', array('%field' => $def[0])));
    }
    if ($def[3] > 255 && $all_fields[$def[0]] == 'text') {
      form_set_error('text_field_settings', t('%field - Text fields, unlike long text fields, cannot have values exceeding 255 characters', array('%field' => $def[0])));
    }
    if ($def[1] == 'para' && $all_fields[$def[0]] == 'text') {
      form_set_error('text_field_settings', t('%field - Text fields, unlike long text fields, cannot have paragraphs', array('%field' => $def[0])));
    }
    if (isset($def[4]) && strtolower($def[4]) != 'true' && strtolower($def[4]) != 'false') {
      form_set_error('text_field_settings', t('%field - The fifth parameter (treat as title) must either be empty, <em>true</em>, or <em>false</em>', array('%field' => $def[0])));
    }
    if (isset($def[4]) && $def[1] == 'para') {
      form_set_error('text_field_settings', t('%field - The fifth parameter (treat as title) does not work with <em>para</em>', array('%field' => $def[0])));
    }
    if ($def[1] == 'para' && ($def[2] > 10 || $def[3] > 10)) {
      form_set_error('text_field_settings', t('%field - You cannot generate more than 10 paragraphs', array('%field' => $def[0])));
    }
  }
}

/**
 * Additional submit callback for the devel_generate_content_form
 */
function devel_generate_text_settings_node_text_settings_submit_callback($form, &$form_state) {
  variable_set('devel_generate_text_settings_node_title_prefix', $form_state['values']['title_prefix']);
  variable_set('devel_generate_text_settings_node_text_settings', $form_state['values']['text_field_settings']);
}
