<?php
/**
 * @file
 * Has functions which generates the list of all the images and hook_cron().
 */

/**
 * Implements hook_menu().
 *
 * @todo Finds way to create separate section for module under configuration.
 */
function imageproperty_check_menu() {
  $items = array();
  $items['admin/reports/imageproperty-size-check-errors'] = array(
    'title' => 'Image Size Glitches',
    'description' => 'Image Glitches',
    'page callback' => 'imageproperty_check_record',
    'access arguments' => array('image glitches record'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'expanded' => TRUE,
  );
  $items['admin/reports/imageproperty-size-check-errors/size'] = array(
    'title' => 'Image Size Glitches',
    'description' => 'Image Glitches',
    'access arguments' => array('image glitches record'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/reports/imageproperty-size-check-errors/aspect-ratio'] = array(
    'title' => 'Image Glitches Aspect Ratio',
    'description' => 'Image Glitches',
    'page callback' => 'imageproperty_check_ratio_check_record',
    'access arguments' => array('image glitches record'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/reports/imageproperty-size-check-errors/imageproperty-check-settings'] = array(
    'title' => 'Memory size per style',
    'description' => 'Size limit configuration per Image style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imageproperty_check_admin_form'),
    'access arguments' => array('image glitches record'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'imageproperty_check.admin.inc',
  );
  $items['admin/reports/imageproperty-size-check-errors/pager-cron-config'] = array(
    'title' => 'Configuration for Pager and Cron job',
    'description' => 'Pager and Cron Job hours configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imageproperty_check_pager_config_form'),
    'access arguments' => array('image glitches record'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'imageproperty_check.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function imageproperty_check_permission() {
  return array(
    'image glitches record' => array(
      'title' => t('image glitches record'),
      'description' => t('Listing of all the images which exceed the maximum
        memory size limit'),
    ),
  );
}

/**
 * Returns the list of images which exceed maximum memory size of each preset.
 *
 * @return form
 *   Returns form with button+images which exceed maximum memory size of preset
 */
function imageproperty_check_record() {
  $output = "";
  $f = drupal_get_form('imageproperty_checkbutton_form');
  $output = render($f);
  db_delete('imageproperty_check')
     ->execute();
  $list_image_style = image_styles();
  foreach ($list_image_style as $key => $value) {
    $image_info = "";
    $images = file_scan_directory('public://styles/' . $key, '/.*/');
    $imageproperty_check_type = variable_get('imageproperty_check_type' . $key, 100);
    if ($imageproperty_check_type != 0) {
      foreach ($images as $uri) {
        $image_info = image_get_info($uri->uri);
        $image_size = ($image_info['file_size']) / 1000;
        if ($image_size > $imageproperty_check_type) {
          db_insert('imageproperty_check')
            ->fields(array(
              'image_name' => $uri->name,
              'image_size' => $image_info['file_size'],
              'image_path' => $uri->uri,
              'image_filename' => $uri->filename,
            ))->execute();
        }
      }
    }
  }
  $header = array(
    t('Image id'),
    t('Image name'),
    t('Size'),
    t('Location of the file'),
  );
  $rows = array();
  $pager = variable_get('imageproperty_check_pager', 10);
  $query = db_select('imageproperty_check', 'ip')
    ->fields('ip', array('image_id', 'image_name', 'image_size', 'image_path'));
  $result = $query->extend('PagerDefault')
    ->limit($pager);
  $answer = $result->execute()->fetchAll();
  foreach ($answer as $row) {
    $rows[] = array(
      $row->image_id,
      $row->image_name,
      format_size($row->image_size),
      $row->image_path,
    );
  }
  $check = db_select('imageproperty_check', 'ip')
    ->fields('ip', array('image_id', 'image_name', 'image_size', 'image_path'))
    ->execute()->fetchAll();
  if (!$check) {
    $output .= "<br />";
    $output .= t('There are no images with glitches in the memory size
      because no maximum image size is been set for image presets. You can
      set the values for the maximum memory size of each image preset
      style from ') .
    l(t('here'), 'admin/reports/imageproperty-size-check-errors/imageproperty-check-settings');
    $output .= "<br />";
  }
  $output .= "<br />";
  $output .= t("<h3>Images which exceed certain size limit </h3>");
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('style' => 'width:1000px'),
    ));
  $output .= theme('pager');
  return $output;
}

/**
 * Implements hook_cron().
 */
function imageproperty_check_cron() {
  $body = "";
  $body .= t("This mail is to inform you that there are some images which exceed
  the maximum memory size specified for each image style.Large size images
  increase the loading time of the page which also hampers the performance of
  site. ");
  $body .= nl2br("\n");
  imageproperty_check_record();
  $query = db_select('imageproperty_check', 'ip')
          ->fields('ip', array(
            'image_id',
            'image_name',
            'image_size',
            'image_path',
            ))
          ->execute()
          ->fetchAllAssoc('image_id');
  $header = array(
    t('Image id'),
    t('Image name'),
    t('Image size'),
    t('Image path'),
  );
  if ($query) {
    $valid_email = "";
    $from = "";
    $from = variable_get('site_mail');
    foreach ($query as $row) {
      $rows[] = array(
        'image_id' => $row->image_id,
        'image_name' => $row->image_name,
        'image_size' => $row->image_size,
        'image_path' => $row->image_path,
      );
    }
    if (module_exists('mimemail') && module_exists('htmlmail')) {
      $body .= theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array('style' => 'width:600px'),
        ));
    }
    else {
      foreach ($rows as $value) {
        $body .= "Image Name : " . $value['image_name'] . nl2br("\n");
        $body .= "Image Size : " . $value['image_size'] . nl2br("\n");
        $body .= "Image Path : " . $value['image_path'] . nl2br("\n");
        $body .= nl2br("\n");
      }
    }
    $params = array(
      'body' => $body,
      'subject' => t('Warning message for large memory size images'),
    );
    $key_mail = 'imageproperty_check_mail_key';
    $role_id_admin = db_select('role', 'r')
                    ->fields('r', array('rid'))
                    ->condition('name', 'administrator')
                    ->execute()
                    ->fetchAssoc();
    $admins = db_select('users_roles', 'ur');
    $admins->innerJoin('users', 'u', 'u.uid=ur.uid');
    $admins->fields('u', array('mail'))
            ->condition('rid', $role_id_admin['rid']);
    $result = $admins->execute()->fetchAll();
    foreach ($result as $key => $value) {
      $valid_email = $result[$key]->mail;
      drupal_mail('imageproperty_check', $key_mail, $valid_email, 'en', $params, $from, TRUE);
    }
  }
}

/**
 * Returns the list images which exceed the maximum memory size of each preset.
 *
 * Callback for drupal_get_form which is the callback for imagesize_check_record
 *
 * @return form
 *   Returns form with submit having functionality of running cron manually
 * @see imagesize_checkbutton_form_submit()
 */
function imageproperty_checkbutton_form() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run cron manually'),
  );
  $form['#submit'][] = 'imageproperty_checkbutton_form_submit';
  return $form;
}

/**
 * Submit handler of the form +Redirects to page which runs the cron.
 */
function imageproperty_checkbutton_form_submit($form, &$form_state) {
  global $base_url;
  drupal_goto($base_url . '/admin/reports/status/run-cron');
}

/**
 * Implements hook_mail().
 */
function imageproperty_check_mail($key, &$message, $params) {
  switch ($key) {
    case 'imageproperty_check_mail_key':
      $message['subject'] = $params['subject'];
      $message['body'] = array($params['body']);
      break;
  }
}
/**
 * Integration with pasc module for enhancing the performance.
 */
function imageproperty_check_checklistapi_checklist_info() {
  $definitions = array();
  if (module_exists('pasc')) {
    $definitions['pasc']['imagepropertycheck'] = array(
      '#title' => t('Imageproperty check'),
      'enabled_imageproperty_check' => array(
        '#title' => t('Enabled Imageproperty check.'),
        '#default_value' => 1,
        'config_page' => array(
          '#text' => t('Configure'),
          '#path' => 'admin/reports/imageproperty-size-check-errors/imageproperty-check-settings',
        ),
        'more_info' => array(
          '#text' => t('More info'),
          '#path' => 'http://drupal.org/sandbox/neetumorwani/2086453',
        ),
      ),
    );
  }
  else {
    $definitions['pasc']['imagepropertycheck'] = array(
      '#title' => t('Imageproperty check'),
      'download_imageproperty_check' => array(
        '#title' => t('Download Imageproperty check.'),
        '#default_value' => 0,
        'download_page' => array(
          '#text' => t('Download'),
          '#path' => 'http://drupal.org/project/pasc',
        ),
        'enable_page' => array(
          '#text' => t('Enable'),
          '#path' => 'admin/modules',
        ),
      ),
    );
  }
  return $definitions;
}

/**
 * Function to update image aspect ratio report.
 */
function imageproperty_check_update_aspect_ratio_report() {
  db_delete('imageproperty_check_aspect_ratio')
     ->execute();
  $query = db_select('file_managed');
  $query->fields('file_managed', array('uri', 'fid'))
        ->condition('file_managed.type', 'image');
  $files_managed = $query->execute()->fetchAllKeyed();
  $query = db_select('file_usage');
  $query->fields('file_usage', array('fid', 'count'));
  $files_usage = $query->execute()->fetchAllKeyed();
  $list_image_style = image_styles();
  $original_all_images = file_scan_directory('public://', '/.*\.(png|jpg|JPG)$/');
  $options = array('min_depth' => 1);
  $original_subdirectory_images = file_scan_directory('public://', '/\.(png|jpg|JPG)$/', $options);
  $file_images = array_diff_key($original_all_images, $original_subdirectory_images);
  foreach ($list_image_style as $image_style => $value) {
    $image_info = "";
    $images = file_scan_directory('public://styles/' . $image_style, '/.*/');
    foreach ($images as $uri) {
      $image_info = image_get_info($uri->uri);
      if (array_key_exists('public://' . $uri->filename, $file_images)) {
        $fid = $files_managed['public://' . $uri->filename];
        $usage_count = (isset($files_usage[$fid])) ? $files_usage[$fid] : 0;
        $image_original_info = image_get_info('public://' . $uri->filename);
        $orig_aspect_ratio = ($image_original_info['width'] / $image_original_info['height']);
        $image_style_aspect_ratio = $image_info['width'] / $image_info['height'];
        if ($image_style_aspect_ratio > $orig_aspect_ratio) {
          $diff = ($image_style_aspect_ratio - $orig_aspect_ratio) * 100 / $orig_aspect_ratio;
        }
        else {
          $diff = ($orig_aspect_ratio - $image_style_aspect_ratio) * 100 / $orig_aspect_ratio;
        }
        if ($diff > 1 && $usage_count != 0) {
          db_insert('imageproperty_check_aspect_ratio')
          ->fields(array(
            'image_name' => $uri->name,
            'fid' => $fid,
            'usage_count' => $usage_count,
            'image_original_aspect_ratio' => $orig_aspect_ratio,
            'image_aspect_ratio' => $image_style_aspect_ratio,
            'image_diff' => $diff,
            'image_style' => $image_style,
            'image_path' => file_build_uri($uri->filename),
          ))->execute();
        }
      }
    }
  }
}

/**
 * Form button which updates image aspect ratio.
 */
function imageproperty_check_aspectratio() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update ImageSize Aspect Ratio Report',
  );
  $form['#submit'][] = 'imageproperty_check_update_aspect_ratio_report';
  return $form;
}

/**
 * Function which displays images with original and desired aspect ratio.
 */
function imageproperty_check_ratio_check_record() {
  $form = drupal_get_form('imageproperty_check_aspectratio');
  $output = drupal_render($form);
  $header = array(
    t('Image name'),
    array('data' => t('Usage Count'), 'field' => 'usage_count'),
    array('data' => t('Image Style'), 'field' => 'image_style'),
    t('Original aspect ratio'),
    t('Desired aspect ratio'),
    array('data' => t('Image Diff'), 'field' => 'image_diff' , 'sort' => 'desc'),
    t('Operations'),
  );
  $rows = array();
  $pager = variable_get('imageproperty_check_pager', 10);
  $query = db_select('imageproperty_check_aspect_ratio', 'ip')
    ->fields('ip', array(
      'fid',
      'image_name',
      'usage_count',
      'image_style',
      'image_original_aspect_ratio',
      'image_aspect_ratio',
      'image_diff',
      'image_path',
      ));
  $query = $query->extend('TableSort')
                ->orderByHeader($header);
  $result = $query->extend('PagerDefault')
    ->limit($pager)
    ->addTag('node_access');
  $answer = $result->execute()->fetchAll();
  foreach ($answer as $row) {
    $rows[] = array(
      substr($row->image_name, 0, 60),
      $row->usage_count,
      $row->image_style,
      $row->image_original_aspect_ratio,
      $row->image_aspect_ratio,
      $row->image_diff . '%',
      (module_exists('file_entity') ? l(t('Edit'), "file/$row->fid/edit") . ' | ' . l(t('Usage'), "file/$row->fid/usage") . ' | ' . l(t('Delete'), "file/$row->fid/delete") . ' | ' . l(t("View"), image_style_url($row->image_style, $row->image_path)) : t('Requires File Entity module.')),

    );
  }
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No images with inappropriate image style'),
    ));
  $output .= theme('pager');
  return $output;
}
