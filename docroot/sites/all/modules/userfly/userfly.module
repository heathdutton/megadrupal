<?php
/**
 * Implemenents 3rd party Userfly Javascript Include
 */

/**
 * Implements hook_init().
 */
function userfly_init() {
  // Check settings and determine where to add UserFly
  if (variable_get('userfly_enabled', TRUE) && user_access('access userfly') && _userfly_visibility_pages()) {
    if ($code = variable_get('userfly_embed', NULL)) {
      drupal_add_html_head(array('#markup' => $code . "\r\n", '#type' => 'markup'), 'userfly_embed');
    }
  }
}

/**
 * Implements hook_help().
 */
function userfly_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#userfly':
      $output .= '<p>' . t('Integrates Drupal with the <a href="http://www.userfly.com">userfly</a> usability studies web application.') . '</p>';
    case 'admin/config/userfly':
      if (1 || ! variable_get('userfly_code', NULL)) {
        $output .= '<p>' . t('You must have a userfly account to continue. Signup for your FREE account at <a href="http://www.userfly.com">http://www.userfly.com</a>.') . '</p>';
      }
      if (user_access('configure permissions')) {
        $output .= '<p>' . t('You can configure which roles should be tracked by UserFly by <a href="@a">granting the <em>access userfly</em> permission</a>.', array('@a' => url('admin/user/permissions', array('fragment' => 'module-userfly')))) . '</p>';
      }
      if ($path == 'admin/config/userfly') {
        $output .= '<p>' . t('Enter your UserFly embed code and configure which pages you would like UserFly to be loaded on.') . '</p>';
      }

      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function userfly_permission() {
  return array(
    'configure userfly' => array(
      'title' => t('configure userfly'),
      'description' => t('Configure userfly settings'),
    ),
    'access userfly' => array(
      'title' => t('access userfly'),
      'description' => t('Enables userfly for the allowed roles'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function userfly_menu() {
  $items = array();
  $items['admin/config/system/userfly'] = array(
    'title' => 'UserFly',
    'description' => 'Configure UserFly Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userfly_admin_settings_form'),
    'access arguments' => array('configure userfly'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Userfly administration (system) settings form
 */
function userfly_admin_settings_form($form, &$form_state) {
  // Use shorthand notation (prepend userfly_ later)
  $enabled = variable_get('userfly_enabled', TRUE);
  $embed = variable_get('userfly_embed', NULL);
  $form['userfly_enabled'] = array(
    '#title' => t('Enable Userfly'),
    '#type' => 'checkbox',
    '#default_value' => $enabled,
    '#return_value' => 1,
    '#description' => ($enabled) ? t('Uncheck this box to disable UserFly.') : t('Check this box to enable UserFly.'),
  );
  $form['userfly_embed'] = array(
    '#title' => t('UserFly Embed Code'),
    '#default_value' => $embed,
    '#description' => ($embed) ? t('Paste your userfly account embed code here.') : NULL,
    '#type' => 'textarea',
  );

  $access = user_access('use PHP for tracking visibility');
  $visibility = variable_get('userfly_visibility', 0);
  $pages = variable_get('userfly_pages', '');

  $form['page_vis_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('UserFly visibility settings'),
    '#collapsible' => TRUE,
  );

  if ($visibility == 2 && !$access) {
    $form['page_vis_settings']['userfly_visibility'] = array(
      '#type' => 'value',
      '#value' => 2,
    );
    $form['page_vis_settings']['userfly_pages'] = array(
      '#type' => 'value',
      '#value' => $pages,
    );
  }
  else {
    $options = array(t('Add to every page except the listed pages.'), t('Add to the listed pages only.'));
    $description = t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>'));

    if ($access) {
      $options[] = t('Add if the following PHP code returns <code>TRUE</code> (PHP-mode, experts only).');
      $description .= ' ' . t('If the PHP-mode is chosen, enter PHP code between %php. Note that executing incorrect PHP-code can break your Drupal site.', array('%php' => '<?php ?>'));
    }
    $form['page_vis_settings']['userfly_visibility'] = array(
      '#type' => 'radios',
      '#title' => t('Add tracking to specific pages'),
      '#options' => $options,
      '#default_value' => $visibility,
    );
    $form['page_vis_settings']['userfly_pages'] = array(
      '#type' => 'textarea',
      '#title' => t('Pages'),
      '#default_value' => $pages,
      '#description' => $description,
      '#wysiwyg' => FALSE,
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function userfly_theme() {
  return array(
    'userfly_embed_code' => array(
      'variables' => array('code' => NULL),
    ),
  );
}

/**
 * Theme userfly output. Allow only <script> tags.
 */
function theme_userfly_embed_code($variables) {
  $code = $variables['code'];
  return strip_tags($code, '<script>');
}

/**
 * Based on visibility setting this function returns TRUE if GA code should
 * be added to the current page and otherwise FALSE.
 */
function _userfly_visibility_pages() {
  static $page_match;

  // Cache visibility setting in hook_init for hook_footer.
  if (!isset($page_match)) {

    $visibility = variable_get('userfly_visibility', 0);
    $pages = variable_get('userfly_pages', '');

    // Match path if necessary.
    if (!empty($pages)) {
      if ($visibility < 2) {
        $path = drupal_get_path_alias($_GET['q']);
        // Compare with the internal and path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the block is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      else {
        if (module_exists('php')) {
          $page_match = php_eval($pages);

        }
      }
    }
    else {
      $page_match = TRUE;
    }
  }
  return $page_match;
}
