<?php

/**
 * @file
 * Enables the sports pickem module.
*/


/*
 * GLOBALS
 */

global $_PICKEM_MY_LEAGUES;
$_PICKEM_MY_LEAGUES = array();

// Define pick_lock constants
define('PICKEM_PICK_LOCK_WEEK', 0);
define('PICKEM_PICK_LOCK_GAME', 1);

// Configure scoring engines.
define('PICKEM_TYPE_WIN_LOSS', 0);
define('PICKEM_TYPE_SPREAD', 1);
define('PICKEM_TYPE_SCORE_DIFF', 2);
define('PICKEM_TYPE_WIN_LOSS_TIEBREAK', 3);
define('PICKEM_TYPE_CONFIDENCE', 4);
// Keep a count so we can load all of them.
define('PICKEM_SCORING_ENGINE_COUNT', 5);

// Include utility functions.
require_once 'pickem.inc';


/**
 * Implementation of hook_help().
 */
 function pickem_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'pickem/%/mypicks':
      $output .= '<p>' . t('Click on week number to make picks.') . '</p>';
      break;
    case 'admin/pickem':
      $output .= '<p>' . t("Here is some general information regarding how this module is set up.") . '</p><ul>';
      $output .= '<li>' . t("A game set is a collection of teams, weeks, and games.") . '</li>';
      $output .= '<li>' . t("Each league may only have one game set.") . '</li>';
      $output .= '<li>' . t("Each user may be a member of more than one league.") . '</li>';
      $output .= '<li>' . t("The weeks list controls when the pick cut-off occurs.") . '</li>';
      $output .= '</ul>';
      break;
    case 'admin/pickem/games/%':
      $output .= '<p>' .
        t('In order to add games, you need to have weeks and teams already entered.') . '</p>';
      break;
    case 'admin/pickem/games/%/edit/%':
      $output .= '<p>' .
        t("Enter a whole week's worth of scores on the admin/pickem/leagues scores pages.") .
      '</p>';
      break;
    case 'admin/pickem/leagues':
      $output .= '<p>' .
        t('Manage your league list.  A league is a group of users who compete against each other.
           They will share a standings page, a rules node, and a forum for chatting.') . '</p>';
      break;
    case 'admin/pickem/leagues/edit/%':
      $output .= '<p>' . t('If you want a chat forum and the selection box is empty, you\'ll need to enable the forum module and create a forum first.') . '</p>';
      break;
    case 'admin/pickem/picks':
      $output .= '<p>' . t('Here is where you can override a users picks at the descretion of the commisioner (special circumstances) Choose a league then choose a user and then proceed to the pick set.') . '</p>';
      break;
    case 'admin/pickem/scores/%':
      $output .= '<p>' . t('After each game/week, enter the scores here.  Click on a week number to update scores for that week.') . '</p>';
      break;
    case 'admin/pickem/teams':
      $output .= '<p>' . t('Manage the global team list.  This one table is used for all leagues.') . '</p>';
      $output .= '<p>' . t('NOTE: In most lists the abbrev is used first, but if empty, the name is used.') . '</p>';
      break;
    case 'pickem/%/team_power':
      $output .= '<p>' . t('vPower&trade; is a scoring system based on winning percentage, strength of schedule, scoring percentage, and win-streak.  If a good team scores a lot of points against a bad team they get a smaller bonus.  The scale is normalized from 0(worst) to 100(best).') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_init().
 */
function pickem_init() {
  global $_PICKEM_MY_LEAGUES;
  $_PICKEM_MY_LEAGUES = get_my_leagues();
}

/**
 * Implementation of hook_menu().
 */
function pickem_menu() {
  global $user;

  $items = array();
  $leagues = get_leagues();
  if (count($leagues) > 0) {
    $items['pickem'] = array(
      'title' => 'Pickem',
      'page callback' => 'pickem_league_router',
      'access arguments' => array('access pickem'),
      'weight' => -10,
    );
  }

  foreach($leagues as $l) {
    $items['pickem/' . $l->lid] = array(
      'title' => $l->name,
      'page callback' => 'league_page',
      'page arguments' => array($l),
      'access callback' => 'pickem_league_access',
      'access arguments' => array($l),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'pickem.league.page.inc'
    );
  }

  $items['pickem/%league/join'] = array(
    'page callback' => 'join_league',
    'page arguments' => array(1),
    'access arguments' => array('join leagues'),
    'type' => MENU_CALLBACK,
  );
  $items['pickem/%league/leave'] = array(
    'page callback' => 'leave_league',
    'page arguments' => array(1),
    'access arguments' => array('join leagues'),
    'type' => MENU_CALLBACK,
  );

  $items['pickem/%league/standings'] = array(
    'page callback' => 'standings_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.standings.page.inc'
  );

  $items['pickem/%league/summary/%week'] = array(
    'title' => 'Pick Summary',
    'page callback' => 'pick_summary_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.pick.summary.page.inc'
  );

  $items['pickem/%league/grid'] = array(
    'title' => 'Schedule Grid',
    'page callback' => 'schedule_grid_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.schedule.grid.page.inc'
  );


  // Charts
  $items['pickem/%league/chart1'] = array(
    'title' => 'Chart uses own title',
    'title callback' => 'blank_title_callback',
    'page callback' => 'chart_hi_low_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.charts.page.inc'
  );
  $items['pickem/%league/chart1/%user'] = array(
    'title' => 'Chart uses own title',
    'title callback' => 'blank_title_callback',
    'page callback' => 'chart_hi_low_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.charts.page.inc'
  );
  $items['pickem/%league/chart2'] = array(
    'title' => 'Chart uses own title',
    'title callback' => 'blank_title_callback',
    'page callback' => 'chart_team_pickability_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.charts.page.inc'
  );
  $items['pickem/%league/chart2/%'] = array(
    'title' => 'Chart uses own title',
    'title callback' => 'blank_title_callback',
    'page callback' => 'chart_team_pickability_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.charts.page.inc'
  );
  $items['pickem/%league/chart3/%'] = array(
    'title' => 'Chart uses own title',
    'title callback' => 'blank_title_callback',
    'page callback' => 'chart_team_scoring_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.charts.page.inc'
  );

  $items['pickem/%league/team_stats'] = array(
    'title' => 'Team Stats',
    'page callback' => 'team_stats_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.team.stats.page.inc'
  );

  $items['pickem/%league/team_power'] = array(
    'title' => 'Team vPower Rankings',
    'page callback' => 'team_power_page',
    'page arguments' => array(1),
    'access arguments' => array('access pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.team.power.page.inc'
  );

  $items['pickem/%league/mypicks'] = array(
    'page callback' => 'mypicks_all_page',
    'page arguments' => array(1),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.mypicks.page.inc'
  );

  $items['pickem/%league/mypicks/%week'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mypicks_week_form', 1, 3),
    'access arguments' => array('play pickem'),
    'type' => MENU_CALLBACK,
    'file' => 'pickem.mypicks.page.inc'
  );


  // admin menus, 'file' => 'pickem.admin.inc',
  $items['admin/pickem'] = array(
    'title' => 'Pickem',
    'description' => 'Run your own pickem leagues.',
    'page callback' => 'pickem_overview_page',
    'access arguments' => array('administer pickem'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'pickem.admin.inc'
  );

  // Global Settings
  $items['admin/pickem/global_settings'] = array(
    'title' => 'Global Settings',
    'description' => 'Configure global pickem settings.  Valid across all leagues.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_settings'),
    'access arguments' => array('administer pickem'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'pickem.admin.inc'
  );


  // GAMESETS
  $items['admin/pickem/gamesets'] = array(
    'title' => 'Game Sets',
    'description' => 'Manage the team list and game schedule.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gamesets_list'),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => -2,
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/pickem/gamesets/list'] = array(
    'title' => 'List Game Sets',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/pickem/gamesets/add'] = array(
    'title' => 'Add Game Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gameset_edit', 'add', NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/pickem/gamesets/edit/%gameset'] = array(
    'title' => 'Edit Game Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gameset_edit', 'edit', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/pickem/gamesets/import'] = array(
    'title' => 'Import Game Set',
    'description' => 'Load teams and/or game schedules if you are lucky enough to have an import file.',
    'page callback' => 'page_admin_data_import',
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'file' => 'pickem.admin.gameset.io.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/pickem/gamesets/export/%gameset'] = array(
    'title' => 'Export Game Set',
    'page callback' => 'export_gameset',
    'page arguments' => array(4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.gameset.io.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/pickem/gamesets/delete/%gameset'] = array(
    'title' => 'Delete Game Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_gameset_delete_confirm', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK
  );

  // TEAMS, gets linked into the game sets list
  $items['admin/pickem/teams/%gameset'] = array(
    'title' => 'Teams',
    'description' => 'Manage your global teams list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_teams_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => -1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/teams/%gameset/list'] = array(
    'title' => 'List Teams',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/teams/%gameset/add'] = array(
    'title' => 'Add Team',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_team_edit', 'add', 3, NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/teams/%gameset/edit/%team'] = array(
    'title' => 'Edit Team',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_team_edit', 'edit', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/teams/%gameset/delete/%team'] = array(
    'title' => 'Delete Team',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_team_delete_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );



  // WEEKS, gets linked into the game sets list
  $items['admin/pickem/weeks/%gameset'] = array(
    'title' => 'Weeks',
    'description' => 'Manage your weeks.  Used for weekly pick cutoff.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_weeks_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/weeks/%gameset/list'] = array(
    'title' => 'List Weeks',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/weeks/%gameset/add'] = array(
    'title' => 'Add Week',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_week_edit', 'add', 3, NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/weeks/%gameset/edit/%week'] = array(
    'title' => 'Edit Week',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_week_edit', 'edit', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/weeks/%gameset/delete/%week'] = array(
    'title' => 'Delete Week',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_week_delete_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // GAMES, gets linked into the weeks list
  $items['admin/pickem/games/%week'] = array(
    'title' => 'Games',
    'description' => 'Manage your games (who plays who).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_games_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => -1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/games/%week/list'] = array(
    'title' => 'List Games',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/games/%week/add'] = array(
    'title' => 'Add Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_game_edit', 'add', 3, NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/games/%week/edit/%game'] = array(
    'title' => 'Edit Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_game_edit', 'edit', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/games/%week/delete/%game'] = array(
    'title' => 'Delete Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_game_delete_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // LEAGUES
  $items['admin/pickem/leagues'] = array(
    'title' => 'Leagues',
    'description' => 'Manage your leagues and assign users.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_leagues_list'),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => -2,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/leagues/list'] = array(
    'title' => 'List Leagues',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/leagues/add'] = array(
    'title' => 'Add League',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_league_edit', 'add', NULL),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/leagues/edit/%league'] = array(
    'title' => 'Edit League',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_league_edit', 'edit', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/pickem/leagues/delete/%league'] = array(
    'title' => 'Delete League',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_league_delete_confirm', 4),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // USERS, gets linked into the leagues list
  $items['admin/pickem/users/%league'] = array(
    'title' => 'League User List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_users_list', 3),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/users/%league/list'] = array(
    'title' => 'List Users',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/users/%league/add'] = array(
    'title' => 'Add User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_users_add', 3),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/pickem/users/%league/remove/%user'] = array(
    'title' => 'Remove User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_users_remove_confirm', 3, 5),
    'access arguments' => array('administer pickem'),
    'file' => 'pickem.admin.inc',
    'type' => MENU_CALLBACK,
  );


  // SCORES, gets linked into the league list
  $items['admin/pickem/scores/%league'] = array(
    'title' => 'Scores List',
    'description' => 'Enter scores',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_scores_list', 3),
    'access arguments' => array('administer pickem'),
    'weight' => -1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/pickem/scores/%league/list'] = array(
    'title' => 'Scores List',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pickem/scores/%league/edit/%week'] = array(
    'title' => 'Edit Scores',
    'description' => 'Enter game scores as they happen.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickem_scores_week_edit', 3, 5),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/pickem/email_league'] = array(
    'title' => 'Send Email',
    'description' => 'Send mass emails to all pickem user\'s or just league members.',
    'page callback' => 'page_admin_email_league',
    'access arguments' => array('administer pickem'),
    'weight' => 8,
    'file' => 'pickem.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Admin picks
  $items['admin/pickem/picks'] = array(
    'title' => 'Picks',
    'description' => 'Fix user\'s picks.  Will you update a user\'s picks after the cutoff?',
    'page callback' => 'admin_picks_router',
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );
  $items['admin/pickem/picks/%league'] = array(
    'title' => 'League',
    'page callback' => 'admin_picks_router',
    'page arguments' => array(3),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );
  $items['admin/pickem/picks/%league/%user'] = array(
    'title' => 'User',
    'page callback' => 'admin_picks_all_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );
  $items['admin/pickem/picks/%league/%user/%week'] = array(
    'title' => 'Picks',
    'page callback' => 'admin_picks_week_page',
    'page arguments' => array(3, 5, 4),
    'access arguments' => array('administer pickem'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pickem.admin.picks.page.inc'
  );

  return $items;
}


/**
 * Implementation of hook_user_insert().
 * This is for sites that DON'T use administrative approval for new accounts.
 * When auto signup is enabled, add user to default leagues and update
 * their pickem user settings.
 */
 function pickem_user_insert(&$edit, $account, $category) {
  $auto_signup = variable_get('pickem_auto_signup_enable', 0);
  $default_leagues = variable_get('pickem_auto_signup_default_league', array());
  foreach ( $default_leagues as $lid ) {
    $league = league_load($lid);
    if ($auto_signup == 1 && $lid != 0 && $edit['status'] == 1) {
      // Add to league.
      $query = "insert into {pickem_users} (uid, lid) values(:uid, :lid)";
      $result = db_query($query, array(':uid' => $account->uid, ':lid' => $lid));
      drupal_set_message(t('Added %account_name to default pickem league %league_name.', array('%account_name' => $account->name, '%league_name' => $league->name)));

      // Add default league user setting and email reminders = 1.
      // This will run for each league with the last league being the new default league
      // for that user.
      pickem_set_user_setting(
        $account->uid,
        $lid,
        1
      );

      // Make sure new user will show up.
      cache_clear_all('pickem_', 'cache', TRUE);
    }
  }
 }


 /**
 * Implementation of hook_user_update().
 * This is for sites that use administrative approval for new accounts.
 * When user is changed from blocked to active and auto signup is enabled,
 * add user to default league and update their pickem user settings.
 */
function pickem_user_update(&$edit, $account, $category) {
  if ( $account->status == 0 && $edit['status'] == 1 ) {
    $auto_signup = variable_get('pickem_auto_signup_enable', 0);
    $default_leagues = variable_get('pickem_auto_signup_default_league', array());
    foreach ( $default_leagues as $lid ) {
      $league = league_load($lid);
      $is_member = is_league_member($league, $account);
      if (!$is_member && $auto_signup == 1 && $lid != 0) {
        $query = "insert into {pickem_users} (uid, lid) values(:uid, :lid)";
        $result = db_query($query, array(':uid' => $account->uid, ':lid' => $lid));
        drupal_set_message(t('Added %account_name to default pickem league %league_name.', array('%account_name' => $account->name, '%league_name' => $league->name)));

        // Add default league user setting and email reminders = 1.
        // This will run for each league with the last league being the new default league
        // for that user.
        pickem_set_user_setting(
          $account->uid,
          $lid,
          1
        );

      }
    }

    // Make sure user will show up.
    cache_clear_all('pickem_', 'cache', TRUE);
  }
  elseif ( $account->status == 1 && $edit['status'] == 0 ) {
    // Make sure user WON'T show up.
    cache_clear_all('pickem_', 'cache', TRUE);
  }
}


 /**
 * Implementation of hook_form_FORMID_alter().
 * Add pickem related fields to the user profile screen.
 */
function pickem_form_user_profile_form_alter(&$form, &$form_state) {

  if ($form['#user_category'] == 'account' && user_access('user settings')) {
    $account = $form['#user'];
    $settings = pickem_get_user_setting($account->uid);

    $form['pickem'] = array('#type' => 'fieldset',
      '#title' => t('Pickem settings'),
      '#weight' => 5,
      '#collapsible' => TRUE,
    );

    $leagues = get_my_leagues(NULL, $account->uid);
    $options = array();
    $options[0] = t('No default league');
    foreach ($leagues as $l) {
      $options[$l->lid] = $l->name;
    }

    $form['pickem']['pickem_default_league'] = array(
      '#type' => 'select',
      '#title' => t('Default League'),
      '#default_value' => !empty($settings['default_league']) ? $settings['default_league'] : FALSE,
      '#description' => t('Show this league by default.'),
      '#options' => $options,
    );

    $form['pickem']['pickem_email_reminders'] = array(
      '#type' => 'checkbox',
      '#title' => t('Receive email reminders'),
      '#default_value' => !empty($settings['email_reminders']) ? $settings['email_reminders'] : FALSE,
      '#description' => t('Enable email reminders to be sent to you if you have not picked the current week\'s games.'),
    );

    $form['#submit'][] = 'pickem_form_user_profile_form_submit';  // add submit handler
  }
}


/*
 * User profile form submit handler.
 */
function pickem_form_user_profile_form_submit($form, &$form_state) {
  $account = $form['#user'];
  $settings = $form_state['values'];
  pickem_set_user_setting(
    $account->uid,
    $settings['pickem_default_league'],
    $settings['pickem_email_reminders']
  );

  // Because default league is used in menu links, they need to be rebuilt.
  menu_rebuild();
}


/**
 * Implement hook_permission().
 */
function pickem_permission() {
  return array(
    'administer pickem' => array(
      'title' => t('Administer pickem'),
      'description' => 'Access the pickem administration pages.',
    ),
    'play pickem' => array(
      'title' => t('Play pickem'),
      'description' => t('Allow users to participate and make picks.'),
    ),
    'access pickem' => array(
      'title' => t('Access pickem'),
      'description' => t('View league standings and watch on-going pickem leagues.'),
    ),
    'join leagues'  => array(
      'title' => t('Join leagues'),
      'description' => t('Allow users to join pickem leagues without an administrator\' help.'),
    ),
    'user settings'  => array(
      'title' => t('User settings'),
      'description' => t('Allow users to change their own email preferences or default league.'),
    ),
  );
}

/**
 * Implementation of hook_cron().
 */
function pickem_cron() {

  // Since cron only sends out the reminder email, skip it entirely if reminders are turned off.
  if ( variable_get('pickem_default_email_reminders', 1) == 0 ) {
    return;
  }

  $now_time = time();
  $query = 'select pw.wid, pw.first_gamestart, (pw.first_gamestart - :now_time) / 86400 as day_diff, pu.uid, l.lid, count(pp.pid) as picks, count(g.gid) as games FROM {pickem_games} g INNER JOIN {pickem_weeks} pw ON pw.wid=g.wid inner join {pickem_leagues} l on l.gsid=pw.gsid inner join {pickem_users} pu on pu.lid=l.lid left outer join {pickem_picks} pp on pp.uid=pu.uid and pp.lid=l.lid and pp.gid=g.gid where first_gamestart > :now_time group by pw.wid, pw.first_gamestart, pu.uid, l.lid order by first_gamestart';
  $result = db_query($query, array(':now_time' => $now_time));
  foreach ($result as $record) {
    // send a 0, 1, or 2 day warning
    if ($record->day_diff <= 3 && $record->day_diff >= 0 && $record->picks < $record->games) {
      $user = user_load($record->uid);
      $settings = pickem_get_user_setting($user->uid);

      // send reminder if the user has reminders turned on.
      if ( $settings['email_reminders'] == 1 ) {

        $curr_user = user_load($record->uid);
        $hour_of_day = format_date($now_time, 'custom', 'G', $curr_user->timezone);

        // Don't send the email before 8am in user's local timezone.
        if ($hour_of_day >= 8) {
          // Check to see if they have already been reminded.
          $row = db_select('pickem_mail', 'm')
            ->fields('m', array('id'))
            ->condition('process_name', 'missing pick warning')
            ->condition('process_point', 'wid-' . $record->wid . ' days-' . floor($record->day_diff))
            ->condition('uid', $record->uid)
            ->condition('lid', $record->lid)
            ->execute()
            ->fetchAssoc();
          if (!isset($row['id'])) {
            // Add row to the pickem_email to prevent dups on next cron run
            db_insert('pickem_mail')
            ->fields(array(
              'process_name' => 'missing pick warning',
              'process_point' => 'wid-' . $record->wid . ' days-' . floor($record->day_diff),
              'uid' => $record->uid,
              'lid' => $record->lid,
              'email' => $user->mail,
              'sent' => time()
            ))
            ->execute();

            // Send actual email.
            $nice_date = date('l, F j, Y \a\t g:i a', $record->first_gamestart) . '(' . date_default_timezone_get() . ")";
            email_warning($user, $record->wid, $nice_date, ($record->games - $record->picks) , $record->lid);
          }
        }
      }
    }
  }
}


/**
 * Implementation of hook_theme().
 */
function pickem_theme() {
  return array(

    'standings' => array(
      'function' => 'theme_standings',
      'variables' => array('league' => NULL),
      'file' => 'pickem.standings.page.inc',
    ),
    'mypicks_all' => array(
      'variables' => array('league' => NULL),
      'file' => 'pickem.mypicks.page.inc',
    ),
    'mypicks_week_form' => array(
      'function' => 'theme_mypicks_week_form',
      'render element' => 'form',
      'file' => 'pickem.mypicks.page.inc',
    ),
    'admin_picks_all_page' => array(
      'function' => 'theme_admin_picks_all_page',
      'variables' => array('league' => NULL, 'account' => NULL),
      'file' => 'pickem.admin.picks.page.inc',
    ),
    'admin_picks_week_form' => array(
      'function' => 'theme_admin_picks_week_form',
      'render element' => 'form',
      'file' => 'pickem.admin.picks.page.inc',
    ),
    'pickem_scores_list' => array(
      'function' => 'theme_pickem_scores_list',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'pickem_gamesets_list' => array(
      'function' => 'theme_pickem_gamesets_list',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'pickem_teams_list' => array(
      'function' => 'theme_pickem_teams_list',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'pickem_weeks_list' => array(
      'function' => 'theme_pickem_weeks_list',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'pickem_games_list' => array(
      'function' => 'theme_pickem_games_list',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'pickem_leagues_list' => array(
      'function' => 'theme_pickem_leagues_list',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'pickem_users_list' => array(
      'function' => 'theme_pickem_users_list',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'pickem_scores_week_edit' => array(
      'function' => 'theme_pickem_scores_week_edit',
      'render element' => 'form',
      'file' => 'pickem.admin.inc',
    ),
    'team_stats' => array(
      'function' => 'theme_team_stats',
      'variables' => array('league' => NULL),
      'file' => 'pickem.team.stats.page.inc',
    ),
    'team_power' => array(
      'function' => 'theme_team_power',
      'variables' => array('league' => NULL),
      'file' => 'pickem.team.power.page.inc',
    ),
    'pick_summary' => array(
      'function' => 'theme_pick_summary',
      'variables' => array('theme_data' => NULL),
      'file' => 'pickem.pick.summary.page.inc',
    ),
    'my_league_stats_block' => array(
      'function' => 'theme_my_league_stats_block',
      'variables' => array('league' => NULL, 'weeks' => NULL, 'totals' => NULL),
    ),
    'leaderboard_block' => array(
      'function' => 'theme_leaderboard_block',
      'variables' => array('league' => NULL, 'totals' => NULL),
    ),
    'weeks_leaderboard_block' => array(
      'function' => 'theme_weeks_leaderboard_block',
      'variables' => array('league' => NULL, 'week' => NULL, 'week_totals' => NULL),
    ),
    'this_weeks_games_block' => array(
      'function' => 'theme_this_weeks_games_block',
      'variables' => array('league' => NULL),
    ),


    // League Dashboard
    'pickem_league' => array(
      'template' => 'pickem-league',
      'variables' => array('content' => NULL, 'league' => NULL),
      'path' => drupal_get_path('module', 'pickem') .'/templates',
    ),

    'league_messages' => array(
      'function' => 'theme_league_messages',
      'variables' => array('league' => NULL),
      'file' => 'pickem.league.page.inc',
    ),
  );
}

function template_preprocess_pickem_league(&$variables) {
  $variables['classes'] = '';
  $variables['attributes'] = '';
  $variables['league_name'] = check_plain($variables['league']->name);

  $variables['content']['league_nav'] = pickem_league_nav($variables['league']);

  // Messages.
  $variables['content']['messages']['#markup'] = theme('league_messages', array('league' => $variables['league']));
}

function pickem_league_nav($league) {
  $content = '<div class="pickem-league-nav">';

  if (user_access('join leagues') && !is_my_league($league)) {
    $content .= '<div>' . l('Join League', 'pickem/' . $league->lid . '/join') .
      ' - ' . t('You may join this league at any time.') . '</div>';
  }

  $content .= '<div class="pickem-league-nav-section"><div class="pickem-league-nav-title">League</div><div>';
  if (is_my_league($league)) {
    $content .= '<div class="pickem-league-nav-item">' . l('My Picks', 'pickem/' . $league->lid . '/mypicks') . '</div>';
  }

  $cur_w = get_current_week($league, FALSE);

  if ($cur_w && $cur_w->wk_number <> '') {
    $content .= '<div class="pickem-league-nav-item">' . l('Pick Summary', 'pickem/' . $league->lid . '/summary/' . $cur_w->wid) . '</div>';
  }

  $content .= '<div class="pickem-league-nav-item">' . l('Standings', 'pickem/' . $league->lid . '/standings') . '</div>';

  if ( $league->rules_node_id != 0 ) {
    $content .= '<div class="pickem-league-nav-item">' . l('Rules and Regs', 'node/' . $league->rules_node_id) . '</div>';
  }

  if (module_exists("forum") && $league->forum_id != 0) {
    $content .= '<div class="pickem-league-nav-item">' . l('Talk and Taunting', 'forum/' . $league->forum_id) . '</div>';
  }

  if ( user_access('administer pickem') && $cur_w && $cur_w->wk_number <> '' ) {
    $content .= '<div class="pickem-league-nav-item">' . l('Update Scores', 'admin/pickem/scores/' . $league->lid . '/edit/' . $cur_w->wid) . '</div>';
  }
  $content .= '</div></div>';

  $content .= '<div class="pickem-league-nav-section"><div class="pickem-league-nav-title">Research</div><div>';
  $content .= '<div class="pickem-league-nav-item">' . l('High/Low', 'pickem/' . $league->lid . '/chart1') . '</div>';
  if ($league->partial_league == 0) {
    if ($league->show_schedule_grid == 1) {
      $content .= '<div class="pickem-league-nav-item">' . l('Schedule Grid', 'pickem/' . $league->lid . '/grid') . '</div>';
    }
    $content .= '<div class="pickem-league-nav-item">' . l('Team Pickability', 'pickem/' . $league->lid . '/chart2') . '</div>';
    $content .= '<div class="pickem-league-nav-item">' . l('Team Win-Loss', 'pickem/' . $league->lid . '/team_stats') . '</div>';
    $content .= '<div class="pickem-league-nav-item">' . l('vPower', 'pickem/' . $league->lid . '/team_power') . '</div>';
  }
  $content .= '</div></div></div>';

  return $content;
}


/**
 * Go to the user's correct league page.  If they are in more than one,
 * display a list so they can choose.
 */
function league_router() {
  global $_PICKEM_MY_LEAGUES;
  global $user;
  $settings = pickem_get_user_setting($user->uid);

  // go to their default league and make sure that they are a member of that league.
  if ( $settings['default_league'] != 0 ) {
    $l = league_load($settings['default_league']);
    if ( is_my_league($l) ) {
      drupal_goto("pickem/" . $settings['default_league']);
    }
  }

  if ( count($_PICKEM_MY_LEAGUES) >= 1 ) {
    drupal_goto("pickem/" . $_PICKEM_MY_LEAGUES[0]->lid);
  }

  drupal_set_title(t("Choose League to View"), PASS_THROUGH);
  $o = get_all_leagues_list();
  return $o;
}


/**
 * Process variables for page.tpl.php.
 * Used for injecting the site random logo when needed.
 */
function pickem_preprocess_page(&$variables) {
  if (variable_get('pickem_random_site_logo', 0) == 0) {
    return;
  }
  $pattern = variable_get('pickem_random_site_logo_pattern', '_100.png');
  $pattern = '/' . str_replace('.', '\.', $pattern) . '/';
  $full_path = drupal_get_path('module', 'pickem') . '/logos';
  $files = array();
  if ( $dir = opendir($full_path) ) {
    while (false !== ($file = readdir($dir))) {
      if (preg_match($pattern, "$file")) {
        $files[] = $file;
      }

    }
    closedir($dir);
  }
  $variables['logo'] = file_create_url($full_path . '/' . $files[array_rand($files)]);
}

function email_warning($user, $week_id, $firstgame, $missing_picks, $league_id) {

  $headers['Content-Type'] = 'text/plain; charset=UTF-8; format=flowed';
  //$headers['Content-Type'] = 'text/html; charset=UTF-8;';

  $week = week_load($week_id);
  $league = league_load($league_id);

  $subject = $league->name . ': Week ' . $week->wk_number . ' picks due!';
  $link = check_url(url("pickem/" . $league_id . "/mypicks/" . $week->wid, array( 'absolute' => TRUE )));

  $body = "Picks Due Before: $firstgame\n\nJust a reminder, you're missing $missing_picks picks for Week " . $week->wk_number . ".\n\n$link";

  $from = variable_get('pickem_commisioner_email', '');
  $headers['From'] = $from;
  //$headers['Bcc'] = $from;

  $to = $user->name . ' <' . $user->mail . '>';

  $params = array();
  $params['headers'] = $headers;
  $params['subject'] = $subject;
  $params['body'] = array($body);

  // $module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE
  $message = drupal_mail('email_warning', 'notice', $to, language_default(), $params);
  if ($message['result'] != 1) {
    watchdog('pickem', 'Error Sending ' . $user->name . ": Week " . $week->wk_name . " Warning");
  }

}


/**
 * implementation of hook_mail().
 */
function email_warning_mail($key, &$message, $params) {
  switch ($key) {
    case 'notice':
      $message['headers'] = $params['headers'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}


/**
 * Requires the jstimer module.
 */
function get_countdown_timer($current_week) {
  $o = '';
  if (module_exists("jstimer")) {
    $o .= t("You have:");
    $o .=  " " . theme('jstimer', array('widget_name' => 'jst_timer', 'widget_args' => array(
             'interval' => $current_week->first_gamestart - time(),
             'format_txt' => '%days% days + %hours%:%mins%:%secs%',
           )));
  }
  return $o;
}


function pickem_block_info() {
  $blocks = array(
    'navigation' => array(
      'info' => t("Pickem league navigation"),
      'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE,
    ),
    'my_league_stats' => array(
      'info' => t("Pickem my league statistics"),
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'pickem/*',
      'cache' => DRUPAL_NO_CACHE,
    ),
    'leaderboard' => array(
      'info' => t("Pickem leaderboard"),
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'pickem/*',
      'cache' => DRUPAL_NO_CACHE,
    ),
    'weeks_leaderboard' => array(
      'info' => t("Pickem this week's leaderboard"),
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'pickem/*',
      'cache' => DRUPAL_NO_CACHE,
    ),
    'weeks_games' => array(
      'info' => t("Pickem this week's games"),
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => 'pickem/*',
      'cache' => DRUPAL_NO_CACHE,
    ),

  );
  return $blocks;
}


function pickem_block_view($delta = '') {
  $block = array();
  $current_lid = 0;
  $current_league = league_load(arg(1));
  if (!$current_league) {
    $current_league = new stdClass;
    $current_league->lid = FALSE;
  }
  switch ($delta) {
    case 'navigation':
      $block['subject'] = t('Pickem leagues');
      $content = '';

      $leagues = array();
      // If you have the join leagues permission, you should see all leagues regardless
      // of the pickem_block_nav_show_only_joined setting.
      if (variable_get('pickem_block_nav_show_only_joined', 0) == 1 && !user_access('join leagues')) {
        $leagues = get_my_leagues();
      }
      else {
        $leagues = get_leagues();
      }

      foreach ($leagues as $lid => $league) {
        if ($league->lid == $current_league->lid) {
          $content .= '<li class="first last expanded active-trail">' . l($league->name, 'pickem/' . $league->lid) . '<ul>';

          if ( is_my_league($league) ) {
            $content .= '<li class="leaf">' . l('My Picks', 'pickem/' . $league->lid . '/mypicks') . '</li>';
          }
          elseif (user_access('join leagues')) {
            $content .= '<li class="leaf">' . l('Join League', 'pickem/' . $league->lid . '/join') . '</li>';
          }

          $cur_w = get_current_week($league, FALSE);

          if ($cur_w && $cur_w->wk_number <> '') {
            $content .= '<li class="leaf">' . l('Pick Summary', 'pickem/' . $league->lid . '/summary/' . $cur_w->wid) . '</li>';
          }

          $content .= '<li class="leaf">' . l('Standings', 'pickem/' . $league->lid . '/standings') . '</li>';

          if ( $league->rules_node_id != 0 ) {
            $content .= '<li class="leaf">' . l('Rules and Regs', 'node/' . $league->rules_node_id) . '</li>';
          }

          if (module_exists("forum") && $league->forum_id != 0) {
            $content .= '<li class="leaf">' . l('Talk and Taunting', 'forum/' . $league->forum_id) . '</li>';
          }

          if ( user_access('administer pickem') && $cur_w && $cur_w->wk_number <> '' ) {
            $content .= '<li class="leaf">' . l('Update Scores', 'admin/pickem/scores/' . $league->lid . '/edit/' . $cur_w->wid) . '</li>';
          }

          $content .= '<li class="first last expanded active-trail">Research<ul class="menu clearfix">';
          $content .= '<li class="first leaf">' . l('High/Low', 'pickem/' . $league->lid . '/chart1') . '</li>';
          if ($league->partial_league == 0) {
            if ($league->show_schedule_grid == 1) {
              $content .= '<li class="leaf">' . l('Schedule Grid', 'pickem/' . $league->lid . '/grid') . '</li>';
            }
            $content .= '<li class="leaf">' . l('Team Pickability', 'pickem/' . $league->lid . '/chart2') . '</li>';
            $content .= '<li class="leaf">' . l('Team Win-Loss', 'pickem/' . $league->lid . '/team_stats') . '</li>';
            $content .= '<li class="last leaf">' . l('vPower', 'pickem/' . $league->lid . '/team_power') . '</li>';
          }
          $content .= '</ul></li></ul></li>';
        }
        else {
          $content .= '<li class="first last collapsed">' . l($league->name, 'pickem/' . $league->lid) . '</li>';
        }
      }

      if (!empty($content)) {
        $block['content'] = '<ul class="dropdown-box">' . $content . '</ul>';
      }
      break;
    case 'my_league_stats':
      if ($league = league_load(arg(1))) {
        $weeks = get_weeks(array('gameset_id' => $league->gsid));
        if (is_my_league($league) && count($weeks) > 0) {
          $totals = get_user_totals($league); //sorted by overall score
          $block['subject'] = t('Stats');
          $block['content'] = theme('my_league_stats_block', array(
            'league' => $league,
            'weeks' => $weeks,
            'totals' => $totals
          ));
        }
      }
      break;
    case 'leaderboard':
      if ($league = league_load(arg(1))) {
        $totals = get_user_totals($league);
        $block['subject'] = t('Leaderboard');
        $block['content'] = theme('leaderboard_block', array(
          'league' => $league,
          'totals' => $totals,
        ));
      }
      break;
    case 'weeks_leaderboard':
      $league = league_load(arg(1));
      $week = get_current_week($league, FALSE);
      if ($week) {
        $week_totals = get_user_totals($league, $week->wid);
        $block['subject'] = l($week->wk_name . ' ' . t('Leaderboard'), 'pickem/' . $league->lid . '/summary/' . $week->wid);
        $block['content'] = theme('weeks_leaderboard_block', array(
          'league' => $league,
          'week' => $week,
          'week_totals' => $week_totals,
         ));
      }
      break;
    case 'weeks_games':
      $league = league_load(arg(1));
      $cur_w = get_current_week($league, FALSE);
      if ($cur_w) {
        $block['subject'] = 'Games(week ' . $cur_w->wk_number . ')';
        $block['content'] = theme('this_weeks_games_block', array('league' => $league));
      }
      break;
  }

  return $block;
}


// Custom block visibility for pickem blocks.
// We don't want to show the league level blocks on links deeper
// than the league page.  Probably want to handle this better.
function pickem_block_list_alter(&$blocks) {
  foreach ($blocks as $key => $block) {
    if ($block->module == 'pickem' && $block->pages == 'pickem/*') {
      // If you have an arg(2) you are too deep, don't show.
      if (arg(2) != '') {
        unset($blocks[$key]);
      }
    }
  }
}


/**
 * Theme function for the my_league_stats_block.
 *
 * @param $variables['league']
 *   A fully loaded league object.
 * @param $variables['weeks']
 *   A weeks array object (get_weeks()).
 * @param $variables['totals']
 *   A totals array (get_user_totals()).
 */
function theme_my_league_stats_block($variables) {
  global $user;
  $league = $variables['league'];
  $weeks = $variables['weeks'];
  $totals = $variables['totals'];

  if (!isset($league) || !$weeks || !isset($totals)) {
    return;
  }

  $rows = array();
  $row = array('data' => array(), 'no_striping' => TRUE);
  $row['data'][] = array('data' => t('Rank:'), 'class' => 'data-title');
  $row['data'][] = array('data' => '#' . $totals[$user->uid]['ranking'], 'class' => 'summary-data');
  $rows[] = $row;

  // If needed, add the points behind after the total points.
  $points = $totals[$user->uid]['total'];
  if ( $totals[$user->uid]['ranking'] > 1 ) {
    $points .= '(+' . $totals[$user->uid]['pts_back'] . ')';
  }
  $row = array('data' => array(), 'no_striping' => TRUE);
  $row['data'][] = array('data' => t('Points:'), 'class' => 'data-title');
  $row['data'][] = array('data' => $points, 'class' => 'summary-data');
  $rows[] = $row;

  if ($totals[$user->uid]['best_week_id'] <> -1) {
      $row = array('data' => array(), 'no_striping' => TRUE);
      $row['data'][] = array('data' => t('High:'), 'class' => 'data-title');
      $row['data'][] = array('data' => 'Week ' . $weeks[$totals[$user->uid]['best_week_id']]->wk_number . '(' . $totals[$user->uid]['weeks'][$totals[$user->uid]['best_week_id']]['total'] . ')', 'class' => 'summary-data');
      $rows[] = $row;
      $row = array('data' => array(), 'no_striping' => TRUE);
      $row['data'][] = array('data' => t('Low:'), 'class' => 'data-title');
      $row['data'][] = array('data' => 'Week ' . $weeks[$totals[$user->uid]['worst_week_id']]->wk_number . '(' . $totals[$user->uid]['weeks'][$totals[$user->uid]['worst_week_id']]['total'] . ')', 'class' => 'summary-data');
      $rows[] = $row;
  }

  $content = array();
  $content[] = array(
    '#markup' => theme('table', array(
      'header' => array(),
      'rows' => $rows,
      ))
  );

  return $content;
}


/**
 * Theme function for the leaderboard block.
 *
 * @param $variables['league']
 *   A fully loaded league object.
 */
function theme_leaderboard_block($variables) {
  global $user;
  $league = $variables['league'];
  $totals = $variables['totals'];

  if (!isset($league)) {
    return;
  }

  $content = array();
  $how_many = variable_get('pickem_block_leaderboard_how_many', 10);
  $user_shown = FALSE;
  $i = 0;

  $rows = array();
  foreach ($totals as $uid => $tot) {
    $u_name = str_replace(' ', '&nbsp;', $tot['name']);
    $row = array('data' => array());
    $row['data'][] = array('data' => '#' . $tot['ranking'], 'class' => 'score');
    $row['data'][] = array('data' =>  theme('username', array('account' => $tot['user_obj'])), 'class' => 'user');
    $row['data'][] = array('data' => $tot['total'], 'class' => 'score');
    $rows[] = $row;
    $i++;
    if ($uid == $user->uid) {
      $user_shown = TRUE;
    }
    if ( $i >= $how_many ) {
      break;
    }
  }

  if (isset($totals[$user->uid]) && $user_shown == FALSE) {
    $uid = $user->uid;
    $tot = $totals[$uid];
    $u_name = str_replace(' ', '&nbsp;', $tot['name']);
    $row = array('data' => array());
    $row['data'][] = array('data' => '#' . $tot['ranking'], 'class' => array('score', 'skipped'));
    $row['data'][] = array('data' =>  theme('username', array('account' => $tot['user_obj'])), 'class' => array('user', 'skipped'));
    $row['data'][] = array('data' => $tot['total'], 'class' => array('score', 'skipped'));
    $rows[] = $row;
  }

  $content['league_leaders'] = array();
  $content['league_leaders'][] = array(
    '#markup' => theme('table', array(
      'header' => array(),
      'rows' => $rows,
      'attributes' => array('class' => array('pickem-league-leaders'))))
  );

  return $content;
}


/**
 * Theme function for the this weeks leaderboard block.
 *
 * @param $variables['league']
 *   A fully loaded league object.
 */
function theme_weeks_leaderboard_block($variables) {
  global $user;
  $league = $variables['league'];
  $week = $variables['week'];
  $week_totals = $variables['week_totals'];

  if (!isset($league)) {
    return;
  }

  $content = array();
  $how_many = variable_get('pickem_block_leaderboard_how_many', 10);
  $user_shown = FALSE;
  $i = 0;
  $rows = array();
  foreach ($week_totals as $uid => $tot) {
    $u_name = str_replace(' ', '&nbsp;', $tot['name']);
    $row = array('data' => array(), 'no_striping' => TRUE);
    $row['data'][] = array('data' =>  theme('username', array('account' => $tot['user_obj'])), 'class' => 'data-title');
    $row['data'][] = array('data' => $tot['total'], 'class' => 'score');
    $rows[] = $row;
    $i++;
    if ($uid == $user->uid) {
      $user_shown = TRUE;
    }
    if ( $i >= $how_many ) {
      break;
    }
  }

  if (isset($week_totals[$user->uid]) && $user_shown == FALSE) {
    $uid = $user->uid;
    $tot = $week_totals[$uid];
    $u_name = str_replace(' ', '&nbsp;', $tot['name']);
    $row = array('data' => array());
    $row['data'][] = array('data' =>  theme('username', array('account' => $tot['user_obj'])), 'class' => array('user', 'skipped'));
    $row['data'][] = array('data' => $tot['total'], 'class' => array('score', 'skipped'));
    $rows[] = $row;
  }


  $content['league_leaders'] = array(
    '#markup' => theme('table', array(
      'header' => array(),
      'rows' => $rows,
    ))
  );

  return $content;
}



/**
 * Theme function for the this week's games block.
 *
 * @param $variables['league']
 *   A fully loaded league object.
 */
function theme_this_weeks_games_block($variables) {
  $content = array();
  $league = $variables['league'];
  $cur_w = get_current_week($league, FALSE);

  if (!isset($league) || $cur_w->wid == "") {
    return;
  }

  $teams = get_teams(array('gameset_id' => $league->gsid));
  $games = get_games(array('week_id' => $cur_w->wid));
  $picked = get_team_totals($league, 'win_lose', $cur_w->wid);
  $rows = array();
  foreach ($games as $gid => $game) {
    $v_perc = ($picked[$game->v_id]['picked_perc'] <> '') ? '(' . $picked[$game->v_id]['picked_perc'] . '%)' : '';
    $h_perc = ($picked[$game->h_id]['picked_perc'] <> '') ? '(' . $picked[$game->h_id]['picked_perc'] . '%)' : '';

    $row = array('data' => array());
    $row['data'][] = array('data' => $game->v_score, 'class' => 'score');
    $row['data'][] = array('data' => $teams[$game->v_id]->short_name . '&nbsp;' . $v_perc, 'class' => 'team');
    $row['data'][] = array('data' => $teams[$game->h_id]->short_name . '&nbsp;' . $h_perc, 'class' => 'team');
    $row['data'][] = array('data' => $game->h_score, 'class' => 'score');
    $rows[] = $row;
  }

  $content['weeks_games'] = array();
  $content['weeks_games'][] = array(
    '#markup' => theme('table', array(
      'header' => array(),
      'rows' => $rows,
      'attributes' => array('class' => array('pickem-weeks-games'))))
  );

  return $content;
}


function get_all_leagues_list() {
  $leagues = get_leagues();
  $content_array = array();
  $content_array['leagues'] = array();
  $seq = 0;
  foreach ($leagues as $l) {
    $content_array['leagues'][$l->lid] = array(
      '#weight' => $seq++,
    );

    $league_name = '';
    if (arg(1) == $l->lid) {
      $league_name .= '* ';
    }
    $league_name .= $l->name;

    $content_array['leagues'][$l->lid][] = array(
      '#markup' => l($league_name, 'pickem/' . $l->lid),
      '#suffix' => ' ',
    );

    $content_array['leagues'][$l->lid][] = array(
      '#markup' => "<br/>",
      '#weight' => 1,
    );
  }
  return $content_array;
}


/**
 * Good General Use Forms
 */
function league_select_form($form, $form_state=NULL) {
  $options = array();
  $leagues = get_leagues();
  foreach ($leagues as $lid => $l) {
    $options[$lid] = $l->name;
  }

  $form['league_select'] = array(
    '#type' => 'select',
    '#title' => t('Select League'),
    '#default_value' => 1,
    '#options' => $options
  );
  $form['op'] = array(
    '#type' => 'button',
    '#value' => t('Choose')
  );
  return $form;
}


function user_select_form($form, $form_state=NULL, $league=NULL, $title='Select user to modify', $not_in_league=0) {

  $users = get_users($league, $not_in_league);
  $user_list = array();
  foreach ($users as $u_id => $user_data) {
    $user_list[$u_id] = $user_data->name;
  }

  $title_str = array(
    'Select user to modify' => t('Select user to modify'),
    'Add user' => t('Add user'),
  );

  $form = array();
  $form['#league'] = $league;
  $form['user_select'] = array(
    '#type' => 'select',
    '#title' => check_plain($title_str[$title]),
    '#options' => $user_list,
  );
  $op = explode(' ', $title);
  $form['op'] = array(
    '#type' => 'button',
    '#value' => t($op[0])
  );
  return $form;
}


/**
 * Implementation of hook_sports_scores().
 *
 * @param $op
 *   A string, either 'game_score_final' or 'game_score_update'.
 * @param $game_arg
 *   An array with game data.
 * @param $sport
 *   A string with 'NFL', 'NBA', etc.
 */
function pickem_sports_scores($op, $game_arg, $sport) {
  // We only support op = 'game_score_final'.
  if ($op != 'game_score_final') {
    return;
  }

  $gamesets = get_gamesets(array('gameset_sport' => $sport));
  foreach ($gamesets as $gsid => $gameset_row) {
    $teams = get_teams(array('gameset_id' => $gsid));
    // Get all games that started at the same time.
    $games = get_games(array('gsid' => $gsid, 'gamestart' => $game_arg['gamestart']));
    foreach ($games as $gid => $game_row) {
      // If the teams match abbrev's match OR team names match.
      if (
        (isset($teams[$game_row->h_id]->tm_abbrev) && isset($teams[$game_row->v_id]->tm_abbrev) &&
          $teams[$game_row->h_id]->tm_abbrev == $game_arg['home_team'] &&
          $teams[$game_row->v_id]->tm_abbrev == $game_arg['visiting_team'])
        ||
        (isset($teams[$game_row->h_id]->tm_name) && isset($teams[$game_row->v_id]->tm_name) &&
          $teams[$game_row->h_id]->tm_name == $game_arg['home_team'] &&
          $teams[$game_row->v_id]->tm_name == $game_arg['visiting_team'])
      ) {

        // If the scores are not yet saved
        if ( !isset($game_row->v_score) || !isset($game_row->h_score) ) {
          $query = "update {pickem_games} set h_score=:h_score, v_score=:v_score where gid=:gid";
          $result = db_query($query, array(':h_score' => $game_arg['home_score'], ':v_score' => $game_arg['visiting_score'], ':gid' => $game_row->gid));
          watchdog('action', 'Pickem score updated from sports scores module; ' . $game_arg['home_team'] . ' ' . $game_arg['home_score'] . ', ' . $game_arg['visiting_team'] . ' ' . $game_arg['visiting_score']);
        }
      }
    }
  }

  // clear pickem_ caches, since you are updating scores.
  cache_clear_all('pickem_', 'cache', TRUE);
}


/**
 * Link callback to join a pickem league.
 *
 * @param $league
 *   A fully loaded league object.
 */
function join_league($league) {
  global $user;

  db_query("insert into {pickem_users} (lid,uid) values (:lid, :uid)", array(':lid' => $league->lid, ':uid' => $user->uid));
  $t_string = t('"%name" was added to league "%league_name".', array('%name' => $user->name, '%league_name' => $league->name));
  drupal_set_message($t_string);
  watchdog('pickem', $t_string, NULL, WATCHDOG_NOTICE);

  // If user has no default league, set it.
  $settings = pickem_get_user_setting($user->uid);
  if ($settings['default_league'] == 0) {
    pickem_set_user_setting(
      $user->uid,
      $league->lid,
      $settings['email_reminders']
    );
  }

  // Clear the pickem_* caches so user will show up on various screens.
  cache_clear_all('pickem_', 'cache', TRUE);

  drupal_goto('pickem/' . $league->lid);
}


/**
 * Link callback to leave a pickem league.
 *
 * @param $league
 *   A fully loaded league object.
 */
function leave_league($league) {
  global $user;

  db_query("delete from {pickem_users} where lid=:lid and uid=:uid", array(':lid' => $league->lid, ':uid' => $user->uid));

  // Clear the pickem_* caches so user will show up on various screens.
  cache_clear_all('pickem_', 'cache', TRUE);

  $t_string = t('"%name" left league "%league_name".', array('%name' => $user->name, '%league_name' => $league->name));
  drupal_set_message($t_string);
  watchdog('pickem', $t_string, NULL, WATCHDOG_NOTICE);

  drupal_goto('pickem');
}


/**
 * Title callback that returns a blank title.
 * Why?, charts use their own titles.
 */
function blank_title_callback($title) {
  return '';
}

function pickem_league_menu_list() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  return theme('node_add_list', array('content' => $content));
}

function pickem_league_access($league) {
  if (variable_get('pickem_block_nav_show_only_joined', 0) == 1 && !user_access('join leagues')) {
    // Limited to their leagues only
    if (is_my_league($league)) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    // Limited only by access pickem permission
    return user_access('access pickem');
  }
}

function pickem_league_router() {
  global $user, $_PICKEM_MY_LEAGUES;
  
  $league_list = array();
  foreach($_PICKEM_MY_LEAGUES as $l) {
    $league_list[$l->lid] = $l;
  }
  
  $settings = pickem_get_user_setting($user->uid);
  if (isset($settings['default_league']) && isset($league_list[$settings['default_league']])) {
    drupal_goto('pickem/' . $settings['default_league']);
  }
  else if (count($league_list) > 0) {
    reset($league_list);
    $first_lid = key($league_list);
    drupal_goto('pickem/' . $first_lid);
  }
  else {
    $leagues = get_leagues();
    reset($leagues);
    $first_lid = key($leagues);
    drupal_goto('pickem/' . $first_lid);
  }
}
