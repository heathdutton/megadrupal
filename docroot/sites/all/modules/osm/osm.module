<?php
/**
 * @file
 * OSM module core.
 */

module_load_include('inc', 'osm');
module_load_include('inc', 'osm', 'osm.widget');

/**
 * Implements hook_help().
 */
function osm_help($path, $arg) {
  switch ($path) {
    case 'admin/help#osm':
      return '<p>' . t('TODO: Documentation') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function osm_menu() {
  $items = array();

  $items['admin/config/services/osm'] = array(
    'title'            => 'OSM API Settings',
    'description'      => 'API Settings for OSM - change the token, base url and id.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('osm_settings'),
    'access arguments' => array('access administration osm'),
    'file'             => 'osm.admin.inc',
  );

  $items['admin/config/services/osm-account'] = array(
    'title'            => 'OSM Account Setup & Resync',
    'description'      => 'Select OSM accounts, resync account items.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('osm_account_manager'),
    'access arguments' => array('access account manager osm'),
    'file'             => 'osm.admin.inc',
  );

  $items['admin/config/services/osm-account/reauthorise'] = array(
    'title'            => 'OSM re-authorise',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('osm_account_reauthorise'),
    'access arguments' => array('access account manager osm'),
    'file'             => 'osm.admin.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['osm/autocomplete'] = array(
    'page callback'    => 'osm_autocomplete',
    'access arguments' => array('access content'),
    'file'             => 'osm.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function osm_permission() {
  return array(
    'access administration osm' => array(
      'title'       => t('Administration access.'),
      'description' => t('Setup OSM account.'),
    ),
    'access account manager osm' => array(
      'title'       => t('Account manager.'),
      'description' => t('Account manager setup.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function osm_theme($existing, $type, $theme, $path) {
  return array(
    'osm_markup_coming_up' => array(
      'variables' => array('delta' => NULL),
    ),
    'osm_markup_block_patrol_point' => array(
      'variables' => array('delta' => NULL),
    ),
    'osm_default_formater' => array(
      'variables' => array(
        'value'        => NULL,
        'num_entries'  => NULL,
        'kind_display' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function osm_block_info() {

  $blocks = array();
  $osm_active_roles = variable_get('osm_active_roles', '');

  if (!is_array($osm_active_roles)) {
    return array();
  }

  foreach ($osm_active_roles as $role) {
    $blocks[$role['section'] . '_' . $role['sectionid'] . '_coming_up'] = array(
      'info' => t('OSM Coming Up: @groupname @sectionname', array(
        '@groupname'   => $role['groupname'],
        '@sectionname' => $role['sectionname'],
      )),
      // 'cache' => DRUPAL_CACHE_GLOBAL,
      // TODO: Remove no cache.
      'cache' => DRUPAL_NO_CACHE,
    );

    $blocks[$role['section'] . '_' . $role['sectionid'] . '_patrol_points'] = array(
      'info' => t('OSM Patrol Points: @groupname @sectionname', array(
        '@groupname'   => $role['groupname'],
        '@sectionname' => $role['sectionname'],
      )),
      // 'cache' => DRUPAL_CACHE_GLOBAL,
      // TODO: Remove no cache.
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function osm_block_configure($delta = '') {
  $form = array();

  $osm_active_roles = variable_get('osm_active_roles', '');

  foreach ($osm_active_roles as $role) {
    if ($delta == $role['section'] . '_' . $role['sectionid'] . '_coming_up') {
      $form = osm_coming_up_block_setting($delta, $role['sectionid']);
    }
    elseif ($delta == $role['section'] . '_' . $role['sectionid'] . '_patrol_points') {
      $form = osm_patrol_points_block_setting($delta, $role['sectionid']);
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function osm_block_save($delta = '', $edit = array()) {

  if (preg_match('@coming_up$@', $delta)) {
    variable_set('oms_' . $delta . '_num_entries', $edit[$delta . '_num_entries']);
    variable_set('oms_' . $delta . '_display', $edit[$delta . '_display']);
    variable_set('oms_' . $delta . '_sectionid', $edit[$delta . '_sectionid']);
    variable_set('oms_' . $delta . '_date_format', $edit[$delta . '_date_format']);
  }
  elseif (preg_match('@patrol_points$@', $delta)) {
    variable_set('oms_' . $delta . '_sectionid', $edit[$delta . '_sectionid']);
  }
}

/**
 * Implements hook_block_view().
 */
function osm_block_view($delta = '') {
  $block = array();

  // Comming up events and programms.
  if (preg_match('@coming_up$@', $delta)) {
    $block['content'] = array(
      '#theme' => 'osm_markup_coming_up',
      '#delta' => $delta,
    );
  }

  // Patrol points table.
  if (preg_match('@patrol_points$@', $delta)) {
    $block['content'] = array(
      '#theme' => 'osm_markup_block_patrol_point',
      '#delta' => $delta,
    );
  }

  return $block;
}

/**
 * Markup Coming Up block.
 */
function theme_osm_markup_coming_up($args = '') {
  $output = '';
  $store_programme = array();

  $osm_active_roles = variable_get('osm_active_roles', '');
  $osm_num_entries  = variable_get('oms_' . $args['delta'] . '_num_entries', 0);
  $osm_display      = variable_get('oms_' . $args['delta'] . '_display', 0);
  $osm_sectionid    = variable_get('oms_' . $args['delta'] . '_sectionid', 0);
  $osm_date_format  = variable_get('oms_' . $args['delta'] . '_date_format', 'date_format_long');

  if (empty($osm_active_roles)) {
    $output .= '<h2>' . t('Not active role is selected') . '</h2>';

    return $output;
  }

  $date_format = array('date_format' => $osm_date_format);
  $termid = $osm_active_roles[$osm_sectionid]['termid'];

  $store_programme = _osm_store_block_programme($osm_active_roles[$osm_sectionid]['sectionid'], $termid, $osm_display, $date_format);

  // This prodecure is need to order the key by date.
  if (!empty($store_programme)) {
    ksort($store_programme);

    $ordered_programme = array();

    foreach ($store_programme as $date) {
      foreach ($date as $programe_event) {
        $ordered_programme[] = array(
          'title'   => $programe_event['title'],
          'date'    => $programe_event['date'],
          'summary' => $programe_event['summary'],
          'prenotes' => $programe_event['location'],
        );
      }
    }

    for ($i = 0; $i <= $osm_num_entries; $i++) {
      if (!empty($ordered_programme[$i])) {

        $output .= '<div class="osm_comingup_event">';
        $output .= '<span class="osm_comingup_date">' . $ordered_programme[$i]['date'] . '</span>';

        if ((strpos(strtolower($ordered_programme[$i]['title']), 'no meeting') !== FALSE) || (strpos(strtolower($ordered_programme[$i]['title']), 'meeting cancelled') !== FALSE)) {
          $output .= '<h4 class="osm_comingup_titlered">' . $ordered_programme[$i]['title'] . '</h4>';
        }
        else {
          $output .= '<h4 class="osm_comingup_title">' . $ordered_programme[$i]['title'] . '</h4>';
        }

        $output .= '<span class="osm_comingup_date">' . $ordered_programme[$i]['prenotes'] . '</span>';
        $output .= '</div>';
      }
      else {
        $output .= '<div class="osm_comingup_event">';
        $output .= '<span>Sorry, there is no programme to display! Please check back soon...</span>';
        $output .= '</div>';
      }
    }
  }
  else {
    // Error message if OSM goes down.
    $output .= '<div class="osm_comingup_event">';
    $output .= '<span>Sorry, there is no upcoming programme activity or event to display. Please refresh or try again later.</span>';
    $output .= '</div>';
  }

  return $output;
}

/**
 * Theme patrol points block.
 *
 * @ingroup themeable.
 */
function theme_osm_markup_block_patrol_point($vars) {
  $section_id = variable_get('oms_' . $vars['delta'] . '_sectionid', 0);
  $output = '';

  if (empty($section_id)) {
    $output .= '<strong>' . t('I miss some ID to search for.') . '</strong>';
    return $output;
  }

  $patrol_points = osm_get_patrol_points($section_id);

  // We don't want empty array running.
  if (is_array($patrol_points) && !empty($patrol_points)) {
    $result = array_pop($patrol_points);

    // Removing the layer array.
    $patrol_points = array_pop($patrol_points);

    // Order by points.
    uasort($patrol_points, 'osm_cmp');

    $variables['title'] = t('Patrol Points');
    $variables['attributes']['class'] = array(
      'patrol-points',
      'patrol-points-list',
    );

    foreach ($patrol_points as $patrol) {
      if (!empty($patrol['active']) && $patrol['patrolid'] > 0) {
        $holder = array(
          'data'  => $patrol['name'] . ': ' . $patrol['points'],
          'class' => array(
            'patrol-point-' . strtolower($patrol['name']),
            'patrol-point-item',
          ),
        );

        $variables['items'][] = $holder;
      }
    }

    $output .= theme('item_list', $variables);
  }
  else {
    // TODO: Message with empty result.
  }

  return $output;
}

/**
 * Default markup to the full node display.
 *
 * @ingroup themeable
 */
function theme_osm_default_formater($args = '') {
  $output = '';
  $output2 = '';
  $output3 = '';
  $output4 = '';
  $output5 = '';

  $osm_active_roles = variable_get('osm_active_roles', '');

  // 0 => section 1 => sectionid 2 => coming_up
  $osm_role_id = preg_split('@_@', $args['value']);

  $num_entries = $args['num_entries'];
  $kind_display = $args['kind_display'];

  // Terms toolbar - shows a list of terms and lets the user select one to view.
  $term = osm_get_term($osm_active_roles[$osm_role_id[1]]['sectionid']);

  $termid = $term['termid'];
  if (!empty($_GET['termid'])) {
    $termid = check_plain($_GET['termid']);
  }

  $store_programme = _osm_store_programme($osm_active_roles[$osm_role_id[1]]['sectionid'], $termid, $kind_display);

  // This prodecure is need to order the key by date.
  if (!empty($store_programme)) {
    ksort($store_programme);

    $ordered_programme = array();

    foreach ($store_programme as $date) {
      foreach ($date as $programe_event) {

        if (empty($programe_event['summary'])) {
          $programe_titlesummary = '<b>' . $programe_event['title'] . '</b>';
        }
        else {
          $programe_titlesummary = '<b>' .  $programe_event['title'] . '</b>' . ' - ' . $programe_event['summary'];
        }

        if ((strpos(strtolower($programe_titlesummary), 'no meeting') !== FALSE) || (strpos(strtolower($programe_titlesummary), 'meeting cancelled') !== FALSE)) {
          $nomeeting = "red";
        }
        else {
          $nomeeting = "";
        }

        $ordered_programme[] = array(
          'data' => array(
            array(
              'data' => $programe_event['date'],
              'width' => '25%',
            ),
            $programe_titlesummary,
            array(
              'data' => $programe_event['location'],
              'width' => '25%',
            ),
          ),
          'id' => array(
            $programe_event['type'] . '' . $programe_event['section'] . '' . $nomeeting,
          ),
        );

        $header = array(
          t('Date'),
          t('Description'),
          t('Location'),
        );
      }
    }
    $attributes = array('id' => 'osm-table');

    $output .= theme('table', array(
      'header'     => $header,
      'rows'       => $ordered_programme,
      'sticky'     => FALSE,
      'attributes' => $attributes,
    ));

  }
  else {
    $output .= "<h3>Sorry... we can't find a programme for this term. Please select another term or try again soon!</h3>";
  }

  $store_terms = osm_get_terms($osm_active_roles[$osm_role_id[1]]['sectionid'], $termid, $kind_display);
  // This prodecure is need to order the key by date.
  if (!empty($store_terms)) {

    $ordered_terms = array();
    $terms_stored = array();

    foreach ($store_terms as $terms_event) {

      if ($osm_active_roles[$osm_role_id[1]]['sectionid'] == $terms_event['sectionid']) {
        $ordered_terms[] = array(
          'name'           => $terms_event['name'],
          'termid'         => $terms_event['termid'],
          'termidselected' => $terms_event['termidselected'],
          'startdate'      => $terms_event['startdate'],
          'enddate'        => $terms_event['enddate'],
        );
      }
    }
  }
  else {
    // Error is osm is down.
    $output3 .= '<option selected="selected" value="empty">An error has occurred. Please refresh or try again later.</option>';
  }

  $output4 .= '<form name="input" action="" method="get">Select a different term: <select name="termid">';

  foreach ($ordered_terms as $term) {
    $currentterm = "";

    if ($term === NULL) {
      $output3 .= '<option selected="selected" value="empty">Empty</option>';
    }

    if ($terms_event['termidselected'] == NULL) {
      $termselected = $termid;
    }
    else {
      $termselected = $terms_event['termidselected'];
    }

    if ($termid == $term['termid']) {
      $currentterm = " - CURRENT TERM";
    }
    else {
      $currentterm = "";
    }

    if ($termselected == $term['termid']) {
      $output3 .= '<option selected="selected" value="' . $term['termid'] . '">' . $term['name'] . $currentterm . '</option>';
      $selectedtermname = $term['name'];
      $startdate = date("d F", strtotime($term['startdate']));
      $enddate = date("d F", strtotime($term['enddate']));
    }
    else {
      $output3 .= '<option value="' . $term['termid'] . '">' . $term['name'] . $currentterm . '</option>';
    }
  }

  $output5 .= '</select><input type="submit" value="Go"></form>';

  // Selects the relevant data from the events/programme fields and creates the
  // programme table.
  $output2 .= "<h2>" . $selectedtermname . "<font size='2'><i>     (From " . $startdate . " to " . $enddate . ")</i></font></h2>";

  return $output4 . $output3 . $output5 . $output2 . $output;
}
