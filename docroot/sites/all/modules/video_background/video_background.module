<?php

/**
 * @file
 * Main file for the Video Background module.
 */

/**
 * Implements hook_help().
 */
function video_background_help($path, $arg) {
  switch ($path) {
    case 'admin/help#video_background':
      return '<p>' . t("This module allows you to add videos as background for your website.") . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function video_background_menu() {
  $items = array();
  $items['admin/config/development/video_background'] = array(
    'title' => 'Video background settings',
    'description' => 'Configure your Video Background.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_background_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Form builder.
 */
function video_background_form($form) {
  $defaults = variable_get('video_background', array());
  $wiki_link = 'https://en.wikipedia.org/wiki/HTML5_video#Browser_support';

  $form['video_background'] = array(
    '#type' => 'fieldset',
    '#title' => t('Video Background Settings'),
    '#tree' => TRUE,
    '#description' => '',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['video_background']['description'] = array(
    '#type' => 'item',
    '#markup' => t('To correctly work in all browsers is recommended to upload a video in three formats.') . '<br>' . t('If you have no video in all formats you can use a converter.') . '<br>' . t('You can find additional information about browser support <a href="@wiki_link">here</a>.', array('@wiki_link' => $wiki_link)),
  );
  $form['video_background']['mp4'] = array(
    '#type' => 'managed_file',
    '#title' => t('Video in ".mp4" format'),
    '#description' => t('Allowed extension: mp4.'),
    '#upload_location' => 'public://video_background',
    '#upload_validators' => array(
      'file_validate_extensions' => array('mp4'),
      'file_validate_size' => array(5 * 1024 * 1024),
    ),
    '#default_value' => $defaults['mp4'] ? $defaults['mp4'] : '',
  );
  $form['video_background']['webm'] = array(
    '#type' => 'managed_file',
    '#title' => t('Video in ".webm" format'),
    '#description' => t('Allowed extension: webm.'),
    '#upload_location' => 'public://video_background',
    '#upload_validators' => array(
      'file_validate_extensions' => array('webm'),
      'file_validate_size' => array(5 * 1024 * 1024),
    ),
    '#default_value' => $defaults['webm'] ? $defaults['webm'] : '',
  );
  $form['video_background']['ogg'] = array(
    '#type' => 'managed_file',
    '#title' => t('Video in ".ogv" format'),
    '#description' => t('Allowed extension: ogv.'),
    '#upload_location' => 'public://video_background',
    '#upload_validators' => array(
      'file_validate_extensions' => array('ogv'),
      'file_validate_size' => array(5 * 1024 * 1024),
    ),
    '#default_value' => $defaults['ogg'] ? $defaults['ogg'] : '',
  );
  $form['video_background']['additional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional settings'),
    '#description' => '',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['video_background']['additional']['poster'] = array(
    '#type' => 'managed_file',
    '#title' => t('Poster'),
    '#description' => t('This is an image the user sees while the video does not run.'),
    '#upload_location' => 'public://video_background',
    '#upload_validators' => array(
      'file_validate_extensions' => array('gif jpg jpeg png'),
      'file_validate_size' => array(5 * 1024 * 1024),
    ),
    '#default_value' => $defaults['additional']['poster'] ? $defaults['additional']['poster'] : '',
  );
  $form['video_background']['additional']['loop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Loop'),
    '#description' => t('When checked, it specifies that the video will start over again, every time it is finished.'),
    '#default_value' => $defaults['additional']['loop'],
  );
  $form['video_background']['additional']['muted'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mute'),
    '#description' => t('When checked, it specifies that the audio output of the video should be muted.'),
    '#default_value' => $defaults['additional']['muted'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Form submit callback.
 */
function video_background_form_submit($form, &$form_state) {
  $defaults = variable_get('video_background', array());

  foreach ($form_state['values']['video_background'] as $key => $value) {
    if (is_array($value)) {
      if ($value['poster']) {
        $file = file_load($value['poster']);
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'video_background', 'video_background', 1);
      }
      // Removed file's fid, and remove the file.
      elseif ($value['poster'] == 0) {
        // Retrieve the old file's id.
        $fid = $defaults['additional']['poster'];
        $file = $fid ? file_load($fid) : FALSE;
        if ($file) {
          file_usage_delete($file, 'video_background', 'video_background', 1);
          file_delete($file);
        }
      }
    }
    else {
      if ($value != 0) {
        $file = file_load($value);
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'video_background', 'video_background', 1);
      }
      // Removed file's fid, and remove the file.
      elseif ($value == 0) {
        // Retrieve the old file's id.
        $fid = $defaults["$key"];
        $file = $fid ? file_load($fid) : FALSE;
        if ($file) {
          file_usage_delete($file, 'video_background', 'video_background', 1);
          file_delete($file);
        }
      }
    }
  }

  drupal_set_message(t('Your Video Background settings has been successfully saved.'));
  variable_set('video_background', $form_state['values']['video_background']);
}

/**
 * Returns the markup for video background.
 *
 * @return string
 *   HTML markup
 */
function video_background_set_markup() {
  $defaults = variable_get('video_background', array());
  $poster = '';
  $attributes = array(
    'autoplay' => 'autoplay',
  );

  foreach ($defaults['additional'] as $key => $value) {
    if ($key == 'poster') {
      $poster_file = file_load($value);
      $poster = file_create_url($poster_file->uri);
      $attributes[$key] = $poster;
    }
    else {
      $attributes[$key] = $key;
    }
  }

  $video_items = array('mp4', 'webm', 'ogg');
  $output = "<video " . drupal_attributes($attributes) . " id='bg_video'>";

  foreach ($defaults as $key => $value) {
    if ($value != 0 && in_array($key, $video_items)) {
      $file = file_load($value);
      $url = file_create_url($file->uri);
      $output .= '<source src="' . $url . '" type="video/' . $key . '">';
    }
  }

  $output .= t('Video tag is not supported by your browser');
  $output .= '</video>';

  return $output;
}

/**
 * Implements hook_preprocess_html().
 */
function video_background_preprocess_html(&$vars) {
  if (!path_is_admin(current_path())) {
    $path = drupal_get_path('module', 'video_background');
    drupal_add_css($path . '/video_background.css');
  }
}

/**
 * Implements hook_page_alter().
 */
function video_background_page_alter(&$page) {
  $page['#post_render'][] = 'video_background_callback';
}

/**
 * Implements callback_post_render().
 */
function video_background_callback(&$children, $elements) {
  $markup = '';
  if (!path_is_admin(current_path())) {
    $markup = video_background_set_markup();
  }
  $children = preg_replace('@<body[^>]*>@', '$0' . $markup, $children, 1);
  return $children;
}
