<?php 

/**
 * @file
 * Contains the functions required for multisite creation
 */

/**
 * To make host entry for new site in server's hosts file.
 *
 * @param string $site_dir
 *   site's driectroy name
 * @param string $hosts_filepath
 *   server's hosts file path
 *
 * @return bool
 *   TRUE if hosts entry made successfully;
 *   FALSE otherwise.
 */
function sn_quick_multisite_make_host_entry($site_dir, $hosts_filepath) {
  // Get data to be written in host file.
  $host_str = sn_quick_multisite_get_host_string($site_dir);
  // Doing for host entry.
  if (!sn_quick_multisite_file_write($hosts_filepath, $host_str)) {
    drupal_set_message(t('Your host file does not seems to be writable or not at standard location %hosts_filepath. Please make it writable and proceed again.', array('%hosts_filepath' => $hosts_filepath)), 'error');
    return FALSE;
  }
}

/**
 * To append data in a file.
 *
 * @param Sring  $filepath 
 *   Path of file
 * @param string $data_str 
 *   data to be appended
 *
 * @return bool
 *   TRUE if file is sucessfully written;
 *   FALSE otherwise.
 */
function sn_quick_multisite_file_write($filepath, $data_str) {
  // Checking file for writing.
  if (file_exists($filepath)) {
    $read_file = fopen($filepath, "a+");
    if ($read_file) {
      try{
        fwrite($read_file, $data_str);
        fclose($read_file);
        return TRUE;
      }
      catch (Exception $e) {
        throw new Exception($e->getMessage);
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Returns string to append in host file (e.g 127.0.0.1 test.localhost).
 *
 * @return string
 *   string to append in host file
 */
function sn_quick_multisite_get_host_string($sitename) {
  $host_string = "\n";
  $host_string .= '# Please do not delete lines below, they are written by drupal\'s SN Quick Multisite module for multi site creation';
  $host_string .= "\n";
  $server_ip = sn_quick_multisite_get_server_ip();

  $host_string .= $server_ip . "\t" . $sitename;

  return $host_string;
}

/**
 * Returns IP of server.
 * 
 * @return string
 *   IP of server
 */
function sn_quick_multisite_get_server_ip() {
  $server_ip = $_SERVER['SERVER_ADDR'];
  $host_details = sn_quick_multisite_get_host_details();
  $domain_name = $host_details['domain_name'];
  // To resolve the IP in case of localhost on some Windows server's.
  if ($server_ip == '::1' || $domain_name == 'localhost') {
    $server_ip = '127.0.0.1';
  }
  return $server_ip;
}

/**
 * Cretaes default drupal drirectories.
 * 
 * it creates the default directories 
 * (e.g. subdomain.example.com and subdomain.example.com/files)
 * required for multisite creation
 * 
 * @param string $site_dir
 *   Directory name
 */
function sn_quick_multisite_create_mulitsite_directories($site_dir, &$context) {
  $site_main_directory = sn_quick_multisite_sites_folder_path();
  $new_site_path = $site_main_directory . $site_dir;
  $new_site_files_path = $new_site_path . DIRECTORY_SEPARATOR . 'files';
  // Creating new site's main directory.
  if (!file_prepare_directory($new_site_path, FILE_CREATE_DIRECTORY)) {
    drupal_set_message(t('Directory %site_main_directory is not accessible.', array('%site_main_directory' => $site_main_directory)), 'error');
  }
  // Creating files directory for multisite.
  if (!file_prepare_directory($new_site_files_path, FILE_CREATE_DIRECTORY)) {
    drupal_set_message(t('Directory %new_site_files_path is not accessible.', array('%new_site_files_path' => $new_site_files_path)), 'error');
  }
  $context['results'][] = t('Creating %site_dir directory', array('%site_dir' => $site_dir));
  $context['message'] = t('Created %site_dir directory.', array('%site_dir' => $site_dir));

}

/**
 * Function to return drupal sites folder path.
 */
function sn_quick_multisite_sites_folder_path() {
  return DRUPAL_ROOT . DIRECTORY_SEPARATOR . 'sites' . DIRECTORY_SEPARATOR;
}

/**
 * To create settings.php file for new site.
 *
 * @param string $site_dir
 *   site directory name
 * @param string $db_name
 *   site's database name
 *
 * @return bool 
 *   if settings file created successfully then True ELSE False
 */
function sn_quick_multisite_create_settings_file($site_dir, $db_name, &$context) {
  // Creating base url for new site to be in settings.php!!
  $baseurl_str = sn_quick_multisite_prepare_baseurl_string($site_dir);
  // Creating DB array fro new site to be in seetings.php!!
  $db_array_str = sn_quick_multisite_prepare_db_str($db_name);

  $settings_file_text = '# Please do not delete lines below, they are auto generated by Drupal\'s quick multisite module for multi site creation.';
  $settings_file_text .= $baseurl_str;
  $settings_file_text .= "\n";
  $settings_file_text .= $db_array_str;
  // Getting data from current main settings file.
  $site_path = sn_quick_multisite_sites_folder_path();
  $default_settigs_file = $site_path . 'default' . DIRECTORY_SEPARATOR . 'settings.php';
  // Preparing settings.php path for new site.
  $new_destination = $site_path . $site_dir . DIRECTORY_SEPARATOR . 'settings.php';
  // Creating new settings file.
  if (!copy($default_settigs_file, $new_destination)) {
    drupal_set_message(t("The file ' %new_destination' could not be created.", array('%new_destination' => $new_destination)), 'error');
  }
  // Changing file permission to write settings data.
  drupal_chmod($new_destination, 0755);
  $data = "\n";
  $data .= $settings_file_text;
  if (!sn_quick_multisite_file_write($new_destination, $data)) {
    drupal_set_message(t('The default settings file %file is not present or not readable.', array('%file' => $new_destination)), 'error');
    return FALSE;
  }
  $context['results'][] = t('Creating settings file for %site_dir site.', array('%site_dir' => $site_dir));
  $context['message'] = t('Settings file has been created for %site_dir site.', array('%site_dir' => $site_dir));

}

/**
 * Prepare base URL to be appended in settings.php file.
 *
 * @param string $sitename
 *   Name of site
 * 
 * @return string 
 *   To be append in settings.php
 */
function sn_quick_multisite_prepare_baseurl_string($sitename) {
  $baseurl_string = "\n";
  $baseurl_string .= '$base_url = \'';
  $baseurl = sn_quick_multisite_prepare_baseurl($sitename);
  return $baseurl_string . $baseurl . '\';';
}

/**
 * Returns URL of new site.
 *
 * @param string $domain_name
 *   Name of site
 * 
 * @return string 
 *   URL of site
 */
function sn_quick_multisite_prepare_baseurl($domain_name) {
  global $base_path;

  $protocol = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
  // Checking for default ports, which need not be appended.
  $server_port = $_SERVER['SERVER_PORT'];
  if (($server_port != '80') && ($server_port != '443')) {
    $domain_name .= ':' . $server_port;
  }
  // Checking for if server's root path is "/" or something else.
  if ($base_path != '/') {
    $domain_name .= '/' . trim($base_path, '/');
  }
  $baseurl = $protocol . $domain_name;
  return $baseurl;
}

/**
 * Returns database settings for database connection.
 * 
 * @param string $db_name
 *   Database name to be created
 *   
 * @return string 
 *   $db_str database settings string to be appended in settings.php File
 */
function sn_quick_multisite_prepare_db_str($db_name) {
  global $databases;
  $db_str = "\n";
  $db_str .= '$databases = array (
      \'default\' =>
      array (
      \'default\' =>
      array (';

  $db_str .= '\'database\' => \'' . $db_name . '\',
             \'username\' => \'' . $databases['default']['default']['username'] . '\',
             \'password\' => \'' . $databases['default']['default']['password'] . '\',
             \'host\' => \'' . $databases['default']['default']['host'] . '\',
             \'port\' => \'' . $databases['default']['default']['port'] . '\',
             \'driver\' => \'' . $databases['default']['default']['driver'] . '\',
             \'prefix\' => \'' . $databases['default']['default']['prefix'] . '\',
             ),
             ),
  );';
  return $db_str;
}

/**
 * To create database of new site.
 *
 * @param string $db_name
 *   Database name
 */
function sn_quick_multisite_create_db($db_name) {
  // Creating new database.
  $create_db_query = "CREATE DATABASE $db_name";
  db_query($create_db_query);
}

/**
 * To get list of all installed subdomain sites in current drupal installation.
 *
 * @return array
 *   list of all subdomain sites
 */
function sn_quick_multisite_get_sites_list() {
  $site_path = sn_quick_multisite_sites_folder_path();
  // Known files and directories which are to be exculeded.
  $excluded_dir = array('.',
    '..',
    'all',
    'default',
    'README.txt',
    'example.sites.php');
  // Subdomain site's directories pattern.
  $host_details = sn_quick_multisite_get_host_details();
  $domain_name = $host_details['domain_name'];
  $site_dir_pattern = '/^.*\.' . $domain_name . '$/';
  // Exculding unwanted list of directories and files.
  $sites_list = array_diff(scandir($site_path), $excluded_dir);
  $excluded_other_dir = array();
  // If the files or directories other then
  // multisites configuration are present under sites folder.
  foreach ($sites_list as $val) {
    if (!is_dir($site_path . $val)) {
      $excluded_other_dir[] = $val;
    }
    elseif (!preg_match($site_dir_pattern, $val)) {
      $excluded_other_dir[] = $val;
    }
  }
  // Exculding unwanted list of directories and files if any?
  if (count($excluded_dir)) {
    $sites_list = array_diff($sites_list, $excluded_other_dir);
  }
  // Pushing default main site to avaliable sites.
  $sites_list[] = $host_details['domain_name'];

  $sites_list = array_unique(array_combine($sites_list, $sites_list));
  ksort($sites_list);
  return $sites_list;
}

/**
 * To copy data from one database to other.
 *
 * @param string $from_db 
 *   Database name from which data to be copied
 * @param String  $to_db 
 *   Database name in which data to be copied
 */
function sn_quick_multisite_clone_table_populate($from_db, $to_db, &$context) {
  $cond = array();
  $params = array();
  $cond[] = "table_schema = :database";
  $params[":database"] = $from_db;

  $sql = "SELECT table_name FROM information_schema.tables WHERE " . implode(" AND ", $cond);
  $result = db_query($sql, $params)->fetchAll();

  foreach ($result as $item) {
    $from_table = $from_db . '.' . $item->table_name;
    $to_table = $to_db . '.' . $item->table_name;
    $drop_query = "DROP TABLE IF EXISTS " . $to_table;
    db_query($drop_query);
    // Creating table.
    $create_query = "CREATE TABLE " . $to_table . " LIKE " . $from_table;
    db_query($create_query);
    // Inserting data in table.
    $insert_query = "INSERT " . $to_table . " SELECT * FROM " . $from_table;
    db_query($insert_query);
  }

  $context['results'][] = t('Copying database %from_db to %to_db.', array('%from_db' => $from_db, '%to_db' => $to_db));
  $context['message'] = t('Database %from_db has been copied to  %to_db.', array('%from_db' => $from_db, '%to_db' => $to_db));
}

/**
 * To install fresh site.
 * 
 * Redirect user to default install.php file 
 * for doing fresh installation of new multisite
 * and allow user to do other admin settings
 *
 * @param string $site_dir
 *   directory name of new site
 */
function sn_quick_multisite_install_fresh_site($site_dir) {
  // Unset session variables.
  unset($_SESSION['sn_quick_multisite_isclone']);
  unset($_SESSION['sn_quick_multisite_site_dirname']);
  // Get new site's url.
  $site_url = sn_quick_multisite_prepare_baseurl($site_dir);
  // Path for default drupal installation to install required core modules.
  $install_q_str = '/install.php';
  $install_path = $site_url . $install_q_str;
  // Redirecting user to install.php for istalling
  // required core modules and other settings.
  drupal_goto($install_path);
}

/**
 * Returns batch operation to clone modules & themes.
 * 
 * Checks if site to be clonned have some specific modules or themes
 * and return a batch operation to copy all site specific
 * modules and themes to new site.
 * 
 * @param string $site_dir
 *   site's directory name
 * @param string $site_to_clone
 *   site's directory name which is to be clonned
 */
function sn_quick_multisite_copy_dir_batch($site_dir, $site_to_clone) {
  $sites_folder_path = sn_quick_multisite_sites_folder_path();
  $new_site_path = $sites_folder_path . $site_dir;
  module_load_include('inc', 'sn_quick_multisite', 'sn_quick_multisite_copy_dir');

  $operations = array();
  $modules = 'modules';
  // Source path to copy modules.
  $modules_to_copy_dir_path = $sites_folder_path . $site_to_clone . DIRECTORY_SEPARATOR . $modules;
  if (is_dir($modules_to_copy_dir_path)) {
    $operations += sn_quick_multisite_prepare_copy_dir_batch($modules, $modules_to_copy_dir_path, $new_site_path);
  }
  $themes = 'themes';
  // Source path to copy themes.
  $themes_to_copy_dir_path = $sites_folder_path . $site_dir . DIRECTORY_SEPARATOR . $themes;
  if (is_dir($themes_to_copy_dir_path)) {
    $operations += sn_quick_multisite_prepare_copy_dir_batch($themes, $themes_to_copy_dir_path, $new_site_path);
  }

  return $operations;
}

/**
 * Preparing batch to copy directories.
 */
function sn_quick_multisite_prepare_copy_dir_batch($project, $project_to_copy_dir_path, $new_site_path) {
  try {
    $updater = new SnQuickMultisiteCopyDir($project_to_copy_dir_path, $new_site_path);
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return;
  }

  $project_to_copy_dir_path = drupal_realpath($project_to_copy_dir_path);

  $arguments = array(
    'project' => $project,
    'updater_name' => get_class($updater),
    'source_url' => $project_to_copy_dir_path,
    'destination_url' => $new_site_path,
    'filetrnasfer' => new FileTransferLocal(DRUPAL_ROOT),
  );

  // Populating batch array.
  $operations = array('sn_quick_multisite_copy_dir', $arguments);

  return $operations;
}

/**
 * Copy directories (e.g., modules and themes) required for cloning.
 *
 * @param string $project
 *   directory name to be copied
 * @param object $updater_name
 *   SnQuickMultisiteCopyDir class object to perform copy action
 * @param string $local_url
 *   path of source directory
 * @param string $destination_url
 *   path of destination directory
 * @param object $filetransfer
 *   local connection class for copying files as the httpd user
 */
function sn_quick_multisite_copy_dir($project, $updater_name, $local_url, $destination_url, $filetransfer, &$context) {
  module_load_include('inc', 'sn_quick_multisite', 'sn_quick_multisite_copy_dir');

  // The batch API uses a session, and since all the arguments are serialized
  // and unserialized between requests, although the FileTransfer object itself
  // will be reconstructed, the connection pointer itself will be lost. However,
  // the FileTransfer object will still have the connection variable, even
  // though the connection itself is now gone. So, although it's ugly, we have
  // to unset the connection variable at this point so that the FileTransfer
  // object will re-initiate the actual connection.
  unset($filetransfer->connection);

  $updater = new $updater_name($local_url, $destination_url);

  try {
    $updater->copyDir($filetransfer);
  }
  catch (UpdaterException $e) {
    drupal_set_message(t('Error copying / updating'), 'error');
    drupal_set_message($e->getMessage(), 'error');
    return;
  }

  $context['results'][] = t('Copying directory %local_url to %destination_url.', array('%local_url' => $local_url, '%destination_url' => $destination_url));
  $context['message'] = t('Directory %local_url has been copied to %destination_url.', array('%local_url' => $local_url, '%destination_url' => $destination_url));

  // This particular operation is now complete, even though the batch might
  // have other operations to perform.
  $context['finished'] = 1;
}

/**
 * To prepare batch for various function to create multisite.
 * 
 * @param string $site_dir
 *   new site's directory name
 * @param string $site_name
 *   new site's name (or domian name)
 * @param bool $is_clone
 *   if site need's to be clone
 * @param string $hosts_filepath
 *   Server's Hosts file path 
 * @param string $clone_site
 *   Site's directory name which is to be clonned
 */
function sn_quick_multisite_prepare_batch($site_dir, $site_name, $is_clone, $hosts_filepath, $clone_site) {
  $db_name = sn_quick_multisite_generate_dbname($site_name);

  $operations = array(
    array(
      'sn_quick_multisite_create_mulitsite_directories',
      array(
        $site_dir,
      ),
    ),
    array(
      'sn_quick_multisite_create_db',
      array(
        $db_name,
      ),
    ),
    array(
      'sn_quick_multisite_create_settings_file',
      array(
        $site_dir,
        $db_name,
      ),
    ),
  );
  // Checking if user opted for host entry.
  if ($hosts_filepath) {
    $operations[] = array(
      'sn_quick_multisite_make_host_entry',
      array(
        $site_dir,
        $hosts_filepath,
      ),
    );
  }
  // Checking if user opted for fresh new multisite
  // or for a clone of an existing site.
  if ($is_clone == 'yes') {
    $site_to_clone = $clone_site;
    // Preparing batch for copying modules and themes files for cloning,
    // if exits.
    $operations[] = sn_quick_multisite_copy_dir_batch($site_dir, $site_to_clone);

    // Preparing batch for copying database tables and table data for cloning.
    // Getting database settings of site which is to be cloned.
    $from_db_settings = sn_quick_multisite_get_dbdata_by_folder($clone_site);
    $from_db = $from_db_settings['default']['default']['database'];
    $to_db = $db_name;
    $operations[] = array(
      'sn_quick_multisite_clone_table_populate',
      array(
        $from_db,
        $to_db,
      ),
    );
    // Puting new site's cloning option and name in seesion
    // as batch api uses session
    // and all the varibales and there states will be lost
    // this variable will be used to redirect user to install.php file
    // to install fresh multisite and do other admin settings.
    $_SESSION['sn_quick_multisite_isclone'] = TRUE;
  }
  // Site directory name will be required to redirect user to install.php.
  $_SESSION['sn_quick_multisite_site_dirname'] = $site_dir;

  // Executing batch operations.
  sn_quick_multisite_execute_batch($operations, $site_dir);
}

/**
 * Include settings.php of site's directory.
 *
 * @param string $folder
 *   Site name for Database settings to be read
 *
 * @return array 
 *   $databases Database array containing all Database settings
 */
function sn_quick_multisite_get_dbdata_by_folder($folder) {
  $settings_file_path = sn_quick_multisite_sites_folder_path() . $folder . DIRECTORY_SEPARATOR . 'settings.php';
  if (file_exists($settings_file_path)) {
    include_once $settings_file_path;
    if (!isset($databases)) {
      global $databases;
    }
    return $databases;
  }
}

/**
 * To execute and intialize batch for installing multisite.
 *
 * @param array $operations
 *   list operations to be performed in batch
 * @param string $site_dir
 *   new site path
 */
function sn_quick_multisite_execute_batch($operations, $site_dir) {
  $batch = array(
    'title' => t('Installing %site_dir', array('%site_dir' => $site_dir)),
    'init_message' => t('Preparing to install'),
    'operations' => $operations,
    'finished' => 'sn_quick_multisite_install_batch_finished',
    'file' => drupal_get_path('module', 'sn_quick_multisite') . '/sn_quick_multisite.inc',
  );
  // Initializing batch.
  batch_set($batch);
  // Invoking batch.
  batch_process(NULL);
}

/**
 * Return to pages that should be visited post operation.
 *
 * @param bool $success
 *   TRUE|FALSE
 * @param array $results
 *   array containg results
 */
function sn_quick_multisite_install_batch_finished($success, $results) {

  if (!isset($_SESSION['sn_quick_multisite_isclone'])) {
    sn_quick_multisite_install_fresh_site($_SESSION['sn_quick_multisite_site_dirname']);
  }
  $site_url = sn_quick_multisite_prepare_baseurl($_SESSION['sn_quick_multisite_site_dirname']);
  // Unset session variables.
  unset($_SESSION['sn_quick_multisite_isclone']);
  unset($_SESSION['sn_quick_multisite_site_dirname']);
  // Redirecting user to new site.
  drupal_goto($site_url);
}

/**
 * To get server's actual domain name and sub domain.
 * 
 * This function returns the actual domain and subdoamin
 * for the site, where this module is currently running.
 * e.g if current site http://abc.example.com, then
 * it will return "example.com" as domain 
 * and "abc" as subdomain.
 * 
 * @return array 
 *   $host_details array containing domain and subdomain name
 */
function sn_quick_multisite_get_host_details() {
  $sub_domain = '';
  $domain_name = '';
  $tld = '';
  $host_details = array();
  $tld_is_ready = FALSE;

  $g_tlds = explode(',', str_replace(' ', '', "aero, biz, com, coop, info,
      jobs, museum, name, net, org, pro, travel, gov, edu, mil, int"));

  $c_tlds = explode(',', str_replace(' ', '', "ac, ad, ae, af, ag, ai, al,
      am, an, ao, aq, ar, as, at, au, aw, az, ax, ba, bb, bd, be, bf, bg, bh,
      bi, bj, bm, bn, bo, br, bs, bt, bv, bw, by, bz, ca, cc, cd, cf, cg, ch,
      ci, ck, cl, cm, cn, co, cr, cs, cu, cv, cx, cy, cz, de, dj, dk, dm, do,
      dz, ec, ee, eg, eh, er, es, et, eu, fi, fj, fk, fm, fo, fr, ga, gb, gd,
      ge, gf, gg, gh, gi, gl, gm, gn, gp, gq, gr, gs, gt, gu, gw, gy, hk, hm,
      hn, hr, ht, hu, id, ie, il, im, in, io, iq, ir, is, it, je, jm, jo, jp,
      ke, kg, kh, ki, km, kn, kp, kr, kw, ky, kz, la, lb, lc, li, lk, lr, ls,
      lt, lu, lv, ly, ma, mc, md, mg, mh, mk, ml, mm, mn, mo, mp, mq, mr, ms,
      mt, mu, mv, mw, mx, my, mz, na, nc, ne, nf, ng, ni, nl, no, np, nr, nu,
      nz, om, pa, pe, pf, pg, ph, pk, pl, pm, pn, pr, ps, pt, pw, py, qa, re,
      ro, ru, rw, sa, sb, sc, sd, se, sg, sh, si, sj, sk, sl, sm, sn, so, sr,
      st, sv, sy, sz, tc, td, tf, tg, th, tj, tk, tl, tm, tn, to, tp, tr, tt,
      tv, tw, tz, ua, ug, uk, um, us, uy, uz, va,
      vc, ve, vg, vi, vn, vu, wf, ws, ye, yt, yu, za, zm, zw"));

  $tldarray = array_merge($g_tlds, $c_tlds);
  // URL from which domain info to be fetched.
  $url = $_SERVER['HTTP_HOST'];

  if (!strstr($url, 'http://')) {
    $url = 'http://' . $url;
  }
  $url_parsed = parse_url(trim($url));
  $url_host = $url_parsed['host'];

  $domain_array = explode('.', $url_host);
  $top = count($domain_array);

  for ($i = 0; $i < $top; $i++) {
    $domain_part = array_pop($domain_array);

    if (!$tld_is_ready) {
      if (in_array($domain_part, $tldarray)) {
        $tld = ".$domain_part" . $tld;
      }
      else {
        $domain_name = $domain_part;
        $tld_is_ready = 1;
      }
    }
    else {
      $sub_domain = ".$domain_part" . $sub_domain;
    }
  }
  $host_details['domain_name'] = $domain_name . $tld;
  $host_details['sub_domain'] = substr($sub_domain, 1);

  return $host_details;
}

/**
 * Returns list of all exisiting databases. 
 */
function sn_quick_multisite_get_db_list() {
  $results = db_query("SHOW databases")->fetchCol();
  return $results;
}

/**
 * Genrates the unique database name.
 * 
 * @param string $site_name
 *   Site name
 * @param string $db_name
 *   Purposed database name of new site
 */
function sn_quick_multisite_generate_dbname($site_name, $db_name = '') {
  $db_list = sn_quick_multisite_get_db_list();
  $db_name = ($db_name == '') ? $site_name : $db_name;
  do {
    $db_name = $site_name . '_' . rand(1000, 10000);
  } while (in_array($db_name, $db_list));
  return $db_name;
}
