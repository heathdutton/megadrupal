<?php

/*****************************************************************************
          DRUPAL HOOKS
*****************************************************************************/

/**
 * Implementation of hook_theme();
 */
function image_preset_theme($existing, $type, $theme, $path) {
  $base = array(
    'file' => 'image_preset.theme.inc',
  );
  
  $data = array(
  // field formatters
    // image preset file
    'image_preset_field_image_preset' => array(
      'variables' => array(
        'file' => NULL,
        'image_style' => NULL,
        'entity' => NULL,
        'attributes' => array()
      ),
    ),
  );  
  
  // add default theme options
  foreach ($data as &$item) {
    $item += $base;
  }
    
  return $data;  
}

/**
 * Implementation of hook_field_formatter_info();
 */
function image_preset_field_formatter_info() {
  $formatters = array(
    'image_preset_field_image_preset' => array(
      'label' => t('Image Preset'),
      'field types' => array('file'),
      'settings' => array(
        'image_style' => '',
      ),
    ),
  );
  return $formatters;
}

/**
 * Implementation of hook_field_formatter_settings_summary();
 */
function image_preset_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'image_preset_field_image_preset') {
    if (isset($settings['image_style'])) {
      $summary .= t('Image style: @style', array('@style' => $settings['image_style']));
    }
  }
  
  if (empty($summary)) {
    $summary = t('No options set.');
  }

  return $summary;
}

/**
 * Implementation of hook_field_formatter_settings_form();
 */
function image_preset_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'image_preset_field_image_preset') {
    $options = array();
    
    foreach (image_styles() as $style) {
      $options[$style['name']] = $style['name'];
    }
    
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $settings['image_style'],
      '#required' => TRUE,
    );
  }

  return $element;
}

/**
 * Implementation of hook_field_formatter_view();
 */
function image_preset_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'image_preset_field_image_preset':
      foreach ($items as $delta => $file) {
        $file_entity = $file;
        $image_entity = $file;

        $element[$delta] = array(
          '#theme' => $display['type'],
          '#file' => $image_entity,
          '#entity' => $file_entity,
          '#image_style' => $display['settings']['image_style'],
        );
      }
      
      break;
  }
  
  return $element;
}
