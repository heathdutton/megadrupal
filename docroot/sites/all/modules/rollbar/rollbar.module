<?php
/**
 * @file rollbar.module.
 */

/**
 * Helper function to get the path to the library,
 * since we include the Rollbar class at hook_boot, the modules
 * like, libraries hasn't been loaded yet, so we imclude it manually
 */
function _rollbar_get_library_path() {
  return variable_get('rollbar_lib_path', 'sites/all/libraries/rollbar/rollbar.php');
}


/**
 * Implements hook_permission()
 */
function rollbar_permission() {
  return array(
    'administer rollbar' => array(
      'title' => t('Administer rollbar settings'),
      'description' => t('Allow user to administer all Rollbar settings.'),
    ),
  );
}


/**
 * Implements hook_requirements().
 */
function rollbar_requirements($phase) {
  $requirements = array();

  // only runtime, we dont care about installation or update
  if ($phase == 'runtime') {
    // make sure the rollbar class exists, we don't check for the existance
    // of the class file here since it should always be included in hook_boot()
    // which should already have been called by now. Since it's required on
    // every page request
    if (!class_exists('Rollbar')) {
      $requirements['rollbar_library'] = array(
        'title' => t('Rollbar library is missing'),
        'description' => t(
          'The path to the Rollbar library is missing, see the
            README or adjust your settings !link',
          array(
            '!link' => l(t('here'), 'admin/config/development/rollbar')
          )
        ),
        'value' => _rollbar_get_library_path(),
        'severity' => REQUIREMENT_WARNING,
      );
    }
    else {
      $requirements['rollbar_library'] = array(
        'title' => t('Rollbar library'),
        'value' => RollbarNotifier::VERSION,
        'severity' => REQUIREMENT_OK,
      );
    }

    if (variable_get('rollbar_enable_php', 1) == 1 && trim(variable_get('rollbar_server_access_token', '')) == '') {
      $requirements['rollbar_server_key'] = array(
        'title' => t('Rollbar PHP token missing.'),
        'description' => t(
          'Rollbar for PHP is enabled however the access token is missing. Please configure your settings !link.',
          array(
            '!link' => l(t('here'), 'admin/config/development/rollbar')
          )
        ),
        'value' => 'Missing token',
        'severity' => REQUIREMENT_INFO,
      );
    }

    if (variable_get('rollbar_enable_js', 1) == 1 && trim(variable_get('rollbar_js_access_token', '')) == '') {
      $requirements['rollbar_client_key'] = array(
        'title' => t('Rollbar JS token missing.'),
        'description' => t(
          'Rollbar for JavaScript is enabled however the access token is missing. Please configure your settings !link.',
          array(
            '!link' => l(t('here'), 'admin/config/development/rollbar')
          )
        ),
        'value' => 'Missing token',
        'severity' => REQUIREMENT_INFO,
      );
    }
  }
  return $requirements;
}


/**
 * Implements hook_boot().
 */
function rollbar_boot() {

  // If php support is turned off then return
  if (variable_get('rollbar_enable_php', 0) != 1) {
    return;
  }

  // load rollbar settings
  $access_token = check_plain(variable_get('rollbar_server_access_token', ''));
  $environment = check_plain(variable_get('rollbar_environment', 'production'));
  $exceptions = check_plain(variable_get('rollbar_exceptions', 1));
  $errors = check_plain(variable_get('rollbar_error_handling', 1));

  // get path to the library
  $rollbar_lib_path = _rollbar_get_library_path();

  // make sure that the file exists before inclusion
  if (!file_exists($rollbar_lib_path)) {

    // if it don't, attempt to load it via DRUPAL_ROOT, this is for some cases
    // when bootstrapped instances the include path isn't set correctly
    $rollbar_lib_path = DRUPAL_ROOT . '/' . $rollbar_lib_path;
    if (!file_exists($rollbar_lib_path)) {
      watchdog(
        'rollbar',
        'Unable to load Rollbar library. File @path does not exist. Check configuration settings.',
        array('@path' => $rollbar_lib_path),
        WATCHDOG_NOTICE
      );
    }
    return;
  }

  include_once $rollbar_lib_path;
  Rollbar::init(
    array(
      'access_token' => $access_token,
      'environment' => $environment
    ), $exceptions, $errors
  );
}


/**
 * Implements hook_watchdog().
 */
function rollbar_watchdog($log_entry) {

  if (variable_get('rollbar_watchdog', 0) != 1) {
    return;
  }

  // if this is a PHP error, and we haven't specifically choosen
  // to frard those errors to rollbar then return
  if ($log_entry['type'] == 'php') {
    if (variable_get('rollbar_watchdog_include_php', '0') != 1) {
      return;
    }
  }

  switch ($log_entry['severity']) {
    case WATCHDOG_ALERT:
    case WATCHDOG_CRITICAL:
    case WATCHDOG_EMERGENCY:
    case WATCHDOG_ERROR:
      $level = 'error';
      break;
    case WATCHDOG_WARNING:
      $level = 'warning';
      break;
    case WATCHDOG_INFO:
    case WATCHDOG_DEBUG:
    case WATCHDOG_NOTICE:
      $level = 'info';
      break;
    default:
      $level = 'info';
      break;
  }

  // ensure that the Rollbar class exists, this is an additional check
  // in case the hook_boot hook was unable to locate the Rollbar class,
  // this will happen if the user hasn't specified the correct path
  if (class_exists('Rollbar')) {
    Rollbar::report_message(
      t($log_entry['message'], $log_entry['variables']),
      $level,
      array(
        'type' => $log_entry['type'],
        'uid' => $log_entry['uid'],
        'request_uri' => $log_entry['request_uri'],
        'referer' => $log_entry['referer'],
        'ip' => $log_entry['ip']
      )
    );
  }
}


/**
 * Implements hook_init().
 */
function rollbar_init() {

  // If php support is turned off then return
  if (variable_get('rollbar_enable_js', 0) == 0) {
    return;
  }

  // client settings
  $token = check_plain(variable_get('rollbar_js_access_token', ''));
  $env = check_plain(variable_get('rollbar_environment', 'production'));

  // I had some issues appending this via jQuery and using Drupal.behaviors,
  // so have opted to use javascript, in line with Rollbar.com
  // documentation this is essentially an exact copy of the code
  // located @ https://rollbar.com/docs/items_js/
  $js = "var _rollbarParams = {'server.environment': '" . $env . "'};" .
  "_rollbarParams['notifier.snippet_version'] = '2';" .
  "var _rollbar=['" . $token . "', _rollbarParams];" .
  "var _ratchet=_rollbar;(function(w,d){w.onerror=function(e,u,l) {" .
  "_rollbar.push({_t:'uncaught',e:e,u:u,l:l});};var i=function(){" .
  "var s=d.createElement('script');var f=d.getElementsByTagName('script')[0];" .
  "s.src='//d37gvrvc0wt4s1.cloudfront.net/js/1/rollbar.min.js';s.async=!0;" .
  "f.parentNode.insertBefore(s,f);};if(w.addEventListener){" .
  "w.addEventListener('load',i,!1);}else{w.attachEvent('onload',i);}" .
  "})(window,document);";

  // Add the function, we add it after drupal
  // and jquery have been loaded.
  // but before everything else.
  drupal_add_js($js, array(
    'type' => 'inline',
    'scope' => 'header',
    'weight' => -99,
    'group' => JS_LIBRARY
  ));
}


/**
 * Implements hook_menu().
 */
function rollbar_menu() {
  $items = array();
  $items['admin/config/development/rollbar'] = array(
    'title' => 'Rollbar settings',
    'description' => 'Make changes to your Rollbar settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rollbar_admin_settings_form'),
    'access arguments' => array('administer rollbar'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'rollbar.admin.inc',
  );
  return $items;
}
