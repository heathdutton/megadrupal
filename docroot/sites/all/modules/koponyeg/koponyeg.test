<?php

/**
 * @file
 * Test cases for Koponyeg module.
 *
 * @author Dániel Kalmár <kalm.dani@gmail.com>
 */

class KoponyegWebTestCase extends DrupalWebTestCase {
  /**
   * Enable koponyeg module.
   */
  function setUp() {
    parent::setUp(array('koponyeg'));
  }

  /**
   * Return a random region code.
   *
   * @return int
   *   A random region code.
   */
  protected function koponyegGetRandomIndex() {
    $regions = koponyeg_get_regions();
    // Get all region codes.
    $region_codes = array_keys($regions);
    // Generate a random index and get a random region code.
    $random_index = rand(0, count($region_codes) - 1);

    return $random_index;
  }

}

class BlockWebTestCase extends KoponyegWebTestCase {
  /**
   * Enable koponyeg module.
   */
  function setUp() {
    parent::setUp('koponyeg');
  }
  /**
   * Return the infos of Koponyeg Block test case.
   */
  public static function getInfo() {
    return array(
      'name' => 'Koponyeg Block',
      'description' => 'Tests for block configuration and visiblity.',
      'group' => 'Koponyeg',
    );
  }

  /**
   * Create a Koponyeg weather block.
   *
   * @param boolean $user_login
   *   Is neccessary to create a user.
   * @param int $region
   *   Region code for koponyeg.
   * @param mixed $block_region
   *   Block region name.
   */
  protected function createKoponyegBlock($user_login = FALSE, $region = 1, $block_region = BLOCK_REGION_NONE) {
    if ($user_login) {
      $user = $this->drupalCreateUser('administer blocks', 'administer koponyeg');
      $this->drupalLogin($user);
    }

    $edit = array(
      'koponyeg_forecast_region' =>  $region,
      'regions[bartik]' => $block_region,
    );

    $this->drupalPost('admin/structure/block/add-koponyeg-block', $edit, t('Save block'));
  }

  /**
   * Test the block configuration form.
   */
  public function testBlockConfiguration() {
    $user = $this->drupalCreateUser(array('administer blocks', 'administer koponyeg'));
    $this->drupalLogin($user);

    $this->drupalGet('admin/structure/block');
    $this->assertLink(t('Add koponyeg block'));
    // Check the weather block configuration page.
    $this->clickLink(t('Add koponyeg block'));
    $this->assertFieldByName('koponyeg_forecast_region', 1);
  }

  /**
   * Test creating weather block.
   */
  public function testBlockCreate() {
    $user = $this->drupalCreateUser(array('administer blocks', 'administer koponyeg'));
    $this->drupalLogin($user);
    // Create a koponyeg weather block.
    $random_index = $this->koponyegGetRandomIndex();
    $this->createKoponyegBlock(FALSE, $random_index, 'sidebar_first');
    // Check that the block is visible on the front page.
    $this->drupalGet('<front>');
    $this->assertText(koponyeg_get_regions($random_index), 'The block is visible on the front page.');
  }

  /**
   * Test deleting weather block.
   */
  public function testBlockDelete() {
    $user = $this->drupalCreateUser(array('administer blocks', 'administer koponyeg'));
    $this->drupalLogin($user);
    // Create a koponyeg weather block.
    $random_index = $this->koponyegGetRandomIndex();
    $this->createKoponyegBlock();
    $this->drupalGet('admin/structure/block');
    $this->clickLink(t('delete'));
    // Delete created koponyeg block.
    $this->assertText(t('Are you sure you want to delete this block?'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertNoText('Koponyeg Block 1');
  }
}
