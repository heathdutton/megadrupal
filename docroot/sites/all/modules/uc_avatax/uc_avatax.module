<?php

/**
 * @file
 * Calculate Sales Tax using AvaTax service from Avalara, Inc.
 *
 * Copyright (C) Alexander Bischoff, adTumbler, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

define('UC_AVATAX_PRODUCTION_MODE', 'Production');
define('UC_AVATAX_DEVELOPMENT_MODE', 'Development');
define('UC_AVATAX_TRIAL_VERSION', 'trial');
define('UC_AVATAX_BASIC_VERSION', 'basic');
define('UC_AVATAX_PRO_VERSION', 'pro');

/**
 * Implements hook_permission().
 */
function uc_avatax_permission() {
  return array(
    'administer avatax' => array(
      'title' => t('Administer AvaTax'),
      'description' => t('Allows users to configure AvaTax'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Calculate sales using hook_avatax_uc_calculate_tax.
 */
function uc_avatax_uc_calculate_tax($order) {
  if (!isset($_SESSION)) session_start();

  // block duplicate hook_uc_calculate_tax calls during checkout ajax requests
  $url_components = explode('/', request_uri());
  if  ($url_components[2] == 'ajax') {
    if (isset($_SESSION['tax_data'])) {
      if ((microtime(TRUE) - $_SESSION['microtime']) <= 12) {
        $tax_data = $_SESSION['tax_data'];
        $uc_tax_ret = uc_avatax_result($tax_data);
        return $uc_tax_ret;
      }
    }
  }

  // block duplicate hook_uc_calculate_tax calls during checkout
  if  ($url_components[1] == 'cart') {
    if (isset($_SESSION['tax_data'])) {
      if ((microtime(TRUE) - $_SESSION['microtime']) <= 12) {
        $tax_data = $_SESSION['tax_data'];
        $uc_tax_ret = uc_avatax_result($tax_data);
        return $uc_tax_ret;
      }
    }
  }

  // block duplicate hook_uc_calculate_tax calls during edit order
  if (arg(0) == 'admin' && arg(1) == 'store' && arg(2) == 'orders' && is_numeric(arg(3)) && arg(4) == 'edit' ) {
    if (isset($_SESSION['tax_data'])) {
      if ((microtime(TRUE) - $_SESSION['microtime']) <= 12) {
        $tax_data = $_SESSION['tax_data'];
        $uc_tax_ret = uc_avatax_result($tax_data);
        return $uc_tax_ret;
      }
    }
  }

  // block duplicate hook_uc_calculate_tax calls when updating order status
  if (arg(0) == 'admin' && arg(1) == 'store' && arg(2) == 'orders' && is_numeric(arg(3)) && arg(4) != 'edit' ) {
    return array();
  }

  // Retrieve tax if there is a complete address with valid state 
  if (uc_avatax_check_address($order)) {
    $_SESSION['microtime'] = microtime(TRUE);
    $tax_data = uc_avatax_retrieve_sales_tax($order);
    $_SESSION['tax_data'] = $tax_data;
  }
  else {
    return array();
  }
  
  // If we have a sales tax amount.
  if ($tax_data) {
    // Return sales tax calculated as zero
    if ($tax_data['tax_amount'] == 0) {
      $avatax_show_zero = variable_get('uc_avatax_show_zero', '');
      if($avatax_show_zero == 1) {
        $uc_tax_ret = uc_avatax_result($tax_data);
        return $uc_tax_ret;
      }
      else {
        return array();
      }
    }
    // Construct and return sales tax array
    else {
      $uc_tax_ret = uc_avatax_result($tax_data);
      return $uc_tax_ret;      
    }
  }
}

/**
 * AvaTax service: returns the sales tax amount as an array.
 *
 * @param object $order
 *   The order object on which sales tax is to be calculated.
 * @param bool $commit
 *   Should we also commit the transaction?
 *
 * @return array
 *   The AvaTax sales tax values as an array.
 */
function uc_avatax_retrieve_sales_tax($order, $commit = FALSE) {
  global $user;

  if (is_numeric($order)) {
    $order = uc_order_load($order);
  }

  if (!is_object($order)) {
    return array();
  }

  // Get primary business location
  $primary_street1 = (variable_get('uc_avatax_primary_street1', ''));
  $primary_street2 = (variable_get('uc_avatax_primary_street2', ''));
  $primary_city = (variable_get('uc_avatax_primary_city', ''));
  $primary_state = (variable_get('uc_avatax_primary_state', ''));
  $primary_zip = (variable_get('uc_avatax_primary_zip', ''));

  // Get delivery info out
  $tax_address_profile = variable_get('uc_avatax_tax_address', '');
  if ($tax_address_profile == 'Billing') {
    $street1 = $order->billing_street1;
    $street2 = $order->billing_street2;
    $city = $order->billing_city;
    $zone = $order->billing_zone;
    $country_code = $order->billing_country;
    $zip = $order->billing_postal_code;
  }
  elseif ($tax_address_profile == 'Shipping') {
    $street1 = $order->delivery_street1;
    $street2 = $order->delivery_street2;
    $city = $order->delivery_city;
    $zone = $order->delivery_zone;
    $country_code = $order->delivery_country;
    $zip = $order->delivery_postal_code;
  }

  // Convert Country Code to Country Abbreviation.
  $country_data = uc_get_country_data(array('country_id' => $country_code));
  $country = $country_data[0]['country_iso_code_2'];

  // Convert State Code to State Abbreviation
  $state = uc_get_zone_code($zone);

  // Get company code, use mode, doc_code prefix and product version
  $company_code = (variable_get('uc_avatax_company_code', ''));
  $use_mode = (variable_get('uc_avatax_use_mode', ''));
  $doc_code_prefix = 'uc';
  $product_version = variable_get('uc_avatax_product_version', UC_AVATAX_TRIAL_VERSION);
  
  if ($product_version == UC_AVATAX_TRIAL_VERSION) {
    $company_code = 'avatax-calc';
    $doc_code_prefix = variable_get('uc_avatax_install_time', microtime(TRUE));
    if ($order->order_id != 0) {
      drupal_set_message(t('Trial License - please do not use on a production site!'), 'warning');
    }
  }

  if (!$company_code) {
    drupal_set_message(t('AvaTax company code is not set.'), 'error');
    return FALSE;
  }

  // Sales Tax Shipping code
  $shipcode = (variable_get('uc_avatax_shipcode', ''));

  // Set empty exemption code
  $avatax_exemption_code = '';

  // Get User UID
  $my_user = $order->uid ? user_load($order->uid) : $user;
  if (!isset($my_user->name)) {
    $user_id = uc_store_email_to_username($order->primary_email);
  } else {
    if (variable_get('uc_avatax_exemptions_status', 0)) {
      if (isset($my_user->avatax_exemption_code['und'][0]['value'])) {
        $avatax_exemption_code = $my_user->avatax_exemption_code['und'][0]['value'];
      }
    }
    $user_id = $my_user->name;
  }

  $doc_date = time();
  // Commit sales tax by recalculating using original date and time 
  if ($commit) {
    if (isset($order->modified)) {
      $doc_date = $order->modified;
    }	  
  }
  
  // Construct arguments for AvaTax functions
  $ava_args = compact('product_version', 'company_code', 'doc_code_prefix', 'doc_date', 'commit', 'user_id', 'avatax_exemption_code',
                      'shipcode', 'use_mode', 'street1', 'street2', 'city', 'state', 'country', 'zip',
                      'primary_street1', 'primary_street2', 'primary_city', 'primary_state', 'primary_zip');

  module_load_include('inc', 'uc_avatax', 'includes/uc_avatax_calc');

  // Get sales tax from AvaTax cloud service
  $tax_data = uc_avatax_get_tax($order, $ava_args);

  // Empty return as request was to update AvaTax status
  if ($commit) {
    return;	  
  }

  // Check that there was a response from AvaTax
  if (!$tax_data) {
    form_set_error('posted', t('AvaTax did not calculate sales tax'));
    return FALSE;
  }
  else {
    $tax_data['city'] = $city;
    return $tax_data;
  }
}

/**
 * Sends HTTP GET request to endpoint.
 * @return array
 *   Returns an associative array containing 'meta' and 'body' elements.
 */
function uc_avatax_get($endpoint, $parameters, $base_url = '', $account = '', $license = '') {
  $querystring = '';
  if (is_array($parameters)) {
    $querystring = http_build_query($parameters);
  }
  $curl_opts = array(
    // Return result instead of echoing.
    CURLOPT_RETURNTRANSFER => TRUE,
    // Follow redirects, Location: headers.
    CURLOPT_FOLLOWLOCATION => FALSE,
    // But dont redirect more than 10 times.
    CURLOPT_MAXREDIRS => 10,
    // Abort if network connection takes more than 5 seconds.
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_SSL_VERIFYPEER => TRUE,
  );

  list($mode, $version, $account, $license, $base_url) = uc_avatax_get_config($account, $license, $base_url);
  $curl_opts[CURLOPT_HTTPHEADER] = array(
    'Content-Type: text/json',
    'Authorization: Basic ' . base64_encode("$account:$license"),
    'Date: ' . date(DATE_RFC1123, REQUEST_TIME),
  );

  $url = rtrim($base_url, '/') . '/' . ltrim($endpoint, '/');
  if ($querystring) {
    $url .= '?' . $querystring;
  }
  $curl = curl_init($url);
  foreach ($curl_opts as $opt => $val) {
    curl_setopt($curl, $opt, $val);
  }

  $body = curl_exec($curl);
  if ($body === FALSE) {
    watchdog('uc_avatax', 'AvaTax request failed. This may be an out of date SSL certificates on your server. message: %msg', array('%msg' => curl_error($curl)), WATCHDOG_ERROR);
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }

  $meta = curl_getinfo($curl);
  curl_close($curl);

  if ($mode == UC_AVATAX_DEVELOPMENT_MODE) {
    watchdog('uc_avatax', 'Request info: !url !headers !response !meta', array(
      '!url' => "<pre>URL : $url</pre>",
      '!headers' => "<pre>Request Headers:\n" . var_export($curl_opts[CURLOPT_HTTPHEADER], TRUE) . '</pre>',
      '!response' => "<pre>Response:\n" . var_export($body, TRUE) . '</pre>',
      '!meta' => "<pre>Response Meta:\n" . var_export($meta, TRUE) . '</pre>',
            ), WATCHDOG_DEBUG);
  }

  if ($body) {
    $body_parsed = json_decode($body, TRUE);
    return array(
      'body' => $body_parsed,
      'meta' => $meta,
    );
  }
  else {
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }
}

/**
 * Sends HTTP POST request to endpoint.
 * @return array
 *   Returns an associative array containing 'meta' and 'body' elements.
 */
function uc_avatax_post($endpoint, $data, $base_url = '', $account = '', $license = '') {
  $curl_opts = array(
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_FOLLOWLOCATION => FALSE,
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_CUSTOMREQUEST => 'POST',
    CURLOPT_SSL_VERIFYPEER => TRUE,
  );

  list($mode, $version, $account, $license, $base_url) = uc_avatax_get_config($account, $license, $base_url);

  if (is_array($data)) {
    $data = json_encode($data);
  }
  $curl_opts[CURLOPT_POSTFIELDS] = $data;

  $curl_opts[CURLOPT_HTTPHEADER] = array(
    'Content-Length: ' . strlen($data),
    'Content-Type: text/json',
    'Authorization: Basic ' . base64_encode("$account:$license"),
    'Date: ' . date(DATE_RFC1123, REQUEST_TIME),
  );

  $url = rtrim($base_url, '/') . '/' . ltrim($endpoint, '/');
  $curl = curl_init($url);
  foreach ($curl_opts as $opt => $val) {
    curl_setopt($curl, $opt, $val);
  }

  $body = curl_exec($curl);
  if ($body === FALSE) {
    watchdog('uc_avatax', 'AvaTax request failed. This may be an out of date SSL certificates on your server. message: %msg', array('%msg' => curl_error($curl)), WATCHDOG_ERROR);
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }
  $meta = curl_getinfo($curl);
  curl_close($curl);

  if ($mode == UC_AVATAX_DEVELOPMENT_MODE) {
    watchdog('uc_avatax', 'Request info: !url !headers !body !response !meta', array(
      '!url' => "<pre>URL : $url</pre>",
      '!headers' => "<pre>Request Headers:\n" . var_export($curl_opts[CURLOPT_HTTPHEADER], TRUE) . '</pre>',
      '!body' => "<pre>Request body:\n" . $data . '</pre>',
      '!response' => "<pre>Response:\n" . var_export($body, TRUE) . '</pre>',
      '!meta' => "<pre>Response Meta:\n" . var_export($meta, TRUE) . '</pre>',
            ), WATCHDOG_DEBUG);
  }

  if ($body) {
    $body_parsed = json_decode($body, TRUE);
    return array(
      'body' => $body_parsed,
      'meta' => $meta,
    );
  }
  else {
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }
}

/**
 * Returns AvaTax request configurations.
 */
function uc_avatax_get_config($account = '', $license = '', $base_url = '') {
  $mode = variable_get('uc_avatax_use_mode', UC_AVATAX_DEVELOPMENT_MODE);
  $version = variable_get('uc_avatax_product_version', UC_AVATAX_TRIAL_VERSION);
  if (!$account) {
    $account = variable_get('uc_avatax_' . $version . '_' . $mode . '_account');
  }
  if (!$license) {
    $license = variable_get('uc_avatax_' . $version . '_' . $mode . '_license');
  }
  if (!$base_url) {
    if ($mode == UC_AVATAX_DEVELOPMENT_MODE) {
      $base_url = 'https://development.avalara.net/1.0';
    }
    elseif ($mode == UC_AVATAX_PRODUCTION_MODE) {
      $base_url = 'https://rest.avalara.net/1.0';
    }
  }
  return array($mode, $version, $account, $license, $base_url);
}

/**
 * Determine whether we should calculate tax for this order or not.
 */
function uc_avatax_check_address($order) {
  $tax_address_profile = variable_get('uc_avatax_tax_address', '');
  // Get delivery info out
  if ($tax_address_profile == 'Billing') {
    $street1 = $order->billing_street1;
    $street2 = $order->billing_street2;
    $city = $order->billing_city;
    $zone = $order->billing_zone;
    $country_code = $order->billing_country;
    $zip = $order->billing_postal_code;
  }
  elseif ($tax_address_profile == 'Shipping') {
    $street1 = $order->delivery_street1;
    $street2 = $order->delivery_street2;
    $city = $order->delivery_city;
    $zone = $order->delivery_zone;
    $country_code = $order->delivery_country;
    $zip = $order->delivery_postal_code;
  }

  // exit if address is incomplete
  if ( !$street1 || !$city || !$zone || !$zip ) {
    return FALSE;
  }

  // Convert State Code to State Abbreviation
  $state = uc_get_zone_code($zone);

  // Exit if delivery address state is not in list of active states.
  $avatax_states = variable_get('uc_avatax_select_states', array());
  if (!empty($avatax_states) && !in_array($state, $avatax_states)) {
    return FALSE;
  }
  return TRUE;
}

// Construct sales tax return for uc_tax
function uc_avatax_result($tax_data){
  // Populate sales tax return defaults
  $avatax = array();
  $tax_title = (variable_get('uc_avatax_tax_description', ''));
  $namesuf = '';                                          
  $loccode = '';
                                                          
  // Initialize sales tax return array
  $ret = array();                                         
  $ret = (object) array(                                  
    'id' => uc_avatax_get_safe_id(),                  
    'name' => t(''  . $tax_title . '') . $namesuf,        
    'amount' => $tax_data['tax_amount'],                  
    'weight' => 0,                                        
    'summed' => 1,                                        
    );                                                    
                                                          
  // Calculate tax rate based on tax and taxable amount
  if ($tax_data['taxable_amount'] == 0) {
    $tax_rate = 0;
  }
  else {
    $tax_rate = round(($tax_data['tax_amount'] / $tax_data['taxable_amount']), 4);
  }

  $loccode = $tax_data['city'];
  if ($loccode && variable_get('uc_avatax_show_loc', '')) {
    $namesuf = ' (' . $loccode . ')';
  }

  $ret = (object) array(
    'id' => uc_avatax_get_safe_id(),
    'name' => t(''  . $tax_title . '') . $namesuf,
    'amount' => $tax_data['tax_amount'],
    'weight' => 0,
    'summed' => 1,
    );

  $ret->data = array(
    'tax_id' => $ret->id,
    'tax_rate' => $tax_rate,
    'taxable_amount' => $tax_data['taxable_amount'],
    'tax_jurisdiction' => $loccode,
    );

  $avatax[$ret->id] = $ret;
  return $avatax;
}

/**
 * Returns a safe ID number to use for tax (larger than any in the tax module).
 *
 * Have to have a numeric ID for some of the preview stuff to work. Trust me.
 * Comes from some stuff in uc_taxes.js, interacting with some stuff in
 * uc_payment.js. Specifically, set_line_item() takes a key, which the tax
 * module sets to "tax_" . id value. Then the serializeOrder function sets the
 * line item type to be the part of key up to the _, but only if the part after
 * the _ is numeric. And the line item type does need to be set to 'tax' for
 * the preview part to work, because that's how the line item code knows it
 * is a tax.
 */
function uc_avatax_get_safe_id() {
  $maxid = 1;
  $rates = uc_taxes_rate_load();
  foreach ($rates as $id => $info) {
    if ($id >= $maxid) {
      $maxid = $id;
    }
  }

  return $maxid + 99;
}
