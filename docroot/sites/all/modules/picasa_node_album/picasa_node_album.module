<?php

/**
 * @file
 * This module enables the association of picasa galleries to nodes.
 */

/**
 * Implements hook_perm().
 */
function picasa_node_album_permission() {
  return array(
    'view picasa albums' => array(
      'title' => t('View Picasa Albums'),
      'description' => t('User may view Picasa albums.'),
    ),
    'add picasa albums' => array(
      'title' => t('Add Picasa Albums'),
      'description' => t('User may add Picasa albums to content.'),
    ),
    'remove own albums' => array(
      'title' => t('Remove own Picasa Albums'),
      'description' => t('User may remove their own Picasa albums.'),
    ),
    'remove any albums' => array(
      'title' => t('Remove Any Album'),
      'description' => t('User may remove any Picasa album.'),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function picasa_node_album_requirements($phrase) {
  $requirements = array();
  // Define runtime requirements.
  if ($phrase == 'runtime') {
    $client = FALSE;
    $requirements['picasa_node_album'] = array('title' => 'Picasa Node Album');

    // Check if zend framework is installed correctly.
    $path = zend_get_path();
    $zend_version = $path ? Zend_Version::VERSION : NULL;

    if (!isset($zend_version)) {
      $requirements['picasa_node_album']['value'] = t('Zend Framework Failed.');
      $requirements['picasa_node_album']['description'] = t('Zend Framework does not appear to be installed properly.');
      $requirements['picasa_node_album']['severity'] = REQUIREMENT_WARNING;
    }
    else {
      // ZF is configured correctly, now create a Google API client.
      $client = _picasa_node_album_get_client();
    }
    // Test if the Google API client initiated successfully.
    if ($client == FALSE) {
      $requirements['picasa_node_album']['value'] = t('Invalid Google API Login');
      $requirements['picasa_node_album']['description'] = t('Invalid Google API login. Configure your Picasa Node Album settings.');
      $requirements['picasa_node_album']['severity'] = REQUIREMENT_WARNING;
    }
    else {
      $requirements['picasa_node_album']['value'] = 'ok';
      $requirements['picasa_node_album']['severity'] = REQUIREMENT_OK;
    }
  }
  return $requirements;
}


/**
 * Implements hook_theme().
 */
function picasa_node_album_theme() {
  return array(
    'picasa_node_album_list' => array(
      'arguments' => array('nid' => 0, 'albums' => array()),
      'template' => 'templates/picasa-node-album-list',
    ),
    'picasa_node_album_detail' => array(
      'arguments' => array('nid' => 0, 'node_url' => '', 'title' => '', 'uid' => 0, 'author' => '', 'postedby' => '', 'images' => array()),
      'template' => 'templates/picasa-node-album-detail',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function picasa_node_album_menu() {
  $items = array();
  $items['ajax/picasa_albums'] = array(
    'page callback'   => 'picasa_node_album_js_albums',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file'            => 'picasa_node_album.pages.inc',
  );
  // users only need to edit if there is more than one option
  $field = _picasa_node_album_get_google_user_field();
  if (isset($field['#type']) && $field['#type'] != 'hidden') {
    $items['user/%/edit/picasa-node-album'] = array(
      'title'             => 'Picasa Account Settings',
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('picasa_node_album_user_edit', 1),
      'access callback'   => 'user_access',
      'access arguments'  => array('add picasa albums'),
      'type'              => MENU_LOCAL_TASK,
      'file'              => 'picasa_node_album.pages.inc'
    );
  }
  $items['node/%/manage-albums'] = array(
    'title'             => 'Manage Albums',
    'description'       => 'Configuration options for Picasa node Album',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('picasa_node_album_add', 1),
    'access callback'   => '_picasa_node_album_access_loader',
    'access arguments'  => array(1),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'picasa_node_album.pages.inc'
  );
  $menu_type = variable_get('picasa_node_album_view_tab', 0) ? MENU_LOCAL_TASK : MENU_CALLBACK;
  $items['node/%/albums'] = array(
    'title'             => 'Albums',
    'description'       => 'Individual album view',
    'page callback'     => 'picasa_node_album_detail',
    'page arguments'    => array(1),
    'access callback'   => 'user_access',
    'access arguments'  => array('view picasa albums'),
    'type'              => $menu_type,
    'file'              => 'picasa_node_album.pages.inc'
  );
  $items['admin/config/media/picasa-node-album'] = array(
    'title'             => 'Picasa Node Album',
    'description'       => 'Configuration options for Picasa node Album',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('picasa_node_album_admin'),
    'access arguments'  => array('access administration pages'),
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'picasa_node_album.admin.inc'
  );
  return $items;
}

/**
 * Implements of hook_node_view().
 */
function picasa_node_album_node_view($node, $view_mode, $langcode) {
  // Load up the node types that albums are assigned to.
  $types = _picasa_node_album_get_node_types();
  // Return if we should not be showing the album
  if (  !isset($types[$node->type]) ||
        !user_access('view picasa albums') ||
        ($view_mode == 'teaser' && !variable_get('picasa_node_album_view_teaser', FALSE)) ||
        ($view_mode == 'full' && !variable_get('picasa_node_album_view_page', TRUE))
      ) {
    return;
  }

  // Load up the albums for this node.
  $albums = _picasa_node_album_get_list($node->nid);

  // Add a content display for the albums.
  $node->content['picasa_node_album_list'] = array(
    '#subject' => t('Albums'),
    '#markup' => theme('picasa_node_album_list', array('node' => $node->nid, 'albums' => $albums)),
    '#weight' => variable_get('picasa_node_album_view_weight', 10),
  );
}

/**
 * Implements hook_flush_caches().
 */
function picasa_node_album_flush_caches() {
  db_query("UPDATE {picasa_node_album} SET images = ''");
}

/**
 * Returns an array of albums for the node given
 */
function _picasa_node_album_get_list($nid) {
  // Init vars we need to handle this.
  $albums = array();
  $cache_min = (int)variable_get('picasa_node_album_cache_min', 86400);
  $preview_images = variable_get('picasa_node_album_preview_num', 0);

  // Query for the albums associated with this node.
  $result = db_select('picasa_node_album', 'pna')
    ->fields('pna', array('uid', 'google_user', 'album_id', 'title', 'added', 'updated', 'images'))
    ->condition('nid', $nid)
    ->execute();

  // Build the $albums array with the results.
  foreach ($result as $record) {
    $account = user_load($record->uid);
    $albums[$record->album_id]['postedby'] = t('posted by') . ' ' . l($account->name, 'user/' . $account->uid, array('html' => TRUE));
    $albums[$record->album_id]['author'] = l($account->name, 'user/' . $account->uid, array('html' => TRUE));
    $albums[$record->album_id]['title'] = $record->title;
    $albums[$record->album_id]['uid'] = $account->uid;
    $albums[$record->album_id]['link'] = l(t('View Entire Album'), 'node/' . $nid . '/albums/' . $record->album_id);

    $cache_expires = $record->updated + $cache_min;
    // Only make call to Picasa if the rows are empty and cache is expired.
    if (empty($record->images) || ($cache_min != -1 && time() > $cache_expires)) {
      $albums[$record->album_id]['images'] = _picasa_node_album_get_images($record->google_user, $record->album_id);
    }
    // Otherwise, just load the cached images.
    else {
      $albums[$record->album_id]['images'] = unserialize($record->images);
    }

    // Set the image count & copy.
    $albums[$record->album_id]['image_count'] = count($albums[$record->album_id]['images']);
    $albums[$record->album_id]['total_images'] = format_plural(count($albums[$record->album_id]['images']), '1 image', '@count images');

    // Set preview array subset of images.
    if ($preview_images > 0 && $preview_images < count($albums[$record->album_id]['images'])) {
      $albums[$record->album_id]['images'] = array_slice($albums[$record->album_id]['images'], 0, $preview_images);
      $albums[$record->album_id]['preview_mode'] = TRUE;
    }
  }

  return $albums;
}

/**
 * Helper function to determine if the user can add an album for this node.
 */
function _picasa_node_album_access_loader($nid) {
  // Check permission first
  if (!user_access('add picasa albums')) {
    return FALSE;
  }
  // Check that this node type is enabled for these albums.
  $node = node_load($nid);
  $types = _picasa_node_album_get_node_types();
  if (!isset($types[$node->type])) {
    return FALSE;
  }
  // All clear.
  return TRUE;
}

/**
 * Log into GoogleAPI and return the client.
 */
function _picasa_node_album_get_client() {
  // Return the client if it has been loaded already.
  static $pna_client;
  if (isset($pna_client)) {
    return $pna_client;
  }

  // Initialize the vars for the API call.
  $serviceName = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
  $user =  variable_get('picasa_node_album_google_user', '');
  $pass =  variable_get('picasa_node_album_google_pass', '');
  $pna_client = NULL;

  // Attempt to create the client.
  try {
    $pna_client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $serviceName);
  } catch (Zend_Gdata_App_HttpException $e) {
    watchdog('Picasa Node Album', $e->getMessage(), array(), WATCHDOG_ERROR);
    if ($e->getResponse() != NULL) {
      watchdog('Picasa Node Album', $e->getResponse()->getBody(), array(), WATCHDOG_ERROR);
      return FALSE;
    }
  } catch (Zend_Gdata_App_Exception $e) {
    watchdog('Picasa Node Album', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Return the client.
  return $pna_client;
}

/**
 * Returns an array of albums for the current user keyed by album gphotoId.
 */
function _picasa_node_album_get_albums($key = 'id') {
  global $user;
  // Load up the GoogleAPI Client.
  $client = _picasa_node_album_get_client();
  // Set the Google User.
  $google_user = _picasa_node_album_get_user_google_account($user->uid);

  // Update the second argument to be CompanyName-ProductName-Version
  $gp = new Zend_Gdata_Photos($client, "Google-DevelopersGuide-1.0");
  $albums = array();

  try {
    $userFeed = $gp->getUserFeed($google_user);
    foreach ($userFeed as $userEntry) {
      if ($key == 'id') {
        $albums[$userEntry->gphotoId->text] = $userEntry->title->text;
      }
      else {
        $albums[$userEntry->title->text] = $userEntry->title->text;
      }
    }
  } catch (Zend_Gdata_App_HttpException $e) {
    watchdog('Picasa Node Album', $e->getMessage(), array(), WATCHDOG_ERROR);
    if ($e->getResponse() != NULL) {
      watchdog('Picasa Node Album', $e->getResponse()->getBody(), array(), WATCHDOG_ERROR);
    }
  } catch (Zend_Gdata_App_Exception $e) {
    watchdog('Picasa Node Album', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  return $albums;
}

/**
 * Returns an array of images for the given album id.
 */
function _picasa_node_album_get_images($google_user, $album_id) {
  $client = _picasa_node_album_get_client();

  // update the second argument to be CompanyName-ProductName-Version
  $gp = new Zend_Gdata_Photos($client, "Google-DevelopersGuide-1.0");

  try {
    $query = $gp->newAlbumQuery();

    $query->setUser($google_user);
    $query->setAlbumId($album_id);

    $albumFeed = $gp->getAlbumFeed($query);
    foreach ($albumFeed as $albumEntry) {
      $images[] = _picasa_node_album_get_image_data($albumEntry);
    }

    // update node and cache
    db_query("UPDATE {picasa_node_album} SET updated = :updated, images = :images WHERE google_user = :google_user AND album_id = :album_id",
              array(':updated' => time(), ':images' => serialize($images), ':google_user' => $google_user, ':album_id' => $album_id));

  } catch (Zend_Gdata_App_HttpException $e) {
    watchdog('Picasa Node Album', $e->getMessage(), array(), WATCHDOG_ERROR);
    if ($e->getResponse() != NULL) {
      watchdog('Picasa Node Album', $e->getResponse()->getBody(), array(), WATCHDOG_ERROR);
    }
  } catch (Zend_Gdata_App_Exception $e) {
    watchdog('Picasa Node Album', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  return $images;
}

/**
 * Retuns a formatted array of image properties
 */
function _picasa_node_album_get_image_data($photoEntry) {
  $camera = '';
  $contentUrl = '';
  $firstThumbnailUrl = '';
  $title = '';
  $summary = '';
  $google_image_size=variable_get('picasa_node_album_image_size', 576);
  $google_thumb_size=variable_get('picasa_node_album_thumb_size', 72);

  $albumId  = $photoEntry->getGphotoAlbumId()->getText();
  $photoId  = $photoEntry->getGphotoId()->getText();
  $title    = $photoEntry->getTitle()->getText();
  $summary  = $photoEntry->getSummary()->getText();

  if ($photoEntry->getExifTags() != NULL &&
      $photoEntry->getExifTags()->getMake() != NULL &&
      $photoEntry->getExifTags()->getModel() != NULL) {
      $camera = $photoEntry->getExifTags()->getMake()->getText() . " " .
                $photoEntry->getExifTags()->getModel()->getText();
  }

  if ($photoEntry->getMediaGroup()->getContent() != NULL) {
    $mediaContentArray = $photoEntry->getMediaGroup()->getContent();
    $contentUrl = $mediaContentArray[0]->getUrl();
  }

  if ($photoEntry->getMediaGroup()->getThumbnail() != NULL) {
    $mediaThumbnailArray = $photoEntry->getMediaGroup()->getThumbnail();
    $firstThumbnailUrl = $mediaThumbnailArray[0]->getUrl();
  }

  // this hacks the predefined thumbnail size
  $thumb_sub = '/s' . $google_thumb_size . '/';
  $modified_thumbnail_url = str_replace('/s72/', $thumb_sub, $firstThumbnailUrl);

  $image = array();
  $image['album_id'] = $albumId;
  $image['photo_id'] = $photoId;
  $image['camera'] = $camera;
  $image['image'] = $contentUrl . '?imgmax=' . $google_image_size;
  $image['thumbnail'] = $modified_thumbnail_url;
  $image['title'] = $title;
  $image['summary'] = $summary;

  return $image;
}

/**
 * Returns the google account the user should be using
 */
function _picasa_node_album_get_user_google_account($uid) {

  // Query for accounts for this user.
  $google_user = db_select('picasa_node_album_users', 'pnau')
    ->fields('pnau', array('google_user'))
    ->condition('pnau.uid', $uid)
    ->execute()
    ->fetchField();

  // Return default account if none are found.
  if (empty($google_user)) {
    return variable_get('picasa_node_album_default_account', '');
  }

  // Make sure username is still valid according to site restrictions.
  if (!_picasa_node_album_validate_account($google_user)) {
    // If not, set a valid google account.
    $google_user = _picasa_node_album_set_valid_user($uid);
  }

  return $google_user;
}

/**
 * validates username against name restriction settings
 */
function _picasa_node_album_validate_account($google_user) {
  // run through allowed accounts to make sure the user still complies
  $allowed_accounts =  variable_get('picasa_node_album_accounts', '');
  $exploded = explode("\n", $allowed_accounts);
  $valid = TRUE;

  if (count($exploded) > 0 && !empty($exploded[0])) {
    $found = FALSE;
    foreach ($exploded as $a) {
      if (trim($a) == $google_user) {
        $found = TRUE;
        break;
      }
    }
    if (!$found) {
      $valid = FALSE;
      return FALSE;
    }
  }

  // run through blacklist accounts to make sure the user still complies
  $blacklist_accounts =  variable_get('picasa_node_album_exclude_accounts', '');
  $exploded = explode("\n", $blacklist_accounts);

  if (count($exploded) > 0 && !empty($exploded[0])) {
    $found = FALSE;
    foreach ($exploded as $a) {
      if (trim($a) == $google_user) {
        $valid = FALSE;
        return FALSE;
        break;
      }
    }
  }

  return $valid;
}

/**
 * Adds a default valid account for the user.
 */
function _picasa_node_album_set_valid_user($uid) {
  $google_user = variable_get('picasa_node_album_default_account', '');

  if (!$google_user) {
    $allowed_accounts =  variable_get('picasa_node_album_accounts', '');

    if (!empty($exploded[0])) {
      $google_user = trim($exploded[0]);
    }
  }

  $result = db_selet('picasa_node_album_users', 'pnau')
    ->fields('pnau', array('google_user'))
    ->condition('pnau.uid', $uid)
    ->execute();

  if ($result->rowCount() > 0) {
    db_query("UPDATE {picasa_node_album_users} SET google_user = :google_user WHERE uid = :uid", array(':google_user' => $google_user, ':uid' => $uid));
  }
  else {
    db_query("INSERT INTO {picasa_node_album_users} (google_user, uid) VALUES(:google_user, :uid)", array(':google_user' => $google_user, ':uid' => $uid));
  }

  return $google_user;
}

/**
 * returns a form field for google user
 */
function _picasa_node_album_get_google_user_field() {
  $field = NULL;

  $allowed_accounts =  variable_get('picasa_node_album_accounts', '');
  $exploded = explode("\n", $allowed_accounts);

  // If accounts are restricted to allowed accounts, provide a drop down.
  if (count($exploded) > 1 && !empty($exploded[0])) {

    $options['0'] = t('<select one>');
    foreach ($exploded as $a) {
      $a = trim($a);
      $options[$a] = $a;
    }
    $field = array(
      '#type' => 'select',
      '#title' => t('Switch Picasa Account'),
      '#description' => t('Enter the username for your google account.'),
      '#options' => $options
    );
  }
  elseif (empty($allowed_accounts))  {
    $field = array(
    '#type' => 'textfield',
    '#title' => t('Switch Picasa Account'),
    '#size' => 20
    );
  }
  else {
    $field = array(
      '#type' => 'hidden',
      '#value' => $exploded[0]
    );
  }

  return $field;
}

/**
 * This function returns the selected node types for picasa node album
 */
function _picasa_node_album_get_node_types() {
  return unserialize(variable_get('picasa_node_album_node_types', serialize(array())));
}
