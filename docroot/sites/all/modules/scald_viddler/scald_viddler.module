<?php
/**
 * @file
 * Defines a Viddler provider for Scald.
 *
 * @link http://developers.viddler.com/documentation/api-v2/ Viddler API Version 2 documentation. @endlink
 *
 */

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'scald_viddler') . '/scald_viddler.api2.inc';
define('VIDDLER_WEB', 'http://www.viddler.com/v/');

/**
 * Implements hook_scald_atom_providers().
 * Tell Scald that we'll be providing some video atoms.
 */
function scald_viddler_scald_atom_providers() {
  return array(
    'video' => 'Video hosted on Viddler',
  );
}

/**
 * Implements hook_scald_add_form().
 */
function scald_viddler_scald_add_form(&$form, &$form_state) {
  $form['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Video identifier'),
    '#element_validate' => array('scald_viddler_validate_id'),
    '#default_value' => '',
  );
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_viddler_scald_add_form_fill(&$atom, $form, $form_state) {

  // Get the Viddler video id.
  $video_id = scald_viddler_parse_id($form_state['values']['identifier'], TRUE);

  // Get video info
  $video_info = scald_viddler_video($video_id);

  $atom->base_id = $video_id;
  $atom->title = isset($video_info['video']['title']) ? $video_info['video']['title'] : '';

  // Add the author.
  $atom->scald_authors[LANGUAGE_NONE][0] = array(
    'tid' => 0,
    'taxonomy_term' => (object)(array('name' => isset($video_info['video']['author']) ? $video_info['video']['author'] : '')),
  );

  // Add any tags.
  if (isset($video_info['video']['tags']) && count($video_info['video']['tags'])) {
    foreach ($video_info['video']['tags'] as $tag_key => $tag) {
      $atom->scald_tags[LANGUAGE_NONE][$tag_key] = array(
        'tid' => $tag_key,  // This is not a real tid, it's just an index.
        'taxonomy_term' => (object)(array('name' => $tag['text'])),
      );
    }
  }

  if (!isset($atom->data)) {
    $atom->data = array();
  }

  // The embed code here is just a basic one without any player parameters.
  // Store it, and it can be used as a backup in case the scald_viddler_get_embed_code() call in the prerender hook fails.
  if (isset($video_info['video']['embed_code']) && !empty($video_info['video']['embed_code'])) {
    $atom->data['basic_embed_code'] = $video_info['video']['embed_code'];
  }

  // Download a copy of the video thumbnail.
  if (isset($video_info['video']['thumbnail_url']) && !empty($video_info['video']['thumbnail_url'])) {
    $thumbnail_request = drupal_http_request($video_info['video']['thumbnail_url']);
    $dir = 'public://viddler';
    if ($thumbnail_request->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
      $destination = $dir . '/' . $video_id . '.jpg';
      $file = file_save_data($thumbnail_request->data, $destination);

      // Set the file status to temporary
      $query = db_update('file_managed')
        ->condition('fid', $file->fid)
        ->fields(array('status' => 0))
        ->execute();

      $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array)$file;
    }
  }
}

/**
 * Implements hook_scald_fetch().
 */
function scald_viddler_scald_fetch($atom, $type) {
  $file = 'public://viddler/' . $atom->base_id . '.jpg';
  if (file_exists($file)) {
    $atom->file_source = $atom->thumbnail_source = $file;
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_viddler_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    if ($context != 'sdl_library_item') {
      if ($embed_code = scald_viddler_get_embed_code($atom->base_id)) {
        $atom->rendered->player = $embed_code;
      }
      else {
        $atom->rendered->player = isset($atom->data['basic_embed_code']) ? $atom->data['basic_embed_code'] : '';
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function scald_viddler_permission() {
  return array(
    'administer scald viddler' => array(
      'title' => t('Administer Scald Viddler'),
      'description' => t('Manage Viddler API credentials.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function scald_viddler_menu() {
  $items = array();
  $items['admin/config/media/scald_viddler'] = array(
    'title' => 'Viddler Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scald_viddler_authentication_form'),
    'access arguments' => array('administer scald viddler'),
    'description' => 'Configure the credentials used to sign into Viddler',
    'file' => 'scald_viddler.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Get information on a specific video.
 *
 * @param $video_id
 *   The Viddler video id.
 *
 * @return array
 *   An array containing the video information. All the video information is returned
 */
function scald_viddler_video($video_id) {
  $query = array(
    'video_id' => $video_id,
    'status' => '0', // Only return data on videos that are ready to view.
    'include_comments' => '0', // Don't bother returning comments.
    'add_embed_code' => '1', // Grab an embed code too.
    'add_view_token' => '1',
  );
  return scald_viddler_call_method('viddler.videos.getDetails', $query);
}

/**
 * Get the markup to embed a specific video.
 *
 * @param $video_id
 *   The Viddler video id.
 *
 * @return string
 *   A string containing the markup.
 */
function scald_viddler_get_embed_code($video_id) {
  $query = array(
    'video_id' => $video_id,
    'player_type' => 'simple',
    'autoplay' => '0',
    'embed_code_type' => '5', // iframe.
  );

  $embed_data = scald_viddler_call_method('viddler.videos.getEmbedCode', $query);
  if (isset($embed_data['video']['embed_code'])) {
    return $embed_data['video']['embed_code'];
  }
  else {
    return FALSE;
  }
}

/**
 * Checks if a video has already been imported, based on its video id.
 *
 * @param $video_id
 *   The Viddler video id.
 *
 * @return mixed
 *   FALSE if the video has never imported, the scald identifier of the video otherwise.
 */
function scald_viddler_already_imported($video_id) {
  $video_query = array('provider' => 'scald_viddler', 'base_id' => $video_id);
  return scald_search($video_query, FALSE, TRUE);
}

/**
 * Form element validation handler for the Viddler identifier.
 */
function scald_viddler_validate_id($element, &$form_state) {
  $video_id = scald_viddler_parse_id($form_state['values']['identifier'], TRUE);
  if (!$video_id) {
    // scald_viddler_parse_id() will fail if the API credentials haven't been set up yet.
    // Check to see if we can authenticate.
    if (scald_viddler_authenticate()) {
      // Yes, authenticated ok, so it's a parsing problem with the identifier entered.
      form_error($element, t('Invalid Viddler video identifier.'));
    }
    else {
      form_error($element, t('Unable to connect to Viddler to validate this identifier. Please ask your administrator to check the Viddler API credentials.'));
    }
  }
  else {
    if (scald_viddler_already_imported($video_id)) {
      form_error($element, t('This Viddler video has already been imported.'));
    }
  }
}

/**
 * Parse a Viddler ID string and check validity.
 *
 * @param $string
 *   The string to parse.
 * @param $check
 *   If set to TRUE, a check is made to ensure the extracted video id exists on Viddler.
 *
 * @return mixed
 *   If successful, returns a string containing the video id, otherwise returns FALSE.
 *
 */
function scald_viddler_parse_id($string, $check = NULL) {
  $video_id = NULL;
  $string = trim($string);
  if (!preg_match('/^[a-zA-Z0-9]+$/', $string)) {
    // This is not just a string id.
    if (preg_match('#^' . VIDDLER_WEB . '([a-zA-Z0-9]+)(_.*)?$#', $string, $matches)) {
      // This string is a full viddler URL
      $video_id = $matches[1];
    }
    else {
      if (preg_match("/^http/", $string)) {
        // Probably a shortened url.
        $response = drupal_http_request($string);
        if ($response->code == 200 && isset($response->redirect_code) && ($response->redirect_code == 301 || $response->redirect_code == 302)) {
          return scald_viddler_parse_id($response->redirect_url, $check);
        }
      }
    }
  }
  else {
    $video_id = $string;
  }

  if ($video_id && $check) {
    // Final check to confirm this video really does exist on Viddler.
    if (!scald_viddler_video($video_id)) {
      $video_id = FALSE;
    }
  }
  return $video_id;
}
