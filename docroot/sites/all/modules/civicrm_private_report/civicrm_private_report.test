<?php
/**
 * @file
 * Simpletest for civicrm_activity_ical module
 */

module_load_include('php', 'civicrm_private_report', 'tests/civicrm_private_report_web_test_case');

class CiviCRMPrivateReportTestCase1 extends CiviCRMPrivateReportTestWebTestCase {

  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Framework test',
      'description' => 'Ensure test framework is properly working',
      'group' => 'CiviCRM private report',
    );
  }

  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp(array('civicrm_private_report'));
    parent::setUpData();

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array('access content', 'access CiviCRM'));
    $this->drupalLogin($this->privileged_user);
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  /**
   * Tests if user can access feed info page
   */
  public function testTest() {
    $this->drupalGet('<front>');
    $this->assertResponse(200, 'User can access front page');
  }
}

class CiviCRMPrivateReportTestCase2 extends CiviCRMPrivateReportTestWebTestCase {

  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user1;
  protected $privileged_user2;

  public static function getInfo() {
    return array(
      'name' => 'Non-privileged user',
      'description' => 'Tests permission enforcement for users who should not be able to access module features.',
      'group' => 'CiviCRM private report',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp(array('civicrm_private_report'));
    parent::setUpData();

    $this->privileged_user1 = $this->drupalCreateUser(array('access CiviCRM', 'access CiviReport', 'access Report Criteria'));
    $this->privileged_user2 = $this->drupalCreateUser(array('access CiviCRM', 'access CiviReport', 'administer own CiviCRM reports'));

  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  function testUserCannotSeeSaveAsControls() {
    $this->drupalLogin($this->privileged_user1);
    $this->pass("logged in uid: {$this->privileged_user1->uid}");
    $this->drupalGet('civicrm/report/instance/1', array('query' => array('reset' => '1')));
    $this->assertNoText(t('Save a copy as'), 'Ensure user cannot see Save-as controls in a report.');

    $this->drupalLogin($this->privileged_user2);
    $this->pass("logged in uid: {$this->privileged_user2->uid}");
    $this->drupalGet('civicrm/report/instance/1', array('query' => array('reset' => '1')));
    $this->assertNoText(t('Save a copy as'), 'Ensure user cannot see Save-as controls in a report.');
  }

  function testUserCannotAccessPrivateReportListing() {
    // User gets 'access denied' on private report listing page.

    $this->drupalLogin($this->privileged_user1);
    $this->pass("logged in uid: {$this->privileged_user1->uid}");
    $this->drupalGet('civicrm_private_report/list');
    $this->assertResponse(403, t('Ensure access is denied to report listing'));

    $this->drupalLogin($this->privileged_user2);
    $this->pass("logged in uid: {$this->privileged_user2->uid}");
    $this->drupalGet('civicrm_private_report/list');
    $this->assertResponse(403, t('Ensure access is denied to report listing'));
  }

  function testUserCannotAccessAllPrivateReportListing() {
    // User gets 'access denied' on private report listing page.

    $this->drupalLogin($this->privileged_user1);
    $this->pass("logged in uid: {$this->privileged_user1->uid}");
    $this->drupalGet('civicrm_private_report/list/all');
    $this->assertResponse(403, t('Ensure access is denied to all private reports listing'));

    $this->drupalLogin($this->privileged_user2);
    $this->pass("logged in uid: {$this->privileged_user2->uid}");
    $this->drupalGet('civicrm_private_report/list/all');
    $this->assertResponse(403, t('Ensure access is denied to all private reports listing'));
  }
}

class CiviCRMPrivateReportTestCase3 extends CiviCRMPrivateReportTestWebTestCase {
  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Privileged user',
      'description' => 'Tests behavior for non-admin users who should be able to access module features.',
      'group' => 'CiviCRM private report',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp(array('civicrm_private_report'));
    parent::setUpData();

    $this->privileged_user = $this->drupalCreateUser(array('access CiviCRM', 'access CiviReport', 'access Report Criteria', 'administer own CiviCRM reports'));
    $this->drupalLogin($this->privileged_user);
    $this->pass("logged in uid: {$this->privileged_user->uid}");

    // Adjust permissions on report #1, so our user can access it.
    civicrm_initialize();
    require_once 'CRM/Report/BAO/Instance.php';
    CRM_Report_BAO_Instance::retrieve( array('id' => 1), $instance_values );
    $bao = new CRM_Report_BAO_Instance();
    $bao->id = 1;
    $bao->permission = 'access CiviCRM';
    $bao->save();
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  function testUserCanSaveAs() {
    $this->drupalGet('civicrm/report/instance/1', array('query' => array('reset' => '1')));
    $this->assertText(t('Save a copy as'), 'Ensure user can see Save-as controls in a report.');

    $save_as_name = $this->randomName();
    $post_data = array(
      'save_as_name' => $save_as_name,
    );
    $this->drupalPost('civicrm/report/instance/1', $post_data, t('Save copy'), array('query' => array('reset' => '1')));
    $this->assertText(t('Your new report has been created.'), 'Report success message displayed. User can "save as".');
    $this->assertTitle("$save_as_name | Drupal", 'After "save as", new report is displayed with correct name.');
  }

  function testUserCanAccessPrivateReportListing() {
    // User gets access to private report listing page.
    $this->drupalGet('civicrm_private_report/list');
    $this->assertResponse(200, t('Ensure access is allowed to report listing'));
    $this->assertTitle(t('My user-private reports') . ' | Drupal', 'Page title is correct on user\'s private report listing.');
  }

  function testUserCannotAccessAllPrivateReportListing() {
    $this->drupalGet('civicrm_private_report/list/all');
    $this->assertResponse(403, t('Ensure access is denied to all private reports listing.'));
  }

  function testPrivateReportsAreListedCorrectly() {
    $save_as_name = $this->randomName();
    $post_data = array(
      'save_as_name' => $save_as_name,
    );
    $this->drupalPost('civicrm/report/instance/1', $post_data, t('Save copy'), array('query' => array('reset' => '1')));

    $this->drupalGet('civicrm_private_report/list');
    $this->assertText($save_as_name, "Ensure newly created private report ($save_as_name) is listed in My Private Reports.");

    $this->drupalGet('civicrm/report/list', array('query' => array('reset' => '1')));
    $this->assertText(t('Some user-private reports were found for you, not listed below. Manage user-private reports here.'), "Ensure link to user-private reports is included at top of CiviCRM Report Listing when user has existing private reports.");
    $this->assertNoText($save_as_name, "Ensure user-private reports not listed on CiviCRM Reports Listing page.");

    // Sign in as another user and ensure proper listing.
    $privileged_user2 = $this->drupalCreateUser(array('access CiviCRM', 'access CiviReport', 'access Report Criteria', 'administer own CiviCRM reports'));
    $this->drupalLogin($privileged_user2);
    $this->pass("logged in uid: {$privileged_user2->uid}");

    $this->drupalGet('civicrm/report/list', array('query' => array('reset' => '1')));
    $this->assertNoText(t('Some user-private reports were found for you, not listed below. Manage user-private reports here.'), "Ensure link to user-private reports is NOT included at top of CiviCRM Report Listing when user has NO existing private reports.");
    $this->assertNoText($save_as_name, "Ensure user-private reports not listed on CiviCRM Reports Listing page.");

    $this->drupalGet('civicrm_private_report/list');
    $this->assertText(t('No user-private reports were found for you.'), "Ensure 'no reports found' message displayed in private reports listing when user has no private reports.");

    $args = array(
      '!link' => l(t('view the list of all CiviCRM Reports'), 'civicrm/report/list', array('query' => array('reset' => '1'))),
    );
    $this->assertRaw(t('You can !link.', $args), "Ensure link to CiviCRM reports listing is displayed in private reports listing when user has no private reports.");

  }

  function testUserCannotAccessOtherUsersPrivateReport() {
    $this->drupalGet('civicrm/report/instance/1', array('query' => array('reset' => '1')));
    $save_as_name = $this->randomName();
    $post_data = array(
      'save_as_name' => $save_as_name,
    );
    $this->drupalPost('civicrm/report/instance/1', $post_data, t('Save copy'), array('query' => array('reset' => '1')));
    $this->assertText(t('Your new report has been created.'), 'Report success message displayed. User can "save as".');
    $this->assertTitle("$save_as_name | Drupal", 'After "save as", new report is displayed with correct name.');
    $report_url = $this->getAbsoluteUrl($this->getUrl());

    // Now try accessing that report as another user.
    $privileged_user2 = $this->drupalCreateUser(array('access CiviCRM', 'access CiviReport', 'access Report Criteria', 'administer own CiviCRM reports'));
    $this->drupalLogin($privileged_user2);
    $this->pass("logged in uid: {$privileged_user2->uid}");

    $this->drupalGet($report_url);
    $this->assertResponse(403, 'Ensure one user cannot access another user\'s private report by direct URL.');

    $this->drupalGet('civicrm_private_report/list');
    $this->assertNoText($save_as_name, 'Ensure one user\'s private report is not listed in another user\'s own prvate report listing.');
  }
}

class CiviCRMPrivateReportTestCase4 extends CiviCRMPrivateReportTestWebTestCase {

  /**
   * User with rights to perform tested actions
   */
  protected $admin_user;
  protected $privileged_user;
  protected $save_as_name;

  public static function getInfo() {
    return array(
      'name' => 'Admin user',
      'description' => 'Tests behavior for users who should be able to administer module features.',
      'group' => 'CiviCRM private report',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp(array('civicrm_private_report'));
    parent::setUpData();

    $this->admin_user = $this->drupalCreateUser(array('access CiviCRM', 'access CiviReport', 'access Report Criteria', 'administer own CiviCRM reports', 'administer Reports'));
    $this->privileged_user = $this->drupalCreateUser(array('access CiviCRM', 'access CiviReport', 'access Report Criteria', 'administer own CiviCRM reports'));

    // Adjust permissions on report #1, so our privileged user can access it.
    civicrm_initialize();
    require_once 'CRM/Report/BAO/Instance.php';
    CRM_Report_BAO_Instance::retrieve( array('id' => 1), $instance_values );
    $bao = new CRM_Report_BAO_Instance();
    $bao->id = 1;
    $bao->permission = 'access CiviCRM';
    $bao->save();

    // Create a user-private report for priv user.
    $this->drupalLogin($this->privileged_user);
    $this->pass("logged in privileged user w/ uid: {$this->privileged_user->uid}");
    $this->drupalGet('civicrm/report/instance/1', array('query' => array('reset' => '1')));
    $elements = $this->xpath("//label[text()='" . t('Save a copy as') . "']");
    if (!empty($elements)) {
      $this->save_as_name = $this->randomName();
      $post_data = array(
        'save_as_name' => $this->save_as_name,
      );
      $this->drupalPost('civicrm/report/instance/1', $post_data, t('Save copy'), array('query' => array('reset' => '1')));
      $this->assertTitle("{$this->save_as_name} | Drupal", 'After "save as", new report is displayed with correct name.');
    }
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  function testAdminUserCanAccessAllPrivateReportListing() {
    $this->drupalLogin($this->admin_user);
    $this->pass("logged in admin user w/ uid: {$this->admin_user->uid}");

    $this->drupalGet('civicrm_private_report/list/all');
    $this->assertResponse(200, t('Ensure access is allowed to all private reports listing for admin user.'));
    $this->assertTitle(t('User-private reports') . ' | Drupal', 'Page title is correct on all private reports listing.');
    $elements = $this->xpath("//a/strong[text()='{$this->save_as_name}']/..");
    if (!empty($elements)) {
      $this->pass("Ensure all reports list includes privileged user's private report ({$this->save_as_name}).");
      $attributes = $elements[0]->attributes();
      $url = $this->getAbsoluteUrl($attributes['href']);
      $this->drupalGet($url);
      $this->assertResponse(200, "Ensure admin user has access to privileged user's private report ({$this->save_as_name}).");

      $this->drupalPost($url, array(), t('Promote to site-wide report'), array('query' => array('reset' => '1')));
      $this->assertResponse(200, 'Ensure admin has access to promote a user\'s private report to site-wide availability.');
      $this->assertText(t('This report has been promoted to site-wide availability.'), 'Ensure status message indicates site-wide promotion was performed.');

      $this->drupalGet('civicrm/report/list', array('query' => array('reset' => '1')));
      $this->assertResponse(200, 'Ensure admin user has access to CiviCRM report list.');
      $this->assertText($this->save_as_name, 'Ensure promoted user-private report is included in CiviCRM report listing.');
    }
    else {
      $this->fail("Ensure all reports list includes privileged user\'s private report ({$this->save_as_name}).");
    }
  }
}
