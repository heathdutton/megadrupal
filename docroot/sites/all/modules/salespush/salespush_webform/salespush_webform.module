<?php

/**
 * @file
 * Salespush Webform routines.
 */

/**
 * Implements hook_menu().
 */
function salespush_webform_menu() {
  $items = array();
  $items['node/%webform_menu/salespush'] = array(
    'title' => 'SalesPush',
    'page callback' => 'salespush_webform_nodeedit',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['salespush/autocomplete'] = array(
    'title' => 'Autocomplete list of SalesForce Campaigns',
    'page callback' => 'salespush_webform_get_all_campaigns',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Overview page for SalesPush Webform integration for this node.
 */
function salespush_webform_nodeedit($node) {
  $output = drupal_get_form('salespush_webform_campaigns', $node);

  return array(
    '#markup' => drupal_render($output),
  );
}

/**
 * Implements node/%nid/salespush form generation.
 *
 * @param array $form
 *   Drupal's form array.
 * @param array $form_state
 *   Drupal's form_state array.
 * @param object $node
 *   Current node, passed from menu router.
 *
 * @return array
 *   Returns standard Drupal's form array for been used in render.
 */
function salespush_webform_campaigns($form, &$form_state, $node) {

  $form['salespush_webform_source'] = array('#type' => 'hidden', '#value' => 'nid');
  $form['salespush_webform_getter'] = array('#type' => 'hidden', '#value' => $node->nid);
  $form['salespush_webform_type'] = array('#type' => 'hidden', '#value' => $node->type);

  $form['salespush_current_node_title'] = array(
    '#markup' => $node->title . '<br />',
  );

  $form['salespush_as_new_campaign'] = array(
    '#type' => 'button',
    '#value' => t('Push as new Campaign'),
    '#executes_submit_callback' => TRUE,
  );

  $form['salespush_node_mapping'] = array(
    '#type' => 'textfield',
    '#title' => 'Available Campaigns',
    '#default_value' => salespush_webform_get_mapped_id($node->nid),
    '#description' => 'Autocomplete list of SalesPush Campaigns. You may select one to be assigned to this node.',
    '#autocomplete_path' => 'salespush/autocomplete',
  );

  $form['salespush_save_node_mapping'] = array(
    '#type' => 'submit',
    '#value' => t('Save mapping'),
  );

  return $form;
}

/**
 * Submit callback for 'salespush_webform_campaigns' form.
 */
function salespush_webform_campaigns_submit($form, &$form_state) {
  $values = $form_state['values'];
  $environment = variable_get('salespush_mapper_cron_environment', 'sandbox');
  if ($values['op'] == t('Save mapping') && $values['salespush_node_mapping'] != '') {

    $num_deleted = db_delete('salespush_mapper')
      ->condition('source', $values['salespush_webform_source'])
      ->condition('environment', $environment)
      ->condition('getter', $values['salespush_webform_getter'])
      ->condition('type', $values['salespush_webform_type'])
      ->execute();

    db_merge('salespush_mapper')
      ->key(
        array(
          'destination' => $values['salespush_node_mapping'],
          'source' => $values['salespush_webform_source'],
          'environment' => $environment,
          'getter' => $values['salespush_webform_getter'],
          'type' => $values['salespush_webform_type']
        )
      )
      ->insertFields(
        array(
          'destination' => $values['salespush_node_mapping'],
          'source' => $values['salespush_webform_source'],
          'environment' => $environment,
          'getter' => $values['salespush_webform_getter'],
          'type' => $values['salespush_webform_type']
        )
      )
      ->execute();
    drupal_set_message(t('Mapping for this webform successfully saved.'));

  }

  if ($values['op'] == t('Push as new Campaign')) {

    $num_deleted = db_delete('salespush_mapper')
      ->condition('source', $values['salespush_webform_source'])
      ->condition('environment', $environment)
      ->condition('getter', $values['salespush_webform_getter'])
      ->condition('type', $values['salespush_webform_type'])
      ->execute();

    db_merge('salespush_mapper')
      ->key(
        array(
          'source' => $values['salespush_webform_source'],
          'environment' => $environment,
          'getter' => $values['salespush_webform_getter'],
          'type' => $values['salespush_webform_type']
        )
      )
      ->insertFields(
        array(
          'destination' => SALESPUSH_WEBFORM_MARKED_AS_NEW,
          'source' => $values['salespush_webform_source'],
          'environment' => $environment,
          'getter' => $values['salespush_webform_getter'],
          'type' => $values['salespush_webform_type']
        )
      )
      ->execute();
    drupal_set_message(t('This webform will be pushed as new Campaign to SalesForce at next cron run.'));
  }
}

/**
 * Autocomplete callback for obtaining list of Name => Id for available Campaigns from SalesForce.
 *
 * @param string $string
 *   String from autocomplete textbox to be used in SOQL query to SalesForce.
 *
 * @return string
 *   Returned JSON output string for autocomplete textfield.
 */
function salespush_webform_get_all_campaigns($string) {

  $environment = variable_get('salespush_mapper_cron_environment', 'sandbox');
  $client_data = salespush_get_client(
    salespush_get_username($environment),
    salespush_get_password($environment),
    salespush_get_wsdl($environment)
  );
  $client = $client_data['client'];

  $query_string = 'SELECT Id, Name from Campaign WHERE Name LIKE \'%' . $string . '%\'';

  $matches = array();
  try {
    $campaigns = $client->query($query_string);
    if (isset($campaigns->records) && !empty($campaigns->records)) {
      foreach ($campaigns->records as $id => $dataclass) {
        $matches[$dataclass->Id] = $dataclass->Name;
      }
    }
  }
  catch (Exception $e) {
    watchdog(__FUNCTION__, var_export($e, TRUE));
    $matches['SalesForce connection error'] = 'SalesForce connection error';
  }

  drupal_json_output($matches);
}

/**
 * Helper for obtaining mapped SalesForce ID for provided node ID.
 *
 * @param int $nid
 *   Node ID for get SalesForce ID for.
 *
 * @return int|bool
 *   Return SalesForce ID or FALSE if mapping not yet created for node ID.
 */
function salespush_webform_get_mapped_id($nid) {
  $environment = variable_get('salespush_mapper_cron_environment', 'sandbox');
  $ids = db_select('salespush_mapper', 's')
    ->fields('s', array('destination'))
    ->condition('getter', $nid)
    ->condition('environment', $environment)
    ->execute()->fetchAllAssoc('destination');
  $id = array_keys($ids);
  return reset($id);
}

/**
 * Facade for getting mappers instance.
 *
 * @return SalespushWebformMapper
 *   Singleton instance object.
 */
function salespush_webform_get_mappings() {
  module_load_include('inc', 'salespush_webform', 'salespush_webform.mappers');
  return SalespushWebformMapper::getinstance();
}
