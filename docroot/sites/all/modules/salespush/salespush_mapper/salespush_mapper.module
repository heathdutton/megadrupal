<?php

/**
 * @file
 * Mapper routines.
 */

// Nubmer of elements to push at once.
define('SALESPUSH_PUSH_COUNT', 100);
define('PUSH_NO_DEMO', FALSE);

/**
 * Implements hook_cron().
 */
function salespush_mapper_cron() {
  // This should be run on backend only.
  if (!function_exists('hp_is_backend') || !hp_is_backend() || !variable_get('salespush_mapper_cron_state', FALSE)) {
    return;
  }
  // Trying to avoid possible race conditions, when there are more than one backend.
  // The code below this one should run faster than 25 seconds.
  // If it is not the lock will be automatically released.
  if (!lock_acquire('salespush_mapper_cron', 25)) {
    return;
  }
  require_once drupal_get_path('module', 'salespush') . '/salespush.admin.inc';

  $cron_environment = variable_get('salespush_mapper_cron_environment', 'sandbox');

  // Salesforce Login information.
  // This wsdl was manually generated using Setup/Develop/API menu in web UI.
  // Generate Enterprise WSDL link.
  $wsdl = salespush_get_wsdl($cron_environment);
  $username = salespush_get_username($cron_environment);
  $password = salespush_get_password($cron_environment);

  $client_data = salespush_get_client($username, $password, $wsdl);
  $client = $client_data['client'];

  // Push new users to SalesForce Contacts.
  $last_users_count = variable_get('salespush_mapper_users_count', 0);
  $current_users_count = salespush_mapper_users_count($cron_environment);
  $new_local_users = $current_users_count - $last_users_count;
  if ($new_local_users != 0) {
    $new_users_count = salespush_mapper_push_users_to_contacts($cron_environment, $wsdl, $username, $password);
    variable_set('salespush_mapper_users_count', $new_users_count);
    watchdog(
      __FUNCTION__ . ':' . __LINE__,
      'Successfully pushed to SalesForce users: ' . ($new_users_count - $last_users_count)
    );
  }

  $users_count_before = db_select('salespush_mapper', 'sm')
    ->fields('sm', array('mapid'))
    ->condition('type', 'mail')
    ->condition('environment', $cron_environment)
    ->execute()->rowCount();

  // Get all users from salesforce to mapper.
  $timer_start = microtime(TRUE);
  // Runs ~1 sec for 200 records.
  salespush_mapper_get_sf_user_ids($client, $cron_environment);
  $timer_end = microtime(TRUE);
  $exec_time = round($timer_end - $timer_start, 2);
  watchdog('salespush_mapper', 'salespush_mapper_get_sf_user_ids run: ' . $exec_time . 'sec');

  $users_count_after = db_select('salespush_mapper', 'sm')
    ->fields('sm', array('mapid'))
    ->condition('type', 'mail')
    ->condition('environment', $cron_environment)
    ->execute()->rowCount();

  $new_users = $users_count_after - $users_count_before;
  // New users pushed have been pushed to SalesForce.
  if ($new_users != 0) {
    // Add users to Campaigns.
    salespush_mapper_assign_campaign_members($cron_environment, $wsdl, $username, $password);
  }

  // Push new webforms to SalesForce Campaigns.
  $timer_start = microtime(TRUE);
  require_once drupal_get_path('module', 'salespush') . '/salespush.submissions.inc';

  // @todo Create workaround for counting really pushed campaigns.
  salespush_mapper_push_campaigns($cron_environment, $wsdl, $username, $password);

  $timer_end = microtime(TRUE);
  $exec_time = round($timer_end - $timer_start, 2);
  watchdog('salespush_mapper', 'salespush_mapper_push_campaigns run: ' . $exec_time . 'sec');

  // Push unassigned users to SalesForce CampaignMember.
  $timer_start = microtime(TRUE);
  $synced_users = salespush_get_webform_users(FALSE, TRUE, $cron_environment);
  if (count($synced_users) > 0) {
    salespush_mapper_push_submissions($cron_environment, $wsdl, $username, $password);
    watchdog(
      __FUNCTION__ . ':' . __LINE__,
      'Successfully pushed to SalesForce CampaignMembers: ' . count($synced_users)
    );
  }
  $timer_end = microtime(TRUE);
  $exec_time = round($timer_end - $timer_start, 2);
  watchdog('salespush_mapper', 'salespush_mapper_push_submissions run: ' . $exec_time . 'sec');

  // Releasing the lock for ability to run this again at next crontab task.
  lock_release('salespush_mapper_cron');
}

/**
 * Get all count for drupal and non Drupal users in database.
 *
 * @param string $environment
 *   String name of environment.
 *
 * @return int
 *   Count of registered plus webform submitted users.
 */
function salespush_mapper_users_count($environment = 'sandbox') {
  $emails = salespush_get_user_emails($environment);

  return count($emails);
}

/**
 * Facade pattern for pushing CampaignMembers to SalesForce's Campaigns.
 *
 * @param string $cron_environment
 *   String name for the current environment.
 * @param string $wsdl
 *   Path to SalesForce's wsdl xml file.
 * @param string $username
 *   User for accessing SalesForce via api.
 * @param string $password
 *   Concatenated password and security token for accessinf SalesForce via api.
 */
function salespush_mapper_assign_campaign_members($cron_environment, $wsdl, $username, $password) {
  require_once drupal_get_path('module', 'salespush') . '/salespush.campaigns.inc';
  $users_log = _salespush_campaigns_pusher($cron_environment, $wsdl, $username, $password, FALSE);
}

/**
 * Facade pattern for pushing non synced users to SalesForce's Contacts.
 */
function salespush_mapper_push_users_to_contacts($cron_environment, $wsdl, $username, $password) {
  $users_log = _salespush_user_pusher($cron_environment, $wsdl, $username, $password, PUSH_NO_DEMO);

  return variable_get('salespush_total_pushed_contacts_' . $cron_environment, 0);
}

/**
 * Get array of Email => Id from SalesForce Contacts table.
 *
 * This function should be used for obtaining currently pushed
 * users to SalesForce and saving their Ids to salespush_mapper table.
 *
 * @param SforceEnterpriseClient $client
 *   SforceEnterpriseClient instance for processing queries to SalesForce.
 * @param string $environment
 *   String name for the current environment.
 *
 * @todo move this to salesforce.inc with additional argument $emails.
 */
function salespush_mapper_get_sf_user_ids($client, $environment = 'sandbox') {
  $emails = salespush_get_user_emails($environment);

  // SalesForce has limit of 50000 records, but SOQL has to be shorter than 20000 symbols.
  $emails_chunks = array_chunk($emails, 500);

  foreach ($emails_chunks as $chunk_id => $subemails) {
    $query = 'SELECT Id, Email from Contact WHERE Email IN (\'' . implode("','", $subemails) . '\')';
    try {
      $contact_ids = $client->query($query);
    }
    catch (Exception $e) {
      watchdog(__FUNCTION__, var_export($e, TRUE));
    }
    if (isset($contact_ids->records)) {
      foreach ($contact_ids->records as $key => $data) {
        $record = array(
          'type' => 'mail',
          'getter' => $data->Email,
          'source' => '',
          'destination' => $data->Id
        );
        // See http://drupal.stackexchange.com/questions/11177/how-do-i-use-ignore-in-a-database-query
        // If data already entered, do not create new item, just overwrite it.
        db_merge('salespush_mapper')
          ->key(
            array(
              'destination' => $record['destination'],
              'source' => $record['source'],
              'environment' => $environment,
              'getter' => $record['getter'],
              'type' => $record['type']
            )
          )
          ->insertFields(
            array(
              'destination' => $record['destination'],
              'source' => $record['source'],
              'environment' => $environment,
              'getter' => $record['getter'],
              'type' => $record['type']
            )
          )
          ->execute();
      }
    }
  }
}

/**
 * Get 'destination' value for 'getter' column data.
 *
 * @param string $getter
 *   String value of getter db column.
 * @param string $environment
 *   String value of environment name.
 *
 * @return bool|string
 *   Returns FALSE if error or destination column value from db.
 */
function salespush_mapper_getter_destination($getter, $environment = 'sandbox') {
  if ($getter == NULL) {
    return FALSE;
  }
  $allmapsfortype[$getter . $environment] = & drupal_static(__FUNCTION__ . $getter . $environment);
  if (isset($allmapsfortype[$getter . $environment]) && isset($allmapsfortype[$getter . $environment][$getter])) {
    return $allmapsfortype[$getter . $environment][$getter]->destination;
  }
  $query = db_select('salespush_mapper', 'sm')
    ->fields('sm', array('getter', 'destination'))
    ->condition('getter', $getter)
    ->condition('environment', $environment)
    ->execute();
  $allmapsfortype[$getter . $environment] = $query->fetchAllAssoc('getter');

  return $allmapsfortype[$getter . $environment][$getter]->destination;
}

/**
 * Facade routine for pushing campaigns.
 *
 * @param string $environment
 *   String value of environment name.
 * @param string $wsdl
 *   Full path to salesforce's wsdl xml file.
 * @param string $username
 *   Username for accessing salesforce.
 * @param string $password
 *   Concatenated string of password and security token.
 */
function salespush_mapper_push_campaigns($environment, $wsdl, $username, $password) {
  require_once drupal_get_path('module', 'salespush') . '/salespush.campaigns.inc';
  $users_log = _salespush_campaigns_pusher($environment, $wsdl, $username, $password, PUSH_NO_DEMO);
}

/**
 * Facade routine for pushing campaign members.
 *
 * @param string $environment
 *   String value of environment name.
 * @param string $wsdl
 *   Full path to salesforce's wsdl xml file.
 * @param string $username
 *   Username for accessing salesforce.
 * @param string $password
 *   Concatenated string of password and security token.
 */
function salespush_mapper_push_submissions($environment, $wsdl, $username, $password) {
  require_once drupal_get_path('module', 'salespush') . '/salespush.submissions.inc';
  $users_log = _salespush_submissions_pusher($environment, $wsdl, $username, $password, PUSH_NO_DEMO);
}
