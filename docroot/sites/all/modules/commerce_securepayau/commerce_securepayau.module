<?php
/**
 * @file
 * Contains core functions for the SecurePay module.
 */

/**
 * Include additional files.
 */
$dirname = dirname(__FILE__) . "/includes";
$includes = file_scan_directory($dirname, '/.inc$/');
foreach (module_list() as $module) {
  if (isset($includes[$file = "{$dirname}/{$module}.inc"])) {
    require_once $file;
  }
}

/**
 * Sends an XML API Request to securepay.com.au.
 *
 * @param $payment_method
 *   The payment method object.
 * @param $request_type
 *   This is the type of mesage and determines which url to send to
 * @param $xml
 *   The XML to send to securepay.com.au.
 * @return
 *   TRUE or FALSE indicating the success of the API request.
 */
function commerce_securepayau_xmlapi($payment_method, $request_type, $order_id, $xml) {
  $post_url = $payment_method['settings']['settings']['gateway_urls'][$payment_method['settings']['settings']['txn_mode']] . drupal_strtolower($request_type);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: text/xml"));
  curl_setopt($ch, CURLOPT_HEADER, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  $response = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_securepayau', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // // for debugging purposes log request/reponse strings to order log (just in case we need to check something later)
  // // but we need to cleans the request xml of any sensitive data
  // $xml = ereg_replace("(<cardNumber>)[0-9]*(</cardNumber>)", "\\1****\\2", $xml);
  // $xml = ereg_replace("(<cvv>)[0-9]*(</cvv>)", "\\1***\\2", $xml);
  // $log[] = 'Request: '. htmlspecialchars($xml);
  // $log[] = 'Response:'. htmlspecialchars($response);
  // if (variable_get('uc_order_logging', TRUE)) {
  //   uc_order_log_changes($order_id, $log);
  // }
  return $response;
}

/**
 *
 */
 function _commerce_securepayau_xmlapi_request_payment($pane_values, $order, $charge) {
  return array(
    'Payment' => array(
      'TxnList count="1"' => array(
        'Txn ID="1"' => array(
          'txnType' => '0',
          'txnSource' => '23',
          'amount' => $charge['amount'],
          'currency' => $charge['currency_code'],
          'purchaseOrderNo' => $order->order_number,
          'CreditCardInfo' => array(
            'cardNumber' => $pane_values['credit_card']['number'],
            'cvv' => $pane_values['credit_card']['code'],
            'expiryDate' => $pane_values['credit_card']['exp_month'] . '/' . drupal_substr($pane_values['credit_card']['exp_year'], -2),
          ),
        ),
      ),
    ),
  );
}

/**
 * Creates the structured message with the information needed to created a
 * stored tiggered account.
 *
 * @param $pane_values
 *   The submitted commerce pane values object
 * @param $order
 *   the order object
 * @param $charge
 *   the charge object
 * @return
 *   the array structure of the message to send to securepay
 */
function _commerce_securepayau_xmlapi_request_triggered_add($pane_values, $order, $charge) {
  // Build the data array for the request.
  return array(
    'Periodic' => array(
      'PeriodicList count="1"' => array(
        'PeriodicItem ID="1"' => array(
          'actionType' => 'add',
          'clientID' => variable_get('commerce_securepayau_clientID_prefix', '') . $order->uid,
          'currency' => $charge['currency_code'],
          'CreditCardInfo' => array(
            'cardNumber' => $pane_values['credit_card']['number'],
            'cvv' => $pane_values['credit_card']['code'],
            'expiryDate' => $pane_values['credit_card']['exp_month'] . '/' . drupal_substr($pane_values['credit_card']['exp_year'], -2),
          ),
          'amount' => $charge['amount'],
          'periodicType' => '4',
        ),
      ),
    ),
  );
}

/**
 * Removed an account from securepays tiggered accounts
 *
 * @param $client_id
 *   the id of the account to remove
 * @return
 *   the array structure of the message to send to securepay
 */
function _commerce_securepayau_xmlapi_request_triggered_delete($client_id) {
  return array(
    'Periodic' => array(
      'PeriodicList count="1"' => array(
        'PeriodicItem ID="1"' => array(
          'actionType' => 'delete',
          'clientID' => $client_id,
        ),
      ),
    ),
  );
}

/**
 * Creates the structured message with the information needed to created a
 * stored tiggered account.
 *
 * @return
 *   the array structure of the message to send to securepay
 */
function _commerce_securepayau_xmlapi_request_triggered_trigger($card_data, $charge) {
  // Build the data array for the request.
  return array(
    'Periodic' => array(
      'PeriodicList count="1"' => array(
        'PeriodicItem ID="1"' => array(
          'actionType' => 'trigger',
          'clientID' => $card_data['remote_id'],
          'amount' => $charge['amount'],
          'currency' => $charge['currency_code'],
        ),
      ),
    ),
  );
}

/**
 * Wraps XML API request child elements in the request element and includes the
 *   merchant authentication information.
 *
 * @param $payment_method
 *   The payment method object.
 * @param $request
 *   type of message, e.g Payment, Periodic
 * @param $xml
 *   formated xml string containing message to send
 * @return
 */
function _commerce_securepayau_xmlapi_wrapper($payment_method, $request, $xml = '') {
  $message_id = _commerce_securepayau_rand_text(15, 25, 'abcdef0123456789');
  $timeout = 60;
  $timestamp = date('YmdHis000+600');
  $api_version = 'spxml-3.0';
  if (in_array($request, array('Payment', 'Periodic'))) {
    $api_version = 'spxml-4.2';
  }

  $merchant_info = array(
    'MessageInfo' => array(
      'messageID' => $message_id,
      'messageTimestamp' => $timestamp,
      'timeoutValue' => $timeout,
      'apiVersion' => $api_version
    ),
    'MerchantInfo' => array(
      'merchantID' => $payment_method['settings']['credentials']['merchant_id'],
      'password' => $payment_method['settings']['credentials']['password'],
    ),
    'RequestType' => $request,
  );

  return "<?xml version='1.0' encoding='UTF-8'?>\n<SecurePayMessage>\n" . _commerce_securepayau_array_to_xml($merchant_info) . $xml . ' </SecurePayMessage>';
}

/**
 * Converts a hierarchical array of elements into an XML string.
 *
 * @param $data
 *   array structure to convert into xml string
 * @param $depth
 *    the depth of the elements
 * @return
 *   xml string
 */
function _commerce_securepayau_array_to_xml($data, $depth = 0) {
  $xml = '';

  $padding = '  ';
  for ($i = 0; $i < $depth; $i++) {
    $padding .= '  ';
  }

  // Loop through the elements in the data array.
  foreach ($data as $element => $contents) {
    if (is_array($contents)) {
      // Render the element with its child elements.
      $xml .= "{$padding}<{$element}>\n" . _commerce_securepayau_array_to_xml($contents, $depth + 1) . "{$padding}</" . strtok($element, ' ') . ">\n";
    }
    else {
      // Render the element with its contents.
      $xml .= "{$padding}<{$element}>{$contents}</{$element}>\n";
    }
  }

  return $xml;
}

/**
 * Parse the securepay.com.au XML API response.
 */
function _commerce_securepayau_parse_response(&$content) {
  $response = array();

  preg_match_all('/<([^\/><]*?)>([^\<].*?)<\/.*?>/mi', $content, $matches, PREG_SET_ORDER);
  foreach ($matches as $match) {
    $response[$match[1]] = $match[2];
  }

  return $response;
}

/**
 * Generates a random text string (used for creating a unique message ID)
 */
function _commerce_securepayau_rand_text($min = 10, $max = 20,
  $randtext = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890' ) {
  $min = $min < 1 ? 1 : $min;
  $varlen = rand($min, $max);
  $randtextlen = strlen($randtext);
  $text = '';

  for ($i = 0; $i < $varlen; $i++) {
    $text .= substr($randtext, rand(1, $randtextlen), 1);
  }
  return $text;
}


