<?php

/**
 * Implements hook_node_info();
 */
function tripal_analysis_interpro_node_info() {
  $nodes = array();
  $nodes['chado_analysis_interpro'] = array(
    'name' => t('Analysis: Interpro'),
    'base' => 'chado_analysis_interpro',
    'description' => t('An interpro analysis from the chado database'),
    'has_title' => FALSE,
    'title_label' => t('Analysis: Interpro'),
    'has_body' => FALSE,
    'body_label' => t('Interpro Analysis Description'),
    'locked' => TRUE,
    'chado_node_api' => array(
      'base_table' => 'analysis',
      'hook_prefix' => 'chado_analysis_interpro',
      'linking_table' => 'chado_analysis',
      'record_type_title' => array(
        'singular' => t('InterPro Analysis'),
        'plural' => t('InterPro Analyses')
      ),
      'sync_filters' => array(
        'type_id' => FALSE,
        'organism_id' => FALSE,
        'checkboxes' => array('name'),
      ),
    )
  );
  return $nodes;
}

/**
 * Implements hook_chado_node_sync_select_query().
 */
function chado_analysis_interpro_chado_node_sync_select_query($query) {
  $query['joins'][] = 'INNER JOIN {analysisprop} PROP ON PROP.analysis_id = ANALYSIS.analysis_id';
  $query['joins'][] = 'INNER JOIN {cvterm} CVTP ON CVTP.cvterm_id = PROP.type_id';
  $query['where_clauses']['analysis_type'][] = 'CVTP.name = :type_name';
  $query['where_clauses']['property_value'][] = 'PROP.value = :prop_value';
  $query['where_args']['analysis_type'][':type_name'] = 'Analysis Type';
  $query['where_args']['property_value'][':prop_value'] = 'interpro_analysis';

  return $query;
}
/*******************************************************************************
 *  The following function proves access control for users trying to
*  perform actions on data managed by this module
*/
function chado_analysis_interpro_access($op, $node, $account) {
  if ($op == 'create') {
    if (!user_access('create chado_analysis_interpro content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'update') {
    if (!user_access('edit chado_analysis_interpro content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'delete') {
    if (!user_access('delete chado_analysis_interpro content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'view') {
    if (!user_access('access chado_analysis_interpro content', $account)) {
      return FALSE;
    }
  }
  return NULL;
}

/*******************************************************************************
 *  Provide a Interpro Analysis form
*/
function chado_analysis_interpro_form($node, $form_state) {

  // add in the default fields for the analysis
  $form = chado_analysis_form($node, $form_state);
  // set the fedaults
  $interprofile = '';
  $interprojob = '';
  $parsego = '';
  $interproparameters = '';
  $query_re = '';
  $query_type = '';
  $query_uniquename = '';

  if (property_exists ( $node, 'analysis' )) {
    $analysis = $node->analysis;
    $interprofile = $analysis->tripal_analysis_interpro->interprofile;
    $interproparameters = $analysis->tripal_analysis_interpro->interproparameters;
    $parsego = $analysis->tripal_analysis_interpro->parsego;
    $query_re = $analysis->tripal_analysis_interpro->query_re;
    $query_type = $analysis->tripal_analysis_interpro->query_type;
    $query_uniquename = $analysis->tripal_analysis_interpro->query_uniquename;
  }

  $moreSettings ['interpro'] = 'Interpro Settings';
  $form['interpro'] = array(
    '#title' => t('Interpro Settings'),
    '#type' => 'fieldset',
    '#description' => t('Specific Settings for Interpro Analysis.'),
    '#collapsible' => TRUE,
    '#attributes' => array('id' => 'interpro-extra-settings'),
    '#group' => 'chado_node_api',
  );
  $form['interpro']['interprofile'] = array(
      '#title' => t('InterProScan XML File/Directory: (if you input a directory without the tailing slash, all xml files in the directory will be loaded)'),
      '#type' => 'textfield',
      '#description' => t('Please provide the full path to the XML output file generated by InterProScan or a directory containing multiple XML files.'),
      '#default_value' => $interprofile,
  );
  $form['interpro']['interprojob'] = array(
      '#type' => 'checkbox',
      '#title' => t('Submit a job to parse the InterProScan XML file(s)'),
      '#description' => t('Note: features associated with the interpro results must '.
          'exist in chado before parsing the file. Otherwise, interpro '.
          'results that cannot be linked to a feature will not '.
          'be imported.  The feature name must be unique'),
      '#default_value' => $interprojob,
      '#attributes' => array(
          'onclick' => 'return isSubmittingJob(this)'
      )
  );
  $form['interpro']['parsego'] = array(
      '#type' => 'checkbox',
      '#title' => t('Load GO terms to the database'),
      '#description' => t('Check the box to load GO terms to chado database'),
      '#default_value' => $parsego
  );
  $form['interpro']['interproparameters'] = array(
      '#title' => t('Parameters'),
      '#type' => 'textfield',
      '#description' => t('The parameters used when running the InterProScan analysis.'),
      '#default_value' => $interproparameters,
  );

  $form['interpro']['query_re'] = array(
      '#title' => t('Query Name RE'),
      '#type' => 'textfield',
      '#description' => t('Enter the regular expression that will extract the '.
          'feature name from the query line in the interpro results. This option '.
          'is only required when the query does not identically match a feature '.
          'in the database. For example: ^.*id=(.*?).*$'),
      '#default_value' => $query_re,
  );

  $form['interpro']['query_uniquename'] = array(
      '#title' => t('Use Unique Name'),
      '#type' => 'checkbox',
      '#description' => t('Select this checkbox if the query name in the results file matches the unique name of the feature. '),
      '#default_value' => $query_uniquename,
  );

  $cv = tripal_get_cv(array('name' => 'sequence'));
  $cv_id = $cv->cv_id;
  $form['interpro']['query_type'] = array(
    '#title' => t('Query Type'),
    '#type' => 'textfield',
    '#description' => t('Please enter the Sequence Ontology term (e.g. contig, polypeptide, mRNA) that describes '.
        'the query sequences in the InterProScan XML results file(s).  This is only necessary if two '.
        'or more sequences have the same name.'),
    '#default_value' => $query_type,
    '#autocomplete_path' => "admin/tripal/chado/tripal_cv/cvterm/auto_name/$cv_id",
  );
  return $form;
}
/**
 *
 */
function chado_analysis_interpro_validate($node, &$form, &$form_state) {

  // use the analysis parent to validate the node
  tripal_analysis_validate($node, $form, $form_state);

  // trim character fields
  $node->interprofile      = trim($node->interprofile);
  $node->query_uniquename  = trim($node->query_uniquename);
  $node->query_type        = trim($node->query_type);
  $node->query_re          = trim($node->query_re);


  // check the regular expression to make sure it is valid
  $result = 0;
  $code = "\$result = preg_match(\"test\", \"/" . $node->query_re . "/\")";
  eval($code);
  if ($result === FALSE) {
    form_set_error('query_re', 'Invalid regular expression.');
  }

  if($node->interprofile and !is_readable($node->interprofile)) {
    form_set_error('interprofile', "Can not read InterPro XML output file: '$node->interprofile'. Please check file permissions or typos in the file path.");
  }

}
/**
 *
 *
 */
function chado_analysis_interpro_load($nodes) {

  // load the default set of analysis fields
  chado_analysis_load($nodes);

  foreach ($nodes as $nid => $node) {
    // create some variables for easier lookup
    $analysis = $node->analysis;
    $analysis_id = $analysis->analysis_id;
    $record = array('table'=> 'analysis', 'id' => $analysis->analysis_id);

    $interpro_settings = chado_get_property($record, array('type_name' => 'analysis_interpro_settings', 'cv_name' => 'tripal'));
    $interprofile      = chado_get_property($record, array('type_name' => 'analysis_interpro_interprofile', 'cv_name' => 'tripal'));
    $interproparameters= chado_get_property($record, array('type_name' => 'analysis_interpro_interproparameters', 'cv_name' => 'tripal'));
    $parsego           = chado_get_property($record, array('type_name' => 'analysis_interpro_parsego', 'cv_name' => 'tripal'));
    $query_re          = chado_get_property($record, array('type_name' => 'analysis_interpro_query_re', 'cv_name' => 'tripal'));
    $query_type        = chado_get_property($record, array('type_name' => 'analysis_interpro_query_type', 'cv_name' => 'tripal'));
    $query_uniquename  = chado_get_property($record, array('type_name' => 'analysis_interpro_query_uniquename', 'cv_name' => 'tripal'));

    $analysis->tripal_analysis_interpro = new stdClass;
    $analysis->tripal_analysis_interpro->interprofile      = $interprofile->value;
    $analysis->tripal_analysis_interpro->interproparameters= $interproparameters->value;
    $analysis->tripal_analysis_interpro->parsego           = $parsego->value;
    $analysis->tripal_analysis_interpro->query_re          = $query_re->value;
    $analysis->tripal_analysis_interpro->query_type        = $query_type->value;
    $analysis->tripal_analysis_interpro->query_uniquename  = $query_uniquename->value;

    // if there is an old style 'interpro_settings' array, then break these out for
    // use in the new format
    if (count($interpro_settings)>0) {
      $prop_values = explode("|", $interpro_settings->value);
      $analysis->tripal_analysis_interpro->interprofile       = $prop_values[0];
      $analysis->tripal_analysis_interpro->interproparameters = $prop_values[1];
    }

    // Now get the title
    $node->title = chado_get_node_title($node);

    $nodes[$nid]->analysis = $analysis;
  }
}
/**
 *
 */
function chado_analysis_interpro_insert($node) {

  // insert the analysis. If the analysis already exist then this
  // call will link it to a new Drupa node.
  chado_analysis_insert($node);

  // trim character fields
  $node->interprofile      = trim($node->interprofile);
  $node->query_uniquename  = trim($node->query_uniquename);
  $node->query_type        = trim($node->query_type);

  $record = array('table'=> 'analysis', 'id' => $node->analysis_id);

  // Add the analysis type.
  chado_insert_property($record, array('type_name' =>'Analysis Type', 'cv_name' => 'analysis_property', 'value' => 'interpro_analysis'));

  // now add in the remaining settings as a single property but separated by bars
  chado_insert_property($record, array('type_name' => 'analysis_interpro_interprofile', 'cv_name' => 'tripal', 'value' => trim($node->interprofile)));
  chado_insert_property($record, array('type_name' => 'analysis_interpro_interproparameters', 'cv_name' => 'tripal', 'value' => trim($node->interproparameters)));
  chado_insert_property($record, array('type_name' => 'analysis_interpro_parsego', 'cv_name' => 'tripal', 'value' => trim($node->parsego)));
  chado_insert_property($record, array('type_name' => 'analysis_interpro_query_re', 'cv_name' => 'tripal', 'value' => trim($node->query_re)));
  chado_insert_property($record, array('type_name' => 'analysis_interpro_query_type', 'cv_name' => 'tripal', 'value' => trim($node->query_type)));
  chado_insert_property($record, array('type_name' => 'analysis_interpro_query_uniquename', 'cv_name' => 'tripal', 'value' => trim($node->query_uniquename)));

  // submit the parsing jobs
  chado_analysis_interpro_submit_job($node);
}

/**
  *
  */
function chado_analysis_interpro_update($node) {

  // insert the analysis
  chado_analysis_update($node);

  // trim character fields
  $node->interprofile      = trim($node->interprofile);
  $node->query_uniquename  = trim($node->query_uniquename);
  $node->query_type        = trim($node->query_type);

  $record = array('table'=> 'analysis', 'id' => $node->analysis_id);
  $options = array('insert_if_missing' => TRUE);

  // Update the analysis type.
  chado_update_property($record, array('type_name' =>'Analysis Type', 'cv_name' => 'analysis_property', 'value' => 'interpro_analysis'), $options);


  // now add in the remaining settings as a single property but separated by bars
  chado_update_property($record, array('type_name' => 'analysis_interpro_interprofile', 'cv_name' => 'tripal', 'value' => trim($node->interprofile)), $options);
  chado_update_property($record, array('type_name' => 'analysis_interpro_interproparameters', 'cv_name' => 'tripal', 'value' => trim($node->interproparameters)), $options);
  chado_update_property($record, array('type_name' => 'analysis_interpro_parsego', 'cv_name' => 'tripal', 'value' => trim($node->parsego)), $options);
  chado_update_property($record, array('type_name' => 'analysis_interpro_query_re', 'cv_name' => 'tripal', 'value' => trim($node->query_re)), $options);
  chado_update_property($record, array('type_name' => 'analysis_interpro_query_type', 'cv_name' => 'tripal', 'value' => trim($node->query_type)), $options);
  chado_update_property($record, array('type_name' => 'analysis_interpro_query_uniquename', 'cv_name' => 'tripal', 'value' => trim($node->query_uniquename)), $options);

  // if this analysis uses the old style settings cvterm then remove that term
  $old = chado_get_property($record, array('type_name' => 'analysis_interpro_settings', 'cv_name' => 'tripal'));
  if (count($old) > 0) {
    tripal_analysis_delete_property($record, array('type_name' => 'analysis_interpro_settings', 'cv_name' => 'tripal'));
  }

  // submit the parsing jobs
  chado_analysis_interpro_submit_job($node);
}

/**
 * Delete interpro anlysis
 */
function chado_analysis_interpro_delete($node) {
  chado_analysis_delete($node);
}

/**
 *
 */
function chado_analysis_interpro_submit_job($node) {
  global $user;

  // Add a job if the user wants to parse the xml output
  if ($node->interprojob) {
    $job_args[0] = $node->analysis_id;
    $job_args[1] = $node->interprofile;
    if ($node->parsego) {
      $job_args[2] = 1;
    }
    else {
      $job_args[2] = 0;
    }

    $fname = preg_replace ( "/.*\/(.*)/", "$1", $node->interprofile );
    $job_args [3] = $node->query_re;
    $job_args [4] = $node->query_type;
    $job_args [5] = $node->query_uniquename;
    tripal_add_job("Parse XML interpro: $fname", 'tripal_analysis_interpro', 'tripal_analysis_interpro_parseXMLFile', $job_args, $user->uid);
  }
}

/**
 * *****************************************************************************
 * This function customizes the view of the chado_analysis node.
 * It allows
 * us to generate the markup.
 */
function chado_analysis_interpro_view($node, $teaser = FALSE, $page = FALSE) {
  // use drupal's default node view:
  if (! $teaser) {
    $node = node_prepare ( $node, $teaser );
    // When previewing a node submitting form, it shows 'Array' instead of
    // correct date format. We need to format the date here
    $time = $node->timeexecuted;
    if (is_array ( $time )) {
      $month = $time ['month'];
      $day = $time ['day'];
      $year = $time ['year'];
      $timestamp = $year . '-' . $month . '-' . $day;
      $node->timeexecuted = $timestamp;
    }
    // When viewing a node, we need to reformat the analysisprop since we
    // separate each value with a bar |
    if (preg_match ( "/.*\|.*/", $node->interprofile )) {
      $prop_values = explode ( "|", $node->interprofile );
      $node->interprofile = $prop_values [0];
      $node->interproparameters = $prop_values [1];
    }
  }
  return $node;
}

/**
 * Implements hook_node_view().
 */
function tripal_analysis_interpro_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'chado_analysis_interpro':
      if ($view_mode == 'full') {
        $node->content['tripal_analysis_interpro_base'] = array(
            '#markup' => theme('tripal_analysis_interpro_base', array('node' => $node)),
            '#tripal_toc_id'    => 'base',
            '#tripal_toc_title' => 'Overview',
            '#weight' => -100,
        );
      }
      if ($view_mode == 'teaser') {
        $node->content['tripal_analysis_interpro_teaser'] = array(
            '#markup' => theme('tripal_analysis_interpro_teaser', array('node' => $node)),
        );
      }
      break;
    case 'chado_feature':
      if ($view_mode == 'full') {
        $node->content['tripal_feature_interpro_results'] = array(
          '#markup' => theme('tripal_feature_interpro_results', array('node' => $node)),
          '#tripal_toc_id'    => 'interpro',
          '#tripal_toc_title' => 'InterPro',
        );
      }
      break;
  }
}


/**
 * Implements [content_type]_chado_node_default_title_format().
 *
 * Defines a default title format for the Chado Node API to set the titles on
 * Chado Analysis nodes based on chado fields.
 */
function chado_analysis_interpro_chado_node_default_title_format() {
  return '[analysis.name]';
}

/**
 * Implements hook_node_insert().
 * Acts on all content types.
 *
 * @ingroup tripal_analysis_interpro
 */
function tripal_analysis_interpro_node_insert($node) {

  switch ($node->type) {
    case 'chado_analysis_interpro':

      // build the analysis variable
      $analysis_id = chado_get_id_from_nid('analysis', $node->nid);
      $values = array('analysis_id' => $analysis_id);
      $analysis = chado_generate_var('analysis', $values);
      $node->analysis = $analysis;

      // Now get the title
      $node->title = chado_get_node_title($node);

      // Now use the API to set the path.
      chado_set_node_url($node);

      break;
  }
}

/**
 * Implements hook_node_update().
 * Acts on all content types.
 *
 * @ingroup tripal_analysis_interpro
 */
function tripal_analysis_interpro_node_update($node) {

  switch ($node->type) {
    case 'chado_analysis_interpro':

      // build the analysis variable
      $analysis_id = chado_get_id_from_nid('analysis', $node->nid);
      $values = array('analysis_id' => $analysis_id);
      $analysis = chado_generate_var('analysis', $values);
      $node->analysis = $analysis;

      // Now get the title
      $node->title = chado_get_node_title($node);

      break;
  }
}