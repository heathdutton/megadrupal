<?php

/**
 * @file
 * Implements Quickbooks Merchant Service for use with Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_qbms_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_qbms'] = array(
    'title' => t('Commerce QBMS - Credit Card'),
    'short_title' => t('Commerce QBMS'),
    'display_title' => t('Credit card'),
    'description' => t('Commerce Quickbooks Merchant Service'),
  );

  return $payment_methods;
}

/**
 * Returns the relevant QBMS payment action for a given transaction type.
 *
 * @param $txn_type
 *   The type of transaction whose payment action should be returned; currently
 *   supports COMMERCE_CREDIT_AUTH_CAPTURE.
 */
function commerce_qbms_payment_action($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'Charge';
  }
}

/**
 * Returns an associative array of accepted currency codes.
 */
function commerce_qbms_currencies() {
  return drupal_map_assoc(array('USD'));
}

/**
 * Formats a price amount into a decimal value as expected by QBMS.
 *
 * @param $amount
 *   An integer price amount.
 * @param $currency_code
 *   The currency code of the price.
 *
 * @return
 *   The decimal price amount as expected by QBMS.
 */
function commerce_qbms_price_amount($amount, $currency_code) {
  $rounded_amount = commerce_currency_round($amount, commerce_currency_load($currency_code));
  return number_format(commerce_currency_amount_to_decimal($rounded_amount, $currency_code), 2, '.', '');
}

/**
 * Returns the default settings for the QBMS payment method.
 */
function commerce_qbms_default_settings() {
  $default_currency = commerce_default_currency();

  return array(
    'application_login' => 'DrupalCommerceQBMS.antoinesolutions.com',
    'connection_ticket' => '',
    'environment' => 'test',
    'currency_code' => in_array($default_currency, array_keys(commerce_qbms_currencies())) ? $default_currency : 'USD',
    'allow_supported_currencies' => FALSE,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'log' => array(
      'request' => 0,
      'response' => 0,
    ),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_qbms_settings_form($settings = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_qbms_default_settings();

  $form['application_login'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Login'),
    '#default_value' => $settings['application_login'],
    '#required' => TRUE,
  );
  $form['connection_ticket'] = array(
    '#type' => 'textfield',
    '#title' => t('Connection Ticket'),
    '#default_value' => decrypt($settings['connection_ticket']),
    '#required' => TRUE,
    '#element_validate' => array('_commerce_qbms_element_validate_encrypt'),
  );
  $form['environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => array(
      'test' => ('Test - For development and testing in the PTC environment.'),
      'production' => ('Production - For applications that process real transactions.'),
    ),
    '#default_value' => $settings['environment'],
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_qbms_currencies(),
    '#default_value' => $settings['currency_code'],
  );
  $form['allow_supported_currencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow transactions to use any currency in the options list above.'),
    '#description' => t('Transactions in unsupported currencies will still be converted into the default currency.'),
    '#default_value' => $settings['allow_supported_currencies'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Validates form elements.
 */
function _commerce_qbms_element_validate_encrypt($element, &$form_state, $form) {
  form_set_value($element, encrypt($element['#value']), $form_state);
}

/**
 * Payment method callback: checkout form.
 */
function commerce_qbms_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'owner' => '',
    'code' => '',
  );

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_qbms_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Display an error and prevent the payment attempt if QBMS has not been
  // configured yet.
  if (empty($payment_method['settings'])) {
    drupal_set_message(t('This payment method must be configured by an administrator before it can be used.'), 'error');
    return FALSE;
  }

  // Display an error and prevent the payment attempt if the QuickBooks PHP
  // DevKit could not be loaded.
  $library = libraries_load('quickbooks_php_devkit');
  if ($library && !$library['loaded']) {
    drupal_set_message(t('This payment method must be properly installed by an administrator before it can be used.'), 'error');
    return FALSE;
  }

  // Determine the currency code to use to actually process the transaction,
  // which will either be the default currency code or the currency code of the
  // charge if it's supported by QBMS if that option is enabled.
  $currency_code = $payment_method['settings']['currency_code'];

  if (!empty($payment_method['settings']['allow_supported_currencies']) && in_array($charge['currency_code'], array_keys(commerce_qbms_currencies()))) {
    $currency_code = $charge['currency_code'];
  }

  // Convert the charge amount to the specified currency.
  $amount = commerce_currency_convert($charge['amount'], $charge['currency_code'], $currency_code);

  // QBMS requires a billing address, so ensure one has been added to the order
  // before building the name-value pair array.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $valid_billing_address = TRUE;

  if (empty($order->commerce_customer_billing) || empty($order_wrapper->commerce_customer_billing->value()->commerce_customer_address)) {
    $valid_billing_address = FALSE;
  }
  else {
    // Check the values in the billing address array required by QBMS.
    $address_value = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    foreach (array('thoroughfare', 'postal_code') as $address_key) {
      if (empty($address_value[$address_key])) {
        $valid_billing_address = FALSE;
      }
    }
  }

  // Without a valid villing address, display and log the error messages and
  // prevent the payment attempt.
  if (!$valid_billing_address) {
    // Display a general error to the customer if we can't find the address.
    drupal_set_message(t('We cannot process your credit card payment without a valid billing address.'), 'error');

    // Provide a more descriptive error message in the failed transaction and
    // the watchdog.
    $transaction = commerce_payment_transaction_new('commerce_qbms', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $amount;
    $transaction->currency_code = $currency_code;
    $transaction->payload[REQUEST_TIME] = array();
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('The customer must be able to supply a billing address through the default address field of the core billing information customer profile to pay via QBMS.');
    commerce_payment_transaction_save($transaction);

    watchdog('commerce_qbms', 'A QBMS transaction failed because the order did not have a value for the default billing address field. Your order or checkout configuration may need to be adjusted to support credit card payment via QBMS.', NULL, WATCHDOG_ERROR);

    return FALSE;
  }

  // This is the application login assigned during the application registration
  // process.
  $application_login = $payment_method['settings']['application_login'];

  // This is the connection ticket assigned during the application registration
  // process.
  $connection_ticket = decrypt($payment_method['settings']['connection_ticket']);

  // Create an instance of the MerchantService object.
  $qbms = new QuickBooks_MerchantService(NULL, NULL, $application_login, $connection_ticket);

  // If a test environment has been specified.
  if ($payment_method['settings']['environment'] == 'test') {
    $qbms->useTestEnvironment(true);
  }

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  // Create the CreditCard object.
  $card = new QuickBooks_MerchantService_CreditCard($pane_values['credit_card']['owner'], $pane_values['credit_card']['number'], $pane_values['credit_card']['exp_year'], $pane_values['credit_card']['exp_month'], $billing_address['thoroughfare'], $billing_address['postal_code'], $pane_values['credit_card']['code']);

  // Submit the request to QBMS.
  $response = _commerce_qbms_api_request($payment_method, $qbms, $card, commerce_qbms_price_amount($amount, $currency_code));

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('commerce_qbms', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency_code;
  $transaction->payload[REQUEST_TIME] = $response;

  // Build a meaningful response message.
  $message = array();
  $action = commerce_qbms_payment_action($payment_method['settings']['txn_type']);

  if ($response) {
    $transaction->remote_id = $response->getTransactionID();
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->remote_status = $response->getPaymentStatus();
    $message[] = '<b>' . t('@txn_type - Success', array('@txn_type' => $action)) . '</b>';
    $message[] = t('AVS street response: @avs_street', array('@avs_street' => $response->getAVSStreet()));
    $message[] = t('AVS zip response: @avs_zip', array('@avs_zip' => $response->getAVSZip()));
    $message[] = t('CVV match: @cvv', array('@cvv' => $response->getCardSecurityCodeMatch()));
  }
  else {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->remote_status = 'Failed';
    $message[] = '<b>' . t('@txn_type - Failure', array('@txn_type' => $action)) . '</b>';
    $message[] = t('@number: @message', array('@number' => $qbms->errorNumber(), '@message' => $qbms->errorMessage()));
  }

  // Set the final message.
  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if (!$response) {
    drupal_set_message(t('We encountered an error processing your payment. Please verify your credit card details or try a different card.'), 'error');
    return FALSE;
  }
}

/**
 * Submits a request to QBMS.
 */
function _commerce_qbms_api_request($payment_method, $qbms, $card, $amount) {
  // Submit the request to QBMS.
  switch ($payment_method['settings']['txn_type']) {
    case COMMERCE_CREDIT_AUTH_CAPTURE:
    default:
      $response = $qbms->charge($card, $amount);
  }

  // Log the request if specified.
  if ($payment_method['settings']['log']['request']) {
    watchdog('commerce_qbms', "QBMS API request:\n !request", array('!request' => '<pre>' . check_plain(print_r(QuickBooks_Utilities::mask($qbms->lastRequest()), TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Log the response if specified.
  if ($payment_method['settings']['log']['response']) {
    watchdog('commerce_qbms', "QBMS API response:\n !response", array('!response' => '<pre>' . check_plain(print_r(QuickBooks_Utilities::mask($qbms->lastResponse()), TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  return $response;
}
