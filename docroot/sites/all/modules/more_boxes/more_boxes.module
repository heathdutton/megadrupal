<?php
/**
 * Implementation of hook_init().
 */
function more_boxes_init() {
  drupal_add_js(drupal_get_path('module', 'more_boxes') . '/theme/more_boxes.js');
  drupal_add_css(drupal_get_path('module', 'more_boxes') . '/theme/more_boxes.css');
}

/**
 * Implementation of hook_theme().
 */
function more_boxes_theme($existing, $type, $theme, $path) {
  return array(
    'more_boxes_lobby_row' => array(
      'variables' => array('title' => NULL, 'description' => NULL, 'view' => NULL, 'more_link' => NULL),
      'path' => drupal_get_path('module', 'more_boxes') . '/theme',
      'template' => 'more-boxes-lobby-row', 
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function more_boxes_ctools_plugin_api($module, $api) {
  if ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 */
function more_boxes_ctools_plugin_plugins() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE,
  );
}

/**
 * Implementation of hook_boxes_plugins().
 */
function more_boxes_boxes_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'more_boxes') . '/boxes_plugins';
  
  $info['imce_box'] = array(
    'title' => t('Imce Box'),
    'handler' => array(
      'class' => 'more_boxes_imce_image',
      'file' => 'more_boxes_imce_image.inc',
      'path' => $path,
      'parent' => 'box',
    ),
  );
  
  $info['links_box'] = array(
    'title' => t('Link Box'),
    'handler' => array(
      'class' => 'more_boxes_links',
      'file' => 'more_boxes_links.inc',
      'path' => $path,
      'parent' => 'box',
    ),
  );
  $info['list_1_box'] = array(
    'title' => t('List 1'),
    'handler' => array(
      'class' => 'more_boxes_list_1',
      'file' => 'more_boxes_list_1.inc',
      'path' => $path,
      'parent' => 'box',
    ),
  );
  $info['list_2_box'] = array(
    'title' => t('List 2'),
    'handler' => array(
      'class' => 'more_boxes_list_2',
      'file' => 'more_boxes_list_2.inc',
      'path' => $path,
      'parent' => 'box',
    ),
  );
  $info['node_images_box'] = array(
    'title' => t('Node Images'),
    'handler' => array(
      'class' => 'more_boxes_node_images',
      'file' => 'more_boxes_node_images.inc',
      'path' => $path,
      'parent' => 'box',
    ),
  );
  $info['imce_box'] = array(
    'title' => t('banner'),
    'handler' => array(
      'class' => 'more_boxes_imce',
      'file' => 'more_boxes_imce.inc',
      'path' => $path,
      'parent' => 'box',
    ),
  );
  
  return $info;
}

/**
 * Implementation of hook_views_query_alter().
 */
function more_boxes_views_query_alter(&$view, &$query) {
  if ($view->name == 'more_boxes_dynamic_view') { 
    // Layout.
    (bool)$pager_type = $view->args[0]  ? 'full' : 'some'; // full, some, none
    (int)$items_per_page = $view->args[1];
    
    $view->display_handler->default_display->options['pager']['type'] = $pager_type;
    $view->display_handler->default_display->options['pager']['options']['items_per_page'] = $items_per_page;

    // Sorting.
    (string)$sort_type = $view->args[2];
    (bool)$sort_order = $view->args[3];
    
    $sort_array =& $view->query->orderby;
    foreach ($sort_array as $k => $v) {
      if ($k != $sort_order) {
        unset($sort_array[$k]);
      }
      else {
        $sort_array[$k]['direction'] = !$sort_order ? 'asc' : 'desc';
      }
    }  
    foreach ($view->filter as $k => $filter) {
      if ($filter->options['exposed']) {
        $expo[] = $k;
      }      
    }
    if (!isset($expo) || empty($expo)) {
      unset($view->exposed_widgets );
    }
  }
  
}

/**
 * Implementation of hook_views_pre_build().
 */
function more_boxes_views_pre_build(&$view) {
  if ($view->name == 'more_boxes_dynamic_view') {     
    // Exposed Filters.
    // Removing exposed filters from display, 
    // have to occur quite early in the view building.
    $show_form = $view->args[4];
    $exposed_vocabulary = $view->args[5];
    $toggle_search = $view->args[6];

    // Remove the exposed filters by default   
    if (!isset($toggle_search) || empty($toggle_search)) {
      unset($view->filter['title']);
    }
    if (!isset($show_form) || empty($show_form)) {
       //$view->filter['tid']->options['exposed'] = FALSE;
       unset($view->filter['tid']);
    }
    // Set the vocabulary for the expose filter.
    else {
      $view->filter['tid']->options['vocabulary'] = $exposed_vocabulary;
    }
  }
}
