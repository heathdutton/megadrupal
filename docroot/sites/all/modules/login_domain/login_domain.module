<?php

/**
 * Implements hook_permission().
 */
function login_domain_permission() {
  return array(
    'bypass login domain redirect' => array(
      'title' => t('Bypass login domain redirection when logged in'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function login_domain_form_user_login_alter(&$form, &$form_state) {
  if ($base_url = login_domain_get_redirect_base_url()) {
    $form['#action'] = url(current_path(), array('query' => drupal_get_destination(), 'base_url' => $base_url, 'absolute' => TRUE));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function login_domain_form_user_login_block_alter(&$form, &$form_state) {
  login_domain_form_user_login_alter($form, $form_state);
}

/**
 * Implements hook_init().
 */
function login_domain_init() {
  if (login_domain_can_redirect() && $base_url = login_domain_get_redirect_base_url()) {
    drupal_goto(current_path(), array('query' => drupal_get_destination(), 'base_url' => $base_url, 'absolute' => TRUE));
  }
}

/**
 * Check if the current user can be redirected to the login domain.
 *
 * @return bool
 */
function login_domain_can_redirect() {
  // Do not redirect anonymous users.
  if (empty($GLOBALS['user']->uid)) {
    return FALSE;
  }

  // Do not redirect CLI/Drush requests.
  if (drupal_is_cli()) {
    return FALSE;
  }

  // Do not redirect users that have the bypass permission.
  if (user_access('bypass login domain redirect')) {
    return FALSE;
  }

  return TRUE;
}

/**
 * @return string|null
 */
function login_domain_get_redirect_base_url() {
  if ($login_domain = variable_get('login_domain')) {
    if ($_SERVER['HTTP_HOST'] != $login_domain) {
      $login_domain = (variable_get('https', FALSE) ? 'https://' : 'http://') . $login_domain;
      return $login_domain;
    }
  }
}
