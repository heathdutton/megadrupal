<?php
/**
 * @file
 * Main code file for LiveInternet module.
 */

/**
 * Define the default types of LiveInternet counter.
 *
 * Each array group has different types of counter. Values of this arrays are
 * identifiers with similar display.
 */
define('LIVEINTERNET_IDENTIFIERS',
  serialize(
    array(
      array(52, 53, 54),
      array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22),
      array(57, 58),
      array(23, 24, 25, 26),
      array(38, 39, 40, 41, 42, 43, 44, 45),
      array(27, 28, 29),
    )
  )
);

/**
 * Implements hook_menu().
 */
function liveinternet_menu() {
  $items['admin/config/system/liveinternet'] = array(
    'title' => 'LiveInternet',
    'description' => 'Configurate LiveInternet tracking counter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('liveinternet_admin_settings_form'),
    'access arguments' => array('administer liveinternet'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'liveinternet.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function liveinternet_permission() {
  return array(
    'administer liveinternet' => array(
      'title' => t('Administer LiveInternet'),
      'description' => t('Configure LiveInternet tracking counter.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function liveinternet_help($path, $arg) {
  if ($path == 'admin/config/system/liveinternet') {
    return t('!LiveInternet is a statistic service. It allows to track visitors, page views, referring sites, the most popular pages, etc. The image with LiveInternet logotype have to be on every tracking page in free version of counter.',
      array(
        '!LiveInternet' => l(t('LiveInternet'), 'http://liveinternet.ru',
          array(
            'attributes' => array(
              'target' => '_blank',
            ),
          )
        ),
      )
    );
  }
}

/**
 * Implements hook_block_info().
 */
function liveinternet_block_info() {
  $block['liveinternet'] = array(
    'info' => t('LiveInternet counter'),
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function liveinternet_block_view($delta = '') {

  // Exit if it is not LiveInternet block.
  if ($delta != 'liveinternet') {
    return NULL;
  };

  // Identifier of counter.
  $id = variable_get('liveinternet_id', 52);
  // Counter color scheme.
  $color = variable_get('liveinternet_color', 1);
  // Counter in form of one or two images.
  $style = variable_get('liveinternet_style', 0);
  // Counter code in many lines or in one.
  $html_line = variable_get('liveinternet_html_line', 0);
  // Track page titles or not.
  $page_titles = variable_get('liveinternet_page_titles', 0);
  // Counter for group or not.
  $group = variable_get('liveinternet_group', NULL);
  $output = NULL;

  // Generate code for counter in form of one image.
  if (!$style) {
    $output = array(
      '#theme' => 'liveinternet',
      '#id' => $id,
      '#color' => $color,
      '#style' => $style,
      '#html_line' => $html_line,
      '#page_titles' => $page_titles,
      '#group' => $group,
    );
  }
  // In form of two images (hidden in JavaScript and normal with logotype).
  // Normal image is added here.
  // Other code is added in liveinternet_page_build().
  else {
    // Get height and width of counter image.
    $picture = _liveinternet_attributes($id);
    $height = $picture['height'];
    $width = $picture['width'];
    $title = $picture['title'];

    // Add image with link.
    $output = array(
      '#theme' => 'liveinternet_image',
      '#link' => TRUE,
      '#id' => $id,
      '#color' => $color,
      '#height' => $height,
      '#width' => $width,
      '#title' => $title,
      '#alt' => NULL,
      '#group' => $group,
    );
  }

  $block['content'] = $output;
  return $block;
}

/**
 * Implements hook_page_build().
 */
function liveinternet_page_build(&$page) {

  $liveinternet_block = block_load('liveinternet', 'liveinternet');

  // Exit if the block is not on current page.
  if (!block_list($liveinternet_block->region)) {
    return NULL;
  };

  $style = variable_get('liveinternet_style', 0);

  // Exit if checked style with one image.
  if (!$style) {
    return NULL;
  }

  $id = variable_get('liveinternet_id', 52);
  $color = variable_get('liveinternet_color', 1);
  $html_line = variable_get('liveinternet_html_line', 0);
  $page_titles = variable_get('liveinternet_page_titles', 0);
  $group = variable_get('liveinternet_group', NULL);
  $theme = NULL;

  $theme = theme('liveinternet', array(
    'id' => $id,
    'color' => $color,
    'style' => $style,
    'html_line' => $html_line,
    'page_titles' => $page_titles,
    'group' => $group,
  ));

  // JavaScript scope on the page.
  $js_scope = variable_get('liveinternet_js_scope', 0);

  switch ($js_scope) {
    case 0:
      // Scope after <body> tag.
      $js_scope = 'page_top';
      break;

    case 1:
      // Scope before </body> tag.
      $js_scope = 'page_bottom';
      break;
  }

  $page[$js_scope]['liveinternet'] = array(
    '#markup' => $theme,
  );
}

/**
 * Return height, width and title for LiveInternet counter image.
 *
 * @param int $id
 *   The LiveInternet counter identifier.
 *
 * @return array
 *   An associative array containing:
 *   - id: The LiveInternet counter identifier.
 *   - height: LiveInternet counter image height.
 *   - width: LiveInternet counter image width.
 *   - title: LiveInternet link title.
 */
function _liveinternet_attributes($id) {

  $ids = unserialize(LIVEINTERNET_IDENTIFIERS);

  $attributes = array();
  $attributes['id'] = $id;

  if (in_array($id, $ids[0])) {
    $attributes['height'] = 31;
    $attributes['width'] = 88;
    $attributes['title'] = t('LiveInternet: number of pageviews and visitors for 24 hours is shown');
  }

  if (in_array($id, $ids[1])) {
    $attributes['height'] = 31;
    $attributes['width'] = 88;
    $attributes['title'] = t('LiveInternet: number of pageviews for 24 hours, of visitors for 24 hours and for today is shown');
  }

  if (in_array($id, $ids[2])) {
    $attributes['height'] = 31;
    $attributes['width'] = 88;
    $attributes['title'] = t('LiveInternet');
  }

  if (in_array($id, $ids[3])) {
    $attributes['height'] = 15;
    $attributes['width'] = 88;
    $attributes['title'] = t('LiveInternet: number of visitors for today is shown');
  }

  if (in_array($id, $ids[4])) {
    $attributes['height'] = 31;
    $attributes['width'] = 31;
    $attributes['title'] = t('LiveInternet');
  }

  if (in_array($id, $ids[5])) {
    $attributes['height'] = 120;
    $attributes['width'] = 88;
    $attributes['title'] = t('LiveInternet: number of visitors and pageviews is shown');
  }

  return $attributes;
}

/**
 * Returns HTML for LiveInternet counter.
 *
 * Some LiveInternet JavaScript code should be place inline in particular place
 * of page. Drupal_add_js() does not allow to do it. So this function generate
 * code with "<script type="text/javascript">" constructions.
 *
 * @param array $variables
 *   An associative array containing:
 *   - id: The LiveInternet counter identifier.
 *   - color: The LiveInternet color scheme identifier.
 *   - style: FALSE to generate code with form of single image, TRUE to generate
 *     code with form of two images.
 *   - html_line: FALSE to generate code on many lines, TRUE to generate code
 *     into one line.
 *   - page_titles: FALSE to do not record page titles, TRUE to record.
 *   - group: Group name for tracking a group of sites.
 *
 * @ingroup themeable
 */
function theme_liveinternet(array $variables) {

  $id = check_plain($variables['id']);
  $color = check_plain($variables['color']);
  $style = check_plain($variables['style']);
  $html_line = check_plain($variables['html_line']);
  $page_titles = check_plain($variables['page_titles']);

  $group = NULL;
  // Group name must have ";" at the beginning.
  if (!empty($variables['group'])) {
    $group = ';' . check_plain($variables['group']);
  }

  $output = '';

  // Get width, height and title of counter image.
  $attributes = _liveinternet_attributes($id);
  $width = $attributes['width'];
  $height = $attributes['height'];
  $title = $attributes['title'];

  // Do not track page titles by default.
  $page_titles_code = NULL;

  if (!($style) && !($html_line)) {

    // Add addition code to track page titles.
    if ($page_titles) {
      $page_titles_code = '";h"+escape(document.title.substring(0,80))+';
    }

    // Used for long lines to break it to two lines.
    $placeholder = "\"+\n\"";

    $ids = unserialize(LIVEINTERNET_IDENTIFIERS);

    // Overwrite title depends on counter type.
    if (in_array($id, $ids[0])) {
      $title = t("LiveInternet: number of pageviews and visitors!placeholder for 24 hours is shown", array('!placeholder' => $placeholder));
    }

    if (in_array($id, $ids[1])) {
      $title = t("LiveInternet: number of pageviews for 24 hours,!placeholder of visitors for 24 hours and for today is shown", array('!placeholder' => $placeholder));
    }

    if (in_array($id, $ids[3])) {
      $title = t("LiveInternet: number of visitors for today is!placeholder shown", array('!placeholder' => $placeholder));
    }

    if (in_array($id, $ids[5])) {
      $title = t("LiveInternet: number of visitors and pageviews!placeholder is shown", array('!placeholder' => $placeholder));
    }

    // Default LiveInternet counter code.
    $output = <<<LIVEINTERNET_ONE_IMAGE
<script type="text/javascript"><!--
document.write("<a href='http://www.liveinternet.ru/click$group' "+
"target=_blank><img src='//counter.yadro.ru/hit$group?t$id.$color;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
$page_titles_code";"+Math.random()+
"' alt='' title='$title' "+
"border='0' width='$width' height='$height'><\/a>")
//--></script>
LIVEINTERNET_ONE_IMAGE;
  }

  if (!($style) && ($html_line)) {

    // Overwrite page titles code for this inline LiveInternet counter code.
    if ($page_titles) {
      $page_titles_code = '+";h"+escape(document.title.substring(0,80)) ';
    }

    // Default LiveInternet counter code in one line.
    $output = <<<LIVEINTERNET_ONE_IMAGE_INLINE
<script type="text/javascript">document.write("<a href='http://www.liveinternet.ru/click$group' target=_blank><img src='//counter.yadro.ru/hit$group?t$id.$color;r" + escape(document.referrer) + ((typeof(screen)=="undefined")?"":";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?screen.colorDepth:screen.pixelDepth)) + ";u" + escape(document.URL) $page_titles_code+ ";" + Math.random() + "' border=0 width=$width height=$height alt='' title='$title'><\/a>")</script>
LIVEINTERNET_ONE_IMAGE_INLINE;
  }

  if (($style) && !($html_line)) {

    // Overwrite page titles code for this LiveInternet counter code.
    if ($page_titles) {
      $page_titles_code = "\n\";h\"+escape(document.title.substring(0,80))+";
    }

    // One part of LiveInternet code in form of two images.
    // Here is a hidden JavaScript image.
    $output = <<<LIVEINTERNET_TWO_IMAGES
<script type="text/javascript"><!--
new Image().src = "//counter.yadro.ru/hit$group?r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+$page_titles_code
";"+Math.random();//--></script>
LIVEINTERNET_TWO_IMAGES;
  }

  if (($style) && ($html_line)) {
    // Overwrite page titles code for this inline LiveInternet counter code.
    if ($page_titles) {
      $page_titles_code = '";h"+escape(document.title.substring(0,80)) + ';
    }

    // The same code as above in one line.
    $output = <<<LIVEINTERNET_TWO_IMAGES_INLINE
<script type="text/javascript">new Image().src = "//counter.yadro.ru/hit$group?r" + escape(document.referrer) + ((typeof(screen)=="undefined")?"" : ";s"+screen.width+"*"+screen.height+"*" + (screen.colorDepth?screen.colorDepth:screen.pixelDepth)) + ";u"+escape(document.URL) +  $page_titles_code";" +Math.random();</script>
LIVEINTERNET_TWO_IMAGES_INLINE;
  }

  return $output;
}

/**
 * Returns HTML for LiveInternet counter image.
 *
 * @param array $variables
 *   An associative array containing:
 *   - link: FALSE to not to do image as link, TRUE to do шею
 *   - id: The LiveInternet counter identifier.
 *   - color: The LiveInternet color scheme identifier.
 *   - height: LiveInternet counter image height.
 *   - width: LiveInternet counter image width.
 *   - title: LiveInternet link title.
 *   - alt: LiveInternet image alternative text.
 *   - group: Group name for tracking a group of sites.
 *
 * @ingroup themeable
 */
function theme_liveinternet_image(array $variables) {

  $output = theme('image', array(
      'path' => '//counter.yadro.ru/logo' . $variables['group'] . '?' . $variables['id'] . '.' . $variables['color'],
      'height' => $variables['height'],
      'width' => $variables['width'],
      'attributes' => array(
        'border' => 0,
      ),
      'alt' => $variables['alt'],
      'title' => $variables['title'],
    ));

  if ($variables['link']) {
    // Override link value to exclude looping.
    $variables['link'] = FALSE;

    // Group name must have ";" in the beginning.
    if (!empty($variables['group'])) {
      $variables['group'] = ';' . $variables['group'];
    }

    $liveinternet_link = 'http://www.liveinternet.ru/click' . $variables['group'];

    $output = l(theme('liveinternet_image', ($variables)),
      $liveinternet_link,
      array(
        'attributes' => array(
          'target' => "_blank",
        ),
        'html' => TRUE,
      )
    );
  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function liveinternet_theme() {
  return array(
    'liveinternet' => array(
      'variables' => array(
        'id' => NULL,
        'color' => NULL,
        'style' => NULL,
        'html_line' => NULL,
        'page_titles' => NULL,
        'group' => NULL,
      ),
    ),
    'liveinternet_image' => array(
      'variables' => array(
        'link' => NULL,
        'id' => NULL,
        'color' => NULL,
        'height' => NULL,
        'width' => NULL,
        'title' => NULL,
        'alt' => NULL,
        'group' => NULL,
      ),
    ),
  );
}
