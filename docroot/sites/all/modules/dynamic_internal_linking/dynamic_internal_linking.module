<?php
/**
 * @file
 * Module file.
 */

define('DYNAMIC_INTERNAL_LINKING_TYPE_FIELDS_WEIGHT', 10);
define('DYNAMIC_INTERNAL_LINKING_ENABLED', 0);
define('DYNAMIC_INTERNAL_LINKING_MAX_LINKS', 5);

/**
 * Implements hook_permission().
 */
function dynamic_internal_linking_permission() {
  return array(
    'administer dynamic internal linking' => array(
      'title' => t('Administer dynamic internal linking'),
      'description' => t('Perform administration tasks for dynamic internal linking module.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dynamic_internal_linking_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $type = array();
  if (user_access('administer dynamic internal linking')) {
    $fields = field_info_instances('node', $form['#node_type']->type);
    if (is_array($fields) && count($fields) > 0) {
      foreach ($fields as $field_value) {
        if (is_array($field_value) && array_key_exists('widget', $field_value) && is_array($field_value['widget']) && array_key_exists('type', $field_value['widget'])) {
          $type[] = $field_value['widget']['type'];
        }
      }
    }

    // Textarea widget type.
    $widget_type = array('text_textarea_with_summary', 'text_textarea');

    // Intersecting with widgets of a content type.
    $matches = array_intersect($type, $widget_type);

    $form['dynamic_internal_linking'] = array(
      '#type' => 'fieldset',
      '#title' => t('Dynamic Internal Linking'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => DYNAMIC_INTERNAL_LINKING_TYPE_FIELDS_WEIGHT,
    );

    $dil_var = 'dynamic_internal_linking_enabled';
    $dil_field = 'dynamic_internal_linking_widget';

    $form['dynamic_internal_linking'][$dil_var] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable dynamic internal linking'),
      '#description' => t('There should be atleast one text area field in the content type to enable this feature'),
      '#default_value' => variable_get($dil_var . '_' . $form['#node_type']->type, DYNAMIC_INTERNAL_LINKING_ENABLED),
      '#disabled' => empty($matches) ? TRUE : FALSE,
    );

    $form['dynamic_internal_linking'][$dil_field] = array(
      '#type' => 'textfield',
      '#title' => t('Dynamic internal linking Widget'),
      '#default_value' => variable_get($dil_field . '_' . $form['#node_type']->type, DYNAMIC_INTERNAL_LINKING_ENABLED),
      '#description' => t('Name of the text area for the dynamic internal linking'),
      '#disabled' => empty($matches) ? TRUE : FALSE,
      '#states' => array(
        'visible' => array(
          ':input[name="' . $dil_var . '"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function dynamic_internal_linking_menu() {
  $items = array();
  $items['admin/config/search/dil'] = array(
    'title' => 'Dynamic Internal Linking',
    'description' => 'Map keyword and links',
    'page callback' => 'dynamic_internal_linking_map_keywords',
    'access arguments' => array('administer dynamic internal linking'),
    'file' => 'includes/admin.inc',
  );
  $items['admin/config/search/dil/add-keyword'] = array(
    'title' => 'Add Keyword',
    'description' => 'Map keyword and links',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  $items['admin/config/search/dil/import-keywords'] = array(
    'title' => 'Import Keywords',
    'description' => 'Import keywords through CSV',
    'page callback' => 'dynamic_internal_linking_import_keywords',
    'access arguments' => array('administer dynamic internal linking'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  return $items;
}

/**
 * Gives the status for keyword.
 *
 * @param string $keyword
 *   Keyword (String).
 *
 * @return bool
 *   True if keyword exists else false.
 */
function dynamic_internal_linking_keyword_already_exists($keyword = '') {
  if (empty($keyword)) {
    return FALSE;
  }
  $query = db_select('dil_keywords_links', 'dkl')
  ->fields('dkl')
  ->condition('keyword', $keyword)
  ->execute()
  ->fetchAssoc();

  if (!empty($query)) {
    return TRUE;
  }
}

/**
 * Save the mapping of keyword and link.
 *
 * @param string $keyword
 *   Keyword to be mapped.
 * @param string $link
 *   Link for mapping.
 */
function dynamic_internal_linking_save_keyword($keyword, $link) {
  if (empty($keyword) || !valid_url($link)) {
    return;
  }

  $fields = array(
    'keyword' => $keyword,
    'link' => $link,
  );

  db_insert('dil_keywords_links')
  ->fields($fields)
  ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dynamic_internal_linking_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node_type = $form['#node']->type;
  $dil_enable = variable_get('dynamic_internal_linking_enabled_' . $node_type);
  if (!empty($dil_enable) && $dil_enable == 1) {
    $keyword = dynamic_internal_linking_keyword_list();
    if (!empty($keyword)) {
      $form['select_keyword_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Keywords For Linking'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => -4,
      );
      $default_keywords = '';
      if (isset($form['nid']['#value'])) {
        $nid = $form['nid']['#value'];
        $default_keywords = dynamic_internal_linking_get_node_keywords($nid);
      }
      $form['select_keyword_fieldset']['select_keyword'] = array(
        '#type' => 'select',
        '#title' => t('Select Keyword'),
        '#description' => t('Select 5 Keywords at max for internal linking'),
        '#multiple' => TRUE,
        '#options' => $keyword,
        '#default_value' => $default_keywords,
      );

      // Adding a validate function for validating the selected keywords.
      $form['#validate'][] = 'dynamic_internal_linking_validation_select_keyword';

      // Ajax for submitting, so that nid and keywords can be mapped.
      ctools_include('ajax');
      ctools_add_js('ajax-responder');
      $form['#prefix'] = '<div id="dil-form-container">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'dynamic_internal_linking_save_nid_mapping',
        'wrapper' => 'dil-form-container',
        'method' => 'replace',
      );
    }
  }
}

/**
 * Get the keyword list.
 */
function dynamic_internal_linking_keyword_list() {
  $keywords = array();
  $query = db_select('dil_keywords_links', 'dl')
  ->fields('dl', array('keyword'))
  ->execute();

  while ($result = $query->fetchAssoc()) {
    $keywords[$result['keyword']] = $result['keyword'];
  }

  return $keywords;
}

/**
 * Ajax Callback function for saving nid and keyword mapping.
 *
 * @param array $form
 *   Submitted Form.
 * @param array $form_state
 *   Submitted form state.
 *
 * @return array
 *   Form after modification.
 */
function dynamic_internal_linking_save_nid_mapping(array $form, array $form_state) {
  if (!form_get_errors()) {
    ctools_include('ajax');
    $commands   = array();
    $nid = $form_state['values']['nid'];
    $commands[] = ctools_ajax_command_redirect('node/' . $nid);
    $keyword = $form_state['values']['select_keyword'];
    if (empty($keyword)) {
      return array('#type' => 'ajax', '#commands' => $commands);
    }
    else {
      dynamic_internal_linking_save_keyword_nid($nid, $keyword);
      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }
  return $form;
}

/**
 * Saves the keyword and nid.
 *
 * @param int $nid
 *   Node Id to be mapped with keywords.
 * @param array $keywords
 *   Keyword to be saved with node.
 */
function dynamic_internal_linking_save_keyword_nid($nid, array $keywords = array()) {

  if (empty($nid) || empty($keywords)) {
    return;
  }

  // Delete all the keywords for a nid.
  db_delete('dil_keyword_mapping')
  ->condition('nid', $nid)
  ->execute();

  // For unique keywords.
  $keywords = array_unique($keywords);
  // Save new Keywords.
  foreach ($keywords as $keyword) {
    $fields = array(
      'nid' => $nid,
      'keyword' => $keyword,
    );
    db_insert('dil_keyword_mapping')
    ->fields($fields)
    ->execute();
  }
}

/**
 * Implements hook_node_view().
 */
function dynamic_internal_linking_node_view($node) {
  $node_type = $node->type;
  $nid = $node->nid;
  $dil_enable = variable_get('dynamic_internal_linking_enabled_' . $node_type, DYNAMIC_INTERNAL_LINKING_ENABLED);
  if ($dil_enable == 1) {
    $dil_field = variable_get('dynamic_internal_linking_widget_' . $node_type, DYNAMIC_INTERNAL_LINKING_ENABLED);
    if ($dil_field !== 0) {
      $dil_field_value = field_get_items('node', $node, $dil_field);
      if (isset($dil_field_value[0]['value']) && !empty($dil_field_value)) {
        $dil_field_value = $dil_field_value[0]['value'];
        $keywords = dynamic_internal_linking_get_node_keywords($nid);
        if (!empty($keywords)) {
          $mappings = dynamic_internal_linking_get_keywords_mapping($keywords);
          if (!empty($mappings)) {
            foreach ($mappings as $mapping) {
              $dil_field_value = dynamic_internal_linking_change_field_value($dil_field_value, $mapping);
            }
            $node->content[$dil_field][0]['#markup'] = $dil_field_value;
          }
        }
      }
    }
  }
}

/**
 * Validating the select keyword. At max only 5 keywords can be selected.
 *
 * @param array $form
 *   Form for validation.
 * @param array $form_state
 *   Form State for validation.
 */
function dynamic_internal_linking_validation_select_keyword(array $form, array &$form_state) {
  $count = count($form_state['values']['select_keyword']);
  if ($count > DYNAMIC_INTERNAL_LINKING_MAX_LINKS) {
    form_set_error('select_keyword', t('Please select at most 5 keywords'));
  }
}

/**
 * Get all keywords for a node.
 *
 * @param string $nid
 *   Node id whose related keywords to be fetched.
 */
function dynamic_internal_linking_get_node_keywords($nid = '') {
  if (empty($nid)) {
    return;
  }

  $keywords = array();
  $query = db_select('dil_keyword_mapping', 'dkm')
  ->fields('dkm', array('keyword'))
  ->condition('dkm.nid', $nid)
  ->execute();

  while ($result = $query->fetchAssoc()) {
    $keywords[] = $result['keyword'];
  }

  return $keywords;
}

/**
 * Get mappings for the keywords.
 *
 * @param array $keywords
 *   Keywords whose mappings are to search.
 *
 * @return array
 *   Gives mapping related to keywords.
 */
function dynamic_internal_linking_get_keywords_mapping(array $keywords = array()) {
  if (empty($keywords) || !is_array($keywords)) {
    return NULL;
  }
  $mapping = array();
  $query = db_select('dil_keywords_links', 'dkl')
  ->fields('dkl')
  ->condition('dkl.keyword', $keywords, 'IN')
  ->execute();

  while ($result = $query->fetchAssoc()) {
    $mapping[] = $result;
  }
  return $mapping;
}

/**
 * Link the dil field with keyword mapping.
 *
 * @param string $dil_field_value
 *   Field value for replacing keywords to links.
 * @param array $mapping
 *   Keyword and mapping.
 */
function dynamic_internal_linking_change_field_value($dil_field_value, array $mapping) {
  $link = $mapping['link'];
  $link_host = parse_url($link);
  $link_host = $link_host['host'];
  $host = $_SERVER['HTTP_HOST'];
  if (valid_url($link, TRUE)) {
    if ($link_host == $host) {
      $dil_keyword_link = '<a href="' . $link . '" target="_self">' . $mapping['keyword'] . '</a>';
    }
    else {
      $dil_keyword_link = '<a rel="nofollow" href="' . $link . '" target="_blank">' . $mapping['keyword'] . '</a>';
    }
    // Load string to DOMDocument.
    $dom = filter_dom_load($dil_field_value);
    $xpath = new DOMXPath($dom);
    // Replace first occurrence of keyword which is not a link.
    $result = $xpath->query('//text()[not(ancestor::a)]');
    foreach ($result as $node) {
      $text = $node->wholeText;
      preg_match('/' . $mapping['keyword'] . '/', $text, $matches);
      if (!empty($matches)) {
        $text = preg_replace('/' . $mapping['keyword'] . '/', $dil_keyword_link, $text, 1);
        $new_node = $dom->createDocumentFragment();
        $new_node->appendXML($text);
        $node->parentNode->replaceChild($new_node, $node);
        break;
      }
    }
    // Convert a DOM object back to an HTML snippet.
    $dil_field_value = filter_dom_serialize($dom);
  }
  return $dil_field_value;
}
