<?php
/**
 * @file
 * Code for the Fastcache example feature.
 */

include_once 'fastcache_example.features.inc';

/**
 * Implements hook_fastcache_views().
 *
 * This hook must be defined in your custom module in order to make fastcache
 * work as designed. Here you define various lists/views in your specific
 * setup that will be cached and expired according to your definitions. Note that
 * "views" in the hook name is not limited solely to views contrib, the sense
 * of this hook is pretty generic - you can cache views, whole panels and any custom
 * content type pane (ctools plugin).
 *
 * @return array of view definitions
 */
function fastcache_example_fastcache_views() {
  $views = array(
    // The view lists entities of type 'article'. Its cache will be cleared when any
    // node of that type is created/updated/deleted.
    'latest_contents:page' => array(
      // The cache will not autoexpire until this amount of seconds has passed.
      // However, it can expire when node of type article is created, edited or deleted.
      'lifetime' => 1800,
      'entity_types' => 'article',
      'flag' => 'bookmarks',
    ),
    // The view lists entities of type 'user'. Its cache will be cleared when any
    // user is created/updated/deleted.
    'latest_users:page' => array(
      // Cache will expire if user entity is changed.
      'entity_types' => 'user',
      'flag' => 'follow',
    ),
    // The view lists entities of type 'article' which are user-specific (flagged).
    // Its cache will be cleared when user flags/unflags items of type 'article'.
    'favorite_articles:page' => array(
      'entity_types' => 'article',
      // This cache is individual for every user it is rendered for.
      'context_type' => 'user',
      // Each time an article is flagged/unflagged the cache is expired for user
      // who triggered the action.
      'clear_trigger' => array('flag'),
      'flag' => 'bookmarks',
    ),
    // Followed users.
    'followed_users:page' => array(
      'entity_types' => 'user',
      'context_type' => 'user',
      'clear_trigger' => array('flag'),
      'flag' => 'follow',
    ),
    // Page variant cache for search page.
    'panel_context:search-node::search_node_panel_context' => array(
      'entity_types' => array('article', 'page'),
      // Cache will be specific per path the results are shown on. For example,
      // search/node/term1 will have different cached results than search/node/term2.
      'context_type' => 'path',
    ),
    // List of contents owned by a user.
    'content_by_author:default' => array(
      // Owner option is set to indicate that this list shows items owned by user
      // who is author of the enity being expired. If not set, it will expire all
      // cached versions of the list (i.e. for all users).
      'owner' => TRUE,
      'context_type' => 'user',
      'entity_types' => array('article', 'page'),
      'flag' => 'bookmarks',
    ),
    // List of related articles.
    'related_articles:default' => array(
      'entity_types' => 'article',
      'context_type' => 'path',
      'flag' => 'bookmarks',
    ),
    // List of users that bookmarked a specific article.
    'bookmarked_by:default' => array(
      'entity_types' => 'user',
      'context_type' => 'path',
      'flag' => 'follow',
    ),
    // Support for custom Ctools content types (panes).
    'block:user-new' => array(
      'entity_types' => 'user',
    ),
  );

  return $views;
}
