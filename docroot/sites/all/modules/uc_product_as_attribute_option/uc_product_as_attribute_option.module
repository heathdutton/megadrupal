<?php
/**
 * Allows for association of attribute options to other product nodes.
 */

/**
 * Implements hook_entity_info_alter().
 */
function uc_product_as_attribute_option_entity_info_alter(&$entity_info) {
  // This view mode will control how associated nodes look on products
  $entity_info['node']['view modes']['uc_product_as_attribute_option'] = array(
    'label' => t('Attribute option'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_product_add_to_cart_form().
 */
function uc_product_as_attribute_option_form_uc_product_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['attributes'])) {
    return;
  }
  $node = $form_state['build_info']['args'][0];
  $form['#attached']['css'][] = drupal_get_path('module', 'uc_product_as_attribute_option') . '/uc_product_as_attribute_option.css';
  $associations = uc_product_as_attribute_option_get_associations_by_product($node->nid);

  // Our options are to either hacking uc_attribute.module (no), overriding
  // a theme functions (incompatible with any other modules that would also do
  // so) so the last way forward: regenerate the form.
  $attributes = $form['attributes'];

  // Replace the stock form with our own magic.
  foreach (element_children($attributes) as $aid) {
    if ($form['attributes'][$aid]['#type'] == 'radios') {
      // Setup a variable that will track if we have found at least one node
      // option for this attribute. We will proceed as usual generating
      // replacement form items, and if no option-node associations are found
      // for this attribute then we'll restore the original form. We do this
      // to avoid having to load the attribute information for each option.
      $found = FALSE;

      $form['attributes'][$aid] = array(
        '#type' => 'item',
        '#title' => $attributes[$aid]['#title'],
        '#required' => TRUE,
        '#tree' => TRUE,
        '#description' => $attributes[$aid]['#description'],
      );
      foreach ($attributes[$aid]['#options'] as $oid => $option) {
        $form['attributes'][$aid][$oid] = array(
          '#tree' => 'false',
          '#type' => 'container',
        );

        $form['attributes'][$aid][$oid]['radio'] = array(
          '#type' => 'radio',
          '#return_value' => $oid,
          '#title' => $option,
          '#parents' => array('attributes', $aid),
          '#default_value' => $attributes[$aid]['#default_value'] == $oid,
        );
        if (isset($attributes[$aid]['#ajax'])) {
          $form['attributes'][$aid][$oid]['radio']['#ajax'] = $attributes[$aid]['#ajax'];
        }

        $form['attributes'][$aid][$oid]['description'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('uc-product-as-attribute-option-description')),
          '#tree' => FALSE,
        );

        $option_node = uc_product_as_attribute_option_get_option_node($oid);
        if ($option_node) {
          $found = TRUE;
          $form['attributes'][$aid][$oid]['description']['entity'] = entity_view('node', array($option_node), 'uc_product_as_attribute_option');
        }
      }
      if (!$found) {
        $form['attributes'][$aid] = $attributes[$aid];
      }
    }
  }

  // undo the above for debuggin
  //$form['attributes'] = $attributes;

  $form['#validate'][] = 'uc_product_as_attribute_option_uc_product_add_to_cart_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_product_settings_form().
 */
function uc_product_as_attribute_option_form_uc_product_settings_form_alter(&$form, &$form_state) {
  $form['uc_product_as_attribute_option'] = array(
    '#type' => 'fieldset',
    '#title' => 'Product as attribute option settings',
    '#group' => 'product-settings',
    '#weight' => -3,
  );
  $form['uc_product_as_attribute_option']['uc_product_as_attribute_option_cart_display'] = array(
    '#type' => 'radios',
    '#title' => t('Behavior during cart and checkout'),
    '#default_value' => variable_get('uc_product_as_attribute_option_cart_display', 'none'),
    '#options' => array(
      'none' => t('No change: No itemization or stock management of products associated to options. Only the display of attribute options on product pages is changed.'),
      'none_stock' => t('Stock management only: No itemization but stock levels of products associated to options are managed.'),
      'unit' => t('Itemize as a unit: Itemization on orders, but not in the cart. Stock levels of products associated to options are managed.'),
      'individual' => t('Itemize as individual products: Itemization on orders and in the cart. Stock levels of products associated to options are managed.'),
    ),
    '#description' => t('Determines how products associated to options should be handled during cart management and checkout. No itemization indicates that only the original product with its attribute configuration is listed on orders. Itemization on orders means that the products associated to options are also added to the order as line items. Itemization in the cart means the customers can add, remove, or adjust the quantity of the products associated to options (not recommended). If stock management is selected, it will adhere to the existing Rules configuration of the store.'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_attribute_option_form().
 */
function uc_product_as_attribute_option_form_uc_attribute_option_form_alter(&$form, &$form_state, $form_id) {
  // Alters the global, admin attribute option forms at admin/store/products/attributes
  $attribute = $form_state['build_info']['args'][0];
  $option = $form_state['build_info']['args'][1];

  $option_node = NULL;
  if (isset($option)) {
    $option_node = uc_product_as_attribute_option_get_option_node($option->oid);
  }

  $form['uc_product_as_attribute_option_node'] = array(
    '#type' => 'entityreference',
    '#title' => t('Product association'),
    '#description' => t('Enter a product to associate with this option. This node will be rendered next to the attribute option and its pricing will be used to control attribute option adjustments.'),
    '#era_entity_type' => 'node',
    '#era_bundles' => uc_product_types(),
    '#default_value' => $option_node ? $option_node->nid : FALSE,
  );

  if ($option_node) {
    // Restrict price setting of any attributes whose price is controlled by
    // associated nodes
    _uc_product_as_attribute_option_uc_attribute_option_form_adjustments_alter($form, $form_state);
  }

  $form['uc_product_as_attribute_option_node']['#ajax'] = array(
    'callback' => 'uc_product_as_attribute_option_uc_attribute_option_form_ajax',
    'wrapper' => $form['#id'],
    'event' => 'blur',
  );

  $form['#submit'][] = 'uc_product_as_attribute_option_uc_attribute_option_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_object_options_form().
 */
function uc_product_as_attribute_option_form_uc_object_options_form_alter(&$form, &$form_state, $form_id) {
  // Alters the option table for a product node or product class.
  $object = $form_state['build_info']['args'][0];
  $type = $form_state['build_info']['args'][1];

  $attributes = array();
  if ($type == 'product') {
    $attributes = uc_product_get_attributes($object->nid);
  }
  elseif ($type == 'class') {
    $attributes = uc_class_get_attributes($object->pcid);
  }


  $associations = array();
  if (isset($object->pcid)) {
    $associations = uc_product_as_attribute_option_get_associations_by_product_class($object->pcid);
  }
  elseif (isset($object->nid)) {
    $associations = uc_product_as_attribute_option_get_associations_by_product($object->nid);
  }

  foreach (element_children($form['attributes']) as $aid) {
    foreach (element_children($form['attributes'][$aid]['options']) as $oid) {
      $option = &$form['attributes'][$aid]['options'][$oid];
      if (isset($associations[$oid])) {
        $option['price']['#attributes']['disabled'] = 'disabled';
        $option['cost']['#attributes']['disabled'] = 'disabled';
      }
    }
  }
  $form['uc_product_as_attribute_option_notice'] = array('#markup' => t('Note: Customization of certain options have been disabled because they are bound to nodes.'));
  $form['#submit'][] = 'uc_product_as_attribute_option_uc_object_options_form_submit';
}

/**
 * Alters the adjustments in uc_attribute_option_form() when first loading the
 * form or regenerating it via AJAX.
 */
function _uc_product_as_attribute_option_uc_attribute_option_form_adjustments_alter(&$form, &$form_state) {
  $form['adjustments']['#description'] .= '<br /><br />' . t('Price adjustments are automatically configured based on the associated node when using products as attribute options.');

  foreach (element_children($form['adjustments']) as $child) {
    if ($child != 'weight') {
      $form['adjustments'][$child]['#attributes']['disabled'] = 'disabled';
      //$form['adjustments'][$child]['#value'] = 0;
      //$form['adjustments'][$child]['#access'] = FALSE;
    }
  }
}

/**
 * AJAX callback when user modifies the attribute option node association.
 */
function uc_product_as_attribute_option_uc_attribute_option_form_ajax($form, $form_state) {
  if ($form_state['values']['uc_product_as_attribute_option_node']) {
    _uc_product_as_attribute_option_uc_attribute_option_form_adjustments_alter($form, $form_state);
  }
  return $form;
}

/**
 * Custom validation callback for the uc_product_add_to_cart() form.
 *
 * Ensures all required attributes are selected after they've been replaced with
 * individual radio buttons.
 */
function uc_product_as_attribute_option_uc_product_add_to_cart_validate($form, &$form_state) {
  foreach ($form_state['values']['node']->attributes as $aid => $attribute) {
    // Check if the attribute was required, if we replaced its form elements and it was empty.
    if ($attribute->required && $form['attributes'][$aid]['#type'] == 'item' && empty($form_state['values']['attributes'][$aid])) {
      form_set_error('attributes][$aid', t('!field field is required.', array('!field' => $form['attributes'][$aid]['#title'])));
    }
  }
}

/**
 * Custom submit handler for node_form().
 */
function uc_product_as_attribute_option_node_presave($node) {
  if (!in_array($node->type, uc_product_types()) || !isset($node->nid)) {
    return;
  }

  // On new nodes, we don't have a nid to work with but we inherit defaults
  // so that's okay.
  $options = uc_product_as_attribute_option_get_options_associated_to($node->nid);
  if ($options) {
    foreach ($options as $oid) {
      uc_product_as_attribute_option_configure_adjustments($oid, $node);
    }
    // Saving a product also saves all product kits - we're only showing this message when options were found, but just in case
    // the kits do as well let's throw the title in there so as not to show duplicate messages to the user.
    drupal_set_message(t('Updated the product associated attribute options adjustments for %title.', array('%title' => $node->title)));
  }
}

/**
 * Custom submit handler for uc_attribute_option_form().
 */
function uc_product_as_attribute_option_uc_attribute_option_form_submit($form, &$form_state) {
  if ($form_state['values']['uc_product_as_attribute_option_node']) {
    uc_product_as_attribute_option_save($form_state['values']['oid'], $form_state['values']['uc_product_as_attribute_option_node']['entity_id']);

    if ($node = node_load($form_state['values']['uc_product_as_attribute_option_node']['entity_id'])) {
      uc_product_as_attribute_option_configure_adjustments($form_state['values']['oid'], $node);
    }
    else {
      drupal_set_message(t('Error loading node !nid while configuring attribute options.', array('!nid' => $form_state['values']['uc_product_as_attribute_option_node'])));
    }
  }
  else {
    uc_product_as_attribute_option_delete($form_state['values']['oid']);
  }
}


/**
 * Custom submit handler for uc_object_options_form().
 */
function uc_product_as_attribute_option_uc_object_options_form_submit($form, &$form_state) {
  // Disabled form elements get stored as zeros - reset them back to good values
  foreach ($form_state['values']['attributes'] as $aid => $attribute) {
    foreach ($attribute['options'] as $oid => $option) {
      if ($node = uc_product_as_attribute_option_get_option_node($oid)) {
        uc_product_as_attribute_option_configure_adjustments($oid, $node);
      }
    }
  }
}

/**
 * Overwrites an attribute option's adjustments based on the node values.
 */
function uc_product_as_attribute_option_configure_adjustments($oid, $node) {
  $option = uc_attribute_option_load($oid);
  if (!$option) {
    drupal_set_message(t('An attribute option with ID !id does not exist.', array('!id' => $oid)), 'error');
    return;
  }

  $option->cost = $node->cost;
  $option->price = $node->sell_price;

  uc_attribute_option_save($option);
  db_query('UPDATE {uc_class_attribute_options} SET cost = :cost, price = :price WHERE oid = :oid', array(':cost' => $option->cost, ':price' => $option->price, ':oid' => $oid));
  db_query('UPDATE {uc_product_options} SET cost = :cost, price = :price WHERE oid = :oid', array(':cost' => $option->cost, ':price' => $option->price, ':oid' => $oid));
}


/**
 * Implements hook_uc_product_alter().
 */
function uc_product_as_attribute_option_uc_product_alter(&$variant) {
  // If we are displaying as a unit, we need to alter the price so that the
  // hidden product doesn't add the cost of its option twice
  $cart_behavior = variable_get('uc_product_as_attribute_option_cart_display', 'none');
  if (isset($variant->data['uc_product_as_attribute_option_products']) && in_array($cart_behavior, array('unit', 'individual'))) {
    foreach ($variant->data['uc_product_as_attribute_option_products'] as $nid) {
      if ($product = node_load($nid)) {
        $variant->price -= $product->sell_price;
      }
    }
  }
}

/**
 * Pass through our fake form values into the cart item data. This allows other
 * modules to interact with this module as we add items to the cart by
 * implementing hook_uc_add_to_cart_data($form_values).
 */
function uc_product_as_attribute_option_uc_add_to_cart_data($form_values) {
  if (isset($form_values['uc_product_as_attribute_option_attached_to'])) {
    return array(
      'uc_product_as_attribute_option_attached_to' => $form_values['uc_product_as_attribute_option_attached_to'],
    );
  }
  return array();
}

/**
 * Implements hook_uc_add_to_cart().
 */
function uc_product_as_attribute_option_uc_add_to_cart($nid, $qty, $data) {
  $unique_id = uniqid('', TRUE);
  $node = node_load($nid);
  $associations = uc_product_as_attribute_option_get_associations_by_product($nid);
  $cart_behavior = variable_get('uc_product_as_attribute_option_cart_display', 'none');
  if (in_array($cart_behavior, array('unit', 'individual')) && $associations && $data['module'] != 'uc_product_as_attribute_option') {
    // Add any associated option node products with our metadata
    $data['uc_product_as_attribute_option_products'] = array();
    foreach ($data['attributes'] as $aid => $oid) {
      if (!isset($associations[$oid])) {
        // No association for the customer's option selection
        continue;
      }

      $child_data = array('module' => 'uc_product_as_attribute_option', 'unique_id' => $unique_id) + module_invoke_all('uc_add_to_cart_data', array('nid' => $associations[$oid], 'qty' => $qty, 'uc_product_as_attribute_option_attached_to' => $node->nid));
      uc_cart_add_item($associations[$oid], $qty, $child_data, NULL, FALSE, FALSE, FALSE);

      // Mark this as a child product so we can hide it from the cart later
      $data['uc_product_as_attribute_option_products'][] = $associations[$oid];
    }

    // Re-add the same 'parent' product with our corresponding metadata
    $data['module'] = 'uc_product_as_attribute_option';
    $data['unique_id'] = $unique_id;
    uc_cart_add_item($node->nid, $qty, $data, NULL, TRUE, FALSE, FALSE);

    // Rebuild the cart items cache.
    uc_cart_get_contents(NULL, 'rebuild');

    // Silent FALSE so this product itself doesn't get added
    return array(array('success' => FALSE, 'silent' => TRUE, 'message' => ''));
  }
}

/**
 * Implements hook_uc_cart_display().
 */
function uc_product_as_attribute_option_uc_cart_display($item) {
  static $elements = array();
  static $products;
  static $all_products;

  $unique_id = $item->data['unique_id'];

  // Load the parent node; this is what we want to display in the cart. If the
  // data index doesn't exist, then we're iterating over the node itself.
  $nid = isset($item->data['uc_product_as_attribute_option_attached_to']) ? $item->data['uc_product_as_attribute_option_attached_to'] : $item->nid;
  $node = node_load($nid);

  if (variable_get('uc_product_as_attribute_option_cart_display', 'none') == 'individual') {
    // Business as usual
    return uc_product_uc_cart_display($item);
  }
  elseif (variable_get('uc_product_as_attribute_option_cart_display', 'none') == 'unit') {
    // We have to hide nodes associated to the selected attribute options

    $associations = uc_product_as_attribute_option_get_associations_by_product($node->nid);
    if (!isset($products[$unique_id])) {
      // Initialize table row.
      $element = array();
      $element['nid'] = array('#type' => 'value', '#value' => $node->nid);
      $element['module'] = array('#type' => 'value', '#value' => 'uc_product_as_attribute_option');
      $element['remove'] = array('#type' => 'submit', '#value' => t('Remove'));
      $element['title'] = array('#markup' => l($node->title, 'node/' . $node->nid));
      $element['qty'] = array(
        '#type' => 'uc_quantity',
        '#title' => t('Quantity'),
        '#title_display' => 'invisible',
        '#default_value' => $item->qty,
      );
      $element['description'] = array('#markup' => ''); // FIXME
      $element['#total'] = 0;
      $element['#suffixes'] = array();
      $element['#entity'] = $node; // Override the entity associated with this
                                   // render-array to be the kit itself.

      $elements[$unique_id] = $element;
    }
    // Add product specific information.
    $extra = uc_product_get_description($item);

    if (isset($item->data['uc_product_as_attribute_option_products'])) {
      // Once we iterate over the master product, remember its child nodes.
      $all_products[$unique_id] = $item->data['uc_product_as_attribute_option_products'];
      $elements[$unique_id]['description']['#markup'] = uc_product_get_description($item);
    }

    // Build the kit item product variant.
    if (!isset($item->type)) {
      $node = node_load($item->nid);
      $item->type = $node->type;
    }
    $build = node_view($item);

    $elements[$unique_id]['#total'] += $build['display_price']['#value'] * $item->qty;
    $elements[$unique_id]['#suffixes'] += $build['display_price']['#suffixes'];
    $elements[$unique_id]['data'][$item->nid] = $item;
    $products[$unique_id][] = $item->nid;

    // If we've passed the master product yet, check its child nodes to see if
    // we've processed all of them.
    $done = FALSE;
    if (isset($all_products[$unique_id])) {
      // Check if all products in this kit have been accounted for.
      $done = TRUE;
      foreach ($all_products[$unique_id] as $nid) {
        if (!in_array($nid, $products[$unique_id])) {
          $done = FALSE;
          break;
        }
      }
    }

    if ($done) {
      drupal_add_css(drupal_get_path('module', 'uc_product_kit') . '/uc_product_kit.css');
      $elements[$unique_id]['data'] = array('#type' => 'value', '#value' => serialize($elements[$unique_id]['data']));
      $element = $elements[$unique_id];
      unset($products[$unique_id]);
      unset($elements[$unique_id]);
      return $element;
    }
  }
  return array();
}

/**
 * Implements hook_uc_update_cart_item().
 *
 * Handles individual products or entire kits.
 */
function uc_product_as_attribute_option_uc_update_cart_item($nid, $data = array(), $qty, $cid = NULL) {
  if (!$nid) return NULL;
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();

  if (isset($data['uc_product_as_attribute_option_attached_to'])) {
    // Product was listed individually.
    uc_product_uc_update_cart_item($nid, $data, $qty, $cid);
  }
  else {
    // This $data isn't like $data passed around in the add to cart/cart display
    // hooks, for whatever reason.
    foreach ($data as $p_nid => $product) {
      uc_product_uc_update_cart_item($p_nid, $product->data, $qty, $cid);
    }
  }
}

/**
 * Returns the node object associated to an attribute option.
 */
function uc_product_as_attribute_option_get_option_node($oid) {
  if ($nid = db_query("SELECT nid FROM {uc_product_as_attribute_option} WHERE oid = :oid", array(':oid' => $oid))->fetchField()) {
    if ($node = node_load($nid)) {
      return $node;
    }
  }
  return FALSE;
}

/**
 * Returns an array of node option associations (option ID mapped to nid) for
 * the attributes attached to a given product node with attributes.
 */
function uc_product_as_attribute_option_get_associations_by_product($nid) {
  return db_query("SELECT nao.oid, nao.nid FROM {uc_product_as_attribute_option} nao LEFT JOIN {uc_attribute_options} uao ON nao.oid = uao.oid LEFT JOIN {uc_product_attributes} upa ON uao.aid = upa.aid WHERE upa.nid = :nid ORDER BY upa.ordering", array(':nid' => $nid))->fetchAllKeyed();
}

/**
 * Returns an array of node option associations (option ID mapped to nid) for
 * the attributes attached to a given product node with attributes.
 */
function uc_product_as_attribute_option_get_associations_by_product_class($pcid) {
  return db_query("SELECT nao.oid, nao.nid FROM {uc_product_as_attribute_option} nao LEFT JOIN {uc_attribute_options} uao ON nao.oid = uao.oid LEFT JOIN {uc_class_attributes} uca ON uao.aid = uca.aid WHERE uca.pcid = :pcid ORDER BY uca.ordering", array(':pcid' => $pcid))->fetchAllKeyed();
}

/**
 * Returns a list of attribute option IDs associated to a node.
 *
 * Note that this returns options associated to a node, not the attribute
 * options with node associations on a product node.
 */
function uc_product_as_attribute_option_get_options_associated_to($nid) {
  return db_query("SELECT oid FROM {uc_product_as_attribute_option} WHERE nid = :nid", array(':nid' => $nid))->fetchCol(0);
}

/**
 * Saves an attribute option to node association.
 */
function uc_product_as_attribute_option_save($oid, $nid) {
  $row = array(
    'oid' => $oid,
    'nid' => $nid,
  );

  // Merge in the data
  if (db_query("SELECT COUNT(*) FROM {uc_product_as_attribute_option} WHERE oid = :oid", array(':oid' => $oid))->fetchField()) {
    drupal_write_record('uc_product_as_attribute_option', $row, 'oid');
  }
  else {
    drupal_write_record('uc_product_as_attribute_option', $row);
  }
}

/**
 * Deletes and attribute option association.
 */
function uc_product_as_attribute_option_delete($oid) {
  db_query("DELETE FROM {uc_product_as_attribute_option} WHERE oid = :oid", array(':oid' => $oid));
}

/**
 * Implements hook_uc_checkout_complete().
 */
function uc_product_as_attribute_option_uc_checkout_complete($order, $account) {
  // Without itemization, stock management won't natively trigger. We have to
  // manually load the option nodes and process stock management.
  if (variable_get('uc_product_as_attribute_option_cart_display', 'none') == 'none_stock') {
    foreach ($order->products as $product) {
      if (isset($product->data) && isset($product->data['attributes']) && is_array($product->data['attributes'])) {
        foreach ($product->data['attributes'] as $attribute_label => $option_info) {
          foreach ($option_info as $oid => $label) {
            if ($node = uc_product_as_attribute_option_get_option_node($oid)) {
              // Loosely based on uc_stock_adjust_product_stock().
              $associated_product = uc_product_load_variant($node->nid);

              // Do nothing if decrement quantity is 0.
              if ($product->qty == 0) {
                continue;
              }

              // Adjust the product's stock.
              uc_stock_adjust($associated_product->model, -$product->qty);

              // Load the new stock record.
              $stock = db_query("SELECT * FROM {uc_product_stock} WHERE sku = :sku", array(':sku' => $associated_product->model))->fetchObject();

              // Should we notify?
              if (variable_get('uc_stock_threshold_notification', FALSE) && $stock->stock <= $stock->threshold) {
                _uc_stock_send_mail($order, $associated_product, $stock);
              }

              // Save a comment about the stock level.
              uc_order_comment_save($order->order_id, 0, t('The stock level for %model_name has been !action to !qty.', array('%model_name' => $associated_product->model, '!qty' => $stock->stock, '!action' => (-$product->qty <= 0) ? t('decreased') : t('increased') )));
            }
          }
        }
      }
    }
  }
}
