<?php
/**
 * @file
 * Enables the creation of phpFreeChat chatboxes on any page on the site.
 */

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'phpfreechat') . '/phpfreechat.inc';

/**
 * Implements hook_help().
 */
function phpfreechat_help($path, $arg) {
  return _phpfreechat_help($path, $arg);
}

/**
 * Implements hook_menu().
 * Re the 'page arguments' field:
 *   When viewing a page at the path "admin/content/types",
 *   for example, arg(0) would return "admin", arg(1) would
 *   return "content", and arg(2) would return "types".
 *   http://api.drupal.org/api/function/arg
 */
function phpfreechat_menu() {
  $items = array();
  $items['phpfreechat/nuke'] = array(
    'title' => 'Clear chats!',
    'page callback' => 'phpfreechat_nuke',
    'page arguments' => array(arg(2)),
    'access arguments' => array('admin phpfreechat'),
    'type' => MENU_CALLBACK,
  );

  // Tells Drupal 7 where to put the administration page.
  // hook_settings was removed after Drupal 4.7, but it's
  // called here, and thus works much the same.
  $items['admin/config/content/phpfreechat'] = array(
    'title' => 'phpFreeChat',
    'description' => 'Settings to configure phpFreeChat.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('phpfreechat_settings'),
    'access arguments' => array('admin phpfreechat'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Delete logs of a chat room.
 * @params $rid (Room ID)
 */
function phpfreechat_nuke($rid) {
  _phpfreechat_nuke($rid);
}

/**
 * Implements hook_permission().
 */
function phpfreechat_permission() {
  return array(
    'admin phpfreechat' => array(
      'title' => t('Administer phpFreeChat'),
      'description' => t('Can access the phpFreeChat administration page.'),
    ),
    'access chatboxes' => array(
      'title' => t('Access existing chatboxes'),
      'description' => t('Can access existing chatboxes and join the conversation.'),
    ),
    'create chatboxes' => array(
      'title' => t('Create nodes with new chatboxes'),
      'description' => t('Can creates nodes containing new chatboxes.'),
    ),
    'moderate chatrooms' => array(
      'title' => t('Moderate chatrooms'),
      'description' => t('Can moderate chatrooms - e.g. kick or ban users.'),
    ),
  );
}

/**
 * Checks whether chatbox per-node options exist for this content type:
 * (1) Chatbox is displayed on a per-node basis for this content type, or
 * (2) The chatbox title and channels can be set on a per-node basis.
 */
function phpfreechat_nodedata($type) {
  if (variable_get('phpfreechat_node_' . $type, 'never') == 'pernode' || 
      variable_get('phpfreechat_node_custom_' . $type, '') == TRUE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_form_alter() - adds fields to Content Type and Node edit forms.
 *   $form - nested array of form elements that comprise the form.
 *   $form_state - keyed array containing the current state of the form.
 *   $form_id - string representing the name of the form (usu the name of the fctn creating it).
 */
function phpfreechat_form_alter(&$form, &$form_state, $form_id) {
  $type = (isset($form['type']) && isset($form['type']['#value'])) ? $form['type']['#value'] : NULL;
  $node = isset($form['#node']) ? $form['#node'] : NULL;

  $node->phpfreechat_enabled = isset($node->phpfreechat_enabled) ? $node->phpfreechat_enabled : FALSE;
  $node->phpfreechat_title = isset($node->phpfreechat_title) ? $node->phpfreechat_title : '';
  $node->phpfreechat_channels = isset($node->phpfreechat_channels) ? $node->phpfreechat_channels : '';

  if ($form_id == 'node_type_form') {
    // Content-type edit form
    // Define field set in additional settings group
    $form['phpfreechat'] = array(
      '#type' => 'fieldset',
      '#title' => t('phpFreeChat settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 10,
      '#group' => 'additional_settings',
    );
    $form['phpfreechat']['phpfreechat_node'] = array(
      '#type' => 'radios',
      '#title' => t('Show chatbox'),
      '#default_value' => variable_get('phpfreechat_node_' . $form['#node_type']->type, 'never'),
      '#options' => array(
        'never' => t('Never'),
        'always' => t('Always'),
        'pernode' => t('Per Node'),
      ),
      '#description' => t('None: Nodes of this content type never can have a chatbox.<br />' . 'Always: Nodes of this content type always will have a chatbox.<br />' . 'Per Node: Nodes of this content type can optionally have a chatbox when created.'),
    );
    $form['phpfreechat']['phpfreechat_node_custom'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow node to set chatbox title and room (channel) names'),
      '#return_value' => 1,
      '#default_value' => variable_get('phpfreechat_node_custom_' . $form['#node_type']->type, ''),
      '#description' => t('If checked, then node editors can set the chatbox title and chatroom names.'),
    );
    $form['phpfreechat']['phpfreechat_node_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Default chatbox title'),
      '#default_value' => variable_get('phpfreechat_node_title_' . $form['#node_type']->type, ''),
      '#size' => 70,
      '#maxlength' => 128,
      '#description' => t('This is the default chatbox title for this content type. If blank, the chatbox will use the global chatbox title, or the node title if the global title also is blank.'),
    );
    $form['phpfreechat']['phpfreechat_node_channels'] = array(
      '#type' => 'textfield',
      '#title' => t('Default chatroom (channel) names'),
      '#default_value' => variable_get('phpfreechat_node_channels_' . $form['#node_type']->type, ''),
      '#size' => 70,
      '#maxlength' => 128,
      '#description' => t('Enter the default chatroom(s) - or channel(s) - for this content type. Separate multiple channels by commas (e.g. <em>Channel1, Channel2</em>). If blank, the chatbox will use the global or node channel(s), or the node title if these also are blank.'),
    );
  }
  /*
  * All nids with chatboxes plus this per-node data (if it exists) are saved in the module's db table.
  * Process Overview: 
  *   the database table is created in hook_schema() (in the .install file), 
  *   fields are added to the node form in hook_node_alter() (here),
  *   values are saved in hook_node_insert(),
  *   values are deleted in hook_node_delete(), 
  *   values are updated in hook_node_update(), 
  *   values are loaded in hook_node_load(), and 
  *   values are displayed in hook_node_view(). 
  * Note that this process would only be used when adding fields to node types that 
  * are not created by your module. If you were adding fields within the module that created the node  
  * type, you would use different hooks.
  */
  elseif (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    // Node edit form
    if (phpfreechat_nodedata($type) && user_access('create chatboxes')) {
      $form['phpfreechat'] = array(
        '#type' => 'fieldset',
        '#title' => t('phpFreeChat settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 10,
        '#group' => 'additional_settings',
        );
      $form['phpfreechat']['phpfreechat_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show chatbox'),
        '#return_value' => 1,
        '#default_value' => ($node->phpfreechat_enabled == 1 ? TRUE : FALSE),
        '#description' => 'If this is selected, a chatbox will be displayed below the content.',
        );
      $form['phpfreechat']['phpfreechat_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Chatbox title'),
        '#default_value' => $node->phpfreechat_title,
        '#size' => 70,
        '#maxlength' => 128,
        '#description' => t('This is the chatbox title. You can leave it blank to use the default.'),
        );
      $form['phpfreechat']['phpfreechat_channels'] = array(
        '#type' => 'textfield',
        '#title' => t('Chatroom ("channel") names)'),
        '#default_value' => $node->phpfreechat_channels,
        '#size' => 70,
        '#maxlength' => 128,
        '#description' => t('Enter the channel or channels to be joined for this chat. Separate multiple channels with commas (e.g. <em>Channel1, Channel2</em>). You can leave this blank to use the default.'),
        );
      }
    }
  }

/**
 * Implements hook_node_insert().
 *   Responds to the creation of a new node.
 *   If the node contains a chatbox, saves info to the database, phpFreeChat table.
 */
function phpfreechat_node_insert($node) {
  $content_chat = variable_get('phpfreechat_nodeapi_' . $node->type, 'never');
  // Does this content type contain chatbox per-node data? Or does it always contain a chatbox?
  // Save $content_chat == 'always' to the DB, too, so ALL chat nodes are captured, even nodes
  // without per-node data.
  if (phpfreechat_nodedata($node->type) || $content_chat == 'always') {
    // Need to delete/insert because we can't assume an existing entry for 'pernode' content type
    $num_deleted = db_delete('phpfreechat')
      ->condition('nid', $node->nid)
      ->execute();
    if ($content_chat == 'always') {
      $node->phpfreechat_enabled = TRUE;
      $node->phpfreechat_title = '';
      $node->phpfreechat_channels = '';
    }
    $new_node = db_insert('phpfreechat')
      ->fields(array(
        'nid' => $node->nid,
        'phpfreechat_enabled' => $node->phpfreechat_enabled,
        'phpfreechat_title' => $node->phpfreechat_title,
        'phpfreechat_channels' => $node->phpfreechat_channels,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function phpfreechat_node_delete($node) {
  // Always try to delete - the node could have data from before the content type was set to 'never'
  $num_deleted = 
    db_delete('phpfreechat')
      ->condition('nid', $node->nid)
      ->execute();
}

/**
 * Implements hook_node_update().
 */
function phpfreechat_node_update($node) {
  // Drupal 7 bug-fix: https://api.drupal.org/comment/22873#comment-22873
  entity_get_controller('node')->resetCache(array($node->nid));
  if (phpfreechat_nodedata($node->type)) {
    // Clear the cache
    _phpfreechat_clear_cache();
  }
}

/**
 * Implements hook_node_load().
 *   $nodes - an array of the nodes being loaded, keyed by nid.
 *   $types - an array containing the node types present in $nodes.
 */
function phpfreechat_node_load($nodes, $types) {
  // All nodes with chatboxes are stored in the phpfreechat table.
  $result = db_query('SELECT nid FROM {phpfreechat}');
  $pfc_nids = $result->fetchCol();
  // Pick out the nodes that contain chatboxes.
  $num_nodes = count(array_intersect($pfc_nids, array_keys($nodes)));
  if ($num_nodes) {
    // Fetch the extra data for these nodes.
    $result = db_query('SELECT * FROM {phpfreechat} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
    foreach ($result as $record) {
      $nodes[$record->nid]->phpfreechat_enabled = $record->phpfreechat_enabled;
      $nodes[$record->nid]->phpfreechat_title = $record->phpfreechat_title;
      $nodes[$record->nid]->phpfreechat_channels = $record->phpfreechat_channels;
    }
  }
}

/**
 * Implements hook_node_view().
 *   Act on a node that is being assembled before rendering.
 *   $node - a node object
 *   $view_mode - e.g. 'full', 'teaser'
 *   $langcode (optional) - defaults to global content language of current request.
 */
function phpfreechat_node_view($node, $view_mode = 'full') {
  if ($view_mode == 'full') {  
    $content_chat = variable_get('phpfreechat_node_' . $node->type, 'never');
    if (($content_chat == 'always' || ($content_chat == 'pernode' && $node->phpfreechat_enabled))) {
      $node->content['phpfreechat'] = array(
        '#markup' => phpfreechat_room($node),
        '#weight' => 40,
      );
    }
  }
}

/**
 * Implements hook_user_login().
 *   The user just logged in.
 *   $edit - the array of form values submitted by the user.
 *   $account - the user object on which the operation was just performed.
 */
function phpfreechat_user_login(&$edit, $account) {
  // Remove the user's cookie so their nick is not auto-set for anonymous user
  setcookie('phpfreechat', '', REQUEST_TIME - 3600);
}

/**
 * Implements hook_user_logout().
 *   The user just logged out.
 *   $account - the user object on which the operation was just performed.
 */
function phpfreechat_user_logout($account) {
  // When the user logs out of Drupal, also log out of the chat.
  // Otherwise, the username is in user in the chat until it times out.
  _phpfreechat_quit();
  // Remove the user's cookie so their nick is not auto-set for anonymous user
  setcookie('phpfreechat', '', REQUEST_TIME - 3600);
}

/**
 * Implements hook_block_info().
 *   Define all blocks provided by the module.
 */
function phpfreechat_block_info() {
  $blocks['who_is_chatting'] = array(
    'info' => t('Who is chatting'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['who_is_in_room1'] =  array(
    'info' => t('Who is in chatroom 1'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['who_is_in_room2'] =  array(
    'info' => t('Who is in chatroom 2'),
    'cache' => DRUPAL_NO_CACHE,
   );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 *   Define a configuration form for a block.
 *   $delta - which block is being configured - defined in hook_block_info.
 */
function phpfreechat_block_configure($delta = '') {
  $form = array();
  if ($delta == 'who_is_in_room1' || $delta == 'who_is_in_room2') {
    $form['phpfreechat_block'] = array(
      '#type' => 'textfield',
      '#title' => t('Chatroom (channel) name'),
      '#default_value' => variable_get('phpfreechat_block_channel_' . $delta, ''),
      '#description' => t('Enter the chatroom (channel) name to use'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *   Save the configuration options from hook_block_configure().
 *   $delta - which block is being configured (defined in hook_block_configure().
 *   $edit - an array of the submitted form data from the configuration form.
 */
function phpfreechat_block_save($delta = '', $edit = array()) {
  if ($delta == 'who_is_in_room1' || $delta == 'who_is_in_room2') {
    variable_set('phpfreechat_block_channel_' . $delta, $edit['phpfreechat_block']);
  }
}

/**
 * Implements hook_block_view().
 *   Return a rendered or renderable view of a block.
 */
function phpfreechat_block_view($delta = '') {
  global $user;

  $params = phpfreechat_load_params();

  // Get get all chat nodes (node id).
  $query = db_query('SELECT * FROM {phpfreechat}');
  $chat_nids = array();

  // Save only the nodes that have chatboxes on them.
  foreach ($query as $record) {
    $node = node_load($record->nid);
    $params = phpfreechat_prepare_params($params, $node, $user);
    $chat_content = variable_get('phpfreechat_node_' . $node->type, 'never');
    if (($chat_content == 'always') || ($chat_content == 'pernode' && $record->phpfreechat_enabled)) {
      $chat_nids[] = $node->nid;
    }
  }
/*
  echo "chat_nids: ". count($chat_nids) ."<br>";
  echo 'chat_nids[0]: ' . $chat_nids[0] . "<br>";
  echo "delta: $delta<br>";
*/
  $channel = variable_get('phpfreechat_block_channel_' . $delta, '');
/*
  echo "channel: $channel<br>";
*/  
  // If there are any nodes with chatboxes...
  if (count($chat_nids)) {
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'phpfreechat') . '/phpfreechat/src/pfcinfo.class.php';
    // Use only the first chat server in the blocks (quick and dirty solution).
    $serverid_node = md5('node' . $chat_nids[0]);
    $info = new pfcInfo($serverid_node, $params['data_private_path']);
/*
    echo "serverid_node: $serverid_node<br>";
    echo "<pre>info ";
    echo print_r($info);
    echo "</pre>";
*/
    $nicks = $info->getOnlineNick(NULL);
    $nicks_assoc = array();
    foreach ($nicks as $nickname) {
      $nicks_assoc[] = array(
        'data' => $nickname,
      );
    }
    $nicks_room = $info->getOnlineNick($channel);
    $nicks_room_assoc = array();
    foreach ($nicks_room as $nickname) {
      $nicks_room_assoc[] = array(
        'data' => $nickname,
      );
    }
    $nick_info = array(
      'items' => $nicks_assoc,
      'title' => '',
      'type' => 'ul',
      'attributes' => '',
    );
    $nicks_room_info = array(
      'items' => $nicks_room_assoc,
      'title' => '',
      'type' => 'ul',
      'attributes' => '',
    );
/*
    echo "<pre>nicks ";
    var_dump($nicks);
    echo "nicks_assoc ";
    var_dump($nicks_assoc);    
    echo "nicks_room ";
    var_dump($nicks_room);
    echo "nicks_room_assoc ";
    var_dump($nicks_room_assoc);
    echo "</pre>";
*/
  }

  switch ($delta) {
    case 'who_is_chatting':
      $block['subject'] = 'Who is chatting?';
      if (!empty($users)) {
        $block['content'] = theme_item_list($nicks_info);
      }
      else {
        $block['content'] = "* empty *";
      }
      break;

    case 'who_is_in_room1':
    case 'who_is_in_room2':
      $block['subject'] = t('Who is in chatroom %room?', array('%room' => $channel));
      if (!empty($users_room)) {
        $block['content'] = theme_item_list($nicks_room_info);
      }
      else {
        $block['content'] = "* empty *";
      }
      break;
  }
    
  return $block;
}

/**
 * Used to implement hook_settings() - until Drupal 4.7.
 * Old method for setting up an administration menu.
 * Now it's called from hook_menu, and accomplishes the same thing that way.
 */
function phpfreechat_settings($form, $form_state) {
  // Do the phpFreeChat data folders exist? (First created during install.)
  if (!_phpfreechat_check_files()) {
    form_set_error('op', t('Unable to create data folders for phpfreechat.'));
  }
  
  return system_settings_form(_phpfreechat_settings($form, $form_state));
}

/**
 * Returns an array of all (non-node & non-user specific) parameters
 */
function phpfreechat_load_params() {
  global $base_url;
  $params = array();

  // Configure file paths
  $params['data_private_path'] = PHPFREECHAT_PRIVATE_DIR;
  $params['data_public_url'] = $base_url . '/' . PHPFREECHAT_PUBLIC_DIR;
  $params['data_public_path'] = PHPFREECHAT_PUBLIC_DIR;
  $params['theme_url'] = $base_url . '/' . drupal_get_path('module', 'phpfreechat') . '/extras/themes';
  $params['theme_path'] = DRUPAL_ROOT . '/' . drupal_get_path('module', 'phpfreechat') . '/extras/themes';
  $params['theme'] = 'drupal';
  $params['server_script_url'] = $base_url . '/' . drupal_get_path('module', 'phpfreechat') . '/handler.php';
  $params['server_script_path'] = DRUPAL_ROOT . '/' . drupal_get_path('module', 'phpfreechat') . '/handler.php';
  $params['cmd_path'] = DRUPAL_ROOT . '/' . drupal_get_path('module', 'phpfreechat') . '/extras/commands';

  // Public settings from phpFreeChat v1.x pfcglobalconfig.class.php.
  $settings = array(
    'serverid',
    'language',
    'output_encoding',
    'nick',
    'max_nick_len',
    'frozen_nick',
    'nickmeta',
    'nickmeta_private',
    'nickmeta_key_to_hide',
    'isadmin',
    'admins',
    'firstisadmin',
    'title',
    'channels',
    'frozen_channels',
    'max_channels',
    'privmsg',
    'max_privmsg',
    'refresh_delay',
    'refresh_delay_steps',
    'timeout',
    'islocked',
    'lockurl',
    'skip_proxies',
    'post_proxies',
    'pre_proxies',
    'proxies_cfg',
    'proxies_path',
    'proxies_path_default',
    'cmd_path',
    'cmd_path_default',
    'max_text_len',
    'max_msg',
    'max_displayed_lines',
    'quit_on_closedwindow',
    'focus_on_connect',
    'connect_at_startup',
    'start_minimized',
    'height',
    'shownotice',
    'nickmarker',
    'clock',
    'startwithsound',
    'openlinknewwindow',
    'notify_window',
    'short_url',
    'short_url_width',
    'display_ping',
    'display_pfc_logo',
    'displaytabimage',
    'displaytabclosebutton',
    'showwhosonline',
    'showsmileys',
    'btn_sh_whosonline',
    'btn_sh_smileys',
    'bbcode_colorlist',
    'nickname_colorlist',
    'theme',
    'theme_path',
    'theme_url',
    'theme_default_path',
    'theme_default_url',
    'container_type',
    'server_script_path',
    'server_script_url',
    'client_script_path',
    'data_private_path',
    'data_public_path',
    'data_public_url',
    'prototypejs_url',
    'debug',
    'time_offset',
    'date_format',
    'time_format',
    'get_ip_from_xforwardedfor',
    'dyn_params',
  );

  foreach ($settings as $setting) {
    $setting = check_plain($setting);
    $value = variable_get('phpfreechat_' . $setting, '');
    if (!empty($value)) {
      if ($value == 'true') {
        $params[$setting] = TRUE;
      }
      else if ($value == 'false') {
        $params[$setting] = FALSE;
      }
      // To deal with integer check in pfcglobalconfig.class.php
      else if (is_numeric($value)) {
        $params[$setting] = (int) $value;
      }
      // Break out arrays (except for channel, handled below)
      else if ($setting == 'nickmeta' || $setting == 'nickmeta_private' || $setting == 'nickmeta_key_to_hide' || $setting == 'admins' || $setting == 'frozen_channels' || $setting == 'privmsg' || $setting == 'refresh_delay_steps' || $setting == 'skip_proxies' || $setting == 'post_proxies' || $setting == 'pre_proxies' || $setting == 'bbcode_colorlist' || $setting == 'nickname_colorlist' || $setting == 'dyn_params') {
        $params["$setting"] = explode(',', $value);
      }
      else {
        $params[$setting] = $value;
      }
    }
  }

  return $params;
}

/**
 * Tunes parameters according to specific node's details.
 *
 * @param $params
 *   Default parameters which might be overridden by the function
 * @param $node
 *   The node which will carry the chat instance
 * @param $target
 *   The user loading the chat
 *
 */
function phpfreechat_prepare_params($params, $node, $target) {
  global $base_url;

  // Setup nick
  if (variable_get('phpfreechat_auto_nick', '') != 'false') {
    if ($target->uid == 0) { // Assign autonumber for guests (not logged in)
      $params['nick'] = t('Anonymous') . rand(1, 1000);
    }
    else { // Use Drupal name as nickname
      $params['nick'] = $target->name;
    }
  }
  else { // Ask for nickname
    $params['nick'] = '';
  }

  // Set the serverid to the node ID
  $params['serverid'] = md5('node' . $node->nid);

  // This global setting will be overridden by any content-type or node settings below
  $global_title = variable_get('phpfreechat_title', '');
  $params['title'] = empty($global_title) ? $node->title : $global_title;

  // This global setting will be overridden by any content-type or node settings below
  $global_channels = variable_get('phpfreechat_channels', '');
  if (!empty($global_channels)) {
    $params['channels'] = explode(',', $global_channels);
  }
  else {
    $params['channels'] = array($node->title);
  }

  // Overrides from content type
  $content_title = variable_get('phpfreechat_node_title_' . $node->type, '');
  if (!empty($content_title)) {
    $params['title'] = $content_title;
  }
  $content_channels = variable_get('phpfreechat_node_channels_' . $node->type, '');
  if (!empty($content_channels)) {
    $params['channels'] = explode(',', $content_channels);
  }

  // Overrides from node (global and node parameters have the same name!!)
  if (!empty($node->phpfreechat_title)) {
    $params['title'] = $node->phpfreechat_title;
  }
  if (!empty($node->phpfreechat_channels)) {
    $params['channels'] = explode(',', $node->phpfreechat_channels);
  }

  // Setup admins
  if (user_access('moderate chatrooms') || $node->uid == $target->uid) {
    $params['isadmin'] = TRUE;
  }

  // Add useful info to appear in user's menu only if the selected theme is the shipped one
  if (($params['theme_path'] == DRUPAL_ROOT . '/' . drupal_get_path('module', 'phpfreechat') . '/extras/themes') && ($params['theme'] == 'drupal')) {
    $params['nickmeta'] = array(
      'drupal_base_url' => $base_url,
      'drupal_user_uid' => $target->uid,
      'away' => 'no',
    );
  }
  return $params;
}

/**
 * Format a chatbox for a node insert
 *
 * @param node
 *   The node which needs a chatbox inserted
 */
function phpfreechat_room($node) {
  global $user;
  static $chat;
/*
  echo "<h2>Debug</h2>";
  echo "<pre>";
  print_r($node);
  echo "</pre>";
*/
  // Either display the chatbox, or a message to log in to chat.
  $output = '<div class="phpfreechat phpfreechat-' . $node->type . '">';

  // Check whether the user has permission to chat.
  if (user_access('access chatboxes')) {
    // Debugging.
    //drupal_set_message("params<br>".'<pre>'. print_r($params, true) .'</pre>');
    //drupal_set_message("cookies<br>".'<pre>'. print_r($_COOKIE, true) .'</pre>');
    //drupal_set_message("session<br>".'<pre>'. print_r($_SESSION, true) .'</pre>');

    // Start/resume chat session 
    // This file - the phpFreeChat server script - loads phpfreechat.class.php 
    // and creates the new chatbox object. This MUST be done in handler.php -
    // a separate file. If it's done within this file, the chat hangs!
    //require_once ($params['server_script_path']);
    require_once drupal_get_path('module', 'phpfreechat') . '/handler.php';

    // This line outputs the actual chat
    $output .= $chat->printChat(TRUE);

    // This adds a link under the chatbox for clearing the chat log that is visible only to admins.
    if (user_access('create chatboxes')) {
      $output .= l('Clear chat log for ' . $node->title, 'phpfreechat/nuke/' . strtolower(str_replace(' ', '', $node->title)));
    }
/*
    echo "<h2>Debug</h2>";
    echo "<pre>";
    $c =& pfcGlobalConfig::Instance();
    $u =& pfcUserConfig::Instance();
    $ct =& pfcContainer::Instance();
    print_r($c);
    print_r($u);
    print_r($ct);
    print_r($_SERVER);
    print_r($params);
    print_r($node);
    print_r($user);
    echo "</pre>";
*/
  }
  elseif ($user->uid == 0) {
    $output .= t('Please !login to chat', array('!login' => l('login', 'user/login')));
  }
  else {
    drupal_set_message("Unauthenicated users may not access the chatbox.<br />", 'warning');
  }

  // Close div (for chatbox or messdage to user).
  $output .= '</div>';
    
  return $output;
}

?>
