<?php
/**
 * @file
 * Main section for Commerce Cart Stats module.
 */


/**
 * Implements hook_menu().
 */
function commerce_cart_stats_menu() {
  $items['admin/commerce/cart_stats'] = array(
    'title'            => 'Cart Statistics',
    'description'      => 'Track cart adds/removes and abandonment.',
    'access arguments' => array('access cart statistics'),
    'page callback'    => 'commerce_cart_stats_display',
    'file'             => 'commerce_cart_stats.display.inc',
    'weight'           => 0,
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function commerce_cart_stats_permission() {
  return array(
    'access cart statistics' => array(
      'title' => t('Access cart statistics'),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function commerce_cart_stats_theme() {
  return array(
    'commerce_cart_stats_display' => array(
      'variables' => array(
        'header'  => NULL,
        'rows'    => NULL,
        'caption' => NULL,
      ),
      'template'  => 'commerce-cart-stats-display',
    ),
  );
}


/**
 * Template preprocess hook.
 */
function template_preprocess_commerce_cart_stats() {
  // Empty for now.
}


/**
 * Implements hook_commerce_cart_product_add().
 */
function commerce_cart_stats_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  $record = array(
    'uid'      => $order->uid,
    'hostname'     => $order->hostname,
    'order_number' => $order->order_number,
    'product_id'   => $product->product_id,
    'quantity'     => $quantity,
    'event'        => 'add',
    'created'      => REQUEST_TIME,
  );
  drupal_write_record('commerce_cart_stats_cart_contents', $record);
}


/**
 * Implements hook_commerce_cart_product_remove().
 */
function commerce_cart_stats_commerce_cart_product_remove($order, $product, $quantity, $line_item) {
  $record = array(
    'uid'      => $order->uid,
    'hostname'     => $order->hostname,
    'order_number' => $order->order_number,
    'product_id'   => $product->product_id,
    'quantity'     => $quantity,
    'event'        => 'remove',
    'created'      => REQUEST_TIME,
  );
  drupal_write_record('commerce_cart_stats_cart_contents', $record);
}


/**
 * Implements hook_commerce_line_item_update().
 */
function commerce_cart_stats_commerce_line_item_update($entity) {
  $user = $GLOBALS['user'];

  if (isset($entity->original)) {
    $event = 'add';
    $new_quantity = $entity->quantity;
    $orig_quantity = $entity->original->quantity;
    if ($new_quantity < $orig_quantity) {
      $event = 'remove';
    }
    $delta_quantity = abs($new_quantity - $orig_quantity);

    $record = array(
      'uid'      => $user->uid,
      'hostname'     => $user->hostname,
      'order_number' => $entity->order_id,
      'product_id'   => $entity->commerce_product['und'][0]['product_id'],
      'quantity'     => $delta_quantity,
      'event'        => $event,
      'created'      => REQUEST_TIME,
    );
    drupal_write_record('commerce_cart_stats_cart_contents', $record);
  }
}


/**
 * Implements hook_views_api().
 */
function commerce_cart_stats_views_api() {
  return array(
    'api'  => 3,
    'path' => drupal_get_path('module', 'commerce_cart_stats'),
  );
}


/**
 * Implements hook_views_data().
 */
function commerce_cart_stats_views_data() {
  $data['commerce_cart_stats_cart_contents'] = array(
    'table' => array(
      'group' => t('Commerce Cart Stats'),
      'base'  => array(
        'field' => 'stat_id',
        'title' => t('Commerce Cart Stats'),
        'help'  => t('Commerce Cart Stats columns'),
      ),
    ),
    'stat_id' => array(
      'title'  => t('ID'),
      'help'   => t('ID associated with a cart add/remove event.'),
    ),
    'uid' => array(
      'title'  => t('User ID'),
      'help'   => t('User ID of user who added/removed a product from their cart.'),
      'field'  => array(
        'handler'        => 'views_handler_field_user_name',
        'click sortable' => TRUE,
      ),
      'sort' => array(
        'handler'        => 'views_handler_sort',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_user_name',
      ),
      'relationship' => array(
        'base'       => 'users',
        'base field' => 'uid',
        'handler'    => 'views_handler_relationship',
        'label'      => t('Commerce Cart Users'),
        'title'      => t('Users'),
        'help'       => t('Users associated with cart add/remove events.'),
      ),
    ),
    'hostname'     => array(
      'title'  => t('Host'),
      'help'   => t('Host from whence a product was added to/removed from a cart.'),
      'field'  => array(
        'handler'        => 'views_handler_field',
        'click sortable' => TRUE,
      ),
      'sort'   => array(
        'handler'        => 'views_handler_sort',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_string',
      ),
    ),
    'order_number' => array(
      'title'  => t('Order Number'),
      'help'   => t('Order number associated with cart.'),
      'field'  => array(
        'handler'        => 'views_handler_field_numeric',
        'click sortable' => TRUE,
      ),
      'sort'   => array(
        'handler'        => 'views_handler_sort',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'relationship' => array(
        'base'       => 'commerce_order',
        'base field' => 'order_id',
        'handler'    => 'views_handler_relationship',
        'label'      => t('Commerce Cart Orders'),
        'title'      => t('Commerce orders'),
        'help'       => t('Commerce orders associated with cart add/remove events.'),
      ),
    ),
    'product_id' => array(
      'title'  => t('Product ID'),
      'help'   => t('Product ID that was added to/removed from a cart.'),
      'field'  => array(
        'handler'        => 'views_handler_field_numeric',
        'click sortable' => TRUE,
      ),
      'sort'   => array(
        'handler'        => 'views_handler_sort',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'relationship' => array(
        'base'       => 'commerce_product',
        'base field' => 'product_id',
        'handler'    => 'views_handler_relationship',
        'label'      => t('Commerce Cart Products'),
        'title'      => t('Commerce products'),
        'help'       => t('Commerce products associated with cart add/remove events.'),
      ),
    ),
    'quantity'     => array(
      'title'  => t('Quantity'),
      'help'   => t('Product quantity that was added to/removed from a cart.'),
      'field'  => array(
        'handler'        => 'views_handler_field_numeric',
        'click sortable' => TRUE,
      ),
      'sort'   => array(
        'handler'        => 'views_handler_sort',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
    ),
    'event'        => array(
      'title'  => t('Event'),
      'help'   => t('Denotes whether the product was added to or removed from a cart.'),
      'field'  => array(
        'handler'        => 'views_handler_field',
        'click sortable' => TRUE,
      ),
      'sort'   => array(
        'handler'        => 'views_handler_sort',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_string',
      ),
    ),
    'created'      => array(
      'title'  => t('Created'),
      'help'   => t('UNIX timestamp of when the add/remove event occurred.'),
      'field'  => array(
        'handler'        => 'views_handler_field_date',
        'click sortable' => TRUE,
      ),
      'sort'   => array(
        'handler'        => 'views_handler_sort_date',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_date',
      ),
    ),
  );

  return $data;
}
