<?php

ini_set('display_errors','On');
/**
 * @file
 * Provides an novalnet_cc payment method for Drupal Commerce for testing and
 *   development.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */

function commerce_payment_novalnet_cc_commerce_payment_method_info() {
  $payment_methods = array();
  $path = base_path() . drupal_get_path('module', 'commerce_payment');
  $payment_methods['commerce_payment_novalnet_cc'] = array(
    'title' => t('Novalnet Credit Card'),
    'display_title' => '<a href="http://novalnet.de" title="Novalnet AG Payment Gateway" target="_blank"><img src="'.$path.'/novalnet/novalnet.png" alt="Novalnet AG" title="Novalnet AG Payment Gateway" /></a> '.t('Credit Card'),
    'description' => t('Payment Using Novalnet Credit Card'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */

function commerce_payment_novalnet_cc_settings_form($settings=NULL)
{
    $form = array();

    $form['nn_title'] = array(
    '#title'=> t('Novalnet Payment Settings'),
    );

    $form['nn_cc_vendor_id'] = array(
    '#type' => 'textfield',
    '#description'=>t('Enter Your Novalnet Merchant ID'),
    '#title' => t('Novalnet Vendor ID:'),
    '#default_value'=>$settings['nn_cc_vendor_id'],
    '#required' => TRUE,
    );

    $form['nn_cc_authorisation_code'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Novalnet  Authorisation Code'),
    '#title' => t('Novalnet Authorisation Code:'),
    '#default_value'=>$settings['nn_cc_authorisation_code'],
    '#required' => TRUE,
    );
    
    $form['nn_cc_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Novalnet Product Id'),
    '#title' => t('Novalnet Product ID:'),
    '#default_value'=>$settings['nn_cc_product_id'],
    '#required' => TRUE,
    );

    $form['nn_cc_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Novalnet Tariff Id'),
    '#title' => t('Novalnet Tariff ID:'),
    '#default_value'=>$settings['nn_cc_tariff_id'],
    '#required' => TRUE,
    );

    $form['nn_cc_manuall_booking_limit'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Maximum Booking Amount'),
    '#title' => t('Novalnet Manuall Booking Limit:'),
    '#default_value'=>$settings['nn_cc_manuall_booking_limit'],
    '#required' => FALSE,
    );

    $form['nn_cc_second_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Second Product Id'),
    '#title' => t('Novalnet Second Product ID:'),
    '#default_value'=>$settings['nn_cc_second_product_id'],
    '#required' => FALSE,
    );
    
    $form['nn_cc_second_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Second Tariff Id'),
    '#title' => t('Novalnet Second Tariff ID:'),
    '#default_value'=>$settings['nn_cc_second_tariff_id'],
    '#required' => FALSE,
    );
        
    $form['nn_cc_customer_information'] = array(
    '#type' => 'textfield',
    '#description'=> t('Customer Information'),
    '#title' => t('End User Information:'),
    '#default_value'=>$settings['nn_cc_customer_information'],
    '#required' => FALSE,
    );
    
    $form['nn_cc_proxy_server'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter The Proxy Server Detail If Any'),
    '#title' => t('Proxy Server:'),
    '#default_value'=>$settings['nn_cc_proxy_server'],
    '#required' => FALSE,
    );

    $form['nn_cc_test_mode'] = array(
    '#type' => 'select',
    '#description'=> t('Enter The Transaction Mode'),
    '#title' => t('Test Mode:'),
    '#default_value'=>$settings['nn_cc_test_mode'],
    '#options'=>array(
    '1'=>'true',
    '0'=>'false'),
    '#required' => FALSE,
    );

    return $form;
}
function commerce_payment_novalnet_cc_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form = array();
  $yr=range(date('Y'),date('Y')+10);

  // Merge in values from the order.
  if (!empty($order->data['commerce_payment_novalnet_cc'])) {
    $pane_values += $order->data['commerce_payment_novalnet_cc'];
  }

  // Merge in default values.
  $pane_values += array(
    'nn_cc_name' => '',
  );

  $form['nn_cc_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Holder Name'),
    '#required' => TRUE,
  );
  
  $form['nn_cc_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card No'),
    '#required' => TRUE,
  );
   
  $form['nn_cc_exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiry Month'),
    '#options' => drupal_map_assoc(array('01','02','03','04','05','06','07','08','09','10','11','12')),
  );

 $form['nn_cc_exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiry Year'),
    '#options' => drupal_map_assoc($yr),
  );

  $form['nn_cc_cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('CVV/CVC'),
    '#required' => TRUE,
  );
 
  return $form;
}

function commerce_payment_novalnet_cc_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

	if(strlen($pane_values['nn_cc_name']) < 2) {
	 form_set_error(implode('][', array_merge($form_parents, array('nn_cc_name'))), t('Credit Card Holder name should be two or more characters long.'));
	 return FALSE;
	}
	$pane_values['nn_cc_no'] = commerce_payment_novalnet_cc_sanitizeCcNumber($pane_values['nn_cc_no']);
	if(!commerce_payment_novalnet_cc_validateCcData($pane_values))
	{
		form_set_error(implode('][', array_merge($form_parents, array('nn_cc_no','nn_cc_exp_year','nn_cc_exp_month','nn_cc_cvv'))),
		t('Please enter the valid credit card details'));
	 
	 return FALSE;
	}
   
}

function commerce_payment_novalnet_cc_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

	$order->data['commerce_payment_novalnet_cc'] = $pane_values;
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	$billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
	$name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
    commerce_payment_novalnet_cc_basic_parm_list($data,$order,$payment_method);
    commerce_payment_novalnet_cc_default_param_list($data,$order,$billing_address);
    commerce_payment_novalnet_cc_user_data($data,$order);
    commerce_payment_novalnet_cc_orderamount($data,$order);
    $data['key'] = '6';
    foreach($data as $value)
    {
	if($value == '')
	{
	  drupal_set_message('Input Data Missing','error');
	  return FALSE;
	}
    }
	$query = http_build_query($data,'', '&');
	$headers = array('Content-Type' => 'application/x-www-form-urlencoded');
	$host = 'https://payport.novalnet.de/paygate.jsp';
	$options = array(
	'headers'=>array('Content-Type' => 'application/x-www-form-urlencoded'),
	'method' => 'POST',
	'data' => $query
	);
	$response = drupal_http_request($host,$options);
	parse_str($response->data, $parsed);
	commerce_payment_novalnet_cc_transaction($payment_method,$parsed, $order, $charge, $pane_values['name']);
	  
}
function commerce_payment_novalnet_cc_orderamount(&$data,$order)
{
$data['amount'] = $order->commerce_order_total['und'][0]['amount'];
}
function commerce_payment_novalnet_cc_default_param_list(&$data,$order,$billing_address)
{	  
    $data['currency']         = $order->commerce_order_total['und'][0]['currency_code'];
    $data['firstname']        = $billing_address['first_name'];
    $data['lastname']         = $billing_address['last_name'];
    $data['gender']           = 'u';
    $data['email']            = $order->mail;
    $data['street']           = $billing_address['thoroughfare'];
    $data['search_in_street'] = '1';
    $data['city']             = $billing_address['locality'];
    $data['zip']              = $billing_address['postal_code'];
    $data['language']         = $billing_address['country'];
    $data['session']          = session_id();
    $data['country']          = $billing_address['country'];
    $data['country_code']     = $billing_address['country'];
    $data['remote_ip']        = commerce_payment_novalnet_cc_getRealIpAddr();
    $data['birth_date']       = 'NULL';
    $data['fax']	          = 'NULL';
    $data['tel']              = 'NUll';
	$data['order_no']         = $order->order_number;
    if($data['lastname'] == '')
    {
      $data['lastname'] = $data['firstname'];
    }
    
}
function commerce_payment_novalnet_cc_basic_parm_list(&$data,$order,$payment_method)
{
    $data['vendor'] = $payment_method['settings']['nn_cc_vendor_id'];
    $data['product'] = $payment_method['settings']['nn_cc_product_id'];
    $data['auth_code'] = $payment_method['settings']['nn_cc_authorisation_code'];
    $data['tariff'] = $payment_method['settings']['nn_cc_tariff_id'];
    if($payment_method['settings']['nn_cc_manuall_booking_limit'] != '')
    {
      if($order->commerce_order_total['und'][0]['amount'] > $payment_method['settings']['nn_cc_manuall_booking_limit'])
      {
	$data['product'] = $payment_method['settings']['nn_cc_second_product_id'];
	$data['tariff'] = $payment_method['settings']['nn_cc_second_tariff_id'];  
      }
    }
    $data['test_mode'] = $payment_method['settings']['nn_cc_test_mode'];
    
}
function commerce_payment_novalnet_cc_user_data(&$data,$order)
{
$data['cc_holder'] = $order->data['commerce_payment_novalnet_cc']['nn_cc_name'];
$data['cc_no'] = $order->data['commerce_payment_novalnet_cc']['nn_cc_no'];
$data['cc_exp_month'] = $order->data['commerce_payment_novalnet_cc']['nn_cc_exp_month'];
$data['cc_exp_year'] = $order->data['commerce_payment_novalnet_cc']['nn_cc_exp_year'];
$data['cc_cvc2'] = $order->data['commerce_payment_novalnet_cc']['nn_cc_cvv'];

}
function commerce_payment_novalnet_cc_transaction($payment_method,$parsed, $order, $charge, $name) {

$testmode = $payment_method['settings']['nn_cc_test_mode'];
if($testmode == 1)
{
	$test_mode = "TEST ORDER";
}
elseif($parsed['test_mode'] == 1)
{
	$test_mode = "TEST ORDER";
}
else
{
	$test_mode = "";
}

   $success = commerce_payment_novalnet_cc_check_status($parsed);
   if ($success != 1) {
      $url = 'checkout/'.$order->order_number.'/review';
      drupal_set_message($success,'error');
	  drupal_goto($url);
  }
  else {
  $transaction = commerce_payment_transaction_new('commerce_payment_novalnet_cc', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payment_method = "commerce_payment_novalnet_cc";
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = t('Novalnet Transaction Id').'&nbsp;&nbsp;'.$parsed['tid'].'<br>'.$test_mode;
  $transaction->message_variables = array('@name' => $name);

  commerce_payment_transaction_save($transaction);
  }
}
function commerce_payment_novalnet_cc_isPublicIP($value)
{
  return (count(explode('.', $value)) == 4 && !preg_match('~^((0|10|172\.16|192\.168|169\.254|255|127\.0)\.)~', $value));
}

/** Function for Getting the Ip Address **/
		
function commerce_payment_novalnet_cc_getRealIpAddr() 
{
      $_check = array(
	      'HTTP_X_FORWARDED_FOR',
	      'HTTP_CLIENT_IP',
	      'HTTP_X_CLUSTER_CLIENT_IP',
	      'HTTP_FORWARDED_FOR',
      );
      foreach($_check as $_key)
      {
	if(isset($_SERVER[$_key]))
	{
	  $ips = explode(',', $_SERVER[$_key]);
	  if(isset($ips[0]) && $this->commerce_payment_novalnet_cc_isPublicIP($ips[0]))
	  {
	    return $ips[0];
	  }
	}
      }
      return $_SERVER['REMOTE_ADDR'];
}
function commerce_payment_novalnet_cc_validateCcData($ccData)
{ 
    if(commerce_payment_novalnet_cc_getCcType($ccData['nn_cc_no']) && commerce_payment_novalnet_cc_validateCcNumber($ccData['nn_cc_no']) && 
	 commerce_payment_novalnet_cc_validateCcExpiry($ccData['nn_cc_exp_month'], $ccData['nn_cc_exp_year']) && commerce_payment_novalnet_cc_validateCvv($ccData['nn_cc_cvv'])) 
    {
    return true;
    }
    
    return false;
}
function commerce_payment_novalnet_cc_getCcType($ccNumber)
{
  if(preg_match('/^4[0-9]{12}([0-9]{3})?$/', $ccNumber)) {
	  return TRUE;
  }elseif(preg_match('/^5[1-5][0-9]{14}$/', $ccNumber)) {
	  return TRUE;
  }
  return false;
}
function commerce_payment_novalnet_cc_validateCcNumber($ccNumber)
{
  $cardNumber = strrev($ccNumber);
  $numSum = 0;
  for ($i=0; $i<strlen($cardNumber); $i++) {
      $currentNum = substr($cardNumber, $i, 1);

      /** Double every second digit*/

      if ($i % 2 == 1) {
	  $currentNum *= 2;
      }

      /** Add digits of 2-digit numbers together */

      if ($currentNum > 9) {
	  $firstNum = $currentNum % 10;
	  $secondNum = ($currentNum - $firstNum) / 10;
	  $currentNum = $firstNum + $secondNum;
      }
      $numSum += $currentNum;
      }
	  /** If the total has no remainder it's OK */

        return TRUE;//($numSum % 10 == 0);
}
function commerce_payment_novalnet_cc_validateCvv($cvv)
{
//   //echo $cvv; exit;
  return preg_match('/^[0-9]{3}$/', $cvv);
}
function commerce_payment_novalnet_cc_validateCcExpiry($month, $year)
{
  
  $tmp = strtotime('-3 days');
  return ($month > 0 && $month < 13 && ($year == date('Y', $tmp) ? ($month >= date('n', $tmp)) : ($year > date('Y', $tmp))));
}
function commerce_payment_novalnet_cc_sanitizeCcNumber($ccNumber)
{
  return preg_replace('/[\-\s]+/', '', $ccNumber);
}
function  commerce_payment_novalnet_cc_check_status(&$parsed)
{  
  
  if($parsed['status'] && $parsed['status']=='100') 
    { 
      return TRUE;
    }
    
    else
    {
      $status = commerce_payment_novalnet_cc_payment_error($parsed);
	  return $status;
      
    }
}
function commerce_payment_novalnet_cc_payment_error(&$parsed)
{
    if(isset($parsed['status_text']))
    {
	$novalnet_error = utf8_encode($parsed['status_text']);
	
    }
    elseif(isset($parsed['status_desc']))
    {
	$novalnet_error = utf8_encode($parsed['status_desc']);
    }
    else
    {
	//drupal_set_message('Input Data Missing','error');
	$novalnet_error = t('There was an error and your payment could not be completed.').'('.$parsed['status'].')';
    }

    return $novalnet_error;
}