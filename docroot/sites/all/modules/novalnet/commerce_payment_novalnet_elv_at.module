<?php
/**
 * @file
 * Provides an novalnet_cc payment method for Drupal Commerce for testing and
 *   development.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */

function commerce_payment_novalnet_elv_at_commerce_payment_method_info() {
  $payment_methods = array();
  $path = base_path() . drupal_get_path('module', 'commerce_payment');
  $payment_methods['commerce_payment_novalnet_elv_at'] = array(
    'title' => t('Novalnet Direct Debit Austria'),
    'display_title' => '<a href="http://novalnet.de" title="Novalnet AG Payment Gateway" target="_blank"><img src="'.$path.'/novalnet/novalnet.png" alt="Novalnet AG"         title="Novalnet AG Payment Gateway" /></a> '.t('Direct Debit Austria'),
    'description' => t('Payment Using Novalnet Direct Debit Austria'),
    'active' => TRUE,
  );

  return $payment_methods;
}

function commerce_payment_novalnet_elv_at_settings_form($settings=NULL)
{
    $form = array();

    $form['nn_title'] = array(
    '#title'=> t('Novalnet Payment Settings'),
    );

    $form['nn_elv_at_vendor_id'] = array(
    '#type' => 'textfield',
    '#description'=>t('Enter Your Novalnet Merchant ID'),
    '#title' => t('Novalnet Vendor ID:'),
    '#default_value'=>$settings['nn_elv_at_vendor_id'],
    '#required' => TRUE,
    );

    $form['nn_elv_at_authorisation_code'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Novalnet  Authorisation Code'),
    '#title' => t('Novalnet Authorisation Code:'),
    '#default_value'=>$settings['nn_elv_at_authorisation_code'],
    '#required' => TRUE,
    );
    
    $form['nn_elv_at_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Novalnet Product Id'),
    '#title' => t('Novalnet Product ID:'),
    '#default_value'=>$settings['nn_elv_at_product_id'],
    '#required' => TRUE,
    );

    $form['nn_elv_at_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Novalnet Tariff Id'),
    '#title' => t('Novalnet Tariff ID:'),
    '#default_value'=>$settings['nn_elv_at_tariff_id'],
    '#required' => TRUE,
    );

    $form['nn_elv_at_manuall_booking_limit'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Maximum Booking Amount'),
    '#title' => t('Novalnet Manuall Booking Limit:'),
    '#default_value'=>$settings['nn_elv_at_manuall_booking_limit'],
    '#required' => FALSE,
    );

    $form['nn_elv_at_second_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Second Product Id'),
    '#title' => t('Novalnet Second Product ID:'),
    '#default_value'=>$settings['nn_elv_at_second_product_id'],
    '#required' => FALSE,
    );
    
    $form['nn_elv_at_second_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Second Tariff Id'),
    '#title' => t('Novalnet Second Tariff ID:'),
    '#default_value'=>$settings['nn_elv_at_second_tariff_id'],
    '#required' => FALSE,
    );
        
    $form['nn_elv_at_customer_information'] = array(
    '#type' => 'textfield',
    '#description'=> t('Customer Information'),
    '#title' => t('End User Information:'),
    '#default_value'=>$settings['nn_elv_at_customer_information'],
    '#required' => FALSE,
    );
    
    $form['nn_elv_at_proxy_server'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter The Proxy Server Detail If Any'),
    '#title' => t('Proxy Server:'),
    '#default_value'=>$settings['nn_elv_at_proxy_server'],
    '#required' => FALSE,
    );
     
	$form['nn_elv_at_test_mode'] = array(
    '#type' => 'select',
    '#description'=> t('Enter The Transaction Mode'),
    '#title' => t('Test Mode:'),
    '#default_value'=>$settings['nn_elv_at_test_mode'],
    '#options'=>array(
    '1'=>'true',
    '0'=>'false'),
    '#required' => FALSE,
    );

    return $form;
}
function commerce_payment_novalnet_elv_at_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form = array();
  // Merge in values from the order.
  if (!empty($order->data['commerce_payment_novalnet_elv_at'])) {
    $pane_values += $order->data['commerce_payment_novalnet_elv_at'];
  }

  // Merge in default values.
  $pane_values += array(
    'nn_elv_at_name' => '',
  );

  $form['nn_elv_at_bank_account_owner'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Account Owner'),
    '#required' => TRUE,
  );
  
   $form['nn_elv_at_bank_account_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Account Number'),
    '#required' => TRUE,
  );
  
  $form['nn_elv_at_bank_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Code'),
    '#required' => TRUE,
  );
  
  return $form;
}

function commerce_payment_novalnet_elv_at_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

   if(strlen($pane_values['nn_elv_at_bank_account_owner']) < 2) {
     form_set_error(implode('][', array_merge($form_parents, array('nn_elv_at_bank_account_owner'))), t('Bank account owner name should be two or more characters long.'));
     return FALSE;
   }
     $pane_values['nn_elv_at_bank_account_number'] = commerce_payment_novalnet_elv_at_sanitizeAtNumber($pane_values['nn_elv_at_bank_account_number']);
	 $pane_values['nn_elv_at_bank_code'] = commerce_payment_novalnet_elv_at_sanitizeAtNumber($pane_values['nn_elv_at_bank_code']);
	 
   if(!commerce_payment_novalnet_elv_at_validateAtData($pane_values))
   {
      form_set_error(implode('][', array_merge($form_parents, array('nn_elv_at_bank_account_number','nn_elv_at_bank_code'))), t('Enter the Valid Account Details !'));
     return FALSE;
   }
   
}

function commerce_payment_novalnet_elv_at_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
	$order->data['commerce_payment_novalnet_elv_at'] = $pane_values;
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	$billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
	$name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
    commerce_payment_novalnet_elv_at_basic_parm_list($data,$order,$payment_method);
    commerce_payment_novalnet_elv_at_default_param_list($data,$order,$billing_address);
    commerce_payment_novalnet_elv_at_user_data($data,$order);
    commerce_payment_novalnet_elv_at_orderamount($data,$order);
    $data['key'] = '8';
    foreach($data as $value)
    {
	if($value == '')
	{
	  drupal_set_message('Input Data Missing','error');
	  return FALSE;
	}
    }
      $query = http_build_query($data,'', '&');
      $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
      $host = 'https://payport.novalnet.de/paygate.jsp';
      $options = array(
      'headers'=>array('Content-Type' => 'application/x-www-form-urlencoded'),
      'method' => 'POST',
      'data' => $query
      );
      $response = drupal_http_request($host,$options);
      parse_str($response->data, $parsed);
      commerce_payment_novalnet_elv_at_transaction($payment_method,$parsed, $order, $charge);
	  $nn_order = commerce_order_load($order->order_number);
		$nn_order = commerce_order_status_update($nn_order, 'checkout_complete', FALSE, TRUE, t('Customer continued to the next checkout page via a submit button.'));
		commerce_checkout_complete($nn_order);
		drupal_goto('/checkout/'.$order->order_number.'/complete');
}
function commerce_payment_novalnet_elv_at_orderamount(&$data,$order)
{
$data['amount'] = $order->commerce_order_total['und'][0]['amount'];
}
function commerce_payment_novalnet_elv_at_default_param_list(&$data,$order,$billing_address)
{	  
    $data['currency']         = $order->commerce_order_total['und'][0]['currency_code'];
    $data['firstname']       = $billing_address['first_name'];
    $data['lastname']        = $billing_address['last_name'];
    $data['gender']           = 'u';
    $data['email']            = $order->mail;
    $data['street']           = $billing_address['thoroughfare'];
    $data['search_in_street'] = '1';
    $data['city']             = $billing_address['locality'];
    $data['zip']              = $billing_address['postal_code'];
    $data['language']         = $billing_address['country'];
    $data['session']          = session_id();
    $data['country']          = $billing_address['country'];
    $data['country_code']     = $billing_address['country'];
    $data['remote_ip']        = commerce_payment_novalnet_elv_at_getRealIpAddr();
    $data['birth_date']       = 'NULL';
    $data['fax']	      = 'NULL';
    $data['tel']              = 'NUll';
	$data['order_no']         = $order->order_number;
    if($data['lastname'] == '')
    {
      $data['lastname'] = $data['firstname'];
    }
    //print_r($data); exit;
}
function commerce_payment_novalnet_elv_at_basic_parm_list(&$data,$order,$payment_method)
{
    $data['vendor'] = $payment_method['settings']['nn_elv_at_vendor_id'];
    $data['product'] = $payment_method['settings']['nn_elv_at_product_id'];
    $data['auth_code'] = $payment_method['settings']['nn_elv_at_authorisation_code'];
    $data['tariff'] = $payment_method['settings']['nn_elv_at_tariff_id'];
    if($payment_method['settings']['nn_elv_at_manuall_booking_limit'] != '')
    {
      if($order->commerce_order_total['und'][0]['amount'] > $payment_method['settings']['nn_elv_at_manuall_booking_limit'])
      {
	$data['product'] = $payment_method['settings']['nn_elv_at_second_product_id'];
	$data['tariff'] = $payment_method['settings']['nn_elv_at_second_tariff_id'];  
      }
    }
    $data['test_mode'] = $payment_method['settings']['nn_elv_at_test_mode'];
    //print_r($data); exit;
    
}
function commerce_payment_novalnet_elv_at_user_data(&$data,$order)
{
$data['bank_account_holder'] = $order->data['commerce_payment_novalnet_elv_at']['nn_elv_at_bank_account_owner'];
$data['bank_account'] = $order->data['commerce_payment_novalnet_elv_at']['nn_elv_at_bank_account_number'];
$data['bank_code'] = $order->data['commerce_payment_novalnet_elv_at']['nn_elv_at_bank_code'];
}
function commerce_payment_novalnet_elv_at_transaction($payment_method,$parsed, $order, $charge) {

$testmode = $payment_method['settings']['nn_elv_at_test_mode'];
if($testmode == 1)
{
	$test_mode = t('TEST ORDER');
}
elseif($parsed['test_mode'] == 1)
{
	$test_mode = t('TEST ORDER');
}
else
{
	$test_mode = "";
}

  $success = commerce_payment_novalnet_elv_at_check_status($parsed);
   if ($success != 1) {
      $url = 'checkout/'.$order->order_number.'/review';
      drupal_set_message($success,'error');
	  drupal_goto($url);
  }
  else {

  $transaction = commerce_payment_transaction_new('commerce_payment_novalnet_elv_at', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->payment_method = "commerce_payment_novalnet_elv_at";
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = t('Novalnet Transaction Id').'&nbsp;&nbsp;'.$parsed['tid'].'<br>'.t($test_mode);
  commerce_payment_transaction_save($transaction);
   drupal_set_message(t('Please Note Down the Transaction Details At Novalnet <br>').$transaction->message,'status');
  }
}
function commerce_payment_novalnet_elv_at_isPublicIP($value)
{
  return (count(explode('.', $value)) == 4 && !preg_match('~^((0|10|172\.16|192\.168|169\.254|255|127\.0)\.)~', $value));
}

/** Function for Getting the Ip Address **/
		
function commerce_payment_novalnet_elv_at_getRealIpAddr() 
{
      $_check = array(
	      'HTTP_X_FORWARDED_FOR',
	      'HTTP_CLIENT_IP',
	      'HTTP_X_CLUSTER_CLIENT_IP',
	      'HTTP_FORWARDED_FOR',
      );
      foreach($_check as $_key)
      {
	if(isset($_SERVER[$_key]))
	{
	  $ips = explode(',', $_SERVER[$_key]);
	  if(isset($ips[0]) && $this->commerce_payment_novalnet_elv_at_isPublicIP($ips[0]))
	  {
	    return $ips[0];
	  }
	}
      }
      return $_SERVER['REMOTE_ADDR'];
}
function commerce_payment_novalnet_elv_at_validateAtData($AtData)
{ 
    if(commerce_payment_novalnet_elv_at_validateAcNumber($AtData['nn_elv_at_bank_account_number']) && commerce_payment_novalnet_elv_at_validateBankCode($AtData['nn_elv_at_bank_code'])) 
    {
    return true;
    }
    
    return false;
}

function commerce_payment_novalnet_elv_at_sanitizeAtNumber($AtNumber)
{
  return preg_replace('/[\-\s]+/', '', $AtNumber);
}
function commerce_payment_novalnet_elv_at_validateAcNumber($acNumber)
{
    return !commerce_payment_novalnet_elv_at_isEmptyString($acNumber) && preg_match('/^[0-9]+$/', $acNumber);
}
function commerce_payment_novalnet_elv_at_validateBankCode($code)
{
  return !commerce_payment_novalnet_elv_at_isEmptyString($code) && preg_match('/^[0-9]+$/', $code);
}
function commerce_payment_novalnet_elv_at_isEmptyString($str)
{
  $str = trim($str);
  return !isset($str[0]);
}
function  commerce_payment_novalnet_elv_at_check_status(&$parsed)
{  
  
  if($parsed['status'] && $parsed['status']=='100') 
    { 
      return TRUE;
    }
    
    else
    {
      $status = commerce_payment_novalnet_elv_at_payment_error($parsed);
	  return $status;
      
    }
}
function commerce_payment_novalnet_elv_at_payment_error(&$parsed)
{
    if(isset($parsed['status_text']))
    {
	$novalnet_error = utf8_encode($parsed['status_text']);
	
    }
    elseif(isset($parsed['status_desc']))
    {
	$novalnet_error = utf8_encode($parsed['status_desc']);
    }
    else
    {
	//drupal_set_message('Input Data Missing','error');
	$novalnet_error = t('There was an error and your payment could not be completed.').'('.$parsed['status'].')';
    }

    return $novalnet_error;
}