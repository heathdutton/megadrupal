<?php
/**
 * @file
 * Provides an novalnet_cc payment method for Drupal Commerce for testing and
 *   development.
 */
/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payment_novalnet_cc3d_menu() {

$items = array();

$items['cc3d/review'] = array
  (
    'title'	      	=> 'Review payment',
    'page callback'   	=> 'commerce_novalnet_cc3d_payment_complete',
    'access arguments' 	=> array('access content'),   
    'type' 		=> MENU_CALLBACK,
  );

return $items;
}

function commerce_novalnet_cc3d_payment_complete()
{
$_response = $_POST;
$checkstatus = commerce_payment_novalnet_cc3d_check_status($_POST);
if($checkstatus != 1)
{
  $url = 'checkout/'.$_POST['orderid'].'/review';
 drupal_set_message($checkstatus,'error');
 drupal_goto($url);
}
else
{
commerce_payment_novalnet_cc3d_transaction($_response);

drupal_goto('checkout/'.$_POST['orderid'].'/complete');

}

}

function commerce_payment_novalnet_cc3d_commerce_payment_method_info() {
  $payment_methods = array();
  $path = base_path() . drupal_get_path('module', 'commerce_payment');
  $payment_methods['commerce_payment_novalnet_cc3d'] = array(
    'title' => t('Novalnet Credit Card 3D Secure'),
    'display_title' => '<a href="http://novalnet.de" title="Novalnet AG Payment Gateway" target="_blank"><img src="'.$path.'/novalnet/novalnet.png" alt="Novalnet AG"  title="Novalnet AG Payment Gateway" /></a> '.t('Credit Card 3D Secure'),
    'description' => t('Payment Using Novalnet Credit Card 3D Secure'),
    'active' => TRUE,
  );

  return $payment_methods;
}


function commerce_payment_novalnet_cc3d_settings_form($settings=NULL)
{
    $form = array();

    $form['nn_title'] = array(
    '#title'=> t('Novalnet Payment Settings'),
    );

    $form['nn_cc3d_vendor_id'] = array(
    '#type' => 'textfield',
    '#description'=>t('Enter You Novalnet Merchant ID'),
    '#title' => t('Novalnet Vendor ID:'),
    '#default_value'=>$settings['nn_cc3d_vendor_id'],
    '#required' => TRUE,
    );

    $form['nn_cc3d_authorisation_code'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter You Novalnet  Authorisation Code'),
    '#title' => t('Novalnet Authorisation Code:'),
    '#default_value'=>$settings['nn_cc3d_authorisation_code'],
    '#required' => TRUE,
    );
    
    $form['nn_cc3d_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter Your Novalnet Product Id'),
    '#title' => t('Novalnet Product ID:'),
    '#default_value'=>$settings['nn_cc3d_product_id'],
    '#required' => TRUE,
    );

    $form['nn_cc3d_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter You Novalnet Tariff Id'),
    '#title' => t('Novalnet Tariff ID:'),
    '#default_value'=>$settings['nn_cc3d_tariff_id'],
    '#required' => TRUE,
    );

    $form['nn_cc3d_manuall_booking_limit'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter You Maximum Booking Amount'),
    '#title' => t('Novalnet Manuall Booking Limit:'),
    '#default_value'=>$settings['nn_cc3d_manuall_booking_limit'],
    '#required' => FALSE,
    );

    $form['nn_cc3d_second_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter You Second Product Id'),
    '#title' => t('Novalnet Second Product ID:'),
    '#default_value'=>$settings['nn_cc3d_second_product_id'],
    '#required' => FALSE,
    );
    
    $form['nn_cc3d_second_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter You Second Tariff Id'),
    '#title' => t('Novalnet Second Tariff ID:'),
    '#default_value'=>$settings['nn_cc3d_second_tariff_id'],
    '#required' => FALSE,
    );
        
    $form['nn_cc3d_customer_information'] = array(
    '#type' => 'textfield',
    '#description'=> t('Customer Information'),
    '#title' => t('End User Information:'),
    '#default_value'=>$settings['nn_cc3d_customer_information'],
    '#required' => FALSE,
    );
    
    $form['nn_cc3d_proxy_server'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter The Proxy Server Detail If Any'),
    '#title' => t('Proxy Server:'),
    '#default_value'=>$settings['nn_cc3d_proxy_server'],
    '#required' => FALSE,
    );

    $form['nn_cc3d_test_mode'] = array(
    '#type' => 'select',
    '#description'=> t('Enter The Transaction Mode'),
    '#title' => t('Test Mode:'),
    '#default_value'=>$settings['nn_cc3d_test_mode'],
    '#options'=>array(
    '1'=>'true',
    '0'=>'false'),
    '#required' => FALSE,
    );

    return $form;
}
function commerce_payment_novalnet_cc3d_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form = array();
  $yr=range(date('Y'),date('Y')+10);

  // Merge in values from the order.
  if (!empty($order->data['commerce_payment_novalnet_cc3d'])) {
    $pane_values += $order->data['commerce_payment_novalnet_cc3d'];
  }

  // Merge in default values.
  $pane_values += array(
    'nn_cc3d_name' => '',
  );

  $form['nn_cc3d_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Holder Name'),
    '#required' => TRUE,
  );
  
  $form['nn_cc3d_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card No'),
    '#required' => TRUE,
  );
   
  $form['nn_cc3d_exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiry Month'),
    '#options' => drupal_map_assoc(array('01','02','03','04','05','06','07','08','09','10','11','12')),
  );

 $form['nn_cc3d_exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiry Year'),
    '#options' => drupal_map_assoc($yr),
  );

  $form['nn_cc3d_cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('CVV/CVC'),
    '#required' => TRUE,
  );
 
  return $form;
}

function commerce_payment_novalnet_cc3d_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

   if(strlen($pane_values['nn_cc3d_name']) < 2) {
     form_set_error(implode('][', array_merge($form_parents, array('nn_cc3d_name'))), t('Credit Card Holder name should be two or more characters long.'));
     return FALSE;
   }
     $pane_values['nn_cc3d_no'] = commerce_payment_novalnet_cc3d_sanitizeCcNumber($pane_values['nn_cc3d_no']);
   if(!commerce_payment_novalnet_cc3d_validateCcData($pane_values))
   {
      form_set_error(implode('][', array_merge($form_parents, array('nn_cc3d_no','nn_cc3d_exp_year','nn_cc3d_exp_month','nn_cc3d_cvv'))), t('Enter the Valid  Card Details !'));
	 
     return FALSE;
   }
   
}

function commerce_payment_novalnet_cc3d_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
$nn_callback = 'cc3d/review';
  $order->data['commerce_payment_novalnet_cc3d'] = $pane_values;
 $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
 $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
 $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
    commerce_payment_novalnet_cc3d_basic_parm_list($data,$order,$payment_method);
    commerce_payment_novalnet_cc3d_default_param_list($data,$order,$billing_address);
    commerce_payment_novalnet_cc3d_user_data($data,$order);
    commerce_payment_novalnet_cc3d_orderamount($data,$order);
	commerce_payment_novalnet_cc3d_returnurl($data,$nn_callback);
	$data['key'] = '6';
	$data['order_no'] = $order->order_number;
    $data['orderid'] = $order->order_number;
	$data['instance_id'] = $payment_method['instance_id'];
    foreach($data as $value)
    {
	if($value == '')
	{
	  drupal_set_message('Input Data Missing','error');
	  return FALSE;
	}
    }
       $host = 'https://payport.novalnet.de/global_pci_payport';
		$output = novalnet_cc3d_redirect_form($data,$host);
      echo $output; exit;
}
function novalnet_cc3d_redirect_form($data,$host)
 {
   $nn_form = '<form name=nn_redirect_form action="'.$host.'" method=post>';
   foreach($data as $name=>$value)
   {
    $nn_form .= '<input type = hidden name = "'.$name.'" value = "'.$value.'">';
   }
   $nn_form .= t('You Will Be Redirected Automatically if Not More Than 10 Sec click here').'<br><input type=submit name = redirecting value = Redirecting....></form>';
   $nn_form .= '<script>document.nn_redirect_form.submit();</script>';

    return $nn_form;
}
function commerce_payment_novalnet_cc3d_orderamount(&$data,$order)
{
$data['amount'] = $order->commerce_order_total['und'][0]['amount'];
}
function commerce_payment_novalnet_cc3d_default_param_list(&$data,$order,$billing_address)
{	  
    $data['currency']         = $order->commerce_order_total['und'][0]['currency_code'];
    $data['firstname']       = $billing_address['first_name'];
    $data['lastname']        = $billing_address['last_name'];
    $data['gender']           = 'u';
    $data['email']            = $order->mail;
    $data['street']           = $billing_address['thoroughfare'];
    $data['search_in_street'] = '1';
    $data['city']             = $billing_address['locality'];
    $data['zip']              = $billing_address['postal_code'];
    $data['language']         = $billing_address['country'];
    $data['session']          = session_id();
    $data['country']          = $billing_address['country'];
    $data['country_code']     = $billing_address['country'];
    $data['remote_ip']        = commerce_payment_novalnet_cc3d_getRealIpAddr();
    $data['birth_date']       = 'NULL';
    $data['fax']	      = 'NULL';
    $data['tel']              = 'NUll';
	$data['order_no']         = $order->order_number;
    if($data['lastname'] == '')
    {
      $data['lastname'] = $data['firstname'];
    }
    //print_r($data); exit;
}
function commerce_payment_novalnet_cc3d_basic_parm_list(&$data,$order,$payment_method)
{
    $data['vendor'] = $payment_method['settings']['nn_cc3d_vendor_id'];
    $data['product'] = $payment_method['settings']['nn_cc3d_product_id'];
    $data['auth_code'] = $payment_method['settings']['nn_cc3d_authorisation_code'];
    $data['tariff'] = $payment_method['settings']['nn_cc3d_tariff_id'];
    if($payment_method['settings']['nn_cc3d_manuall_booking_limit'] != '')
    {
      if($order->commerce_order_total['und'][0]['amount'] > $payment_method['settings']['nn_cc3d_manuall_booking_limit'])
      {
	$data['product'] = $payment_method['settings']['nn_cc3d_second_product_id'];
	$data['tariff'] = $payment_method['settings']['nn_cc3d_second_tariff_id'];  
      }
    }
    $data['test_mode'] = $payment_method['settings']['nn_cc3d_test_mode'];
    
}
function commerce_payment_novalnet_cc3d_user_data(&$data,$order)
{
$data['cc_holder'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_name'];
$data['cc_no'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_no'];
$data['cc_exp_month'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_exp_month'];
$data['cc_exp_year'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_exp_year'];
$data['cc_cvc2'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_cvv'];

}
function commerce_payment_novalnet_cc3d_transaction($_response) {
if($_response['test_mode'] == 1)
{
$testorder = "TEST ORDER";
}
$transaction = commerce_payment_transaction_new('commerce_payment_novalnet_cc3d',$_response['orderid']);
$transaction->instance_id = $_response['instance_id'];
$transaction->amount = $_response['amount'];
$transaction->currency_code = $_response['currency'];
$transaction->status = 'completed';
$transaction->message = t('Novalnet Transaction Id').'&nbsp;&nbsp;'. $_response['tid'].'<br>'.$testorder;
commerce_payment_transaction_save($transaction);
$order = commerce_order_load($_response['orderid']);
$order = commerce_order_status_update($order, 'checkout_complete', FALSE, TRUE, t('Customer continued to the next checkout page via a submit button.'));
commerce_checkout_complete($order);
drupal_set_message(t('Please note down the below Transaction details provided by Novalnet (TID) <br>').utf8_encode($transaction->message),'status');
drupal_goto('checkout/'.$_response['orderid'].'/complete');
}
function commerce_payment_novalnet_cc3d_isPublicIP($value)
{
  return (count(explode('.', $value)) == 4 && !preg_match('~^((0|10|172\.16|192\.168|169\.254|255|127\.0)\.)~', $value));
}

/** Function for Getting the Ip Address **/
		
function commerce_payment_novalnet_cc3d_getRealIpAddr() 
{
      $_check = array(
	      'HTTP_X_FORWARDED_FOR',
	      'HTTP_CLIENT_IP',
	      'HTTP_X_CLUSTER_CLIENT_IP',
	      'HTTP_FORWARDED_FOR',
      );
      foreach($_check as $_key)
      {
	if(isset($_SERVER[$_key]))
	{
	  $ips = explode(',', $_SERVER[$_key]);
	  if(isset($ips[0]) && $this->commerce_payment_novalnet_cc3d_isPublicIP($ips[0]))
	  {
	    return $ips[0];
	  }
	}
      }
      return $_SERVER['REMOTE_ADDR'];
}
function commerce_payment_novalnet_cc3d_validateCcData($ccData)
{ 
    if(commerce_payment_novalnet_cc3d_getCcType($ccData['nn_cc3d_no']) && commerce_payment_novalnet_cc3d_validateCcNumber($ccData['nn_cc3d_no']) && 
	 commerce_payment_novalnet_cc3d_validateCcExpiry($ccData['nn_cc3d_exp_month'], $ccData['nn_cc3d_exp_year']) && commerce_payment_novalnet_cc3d_validateCvv($ccData['nn_cc3d_cvv'])) 
    {
    return true;
    }
    
    return false;
}
function commerce_payment_novalnet_cc3d_getCcType($ccNumber)
{
  if(preg_match('/^4[0-9]{12}([0-9]{3})?$/', $ccNumber)) {
	  return TRUE;
  }elseif(preg_match('/^5[1-5][0-9]{14}$/', $ccNumber)) {
	  return TRUE;
  }
  return false;
}
function commerce_payment_novalnet_cc3d_validateCcNumber($ccNumber)
{
  $cardNumber = strrev($ccNumber);
  $numSum = 0;
  for ($i=0; $i<strlen($cardNumber); $i++) {
      $currentNum = substr($cardNumber, $i, 1);

      /** Double every second digit*/

      if ($i % 2 == 1) {
	  $currentNum *= 2;
      }

      /** Add digits of 2-digit numbers together */

      if ($currentNum > 9) {
	  $firstNum = $currentNum % 10;
	  $secondNum = ($currentNum - $firstNum) / 10;
	  $currentNum = $firstNum + $secondNum;
      }
      $numSum += $currentNum;
      }
	  /** If the total has no remainder it's OK */

        return TRUE;
}
function commerce_payment_novalnet_cc3d_validateCvv($cvv)
{
  return preg_match('/^[0-9]{3}$/', $cvv);
}
function commerce_payment_novalnet_cc3d_validateCcExpiry($month, $year)
{
  
  $tmp = strtotime('-3 days');
  return ($month > 0 && $month < 13 && ($year == date('Y', $tmp) ? ($month >= date('n', $tmp)) : ($year > date('Y', $tmp))));
}
function commerce_payment_novalnet_cc3d_sanitizeCcNumber($ccNumber)
{
  return preg_replace('/[\-\s]+/', '', $ccNumber);
}
function  commerce_payment_novalnet_cc3d_check_status($_POST)
{  
  
  if($_POST['status'] && $_POST['status']=='100') 
    { 
      return TRUE;
    }
    
    else
    {
      $status = commerce_payment_novalnet_cc3d_payment_error($_POST);
	  return $status;
      
    }
}
function commerce_payment_novalnet_cc3d_payment_error($_POST)
{
    if(isset($_POST['status_text']))
    {
	$novalnet_error = utf8_encode($_POST['status_text']);
	
    }
    elseif(isset($_POST['status_desc']))
    {
	$novalnet_error = utf8_encode($_POST['status_desc']);
    }
    else
    {

	$novalnet_error = t('There was an error and your payment could not be completed.'.$_POST['status']);
    }

    return $novalnet_error;
}
function commerce_payment_novalnet_cc3d_returnurl(&$data,$nn_callback)
{
  $data['return_url']          = url($nn_callback, array('absolute' => TRUE));
  $data['return_method']       = 'POST';
  $data['error_return_url']    = url($nn_callback, array('absolute' => TRUE));
  $data['error_return_method'] = 'POST';
}