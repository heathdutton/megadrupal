<?php

/**
 * @file
 * Provides an novalnet_instant_bank_transfer payment method for Drupal Commerce for testing and
 *   development.
 */
function commerce_payment_novalnet_instant_bank_transfer_menu() {
$items = array();
$items['instantbank/review'] = array
  (
    'title'	      	=> 'Review payment',
    'page callback'   	=> 'commerce_novalnet_instant_bank_transfer_payment_complete',
    'access arguments' 	=> array('access content'),   
    'type' 		=> MENU_CALLBACK,
  );
return $items;
}

function commerce_novalnet_instant_bank_transfer_payment_complete()
{
$_response = $_POST;

$checkstatus = commerce_novalnet_instant_bank_transfer_checkstatus($_POST);
if($checkstatus != 1)
{
  $url = 'checkout/'.$_POST['orderid'].'/review';
 drupal_set_message($checkstatus,'error');
 drupal_goto($url);
}
else
{
$checkhash = commerce_novalnet_checkhash($_response,$_SESSION['nn_key']);
if($checkhash == 1)
{
$decode = commerce_novalnet_decode($_response,$_SESSION['nn_key']);
unset($_SESSION['nn_key']);
commerce_payment_novalnet_instant_bank_transfer_transaction($_response);
drupal_goto('checkout/'.$_POST['orderid'].'/complete');
}
}

}
function commerce_novalnet_checkHash($response, $key)
{	
  return isset($response['hash2'])  && !(commerce_novalnet_isEmptyString($response['hash2']))  && (($tmp = commerce_novalnet_hashIt($response, $key)) !== false)
  && ($response['hash2'] == $tmp);
}
function commerce_novalnet_decode(&$_response, $key)
{
      
	if(!function_exists('base64_decode') || !function_exists('pack') || !function_exists('crc32'))
	{
		return false;
	}
	$toBeEncoded = array('auth_code', 'product', 'tariff', 'test_mode', 'uniqid', 'amount');
	foreach($toBeEncoded as $_value )
	{
		$fields = $_response[$_value];
		if(commerce_novalnet_isEmptyString($fields))
		{
			return false;
		}
		try
		{
		  $fields =  base64_decode(strrev($fields));
		  $fields = pack("H".strlen($fields), $fields);
		  $fields = substr($fields, 0, stripos($fields, $key));
		  $pos  = strpos($fields, "|");
		  if($pos === false) {
			  return false;
		  }
		  $crc   = substr($fields, 0, $pos);
		  $value = trim(substr($fields, $pos+1));
		  if( $crc != sprintf('%u', crc32($value)) )
		  {
			  return false;
		  }
		  $_response[$_value] = $value;
		}
		catch(Exception $e)
		{
		  return false;
		}
	}
	return true;
}
function commerce_novalnet_instant_bank_transfer_checkstatus($_POST)
{
  if($_POST['status'] && $_POST['status'] == 100)
  {
      return TRUE;
  }
  else
  {
      $error = commerce_novalnet_instant_bank_transfer_getstatus_error($_POST);
      return $error;
  }
}
function commerce_novalnet_instant_bank_transfer_getstatus_error($_POST)
{
    if(isset($_POST['status_desc']))
    {
      $nn_status_error = utf8_encode($_POST['status_desc']);
    }
    elseif(isset($_POST['status_text']))
    {
      $nn_status_error = utf8_encode($_POST['status_text']);
    }
    else
    {
      $nn_status_error = t("There Was An Error In Your Payment. Payment Could Not Be Completed".$_POST['status']);
    }
  return $nn_status_error;
}
/**
 * Implements hook_commerce_payment_method_info().
 */

function commerce_payment_novalnet_instant_bank_transfer_commerce_payment_method_info() {
  $payment_methods = array();
	$path = base_path() . drupal_get_path('module', 'commerce_payment');
  $payment_methods['commerce_payment_novalnet_instant_bank_transfer'] = array(
    'title' => t('Novalnet Instant Bank Transfer'),
	'display_title' => '<a href="http://novalnet.de" title="Novalnet AG Payment Gateway" target="_blank"><img src="'.$path.'/novalnet/novalnet.png" alt="Novalnet AG" title="Novalnet AG Payment Gateway" /></a> '.t('Instant Bank Transfer'),
    'description' => t('Demonstrates complete payment during checkout and serves as a development novalnet_instant_bank_transfer.'),
    'active' => TRUE,
  );

  return $payment_methods;
}
function commerce_payment_novalnet_instant_bank_transfer_settings_form($settings=NULL)
{
    $form = array();

    $form['nn_instant_bank_transfer_vendor_id'] = array(
    '#type' => 'textfield',
    '#description'=>t('Enter Your Novalnet Merchant ID'),
    '#title' => t('Novalnet Vendor ID:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_vendor_id'],
    '#required' => TRUE,
    );

    $form['nn_instant_bank_transfer_authorisation_code'] = array(
    '#type' => 'textfield',
    '#description'=>'Enter Your Novalnet  Authorisation Code',
    '#title' => t('Novalnet Authorisation Code:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_authorisation_code'],
    '#required' => TRUE,
    );
    
    $form['nn_instant_bank_transfer_product_id'] = array(
    '#type' => 'textfield',
    '#description'=>'Enter Your Novalnet Product Id',
    '#title' => t('Novalnet Product ID:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_product_id'],
    '#required' => TRUE,
    );

    $form['nn_instant_bank_transfer_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=>'Enter Your Novalnet Tariff Id',
    '#title' => t('Novalnet Tariff ID:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_tariff_id'],
    '#required' => TRUE,
    );

    $form['nn_instant_bank_transfer_manuall_booking_limit'] = array(
    '#type' => 'textfield',
    '#description'=>'Enter Your Maximum Booking Amount',
    '#title' => t('Novalnet Manuall Booking Limit:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_manuall_booking_limit'],
    '#required' => FALSE,
    );

    $form['nn_instant_bank_transfer_second_product_id'] = array(
    '#type' => 'textfield',
    '#description'=>'Enter your Second Product Id',
    '#title' => t('Novalnet Second Product ID:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_second_product_id'],
    '#required' => FALSE,
    );
    
    $form['nn_instant_bank_transfer_second_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=>'Enter Your Second Tariff Id',
    '#title' => t('Novalnet Second Tariff ID:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_second_tariff_id'],
    '#required' => FALSE,
    );
        
    $form['nn_instant_bank_transfer_customer_information'] = array(
    '#type' => 'textfield',
    '#description'=>t('Customer Information'),
    '#title' => t('End User Information:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_customer_information'],
    '#required' => FALSE,
    );
    
    $form['nn_instant_bank_transfer_proxy_server'] = array(
    '#type' => 'textfield',
    '#description'=>t('Enter The Proxy Server Detail If Any'),
    '#title' => t('Proxy Server:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_proxy_server'],
    '#required' => FALSE,
    );
    $form['nn_instant_bank_transfer_key'] = array(
     '#type' => 'textfield',
    '#description'=>t('Enter The Encryption Password'),
    '#title' => t('Encryption Key:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_key'],
    '#required' => TRUE,
    );

    $form['nn_instant_bank_transfer_test_mode'] = array(
    '#type' => 'select',
    '#description'=>t('Enter The Transaction Mode'),
    '#title' => t('Test Mode:'),
    '#default_value'=>$settings['nn_instant_bank_transfer_test_mode'],
    '#options'=>array(
    '1'=>'true',
    '0'=>'false'),
    '#required' => FALSE,
    );

    return $form;
}
/**
 * Payment method callback: submit form.
 */
function commerce_payment_novalnet_instant_bank_transfer_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  
	 $form['dummy'] = array(
	 '#type' => 'hidden',
	 '#value' => 'dummy'
	 );
	 return $form;
 
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_payment_novalnet_instant_bank_transfer_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Throw an error if a long enough name was not provided.
//   if (strlen($pane_values['name']) < 2) {
//     form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));
// 
//     // Even though the form error is enough to stop the submission of the form,
//     // it's not enough to stop it from a Commerce standpoint because of the
//     // combined validation / submission going on per-pane in the checkout form.
//     return FALSE;
//   }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_payment_novalnet_instant_bank_transfer_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
    $nn_callback = 'instantbank/review';
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
    commerce_payment_novalnet_instant_bank_transfer_basic_parm_list($data,$order,$payment_method);
    commerce_payment_novalnet_instant_bank_transfer_default_param_list($data,$order,$billing_address);
    commerce_payment_novalnet_instant_bank_transfer_orderamount($data,$order);
    commerce_payment_novalnet_instant_bank_tarnsfer_returnurl($data,$nn_callback);
    $data['user_variable_0'] = url('', array('absolute' => TRUE));
    $data['key'] = 33;
    $data['order_no'] = $order->order_number;
    $data['orderid'] = $order->order_number;
    $data['uniqid'] = uniqid();
    $data['implementation'] = 'PHP';
    $enckey = $payment_method['settings']['nn_instant_bank_transfer_key'];
    $_SESSION['nn_key'] = $enckey;
   
    $encode = commerce_novalnet_instant_bank_transfer_encode($data,$enckey);
    $hash = commerce_novalnet_hashIt($data,$enckey);
    $data['hash'] = $hash;
    $data['instance_id'] = $payment_method['instance_id'];
     foreach($data as $value)
     {
 	
 	if($value == '') 	{
 	  drupal_set_message('Input Data Missing.......Payment System Cannot be Used Now . Kindly Choose Another Method.','error');
 	  return FALSE;
 	}
     }
      $host = 'https://payport.novalnet.de/online_transfer_payport';
      
      $output = novalnet_instant_bank_transfer_redirect_form($data,$host);
      echo $output; exit;
 
}
function novalnet_instant_bank_transfer_redirect_form($data,$host)
 {
   $nn_form = '<form name=nn_redirect_form action="'.$host.'" method=post>';
   foreach($data as $name=>$value)
   {
    $nn_form .= '<input type = hidden name = "'.$name.'" value = "'.$value.'">';
   }
   $nn_form .= t('You will be redirected automatically. If not for more than 10 sec click here').'<br><input type=submit name = redirecting value = Redirecting....></form>';
   $nn_form .= '<script>document.nn_redirect_form.submit();</script>';

    return $nn_form;
}
function commerce_payment_novalnet_instant_bank_transfer_orderamount(&$data,$order)
{
$data['amount'] = $order->commerce_order_total['und'][0]['amount'];
}
function commerce_payment_novalnet_instant_bank_transfer_default_param_list(&$data,$order,$billing_address)
{	  
    $data['currency']         = $order->commerce_order_total['und'][0]['currency_code'];
    $data['first_name']       = $billing_address['first_name'];
    $data['last_name']        = $billing_address['last_name'];
    $data['gender']           = 'u';
    $data['email']            = $order->mail;
    $data['street']           = $billing_address['thoroughfare'];
    $data['search_in_street'] =	'1';
    $data['city']             = $billing_address['locality'];
    $data['zip']              = $billing_address['postal_code'];
    $data['language']         = $billing_address['country'];
    $data['lang']             = $billing_address['country'];
    $data['session']          = session_id();
    $data['country']          = $billing_address['country'];
    $data['country_code']     = $billing_address['country'];
    $data['remote_ip']        = novalnet_instant_bank_transfer_getRealIpAddr() ;
    $data['birth_date']       = 'NULL';
    $data['fax']	      = 'NULL';
    $data['tel']              = '1234343232567';
    if($data['last_name'] == '')
    {
      $data['last_name'] = $data['first_name'];
    }
}
function commerce_payment_novalnet_instant_bank_tarnsfer_returnurl(&$data,$nn_callback)
{
  $data['return_url']          = url($nn_callback, array('absolute' => TRUE));
  $data['return_method']       = 'POST';
  $data['error_return_url']    = url($nn_callback, array('absolute' => TRUE));
  $data['error_return_method'] = 'POST';
}
function commerce_payment_novalnet_instant_bank_transfer_basic_parm_list(&$data,$order,$payment_method)
{
    $data['vendor'] = $payment_method['settings']['nn_instant_bank_transfer_vendor_id'];
    $data['product'] = $payment_method['settings']['nn_instant_bank_transfer_product_id'];
    $data['auth_code'] = $payment_method['settings']['nn_instant_bank_transfer_authorisation_code'];
    $data['tariff'] = $payment_method['settings']['nn_instant_bank_transfer_tariff_id'];
    if($payment_method['settings']['nn_instant_bank_transfer_manuall_booking_limit'] != '')
    {
      if($order->commerce_order_total['und'][0]['amount'] > $payment_method['settings']['nn_instant_bank_transfer_manuall_booking_limit'])
      {
	$data['product'] = $payment_method['settings']['nn_instant_bank_transfer_second_product_id'];
	$data['tariff'] = $payment_method['settings']['nn_instant_bank_transfer_second_tariff_id'];  
      }
    }
    $data['test_mode'] = $payment_method['settings']['nn_instant_bank_transfer_test_mode'];
	$_SESSION['instant_test_mode'] = $data['test_mode'];
    //print_r($data); exit;
    
}
function commerce_novalnet_instant_bank_transfer_encode(&$data,$key)
{

    if(!function_exists('base64_encode') || !function_exists('pack') || !function_exists('crc32')) {
	     
	    return false;
    }
    $toBeEncoded = array('auth_code', 'product', 'tariff', 'test_mode', 'uniqid', 'amount');
    foreach($toBeEncoded as $_value ) {
 
	    $fields = $data[$_value];
	    if(commerce_novalnet_isEmptyString($fields)) {
		    return false;
	    }
	    try {
		    $crc = sprintf('%u', crc32($fields));//%u is a must for ccrc32 returns a signed value
		    $fields = $crc."|".$fields;
		    $fields = bin2hex($fields.$key);
		    $fields = strrev(base64_encode($fields));
		    
		    $data[$_value] = $fields;
	    }catch(Exception $e) {

		    return false;
	    }
    }
    
    return true;
}

function novalnet_instant_bank_transfer_isPublicIP($value)
{
  return (count(explode('.', $value)) == 4 && !preg_match('~^((0|10|172\.16|192\.168|169\.254|255|127\.0)\.)~', $value));
}

/** Function for Getting the Ip Address **/
		
function novalnet_instant_bank_transfer_getRealIpAddr() 
{
      $_check = array(
	      'HTTP_X_FORWARDED_FOR',
	      'HTTP_CLIENT_IP',
	      'HTTP_X_CLUSTER_CLIENT_IP',
	      'HTTP_FORWARDED_FOR',
      );
      foreach($_check as $_key)
      {
	if(isset($_SERVER[$_key]))
	{
	  $ips = explode(',', $_SERVER[$_key]);
	  if(isset($ips[0]) && $this->isPublicIP($ips[0]))
	  {
	    return $ips[0];
	  }
	}
      }
      return $_SERVER['REMOTE_ADDR'];
}
function commerce_novalnet_isEmptyString($str)
{
  $str = trim($str);
  return !isset($str[0]);
}
function commerce_novalnet_hashIt($data,$key)
{	
  $hashFields = array('auth_code', 'product', 'tariff', 'amount', 'test_mode', 'uniqid' );
  $str = NULL;
  foreach( $hashFields as $_value ) {
	  if($data[$_value] == '') {
		
		  return false;
	  }
	  $str .= $data[$_value];

  }
  //echo $str; exit;
  return md5($str . strrev($key));
}
/**
 * Creates an novalnet_instant_bank_transfer payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_payment_novalnet_instant_bank_transfer_transaction($_response) {
if($_SESSION['instant_test_mode'] == 1)
{
$testorder = t('TEST ORDER');
}
elseif($_response['test_mode'] == 1)
{
$testorder = t('TEST ORDER');
}
else
{
$testorder = " ";
}
unset($_SESSION['instant_test_mode']);
$transaction = commerce_payment_transaction_new('commerce_payment_novalnet_instant_bank_transfer',$_response['orderid']);
$transaction->instance_id = $_response['instance_id'];
$transaction->amount = $_response['amount'];
$transaction->currency_code = $_response['currency'];
$transaction->payment_method = "commerce_payment_novalnet_instant_bank_transfer";
$transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
$transaction->message = 'Novalnet Transaction'. $_response['tid'].'<br>'.t($testorder);
commerce_payment_transaction_save($transaction);
$order = commerce_order_load($_response['orderid']);
$order = commerce_order_status_update($order, 'checkout_complete', FALSE, TRUE, t('Customer continued to the next checkout page via a submit button.'));
commerce_checkout_complete($order);
drupal_set_message(t('Please note down the below Transaction details provided by Novalnet (TID) <br>').$transaction->message,'status');
drupal_goto('checkout/'.$_response['orderid'].'/complete');
}
