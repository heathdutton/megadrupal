<?php

/**
 * D.A.I.L.
 * Drupal Aritificial Intelligence Libraries example
 *
 * Basic example usage of genetic algorithm classes.
 */

function tsp_init() {
  require_once(drupal_get_path('module', 'dail') . "/genetic/ga.inc");
}

function tsp_menu() {
  $items = array();
  $items['tsp'] = array(
    'title' => t('Traveling Salesman Problem'),
    'description' => 'A simple demonstration of the D.A.I.L. ga classes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tsp_page'),
    'access arguments' => array(TRUE),
  );
  $items['tsp/solved'] = array(
    'title' => t('Solution'),
    'description' => 'Problem solved.',
    'page callback' => 'tsp_solved',
    'type' => MENU_CALLBACK,
    'access arguments' => array(TRUE),
  );
  return $items;
}

/**
 * Progress bar.
 */
function tsp_page() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Solve'),
  );
  return $form;
}

function tsp_page_submit($form, &$form_state) {
  $batch = array(
    'title' => t('Solving a Traveling Salesman Problem with a genetic algorithm'),
    'operations' => array(
      array('tsp_ga_solve', array()),
    ),
    'finished' => 'tsp_ga_solve_callback',
    'init_message' => t('Creating a random initial population.'),
    'progress_message' => '',
    'error_message' => t('Whoops! We ran into an unexpected error.'),
  );
  batch_set($batch);
}

function tsp_ga_solve_callback($success, $results, $operations) {
  drupal_goto('tsp/solved');
}

function tsp_solved() {
  $ga = new dail();
  $ga = $ga->load_state(array('library' => 'ga'));
  $output = t('Solved!') . '<br />';
  $output .= t('Ended with chromosome !chromosome with a fitness of !fitness.', array('!chromosome' => implode('', $ga->best->chromosome), '!fitness' => $ga->best->fitness));
  return $output;
}

function tsp_ga_solve(&$context) {
  if (empty($context['sandbox'])) {
    // Prepare the problem.
    $cities = tsp_get_cities();
    $distances = tsp_get_distances($cities);

    // Prepare to loop until solved.
    $context['sandbox']['generation'] = 0;
    $context['sandbox']['max'] = 1000;
    $context['sandbox']['ga'] = new ga(array('initial_population' => 10, 'fitness_callback' => 'tsp_fitness_callback'));
    $context['sandbox']['ga']->create(array('alphabet' => array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H')));
    $context['sandbox']['ga']->cull(array('cull_callback' => 'tsp_cull_callback'));
    $context['sandbox']['ga']->fitness();
  }
  $context['sandbox']['generation']++;
  if (!is_object($context['sandbox']['ga'])) {
    $context['sandbox']['ga'] = new dail();
    $context['sandbox']['ga'] = $context['sandbox']['ga']->load_state(array('library' => 'ga'));
  }
  if ($context['sandbox']['ga']->evolving()) {
    // Breed a new generation.
    $context['sandbox']['ga']->evolve();
    // Remove solutions that don't visit all cities.
    $context['sandbox']['ga']->cull(array('cull_callback' => 'tsp_cull_callback'));
    // Determine fitness for new generation.
    $context['sandbox']['ga']->fitness();
    $current = $context['sandbox']['ga']->current[0];
    if (isset($current->fitness)) {
      $fitness = $current->fitness;
      $chromosome = implode('', $current->chromosome);
    }
    else {
      $fitness = t('n/a');
      $chromosome = t('n/a');
    }
    if (!mt_rand(0,1)) {
      $context['sandbox']['ga']->save_state(array('library' => 'ga', 'state' => $context['sandbox']['ga']));
    }
  }
  $context['message'] = t('Generation %generation of %max, current best fitness %best (%chromosome).', array('%generation' => $context['sandbox']['generation'], '%max' => $context['sandbox']['max'], '%best' => $fitness, '%chromosome' => $chromosome));
  $context['finished'] = $context['sandbox']['generation'] >= $context['sandbox']['max'] ? 1 : 0;
}

function tsp_pageold() {
/**
 * TODO: Display city information:
  $output .= t('<p><h3>City distances:</h3>');
  $distances = tsp_get_distances();
  $header = array('');
  $rows = array();
  foreach ($distances as $city => $remotes) {
    $row = array();
    $header[] = $city;
    $row[] = $city;
    foreach ($remotes as $distance) {
      $row[] = number_format($distance);
    }
    $rows[] = $row;
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
*/

/**
 * TODO: Dump generation info:
  $output .= t('<p><h3>Initial population:</h3>');
  $header = array(t('chromosome'), t('fitness'));
  $rows = array();
  foreach ($ga->chromosomes as $chromosome) {
    $row = array();
    $row[] = array('data' => implode('', $chromosome->chromosome));
    $row[] = array('data' => number_format($chromosome->fitness()));
    $rows[] = $row;
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
*/

  $output .= t("<p><h3>Final population ($i):</h3>");
  $header = array(t('chromosome'), t('fitness'));
  $rows = array();
  foreach ($ga->chromosomes as $chromosome) {
    $row = array();
    $row[] = array('data' => implode('', $chromosome->chromosome));
    $row[] = array('data' => number_format($chromosome->fitness()));
    $rows[] = $row;
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  $current = $ga->current[0];
  $output .= t('Ended on generation-!number with chromosome !chromosome with a fitness of !fitness.<br />', array('!number' => $i, '!chromosome' => implode('', $current->chromosome), '!fitness' => $current->fitness));
  drupal_set_message(t('Final fitness of !current (!chromosome), generation !number.', array('!number' => $i, '!current' => $current->fitness, '!chromosome' => implode('', $current->chromosome))));
  $best = $ga->best;
  if ($current->fitness != $best->fitness) {
    $output .= t('Best all-time chromosome found was !chromosome with a fitness of !fitness.<br />', array('!chromosome' => implode('', $best->chromosome), '!fitness' => $best->fitness));
    drupal_set_message(t('Ran for !gen generations, ended with fitness of !best (!chromosome)', array('!gen' => $i, '!best' => $best->fitness, '!chromosome' => implode('', $best->chromosome))));
  }
  foreach ($ga->current as $current) {
    $chromosomes[implode('', $current->chromosome)] = $current->fitness;
  }
  if (count($chromosomes) > 1) {
    foreach ($chromosomes as $chromosome => $fitness) {
      drupal_set_message(t(' - Fitness !fitness, !chromosome.', array('!fitness' => $fitness, '!chromosome' => $chromosome)));
    }
  }

  return $output;
}

/**
 *     0   1   2   3   4   5   6   7   8   9
 * 0 | A |   |   |   |   |   |   |   |   |   |
 * 1 |   | C |   |   |   |   |   |   | D |   |
 * 2 |   |   |   | G |   |   |   |   |   |   |
 * 3 |   |   |   |   |   |   |   |   |   |   |
 * 4 |   |   |   |   |   |   |   |   |   |   |
 * 5 |   |   |   |   |   | F |   |   |   |   |
 * 6 | H |   |   |   |   |   |   |   |   |   |
 * 7 |   |   |   | B |   |   |   |   |   |   |
 * 8 |   |   |   |   |   |   |   |   |   |   |
 * 9 |   |   |   |   |   |   |   |   |   | E |
 */
function tsp_get_cities($problem_key = 1) {
  // TODO: Allow generation of city locations.  For now, we're hard coding
  // it.
  $query = db_select('tsp_problems')
    ->fields('tsp_problems', array('city', 'coordinates'))
    ->condition('problem_key', $problem_key);
  $values = $query->execute();
  $cities = array();
  foreach ($values as $value) {
    if (isset($value->city)) {
      $cities[$value->city] = explode(',', $value->coordinates);
    }
  }
  if (empty($cities)) {
    $cities['A'] = array('0', '0');
    $cities['B'] = array('3', '7');
    $cities['C'] = array('1', '1');
    $cities['D'] = array('8', '1');
    $cities['E'] = array('9', '9');
    $cities['F'] = array('5', '5');
    $cities['G'] = array('2', '3');
    $cities['H'] = array('6', '0');
    foreach($cities as $city => $coordinates) {
      db_insert('tsp_problems')->fields(array('problem_key' => $problem_key, 'city' => $city, 'coordinates' => implode(',', $coordinates)))->execute();
    }
  }
  return $cities;
}

function tsp_get_distances($cities = array()) {
  static $distances = array();
  if (!empty($cities)) {
    foreach ($cities as $city => $coordinates) {
      foreach ($cities as $remote => $remote_coordinates) {
        $distances[$city][$remote] = tsp_calculate_distance($coordinates, $remote_coordinates);
      }
    }
  }
  return $distances;
}

function tsp_calculate_distance($near, $far) {
   return abs($near[0] - $far[0]) + abs($near[1] - $far[1]);
}

/**
 * Callback to determine the fitness score of the current chromosome.
 * Lower score is better.
 */
function tsp_fitness_callback($chromosome) {
  $cities = tsp_get_cities();
  $distances = tsp_get_distances($cities);
  $alphabet = array_flip($chromosome->alphabet());
$alph = implode('', $chromosome->alphabet());
  $fitness = 0;
  $previous = FALSE;
  foreach ($chromosome->chromosome as $gene) {
    if (isset($alphabet[$gene])) {
      unset($alphabet[$gene]);
    }
    if ($previous !== FALSE) {
      $fitness += $distances[$previous][$gene];
    }
    // penalize duplicate chromosomes
    if ($previous == $gene) {
      $fitness++;
    }
    $previous = $gene;
  }
  if (count($alphabet)) {
    // TODO: Make 50 be an algorithmically calculated value based on the size of
    // the grid.
    $fitness += (count($alphabet) * 50);
  }
  $chromosome->fitness($fitness);
}

/**
 * Enfoce: chromosome must contain all genes, in other words the traveling
 * salesman must visit all cities.
 */
function tsp_cull_callback($ga, $options = array()) {
  foreach ($ga->chromosomes as $key => $chromosome) {
    $alphabet = array_flip($chromosome->alphabet());
    foreach ($chromosome->chromosome as $gene) {
      if (isset($alphabet[$gene])) {
        unset($alphabet[$gene]);
      }
    }
    if (!empty($alphabet)) {
      $ga->chromosomes[$key]->cull();
    }
  }
}
