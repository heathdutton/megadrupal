<?php

/**
 * D.A.I.L.
 * Drupal Aritificial Intelligence Libraries example
 *
 * Basic simple example usage of Bayesian filter class.
 */

function bayesian_example_menu() {
  $items = array();
  $items['bayesian_example'] = array(
    'title' => t('Bayesian example'),
    'description' => 'A simple demonstration of the D.A.I.L. Bayesian class.',
    'page callback' => 'bayesian_example_page',
    'access arguments' => array(TRUE),
  );
  $items['bayesian_example/flush'] = array(
    'title' => t('Flush table'),
    'description' => 'Flush demonstration data from bayesian_tokens table.',
    'page callback' => 'bayesian_example_flush',
    'access arguments' => array(TRUE),
  );
  return $items;
}

/**
 * An example of how to use the Bayesian class.
 */
function bayesian_example_page() {
  // Dump out the database contents, to show what's happening behind the scenes.
  $output = t('<br /><strong>Database (before):</strong><br />');
  $output .= t('All tokens in the %class, ordered as viewed by Bayesian class.', array('%class' => t('example_class')));
  $output .= bayesian_example_dump();

  // Randomly pick one of two input strings.
  $output .= t('<strong>Input:</strong><br />');
  if (mt_rand(0, 1)) {
    $strings = array(
      'title' => t('This is an "example" title.'),
      'body' => t('And this is an "example" body.'),
    );
  }
  else {
    $strings = array(
      'title' => t('Another example title.'),
      'body' => t('And another example body.'),
    );
  }
  // Display the strings that we selected.
  foreach ($strings as $key => $string) {
    $output .= t("key(!key) string(!string)<br />", array('!key' => $key, '!string' => $string));
  }

  // Break the strings into tokens.
  $output .= t('<br /><strong>Tokenized:</strong><br />');
  // We can optionally pass in one or more options in an array as the second
  // parameter when creating a Tokenizer object.  The class supports the
  // following options:
  //  - prepend_key [TRUE|FALSE]: whether to prepend the array key to tokens.
  //    Defaults to FALSE
  //  - prepend_delimiter: [string] if prepend_key is set to TRUE, will put a
  //    delimiter between the array key and the token.  Defaults to '.'.
  //  - force_lowercase [TRUE|FALSE]: whether or not to force all characters to
  //    lowercase when tokenizing.  Defaults to TRUE.
  //  - sanitize [TRUE|FALSE]: whether or not to sanitize the tokens, stripping
  //    out various special characters.  Defaults to TRUE.
  // For example, we could create a tokens object that preserved case by setting
  // the following option:
  //    $tokens = new Tokenizer($strings, array('force_lowercase' => FALSE));
  $tokens = new Tokenizer($strings);
  $output .= implode(', ', $tokens->tokens) . '<br />';
  // Prepare to create a Bayesian object.
  $output .= t('<br /><strong>Bayesian class:</strong><br />');
  // Radonomly decide if we'll be assigning TRUE or FALSE to all tokens.
  $value = rand(0, 1);
  $value_text = $value ? t('TRUE') : t('FALSE');
  $output .= t("Setting tokens as '!value'.<br />", array('!value' => $value_text));
  // Create Bayesian object, store all tokens in the 'bayesian_example'
  // collection in the database.  Each module should define its own collection
  // allowing multiple tables to use the Baysian logic.
  $bayes = new Bayesian('bayesian_example');
  // The prepare function analyzes the tokens that are passed in and builds a
  // values array.
  $bayes->prepare($tokens->tokens, $value);
  // Retrieve the values array that was built in prepare().
  $values = $bayes->values();
  // Display prepared tokens, followed by the weight of each token (how many
  // times it was found in the string).
  $tokens = $tokens_raw = array();
  foreach ($values as $token => $values) {
    foreach ($values as $value) {
      $tokens[] = "$token($value)";
      $tokens_raw[] = $token;
    }
  }
  $output .= t('Token values: ') . implode(', ', $tokens) . '<br />';
  // Override the default_probability, because we can.
  $bayes->default_probability(.45);
  $interesting = mt_rand(3,7);
  $output .= t("Calculating score from %interesting most 'interesting' tokens.<br />", array('%interesting' => $interesting));
  $bayes->interesting($interesting);
  // To better show how the score is calculated, display the 'interesting'
  // tokens and their probabilities.
  $probabilities = bayesian_example_dump($interesting, $tokens_raw);
  $tokens = array();
  foreach ($probabilities as $token => $probability) {
    $tokens[] = "$token($probability)";
  }
  // Not enough matching tokens were found in the database.  Fill in the missing
  // one with default values, to simulate what happens in the Bayesian class.
  if (count($tokens) < $interesting && count($tokens) < count($tokens_raw)) {
    for ($i = count($tokens); $i < $interesting && $i < count($tokens_raw); $i++) {
      $tokens[] = '(' . $bayes->default_probability() . ')';
    }
  }
  $output .= t('Interesting tokens: !tokens<br />', array('!tokens' => implode(', ', $tokens)));
  // Determine the average score for all tokens, by loading the probabilities
  // for each from the database.  If a token doesn't have a probability in the
  // database the default_probability is assigned.
  $score = $bayes->score();
  $output .= t("Score: $score<br />");
  $output .= t('<em>To manually calculate the score, scan the above (before) table for up to the !interesting most interesting tokens from the above token list, add up the probabily value for each and divide by !interesting or the number of tokens (whichever is less).  Tokens with no probability value in the database are defined a default value of !default.</em><br />', array('!interesting' => $interesting, '!default' => $bayes->default_probability()));
  // Storing the token values in the database.  This will affect future scores
  // if the page is reloaded without flushing the table.
  $output .= t('Teaching Bayesian logic, updating database.<br />');
  $bayes->teach();

  // Dump out the database contents, to show what's happening behind the scenes.
  $output .= t('<br /><strong>Database (after):</strong><br />');
  $output .= t('All tokens in the %class, ordered as viewed by Bayesian class.', array('%class' => t('example_class')));
  $output .= bayesian_example_dump();
  $output .= t('Reload this page to insert more tokens.<br />');
  $output .= t("View the source code of the bayesian_example module to see what's happening behind the scenes.<br />");

  return $output;
}

function bayesian_example_dump($limit = 0, $tokens = array()) {
  $header = array(t('token'), t('true_count'), t('false_count'), t('total_count'), t('probability'), t('interest'));
  // This is the query used in the Bayesian class when calculating the score.
  $query = db_select('bayesian_tokens')
    ->fields('bayesian_tokens', $header)
    ->condition('collection', 'bayesian_example')
    // Sort first by interest, thus the farther a token is from the median of .5
    // which is half way between TRUE and FALSE the more "interesting" it is to
    // us.
    ->orderBy('interest', 'DESC')
    // If multiple tokens have the same weight, we then sort by the total_count,
    // so the more often we've seen a token the more "interesting" it is.
    ->orderBy('total_count', 'DESC')
    // Finally, if tokens have the same total_count we sort by when the token
    // was last seen.  More recently seen tokens are more "interesting".
    ->orderBy('last', 'DESC');
  if ($limit) {
    $query->range(0, $limit);
  }
  if (!empty($tokens)) {
    $query->condition('token', $tokens, 'IN');
  }
  $rows = array();
  $values = $query->execute();
  // Just return the probability of each row, instead of building a table.
  if ($limit) {
    foreach ($values as $value) {
      $rows[$value->token] = $value->probability;
    }
    return $rows;
  }
  $count = count($header);
  foreach ($values as $value) {
    $row = array();
    for ($i = 0; $i < $count; $i++) {
      $row[] = $value->$header[$i];
    }
    $rows[] = $row;
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Delete all tokens in 'bayesian_example' collection.
 * TODO: Automatically call this from the uninstall hook.
 */
function bayesian_example_flush() {
  db_delete('bayesian_tokens')
    ->condition('collection', 'bayesian_example')
    ->execute();
  drupal_set_message(t('Example tokens flushed from bayesian_tokens table.'));
  drupal_goto();
}
