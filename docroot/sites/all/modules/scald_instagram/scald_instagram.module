<?php

/**
 * @file
 * Defines a instagram provider for Scald.
 */

define('SCALD_INSTAGRAM_ID_REGEXP', '/^[-a-zA-Z0-9]+$/');
define('SCALD_INSTAGRAM_WEB_REGEXP', '#^https?://([-\w]+\.)?instagram\.com/p/(\w+)#');
define('SCALD_INSTAGRAM_WEB', 'http://instagram.com/p/');
define('SCALD_INSTAGRAM_HTTP_TIMEOUT', '5');
define('SCALD_INSTAGRAM_LICENCE', 'IN');

/**
 * Implements hook_scald_atom_providers().
 * @description
 *  Tell Scald that we'll be providing some instagram atoms.
 */
function scald_instagram_scald_atom_providers() {
  return array(
    'image' => 'Image hosted on instagram',
  );
}

/**
 * Implements hook_scald_add_form().
 */
function scald_instagram_scald_add_form(&$form, &$form_state) {
  $form['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('instagram identifier or URL'),
    '#element_validate' => array('scald_instagram_validate_id'),
    '#default_value' => '',
  );
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_instagram_scald_add_form_fill(&$atom, $form, $form_state) {
  // Get the identifier.
  $identifier = scald_instagram_parse_id($form_state['values']['identifier'], TRUE);

  // Get insta info.
  $url = scald_instagram_parse_id($identifier, 1);
  $infos = scald_instagram_text($url);

  $atom->base_id = $identifier;
  $atom->title = $infos->title;

  // Prefill the author.
  $atom->scald_authors[LANGUAGE_NONE][0] = array(
    'tid' => 0,
    'taxonomy_term' => (object) (array('name' => $infos->author)),
  );

  // Prefill tags.
  if (isset($infos->tags)) {
    $i = 0;
    $tag_array = explode(" ", $infos->tags);
    foreach ($tag_array as $tag) {
      $atom->scald_tags[LANGUAGE_NONE][$i] = array(
        // Beware, this is not a real tid, it's just an index.
        'tid' => $i,
        'taxonomy_term' => (object) (array('name' => $tag)),
      );
      $i++;
    }
  }

  // Download a copy of the insta image. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($infos->id . "/media/?size=l");
  $dir = 'public://atom/instagram/thumbnail';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $infos->media_id . '.jpg';
    $file = file_save_data($thumb->data, $dest);

    if ($file) {
      // Set the file status to temporary.
      $query = db_update('file_managed')->condition('fid', $file->fid)->fields(array('status' => 0))->execute();

      $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array) $file;
    }
  }
}

/**
 * Implements hook_scald_fetch().
 */
function scald_instagram_scald_fetch($atom, $type) {
  $file = $atom->scald_thumbnail[LANGUAGE_NONE][0]['uri'];
  if (file_exists($file)) {
    $atom->file_source = $atom->thumbnail_source = $file;
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_instagram_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    if ($context != 'sdl_library_item') {
      $atom->rendered->player = '';
      $atom->rendered->title = '';
    }
  }
}

/**
 * Retrieves all necessary data on an given text using instagram API.
 *
 * @param string $id
 *   Unique identifier of the text on instagram.
 *
 * @return object
 *   Object containing the following members.
 *   - id: the permalink
 *   - media_id: the id of this content on instragram
 *   - author: the author's name
 *   - url: the permalink (again ?)
 *   - thumbnail: associative array, containing the keys 'src',
 *     'width' and 'height'.
 *   - tags: a string containing the hash tags associated to
 *     this insta, with there leftmost # stripped.
 */
function scald_instagram_text($id) {

  $response = drupal_http_request("http://api.instagram.com/oembed?url=" . $id);
  try {
    $insta = json_decode($response->data);
  }
  catch (Exception $e) {
    watchdog('scald_instagram', $e->getMessage());
    return FALSE;
  }

  $info = new stdClass();
  // ID : this is the url of the instagram post.
  $info->id = $id;
  $info->media_id = $insta->media_id;
  // Title.
  $info->title = substr($insta->title, 0, 127);
  // Author.
  $info->author = $insta->author_name;
  // Thumbnail.
  if ($insta->url) {
    $info->url = $insta->url;
    // Artwork is always 150x150
    $info->thumbnail = array(
      'src' => $id . "/media/?size=t",
      'width' => 150,
      'height' => 150,
    );
  }

  // Tags.
  // we take every word starting by #.
  $pattern = '/(?!\b)#(\w+\b)/';
  $matches = NULL;
  preg_match_all($pattern, $insta->title, $matches);
  if (is_array($matches) && !empty($matches[1])) {
    $tags = array_unique($matches[1]);
    $info->tags = implode(" ", $tags);
  }

  // License.
  $info->license = SCALD_INSTAGRAM_LICENCE;
  return $info;
}

/**
 * Checks if an insta has already been imported, based on its permalink.
 *
 * @param string $id
 *   The insta identifier
 *
 * @return mixed
 *   FALSE if the insta was never imported, the scald identifier of
 *   the insta otherwise.
 */
function scald_instagram_already_imported($id) {
  $query = array('provider' => 'scald_instagram', 'base_id' => $id);
  return scald_search($query, FALSE, TRUE);
}

/**
 * Validates that the text the user entered is an instagram identifier.
 */
function scald_instagram_validate_id($element, &$form_state) {
  // First we clean up the url, there should not be any query string.
  if (valid_url($form_state['values']['identifier'])) {
    $parsed_url = parse_url($form_state['values']['identifier']);
    if (is_string($parsed_url['query'])) {
      form_error($element, t('Invalid instagram URL. Please remove query string'));
    }
  }
  $url = scald_instagram_parse_id($form_state['values']['identifier'], TRUE);
  if (!$url) {
    form_error($element, t('Invalid instagram URL.'));
  }
  elseif (scald_instagram_already_imported($url)) {
    form_error($element, t('instagram already imported.'));
  }
}

/**
 * Parses a instagram URL and check validity.
 */
function scald_instagram_parse_id($string, $check) {
  $id = FALSE;
  $string = trim($string);
  if (substr($string, -1) == '/') {
    $string = substr($string, 0, -1);
  }

  if (!preg_match(SCALD_INSTAGRAM_ID_REGEXP, $string)) {
    // The string ID is not easy to parse, let's try to analyze it.
    if (preg_match(SCALD_INSTAGRAM_WEB_REGEXP, $string, $m)) {
      // This string is a full instagram URL.
      $url = scald_instagram_resolve_url($string);
    }
    elseif (valid_url($string, TRUE)) {
      // This string is a URL, most likely a shortened one.
      // (http://dai.ly, http://bit.ly, etc...).
      $response = drupal_http_request($string);
      // Get the .com instagram url.
      if (preg_match(SCALD_INSTAGRAM_WEB_REGEXP, $response->redirect_url)) {
        $url = $response->redirect_url;
      }
      else {
        $url = FALSE;
      }
    }
  }
  else {
    $url = SCALD_INSTAGRAM_WEB . $string;
  }

  if ($url && $check) {
    // Last check to confirm this insta really exists on instagram.
    if (!scald_instagram_text($url)) {
      $url = FALSE;
    }
  }
  return $url;
}

/**
 * Resolves a instagram ID from a insta URL.
 *
 * @param string $insta_url
 *   The fully qualified insta url.
 *   Ex: https://instagram.com/p/Df12Gre6
 *
 * @return id
 *   FALSE if the instagram was not resolved, otherwise its unique
 *   instagram ID
 */
function scald_instagram_resolve_url($insta_url) {
  $options = array("timeout" => SCALD_INSTAGRAM_HTTP_TIMEOUT);
  $response = drupal_http_request($insta_url, $options);

  return intval($response->code == 200) ? $insta_url : FALSE;
}
