<?php
/**
 * @file
 * Redirects logging messages to the syslog-ng service.
 *
 * This module is basically now a copy of core syslog.module code,
 * with a dedicated settings page that has extra configuration file generation
 * and instructions.
 */

if (defined('LOG_LOCAL3')) {
  /**
   * Sets the proper logging facility.  Defaults to LOG_LOCAL3 to remain
   * compatible with older versions of syslog_ng.
   *
   * Note that LOG_LOCAL0 through LOG_LOCAL7 are not available on Windows, so we
   * check for availability. If LOG_LOCAL0 is defined by the PHP environment, we
   * set that as the default; if not, we use LOG_USER.
   *
   * @see http://php.net/manual/function.syslog.php
   */
  define('DEFAULT_SYSLOG_NG_FACILITY', LOG_LOCAL3);
}
else {
  define('DEFAULT_SYSLOG_NG_FACILITY', LOG_USER);
}

define('DEFAULT_SYSLOG_NG_IDENT','drupal');
define('DEFAULT_SYSLOG_NG_FORMAT','!base_url|!timestamp|!type|!ip|!request_uri|!referer|!uid|!link|!message');
define('DEFAULT_SYSLOG_NG_ENABLED',0);

/**
 * Implementation of hook_menu()
 */
function syslog_ng_menu(){
	$items = array();
	
	$items['admin/config/development/syslog_ng'] = array(
	'title' => 'Syslog-ng Logging',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('syslog_ng_settings_form'),
  'access arguments' => array('administer site configuration'),
	'description' => t('Configure settings and generate configuration for Syslog-ng logging.')
	);
	
	return $items;
}

/**
 * Settings form builder function for drupal_get_form
 * @param unknown_type $form the form
 * @param unknown_type $form_state the form state
 */
function syslog_ng_settings_form($form, $form_state){
	$form = array();
	
	$form['syslog_ng_enabled'] = array(
		'#type' => 'checkbox',
  	'#title' => t('Syslog-ng Logging Enabled'),
  	'#description' => t('Once you have configured and saved an Ident and configured your syslog-ng server, check this box to enable Syslog-ng logging.'),
  	'#default_value' => variable_get('syslog_ng_enabled', DEFAULT_SYSLOG_NG_ENABLED),
	);

  if (defined('LOG_LOCAL3')) {
    $form['syslog_ng_facility'] = array(
      '#type'          => 'select',
      '#title'         => t('Syslog-ng facility'),
      '#default_value' => variable_get('syslog_ng_facility', DEFAULT_SYSLOG_NG_FACILITY),
      '#options'       => syslog_ng_facility_list(),
      '#description'   => t('Depending on the system configuration, Syslog-ng and other logging tools use this code to identify or filter messages from within the entire system log.'),
     );
  }
  $form['syslog_ng_format'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Syslog-ng format'),
    '#default_value' => variable_get('syslog_ng_format', DEFAULT_SYSLOG_NG_FORMAT),
    '#description'   => t('Specify the format of the syslog entry. Available variables are: <dl><dt><code>!base_url</code></dt><dd>Base URL of the site.</dd><dt><code>!timestamp</code></dt><dd>Unix timestamp of the log entry.</dd><dt><code>!type</code></dt><dd>The category to which this message belongs.</dd><dt><code>!ip</code></dt><dd>IP address of the user triggering the message.</dd><dt><code>!request_uri</code></dt><dd>The requested URI.</dd><dt><code>!referer</code></dt><dd>HTTP Referer if available.</dd><dt><code>!uid</code></dt><dd>User ID.</dd><dt><code>!link</code></dt><dd>A link to associate with the message.</dd><dt><code>!message</code></dt><dd>The message to store in the log.</dd></dl>'),
  );


	$form['syslog_ng_ident'] = array(
	'#type' => 'textfield',
	'#title' => t('Syslog-ng Ident (program name)'),
	'#description' => t('This setting will allow you to funnel all watchdog messages to a log file of your choice'),
	'#default_value' => variable_get('syslog_ng_ident', DEFAULT_SYSLOG_NG_IDENT),
	);

	$form = system_settings_form($form);

	$ident = variable_get('syslog_ng_ident', '');
	$config = syslog_ng_get_config($ident);
	$form['html'] = array(
		'#markup' => $config, 
	); 

	return $form; 
}

 /**
 * Lists all possible syslog facilities for UNIX/Linux.
 *
 * @return array
 */
function syslog_ng_facility_list() {
  return array(
    LOG_LOCAL0 => 'LOG_LOCAL0',
    LOG_LOCAL1 => 'LOG_LOCAL1',
    LOG_LOCAL2 => 'LOG_LOCAL2',
    LOG_LOCAL3 => 'LOG_LOCAL3',
    LOG_LOCAL4 => 'LOG_LOCAL4',
    LOG_LOCAL5 => 'LOG_LOCAL5',
    LOG_LOCAL6 => 'LOG_LOCAL6',
    LOG_LOCAL7 => 'LOG_LOCAL7',
  );
}

/**
 * Generate configuration file snippets for /etc/syslog-ng.conf.  These are displayed in the settings form. 
 * @param unknown_type $ident the syslog-ng identificatoin string.
 */
function syslog_ng_get_config($ident){
	$config = '';
	if(!$ident){
		$ident = "<b>YOUR SYSLOG IDENTITY GOES HERE</b>";
	}

	$config .= '<p><h2>The code below will change after you save this form</h2><b>Please add the following config code to /etc/syslog-ng/syslog-ng.conf</b></p>';

	$config .= '<p><b>Place the code below at the top of the config file, make sure that it only appears once in the file.  Your installation of syslog-ng may have set some of these options already, in which case skip or edit them as appropriate.</b></p>';

	$config .= '
	<pre>
	options { 
		sync (0);
		time_reopen (10);
		log_fifo_size (1000);
		long_hostnames (off);
		use_dns (no);
		use_fqdn (no);
		create_dirs (yes);
		keep_hostname (yes);
	};
	</pre>';

	$config .= '<p><b>Place the code below at the bottom of the syslog-ng.conf file. You can optionally change the log file path.   You may have to adjust the <em>source(s_sys)</em> parameter to use the correct source name defined near the top of your /etc/syslog-ng.conf.  For Debian Linux it should be: source(s_src).</b></p>';

	$config .= '
	<pre>
	destination d_watchdog {
		file("/var/log/drupal/watchdog.$YEAR$MONTH$DAY");
	};

	filter f_watchdog { 
		program("'.$ident.'"); 
	};

	log {
		source(s_sys);
		filter(f_watchdog);
		destination(d_watchdog);
	};
	</pre>
	';

	$config .= '<p><b>When you are finished, remember to restart syslog-ng with <em>/etc/init.d/syslog-ng restart</em>.  </b></p>';

	return $config;
}

/**
 * Implementation of hook_watchdog().
 */
function syslog_ng_watchdog($log_entry){
  global $base_url;

  $enabled = variable_get("syslog_ng_enabled", DEFAULT_SYSLOG_NG_ENABLED);
	if ($enabled) {
    $message = strtr(variable_get('syslog_ng_format', DEFAULT_SYSLOG_NG_FORMAT), array(
      '!base_url'    => $base_url,
      '!timestamp'   => $log_entry['timestamp'],
      '!type'        => $log_entry['type'],
      '!ip'          => $log_entry['ip'],
      '!request_uri' => $log_entry['request_uri'],
      '!referer'     => $log_entry['referer'],
      '!uid'         => $log_entry['uid'],
      '!link'        => strip_tags($log_entry['link']),
      '!message'     => strip_tags(!isset($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables'])),
      ));

    $log_init = &drupal_static(__FUNCTION__, FALSE);
    if (!$log_init) {
      $log_init = TRUE;
      openlog(variable_get('syslog_ng_ident', DEFAULT_SYSLOG_NG_IDENT), LOG_NDELAY, variable_get('syslog_facility', DEFAULT_SYSLOG_NG_FACILITY));
    }
    syslog($log_entry['severity'], $message);
  }
}
