<?php
/**
 * @file
 *  Social connect module.
 */

/**
 * Implements hook_menu().
 */
function social_connect_menu() {
  $items = array();

  $items['admin/config/people/social_connect'] = array(
    'title' => 'Social Connect',
    'description' => 'Configure the settings for Social Connect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_connect_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'social_connect.admin.inc',
  );

  $items['admin/config/people/social_connect/settings'] = array(
    'title' => 'Social Connect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_connect_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'social_connect.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/people/social_connect/mapping'] = array(
    'title' => 'Field mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_connect_settings_mapping_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'social_connect.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/people/social_connect/mapping/add'] = array(
    'title' => 'Add field map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_connect_settings_mapping_field_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'social_connect.admin.inc',
  );

  $items['admin/config/people/social_connect/mapping/edit'] = array(
    'title' => 'Edit field map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_connect_settings_mapping_field_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'social_connect.admin.inc',
  );

  $items['admin/config/people/social_connect/mapping/delete'] = array(
    'title' => 'Delete field map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_connect_settings_mapping_field_delete'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'social_connect.admin.inc',
  );

  $items['social_connect'] = array(
    'page callback' => 'social_connect_callback',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['hyves_hrpc_relay'] = array(
    'page callback' => 'social_connect_hrpc_relay',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Impletements hook_form_alter().
 */
function social_connect_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      if (isset($_SESSION['social_connect'])) {
        // Found user account.
        $form = drupal_get_form('_social_connect_ask_form');
      }
      elseif ($config = _social_connect_get_config()) {
       // Create contaner for social login with buttons.
       $form['social'] = array(
          '#type' => 'container',
          '#title' => '',
          '#weight' => 10,
          '#prefix' => '<div id="social_connect">',
          '#suffix' => '</div>',
        );
       $module_path = drupal_get_path('module', 'social_connect');
       drupal_add_js($module_path . '/social_connect.js');

       // Creates Hyves login button.
       if (isset($config['hyves'])) {
          $form['social']['hyves'] = array(
            '#type' => 'item',
            '#suffix' => '<div id="HyvesLoginDiv"></div>',
          );
          if ($config['hyves']['button_image_enable']) {
            $file = file_load($config['hyves']['button_image_file']);
            $file = file_create_url($file->uri);
          }
          else {
            $file = '';
          }
          drupal_add_js('http://www.hyves.nl/precompiled/hyvesconnect.js', 'external');
          drupal_add_js('jQuery(document).ready(function () {HyvesConnect("' . $config['hyves']['app_key'] . '", "' . $file . '", "' . $module_path . '");});', 'inline');
        }

       // Creates Facebook login button.
       if (isset($config['facebook'])) {
          $perms = "user_about_me,user_birthday,user_hometown,user_location,user_religion_politics,user_website,email";
          $size = (isset($config['facebook']['button_size']))?$config['facebook']['button_size']:'medium';
          $text = (isset($config['facebook']['button_text']))?$config['facebook']['button_text']:'';
          $form['social']['facebook'] = array(
            '#type' => 'item',
             '#suffix' => '<div id="FacebookLoginDiv">
                <fb:login-button onlogin="FacebookConnect(\'' . $config['facebook']['app_key'] . '\', \'' . 'login' . '\', \'' . $module_path . '\')" size="' . $size . '" perms="' . $perms . '">' . $text . '</fb:login-button>
              </div>',
          );

          drupal_add_js('http://connect.facebook.net/en_US/all.js', 'external');
          drupal_add_js('jQuery(document).ready(function () {FacebookConnect("' . $config['facebook']['app_key'] . '", "", "' . $module_path . '");});', 'inline');
        }
      }
      break;
  }
}

/**
 * Impletements hook_form_FORM_ID_alter().
 */
function social_connect_form_field_ui_field_delete_form_alter(&$form, $form_state) {
  if (isset($form['entity_type']['#value']) && isset($form['bundle']['#value']) && $form['entity_type']['#value'] == 'user' && $form['bundle']['#value'] == 'user') {
    $form['description']['#markup'] .= t('<BR />If you have any <em>Social Connect</em> field mapping for this field, it will be lost too.');
  }
}

/**
 * Impletements hook_field_delete_instance().
 */
function social_connect_field_delete_instance($instance) {
  if (isset($instance['field_name']) && isset($instance['entity_type']) && isset($instance['bundle']) && $instance['entity_type'] == 'user' && $instance['bundle'] == 'user') {
    $num_deleted = db_delete('social_connect_field_mapping')
      ->condition('field_name', $instance['field_name'])
      ->execute();
    drupal_set_message(t('Social connect <em>@field</em> mapping for has been deleted. Deleted <em>@num</em> records', array('@field' => $instance['label'], '@num' => $num_deleted)));
  }
}

/**
 * Callback function for login with Hyves or Facebook.
 */
function social_connect_callback() {
  // Try to get current config.
  if (!$config = _social_connect_get_config()) {
    return;
  }

  if (!isset($_REQUEST['user_info']) || !is_array($_REQUEST['user_info'])) {
      drupal_set_message(t('No post data in Social Connect callback'), 'error');
      return;
  }
  $user_info = $_REQUEST['user_info'];
  // Clear userinfo from not valid keys.
  foreach ($user_info as $key => $value) {
    if ($value == '' || $value == 'null' || $value == 'undefined') {
      unset($user_info[$key]);
    }
  }
  if (!isset($user_info['email']) || !isset($user_info['username']) || !isset($user_info['source'])) {
    drupal_set_message(t('Can`t login with @source account (no email or username presented in response)', array('@source' => $user_info['source'])), 'error');
    return;
  }
  $source = $user_info['source'];
  $username = ($source == 'facebook')?$user_info['email']:$user_info['username'];
  $mapping = _social_connect_get_field_map();
  // Check if user exist (email or username).
  if (!$uid = db_select('users')->fields('users', array('uid'))->condition('mail', db_like($user_info['email']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    foreach ($mapping as $map) {
      if (strtolower($map->source) == $source && $map->shortname == 'username') {
        if ($uid = db_select('field_data_' . $map->field_name)->fields('field_data_' . $map->field_name, array('entity_id'))->condition($map->field_name . '_value', db_like($user_info['username']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
          break;
        }
      }
    }
  }

  if ($uid == '') {
    // Before creating new user we need to check if username already exists.
    if (_social_connect_check_user($username)) {
      // Found username. Reload page with new session parameter.
      $_SESSION['social_connect']['user_exists'] = array(
        'uid' => $account->uid,
        'user_info' => $user_info,
      );
      drupal_json_output(array('destination' => 'reload'));
      return;
    }
    // New user.
    $account = _social_connect_create_user($username , $user_info['email']);
    if (!$account) {
      drupal_set_message(t("Error saving user account."), 'error');
      drupal_json_output(array('destination' => 'reload'));
    }
    else {
      // Check if authmap exist. If not - create it.
      $authmaps = user_get_authmaps($user_info['username']);
      if ($authmaps == 0 || !isset($authmaps['social_' . $source])) {
        user_set_authmaps($account, array("authname_social_" . $source => $user_info['username']));
      }
    }
  }
  else {
    // User exist.
    $account = user_load($uid);
    if (!$account) {
      drupal_set_message(t("Error saving user account."), 'error');
      drupal_json_output(array('destination' => 'reload'));
      return;
    }
    // Check if authmap exist. if not - create it.
    $authmaps = user_get_authmaps($user_info['username']);
    if ($authmaps == 0 || !isset($authmaps['social_' . $source])) {
      if (isset($config[$source]['account_actions'])) {
        switch ($config[$source]['account_actions']) {
          case 'merge':
            break;
          case 'create':
            // Before creating new user we need to check if username already exists.
            if (_social_connect_check_user($username)) {
              // Found username. Reload page with new session parameter.
              $_SESSION['social_connect']['user_exists'] = array(
                'uid' => $account->uid,
                'user_info' => $user_info,
              );
              drupal_json_output(array('destination' => 'reload'));
              return;
            }
            else {
              // Change old account.
              db_update('users')
                ->fields(array(
                  'mail' => $account->mail . '_broken',
                  'init' => $account->init . '_broken',
                ))
                ->condition('uid', $account->uid)
                ->execute();
            }
            // New user.
            $account = _social_connect_create_user($username, $user_info['email']);
            break;
          case 'ask':
            $_SESSION['social_connect']['ask'] = array(
              'uid' => $account->uid,
              'user_info' => $user_info,
            );
            drupal_json_output(array('destination' => 'reload'));
            return;
            break;
        }
      }
      user_set_authmaps($account, array("authname_social_" . $source => $user_info['username']));
    }
  }

  // Add information to user account using field mapping.
  _social_connect_update_user($account, $user_info);

  user_external_login_register($user_info['username'], 'social_' . $source);
  $headers = drupal_get_http_header();
  if(empty($headers)) {
    drupal_json_output(array('destination' => 'reload'));
  }
}

/*
 * Callback function for Hyves old browser support (hrpc_relay).
 */
function social_connect_hrpc_relay() {
  echo "<script>
    var u = location.href, h = u.substr(u.indexOf('#') + 1).split('&'), t, r;
    try {
        var f = h.shift();
        t = f === '..' ? parent.parent : parent.frames[f];
        r = t.Hyves.connect.rpc.receive;
        r && r(f, h.shift(), h);
    } catch (e) {
    }
    </script>";
  return;
}

/**
 * Helper function.
 * Return current module config or false if nothing configured.
 */
function _social_connect_get_config() {
  static $config;
  $social_enable = variable_get('social_enable', array('hyves' => FALSE, 'facebook' => FALSE));
  foreach ($social_enable as $key => $value) {
    if ($value) {
      $social_config = variable_get('social_' . $key . '_config', array());
      if ($social_config['app_key'] && $social_config['app_key_secret'])
        $config[$key] = $social_config;
    }
    else {
      if (isset($config[$key])) {
        unset($config[$key]);
      }
    }
  }

  if (!empty($config)) {
    return $config;
  }
  return FALSE;
}

/**
 * Helper function.
 * Return field names.
 */
function _social_connect_get_source_fields() {
  $fields = db_select('social_connect_fields', 's')
    ->fields('s', array('fid', 'constant', 'shortname', 'name', 'source'))
    ->orderBy('source')
    ->orderBy('name')
    ->execute()
    ->fetchAllAssoc('fid');
  return $fields;
}

/**
 * Helper function.
 * Check is username exists.
 */
function _social_connect_check_user($username) {
  if (!empty($username) && $uid = db_select('users')->fields('users', array('uid'))->condition('name', db_like($username), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    return $uid;
  }
  return FALSE;
}

/**
 * Helper function.
 * Create new user.
 */
function _social_connect_create_user($name, $email) {
  $new_user = array(
    'name' => $name,
    'pass' => user_password(),
    'init' => $name,
    'mail' => $email,
    'status' => 1,
    'access' => REQUEST_TIME,
  );
  $account = user_save(drupal_anonymous_user(), $new_user);

  // Email notification.
  if (!isset($account->status)) {
    return FALSE;
  }

  if ($account->status) {
    _user_mail_notify('register_no_approval_required', $account);
  }
  else {
    _user_mail_notify('register_pending_approval', $account);
  }

  return $account;
}

/**
 * Helper function.
 * Update new user.
 */
function _social_connect_update_user($account, $user_info) {
  $config = _social_connect_get_config();
  $mapping = _social_connect_get_field_map();
  $source = $user_info['source'];
  $edit = array();
  foreach ($mapping as $map) {
    $map_field_name = $map->field_name;
    if (strtolower($map->source) == $source && isset($user_info[$map->shortname]) && ($map->override || empty($account->$map_field_name))) {
      $edit[$map->field_name][LANGUAGE_NONE][0]['value'] = $user_info[$map->shortname];
    }
  }

  if (isset($user_info['profilepicture']) && $config[$source]['profile_picture']) {
    if ($config[$source]['profile_picture_override'] || !isset($account->picture) || empty($account->picture)) {
      if ($picture = file_save_data(file_get_contents($user_info['profilepicture']))) {
        $edit['picture'] = $picture;
      }
    }
  }

  if (isset($user_info['timezone'])) {
    $offset = $user_info['timezone']*3600;
    // Gets daylight savings.
    $dst = date("I");
    $edit['timezone'] = timezone_name_from_abbr("", $offset, $dst);
  }

  // If module "domain" enabled we will add current domain to current user.
  if (module_exists('domain')) {
    $current_domain = domain_get_domain();
    if (isset($current_domain['domain_id'])) {
      $domain_id = ($current_domain['domain_id'] == 0)?"-1":$current_domain['domain_id'];
      if (!isset($account->domain_user[$domain_id])) {
        $edit['domain_user'][$domain_id] = $domain_id;
      }
    }
  }

  if (count($edit) > 0) {
    $account = user_save($account, $edit);
  }

  return $account;
}

/**
 * Helper function.
 * Return "ask form".
 */
function _social_connect_ask_form() {
  $form = array();
  if (isset($_SESSION['social_connect']['user_exists'])) {
    $account = user_load($_SESSION['social_connect']['user_exists']['uid']);
    $user_info = $_SESSION['social_connect']['user_exists']['user_info'];
    if ($account && $user_info) {
      $source = $user_info['source'];
      $username = ($source == 'facebook')?$user_info['email']:$user_info['username'];

      $form['#account'] = $account;
      $form['#user_info'] = $user_info;

      if (!$_REQUEST) {
        form_set_error('name', t('Username <em>@name</em> already exists.' , array('@name' => $username)));
      }

      $form['name'] = array(
        '#type' => 'textfield',
        '#title' => 'Username',
        '#default_value' => $username,
        '#maxlength' => 60,
        '#size' => 25,
        '#required' => 1,
      );

    }
  }
  if (isset($_SESSION['social_connect']['ask'])) {
    $sc_ask = $_SESSION['social_connect']['ask'];
    $account = user_load($sc_ask['uid']);
    if ($account && $sc_ask['user_info']) {

      $form['#account'] = $account;
      $form['#user_info'] = $sc_ask['user_info'];

      $form['markup'] = array(
        '#markup' => t('The account with mail <em>@mail</em> already exists.' , array('@mail' => $account->mail)),
      );

      $form['merge'] = array(
        '#type' => 'checkbox',
        '#title' => t('Do you wish to merge it?'),
        '#description' => t('If you don`t want to merge it will create new account.'),
        '#weight' => 10,
      );

      $form['pass'] = array(
        '#type' => 'password',
        '#title' => t('Password'),
        '#maxlength' => 60,
        '#size' => 25,
        '#weight' => 15,
        '#description' => t('Please, verify account: @account.' , array('@account' => $account->name)),
        '#states' => array(
          'visible' => array(
            'input[name="merge"]' => array('checked' => TRUE),
          ),
        ),
      );
    }
  }
  if (count($form) > 0) {
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm'),
    );
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
    );

    $form['#validate'][] = '_social_connect_ask_form_validate';
    $form['#submit'][] = '_social_connect_ask_form_submit';
  }
  else {
    drupal_set_message(t('Internal error. Please contact site administrator.'), 'error');
    if (isset($_SESSION['social_connect'])) {
      unset($_SESSION['social_connect']);
      drupal_goto();
    }
  }
  return $form;
}

/**
 * User account and profile editing forms validation.
 */
function _social_connect_ask_form_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Confirm') && isset($form['#account'])) {
    if (isset($form_state['values']['merge']) && $form_state['values']['merge']) {
      require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
      if (!user_check_password($form_state['values']['pass'], $form['#account'])) {
        form_set_error('pass', t('The password you entered is incorrect. Please try again.'));
      }
    }

    if (isset($form_state['values']['name'])) {
      if (_social_connect_check_user($form_state['values']['name'])) {
        form_set_error('name', t('Username <em>@name</em> already exists.' , array('@name' => $form_state['values']['name'])));
      }
    }
  }
}

/**
 * User account and profile editing form submit.
 */
function _social_connect_ask_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Confirm') && isset($form['#user_info']) && isset($form['#account'])) {
    $create_new = TRUE;
    $user_info = $form['#user_info'];
    $username = ($user_info['source'] == 'facebook')?$user_info['email']:$user_info['username'];
    if (isset($form['#account'])) {
      $account = $form['#account'];
    }

    // If "ask" user what to do with account.
    if (isset($form_state['values']['merge'])) {
      if ($form_state['values']['merge']) {
        $create_new = FALSE;
      }
      elseif (_social_connect_check_user($username)) {
        if (isset($_SESSION['social_connect'])) {
          unset($_SESSION['social_connect']);
        }
        // Found username. Reload page with new session parameter.
        $_SESSION['social_connect']['user_exists'] = array(
          'uid' => $account->uid,
          'user_info' => $user_info,
        );
        return;
      }
    }


    if (isset($form_state['values']['name'])) {
      $username = $form_state['values']['name'];
    }

    if ($create_new) {
      // Change old account.
      db_update('users')
        ->fields(array(
          'mail' => $account->mail . '_broken',
          'init' => $account->init . '_broken',
        ))
        ->condition('uid', $account->uid)
        ->execute();
      // New user.
      $account = _social_connect_create_user($username, $user_info['email']);
    }

    if (!$account) {
      drupal_set_message(t('Internal error. Please contact site administrator.'), 'error');
      if (isset($_SESSION['social_connect'])) {
        unset($_SESSION['social_connect']);
      }
      return;
    }
    // Add information to user account using field mapping.
    _social_connect_update_user($account, $user_info);
    // Delete temporary data.
    if (isset($_SESSION['social_connect'])) {
      unset($_SESSION['social_connect']);
    }
    user_set_authmaps($account, array("authname_social_" . $user_info['source'] => $user_info['username']));
    user_external_login_register($user_info['username'], 'social_' . $user_info['source']);
  }
  elseif ($form_state['values']['op'] == t('Cancel')) {
    if (isset($_SESSION['social_connect'])) {
      unset($_SESSION['social_connect']);
    }
  }
}

/**
 * Helper function.
 * Return field mapping.
 */
function _social_connect_get_field_map($fmid = NULL) {
  $query = db_select('social_connect_field_mapping', 'fm')
        ->fields('fm');
  if (isset($fmid) && !is_null($fmid)) {
    $query->condition('fmid', $fmid);
  }
  $query->leftJoin('social_connect_fields', 'f', 'fm.fid = f.fid', array());
  $query->addField('f', 'constant');
  $query->addField('f', 'shortname');
  $query->addField('f', 'name');
  $query->addField('f', 'source');
  $query->orderBy('fm.weight');
  $query->orderBy('fm.field_name');
  $query->orderBy('f.name');
  $result = $query->execute()
                  ->fetchAllAssoc('fmid');
  return $result;
}

/**
 * Implements hook_theme().
 */
function social_connect_theme() {
  return array(
    'social_connect_settings_mapping_form' => array(
      'render element' => 'form',
    ),
  );
}