<?php

// ADMIN

/*
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_profile2_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {

    $profile_types = profile2_get_types();
    if ($profile_types) {
      // Container
      $form['comment_registration']['profile2_container'] = array(
        '#type' => 'container',
        '#states' => array(
          'visible' => array(
            array(':input[name="comment_registration_enabled"]' => array('checked' => TRUE)),
          ),
        ),
      );
      // Choose a Profile2 to show on registration
      $options = array('_none' => "None");
      foreach ($profile_types as $type_name => $profile_type) {
        $options[$profile_type->type] = $profile_type->label;
      }
      $form['comment_registration']['profile2_container']['comment_registration_profile2_type'] = array(
        '#type' => 'radios',
        '#title' => t('Comment Registration Profile'),
        '#default_value' => variable_get('comment_registration_profile2_type_' . $form['#node_type']->type, '_none'),
        '#description' => t('<p>The profile2 to include in comment registrations for this content type.</p>' .
                            '<p><em>Template Tip: $profile can be used in comment.tpl.php and comment-wrapper.tpl.php</em></p>'),
        '#options' => $options,
        '#weight' => 1,
      );
    }
    system_settings_form($form);
  }
}

// FRONT END

/*
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_profile2_form_comment_form_alter(&$form, &$form_state, $form_id) {

  // Do not proceed if:
  // - user authenticated
  // - account creation is set to admin only
  // - anonymus commenters can't leave contact info
  // - commment registration is not enabled for this content type
  global $user;
  if ($user->uid > 0 ||
      variable_get('comment_registration_enabled_' . $form['#node']->type, 0) == 0 ||
      variable_get('user_register', USER_REGISTER_ADMINISTRATORS_ONLY) == USER_REGISTER_ADMINISTRATORS_ONLY ||
      variable_get('comment_anonymous_' . $form['#node']->type, COMMENT_ANONYMOUS_MAYNOT_CONTACT) == COMMENT_ANONYMOUS_MAYNOT_CONTACT) {
    return;
  }

  // Config variables
  $type_name = variable_get('comment_registration_profile2_type_' . $form['#node']->type, '_none');

  // Include profile2 on comment registration form
  if (!empty($type_name) && $type_name != '_none') {
    if (empty($form_state['profiles'][$type_name])) {
      $form_state['profiles'][$type_name] = profile2_create(array('type' => $type_name));
    }
    // attach the profile fields via profile2
    profile2_attach_form($form, $form_state);
  }
  $form['profile_' . $type_name]['#states'] = array(
    'visible' => array(
      array(':input[name="comment_registration_register"]' => array('checked' => TRUE)),
    ),
  );

  // Wrap profile2 inside in a fieldset.
  $form['profile_' . $type_name] += array(
    '#type' => 'fieldset',
    '#states' => array(
      'visible' => array(
        array(':input[name="comment_registration_register"]' => array('checked' => TRUE)),
      ),
    ),
  );
}

/*
 * Add $profile of comment author to comment.tpl.php
 */
function comment_registration_profile2_preprocess_comment(&$vars) {
  $vars['profile'] = NULL;
  if ($vars['comment']->u_uid != 0) {
    $profile_type = variable_get('comment_registration_profile2_type_' . $vars['node']->type);
    if (isset($profile_type)) {
      $profile = profile2_load_by_user($vars['comment']->u_uid, $profile_type);
      $vars['profile'] = $profile;
    }
  }
}

/*
 * Add $profile of current user to comment-wrapper.tpl.php
 */
function comment_registration_profile2_preprocess_comment_wrapper(&$vars) {
  $profile_type = variable_get('comment_registration_profile2_type_' . $vars['node']->type);
  if (isset($profile_type)) {
    $profile = profile2_load_by_user($vars['user'], $profile_type);
    $vars['profile'] = $profile;
  }
}
