<?php
/**
 * @file
 * Module file for Tweetable Text.
 */

/**
 * A magic string which will be replaced with the content URL.
 */
define('TWEETABLE_TEXT_REFERER_URL', '--TWEETABLE_TEXT_REFERER_URL--');

/**
 * A magic string which will be replaced with the shortened content URL.
 */
define('TWEETABLE_TEXT_LINK_URL', '--TWEETABLE_TEXT_LINK_URL--');

/**
 * Implements hook_init().
 */
function tweetable_text_init() {
  // TODO: there has to be a better way to do this! We need to have these
  // libraries loaded when editing something with this plugin, but I don't
  // know how to detect that.
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.button');
}

/**
 * Implements hook_filter_info().
 */
function tweetable_text_filter_info() {
  $filters = array();
  $filters['tweetable_text'] = array(
    'title' => t('Mark specific phrases or sentences for one-click tweeting (via <code>[tweetable]</code>text<code>[/tweetable]</code>).'),
    'process callback' => '_tweetable_text_process',
    'tips callback' => '_tweetable_text_tips',
  );
  return $filters;
}

/**
 * Process callback for the 'tweetable_text' filter.
 */
function _tweetable_text_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  return tweetable_text_replace($text);
}

/**
 * Tips callback for the 'tweetable_text' filter.
 */
function _tweetable_text_tips($filter, $format, $long) {
  $short = t('<code>[tweetable]</code>my phrase<code>[/tweetable]</code>');

  if ($long) {
    return t('Mark specific phrases for one-click tweeting with !short. You can also use the optional <em>alt</em> attribute to set alternate tweet text (for example: <code>[tweetable alt="This is the actual tweet text"]</code>some other text<code>[/tweetable]</code> or the <em>hashtag</em> attribute to append hashtags (for example: <code>[tweetable hashtag="#journalism #publicmedia"]</code>my phrase<code>[/tweetable]</code>.', array('!short' => $short));
  }
  else {
    return $short;
  }
}

/**
 * Replace all special [tweetable]text[/tweetable] codes with real HTML.
 */
function tweetable_text_replace($text, $content_url = TWEETABLE_TEXT_REFERER_URL) {
  $text = preg_replace_callback('/"([^"]*)"/', '_tweetable_text_escape_brackets', $text);
  $text = preg_replace_callback('/\[tweetable([^\]]*)\](.*?)\[\/tweetable\]/', function ($matches) use ($content_url) {
    return _tweetable_text_replace($matches, $content_url);
  }, $text);
  return $text;
}

/**
 * Replace callback to escape left/right brackets with HTML entities.
 *
 * Our regex for parsing the tweetable psuedo-tag depends on the first right
 * bracket closing the tag, whereas there may be brackets inside the alt="..."
 * attribute. So, we replace them with the HTML entity.
 */
function _tweetable_text_escape_brackets($matches) {
  $text = $matches[1];
  return '"' . str_replace(array('[', ']'), array('&#91;', '&#93'), $text) . '"';
}

/**
 * Replace callback for replacing one instance of [tweetable]text[/tweetable].
 */
function _tweetable_text_replace($matches, $content_url) {
  $vars = tweetable_text_parse_attributes($matches[1]);
  $vars['text'] = $matches[2];
  $vars['content_url'] = $content_url;

  return theme('tweetable_text', $vars);
}

/**
 * Parse the attributes to the tweetable psuedo-tag.
 *
 * @param string $text
 *   The text containing the attribute portion of the psuedo-tag.
 *
 * @return array
 *   An associative array of attributes.
 */
function tweetable_text_parse_attributes($text) {
  $attrs = array();
  if (preg_match_all('/(\S+)\s*=\s*"([^"]*)"/', $text, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match) {
      list ($full, $name, $value) = $match;
      $name = str_replace('-', '_', $name);
      $attrs[$name] = html_entity_decode($value);
    }
  }
  return $attrs;
}

/**
 * Implements hook_theme().
 */
function tweetable_text_theme() {
  return array(
    'tweetable_text' => array(
      'variables' => array(
        'url' => NULL,
        'text' => NULL,
        'alt' => NULL,
        'hashtag' => NULL,
      ),
      'template' => 'tweetable-text',
    ),
  );
}

/**
 * Internal function that shortens a URL if possible.
 */
function _tweetable_text_shorten($url) {
  // Bail early if the 'shorten' module isn't present.
  if (!module_exists('shorten')) {
    return $url;
  }

  // Cache URLs so we can call this naively often.
  $cache = drupal_static(__FUNCTION__, array());
  if (isset($cache[$url])) {
    return $cache[$url];
  }

  $short_url = shorten_url($url);
  if (strpos($short_url, 'http://') !== 0 && strpos($short_url, 'https://') !== 0) {
    $short_url = 'http://' . $short_url;
  }

  $cache[$url] = $short_url;

  return $short_url;
}

/**
 * Encode a data placeholder in base64url.
 */
function _tweetable_text_encode($data) {
  return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
}

/**
 * Decode a data placeholder from base64url.
 */
function _tweetable_text_decode($data) {
  return base64_decode(str_pad(strtr($data, '-_', '+/'), strlen($data) % 4, '=', STR_PAD_RIGHT));
}

/**
 * Preprocess hook for 'tweetable_text' theme function.
 */
function template_preprocess_tweetable_text(&$vars) {
  if (!empty($vars['url_query'])) {
    if (substr($vars['url_query'], 0, 1) != '?') {
      $vars['url_query'] = '?' . $vars['url_query'];
    }
  }
  else {
    $vars['url_query'] = '';
  }

  $link = $vars['content_url'] = !empty($vars['url']) ? $vars['url'] : TWEETABLE_TEXT_REFERER_URL;
  if ($link != TWEETABLE_TEXT_REFERER_URL) {
    if (!empty($vars['url_query'])) {
      $link .= $vars['url_query'];
    }
    $link = _tweetable_text_shorten($link);
  }
  else {
    $link = TWEETABLE_TEXT_LINK_URL;
    if (!empty($vars['url_query'])) {
      $link .= _tweetable_text_encode($vars['url_query']);
    }
  }
  $vars['short_url'] = $link;
  
  // Make the tweet URL
  $tweet = check_plain(!empty($vars['alt']) ? $vars['alt'] : $vars['text']);
  if (!empty($vars['hashtag'])) {
    $tweet .= ' ' . $vars['hashtag'];
  }
  $vars['tweet_url'] = url('https://twitter.com/intent/tweet', array(
    'query' => array(
      'original_referer' => $vars['content_url'],
      'url' => $vars['short_url'],
      'source' => 'tweetbutton',
      'text' => $tweet,
    ),
  ));

  // Add the Twitter icon.
  if (module_exists('icon') && module_exists('fontawesome')) {
    $icon = array(
      '#theme' => 'icon',
      '#bundle' => 'fontawesome',
      '#icon' => 'twitter',
      '#attributes' => array(
        'class' => array('tweetable-text-icon'),
      ),
    );
    $vars['icon'] = drupal_render($icon);
  }
  else {
    $vars['icon'] = '';
  }
}

/**
 * Checks if this text format has the tweetable_text filter on it.
 *
 * @param string $format
 *   The name of the text format.
 *
 * @return boolean
 *   Returns TRUE if this text format has the tweetable_text filter;
 *   otherwise FALSE.
 */
function tweetable_text_format_has_filter($format) {
  $filters = filter_list_format($format);
  return isset($filters['tweetable_text']);
}

/**
 * Replaces the temporary URL placeholders with the real URLs.
 */
function tweetable_text_replace_placeholders(&$text, $full_url) {
  // Replace the TWEETABLE_TEXT_*_CONTENT_URLs placeholder with the real value.
  $text = str_replace(TWEETABLE_TEXT_REFERER_URL, urlencode($full_url), $text);
  $text = preg_replace_callback('/' . TWEETABLE_TEXT_LINK_URL . '([^&"\']*)/', function ($matches) use ($full_url) {
    if (!empty($matches[1])) {
      // If this link has custom URL query data, then we need to decode that
      // and append it to the full URL before decoding.
      $short_url = _tweetable_text_shorten($full_url . _tweetable_text_decode($matches[1]));
    }
    else {
      $short_url = _tweetable_text_shorten($full_url);
    }
    return urlencode($short_url);
  }, $text);
}

/**
 * Implements hook_node_view_alter().
 */
function tweetable_text_node_view_alter(&$build) {
  $node = $build['#node'];
  $field_instances = field_info_instances('node', $node->type);

  foreach ($field_instances as $field_name => $field_instance) {
    $field_info = field_info_field($field_name);
    
    if (in_array($field_info['type'], array('text_with_summary', 'text_long')) && !empty($field_instance['settings']['text_processing'])) {
      if (!empty($build[$field_name]['#items'][0]['format'])) {
        if (tweetable_text_format_has_filter($build[$field_name]['#items'][0]['format'])) {
          // Get the URL for the current peice of content.
          $full_url = url('node/' . $node->nid, array('absolute' => TRUE));
          tweetable_text_replace_placeholders($build[$field_name][0]['#markup'], $full_url);
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function tweetable_text_views_pre_render(&$view) {
  // TODO: Find fields that this should be applied to on the View in advance
  // and only deal with those (rather than everything).
  foreach ($view->result as $idx => $row) {
    if (!empty($row->nid)) {
      foreach ($row as $key => &$value) {
        if (is_array($value) && !empty($value[0]['rendered']['#markup'])) {
          $full_url = url('node/' . $row->nid, array('absolute' => TRUE));
          tweetable_text_replace_placeholders($value[0]['rendered']['#markup'], $full_url);
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function tweetable_text_views_post_render(&$view, &$output, &$cache) {
  tweetable_text_replace_placeholders($output, url($_GET['q'], array('absolute' => TRUE)));
}

/**
 * Implements hook_wysiwyg_include_directories().
 */
function tweetable_text_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      // You can just return $type, if you place your Wysiwyg plugins into a
      // sub-directory named 'plugins'.
      return 'wysiwyg';
  }
}
