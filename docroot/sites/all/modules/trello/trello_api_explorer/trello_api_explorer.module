<?php

/**
 * @file
 * Trello API Explorer module shows the developer useful information.
 */

/**
 * Implements hook_menu().
 */
function trello_api_explorer_menu() {
  $items = array();

  $items['trello/api-explorer'] = array(
    'title' => 'Trello API explorer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trello_api_explorer_form'),
    'access arguments' => array('access trello'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Download API Reference Table of Contents (toc).
 */
function trello_api_explorer_fetch_api_toc() {
  $trello_api_toc = &drupal_static(__FUNCTION__);
  // Load staticly for quickest response on multiple requests in a page.
  if (!empty($trello_api_toc)) {
    return $trello_api_toc;
  }

  // Load from cache.
  if ($cache = cache_get('trello_api_toc')) {
    $trello_api_toc = $cache->data;
    return $cache->data;
  }

  $toc = array();

  // Download the page.
  $request = drupal_http_request('https://trello.com/docs/api/', array('timeout' => 10));

  // Grab the TOC and make an array.
  $dom = new DOMDocument();
  $dom->loadHTML($request->data);

  $simple = simplexml_import_dom($dom);

  $xpath = $simple->xpath('//div[@id = "api-reference-beta"]/div/ul/li');
  foreach ($xpath as $section) {
    $toc[(string) $section->a] = array();
    foreach ($section->ul->li as $li) {
      $toc[(string) $section->a][(string) $li->a] = (string) $li->a['href'];
    }
  }

  // Set the cache and static variables.
  cache_set('trello_api_toc', $toc);
  $trello_api_toc = $toc;

  return $toc;
}


/**
 * Filter path options according to section.
 */
function trello_api_explorer_path_options($key = FALSE) {
  $toc = trello_api_explorer_fetch_api_toc();

  $options = array('');
  if ($key && array_key_exists($key, $toc)) {
    return array_merge($options, drupal_map_assoc(array_keys($toc[$key])));
  }
  foreach ($toc as $sec => $path) {
    $options[$sec] = drupal_map_assoc(array_keys($path));
  }
  return $options;
}

/**
 * AJAX callback for section.
 */
function trello_api_explorer_section_callback($form, &$form_state) {
  $section = $form_state['values']['section'];

  $path = $form['path'];
  $path['#options'] = trello_api_explorer_path_options($section);
  return $path;
}

/**
 * AJAX callback for path.
 */
function trello_api_explorer_path_callback($form, &$form_state) {
  $toc = trello_api_explorer_fetch_api_toc();

  $api_url = 'https://trello.com/docs/api/';
  $section = $form_state['values']['section'];
  $url = $form_state['values']['path'] ? $api_url . $toc[$section][$form_state['values']['path']] : $api_url;

  $fieldset = $form['arguments'];
  $fieldset['#description'] = t('API reference: <a href="!url">!url</a>.', array('!url' => check_url($url)));
  preg_match_all('%\[([^\]]+)\]%', $form_state['values']['path'], $matches);
  if (!empty($matches[1])) {
    foreach ($matches[1] as $k => $f) {
      $field = 'field' . $k;
      $fieldset[$field]['#title'] = check_plain($f);
      $fieldset[$field]['#states'] = array('visible' => TRUE);
    }
  }
  return $fieldset;
}


/**
 * Form to set API variables.
 *
 * See also: https://trello.com/docs/api/index.html
 */
function trello_api_explorer_form($form, &$form_state) {
  $form = array();
  $toc = trello_api_explorer_fetch_api_toc();

  $form['help'] = array(
    '#markup' => t('Select the path then fill out the fields according to the structure described in the documentation. The resulting object should appear above in the Krumo viewer.'),
  );
  $form['section'] = array(
    '#type' => 'select',
    '#title' => t('Section'),
    '#options' => drupal_map_assoc(array_keys($toc)),
    '#ajax' => array(
      'callback' => 'trello_api_explorer_section_callback',
      'wrapper' => 'path-replace',
    ),
  );
  $form['path'] = array(
    '#type' => 'select',
    '#title' => t('Path'),
    '#prefix' => '<div id="path-replace">',
    '#suffix' => '</div>',
    '#description' => t('Hint: a good place to start is /1/members/[idMember or username]/boards with the value "me".'),
    '#options' => trello_api_explorer_path_options(),
    '#ajax' => array(
      'callback' => 'trello_api_explorer_path_callback',
      'wrapper' => 'arguments-replace',
    ),
  );
  $url = 'https://trello.com/docs/api/';
  $form['arguments'] = array(
    '#type' => 'fieldset',
    '#title' => 'Arguments',
    '#description' => t('API reference: <a href="!url">!url</a>.', array('!url' => check_url($url))),
    '#prefix' => '<div id="arguments-replace">',
    '#suffix' => '</div>',
  );
  $form['arguments']['toggle'] = array(
    '#type' => 'hidden',
  );
  for ($i = 0; $i < 3; $i++) {
    $form['arguments']['field' . $i] = array(
      '#type' => 'textfield',
      '#states' => array(
        'visible' => array(':input[name="field1"]' => array('checked' => 0))),
    );
  }
  if (!empty($form_state['values']['path'])) {
    $form['arguments'] = trello_api_explorer_path_callback($form, $form_state);
  }
  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Query (Optional. See API reference.)'),
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Explore'),
  );

  return $form;
}

/**
 * Call the API with submitted values from the form.
 */
function trello_api_explorer_form_submit(&$form, &$form_state) {
  // Split out the path and the method.
  list ($method, $full_path) = explode(' ', $form_state['values']['path'], 2);
  // Find how many fields to use.
  preg_match_all('%\[([^\]]+)\]%', $full_path, $matches);
  // Replace with values and remove the leading '/1'.
  $search = array_merge(array('/1'), $matches[0]);
  $replace = array('');
  for ($i = 0; $i < count($search); $i++) {
    $replace[] = $form_state['values']['field' . $i];
  }
  $path = str_replace($search, $replace, $full_path);
  $query = $form_state['values']['query'];
  $trello = trello_api($path, $query, $method);

  // Show the results.
  dpm($trello, t('Trello JSON object'));

  // Show code examples.
  $code = array(
    '$t = new Trello();',
    sprintf('$t->%s(\'%s\'%s);', drupal_strtolower($method), $path, $query ? ", '$query'" : ''),
    'dpm($t->result[\'data\']);',
  );
  dpm("\n  " . implode("\n  ", $code), t('Object Oriented Example Code'));

  $code = array(
    sprintf('$result = trello_api(\'%s\'%s%s);',
      $path, $query ? ", '$query'" : '',
      $method != 'GET' ? ", '$method'" : ''),
    'dpm($result[\'data\']);',
  );
  dpm("\n  " . implode("\n  ", $code), t('Functional Example Code'));

  // Make it so the form prefill with the curent values.
  $form_state['rebuild'] = TRUE;
}
