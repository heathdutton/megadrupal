<?php

/**
 * @file
 * Integrates Trello module with Rules.
 */

/**
 * Implements hook_rules_action_info().
 */
function trello_rules_rules_action_info() {
  $actions['create_card'] = array(
    'label' => t('Create card'),
    'group' => t('Trello'),
    'base' => 'trello_rules_action_create_card',
    'access callback' => 'trello_rules_integration_access',
    'named parameter' => TRUE,
    'parameter' => array(
      'board' => array(
        'type' => 'text',
        'label' => t('Board'),
        'options list' => 'trello_rules_list_boards',
        'restriction' => 'input',
      ),
      'list' => array(
        'type' => 'text',
        'label' => t('List'),
        'options list' => 'trello_rules_action_list_lists',
        'restriction' => 'input',
      ),
      'title' => array(
        'type' => 'text',
        'label' => t('Title'),
        'restriction' => 'input',
      ),
      'checklist' => array(
        'type' => 'text',
        'label' => t('Add checklist to card'),
        'options list' => 'trello_rules_list_checklists',
        'restriction' => 'input',
        'optional' => TRUE,
        'allow null' => TRUE,
      ),
      'description' => array(
        'type' => 'text',
        'label' => t('Description'),
        'restriction' => 'input',
        'optional' => TRUE,
      ),
      'due_date' => array(
        'type' => 'date',
        'label' => t('Due date'),
        'optional' => TRUE,
      ),
    ),
    'callbacks' => array(
      'form_alter' => 'trello_rules_action_board_form_alter',
    ),
  );

  return $actions;
}

/**
 * Control access to Trello Rules actions.
 */
function trello_rules_integration_access() {
  if (user_access('access trello')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * List Trello boards for use in an options drop-down.
 */
function trello_rules_list_boards() {
  $boards = array();
  $t = trello_api(array('members' => 'me', 'boards'));
  foreach ($t['data'] as $board) {
    $boards[$board->id] = $board->name;
  }
  return $boards;
}

/**
 * List Trello lists for use in an options drop-down.
 */
function trello_rules_list_lists($board) {
  $lists = array();
  $t = trello_api(array('boards' => $board, 'lists'));
  foreach ($t['data'] as $list) {
    $lists[$list->id] = $list->name;
  }
  return $lists;
}

/**
 * List Trello lists for use in an options drop-down.
 */
function trello_rules_action_list_lists(RulesAction $action) {
  $lists = array();
  if (!empty($action->settings['board'])) {
    $board = $action->settings['board'];
    $t = trello_api(array('boards' => $board, 'lists'));
    foreach ($t['data'] as $list) {
      $lists[$list->id] = $list->name;
    }
  }
  return $lists;
}

/**
 * List Trello checklists for use in an options drop-down.
 */
function trello_rules_list_checklists(RulesAction $action) {
  $checklists = array();
  if (!empty($action->settings['board'])) {
    $checklists[] = '- ' . t('Select') . ' -';
    $board = $action->settings['board'];
    $t = trello_api(array('boards' => $board, 'checklists'));
    foreach ($t['data'] as $checklist) {
      $checklists[$checklist->id] = $checklist->name;
    }
  }
  return $checklists;
}

/**
 * Rules action: Create a trello card.
 */
function trello_rules_action_create_card($params, $element) {
  $args = array(
    'name' => $params['title'],
    'idList' => $params['list'],
  );
  if (!empty($params['description'])) {
    $args['desc'] = $params['description'];
  }
  if (!empty($params['due_date'])) {
    $args['due'] = date('m/d/Y', $params['due_date']);
  }

  // Use the object oriented version of the API.
  $trello = new Trello();
  $trello->post('cards', $args);

  // Checking if we should add a checklist to card.
  if (!empty($params['checklist'])) {
    // Get a result of previous query. If empty - do nothing  because we need
    // a card ID to add a checklist to it.
    if (!empty($trello->result['data'][0])) {
      $result = $trello->result['data'][0];
      // Do a request.
      $trello->post('checklists', array(
        // ID of card that we created before.
        'idCard' => $result->id,
        // We will copy this checklist here.
        'idChecklistSource' => $params['checklist'],
      ));
    }
  }
}

/**
 * Form alter callback for actions relying on the board id.
 */
function trello_rules_action_board_form_alter(&$form, &$form_state, $options, RulesAbstractPlugin $element) {
  $first_step = empty($element->settings['board']);
  $form['reload'] = array(
    '#weight' => 5,
    '#type' => 'submit',
    '#name' => 'reload',
    '#value' => $first_step ? t('Continue') : t('Reload form'),
    '#limit_validation_errors' => array(array('parameter', 'board')),
    '#submit' => array('trello_rules_action_form_submit_rebuild'),
    '#ajax' => rules_ui_form_default_ajax(),
  );
  // Use ajax and trigger as the reload button.
  $form['parameter']['board']['settings']['board']['#ajax'] = $form['reload']['#ajax'] + array(
    'event' => 'change',
    'trigger_as' => array('name' => 'reload'),
  );

  if ($first_step) {
    // In the first step show only the board select.
    foreach (element_children($form['parameter']) as $key) {
      if ($key != 'board') {
        unset($form['parameter'][$key]);
      }
    }
    unset($form['submit']);
    unset($form['provides']);
    // Disable #ajax for the first step as it has troubles with lazy-loaded JS.
    // @todo: Re-enable once JS lazy-loading is fixed in core.
    unset($form['parameter']['board']['settings']['board']['#ajax']);
    unset($form['reload']['#ajax']);
  }
  else {
    // Hide the reload button in case js is enabled and it's not the first step.
    $form['reload']['#attributes'] = array('class' => array('rules-hide-js'));
    $form['parameter']['board']['#disabled'] = TRUE;
    // Add a description for checklist param.
    $form['parameter']['checklist']['#description'] = t('Checklist <strong>copied</strong> from selected checklist will be created.');
  }
}

/**
 * FAPI submit callback for reloading the form.
 */
function trello_rules_action_form_submit_rebuild($form, &$form_state) {
  rules_form_submit_rebuild($form, $form_state);
}
