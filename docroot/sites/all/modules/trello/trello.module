<?php

/**
 * @file
 * Trello module.
 */

// The only version as of this writing. https://trello.com/docs/gettingstarted/
define('TRELLO_API_VERSION', 1);

include_once 'trello.inc';

/**
 * Implements hook_permission().
 */
function trello_permission() {
  return array(
    'administer trello' => array(
      'title' => t('Administer Trello module'),
      'description' => t('Perform administration tasks for trello.'),
    ),
    'access trello' => array(
      'title' => t('Access to Trello'),
      'description' => t('Authenticate your trello account with this site.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function trello_menu() {
  $items = array();

  $items['admin/config/services/trello'] = array(
    'title' => 'Trello',
    'description' => 'Configure Trello',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/services/trello/conf'] = array(
    'title' => 'Trello API Key',
    'description' => 'Configure your Trello API key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trello_config_form'),
    'access arguments' => array('administer trello'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'trello.admin.inc',
  );
  $items['trello/auth'] = array(
    'title' => 'Trello Authentication',
    'page callback' => 'trello_auth_page',
    'access arguments' => array('access trello'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Return the api key, secret, etc for forming url requests and so on.
 *
 * @param string $variable
 *   The conf variable to get
 *
 * This is currently a simple wrapper on variable_get but exists in case of
 * getting these variables from another source such as environment variables
 * in a drush context. Also considering storing tokens, scope, and expiration
 * in a user profile.
 */
function trello_get_conf($variable) {
  switch ($variable) {
    case 'key':
      return variable_get('trello_api_key');

    case 'secret':
      return variable_get('trello_api_secret');

    case 'name':
      // TODO: Should this be configurable?
      return variable_get('site_name');

    case 'expiration':
      return '1day';

    case 'token':
      return variable_get('trello_token');
  }
}

/**
 * Prepare a url for getting a Trello auth token.
 *
 * @param array $params
 *   (optional) array that override the query array
 *
 * @return string
 *   The auth url
 */
function trello_auth_url($params = FALSE) {
  $query = array(
    'key' => trello_get_conf('key'),
    'name' => trello_get_conf('name'),
    'expiration' => trello_get_conf('expiration'),
    'response_type' => 'token',
    'scope' => 'read,write',
    'return_url' => $GLOBALS['base_url'] . '/trello/auth',
  );
  if (is_array($params)) {
    // Override the default query array.
    foreach ($params as $k => $v) {
      $query[$k] = $v;
    }
  }
  return url(sprintf('https://api.trello.com/%s/authorize', TRELLO_API_VERSION),
    array('query' => $query, 'absolute' => TRUE, 'https' => TRUE)
  );
}

/**
 * Page callback for the Auth Page.
 *
 * See also trello docs: https://trello.com/docs/gettingstarted/authorize.html
 */
function trello_auth_page() {
  $page = '';
  if (isset($_GET['token'])) {
    $page .= t('Success! Your Trello token has been saved and you can now use the Trello modules.');
    variable_set('trello_token', $_GET['token']);
    return $page;
  }

  drupal_add_js(drupal_get_path('module', 'trello') . '/trello_auth.js');

  if (variable_get('trello_token', FALSE)) {
    $page .= t('Note: the system already has a Trello token saved. You may create a new one if you like.');
  }

  $page .= '<p>' . implode('<br />',
    array(
      l(t('Authorize for one day'), trello_auth_url(array('expiration' => '1day'))),
      l(t('Authorize for 30 days'), trello_auth_url(array('expiration' => '30days'))),
      l(t('Authorize forever'), trello_auth_url(array('expiration' => 'never'))),
    )
  ) . '</p>';

  return $page;
}
