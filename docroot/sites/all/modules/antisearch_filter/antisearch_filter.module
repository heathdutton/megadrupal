<?php

/**
 * @file
 * The module make marked words or phrases invisible for search enginges.
 */


/**
 * Implements hook_init().
 */
function antisearch_filter_init() {
  drupal_add_css(drupal_get_path('module', 'antisearch_filter') . '/antisearch_filter.css');
}

/**
 * Implements hook_filter_info().
 */
function antisearch_filter_filter_info() {
  $filters['filter_antisearch'] = array(
    'title' => t('Antisearch filter'),
    'description' => t('Hide text from search engines like Google. The filter adds random characters between the single characters of the text.'),
    'default settings' => array(
      'antisearch_filter_email' => TRUE,
      'antisearch_filter_strike' => TRUE,
      'antisearch_filter_bracket' => TRUE,
      'antisearch_filter_show_title' => TRUE,
    ),
    'process callback'  => '_antisearch_filter_process',
    'settings callback' => '_antisearch_filter_settings',
    'tips callback' => '_antisearch_filter_tips',
    'weight' => -99,
  );

  return $filters;
}

/**
 * Implements hook_filter_FILTER_process().
 *
 * Process callback for hook_filter_info().
 *
 * @see antisearch_filter_filter_info()
 */
function _antisearch_filter_process($text, $filter, $format) {
  // E-mail address.
  if ($filter->settings['antisearch_filter_email']) {
    $text = preg_replace("'<a.*mailto.*>(.*)</a>'Uis", '\\1', $text);
    $text = preg_replace_callback("`([A-Za-z0-9._-]+@[A-Za-z0-9._+-]+\.[A-Za-z]{2,4})`i", 'antisearch_filter', $text);
  }

  // HTML strike tags: <strike> </strike> or <s> </s>.
  if ($filter->settings['antisearch_filter_strike']) {
    $text = preg_replace_callback("#<strike>(.*)</strike>#U", 'antisearch_filter', $text);
    $text = preg_replace_callback("#<s>(.*)</s>#U", 'antisearch_filter', $text);
  }

  // Square brackets [ ].
  if ($filter->settings['antisearch_filter_bracket']) {
    $text = preg_replace_callback("/\[(.*)\]/U", 'antisearch_filter', $text);
  }

  if (!$filter->settings['antisearch_filter_show_title']) {
    return preg_replace("#<span class=\"antisearch-filter\".*>#Uis", '<span class="antisearch-filter">', $text);
  }

  return $text;
}

/**
 * Make given string invisible.
 *
 * Makes the given string invisible for a search engine (like google)
 * by adding characters between each letter.
 *
 * @param string $text
 *   A string to pass through the dismemberer.
 */
function antisearch_filter($text) {

  // preg_replace_callback() calls antisearch_filter() by submitting an array.
  // Array
  // (
  // [0] => [foo bar] or <strike>foo bar</strike>
  // [1] => foo bar
  // ).
  if (is_array($text)) {
    $text = $text[1];
  }

  $text = html_entity_decode($text, ENT_NOQUOTES, 'utf-8');
  $text = strip_tags($text);

  $dismembered_string = '';

  // Thin characters are used.
  $character = array(
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
  );
  for ($i = 0; $i < mb_strlen($text); $i++) {
    // The normal substr function can not handle strings in utf-8, so we use
    // mb_substr instead.
    $str = mb_substr($text, $i, 1, 'utf-8');
    $dismembered_string .= htmlentities($str, ENT_QUOTES, 'utf-8');
    $dismembered_string .= '<i>' .  $character[array_rand($character)] . '</i>';
  }

  $title = t('Name is hidden from search engines. Search engines see only:');

  return '<span class="antisearch-filter" title="' . $title . ' ' . strip_tags($dismembered_string) . '">'
    . $dismembered_string
    . '</span>';
}

/**
 * Implements hook_filter_FILTER_settings().
 *
 * Settings callback for hook_filter_info().
 *
 * @see antisearch_filter_filter_info()
 */
function _antisearch_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $config = $filter->settings;

  $settings['antisearch_filter_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Apply to e-mail adresses.'),
    '#default_value' => isset($config['antisearch_filter_email']) ? $config['antisearch_filter_email'] : $defaults['antisearch_filter_email'],
    '#description' => t('Apply antisearch filter to e-mail addresses (e. g. foo@bar.com).'),
  );

  $settings['antisearch_filter_strike'] = array(
    '#type' => 'checkbox',
    '#title' => t('Apply to HTML strike tags.'),
    '#default_value' => isset($config['antisearch_filter_strike']) ? $config['antisearch_filter_strike'] : $defaults['antisearch_filter_strike'],
    '#description' => t('Apply antisearch filter to text surrounded by html strike tags (e. g. <strike>foo bar</strike>).'),
  );

  $settings['antisearch_filter_bracket'] = array(
    '#type' => 'checkbox',
    '#title' => t('Apply to square brackets.'),
    '#default_value' => isset($config['antisearch_filter_bracket']) ? $config['antisearch_filter_bracket'] : $defaults['antisearch_filter_bracket'],
    '#description' => t('Apply antisearch filter to text surrounded by square brackets (e. g. [foo bar]).'),
  );

  $settings['antisearch_filter_show_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show description.'),
    '#default_value' => isset($config['antisearch_filter_show_title']) ? $config['antisearch_filter_show_title'] : $defaults['antisearch_filter_show_title'],
    '#description' => t('Show description.'),
  );

  return $settings;
}

/**
 * Implements hook_filter_FILTER_tips().
 *
 * Tips callback for hook_filter_info().
 *
 * @see antisearch_filter_filter_info()
 */
function _antisearch_filter_tips($filter, $format, $long = FALSE) {

  $tips = t('The antisearch filter will be applied ');

  // E-mail address.
  if ($filter->settings['antisearch_filter_email'] == TRUE) {
    $tips .= t('to e-mail addresses, ');
  }

  // HTML strike tags: <strike> </strike>.
  if ($filter->settings['antisearch_filter_strike'] == TRUE) {
    $tips .= t('to any text surrounded by HTML strike tags, ');
  }

  // Square brackets [ ].
  if ($filter->settings['antisearch_filter_bracket'] == TRUE) {
    $tips .= t('to any text surrounded by square brackets, ');
  }

  return substr($tips, 0, -2) . '.';
}
