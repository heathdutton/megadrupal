<?php

/**
 * @file
 * Based on bookpost.module, which itself was based on the OpenBook plugin for Wordpress
 * @see http://drupal.org/project/bookpost
 * @see http://wordpress.org/extend/plugins/openbook-book-data/
 * @see http://openlibrary.org
 */

/**
 * Implements hook_help().
 */
function millennium_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#millennium_filter':
      // Return a line-break version of the module README
      return "<tt>" . check_markup(file_get_contents( dirname(__FILE__) . "/README.txt", 2)) . "</tt>";
  }
}

/**
 * Implements hook_filter_info().
 */
function millennium_filter_filter_info() {
  $filters['millenniumfilter'] = array(
    'title' => t('Millennium Filter'),
    'description' => t('Replaces WebOPAC record number or URL (e.g. {{millennium|b123456}}, {{millennium|i123456}}, {{millennium|http://example.com/record=b123456}}) with book information'),
    'process callback' => '_millennium_filter_process',
    'settings callback' => '_millennium_filter_settings',
    'tips callback' => '_millennium_filter_tips',
    'cache' => FALSE,
    'default settings' => array(
      'millennium_filter_report_errors' => array('watchdog'),
      'millennium_filter_default_base_url' => 0,
      'millennium_filter_remove_fields' => array(),
    ),
  );
  return $filters;
}

/**
 * Filter tips callback function for $filters[0] in hook_filter_info().
 */
function _millennium_filter_tips($format, $long = FALSE) {
  if ($long) {
    return t('Display book information by placing a WebOPAC record number or a direct URL to a record between twin curly braces {{millennium|b123456}} or {{millennium|http://example.com/record=b123456}}');
  }
}

/**
 * Hook_filter_info() process callback.
 *
 * @see millennium_filter_filter_info()
 */
function _millennium_filter_process($text, $filter, $format) {
  if (!$text) {
    return;
  }
  preg_match_all('/{{millennium\|(.*)}}/', $text, $matches);
  $tag = $matches[0];
  $record_info = array();
  $report_errors = $filter->settings['millennium_filter_report_errors'];
  $remove_fields = $filter->settings['millennium_filter_remove_fields'];
  for ($i = 0; $i < count($matches[1]); $i++) {
    $output = "";
    $id = $matches[1][$i];
    $biblio_data = millennium_filter_retrieve_biblio_data($id, $filter->settings);
    if ($biblio_data) {
      // Show only certain biblio data; remove some fields
      foreach ($remove_fields as $field => $enabled) {
        if ($enabled !== 0) {
          unset($biblio_data[$field]);
        }
      }
      drupal_add_css( drupal_get_path('module', 'millennium') . '/millennium.css');
      $output = "<div class='millennium-filter-record'>";
      $output .= theme("millennium_biblio_data", array('biblio_data' => $biblio_data, 'mode' => 'full'));
      $output .= "</div>";
    }
    else {
      if ($report_errors["inline"]) {
        $output = "<div class='millennium-filter-record error'>";
        $output .= t("Could not get item %id", array("%id" => $id));
        $output .= "</div>";
      }
      if ($report_errors["general_message"]) {
        drupal_set_message(t("Could not get item %id", array("%id" => $id)));
      }
      if ($report_errors["watchdog"]) {
        watchdog("millennium_filter", "Could not get item %id", array("%id" => $id), WATCHDOG_WARNING);
      }
    }
    $record_info[] = $output;
  }
  $text = str_replace($tag, $record_info, $text);
  return $text;
}

function _millennium_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  global $_millennium_field_labels;
  $settings = array();
  $filter->settings += $defaults;
  $settings['millennium_filter_report_errors'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Error reporting'),
    '#options' => array(
      'watchdog' => t("System message log"),
      'general_message' => t("General message (all users will see the error message)"),
      'inline' => t("Inline at placeholder position (all users will see the error message)"),
    ),
    '#default_value' => $filter->settings['millennium_filter_report_errors'], #, array('watchdog' => 'watchdog')),
  );
  $settings['millennium_filter_default_base_url'] = array(
    '#type' => 'select',
    '#title' => t('Default source WebOPAC'),
    '#description' => t('Select one of the enabled sources to use when only record numbers are issued.'),
    '#default_value' => $filter->settings['millennium_filter_default_base_url'], #variable_get('millennium_filter_default_base_url', ''),
    '#options' => drupal_map_assoc(array_merge(array(0 => t('<none>')), array_keys(variable_get('millennium_sources', array())))),
  );
  $settings['millennium_filter_remove_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Fields to hide in shown records'),
    '#options' => $_millennium_field_labels,
    '#default_value' => $filter->settings['millennium_filter_remove_fields'], #variable_get('millennium_filter_remove_fields', array()),
  );
  return $settings;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function millennium_filter_retrieve_biblio_data($id, $settings) {
  $cid = "millennium_filter_record_{$id}";
  $cache = cache_get($cid);
  if ($cache && $cache->expire > REQUEST_TIME) {
    $biblio_data = $cache->data;
    return $biblio_data;
  }

  if (preg_match('/^http/', $id)) {
    $url = $id;
    $url = str_replace("&amp;", "&", $url);
    // Determine base url from given URL
    $base_url = millennium_get_real_baseurl($url);

    // Get record page from WebOPAC
    $result = millennium_http_request($url);
    $record_html = $result->data;
    if (!$record_html) {
      cache_set($cid, FALSE, 'cache_filter');
      return FALSE;
    }
    $ok = preg_match('/\/record=([bi][0-9]+)/si', $record_html, $matches);
    if (!$ok) {
      cache_set($cid, FALSE, 'cache_filter');
      return FALSE;
    }
    $recnum = $matches[1];
  }
  else {
    if (!preg_match(MILLENNIUM_RECORD_PREG_NOCHECKDIGIT, $id)) {
      return FALSE;
    }
    // Pick the OPAC to use
    $base_url = $settings['millennium_filter_default_base_url'];
    if (! $base_url) {
      // If only one source defined, use that one as default
      $sources = variable_get('millennium_sources', array());
      if (sizeof($sources) == 0) {
        return FALSE;
      }
      // Put the index of the first (and only) element of $source into $base_url
      foreach ($sources as $base_url => $dummy) {
      }
    }
    $recnum = $id;
  }

  $output = "";

  // Try to find already-imported node
  $nid = FALSE;
  switch (substr($recnum, 0, 1)) {
    case "i":
      $nid = db_query("SELECT MNB.nid FROM {millennium_node_bib} MNB,{millennium_bib_item} MBI WHERE MBI.item_recnum = :MBI.item_recnum AND MNB.bib_recnum = :MNB.bib_recnum AND MBI.base_url = :MBI.base_url", array(':MBI.item_recnum' => $recnum, ':MNB.bib_recnum' => MBI . bib_recnum, ':MBI.base_url' => $base_url))->fetchField();
      break;
    case "b":
      $nid = db_query("SELECT nid FROM {millennium_node_bib} WHERE bib_recnum = :bib_recnum AND base_url = :base_url", array(':bib_recnum' => $recnum, ':base_url' => $base_url))->fetchField();
  }
  if ($nid) {
    $biblio_data = millennium_get_biblio_data($nid);
  }
  else {
    // Fetch directly from WebOPAC
    $marc_text_msg = "";
    $marc_text = millennium_fetch_marc($recnum, $base_url);
    if (!$marc_text) {
      return FALSE;
    }
    $biblio_data = millennium_marc_to_biblio($marc_text);
  }
  cache_set($cid, $biblio_data, 'cache_filter');
  return $biblio_data;
}
