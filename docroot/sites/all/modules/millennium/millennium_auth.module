<?php

define('MILLENNIUM_AUTH_DEFAULT_PIN_MSG', 'The PIN used for renewals and other library services.');
define('MILLENNIUM_AUTH_DEFAULT_ID_MSG', 'Enter your library card barcode.');
define('MILLENNIUM_AUTH_KEY', 'myxtplyxed');

/**
 * Implements hook_help().
 */
function millennium_auth_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Millennium authentication.');
  }
}

/**
 * Implements hook_menu().
 */
function millennium_auth_menu() {
  $items = array();
  $items[MILLENNIUM_SETTINGS_PATH . '/authentication'] = array(
    'title' => 'Authentication',
    'description' => 'Configure authentication settings.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('millennium_auth_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer millennium'),
  );
  return $items;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function millennium_auth_settings_form() {
  $form = array();
  $form['millennium_auth_default_base_url'] = array(
    '#type' => 'select',
    '#title' => t('WebOPAC source to use for authentication'),
    '#description' => t('Select one of the enabled sources.'),
    '#default_value' => variable_get('millennium_auth_default_base_url', ''),
    '#options' => drupal_map_assoc(array_merge(array(0 => t('<none>')), array_keys(variable_get('millennium_sources', array())))),
  );
  $form['millennium_auth_use_https'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force use of HTTPS for authentication requests'),
    '#description' => t('Note: your OPAC must have the appropriate configuration in place for this to work.'),
    '#default_value' => variable_get('millennium_auth_use_https', FALSE),
  );
  $form['login']['millennium_auth_login_fields'] = array(
    '#type' => 'radios',
    '#title' => t('Number of login input boxes configured on the Millennium system'),
    '#options' => array(
          '2' => t('2 boxes: e.g. name + password, barcode + password (or similar)'),
          '3' => t('3 boxes: e.g. name + barcode + password, name + last name + password (or similar)'),
        ),
    '#default_value' => variable_get('millennium_auth_login_fields', '2'),
  );
  $form['login']['millennium_auth_date_format'] = array(
    '#type' => 'radios',
    '#title' => t('Date format for due dates shown on items on /patroninfo screens'),
    '#options' => array(
          'MDY' => t('Month-Day-Year (e.g. 01-25-11)'),
          'DMY' => t('Day-Month-Year (e.g. 25-01-11)'),
        ),
    '#default_value' => variable_get('millennium_auth_date_format', 'MDY'),
  );
  $form['login']['millennium_auth_id_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Library ID field help message on login form'),
    '#description' => t('This is shown below the login form.'),
    '#default_value' => variable_get('millennium_auth_id_message', t(MILLENNIUM_AUTH_DEFAULT_ID_MSG)),
  );
  $form['login']['millennium_auth_pin_message'] = array(
    '#type' => 'textfield',
    '#title' => t('PIN field help message on login form'),
    '#description' => t('This is shown below the login form.'),
    '#default_value' => variable_get('millennium_auth_pin_message', t(MILLENNIUM_AUTH_DEFAULT_PIN_MSG)),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_user_view().
 */
function millennium_auth_user_view($account, $view_mode, $langcode) {
  // Users can only view their OWN data unless they have opted in to share
  // their information (see flag $user->millennium_auth_show_my_checkouts)
  if (
      (isset($account->data['millennium_auth_show_my_checkouts']) && !$account->data['millennium_auth_show_my_checkouts'])
       && $user->uid != $account->uid
      ) {
    return;
  }

  // Is this user registered with Millennium?
  $pincache = _millennium_auth_pincache_get($account->uid);
  if ($pincache == FALSE) {
    _millennium_auth_debug("No pincache data for user " . $account->uid);
    return; // No. Goodbye, dave.
  }
  $patroninfo_data = _millennium_auth_get_patroninfo_by_uid($account->uid);
  if ($patroninfo_data) {
    $list = array();
    if (is_array($patroninfo_data['checkouts'])) {
      $checked_out_msg = theme('millennium_auth_checkouts', array('items' => $patroninfo_data['checkouts']));
      $checked_out_msg .= '<a href=' . variable_get('millennium_auth_default_base_url', '') . '/patroninfo>' . t('Renew your items') . '</a>';
    }
    else {
      $checked_out_msg = t('You have no checked out items.');
    }

    $account->content['millennium'] = array(
     '#type' => 'user_profile_category',
     '#title' => t('Library account status'),
     '#attributes' => array('class' => array('millennium', 'items')),
     '#weight' => 1,
    );

    if (isset($patroninfo_data['number_holds'])) {

      $number_holds = intval($patroninfo_data['number_holds']);
      $number_holds_ready = intval($patroninfo_data['number_holds_ready']);

      $holds_msg = t(
        '@num-holds holds, @num-ready ready for pickup.',
        array(
          '@num-holds' => $number_holds,
          '@num-ready' => $number_holds_ready
        )
      );
      $account->content['millennium']['millennium_auth_holds'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Current holds:'),
        '#markup' => $holds_msg,
        '#attributes' => array('class' => array('millennium', 'items')),
      );
    }

    $account->content['millennium']['millennium_auth_owed'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Money owed (fines, etc.):'),
      '#markup' => sprintf("%.2f", $patroninfo_data["fines"]),
      '#attributes' => array('class' => array('millennium', 'items')),
    );

    $account->content['millennium']['millennium_auth_checkedout'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Items currently checked out:'),
      '#markup' => $checked_out_msg,
      '#attributes' => array('class' => array('millennium', 'items')),
    );

  }
  else {
    drupal_set_message(t('Could not fetch information from the library system. Please try again later.'), "error");
  }
}

/**
 * Implements hook_user_delete().
 */
function millennium_auth_user_delete($account) {
  db_delete('millennium_auth_users')
  ->condition('uid', $account->uid)
  ->execute();
}

/**
 * Implements hook_user_presave().
 *
 * Stores the value of the form element added in millennium_auth_form_alter().
 * @see millennium_auth_form_alter()
 */
function millennium_auth_user_presave(&$edit, $account, $category) {
  // Make sure that our form value is stored.
  if (isset($edit['millennium_auth_show_my_checkouts'])) {
    $edit['data']['millennium_auth_show_my_checkouts'] = $edit['millennium_auth_show_my_checkouts'];
  }
}

/**
 * Implements hook_theme().
 */
function millennium_auth_theme() {
  return array(
    'millennium_auth_checkouts' => array(
      'file' => 'millennium_auth.module',
      'variables' => array(
        'items' => NULL,
      ),
    ),
  );
}

/**
 * Theming function to display list of checked out items.
 *
 * @param $variables
 *   An associative array containing:
 *   -items: The checkouts element of patroninfo_data.
 */
function theme_millennium_auth_checkouts($variables) {
  $items = $variables['items'];
  if (!is_array($items)) {
    return "";
  }
  $list = array();
  foreach ($items as $item) {
    $link = '';
    // If record been imported into Drupal, link to node.
    if ($item['bib_recnum']) {
      $record = $item['bib_recnum'];
      $nid = db_query("SELECT nid FROM {millennium_node_bib} WHERE (bib_recnum = :bib_recnum) AND base_url = :base_url", array(':bib_recnum' => $item["bib_recnum"], ':base_url' => variable_get('millennium_auth_default_base_url', '')))->fetchField();
      if ($nid) {
        $link = l($item["title"], "node/$nid");
      }
    }
    else {
      $record = $item['item_recnum'];
      $nid = db_query("SELECT nid FROM {millennium_bib_item} WHERE (item_recnum = :item_recnum) AND base_url = :base_url", array(':item_recnum' => $item["item_recnum"], ':base_url' => variable_get('millennium_auth_default_base_url', '')))->fetchField();
      if ($nid) {
        $link = l($item["title"], "node/$nid");
      }
    }
    // If no link to node found, link to origin record.
    if (! $link) {
      $link = l($item["title"], variable_get('millennium_auth_default_base_url', '') . "/record=" . $record);
    }

    $item_html = $link . "<br />" . t('Due date: @date', array("@date" => format_date($item["duedate_timestamp"], 'custom', 'D, m/d/Y')));

    // Renew count
    if ($item["renew_count"]) {
      $item_html .= "<br />" . t("You have renewed this item @count times", array("@count" => $item["renew_count"]));
    }

    // Fines
    if ($item["fine"]) {
      $item_html .= "<br />" . t("You have an outstanding fine of @fine", array("@fine" => money_format('%i', $item["fine"])));
    }

    // Holds?
    if (isset($item["hold_count"]) && $item["hold_count"]) {
      $item_html .= "<br />" . t("@count patrons have placed holds on this item", array("@count" => $item["hold_count"]));
    }

    $list[] = $item_html;
  }
  return theme('item_list', array('items' => $list));
}


/**
 * Validation callback which authenticates against Millennium.
 */
function _millennium_auth_remote_authenticate(&$form_values) {
  #global $millennium_patroninfo; // TODO Not needed?

  if (variable_get('millennium_auth_login_fields', '2') == '3') {
    $name = $form_values["lastname"];
    $password = $form_values["pass"];
    $code = $form_values["name"];
  }
  else {
    $name = $form_values["name"];
    $code = $form_values["pass"];
    $password = '';
  }

  _millennium_auth_debug("_millennium_auth_remote_authenticate(): name = '$name', pass = '$password', code = '$code'");

  // Check user data against Millennium
  $patroninfo_data = _millennium_auth_get_patroninfo_by_pindata($name, $code, $password);
  if ($patroninfo_data["success"] === TRUE) {
    _millennium_auth_debug("_millennium_auth_remote_authenticate(): _millennium_auth_get_patroninfo_by_pindata()[success] returned TRUE");
    $result = $patroninfo_data;
  }
  else {
    _millennium_auth_debug("Failed: millennium_auth_authenticate('$name', '$password', '$code')");
    $result = FALSE;
    watchdog(
      'millennium auth',
      'Error authenticating millennium user code=@code, name=@name: @errormsg',
      array('@code' => $code, '@name' => $name, '@errormsg' => $patroninfo_data['errormsg'])
    );
  }
  return $result;
}

/**
 * Fetch username, lastname and pin from locally stored copy
 */
function _millennium_auth_pincache_get($uid) {
  #_millennium_auth_debug("_millennium_auth_get_pincache($uid)");
  $data = db_query("SELECT * FROM {millennium_auth_users} WHERE uid = :uid", array(':uid' => $uid))->fetchAssoc();
  if ($data) {
    $data['pin'] = _millennium_auth_decrypt($data['pin']);
    $data['lastname'] = _millennium_auth_decrypt($data['lastname']);
    return $data;
  }
  else {
    return FALSE;
  }
}

/**
 * Get patroninfo using Drupal's uid
 */
function _millennium_auth_get_patroninfo_by_uid($uid) {
  static $patroninfo_data_cache;

  if ($patroninfo_data_cache[$uid]) {
    return $patroninfo_data_cache[$uid];
  }

  $pindata = _millennium_auth_pincache_get($uid);
  if ($pindata == FALSE) {
    return FALSE;
  }

  $patroninfo_data = _millennium_auth_get_patroninfo_by_pindata($pindata["lastname"], $pindata["name"], $pindata["pin"] );

  $patroninfo_data_cache[$uid] = $patroninfo_data;
  return $patroninfo_data;
}

/**
 * Fetch patroninfo using name, lastname and pin
 */
function _millennium_auth_get_patroninfo_by_pindata($name, $code, $pin) {
  static $patroninfo_data_cache;

  $key = crypt("$name:$code:$pin", "salt");
  #drupal_set_message("Trying to get info for $key");

  if ($patroninfo_data_cache[$key]) {
    #drupal_set_message("Fetched $key from memory cache");
    return $patroninfo_data_cache[$key];
  }

  // Check database cache before connecting
  $cid = "millennium_auth_$key";
  $cache = cache_get($cid);
  if (! empty($cache->data) && $cache->expire > REQUEST_TIME) {
    #_millennium_auth_debug("Fetched $cid from DB cache");
    $patroninfo_data = $cache->data;
    $patroninfo_data_cache[$key] = $patroninfo_data;
    return $patroninfo_data;
  }

  $base_url = variable_get('millennium_auth_default_base_url', '');
  // Use HTTPs if settings indicate so. TODO make this automatic?
  if (variable_get('millennium_auth_use_https', FALSE)) {
    $base_url = str_replace("http://", "https://", $base_url);
  }

  // Connect to Millennium and get the patron's information
  $date_format = variable_get('millennium_auth_date_format', 'MDY');

  // Load patroninfo.inc
  module_load_include('inc', 'millennium_auth', 'patroninfo');
  $patroninfo_data = patroninfo_start_session($base_url, $name, $code, $pin, $date_format);

  if ($patroninfo_data["success"] != TRUE) {
    _millennium_auth_debug("_millennium_auth_get_patroninfo_by_pindata(): Error: " . $patroninfo_data["errormsg"]);
    watchdog('millennium auth',
      'Connection error: @error',
      array('@error' => $patroninfo_data["errormsg"]),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  patroninfo_end_session($patroninfo_data["session_id"]);

  // Cache result in database
  cache_set($cid, $patroninfo_data, 'cache', REQUEST_TIME + 600); // 10 minutes
  $patroninfo_data_cache[$key] = $patroninfo_data;
  return $patroninfo_data;
}

/**
 * Implements hook_form_alter().
 */
function millennium_auth_form_alter(&$form, &$form_state, $form_id) {
  $base_url = variable_get('millennium_auth_default_base_url', 0);

  // Make sure that settings are in place.
  if ($base_url != 0) {
    return;
  }

  // User edit form
  if ($form_id == 'user_profile_form' && $form['#user_category'] == 'account') {
    // Only for users known to be from Millennium patron records
    $account = user_external_load($form['#user']->name);
    if ($account) {
      // Prevent users from changing PIN (password)
      // Show link to Millennium change pin page instead
      if ($form['account']['pass']) {
        $form['account']['pass']['#access'] = FALSE;
        $form['account']['pin'] = array(
          '#title' => t('Change library PIN'),
          '#type' => 'item',
          '#description' => l( t('Click on this link to change your library PIN'), "{$base_url}/patroninfo*eng"),
        );
      }
      $form['millennium'] = array(
        '#type' => 'fieldset',
        '#title' => t('Library account options'),
      );
      // Show an extra form element on user/XXX/edit that allows to opt-in
      // to share user's checed-out items information.
      $form['millennium']['millennium_auth_show_my_checkouts'] = array(
        '#type' => 'checkbox',
        '#title' => t('I opt-in to share my list of current checked-out items'),
        '#default_value' => isset($account->data['millennium_auth_show_my_checkouts']) ? $account->data['millennium_auth_show_my_checkouts'] : 0,
        '#description' => t('This will allow anyone with access to your profile to view your current check outs. Use with care.'),
      );
    }
  }

  // Login form

  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    if (variable_get('millennium_auth_login_fields', '2') == '3') {
      $form['lastname'] = array(
        '#type' => 'textfield',
        '#title' => t('Your last name'),
        '#size' => 15,
        '#description' => t('Example: smith'),
        '#default_value' => '',
        '#weight' => -50,
        '#attributes' => array('tabindex' => 1),
        #'#required' => 1,
      );
      // Add tabindex to elements.
      $form['name']['#attributes']['tabindex'] = 2;
      $form['pass']['#attributes']['tabindex'] = 3;
      $form['submit']['#attributes']['tabindex'] = 4;
    }
    else {
      $form['lastname'] = array(
        '#type' => 'hidden',
        '#value' => '',
      );
    }

    // Alter username element.
    $form['name']['#title'] = t('Your Library ID');
    $form['name']['#description'] = check_plain(variable_get('millennium_auth_id_message', t(MILLENNIUM_AUTH_DEFAULT_ID_MSG)));

    // Alter password element.
    $form['pass']['#title'] = t('Library PIN');
    $form['pass']['#size'] = 12;
    $form['pass']['#description'] = check_plain(variable_get('millennium_auth_pin_message', t(MILLENNIUM_AUTH_DEFAULT_PIN_MSG)));

    // Add our own validation and submit function to the node_form
    $final_validator = array_pop($form['#validate']);
    $form['#validate'][] = 'millennium_auth_validate';
    $form['#validate'][] = $final_validator;

  }
  return $form;
}

/**
 * Validation function for user login form.
 */
function millennium_auth_validate($form, &$form_state) {

  if (isset($form_state['uid']) && $form_state['uid'] !== FALSE) {
    // Another module has already handled authentication.
    return;
  }

  _millennium_auth_debug("millennium_auth_validate(): " . $form_state['values']["lastname"]);
  _millennium_auth_debug("millennium_auth_validate(): " . $form_state['values']["name"]);

  // TODO: Check if user format is correct... L000... A00... etc.

  // Check if user is not in database... then the lastname is required
  $uid_mil = db_query("SELECT uid FROM {millennium_auth_users} WHERE name = :name", array(':name' => $form_state['values']["name"]))->fetchField();
  $uid_dru = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $form_state['values']["name"]))->fetchField();
  if (!$uid_mil && !$uid_dru && variable_get('millennium_auth_login_fields', '2') == '3' && trim($form_state['values']["lastname"]) == "" ) {
    form_set_error('lastname', t('The last name is required for all first-time users') );
  }

  if (! $patroninfo = _millennium_auth_remote_authenticate($form_state['values'])) {
    // Authentication failed
    form_set_error('name', t('Your last name, library ID or library PIN are incorrect.'));
  }
  else {
    _millennium_auth_debug("millennium_auth_validate(): Authentication ok!"); // TODO debug, remove!

    // Log in (and possibly register if this is a new user)
    $account = _millennium_auth_login_register($form_state['values']);
    if ($account) {
      $form_state['uid'] = $account->uid;
      // Store PIN data
      $lastname = isset($form_state['values']['lastname']) ? $form_state['values']['lastname'] : '';
      $id = db_merge('millennium_auth_users')
        ->key(array('uid' => $account->uid))
        ->fields(array(
          'lastname' => _millennium_auth_encrypt($lastname),
          'name' => $form_state['values']['name'],
          'pin' => _millennium_auth_encrypt($form_state['values']['pass']),
        ))
        ->execute();
      _millennium_auth_debug("millennium_auth_validate() : Saved user's PIN and last name");
    }
  }

}

function _millennium_auth_insert_pincache($values) {
  $id = db_insert('millennium_auth_users')
    ->fields(array(
      'uid' => $account->uid,
      'lastname' => _millennium_auth_encrypt($values['lastname']),
      'name' => $values["name"],
      'pin' => _millennium_auth_encrypt($values["password"]),
    ))
    ->execute();
}

/**
 * Helper function for debugging purposes
 */
function _millennium_auth_debug($msg) {
  #if ($_SERVER["REMOTE_ADDR"] == "10.17.96.10") {
  #drupal_set_message($msg);
  #}
}

function _millennium_auth_encrypt($string) {
  $key = MILLENNIUM_AUTH_KEY;
  $result = '';
  for ($i = 1; $i <= strlen($string); $i++) {
    $char = substr($string, $i - 1, 1);
    $keychar = substr($key, ($i % strlen($key)) - 1, 1);
    $char = chr(ord($char) + ord($keychar));
    $result .= $char;
  }
  return base64_encode($result);
}

function _millennium_auth_decrypt($string) {
  $string = base64_decode($string);
  $key = MILLENNIUM_AUTH_KEY;
  $result = '';
  for ($i = 1; $i <= strlen($string); $i++) {
    $char = substr($string, $i - 1, 1);
    $keychar = substr($key, ($i % strlen($key)) - 1, 1);
    $char = chr(ord($char) - ord($keychar));
    $result .= $char;
  }
  return $result;
}

/**
 * Log in the user, registering if the user doesn't exist yet.
 *
 * @param $name
 *   The name of the user to log in or register.
 */
function _millennium_auth_login_register($form_values) {
  $account = user_external_load($form_values['name']);

  if (!$account) {
    $userinfo = array(
      'name' => $form_values['name'],
      'pass' => $form_values['pass'],
      'mail' => $form_values['name'],
      'init' => $form_values['name'],
      'status' => 1,
      'access' => REQUEST_TIME,
    );
    #dsm("Will save new account: ");
    #dpm($userinfo);
    $account = user_save(drupal_anonymous_user(), $userinfo); // TODO: Removed for debug?!
    #dsm("New account saved! Account:");
    #dpm($account);

    // set an error if the account creation failed
    if (!$account) {
      drupal_set_message(t('Error saving user account.'), 'error');
      return FALSE;
    }
    else {
      user_set_authmaps($account, array('authname_millennium_auth' => $userinfo['name'])); // TODO What does this do??
    }
  }

  #user_login_submit(array(), $form_state); // TODO: Not needed?
  return $account;
}
