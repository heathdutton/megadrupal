<?php
/**
 * @file
 * Install, update and uninstall functions for the millennium module.
 *
 */


/**
 * Implements hook_requirements().
 */
function millennium_requirements($phase) {
  // Ensure translations don't break at install time
  $t = get_t();
  $requirements = array();

  if ($phase == 'install') {
    if (!function_exists("mb_ereg_replace")) {
      $requirements['millennium_mb_ereg_replace'] = array(
        'title' => $t('Millennium'),
        'value' => $value,
        'description' => $t('Millennium module requires mb_ereg_replace support in PHP.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    if (db_driver() != 'mysql') {
      $requirements['millennium_mysql'] = array(
        'title' => $t('Millennium'),
        'value' => $value,
        'description' => $t('Millennium module requires your database driver by mysql; current driver is @driver', array('@driver' => db_driver())),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    return $requirements;
  }
  if ($phase == 'runtime') {
    $msg = array();

    /* TODO: Decide if we will still check if a single OPAC (or multiple OPACs?)
     * are responding.
    $base_url = millennium_get_real_baseurl();
    if (!$base_url) {
      $msg[] = $t("You must configure a base URL; please go to the !configurationpage", array("!configurationpage" => l($t("configuration page"), MILLENNIUM_SETTINGS_PATH)));
    } else {
      if (!millennium_ping($base_url)) {
        #drupal_set_message("$base_url code ".$response->code);
        $msg[] = $t("The WebOPAC at @url does not respond.", array("@url" => $base_url));
      }
    }

    $ok = sizeof($msg) == 0;
    $value =  $ok ? $t('WebOPAC at !url is responding.', array("!url" => l($base_url, $base_url))) : $t('There is a problem:');
    $severity = $ok ? REQUIREMENT_OK : REQUIREMENT_WARNING;
    $description = $ok ? "" : theme('item_list', $msg);

    $requirements['millennium_baseurl'] = array(
      'title' => $t('Millennium'),
      'value' => $value,
      'description' => $description,
      'severity' => $severity,
    );
    */
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function millennium_schema() {
  $schema['millennium_import_cache'] = array(
    'description' => 'Temporarily holds harvested records for node import.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary identifier',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'session' => array(
        'description' => 'An identifier for the harvesting session',
        'type' => 'char',
        'length' => 30,
        'not null' => FALSE,
      ),
      'data' => array(
        'description' => 'Harvested data',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'session' => array('session'),
    ),
    'primary key' => array('id'),
  );
  $schema['millennium_import_queue'] = array(
    'description' => 'A list of records to process (normally during cron)',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'recnum' => array(
        'description' => 'Millennium record number',
        'type' => 'char',
        'length' => 15,
        'not null' => FALSE,
      ),
      'priority' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'force_update' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'base_url' => array(
        'description' => 'Millennium WebOPAC base URL for this record',
        'type' => 'char',
        'length' => 80,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'priority' => array('priority'),
    ),
    'primary key' => array('id'),
  );

  $schema['millennium_node_bib'] = array(
    'description' => 'Mantains a relationship between a node and Millennium record data',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bib_recnum' => array(
        'description' => 'Millennium bibliographic record number',
        'type' => 'char',
        'length' => 15,
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => 'Date this data was updated',
        'mysql_type' => 'datetime', //TODO: datetime DB fieldtype is not generally supported
        'not null' => TRUE,
        'type' => 'datetime',
      ),
      'created' => array(
        'description' => 'Date this data was created',
        'mysql_type' => 'datetime', //TODO: datetime DB fieldtype is not generally supported
        'not null' => TRUE,
        'type' => 'datetime',
      ),
      'biblio_data' => array(
        'description' => 'Bibliographic data (title, author, etc.)',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'base_url' => array(
        'description' => 'Millennium WebOPAC base URL for this record',
        'type' => 'char',
        'length' => 80,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'id_2' => array('bib_recnum', 'base_url'),
      'nid' => array('nid'),
    ),
    'unique keys' => array(
      'id' => array('id'),
    ),
    'primary key' => array('id'),
  );

  $schema['millennium_bib_item'] = array(
    'description' => 'Mantains a relationship between bib-level records and item-level records',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bib_recnum' => array(
        'description' => 'Millennium bibliographic record number',
        'type' => 'char',
        'length' => 15,
        'not null' => TRUE,
      ),
      'item_recnum' => array(
        'description' => 'Millennium item record number',
        'type' => 'char',
        'length' => 15,
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => 'Date this data was updated',
        'mysql_type' => 'datetime', //TODO: datetime DB fieldtype is not generally supported
        'not null' => TRUE,
        'type' => 'datetime',
      ),
      'created' => array(
        'description' => 'Date this data was created',
        'mysql_type' => 'datetime', //TODO: datetime DB fieldtype is not generally supported
        'not null' => TRUE,
        'type' => 'datetime',
      ),
      'base_url' => array(
        'description' => 'Millennium WebOPAC base URL for these records',
        'type' => 'char',
        'length' => 80,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'id_3' => array('item_recnum', 'base_url'),
      'id_2' => array('bib_recnum', 'base_url'),
      'nid' => array('nid'),
    ),
    'unique keys' => array(
      'id' => array('id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function millennium_uninstall() {
  // Remove variables
  /*
   * millennium_webopac_reset
   * millennium_webopac_baseurl
   * millennium_webopac_start_itemrecord
   * millennium_webopac_end_itemrecord
   * millennium_webopac_maxrecords
   * millennium_webopac_latest_successful_itemrecord
   * millennium_webopac_current_itemrecord
   */
  db_delete('variable')
    ->condition('name', 'millennium_webopac_%', 'LIKE')
    ->execute();

  /**
   * millennium_import_form_*
   * millennium_range_form_*
   * millennium_marc_vid_*
   */
  db_delete('variable')
    ->condition('name', 'millennium_import_form_%', 'LIKE')
    ->execute();
  db_delete('variable')
    ->condition('name', 'millennium_range_form_%', 'LIKE')
    ->execute();
  db_delete('variable')
    ->condition('name', 'millennium_marc_vid_%', 'LIKE')
    ->execute();

  variable_del('millennium_action_on_last_item_deleted');
  variable_del('millennium_sources');
  variable_del('millennium_crawl_flag');
  variable_del('millennium_crawl_type');
  variable_del('millennium_crawl_baseurl');
  variable_del('millennium_preferred_locations');
  variable_del('millennium_coverimage_baseurl');
  variable_del('millennium_time_history');
  variable_del('millennium_marc_node_type');
  variable_del('millennium_taxonomy_language');
  variable_del('millennium_realtime_holdings');
  variable_del('millennium_googlebooks');
  variable_del('millennium_googlebooks_covers');
  variable_del('millennium_googlebooks_widget');
  variable_del('millennium_availability_vid');
  variable_del('millennium_map_available_only');
  variable_del('millennium_availability_strings');
  variable_del('millennium_opacname_vid');
  variable_del('millennium_display_hold_link');
  variable_del('millennium_display_original_record_link');
  variable_del('millennium_display_biblio_data');
  variable_del('millennium_holdings_opacname');
  variable_del('millennium_list_form_checkdigit');
}

/**
 * Update function
 */
function millennium_update_6001() {
  $ret = array();
  db_add_field('millennium_import_queue', 'base_url',
    array(
      'type' => 'char',
      'length' => 80,
      'not null' => TRUE,
    )
  );
  return t('Base URL field length set to 80.');
}

/**
 * Update function
 */
function millennium_update_6002() {
  $ret = array();
  $schema['millennium_import_cache'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'session' => array(
        'type' => 'char',
        'length' => 30,
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'session' => array('session'),
    ),
    'primary key' => array('id'),
  );
  if (!db_table_exists('millennium_import_cache')) {
    db_create_table('millennium_import_cache', $schema['millennium_import_cache']);
  }
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('Created cache table successfully.');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function millennium_update_6003() {
  // Clear caches because of new menu entries
  menu_rebuild();
  cache_clear_all();
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('Rebuilt menu entries and cleared caches.');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function millennium_update_6004() {
  $ret = array();
  db_change_field('millennium_node_bib', 'biblio_data', 'biblio_data',
    array(
      'type' => 'text',
      'size' => 'medium',
      'not null' => TRUE,
    )
  );
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function millennium_update_6005() {
  $ret = array();
  $sources = variable_get('millennium_sources', array());
  // Move millennium_webopac_baseurl variable into the new sources variable
  $base_url = variable_get('millennium_webopac_baseurl', '');
  if ($base_url && !isset($sources[$base_url])) {
    $sources[$base_url] = array('name' => '');
  }
  // Add sources from all currently-imported records
  $result = db_query("SELECT DISTINCT(base_url) FROM {millennium_node_bib}");
  foreach ($result as $data) {
    if (!isset($sources[$data->base_url])) {
      $sources[$data->base_url] = array('name' => '');
    }
  }
  // Update/create sources variable
  variable_set('millennium_sources', $sources);
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * Implements hook_update_N().
 */
function millennium_update_7000() {
  // Convert datetime fields into timestamps
  /*
  foreach (array('millennium_node_bib', 'millennium_bib_item') as $table) {
    foreach (array('created', 'updated') as $field) {
      // TODO: Convert field values in database

      // Change field types to integer.
      db_change_field($table, $field, $field,
        array(
          'type' => 'int',
          'size' => 'medium',
          'not null' => TRUE,
        )
      );
    }
  }
   */
  // Convert taxonomy mappings settings to acommodate new taxonomy reference fields
  $variables = array(
    'millennium_marc_vid_subject_kw',
    'millennium_marc_vid_subject_time',
    'millennium_marc_vid_subject_form',
    'millennium_marc_vid_subject_geo',
    'millennium_marc_vid_leader_item_type',
    'millennium_marc_vid_year',
    'millennium_marc_vid_language',
    'millennium_marc_vid_author',
    'millennium_marc_vid_series',
    'millennium_opacname_vid',
    'millennium_availability_vid',
    'millennium_map_available_only'
  );
  $millennium_node_type = variable_get('millennium_marc_node_type', 'page');
  $field_termreference = field_info_instances('node', $millennium_node_type);
  foreach ($field_termreference as $fieldname => $fieldinfo) {
    if ($fieldinfo['widget']['module'] == 'taxonomy') {
      $field = field_info_field($fieldname);
      $vocabulary_machine_name = $field['settings']['allowed_values'][0]['vocabulary']; // TODO: field might have multi-vocabulary settings!
      $vocabularies = taxonomy_vocabulary_get_names();
      $vid = $vocabularies[$vocabulary_machine_name]->vid;
      // Scan all variables and switch to this field if it has the proper vid.
      foreach ($variables as $variable) {
        $current_value = variable_get($variable, -1);
        if ($current_value == $vid) {
          variable_set($variable, $fieldname);
        }
      }
    }
  }

  // TODO ?? What else do we have to do in hook_update_N()?
}