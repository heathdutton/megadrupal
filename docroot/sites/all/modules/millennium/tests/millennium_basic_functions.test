<?php
/**
 * @file
 * Tests for Millennium Integration module
 */

/**
 * Millennium: Basic functions tests
 */
class DrupalMillenniumBasicTests extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => 'Millennium: Basic functions tests',
      'description' => 'Verify MARC record parsing and other basic functions.',
      'group' => 'Millennium'
    );
  }

  function setUp() {
    parent::setUp('millennium');
    millennium_init();
  }

  private $marc_tests = array(
    array(
      'marc_text' => 'LEADER 00000nam  2200000 i 4500
001    88351368
008    770712s1988    hu a     b    00010 eng
020    9686127232
050    SB 191.W5|bS5 1988
100 1  Simmonds, N. W
245 10 Breeding strategies for resistance to the rusts of wheat /
       |cN. W. Simmonds and S. Rajaram
260 0  Mexico :|bCIMMYT,|c1988
300    151 p. :|bill. &#59;|c25 cm
504    Includes bibliographical references and index
650  0 Mejoramiento selectivo del trigo
700 1  Rajaram, S ',
      'biblio_data' => array(
        'title' => 'Breeding strategies for resistance to the rusts of wheat',
        'lcc' => 'SB 191.W5 S5 1988',
        'authors' => array('Simmonds, N. W', 'Rajaram, S'),
        'item_description' => '151 p. : ill. &#59; 25 cm',
        // TODO: Add more fields to compare
      )
    ),
    array(
      'marc_text' => 'LEADER 00000cam  2200337Ia 4500
001    tec012110346
003    MX-MoT
008    090325s2008    caua          001 0 eng d
020    9781430209898
020    1430209895
050  4 TK5105.8885.D78|bV36 2008
100 1  VanDyk, John K.
245 10 Pro Drupal development /|cJohn K. VanDyk.
250    2nd ed.
260    Berkeley, [Calif.] :|bApress,|cc2008.
300    xxxiii, 667 p. :|bil. ;|c24 cm.
490 1  Expert\'s voice in open source
500    "Now covers Drupal 6"--Cubierta.
500    Incluye índice.
650  0 Drupal (Computer program language)
650  0 Web site development.
650  4 Drupal (Lenguaje de programación para computadora)
650  4 Desarrollo de sitios web.
929    mty /|bmtyvescamil ;|zcemlcarrouch',
      'biblio_data' => array(
        'title' => 'Pro Drupal development',
        'lcc' => 'TK5105.8885.D78 V36 2008',
        'authors' => array('VanDyk, John K'),
        'item_description' => 'xxxiii, 667 p. : il. ; 24 cm.',
        // TODO: Add more fields to compare
      )
    )
  );

  // Helper function to test for identical arrays (keys and values)
  private function array_identical($a, $b) {
    return (is_array($a) && is_array($b) && array_diff_assoc($a, $b) === array_diff_assoc($b, $a));
  }

  function testBasicFunctions() {

    // Test MARC -> Biblio data parsing
    foreach ($this->marc_tests as $testnum => $testcase) {
      $biblio_data = millennium_marc_to_biblio($testcase['marc_text']);
      // Check marc was parsed correctly
      foreach ($testcase['biblio_data'] as $fieldname => $fieldvalue) {
        if ($fieldname) {
          if (!is_array($fieldvalue)) {
            $this->assertEqual($fieldvalue, $biblio_data[$fieldname],
              t("Test %testnum fieldname %fieldname: got value %got, expected %expected",
                array(
                  '%testnum' => $testnum,
                  '%fieldname' => $fieldname,
                  '%got' => var_export($biblio_data[$fieldname], TRUE),
                  '%expected' => var_export($fieldvalue, TRUE)
                )
              )
            );
          }
          else {
            // Compare array
            $result = $this->array_identical($fieldvalue, $biblio_data[$fieldname]);
            $this->assertTrue($result,
              t("Test %testnum fieldname %fieldname: got value %got, expected %expected",
                array(
                  '%testnum' => $testnum,
                  '%fieldname' => $fieldname,
                  '%got' => var_export($biblio_data[$fieldname], TRUE),
                  '%expected' => var_export($fieldvalue, TRUE)
                )
              )
            );
          }
        }
      }
    }

    // Test HTML holdings table -> item parsing
    $holdings_tests = array(
      array(
        '<tr  class="bibItemsEntry">
        <td width="22%" > <!-- field 1 -->&nbsp; CEM GENERAL
        </td>
        <td width="33%" > <!-- field C -->&nbsp;<a href="/search*spi/cQA76.76.P37+M49+2007/cqa+++76.76+p37+m49+2007/-3,-1,,E/browse">QA76.76.P37 M49 2007</a>&nbsp; <!-- field v -->&nbsp;&nbsp; <!-- field # -->&nbsp;</td>
        <td width="22%" > <!-- field ! --></td>
        <td width="23%" > <!-- field % -->&nbsp; DISPONIBLE</td></tr>
        ',
        array(
          'location' => 'CEM GENERAL',
          'classnumber' => 'QA76.76.P37 M49 2007',
          'classvolume' => '',
          'copy' => '',
          'message' => '',
          'status' => 'DISPONIBLE',
        )
      ),
      array(
        '
        -- EXAMPLE 2 --
        <tr  class="bibItemsEntry">

        <td width="22%" > <!-- field 1 -->&nbsp; <a href="http://biblioteca.itesm.mx/">MTY Biblioteca Digital</a>
        </td>
        <td width="33%" > <!-- field C -->&nbsp;<a href="/search*spi/cRC346+.A3+2005b/crc++346+a3+2005+b/-3,-1,,E/browse">RC346 .A3 2005b</a>&nbsp; <!-- field v -->&nbsp;&nbsp; <!-- field # -->&nbsp;</td>
        <td width="22%" > <!-- field ! --></td>
        <td width="23%" > <!-- field % -->&nbsp; DISPONIBLE</td></tr><tr><td align="center" colspan="4">

        <a href="http://xxxxxxxxxxxxxxxxxxx/resourceTOC.aspx?resourceID=54">Consultar el servicio a través de la Biblioteca Digital
        </td></tr>
        ',
        array(
          'location' => 'MTY Biblioteca Digital',
          'classnumber' => 'RC346 .A3 2005b',
          'classvolume' => '',
          'copy' => '',
          'message' => '',
          'status' => 'DISPONIBLE',
          'link' =>
          array(
            'url' => 'http://xxxxxxxxxxxxxxxxxxx/resourceTOC.aspx?resourceID=54',
            'title' => 'Consultar el servicio a través de la Biblioteca Digital',
          ),
        )
      ),
      array('
        -- EXAMPLE 3 --
        <tr  class="bibItemsEntry">

        <td width="28%" > <!-- field 1 -->&nbsp; CCM HEMEROTECA
        </td>

        <td width="42%" > <!-- field C -->&nbsp;<a href="/search*spi/cF1201+N49/cf++1201+n49/-3,-1,,E/browse">F1201 N49</a>&nbsp; <!-- field v -->15: 1992 Ene.-Mar.&nbsp; <!-- field # -->&nbsp;</td>
        <td width="30%" > <!-- field % -->&nbsp; DISPONIBLE</td></tr>
        ',
        array(
          'location' => 'CCM HEMEROTECA',
          'classnumber' => 'F1201 N49',
          'classvolume' => '15: 1992 Ene.-Mar.',
          'copy' => '',
          'status' => 'DISPONIBLE',
        )
      ),
      array(
        '
        -- EXAMPLE 4 --
        <tr  class="bibItemsEntry">

        <td width="30%" ><!-- field $ -->&nbsp;DEN Main
        </td>

        <td width="40%" ><!-- field C -->&nbsp;BP365 .E8 <!-- field # --><!-- field v -->&nbsp;1970 <!-- field ! --><!-- field y --><a href="/search~S6?/cBP365+.E8/cbp++365+e8/-3,-1,,E/browse"><strong>Show Nearby Items On Shelf</strong></a></td>
        <td width="30%" ><!-- field % -->&nbsp;CHECK SHELVES </td></tr>
        ',
        array(
          'location' => 'DEN Main',
          'classnumber' => 'BP365 .E8',
          'copy' => '',
          'classvolume' => '1970',
          'message' => '',
          '????' => 'Show Nearby Items On Shelf',
          'status' => 'CHECK SHELVES',
        )
      ),
      array(
        '
        -- EXAMPLE 5 --
        http://catalog.waukeganpl.org/record=b1292762&searchscope=0
        <tr class="bibItemsEntry">

        <td width="35%"><!-- field 1 -->&nbsp;Childrens Magazine
        </td>
        <td width="41%"><!-- field C -->&nbsp;MAGAZINE <!-- field v -->&nbsp;no.26 Nov 2008 <!-- field # -->&nbsp;<a href="/search~S7?/cMAGAZINE/cmagazine/-3,-1,,E/browse"><img border="0" alt="Nearby on shelf" src="/screens/bullet.gif"></a></td>
        <td width="24%"><!-- field % -->&nbsp;DUE 08-31-09BILLED </td></tr>
        ',
        array(
          'location' => 'Childrens Magazine',
          'classnumber' => 'MAGAZINE',
          'classvolume' => 'no.26 Nov 2008',
          'copy' => '',
          'status' => 'DUE 08-31-09BILLED',
        )
      )
    );
    foreach ($holdings_tests as $testnum => $test) {
      $items = millennium_parse_holdings_from_html($test[0]);
      $parsed = $items[0];
      $should_be = $test[1];
      $this->assertEqual($parsed, $should_be, t("Holdings parser test %testnum", array('%testnum' => $testnum)));
    }

    // Test the get_real_baseurl parser
    // Bad URLs
    $bad_urls = explode('|', 'http:/example.com|example.com|ftp://example.com');
    foreach ($bad_urls as $bad_url) {
      $this->assertFalse(millennium_get_real_baseurl($bad_url), "Bad base URL");
    }
    // Good URLs
    $this->assertEqual(millennium_get_real_baseurl("http://example.com"), "http://example.com", "Good base URL");
    $this->assertEqual(millennium_get_real_baseurl("http://example.com:2082/"), "http://example.com:2082", "Good base URL");
    $this->assertEqual(millennium_get_real_baseurl("https://example.com:2082/foo/bar"), "https://example.com:2082", "Good base URL");

    // Test biblio data storage/retrieval
    // TODO

    // Test biblio data -> node object conversion
    // TODO

    // Test biblio data -> taxonomy mapping
    // TODO

    // Test biblio data -> CCK field mapping
    // TODO

    /**
     *  Test crawling functions
     */

    // Include needed files
    require_once drupal_get_path("module", "millennium") . "/millennium.import.inc";

    // Test the OPAC pinging function
    $opacs_baseurls = array(
      'http://millennium.itesm.mx',
      'http://library.dcccd.edu',
      'http://catalog.nypl.org',
      'http://www.consuls.org',
      'http://www.helmet.fi',
      'http://eleanor.lib.gla.ac.uk',
    );
    foreach ($opacs_baseurls as $base_url) {
      $this->assertTrue(millennium_ping($base_url), t('Pinging %baseurl', array('%baseurl' => $base_url)));
    }

    // Test the OPAC search result scraping function
    require_once(drupal_get_path('module', 'millennium') . '/millennium.import.inc');
    foreach ($opacs_baseurls as $base_url) {
      $records = millennium_query_scrape("test OR how", $base_url, 10);
      $this->assertEqual(sizeof($records), 10, t('Scraping query at %baseurl', array('%baseurl' => $base_url)));
    }

    // Some known OPAC base urls
    $opacs_baseurls = array(
      'http://millennium.itesm.mx',
      'http://www.consuls.org',
      'http://www.helmet.fi',
      'http://eleanor.lib.gla.ac.uk',
      'http://catalog.waukeganpl.org',
      'http://search.pvld.org',
    );

    // Test the OPAC search result scraping function
    $records = array();
    foreach ($opacs_baseurls as $base_url) {
      $records[$base_url] = millennium_query_scrape("mattype:mattypea", $base_url, 10);
      $record_count = sizeof($records[$base_url]);
      $this->assertTrue(($record_count == 10), t('Scraping query for at least 10 records at %baseurl', array('%baseurl' => $base_url)));
    }


    // Test the book cart fetching function
    foreach ($records as $base_url => $recnums) {
       // Only use successful fetches (10 out of 10) from the earlier tests
       if (sizeof($recnums) != 10) {
         continue;
       }
       $result = millennium_fetch_records_via_bookcart($recnums, FALSE, $base_url);
       $count_found = sizeof($result['found']);
       $this->assertTrue(($count_found >= 9), t('Bookcart fetch %count out of 10 records at %baseurl', array('%count' => $count_found, '%baseurl' => $base_url)));
    }
  }

  /*
  function testTaxonomyAssign() {
    // Create a node type to import records into
    $test_node_type = $this->DrupalCreateContentType();
    $this->assertEqual(1, 1, var_export($test_node_type, TRUE));

    // Create a tags taxonomy
    $vocabulary = array(
      'name' => 'Millennium simpletest vocabulary',
      'description' => '',
      'help' => '',
      'nodes' => array($test_node_type->type => TRUE), // Use the newly-created node type
      'hierarchy' => 0,
      'relations' => 1, // allow related terms
      'tags' => 1,
      'multiple' => 0,
      'required' => 0,
      'weight' => 0,
      'module' => 'taxonomy',
      'type' => array($test_node_type->type),
    );
    taxonomy_save_vocabulary($vocabulary);
    $test_vid = $vocabulary['vid'];
    $this->assertEqual(1, 1, var_export($vocabulary, TRUE));

    // Set up sources
    $test_base_url = 'http://example.com';
    $sources = array(
      $test_base_url => array('name' => 'OPAC Name')
    );
    variable_set('millennium_sources', $sources);
    $this->assertEqual(1, 1, var_export($sources, TRUE));

    // Build a new node
    $node = $this->drupalCreateNode(array('type' => $test_node_type->type));

    // Test opacname taxonomy assignment
    $node_tmp = $node;
    millennium_add_taxonomy_opacname_to_node($node_tmp, 'http://example.com');
    variable_set('millennium_opacname_vid', $test_vid);
    $this->debug($node_tmp);
    $this->assertEqual('"' . $sources[$test_base_url]['name'] . '"', $node_tmp->taxonomy['tags'][$test_vid],
      "Name = " . $sources[$test_base_url]['name'] . " Tags = " . var_export($node_tmp, TRUE));
  }
  */
}
