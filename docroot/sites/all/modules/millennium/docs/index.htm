<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Documentation: Millennium Integration module for Drupal</title>
</head>
<body>
<div id="node-20" class="section-1">
<h1 class="book-heading">Documentation: Millennium Integration module for Drupal</h1>
<p>This module is oriented towards libraries with Innovative Interfaces Inc.'s Millennium who want to import or expose some of its information in a Drupal site.</p>
<p>It can:</p>
<ul>
<li>Import bibliographic information into Drupal nodes which can display real-time item availability, cover images, tables of contents and book previews obtained from the Library of Congress, Open Library and Google Books.
</li><li>Embed book record information in existing nodes (for instance, to build bibliography or highlighted item lists).
</li></ul>

<div id="node-21" class="section-2">
<h1 class="book-heading">Introduction</h1>
<p>This module is oriented towards libraries with Innovative Interfaces Inc.'s Millennium who want to import or expose some of its information in a Drupal site. </p>
<p>It can:</p>
<ul>
<li>Import bibliographic information into Drupal nodes which can display real-time  item availability, cover images, tables of contents and book previews obtained from the Library of Congress, Open Library and Google Books.
</li><li>Embed book record information in existing nodes (for instance, to build bibliography or highlighted item lists).
</li></ul>
<p>Features:</p>
<ul>
<li>auto-crawl or manual import of items from the WebOPAC.
</li><li>support for external book jacket image services.
</li><li>choose between real-time holdings information or just a link to the original item in your WebOpac.
</li><li>maps MARC fields to taxonomy vocabularies for navigation and RSS. Via the optional (included) modules:
</li><li>imports Library of Congress book description and Table of Contents along with item, available for searching.
</li><li>Google Books links for items available online.
</li><li>Allows embedding one or more records in the body of existing nodes using the syntax {{millennium|[recordnumber]}} or {{millennium|[url]}}
</li></ul>
<p>This module works best when used with some other modules:</p>
<ul>
<li><a href="http://drupal.org/project/hilcc">HILCC Taxonomy Autotag</a>: will automatically build a hierarchical subject taxonomy using the items' LCC call numbers.
</li><li><a href="http://drupal.org/project/faceted_search">Faceted Search</a> or <a href="http://drupal.org/project/apachesolr">Apache Solr Search Integration</a>: let users drill down into your catalog.
</li><li><a href="http://drupal.org/project/similarterms">Similar by Terms</a> (or Apache Solr Search's recommendation blocks): get recommendations for similar items.
</li><li><a href="http://drupal.org/project/fivestar">Fivestar</a>: let users rate items.
</li><li><a href="http://drupal.org/project/flag">Flag</a>: let users "favorite" their items.
</li></ul>
<p>Basically, the module works as follows:</p>
<ul>
<li>You must first configure module settings, to tell the module where your WebOPAC is, and how to import records.
</li><li>You can import records manually (see below) or automatically (during cron).
</li><li>Records are imported into nodes, with links back to the original item and, if you configured it to do so, you will see the realtime holdings information fetched from the WebOPAC.
</li><li>If you want to see the moduleÂ´s progress, go to to admin/reports/dblog or go to admin/reports/millennium for a detailed view.
</li></ul>
</div>
  
<div id="node-22" class="section-2">
  <h1 class="book-heading">Setup</h1>
  <h2>Installation</h2>
<ul>
<li>This module requires PHP5.
</li><li>Install this module as usual, see <a href="http://drupal.org/node/70151" title="http://drupal.org/node/70151">http://drupal.org/node/70151</a> for further information.
</li><li>(Required for Auto-crawl) Enable Cron for your site: see <a href="http://drupal.org/cron" title="http://drupal.org/cron">http://drupal.org/cron</a>
</li><li>Read the instructions below for more setup instructions.
</li></ul>
<h2>Configuration (for importing items)</h2>
<p><strong>Note: If you just want to embed book information in nodes, you can skip to the <a href="#node-19">Millennium Input Filter module's documentation</a>.</strong></p>
<p>To fill your Drupal site with records from a library catalog, you should follow these steps.</p>
<ol>
  <li>(Optional) Create a new Drupal Content Type to put your items into.
  <ul>
    <li>Go to Administer -&gt; Content Types
    </li><li>Click on the "Add Content Type" tab
    </li><li>Fill in "Name" and "Type"; Name could be something like "Library Items" and Type is a lowercase word like "libraryitem".
        </li>
  </ul>
  </li>
  <li>(Optional) Set up taxonomy categories for your items, so that each imported item can then be properly tagged:
  <ul>
    <li>Create taxonomy free-tagging vocabularies for each one of these:
    <ul>
      <li>Subjects</li>
      <li>Document type</li>
      <li>Language</li>
      <li>Author</li>
    </ul>
    If case you haven't created vocabularies before, here is a quick step-by-step:
    <ul>
      <li>Go to: Administer -&gt; Content Management -&gt; Categories</li>
      <li>Click on the "Add Vocabulary" tab.</li>
      <li>Enter the Vocabulary's name (e.g.: Subject: keyword).</li>
      <li>Below enable "tags" for the vocabulary.</li>
      <li>Enale the vocabulary for the node type you will be importing items into.</li>
      <li>Save changes.</li>
      <li>Repeat for another vocabulary.</li>
    </ul>
    </li>
  </ul>
  </li>
  <li>Now, go to the administration section at admin/settings/millennium and enter the required settings:
  <ul>
    <li><strong>General</strong> tab:
    <ul>
      <li>Content type to import records into:<br />
      If you created one in the above optional step, choose it now.</li>
      <li>WebOpac Base URL:<br />
      This is the base URL for your webopac. For example: <a href="http://library.org/" title="http://library.org/">http://library.org/</a></li>
    </ul>
    </li>
    <li><strong>Taxonomy mapping</strong> tab:<br />
    If you set up Drupal taxonomy with the above optional steps, you can now select which vocabularies will hold imported data like Subjects, Authors, Language and more.
    </li>
    <li><strong>Display</strong> tab:
    <ul>
      <li>Display real-time holdings information:<br />
      Choose when users will see holdings information.
      </li>
    </ul>
    </li>
  </ul>
  </li>
</ol>
<h2>Permissions</h2>
<p>You can also set different permissions for your roles at admin/user/permissions#millennium :</p>
<ul>
<li><strong>view millennium marc</strong>:<br />
lets specified roles have access to MARC views of imported records thru a "MARC view" option on the node.
</li><li><strong>administer millennium</strong>:<br />
lets specified roles change all the configuration options at admin/settings/millenium
</li><li><strong>import single millennium items</strong>:<br />
lets specified roles import single items at 
</li><li><strong>use millennium mass import/refresh</strong>:<br />
lets users add or refresh items massively at admin/content/millennium
</li></ul>
  </div>
  
<div id="node-26" class="section-2">
  <h1 class="book-heading">Importing items</h1>
  <p>You have several ways to import records:</p>
<table>
<tbody><tr valign="top" class="even">
<td>
<dl>
<dt>Manual import:</dt>
<dd>You can specify a specific list or range of bibliographic or 
item numbers to import. You can specify to import them inmediately 
(using Drupal's Batch API) or to queue them to be processed during cron 
runs. Doing a small batch import is a good way to test your setup.
</dd></dl>
</td>
<td><img src="files/import-batch.png" alt="" /></td></tr>
<tr valign="top" class="odd">
<td>
<dl>
<dt>Auto-crawl:</dt>
<dd>Specify a beginning and (estimated) ending record number and the 
module will try to fetch records one by one automatically during cron 
runs. See <a href="#node-23">Import via auto-crawl</a> for more information.</dd></dl>
</td><td>
<img src="files/import-crawl.png" alt="" /></td></tr>
<tr valign="top"  class="even">
<td>
<dl>
<dt>One-by-one import:</dt>
<dd>You can go to the URL millennium/preview?url=[record URL] and 
you will be shown a preview showing how that record would be imported 
using your current settings. To import, click on the "Import now" link.</dd></dl>
</td><td>
<img src="files/import-preview.png" alt=""/>
</td></tr>
</tbody></table>

<div id="node-23" class="section-3">
  <h1 class="book-heading">Importing via auto-crawl</h1>
  <p>Go to the administration section at admin/settings/millennium, and enter the required settings:</p>
<ul>
<li><strong>Automatic crawl enabled</strong>:<br />
mark it as "enabled"
</li><li><strong>Starting record number for crawl</strong>:<br />
    the bib record number, MINUS the starting .b or .i<br />
    For example,  if you wanted to import from record .b120000 you would type "120000"
</li><li><strong>Ending record number</strong>:<br />
    Your estimated ending record number. This number grows on its own when the module reaches it and still finds records after it (so don't worry) =)
</li><li><strong>Restart crawl from above starting record?</strong>:<br />
    Check this box whenever you want to restart the crawl from the beginning. (Only necessary if you're testing your setup).
</li></ul>
<p>Now, each time the Drupal Cron process is run, a few records will be imported.<br />
How many depends on the option "Items to import per Cron run". When the module finds a large gap in consecutive item numbers, it will restart from the beginning.</p>
<p>Remember, you can always run cron manually (see <a href="http://drupal.org/node/158922" title="http://drupal.org/node/158922">http://drupal.org/node/158922</a>) or set up Cron to run automatically (see <a href="http://drupal.org/cron" title="http://drupal.org/cron">http://drupal.org/cron</a>)</p>
  </div>
</div>

<div id="node-19" class="section-2">
  <h1 class="book-heading">Embed book information in nodes: the Millennium Input Filter module</h1>
  <h2>About the Millennium Input Filter</h2>
<p>Millennium Input Filter embeds book information in nodes, by letting 
you add a token inside the node body. The token includes a record number
 or URL which specifies the item to embed.</p>
<p>For instance, typing the following text in a node body would insert 2 items from the library catalog at Consuls.org:</p>
<p><img src="files/filter-edit.png" alt="" /></p>
<p>When you view the node, it would look something like this:</p>
<p><img src="files/filter-view.png" alt="" /></p>
<p>You also can configure what fields to show (see below).</p>
<p>NOTE: Remember to pick the proper Input Format before saving the node!</p>
<h2>Installation and usage</h2>
<ol>
<li>Enable the "Millennium Filter" module at admin/build/modules, under the "Millennium" fieldset.
</li><li>Go to admin/settings/filters and click "configure" beside one of the enabled input formats (or create a new input format).
</li><li>Find the checkbox for "Millennium Filter", and click "Save configuration".
</li><li>Optionally, you can go to the "Configure" tab for the Input Filter and change the settings under the "Millennium Records Filter" fieldset, to change the fields to show.
</li><li>Create a new node.
</li><li>Select the just-modified input format under the body field.
</li><li>Use any of these syntaxes to add a record display inside the body:<br />
<pre>    {{millennium|b123456}}
    {{millennium|i123456}}
    {{millennium|http://example.org/record=b123456}}
    {{millennium|http://example.org/any/link/to/a/single/record/in/WebOPAC}}
</pre><p>Note the first two examples would try to fetch the record information from the currently-configured WebOPAC in the Millennium module settings (admin/settings/millennium).
</p></li></ol>
<p>Note the URL syntax allows any URL as long as it leads to a single record. For example, the following are equivalent:</p>
<pre>    {{millennium|http://catalog.nypl.org/record=b17496311~S1}}

    {{millennium|http://catalog.nypl.org/search~S1?/Xharry+potter+and+the
    +philosopher%27s&amp;searchscope=1&amp;SORT=D/Xharry+potter+and+the+philosoph
    er%27s&amp;searchscope=1&amp;SORT=D&amp;SUBKEY=harry%20potter%20and%20the%20philo
    sopher%27s/1%2C20%2C20%2CB/frameset&amp;FF=Xharry+potter+and+the+philosop
    her%27s&amp;searchscope=1&amp;SORT=D&amp;1%2C1%2C}}
</pre>
</div>
  
<div id="node-25" class="section-2">
<h1 class="book-heading">Developer information (API, hooks)</h1>
<p>Exposed hooks:</p>
<dl>
<dt>hook_millennium_biblio_data_alter(&amp;$biblio, $marc)</dt>
<dd>Lets other modules add/change custom bibliographic data when storing biblio data in the database. Arguments:
<ul>
<li>$biblio is the biblio information array
</li><li>$marc is the parsed MARC record
  </li></ul>
</dd>
<dt>hook_millennium_load_biblio_data_alter($node, &amp;$biblio)</dt>
<dd>Lets other modules add/change custom bibliographic data when fetching it from the database. This hook is invoked from within hook_nodeapi($op=load). Arguments:
<ul>
<li>$node is the node object 
</li><li>$biblio_data is the biblio data array
 </li></ul>
 </dd>
<dt>hook_millennium_continue_process_record($node, $data, $force_update)</dt>
<dd>Allows other modules to continue or skip importing of a record by returning TRUE (allow) or FALSE (skip this record). Arguments:
<ul>
<li>$node is the node object generated from a Millennium record
</li><li>$data is the incoming Millennium record array
</li><li>$force_update is the current active setting to force updating existing records.
   </li></ul>
</dd>
</dl>   
  </div>
  
<div id="node-24" class="section-2">
  <h1 class="book-heading">More information</h1>
  <p>See the project's page at <a href="http://drupal.org/project/millennium" title="http://drupal.org/project/millennium">http://drupal.org/project/millennium</a></p>
  </div>
</div>
</body>
</html>
