<?php

/**
 * @file
 * Integrates Paybox payment service.
 *
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implements hook_menu().
 */
function uc_paybox_menu() {

  // Callback functions for Paybox.
  $items['cart/paybox/effectue'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_paybox_effectue',
    'access callback' => 'uc_paybox_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_paybox.pages.inc',
  );
  $items['cart/paybox/refuse'] = array(
    'title' => 'Order refused',
    'page callback' => 'uc_paybox_refuse',
    'access callback' => 'uc_paybox_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_paybox.pages.inc',
  );
  $items['cart/paybox/annule'] = array(
    'title' => 'Order canceled',
    'page callback' => 'uc_paybox_annule',
    'access callback' => 'uc_paybox_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_paybox.pages.inc',
  );
  $items['cart/paybox/auto'] = array(
    'title' => 'Order auto',
    'page callback' => 'uc_paybox_auto',
    'access callback' => 'uc_paybox_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_paybox.pages.inc',
  );

  return $items;
}

// Make sure anyone can complete their Paybox orders.
function uc_paybox_completion_access() {
  return TRUE;
}

/**
 * Implements hook_init().
 */
function uc_paybox_init() {
  global $conf;
  $conf['i18n_variables'][] = 'uc_paybox_method_title';
  $conf['i18n_variables'][] = 'uc_paybox_method_descr';
  $conf['i18n_variables'][] = 'uc_paybox_checkout_button';
}

/**
 * Implements hook_ucga_display().
 */
function uc_paybox_ucga_display() {
  // Tell UC Google Analytics to display the e-commerce JS on the custom
  // order completion page for this module.
  if (arg(0) == 'cart' && arg(1) == 'paybox' && arg(2) == 'effectue') {
    return TRUE;
  }
}
/**
 * Implements hook_form_alter().
 */
function uc_paybox_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_store_format_settings_form') {
    $form['currency']['uc_currency_code']['#description'] .= ' ' . t('Paybox only accepts the following currencies: @list', array('@list' => implode(', ', array_keys(_uc_paybox_currency(FALSE)))));
  }
  elseif ($form_id == 'uc_cart_checkout_form') {
    // Cache the Paybox details for use in other functions.
    if (isset($_SESSION['sespb'])) {
      uc_paybox_cache('save', $_SESSION['sespb']);
      // Store the encrypted details to the form for processing on submit.
      $form['payment_details_data'] = array(
        '#type' => 'hidden',
        '#value' => $_SESSION['sespb'],
      );
      // Clear the session of the details.
      unset($_SESSION['sespb']);
    }
  }
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_paybox_uc_payment_gateway() {
  if (!module_exists('uc_credit')) {
    drupal_set_message(t('You must <a href="@modules">enable the Credit Card module</a> to use Paybox Direct.', array('@modules' => url('admin/modules', array('fragment' => 'edit-modules-ubercart-payment')))), 'warning');
    return;
  }

  $gateways['paybox_direct'] = array(
    'title' => t('Paybox Direct'),
    'description' => t('Process credit card payments using Paybox direct service.'),
    'settings' => 'uc_paybox_direct_settings_form',
    'credit' => 'uc_paybox_direct_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}

/**
 * Settings for Website Payments Pro on the credit card gateways form.
 *
 * This provides a subset of the Express Checkout settings.
 */
function uc_paybox_direct_settings_form($form, &$form_state) {
  $order = NULL;
  $form = uc_payment_method_paybox('settings', $order);
  unset($form['system'], $form['intro']);
  // add extra setting
  $form['uc_paybox_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Paybox key'),
    '#description' => t('The value of this field corresponds to the back office password which can be requested from the technical support team and sent by fax only to the retailer. If empty, will be set to <strong>Demo mode</strong>.'),
    '#default_value' => variable_get('uc_paybox_key', ''),
    '#size' => 24,
    '#weight' => 0,
  );
  return $form;
}

/**
 * Processes a credit card payment through Website Payments Pro.
 */
function uc_paybox_direct_charge($order_id, $amount, $data) {
  global $user;
  $order = uc_order_load($order_id);

  if (variable_get('uc_paybox_site', '') == '') {
    $paybox_site = '1999888';
  }
  else {
    $paybox_site = variable_get('uc_paybox_site', '1999888');
  }
  if (variable_get('uc_paybox_rang', '') == '') {
    $paybox_rang = '99';
  }
  else {
    $paybox_rang = variable_get('uc_paybox_rang', '99');
  }
  if (variable_get('uc_paybox_key', '') == '') {
    $paybox_key = '1999888I';
  }
  else {
    $paybox_key = variable_get('uc_paybox_key', '1999888I');
  }
  if (variable_get('uc_paybox_identifiant', '') == '') {
    $paybox_id = '2';
  }
  else {
    $paybox_id = variable_get('uc_paybox_identifiant', '2');
  }

  // Build the POST data for the transaction.
  $submit_data = array(
    'VERSION' => '00104', // Paybox direct plus
    'DATEQ' => format_date(time(), 'custom', 'dmYHis'),
    'TYPE' => _uc_paybox_txn_map($data['txn_type']),
    'NUMQUESTION' => $order->order_id . date('His'),
    'SITE' => $paybox_site,
    'RANG' => $paybox_rang,
    'CLE' => $paybox_key,
    'IDENTIFIANT' => $paybox_id,
    'MONTANT' => number_format($amount, 2, variable_get('uc_currency_dec', '.'), '') * 100,
    'DEVISE' => variable_get('uc_paybox_devise', '978'),
    'REFERENCE' => $order->order_id . '-' . $user->uid . '-' . date('d/m/Y_H:i:s'), // 250c
    'PORTEUR' => $order->payment_details['cc_number'],
    'DATEVAL' => str_pad($order->payment_details['cc_exp_month'], 2, '0', STR_PAD_LEFT) . substr($order->payment_details['cc_exp_year'], -2),
    'CVV' => $order->payment_details['cc_cvv'],
    'ACTIVITE' => '024',
    //'ERRORCODETEST' => '00143',
    //'ID3D' => '',
  );

  // Translate the data array into a string we can POST.
  $post_fields = array();
  foreach ($submit_data as $key => $value) {
    $post_fields[] = $key . '=' . urlencode($value);
  }

  // Determine the correct URL based on the transaction mode.
  if (variable_get('uc_paybox_mode', 'prod') == 'preprod') {
    $post_url = 'https://preprod-ppps.paybox.com/PPPS.php ';
  }
  else {
    $post_url = 'https://ppps.paybox.com/PPPS.php';
  }

  $response = _uc_paybox_curl_request($post_url, $post_fields);

  if (variable_get('uc_paybox_debug', FALSE) == TRUE) {
    drupal_set_message('<pre>' . print_r($response, TRUE) . '</pre>');
  }

  // Don't log this as a payment money wasn't actually captured.
  if (in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY))) {
    $result['log_payment'] = FALSE;
  }

  if (!$response) {
    return array('success' => FALSE);
  }

  if (isset($response['CODEREPONSE'])) {
    if ($response['CODEREPONSE'] != '00000') {
      $result = array(
        'success' => FALSE,
        'message' => t('Credit card payment declined: !code - @message', array('!code' => $response['CODEREPONSE'], '@message' => $response['COMMENTAIRE'])),
        'uid' => $user->uid,
      );
    }
    else {
      // Build a message for display and comments in the payments table.
      $message = t('Type: @type<br />AUTORISATION: @auth<br />NUMTRANS: @trans', array('@type' => _uc_paybox_txn_type($data['txn_type']), '@auth' => $response['AUTORISATION'], '@trans' => $response['NUMTRANS']));
      $result = array(
        'success' => TRUE,
        'comment' => $message,
        'message' => $message,
        'uid' => $user->uid,
      );
      uc_order_comment_save($order->order_id, $user->uid, $message, 'admin');
    }
  }
  return $result;
}

function _uc_paybox_curl_request($post_url, $post_fields) {
  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $post_fields));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('uc_paybox', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // parse response
  parse_str($result, $response);

  // bad server, switch
  if (isset($response['CODEREPONSE']) && $response['CODEREPONSE'] == '00001') {
    if ($post_url == 'https://ppps1.paybox.com/PPPS.php') {
      $post_url = 'https://ppps2.paybox.com/PPPS.php';
    }
    else {
      $post_url = 'https://ppps1.paybox.com/PPPS.php';
    }
    _uc_paybox_curl_request($post_url, $post_fields);
  }
  else {
    return $response;
  }
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_paybox_uc_payment_method() {
  $logo = variable_get('uc_paybox_method_title_icons', '0');
  if ($logo === "0") {
    $title = '';
  }
  else {
    $img = drupal_get_path('module', 'uc_paybox') . '/images/logo/' . $logo;
    $alt = variable_get('uc_paybox_method_title', t('Credit card on a secured server.'));
    $title = theme('image', array('path' => $img, 'title' => $alt, 'alt' => $alt));
  }

  $methods[] = array(
    'id' => 'paybox',
    'name' => t('Paybox System'),
    'title' => $title . variable_get('uc_paybox_method_title', t('Credit card on a secured server')),
    'review' => t('Paybox'),
    'desc' => variable_get('uc_paybox_method_descr', t('Redirect to Paybox to pay by credit card.')),
    'callback' => 'uc_payment_method_paybox',
    'redirect' => 'uc_payment_method_paybox_form',
    'weight' => 0,
    'checkout' => FALSE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Returns the form elements for the Website Payments Standard form.
 */
function uc_payment_method_paybox_form($form, &$form_state, $order) {
  if (isset($_SESSION['sespb'])) {
    $payment_details = unserialize($_SESSION['sespb']);
    list($type_paiement, $type_carte) = explode('|', $payment_details['uc_paybox_typepaiement']);
    $chaine['PBX_TYPEPAIEMENT'] = $type_paiement;
    $chaine['PBX_TYPECARTE'] = $type_carte;
  }

  if (variable_get('uc_paybox_mode', 'prod') == 'preprod') {
    $url = 'https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi';
  }
  else {
    $url = 'https://tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi';
  }
  $chaine['PBX_PAYBOX'] = $url;
  //$chaine['PBX_BACKUP1'] = $url;
  //$chaine['PBX_BACKUP2'] = $url;

  $chaine['PBX_MODE'] = "4";
  if (variable_get('uc_paybox_site', '') == '') {
    $chaine['PBX_SITE'] = "1999888";
  }
  else {
    $chaine['PBX_SITE'] = variable_get('uc_paybox_site', '1999888');
  }
  if (variable_get('uc_paybox_rang', '') == '') {
    $chaine['PBX_RANG'] = "99";
  }
  else {
    $chaine['PBX_RANG'] = variable_get('uc_paybox_rang', '99');
  }
  if (variable_get('uc_paybox_identifiant', '') == '') {
    $chaine['PBX_IDENTIFIANT'] = "2";
  }
  else {
    $chaine['PBX_IDENTIFIANT'] = variable_get('uc_paybox_identifiant', '2');
  }
  $chaine['PBX_TOTAL'] = number_format($order->order_total, 2, variable_get('uc_currency_dec', '.'), '') * 100;
  $chaine['PBX_CMD'] = $order->order_id;
  $chaine['PBX_PORTEUR'] = $order->primary_email;
  $chaine['PBX_DEVISE'] = variable_get('uc_paybox_devise', '978');
  // sign must be the last request !
  $chaine['PBX_RETOUR'] = "'montant:M;orderid:R;erreur:E;uniqueid:S;sign:K;'";
  $chaine['PBX_LANGUE'] = variable_get('uc_paybox_language', 'FRA');
  $chaine['PBX_EFFECTUE'] = _uc_paybox_url() . 'cart/paybox/effectue';
  $chaine['PBX_REFUSE'] = _uc_paybox_url() . 'cart/paybox/refuse';
  $chaine['PBX_ANNULE'] = _uc_paybox_url() . 'cart/paybox/annule';
  $chaine['PBX_REPONDRE_A'] = _uc_paybox_url() . 'cart/paybox/auto';
  $chaine['PBX_OUTPUT'] = "D";

  $path_bin = variable_get('uc_paybox_cgi_path', '');
  $chaine_string = '';
  foreach ($chaine AS $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
    $chaine_string .= ' ' . $name . "=" . $value . "";
  }

  putenv("QUERY_STRING=''");
  putenv("CONTENT_LENGTH=''");
  $pbx_data = shell_exec(trim($path_bin . $chaine_string));
  if (!$pbx_data) {
    drupal_set_message(t('An error has occured during payment, please contact us.'), 'error');
    watchdog('uc_paybox', 'CGI error: order @orderid, path: @path', array('@orderid' => $order->order_id, '@path' => $path_bin . $chaine_string), WATCHDOG_WARNING);
    drupal_goto('cart');
  }

  $form['PBX_DATA'] = array(
    '#type' => 'hidden',
    '#value' => trim($pbx_data),
  );

  $form['#action'] = $url;
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('uc_paybox_checkout_button', t('Submit Order')),
  );
  return $form;
}

/**
 * Implements hook_uc_store_status().
 */
function uc_paybox_uc_store_status() {
  $message = array();
  // Warning about "demo mode"
  if (variable_get('uc_paybox_site', '') == '' || variable_get('uc_paybox_rang', '') == '' || variable_get('uc_paybox_identifiant', '') == '' ) {
    $message[] = array(
      'status' => 'warning',
      'title' => t('Paybox'),
      'desc' => t('Paybox is working in <strong>demo mode</strong> because no site, rank and/or identifier is set. Please see <a href="@settings">Paybox settings</a>', array('@settings' => url('admin/store/settings/payment/method/paybox'))),
    );
  }
  // Error about the cgi
  $cgi = variable_get('uc_paybox_cgi_path', '');
  if (($cgi == '') || !is_file($cgi)) {
    $message[] = array(
      'status' => 'error',
      'title' => t('Paybox'),
      'desc' => t('The Paybox module need cgi. Please refer to paybox documentation. Please see <a href="@settings">Paybox settings</a>', array('@settings' => url('admin/store/settings/payment/method/paybox'))),
    );
  }
  if (is_file($cgi)) {
    // Check cgi permission
    $perm = substr(sprintf('%o', fileperms($cgi)), -4);
    if (strpos($perm, '07') === FALSE) {
      $message[] = array(
        'status' => 'error',
        'title' => t('Paybox'),
        'desc' => t('Paybox cgi must have owner execution permission (CHMOD 0744).'),
      );
    }
  }
  return $message;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for paybox payment method settings.
 */
function uc_payment_method_paybox($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'cart-details':
      $details = uc_payment_method_paybox_type_form(array(), $form_state, $order);
      return $details;

    case 'cart-review':
      $review = array();
      if (isset($_SESSION['sespb'])) {
        $payment_types = _uc_paybox_payment_type();
        $payment_details = unserialize($_SESSION['sespb']);
        $payment_type = $payment_types[$payment_details['uc_paybox_typepaiement']];
        if ($payment_type) {
          $review[] = array('title' => t('Card Type'), 'data' => $payment_type);
        }
      }
      return $review;

    case 'cart-process':
      if (!isset($form_state['values']['panes']['payment']['details'])) {
        return TRUE;
      }
      $rc = TRUE;
      // Fetch the Paybox details from the $_POST directly.
      $uc_paybox_data = $form_state['values']['panes']['payment']['details'];
      if (!$uc_paybox_data['uc_paybox_typepaiement']) {
        drupal_set_message(t('Payment Type field is required.'), 'error');
        $rc = FALSE;
      }
      // Go ahead and put the Paybox data in the payment details array.
      $order->payment_details = $uc_paybox_data;
      $_SESSION['sespb'] = serialize($order->payment_details);
      return $rc;

    case 'settings':
      $url = _uc_paybox_url();
      $urlauto = $url . 'cart/paybox/auto';

      $form['intro'] = array(
        '#prefix' => '<div class="help">',
        '#markup' => t('You can configure your Paybox account, this url are given on payment call, so it can be optional:') . '<ul><li>' .
        t('URL address back OK: %url', array('%url' => $url . 'cart/paybox/effectue')) . '</li><li>' .
        t('URL address back ERROR: %url', array('%url' => $url . 'cart/paybox/refuse')) . '</li><li>' .
        t('URL address back CANCEL: %url', array('%url' => $url . 'cart/paybox/annule')) . '</li></ul>' .
        t('IMPORTANT: you must give Paybox this url as auto notification url.') . '<br/>' . t('Payment are validated only with this notification system !') . '<ul><li>' .
        t('AUTO URL: %url', array('%url' => $url . 'cart/paybox/auto')) . '</li></ul>',
        '#suffix' => '</div>',
      );
      $form['uc_paybox_site'] = array(
        '#type' => 'textfield',
        '#title' => t('Paybox site number'),
        '#description' => t('Your site number from Paybox, if empty, will be set to <strong>Demo mode</strong>.'),
        '#default_value' => variable_get('uc_paybox_site', ''),
        '#size' => 72,
      );
      $form['uc_paybox_rang'] = array(
        '#type' => 'textfield',
        '#title' => t('Paybox rank number'),
        '#description' => t('Your rank number from Paybox, if empty, will be set to <strong>Demo mode</strong>.'),
        '#default_value' => variable_get('uc_paybox_rang', ''),
        '#size' => 24,
      );
      $form['uc_paybox_identifiant'] = array(
        '#type' => 'textfield',
        '#title' => t('Paybox identifier'),
        '#description' => t('Your identifier from Paybox, if empty, will be set to <strong>Demo mode</strong>.'),
        '#default_value' => variable_get('uc_paybox_identifiant', ''),
        '#size' => 24,
      );
      $form['uc_paybox_language'] = array(
        '#type' => 'select',
        '#title' => t('Language preference'),
        '#description' => t('Adjust language on Paybox pages.'),
        '#options' => _uc_paybox_language(),
        '#default_value' => variable_get('uc_paybox_language', 'FRA'),
      );
      $form['system']['uc_paybox_typepaiement'] = array(
        '#type' => 'select',
        '#title' => t('Payment Type'),
        '#description' => t('Select the type(s) of payment permitted. If none is selected, the selection will be done on the Paybox website.'),
        '#options' => _uc_paybox_payment_type(),
        '#multiple' => TRUE,
        '#default_value' => variable_get('uc_paybox_typepaiement', array()),
        '#size' => 10,
      );
      $form['system']['uc_paybox_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment method title'),
        '#description' => t('Payment title used on checkout page'),
        '#default_value' => variable_get('uc_paybox_method_title', t('Credit card on a secured server.')),
      );
      $form['system']['uc_paybox_method_descr'] = array(
        '#type' => 'textarea',
        '#title' => t('Payment method description'),
        '#description' => t('Payment description used on checkout page, only used when Payment Type is empty.'),
        '#default_value' => variable_get('uc_paybox_method_descr', t('Redirect to Paybox to pay by credit card.')),
      );
      $form['system']['uc_paybox_method_title_icons'] = array(
        '#type' => 'select',
        '#title' => t('Icon on payment title'),
        '#description' => t('Images are taken from <em>uc_paybox/images/logo</em>. Will be on the left of the title.'),
        '#options' => _uc_paybox_list_img(),
        '#default_value' => variable_get('uc_paybox_method_title_icons', '0'),
      );
      $form['system']['uc_paybox_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Ubercart order review submit button text'),
        '#description' => t('Provide Paybox specific text for the submit button on the order review page.'),
        '#default_value' => variable_get('uc_paybox_checkout_button', t('Submit Order')),
        '#required' => TRUE,
        '#size' => 20,
      );
      $form['uc_paybox_devise'] = array(
        '#type' => 'select',
        '#title' => t('Currency'),
        '#description' => t('Select currency. To use different currency other than Euro, you need to contact Paybox !. Ubercart does not use multiple currency, you need to set up this options according to <a href="@url">ubercart shop configuration</a>.', array('@url' => base_path() . 'admin/store/settings/store/edit/format')),
        '#options' => _uc_paybox_currency(),
        '#default_value' => variable_get('uc_paybox_devise', '978'),
      );
      $form['system']['uc_paybox_cgi_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Paybox cgi path'),
        '#description' => t('Paybox cgi file absolute server path. eg. /var/www/cgi-bin/modulev3.cgi, needed by Paybox System.'),
        '#default_value' => variable_get('uc_paybox_cgi_path', ''),
        '#size' => 100,
        '#required' => TRUE
      );
      $form['system']['uc_paybox_ip_check'] = array(
        '#type' => 'textarea',
        '#title' => t('Paybox server IP allowed'),
        '#default_value' => variable_get('uc_paybox_ip_check', _uc_paybox_ip_check()),
        '#description' => t('paybox server IP allowed to complete payment during auto process, one IP per line. NO HTML allowed.'),
        '#required' => TRUE
      );
      $form['uc_paybox_mode'] = array(
        '#type' => 'select',
        '#title' => t('Payment mode'),
        '#description' => t('Choose payment mode, please see paybox integration manual for more informations.'),
        '#options' => array(
          'preprod' => t('Pre-Production'),
          'prod' => t('Production'),
        ),
        '#default_value' => variable_get('uc_paybox_mode', 'preprod'),
      );
      $form['uc_paybox_debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug mode'),
        '#description' => t('Be carefull ! Debug show info to user and validate demonstration payment.'),
        '#default_value' => variable_get('uc_paybox_debug', FALSE),
      );
      return $form;
  }
}

/**
 * Form to display the credit card details form on the checkout screen.
 */
function uc_payment_method_paybox_type_form($form, &$form_state, $order) {
  // Normally the CC data is posted in via AJAX.
  if (!empty($form_state['values']['payment_details_data']) && arg(0) == 'cart') {
    $order->payment_details = uc_paybox_cache('save', $form_state['values']['payment_details_data']);
  }

  // But we have to accommodate failed checkout form validation here.
  if (isset($_SESSION['sespb'])) {
    $order->payment_details = uc_paybox_cache('save', $_SESSION['sespb']);
    unset($_SESSION['sespb']);
  }

  if (!isset($order->payment_details) && isset($form_state['values']['panes']['payment']['details'])) {
    $order->payment_details = $form_state['values']['panes']['payment']['details'];
  }

  $payment_types_active = variable_get('uc_paybox_typepaiement', NULL);
  if (is_array($payment_types_active) && count($payment_types_active) > 0) {
    $payment_types = _uc_paybox_payment_type();
    $options = array();
    foreach ($payment_types as $payment_type['code'] => $payment_type['name']) {
      if (in_array($payment_type['code'], variable_get('uc_paybox_typepaiement', array()))) {
        $options[$payment_type['code']] = $payment_type['name'];
      }
    }
    if (!isset($order->payment_details['uc_paybox_typepaiement'])) {
      $default = key(variable_get('uc_paybox_typepaiement', array()));
    }
    else {
      $default = $order->payment_details['uc_paybox_typepaiement'];
    }
    switch (count($options)) {
      case 0:
        $form['uc_paybox_typepaiement'] = array(
          '#type' => 'hidden',
          '#value' => 'ALL',
        );
        break;
      case 1:
        $value = array_keys($options);
        $value = $value[0];
        $form['uc_paybox_typepaiement'] = array(
          '#type' => 'hidden',
          '#value' => $value,
        );
        break;
      default:
        $form['uc_paybox_typepaiement'] = array(
          '#type' => 'radios',
          '#title' => t('Payment Type'),
          '#default_value' => $default,
          '#options' => $options,
          //'#required' => TRUE,
        );
        break;
    }
    return $form;
  }
  else {
    return array('details' => array('#markup' => variable_get('uc_paybox_method_descr', t('Redirect to Paybox to pay by credit card.'))));
  }
}

/**
 * Caches payment details on a pageload for use in various functions.
 *
 * @param $op
 *   The cache operation to perform; either 'save', 'load', or 'clear'.
 * @param $data
 *   The serialized string containing the payment data.
 * @return
 *   An array of payment details.
 */
function uc_paybox_cache($op, $data = NULL) {
  // The payment data will be stored in this static variable.
  static $uc_paybox_cache = array();

  if ($op == 'save') {
    $uc_paybox_cache = unserialize($data);
  }
  elseif ($op == 'clear') {
    $uc_paybox_cache = array();
  }

  return $uc_paybox_cache;
}

/**
 * function to check paybox server ip when payment notification and auto notification
 */
function _uc_paybox_ip_check($ip = FALSE) {
  $paybox_ip = variable_get('uc_paybox_ip_check', '');
  if (!is_array($paybox_ip) && ($paybox_ip != '')) {
    $paybox_ip = explode("\n", $paybox_ip);
  }
  else {
    // see doc Paybox integration manual english v4.84 page 25
    $paybox_ip = array(
      "195.101.99.76",
      "194.2.122.158",
      "195.25.7.166",
      /*
      "194.2.160.66",
      "195.101.99.72",
      */
    );
  }
  // no empty line
  $paybox_ip = array_filter($paybox_ip);
  if ($ip) {
    $output = FALSE;
    foreach ($paybox_ip as $v) {
      if (rtrim($ip) == rtrim($v)) {
        $output = TRUE;
      }
    }
    if ($output == FALSE) {
      watchdog('uc_paybox', 'No valid paybox ip: !ip', array('!ip' => $ip), WATCHDOG_ERROR);
    }
    return $output;
  }
  else {
    return implode("\n", $paybox_ip);
  }
}

/**
 * Define payment types available, see paybox doc
 */
function _uc_paybox_payment_type() {
  $paybox_payment_type = array(
    'CARTE|CB' => t('Carte Bleue'),
    'CARTE|VISA' => t('VISA'),
    'CARTE|EUROCARD_MASTERCARD' => t('MasterCard'),
    'CARTE|E_CARD' => t('E-Bleue'),
    'CARTE|AMEX' => t('American Express'),
    'CARTE|DINERS' => t('Diner\'s Club'),
    'CARTE|JCB' => t('JCB'),
    'CARTE|COFINOGA' => t('Cofinoga'),
    'CARTE|SOFINCO' => t('Sofinco'),
    'CARTE|AURORE' => t('Aurore'),
    'CARTE|CDGP' => t('CDGP'),
    'CARTE|24h00' => t('24h00'),
    'CARTE|RIVEGAUCHE' => t('Rive Gauche'),
    /*
    'SYMPASS|CB' => t('Carte Bleue (Sympass)'),
    'SYMPASS|VISA' => t('VISA (Sympass)'),
    'SYMPASS|EUROCARD_MASTERCARD' => t('MasterCard (Sympass)'),
    'SYMPASS|E_CARD' => t('E-Bleue (Sympass)'),
    'SYMPASS|AMEX' => t('American Express (Sympass)'),
    'SYMPASS|DINERS' => t('Diner\'s Club (Sympass)'),
    'SYMPASS|JCB' => t('JCB (Sympass)'),
    'SYMPASS|AURORE' => t('Aurore (Sympass)'),
    'PAYNOVA|PAYNOVA' => t('Paynova'),
    'TERMINEO|TERMINEO' => t('Termineo'),
    */
    'PAYPAL|PAYPAL' => t('Paypal'),
    'UNEURO|UNEURO' => t('Un Euro'),
    'NETRESERVE|NETCDGP' => t('CDGP (Netreserve)'),
    'NETRESERVE|NETCOF' => t('Cofinoga (Netreserve)'),
  );
  return $paybox_payment_type;
}

/**
 * helper to create proper url
 */
function _uc_paybox_url() {
  $proto = isset($_SERVER['HTTPS']) ? 'https://' : 'http://';
  $host = $_SERVER['SERVER_NAME'];
  $port = ($_SERVER['SERVER_PORT'] == 80 ? '' : ':' . $_SERVER['SERVER_PORT']);
  return $proto . $host . $port . base_path();
}

/**
 * helper to list image from module directory
 */
function _uc_paybox_list_img($rep = 'logo') {
  $files = array();
  $dir = drupal_get_path('module', 'uc_paybox') . '/images/' . $rep;
  $mask = '(jpg|jpeg|gif|png)';
  $scan = file_scan_directory($dir, $mask, array('.', '..', 'CVS'));
  foreach ($scan AS $file) {
    $files[$file->filename] = $file->filename;
  }
  $rep == 'logo' ? $files[0] = t('no logo') : '' ;
  return $files;
}

/**
 * Define language available and check, see paybox doc
 */
function _uc_paybox_language($lang = FALSE) {
  $output = array(
    'FRA' => t('French'),
    'GBR' => t('English'),
    'ESP' => t('Spanish'),
    'DEU' => t('Dutch'),
    'ITA' => t('Italian'),
    'NLD' => t('Holland'),
    'SWE' => t('Swedish'),
  );
  if ($lang) {
    in_array($lang, $output) ? $output = $lang : $output = $output;
  }
  return $output;
}

/**
 * Define currency available and check, see paybox doc
 * convert ubercart currency in paybox currency
 */
function _uc_paybox_currency($paybox = TRUE) {
  $paybox_currency = array(
    '978' => t('Euro (EUR)'),
    '840' => t('American Dollar (USD)'),
    '756' => t('Swiss Franc (CHF)'),
  );
  $currency = array(
    'EUR' => t('Euro'),
    'USD' => t('American Dollar'),
    'CHF' => t('Swiss Franc'),
  );
  $paybox ? $output = $paybox_currency : $output = $currency;
  return $output;
}

/**
 * Returns the Auth.Net transaction type corresponding to a UC type.
 */
function _uc_paybox_txn_map($type) {
  switch ($type) {
    case UC_CREDIT_AUTH_ONLY:
      return '00001';
    case UC_CREDIT_AUTH_CAPTURE:
      return '00003';
  }
}

/**
 * Returns the title of the transaction type.
 */
function _uc_paybox_txn_type($type) {
  switch (strtoupper($type)) {
    case 'AUTH_CAPTURE':
      return t('Authorization and capture');
    case 'AUTH_ONLY':
      return t('Authorization only');
    case 'PRIOR_AUTH_CAPTURE':
      return t('Prior authorization capture');
    case 'CAPTURE_ONLY':
      return t('Capture only');
    case 'CREDIT':
      return t('Credit');
    case 'VOID':
      return t('Void');
  }
}
