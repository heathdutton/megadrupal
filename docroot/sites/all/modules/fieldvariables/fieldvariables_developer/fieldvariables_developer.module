<?php

/**
* @file
* Provides extra developer functionality.
*/

/**
 * Implements hook_entity_view().
 */
function fieldvariables_developer_entity_view($entity, $type, $view_mode, $langcode) {
  $fields = field_info_instances($type, $entity->type);

  foreach ($fields as $field) {
    $field_name = _fieldvariables_field_name($entity->type, $field['field_name']);

    $field_values = field_extract_values($type, $entity, $field['field_name']);

    $field_values = _fieldvariables_field_values($field_values);

    $entity->fieldvariables_log[$field_name] = _fieldvariables_developer_log($field, $field_name, $field_values);

    $entity->fieldvariables_values_log[$field_name] = _fieldvariables_developer_log_values($field, $field_name, $field_values);
  }

  if (!empty($entity->fieldvariables_log)) {
    $entity->fieldvariables = theme('fieldvariables', array('fieldvariables' => implode("\n", $entity->fieldvariables_log)));
  }

  if (!empty($entity->fieldvariables_values_log)) {
    $entity->fieldvariables_values = theme('fieldvariables', array('fieldvariables' => implode("\n", $entity->fieldvariables_values_log)));
  }
}

/**
 * Implements hook_theme().
 */
function fieldvariables_developer_theme($vars = array()) {
  return array(
    'fieldvariables' => array(
      'template' => 'fieldvariables',
      'variables' => $vars,
    )
  );
}

/**
 * Implements hook_form_alter().
 */
function fieldvariables_developer_form_fieldvariables_settings_alter(&$form, &$form_state, $form_id) {
  // Replace the regular info with developer info.
  unset($form['information']);
  $form['developer_information'] = array(
    '#markup' => '<h2>' . t('Developer mode enabled') . '</h2>' . t('Please note that as the Field Variables Developer module is enabled field variables will be loaded on all bundles and view modes.'),
    '#weight' => -100,
  );

  return $form;
}

/**
 * Log fields.
 */
function _fieldvariables_developer_log($field, $field_name, $field_values) {
  $log = sprintf(
    "%s (%s / %s) \n",
    $field_name,
    $field['widget']['module'],
    gettype($field_values)
  );

  return $log;
}

/**
 * Log fields with values.
 */
function _fieldvariables_developer_log_values($field, $field_name, $field_values) {
  if (empty($field_values)) {
    $log = sprintf(
      "%s (%s / %s) \n\n",
      $field_name,
      $field['widget']['module'],
      gettype($field_values)
    );
  }
  else {
    $log = sprintf(
      "<strong>%s</strong> (%s / %s) \n",
      $field_name,
      $field['widget']['module'],
      gettype($field_values)
    );

    if (is_object($field_values)) {
      $log .= _fieldvariables_developer_log_content($field_name, $field_values);
    }
    elseif (is_array($field_values)) {
      $log .= _fieldvariables_developer_log_content($field_name, $field_values);
    }
    elseif (is_string($field_values)) {
      $log .= htmlentities($field_values);
    }
    elseif (is_numeric($field_values)) {
      $log .= filter_xss($field_values);
    }
    elseif (is_bool($field_values)) {
      $log .= $field_values;
    }
    else {
      $log .= filter_xss($field_values);
    }

    $log .= "\n\n";
  }

  return $log;
}

function _fieldvariables_developer_log_content($field_name, $field_values) {
  $log = sprintf(
    '<div class="fieldvariable"><a href="#%s-log">%s</a>',
    $field_name,
    t('show/hide')
  );
  $log .= "\n";
  $log .= sprintf(
    '<div id="%s-log" class="fieldvariable-content">%s</div>',
    $field_name,
    htmlentities(print_r($field_values, TRUE))
  );
  $log .= '</div>';

  return $log;
}
