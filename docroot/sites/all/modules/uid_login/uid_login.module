<?php

/*This module modifies the user login process so that
 * the login name expects and validates the unique ID of each user, not the name
 * The username validation doesn't check for uniqueness
 * The database username field is not UNIQUE
 *
 * TODO:installation: Go to the database and remove the unique key from the users.name table
*/

/*
 * implements hook_form_user_login_alter
 */
function uid_login_form_user_login_alter(&$form) {
  _uid_login_alter_login_form($form);
}
/*
 * implements hook_form_user_login_block_alter
 */
function uid_login_form_user_login_block_alter(&$form) {
  _uid_login_alter_login_form($form);
}

function _uid_login_alter_login_form(&$form) {
  $form['#validate'][1] = 'uid_login_validate';
  //this removes the function 'user_login_name_validate'
  array_shift($form['#validate']);
  $form['name']['#title'] = t('Acc No');
  $form['name']['#description'] = t('Enter your user number');
}


//alternative login function to check against uid instead of username
//replacement of user_login_authenticate_validate()
function uid_login_validate($form, &$form_state) {
  $password = trim($form_state['values']['pass']);
  if (!empty($form_state['values']['name']) && !empty($password)) {
    // Do not allow any login from the current user's IP if the limit has been
    // reached. Default is 50 failed attempts allowed in one hour. This is
    // independent of the per-user limit to catch attempts from one IP to log
    // in to many different user accounts.  We have a reasonably high limit
    // since there may be only one apparent IP for all users at an institution.
    if (!flood_is_allowed('failed_login_attempt_ip', variable_get('user_failed_login_ip_limit', 50), variable_get('user_failed_login_ip_window', 3600))) {
      $form_state['flood_control_triggered'] = 'ip';
      return;
    }
    $account = db_query("SELECT * FROM {users} WHERE uid = :uid AND status = 1", array(':uid' => $form_state['values']['name']))->fetchObject();

    if ($account) {
      if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
        // Register flood events based on the uid only, so they apply for any
        // IP address. This is the most secure option.
        $identifier = $account->uid;
      }
      else {
        // The default identifier is a combination of uid and IP address. This
        // is less secure but more resistant to denial-of-service attacks that
        // could lock out all users with public user names.
        $identifier = $account->uid . '-' . ip_address();
      }
      $form_state['flood_control_user_identifier'] = $identifier;

      // Don't allow login if the limit for this user has been reached.
      // Default is to allow 5 failed attempts every 6 hours.
      if (!flood_is_allowed('failed_login_attempt_user', variable_get('user_failed_login_user_limit', 5), variable_get('user_failed_login_user_window', 21600), $identifier)) {
        $form_state['flood_control_triggered'] = 'user';
        return;
      }
      // We are not limited by flood control, so try to authenticate.
      // Set $form_state['uid'] as a flag for user_login_final_validate().
      $form_state['uid'] = user_authenticate($account->name, $password);
    }
  }
}

/*
 * implements hook_form_FORM_ID_alter
 * changes the user saving validation function
 */
function uid_login_form_user_profile_form_alter(&$form, $form_state) {
  $key = array_search('user_profile_form_validate', $form['#validate']);
  if ($key) {
    $form['#validate'][$key] = 'uid_login_user_profile_form_validate';
  }
}

//this module means that usernames don't have to be unique.
//this function therefore removes the unique username checking on the user edit form
//this is copied from _user_edit_validate
function uid_login_user_profile_form_validate($form, &$form_state) {
  //this function is called for the account tab and the profile tabs, but needed only on the account tab
  if (!array_key_exists('name',$form_state['values'])) return;
  $edit = &$form_state['values'];
  $uid = &$form_state['user']->uid;
  // Validate the username when: new user account; or user is editing own account and can change username; or an admin user.
  if (!$uid || ($GLOBALS['user']->uid == $uid && user_access('change own username')) || user_access('administer users')) {
    if ($error = user_validate_name($edit['name'])) {
      form_set_error('name', $error);
    }
    //else if (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE uid != %d AND LOWER(name) = LOWER('%s')", array(':uid'=>$uid, ':mail'=>$edit['name'])) > 0) {
    //  form_set_error('name', t('The name %name is already taken.', array('%name' => $edit['name'])));
    //}
    else if (drupal_is_denied('user', $edit['name'])) {
      form_set_error('name', t('The name %name has been denied access.', array('%name' => $edit['name'])));
    }
  }

  // Validate the e-mail address:
  if ($error = user_validate_mail($edit['mail'])) {
    form_set_error('mail', $error);
  }
  else if (db_query("SELECT COUNT(*) FROM {users} WHERE uid != :uid AND LOWER(mail) = LOWER(:mail)", array(':uid' => $uid, ':mail' => $edit['mail']))->fetchField()) {
    form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $edit['mail'], '@password' => url('user/password'))));
  }
  else if (drupal_is_denied('mail', $edit['mail'])) {
    form_set_error('mail', t('The e-mail address %email has been denied access.', array('%email' => $edit['mail'])));
  }
}


/**
 * Implements uif hook_uif_help().
 */
function uid_login_uif_help() {
  return '<ul><li>'. t("uid (integer) - the user's unique database key") . '</li></ul>';
}
/*
 * implements uif hook_uif_post_create
 */
function uid_login_uif_post_create($account, $user_data, $form_state) {
  $new = &$user_data['uid'];
  if (empty($new) || $new == $account->uid) return;
  //shouldn't be any conflicts with existing user ids because this hook is run one account at a time.
  uid_renum($account->uid, $new);
  $account->uid = $new;
}

/**
 * implements hook_menu_alter().
 * replace the user management page so it can orderby uid column
 * @param type $items
 */
function uid_login_menu_alter(&$items) {
  if (!module_exists('admin_views')) {//otherwise we alter the view
    $items['admin/people/people']['page callback'] = 'user_admin_uid';
    $items['admin/people/people']['file'] = 'uid_login.inc';
    $items['admin/people/people']['file path'] = drupal_get_path('module', 'uid_login');
  }
}

/*
 * implements hook_user_presave().
 * ensures the next user id is sequential to the last
 */
function uid_login_user_presave($edit, $account, $category) {
  if (!$account->uid) {
    $account->uid = db_query("SELECT MAX(uid) FROM {users}")->fetchfield() + 1;
    $account->is_new = TRUE;
  }
}


/*
 * implements hook_username_alter().
 */
function uid_login_username_alter(&$name, $account) {
  if ($GLOBALS['user']->uid && property_exists($account, 'uid')) {
    $name .=' ('.$account->uid.')';
  }
}

function uid_login_form_user_pass_alter(&$form, $form_state) {
  $form['name']['#title'] = t('Enter your e-mail address');
}

/*
 * utility function to control the next user_id
 */
function uid_login_reset() {
  db_query('TRUNCATE TABLE {sequences}');
}


/*
 * Change the uid
 * USE WITH CAUTION
 * Acts on users, roles, and fields then fires a hook
 */
function uid_renum($old, $new) {
  //check that the new slot is empty
  if (user_load($new)) return $old;
  module_load_include('inc', 'uid_login');
  //normally these would be implemented as hooks, but not if they are stored in the inc file to reduce load for this rare function
  node_uid_renum($old, $new);
  user_uid_renum($old, $new);
  if (module_exists('field')) {
    field_uid_renum($old, $new);
  }
  module_invoke_all('uid_renum', $old, $new);
  drupal_set_message('User has been renumbered. Check that all contrib module uid references were updated. Otherwise implement hook_uid_renum. Examples in uid_login.module', 'status', FALSE);
  return $new;
}

/*
 * add the uid field as the first column on the admin view at admin/people
 */
function uid_login_views_default_views_alter(&$views) {
  if (!array_key_exists('admin_views_user', $views)) return;
  $display = &$views['admin_views_user']->display['default']->display_options;

  $arr = array_reverse($display['fields']);
  $arr['uid'] = array(
    'id' => 'uid',
    'table' => 'users',
    'field' => 'uid'
  );
  $display['fields'] = array_reverse($arr);

  $arr = array_reverse($display['style_options']['info']);
  $arr['uid'] = array(
    'sortable' => 1,
    'default_sort_order' => 'desc',
    'align' => '',
    'separator' => '',
    'empty_column' => 0,
  );
  $display['style_options']['info'] = array_reverse($arr);


  $arr = array_reverse($display['style_options']['columns']);
  $arr['uid'] = 'uid';
  $display['style_options']['columns'] = array_reverse($arr);
}
