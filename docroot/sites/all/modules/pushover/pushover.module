<?php
/**
 * @file
 * Basic functionality for Pushover.
 */

/**
 * Implements hook_menu().
 */
function pushover_menu() {
  $items = array();

  $items['admin/config/services/pushover'] = array(
    'title'            => 'Pushover',
    'description'      => 'Configure Pushover settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('pushover_config'),
    'access arguments' => array('administer pushover'),
    'file'             => 'pushover.admin.inc',
  );
  $items['admin/config/services/pushover/settings'] = array(
    'title'            => 'Settings',
    'description'      => 'Configure Pushover settings.',
    'file'             => 'pushover.admin.inc',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 0,
  );
  $items['admin/config/services/pushover/receipts'] = array(
    'title'            => 'Receipts',
    'description'      => 'Status of sent receipts.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('pushover_receipts'),
    'access arguments' => array('administer pushover'),
    'file'             => 'pushover.admin.inc',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 1,
  );
  $items['admin/config/services/pushover/testmessage'] = array(
    'page callback'    => 'pushover_test_notification',
    'access arguments' => array('administer pushover'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/pushover/test'] = array(
    'page callback'    => 'pushover_devel_test_notification',
    'access arguments' => array('administer pushover'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Permission for accessing settings page.
 */
function pushover_permission() {
  return array(
    'administer pushover' => array(
      'title' => t('Administer Pushover Settings'),
      'description' => t('Administer notifications.'),
    ),
    'user pushover field' => array(
      'title' => t('Pushover User Field'),
      'description' => t('Users can add their own key to receive messages.'),
    ),
  );
}

function pushover_devel_test_notification() {
  $title = 'Drupal Pushover Test Message';
  $message = 'Pushover Notifications Work';
  $user = variable_get('pushover_test_user', '');
  $priority = 2;

  _pushover_send_notification($user, $title, $message, $priority);
  
  return 'Lets see this.';
}


/**
 * Send notifications.
 *
 * @param string $userkey
 *   The userkey of the user reciving the notification.
 *
 * @param string $title
 *   The title of the notification.
 *
 * @param string $message
 *   The content of the notification.
 *
 * @param string $priority
 *   (Optional) Either -1 for low priority, 1 for high priority or nothing for
 *   normal priority.
 *
 * @param string $url
 *   (Optional)
 *
 * @param string $url_title
 *   (Optional)
 *
 * @param string $sound
 *   (Optional)
 *
 * @param string $timestamp
 *   (Optional)
 *
 * @param string $device
 *   (Optional)
 */
function _pushover_send_notification($userkey = NULL, $title = NULL, $message = NULL, $priority = NULL, $url = NULL, $url_title = NULL, $sound = NULL, $timestamp = NULL, $device = NULL) {
  $apikey = variable_get('pushover_api_key', '');
  if ($apikey != '' && $userkey != NULL && $message != NULL) {
    $data = 'token=' . $apikey . '&';

    $data .= 'user=' . $userkey . '&';

    $data .= 'message=' . $message;
    if ($title != NULL) {
      $data .= '&title=' . $title;
    }
    if ($priority != NULL) {
      $data .= '&priority=' . $priority;
      if ($priority == 2) {
        $retry = variable_get('pushover_high_priority_retry', 60);
        $expire = variable_get('pushover_high_priority_expire', 1800);
        $data .= '&retry=' . $retry . '&expire=' . $expire;
      }
    }
    if ($url != NULL) {
      $data .= '&url=' . $url;
    }
    if ($url_title != NULL) {
      $data .= '&url_title=' . $url_title;
    }
    if ($sound != NULL) {
      $data .= '&sound=' . $sound;
    }
    if ($timestamp != NULL) {
      $data .= '&timestamp=' . $timestamp;
    }
    if ($device != NULL) {
      $data .= '&device=' . $device;
    }

    $url = 'https://api.pushover.net/1/messages.json';

    $options = array(
      'method' => 'POST',
      'data' => $data,
    );

    $response = drupal_http_request($url, $options);

    $return_data = json_decode($response->data);

    if ($response->code == '200' && $return_data->status == 1 && $priority == 2) {
      // save receipt
      // add them to the variable.
      // on the admin page we remove them if they are outdated.
      $receipt = array(
        'id' => $return_data->receipt,
        'acknowledged' => 0,
        'title' => ($title !== NULL ? $title : substr($message, 0, 20)),
        'added' => time()
      );
      $receipts = variable_get('pushover_receipts', array());
      $receipts[$return_data->receipt] = $receipt;
      variable_set('pushover_receipts', $receipts);
    }

    if ($response->code !== '200' || $return_data->status !== 1) {
      $language = language_default();
      $to = $userkey . '@api.pushover.net';
      $params = array(
        'title' => $title,
        'message' => $message,
      );
      if (drupal_mail('pushover', 'pushover', $to, $language, $params)) {
        watchdog('Pushover', 'Fallback mail sent to @to', array('@to' => $to));
        return TRUE;
      }
      else {
        watchdog('Pushover', 'Error sending mail to @to', array('@to' => $to));
        return FALSE;
      }
    }
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Send test message to default user.
 *
 * Predefined message to test the module.
 */
function pushover_test_notification() {
  $title = 'Drupal Pushover Test Message';
  $message = 'Pushover Notifications Work';
  $user = variable_get('pushover_test_user', '');
  $priority = 1;
  if ($user == '') {
    drupal_set_message(t('No test user defined!'), 'error');
    drupal_goto('admin/config/services/pushover');
    return;
  }
  else {
    _pushover_send_notification($user, $title, $message, $priority);
    drupal_set_message('Message sent');
    drupal_goto('admin/config/services/pushover');
  }
}

/**
 * Implements hook_field_access().
 *
 * Makes sure only users with the right permission can access the field.
 */
function pushover_field_access($op, $field, $entity_type, $entity, $account) {
  switch ($field['field_name']) {
    case 'field_pushover_user_key':
    case 'field_pushover_user_sound':
    case 'field_pushover_user_device':
      if (user_access('user pushover field')) {
        return TRUE;
      }
      else {
        return FALSE;
      }
      break;
  }
}

/**
 * Implements hook_mail().
 */
function pushover_mail($key, &$message, $params) {
  switch ($key) {
    case 'pushover':
      $message['subject'] = $params['title'];
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_help().
 */
function pushover_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#pushover':
      $output .= '<h2>' . t('Introduction') . '</h2>';
      $output .= '<p>' . t('Current Maintainer') . ': <a href="http://drupal.org/user/2468852">andeersg</a> &lt;<a href="mailto:anders.2205@gmail.com">anders.2205@gmail.com</a>&gt;</p>';
      $output .= '<p>' . t('Ever wanted to get notifications on your phone when something happens on your Drupal site? Drupal Pushover gives you the functionality to set up rules and receive push notifications on your phone via Pushover and their app (Available for iOS and Android only).') . '</p>';
      $output .= '<p>' . t('') . '</p>';
      $output .= '<h2>' . t('Useful links') . '</h2>';
      $output .= '<ul><li>' . l(t('Rules Configuration'), 'admin/config/workflow/rules') . '</li>';
      $output .= '<li>' . l(t('Pushover.net'), 'https://pushover.net') . '</li>';
      $output .= '<li>' . l(t('iOS App'), 'https://itunes.apple.com/us/app/pushover-notifications/id506088175?ls=1&mt=8') . ' and ' . l(t('Android app'), 'https://play.google.com/store/apps/details?id=net.superblock.pushover') . '</li>';
      $output .= '</ul>';

      return $output;
  }
}

/**
 * Implements hook_form_alter().
 *
 * Input the sounds available into the user form.
 */
function pushover_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
      $form['field_pushover_user_sound'][LANGUAGE_NONE]['#options'] = pushover_sound_options();
      if (isset($form_state['build_info']['args'][0]->field_pushover_user_sound[LANGUAGE_NONE][0]['value'])) {
        $form['field_pushover_user_sound'][LANGUAGE_NONE]['#default_value'] = $form_state['build_info']['args'][0]->field_pushover_user_sound[LANGUAGE_NONE][0]['value'];
      }
      else {
        $form['field_pushover_user_sound'][LANGUAGE_NONE]['#default_value'] = 0;
      }
      break;
  }
}

/**
 * Fetches the available sounds from the Pushover api.
 */
function pushover_sound_options() {
  $apikey = variable_get('pushover_api_key', '');  
  $url = 'https://api.pushover.net/1/sounds.json?token=' . $apikey;
  $options = array(
    'method' => 'GET',
  );

  $available = drupal_http_request($url, $options);
  $data = json_decode($available->data, TRUE);

  $output[0] = t('- Not defined -');
  $output = array_merge($output, $data['sounds']);

  return $output;
}

/**
 * Fetches device and sound from user.
 *
 * @param string $userid
 *   The userid of the user reciving the notification.
 */
function _pushover_user_field_info($userid) {
  if ($userid) {
    $user = user_load($userid);
    $soundfield = field_get_items('user', $user, 'field_pushover_user_sound');
    $sound = $soundfield[0]['value'];
    $devicefield = field_get_items('user', $user, 'field_pushover_user_device');
    $device = $devicefield[0]['value'];
    
    if ($sound == 0) {
      $sound = '';
    }
    
    $args = array(
      'sound' => ($sound == '' ? NULL : $sound),
      'device' => ($device == '' ? NULL : $device),
    );
  }
  else {
    $args = array(
      'device' => NULL,
      'sound' => NULL,
    );
  }
  return $args;
}
