<?php

/**
 * @file
 * Provides a payment method for Drupal Commerce via Blockchain.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_blockchain_commerce_payment_method_info() {
  $payment_methods['blockchain'] = array(
    'base' => 'commerce_blockchain',
    'title' => t('Blockchain'),
    'display_title' => t('Bitcoin'),
    'short_title' => t('Bitcoin'),
    'description' => t('Blockchain Receive Payments API'),
    'active' => FALSE,
    'terminal' => TRUE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,
    'file' => 'includes/commerce_blockchain.callbacks.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_blockchain_menu() {
  // Define an always accessible path to receive callbacks.
  $items['blockchain/callback/%/%commerce_order'] = array(
    'title' => 'Blockchain callback',
    'page callback' => 'commerce_blockchain_verify_callback',
    'page arguments' => array(3),
    'access callback' => 'commerce_blockchain_callback_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_blockchain.callbacks.inc',
  );

  return $items;
}

/**
 * Access callback for verifying the secret in the Blockchain callback request.
 */
function commerce_blockchain_callback_access($secret) {
  $payment_method = commerce_payment_method_instance_load('blockchain|commerce_payment_blockchain');
  if ($payment_method['settings']['secret'] == $secret) {
    return TRUE;
  }
  else {
    watchdog('commerce_blockchain', 'Invalid secret in callback request: @secret', array('@secret' => $secret));
    return FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_blockchain_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a Bitcoin option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      switch ($method_id) {
        case 'blockchain':
          // Prepare the replacement radio button text with icons.
          $variables = array(
            'path' => drupal_get_path('module', 'commerce_blockchain') . '/images/bitcoin.gif',
            'title' => t('Bitcoin accepted by Blockchain.info'),
            'alt' => t('Bitcoin logo'),
            'attributes' => array(
              'class' => array('commerce-blockchain-icon'),
            ),
          );
          $icons['bitcoin'] = theme('image', $variables);

          $value = t('Bitcoin');
          $value .= '<span class="commerce-blockchain-icons">' . implode(' ', $icons) . '</span>';

          // Add the CSS.
          $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_blockchain') . '/theme/commerce_blockchain.theme.css';

          break;
      }
    }
  }
}

/**
 * Returns an array of all possible currency codes for Blockchain exchanges.
 *
 * @link https://blockchain.info/api/exchange_rates_api Exchange API @endlink
 *
 * @return array
 *   An associative array of currency codes with keys and values being the
 *   currency codes accepted by the specified Blockchain payment method.
 */
function commerce_blockchain_ticker() {
  $ticker_json = file_get_contents('https://blockchain.info/ticker');
  return json_decode($ticker_json, TRUE);
}
