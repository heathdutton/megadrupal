<?php
/**
 * @file
 * Code for the Route example feature.
 */

// This form has to be included globally because it contains AJAX callback.
module_load_include('inc', 'route_example', 'route_example.capture_personal_data_form');

/**
 * Implements hook_ctools_plugin_api().
 */
function route_example_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement CTools and panels plugins.
 */
function route_example_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'panels' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_route_context_convert_list_alter.
 * This lets you expose all properties of you particular route as CTools context tokens or data list.
 *
 * @param $list
 */
function route_example_route_context_convert_list_alter(&$list) {
  $list['first_name'] = t('First name of the user');
  $list['last_name'] = t('Last name of the user');
  $list['gender'] = t('Gender of the user');
  $list['interests'] = t('User\'s interests');
  $list['reasons'] = t('Reasons why the user joined the site');
}

/**
 * Implementation of hook_route_format_property.
 * This lets you format any property. This hook is being called every time someone is trying to access a property this way: $route->format($property);
 * In case is multiple module try to format the same property, then the last module that implements this hook wins.
 *
 * @param $name
 * @param $value
 */
function route_example_route_format_property($name, $value) {
  $formatted = array();

  switch($name) {
    case 'interests':
      foreach(array_filter($value) as $interest_key) {
        $formatted[] = _route_example_get_interest_label($interest_key);
      }
      return implode(', ', $formatted);
      break;
    case 'reasons':
      foreach(array_filter($value) as $reason_key) {
        $formatted[] =_route_example_get_reason_label($reason_key);
      }
      return implode(', ', $formatted);
      break;
    case 'gender':
      return _route_example_get_gender_label($value);
      break;
  }


}

/**
 * Helper function that returns options for registration reasons.
 */
function _route_example_get_reasons() {
  return array(
    'site_awesome' => t('your site is awesome'),
    'route_module' => t('I wanted to check out how Route module works for authenticated users'),
    'loves_drupal' => t('I love Drupal'),
    'loves_doing_random_things' => t('I love doing random things'),
  );
}

/**
 * Helper function that returns options for interests.
 */
function _route_example_get_interests() {
  return array(
    'drupal' => t('Drupal'),
    'route_module' => t('Route module'),
    'free_beer' => t('Free beer'),
    'fancy_gadgets' => t('Fancy gadgets'),
    'shiny_stuff' => t('Shiny stuff'),
    'democrats' => t('Democrats'),
  );
}

/**
 * Helper function that returns options for gender.
 */
function _route_example_get_genders() {
  return array(
    'female' => t('Female'),
    'male' => t('Male'),
  );
}

/**
 * Helper function that returns human friendly titles for route properties.
 */
function _route_example_get_property_titles() {
  return array(
    'first_name' => t('First name'),
    'last_name' => t('Last name'),
    'maiden_name' => t('Maiden name'),
    'email' => t('Email'),
    'gender' => t('Gender'),
    'interests' => t('I am fond of'),
    'reasons' => t('I\'ve registered because'),
  );
}

/**
 * Helper function that returns a single reason label
 * @param $key
 * @return
 */
function _route_example_get_reason_label($key) {
  $labels = _route_example_get_reasons();
  return array_key_exists($key, $labels) ? $labels[$key] : NULL;
}

/**
 * Helper function that returns a single interest label
 * @param $key
 * @return
 */
function _route_example_get_interest_label($key) {
  $labels = _route_example_get_interests();
  return array_key_exists($key, $labels) ? $labels[$key] : NULL;
}

/**
 * Helper function that returns a single gender label
 * @param $key
 * @return
 */
function _route_example_get_gender_label($key) {
  $labels = _route_example_get_genders();
  return array_key_exists($key, $labels) ? $labels[$key] : NULL;
}

/**
 * Helper function that returns a title for a single property
 * @param $key
 * @return
 */
function _route_example_get_property_title($key) {
  $titles = _route_example_get_property_titles();
  return array_key_exists($key, $titles) ? $titles[$key] : NULL;
}