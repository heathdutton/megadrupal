<?php
/**
 * Implmentation of hook_menu().
 */
function simplify_node_add_menu() {
  $items = array();
  $items['admin/config/user-interface/simplify_node_add'] = array(
    'title' => 'Simplify node add',
    'description' => 'Adjust simplify node add settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplify_node_add_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/user-interface/simplify_node_add/settings'] = array(
    'title' => 'Simplify node add settings',
    'description' => 'Adjust simplify node add settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplify_node_add_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  foreach (user_roles() AS $rid => $role) {
    if ($rid != 1) { // no need to do this for anonymous users
      $items['admin/config/user-interface/simplify_node_add/' . $rid] = array(
        'title' => 'Simplify for ' . $role,
        'description' => 'Adjust simplify node add settings for role ' . $role,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('simplify_node_add_settings', $rid),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }
  return $items;
}
/**
 * Implementation of hook_form_alter().
 */
function simplify_node_add_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    global $user;
    $rid = end(array_keys($user->roles));
    $hide = variable_get('simplify_node_add_hide_for_uid_1', 0);
    if ($user->uid != 1 || $hide == 1) {
      $nodetype = $form['type']['#value'];
      $hook = module_invoke_all('simplify_node_add_gettypes');
      $sna_types = variable_get('simplify_node_add_rid_' . $rid . '_' . $nodetype, array());
      $save = variable_get('simplify_node_add_' . $nodetype . '_save', '');
      if (!empty($save)) {
        $form['buttons']['submit']['#value'] = $save;
      }
      foreach ($sna_types as $type) {
        if ($type != '0') {
          if ($type == 'summary' || $type == 'preview') {
            switch ($type) {
              case 'summary':
                $form['body_field']['teaser_include'] = array(
                  '#type' => 'value',
                  '#value' => TRUE,
                );
                break;
              case 'preview':
                unset($form['buttons']['preview']);
                break;
            }
          }
          elseif (array_key_exists($type, $hook['access'])) {
            $form[$type]['#access'] = FALSE;
          }
          elseif (array_key_exists($type, $hook['unset'])) {
            unset($form[$type]);
          }
        }
      }
    }
  }
}
/**
 * Form builder function for module settings.
 */
function simplify_node_add_settings() {
  $rid = arg(3);
  $hook = module_invoke_all('simplify_node_add_gettypes');
  $types = node_type_get_types();
  $form['simplify description'] = array(
    '#type' => 'item',
    '#value' => t('Use this module to simplify the node add page\'s.'),
  );
  if (!$rid || !is_numeric($rid)) {
    $form['simplify_node_add_hide_for_uid_1'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide fields for root user'),
      '#default_value' => variable_get('simplify_node_add_hide_for_uid_1', 0),
    );
  }
  else {
    $field_types = array();
    foreach ($hook['access'] AS $k => $v) {
      $field_types[$k] = $v;
    }
    foreach ($hook['unset'] AS $k => $v) {
      $field_types[$k] = $v;
    }
    foreach ($types as $type) {
      $form['simplify_node_add_fieldset_' . $type->type] = array(
        '#type' => 'fieldset',
        '#title' => $type->name,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['simplify_node_add_fieldset_' . $type->type]['simplify_node_add_rid_' . $rid . '_' . $type->type] = array(
        '#type' => 'checkboxes',
        '#title' => t('Field types'),
        '#default_value' => variable_get('simplify_node_add_rid_' . $rid . '_' . $type->type, array()),
        '#options' => $field_types,
        '#description' => t('Check the fields which you like to disable for this content type'),
      );
      $form['simplify_node_add_fieldset_' . $type->type]['simplify_node_add_rid_' . $rid . '_' . $type->type . '_save'] = array(
        '#type' => 'textfield',
        '#title' => t('Submit button value'),
        '#default_value' => variable_get('simplify_node_add_rid_' . $rid . '_' . $type->type . '_save', ''),
        '#size' => 60,
        '#maxlength' => 60,
      );
    }
  }
  $form = system_settings_form($form);
  return $form;
}

/**
 * Implementation of hook_simplify_node_add().
 */
function simplify_node_add_simplify_node_add_gettypes() {
  $field_types = array();
  $field_types = array(
    'access' => array(
      'author' => t('Authoring information'),
      'path' => t('URL path settings'),
      'options' => t('Publishing options'),
      'menu' => t('Menu settings'),
      'book' => t('Book outline'),
      'comment_settings' => t('Comment settings'),
    ),
    'unset' => array(
      'revision_information' => t('Revision information'),
      'preview' => t('Preview button'),
      'summary' => t('Split Summary Button'),
    ),
  );
  if (module_exists('notifications')) {
    $field_types['access']['notifications'] = t('Notification settings');
  }
  if (module_exists('og')) {
    $field_types['access']['og_description'] = t('OG description');
    $field_types['access']['og_selective'] = t('OG membership requests');
    $field_types['access']['og_register'] = t('OG register');
    $field_types['access']['og_directory'] = t('OG list in directory');
  }
  return $field_types;
}