<?php

/**
 * @file
 * The Smartling module file.
 */

define('SMARTLING_FIELDS_METHOD_KEY', '4');
define('SMARTLING_NODES_METHOD_KEY', '2');

define('SMARTLING_TRANSLATE_NODE', 'smartling_translate_node');
define('SMARTLING_ORIGINAL_NODE', 'smartling_original_node');
define('SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE', 'smartling_original_without_translation_node');

define('SMARTLING_STATUS_IN_QUEUE', 0);
define('SMARTLING_STATUS_IN_TRANSLATE', 1);
define('SMARTLING_STATUS_TRANSLATED', 2);
define('SMARTLING_STATUS_CHANGE', 3);
define('SMARTLING_STATUS_FAILED', 4);
define('SMARTLING_STATUS_PENDING_CANCEL', 5);
define('SMARTLING_STATUS_CANCELED', 6);

define('SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE', 'smartling_send_node_to_upload_queue');
define('SMARTLING_STATUS_EVENT_FAILED_UPLOAD', 'smartling_send_node_failed_upload');
define('SMARTLING_STATUS_EVENT_UPLOAD_TO_SERVICE', 'smartling_upload_node_to_service');
define('SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE', 'smartling_download_node_from_service');
define('SMARTLING_STATUS_EVENT_UPDATE_FIELDS', 'smartling_update_node_fields');
define('SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE', 'check_status_in_node_entity_update');

define('SMARTLING_PRODUCTION_MODE', 'PRODUCTION');
define('SMARTLING_DEFAULT_API_URL', 'https://capi.smartling.com/v1');

define('SMARTLING_CRON_RUN_INTERVAL', 3*60*60);

include_once 'smartling.utils.inc';
include_once 'smartling_vbo_actions.inc';
include_once 'includes/smartling.workers.inc';
include_once 'includes/smartling.entity.inc';
include_once 'views/smartling.views.inc';
include_once 'entities/smartling.taxonomy.inc';
include_once 'entities/smartling.node.inc';
include_once 'entities/smartling.comments.inc';
include_once 'entities/smartling.user.inc';
include_once 'entities/smartling.generic_entity.inc';

/**
 * Implements hook_boot().
 */
function smartling_boot() {
  //smartling_register();
}

/**
 * Implements hook_init().
 */
function smartling_init() {
  smartling_register();
}

/**
 * Implements hook_flush_caches().
 */
function smartling_flush_caches() {
  // In some context such as module activation, the boot method is not called so
  // the component is never registered with the class loader. This cause
  // troubles as we need the class definition when bootstrapping.
  smartling_register();

  //Temporary code to prevent errors like:
  //Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException: You have requested a non-existent service "smartling.wrappers.smartling_utils"
  // in Symfony\Component\DependencyInjection\Container->get() (line 303 of .../httpdocs/sites/all/modules/contrib/inject/vendor/symfony/dependency-injection/Symfony/Component/DependencyInjection/Container.php).
  //@todo: delete it when https://www.drupal.org/node/2495617 is fixed.
  inject_flush_caches();
  inject_exit();

  return array();
}

/**
 * Registers smartling and dependencies name-space with the class loader.
 */
function smartling_register() {
  // Activates the class loader.
  $loader = drupal_classloader();
  $loader->registerNamespace('Drupal\smartling', __DIR__ . '/lib');
}

/**
 * Implements hook_menu().
 */
function smartling_menu() {
  $items = array();

  $items['admin/config/regional/smartling'] = array(
    'title' => 'Smartling settings',
    'weight' => -99,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'smartling.admin.inc',
    'page callback' => 'smartling_admin_configuration_page',
    'access arguments' => array('administer smartling'),
  );

  $items['smartling'] = array(
    'title' => 'Smartling settings',
    'type' => MENU_CALLBACK,
    'page callback' => 'smartling_download_translate_simple_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer smartling'),
  );

  $items['smartling/callback/%'] = array(
    'title' => 'Smartling push',
    'type' => MENU_CALLBACK,
    'page callback' => 'smartling_push_callback',
    'access callback' => 'smartling_push_callback_access',
    'access arguments' => array(2),
  );

  return $items;
}

/**
 * Simple menu callback.
 *
 * Menu callback to register smartling paths in
 * menu router, to avoid problems with fast_404 module.
 *
 * @return string
 *   Return empty string.
 */
function smartling_download_translate_simple_callback() {
  return '';
}

/**
 * Implements hook_permission().
 */
function smartling_permission() {
  $permissions = array(
    'administer smartling' => array(
      'title' => t('Administer Smartling'),
      'description' => t('Access the Smartling admin pages.'),
    ),
    'administer smartling_entity_data entities' => array(
      'title' => t('Administer Smartling entity data entities'),
    ),
    'view any smartling_entity_data entity' => array(
      'title' => t('View any Smartling entity data entity'),
    ),
    'edit any smartling_entity_data entity' => array(
      'title' => t('Edit any Smartling entity data entity'),
    ),
    'create smartling_entity_data entities' => array(
      'title' => t('Create Smartling entity data entities'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see smartling_field_settings_update_submit()
 */
function smartling_form_entity_translation_translatable_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'smartling_field_settings_update_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function smartling_form_title_field_replacement_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'smartling_title_field_replacement_submit';
  $form['#submit'] = array_reverse($form['#submit']);
}

/**
 * Title field replacement form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_title_field_replacement_submit(array $form, array &$form_state) {
  $smartling_settings = smartling_settings_get_handler();

  $entity_type = $form['#entity_type'];
  $bundle      = $form['#bundle'];
  $field_name  = $form['#field_name'];

  switch ($entity_type) {
    case 'node':
      if (smartling_nodes_method($bundle) && ($field_name == 'title')) {
        $node_settings = $smartling_settings->nodeGetFieldsSettingsByBundle($bundle);
        $property_field = $field_name . '_property_field';
        if (isset($node_settings[$property_field])) {
          $smartling_settings->deleteSingleFieldFromSettings($entity_type, $bundle, $field_name . '_property_field');
          $smartling_settings->addSingleFieldToSettings($entity_type, $bundle, $field_name . '_field');
        }
      }
      break;

    case 'taxonomy_term':
      $vocabulary = taxonomy_vocabulary_machine_name_load($bundle);
      $vocabulary_mode = i18n_taxonomy_vocabulary_mode($vocabulary);
      if (($vocabulary_mode == I18N_MODE_TRANSLATE) && in_array($field_name, array('name', 'description'))) {
        $term_settings = $smartling_settings->taxonomyTermGetFieldsSettingsByBundle($bundle);
        $property_field = $field_name . '_property_field';
        if (isset($term_settings[$property_field])) {
          $smartling_settings->deleteSingleFieldFromSettings($entity_type, $bundle, $field_name . '_property_field');
          $smartling_settings->addSingleFieldToSettings($entity_type, $bundle, $field_name . '_field');
        }
      }
      break;

    default:
      break;
  }
}

/**
 * Smartling field settings update form - Form Submit.
 *
 * If a translation for the field was turned off, remove
 * the field from the configuration node smartling.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_field_settings_update_submit(array $form, array &$form_state) {

  if (($form_state['values']['translatable'] == 1) && ($form_state['values']['confirm'] == 1) && !empty($form_state['field']['bundles'])) {
    $smartling_settings = smartling_settings_get_handler();
    foreach ($form_state['field']['bundles'] as $entity_type => $bundles) {
      foreach ($bundles as $bundle) {
        $smartling_settings->deleteSingleFieldFromSettings($entity_type, $bundle, $form_state['field']['field_name']);
      }
    }
  }
}

/**
 * Smartling download and translate form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_download_translate_form_submit(array $form, array &$form_state) {
  $log = smartling_log_get_handler();

  if (count(array_filter($form_state['values']['target'])) !== 0) {
    foreach ($form_state['values']['target'] as $d_locale) {
      if ($d_locale === 0) {
        continue;
      }

      $entity_wrapper = entity_metadata_wrapper($form['#entity_type'], $form['#entity']);


      $log->info('Smartling start force download translated file for node id - @nid, locale - @locale',
        array('@nid' => $entity_wrapper->getIdentifier(), '@locale' => $d_locale, 'entity_link' => l(t('Edit node'), 'node/' . $entity_wrapper->getIdentifier() . '/edit')));

      $entity_data = smartling_entity_load_by_conditions(array(
        'rid' => $entity_wrapper->getIdentifier(),
        'bundle' => $entity_wrapper->getBundle(),
        'target_language' => $d_locale,
      ));

      if (!$entity_data) {
        $log->info('Smartling FAIL force download translated file for node id - @nid, locale - @locale',
          array('@nid' => $entity_wrapper->getIdentifier(), '@locale' => $d_locale, 'entity_link' => l(t('Edit node'), 'node/' . $entity_wrapper->getIdentifier() . '/edit')));
        drupal_set_message(t('This entity has not been submitted for translation, or the submission is currently in the queue. Language - @language', array('@language' => $d_locale)), 'error');
        return;
      }

      try {
        drupal_container()->get('smartling.queue_managers.download')->execute($entity_data->eid);
      }
      catch (\Drupal\smartling\SmartlingExceptions\SmartlingGenericException $e) {
        $log->critical($e->getMessage() . '   ' . print_r($e, TRUE));
        drupal_set_message($e->getMessage(), 'error');
      }

    }
  }

  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
    drupal_goto(current_path());
  }
}

/**
 * Implements hook_views_api().
 */
function smartling_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_cron().
 */
function smartling_cron() {
  //cancel submissions
  smartling_cancel_submission();

  $settings = smartling_settings_get_handler();
  $cron_last = $settings->getCheckStatusCronLast();
  if ( $cron_last + SMARTLING_CRON_RUN_INTERVAL > time()) {
    return;
  }
  $settings->setCheckStatusCronLast(time());

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'smartling_entity_data')
    ->propertyCondition('status', array(SMARTLING_STATUS_IN_TRANSLATE), 'IN')
    // @TODO move 'original' to constant.
    ->propertyCondition('target_language', 'original', '<>')
    ->execute();

  if (!empty($entities['smartling_entity_data'])) {
    $eids = array_keys($entities['smartling_entity_data']);
    drupal_container()->get('smartling.queue_managers.check_status')->add($eids);
  }
}

/**
 * Implements hook_cron_alter().
 */
function smartling_cron_alter(&$hooks) {
  if (isset($hooks['smartling_cron'])) {
    $hooks['smartling_cron']['title'] = t('Add items to "smartling_check_status" queue.');
    $hooks['smartling_cron']['scheduler']['simple']['rules'][0] = '0+@ */3 * * *';
  }
  if (isset($hooks['queue_smartling_upload'])) {
    $hooks['queue_smartling_upload']['title'] = t('Upload files with original content.');
    $hooks['queue_smartling_upload']['scheduler']['simple']['rules'][0] = '* * * * *';
  }
  if (isset($hooks['queue_smartling_check_status'])) {
    $hooks['queue_smartling_check_status']['title'] = t('Check translation progress of files.');
    $hooks['queue_smartling_check_status']['scheduler']['simple']['rules'][0] = '* * * * *';
  }
  if (isset($hooks['queue_smartling_download'])) {
    $hooks['queue_smartling_download']['title'] = t('Download files with translations.');
    $hooks['queue_smartling_download']['scheduler']['simple']['rules'][0] = '* * * * *';
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function smartling_cron_queue_info() {
  $queues['smartling_upload'] = array(
    'worker callback' => 'smartling_queue_send_to_translate_process',
  );
  $queues['smartling_check_status'] = array(
    'worker callback' => 'smartling_queue_check_status_process',
  );
  $queues['smartling_download'] = array(
    'worker callback' => 'smartling_queue_download_translated_item_process',
  );

  return $queues;
}

/**
 * Implements hook_entity_update().
 */
function smartling_entity_update($entity, $type) {
  if (!drupal_container()->get('smartling.settings')->getAutoResubmitFlag()) {
    return;
  }

  $entity_wrapper = entity_metadata_wrapper($type, $entity);
  $rid = $entity_wrapper->getIdentifier();
  $bundle = $entity_wrapper->getBundle();

  $smartling_entity_data = FALSE;
  if (smartling_translate_fields_configured($bundle, $type)) {
    $smartling_entity_data = smartling_entity_load_all_by_conditions(array(
      'rid' => $rid,
      'bundle' => $bundle,
    ));
  }

  if (is_array($smartling_entity_data)) {
    $sm_data       = current($smartling_entity_data);
    $processor     = smartling_get_entity_processor($sm_data);
    $content_array = $processor->exportContentToArray();
    $content_array = serialize($content_array);
    $content_hash  = md5($content_array);

    foreach ($smartling_entity_data as $smartling_entity) {
      $old_content_hash = $smartling_entity->content_hash;

      if ($content_hash === $old_content_hash) {
        continue;
      }

      if (!empty($old_content_hash)) {
        drupal_container()->get('smartling.wrappers.smartling_submission_wrapper')->setEntity($smartling_entity)->setStatusByEvent(SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE)->save();
        drupal_container()->get('smartling.queue_managers.upload')->add($smartling_entity->eid);
      }
      $smartling_entity_changed = smartling_entity_data_load($smartling_entity->eid);
      $smartling_entity_changed->content_hash = $content_hash;
      smartling_entity_data_save($smartling_entity_changed);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function smartling_entity_delete($entity, $type) {
  $entity_wrapper = entity_metadata_wrapper($type, $entity);
  $rid = $entity_wrapper->getIdentifier();

  db_delete('smartling_entity_data')
    ->condition('rid', $rid)
    ->condition('entity_type', $type)
    ->execute();
}

/**
 * Implements hook_views_pre_render().
 */
function smartling_views_pre_render(&$view) {
  if ($view->name == 'smartling_submissions') {
    drupal_add_library('system', 'ui.progressbar');
    drupal_add_js(drupal_get_path('module', 'smartling') . '/js/smartling_admin.js');
  }
}

/**
 * Implements hook_action_info().
 */
function smartling_action_info() {
  return array(
    'smartling_do_translate_action' => array(
      'type' => 'system',
      'label' => t('Smartling entity translate.'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    'smartling_do_download_translation_action' => array(
      'type' => 'smartling_entity_data',//'entity',
      'label' => t('Download translated content elements.'),
      //'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'smartling_do_resend_translation_action' => array(
      'type' => 'smartling_entity_data',//'entity',
      'label' => t('Resend original content for translation.'),
      //'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'smartling_do_cancel_action' => array(
      'type' => 'smartling_entity_data',//'entity',
      'label' => t('Cancel translation'),
      //'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Smartling push callback access function.
 *
 * @param string $key
 *   Drupal cron key.
 *
 * @return bool
 *   Return TRUE if user have access.
 */
function smartling_push_callback_access($key) {
  return (variable_get('cron_key', 'drupal') === $key && empty($_POST));
}

/**
 * Smartling push callback function.
 */
function smartling_push_callback() {
  $log = smartling_log_get_handler();
  $log->info('Smartling starts to process callback request');

  if (isset($_GET['locale']) && isset($_GET['fileUri'])) {
    $d_locale = check_plain(smartling_convert_locale_smartling_to_drupal($_GET['locale']));
    $file_uri = smartling_clean_filename($_GET['fileUri']);

    $log->info('Smartling get parameters: locale - @locale, fileUri - @fileUri', array('@locale' => $d_locale, '@fileUri' => $file_uri));

    $entity_data = smartling_entity_load_by_conditions(array(
      'target_language' => $d_locale,
      'file_name' => $file_uri,
    ));

    if ($entity_data != FALSE) {
      smartling_queue_download_translated_item_process($entity_data->eid);

      $log->info('The callback function smartling downloaded translation for bundle - @bundle, entity id - @rid, language - @language',
        array('@bundle' => $entity_data->bundle, '@rid' => $entity_data->rid, '@language' => $d_locale, 'entity_link' => l(t('Edit node'), 'node/' . $entity_data->rid . '/edit')));
    }
    elseif ($entity_data == FALSE) {
      $log->warning('For the parameters locale - @locale and fileUri - @fileUri entity smartling are missing', array('@locale' => $d_locale, '@fileUri' => $file_uri));
    }
  }
  else {
    $params = array('locale', 'fileUri');
    foreach ($params as $param) {
      if (!isset($_GET[$param])) {
        $log->warning('Smartling GET parameter "@param_name" is missing', array('@param_name' => $param));
      }
    }
  }
}

/**
 * Implements hook_smartling_settings_form_info().
 *
 * @return array
 */
function smartling_smartling_settings_form_info() {
  $forms = array(
    'smartling_admin_account_info_settings_form' => array('weight' => 0, 'title' => t('Account info')),
    'smartling_admin_node_translation_settings_form' => array('weight' => 10, 'title' => t('Nodes settings')),
    'smartling_admin_entities_translation_settings_form' => array('weight' => 20, 'title' => t('Entities settings')),
  );

  if (module_exists('taxonomy')) {
    $forms['smartling_admin_taxonomy_translation_settings_form'] = array('weight' => 30, 'title' => t('Taxonomy settings'));
  }

  $forms['smartling_admin_expert_settings_form'] = array('weight' => 50, 'title' => t('Advanced settings'));

  if (module_exists('smartling_reference')) {
    $forms['smartling_admin_reference_settings_form'] = array('weight' => 40, 'title' => t('References settings'));
  }

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function smartling_form_views_form_alter(&$form, &$form_state, $form_id) {
  // Adjust VBO text labels and set button weightings
  // Set button order with #weight
  if (isset($form['select']) && $form['select']['#title'] == 'Operations') {
    if (isset($form['select']['action::smartling_do_cancel_action'])) {
      $form['select']['action::smartling_do_cancel_action']['#weight'] = 20;
    }
  }
}