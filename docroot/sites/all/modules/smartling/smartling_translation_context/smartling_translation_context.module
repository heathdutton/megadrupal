<?php

/**
 * Implements hook_smartling_settings_form_info().
 *
 * @return array
 */
function smartling_translation_context_smartling_settings_form_info() {
  return array(
    'smartling_translation_context_admin_settings_form' => array('weight' => 45, 'title' => t('Context settings')),
  );
}

function smartling_translation_context_admin_settings_form(array $form, array &$form_state) {
  $form['context_admin_settings']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('User name'),
    '#default_value' => variable_get('smartling_translation_context_username', 'admin'),
    '#weight' => -3,
  );

  $form['context_admin_settings']['exclude_files'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS/JS files that should be excluded from context submissions'),
    '#description' => t('Example: misc/textarea.js'),
    '#default_value' => variable_get('smartling_translation_context_exclude_files', ''),
    '#weight' => -2,
  );

  $form['context_admin_settings']['debug'] = array(
    '#type' => 'fieldset',
    '#title' => t('Debug fields'),
    '#weight' => -1,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['context_admin_settings']['debug']['url'] = array(
    '#type' => 'textarea',
    '#title' => t('Page URL'),
    '#description' => t('One url per line'),
  );

  $form['context_admin_settings']['debug']['force_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Preview'),
    '#description' => t('Displays page context but does not submit to Smartling'),
  );

  $form['context_admin_settings']['actions']['submit'][] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function smartling_translation_context_upload_context($username, $url, $force_show = FALSE) {
  $url .= (strpos($url, '?') === FALSE) ? '?' : '&';
  $url .= 'smartling_context=1';

  module_load_include('inc', 'smartling_translation_context', 'includes/context_authorize');
  module_load_include('inc', 'smartling_translation_context', 'includes/url_to_absolute');
  module_load_include('inc', 'smartling_translation_context', 'includes/html_save_complete');

  $auth = smartling_translation_context_authorize($username);

  $page = new HtmlSaveComplete();
  $html = $page->getCompletePage($url, $auth['response']['data']['cookie']);
  $html = str_replace('<html ', '<html class="sl-override-context" ', $html);

  if ($force_show) {
    return $html;
  }

  //returns updated strings count
  return drupal_container()->get('smartling.api_wrapper')->uploadContext(array('url' => $url, 'html' => $html));
}


function smartling_translation_context_admin_settings_form_submit(array $form, array &$form_state) {
  variable_set('smartling_translation_context_username', $form_state['values']['username']);
  variable_set('smartling_translation_context_exclude_files', $form_state['values']['exclude_files']);

  $urls = $form_state['values']['url'];
  if (empty($urls)) {
    return;
  }
  $urls = explode("\n", $urls);


  $username = $form_state['values']['username'];
  $force_show = $form_state['values']['force_show'];
  foreach ($urls as $url) {
    $url = trim($url);
    $result = smartling_translation_context_upload_context($username, $url, $force_show);

    if ($force_show) {
      die($result);
    }

    $updatedStringsCount = $result;
    if ($updatedStringsCount < 0) {
      drupal_set_message(t('There was an error during context upload. Please !see_logs for details.', array('!see_logs' => l('see logs', 'admin/reports/dblog'))), 'error');
    } else {
      drupal_set_message(t('Smartling updated context for @updatedStringsCount strings', array('@updatedStringsCount' => $updatedStringsCount)));
    }
  }
}

function smartling_translation_context_js_alter(&$js) {
  global $user;
  if (!isset($_GET['smartling_context']) || ($user->name != variable_get('smartling_translation_context_username', ''))) {
    return;
  }

  $js = array();
  return;

//  $exclude_files = variable_get('smartling_translation_context_exclude_files', '');
//  $exclude_files = explode("\n", $exclude_files);
//  if (is_array($exclude_files) && count($exclude_files) > 0) {
//    foreach ($exclude_files as $filename) {
//      if (isset($js[$filename])) {
//        unset($js[$filename]);
//      }
//    }
//  }
//
//
//  foreach ($js as $filename => $settings) {
//    if ($filename === 'settings') {
//      continue;
//    }
//    $path = drupal_realpath($filename);
//    if (empty($path)) {
//      continue;
//    }
//    $file_content = file_get_contents( $path );
//    $js[$filename]['type'] = 'inline';
//    $js[$filename]['data'] = $file_content;
//  }
}

function smartling_translation_context_css_alter(&$css) {
  global $user;
  if (!isset($_GET['smartling_context']) || ($user->name != variable_get('smartling_translation_context_username', ''))) {
    return;
  }

  $exclude_files = variable_get('smartling_translation_context_exclude_files', '');
  $exclude_files = explode("\n", $exclude_files);
  if (is_array($exclude_files) && count($exclude_files) > 0) {
    foreach ($exclude_files as $filename) {
      if (isset($css[$filename])) {
        unset($css[$filename]);
      }
    }
  }

  foreach ($css as $filename => $settings) {
    if ($filename === 'settings') {
      continue;
    }

    $path = drupal_realpath($filename);
    if (empty($path)) {
      continue;
    }
    $file_content = file_get_contents($path);


    $matches = array();
    preg_match_all('/url\(([\d\D^)]+)\)/iU', $file_content, $matches);

    foreach($matches[1] as $k => $img_url) {
      $img_url = trim($img_url, '\'"');
      # make sure that it is an image and convert to data uri
      $fileType = trim(strtolower(pathinfo($img_url, PATHINFO_EXTENSION)));
      if (!preg_match('#^(gif|png|jp[e]?g|bmp)$#i', $fileType)) {
        continue;
      }

      $src = pathinfo($path, PATHINFO_DIRNAME) . '/' . $img_url;

      $mimType = 'png';
      $dataUri = file_get_contents($src);
      $dataUri = 'url("data:image/' . $mimType . ';base64,' . base64_encode($dataUri) . '")';
      $file_content = str_replace($matches[0][$k],  $dataUri, $file_content);
    }

    $css[$filename]['type'] = 'inline';
    $css[$filename]['data'] = $file_content;
  }
}

/**
 * Implements hook_action_info().
 */
function smartling_translation_context_action_info() {
  return array(
    'smartling_translation_context_do_upload' => array(
      'type' => 'system',
      'label' => t('Smartling upload translation context'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

function smartling_translation_context_do_upload($entity, array &$context) {
  if (isset($entity->smartling_context_url)) {
    $url = $entity->smartling_context_url;
  } else {
    $url = entity_uri($context['entity_type'], $entity);
    $url = url($url['path'], array('absolute'=> TRUE));
  }
  $username = variable_get('smartling_translation_context_username','');

  $updatedStringsCount = smartling_translation_context_upload_context($username, $url);

  $wrapper = entity_metadata_wrapper($context['entity_type'], $entity);
  $title   =  $wrapper->label();

  if ($updatedStringsCount < 0) {
    drupal_set_message(t('There was an error during context upload for entity <a href="@url">@title</a>. Please !see_logs for details.', array('!see_logs' => l('see logs', 'admin/reports/dblog'), '@url' => $url, '@title' => $title)), 'error');
  } else {
    drupal_set_message(t('Smartling updated context for @updatedStringsCount strings  for entity <a href="@url">@title</a>.', array('@updatedStringsCount' => $updatedStringsCount, '@url' => $url, '@title' => $title)));
  }
}

/*
 * Implements hook_views_default_views_alter()
 */
function smartling_translation_context_views_default_views_alter(&$views) {

  if (isset($views ['smartling_bulk_submit'])) {
    //$handler =& $views[$name]->display['default']->handler;
    $views['smartling_bulk_submit']->display['page']->display_options['fields']['views_bulk_operations']['vbo_operations']['action::smartling_translation_context_do_upload'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 1,
      'override_label' => 1,
      'label' => 'Upload context',
    );
    $views['smartling_bulk_submit']->display['page']->display_options['fields']['views_bulk_operations']['vbo_settings']['entity_load_capacity'] = '1';
    t('Upload context');
  }
}