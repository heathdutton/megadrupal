<?php

/**
 * @file
 * Install, update, and uninstall functions for the Smartling module.
 */

/**
 * Implements hook_install().
 */
function smartling_install() {
  variable_set('smartling_log', 1);
  variable_set('smartling_retrieval_type', 'published');
  variable_set('smartling_callback_url_use', TRUE);
  variable_set('smartling_auto_authorize_content', TRUE);
  variable_set('smartling_api_url', SMARTLING_DEFAULT_API_URL);

  $language_negotiation_language = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default-url' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  $language_negotiation_language_content = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default-url' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  $locale_language_providers_weight_language = array(
    'locale-url' => '-8',
    'locale-session' => '-6',
    'locale-user' => '-4',
    'locale-browser' => '-2',
    'language-default' => '10',
  );

  $locale_language_providers_weight_language_content = array(
    'locale-url' => '-8',
    'locale-session' => '-6',
    'locale-user' => '-4',
    'locale-browser' => '-2',
    'locale-interface' => '8',
    'language-default' => '10',
  );

  variable_set('language_negotiation_language', $language_negotiation_language);
  variable_set('language_negotiation_language_content', $language_negotiation_language_content);
  variable_set('locale_language_providers_weight_language', $locale_language_providers_weight_language);
  variable_set('locale_language_providers_weight_language_content', $locale_language_providers_weight_language_content);

  // i18 string settings.
  $i18n_string_allowed_formats = array();
  // As the user has administer filters permissions we get a full list here.
  foreach (filter_formats() as $fid => $format) {
    $i18n_string_allowed_formats[$fid] = $fid;
  }
  variable_set('i18n_string_allowed_formats', $i18n_string_allowed_formats);
}

/**
 * Implements hook_enable().
 */
function smartling_enable() {

  // Set Multilingual support for content types.
  $node_types = node_type_get_types();
  $taxonomy_vocabularies = taxonomy_get_vocabularies();

  if (is_array($node_types)) {
    $entity_translation_settings = array(
      'default_language' => ENTITY_TRANSLATION_LANGUAGE_DEFAULT,
      'hide_language_selector' => 1,
      'exclude_language_none' => 1,
      'lock_language' => 1,
      'shared_fields_original_only' => 0,
    );

    // Set node and comments settings.
    foreach ($node_types as $type) {
      $mode = variable_get('language_content_type_' . $type->type, NULL);
      if (is_null($mode)) {
        // Must be string '0'.
        variable_set('language_content_type_' . $type->type, '0');
      }
      // Entity translate settings. Check if bundle is translated by fields.
      if (variable_get('language_content_type_' . $type->type, NULL) != SMARTLING_NODES_METHOD_KEY) {
        variable_set('entity_translation_settings_node__' . $type->type, $entity_translation_settings);
        variable_set('entity_translation_settings_comment__comment_node_' . $type->type, $entity_translation_settings);
      }
    }

    // Set taxonomy settings.
    foreach ($taxonomy_vocabularies as $vocabulary) {
      variable_set('entity_translation_settings_taxonomy_term__' . $vocabulary->machine_name, $entity_translation_settings);
    }

    // Set user settings.
    variable_set('entity_translation_settings_user__user', $entity_translation_settings);

    // Entity translation types and other settings.
    $entity_translation_entity_types = variable_get('entity_translation_entity_types', array());
    $entity_translation_entity_types = array_merge($entity_translation_entity_types, 
      array(
        'node' => 'node',
        'taxonomy_term' => 'taxonomy_term',
        'comment' => 'comment',
        'user' => 'user',
      )
    );

    variable_set('entity_translation_entity_types', $entity_translation_entity_types);
    variable_set('entity_translation_shared_labels', 1);
    variable_set('entity_translation_workflow_enabled', 0);
    variable_set('locale_field_language_fallback', 1);
  }
  // Ensure Smartling module is running after native translation modules.
  db_update('system')->fields(array('weight' => 20))
    ->condition('name', 'smartling')->execute();
}

/**
 * Implements hook_uninstall().
 */
function smartling_uninstall() {
  global $conf;
  foreach (array_keys($conf) as $key) {
    // It's important to use === instead of == with strpos()
    if (strpos($key, 'smartling_') === 0) {
      variable_del($key);
    }
  }

  $queue_array[] = 'smartling_check_status';
  $queue_array[] = 'smartling_upload';
  $queue_array[] = 'smartling_download';
  foreach ($queue_array as $queue_name) {
    $queue = DrupalQueue::get($queue_name);
    $queue->deleteQueue();
  }
}

/**
 * Implements hook_schema().
 */
function smartling_schema() {
  $schema['smartling_entity_data'] = array(
    'description' => 'Smartling entity information',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'Related id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => 'Entity type',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'description' => 'Bundle',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'original_language' => array(
        'description' => 'Original language code (drupal format)',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'target_language' => array(
        'description' => 'Target language code (drupal format)',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'Title of the original entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'file_name' => array(
        'description' => 'File with original content.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'translated_file_name' => array(
        'description' => 'File with translated content.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'progress' => array(
        'description' => 'Progress',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'submitter' => array(
        'description' => 'Submitter',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'submission_date' => array(
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'download' => array(
        'description' => 'Download status',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Status',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'content_hash' => array(
        'description' => 'Content hash',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'last_modified' => array(
        'description' => 'Date on which translation was last modified',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),

    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'rid' => array('rid'),
      'target_language' => array('target_language'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function smartling_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if (!function_exists('curl_init')) {
    $requirements['smartling']['title'] = $t('Smartling requires cURL library');
    $requirements['smartling']['description'] = $t('Smartling requires cURL library to be installed on your server in order to communicate with Smartling services.');
    $requirements['smartling']['severity'] = REQUIREMENT_ERROR;
    $requirements['smartling']['value'] = $t('Please configure cURL for Smartling.');
    return $requirements;
  }

  if ($phase == 'update') {
    $module_list = array();
    $module_names = array('i18n_taxonomy', 'i18n_field', 'entity_translation');
    foreach ($module_names as $module_name) {
      if (!module_exists($module_name)) {
        $module_list[] = $module_name;
      }
    }

    if (!empty($module_list)) {
      $requirements['smartling']['title'] = $t('Dependencies error');
      $requirements['smartling']['value'] = $t('Enable modules @modules', array('@modules' => implode(', ', $module_list)));
      $requirements['smartling']['severity'] = REQUIREMENT_WARNING;
      $requirements['smartling']['description'] = $t('Please enable modules');
    }
  }

  if ($phase == 'runtime') {
    $directory = smartling_get_dir();
    if (file_prepare_directory($directory)) {
      $requirements['smartling']['value'] = $t('Private file system has been successfully configured for Smartling.');
      $requirements['smartling']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['smartling']['description'] = $t('Smartling requires permissions to write to Drupal private file system in order to save temporary files that will be sent to the server.');
      $requirements['smartling']['severity'] = REQUIREMENT_ERROR;
      $requirements['smartling']['value'] = $t('Please configure the private file system for Smartling.');
    }
    $requirements['smartling']['title'] = $t('Smartling private file system');
  }
  // We must always return array, the installer doesn't use module_invoke_all().
  return $requirements;
}

/*
 * Implements hook_update_N().
 */
function smartling_update_7101(&$sandbox) {
  $supported_entity_types = array(
    'node' => 'smartling_node_fields_settings',
    'comment' => 'smartling_comment_fields_settings',
    'user' => 'smartling_user_fields_settings',
    'taxonomy_term' => 'smartling_taxonomy_term_fields_settings',
    'field_collection' => 'smartling_field_collection_fields_settings',
    'fieldable_panels_pane' => 'smartling_fieldable_panels_pane_fields_settings',
  );

  $settings = array();
  foreach ($supported_entity_types as $entity_type => $variable_name) {
    $field_settings = variable_get($variable_name, array());
    if (!empty($field_settings)) {
      $settings[$entity_type] = $field_settings;
    }
    variable_del($variable_name);
  }
  variable_set('smartling_fields_settings', $settings);
}

/*
 * Implements hook_update_N().
 */
function smartling_update_7102() {
  $field_spec = array(
    'description' => 'Title of the original entity.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );

  db_add_field('smartling_entity_data', 'title', $field_spec);

  db_query("UPDATE {smartling_entity_data} SET title = REPLACE(REPLACE(file_name, CONCAT('_', entity_type, '_', rid, '.xml'), ''), '_', ' ')");
}

/**
 * Makes the update of Smartling module smoother. Flushes the "inject" module cache on the disk.
 * Usually cache is placed at "public:\/\/php\/service_container\/ServiceContainer.php\/&lt;some file here&gt;.php"
 */
function smartling_update_7207() {
  inject_flush_caches();
  inject_exit();
}

/**
 * Adds a "last_modified" field to smartling_entity_data. It will keep the timestamp
 * on when was the translation changed for the last time.
 */
function smartling_update_7208() {
  $field_spec = array(
    'description' => 'Date on which translation was last modified',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );

  db_add_field('smartling_entity_data', 'last_modified', $field_spec);
}