<?php

/**
 * @file
 * Code for the smartling_reference.
 */

/**
 * References smartling form.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 *
 * @return array
 *   Return FAPI array for references smartling form.
 */
function smartling_admin_reference_settings_form(array $form, array &$form_state) {
  $form['smartling_reference']['title'] = array(
    '#type' => 'item',
    '#title' => t('Submit for rebuild references'),
  );
  $form['smartling_reference']['rebuild_references'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild references'),
  );
  $form['#submit'][] = 'smartling_rebuild_references_form_submit';

  return $form;
}

/**
 * Smartling rebuild references form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_rebuild_references_form_submit(array $form, array &$form_state) {
  $log = smartling_log_get_handler();
  $smartling_active_types = smartling_settings_get_handler()->nodeGetFieldsSettings();
  $condition_active_bundles = array();
  $original_node_ids = FALSE;
  $field_names = array();
  $operations = array();

  foreach (array_keys($smartling_active_types) as $bundle) {
    if (smartling_nodes_method($bundle)) {
      $condition_active_bundles[] = $bundle;
    }
  }
  $entityreference_fields = smartling_get_fields_by_type('entityreference');
  foreach ($entityreference_fields as $field) {
    $field_names[] = $field['field_name'];
  }

  if (!empty($condition_active_bundles) && !empty($field_names)) {
    // Log fields.
    $log->info('Smartling fixes references for fields: @fields', array('@fields' => implode(', ', $field_names)));
    // Get entity types with references field.
    $condition_bundles = smartling_get_entity_types_whith_references($condition_active_bundles, $field_names);

    if ($condition_bundles) {
      // Log bundles.
      $log->setMessage('Smartling fixes references for bundles: @bundles')
        ->setVariables(array('@bundles' => implode(', ', $condition_bundles)))
        ->execute();
      // Get ids for original node with smartling translate.
      $original_node_ids = smartling_get_original_node_ids($condition_bundles);
    }

    if ($original_node_ids) {
      // Log node ids.
      $log->setMessage('Smartling fixes references for nodes: @nids')
        ->setVariables(array('@nids' => implode(', ', $original_node_ids)))
        ->execute();
      foreach ($original_node_ids as $id) {
        $operations[] = array(
          'smartling_fix_references_by_original',
          array($id),
        );
      }
    }

    if (count($operations) >= 1) {
      $batch = array(
        'title' => t('Fix references'),
        'operations' => $operations,
      );
      $redirect = url('admin/config/regional/smartling', array(
        'absolute' => TRUE,
        'fragment' => 'smartling-references-settings',
      ));
      drupal_set_message(t('References have been fixed'));
      batch_set($batch);
      batch_process($redirect);
    }
  }
  else {
    drupal_set_message(t('Nodes not found'));
  }
}

/**
 * Fix references for translated node by id original node.
 *
 * @param int $id
 *   Id of original node.
 */
function smartling_fix_references_by_original($id) {
  // Get translation.
  $node = node_load($id);
  $translations = translation_node_get_translations($node->tnid);

  foreach ($translations as $translation) {
    if ($translation->nid != $id) {
      smartling_fix_references_for_translated_node('node', $translation->nid);
    }
  }
}

/**
 * Fix references for translated node.
 *
 * @param string $entity_type
 *   Entity type.
 * @param object $entity
 *   Entity object.
 */
function smartling_fix_references_for_translated_node($entity_type, $entity) {
  if (is_numeric($entity)) {
    $entity = entity_load_single($entity_type, $entity);
  }
  $original_entity = entity_load_single($entity_type, $entity->tnid);
  $entity_language = entity_language($entity_type, $entity);
  // Fix for child references.
  $entityreference_fields = smartling_get_fields_by_type('entityreference');

  foreach ($entityreference_fields as $field) {
    $field_name = $field['field_name'];
    $is_multiple = ($field['cardinality'] == 1) ? FALSE : TRUE;

    if (!empty($original_entity->{$field_name})) {
      $original_wrapper = entity_metadata_wrapper($entity_type, $original_entity);
      $wrapper = entity_metadata_wrapper($entity_type, $entity);
      $target_type = $field['settings']['target_type'];
      $save = FALSE;

      if ($is_multiple) {
        // For multiple value fields.
        foreach ($original_wrapper->{$field_name} as $delta => $item_wrapper) {
          $child_entity = $item_wrapper->value();
          $swap_id = smartling_get_child_fixed_id_reference($target_type, $child_entity, $entity_language);

          if (is_numeric($swap_id)) {
            $wrapper->{$field_name}[$delta]->set($swap_id);
            $save = TRUE;
          }
        }
      }
      else {
        // For single value fields.
        $child_entity = $original_wrapper->{$field_name}->value();
        $swap_id = smartling_get_child_fixed_id_reference($target_type, $child_entity, $entity_language);

        if (is_numeric($swap_id)) {
          $wrapper->{$field_name}->set($swap_id);
          $save = TRUE;
        }
      }

      if ($save) {
        $wrapper->save();
      }
    }
  }
}

/**
 * Get child fixed id reference.
 *
 * @param string $entity_type
 *   Entity type.
 * @param object $entity
 *   Entity object.
 * @param string $lang
 *   Locale in drupal format (ru, en).
 *
 * @return int|bool
 *   Return child fixed reference id or FALSE.
 */
function smartling_get_child_fixed_id_reference($entity_type, $entity, $lang) {
  switch ($entity_type) {
    case 'node':
      $translations = translation_node_get_translations($entity->tnid);
      if (isset($translations[$lang])) {
        $fix_id = $translations[$lang]->nid;
      }
      else {
        $fix_id = FALSE;
      }
      break;

    case 'taxonomy_term':
      $vocabulary = taxonomy_vocabulary_machine_name_load($entity->vocabulary_machine_name);
      $vocabulary_mode = i18n_taxonomy_vocabulary_mode($vocabulary);
      switch ($vocabulary_mode) {
        case I18N_MODE_TRANSLATE:
          $translate_term = i18n_taxonomy_term_get_translation($entity, $lang);
          if (!is_null($translate_term)) {
            $fix_id = $translate_term->tid;
          }
          else {
            $fix_id = FALSE;
          }
          break;

        case I18N_MODE_LOCALIZE:
          $fix_id = FALSE;
          break;

        default:
          $fix_id = FALSE;
          break;
      }
      break;

    case 'comment':
      $fix_id = FALSE;
      break;

    case 'user':
      $fix_id = FALSE;
      break;

    default:
      $fix_id = FALSE;
      break;
  }
  return $fix_id;
}

/**
 * Get entity types with references.
 *
 * @param array $bundles
 *   Bundles.
 * @param array $field_names
 *   Field names.
 *
 * @return array|bool
 *   Return entity types with references array or FALSE.
 */
function smartling_get_entity_types_whith_references(array $bundles, array $field_names) {
  $condition_bundles = db_select('field_config_instance', 'fci')
    ->fields('fci', array('bundle'))
    ->condition('fci.entity_type', 'node', '=')
    ->condition('fci.bundle', $bundles, 'IN')
    ->condition('fci.field_name', $field_names, 'IN')
    ->execute()
    ->fetchCol();

  if (!empty($condition_bundles)) {
    $condition_bundles = array_unique($condition_bundles);
    return $condition_bundles;
  }
  else {
    return FALSE;
  }
}

/**
 * Get original nodes by bundles.
 *
 * @param array $bundles
 *   Bundles.
 *
 * @return array|bool
 *   Return original node ids array by bundles or FALSE.
 */
function smartling_get_original_node_ids(array $bundles) {
  $original_node_ids = db_select('smartling_entity_data', 'sed')
    ->fields('sed', array('rid'))
    ->condition('sed.entity_type', 'node', '=')
    ->condition('sed.bundle', $bundles, 'IN')
    ->execute()
    ->fetchCol();

  if (!empty($original_node_ids)) {
    $original_node_ids = array_unique($original_node_ids);
    return $original_node_ids;
  }
  else {
    return FALSE;
  }
}

/**
 * Get fields by type.
 *
 * @param string $type
 *   Like entityreference field type or other.
 *
 * @return array
 *   Return array with fields by type.
 */
function smartling_get_fields_by_type($type) {
  return field_read_fields(array('type' => $type));
}
