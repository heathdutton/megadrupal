<?php

/**
 * @file
 * Tests for smartling.
 */

require_once __DIR__ . '/../../lib/Drupal/smartling/Alters/SmartlingContentProcessorInterface.php';
require_once __DIR__ . '/../lib/Drupal/smartling_demo_content/Alters/SmartlingContentMediaProcessor.php';
use Drupal\smartling_demo_content\Alters\SmartlingContentMediaProcessor;

/**
 * SmartlingMockedMediaProcessor.
 */
class SmartlingMockedMediaProcessor extends SmartlingContentMediaProcessor {
  protected $func1;
  protected $func2;

  /**
   * Init.
   *
   * @param string $callable1
   *   Function 1.
   * @param string $callable2
   *   Function 2.
   */
  public function __construct($callable1, $callable2) {
    $this->func1 = $callable1;
    $this->func2 = $callable2;
  }

  /**
   * Get file by id.
   *
   * @param int $fid
   *   File id.
   *
   * @return mixed
   *   File.
   */
  protected function getFileById($fid) {
    return call_user_func($this->func1, $fid);
  }

  /**
   * Get file by file name.
   *
   * @param string $fname
   *   File name.
   *
   * @return mixed
   *   File.
   */
  protected function getFileByName($fname) {
    return call_user_func($this->func2, $fname);
  }
}

/**
 * SmartlingContentMediaProcessorTest.
 */
class SmartlingContentMediaProcessorTest extends \DrupalUnitTestCase {
  protected $item;
  protected $context;
  protected $entity;

  /**
   * Get info.
   *
   * @return array
   *   Return info array.
   */
  public static function getInfo() {
    return array(
      'name' => 'Content - Smartling Content Media Processor',
      'description' => 'Checks behaviour of the processor for Media items (json)',
      'group' => 'Smartling UnitTests',
    );
  }

  /**
   * Setup.
   */
  protected function setUp() {
    parent::setUp();

    // Enable Smartling modules.
    $media_json = '[[{"fid":"41","view_mode":"default","fields":{"format":"default"},"type":"media","attributes":{"class":"media-element file-default"}}]]';
    $this->item = array($media_json, $media_json);
    $this->context = array(json_decode($media_json));
    $this->entity = new stdClass();

  }

  /**
   * Test should not fail if both files are not found.
   */
  public function testShouldNotFailIfBothFilesAreNotFound() {
    $func1 = function () {
      return NULL;
    };
    $func2 = function () {
      return NULL;
    };
    $item = $this->item;
    $proc = new SmartlingMockedMediaProcessor($func1, $func2);

    $proc->process($item, $this->context, 'en', 'field_body', $this->entity);

    $this->assertEqual($this->item, $item, 'Test should not fail if both files are not found');
  }

  /**
   * Test should return orig file if translated is not found.
   */
  public function testShouldReturnOrigFileIfTranslatedIsNotFound() {
    $func1 = function () {
      $tmp = new stdClass();
      $tmp->filename = 'hi';
      return $tmp;
    };
    $func2 = function () {
      return NULL;
    };
    $item = $this->item;
    $proc = new SmartlingMockedMediaProcessor($func1, $func2);

    $proc->process($item, $this->context, 'en', 'field_body', $this->entity);

    $this->assertEqual($this->item, $item, 'Test should return orig file if translated is not found');
  }

  /**
   * Test should return single found translated file.
   */
  public function testShouldReturnSingleFoundTranslatedFile() {
    $func1 = function () {
      $tmp = new stdClass();
      $tmp->filename = 'hi';
      return $tmp;
    };
    $func2 = function () {
      $tmp = new stdClass();
      $tmp->filename = 'en_hi';
      $tmp->fid = 1;
      return array($tmp);
    };
    $item = $this->item;
    $proc = new SmartlingMockedMediaProcessor($func1, $func2);

    $proc->process($item, $this->context, 'en', 'field_body', $this->entity);

    $item_res = $this->item;
    $item_res[1] = '[[{"fid":1,"view_mode":"default","fields":{"format":"default"},"type":"media","attributes":{"class":"media-element file-default"}}]]';

    $this->assertEqual($item_res, $item, 'Test should return single found translated file');
  }

  /**
   * Test should return first found translated file.
   */
  public function testShouldReturnFirstFoundTranslatedFile() {
    $func1 = function () {
      $tmp = new stdClass();
      $tmp->filename = 'hi';
      return $tmp;
    };
    $func2 = function () {
      $tmp = new stdClass();
      $tmp->filename = 'en_hi';
      $tmp->fid = 1;
      return array($tmp, $tmp, $tmp);
    };
    $item = $this->item;
    $proc = new SmartlingMockedMediaProcessor($func1, $func2);

    $proc->process($item, $this->context, 'en', 'field_body', $this->entity);

    $item_res = $this->item;
    $item_res[1] = '[[{"fid":1,"view_mode":"default","fields":{"format":"default"},"type":"media","attributes":{"class":"media-element file-default"}}]]';

    $this->assertEqual($item_res, $item, 'Test should return first found translated file');
  }
}
