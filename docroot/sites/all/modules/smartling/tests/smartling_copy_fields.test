<?php

/**
 * @file
 * Tests for smartling.
 */

/**
 * SmartlingCopyFieldsTest.
 */
class SmartlingCopyFieldsTest extends SmartlingWebTestCase {

  /**
   * Test info.
   *
   * @return array
   *   Return test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Content - Copy all fields to translated node',
      'description' => 'Test copying content of all fields from the original node to translated node',
      'group' => 'Smartling',
    );
  }

  /**
   * Test correct copy fields when translated node not exist.
   */
  public function testCorrectCopyFieldsTranslatedNodeNotExist() {
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set pseudo for smartling.
    $this->smartlingSetRetrievalType('pseudo');

    // Add Price field.
    $edit = array(
      "fields[_add_new_field][label]" => 'Price',
      "fields[_add_new_field][weight]" => '-3',
      "fields[_add_new_field][field_name]" => 'price',
      "fields[_add_new_field][type]" => 'number_decimal',
      "fields[_add_new_field][widget_type]" => 'number',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertText(t('Saved Price configuration.'));

    // Add Client help url field.
    $edit = array(
      "fields[_add_new_field][label]" => 'Client help url',
      "fields[_add_new_field][weight]" => '-2',
      "fields[_add_new_field][field_name]" => 'client_help_url',
      "fields[_add_new_field][type]" => 'text',
      "fields[_add_new_field][widget_type]" => 'text_textfield',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertText(t('Saved Client help url configuration.'));

    // Add Tags field.
    $edit = array(
      "fields[_add_existing_field][label]" => 'Tags',
      "fields[_add_existing_field][weight]" => '0',
      "fields[_add_existing_field][field_name]" => 'field_tags',
      "fields[_add_existing_field][widget_type]" => 'taxonomy_autocomplete',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertText(t('Saved Tags configuration.'));

    // Set nodes method for page CT.
    $this->smartlingSetMethodSettings('page');
    // Set fields for page CT.
    $this->smartlingSetFieldSettings('page', 'title_property_field');
    $this->smartlingSetFieldSettings('page', 'body');

    $terms = array(
      'term1' => 'Test term',
    );

    // Create node content.
    $node_array = array(
      'title' => 'Title test',
      'language' => 'en',
      'field_tags[und]' => drupal_implode_tags($terms),
    );

    $this->drupalPost('node/add/page', $node_array, t('Save'));

    $node_array = array(
      'body[und][0][value]' => 'Boby text',
      'field_price[und][0][value]' => '123.00',
      'field_client_help_url[und][0][value]' => 'url',
    );

    $this->drupalPost('node/1/edit', $node_array, t('Save'));

    // Send and download node.
    $this->smartlingTranslateNode(1, array('nl'));

    $this->drupalGet('node/1/edit');
    $this->drupalGet('node/2/edit');

    // Check.
    $original_node = node_load(1);
    $translated_node = node_load(2);
    $this->assertTrue(($translated_node->tnid == 1), t('Translated node linked to original'), t('Browser'));

    $translated_value = $translated_node->title;
    $original_value = $original_node->title;
    $this->assertTrue((!empty($translated_value) && ($translated_value != $original_value)), t('Title contains translated value'), t('Browser'));

    $translated_value = $translated_node->body[LANGUAGE_NONE][0]['value'];
    $original_value = $original_node->body[LANGUAGE_NONE][0]['value'];
    $this->assertTrue((!empty($translated_value) && ($translated_value != $original_value)), t('Body contains translated value'), t('Browser'));

    // Equal client help url.
    $translated_value = $translated_node->field_client_help_url[LANGUAGE_NONE][0]['value'];
    $original_value = $original_node->field_client_help_url[LANGUAGE_NONE][0]['value'];
    $this->assertEqual($original_value, $translated_value);
    $this->assertTrue((!empty($translated_value) && ($translated_value == $original_value)), t('field_client_help_url contains original value'), t('Browser'));

    // Equal tags.
    $translated_value = $translated_node->field_tags[LANGUAGE_NONE][0]['tid'];
    $original_value = $original_node->field_tags[LANGUAGE_NONE][0]['tid'];
    $this->assertEqual($original_value, $translated_value);
    $this->assertTrue((!empty($translated_value) && ($translated_value == $original_value)), t('field_tags contains original value'), t('Browser'));

    // Equal price.
    $translated_value = $translated_node->field_price[LANGUAGE_NONE][0]['value'];
    $original_value = $original_node->field_price[LANGUAGE_NONE][0]['value'];
    $this->assertEqual($original_value, $translated_value);
    $this->assertTrue((!empty($translated_value) && ($translated_value == $original_value)), t('field_price contains original value'), t('Browser'));
  }

  /**
   * Test correct copy fields when translated node exist.
   */
  public function testCorrectCopyFieldsTranslatedNodeExist() {
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set pseudo for smartling.
    $this->smartlingSetRetrievalType('pseudo');

    // Add Price field.
    $edit = array(
      "fields[_add_new_field][label]" => 'Price',
      "fields[_add_new_field][weight]" => '-3',
      "fields[_add_new_field][field_name]" => 'price',
      "fields[_add_new_field][type]" => 'number_decimal',
      "fields[_add_new_field][widget_type]" => 'number',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertText(t('Saved Price configuration.'));

    // Add Client help url field.
    $edit = array(
      "fields[_add_new_field][label]" => 'Client help url',
      "fields[_add_new_field][weight]" => '-2',
      "fields[_add_new_field][field_name]" => 'client_help_url',
      "fields[_add_new_field][type]" => 'text',
      "fields[_add_new_field][widget_type]" => 'text_textfield',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertText(t('Saved Client help url configuration.'));

    // Add Tags field.
    $edit = array(
      "fields[_add_existing_field][label]" => 'Tags',
      "fields[_add_existing_field][weight]" => '0',
      "fields[_add_existing_field][field_name]" => 'field_tags',
      "fields[_add_existing_field][widget_type]" => 'taxonomy_autocomplete',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertText(t('Saved Tags configuration.'));

    // Set nodes method for page CT.
    $this->smartlingSetMethodSettings('page');
    // Set fields for page CT.
    $this->smartlingSetFieldSettings('page', 'title_property_field');
    $this->smartlingSetFieldSettings('page', 'body');

    // Create original node content.
    $terms = array(
      'term1' => 'Test term',
    );

    $node_array = array(
      'title' => 'Title test',
      'language' => 'en',
      'field_tags[und]' => drupal_implode_tags($terms),
    );

    $this->drupalPost('node/add/page', $node_array, t('Save'));

    $node_array = array(
      'body[und][0][value]' => 'Boby text',
      'field_price[und][0][value]' => '123.00',
      'field_client_help_url[und][0][value]' => 'url',
    );

    $this->drupalPost('node/1/edit', $node_array, t('Save'));

    // Create translated node content.
    $terms = array(
      'term2' => 'Translated test term',
    );

    $node_tr_array = array(
      'title' => 'Translated title test',
      'field_tags[und]' => drupal_implode_tags($terms),
    );

    $options = array('query' => array('translation' => '1', 'target' => 'nl'));
    $this->drupalPost('node/add/page', $node_tr_array, t('Save'), $options);

    $node_tr_array = array(
      'body[und][0][value]' => 'Translated boby text nl',
      'field_price[und][0][value]' => '321.00',
      'field_client_help_url[und][0][value]' => 'taranslated url',
    );

    $this->drupalPost('node/2/edit', $node_tr_array, t('Save'));

    // Send and download node.
    $this->smartlingTranslateNode(1, array('nl'));

    $this->drupalGet('node/1/edit');
    $this->drupalGet('node/2/edit');

    // Check.
    $original_node = node_load(1);
    $translated_node = node_load(2, NULL, TRUE);
    $this->assertTrue(($translated_node->tnid == 1), t('Translated node linked to original'), t('Browser'));
    $this->drupalGet('node/2/translate');

    $translated_value = $translated_node->title;
    $this->assertTrue((!empty($translated_value) && ($translated_value != 'Translated title test')), t('Title contains translated value'), t('Browser'));

    $translated_value = $translated_node->body[LANGUAGE_NONE][0]['value'];

    $this->assertTrue((!empty($translated_value) && ($translated_value != 'Translated boby text nl')), t('Body contains translated value'), t('Browser'));

    // Equal client help url.
    $translated_value = $translated_node->field_client_help_url[LANGUAGE_NONE][0]['value'];
    $original_value = $original_node->field_client_help_url[LANGUAGE_NONE][0]['value'];
    $this->assertTrue((!empty($translated_value) && ($translated_value != $original_value) && ($translated_value == 'taranslated url')), t('field_client_help_url check success'), t('Browser'));

    // Equal tags.
    $translated_value = $translated_node->field_tags[LANGUAGE_NONE][0]['tid'];
    $original_value = $original_node->field_tags[LANGUAGE_NONE][0]['tid'];
    $this->assertTrue((!empty($translated_value) && ($translated_value != $original_value) && ($translated_value == '2')), t('field_tags check success'), t('Browser'));

    // Equal price.
    $translated_value = $translated_node->field_price[LANGUAGE_NONE][0]['value'];
    $original_value = $original_node->field_price[LANGUAGE_NONE][0]['value'];
    $this->assertTrue((!empty($translated_value) && ($translated_value != $original_value) && ($translated_value == '321.00')), t('field_price check success'), t('Browser'));
  }

}
