<?php

/**
 * @file
 * Tests for smartling.
 */
use Drupal\smartling\ApiWrapper\MockApiWrapper;

/**
 * SmartlingNodeUploadTest.
 */
class SmartlingNodeUploadFieldCollectionTest extends SmartlingWebTestCase {

  /**
   * Test info.
   *
   * @return array
   *   Return test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Content - Upload Field Collection content. Upload single node from Edit form',
      'description' => 'Test success flow of upload from Edit form',
      'group' => 'Smartling',
    );
  }

//  /**
//   * Test correct node upload.
//   */
//  public function _testCorrectNodeUpload() {
//    die('wertyuio');
//    /*@todo:
//    - prepare files for upload/download
//    -
//    */
//
//
//    module_enable(array('smartling_field_collection_content_demo'));
//
//    // Add predefined languages.
//    locale_add_language('nl-NL');
//    // Set correct account settings.
//    $this->smartlingSetCorrectSettings();
//    // Set nodes method for page CT.
//    $this->smartlingSetMethodSettings('collection_test');
//    // Set title field for article CT.
//    $this->smartlingSetFieldSettings('collection_test', 'title_property_field');
//    // Create node.
//    $node_array = array(
//      'title' => 'Title test',
//      'language' => 'en',
//    );
//    $this->drupalPost('node/add/page', $node_array, t('Save'));
//
//    // Send node to smartling.
//    $edit = array(
//      "target[nl]" => 'nl',
//    );
//    $this->drupalPost('node/1/edit', $edit, t('Send to Smartling'));
//    $this->assertText(t('The node "@title" has been sent to Smartling for translation to "@langs".', array(
//      '@title' => 'Title test',
//      '@langs' => 'nl',
//    )));
//
//    $queue = db_select('queue', 'q')
//      ->fields('q', array('data'))
//      ->condition('q.name', 'smartling_upload', '=')
//      ->execute()
//      ->fetchObject();
//    if (empty($queue)) {
//      $this->error('Queue smartling_upload is empty.');
//    }
//    else {
//      $data = unserialize($queue->data);
////      $this->verbose(print_r($data, TRUE));
//      $this->assertEqual($data, 1);
//    }
//  }

  public function testNodeFlow() {
    module_enable(array('smartling_field_collection_content_demo'));

    /* @var $mockApiWrapper MockApiWrapper */
    $mockApiWrapper = drupal_container()->get('smartling.mock_api_wrapper');

    $mockApiWrapper->addExpectedFileForUpload(__DIR__ . '/xml_sources/node_upload__upload.xml');
    $mockApiWrapper->addExpectedFileForDownload(__DIR__ . '/xml_sources/node_upload__download.xml');

    drupal_container()->set('smartling.api_wrapper', $mockApiWrapper);

    $settings = array(
      'body'      => array(LANGUAGE_NONE => array(array('value' => 'Lorem Ipsum Body Text'))),
      'title' => 'Node title Lorem Ipsum',
    );
    $node = $this->drupalCreateNode($settings);

    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set nodes method for page CT.
    $this->smartlingSetMethodSettings('collection_test');
    // Set title field for article CT.
    //$this->smartlingSetFieldSettings('collection_test', 'title_property_field');
    $this->smartlingSetFieldSettings('collection_test', 'body');

    $smartling_data = smartling_create_from_entity($node, 'node', $node->language, 'nl');
    smartling_queue_send_to_translate_process($smartling_data->eid);

    // @todo use API function for path building.
    $translation_file_path = DRUPAL_ROOT . '/' . $this->private_files_directory . '/smartling/' . strtolower(trim(preg_replace('#\W+#', '_', $node->title), '_')) . '_node_' . $node->nid . '.xml';

    $this->assertTrue(file_exists($translation_file_path), $translation_file_path);

    if (file_exists($translation_file_path)) {
      $translation_file = file_get_contents($translation_file_path);
      $assertion_file = file_get_contents(__DIR__ . '/xml_sources/node_upload__upload.xml');
      $this->assertEqual($translation_file, $assertion_file);
    }
    // @todo validate xml structure and content.

    smartling_queue_download_translated_item_process($smartling_data->eid);

    $filename = DRUPAL_ROOT . '/' . $this->private_files_directory . '/smartling/' . strtolower(trim(preg_replace('#\W+#', '_', $node->title), '_')) . '_node_' . $node->nid . '_nl.xml';
    $this->assertTrue(file_exists($filename), $filename);


    drupal_static_reset('translation_node_get_translations');
    $translations = translation_node_get_translations(($node->tnid ?: $node->nid));

    $this->assertTrue(isset($translations['nl']), print_r($translations, TRUE));

    // @todo verify that everything was translated properly
  }

}
