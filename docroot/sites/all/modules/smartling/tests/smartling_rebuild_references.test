<?php

/**
 * @file
 * Tests for smartling.
 */

/**
 * SmartlingRebuildReferencesTest.
 */
class SmartlingRebuildReferencesTest extends SmartlingWebTestCase {

  /**
   * Test info.
   *
   * @return array
   *   Return test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'References - Rebuild references',
      'description' => 'Test rebuild references',
      'group' => 'Smartling',
    );
  }

  /**
   * Test correct rebuild references.
   */
  public function testCorrectRebuildReferences() {
    // Add demo content.
    module_enable(array('smartling_demo_content'));
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();

    // Add NL language.
    $edit = array(
      "target_locales[nl]" => 'nl',
      "target_locales_text_key_nl" => 'nl-NL',
    );
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-account-info-settings-form');
    $this->assertText(t('Account settings saved.'));
    // Add field.
    $this->smartlingAddEntityReferenceFieldToNode('article', 'field_tonode_cardinality1', 'node', array(
      'article',
      'page',
      'travel',
    ), 1);
    $this->smartlingAddEntityReferenceFieldToNode('article', 'field_tonode_cardinality2', 'node', array(
      'article',
      'page',
      'travel',
    ), 2);
    $this->smartlingAddEntityReferenceFieldToNode('article', 'field_tonode_notranslate1', 'node', array(
      'article',
      'page',
      'travel',
    ), 1);
    $this->smartlingAddEntityReferenceFieldToNode('article', 'field_toterm_cardinality1', 'taxonomy_term', array(
      'tags',
      'travel',
    ), 1);
    $this->smartlingAddEntityReferenceFieldToNode('article', 'field_toterm_cardinality2', 'taxonomy_term', array(
      'tags',
      'travel',
    ), 2);
    $this->smartlingAddEntityReferenceFieldToNode('article', 'field_toterm_notranslate1', 'taxonomy_term', array(
      'tags',
      'travel',
    ), 1);

    // Set nodes method for CT.
    $this->smartlingSetMethodSettings('article');
    // Set fields for page CT.
    $this->smartlingSetFieldSettings('article', 'body');
    // Set nodes method for CT.
    $this->smartlingSetMethodSettings('travel');
    // Set fields for page CT.
    $this->smartlingSetFieldSettings('travel', 'body');
    // Set method for vocabulary.
    $this->smartlingSetTermMethodSettings('travel');
    // Set fields for term.
    $this->smartlingSetTermFieldSettings('travel', 'name_property_field');

    // Set node values.
    $node = node_load(1);
    $node->field_tonode_cardinality1[LANGUAGE_NONE][0]['target_id'] = 2;
    $node->field_tonode_cardinality2[LANGUAGE_NONE][0]['target_id'] = 3;
    $node->field_tonode_cardinality2[LANGUAGE_NONE][1]['target_id'] = 4;
    $node->field_tonode_notranslate1[LANGUAGE_NONE][0]['target_id'] = 5;

    $node->field_toterm_cardinality1[LANGUAGE_NONE][0]['target_id'] = 1;
    $node->field_toterm_cardinality2[LANGUAGE_NONE][0]['target_id'] = 2;
    $node->field_toterm_cardinality2[LANGUAGE_NONE][1]['target_id'] = 3;
    $node->field_toterm_notranslate1[LANGUAGE_NONE][0]['target_id'] = 4;
    node_save($node);
    $this->drupalGet('node/1/edit');
    // Upload and download nodes.
    for ($nid = 1; $nid <= 4; $nid++) {
      $this->smartlingUploadDownloadNode($nid, array('nl', 'ru'));
      $this->drupalGet('node/' . $nid . '/translate');
    }
    // Upload and download terms.
    for ($tid = 1; $tid <= 3; $tid++) {
      $this->smartlingUploadDownloadTerm($tid, array('nl', 'ru'));
    }
    $this->drupalGet('admin/structure/taxonomy/travel');
    // Rebuild.
    $this->drupalPost('admin/config/regional/smartling', array(), t('Rebuild references'), array(), array(), 'smartling-admin-reference-settings-form');
    $this->assertText(t('References are fixed'));
    // Check.
    $this->drupalGet('admin/structure/taxonomy/travel/edit');

    // Fix vocabulary.
    $vocabulary = taxonomy_vocabulary_machine_name_load('travel');
    $vocabulary->i18n_mode = I18N_MODE_TRANSLATE;
    taxonomy_vocabulary_save($vocabulary);

    $node_original = node_load(1, NULL, TRUE);
    $translations = translation_node_get_translations($node_original->tnid);

    if (is_array($translations)) {
      foreach ($translations as $translation) {
        if ($translation->nid != 1) {
          $node_translated = node_load($translation->nid, NULL, TRUE);
          $this->assertEqual($node_translated->field_tonode_notranslate1[LANGUAGE_NONE][0]['target_id'], $node_original->field_tonode_notranslate1[LANGUAGE_NONE][0]['target_id']);
          $this->assertEqual($node_translated->field_toterm_notranslate1[LANGUAGE_NONE][0]['target_id'], $node_original->field_toterm_notranslate1[LANGUAGE_NONE][0]['target_id']);

          $fix_id = $this->smartlingGetFixReferencesId('node', $node_original->field_tonode_cardinality1[LANGUAGE_NONE][0]['target_id'], $node_translated->language);
          $this->assertEqual($node_translated->field_tonode_cardinality1[LANGUAGE_NONE][0]['target_id'], $fix_id);

          $fix_id = $this->smartlingGetFixReferencesId('node', $node_original->field_tonode_cardinality2[LANGUAGE_NONE][0]['target_id'], $node_translated->language);
          $this->assertEqual($node_translated->field_tonode_cardinality2[LANGUAGE_NONE][0]['target_id'], $fix_id);

          $fix_id = $this->smartlingGetFixReferencesId('node', $node_original->field_tonode_cardinality2[LANGUAGE_NONE][1]['target_id'], $node_translated->language);
          $this->assertEqual($node_translated->field_tonode_cardinality2[LANGUAGE_NONE][1]['target_id'], $fix_id);

          $fix_id = $this->smartlingGetFixReferencesId('taxonomy_term', $node_original->field_toterm_cardinality1[LANGUAGE_NONE][0]['target_id'], $node_translated->language);
          $this->assertEqual($node_translated->field_toterm_cardinality1[LANGUAGE_NONE][0]['target_id'], $fix_id);

          $fix_id = $this->smartlingGetFixReferencesId('taxonomy_term', $node_original->field_toterm_cardinality2[LANGUAGE_NONE][0]['target_id'], $node_translated->language);
          $this->assertEqual($node_translated->field_toterm_cardinality2[LANGUAGE_NONE][0]['target_id'], $fix_id);

          $fix_id = $this->smartlingGetFixReferencesId('taxonomy_term', $node_original->field_toterm_cardinality2[LANGUAGE_NONE][1]['target_id'], $node_translated->language);
          $this->assertEqual($node_translated->field_toterm_cardinality2[LANGUAGE_NONE][1]['target_id'], $fix_id);
        }
      }
    }
    else {
      $this->error('No original node translations');
    }
  }

}
