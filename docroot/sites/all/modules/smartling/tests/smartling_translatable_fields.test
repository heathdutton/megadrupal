<?php

/**
 * @file
 * Tests for smartling.
 */

/**
 * SmartlingTranslatableFieldsTest.
 */
class SmartlingTranslatableFieldsTest extends SmartlingWebTestCase {

  /**
   * Test info.
   *
   * @return array
   *   Return test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Translations - Save translations in different fields',
      'description' => 'Test saving translations to fields if they are translatable or not',
      'group' => 'Smartling',
    );
  }

  /**
   * Test correct not translatable fields.
   */
  public function testCorrectNotTranslatableFields() {
    // Set Up Test.
    $this->smartlingDifferentFieldsSetUpTest();
    // Disable Drupal translations for fields.
    $this->smartlingSetTranslatableFieldSettings('field_translatable_data', 0);
    $this->smartlingSetTranslatableFieldSettings('field_not_translatable_data', 0);
    $this->assertEqual($this->smartlingGetTranslatableFieldSettings('field_translatable_data'), 0);
    $this->assertEqual($this->smartlingGetTranslatableFieldSettings('field_not_translatable_data'), 0);
    // Create new node.
    $this->drupalCreateNode();
    // Set node values.
    $node = node_load(1);
    $node->field_translatable_data[LANGUAGE_NONE][0]['value'] = 'Translatable data field text';
    $node->field_not_translatable_data[LANGUAGE_NONE][0]['value'] = 'Not translatable data field text';
    node_save($node);
    // Send and download node.
    $this->smartlingTranslateNode($node->nid, array('nl'));

    // Asserts.
    $this->drupalGet('node/1/edit');
    $this->drupalGet('node/2/edit');
    $node_original = node_load(1);
    $node_translated = node_load(2);
    $fields = array('field_translatable_data', 'field_not_translatable_data');

    foreach ($fields as $field_name) {
      $this->assertTrue((isset($node_original->{$field_name}[LANGUAGE_NONE]) && (count($node_original->{$field_name}) == 1)), t('Original node has only UND language for @field_name field', array('@field_name' => $field_name)), t('Browser'));
      $this->assertTrue((isset($node_translated->{$field_name}[LANGUAGE_NONE]) && (count($node_translated->{$field_name}) == 1)), t('Translated node has only UND language for @field_name field', array('@field_name' => $field_name)), t('Browser'));
    }

    $this->assertTrue(($node_translated->field_translatable_data[LANGUAGE_NONE][0]['value'] != 'Translatable data field text'), t('Translated node has translated content for field_translatable_data'), t('Browser'));
    $this->assertTrue(($node_translated->field_not_translatable_data[LANGUAGE_NONE][0]['value'] == 'Not translatable data field text'), t('Translated node has original content for field_not_translatable_data'), t('Browser'));
  }

  /**
   * Test correct one translatable fields.
   */
  public function testCorrectOneTranslatableField() {
    // Set Up Test.
    $this->smartlingDifferentFieldsSetUpTest();
    // Disable Drupal translations for fields.
    $this->smartlingSetTranslatableFieldSettings('field_translatable_data', 1);
    $this->smartlingSetTranslatableFieldSettings('field_not_translatable_data', 0);
    $this->assertEqual($this->smartlingGetTranslatableFieldSettings('field_translatable_data'), 1);
    $this->assertEqual($this->smartlingGetTranslatableFieldSettings('field_not_translatable_data'), 0);
    // Create new node.
    $this->drupalCreateNode();
    // Set node values.
    $node = node_load(1);
    $node->field_translatable_data['en'][0]['value'] = 'Translatable data field text';
    $node->field_not_translatable_data[LANGUAGE_NONE][0]['value'] = 'Not translatable data field text';
    node_save($node);
    // Send and download node.
    $this->smartlingTranslateNode($node->nid, array('nl'));

    // Asserts.
    $this->drupalGet('node/1/edit');
    $this->drupalGet('node/2/edit');
    $node_original = node_load(1);
    $node_translated = node_load(2);

    $this->assertTrue((isset($node_original->field_translatable_data['en']) && (count($node_original->field_translatable_data) == 1)), t('Original node has only EN language for field_translatable_data field'), t('Browser'));
    $this->assertTrue((isset($node_original->field_not_translatable_data[LANGUAGE_NONE]) && (count($node_original->field_not_translatable_data) == 1)), t('Original node has only UND language for field_not_translatable_data field'), t('Browser'));
    $this->assertTrue((isset($node_translated->field_translatable_data['en']) && isset($node_translated->field_translatable_data['nl'])), t('Translated node has 2 languages: EN and NL for field_translatable_data field'), t('Browser'));
    $this->assertTrue((isset($node_translated->field_not_translatable_data[LANGUAGE_NONE]) && (count($node_translated->field_not_translatable_data) == 1)), t('Translated node has only UND language for field_not_translatable_data field'), t('Browser'));
    $this->assertTrue(($node_translated->field_translatable_data['nl'][0]['value'] != 'Translatable data field text'), t('Translated node has translated content in NL for field_translatable_data field'), t('Browser'));
    $this->assertTrue(($node_translated->field_not_translatable_data[LANGUAGE_NONE][0]['value'] == 'Not translatable data field text'), t('Translated node has original content for field_not_translatable_data'), t('Browser'));
  }

  /**
   * Test correct translatable fields.
   */
  public function testCorrectTranslatableFields() {
    // Set Up Test.
    $this->smartlingDifferentFieldsSetUpTest();
    // Disable Drupal translations for fields.
    $this->smartlingSetTranslatableFieldSettings('field_translatable_data', 1);
    $this->smartlingSetTranslatableFieldSettings('field_not_translatable_data', 1);
    $this->assertEqual($this->smartlingGetTranslatableFieldSettings('field_translatable_data'), 1);
    $this->assertEqual($this->smartlingGetTranslatableFieldSettings('field_not_translatable_data'), 1);
    // Create new node.
    $this->drupalCreateNode();
    // Set node values.
    $node = node_load(1);
    $node->field_translatable_data['en'][0]['value'] = 'Translatable data field text';
    $node->field_not_translatable_data['en'][0]['value'] = 'Not translatable data field text';
    node_save($node);
    // Send and download node.
    $this->smartlingTranslateNode($node->nid, array('nl'));

    // Asserts.
    $this->drupalGet('node/1/edit');
    $this->drupalGet('node/2/edit');
    $node_original = node_load(1);
    $node_translated = node_load(2);

    $this->assertTrue((isset($node_original->field_translatable_data['en']) && (count($node_original->field_translatable_data) == 1)), t('Original node has only EN language for field_translatable_data field'), t('Browser'));
    $this->assertTrue((isset($node_original->field_not_translatable_data['en']) && (count($node_original->field_not_translatable_data) == 1)), t('Original node has only EN language for field_not_translatable_data field'), t('Browser'));
    $this->assertTrue((isset($node_translated->field_translatable_data['en']) && isset($node_translated->field_translatable_data['nl'])), t('Translated node has 2 languages: EN and NL for field_translatable_data field'), t('Browser'));
    $this->assertTrue((isset($node_translated->field_not_translatable_data['en']) && (count($node_translated->field_not_translatable_data) == 1)), t('Translated node has only EN language for field_not_translatable_data field'), t('Browser'));
    $this->assertTrue(($node_translated->field_translatable_data['nl'][0]['value'] != 'Translatable data field text'), t('Translated node has translated content in NL for field_translatable_data field'), t('Browser'));
    $this->assertTrue(($node_translated->field_not_translatable_data['en'][0]['value'] == 'Not translatable data field text'), t('Translated node has original content for field_not_translatable_data'), t('Browser'));
  }

}
