<?php

/**
 * @file
 * Tests for smartling.
 */

require_once dirname(__FILE__) . '/../credentials.php';

/**
 * SmartlingWebTestCase.
 */
class SmartlingWebTestCase extends DrupalWebTestCase {

  /**
   * Drupal user with admin permissions.
   *
   * @var stdClass
   */
  protected $privileged_user;

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable Smartling modules.
    parent::setUp('smartling', 'smartling_reports', 'smartling_reference', 'smartling_interface_translation');

    // Create a user with access.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer smartling',
      'administer taxonomy',
      'administer ultimate cron',
      'translate interface',
      'translate content',
      'use text format filtered_html',
      'use text format full_html',
      'administer languages',
      'access administration pages',
      'access site reports',
      'administer content types',
      'administer nodes',
      'access content',
      'bypass node access',
      'edit any page content',
      'edit any article content',
      'view revisions',
      'revert revisions',
      'delete revisions',
    ));

    // Authorizing user.
    $this->drupalLogin($this->privileged_user);

    // Add predefined Dutch language.
    locale_add_language('nl');
  }

  /**
   * Smartling set correct settings.
   */
  public function smartlingSetCorrectSettings() {
    // @todo remove hardcoded constants and try to avoid post request and use direct api.
    $edit = array(
      "target_locales[nl]" => 'nl',
      "project_id" => SMARTLING_TEST_PROJECT_ID,
      "smartling_key" => SMARTLING_TEST_KEY,
      "target_locales_text_key_nl" => 'nl-NL',
      "callback_url_use" => FALSE,
    );
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-account-info-settings-form');
    $this->assertText(t('Account settings saved.'));
  }

  /**
   * Set translatable field settings.
   *
   * These values are supported for value:
   * - 0
   * - 1.
   *
   * @param string $field_name
   *   Field name.
   * @param int $value
   *   Translatable parameter.
   */
  public function smartlingSetTranslatableFieldSettings($field_name, $value) {
    $field = field_info_field($field_name);
    $field['translatable'] = $value;
    field_update_field($field);
  }

  /**
   * Get translatable field settings.
   *
   * @param string $field_name
   *   Field name.
   *
   * @return string
   *   Return translatable parameter.
   */
  public function smartlingGetTranslatableFieldSettings($field_name) {
    $field = field_info_field($field_name);
    if (isset($field['translatable'])) {
      return $field['translatable'];
    }
    else {
      $this->error(t('Field @field_name do not have translatable parameter.', array('@field_name' => $field_name)));
      return 'field error';
    }
  }

  /**
   * Set retrieval type.
   *
   * Defaults to 'published'. These values are supported:
   * - 'pseudo'
   * - 'published'
   * - 'pending'.
   *
   * @param string $type
   *   Smartling retrieval type settings.
   */
  public function smartlingSetRetrievalType($type = 'published') {
    if (!empty($type)) {
      $smartling_settings = smartling_settings_get_handler();
      $smartling_settings->setRetrievalType($type);
    }
  }

  /**
   * Add text field to node.
   *
   * @param string $node_type
   *   Node type. "page" type by default.
   * @param string $field_machine_name
   *   Field machine name.
   */
  public function smartlingAddTextFieldToNode($node_type = 'page', $field_machine_name = '') {
//    // Add field to CT.
//    $edit = array(
//      "fields[_add_new_field][label]" => (string) $field_machine_name,
//      "fields[_add_new_field][weight]" => '-2',
//      "fields[_add_new_field][field_name]" => (string) $field_machine_name,
//      "fields[_add_new_field][type]" => 'text',
//      "fields[_add_new_field][widget_type]" => 'text_textfield',
//    );
//    $this->drupalPost('admin/structure/types/manage/' . $node_type . '/fields', $edit, t('Save'));
//    $this->drupalPost(NULL, array(), t('Save field settings'));
//    $this->drupalPost(NULL, array(), t('Save settings'));
//    $this->assertText(t('Saved @field configuration.', array('@field' => $field_machine_name)));

    $field = array('field_name' => $field_machine_name, 'type' => 'text');
    field_create_field($field);

    $instance = array(
      'field_name' => $field_machine_name,
      'entity_type' => 'node',
      'bundle' => $node_type,
    );
    field_create_instance($instance);
  }

  /**
   * Add entity reference field to node.
   *
   * @param string $node_type
   *   Node type.
   * @param string $field_machine_name
   *   Field machine name.
   * @param string $target_type
   *   Target type like node, taxonomy_term, etc.
   * @param array $target_bundles
   *   Bundles array.
   * @param string $cardinality
   *   Cardinality of field.
   */
  public function smartlingAddEntityReferenceFieldToNode($node_type, $field_machine_name, $target_type, array $target_bundles, $cardinality = '1') {

    // Create an entity reference field.
    $field = array(
      'entity_types' => array('node'),
      'settings' => array(
        'handler' => 'base',
        'target_type' => $target_type,
        'handler_settings' => array(
          'target_bundles' => $target_bundles,
        ),
      ),
      'field_name' => $field_machine_name,
      'type' => 'entityreference',
      'widget_type' => 'entityreference_autocomplete',
      'cardinality' => (string) $cardinality,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => $field_machine_name,
      'bundle' => $node_type,
      'entity_type' => 'node',
    );
    field_create_instance($instance);
  }

  /**
   * Enable title and alt parameter for image field.
   *
   * @param string $bundle
   *   Node type/bundle.
   * @param string $field_machine_name
   *   Field machine name.
   */
  public function smartlingEnableTitleAltForImageField($bundle, $field_machine_name, $entity_type = 'node') {
//    $edit = array(
//      "instance[settings][alt_field]" => 1,
//      "instance[settings][title_field]" => 1,
//    );
//    $this->drupalPost('admin/structure/types/manage/' . $bundle . '/fields/' . $field_machine_name, $edit, t('Save settings'));
//    $this->assertText(t('Saved'));
    $instance = field_read_instance($entity_type, $field_machine_name, $bundle);
    $instance['settings']['alt_field'] = 1;
    $instance['settings']['title_field'] = 1;
    field_update_instance($instance);
  }

  /**
   * Add image to field.
   *
   * @param int $nid
   *   Node id.
   * @param string $field_machine_name
   *   Field machine name.
   * @param string $lang
   *   Locale in drupal format (ru, en). LANGUAGE_NONE (und) by default.
   */
  public function smartlingAddImageToField($nid, $field_machine_name, $lang = LANGUAGE_NONE) {
    $node = node_load($nid);
    if ($node) {
      // Get the test image that simpletest provides.
      $image = current($this->drupalGetTestFiles('image'));
      $file_path = drupal_realpath($image->uri);

      $file = (object) array(
        'uid' => 1,
        'uri' => $file_path,
        'filename' => basename($file_path),
        'filemime' => file_get_mimetype($file_path),
      );

      $file = file_copy($file, 'public://images');

      if ($file) {
        $file->title = 'Title of image';
        $file->alt = 'Alternate text of image';
        $node->{$field_machine_name}[$lang][] = (array) $file;
        node_save($node);
      }
    }
    else {
      $message = t('Test failed');
      $this->error($message);
    }
  }

  /**
   * Smartling different fields test.
   */
  public function smartlingDifferentFieldsSetUpTest() {
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set pseudo for smartling.
    $this->smartlingSetRetrievalType('pseudo');
    // Add field.
    $this->smartlingAddTextFieldToNode('page', 'translatable_data');
    // Add field.
    $this->smartlingAddTextFieldToNode('page', 'not_translatable_data');
    // Set nodes method for CT.
    $this->smartlingSetMethodSettings('page');
    // Set fields for page CT.
    $this->smartlingSetFieldSettings('page', 'field_translatable_data');
    // End Set Up.
  }

  /**
   * Smartling title fields test.
   *
   * @param int $nid
   *   Node id.
   * @param string $bundle
   *   Bundle.
   * @param int $method
   *   Translate method.
   * @param string $field_name
   *   Field name.
   */
  public function smartlingTitleFieldsSetUpTest($nid, $bundle, $method, $field_name) {
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set pseudo for smartling.
    $this->smartlingSetRetrievalType('pseudo');
    // Set nodes method for CT.
    $this->smartlingSetMethodSettings($bundle, $method);
    // Set fields for article CT.
    $this->smartlingSetFieldSettings($bundle, $field_name);
    $this->drupalGet('node/' . $nid);
    // Translate node.
    $this->smartlingUploadDownloadNode($nid, array('nl'));
    $this->drupalGet('node/' . $nid);
    // End Set Up.
  }

  /**
   * SmartlingTitleModuleReplaceNode.
   *
   * @param string $bundle
   *   Bundle. Example: article.
   * @param string $field_name
   *   Field name. Example: title.
   * @param int $replace
   *   If this is enabled the name will be replaced with
   *   a customizable field that can be translated. 1 by default.
   */
  public function smartlingTitleModuleReplaceNode($bundle, $field_name, $replace = 1) {
    $edit['enabled'] = $replace;
    $this->drupalPost('admin/structure/types/manage/' . $bundle . '/fields/replace/' . $field_name, $edit, t('Save settings'));
  }

  /**
   * SmartlingTitleModuleReplaceTerm.
   *
   * @param string $bundle
   *   Bundle. Example: article.
   * @param string $field_name
   *   Field name. Example: title.
   * @param int $replace
   *   If this is enabled the name will be replaced with
   *   a customizable field that can be translated. 1 by default.
   */
  public function smartlingTitleModuleReplaceTerm($bundle, $field_name, $replace = 1) {
    $edit['enabled'] = $replace;
    $this->drupalPost('admin/structure/taxonomy/' . $bundle . '/fields/replace/' . $field_name, $edit, t('Save settings'));
  }

  /**
   * Set translate method in smartling settings.
   *
   * @param string $node_type
   *   Node type machine name.
   * @param int $method_key
   *   1 - Field method.
   *   2 - Nodes method (by default).
   */
  public function smartlingSetMethodSettings($node_type, $method_key = 2) {
    // Set method for CT.
    $edit = array();
    $edit[$node_type . '_TT_' . $node_type] = $method_key;
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-node-translation-settings-form');
    $this->assertText(t('Your content types have been updated.'));
  }

  /**
   * Set node field smartling settings.
   *
   * @param string $node_type
   *   Node type.
   * @param string $field_name
   *   Field name.
   * @param bool $swap
   *   TRUE if this swap field. (title module) (FALSE by default).
   *
   * @todo improve api because it's not obvious enough and do not use drupal post for settings!
   */
  public function smartlingSetFieldSettings($node_type, $field_name, $swap = FALSE) {
    // Set fields for page CT.
    $edit = array();
    if (!$swap) {
      $edit[$node_type . '_SEPARATOR_' . $field_name] = 1;
    }
    else {
      $edit[$field_name . '_swap_' . $node_type] = 1;
    }
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-node-translation-settings-form');
    $this->assertText(t('Your content types have been updated.'));
  }

  /**
   * Unchecked field from smartling settings.
   *
   * @param string $node_type
   *   Node type.
   * @param string $field_name
   *   Field name.
   */
  public function smartlingUncheckedFieldSettings($node_type, $field_name) {
    $edit = array();
    $edit[$node_type . '_SEPARATOR_' . $field_name] = 0;
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-node-translation-settings-form');
    $this->assertText(t('Your content types have been updated.'));
  }

  /**
   * Set translate method for terms in smartling settings.
   *
   * @param string $vocabulary_machine_name
   *   Vocabulary machine name.
   * @param int $method_key
   *   1 - I18N_MODE_LOCALIZE.
   *   2 - I18N_MODE_TRANSLATE (by default).
   */
  public function smartlingSetTermMethodSettings($vocabulary_machine_name, $method_key = 2) {
    $edit = array();
    $edit[$vocabulary_machine_name . '_TT_' . $vocabulary_machine_name] = $method_key;
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-taxonomy-translation-settings-form');
    $this->assertText(t('Your taxonomy vocabularies have been updated.'));
  }

  /**
   * Set term field smartling settings.
   *
   * @param string $vocabulary_machine_name
   *   Vocabulary machine name.
   * @param string $field_name
   *   Field name.
   * @param bool $swap
   *   TRUE if this swap field. (title module) (FALSE by default).
   */
  public function smartlingSetTermFieldSettings($vocabulary_machine_name, $field_name, $swap = FALSE) {
    $edit = array();
    if (!$swap) {
      $edit[$vocabulary_machine_name . '_SEPARATOR_' . $field_name] = 1;
    }
    else {
      $edit[$field_name . '_swap_' . $vocabulary_machine_name] = 1;
    }
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-taxonomy-translation-settings-form');
    $this->assertText(t('Your taxonomy vocabularies have been updated.'));
  }

  /**
   * Send node to Smartling service and download them.
   *
   * Works for a single node on the site.
   *
   * @param int $nid
   *   Node id.
   * @param array $langs
   *   Example: array('ru', 'nl').
   */
  public function smartlingTranslateNode($nid, array $langs, $download = TRUE) {
    $node = node_load($nid);
    if ($node) {
      // Send node to smartling.
      $convert_array = array();
      foreach ($langs as $lang) {
        $edit['target[' . $lang . ']'] = $lang;
        $convert_array[] = $lang;
      }
      $edit['async_mode'] = FALSE;

      $this->drupalPost('node/' . $nid . '/edit', $edit, t('Send to Smartling'));
      $this->assertText(t('The node "@title" has been sent to Smartling for translation to "@langs".', array(
        '@title' => $node->title,
        '@langs' => implode(', ', $convert_array),
      )));

      // Run cron.
//      $param = ctools_export_ui_load('queue_smartling_upload', 'ultimate_cron_job_ctools_export_ui');
//      ctools_export_ui_switcher_page('ultimate_cron_job_ctools_export_ui', 'run', $param);
//      $cron = FALSE;
//      while (!$cron) {
//        $cron = drupal_cron_run();
//        if (!$cron) {
//          db_delete('semaphore')
//            ->condition('name', 'cron')
//            ->execute();
//        }
//      }

      if ($download) {
        // Go to smartling-submissions and download.
        $this->drupalPost('node/' . $nid . '/edit', $edit, t('Download Translation'));

        foreach ($convert_array as $d_locale) {
          $this->assertText(t('The translation was successfully downloaded.'));
        }
      }
    }
  }

  /**
   * Upload or/and download node.
   *
   * @param int $nid
   *   Node id.
   * @param array $langs
   *   Example: array('ru', 'nl').
   * @param bool $upload
   *   Upload node if TRUE (TRUE by default).
   * @param bool $download
   *   Download translate nodes if TRUE (TRUE by default).
   */
  public function smartlingUploadDownloadNode($nid, array $langs, $upload = TRUE, $download = TRUE) {
    if ($upload) {
      $node = node_load($nid);
      $edit = array();
      $convert_array = array();
      // Send node to smartling.
      foreach ($langs as $lang) {
        $edit['target[' . $lang . ']'] = $lang;
        $convert_array[] = $lang;
      }
      $edit['async_mode'] = FALSE;

      $this->drupalPost('node/' . $nid . '/edit', $edit, t('Send to Smartling'));
      $this->assertText(t('The node "@title" has been sent to Smartling for translation to "@langs".', array(
        '@title' => $node->title,
        '@langs' => implode(', ', $convert_array),
      )));

      // Run cron.
//      $cron = FALSE;
//      while (!$cron) {
//        $cron = drupal_cron_run();
//        if (!$cron) {
//          sleep(10);
//        }
//      }
//      $param = ctools_export_ui_load('queue_smartling_upload', 'ultimate_cron_job_ctools_export_ui');
//      ctools_export_ui_switcher_page('ultimate_cron_job_ctools_export_ui', 'run', $param);
    }

    if ($download) {
      $edit = array();
      $convert_array = array();
      foreach ($langs as $lang) {
        $edit['target[' . $lang . ']'] = $lang;
        $convert_array[] = $lang;
      }
      $this->drupalPost('node/' . $nid . '/edit', $edit, t('Download Translation'));
      foreach ($convert_array as $d_locale) {
        $this->assertText(t('Downloaded for language translation @locale', array('@locale' => $d_locale)));
      }
    }
  }

  /**
   * Upload or/and download taxonomy term.
   *
   * @param int $tid
   *   Taxonomy term id.
   * @param array $langs
   *   Example: array('ru', 'nl').
   * @param bool $upload
   *   Upload node if TRUE (TRUE by default).
   * @param bool $download
   *   Download translate nodes if TRUE (TRUE by default).
   */
  public function smartlingUploadDownloadTerm($tid, array $langs, $upload = TRUE, $download = TRUE) {
    if ($upload) {
      $term = taxonomy_term_load($tid);
      $edit = array();
      $convert_array = array();
      // Send term to smartling.
      foreach ($langs as $lang) {
        $edit['target[' . $lang . ']'] = $lang;
        $convert_array[] = $lang;
      }
      $edit['async_mode'] = FALSE;

      $this->drupalPost('taxonomy/term/' . $tid . '/edit', $edit, t('Send to Smartling'));
      $this->assertText(t('The term "@title" has been sent to Smartling for translation to "@langs".', array(
        '@title' => $term->name,
        '@langs' => implode(', ', $convert_array),
      )));

//      // Run cron.
//      $cron = FALSE;
//      while (!$cron) {
//        $cron = drupal_cron_run();
//        if (!$cron) {
//          db_delete('semaphore')
//              ->condition('name', 'cron')
//              ->execute();
//        }
//      }
      //$param = ctools_export_ui_load('queue_smartling_upload', 'ultimate_cron_job_ctools_export_ui');
      //ctools_export_ui_switcher_page('ultimate_cron_job_ctools_export_ui', 'run', $param);
    }

    if ($download) {
      $edit = array();
      $convert_array = array();
      foreach ($langs as $lang) {
        $edit['target[' . $lang . ']'] = $lang;
        $convert_array[] = $lang;
      }
      $this->drupalPost('taxonomy/term/' . $tid . '/edit', $edit, t('Download Translation'));
      foreach ($convert_array as $d_locale) {
        $this->assertText(t('Downloaded for language translation @locale', array('@locale' => $d_locale)));
      }
    }
  }

  /**
   * Get fix references id.
   *
   * @param string $entity_type
   *   Entity type.
   * @param int $id
   *   Entity id.
   * @param string $lang
   *   Locale in drupal format (ru, en).
   *
   * @return int
   *   Return fix entity id.
   */
  public function smartlingGetFixReferencesId($entity_type, $id, $lang) {
    $entity = entity_load($entity_type, array($id), array(), TRUE);
    $id = smartling_get_child_fixed_id_reference($entity_type, $entity[$id], $lang);
    return $id;
  }

}
