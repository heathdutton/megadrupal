<?php

/**
 * @file
 * Tests for smartling.
 */

require_once __DIR__ . '/../lib/Drupal/smartling/FieldProcessors/FieldCollectionFieldProcessor.php';
use Drupal\smartling\FieldProcessors\FieldCollectionFieldProcessor;

class FakeFieldProcessorFactory {
  public function getSmartlingContent() {
    return 'hello world';
  }
}

class MockedFieldCollectionFieldProcessor extends FieldCollectionFieldProcessor {
    public $entity;

  public function __construct() {
    $this->sourceLanguage = 'en';
    $this->targetLanguage = 'nl';
    $this->fieldName = 'field_collection1';

    $this->entity = new stdClass();
    $this->entity->field_collection1 = array($this->sourceLanguage => array(array('value' => 1), array('value' => 2)));
    $this->entityType = 'field_collection_item';
    $this->smartling_entity = array($this->fieldName => array($this->sourceLanguage => array('smartling_entity')));
  }

  protected function getTranslatableFields() {
    return array('field_fld1');
  }

  protected function fieldCollectionItemLoad($id) {
    $obj1 = new \stdClass();
    $obj1->field_fld1['und'] = array('hello');

    $res = array(
      1 => $obj1,
      2 => clone $obj1,
      3 => clone $obj1
    );
    return $res[$id];
  }

  protected function getProcessor($field_name, $entity, $smartling_entity, $targetLanguage, $sourceLanguage) {
    return new FakeFieldProcessorFactory();
  }

  public function setSourceLanguage($lang) {
    $this->sourceLanguage = $lang;
  }

  public function importSmartlingXMLToFieldCollectionEntity(\DomXpath $xpath) {
  }
}
/**
 * SmartlingContentImageUrlProcessorTest.
 */
class SmartlingFieldCollectionItem extends \DrupalUnitTestCase {
  protected $context;
  protected $entity;

  /**
   * Get info.
   *
   * @return array
   *   Return info array.
   */
  public static function getInfo() {
    return array(
      'name' => 'Fields - Smartling Field Collection Processor',
      'description' => '',
      'group' => 'Smartling UnitTests',
    );
  }

  /**
   * Setup.
   */
  protected function setUp() {
    parent::setUp();

    // Enable Smartling modules.
    $this->fieldName = 'field_collection1';
    $this->entity = new stdClass();
    $this->entity->field_collection1 = array('und' => array(1,2,3));
  }


  public function testGetSmartlingContentStandard() {
    $result = array(1 => array('field_fld1' => 'hello world'), 2 => array('field_fld1' => 'hello world'));

    $obj = new MockedFieldCollectionFieldProcessor();
    $test_res = $obj->getSmartlingContent();
    $this->assertEqual($result, $test_res, 'Get standard content');
  }

  public function testGetSmartlingContentEmpty() {
    $result = array();

    $obj = new MockedFieldCollectionFieldProcessor();
    $obj->setSourceLanguage('some');
    $test_res = $obj->getSmartlingContent();
    $this->assertEqual($result, $test_res, 'Get empty content');
  }

  public function testCleanBeforeCloneStandard() {
    $entity = new stdClass();
    $entity->field_collection1 = 'asd';
    $entity->field2 = 'qwe';

    $obj = new MockedFieldCollectionFieldProcessor();
    $test_res = $obj->cleanBeforeClone($entity);

    $this->assertEqual('asd', $test_res, 'testCleanBeforeCloneStandard');
  }

  public function testCleanBeforeCloneEmpty() {
    $entity = new stdClass();
    $entity->field2 = 'qwe';

    $obj = new MockedFieldCollectionFieldProcessor();
    $test_res = $obj->cleanBeforeClone($entity);

    $this->assertEqual('', $test_res, 'testCleanBeforeCloneEmpty');
  }

  public function testFetchDataFromXML() {
    $result = array(0 => array('value' => 1));

    $xml = new \DOMDocument();
    $xml->load(dirname(__FILE__) . '/xml_sources/translated_field_collection1.xml');
    $xpath = new DomXpath($xml);

    $obj = new MockedFieldCollectionFieldProcessor();
    $obj->entity->field_collection1['nl'] = $obj->entity->field_collection1['en'];
    $test_res = $obj->fetchDataFromXML($xpath);

    $this->assertEqual($result, $test_res, 'testFetchDataFromXML');
  }

  public function testFetchDataFromXMLEmpty() {
    $result = NULL;

    $xml = new \DOMDocument();
    $xml->load(dirname(__FILE__) . '/xml_sources/translated_field_collection2.xml');
    $xpath = new DomXpath($xml);

    $obj = new MockedFieldCollectionFieldProcessor();
    $test_res = $obj->fetchDataFromXML($xpath);

    $this->assertEqual($result, $test_res, 'testFetchDataFromXMLEmpty');
  }
}
