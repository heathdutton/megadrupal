<?php

/**
 * @file
 * Drupal Module: Modules Form Batch Process
 * Converts the Drupals Modules Form submission into a Batch process
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function modules_batch_form_system_modules_alter(&$form, $form_state) {
  // Remove System Callback
  unset($form['#submit'][array_search("system_modules_uninstall_submit", $form['#submit'])]);
  $form['#submit'][] = '_modules_batch_submit';
}

/**
 * Implements hook_form_system_modules_uninstall_alter().
 */
function modules_batch_form_system_modules_uninstall_alter(&$form, $form_state) {
  // Remove System Callback
  unset($form['#submit'][array_search("system_modules_uninstall_submit", $form['#submit'])]);
  $form['#submit'][] = '_modules_batch_uninstall_submit';
}

/**
 * Submit callback; handles modules form submission.
 */
function _modules_batch_submit($form, &$form_state) {
  include_once DRUPAL_ROOT . '/includes/install.inc';

  // Builds list of modules.
  $modules = array();
  // If we're not coming from the confirmation form, build the list of modules.
  if (empty($form_state['storage'])) {
    // If we're not coming from the confirmation form, build the module list.
    foreach ($form_state['values']['modules'] as $group_name => $group) {
      foreach ($group as $module => $enabled) {
        $modules[$module] = array('group' => $group_name, 'enabled' => $enabled['enable']);
      }
    }
  }
  else {
    // If we are coming from the confirmation form, fetch
    // the modules out of $form_state.
    $modules = $form_state['storage']['modules'];
  }

  // Collect data for all modules to be able to determine dependencies.
  $files = system_rebuild_module_data();

  // Sorts modules by weight.
  $sort = array();
  foreach (array_keys($modules) as $module) {
    $sort[$module] = $files[$module]->sort;
  }
  array_multisort($sort, $modules);

  // Makes sure all required modules are set to be enabled.
  $more_required = array();
  $missing_modules = array();

  foreach ($modules as $name => $module) {
    if ($module['enabled']) {
      // Checks that all dependencies are set to be enabled.  Stores the ones
      // that are not in $dependencies variable so that the user can be alerted
      // in the confirmation form that more modules need to be enabled.
      $dependencies = array();
      foreach (array_keys($files[$name]->requires) as $required) {
        if (empty($modules[$required]['enabled'])) {
          if (isset($files[$required])) {
            $dependencies[] = $files[$required]->info['name'];
            $modules[$required]['enabled'] = TRUE;
          }
          else {
            $missing_modules[$required]['depends'][] = $name;
            $modules[$name]['enabled'] = FALSE;
          }
        }
      }

      // Stores additional modules that need to be enabled in $more_required.
      if (!empty($dependencies)) {
        $more_required[$name] = array(
          'name' => $files[$name]->info['name'],
          'requires' => $dependencies,
        );
      }
    }
  }

  // Redirects to confirmation form if more modules need to be enabled.
  if ((!empty($more_required) || !empty($missing_modules)) && !isset($form_state['values']['confirm'])) {
    $form_state['storage'] = array(
      'more_required' => $more_required,
      'modules' => $modules,
      'missing_modules' => $missing_modules,
    );
    $form_state['rebuild'] = TRUE;
    return;
  }

  // Invokes hook_requirements('install').  If failures are detected, makes sure
  // the dependent modules aren't installed either.
  foreach ($modules as $name => $module) {
    // Only invoke hook_requirements()
    // on modules that are going to be installed.
    if ($module['enabled'] && drupal_get_installed_schema_version($name) == SCHEMA_UNINSTALLED) {

      if (!drupal_check_module($name)) {

        $modules[$name]['enabled'] = FALSE;

        foreach (array_keys($files[$name]->required_by) as $required_by) {

          $modules[$required_by]['enabled'] = FALSE;
        }
      }
    }
  }

  // Initializes array of actions.
  $actions = array(
    'enable' => array(),
    'disable' => array(),
    'install' => array(),
  );

  // Builds arrays of modules that need to be enabled, disabled, and installed.
  foreach ($modules as $name => $module) {
    if ($module['enabled']) {
      if (drupal_get_installed_schema_version($name) == SCHEMA_UNINSTALLED) {
        $actions['install'][] = $name;
        $actions['enable'][] = $name;
      }
      elseif (!module_exists($name)) {
        $actions['enable'][] = $name;
      }
    }
    elseif (module_exists($name)) {
      $actions['disable'][] = $name;
    }
  }

  // Gets list of modules prior to install process,
  // unsets $form_state['storage'].
  // so we don't get redirected back to the confirmation form.
  $pre_install_list = module_list();
  unset($form_state['storage']);

  // Reverse the 'enable' list, to order dependencies before dependents.
  krsort($actions['enable']);

  // Prepare the Batch Process.
  $batch = array(
    'finished' => '_modules_batch_finish',
    'title' => t('Processing Modules'),
    'init_message' => t('Preparing Module List'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Modules Submission has encountered a problem'),
    'operations' => array(),
    'sandbox' => array('pre_install_list' => $pre_install_list),
  );

  // Prepare operations array for modules to enable.
  foreach ($actions['enable'] as $module) {
    $batch['operations'][] = array('_modules_batch_enable', array($module));
  }

  // For Modules to disable.
  foreach ($actions['disable'] as $module) {
    $batch['operations'][] = array('_modules_batch_disable', array($module));
  }

  if (count($batch['operations'])) {
    batch_set($batch);
    batch_process('admin/modules');
  }
  else {
    drupal_goto('admin/modules');
  }
}

/**
 * Submit callback handles module uninstall.
 */
function _modules_batch_uninstall_submit(&$form, &$form_state) {

  // Make sure the install API is available.
  include_once DRUPAL_ROOT . '/includes/install.inc';

  if (!empty($form['#confirmed'])) {
    // Call the uninstall routine for each selected module.
    $modules = array_keys($form_state['values']['uninstall']);

    $batch = array(
      'finished' => '_modules_batch_uninstall_finish',
      'title' => t('Processing Modules'),
      'init_message' => t('Preparing Module List'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Modules Submission has encountered a problem'),
      'operations' => array(),
      'sandbox' => array(),
    );

    foreach ($modules as $module) {
      $batch['operations'][] = array('_modules_batch_uninstall', array($module));
    }

    if (count($batch['operations'])) {
      batch_set($batch);
      batch_process('admin/modules/uninstall');
    }
    else {
      drupal_goto('admin/modules/uninstall');
    }
  }
  else {
    $form_state['storage'] = $form_state['values'];
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Callback _modules_batch_enable.
 */
function _modules_batch_enable($module, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_module'] = 0;
  }
  module_enable(array($module), FALSE);

  $context['sandbox']['progress']++;
  $context['results'][] = $module;
  $context['message'] = t('Enabled %module Module', array('%module' => $module));
}

/**
 * Callback _modules_batch_disable.
 */
function _modules_batch_disable($module, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_module'] = 0;
  }

  if ($module != 'modules_batch') {
    module_disable(array($module), FALSE);
  }

  $context['sandbox']['progress']++;
  $context['results'][] = $module;
  $context['message'] = t('Disabled %module Module', array('%module' => $module));
}

/**
 * Function to handle the batch process finish modules_batch_finish.
 */
function _modules_batch_finish($success, $results, $operations) {
  if ($success) {
    if (count($results)) {

      // Check if modules_batch was set for uninstallation.
      if (in_array('modules_batch', $results)) {
        module_disable(array('modules_batch'), FALSE);
      }
      drupal_flush_all_caches();
      $message = t('The configuration options have been saved.');
    }
    else {
      $message = t('Nothing Happened here');
    }
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE),
    ));
  }

  drupal_set_message($message);

}

/**
 * Callback modules_batch_uninstall.
 */
function _modules_batch_uninstall($module, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_module'] = 0;
  }

  include_once DRUPAL_ROOT . '/includes/install.inc';
  drupal_uninstall_modules(array($module));

  $context['sandbox']['progress']++;
  $context['results'][] = $module;
  $context['message'] = t('Uninstalled %module Module', array('%module' => $module));
}

/**
 * Function to handle the batch process finish modules_batch_uninstall_finish.
 */
function _modules_batch_uninstall_finish($success, $results, $operations) {
  if ($success) {
    if (count($results)) {
      drupal_flush_all_caches();
      $message = t('The configuration options have been saved.');
    }
    else {
      $message = t('Nothing Happened here');
    }
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE),
    ));
  }
  drupal_set_message($message);
}
