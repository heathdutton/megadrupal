<?php

/**
 * @file
 * Adds a Karmacracy shortener URL filter to content.
 */

/**
 * Implements hook_permission().
 */
function karmacracy_filter_permission() {
  return array(
    'use karmacracy filter' => array(
      'title' => t('Allow users to use Karmacracy URL shortener'),
      'description' => t('New fields will be shown to users on user editing form page to configure it.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function karmacracy_filter_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  if (user_access('use karmacracy filter') && $form['#user_category'] == 'account') {
    $form['karmacracy_filter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Karmacracy filter settings'),
      '#weight' => 5,
      '#collapsible' => TRUE,
    );
    $form['karmacracy_filter']['karmacracy_filter_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Karmacracy URL shortener'),
      '#default_value' => !empty($account->data['karmacracy_filter_enabled']) ? $account->data['karmacracy_filter_enabled'] : FALSE,
    );
    $form['karmacracy_filter']['karmacracy_filter_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Karmacracy username'),
      '#default_value' => !empty($account->data['karmacracy_filter_enabled']) && !empty($account->data['karmacracy_filter_username']) ? $account->data['karmacracy_filter_username'] : '',
      '#states' => array(
        'invisible' => array(
          ':input[name="karmacracy_filter_enabled"]' => array('checked' => FALSE),
        ),
      ),
    );
    $form['karmacracy_filter']['karmacracy_filter_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Karmacracy app key'),
      '#default_value' => !empty($account->data['karmacracy_filter_enabled']) && !empty($account->data['karmacracy_filter_key']) ? $account->data['karmacracy_filter_key'] : '',
      '#description' => t('You can get your Karmacracy app key on <a href="@url">Karmacracy site > Settings</a>.', array('@url' => 'http://www.karmacracy.com/settings')),
      '#states' => array(
        'invisible' => array(
          ':input[name="karmacracy_filter_enabled"]' => array('checked' => FALSE),
        ),
      ),
    );
    $form['#validate'][] = '_karmacracy_filter_form_user_profile_form_alter_validate';
  }
}

/**
 * Validates Karmacracy settings on user editing form.
 */
function _karmacracy_filter_form_user_profile_form_alter_validate($form, &$form_state) {
  if (!empty($form_state['values']['karmacracy_filter_enabled'])) {
    if (empty($form_state['values']['karmacracy_filter_username'])) {
      form_set_error('karmacracy_filter_username', t('You must set your Karmacracy username.'));
    }
    if (empty($form_state['values']['karmacracy_filter_key'])) {
      form_set_error('karmacracy_filter_key', t('You must set your Karmacracy app key. You can get your Karmacracy app key on <a href="@url">Karmacracy site > Settings</a>.', array('@url' => 'http://www.karmacracy.com/settings')));
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function karmacracy_filter_user_presave(&$edit, $account, $category) {
  $edit['data']['karmacracy_filter_enabled'] = !empty($edit['karmacracy_filter_enabled']) ? TRUE : FALSE;
  $edit['data']['karmacracy_filter_username'] = !empty($edit['karmacracy_filter_username']) ? $edit['karmacracy_filter_username'] : '';
  $edit['data']['karmacracy_filter_key'] = !empty($edit['karmacracy_filter_key']) ? $edit['karmacracy_filter_key'] : '';
}

/**
 * Implements hook_filter_info().
 */
function karmacracy_filter_filter_info() {
  $filters = array();
  $filters['karmacray_filter'] = array(
    'title' => t('Short URLs with Karmacracy service.'),
    'process callback' => '_karmacracy_filter_filter_process',
  );
  return $filters;
}

/**
 * Replace URLs with the shortened version from Karmacracy URL shortener.
 *
 * The URL regexp has been taken from the URL core filter.
 */
function _karmacracy_filter_filter_process($text, $filter, $format) {
  global $user;

  if (!user_access('use karmacracy filter') || empty($user->data['karmacracy_filter_enabled'])) {
    return $text;
  }

  // Tags to skip and not recurse into.
  $ignore_tags = 'img|script|style|code|pre';

  // Kamarcracy only supports http and https.
  $protocols = 'http:(?://)?|https:(?://)?';

  // Prepare domain name pattern.
  // The ICANN seems to be on track towards accepting more diverse top level
  // domains, so this pattern has been "future-proofed" to allow for TLDs
  // of length 2-64.
  $domain = '(?:[A-Za-z0-9._+-]+\.)?[A-Za-z]{2,64}\b';
  $ip = '(?:[0-9]{1,3}\.){3}[0-9]{1,3}';
  $auth = '[a-zA-Z0-9:%_+*~#?&=.,/;-]+@';
  $trail = '[a-zA-Z0-9:%_+*~#&\[\]=/;?!\.,-]*[a-zA-Z0-9:%_+*~#&\[\]=/;-]';

  // Prepare pattern for optional trailing punctuation.
  // Even these characters could have a valid meaning for the URL, such usage is
  // rare compared to using a URL at the end of or within a sentence, so these
  // trailing characters are optionally excluded.
  $punctuation = '[\.,?!]*?';

  // Match absolute URLs.
  $url_pattern = "(?:$auth)?(?:$domain|$ip)/?(?:$trail)?";
  $pattern = "`((?:$protocols)(?:$url_pattern))($punctuation)`";

  // HTML comments need to be handled separately, as they may contain HTML
  // markup, especially a '>'. Therefore, remove all comment contents and add
  // them back later.
  _filter_url_escape_comments('', TRUE);
  $text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);

  // Split at all tags; ensures that no tags or attributes are processed.
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  // PHP ensures that the array consists of alternating delimiters and
  // literals, and begins and ends with a literal (inserting NULL as
  // required). Therefore, the first chunk is always text:
  $chunk_type = 'text';
  // If a tag of $ignore_tags is found, it is stored in $open_tag and only
  // removed when the closing tag is found. Until the closing tag is found,
  // no replacements are made.
  $open_tag = '';

  for ($i = 0; $i < count($chunks); $i++) {
    if ($chunk_type == 'text') {
      // Only process this text if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // If there is a match, inject a link into this chunk via the callback.
        $chunks[$i] = preg_replace_callback($pattern, '_karmacracy_filter_get_shortened_url', $chunks[$i]);
      }
      // Text chunk is done, so next chunk must be a tag.
      $chunk_type = 'tag';
    }
    else {
      // Only process this tag if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
        if (preg_match("`<($ignore_tags)(?:.*?)(?<!/)>`i", $chunks[$i], $matches)) {
          $open_tag = $matches[1];
        }
      }
      // Otherwise, check whether this is the closing tag for $open_tag.
      else {
        if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
          $open_tag = '';
        }
      }
      // Tag chunk is done, so next chunk must be text.
      $chunk_type = 'text';
    }
  }

  $text = implode($chunks);
  // Revert back to the original comment contents
  _filter_url_escape_comments('', FALSE);
  $text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);

  return $text;
}

/**
 * This is a preg_replace callback to get shortened URL and replace with it.
 *
 */
function _karmacracy_filter_get_shortened_url($match) {
  global $user;

  $match = $match[0];
  $shortened_url = array();
  $shortened_url = drupal_http_request("http://kcy.me/api/?u={$user->data['karmacracy_filter_username']}&key={$user->data['karmacracy_filter_key']}&url=$match");
  return !empty($shortened_url->data) ? $shortened_url->data : $match;
}