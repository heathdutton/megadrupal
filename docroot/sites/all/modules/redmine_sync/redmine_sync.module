<?php

require_once 'redmine_sync.constants.inc';
require_once 'redmine_sync.api.db.inc';
require_once 'redmine_sync.api.rest.inc';

/**
 * Implements hook_menu().
 */
function redmine_sync_menu() {
  $items[REDMINE_SYNC_URL] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Redmine Sync',
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
  );
  $items[REDMINE_SYNC_URL_PAGE_SYNC] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Synchronization',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_sync_form'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'redmine_sync.page.sync.inc',
    'weight'           => 2,
  );
  $items[REDMINE_SYNC_URL_PAGE_SETTINGS] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Settings',
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'weight'           => 3,
  );
  $items[REDMINE_SYNC_URL_PAGE_SETTINGS_DATABASE] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Database API',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_settings_database_form'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'redmine_sync.page.settings.inc',
  );
  $items[REDMINE_SYNC_URL_PAGE_SETTINGS_REST_API] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'REST Api',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_settings_rest_api_form'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'redmine_sync.page.settings.inc',
  );
  $items[REDMINE_SYNC_URL_CONFIRM_CLEAR_ALL_RECORDS] = array(
    'type'             => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title'            => 'Clear all records?',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_sync_form_time_entries_clear_confirm'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'redmine_sync.page.sync.inc',
  );
  // REST API
  $items[REDMINE_SYNC_URL_PAGE_PROJECT_ADD] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Redmine Project',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_project_add_new_form'),
    'access arguments' => array('redmine_sync project add new'),
    'file'             => 'redmine_sync.page.project.inc',
    'weight'           => 1,
  );
  $items[REDMINE_SYNC_URL_PAGE_PROJECT_MEMBERSHIP_ADD] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Redmine Project Membership',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_project_membership_add_new_form'),
    'access arguments' => array('redmine_sync project membership add new'),
    'file'             => 'redmine_sync.page.project_membership.inc',
    'weight'           => 2,
  );
  $items[REDMINE_SYNC_URL_PAGE_ISSUE_ADD] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Redmine Issue',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_issue_add_new_form'),
    'access arguments' => array('redmine_sync issue add new'),
    'file'             => 'redmine_sync.page.issue.inc',
    'weight'           => 3,
  );
  $items[REDMINE_SYNC_URL_PAGE_TIME_ENTRY_ADD] = array(
    'type'             => MENU_NORMAL_ITEM,
    'title'            => 'Redmine Time entry',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('redmine_sync_time_entry_add_new_form'),
    'access arguments' => array('redmine_sync time_entry add new'),
    'file'             => 'redmine_sync.page.time_entry.inc',
    'weight'           => 4,
  );
  $items[REDMINE_SYNC_URL_JS_PROJECT_ID_ON_CHANGE] = array(
    'type'             => MENU_CALLBACK,
    'page callback'    => '_redmine_rest_api_js_project_id_on_change',
    'access arguments' => array('redmine_sync time_entry add new'),
    'file'             => 'redmine_sync.page.time_entry.inc',
  );
  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function redmine_sync_menu_alter(&$data) {
  $data['node/add']['access callback'] = 'redmine_sync_node_add_access_alter';
}


function redmine_sync_node_add_access_alter() {
  return user_access('redmine_sync time_entry add new') || _node_add_access();
}


/**
 * Implements hook_permission().
 */
function redmine_sync_permission() {
  return array(
    'redmine_sync time_entry add new' => array(
      'title' => t('Add new Redmine Time entry'),
    ),
    'redmine_sync issue add new' => array(
      'title' => t('Add new Redmine Issue'),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function redmine_sync_theme() {
  return array(
    'form_instead_message' => array(
      'variables' => array('message' => NULL),
      'function' => 'theme_form_instead_message',
    ),
  );
}


function theme_form_instead_message($vars) {
  extract($vars);
  if (isset($status)) return '<div class="form_instead-message form_instead-message-'.$status.'">'.$message.'</div>';
  else                return '<div class="form_instead-message">'.$message.'</div>';
}


/**
 * Implements hook_user_insert().
 * Implements hook_user_update().
 */
function redmine_sync_user_insert(&$edit, $account, $category) {
  redmine_sync_db_user_sync_by_email($account->mail);
}

function redmine_sync_user_update(&$edit, $account, $category) {
  redmine_sync_db_user_sync_by_email($account->mail);
}


/**
 * Implements hook_views_query_alter().
 */
function redmine_sync_views_query_alter(&$view, &$query) {
  if ($view->base_table == 'time_entries') {
    // Synchronization.
    $db_init = redmine_sync_init_db_rdm();
    if ($db_init == REDMINE_SYNC_DB_INIT_OK) {
      redmine_sync_db_time_entries_sync_all();
    } else {
      $message = t('Can\'t synchronize with Redmine database!');
      if (user_access('administer site configuration')) {
        $link_to_db_settings_page = l(t('database settings page'), REDMINE_SYNC_URL_PAGE_SETTINGS_DATABASE);
        $message.= REDMINE_SYNC_HTML_BR.t('Check all parameters on !settings_page or check database server and table %table_name accessibility.', array('!settings_page' => $link_to_db_settings_page, '%table_name' => 'time_entries'));
      }
      drupal_set_message($message, 'warning');
    }
  }
}


/**
 * Implements hook_views_data().
 */
function redmine_sync_views_data() {
  $data['time_entries']['table']['group'] = t('Redmine time_entries');
  $data['time_entries']['table']['base'] = array(
    'field'    => 'id', // This is the identifier field for the view.
    'title'    => t('Redmine time_entries'),
  );
  $data['time_entries']['id'] = array(
    'title'    => t('id'),
    'help'     => 'time_entries.id',
    'field'    => array('handler' => 'views_handler_field_numeric', 'click sortable' => true),
    'filter'   => array('handler' => 'views_handler_filter_numeric'),
    'sort'     => array('handler' => 'views_handler_sort'),
  );
  $data['time_entries']['project_id'] = array(
    'title'    => t('project id'),
    'help'     => 'time_entries.project_id',
    'field'    => array('handler' => 'views_handler_field_numeric', 'click sortable' => true),
    'filter'   => array('handler' => 'views_handler_filter_numeric'),
    'sort'     => array('handler' => 'views_handler_sort'),
  );
  $data['time_entries']['issue_id'] = array(
    'title'    => t('issue id'),
    'help'     => 'time_entries.issue_id',
    'field'    => array('handler' => 'views_handler_field_numeric', 'click sortable' => true),
    'filter'   => array('handler' => 'views_handler_filter_numeric'),
    'sort'     => array('handler' => 'views_handler_sort'),
  );
  $data['time_entries']['hours'] = array(
    'title'    => t('hours'),
    'help'     => 'time_entries.hours',
    'field'    => array('handler' => 'views_handler_field_numeric', 'click sortable' => true),
    'filter'   => array('handler' => 'views_handler_filter_numeric'),
    'sort'     => array('handler' => 'views_handler_sort'),
  );
  $data['time_entries']['comments'] = array(
    'title'    => t('comments'),
    'help'     => 'time_entries.comments',
    'field'    => array('handler' => 'views_handler_field', 'click sortable' => true),
    'sort'     => array('handler' => 'views_handler_sort'),
    'filter'   => array('handler' => 'views_handler_filter_string'),
    'argument' => array('handler' => 'views_handler_argument_string'),
  );
  $data['time_entries']['activity_id'] = array(
    'title'    => t('activity id'),
    'help'     => 'time_entries.activity_id',
    'field'    => array('handler' => 'views_handler_field_numeric', 'click sortable' => true),
    'filter'   => array('handler' => 'views_handler_filter_numeric'),
    'sort'     => array('handler' => 'views_handler_sort'),
  );
  $data['time_entries']['created_on'] = array(
    'title'    => t('created on'),
    'help'     => 'time_entries.created_on',
    'field'    => array('handler' => 'views_handler_field_date', 'click sortable' => true),
    'sort'     => array('handler' => 'views_handler_sort_date'),
    'filter'   => array('handler' => 'views_handler_filter_date'),
  );
  $data['time_entries']['updated_on'] = array(
    'title'    => t('updated on'),
    'help'     => 'time_entries.updated_on',
    'field'    => array('handler' => 'views_handler_field_date', 'click sortable' => true),
    'sort'     => array('handler' => 'views_handler_sort_date'),
    'filter'   => array('handler' => 'views_handler_filter_date'),
  );
  $data['time_entries']['spent_on'] = array(
    'title'    => t('spent on'),
    'help'     => 'time_entries.spent_on',
    'field'    => array('handler' => 'views_handler_field_date', 'click sortable' => true),
    'sort'     => array('handler' => 'views_handler_sort_date'),
    'filter'   => array('handler' => 'views_handler_filter_date'),
  );
  $data['time_entries']['nid'] = array(
    'title'    => t('nid'),
    'help'     => 'time_entries.nid',
    'field'    => array('handler' => 'views_handler_field_numeric', 'click sortable' => true),
    'filter'   => array('handler' => 'views_handler_filter_numeric'),
    'sort'     => array('handler' => 'views_handler_sort'),
    'relationship' => array(
      'base'       => 'node', // The name of the table to join with.
      'base field' => 'nid',  // The name of the field on the joined table.
      'handler'    => 'views_handler_relationship',
      'label'      => t('Relationship with nodes'),
      'title'      => t('Relationship with nodes'),
      'help'       => t('This relationship give you ability to add any field from node entity.'),
    ),
  );
  $data['time_entries']['user_id'] = array(
    'title'    => t('user id'),
    'help'     => 'time_entries.user_id',
    'field'    => array('handler' => 'views_handler_field_numeric', 'click sortable' => true),
    'filter'   => array('handler' => 'views_handler_filter_numeric'),
    'sort'     => array('handler' => 'views_handler_sort'),
  );
  if (redmine_sync_get_schema_version() > 0) {
    $data['time_entries']['user_id']['relationship'] = array(
      'base'       => 'users',   // The name of the table to join with.
      'base field' => 'user_id', // The name of the field on the joined table.
      'handler'    => 'views_handler_relationship',
      'label'      => t('Relationship with users'),
      'title'      => t('Relationship with users'),
      'help'       => t('This relationship give you ability to add any field from user entity.'),
    );
  }
  return $data;
}


/**
 * redmine_sync_get_schema_version().
 */
function redmine_sync_get_schema_version() {
  $query = db_select('system', 's');
  $query->fields('s', array('schema_version'));
  $query->condition('name', 'redmine_sync');
  $query->condition('type', 'module');
  return (int)$query->execute()->fetchField();
}


/**
 * Validate the fields with the date in the form.
 * Using ISO 8601 (YYYY-MM-DD).
 */
function _redmine_sync_form_date_field_validate($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    $timestamp = strtotime($element['#value']);
    if ($element['#value'] !== date(REDMINE_SYNC_DEF_DATE_FORMAT, $timestamp)) {
      form_error($element, t('!name field contains incorrect date.', array('!name' => $element['#title'])));
    }
  }
}


/**
 * Validate the fields with the time in the form.
 * Conditions:
 * - value must be between 0.00 and 999.99
 * - value may contain delimiters: "." or ","
 * - negative values are not allowed
 */
function _redmine_sync_form_time_field_validate($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    preg_match('#^(?:(?:[0-9]|[1-9][0-9]|[1-9][0-9][0-9])|'.
                    '(?:[0-9]|[1-9][0-9]|[1-9][0-9][0-9])(?:[.]|[,])(?:[0-9]|[0-9][0-9]))$#', $element['#value'], $found_hours);
    if (!isset($found_hours[0])) {
      form_error($element, t('!name field contains incorrect time.', array('!name' => $element['#title'])));
    }
  }
}


/**
 * redmine_sync_field_add_redmine_access_key().
 * redmine_sync_field_del_redmine_access_key().
 */
function redmine_sync_field_add_redmine_access_key() {
  $field          = field_info_field('rdm_access_key');
  $field_instance = field_info_instance('user', 'rdm_access_key', 'user');
  if (!$field) {
    $field = field_create_field(array(
      'field_name'   => 'rdm_access_key',
      'type'         => 'text',
      'entity_types' => array('user'),
      'locked'       => true,
    ));
  }
  if (!$field_instance) {
    $field_instance = field_create_instance(array(
      'field_name'  => 'rdm_access_key',
      'entity_type' => 'user',
      'bundle'      => 'user',
      'label'       => t('Redmine access key'),
      'widget_type' => 'text_textfield',
      'display'     => array('default' => array('label' => 'hidden', 'type' => 'hidden')),
    ));
    drupal_set_message(t('The field %name was added', array('%name' => 'rdm_access_key')));
    watchdog('redmine_sync', 'The field %name was added', array('%name' => 'rdm_access_key'));
  }
}


function redmine_sync_field_del_redmine_access_key() {
  $field          = field_info_field('rdm_access_key');
  $field_instance = field_info_instance('user', 'rdm_access_key', 'user');
  if ($field_instance) {
    field_delete_instance(array(
      'field_name'  => 'rdm_access_key',
      'entity_type' => 'user',
      'bundle'      => 'user',
    ));
  }
  if ($field) {
    field_delete_field('rdm_access_key');
    drupal_set_message(t('The field %name was removed', array('%name' => 'rdm_access_key')));
    watchdog('redmine_sync', 'The field %name was removed', array('%name' => 'rdm_access_key'));
  }
}


