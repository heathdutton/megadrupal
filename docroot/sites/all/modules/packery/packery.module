<?php

/**
 * @file
 * packery.module
 */

/**
 * Implements hook_menu().
 */
function packery_menu() {
  $items['admin/config/user-interface/packery'] = array(
    'title' => 'Packery',
    'description' => 'Packery settings group list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('packery_settings_form'),
    'access arguments' => array('administer packery settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'packery.admin.inc',
  );
  $items['admin/config/user-interface/packery/%'] = array(
    'title' => 'Edit settings group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('packery_settings_form', 4),
    'access arguments' => array('administer packery settings'),
    'type' => MENU_CALLBACK,
    'file' => 'packery.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function packery_permission() {
  return array(
    'administer packery settings' => array(
      'title' => t('Administer Packery settings'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function packery_theme() {
  return array(
    'packery' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'file' => 'theme/packery.theme.inc',
    ),
    'packery_item' => array(
      'variables' => array('item' => array(), 'attributes' => array()),
      'file' => 'theme/packery.theme.inc',
    ),
    'packery_wrapper' => array(
      'variables' => array('id' => '', 'output' => array()),
      'file' => 'theme/packery.theme.inc',
    ),
  );
}

/**
 * Implements hook_library().
 */
function packery_library() {
  $library = libraries_get_path('packery');

  $libraries['packery'] = array(
    'title' => 'Packery',
    'website' => 'http://packery.metafizzy.co',
    'version' => array(),
    'js' => array(
      $library . '/packery.pkgd.min.js' => array(
        'scope' => 'footer',
      ),
    )
  );

  return $libraries;
}

/**
 * Initialize Packery settings.
 */
function packery_settings($id, $settings) {
  if (is_string($settings)) {
    $settings = packery_load_settings($settings);
  }

  $group = array(
    'settings' => $settings
  );

  // @todo, allow drupal alter for settings.

  return $group;
}

/**
 * Load Packery settings.
 */
function packery_load_settings($group) {
  $name = str_replace('_settings', '', $group);

  // Load settings array.
  $settings = array(
    'imagesloaded' => (boolean)variable_get($name . '_imagesloaded', FALSE),
    'containerStyle' => variable_get($name . '_container_style', "{ position: 'relative' }"),
    'columnWidth' => variable_get($name . '_column_width', '') ? variable_get($name . '_column_width', '') : '',
    'gutter' => (int)variable_get($name . '_gutter', ''),
    'percentPosition' => (boolean)variable_get($name . '_percent_position', FALSE),
    'isHorizontal' => (boolean)variable_get($name . '_is_horizontal', FALSE),
    'isInitLayout' => (boolean)variable_get($name . '_is_init_layout', TRUE),
    'isOriginLeft' => (boolean)variable_get($name . '_is_origin_left', TRUE),
    'isOriginTop' => (boolean)variable_get($name . '_is_origin_top', TRUE),
    'isResizeBound' => (boolean)variable_get($name . '_is_resize_bound', TRUE),
    'itemSelector' => variable_get($name . '_item_selector', '.packery-item'),
    'rowHeight' => (int)variable_get($name . '_row_height', 60),
    'stamp' => variable_get($name . '_stamp', ''),
    'transitionDuration' => variable_get($name . '_transition_duration', '0.4s'),
  );

  return $settings;
}

/**
 * Return array with key pair.
 */
function packery_settings_callback_list() {
  $instances = _packery_return_instances();

  foreach ($instances as $instance) {
    $settings[$instance->name] = $instance->name;
  }

  return $settings;
}

/**
 * Helper function, return active instances by name.
 */
function _packery_return_instances() {
  $query = 'SELECT name FROM {variable} WHERE name LIKE :name';
  $results = db_query($query, array(':name' => db_like('packery_settings_') . '%'))->fetchAll();

  return $results;
}
