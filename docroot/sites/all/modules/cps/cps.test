<?php

/**
 * @file
 * Tests for CPS.
 */

/**
 * Defines a base class for testing CPS.
 */
class CpsWebTestCase extends NodeWebTestCase {
  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules[] = 'cps';
    $modules[] = 'cps_node';
    $modules[] = 'cps_workflow_simple';

    parent::setUp($modules);
  }
}

/**
 * Test drafty revision support with a single entity.
 */
class CpsTest extends CpsWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'CPS',
      'description' => 'Tests CPS.',
      'group' => 'CPS',
    );
  }

  /**
   * Test creation, editing and deletion of changesets via the API.
   */
  function testCpsCrud() {
    // Create then save a changeset.
    $values = array(
      'naame' => $this->randomName(),
      'uid' => 0,
    );
    $changeset = cps_changeset_create($values);
    $changeset->save();

    // Confirm we get a CPSChangeset entity when loading.
    $changeset = cps_changeset_load($changeset->changeset_id);
    $this->assertTrue($changeset instanceof CPSChangeset);

    // Update the changeset with a new name, then resave.
    $new_name = $this->randomName();
    $changeset->name = $new_name;
    $changeset->save();
    $changeset = cps_changeset_load($changeset->changeset_id);
    $this->assertEqual($changeset->name, $new_name);

    // Create a second changeset.
    $values = array(
      'naame' => $this->randomName(),
      'uid' => 0,
    );
    $new_changeset = cps_changeset_create($values);
    $new_changeset->save();

    // Delete the old changeset.
    cps_changeset_delete($changeset->changeset_id);

    // Try to load the changeset and ensure it's not there.
    $changeset = cps_changeset_load($changeset->changeset_id);
    $this->assertFalse($changeset);

    // Confirm the second changeset is still there, then delete it.
    $changeset = cps_changeset_load($new_changeset->changeset_id);
    $this->assertTrue($new_changeset instanceof CPSChangeset);
    cps_changeset_delete($new_changeset->changeset_id);
    $changeset = cps_changeset_load($new_changeset->changeset_id);
    $this->assertFalse($changeset);
  }

  /**
   * Test creation, edit, update and delete of entities within a changeset.
   */
  function testCpsEntity() {
    // CPS workflow simple sets the changeset entity as a parameter in
    // hook_mail(). During testing this gets saved in variables, which results
    // in a fatal error since the entity system is not available in
    // variable_init(). Disable mail testing during this test for now.
    // @todo: there might be a better workaround than this, or refactor the
    // hook_mail() implementation to load the changeset rather than taking it as
    // a paramater?
    variable_set('cps_send_mail', FALSE);
    // @todo: 'publish changesets' is not covered by 'administer changesets'.
    $account = $this->drupalCreateUser(array('administer nodes', 'administer changesets', 'publish changesets'));
    $this->drupalLogin($account);
    // Create then save a changeset.
    $values = array(
      'naame' => $this->randomName(),
      'uid' => $account->uid,
    );
    $changeset = cps_changeset_create($values);
    $changeset->save();

    // Switch to this changeset.
    cps_override_changeset($changeset->changeset_id);

    $node = new stdClass();
    $node->type = 'page';
    $node->title = 'Test';
    $node->uid = $account->uid;
    $node->status = 1;
    node_save($node);
    $node = node_load($node->nid);
    $this->assertTrue($this->getChangesetRecords('node', $node->nid, 1, $changeset->changeset_id));
    $this->assertTrue($this->getChangesetRecords('node', $node->nid, 2, 'initial'));
    // Saving the node will increment the revision ID for the draft revision in
    // this changeset.
    // The revision ID of the 'initial' revision doesn't need to change - it's
    // OK if this diverges from the 'published' revision ID.
    $node->title = 'Test first changeset';
    $node->is_draft_revision = TRUE;
    node_save($node);

    $this->assertTrue($this->getChangesetRecords('node', $node->nid, 3, $changeset->changeset_id));
    $this->assertTrue($this->getChangesetRecords('node', $node->nid, 2, 'initial'));

    // Create a second changeset.
    $values = array(
      'name' => $this->randomName(),
      'uid' => $account->uid,
    );
    $changeset2 = cps_changeset_create($values);
    $changeset2->save();

    // Switch to the second changeset then create a new revision with a
    // different title.
    cps_override_changeset($changeset2->changeset_id);
    $node->title = 'Test second changeset';
    $node->is_draft_revision = TRUE;
    node_save($node);
    $this->assertTrue($this->getChangesetRecords('node', $node->nid, 5, $changeset2->changeset_id));

    $node = node_load($node->nid);
    $this->assertTrue($node->status);
    $this->assertEqual($node->title, 'Test second changeset');

    // Ensure loading with conditions works, this requires the entity static
    // cache to be reset since conditions are checked against that too.
    $nodes = node_load_multiple(FALSE, array('title' => $node->title, 'status' => 1), TRUE);
    $this->assertTrue($nodes);

    cps_override_changeset($changeset->changeset_id);
    $node = node_load($node->nid);
    $this->assertTrue($node->status);
    $this->assertEqual($node->title, 'Test first changeset');
    $nodes = node_load_multiple(FALSE, array('title' => $node->title, 'status' => 1), TRUE);
    $this->assertTrue($nodes);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->propertyCondition('title', $node->title);
    $result = $query->execute();
    $this->assertEqual($result['node'][$node->nid]->vid, $node->vid);

    cps_override_changeset(CPS_PUBLISHED_CHANGESET);
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Test');
    $this->assertFalse($node->status);
    $nodes = node_load_multiple(FALSE, array('title' => $node->title, 'status' => 1), TRUE);
    $this->assertFalse($nodes);

    // Set the current changeset to an unrelated changeset for publishing, tests
    // a bug where items were published with data from the current changeset,
    // not the one being published.
    cps_set_current_changeset($changeset2->changeset_id);
    $this->publishChangeset($changeset->changeset_id);
    cps_override_changeset(CPS_PUBLISHED_CHANGESET);
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Test first changeset');
    $this->assertTrue($node->status);
    cps_set_current_changeset($changeset->changeset_id);
    $this->publishChangeset($changeset2->changeset_id);
    cps_override_changeset(CPS_PUBLISHED_CHANGESET);
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Test second changeset');
    $this->assertTrue($node->status);

    // Test unpublishing a changeset.
    $this->unpublishChangeset($changeset2->changeset_id);
    cps_override_changeset(CPS_PUBLISHED_CHANGESET);
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Test first changeset');
    $this->assertTrue($node->status);

    $this->publishChangeset($changeset2->changeset_id);
    cps_override_changeset(CPS_PUBLISHED_CHANGESET);
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Test second changeset');
    $this->assertTrue($node->status);
  }

  /**
   * Get a changeset record for an entity revision.
   */
  protected function getChangesetRecords($type, $id, $vid = NULL, $changeset_id = NULL) {
    $query = db_select('cps_entity', 'ce')
      ->fields('ce')
      ->condition('entity_type',  $type)
      ->condition('entity_id', $id);
    if (isset($vid)) {
      $query->condition('revision_id', $vid);
    }
    if (isset($changeset_id)) {
      $query->condition('changeset_id', $changeset_id);
    }
    return $query->execute()->fetchAll();
  }

  /**
   * Publish a changeset.
   */
  function publishChangeset($changeset_id) {
    // @todo: use API method when one exists.
    $this->drupalGet("admin/structure/changesets/$changeset_id/submit");
    $this->assertResponse(200);
    $edit = array(
      'message' => 'Test',
    );
    $this->drupalPost("admin/structure/changesets/$changeset_id/submit", $edit, t('Submit'));
    $this->assertResponse(200);
    $this->drupalGet("admin/structure/changesets/$changeset_id/publish");
    $this->assertResponse(200);
    $this->drupalPost("admin/structure/changesets/$changeset_id/publish", array(), t('Publish'));
  }

  /**
   * Unpublish a changeset.
   */
  function unpublishChangeset($changeset_id) {
    $this->drupalGet("admin/structure/changesets/$changeset_id/unpublish");
    $this->assertResponse(200);
    $this->drupalPost("admin/structure/changesets/$changeset_id/unpublish", array(), t('Revert'));
    $this->assertResponse(200);
  }
}
