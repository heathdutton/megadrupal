<?php
/**
 * @file
 * Add a simple submission workflow to CPS.
 *
 * This module adds a new workflow state, 'review' known as 'submitted' or
 * 'submitted for review'.
 */

// -------------------------------------------------------------------------
// Drupal core hooks

/**
 * Implements hook_menu().
 */
function cps_workflow_simple_menu() {
  $items = array();
  $items['admin/structure/changesets/%cps_changeset/submit'] = array(
    'title' => 'Submit for review',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'cps_simple_workflow_submit_page',
    'page arguments' => array(3),
    'access callback' => 'entity_access',
    'access arguments' => array('submit', 'cps_changeset', 3),
  );

  $items['admin/structure/changesets/%cps_changeset/decline'] = array(
    'title callback' => 'cps_workflow_simple_decline_title',
    'title arguments' => array(3),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'cps_simple_workflow_decline_page',
    'page arguments' => array(3),
    'access callback' => 'entity_access',
    'access arguments' => array('decline', 'cps_changeset', 3),
  );

  return $items;
}

/**
 * Implements hook_entity_update().
 */
function cps_workflow_simple_entity_update($entity, $entity_type) {
  // React to changeset status changes.
  if ($entity_type == 'cps_changeset' && isset($entity->oldStatus)) {
    if ($entity->status == CPS_ARCHIVED_STATUS && $entity->oldStatus == 'review') {
      $account = user_load($entity->uid);
      cps_workflow_simple_send($account->mail, 'publish', $entity);
    }

    if ($entity->status == 'unpublished' && $entity->oldStatus == 'review') {
      if ($entity->uid == $GLOBALS['user']->uid) {
        cps_workflow_simple_send(variable_get('cps_workflow_reviewers_email', 'admin@example.com'), 'withdraw', $entity);
      }
      else {
        $account = user_load($entity->uid);
        cps_workflow_simple_send($account->mail, 'decline', $entity);
      }
    }

    if ($entity->status == 'review' && $entity->oldStatus == 'unpublished') {
      cps_workflow_simple_send(variable_get('cps_workflow_reviewers_email', 'admin@example.com'), 'review', $entity);
    }
  }
}

/**
 * Implements hook_mail().
 */
function cps_workflow_simple_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  /** @var CPSChangeset $changeset */
  $changeset = $params['changeset'];
  $build = $changeset->view('mail', $message['language']->language);
  switch ($key) {
    // Send a simple message from the contact form.
    case 'review':
      $message['subject'] = t('@site-name: Submission for review', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      $message['body'][] = t('@name submitted a site version for review.', array('@name' => format_username($user)), $options);
      $message['body'][] = drupal_render($build);
      break;
    case 'publish':
      $message['subject'] = t('@site-name: Your site version was published', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      $message['body'][] = t('@name published your site version.', array('@name' => format_username($user)), $options);
      $message['body'][] = drupal_render($build);
      break;
    case 'decline':
      $message['subject'] = t('@site-name: Your site version was declined', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      $message['body'][] = t('@name declined to publish your site version with the following message:', array('@name' => format_username($user)), $options);
      $message['body'][] = '<p>' . check_markup($params['changeset']->statusMessage, 'full_html') . '</p>';
      $message['body'][] = drupal_render($build);
      break;
    case 'withdraw':
      $message['subject'] = t('@site-name: Submission withdrawn', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      $message['body'][] = t('@name withdrew a site version from review.', array('@name' => format_username($user)), $options);
      $message['body'][] = drupal_render($build);
      break;
  }

  $message['headers']['Content-Type'] = 'text/html';
  $message['params']['plaintext'] = drupal_html_to_text(implode("\n\n", $message['body']));
}

// -------------------------------------------------------------------------
// CPS hooks

/**
 * Implements hook_cps_changeset_states_alter().
 */
function cps_workflow_simple_cps_changeset_states_alter(&$states) {
  // Add a state for 'submitted for review.'
  $states['review'] = array(
    'label' => t('Pending review'),
    'weight' => 0,
    'type' => 'open',
  );
}

/**
 * Implements hook_cps_changeset_operations_alter().
 */
function cps_workflow_simple_cps_changeset_operations_alter(&$operations, $changeset) {
  $uri = $changeset->uri();
  $operations['submit'] = array(
    '#theme' => 'link',
    '#text' => t('submit for review'),
    '#path' => $uri['path'] . '/submit',
    '#options' => array(
      'query' => drupal_get_destination(),
      'html' => TRUE,
      'attributes' => array('class' => array('cps-changeset-operation'))
    ),
    '#access' => entity_access('submit', 'cps_changeset', $changeset),
  );
  $operations['decline'] = array(
    '#theme' => 'link',
    '#text' => $changeset->uid != $GLOBALS['user']->uid ? t('decline to publish') : t('withdraw'),
    '#path' => $uri['path'] . '/decline',
    '#options' => array(
      'query' => drupal_get_destination(),
      'html' => TRUE,
      'attributes' => array('class' => array('cps-changeset-operation'))
    ),
    '#access' => entity_access('decline', 'cps_changeset', $changeset),
  );
}

/**
 * Implements hook_cps_changeset_access_alter().
 */
function cps_workflow_simple_cps_changeset_access_alter(&$access, $op, $changeset, $account) {
  // Set up permission for the new state.
  switch ($op) {
    case 'submit':
      $access = $changeset->status == 'unpublished' && $changeset->changeCount && ($changeset->uid == $account->uid || user_access('edit all changesets', $account));
      break;
    case 'decline':
      $access = $changeset->status == 'review' && (user_access('publish changesets', $account) || $changeset->uid == $account->uid);
      break;
    case 'publish':
      if ($access && $changeset->status != 'review') {
        $access = FALSE;
      }
      break;
  }
}

/**
 * Implements hook_cps_changeset_history_status_alter().
 */
function cps_workflow_simple_cps_changeset_history_status_alter(&$status, $changeset, $item) {
  if ($item->previous_status == 'unpublished' && $item->new_status == 'review') {
    $status = t('Submitted for review');
  }

  if ($item->previous_status == 'review' && $item->new_status == 'unpublished') {
    if ($item->uid == $changeset->uid) {
      $status = t('Withdrawn');
    }
    else {
      $status = t('Declined');
    }
  }
}

// -------------------------------------------------------------------------
// Page callbacks and forms

/**
 * Menu callback to determine the title of the decline form.
 *
 * If the user is initiating it, we call it 'withdraw'; but if a reviewer is
 * doing it, we call it 'decline'.
 *
 * @param CPSChangeset $changeset
 *
 * @return string
 */
function cps_workflow_simple_decline_title(CPSChangeset $changeset) {
  return $changeset->uid == $GLOBALS['user']->uid ? t('Withdraw from review') : t('Decline to publish');
}

/**
 * Page callback to display the submit changeset form.
 *
 * @param CPSChangeset $entity
 *
 * @return array
 *   A Drupal renderable array.
 */
function cps_simple_workflow_submit_page(CPSChangeset $entity) {
  $form_state = array(
    'entity' => $entity,
  );

  $output = drupal_build_form('cps_changeset_submit_changeset_form', $form_state);
  return $output;
}

/**
 * Form callback to display the submit changeset form.
 */
function cps_changeset_submit_changeset_form($form, &$form_state) {
  $form['warning'] = array(
    '#markup' => '<div class="submit-warning">' . t('Are you sure you want to submit this for review and publication?') . '</div>',
  );

  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Provide a message'),
    '#required' => TRUE,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#limit_validation_errors' => array(),
    '#submit' => array('cps_workflow_changeset_form_cancel'),
  );

  return $form;
}

/**
 * Submit handler to cancel the form.
 */
function cps_workflow_changeset_form_cancel($form, &$form_state) {
  $form_state['redirect'] = $form_state['entity']->uri();
}

/**
 * Submit handler for the cps_changeset_submit_changeset form.
 *
 * @param CPSChangeset $entity
 *
 * @return array
 *   A Drupal renderable array.
 */
function cps_changeset_submit_changeset_form_submit($form, &$form_state) {
  /** @var CPSChangeset $entity */
  $entity = $form_state['entity'];
  $entity->setStatus('review', $form_state['values']['message']);
  $entity->save();
  drupal_set_message(t('The site version %changeset has been submitted for review.', array('%changeset' => $entity->name)));
  $form_state['redirect'] = $entity->uri();
}

/**
 * Page callback to display the decline changeset form.
 *
 * @param CPSChangeset $entity
 *
 * @return array
 *   A Drupal renderable array.
 */
function cps_simple_workflow_decline_page(CPSChangeset $entity) {
  $form_state = array(
    'entity' => $entity,
  );

  $output = drupal_build_form('cps_changeset_decline_changeset_form', $form_state);
  return $output;
}

/**
 * Form callback to display the decline changeset form.
 */
function cps_changeset_decline_changeset_form($form, &$form_state) {
  $entity = $form_state['entity'];

  if ($entity->uid != $GLOBALS['user']->uid) {
    $form['warning'] = array(
      '#markup' => '<div class="decline-warning">' . t('Are you sure you want to decline this for publication?') . '</div>',
    );

    $form['message'] = array(
      '#type' => 'textarea',
      '#title' => t('Provide a message'),
      '#required' => TRUE,
    );
  }
  else {
    $form['warning'] = array(
      '#markup' => '<div class="decline-warning">' . t('Are you sure you want to withdraw this from review?') . '</div>',
    );
    // This is added to prevent a warning later.
    $form['message'] = array(
      '#type' => 'value',
      '#value' => '',
    );
  }

  $form['actions']['decline'] = array(
    '#type' => 'submit',
    '#value' => $entity->uid != $GLOBALS['user']->uid ? t('Decline') : t('Withdraw'),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#limit_validation_errors' => array(),
    '#submit' => array('cps_workflow_changeset_form_cancel'),
  );

  return $form;
}

/**
 * Decline handler for the cps_changeset_decline_changeset form.
 */
function cps_changeset_decline_changeset_form_submit($form, &$form_state) {
  /** @var CPSChangeset $entity */
  $entity = $form_state['entity'];
  $entity->setStatus('unpublished', $form_state['values']['message']);
  $entity->save();
  if ($entity->uid == $GLOBALS['user']->uid) {
    $message = t('The site version %changeset has been withdrawn.', array('%changeset' => $entity->name));
  }
  else {
    $message = t('The site version %changeset has been declined for publication.', array('%changeset' => $entity->name));
  }
  drupal_set_message($message);
  $form_state['redirect'] = $entity->uri();
}

// -------------------------------------------------------------------------
// Public API

/**
 * Sends an e-mail.
 *
 * @param string $to
 *   The email address to send the email to.
 * @param string $key
 *   The key of the message as found in hook_mail(). The actual email will
 *   be generated there.
 * @param CPSChangeset $changeset
 *   The changeset entity to be notified about.
 */
function cps_workflow_simple_send($to, $key, CPSChangeset $changeset) {
  // @todo: since the full changeset entity is passed as a parameter to
  // drupal_mail(), this results in the entity being serialized by some mail
  // backends. Since the testing mail backend uses the variable system this can
  // cause fatal errors when the entity is unserialized in variable_initialize()
  // as the entity system is not available then. This variable allows tests to
  // pass, another option would be to not pass the full entity as a parameter.
  if (variable_get('cps_send_mail', TRUE)) {
    $module = 'cps_workflow_simple';

    global $user;
    $from = format_username($user) . ' <' . $user->mail . '>';

    $params['changeset'] = $changeset;
    $language = language_default();

    return drupal_mail($module, $key, $to, $language, $params, $from);
  }
}
