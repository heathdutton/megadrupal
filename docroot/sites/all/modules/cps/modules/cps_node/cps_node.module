<?php

/**
 * @file
 * Main module file to add CPS support to nodes.
 */

// -----------------------------------------------------------------------
// Drupal Core Hooks
//

/**
 * Implements hook_entity_info_alter().
 */
function cps_node_entity_info_alter(&$info) {
  $info['node']['cps'] = TRUE;
}

/**
 * Implements hook_menu_alter().
 */
function cps_node_menu_alter(&$items) {
  $items['node/%node/revisions']['access callback'] = FALSE;

  // And add our history page in its stead.
  $items['node/%node/history'] = array(
    'title' => 'History',
    'page callback' => 'cps_revisions_page',
    'page arguments' => array('node', 1),
    'access callback' => '_node_revision_access',
    'access arguments' => array(1),
    'weight' => 2,
    'file' => 'includes/admin.inc',
    'file path' => drupal_get_path('module', 'cps'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/history/%cps_changeset_optional/%cps_changeset_optional'] = array(
    'title' => 'Compare revisions',
    'page callback' => 'cps_diff_page',
    'page arguments' => array('node', 1, 3, 4),
    'access callback' => '_node_revision_access',
    'access arguments' => array(1),
    'file' => 'includes/admin.inc',
    'file path' => drupal_get_path('module', 'cps'),
    'type' => MENU_LOCAL_TASK,
  );
}

/**
 * Implements hook_node_access().
 */
function cps_node_node_access($node, $op, $account) {
  if (!cps_can_edit_entities($op, 'node', $node)) {
    return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_node_form_alter().
 */
function cps_node_form_node_form_alter(&$form, &$form_state, &$form_id) {
  $form['revision_information']['#access'] = FALSE;
  $form['actions']['submit']['#submit'][] = 'cps_node_node_form_submit';

  if (empty($form_state['input'])) {
    $warning = cps_changeset_edit_warning('node', $form_state['node']);
    if ($warning) {
      drupal_set_message($warning, 'warning');
    }
  }
}

/**
 * Submit callback for the node handler.
 */
function cps_node_node_form_submit($form, &$form_state) {
  // Because of revision management in changesets, the aliased path can become invalid
  // when CPS re-saves the published revision. Force it to go to the unaliased path
  // to ensure that it always goes to the right place.
  if (!empty($form_state['redirect']) && !is_array($form_state['redirect'])) {
    $form_state['redirect'] = array($form_state['redirect'], array('alias' => TRUE));
  }
}

function cps_node_admin_paths() {
  return array(
    'node/*/history' => TRUE,
    'node/*/history/*' => TRUE,
  );
}

/**
 *  Implements hook_module_implements_alter().
 */
function cps_node_module_implements_alter(&$implementations, $hook) {
  if (isset($implementations['cps_node']) && (in_array($hook, array('query_alter', 'menu_alter')))) {
    // Move these last so they correctly override others.
    $group = $implementations['cps_node'];
    unset($implementations['cps_node']);
    $implementations['cps_node'] = $group;
  }
}

/**
 *  Implements hook_query_TAG_alter().
 */
function cps_node_query_entityreference_alter(QueryAlterableInterface $query) {
  // If the user can view changesets, then they need to be able to reference
  // unpublished nodes when in a changeset context.
  $tables = $query->getTables();
  // If cps_entity is not added there is very little we can do at this point.
  if (cps_get_current_changeset(TRUE) != CPS_PUBLISHED_CHANGESET && isset($tables['cps_entity'])) {
    $conditions = &$query->conditions();
    foreach ($conditions as $index => $condition) {
      // EntityReference_SelectionHandler_Generic_node::entityFieldQueryAlter()
      // adds this condition.
      if (is_array($condition) && $condition['field'] == 'node.status' && $condition['operator'] == '=') {
        unset($conditions[$index]);
        if (!isset($tables['node_revision'])) {
          $query->join('node_revision', 'node_revision', 'node_revision.vid = COALESCE(cps_entity.revision_id, node.vid)');
        }
        $query->condition('node_revision.status', $condition['value']);
        break;
      }
    }
  }
}
