<?php

/**
 * @file
 * Main module file for the Content Preview System - Review Entity.
 */

/**
 * Implements of hook_permission()
 */
function cps_review_permission() {
  return array(
    'administer cps reviews' => array(
      'title' => t('Administer CPS review entities'),
      'description' => t('Add, delete, edit and manipulate review entities.'),
    ),
    'edit all cps reviews' => array(
      'title' => t('Edit all CPS review entities'),
      'description' => t('Can edit CPS reviews owned by other people.'),
    ),
    'view unpublished cps reviews' => array(
      'title' => t('View CPS review entities'),
      'description' => t('View unpublished CPS review entities on the admin page.'),
    ),
    'publish cps reviews' => array(
      'title' => t('Publish CPS review entities'),
      'description' => t('Can publish CPS review entities.'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function cps_review_entity_info() {
  $info = array();

  $info['cps_review'] = array(
    'label' => t('CPS Review'),
    'entity class' => 'CPSReview',
    'controller class' => 'CPSReviewController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'cps_review',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'review_id',
      'label' => 'name',
    ),
    'bundles' => array(
      'cps_review' => array(
        'label' => t('CPS Review'),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
      'embed' => array(
        'label' => t('Embedded'),
        'custom settings' => FALSE,
      ),
      'mail' => array(
        'label' => t('Mailed'),
        'custom settings' => FALSE,
      ),
    ),
    // entity module callbacks
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'view callback' => 'cps_review_view',
    'creation callback' => 'cps_review_create',
    'access callback' => 'cps_review_access',
    'save callback' => 'cps_review_save',
    'module' => 'cps_review',
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function cps_review_menu() {
  $base = 'cps-review';

  $items = array();
  $items[$base . '/%cps_review'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('cps_review', 1),
    'page callback' => 'cps_review_view_page',
    'page arguments' => array(1, 'full'),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cps_review', 1),
    'file' => 'includes/admin.inc',
  );

  $items[$base . '/%cps_review/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'includes/admin.inc',
  );

  $items[$base . '/%cps_review/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'cps_review_edit_page',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 'cps_review', 1),
    'weight' => 9,
    'file' => 'includes/admin.inc',
  );

  $items[$base . '/%cps_review/reply'] = array(
    'title' => 'Reply',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'cps_review_reply_entity_page',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'cps_review', 1),
    'weight' => 9,
    'file' => 'includes/admin.inc',
  );

  $items[$base . '/%cps_review/publish'] = array(
    'title' => 'Publish',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'cps_review_publish_page',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('publish', 'cps_review', 1),
    'file' => 'includes/admin.inc',
    'weight' => 10,
  );

  $items[$base . '/%cps_review/unpublish'] = array(
    'title' => 'Unpublish',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'cps_review_unpublish_page',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('unpublish', 'cps_review', 1),
    'file' => 'includes/admin.inc',
    'weight' => 11,
  );

  $items[$base . '/%cps_review/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cps_review_delete_form', 1),
    'access callback' => 'entity_access',
    'access arguments' => array('delete', 'cps_review', 1),
    'file' => 'includes/admin.inc',
    'weight' => 12,
  );

  if (module_exists('devel')) {
    $items[$base . '/%cps_review/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('cps_review', 1),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
    );

    $items[$base . '/%cps_review/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    $items[$base . '/%cps_review/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_render_object',
      // Normally this would be the name of the entity type, but slightly
      // modified in order to call the right function.
      'page arguments' => array('cps_review', 1),
      'access arguments' => array('access devel information'),
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
  }

  $items['admin/structure/cps-reviews'] = array(
    'title' => 'CPS reviews',
    'description' => 'Manage CPS reviews.',
    'page callback' => 'cps_review_list_page',
    'page arguments' => array('administer_cps_reviews'),
    'file' => 'includes/admin.inc',
    'access arguments' => array('administer cps reviews'),
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_field_extra_fields().
 */
function cps_review_field_extra_fields() {
  $info = array();

  // Add the CPS review field to all supported CPS entities.

  foreach (cps_get_supported() as $entity_type) {
    // Add the extra field to all bundles of the entity.
    $entity_info = entity_get_info($entity_type);
    foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
      $info[$entity_type][$bundle]['display']['cps_review_widget'] = array(
        'label' => nt('CPS Review: Widget'),
        'description' => nt('Provides the CPS review widget'),
        'weight' => 100,
        // Note: For this to take effect, you will need a core patch:
        //       https://www.drupal.org/node/1256368
        // Use hook_field_extra_fields_display_alter() to prevent having to
        // update all view modes with this extra key.
        'visible' => FALSE,
      );
    }
  }

  return $info;
}

/**
 * Implements hook_entity_view().
 */
function cps_review_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if (!cps_is_supported($entity_type)) {
    return;
  }
  list(,,$bundle) = entity_extract_ids($entity_type, $entity);
  $extra_fields = field_extra_fields_get_display($entity_type, $bundle, $view_mode);

  // Get the extra fields visibility.
  if (!empty($extra_fields['cps_review_widget']['visible'])) {
    module_load_include('inc', 'cps_review', 'includes/admin');
    $entity->content['cps_review_widget'] = cps_review_widget($entity_type, $entity);
  }
}

/**
 * Implements hook_theme().
 */
function cps_review_theme() {
  $theme = array();
  $theme['cps_review'] = array(
    'render element' => 'elements',
    'base hook' => 'entity',
    'template' => 'cps-review',
    'path' => drupal_get_path('module', 'cps_review') . '/templates',
   );

  return $theme;
}

// -----------------------------------------------------------------------
// Contrib Hooks

/**
 * Implements hook_ctools_plugin_directory().
 */
function cps_review_ctools_plugin_directory($module, $plugin) {
  if ($module == 'cps_review') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_api().
 */
function cps_review_views_api() {
  return array(
    'path' => drupal_get_path('module', 'cps_review') . '/plugins/views',
    'api' => 3,
  );
}

/**
 * Implements hook_entity_property_info().
 */
function cps_review_entity_property_info() {
  return entity_get_controller('cps_review')->hook_entity_property_info();
}

// -----------------------------------------------------------------------
// Theme hooks

/**
 * Implements hook_preprocess_entity().
 */
function cps_review_preprocess_entity(&$variables) {
  if (isset($variables['cps_review'])) {
    $entity = $variables['cps_review'];
    $variables['attributes_array']['id'] = $entity->htmlId();
    if (variable_get('cps_review_use_title', 0) != 1) {
      // Hide the title.
      $variables['title'] = '';
    }
  }
}

// -----------------------------------------------------------------------
// Public API

// @todo

// -------------------------------------------------------------------------
// Database and general entity API functions

/**
 * CPS review entity loader.
 *
 * @param string $review_id
 *   The CPS review id.
 *
 * @return CPSReview
 *   The CPS review, if found.
 *
 * @see entity_load()
 */
function cps_review_load($review_id) {
  $entities = cps_review_load_multiple(array($review_id));
  if ($entities) {
    return reset($entities);
  }
}

/**
 * Load multiple CPS reviews.
 *
 * @param string[] $ids
 *   An array of IDs to load.
 * @param array $conditions
 *   (optional) An array of conditions.
 * @param bool $reset
 *   (optional) TRUE to force a load from database.
 *
 * @see entity_load_multiple()
 */
function cps_review_load_multiple($ids, $conditions = array(), $reset = FALSE) {
  return entity_load('cps_review', $ids, $conditions, $reset);
}

/**
 * Save a CPS review entity.
 *
 * @param CPSReview $entity
 *   The entity to save.
 *
 * @see node_save()
 */
function cps_review_save(CPSReview $entity) {
  return entity_get_controller('cps_review')->save($entity);
}

/**
 * Delete a CPS review entity.
 *
 * @param $review_id
 *   A CPS review ID.
 */
function cps_review_delete($review_id) {
  cps_review_delete_multiple(array($review_id));
}

/**
 * Delete a revision for a CPS review entity.
 *
 * @param $vid
 *   The revision id to delete.
 */
function cps_review_delete_revision($vid) {
  return entity_get_controller('cps_review')->deleteRevision($vid);
}

/**
 * Delete multiple CPS reviews.
 *
 * @param string[] $review_ids
 *   An array of review IDs.
 */
function cps_review_delete_multiple(array $review_ids) {
  return entity_get_controller('cps_review')->delete($review_ids);
}

/**
 * View a CPS review entity.
 *
 * @param CPSReview[] $entity
 *   The CPS review entities.
 * @param string $view_mode
 *   The view mode to view.
 * @param string $langcode
 *   The language to use or NULL.
 *
 * @return array
 *   A Drupal renderable array.
 *
 * @see node_view()
 */
function cps_review_view($entities, $view_mode = 'full', $langcode = NULL) {
  return entity_get_controller('cps_review')->view($entities, $view_mode, $langcode);
}

/**
 * Callback to create a new entity.
 *
 * @param array $values
 *   The initial values to seed the new entity with.
 *
 * @return CPSReview
 */
function cps_review_create($values = array()) {
  return entity_get_controller('cps_review')->create($values);
}

/**
 * Determine if the operation for the entity can be accessed.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'. It may also be any CPS review operation such as 'publish' or
 *   'unpublish'.
 * @param string|CPSReview $entity
 *   (optional) an entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param stdClass|null $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 *
 * @see entity_access()
 */
function cps_review_access($op, $entity = NULL, $account = NULL) {
  return entity_get_controller('cps_review')->access($op, $entity, $account);
}

/**
 * Callback for getting content properties.
 *
 * @param CPSReview $review
 *   The CPS review entity to get properties for.
 * @param array $options
 *   The options provided by the caller.
 * @param $name
 *   The name of the property.
 *
 * @return mixed
 *   The result of the property.
 */
function cps_review_metadata_get_properties(CPSReview $review, array $options, $name) {
  switch ($name) {
    case 'is_new':
      return empty($review->review_id) || !empty($review->is_new);

    case 'edit_url':
      $options['query'] += drupal_get_destination();
      return url('cps-review/' . $review->review_id. '/edit', $options);

    case 'delete_url':
      $options['query'] += drupal_get_destination();
      return url('cps-review/' . $review->review_id . '/delete', $options);

    case 'author':
      return !empty($review->uid) ? $review->uid : drupal_anonymous_user();

    case 'operations':
      $build = cps_review_get_operations($review);
      return drupal_render($build);
  }
}

/**
 * Fetch a renderable array of operations available for the CPS review.
 *
 * @param CPSReview $review
 *   The review to get operations for.
 *
 * @return array
 *   A drupal Renderable array.
 */
function cps_review_get_operations(CPSReview $review) {
  $uri = $review->uri();
  $operations = array(
    '#type' => 'container',
    '#attributes' => array('class' => 'cps-review-operations'),
    'site' => array(
      '#theme' => 'link',
      '#text' => t('view site'),
      '#path' => '<front>',
      '#options' => array(
        'query' => array('review_id' => $review->review_id),
        'html' => TRUE,
        'attributes' => array('class' => array('cps-review-operation'))
      ),
      '#access' => user_access('view CPS reviews') || user_access('administer CPS reviews'),
    ),
    'view' => array(
      '#theme' => 'link',
      '#text' => t('view'),
      '#path' => $uri['path'],
      '#options' => array(
        'html' => TRUE,
        'attributes' => array('class' => array('cps-review-operation'))
      ),
      '#access' => entity_access('view', 'cps_review', $review) && request_path() != $uri['path'],
    ),
    'edit' => array(
      '#theme' => 'link',
      '#text' => t('edit'),
      '#path' => $uri['path'] . '/edit',
      '#options' => array(
        'query' => drupal_get_destination(),
        'html' => TRUE,
        'attributes' => array('class' => array('cps-review-operation'))
      ),
      '#access' => entity_access('update', 'cps_review', $review),
    ),
    'delete' => array(
      '#theme' => 'link',
      '#text' => t('delete'),
      '#path' => $uri['path'] . '/delete',
      '#options' => array(
        'query' => drupal_get_destination(),
        'html' => TRUE,
        'attributes' => array('class' => array('cps-review-operation'))
      ),
      '#access' => entity_access('delete', 'cps_review', $review),
    ),
    'publish' => array(
      '#theme' => 'link',
      '#text' => t('publish'),
      '#path' => $uri['path'] . '/publish',
      '#options' => array(
        'query' => drupal_get_destination(),
        'html' => TRUE,
        'attributes' => array('class' => array('cps-review-operation'))
      ),
      '#access' => entity_access('publish', 'cps_review', $review),
    ),
    'unpublish' => array(
      '#theme' => 'link',
      '#text' => t('unpublish'),
      '#path' => $uri['path'] . '/unpublish',
      '#options' => array(
        'query' => drupal_get_destination(),
        'html' => TRUE,
        'attributes' => array('class' => array('cps-review-operation'))
      ),
      '#access' => entity_access('unpublish', 'cps_review', $review),
    ),
  );
  $operations['#attached']['css'][] = drupal_get_path('module', 'cps_review') . '/css/cps-review.css';

  drupal_alter('cps_review_operations', $operations, $review);
  return $operations;
}

/**
 * Shows threaded reviews.
 *
 * @param CPSReview $entity
 *   The entity to get threaded reviews for.
 *
 * @return array
 *   Renderable array with the threaded reviews - if any.
 */
function cps_review_get_thread(CPSReview $entity) {
  $entity_query = new EntityFieldQuery();
  $results = $entity_query
    ->entityCondition('entity_type', 'cps_review')
    ->propertyCondition('parent_review_id', $entity->review_id)
    ->propertyCondition('status', 1)
    ->propertyOrderBy('created', 'ASC')
    ->execute();

  if (empty($results['cps_review'])) {
    return array();
  }

  $entities = entity_load('cps_review', array_keys($results['cps_review']));
  $build = entity_view('cps_review', $entities);

  return $build;
}
