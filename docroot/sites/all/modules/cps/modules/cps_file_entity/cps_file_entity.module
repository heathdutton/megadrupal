<?php
/**
 * @file
 * Core module to add CPS support to file entities.
 */

/**
 * Implements hook_entity_info_alter().
 */
function cps_file_entity_entity_info_alter(&$info) {
  $info['file']['cps'] = TRUE;
}

/**
 * Implements hook_file_entity_access().
 */
function cps_file_entity_file_entity_access($op, $file, $account) {
  // NOTE: This function never gets called if the user has 'bypass file access'
  // permission. Be sure to check that when debugging why this doesn't work!
  if ($op != 'download' && !cps_can_edit_entities($op, 'file', $file)) {
    return FILE_ENTITY_ACCESS_DENY;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function cps_file_entity_module_implements_alter(&$implementations, $hook) {
  // In most implementations we need to act ahead of file_* everything, but
  // in the file_entity_edit form, we need to act after file_admin so that
  // our checkbox doesn't disappear.

  // We can't just use the specific form because drupal_alter makes sure that
  // everything stays in the order of the 'main' hook, in this case form_alter.
  if (($hook == 'form_file_entity_edit_alter' || $hook == 'form_alter') && isset($implementations['cps_file_entity'])) {
    unset($implementations['cps_file_entity']);

    $position = 1;
    foreach ($implementations as $module => $group) {
      if ($module == 'file_entity_revisions') {
        break;
      }
      $position++;
    }

    // Now that we know the position,
    // slice the array in two and then add together with our entry.
    $implementations = array_slice($implementations, 0, $position) + array('cps_file_entity' => FALSE) + array_slice($implementations, $position);
  }
}

/**
 * Implements hook_cps_can_entity_be_tracked().
 */
function cps_file_entity_cps_can_entity_be_tracked($entity_type, $entity) {
  // Do not let CPS track temporary files.
  if ($entity_type == 'file' && empty($entity->status)) {
    return FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For form_file_entity_edit.
 */
function cps_file_entity_form_file_entity_edit_alter(&$form, &$form_state) {
  $form['options']['new_revision']['#access'] = FALSE;

  $changeset_id = cps_get_current_changeset();
  $file = $form_state['file'];

  // If there is not currently a revision set up for this changeset,
  // force the flag to be true so file_entity_revisions knows to copy
  // the file.
  $form['options']['new_revision']['#value'] = !cps_is_entity_in_changeset('file', $file, $changeset_id);;

  if (empty($form_state['input'])) {
    $warning = cps_changeset_edit_warning('file', $file);
    if ($warning) {
      drupal_set_message($warning, 'warning');
    }
  }

}

/**
 * Implements hook_menu()
 */
function cps_file_entity_menu() {
  $items = array();

  $items['file/%file/history'] = array(
    'title' => 'History',
    'page callback' => 'cps_revisions_page',
    'page arguments' => array('file', 1),
    'access arguments' => array('create files'),
    'weight' => 2,
    'file' => 'includes/admin.inc',
    'file path' => drupal_get_path('module', 'cps'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['file/%file/history/%cps_changeset_optional/%cps_changeset_optional'] = array(
    'title' => 'Compare revisions',
    'page callback' => 'cps_diff_page',
    'page arguments' => array('file', 1, 3, 4),
    'access arguments' => array('create files'),
    'file' => 'includes/admin.inc',
    'file path' => drupal_get_path('module', 'cps'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function cps_file_entity_admin_paths() {
  $paths = array(
    'file/*/history' => TRUE,
    'file/*/history/*' => TRUE,
  );
  return $paths;
}
