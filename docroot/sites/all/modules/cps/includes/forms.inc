<?php
/**
 * @file
 * Form definitions for admin forms.
 */

/**
 * Form callback; changeset preview form.
 */
function cps_changeset_preview_form($form, &$form_state) {
  $changeset_id = cps_get_current_changeset(TRUE);

  if ($changeset_id == CPS_PUBLISHED_CHANGESET) {
    $changeset_state = CPS_LIVE_STATUS;
  }
  else {
    $changeset = cps_changeset_load($changeset_id);
    $changeset_state = $changeset->status;
    $changeset_mine = $changeset->uid == $GLOBALS['user']->uid;
  }

  $form['#attached']['css'][] =  drupal_get_path('module', 'cps') . '/css/cps.css';

  $form['#type'] = 'fieldset';
  $form['#title'] = t('Site version:');
  $form['#description'] = t('Preview the site in the context of this site version.');

  $form['changeset_id'] = array(
    '#type' => 'select',
    '#title' => t('Site version'),
    '#options' => cps_get_changesets(),
    '#default_value' => $changeset_id,
  );

  if (!empty($changeset) && entity_access('view', 'cps_changeset', $changeset)) {
    $uri = $changeset->uri();
    $form['configure'] = array(
      '#markup' => l(t('Site version'), $uri['path'], array(
        'attributes' => array(
          'class' => array('configure'),
          'title' => t('Manage site version'),
        ))),
    );
  }

  if ($changeset_state == CPS_LIVE_STATUS && entity_access('create', 'cps_changeset')) {
    $form['new'] = array(
      '#markup' => l(t('Create'), 'admin/structure/changesets/add', array(
        'query' => drupal_get_destination(),
        'attributes' => array(
          'class' => array('new'),
          'title' => t('Add new site version'),
        ))),
    );
  }

  $state_class = 'cps-preview-form--' . drupal_html_class($changeset_state);
  $mine_class = !empty($changeset_mine) ? 'cps-changeset--mine' : 'cps-changeset--not-mine';
  $form['#prefix'] = '<div class="cps-preview-form ' . $state_class . ' ' . $mine_class . ' clearfix">';
  $form['#suffix'] = '<span class="cps-preview-form-status">' . t('Status:  @changeset_status', array('@changeset_status' => ucfirst($changeset_state))) . '</span></div>';
  return $form;
}

/**
 * Basic edit form for the content entity.
 *
 * The entity being edited should be stored in $form_state['entity']
 * when this form is built.
 *
 * The name of this form is autogenerated as $entity_type . '_edit_form'.
 */
function cps_changeset_edit_form($form, &$form_state) {
  $entity = $form_state['entity'];

  $form['info']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('This will appear in the administrative interface to easily identify it.'),
    '#default_value' => $entity->name,
    '#required' => TRUE,
  );

  $form['info']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $entity->description,
  );
  
  $form['info']['lock_in_select'] = array(
    '#type' => 'checkbox',
    '#title' => t('Lock in select'),
    '#description' => t('If checked all users will see this site version in the site version selector bar while unpublished.'),
    '#default_value' => $entity->lock_in_select,
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validate callback for the content entity.
 */
function cps_changeset_edit_form_validate($form, &$form_state) {
}

/**
 * Submit callback for the content entity.
 */
function cps_changeset_edit_form_submit($form, &$form_state) {
  $entity = $form_state['entity'];
  $entity->name = $form_state['values']['name'];
  $entity->description = $form_state['values']['description'];
  $entity->lock_in_select = $form_state['values']['lock_in_select'];

  if (!empty($entity->is_new)) {
    // Automatically move us to the new changeset context.
    cps_set_current_changeset($entity->changeset_id);

    // If there is a destination, we have to remove the changeset ID from it.
    if (!empty($_GET['destination'])) {
      // We used drupal_get_destination() before because it may not have been
      // calculated; to directly modify it we will then need to get the
      // (now cached) static.
      $_GET['destination'] = preg_replace("/changeset_id=[^&]+/", 'changeset_id=' . $entity->changeset_id, $_GET['destination']);
    }
  }
}

/**
 * Form callback to display the publish changeset form.
 */
function cps_changeset_publish_changeset_form($form, &$form_state) {
  $form['warning'] = array(
    '#markup' => '<div class="publish-warning">' . t('Are you sure you want to publish this? This action cannot be undone!') . '</div>',
  );

  $form['actions']['publish'] = array(
    '#type' => 'submit',
    '#value' => t('Publish'),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#limit_validation_errors' => array(),
    '#submit' => array('cps_changeset_publish_changeset_form_cancel'),
  );

  return $form;
}

/**
 * Submit handler to cancel the form.
 */
function cps_changeset_publish_changeset_form_cancel($form, &$form_state) {
  $form_state['redirect'] = $form_state['entity']->uri();
}

/**
 * Validate handler for the publish changeset form.
 */
function cps_changeset_publish_changeset_form_validate($form, &$form_state) {
  if (!lock_may_be_available('cps_process')) {
    form_set_error('publish', t('CPS is processing another site version, please try again in a few seconds.'));
  }
}

/**
 * Submit handler for the publish changeset form.
 */
function cps_changeset_publish_changeset_form_submit($form, &$form_state) {
  // Account for race conditions between validate and submit. Calling
  // form_set_error() in a submit handler is usually not recommended, but this
  // is a special case.
  if (!lock_may_be_available('cps_process')) {
    form_set_error('publish', t('CPS is processing another site version, please try again in a few seconds.'));
    return;
  }
  $queue = DrupalQueue::get('cps_publish');
  $queue->createItem(array('changeset_id' => $form_state['entity']->identifier()));
  $query = array(
    'cps_publish' => 1,
    'token' => drupal_get_token($form_state['entity']->identifier()),
    'changeset_id' => $form_state['entity']->identifier(),
  );
  // Reset process notification.
  cps_notify_progress($form_state['entity']->identifier(), 0, 0);
  $uri = $form_state['entity']->uri();
  $form_state['redirect'] = array($uri['path'] . '/status', array('query' => $query));
}


// -----------------------------------------------------------------------
// Unpublish form and handlers.

/**
 * Form callback to display the unpublish changeset form.
 */
function cps_changeset_revert_changeset_form($form, &$form_state) {
  $entity = $form_state['entity'];
  $form_state['previous'] = cps_changeset_load($entity->getPreviousChangeset());

  $form['warning'] = array(
    '#markup' => '<div class="unpublish-warning">' . t('<p>Are you sure you want to unpublish this?</p><p> This will revert content to the previous site version "%changeset".</p>', array('%changeset' => $form_state['previous']->name)) . '</div>',
  );

  $form['actions']['revert'] = array(
    '#type' => 'submit',
    '#value' => t('Revert'),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#limit_validation_errors' => array(),
    // We re-use the publish_changeset_form_cancel here because all it does is redirect.
    '#submit' => array('cps_changeset_publish_changeset_form_cancel'),
  );

  return $form;
}

/**
 * Form validate callback for the unpublish changeset form.
 */
function cps_changeset_revert_changeset_form_validate($form, &$form_state) {
  if (!lock_may_be_available('cps_process')) {
    form_set_error('revert', t('CPS is processing another site version, please try again in a few seconds.'));
  }
}

/**
 * Submit handler for the revert changeset form.
 */
function cps_changeset_revert_changeset_form_submit($form, &$form_state) {
  // Account for race conditions between validate and submit. Calling
  // form_set_error() in a submit handler is usually not recommended, but this
  // is a special case.
  if (!lock_may_be_available('cps_process')) {
    form_set_error('revert', t('CPS is processing another site version, please try again in a few seconds.'));
    return;
  }
  $queue = DrupalQueue::get('cps_revert');
  $queue->createItem(array('changeset_id' => $form_state['entity']->identifier()));
  $query = array(
    'cps_revert' => 1,
    'token' => drupal_get_token($form_state['entity']->identifier()),
    'changeset_id' => $form_state['entity']->identifier(),
  );
  // Reset process notification.
  cps_notify_progress($form_state['entity']->identifier(), 0, 0);
  $uri = $form_state['entity']->uri();
  $form_state['redirect'] = array($uri['path'] . '/status', array('query' => $query));
}
