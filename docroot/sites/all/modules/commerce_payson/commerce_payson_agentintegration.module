<?php

/**
 * @file
 * Implements Payson Agent Integration for use with Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payson_agentintegration_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['payson_agentintegration'] = array(
    'base' => 'commerce_payson_agentintegration',
    'title' => t('Payson Agent Integration'),
    'short_title' => t('Payson'),
    'description' => t('Payson Agent Integration'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payson_agentintegration_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'email' => '',
    'agentid' => '',
    'md5' => '',
    'currency_code' => 'SEK',
    'server' => 'testagent',
    'guarantee' => 1,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Payson e-mail address'),
    '#description' => t('The e-mail address you use for the Payson account you want to receive payments.'),
    '#default_value' => $settings['email'],
    '#required' => TRUE,
    '#element_validate' => array('_commerce_payson_agentintegration_email_validate'),
  );

  $form['agentid'] = array(
    '#type' => 'textfield',
    '#title' => t('Agent-ID'),
    '#description' => t('Your Payson Agent-ID.'),
    '#default_value' => $settings['agentid'],
    '#required' => TRUE,
    '#maxlength' => 5,
  );

  $form['md5'] = array(
    '#type' => 'textfield',
    '#title' => t('MD5-Key'),
    '#description' => t('Your Payson MD5-key.'),
    '#default_value' => $settings['md5'],
    '#required' => TRUE,
    '#maxlength' => 36,
  );

  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => array(
      'EUR' => 'EUR',
      'SEK' => 'SEK',
    ),
    '#default_value' => $settings['currency_code'],
  );

  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Payson transaction url'),
    '#options' => array(
      'testagent' => t('Testagent - Used for testing purposes'),
      'merchant' => t('Merchant - Used for live transactions'),
    ),
    '#default_value' => $settings['server'],
  );

  $form['guarantee'] = array(
    '#type' => 'radios',
    '#title' => t('Payson guarantee'),
    '#description' => l(t('Read more about Payson Guarantee here'), 'https://www.payson.se/betals%C3%A4tt/paysongaranti', array('attributes' => array('target' => '_blank'))),
    '#options' => array(
      1 => t('Do not offer Payson guarantee'),
      2 => t('Offer Payson guarantee'),
    ),
    '#default_value' => $settings['guarantee'],
  );

  return $form;
}

/**
 * Validates the email address form item.
 */
function _commerce_payson_agentintegration_email_validate($element, &$form_state, $form) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please provide a valid email address2.'));
  }
}

/**
 * Payment method callback: redirect form.
 */
function commerce_payson_agentintegration_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['email']) || empty($payment_method['settings']['agentid']) || empty($payment_method['settings']['md5'])) {
    drupal_set_message(t('Payson Agent Integration is not properly set up.'), 'error');
    return array();
  }

  // Return an error if currency code is not allowed by Payson.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  if ($currency_code !== 'EUR' and $currency_code !== 'SEK') {
    drupal_set_message(t('Payson can only process orders in EUR or SEK. Please contact a site administrator to solve this problem.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  $settings = $payment_method['settings'] + $settings;

  // Make the settings alterable.
  drupal_alter('commerce_payson_agentintegration_settings', $settings, $order);

  return commerce_payson_agentintegration_order_form($form, $form_state, $order, $settings);
}

/**
 * Validates the request after payment and make sure it's coming from Payson.
 *
 * @param object $order
 *   The order object trying to be validated
 *
 * @param array $payment_method
 *   Information about the payment method
 *
 * @return Boolean
 *   TRUE on success, otherwise FALSE
 */
function commerce_payson_agentintegration_redirect_form_validate($order, $payment_method) {
  if (isset($_REQUEST['MD5'], $_REQUEST['OkURL'], $_REQUEST['Paysonref'])) {
    $secret_md5 = $payment_method['settings']['md5'];
    $ok_url = $_REQUEST['OkURL'];
    $payson_ref = $_REQUEST['Paysonref'];

    $hash = md5(htmlspecialchars($ok_url . $payson_ref) . $secret_md5);

    if ($hash === $_REQUEST['MD5']) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Redirects the user after submitting the payment form.
 *
 * @param object $order
 *   The order object 
 *
 * @param array $payment_method
 *   Information about the payment method
 */
function commerce_payson_agentintegration_redirect_form_submit($order, $payment_method) {
  commerce_payson_agentintegration_transaction($order, $payment_method, $_REQUEST['Paysonref']);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param object $order
 *   The order object the payment applies to.
 *
 * @param array $payment_method
 *   The payment method instance used to charge this payment.
 *
 * @param string $remote_id
 *   Unique id from Payson
 */
function commerce_payson_agentintegration_transaction($order, $payment_method, $remote_id) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $transaction = commerce_payment_transaction_new('payson_agentintegration', $wrapper->order_id->value());
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $wrapper->commerce_order_total->amount->value();
  $transaction->currency_code = $wrapper->commerce_order_total->currency_code->value();
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->remote_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->remote_id = $remote_id;
  $transaction->message = t('Email: @email');
  $transaction->message_variables = array('@email' => $wrapper->mail->value());

  commerce_payment_transaction_save($transaction);
}

/**
 * Builds a Payson Agent Integration payment form from an order object.
 *
 * @param object $order
 *   The fully loaded order being paid for.
 * @param array $settings
 *   An array of settings used to build out the form, including:
 *   - email: The email address of the set up Payson Agent Integration
 *   - agentid: The 5 digit Payson Agent ID of the set up 
 *     Payson Agent Integration
 *   - md5: The md5 hash string of the set up Payson Agent Integration
 *   - currency_code: the Payson currency code to use for this payment
 *   - server: Which url to direct the request to
 *   - guarantee: Whether Payson Guarantee should be offered or not
 *   - cancel_return: the URL Payson should send the user to on cancellation
 *   - return: the URL Payson should send the user to on successful payment
 *
 * @return array
 *   A renderable form array.
 */
function commerce_payson_agentintegration_order_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Calculate cost and store in variable.
  $cost = number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 2, ',', '.');

  // Calculate the md5 hash.
  $md5 = md5($settings['email'] . ":" . $cost . ":" . '0' . ":" .
    $settings['return'] . ":" . $settings['guarantee'] . $settings['md5']);

  // Build the data array that will be used as hidden values
  // in the form and later sent to Payson.
  $data = array(
    'BuyerEmail' => $order->mail,
    'SellerEmail' => $settings['email'],
    'RefNr' => $order->order_number,
    'Description' => t('Order @order_number at @store', array(
      '@order_number' => $order->order_number,
      '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))
    ),
    'AgentId' => $settings['agentid'],
    'GuaranteeOffered' => $settings['guarantee'],
    'Cost' => $cost,
    'ExtraCost' => 0,
    'OkUrl' => $settings['return'],
    'MD5' => $md5,
  );

  // Make the data alterable.
  drupal_alter('commerce_payson_agentintegration_data', $data, $order);

  // The url to send the request to.
  $form['#action'] = commerce_payson_agentintegration_server_url($settings['server']);

  foreach ($data as $name => $value) {
    if (!empty($value) || $name == 'ExtraCost') {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Payson'),
  );

  return $form;
}

/**
 * Return server url.
 *
 * Returns the url that is selected for payment in the 
 * Payson Agent Integration payment method settings.
 *
 * @param string $server
 *   The server that is selected for payment. Either testagent or merchant.
 *
 * @return string
 *   A string containing the url to the server that should process the order.
 */
function commerce_payson_agentintegration_server_url($server) {
  if ($server == 'testagent') {
    return 'https://www.payson.se/testagent/default.aspx';
  }
  else {
    return 'https://www.payson.se/merchant/default.aspx';
  }
}
