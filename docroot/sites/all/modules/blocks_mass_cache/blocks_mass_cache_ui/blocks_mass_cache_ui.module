<?php
/**
 * @file
 * Blocks Mass cache admin UI.
 */

/**
 * Implements hook_menu().
 */
function blocks_mass_cache_ui_menu() {
  // Permissions and role forms.
  $items['admin/structure/block/mass-cache'] = array(
    'title' => 'Mass Cache',
    'description' => 'Settings for Blocks Mass Cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blocks_mass_cache_ui_admin_blocks'),
    'access arguments' => array('administer site configuration'),
    'file' => 'blocks_mass_cache_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function blocks_mass_cache_ui_theme() {
  return array(
    'blocks_mass_cache_ui_admin_blocks' => array(
      'render element' => 'form',
      'file' => 'blocks_mass_cache_ui.admin.inc',
    ),
  );
}

/**
 * Helper to return a list of blocks.
 *
 * @return array
 *   List of blocks.
 */
function _blocks_mass_cache_block_list() {
  global $theme_key;
  $block_list = array();

  // Populate all blocks for the current theme.
  module_load_include('inc', 'block', 'block.admin');
  drupal_theme_initialize();

  foreach (block_admin_display_prepare_blocks($theme_key) as $block) {
    $block_list[$block['module']][$block['delta']] = $block;
  }
  ksort($block_list);

  return $block_list;
}

/**
 * Helper to generate a cache cid.
 *
 * @param array
 *   Block.
 *
 * @return string
 *    Block cid.
 */
function _blocks_mass_cache_get_bid($block = array()) {
  return $block['module'] . '-' . $block['delta'];
}

/**
 * Get the list of blocks with cache settings.
 *
 * @param $cache_types
 *   An array of Drupal cache types.
 *
 * @return array
 *   An array of blocks.
 */
function _blocks_mass_cache_blocks_cache_config($cache_types = array()) {
  $blocks_cache_config = array();
  $block_storage = variable_get('blocks_mass_cache_storage', array());
  $block_list = _blocks_mass_cache_block_list();

  foreach ($cache_types as $cache_id => $name) {
    foreach ($block_list as $block_group) {
      foreach ($block_group as $block) {
        $cache_type = $block['cache'];
        $bid = _blocks_mass_cache_get_bid($block);
        $blocks_cache_config[$cache_id][$bid] = $cache_type;

        if (isset($block_storage[$bid])) {
          $block_cache_config = $block_storage[$bid];

          // Check if the cache is combined. i.e. Role + Page / User + Page.
          if ($block_cache_config > 0) {
            if ($block_cache_config & DRUPAL_CACHE_PER_ROLE) {
              $blocks_cache_config[DRUPAL_CACHE_PER_ROLE][$bid] = DRUPAL_CACHE_PER_ROLE;
            }
            if ($block_cache_config & DRUPAL_CACHE_PER_USER) {
              $blocks_cache_config[DRUPAL_CACHE_PER_USER][$bid] = DRUPAL_CACHE_PER_USER;
            }
            if ($block_cache_config & DRUPAL_CACHE_PER_PAGE) {
              $blocks_cache_config[DRUPAL_CACHE_PER_PAGE][$bid] = DRUPAL_CACHE_PER_PAGE;
            }
          }
          $blocks_cache_config[$cache_type][$bid] = $block_cache_config;
        }

        // If the block has no settings, set to No cache.
        if (!isset($blocks_cache_config[$cache_type][$bid])) {
          $blocks_cache_config[$cache_type][$bid] = "-1";
        }
      }
    }
  }

  return $blocks_cache_config;
}

/**
 * Get a list of cache types.
 */
function _blocks_mass_cache_get_cache_types() {
  $cache_types = array(
    DRUPAL_NO_CACHE => 'No Cache',
    DRUPAL_CACHE_CUSTOM => 'Custom',
    DRUPAL_CACHE_PER_ROLE => 'Per Role',
    DRUPAL_CACHE_PER_USER => 'Per User',
    DRUPAL_CACHE_PER_PAGE => 'Per Page',
    DRUPAL_CACHE_GLOBAL => 'Global',
  );

  return $cache_types;
}
