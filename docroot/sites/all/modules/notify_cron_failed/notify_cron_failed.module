<?php
/**
 * @file
 * Main file for the Notify Cron Failed module, which will send an email to the site administer when cron run will be failed.
 */

/**
 * Implements hook_help().
 */
function notify_cron_failed_help($path, $arg) {
  if ($path == 'admin/help#notify_cron_failed') {
    if (current_path() != 'admin/help/notify_cron_failed') {
      // Because system_modules() executes hook_help() for each module to 'test'
      // if they will return anything, but not actually display it, we want to
      // return a TRUE value if this is not actually the help page.
      //return TRUE;
    }
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('It is a simple utility module which will notify site administer about the cron failed. Whenever cron run will be failed it sends an email to the site administer.') . '</p>';
    $output .= '<h3>' . t('Settings') . '</h3>';
    $output .= '<dl>';
    $output .= '<dt>' . t('<strong>Client ID:</strong>') . '</dt>';
    $output .= '<dd>' . t('Write your own linking rules.<br/><b>Example:</b> Mysite.com related websites only! (Other none Mysite.com related websites will be removed) We are constantly looking for new perm Mysite.com link exchanges.') . '</dd>';
    $output .= '</dl>';
    return $output;
  }
}

/**
 * Implements hook_permission().
 */
function notify_cron_failed_permission() {
  return array(
    'administer notify cron failed' => array(
      'title' => t('Administer notify cron failed'),
      'description' => t('Allows a user to configure and administrate notify cron failed.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function notify_cron_failed_menu() {
  $items['admin/config/system/notify-cron-failed'] = array(
    'title' => 'Notify Cron Failed Settings',
    'description' => 'Configure notify cron run failed module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('notify_cron_failed_form'),
    'access arguments' => array('administer notify cron failed'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file' => 'notify_cron_failed.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function notify_cron_failed_cron() {
  variable_set('notify_cron_failed_status', 0);
}

/**
 * Implements hook_int().
 */
function notify_cron_failed_init() {
  $last_cron_timestamp = variable_get('cron_last');
  $timestamp = time();
  $cron_email_alert_when = variable_get('notify_cron_failed_when');
  $datediff = $timestamp - $last_cron_timestamp;
  $no_of_days = floor($datediff/(60*60*24));
  $cron_email_alert_status = variable_get('notify_cron_failed_status');
  if ($no_of_days > $cron_email_alert_when) {
    if ($cron_email_alert_status === 0) {
      $params = array(
        'body' => t(variable_get('notify_cron_failed_email_subject')),
        'subject' => t(variable_get('notify_cron_failed_email_message')),
      );
      $to = variable_get('notify_cron_failed_email_address');
      $from = variable_get('notify_cron_failed_email_address');
      $message = drupal_mail('notify_cron_failed', 'notify_cron_failed_key', $to, language_default(), $params, $from, TRUE);
      variable_set('notify_cron_failed_status', 1);
    }
  }
}

/**
 * Implements hook_mail().
 */
function notify_cron_failed_mail($key, &$message, $params) {
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );
  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
}