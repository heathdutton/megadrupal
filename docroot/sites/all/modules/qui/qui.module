<?php
/**
 * @file
 * Main module file.
 */

module_load_include('inc', 'qui', 'qui');
module_load_include('inc', 'qui', 'qui.forms');
module_load_include('inc', 'qui', 'qui.formatters');

/**
 * Implements hook_menu().
 */
function qui_menu() {
  $items['admin/reports/qui'] = array(
    'title' => 'Query UI',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Build queries to generate and save reports.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qui_report_list_form'),
    'access arguments' => array('view qui reports listing'),
  );
  $items['admin/reports/qui/manage/%qui_report/view'] = array(
    'title' => 'View Report',
    'type' => MENU_CALLBACK,
    'page callback' => 'qui_view_report_callback',
    'page arguments' => array(4),
    'access arguments' => array('view qui reports listing'),
  );
  $items['qui/reports/view/%qui_report/%qui_formatter'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'qui_view_formatted_report_callback',
    'page arguments' => array(3, 4),
    'access callback' => 'qui_view_formatted_report_access',
    'access arguments' => array(3, 4),
  );
  $items['qui/reports/download/%qui_report/%qui_formatter'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'qui_download_formatted_report_callback',
    'page arguments' => array(3, 4),
    'access callback' => 'qui_view_formatted_report_access',
    'access arguments' => array(3, 4),
  );
  $items['admin/reports/qui/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qui_admin_settings_form'),
    'access arguments' => array('administer qui settings'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * @see qui_report_access()
 */
function qui_permission() {
  return array(
    'administer qui settings' => array(
      'title' => t('Administer Settings'),
      'description' => t('Change settings.'),
    ),
    'create new qui reports' => array(
      'title' => t('Create New Reports'),
      'description' => t('User can create new reports.'),
    ),
    'edit own qui reports' => array(
      'title' => t('Edit Own Reports'),
      'description' => t('User can edit their own reports that they created.'),
    ),
    'edit any qui report' => array(
      'title' => t('Edit Any Report'),
      'description' => t('User can edit any report in the system.'),
    ),
    'delete own qui reports' => array(
      'title' => t('Delete Own Reports'),
      'description' => t('User can delete reports that they have created.'),
    ),
    'delete any qui report' => array(
      'title' => t('Delete Any Report'),
      'description' => t('User can delete any report in the system.'),
    ),
    'view qui reports listing' => array(
      'title' => t('View Listing Page'),
      'description' => t('User can view the reports listing page. Use in conjunction with view own/any reports.'),
    ),
    'view own qui reports' => array(
      'title' => t('View Own Reports'),
      'description' => t('User can view their own reports in any format.'),
    ),
    'view any qui report' => array(
      'title' => t('View Any Report'),
      'description' => t('User can view any report regardless of report-level permissions.'),
      'warning' => t('Warning: This will bypass any report-level permissions. Give to trusted roles only.'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function qui_entity_info() {
  return array(
    'qui_report' => array(
      'label' => t('QUI Report'),
      'label callback' => 'qui_report_entity_label_callback',
      'uri callback' => 'qui_report_uri',
      'entity class' => 'QuiReport',
      'controller class' => 'QuiReportController',
      'base table' => 'qui_reports',
      'entity keys' => array('id' => 'id', 'name' => 'machine_name', 'label' => 'name'),
      'load hook' => 'qui_report_load',
      'static cache' => TRUE,
      'module' => 'qui',
      'access callback' => 'qui_report_access',
      'view modes' => _qui_get_formatter_view_modes(),
      'exportable' => TRUE,
      'admin ui' => array(
        'path' => 'admin/reports/qui',
        'controller class' => 'EntityDefaultUIController',
        'menu wildcard' => '%qui_report',
      ),
    ),
  );
}

/**
 * Gets the default URI for a QuiReport.
 *
 * @see QuiReport::defaultUri()
 */
function qui_report_uri(QuiReport $report) {
  return $report->defaultUri();
}

/**
 * Loads multiple QUI Reports.
 *
 * @see entity_load()
 */
function qui_report_load_multiple($ids = array(), $conditions = array()) {
  return entity_load('qui_report', $ids, $conditions);
}

/**
 * Loads multiple QUI Reports.
 *
 * @see entity_load()
 */
function qui_report_load_multiple_by_name($ids = array(), $conditions = array()) {
  return entity_load_multiple_by_name('qui_report', $ids, $conditions);
}

/**
 * Loads a report from the database by machine_name.
 *
 * @see qui_report_load_multiple()
 */
function qui_report_load($id, $conditions = array()) {
  $results = qui_report_load_multiple_by_name(array($id));
  return array_shift($results);
}

/**
 * Create a new QUI Report.
 *
 * @see QuiReportController::create()
 */
function qui_report_create($values = array()) {
  return entity_get_controller('qui_report')->create($values);
}

/**
 * Save a QUI Report to the database.
 *
 * @see QuiReportController::save()
 */
function qui_report_save(QuiReport $report) {
  return $report->save();
}

/**
 * Delete a report.
 *
 * @param int $id
 *   DQUI Report ID.
 *
 * @return mixed
 *   Returns TRUE if the report is deleted.
 */
function qui_report_delete($id) {
  entity_delete('qui_report', $id);
}

/**
 * Checks if this user has access to certain operations.
 *
 * @see qui_permission()
 */
function qui_report_access($op, $report, $account = NULL, $entity_type = 'qui_report') {
  if (!$account) {
    global $user;
    $account = $user;
  }
  if ($account->uid == 1) {
    return TRUE;
  }
  switch ($op) {
    case 'edit':
      if (user_access('edit any qui report', $account)) {
        return TRUE;
      }
      if (user_access('edit own qui reports', $account) && $report->author_uid == $account->uid) {
        return TRUE;
      }
      break;

    case 'view':
      if (user_access('view any qui report', $account)) {
        return TRUE;
      }
      if (user_access('view own qui reports', $account) && $report->author_uid == $account->uid) {
        return TRUE;
      }
      if ($report->settings->allowed_roles) {
        foreach ((array) $account->roles as $rid => $role) {
          if (in_array($rid, $report->settings->allowed_roles)) {
            // User has an allowed role.
            return TRUE;
          }
        }
      }
      break;

    case 'create':
      if (user_access('create new qui reports', $account)) {
        return TRUE;
      }
      break;

    case 'delete':
      if (user_access('delete any qui report', $account)) {
        return TRUE;
      }
      if (user_access('delete own qui reports', $account) && $report->author_uid == $account->uid) {
        return TRUE;
      }
      break;

  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function qui_theme() {
  $formatters = array();
  foreach (qui_get_formatters() as $key => $formatter) {
    $formatters['qui_formatter_' . $key]['variables'] = array('results' => NULL, 'report' => NULL);
    foreach ($formatter as $fkey => $value) {
      $formatters['qui_formatter_' . $key][$fkey] = $value;
    }
  }
  $formatters['qui_create_report_form'] = array(
    'render element' => 'form',
    'file' => 'qui.forms.inc',
  );
  return $formatters;
}

/**
 * Get entity view modes from formatters provided.
 */
function _qui_get_formatter_view_modes() {
  $view_modes = array();
  $formatters = qui_get_formatters();
  foreach ($formatters as $key => $f) {
    $view_modes[$key] = array(
      'label' => $f['name'],
      'custom settings' => FALSE,
    );
  }
  return $view_modes;
}

/**
 * Gets formatters from all modules that implement hook_qui_formatters_info().
 *
 * @return array
 *   Array of formatters.
 */
function qui_get_formatters() {
  $formatters = & drupal_static(__FUNCTION__, array());
  if (!empty($formatters)) {
    return $formatters;
  }
  foreach (module_implements('qui_formatters_info') as $module) {
    $hook = "{$module}_qui_formatters_info";
    $formatters = array_merge($formatters, $hook());
  }
  return $formatters;
}

/**
 * Implements hook_qui_formatters_info().
 */
function qui_qui_formatters_info() {
  return array(
    'table' => array(
      'name' => t('Table'),
      'description' => t('Format data in an HTML table'),
      'function' => 'qui_formatter_table',
      'plain' => FALSE,
      'download headers' => array('Content-Type' => 'text/html'),
      'download extension' => 'html',
    ),
    'csv' => array(
      'name' => t('CSV'),
      'description' => t('Format data in CSV format'),
      'function' => 'qui_formatter_csv',
      'headers' => array('Content-Type' => 'text/plain'),
      'download headers' => array('Content-Type' => 'text/csv'),
      'download extension' => 'csv',
      'plain' => TRUE,
    ),
    'tsv' => array(
      'name' => t('TSV'),
      'description' => t('Format data in Tab delimited format'),
      'function' => 'qui_formatter_tsv',
      'headers' => array('Content-Type' => 'text/plain'),
      'plain' => TRUE,
    ),
    'pipe' => array(
      'name' => t('Pipe'),
      'description' => t('Format data in Pipe delimited format'),
      'function' => 'qui_formatter_pipe',
      'headers' => array('Content-Type' => 'text/plain'),
      'plain' => TRUE,
    ),
    'json' => array(
      'name' => t('JSON'),
      'description' => t('Format data in JSON format'),
      'function' => 'qui_formatter_json',
      'headers' => array('Content-Type' => 'application/json'),
      'download extension' => 'json',
      'plain' => TRUE,
    ),
    'php' => array(
      'name' => t('PHP'),
      'description' => t('Format data in PHP serialized format'),
      'function' => 'qui_formatter_php',
      'headers' => array('Content-Type' => 'text/plain'),
      'plain' => TRUE,
    ),
  );
}

/**
 * Implements hook_qui_query_builder_handlers_info().
 */
function qui_qui_query_builder_handlers_info() {
  return array(
    'qui_cache' => array(
      'class' => 'Qui_Cache_Handler',
    ),
    'qui_settings' => array(
      'class' => 'Qui_Settings_Handler',
    ),
    'qui_database' => array(
      'class' => 'Qui_Database_Handler',
    ),
    'qui_select_table' => array(
      'class' => 'Qui_Select_Table_Handler',
    ),
    'qui_joins' => array(
      'class' => 'Qui_Joins_Handler',
    ),
    'qui_conditions' => array(
      'class' => 'Qui_Conditions_Handler',
    ),
    'qui_expressions' => array(
      'class' => 'Qui_Expressions_Handler',
    ),
    'qui_columns' => array(
      'class' => 'Qui_Columns_Handler',
    ),
    'qui_range' => array(
      'class' => 'Qui_Range_Handler',
    ),
    'qui_group' => array(
      'class' => 'Qui_Group_Handler',
    ),
    'qui_order' => array(
      'class' => 'Qui_Order_Handler',
    ),
    'qui_distinct' => array(
      'class' => 'Qui_Distinct_Handler',
    ),
    'qui_count' => array(
      'class' => 'Qui_Count_Handler',
    ),
    'qui_save' => array(
      'class' => 'Qui_Save_Handler',
    ),
    'qui_preview' => array(
      'class' => 'Qui_Preview_Handler',
    ),
    'qui_cancel' => array(
      'class' => 'Qui_Cancel_Handler',
    ),
  );
}
