<?php

/**
 * @file
 * Core functionality for the plista module.
 */

/**
 * Implements hook_help().
 */
function plista_help($path, $arg) {
  switch ($path) {
    case 'admin/help#plista':
      return check_plain(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_menu().
 */
function plista_menu() {
  $items = array();

  $items['admin/config/services/plista'] = array(
    'title' => 'Plista',
    'description' => 'Configure the plista widget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plista_admin_form'),
    'file' => 'plista.admin.inc',
    'access arguments' => array('configure plista'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function plista_permission() {
  $permissions = array(
    'configure plista' => array(
      'title' => t('Configure Plista widget'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_field_extra_fields().
 */
function plista_field_extra_fields() {

  $plista_basic = variable_get('plista_basic');

  $selected_node_types = isset($plista_basic['plista_node_types']) ? array_values($plista_basic['plista_node_types']) : array();

  $extra_fields = array();

  // Enable plista widget as field for selected node types.
  foreach ($selected_node_types as $type_name => $type) {
    if ($type) {
      $extra_fields['node'][$type_name] = array(
        'display' => array(
          'plista_widget' => array(
            'label' => t('Plista widget'),
            'weight' => 0,
          ),
        ),
      );
    }
  }

  return $extra_fields;
}

/**
 * Implements hook_node_view().
 */
function plista_node_view($node, $view_mode, $langcode) {

  $plista_basic = variable_get('plista_basic');

  if (empty($plista_basic['plista_enabled'])) {
    return;
  }

  if (isset($plista_basic['plista_node_types'][$node->type]) && $plista_basic['plista_node_types'][$node->type] === $node->type) {
    $node->content['plista_widget'] = array(
      '#markup' => plista_view_widget($node),
    );
  }
}

/**
 * Implements hook_block_info().
 */
function plista_block_info() {
  $blocks['plista'] = array(
    'info' => t('Plista widget'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function plista_block_view($delta = '') {
  $block['content'] = '';
  if (($node = menu_get_object()) && $delta == 'plista') {
    $block['content'] = plista_view_widget($node);
  }

  return $block;
}

/**
 * Shows the plista widget.
 *
 * @param StdClass $node
 *   The node object
 *
 * @return string
 *   Rendered HTML of the widget
 */
function plista_view_widget($node) {

  $plista_basic = variable_get('plista_basic');

  if (!$plista_basic['plista_enabled']) {
    return;
  }

  $pages = drupal_strtolower($plista_basic['plista_hidden_paths']);

  // Convert the Drupal path to lowercase.
  $path = drupal_strtolower(drupal_get_path_alias());
  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $pages);
  if ($path != current_path()) {
    $page_match = $page_match || drupal_match_path(current_path(), $pages);
  }

  // Check for node status to ensure all fields are filled with useful values.
  $js_url = $plista_basic['plista_javascript_url'];
  if (
    empty($js_url) || !is_array($plista_basic['plista_node_types']) ||
    !in_array($node->type, $plista_basic['plista_node_types']) ||
    $page_match || !$node->status
  ) {
    return '';
  }

  // Build the data array for the current node.
  $data = array(
    'objectid' => $node->nid,
    'title' => trim(check_plain(token_replace($plista_basic['plista_field_title'], array('node' => $node)))),
    'text' => trim(drupal_substr(check_plain(token_replace($plista_basic['plista_field_text'], array('node' => $node))), 0, 245)),
    'url' => url('node/' . $node->nid, array('absolute' => TRUE)),
    'img' => token_replace($plista_basic['plista_field_img'], array('node' => $node)),
    'category' => token_replace($plista_basic['plista_field_category'], array('node' => $node)),
    'created_at' => $node->created
  );

  drupal_alter('plista_data', $data);

  drupal_add_js($js_url, 'external');

  $script = '<div id="' . check_plain($plista_basic['plista_widgetname']) . '"></div>';
  $script .= '<script type="text/javascript">PLISTA.items.push(' . drupal_json_encode($data) . ');PLISTA.partner.init();</script>';

  return $script;
}

/**
 * Implements hook_node_update().
 */
function plista_node_update($node) {
  plista_perform_update($node);
}

/**
 * Implements hook_node_delete().
 */
function plista_node_delete($node) {
  plista_perform_update($node, 'delete');
}

/**
 * Performs an update to the plista API to update or delete a node.
 *
 * @param StdClass $node
 *   The node object
 * @param string $action
 *   Action to perform. "update" or "delete" are valid parameters
 */
function plista_perform_update($node, $action = 'update') {

  $valid_actions = array('update', 'delete');

  // Performs updates just to selected node types.
  $plista_basic = variable_get('plista_basic');

  $selected_node_types = isset($plista_basic['plista_node_types']) ? array_values($plista_basic['plista_node_types']) : array();
  if (!in_array($node->type, $selected_node_types) || !in_array($action, $valid_actions)) {
    return;
  }

  // Performs update just if domain id and api key are specified.
  $plista_advanced = variable_get('plista_advanced', array());
  if (!isset($plista_advanced['plista_domain_id']) || empty($plista_advanced['plista_domain_id']) ||
    !isset($plista_advanced['plista_api_key']) || empty($plista_advanced['plista_api_key']) ||
    !isset($plista_advanced['plista_update_url']) || empty($plista_advanced['plista_update_url'])
  ) {
    return;
  }

  $url = url($plista_advanced['plista_update_url'] . $action . '/' . $node->nid,
    array(
      'external' => TRUE,
      'query' => array(
        'domainid' => $plista_advanced['plista_domain_id'],
        'apikey' => $plista_advanced['plista_api_key'],
        'status' => FALSE,
      ),
    )
  );

  $request = drupal_http_request($url);

  switch ($request->code) {
    case "200":
      watchdog('plista', 'Action @action successful', array('@action' => $action), WATCHDOG_INFO);
      break;

    case "400":
      watchdog('plista', 'Unknown node: @title', array('@title' => $node->title), WATCHDOG_WARNING);
      break;

    case "403":
      watchdog('plista', 'Access denied', array(), WATCHDOG_WARNING);
      break;

    default:
      watchdog('plista', 'Unknown Response-Code: @code', array('@code' => $request->code), WATCHDOG_WARNING);
      break;
  }
}
