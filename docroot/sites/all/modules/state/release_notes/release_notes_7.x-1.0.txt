State 7.x-1.0


Make user sessions expire intelligently
- stop using endless sessions, in a user-comfy way

State introduces frontend-driven session/form expiration checking and session prolongation.
Drupal 7's default session settings makes sessions live almost indefinitely
- that presents security issues, and it's also bad for performance.*


Restrictive session timeout for high-risk users - endless sessions for low-risk users

Say your site has one group of users who perform critical tasks using sensitive data, and another group (role) who only perform security-wise trivial tasks.
Could be a webshop - service and accounting staff (high-risk) versus consumers (low-risk, the payflow routines at another site).

You would like the first (high-risk) group to be subject to a restrictive session timeout of 30 minutes.
But members of the other (low-risk) group would far too often get logged out prematurely with that short a session timeout.

Solution:
Prolong a high-risk group session whenever the user exhibits activity on a page (mouse-move, scroll etc.). Or don't prolong the session at all (paranoid) - the session only gets prolonged the conventional way, when the user posts/changes page.
And on the other hand, prolong a low-risk group's sessions unconditionally and indefinitely - ultimately only limited by form expiration (6 hours).


How does it work?

At set intervals - say 5 minutes - State's Javascript part checks if the conditions for session prolongation are met, and if so; performs a simple AJAX request.
An AJAX request - like any other request from a browser - effectively prolongs a session.

State also warns the visitor - in stylable jQuery dialog box - before the current session or form expires.


But what if...

...a user opens pages of the site in more than one browser tab?
No problem. Every tab checks if the current session (if any) matches the session that existed when the tab's page was loaded.
And a tab doesn't do an AJAX request if another tab recently "called in" - no reason to flood the server with redundant requests.

...the user logs out in one tab, and doesn't refresh the other tab?
The other tab will sense that "it's" session isn't current any more, and attempt to redirect to the front page (or reload current page; configurable).

...why that (redirect/reload)?
The current page may display sensitive data that should only be accessible when the user is logged in.

...what if the visitor's browser prevents redirect/reload?
Then State displays a warning and suggests that the visitor initiates the redirect/reload.


Is frontend-driven session prolongation only relevant for logged-in users?

No, it works for anonymous user sessions too - if you configure State to prolong sessions for anonymous users.
Like if your site is a webshop, and you wish to allow visitors to add stuff to the shopping basket before logging in.


My site is completely AJAX-driven, do I still need State then?

If you don't want users to lose unsaved data or get logged out prematurely - due to intermittent user inactivity - State may still be relevant.


* Endless sessions and security
Drupal 7 ships with these default session settings: cookie life 55 hours; garbage collect after 23 days.
Whereas the common/conventional configuration for non-Drupal sites/systems is:
- cookie life zero (session dies at browser window close; aka. 'session cookie'); garbage collect after 20 to 60 minutes.

The rationale behind zero cookie life is:
- prevent another person - using the same browser/device right after the current user - from recommencing the session (zero cookie life)
The rationale behind short garbage collection timeout is:
- shorter interim for exploiters to hijack and use the session
- storage and performance; old redundant sessions take up space and make session look-up slower

A counter-argument to the conventional scheme:
Users let their browsers remember usernames and passwords anyway, so why bother - effectively, security relies solely on the user holding on to the browser/device.
Counter-counter-arguments:
- the user should at least get the option of not sharing everything with everybody else who might get hold of the browser/device
- continuing a session may be far more compromising than creating a new session (on behalf of someone else)
- lingering old redundant sessions still present unnecessary risks and deteriorated performance



New features
------------
Backend (PHP)
 * Configuration (admin) page.
 * Requests type (page vs. AJAX) detection and counting.
 * Session var getter and setter functions, for safer accessing of the $_SESSION array.
Frontend (Javascript)
 * Session/form expiration checking and session prolongation.

Bug fixes
---------
None, first release.