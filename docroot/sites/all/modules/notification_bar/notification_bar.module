<?php

/**
 * @file
 * Module displaying custom messages created by users in horizontal bars on
 * top of the page., similar to Stack Overflow network notifications.
 */

/**
 * Implements hook_permission().
 */
function notification_bar_permission() {
  return array(
    'access notification bar' => array(
      'title' => t('Access notification bar'),
    ),
    'administer notification bar' => array(
      'title' => t('Administer notification bar'),
    ),
    'administer notification bar settings' => array(
      'title' => t('Administer notification bar settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function notification_bar_menu() {
  $items = array();
  $items['notifications/notification_bar'] = array(
    'title'             => 'notification bar',
    'description'       => 'notification bar module settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('notification_bar_admin_settings_form'),
    'access callback'   => 'user_access',
    'access arguments'  => array('administer notification bar'),
    'file'              => 'notification_bar.admin.inc',
  );
  $items['notifications/notification_bar/settings'] = array(
    'title'             => 'notification bar settings',
    'description'       => 'notification bar module settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('notification_bar_settings_config_form'),
    'access callback'   => 'user_access',
    'access arguments'  => array('administer notification bar settings'),
    'file'              => 'notification_bar_settings.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function notification_bar_page_build(&$page) {
  $load_js = variable_get('notification_bar_settings_js', 1);
  if($load_js){
    $notification_bar_markup = notification_bar_message_output();
    if(!empty($notification_bar_markup)) {
      // Add module JS and CSS.
      $load_css = variable_get('notification_bar_settings_css', 1);
      if($load_css){
        drupal_add_css(drupal_get_path('module', 'notification_bar') . '/notification_bar.css');
      }
      drupal_add_js(drupal_get_path('module', 'notification_bar') . '/notification_bar.js');

      $page['page_bottom']['notification_bar'] = array(
        '#attached' => array(),
      );
      $page['page_bottom']['notification_bar']['#markup'] = $notification_bar_markup;
    }
  }
}

/**
 * Implements hook_page_alter().
 *
 * Adds a post_render callback
 */
function notification_bar_page_alter(&$page) {
  $load_js = variable_get('notification_bar_settings_js', 1);
  if(!$load_js){
    $page['#post_render'][] = 'notification_bar_postrender_callback';
  }
}

/**
 * Implements callback_post_render().
 *
 * Inserts JavaScript snippet immediately following the opening body tag.
 */
function notification_bar_postrender_callback(&$children, $elements) {
  $notification_bar_markup = notification_bar_message_output();
  // Insert snippet after the opening body tag.
  $children = preg_replace('@<body[^>]*>@', '$0' . $notification_bar_markup, $children, 1);
  return $children;
}

/**
 * Implements hook_theme().
 */
function notification_bar_theme() {
  $path = drupal_get_path('module', 'notification_bar');
  return array(
    'notification_bar_messages' => array(
      'variables' => array('vars' => NULL),
    ),
    'notification_bar_wrapper' => array(
      'template'  => 'notification-bar-wrapper',
      'path'      => "$path/theme",
      'variables' => array('vars' => NULL),
    ),
    'notification_bar_message' => array(
      'template'  => 'notification-bar-message',
      'path'      => "$path/theme",
      'variables' => array('vars' => NULL),
    ),
  );
}

/**
 * Theme function, overriding Drupal's theme_status_messages().
 */
function notification_bar_message_output() {

  // Theme all messages for output.
  $output = '';

  $notification_bar_message_array = variable_get('notification_bar_message');
  $notification_message = isset($notification_bar_message_array['value']) ? $notification_bar_message_array['value'] : '';
  $notification_message_format = isset($notification_bar_message_array['format']) ? $notification_bar_message_array['format'] : '';
  $notification_message = check_markup($notification_message, $notification_message_format);

  $notification_message_text_left = filter_xss(variable_get('notification_bar_message_text_left', ''));
  $notification_cta_text = filter_xss(variable_get('notification_bar_message_cta_text', ''));
  $notification_cta_url = filter_xss(variable_get('notification_bar_message_cta_url', ''));
  $notification_message_array = array(
    'message_text' => $notification_message,
    'message_text_left' => $notification_message_text_left,
    'cta_text' => $notification_cta_text,
    'cta_url' => $notification_cta_url,
  );
  if(!empty($notification_message)) {
    $pages = variable_get('notification_bar_page_custom', '');
    $page_visibility = variable_get('notification_bar_page_visibility', BLOCK_VISIBILITY_NOTLISTED);
    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
    // Compare the lowercase internal and lowercase path alias (if any).
    $page_match = drupal_match_path($path, $pages);
    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
    }
    $page_match = !($page_visibility xor $page_match);
    if (!$page_match) {
      //Didn't match. Don't show the notification bar on this page
      return $output;
    }

    $vars = array(
      'type'      => "status",
      'messages'  => array($notification_message_array),
    );
    $output .= theme('notification_bar_messages', $vars);

    // Return formatted messages.
    $vars = array(
      'messages'        => $output,
      'show_dismissed'  => t('Show dismissed messages'),
    );
    // Return all AM-themes messages together with devel messages
    // themed in standard Drupal way.
    return theme('notification_bar_wrapper', array('vars' => $vars));
  }

  return $output;
}

/**
 * Theme function, which could be overriden by other modules/themes.
 */
function theme_notification_bar_messages($variables) {
  $output = '';
  if (isset($variables['messages']) && count($variables['messages'])) {
    foreach ($variables['messages'] as $message) {
      // All other messages will be AM-themed.
      $vars = array(
        'type'    => $variables['type'],
        'message' => $message,
        'dismiss' => t('Dismiss this message'),
      );
      $output .= theme('notification_bar_message', array('vars' => $vars));
    }
  }
  return $output;
}
