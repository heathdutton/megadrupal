<?php

/**
 * @file
 * Install, update and uninstall functions for GPT.
 */

/**
 * Implements hook_update_N().
 *
 * Updates data structure to get rid of targeting src and prep keys, and to
 * convert ad sizes to objects.
 */
function gpt_update_7000(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    // Count the number of records
    $sandbox['max'] = db_query('SELECT COUNT(name) FROM {ad_manager_ad} WHERE provider = :provider', array(
      ':provider' => 'gpt_ads',
    ))->fetchField();

    // Update global config for targeting.
    $targeting = variable_get('gpt__targeting', array());
    if (!empty($targeting)) {
      $new_targeting = new stdClass();
      if (isset($targeting['src']) && is_array($targeting['src'])) {
        foreach ($targeting['src'] as $k => $v) {
          $new_targeting->$k = $v;
        }
      }
      variable_set('gpt__targeting', $new_targeting);
    }
  }

  // Update ad units in DB.
  $rows = db_query_range('SELECT name, settings FROM {ad_manager_ad} WHERE provider = :provider ORDER BY name ASC',
      $sandbox['progress'], 3, array(':provider' => 'gpt_ads'));
  foreach ($rows as $row) {
    $settings = unserialize($row->settings);

    // Update targeting.
    $targeting =& $settings['gpt_ads']['targeting'];
    $new_targeting = new stdClass();
    if (isset($targeting['src']) && is_array($targeting['src'])) {
      foreach ($targeting['src'] as $k => $v) {
        $new_targeting->$k = $v;
      }
    }
    $settings['gpt_ads']['targeting'] = $new_targeting;

    // Update sizes.
    if (!$settings['gpt_ads']['outofpage']) {
      $size = json_decode($settings['gpt_ads']['size']);
      $new_size = new stdClass();
      if (is_array($size[0])) {
        $new_size->{0} = $size;
      }
      else {
        $new_size->{0} = array($size);
      }
      $settings['gpt_ads']['size'] = $new_size;
    }
    else {
      $settings['gpt_ads']['size'] = NULL;
    }

    // Default refresh to true.
    $settings['gpt_ads']['refresh'] = 1;

    db_update('ad_manager_ad')
      ->fields(array(
        'settings' => serialize($settings),
      ))
      ->condition('name', $row->name, '=')
      ->execute();

    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Implements hook_uninstall().
 */
function gpt_uninstall() {
  // Remove module variables
  $result = db_query('SELECT name FROM {variable} WHERE name LIKE :name', array(
    ':name' => 'gpt__%',
  ));
  foreach ($result as $record) {
    variable_del($record->name);
  }
}
