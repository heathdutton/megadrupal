<?php

/**
 * Implements hook_ad_manager_providers().
 */
function gpt_ad_manager_providers() {
  return array(
    'version' => 1,
    'provides' => array(
      // The key acts as the callback function for the configuration form, and
      // as the theme output name.
      // Do not wrap the value in t() as it is cached and will be wrapped with
      // t() on output.
      'gpt_ads' => 'Google Publisher Tag',
    ),
  );
}

/**
 * Ad Manager ad provider form for Google Publisher Tag.
 */
function gpt_ads(&$form, &$form_state) {
  // Load in logic that is needed for the provider form.
  ctools_include('gpt.admin', 'gpt', FALSE);

  // Call the form function, used to keep the .module light weight.
  gpt_ads_form($form, $form_state);
}

/**
 * Alter GPT page options by adding and overriding values.
 *
 * @param array $original
 * @param array $integrate
 *   Any keys defined in this array will override the values in $original; the
 *   exception being the targeting key, which will either attempt to append or
 *   override values for each key.
 */
function gpt_alter_page_options(&$original, $integrate) {
  if (isset($integrate['targeting'])) {
    $targeting = get_object_vars($integrate['targeting']);
    foreach ($targeting as $key => &$values) {
      // Pull method out of values.
      $method = $values['method'];
      unset($values['method']);

      // Override or assign.
      if ((isset($original['targeting']->$key) && $method == '1')
          || !isset($original['targeting']->$key)) {
        $original['targeting']->$key = $values;
      }
      // Else append.
      else {
        foreach ($values as $value) {
          $target =& $original['targeting']->$key;
          $target[] = $value;
        }
      }
    }
    // Unset $integrate targeting, so it doesn't override below.
    unset($integrate['targeting']);
  }

  // Update any other settings by overriding.
  foreach ($integrate as $k => $v) {
    $original[$k] = $v;
  }
}

/**
 * #element_validate form element handler.
 *
 * Passes through to #gpt_validate_handler defined property. This avoids
 * undefined function errors from our validate handlers not being in .module for
 * performance reasons.
 */
function gpt_element_validate_handler($element, &$form_state, $form) {
  ctools_include('gpt.admin', 'gpt', FALSE);
  $validate_handler = $element['#gpt_validate_handler'];
  $validate_handler($element, $form_state, $form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter settings form to provide needed configuration.
 */
function gpt_form_ad_manager_settings_form_alter(&$form, &$form_state) {
  // Load in logic that is needed for the settings form.
  ctools_include('gpt.admin', 'gpt', FALSE);
  gpt_global_settings_form($form, $form_state);
}

/**
 * Load page level ad settings.
 *
 * @return array
 *   Page option associative array containing:
 *   - network_code: The network for serving ads from, string.
 *   - targeted_ad_unit: The ad unit hiearchy, string.
 *   - async: Use asynchrounous mode, boolean.
 *   - sra: Use single request architecture, boolean.
 *   - collapse: Collapse divs without creatives, boolean.
 *   - targeting: Page level targeting, multi-dimensional array.
 *
 * @todo Finalize caching standard and flushing standard.
 */
function gpt_load_page_options() {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options)) {
    $cid = 'gpt:page:' . current_path();
    // Attempt to fetch from cache.
    //$cache = cache_get($cid);
    $cache = FALSE;
    if ($cache) {
      $options = $cache->data;
    }
    // Else build options
    else {
      $options = array(
        'network_code' => variable_get('gpt__network_code', ''),
        'targeted_ad_unit' => variable_get('gpt__targeted_ad_unit', ''),
        'async' => variable_get('gpt__async', 1),
        'sra' => variable_get('gpt__sra', 0),
        'collapse' => variable_get('gpt__collapse', 0),
        'refresh' => variable_get('gpt__refresh', 0),
        'targeting' => variable_get('gpt__targeting', array()),
      );
      drupal_alter('gpt_load_page_options', $options);

      // Store page options in cache to prevent needless rebuilding.
      // TODO: We should probably have config options available for the storage
      // time, or make permanent and anything that modifies the $options will
      // need to manually flush the affected cache IDs...
      // cache_set($cid, $options, 'cache', CACHE_TEMPORARY);
    }
  }

  return $options;
}

/**
 * Implements hook_page_build().
 */
function gpt_page_build(&$page) {
  $options = gpt_load_page_options();

  // Ensure required options are set.
  if (empty($options['network_code']) || empty($options['targeted_ad_unit'])) {
    if (user_access('administer ad manager')) {
      drupal_set_message(t('Google Publisher Tag ads should be shown on this page, but <a href="!url">key configurations</a> have not been set.',
          array('!url' => url('admin/structure/ad-manager/settings'))), 'warning');
    }
    return;
  }

  $js =& $page['page_top']['gpt_js'];
  $attached =& $page['page_top']['gpt']['#attached'];
  // Attach our GPT class and behavior.
  $attached['js'][] = array(
    'data' => drupal_get_path('module', 'gpt') . '/js/gpt.js',
    'every_page' => TRUE,
  );

  // Add page level options.
  $attached['js'][] = array(
    'data' => array('gpt' => $options),
    'type' => 'setting',
  );

  // Initialize our GPT code.
  $js[] = array(
    '#value' => 'Drupal.GPT = new Drupal.GPTClass(Drupal.settings.gpt);',
  );
  if ($options['async']) {
    if ($options['sra']) {
      // The only way for SRA to work is to have it run after the inline JS of
      // the body, we force this with jQuery's .ready().
      $init_code = 'jQuery(document).ready(Drupal.GPT.run);';
    }
    else {
      $init_code = 'googletag.cmd.push(Drupal.GPT.run);';
    }
  }
  else {
    // Browser run promise is per script tag, this makes it two tags, we run
    // immediately as GPT must be ready when inline tags are hit, no support
    // for SRA.
    $init_code = 'Drupal.GPT.run();';
  }
  $js[] = array(
    '#value' => $init_code,
  );

  foreach ($js as &$js_element) {
    $js_element['#tag'] = 'script';
    $js_element['#attributes'] = array(
      'type' => 'text/javascript',
    );
    $js_element['#value_prefix'] = "\n<!--//--><![CDATA[//><!--\n";
    $js_element['#value_suffix'] = "\n//--><!]]>\n";
    $js_element['#theme'] = 'html_tag';
  }
}

/**
 * Implements hook_permission().
 */
function gpt_permission() {
  return array(
    'gpt set javascript' => array(
      'title' => t('Set Javascript targeting'),
      'description' => t('Allow users to create and edit Javascript targeting values. Potential to break Javascript on the site.'),
    ),
  );
}

/**
 * #submit form element handler.
 *
 * Passes through to #gpt_submit_handler defined property. This avoids undefined
 * function errors from our submit handlers not being in .module for performance
 * reasons.
 */
function gpt_submit_handler($form, &$form_state) {
  ctools_include('gpt.admin', 'gpt', FALSE);
  $handler = $form_state['triggering_element']['#gpt_submit_handler'];
  $handler($form, $form_state);
}

/**
 * Implements hook_theme().
 */
function gpt_theme() {
  return array(
    'gpt_ads' => array(
      'variables' => array('name' => NULL, 'settings' => NULL, 'index' => NULL, 'container' => NULL),
    ),
  );
}

/**
 * Theme GPT Ads.
 */
function theme_gpt_ads($vars) {
  // Grab settings to be JSON encoded.
  $settings = $vars['settings']['gpt_ads'];

  // Allow modules to alter invididual ad settings before definition.
  drupal_alter('gpt_ad_slot_settings', $settings);

  // Container should be an element ID if present, so it doesn't need validation
  // on our part. Only other modules could expose this for user input, in that
  // case they need to sanitize the user input.
  $domId = isset($vars['container']) ? $vars['container'] : 'ad-manager-ad-' . $vars['name'] . '-' . $vars['index'];

  // TODO: Necessary to typecast?
  // Typecast boolean assignments for JSON encoding.
  if (isset($settings['outofpage'])) {
    $settings['outofpage'] = (bool) $settings['outofpage'];
  }
  if (isset($settings['refresh'])) {
    $settings['refresh'] = (bool) $settings['refresh'];
  }

  return '<script type="text/javascript">Drupal.GPT.registerSlot(\'' . $domId . '\',' . json_encode($settings) . ');</script>';
}
