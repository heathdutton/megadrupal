<?php
/**
 * Site customizations for mobile site.
 *
 * - Switch display modes. An alternate display module with the 'mobile_' prefix will be
 *   used if exists.
 * @todo Reimplement using hook_alter_entity_view_mode().
 */

/**
 * Implements hook_field_attach_view_alter()
 *
 * Change build mode for some entities when on mobile mode. For this to work this module
 * needs a lower weight than other modules than build the display.
 */
function mobile_domain_display_field_attach_view_alter(&$build, &$context) {
  if (mobile_domain_check_domain() && isset($build['#entity_type']) && isset($build['#bundle']) && $mobile_mode = _mobile_domain_display_switch_display($build['#entity_type'], $build['#bundle'], $context['view_mode'])) {
    $context['view_mode'] = $mobile_mode;
    $build['#view_mode'] = $mobile_mode;
    foreach (element_children($build) as $key) {
      if (isset($build[$key]['#view_mode'])) {
        $build[$key]['#view_mode'] = $mobile_mode;
      }
    }
    // Build fields for the new view mode and replace existing ones.
    $fields = field_attach_view($build['#entity_type'], $context['entity'], $mobile_mode, $context['language']);
    $build = array_merge($build, $fields);
  }
}

/**
 * Check alternate mobile view modes for entity, view mode.
 *
 * The mobile view mode will be the same with a 'mobile_' prefix.
 */
function _mobile_domain_display_switch_display($entity_type, $bundle, $view_mode) {
  if ($mobile_mode = _mobile_domain_display_display_name($view_mode)) {
    $mode_settings = field_view_mode_settings($entity_type, $bundle);
    if (isset($mode_settings[$mobile_mode]) && !empty($mode_settings[$mobile_mode]['custom_settings'])) {
      return $mobile_mode;
    }
  }
  // Defaults to no mobile display.
  return FALSE;
}

/**
 * Get display mode name for switch mobile.
 */
function _mobile_domain_display_display_name($view_mode) {
  return strpos($view_mode, 'mobile_') === 0 ? NULL : 'mobile_' . $view_mode;
}

/**
 * Implements hook_ds_view_modes_info()
 */
function mobile_domain_display_ds_view_modes_info() {
  // Mobile teaser.
  $ds_view_mode = new stdClass;
  $ds_view_mode->disabled = FALSE;
  $ds_view_mode->api_version = 1;
  $ds_view_mode->view_mode = 'mobile_teaser';
  $ds_view_mode->label = 'Mobile teaser';
  $ds_view_mode->entities = array(
      'node' => 'node',
  );
  $ds_view_modes[$ds_view_mode->view_mode] = $ds_view_mode;
  // Mobile full content.
  $ds_view_mode = new stdClass;
  $ds_view_mode->disabled = FALSE;
  $ds_view_mode->api_version = 1;
  $ds_view_mode->view_mode = 'mobile_full';
  $ds_view_mode->label = 'Mobile full';
  $ds_view_mode->entities = array(
      'node' => 'node',
  );
  $ds_view_modes[$ds_view_mode->view_mode] = $ds_view_mode;
  return $ds_view_modes;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function mobile_domain_display_ctools_plugin_api($module, $api) {
  if (($module == 'ds' && $api == 'ds')) {
    return array('version' => 1);
  }
}
