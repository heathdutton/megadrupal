<?php

/**
 * @file
 * Defines functions for connecting the ideal connector module to commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function ideal_advanced_commerce_commerce_payment_method_info() {
  $payment_methods['ideal_advanced_commerce'] = array(
    'title' => t('iDEAL'),
    'short_title' => t('iDEAL'),
    'terminal' => FALSE,
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function ideal_advanced_commerce_settings_form($settings = array()) {
  $form = array();

  $form['ideal_configuration'] = array(
    '#type' => 'select',
    '#title' => t('iDEAL configurations'),
    '#description' => t('Select the needed iDEAL configuration'),
    '#options' => ideal_advanced_configurations(),
    '#default_value' => isset($settings['ideal_configuration']) ? $settings['ideal_configuration'] : 0,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ideal_advanced_commerce_form_commerce_checkout_form_alter(&$form, &$form_state) {
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      if ($method_id == 'ideal_advanced_commerce') {
        $config_id = $form['commerce_payment']['payment_methods']['#value'][$key]['settings']['ideal_configuration'];
        $ideal_icon = ideal_advanced_icon($config_id);

        if (is_readable($ideal_icon['element']['path'])) {
          $value = '<div class="ideal-logo">' . $ideal_icon['icon'] . '<span class="label">' . t('iDEAL') . '</span></div>';
          $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'ideal_advanced') . '/theme/ideal_advanced.css';
        }
      }
      break;
    }
  }
}

/**
 * Create the submit form with ideal issuers list.
 *
 * @return array
 *   An drupal form.
 */
function ideal_advanced_commerce_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $transaction = ideal_advanced_commerce_transaction_load_by_order_id($order->order_id);

  try {
    if (!empty($transaction) && $transaction->status == IDEAL_STATUS_FAILURE) {
      $message = t('The payment failed, please select an other payment method.');
      drupal_set_message($message, 'error');
      throw new Exception($message);
    }
    if (!empty($transaction) && $transaction->status == IDEAL_STATUS_CANCELLED) {
      drupal_set_message(t('The payment was cancelled. Please select an other payment method or try again.'), 'error');
    }

    return ideal_advanced_commerce_submit_form_create($payment_method);
  }
  catch (Exception $ex) {
    watchdog('iDEAL', 'Error type: %type message: %msg', array('%msg' => $ex->getMessage(), '%type' => 'error'), WATCHDOG_ERROR);
  }
}

/**
 * Create the ideal issuers select list.
 *
 * @param array $payment_method
 *   Commerce payment method with settings.
 *
 * @return array An drupal form.
 *   An drupal form.
 */
function ideal_advanced_commerce_submit_form_create(array $payment_method) {
  $connector = new IdealAdvancedConnectorWrapper($payment_method['settings']['ideal_configuration']);

  $form = array();
  $form['bank_details'] = array(
    '#type' => 'select',
    '#title' => t('Select your bank'),
    '#required' => TRUE,
    '#options' => $connector->getIssuers(),
  );

  return $form;
}

/**
 * Implements callback_commerce_payment_method_submit_form_submit().
 */
function ideal_advanced_commerce_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $transaction = commerce_payment_transaction_new('ideal_advanced_commerce', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->remote_id = $order->order_id;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = COMMERCE_PAYMENT_STATUS_PENDING;
  commerce_payment_transaction_save($transaction);

  $order->data['issuer_id'] = $pane_values['bank_details'];
  $order->data['payment_id'] = $transaction->transaction_id;
}

/**
 * Implements callback_redirect_form().
 */
function ideal_advanced_commerce_redirect_form($form, &$form_state, $order, $payment_method) {
  $ideal_connector = new IdealAdvancedCommerceConnectorWrapper($payment_method['settings']['ideal_configuration']);
  $config_handler = new IdealAdvancedConfigHandler();
  $ideal_connector->setOrder($order);
  $return = $ideal_connector->startTransaction();

  if (empty($return) || !$config_handler->configValidate($payment_method['settings']['ideal_configuration'])) {
    $payment = ideal_advanced_commerce_commerce_payment_load($order);
    ideal_advanced_commerce_commerce_payment_set_status($payment->transaction_id, COMMERCE_PAYMENT_STATUS_FAILURE);
    $redirect_action = commerce_payment_redirect_pane_previous_page($order);
  }
  else {
    $redirect_action = $return->getIssuerAuthenticationURL();
  }

  $form['#action'] = $redirect_action;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to iDEAL'),
  );

  return $form;
}

/**
 * Implements hook_entity_delete().
 *
 * Delete the mapping row when the commerce order is deleted.
 */
function ideal_advanced_commerce_entity_delete($entity, $type) {
  if ($type == 'commerce_order') {
    db_delete('ideal_advanced_commerce')
      ->condition('order_id', $entity->order_id)
      ->execute();
  }
}

/**
 * Load the last ideal payment object from a commerce order.
 *
 * @param object $order
 *   Commerce order object.
 *
 * @return object
 *   The last commerce payment object of an order.
 */
function ideal_advanced_commerce_commerce_payment_load($order) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
        ->propertyCondition('order_id', $order->order_id, '=');
  $result = $query->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    $result = array_reverse($result['commerce_payment_transaction']);
    foreach ($result as $payment) {
      if ($payment->payment_method == 'ideal_advanced_commerce') {
        $result = commerce_payment_transaction_load($payment->transaction_id);
        break;
      }
    }
  }
  return $result;
}

/**
 * Set the status of a commerce order payment.
 *
 * @param int $payment_id
 *   The ideal payment id.
 * @param string $status
 *   The ideal transaction status.
 */
function ideal_advanced_commerce_commerce_payment_set_status($payment_id, $status) {
  $payment = commerce_payment_transaction_load($payment_id);
  $payment->status = $status;
  $payment->message = $status;
  commerce_payment_transaction_save($payment);
}

/**
 * Load an ideal transaction related to the commerce order.
 *
 * @param int $order_id
 *   The commerce order id.
 *
 * @return object
 *   Ideal transaction object or null on failure.
 */
function ideal_advanced_commerce_transaction_load_by_order_id($order_id) {
  $transaction = NULL;
  $query = db_query('SELECT ideal_id FROM {ideal_advanced_commerce} WHERE order_id = :order_id', array(':order_id' => $order_id));
  $count = $query->rowCount() - 1;
  $result = $query->fetchCol('ideal_id');

  if (!empty($result)) {
    $transaction = ideal_advanced_transaction_load($result[$count]);
  }

  return $transaction;
}

/**
 * Load an commerce order related to the ideal ID.
 *
 * @param int $ideal_id
 *   The ideal id.
 *
 * @return object
 *   The commerce order object.
 */
function ideal_advanced_commerce_order_load_by_ideal_id($ideal_id) {
  $order = NULL;
  $query = db_query('SELECT order_id FROM {ideal_advanced_commerce} WHERE ideal_id = :ideal_id', array(':ideal_id' => $ideal_id));
  $result = $query->fetch();

  if (!empty($result)) {
    $order = commerce_order_load($result->order_id);
  }

  return $order;
}

/**
 * Implements hook_commerce_checkout_router().
 *
 * Route the customer back into the checkout process when the returned status
 * is not success. There is only a redirect when the customer enters the return
 * or back page and ideal is selected as payment method.
 */
function ideal_advanced_commerce_commerce_checkout_router($order, $checkout_page) {
  $checkout_return = FALSE;
  $payment_method = FALSE;
  $response = FALSE;
  $success = FALSE;
  $path = explode('/', current_path());

  if (isset($path[3]) && ($path[3] == 'return' || $path[3] == 'back')) {
    $checkout_return = TRUE;
  }

  if (isset($order->data['payment_method']) && preg_match("/ideal_advanced/i", $order->data['payment_method'])) {
    $payment_method = TRUE;
  }

  if ($checkout_return && $payment_method) {
    $transaction = ideal_advanced_commerce_transaction_load_by_order_id($order->order_id);
    $ideal_connector = new IdealAdvancedCommerceConnectorWrapper($transaction->config_id);
    $response = $ideal_connector->updateTransactionStatus($transaction->ideal_id);
  }

  if (!empty($response) && $response->status == IDEAL_STATUS_SUCCESS) {
    $success = TRUE;
  }

  if ($checkout_return && !$success) {
    commerce_payment_redirect_pane_previous_page($order);
  }
}

/**
 * Implements hook_ideal_advanced_status_request_alter().
 */
function ideal_advanced_commerce_ideal_advanced_status_request_alter(&$ideal_id, &$transaction, &$ideal_connector) {
  $ideal_connector = new IdealAdvancedCommerceConnectorWrapper($transaction->config_id);
}
