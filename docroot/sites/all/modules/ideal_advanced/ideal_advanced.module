<?php

/**
 * @file
 * Base and administrator functions for the ideal connector wrapper.
 */

/**
 * Define the base path for ideal advanced config files.
 */
define('IDEAL_ADVANCED_BASE_PATH', 'private://');

/**
 * Define the basic ideal statuses.
 */
define('IDEAL_STATUS_NEW', 'New');
define('IDEAL_STATUS_OPEN', 'Open');
define('IDEAL_STATUS_SUCCESS', 'Success');
define('IDEAL_STATUS_CANCELLED', 'Cancelled');
define('IDEAL_STATUS_EXPIRED', 'Expired');
define('IDEAL_STATUS_FAILURE', 'Failure');

/**
 * Implements hook_permissions().
 */
function ideal_advanced_permission() {
  $permissions = array(
    'administer ideal settings' => array(
      'title' => t('Administer the iDEAL settings'),
      'description' => t('user who is allowed to set settings of the iDEAL module'),
    ),
    'view ideal transactions' => array(
      'title' => t('View the iDEAL transactions'),
      'description' => t('user who is allowed to view transactions of the iDEAL module'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function ideal_advanced_menu() {
  $item['admin/config/services/ideal'] = array(
    'title' => 'iDEAL',
    'description' => 'Configure the iDEAL credentials',
    'page callback' => 'ideal_advanced_admin_config_list',
    'access arguments' => array('administer ideal settings'),
    'file' => 'form/ideal_advanced_admin_list.inc',
  );
  $item['admin/config/services/ideal/list'] = array(
    'title' => 'iDEAL settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $item['admin/config/services/ideal/test'] = array(
    'title' => 'IDEAL tests',
    'description' => 'Test the iDEAL connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ideal_advanced_test_form'),
    'access arguments' => array('administer ideal settings'),
    'file' => 'form/ideal_advanced_test_form.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $item['admin/config/services/ideal/add'] = array(
    'title' => 'Add an iDEAL configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ideal_advanced_admin_add_form', 4),
    'access arguments' => array('administer ideal settings'),
    'file' => 'form/ideal_advanced_admin_form.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $item['admin/config/services/ideal/%/edit'] = array(
    'title' => 'edit',
    'description' => 'Delete the iDEAL configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ideal_advanced_admin_edit_form', 4, 5),
    'access arguments' => array('administer ideal settings'),
    'file' => 'form/ideal_advanced_admin_form.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 3,
  );
  $item['admin/config/services/ideal/%/delete'] = array(
    'title' => 'delete',
    'description' => 'Delete the iDEAL configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ideal_advanced_admin_delete_form', 4),
    'access arguments' => array('administer ideal settings'),
    'file' => 'form/ideal_advanced_admin_form.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 4,
  );

  return $item;
}

/**
 * Implements hook_libraries_info().
 */
function ideal_advanced_libraries_info() {
  $libraries['ideal_connector'] = array(
    'name' => 'iDeal connector library',
    'vendor url' => 'http://www.ideal.nl/',
    'version arguments' => array(
      'file' => 'iDEALConnector.php',
      'pattern' => '/iDEALConnector Library [v]?([\d\.]*)/',
      'lines' => 90,
    ),
    'files' => array(
      'php' => array('iDEALConnector.php'),
    ),
  );
  return $libraries;
}

/**
 * Render the iDEAL logo.
 *
 * @param int $config_id
 *   The ideal configuration id.
 *
 * @return array
 *   Rendered image string.
 */
function ideal_advanced_icon($config_id) {
  $config_handler = new IdealAdvancedConfigHandler();
  $settings = $config_handler->getSettings($config_id);

  $variables = array(
    'path' => $settings['icon_path'],
    'title' => 'iDEAL',
    'alt' => 'The iDEAL logo',
    'attributes' => array(
      'class' => array('ideal-icon'),
    ),
  );

  return array('icon' => theme('image', $variables), 'element' => $variables);
}

/**
 * Implements hook_cron().
 *
 * If the client does not return to the shop after completing the transaction,
 * the transaction status must be checked separately.
 */
function ideal_advanced_cron() {
  $query = db_select('ideal_advanced_transaction', 't')
    ->fields('t', array('ideal_id'))
    ->condition('status', array('Open', 'New'))
    // The expiration period must be expired.
    ->where('(created + expiration_period) < :time1', array(':time1' => REQUEST_TIME))
    // The status call must be within 24h.
    ->where('created > :time2', array(':time2' => REQUEST_TIME - 86400));
  $results = $query->execute()->fetchAll();

  if (!empty($results)) {
    foreach ($results as $result) {
      $transaction = ideal_advanced_transaction_load($result->ideal_id);
      $ideal_connector = new IdealAdvancedConnectorWrapper($transaction->config_id);
      drupal_alter('ideal_advanced_status_request', $result, $transaction, $ideal_connector);

      $ideal_connector->updateTransactionStatus($result->ideal_id);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function ideal_advanced_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ideal_advanced') . '/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function ideal_advanced_entity_info() {
  $entity['ideal_advanced_transaction'] = array(
    'label' => t('iDEAL transaction'),
    'module' => 'ideal_advanced',
    'base table' => 'ideal_advanced_transaction',
    'entity keys' => array(
      'id' => 'ideal_id',
    ),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
  );

  $entity['ideal_advanced_config'] = array(
    'label' => t('iDEAL configuration'),
    'module' => 'ideal_advanced',
    'base table' => 'ideal_advanced_config',
    'entity keys' => array(
      'id' => 'id',
    ),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info().
 */
function ideal_advanced_entity_property_info() {
  // Ideal Transactions properties.
  $properties['ideal_advanced_transaction']['properties']['ideal_id'] = array(
    'description' => t('Unique ideal ID'),
    'label' => t('Ideal ID'),
    'schema field' => 'ideal_id',
    'type' => 'integer',
  );
  $properties['ideal_advanced_transaction']['properties']['transaction_id'] = array(
    'description' => t('The transaction id returned by the transaction response'),
    'label' => t('Transaction ID'),
    'schema field' => 'transaction_id',
    'type' => 'integer',
  );
  $properties['ideal_advanced_transaction']['properties']['purchase_id'] = array(
    'description' => t('A unique purchase id, for example the commerce order ID'),
    'label' => t('Purchase ID'),
    'schema field' => 'purchase_id',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_transaction']['properties']['status'] = array(
    'description' => t('The ideal transaction status'),
    'label' => t('Status'),
    'schema field' => 'status',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
    'options list' => 'ideal_advanced_property_options_status',
  );
  $properties['ideal_advanced_transaction']['properties']['amount'] = array(
    'description' => t('The transaction amount in cents'),
    'label' => t('Amount'),
    'schema field' => 'amount',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'decimal',
  );
  // Pseudo field returning a formatted amount in Euro's for the front-end.
  $properties['ideal_advanced_transaction']['properties']['formatted_amount'] = array(
    'description' => t('The transaction amount in Euro\'s'),
    'label' => t('Formatted Amount'),
    'getter callback' => 'ideal_advanced_property_get_formatted_amount',
    'type' => 'decimal',
    'computed' => TRUE,
    'entity views field' => TRUE,
  );
  $properties['ideal_advanced_transaction']['properties']['consumer_name'] = array(
    'description' => t('The returned consumer name'),
    'label' => t('Consumer name'),
    'schema field' => 'consumer_name',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_transaction']['properties']['consumer_iban'] = array(
    'description' => t('The returned consumer iban number'),
    'label' => t('Consumer IBAN'),
    'schema field' => 'consumer_iban',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_transaction']['properties']['consumer_bic'] = array(
    'description' => t('The returned consumer bic identifier'),
    'label' => t('Consumer BIC'),
    'schema field' => 'consumer_bic',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_transaction']['properties']['entrance_code'] = array(
    'description' => t('The return entrance code'),
    'label' => t('Entrance code'),
    'schema field' => 'entrance_code',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_transaction']['properties']['expiration_period'] = array(
    'description' => t('The expiration period in unix timestamp'),
    'label' => t('Expiration period'),
    'schema field' => 'expiration_period',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'duration',
  );
  $properties['ideal_advanced_transaction']['properties']['config_id'] = array(
    'description' => t('The related configuration ID'),
    'label' => t('Configuration ID'),
    'schema field' => 'config_id',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'ideal_advanced_config',
  );
  $properties['ideal_advanced_transaction']['properties']['created'] = array(
    'description' => t('The date, the entity was created'),
    'label' => t('Created'),
    'schema field' => 'created',
    'type' => 'date',
  );
  $properties['ideal_advanced_transaction']['properties']['changed'] = array(
    'description' => t('The last date the entity was changed'),
    'label' => t('Last changed'),
    'schema field' => 'changed',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'date',
  );

  // Ideal configuration properties.
  $properties['ideal_advanced_config']['properties']['id'] = array(
    'description' => t('Primary identifier'),
    'label' => t('Configuration ID'),
    'schema field' => 'id',
    'type' => 'integer',
  );
  $properties['ideal_advanced_config']['properties']['title'] = array(
    'description' => t('Configuration title'),
    'label' => t('Title'),
    'schema field' => 'title',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_config']['properties']['merchant_id'] = array(
    'description' => t('iDEAL merchant ID'),
    'label' => t('Merchant ID'),
    'schema field' => 'merchant_id',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'integer',
  );
  $properties['ideal_advanced_config']['properties']['sub_id'] = array(
    'description' => t('IDEAL sub ID'),
    'label' => t('Sub ID'),
    'schema field' => 'sub_id',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'integer',
  );
  $properties['ideal_advanced_config']['properties']['private_key_path'] = array(
    'description' => t('Path to the private key file'),
    'label' => t('Private key path'),
    'schema field' => 'private_key_path',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_config']['properties']['private_key_password'] = array(
    'description' => t('Password for the private key'),
    'label' => t('Private key password'),
    'schema field' => 'private_key_password',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_config']['properties']['private_certificate_path'] = array(
    'description' => t('Path to the private certificate path'),
    'label' => t('Private certificate path'),
    'schema field' => 'private_certificate_path',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_config']['properties']['ideal_server_url'] = array(
    'description' => t('iDEAL server URL'),
    'label' => t('iDEAL server'),
    'schema field' => 'ideal_server_url',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_config']['properties']['public_certificate_path'] = array(
    'description' => t('Path to public certificate file'),
    'label' => t('Public certificate path'),
    'schema field' => 'public_certificate_path',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );
  $properties['ideal_advanced_config']['properties']['expiration_period'] = array(
    'description' => t('Expiration period in minutes'),
    'label' => t('Expiration period'),
    'schema field' => 'expiration_period',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'integer',
  );
  $properties['ideal_advanced_config']['properties']['debug_mode'] = array(
    'description' => t('Debug mode'),
    'label' => t('Debug'),
    'schema field' => 'debug_mode',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'boolean',
  );
  $properties['ideal_advanced_config']['properties']['icon_path'] = array(
    'description' => t('Icon path'),
    'label' => t('Icon path'),
    'schema field' => 'icon_path',
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'text',
  );

  return $properties;
}

/**
 * Return a list of possible options for the status parameter.
 *
 * Makes sure the setter callback will only allow valid statuses and provides a
 * list to Views so we can actually filter by one or more statuses.
 *
 * @see hook_options_list().
 */
function ideal_advanced_property_options_status($field, $instance, $entity_type, $entity = NULL) {
  $options = array(
    IDEAL_STATUS_NEW => t('New'),
    IDEAL_STATUS_OPEN => t('Open'),
    IDEAL_STATUS_SUCCESS => t('Success'),
    IDEAL_STATUS_CANCELLED => t('Cancelled'),
    IDEAL_STATUS_EXPIRED => t('Expired'),
    IDEAL_STATUS_FAILURE => t('Failure'),
  );

  return $options;
}

/**
 * Return the amount in Euro's for the administrative front-end.
 *
 * @see entity_property_verbatim_get().
 */
function ideal_advanced_property_get_formatted_amount($data, array $options, $name, $type, $info) {
  $name = 'amount';
  if ((is_array($data) || (is_object($data) && $data instanceof ArrayAccess)) && isset($data[$name])) {
    return ($data[$name]/100);
  }
  elseif (is_object($data) && isset($data->$name)) {
    // Incorporate i18n_string translations. We may rely on the entity class
    // here as its usage is required by the i18n integration.
    if (isset($options['language']) && !empty($info['i18n string'])) {
      return $data->getTranslation($name, $options['language']->language);
    }
    else {
      return ($data->$name/100);
    }
  }
  return NULL;
}

/**
 * Save a transaction with values.
 *
 * @param array $values
 *   Transaction_id     - int
 *   status             - string
 *   consumer_name      - string
 *   consumer_iban      - string
 *   consumer_bic       - string
 *   created            - unix timestamp
 *   changed            - unix timestamp.
 *
 * @return object
 *    The ideal advanced transaction object.
 */
function ideal_advanced_transaction_create(array $values) {
  $transaction = entity_create('ideal_advanced_transaction', $values);
  $transaction->save();
  return $transaction;
}

/**
 * Load an iDEAL transaction by the iDEAL ID.
 *
 * @param int $ideal_id
 *   The ideal advanced transaction id.
 *
 * @return object
 *   The ideal advanced transaction object.
 */
function ideal_advanced_transaction_load($ideal_id) {
  $transaction = entity_load('ideal_advanced_transaction', array($ideal_id));
  return $transaction[$ideal_id];
}

/**
 * Edit an ideal transaction entity.
 *
 * @param int $ideal_id
 *   The ideal advanced transaction id.
 * @param array $values
 *   An array with key/value pairs with the transaction details. The following
 *   keys can be supplied:
 *   - status
 *   - amount
 *   - purchase_id
 *   - consumer_name
 *   - consumer_iban
 *   - consumer_bic
 *
 *   Keys are optional and may be omitted.
 *
 * @return object
 *   The ideal advanced transaction object.
 */
function ideal_advanced_transaction_edit($ideal_id, array $values) {
  $transaction = ideal_advanced_transaction_load($ideal_id);
  $transaction_wrapper = entity_metadata_wrapper('ideal_advanced_transaction', $transaction);

  if (isset($values['status'])) {
    $transaction_wrapper->status->set($values['status']);
  }
  if (isset($values['amount'])) {
    $transaction_wrapper->amount->set($values['amount']);
  }
  if (isset($values['purchase_id'])) {
    $transaction_wrapper->purchase_id->set($values['purchase_id']);
  }
  if (isset($values['consumer_name'])) {
    $transaction_wrapper->consumer_name->set($values['consumer_name']);
  }
  if (isset($values['consumer_iban'])) {
    $transaction_wrapper->consumer_iban->set($values['consumer_iban']);
  }
  if (isset($values['consumer_bic'])) {
    $transaction_wrapper->consumer_bic->set($values['consumer_bic']);
  }

  $transaction_wrapper->changed->set(REQUEST_TIME);
  $transaction_wrapper->save();

  return $transaction;
}

/**
 * Load an iDEAL transaction by the transaction id.
 *
 * @param int $transaction_id
 *   The ideal advanced transaction id.
 *
 * @return object
 *   The ideal advanced transaction object or null on failure.
 */
function ideal_advanced_transaction_load_by_transaction_id($transaction_id) {
  $transaction = NULL;
  $query = db_query('SELECT ideal_id FROM {ideal_advanced_transaction} WHERE transaction_id = :transaction_id', array(':transaction_id' => $transaction_id));
  $result = $query->fetch();

  if (!empty($result)) {
    $transaction = ideal_advanced_transaction_load($result->ideal_id);
  }

  return $transaction;
}

/**
 * Generates an associative array with configuration id and title.
 *
 * @return array
 *   The id and title of a configuration for the select form element.
 */
function ideal_advanced_configurations() {
  $configs = entity_load('ideal_advanced_config');
  $configs_array = array();

  foreach ($configs as $key => $config) {
    $configs_array[$key] = $config->title;
  }

  return $configs_array;
}

/**
 * Generate a html status icon for the ideal advanced admin interface.
 *
 * @param bool $status
 *   Boolean status where true is ok.
 *
 * @return string
 *   Link to log on error or test page on success with 24x24 pixels icon.
 */
function ideal_advanced_status_icon($status) {
  if ($status) {
    $icon = 'ok.png';
    $path = 'admin/config/services/ideal/test';
  }
  else {
    $icon = 'error.png';
    $path  = 'admin/reports/dblog';
  }

  global $base_url;
  $icon_path = $base_url . '/' . drupal_get_path('module', 'ideal_advanced') . '/theme/' . $icon;

  return l('<img src="' . $icon_path . '" width="24" height="24" />', $path, array('html' => TRUE));
}
