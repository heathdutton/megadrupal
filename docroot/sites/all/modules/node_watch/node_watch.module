<?php
/**
 * @file
 * Node Watch Module.
 */

/**
 * Implements hook_help().
 */
function node_watch_help($path, $arg) {
  switch ($path) {
    case 'admin/help#node_watch':
      $path = dirname(__FILE__) . '/README.md';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      else {
        $path = dirname(__FILE__) . '/README.txt';
        if (file_exists($path)) {
          $readme = file_get_contents($path);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function node_watch_permission() {
  return array(
    'administer node watch settings' => array(
      'title' => t('Administer node watch settings'),
      'description' => t('Perform administration tasks for the node watch project.'),
    ),
    'create node watch report' => array(
      'title' => t('Create node watch report'),
      'description' => t('Create node watch report.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function node_watch_menu() {
  $items = array();
  $items['admin/config/development/node_watch'] = array(
    'title' => 'Node Watch Settings',
    'description' => 'Collection of editable settings for the node watch',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_watch_admin'),
    'access arguments' => array('administer node watch settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/node_watch'] = array(
    'title' => 'Node Watch Report',
    'description' => 'Create node watch report',
    'page callback' => 'node_watch_page',
    'page arguments' => array('node_watch_create'),
    'access arguments' => array('create node watch report'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Build settings form.
 */
function node_watch_admin() {
  $form = array();
  $form['node_watch'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Watch Settings'),
    '#description' => t('<p>The settings below will allow you to control what options users will have to create a node watch.</p>'),
    '#weight' => 5,
    '#collapsible' => FALSE,
  );
  $form['node_watch']['system_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('System Settings'),
    '#description' => t('<p>Define system settings.</p>'),
    '#weight' => 11,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['node_watch']['system_fieldset']['node_watch_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Threshold Integer'),
    '#default_value' => variable_get('node_watch_threshold', 10),
    '#size' => 10,
    '#description' => t("Sets the threshold of node differences to trigger a report."),
  );
  $form['node_watch']['system_fieldset']['node_watch_cron'] = array(
    '#type' => 'checkbox',
    '#title' => t('Run on cron'),
    '#default_value' => variable_get('node_watch_cron', 0),
    '#description' => t("Run node watch on cron."),
  );
  $form['node_watch']['system_fieldset']['node_watch_watchdog'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log to watchdog'),
    '#default_value' => variable_get('node_watch_watchdog', 0),
    '#description' => t("Log report runs to the watchdog log."),
  );
  $form['node_watch']['email_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#description' => t('<p>The email address to send the node watch report.</p>'),
    '#weight' => 12,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['node_watch']['email_fieldset']['node_watch_sendemail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send Email'),
    '#default_value' => variable_get('node_watch_sendemail', 0),
    '#description' => t("Send report to email."),
  );
  $form['node_watch']['email_fieldset']['node_watch_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#default_value' => variable_get('node_watch_email', ''),
    '#attributes' => array('placeholder' => t('Enter email address')),
    '#size' => 50,
    '#states' => array(
      'visible' => array(
        ':input[name="node_watch_sendemail"]' => array('checked' => TRUE),
      ),
    ),
    '#description' => t('<p>The email address to send the node watch report.</p>'),
  );
  return system_settings_form($form);
}

/**
 * Define a validation function.
 */
function node_watch_admin_validate($form, &$form_state) {
  $email_on = $form_state['values']['node_watch_sendemail'];
  $email = $form_state['values']['node_watch_email'];
  // If it's not a valid email, set an error.
  if($email_on == 1) {
    if (valid_email_address($email) == 0) {
      form_set_error('node_watch_email', t('Not a valid email address!'));
    }
  }
  $threshold = $form_state['values']['node_watch_threshold'];
  // If it's not a valid integer, set an error.
  if (!is_numeric($threshold) && $threshold >= 0) {
    form_set_error('node_watch_threshold', t('Not a valid integer!'));
  }
}

/**
 * Creates and displays node watch.
 */
function node_watch_create() {

  // Get all content types on the site.
  $types = node_type_get_types();

  // Loop through each type and get the number of nodes.
  foreach ($types as $content_type) {
    $type = $content_type->type;
    $previous = variable_get("nw_count_$type", 0);
    $count = node_watch_get_node_count($type);

    // Find the difference between previous and current count.
    if (is_numeric($previous) && is_numeric($count)) {
      $difference = abs($previous - $count);
    }

    // Find if the difference is higher then the threshold.
    $threshold = variable_get('node_watch_threshold', 10);
    if ($difference >= $threshold) {
      $alert = "Alert: The $type content type had $previous node(s) and now has $count node(s).";
      $watchdog_on = variable_get('node_watch_watchdog', 0);
      if ($watchdog_on == 1) {
        watchdog('Nodewatch', $alert);
        drupal_set_message($alert, 'warning');
      }
      $email_on = variable_get('node_watch_sendemail', 0);
      if ($email_on == 1) {
        $from = variable_get('site_mail', 'Node Watch <noreply@drupal.org>');
        $to = variable_get('node_watch_email', $from);
        $sent = _node_watch_mail_send($from, $to, 'Node Watch Alert', $alert);
        if ($sent) {
          drupal_set_message(t('Email sent successfully'));
          watchdog('Nodewatch Email', 'Email sent successfully');
        }
        else {
          drupal_set_message(t('There was a problem sending your message'), 'error');
          watchdog('Nodewatch Email', 'Email failed to send.');
        }
      }
    }
    variable_set("nw_count_$type", $count);
    $node_watch_report[] = "Machine Name   : $type </br>" .
                            "Current Nodes  : $count </br>" .
                            "Previous Nodes : $previous </br>" .
                            "Difference     : $difference </br></br></br>";
  }

  return $node_watch_report;

}

/**
 * Implements hook_cron().
 */
function node_watch_cron() {
  $cron_on = variable_get('node_watch_cron', 0);
  if ($cron_on == 1) {
    node_watch_create();
  }
}

/**
 * Returns the node count for the passed content type.
 */
function node_watch_get_node_count($content_type) {
  $query = "SELECT COUNT(*) amount FROM {node} n WHERE n.type = :type";
  $result = db_query($query, array(':type' => $content_type))->fetch();
  return $result->amount;
}

/**
 * Returns the node count total.
 */
function node_watch_get_total_count() {
  $query = "SELECT COUNT(*) amount FROM {node} n ";
  $result = db_query($query)->fetch();
  return $result->amount;
}

/**
 * Implements creates report page.
 */
function node_watch_page() {
  $messages = node_watch_create();

  $threshold = variable_get('node_watch_threshold', 10);
  $message_output = '<h2>Report : Threshold (' . $threshold . ') </h2>';

  if (isset($messages)) {
    foreach ($messages as $message) {
      $message_output .= $message;
    }
  }
  else {
    $message_output .= 'Report Empty';
  }

  $total_nodes = node_watch_get_total_count();
  $message_output .= '<h2>Total Nodes: ' . $total_nodes . '</h2>';

  return $message_output;
}

/**
 * Implements hook_mail().
 */
function node_watch_mail($key, &$message, $params) {
  switch ($key) {
    case 'report_send':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['headers']['Content-Type'] = 'text/plain';
      break;
  }
}

/**
 * Send the email.
 */
function _node_watch_mail_send($from, $to, $subject, $message) {
  $params = array(
    'body' => $message,
    'subject' => $subject,
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
      'Content-Type' => 'text/plain',
    ),
  );

  $message = drupal_mail(
    'node_watch',
    'report_send',
    $to,
    language_default(),
    $params,
    $from
  );

  if (isset($message['result'])) {
    return $message['result'];
  }
}
