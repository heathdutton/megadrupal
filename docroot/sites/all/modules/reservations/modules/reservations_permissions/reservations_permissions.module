<?php


/**
 * Implements hook_menu().
 */
function reservations_permissions_menu() {

  // Interface for users to set permissions with only Administer Reservations perm
  $items['admin/reservations/manage/permissions'] = array(
    'title' => 'Permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservations_permissions_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer reservations'),
    'description' => 'Configure reservation permissions for Reservations.',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );
  
  // Standard Administration settings.
  $items['admin/config/reservations/permissions'] = array(
    'title' => 'Permissions Configuration',
    'description' => 'Configuration options for the Reservations Permissions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservations_permissions_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function reservations_permissions_admin_settings($form, &$form_state) {
  $roles = user_roles();
  
  $form['instructions']['#markup'] = t('Select the roles to include in the Reservations Permissions interface.  <b>WARNING:</b> Users with the Administer Reservations permission can alter the <i>add own</i> and <i>delete own</i> permissions for reservable content types without the normal Manage Permissions permission.');
  
  foreach ($roles as $rid => $name) {
    
    $form['reservations_permissions_' . $rid] = array(
      '#type' => 'checkbox',
      '#title' => $name,
      '#default_value' => variable_get('reservations_permissions_' . $rid, 0),
      '#description' => t(''),
    );

  }
  
  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function reservations_permissions_theme() {
  return array(
    'reservations_permissions_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theming for reservations_permissions form
 */
function theme_reservations_permissions_form($variables) {
  
  $roles = implode(", ", user_roles(FALSE, 'create reservations_reservation content'));
  
  if (!$roles) {
  
  }
  
  // These links do not work with overlay because of a core bug http://drupal.org/node/1129578
  // admin/people/permissions#module-reservations
  
  
  $instructions = 'The Reservations API makes nodes in existing content types reservable.  To do that, roles are granted the <i>edit own</i> and <i>delete own</i> permissions for each type they can reserve.  The Reservations Permission module allows users who have permission to <i>manage reservations</i> to adjust those permissions for reservable content types without needing the full <i>administer permissions</i>.  Additional permissions are required to create a Reservation.  Users need BOTH the permission to create a Reservation AND to be able to reserve at least one Content Type.';
  
  $instructions .= '<p><b>' . t("Roles that can create Reservations: ") . '</b>' .  $roles . '</p>';
  
  if (user_access('administer permissions')) {
    $instructions .= '<ul class="action-links"><li>';
    $instructions .= l('Edit Create Reservation Permission', 'admin/people/permissions', array(
  'fragment' => 'module-node')) . ' <div class="description"> found under Node in the permission grid</div>';
    $instructions .= l('Edit Additional Reservation Related Permission', 'admin/people/permissions', array(
  'fragment' => 'module-reservations')) . ' <div class="description"> found under Reservations in the permission grid</div>';
  $instructions .= '</li></ul>';
   
  } else {
    $instructions .= 'Only users with access to <i>administer permissions</i> can enable additional role to make Reservations';
  }

  $form = $variables['form'];
  $roles = user_roles();
  foreach (element_children($form['permission']) as $key) {
    // Don't take form control structures
    if (is_array($form['permission'][$key])) {
      // Module name
      $row = array();
      if (is_numeric($key)) {
        $row[] = array(
          'data' => drupal_render($form['permission'][$key]),
          'class' => array('module'),
          'id' => 'module-' . $form['permission'][$key]['#id'],
          'colspan' => count($form['role_names']['#value']) + 1,
        );
      }
      else {
        $row[] = array(
          'data' => drupal_render($form['permission'][$key]),
          'class' => array('permission'),
        );
        foreach (element_children($form['checkboxes']) as $rid) {
          if (is_array($form['checkboxes'][$rid])) {
            $form['checkboxes'][$rid][$key]['#title'] = $roles[$rid] . ': ' . $form['permission'][$key]['#markup'];
            $form['checkboxes'][$rid][$key]['#title_display'] = 'invisible';
            $row[] = array(
              'data' => drupal_render($form['checkboxes'][$rid][$key]),
              'class' => array('checkbox'),
            );
          }
        }
      }
      $rows[] = $row;
    }
  }
  $header[] = (t('Reservable Content Type'));
  foreach (element_children($form['role_names']) as $rid) {
    if (is_array($form['role_names'][$rid])) {
      $header[] = array(
        'data' => drupal_render($form['role_names'][$rid]),
        'class' => array('checkbox'),
      );
    }
  }
  $output = $instructions;
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'permissions')));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Form that allows users with just manage reservations to adjust permissions for 
 * how can edit own/delete own a content type
 */
function reservations_permissions_form($form, &$form_state) {
  //admin/reservations/manage/permissions/inventory/$tid
  $inventory = (arg(4) == 'inventory') ? arg(5) : NULL;
    
  $role_names = user_roles();

  // Retrieve role names for columns.
  $role_names = user_roles();
  // Fetch permissions for all roles or the one selected role.
  $role_permissions = user_role_permissions($role_names);

  $reservable_types = reservations_content_types();
  
  if (empty($reservable_types)) {
    drupal_set_message(t("You need to add some reservable content types to make this form useful."));
    return;
  }
  $options = array();
  $admin = array();
  
  foreach ($reservable_types as $reservable_type) {
 
    $include = FALSE;  // default to skipping the type unless 
    
    if ($inventory) {
      foreach ($reservable_type['inventory_tids'] as $tid) {
        
        if ($tid == $inventory) {
          $include = TRUE;
        }
      }
    } else {
      // if there is no inventory, include everything
      $include = TRUE;
    }
    
    if ($include) {
    
      $perm = 'reserve ' . $reservable_type['type'];
      $options[$perm] = '';
      $form['permission'][$perm] = array('#markup' => t($reservable_type['type_name']));
      
      
      
      foreach ($role_names as $rid => $name) {
        
        // Builds arrays for checked boxes for each role
        if (
          isset($role_permissions[$rid]['delete own ' . $reservable_type['type'] . ' content']) &&
          isset($role_permissions[$rid]['edit own ' . $reservable_type['type'] . ' content'])
        ) {
        $status[$rid][] = $perm;
        }
        
        if (
          isset($role_permissions[$rid]['delete any ' . $reservable_type['type'] . ' content']) &&
          isset($role_permissions[$rid]['edit any ' . $reservable_type['type']. ' content'])
        ) {
          if (!strstr($admin[$rid], 'false')) {
            $admin[$rid] = 'true';
          }
        }
        else {
          $admin[$rid] = 'false';
        }
      }
    

      
    }
  }  //include


  // Have to build checkboxes here after checkbox arrays are built
  foreach ($role_names as $rid => $name) {
    if(variable_get('reservations_permissions_' . $rid, 0)) {
    $form['checkboxes'][$rid] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => isset($status[$rid]) ? $status[$rid] : array(),
    );
    $form['role_names']['#value'][] = $name;
    $form['role_names'][$rid] = array(
      '#markup' => $name,
      '#tree' => TRUE,
    );
    }
  }
      
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Permissions'),
  );
  $form['#submit'][] = 'reservations_permissions_settings_form_submit';
  
  return $form;
}


/**
 * Process permission changes
 */
function reservations_permissions_settings_form_submit($form, &$form_state) {
    
  $result = db_query('SELECT * FROM {role}');
  
  $reservations_types = reservations_content_types();  
  $reservations_perms = reservations_permission();
  
  foreach ($result as $role) {
    if (isset($form_state['values'][$role->rid])) {

      $add_perms = array();
      $revoke_perms = array();
      foreach ($form_state['values'][$role->rid] as $key => $value) {
                 
        list($cruft, $type) = explode(' ', $key);

        $perms = array();
        if (array_key_exists($type, $reservations_types)) {
          $perms[] = "edit own $type content";
          $perms[] = "delete own $type content";
          if ($value) {
            // before adding, check to see if the role has the permission
            $perm_exists_to_add = db_query('SELECT COUNT(rid) FROM {role_permission} WHERE rid = :rid and permission = :permission', array(':rid' => $role->rid, ':permission' => 'edit own ' . $type . ' content'))->fetchField();
            if (!$perm_exists_to_add) {
              $add_perms = array_merge($perms, $add_perms);
            }    
          }
          else {
            // before revoking, check to see if the role has the permission
            // trying to revoke a permission the role doesn't have causes an error
            $perm_exists_to_revoke = db_query('SELECT COUNT(rid) FROM {role_permission} WHERE rid = :rid and permission = :permission', array(':rid' => $role->rid, ':permission' => 'edit own ' . $type . ' content'))->fetchField();
            if ($perm_exists_to_revoke) {
              $revoke_perms = array_merge($perms, $revoke_perms);
            }
          }
        }

        elseif (array_key_exists($key, $reservations_perms)) {
          if ($value) {
            $add_perms[] = $key;
          }
          else {
            $revoke_perms[] = $key;
          }
        }
      }
      
      if ($add_perms) {
        user_role_grant_permissions($role->rid, $add_perms);
        $message = 'Permissions added';
      }
            
      if ($revoke_perms) {
        user_role_revoke_permissions($role->rid, $revoke_perms);
        if (isset($message)) {
          $message .= ' and revoked';
        }  else {
          $message = 'Permissions revoked';
        }
      }
    }
  }
  
  if (!isset($message)) {
    $message = t('No permission changes made');
  }
  
  drupal_set_message($message);
}

