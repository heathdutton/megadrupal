<?php

/**
 * @file
 * reservations_printable_contract functions
 */

/**
 * Implements hook_menu().
 */
function reservations_printable_contract_menu() {

  $items['node/%node/contract'] = array(
    'title' => 'Contract',
    'description' => 'Takes a node object and returns a printable contract',
    'page arguments' => array(1),
    'page callback' => 'reservations_printable_contract',
    'access callback' => 'reservations_printable_contract_content_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  // Standard Administration settings.
  $items['admin/config/reservations/contract'] = array(
    'title' => 'Printable Contract',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservations_printable_contract_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer reservations'),
    'description' => 'Configure settings for Reservations Printable Contract.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function reservations_printable_contract_permission() {
  return array(
   'view reservations contract' => array(
      'title' => '<em class="placeholder">Reservations</em>: View Contract',
      'description' => t('Allows users to access the Printable Contract tab added to Reservation nodes.'))
  );
}

/**
 * controls which users see the Printable Contract tab and the contract
 */
function reservations_printable_contract_content_access($node) {
  return (user_access('view reservations contract') && $node->type == 'reservations_reservation');
}

/**
 * Implements hook_theme().
 */
function reservations_printable_contract_theme() {

  return array(
    'reservations_printable_contract' => array(
      'template' => 'reservations-printable-contract',
      'variables' => array('node' => NULL),
    ),
  );
}

/**
 * Builds the admininstration settings form.
 */
function reservations_printable_contract_admin_settings($form, &$form_state) {

  $form['reservations_contract_header'] = array(
    '#type' => 'textarea',
    '#title' => t('Contract header'),
    '#rows' => 10,
    // TODO: this doesn't seem to work...
    '#cols' => 5,
    '#default_value' => variable_get('reservations_contract_header', ''),
    '#description' => t('Header portion of printable contract.  Allows HTML.'),
  );

  $form['reservations_contract_boilerplate'] = array(
    '#type' => 'textarea',
    '#title' => t('Contract boilerplate'),
    '#rows' => 10,
    // TODO: this doesn't seem to work...
    '#cols' => 5,
    '#default_value' => variable_get('reservations_contract_boilerplate', ''),
    '#description' => t('Legalese that makes the contract legally binding.'),
  );

  $form['reservations_contract_footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Contract footer'),
    '#rows' => 10,
    // TODO: this doesn't seem to work...
    '#cols' => 5,
    '#default_value' => variable_get('reservations_contract_footer', ''),
    '#description' => t('Footer portion of printable contract. Normally includes signature lines. HTML allowed.'),
  );

  if (module_exists('token')) {
    $form['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    // TODO Please change this theme call to use an associative array for the $variables parameter.
    $form['token_help']['help'] = array(
      '#value' => theme('token_help', 'node'),
    );
  }

  return system_settings_form($form);
}

/**
 * Returns contract with only the settings in reservations-printable-contract.tpl
 */
function reservations_printable_contract($node) {
  print theme('reservations_printable_contract', array('node' => $node));
}


/**
 * Variables sent to reservations-printable-contract.tpl
 */
function reservations_preprocess_reservations_printable_contract(&$variables) {

  $node = $variables['node'];
  setlocale(LC_MONETARY, 'en_US');

  $user     = user_load($node->uid);
  $username = $user->name;
  $email    = $user->mail;
  if (module_exists('civicrm')) {

    civicrm_initialize(TRUE);
    global $civicrm_root;

    require_once $civicrm_root . '/CRM/Core/BAO/UFMatch.php';
    $userID = CRM_Core_BAO_UFMatch::getContactId( $user->uid );

    $cg = array('contact_id' => $userID);
    include_once $civicrm_root . '/api/v2/Contact.php';
    $ob = civicrm_contact_get($cg);
    //update username
    $username = $ob[$userID]['display_name'];
    $phone = $ob[$userID]['phone'];
  }

  $items = $node->reservations_reservation_items;

  $langcode = $node->language;
  // Convert to site timezone.
  $start_date       = reservations_create_local_date_object($node->field_reservations_date[$langcode][0]['value']);
  $end_date         = reservations_create_local_date_object($node->field_reservations_date[$langcode][0]['value2']);

  $hours = round((intval(date_format($end_date, "U")) - intval(date_format($start_date, "U"))) / 3600, 2);

  $variables['start_date'] = format_date($start_date->format('U'));
  $variables['end_date'] = format_date($end_date->format('U'));
  $variables['hours'] = $hours;
  $variables['username'] = $username;
  $variables['email'] = $email;
  $variables['phone'] = $phone;
  $variables['items'] = $items;

}


