<?php

/**
 * @file
 * reservations_staff functions
 */

/**
 * Implements hook_menu().
 */

function reservations_staff_menu() {
  $items = array();
  
  $items['admin/config/reservations/staff'] = array(
    'title' => 'Staff Settings',
    'description' => 'Configuration options for the Reservations Staff.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservations_staff_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Builds the Reservations admininstration settings form.
 */
function reservations_staff_admin_settings($form, &$form_state) {
  $form = array();
  
  $form['reservations_staff_override_by_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set Override by Default'),
    '#default_value' => variable_get('reservations_staff_override_by_default', 0),
    '#description' => t('If this is checked, reservations will be overridden by default for staff.  This is useful when launching Reservations and role/groups permissions are not configured.'),
  );

  return (system_settings_form($form));
}


/**
 * Implements hook_load_user().
 */
function reservations_staff_load_user($post = NULL) {
  static $admin_user;
  global $user;
  if (empty($admin_user)) {
    $admin_user = $user;
  }
  if ($post and isset($post['override']) and !$post['override'] and ($newuser = array_shift(user_load_multiple(array(), array('name' => $post['name']))))) {
    $user = $newuser;
  }
  else {
    $user = $admin_user;
  }
}

// function reservations_staff_field_widget_form_alter(&$element, &$form_state, $context) {
//   
//   // TODO: need to set the og field in og2.x... can't rely on this field title
//   if(isset($element['#field_name']) && $element['#field_name'] == 'group_audience') {
//     
//     if (isset($form_state['complete form']) && $form_state['complete form']['override']['#value']) {
//       
//       //@TODO: see if this can be simlified with drupal_alter('og_audience_options'
//     
//       $user = user_load_by_name($form_state['complete form']['name']['#value']);
//       $groups = og_get_entity_groups('user', $user);
//        
//       $authors_group_options = array();
//     
//       foreach ($groups as $gid) {
//         $group = og_get_group('group', $gid);
//         $authors_group_options[$gid] = $group->label;
//       }
//    
//       $authors_groups = $user->name . '\'s Groups';
// 
//       $moregroups[$authors_groups] = $authors_group_options;
//       $element['#options'] = array_merge($moregroups, $element['#options']);
//     
//     } else {
//       
//       // when we are NOT overriding, check to see 
//       // if the users has ANY projects 
//       // if they do NOT, add bogus project to the list 
//       // if we don't do this, the list for the logged in user
//       // continues to be shown
//       
//       $user = user_load_by_name($form_state['complete form']['name']['#value']);
//       $groups = og_get_entity_groups('user', $user);
//       if (!$groups) {
//         $element['#options'] = array(NULL => 'This User Has No Groups');
//       }
//     }
//   }
// 
// }

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reservations_staff_form_reservations_reservation_node_form_alter(&$form, &$form_state) {
 
  if (user_access('manage reservations')) {
    
    //dsm($form);
    
    if (isset($form_state['node'])) {
      $node = (array) $form_state['node'] + (array) $form['#node'];
    }
    else {
      $node = $form['#node'];
    }
    $node = (object) $node;
         
    // Move the author field and set autocomplete and ahah handlers.
    // We do this here and not in after_build because the ahah hash is handled before after_build is called.
    $form['name'] = $form['author']['name'];
    $form['name']['#title'] = 'Reserve for';
    $form['name']['#weight'] = -99;
    
    if (module_exists('civicrm_user_reference')) {
      $form['name']['#autocomplete_path'] = 'civicrm_user_reference/autocomplete-nouid';
    }
    $form['name']['#ajax'] = array(
      'callback' => 'reservations_staff_update_name',
      'wrapper' => 'reservations-staff-edit-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );
    
    unset($form['author']['name']);

    //create override checkbox
    $form['override'] = array(
      '#type' => 'checkbox',
      '#title' => 'Override Validation',
      '#default_value' => isset($node->override) ? $node->override : variable_get('reservations_staff_override_by_default', 0),
      '#weight' => -97,
      '#columns' => 0,
    );
    $form['override']['#ajax'] = array(
      'callback' => 'reservations_staff_update_name',
      'wrapper' => 'reservations-staff-edit-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );
    $form['#prefix'] = '<div id="reservations-staff-edit-form-wrapper">';
    $form['#suffix'] = '</div>';
    
  }
  
  if (isset($form_state['values'])) {
    $node = (array)$form_state['values'] + (array)$form['#node'];
  }
  else {
    $node = $form['#node'];
  }
  $node = (object) $node;
  // Override the validation function so we can validate as the submitted user.
  $form['#reservations_staff_validated'][] = 'reservations_reservation_node_validate';
  $form['#validate'][] = 'reservations_staff_reservation_node_validate';

  foreach ($form['#reservations_staff_validated'] as $function) {
    $key = array_search($function, $form['#validate']);
    if (is_numeric($key)) {
      unset($form['#validate'][$key]);
    }
  }

  // Recreate choices based on the submitted name.
  reservations_staff_load_user((array) $node);

  global $user;
  
  // this is NOT necessary if revisions is working
  // $form['field_reservations_user'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $user->name;
  // Add the current choices to the form.
  $reset = TRUE;

  foreach (element_children($form['choice_wrapper']['reservations_reservation_items']) as $delta) {
    if (is_numeric($delta)) {
      continue;
    }
    $delta = drupal_substr($delta, 7);
    $default = isset($node->reservations_reservation_items["choice_" . $delta]['reservations_item_nid']) ? $node->reservations_reservation_items["choice_" . $delta]['reservations_item_nid'] : '';
    
    
  // was  function reservations_build_reservable_items($node, $form_state, $reservation_nid = NULL) {
  $reservation_nid = isset($node->nid) ? $node->nid : NULL;
  
  $inventory = module_exists('reservations_inventory') ? reservations_inventory_set_inventory($node) : NULL;
    
  $langcode = $node->language;
  // Newly set dates take precedence.
  if (isset($form_state['values']['field_reservations_date'][$langcode][0]['value']['date'])) {
    
    $start_string = $form_state['values']['field_reservations_date'][$langcode][0]['value']['date'] . ' ' . $form_state['input']['field_reservations_date'][$langcode][0]['value']['time'];
    $end_string = $form_state['values']['field_reservations_date'][$langcode][0]['value2']['date'] . ' ' . $form_state['input']['field_reservations_date'][$langcode][0]['value2']['time'];
    
    $start_object = reservations_create_local_date_object($start_string);
    $end_object = reservations_create_local_date_object($end_string);
  
    if($start_object) {
      $start = date_format($start_object, DATE_FORMAT_DATETIME); 
      $end = date_format($end_object, DATE_FORMAT_DATETIME);
    } else {
      $start     = NULL;
      $end       = NULL;
    }
    
  }
  // Dates loaded from the reservation are next.
  elseif (isset($node->nid)) {
    $date_info = $node->field_reservations_date[$langcode][0];
    $start     = $date_info['value'];
    $end       = $date_info['value2'];
  }
  // New reservation, so no date filtering.
  else {
    $is_new = TRUE;
    $start     = NULL;
    $end       = NULL;
  }
    
  $options = array();
  $options_disabled = array();
  
  $options['options'][''] = '<' . t('Select') . '>';
  $default = NULL;
  
  $vid = variable_get('reservations_grouping_vid', 0);
  
  
  $terms = taxonomy_get_tree($vid);
  //add check to see if there are any terms
  foreach ($terms as $term) {
    $options['options'][$term->name] = array();
  }
  
  $reservable_types = reservations_content_types();
  
  // This array holds all reservable items the user may reserve.
  // Loop through each reserable type.
  foreach ($reservable_types as $reservable_type) {

    $include = FALSE;  // default to skipping the type unless 
        
    if ($inventory) {     
      if (!empty($reservable_type['inventory_tids'])) {
        foreach ($reservable_type['inventory_tids'] as $tid) {
          if ($tid == $inventory) {
            $include = TRUE;
          }
        }
      }
    } else {
      // if there is no inventory, include everything
      $include = TRUE;
    }
    
    if ($include) {
     
	  if ($reservable_type['reservations_active_status'] != RESERVATIONS_STATUS_ACTIVE) {
	    continue;
	  }
	  
	  if (!reservations_check_content_type_user_permissions($reservable_type['type'])) {
	    continue;
	  }
	  
	  if (empty($is_new)) {
	    $restrictions = reservations_check_content_type_restrictions($reservable_type['type'], $start, $end);
		  if (!empty($restrictions)) {
		    continue;
		  }
	  }
	  
	  //set the grouping to Other if there isn't one
	  $grouping = isset($reservable_type['reservations_item_grouping']) ? $reservable_type['reservations_item_grouping'] : 'Other';
	  	
	  // if it's a bucket, add it to the select list
	  if ($reservable_type['reservations_type_setting'] == 'bucket') {
	    
	    	  
	    // Check for available items in the bucket at the time when time is included
	    $available_bucket_items = reservations_get_available_bucket_count($reservable_type['type'], $start, $end, $reservation_nid) - $reservable_type['reservations_spare_items'];
		  if ($available_bucket_items) {
		    $options['options'][$grouping][$reservable_type['type']] = $reservable_type['type_name'];
		  } else {
		    //disable item in list
		    $options_disabled['options'][$grouping][$reservable_type['type']] = $reservable_type['type_name'];
		    
		    
		  }
	
	   } 
	   //PROCESS RESOURCES
	   elseif ($reservable_type['reservations_type_setting'] == 'resource') {
	     // No date filtering for new reservations.
	     //dsm($reservable_type['type']);
		 $item_options = reservations_get_reservable_items($reservable_type['type'], $start, $end, $reservation_nid);
		 
		 
		 if (!empty($item_options)) {
		   //dsm($item_options);
		   foreach ($item_options as $key => $item) {
		     
			 $options['options'][$grouping][$key] = $item;
		    }
		  } else {
		     if (isset($item)) {
		       $options_disabled['options'][$grouping][$key] = $item;
         }
		    //disable item in list
		  }
	   }  
    } // $inventroy include
  }

  //dsm($options['options']);
  
  // Remove grouping keys with no items.
  foreach ($terms as $term) {
    if (empty($options['options'][$term->name])) {
      unset ($options['options'][$term->name]);
    }
  }
  
    
    //$form['choice_wrapper']['reservations_reservation_items']["choice_" . $delta]['reservations_item_nid'] = _reservations_choice_form($node, $form_state, $delta, $default, $reset);
    
    $form['choice_wrapper']['reservations_reservation_items']["choice_" . $delta]['reservations_item_nid'] = array(
      '#type' => 'select',
      '#options' => $options['options'],
      '#default_value' => $default,
      //'#parents' => array('choice', $delta, 'item'),
    );
    
    $reset = FALSE;
  }
  reservations_staff_load_user();
}

/**
 * Implements hook_node_validate().
 */
function reservations_staff_reservation_node_validate($form, &$form_state) {
  //dsm('reservations_staff_reservation_node_validate');
  reservations_staff_load_user($form_state['values']);
  foreach ($form['#reservations_staff_validated'] as $function) {
    $function($form, $form_state);
  }
  reservations_staff_load_user();
}

/**
 * Menu callback that reprocesses the form with the new author
 */
function reservations_staff_update_name($form, $form_state) {
  return $form;
}


