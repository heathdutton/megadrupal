<?php

/**
 * @file
 * reservations_ui functions
 */

/**
 * Implements hook_views_api().
 */
function reservations_ui_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'reservations_ui'),
  );
}

/**
 * Implements hook_preprocess_views_view().
 */
function reservations_ui_preprocess_views_view(&$variables) {
  if (isset($variables['name'])) {
    if ($variables['name'] == 'reservations_ui_user_reservations' or $variables['name'] == 'reservations_ui_node_reservations') {
      $output = '<div id="make-reservations-reservation">';
      $output .= l(t('Make a Reservation'), 'node/add/reservations-reservation');
      $output .= '</div>';
      $variables['footer'] .= $output;
    }
  }
}

/**
 * Implements hook_menu().
 */
function reservations_ui_menu() {
  $items = array();
  

  // Configuration.
  $items['admin/reservations'] = array(
    'title' => 'Reservations',
    'description' => 'Reservations.',
    'page callback' => 'reservations_ui_management_page',
    'access arguments' => array('manage reservations'),
  );
  
  // Adds Block of Menu Options
  $items['admin/reservations/manage'] = array(
      'title' => 'Manage Reservations',
      'description' => 'Adds Menu options',
      'position' => 'left',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('manage reservations'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'weight' => -99,
  );
  
  // Standard Administration settings.
  $items['admin/config/reservations/ui'] = array(
    'title' => 'UI Options',
    'description' => 'Configuration options for the Reservations UI.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservations_ui_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
        
  $items['admin/reservations/manage/add'] = array(
    'title' => 'Make Reservation',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/reservations-reservation'),
    'access arguments' => array('manage reservations'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -50,
  );

  $items['admin/reservations/manage/current_inventory'] = array(
    'title' => 'Current Inventory',
    'description' => 'List Reservable Content Types with the number On Hand, Checked Out, Temporarily Unavailable, ',
    'page callback' => 'theme',
    'page arguments' => array('reservations_ui_current_inventory'),
    'access arguments' => array('manage reservations'),
    'type' => MENU_NORMAL_ITEM,
  );
      
  $items['node/%node/reservations-list'] = array(
    'title' => 'Reservations',
    'description' => 'Takes node object and returns reservations',
    'page callback' => 'reservations_ui_reservations',
    'page arguments' => array(1),
    'access callback' => 'reservations_ui_display_reservations_tab',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 13,
  );

  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function reservations_ui_admin_settings($form, &$form_state) {
 
  $form['reservations_ui_hide_content_types'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Reservable Content Types in Standard Structure -> Content Types and Node Add lists'),
    '#default_value' => variable_get('reservations_ui_hide_content_types', 0),
    '#description' => t(''),
  );

  return system_settings_form($form);
}

/**
 * Controls display of Reservations Tab on Reservable content types
 */
function reservations_ui_display_reservations_tab($node) {
  if (isset($node->reservations_type_setting) && $node->reservations_type_setting <> 'disabled') {
    return TRUE;
  }
}

/**
 * Adds Tab to Reservable content types with list of related Reservation nodes 
 * if criteria from reservation_ui_display_reservations_tab returns TRUE
 */
function reservations_ui_reservations($node) {

  $args = array($node->nid);
  $view = views_get_view('reservations_ui_node_res');
  $output = $view->execute_display('default', $args);

  return $output;
}

/**
 * Implements hook_theme().
 */
function reservations_ui_theme() {
  return array(
    'reservations_ui_current_inventory' => array(
      'path' => drupal_get_path('module', 'reservations_ui') . '/theme',
      'file' => 'theme.inc',
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function reservations_ui_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  
  if ($form['#id'] == 'views-exposed-form-reservations-ui-node-res-default') {
    $form['#action'] = '/node/' . arg(1) . '/manage-reservations';
  } 
}

/**
 * Menu callback; Provide the administration overview page.
 */
function reservations_ui_management_page() {

  $blocks = array();
  if ($admin = db_query("SELECT menu_name, mlid FROM {menu_links} WHERE link_path = 'admin/reservations'")->fetchAssoc()) {
    $result = db_query("
      SELECT m.*, ml.*
      FROM {menu_links} ml
      INNER JOIN {menu_router} m ON ml.router_path = m.path
      WHERE ml.link_path <> 'admin/help' AND menu_name = :menu_name AND ml.plid = :mlid AND hidden = 0", $admin, array('fetch' => PDO::FETCH_ASSOC));
    foreach ($result as $item) {
      _menu_link_translate($item);
      if (!$item['access']) {
        continue;
      }
      // The link description, either derived from 'description' in hook_menu()
      // or customized via menu module is used as title attribute.
      if (!empty($item['localized_options']['attributes']['title'])) {
        $item['description'] = $item['localized_options']['attributes']['title'];
        unset($item['localized_options']['attributes']['title']);
      }
      $block = $item;
      $block['content'] = '';
      $block['content'] .= theme('admin_block_content', array('content' => system_admin_menu_block($item)));
      if (!empty($block['content'])) {
        $block['show'] = TRUE;
      }

      // Prepare for sorting as in function _menu_tree_check_access().
      // The weight is offset so it is always positive, with a uniform 5-digits.
      $blocks[(50000 + $item['weight']) . ' ' . $item['title'] . ' ' . $item['mlid']] = $block;
    }
  }
  if ($blocks) {
    ksort($blocks);
    return theme('admin_page', array('blocks' => $blocks));
  }
  else {
    return t('You do not have any administrative items.');
  }
}


/**
 * Implements hook_form_alter().
 */
function reservations_ui_form_alter(&$form, $form_state, $form_id) {
  //dsm($form);
}

/**
 * Implements hook_menu_alter().
 *
 * This might actually be the least gross way to override the node/add page.
 */
function reservations_ui_menu_alter(&$items) {

  $items['node/add']['page callback'] = 'reservations_ui_node_add_page';
  $items['node/add']['file'] = 'reservations_ui.pages.inc';
  $items['node/add']['file path'] = drupal_get_path('module', 'reservations_ui');
  
}
  

