<?php


/**
 * @file
 * reservations Installer / Uninstaller
 */

/**
 * Implements hook_install().
 */
function reservations_install() {
  reservations_create_fields();
  reservations_add_group_taxonomy();
}

/**
 * Implements hook_uninstall().
 */
function reservations_uninstall() {

  // Delete the vocabulary.
  $vid = variable_get('reservations_grouping_vid', '');
  taxonomy_vocabulary_delete($vid);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_reservations_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the reservations_reservation
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'reservations_reservation');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Remove all Reservations variables.
  $variables = db_query("SELECT name FROM {variable} WHERE name LIKE 'reservations_%'");
  foreach ($variables as $variable) {
    variable_del($variable->name);
  }

  // Remove all Reservations all associated nodes
  // No longer removes content types
  $content_types = db_query("SELECT type FROM {reservations_node_type} WHERE reservations_type_setting <> :type_setting", array(':type_setting' => 'disabled'));

  $nids = array();
  foreach ($content_types as $content_type) {
    // TODO Please convert this statement to the D7 database API syntax.
    $nodes = db_query("SELECT nid FROM {node} n WHERE n.type = :type", array(':type' => $content_type->type));
    foreach ( $nodes as $node ) {
      $nids[] = $node->nid;
    }
  }

  // Remove the programatically created reservation node type
  // and all associated nodes.
  $nodes = db_query("SELECT nid FROM {node} n WHERE n.type = :type", array(':type' =>  'reservations_reservation'));
  foreach ( $nodes as $node ) {
    $nids[] = $node->nid;
  }

  // Delete all the nodes at once
  node_delete_multiple($nids);

  // @TODO: temporarily enable the reservations_reservation content type before deleting it
  // remove this when the issue with node_type_delete is resolved http://drupal.org/node/943588 
  db_update('node_type')
    ->fields(array(
      'disabled' => 0,
    ))
    ->condition('type', 'reservations_reservation', '=')
    ->condition('disabled', 1, '=')
    ->execute();

  // Clear the node type cache
  node_type_cache_reset();

  // Delete node type
  node_type_delete('reservations_reservation');

  field_purge_batch(1000);

}

/**
 * Implements hook_enable().
 */
function reservations_enable() {

    // Build or rebuild the reservations_node_type based on node_type

    $new_types = db_query("SELECT node_type.type AS type FROM node_type LEFT JOIN reservations_node_type ON node_type.type = reservations_node_type.type WHERE reservations_node_type.type IS NULL");
  
  
  
  foreach ($new_types as $new_type) {    
    $id = db_insert('reservations_node_type')
  ->fields(array(
      'type' => $new_type->type,
    ))
  ->execute();
  }
  //reservations_check_default_timezone();
   
}

/**
 * Implements hook_schema().
 */
function reservations_schema() {

  $schema['reservations_node_type'] = array(
    'description' => 'Stores reservation settings for each content types.',
    'fields' => array(
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => "Foreign key for {node_type}.type.",
      ),
      'reservations_type_setting' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'disabled',
        'description' => "The Reservations type for the selected content type.",
      ),
      'reservations_max_hours_per_reservation' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The maximum hours that the resource can be reserved for.",
      ),
      'reservations_allow_overnight' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource can be kept overnight.",
      ),
      'reservations_push' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource can be kept over weekends.",
      ),
      'reservations_late_fee_per_hour' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Per hour fee if the resource is returned late.",
      ),
      'reservations_rate_per_hour' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Per hour fee for use of the resource.",
      ),
      'reservations_fee_free_hours' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Number of hours the item can be used before fees are charged.",
      ),
      'reservations_active_status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The status of the resource.",
      ),
      'reservations_spare_items' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Number of spare items to leave unreserved for the resource.",
      ),
      'reservations_min_cancel_hours' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Minimum number of hours a user can cancel a reservation for the item.",
      ),
      'reservations_autocheckout' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is automatically checked out when Reservation starts.",
      ),
      'reservations_autocheckin' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is automatically checked in when Reservation starts.",
      ),
      'reservations_selfcheckout' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is managed by selfcheckout.",
      ),
      'reservations_grouping' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => "tid of Reservations Equipment Grouping vocabulary",
      ),
      'reservations_auto_assign_bucket_item' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'description' => "TRUE if the bucket item is to be assigned automatically.",
      ),
    ),
    'primary key' => array('type'),
  );

  $schema['reservations_reservation'] = array(
    'description' => 'Stores bookings reservations.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "The reservations's associated nid.",
      ),
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "The reservations's associated vid.",
      ),
      'reservations_reservation_status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Finalized bookings cannot have time conflicts with each other. Finalized availabilities must be obeyed.',
      ),
    ),
    'primary key' => array('nid', 'vid'),
  );

  $schema['reservations_reservation_detail'] = array(
    'description' => 'Stores details on resources reserved.',
    'fields' => array(
      'did' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Unique ID for the reservation detail entry.',
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Foreign key for {reservations_reservation}.nid.',
      ),
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Foreign key for {reservations_reservation}.vid.',
      ),
      'reservations_placeholder_nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The nid for an associated reservation placeholder node for the reservation.',
      ),
      'reservations_item_nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The nid for an item node associated with the reservation placeholder node for the reservation.',
      ),
      'reservations_item_status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The status of the item associated in the item_nid column.',
      ),
    ),
    'primary key' => array('did'),
    'indexes' => array(
      'nids' => array('nid', 'vid', 'reservations_placeholder_nid', 'reservations_item_nid'),
      'reservations_item_status' => array('reservations_item_status'),
    ),
  );

  $schema['reservations_bucket_node'] = array(
    'description' => 'Stores information on bookable bucket nodes.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The bookable resource nid.",
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The bookable resource vid.",
      ),
      'reservations_default_availability' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
        'description' => 'Default availability of the resource.',
      ),
      'reservations_late_fee_per_hour' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Per hour fee if the resource is returned late.",
      ),
      'reservations_rate_per_hour' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Per hour fee for use of the resource.",
      ),
      'reservations_fee_free_hours' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Number of hours the item can be used before fees are charged.",
      ),
      'reservations_min_cancel_hours' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Minimum number of hours a user can cancel a reservation for the item.",
      ),
      'reservations_autocheckout' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is automatically checked out when Reservation starts.",
      ),
      'reservations_autocheckin' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is automatically checked in when Reservation starts.",
      ),
      'reservations_selfcheckout' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is managed by selfcheckout.",
      ),
      'reservations_sub_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The subtype of bucket node, either item or reservation.",
      ),
    ),
    'primary key' => array('nid', 'vid'),
  );

  $schema['reservations_resource_node'] = array(
    'description' => 'Stores information on bookable resource nodes.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The bookable resource nid.",
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The bookable resource vid.",
      ),
      'reservations_default_availability' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
        'description' => 'Default availability of the item .',
      ),
      'reservations_late_fee_per_hour' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Per hour fee if the resource is returned late.",
      ),
      'reservations_rate_per_hour' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Per hour fee for use of the resource.",
      ),
      'reservations_fee_free_hours' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Number of hours the item can be used before fees are charged.",
      ),
      'reservations_min_cancel_hours' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Minimum number of hours a user can cancel a reservation for the item.",
      ),
      'reservations_autocheckout' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is automatically checked out when Reservation starts.",
      ),
      'reservations_autocheckin' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is automatically checked in when Reservation starts.",
      ),
      'reservations_selfcheckout' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => "TRUE if the resource is managed by selfcheckout.",
      ),
      'reservations_sub_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The subtype of resource node, either item or reservation.",
      ),
    ),
    'primary key' => array('nid', 'vid'),
  );
  $schema['reservations_reservation_item_node'] = array(
    'description' => 'Stores information on bookable resource and bucket nodes.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The bookable resource nid.",
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The bookable resource vid.",
      ),
      'reservations_default_availability' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
        'description' => 'Default availability of the item .',
      ),
      'reservations_sub_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The subtype of resource node, either item or reservation.",
      ),
      'reservations_item_status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The status of the item associated in the item_nid column.',
      ),
    ),
    'primary key' => array('nid', 'vid'),
    'indexes' => array(
      'reservations_sub_type' => array('reservations_sub_type'),
    ),
  );

  return $schema;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function reservations_create_fields() {

  foreach (_reservations_installed_fields() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  foreach (_reservations_installed_instances() as $instance) {
    field_create_instance($instance);
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function reservations_add_group_taxonomy() {
  // borrowed from Forum module

  // Create the forum vocabulary if it does not exist. Assign the vocabulary
  // a low weight so it will appear first in forum topic create and edit
  // forms.
  // Delete the vocabulary.
  $vid = variable_get('reservations_grouping_vid', '');
  if (!taxonomy_vocabulary_load($vid)) {
    $vocabulary = array(
      'name' => t('Reservable Content Type Groups'),
      'machine_name' => 'reservations_group',
      'description' => 'Taxonomy for grouping buckets and resources',
      'multiple' => 0,
      'required' => 0,
      'hierarchy' => 0,
      'relations' => 0,
      'module' => 'reservations',
      'weight' => -10,
    );
    $vocabulary_obj = (object)$vocabulary;;
    taxonomy_vocabulary_save($vocabulary_obj);

    variable_set('reservations_grouping_vid', $vocabulary_obj->vid);
  }
}

function _reservations_installed_instances() {

  $short_date_format = variable_get('date_format_short', 'm/d/Y - H:i');

  return  array(
    'field_reservations_date' => array(
      'field_name' => 'field_reservations_date',
      'label' => 'Reservation Dates',
      'description' => '',
      'weight' => -10,
      'required' => '1',
      'entity_type' => 'node',
      'bundle' => 'reservations_reservation',

      'widget' => array(
        'weight' => '-1',
        'type' => 'date_popup',
        'module' => 'date',
        'description' => 'Select the start and end times for your reservation.',
        'settings' => array(
        'input_format' => $short_date_format,
        'increment' => '15',
        'year_range' => '-3:+3',
        'label_position' => 'above',
      ),
    ),
      'settings' => array(
        'default_value' => 'blank',
        'default_value2' => 'same',
        ),
      ),
  );
}

function _reservations_installed_fields() {

  // Create the date field for the reservation.
  return array(
    'field_reservations_date' => array(
      'field_name' => 'field_reservations_date',
      'type' => 'datetime',
      'entity_types' => array('node'),

      'module' => 'date',
      'locked' => '1',
      'settings' => array(
        'repeat' => 0,
        'todate' => 'required',
        'granularity' => array(
          'year' => 'year',
          'month' => 'month',
          'day' => 'day',
          'hour' => 'hour',
          'minute' => 'minute',
        ),
        'tz_handling' => 'site',
        'timezone_db' => 'UTC',
      ),
    ),
  );
}

function reservations_update_7001() {
  $days_of_the_week = array(
    'sun',
    'mon',
    'tue',
    'wed',
    'thu',
    'fri',
    'sat',
  );

  $hours_of_operation = array();
  foreach ($days_of_the_week as $num => $day) {
    $hours = variable_get('reservations_hours_' . $day, '');
    if (empty($hours)) {
      $hours_of_operation[$num] = FALSE;
    }
    else {
      list ($open, $close) = explode('-', $hours);
      $hours_of_operation[$num]['open'] = trim($open);
      $hours_of_operation[$num]['close'] = trim($close);
    }
  }

  $closed_days_raw = variable_get('reservations_closed_dates', '');
  $hours_of_operation['closed_days'] = array();
  $parts = explode("\n", $closed_days_raw);
  foreach ($parts as $date) {
    $date = trim($date);
    if (drupal_strlen($date) == 5) {
      $hours_of_operation['closed_days'][] = $date;
    }
  }
  variable_set('reservations_hours_operation', $hours_of_operation);
  return array(array('success' => TRUE, 'query' => 'Should only be doing db updates.  But I am doing a lot more.'));
}

function reservations_update_7002() {

  $spec = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'description' => 'tid of Reservations Grouping vocabulary'
  );
  db_change_field('reservations_node_type', 'reservations_grouping', 'reservations_grouping', $spec);
}
