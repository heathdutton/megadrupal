<?php
/**
 * @file
 * Synchronizes menu links between languages.
 */

// Integration with menu_link_weight module.
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'menu_link_sync') . '/menu_link_sync.menu_link_weight.inc';

// Weight for the top element. Randomly chosen low number.
define('MENU_LINK_SYNC_TOP_WEIGHT', -99999);

// Weight for the bottom element. Randomly chosen high number.
define('MENU_LINK_SYNC_BOTTOM_WEIGHT', 99999);

/**
 * Gets the name for the button we want to use.
 *
 * Confirmed this works fine with Admin Language / different languages.
 *
 * @return string
 *   Translated text to show on the button.
 */
function menu_link_sync_get_button_text() {
  return t('Sync menu link from source');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_link_sync_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Make sure we have a source node and that the menu options are visible.
  if (!_menu_link_sync_node_form_has_source_node($form) || !isset($form['menu'])) {
    return;
  }

  // Flag to indicate we want the "menu_link_sync_process_menu_form" process
  // function to run for the "menu" fieldset form element.
  $form['menu']['#process_menu_link_sync_sync_button'] = TRUE;

  $form['menu']['menu_link_sync_wrapper_begin'] = array(
    '#markup' => '<div id="menu-link-sync-menu-wrapper">',
    // Make sure this "markup" element is at the top by using a low weight.
    '#weight' => MENU_LINK_SYNC_TOP_WEIGHT,
  );

  $form['menu']['menu_link_sync_sync_button'] = array(
    // Make sure this "submit" element is just underneath the wrapper, under
    // the "No result found" error (if applicable) with weight + 1
    '#weight' => MENU_LINK_SYNC_TOP_WEIGHT + 2,
    '#description' => t('Click here to synchronize the menu link to the translation source.'),
    '#type' => 'submit',
    '#value' => menu_link_sync_get_button_text(),
    '#ajax' => array(
      'callback' => 'menu_link_sync_ajax_callback',
      'keypress' => TRUE,
    ),
  );

  $form['menu']['menu_link_sync_wrapper_end'] = array(
    '#markup' => '<!-- menu_link_sync end --></div>',
    // Make sure this markup element is at the bottom by using a high weight.
    '#weight' => MENU_LINK_SYNC_BOTTOM_WEIGHT,
  );

  $form['#attached']['js'][] = drupal_get_path("module", "menu_link_sync") . "/menu_link_sync.js";
}

/**
 * Helper function to find out if node form has a translation source node.
 *
 * @param array $form
 *   The form array.
 *
 * @return bool
 *   TRUE if it has a source node, FALSE if it does not have a source node.
 */
function _menu_link_sync_node_form_has_source_node(array $form) {
  if (!empty($form['#node']->translation_source->nid)) {
    // We have a source node!
  }
  elseif (!empty($form['nid']['#value'])) {
    if (empty($form['#node']->tnid) || $form['#node']->tnid === $form['#node']->nid) {
      // No source node found. Abort.
      return FALSE;
    }
  }
  else {
    // No source node found. Abort.
    return FALSE;
  }
  return TRUE;
}

/**
 * AJAX form callback for the "Sync" button.
 */
function menu_link_sync_ajax_callback($form, $form_state) {
  $html = drupal_render($form['additional_settings']);
  // Extract the wrapped elements.
  preg_match('#.*(<div id="menu-link-sync-menu-wrapper">.*<!-- menu_link_sync end --></div>).*#s', $html, $matches);
  if (isset($matches[1])) {
    return array(
      '#type' => 'ajax',
      '#commands' => array(
        // We have to set the wrapper inside the fieldset so as to not break
        // the vertical tabs.
        ajax_command_replace("#menu-link-sync-menu-wrapper", $matches[1]),
        // If no "Menu link title" is defined in the node input form, we will
        // simulate two clicks on the "Provide a menu link" checkbox so we
        // can synchronize the "Menu link title" with the "Node title".
        array('command' => 'menuLinkSyncProcessMenuLinkTitle'),
      ),
    );
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @see https://drupal.stackexchange.com/questions/49216/how-to-add-a-process-callback-to-a-fieldset-form-element-without-overwriting-th
 */
function menu_link_sync_element_info_alter(&$types) {
  $types['fieldset']['#process'][] = 'menu_link_sync_process_menu_form';
}

/**
 * Process the click of the "Sync" button.
 *
 * This is done in a process function so we can be compatible with the
 * hierarchical_select module.
 */
function menu_link_sync_process_menu_form($element, &$form_state, $complete_form) {
  // This hook will be run on all fieldset processing, so make sure we are
  // processing the "menu" fieldset which has a "sync button" array key defined.
  if (empty($element['#process_menu_link_sync_sync_button'])) {
    return $element;
  }
  // Make sure the "Sync" button has just been pressed.
  if (isset($form_state['input']['_triggering_element_value']) && $form_state['input']['_triggering_element_value'] == menu_link_sync_get_button_text()) {
    // Prevent submit handlers from running by setting rebuild to TRUE.
    $form_state['rebuild'] = TRUE;
    list($node, $translation_source_node) = _menu_link_sync_get_nodes_from_form($complete_form);
    if (empty($node) || empty($translation_source_node)) {
      return;
    }
    // Get the target language, ie. the current language of the node we are
    // adding/editing).
    $target_language = $node->language;

    // Get the menu link that is defined for the source node.
    $translation_source_link = _menu_link_sync_get_link_for_node($translation_source_node);
    $values = array();
    if ($translation_source_link !== FALSE) {
      $values['parent'] = _menu_link_sync_get_parent_value($translation_source_link, $target_language);
    }

    $element['messages'] = array(
      // Make sure this "markup" element is at the top by using a low weight.
      '#weight' => MENU_LINK_SYNC_TOP_WEIGHT + 1,
    );
    if (!empty($values['parent'])) {
      $values['weight'] = $translation_source_link['weight'];
      if (module_exists('menu_link_weight')) {
        $parent_value = reset($values['parent']);
        $values['relative_position'][$parent_value] = _menu_link_sync_get_relative_position($translation_source_link, $target_language);
      }
      $element['messages']['#suffix'] = '<div class="messages status">' . t('Successfully synchronized menu link from the translation source!') . '</div>';

      _menu_link_sync_override_form_values($form_state, $values);
    }
    else {
      // Show "not found" error.
      $element['messages']['#suffix'] = '<div class="messages warning">' . t('No result found while synchronizing from source!') . '</div>';
    }
  }
  return $element;
}

/**
 * Based on a node form, find out what the node and translation source are.
 *
 * @param array $complete_form
 *   The form array for the node add/edit form.
 *
 * @return array
 *   List of node, source node.
 */
function _menu_link_sync_get_nodes_from_form(array $complete_form) {
  // If we are editing an existing node:
  if (!empty($complete_form['nid']['#value'])) {
    // Get the source node from the node object.
    $node = node_load($complete_form['nid']['#value']);
    $translation_source_node = node_load($node->tnid);
  }
  // If we are creating a new node that is a translation of an existing node:
  elseif (!empty($complete_form['#node']->translation_source->nid)) {
    // Get the source node from the "to be created"-node.
    $node = $complete_form['#node'];
    $translation_source_node = $complete_form['#node']->translation_source;
  }
  return array($node, $translation_source_node);
}

/**
 * Override the submitted values with the synchronized values.
 *
 * This will override:
 *  - Parent.
 *  - If available: relative position. Otherwise: numeric weight.
 *
 * Additionally, it will check the "enabled" checkbox.
 *
 * @param array $form_state
 *   Form state array.
 * @param array $values
 *   Array with keys:
 *     - parent_value: Value of the parent link/menu.
 *     - weight: value of the absolute numeric weight.
 *     - relative_postion (if applicable): position relative to a sibling.
 */
function _menu_link_sync_override_form_values(array &$form_state, array $values) {
  // Override "parent" value.
  if (isset($values['parent'])) {
    $form_state['values']['menu']['parent'] = $values['parent'];
    $form_state['input']['menu']['parent'] = $values['parent'];
  }

  // Override "weight" value.
  if (isset($values['relative_position'])) {
    // Set a relative position, if possible.
    $form_state['menu_link_weight_relative_position'] = $values['relative_position'];
    // Unset the input/values for the menu link weights so we will display
    // the new default values. See https://www.drupal.org/node/1082818 /
    // https://www.drupal.org/node/1446510.
    unset($form_state['input']['menu']['menu_link_weight']);
  }
  else {
    // Synchronize the weight with the numeric value from the translation source
    // menu link.
    $form_state['values']['menu']['weight'] = $values['weight'];
    $form_state['input']['menu']['weight'] = $values['weight'];
  }

  // Set the "Create a menu link" checkbox to "enabled".
  $form_state['values']['menu']['enabled'] = 1;
  $form_state['input']['menu']['enabled'] = 1;

  // Unset the Hierarchical Select cache, as we have changed the parent.
  // If Hierarchical Select is not installed, this statement will be ignored.
  unset($form_state['storage']['hs']['hs_fields']);
}

/**
 * Gets the parent menu / menu link for a link / language.
 *
 * @param array $translation_source_link
 *   Menu link for the translation source.
 * @param string $target_language
 *   Current language.
 *
 * @return array
 *   Array with a single value ("{menu name}:{menu link ID}").
 */
function _menu_link_sync_get_parent_value(array $translation_source_link, $target_language) {
  $parent_value = FALSE;
  if ($translation_source_link['plid'] == 0) {
    // We don't have a parent to find out the "target menu" from. Find out the
    // most popular menu among siblings instead.
    $menu_name = _menu_link_sync_get_most_popular_menu_among_siblings($translation_source_link, $target_language);
    if ($menu_name === FALSE) {
      return FALSE;
    }
    $parent_value = $menu_name . ':0';
  }
  else {
    // Attempt to find the translation for the node linked to this menu link.
    $translation_source_parent_link = menu_link_load($translation_source_link['plid']);
    $target_parent_link = _menu_link_sync_get_link_for_target_language($translation_source_parent_link, $target_language);

    if (isset($target_parent_link['mlid'])) {
      $parent_value = $target_parent_link['menu_name'] . ':' . $target_parent_link['mlid'];
    }
  }
  // For compatibility with Hierarchical Select, turn the input value into an
  // array.
  // @todo make this conditional on the parent form element being of type
  // "hierarchical select" if making this an array clashes with other
  // modules.
  if (!empty($parent_value)) {
    $parent_value = array($parent_value);
  }
  return $parent_value;
}

/**
 * Helper function to get all siblings of an item based on the parent.
 *
 * @param string $menu_name
 *   Name of the menu.
 * @param int $plid
 *   Parent link ID.
 *
 * @return array
 *   List of all items under the plid.
 */
function _menu_link_sync_get_tree($menu_name, $plid) {
  global $menu_admin;
  if ($plid != 0) {
    $link = menu_Link_load($plid);
    $limit = $link['depth'] + 1;
  }
  else {
    $limit = 1;
  }

  // We indicate that a menu administrator will be running the menu access
  // check.
  $menu_admin = TRUE;
  // When calling menu_build_tree, be aware of core bug:
  // https://www.drupal.org/node/1477608
  $tree = menu_build_tree($menu_name, array(
    'active_trail' => array($plid),
    'only_active_trail' => FALSE,
    'min_depth' => $limit,
    'max_depth' => $limit,
    'conditions' => array('plid' => $plid),
    // To prevent core bug: https://www.drupal.org/node/1477608.
    // We do not want this call to be cached (which is partly done based on
    // the hash of the parameters), so we put a unique ID in the parameters.
    'do_not_cache' => uniqid(),
  ));
  $menu_admin = FALSE;
  return $tree;
}

/**
 * Find the most popular menu name among the translations.
 *
 * Search among translations in the target language for all the siblings of a
 * given menu item. Used in case we don't have a parent to find out the menu
 * from.
 *
 * @param array $translation_source_link
 *   Menu link item.
 * @param string $target_language
 *   Language code.
 *
 * @return string|FALSE
 *   The menu name or FALSE.
 */
function _menu_link_sync_get_most_popular_menu_among_siblings(array $translation_source_link, $target_language) {
  $tree = _menu_link_sync_get_tree($translation_source_link['menu_name'], $translation_source_link['plid']);
  $popularity = array();
  foreach ($tree as $item) {
    // Find out if item has a version in the target language.
    $target_link = _menu_link_sync_get_link_for_target_language($item['link'], $target_language, TRUE);
    if (empty($target_link)) {
      continue;
    }
    // Add menu name to popularity array.
    $menu_name = $target_link['menu_name'];
    if (!isset($popularity[$menu_name])) {
      $popularity[$menu_name] = 1;
    }
    else {
      $popularity[$menu_name]++;
    }
  }
  // Sort array in descendending order based on value.
  if (!empty($popularity)) {
    arsort($popularity, SORT_NUMERIC);
    reset($popularity);
    // Index of this array value should hold the most popular menu.
    return key($popularity);
  }
  return FALSE;
}

/**
 * Helper function that will get the "translated" version of a menu link.
 *
 * @param array $link
 *   Link in a given language.
 * @param string $target_language
 *   Langcode of the link we are looking for.
 *
 * @return array|FALSE
 *   Menu link in the target language or FALSE.
 */
function _menu_link_sync_get_link_for_target_language(array $link, $target_language, $only_links_provided_by_nodes = FALSE) {
  $node = menu_node_get_node($link['mlid'], TRUE, TRUE);
  // Find out whether the parent of the source has a translation in our target
  // language.
  if (!empty($node)) {
    // Check whether the link we found was provided through the add/edit node
    // form (as opposed to the menu link interface).
    if ($only_links_provided_by_nodes === TRUE) {
      $node_link = _menu_link_sync_get_link_for_node($node);
      // Check whether this node has a menu link, or has another menu link
      // than the provided one.
      if (empty($node_link) || $node_link['mlid'] != $link['mlid']) {
        return FALSE;
      }
    }
    // Get the target link through the translation in the target language.
    $node_translations = translation_node_get_translations($node->tnid);
    if (isset($node_translations[$target_language])) {
      $target_node = node_load($node_translations[$target_language]->nid);
      $target_link = _menu_link_sync_get_link_for_node($target_node);
      // Use the menu link assigned to this node.
      if (!empty($target_link)) {
        return $target_link;
      }
    }
  }
  return FALSE;
}

/**
 * Gets the link that belongs to a node.
 *
 * @param object $node
 *   Node object.
 *
 * @return array|FALSE
 *   A menu link array or FALSE.
 */
function _menu_link_sync_get_link_for_node($node) {
  menu_node_prepare($node);
  // Note this will prefill the node with default values.
  // Just to make sure we didn't get a default value, check for empty link title.
  if (!empty($node->menu['link_title'])) {
    return $node->menu;
  }
  return FALSE;
}
