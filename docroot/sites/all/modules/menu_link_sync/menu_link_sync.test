<?php

/**
 * @file
 * Web tests for Menu Link Sync.
 */

/**
 * Test class for Menu Link Sync.
 */
class MenuLinkSyncTest extends DrupalWebTestCase {

  /**
   * Module info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Menu Link Sync',
      'description' => 'Web tests for Menu Link Sync',
      'group' => 'Menu Link Sync',
    );
  }

  /**
   * Set up.
   */
  protected function setUp() {
    parent::setUp('menu_link_sync', 'locale', 'translation', 'translation_test', 'menu_link_weight');
    $permissions = array(
      'access administration pages',
      'administer content types',
      'administer blocks',
      'administer menu',
      'administer taxonomy',
      'create page content',
      'edit any page content',
      'delete any page content',
      'administer languages',
      'translate content',
    );

    // Create user.
    $this->user = $this->drupalCreateUser($permissions);

    // Log in user.
    $this->drupalLogin($this->user);
    // Create a new menu.
    $title = $this->randomName(16);
    $menu_name_en = substr(hash('sha256', $this->randomName(16)), 0, MENU_MAX_MENU_NAME_LENGTH_UI);

    $edit = array(
      'menu_name' => $menu_name_en,
      'description' => '',
      'title' => $title,
    );
    // Drupal prepends the menu name with "menu-".
    $this->menu_name_en = 'menu-' . $menu_name_en;
    $this->drupalPost('admin/structure/menu/add', $edit, t('Save'));
    $this->drupalGet('admin/structure/menu');
    $this->assertText($title, 'English menu created');

    // Create a new menu.
    $title = $this->randomName(16);
    $menu_name_fr = substr(hash('sha256', $this->randomName(16)), 0, MENU_MAX_MENU_NAME_LENGTH_UI);
    $edit = array(
      'menu_name' => $menu_name_fr,
      'description' => '',
      'title' => $title,
    );
    // Drupal prepends the menu name with "menu-".
    $this->menu_name_fr = 'menu-' . $menu_name_fr;
    $this->drupalPost('admin/structure/menu/add', $edit, t('Save'));
    $this->drupalGet('admin/structure/menu');
    $this->assertText($title, 'French menu created');

    // Add languages.
    $this->addLanguage('en');
    $this->addLanguage('fr');

    // Set "Basic page" content type to have "multilingual support" set to
    // "enabled, with translation".
    $this->drupalGet('admin/structure/types/manage/page');
    $edit = array();
    $edit['language_content_type'] = 2;
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));
    $this->assertRaw(t('The content type %type has been updated.', array('%type' => 'Basic page')), 'Basic page content type has been updated.');
    // Enable Menus as available menus.
    $edit = array(
      'menu_options[' . $this->menu_name_fr . ']' => 1,
      'menu_options[' . $this->menu_name_en . ']' => 1,
    );
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));

  }

  /**
   * Test creating, editing, deleting menu links via node form widget.
   */
  public function testMenuFunctionality() {

    // ENGLISH MENU   |  FRENCH MENU
    // (translation   |    (target)
    // source)        |
    // -   x (1)      |      x (4)
    // -   x (2) -----|----- x (6)
    // -   x (7) -----|----- x (8)
    // -   --> x (9) -|----- --> x (10)
    // -   x (3) -----|----- x (5)
    //
    // Test cases covered:
    // - At (5): no match (not enough siblings to compare to!). Enter manually.
    // - At (6): "above" #3 -> #5 (while searching downwards) + get target menu
    //   from siblings.
    // - At (8): "below" #2 -> #6 (while searching upwards) + get target menu
    //   from siblings.
    // - At (11): Parent matched + "top" + get target menu from parent item.
    $this->createPage('Node 1 EN', 'en', TRUE, $this->menu_name_en . ':0', -50);
    $node2 = $this->createPage('Node 2 EN', 'en', TRUE, $this->menu_name_en . ':0', -49);
    $item2 = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $node2->title))->fetchAssoc();

    $node3 = $this->createPage('Node 3 EN', 'en', TRUE, $this->menu_name_en . ':0', -47);
    $item3 = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $node3->title))->fetchAssoc();

    $this->assertMenuLink($item2['mlid'], array('weight' => -49));
    $this->assertMenuLink($item3['mlid'], array('weight' => -47));

    $node4 = $this->createPage('Node 4 FR', 'fr', TRUE, $this->menu_name_fr . ':0', -50);
    $item4 = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $node4->title))->fetchAssoc();

    $this->drupalGet('node/add/page', array('query' => array('translation' => $node3->nid, 'target' => 'fr')));
    $edit = array();

    $this->drupalPostAjaxAnySelector('node/add/page', $edit, array('op' => menu_link_sync_get_button_text()), NULL, array('query' => array('translation' => $node3->nid, 'target' => 'fr')));
    // Not enough siblings to compare to. Make sure we get a warning.
    $this->assertRaw(t('No result found while synchronizing from source'));

    $node5 = $this->createPage('Node 5 FR', NULL, TRUE, $this->menu_name_fr . ':0', -47, array('query' => array('translation' => $node3->nid, 'target' => 'fr')));
    $item5 = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $node5->title))->fetchAssoc();

    // Get suggestions for node #6 (French translation of #2).
    $this->drupalPostAjaxAnySelector('node/add/page', $edit, array('op' => menu_link_sync_get_button_text()), NULL, array('query' => array('translation' => $node2->nid, 'target' => 'fr')));

    // Make sure link #4 (above it) has a weight of -50.
    $this->assertRaw('name="menu[menu_link_weight][' . $item4['mlid'] . '][weight]"><option value="-50" selected>');
    // Make sure current link has a weight of -49.
    $this->assertRaw('name="menu[menu_link_weight][link_current][weight]"><option value="-50">-50</option><option value="-49" selected>');
    // Make sure that link #5 has a weight of -48.
    $this->assertRaw('name="menu[menu_link_weight][' . $item5['mlid'] . '][weight]"><option value="-50">-50</option><option value="-49">-49</option><option value="-48" selected>');
    // Make sure the suggested parent is the root of the French menu.
    $this->assertRaw('option value="' . $this->menu_name_fr . ':0" selected');

    // Create node #6 based on these suggestions:
    $node6 = $this->createPage('Node 6 FR', NULL, TRUE, $this->menu_name_fr . ':0', -49, array('query' => array('translation' => $node2->nid, 'target' => 'fr')));
    $item6 = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $node6->title))->fetchAssoc();

    // Create node #7:
    $node7 = $this->createPage('Node 7 EN', 'en', TRUE, $this->menu_name_en . ':0', -48);
    $item7 = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $node7->title))->fetchAssoc();

    // Get suggestions for node #8 (French translation of #7).
    $this->drupalPostAjaxAnySelector('node/add/page', $edit, array('op' => menu_link_sync_get_button_text()), NULL, array('query' => array('translation' => $node7->nid, 'target' => 'fr')));
    // Make sure the suggested parent is the root of the French menu.
    $this->assertRaw('option value="' . $this->menu_name_fr . ':0" selected');
    // Make sure suggested weights are correct.
    $this->assertRaw('name="menu[menu_link_weight][' . $item4['mlid'] . '][weight]"><option value="-50" selected>');
    // Make sure link #6 has a weight of -49.
    $this->assertRaw('name="menu[menu_link_weight][' . $item6['mlid'] . '][weight]"><option value="-50">-50</option><option value="-49" selected>');
    // Make sure current link has a weight of -48.
    $this->assertRaw('name="menu[menu_link_weight][link_current][weight]"><option value="-50">-50</option><option value="-49">-49</option><option value="-48" selected>');
    // Make sure link #5 has a weight of -48.
    $this->assertRaw('name="menu[menu_link_weight][' . $item5['mlid'] . '][weight]"><option value="-50">-50</option><option value="-49">-49</option><option value="-48">-48</option><option value="-47" selected');

    // Create node #8.
    $node8 = $this->createPage('Node 8 FR', NULL, TRUE, $this->menu_name_fr . ':0', -48, array('query' => array('translation' => $node7->nid, 'target' => 'fr')));
    $item8 = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $node8->title))->fetchAssoc();

    // Create node #9.
    $node9 = $this->createPage('Node 9 EN', 'en', TRUE, $this->menu_name_en . ':' . $item7['mlid'], -50);

    // Create node #10 (French translation of #9):
    $this->drupalPostAjaxAnySelector('node/add/page', $edit, array('op' => menu_link_sync_get_button_text()), NULL, array('query' => array('translation' => $node9->nid, 'target' => 'fr')));
    // Make sure the suggested parent is link #8 in the French menu.
    $this->assertRaw('option value="' . $this->menu_name_fr . ':' . $item8['mlid'] . '" selected');
    // Make sure suggested weight is correct.
    $this->assertRaw('name="menu[menu_link_weight][link_current][weight]"><option value="-50" selected');
  }

  /**
   * Installs the specified language, or enables it if it is already installed.
   *
   * @param string $language_code
   *   The language code to check.
   */
  protected function addLanguage($language_code) {
    // Check to make sure that language has not already been installed.
    $this->drupalGet('admin/config/regional/language');

    if (strpos($this->drupalGetContent(), 'enabled[' . $language_code . ']') === FALSE) {
      // Doesn't have language installed so add it.
      $edit = array();
      $edit['langcode'] = $language_code;
      $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));

      // Make sure we are not using a stale list.
      drupal_static_reset('language_list');
      $languages = language_list('language');
      $this->assertTrue(array_key_exists($language_code, $languages), 'Language was installed successfully.');

      if (array_key_exists($language_code, $languages)) {
        $this->assertRaw(t('The language %language has been created and can now be used. More information is available on the <a href="@locale-help">help screen</a>.', array('%language' => $languages[$language_code]->name, '@locale-help' => url('admin/help/locale'))), 'Language has been created.');
      }
    }
    elseif ($this->xpath('//input[@type="checkbox" and @name=:name and @checked="checked"]', array(':name' => 'enabled[' . $language_code . ']'))) {
      // It's installed and enabled. No need to do anything.
      $this->assertTrue(TRUE, 'Language [' . $language_code . '] already installed and enabled.');
    }
    else {
      // It's installed but not enabled. Enable it.
      $this->assertTrue(TRUE, 'Language [' . $language_code . '] already installed.');
      $this->drupalPost(NULL, array('enabled[' . $language_code . ']' => TRUE), t('Save configuration'));
      $this->assertRaw(t('Configuration saved.'), 'Language successfully enabled.');
    }
  }


  /**
   * Creates a "Basic page" in the specified language.
   *
   * @param string $title
   *   The title of a basic page in the specified language.
   * @param string $language
   *   (optional) Language code.
   * @param bool $add_link
   *   (optional) Whether to add a link for this node.
   * @param string $menu_parent_value
   *   (optional) Use the given parent (format = menu_name:plid).
   * @param int $weight
   *   (optional) Weight to give to the menu link.
   * @param array $url_options
   *   (optional) Options array to use for GET/POST requests.
   *
   * @return object
   *   A node object.
   */
  protected function createPage($title, $language = NULL, $add_link = FALSE, $menu_parent_value = NULL, $weight = NULL, $url_options = array()) {
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $title;
    $edit["body[$langcode][0][value]"] = $this->randomName();
    if (!empty($language)) {
      $edit['language'] = $language;
    }
    if ($add_link) {
      $edit['menu[enabled]'] = 1;
      $edit['menu[link_title]'] = $title;
      if (isset($menu_parent_value)) {
        $edit['menu[parent]'] = $menu_parent_value;
      }
    }
    // What are the sibling weights before?
    $this->drupalGet('node/add/page', $url_options);
    if (isset($weight) && isset($menu_parent_value)) {
      list($menu_name, $parent_mlid) = explode(':', $menu_parent_value);
      $tree = _menu_link_sync_get_tree($menu_name, $parent_mlid);
      $weights_before = array();
      foreach ($tree as $item) {
        $weights_before[$item['link']['mlid']] = $item['link']['weight'];
      }
      // Reset parent so weights get updated.
      $this->drupalPostAjaxAnySelector('node/add/page', $edit, 'menu[parent]', NULL, $url_options);
    }
    $this->drupalPost(NULL, $edit, t('Save'), $url_options);

    $this->assertRaw(t('Basic page %title has been created.', array('%title' => $title)), 'Basic page created.');

    // Reset old weights.
    if (isset($weight) && isset($menu_parent_value)) {
      foreach ($weights_before as $mlid => $weight_before) {
        $link = menu_link_load($mlid);
        $link['weight'] = $weight_before;
        menu_link_save($link);
      }
    }

    // Check to make sure the node was created and overwrite weight for current
    // link.
    $node = $this->drupalGetNodeByTitle($title);
    menu_node_prepare($node);
    if (isset($weight) && !empty($node->menu) && isset($menu_parent_value)) {
      $link = $node->menu;
      $link['weight'] = $weight;
      menu_link_save($link);
    }
    $this->assertTrue($node, 'Node found in database.');

    return $node;
  }

  /**
   * Execute an Ajax submission.
   *
   * Copy of drupalPostAJAX(), allowing any ID-based selector.
   */
  protected function drupalPostAjaxAnySelector($path, $edit, $triggering_element, $ajax_path = NULL, array $options = array(), array $headers = array(), $form_html_id = NULL, $ajax_settings = NULL) {
    // Get the content of the initial page prior to calling drupalPost(), since
    // drupalPost() replaces $this->content.
    if (isset($path)) {
      $this->drupalGet($path, $options);
    }
    $content = $this->content;
    $drupal_settings = $this->drupalSettings;

    // Get the Ajax settings bound to the triggering element.
    if (!isset($ajax_settings)) {
      if (is_array($triggering_element)) {
        $xpath = '//*[@name="' . key($triggering_element) . '" and @value="' . current($triggering_element) . '"]';
      }
      else {
        $xpath = '//*[@name="' . $triggering_element . '"]';
      }
      if (isset($form_html_id)) {
        $xpath = '//form[@id="' . $form_html_id . '"]' . $xpath;
      }
      $element = $this->xpath($xpath);
      $element_id = (string) $element[0]['id'];
      $ajax_settings = $drupal_settings['ajax'][$element_id];
    }

    // Add extra information to the POST data as ajax.js does.
    $extra_post = '';
    if (isset($ajax_settings['submit'])) {
      foreach ($ajax_settings['submit'] as $key => $value) {
        $extra_post .= '&' . urlencode($key) . '=' . urlencode($value);
      }
    }
    foreach ($this->xpath('//*[@id]') as $element) {
      $id = (string) $element['id'];
      $extra_post .= '&' . urlencode('ajax_html_ids[]') . '=' . urlencode($id);
    }
    if (isset($drupal_settings['ajaxPageState'])) {
      $extra_post .= '&' . urlencode('ajax_page_state[theme]') . '=' . urlencode($drupal_settings['ajaxPageState']['theme']);
      $extra_post .= '&' . urlencode('ajax_page_state[theme_token]') . '=' . urlencode($drupal_settings['ajaxPageState']['theme_token']);
      foreach ($drupal_settings['ajaxPageState']['css'] as $key => $value) {
        $extra_post .= '&' . urlencode("ajax_page_state[css][$key]") . '=1';
      }
      foreach ($drupal_settings['ajaxPageState']['js'] as $key => $value) {
        $extra_post .= '&' . urlencode("ajax_page_state[js][$key]") . '=1';
      }
    }

    // Unless a particular path is specified, use the one specified by the
    // Ajax settings, or else 'system/ajax'.
    if (!isset($ajax_path)) {
      $ajax_path = isset($ajax_settings['url']) ? $ajax_settings['url'] : 'system/ajax';
    }

    // Submit the POST request.
    $return = drupal_json_decode($this->drupalPost(NULL, $edit, array('path' => $ajax_path, 'triggering_element' => $triggering_element), $options, $headers, $form_html_id, $extra_post));

    // Change the page content by applying the returned commands.
    if (!empty($ajax_settings) && !empty($return)) {
      // ajax.js applies some defaults to the settings object, so do the same
      // for what's used by this function.
      $ajax_settings += array(
        'method' => 'replaceWith',
      );
      // DOM can load HTML soup. But, HTML soup can throw warnings, suppress
      // them.
      $dom = new DOMDocument();
      @$dom->loadHTML($content);
      // XPath allows for finding wrapper nodes better than DOM does.
      $xpath = new DOMXPath($dom);
      foreach ($return as $command) {
        if (empty($command['data'])) {
          // Prepended empty status messages added in ajax_prepare_response()
          // will override previous command.
          continue;
        }
        switch ($command['command']) {
          case 'settings':
            $drupal_settings = drupal_array_merge_deep($drupal_settings, $command['settings']);
            break;

          case 'insert':
            $wrapperNode = NULL;
            // When a command doesn't specify a selector, use the
            // #ajax['wrapper'] which is always an HTML ID.
            if (!isset($command['selector'])) {
              $wrapperNode = $xpath->query('//*[@id="' . $ajax_settings['wrapper'] . '"]')->item(0);
            }
            elseif (strstr($command['selector'], '#')) {
              $wrapperNode = $xpath->query('//*[@id="' . str_replace('#', '', $command['selector']) . '"]')->item(0);
            }
            // @todo Ajax commands can target any jQuery selector, but these are
            //   hard to fully emulate with XPath. For now, just handle 'head'
            //   and 'body', since these are used by ajax_render().
            elseif (in_array($command['selector'], array('head', 'body'))) {
              $wrapperNode = $xpath->query('//' . $command['selector'])->item(0);
            }
            if ($wrapperNode) {
              // ajax.js adds an enclosing DIV to work around a Safari bug.
              $newDom = new DOMDocument();
              $newDom->loadHTML('<div>' . $command['data'] . '</div>');
              $newNode = $dom->importNode($newDom->documentElement->firstChild->firstChild, TRUE);
              $method = isset($command['method']) ? $command['method'] : $ajax_settings['method'];
              // The "method" is a jQuery DOM manipulation function. Emulate
              // each one using PHP's DOMNode API.
              switch ($method) {
                case 'replaceWith':
                  $wrapperNode->parentNode->replaceChild($newNode, $wrapperNode);
                  break;
                case 'append':
                  $wrapperNode->appendChild($newNode);
                  break;
                case 'prepend':
                  // If no firstChild, insertBefore() falls back to
                  // appendChild().
                  $wrapperNode->insertBefore($newNode, $wrapperNode->firstChild);
                  break;
                case 'before':
                  $wrapperNode->parentNode->insertBefore($newNode, $wrapperNode);
                  break;
                case 'after':
                  // If no nextSibling, insertBefore() falls back to
                  // appendChild().
                  $wrapperNode->parentNode->insertBefore($newNode, $wrapperNode->nextSibling);
                  break;
                case 'html':
                  foreach ($wrapperNode->childNodes as $childNode) {
                    $wrapperNode->removeChild($childNode);
                  }
                  $wrapperNode->appendChild($newNode);
                  break;
              }
            }
            break;

          case 'updateBuildId':
            $buildId = $xpath->query('//input[@name="form_build_id" and @value="' . $command['old'] . '"]')->item(0);
            if ($buildId) {
              $buildId->setAttribute('value', $command['new']);
            }
            break;

          // @todo Add suitable implementations for these commands in order to
          //   have full test coverage of what ajax.js can do.
          case 'remove':
            break;
          case 'changed':
            break;
          case 'css':
            break;
          case 'data':
            break;
          case 'restripe':
            break;
          case 'add_css':
            break;
        }
      }
      $content = $dom->saveHTML();
    }
    $this->drupalSetContent($content);
    $this->drupalSetSettings($drupal_settings);

    $verbose = 'AJAX POST request to: ' . $path;
    $verbose .= '<br />AJAX callback path: ' . $ajax_path;
    $verbose .= '<hr />Ending URL: ' . $this->getUrl();
    $verbose .= '<hr />' . $this->content;

    $this->verbose($verbose);

    return $return;
  }


  /**
   * Fetch the menu item from the database and compare it to the given array.
   *
   * @param int $mlid
   *   Menu item id.
   * @param array $expected_item
   *   Array containing properties to verify.
   */
  protected function assertMenuLink($mlid, array $expected_item) {
    // Retrieve menu link.
    $item = db_query('SELECT * FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $mlid))->fetchAssoc();
    $options = unserialize($item['options']);
    if (!empty($options['query'])) {
      $item['link_path'] .= '?' . drupal_http_build_query($options['query']);
    }
    if (!empty($options['fragment'])) {
      $item['link_path'] .= '#' . $options['fragment'];
    }
    foreach ($expected_item as $key => $value) {
      $this->assertEqual($item[$key], $value, format_string('Parameter %key had expected value.', array('%key' => $key)));
    }
  }

}
