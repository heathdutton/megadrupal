<?php
/**
 * @file
 *   Xero reference field tests
 */


/**
 * Xero Field Test Case
 */
class XeroFieldTestCase extends XeroWebTestCase {
  
  public function setUp() {
    parent::setUp();

    $this->node = $this->drupalCreateNode(array('type' => 'page'));

    // Login as admin. and test field UI create field instance.
    $this->drupalLogin($this->web_admin);
    $this->field_name = $this->createXeroField($this->randomName(10));
  }

  /**
   * Create Xero reference field.
   *
   * @param $name
   *   Field label.
   * @return string
   *   Field name.
   */
  public function createXeroField($name) {
    $field_name = 'field_' . strtolower($name);
    $edit = array(
      'fields[_add_new_field][label]' => $name,
      'fields[_add_new_field][field_name]' => strtolower($name),
      'fields[_add_new_field][type]' => 'xero_reference',
      'fields[_add_new_field][widget_type]' => 'xero_textfield',
    );  

    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->assertRaw(t('These settings apply to the %label field everywhere it is used.', array('%label' => $name)), t('Field settings page was displayed.'));

    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->assertRaw(t('Updated field %label field settings.', array('%label' => $name)), t('Redirected to instance and widget settings page.'));

    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $name)), t('Redirected to "Manage fields" page.'));

    // Check that the field appears in the overview form.
    $this->assertFieldByXPath('//table[@id="field-overview"]//td[1]', $name, t('Field was created and appears in the overview page.'));

    return $field_name;
  }

  /**
   * Create field values for Xero reference field test.
   *
   * @param $type
   *   Xero data type.
   *   
   * @return array
   *   Field values.
   */
  public function createFieldValue($type = 'Contact') {
    $hash = strtoupper(hash('ripemd128', md5($this->randomString(100))));
    $guid = substr($hash, 0, 8) . '-' . substr($hash, 8, 4) . '-' . substr($hash, 12, 4);
    $guid .= '-' . substr($hash, 16, 4) . '-' . substr($hash, 20, 12);

    return array(
      'guid' => $guid,
      'label' => $this->randomName(10),
      'type' => $type,
    );
  }
}

/**
 * Xero field CRUD
 */
class XeroFieldCRUDTestCase extends XeroFieldTestCase {

  static public function getInfo() {
    return array(
      'name' => 'Xero Field CRUD',
      'description' => 'Assert create, read, and update for Xero reference field type.',
      'group' => 'Xero',
    ); 
  }

  public function testCRUD() {
    // Create node and save values.
    $values = $this->createFieldValue();
    $field_name = $this->field_name;
    $edit = array(
      $field_name . '[und][0][guid]' => $values['guid'],
      $field_name . '[und][0][label]' => $values['label'],
      $field_name . '[und][0][type]' => $values['type'],
    );

    $this->drupalPost('node/' . $this->node->nid . '/edit', $edit, t('Save'));
    $this->assertRaw($values['guid'], t('Found saved GUID: %guid', array('%guid' => $values['guid'])));
    $this->assertRaw($values['label'], t('Found saved Label: %label', array('%label' => $values['label'])));
    $this->assertRaw($values['type'], t('Found saved xero type: %type', array('%type' => $values['type'])));

    // Assert values on node edit form.
    $this->drupalGet('node/' . $this->node->nid . '/edit');
    $this->assertFieldByName($field_name . '[und][0][guid]', $values['guid'], t('Found GUID on form: %guid', array('%guid' => $values['guid'])));
    $this->assertFieldByName($field_name . '[und][0][label]', $values['label'], t('Found Label on form: %label', array('%label' => $values['label'])));
    $this->assertFieldByName($field_name . '[und][0][type]', $values['type'], t('Found Type on form: %type', array('%type' => $values['type'])));

    // Assert bad GUID and label.
    $edit = array(
      $field_name . '[und][0][guid]' => $this->randomString(75),
      $field_name . '[und][0][label]' => $this->randomString(256),
    );
    $this->drupalPost('node/' . $this->node->nid . '/edit', $edit, t('Save'));
    $this->assertText('is not a globally-unique identifier.');
    $this->assertText('cannot be longer than 255 characters');
  }
}

/**
 * Test autocomplete widget.
 */
class XeroFieldAutocompleteTestCase extends XeroFieldTestCase {

  static public function getInfo() {
    return array(
      'name' => 'Xero Field Autocomplete',
      'description' => 'Assert autocomplete values are transformed correctly.',
      'group' => 'Xero',
    ); 
  }

  public function setUp() {
    parent::setUp();

    // Change to autocomplete widget.
    $edit = array(
      'widget_type' => 'xero_autocomplete',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name . '/widget-type', $edit, t('Continue'));
    $this->assertRaw('Xero autocomplete');

    $edit = array(
      'instance[widget][settings][xero_type]' => 'Contact',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
  }

  public function testAutocompleteWidget() {
    // Create node and save values.
    $values = $this->createFieldValue();
    $edit = array(
      $this->field_name . '[und]' => $values['guid'] . ' (ContactID)',
    );
    $this->drupalPost('node/' . $this->node->nid . '/edit', $edit, t('Save'));
    $this->assertRaw($values['guid'], t('Found saved GUID: %guid', array('%guid' => $values['guid'])));
    $this->assertRaw($values['type'], t('Found saved xero type: %type', array('%type' => $values['type'])));
  }
}

/**
 * Test Xero field display.
 */
class XeroFieldDisplayTestCase extends XeroFieldTestCase {

  static public function getInfo() {
    return array(
      'name' => 'Xero Field Display',
      'description' => 'Assert field display',
      'group' => 'Xero',
    );
  }

  public function testDisplays() {

    // Disable all but type
    $update = array(
      'field_name' => $this->field_name,
      'entity_type' => 'node',
      'bundle' => 'page',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'xero_reference',
          'settings' => array(
            'display' => array('type'),
          ),
        ),
      ),
    );
    field_update_instance($update);

    $field_name = $this->field_name;
    $values = $this->createFieldValue();
    $this->node->{$this->field_name}['und'] = array(
      0 => $values,
    );
    node_save($this->node);

    $this->drupalGet('node/' . $this->node->nid);
    $this->assertText($values['type']);
    $this->assertNoText($values['guid']); 
    $this->assertNoText($values['label']); 

    // Disable all but label
    $update['display']['default']['settings']['display'] = array('label');
    field_update_instance($update);
    $this->drupalGet('node/' . $this->node->nid);
    $this->assertNoText($values['type']);
    $this->assertNoText($values['guid']); 
    $this->assertText($values['label']); 

    // Disable all but guid
    $update['display']['default']['settings']['display'] = array('guid');
    field_update_instance($update);
    $this->drupalGet('node/' . $this->node->nid);
    $this->assertNoText($values['type']);
    $this->assertText($values['guid']); 
    $this->assertNoText($values['label']); 
  }

}
