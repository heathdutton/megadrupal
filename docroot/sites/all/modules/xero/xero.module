<?php
/**
 * @file
 *   Xero API module
 *   Implements the PHP-Xero Library in Drupal to allow queries to
 *   xero.com
 *
 *   Curently supported:
 *
 *   1. GET Query for any Xero entity such as Contacts, Invoices, Payments, etc...
 *   2. POST Query for Invoices.
 *   3. PUT Query for Payments.
 *   4. Caching of Xero entities.
 *   5. Form generation for Contacts, Invoices, and Accounts.
 *
 */


module_load_include('inc', 'xero', 'xero.field');

/**
 * Implementation of hook_permission().
 *
 * These are basic permissions. It is up to individual module developers
 * to add more complex permissions in their modules. This may change in
 * the future.
 */
function xero_permission() {
  return array(
    'access xero' => array(
      'title' => t('Access Xero'),
      'description' => t('Grants access of basic information related to Xero.'),
    ),
    'post to xero' => array(
      'title' => t('Post to Xero'),
      'description' => t('Grants access to make post requests to Xero.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array of theme callbacks
 */
function xero_theme($existing, $type, $theme, $path) {
  return array(
    'xero_contact' => array(
      'variables' => array($contact = NULL),
      'template' => 'xero-contact',
      'file' => 'xero.theme.inc',
      'path' => drupal_get_path('module', 'xero') . '/theme',
    ),
    'xero_invoice' => array(
      'variables' => array($invoice = NULL),
      'template' => 'xero-invoice',
      'file' => 'xero.theme.inc',
      'path' => drupal_get_path('module', 'xero') . '/theme',
    ),
    'xero_creditnote' => array(
      'variables' => array($creditnote = NULL),
      'template' => 'xero-creditnote',
      'file' => 'xero.theme.inc',
      'path' => drupal_get_path('module', 'xero') . '/theme',
    ),
    'xero_addresses' => array(
      'variables' => array($addresses = NULL),
      'file' => 'xero.theme.inc',
      'path' => drupal_get_path('module', 'xero') . '/theme',
    ),
    'xero_lineitems' => array(
      'variables' => array($items = NULL, $subtotal = NULL, $tax = NULL, $total = NULL),
      'file' => 'xero.theme.inc',
      'path' => drupal_get_path('module', 'xero') . '/theme',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function xero_menu() {
  $items = array();

  $items['xero/autocomplete/%xero_type'] = array(
    'title' => 'Xero Autocomplete',
    'page callback' => 'xero_autocomplete',
    'page arguments' => array(2, 3),
    'access arguments' => array('access xero'),
    'file' => 'xero.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/xero'] = array(
    'title' => 'Xero configuration',
    'description' => 'Configure the xero module for your organization.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xero_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'xero.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_xero_make_info().
 * @return an array of keyed elemenst containing information about
 * xero_make_TYPE to implement.
 */
function xero_xero_make_info() {
  $path = drupal_get_path('module', 'xero') . '/xero.make.inc';

  return array(
    'contact' => array(
      'file path' => $path,
    ),
    'invoice' => array(
      'file path' => $path,
    ),
    'creditnote' => array(
      'file path' => $path,
    ),
    'payment' => array(
      'file path' => $path,
    ),
    'address' => array(
      'file path' => $path,
    ),
    'phone' => array(
      'file path' => $path,
    ),
    'lineitem' => array(
      'file path' => $path,
    ),
    'employee' => array(
      'file path' => $path,
    ),
    'expenseclaim' => array(
      'file path' => $path,
    ),
    'receipt' => array(
      'file path' => $path,
    ),
    'item' => array(
      'file path' => $path,
    ),
    'manualjournal' => array(
      'file path' => $path,
    ),
    'journalline' => array(
      'file path' => $path,
    ),
    'transaction' => array(
      'file path' => $path,
    ),
  );
}

/**
 * Load PHP-Xero code. Only used by xero_query(). You don't need to
 * implement this unless you're making manual queries to xero outside
 * of xero_query().
 *
 * @return object A PHP-Xero object or NULL.
 */
function xero_php_load($method = 'json') {
  module_load_include('php', 'xero', 'include/xero');

  $key = variable_get('xero_consumer_key', '');
  $secret = variable_get('xero_consumer_secret', '');
  $cert = variable_get('xero_cert_path', '');
  $cert_key = variable_get('xero_key_path', '');

  return new Xero($key, $secret, $cert, $cert_key, $method);
}

/**
 * Get or post an object type to xero.
 *
 * @param $type two possible values: get or post. put is not supported.
 * @param $action the type of action we're doing: Invoices, Contacts, etc...
 * @param $id an optional id of the xero object such as contactid, invoiceid, etc...
 * @param $after an optional ModifiedAfter parameter for a get query.
 * @param $items an optional array of items to post such as contacts, invoices, etc...
 * @param $method an optional string for response format: xml, json, or pdf.
 * @return returns a result array from the PHP-Xero containing status & the data posted
 *         or returns NULL if there was an error before querying.
 *
 * Example:
 *
 *   //Return all contacts for your xero account.
 *   $result = xero_query('get', 'Contacts');
 *
 *   //Post a new contact.
 *   $contacts = array('Contact' => array('Name' => 'New Contact'));
 *   $result = xero_query('post', 'Contacts', FALSE, FALSE, $contacts);
 *
 *   //Query a new contact by it's Name element, not the ContactID.
 *   $result = xero_query('get', 'Contacts', FALSE, FALSE, array('Name' => 'New Contact'));
 *
 *   See PHP-Xero and developer.xero.com for more information.
 *
 */
function xero_query($type = 'get', $action, $id = FALSE, $after = FALSE, $items = array(), $method = 'json') {
  $xero = xero_php_load($method);

  if (!$xero->verify()) {
    xero_error(0, '', 'Error trying to make a xero connection object.', $items);
    return NULL;
  }

  if ($type == 'get') {
    if (!$id && !$after && empty($items)) {
      $result = $xero->$action;
    }
    else {
      $result = $xero->$action($id, $after, $items);
    }
  }
  elseif ($type == 'post') {
    $result = $xero->$action($items);
  }
  else {
    xero_error(0, '', t('%type is not a valid type of get or post.', array('%type' => $type)), $items);
    return NULL;
  }

  if (isset($result['ErrorNumber'])) {
    xero_error($result['ErrorNumber'], $result['Type'], $result['Message'], $items, $result);
  }

  return $result;
}

/**
 * Evaluate error messages and send appropriate drupal status messages.
 * @param $code Optional Xero error code.
 * @param $type Optional Xero error type.
 * @param $message Xero error message.
 * @param $items The items that were posted.
 * @param $result The entire result array.
 */
function xero_error($code = 0, $type = '', $message, $items = 'N/A', $result = 'N/A') {
  $error_code = (!empty($type)) ? $code . ' ' . $type : $code;
  $format_options = array('@code' => $error_code, '@message' => $message);
  drupal_set_message(t('Error @code: @message', $format_options), 'error');

  $format_options['!items'] = '<div><h3>Items</h3><pre>' . print_r($items, TRUE) . '</pre></div>';
  $format_options['!result'] = '<div><h3>Result</h3><pre>' . print_r($result, TRUE) . '</pre></div>';
  watchdog('xero', 'Error @code: @message !items !result', $format_options, WATCHDOG_CRITICAL, NULL);
}

/**
 * Form element helper for actions using the Xero Module API.
 * @param $action the action to be taken (Contacts, Invoices)
 * @return $element a Drupal form element.
 *
 * Example:
 *   $form['blah'] = xero_form_helper('Contacts', $form['blah']['#default_value']);
 */
function xero_form_helper($type = 'Contacts', $default = '') {
  $key = strtolower($type);
  $element[$key] = array();
  $element[$key]['#title'] = $type;
  $element[$key]['#default_value'] = $default;

  switch ($type) {
    case 'Contacts':
      $element[$key]['#description'] = t('Type in the name of the contact in Xero. An invalid Contact Name will not return a valid Xero Contact ID.');
      $element[$key]['#type'] = 'textfield';
      $element[$key]['#autocomplete_path'] = 'xero/autocomplete/Contact';
      break;
    case 'ContactStatus':
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Contact Status');
      $element[$key]['#description'] = t('Choose the status of the contact in Xero.');
      $element[$key]['#options'] = array('ACTIVE' => t('Active'));
      break;
    case 'PhoneType':
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Phone Type');
      $element[$key]['#description'] = t('Choose the type of phone number.');
      $element[$key]['#options'] = array(
        'DEFAULT' => t('Default'),
        'DDI' => t('DDI'),
        'MOBILE' => t('Mobile'),
        'FAX' => t('Fax'),
      );
      break;
    case 'AddressType':
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Address Type');
      $element[$key]['#description'] = t('Choose the type of address.');
      $element[$key]['#options'] = array(
        'POBOX' => t('P.O. Box'),
        'STREET' => t('Street'),
      );
      break;
    case 'Invoices':
      $element[$key]['#type'] = 'textfield';
      $element[$key]['#description'] = t('Type an Invoice Number to find an Invoice on Xero. Invalid Invoice Numbers will not return anything.');
      $element[$key]['#autocomplete_path'] = 'xero/autocomplete/Invoice';
      break;
    case 'InvoiceType':
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Invoice Type');
      $element[$key]['#description'] = t('If this is a new invoice you may select when the due date for the invoice will be.');
      $element[$key]['#options'] = array('ACCREC' => t('Accounts Receivable'), 'ACCPAY' => t('Accounts Payable'));
      break;
    case 'InvoiceStatus':
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Invoice Status');
      $element[$key]['#description'] = t('Choose the status of the invoice. Xero accepts only Draft or Submitted invoices when posting Invoices to Xero.');
      $element[$key]['#options'] = array(
        'DRAFT' => t('Draft'),
        'SUBMITTED' => t('Submitted'),
      );
      break;
    case 'LineAmountTypes':
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Line Amount Type');
      $element[$key]['#description'] = t('Choose the Line Amount Type, which is whether line items are exclusive of tax or inclusive or tax, or have no tax at all.');
      $element[$key]['#options'] = array(
        'Exclusive' => t('Exclusive'),
        'Inclusive' => t('Inclusive'),
        'NoTax' => t('No Tax'),
      );
      break;
    case 'Accounts':
      $accounts = xero_get_cache('Accounts');
      $element[$key]['#description'] = t('Select an Account from a list of valid Xero accounts.');
      $element[$key]['#default_value'] = variable_get('xero_default_account', '');
      $element[$key]['#type'] = 'select';
      $element[$key]['#options'] = array();

      foreach ($accounts['Account'] as $item) {
        if (isset($item['Code'])) {
          $name = $item['Code'];
          $element[$key]['#options'][$name] = check_plain($item['Name']);
        }
      }
      break;
    case 'Net':
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Net Payable');
      $element[$key]['#description'] = t('Choose Net Payable, which is the future date when an Invoice or Credit Note will be due.');
      $element[$key]['#options'] = array(
        '+0 days' => t('Immediate'),
        '+1 week' => t('Net 7'),
        '+15 days' => t('Net 15'),
        '+30 days' => t('Net 30'),
        '+60 days' => t('Net 60'),
        '+90 days' => t('Net 90'),
        '+6 months' => t('6 months'),
        '+1 year' => t('1 year')
      );
      break;
    case 'Curriences':
      $currencies = xero_get_cache('Curriences');
      $element[$key]['#type'] = 'select';
      $element[$key]['#title'] = t('Currency');
      $element[$key]['#description'] = t('Choose the currency to use.');
      $element[$key]['#options'] = array();

      foreach ($currencies['Currency'] as $item) {
        $code = $item['Code'];
        $element[$key]['#options'][$code] = check_plain($item['Description']);
      }
      break;
    case 'Date':
      //Modules not using date_api will need to format the date field appropriately.
      $element[$key]['#description'] = t('Choose a date');
      $element[$key]['#type'] = (module_exists('date_api')) ? 'date_select' : 'date';
      $element[$key]['#date_format'] = 'Y-m-d';
      $element[$key]['#default_value'] = date();
      $element[$key]['#element_validate'] = (module_exists('date_api')) ? array() : 'xero_date_element_validate';
    default:
      $element[$key]['#type'] = 'textfield';
      $title = ucwords(str_replace('_', ' ', $type));
      $element[$key]['#title'] = t('@title', array('@title' => $title));
  }

  return $element[$key];
}

/**
 * Get data from cache or refresh and set cache. You can cache any
 * type of data that you can query xero by. The cache identifier is
 * $type, but lower case.
 *
 * @param $type
 *   The type of cache to get. Defaults to Contacts
 * @return array
 *   cached data.
 */
function xero_get_cache($type = 'Contacts') {
  if ($cached = cache_get('xero_' . strtolower($type), 'cache')) {
    return $cached->data;
  }

  $result = xero_query('get', $type, false, false, array());
  if ($result == NULL) {
    return NULL;
  }

  $to_cache = $result[$type];

  cache_set('xero_' . strtolower($type), $to_cache, 'cache', CACHE_TEMPORARY);

  return $to_cache;
}

/**
 * Xero make helper function. This will return a valid xero data structure
 * with empty values for each key. This helper function will try to call a
 * similarly named function based off of hook_xero_make_info(). Data
 * structures created in this way are meant to be posted to xero.com, and
 * should have their values replaced. This is up to the developer using
 * xero_make().
 * @param $type the data type to use such as 'contact'.
 * @param $size the size of the data set to return. this can be anything that
 * a xero_make_FUNCTION defines for itself.
 * @param $args any additional arguments to pass into the make function as an
 * indexed array.
 * @return a valid xero data structure or FALSE if we couldn't do it for some
 * reason.
 * 
 * @see xero_make_invoice().
 */
function xero_make($type = 'contact', $size = 'minimal', $args = array()) {
  if ($cached = cache_get('xero_make_registry', 'cache')) {
    $info = $cached->data;
    unset($cached);
  }
  else {
    $info = module_invoke_all('xero_make_info');
    //@todo alter?

    cache_set('xero_make_registry', $info, 'cache', CACHE_TEMPORARY);
  }

  if (isset($info[$type]) && file_exists($info[$type]['file path'])) {
    // @todo use module_load_include() instead?
    include_once($info[$type]['file path']);
    $func = 'xero_make_' . $type;

    $func_args = array('minimal');
    $func_args = array_merge($func_args, $args);

    return call_user_func_array($func, $func_args);
  }

  return FALSE;
}

/**
 * Xero type load menu wildcard wrapper function.
 *
 * @param $name
 *   The data type to load.
 * @return array
 *   An associative array as provided by xero_get_data_types().
 */
function xero_type_load($name) {
  $type = xero_get_data_types($name);

  return $type ? $type : FALSE;
}

/**
 * Return a list of xero data types, and information about each one.
 *
 * @param $name
 *   An option data type to restrict the return to.
 * @return array
 *   An associative array keyed by the data type and values as an array of
 *   information about the data type:
 *     name: The key to use for form options.
 *     title: The value to use for form options.
 *     guid: The guid field 
 *     label: If a data type has a human-readable name, such as InvoiceName.
 *     plural: The wrapper for a data type.
 *   Or one array with the above information as keys.
 *   OR FALSE if no type information exists.
 *
 * @todo Do this for all types.
 */
function xero_get_data_types($name = '') {
  $types = array(
    'Contact' => array(
      'name' => 'Contact',
      'title' => 'Contact',
      'guid' => 'ContactID',
      'label' => 'Name',
      'plural' => 'Contacts',
    ),  
    'BankTransaction' => array(
      'name' => 'BankTransaction',
      'title' => 'Bank transaction',
      'guid' => 'BankTransactionID',
      'label' => '', 
      'plural' => 'BankTransactions',
    ),
    'Invoice' => array(
      'name' => 'Invoice',
      'title' => 'Invoice',
      'guid' => 'InvoiceID',
      'label' => 'InvoiceNumber',
      'plural' => 'Invoices',
    ),
    'Account' => array(
      'name' => 'Account',
      'title' => 'Account',
      'guid' => 'AccountID',
      'label' => 'AccountCode',
      'plural' => 'Accounts',
    ),
    'Payment' => array(
      'name' => 'Payment',
      'title' => 'Payment',
      'guid' => 'PaymentID',
      'label' => '',
      'plural' => 'Payments',
    ),
  );

  if ($name && isset($types[$name])) {
    return $types[$name];
  }
  elseif ($name) {
    return FALSE;
  }

  return $types;
}
