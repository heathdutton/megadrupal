<?php
/**
 * @file
 */


/**
 * Implementation of hook_requirements().
 */
function xero_requirements($phase) {
  $t = get_t();

  $requirements = array(
    'xero_lib' => array(
      'title' => $t('Xero library'),
      'value' => $t('The PHP-Xero library is installed correctly.'),
      'severity' => REQUIREMENT_OK,
    ),
  );

  $incpath = drupal_get_path('module', 'xero') . '/include/';

  if (!drupal_verify_install_file($incpath . 'xero.php', FILE_EXIST, 'file')) {
    $requirements['xero_lib']['value'] = $t('You must install the !link in the xero module include/ directory before proceeding.', array('!link' => l($t('PHP-Xero Library'), 'http://github.com/mradcliffe/PHP-Xero')));
    $requirements['xero_lib']['severity'] = REQUIREMENT_ERROR;
  }

  if ($phase == 'runtime') {
    $requirements['xero_cert'] = array(
      'title' => $t('Xero cert'),
      'value' => $t('Found your Xero certificate and key in the configured location.'),
      'severity' => REQUIREMENT_OK
    );

    $certpath = variable_get('xero_cert_path', '');
    $keypath = variable_get('xero_key_path', '');

    if (!drupal_verify_install_file($certpath, FILE_EXIST, 'file') || !drupal_verify_install_file($keypath, FILE_EXIST, 'file')) {
      $requirements['xero_cert']['value'] = $t('You must !configure the Xero module with the location of your Xero certificate!', array('!configure' => l($t('configure'), 'admin/config/services/xero')));
      $requirements['xero_cert']['severity'] = REQUIREMENT_ERROR;
    } 
    else if (function_exists('openssl_x509_parse')) {
      $certinfo = openssl_x509_parse(file_get_contents($certpath));
      if ($certinfo['validFrom_time_t'] > time() || $certinfo['validTo_time_t'] < time()) {
        $requirements['xero_cert']['value'] .= '<p>' . $t('The certificate is expired (valid from %from to %to).', array('%from' => format_date($certinfo['validFrom_time_t']), '%to' => format_date($certinfo['validTo_time_t']))) . '</p>';
        $requirements['xero_cert']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }

  if ($requirements['xero_lib']['severity'] == REQUIREMENT_OK) {
    // Load up Xero library directly only if it exists.
    require_once $incpath . '/xero.php';
    $key = variable_get('xero_consumer_key', '');
    $secret = variable_get('xero_consumer_secret', '');
    $cert = variable_get('xero_cert_path', '');
    $cert_key = variable_get('xero_key_path', '');

    if (!class_exists('Xero')) {
      // We shouldn't be having this issue, but just in case...
      $requirements['xero_lib']['value'] = $t('You must install the !link in the xero module include/ directory before proceeding.', array('!link' => l($t('PHP-Xero Library'), 'http://github.com/mradcliffe/PHP-Xero')));
      $requirements['xero_lib']['severity'] = REQUIREMENT_ERROR;
    }
    else {
      $xero = new Xero($key, $secret, $cert, $cert_key, 'json');

      if (!method_exists($xero, 'verify')) {
        $requirements['xero_lib']['value'] = $t('For stability purposes, you should use a fork of PHP-Xero that has the verify() method such as !link', array('!link' => l($t("mradcliffe/PHP-Xero"), 'http://github.com/mradcliffe/PHP-Xero')));
        $requirements['xero_lib']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }

  if (module_exists('oauth_common')) {
    $requirements['xero_oauth'] = array(
      'title' => $t('Xero oauth'),
      'value' => $t('The xero module is currently incompatible with the oauth module because both modules include the same codebase. Please uninstall the oauth module before continuing.'),
      'severity' => REQUIREMENT_WARNING,
    );
  }

  return $requirements;
}

/**
 * Implements hook_field_schema().
 */
function xero_field_schema($field) {
  if ($field['type'] == 'xero_reference') {
    return array(
      'columns' => array(
        'guid' => array('type' => 'varchar', 'length' => 36, 'not null' => TRUE),
        'label' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
        'type' => array('type' => 'varchar', 'length' => 100, 'not null' => TRUE),
      ),
      'indexes' => array(
        'type' => array('type'),
      ),
    );
  }
}

