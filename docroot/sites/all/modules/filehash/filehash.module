<?php

/**
 * @file
 * Generate hashes for each uploaded file.
 */

/**
 * Implements hook_menu().
 */
function filehash_menu() {
  $items['admin/config/media/filehash'] = array(
    'title' => 'File hash',
    'description' => 'Configure file hash settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filehash_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'filehash.admin.inc',
  );
  return $items;
}

/**
 * Returns array of enabled hash algorithms.
 */
function filehash_algos() {
  return array_diff(variable_get('filehash_algos', array()), array(0));
}

/**
 * Implements hook_file_delete().
 */
function filehash_file_delete($file) {
  db_delete('filehash')
    ->condition('fid', $file->fid)
    ->execute();
}

/**
 * Implements hook_file_insert().
 */
function filehash_file_insert($file) {
  filehash_save($file);
}

/**
 * Implements hook_file_load().
 */
function filehash_file_load($files) {
  $algos = filehash_algos();
  if ($algos) {
    $result = db_select('filehash')
      ->fields('filehash')
      ->condition('fid', array_keys($files), 'IN')
      ->execute();
    foreach ($result as $record) {
      foreach ($algos as $algo) {
        $files[$record->fid]->filehash[$algo] = $record->$algo;
      }
    }
    // Generate hash if it does not already exist for the file.
    foreach ($files as $fid => $file) {
      foreach ($algos as $algo) {
        if (empty($file->filehash[$algo])) {
          filehash_save($files[$fid]);
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_file_update().
 */
function filehash_file_update($file) {
  filehash_save($file);
}

/**
 * Implements hook_file_validate().
 */
function filehash_file_validate($file) {
  $errors = array();
  if (variable_get('filehash_dedupe', 0)) {
    foreach (filehash_algos() as $algo) {
      if (db_query("SELECT COUNT(*) FROM {filehash} WHERE $algo = :hash", array(':hash' => hash_file($algo, $file->uri)))->fetchField()) {
        $errors[] = t('Sorry, duplicate files are not permitted.');
        break;
      }
    }
  }
  return $errors;
}

/**
 * Returns array of human-readable hash algorithm names.
 */
function filehash_names() {
  return array('md5' => 'MD5', 'sha1' => 'SHA-1', 'sha256' => 'SHA-256');
}

/**
 * Implements hook_node_view().
 */
function filehash_node_view($node, $view_mode) {
  static $fields;
  // Add <media:hash> elements for at most one file per RSS item.
  if ($view_mode == 'rss') {
    // The <media:hash> element only supports MD5 and SHA-1.
    $algos = filehash_algos();
    if (isset($algos['md5']) || isset($algos['sha1'])) {
      if (!isset($fields)) {
        // The following field types are currently supported.
        $fields = field_read_fields(array('type' => array('file', 'image', 'media')));
      }
      foreach (field_info_instances('node', $node->type) as $instance) {
        if (isset($fields[$instance['field_name']])) {
          foreach ($node->$instance['field_name'] as $language) {
            foreach ($language as $file) {
              // Media fields incorporate a file object rather than a file array.
              if ($fields[$instance['field_name']]['type'] == 'media') {
                filehash_rss_elements((array) $file['file'], $node);
                return;
              }
              elseif ($fields[$instance['field_name']]['type'] == 'image') {
                filehash_rss_elements($file, $node);
                return;
              }
              elseif ($file['display']) {
                filehash_rss_elements($file, $node);
                return;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Adds <media:hash> RSS elements to $node object.
 */
function filehash_rss_elements(array $file, $node) {
  $names = array('md5' => 'md5', 'sha1' => 'sha-1');
  foreach ($names as $algo => $name) {
    if (!empty($file['filehash'][$algo])) {
      $node->rss_elements[] = array(
        'key' => 'media:hash',
        'attributes' => array('algo' => $name),
        'value' => $file['filehash'][$algo],
      );
    }
  }
  $node->rss_namespaces['xmlns:media'] = 'http://search.yahoo.com/mrss/';
}

/**
 * Calculates and saves the file hashes.
 */
function filehash_save($file) {
  $file->filehash = array_fill_keys(array('md5', 'sha1', 'sha256'), NULL);
  foreach (filehash_algos() as $algo) {
    $file->filehash[$algo] = hash_file($algo, $file->uri);
  }
  db_merge('filehash')
    ->key(array('fid' => $file->fid))
    ->fields($file->filehash)
    ->execute();
}

/**
 * Implements hook_views_api().
 */
function filehash_views_api() {
  return array(
    'api' => 3,
  );
}
