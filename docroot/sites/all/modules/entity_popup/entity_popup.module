<?php
/**
 * @file
 * Hook implementations for Entity Popup.
 */

/**
 * Implements hook_menu().
 */
function entity_popup_menu() {
  $items['entity-popup/%entity_popup_url'] = array(
    'page callback' => 'entity_popup_entity_output',
    'page arguments' => array(1),
    'access callback' => 'entity_popup_access',
    'access arguments' => array(1),
    'load arguments' => array('%map'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permissions().
 */
function entity_popup_permissions() {
  return array(
    'administer entity popup' => array(
      'title' => t('Administer Entity Popup'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function entity_popup_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function entity_popup_ctools_plugin_api($owner, $api) {
  if ($owner == 'entity_popup' && $api == 'entity_popup') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function entity_popup_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'default_entity_popup_settings_alter') {
    $group = $implementations['entity_popup'];
    unset($implementations['entity_popup']);
    $implementations = array('entity_popup' => $group) + $implementations;
  }
}

/**
 * Access callback.
 */
function entity_popup_access($entity) {
  return entity_access('view', $entity['entity_type'], $entity['entity']);
}

/**
 * Menu load callback.
 *
 * Takes a url with the entity-popup prefix and tries to extract an entity type
 * and entity from it.
 *
 * @see entity_popup_extract_entity()
 *
 * @return array|bool
 *   An array with following keys:
 *     - entity_type: The entity type of the found entity.
 *     - entity: The entity that was found.
 *   Or FALSE if no entity was found.
 */
function entity_popup_url_load($arg, $map = array()) {
  // First lets remove 'entity-popup'.
  array_shift($map);

  // Use current language.
  global $language;
  $lang_code = $language->language;

  // Lets determine if we have a prefix from our languages.
  if (module_exists('locale') && function_exists('language_url_split_prefix')) {
    // Get our language list to pass into our url splitter.
    $languages = language_list();

    // Turn the path into a string so we can then remove our prefix.
    $path_string = implode('/', $map);
    $language_path = language_url_split_prefix($path_string, $languages);

    // Separate out the returned path and language.  We should always
    // have two indexes, the first is the language, second is the path.
    $lang_code = $language_path[0] ? $language_path[0]->language : '';

    // Change global language so t() will work.
    $language = $language_path[0] ? $language_path[0] : $language;

    $final_path = $language_path[1];

    // Lets find our path based on the current translation.
    $path = drupal_get_normal_path($final_path, $lang_code);
  }
  else {
    // Build our path to return our system path,
    $path = drupal_get_normal_path(implode('/', $path));
  }
  return entity_popup_extract_entity($path, $lang_code);
}

/**
 * Extracts the entity type and entity from a system path.
 *
 * It will return the
 * last entity and entity type found. So a path like 'user/10/commerce_order/12
 * will return an array with 'commerce_order' as the value for the 'entity_type'
 * key and the commerce order with id 12 as the value for the 'entity' key. It
 * will return FALSE if no entity was found.
 *
 * @param string $path
 *   The system path.
 * @param string $lang_code
 *   The language in which the entity should be rendered. Defaults to the
 *   current language.
 *
 * @return array|bool
 *   An array with following keys:
 *     - entity_type: The entity type of the found entity.
 *     - entity: The entity that was found.
 *   Or FALSE if no entity was found.
 */
function entity_popup_extract_entity($path, $lang_code = NULL) {
  if (!$lang_code) {
    global $language;
    // Use current language.
    $lang_code = $language->language;
  }
  $router_item = menu_get_item($path);
  $entity = FALSE;
  $entity_type = FALSE;
  if (isset($router_item['load_functions'])) {
    foreach ($router_item['load_functions'] as $position => $function) {
      if (!empty($router_item['map'][$position])) {
        // Replace '_load' at the end of the function name and check if it is an
        // entity type.
        $potential_entity_type = drupal_substr($function, 0, drupal_strlen($function) - 5);
        if (entity_get_info($potential_entity_type)) {
          // We found an entity! But there might be more so do not return it
          // yet! (e.g. user/%user/orders/%commerce_order: return the
          // commerce_order, not the user.
          $entity = $router_item['map'][$position];
          $entity_type = $potential_entity_type;
        }
      }
    }
  }
  if (!$entity) {
    // No entity found. Returning FALSE on a load function for a menu item
    // results in a 404 Not Found, which is sensible in this case.
    return FALSE;
  }

  // Check if there are settings for this entity.
  if (!entity_popup_get_view_mode($entity_type, $entity)) {
    return FALSE;
  }
  return array(
    'entity_type' => $entity_type,
    'entity' => $entity,
    'lang_code' => $lang_code,
  );
}

/**
 * Page callback.
 */
function entity_popup_entity_output($variables) {
  $build = entity_view(
    $variables['entity_type'],
    array($variables['entity']),
    entity_popup_get_view_mode($variables['entity_type'], $variables['entity']),
    $variables['lang_code']
  );
  print drupal_render($build);
}

/**
 * Get the popup view mode for an entity.
 *
 * @param string $entity_type
 *   The entity type of the entity to get the view mode for.
 * @param string|object $entity
 *   The bundle or the entity to get the view mode for.
 */
function entity_popup_get_view_mode($entity_type, $entity) {
  $bundle = '';
  if (is_string($entity)) {
    $bundle = $entity;
  }
  else {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  ctools_include('export');
  $settings = ctools_export_crud_load('entity_popup_settings', "{$entity_type}_{$bundle}");
  if (!$settings || $settings->disabled) {
    return FALSE;
  }
  return $settings->view_mode;
}
