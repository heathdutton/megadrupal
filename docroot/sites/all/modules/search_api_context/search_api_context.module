<?php
/**
 * @file
 * Context blocks for Search API facets
 *
 * Display views blocks that are sensitive to the currently selected
 * facets of a Search API search result.
 * Optionally, also set the title and the breadcrumb
 * (C)2011 Michael Moritz miiimooo/at/drupal.org
 */
/**
* Implement hook_menu().
*/
function search_api_context_menu() {
  $items = array();

  $items['admin/config/search/search_api/context'] = array(
    'title' => 'Context',
    'description' => 'Configuration of context sensitive services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_context_settings_form'),
    'access arguments' => array('administer search_api'),
    'file' => 'search_api_context.admin.inc',
    'weight' => 9999,
    'type' => MENU_LOCAL_TASK,
  );
 return $items;
}
function search_api_context_block_info() {
  $blocks = array();
  $num = variable_get('search_api_context_num', 2);
  for($idx=1; $idx <= $num; $idx++) {
    $blocks[$idx] = array(
      'info' => t('Search API context #@idx', array('@idx' => $idx)),
      'cache' => DRUPAL_CACHE_PER_ROLE|DRUPAL_CACHE_PER_PAGE,
  );

  }
  return $blocks;
}
function search_api_context_block_configure($delta = '') {
  $form = array();

  $styles = array();
  foreach (views_get_all_views() as $view) {
//       if ($view->disabled) {
//         continue;
//       }
    foreach($view->display as $display_name => $display) {
      $styles[$view->name . ":" . $display_name] = $view->human_name . ": "
        . $display->display_title;
    }
  }

  $form['search_api_context']['help'] = array(
    '#value' => t("<p>A taxonomy context block uses the current <em>taxonomy path</em> and passes it to a view. The taxonomy path is constructed from the current selection and its ordering in the URL. For instance, <em>taxonomy:2,3</em> is a path where <em>2</em> is the first term id and <em>3</em> is the second and last term id. The term path can be passed in various ways to a view to display an informational block sensitive to the current selection.</p>")
  );
  $form['search_api_context']['view'] = array(
    '#type' => 'select',
    '#title' => t('View'),
    '#description' => t("Select the view to use for displaying the taxonomy context. The view must accept a term id as argument and validation should allow for 1+2+3 (for OR) and 1,2,3 (for AND)."),
    '#default_value' => variable_get('search_api_context_view_' . $delta, 0),
    '#options' => $styles,
    '#required' => TRUE,
  );
  $options = module_invoke_all('search_api_context_argument_handler');
  $form['search_api_context']['view_arg'] = array(
    '#type' => 'select',
    '#title' => t('Argument handling'),
    '#description' => t("Select how the taxonomy term ids will be handled before they are being passed to the view. The order this refers to is what is in the URL after <em>?</em>."),
    '#default_value' => variable_get('search_api_context_view_arg_' . $delta, 'search_api_context:last'),
    '#options' => $options,
    '#required' => TRUE,
  );
  $options = array( NULL => t('<None>'));
  $options = array_merge($options, module_invoke_all('search_api_context_title_handler'));
  $form['search_api_context']['settitle'] = array(
    '#type' => 'select',
    '#title' => t('Set the page title'),
    '#description' => t("Additionally we could set the title of the page to the selected term. Specify here to which active term it should be set to or set to <em>&lt;None&gt;</em>if you do not want to change the page title."),
    '#default_value' => variable_get('search_api_context_title_' . $delta, 0),
    '#options' => $options,
  );
  $form['search_api_context']['breadcrumb'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set the breadcrumb'),
    '#description' => t("Additionally we could try to set the breadcrumb according to selected terms. This requires that there is a menu item for the base path of the search API view."),
    '#default_value' => variable_get('search_api_context_breadcrumb_' . $delta, 0),
  );
  return $form;
}
function search_api_context_block_save($delta = '', $edit = array()) {
  if ($delta == 0) {
    return;
  }
  variable_set('search_api_context_view_' . $delta, $edit['view']);
  variable_set('search_api_context_view_arg_' . $delta, $edit['view_arg']);
  variable_set('search_api_context_title_' . $delta, $edit['settitle']);
  variable_set('search_api_context_breadcrumb_' . $delta, $edit['breadcrumb']);
}

function search_api_context_block_view($delta = '') {
  if (!isset($_GET['filter'])) {
    return;
  }
  $view = variable_get('search_api_context_view_' . $delta, 0);
  $view_arg = variable_get('search_api_context_view_arg_' . $delta, 'search_api_context:last');
  if (!$view || !$view_arg) {
    return;
  }
  $filter = $_GET['filter'];
  $block = array();
  $butter = array();
  $vocs = taxonomy_get_vocabularies();
  $vocs_by_name = taxonomy_vocabulary_get_names();
  foreach(array_keys($filter) as $key) {
    if (!strpos($key, ":")) {
      continue;
    }
    list($field_name, $property) = explode(":", $key, 2);
    $fi = field_info_field($field_name);
    $vid = false;
    foreach($fi['settings']['allowed_values'] as $voc) {
      if (!$voc['vocabulary'] || !$vocs_by_name[$voc['vocabulary']]) {
        continue;
      }
      $vid = $vocs_by_name[$voc['vocabulary']]->vid;
    }
    if (!$vid) {
      continue;
    }
    $names = array();
    $tids = array();
    foreach($filter[$key] as $idx => $term_name) {
      $lname = _search_api_create_filter_name($term_name, 'options', array($term_name));
      $terms = taxonomy_get_term_by_name($lname);
      $tid = false;
      foreach($terms as $term) {
        if ($term->vid == $vid) {
          $tid = $term->tid;
          break;
        }
      }
      if (!$tid) {
        continue;
      }
      unset($filter[$key][$idx]);
      /**
      $order[] = array('vid' => $vid, 'tid' => $tid);
      $vals[] = array('vname' => $vocs[$vid]->name, 'tname' => $lname,
        'remover' => $filter);
      **/
      $tids[] = $tid;
      $names[] = $lname;

//       $vals[$vid] = $filter[$key];
    }
    unset($filter[$key]);
    $butter[] = array('names' => $names, 'key' => $key, 'remover' => $filter,
      'tids' => $tids);

  }
  if (empty($butter)) {
    return;
  }
//   $context = array( 'ordered' => $order, 'values' => $vals);
  $context = array( 'breadcrumb' => $butter);
  $title = variable_get('search_api_context_title_' . $delta, 0);
  list($context['view_id'], $context['display_name']) = explode(":", $view, 2);
  list($module, $handler) = explode(":", $view_arg, 2);
  $hook = 'search_api_context_argument_handler_' . $handler;
  $output = module_invoke($module, $hook, $context);
  if ($title) {
    list($module, $handler) = explode(":", $title, 2);
    $hook = 'search_api_context_title_handler_' . $handler;
    module_invoke($module, $hook, $context);
  }
  if (variable_get('search_api_context_breadcrumb_' . $delta, 0)) {
/**    array_pop($vals); **/
    array_pop($butter);
    $breadcrumb = array();
    if (menu_get_active_title()) {
      $breadcrumb[] = l(menu_get_active_title(), $_GET['q']);
    }
/**    foreach($vals as $idx => $v) {
      $breadcrumb[] = l($v['tname'], $_GET['q'], array(
        'query' => array('filter' => $v['remover'])));
    } **/
    foreach($butter as $idx => $v) {
      $breadcrumb[] = l(implode("+", $v['names']), $_GET['q'], array(
        'query' => array('filter' => $v['remover'])));
    }
    $breadcrumb = array_merge(drupal_get_breadcrumb(), $breadcrumb);
    drupal_set_breadcrumb($breadcrumb);
  }
//   dsm($butter);
  return ($output ? array( 'content' => array('#markup' => $output)) : NULL);
}
/**
  Implementation of hook_search_api_context_argument_handler()
**/
function search_api_context_search_api_context_argument_handler() {
  return array(
    "search_api_context:last" => t("Pass only the last term id"),
    "search_api_context:first" => t("Pass only the first term id"),
/*
    "or" => t("Combine the term ids with a logical OR (same as +)"),
    "and" => t("Combine the term ids with a logical AND (same as ,)"),
    "iterate" => t("Iterate through the term ids"),
    "iterate_reverse" => t("Iterate through the term ids in reverse order"),
*/
  );
}
/**
  Implementation of hook_search_api_context_argument_handler()
**/
function search_api_context_search_api_context_title_handler() {
  return array(
    "search_api_context:last" => t("Set the title to the last term name"),
    "search_api_context:first" => t("Set the title to the first term name"),
  );
}
function search_api_context_search_api_context_argument_handler_last($context) {
  $arguments = array_pop($context['breadcrumb']);
  return views_embed_view($context['view_id'], $context['display_name'],
    implode('+', $arguments['tids']));
}
function search_api_context_search_api_context_argument_handler_first($context) {
  $arguments = array_shift($context['ordered']);
  return views_embed_view($context['view_id'], $context['display_name'],
    implode('+', $arguments['tids']));
}

function search_api_context_search_api_context_title_handler_last($context) {
  $item = array_pop($context['breadcrumb']);
  drupal_set_title(implode('+', $item['names']));
}
function search_api_context_search_api_context_title_handler_first($context) {
  $item = array_shift($context['breadcrumb']);
  drupal_set_title(implode('+', $item['names']));
}