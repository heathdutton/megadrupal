<?php

/**
 * @file
 * User visits Advanced
 * Extending user_visits module
 * - store a total number of visits
 * - store the number of visits history for each of the X past days
 * - store the most recent visitors uids of the past Y hours
 * - implement blocks to display this stored information
 */

/**
 * Implements hook_help().
 */
function user_visits_adv_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#user-visits-advaced":
      $output = '<p>' . t('Extends the user visits module.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_block_info().
 */
function user_visits_adv_block_info() {
  $blocks['0'] = array(
    'info' => t('My recent visitors adv'),
  );
  $blocks[1] = array(
    'info' => t('My visitors history adv'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function user_visits_adv_block_configure($delta = '0') {
  $form['items'] = array(
    '#type' => 'select',
    '#title' => t('Number of items'),
    '#default_value' => variable_get('user_visits_adv_block_items_' . $delta, 5),
    '#options' => drupal_map_assoc(
      array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25)
    ),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function user_visits_adv_block_save($delta = '0', $edit = array()) {
  variable_set('user_visits_adv_block_items_' . $delta, $edit['items']);
}

/**
 * Implements hook_block_view().
 */
function user_visits_adv_block_view($delta = '') {
  $limit = variable_get('user_visits_adv_block_items_' . $delta, 5);
  switch ($delta) {
    case 0:
      $block = array(
        'subject' => t('Latest visitors'),
        'content' => user_visits_adv_visitors_block($limit),
      );
      break;

    case 1:
      $block = array(
        'subject' => t('Visitors history'),
        'content' => user_visits_adv_history_block($limit),
      );
      break;

  }
  return $block;
}

/**
 * Get latest visitors for block content.
 */
function user_visits_adv_visitors_block($limit = 5) {
  global $user;
  $output = '';

  if ($user->uid) {
    $visitors = user_visits_adv_get('visitors', $user->uid);
    if (is_array($visitors)) {
      $visitors = array_slice($visitors, 0, $limit, TRUE);
      foreach ($visitors as $uid => $visit) {
        $account = db_query('SELECT uid, name, picture FROM {users} WHERE uid = :uid', array(':uid' => $uid))->fetchObject();
        $output .= theme('user_visits', array('account' => $account, 'visit' => $visit));
      }
    }
  }
  return $output;
}

/**
 * Get latest visitors for block content.
 */
function user_visits_adv_history_block($limit = 7) {
  global $user;
  $output = '';

  if ($user->uid) {
    // Initialize the total number of visits to the users profile page.
    $total = 0;
    $total += user_visits_adv_get('total', $user->uid);
    // Retrieve the history of the users profile visits and add it
    // up to a clean history array.
    $history_visits = user_visits_adv_get('history', $user->uid);
    $history = array_fill(user_visits_adv_get_history_key(REQUEST_TIME) - $limit + 1, $limit, 0);
    foreach ($history as $key => $visits) {
      if (!empty($history_visits[$key])) {
        $history[$key] += $history_visits[$key];
      }
    }
    $output = theme_user_visits_adv_history($history, $total);
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function user_visits_adv_theme() {
  return array(
    'user_visits_adv_history' => array(
      'arguments' => array(
        'history' => NULL,
        'total' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for history block.
 */
function theme_user_visits_adv_history($history, $total) {
  $output = '<div>' . t('!total views in total', array('!total' => $total)) . '</div>';
  $output .= '<div>' . t('history') . ': ' . implode(' ', $history) . '</div>';
  return $output;
}

/**
 * Get latest visitors for block content.
 */
function user_visits_adv_get($element, $uid) {
  static $user_visits_adv_data = array();
  if (!isset($user_visits_adv_data[$uid])) {
    $data = db_select('user_visits_adv', 'uva')
      ->fields('uva', array('total', 'visitors', 'history'))
      ->condition('uid', $uid, '=')
      ->execute()
      ->fetchObject();
    if (!empty($data->total)) {
      $user_visits_adv_data[$uid] = array(
        'total' => $data->total,
        'visitors' => unserialize($data->visitors),
        'history' => unserialize($data->history),
      );
    }
    else {
      $user_visits_adv_data[$uid] = array();
    }
  }
  return $user_visits_adv_data[$uid][$element];
}

/**
 * Implements hook_user_delete().
 */
function user_visits_adv_user_delete($account) {
  $uid = $account->uid;
  db_query('DELETE FROM {user_visits_adv} WHERE uid = :uid', array(':uid' => $uid));
}

/**
 * Helper function to create the history key.
 * This key is used in the history array to define the day.
 * @param integer $time 
 *   is a UNIX timestamp.
 * @return integer 
 *   within the interval [0-99356].
 */
function user_visits_adv_get_history_key($time) {
  // Constructed with the year [0-99] and the day [0-356].
  return (date('y', $time) * 1000) + date('z', $time);
}

/**
 * Implements hook_cron().
 */
function user_visits_adv_cron() {
  $visitor_limit = variable_get('user_visits_adv_visitor_limit', 20);
  $visits = db_query('SELECT uid FROM {user_visits} GROUP BY uid');
  foreach ($visits as $visit) {
    $visitors = db_query('SELECT vuid, visit FROM {user_visits} WHERE uid = :uid ORDER BY visit DESC', array(':uid' => $visit->uid));
    $visit->visitors = array();
    $visit->recent_visitors = array();
    $visit->count = 0;
    foreach ($visitors as $visitor) {
      // Creating unique indentifier for the day.
      $key = user_visits_adv_get_history_key($visitor->visit);
      $visit->visitors[$key]++;
      if ($visit->count < $visitor_limit) {
        $visit->recent_visitors[$visitor->vuid] = $visitor->visit;
      }
      $visit->count++;
    }

    // Retrieve the history array.
    if ($data = db_query('SELECT history, visitors FROM {user_visits_adv} WHERE uid = :uid', array(':uid' => $visit->uid))->fetchObject()) {
      $history = unserialize($data->history);
      // Add daily visits to the history array.
      foreach ($visit->visitors as $key => $count) {
        $history[$key] += $count;
      }
      ksort($history);
      // Remove the oldest day from the history array.
      $range = variable_get('user_visits_adv_history_limit', 7);
      if (count($history) > $range) {
        $history = array_slice($history, count($history) - $range, $range, TRUE);
      }

      // Making recent visitors field.
      if ($visit->count < $visitor_limit) {
        $visitors = unserialize($data->visitors);
        $visitors = array_slice($visitors, 0, ($visitor_limit - $visit->count), TRUE);
        $visit->recent_visitors += $visitors;
        arsort($visit->recent_visitors, SORT_NUMERIC);
      }

      // Store all data.
      db_update('user_visits_adv')
        ->fields(array(
        'total' => total + $visit->count,
        'visitors' => serialize($visit->recent_visitors),
        'history' => serialize($history),
        ))
        ->condition('uid', $visit->uid)
        ->execute();
    }
    else {
      $range = variable_get('user_visits_adv_history_limit', 7);
      $history = array();
      foreach ($visit->visitors as $key => $count) {
        $history[$key] = $count;
      }
      ksort($history);
      // Remove the oldest day from the history array.
      if (count($history) > $range) {
        $history = array_slice($history, count($history) - $range, $range, TRUE);
      }
      db_insert('user_visits_adv')
      ->fields(array(
        'uid' => $visit->uid,
        'total' => $visit->count,
        'visitors' => serialize($visit->recent_visitors),
        'history' => serialize($history),
      ))
      ->execute();
    }
  }
  // All data is harvested, so empty the user_visits table.
  db_query('DELETE FROM {user_visits}');
}

/**
 * Implements hook_form_alter().
 */
function user_visits_adv_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_visits_settings') {
    $form['user_visits	']['user_visits_advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced'),
      '#weight' => 1,
    );
    $form['user_visits']['user_visits_advanced']['user_visits_adv_history_limit'] = array(
      '#type' => 'textfield',
      '#title' => t('Limiting historical data'),
      '#default_value' => variable_get('user_visits_adv_history_limit', 7),
      '#size' => 3,
      '#maxlength' => 3,
      '#description' => t('Number of days to collect historical visit data, not more than 365 days.'),
    );
    $form['user_visits']['user_visits_advanced']['user_visits_adv_visitor_limit'] = array(
      '#type' => 'textfield',
      '#title' => t('Stored visitors limit'),
      '#default_value' => variable_get('user_visits_adv_visitor_limit', 20),
      '#size' => 3,
      '#maxlength' => 5,
      '#description' => t('Maximum number of visitors to collect per user.'),
    );
  }
}
