<?php

/**
 * @file
 * Defines features and functions common to the commerce delivery module.
 */

/**
 * Implements hook_permission().
 */
function commerce_delivery_permission() {
  $permissions = array(
    'commerce_delivery_administer_deliveries' => array(
      'title' => t('Adminster deliveries'),
      'description' => t('Allows users to administer deliveries.'),
      'restrict access' => TRUE,
    ),
    'commerce_delivery_manage_deliveries' => array(
      'title' => t('Manage deliveries'),
      'description' => t('Allows users to manage deliveries.'),
      'restrict access' => TRUE,
    ),
    'commerce_delivery_rules_access' => array(
      'title' => t('Adminster deliveries rules'),
      'description' => t('Allows users to adminster deliveries rules.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function commerce_delivery_entity_info() {
  $return = array(
    'commerce_delivery' => array(
      'label' => t('Commerce Delivery'),
      'controller class' => 'CommerceDeliveryEntityController',
      'base table' => 'commerce_delivery',
      'uri callback' => 'commerce_delivery_uri',
      'fieldable' => TRUE,
      'token_type' => 'commerce-delivery',
      'entity keys' => array(
        'id' => 'delivery_id',
        'bundle' => 'type',
        'label' => 'delivery_id',
      ),
      'bundles' => array(
        'commerce_delivery' => array(
          'label' => 'Delivery',
          'admin' => array(
            'path' => 'admin/commerce/config/delivery',
            'access arguments' => array('administer deliveries'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full Delivery'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),
      'load_hook' => 'commerce_delivery_load',
      'creation callback' => 'commerce_delivery_new',
      'save callback' => 'commerce_delivery_save',
      'deletion callback' => 'commerce_delivery_delete',
    ),
  );
  return $return;
}

/**
 * Callback returning delivery url.
 */
function commerce_delivery_uri($delivery) {
  return array( 'path' => 'admin/commerce/deliveries/' . $delivery->delivery_id . '/view');
}

/**
 * Callback creating a new delivery.
 */
function commerce_delivery_new($order_id = 0, $status = 0, $type = 'commerce_delivery') {
  return entity_get_controller('commerce_delivery')->create(array(
  'type' => $type,
  'order_id' => $order_id,
  'status' => $status,
  ));
}

/**
 * Saves a delivery.
 *
 * @param $delivery
 *   The full delivery object to save. If $delivery->delivery_id is empty, a new delivery
 *     will be created.
 *
 * @return
 *   The saved delivery object.
 */
function commerce_delivery_save($delivery) {
  return entity_get_controller('commerce_delivery')->save($delivery);
}

/**
 * Callback for getting order properties.
 * @see commerce_delivery_entity_property_info()
 */
function commerce_delivery_get_properties($order, array $options, $name) {
  switch ($name) {
//    case 'view-url':
//      return url('delivery/' . $delivery->delivery_id, $options);
    case 'admin-url':
      return url('admin/commerce/deliveries/' . $delivery->delivery_id . '/view', $options);
    case 'edit-url':
      return url('admin/commerce/deliveries/' . $delivery->delivery_id . '/edit', $options);
  }
}

/**
 * Loads a delivery by ID.
 */
function commerce_delivery_load($delivery_id) {
  $delivery = commerce_delivery_load_multiple(array($delivery_id), array());
  return $delivery ? reset($delivery) : FALSE;
}

/**
 * Loads multiple deliveries by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $delivery_ids
 *   An array of delivery IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_delivery} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal delivery loading cache.
 *
 * @return
 *   An array of delivery objects indexed by delivery_id.
 */
function commerce_delivery_load_multiple($delivery_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_delivery', $delivery_ids, $conditions, $reset);
}

/**
 * Implements hook_menu().
 */
function commerce_delivery_menu() {
  $items['admin/commerce/deliveries/add'] = array(
    'title' => 'Create a delivery ',
    'description' => 'Create a new delivery for the specified order.',
    'page callback' => 'commerce_delivery_add',
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/deliveries/add/%order_id'] = array(
    'title' => 'Create a delivery ',
    'description' => 'Create a new delivery for the specified order.',
    'page callback' => 'commerce_delivery_add',
    'page arguments' => array(4),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/config/delivery'] = array(
    'title' => 'Delivery settings',
    'description' => 'Configure general delivery settings, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_delivery_settings_form'),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/config/delivery/settings'] = array(
    'title' => 'Settings',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // this is ugly, but couldn't find a better way.
  // views can't set a contextual inline tab
  $items['admin/commerce/orders/%commerce_order/deliveries'] = array(
    'title' => 'Deliveries',
    'page callback' => 'commerce_delivery_by_order_view',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/orders/%commerce_order/deliveries/move/%commerce_line_item/%commerce_delivery'] = array(
    'title' => 'Move line item to a delivery',
    'page callback' => 'commerce_delivery_move_item',
    'page arguments' => array(3, 6, 7),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/deliveries/%commerce_delivery'] = array(
    'page arguments' => array(3),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => -10,
  );
  $items['admin/commerce/deliveries/%commerce_delivery/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_delivery_edit_form', 3),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/deliveries/%commerce_delivery/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_delivery_page_delete_confirm_form', 3),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_field_extra_fields().
 */
function commerce_delivery_field_extra_fields() {
  $return = array();
  $return['commerce_delivery']['commerce_delivery'] = array(
    'form' => array(
      'delivery_id' => array(
        'label' => t('ID'),
        'description' => t('Delivery ID'),
        'weight' => 1,
      ),
      'order_id' => array(
        'label' => t('OID'),
        'description' => t('Order ID'),
        'weight' => 1,
      ),
      'status' => array(
        'label' => t('Status'),
        'description' => t('Delivery status'),
        'weight' => 1,
      ),
    ),
    'display' => array(
      'delivery_id' => array(
        'label' => t('ID'),
        'description' => t('Delivery ID'),
        'weight' => 1,
      ),
      'order_id' => array(
        'label' => t('OID'),
        'description' => t('Order ID'),
        'weight' => 1,
      ),
      'status' => array(
        'label' => t('Status'),
        'description' => t('Delivery status'),
        'weight' => 1,
      ),
    ),
  );
  return $return;
}

/**
 * Page callback.
 */
function commerce_delivery_by_order_view($order) {
  $destination = drupal_get_destination();
  $views->content = '<ul class="action-links"><li>';
  $views->content .= l(t('Add delivery'), 'admin/commerce/deliveries/add/' . $order->order_id,
                        array('query' => $destination));

  $views->content .= '</li></ul>';
  $views->content .= views_embed_view('commerce_delivery_by_order', 'default', $order->order_id);
  return $views->content;
}

/**
 * Page callback for moving a line item to a delivery.
 *
 * @param $order
 *  The order entity.
 * @param $line_item
 *  The line item entity.
 * @param $delivery
 *  The delivery entity.
 */
function commerce_delivery_move_item($order, $line_item, $delivery) {
  // Validate the token from the link.
  $token = $_REQUEST['token'];
  if ($token != commerce_delivery_get_token($order->order_id, $line_item->line_item_id, $delivery->delivery_id)) {
    drupal_set_message(t('Invalid token.'), 'error');
    return drupal_access_denied();
  }

  // Validate that the line item belongs to the order.
  if ($line_item->order_id != $order->order_id) {
    drupal_set_message(t('Invalid parameters.'), 'error');
    return drupal_access_denied();
  }

  $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  // setting the deliver ref
  $wrapper->delivery_ref = $delivery->delivery_id;
  commerce_line_item_save($line_item);
  drupal_set_message(t('Item %item has been moved to delivery %delivery.', array(
    '%item' => $line_item->line_item_label,
    '%delivery' => $delivery->delivery_id,
  )));
  drupal_goto();
}

/**
 * Get a token to protect delivery action links.
 *
 * @param $order
 *  The order entity.
 * @param $line_item
 *  The line item entity.
 * @param $delivery
 *  The delivery entity.
 *
 * @return
 *  A token string.
 */
function commerce_delivery_get_token($order_id, $line_item_id, $delivery_id) {
  return drupal_get_token(implode('-', array('commerce_delivery', $order_id, $line_item_id, $delivery_id)));
}

/**
 * Page callback for adding a new delivery.
 *
 * @param $order_id
 *   ID of the order which to attach the delivery to
 *
 * @return
 */
function commerce_delivery_add($order_id = NULL) {
  // TODO: check order_id
  if ($order_id == '') {
    return t('Required Order ID missing.');
  }
  $delivery = (object) array(
    'id' => '',
    'type' => 'delivery',
    'order_id' => $order_id,
  );
  return drupal_get_form('commerce_delivery_add_form', $delivery);
}

/**
 * Helper function that return status values as options.
 *
 * @return
 *   An array of status labels indexed by their id.
 */
function commerce_delivery_get_status() {
  $options_array = variable_get('commerce_delivery_status_options');
  $options_array = explode("\n", $options_array);
  foreach ($options_array as $option) {
    $option = explode('|', $option);
    $options[$option[0]] = t($option[1]);
  }
  return $options;
}

/**
 * Returns the human readable title of a delivery status.
 *
 * @param $id
 *   id of the status
 *
 * @return
 *   string containing the human readable title for the specified state. If a state
 *     is specified that does not exist, this function returns FALSE.
 */
function commerce_delivery_status_get_title($id = NULL) {
  $states = commerce_delivery_get_status();

  // Return a state title if specified and it exists.
  if (isset($states[$id])) {
      return check_plain($states[$id]);
    }
  return FALSE;
}

/**
 * Add new delivery form
 */
function commerce_delivery_add_form($form, &$form_state, $delivery) {
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => commerce_delivery_get_status(),
    '#default_value' => variable_get('commerce_delivery_default_status', ''),
    '#required' => TRUE,
  );
  $form['order_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $delivery->order_id,
  );
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => 'commerce_delivery',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  field_attach_form('commerce_delivery', $delivery, $form, $form_state);
  return $form;
}

function commerce_delivery_add_form_validate($form, &$form_state) {
  $delivery_submission = (object) $form_state['values'];
  field_attach_form_validate('commerce_delivery', $delivery_submission, $form, $form_state);
}

function commerce_delivery_add_form_submit($form, &$form_state) {
  $delivery_submission = (object) $form_state['values'];
  field_attach_submit('commerce_delivery', $delivery_submission, $form, $form_state);
  $delivery = commerce_delivery_save($delivery_submission);
  // should next line go in rules?
  drupal_set_message(t('A new delivery has been added.'));
  $form_state['redirect'] = "admin/commerce/deliveries";
}

/**
 * Edit delivery form
 */
function commerce_delivery_edit_form($form, &$form_state, $delivery) {
  $form['#delivery'] = $delivery;

  $form['view'] = array(
    '#type' => 'item',
    '#markup' => views_embed_view('commerce_delivery_view', 'page', $delivery->delivery_id),
  );
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => commerce_delivery_get_status(),
    '#default_value' => $delivery->status,
    '#required' => TRUE,
  );
  $form['delivery_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $delivery->delivery_id,
  );
  $form['order_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $delivery->order_id,
  );
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $delivery->type,
  );
  $form['destination'] = array(
    '#type' => 'hidden',
    '#value' => drupal_get_destination(),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 40,
  );
  // TODO: when this form covers adding deliveries too, this button needs to
  // be conditional on the delivery not being new.
  // @see profile2_form() for a pattern to follow.
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete delivery'),
    '#weight' => 45,
    '#limit_validation_errors' => array(),
    '#submit' => array('commerce_delivery_form_submit_delete')
  );
  field_attach_form('commerce_delivery', $delivery, $form, $form_state);
  return $form;
}

function commerce_delivery_edit_form_submit($form, &$form_state) {
  $destination = $form_state['values']['destination'];
  unset($form_state['values']['destination']);
  $delivery_submission = (object) $form_state['values'];
  field_attach_submit('commerce_delivery', $delivery_submission, $form, $form_state);
  $delivery = commerce_delivery_save($delivery_submission);
  // should next line go in rules?
  drupal_set_message(t('Delivery status updated.'));
  $form_state['redirect'] = $destination;
}

/**
 * Delivery form submit handler for the delete button.
 */
function commerce_delivery_form_submit_delete($form, &$form_state) {
  $delivery = $form['#delivery'];
  $form_state['redirect'] = 'admin/commerce/deliveries/' . $delivery->delivery_id . '/delete';
}

/**
 * Confirm form for deleting a profile.
 *
 * @param $delivery
 *  A delivery entity.
 */
function commerce_delivery_page_delete_confirm_form($form, &$form_state, $delivery) {
  $form_state += array('delivery' => $delivery);
  $confirm_question = t('Are you sure you want to delete delivery @label?', array('@label' => $delivery->delivery_id));
  $uri = commerce_delivery_uri($delivery);
  return confirm_form($form, $confirm_question, $uri['path']);
}

/**
 * Submit handler for deleting a delivery.
 */
function commerce_delivery_page_delete_confirm_form_submit($form, &$form_state) {
  $delivery = $form_state['delivery'];
  commerce_delivery_delete($delivery);
  drupal_set_message(t('Deleted delivery %label.', array('%label' => $delivery->delivery_id)));
  $form_state['redirect'] = 'admin/commerce/deliveries';
}

/**
 * Delete a delivery entity.
 *
 * @param $delivery
 *  The delivery entity to delete.
 */
function commerce_delivery_delete($delivery) {
  module_invoke_all('entity_delete', $delivery, 'commerce_delivery');
  field_attach_delete('commerce_delivery', $delivery);

  db_delete('commerce_delivery')
    ->condition('delivery_id', $delivery->delivery_id)
    ->execute();

  entity_get_controller('commerce_delivery')->resetCache();
}

/**
 * Settings form
 */
function commerce_delivery_settings_form($form, &$form_state) {
  $form['commerce_delivery_status_options'] = array(
    '#type' => 'textarea',
    '#title' => t('Delivery status options'),
    '#description' => t('Supply status options. Format is "id|label". Take note that lower id get priority when assigning items to random deliveries.'),
    '#default_value' => variable_get('commerce_delivery_status_options', '0|new
1|pending
2|delivered
3|on hold
4|cancelled'),
  );
  $form['commerce_delivery_default_status'] = array(
    '#type' => 'select',
    '#title' => t('Delivery default status'),
    '#description' => t('Select the default status assigned to a new delivery.'),
    '#options' => commerce_delivery_get_status(),
    '#default_value' => variable_get('commerce_delivery_default_status', ''),
  );
  $form['commerce_delivery_active_status'] = array(
    '#type' => 'select',
    '#title' => t('Active deliveries statuses'),
    '#description' => t('Select in which statuses items can be assigned to a delivery.'),
    '#options' => commerce_delivery_get_status(),
    '#default_value' => variable_get('commerce_delivery_active_status', ''),
    '#multiple' => TRUE,
  );
  // Check if a shippable field has been defined
  $query = db_query('SELECT DISTINCT f.id, f.field_name
                            FROM {field_config} f RIGHT JOIN {field_config_instance} i ON f.id = i.field_id
                            WHERE f.type = :type and i.deleted = 0', array(':type' => 'list_boolean'));
  if ($query->rowCount() ) { // select one
    $form['commerce_delivery_shippable_field'] = array(
      '#type' => 'select',
      '#title' => t('Shippable item field'),
      '#description' => t('Select the boolean field identifying shippable skus. Every time a new field is selected do not forget to update the affected views: !by_order and !view. Clearing the !cache should be enough if views has not been customized.', array(
                '!by_order' => l('deliveries by order', 'admin/structure/views/view/commerce_delivery_by_order/edit'),
                '!view' => l('delivery view', 'admin/structure/views/view/commerce_delivery_view/edit'),
                '!cache' => l('cache', 'admin/config/development/performance'))),
      '#options' => $query->fetchAllKeyed(),
      '#default_value' => variable_get('commerce_delivery_shippable_field', ''),
    );
  }
  else {  // no field exists. ask to add one.
    $form['commerce_delivery_shippable_field'] = array(
      '#type' => 'item',
      '#title' => t('Shippable item field'),
      '#description' => t('No boolean fields available. Please add at least one to a !product to identify shippable skus.',
                    array( '!product' => l('product type', 'admin/commerce/products/types'))),
    );
    drupal_set_message($form['commerce_delivery_shippable_field']['#description'], 'warning');
  }
  $form['commerce_delivery_help_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Delivery creation help text'),
    '#description' => t('Supply an optional help message to be displayed above the delivery form.'),
    '#default_value' => variable_get('commerce_delivery_help_text', ''),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_views_api().
 */
function commerce_delivery_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_delivery') . '/includes',
  );
}

/**
 * Return deliveries by Order ID
 *
 * @param $order_id
 *   The order ID.
 *
 * @param $limit
 *   'active' for retrieving only deliveries with active status
 *   'all' (default) for everything
 *
 * @return
 *   Array of entity stubs as returned by EntityFieldQuery::execute().
 */
function commerce_delivery_get_deliveries($order_id, $limit = 'all') {
  if ($limit == 'active') {
    $active_status = variable_get('commerce_delivery_active_status', '');
  }
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'commerce_delivery')
        ->propertyCondition('order_id', $order_id);
  if ($limit == 'active') {
    $query->propertyCondition('status', $active_status);
  }
  $deliveries = $query->propertyOrderBy('status')
        ->execute();
  return $deliveries;
}

/**
 * Getter callback for Entity API metadata.
 */
function commerce_order_get_property_delivery($order, array $options, $name) {
  $delivery_stubs = commerce_delivery_get_deliveries($order->order_id);
  if (isset($delivery_stubs['commerce_delivery'])) {
    $delivery_ids = array_keys($delivery_stubs['commerce_delivery']);
    return $delivery_ids;
  }
  return array();
}

/**
 * Callback that returns delivery_ref default values
 */
function commerce_delivery_ref_default_value($type, $line_item, $f, $i, $lang) {
  return array(array('value' => 0));
}


function commerce_delivery_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'commerce_order') {
    $entity->content['commerce_delivery_for_order'] = array(
      '#markup' => views_embed_view('commerce_delivery_for_order', 'default', $entity->order_id),
    );
  }
}
