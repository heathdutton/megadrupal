<?php
define('EXPORTABLE_SCHEDULER_DATE_FORMAT', 'Y-m-d H:i:s');

/**
 * Implements hook_help().
 */
function exportable_scheduler_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#exportable_scheduler':
      $output = '<p>' . t('The Exportable Scheduler module provides the functionality for automatic enabling and disabling of ctools exportable objects at specified future dates.') . '</p>';
      break;
    default:
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function exportable_scheduler_menu() {
  $items['admin/config/scheduling'] = array(
    'title' => 'Scheduling',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exportable_scheduler_admin_form'),
    'access arguments' => array('schedule exportables'),
    'file' => 'exportable_scheduler.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function exportable_scheduler_permission() {
  return array(
    'schedule exportables' => array(
      'title' => t('Schedule the enabling/disabling of exportables'),
      'description' => t('Allows users to set a date and time to enable and/or disable ctools exportables.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function exportable_scheduler_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'exportable_scheduler_actions_form' => array(
      'render element' => 'form',
    ),
  );

  return $theme_hooks;
}

/**
 * Implementation of hook_cron().
 */
function exportable_scheduler_cron() {
  ctools_include('export');

  // Get all the actions that are past due to be triggered.
  $results = db_select('exportable_scheduler', 'es')
    ->fields('es')
    ->condition('date', time(), '<')
    ->execute();

  // Trigger each action and then remove these actions from the database.
  while ($action = $results->fetchAssoc()) {
    ctools_export_crud_set_status($action['schema_name'], $action['machinename'], $action['type'] == 0);
    watchdog('cron', 'Exportable Scheduler: @machinename (@schema_name) was !mode.', array('@machinename' => $action['machinename'], '@schema_name' => $action['schema_name'], '!mode' => ($action['type'] ? t('enabled') : t('disbaled'))));
  }
  db_delete('exportable_scheduler')
    ->condition('date', time(), '<')
    ->execute();
}

/**
 * Form alter for the ctools_export_ui_edit_item_form.
 */
function exportable_scheduler_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  $schemas = variable_get('exportable_scheduler_schemas', array());
  if (!user_access('schedule exportables') || !in_array($form_state['plugin']['schema'], $schemas, TRUE)) {
    return;
  }

  // Allow other modules to dictate which group the fieldset lives in.
  $group = '';
  drupal_alter('exportable_scheduler_form_group', $group);

  $form['exportable_scheduler_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scheduling options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 35,
    '#group' => $group,
  );
  if (!empty($group)) {
    $form['exportable_scheduler_settings']['#attached'] = array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'exportable_scheduler') . "/exportable_scheduler.admin.js"
      ),
    );
  }
  // Display settings.
  $form['exportable_scheduler_settings']['actions'] = array(
    '#tree' => FALSE,
    '#prefix' => '<div id="exportable-scheduler-actions-wrapper">',
    '#suffix' => '</div>',
    '#theme' => 'exportable_scheduler_actions_form',
  );

  // Add existing actions.
  $actions = _exportable_scheduler_get_existing_actions($form_state);
  foreach ($actions as $key => $action) {
    _exportable_scheduler_form($form['exportable_scheduler_settings'], $key, $action);
  }
  // Add a blank action form.
  _exportable_scheduler_form($form['exportable_scheduler_settings'], count($actions));

  $form['exportable_scheduler_settings']['exportable_scheduler_more_actions'] = array(
    '#type' => 'submit',
    '#value' => t('Add another scheduling action'),
    '#submit' => array('exportable_scheduler_more_actions_submit'),
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'exportable_scheduler_more_actions_js',
      'wrapper' => 'exportable-scheduler-actions-wrapper',
      'effect' => 'fade',
    ),
  );

  // Add a submit and validation handlers to the exportable item form.
  $form['#validate'][] = 'exportable_scheduler_form_validate';
  $form['#submit'][] = 'exportable_scheduler_form_submit';
}

/**
 * Validates exportable scheduler actions.
 */
function exportable_scheduler_form_validate($form, &$form_state) {
  foreach ($form_state['values']['exportable_scheduler_actions'] as $key => $value) {
    $date = $value['date'];
    $time = isset($date['date']) ? strtotime($date['date'] . ' ' . $date['time']) : strtotime($date);
    if (!empty($time) && $time < time()) {
      form_set_error('exportable_scheduler_actions][' . $key . '][date', t('You cannot select a date that occurs in the past.'));
    }
  }
}

/**
 * Submits exportable scheduler actions.
 */
function exportable_scheduler_form_submit($form, &$form_state) {
  // First delete all scheduled actions from the database for this exportable.
  db_delete('exportable_scheduler')
    ->condition('schema_name', $form_state['plugin']['schema'])
    ->condition('machinename', $form_state['item']->{$form_state['plugin']['export']['key']})
    ->execute();

  // Now add all of the scheduled actions from the just-submitted form.
  foreach ($form_state['values']['exportable_scheduler_actions'] as $key => $value) {
    if (!empty($value['date'])) {
      $data = array(
        'date' => strtotime($value['date']),
        'type' => $value['type'] == 'disable' ? 0 : 1,
        'schema_name' => $form_state['plugin']['schema'],
        'machinename' => $form_state['item']->{$form_state['plugin']['export']['key']}
      );
      db_insert('exportable_scheduler')
        ->fields($data)
        ->execute();
    }
  }
}

/**
 * Submit handler to add more scheduling actions the form.
 */
function exportable_scheduler_more_actions_submit($form, &$form_state) {
  $form_state['exportable_scheduler_actions'] = $form_state['input']['exportable_scheduler_actions'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback for adding scheduling actions to the form.
 */
function exportable_scheduler_more_actions_js($form, $form_state) {
  return $form['exportable_scheduler_settings']['actions'];
}

/**
 * A helper function for creating individual scheduler action forms.
 */
function _exportable_scheduler_form(&$form, $key, $data = array()) {
  // $date_format = variable_get('scheduler_date_format', SCHEDULER_DATE_FORMAT);
  $date_format = EXPORTABLE_SCHEDULER_DATE_FORMAT;

  $form['actions'][$key] = array(
    '#prefix' => '<div class="target" id="exportable-scheduler-action-' . $key . '">',
    '#suffix' => '</div>',
  );
  $form['actions'][$key]['date'] = array(
    '#type' => 'textfield',
    '#title' => 'Date of action',
    '#title_display' => 'invisible',
    '#attributes' => array('class' => array('field-exportable-scheduler-date')),
    '#default_value' => isset($data['date']) ? format_date($data['date'], 'custom', $date_format) : '',
    '#parents' => array('exportable_scheduler_actions', $key, 'date'),
  );
  $form['actions'][$key]['type'] = array(
    '#type' => 'select',
    '#title' => 'Type of action',
    '#title_display' => 'invisible',
    '#attributes' => array('class' => array('field-exportable-scheduler-type')),
    '#options' => array(
      'enable' => t('Enable'),
      'disable' => t('Disable'),
    ),
    '#default_value' => isset($data['type']) ? $data['type'] : '',
    '#parents' => array('exportable_scheduler_actions', $key, 'type'),
  );
  if (empty($data)) {
    $form['actions'][$key]['type']['#description'] = t('Choose what action to take.');
    $form['actions'][$key]['date']['#description'] = t('Format: %time.', array('%time' => format_date(time(), 'custom', $date_format)));
  }

  if (module_exists('date_popup')) {
    // Make this a popup calendar widget if Date Popup module is enabled.
    $form['actions'][$key]['date']['#type'] = 'date_popup';
    $form['actions'][$key]['date']['#date_format'] = $date_format;
    $form['actions'][$key]['date']['#date_year_range'] = '0:+10';
  }
}

/**
 * Helper function to return the existing actions for the exportable currently
 * being edited.
 */
function _exportable_scheduler_get_existing_actions($form_state) {
  $actions = array();

  if (isset($form_state['input']['exportable_scheduler_actions'])) {
    $actions = $form_state['input']['exportable_scheduler_actions'];
  }
  elseif ($form_state['op'] != 'add') {
    $machinename_field = $form_state['plugin']['export']['key'];
    $query = db_select('exportable_scheduler', 'es');
    $query->fields('es');
    $query->condition('es.schema_name', $form_state['plugin']['schema']);
    $query->condition('es.machinename', $form_state['item']->{$machinename_field});
    $results = $query->execute()->fetchAll();

    foreach ($results as $key => $value) {
      $data = array(
        'type' => $value->type ? 'enable' : 'disable',
        'date' => $value->date,
      );
      $actions[] = $data;
    }
  }

  return $actions;
}

/**
 * Theme function for the "target" form.
 */
function theme_exportable_scheduler_actions_form($variables) {
  $form = $variables['form'];

  $more_button = drupal_render($form['exportable_scheduler_more_actions']);
  unset($form['exportable_scheduler_more_actions']);

  $headers = array(t('Date'), t('Type of action'));
  $rows = array();
  foreach (element_children($form) as $key) {
    $rows[] = array(drupal_render($form[$key]['date']), drupal_render($form[$key]['type']));
  }

  return theme('table', array('header' => $headers, 'rows' => $rows)) . $more_button;
}






