<?php

/**
 * @file
 * Provides animated gif resizing support for the image styles.
 *
 * Image crop will not work for animated GIFs. So se use image_resize for
 * image_crop and image_scale instead of image_scale_and_crop if the processed
 * image is GIF. Because of this effect replacement, the image dimensions
 * sometimes generated wrong in HTML. This module's theme_image implementation
 * solves this problem by leaving out width, height attributes for GIFs.
 *
 *  Developed by Dénes Szabó.
 *  denes.szabo@internode.hu
 *  http://internode.hu
 */

/**
 * Implements hook_theme_registry_alter().
 *
 * If you have own theme for image, then set the animgif_support_use_image_theme
 * variable to false. But check our image theme for image dimensions handling of
 * GIF images.
 */
function animgif_support_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['image']['function']) && variable_get('animgif_support_use_image_theme', TRUE)) {
    $theme_registry['image']['function'] = 'animgif_support_image';
  }
}

/**
 * Returns HTML for an image.
 *
 * @group themeable
 */
function animgif_support_image($variables) {
  $attributes = $variables['attributes'];
  $attributes['src'] = file_create_url($variables['path']);
  $parts = explode('?', $variables['path']);
  $mime = file_get_mimetype($parts[0]);

  if ('image/gif' == $mime) {
    // Remove dimensions if the image is gif - the effect's dimensions callback
    // gives back false data for animated GIFs (GIFs either).
    unset($variables['width']);
    unset($variables['height']);
  }

  foreach (array('width', 'height', 'alt', 'title') as $key) {
    if (isset($variables[$key])) {
      $attributes[$key] = $variables[$key];
    }
  }

  return '<img' . drupal_attributes($attributes) . ' />';
}

/**
 * Provies original effect - replace effect array.
 */
function animgif_support_effect_replaces() {
  $replace = array(
    'image_crop' => 'image_resize',
    'image_resize' => 'image_resize',
    'image_scale' => 'image_scale',
    'image_scale_and_crop' => 'image_scale',
  );

  return $replace;
}

/**
 * Implements hook_image_effect_info_alter().
 */
function animgif_support_image_effect_info_alter(&$effects) {
  $replaces = animgif_support_effect_replaces();
  foreach ($effects as $key => $data) {
    if (!empty($replaces[$key])) {
      $effects[$key]['original effect callback'] = $effects[$key]['effect callback'];
      $effects[$key]['gif effect'] = $replaces[$key];
      $effects[$key]['effect callback'] = 'animgif_support_' . $key . '_effect';
    }
  }
  return TRUE;
}

/**
 * Effect callback common function for overridden effects.
 */
function animgif_support_do_effect(&$image, $data, $original_effect) {
  $definitions = image_effect_definitions();
  if (!empty($definitions[$original_effect]['original effect callback'])) {
    if (animgif_support_is_gif($image->info)) {
      // Run gif effect instead of the original.
      // todo: check if it is not an animgif. Dunno how…
      $gif_effect = $definitions[$original_effect]['gif effect'];
      $func = 'animgif_support_' . $gif_effect . '_func';
      $func($image, $data);
    }
    else {
      // Call the original effect callback.
      $func = $definitions[$original_effect]['original effect callback'];
      $func($image, $data);
    }
  }
}

/**
 * Provides image_crop effect callback for animated GIFs.
 */
function animgif_support_image_crop_effect(&$image, $data) {
  animgif_support_do_effect($image, $data, 'image_crop');
}

/**
 * Provides image_resize effect callback for animated GIFs.
 */
function animgif_support_image_resize_effect(&$image, $data) {
  animgif_support_do_effect($image, $data, 'image_resize');
}

/**
 * Provides image_scale effect callback for animated GIFs.
 */
function animgif_support_image_scale_effect(&$image, $data) {
  animgif_support_do_effect($image, $data, 'image_scale');
}

/**
 * Provides image_scale_and_crop effect callback for animated GIFs.
 */
function animgif_support_image_scale_and_crop_effect(&$image, $data) {
  animgif_support_do_effect($image, $data, 'image_scale_and_crop');
}

/**
 * Image re-sizer function for animated GIFs.
 */
function animgif_support_image_resize_func(&$image, $data) {
  if (!animgif_support_image_resizer($image, $data['width'], $data['height'])) {
    watchdog('image', 'Gif Image resize failed using the gifresizer lib on %path (%mimetype, %dimensions)',
      array(
        '%path' => $image->source,
        '%mimetype' => $image->info['mime_type'],
        '%dimensions' => $image->info['width'] . 'x' . $image->info['height'],
      ), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Image size scale function for animated GIFs.
 */
function animgif_support_image_scale_func(&$image, $data) {
  // Set sane default values.
  $data += array(
    'width' => NULL,
    'height' => NULL,
    'upscale' => FALSE,
  );
  $dimensions = $image->info;
  // Scale the dimensions - if they don't change then we use our re-sizer, we
  // want to GD do not touch this image.
  image_dimensions_scale($dimensions, $data['width'], $data['height'], $data['upscale']);

  if (!animgif_support_image_resizer($image, $dimensions['width'], $dimensions['height'])) {
    watchdog('image', 'Gif Image resize failed using the gifresizer lib on %path (%mimetype, %dimensions)',
      array(
        '%path' => $image->source,
        '%mimetype' => $image->info['mime_type'],
        '%dimensions' => $image->info['width'] . 'x' . $image->info['height'],
      ), WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * Provides resizer for animated gifs.
 */
function animgif_support_image_resizer(stdClass $image, $width, $height) {
  $width = (int) round($width);
  $height = (int) round($height);
  $lib = libraries_load('gifresizer');

  $tmp = file_directory_temp();

  // New instance of GIFResizer class.
  $gr = new gifresizer();

  // Used for extracting GIF Animation Frames.
  $gr->temp_dir = $tmp;
  $img_name = 'resized--' . time() . '--' . rand() . '.gif';
  $resized_image = $tmp . '/' . $img_name;

  $source_image = drupal_realpath($image->source);

  // Resizing the animation into a new file.
  $gr->resize($source_image, $resized_image, $width, $height);

  // Get new file as resource.
  $image->resource = imagecreatefromgif($resized_image);
  $image->info['width'] = $width;
  $image->info['height'] = $height;
  $image->info['resized_animgif_uri'] = 'temporary://' . $img_name;
  $image->info['resized_animgif'] = $tmp . '/' . $resized_image;

  // Hack into the save method - we need to use our method because GD ruins the
  // gif animation.
  $image->toolkit = 'animgif';

  return TRUE;
}

/**
 * Helper to write an image resource to a destination file.
 *
 * Actually it just moves the generated animgif to the proper place, beacuse the
 * GD uses imagegd() which is not proper there, it losts the animation.
 */
function image_animgif_save(stdClass $image, $destination) {
  $scheme = file_uri_scheme($destination);
  // Work around lack of stream wrapper support in imagejpeg() and imagepng().
  if ($scheme && file_stream_wrapper_valid_scheme($scheme)) {
    // If destination is not local, save image to temporary local file.
    $local_wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL);
    if (!isset($local_wrappers[$scheme])) {
      $permanent_destination = $destination;
      $destination = drupal_tempnam('temporary://', 'gd_');
    }
    // Convert stream wrapper URI to normal path.
    $destination = drupal_realpath($destination);
  }

  if (!empty($image->info['resized_animgif_uri'])) {
    $image->uri = $image->info['resized_animgif_uri'];
    file_unmanaged_move($image->info['resized_animgif_uri'], $destination);
  }
}

/**
 * Implements hook_libraries_info().
 */
function animgif_support_libraries_info() {
  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['gifresizer'] = array(
    'name' => 'Gifresizer library',
    'vendor url' => 'http://www.phpclasses.org/package/7353-PHP-Resize-animations-in-files-of-the-GIF-format.html',
    'download url' => 'http://www.phpclasses.org/package/7353-PHP-Resize-animations-in-files-of-the-GIF-format.html#download',
    'version callback' => 'animgif_support_gifresizer_version_callback',
    'files' => array(
      'php' => array('gifresizer.php'),
    ),
  );

  return $libraries;
}

/**
 * Provides version callback for gifresizer lib.
 */
function animgif_support_gifresizer_version_callback() {
  return TRUE;
}

/**
 * Helper function to check the image type is gif or not.
 */
function animgif_support_is_gif($info) {
  if ($info['mime_type'] == 'image/gif') {
    return TRUE;
  }
  if ($info['extension'] == 'gif') {
    return TRUE;
  }

  return FALSE;
}
