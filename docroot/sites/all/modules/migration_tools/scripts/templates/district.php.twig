<?php

/**
 * @file
 * Defines migration classes for {{ info.full_name }}.
 */

/**
 * Migrates .html files from /{{ info.abbreviation }} to page nodes.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class_base_name }}PageMigration extends HtmlToPageMigration {

  /**
   * {@inheritdoc}
   */
  public function __construct($arguments) {

    // Define source directories.
    $source_dirs = array(
    {% for item in info.page %}
      {{ item | raw }}
    {% endfor %}
    );
    $options = array('recurse' => FALSE);
    $extension_regex = '{{ info.file_extensions | raw}}';

    $arguments['source_parser_class'] = "{{ info.class_base_name }}PageSourceParser";

     // Configuring Obtainers.
    $title = new ObtainerInfo('title', "{{ info.class_base_name }}ObtainTitlePage");
    $title->addMethod('pluckAnySelectorUntilValid', array('h1'));
    $title->addMethod('findBreadcrumbLastNonAnchor', array('.breadcrumb'));
    $title->addMethod('findBreadcrumbLastAnchor', array('.breadcrumb'));
    $title->addMethod('findSubBannerAlt');

    $arguments['obtainers_info'][] = $title;

    // Parent constructor will set $this->source, $this->destination, and
    // $this->map.
    parent::__construct($arguments, $source_dirs, $extension_regex, $options);
    $this->dependencies = array('UsaoDistrict');
    $this->description = t('Migrates pages from the {{ info.full_name }}.');
    $this->addFieldMapping('og_group_ref')
    ->defaultValue('{{ info.abbreviation }}')
    ->sourceMigration('UsaoDistrict');
  }

  /**
   * {@inheritdoc}
   */
  public function prepareRow($row) {
    $skip_these = array();
    if (migration_tools_skip_file($row->fileid, $skip_these) || parent::prepareRow($row) === FALSE) {
      return FALSE;
    }
  }
}

/**
 * Migrates files (*.pdf) from /{{ info.abbreviation }}.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class_base_name }}FileMigration extends DeployableBinaryFileMigration {

  /**
   * {@inheritdoc}
   */
  public function __construct($arguments) {
    $this->description = t('Migrates non-image files from the {{ info.directory }} subdirectory.');
    $this->dependencies = array('UsaoDistrict');

    // Match .pdf files only.
    $source_dirs = array(
      '{{ info.directory }}',
    );
    $options = array('recurse' => TRUE);
    $regex = NULL;
    $dest_dir = 'public:///{{ info.abbreviation }}/docs';

    // This will setup $this->map, $this->destination, and $this->source.
    // It will also add field mappings for file location and redirects, which
    // relies on prepareRow() defining $row->filepath and $row->legacy_path.
    parent::__construct($arguments, $source_dirs, $dest_dir, $regex, $options);
  }


  /**
   * {@inheritdoc}
   */
  public function getOrganizationAbbreviation() {
    return "{{ info.abbreviation }}";
  }
}

/**
 * Migrates press releases from /{{ info.abbreviation }}.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class_base_name }}PressReleaseMigration extends NGDistrictPressReleaseMigration {

  /**
   * {@inheritdoc}
   */
  public function __construct($arguments) {
    $arguments['district'] = "{{ info.abbreviation }}";
    $arguments['component_tid'] = {{ info.component_tid }};
    $source_dirs = array(
    {% for item in info.press %}
      {{ item | raw }}
    {% endfor %}
    );
    $options = array('recurse' => FALSE);
    $extension_regex = '{{ info.file_extensions | raw}}';

    $arguments['source_parser_class'] = "{{ info.class_base_name }}PressSourceParser";

    // Configuring Obtainers.
    $title = new ObtainerInfo('title', "{{ info.class_base_name }}ObtainTitlePressRelease");
    $title->addMethod('pluckAnySelectorUntilValid', array('h1'));
    $title->addMethod('pluckSelector', array("#contentstart > div > h2", 2));
    $title->addMethod('pluckSelector', array('h2', 1));
    $title->addMethod('pluckSelector', array(".contentSub > div > p[align='center'] > strong", 1));
    $title->addMethod('pluckSelector', array("#headline", 1));

    $date = new ObtainerInfo('date', "{{ info.class_base_name }}ObtainDate");
    $date->addMethod('pluckSelector', array(".newsRight", 1));
    $date->addMethod('pluckProbableDate');

    $pr_number = new ObtainerInfo('prNumber', "{{ info.class_base_name }}ObtainPrNumber");

    $arguments['obtainers_info'][] = $title;
    $arguments['obtainers_info'][] = $date;
    $arguments['obtainers_info'][] = $pr_number;

    parent::__construct($arguments, $source_dirs, $options, $extension_regex);
  }

  /**
   * {@inheritdoc}
   */
  public function prepareRow($row) {
    $skip_these = array();
    if (migration_tools_skip_file($row->fileid, $skip_these) || parent::prepareRow($row) === FALSE) {
      return FALSE;
    }
  }
}

/**
 * SourceParser for /{{ info.abbreviation }} pages.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class_base_name }}PageSourceParser  extends NGDistrictPageSourceParser {
  /**
   * {@inheritdoc}
   */
  protected function cleanHtml() {
    parent::cleanHtml();
  }
}

/**
 * SourceParser for /{{ info.abbreviation }} press releases.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class_base_name }}PressSourceParser extends NGDistrictPressReleaseSourceParser {
  /**
   * {@inheritdoc}
   */
  protected function cleanHtml() {
    parent::cleanHtml();
  }
}

/**
 * Obtainer for title property for /{{ info.abbreviation }} pages.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 * @see Obtainer.api.php
 */
class {{ info.class_base_name }}ObtainTitlePage extends ObtainTitle {
}

/**
 * Obtainer for title property for /{{ info.abbreviation }} press releases.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 * @see Obtainer.api.php
 */
class {{ info.class_base_name }}ObtainTitlePressRelease extends ObtainTitlePressRelease {
}

/**
 * Obtainer for prNumber property for /{{ info.abbreviation }} press releases.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 * @see Obtainer.api.php
 */
class {{ info.class_base_name }}ObtainPrNumber extends ObtainId {
  /**
   * Finds the press release number from markup.
   */
  protected function findPrNumber() {
    $text = '';
    // $element = $this->queryPath->find('p')->last();
    // $this->setElementToRemove($element);
    // $text = $element->text();

    return $text;
  }
}

/**
 * Custom obtainer for date property for /{{ info.abbreviation }}.
 *
 * @package migration_tools
 * @subpackage {{ info.abbreviation }}
 * @see Obtainer.api.php
 */
class {{ info.class_base_name }}ObtainDate extends ObtainDate {
}
