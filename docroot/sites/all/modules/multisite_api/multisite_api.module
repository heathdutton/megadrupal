<?php

/**
 * @file
 *  Provides common functions for working with multisites.
 */

/**
 * @category HOOKS
 */

/**
 * Implementation of hook_help.
 */
function multisite_api_help($path, $arg) {
  switch ($path) {
    case 'admin/help#multisite_api':
      return '<p>' . t('A collection of common functions useful for administering multisites.  ' .
        'You don\'t need to install this unless required by another module, '.
        'or you can also use the API for your own development.') . '</p>';
  }
}

/**
 * implementation of hook_menu.
 */
function multisite_api_menu() {
  $items = array();
  $items['admin/multisite'] = array(
    'title' => 'Multisite',
    'description' => 'Multisite administration.',
    'position' => 'right',
    'weight' => 5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    );
  $items['admin/multisite/multisite_api'] = array(
    'title' => 'Multisite API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_api_form'),
    'access arguments' => array('administer site configuration'),
    );
  $items['admin/multisite/multisite_api/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/multisite/multisite_api/preview'] = array(
    'title' => 'Preview',
    'page callback' => 'multisite_api_preview',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  return $items;
}

/**
 * Implementation of hook_cron.
 */
function multisite_api_cron() {

  // Clear the caches.
  multisite_api_site_list(NULL, NULL, TRUE);
  _multisite_api_variable_get('multisite_api_development', 'localhost', TRUE);

}

/**
 * @category PAGES
 */

function multisite_api_form() {

  // If we are using the ini file we need to change the form style.
  // While we're at it reset variables cache (this will reload the ini file if it exists).
  $ini = _multisite_api_variable_get('multisite_api_ini_file', FALSE, TRUE);

  // ini file.
  $form['ini'] = array(
    '#type' => 'fieldset',
    '#title' => t('.ini file'),
    '#collapsible' => FALSE,
    '#description' => t('You can use a .ini file to overide the settings stored in the database.  ' .
        'This makes it easier to distribute changes across several sites, since trying to move data ' .
        'to many sites is difficult.  To enable this technique rename !file to multisite_api.ini',
        array('!file' => drupal_get_path('module', 'multisite_api') . '/multisite_api.ini.sample')),
  );
  $form['ini']['ini'] = array(
    '#title' => t('.ini file used'),
    '#type' => 'item',
    '#value' => $ini ? t('True') . '.  ' . t('To change the settings below edit the .ini file.') : t('False'),
  );

  // Site Server.
  $form['server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Servers'),
    '#collapsible' => FALSE,
    '#description' => t('Most large sites will have a 3 or 4 stage workflow: ' .
        'A developer writes code on a development server, ' .
        'changes are moved to a staging server for initial review, ' .
        'then moved to a testing server to test the code, ' .
        'and finally on to the production server.  ' .
        'Sites on each server will likely have something common in the site name (drupal/sites/$site_name). ') . 
        t('To determine what server a site is on, enter the common string below.'),
  );
  $form['server']['multisite_api_development'] = array(
    '#type' => 'textfield',
    '#default_value' => _multisite_api_variable_get('multisite_api_development', 'localhost'),
    '#title' => t('Development'),
    '#disabled' => $ini,
  );
  $form['server']['multisite_api_staging'] = array(
    '#type' => 'textfield',
    '#default_value' => _multisite_api_variable_get('multisite_api_staging', 'staging'),
    '#title' => t('Staging'),
    '#disabled' => $ini,
  );
  $form['server']['multisite_api_testing'] = array(
    '#type' => 'textfield',
    '#default_value' => _multisite_api_variable_get('multisite_api_testing', 'testing'),
    '#title' => t('Testing'),
    '#disabled' => $ini,
  );
  $form['server']['multisite_api_production'] = array(
    '#title' => t('Production'),
    '#type' => 'item',
    '#value' => t('Any site that passes all of the above filters is considered a production site.'),
  );

  // Site Visibility.
  $form['visibility'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site visibility'),
    '#collapsible' => FALSE,
    '#description' => t('Sites may be further classified in terms of visibility.  ' .
      'For multiple values enter a comma separated list (no spaces).  '
    ),
  );
  $form['visibility']['multisite_api_excluded'] = array(
    '#title' => t('Excluded'),
    '#type' => 'textfield',
    '#maxlength' => 256,
    '#default_value' => _multisite_api_variable_get('multisite_api_excluded', 'intra'),
    '#description' => t('Any site that contains a string from this list will be excluded from ' .
      'lists returned by the API functions.  '),
    '#disabled' => $ini,
  );
  $form['visibility']['multisite_api_private'] = array(
    '#title' => t('Private'),
    '#type' => 'textfield',
    '#maxlength' => 256,
    '#default_value' => _multisite_api_variable_get('multisite_api_private', NULL),
    '#description' => t('Sometimes some sites will need to be kept private, regardless of what server they reside on.  ' .
      'One example would be if a site is kept behind an http password to restrict access.'),
    '#disabled' => $ini,
  );
  $form['visibility']['multisite_api_public'] = array(
    '#title' => t('Public'),
    '#type' => 'item',
    '#value' => t('Any site that passes all of the above filters is considered a public site.'),
  );

  // Caching.
  $form['multisite_api_caching'] = array(
    '#title' => t('Caching'),
    '#type' => 'radios',
    '#default_value' => _multisite_api_variable_get('multisite_api_caching', TRUE),
    '#options' => array(t('Off'), t('On')),
    '#description' => t('Caching will improve performance by avoiding the continual parsing of the ' .
      'sites directory. The cache is cleared every cron run.  It may be helpful to turn caching off ' .
      'when doing development using this API. '),
    '#disabled' => $ini,
  );


  return system_settings_form($form);
}

function multisite_api_form_submit($form, &$form_state) {

  // If we're not using the ini file, save the values.
  if (!_multisite_api_variable_get('multisite_api_ini_file', FALSE)) {
    variable_set('multisite_api_development', $form_state['values']['multisite_api_development']);
    variable_set('multisite_api_staging', $form_state['values']['multisite_api_staging']);
    variable_set('multisite_api_testing', $form_state['values']['multisite_api_testing']);
    variable_set('multisite_api_excluded', $form_state['values']['multisite_api_excluded']);
    variable_set('multisite_api_private', $form_state['values']['multisite_api_private']);
    variable_set('multisite_api_caching', $form_state['values']['multisite_api_caching']);
  }

  // Clear the cache, so we behave just like the performance or menu settings forms.
  _multisite_api_variable_get('multisite_api_development', 'localhost', TRUE);
  multisite_api_site_list(NULL, NULL, TRUE);
}

/**
 * Displays a list of all sites with their server and visibility.
 */
function multisite_api_preview() {
  $sites = multisite_api_site_list(NULL, NULL, TRUE);
  $output = '<p>'. t('This table shows each site with its server and visibility.  Excluded sites are ' .
    'never shown in multisite_api lists.  Multisite API can return more information than is shown here. ') . '</p>';
  // Do not use t(), these are the names of array keys.
  $header = array('dir', 'server', 'visibility', 'db_dsn', 'db_default_dsn');
  $rows = array();
  foreach ($sites as $site) {
    $rows[] = array(
      $site['dir'],
      $site['server'],
      $site['visibility'],
      '<pre>'. print_r($site['db_dsn'], TRUE) . '</pre>',
      '<pre>'. print_r($site['db_default_dsn'], TRUE) . '</pre>',
    );
  }
  $output .= theme('table', $header, $rows);
  return $output;
}

/**
 * @category API
 */

/**
 * Gets the name (drupal/sites/SITE_NAME) of the current site.
 *
 * @return string
 *  The site name.
 */
function multisite_api_current_site_name() {
  return substr(conf_path(), 6);
}

/**
 * Get the visibility of the given site name.
 *
 * @param string $site
 *  The site (drupal/sites/$site) to get, or 'current' to get the visibility of the current site.
 * @return string
 *  One of: excluded, private, production.
 */
function multisite_api_get_site_visibility($site_name = NULL) {

  // Get site.
  if (!$site_name || $site_name == 'current') {
    $site = multisite_api_current_site_name();
  }

  // Deal with the excluded list.
  $excluded = _multisite_api_variable_get('multisite_api_excluded', 'intra');
  if ($excluded) {
    $excluded =  explode(',', $excluded);
    foreach ($excluded as $e) {
      if (strpos($site_name, trim($e)) !== FALSE ) {
        return 'excluded';
      }
    }
  }

  // Deal with private list.
  $private = _multisite_api_variable_get('multisite_api_private', NULL);
  if ($private) {
    $private =  explode(',', $private);
    foreach ($private as $p) {
      if (strpos($site_name, trim($p)) !== FALSE ) {
        return 'private';
      }
    }
  }

  // Else must be public.
  return 'public';

}

/**
 * Get the server of the given site name.
 * 
 * @param string $site
 *  The site (drupal/sites/$site) to get, or 'current' to get the server of the current site.
 * @return mixed
 *  One of: production, testing, staging, development, or FALSE if the site is in the excluded list.
 */
function multisite_api_get_site_server($site_name = NULL) {

  // Get site.
  if (!$site_name || $site_name == 'current') {
    $site_name = multisite_api_current_site_name();
  }

  // What server is it?
  $development = _multisite_api_variable_get('multisite_api_development', 'localhost');
  if ($development && strpos($site_name, $development) !== FALSE) {
    return 'development';
  }
  $staging = _multisite_api_variable_get('multisite_api_staging', 'staging');
  if ($staging && strpos($site_name, $staging) !== FALSE) {
    return 'staging';
  }
  $testing = _multisite_api_variable_get('multisite_api_testing', 'testing');
  if ($testing && strpos($site_name, $testing) !== FALSE) {
    return 'testing';
  }
  return 'production';
}

/**
 * Get all details of one site.
 *
 * @param string $site_name
 *  The name of the site to fetch
 *  i.e. drupal/dites/$site_name/settings.php
 *  or 'current' to fetch the current site.
 * @return array
 *  See multisite_api_site_list for details.
 */
function multisite_api_get_site($site_name) {
  if (!$site_name || $site_name == 'current') {
    $site_name = multisite_api_current_site_name();
  }
  $sites = multisite_api_site_list();
  return $sites[$site_name];
}

/**
 * Get the names of all sites on the given server and of the given visibility, 
 * sites in the excluded list are not included.
 * 
 * @param string $server
 *  production, staging, or development
 *  or NULL to return only sites matching the type of the current site.
 * @param string $visibility
 *  private, or public
 *  or NULL to return only sites matching the type of the current site.
 * @param simple_array
 *  list of all sites, not including the current site.
 */
function multisite_api_get_site_names($server = NULL, $visibility = NULL) {
  if (!$server) {
    $server = multisite_api_get_site_server();
  }
  if (!$visibility) {
    $visibility = multisite_api_get_site_visibility();
  }
  $sites = multisite_api_site_list($server, $visibility);
  $list = array();
  foreach ($sites as $site) {
    $list[$site['dir']] = $site['dir'];
  }
  ksort($list);
  return $list;
}

/**
 * Wrapper function to preserve backwards compatibility.
 * Depricated.  Use multisite_api_get_site_names() instead
 */
function multisite_api_get_all_site_names_of_type($server) {
  if ($server == 'current') {
    $server = multisite_api_get_site_server();
  }
  return multisite_api_get_site_names($server, NULL);
}

/**
 * Gets info on all multisites.
 * 
 * @param string $server
 *  Only return sites on this server ('production', 'testing', 'staging', or 'development')
 *  leave NULL to return all sites, or 'current' for sites that are on the same server as the current site.
 * @param string visibility
 *  Only return sites of this visibility ('public', or 'private').  Excluded sites are never returned in the list.
 *  leave NULL to return all sites, or 'current' for sites that are of the same visibility as the current site.
 * @param boolean cache_reset
 *  Self explanitory I think.
 * @param boolean obfuscate_passwords
 *  Also self explanitory.
 * @return
 *  Array of associative arrays,
 *  Each secondary array represents a multisite with elements for:
 *  dir             => directory in sites, the site name
 *  server          => development, testing, staging, or production
 *  visibility      => public, private (excluded sites are never returned in the list)
 *  db_url          => $db_url
 *  db_dsn          => parsed version of $db_url
 *  db_prefix       => $db_prefixed
 *  base_url        => only returned if $base_url is defined
 *  db_default_url  => default database url, taking into account $db_prefix['default']
 *  db_default_dsn  => parsed version of $db_default_url
 *  + anything else that is defined in settings.php
 */
function multisite_api_site_list($server = NULL, $visibility = NULL, $cache_reset = FALSE, $obfuscate_passwords = TRUE) {

  static $sites;
  $cache_setting = _multisite_api_variable_get('multisite_api_cache', TRUE); 

  // Clear the cache if explicitly told to do so,
  // or if we are not using caching and the static var has not been set.
  if ($cache_reset || ($cache_setting == FALSE && !is_array($sites))) {

    // Parse sites directory and build data array.
    $sites = array();
    if (is_dir('sites') && $handle = opendir('sites')) {


      while ($dir = readdir($handle)) {
        if (file_exists("sites/$dir/settings.php")) {

          $vars = _multisite_api_eval_file("sites/$dir/settings.php");
          $vars['server'] = multisite_api_get_site_server($dir);

          // Get the visibility, skip if it's part of the excluded list.
          $vars['visibility'] = multisite_api_get_site_visibility($dir);
          if ($vars['visibility'] == 'excluded') {
            continue;
          }
          // If db_url is an array, assume we only want the default.
          if (is_array($vars['db_url'])) {
            $vars['db_url_array'] = $vars['db_url'];
            $vars['db_url'] = $vars['db_url']['default'];
          }
          $vars['db_dsn'] = parse_url($vars['db_url']);
          $vars['dir'] = $dir;

          // Build default DSN.
          if (is_array($vars['db_prefix']) && substr($vars['db_prefix']['default'], -1, 1) == '.') {
            $vars['db_default_dsn'] = $vars['db_dsn'];
            $vars['db_default_dsn']['path'] = '/' . strrev(substr(strrev($vars['db_prefix']['default']), 1));
          }
          elseif (is_string($vars['db_prefix']) && substr($vars['db_prefix'], -1, 1) == '.') {
            $vars['db_default_dsn'] = $vars['db_dsn'];
            $vars['db_default_dsn']['path'] = '/' . strrev(substr(strrev($vars['db_prefix']), 1));
          }
          else {
            $vars['db_default_dsn'] = $vars['db_dsn'];
          }
          $vars['db_default_url'] = $vars['db_default_dsn']['scheme'] . '://'. $vars['db_default_dsn']['user'] . ':' . $vars['db_default_dsn']['pass'] . '@' . $vars['db_default_dsn']['host'] . $vars['db_default_dsn']['path'];

          // Add to main array.
          $sites[$dir] = $vars;

        }

      }
    }
    //$sites = ksort($sites); // WTF? doing this makes an empty array ?!?!?!

    // Cache this mutha.
    if ($cache_setting) {
      cache_set('multisite_api', serialize($sites));
    }
  }
  elseif (!is_array($sites)) {

    // Retrieve cache.
    $cached = cache_get('multisite_api', 'cache');
    $sites = unserialize($cached->data);

    // If something went wrong, call recursively and reset the cache.
    if (!is_array($sites)) {
      $sites = multisite_api_site_list(NULL, NULL, TRUE);
    }
  }

  // Resolve 'current' arguments.
  if ($visibility == 'current') {
    $visibility = multisite_api_get_site_visibility('current');
  }
  if ($server == 'current') {
    $server = multisite_api_get_site_server('current');
  }

  // Return only the server and visibility that we asked for.
  $return = $sites;
  foreach ($return as $name => &$site) {
    if ($visibility && $site['visibility'] != $visibility) {
      unset($return[$name]);
      continue;
    }
    elseif ($server && $site['server'] != $server) {
      unset($return[$name]);
      continue;
    }
    
    if ($obfuscate_passwords) {
      $pass = $site['db_dsn']['pass'];
      $stars = str_repeat('*', strlen($pass));
      $site['db_url'] = str_replace($pass, $stars, $site['db_url']);
      $site['db_default_url'] = str_replace($pass, $stars, $site['db_default_url']);
      $site['db_dsn']['pass'] = $stars;
      $site['db_default_dsn']['pass'] = $stars;
    }

  }
  return $return;
}

/**
 * @category INTERNAL FUNCTIONS
 */

/**
 * Evaluates the php file and returns all defined variables.
 * ONLY USE THIS ON SETTINGS.PHP ANYTHING ELSE IS RISKY
 *
 * @param string $file_path 
 *  The path to the file.
 * @return array 
 *  Associative array of all evaluated variables.
 */
function _multisite_api_eval_file($file_path) {

  // Get file.
  $data = file($file_path);

  // Remove dangerous things.
  foreach ($data as $n => $line) {
    if (substr($line , 0, 7) == 'ini_set') {
      $data[$n] = '';
    }
  }
  $data = implode($data);

  // Trim open php tag.
  if (substr($data, 0, 2) == '<?') {
    $data = substr($data, 2);
  }
  if (substr($data, 0, 3) == 'php') {
    $data = substr($data, 3);
  }

  // Trim close php tag.
  if (substr($data, -2) == '?>') {
    $data = substr($data, 0, strlen($data) -2);
  }
  if (substr($data, -3) == 'php') {
    $data = substr($data, 0, strlen($data) -3);
  }

  // Get the vars.
  drupal_eval($data);
  $vars = get_defined_vars();
  unset($vars['file_path'], $vars['data'], $vars['n'], $vars['line']);
  return $vars;
}

/**
 * A wrapper for variable_get.  Looks for the ini file and caches the results.
 * 
 * @param string $name
 *  Just like variable_get, the name of the variable.
 * @param mixed $default
 *  If the setting doesn't exist, what should we return?
 * @param boolean $cache_reset
 *  Self explanitory.
 */
function _multisite_api_variable_get($name, $default, $cache_reset = FALSE) {

  static $variables;
  $unit_testing = variable_get('multisite_api_unit_testing', FALSE);
  
  if ($cache_reset || $unit_testing) {
    unset($variables);
  }

  if (!isset($variables[$name])) {

    $ini_file = drupal_get_path('module', 'multisite_api') . '/multisite_api.ini';

    // Try to pull from the cache first.
    if (!$cache_reset && !$unit_testing) {
      $cached = cache_get('multisite_api_variables', 'cache');
      $variables = unserialize($cached->data);
    }

    // If something went wrong, try a different technique.
    if (!isset($variables[$name])) {

      // If the ini file is there, use that, as long as we're not running unit tests.
      if (file_exists($ini_file) && !$unit_testing) {
        $variables = parse_ini_file($ini_file, FALSE);
        $variables['multisite_api_ini_file'] = TRUE;
      }
      else {
        $variables['multisite_api_ini_file'] = FALSE;
      }

      // If the variable still doesn't exist, use variable_get().
      if (!isset($variables[$name])) {
        $variables[$name] = variable_get($name, $default);
      }

      // Save in the cache.
      if (!$unit_testing) {
        cache_set('multisite_api_variables', serialize($variables));
      }

    }
  }
  //echo '<br>'. $name .':'. $variables[$name];
  return $variables[$name];
}