<?php

/**
 * @file
 * Adds a formatter for date fields that allows duration to be shown.
 */

/**
 * Implements hook_field_formatter_info().
 */
function date_duration_formatter_field_formatter_info() {
  $formatters = array(
    'date_default_with_duration' => array(
      'label' => t('Date and time with duration'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'settings' => array(
        'format_type' => 'long',
        'multiple_number' => '',
        'multiple_from' => '',
        'multiple_to' => '',
        'fromto' => 'both',
        'duration' => TRUE,
      ),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function date_duration_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $formatter = $display['type'];
  $settings = $display['settings'];
  module_load_include('inc', 'date', 'date_admin');
  $form = date_default_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);

  $form['fromto']['#options']['none'] = t('Neither Start nor End date');

  $form['duration'] = array(
    '#title' => t('Show duration'),
    '#type' => 'checkbox',
    '#access' => $field['settings']['todate'],
    '#default_value' => $settings['duration'],
    '#weight' => 10,
  );
  
  $context = array(
    'field' => $field,
    'instance' => $instance,
    'view_mode' => $view_mode,
  );

  drupal_alter('date_field_formatter_settings_form', $form, $form_state, $context);

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function date_duration_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $formatter = $display['type'];
  $settings = $display['settings'];
  module_load_include('inc', 'date', 'date_admin');
  $summary = date_default_formatter_settings_summary($field, $instance, $view_mode);

  if (array_key_exists('duration', $settings) && $field['settings']['todate']) {
    $summary[] = $settings['duration'] ? t('Show duration') : t('Do not show Duration');
  }

  $context = array(
    'field' => $field,
    'instance' => $instance,
    'view_mode' => $view_mode,
  );
  
  drupal_alter('date_field_formatter_settings_summary', $summary, $context);

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function date_duration_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $showduration = $settings['duration'];
  $fromto = $settings['fromto'];
  $formatter = $display['type'];
  $vars = array(
    'entity' => $entity,
    'entity_type' => $entity_type,
    'field' => $field,
    'instance' => $instance,
    'langcode' => $langcode,
    'items' => $items,
    'display' => $display,
    'dates' => array(),
    'attributes' => array(),
    'rdf_mapping' => array(),
    'add_rdf' => module_exists('rdf'),
  );

  // See if there is rdf mapping for this date field. If so, pass it down to the theme.
  $rdf_mapping = array();
  if (!empty($entity->rdf_mapping) && function_exists('rdf_rdfa_attributes')) {
    if (!empty($entity->rdf_mapping[$field['field_name']])) {
      $vars['rdf_mapping'] = $rdf_mapping = $entity->rdf_mapping[$field['field_name']];
    }
  }
  // See if we are only supposed to display a selected
  // item from multiple value date fields.
  $selected_deltas = array();
  if (!empty($entity->date_id)) {
    foreach ((array) $entity->date_id as $key => $id) {
      list($module, $nid, $field_name, $selected_delta, $other) = explode('.', $id . '.');
      if ($field_name == $field['field_name']) {
        $selected_deltas[] = $selected_delta;
      }
    }
  }
  
  foreach ($items as $delta => $item) {
    if (!empty($entity->date_id) && !in_array($delta, $selected_deltas)) {
    }
    else {
      $vars['delta'] = $delta;
      $vars['item'] = $item;
      $vars['dates'] = date_formatter_process($formatter, $entity_type, $entity, $field, $instance, $langcode, $item, $display);
      $vars['attributes'] = !empty($rdf_mapping) ? rdf_rdfa_attributes($rdf_mapping, $item['value']) : array();
      $vars['show_remaining_days'] = isset($display['settings']['show_remaining_days']) ? $display['settings']['show_remaining_days'] : FALSE;
      $output = theme('date_display_combination', $vars);
      if ($formatter == 'date_default_with_duration') {
        if ($fromto == 'none') {
          if (isset($item['value']) && !empty($item['value']) && isset($item['value2']) && !empty($item['value2'])) {
            $duration = ((strtotime($item['value2']) - strtotime($item['value'])) / 86400) + 1;
            $output = '<span class="date-display-duration">' . $duration . ' days</span>';
          }
        }
        else {
          if ($showduration && isset($item['value']) && !empty($item['value']) && isset($item['value2']) && !empty($item['value2'])) {
            $duration = ((strtotime($item['value2']) - strtotime($item['value'])) / 86400) + 1;
            $output .= '<span class="date-display-duration">(duration: ' . $duration . ' days)</span>';
          }
        }
      }
      if (!empty($output)) {
        $element[$delta] = array('#markup' => $output);
      }
    }
  }

  return $element;
}
