<?php
/**
 * @file
 * Definitions of fields and integration with the booking process.
 */

/**
 * Implements hook_hook_info().
 */
function commerce_booking_flexible_pricing_fields_hook_info() {
  $hooks['commerce_booking_flexible_pricing_fields_handlers'] = array('group' => 'commerce_booking');
  $hooks['commerce_booking_flexible_pricing_fields_handlers_alter'] = array('group' => 'commerce_booking');
  return $hooks;
}

/**
 * Implements hook_field_info().
 *
 * Define our booking window field.
 */
function commerce_booking_flexible_pricing_fields_field_info() {
  return array(
    'commerce_booking_window' => array(
      'label' => t('Commerce Booking Window'),
      'description' => t('Defines booking windows for flexible pricing.'),
      'default_widget' => 'commerce_booking_window_settings_widget',
      'default_formatter' => 'commerce_booking_window_form',
      'module' => 'commerce_booking_flexible_pricing_fields',
      'settings' => array(),
      'instance_settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function commerce_booking_flexible_pricing_fields_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $dates = array();
  foreach ($items as $delta => $item) {
    // Skip empty items.
    if (commerce_booking_flexible_pricing_fields_field_is_empty($item, $field)) {
      continue;
    }

    if (empty($item['label'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'commerce_booking_window_label',
        'message' => t('%name: you must provide a label for a booking window.', array('%name' => $instance['label'])),
      );
    }
    $cut_off = !empty($item['cut_off']) ? $item['cut_off'] : '_none';

    if (isset($dates[$cut_off])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'commerce_booking_window_duplicate_date',
        'message' => t('%name: bookings windows cannot have the same cut off date.', array('%name' => $instance['label'])),
      );
    }
    else {
      $dates[$cut_off] = TRUE;
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function commerce_booking_flexible_pricing_fields_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'commerce_booking_window':
      return (empty($item['label']) && empty($item['cut_off']));

  }
}

/**
 * Implements hook_field_presave().
 */
function commerce_booking_flexible_pricing_fields_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Only act on the booking window field.
  if ($field['type'] == 'commerce_booking_window') {
    $table = _field_sql_storage_tablename($field);
    $column = _field_sql_storage_columnname($field['field_name'], 'window_id');

    list($id,,) = entity_extract_ids($entity_type, $entity);

    $variables = array(
      ':entity_type' => $entity_type,
      ':entity_id' => entity_id($entity_type, $entity),
    );

    $max = db_query('SELECT MAX(' . $column . ') FROM {' . $table . '} WHERE entity_type = :entity_type AND entity_id = :entity_id', $variables)->fetchField();

    foreach ($items as &$item) {
      if (empty($item['window_id'])) {
        $item['window_id'] = ++$max;
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_booking_flexible_pricing_fields_field_widget_info() {
  return array(
    'commerce_booking_window_widget' => array(
      'label' => t('Booking Window'),
      'field types' => array('commerce_booking_window'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'commerce_booking_flexible_pricing_widget' => array(
      'label' => t('Flexible Price'),
      'field types' => array('commerce_price'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_booking_flexible_pricing_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $type = $instance['widget']['type'];

  switch ($type) {
    case 'commerce_booking_window_widget':
      // Store our items for our pricing field to use.
      $form_state['commerce_booking']['fields']['booking_windows'] = array_merge($element['#field_parents'], array($field['field_name']));
      if (!isset($form_state['commerce_booking']['booking_windows'])) {
        $form_state['commerce_booking']['booking_windows'] = $items;
      }

      $element['window_id'] = array(
        '#type' => 'value',
        '#value' => isset($items[$delta]) ? $items[$delta]['window_id'] : NULL,
      );

      $element['label'] = array(
        '#type' => 'textfield',
        '#title' => 'Label',
        '#maxlength' => 32,
        '#default_value' => isset($items[$delta]) ? $items[$delta]['label'] : NULL,
      );

      $element['cut_off'] = array(
        '#type' => module_exists('date_popup') ? 'date_popup' : 'date_text',
        '#title' => t('Cut Off Date'),
        '#description' => t('The date this booking window ends or leave blank to end with the close of bookings.'),
        '#date_format' => 'j M Y',
        '#date_label_position' => 'within',
        '#default_value' => isset($items[$delta]) ? $items[$delta]['cut_off'] : NULL,
      );
      break;

    case 'commerce_booking_flexible_pricing_widget':
      $handler_name = $instance['widget']['settings']['flexible_pricing']['handler'];
      $handler_info = commerce_booking_flexible_pricing_fields_get_handlers($handler_name);
      if (!class_exists($handler_info['handler'])) {
        throw new Exception(t('Specified commerce flexible pricing handler @handler does not exist.', array(
          '@handler' => $handler_info['label'],
        )));
      }

      $handler = new $handler_info['handler']($field, $instance);
      $element = $handler->fieldWidget($form, $form_state, $langcode, $items, $delta, $element);

      // Store the handler and set up our validation handler.
      $element['#handler'] = $handler;
      $element['#validate'][] = 'commerce_booking_flexible_pricing_field_widget_flexible_pricing_validate';
      break;
  }

  return $element;
}

/**
 * Validation handler for flexible pricing fields.
 *
 * @see commerce_booking_flexible_pricing_fields_field_widget_form()
 */
function commerce_booking_flexible_pricing_field_widget_flexible_pricing_validate(&$element, &$form_state, &$form) {
  // Clear out any empty values.
  $field = field_info_field($element['#field_name']);
  $items = &drupal_array_get_nested_value($form_state, array_merge(array('values'), $element['#parents']));

  // Clear out empty values.
  foreach ($items as $i => &$item) {
    if (commerce_price_field_is_empty($item, $field)) {
      unset($items[$i]);
    }
  }

  $items = array_values($items);

  // Pass onto the handler for validation.
  $element['#handler']->fieldWidgetValidate($element, $form_state, $form);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function commerce_booking_flexible_pricing_fields_field_widget_settings_form($field, $instance) {
  if ($instance['widget']['type'] == 'commerce_booking_flexible_pricing_widget') {
    // Set up the field set.
    $form['flexible_pricing'] = array(
      '#type' => 'fieldset',
      '#title' => t('Flexible pricing settings'),
      '#process' => array('commerce_booking_flexible_pricing_fields_field_widget_settings_form_process'),
    );

    // Add our handler selection.
    $form['flexible_pricing']['handler'] = array(
      '#weight' => -99,
      '#type' => 'select',
      '#required' => TRUE,
      '#title' => t('Flexible pricing handler'),
      '#description' => t('Select the type of handler you want to use for this price field.'),
      '#options' => array(),
      '#ajax' => array(
        'callback' => 'commerce_booking_flexible_pricing_fields_field_widget_settings_form_ajax',
        'wrapper' => 'edit-instance-widget-settings-flexible-pricing',
      ),
      '#default_value' => isset($instance['widget']['settings']['flexible_pricing']['handler']) ? $instance['widget']['settings']['flexible_pricing']['handler']: NULL,
    );

    foreach (commerce_booking_flexible_pricing_fields_get_handlers() as $name => $handler) {
      $form['flexible_pricing']['handler']['#options'][$name] = $handler['label'];
    }

    return $form;
  }
}

/**
 * Process callback for the flexible pricing widget settings form..
 */
function commerce_booking_flexible_pricing_fields_field_widget_settings_form_process(&$element, &$form_state, $form) {
  if (isset($form_state['values']['instance']['widget']['settings']['flexible_pricing']['handler'])) {
    $handler_name = $form_state['values']['instance']['widget']['settings']['flexible_pricing']['handler'];
  }
  elseif (!empty($form['#instance']['widget']['settings']['flexible_pricing']['handler'])) {
    $handler_name = $form['#instance']['widget']['settings']['flexible_pricing']['handler'];
  }

  // Pass onto the handler to build it's specific form requirements.
  if (isset($handler_name)) {
    $handler_info = commerce_booking_flexible_pricing_fields_get_handlers($handler_name);
    if (class_exists($handler_info['handler'])) {
      $handler = new $handler_info['handler']($form['#field'], $form['#instance']);
      $element += $handler->fieldWidgetSettings();
    }
    else {
      drupal_set_message(t('Specified commerce flexible pricing handler @handler does not exist.', array(
        '@handler' => $handler_info['label'],
      )), 'error');
    }
  }

  return $element;
}

/**
 * AJAX callback for the flexible pricing widget form.
 *
 * @see commerce_booking_flexible_pricing_fields_field_widget_settings_form().
 * @see commerce_booking_flexible_pricing_fields_form__alter().
 */
function commerce_booking_flexible_pricing_fields_field_widget_settings_form_ajax($form, $form_state) {
  return $form['instance']['widget']['settings']['flexible_pricing'];
}

/**
 * Implements hook_theme().
 */
function commerce_booking_flexible_pricing_fields_theme() {
  return array(
    'commerce_booking_flexible_pricing_base_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Return the available flexible pricing handlers.
 */
function commerce_booking_flexible_pricing_fields_get_handlers($name = NULL) {
  $handlers = &drupal_static(__FUNCTION__, NULL);

  if (!isset($handlers)) {
    $handlers = module_invoke_all('commerce_booking_flexible_pricing_fields_handlers');
    drupal_alter('commerce_booking_flexible_pricing_fields_handlers', $handlers);
  }

  if ($name) {
    return isset($handlers[$name]) ? $handlers[$name]: FALSE;
  }
  else {
    return $handlers;
  }
}

/**
 * Comparison function for booking window fields.
 */
function commerce_booking_flexible_pricing_sort_by_cut_off($a, $b) {
  $a_date = empty($a['cut_off']) ? FALSE : strtotime($a['cut_off']);
  $b_date = empty($b['cut_off']) ? FALSE : strtotime($b['cut_off']);

  if ($a_date === FALSE) {
    return 1;
  }
  elseif ($b_date === FALSE) {
    return -1;
  }
  elseif ($a_date < $b_date) {
    return -1;
  }
  elseif ($a_date > $b_date) {
    return 1;
  }

  return 0;
}

/**
 * Render a set of prices in a table.
 */
function theme_commerce_booking_flexible_pricing_base_table($variables) {
  $element = $variables['element'];
  $rows = array();

  // Build our rows.
  foreach ($element['#options_y'] as $y_value => $y_label) {
    $row = array(
      '_xheader' => $y_label,
    );

    foreach (array_keys($element['#options_x']) as $x_value) {
      $row[$x_value] = drupal_render($element[$element['#map'][$x_value][$y_value]]);
    }

    $rows[] = $row;
  }

  $table_variables = array(
    'header' => $element['#headers'],
    'rows' => $rows,
  );

  $output = '';
  if (!empty($element['#title'])) {
    $output .= '<label>' . $element['#title'] . '</label>';
  }
  if (!empty($element['#description'])) {
    $output .= '<div class="description">' . $element['#description'] . '</label>';
  }
  $output .= theme('table', $table_variables);
  $output .= drupal_render($element['actions']);
  return $output;
}
