<?php
/**
 * @file
 * Install important flexible pricing settings.
 */

/**
 * Implements hook_install().
 *
 * Add ticket class fields and ticket class cache fields to existing bundles.
 */
function commerce_booking_flexible_pricing_install() {
  $t = get_t();
  $info = entity_get_info('commerce_booking_ticket');

  // Create an ticket class field..
  if (!field_info_field('commerce_booking_ticket_class')) {
    $field = array(
      'type' => 'entityreference',
      'field_name' => 'commerce_booking_ticket_class',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'rules_config',
        'handler_settings' => array(
          'target_tags' => array(
            'Ticket Class' => 'Ticket Class',
          ),
          'sort' => array(
            'type' => 'property',
            'property' => 'label',
            'direction' => 'ASC',
          ),
        ),
      ),
    );
    field_create_field($field);
  }

  foreach (array_keys($info['bundles']) as $bundle) {
    // Create an instance on ticket entity.
    if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_class', $bundle)) {
      $instance = array(
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'field_name' => 'commerce_booking_ticket_class',
        'label' => $t('Ticket Class'),
        'description' => $t('Select a ticket class to force. If left empty, ticket class will be automatically decided based on their natural rules.'),
        'widget' => array(
          'type' => 'options_select',
        ),
      );
      field_create_instance($instance);
    }
  }

  // Create an ticket class cache field.
  if (!field_info_field('cbt_class_cache')) {
    $field = array(
      'type' => 'entityreference',
      'field_name' => 'cbt_class_cache',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'rules_config',
        'handler_settings' => array(
          'target_tags' => array(
            'Ticket Class' => 'Ticket Class',
          ),
          'sort' => array(
            'type' => 'property',
            'property' => 'label',
            'direction' => 'ASC',
          ),
        ),
      ),
    );
    field_create_field($field);
  }

  foreach (array_keys($info['bundles']) as $bundle) {
    // Create an instance on ticket entity.
    if (!field_info_instance('commerce_booking_ticket', 'cbt_class_cache', $bundle)) {
      $instance = array(
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'field_name' => 'cbt_class_cache',
        'label' => $t('Ticket Class Cache'),
        'description' => $t('Cache of the last calculated ticket class.'),
        'widget' => array(
          'type' => 'options_select',
        ),
      );
      field_create_instance($instance);
    }
  }

  // Create a booking window field.
  if (!field_info_field('cbt_booking_window')) {
    $field = array(
      'type' => 'list_integer',
      'field_name' => 'cbt_booking_window',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values_function' => 'commerce_booking_flexible_pricing_event_booking_window_options',
      ),
    );
    field_create_field($field);
  }

  foreach (array_keys($info['bundles']) as $bundle) {
    // Create an instance on ticket entity.
    if (!field_info_instance('commerce_booking_ticket', 'cbt_booking_window', $bundle)) {
      $instance = array(
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'field_name' => 'cbt_booking_window',
        'label' => $t('Booking Window'),
        'description' => $t('Select a booking window to force. If left empty, the booking window for the current date will be used.'),
        'widget' => array(
          'type' => 'options_select',
        ),
      );
      field_create_instance($instance);
    }
  }

  // Create an instance on ticket entity.
  if (!field_info_instance('commerce_line_item', 'cbt_booking_window', 'commerce_booking_accommodation')) {
    $instance = array(
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_accommodation',
      'field_name' => 'cbt_booking_window',
      'label' => $t('Booking Window'),
      'description' => $t('Select a booking window to force. If left empty, the booking window for the current date will be used.'),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add ticket class fields to existing bundles.
 */
function commerce_booking_flexible_pricing_update_7000() {
  $info = entity_get_info('commerce_booking_ticket');

  // Create an ticket class field.
  if (!field_info_field('commerce_booking_ticket_class')) {
    $field = array(
      'type' => 'entityreference',
      'field_name' => 'commerce_booking_ticket_class',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'rules_config',
        'handler_settings' => array(
          'target_tags' => array(
            'Ticket Class' => 'Ticket Class',
          ),
          'sort' => array(
            'type' => 'property',
            'property' => 'label',
            'direction' => 'ASC',
          ),
        ),
      ),
    );
    field_create_field($field);
  }

  foreach (array_keys($info['bundles']) as $bundle) {
    // Create an instance on ticket entity.
    if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_class', $bundle)) {
      $instance = array(
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'field_name' => 'commerce_booking_ticket_class',
        'label' => t('Ticket Class'),
        'description' => t('Select a ticket class to force. If left empty, ticket class will be automatically decided based on their natural rules.'),
        'widget' => array(
          'type' => 'options_select',
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Add ticket class cache field to existing bundles.
 */
function commerce_booking_flexible_pricing_update_7001() {
  $t = get_t();
  $info = entity_get_info('commerce_booking_ticket');

  // Create an ticket class cache field.
  if (!field_info_field('cbt_class_cache')) {
    $field = array(
      'type' => 'entityreference',
      'field_name' => 'cbt_class_cache',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'rules_config',
        'handler_settings' => array(
          'target_tags' => array(
            'Ticket Class' => 'Ticket Class',
          ),
          'sort' => array(
            'type' => 'property',
            'property' => 'label',
            'direction' => 'ASC',
          ),
        ),
      ),
    );
    field_create_field($field);
  }

  foreach (array_keys($info['bundles']) as $bundle) {
    // Create an instance on ticket entity.
    if (!field_info_instance('commerce_booking_ticket', 'cbt_class_cache', $bundle)) {
      $instance = array(
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'field_name' => 'cbt_class_cache',
        'label' => $t('Ticket Class Cache'),
        'description' => $t('Cache of the last calculated ticket class.'),
        'widget' => array(
          'type' => 'options_select',
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Add the booking window override to tickets.
 */
function commerce_booking_flexible_pricing_update_7002() {
  $t = get_t();
  $info = entity_get_info('commerce_booking_ticket');

  // Create an ticket class field..
  if (!field_info_field('cbt_booking_window')) {
    $field = array(
      'type' => 'list_integer',
      'field_name' => 'cbt_booking_window',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values_function' => 'commerce_booking_flexible_pricing_event_booking_window_options',
      ),
    );
    field_create_field($field);
  }

  foreach (array_keys($info['bundles']) as $bundle) {
    // Create an instance on ticket entity.
    if (!field_info_instance('commerce_booking_ticket', 'cbt_booking_window', $bundle)) {
      $instance = array(
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'field_name' => 'cbt_booking_window',
        'label' => $t('Booking Window'),
        'description' => $t('Select a booking window to force. If left empty, the booking window for the current date will be used.'),
        'widget' => array(
          'type' => 'options_select',
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Add the booking window to accommodation line items.
 */
function commerce_booking_flexible_pricing_update_7003() {
  $t = get_t();

  // Create a booking window field.
  if (!field_info_field('cbt_booking_window')) {
    $field = array(
      'type' => 'list_integer',
      'field_name' => 'cbt_booking_window',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values_function' => 'commerce_booking_flexible_pricing_event_booking_window_options',
      ),
    );
    field_create_field($field);
  }

  // Create an instance on ticket entity.
  if (!field_info_instance('commerce_line_item', 'cbt_booking_window', 'commerce_booking_accommodation')) {
    $instance = array(
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_accommodation',
      'field_name' => 'cbt_booking_window',
      'label' => $t('Booking Window'),
      'description' => $t('Select a booking window to force. If left empty, the booking window for the current date will be used.'),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }
}
