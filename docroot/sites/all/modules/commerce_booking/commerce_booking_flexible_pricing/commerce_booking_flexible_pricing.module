<?php
/**
 * @file
 * Allow events to have complicated pricing structures.
 */

/**
 * Implements hook_menu().
 */
function commerce_booking_flexible_pricing_menu() {
  // Management page for ticket classes.
  $items['admin/commerce-booking/ticket-classes'] = array(
    'title' => 'Manage Ticket Classes',
    'description' => 'Manage Ticket Classes',
    'page callback' => 'commerce_booking_flexible_pricing_manage_ticket_classes',
    'access arguments' => array('administer ticket classes'),
    'file' => 'commerce_booking_flexible_pricing.admin.inc',
  );

  // Add the menu items for the various Rules forms.
  $controller = new RulesUIController();
  $items += $controller->config_menu('admin/commerce-booking/ticket-classes');

  $items['admin/commerce-booking/ticket-classes/add'] = array(
    'title' => 'Add a Ticket Class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'commerce_booking_flexible_pricing_add_ticket_class_form',
      'admin/commerce-booking/ticket-classes',
    ),
    'access arguments' => array('administer ticket classes'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'rules_admin.inc',
    'file path' => drupal_get_path('module', 'rules_admin'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_booking_flexible_pricing_permission() {
  $permissions = array(
    'administer ticket classes' => array(
      'title' => t('Administer Ticket Classes'),
      'description' => t('Manage the different ticket classes for the booking system.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_hook_info().
 */
function commerce_booking_flexible_pricing_hook_info() {
  $hooks['commerce_booking_flexible_pricing_ticket_class_conditions_alter'] = array('group' => 'commerce_booking');
  return $hooks;
}

/**
 * Implements hook_help().
 */
function commerce_booking_flexible_pricing_help($path, $arg) {
  switch ($path) {
    case 'admin/commerce_booking/ticket_classes':
      return t('What ticket class a ticket belongs to is decided by the conditions below. And enabled condition set can specify a ticket class to be chosen.');
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_booking_flexible_pricing_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_booking_flexible_pricing') . '/views',
  );
}

/**
 * Implements hook_forms().
 */
function commerce_booking_flexible_pricing_forms($form_id, $args) {
  $forms = array();

  $forms['commerce_booking_flexible_pricing_add_ticket_class_form'] = array(
    'callback' => 'rules_admin_add_component',
  );

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_booking_flexible_pricing_form_commerce_booking_flexible_pricing_add_ticket_class_form_alter(&$form, &$form_state) {
  unset($form['settings']['help']);

  // Make sure 'Ticket Class' exists as a tag.
  if (empty($form['settings']['tags'])) {
    $form['settings']['tags']['#type'] = 'value';
    $form['settings']['tags']['#value'] = 'Ticket Class';
  }
  else {
    $form['settings']['tags']['#disabled'] = TRUE;
    $form['settings']['tags']['#default_value'] = 'Ticket Class';
  }

  // Add the parameter.
  if (!empty($form['settings']['vars'])) {
    $var = &$form['settings']['vars']['items'][0];

    // Fill in the first row.
    $var['type']['#value'] = 'commerce_booking_ticket';
    $var['type']['#disabled'] = TRUE;
    $var['label']['#value'] = t('Ticket');
    $var['label']['#disabled'] = TRUE;
    $var['name']['#value'] = 'ticket';
    $var['name']['#disabled'] = TRUE;

    // Hide the rest.
    unset($form['settings']['vars']['items'][1]);
    unset($form['settings']['vars']['items'][2]);

    // Hide the more link.
    unset($form['settings']['vars']['more']);
  }

  // Limit the options to condition sets.
  $form['plugin_name']['#options'] = array(
    'or' => t('Condition Set (OR)'),
    'and' => t('Condition Set (AND)'),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_booking_flexible_pricing_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce_booking/registration_classes/add' on
  // 'admin/commerce_booking/registration_classes'.
  if ($root_path == 'admin/commerce_booking/ticket_classes') {
    $item = menu_get_item('admin/commerce_booking/ticket_classes/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure our hook_commerce_booking_ticket_price_alter() runs first.
 */
function commerce_booking_flexible_pricing_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'commerce_booking_ticket_price_alter') {
    $group = $implementations['commerce_booking_flexible_pricing'];
    unset($implementations['commerce_booking_flexible_pricing']);
    $implementations = array('commerce_booking_flexible_pricing' => $group) + $implementations;
  }
}

/**
 * Get the ticket classes available for a given event in order.
 *
 * @param EntityMetadataWrapper $event_wrapper
 *   Optionally include an event entity metadata wrapper to return only classes
 *   enabled for that event.
 * @param bool $optional
 *   Only return classes which are choosable for the event.
 */
function commerce_booking_flexible_pricing_get_ticket_classes($event_wrapper = FALSE, $optional = FALSE) {
  // Now we have to choose a ticket class.
  $conditions = array(
    'plugin' => array('or', 'and'),
    'active' => TRUE,
    'tags' => array('Ticket Class'),
  );

  if ($event_wrapper) {
    $event_field_name = commerce_booking_get_field_name($event_wrapper->type(), $event_wrapper->value());

    if ($event_wrapper->{$event_field_name}->value()) {
      $settings = $event_wrapper->{$event_field_name}->settings->value();
      $conditions['name'] = array();

      $classes = empty($settings['classes']) ? array() : $settings['classes'];
      foreach ($classes as $name => $set) {
        if ($set) {
          $conditions['name'][] = $name;
        }
      }
    }
  }

  // Allow modules to alter the conditions.
  $forced_classes = array(
    'always' => array('commerce_booking_standard'),
    'never' => array(),
  );
  drupal_alter('commerce_booking_flexible_pricing_ticket_class_conditions', $conditions, $forced_classes, $event_wrapper);

  // If we have the name condition, add/remove our forced classes.
  if (isset($conditions['name'])) {
    if ($optional) {
      $conditions['name'] = array_diff($conditions['name'], $forced_classes['always']);
      $conditions['name'] = array_diff($conditions['name'], $forced_classes['never']);
    }
    else {
      $conditions['name'] = array_merge($conditions['name'], $forced_classes['always']);
      $conditions['name'] = array_diff($conditions['name'], $forced_classes['never']);
    }
  }

  $classes = rules_config_load_multiple(FALSE, $conditions);

  $all_forced = array_merge($forced_classes['always'], $forced_classes['never']);
  if ($optional && !isset($conditions['name']) && count($all_forced)) {
    // Couldn't exclude these from being loaded, so let's remove them now.
    foreach ($classes as $id => $class) {
      if (in_array($class->name, $all_forced)) {
        unset($classes[$id]);
      }
    }
  }

  // Sort them by weight.
  uasort($classes, '_commerce_booking_flexible_pricing_compare_rules');

  return $classes;
}

/**
 * Get the next booking deadline for a given event.
 */
function commerce_booking_flexible_pricing_get_current_window($entity, $entity_type = 'node', $date = NULL) {
  if (!isset($date)) {
    $date = time();
  }

  // Get the booking windows.
  $field_name = commerce_booking_get_field_name($entity_type, $entity, 'commerce_booking_window');
  if ($field_name) {
    $windows = field_get_items($entity_type, $entity, $field_name);
  }
  else {
    // Add a fake window.
    $windows = array(
      array(
        'window_id' => 1,
        'label' => 'Price',
      ),
    );
  }

  if (!$windows) {
    return FALSE;
  }

  // Sort our windows by date ascending.
  usort($windows, 'commerce_booking_flexible_pricing_sort_by_cut_off');

  // Pick the right window.
  $current_window = FALSE;
  foreach ($windows as $window) {
    if (empty($window['cut_off']) || strtotime($window['cut_off']) > $date) {
      $current_window = $window;
      break;
    }
  }

  return $current_window;
}

/**
 * Implements hook_field_widget_form_alter() for commerce_booking_field_settings_widget.
 */
function commerce_booking_flexible_pricing_field_widget_commerce_booking_field_settings_widget_form_alter(&$element, &$form_state, $context) {
  // Prepare options.
  $classes = commerce_booking_flexible_pricing_get_ticket_classes(NULL, TRUE);

  $options = array();
  foreach ($classes as $class) {
    $options[$class->name] = $class->label;
  }

  $element['settings']['classes'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Ticket Classes',
    '#description' => t("Ticket classes allow price variations based on the information entered on a ticket. The 'Standard' class is always available. Please tick the Ticket Classes that apply to this event. Changes to this setting will not take effect until you have saved the form once, edited the prices and saved again."),
    '#options' => $options,
    '#default_value' => !empty($element['settings']['classes']['#value']) ? $element['settings']['classes']['#value'] : array(),
  );
}

/**
 * Compare function for rules.
 */
function _commerce_booking_flexible_pricing_compare_rules($a, $b) {
  $a1 = clone $a;
  $b1 = clone $b;

  if (empty($a1->weight)) {
    $a1->weight = 0;
  }

  if (empty($b1->weight)) {
    $b1->weight = 0;
  }

  if ($a1->weight == $b1->weight) {
    return strnatcmp(strtolower($a1->label), strtolower($b1->label));
  }
  return ($a1->weight < $b1->weight) ? -1 : 1;
}

/**
 * Implements hook_cron().
 *
 * Find any entities where we have transitioned booking windows and add them to
 * the queue for updating.
 */
function commerce_booking_flexible_pricing_cron() {
  $last_run = variable_get('commerce_booking_flexible_pricing_cron_last_run', 0);

  // Get all the booking windows fields.
  $field_names = db_select('field_config', 'fc')
    ->fields('fc', array('field_name'))
    ->condition('type', 'commerce_booking_window')
    ->execute()
    ->fetchCol();

  // Find all events with a booking window transition between now and the last
  // time the cron ran. These are the ones that need updating.
  foreach ($field_names as $field_name) {
    $query = new EntityFieldQuery();
    $query->fieldCondition($field_name, 'cut_off', date('Y-m-d', $last_run), '>', 'cut-off');
    $query->fieldCondition($field_name, 'cut_off', date('Y-m-d', REQUEST_TIME), '<=', 'cut-off');
    $result = $query->execute();

    foreach ($result as $entity_type => $entities) {
      watchdog('commerce_booking_flexible_pricing',
        'Queuing events of type %type for recalculation: %ids.',
        array(
          '%type' => $entity_type,
          '%ids' => implode(', ', array_keys($entities)),
        ));
      commerce_booking_flexible_pricing_queue_orders_recalculation($entity_type, array_keys($entities));
    }
  }

  variable_set('commerce_booking_flexible_pricing_cron_last_run', REQUEST_TIME);
}

/**
 * Implements hook_cron_queue_info().
 */
function commerce_booking_flexible_pricing_cron_queue_info() {
  $queues['commerce_booking_flexible_pricing_recalculate'] = array(
    'worker callback' => 'commerce_booking_flexible_pricing_recalculate_order',
    'time' => 20,
  );
  return $queues;
}

/**
 * Add bookings linked to an entity to the recalculation queue.
 *
 * Finds all of the bookings for a particular event and queues them for
 * recalculation.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param array $entity_ids
 *   An array of entity ids.
 *
 * @return int
 *   The number of orders queued for recalculation.
 */
function commerce_booking_flexible_pricing_queue_orders_recalculation($entity_type, $entity_ids) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order');
  $query->entityCondition('bundle', 'commerce_booking');
  $query->fieldCondition('commerce_booking_event', 'entity_type', $entity_type, '=', 'event');
  $query->fieldCondition('commerce_booking_event', 'entity_id', $entity_ids, 'IN', 'event');
  $result = $query->execute();

  if (!empty($result['commerce_order'])) {
    $queue = DrupalQueue::get('commerce_booking_flexible_pricing_recalculate');
    foreach (array_keys($result['commerce_order']) as $order_id) {
      $queue->createItem($order_id);
    }
  }

  return !empty($result['commerce_order']) ? count($result['commerce_order']) : 0;
}

/**
 * Updates the line items on an order for changes in flexible pricing.
 *
 * Run over the line items recalculating the price to allow changes in flexible
 * pricing to take effect. This should be run through a queue as bookings may
 * a number of line items. The exception to this is if we need the effect to
 * take place immediately.
 *
 * @param int $order_id
 *   The Order ID we are to process.
 */
function commerce_booking_flexible_pricing_recalculate_order($order_id) {
  // Make sure we have our process function included.
  module_load_include('inc', 'commerce_booking', 'commerce_booking.commerce');

  // Get hold of the order.
  if ($order = entity_load_single('commerce_order', $order_id)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Iterate over the line items.
    foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      $line_item = $line_item_wrapper->value();

      // Only the relevant line item type need processing.
      switch ($line_item->type) {
        case 'commerce_booking_ticket':
          // Recalculate the price.
          foreach ($line_item_wrapper->commerce_booking_ticket as $t_delta => $ticket_wrapper) {
            // This calls presave that then calls commerce_booking_ticket_process
            // which recalculates the price of the ticket. This needs the ticket
            // loaded as saving the wrapper alone doesn't seem to trigger.
            if ($ticket = $ticket_wrapper->value()) {
              $ticket->save();
            }
          }
          commerce_booking_line_item_ticket_process($line_item, $order);
          commerce_line_item_save($line_item);
          break;
        case 'commerce_booking_accommodation':
          module_load_include('inc', 'commerce_booking_accommodation', 'commerce_booking_accommodation.commerce');
          commerce_booking_accommodation_line_item_accommodation_process($line_item);
          entity_save('commerce_line_item', $line_item);
          break;
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * Queue any orders to be updated if pricing has changed.
 */
function commerce_booking_flexible_pricing_entity_update($entity, $entity_type) {
  // Sniff out the field info we need.
  if (!($booking_field = commerce_booking_get_field_name($entity_type, $entity))) {
    // No booking field, so there's nothing to do.
    return;
  }

  list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);
  $booking_instance = field_info_instance($entity_type, $booking_field, $bundle);

  if (!($price_field = $booking_instance['settings']['price_field'])) {
    // No price field, so there's nothing to do.
    return;
  }

  // Get hold of our original if it exists so we can do a comparison. If we
  // don't have anything to compare to, we need to always process.
  if (!isset($entity->original)) {
    $process = TRUE;
  }
  else {
    $original = $entity->original;
    $process = FALSE;

    // Check whether the price field has changed.
    if (print_r($entity->{$price_field}, TRUE) !== print_r($original->{$price_field}, TRUE)) {
      $process = TRUE;
    }
    // Check whether there is a booking field and if so, compare.
    else {
      $field_name = commerce_booking_get_field_name($entity_type, $entity, 'commerce_booking_window');
      if (field_info_instance($entity_type, $field_name, $bundle) !== NULL) {
        if (print_r($entity->{$field_name}, TRUE) !== print_r($original->{$field_name}, TRUE)) {
          $process = TRUE;
        }
      }
    }
  }

  // If this needs processing, let's get the orders added to the queue.
  if ($process) {
    commerce_booking_flexible_pricing_queue_orders_recalculation($entity_type, array($entity_id));
  }
}

/**
 * Implements hook_field_attach_create_bundle().
 *
 * Add a ticket class entity reference field to the bundle.
 */
function commerce_booking_flexible_pricing_field_attach_create_bundle($entity_type, $bundle) {
  if ($entity_type != 'commerce_booking_ticket') {
    return;
  }

  // Create an ticket class field.
  if (!field_info_field('commerce_booking_ticket_class')) {
    $field = array(
      'type' => 'entityreference',
      'field_name' => 'commerce_booking_ticket_class',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'rules_config',
        'handler_settings' => array(
          'target_tags' => array(
            'Ticket Class' => 'Ticket Class',
          ),
          'sort' => array(
            'type' => 'property',
            'property' => 'label',
            'direction' => 'ASC',
          ),
        ),
      ),
    );
    field_create_field($field);
  }

  // Create an instance on ticket entity.
  if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_class', $bundle)) {
    $instance = array(
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => $bundle,
      'field_name' => 'commerce_booking_ticket_class',
      'label' => t('Ticket Class'),
      'description' => t('Select a ticket class to force. If left empty, ticket class will be automatically decided based on their natural rules.'),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }

  // Create an ticket class cache field.
  if (!field_info_field('cbt_class_cache')) {
    $field = array(
      'type' => 'entityreference',
      'field_name' => 'cbt_class_cache',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'rules_config',
        'handler_settings' => array(
          'target_tags' => array(
            'Ticket Class' => 'Ticket Class',
          ),
          'sort' => array(
            'type' => 'property',
            'property' => 'label',
            'direction' => 'ASC',
          ),
        ),
      ),
    );
    field_create_field($field);
  }

  // Create an instance on ticket entity.
  if (!field_info_instance('commerce_booking_ticket', 'cbt_class_cache', $bundle)) {
    $instance = array(
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => $bundle,
      'field_name' => 'cbt_class_cache',
      'label' => t('Ticket Class Cache'),
      'description' => t('Cache of the last calculated ticket class.'),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_form_commerce_booking_edit_ticket_form_alter().
 *
 * Set access on ticket class override and restrict the options to classes
 * enabled on the event.
 */
function commerce_booking_flexible_pricing_form_commerce_booking_edit_ticket_form_alter(&$form, &$form_state, $form_id) {
  if ($form['commerce_booking_ticket_class']['#access'] = user_access('administer tickets')) {
    // Set the options and other information.
    $event_entity_type = commerce_booking_get_event_entity_type($form['#order']);
    $event_entity = commerce_booking_get_event_entity($form['#order']);

    // Get our enabled ticket classes, including the _none if used.
    $options = array();
    if (isset($form['commerce_booking_ticket_class'][LANGUAGE_NONE]['#options']['_none'])) {
      $options['_none'] = $form['commerce_booking_ticket_class'][LANGUAGE_NONE]['#options']['_none'];
    }

    if ($event_entity_type && $event_entity) {
      $event_wrapper = entity_metadata_wrapper($event_entity_type, $event_entity);
      $classes = commerce_booking_flexible_pricing_get_ticket_classes($event_wrapper);

      foreach ($classes as $name => $class) {
        $options[$class->id] = $class->label;
      }
    }

    $form['commerce_booking_ticket_class'][LANGUAGE_NONE]['#options'] = $options;

    if ($form['#ticket']->status != 'pending') {
      $form['commerce_booking_ticket_class'][LANGUAGE_NONE]['#description'] .= ' <span class="error">' . t('This ticket is not pending. Changing the class may result in changes in price including negative balances.') . '</span>';
    }
  }
}

/**
 * Implements hook_form_alter_commerce_checkout_form_tickets().
 *
 * Add ticket class as a column on the ticket table.
 */
function commerce_booking_form_commerce_checkout_form_tickets_alter(&$form, &$form_state) {
  if (isset($form['tickets']['tickets'])) {
    $pos = array_search('price', array_keys($form['tickets']['tickets']['#header']));
    $header = array_slice($form['tickets']['tickets']['#header'], 0, $pos, TRUE);
    $header['ticket_class'] = t('Ticket Class');
    $header += array_slice($form['tickets']['tickets']['#header'], $pos, NULL, TRUE);
    $form['tickets']['tickets']['#header'] = $header;

    foreach ($form['tickets']['tickets']['tickets'] as $ticket_id => &$row) {
      $row['ticket_class'] = $row['#ticket_wrapper']->cbt_class_cache->value() ? array('#markup' => $row['#ticket_wrapper']->cbt_class_cache->label->value()) : array();
    }
  }
}

/**
 * Entity property getter.
 *
 * @see entity_property_verbatim_get()
 */
function commerce_booking_flexible_pricing_entity_property_get($entity, array $options, $name, $entity_type, $info) {
  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  switch ($name) {
    case 'booking_window_cut_off':
      $event_wrapper = $wrapper->commerce_booking_event;
      $booking_window = commerce_booking_flexible_pricing_get_current_window($event_wrapper->value(), $event_wrapper->type());
      $cut_off = strtotime($booking_window['cut_off']);
      return $cut_off !== FALSE ? $cut_off : NULL;

    case 'booking_window_increase':
      // Get the current balance and the next cut off.
      $current = $wrapper->commerce_order_total->value();
      $cut_off = $wrapper->booking_window_cut_off->value();

      // If the next cut off doesn't exist, we will have no change.
      if (!$cut_off) {
        return NULL;
      }

      // To figure out the difference, we need to temporarily recalculate each
      // ticket.
      $future_amount = 0;

      // Add 1 second to the cut off to make sure we're past it.
      $cut_off++;

      foreach ($wrapper->commerce_line_items as $line_item_wrapper) {
        // Non ticket line items just need adding.
        if ($line_item_wrapper->getBundle() != 'commerce_booking_ticket') {
          $future_amount += commerce_currency_convert($line_item_wrapper->commerce_total->amount->value(), $line_item_wrapper->commerce_total->currency_code->value(), $current['currency_code']);
          continue;
        }

        // Ticket's need re-processing to see if the value changes.
        foreach ($line_item_wrapper->commerce_booking_ticket as $ticket_wrapper) {
          // Use a clone to make sure things don't get accidentally saved.
          $ticket = clone $ticket_wrapper->value();
          commerce_booking_ticket_process($ticket, array('commerce_booking_flexible_pricing' => array('date' => $cut_off)));

          // Add the new ticket balance to the future balance.
          $price = $ticket->commerce_booking_ticket_price[LANGUAGE_NONE][0];
          $future_amount += commerce_currency_convert($price['amount'], $price['currency_code'], $current['currency_code']);
        }
      }

      $increase_amount = $future_amount - $current['amount'];
      return $increase_amount > 0 ? commerce_currency_format($increase_amount, $current['currency_code']): NULL;

  }
}

/**
 * Allowed values callback for cbt_booking_window.
 */
function commerce_booking_flexible_pricing_event_booking_window_options($field, $instance, $entity_type, $entity) {
  // There is no way to set a default value for this field.
  if (!isset($entity)) {
    return array();
  }

  // If the entity is a line item, we need to track back to the order first.
  if ($entity_type == 'commerce_line_item') {
    $wrapper = entity_metadata_wrapper('commerce_line_item', $entity);
    $entity = $wrapper->order->value();
  }

  // Track back to event.
  $event_type = commerce_booking_get_event_entity_type($entity);
  $event = commerce_booking_get_event_entity($entity);
  list(, , $event_bundle) = entity_extract_ids($event_type, $event);
  $field_name = commerce_booking_get_field_name($event_type, $event, 'commerce_booking_window');

  // Build our options.
  $windows = array();
  if (isset($event->{$field_name}[LANGUAGE_NONE]) && is_array($event->{$field_name}[LANGUAGE_NONE])) {
    foreach ($event->{$field_name}[LANGUAGE_NONE] as $window) {
      $windows[$window['window_id']] = $window['label'];
    }
  }
  return $windows;
}

/**
 * Implements hook_field_access().
 *
 * Make the cbt_class_cache field read only.
 */
function commerce_booking_flexible_pricing_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op == 'edit') {
    switch ($field['field_name']) {
      case 'cbt_class_cache':
        return FALSE;

      case 'cbt_booking_window':
        return user_access('administer tickets', $account);
    }
  }
  return !($op == 'edit' && in_array($field['field_name'], array('cbt_class_cache')));
}

/**
 * Implements hook_entity_presave().
 *
 * Store the current booking window against a ticket if it's paid in full.
 */
function commerce_booking_flexible_pricing_commerce_booking_ticket_process($ticket) {
  if ($ticket->status == 'paid_in_full' && empty($ticket->cbt_booking_window[LANGUAGE_NONE][0]['value'])) {
    $event = commerce_booking_get_event_entity($ticket);
    $event_type = commerce_booking_get_event_entity_type($ticket);
    if ($window_id = commerce_booking_flexible_pricing_get_current_window($event, $event_type)) {
      $ticket->cbt_booking_window[LANGUAGE_NONE][0]['value'] = $window_id['window_id'];
    }
  }
}
