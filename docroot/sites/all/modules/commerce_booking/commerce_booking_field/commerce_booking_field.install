<?php
/**
 * @file
 * Definition of the commerce booking field field schema.
 */

/**
 * Implements hook_field_schema().
 */
function commerce_booking_field_field_schema($field) {
  switch ($field['type']) {
    case 'commerce_booking':
      $schema = array(
        'columns' => array(
          'booking_open' => array(
            'type' => 'int',
            'size' => 'tiny',
            'not null' => TRUE,
            'default' => 0,
            'description' => 'Integer showing whether a booking is open, closed or automated.',
          ),
          'booking_open_date' => array(
            'type' => 'int',
            'not null' => FALSE,
            'description' => 'When does booking open if booking_open is set to automated.',
          ),
          'booking_close_date' => array(
            'type' => 'int',
            'not null' => FALSE,
            'description' => 'When does booking close if booking_open is set to automated.',
          ),
          'ticket_type' => array(
            'type' => 'varchar',
            'length' => 32,
            'not null' => TRUE,
            'description' => 'The ticket type does a booking for this event uses.',
          ),
          'settings' => array(
            'type' => 'text',
            'size' => 'big',
            'not null' => FALSE,
            'serialize' => TRUE,
            'description' => 'Serialized array of other event settings.',
          ),
        ),
        'indexes' => array(
          'booking_open' => array('booking_open'),
        ),
      );
      break;

    case 'commerce_booking_event':
      $schema = array(
        'columns' => array(
          'entity_type' => array(
            'type' => 'varchar',
            'length' => '255',
            'not null' => TRUE,
            'default' => '',
            'description' => 'Entity type of the event entity.',
          ),
          'entity_id' => array(
            'type' => 'varchar',
            'length' => 255,
            'not null' => TRUE,
            'default' => '',
            'description' => 'Entity id (or machine name) of the event entity.',
          ),
        ),
        'indexes' => array(
          'entity_id' => array('entity_id'),
        ),
      );
      break;

  }

  return $schema;
}
