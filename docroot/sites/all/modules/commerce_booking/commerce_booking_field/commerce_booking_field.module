<?php
/**
 * @file
 * Defines the commerce booking and commerce_booking_event fields.
 */

/**
 * Implements hook_menu().
 *
 * Define a intermediary page to allow the booking link to work.
 */
function commerce_booking_field_menu() {
  $items['commerce_booking_field/book_now/%/%'] = array(
    'page callback' => 'commerce_booking_field_book_now_page',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'file' => 'commerce_booking_field.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_booking_field_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/entityreference/' . $plugin;
  }
}

/**
 * Implements hook_field_info().
 *
 * Define a field type to maintain event booking settings.
 */
function commerce_booking_field_field_info() {
  return array(
    'commerce_booking' => array(
      'label' => t('Commerce Booking'),
      'description' => t('Stores settings for the booking for this entity.'),
      'default_widget' => 'commerce_booking_field_settings_widget',
      'default_formatter' => 'commerce_booking_field_booking_form',
      'module' => 'commerce_booking_field',
      'settings' => array(),
      'instance_settings' => array(),
      'property_type' => 'struct',
      'property_callbacks' => array('commerce_booking_field_property_callback'),
    ),
    'commerce_booking_event' => array(
      'label' => t('Commerce Booking Event Reference'),
      'description' => t('Stores which event a booking order is for.'),
      'default_widget' => 'commerce_booking_event_field_widget',
      'default_formatter' => 'commerce_booking_event_field_default',
      'module' => 'commerce_booking_field',
      'settings' => array(),
      'instance_settings' => array(),
      'property_callbacks' => array('commerce_booking_field_property_callback'),
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function commerce_booking_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form = array();

  switch ($field['type']) {
    case 'commerce_booking':
      $entity_type = $instance['entity_type'];
      $bundle = $instance['bundle'];

      // Get the date field options.
      $date_field_options = array();

      // Get the price field options.
      $price_field_options = array();

      // Get the terms and conditions field options.
      $tc_field_options = array();

      $date_types = array('datetime', 'date', 'datestamp');
      $instances = field_info_instances($entity_type, $bundle);
      foreach ($instances as $field_name => $instance_settings) {
        $info = field_info_field($field_name);
        if ($info['type'] == 'commerce_price') {
          $price_field_options[$field_name] = $instance_settings['label'];
        }
        elseif (in_array($info['type'], $date_types)) {
          $date_field_options[$field_name] = $instance_settings['label'];
        }
        elseif ($info['type'] == 'text_long') {
          $tc_field_options[$field_name] = $instance_settings['label'];
        }
      }

      // Date field options.
      $form['date_field'] = array(
        '#type' => 'select',
        '#title' => t('Date field'),
        '#description' => t('Select the field that stores the date of this event. Commerce booking flexible pricing requires this setting.'),
        '#default_value' => !empty($settings['date_field']) ? $settings['date_field'] : '',
        '#options' => $date_field_options,
        '#required' => TRUE,
      );

      // Price field.
      $form['price_field'] = array(
        '#type' => 'select',
        '#title' => t('Price field'),
        '#description' => t('Select the price field to use as the price of this event. Leave blank if events are always free.'),
        '#default_value' => !empty($settings['price_field']) ? $settings['price_field'] : '',
        '#options' => $price_field_options,
        '#required' => TRUE,
      );

      // Deposit field.
      $form['deposit_field'] = array(
        '#type' => 'select',
        '#title' => t('Deposit field'),
        '#description' => t('Select the price field to use as the deposit price for for tickets to this event. Leave blank if tickets should not have deposits.'),
        '#default_value' => !empty($settings['deposit_field']) ? $settings['deposit_field'] : '',
        '#options' => $price_field_options,
        '#empty_option' => t('No Deposit Field'),
      );

      // Terms and conditions.
      $form['tc_field'] = array(
        '#type' => 'select',
        '#title' => t('Terms & Conditions field'),
        '#description' => t('Select the terms and conditions field.'),
        '#default_value' => !empty($settings['tc_field']) ? $settings['tc_field'] : '',
        '#options' => $tc_field_options,
        '#empty_option' => t('No Terms & Conditions'),
      );
      break;

    case 'commerce_booking_event':
      break;
  }

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function commerce_booking_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
}

/**
 * Implements hook_field_is_empty().
 */
function commerce_booking_field_field_is_empty() {
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_booking_field_field_widget_info() {
  return array(
    'commerce_booking_field_settings_widget' => array(
      'label' => t('Booking Settings'),
      'field types' => array('commerce_booking'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'commerce_booking_event_field_widget' => array(
      'label' => t('Event Reference'),
      'field types' => array('commerce_booking_event'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * @todo: Implement booking openeing and closing date stuff.
 */
function commerce_booking_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $type = $instance['widget']['type'];

  $ticket_type_options = array();
  foreach (entity_load('commerce_booking_ticket_type') as $ticket_type) {
    $ticket_type_options[$ticket_type->type] = $ticket_type->label;
  }

  switch ($type) {
    case 'commerce_booking_field_settings_widget':
      $element['booking_open'] = array(
        '#type' => 'select',
        '#title' => t('Is booking open on this event?'),
        '#description' => t('Select "open" to allow users to book for the event. Automated is not yet supported.'),
        '#options' => array(
          COMMERCE_BOOKING_BOOKING_OPEN => t('Open'),
          COMMERCE_BOOKING_BOOKING_AUTO => t('Automated'),
          COMMERCE_BOOKING_BOOKING_CLOSED => t('Closed'),
          COMMERCE_BOOKING_BOOKING_DISABLED => t('Disabled'),
        ),
        '#default_value' => isset($items[$delta]['booking_open']) ? $items[$delta]['booking_open'] : COMMERCE_BOOKING_BOOKING_DISABLED,
      );

      $element['booking_open_date'] = array(
        '#markup' => t('Open date not yet supported'),
      );

      $element['booking_closed_date'] = array(
        '#markup' => t('Closed date not yet supported'),
      );

      if (count($ticket_type_options) > 1) {
        $element['ticket_type'] = array(
          '#type' => 'select',
          '#title' => t('Ticket type'),
          '#description' => t('What type of ticket goes with this event?'),
          '#options' => $ticket_type_options,
          '#default_value' => isset($items[$delta]['ticket_type']) ? $items[$delta]['ticket_type'] : NULL,
        );
      }
      else {
        $element['ticket_type'] = array(
          '#type' => 'value',
          '#value' => key($ticket_type_options),
        );
      }

      // Set up a container for settings. We'll pass through any keys of the
      // settings array through as values, but other modules may implement
      // hook_field_widget_form_alter() to insert form elements.
      $element['settings'] = array(
        '#type' => 'container',
        '#tree' => TRUE,
      );
      if (isset($items[$delta]['settings'])) {
        $items[$delta]['settings'] = is_array($items[$delta]['settings']) ? $items[$delta]['settings'] : unserialize($items[$delta]['settings']);
        foreach ($items[$delta]['settings'] as $key => $value) {
          $element['settings'][$key] = array(
            '#type' => 'value',
            '#value' => $value,
          );
        }
      }

      $element['#type'] = 'fieldset';
      $element['#title'] = t('Booking Settings');

      // Store any important data against the form state for other fields.
      $form_state['commerce_booking']['fields']['booking'] = array_merge($element['#field_parents'], array($field['field_name'], $langcode));
      $form_state['commerce_booking']['settings'] = !empty($items[$delta]['settings']) ? $items[$delta]['settings'] : array();
      break;

    case 'commerce_booking_event_field_widget':
      $element['#markup'] = t('Changing the event this relates to is not currently supported.');
      break;

  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_booking_field_field_formatter_info() {
  return array(
    'commerce_booking_field_booking_form' => array(
      'label' => t('Booking Form'),
      'field types' => array('commerce_booking'),
    ),
    'commerce_booking_field_booking_link' => array(
      'label' => t('Booking Link'),
      'field types' => array('commerce_booking'),
    ),
    'commerce_booking_event_field_default' => array(
      'label' => t('Event Label'),
      'field types' => array('commerce_booking_event'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_booking_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();

  switch ($display['type']) {
    case 'commerce_booking_field_booking_form':
      foreach ($items as $delta => $item) {
        if (commerce_booking_can_book(NULL, NULL, NULL, $item)) {
          $elements[$delta] = drupal_get_form('commerce_booking_field_short_form__' . $entity_type . '__' . entity_id($entity_type, $entity), $entity_type, $entity, $field, $instance, $items);
        }
      }
      break;

    case 'commerce_booking_field_booking_link':
      foreach ($items as $delta => $item) {
        if (commerce_booking_can_book(NULL, NULL, NULL, $item)) {
          $path = 'commerce_booking_field/book_now/' . $entity_type . '/' . entity_id($entity_type, $entity);
          $elements[$delta]['#markup'] = l(t('Book Now'), $path, array('attributes' => array('class' => array('book-now'))));
        }
      }
      break;

    case 'commerce_booking_event_field_default':
      foreach ($items as $delta => $item) {
        $item_entity = entity_load_single($item['entity_type'], $item['entity_id']);
        $elements[$delta]['#markup'] = entity_label($item['entity_type'], $item_entity);
      }
      break;
  }

  return $elements;
}

/**
 * Converts commerce booking field settings to a serialized array.
 *
 * @param string $entity_type
 *   The entity type variable passed through hook_field_storage_pre_*().
 * @param Object $entity
 *   The entity variable passed through hook_field_storage_pre_*().
 */
function _commerce_booking_field_serialize_settings($entity_type, $entity) {
  // Get the commerce booking field name.
  $field_name = commerce_booking_get_field_name($entity_type, $entity);

  // Iterate over the items arrays for each language.
  if (empty($entity->{$field_name})) {
    return;
  }

  foreach (array_keys($entity->{$field_name}) as $langcode) {
    $items = isset($entity->{$field_name}[$langcode]) ? $entity->{$field_name}[$langcode] : array();

    // Serialize settings arrays before saving.
    foreach ($items as $delta => $item) {
      // Serialize an existing settings array.
      if (isset($item['settings']) && is_array($item['settings'])) {
        $entity->{$field_name}[$langcode][$delta]['settings'] = serialize($item['settings']);
      }
    }
  }
}

/**
 * Unserialize commerce booking field settings.
 *
 * Converts saved commerce booking field settings columns back to arrays for
 * use in the rest of the current page request execution.
 *
 * @param string $entity_type
 *   The entity type variable passed through hook_field_attach_*().
 * @param Object $entity
 *   The entity variable passed through hook_field_attach_*().
 */
function _commerce_booking_field_unserialize_settings($entity_type, $entity) {
  // Get the commerce booking field name.
  $field_name = commerce_booking_get_field_name($entity_type, $entity);

  // Iterate over the items arrays for each language.
  if (empty($entity->{$field_name})) {
    return;
  }

  foreach (array_keys($entity->{$field_name}) as $langcode) {
    $items = isset($entity->{$field_name}[$langcode]) ? $entity->{$field_name}[$langcode] : array();

    // For each item in the array, unserialize or initialize its settings array.
    foreach ($items as $delta => $item) {
      // If we have a non-array $item['settings'], unserialize it.
      if (!empty($item['settings']) && !is_array($item['settings'])) {
        $entity->{$field_name}[$langcode][$delta]['settings'] = unserialize($item['settings']);
      }
      // If we have no settings element (or an existing empty), create an empty
      // array.
      elseif (empty($item['settings'])) {
        $entity->{$field_name}[$langcode][$delta]['settings'] = array();
      }
    }
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function commerce_booking_field_field_storage_pre_insert($entity_type, $entity) {
  _commerce_booking_field_serialize_settings($entity_type, $entity);
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function commerce_booking_field_field_storage_pre_update($entity_type, $entity) {
  _commerce_booking_field_serialize_settings($entity_type, $entity);
}

/**
 * Implements hook_field_attach_insert().
 *
 * This hook is used to unserialize the commerce booking field's data array
 * after it has been updated, because the data array is serialized before it is
 * saved and must be unserialized for compatibility with API requests performed
 * during the same request after the update occurs.
 */
function commerce_booking_field_field_attach_insert($entity_type, $entity) {
  _commerce_booking_field_unserialize_settings($entity_type, $entity);
}

/**
 * Implements hook_field_update().
 *
 * This hook is used to unserialize the commerce booking field's data array
 * after it has been updated, because the data array is serialized before it is
 * saved and must be unserialized for compatibility with API requests performed
 * during the same request after the update occurs.
 */
function commerce_booking_field_field_attach_update($entity_type, $entity) {
  _commerce_booking_field_unserialize_settings($entity_type, $entity);
}

/**
 * Implements hook_field_load().
 */
function commerce_booking_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  // Deserialize settings arrays.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Unserialize the settings array if necessary.
      if (!empty($items[$id][$delta]['settings']) && !is_array($items[$id][$delta]['settings'])) {
        $items[$id][$delta]['settings'] = unserialize($items[$id][$delta]['settings']);
      }
      else {
        $items[$id][$delta]['settings'] = array();
      }
    }
  }
}

/**
 * Implements hook_forms().
 */
function commerce_booking_field_forms($form_id, $args) {
  $forms = array();

  if (substr($form_id, 0, 33) == 'commerce_booking_field_short_form') {
    $forms[$form_id] = array('callback' => 'commerce_booking_field_short_form');
  }

  return $forms;
}

/**
 * Form that includes a booking link for events.
 */
function commerce_booking_field_short_form($form, &$form_state, $entity_type, $entity, $field, $instance, $items) {
  // Store the entity type and entity.
  $form['entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity_type,
  );

  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  if (commerce_booking_can_book(NULL, NULL, NULL, reset($items))) {
    // Save the ticket type that we need.
    $form['ticket_type'] = array(
      '#type' => 'value',
      '#value' => $items[0]['ticket_type'],
    );

    $form['book'] = array(
      '#type' => 'submit',
      '#value' => t('Book Now'),
      '#attributes' => array(
        'class' => array(
          'book-button',
        ),
      ),
    );

    $form['#attributes']['class'] = array('commerce-booking-form');
  }

  return $form;
}

/**
 * Submit handler for the short commerce booking form.
 */
function commerce_booking_field_short_form_submit($form, &$form_state) {
  global $user;

  // Make sure we have the required items submitted.
  if (empty($form_state['values']['entity_type']) || empty($form_state['values']['entity'])) {
    return;
  }

  $booking = commerce_booking_prepare_booking($form_state['values']['entity_type'], $form_state['values']['entity'], $user);
  $form_state['booking'] = $booking;
  $form_state['redirect'] = 'checkout/' . $booking->order_id;
}

/**
 * Implements hook_views_api().
 */
function commerce_booking_field_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_booking_field') . '/views',
  );
}

/**
 * Property callback for the Entity Metadata framework.
 */
function commerce_booking_field_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
  if (!in_array($field['type'], array('commerce_booking', 'commerce_booking_event'))) {
    return;
  }

  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  switch ($field['type']) {
    case 'commerce_booking':
      $property = array(
        'label' => $instance['label'],
        'type' => 'struct',
        'description' => t('Field "@name".', array('@name' => $name)),
        'getter callback' => 'entity_metadata_field_verbatim_get',
        'translatable' => !empty($field['translatable']),
        'field' => TRUE,
        'required' => !empty($instance['required']),
        'property info' => array(
          'booking_open' => array(
            'type' => 'integer',
            'label' => t('Booking Open'),
            'getter callback' => 'entity_property_verbatim_get',
            'setter callback' => 'entity_property_verbatim_set',
          ),
          'booking_open_date' => array(
            'type' => 'date',
            'label' => t('Booking Open Date'),
            'getter callback' => 'entity_property_verbatim_get',
            'setter callback' => 'entity_property_verbatim_set',
          ),
          'booking_open_close' => array(
            'type' => 'date',
            'label' => t('Booking Close Date'),
            'getter callback' => 'entity_property_verbatim_get',
            'setter callback' => 'entity_property_verbatim_set',
          ),
          'ticket_type' => array(
            'type' => 'string',
            'label' => t('Ticket Type'),
            'getter callback' => 'entity_property_verbatim_get',
            'setter callback' => 'entity_property_verbatim_set',
          ),
          'settings' => array(
            'type' => 'struct',
            'label' => t('Settings'),
            'getter callback' => 'commerce_booking_field_property_get',
            'setter callback' => 'entity_property_verbatim_set',
          ),
        ),
      );
      break;

    case 'commerce_booking_event':
      $type = 'entity';

      if ($field['cardinality'] != 1) {
        $type = 'list<' . $type . '>';
      }

      $property = array(
        'label' => $instance['label'],
        'type' => $type,
        'description' => t('Field "@name".', array('@name' => $name)),
        'getter callback' => 'commerce_booking_field_property_get',
        'translatable' => !empty($field['translatable']),
        'field' => TRUE,
        'required' => !empty($instance['required']),
      );
      break;

  }
}

/**
 * Property getter for the Entity Metadata framework.
 */
function commerce_booking_field_property_get($data, array $options, $name, $entity_type, $info) {
  if ($name == 'commerce_booking_event') {
    $entities = array();
    $field = field_info_field($name);
    if (!empty($data->{$name}[$info['langcode']])) {
      foreach ($data->{$name}[$info['langcode']] as $item) {
        if ($entity = entity_load_single($item['entity_type'], $item['entity_id'])) {
          $entities[] = entity_metadata_wrapper($item['entity_type'], $entity);
        }
      }
    }
    return $field['cardinality'] == 1 ? reset($entities) : $entities;
  }

  if ($name == 'settings') {
    if (is_string($data['settings'])) {
      return unserialize($data['settings']);
    }
    else {
      return $data['settings'];
    }
  }
}

/**
 * Implements hook_migrate_api().
 */
function commerce_booking_field_migrate_api() {
  return array(
    'api' => 2,
    'field handlers' => array(
      'MigrateCommerceBookingEventFieldHandler',
    ),
  );
}
