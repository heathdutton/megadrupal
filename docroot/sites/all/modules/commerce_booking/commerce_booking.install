<?php
/**
 * @file
 * Installation hook and schema definition.
 */

/**
 * Implements hook_schema().
 */
function commerce_booking_schema() {
  $schema = array();

  $schema['commerce_booking_ticket'] = array(
    'description' => 'Stores ticket records.',
    'fields' => array(
      'ticket_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique project entity ID.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => 'pending',
        'description' => 'The status of this ticket',
      ),
      'confirmed' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The Unix timestamp when the ticket was confirmed.',
      ),
    ),
    'primary key' => array('ticket_id'),
    'indexes' => array(
      'status' => array('status'),
    ),
  );

  $schema['commerce_booking_ticket_type'] = array(
    'description' => 'Stores information about ticket types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique project type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this project type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this project type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this project type.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 *
 * Add the commerce_booking_event field to the booking order and to a ticket
 * entity.
 */
function commerce_booking_install() {
  $t = get_t();

  // Create an event reference field.
  if (!field_info_field('commerce_booking_event')) {
    $field = array(
      'type' => 'commerce_booking_event',
      'field_name' => 'commerce_booking_event',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  // Create an instance on our booking order.
  if (!field_info_instance('commerce_order', 'commerce_booking_event', 'commerce_booking')) {
    $instance = array(
      'entity_type' => 'commerce_order',
      'bundle' => 'commerce_booking',
      'field_name' => 'commerce_booking_event',
      'label' => $t('Event'),
      'description' => $t('The event this booking is for.'),
    );
    field_create_instance($instance);
  }

  // Create an instance on ticket entity.
  if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_event', 'commerce_booking_ticket')) {
    $instance = array(
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'field_name' => 'commerce_booking_event',
      'label' => $t('Event'),
      'description' => $t('The event this booking is for.'),
    );
    field_create_instance($instance);
  }

  // Create a field for the price of a ticket.
  if (!field_info_field('commerce_booking_ticket_price')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket_price',
      'type' => 'commerce_price',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  // Ticket price instance of ticket entity.
  if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_price', 'commerce_booking_ticket')) {
    $instance = array(
      'field_name' => 'commerce_booking_ticket_price',
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'label' => $t('Price'),
      'description' => $t('The price of this ticket'),
      'widget' => array(
        'type' => 'commerce_price_simple',
      ),
      'display' => array(
        'default' => array(
          'type' => 'commerce_price_default',
        ),
      ),
    );
    field_create_instance($instance);
  }

  // Add default commerce order fields to our bundle.
  commerce_order_configure_order_type('commerce_booking');

  // Configure the new line item type.
  module_load_include('inc', 'commerce_booking', 'commerce_booking.commerce');
  $line_item_types = commerce_booking_commerce_line_item_type_info();
  commerce_line_item_configure_line_item_type($line_item_types['commerce_booking_ticket']);

  // Add a ticket entity reference field.
  if (!field_info_field('commerce_booking_ticket')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket',
      'type' => 'entityreference',
      'settings' => array(
        'target_type' => 'commerce_booking_ticket',
      ),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_line_item', 'commerce_booking_ticket', 'commerce_booking_ticket')) {
    $instance = array(
      'label' => $t('Ticket'),
      'field_name' => 'commerce_booking_ticket',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_ticket',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );
    field_create_instance($instance);
  }

  // Add a terms and conditions field.
  if (!field_info_field('commerce_booking_tcs')) {
    $field = array(
      'field_name' => 'commerce_booking_tcs',
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          1,
          0,
        ),
      ),
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_order', 'commerce_booking_tcs', 'commerce_booking')) {
    $instance = array(
      'field_name' => 'commerce_booking_tcs',
      'entity_type' => 'commerce_order',
      'bundle' => 'commerce_booking',
      'label' => 'Has accepted terms and conditions',
      'widget' => array(
        'type' => 'options_off',
        'settings' => array(
          'display_label' => 1,
        ),
      ),
      'display' => array(
        'default' => array(
          'type' => 'list_default',
        ),
      ),
    );
    field_create_instance($instance);
  }

  // Add a ticket line item status field.
  if (!field_info_field('commerce_booking_ticket_status')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket_status',
      'type' => 'list_text',
      'settings' => array(
        'allowed_values' => array(
          'pending' => 'Pending',
          'deposit_paid' => 'Deposit Paid',
          'paid_in_full' => 'Paid in Full',
          'cancelled' => 'Cancelled',
        ),
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_status', 'commerce_booking_ticket')) {
    $instance = array(
      'label' => $t('Status'),
      'field_name' => 'commerce_booking_ticket_status',
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'default_value' => array(
        array('value' => 'pending'),
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }

  // Add a text field for the ticket holders email.
  if (!field_info_field('ticket_holder_email')) {
    $field = array(
      'field_name' => 'ticket_holder_email',
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_booking_ticket', 'ticket_holder_email', 'commerce_booking_ticket')) {
    $instance = array(
      'label' => $t('Email Address'),
      'field_name' => 'ticket_holder_email',
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);
  }

  // Add a field_collection to store payment references against tickets.
  if (!field_info_field('commerce_booking_ticket_payments')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket_payments',
      'type' => 'field_collection',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_payments', 'commerce_booking_ticket')) {
    $instance = array(
      'field_name' => 'commerce_booking_ticket_payments',
      'label' => 'Payments',
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'widget' => array(
        'type' => 'field_collection_hidden',
      ),
      'display' => array(
        'default' => array(
          'type' => 'field_collection_view',
        ),
      ),
    );
    field_create_instance($instance);
  }

  // Add fields to the payment field collection.
  // Value field.
  if (!field_info_field('cbt_payment_value')) {
    $field = array(
      'field_name' => 'cbt_payment_value',
      'type' => 'commerce_price',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('field_collection_item', 'cbt_payment_value', 'commerce_booking_ticket_payments')) {
    $instance = array(
      'label' => 'Value',
      'field_name' => 'cbt_payment_value',
      'entity_type' => 'field_collection_item',
      'bundle' => 'commerce_booking_ticket_payments',
    );
    field_create_instance($instance);
  }

  // Reference to the commerce_transaction entity.
  if (!field_info_field('cbt_payment_payment')) {
    $field = array(
      'field_name' => 'cbt_payment_payment',
      'type' => 'entityreference',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'commerce_payment_transaction',
      ),
    );
    field_create_field($field);
  }

  if (!field_info_instance('field_collection_item', 'cbt_payment_payment', 'commerce_booking_ticket_payments')) {
    $instance = array(
      'field_name' => 'cbt_payment_payment',
      'entity_type' => 'field_collection_item',
      'bundle' => 'commerce_Booking_ticket_payments',
      'label' => 'Transaction',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'display' => array(
        'default' => array(
          'type' => 'entityreference_label',
          'settings' => array(
            'link' => TRUE,
          ),
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add fields to the ticket and booking entities.
 */
function commerce_booking_update_7001() {
  // Create an event reference field.
  if (!field_info_field('commerce_booking_event')) {
    $field = array(
      'type' => 'commerce_booking_event',
      'field_name' => 'commerce_booking_event',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  // Create an instance on our booking order.
  if (!field_info_instance('commerce_order', 'commerce_booking_event', 'commerce_booking')) {
    $instance = array(
      'entity_type' => 'commerce_order',
      'bundle' => 'commerce_booking',
      'field_name' => 'commerce_booking_event',
      'label' => t('Event'),
      'description' => t('The event this booking is for.'),
    );
    field_create_instance($instance);
  }

  // Create an instance on ticket entity.
  if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_event', 'commerce_booking_ticket')) {
    $instance = array(
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'field_name' => 'commerce_booking_event',
      'label' => t('Event'),
      'description' => t('The event this booking is for.'),
    );
    field_create_instance($instance);
  }
}

/**
 * Add commerce order fields.
 */
function commerce_booking_update_7002() {
  // Add default commerce order fields to our bundle.
  commerce_order_configure_order_type('commerce_booking');
}

/**
 * Configure our new line item type.
 */
function commerce_booking_update_7003() {
  module_load_include('inc', 'commerce_booking', 'commerce_booking.commerce');
  $line_item_types = commerce_booking_commerce_line_item_type_info();
  commerce_line_item_configure_line_item_type($line_item_types['commerce_booking_ticket']);
}

/**
 * Add a ticket entity reference field to the line item entity.
 */
function commerce_booking_update_7004() {
  // Add a ticket entity reference field.
  if (!field_info_field('commerce_booking_ticket')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket',
      'type' => 'entityreference',
      'settings' => array(
        'target_type' => 'commerce_booking_ticket',
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_line_item', 'commerce_booking_ticket', 'commerce_booking_ticket')) {
    $instance = array(
      'label' => t('Ticket'),
      'field_name' => 'commerce_booking_ticket',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_ticket',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );
    field_create_instance($instance);
  }

  $line_items = entity_load('commerce_line_item', FALSE, array('type' => 'commerce_booking_ticket'));

  foreach ($line_items as $line_item_id => $line_item) {
    if ($ticket_id = $line_item->line_item_label) {
      $line_item->commerce_booking_ticket[LANGUAGE_NONE][0]['target_id'] = $ticket_id;
      entity_save('commerce_line_item', $line_item);
    }
  }
}

/**
 * Add a status field to the line item.
 */
function commerce_booking_update_7005() {
  // Add a line item status field.
  if (!field_info_field('commerce_booking_ticket_status')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket_status',
      'type' => 'list_text',
      'settings' => array(
        'allowed_values' => array(
          'pending' => 'Pending',
          'deposit_paid' => 'Deposit Paid',
          'paid_in_full' => 'Paid in Full',
          'cancelled' => 'Cancelled',
        ),
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_line_item', 'commerce_booking_ticket_status', 'commerce_booking_ticket')) {
    $instance = array(
      'label' => t('Status'),
      'field_name' => 'commerce_booking_ticket_status',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_ticket',
      'default_value' => array(
        'value' => 'pending',
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add the status column to a ticket.
 */
function commerce_booking_update_7006() {
  db_add_field('commerce_booking_ticket', 'status', array(
    'type' => 'varchar',
    'length' => '255',
    'not null' => TRUE,
    'default' => 'pending',
    'description' => 'The status of this ticket',
  ));
}

/**
 * Remove the status field from the line item.
 */
function commerce_booking_update_7007() {
  $instance = field_info_instance('commerce_line_item', 'commerce_booking_ticket_status', 'commerce_booking_ticket');
  field_delete_instance($instance);
  field_purge_batch();
}

/**
 * Store price on tickets and allow multiple tickets per line item.
 *
 * - Add commerce booking ticket price field to all existing commerce booking
 *   ticket bundles.
 * - Update line item commerce_booking_ticket field to have unlimited
 *   cardinality.
 */
function commerce_booking_update_7008() {
  // Update ticket entity reference field.
  if (field_info_field('commerce_booking_ticket')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_update_field($field);
  }

  // Add ticket price fields to all bundles.
  if (!field_info_field('commerce_booking_ticket_price')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket_price',
      'type' => 'commerce_price',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  $ticket_info = entity_get_info('commerce_booking_ticket');
  foreach (array_keys($ticket_info['bundles']) as $bundle) {
    // Ticket price instance of ticket entity.
    if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_price', $bundle)) {
      $instance = array(
        'field_name' => 'commerce_booking_ticket_price',
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'label' => t('Price'),
        'description' => t('The price of this ticket'),
        'widget' => array(
          'type' => 'commerce_price_simple',
        ),
        'display' => array(
          'default' => array(
            'type' => 'commerce_price_default',
          ),
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Add a field to store whether a booker has accepted the terms and conditions.
 */
function commerce_booking_update_7009() {
  // Add a terms and conditions field.
  if (!field_info_field('commerce_booking_tcs')) {
    $field = array(
      'field_name' => 'commerce_booking_tcs',
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          1,
          0,
        ),
      ),
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_order', 'commerce_booking_tcs', 'commerce_booking')) {
    $instance = array(
      'field_name' => 'commerce_booking_tcs',
      'entity_type' => 'commerce_order',
      'bundle' => 'commerce_booking',
      'label' => 'Has accepted terms and conditions',
      'widget' => array(
        'type' => 'options_off',
        'settings' => array(
          'display_label' => 1,
        ),
      ),
      'display' => array(
        'default' => array(
          'type' => 'list_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add payment tracking field collection.
 */
function commerce_booking_update_7011() {
  $info = entity_get_info('commerce_booking_ticket');
  $bundles = array_keys($info['bundles']);

  // Add a field_collection to store payment references against tickets.
  if (!field_info_field('commerce_booking_ticket_payments')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket_payments',
      'type' => 'field_collection',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_create_field($field);
  }

  foreach ($bundles as $bundle) {
    if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_payments', $bundle)) {
      $instance = array(
        'field_name' => 'commerce_booking_ticket_payments',
        'label' => 'Payments',
        'entity_type' => 'commerce_booking_ticket',
        'bundle' => $bundle,
        'widget' => array(
          'type' => 'field_collection_hidden',
        ),
        'display' => array(
          'default' => array(
            'type' => 'field_collection_view',
          ),
        ),
      );
      field_create_instance($instance);
    }
  }

  // Add fields to the payment field collection.
  // Value field.
  if (!field_info_field('cbt_payment_value')) {
    $field = array(
      'field_name' => 'cbt_payment_value',
      'type' => 'commerce_price',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('field_collection_item', 'cbt_payment_value', 'commerce_booking_ticket_payments')) {
    $instance = array(
      'label' => 'Value',
      'field_name' => 'cbt_payment_value',
      'entity_type' => 'field_collection_item',
      'bundle' => 'commerce_booking_ticket_payments',
    );
    field_create_instance($instance);
  }

  // Reference to the commerce transaction entity.
  if (!field_info_field('cbt_payment_payment')) {
    $field = array(
      'field_name' => 'cbt_payment_payment',
      'type' => 'entityreference',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'commerce_payment_transaction',
      ),
    );
    field_create_field($field);
  }

  if (!field_info_instance('field_collection_item', 'cbt_payment_payment', 'commerce_booking_ticket_payments')) {
    $instance = array(
      'field_name' => 'cbt_payment_payment',
      'entity_type' => 'field_collection_item',
      'bundle' => 'commerce_booking_ticket_payments',
      'label' => 'Transaction',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'display' => array(
        'default' => array(
          'type' => 'entityreference_label',
          'settings' => array(
            'link' => TRUE,
          ),
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Move ticket status field into the right place.
 */
function commerce_booking_update_7012() {
  if (!field_info_field('commerce_booking_ticket_status')) {
    $field = array(
      'field_name' => 'commerce_booking_ticket_status',
      'type' => 'list_text',
      'settings' => array(
        'allowed_values' => array(
          'pending' => 'Pending',
          'deposit_paid' => 'Deposit Paid',
          'paid_in_full' => 'Paid in Full',
          'cancelled' => 'Cancelled',
        ),
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  // Add it into the commerce booking ticket.
  if (!field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_status', 'commerce_booking_ticket')) {
    $instance = array(
      'label' => t('Status'),
      'field_name' => 'commerce_booking_ticket_status',
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'default_value' => array(
        'value' => 'pending',
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }

  // Remove it from the line item.
  if (field_info_instance('commerce_line_item', 'commerce_booking_ticket_status', 'commerce_booking_ticket')) {
    $instance = array(
      'field_name' => 'commerce_booking_ticket_status',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_ticket',
    );
    field_delete_instance($instance);
  }
}

/**
 * Correct the default value of the ticket status.
 */
function commerce_booking_update_7013() {
  // Add it into the commerce booking ticket.
  if ($instance = field_info_instance('commerce_booking_ticket', 'commerce_booking_ticket_status', 'commerce_booking_ticket')) {
    if ($instance['default_value'] = array('value' => 'pending')) {
      $instance['default_value'] = array(
        array('value' => 'pending'),
      );
      field_update_instance($instance);
    }
  }
}

/**
 * Add an index on the ticket status.
 */
function commerce_booking_update_7014() {
  db_add_index('commerce_booking_ticket', 'status', array('status'));
}

/**
 * Add an email field to the standard ticket bundle.
 */
function commerce_booking_update_7015() {
  // Add a text field for the ticket holders email.
  if (!field_info_field('ticket_holder_email')) {
    $field = array(
      'field_name' => 'ticket_holder_email',
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_booking_ticket', 'ticket_holder_email', 'commerce_booking_ticket')) {
    $instance = array(
      'label' => t('Email Address'),
      'field_name' => 'ticket_holder_email',
      'entity_type' => 'commerce_booking_ticket',
      'bundle' => 'commerce_booking_ticket',
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add the confirmed field.
 */
function commerce_booking_update_7016() {
  $spec = array(
    'type' => 'int',
    'not null' => FALSE,
    'description' => 'The Unix timestamp when the ticket was confirmed.',
  );
  db_add_field('commerce_booking_ticket', 'confirmed', $spec);
}
