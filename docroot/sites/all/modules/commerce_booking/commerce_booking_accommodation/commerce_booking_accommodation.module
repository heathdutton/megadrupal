<?php
/**
 * @file
 * Add the ability to book accommodation to commerce booking.
 */

/**
 * Implements hook_entity_info()
 */
function commerce_booking_accommodation_entity_info() {
  $info['commerce_booking_accom_type'] = array(
    'label' => t('Accommodation type'),
    'plural label' => t('Accommodation types'),
    'description' => t('An accommodation type entity.'),
    'entity class' => 'CommerceBookingAccomType',
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_booking_accom_type',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'accommodation_type_id',
      'bundle' => 'category',
      'label' => 'label',
    ),
    'bundles' => array(
      'villa' => array(
        'label' => t('Villa'),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'commerce_booking_accommodation',
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function commerce_booking_accommodation_menu() {
  $accom_type_info = entity_get_info('commerce_booking_accom_type');
  $items = array();

  // Find out all the entity sub paths that are relevant.
  foreach (field_info_field_map() as $field => $field_info) {
    if ($field_info['type'] == 'commerce_booking') {
      foreach (array_keys($field_info['bundles']) as $entity_type) {
        $entity_info = entity_get_info($entity_type);
        if (isset($entity_info['default path'])) {
          // Get hold of the path and entity type/id arguments.
          $path = $entity_info['default path'];
          $args = array(
            $entity_type,
            substr_count($entity_info['default path'], '/', 0, strpos($entity_info['default path'], '%'))
          );
          $bits = substr_count($entity_info['default path'], '/') + 1;

          // Add our edit item.
          $items[$path . '/accommodation/manage/%commerce_booking_accom_type'] = array(
            'title' => 'Edit accommodation type',
            'page callback' => 'drupal_get_form',
            'page arguments' => array_merge(array('commerce_booking_accom_type_edit'), $args, array($bits + 2)),
            'access arguments' => array('manage commerce booking accom types'),
            'file' => 'includes/commerce_booking_accom_type.admin.inc',
          );

          // Add our create items.
          foreach ($accom_type_info['bundles'] as $bundle => $bundle_info) {
            $items[$path . '/accommodation/manage/add-' . str_replace('_', '-', $bundle)] = array(
              'title' => 'Add @bundle',
              'title arguments' => array('@bundle' => $bundle_info['label']),
              'page callback' => 'commerce_booking_accom_type_add',
              'page arguments' => array_merge($args, array($bundle)),
              'access arguments' => array('manage commerce booking accom types'),
              'file' => 'includes/commerce_booking_accom_type.admin.inc',
              'type' => MENU_LOCAL_ACTION,
            );
          }
        }
      }
    }
  }

  $items['commerce_line_item/%commerce_line_item/cancel/%ctools_js'] = array(
    'title' => 'Cancel Accommodation',
    'page callback' => 'commerce_booking_accommodation_cancel_line_item',
    'page arguments' => array(3, 1),
    'file' => 'commerce_booking_accommodation.pages.inc',
    'access arguments' => array('view any commerce_order entity of bundle commerce_booking'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_booking_accommodation_permission() {
  return array(
    'administer commerce booking accom types' => array(
      'title' => t('Administer accommodation types'),
      'description' => t('Configure fields on accommodation types.'),
    ),
    'manage commerce booking accom types' => array(
      'title' => t('Manage accommodation types'),
      'description' => t('Manage the accommodation types on an event.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_booking_accommodation_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_booking_accommodation') . '/views',
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_booking_accommodation_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return "plugins/$plugin_type";
  }
}

/**
 * Loads an accommodation type entity.
 *
 * @param int $accommodation_type_id
 *   The ID of the accommodation type we want to load.
 *
 * @return CommerceBookingAccomType
 *   The loaded accommodation type entity object, or FALSE if not found.
 */
function commerce_booking_accom_type_load($accommodation_type_id) {
  return entity_load_single('commerce_booking_accom_type', $accommodation_type_id);
}

/**
 * Implements hook_field_widget_form_alter() for commerce_booking_field_settings_widget.
 */
function commerce_booking_accommodation_field_widget_commerce_booking_field_settings_widget_form_alter(&$element, &$form_state, $context) {
  $element['settings']['accommodation'] = array(
    '#type' => 'radios',
    '#title' => t('Does this event have accommodation?'),
    '#description' => t('Choosing yes will allow enable the accommodation tab and allow booking and payment for accommodation.'),
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
    '#default_value' => isset($context['items'][$context['delta']]['settings']['accommodation']) ? $context['items'][$context['delta']]['settings']['accommodation']: 0,
    '#weight' => -2,
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form().
 *
 * Add a price field selection for accommodation price.
 */
function commerce_booking_accommodation_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'commerce_booking') {
    // Add a price field selection for accommodation.
    $form['instance']['settings']['accommodation_price_field'] = array(
      '#type' => 'select',
      '#title' => t('Accommodation price field'),
      '#description' => t('Select the price field to use as the price for the accommodation for this event. Leave blank if accommodation is always free.'),
      '#default_value' => !empty($form['#instance']['settings']['accommodation_price_field']) ? $form['#instance']['settings']['accommodation_price_field'] : '',
      '#options' => $form['instance']['settings']['price_field']['#options'],
      '#empty_option' => t('No accommodation price'),
    );
  }
}

/**
 * Implements hook_entity_presave().
 */
function commerce_booking_accommodation_entity_presave($entity, $type) {
  if ($type == 'commerce_line_item' && $entity->type == 'commerce_booking_accommodation') {
    module_load_include('inc', 'commerce_booking_accommodation', 'commerce_booking_accommodation.commerce');
    commerce_booking_accommodation_line_item_accommodation_process($entity);
  }
}
