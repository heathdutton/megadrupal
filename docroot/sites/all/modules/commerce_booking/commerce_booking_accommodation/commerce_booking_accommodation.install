<?php
/**
 * @file
 * Install and update scripts for commerce booking accommodation.
 */

/**
 * Implements hook_schema().
 */
function commerce_booking_accommodation_schema() {
  $schema = array();

  $schema['commerce_booking_accom_type'] = array(
    'description' => 'Stores accommodation type records.',
    'fields' => array(
      'accommodation_type_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique accommodation type entity ID.',
      ),
      'label' => array(
        'description' => 'The label for this accommodation type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'category' => array(
        'description' => 'The accommodation category this type belongs to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('accommodation_type_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function commerce_booking_accommodation_install() {
  $t = get_t();

  // Create an event reference for our accommodation type.
  if (!field_info_field('commerce_booking_event')) {
    $field = array(
      'type' => 'commerce_booking_event',
      'field_name' => 'commerce_booking_event',
      'cardinality' => 1,
    );
    field_create_field($field);
  }
  if (!field_info_instance('commerce_booking_accom_type', 'commerce_booking_event', 'villa')) {
    $instance = array(
      'entity_type' => 'commerce_booking_accom_type',
      'bundle' => 'villa',
      'field_name' => 'commerce_booking_event',
      'label' => $t('Event'),
      'description' => $t('The event this accommodation type is for.'),
      'required' => TRUE,
    );
    field_create_instance($instance);
  }

  // Create a description field for the accomodation type.
  if (!field_info_field('commerce_booking_accom_desc')) {
    $field = array(
      'type' => 'text_long',
      'field_name' => 'commerce_booking_accom_desc',
      'cardinality' => 1,
    );
    field_create_field($field);
  }
  if (!field_info_instance('commerce_booking_accom_type', 'commerce_booking_accom_desc', 'villa')) {
    $instance = array(
      'entity_type' => 'commerce_booking_accom_type',
      'bundle' => 'villa',
      'field_name' => 'commerce_booking_accom_desc',
      'label' => $t('Description'),
      'description' => $t('A brief description of the accommodation type.'),
      'widget' => array(
        'type' => 'text_textarea',
        'settings' => array(
          'rows' => 2,
        ),
      ),
    );
    field_create_instance($instance);
  }

  // Configure the new line item type.
  module_load_include('inc', 'commerce_booking_accommodation', 'commerce_booking_accommodation.commerce');
  $line_item_types = commerce_booking_accommodation_commerce_line_item_type_info();
  commerce_line_item_configure_line_item_type($line_item_types['commerce_booking_accommodation']);

  // Add an accommodation type entity reference field.
  if (!field_info_field('cba_accommodation_type')) {
    $field = array(
      'field_name' => 'cba_accommodation_type',
      'type' => 'entityreference',
      'settings' => array(
        'target_type' => 'commerce_booking_accom_type',
        'handler' => 'commerce_booking_event',
        'handler_settings' => array(
          'referencing_entity' => array('order', 'commerce_booking_event'),
        ),
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_line_item', 'cba_accommodation_type', 'commerce_booking_accommodation')) {
    $instance = array(
      'label' => $t('Accommodation type'),
      'field_name' => 'cba_accommodation_type',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_accommodation',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );
    field_create_instance($instance);
  }

  // Add the payments field to track payments against each individual line item.
  if (!field_info_instance('commerce_line_item', 'commerce_booking_ticket_payments', 'commerce_booking_accommodation')) {
    $instance = array(
      'field_name' => 'commerce_booking_ticket_payments',
      'label' => 'Payments',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_accommodation',
      'widget' => array(
        'type' => 'field_collection_hidden',
      ),
      'display' => array(
        'default' => array(
          'type' => 'field_collection_view',
        ),
      ),
    );
    field_create_instance($instance);
  }

  // Add a status field to the line items.
  // @todo: Move to the commerce_partial_payment module when it exists.
  if (!field_info_field('commerce_line_item_status')) {
    $field = array(
      'field_name' => 'commerce_line_item_status',
      'type' => 'list_text',
      'settings' => array(
        'allowed_values' => array(
          'pending' => 'Pending',
          'deposit_paid' => 'Deposit Paid',
          'paid_in_full' => 'Paid in Full',
          'cancelled' => 'Cancelled',
        ),
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }
  if (!field_info_instance('commerce_line_item', 'commerce_line_item_status', 'commerce_booking_accommodation')) {
    $instance = array(
      'label' => $t('Status'),
      'field_name' => 'commerce_line_item_status',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_accommodation',
      'default_value' => array(
        array('value' => 'pending'),
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add a description field to accommodation types.
 */
function commerce_booking_accommodation_update_7001() {
  // Create a description field for the accomodation type.
  if (!field_info_field('commerce_booking_accom_desc')) {
    $field = array(
      'type' => 'text_long',
      'field_name' => 'commerce_booking_accom_desc',
      'cardinality' => 1,
    );
    field_create_field($field);
  }
  if (!field_info_instance('commerce_booking_accom_type', 'commerce_booking_accom_desc', 'villa')) {
    $instance = array(
      'entity_type' => 'commerce_booking_accom_type',
      'bundle' => 'villa',
      'field_name' => 'commerce_booking_accom_desc',
      'label' => t('Description'),
      'description' => t('A brief description of the accommodation type.'),
      'widget' => array(
        'type' => 'text_textarea',
        'settings' => array(
          'rows' => 2,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add payments tracking field to the accommodation line item.
 */
function commerce_booking_accommodation_update_7002() {
  if (!field_info_instance('commerce_line_item', 'commerce_booking_ticket_payments', 'commerce_booking_accommodation')) {
    $instance = array(
      'field_name' => 'commerce_booking_ticket_payments',
      'label' => 'Payments',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_accommodation',
      'widget' => array(
        'type' => 'field_collection_hidden',
      ),
      'display' => array(
        'default' => array(
          'type' => 'field_collection_view',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add a status field to accommodation line items.
 */
function commerce_booking_accommodation_update_7003() {
  $t = get_t();

  // Add a status field to the line items.
  // @todo: Move to the commerce_partial_payment module when it exists.
  if (!field_info_field('commerce_line_item_status')) {
    $field = array(
      'field_name' => 'commerce_line_item_status',
      'type' => 'list_text',
      'settings' => array(
        'allowed_values' => array(
          'pending' => 'Pending',
          'deposit_paid' => 'Deposit Paid',
          'paid_in_full' => 'Paid in Full',
          'cancelled' => 'Cancelled',
        ),
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_line_item', 'commerce_line_item_status', 'commerce_booking_accommodation')) {
    $instance = array(
      'label' => $t('Status'),
      'field_name' => 'commerce_line_item_status',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'commerce_booking_accommodation',
      'default_value' => array(
        array('value' => 'pending'),
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Update the entityreference field to use our new handler.
 */
function commerce_booking_accommodation_update_7004() {
  if ($field = field_info_field('cba_accommodation_type')) {
    $field['settings']['handler'] = 'commerce_booking_event';
    $field['settings']['handler_settings']['referencing_entity'] = array('order', 'commerce_booking_event');
    field_update_field($field);
  }
}
