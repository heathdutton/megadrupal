<?php

/**
 * @param      $severity
 * @param      $type
 * @param      $message
 * @param      $record
 * @param bool $alert
 */
function youtrack_issue($severity, $type, $message, $record, $alert = FALSE) {
  if (!$alert &&
    variable_get('youtrack_info', FALSE) &&
    ($severity <= variable_get('youtrack_info_severity', WATCHDOG_ERROR))) {
    $set = 'info';
  }
  else if ($alert &&
    variable_get('youtrack_alert', FALSE) &&
    ($severity <= variable_get('youtrack_alert_severity', WATCHDOG_ERROR))) {
    $set = 'alert';
  }
  else {
    return;
  }
  _youtrack_submit_issue(
    $set,
    $severity,
    $type,
    $message,
    $record
  );
}

/**
 * Implements hook_watchdog().
 */
function youtrack_watchdog(array $log_entry) {
  if (variable_get('youtrack_watchdog', FALSE) &&
    ($log_entry['severity'] <= variable_get('youtrack_watchdog_severity', WATCHDOG_ERROR))) {
    _youtrack_submit_issue(
      'watchdog',
      $log_entry['severity'],
      $log_entry['type'],
      t($log_entry['message'], $log_entry['variables']),
      $log_entry
    );
  }
}

/**
 * Implement hook_mail().
 */
function youtrack_mail($key, &$message, $params) {
  switch ($key) {
    case 'submit_issue_fallback':
      $message['subject'] = $params['type'];
      $message['body'][] = print_r($params, TRUE);
      break;
  }
}

/**
 * Implements hook_mail_alter().
 */
function youtrack_mail_alter(&$message) {
  if (variable_get('youtrack_contact', FALSE) &&
    ($message['module'] == 'contact') &&
    ($message['key'] == 'page_mail')) {
    _youtrack_submit_issue(
      'contact',
      variable_get('youtrack_contact_severity', WATCHDOG_INFO),
      $message['params']['category']['category'],
      $message['params']['message'],
      $message
    );
    $message['send'] = FALSE;
  }
}

/**
 * Implements hook_menu().
 */
function youtrack_menu() {
  $items = array();

  $items['admin/config/system/youtrack'] = array(
    'title' => 'YouTrack',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('youtrack_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'youtrack.admin.inc',
  );

  return $items;
}

function youtrack_rest_get_issue($id) {
  $result = _youtrack_rest_request('rest/issue/' . $id);
  if ($result->OK) {
    return $result->data;
  }
  return FALSE;
}

function youtrack_rest_get_projects($for_select = FALSE, $refresh = FALSE) {
  $projects = array();
  if ($for_select) {
    $projects['-'] = '- ' . t('Please select') . ' -';
  }
  $projects_detail = variable_get('youtrack_projects', array());
  if ($refresh || empty($projects_detail)) {
    $result = _youtrack_rest_request('rest/admin/project');
    if ($result->OK) {
      $xml = new SimpleXMLElement($result->data);
      foreach ($xml->xpath('/projectRefs/project') as $pid) {
        foreach ($pid->attributes() as $attr) {
          if ($attr->getName() == 'id') {
            $id = (string)$attr;
            $result = _youtrack_rest_request('rest/admin/project/' . $id);
            if ($result->OK) {
              $xml = new SimpleXMLElement($result->data);
              foreach ($xml->attributes() as $attr) {
                if ($attr->getName() == 'name') {
                  $projects[$id] = (string) $attr;
                  $projects_detail[$id] = array(
                    'name' => (string) $attr,
                    'fields' => array(),
                  );
                  $result = _youtrack_rest_request('rest/admin/project/' . $id . '/customfield');
                  if ($result->OK) {
                    $xml = new SimpleXMLElement($result->data);
                    foreach ($xml->xpath('/projectCustomFieldRefs/projectCustomField') as $pcf) {
                      foreach ($pcf->attributes() as $attr) {
                        if ($attr->getName() == 'name') {
                          $name = (string) $attr;
                          $result = _youtrack_rest_request('rest/admin/project/' . $id . '/customfield/' . $name);
                          if ($result->OK) {
                            $xml = new SimpleXMLElement($result->data);
                            $type = 'enum';
                            foreach ($xml->xpath('/projectCustomField') as $pcf) {
                              foreach ($pcf->attributes() as $attr) {
                                if ($attr->getName() == 'type') {
                                  $type = (string) $attr;
                                }
                              }
                            }
                            $projects_detail[$id]['fields'][$name] = array();
                            foreach ($xml->xpath('/projectCustomField/param') as $param) {
                              foreach ($param->attributes() as $attr) {
                                if ($attr->getName() == 'value') {
                                  $projects_detail[$id]['fields'][$name] = youtrack_rest_get_bundle((string)$attr, $type);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else {
    foreach ($projects_detail as $pid => $values) {
      $projects[$pid] = $values['name'];
    }

  }
  variable_set('youtrack_projects', $projects_detail);
  return $projects;
}

function youtrack_rest_get_bundle($name, $type) {
  if (strpos($type, 'enum') === 0) {
    return youtrack_rest_get_enumeration_bundle($name);
  }
  else if (strpos($type, 'state') === 0) {
    return youtrack_rest_get_state_bundle($name);
  }
  return FALSE;
}

function youtrack_rest_get_enumeration_bundle($name) {
  $result = _youtrack_rest_request('rest/admin/customfield/bundle/' . $name);
  if ($result->OK) {
    $xml = new SimpleXMLElement($result->data);
    $enum = array();
    foreach ($xml->xpath('/enumeration/value') as $bundle) {
      $enum[] = (string)$bundle;
    }
    return $enum;
  }
  return FALSE;
}

function youtrack_rest_get_state_bundles() {
  $result = _youtrack_rest_request('rest/admin/customfield/stateBundle');
  if ($result->OK) {
    $xml = new SimpleXMLElement($result->data);
    $bundles = array();
    foreach ($xml->xpath('/stateBundleRefs/stateBundle') as $bundle) {
      foreach ($bundle->attributes() as $attr) {
        if ($attr->getName() == 'name') {
          $bundles[] = (string)$attr;
        }
      }
    }
    return $bundles;
  }
  return FALSE;
}

function youtrack_rest_get_state_bundle($name) {
  $result = _youtrack_rest_request('rest/admin/customfield/stateBundle/' . $name);
  if ($result->OK) {
    $xml = new SimpleXMLElement($result->data);
    $states = array();
    foreach ($xml->xpath('/stateBundle/state') as $bundle) {
      $states[] = (string)$bundle;
    }
    return $states;
  }
  return FALSE;
}

function youtrack_rest_create_issue($project, $summary, $description, $commands = array()) {
  $params = array(
    'project' => $project,
    'summary' => $summary,
    'description' => $description,
  );
  $result = _youtrack_rest_request('rest/issue', $params, 'PUT', TRUE, 201, 'Created');
  if ($result->OK) {
    $id = array_pop(explode('/', $result->headers['location']));
    youtrack_rest_execute($id, $commands);
    return $id;
  }
  return FALSE;
}

function youtrack_rest_execute($id, array $commands, $notify = FALSE) {
  $path = 'rest/issue/' . $id . '/execute';
  foreach ($commands as $command) {
    $result = _youtrack_rest_request(
      $path,
      array(
        'command' => $command,
        'disableNotifications' => !$notify,
      ),
      'POST'
    );

  }
}

function _youtrack_check_server() {
  $url = variable_get('youtrack_base_url', '');
  if (empty($url)) {
    return FALSE;
  }
  return _youtrack_login();
}

/**
 * Determine the variable name for the cookie of this particular server. This needs to be dependant on the IP of
 * the current server, just in case you're working with several web-servers on the same domain but with different
 * IP addresses - then the cookies would be invalid for some calls.
 *
 * @return string
 */
function _youtrack_cookiename() {
  return 'youtrack_cookie_' . $_SERVER['SERVER_ADDR'];
}

/**
 * @return bool
 */
function _youtrack_login() {
  // Check if credentials are provided as parameters.
  $args = func_get_args();
  if (!empty($args) || count($args) == 3) {
    $path = $args[0] . '/';
    $username = $args[1];
    $password = $args[2];
  }
  else {
    $path = '';
    $username = variable_get('youtrack_username', '');
    $password = variable_get('youtrack_password', '');
  }
  $path .= 'rest/user/login';

  $result = _youtrack_rest_request(
    $path,
    array(
      'login' => $username,
      'password' => $password,
    ),
    'POST',
    FALSE
  );
  variable_del(_youtrack_cookiename());
  if ($result->OK) {
    variable_set(_youtrack_cookiename(), $result->headers['set-cookie']);
    return TRUE;
  }

  drupal_set_message(t('Can not connect to YouTrack server.'), 'error');
  return FALSE;
}

/**
 * @param        $path
 * @param array  $data
 * @param string $method
 * @param bool   $include_cookie
 * @param int    $expect_code
 * @param string $expect_status
 *
 * @return null|object
 */
function _youtrack_rest_request($path, $data = array(), $method = 'GET', $include_cookie = TRUE, $expect_code = 200, $expect_status = 'OK') {
  if (strpos($path, 'http://') === 0 || strpos($path, 'https://') === 0) {
    $url = $path;
  }
  else {
    $url = variable_get('youtrack_base_url', '') . '/' . $path;
  }
  $options = array(
    'headers' => array(
      'Connection' => 'keep-alive',
      'Content-Type' => 'application/x-www-form-urlencoded',
    ),
    'method' => $method,
    'data' => drupal_http_build_query($data),
  );
  if ($include_cookie) {
    $cookie = variable_get(_youtrack_cookiename(), '');
    if (empty($cookie)) {
      if (_youtrack_login()) {
        $cookie = variable_get(_youtrack_cookiename(), '');
      }
      else {
        return NULL;
      }
    }
    $options['headers']['Cookie'] = $cookie;
  }
  if (variable_get('youtrack_enabled', TRUE)) {
    $result = drupal_http_request($url, $options);
  }
  else {
    $result = (object) array(
      'code' => $expect_code,
      'status_message' => $expect_status,
    );
  }
  if ($result->code == 401) {
    if (_youtrack_login()) {
      return _youtrack_rest_request($path, $data, $method, $include_cookie, $expect_code, $expect_status);
    }
  }
  $result->OK = ($result->code == $expect_code && strtolower($result->status_message) == strtolower($expect_status));
  return $result;
}

/**
 * @param string  $set
 * @param int     $severity_orig
 * @param string  $type
 * @param string  $message
 * @param array   $record
 */
function _youtrack_submit_issue($set, $severity_orig, $type, $message, $record) {
  $projects = variable_get('youtrack_projects', array());
  $pid = variable_get('youtrack_' . $set . '_project', '');
  $project = $projects[$pid];
  $sfield = variable_get('youtrack_' . $set . '_project_field_for_severity', '');

  $diff = variable_get('youtrack_' . $set . '_severity', WATCHDOG_ERROR) - $severity_orig;
  $lowest = variable_get('youtrack_' . $set . '_project_field_' . $sfield, '');
  $severity = ($lowest >= $diff) ? $lowest - $diff : 0;

  $commands = array();
  foreach ($project['fields'] as $name => $values) {
    if (!empty($values)) {
      $value = ($name == $sfield) ? $severity : variable_get('youtrack_' . $set . '_project_field_' . $name, '');
      if (isset($values[$value])) {
        $commands[] = $name . ' ' . $values[$value];
      }
    }
  }
  foreach (explode('###', preg_replace('/(\r\n?|\n)/', '###', variable_get('youtrack_' . $set . '_commands', ''))) as $line) {
    $line = trim($line);
    if (!empty($line)) {
      $commands[] = $line;
    }
  }
  $type .=  ': ' . truncate_utf8(strip_tags($message), 36, TRUE, TRUE);
  $message .= '{code}' . print_r($record, TRUE) . '{code}';
  $id = youtrack_rest_create_issue(
    $pid,
    $type,
    $message,
    $commands);
  if (!$id) {
    // Fallback: send as email.
    $email = variable_get('youtrack_email', '');
    $params = array(
      'pid' => $pid,
      'type' => $type,
      'message' => $message,
      'commands' => $commands,
    );
    if (!empty($email)) {
      drupal_mail('youtrack', 'submit_issue_fallback', $email, language_default(), $params);
    }
  }
}
