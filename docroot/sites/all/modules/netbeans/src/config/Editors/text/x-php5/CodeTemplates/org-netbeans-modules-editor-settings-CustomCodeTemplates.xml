<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE codetemplates PUBLIC "-//NetBeans//DTD Editor Code Templates settings 1.0//EN" "http://www.netbeans.org/dtds/EditorCodeTemplates-1_0.dtd">
<codetemplates>
    <codetemplate abbreviation="cdata" xml:space="preserve">
        <code><![CDATA[<!--//<![CDATA[
	${cursor}
//]]]]><![CDATA[>-->]]></code>
    </codetemplate>
    <codetemplate abbreviation="update_n" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_update_N().
 */
function ${name newVarName default="hook"}_update_${selection}${cursor}() {
  ${cursor}
  return t('');
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="settings" xml:space="preserve">
        <code><![CDATA[/**
 * Form callback
 */
function ${name newVarName default="module"}_settings_form${cursor}() {
  $form = array();

  $form['${cursor}'] = array(
    '#type' => 'textfield',
    '#name' => '',
    '#title' => t(''),
    '#description' => t(''),
    '#default_value' => variable_get('', ''),
    '#weight' => '0',
  );

  return system_settings_form($form);
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="enable" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_enable().
 */
function ${name newVarName default="hook"}_enable() {
  ${selection}${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="field_formatter_view" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_field_formatter_view().
 */
function ${name newVarName default="module"}_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();

  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => $item['value'],
    );
  }

  return $elements;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="float" xml:space="preserve">
        <code><![CDATA[      '${cursor}' => array(
        'description' => '',
        'type' => 'float',
        'size' => 'normal', // tiny, small, medium, big, normal
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0.0,
      ),]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_view" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_view().
 */
function ${name newVarName default="module"}_node_view($node, $view_mode, $langcode) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="schema" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_schema().
 *
 * Available data types:
 * @link http://drupal.org/node/159605
 */
function ${name newVarName default="hook"}_schema() {
  $schema['${name}'] = array(
    'description' => '${selection}${cursor}',
    'fields' => array(
      'id' => array(
        'description' => 'id - primary key',
        'type'        => 'serial',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
      ),
      '' => array(
        'description' => '',
        'type'        => 'int',
        'size'        => 'normal',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      '' => array(
        'description' => '',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      '' => array(
        'description' => '',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'default' => '',
      ),
    ),
    'primary key'     => array('id'),
    'indexes' => array(
      'index_name' => array('key'),
    ),
  );
  return $schema;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="cron" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_cron().
 */
function ${name newVarName default="module"}_cron() {
  ${selection}${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="help" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_help().
 */
function ${name newVarName default="module"}_help($path, $arg) {
  switch ($path) {
    case 'admin/help#':
      return t('${selection}${cursor}');
    case 'user/help#':
      return t('');
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_validate" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_validate().
 */
function ${name newVarName default="module"}_node_validate($node, $form, &$form_state) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="user_update" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_user_update().
 */
function ${name newVarName default="module"}_user_update(&$edit, &$account, $category) {

}]]></code>
    </codetemplate>
    <codetemplate abbreviation="form_id_alter" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_form_FORM_ID_alter().
 */
function ${name newVarName default="module"}_form_${cursor}_alter(&$form, &$form_state) {
  krumo($form, $form_state);die;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="field_formatter_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_field_formatter_info().
 */
function ${name newVarName default="module"}_field_formatter_info() {
  return array(
    '${name}' => array(
      'label' => t('${name}'),
      'description' => t('${name}'),
      'field types' => array('number_integer'),
    ),
  );
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="dac" xml:space="preserve">
        <code><![CDATA[drupal_add_css(drupal_get_path('module', '${name newVarName default="module"}') . '/css/${name}.css');]]></code>
    </codetemplate>
    <codetemplate abbreviation="text" xml:space="preserve">
        <code><![CDATA[      '${cursor}' => array(
        'description' => '',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'default' => '',
      ),]]></code>
    </codetemplate>
    <codetemplate abbreviation="user_login" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_user_login().
 */
function ${name newVarName default="module"}_user_login(&$edit, &$account) {

}]]></code>
    </codetemplate>
    <codetemplate abbreviation="block_configure" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_block_configure().
 */
function ${name newVarName default="module"}_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case '${name}':
      ${cursor}
      break;
  }

  return $form;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="variable_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_variable_info().
 */
function ${name newVarName default="module"}_variable_info() {
  $variables = array();

  $variables['${name}'] = array(
    'title' => t('${name}'),
    'default' => '',
    'group' => '${name}',
    'token' => FALSE,
  );

  return $variables;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="int" xml:space="preserve">
        <code><![CDATA[      '${cursor}' => array(
        'description' => '',
        'type' => 'int',
        'size' => 'normal', // tiny, small, medium, big, normal
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_insert" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_insert().
 */
function ${name newVarName default="module"}_node_insert($node) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="menu" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_menu().
 */
function ${name newVarName default="module"}_menu() {
  $items = array();

  $items['${name}'] = array(
    'title' => '${name}',
    'description' => '${name}',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('${name}_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ${name}'),
    'weight' => 0,
    'menu_name' => 'Navigation',
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="init" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_init().
 */
function ${name newVarName default="module"}_init() {
  drupal_add_js(drupal_get_path('module', '${name}') . '/js/${name}.js');
  drupal_add_css(drupal_get_path('module', '${name}') . '/css/${name}.css');
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="permission" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_permission().
 */
function ${name newVarName default="module"}_permission() {
  return array(
    'administer ${name}' => array(
      'title' => t('Administer ${name}'),
      'description' => t('Configure ${name} module'),
    ),
  );
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_view_alter" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_view_alter().
 */
function ${name newVarName default="module"}_node_view_alter(&$build) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="dai" xml:space="preserve">
        <code><![CDATA[  $script = <<<JS
    ${cursor}
JS;
  drupal_add_js($script, 'inline');]]></code>
    </codetemplate>
    <codetemplate abbreviation="kr" xml:space="preserve">
        <code><![CDATA[include_once drupal_get_path('module', 'devel') . '/krumo/class.krumo.php';
krumo(${selection}${cursor});]]></code>
    </codetemplate>
    <codetemplate abbreviation="daj" xml:space="preserve">
        <code><![CDATA[drupal_add_js(drupal_get_path('module', '${name newVarName default="module"}') . '/js/${name}.js');]]></code>
    </codetemplate>
    <codetemplate abbreviation="table" xml:space="preserve">
        <code><![CDATA[  $schema['${name newVarName default="table"}'] = array(
    'description' => '${selection}${cursor}',
    'fields' => array(
      'id' => array(
        'description' => 'id - primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      '' => array(
        'description' => '',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      '' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      '' => array(
        'description' => '',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'default' => '',
      ),
    ),
    'primary key'     => array('id'),
    'indexes' => array('index_name' => array('key')),
  );]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_presave" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_presave().
 */
function ${name newVarName default="module"}_node_presave($node) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="das" xml:space="preserve">
        <code><![CDATA[drupal_add_js(array(
  '${name newVarName default="module"}' => array(
    'var1' => TRUE,
  )
), 'setting');]]></code>
    </codetemplate>
    <codetemplate abbreviation="user_delete" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_user_delete().
 */
function ${name newVarName default="module"}_user_delete(&$edit, &$account, $category) {

}]]></code>
    </codetemplate>
    <codetemplate abbreviation="user_insert" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_user_insert().
 */
function ${name newVarName default="module"}_user_insert(&$edit, &$account, $category) {

}]]></code>
    </codetemplate>
    <codetemplate abbreviation="entity_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_entity_info().
 */
function ${name newVarName default="module"}_entity_info() {
  $info = array();

  // ${name} Type entity.
  $info['${name}_type'] = array(
    'label' => t('${name} type'),
    'plural label' => t('${name} types'),
    'entity class' => '${name}Type',
    'controller class' => '${name}TypeController',
    'base table' => '${name}_type',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
    ),
    'bundles' => array(),
    'bundle of' => '${name}',
    'access callback' => '${name}_type_access',
    'module' => '${name}',
    // Enable the Entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/${name}',
      'file' => '${name}.admin.inc',
      'controller class' => '${name}TypeUIController',
    ),
  );

  // ${name} entity.
  $info['${name}'] = array(
    'label' => t('${name}'),
    'plural label' => t('${name}s'),
    'entity class' => '${name}',
    'controller class' => '${name}Controller',
    'base table' => '${name}',
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'entity keys' => array(
      'id' => 'eid', // Replace this value with you Primary Key.
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => '${name}_access',
    'module' => '${name}',
//    'metadata controller class' => '${name}MetadataController',
//    'views controller class' => '${name}ViewsController',
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $entity_types = db_select('${name}_type', 'type')
    ->fields('type')
    ->execute()
    ->fetchAllAssoc('name');

  foreach ($entity_types as $type_name => $type) {
    $info['${name}']['bundles'][$type_name] = array(
      'label' => $type->label,
      'description' => $type->description,
      'admin' => array(
        // Make sure these paths are correct!
        'path' => 'admin/structure/${name}/manage/%subs_type',
        'real path' => 'admin/structure/${name}/manage/' . $type->name,
        'bundle argument' => 4,
        'access arguments' => array('administer ${name} types'),
      ),
    );
  }

  // Support entity cache module.
  if (module_exists('entitycache')) {
    $info['${name}']['entity cache'] = TRUE;
    // Entity cache obsoletes field cache.
    $info['${name}']['field cache'] = FALSE;
  }

  return $info;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="user_presave" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_user_presave().
 */
function ${name newVarName default="module"}_user_presave(&$edit, &$account, $category) {

}]]></code>
    </codetemplate>
    <codetemplate abbreviation="cron_queue_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_cron_queue_info().
 */
function ${name newVarName default="module"}_cron_queue_info() {
  $queues['${name}'] = array(
    '${name}' => '${cursor}',
    'time' => 60,
  );
  return $queues;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="views_api" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_views_api().
 */
function ${name newVarName default="module"}_views_api() {
  return array(
    'version' => '3.0',
  );
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="block" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_block().
 */
function ${name newVarName default="module"}_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        'block' => array(
          'info' => t('Title of block #1'),
          'cache' => BLOCK_CACHE_GLOBAL,
          'status' => TRUE,
          'visibility' => 1,
          'weight' => 0,
          'region' => '',
          'pages' => '',
        ),
      );
      break;
    case 'configure':
      $form = array();
      switch ($delta)  {
        case 'block':
          # form code
          break;
      }
      return $form;
    case 'save':
      switch ($delta)  {
        case 'block':
          # form code
          break;
      }
      break;
    case 'view':
    default:
      switch ($delta) {
        case 'block':
          $block = array(
            'subject' => t('Title of block #1'),
            'content' => 'Content of block #1'
          );
          break;
      }
      return $block;
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_delete" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_delete().
 */
function ${name newVarName default="module"}_node_delete($node) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="perm" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_perm().
 */
function ${name newVarName default="module"}_permission() {
  return array(
    'administer ${name}',
  );
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_submit" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_submit().
 */
function ${name newVarName default="module"}_node_submit($node, $form, &$form_state) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="block_view" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_block_view().
 */
function ${name newVarName default="module"}_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case '${name}':
      $block['subject'] = t('${name}');
      $block['content'] = '${cursor}';
      break;
  }

  return $block;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="uninstall" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_uninstall().
 */
function ${name newVarName default="module"}_uninstall() {
  $result = db_select('variable', 'v')
              ->fields('v', array('name'))
              ->condition('name', '${name}_%', '=')
              ->execute();


  foreach ($result as $row) {
    variable_del($row->name);
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="nodeapi" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_nodeapi().
 */
function ${name newVarName default="hook"}_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case '${selection}${cursor}':

    break;
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="disable" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_disable().
 */
function ${name newVarName default="module"}_disable() {
  ${selection}${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="fieldset" xml:space="preserve">
        <code><![CDATA[    '#type' => 'fieldset',
    '#description' => t('${cursor}'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,]]></code>
    </codetemplate>
    <codetemplate abbreviation="varchar" xml:space="preserve">
        <code><![CDATA[      '${cursor}' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),]]></code>
    </codetemplate>
    <codetemplate abbreviation="install" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_install().
 */
function ${name newVarName default="module"}_install() {
  db_update('system')
    ->fields(array('weight' => 99))
    ->condition('name', '${name}', '=')
    ->execute();
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="block_save" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_block_save().
 */
function ${name newVarName default="module"}_block_save($delta = '', $edit = array()) {
  switch($delta} {
    case '${name}':

      break;
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="preprocess_page" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_preprocess_page().
 */
function ${name newVarName default="module"}_preprocess_page(&$variables) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="theme" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_theme().
 */
function ${name newVarName default="module"}_theme($existing, $type, $theme, $path) {
  return array(
    '${name}${selection}${cursor}' => array(
      'template' => 'templates/${name}',
      'arguments' => array('foo' => NULL),${selection}${cursor}
    ),
  );
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_update" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_update().
 */
function ${name newVarName default="module"}_node_update($node) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="node_prepare" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_node_prepare().
 */
function ${name newVarName default="module"}_node_prepare($node) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="block_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_block_info().
 */
function ${name newVarName default="module"}_block_info() {
  return array(
    '${name}' => array(
      'info' => '${cursor}',
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="tpl" xml:space="preserve">
        <code><![CDATA['${name newVarName default="template"}' => array(
  'template' => 'templates/${name}',
  'arguments' => array('foo' => NULL),
),]]></code>
    </codetemplate>
    <codetemplate abbreviation="callback" xml:space="preserve">
        <code><![CDATA[  $items['${name newVarName default="module"}'] = array(
    'title' => '${name}',
    'page callback' => '${name}',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );]]></code>
    </codetemplate>
    <codetemplate abbreviation="form_alter" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_form_alter().
 */
function ${name newVarName default="module"}_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === '${cursor}') {
    krumo($form, $form_state);die;
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="variable" xml:space="preserve">
        <code><![CDATA[  $variables['${cursor}'] = array(
    'title' => t(''),
    'default' => '',
    'group' => '',
    'token' => FALSE,
  );]]></code>
    </codetemplate>
    <codetemplate abbreviation="user" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_user().
 */
function ${name newVarName default="module"}_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case ${selection}${cursor}:

      break;
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="menu_alter" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_menu_alter().
 */
function ${name newVarName default="module"}_menu_alter(&$items) {
  ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="entity" xml:space="preserve">
        <code><![CDATA[// Entity Type schema.
$schema['entity_type'] = array( // @TODO Replace this with the entity type's base_table.
  'description' => 'Stores information about all defined entity types.', // @TODO Complement this with your entity's name.
  'fields' => array(
    // This is required for the type to be exportable.
    'id' => array(
      'type' => 'serial',
      'not null' => TRUE,
      'description' => 'Primary Key: Unique entity type ID.',
    ),
    'name' => array(
      'description' => 'The machine-readable name of this entity type.',
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
    ),
    'label' => array(
      'description' => 'The human-readable name of this entity type.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ),
    'weight' => array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'size' => 'tiny',
      'description' => 'The weight of this entity type in relation to others.',
    ),
    'data' => array(
      'type' => 'text',
      'not null' => FALSE,
      'size' => 'big',
      'serialize' => TRUE,
      'description' => 'A serialized array of additional data related to this entity type.',
    ),
    'status' => array(
      'type' => 'int',
      'not null' => TRUE,
      // Set the default to ENTITY_CUSTOM without using the constant as it is
      // not safe to use it at this point.
      'default' => 0x01,
      'size' => 'tiny',
      'description' => 'The exportable status of the entity.',
    ),
    'module' => array(
      'description' => 'The name of the providing module if the entity has been defined in code.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    ),
    'description' => array(
      'description' => 'A brief description of this entity type.',
      'type' => 'text',
      'not null' => TRUE,
      'size' => 'medium',
      'translatable' => TRUE,
    ),
  ),
  'primary key' => array('id'),
  'unique keys' => array(
    'name' => array('name'),
  ),
);

// Entity schema.
$schema['entity'] = array( // @TODO Replace this with your entity's base_table.
  'description' => 'Stores entities of type: entity.', // @TODO Complement this with your entity's name.
  'fields' => array(
    'eid' => array( // @TODO Replace this with your entity's Primary Key.
      'type' => 'serial',
      'not null' => TRUE,
      'description' => 'Primary Key: Unique Entity ID.'
    ),
    'type' => array(
      'description' => 'The {entity_type}.name of this entity.', // @TODO Replace this with the entity type's base_table.
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
    ),
//    'author' => array(
//      'type' => 'int',
//      'unsigned' => TRUE,
//      'not null' => FALSE,
//      'default' => NULL,
//      'description' => "The {users}.uid of the entity's author.",
//    ),
//    'created' => array(
//      'description' => 'The Unix timestamp when the entity was created.',
//      'type' => 'int',
//      'not null' => FALSE,
//    ),
//    'changed' => array(
//      'description' => 'The Unix timestamp when the entity was most recently saved.',
//      'type' => 'int',
//      'not null' => FALSE,
//    ),
  ),
  'indexes' => array(
//    'uid' => array('uid'),
  ),
  'foreign keys' => array(
//    'uid' => array(
//      'table' => 'users',
//      'columns' => array('uid' => 'uid'),
//    ),
    'type' => array(
      'table' => 'entity_type', // @TODO Replace this with the entity type's base_table.
      'columns' => array('type' => 'name'),
    ),
  ),
  'primary key' => array('eid'), // @TODO Replace this with your entity's Primary Key.
);]]></code>
    </codetemplate>
    <codetemplate abbreviation="views_data_alter" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_views_data_alter().
 */
function ${name newVarName default="module"}_views_data_alter(&$data) {

}]]></code>
    </codetemplate>
    <codetemplate abbreviation="views_data" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_views_data().
 */
function ${name newVarName default="module"}_views_data() {
  $data = array();

  // Add your tables here.

  return $data;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="rules_access" xml:space="preserve">
        <code><![CDATA[/**
 * Rules Access callback.
 *
 * @see ${name}_rules_event_info()
 * @see ${name}_rules_action_info()
 */
function ${name newVarName default="module"}_rules_access($type, $name) {
  if ($type == 'event' || $type == 'condition') {
    return user_access('administer ${name}');
  }
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="rules_event_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_rules_event_info().
 *
 * Define rules events.
 */
function ${name newVarName default="module"}_rules_event_info() {
  $events = array();

  // For convenience.
  $defaults = array(
    'group' => t('${name}'), // @TODO Define your group.
    'access callback' => '${name}_rules_access',
    // @TODO Complement this or get rid of it.
    'variables' => array(
      '${name}' => array(
        'label' => t('Describe this variable'),
        'type' => '${name}',
        'skip save' => TRUE,
      ),
      // @TODO Define other provided variables here.
    ),
  );

  // Event description.
  $events['${name}_event'] = array( // @TODO Replace this with your event's machine_name.
    'label' => t('${name} event'), // @TODO Replace this with your event's label.
    ) + $defaults;

  // Define other events here following the above pattern.

  return $events;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="rules_condition_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_rules_condition_info().
 *
 * Define rules conditions.
 */
function ${name newVarName default="module"}_rules_condition_info() {
  $conditions = array();

  $conditions['${name}_status'] = array(
    'group' => t('${name}'), // @TODO Define your group.
    'label' => t("${name} condition"), // @TODO Replace this with your condition's label.
    'base' => '${name}_condition_foo', // @TODO Specify the name of the callback function that will evaluate this condition.
    // @TODO Complement this or get rid of it.
    'parameter' => array(
      '${name}' => array( // @TODO Replace this with the parameter's name. This will be passed as an argument to the callback function.
        'type' => '${name}', // @TODO Replace this with the parameter's type; it can be an entity type or primary data type (integer, etc)
        'label' => t('${name} object'), // @TODO Replace this with the parameter's label.
        'save' => FALSE, // This is only for objects.
//        'options list' => 'subs_status_options_list', // Use this if you want to specify a list of values to choose from.
//        'restriction' => 'input', // Use this to disallow the advanced Data Selector (useful for picking a value from a predefined list).
      ),
      // @TODO Define other paramaters here.
    ),
  );

  return $conditions;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="rules_action_info" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_rules_action_info().
 *
 * Define rules actions.
 */
function ${name newVarName default="module"}_rules_action_info() {
  $actions = array();

  // For convenience.
  $defaults = array(
    'group' => t('${name}'), // @TODO Define your group.
    'access callback' => '${name}_rules_access',
    // @TODO Complement this or get rid of it.
    'parameter' => array(
      '${name}' => array( // @TODO Replace this with the parameter's name. This will be passed as an argument to the callback function.
        'type' => '${name}', // @TODO Replace this with the parameter's type; it can be an entity type or primary data type (integer, etc)
        'label' => t('${name} object'), // @TODO Replace this with the parameter's label.
        'save' => FALSE,
      ),
      // @TODO Define other paramaters here.
    ),
  );

  // Action description.
  $actions['${name}_action'] = array( // @TODO Replace this with your action's machine_name.
    'label' => t('${name} action'), // @TODO Replace this with your action's label.
    'base' => '${name}_action_foo', // @TODO Specify the name of the callback function that will execute this action.
    ) + $defaults;

  // Define other actions here using the above pattern.

  return $actions;
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="rules_invoke" xml:space="preserve">
        <code><![CDATA[    // Invoke rules event.
    if (module_exists('rules')) {
      // @TODO specify any variable types and, if the object is available, pass it as the optional $data parameter.
      $variable = entity_metadata_wrapper($type, $data);
      rules_invoke_event('foo', $variable);
    }]]></code>
    </codetemplate>
    <codetemplate abbreviation="behavior" xml:space="preserve">
        <code><![CDATA[Drupal.behaviors.${cursor} = {
  attach: function(context, settings) {

  }
};]]></code>
    </codetemplate>
    <codetemplate abbreviation="closure" xml:space="preserve">
        <code><![CDATA[(function($, Drupal){
  // Use strict mode to reduce development errors.
  // @link http://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/
  "use strict";

  ${cursor}
})(jQuery, Drupal);]]></code>
    </codetemplate>
    <codetemplate abbreviation="ready" xml:space="preserve">
        <code><![CDATA[jQuery(document).ready(function($){
  ${cursor}
});]]></code>
    </codetemplate>
    <codetemplate abbreviation="load" xml:space="preserve">
        <code><![CDATA[$(window).load(function(){
  ${cursor}
});]]></code>
    </codetemplate>
    <codetemplate abbreviation="dump" xml:space="preserve">
        <code><![CDATA[var_dump(${cursor});]]></code>
    </codetemplate>
    <codetemplate abbreviation="exit" xml:space="preserve">
        <code><![CDATA[/**
 * Implements hook_exit().
 */
function ${name newVarName default="module"}_exit($destination) {

}]]></code>
    </codetemplate>
    <codetemplate abbreviation="unique" xml:space="preserve">
        <code><![CDATA[
    'unique_keys' => array(
      'column_name' => array('key'),
    ),
]]></code>
    </codetemplate>
    <codetemplate abbreviation="fk" xml:space="preserve">
        <code><![CDATA[
    'foreign_keys' => array(
      'column_name' => array(
        'table' => 'target_table',
        'columns' => array(
          'source_column' => 'target_column',
        )
      ),
    ),
]]></code>
    </codetemplate>
<!-- Empty code template to ease creating new ones -->
<!--     <codetemplate abbreviation="foo" xml:space="preserve">
        <code><![CDATA[

]]></code>
    </codetemplate> -->
</codetemplates>
