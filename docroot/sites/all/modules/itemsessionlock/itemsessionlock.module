<?php

/**
 * @file
 * Tie an item to a user session to prevent concurrent access.
 */
/**
 * Default maximum time to keep alock, if lock clearing is enabled.
 */
define('ITEMSESSIONLOCK_MAX_LIFETIME', max(ini_get('session.gc_maxlifetime'), ini_get('session.cookie_lifetime')));

/**
 * Set a lock on a session.
 * @param string $module name of the calling module.
 * @param string $type of the locked item.
 * @param string $iid unique identifier for the item to lock.
 * @param $data arbitrary data to serialize.
 *
 * @return
 * Bool, TRUE on success (or if locks belongs to same user session), FALSE is lock already exists.
 */
function itemsessionlock_set($module, $type, $iid, $data = NULL) {
  global $user;
  $lock = itemsessionlock_get($module, $type, $iid);
  if ($lock) {
    //@todo What to do with ssid ?
    if ($user->sid == $lock->sid) {
      return TRUE;
    }
    return FALSE;
  }

  $lock = new stdClass();
  $lock->module = $module;
  $lock->type = $type;
  $lock->iid = $iid;
  $lock->uid = $user->uid;
  $lock->sid = $user->sid;
  $lock->ssid = $user->ssid;
  $lock->timestamp = REQUEST_TIME;
  if ($data) {
    $lock->data = serialize($data);
  }
  drupal_write_record('itemsessionlock', $lock);
  return TRUE;
}

/**
 * Release a lock on a session.
 * @param string $module name of the calling module.
 * @param string $type of the locked item.
 * @param string $iid unique identifier for the item to lock.
 * @return
 * Bool. Whether lock has been acquired or not.
 */
function itemsessionlock_clear($module, $type, $iid) {
  return db_query("DELETE FROM {itemsessionlock} WHERE module=:module AND iid=:iid AND type=:type", array(':module' => $module, ':iid' => $iid, ':type' => $type));
}

/**
 * Check wether a lock is available.
 * @param string $module name of the calling module.
 * @param string $type of the locked item.
 * @param string $iid unique identifier for the item to lock.
 *
 * @return
 * The lock data, if one.
 */
function itemsessionlock_get($module, $type, $iid) {
  $lock = db_query("SELECT * FROM {itemsessionlock} WHERE module=:module AND iid=:iid AND type=:type", array(':module' => $module, ':iid' => $iid, ':type' => $type))->fetchObject();
  if ($lock && !empty($lock->data)) {
    $lock->data = unserialize($lock->data);
  }
  return $lock;
}

/**
 * Implements hook_menu().
 */
function itemsessionlock_menu() {
  $items = array();
  // Do nothing if no one implements this.
//  if (!count(module_implements('itemsessionlock_info'))) {
//    return $items;
//  }
  // Defines lock breaking entries.
  foreach (module_implements('itemsessionlock_info') as $module) {
    $function = $module . '_itemsessionlock_info';
    $info = $function();
    foreach ($info as $type => $implement) {
      if (!isset($implement['menu']) || $implement['menu']) {
        $items['itemsessionlock/' . $module . '/' . $type . '/break/own/%'] = array(
          'page callback' => 'itemsessionlock_break_lock',
          'page arguments' => array(1, 2, 5),
          'access callback' => TRUE, // Check on user is made on callback.
        );
        $items['itemsessionlock/' . $module . '/' . $type . '/break/any/%'] = array(
          'page callback' => 'itemsessionlock_break_lock',
          'page arguments' => array(1, 2, 5, 4),
          'access arguments' => array('break any ' . $module . ' ' . $type . ' locks'),
          'access callback' => 'itemsessionlock_break_lock_access',
        );
      }
    }
  }
  $items['admin/config/people/itemsessionlock'] = array(
    'title' => 'Session locks',
    'description' => 'Manage sessions locks expiration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itemsessionlock_expire_config_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => 11,
  );
  return $items;
}

/**
 * Access callback for the breaking of locks.
 */
function itemsessionlock_break_lock_access($permission) {
  return (user_access($permission) || user_access('break any session lock'));
}

/**
 * Implements hook_permission().
 */
function itemsessionlock_permission() {
  $perms = array();
  foreach (module_implements('itemsessionlock_info') as $module) {
    $function = $module . '_itemsessionlock_info';
    $info = $function();
    foreach ($info as $type => $implement) {
      if (!isset($implement['permission']) || $implement['permission']) {
        $perms['break any ' . $module . ' ' . $type . ' locks'] = array(
          'title' => t('Break any locks on @type items', array('@type' => $implement['label'])),
          'description' => t('Break locks defined by @module on @type locked by any user.', array('@module' => $module, '@type' => $implement['label'])),
        );
      }
    }
  }
  // Global admin rights.
  $perms['break any session lock'] = array(
    'title' => t('Break any locks'),
    'description' => t('Break locks defined by any module implementing itemsessionlock.'),
  );
  return $perms;
}

/**
 * Implements hook_cron().
 */
function itemsessionlock_cron() {
  foreach (module_implements('itemsessionlock_info') as $module) {
    $function = $module . '_itemsessionlock_info';
    $info = $function();
    foreach ($info as $type => $implement) {
      if (!isset($implement['cron']) || $implement['cron']) {
        $lifetime = variable_get('itemsessionlock_expire_' . $module . '_' . $type, ITEMSESSIONLOCK_MAX_LIFETIME);
        db_delete('itemsessionlock')->condition('timestamp', REQUEST_TIME - $lifetime, '<')->execute();
      }
    }
  }
}

/**
 * Try to lock an item for editing.
 * @param string $module name.
 * @param string $type implementation item.
 * @param string $iid item unique identifier.
 * @param string $redirect a path to redirect to if lock can't be acquired.
 */
function itemsessionlock_item_ensure_lock($module, $type, $iid, $redirect = NULL) {
  // Check for conflicts.
  if (!itemsessionlock_set($module, $type, $iid)) {
    // Get info from implementation to fetch label.
    $function = $module . '_itemsessionlock_info';
    $info = $function();
    $label = $info[$type]['label'];
    $lock = itemsessionlock_get($module, $type, $iid);
    //If user if the same using a different session, let him delete the lock directly.
    global $user;
    if ($user->uid == $lock->uid) {
      $message = t('This @item is already locked by yourself, using another session. This can occur if you started editing it on another device or browser, or your session has expired since then. You can click here to !break, but your changes will be lost.', array('@item' => $label, '!break' => l(t('break the lock'), 'itemsessionlock/' . $module . '/' . $type . '/break/own/' . $iid, array('query' => array('destination' => current_path())))));
    }
    else {
      // Else needs perms.
      $account = user_load($lock->uid);
      $message = t('This @item is already being edited by user !user, and is locked.', array('@item' => $label, '!user' => l($account->name, 'user/' . $account->uid)));
      if (user_access('break any ' . $module . ' ' . $type . ' locks')) {
        $message .= ' ' . t('You can click here to !break, at the risk at loosing his work in progress.', array('!break' => l(t('break the lock'), 'itemsessionlock/' . $module . '/' . $type . '/break/any/' . $iid, array('query' => array('destination' => current_path())))));
      }
    }
    drupal_set_message($message, 'warning');
    if ($redirect) {
      drupal_goto($redirect);
    }
  }
}

/**
 * Breaks a lock on a given item.
 * @param string $module defining the lock.
 * @param string $type of the locked item.
 * @param string $iid identifier of the lock.
 * @param string $any do not check on lock owner.
 */
function itemsessionlock_break_lock($module, $type, $iid, $any = '') {
  if ($any !== 'any') {
    $lock = itemsessionlock_get($module, $type, $iid);
    global $user;
    if (!$lock || $lock->uid != $user->uid) {
      return drupal_access_denied();
    }
  }
  itemsessionlock_clear($module, $type, $iid);
  $dest = drupal_get_destination();
  drupal_set_message(t('Lock as been removed.'));
  drupal_goto($dest['destination']);
}

/**
 * Implements hook_views_api().
 */
function itemsessionlock_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Configuration form for expiration settings.
 */
function itemsessionlock_expire_config_form($form, &$form_state) {
  foreach (module_implements('itemsessionlock_info') as $module) {
    $function = $module . '_itemsessionlock_info';
    $info = $function();
    $module_info = system_get_info('module', $module);
    foreach ($info as $type => $implement) {
      $form[$module] = array(
        '#type' => 'fieldset',
        '#title' => check_plain($module_info['name']),
      );
      $form[$module]['itemsessionlock_expire_' . $module . '_' . $type] = array(
        '#type' => 'textfield',
        '#title' => t('Delete old @type locks.', array('@type' => $implement['label'])),
        '#description' => t('Remove locks entries from database on cron run if they are older than the specified time.'),
        '#default_value' => variable_get('itemsessionlock_expire_' . $module . '_' . $type, ITEMSESSIONLOCK_MAX_LIFETIME),
        '#element_validate' => array('element_validate_integer_positive'),
        '#field_suffix' => t('seconds'),
      );
    }
  }
  return $form;
}
