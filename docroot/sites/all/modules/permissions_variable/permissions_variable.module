<?php
/**
 * @file
 * Permissions Variable module.
 */

// Include constants.
module_load_include('inc', 'permissions_variable', 'permissions_variable.constants');

/**
 * Returns the current $permissions array.
 */
function permissions_variable_permissions() {
  return variable_get('permissions');
}

/**
 * Implements hook_permission().
 */
function permissions_variable_permission() {
  return array(
    PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER => array(
      'title' => t('Administer Permissions Variable'),
      'description' => t('Configure how Permissions Variable behaves.'),
    ),
    PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER_PERMISSIONS => array(
      'title' => t('Bypass permissions administration page access restrictions'),
      'description' => t('View the permissions administration page when access is restricted by Permissions Variable'),
    ),
    PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER_ROLES => array(
      'title' => t('Bypass roles administration page access restrictions'),
      'description' => t('View the roles administration page when access is restricted Permissions Variable'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function permissions_variable_help($path, $arg) {
  // Provide some help for our configuration page.
  if ($path === PERMISSIONS_VARIABLE_CONFIG_PATH) {
    $placeholders = array(
      '!export' => l(PERMISSIONS_VARIABLE_EXPORT_PATH, PERMISSIONS_VARIABLE_EXPORT_PATH),
      '!permissions' => l('admin/people/permissions', 'admin/people/permissions'),
    );
    return t('<p>This form provides some high level control over the behavior of permissions_variable. This module works best when you have configured permissions at !permissions, and then exported them at !export. It is <em>highly</em> recommended that you read the README.txt file for this module before using it.</p>', $placeholders);
  }
}

/**
 * Implements hook_menu().
 */
function permissions_variable_menu() {
  $items = array();

  $items[PERMISSIONS_VARIABLE_CONFIG_PATH] = array(
    'title' => 'Permissions Variable',
    'description' => 'Manage the behavior of the Permissions Variable module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('permissions_variable_admin_form'),
    'access arguments' => array(PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER),
    'file' => 'permissions_variable.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // Export tab on the core permissions page.
  $items[PERMISSIONS_VARIABLE_EXPORT_PATH] = array(
    'title' => 'Export',
    'description' => 'Export permissions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('permissions_variable_export_form'),
    'access arguments' => array('administer permissions'),
    'file' => 'permissions_variable.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function permissions_variable_menu_alter(&$items) {
  // Restrict access to roles administration pages.
  $items['admin/people/permissions/roles']['access callback'] = 'permissions_variable_role_access';
  $items['admin/people/permissions/roles/edit/%user_role']['access callback'] = 'permissions_variable_role_edit_access';
  $items['admin/people/permissions/roles/delete/%user_role']['access callback'] = 'permissions_variable_role_edit_access';

  // Restrict access to permissions administration pages.
  $items['admin/people/permissions']['access callback'] = 'permissions_variable_permissions_access';
  $items['admin/people/permissions/list']['access callback'] = 'permissions_variable_permissions_access';
}

/**
 * Wraps user_access() to provide more fine grained security for permissions.
 */
function permissions_variable_permissions_access() {
  $access = user_access('administer permissions');

  if (permissions_variable_variable('permissions_variable_deny_permissions')) {
    $access &= user_access(PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER_PERMISSIONS);
  }

  return $access;
}

/**
 * Wraps user_access() to provide more fine grained security for roles.
 */
function permissions_variable_role_access() {
  $access = user_access('administer permissions');

  if (permissions_variable_variable('permissions_variable_deny_roles')) {
    $access &= user_access(PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER_ROLES);
  }

  return $access;
}

/**
 * Wraps user_role_edit_access() to provide more fine grained security.
 */
function permissions_variable_role_edit_access($role) {
  $access = user_role_edit_access($role);

  if (permissions_variable_variable('permissions_variable_deny_roles')) {
    $access &= user_access(PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER_ROLES);
  }

  return $access;
}


/**
 * Returns a variable_get with consistent, predefined defaults.
 *
 * @param string $name
 *   The name of the variable to return.
 *
 * @return mixed
 *   The value of the variable.
 */
function permissions_variable_variable($name) {
  if (!empty($name)) {
    return variable_get($name, constant(strtoupper($name)));
  }
}

/**
 * Wraps drupal_set_message() for form message.
 */
function permissions_variable_set_message($message) {
  if (!permissions_variable_variable('permissions_variable_verbose')) {
    return;
  }

  if (user_access(PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER)) {
    $message .= t(' You can configure permissions locking on the !configuration.', array('!configuration' => l(t('configuration page'), PERMISSIONS_VARIABLE_CONFIG_PATH)));
  }
  drupal_set_message($message, 'status', FALSE);
}

/**
 * Import/Export.
 */

/**
 * Overwrite the current db state for each permission in $permissions.
 */
function permissions_variable_import() {
  if (!permissions_variable_variable('permissions_variable_enabled')) {
    return;
  }

  $permissions = permissions_variable_permissions();
  $user_roles = user_roles();
  $modules = user_permission_get_modules();

  // Loop over $permissions and import the contents to the db.
  foreach ((array) $permissions as $name => $roles) {
    // Create user roles that exist in $permissions but not $user_roles if
    // appropriate.
    if (permissions_variable_variable('permissions_variable_create_roles')) {
      $new_roles = array_diff($roles, $user_roles);
      while (!empty($new_roles)) {
        $role = new StdClass();
        $role->name = reset($new_roles);
        user_role_save($role);
        watchdog('permissions_variable', 'Created new role @role', array('@role' => $role->name), WATCHDOG_NOTICE);

        // Refresh $user_roles and $new_roles.
        $user_roles = user_roles();
        $new_roles = array_diff($roles, $user_roles);
      }
    }

    foreach ($user_roles as $rid => $role) {
      // Fatal errors abound if we try to modify permissions of modules that
      // aren't currently enabled.
      if (!isset($modules[$name])) {
        continue;
      }

      // Grant or revoke this permission for this role as appropriate.
      if (in_array($role, $roles)) {
        user_role_grant_permissions($rid, array($name));
      }
      else {
        user_role_revoke_permissions($rid, array($name));
      }
    }
  }
}

/**
 * Returns the file header for permissions_variable_export().
 */
function permissions_variable_export_header() {
  $header = <<<'EOL'
<?php
/**
 * @file
 * Permissions export.
 */

global $conf;
$conf['permissions'] = array();
$permissions = &$conf['permissions'];

EOL;

  return $header;
}

/**
 * Export a single permission into a $permissions array.
 *
 * @param string $name
 *   The system name of the permission to export.
 *
 * @return string
 *   A string of executable PHP code that exports the permission to the global
 *   $permissions array.
 */
function permissions_variable_export_permission($module, $name) {
  // Drupal provides a nice utility function for exporting variables to the
  // correct coding standards in this file.
  include_once DRUPAL_ROOT . '/includes/utility.inc';

  // module_invoke() is not statically cached internally, so we do that here.
  $modules_info = &drupal_static(__FUNCTION__);
  if (!isset($modules_info[$module])) {
    $modules_info[$module] = module_invoke($module, 'permission');
  }

  $user_roles = user_roles();
  $user_role_permissions = user_role_permissions($user_roles);
  $nl = "\n";

  $allowed_roles = array();
  foreach ($user_role_permissions as $rid => $permissions) {
    if (!empty($permissions[$name])) {
      $allowed_roles[] = $user_roles[$rid];
    }
  }

  $out = '';
  if ($modules_info[$module]) {
    $out .= $nl;
    $out .= '// ' . strip_tags($modules_info[$module][$name]['title']) . '.' . $nl;
    $out .= '$permissions[\'' . $name . '\'] = ';
    $out .= drupal_var_export($allowed_roles);
    $out .= ";" . $nl;
  }
  return $out;
}

/**
 * Export all permissions currently in the database into a $permissions array.
 */
function permissions_variable_export() {
  // Drupal provides a nice utility function for exporting variables to the
  // correct coding standards in this file.
  include_once DRUPAL_ROOT . '/includes/utility.inc';

  $user_roles = user_roles();
  $user_role_permissions = user_role_permissions($user_roles);
  $modules = user_permission_get_modules();
  // $permissions_info = module_invoke_all('permission');
  $nl = "\n";

  // Build an array closer to what we want our export to look like.
  foreach ($user_role_permissions as $rid => $permissions) {
    foreach ($permissions as $name => $allow) {
      if ($allow && isset($modules[$name])) {
        if (!isset($export[$name])) {
          $export[$name] = array();
        }
        $export[$name][] = $user_roles[$rid];
      }
    }
  }

  // Start our export with basics that should be at the top of every PHP file.
  $out = permissions_variable_export_header();

  // Get a list of all the modules implementing a hook_permission() and sort by
  // display name.
  $modules = array();
  $module_info = system_get_info('module');
  foreach (module_implements('permission') as $module) {
    $modules[$module] = $module_info[$module]['name'];
  }
  asort($modules);

  foreach ($modules as $module => $display_name) {
    if ($module_permissions = module_invoke($module, 'permission')) {
      $out .= $nl;
      $out .= '/**' . $nl;
      $out .= ' * ' . $display_name . ' module.' . $nl;
      $out .= ' */' . $nl;

      // @todo leverage permissions_variable_export_permission() here rather
      // than duplicate functionality.
      foreach ($module_permissions as $name => $info) {
        $out .= $nl;
        $out .= '// ' . ucfirst(strip_tags($info['title'])) . '.' . $nl;
        $out .= '$permissions[\'' . $name . '\'] = ';
        $out .= isset($export[$name]) ? drupal_var_export($export[$name]) : 'array()';
        $out .= ";" . $nl;
      }
    }

  }

  return $out;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function permissions_variable_form_user_admin_permissions_alter(&$form, &$form_state, $form_id) {
  $permissions = permissions_variable_permissions();

  // Display a prominent message to the user explaining permissions locking.
  if (!empty($permissions) && permissions_variable_variable('permissions_variable_enabled')) {
    $message = t('Some permissions have been set in code and cannot be edited through the user interface.');
    permissions_variable_set_message($message);
  }


  // Locking of checkboxes for permissions set in $permissions.
  if (permissions_variable_variable('permissions_variable_enabled')) {
    $disabled_description = t('<em>Editing this permission is disabled because it has been set in code.</em>');
    foreach ((array) $permissions as $name => $roles) {
      // Disable the checkboxes for exported permissions.
      foreach ($form['checkboxes'] as &$checkboxes) {
        $checkboxes[$name]['#disabled'] = TRUE;
      }

      // Add information to the description about what is happening here.
      if (!empty($form['permission'][$name])) {
        $permission_description = &$form['permission'][$name]['#description'];
        $permission_description .= ' ' . $disabled_description;
        $permission_description = trim($permission_description);
      }
    }

    // Run an import after the form is submitted.
    $form['#submit'][] = 'permissions_variable_import';
  }

  // Toggling of export code on a per-permission basis via JavaScript.
  $form['#attached']['js'][] = drupal_get_path('module', 'permissions_variable') . '/permissions_variable.js';
  $form['#attached']['js'][] = array(
    'data' => array(
      'permissionsVar' => array(
        'toggleExportTextCodeHidden' => PERMISSIONS_VARIABLE_EXPORT_TOGGLE_TEXT_CODE_HIDDEN,
        'toggleExportTextCodeVisible' => PERMISSIONS_VARIABLE_EXPORT_TOGGLE_TEXT_CODE_VISIBLE,
      ),
    ),
    'type' => 'setting',
  );

  foreach ($form['permission'] as $name => &$item) {
    // Module group headings have no #type.
    if (isset($item['#type']) && $item['#type'] === 'item') {
      $export_code = permissions_variable_export_permission($module, $name);
      $item['#description'] .= '<pre class="permissions-variable-export code" data-permission="' . $name . '">' . $export_code . '</pre>';
    }
    else {
      // This is a module group heading. Store the module name for context.
      $module = $item['#id'];
    }
  }
}

/**
 * Returns a standard message to display on locked roles administration forms.
 */
function permissions_variable_roles_form_locked_message() {
  permissions_variable_set_message(t('Editing of roles is not permitted through the user interface, return to <a href="!edit_url">edit permissions</a>.', array('!edit_url' => url('admin/people/permissions'))));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables deletion of roles through the user interface if configured to do so.
 */
function permissions_variable_form_user_admin_role_delete_confirm_alter(&$form, &$form_state) {
  if (!permissions_variable_variable('permissions_variable_lock_roles')) {
    return;
  }
  permissions_variable_roles_form_locked_message();

  // Unset anything that looks remotely like a submit handler to prevent this
  // form being submitted programatically.
  unset($form['#submit'], $form['#validate'], $form['actions']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables editing of roles through the user interface if configured to do so.
 */
function permissions_variable_form_user_admin_role_alter(&$form, &$form_state) {
  if (!permissions_variable_variable('permissions_variable_lock_roles')) {
    return;
  }
  permissions_variable_roles_form_locked_message();

  // Disable interactive parts of the form.
  $form['name']['#disabled'] = TRUE;

  // Unset anything that looks remotely like a submit handler to prevent this
  // form being submitted programatically.
  unset($form['#submit'], $form['#validate'], $form['actions']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables creation of roles through the user interface if configured to do so.
 */
function permissions_variable_form_user_admin_roles_alter(&$form, &$form_state) {
  if (!permissions_variable_variable('permissions_variable_lock_roles')) {
    return;
  }
  permissions_variable_roles_form_locked_message();

  // Remove access to all parts of the form that allow roles to be modified.
  $form['name']['#access'] = FALSE;

  // Completely unset anything that looks remotely like a submit handler to
  // prevent this form being submitted programatically.
  unset($form['actions'], $form['add'], $form['#submit'], $form['#validate']);

  // Do the preprocessing that lives in theme_user_admin_roles() so we can
  // render this form as a normal table without edit links or draggable rows.
  $header = array(t('Name'), array('data' => t('Operations')));
  foreach (element_children($form['roles']) as $rid) {
    $name = $form['roles'][$rid]['#role']->name;
    $row = array();
    $row[] = t('@name <em>(locked)</em>', array('@name' => $name));
    $row[] = l(t('edit permissions'), 'admin/people/permissions/' . $rid);
    $rows[] = array('data' => $row);
  }
  $rows[] = array(
    array(
      'data' => drupal_render($form['name']),
      'colspan' => 4,
      'class' => 'edit-name',
    ),
  );

  $form['#theme'] = 'table';
  $form['#header'] = $header;
  $form['#rows'] = $rows;
}

/**
 * Implements hook_flush_caches().
 */
function permissions_variable_flush_caches() {
  if (permissions_variable_variable('permissions_variable_cache')) {
    permissions_variable_import();
  }
  return array();
}

/**
 * Implements hook_modules_enabled().
 */
function permissions_variable_modules_enabled($modules) {
  permissions_variable_import();
}

/**
 * Implements hook_modules_disabled().
 */
function permissions_variable_modules_disabled($modules) {
  permissions_variable_import();
}
