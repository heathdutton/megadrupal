<?php
/**
 * @file
 * Tests for Permissions Variable.
 */

// Include constants.
module_load_include('inc', 'permissions_variable', 'permissions_variable.constants');

/**
 * Tests the functionality of the Permissions Variable module.
 */
class PermissionsVariableTestCase extends DrupalWebTestCase {
  protected $admin_user;

  protected $auth_user;

  protected $default_permissions = array(
    PERMISSIONS_VARIABLE_PERMISSION_ADMINISTER => array(
      'permissions variable administrator',
    ),
  );

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Permissions Variable',
      'description' => 'Tests for Permissions Variable.',
      'group' => 'Permissions Variable',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    // setUp enables modules before the installation profile hook_install().
    // This means that if we put permissions_variable in this array when a
    // permission for the 'administrator' role is in $permissions while
    // permissions_variable is automatically creating new roles, we get fatal
    // errors when standard_install() pushes a duplicate 'administrator' role
    // to the database. This has no impact on "normal" site operation where
    // permissions_variable is enabled after the profile's installation script
    // has run.
    parent::setUp(array());
    module_enable(array('permissions_variable'));

    // If the test environment has a dirty $permissions array, the results might
    // be unreliable.
    global $permissions;
    $this->assertTrue(empty($permissions), 'The $permissions variable is empty in the test environment before running tests.');

    $this->ensureDefaultTestPermissions();

    // Create $auth_user.
    $this->auth_user = $this->drupalCreateUser();

    // Create $admin_user.
    $this->admin_user = $this->drupalCreateUser();
    $this->addUserRole($this->admin_user, 'permissions variable administrator');
  }

  /**
   * Restores the default global $permissions array for testing.
   */
  protected function ensureDefaultTestPermissions() {
    variable_set('permissions', $this->default_permissions);
    permissions_variable_import();
  }

  /**
   * Adds a role to a user by role name.
   */
  protected function addUserRole(&$user, $rolename) {
    $user->roles[] = $rolename;
    user_save($user);
  }

  /**
   * Test access to Permissions Variable administration pages.
   */
  public function testPermissionsVariableAdminAccess() {

    $this->assertTrue(TRUE);

    // Ensure $admin_user can access Permissions Variable administration pages.
    $this->drupalLogin($this->admin_user);
    $this->drupalGet(PERMISSIONS_VARIABLE_CONFIG_PATH);
    $this->assertResponse(200, 'Administrator can access Permissions Variables administration');

    // Ensure $auth_user can't access Permissions Variable administration pages.
    $this->drupalLogin($this->auth_user);
    $this->drupalGet(PERMISSIONS_VARIABLE_CONFIG_PATH);
    $this->assertResponse(403, 'Authenticated users cannot access Permissions Variable administration');
  }
}
