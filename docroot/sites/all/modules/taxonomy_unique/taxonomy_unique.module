<?php
/**
 * @file
 * Module file for the Taxonomy unique module.
 */

define('TAXONOMY_UNIQUE_DEFAULT_MESSAGE', 'Term %term already exists in vocabulary %vocabulary.');

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary().
 */
function taxonomy_unique_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {

  $form['unique_container'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomy unique'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['unique_container']['unique'] = array(
    '#type' => 'checkbox',
    '#title' => t('Terms should be unique.'),
    '#default_value' => variable_get('taxonomy_unique_' . $form['#vocabulary']->machine_name, ''),
  );
  $form['unique_container']['unique_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message to show if term already exists'),
    '#description' => t('Placeholders: %term and %vocabulary'),
    '#default_value' => variable_get('taxonomy_unique_' . $form['#vocabulary']->machine_name . '_message', TAXONOMY_UNIQUE_DEFAULT_MESSAGE),
  );

  // Attach custom submit handler to the form.
  $form['#submit'][] = 'taxonomy_unique_taxonomy_form_vocabulary_submit';
}

/**
 * Form submission handler for taxonomy_form_vocabulary().
 */
function taxonomy_unique_taxonomy_form_vocabulary_submit($form, &$form_state) {

  // Save custom fields to variables.
  variable_set('taxonomy_unique_' . $form_state['values']['machine_name'], $form_state['values']['unique']);
  variable_set('taxonomy_unique_' . $form_state['values']['machine_name'] . '_message', $form_state['values']['unique_message']);
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 */
function taxonomy_unique_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {

  // If the terms in this vocabulary should be unique,
  // attach custom validate function to the form.
  if (variable_get('taxonomy_unique_' . $form['vocabulary_machine_name']['#value'], FALSE)) {
    $form['#validate'][] = 'taxonomy_unique_term_name_validate';
  }
}

/**
 * Implements _form_validate() for taxonomy_form_term().
 */
function taxonomy_unique_term_name_validate($form, &$form_state) {

  // If we don't want to save, don't validate the term name.
  if ($form_state['values']['op'] != t('Save')) {
    return;
  }

  // Get the needed variables from $form_state.
  $name = $form_state['values']['name'];
  $vocabulary_machine_name = $form_state['values']['vocabulary_machine_name'];
  $tid = !empty($form_state['values']['tid']) ? $form_state['values']['tid'] : NULL;

  // If the name isn't empty and unique check failed, mark field as invalid.
  if ($name != '' && !taxonomy_unique_is_term_unique($name, $vocabulary_machine_name, $tid)) {
    $error_message = variable_get('taxonomy_unique_' . $vocabulary_machine_name . '_message', TAXONOMY_UNIQUE_DEFAULT_MESSAGE);
    form_set_error('name', filter_xss(format_string($error_message, array('%term' => $name, '%vocabulary' => $vocabulary_machine_name))));
  }
}

/**
 * Checks if term name already exists in vocabulary.
 *
 * @param string $term_name
 *   Name to check
 *
 * @param string $vocabulary_machine_name
 *   Machine name of the vocabulary the term belongs to
 *
 * @param int $tid
 *   The term ID when updating an existing term
 *
 * @return bool
 *   TRUE when term name is unique, FALSE if not
 */
function taxonomy_unique_is_term_unique($term_name, $vocabulary_machine_name, $tid = NULL) {

  $terms = taxonomy_get_term_by_name($term_name, $vocabulary_machine_name);
  $term = current($terms);

  // If no terms are found, or only one term is found which has
  // the same tid as the one we're trying to save, the name must be unique.
  if (empty($terms) || (count($terms) == 1 && $term->tid == $tid)) {
    return TRUE;
  }
  return FALSE;
}
