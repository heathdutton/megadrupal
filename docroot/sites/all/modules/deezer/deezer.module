<?php
/**
 * @file
 * Provides integration with www.deezer.com service.
 */

define('DEEZER_APP_ID', variable_get('deezer_app_id'));
define('DEEZER_APP_SECRET', variable_get('deezer_secret_key', ''));
define('DEEZER_ACCESS_TOKEN_URL', 'https://connect.deezer.com/oauth/access_token.php');
define('DEEZER_API_URL', 'https://api.deezer.com/2.0/');

define('DEEZER_USERPIC_SIDE', 120);

/**
 * Implements hook_menu().
 */
function deezer_menu() {
  $items = array();

  // Callback for OAuth login.
  $items['deezer/login'] = array(
    'title' => 'Deezer login',
    'delivery callback' => '_deezer_delivery',
    'page callback' => 'deezer_login_callback',
    'access arguments' => array('login through deezer'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/deezer.pages.inc',
  );

  // Place to hold register form for a new Deezer user.
  $items['deezer/register'] = array(
    'title' => 'Deezer login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deezer_register_form'),
    'access callback' => '_deezer_register_access',
    'type' => MENU_CALLBACK,
    'file' => 'inc/deezer.pages.inc',
  );

  // Settings form.
  $items['admin/config/media/deezer'] = array(
    'title' => 'Deezer configuration',
    'description' => 'Main Deezer module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deezer_form_settings_main'),
    'access arguments' => array('administer deezer module'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/deezer.pages.inc',
  );

  // Delete Deezer record conformation.
  $items['user/%user/edit/deezer/delete'] = array(
    'title' => 'Delete Deezer record',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deezer_user_unbind_confirm', 1),
    'access arguments' => array('link deezer account'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'inc/deezer.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function deezer_init() {
  $app_id = DEEZER_APP_ID;

  // Exposing APP ID to JS.
  if (!empty($app_id)) {
    drupal_add_js(array('deezer' => array('app_id' => $app_id)), 'setting');
  }

  if (!empty($_SESSION['deezer_goto'])) {
    $goto = $_SESSION['deezer_goto'];
    unset($_SESSION['deezer_goto']);
    drupal_goto($goto);
  }
}

/**
 * Implements hook_theme().
 */
function deezer_theme() {
  return array(
    'deezer_login_popup' => array(
      'variables' => array(
        'anonym_text' => t('Login with Deezer'),
        'logged_text' => t('Attach Deezer account'),
      ),
      'file' => '/inc/deezer.theme.inc',
    ),
    'deezer_login_popup_js_close' => array(
      'render element' => 'script',
      'file' => '/inc/deezer.theme.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function deezer_permission() {
  return array(
    'administer deezer module' => array(
      'title' => t('Administer Deezer module'),
      'description' => t('Configure Deezer features.'),
    ),
    'link deezer account' => array(
      'title' => t('Link Deezer account to user profile'),
      'description' => t('Bind Deezer account info to an existing user and login via Deezer.'),
    ),
    'login through deezer' => array(
      'title' => t('Login via Deezer'),
      'description' => t('Use Deezer account to login into the site.'),
    ),
  );
}

/**
 * Implements hook_user_categories().
 */
function deezer_user_categories() {
  return array(
    array(
      'name'   => 'deezer',
      'title'  => 'Deezer',
      'weight' => 3,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function deezer_menu_alter(&$items) {
  // We need to alter menu parameters for the Deezer user category,
  // since the User module hardcoded some values.
  // @see user_menu()
  $items['user/%user_category/edit/deezer']['page arguments'] = array('deezer_user_profile_form', 1);
  $items['user/%user_category/edit/deezer']['module']         = 'deezer';
  $items['user/%user_category/edit/deezer']['file']           = 'inc/deezer.pages.inc';
}

/**
 * Custom delivery callback.
 */
function _deezer_delivery($page_callback_result) {
  print theme('deezer_login_popup_js_close', array());
}


/**
 * Creates a new Drupal user and attaches its uid to deezer's one.
 *
 * @param int $deezer_user
 *   Deezer user id.
 * @param array $form
 *   Completed register form array if new Drupal user is need to be created.
 *   Take a look at: deezer_register_form_submit()
 * @param array $form_state
 *   Completed register form_state array if new Drupal user is need to be
 *   created.
 *   Take a look at: deezer_register_form_submit()
 *
 * @return int|bool
 *   Drupal user's ID or FALSE if failed.
 */
function deezer_record_save($deezer_user, $form = array(), $form_state = array()) {
  $dependent = 0;
  $duid      = isset($deezer_user['id']) ? $deezer_user['id'] : NULL;

  if (empty($duid) || !is_numeric($duid)) {
    return FALSE;
  }

  // Check for an existing record.
  if (!deezer_load_user(NULL, $duid)) {
    if (user_is_anonymous() && !empty($form) && !empty($form_state)) {
      $user = drupal_anonymous_user();
      $pass = user_password();
      $mail = $deezer_user['email'];

      // Act like core.
      $form_state['values']['pass'] = $pass;
      $form_state['values']['init'] = $form_state['values']['mail'] = $mail;

      entity_form_submit_build_entity('user', $user, $form, $form_state);

      $edit = array(
        'name'   => $form_state['values']['name'],
        'pass'   => $pass,
        'mail'   => $mail,
        'init'   => $mail,
        'status' => 1,
        'access' => REQUEST_TIME,
      );
      $user = user_save($user, $edit);

      $dependent = 1;

      // Terminate if an error occurred during user_save().
      if (!$user) {
        drupal_set_message(t('Error saving user account.'), 'error');
        watchdog('deezer', 'Error creating user for @duid', array('@duid' => $duid), WATCHDOG_ERROR);
        return FALSE;
      }
      else {
        // Maps external Deezer user to our brand new Drupal one.
        // @see user_external_login_register()
        user_set_authmaps($user, array('authname_deezer' => $duid));
      }
    }
    else {
      // Just attach Deezer ID to an existent Drupal User instead.
      global $user;
    }
  }

  // Setting up data for a new record.
  $record = array(
    'uid'       => $user->uid,
    'deezer_id' => $duid,
    'dependent' => $dependent,
  );

  return drupal_write_record('deezer', $record) ? $user->uid : FALSE;
}

/**
 * Looks up for an existed deezer user record.
 *
 * @param int $uid
 *   Drupal user id.
 * @param int $duid
 *   Deezer int $user id.
 *
 * @return array|bool
 *   Array with user record or FALSE on falture.
 */
function deezer_load_user($uid = NULL, $duid = NULL) {
  $deezer_user = &drupal_static(__FUNCTION__);

  if (!isset($deezer_user)) {
    $valid_duid = !empty($duid) || is_numeric($duid);
    $valid_uid  = !empty($uid) || is_numeric($uid);

    // We need at least one parameter.
    if (!$valid_uid && !$valid_duid) {
      return FALSE;
    }

    $query = db_select('deezer', 'd')->fields('d');

    if ($valid_uid) {
      $query->condition('d.uid', $uid);
    }

    if ($valid_duid) {
      $query->condition('d.deezer_id', $duid);
    }

    $deezer_user = $query->execute()->fetchAssoc();
  }

  return isset($deezer_user['uid']) ? $deezer_user : FALSE;
}

/**
 * Access callback for the register page.
 *
 * @return bool
 *   TRUE if user has access, FALSE instead.
 */
function _deezer_register_access() {
  // Check if registration is open.
  $user_reg_mode = variable_get('user_register', USER_REGISTER_VISITORS);
  $reg_open = ($user_reg_mode !== USER_REGISTER_ADMINISTRATORS_ONLY);

  // Check valid Deezer user data.
  $deezer_user = isset($_SESSION['deezer_user']['id']);

  if ($reg_open && $deezer_user && user_is_anonymous()) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Gathers user object from Deezer.com by id.
 * @TODO Move this to a separate inc.
 *
 * @param int $id
 *   Deezer user's id.
 *
 * @return array
 *   Array with user.
 *
 * @see http://developers.deezer.com/api/user
 */
function deezer_remote_user_get($id = NULL) {
  if (empty($id) || !is_numeric($id)) {
    return FALSE;
  }

  $url  = DEEZER_API_URL . 'user/' . $id;
  $user = _deezer_request($url);

  return isset($user['id']) ? $user : FALSE;
}

/**
 * Checks for Deezer access token in session, otherwise gathers a brand new one.
 *
 * @param bool $reset
 *   If set, session check will be ommited, and new token will be requested.
 *
 * @return string
 *   Access token string or FALSE on failure.
 */
function deezer_session_get_token($reset = FALSE) {
  if (!isset($_SESSION['deezer_access_token'])) {
    $reset = TRUE;
  }

  if ($reset) {
    // Looking for an OAuth2 authorization code.
    $code = (empty($_REQUEST['code'])) ? NULL : $_REQUEST['code'];

    if (empty($code)) {
      // We can't request a new access token without an authorization code.
      // Let's check the session, though.
      $access_token = isset($_SESSION['deezer_access_token']) ? $_SESSION['deezer_access_token'] : FALSE;
    }
    else {
      // We have a code, requesting new access token.
      $data = array(
        'app_id' => DEEZER_APP_ID,
        'secret' => DEEZER_APP_SECRET,
        'code'   => $code,
      );
      $query = http_build_query($data, '', '&');
      $url   = DEEZER_ACCESS_TOKEN_URL . '?' . $query;

      $request = drupal_http_request($url);
      $request = trim($request->data);
      parse_str($request, $params);

      $access_token = empty($params['access_token']) ? FALSE : $params['access_token'];

      if ($access_token) {
        $_SESSION['deezer_access_token'] = $access_token;
      }
    }
  }
  else {
    // Looking for an access token in the session..
    $access_token = isset($_SESSION['deezer_access_token']) ? $_SESSION['deezer_access_token'] : FALSE;
  }

  return $access_token;
}

/**
 * Makes a request over HTTP.
 *
 * @param string $url
 *   URL to send to.
 * @param array $args
 *   Array of query parameters.
 *
 * @return array
 *   Array with response.
 */
function _deezer_request($url = NULL, $args = array()) {
  $response = array();

  if (valid_url($url)) {
    $query     = empty($args) ? '' : http_build_query($args, '', '&');
    $url       = $url . '?' . $query;
    $response  = drupal_http_request($url);
    $response  = drupal_json_decode($response->data);
  }

  return $response;
}

/**
 * Helper function for getting logged Deezer user's info.
 *
 * @param string $access_token
 *   Deezer access token.
 */
function _deezer_active_user_info_get($access_token = NULL) {
  if (empty($access_token)) {
    return FALSE;
  }

  $data = array(
    'access_token' => $access_token,
  );

  $url  = DEEZER_API_URL . 'user/me';
  $user = _deezer_request($url, $data);

  return empty($user) ? FALSE : $user;
}

/**
 * Deletes a Deezer record.
 *
 * @param int $uid
 *   Drupal user id.
 * @param int $duid
 *   Deezer int $user id.
 *
 * @return bool
 *   FALSE on failure.
 */
function deezer_delete_user($uid = NULL, $duid = NULL) {
  $valid_duid = !empty($duid) || is_numeric($duid);
  $valid_uid  = !empty($uid) || is_numeric($uid);

  // We need at least one parameter.
  if (!$valid_uid && !$valid_duid) {
    return FALSE;
  }

  $query = db_delete('deezer');

  if ($valid_uid) {
    $query->condition('uid', $uid);
  }

  if ($valid_duid) {
    $query->condition('deezer_id', $duid);
  }
  $query->execute();
}

// @TODO Move blocks to a separate module.
/**
 * Implements hook_block_info().
 */
function deezer_block_info() {
  $blocks['deezer_login'] = array(
    'info' => t('Deezer Login'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function deezer_block_view($delta = '') {
  switch ($delta) {
    case 'deezer_login':
      $content = '';

      if (user_access('login through deezer')) {
        global $user;

        if (!deezer_load_user($user->uid)) {
          $content = theme('deezer_login_popup', array());
        }
      }

      $block['subject'] = t('Deezer');
      $block['content'] = $content;
      return $block;

    break;
  }
}
