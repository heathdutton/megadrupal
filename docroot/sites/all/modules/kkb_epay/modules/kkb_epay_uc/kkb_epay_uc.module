<?php

/**
 * @file
 * Integration of kkb_epay module with Ubercart's payments system.
 *
 * Copyright (C) 2012, Victor Nikulshin
 * Copyright (C) 2012, Chris Oden <wodenx@gmail.com>
 * Copyright (C) 2010, Lyle Mantooth <lyle@ubercart.org>
 *
 * This file is part of KKB Epay.
 *
 * KKB Epay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * KKB Epay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KKB Epay.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_uc_payment_method().
 */
function kkb_epay_uc_uc_payment_method() {
  $desc = t(
    'Pay with your bank cart securely at the !url processing center.',
    array(
      '!url' => l('https://epay.kkb.kz/', 'https://epay.kkb.kz/')
    )
  );
  $methods['kkb_epay'] = array(
    'name'       => t('KKB Epay'),
    'title'      => t('KKB Epay credit card processing center'),
    'desc'       => $desc,
    'callback'   => 'kkb_epay_uc_method_callback',
    'weight'     => 1,
    'checkout'   => TRUE,
    'no_gateway' => TRUE,
    'redirect'   => 'kkb_epay_uc_redirect',
  );

  return $methods;
}

/**
 * Implements hook_uc_payment_method_callback().
 */
function kkb_epay_uc_method_callback($op, &$order, $form = NULL, &$form_state = NULL) {
  if ($op == 'cart-process') {
    if ($order->currency != 'KZT') {
      _kkb_epay_uc_unsupported_currency_warn($order);
      return FALSE;
    }
  }
}

/**
 * Form builder.
 *
 * Creates redirect form that is displayed after an order is formed and is
 * ready to be payed.
 */
function kkb_epay_uc_redirect($form, &$form_state, stdClass $uc_order) {
  if ($uc_order->currency != 'KZT') {
    _kkb_epay_uc_unsupported_currency_warn($uc_order);
    _kkb_epay_uc_unsupported_currency_log($uc_order);
    return array();
  }

  $account = user_load($uc_order->uid);
  $epay_order = new KkbEpay_Order($uc_order->order_id);
  $epay_order->setTengeAmount($uc_order->order_total);

  foreach ($uc_order->products as $p) {
    $epay_order->addItem(new KkbEpay_OrderItem($p->title, $p->price * $p->qty, $p->qty));
  }
  foreach ($uc_order->line_items as $i) {
    $epay_order->addItem(new KkbEpay_OrderItem($i['title'], $i['amount']));
  }

  $email = !empty($uc_order->primary_email) ? $uc_order->primary_email : NULL;
  $statement = drupal_get_form('kkb_epay_billing_statement', $epay_order, $account, $email);

  // Add unique token for better security.
  $url = url('epay/back/success/' . $uc_order->order_id, array(
    'absolute' => TRUE,
    'query' => array(
      'token' => drupal_get_token('payment for order ' . $uc_order->order_id),
    ),
  ));
  $statement['BackLink']['#value'] = $url;

  return $statement;
}

/**
 * Implements hook_kkb_epay_payment().
 *
 * In order to preserve Ubercart's autologin functionality after checkout,
 * payment of an order cannot be directly saved here.
 *
 * New account for user is created and user can be logged in only during the
 * same request when the order payment is saved. This is a peculiarity of
 * Ubercart's API.
 *
 * So, payment confirmation must be saved in a special field inside of order
 * object. It will be really saved when user returnes back to the site on the
 * 'success' page.
 */
function kkb_epay_uc_kkb_epay_payment(KkbEpay_PaymentNotification $notification) {
  $order = uc_order_load($notification->getOrderId());
  if ($order && empty($order->data['kkb_epay_payment_confirmation']['saved'])) {
    $order->data['kkb_epay_payment_confirmation'] = array(
      'saved'     => TRUE,
      'reference' => $notification->getReference(),
      'amount'    => $notification->getAmount(),
      'timestamp' => $notification->getTimestamp(),
    );
    uc_order_save($order);

    $message = t(
      'Payment for the order has been received. Payment reference number is %s.',
      array('%s' => $notification->getReference())
    );
    uc_order_comment_save($order->order_id, $order->uid, $message, 'order', $order->order_status, TRUE);

    $amount = $notification->getAmount();
    $msg = t(
      'Order has been payed with KKB Epay. Payment reference number is %reference',
      array('%reference' => $notification->getReference())
    );
    $time = $notification->getTimestamp();
    uc_payment_enter($order->order_id, 'kkb_epay', $amount, 0, array(), $msg, $time);
  }
}

/**
 * Implements hook_kkb_epay_success_page().
 *
 * User has come back to the site. It is now ok to save information about
 * payment with appropriate API and, at the same time, create new account
 * for user or perform autologin.
 */
function kkb_epay_uc_kkb_epay_success_page($id) {
  $id = (int) $id;
  $token_value = 'payment for order ' . $id;

  if (!empty($_GET['token']) && drupal_valid_token(strval($_GET['token']), $token_value)) {
    $order = uc_order_load($id);

    if (!empty($order->data['kkb_epay_payment_confirmation'])) {
      return _kkb_epay_uc_complete_sale($order);
    }
  }
}

/**
 * Sale completion helper.
 *
 * Completes the order checkout, saves payment confirmation, adds comments to
 * the comment, logges user in (if autologin is enabled for new users),
 * builds success page, and optionaly redirects user somewhere else (if
 * Ubercart is configured to redirect).
 *
 * This helper mostly simulates the work of the uc_cart_checkout_complete()
 * function (it is located in uc_cart.pages.inc file), which is the last step
 * of the order checkout and where most of the listed actions are performed.
 *
 * Unfortunately, it is impossible to hook into uc_cart_checkout_complete();
 * in order to save payment we have to dublicate its body and call
 * uc_payment_enter() at the right moment.
 *
 * Actions that are executed inside of uc_cart_checkout_complete(), such as
 * autologin, are Ubercart's features and users expect them to work properly.
 * That is why it is vert important to preserve its functionality.
 */
function _kkb_epay_uc_complete_sale($order) {
  $build = uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
  unset($_SESSION['uc_checkout'][$order->order_id], $_SESSION['cart_order']);

  // Add a comment to let sales team know this came in through the site.
  uc_order_comment_save($order->order_id, 0, t('Order created through website.'), 'admin');

  $page = variable_get('uc_cart_checkout_complete_page', '');
  if (!empty($page)) {
    drupal_goto($page);
  }
  return $build;
}

/**
 * Error message helper.
 *
 * Creates an errors message for user to inform that an order uses a currency
 * that cannot be processed by the Epay gateway.
 */
function _kkb_epay_uc_unsupported_currency_warn($order) {
  $message = t(
    'This order cannot be payed with Epay processing center. Epay can accept payments only in Tenge. The currency of this order is %c.',
    array('%c' => $order->currency)
  );
  drupal_set_message($message, 'error');
}

/**
 * Logs an attempt to use Epay to pay for an order in unsupported currency.
 */
function _kkb_epay_uc_unsupported_currency_log($order) {
  watchdog(
    'kkb_epay',
    'An order in unsupported currency %c could not be processed by Epay.',
    array('%c' => $uc_order->currency),
    WATCHDOG_CRITICAL
  );
}
