<?php

/**
 * @file
 * KKB 'Epay' authorization server support.
 *
 * Copyright (C) 2012, Victor Nikulshin
 *
 * This file is part of KKB Epay.
 *
 * KKB Epay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * KKB Epay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KKB Epay.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Prepares a complete form ready to be submitted to the processing server.
 *
 * This form is created as a standard Drupal form. Modifications can be made
 * with the help of hook_form_alter() hooks, however, it is very important not
 * to change values of any existing field.
 *
 * The most common reason to modify the form is to add/modify submit buttons
 * or some textual annotations.
 *
 * @warning
 *   This form must be submitted directly to the processing center.
 *   Form #action parameter must never be modified.
 *
 * @param KkbEpay_Order $order
 *   Information about order that must be payed.
 *
 * @param object $account
 *   Account of a user who receives the billing statement. Account is used to
 *   get user's email and preferred language.
 *
 * @param string $email
 *   An optional email that will be used instead of user's default address.
 *
 * @todo
 *   Set interface language to user's preferred language.
 *
 * @return array
 *   Complete definition of a billing form in as Drupal's renderable array.
 */
function kkb_epay_billing_statement($form, &$form_state, KkbEpay_Order $order, $account, $email = NULL) {
  module_load_include('inc', 'kkb_epay', 'includes/billing');

  $form['#action']  = kkb_epay_processing_gateway_url();
  $form['#method']  = 'post';
  $form['#order']   = $order;
  $form['#account'] = $account;

  $form['Signed_Order_B64'] = array(
    '#type' => 'hidden',
    '#value' => base64_encode(kkb_epay_create_signed_order($order)),
  );
  $form['email'] = array(
    '#type' => 'hidden',
    '#value' => $email ? $email : (isset($account->mail) ? $account->mail : ''),
  );
  $form['BackLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/back/success/' . $order->getId(), array('absolute' => TRUE)),
  );
  $form['FailureBackLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/back/failure/' . $order->getId(), array('absolute' => TRUE)),
  );
  $form['PostLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/post/success', array('absolute' => TRUE)),
  );
  $form['FailurePostLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/post/failure', array('absolute' => TRUE)),
  );
  $form['appendix'] = array(
    '#type' => 'hidden',
    '#value' => base64_encode(kkb_epay_create_order_appendix($order)),
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Proceed to payment'),
    ),
  );

  return $form;
}

/**
 * Returns current debugging status.
 *
 * @return boolean
 *   TRUE if debugging mode is turned on.
 *   FALSE if debugging mode is turned off.
 */
function kkb_epay_debug_status() {
  return (bool) variable_get('kkb_epay_debug_status', FALSE);
}

/**
 * Implements hook_init().
 */
function kkb_epay_init() {
  if (kkb_epay_debug_status()) {
    drupal_set_message(t('KKB Epay debugging mode is turned on. Payment is only possible with special bank cards.'), 'warning');
  }
}

/**
 * Implements hook_menu().
 */
function kkb_epay_menu() {
  $items = array();

  $items['admin/config/services/epay'] = array(
    'title'            => 'KKB Epay',
    'description'      => 'KKB Epay payments gateway configuration.',
    'page callback'    => 'system_admin_menu_block_page',
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/epay/debug'] = array(
    'title'            => 'KKB Epay debugging mode',
    'description'      => 'Choose to send payments to a live gateway or a sandbox.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('kkb_epay_admin_debug_form'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'includes/kkb_epay.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/epay/private-key'] = array(
    'title'            => 'KKB Epay private key configuration',
    'description'      => 'Check the existing or add a new private key.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('kkb_epay_admin_private_key_form'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'includes/kkb_epay.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/epay/save-private-key'] = array(
    'title'            => 'KKB Epay private key configuration',
    'description'      => 'Save imported private key into configuration file.',
    'page callback'    => 'kkb_epay_admin_private_key_save_page',
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'includes/kkb_epay.admin.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/back/success/%'] = array(
    'title'            => 'Payment was successful',
    'page callback'    => 'kkb_epay_callback_back_success',
    'page arguments'   => array(3),
    'access callback'  => TRUE,
    'file'             => 'includes/callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/back/failure/%'] = array(
    'title'            => 'Payment failed',
    'page callback'    => 'kkb_epay_callback_back_failure',
    'page arguments'   => array(3),
    'access callback'  => TRUE,
    'file'             => 'includes/callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/post/success'] = array(
    'title'            => 'Payment was successful',
    'page callback'    => 'kkb_epay_callback_post_success',
    'access callback'  => TRUE,
    'file'             => 'includes/callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/post/failure'] = array(
    'title'            => 'Payment failed',
    'page callback'    => 'kkb_epay_callback_post_failure',
    'access callback'  => TRUE,
    'file'             => 'includes/callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function kkb_epay_permission() {
  return array(
    'administer kkb_epay' => array(
      'title' => t('Administer KKB Epay configuration'),
      'description' => t('Manage private keys and payments debugging mode.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Packs information about a private key.
 *
 * The format of the package is that used by the KkbEpay_DrupalKeyLoader.
 */
function _kkb_epay_pack_private_key($data) {
  return implode("\n", str_split(base64_encode(serialize($data)), 64));
}
