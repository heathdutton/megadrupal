<?php

/**
 * @file
 * Install, update, uninstall and other related functions of the
 * kkb_epay module.
 *
 * Copyright (C) 2012, Victor Nikulshin
 *
 * This file is part of KKB Epay.
 *
 * KKB Epay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * KKB Epay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KKB Epay.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_requirements().
 */
function kkb_epay_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if (!function_exists('openssl_get_privatekey')) {
    $requirements['openssl'] = array(
      'title' => $t('OpenSSL extension'),
      'description' => $t('This module requires OpenSSL extension to secure transactions, but it was not found.'),
      'severity' => REQUIREMENT_ERROR,
      'value' => NULL,
    );
  }
  elseif ($phase == 'runtime') {
    $key_loader = new KkbEpay_DrupalKeyLoader();
    $key_loader->setDebug(FALSE);

    if ($key_loader->validateKey()) {
      $key = $key_loader->getKey();

      try {
        $key->open();

        $requirements['kkb_epay_private_key'] = array(
          'title' => $t('KKB Epay private key'),
          'description' => $t(
            'Private key loaded. Merchant ID is %id.',
            array('%id' => $key->getMerchantId())
          ),
          'severity' => REQUIREMENT_OK,
          'value' => NULL,
        );
      }
      catch (KkbEpay_KeyException $e) {
        $requirements['kkb_epay_private_key'] = array(
          'title' => $t('KKB Epay private key'),
          'description' => $t(
            $e->getMessage(),
            array()
          ),
          'severity' => REQUIREMENT_ERROR,
          'value' => NULL,
        );
      }
    }
    else {
      $requirements['kkb_epay_private_key'] = array(
        'title' => $t('KKB Epay private key'),
        'description' => $t(
          'Private key is not found. You will not be able to receive payments without a private key. You can <a href="@url">configure it right now</a>.',
          array('@url' => url('admin/config/services/epay/private-key'))
        ),
        'severity' => REQUIREMENT_ERROR,
        'value' => NULL,
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function kkb_epay_install() {
  // Saving debugging key in a more convenient format.
  // It is easier to switch between two variables than between two key loaders.
  $key_loader = new KkbEpay_DebugKeyLoader();
  $key_loader->setDebug(TRUE);
  $key = $key_loader->getKey();

  $key_data = array(
    'key' => $key->getKey(),
    'password' => $key->getPassword(),
    'merchant_id' => $key->getMerchantId(),
    'merchant_name' => $key->getMerchantName(),
    'certificate_id' => $key->getCertificateId(),
  );
  $packed = _kkb_epay_pack_private_key($key_data);
  variable_set('kkb_epay_private_key_debug', $packed);
}

/**
 * Implements hook_uninstall().
 */
function kkb_epay_uninstall() {
  variable_del('kkb_epay_private_key_live');
  variable_del('kkb_epay_private_key_debug');
  variable_del('kkb_epay_debug_status');
}

/**
 * Implements hook_schema().
 */
function kkb_epay_schema() {
  $tables = array();

  $tables['kkb_epay_raw_success_posts'] = array(
    'description' => 'Stores raw, not yet validated documents posted by the processing center.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'posted_timestamp' => array(
        'description' => 'The Unix timestamp of the time when the document was received.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'remote_ip' => array(
        'description' => 'An IP address that originated the request.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'document' => array(
        'description' => 'A raw posted document as a string.',
        'type' => 'blob',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $tables['kkb_epay_validated_documents'] = array(
    'description' => 'Stores validated and parsed documents posted by the processing center.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'ID of an order that has been payed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp of the time when the document was received.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'description' => 'The payment amount.',
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'reference' => array(
        'description' => 'Transaction reference number.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'approval_code' => array(
        'description' => 'Transaction approval code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'reference' => array('reference'),
    ),
  );

  return $tables;
}

/**
 * Creates new tables.
 */
function kkb_epay_update_7101() {
  $tables = array();

  $tables['kkb_epay_raw_success_posts'] = array(
    'description' => 'Stores raw, not yet validated documents posted by the processing center.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'posted_timestamp' => array(
        'description' => 'The Unix timestamp of the time when the document was received.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'remote_ip' => array(
        'description' => 'An IP address that originated the request.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'document' => array(
        'description' => 'A raw posted document as a string.',
        'type' => 'blob',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $tables['kkb_epay_validated_documents'] = array(
    'description' => 'Stores validated and parsed documents posted by the processing center.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'ID of an order that has been payed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp of the time when the document was received.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'description' => 'The payment amount.',
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'reference' => array(
        'description' => 'Transaction reference number.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'approval_code' => array(
        'description' => 'Transaction approval code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'reference' => array('reference'),
    ),
  );

  foreach ($tables as $name => $table) {
    db_create_table($name, $table);
  }
}
