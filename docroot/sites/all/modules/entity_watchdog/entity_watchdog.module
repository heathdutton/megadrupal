<?php

/**
 * @file
 * Provides an entity wrapper to database log entries,
 * so they can be used as entities.
 *
 * TODO: Review https://drupal.org/node/1237014 to fix notices w/ anon messages
 */

/**
 * Implements hook_entity_info().
 */
function entity_watchdog_entity_info() {
  $info['watchdog'] = array(
    // A human readable label to identify our entity.
    'label' => t('Watchdog'),
    // The controller for our Entity - extends the Drupal core controller.
    'controller class' => 'WatchdogEntityController',
    'entity class' => 'WatchdogEntity',
    // The table defined in hook_schema()
    'base table' => 'watchdog',
    // Returns the uri elements of an entity
    'uri callback' => 'entity_watchdog_watchdog_uri',
    // Fieldable that we can attach fields to it - the core functionality will
    'fieldable' => FALSE,
    // The unique key of our base table.
    'entity keys' => array(
      'id' => 'wid',
      'bundle' => 'type',
    ),
    // FALSE disables caching -  caching functionality is handled by Drupal core
    'static cache' => TRUE,
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    // we only have 1 way of handling this since it only builds on core
    'bundles' => array(),
    // module its from
    'module' => 'entity_watchdog',
    // View modes allow entities to be displayed differently based on context. We simply have one option
    // here but an alternative would be to have a Full and Teaser mode.
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ),
    ),
    // callback when entity invoked as object
    'load hook' => 'entity_watchdog_watchdog_load',
    'access callback' => 'entity_watchdog_watchdog_access',
    'save callback' => 'entity_watchdog_watchdog_save',
  );
  // Support entity cache module.
  $info['watchdog']['entity cache'] = TRUE;
  //$info['watchdog']['field cache'] = FALSE;
  return $info;
}

/**
 * Implements hook_permission()
 */
function entity_watchdog_permission() {
  return array(
    'view entity_watchdog' => array(
      'title' => t('View Watchdog Entity'),
    ),
    'delete entity_watchdog' => array(
      'title' => t('Delete Watchdog Entity'),
    ),
  );
}

/**
 * Determines whether the given user has access to an watchdog entry.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'.
 *   View and delete are the only ones supported currently
 * @param $item
 *   Optionally an entity item. If nothing is given, access for all
 *   items is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function entity_watchdog_watchdog_access($op, $item = NULL, $account = NULL) {
  // allow administer permission to trump all others
  // this also will pass true for when no items are passed
  if (user_access('access site reports', $account)) {
    return TRUE;
  }
  // if no item is set, and not admin rights block access
  if (!isset($item)) {
    return FALSE;
  }
  // check for op rights
  if (user_access($op . ' entity_watchdog', $account)) {
    return TRUE;
  }
  // they didn't have viewer rights
  return FALSE;
}

/**
 * Watchdog entity uri callback.
 */
function entity_watchdog_watchdog_uri($watchdog) {
  return array(
    'path' => 'watchdog/' . $watchdog->wid,
  );
}

/**
 * Watchdog class.
 */
class WatchdogEntity extends Entity {
  /**
   * Deafult label callback.
   */
  protected function defaultLabel() {
    return t('Details about #!wid', array('!wid' => $this->wid));
  }

  /**
   * Deafult uri callback.
   */
  protected function defaultUri() {
    return entity_watchdog_watchdog_uri($this);
  }
}

/**
 * Watchdog Controller class.
 */
class WatchdogEntityController extends EntityAPIController {

  /**
   * Basic creation function.
   */
  public function create(array $values = array()) {
    return parent::create($values);
  }

  /**
   * Basic build function.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('watchdog', $entity);
    $content['author'] = array('#markup' => t('Created by: !author', array('!author' => $wrapper->uid->name->value(array('sanitize' => TRUE)))));

    // Make Message themed like default fields.
    $content['message'] = array(
      '#theme' => 'field',
      '#weight' => 0,
      '#title' => t('Message'),
      '#access' => TRUE,
      '#label_display' => 'above',
      '#view_mode' => 'full',
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'message',
      '#field_type' => 'text',
      '#entity_type' => 'watchdog',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->message)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->message)),
    );
    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }

}

/**
 * Load a watchdog entry.
 */
function entity_watchdog_watchdog_load($wid, $reset = FALSE) {
  $wids = array($wid);
  $watchdog = entity_watchdog_watchdog_load_multiple($wids);
  return reset($watchdog);
}

/**
 * Load multiple watchdog entries based on certain conditions.
 */
function entity_watchdog_watchdog_load_multiple($wids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('watchdog', $wids, $conditions, $reset);
}

/**
 * Save watchdog entry.
 */
function entity_watchdog_watchdog_save($watchdog) {
  return entity_get_controller('watchdog')->save($watchdog);
}

/**
 * Delete single watchdog entry.
 */
function entity_watchdog_watchdog_delete($watchdog) {
  entity_delete('watchdog', entity_id('watchdog', $watchdog));
}

/**
 * Delete multiple watchdog entries.
 */
function entity_watchdog_watchdog_delete_multiple($watchdog_ids) {
  entity_delete_multiple('watchdog', $watchdog_ids);
}

/**
 * Implements hook_entity_property_info_alter().
 */
function entity_watchdog_entity_property_info_alter(&$info) {
  $properties = &$info['watchdog']['properties'];

  $properties['uid'] = array(
    'label' => t('User'),
    'type' => 'user',
    'description' => t('The users.uid of the user who triggered the event.'),
    'required' => TRUE,
    'schema field' => 'uid',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['type'] = array(
    'label' => t('Type'),
    'type' => 'text',
    'description' => t('Type of log message, for example "user" or "page not found."'),
    'schema field' => 'type',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['message'] = array(
    'label' => t('Message'),
    'type' => 'text',
    'description' => t('Text of log message to be passed into the t() function.'),
    'schema field' => 'message',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['variables'] = array(
    'label' => t('Variables'),
    'type' => 'text',
    'serialize' => TRUE,
    'description' => t('Variables to pass through t() function'),
    'schema field' => 'variables',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['severity'] = array(
    'label' => t('Severity'),
    'type' => 'integer',
    'description' => t('The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)'),
    'schema field' => 'severity',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['link'] = array(
    'label' => t('Link'),
    'type' => 'text',
    'description' => t('Link to view the result of the event.'),
    'schema field' => 'link',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['location'] = array(
    'label' => t('Location'),
    'type' => 'uri',
    'description' => t('URL of the origin of the event.'),
    'schema field' => 'location',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['referer'] = array(
    'label' => t('Referer'),
    'type' => 'uri',
    'description' => t('URL of referring page.'),
    'schema field' => 'referer',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['hostname'] = array(
    'label' => t('Hostname'),
    'type' => 'text',
    'description' => t('Hostname of the user who triggered the event.'),
    'schema field' => 'hostname',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['timestamp'] = array(
    'label' => t('Date'),
    'type' => 'date',
    'description' => t('Unix timestamp of when event occurred.'),
    'schema field' => 'timestamp',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
}
