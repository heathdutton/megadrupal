<?php

/**
 * @file
 * Restrict file upload, if MIME type doesn't match extension.
 *
 * Also autocomplete can be turned off using this module.
 *
 * This is the main module file for secure form.
 */

/**
 * Implements hook_help().
 */
function secure_form_help($path, $arg) {
  switch ($path) {
    case 'admin/help#secure_form':
      return '<p>' . t('The secure form is a utility module to restrict file upload, if there is a mismatch between the MIME type and the extension of the file.  It also provides an option to set the autocomplete property off for form fields. A privileged user can manage (enable/disable) both these options from <a href ="@ctd">configuration section</a>', array('@ctd' => url('http://192.168.0.47/drupal_RnD3/admin/config/content/secure-form'))) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function secure_form_permission() {
  return array(
    'administer secure form' => array(
      'title' => t('Administer secure form'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function secure_form_menu() {
  $items = array();

  $items['admin/config/content/secure-form'] = array(
    'title' => 'Secure form',
    'description' => 'Restrict file upload, if there is a mismatch between MIME type and file extension. Also allows to turn off form autocomplete option.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('secure_form_settings'),
    'access arguments' => array('administer secure form'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form to manage module configurations.
 */
function secure_form_settings() {
  $function_available = NULL;
  if (function_exists('finfo_open') && function_exists('finfo_file')) {
    $function_available = TRUE;
  }
  elseif (function_exists('mime_content_type')) {
    $function_available = TRUE;
  }
  if (!empty($function_available)) {
    $form['secure_form_check_file'] = array(
      '#type' => 'checkbox',
      '#title' => t('Turn on file checker'),
      '#description' => t('When enabled, it will restrict file upload, if there is a mismatch between file MIME type and extension.'),
      '#default_value' => variable_get('secure_form_check_file'),
      '#weight' => 0,
    );
  }

  $form['secure_form_autocomplete_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn off form autocomplete'),
    '#description' => t('When enabled, it will turn off the autocomplete property on all user input forms.'),
    '#default_value' => variable_get('secure_form_autocomplete_form'),
    '#weight' => 1,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 *
 * Set autocomplete property off for user input forms, enabled in configuration.
 */
function secure_form_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('secure_form_autocomplete_form') == 1) {
    $form['#attributes']['autocomplete'] = 'off';
  }
}

/**
 * Implements hook_file_validate().
 *
 * Check the MIME type and the extension of the file.
 * Return an error, if there is a mismatch.
 */
function secure_form_file_validate($file) {
  if (variable_get('secure_form_check_file') == 1) {
    $file_mime = $original_mime = "";
    $file_uri = $file->uri;
    $path = drupal_realpath($file_uri);

    // Check mime_content_type of file, if function available.
    if (function_exists('mime_content_type')) {
      $file_mime = $file->filemime;
      $original_mime = mime_content_type($path);
    }
    // Check FILEINFO_MIME_TYPE, if required functions are available.
    elseif (function_exists('finfo_open') && function_exists('finfo_file')) {
      $file_mime = $file->filemime;
      $finfo = finfo_open(FILEINFO_MIME_TYPE);
      $original_mime = finfo_file($finfo, $path);
    }

    // Deny upload and set error, mismatch in MIME type & extension.
    if ($original_mime != $file_mime) {
      try {
        unset($file);
        drupal_unlink($path);
      }
      catch (Exception $e) {
        // Capture any exception raised to be recorded in watchdog.
        watchdog_exception('secure_form', $e, $e->getMessage());
      }

      $errors[] = t('Oops, looks you have uploaded a corrupted file. We do not allow such things here. We are a professional website!');

      return $errors;
    }
  }
}
