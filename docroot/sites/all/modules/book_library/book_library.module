<?php
/**
 * @file
 * Allow books to be categorized like in a library.
 */

/**
 * Implements hook_menu().
 */
function book_library_menu() {
  $items['admin/content/book/category'] = array(
    'title' => 'Book Categories',
    'description' => "Manage your site's book categories.",
    'page callback' => 'book_library_category_admin_overview',
    'access arguments' => array('administer book outlines'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'book_library.admin.inc',
    'weight' => 5,
  );
  $items['admin/content/book/category/add'] = array(
    'title' => 'Book Category Management - Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('book_library_category_admin_edit'),
    'access arguments' => array('administer book outlines'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'book_library.admin.inc',
  );
  $items['admin/content/book/category/%book_library_category'] = array(
    'title' => 'Book Category Management - Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('book_library_category_admin_edit', 4),
    'access arguments' => array('administer book outlines'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'book_library.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function book_library_menu_alter(&$menu) {
  $menu['admin/content/book']['page callback'] = 'drupal_get_form';
  $menu['admin/content/book']['page arguments'] = array('book_library_manage_books_form');
}

/**
 * Implements hook_theme().
 */
function book_library_theme() {
  return array(
    'book_library_manage_books_form' => array(
      'render element' => 'form',
    ),
    'book_library_category_admin_edit' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_query_alter().
 *
 * This will attempt to add categories to books by default when loading full lists.
 */
function book_library_query_alter(&$query) {
  if ($query->hasTag('node_access')) {
    $tables =& $query->getTables();
    foreach ($tables as $table) {
      // This is how book_get_books makes it calls.
      // implement hook_query_alter() and look for the book_get_books() call. Add in our book categories.
      if ($table['type'] === NULL && $table['table'] === 'book') {
        $value = $query->leftJoin('book_library', 'bl', 'bl.nid=b.nid');
        $value = $query->leftJoin('book_library_category', 'blc', 'blc.category=' . $value . '.category');
        $query->addField($value, 'category');
        $query->addField($value, 'name', 'category_name');
        return;
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function book_library_node_load($nodes, $types) {
  $load = array();
  foreach ($nodes as $node) {
    if (!empty($node->book)) {
      $load[$node->book['bid']] = $node->book['bid'];
    }
  }
  if ($load) {
    $result = book_library_book_category_load($load);
    foreach ($nodes as $node) {
      if (!empty($node->book)) {
        $node->book['category'] = isset($result[$node->book['bid']]) ? $result[$node->book['bid']] : NULL;
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function book_library_node_delete($node) {
  if (!empty($node->book['bid'])) {
    if ($node->nid == $node->book['bid']) {
      db_delete('book_library')
        ->condition('nid', $node->nid)
        ->execute();
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Reorganize the select form for categroies.
 *
 * @see book_pick_book_nojs_submit()
 */
function book_library_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  if (!empty($form['book'])) {
    $options = array();
    $nid = isset($node->nid) ? $node->nid : 'new';

    if (isset($node->nid) && ($nid == $node->book['original_bid']) && ($node->book['parent_depth_limit'] == 0)) {
      // This is the top level node in a maximum depth book and thus cannot be moved.
      return;
    }
    else {
      $unknown = array();
      foreach (book_get_books() as $book) {
        if (!empty($book['category'])) {
          $options[$book['category_name']][$book['nid']] = $book['title'];
        }
        else {
          $unknown[$book['nid']] = $book['title'];
        }
      }
      ksort($options);
      if (!empty($unknown)) {
        $options[t('--- Uncategorized Books ---')] = $unknown;
      }
    }

    if (user_access('create new books') && ($nid == 'new' || ($nid != $node->book['original_bid']))) {
      // The node can become a new book, if it is not one already.
      $options = array($nid => '<' . t('create a new book') . '>') + $options;
    }
    if (!$node->book['mlid']) {
      // The node is not currently in the hierarchy.
      $options = array(0 => '<' . t('none') . '>') + $options;
    }

    $form['book']['bid']['#options'] = $options;
  }
}

/**
 * Menu callback for managing books.
 *
 * See @book_admin_overview
 */
function book_library_manage_books_form($form, $form_state, $category = NULL) {
  $form = array();

  if ($category && is_string($category)) {
    $category = book_library_category_load($category);
  }
  $all_categories = array('' => t('<select category>')) + book_library_get_categories();

  $form['books'] = array();

  // Add any recognized books to the table list.
  foreach (book_get_books() as $book) {
    // Only show books in this category when passed in.
    if ($category && (empty($book['category']) || $book['category'] != $category->category)) {
      continue;
    }
    $form['books'][$book['nid']] = array(
      '#type' => 'select',
      '#options' => $all_categories,
      '#default_value' => $book['category'],
      '#book' => $book,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Save"),
  );

  return $form;
}

/**
 * Theme the administrative form.
 */
function theme_book_library_manage_books_form(&$vars) {
  $form =& $vars['form'];
  $headers = array(t('Category'), t('Book'), t('Operations'));
  $rows = array();

  foreach (element_children($form['books']) as $nid) {
    if (!is_numeric($nid)) {
      continue;
    }
    $book = $form['books'][$nid]['#book'];
    $rows[] = array(
      drupal_render($form['books'][$nid]),
      l($book['title'], $book['href'], $book['options']),
      l(t('edit order and titles'), 'admin/content/book/' . $book['nid'])
    );
  }

  if (empty($vars['books_only'])) {
    drupal_render($form['books']);
  }
  unset($form['#theme']);
  return theme('table', array('header' => $headers, 'rows' => $rows, 'empty' => t('No books available.')))
    . (empty($vars['books_only']) ?
      drupal_render($form['submit'])
      . l(t('Add Category'), 'admin/content/book/category/add', array('query' => drupal_get_destination())) . drupal_render($form) : '');
}

/**
 * Submit callback for managing books.
 */
function book_library_manage_books_form_submit($form, $form_state) {
  foreach (element_children($form['books']) as $nid) {
    if (!is_numeric($nid)) {
      continue;
    }
    if ($form_state['values'][$nid] != $form['books'][$nid]['#default_value']) {
      if ($form['books'][$nid]['#default_value'] && !$form_state['values'][$nid]) {
        db_delete('book_library')
          ->condition('nid', $nid)
          ->execute();
      }
      else {
        db_merge('book_library')
          ->key(array('nid' => $nid))
          ->fields(array(
            'category' => $form_state['values'][$nid],
          ))
          ->execute();
      }
    }
  }
  drupal_set_message(t('Successfully updated categories.'));
}

/**
 * Load a specific book category.
 */
function book_library_category_load($category_name) {
  return db_select('book_library_category', 'bl')
    ->fields('bl')
    ->condition('bl.category', $category_name)
    ->execute()
    ->fetchObject();
}

/**
 * Load the category for the given books.
 */
function book_library_book_category_load($nids) {
  $query = db_select('book_library', 'bl')
    ->fields('bl')
    ->condition('bl.nid', $nids);
  $query->leftJoin('book_library_category', 'blc', 'blc.category=bl.category');
  $query->fields('blc', array('name'));
  return $query->execute()->fetchAllAssoc('nid');
}

/**
 * Get all of the categories in the system.
 */
function book_library_get_categories() {
  return db_select('book_library_category', 'bl')
    ->fields('bl', array('category', 'name'))
    ->orderBy('name')
    ->execute()
    ->fetchAllKeyed();
}
