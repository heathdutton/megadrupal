<?php

/**
 * @file
 * Gallery Archive module for Drupal 7.
 */

/**
 * Implements hook_menu().
 */
function gallery_archive_menu() {
  $items['node/%node/gallery_archive'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Download Gallery',
    'page callback' => 'gallery_archive_gallery',
    'page arguments' => array(1),
    'access callback' => '_gallery_archive_gallery_access',
    'access arguments' => array(1),
    'weight' => 2,
    'file' => 'gallery_archive.pages.inc',
  );
  $items['admin/config/media/gallery-archive'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Gallery Archive',
    'description' => t('Configure Gallery Archive module configuration and settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_archive_settings_form'),
    'access arguments' => array('administer gallery archive'),
    'file' => 'gallery_archive.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function gallery_archive_permission() {
  return array(
    'download gallery archive' => array(
      'title' => t('Download Gallery Archive'),
      'description' => t('Allow downloading of image gallery archive.'),
    ),
    'administer gallery archive' => array(
      'title' => t('Administer Gallery Archive'),
      'description' => t('Configure Gallery Archive settings and configuration'),
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * @todo Stop using drupal_realpath(). We should be tracking the compressed
 *   files separately so it's easier to track them and delete them.
 */
function gallery_archive_cron() {
  // If a deletion frequency has been set, delete archived galleries.
  if (variable_get('gallery_archive_deletion_frequency', 0)) {
    $gallery_archive_uri = file_build_uri('gallery-archives');
    $files = glob(drupal_realpath($gallery_archive_uri) . '/*.gz');
    foreach ($files as $file) {
      file_unmanaged_delete($file);
    }
  }
}

/**
 * Access callback for 'Download Gallery' tab.
 */
function _gallery_archive_gallery_access($node) {
  $gallery_node_type = variable_get('gallery_archive_gallery_content_type', 0);
  return ($node->type == $gallery_node_type && user_access('download gallery archive'));
}

/**
 * Function to recursively remove a directory.
 *
 * @param $dir
 *   Directory that should be removed.
 */
function _gallery_archive_rrmdir($dir) {
  if (is_dir($dir)) {
    $objects = scandir($dir);
    foreach ($objects as $object) {
      if ($object != "." && $object != "..") {
        if (filetype($dir . "/" . $object) == "dir") _gallery_archive_rrmdir($dir . "/" . $object); else unlink($dir . "/" . $object);
      }
    }
  reset($objects);
  rmdir($dir);
  }
}

/**
 * API function to create a .tar.gz archive of a given directory.
 *
 * @param $dir_path
 *   The path to the directory to be archived.
 * @param $archive_name
 *   The name for the archive (example: "$archive_name".tar.gz).
 * @param $delete_path
 *   Set to TRUE if you'd like to delete the original directory path.
 *   Set to FALSE if you'd like to leave the original directory alone.
 */
function gallery_archive_tgz_archive_dir($dir_path, $archive_name, $delete_path = TRUE) {
  // Drupal's files directory.
  $files_path = drupal_realpath(file_default_scheme() . '://');

  // Create a new directory (if not already present) to store archives.
  if (!is_dir("$files_path/gallery-archives")) {
    mkdir("$files_path/gallery-archives", 0775);
  }

  // Create the archive.
  exec("tar -C $dir_path -zcvf $files_path/gallery-archives/$archive_name.tar.gz .");

  if ($delete_path == TRUE) {
    // Delete the temporary directory.
    _gallery_archive_rrmdir($dir_path);
  }
}

/**
 * Function to format filesize value into human-readable form.
 *
 * @param $bytes
 *   Number of bytes (integer).
 */
function _gallery_archive_format_bytes($bytes) {
  if ($bytes < 1024) return $bytes . ' B';
  elseif ($bytes < 1048576) return round($bytes / 1024, 2) . ' KB';
  elseif ($bytes < 1073741824) return round($bytes / 1048576, 2) . ' MB';
  elseif ($bytes < 1099511627776) return round($bytes / 1073741824, 2) . ' GB';
  else return round($bytes / 1099511627776, 2) . ' TB';
}
