<?php

/**
 * @file
 * If the current website is under version control with SVN, then this module
 * allows privileged users to commit and push changes.
 */
define('SVN_OK', 0);
define('SVN_ERROR', 1);

/**
 * Implements hook_permission().
 */
function svn_permission() {
  return array(
    'administer subversion' => array(
      'title' => t('Administer SVN'),
      'description' => t('View and modify the configuration settings for the SVN module.'),
    ),
    'commit subversion' => array(
      'title' => t('Commit changes to SVN'),
      'description' => t('Commit changes to subversion.'),
    ),
    'tag subversion' => array(
      'title' => t('Create tags in SVN'),
      'description' => t('Create tags in subversion.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function svn_help($path, $arg) {
  switch ($path) {
    case 'subversion':
    case 'admin/help#subversion':
      return '<p>' . t('Subversion is a code management system used by
        developers to collaborate and track modifications of code.') . '</p>';
    case 'admin/subversion':
      return '<p>' . t('Subversion is a code management system used by
        developers to collaborate and track modifications of code.') . '</p>' .
        '<p>' . t('This module is limited by your svn settings. If your code is
        not in under version control this module will warn you about it.') . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function svn_menu() {
  $items = array();

  $items['admin/svn'] = array(
    'title' => 'SVN',
    'description' => 'Commit and tag changes to the SVN repository.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('svn_commit_form'),
    'access arguments' => array('commit subversion'),
  );
  $items['admin/svn/commit'] = array(
    'title' => 'Commit',
    'description' => 'Commit changes to the SVN repository.',
    'access arguments' => array('commit subversion'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/svn/tag'] = array(
    'title' => 'Tag',
    'description' => 'Tag a release for the SVN repository.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('svn_tag_form'),
    'access arguments' => array('tag subversion'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/svn/settings'] = array(
    'title' => 'SVN Settings',
    'description' => 'Modify the SVN settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('svn_admin_settings'),
    'access arguments' => array('administer subversion'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/svn/reload/settings'] = array(
    'title' => 'Reload Config Settings',
    'description' => 'Reload configuration settings based on the working copy data',
    'page callback' => 'svn_settings_reset',
    'access arguments' => array('administer subversion'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback for /admin/svn.
 */
function svn_commit_form($form, &$form_state) {
  if (_svn_form_checkpoint($form)) {
    $form['commit'] = array(
      '#type' => 'fieldset',
      '#title' => t('SVN Commit'),
    );

    // Get the SVN status.
    $svn_status = _svn_get_status(TRUE);

    $form['commit']['status'] = array(
      '#title' => t('SVN Status'),
      '#type' => 'textarea',
      '#disabled' => TRUE,
      '#rows' => 20,
      '#default_value' => implode("\n", $svn_status),
      '#description' => t('Here you can see the current status of your working 
        copy. Notice only ? adn M items will be commited. The presence of C, X,
        and ~ will prevent you from making submits as it means your working copy
        is not clean'),
    );

    $form['commit']['message'] = array(
      '#title' => t('Commit Message'),
      '#required' => TRUE,
      '#type' => 'textarea',
      '#description' => t('Please enter a description of the changes you made'),
    );
    // Are there any replacement patterns that are worthwhile for the end user?
    // _svn_form_token_help($form['commit']);

    $form['buttons']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Commit'),
    );
    
    // Check the health of the working copy
    _svn_check_commit_health($svn_status, $form);
  }
  return $form;
}

/**
 * Commit form callback form.
 */
function svn_commit_form_submit($form, &$form_state) {
  $message = $form_state['values']['message'];
  svn_commit($message);
}

/**
 * Helper funcition, checks for the existance of files in a state that prevents
 * a successful commit.
 */
function _svn_check_commit_health($svn_status, &$form) {
  $errors = array();

  // Array of file svn states that should prevent a commit.
  $bad_states = svn_bad_states();

  // Paths to be ignored
  $ignore_paths = svn_ignore_paths();

  $lines = $svn_status;

  foreach ($lines as $line_no => $line) {
    $path = trim(substr($line, 6));
    if (in_array($path, $ignore_paths)) {
      continue;
    }

    if (in_array($line[0], $bad_states)) {
      $errors[$line_no] = t('!line is !state', array(
        '!line' => $path,
        '!state' => svn_status_definition($line[0]),
      ));
    }
  }
  if (!empty($errors)) {
    $form['commit']['message']['#access'] = FALSE;
    $form['buttons']['submit']['#access'] = FALSE;
    drupal_set_message(t('Your working copy is not eligible for GUI commits.
      Please contact your Systems Administrator'), 'error');
    foreach ($errors as $line_no => $message) {
      drupal_set_message($message, 'warning');
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Commits stuff
 */
function svn_commit ($message) {
  // @TODO: We can certainly pass the status around, but it is probably safest
  // to just collect it again.
  $svn_status = _svn_get_status(TRUE);
  $ignore_paths = svn_ignore_paths();
  $committable_states = svn_committable_states();
  
  $result = array();
  
  foreach ($svn_status as $line_no => $line) {
    $path = trim(substr($line, 6));
    if (in_array($path, $ignore_paths)) {
      continue;
    }
    if (in_array($line[0], $committable_states)) {
      $added[] = $path;
      continue;
    }

    // Files that need to be added to version control.
    if ($line[0] == '?') {
      // The command
      $command = 'svn add ' . $path;

      // The execution.
      exec($command, $output, $return_var);
//      dvm($command, 'Command');
//      dvm($output, 'Output');
//      dvm($return_var, 'Return');

      if (!empty($output)) {
        $result[] = implode("\n", $output);
      }

      if ($return_var == 0) {
        $added[] = $path;
      }      
    }
    unset($output);
    unset($return_var);
  }
  if (!empty($added)) {
    // The command
    // $command = 'svn ci -m"' . check_plain($message) . '" --non-interactive ' . implode(' ', $added);
    $command = 'svn ci -m "' . check_plain($message) . '" --non-interactive';
    svn_add_authentication($command);

    // The execution.
    exec($command, $output, $return_var);
    // dvm($command, 'Command');
    // dvm($output, 'Output');
    // dvm($return_var, 'Return');

    if ($return_var == 0) {
      drupal_set_message(t('Commit was successful !output', array('!output' => implode('<br/>', $output))), 'status');
    }
    else {
      drupal_set_message(t('Commit was unsuccessful !output', array('!output' => implode('<br/>', $output))), 'error');
    }
  }
}

/**
 * Helper function executes svn status and returns the output as an array or an
 * string with the imploded representation.
 */
function _svn_get_status($raw = FALSE) {
  // The command
  $command = 'svn status';

  // The execution.
  exec($command, $output, $return_var);

  // The results
  if ($return_var == 0 && !empty($output)) {
    if ($raw) {
      return $output;
    }
    return implode("\n", $output);
  }
  return FALSE;
}

/**
 * Menu callback for /admin/svn/tag.
 */
function svn_tag_form($form, &$form_state) {
  if (_svn_form_checkpoint($form)) {
    $form['tag'] = array(
      '#type' => 'fieldset',
      '#title' => t('SVN Tag Changes for Release'),
    );

    // Get the tags
    $prefixes = _svn_get_tag_prefixes();
    if (!empty($prefixes)) {
      $form['tag']['tag'] = array(
        '#title' => t('Tag prefix'),
        '#description' => t('Please select the tag prefix that matches the
          staging environment where you want to push your changes to.'),
        '#type' => 'select',
        '#options' => $prefixes,
      );
      $form['tag']['message'] = array(
        '#title' => t('Tag Message'),
        '#description' => t('Describe the changes that are included in this
          tag. SVN Tokens are available, see below.'),
        '#type' => 'textarea',
        '#default_value' => t("Tagging release [svn:release]. \nChanges include: \n\n"),
      );
      _svn_form_token_help($form['tag']);

      $next_sequence = _svn_generate_tag(array_shift(array_keys($prefixes)));
      if ($next_sequence) {
        $form['tag']['tag']['#ajax'] = array(
          'callback' => 'svn_ajax_next_tag_callback',
          'wrapper' => 'targeted_tag'
        );
        $form['tag']['tag']['#description'] .= '' . t('Change this dropdown to
          preview the name of the tag that will be created.');
        $form['tag']['example'] = array(
          '#type' => 'item',
          '#weight' => -10,
          '#title' => t('Next release tag sequence'),
          '#prefix' => '<div id="targeted_tag">',
          '#markup' => $next_sequence,
          '#suffix' => '</div>',
        );
      }
      $form['buttons']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Tag a Release'),
      );
    }
  }
  return $form;
}

/**
 * Tagging form submit callback.
 */
function svn_tag_form_submit($form, &$form_state) {
  if (isset($form_state['values']['tag'])
    && !empty($form_state['values']['tag'])) {

    $result = svn_create_tag($form_state['values']['tag'], $form_state['values']['message']);

    if (!$result) {
      drupal_set_message(t('Ooops, we could not create the tag. Check the
        watchdog logs for details.'), 'error');
    }
  }
}

/**
 * Tags the current working copy.
 * In esscence will create an identical copy of the current working directory in
 * a different folder in the SVN repository.
 */
function svn_create_tag($stage_prefix, $message = NULL) {
  // Get the sitewide SVN variables.
  $svn = svn_load_settings();

  // Prepare a default commit message;
  if (empty($message)) {
    $message = t('Tagging release [svn:release].');
  }
  
  // Set the tag specific variables.
  $release = _svn_generate_tag($stage_prefix);
  $svn['release'] = $release;

  // Token replacement
  $message = token_replace($message, array('svn' => $svn));

  // Build the command
  $command = trim('svn copy ' . $svn['svn_url'] . ' ' . $svn['svn_root'] . '/tags/' . $svn['release'] . ' -m "' . check_plain($message) . '";');
  svn_add_authentication($command);

  exec($command, $output, $return_var);
  $success = $return_var == 0;
  
  // dvm($command, 'Command');
  // dvm($output, 'Output');
  // dvm($return_var, 'Return');
  
//  drupal_set_message(t('Executed !command', array(
//    '!command' => $command,
//  )), ($return_var == 0 ? 'status' : 'warning'));

  if (!$success && !empty($output)) {
    drupal_set_message(t('Output: !output' , array(
      '!output' => implode('<br/>', array_filter($output)),
    )), 'error');
  }
  else {
    drupal_set_message(t('Created new tag !tag: !output' , array(
      '!tag' => $svn['release'],
      '!output' => implode('<br/>', array_filter($output)),
    )), 'status');
  }
  return $success;
  // system($command, $return);
}

/**
 * Ajax callback function for the tag form.
 */
function svn_ajax_next_tag_callback($form, &$form_state) {

  // Get the prefix from the posted form.
  $prefix = $form_state['values']['tag'];

  // Get the next sequence
  $next_sequence = _svn_generate_tag($prefix);
  if (isset($next_sequence)) {
    return $form['commit']['example'] = array(
      '#type' => 'item',
      '#weight' => -10,
      '#title' => t('Next release tag sequence'),
      '#prefix' => '<div id="targeted_tag">',
      '#markup' => $next_sequence,
      '#suffix' => '</div>',
    );
  }
}

/**
 * Menu callback for /admin/svn/settings.
 */
function svn_admin_settings() {
  global $conf;

  $form['svn_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('SVN Settings'),
    '#weight' => 5,
    '#collapsible' => TRUE,
  );
  // SVN URL
  $form['svn_settings']['svn_url'] = array(
    '#type' => 'textfield',
    '#title' => t('SVN URL'),
    '#description' => t('Current connection string to your SVN'),
    '#default_value' => variable_get('svn_url', FALSE),
    '#disabled' => TRUE,
  );
  // SVN Root
  $form['svn_settings']['svn_root'] = array(
    '#type' => 'textfield',
    '#title' => t('SVN Root'),
    '#description' => t('The root path to your SVN Repository'),
    '#default_value' => variable_get('svn_root', FALSE),
    '#disabled' => TRUE,
  );
  // SVN Branch
  $form['svn_settings']['svn_branch'] = array(
    '#type' => 'textfield',
    '#title' => t('SVN Branch'),
    '#description' => t('The current branch'),
    '#default_value' => variable_get('svn_branch', FALSE),
    '#disabled' => TRUE,
  );

  $form['svn_environment'] = array(
    '#type' => 'fieldset',
    '#title' => t('SVN Environment'),
    '#weight' => 10,
    '#collapsible' => TRUE,
  );
  // SVN Stage Name
  $form['svn_environment']['svn_stage_name'] = array(
    '#type' => 'textfield',
    '#title' => t('SVN Stage Name'),
    '#description' => t('The name of this staging instance. i.e: dev.'),
    '#default_value' => variable_get('svn_stage_name', FALSE),
  );

  // SVN Stage Name
  $form['svn_environment']['svn_tag_name'] = array(
    '#type' => 'textfield',
    '#title' => t('SVN Tag Name'),
    '#description' => t('The tag name of this drupal instance. i.e: corp.'),
    '#default_value' => variable_get('svn_tag_name', FALSE),
  );
  
  $form['svn_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('SVN Authentication'),
    '#weight' => 10,
    '#description' => t('Optional fields. Use only if your SVN repo requires authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => variable_get('svn_username', FALSE) != FALSE && variable_get('svn_password', FALSE) != FALSE,
  );
  $form['svn_auth']['svn_username'] = array(
    '#type' => 'textfield',
    '#title' => t('SVN Username'),
    '#default_value' => variable_get('svn_username', FALSE),
  );
  $form['svn_auth']['svn_password'] = array(
    '#type' => 'textfield',
    '#title' => t('SVN Password'),
    '#default_value' => variable_get('svn_password', FALSE),
  );

  // Check if the variable is present in the settings.php file and make it
  // readonly.
  $conf_vars = array_keys($form['svn_environment']);
  foreach ($conf_vars as $var) {
    if (array_key_exists($var, $conf)) {
      $form['svn_environment'][$var]['#disabled'] = TRUE;
      $form['svn_environment'][$var]['#description'] .= ' ' . t('This variable is set on the settings.php file');
    }
  }

  $form['actions']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset Variables'),
    '#submit' => array('svn_settings_reset'),
    '#weight' => 20,
  );
  return system_settings_form($form);
}

/**
 * Helper function. Checks if the current Drupal instance is under SVN version
 * control.
 */
function svn_is_working_copy() {
  $svn = file_scan_directory(DRUPAL_ROOT . '/.svn', '/.*/i', array('key' => 'name'));
  return array_key_exists('entries', $svn);
}

/**
 * Form helper function. Checks if the current site is a working copy under SVN
 * version control. If it isn't it will add a markup item to your $form array.
 */
function _svn_form_checkpoint(&$form) {
  if (!svn_check_settings()) {
    $svn_settings_page = l('SVN Settings page', 'admin/svn/settings');
    $reload_your_svn_settings = l('reload your SVN settings', 'admin/svn/reload/settings');
    $form['info'] = array(
      '#markup' => t('Your Drupal instance does not seem to be under SVN version
        control.'),
    );
    if (user_access('administer subversion')) {
      $form['info']['#markup'] .= t('You can !reload_your_svn_settings or confirm your settings at
        the !svn_settings_page', array(
        '!svn_settings_page' => $svn_settings_page,
        '!reload_your_svn_settings' => $reload_your_svn_settings,
        ));
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Helper function. Returns an array of environement prefixes to be used for
 * SVN tags.
 */
function _svn_get_tag_prefixes() {
  // Start off with our two supported stages: QA and Prod.
  $prefixes = array(
    'qa' => t('QA'),
    'prod' => t('Production')
  );

  // Expose it to other modules so that they can alter it using
  // hook_svn_tag_prefix_alter()
  drupal_alter('svn_tag_prefix', $prefixes);

  // Return the combined results.
  return $prefixes;
}

/**
 * Helper function. Generates a tag
 * @param type $prefix
 */
function _svn_generate_tag($stage_prefix) {
  $svn_root = variable_get('svn_root', FALSE);
  $svn_tag_name = variable_get('svn_tag_name', FALSE);
  $svn_date = svn_get_date_code();
  $svn_seq = _svn_get_next_id($stage_prefix);

  return $stage_prefix . '-' . $svn_tag_name . '-' . $svn_date . '-' . $svn_seq;
}

/**
 * Helper function. Lists the existing tags matching the stage_name, tag_name
 * and current date.
 */
function _svn_get_next_id($stage_prefix = NULL) {
  $svn_root = variable_get('svn_root', FALSE);
  $svn_tag_name = variable_get('svn_tag_name', FALSE);
  $svn_date = svn_get_date_code();

  // dvm('Checking seq number for : ' . $stage_prefix . '-' . $svn_tag_name . '-' . $svn_date);

  if (!$svn_root || !$svn_tag_name) {
    drupal_set_message(t('Your SVN settings seem to be missing. You can find
      them in your settings.php file or you can override them at the
      !svn_settings_page', array('!svn_settings_page' => l('SVN settings page', 'admin/svn/settings'))), 'error', FALSE);
    return FALSE;
  }

  // @TODO: Find a better way to do this. :S
  $last_num = 0;
  $command = 'svn list ' . $svn_root . '/tags';
  svn_add_authentication($command);

  if (isset($stage_prefix)) {
    $command .= ' | grep ' . $stage_prefix . '-' . $svn_tag_name . '-' . $svn_date;
  }

  exec($command, $output, $return_var);

  // dvm($command, 'Command');
  // dvm($output, 'output');
  // dvm($return_var, 'return');

  if (!empty($output)) {
    foreach ($output as $num => $line) {
      $parts = explode('-', $line);
      $this_num = (int) $parts[3];
      if ($this_num > $last_num) {
        $last_num = $this_num;
      }
    }
  }

  // Pad the number with leading zeros up to 4 digits.
  return str_pad(++$last_num, 4, '0', STR_PAD_LEFT);
}

/**
 * Menu callback. Forces a reset of the variables required by this module.
 */
function svn_settings_reset() {
  svn_setup_variables(TRUE);
  drupal_goto('admin/svn/settings');
}

/**
 * Helper function. Sets all the variables required by this module.
 */
function svn_setup_variables($reset = FALSE) {
  $check = svn_check_settings();
  if ($check && !$reset) {
    return;
  }

  $svn_settings_page = l('SVN Settings page', 'admin/svn/settings');
  $matches = array();
  // Make sure we have t() or st() depending on where and when we are running.
  $t = get_t();

  $command = 'cd ' . DRUPAL_ROOT . '; svn info';
  svn_add_authentication($command);
  
  exec($command, $output, $return_var);
  if ($return_var == 0 && is_array($output) && !empty($output)) {
    foreach ($output as $num => $line) {
      if (substr($line, 0, 5) != 'URL: ') {
        // These aren't the droids you're looking for.
        continue;
      }

      $svn_url = substr($line, 5);

      if (preg_match('/^(?P<svn_root>.*)(?P<svn_branch>\/[tags|trunk|branches].*)$/', $svn_url, $matches)) {
        // Set variables.
        variable_set('svn_root', $matches['svn_root']);
        variable_set('svn_branch', $matches['svn_branch']);
        variable_set('svn_url', $svn_url);

        // Success message
        drupal_set_message($t('We have set your svn root to be !svn_root.
          Please verify this setting on the !svn_settings_page', array(
            '!svn_root' => $matches['svn_root'],
            '!svn_settings_page' => $svn_settings_page,
          )));
        return TRUE;
      }
    }
  }
  else {
    drupal_set_message($t('We could not execute $svn info. Please make sure
      this instance is running on a working copy that is under SVN version
      control. You can set the variables on the !svn_settings_page', array(
        '!svn_settings_page' => $svn_settings_page)), 'error');
  }
  return FALSE;
}

/**
 * Helper function. Returns a formatted date value for consistency sake.
 */
function svn_get_date_code($timestamp = NULL) {
  if (!isset($timestamp)) {
    $timestamp = time();
  }
  return date('Ymd', $timestamp);
}

/**
 * Return an array with all the variables used by this module.
 */
function svn_get_variables() {
  return array(
    'svn_url',
    'svn_branch',
    'svn_root',
    'svn_tag_name',
    'svn_stage_name',
  );
}

/**
 * Checks that all the variables are set
 */
function svn_check_settings() {
  $vars = svn_get_variables();
  if (!is_array($vars) || empty($vars)) {
    return FALSE;
  }

  foreach ($vars as $var) {
    $test = variable_get($var, NULL);
    if (empty($test)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Helper function. Returns an array with all the site-wide SVN settings
 */
function svn_load_settings() {
  $settings = array();
  $vars = svn_get_variables();

  foreach ($vars as $var) {
    $settings[$var] = variable_get($var, NULL);
  }

  return array_filter($settings);
}

/**
 * Implements hook_tokens()
 */
function svn_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type != 'svn' || !isset($data['svn']) || empty($data['svn'])) {
    return;
  }

  $replacements = array();
  $svn = $data['svn'];

  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'url':
        $replacements[$original] = $svn['svn_url'];
        break;
      case 'branch':
        $replacements[$original] = $svn['svn_branch'];
        break;
      case 'root':
        $replacements[$original] = $svn['svn_root'];
        break;
      case 'tag_name':
        $replacements[$original] = $svn['svn_tag_name'];
        break;
      case 'stage_name':
        $replacements[$original] = $svn['svn_stage_name'];
        break;
      case 'release':
        $replacements[$original] = $svn['release'];
        break;
    }
  }
  return $replacements;
}

/**
 * Implements hook_token_info().
 */
function svn_token_info() {
  $type = array(
    'name' => t('SVN'),
    'description' => t('Tokens related to svn commits and tags.'),
    'needs-data' => 'svn',
  );

  // Site-wide settings
  $svn['url'] = array(
    'name' => t('SVN URL'),
    'description' => t('The svn url to the current working copy.'),
  );
  $svn['branch'] = array(
    'name' => t('SVN Branch'),
    'description' => t('The branch for the current working copy.'),
  );
  $svn['root'] = array(
    'name' => t('SVN Root'),
    'description' => t('The base path where branches and tags are found.'),
  );
  $svn['tag_name'] = array(
    'name' => t('SVN Environment Tag Name'),
    'description' => t('The environment tag name. i.e.: QA or Prod'),
  );
  $svn['stage_name'] = array(
    'name' => t('SVN Stage Name'),
    'description' => t('The identifier of the current stage. i.e: Dev or Auth'),
  );

  // Core tokens for svn.
  $svn['release'] = array(
    'name' => t('SVN Release Sequence'),
    'description' => t("The unique ID for an SVN release."),
  );

  return array(
    'types' => array('svn' => $type),
    'tokens' => array('svn' => $svn),
  );
}

/**
 * Returns the token helper form element.
 */
function _svn_form_token_help(&$element, $key = 'svn') {

  if (module_exists('token')) {
    $element[$key . '_token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $element[$key . '_token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#global_types' => FALSE,
      '#token_types' => array($key),
    );
  }
  else {
    $element[$key]['#description'] = t(
      'Get the <a href="@token">token</a> module for more options.',
      array('@token' => url('http://www.drupal.org/project/token'))
    );
  }
}

/**
 * Helper function
 */
function svn_committable_states() {
  return array('A', 'M', 'D');
}

/**
 * Helper function
 */
function svn_bad_states() {
  return array('C', 'X', '~', '!');
}

/**
 * Helper function
 */
function svn_ignore_paths() {
  return array('.', '..', '.git', '.svn');
}

/**
 * Helper function
 */
function svn_status_definition($char = NULL) {
// State explanations:
  $states = array(
    ' ' => t('unmodified'),
    'A' => t('scheduled for addition'),
    'D' => t('scheduled for deletion'),
    'M' => t('modified'),
    'C' => t('conflicted'),
    'X' => t('external definition'),
    'I' => t('ignored'),
    '?' => t('unversioned'),
    '!' => t('showing incomplete SVN information'),
    '~' => t('blocked'),
  );
  if (!empty($char) && array_key_exists($char, $states)) {
    return $states[$char];
  }
  
  return $states;
}

/**
 * Helper function. Appends authentication params to an SVN command.
 */
function svn_add_authentication(&$command){
  $username = variable_get('svn_username', NULL);
  $password = variable_get('svn_password', NULL);
  if (!empty($username) && !empty($password)) {
    $command .= ' --username=' . $username . ' --password=' . $password;
    return TRUE;
  }
  return FALSE;
}
