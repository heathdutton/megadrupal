<?php

/**
 * @file
 * Commerce Giftaid module file
 */

/**
 * Implements hook_enable().
 *
 * Add the gift aid field to all products types.
 */
function commerce_giftaid_enable() {
  commerce_giftaid_configure_product_types();
  commerce_giftaid_configure_line_item_types();
}

/**
 * Implements hook_modules_enabled().
 *
 * Add the commerce webform line items to new line item
 * types created by newly enabled modules.
 */
function commerce_giftaid_modules_enabled($modules) {
  commerce_giftaid_configure_product_fields($modules);
  commerce_giftaid_configure_line_item_fields($modules);
}

/**
 * Implements hook_permission().
 */
function commerce_giftaid_permission() {
  return array(
    'view giftaid report' => array(
      'title' => t('View giftaid report'),
      'description' => t('Access the giftaid report. Requires views module.'),
    ),
  );
}

/**
 * Configures the fields on product types provided by other modules.
 *
 * @param array $modules
 *   An array of module names whose product type fields should be configured;
 *   if left NULL, will default to all modules that implement
 *   hook_commerce_product_type_info().
 */
function commerce_giftaid_configure_product_fields($modules = NULL) {
  if (empty($modules)) {
    $modules = module_implements('commerce_product_type_info');
  }

  foreach ($modules as $module) {
    if (module_hook($module, 'commerce_product_type_info')) {
      $product_types = module_invoke($module, 'commerce_product_type_info');
      foreach ($product_types as $type => $product_type) {
        commerce_giftaid_configure_product_type($type);
      }
    }
  }
}

/**
 * Configures the fields on line item types provided by other modules.
 *
 * @param array $modules
 *   An array of module names whose line item type fields should be configured;
 *   if left NULL, will default to all modules that implement
 *   hook_commerce_line_item_type_info().
 */
function commerce_giftaid_configure_line_item_fields($modules = NULL) {
  if (empty($modules)) {
    $modules = module_implements('commerce_line_item_type_info');
  }

  foreach ($modules as $module) {
    if (module_hook($module, 'commerce_line_item_type_info')) {
      $line_item_types = module_invoke($module, 'commerce_line_item_type_info');
      foreach ($line_item_types as $type => $line_item_type) {
        commerce_giftaid_configure_line_item_type($type);
      }
    }
  }
}

/**
 * Configure the product types to include the
 * webform nid and sid fields.
 */
function commerce_giftaid_configure_product_types() {
  foreach (commerce_product_types() as $type => $product_type) {
    commerce_giftaid_configure_product_type($type);
  }
}

/**
 * Configure the line item types to include the
 * webform nid and sid fields.
 */
function commerce_giftaid_configure_line_item_types() {
  foreach (commerce_line_item_types() as $type => $line_item_type) {
    commerce_giftaid_configure_line_item_type($type);
  }
}

/**
 * Ensures a gift aid field exists on the specified product
 * bundle.
 *
 * @param string $bundle
 *   The name of a commerce line item bundle.
 */
function commerce_giftaid_configure_product_type($bundle) {
  commerce_giftaid_create_field('commerce_product', $bundle);
}

/**
 * Ensures a gift aid field exists on the specified line item
 * bundle.
 *
 * @param string $bundle
 *   The name of a commerce line item bundle.
 */
function commerce_giftaid_configure_line_item_type($bundle) {
  commerce_giftaid_create_field('commerce_line_item', $bundle);
}

/**
 * Creates a required, locked instance of the webform nid and sid
 * fields on the specified line item bundle.
 *
 * @param string $entity_type
 *   The entity_type to add the fields to.
 * @param string $bundle
 *   The bundle name of the entity the field instance will be attached to.
 */
function commerce_giftaid_create_field($entity_type, $bundle) {
  $field_name = 'commerce_product_giftaid';
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => $field_name,
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          0 => 'No',
          1 => 'Yes',
        ),
        'allowed_values_function' => '',
      ),
      'translatable' => '0',
      'type' => 'list_boolean',
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'default_value' => array(
        0 => array(
          'value' => 0,
        ),
      ),
      'deleted' => '0',
      'label' => t('Giftaid'),
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'description' => t('Whether the product can have gift aid applied onto it.'),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(
          'display_label' => 1,
        ),
        'type' => 'options_onoff',
        'weight' => '10',
      ),
      'display' => array(),
    );

    $entity_info = entity_get_info($entity_type);

    // Spoof the default view mode and node teaser so its display type is set.
    $entity_info['view modes'] += array(
      'default' => array(),
      'node_teaser' => array(),
    );

    foreach ($entity_info['view modes'] as $view_mode => $data) {
      $instance['display'][$view_mode] = array(
        'label' => 'above',
        'module' => 'list',
        'type' => 'list_default',
        'settings' => array(),
        'weight' => 5,
      );
    }

    field_create_instance($instance);
  }
}

/**
 * Implements hook_field_attach_create_bundle().
 *
 * Add our line item fields when a new line item bundle is created.
 */
function commerce_giftaid_field_attach_create_bundle($entity_type, $bundle) {
  if ($entity_type == 'commerce_product') {
    commerce_giftaid_configure_product_type($bundle);
  }
  elseif ($entity_type == 'commerce_line_item') {
    commerce_giftaid_configure_line_item_type($bundle);
  }
}

/**
 * Implements hook_commerce_checkout_pane_info().
 *
 * Define the giftaid checkout pane.
 */
function commerce_giftaid_commerce_checkout_pane_info() {
  $checkout_panes = array();
  $weight = 5;

  $checkout_panes['commerce_giftaid_pane'] = array(
    'title' => t('Gift aid'),
    'file' => 'commerce_giftaid.checkout_pane.inc',
    'page' => 'checkout',
  );

  return $checkout_panes;
}

/**
 * Implements hook_commerce_order_presave().
 *
 * Ensures the giftaid field is set appropriately on line item fields.
 */
function commerce_giftaid_commerce_order_presave($order) {
  if (isset($order->data['commerce_giftaid'])) {
    _commerce_giftaid_set_giftaid_order($order, $order->data['commerce_giftaid']);
  }
}

/**
 * Determine if an order is eligable for giftaid.
 *
 * @param commerce_order $order
 *   A commerce order to investigate.
 *
 * @return boolean
 *   TRUE if it is eligable for gift aid, FALSE if not.
 */
function commerce_giftaid_order_contains_eligible_items($order) {
  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items->value() as $line_item) {
    if (isset($line_item->commerce_product)) {
      $product = entity_metadata_wrapper('commerce_line_item', $line_item)->commerce_product->value();
      $gift_aid_eligible = entity_metadata_wrapper('commerce_product', $product)->commerce_product_giftaid->value();
      if ($gift_aid_eligible) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Ensure an order's line item giftaid fields are appropriately set.
 *
 * @param commerce_order $order
 *   The commerce order.
 * @param boolean $gift_aid
 *   TRUE for gift aid OK, FALSE for not.
 */
function _commerce_giftaid_set_giftaid_order($order, $gift_aid) {
  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $line_item) {

    // Check the fields exist on the line item and the product.
    $line_item_has_giftaid = isset($line_item->commerce_product_giftaid);
    $product_has_giftaid = isset($line_item->commerce_product) && isset($line_item->commerce_product->commerce_product_giftaid);
    if ($line_item_has_giftaid && $product_has_giftaid) {

      $eligible = $line_item->commerce_product->commerce_product_giftaid->value();
      $line_item_giftaid = ($eligible && $gift_aid) ? 1 : 0;

      // Update the line item's giftaid value if it's not correct.
      if ($line_item->commerce_product_giftaid->value() != $line_item_giftaid) {
        $line_item->commerce_product_giftaid = $line_item_giftaid;
        $line_item->save();
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_giftaid_views_api() {
  return array(
    'api' => 3,
  );
}
