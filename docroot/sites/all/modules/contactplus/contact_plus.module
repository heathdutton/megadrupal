<?php
/**
 * @file
 * Adds redirection paths and custom config to the core contact module
 */

/**
 * Implements hook_menu().
 */
function contact_plus_menu() {
  // Make a new menu item to serve as default tab.
  // This inherits the parent menu item properties (not otherwise set).
  // This line is an OVERRIDE of an existing menu item
  $items['admin/structure/contact/categories'] = array(
    'title' => 'Categories',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Create a new second tab for the new contact form settings.
  $items['admin/structure/contact/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contact_plus_site_form'),
    'access arguments' => array('administer contact forms'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/contact/settings/site'] = array(
    'title' => 'Site-wide',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Create a new second tab for the new contact form settings.
  $items['admin/structure/contact/settings/user'] = array(
    'title' => 'Per-user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contact_plus_user_form'),
    'access arguments' => array('administer contact forms'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}


/**
 * Create the system settings form for the sitewide contact form.
 */
function contact_plus_site_form($form, &$form_state) {
  // Textarea for global text:
  // Info re formats from drupal.org/update/modules/6/7#text_format.
  $defaults = array(
    'value' => '',
    'format' => filter_default_format(),
  );

  $current = variable_get('contact_plus_site_text', $defaults);

  $form['contact_plus_site_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Page title for the form'),
    '#default_value' => variable_get('contact_plus_site_title', ''),
    '#description' => t('Enter the form/page title. Default (empty) is "Contact" or your default language\'s alternative.'),
  );

  $form['contact_plus_site_text'] = array(
    '#title' => t('Site-wide introduction text'),
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#description' => t('Optionally add text here that will always appear above the site-wide contact form, regardless of category.'),
    '#default_value' => $current['value'],
    '#format' => $current['format'],
  );

  // Let's reuse the long options list for both.
  $options = array(
    'leave' => t('Leave the field alone - uses core form\'s default'),
    'visible' => t('Make the field visible but not editable'),
    'vset' => t('Make the field visible but not editable, but only if it already has a value (otherwise forced to editable).'),
    'hide' => t('Hide the field completely'),
    'hset' => t('Hide the field completely, but only if it already has a value (otherwise forced to editable).'),
  );

  // Radio for what to do with the name field.
  $form['contact_plus_site_name'] = array(
    '#type' => 'radios',
    '#title' => t('Alter name field'),
    '#default_value' => variable_get('contact_plus_site_name', 'leave'),
    '#description' => t('Change whether the user can add/alter their name in the form.'),
    '#options' => $options,
  );

  // Radio for what to do with the sent-from email address field.
  $form['contact_plus_site_mail'] = array(
    '#type' => 'radios',
    '#title' => t('Alter sent-from address'),
    '#default_value' => variable_get('contact_plus_site_mail', 'leave'),
    '#description' => t('Change what the user is allowed to do regarding their email address as presented in the form.
      It is not recommended that you alter this setting if your contact form is accessible to anonymous users.'),
    '#options' => $options,
  );

  // Checkbox for "remove subject" field.
  $form['contact_plus_site_subj'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove "subject" field'),
    '#description' => t('Remove the "Subject" field from the contact form. Not generally recommended,
      but the email and subject will still be valid as the email subject will contain the category name, in square brackets.'),
    '#default_value' => variable_get('contact_plus_site_subj', FALSE),
  );

  // Checkbox for "remove copy" field.
  $form['contact_plus_site_copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove "copy" option'),
    '#description' => t('Remove the "send a copy to yourself" field from the site contact form.'),
    '#default_value' => variable_get('contact_plus_site_copy', FALSE),
  );

  return system_settings_form($form);
}


/**
 * Create the system settings form for the user contact form.
 */
function contact_plus_user_form($form, &$form_state) {
  // Textarea for user text:
  // Info re formats from drupal.org/update/modules/6/7#text_format.
  $defaults = array(
    'value' => '',
    'format' => filter_default_format(),
  );

  $current = variable_get('contact_plus_user_text', $defaults);

  // Add a new form element to store the title for the user form.
  $form['contact_plus_user_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Page title for the form'),
    '#default_value' => variable_get('contact_plus_user_title', ''),
    '#description' => t('Enter the form/page title. Default (empty) is "Contact" or your default language\'s alternative.'),
    '#weight' => '-3',
  );

  // Add a new form element to store the intro text for the user form.
  $form['contact_plus_user_text'] = array(
    '#title' => t('User introduction text'),
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#description' => t('Optionally add text here that will always appear above the user contact form'),
    '#default_value' => $current['value'],
    '#format' => $current['format'],
  );

  // Add a new form element to store the path for the user form.
  // Uses the same form element name so we can re-use the validate function.
  $form['contact_plus_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect path for users'),
    '#default_value' => variable_get('contact_plus_user_path', 'user'),
    '#description' => t('Enter the path to redirect to after the contact form has been successfully submitted.
      Token.module is supported if enabled.
      Default (empty) is the recipient\'s profile (or <em>front</em> for anonymous users).
      NOTE that you must verify your users will have access to the path you provide here!'),
    '#weight' => '-2',
  );

  // if the token module exists then provide global token support
  if (module_exists('token')) {
    $form['token_help'] = array(
      '#theme' => 'token_tree',
      '#weight' => '-1',
    );
  }

  // Let's reuse the long options list for both.
  $options = array(
    'leave' => t('Leave the field alone - uses site default'),
    'visible' => t('Make the field visible but not editable'),
    'vset' => t('Make the field visible but not editable, but only if it already has a value (otherwise forced to editable).'),
    'hide' => t('Hide the field completely'),
    'hset' => t('Hide the field completely, but only if it already has a value (otherwise forced to editable).'),
  );

  // Radio for what to do with the name field.
  $form['contact_plus_user_name'] = array(
    '#type' => 'radios',
    '#title' => t('Alter name field'),
    '#default_value' => variable_get('contact_plus_user_name', 'leave'),
    '#description' => t('Change whether the user can add/alter their name in the form.'),
    '#options' => $options,
  );

  // Radio for what to do with the sent-from email address field.
  $form['contact_plus_user_mail'] = array(
    '#type' => 'radios',
    '#title' => t('Alter sent-from address'),
    '#default_value' => variable_get('contact_plus_user_mail', 'leave'),
    '#description' => t('Change what the user is allowed to do regarding their email address as presented in the form.
      It is not recommended that you alter this setting if your contact form is accessible to anonymous users.'),
    '#options' => $options,
  );

  // Checkbox for "To" notifier.
  $form['contact_plus_user_to'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove "To" notifier'),
    '#description' => t('Remove the "To: Username" notifier from the form.
      (This information is available by default in the page title)'),
    '#default_value' => variable_get('contact_plus_user_to', FALSE),
  );

  // Checkbox for "remove subject" field.
  $form['contact_plus_user_subj'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove "subject" field'),
    '#description' => t('Remove the "Subject" field from the contact form. Not generally recommended,
      but the email and subject will still be valid as the email subject will contain the site name, in square brackets.'),
    '#default_value' => variable_get('contact_plus_user_subj', FALSE),
  );

  // Checkbox for "remove copy" field.
  $form['contact_plus_user_copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove "copy" option'),
    '#description' => t('Remove the "send a copy to yourself" field from the contact form.'),
    '#default_value' => variable_get('contact_plus_user_copy', FALSE),
  );

  // Map an extra submit handler for setting the user's redirect path.
  $form['#submit'][] = 'contact_plus_submit_user_path';

  return system_settings_form($form);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function contact_plus_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  // Sets the page title if it is configured
  $title = variable_get('contact_plus_site_title', '');
  if ($title !== '') {
    drupal_set_title($title);
  }

  // Insert the global site introduction text if it's set.
  $text_array = variable_get('contact_plus_site_text', '');
  if (isset($text_array['value'])) {
    $text_global = check_markup($text_array['value'], $text_array['format'], '', TRUE);
    $form['contact_plus_site_text'] = array(
      '#markup' => $text_global,
      '#weight' => -10,
    );
  }

  // Assumes variable names map to form elements names.
  // Ie contact_path_site_mail -> $form['mail'][etc].
  foreach (array('name', 'mail') as $var) {
    switch (variable_get('contact_plus_site_' . $var, 'leave')) {
      case 'visible':
        // Disable field, make it not required (cosmetic & doesn't confuse).
        $form[$var]['#disabled'] = TRUE;
        $form[$var]['#required'] = FALSE;
        break;

      case 'vset':
        // ONLY IF PRE-SET
        // Disable field, make it not required (cosmetic & doesn't confuse).
        if ('' != $form[$var]['#default_value']) {
          $form[$var]['#disabled'] = TRUE;
          $form[$var]['#required'] = FALSE;
        }
        break;

      case 'hide':
        // Hide the field completely.
        $form[$var]['#access'] = FALSE;
        break;

      case 'hset':
        // ONLY IF PRE-SET - Hide the field completely.
        if ('' != $form[$var]['#default_value']) {
          $form[$var]['#access'] = FALSE;
        }
        break;

      case 'leave':
        // No change.
      default:
        break;
    }
  }

  // Conditionally remove subject line.
  if (TRUE == variable_get('contact_plus_site_subj', FALSE)) {
    $form['subject']['#access'] = FALSE;
  }

  // Conditionally remove "send a copy to yourself" option from form (if required).
  if (TRUE == variable_get('contact_plus_site_copy', FALSE)) {
    $form['copy']['#access'] = FALSE;
  }

  // Add a submit handler so we can perform the redirect on submit.
  $form['#submit'][] = 'contact_plus_submit_site_contact';
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function contact_plus_form_contact_personal_form_alter(&$form, &$form_state, $form_id) {
  // Sets the page title if it is configured
  $title = variable_get('contact_plus_user_title', '');

  if ($title !== '') {
    /*
     * Omitting token support for now as it seems spurious
    // if the token module exists then replace any tokens in the path
    if (module_exists('token')) {
      $title = token_replace($title);
    }
     */
    drupal_set_title($title);
  }

  // Insert the user form introduction text if it's set.
  $text_array = variable_get('contact_plus_user_text', '');
  if (isset($text_array['value'])) {
    $text_user = check_markup($text_array['value'], $text_array['format'], '', TRUE);
    $form['contact_plus_user_text'] = array(
      '#markup' => $text_user,
      // if we want to move the message down, alter this.
      '#weight' => -10,
    );
  }

  // Assumes variable names map to form elements names.
  // Ie contact_path_user_mail -> $form['mail'][etc].
  foreach (array('name', 'mail') as $var) {
    switch (variable_get('contact_plus_user_' . $var, 'leave')) {
      case 'visible':
        // Disable field, make it not required (cosmetic & doesn't confuse).
        $form[$var]['#disabled'] = TRUE;
        $form[$var]['#required'] = FALSE;
        break;

      case 'vset':
        // ONLY IF PRE-SET
        // Disable field, make it not required (cosmetic & doesn't confuse).
        if ('' != $form[$var]['#default_value']) {
          $form[$var]['#disabled'] = TRUE;
          $form[$var]['#required'] = FALSE;
        }
        break;

      case 'hide':
        // Hide the field completely.
        $form[$var]['#access'] = FALSE;
        break;

      case 'hset':
        // ONLY IF PRE-SET - Hide the field completely.
        if ('' != $form[$var]['#default_value']) {
          $form[$var]['#access'] = FALSE;
        }
        break;

      case 'leave':
        // No change.
      default:
        break;
    }
  }

  // Conditionally remove To line.
  if (TRUE == variable_get('contact_plus_user_to', FALSE)) {
    $form['to']['#access'] = FALSE;
  }

  // Conditionally remove subject line.
  if (TRUE == variable_get('contact_plus_user_subj', FALSE)) {
    // need to make the field not required here
    $form['subject']['#required'] = FALSE;
    $form['subject']['#access'] = FALSE;
  }

  // Conditionally remove "send a copy to yourself" option from form (if required).
  if (TRUE == variable_get('contact_plus_user_copy', FALSE)) {
    $form['copy']['#access'] = FALSE;
  }

  // Add a submit handler so we can perform the redirect on submit.
  $form['#submit'][] = 'contact_plus_submit_user_contact';
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function contact_plus_form_contact_category_edit_form_alter(&$form, &$form_state, $form_id) {
  // Push the category field up to the top of the form.
  $form['category']['#weight'] = '-5';

  // Add a new form element to store the path (on category pages).
  $form['contact_plus_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect path for this category'),
    '#default_value' => variable_get('contact_plus_path_' . $form['cid']['#value'], '<front>'),
    '#description' => t('Enter the path to redirect to after the contact form has been successfully submitted.
      Token.module is supported if enabled. Default (empty) is <em>&lt;front&gt;</em>. NOTE
      that you must verify your users will have access to the path you provide here!'),
    '#weight' => '-2',
  );

  // if the token module exists then provide global token support
  if (module_exists('token')) {
    $form['token_help'] = array(
      '#theme' => 'token_tree',
      '#weight' => '-1',
    );
  }

  // Map an extra submit handler for setting the category's redirect path.
  $form['#submit'][] = 'contact_plus_submit_category';
}


/**
 * Custom submit handler for the 'submit sitewide contact form' page.
 */
function contact_plus_submit_site_contact($form, &$form_state) {
  // blank path (default value of '') indicates front page
  $path = variable_get('contact_plus_path_' . $form_state['values']['cid'], '');

  // If the path is an empty string, use the default redirect (front page).
  if (empty($path)) {
    $form_state['redirect'] = '';
    return;
  }

  // validate the path and set the required redirect
  contact_plus_validate_path($path, $form_state);
}


/**
 * Custom submit handler for the 'submit user contact form' page.
 */
function contact_plus_submit_user_contact($form, &$form_state) {
  // blank path (default value of '') indicates front page
  $path = variable_get('contact_plus_user_path', '');

  // If the path is an empty string, use the default redirect.
  // Default is: recipient's page, or front page if no access.
  if (empty($path)) {
    $form_state['redirect'] = user_access('access user profiles') ? 'user/' . $form_state['values']['recipient']->uid : '';
    return;
  }

  // validate the path and set the required redirect
  contact_plus_validate_path($path, $form_state);
}


/**
 * Validate paths and set redirect in form state for BOTH forms.
 */
function contact_plus_validate_path($path, &$form_state) {
  global $user;

  // if the token module exists then replace any tokens in the path
  if (module_exists('token')) {
    $path = token_replace($path);
  }

  // Set the form to redirect to the path saved for users.
  if (drupal_valid_path($path, FALSE)) {
    // path is valid, set the redirect
    $form_state['redirect'] = $path;
  } else {
    // set watchdog warning message
    watchdog('Contact Plus',
      "Path was deemed invalid or user had insufficient permission. You may need to alter your path redirects.</br>
      Attempted to redirect user '%user' (uid %uid) to the path '%path' from form id '%form'.",
      array('%user' => $user->name, '%uid' => $user->uid, '%path' => $path,
            '%form' => $form_state['build_info']['form_id'], WATCHDOG_NOTICE));

    // redirect to front page in case of failure
    $form_state['redirect'] = '';
  }
  // just drop out here, $form_state redirect is now set (passed by ref).
}


/**
 * Custom submit handler for the category settings form.
 */
function contact_plus_submit_category($form, &$form_state) {
  $path = trim($form_state['values']['contact_plus_path']);

  // Save the path to the database for this category.
  variable_set('contact_plus_path_' . $form_state['values']['cid'], $path);
}


/**
 * Custom submit handler for the user settings form.
 */
function contact_plus_submit_user_path($form, &$form_state) {
  $path = trim($form_state['values']['contact_plus_path']);

  // Save the path to the database for this category.
  variable_set('contact_plus_user_path', $path);
}
