<?php
/**
 * @file
 * Dream permissions module.
 */

/**
 * Implements hook_menu().
 */
function dream_permissions_menu() {
  $items['admin/config/people/dream_permissions'] = array(
    'title' => 'Dream permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dream_permissions_admin_page'),
    'access arguments' => array('configure dream permissions'),
    'description' => 'Select the modules and roles that will be available on the dream permissions page.',
  );

  if (!variable_get('dream_permissions_override_default_page', FALSE)) {
    $items['admin/people/dream_permissions'] = array(
      'title' => 'Dream permissions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dream_permissions_page'),
      'access arguments' => array('access dream permissions'),
      'type' => MENU_LOCAL_TASK,
    );
  }

  $items['admin/people/dream_permissions/fetch/%/%'] = array(
    'title' => 'Fetch dream permissions',
    'page callback' => '_dream_permissions_fetch_permissions_for_modules_and_roles',
    'page arguments' => array(4, 5),
    'access arguments' => array('access dream permissions'),
  );

  $items['admin/people/dream_permissions/fetch/%/%/%'] = array(
    'title' => 'Fetch dream permissions',
    'page callback' => '_dream_permissions_fetch_permissions_for_modules_and_roles',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('access dream permissions'),
  );

  $items['admin/people/dream_permissions/save'] = array(
    'title' => 'Save dream permissions',
    'page callback' => '_dream_permissions_save_permissions_for_modules_and_roles',
    'access arguments' => array('access dream permissions'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function dream_permissions_menu_alter(&$items) {
  if (variable_get('dream_permissions_override_default_page', FALSE)) {
    $items['admin/people/permissions'] = array(
      'title' => 'Permissions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dream_permissions_page'),
      'access arguments' => array('access dream permissions'),
      'type' => MENU_LOCAL_TASK,
    );
  }
}

/**
 * Implements hook_permission().
 */
function dream_permissions_permission() {
  return array(
    'configure dream permissions' => array(
      'title' => t('Configure dream permissions'),
      'restrict access' => TRUE,
    ),
    'access dream permissions' => array(
      'title' => t('Access dream permissions'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Admin form callback.
 */
function dream_permissions_admin_page($form, &$form_state) {
  $roles = user_roles();
  asort($roles);

  $form['dream_permissions_override_default_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override default permissions page'),
    '#description' => t('If checked, the default permissions page will be overridden with the dreams permissions page.'),
    '#default_value' => variable_get('dream_permissions_override_default_page', FALSE),
  );

  $form_state['storage']['old_dream_permissions_override_default_page'] = variable_get('dream_permissions_override_default_page', FALSE);

  $form['dream_permissions_excluded_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select the roles you want to hide'),
    '#options' => $roles,
    '#default_value' => variable_get('dream_permissions_excluded_roles', array()),
  );

  // Only show modules defining a permission.
  $module_info = system_get_info('module');
  $modules_perm = module_implements('permission');
  foreach ($modules_perm as $module) {
    $modules[$module] = $module_info[$module]['name'];
  }
  asort($modules);

  $form['dream_permissions_excluded_modules'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select the modules you want to hide'),
    '#options' => $modules,
    '#default_value' => variable_get('dream_permissions_excluded_modules', array()),
  );
  $form = system_settings_form($form);
  $form['#submit'][] = 'dream_permissions_admin_page_submit';
  return $form;
}

/**
 * Form submit callback.
 */
function dream_permissions_admin_page_submit($form, &$form_state) {
  // Rebuild the menu if the dream_permissions_excluded_roles variable changed.
  if ($form_state['storage']['old_dream_permissions_override_default_page'] != variable_get('dream_permissions_override_default_page', FALSE)) {
    menu_rebuild();
  }
}

/**
 * Form callback.
 */
function dream_permissions_page($form, &$form_state) {
  $current_step = 0;
  if (isset($form_state['values'])) {
    $current_step = 1;
  }
  $form_state['step'] = $current_step;

  if ($current_step == 0) {
    // Retrieve role names.
    $role_names = user_roles();
    $role_names = array_diff_key($role_names, array_filter(variable_get('dream_permissions_excluded_roles', array())));

    // Fetch permissions for authenticated roles.
    $role_authenticated = array(2 => $role_names[2]);
    $auth_permissions = user_role_permissions($role_authenticated);

    // Only show modules defining a permission.
    $module_info = system_get_info('module');
    $module_implements = module_implements('permission');
    $module_implements = array_diff($module_implements, array_filter(variable_get('dream_permissions_excluded_modules', array())));

    $modules = array();
    foreach ($module_implements as $module) {
      $modules[$module] = $module_info[$module]['name'];
    }
    asort($modules);

    $form['roles'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter by roles'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['roles']['filter'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'class' => array('dream-permissions--filter', 'no-js'),
        'placeholder' => t('Filter ...'),
      ),
    );
    $form['roles']['rids'] = array(
      '#type' => 'checkboxes',
      '#options' => $role_names,
      '#attributes' => array('class' => array('dream-permissions--role-names')),
    );

    $form['modules'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter by modules'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['modules']['filter'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'class' => array('dream-permissions--filter', 'no-js'),
        'placeholder' => t('Filter ...'),
      ),
    );
    $form['modules']['mods'] = array(
      '#type' => 'checkboxes',
      '#options' => $modules,
      '#attributes' => array('class' => array('dream-permissions--module-names')),
    );

    $form['permissions'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter by permission'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['permissions']['filter'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'class' => array('dream-permissions--filter-permission'),
        'placeholder' => t('Filter ...'),
      ),
    );

    $form['checks'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('dream-permissions--checks'),
      ),
    );

    $form['#attributes'] = array('class' => array('dream-permissions--form'));
    $form['#attached']['css'][] = drupal_get_path('module', 'dream_permissions') . '/dream_permissions.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'dream_permissions') . '/dream_permissions.js';
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'dreamPermissions' => array(
          'roles' => $role_names,
          'auth_permissions' => $auth_permissions,
          'modules' => $modules,
        ),
      ),
    );

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Fetch permissions'),
    );
  }
  else {
    // Fetch permissions.
    $module_info = system_get_info('module');
    $modules = array_filter($form_state['values']['mods']);
    $roles = array_filter($form_state['values']['rids']);
    $permission_filter = $form_state['values']['filter'];

    // Retrieve role names for columns.
    $role_names = user_roles();

    // Always add authenticed role.
    $selected_roles[2] = $role_names[2];

    foreach ($roles as $role) {
      $selected_roles[$role] = $role_names[$role];
    }
    $role_permissions = user_role_permissions($selected_roles);

    $form['checkboxes'] = array(
      '#type' => 'container',
      '#tree' => TRUE,
      '#theme' => 'dream_permissions_table',
      '#roles' => $selected_roles,
    );

    foreach ($modules as $module) {
      if ($permissions = module_invoke($module, 'permission')) {
        foreach ($permissions as $perm => $perm_item) {
          if ($permission_filter) {
            if (stripos($perm, $permission_filter) === FALSE && stripos($module_info[$module]['name'], $permission_filter) === FALSE && stripos($module_info[$module]['project'], $permission_filter) === FALSE && stripos($module_info[$module]['project'], $permission_filter) === FALSE) {
              continue;
            }
          }
          $form['checkboxes'][$perm]['label'] = array(
            '#markup' => $perm_item['title'],
          );
          foreach ($selected_roles as $rid => $name) {
            $form['checkboxes'][$perm][$rid] = array(
              '#type' => 'checkbox',
              '#title' => $perm_item['title'],
              '#title_display' => 'invisible',
              '#default_value' => isset($role_permissions[$rid][$perm]) ? $role_permissions[$rid][$perm] : FALSE,
            );
          }
        }
      }
    }

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save permissions'),
    );
  }

  return $form;
}

/**
 * Implements hook_theme().
 */
function dream_permissions_theme() {
  return array(
    'dream_permissions_table' => array(
      'render element' => 'form',
      'theme_key' => NULL,
    ),
  );
}

/**
 * Theme form as table.
 */
function theme_dream_permissions_table($variables) {
  $form = $variables['form'];

  // Rows.
  $rows = array();
  foreach (element_children($form) as $key) {
    $row = array();
    foreach (element_children($form[$key]) as $key2) {
      $row[] = drupal_render($form[$key][$key2]);
    }
    $rows[] = array(
      'data' => $row,
    );
  }

  // Header.
  $header = array();
  $header[] = t('Permission');
  foreach ($form['#roles'] as $rid => $role_name) {
    $header[] = $role_name;
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

/**
 * Form submit callback.
 */
function dream_permissions_page_submit($form, &$form_state) {
  $form_state['storedvalues'][$form_state['step']] = $form_state['values'];
  if ($form_state['step'] == 0) {
    // Rebuild form to display permissions.
    $form_state['rebuild'] = TRUE;
  }
  else {
    $checkboxes = $form_state['values']['checkboxes'];
    $permissions = array();
    foreach ($checkboxes as $perm => $roles) {
      foreach ($roles as $rid => $value) {
        $permissions[$rid][$perm] = $value;
      }
    }
    foreach ($permissions as $rid => $values) {
      user_role_change_permissions($rid, $values);
    }
  }
}

/**
 * Fetch permissions for certain modules and roles.
 */
function _dream_permissions_fetch_permissions_for_modules_and_roles($modules, $roles, $permission_filter = NULL) {
  // @TODO split in 2 parts: logic and json.
  $module_info = system_get_info('module');
  $modules = explode(',', $modules);
  $roles = explode(',', $roles);

  $role_names = user_roles();
  $selected_roles = array();

  // Always add authenticed role.
  $selected_roles[2] = $role_names[2];

  foreach ($roles as $role) {
    $selected_roles[$role] = $role_names[$role];
  }
  $role_permissions = user_role_permissions($selected_roles);

  $selected_permissions = array();
  $permissions_names = array();
  foreach ($modules as $module) {
    if ($permissions = module_invoke($module, 'permission')) {
      foreach ($permissions as $perm => $perm_item) {
        if ($permission_filter) {
          if (stripos($perm, $permission_filter) === FALSE && stripos($module_info[$module]['name'], $permission_filter) === FALSE && stripos($module_info[$module]['project'], $permission_filter) === FALSE && stripos($module_info[$module]['project'], $permission_filter) === FALSE) {
            continue;
          }
        }
        $permissions_names[$perm] = $perm_item['title'] . ' [' . $module_info[$module]['name'] . ']';
        foreach ($selected_roles as $rid => $name) {
          $selected_permissions[$rid][$perm] = (string) intval(isset($role_permissions[$rid][$perm]) ? $role_permissions[$rid][$perm] : FALSE);
        }
      }
    }
  }

  drupal_json_output(array(
    'modules' => $modules,
    'roles' => $selected_roles,
    'permissions' => $selected_permissions,
    'permissionsNames' => $permissions_names,
    'token' => drupal_get_token(serialize($selected_permissions)),
  ));
}

/**
 * Fetch permissions for certain modules and roles.
 */
function _dream_permissions_save_permissions_for_modules_and_roles() {
  $token = $_POST['token'];
  $original_permissions = $_POST['originalPermissions'];
  $permissions = $_POST['permissions'];

  if (!drupal_valid_token($token, serialize($original_permissions))) {
    return drupal_access_denied();
  }

  // Only save roles that were requested.
  $keys_role_original = array_keys($original_permissions);
  $keys_role_new = array_keys($permissions);
  $keys_invalid = array_diff($keys_role_new, $keys_role_original);
  if (!empty($keys_invalid)) {
    $permissions = array_diff_key($permissions, array_flip($keys_invalid));
    return drupal_access_denied();
  }

  // Only save permissions that were requested.
  $keys_perm_original = array_flip(array_keys($original_permissions[2]));

  foreach ($permissions as $rid => $perms) {
    $diff = array_diff_key($keys_perm_original, $perms);
    if (empty($intersect)) {
      user_role_change_permissions($rid, $perms);
    }
    else {
      return drupal_access_denied();
    }
  }
}
