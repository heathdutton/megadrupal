<?php
/**
 * @file
 * Handles installation steps for splash_offer
 */

/**
 * Implementation of hook_schema
 */
function splash_offer_schema() {
  $schema = array();

  $schema['splash_offer'] = array(
    'description' => t('Contains splash offer entities'),
    'fields' => array(
      'oid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The app id'),
      ),
      'name' => array(
        'description' => t('The human name'),
        'type' => 'varchar',
        'not null' => TRUE, // FALSE allows for NULL values
        'size' => 'normal',
        'length' => 255,
      ),
      'weight' => array(
        'description' => t('Determines order of appearance'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE, // FALSE allows for NULL values
        'default' => 0,
        'unsigned' => FALSE, //int, float, numeric only
      ),
      'status' => array(
        'description' => t('Store the app status'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE, // FALSE allows for NULL values
        'default' => SPLASH_OFFER_STATUS_ACTIVE,
        'unsigned' => TRUE, //int, float, numeric only
      ),
      'links' => array(
        'description' => t('Contains the link configuration'),
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'storage' => array(
        'description' => t('Persistent storage (cookies) config'),
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'access' => array(
        'description' => t('Access configuration'),
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'splash_offer_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('oid'),
  );

  return $schema;
}

function splash_offer_install() {
  _splash_offer_create_default_fields();
}

/*
 * Implements hook_uninstall().
 */
function splash_offer_uninstall() {
  $vars = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', 'splash_offer%', 'LIKE')
    ->execute()->fetchCol();
  foreach ($vars as $var) {
    variable_del($var);
  }
  db_delete('block')
    ->condition('module', 'splash_offer')
    ->execute();
  db_delete('block_role')
    ->condition('module', 'splash_offer')
    ->execute();

  $instance = array(
    'field_name' => 'splash_offer_markup',
    'entity_type' => 'splash_offer',
    'bundle' => 'splash_offer',
  );

  // If TRUE, the field will be deleted as well if its last instance is being
  // deleted, this way we will only delete the field if there are only
  // instances we've installed by this module.
  field_delete_instance($instance, TRUE);
}

/**
 * Implements hook_enable().
 */
function splash_offer_enable() {
  //message about module settings
  drupal_set_message(t('You may now add one or more splash offers <a href="@url">here</a>.', array('@url' => url('admin/content/splash-offer'))));
}

/**
 * Implements hook_requirements().
 *
 * Checks installation requirements and do status reporting.
 * http://api.drupal.org/api/function/hook_requirements
 *
 * @param phase 'install' or 'runtime':
 * @return A keyed array of requirements
 */
function splash_offer_requirements($phase) {
  $reqs = array();
  $t = get_t();
  if ($phase == 'runtime') {
    // mobile_detect module.
    if (!module_exists('mobile_detect')) {
      $reqs['splash_offer'] = array(
        'title' => $t('Splash Offer'),
        'value' => $t('Device detection not available'),
        'severity' => REQUIREMENT_WARNING,
        'description' => $t('To integrate device detection, please install <a href="@url">Mobile Detect</a>', array(
          '@url' => url('http://drupal.org/project/mobile_detect'),
        )),
      );
    }
  }

  return $reqs;
}

/**
 * Convert markup property to a field instance.
 */
function splash_offer_update_7001(&$sandbox) {
  // Create the new markup default field.
  _splash_offer_create_default_fields();
  
  // Copy data from the old markup property into the new markup field instance.
  $result = db_select('splash_offer', 's')
    ->fields('s', array('oid', 'markup'))
    ->execute()
    ->fetchAllAssoc('oid');
  $fields = array();
  $info = field_info_field('splash_offer_markup');
  $fields[] = $info['id'];
  foreach ($result as $splash_offer) {
    $splash_offer->splash_offer_markup[LANGUAGE_NONE][0]['value'] = $splash_offer->markup;
    field_sql_storage_field_storage_write('splash_offer', $splash_offer, FIELD_STORAGE_UPDATE, $fields);
  }
  field_cache_clear();
  
  // Delete the old entity properties which have been replaced by fields.
  db_drop_field('splash_offer', 'machine_name');
  db_drop_field('splash_offer', 'markup');
}

/**
 * Add uid property to store author information.
 */
function splash_offer_update_7002(&$sandbox) {
  $spec = array(
    'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  $keys_new = array(
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'splash_offer_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );
  db_add_field('splash_offer', 'uid', $spec, $keys_new);
}

/**
 * Helper function to create the default splash offer field instances.
 */
function _splash_offer_create_default_fields() {
  field_create_field(array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
      'module' => 'field_sql_storage',
      'active' => '1',
      'details' => array(
        'sql' => array(
          'FIELD_LOAD_CURRENT' => array(
            'field_data_splash_offer_markup' => array(
              'value' => 'splash_offer_markup_value',
              'format' => 'splash_offer_markup_format',
            ),
          ),
          'FIELD_LOAD_REVISION' => array(
            'field_revision_splash_offer_markup' => array(
              'value' => 'splash_offer_markup_value',
              'format' => 'splash_offer_markup_format',
            ),
          ),
        ),
      ),
    ),
    'foreign keys' => array(
      'format' => array(
        'table' => 'filter_format',
        'columns' => array(
          'format' => 'format',
        ),
      ),
    ),
    'indexes' => array(
      'format' => array(
        'format',
      ),
    ),
    'field_name' => 'splash_offer_markup',
    'type' => 'text_long',
    'module' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'deleted' => '0',
    'columns' => array(
      'value' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'bundles' => array(
      'splash_offer' => array(
        'splash_offer',
      ),
    ),
  ));
  field_create_instance(array(
    'label' => 'Message or Markup',
    'widget' => array(
      'weight' => '2',
      'type' => 'text_textarea',
      'module' => 'text',
      'active' => 1,
      'settings' => array(
        'rows' => '10',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'settings' => array(),
        'module' => 'text',
        'weight' => 1,
      ),
    ),
    'required' => TRUE,
    'description' => 'Enter the text or markup to present inside the splash offer; <strong>HTML is allowed.</strong>',
    'default_value' => NULL,
    'field_name' => 'splash_offer_markup',
    'entity_type' => 'splash_offer',
    'bundle' => 'splash_offer',
    'deleted' => '0',
  ));
}