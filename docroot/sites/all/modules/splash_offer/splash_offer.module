<?php
/**
 * @file
 * Base module file for splash_offer
 *
 * @defgroup splash_offer Splash Offer
 * @{
 */

/**
 * @var SPLASH_OFFER_BUTTON_MODE_NONE
 */
define('SPLASH_OFFER_BUTTON_MODE_NONE', 0);
/**
 * @var SPLASH_OFFER_BUTTON_MODE_UI
 */
define('SPLASH_OFFER_BUTTON_MODE_UI', 1);
/**
 * @var SPLASH_OFFER_BUTTON_MODE_HTML
 */
define('SPLASH_OFFER_BUTTON_MODE_HTML', 2);
/**
 * @var SPLASH_OFFER_STATUS_ACTIVE
 */
define('SPLASH_OFFER_STATUS_ACTIVE', 1);
/**
 * @var SPLASH_OFFER_STATUS_INACTIVE
 */
define('SPLASH_OFFER_STATUS_INACTIVE', 0);

/**
 * Implements hook_permission().
 */
function splash_offer_permission() {
  return array(
    'administer splash_offer' => array(
      'title' => t('Administer Splash Offer'),
      'description' => t('Perform administration tasks for Splash Offer.'),
      'restrict access' => TRUE,
    ),
    "create splash_offer" => array(
      'title' => t('Create new splash offer'),
    ),
    "edit own splash_offer" => array(
      'title' => t('Edit own splash offer'),
    ),
    "edit any splash_offer" => array(
      'title' => t('Edit any splash offer'),
    ),
    "delete own splash_offer" => array(
      'title' => t('Delete own splash offer'),
    ),
    "delete any splash_offer" => array(
      'title' => t('Delete any splash offer'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function splash_offer_entity_info() {
  $return = array(
    'splash_offer' => array(
      'label' => t('Splash Offer'),
      'plural label' => t('Splash Offers'),
      'description' => t('Splash offer entities'),
      'controller class' => 'SplashOfferEntityController',
      'entity class' => 'SplashOfferEntity',
      'base table' => 'splash_offer',
      'entity keys' => array(
        'id' => 'oid',
      ),
      'static cache' => TRUE,
      'label callback' => 'entity_class_label',
      'fieldable' => TRUE,

      // Admin UI
      'access callback' => 'splash_offer_access',
      'module' => 'splash_offer',
      'admin ui' => array(
        'controller class' => 'SplashOfferUIController',
        'path' => 'admin/content/splash-offer',
        'file' => 'includes/splash_offer.admin.inc',
      ),
      'bundles' => array(
        'splash_offer' => array(
          'label' => t('Splash Offer'),
          'admin' => array(
            'access arguments' => array('administer splash_offer'),
            'path' => 'admin/structure/splash_offer'
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Splash offer'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  // Support entity cache module.
  if (module_exists('entitycache')) {
    $return['splash_offer']['field cache'] = TRUE;
    $return['splash_offer']['entity cache'] = TRUE;
  }

  // Support entity bundle admin module.
  if (module_exists('entity_bundle_admin')) {
    $return['splash_offer']['bundle admin ui'] = array(
      'path' => 'admin/structure/splash_offer',
      'permission' => 'administer splash_offer',
    );
  }

  return $return;
}

/**
 * Implements hook_entity_bundle_ENTITY_TYPE_bundle_info().
 */
function splash_offer_entity_bundle_splash_offer_bundle_info() {
  return array(
    'splash_offer' => array(
      'label' => t('Splash Offer'),
      'description' => t('Allows the management of one or more splash offers'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function splash_offer_menu_alter(&$items) {
  // Change the overview menu type for the list of splash offers.
  $entity_info = entity_get_info('splash_offer');
  $items[$entity_info['admin ui']['path']]['type'] = MENU_LOCAL_TASK | MENU_NORMAL_ITEM;

  // The admin list page should only be for admins, not based on entity access.
  $items[$entity_info['admin ui']['path']]['access callback'] = 'user_access';
  $items[$entity_info['admin ui']['path']]['access arguments'] = array('administer splash_offer');
}

/**
 * Implements hook_preprocess_html().
 */
function splash_offer_preprocess_html(&$vars) {
  if (!($offers = entity_load('splash_offer'))) {
    return;
  }
  module_load_include('inc', 'splash_offer', 'includes/splash_offer.pages');

  uasort($offers, 'splash_offer_sort');

  // Show them only if they haven't seen it and they have permission
  // We do not check based on the cooke here, but instead we do that in the
  // JavaScript so that the offers can be displayed propery even with
  // advanced caching systems in place.
  $show = FALSE;
  $oid = 0;
  foreach ($offers as $entity) {
    if ($entity->status == SPLASH_OFFER_STATUS_ACTIVE
        && _splash_offer_role_access($entity)
        && _splash_offer_page_visibility($entity)
        && _splash_offer_locale_visibility($entity)
        && _splash_offer_device_visibility($entity)) {
      // stop our search now
       $oid = $entity->oid;
      break;
    }
  }

  // We think we're going to display $oid, but let modules ultimately decide
  drupal_alter('splash_offer_show', $oid, $_GET['q'], $offers);
  if ($oid && array_key_exists($oid, $offers)) {
    $vars['page']['page_bottom']['splash_offer'] = $entity->view();
  }
}

/**
 * Implements hook_theme().
 */
function splash_offer_theme($existing, $type, $theme, $path) {
  return array(
    'splash_offer' => array(
      'render element' => 'elements',
      'template' => 'splash_offer',
    ),
  );
}

/**
 * Implements hook_preprocess_preprocess_entity().
 */
function splash_offer_preprocess_entity(&$vars) {
  if ($vars['entity_type'] !== 'splash_offer') {
    return;
  }
  $splash = $vars['elements']['#entity'];

  // Add in the necessary JS to make this happen
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_js(drupal_get_path('module', 'splash_offer') . '/splash_offer.min.js');
  drupal_add_css(drupal_get_path('module', 'splash_offer') . '/splash_offer.css');

  $splash = $vars['elements']['#entity'];

  $vars['classes_array'][] = 'splash-offer-' . $splash->oid;

  // Support for the splash_offer_markup default field.
  if ($items = field_get_items('splash_offer', $splash, 'splash_offer_markup')) {
    $item = reset($items);
    $vars['content']['markup'] = array('#markup' => filter_xss_admin($item['value']));
    unset($vars['content']['splash_offer_markup']);
  };

  $vars['button_mode']              = $splash->links['#mode'];
  $vars['buttons']                  = $splash->links;
  $vars['yes']                      = NULL;
  $vars['no']                       = NULL;
  $vars['cookies']                  = $splash->storage['cookies']['#enabled'];
  $vars['cookie_default']           = $splash->storage['cookies']['#default'];

  //$vars['width'] = 600;
  //$vars['height'] = 860;

  $js_settings = array(
    'id' => $splash->oid,
  );
  if ($vars['cookies']) {
    $js_settings['cookie']['expiry'] = $splash->storage['cookies']['#lifetime'];
  }

  if ($vars['button_mode'] == SPLASH_OFFER_BUTTON_MODE_UI) {
    // Use the jquery ui buttons
    $js_settings['yes'] = $vars['buttons']['yes'];
    $js_settings['no']  = $vars['buttons']['no'];
  }
  elseif ($vars['button_mode'] == SPLASH_OFFER_BUTTON_MODE_HTML) {

    // YES: Button
    $options = drupal_array_merge_deep(array(
      'attributes' => array(
        'class' => array(
          'splash-offer-yes'
        ),
        'target' => '_blank',
      ),
      'html' => FALSE,
      ), $vars['buttons']['yes']['options']);
    $vars['buttons']['yes'] = array(
      '#theme' => 'link',
      '#text' => $vars['buttons']['yes']['text'],
      '#path' => $vars['buttons']['yes']['path'],
      '#options' => $options,
    );

    // NO: Button
    $options = drupal_array_merge_deep(array(
      'attributes' => array(
        'class' => array(
          'splash-offer-no'
        ),
      ),
      'html' => FALSE,
    ), $vars['buttons']['no']['options']);
    $vars['buttons']['no'] = array(
      '#theme' => 'link',
      '#text' => $vars['buttons']['no']['text'],
      '#path' => $_GET['q'],
      '#options' => $options,
    );
  }
  drupal_add_js(array('splashOffer' => $js_settings), 'setting');
}


/**
 * Return the default roles for an entity
 */
function _splash_offer_default_roles() {
  return array_intersect_key(user_roles(), array_flip(array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID)));
}


/**
 * Determines whether the given user has access to a splash offer.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $splash_offer
 *   Optionally a splash offer or a splash offer type to check access for. If
 *   nothing is given, access for all splash offers is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function splash_offer_access($op, $splash_offer = NULL, $account = NULL) {
  if (user_access('administer splash_offer', $account)) {
    return TRUE;
  }

  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  switch ($op) {
    case 'view':
      if (!empty($splash_offer->access['roles'])) {
        $splash_offer_roles = $splash_offer->access['roles'];
      }
      else {
        $splash_offer_roles = _splash_offer_default_roles();
      }
      return (bool) array_intersect_key($account->roles, $splash_offer_roles);
    case 'create':
      return user_access($op . ' splash_offer', $account);
    case 'update':
    case 'delete':
      $perm = ($op == 'update')? 'edit' : 'delete';
      if ($splash_offer) {
        return user_access($perm . ' any splash_offer', $account) || (($splash_offer->uid == $account->uid) && user_access($perm . ' own splash_offer', $account));
      }
      else {
        return user_access($perm . ' splash_offer', $account);
      }
  }

  return FALSE;
}

/**
 * Implements hook_splash_offer_no_show_paths().
 *
 * The advantage of this hook over hook_splash_offer_show_alter is that these
 * paths are diplayed in the admin UI so it may be more clear for administrators
 *
 * @param SplashOfferEntity $entity
 *
 * @return string
 *   A string of paths separated by "\n" for which the $entity page should never
 *   show
 *
 */
function splash_offer_splash_offer_no_show_paths($entity) {
  // Notice that we don't care about the entity in this invokation
  // Not on admin pages, if a module really wants a splash page on admin
  // they can use their own hook_splash_offer_show_alter
  $auto_pages = "admin*\n";

  // Service endpoints break if the splash page loads, so register them
  if (module_exists('services')) {
    $endpoints = services_endpoint_load_all();
    foreach ($endpoints as $endpoint) {
      $auto_pages .= $endpoint->path . "*\n";
    }
  }
  return $auto_pages;
}
