<?php
/**
 * @file
 * Install, update and uninstall functions for the Maildigest module.
 */

/**
 * Implementation of hook_install().
 */
/*function maildigest_install() {
  drupal_install_schema('maildigest');
}*/

/**
 * Implementation of hook_uninstall().
 */
/*function maildigest_uninstall() {
  drupal_uninstall_schema('maildigest');
}*/

/**
 * Maildigest's schema.
 */
function maildigest_schema() {
  $schema['maildigest_subscription'] = array(
    'description' => 'Subscribers to {maildigest_digest}.',
    'fields' => array(
      'sid' => array(
        'description' => 'Primary key: Unique subscription ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the user who is subscribing.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'digest_name' => array(
        'description' => 'The {maildigest_digest}.name of the subscribed digest.',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'digest_name' => array('digest_name')
    ),
    'primary key' => array('sid'),
  );

  $schema['maildigest_digest'] = array(
    'description' => 'Table storing maildigest definitions',
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique name of this digest. Used to identify it programmatically.',
      ),
      'did' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE, // Do not export database-only keys.
      ),
      'settings' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'Configuration of maildigest digest.',
        'object default' => array(
          'subject_en' => '',
          'message_en' => '',
          'frequency' => 'monthly',
          'monthly' => 'First day',
          'hour' => 0
        ),
      ),
      'admin_title' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Human-readable name of this digest.',
      ),
    ),
    'primary key' => array('did'),
    'unique keys' => array('name' => array('name')),
    'export' => array(
      'key' => 'name',
      'key name' => 'Name',
      'primary key' => 'did',
      'identifier' => 'maildigest',
      'api' => array(
        'owner' => 'maildigest',
        'api' => 'maildigest_digest',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_requirements().
 *
 * Check the tokens is enabled.
 */
function maildigest_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  switch ($phase) {
    case 'runtime':
      $dependencies = array(
        'token' => '7.x-1.x',
      );

      $error = FALSE;
      $warning = FALSE;
      foreach ($dependencies as $module => $version_required) {
        if (!module_exists($module)) {
          $error = TRUE;
        }
        $path = drupal_get_path('module', $module);
        $info = drupal_parse_info_file($path . '/' . $module . '.info');
        $version_actual = $info['version'];
        if (drupal_substr($version_required, 0, 5) != drupal_substr($version_actual, 0, 5)) {
          $warning = TRUE;
        }
      }

      if ($error == TRUE) {
        $requirements['maildigest_dependencies'] = array(
          'title' => $t('Maildigest dependencies'),
          'description' => $t("Token is not installed."),
          'value' => $t('Not found'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
  }
  return $requirements;
}

function maildigest_reset_schema() {
  // Include ALL modules
  $modules = module_list(TRUE, FALSE);
  // Set module list as ALL modules
  module_list(FALSE, TRUE, FALSE, $modules);
  // Reset implementions list
  module_implements(NULL, FALSE, TRUE);
  // Run hook_init
  module_invoke_all('init');
  // Reset cached schema
  drupal_get_schema(NULL, TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Replace 'did' column by 'digest_name' column.
 */
function maildigest_update_1() {
  db_drop_field('maildigest_subscription', 'did');
  db_add_field('maildigest_subscription', 'digest_name', array('type' => 'varchar', 'length' => 255));
  db_add_index('maildigest_subscription', 'digest_name', array('digest_name'));
}
