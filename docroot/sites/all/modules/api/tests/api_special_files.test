<?php

/**
 * @file
 * Tests that some "special" files can be dealt with.
 */

module_load_include('php', 'api', 'tests/api_test_case');

/**
 * Tests that files containing special issues can be dealt with.
 */
class ApiSpecialIssuesTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => 'Special files',
      'description' => 'Tests that files containing two-byte Unicode characters and other special cases can be dealt with.',
      'group' => 'API module',
    );
  }

  function setUp() {
    $this->baseSetUp(array('api_test'));

    // Set up a files branch, but do not exclude the usual directories.
    $this->branch_info = $this->setUpBranchUI('', TRUE, array('directory' => drupal_get_path('module', 'api') . '/tests/special_files', 'excluded' => ''));

    // We don't need the PHP branch for this test, so for speed, remove it.
    $this->removePHPBranch();

    // Parse the code.
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();
  }

  /**
   * Runs the other tests, to avoid reparsing multiple times.
   */
  function testAll() {
    $this->_testUnicode();
    $this->_testBadFileHeader();
    $this->_testExtendsLoops();
    $this->_testTwig();
    $this->_testSearchCaseSensitivity();
    $this->_testYamlServices();
    $this->_testParseAlterHook();
  }

  /**
   * Tests that files with Unicode can be dealt with.
   */
  function _testUnicode() {
    // Verify that both files are present on the Files page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/files');
    $this->assertLink('AllUnicodeChars.txt', 0, 'Unicode text file is there');
    $this->assertLink('ClassWithUnicode.php', 0, 'Unicode class file is there');
    $this->assertText('Tests that Unicode characters can be dealt with.', 'Class file description is there');

    // Verify the text file page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/AllUnicodeChars.txt/' . $this->branch_info['branch_name']);
    $this->assertText('abcdefghij', 'ASCII characters are there');
    $this->assertText('àáâãä', 'Accented characters are there');
    $this->assertText('ਙਚਛਜ', 'Some other Unicode characters are there');
    $this->assertText('ゾタダ', 'Some CJK characters are there');
    $this->assertText('AllUnicodeChars.txt', 'File name is there');

    // Verify the class is listed on the classes page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes');
    $this->assertLink('CacheArray', 0, 'Link to class is there');
    $this->assertText(t('Non-displayable characters.'), 'Non-displayable message is there');

    // Click through to the class page and verify the methods are shown.
    $this->clickLink('CacheArray');
    $this->assertText(t('Non-displayable characters.'), 'Non-displayable message is there');
    $this->assertText('CacheArray implements ArrayAccess', 'Class hierarchy is shown');
    $this->assertLink('CacheArray::$cid', 0, 'Property link is shown');
    $this->assertText('A cid to pass to', 'Property description is shown.');
    $this->assertLink('CacheArray::persist', 0, 'Method link is shown');
    $this->assertText('Flags an offset value', 'Method description is shown');
    $this->assertText('$this', 'Source code is shown');
    $this->assertText('written to the persistent', 'Source code is shown');
    $this->assertText('keysToPersist', 'Source code is shown');
  }

  /**
   * Tests that a file with defgroup/mainpage in the file header can be parsed.
   */
  function _testBadFileHeader() {
    // This file is in the special_files directory. Check that it triggered
    // two log messages when it was parsed.
    $this->drupalGet('admin/reports/dblog');
    $this->assertRaw('@file docblock containing @defgroup', 'Warning message is present for bad file');
    $this->assertRaw('Item docblock containing @defgroup', 'Warning message is present for bad class');

    // Verify that the file is listed and the file's page can be visited.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/files');
    $this->assertLinkURLSubstring('badheader.php', $this->branch_info['project'] . '/badheader.php', 'File link exists', 'File link goes to right place');
    $this->clickLink('badheader.php');
    $this->assertLink('badheader_fun', 0, 'Function link is present on file page');
    $this->assertTitleContains('badheader.php', 'Page title has file name');

    // Verify that the class is listed on this page, and not the method.
    $this->assertLink('ClassWithDefgroupDocBlock', 0, 'Class with defgroup docblock appears on file page');
    $this->assertNoLink('ClassWithDefgroupDocBlock::foo', 'Method in class with defgroup docblock does not appear on file page');
  }

  /**
   * Tests that circular class dependencies do not screw us up.
   */
  function _testExtendsLoops() {
    $this->drupalGet('api/' . $this->branch_info['project'] . '/ClassExtendsLoop.php/class/FirstClass');
    $this->assertText('First class', 'Description is on the class page');
    $this->clickLink('Expanded class hierarchy of FirstClass');
    $this->assertRaw('SecondClass', 'Second class link exists');
    $this->assertRaw('ThirdClass', 'Third class link exists');
  }

  /**
   * Tests Twig files.
   */
  function _testTwig() {
    $this->drupalGet('api/' . $this->branch_info['project'] . '/files');
    $this->assertText('Sample Twig template file, taken from', 'File description is there');
    $this->assertNoText('Available variables', 'Extra information after first line is not shown');

    // Visit the Twig template file and verify the theme call link is there.
    $this->clickLink('sample.html.twig');
    $this->assertText('Sample Twig template file', 'Theme link went to Twig file');
    $this->assertLink('badheader_fun', 0, 'Link to theme calls is present');

    // Click through to the badheader_fun() function and check the theme link.
    $this->clickLink('badheader_fun');
    $this->assertLinkURLSubstring('sample', '/sample.html.twig', 'Theme call turns into link', 'Link goes to right place');
  }

  /**
   * Tests searching case sensitivity.
   */
  function _testSearchCaseSensitivity() {
    // Search for lower-case function name should get to the function page.
    $this->drupalPost('api/' . $this->branch_info['project'] . '/' . $this->branch_info['branch_name'] . '/search', array('search' => 'sample_function'), t('Search'));
    $this->assertURLContains('dup_names.php/function/sample_function', 'Got to function page with lower-case search');

    // Search for upper-case function name should get to the constant page.
    $this->drupalPost('api/' . $this->branch_info['project'] . '/' . $this->branch_info['branch_name'] . '/search', array('search' => 'SAMPLE_FUNCTION'), t('Search'));
    $this->assertURLContains('dup_names.php/constant/SAMPLE_FUNCTION', 'Got to constant page with upper-case search');

  }

  /**
   * Tests services YAML file parsing and display.
   */
  function _testYamlServices() {
    // Test the Services listing page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/services/');
    $this->assertLink('cache_context.url', 0, 'Service is linked');
    $this->assertLink('test.services.yml', 0, 'Services file is linked');
    $this->assertText('Alias of config.storage.active', 'Alias doc is there');
    $this->assertText('Abstract', 'Abstract doc is there');
    $this->assertText('CacheArray', 'Class is there');

    // Test individual services pages.
    $this->clickLink('route_enhancer.param_conversion');
    $this->assertText('Tags', 'Tags header is there');
    $this->assertText('event_subscriber', 'Tag is listed');
    $this->assertText('ParamConversionEnhancer', 'Class is listed');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/test.services.yml/service/container.trait');
    $this->assertNoText('Tags', 'Tags header is not there');
    $this->assertText('Abstract', 'Listed as abstract');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/test.services.yml/service/config.storage');
    $this->assertNoText('Tags', 'Tags header is not there');
    $this->assertText('Alias of', 'Listed as alias');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/test.services.yml/service/cache_context.url');
    $this->assertLink('CacheArray', 0, 'Class is linked');
    $this->assertLink('test.services.yml', 0, 'File is linked');
    $this->assertText('@request', 'Source is listed');

    // Test that the class page links back to the service.
    $this->clickLink('CacheArray');
    $this->assertText('1 service uses CacheArray', 'Service reference text is there');
    $this->assertLink('cache_context.url', 0, 'Service is linked');

    // Test that in the method page, there is a link to the service it
    // references.
    $this->clickLink('CacheArray::persist');
    $this->assertLinkURLSubstring('container.trait', 'test.services.yml/service/container.trait', 'Link to service name exists', 'Link goes to right place');

    // Test that the service page shows references.
    $this->clickLink('container.trait');
    $this->assertText('1 string reference to container.trait', 'Reference text is there');
    $this->assertLink('CacheArray::persist', 0, 'Link to referencing method is there');
  }

  /**
   * Tests hook_api_parse_functions_alter().
   *
   * The test module implements this to make sure files with extension 'foo'
   * can be parsed. Verify that the function in this file shows up on the
   * site.
   */
  function _testParseAlterHook() {
    $this->drupalGet('api/' . $this->branch_info['project'] . '/functions/');
    $this->assertText('only_function_in_file');
  }

}
