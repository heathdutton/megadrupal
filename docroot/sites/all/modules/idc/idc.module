<?php

/**
 * @file
 * idc module.
 * Interface to write custom interactive drush commands as classes.
 */

/**
 * Returns command definitions of all the Drush Interactive Commands available.
 *
 * @return array
 *   All Drush Interactive Commands command definitions, as expected by
 *   hook_drush_command().
 */
function idc_get_drush_commands() {
  $commands = array();
  // Get all classes extending the module.
  $idc_plugins = idc_get_plugins();

  // For each of them, get the drush command definition and store in the array.
  foreach ($idc_plugins as $plugin) {
    // Only show the commands for plugins whose dependencies are met.
    if (!idc_plugin_dependencies_available($plugin)) {
      continue;
    }

    $command_name = call_user_func(array($plugin['handler class'], 'getCommandName'));
    $command_definition = call_user_func(array($plugin['handler class'], 'getCommandDefinition'));
    // Set the handler class in the command array, so that it can be used by
    // idc_callback to know what class needs to be called.
    $command_definition['idc'] = array(
      'handler class' => $plugin['handler class'],
    );
    // Make sure the command callback is the default of the module.
    $command_definition['callback'] = 'idc_callback';
    $commands[$command_name] = $command_definition;
  }
  // Return all the commands info.
  return $commands;
}

/**
 * Checks whether dependencies for a given plugin are met.
 *
 * @param $plugin
 *   An IDC Plugin array, as returned by idc_get_plugins().
 * @return bool
 *   TRUE, if the plugin dependencies are met, FALSE otherwise.
 */
function idc_plugin_dependencies_available($plugin) {
  if (isset($plugin['dependencies']) && is_array($plugin['dependencies']) && count(array_filter($plugin['dependencies'], 'module_exists')) < count($plugin['dependencies'])) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Returns all the classes implementing IDC commands.
 *
 * This function is a wrapper around ctools_get_plugins().
 */
function idc_get_plugins() {
  ctools_include('plugins');
  $plugins = array();
  foreach (ctools_get_plugins('idc', 'idc_commands') as $plugin) {
    if (!empty($plugin['handler class'])) {
      if (in_array('IDCInterface', class_implements($plugin['handler class']))) {
        $plugins[] = $plugin;
      }
    }
  }
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function idc_ctools_plugin_type() {
  $plugins['idc_commands'] = array(
    'extension' => 'php',
  );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function idc_ctools_plugin_directory($module, $plugin) {
  if ($module == 'idc' && $plugin == 'idc_commands') {
    return 'plugins/' . $plugin;
  }
}
