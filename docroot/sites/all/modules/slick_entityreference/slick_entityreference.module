<?php
/**
 * @file
 * Provides fields integration for the Slick carousel.
 */

/**
 * Implements hook_field_formatter_info().
 */
function slick_entityreference_field_formatter_info() {
  $formatters = [];

  $formatters['slick_entityreference'] = [
    'label' => t('Slick carousel'),
    'description' => t('Display the referenced entities rendered by entity_view() in a carousel.'),
    'field types' => ['entityreference'],
    'settings' => [
      'optionset' => 'default',
      'links' => TRUE,
      'view_mode' => 'default',
    ],
  ];

  return $formatters;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function slick_entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Use the same logic as the standard entity reference field formatters.
  return entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function slick_entityreference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  $custom_items[] = [];

  foreach ($items as $delta => $item) {
    // Protect ourselves from recursive rendering.
    static $depth = 0;
    $depth++;
    if ($depth > 20) {
      throw new EntityReferenceRecursiveRenderingException(t('Recursive rendering detected when rendering entity @entity_type(@entity_id). Aborting rendering.', array('@entity_type' => $entity_type, '@entity_id' => $item['target_id'])));
    }

    $item_entity = clone $item['entity'];
    unset($item_entity->content);

    $render_array = node_view($item_entity, $settings['view_mode'], $langcode);

    if (empty($settings['links']) && isset($result[$delta][$field['settings']['target_type']][$item['target_id']]['links'])) {
      $result[$delta][$field['settings']['target_type']][$item['target_id']]['links']['#access'] = FALSE;
    }
    $depth = 0;

    $custom_items[$delta] = drupal_render($render_array);
  }

  return slick_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $custom_items, $display);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function slick_entityreference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  form_load_include($form_state, 'inc', 'slick', 'includes/slick.admin');

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $optionsets = slick_optionset_options();

  $entity_info = entity_get_info($field['settings']['target_type']);
  $options = ['default' => t('Default')];
  if (!empty($entity_info['view modes'])) {
    foreach ($entity_info['view modes'] as $view_mode => $view_mode_settings) {
      $options[$view_mode] = $view_mode_settings['label'];
    }
  }

  $element['view_mode'] = [
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('View mode'),
    '#default_value' => $settings['view_mode'],
    '#access' => count($options) > 1,
  ];

  $element['links'] = [
    '#type' => 'checkbox',
    '#title' => t('Show links'),
    '#default_value' => $settings['links'],
  ];

  $element['optionset'] = [
    '#title'       => t('Slick optionset'),
    '#type'        => 'select',
    '#options'     => $optionsets,
    '#default_value' => $settings['optionset'],
    '#description' => t('Manage optionsets at <a href="@link" target="_blank">Slick carousel admin page</a>.', array('@link' => url('admin/config/media/slick'))),
  ];

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function slick_entityreference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = [];

  $entity_info = entity_get_info($field['settings']['target_type']);
  $view_mode_label = $settings['view_mode'] == 'default' ? t('Default') : $settings['view_mode'];
  if (isset($entity_info['view modes'][$settings['view_mode']]['label'])) {
    $view_mode_label = $entity_info['view modes'][$settings['view_mode']]['label'];
  }
  $summary[] = t('Rendered as @mode', ['@mode' => $view_mode_label]);
  $summary[] = !empty($settings['links']) ? t('Display links') : t('Do not display links');
  $summary[] = t('Slick optionset: @set', ['@set' => $settings['optionset']]);

  return implode('<br />', $summary);
}
