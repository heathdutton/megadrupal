<?php
/**
 * @file
 * Written by Henri MEDOT <henri.medot[AT]absyx[DOT]fr>
 * http://www.absyx.fr
 */

/**
 * Node is not premium.
 */
define('NODE_NOT_PREMIUM', 0);

/**
 * Node is premium.
 */
define('NODE_PREMIUM', 1);



/******************************************************************************
 * Hook functions
 ******************************************************************************/

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function nopremium_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['workflow']['node_options']['#options'])) {
    $form['workflow']['node_options']['#options']['premium'] = t('Premium content');
  }
}



/**
 * Implementation of hook_node_operations().
 */
function nopremium_node_operations() {
  return array(
    'premium' => array(
      'label' => t('Make premium'),
      'callback' => 'node_mass_update',
      'callback arguments' => array('updates' => array('status' => NODE_PUBLISHED, 'premium' => NODE_PREMIUM)),
    ),
    'non_premium' => array(
      'label' => t('Make non-premium'),
      'callback' => 'node_mass_update',
      'callback arguments' => array('updates' => array('premium' => NODE_NOT_PREMIUM)),
    ),
  );
}



/**
 * Implementation of hook_action_info().
 */
function nopremium_action_info() {
  return array(
    'node_make_premium_action' => array(
      'type' => 'node',
      'label' => t('Make content premium'),
      'configurable' => FALSE,
      'behavior' => array('changes_property'),
      'triggers' => array('node_presave', 'comment_insert', 'comment_update', 'comment_delete'),
    ),
    'node_make_non_premium_action' => array(
      'type' => 'node',
      'label' => t('Make content non-premium'),
      'configurable' => FALSE,
      'behavior' => array('changes_property'),
      'triggers' => array('node_presave', 'comment_insert', 'comment_update', 'comment_delete'),
    ),
  );
}

/**
 * Implementation of a Drupal action.
 * Sets the premium property of a node to 1.
 */
function node_make_premium_action(&$node, $context = array()) {
  $node->premium = NODE_PREMIUM;
  watchdog('action', 'Set @type %title to premium.', array('@type' => node_type_get_name($node), '%title' => $node->title));
}

/**
 * Implementation of a Drupal action.
 * Sets the premium property of a node to 0.
 */
function node_make_non_premium_action(&$node, $context = array()) {
  $node->premium = NODE_NOT_PREMIUM;
  watchdog('action', 'Set @type %title to non-premium.', array('@type' => node_type_get_name($node), '%title' => $node->title));
}



/**
 * Implementation of hook_theme().
 */
function nopremium_theme() {
  return array(
    'nopremium_message' => array(
      'variables' => array('node' => NULL),
    ),
  );
}



/**
 * Implementation of hook_node_view_alter().
 */
function nopremium_node_view_alter(&$build) {
  $node = $build['#node'];

  if (($build['#view_mode'] != 'teaser') && $node->premium && !nopremium_access_full_content($node)) {
    nopremium_alter_node($build);
  }
}



/**
 * Implementation of hook_node_prepare().
 * Set up premium default value, if required.
 */
function nopremium_node_prepare($node) {
  if (!isset($node->nid) || isset($node->is_new)) {
    $node_options = variable_get('node_options_'. $node->type, array());
    if (!isset($node->premium)) {
      $node->premium = (int) in_array('premium', $node_options);
    }
  }
}



/**
 * Implementation of hook_form_BASE_FORM_ID_alter().
 */
function nopremium_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];

  $form['options']['premium'] = array(
    '#type' => 'checkbox',
    '#title' => t('Premium content'),
    '#default_value' => $node->premium,
  );

  // Allow or not to override the premium option.
  // See http://drupal.org/project/override_node_options
  if (!user_access('administer nodes') && user_access('override '. $node->type .' premium option')) {
    foreach (element_children($form['options']) as $key) {
      if (!isset($form['options'][$key]['#access'])) {
        $form['options'][$key]['#access'] = FALSE;
      }
      $form['options']['#access'] = $form['options']['premium']['#access'] = TRUE;
    }
  }
}



/**
 * Implementation of hook_views_api().
 */
function nopremium_views_api() {
  return array('api' => 2);
}



/**
 * Implementation of hook_permission().
 */
function nopremium_permission() {
  $perms = array();
  foreach (node_type_get_types() as $type => $info) {
    $perms['view full '. $type .' premium content'] = array('title' => t('%type_name: View full premium content', array('%type_name' => $info->name)));
    $perms['override '. $type .' premium option'] = array('title' => t('%type_name: Override premium content', array('%type_name' => $info->name)));
  }
  return $perms;
}



/**
 * Implementation of hook_menu().
 */
function nopremium_menu() {
  $items['admin/config/workflow/nopremium'] = array(
    'title' => 'Node Option Premium',
    'description' => 'Configure Node Option Premium.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nopremium_settings_form'),
    'access arguments' => array('administer permissions'),
    'file' => 'nopremium.admin.inc',
  );
  return $items;
}



/******************************************************************************
 * Theme functions
 ******************************************************************************/

/**
 * Theme nopremium message.
 *
 * @ingroup themeable
 */
function theme_nopremium_message($variables) {
  return '<div class="nopremium-message">'. check_markup(t(nopremium_get_message($variables['node']->type))) .'</div>';
}



/******************************************************************************
 * API and helper functions
 ******************************************************************************/

/**
 * Determine whether the current user may access the full content of the specified nopremium node.
 */
function nopremium_access_full_content($node, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  return user_access('administer nodes', $account)
    || user_access('view full '. $node->type .' premium content', $account)
    || node_access('update', $node, $account)
    || $account->uid && ($account->uid == $node->uid);
}



/**
 * Alter a node replacing full content by nopremium content.
 */
function nopremium_alter_node(&$build) {
  $view_mode = $build['#view_mode'];

  if ($view_mode != 'teaser') {
    $node = $build['#node'];
    $langcode = $build['#language'];

    node_build_content($node, 'teaser', $langcode);
    unset($node->content['links']['node']['#links']['node-readmore']);
    $node->content['nopremium_message'] = array(
      '#markup' => theme('nopremium_message', array('node' => $node)),
    );

    $build = $node->content;
    unset($node->content);

    $build += array(
      '#theme' => 'node',
      '#node' => $node,
      '#view_mode' => 'teaser',
      '#language' => $langcode,
    );

    if (!empty($node->nid) && !($view_mode == 'full' && node_is_page($node))) {
      $build['#contextual_links']['node'] = array('node', array($node->nid));
    }

    $type = 'node';
    drupal_alter(array('node_view', 'entity_view'), $build, $type);

    $build['#view_mode'] = $view_mode;
  }
}



/**
 * Get the raw nopremium message for the given node type.
 */
function nopremium_get_message($type = '') {
  if ($type) {
    $message = variable_get('nopremium_message_'. $type, '');
    if ($message) {
      return $message;
    }
  }

  return variable_get('nopremium_message', 'The full content of this page is available to premium users only.');
}
