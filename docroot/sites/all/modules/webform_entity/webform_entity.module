<?php

/**
 * @file
 *  webform_entity provides a base fieldable entity for webform submissions
 *  that webforms can add fields to.
 */

/**
 * Implements hook_menu().
 */
function webform_entity_menu() {
  $items = array();
  $items['admin/config/content/webform/entities/%webform_entity_webform_submission_type'] = array(
    'title' => 'Webform node type settings',
    'description' => 'Create and delete webform submission entities for a specific webform node type.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_entity_type_form', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/webform/entities/%webform_entity_webform_submission_type/delete'] = array(
    'title' => 'Webform submission entity type delete',
    'description' => 'Delete a webform submission entity.',
    'page arguments' => array('webform_entity_type_delete_confirm', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_migrate_api().
 */
function webform_entity_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

/**
 * Implements hook_entity_info().
 */
function webform_entity_entity_info() {
  $entity_info['webform_submission_entity'] = array(
    'label' => t('Webform Submission'),
    'controller class' => 'WebformSubmissionsController',
    'base table' => 'webform_submissions',
    'label callback' => 'webform_entity_label',
    'uri callback' => 'webform_entity_uri',
    'view callback' => 'webform_entity_submission_view',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'sid',
      'bundle' => 'bundle',
      'label' => 'sid',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ),
    ),
    // Provide callbacks enabling Entity API to perform programmatic saving and deleting.
    'creation callback' => 'entity_metadata_create_object',
    'save callback' => 'webform_entity_save_webform_submission',
    'deletion callback' => 'webform_entity_delete_webform_submission',
    'access callback' => 'webform_entity_submission_access',
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('webform_entity_submission_type', 'west')
    ->fields('west')
    ->execute()
    ->fetchAllAssoc('type');

  // Add existing node types.
  foreach (webform_entity_node_types() as $type) {
    $webform_submission_entity_type = new stdClass;
    $webform_submission_entity_type->id = 'new';
    $webform_submission_entity_type->type = $type;

    $types[$type] = $webform_submission_entity_type;
  }

  if (!empty($types)) {
    foreach ($types as $type) {
      $entity_info['webform_submission_entity']['bundles'][$type->type] = array(
        'label' => t('@type Webform Base', array('@type' => $type->type)),
        'admin' => array(
          'path' => 'admin/config/content/webform/entities/%webform_entity_webform_submission_type',
          'real path' => 'admin/config/content/webform/entities/' . strtr($type->type, array('_' => '-')),
          'bundle argument' => 5,
          'access callback' => 'webform_entity_bundle_admin_access_callback',
          'access arguments' => array(5),
        ),
      );
    }
  }

  $entity_info['webform_submission_entity_type'] = array(
    'label' => t('Webform Submission type'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'webform_entity_submission_type',
    'fieldable' => FALSE,
    'bundle of' => 'webform_submission_entity',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'type',
    ),
    'module' => 'webform_entity',
  );

  return $entity_info;
}

/**
 *  Implements hook_entity_property_info().
 */
function webform_entity_entity_property_info() {
  $info['webform_submission_entity']['properties']['sid'] = array(
    'label' => t("Webform Submission ID"),
    'type' => 'integer',
    'description' => t("The unique ID of the submission."),
    'schema field' => 'sid',
  );
  $info['webform_submission_entity']['properties']['nid'] = array(
    'label' => t("Webform Node ID"),
    'type' => 'integer',
    'description' => t("The node ID of the submission's webform."),
    'schema field' => 'nid',
  );
  $info['webform_submission_entity']['properties']['uid'] = array(
    'label' => t("Webform Submission User ID"),
    'type' => 'integer',
    'description' => t("The user ID of the submission's author."),
    'schema field' => 'uid',
  );
  return $info;
}

/**
 * Implements hook_token_info().
 */
function webform_entity_token_info() {
  $type = array(
    'name' => t('Webform Submission'),
    'description' => t('Tokens related to webform submissions.'),
    'needs-data' => 'webform_submission_entity',
  );
  $webform_submission_entity['sid'] = array(
    'name' => t('Webform Submission SID'),
    'description' => t('The Webform Submission ID'),
  );
  $webform_submission_entity['nid'] = array(
    'name' => t('Webform Submission Node NID'),
    'description' => t('The NID of the node this webform submission was submitted to.'),
  );
  $webform_submission_entity['uid'] = array(
    'name' => t('Webform Submission User UID'),
    'description' => t('The UID of the user who submitted this webform.'),
  );
  $webform_submission_entity['remote_addr'] = array(
    'name' => t('Webform Submission User UID'),
    'description' => t('The IP address of the user that submitted the form.'),
  );
  $webform_submission_entity['bundle'] = array(
    'name' => t('Webform Submission Bundle'),
    'description' => t('The Webform Entity bundle this submission belongs to.'),
  );
  $webform_submission_entity['submitted'] = array(
    'name' => t('Webform Submission Submitted'),
    'description' => t('Timestamp of when the form was submitted.'),
  );
  $webform_submission_entity['is_draft'] = array(
    'name' => t('Webform Submission is draft'),
    'description' => t('Is this a draft of the submission?'),
  );
  $webform_submission_entity['node-path'] = array(
    'name' => t('Node path'),
    'description' => t("The node path for the webform"),
  );
  $webform_submission_entity['author'] = array(
    'name' => t("Author"),
    'description' => t("The author of the webform submission."),
    'type' => 'user',
  );
  $webform_submission_entity['node'] = array(
    'name' => t("Node"),
    'description' => t("The node the webform submission is attached to."),
    'type' => 'node',
  );
  return array(
    'types' => (array('webform_submission_entity' => $type)),
    'tokens' => (array('webform_submission_entity' => $webform_submission_entity)),
  );
}

/**
 * Implements hook_tokens().
 */
function webform_entity_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'webform_submission_entity' && !empty($data['webform_submission_entity'])) {
    $token_info = webform_entity_token_info();
    $webform_tokens = array_keys($token_info['tokens']['webform_submission_entity']);
    $submission = $data['webform_submission_entity'];
    $node = node_load($submission->nid);
    $replacements = array();
    foreach ($tokens as $token_name => $token_string) {
      switch ($token_name) {
        case 'author':
          $account = user_load($submission->uid);
          $name = format_username($account);
          $replacements[$token_name] = $sanitize ? check_plain($name) : $name;
          break;
        case 'node':
          $replacements[$token_name] = $sanitize ? check_plain($node->title) : $node->title;
          break;
        default:
          if (in_array($token_name, $webform_tokens) && isset($submission->{$token_name})) {
            $replacements[$token_string] = $submission->{$token_name};
          }
          break;
      }
    }
    if ($author_tokens = token_find_with_prefix($tokens, 'author')) {
      $author = user_load($submission->uid);
      $replacements += token_generate('user', $author_tokens, array('user' => $author), $options);
    }
    if ($node_tokens = token_find_with_prefix($tokens, 'node')) {
      $replacements += token_generate('node', $node_tokens, array('node' => $node), $options);
    }
    return $replacements;
  }
}

/**
 * Implements hook_webform_submission_presave().
 */
function webform_entity_webform_submission_presave($node, &$submission) {
  if (in_array($node->type, array_keys(webform_entity_get_types()))) {
    module_load_include('inc', 'field', 'field.attach');
    // Webform clears what we add to the $submission in $form during it's submit
    //  handler, so we must stash the object somewhere.
    if ($fielded_submission = drupal_static('webform_entity_webform_submitted_object')) {
      $submission = (object) array_merge((array) $fielded_submission, (array) $submission);
      module_invoke_all('entity_presave', $submission, 'webform_submission_entity');
      field_attach_presave('webform_submission_entity', $submission);
    }
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function webform_entity_webform_submission_insert($node, $submission) {
  // Ensure our bundle is set and it hasn't been cleared by webform.
  $submission->bundle = $node->type;
  db_update('webform_submissions')
    ->fields(array('bundle' => $node->type))
    ->condition('sid', $submission->sid, '=')
    ->execute();
  if (in_array($node->type, array_keys(webform_entity_get_types()))) {
    // Webform clears what we add to the $submission in $form during it's submit
    //  handler, so we must stash the object somewhere.
    if ($fielded_submission = drupal_static('webform_entity_webform_submitted_object')) {
      $submission = (object) array_merge((array) $fielded_submission, (array) $submission);
    }
    module_load_include('inc', 'field', 'field.attach');
    field_attach_insert('webform_submission_entity', $submission);
    module_invoke_all('entity_insert',$submission, 'webform_submission_entity');
  }
}

/**
 * Implements hook_webform_submission_update().
 */
function webform_entity_webform_submission_update($node, $submission) {
  if (in_array($node->type, array_keys(webform_entity_get_types()))) {
    // Webform clears what we add to the $submission in $form during it's submit
    // handler, so we must stash the object somewhere.
    if ($fielded_submission = drupal_static('webform_entity_webform_submitted_object')) {
      $submission = (object) array_merge((array) $submission, (array) $fielded_submission);
    }
    module_load_include('inc', 'field', 'field.attach');
    field_attach_presave('webform_submission_entity', $submission);
    module_invoke_all('entity_presave', $submission, 'webform_submission_entity');
    field_attach_update('webform_submission_entity', $submission);
    module_invoke_all('entity_update',$submission, 'webform_submission_entity');
  }
}

/**
 * Implements hook_webform_submission_delete().
 */
function webform_entity_webform_submission_delete($node, $submission) {
  if (in_array($node->type, array_keys(webform_entity_get_types()))) {
    module_load_include('inc', 'field', 'field.attach');
    field_attach_delete('webform_submission_entity', $submission);
    module_invoke_all('entity_delete',$submission, 'webform_submission_entity');
  }
}

/**
 * Implements hook_webform_submission_load().
 */
function webform_entity_webform_submission_load($submissions) {
  // If I was webform I wouldn't invoke this hook with an empty array...
  // but I'm not webform, and it does.
  if (count($submissions)) {
    $results = db_select('webform_submissions', 'ws')
      ->fields('ws', array('sid', 'bundle'))
      ->condition('sid', array_keys($submissions), 'IN')
      ->condition('bundle', NULL, 'IS NOT')
      ->execute()
      ->fetchAllKeyed();
    $field_enabled_submissions = array();
    foreach ($results as $sid => $bundle) {
      $submissions[$sid]->bundle = $bundle;
      $field_enabled_submissions[$sid] = $submissions[$sid];
    }
    if ($field_enabled_submissions) {
      // Load fields via the Field API and attach them to the entity object.
      field_attach_load('webform_submission_entity', $field_enabled_submissions);
      foreach (module_implements('entity_load') as $module) {
        $function = $module . '_entity_load';
        $function($submissions, 'webform_submission_entity');
      }
    }
  }
}

/**
 * Alter the display of a Webform submission.
 *
 * This function applies to both e-mails sent by Webform and normal display of
 * submissions when viewing through the adminsitrative interface.
 *
 * @param $renderable
 *   The Webform submission in a renderable array, similar to FormAPI's
 *   structure. This variable must be passed in by-reference. Important
 *   properties of this array include #node, #submission, #email, and #format,
 *   which can be used to find the context of the submission that is being
 *   rendered.
 */
function webform_entity_webform_submission_render_alter(&$renderable) {
  // Remove page breaks from sent e-mails.
  $submission = $renderable['#submission'];
  module_invoke_all('entity_view',$submission, 'webform_submission_entity', 'full', LANGUAGE_NONE);
  if (isset($submission->skip_fields) && $submission->skip_fields === TRUE) {
    return;
  }
  $node = $renderable['#node'];
  if (in_array($node->type, array_keys(webform_entity_get_types()))) {
    $view_mode = 'full';
    // Build and attach the field content to the render array.
    field_attach_prepare_view('webform_submission_entity', array($submission->sid => $submission), $view_mode);
    entity_prepare_view('webform_submission_entity', array($submission->sid => $submission));
    // Add our fields to the render array
    $renderable['entity_fields'] = field_attach_view('webform_submission_entity', $submission, $view_mode);
    // Set the weight of our fields such that they will appear below the rest of
    // the render array.
    $renderable['entity_fields']['#weight'] = 1;
  }
}



/**
 * Implements hook_form_alter().
 */
function webform_entity_form_alter(&$form, &$form_state, $form_id) {
  // Ensure that we're on a webform form in the most efficient way possible.
  // It's unlikely that anything that isn't a webform has a webform key but we
  // can also use the check webform itself uses in its hook_forms
  // implementation.
  if (strpos($form_id, 'webform_client_form_') === 0) {
    // Ensure there is a bundle for this webform node type.
    if (in_array($form['#node']->type, array_keys(webform_entity_get_types()))) {
      if (isset($form['#submission']->sid)) {
        $submission = $form['#submission'];
      }
      else {
        // If this is a new submission the #submission is an empty array not an
        // object with the required bundle attribute, so create one.
        $submission = (object) $form_state;
        $submission->bundle = $form['#node']->type;
      }
      $form_state['webform_entity']['bundle'] = $submission->bundle;
      // Attach the appropriate field_api fields to the form.
      $form['submitted']['webform_entity_form'] = array(
        '#tree' => TRUE,
        '#weight' => 0,
        '#type' => 'container',
      );
      field_attach_form('webform_submission_entity', $submission, $form['submitted']['webform_entity_form'], $form_state);
      $form['#validate'][] = 'webform_entity_webform_submission_validate';
      array_unshift($form['#submit'], 'webform_entity_webform_submission_submit');
    }
  }
}

/**
 * Returns the list of webform-enabled node types.
 * Works for webform 3.x and 4.x.
 * @return array|null
 */
function webform_entity_node_types() {
  if (function_exists('webform_node_types')) {
    return webform_node_types();
  }
  else {
    return webform_variable_get('webform_node_types');
  }
}

/**
 * Implements hook_form_[form_id]_alter().
 *
 * Here we link the node content types to on the webform admin pages to
 * the field configuration pages for provided for our entity bundles.
 */
function webform_entity_form_webform_admin_settings_alter(&$form, &$form_state) {
  $webform_types = webform_entity_node_types();
  $form['webform_types'] = array(
    '#theme' => 'table',
    '#header' => array(
      t('Node Type'),
      array(
        'data' => t('Operations'),
        'colspan' => 3,
      ),
    ),
    '#rows' => array(),
    '#caption' => t('Webform Submission Types'),
    '#weight' => -10,
  );

  foreach ($webform_types as $type) {
    $row = array(
      l(node_type_get_name($type), "admin/structure/types/manage/$type"),
    );

    if (drupal_valid_path("admin/config/content/webform/entities/$type/fields")) {
      $row[] = l(t('Manage Fields'), "admin/config/content/webform/entities/$type/fields");
      $row[] = l(t('Manage Display'), "admin/config/content/webform/entities/$type/display");
      $row[] = l(t('Delete Submission Type'), "admin/config/content/webform/entities/$type");
    }
    elseif (!module_exists('field_ui')){
      $row[] = t('Enable Field UI module to be able to manage fields.');
      $row[] = '';
      $row[] = '';
    }
    else {
      $row[] = l(t('Create Submission Type'), "admin/config/content/webform/entities/$type");
      $row[] = '';
      $row[] = '';
    }
    $form['webform_types']['#rows'][] = $row;
  }

  if (empty($form['webform_types']['#rows'])) {
    $form['webform_types']['#rows'][] = array(
      t('You have no node types set as Webform-enabled.'),
      l(t('Manage Content Types'), 'admin/structure/types'),
      '',
      '',
    );
  }

  // When settings change we need to clear caches appropriate to adding and
  // removing entities.
  $form['#submit'][] = 'webform_entity_clear_caches';
}

/**
 * Access callback for entity field administration pages.
 *
 * Checks whether we have a type defined.
 */
function webform_entity_bundle_admin_access_callback($type) {
  if (is_numeric($type->id) && user_access('administer site configuration')) {
    return TRUE;
  }
}

/**
 * Provide the label callback defined in the hook_entity_info implementation.
 */
function webform_entity_label($webform_submission) {
  // Support serial property for Webform 7.x-4.x and sid for 7.x-3.x.
  return t('Submission @id', array(
    '@id' => $webform_submission->serial ? $webform_submission->serial : $webform_submission->sid
  ));
}

/**
 * Provide the uri callback defined in the hook_entity_info implementation.
 */
function webform_entity_uri($webform_submission) {
  return array(
    'path' => 'node/' . $webform_submission->nid . '/submission/' . $webform_submission->sid,
  );
}

/**
 * Clear a number of caches appropriate to adding and removing entities.
 */
function webform_entity_clear_caches() {
  // We need to clear the entity cache because we're changing what entities are
  // available.
  cache_clear_all('entity_info:', 'cache', TRUE);
  field_cache_clear();
  field_flush_caches();
  // We need to clear the menu path because we may be adding and removing entity
  // field configuration pages.
  menu_rebuild();
}

/**
 * Form validation added to all webform fields to handle entity fields.
 */
function webform_entity_webform_submission_validate(&$form, &$form_state) {
  if (in_array($form['#node']->type, array_keys(webform_entity_get_types()))) {
    $submission = (object) $form_state['values'];
    $submission->bundle = $form['#node']->type;
    if (!is_object($form['#submission'])) {
      $form['#submission'] = &$submission;
    }
    module_load_include('inc', 'field', 'field.attach');
    field_attach_form_validate('webform_submission_entity', $submission, $form['submitted']['webform_entity_form'], $form_state);
    // Here we stash the form and form_state so that we have a place to get them
    // in hook_webform_submission_update() and insert.  We should see if we can
    // put what we need into the form state or webform object somewhere ealier.
    drupal_static('webform_entity_webform_form_state', array('form' => $form, 'form_state' => $form_state));
  }
}

/**
 * Form submit added to all webform forms to handle entity fields.
 */
function webform_entity_webform_submission_submit(&$form, &$form_state) {
  if (in_array($form['#node']->type, array_keys(webform_entity_get_types()))) {
    $submission =& $form['#submission'];
    if (!is_object($submission) && is_array($submission)) {
      $submission = new stdclass;
      $submission->bundle = $form['#node']->type;
    }
    module_load_include('inc', 'field', 'field.attach');
    field_attach_submit('webform_submission_entity', $submission, $form['submitted']['webform_entity_form'], $form_state);
    drupal_static('webform_entity_webform_submitted_object', $submission);
  }
}

/**
 * WebformSubmissionsController extends the DrupalDefaultEntityController by
 * adding an extra function to handle saving of entities.
 */
class WebformSubmissionsController extends DrupalDefaultEntityController {

 /**
  * Saves the basic entity mathching custom fields via drupal_write_record()
  */
 public function save($submission) {
    $node = node_load($submission->nid);
    if (!isset($submission->sid)) {
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      if (!empty($submission->is_new)) {
        // Necessary because webform won't save the submission if is_new is set to TRUE.
        unset($submission->is_new);
      }
      webform_submission_insert($node, $submission);
    }
    else {
      module_load_include('inc', 'webform', 'webform.submissions');
      webform_submission_update($node, $submission);
    }
    return $submission;
  }

  /**
   * Implements DrupalEntityControllerInterface::load().
   */
  public function load($ids = array(), $conditions = array()) {
    // Use the parent load method allowing the $conditions to take effect.
    $submissions = parent::load($ids, $conditions);
    if (count($submissions)) {
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $sids = array();
      foreach ($submissions as $sid => $submission) {
        $sids['sid'][] = $sid;
      }
      // TODO: Maybe figure out a way to prevent what is essentially a double load.
      // We hook into the webform load op
      $fetched = webform_get_submissions($sids);
      // Re-key the submissions so they're in the order requested.
      $submissions = array();
      foreach ($ids as $id) {
        $submissions[$id] = isset($fetched[$id]) ? $fetched[$id] : NULL;
      }
    }
    else {
      $submissions = array();
    }
    return $submissions;
  }
}

/**
 * Return an array that defines the empty component.
 * Since we use this in many places we shouldn't be defining it multiple times.
 */
function webform_entity_empty_component() {
  return array(
    1 => array(
      'cid' => 1,
      'pid' => 0,
      'form_key' => 'hidden',
      'name' => 'hidden',
      'type' => 'hidden',
      'value' => '',
      'extra' => array(
        'private' => FALSE,
      ),
      'mandatory' => 0,
      'weight' => 0,
    ),
  );
}

/**
 * Implements hook_node_load().
 */
function webform_entity_node_load($nodes, $types) {
  // Trick webforms with entities and no other components into displaying,
  // by adding a fake component.
  if ((arg(2) != 'webform' && arg(2) != 'submission') || arg(4) == 'edit') {
    foreach ($nodes as $node) {
      if (!in_array($node->type, webform_entity_node_types())) {
        return;
      }
      if (!is_array($nodes[$node->nid]->webform['components']) || empty($nodes[$node->nid]->webform['components'])) {
        // We only want to do this trick for webforms with attached entities.
        // Otherwise we could end up with orphaned submit buttons.
        $instances = field_info_instances('webform_submission_entity', $node->type);
        if (count($instances)) {
          $nodes[$node->nid]->webform['components'] = webform_entity_empty_component();
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function webform_entity_node_presave($node) {
  if (isset($node->webform['components'][1]) && count($node->webform['components'][1]) == 1) {
    $empty_component = webform_entity_empty_component();
    if ($node->webform['components'][1] == $empty_component) {
      unset($node->webform['components'][1]);
    }
  }
}

/**
 * Implements hook_node_save().
 */
function webform_entity_node_save($node) {
  if (isset($node->webform['components'][1]) && count($node->webform['components'][1]) == 1) {
    $empty_component = webform_entity_empty_component();
    if ($node->webform['components'][1] == $empty_component) {
      unset($node->webform['components'][1]);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function webform_entity_node_insert($node) {
  if (!in_array($node->type, webform_entity_node_types())) {
    return;
  }

  // If added directly through node_save(), set defaults for the node.
  if (!isset($node->webform)) {
    $node->webform = webform_node_defaults();
  }

  // Always add a row to {webform} when adding a webform node. This is needed so that 
  // webform_submission_insert reliably has a nid.
  if ($node->webform == webform_node_defaults() && !in_array($node->type, webform_entity_node_types())) {
    $node->webform['nid'] = $node->nid;
    webform_node_insert($node);
  }
}

/**
 * Gets an array of all webform_submission_entity types, keyed by the name.
 *
 * @param $type_name
 *   if set, the type with the given name is returned.
 * @return webform_submission_entity[]
 *   depending whether $type isset, an array of webform_submission_entity types
 *   or a single one.
 */
function webform_entity_get_types($type_name = null) {
  $types = &drupal_static('__FUNCTION__', FALSE);
  $return = FALSE;
  if ($types === FALSE || !isset($types[$type_name])) {
    $types = entity_load_multiple_by_name('webform_submission_entity_type', isset($type_name) ? array($type_name) : false);
  }
  // If we have a node type of this type but no webform_submission_entity_type,
  // create one.
  if (!isset($types[$type_name]) && in_array($type_name, array_keys(node_type_get_names()))) {
    if (in_array($type_name, webform_entity_node_types())) {
      $return = new stdClass;
      $return->id = 'new';
      $return->type = $type_name;
    }
  }
  // If we have one, return that.
  elseif (isset($types[$type_name])) {
    $return = $types[$type_name];
  }
  // If none were found
  elseif ($type_name == NULL) {
    $return = array();
    foreach ($types as $type) {
      $return[$type->type] = $type;
    }
  }
  return $return;
}

function webform_entity_type_form($form, &$form_state, $type) {
  $form['#webform_submission_entity_type'] = $type;
  if (!in_array($type->type, array_keys(webform_entity_get_types())) && $type->id == 'new') {
    $help_text = 'The %type content type does not yet have an entity webform.  Click "Create" to create one.  Webform submission entity types can be exported using the !features_module.';
    $op = t('Create');
    if (isset($type->id) && $type->id == 'new') {
      $type->id = NULL;
    }
  }
  else {
    $help_text = 'The %type content type has an entity webform.  Click "Delete" to remove it.  Webform submission entity types can be exported using the !features_module.';
    $op = t('Delete');
  }
  $form['help_text'] = array(
    '#type' => 'markup',
    '#markup' => t($help_text, array('%type' => $type->type, '!features_module' => l('features module', 'http://drupal.org/project/features'))),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $form['#webform_submission_entity_type'] = $type;
  $form['create'] = array(
    '#type' => 'submit',
    '#value' => $op,
  );
  return $form;
}

function webform_entity_type_form_validate($form, &$form_state) {
  if ($form_state['input']['op'] == t('Create')) {
    if (!in_array($form['#webform_submission_entity_type']->type, array_keys(node_type_get_names()))) {
      form_set_error(NULL, t('The %type_name is missing, it may have been deleted.', array('%type_name' => $form['#webform_entity_type']->type)));
    }
  }
}

function webform_entity_type_form_submit($form, &$form_state) {
  $type = $form['#webform_submission_entity_type'];
  if ($form_state['input']['op'] == t('Create')) {
    entity_save('webform_submission_entity_type', $type);
    $form_state['redirect'] = 'admin/config/content/webform/entities/' . strtr($type->type, array('_' => '-')) . '/fields';
  }
  elseif ($form_state['input']['op'] == t('Delete')) {
    $form_state['redirect'] = 'admin/config/content/webform/entities/' . strtr($type->type, array('_' => '-')) . '/delete';
  }
  webform_entity_clear_caches();
}

/**
 * Implements hook_webform_submission_entity_type_delete()
 */
function webform_entity_webform_submission_entity_type_delete($type) {
  if (!in_array($type->type, array_keys(node_type_get_names()))) {
    field_attach_delete_bundle(entity_get_info('webform_submission_entity'), $type);
    menu_rebuild();
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function webform_entity_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'entityreference' && $plugin_type) {
    return 'plugins/entityreference/' . $plugin_type;
  }
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function webform_entity_og_context_negotiation_info() {
  $providers = array();
  $providers['webform_entity'] = array(
    'name' => t('Webform Entity'),
    'description' => t("Determine context by checking if a webform entity is a group or a group content."),
    'callback' => 'webform_entity_og_context_handler',
    'menu path' => array('node/%/submission/%'),
  );
  return $providers;
}

/**
 * OG context handler callback.
 */
function webform_entity_og_context_handler() {
  $context = FALSE;
  $item = menu_get_item();
  if (($position = array_search('submission', $item['map'])) !== FALSE) {
    $submission = $item['map'][$position + 1];
  }
  // This is provided for compatibility with the webform_entity_pages module.
  // It doesn't seem worth introducing a hook but this is a little silly.
  else if (($position = array_search('webform-submission', $item['map'])) !== FALSE) {
    $submission = $item['map'][$position + 1];
  }
  if (isset($submission->sid)) {
    // Only do this for webform entity submissions.
    $node = node_load($submission->nid);
    if (!in_array($node->type, array_keys(webform_entity_get_types()))) {
      return;
    }
    if ($group = og_get_group('webform_submission_entity', $submission->sid)) {
      $context = drupal_map_assoc(array($group->gid));
    }
    elseif ($gids = og_get_entity_groups('webform_submission_entity', $submission)) {
      $context = $gids;
    }
  }
  return $context;
}

/**
 * Implements hook_node_delete().
 */
function webform_entity_node_delete($node) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submissions = webform_get_submissions(array('nid' => $node->nid));
  if (count($submissions)) {
    foreach ($submisisons as $submission) {
      webform_submission_delete($node, $submission);
    }
  }
}


/**
 * Menu argument loader: loads a node type by string.
 *
 * @param $name
 *   The machine-readable name of a node type to load, where '_' is replaced
 *   with '-'.
 *
 * @return
 *   A node type object or FALSE if $name does not exist.
 */
function webform_entity_webform_submission_type_load($name) {
  return webform_entity_get_types(strtr($name, array('-' => '_')));

}

/**
 * Menu callback -- ask for confirmation of webform_submission_type deletion
 */
function webform_entity_type_delete_confirm($form, &$form_state, $type) {
  $form['#webform_submission_entity_type'] = $type;
  $types = node_type_get_names();
  // Always provide entity id in the same form key as in the entity edit form.
  $form['id'] = array('#type' => 'value', '#value' => $type->id);
  return confirm_form($form,
    t('Are you sure you want to delete %title?', array('%title' => $types[$type->type])),
    'admin/config/content/webform',
    t('This action cannot be undone and will delete all field content added to this base form and the fields themselves if they are associated only with this webform submission type.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Execute webform submission entity type deletion
 */
function webform_entity_type_delete_confirm_submit($form, &$form_state) {
  $types = node_type_get_names();
  $type = $form['#webform_submission_entity_type'];
  $entity = entity_delete('webform_submission_entity_type', $type->id);
  webform_entity_clear_caches();
  $form_state['redirect'] = 'admin/config/content/webform';
  drupal_set_message(t('%type has been deleted.', array('%type' => $types[$type->type])));
}

/**
 * Loads a webform submission from the database.
 *
 * @param $sid
 *   The sid of a sigle webform submission entity to load.
 */
function webform_submission_entity_load($sid) {
  if (is_numeric($sid)) {
    return array_pop(entity_get_controller('webform_submission_entity')->load(array($sid)));
  }
}

/**
 * Save a new or updated webform submission.
 *
 * This callback is used by Entity API for programmatic saving.
 */
function webform_entity_save_webform_submission($submission) {
  entity_get_controller('webform_submission_entity')->save($submission);
}

/**
 * Access callback for webform submission entities.
 */
function webform_entity_submission_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  if (isset($entity)) {
    $node = node_load($entity->nid);

    if ($op == 'update') {
      $op = 'edit';
    }
    else if ($op == 'create') {
      // TODO: See if there's a better way to do this. Since this was failing before with
      // no implications, this should be safe until the issue below is solved in Webform.
      //
      // http://drupal.org/node/1794960
      return FALSE;
    }

    return webform_submission_access($node, $entity, $op, $account);
  }
}

/**
 * Delete a webform submission.
 *
 * This callback is used by Entity API for programmatic deleting.
 */
function webform_entity_delete_webform_submission($id) {
  $submission = webform_submission_entity_load($id);
  $node = node_load($submission->nid);
  webform_submission_delete($node, $submission);
}

/**
 * View callback to show a submission.
 */
function webform_entity_submission_view($entities, $view_mode, $langcode, $entity_type) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');

  $build = array();
  foreach ($entities as $key => $entity) {
    if (isset($entity->sid)) {
      $submission = webform_get_submission($entity->nid, $entity->sid);
      $node = node_load($entity->nid);
      $render = webform_submission_render($node, $submission, NULL, 'html');
      if (is_array($render)) {
        $build[$key] = $render;
      }
      else {
        $build[$key]['#markup'] = $render;
      }
    }
  }
  return array('webform_submission_entity' => $build);
}

/**
 * Implements hook_views_data_alter().
 *
 * Informs Views that we are providing an entity type for this base table.
 */
function webform_entity_views_data_alter(&$data) {
  $data['webform_submissions']['table']['entity type'] = 'webform_submission_entity';
}
