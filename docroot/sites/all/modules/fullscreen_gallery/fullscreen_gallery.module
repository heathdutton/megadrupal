<?php
/**
 * @file
 * Main functionality for fullscreen gallery page.
 */

// Load fullscreen gallery field formatter implementation.
module_load_include('inc', 'fullscreen_gallery', 'includes/fullscreen_gallery.formatter');

/**
 * Implements hook_menu().
 *
 * Define menu items and page callbacks.
 */
function fullscreen_gallery_menu() {
  // Fullscreen gallery initial page.
  $items['fullscreen_gallery/%/%entity_object/%/%'] = array(
    'load arguments' => array(1),
    'page callback' => '_fullscreen_gallery_page',
    'page arguments' => array(1, 2, 3, 4),
    'access callback' => 'fullscreen_gallery_access_callback',
    'access arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
  );

  // Administration interface.
  $items['admin/config/media/fullscreen_gallery'] = array(
    'title' => 'Fullscreen gallery settings',
    'description' => 'Fullscreen gallery default configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fullscreen_gallery_admin'),
    'access arguments' => array('administer fullscreen gallery'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fullscreen_gallery.admin.inc',
  );
  return $items;
}


/**
 * Callback function for fullscreen_gallery access.
 *
 * @param string $entity_type
 *   Drupal entity type.
 * @param object $entity
 *   Drupal entity.
 *
 * @return bool
 *   TRUE if user has access to entity, FALSE otherwise.
 */
function fullscreen_gallery_access_callback($entity_type, $entity) {
  // Return access by entity_access().
  return !empty($entity) ? entity_access('view', $entity_type, $entity) : FALSE;
}


/**
 * Implements hook_permission().
 *
 * Define user permissions.
 */
function fullscreen_gallery_permission() {
  return array(
    'administer fullscreen gallery' => array(
      'title' => t('Administer fullscreen gallery'),
      'description' => t('Administer fullscreen gallery settings'),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function fullscreen_gallery_theme() {
  $module_path = drupal_get_path('module', 'fullscreen_gallery');
  return array(
    'fullscreen_gallery' => array(
      'variables' => array(
        'counter' => '',
        'thumbnails' => '',
        'prev' => '',
        'next' => '',
        'image' => '',
        'image_title' => '',
        'error' => '',
        'back_link' => '',
        'title' => '',
        'fullscreen_gallery_right' => '',
        'main_classes' => '',
      ),
      'template'  => 'fullscreen_gallery',
      'path' => $module_path . '/theme',
    ),
    'page_fullscreen_gallery' => array(
      'template' => 'page_fullscreen_gallery',
      'path' => $module_path . '/theme',
      'render element' => 'page',
    ),
  );
}


/**
 * Implements hook_preprocess_HOOK().
 */
function fullscreen_gallery_preprocess_page(&$variables, $hook) {
  if (arg(0) == 'fullscreen_gallery') {
    $variables['theme_hook_suggestions'][] = 'page_fullscreen_gallery';
  }
}


/**
 * Implements hook_system_info_alter().
 *
 * Adds a new "Full screen gallery right sidebar" region to the current theme.
 */
function fullscreen_gallery_system_info_alter(&$info, $file) {
  // Get all themes.
  $themes = list_themes();

  // Add fullscreen_gallery_right region to theme info.
  if (isset($themes[$file->name])) {
    $info['regions'] = array_merge($info['regions'], array('fullscreen_gallery_right' => t('Full screen gallery right sidebar')));
  }
}


/**
 * Callback function for fullscreen_gallery pages.
 *
 * Creates variables for fullscreen gallery template, and returns the rendered
 * output.
 *
 * @param string $entity_type
 *   Drupal entity type.
 * @param object $entity
 *   Drupal entity.
 * @param string $field_name
 *   The image fields name.
 * @param int $img_num
 *   The number of image to render.
 *
 * @return string
 *   The themed html output of fullscreen gallery page.
 */
function _fullscreen_gallery_page($entity_type, $entity, $field_name, $img_num = 0) {
  // Validate page arguments.
  $error = fullscreen_gallery_validate_arguments($entity_type, $entity, $field_name, $img_num);

  // Set default variables for gallery template.
  $output = array(
    '#theme' => 'fullscreen_gallery',
  );
  $destination = drupal_get_destination();

  // If no error.
  if (!isset($error['message'])) {
    // Set back link url from gallery.
    $uri = entity_uri($entity_type, $entity);
    $back_link_url = isset($destination['destination']) ? $destination['destination'] : $uri['path'];
    $output['#back_link'] = l(t('Back'), $back_link_url, array('attributes' => array('class' => array('back-link'), 'absolute' => TRUE)));

    // Load photos from given field.
    $photos = field_get_items($entity_type, $entity, $field_name);

    if (is_array($photos) and count($photos)) {
      // If wrong img_num given, set delta to first image.
      if (!isset($photos[$img_num])) {
        $img_num = 0;
      }

      // Set entity title.
      $title = isset($entity->name) ? $entity->name : '';
      $title = isset($entity->title) ? $entity->title : $title;

      // Render fullscreen gallery right sidebar regions content.
      $blocks = block_get_blocks_by_region('fullscreen_gallery_right');
      $output['#fullscreen_gallery_right'] = render($blocks);

      // Set needed jquery and css files to load on fullscreen gallery page.
      $output['#attached']['css'] = array(
        drupal_get_path('module', 'fullscreen_gallery') . '/css/fullscreen_gallery.css',
      );
      $output['#attached']['js'] = array(
        drupal_get_path('module', 'fullscreen_gallery') . '/js/fullscreen_gallery.js',
      );

      $entity_ids = entity_extract_ids($entity_type, $entity);
      $field_settings = field_info_instance($entity_type, $field_name, $entity_ids[2]);
      $display_settings = isset($field_settings['display']['default']['settings']) ? $field_settings['display']['default']['settings'] : array();
      fullscreen_gallery_create_jquery_settings($photos, $img_num, $output, $display_settings);

      // Set gallery link.
      $gallery_link = 'fullscreen_gallery/' . $entity_type . '/' . $entity_ids[0] . '/' . $field_name;

      // Set image title, actual image, navigation items, and counter variables.
      $output['#thumbnails'] = fullscreen_gallery_get_thumbnails($photos, $img_num, $gallery_link, $destination);
      $output['#image_title'] = fullscreen_gallery_get_title($photos, $img_num, $title, $display_settings);
      $output['#image'] = theme('image_style', array('style_name' => 'fullscreen_gallery_xs', 'path' => $photos[$img_num]['uri']));
      $output['#prev'] = $img_num ? l(t('Previous'), $gallery_link . '/' . ($img_num - 1), array('query' => array('destination' => $destination['destination']))) : '';
      $output['#next'] = isset($photos[$img_num + 1]) ? l(t('Next'), $gallery_link . '/' . ($img_num + 1), array('query' => array('destination' => $destination['destination']))) : '';
      $output['#counter'] = ($img_num + 1) . '/' . count($photos);
    }
    else {
      $output['#error'] = t('The photo gallery can not be found.');
      $output['#main_classes'] = 'no-gallery';
    }
  }
  else {
    $output['#error'] = $error['message'];
    $output['#back_link'] = l(t('Back'), $destination['destination'], array('attributes' => array('class' => array('back-link'), 'absolute' => TRUE)));
    $output['#main_classes'] = 'no-gallery';
  }

  return $output;
}


/**
 * Validates the given url arguments to fullscreen gallery page.
 *
 * @param string $entity_type
 *   Drupal entity type.
 * @param object $entity
 *   The entity which contains the gallery.
 * @param string $field_name
 *   The image fields name.
 * @param int $img_num
 *   The number of image to render.
 *
 * @return array
 *   array of error parameters.
 */
function fullscreen_gallery_validate_arguments($entity_type, $entity, $field_name, $img_num) {
  $error = array();
  // Allow only integer values as image delta.
  if (!is_numeric($img_num)) {
    $error['message'] = t('Wrong Image delta given.');
  }

  // Check if given entity_type exists.
  $entity_info = entity_get_info($entity_type);
  if (empty($entity_info)) {
    $error['message'] = t('Wrong entity type given.');
  }

  // Check if given field_name exists for entity.
  $field_instance = field_info_field($field_name);
  if (empty($field_instance) or $field_instance['type'] != 'image') {
    $error['message'] = t('Wrong fieldname given.');
  }

  // Check if user has access to field.
  $field = field_info_field($field_name);
  if (!field_access('view', $field, $entity_type, $entity)) {
    $error['message'] = t('You do not have permission to view this gallery.');
  }

  return $error;
}


/**
 * Creates jquery settings object with defined image styles, and current image.
 *
 * On the js side the current image is rendered based on this settings, and the
 * browser size.
 *
 * @param array $photos
 *   The image field items.
 * @param int $img_num
 *   The number of image to render.
 * @param array $content
 *   The variables for fullscreen gallery theme.
 * @param array $display_settings
 *   The display settings for image field.
 */
function fullscreen_gallery_create_jquery_settings(array $photos, $img_num, array $content, array $display_settings) {
  // Load defined image styles.
  $styles = image_styles();
  $fullscreen_gallery_styles = array();
  $fullscreen_gallery_urls = array();
  foreach ($styles as $key => $value) {
    if (strpos($key, 'fullscreen_gallery_') !== FALSE) {
      // Get the first defined effect.
      $effect = reset($value['effects']);
      // Collect fullscreen_gallery_XXX styles height attribute.
      $fullscreen_gallery_styles[$key] = $effect['data']['height'];
      // Collect fullscreen_gallery_XXX styled image urls for given image.
      $fullscreen_gallery_urls[$key] = image_style_url($key, $photos[$img_num]['uri']);
    }
  }

  // Predefine current style and create main data array for
  // fullscreen_gallery.js.
  $fullscreen_gallery_js = array();
  $fullscreen_gallery_js['styles'] = $fullscreen_gallery_styles;
  $fullscreen_gallery_js['style_urls'] = $fullscreen_gallery_urls;
  $fullscreen_gallery_js['current_style'] = 'fullscreen_gallery_xs';

  $right_sidebar_width = (isset($display_settings['right_sidebar_width']) and $display_settings['right_sidebar_width'] and isset($display_settings['use_default']) and !$display_settings['use_default']) ? $display_settings['right_sidebar_width'] : variable_get('fullscreen_gallery_rs_width', 0);
  if (empty($content['#fullscreen_gallery_right']) or empty($right_sidebar_width)) {
    // If fullscreen gallery right sidebar region has no loaded content or the
    // sidebar width is not set add css to hide region.
    drupal_add_css(drupal_get_path('module', 'fullscreen_gallery') . '/css/fullscreen_gallery_no_sidebar.css', array('weight' => 1));
  }
  else {
    // Otherwise set parameters to js for showing sidebar as it is defined
    // in settings page.
    if (isset($display_settings['right_sidebar_width']) and $display_settings['right_sidebar_width'] and isset($display_settings['use_default']) and !$display_settings['use_default']) {
      $right_sidebar_width = $display_settings['right_sidebar_width'];
    }
    else {
      $right_sidebar_width = variable_get('fullscreen_gallery_rs_width', 0);
    }
    $fullscreen_gallery_js['rs_width'] = $right_sidebar_width;
    $fullscreen_gallery_js['rs_width_type'] = (isset($display_settings['right_sidebar_width_type']) and $display_settings['right_sidebar_width_type'] and isset($display_settings['use_default']) and !$display_settings['use_default']) ? $display_settings['right_sidebar_width_type'] : variable_get('fullscreen_gallery_rs_width_type', 'px');
  }

  // Add variables to Drupal.settings jquery object.
  drupal_add_js(array('fullscreen_gallery' => $fullscreen_gallery_js), 'setting');
}


/**
 * Returns the image title. Priority: Entity title, Image alt text, Image title.
 *
 * @param array $photos
 *   The image field items.
 * @param int $img_num
 *   The number of image to render.
 * @param string $entity_title
 *   The title of entity.
 * @param array $display_settings
 *   The display settings for image field.
 *
 * @return string
 *   The image title, or empty string if title is not set.
 */
function fullscreen_gallery_get_title(array $photos, $img_num, $entity_title, array $display_settings) {
  $disabled_titles = (isset($display_settings['disable_titles']) and isset($display_settings['use_default']) and !$display_settings['use_default']) ? $display_settings['disable_titles'] : variable_get('fullscreen_gallery_disable_titles', 0);
  if (!empty($disabled_titles)) {
    // Displaying image titles is disabled through admin interface.
    $image_title = '';
  }
  else {
    // Set image title. Priority: Entity title, Image alt text, Image title.
    $image_title = isset($entity_title) ? $entity_title : '';
    if (!empty($photos[$img_num]['alt'])) {
      $image_title = $photos[$img_num]['alt'];
    }
    if (!empty($photos[$img_num]['title'])) {
      $image_title = $photos[$img_num]['title'];
    }
  }
  return check_plain($image_title);
}


/**
 * Generates the html for fullscreen gallery thumbnails.
 *
 * @param array $photos
 *   The image field items.
 * @param int $img_num
 *   The number of image to render.
 * @param string $gallery_link
 *   The url for fullscreen gallery.
 * @param array $destination
 *   Return array of drupal_get_destination().
 *
 * @return string
 *   The html string containing gallery thumbnails.
 */
function fullscreen_gallery_get_thumbnails(array $photos, $img_num, $gallery_link, array $destination) {
  $thumbnails = '';
  foreach ($photos as $delta => $photo) {
    $image = theme('image_style', array('style_name' => 'fullscreen_gallery_thumb', 'path' => $photo['uri']));
    $thumbnails .= '<div class="thumbnail-item ' . ($img_num == $delta ? 'active' : '') . '">' . l($image, $gallery_link . '/' . $delta, array('html' => TRUE, 'query' => array('destination' => $destination['destination']))) . '</div>';
  }
  return $thumbnails;
}


/**
 * Implements hook_help().
 */
function fullscreen_gallery_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fullscreen_gallery':
      $path = dirname(__FILE__) . '/README.txt';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
      return $output;
  }
}
