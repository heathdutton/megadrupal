<?php

/**
 * @file
 * Contains tests for Form Protect module.
 */

/*
 * Tests Form Protect functionality.
 */
class FormProtectTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Form Protect',
      'description' => 'Tests Form Protect functionality.',
      'group' => 'Spam',
    );
  }

  function setUp() {
    parent::setUp('form_protect_test');
  }

  /**
   * Tests if the forms action attribute has changed and
   * Drupal.settings.formProtect contains the correct values.
   */
  function test() {
    // Add the 2 forms to the protected list.
    variable_set('form_protect_form_ids', "form_protect_test_form1\nform_protect_test_form2");
    $this->drupalGet('form_protect_test');

    $drupal_settings  = $this->drupalGetSettings();
    $action = url('form_protect_test');
    $this->assertIdentical($drupal_settings['formProtect'], array(
      'form-protect-test-form1' => $action,
      'form-protect-test-form2' => $action,
    ));

    $fake_action = url('submit/form');
    /** @var \SimpleXMLElement[] $xpath */
    $xpath = $this->xpath("//form[@id='form-protect-test-form1']");
    $attributes = $xpath[0]->attributes();
    $this->assertIdentical((string) $attributes['action'], $fake_action);
    $xpath = $this->xpath("//form[@id='form-protect-test-form2']");
    $attributes = $xpath[0]->attributes();
    $this->assertIdentical((string) $attributes['action'], $fake_action);

    $this->drupalPost(NULL, array(), 'Bar1');

    // The fake submit page should be accessible only by POST method.
    $this->drupalGet('submit/form');
    $this->assertResponse(403);

    // This is not a standard Drupal form submission, it should fail with 403.
    $this->drupalPost('submit/form', array(), NULL, array(), array(), NULL, '&foo=bar');
    $this->assertResponse(403);
  }

}
