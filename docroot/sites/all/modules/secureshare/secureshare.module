<?php
/**
 * @file
 * Adds Sharebuttons from Facebook, Google+ and Twitter to each selected node type and make it active after confirm from user.
 */
define('SECURESHARE_LANGUAGE_SYSTEM', 'system');
define('SECURESHARE_LANGUAGE_USER', 'user');
define('SECURESHARE_LANGUAGE_STATIC', 'static');

define('SECURESHARE_SOCIALSHAREPRIVACY_VERSION', '1.3');

// include additional files
require_once (dirname(__FILE__) . '/includes/secureshare.helper.inc');

function secureshare_hook() {
  return array(
    'help' => array(
      'group' => 'help',
    ),
  );
}

function secureshare_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == 'secureshare' && $api == 'default_secureshare_profiles') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function secureshare_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/{$plugin}";
  }
}

/**
 * Implementation of hook_default_sexybookmarks_profile().
 */
function secureshare_default_secureshare_profile() {
  $export = array();

  $profile = new stdClass;
  $profile->disabled = FALSE; /* Edit this to true to make a default profile disabled initially */
  $profile->api_version = 2;
  $profile->name = 'default';
  $profile->config = array(
    'css_path' => '',
    'info_link' => '',
    'txt_help' => '',
    'settings_perma' => '',
    'cookie_expires' => '365',
    'services' => array(
      'facebook' => array(
        'status' => 0,
        'dummy_img' => '',
        'txt_info' => '',
        'txt_fb_off' => '',
        'txt_fb_on' => '',
        'perma_option' => 0,
        'display_name' => '',
        'language' => 'system',
        'action' => 'like',
      ),
      'twitter' => array(
        'status' => 0,
        'dummy_img' => '',
        'txt_info' => '',
        'txt_twitter_off' => '',
        'txt_twitter_on' => '',
        'perma_option' => 0,
        'display_name' => '',
        'tweet_text' => 'default',
        'language' => 'system',
      ),
      'gplus' => array(
        'status' => 0,
        'dummy_img' => '',
        'txt_info' => '',
        'txt_gplus_off' => '',
        'txt_gplus_on' => '',
        'perma_option' => 0,
        'display_name' => '',
        'language' => 'user',
      ),
    ),
  );

  $export['default'] = $profile;

  return $export;
}

/**
 * Implements hook_permission().
 */
function secureshare_permission() {
  return array(
    'administer secureshare' => array(
      'title' => t('Administer Secureshare'),
      'description' => t('Manage Secureshare settings profiles.'),
    ),
  );
}

/**
 * Implementation of hook_requirements()
 * @param $phase
 */
function secureshare_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $lib_path = libraries_get_path('socialshareprivacy') . '/jquery.socialshareprivacy.js';
    $used_lib = drupal_get_library('secureshare', 'socialshareprivacy');

    $requirements['secureshare_socialshareprivacy'] = array(
      'title' => t('Secureshare / Socialshareprivacy plugin'),
    );

    if ( $used_lib && isset($used_lib['js'][$lib_path]) && file_exists($lib_path) ) {
      if ( version_compare(SECURESHARE_SOCIALSHAREPRIVACY_VERSION, $used_lib['js'][$lib_path]['version'], '==') ) {
        $requirements['secureshare_socialshareprivacy']['severity'] = REQUIREMENT_OK;
      }
      else {
        $requirements['secureshare_socialshareprivacy']['severity'] = REQUIREMENT_WARNING;
        $requirements['secureshare_socialshareprivacy']['description'] = t('socialshareprivacy plugin seems to be installed but with a untested version');
      }

      $requirements['secureshare_socialshareprivacy']['value'] = $used_lib['js'][$lib_path]['version'];
    }
    else {
      $requirements['secureshare_socialshareprivacy']['severity'] = REQUIREMENT_ERROR;
      $requirements['secureshare_socialshareprivacy']['description'] = t('The Heise socialshareprivacy plugin seems not to be installed. You need to download them from http://www.heise.de/extras/socialshareprivacy/ or use drush secureshare-download');
      $requirements['secureshare_socialshareprivacy']['value'] = l('http://www.heise.de/extras/socialshareprivacy/', 'http://www.heise.de/extras/socialshareprivacy/');
    }
  }

  return $requirements;
}

/**
 * Implementation of hook_theme()
 * registers our element theme function "theme_secureshare_element"
 * @return array
 */
function secureshare_theme() {
  $theme = array();

  $theme['secureshare_element'] = array(
    'render element' => 'element',
    'file' => 'secureshare.theme.inc',
  );

  return $theme;
}

/**
 * Implementation of hook_element_info()
 * set #secureshare_profile to use a settings profile
 * set #secureshare_config to overrite some settings from profile in runtime
 * alternativly you can use _secureshare_profile_alter to manipulate settings
 *
 * @return array
 */
function secureshare_element_info() {
  $elements = array();

  $elements['secureshare'] = array(
    '#input' => FALSE,
    '#theme_wrappers' => array('secureshare_element'),
    '#pre_render' => array('secureshare_pre_render_element'),
    '#secureshare_config' => array(),
    '#secureshare_profile' => 'default',
    '#attached' => array(
      'library' => array(
        array('secureshare', 'socialshareprivacy'),
      ),
    ),
  );

  return $elements;
}

/**
 * Implements hook_element_info() > #pre_render
 * we use it to add element specific settings to js and generate a html id
 * @param $element
 */
function secureshare_pre_render_element($element) {

  // Skip already processed elements.
  if (isset($element['#secureshare_processed'])) {
    return $element;
  }
  // Initialize #secureshare_processed, so we do not process this element again.
  $element['#secureshare_processed'] = FALSE;

  $library_path = libraries_get_path('socialshareprivacy');

  // assign a element id if we dont have one
  if (!isset($element['#id'])) {
    $element['#id'] = drupal_html_id('secureshare');
  }

  $profile = array();
  // get settings from profile only if not set to none or is empty (for manual usages)
  if ($element['#secureshare_profile'] != 'none' || empty($element['#secureshare_profile'])) {
    $profile = secureshare_get_config($element['#secureshare_profile']);
  }

  // if we got config directly submitted merge into profile settings with overwriting.
  $settings = array_merge_recursive($profile, $element['#secureshare_config']);

  // sanitize settings by removing empty values because heise plugin has it own default values
  // and it dont make any sense to copy and duplicate them into drupal.
  $settings = _secureshare_sanitize_values($settings);

  // assign minimal default settings
  $settings += array(
    // need to be blank, because heise plugin script try to load a css file...
    'css_path' => '',
    // we need to set the path to images of the library new
    'services' => array()
  );

  // ensure providers exists
  $settings['services'] += array('facebook' => array(), 'twitter' => array(), 'gplus' => array());
  // merge in the default images from library
  $settings['services']['facebook']['dummy_img'] =
    empty($settings['services']['facebook']['dummy_img']) ?
      base_path() . $library_path . '/socialshareprivacy/images/dummy_facebook.png' :
      $settings['services']['facebook']['dummy_img'];

  $settings['services']['twitter']['dummy_img'] =
    empty($settings['services']['twitter']['dummy_img']) ?
      base_path() . $library_path . '/socialshareprivacy/images/dummy_twitter.png' :
      $settings['services']['twitter']['dummy_img'];

  $settings['services']['gplus']['dummy_img'] =
    empty($settings['services']['gplus']['dummy_img']) ?
      base_path() . $library_path . '/socialshareprivacy/images/dummy_gplus.png' :
      $settings['services']['gplus']['dummy_img'];

  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array('secureshare' => array($element['#id'] => $settings)),
  );

  $element['#secureshare_processed'] = TRUE;
  return $element;
}

/**
 * Implementation of hook_library()
 * registers the socialshareprivacy js plugin from heise as drupal library
 * we also register the css file here und remove the css_url parameter on heise plugin via defaults
 * because we want the css file in drupal best practice manier ;)
 *
 * @return (array)
 */
function secureshare_library() {
  $libraries = array();

  $libraries['socialshareprivacy'] = array(
    'title' => 'Socialshareprivacy',
    'website' => 'http://www.heise.de/extras/socialshareprivacy/',
    'version' => '1.3',
    'js' => array(
      drupal_get_path('module', 'secureshare') . '/js/secureshare.d7.init.js' => array(),
      libraries_get_path('socialshareprivacy') . '/jquery.socialshareprivacy.js' => array(
        'version' => '1.3',
      ),
    ),
    // loads the default css
    'css' => array(
      libraries_get_path('socialshareprivacy') . '/socialshareprivacy/socialshareprivacy.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Prepare and returns the configuration from specific profile.
 * @param string $profile
 * @return array
 */
function secureshare_get_config($profile = 'default') {

  $config = array();

  ctools_include('export');
  if (($profile = ctools_export_crud_load('secureshare_profiles', $profile))) {
    if (empty($profile->disabled)) {
      $config = $profile->config;
    }
    else {
      watchdog('secureshare', 'Provided profile is disabled (!profile).', array('!profile' => $profile), WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('secureshare', 'Invalid profile was provided (!profile).', array('!profile' => $profile), WATCHDOG_ERROR);
  }

  // give other modules the chance to change the settings
  drupal_alter('secureshare_config', $config, $profile);
  return $config;
}

/**
 * Implements hook_secureshare_config_alter()
 * used to alter own configuration for special handling on some parameters
 * @param $config
 * @param $profile
 */
function secureshare_secureshare_config_alter(&$config, $profile) {
  global $language;
  // convert language settings in a real language
  $language_mapping = array('facebook', 'twitter', 'gplus');
  foreach ($language_mapping as $language_map) {
    if (isset($config['services'][$language_map]['language'])) {
      if ($config['services'][$language_map]['language'] === SECURESHARE_LANGUAGE_SYSTEM) {
        $config['services'][$language_map]['language'] = language_default('language');
      }
      elseif ($config['services'][$language_map]['language'] === SECURESHARE_LANGUAGE_USER) {
        $config['services'][$language_map]['language'] = $language->language;
      }
      elseif ($config['services'][$language_map]['language'] === SECURESHARE_LANGUAGE_STATIC && isset($config['services'][$language_map]['language_static'])) {
        $config['services'][$language_map]['language'] = $config['services'][$language_map]['language_static'];
        unset($config['services'][$language_map]['language_static']);
      }
    }
  }

  // special case for facebook... we need to map the language de -> de_DE
  if (isset($config['services']['facebook']['language'])) {
    $config['services']['facebook']['language'] =
      (_secureshare_language_mapper($config['services']['facebook']['language'])) ?
        _secureshare_language_mapper($config['services']['facebook']['language']) :
        $config['services']['facebook']['language'];
  }
}