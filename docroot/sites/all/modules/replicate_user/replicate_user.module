<?php

/**
 * @file
 * Main methods of Replicate user module.
 */

define('REPLICATE_USER_PREFIX', 0);
define('REPLICATE_USER_SUFFIX', 1);
define('REPLICATE_USER_RANDOM', 2);

/**
 * Implements hook_help().
 */
function replicate_user_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#replicate_user':
    case 'admin/config/people/replicate-user':
      $output .= '<p>' . t('The Replicate user module is to be used in conjunction with <a href="@replicate-module">Replicate module</a> in order to provide options for altering usernames, emails and passwords when replicating user entities.', array('@replicate-module' => 'https://drupal.org/project/replicate'));
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function replicate_user_menu() {
  $items = array();

  $items['admin/config/people/replicate-user'] = array(
    'title' => 'Replicate user',
    'description' => 'Alter the manner in which users are replicated with replicate module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('replicate_user_settings_form'),
    'access arguments' => array('administer replicate user configuration'),
    'file' => 'replicate_user.admin.inc',
    'weight' => '20',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function replicate_user_permission() {
  return array(
    'administer replicate user configuration' => array(
      'title' => t('Administer replicate user settings'),
    ),
  );
}

/**
 * Implements hook_replicate_entity_ENTITY_TYPE().
 */
function replicate_user_replicate_entity_user(&$entity) {
  $entity->uid = NULL;

  _replicate_user_update_username($entity);
  _replicate_user_update_password($entity);
  _replicate_user_update_mail($entity);
}

/**
 * Update the username field if needed.
 *
 * @param object $entity
 *   The user object to modify.
 */
function _replicate_user_update_username(&$entity) {
  if (variable_get('replicate_user_username', 1)) {
    $index = 0;

    while (!isset($username)) {
      switch (variable_get('replicate_user_username_method', REPLICATE_USER_SUFFIX)) {
        case REPLICATE_USER_PREFIX:
          $username = strtr(variable_get('replicate_user_username_prefix', '%_'), '%', $index) . $entity->name;
          break;

        case REPLICATE_USER_SUFFIX:
          $username = $entity->name . strtr(variable_get('replicate_user_username_suffix', '_%'), '%', $index);
          break;

        case REPLICATE_USER_RANDOM:
          $username = _replicate_user_generate_random_username(variable_get('replicate_user_username_random_length', 7), variable_get('replicate_user_username_random_characters', 'abcdefghijklmnopqrstuvwxyz0123456789'));
          break;

      }

      if (isset($username) && user_load_by_name($username) !== FALSE) {
        unset($username);
        ++$index;
      }
    }

    $entity->name = $username;
  }
}

/**
 * Generate a random username from given parameters.
 *
 * @param string $length
 *   The length of the username to generate.
 * @param string $allowable_characters
 *   A string with all characters allowed in the random username.
 *
 * @return string
 *   A random string.
 *
 * @see user_password()
 */
function _replicate_user_generate_random_username($length, $allowable_characters) {
  // Zero-based count of characters in the allowable list.
  $len = drupal_strlen($allowable_characters) - 1;

  // Declare the username as a blank string.
  $username = '';

  // Loop the number of times specified by $length.
  for ($i = 0; $i < $length; $i++) {
    do {
      // Find a secure random number within the range needed.
      $index = ord(drupal_random_bytes(1));
    } while ($index > $len);

    // Each iteration, pick a random character from the
    // allowable string and append it to the string.
    $username .= $allowable_characters[$index];
  }

  return $username;
}

/**
 * Update the password field if needed.
 *
 * @param object $entity
 *   The user object to modify.
 */
function _replicate_user_update_password(&$entity) {
  if (variable_get('replicate_user_password', 0)) {
    $entity->pass = user_password();
  }
}

/**
 * Update the mail and init fields if needed.
 *
 * @param object $entity
 *   The user object to modify.
 */
function _replicate_user_update_mail(&$entity) {
  if (variable_get('replicate_user_mail', 1)) {
    $index = 0;
    $parts = explode('@', $entity->mail);

    while (!isset($mail)) {
      switch (variable_get('replicate_user_mail_method', REPLICATE_USER_SUFFIX)) {
        case REPLICATE_USER_PREFIX:
          $mail = strtr(variable_get('replicate_user_mail_prefix', '%_'), '%', $index) . $entity->mail;
          break;

        case REPLICATE_USER_SUFFIX:
          $mail = $parts[0] . str_replace('%', $index, variable_get('replicate_user_mail_suffix', '_%')) . '@' . $parts[1];
          break;
      }

      if (isset($mail) && user_load_by_mail($mail) !== FALSE) {
        unset($mail);
        ++$index;
      }
    }

    $entity->mail = $mail;
    $entity->init = $mail;
  }
}
