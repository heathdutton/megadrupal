<?php

/**
 * @file
 * Tests for the Replicate user module.
 */

/**
 * Class ReplicateUserNameChangeTestCase
 *
 * Tests the name altering functionality during replication.
 */
class ReplicateUserNameChangeTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Replicate user name change check',
      'description' => 'Test Replicate user changing username functionality.',
      'group' => 'Replicate user',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('replicate_user');
  }

  /**
   * Ensures user replication can be accomplished with name suffixes.
   */
  public function testSuffixNameChange() {
    variable_set('replicate_user_username_method', REPLICATE_USER_SUFFIX);
    $user = $this->drupalCreateUser(array('access content'));

    $clone = replicate_clone_entity('user', $user);
    user_save($clone);
    $this->assertEqual($user->name . '_0', $clone->name, 'Username gets the correct suffix');

    $clone1 = replicate_clone_entity('user', $user);
    user_save($clone1);
    $this->assertEqual($user->name . '_1', $clone1->name, 'Username gets the correct suffix');

    $clone2 = replicate_clone_entity('user', $clone1);
    user_save($clone2);
    $this->assertEqual($clone1->name . '_0', $clone2->name, 'Username gets the correct suffix');

    // Alter the suffix and test another replication.
    variable_set('replicate_user_username_suffix', '_suffix_%');

    $clone3 = replicate_clone_entity('user', $user);
    user_save($clone3);
    $this->assertEqual($user->name . '_suffix_0', $clone3->name, 'Username gets the correct suffix');

    $clone4 = replicate_clone_entity('user', $user);
    user_save($clone4);
    $this->assertEqual($user->name . '_suffix_1', $clone4->name, 'Username gets the correct suffix');

    // Ensure user emails and passwords have remained the same.
    $this->assertEqual($user->mail, $clone->mail, 'User mails do not get altered');
    $this->assertEqual($user->pass, $clone->pass, 'User passwords do not get altered');

  }

  /**
   * Ensures user replication can be accomplished with name prefixes.
   */
  public function testPrefixNameChange() {
    variable_set('replicate_user_username_method', REPLICATE_USER_PREFIX);
    $user = $this->drupalCreateUser(array('access content'));

    $clone = replicate_clone_entity('user', $user);
    user_save($clone);
    $this->assertEqual('0_' . $user->name, $clone->name, 'Username gets the correct suffix');

    $clone1 = replicate_clone_entity('user', $user);
    user_save($clone1);
    $this->assertEqual('1_' . $user->name, $clone1->name, 'Username gets the correct suffix');

    $clone2 = replicate_clone_entity('user', $clone1);
    user_save($clone2);
    $this->assertEqual('0_' . $clone1->name, $clone2->name, 'Username gets the correct suffix');

    // Alter the prefix and test another replication.
    variable_set('replicate_user_username_prefix', '%_prefix_');

    $clone3 = replicate_clone_entity('user', $user);
    user_save($clone3);
    $this->assertEqual('0_prefix_' . $user->name, $clone3->name, 'Username gets the correct suffix');

    $clone4 = replicate_clone_entity('user', $user);
    user_save($clone4);
    $this->assertEqual('1_prefix_' . $user->name, $clone4->name, 'Username gets the correct suffix');
  }

  /**
   * Ensures user replication can be accomplished with random names.
   */
  public function testRandomNameChange() {
    variable_set('replicate_user_username_method', REPLICATE_USER_RANDOM);
    $user = $this->drupalCreateUser(array('access content'));

    $clone = replicate_clone_entity('user', $user);
    user_save($clone);
    $this->assertNotEqual($user->name, $clone->name, 'Random username differs from source username');
    $this->assertEqual(7, drupal_strlen($clone->name), 'Random username uses the correct number of characters.');

    // Alter the random length and test another replication.
    variable_set('replicate_user_username_random_length', '20');

    $clone1 = replicate_clone_entity('user', $user);
    user_save($clone1);
    $this->assertNotEqual($user->name, $clone1->name, 'Random username differs from source username');
    $this->assertEqual(20, drupal_strlen($clone1->name), 'Random username uses the correct number of characters.');
  }

}

/**
 * Class ReplicateUserMailChangeTestCase
 *
 * Tests the mail altering functionality during replication.
 */
class ReplicateUserMailChangeTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Replicate user mail change check',
      'description' => 'Test Replicate user changing mail functionality.',
      'group' => 'Replicate user',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('replicate_user');
  }

  /**
   * Ensures user replication can be accomplished with mail suffixes.
   */
  public function testSuffixMailChange() {
    variable_set('replicate_user_mail', 1);
    variable_set('replicate_user_mail_method', REPLICATE_USER_SUFFIX);
    $user = $this->drupalCreateUser(array('access content'));

    $clone = replicate_clone_entity('user', $user);
    user_save($clone);
    $this->assertEqual($user->name . '_0@example.com', $clone->mail, 'User email gets the correct suffix');

    $clone1 = replicate_clone_entity('user', $user);
    user_save($clone1);
    $this->assertEqual($user->name . '_1@example.com', $clone1->mail, 'User email gets the correct suffix');

    $clone2 = replicate_clone_entity('user', $clone1);
    user_save($clone2);
    $this->assertEqual($clone1->name . '_0@example.com', $clone2->mail, 'User email gets the correct suffix');

    // Alter the suffix and test another replication.
    variable_set('replicate_user_mail_suffix', '_suffix_%');

    $clone3 = replicate_clone_entity('user', $user);
    user_save($clone3);
    $this->assertEqual($user->name . '_suffix_0@example.com', $clone3->mail, 'User email gets the correct suffix');

    $clone4 = replicate_clone_entity('user', $user);
    user_save($clone4);
    $this->assertEqual($user->name . '_suffix_1@example.com', $clone4->mail, 'User email gets the correct suffix');
  }

  /**
   * Ensures user replication can be accomplished with mail prefixes.
   */
  public function testPrefixMailChange() {
    variable_set('replicate_user_mail', 1);
    variable_set('replicate_user_mail_method', REPLICATE_USER_PREFIX);
    $user = $this->drupalCreateUser(array('access content'));

    $clone = replicate_clone_entity('user', $user);
    user_save($clone);
    $this->assertEqual('0_' . $user->name . '@example.com', $clone->mail, 'User email gets the correct prefix');

    $clone1 = replicate_clone_entity('user', $user);
    user_save($clone1);
    $this->assertEqual('1_' . $user->name . '@example.com', $clone1->mail, 'User email gets the correct prefix');

    $clone2 = replicate_clone_entity('user', $clone1);
    user_save($clone2);
    $this->assertEqual('0_' . $clone1->mail, $clone2->mail, 'User email gets the correct prefix');

    // Alter the prefix and test another replication.
    variable_set('replicate_user_mail_prefix', '%_prefix_');

    $clone3 = replicate_clone_entity('user', $user);
    user_save($clone3);
    $this->assertEqual('0_prefix_' . $user->name . '@example.com', $clone3->mail, 'User email gets the correct prefix');

    $clone4 = replicate_clone_entity('user', $user);
    user_save($clone4);
    $this->assertEqual('1_prefix_' . $user->name . '@example.com', $clone4->mail, 'User email gets the correct prefix');

    // Ensure user init matches user mail.
    $this->assertEqual($clone->mail, $clone->init, 'User init email matches user mail');

    // Ensure the password doesn't change.
    $this->assertEqual($user->pass, $clone->pass, 'User passwords do not get altered');

  }
}

/**
 * Class ReplicateUserPasswordChangeTestCase
 *
 * Tests the password altering functionality during replication.
 */
class ReplicateUserPasswordChangeTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Replicate user password change check',
      'description' => 'Test Replicate user changing password functionality.',
      'group' => 'Replicate user',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('replicate_user');
  }

  /**
   * Ensures user replication is able to alter passwords.
   */
  public function testPasswordChange() {
    variable_set('replicate_user_password', 1);
    $user = $this->drupalCreateUser(array('access content'));

    $clone = replicate_clone_entity('user', $user);
    user_save($clone);
    $this->assertNotEqual($user->pass, $clone->pass, 'User passwords do not match');

    // Ensure user emails have remained the same.
    $this->assertEqual($user->mail, $clone->mail, 'User emails do not get altered.');
  }
}
