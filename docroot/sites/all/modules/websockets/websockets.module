<?php

/**
 * @file
 * 
 */
/**
 * Implementation of hook_init().
 */
function websockets_init(){
  // Ensure the WebSockets server is running.  There may be a more efficient
  // way of checking for the presence of the server than this.
  // As multisite installs can have different "tmp" folders, and will almost
  // certainly have different files folders, the best place to keep the PID
  // file is in the same folder as the module.  We will fall back to using the
  // DRUPAL_ROOT or "/tmp" folders if we're unable to write to this location
  $path = drupal_get_path('module', 'websockets');
  @$pid = file_get_contents("$path/websockets.pid");
  if(!$pid){
    @$pid = file_get_contents(DRUPAL_ROOT . '/websockets.pid');
  }
  if(!$pid){
    @$pid = file_get_contents('/tmp/websockets.pid');
  }
  if($pid){
    if(check_process($pid)){
      // Process is running.
      return;
    }else{
      // Process is no longer running.  Lets add a warning that we probably
      // crashed.
      watchdog('websockets', 'WebSockets server (%pid) has crashed. Restarting.', array(
        '%pid' => trim($pid)
      ), WATCHDOG_ERROR);
    }
  }
  // Process isn't running, lets create the process, and make a note of its PID
  $pid = trim(shell_exec("nohup php -q $path/websockets.server.php > /dev/null & echo $!"));
  if($pid){
    // Write the PID to the file
    if(!@file_put_contents("$path/websockets.pid", $pid)){
      if(!@file_put_contents(DRUPAL_ROOT . "/websockets.pid", $pid)){
        if(!@file_put_contents("/tmp/websockets.pid", $pid)){
          // Failed to write the PID.  This will result in us attempting to create
          // a new server on every page request - NOT GOOD.
          watchdog('websockets', 'Unable to record the PID of the WebSockets server', array(), WATCHDOG_ERROR);
        }
      }
    }
  }else{
    // Failed to start the server.
    watchdog('websockets', 'Default WebSockets server failed to start', array(), WATCHDOG_ERROR);
  }
}

/**
 * Function for use by other modules that would like to make use of the basic
 * websockets API.
 * 
 * A P I
 * 
 * 
 */
function websockets_add(){
  // Only add websockets once per page.
  static $added = 0;
  if($added){
    if($added == 1){
      return FALSE;
    } else {
      return TRUE;
    }
  }
  // We also need to tell the WebSockets server how to connect to the database.
  // We do this by writing the database details to a random file in the files
  // folder of the site.  The path to this file is then handed to the socket
  // server.  
  global $databases;
  global $base_url;
  global $user;
  $file_path = variable_get('websockets_database_settings_file_path', FALSE);
  $host = parse_url($base_url, PHP_URL_HOST);
  if(!$file_path || file_get_contents($file_path) != serialize($databases)){
    if(!$file_path){
      // We don't have a file, we need to create one.
      $file_path = drupal_tempnam(file_directory_temp(), 'websockets-' . $host . '-');
      if(!$file_path){
        watchdog('websockets', 'Unable to create database settings file in "%tempfolder"', array(
          '%tempfolder' => file_directory_temp()
        ));
        $added = 1;
        return FALSE;
      }
      variable_set('websockets_database_settings_file_path', $file_path);
    }
    file_put_contents($file_path, serialize($databases));
  }
  // Note, the order of the following JS files is very important!
  drupal_add_js(drupal_get_path('module', 'websockets') . '/web-socket-js/swfobject.js');
  drupal_add_js(drupal_get_path('module', 'websockets') . '/web-socket-js/web_socket.js');
  drupal_add_js(drupal_get_path('module', 'websockets') . '/js/websockets.js');
  drupal_add_js(array(
    'websockets' => array(
      'filepath' => $file_path,
      'swfurl' => url('/', array(
        'absolute' => TRUE
      )) . drupal_get_path('module', 'websockets') . '/web-socket-js/WebSocketMain.swf',
      'host' => $host,
      'port' => variable_get('websockets_port', 8080),
      'user' => serialize($user)
    )
  ), 'setting');
  $added = 2;
  return TRUE;
}

/**
 * Implementation of hook_menu().
 */
function websockets_menu(){
  return array(
    'websockets-test' => array(
      'title' => 'WebSockets test',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'websockets_test_callback'
      ),
      'access arguments' => array(
        'access content'
      )
    )
  );
}

/**
 * Callback for the test page
 */
function websockets_test_callback(){
  websockets_add();
  return array(
    'field' => array(
      '#type' => 'textfield',
      '#title' => 'Send a message to anyone else viewing this page',
      '#id' => 'websockets-test'
    ),
    'button' => array(
      '#type' => 'button',
      '#title' => 'Button',
      '#value' => 'Send!'
    )
  );
}

/**
 * Check if process exists on Linux type OS
 * 
 * http://www.blrf.net/howto/25_PHP__How_to_check_if_PID_exists_on_Linux_.html
 *
 * @param int $pid Process ID
 * @param string $name Process name, null for no process name matching
 * @return bool
 */
function check_process($pid, $name = null){
  // form the filename to search for
  $file = '/proc/' . (int)$pid . '/cmdline';
  $fp = false;
  if(file_exists($file))
    $fp = @fopen($file, 'r');
     // if file does not exist or cannot be opened, return false
  if(!$fp)
    return false;
  $buf = fgets($fp);
  // if we failed to read from file, return false
  if($buf === false){return false;}
  if($name !== null){
    // this code will also check if name matches
    $cmd = basename($buf);
    if(preg_match('/' . $name . '.*/', $cmd)){
      fclose($fp);
      return true;
    }else{
      // process was found, but name did not match
      fclose($fp);
      return false;
    }
  }else{
    // process found, name is null, return true
    fclose($fp);
    return true;
  }
}