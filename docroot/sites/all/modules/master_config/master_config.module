<?php
/**
 * @file
 * Module to control master module variables
 */

/**
 * Implements hook_menu().
 *
 * @return array
 */
function master_config_menu() {
  $items = array();

  $items['admin/config/system/master_config'] = array(
    'title' => 'Master Config',
    'description' => t('Administer the Master Config module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_config_admin_settings'),
    'access arguments' => array('administer master config'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/master_config/settings'] = array(
    'title' => 'Master Config Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_config_admin_settings'),
    'access arguments' => array('administer master config'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/system/master_config/modules'] = array(
    'title' => 'Master Config Module Definitions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_config_admin_modules'),
    'access arguments' => array('administer master config'),
    'type' => MENU_LOCAL_TASK,
  );


  return $items;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function master_config_permission() {
  return array(
    'administer master config' => array(
      'title' => t('Administer Master Config'),
      'description' => t('Administer settings for the Master Config module'),
    ),
  );
}

/**
 * Implements master_config_admin_settings().
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function master_config_admin_settings($form, &$form_state) {
  $form['master_scopes'] = array(
    '#title' => t('Master scopes'),
    '#description' => t('Using a comma separated list, please define your environment scopes.'),
    '#type' => 'textarea',
    '#default_value' => 'base, local, live'
  );

  $form['master_removable_blacklist'] = array(
    '#title' => t('Master removable blacklist'),
    '#description' => t('Enter a path for the removable blacklist, or leave as default.'),
    '#type' => 'textarea',
    '#default_value' => 'modules/*'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save'
  );

  return $form;
}

/**
 * Implements hook_submit().
 *
 * @param $form
 * @param $form_state
 */
function master_config_admin_settings_submit($form, &$form_state) {
  variable_set('master_config_scopes', $scopes = explode(', ', $form_state['values']['master_scopes']));
  variable_set('master_removable_blacklist', $form_state['values']['master_removable_blacklist']);
}

/**
 * Implements master_config_admin_modules().
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function master_config_admin_modules($form, &$form_state) {
  /*
   * Define array of master module version(s) - currently only 7.x-2.x is available
   */
  $options = array(
    2 => '7.x-2.x',
  );

  $scopes = variable_get('master_config_scopes');

  $form['master_version'] = array(
    '#title' => t('Master module version'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => 2
  );

  foreach ($scopes as $scope) {
    $form[$scope] = array(
      '#title' => $scope,
      '#type' => 'fieldset'
    );

    $form[$scope]['master_modules_' . $scope] = array(
      '#title' => t('Master modules'),
      '#description' => t('Seperating each by commas, efine the modules to be enable for this scope'),
      '#type' => 'textarea'
    );

    $form[$scope]['uninstall_blacklist_' . $scope] = array(
      '#title' => t('Uninstall blacklist'),
      '#description' => t('Seperating each by commas, define the modules to be blacklisted for uninstalling'),
      '#type' => 'textarea'
    );
  }


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save'
  );

  return $form;
}

/**
 * Implements master_config_admin_modules_submit().
 *
 * @param $form
 * @param $form_state
 */
function master_config_admin_modules_submit($form, &$form_state) {
  $scopes = variable_get('master_config_scopes');
  variable_set('master_version', $form_state['values']['master_version']);
  $master_modules = array();
  $master_uninstall_blacklist = array();

  foreach($scopes as $scope) {
    $master_modules_array = explode(', ', $form_state['values']['master_modules_' . $scope]);
    $uninstall_blacklist_array = explode(', ', $form_state['values']['uninstall_blacklist_' . $scope]);
    $master_modules[$scope] = $master_modules_array;
    $master_uninstall_blacklist[$scope] = $uninstall_blacklist_array;
  }

  variable_set('master_modules', $master_modules);
  variable_set('master_uninstall_blacklist', $master_uninstall_blacklist);
}
