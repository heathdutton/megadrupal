<?php

define('SIMPLETEST_AUTOMATOR_ON', 0);
define('SIMPLETEST_AUTOMATOR_FIRST_PAGE', 1);
define('SIMPLETEST_AUTOMATOR_RUNNING', 2);

/**
 * API function: load a simpletest automator instance.
 *
 * @param $id
 *   The ID of the simpletest automator instance to load.
 * @param $load_actions
 *   If TRUE, loads the simpletest automator actions as well. Defaults to FALSE.
 * @param $refresh
 *   If TRUE, refreshes the internal static cache. Defaults to FALSE.
 * @return
 *   A fully loaded simpletest automator object.
 */
function simpletest_automator_load($id, $load_actions = FALSE, $refresh = FALSE) {
  static $cache;
  $id = (int)$id;
  if ($refresh || !isset($cache)) {
    $cache = array();
  }
  if (!isset($cache[$id])) {
    $result = db_query('SELECT * FROM {simpletest_automator} WHERE said = %d', $id);
    if ($simpletest_automator = db_fetch_object($result)) {
      $simpletest_automator->modules = unserialize($simpletest_automator->modules);
      $simpletest_automator->permissions = unserialize($simpletest_automator->permissions);
      $cache[$id] = $simpletest_automator;
    }
    else {
      $cache[$id] = FALSE;
    }
  }
  $simpletest_automator = $cache[$id];
  if ($load_actions) {
    $simpletest_automator->actions = simpletest_automator_action_load(NULL, $id);
  }
  return $simpletest_automator;
}

/**
 * API function: save a simpletest automator instance.
 *
 * @param $data
 *   The data to save.
 * @return
 *   The new id.
 */
function simpletest_automator_save($data) {
  unset($data->actions);
  $data->modules = serialize($data->modules);
  $data->permissions = serialize($data->permissions);
  if (isset($data->said)) {
    db_update('simpletest_automator')->fields((array)$data)->condition('said', $data->said)->execute();
  }
  else {
    $data->said = db_insert('simpletest_automator')->fields((array)$data)->execute();
  }
  return $data->said;
}

/**
 * API function: delete a simpletest automator instance.
 *
 * @param $said
 *   The simpletest automator id of the simpletest automator instance to clear.
 * @return
 *   TRUE.
 */
function simpletest_automator_delete($said) {
  db_query('DELETE FROM {simpletest_automator} WHERE said = %d', $said);
  db_query('DELETE FROM {simpletest_automator_actions} WHERE said = %d', $said);
  return TRUE;
}

/**
 * API function: load a simpletest automator action.
 *
 * @param $aid
 *   The action id of the action to load, or NULL to load all actions.
 * @param $said
 *   The id of the simpletest automator instance to which the actions belong.
 * @param $refresh
 *   If TRUE, refreshes the internal static cache. Defaults to FALSE.
 * @return
 *   The fully loaded simpletest automator action, or array of actions if $aid
 *   was set to NULL.
 */
function simpletest_automator_action_load($aid = NULL, $said = NULL, $refresh = FALSE) {
  static $aid_cache = array();
  static $said_cache = array();
  if ((!is_null($aid) && !isset($aid_cache[$aid])) || (!is_null($said) && !isset($said_cache[$said]))) {
    $where = array();
    $arguments = array();
    if (!is_null($aid)) {
      $aid_cache[$aid] = array();
      $where[] = 'aid = %d';
      $arguments[] = $aid;
    }
    if (!is_null($said)) {
      $said_cache[$said] = array();
      $where[] = 'said = %d';
      $arguments[] = $said;
    }
    if (!empty($where)) {
      $result = db_query('SELECT * FROM {simpletest_automator_actions} WHERE '. implode($where, ' AND ') .' ORDER BY weight ASC, aid ASC', $arguments);
    }
    else {
      $said_cache[0] = array();
      $result = db_query('SELECT * FROM {simpletest_automator_actions}');
    }
    while ($action = db_fetch_object($result)) {
      $action->parameters = unserialize($action->parameters);
      $aid_cache[$action->aid] = $action;
      if (!is_null($said)) {
        $said_cache[$said][$action->aid] = $action;
      }
      if (empty($where)) {
        $said_cache[0][$action->aid] = $action;
      }
    }
  }
  if (!is_null($aid)) {
    return $aid_cache[$aid];
  }
  if (!is_null($said)) {
    return $said_cache[$said];
  }
  return $said_cache[0];
}

/**
 * API function: save a simpletest automator action.
 *
 * @param $action
 *   The simpletest automator action to save.
 * @return
 *   The action id of the saved action.
 */
function simpletest_automator_action_save($action) {
  $action->parameters = serialize($action->parameters);
  if (isset($action->aid)) {
    drupal_write_record('simpletest_automator_actions', $action, 'aid');
  }
  else {
    drupal_write_record('simpletest_automator_actions', $action);
  }
  return $action->aid;
}

/**
 * API function: delete a simpletest automator action.
 *
 * @param $aid
 *   The action id of the action to delete.
 * @return
 *   TRUE.
 */
function simpletest_automator_action_delete($aid) {
  db_query('DELETE FROM {simpletest_automator_actions} WHERE aid = %d', $aid);
  return TRUE;
}

/**
 * Implementation of hook_menu().
 */
function simpletest_automator_menu() {
  $items['admin/build/simpletest_automator'] = array(
    'title' => 'SimpleTest Automator',
    'description' => 'Automate your testing process using the SimpleTest automator, to record your manual testing and create automated tests based off it.',
    'page callback' => 'simpletest_automator_admin_overview',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'simpletest_automator.admin.inc',
  );

  $items['admin/build/simpletest_automator/list'] = array(
    'title' => 'List',
    'page callback' => 'simpletest_automator_admin_overview',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/add'] = array(
    'title' => 'Add',
    'page arguments' => array('simpletest_automator_admin_add'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/import'] = array(
    'title' => 'Import',
    'page arguments' => array('simpletest_automator_admin_import'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simpletest_automator.admin.inc',
  );

  $items['admin/build/simpletest_automator/%simpletest_automator'] = array(
    'title callback' => 'simpletest_automator_page_title',
    'title arguments' => array(3),
    'page arguments' => array('simpletest_automator_admin_edit', 3),
    'type' => MENU_CALLBACK,
    'file' => 'simpletest_automator.admin.inc',
  );

  $items['admin/build/simpletest_automator/%simpletest_automator/edit'] = array(
    'title' => 'Edit',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/modules'] = array(
    'title' => 'Modules',
    'page arguments' => array('simpletest_automator_admin_modules_form', 3),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/permissions'] = array(
    'title' => 'Permissions',
    'page arguments' => array('simpletest_automator_admin_permissions', 3),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/actions'] = array(
    'title' => 'Actions',
    'page arguments' => array('simpletest_automator_admin_action_list', 3),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array(TRUE),
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/actions/list'] = array(
    'title' => 'List',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/actions/%'] = array(
    'title' => 'Action',
    'page arguments' => array('simpletest_automator_admin_action_edit', 3, 5),
    'weight' => 4,
    'type' => MENU_CALLBACK,
    'load arguments' => array(TRUE),
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/actions/%/edit'] = array(
    'title' => 'Edit',
    'page arguments' => array('simpletest_automator_admin_action_edit', 3, 5),
    'load arguments' => array(TRUE),
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/actions/%/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('simpletest_automator_admin_action_delete', 3, 5),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array(TRUE),
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/actions/add'] = array(
    'title' => 'Add',
    'page arguments' => array('simpletest_automator_admin_action_edit', 3, NULL),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array(TRUE),
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/export'] = array(
    'title' => 'Export',
    'page callback' => 'simpletest_automator_admin_export',
    'page arguments' => array(3),
    'weight' => 4,
    'load arguments' => array(TRUE),
    'type' => MENU_LOCAL_TASK,
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/record'] = array(
    'title' => 'Record',
    'page arguments' => array('simpletest_automator_admin_record', 3),
    'weight' => 5,
    'load arguments' => array(TRUE),
    'type' => MENU_LOCAL_TASK,
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['admin/build/simpletest_automator/%simpletest_automator/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('simpletest_automator_admin_delete', 3),
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array(TRUE),
    'file' => 'simpletest_automator.admin.inc',
  );

  // Javascript callbacks.
  $items['simpletest_automator/admin/js'] = array(
    'page callback' => 'simpletest_automator_admin_actions_js',
    'type' => MENU_CALLBACK,
    'file' => 'simpletest_automator.admin.inc',
  );
  $items['simpletest_automator/export/%simpletest_automator'] = array(
    'page callback' => 'simpletest_automator_export_test',
    'page arguments' => array(2),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array(TRUE),
    'file' => 'simpletest_automator.admin.inc',
  );

  foreach ($items as $path => $item) {
    $item['access arguments'] = array('administer unit tests');
    if (!isset($item['page callback'])) {
      $item['page callback'] = 'drupal_get_form';
    }
    $items[$path] = $item;
  }

  return $items;
}

function simpletest_automator_page_title($simpletest_automator) {
  return $simpletest_automator->name;
}

/**
 * Implementation of hook_theme().
 */
function simpletest_automator_theme() {
  return array(
    'simpletest_automator_admin_modules' => array('arguments' => array('form' => NULL)),
    'simpletest_automator_admin_modules_incompatible' => array('arguments' => array()),
    'simpletest_automator_admin_permissions' => array('arguments' => array('form' => NULL)),
    'simpletest_automator_admin_action_list' => array('arguments' => array('form' => NULL)),
  );
}

/**
 * Get some information about an action.
 */
function _simpletest_automator_action_info($action = NULL) {
  if (!isset($action) || is_null($action)) {
    return array();
  }
  static $map;
  if (!isset($map)) {
    $map = module_invoke_all('simpletest_automator_actions', NULL, 'list');
  }
  $info = array();
  $info['label'] = $map[$action->type];
  $info['description'] = implode(' ', module_invoke_all('simpletest_automator_actions', $action, 'description'));
  return $info;
}

/**
 * Implementation of hook_simpletest_automator_actions().
 */
function simpletest_automator_simpletest_automator_actions($action, $op) {
  switch ($op) {
    case 'list':
      // We need to return an array of the action types that can be added.
      // The keys should be the internal action names, while the values will be
      // presented to the user.
      return array(
        'assert_text' => t('Make sure text appears'),
        'click_link' => t('Click on a link'),
        'drupal_get' => t('Make an HTTP GET request'),
        'drupal_post' => t('Make an HTTP POST request'),
      );

    case 'description':
      // Delegate the description to a helper function.
      // @see _simpletest_automator_describe_action().
      return _simpletest_automator_describe_action($action);

    case 'export':
      // Delegate the exporting to a helper function.
      // @see _simpletest_automator_export_action().
      return _simpletest_automator_export_action($action);

    case 'form':
      // Delegate the exporting to a helper function.
      // @see _simpletest_automator_action_form().
      return _simpletest_automator_action_form($action);
  }
}

/**
 * Helper function for simpletest_automator_simpletest_automator_actions().
 * Returns the description for any of the core simpletest automator actions.
 *
 * @param $action
 *   The action to return the description of.
 * @return
 *   An intelligent, 1-2 line description of the action.
 */
function _simpletest_automator_describe_action($action) {
  switch ($action->type) {
    case 'click_link':
      return t('This will scan the current page for links with the label %label, and simulate a "click" on the #@index link.', array('%label' => $action->parameters['label'], '@index' => $action->parameters['index'] + 1));

    case 'assert_text':
      if ($action->parameters['should_appear']) {
        return t('This will look at all the text on the current page, and make sure that the text %text appears.', array('%text' => $action->parameters['text']));
      }
      else {
        return t('This will look at all the text on the current page, and make sure that the text %text does <strong>not</strong> appear.', array('%text' => $action->parameters['text']));
      }

    case 'drupal_get':
      return t('This will make a GET request to the %page page.', array('%page' => $action->parameters['url']));

    case 'drupal_post':
      return t('This will submit the form at the @page page.', array('@page' => $action->parameters['url']));
  }
}

/**
 * Helper function for simpletest_automator_simpletest_automator_actions().
 * Return an array of lines of code for the specified action.
 *
 * @param $action
 *   The action to return the export of.
 * @return
 *   An array of lines of code to be added to the export.
 */
function _simpletest_automator_export_action($action) {
  $lines = array();
  switch ($action->type) {
    case 'click_link':
      // All code comments should be in English, so don't use t().
      $lines[] = '// Click the link on the page in order to simulate browsing the site.';
      if ($action->parameters['index']) {
        $lines[] = array(
          'value' => '$this->clickLink(t(%s), %d)',
          'arguments' => array($action->parameters['label'], $action->parameters['index']),
        );
      }
      else {
        $lines[] = array(
          'value' => '$this->clickLink(t(%s));',
          'arguments' => array($action->parameters['label']),
        );
      }
      break;

    case 'assert_text':
      $assert = 'assert';
      if (!$action->parameters['should_appear']) {
        $assert .= 'No';
      }
      $assert .= $action->parameters['html'] ? 'Raw' : 'Text';
      $lines[] = array(
        'value' => '$this->' . $assert . '(%s);',
        'arguments' => array($action->parameters['text']),
      );
      break;

    case 'drupal_get':
      $lines[] = array(
        'value' => '$this->drupalGet(%s);',
        'arguments' => array($action->parameters['url']),
      );
      break;

    case 'drupal_post':
      $lines[] = '$edit = array();';
      foreach ($action->parameters['post'] as $name => $value) {
        $lines[] = array(
          'value' => '$edit[%s] = %s;',
          'arguments' => array($name, $value),
        );
      }
      $lines[] = array(
        'value' => '$this->drupalPost(%s, $edit, t(%s));',
        'arguments' => array($action->parameters['url'], $action->parameters['operation']),
      );
      break;

  }
  return $lines;
}

/**
 * Helper function for simpletest_automator_simpletest_automator_actions().
 * Returns the settings form for any of the core simpletest automator actions.
 *
 * @param $action
 *   The action to return the settings form of.
 * @return
 *   A forms API array of form items to add to the form.
 */
function _simpletest_automator_action_form($action) {
  $form = array();
  switch ($action->type) {
    case 'click_link':
      $form['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Label'),
        '#description' => t('The label of the link to click'),
        '#required' => TRUE,
        '#default_value' => isset($action->parameters['label']) ? $action->parameters['label'] : '',
      );
      $form['index'] = array(
        '#type' => 'select',
        '#title' => t('Index'),
        '#description' => t('Select the Nth link to click - for example, if "Edit" appears as a link on the page twice, choose "0" to click the first one, or "1" to click the second one.'),
        '#default_value' => isset($action->parameters['index']) ? $action->parameters['index'] : 0,
        '#options' => drupal_map_assoc(range(0, 10)),
      );
      break;

    case 'assert_text':
      $form['text'] = array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#description' => t('The text to check for. This should not contain any HTML unless the "Text is HTML" option is selected below.'),
        '#required' => TRUE,
        '#default_value' => isset($action->parameters['text']) ? $action->parameters['text'] : '',
      );

      $form['should_appear'] = array(
        '#type' => 'checkbox',
        '#title' => t('Text should appear'),
        '#description' => t('If unchecked, it will assert that the text does <strong>not</strong> appear, rather than asserting that the text <strong>should</strong> appear.'),
        '#default_value' => isset($action->parameters['should_appear']) ? $action->parameters['should_appear'] : TRUE,
      );

      $form['html'] = array(
        '#type' => 'checkbox',
        '#title' => t('Text is HTML'),
        '#description' => t('If checked, it will cause the code to check whether the raw HTML matches, rather than simply the visible text.'),
        '#default_value' => isset($action->parameters['should_appear']) ? $action->parameters['should_appear'] : FALSE,
      );
      break;

    case 'drupal_get':
      $form['url'] = array(
        '#type' => 'textfield',
        '#title' => t('URL'),
        '#required' => TRUE,
        '#description' => t('Enter the URL to make a GET request to. Should be relative to the drupal install, without the ?q=.'),
        '#default_value' => isset($action->parameters['url']) ? $action->parameters['url'] : '',
      );
      break;

    case 'drupal_post':
      $form['url'] = array(
        '#type' => 'textfield',
        '#title' => t('URL'),
        '#required' => TRUE,
        '#description' => t('Enter the URL to make a POST request to. Should be relative to the drupal install, without the ?q=.'),
        '#default_value' => isset($action->parameters['url']) ? $action->parameters['url'] : '',
      );

      // @TODO
      $form['post'] = array(
        '#type' => 'value',
        '#value' => isset($action->parameters['post']) ? $action->parameters['post'] : array(),
      );

      $form['operation'] = array(
        '#type' => 'textfield',
        '#title' => t('Operation'),
        '#required' => TRUE,
        '#description' => t('Enter the name of the submit button to simulate being pressed.'),
        '#default_value' => isset($action->parameters['operation']) ? $action->parameters['operation'] : '',
      );
      break;
  }
  return $form;
}




/*
 * Determines whether or not the simpletest automator is on.
 *
 * @return
 *   TRUE if simpletest automator is running, FALSE otherwise.
 *
function _simpletest_automator_on() {
  return isset($_SESSION['simpletest_automator']['state']) && $_SESSION['simpletest_automator']['state'] == SIMPLETEST_AUTOMATOR_RUNNING;
}

/**
 * Add our javascript.
 * /
function _simpletest_add_js() {
  drupal_add_js(drupal_get_path('module', 'simpletest_automator') . '/simpletest_automator.js');
}

/**
 * Implementation of hook_init().
 * /
function simpletest_automator_init() {
  global $conf;
  if (_simpletest_automator_on()) {
    _simpletest_add_js();
    if (variable_get('simpletest_automator_record_next_get', TRUE) && empty($_POST) && (!isset($_SESSION['simpletest_automator']['url']) || $_SESSION['simpletest_automator']['url'] != $_GET['q']) && $_GET['q'] != 'simpletest_automator/stop') {
      simpletest_automator_file('// Make a GET request to the %s page.', $_GET['q']);
      simpletest_automator_file('$this->drupalGet(%s)', $_GET['q']);
    }
    elseif (!variable_get('simpletest_automator_record_next_get', TRUE)) {
      variable_del('simpletest_automator_record_next_get');
    }
    $conf['date_format_short'] = 'custom';
    $conf['date_format_short_custom'] = '\-\-\s\i\m\p\l\e\t\e\s\t\ \d\e\l\i\m\i\t\e\r\-\-';
    $conf['date_format_medium'] = 'custom';
    $conf['date_format_medium_custom'] = '\-\-\s\i\m\p\l\e\t\e\s\t\ \d\e\l\i\m\i\t\e\r\-\-';
    $conf['date_format_long'] = 'custom';
    $conf['date_format_long_custom'] = '\-\-\s\i\m\p\l\e\t\e\s\t\ \d\e\l\i\m\i\t\e\r\-\-';
  }
  elseif (isset($_SESSION['simpletest_automator']['state'])) {
    if ($_SESSION['simpletest_automator']['state'] == SIMPLETEST_AUTOMATOR_ON) {
      // This is the admin/build/simpletest/automator where we start. We move
      // to the next state and we add the JS because we want to record the
      // link that navigates us away.
      $_SESSION['simpletest_automator']['state'] = SIMPLETEST_AUTOMATOR_FIRST_PAGE;
      _simpletest_add_js();
    }
    elseif ($_SESSION['simpletest_automator']['state'] == SIMPLETEST_AUTOMATOR_FIRST_PAGE) {
      $_SESSION['simpletest_automator']['state'] = SIMPLETEST_AUTOMATOR_RUNNING;
      _simpletest_add_js();
    }
  }
}

/**
 * Implementation of hook_exit().
 * /
function simpletest_automator_exit($url = NULL) {
  if (_simpletest_automator_on()) {
    if (isset($url)) {
      $parsed_url = parse_url($url);
      $_SESSION['simpletest_automator']['url'] = substr($parsed_url['path'], strlen(base_path()));
    }
    // Close the file.
    simpletest_automator_file();
  }
}

/**
 * Implementation of hook_form_alter().
 * /
function simpletest_automator_form_alter(&$form, $form_state, $form_id) {
  if (_simpletest_automator_on() && $form_id != 'simpletest_automator_form') {
    $form['#after_build'][] = 'simpletest_automator_after_build';
  }
}

/**
 * Our after_build handler records the posted data and the clicked button.
 * /
function simpletest_automator_after_build($form, $form_state) {
  if ($post = $form['#post']) {
    unset($post['form_id'], $post['form_build_id'], $post['form_token']);
    $post = _simpletest_automator_flatten_post($post);
    simpletest_automator_file('$edit = %s', $post);
    simpletest_automator_file('$this->drupalPost(%s, $edit, %s)', $_GET['q'], $form_state['clicked_button']['#value']);
  }
  return $form;
}

/**
 * Flatten the POST request.
 * /
function _simpletest_automator_flatten_post($post, $prefix = '', $postfix = '') {
  $return = array();
  foreach ($post as $k => $v) {
    $new_index = $prefix . $k . $postfix;
    if (is_array($v)) {
      $return += _simpletest_automator_flatten_post($v, $new_index .'[', ']');
    }
    else {
      $return[$new_index] = $v;
    }
  }
  return $return;
}

/**
 * Menu JS callback.
 * /
function simpletest_automator_js() {
  $text = $_POST['text'];
  unset($_POST['text']);
  if ($text == '$this->clickLink(t(%s), %d)' || $text == '$this->clickLink(t(%s))') {
    // We don't want to record the next GET request, then.
    variable_set('simpletest_automator_record_next_get', FALSE);
  }
  $args = array_merge(array($text), $_POST);
  call_user_func_array('simpletest_automator_file', $args);
}

/** 
 * Implementation of hook_preprocess_page().
 * /
function simpletest_automator_preprocess_page($vars) {
  if (_simpletest_automator_on()) {
    $title = drupal_get_title() ? drupal_get_title() : variable_get('site_name', 'Drupal');
    simpletest_automator_file('$this->assertTitle(t(%s), t(\'Make sure we have the correct page title.\'))', $title);
    if ($title == t('Access denied')) {
      simpletest_automator_file('$this->assertResponse(403)');
    }
    elseif ($title == t('Page not found')) {
      simpletest_automator_file('$this->assertResponse(404)');
    }
    else {
      simpletest_automator_file('$this->assertResponse(200)');
    }
  }
}

/**
 * Implementation of hook_preprocess_block().
 * /
function simpletest_automator_preprocess_block() {
  static $done = FALSE;
  if (!$done && _simpletest_automator_on()) {
    $done = TRUE;
    foreach (drupal_get_messages(NULL, FALSE) as $type => $messages) {
      foreach ($messages as $message) {
        simpletest_automator_file('$this->assertRaw(%s, t(%s, array(\'%message\' => %s)', $message, 'Make sure the %message message appears.', $message);
      }
    }
  }
}

/**
 * Save some code to the test file.
 *
 * @param $line
 *   The line to save, with %* delimiters.
 * @param ...
 *   Additional arguments to be fed to sprintf().
 * @return
 *   None.
 * /
function simpletest_automator_file($line = NULL) {
  static $file;
  if (isset($line)) {
    if (!isset($file)) {
      $file = fopen($_SESSION['simpletest_automator']['filename'], 'a');
    }
    $args = func_get_args();
    foreach ($args as $key => $value) {
      // Arg 0 is the string, we do not escape that.
      if ($key) {
        $args[$key] = var_export($value, TRUE);
      }
    }
    $line = call_user_func_array('sprintf', $args);
    $comment = $line[0] == '/';
    if ($line[0] == '$' || $comment) {
      $line = '    '. $line;
    }
    if ($line[strlen($line) - 1] != '{' && !$comment) {
      $line .=  ';';
    }
    if ($comment) {
      $line = "\n" . $line;
    }
    fputs($file, "$line\n");
  }
  elseif (isset($file)) {
    fclose($file);
  }
}

/**
 * FAPI callback.
 * /
function simpletest_automator_form($form_state) {
  include_once drupal_get_path('module', 'user') . '/user.admin.inc';
  $rid = DRUPAL_AUTHENTICATED_RID;
  $form['permissions'] = drupal_retrieve_form('user_admin_perm', $form_state, $rid);
  $form['permissions']['checkboxes'][$rid]['#default_value'] = array();
  $form['permissions']['role_names'][$rid]['#value'] = 'Simpletest Automator';
  $form['permissions']['#theme'] = 'user_admin_perm';
  $form['permissions']['submit']['#value'] = t('Start testing with this user');
  $form['simpletest'] = array(
    '#weight' => -1,
  );
  $form['simpletest']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => '',
    '#required' => TRUE,
    '#description' => t('A short overview (1-3 lines) of what this test case will be testing.'),
  );
  $form['simpletest']['file'] = array(
    '#type' => 'textfield',
    '#title' => t('Test case filename'),
    '#default_value' => '',
    '#required' => TRUE,
    '#description' => t('Usually the lowercased version of the filename we\'re testing without the extension, and any dots replaced with underscores, e.g "comment" for comment.module or "system_admin" for system.admin.inc. The .test extension will be added automatically.'),
  );
  $form['simpletest']['class'] = array(
    '#type' => 'textfield',
    '#title' => t('PHP class name'),
    '#default_value' => '',
    '#required' => TRUE,
    '#description' => t('Should be CamelCased, e.g. "CommentAdministrationTestCase".'),
  );
  $form['simpletest']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Human readable name'),
    '#default_value' => '',
    '#required' => TRUE,
    '#description' => t('This will be the name as it appears on the administration interface.'),
  );
  $form['simpletest']['group'] = array(
    '#type' => 'textfield',
    '#title' => t('Group'),
    '#default_value' => '',
    '#required' => TRUE,
    '#description' => t('Typically, the human readable name of the module in question.'),
  );
  return $form;
}

function simpletest_automator_form_validate($form, $form_state) {
  if (!preg_match('/^[a-z][a-z0-9_]* /i', $form_state['values']['file'])) {
    form_set_error('file', t('The filename needs to be valid: it needs to begin with a letter, and contain only letters, numbers and underscores.'));
  }
  if (!preg_match('/^[a-z][a-z0-9_]* /i', $form_state['values']['class'])) {
    form_set_error('class', t('The class name should be a valid PHP identifier as well: begins with a letter, contains only letters, numbers and underscores.'));
  }
}

function simpletest_automator_form_submit($form, $form_state) {
  global $user;
  $original_uid = $user->uid;
  $form_values = $form_state['values'];
  $file = $form_values['file'];
  $class = $form_values['class'];
  $permissions= array_keys(array_filter($form_values[DRUPAL_AUTHENTICATED_RID]));
  $permstring = implode(', ', $permissions);
  $role_name = 'sa_'. user_password();
  db_query("INSERT INTO {role} (name) VALUES ('%s')", $role_name);
  $role = db_fetch_object(db_query("SELECT * FROM {role} WHERE name = '%s'", $role_name));
  $rid = $role->rid;
  db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $rid, $permstring);
  $name = 'sa_'. user_password();
  $ua = array(
    'name' => $name,
    'mail' => $name . '@example.com',
    'roles'  => array($rid => $rid),
    'pass' => user_password(),
    'status' => 1,
  );
  $user = user_save('', $ua);
  $edit = array();
  user_authenticate_finalize($edit);
  $sessio = $_SESSION;
  $_SESSION = array(
    'simpletest_automator' => array(
      'session' => $_SESSION,
      'cleanup' => array(
        'uid' => $user->uid,
        'rid' => $rid,
      ),
      'username' => $user->name,
      'state' => SIMPLETEST_AUTOMATOR_ON,
      'original_uid' => $original_uid,
      'filename' => file_directory_path() ."/$file.test",
    ),
  );
  $current_modules = module_list();
  $default_modules = array_merge(drupal_required_modules(), array('color', 'comment', 'help', 'menu', 'taxonomy', 'dblog'));
  $new_modules = array_diff($current_modules, $default_modules);
  $disabled_modules = array_diff($default_modules, $current_modules);
  $module_list = '';
  if (count($new_modules)) {
    $module_list = '\''. implode('\', \'', $new_modules) .'\'';
  }
  $disable_list = '';
  if (count($disabled_modules)) {
    $disable_list = "\n    ". implode(");\n    \$this->drupalModuleDisable('", $disabled_modules) ."');";
  }
  $test = ucfirst($file);
  simpletest_automator_file("<?php

class $class extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   * /
  function getInfo() {
    return array(
      'name' => t(%s),
      'description' => t(%s),
      'group' => t(%s),
    );
  }

  /**
   * Implementation of setUp().
   * /
  function setUp() {
    parent::setUp($module_list);$disable_list
  }

  /**
   * Implementation of tearDown().
   * /
  function tearDown() {
    parent::tearDown();
  }

  function test$test() {", $form_values['name'], $form_values['description'], $form_values['group']);
  simpletest_automator_file('$user = $this->drupalCreateUser(%s)', $permissions);
  simpletest_automator_file('$this->drupalLogin($user)');
}

function simpletest_automator_stop() {
  global $user;
  simpletest_automator_file('  }
}');
  simpletest_automator_file();
  $uid = $_SESSION['simpletest_automator']['cleanup']['uid'];
  $rid = $_SESSION['simpletest_automator']['cleanup']['rid'];
  db_query('DELETE FROM {users} WHERE uid = %d', $uid);
  db_query('DELETE FROM {users_roles} WHERE uid = %d', $uid);
  db_query('DELETE FROM {authmap} WHERE uid = %d', $uid);
  module_invoke_all('user', 'delete', array(), $user);
  db_query('DELETE FROM {permission} WHERE rid = %d', $rid);
  db_query('DELETE FROM {role} WHERE rid = %d', $rid);
  $user = user_load($_SESSION['simpletest_automator']['original_uid']);
  $_SESSION = $_SESSION['simpletest_automator']['session'];
  unset($_SESSION['simpletest_automator']);
  $edit = array();
  user_authenticate_finalize($edit);
  drupal_goto();
}
*/
