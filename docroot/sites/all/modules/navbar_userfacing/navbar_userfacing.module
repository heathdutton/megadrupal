<?php

/**
 * @file
 * Hook implementations for WCMC admin module.
 *
 * Original work by scottrigby; extended by seanr
 * Sponsored by DOOR3
 */

/**
 * Implements hook_menu().
 */
function navbar_userfacing_menu() {
  $items = array();

  $items['admin/config/user-interface/navbar-userfacing'] = array(
    'title' => t('User-facing Navbar'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('navbar_userfacing_settings'),
    'access arguments' => array('administer user-facing navbar'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function navbar_userfacing_permission() {
  $return = array();

  $return['administer user-facing navbar'] = array(
    'title' => t('Administer user-facing navbar'),
    'description' => t('Administer settings for the navbar'),
  );

  return $return;
}

function navbar_userfacing_settings() {
  $form = array();

  $form['navbar_userfacing_header'] = array(
    '#title' => t('Include header'),
    '#description' => t('Include a header with logo and title in the navbar - if this option is enabled, be sure to remove them from your theme/regions.  This options is useful to keep the whole site header fixed to the top of the browser window when scrolling.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('navbar_userfacing_header', FALSE),
  );
  $form['navbar_userfacing_search'] = array(
    '#title' => t('Include search form'),
    '#description' => t('Include the search form in the navbar - if this option is enabled, be sure to remove it from your theme/regions.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('navbar_userfacing_search', FALSE),
  );
  $form['navbar_userfacing_user'] = array(
    '#title' => t('Show user links to anonymous users'),
    '#description' => t('By default, this module will hide the login link for anonymous users; this setting will add it to the navbar.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('navbar_userfacing_user', FALSE),
  );
  $form['navbar_userfacing_menu'] = array(
    '#title' => t('Menu to include'),
    '#decription' => t('Choose which menu your primary navigation links are in.  Defaults to Mani Menu.'),
    '#type' => 'select',
    '#options' => menu_get_menus(),
    '#default_value' => variable_get('navbar_userfacing_menu', 'main-menu'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_navbar().
 *
 * See @link https://drupal.org/node/1956204 d.o issue. @endlink
 */
function navbar_userfacing_navbar() {
  $items = array();

  if (variable_get('navbar_userfacing_header', FALSE)) {

    $items['header-wrapper'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="header-wrapper clearfix">',
      '#weight' => -102
    );

    if (theme_get_setting('toggle_logo')) {
      $image = array(
        '#theme' => 'image',
        '#path' => theme_get_setting('logo'),
        '#alt' => variable_get('site_name', NULL),
      );
      $items['logo_full'] = array(
        '#type' => 'link',
        '#title' => drupal_render($image),
        '#href' => '<front>',
        '#options' => array(
          'attributes' => array(),
          'html' => TRUE,
        ),
        '#prefix' => '<div class="clearfix logo-full">',
        '#suffix' => '</div>',
        '#weight' => -101
      );
    }

    if (theme_get_setting('toggle_name')) {
      $items['title_full'] = array(
        '#type' => 'link',
        '#title' => variable_get('site_name', NULL),
        '#href' => '<front>',
        '#options' => array(
          'attributes' => array(),
        ),
        '#prefix' => '<h2 id="site-name" class="clearfix title-full">',
        '#suffix' => '</h2>',
        '#weight' => -100
      );
    }

    $items['header-wrapper-closing'] = array(
      '#type' => 'markup',
      '#markup' => "</div>",
      '#weight' => -99
    );
  }

  // Add only top-level menus in navbar - do not bother with 'below' here.
  $tree = menu_tree_all_data(variable_get('navbar_userfacing_menu', 'main-menu'));
  $weight = 1;

  $items['navbar-wrapper-background'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="navbar-wrapper-background">',
    '#weight' => -22,
  );

  $items['navbar-wrapper'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="navbar-wrapper">',
    '#weight' => -21,
  );

  foreach ($tree as $menu_item) {
    $link = $menu_item['link'];
    // Safely present user-entered menu titles, without showing encoded
    // characters such as ampersands. @see https://drupal.org/node/1665818
    $title = decode_entities(filter_xss($link['link_title']));
    $below = menu_tree_output($menu_item['below']);
    $items[$link['mlid']] = array(
      '#type' => 'navbar_item',
      'tab' => array(
        '#type' => 'link',
        '#title' => $title,
        '#href' => $link['href'],
        '#options' => array(
          'attributes' => array(
            'title' => $title,
          ),
        ),
        '#suffix' => ($menu_item['below']) ? render($below) : NULL,
      ),
      '#weight' => $weight,
      // Add a new class for our breakpoint.
      // @see template_preprocess_navbar_tab_wrapper()
      // @see navbar.override.css
      '#wrapper_attributes' => array(
        'class' => array('menu-item'),
      ),
      // Do not include hidden menu items.
      '#access' => !$link['hidden'],
    );
    $weight++;
  }

  $items['navbar-wrapper-background-closing'] = array(
    '#type' => 'markup',
    '#markup' => "</div>",
    '#weight' => 499,
  );

  $items['navbar-wrapper-closing'] = array(
    '#type' => 'markup',
    '#markup' => "</div>",
    '#weight' => 500,
  );

  /**
   *
   */
  // Add attributes to the links before rendering.
  navbar_menu_navigation_links($tree);
  $main_menu = array(
    '#heading' => t('Main Menu'),
    'navbar_main_menu' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('navbar-menu-main'),
      ),
      'main_menu' => menu_tree_output($tree),
    ),
  );
  $items['main_menu'] = array(
    '#type' => 'navbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('Menu'),
      '#href' => '<front>',
      '#options' => array(
        'attributes' => array(
          'title' => t('Main menu'),
          'class' => array('icon', 'icon-menu', 'navbar-tab',),
        ),
      ),
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'navbar_userfacing') . '/css/navbar.override.css',
        ),
      ),
    ),
    'tray' => $main_menu,
    '#weight' => 100,
    // Add custom menu icon at a breakpoint, and hide the other top level items.
    '#wrapper_attributes' => array(
      'class' => array('main-menu'),
    ),
  );

  if (variable_get('navbar_userfacing_search', FALSE)) {
    $form = drupal_get_form('search_form');
    $form['basic']['keys']['#title'] = NULL;
    $items['search'] = array(
      '#type' => 'navbar_item',
      'tab' => array(
        '#type' => 'markup',
        '#markup' => drupal_render($form),
      ),
      // Place after $items['user'] - See navbar_navbar().
      '#weight' => 101,
    );
  }

  return $items;
}

/**
 * Implements hook_navbar_alter().
 *
 * See @link https://drupal.org/node/1956204 d.o issue. @endlink
 */
function navbar_userfacing_navbar_alter(&$items) {
  $items['administration']['tab']['#title'] = t('Management');
  $items['administration']['#access'] = user_access('access administration pages');
  $items['administration']['#weight'] = 102;

  // Mover user links into admin tray
  foreach ($items['user']['tray']['user_links']['#links'] as $key => $link) {
    $items['administration']['tray']['navbar_administration']['administration_menu'][$key] = array(
      '#theme' => 'menu_link__management',
      '#title' => $link['title'],
      '#href' => $link['href'],
      '#localized_options' => array(
        'attributes' => (isset($link['attributes'])) ? $link['attributes'] : array(),
      ),
      '#attributes' => (isset($link['attributes'])) ? $link['attributes'] : array(),
      '#html' => (isset($link['html'])) ? $link['html'] : FALSE,
      '#below' => array(),
    );
    $items['administration']['tray']['navbar_administration']['administration_menu'][$key]['#localized_options']['attributes']['class'][] = 'icon';
    $items['administration']['tray']['navbar_administration']['administration_menu'][$key]['#attributes']['class'] = array(
      'leaf',
    );
  }
  unset($items['user']);
}
