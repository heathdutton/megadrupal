<?php

/**
 * @file
 * Custom SSL Redirect module
 */

/**
 * Implements hook_init().
 */
function custom_ssl_redirect_init() {
  $check = custom_ssl_redirect_check();
  if ($check !== NULL) {
    custom_ssl_redirect_redirect($check);
  }
}

/**
 * Implements hook_menu().
 */
function custom_ssl_redirect_menu() {
  $items = array();

  $items['admin/config/people/custom-ssl-redirect'] = array(
    'title' => 'Custom SSL redirect',
    'description' => 'Configure custom SSL redirect settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_ssl_redirect_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'custom_ssl_redirect.admin.inc',
  );

  return $items;
}

/**
 * Checks whether page must be loaded with HTTPS or HTTP.
 */
function custom_ssl_redirect_check($path = NULL) {
  $result = &drupal_static(__FUNCTION__);
  if ($path === NULL) {
    $path = current_path();
  }
  if (empty($result[$path])) {
    global $is_https, $user;
    $result[$path] = 'idle';
    if (in_array('authenticated user', $user->roles)) {
      if (!$is_https) {
        $result[$path] = 'https';
      }
    }
    else {
      if (custom_ssl_redirect_ignore($path)) {
        return NULL;
      }
      $to_ssl = custom_ssl_redirect_switch_to_ssl($path);
      if ($is_https) {
        if (!$to_ssl) {
          $result[$path] = 'http';
        }
      }
      else {
        if ($to_ssl) {
          $result[$path] = 'https';
        }
      }
    }
  }
  if ($result[$path] == 'https') {
    return TRUE;
  }
  elseif ($result[$path] == 'http') {
    return FALSE;
  }
  else {
    return NULL;
  }
}

/**
 * Checks whether page currently uses HTTPS.
 */
function custom_ssl_redirect_page_is_in_https_mode() {
  return !empty($_SERVER['HTTPS']);
}

/**
 * Checks whether path must be used with HTTPS.
 */
function custom_ssl_redirect_switch_to_ssl($path) {
  $paths = variable_get('custom_ssl_redirect_secure_paths', array());
  return custom_ssl_redirect_page_matches($path, $paths);
}

/**
 * Checks whether path must be ignored.
 */
function custom_ssl_redirect_ignore($path) {
  $paths = variable_get('custom_ssl_redirect_ignore_paths', array());
  return custom_ssl_redirect_page_matches($path, $paths);
}

/**
 * Checks whether specific path is in a list of paths.
 */
function custom_ssl_redirect_page_matches($path, $paths) {
  if (empty($paths)) {
    return FALSE;
  }
  if (in_array('<front>', $paths) && $path === '') {
    return TRUE;
  }
  $regexp = '/^(' . implode('|', $paths) . ')$/';
  $result = preg_match($regexp, $path);
  return $result;
}

/**
 * Redirects an insecure request to the same path on the secure base URL.
 */
function custom_ssl_redirect_redirect($secure = TRUE) {
  // POST requests are not redirected, to prevent unintentional redirects which
  // result in lost POST data. HTTPS requests are also not redirected.
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    return;
  }
  $path = $_GET['q'];
  $http_response_code = 301;
  // Do not permit redirecting to an external URL.
  $options = array('query' => drupal_get_query_parameters(), 'external' => FALSE);
  $options['https'] = $secure;
  // We don't use drupal_goto() here because we want to be able to use the
  // page cache, but let's pretend that we are.
  drupal_alter('drupal_goto', $path, $options, $http_response_code);
  // The 'Location' HTTP header must be absolute.
  $options['absolute'] = TRUE;
  $url = url($path, $options);
  $status = "$http_response_code Moved Permanently";
  drupal_add_http_header('Status', $status);
  drupal_add_http_header('Location', $url);
  // Drupal page cache requires a non-empty page body for some reason.
  print $status;
  // Mimic drupal_exit() and drupal_page_footer() and then exit.
  module_invoke_all('exit', $url);
  drupal_session_commit();
  if (variable_get('cache', 0) && ($cache = drupal_page_set_cache())) {
    drupal_serve_page_from_cache($cache);
  }
  else {
    ob_flush();
  }
  exit;
}

/**
 * Implements redirect.
 */
function custom_ssl_redirect_http_request($url) {
  // Handle JS type urls in the background as they are likely to be
  // ajax type posts.
  if (arg(0) == 'js') {
    drupal_http_request($url);
    return;
  }

  // Handle post type URLs.  This should handle ajax POST urls
  // such as the tax calculation/progress bars.
  if ($_SERVER['REQUEST_METHOD'] == 'POST' && empty($_POST['custom_ssl_redirect_post'])) {
    $_POST['custom_ssl_redirect_post'] = 1;
    $options['headers'] = array('Content-Type' => 'application/x-www-form-urlencoded');
    $options['method'] = 'POST';
    $options['data'] = http_build_query($_POST, '', '&');

    drupal_http_request($url, $options);
    return;
  }

  // All other types of urls are handled normally.
  // Reset destination variables or we'll get sent there instead of to $url.
  unset($_REQUEST['destination'], $_GET['destination']);
  drupal_goto($url);
}

/**
 * Implements hook_url_outbound_alter().
 */
function custom_ssl_redirect_url_outbound_alter(&$path, &$options, $original_path) {
  global $base_insecure_url, $base_secure_url;
  // Modules and themes may set the 'https' option to TRUE to generate HTTPS
  // URLs or FALSE to generate HTTP URLs.
  $check = custom_ssl_redirect_check($original_path);
  if ($check !== NULL) {
    $options['https'] = $check;
  }
  if (isset($options['https'])) {
    $options['base_url'] = $options['https'] ? $base_secure_url : $base_insecure_url;
    $options['absolute'] = TRUE;
  }
}
