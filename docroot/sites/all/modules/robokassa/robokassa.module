<?php

define('ROBOKASSA_MERCHANT_URL', 'http://test.robokassa.ru/Index.aspx');

function robokassa_permission() {
  return array(
    'create payment order' => array('title' => t('Create payment order'), 'description' => ''),
    'make payment' => array('title' => t('Make payment'), 'description' => ''),
    'make foreign payment' => array('title' => t('Make foreign payment'), 'description' => ''),
    'administer payments' => array('title' => t('Administer Robokassa payments'), 'description' => ''),
    'administer settings' => array(
      'title' => t('Administer Robokassa settings'),
      'description' => '',
      'restrict access' => TRUE
    )
  );
}

function robokassa_menu() {
  $items = array();

  $items['robokassa/payment'] = array(
    'title' => 'Robokassa payment',
    'description' => 'Payment using Robokassa',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('robokassa_prefillform'),
    'access arguments' => array('create payment order'),
    'file' => 'robokassa.pages.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['robokassa/payment/%_robokassa_pid'] = array(
    'title' => 'Robokassa payment order',
    'description' => 'Payment using Robokassa',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('robokassa_merchantform', 2),
    'access arguments' => array('make payment'),
    'type' => MENU_CALLBACK,
  );
  $items['robokassa/success'] = array(
    'title' => 'Robokassa payment complete',
    'description' => 'Payment using Robokassa successfully proccessed.',
    'page callback' => 'robokassa_success',
    'access arguments' => array('make payment'),
    'file' => 'robokassa.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['robokassa/fail'] = array(
    'title' => 'Robokassa payment failed',
    'description' => 'Payment using Robokassa was not complete.',
    'page callback' => 'robokassa_fail',
    'access arguments' => array('make payment'),
    'file' => 'robokassa.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['robokassa/status'] = array(
    'title' => 'Internal Data',
    'page callback' => 'robokassa_status',
    'access callback' => TRUE,
    'file' => 'robokassa.pages.inc',
    'type' => MENU_CALLBACK
  );

  // Admin Robokassa pages.
  $items['admin/robokassa'] = array(
    'title' => 'Robokassa Merchant',
    'description' => 'Manage Robokassa merchant payments.',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/robokassa/payments'] = array(
    'weight' => 1,
    'title' => 'Payments',
    'description' => 'Browse all Robokassa payments, paid or unpaid.',
    'page callback' => 'robokassa_payments_pre',
    'access arguments' => array('administer payments'),
    'file' => 'robokassa.admin.inc',
  );

  $items['admin/robokassa/settings'] = array(
    'weight' => 2,
    'title' => 'Settings',
    'description' => 'Set Robokassa Merchant details (URL, Password, etc.)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('robokassa_settingsform'),
    'access arguments' => array('administer settings'),
    'file' => 'robokassa.admin.inc',
  );

  $items['admin/robokassa/sample'] = array(
    'weight' => 4,
    'title' => 'Sample settings',
    'description' => 'View sample page, which shows how to apply settings to Robokassa Merchant.',
    'page callback' => 'robokassa_sample',
    'access arguments' => array('administer settings'),
    'file' => 'robokassa.admin.inc',
  );

  return $items;
}


function robokassa_theme() {
  return array(
    'robokassa_success' => array(
      'template' => 'robokassa-success',
    ),
    'robokassa_fail' => array(
      'template' => 'robokassa-fail',
    ),
  );
}

function _robokassa_createpayment($args) {

  // checking input values...
  if (!is_array($args)) {
    form_set_error('', t('Can not create payment. Please contact site administrator for further assistance[1].'));
    return FALSE;
  }

  $args['created'] = time();
  // parse additional params
  $required_params = array('uid', 'created', 'amount', 'memo');
  $additional_params = array();
  foreach ($args as $key => $value) {
    if (!in_array($key, $required_params)) {
      $additional_params[$key] = $value;
    }
  }
  $additional_params_ar = $additional_params;
  $additional_params = serialize($additional_params);

  if (empty($args['uid'])) {
    global $user;
    $args['uid'] = (!$user->uid) ? '0' : (string) $user->uid;
  }

  if (strlen($args['uid']) <= 0) {
    form_set_error('', t('Can not create payment. Please contact site administrator for further assistance. uid: !uid', array('!uid' => $args['uid'])));
    return FALSE;
  }

  // fire hook
  $args = module_invoke_all('robokassa', 'insert', array(
    'uid' => $args['uid'],
    'created' => $args['created'],
    'amount' => $args['amount'],
    'memo' => $args['memo'],
  ));

  $args['amount'] = (float) $args['amount'];
  if ($args['amount'] <= 0) {
    form_set_error('amount', t('Invalid amount.'));
    return FALSE;
  }
  if (!preg_match("/^[0-9]{1,10}$/", $args['amount']) && !preg_match("/^[0-9]{1,6}\.[0-9]{1,6}$/", $args['amount'])) {
    form_set_error('amount', t('Invalid amount.'));
    return FALSE;
  }

  $args['memo'] = substr($args['memo'], 0, 255);

  // inserting payment
  $pid = db_insert('robokassa')
    ->fields(array(
    'uid' => $args['uid'],
    'amount' => $args['amount'],
    'created' => $args['created'],
    'memo' => $args['memo'],
    'params' => $additional_params,
  ))->execute();

  if ($pid <= 0) {
    form_set_error('', t('Can not create payment. Please contact site administrator for further assistance [4].'));
    return FALSE;
  }

  watchdog('Robokassa', 'Order InvID %invid created', array("%invid" => $pid), WATCHDOG_INFO);

  $payment = array(
    'pid' => $pid,
    'uid' => $args['uid'],
    'created' => $args['created'],
    'amount' => $args['amount'],
    'memo' => $args['memo'],
  );
  $payment = array_merge($additional_params_ar, $payment);
  module_invoke_all('robokassa', 'inserted', $payment);
  return $payment;
}

function _robokassa_deletepayment($pid) {
  $pid = (int) $pid;
  if ($pid > 0 && db_delete('robokassa')->condition('pid', $pid)->execute()) {
    watchdog('Robokassa', 'Order InvID %invid deleted', array("%invid" => $pid), WATCHDOG_INFO);
    module_invoke_all('robokassa', 'deleted', $pid);
    return TRUE;
  }
  return FALSE;
}

function _robokassa_enrollpayment($pid, $t = "") {
  $pid = (int) $pid;
  if (empty($t)) {
    $t = time();
  }
  if ($pid > 0 && db_update('robokassa')->fields(array('enrolled' => $t))->condition('pid', $pid, '=')->execute()) {
    watchdog('Robokassa', 'Order InvID %invid successfully enrolled', array("%invid" => $pid), WATCHDOG_INFO);
    // fire hook
    module_invoke_all('robokassa', 'enrolled', $pid, _robokassa_pid_load($pid));
    return TRUE;
  }
  return FALSE;
}

// loopback hook implementation
function robokassa_robokassa($op, $ar) {
  return $ar;
}

function _robokassa_pid_load($pid) {
  $pid = (int) $pid;
  if ($pid > 0 && $result = db_select('robokassa', 'r')->fields('r', array(
    'pid',
    'uid',
    'created',
    'amount',
    'memo',
    'enrolled',
    'params'
  ))->condition('pid', $pid, '=')->execute()->fetchAssoc()
  ) {
    $result = array_merge(unserialize($result['params']), $result);
    return $result;
  }
  return FALSE;
}

function robokassa_merchantform($form, &$form_state, $payment, $silent = false) {
  global $user;
  if (!is_array($payment) && is_integer($payment)) { // fetch payment info from DB
    $payment = _robokassa_pid_load($payment);
  }
  if (!is_array($payment) || !($payment['pid'] > 0)) {
    $form['error'] = array(
      '#type' => 'item',
      '#title' => t('Error'),
      '#markup' => t('Order you are going to pay for does not exist.'),
    );
  }
  elseif ($payment['enrolled'] != 0) {
    $form['error'] = array(
      '#type' => 'item',
      '#title' => t('Error'),
      '#markup' => t('Order you are going to pay already payed.'),
    );
  }
  elseif (user_is_logged_in() && $payment['uid'] != $user->uid && !user_access("make foreign payment")) {
    $form['error'] = array(
      '#type' => 'item',
      '#title' => t('Error'),
      '#markup' => t('Order you are going to pay created by other user.'),
    );
  }
  else {
    $form['#action'] = variable_get('robokassa_payment_url', ROBOKASSA_MERCHANT_URL);

    if (!$silent) {
        // interface data:
        $form['payment_id'] = array(
          '#type' => 'item',
          '#title' => t('Order #'),
          '#markup' => $payment['pid'],
        );

        $form['amount'] = array(
          '#type' => 'item',
          '#title' => t('Amount'),
          '#markup' => round($payment['amount'], 2).variable_get('robokassa_currency_suffix', ' руб.'),
        );

        $form['memo'] = array(
          '#type' => 'item',
          '#title' => t('Memo'),
          '#markup' => $payment['memo']
        );
    }
    // merchant data...
    $form['MrchLogin'] = array(
      '#type' => 'hidden',
      '#value' => variable_get('robokassa_login', ''),
    );

    $form['InvId'] = array(
      '#type' => 'hidden',
      '#value' => $payment['pid'],
    );

    $form['Desc'] = array(
      '#type' => 'hidden',
      '#value' => substr($payment['memo'],0,100),
    );

    $form['OutSum'] = array(
      '#type' => 'hidden',
      '#value' => round($payment['amount'], 2),
    );

    $form['SignatureValue'] = array(
      '#type' => 'hidden',
      '#value' => md5(variable_get('robokassa_login', '') . ':' . round($payment['amount'], 2) . ':' . $payment['pid'] . ':' . variable_get('robokassa_secretkey', '')),
    );

    $form['IncCurrLabel'] = array(
      '#type' => 'hidden',
      '#value' => variable_get('robokassa_default_currency', 'BANKOCEAN2R'),
    );

    $form['Culture'] = array(
      '#type' => 'hidden',
      '#value' => 'ru',
    );

    if (user_is_logged_in() && $user->mail) {
      $form['Email'] = array(
        '#type' => 'hidden',
        '#value' => $user->mail,
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Pay now'),
    );
  }
  return $form;
}



function robokassa_api($action, $params) {

  switch ($action) {
    case 'load':
      return _robokassa_pid_load($params['pid']);
      break;
    case 'insert':
      return _robokassa_createpayment($params);
      break;
    case 'delete':
      return _robokassa_deletepayment($params['pid']);
      break;
    case 'enroll':
      return _robokassa_enrollpayment($params['pid'], $params['time']);
      break;
    default:
      return FALSE;
      break;
  }
}

