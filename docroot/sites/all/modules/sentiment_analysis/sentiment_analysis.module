<?php

/**
 * @file
 * Adds sentiment analysis using field type.
 */

/**
 * Implements hook_permission().
 */
function sentiment_analysis_permission() {
  return array(
    'access sentiment analysis settings page' => array(
      'title' => t('Access Sentiment Analysis Settings'),
      'description' => t('Provide API key to check sentiment analysis'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sentiment_analysis_menu() {
  $items = array();
  $items['admin/config/sentiment-analysis/settings'] = array(
    'title' => 'API key for Sentiment Analysis',
    'description' => 'Configuration API key for sentiment analysis',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sentiment_analysis_form'),
    'file' => 'sentiment_analysis_settings.inc',
    'access arguments' => array('access sentiment analysis settings page'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function sentiment_analysis_field_info() {
  return array(
    'sentiment_analysis_check_data' => array(
      'label' => t('Sensitivity'),
      'description' => t("This field check sentiment analysis input using API"),
      'default_widget' => 'sentiment_analysis_check_info',
      'default_formatter' => 'sentiment_analysis_check_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function sentiment_analysis_field_widget_info() {
  return array(
    'sentiment_analysis_check_info' => array(
      'label' => t('Word Sentiment'),
      'field types' => array('sentiment_analysis_check_data'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function sentiment_analysis_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'sentiment_analysis_check_info':
      // Setting inputted label for field.
      $element['sentiment_analysis'] = array(
        '#type' => 'textarea',
        '#title' => t('label', array('label' => $instance['label'])),
        '#default_value' => isset($items[$delta]['sentiment_analysis']) ? $items[$delta]['sentiment_analysis'] : '',
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function sentiment_analysis_field_is_empty($item, $field) {
  if (empty($item['sentiment_analysis'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function sentiment_analysis_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, $errors) {
  // Checking for required field or not.
  if (!empty($entity_type)) {
    if ($instance['required'] == 1) {
      foreach (array_keys($items) as $item) {
        $sentence = $items[$item]['sentiment_analysis'];
        if (empty($sentence)) {
          form_set_error($field['field_name'], t('field is required', array('field' => $instance['label'])));
          return FALSE;
        }
      }
    }

    $nid = $entity->nid;
    $cid = $entity->comment;
    $uid = $entity->uid;
    // Check API present/not.
    $api_key = sentiment_analysis_get_api();
    if (!empty($api_key)) {
      foreach (array_keys($items) as $item) {
        $sentence = $items[$item]['sentiment_analysis'];
        // Checking length of inputted value.
        if (strlen($sentence) > 5000) {
          form_set_error($field['field_name'], t('Character count shoule be less than 5000'));
          return FALSE;
        }
        if (!empty($sentence)) {
          $api_url = "https://api.idolondemand.com/1/api/sync/analyzesentiment/v1";
          $api_query = $api_url . "?text=" . urlencode($sentence);
          $api_query .= "&apikey=" . $api_key;
          $api_session = curl_init($api_query);
          curl_setopt($api_session, CURLOPT_RETURNTRANSFER, TRUE);
          $apiexec = curl_exec($api_session);
          // Output of API in JSON format.
          $sentence_result = json_decode($apiexec, TRUE);
          $score = $sentence_result['aggregate']['score'];
          if (!empty($sentence_result)) {
            $current_url = url(current_path(), array('absolute' => TRUE, 'query' => drupal_get_query_parameters()));
            if ($sentence_result['aggregate']['sentiment'] == 'negative') {
              foreach ($sentence_result['negative'] as $negative_list) {
                $sentiment_word = $negative_list['sentiment'];
                drupal_set_message(t(':sentiment_word is a sentiment word.', array(":sentiment_word" => $sentiment_word)), 'error');
              }
            }
            $sentiment = $sentence_result['aggregate']['sentiment'];
            // Insert analyzed Sentiment Data.
            $nid = db_insert('sentiment_analysis_details')
                ->fields(array(
                  'sentiment' => $sentiment,
                  'sentence_description' => $sentence,
                  'score' => $score,
                  'nid' => $nid,
                  'cid' => $cid,
                  'uid' => $uid,
                  'page_url' => $current_url,
                  'time' => date('Y-m-d h:i:s a'),
                ))
                ->execute();
          }
        }
      }
      // Form set error is sentiment is negative.
      if (!empty($sentence_result)) {
        if ($sentence_result['aggregate']['sentiment'] == 'negative') {
          form_set_error($field['field_name'], t('Rectify and try again'));
          return FALSE;
        }
      }
    }
    // No API key.
    else {
      drupal_set_message(t('Skipped sentiment analysis due to lack of API Key'));
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function sentiment_analysis_field_formatter_info() {
  return array(
    'sentiment_analysis_check_default_formatter' => array(
      'label' => t('Word Sentiment'),
      'field types' => array('sentiment_analysis_check_data'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function sentiment_analysis_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'sentiment_analysis_check_default_formatter':
      foreach ($items as $delta => $item) {
        if (isset($item['sentiment_analysis'])) {
          $element[$delta]['#markup'] = $item['sentiment_analysis'];
        }
      }
      break;
  }
  return $element;
}

/**
 * Fetch API key.
 */
function sentiment_analysis_get_api() {
  $api = db_select('sentiment_analysis_api', 'sa');
  $api->fields('sa', array('api'));
  $api_key = $api->execute()->fetchField();
  return $api_key;
}

function sentiment_analysis_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'sentiment_analysis') . '/views',
  );
}
