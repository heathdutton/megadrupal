<?php
/**
 * @file
 * Code for the Open Atrium Notifications feature.
 */

include_once 'oa_notifications.features.inc';

/**
 * Name of session key for saving "do not notify" option
 */
define('SKIP_FLAG', 'oa_skip_notify');

/**
 * Implements hook_ctools_plugin_directory().
 */
function oa_notifications_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_menu().
 */
function oa_notifications_menu() {
  // TODO: What are the proper access conditions here.
  $items['js/oa_notifications/details/%node'] = array(
    'title' => 'Open Atrium Notification Details',
    'page callback' => 'oa_notifications_ajax_details',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['oa_notifications/%ctools_js/details/%node'] = array(
    'page callback' => 'oa_notifications_details_callback',
    'page arguments' => array(1,3),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_contextual_tabs_alter().
 *
 * Adds a "Subscribe" or "Unsubscribe" flag.
 */
function oa_notifications_contextual_tabs_alter(&$data) {
  if ($node = menu_get_object()) {
    drupal_add_js(drupal_get_path('module', 'oa_notifications') . '/oa_notifications.js');
    array_push($data['links'], array('data' => flag_create_link('subscribe_section_content', $node->nid)));
  }
}

/**
 * Implements hook_theme().
 */
function oa_notifications_theme() {
  return array(
    'oa_notifications_view' => array(
      'template' => 'oa-notifications-view',
      'variables' => array(
        'node' => NULL,
        'group' => array(),
        'team' => array(),
        'user' => array(),
        'subscribe' => array(),
        'show_details' => array(),
      ),
      'path' => drupal_get_path('module', 'oa_notifications') . '/templates',
    ),
    'oa_notifications_details' => array(
      'template' => 'oa-notifications-details',
      'variables' => array(
        'users' => array(),
        'description' => '',
        'no_users' => '',
      ),
      'path' => drupal_get_path('module', 'oa_notifications') . '/templates',
    ),
  );
}


/**
 * Return the resolved list of all users to be notified on a piece of content.
 *
 * @param object $node
 *   The node to return notifications.
 *
 * @return array
 *   An array of users keyed by uid.
 */
function oa_notifications_get_notifications($node) {
  $bucket = &drupal_static(__FUNCTION__);

  // See if notifications should be skipped.
  if (oa_notification_skip()) {
    return array();
  }

  if (!isset($bucket)) {
    $bucket = array();
    $gid = oa_core_get_space_context();
    $notifications = oa_notifications_load_multiple($node);

    if (isset($notifications['group'])) {
      foreach (array_keys($notifications['group']) as $group_id) {
        $users = oa_core_get_group_users_for_space($gid, $group_id);
        $bucket += $users;
      }
    }

    if (isset($notifications['team'])) {
      foreach (array_keys($notifications['team']) as $team_id) {
        $results = oa_teams_get_team_members($team_id);
        $users = user_load_multiple(array_keys($results));
        $bucket += $users;
      }
    }

    if (isset($notifications['user'])) {
      $users = user_load_multiple(array_keys($notifications['user']));
      $bucket += $users;
    }

    // Also grab users who flagged the content.
    $flags = flag_get_content_flags('node', $node->nid, 'subscribe_section_content');
    if (!empty($flags) && is_array($flags)) {
      $bucket += user_load_multiple(array_keys($flags));
    }

    // Get users who subscribed to entire section.
    if (isset($node->{OA_SECTION_FIELD}[LANGUAGE_NONE][0]['target_id'])) {
      $flags = flag_get_content_flags('node', $node->{OA_SECTION_FIELD}[LANGUAGE_NONE][0]['target_id'], 'subscribe_section_content');
      if (!empty($flags) && is_array($flags)) {
        $bucket += user_load_multiple(array_keys($flags));
      }
    }

    // Get users who subscribed to entire space.
    if (isset($node->{OA_SPACE_FIELD}[LANGUAGE_NONE][0]['target_id'])) {
      $flags = flag_get_content_flags('node', $node->{OA_SPACE_FIELD}[LANGUAGE_NONE][0]['target_id'], 'subscribe_section_content');
      if (!empty($flags) && is_array($flags)) {
        $bucket += user_load_multiple(array_keys($flags));
      }
    }

    // Allow modules to alter users.
    drupal_alter('notifications_users', $bucket, $node);
  }

  return $bucket;
}

/**
 * Some utility functions...
 */

/**
 * Gets the users for a particular node.
 *
 * Get the listing of users that are in the specified space, or the current
 * space if no space is specified that also have access to the provided node.
 *
 * @param int $gid
 *   The space ID.
 */
function oa_notifications_get_users_for_node($node, $gid = NULL) {
  if (!isset($gid)) {
    $gid = oa_core_get_space_context();
  }
  // @TODO: This won't scale. We need users that have access to the given node
  // which is controlled by node_access grants, etc.  Not easily queried.
  // The move to an autocomplete might make this potential performance problem
  // disappear.
  $users = oa_core_get_inherited_users_for_space($gid);
  // The loop below is currently a performance issue that needs more work
  // Lets just return the list of users that have access to space without
  // actually calling full node_access. Unfortunately, og_subgroups_node_grants
  // will cause all subspaces to be entity-loaded!
  /*
  if (isset($node->nid)) {
    foreach ($users as $uid => $user) {
      if (!node_access('view', $node, $user)) {
        unset($users[$uid]);
      }
    }
  }
  */
  return $users;
}

/**
 * Return all notifications for given source.  Optionally filtered by type.
 *
 * @param object $source_entity
 *   The loaded source entity.
 * @param string $source_type
 *   The entity type of the source (defaults to 'node').
 * @param string $target_type
 *   An optional parameter that allows to filter the notification based on
 *   target type (group, team, user).
 *
 * @return array
 *   Returns an associative array of notifications first keyed by target type,
 *   then beneath that keyed by the target_id.
 */
function oa_notifications_load_multiple($source_entity, $source_type = 'node', $target_type = NULL) {
  $source_id = current(entity_extract_ids($source_type, $source_entity));
  $query = db_select('oa_notifications', 'n')
    ->fields('n')
    ->condition('n.source_id', $source_id)
    ->condition('n.source_type', $source_type);

  if (isset($target_type)) {
    $query->condition('n.target_type', $target_type);
  }

  $notifications = array();
  $results = $query->execute()->fetchAllAssoc('notification_id');

  foreach ($results as $row) {
    $notifications[$row->target_type][$row->target_id] = $row;
  }

  drupal_alter('oa_notifications_load', $notifications, $source_entity, $source_type, $target_type);

  return $notifications;
}

/**
 * Saves notifications.
 *
 * @param array $values
 *   The values to save.
 */
function oa_notifications_save_notifications($values) {
  if (isset($values['notifications']['skip_notify'])) {
    $_SESSION[SKIP_FLAG] = $values['notifications']['skip_notify'];
  }
  if (isset($values['source_entity']) && isset($values['source_type'])) {
    drupal_alter('oa_notifications_save', $values);
    $source_type = $values['source_type'];
    $source_id = $values['source_entity'];
    $notifications = array();

    if (isset($values['override'])) {
      oa_notifications_save_override($source_type, $source_id, $values['override']);
    }
    if (!isset($values['override']) || $values['override']) {
      foreach (array('group', 'team', 'user') as $type) {
        foreach ($values['notifications'][$type] as $id) {
          $n = new stdClass();
          $n->source_id = $source_id;
          $n->source_type = $source_type;
          $n->target_id = $id;
          $n->target_type = $type;
          $notifications[] = $n;
        }
      }
    }

    oa_notifications_save_for_source($source_id, $source_type, $notifications);
  }
}

/**
 * Save a collection of Notifications for a particular source item.
 *
 * @param int $source_id
 *   The ID of the source (typically a nid).
 * @param string $source_type
 *   The entity type of the source (defaults to 'node').
 * @param array $notifications
 *   A collection of Notification object for this source.
 */
function oa_notifications_save_for_source($source_id, $source_type, $notifications) {
  db_delete('oa_notifications')
    ->condition('source_id', $source_id)
    ->condition('source_type', $source_type)
    ->execute();

  foreach ($notifications as $n) {
    drupal_write_record('oa_notifications', $n);
  }
}


/**
 * Implements hook_node_insert().
 */
function oa_notifications_node_insert($node) {
  if (oa_notifications_is_notification_type($node)) {
    $node->oa_notifications['source_entity'] = $node->nid;
    oa_notifications_save_notifications($node->oa_notifications);
  }
}

/**
 * Implements hook_node_update().
 */
function oa_notifications_node_update($node) {
  if (oa_notifications_is_notification_type($node) && isset($node->oa_notifications)) {
    $node->oa_notifications['source_entity'] = $node->nid;
    oa_notifications_save_notifications($node->oa_notifications);
  }
}

/**
 * Determine if this is an entity type which we need to provide notifications.
 *
 * @param object $node
 *   The node object.
 *
 * @return bool
 *   Returns TRUE if entity type requires providing notifications.
 */
function oa_notifications_is_notification_type($node) {
  // @TODO: Implement this as configurable. For now, add
  // notifications to any group-content type, and groups themselves.
  $types = oa_core_list_content_types(TRUE);

  // Default notifications on spaces.
  $types[OA_SPACE_TYPE] = TRUE;

  // No notifications on teams.
  unset($types[OA_TEAM_TYPE]);

  return (array_key_exists($node->type, $types));
}

/**
 * Implements hook_node_delete().
 *
 * Cleanup the notifications for teams and groups as they are removed.
 */
function oa_notifications_node_delete($node) {
  if ($node->type == OA_TEAM_TYPE) {
    $target_type = 'team';
  }
  elseif ($node->type == OA_GROUP_TYPE) {
    $target_type = 'group';
  }

  if (isset($target_type)) {
    oa_notifications_delete_for_target($node->nid, $target_type);
  }
}

/**
 * Delete notifications for a target.
 *
 * @param int $id
 *   The target id (e.g. node id).
 * @param string $type
 *   The target type (e.g. 'group', 'team').
 */
function oa_notifications_delete_for_target($id, $type) {
  db_delete('oa_notifications')
    ->condition('target_id', $id)
    ->condition('target_type', $type)
    ->execute();
}

/**
 * AJAX callback saves the quick reply notification configuration.
 */
function oa_notifications_ajax_callback($form, $form_state) {
  oa_notifications_save_notifications($form_state['values']);

  $element = $form_state['triggering_element']['#name'];
  return $form[$element];
}

/**
 * Callback for AJAX saving of the skip-notification option.
 */
function oa_notifications_skip_ajax_callback($form, $form_state) {
  if (isset($form_state['values']['notifications']['skip_notify'])) {
    $_SESSION[SKIP_FLAG] = $form_state['values']['notifications']['skip_notify'];
  }

  $element = $form_state['triggering_element']['#name'];
  return $form[$element];
}

/**
 * Define the fields that are used for configuring notifications.
 */
function oa_notifications_form_fields(&$form, &$form_state, $node) {
  $nid = isset($node->nid) ? $node->nid : 0;
  $form['source_type'] = array(
    '#type' => 'value',
    '#value' => 'node',
  );
  $form['source_entity'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );

  $default = array(
    'group' => array(),
    'team' => array(),
    'user' => array(),
  );

  // Get from form state, if available, for AJAX.
  $override = isset($form_state['values']['oa_notifications']['override']) ?
    $form_state['values']['oa_notifications']['override'] :
    oa_notifications_is_overriding('node', $nid);
  // Sections are handled differently due to space inheritance and overriding.
  if ($node->type == 'oa_section') {
    $form['override'] = array(
      '#type' => 'checkbox',
      '#title' => t('Override default notifications'),
      '#default_value' => $override,
      '#ajax' => array(
        'wrapper' => 'notifications-fields',
        'callback' => 'oa_notifications_form_fields_override_ajax',
      ),
    );
    $notifications = $override ?
      oa_notifications_load_multiple($node) :
      oa_notifications_get_default_notifications(0, 0);
  }
  else {
    // Space node, check for parent space in URL for defaults.
    $parent = 0;
    $section = 0;

    if (!empty($_GET[OA_PARENT_SPACE]) && is_numeric($_GET[OA_PARENT_SPACE])) {
      $parent = $_GET[OA_PARENT_SPACE];
      $section = FALSE;
    }

    if (!empty($_GET[OA_SECTION_FIELD]) && is_numeric($_GET[OA_SECTION_FIELD])) {
      $section = $_GET[OA_SECTION_FIELD];
    }

    $override = TRUE;
    $notifications = $nid ?
      oa_notifications_load_multiple($node) :
      oa_notifications_get_default_notifications($section, $parent);
  }

  $notifications = array_merge($default, $notifications);

  $form['notifications'] = array(
    '#type' => 'markup',
    '#tree' => TRUE,
    '#prefix' => '<div id="notifications-fields">',
    '#suffix' => '</div>',
  );

  $form['notifications']['group'] = array(
    '#type' => 'select',
    '#title' => t('Groups'),
    '#multiple' => TRUE,
    '#default_value' => array_keys($notifications['group']),
    '#disabled' => !$override,
  );

  $form['notifications']['team'] = array(
    '#type' => 'select',
    '#title' => t('Teams'),
    '#multiple' => TRUE,
    '#default_value' => array_keys($notifications['team']),
    '#disabled' => !$override,
  );

  $form['notifications']['user'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#multiple' => TRUE,
    '#default_value' => array_keys($notifications['user']),
    '#disabled' => !$override,
  );

  // If know oa_section exists, then it's been configured to use select2widget
  if (module_exists('oa_sections')) {
    foreach (element_children($form['notifications']) as $notifications_type) {
      $field_name = 'field_oa_' . $notifications_type . '_ref';
      $field = field_info_field($field_name);
      $value_key = key($field['columns']);
  
      // Below is mocking what og/select2widget does so it thinks this is a
      // select2 element.
      $type = 'select2widgetajax';
      $required = !empty($form['value']['#required']);
      $instance = field_info_instance('node', $field_name, 'oa_section');
      $settings = $instance['widget']['settings'];
      $id = 'NULL';
      $admin_form = !empty($form_state['form_id']) && $form_state['form_id'] == 'views_ui_config_item_form';
      $autocomplete_path = 'select2widget/ajax/'
        . $field['field_name'] . '/'
        . $instance['entity_type'] . '/'
        . $instance['bundle'] . '/'
        . $id . '?field_mode=all';
      $entity_labels = array();
      $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
      $entity_type = $instance['entity_type'];
      if ($entity_ids =  array_keys($notifications[$notifications_type])) {
        $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
        $entities = entity_load($field['settings']['target_type'], $entity_ids);
        foreach ($entities as $entity_id => $entity_item) {
          $label = $handler->getLabel($entity_item);
          $key = "$label ($entity_id)";
          // Labels containing commas or quotes must be wrapped in quotes.
          if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
            $key = '"' . str_replace('"', '""', $key) . '"';
          }
          $entity_labels[$entity_id] = $key;
        }
      }
      $form['notifications'][$notifications_type] = array(
        '#type' => 'textfield',
        '#default_value' => implode(',', $entity_labels),
        '#autocomplete_path' => $autocomplete_path,
        '#element_validate' => array('oa_notifications_select2widget_entity_validate_field'),
        '#settings' => $instance['widget']['settings'],
        '#process' => array('oa_core_exposed_og_group_ref_fix_cardinality', 'select2widget_entity_process_callback', 'ajax_process_form'),
        '#maxlength' => 1024,
        '#init' => $entity_labels,
        '#field_name' => $field_name,
        '#language' => LANGUAGE_NONE,
        '#bundle' => $instance['bundle'],
        '#entity_type' => 'node',
        '#field' => $field,
        '#field_parents' => array(),
        '#convert_empty_to_current' => TRUE,
      ) + $form['notifications'][$notifications_type];
    }
  }
  // Fallback to old logic if for whatever reason select2 isn't there.
  else {
    $all_groups = oa_core_get_all_groups();
    $group_options = array_map(create_function('$group', 'return $group->title;'), $all_groups);
    if (!($node->type == OA_SPACE_TYPE && empty($node->nid))) {
      $space_id = oa_core_get_space_context();
      if (!empty($space_id) && ($space = node_load($space_id))) {
        $group_options = array($space->nid => $space->title) + $group_options;
      }
    }
    $form['notifications']['group']['#options'] = $group_options;
    $space_teams = oa_teams_get_teams_for_space();
    $form['notifications']['team']['#options'] = array_map(create_function('$team', 'return $team->title;'), $space_teams);
    $space_users = oa_notifications_get_users_for_node($node);
    $form['notifications']['user']['#options'] = array_map(create_function('$user', 'return oa_core_realname($user);'), $space_users);
  }

  oa_notifications_reset();
  $form['notifications']['skip_notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not send notifications for this update.'),
  );
}

/**
 * Sets form value
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function oa_notifications_select2widget_entity_validate_field(&$element, &$form_state, $form) {
  $value = array();
  $entity_labels = array();
  $settings = $element['#settings']['select2widgetajax'];

  $field = field_widget_field($element, $form_state);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  $target_entities = explode(',', $element['#value']);

  foreach ($target_entities as &$target_entity) {
    if (is_numeric($target_entity)) {
      $value[$target_entity] = $target_entity;
      $entity = entity_load_single($field['settings']['target_type'], $target_entity);

      if($entity !== FALSE) {
        $label = entity_label($field['settings']['target_type'], $entity);
        $key = "$label ($target_entity)";
      }
      else {
        $key = "Anonymous ($target_entity)";
      }
      // Labels containing commas or quotes must be wrapped in quotes.
      if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
        $key = '"' . str_replace('"', '""', $key) . '"';
      }

      $entity_labels[$target_entity] = $key;
    }

    elseif (preg_match("/.+\((\d+)\)/", $target_entity, $matches)) {
      $entity_labels[$matches[1]] = $target_entity;
      $value[$matches[1]] = $matches[1];
    }

  }

  $element['#attached']['js'][0]['data']['select2widgetajax']['elements'][$element['#id']]['init'] = $entity_labels; //Update default values
  form_set_value($element, $value, $form_state);
}

/**
 * AJAX callback for oa_notifications_form_fields override checkbox.
 */
function oa_notifications_form_fields_override_ajax($form, &$form_state) {
  return $form['oa_notifications']['notifications'];
}


/**
 * Implements hook_form_node_form_alter().
 */
function oa_notifications_form_node_form_alter(&$form, &$form_state, $form_id) {
  // We are on a node/edit/add form.
  // Check content type.
  if (isset($form['#node']) && (oa_notifications_is_notification_type($form['#node']))) {
    $form['oa_notifications'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notifications'),
      '#collapsible' => TRUE,
      '#collapsed' => (in_array($form['#node']->type, array(OA_GROUP_TYPE, OA_SECTION_TYPE))) ? TRUE : FALSE,
      '#weight' => 9,
      '#tree' => TRUE,
    );
    oa_notifications_form_fields($form['oa_notifications'], $form_state, $form['#node']);
  }
}

/**
 * Gets a piece of section content's default notifications.
 *
 * @param int $section_id
 *   Node ID of the content's section. Optional.
 * @param int $space_id
 *   Node ID of the content's space. Optional.
 */
function oa_notifications_get_default_notifications($section_id = 0, $space_id = 0) {
  $notifications = array();

  // Space / section default to what's in the context.
  // Don't override section if is set to FALSE (like when creating subspaces).
  $section_id = $section_id || $section_id === FALSE ? $section_id : oa_core_get_section_context();
  $space_id = $space_id ? $space_id : oa_core_get_space_context();

  if ($section_id && ($section = node_load($section_id))) {
    if (oa_notifications_is_overriding('node', $section_id)) {
      return oa_notifications_load_multiple($section);
    }
    else {
      // Switch to the section's space, if available.
      $space_id = empty($section->{OA_SPACE_FIELD}[LANGUAGE_NONE][0]['target_id']) ?
        $space_id :
        $section->{OA_SPACE_FIELD}[LANGUAGE_NONE][0]['target_id'];
    }
  }

  // If the section isn't overriding notifications OR section ID wasn't set AND
  // the space ID is set, use the space's notifications instead.
  if ($space_id && ($space = node_load($space_id))) {
    return oa_notifications_load_multiple($space);
  }

  return array();
}

/**
 * Node add modal callback.
 */
function oa_notifications_details_callback($js = FALSE, $node) {
  $bucket = oa_notifications_get_notifications($node);

  $render = array();
  foreach ($bucket as $uid => $user) {
    if (node_access('view', $node, $user)) {
      $render[$uid] = array(
        'name' => oa_core_realname($user),
        'mail' => $user->mail,
      );
    }
  }
  $vars = array(
    'users' => $render,
    'description' => t('The following users will be notified:'),
    'no_users' => t('No notifications will be sent.'),
  );

  $title = t('Notification Details');

  $output = theme('oa_notifications_details', $vars);

  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');

    ctools_modal_render($title, $output);
    // above command will exit().
  }
  else {
    drupal_set_title($title);
    return $output;
  }
}

/**
 * Return the listing of users to be notified for the provided Node.
 *
 * @param object $node
 *   The node object.
 */
function oa_notifications_ajax_details($node) {
  $bucket = oa_notifications_get_notifications($node);

  $render = array();
  foreach ($bucket as $uid => $user) {
    if (node_access('view', $node, $user)) {
      $render[$uid] = array(
        'name' => oa_core_realname($user),
        'mail' => $user->mail,
      );
    }
  }
  $vars = array(
    'users' => $render,
    'description' => t('The following users will be notified:'),
    'no_users' => t('No notifications will be sent.'),
  );

  echo theme('oa_notifications_details', $vars);
}

/**
 * Returns whether or a node is overriding default notifications or not.
 *
 * @param string $entity_type
 *   Entity type to check
 * @param int $entity_id
 *   Entity ID to check.
 *
 * @return int
 *   Whether or not it's overriding. Default is not overriding.
 */
function oa_notifications_is_overriding($entity_type, $entity_id) {
  $override = db_select('oa_notifications_override', 'oa_no')
    ->fields('oa_no')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute()
    ->fetch();
  return $override ? $override->override : 0;
}

/**
 * Saves an entity's override settings.
 *
 * @param string $entity_type
 *   The entity type.
 * @param int $entity_id
 *   The entity id.
 * @param mixed $override
 *   Whether or not they're overriding. Bool or int.
 */
function oa_notifications_save_override($entity_type, $entity_id, $override) {
  db_merge('oa_notifications_override')
    ->key(array(
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
    ))
    ->fields(array(
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'override' => $override,
    ))
    ->execute();
}


/**
 * Implements hook_flag_default_flags().
 */
function oa_notifications_flag_default_flags() {
  $flags = array();
  // Exported flag: "Section Content Subscribe".
  $flags['subscribe_section_content'] = array(
    'content_type' => 'node',
    'title' => 'Section Content Subscribe',
    'global' => 0,
    'types' => array(),
    'flag_short' => 'Subscribe',
    'flag_long' => 'Subscribe to receive messages related to this content',
    'flag_message' => 'Subscribed',
    'unflag_short' => 'Unsubscribe',
    'unflag_long' => 'Unsubscribe to stop receiving messages about this content',
    'unflag_message' => 'Unsubscribed',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'roles' => array(
      'flag' => array(
        0 => 2,
      ),
      'unflag' => array(
        0 => 2,
      ),
    ),
    'weight' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'show_on_page' => 0,
    'show_on_teaser' => 0,
    'show_contextual_link' => FALSE,
    'i18n' => 0,
    'api_version' => 2,
  );
  return $flags;
}

/**
 * Implements hook_preprocess_flag().
 */
function oa_notifications_preprocess_flag(&$vars) {
  if ($vars['flag']->name == 'subscribe_section_content') {
    if ($vars['status'] == 'unflagged') {
      $vars['link_text'] = '<i class="icon-flag"></i> ' . $vars['link_text'];
    }
    else {
      $vars['link_text'] = '<i class="icon-ban-circle"></i> ' . $vars['link_text'];
    }
  }
}

/**
 * Reset any notification flag saved in session.
 */
function oa_notifications_reset() {
  if (isset($_SESSION[SKIP_FLAG])) {
    unset($_SESSION[SKIP_FLAG]);
    oa_notification_skip(FALSE);
  }
}

/**
 * Return whether notification should be skipped.
 *
 * Notifications can be disabled for the session or for a single page load.
 * Set the session value to disable it for a session (directly) or pass
 * TRUE to this function for just this page load.
 *
 * @param $value
 *   (optional) Set whether notification should be skipped for this page load.
 *
 * @return
 *  TRUE if notifications should skipped for this page load
 *  FALSE if notifications are enabled.
 */
function oa_notification_skip($value = NULL) {
  $skip = &drupal_static(__FUNCTION__, FALSE);
  if (isset($value)) {
    $skip = $value;
  }
  return $skip || !empty($_SESSION[SKIP_FLAG]);
}
