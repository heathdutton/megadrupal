<?php
/**
 * @file
 * Test file for udc module.
 */


// Unlock the client classes for including in drupal context.
if(!defined('USER_DATA_CONNECTOR_ALLOW_CLIENT_INCLUDE')) {
  define('USER_DATA_CONNECTOR_ALLOW_CLIENT_INCLUDE', TRUE);
}

/**
 * Configuration form test case
 */
class UserDataConnectorTestCaseBase extends DrupalWebTestCase {

  /**
   * Contains the users generated by the createNameRole() method
   * @var array
   */
  protected $namedRoles = array();

  /**
   * Contains the users generated by the createNamedUser() method
   * @var array
   */
  protected $namedUsers = array();

  /**
   * Returns the server token of the current installation. Used to test the
   * server script functionality.
   * @var string
   */
  protected $serverToken = '';

  /**
   * Used in getInfo
   * @return string
   */
  protected static function getInfoGroup() {
    return 'User Data Connector';
  }

  /**
   * The default values sent to the config form
   * @return array
   */
  protected static function getFormFieldDefaults($key = NULL) {
    $def = array(
      'udc_token' => 'simpletst-dummy-token',
      'udc_listed_roles' => '',
      'udc_unlisted_users' => 'admin',
      'udc_listed_profile_fields' => '<all>',
      'udc_require_https' => false,
      'udc_enable_debug' => 1
    );

    if (empty($key)) {
      return $def;
    }
    elseif (isset($def[$key])) {
      return $def[$key];
    }
    else {
      return NULL;
    }
  }

  /**
   * Returns the URI path of the config script
   * @return string
   */
  protected static function getConfigPath() {
    return '/admin/config/people/udc';
  }

  /**
   * Returns the simpletest table prefix including the configured prefix or FALSE
   * if no table with the objects database prefix is found
   * @return string
   */
  protected function getFullDatabasePrefix() {
    if (empty($this->databasePrefix)) {
      return FALSE;
    }
    foreach (db_query("SHOW TABLES")->fetchCol() as $k => $v) {
      if (strpos($v, $this->databasePrefix) !== FALSE) {
        return drupal_substr($v, 0, strpos($v, $this->databasePrefix) + drupal_strlen($this->databasePrefix));
      }
    }
    return FALSE;
  }

  /**
   * Test classes setup manageed here
   * @return void
   */
  public function setUp() {
    parent::setUp('udc');
  }

  /**
   * Checks if the text has no leading or trailing whitespaces, such as space,
   * tab, newline or vertical tab.
   * @param string $text
   */
  protected function assertTextIsTrimmed($text, $message = '', $group = 'Other') {
    return $this->assertEqual($text, trim($text, " \n\r\t\v"), $message, $group);
  }

  /**
   * Checks if the text is lowercase
   * @param string $text
   */
  protected function assertTextIsLowerCase($text, $message = '', $group = 'Other') {
    return $this->assertEqual($text, drupal_strtolower($text), $message, $group);
  }

  /**
   * Checks if the text is uppercase
   * @param string $text
   */
  protected function assertTextIsUpperCase($text, $message = '', $group = 'Other') {
    return $this->assertEqual($text, drupal_strtoupper($text), $message, $group);
  }

  /**
   * Checks if two arrays are equal in key and value
   * @param string $text
   */
  protected function assertArrayEqual($a1, $a2, $message = '', $group = 'Other') {
    return $this->assertTrue(count($a1) == count($a2) && count(array_diff_assoc($a1, $a2)) == 0, $message, $group);
  }

  /**
   * Checks if the JSON response of an autocomplete path query equals an
   * expected array.
   * @param string $base_path
   * @param string $query
   * @param array $assertedResponse
   * @return bool
   */
  protected function assertAutocompleteResponseEqual($base_path, $query, array $assertedResponse) {
    $ajax = $this->drupalGetAJAX($base_path . '/' . $query);
    return $this->assertArrayEqual($ajax, $assertedResponse, t('Autocomplete JSON (@a1) return equals reference (@a2)', array('@a1' => print_r($ajax, TRUE), '@a2' => print_r($assertedResponse, TRUE))));
  }


  /**
   * Creates a defined user by name, email, roles and profile/standard fields.
   * To spam not too much messages, some assertions are transparent on success
   * @param string $name
   * @param string $mail
   * @param array $roles
   * @param array $fields
   * @param bool $status
   * @return object
   */
  protected function createNamedUser($name, $mail = NULL, $roles = array(), $fields = array(), $status = 1) {
    // Input check
    if (empty($name)) return $this->fail(t('User name to create not empty'), 'User');
    if (empty($mail)) $mail = "$name@example.com";
    if (@preg_match('/^[^@]+@[a-zA-Z0-9._-]+\.[a-zA-Z]+$/', $text) != FALSE) return $this->fail(t('Email address is valid'), 'User');

    // Check if user is already existing
    $user = count(db_select('users', 'u')->fields('u', array('uid'))->condition('name', trim($name), '=')->execute()->fetchCol());

    if ($user > 0) {
      return $this->fail(t('Expecting user %name does not exist yet', array('%name' => $name)), 'User');
    }

    // Get matching roles
    $rids = db_select('role', 'r')->fields('r', array('rid'))->condition('name', $roles, 'IN')->execute()->fetchAllAssoc('rid');
    if (count($rids) != count($roles)) return $this->fail(t('All specified rids found in database'), 'User');

    // Sanatize status
    $status = !empty($status);

    // Create account
    $pass = user_password();
    $account = user_save(drupal_anonymous_user(), array(
      'name' => $name,
      'mail' => $mail,
      'roles' => $rids,
      'pass' => $pass,
      'status' => $status
    ));

    if (!$this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $name, '%pass' => $pass)), t('User login'), 'User')) {
      return FALSE;
    }

    // Remove the 'authenticated user' group
    foreach ($account->roles as $k => $role) {
      if (is_scalar($role) && $role == 'authenticated user') {
        unset($account->roles[$k]);
        break;
      }
    }

    // Convert rids to role names
    $return_roles = array();
    foreach ($account->roles as $role) {
      foreach ($this->namedRoles as $named_role_name => $named_role_rid) {
        if ($role->rid == $named_role_rid) {
          $return_roles[$named_role_name] = $named_role_name;
        }
      }
    }

    // Conditionally add administrator, which is saved, but not returned
    foreach ($roles as $role) {
      if ($role == 'administrator') {
        $return_roles['administrator'] = 'administrator';
        break;
      }
    }

    $account->roles = $return_roles;

    // Add to named users list
    $this->namedUsers[$name] = $account;

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $pass;
    return $account;
  }

  /**
   * Changes a named user created by createNamedUser(). All arguments that are
   * not NULL will be changed.
   * To spam not too much messages, some assertions are transparent on success
   * @param string $name
   * @param string $mail
   * @param array $roles
   * @param array $fields
   * @param bool $status
   * @return object
   */
  protected function changeNamedUser($name, $mail = NULL, $roles = NULL, $fields = NULL, $status = NULL) {
    if (!isset($this->namedUsers[$name])) return $this->fail(t('User "@name" is not in the named users list', array('@name' => $name)));
    $account = $this->namedUsers[$name];
    $edit = array();

    // Change email
    if ($mail !== NULL) {
      if (@preg_match('/^[^@]+@[a-zA-Z0-9._-]+\.[a-zA-Z]+$/', $text) != FALSE) return $this->fail(t('Email address is valid'), 'User');
      $edit['mail'] = $mail;
    }

    // Change roles
    if ($roles !== NULL) {
      if (!is_array($roles)) return $this->fail(t('Roles specified are not NULL or an array'), 'User');
      $rids = db_select('role', 'r')->fields('r', array('rid'))->condition('name', $roles, 'IN')->execute()->fetchAllAssoc('rid');
      if (count($rids) != count($roles)) return $this->fail(t('All specified rids found in database'), 'User');
      $edit['roles'] = $rids;
    }

    if ($status !== NULL) {
      // Sanatize status
      $status = !empty($status);
    }

    // Fields ... not yet implemented

    // Save account
    $account = user_save($account, $edit);
    return $account;
  }


  /**
   * Creates a named role.
   * @param string $name
   * @param array $permissions
   */
  protected function createNamedRole($name, $permissions = array('access comments', 'access content', 'post comments', 'skip comment approval')) {
    if (count(db_select('role', 'r')->fields('r', array('rid'))->condition('name', $name, '=')->execute()->fetchCol()) > 0) {
      return $this->fail(t('Named @role role exists already', array('@role' => $name)), 'Role');
    }
    $role = $this->drupalCreateRole($permissions, $name);
    if (!$role) {
      return $this->fail(t('Failed to create role with name "@name"', array('@name' => $name)));
    }
    else {
      $this->namedRoles[$name] = $role;
    }
  }

  /**
   * Generates named user roles and named uses with profile/common fields
   * @return bool
   */
  protected function createUserContext() {
    static $context_created = FALSE;
    if (!$context_created) {
      $ok = true
        && $this->createNamedRole('Member') !== FALSE
        && $this->createNamedRole('Editor') !== FALSE
        && $this->createNamedUser('Rincewind', 'rincewind@uu.ac.dw', array('member'))
        && $this->createNamedUser('Havelock', 'vetinari@am.gov.dw', array('administrator'))
        && $this->createNamedUser('admin', 'admin@example.com', array('administrator'))
        && $this->createNamedUser('User 1', 'user1@example.com', array('member'))
        && $this->createNamedUser('User 2', 'user2@example.com', array('editor'))
        && $this->createNamedUser('User 3', 'user3@example.com', array('member', 'editor'))
        && $this->createNamedUser('User 4', 'user4@example.com', array('member', 'editor'), array(), FALSE)
      ;

      db_delete('users')
        ->condition('uid', 1)
        ->execute();

      // db_query("DELETE FROM {users} WHERE uid=1;");
      $context_created = $ok;
      return $this->assert($context_created, "User context was created");
    }
    return TRUE;
  }

  /**
   * Configures the module, sets up the client/server testing mode
   * @param array $config
   */
  protected function configureModule(array $config = NULL) {
    $config = array_merge(self::getFormFieldDefaults(), empty($config) ? array() : $config);
    if (!$this->createUserContext()) return $this->fail(t('User context not created'));
    $this->drupalLogin($this->namedUsers['admin']);
    $this->drupalPost(self::getConfigPath(), $config, t('Save configuration'));
    if (!$this->assertText(t('The configuration options have been saved'))) return FALSE;
    $this->drupalLogout();

    // Determine the full prefix, so that the user table is e.g. "<PREFIX>user"
    // The variable to enables testing in the client classes and pass the testing
    // mode to the server script.
    $db_prefix = $this->getFullDatabasePrefix();
    if (!$this->assert($db_prefix != '', t('Simpletest database prefix is @prefix', array('@prefix' => $db_prefix)))) return FALSE;
    $GLOBALS['simpletest_udc_db_prefix'] = $db_prefix;
    return TRUE;
  }
}

/**
 * Configuration form test case
 */
class UserDataConnectorFormTestCase_Configuration extends UserDataConnectorTestCaseBase {

  /**
   * Test case information
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Configuration test',
      'description' => 'Administration form testing with autocomlete features' ,
      'group' => self::getInfoGroup(),
    );
  }

  /**
   * Configutation form checking
   */
  public function testConfigFieldChecking() {
    $config_path = '/admin/config/people/udc';

    if (!$this->createUserContext()) return $this->fail('User context not created');
    $this->drupalLogin($this->namedUsers['admin']);

    // Check default values
    $this->drupalPost(self::getConfigPath(), self::getFormFieldDefaults(), t('Save configuration'));
    $this->assertText(t('The configuration options have been saved'));

    // Check empty token
    $this->drupalPost(self::getConfigPath(), array_merge(self::getFormFieldDefaults(), array(
        'udc_token' => ''
    )), t('Save configuration'));
    $this->assertText(t('Token field is required'));

    // Check auto trim
    $this->drupalPost(self::getConfigPath(), array_merge(self::getFormFieldDefaults(), array(
      'udc_token' => ' ' . self::getFormFieldDefaults('udc_token') . '  ',
      'udc_listed_roles' => ' , ' . self::getFormFieldDefaults('udc_listed_roles') . ' , ',
      'udc_unlisted_users' => ' , ' . self::getFormFieldDefaults('udc_unlisted_users') . ' , ',
      'udc_listed_profile_fields' => ' , ' . self::getFormFieldDefaults('udc_listed_profile_fields') . ' , ',
    )), t('Save configuration'));
    $this->assertFieldByName('udc_token', self::getFormFieldDefaults('udc_token'));
    $this->assertFieldByName('udc_listed_roles', self::getFormFieldDefaults('udc_listed_roles'));
    $this->assertFieldByName('udc_unlisted_users', self::getFormFieldDefaults('udc_unlisted_users'));
    $this->assertFieldByName('udc_listed_profile_fields', self::getFormFieldDefaults('udc_listed_profile_fields'));

    // Check value assigning
    $this->drupalPost(self::getConfigPath(), array_merge(self::getFormFieldDefaults(), array(
      'udc_token' => 'other--token',
      'udc_listed_roles' => 'irnored listed role1, irnored listed role2, irnored listed role3',
      'udc_unlisted_users' => 'irnored unlisted user 1, irnored unlisted user 2, irnored unlisted user 3',
      'udc_listed_profile_fields' => 'irnored field 1, irnored field 2, irnored field 3',
      'udc_require_https' => !self::getFormFieldDefaults('udc_require_https') && function_exists('curl_init'),
      'udc_enable_debug' => !self::getFormFieldDefaults('udc_enable_debug'),
    )), t('Save configuration'));
    $this->assertFieldByName('udc_token', 'other--token');
    $this->assertFieldByName('udc_listed_roles', 'irnored listed role1, irnored listed role2, irnored listed role3');
    $this->assertFieldByName('udc_unlisted_users', 'irnored unlisted user 1, irnored unlisted user 2, irnored unlisted user 3');
    $this->assertFieldByName('udc_listed_profile_fields', 'irnored field 1, irnored field 2, irnored field 3');
    $this->assertFieldByName('udc_require_https', !self::getFormFieldDefaults('udc_require_https') && function_exists('curl_init'));
    $this->assertFieldByName('udc_enable_debug', !self::getFormFieldDefaults('udc_enable_debug'));

    // --- Autocomplete ---
    $u_path = self::getConfigPath() . '/autocomplete/users';
    $r_path = self::getConfigPath() . '/autocomplete/roles';
    $f_path = self::getConfigPath() . '/autocomplete/userfields';

    // User response: single user, match
    $this->assertAutocompleteResponseEqual($u_path, "ad", array('admin' => 'admin'));

    // User response: match without keycase
    $this->assertAutocompleteResponseEqual($u_path, "ri", array('Rincewind' => 'Rincewind'));

    // User response: match 2
    $this->assertAutocompleteResponseEqual($u_path, "admin, Ri", array('admin, Rincewind' => 'Rincewind'));

    // User response: match 2, full
    $this->assertAutocompleteResponseEqual($u_path, "admin, Rincewind", array('admin, Rincewind' => 'Rincewind'));

    // User response: match 3
    $this->assertAutocompleteResponseEqual($u_path, "admin, Rincewind, ha", array('admin, Rincewind, Havelock' => 'Havelock'));

    // User response: match 2, name doubled
    $this->assertAutocompleteResponseEqual($u_path, "admin, Rincewind, ri", array());

    // Role response: single role
    $this->assertAutocompleteResponseEqual($r_path, "adm", array('administrator' => 'administrator'));

    // Role response: 2 roles
    $this->assertAutocompleteResponseEqual($r_path, "administrator, mem", array('administrator, Member' => 'Member'));

    // Role response: 3 roles
    $this->assertAutocompleteResponseEqual($r_path, "administrator, Member, ed", array('administrator, Member, Editor' => 'Editor'));

    // Role response: 2 roles, doubled
    $this->assertAutocompleteResponseEqual($r_path, "administrator, Member, mem", array());
  }
}


/**
 * Configuration form test case
 */
class UserDataConnectorTestCase_List extends UserDataConnectorTestCaseBase {

  /**
   * Test case information
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Client class DrupalUserList',
      'description' => 'Client class DrupalUserList test' ,
      'group' => self::getInfoGroup(),
    );
  }

  /**
   * User listing client class / server checking
   */
  public function testUserList() {
    if (!$this->configureModule()) return FALSE;

    // Run the test
    require_once(DRUPAL_ROOT . '/sites/all/modules/udc/client/DrupalUserList.class.inc');
    DrupalUserBase::setToken(self::getFormFieldDefaults('udc_token'));

    try {
      $dpu = new DrupalUserList();
      $dpu->request(FALSE, TRUE);
      $this->pass(t('Received server data for @t', array('@t' => '$dpu->request(FALSE, TRUE);')));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert(count($dpu->list) == count($this->namedUsers) - 1, t("Returned list count (including inactive users) matches"));
      $this->assert(!isset($dpu->list['admin']), t("User 'admin' is not listed"));
      $this->assert(isset($dpu->list['User 4']), t("User 'User 4' is listed"));
      $this->assert(!empty($dpu->list['User 1']['name']), t('User name field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['mail']), t('User mail field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['active']), t('User active field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['roles']), t('User roles are included in the list'));
      $this->assert($dpu->list['User 4']['active'] == FALSE, t("User 'User 4' active field is FALSE"));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    try {
      $dpu = new DrupalUserList();
      $dpu->request(TRUE, TRUE);
      $this->pass(t('Received server data for @t', array('@t' => '$dpu->request(TRUE, TRUE);')));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert(count($dpu->list) == count($this->namedUsers) - 2, t("Returned list count (excluding inactive users) matches"));
      $this->assert(!isset($dpu->list['admin']), t("User 'admin' is not listed"));
      $this->assert(!isset($dpu->list['User 4']), t("User 'User 4' is not listed"));
      $this->assert(!empty($dpu->list['User 1']['name']), t('User name field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['mail']), t('User mail field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['active']), t('User active field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['roles']), t('User roles are included in the list'));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // Config -> List admin as well
    if (!$this->configureModule(array('udc_unlisted_users' => ''))) return FALSE;

    try {
      $dpu = new DrupalUserList();
      $dpu->request(FALSE, TRUE);
      $this->pass(t('Received server data for @t', array('@t' => '$dpu->request(FALSE, TRUE);')));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert(count($dpu->list) == count($this->namedUsers), t("Returned list count (including inactive users) matches"));
      $this->assert(isset($dpu->list['admin']), t("User 'admin' is listed"));
      $this->assert(isset($dpu->list['User 4']), t("User 'User 4' is listed"));
      $this->assert(!empty($dpu->list['User 1']['name']), t('User name field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['mail']), t('User mail field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['active']), t('User active field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['roles']), t('User roles are included in the list'));
      $this->assert($dpu->list['User 4']['active'] == FALSE, t("User 'User 4' active field is FALSE"));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    try {
      $dpu = new DrupalUserList();
      $dpu->request(TRUE, TRUE);
      $this->pass(t('Received server data for @t', array('@t' => '$dpu->request(TRUE, TRUE);')));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert(count($dpu->list) == count($this->namedUsers) -1, t("Returned list count (including inactive users) matches"));
      $this->assert(isset($dpu->list['admin']), t("User 'admin' is listed"));
      $this->assert(!isset($dpu->list['User 4']), t("User 'User 4' is not listed"));
      $this->assert(!empty($dpu->list['User 1']['name']), t('User name field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['mail']), t('User mail field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['active']), t('User active field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['roles']), t('User roles are included in the list'));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    try {
      $dpu = new DrupalUserList();
      $dpu->request(TRUE, FALSE);
      $this->pass(t('Received server data for @t', array('@t' => '$dpu->request(TRUE, FALSE);')));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert(count($dpu->list) == count($this->namedUsers) - 1, t("Returned list count (excluding inactive users) matches"));
      $this->assert(isset($dpu->list['admin']), t("User 'admin' is listed"));
      $this->assert(!isset($dpu->list['User 4']), t("User 'User 4' is not listed"));
      $this->assert(!empty($dpu->list['User 1']['name']), t('User name field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['mail']), t('User mail field exists and not empty'));
      $this->assert(!empty($dpu->list['User 1']['active']), t('User active field exists and not empty'));
      $this->assert(!isset($dpu->list['User 1']['roles']), t('User roles are not included in the list'));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // Config -> Only list editors
    if (!$this->configureModule(array('udc_listed_roles' => 'Editor'))) return FALSE;

    try {
      $dpu = new DrupalUserList();
      $dpu->request(TRUE, FALSE);
      $this->pass(t('Received server data for @t', array('@t' => '$dpu->request(TRUE, FALSE);')));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert(count($dpu->list) == 2, t("Returned list count (only editors) matches"));
      $this->assert(!isset($dpu->list['admin']), t("User 'admin' is not listed"));
      $this->assert(!isset($dpu->list['User 4']), t("User 'User 4' is not listed"));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    try {
      $dpu = new DrupalUserList();
      $dpu->request(FALSE, FALSE);
      $this->pass(t('Received server data for @t', array('@t' => '$dpu->request(FALSE, FALSE);')));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert(count($dpu->list) == 3, t("Returned list count (only editors) matches"));
      $this->assert(!isset($dpu->list['admin']), t("User 'admin' is not listed"));
      $this->assert(isset($dpu->list['User 4']), t("User 'User 4' is listed"));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    unset($GLOBALS['simpletest_udc_db_prefix']);
  }
}

/**
 * Configuration form test case
 */
class UserDataConnectorTestCase_Info extends UserDataConnectorTestCaseBase {

  /**
   * Test case information
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Client class DrupalUserInfo',
      'description' => 'Client class DrupalUserInfo test' ,
      'group' => self::getInfoGroup(),
    );
  }

  /**
   * User listing client class / server checking
   * Note: SimpleTest account objects cannot have the administrator group
   */
  public function testUserInfo() {
    if (!$this->configureModule()) return FALSE;

    // Run the test
    require_once(DRUPAL_ROOT . '/sites/all/modules/udc/client/DrupalUserInfo.class.inc');
    DrupalUserBase::setToken(self::getFormFieldDefaults('udc_token'));

    // Admin is in ignore list
    try {
      $user = 'admin';
      $dpu = new DrupalUserInfo();
      $dpu->request($user);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user)")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == FALSE, t('Server did not return user \'@user\' as configured (valid field is FALSE)', array('@user' => $user)));
      $this->assert(drupal_strtolower($dpu->getError()) == 'user not found', t('Server returnd error "User not found" for user \'@user\' as configured', array('@user' => $user)));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // Use 1 is not in ignore list
    try {
      $user = 'User 1';
      $dpu = new DrupalUserInfo();
      $dpu->request($user);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user)")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == TRUE, t('Server did return data for user \'@user\' (valid field is TRUE)', array('@user' => $user)));
      $this->assert($dpu->name == $user, t('User name matches'));
      $this->assert(drupal_strtolower($dpu->getError()) == '', t('Server returnd no error message'));
      $this->assert(count($dpu->roles) == count($this->namedUsers[$user]->roles), t('Server returnd no error message'));
      foreach ($dpu->roles as $k => $v) {
        $this->assert(isset($this->namedUsers[$user]->roles[$v]), t('User has role \'@role\'', array('@role' => $v)));
      }
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // Use 1 is not in ignore list, get using email
    try {
      $user = 'User 1';
      $dpu = new DrupalUserInfo();
      $dpu->request(NULL, 'user1@example.com');
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request(NULL, 'user1@example.com')")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == TRUE, t('Server did return data for user \'@user\' (valid field is TRUE)', array('@user' => $user)));
      $this->assert($dpu->name == $user, t('User name matches'));
      $this->assert(drupal_strtolower($dpu->getError()) == '', t('Server returnd no error message'));
      $this->assert(count($dpu->roles) == count($this->namedUsers[$user]->roles), t('Number of roles matches'));
      foreach ($dpu->roles as $k => $v) {
        $this->assert(isset($this->namedUsers[$user]->roles[$v]), t('User has role \'@role\'', array('@role' => $v)));
      }
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // User 4 is not active, check if it is not returned
    try {
      $user = 'User 4';
      $dpu = new DrupalUserInfo();
      $dpu->request($user, NULL, TRUE);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user, NULL, TRUE)")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == FALSE, t('Server did not return user \'@user\' as configured (valid field is FALSE)', array('@user' => $user)));
      $this->assert(drupal_strtolower($dpu->getError()) == 'user not found', t('Server returnd error "User not found" for user \'@user\' as configured', array('@user' => $user)));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // User 4 is not active, check if it IS returned if param $active == FALSE
    try {
      $user = 'User 4';
      $dpu = new DrupalUserInfo();
      $dpu->request($user, NULL, FALSE);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user, NULL, FALSE)")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == TRUE, t('Server did return data for user \'@user\' (valid field is TRUE)', array('@user' => 'User 4')));
      $this->assert($dpu->name == $user, t('User name matches)'));
      $this->assert(drupal_strtolower($dpu->getError()) == '', t('Server returnd no error message'));
      $this->assert(count($dpu->roles) == count($this->namedUsers[$user]->roles), t('Number of roles matches'));
      foreach ($dpu->roles as $k => $v) {
        $this->assert(isset($this->namedUsers[$user]->roles[$v]), t('User has role \'@role\'', array('@role' => $v)));
      }
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // Check if the user name <--> mail matching check works
    try {
      $user = 'User 1';
      $dpu = new DrupalUserInfo();
      $dpu->request($user, 'WRONG@example.com');
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user, 'WRONG@example.com')")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == FALSE, t('Server did not return user \'@user\' as configured (valid field is FALSE)', array('@user' => $user)));
      $this->assert(drupal_strtolower($dpu->getError()) == 'user not found', t('Server returnd error "User not found" for user \'@user\' as user name and email do not match', array('@user' => $user)));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }
  }

}


/**
 * Configuration form test case
 */
class UserDataConnectorTestCase_Auth extends UserDataConnectorTestCaseBase {

  /**
   * Test case information
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Client class DrupalUserAuth',
      'description' => 'Client class DrupalUserAuth test' ,
      'group' => self::getInfoGroup(),
    );
  }

  /**
   * User listing client class / server checking
   * Note: SimpleTest account objects cannot have the administrator group
   */
  public function testUserAuth() {
    if (!$this->configureModule()) return FALSE;

    // Run the test
    require_once(DRUPAL_ROOT . '/sites/all/modules/udc/client/DrupalUserAuth.class.inc');
    DrupalUserBase::setToken(self::getFormFieldDefaults('udc_token'));

    // Admin is in ignore list
    try {
      $user = 'admin';
      $dpu = new DrupalUserAuth();
      $dpu->request($user, $this->namedUsers[$user]->pass_raw);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user, {$this->namedUsers[$user]->pass_raw})")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == FALSE, t('Server did not return user \'@user\' as configured (valid field is FALSE)', array('@user' => $user)));
      $this->assert(drupal_strtolower($dpu->getError()) == 'user not found', t('Server returnd error "User not found" for user \'@user\' as configured', array('@user' => $user)));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // User 4 not active
    try {
      $user = 'User 4';
      $dpu = new DrupalUserAuth();
      $dpu->request($user, $this->namedUsers[$user]->pass_raw);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user, {$this->namedUsers[$user]->pass_raw})")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == FALSE, t('Server did not return user \'@user\' as configured (valid field is FALSE)', array('@user' => $user)));
      $this->assert(drupal_strtolower($dpu->getError()) == 'user not found', t('Server returnd error "User not found" for user \'@user\' as configured', array('@user' => $user)));
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // User 1 not in ignore list
    try {
      $user = 'User 1';
      $dpu = new DrupalUserAuth();
      $dpu->request($user, $this->namedUsers[$user]->pass_raw);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user, {$this->namedUsers[$user]->pass_raw})")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == TRUE, t('Server did return data for user \'@user\' (valid field is TRUE)', array('@user' => $user)));
      $this->assert($dpu->name == $user, t('User name matches'));
      $this->assert(drupal_strtolower($dpu->getError()) == '', t('Server returnd no error message'));
      $this->assert(count($dpu->roles) == count($this->namedUsers[$user]->roles), t('Server returnd no error message'));
      foreach ($dpu->roles as $k => $v) {
        $this->assert(isset($this->namedUsers[$user]->roles[$v]), t('User has role \'@role\'', array('@role' => $v)));
      }
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }

    // User 4 not active, but param $active == FALSE
    try {
      $user = 'User 4';
      $dpu = new DrupalUserAuth();
      $dpu->request($user, $this->namedUsers[$user]->pass_raw, NULL, FALSE);
      $this->pass(t('Received server data for @t', array('@t' => "dpu->request($user, {$this->namedUsers[$user]->pass_raw}, NULL, FALSE)")));
      $this->verbose('<pre>' . t('@p', array('@p' => print_r($dpu, TRUE))) . '</pre>');
      $this->assert($dpu->valid == TRUE, t('Server did return data for user \'@user\' (valid field is TRUE)', array('@user' => $user)));
      $this->assert($dpu->name == $user, t('User name matches'));
      $this->assert(drupal_strtolower($dpu->getError()) == '', t('Server returnd no error message'));
      $this->assert(count($dpu->roles) == count($this->namedUsers[$user]->roles), t('Server returnd no error message'));
      foreach ($dpu->roles as $k => $v) {
        $this->assert(isset($this->namedUsers[$user]->roles[$v]), t('User has role \'@role\'', array('@role' => $v)));
      }
    } catch (Exception $e) {
      $this->fail('<pre>' . t('Unexpected client object exception: @t', array('@t' => $e->getMessage())) . "\n\n" . t('@t', array('@t' => $dpu->getDebug())) . '</pre>');
    }
  }
}


