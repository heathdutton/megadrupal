<?php
/**
 * @file
 * The Shared Content UI module.
 */

/**
 * Implements hook_menu().
 *
 * @see sharedcontent_ui_clear_queue()
 */
function sharedcontent_ui_menu() {

  $menu['admin/content/sharedcontent/queue/clear/%'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access sharedcontent ui'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharedcontent_ui_clear_queue', 5),
  );

  $menu['admin/content/sharedcontent/dashboard/unselect'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access sharedcontent ui'),
    'page callback' => 'sharedcontent_ui_active_local_content_unset',
  );

  return $menu;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Add preprocess functions to views.
 */
function sharedcontent_ui_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['views_view_table'])) {
    // Add preprocess function in order to mark the current selected
    // row and to add action links.
    $theme_registry['views_view_table__sharedcontent_local_content'] = $theme_registry['views_view_table'];
    $theme_registry['views_view_table__sharedcontent_local_content']['preprocess functions'][] = 'sharedcontent_ui_preprocess_sharedcontent_local_content';

    // Add preprocess function in order to add action links to the remote content views.
    $theme_registry['views_view_table__sharedcontent_remote_content'] = $theme_registry['views_view_table'];
    $theme_registry['views_view_table__sharedcontent_remote_content']['preprocess functions'][] = 'sharedcontent_ui_preprocess_sharedcontent_remote_content';

    // Add preprocess function in order to add action links to the current linkings.
    $theme_registry['views_view_table__sharedcontent_references'] = $theme_registry['views_view_table'];
    $theme_registry['views_view_table__sharedcontent_references']['preprocess functions'][] = 'sharedcontent_ui_preprocess_sharedcontent_current';

    // Add preprocess function in order to add action links to the assignments.
    $theme_registry['views_view_table__assignments'] = $theme_registry['views_view_table'];
    $theme_registry['views_view_table__assignments']['preprocess functions'][] = 'sharedcontent_ui_preprocess_sharedcontent_assignments';
  }
}

/**
 * The the field instance label for a given field name based on the current selected local content.
 *
 * @param $field_name
 *   Name of the field
 * @return
 *   Label of the field as shown in the local selected content.
 */
function _sharedcontent_ui_field_label($field_name) {
  $active_content = sharedcontent_ui_get_dashboard_active_local_content();
  $field_info = field_info_instance($active_content->type(), $field_name, $active_content->getBundle());
  return $field_info['label'];
}

/**
 * Implements hook_views_query_alter().
 *
 * Alters dashboard's remote index record list: remove existing index record references.
 *
 * @see sharedcontent_ui_get_dashboard_active_local_content()
 * @see sharedcontent_client_get_all_shared_content_field_names()
 */
function sharedcontent_ui_views_query_alter(view &$view, &$query) {
  $current_local_content = sharedcontent_ui_get_dashboard_active_local_content();

  if ($view->name == 'sharedcontent_references' && $view->current_display == 'current') {
    // Active local content node references. Get all referenced indexed from all Shared Content fields.
    if (!$current_local_content) {
      // No active selected local content.
      $query->add_where(0, 'FALSE');
      return;
    }

    // All Shared Content fields.
    $shared_content_field_names = sharedcontent_client_get_all_shared_content_field_names();

    // Traverse through the Shared Content field values.
    $index_reference_ids = array();
    foreach ($shared_content_field_names as $shared_content_field_name) {
      if (isset($current_local_content->value()->{$shared_content_field_name})) {
        foreach ($current_local_content->value()->{$shared_content_field_name} as $field_values) {
          foreach ($field_values as $field_value) {
            $index_reference_ids[] = $field_value['target_id'];
          }
        }
      }
    }

    // Filter views.
    if (!empty($index_reference_ids)) {
      $query->add_where(0, 'id', $index_reference_ids, 'IN');
    }
    else {
      // No referenced index record yet.
      $query->add_where(0, 'FALSE');
      return;
    }
  }
}

/**
 * Unsets the current selected local content and redirects to the ShareBoard.
 */
function sharedcontent_ui_active_local_content_unset() {
  unset($_SESSION['sharedcontent_ui_active_index_record']);
  drupal_goto('admin/content/sharedcontent/dashboard');
}

/**
 * Helper function to get the active selected local content on the dashboard.
 *
 * @return object|FALSE
 */
function sharedcontent_ui_get_dashboard_active_local_content() {
  $index = sharedcontent_ui_selected_sharedcontent_index();
  if ($index) {
    $entity = entity_load_single($index->entity_type, $index->entity_id);
    return entity_metadata_wrapper($index->entity_type, $entity);
  }

  return FALSE;
}

/**
 * Gets the current selected sharedcontent_index.
 *
 * @return SharedContentIndex|FALSE
 */
function sharedcontent_ui_selected_sharedcontent_index() {
  $index = & drupal_static(__FUNCTION__);
  if (!$index && $index !== FALSE) {
    $id = FALSE;
    $index = FALSE;

    if (arg(2) == 'sharedcontent' && arg(3) == 'dashboard' && (int) arg(4) > 0) {
      $id = arg(4);
    }
    elseif (isset($_SESSION['sharedcontent_ui_active_index_record'])) {
      $id = $_SESSION['sharedcontent_ui_active_index_record'];
    }

    if ($id) {
      $index = entity_load_single('sharedcontent_index', $id);

      if (!$index) {
        unset($_SESSION['sharedcontent_ui_active_index_record']);
      }
    }
  }
  return $index;
}

/**
 * Gets the id of the current selected sharedcontent_index.
 *
 * This function calls for sharedcontent_ui_selected_sharedcontent_index_id()
 * and only returns the record id if any. This is necessary for this
 * ensures that we return an id only if a valid record exists.
 *
 * @return int|FALSE
 */
function sharedcontent_ui_selected_sharedcontent_index_id() {
  $index = sharedcontent_ui_selected_sharedcontent_index();
  return $index ? $index->id : FALSE;
}

/**
 * Implements hook_permission().
 */
function sharedcontent_ui_permission() {
  return array(
    'access sharedcontent ui' => array(
      'title' => t('Access Shared Content ShareBoard'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function sharedcontent_ui_init() {
  $is_dashboard_page = arg(2) == 'sharedcontent';

  if ($is_dashboard_page) {
    // Add necessary js and css to the dashboard page only.
    $path = drupal_get_path('module', 'sharedcontent_ui');
    drupal_add_js($path . '/js/sharedcontent_ui.js');
    drupal_add_css($path . '/css/sharedcontent_ui.css');
    drupal_add_js(drupal_get_path('module', 'sharedcontent_client') . '/js/overlay.js');

    // Getting the selected index will ensure that it wil get stored
    // in the session.
    sharedcontent_ui_selected_sharedcontent_index();
  }
}

/**
 * Implements hook_block_info().
 */
function sharedcontent_ui_block_info() {
  return array(
    // Refresh index link block.
    'sharedcontent_ui_index_refresh' => array(
      'info' => t('Shared Content UI - Refresh Index'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function sharedcontent_ui_block_view($delta = '') {
  // Refresh index link block.
  if ($delta == 'sharedcontent_ui_index_refresh') {
    $format = variable_get('sharedcontent_format_date_last_sync', 'short');
    $data = array();
    $data['all'] = array(
      '@name' => t('All'),
      '@sync' => t('never'),
    );
    $oldest_sync = PHP_INT_MAX;
    foreach (sharedcontent_get_connection_labels(TRUE, FALSE) as $key => $name) {
      $sync = variable_get('sharedcontent_last_sync_' . $key);
      $sync = strtotime($sync);
      if ($sync < $oldest_sync) {
        $oldest_sync = $sync;
      }
      $data[$key] = array(
        '@name' => $name,
        '@sync' => format_date($sync, $format),
      );
    }

    if ($oldest_sync) {
      $data['all']['@sync'] = format_date($oldest_sync, $format);
    }

    foreach ($data as $key => $values) {
      $links[$key] = array(
        'title' => t('@name (@sync)', $values),
        'href' => 'admin/config/services/sharedcontent/client/synchronize/' . $key,
        'query' => drupal_get_destination(),
      );
    }

    return array(
      'subject' => t('Refresh Shared Content index'),
      'content' => array(
        '#theme' => 'links__ctools_dropbutton',
        '#links' => $links,
      ),
    );
  }
}

/**
 * Preprocess function for the local content views.
 *
 * Add active class to the row of the selected local content.
 * Add dequeue links if the queue display is rendered.
 *
 * @todo Do not rely on the presence of certain values for someone
 * could have changed the view. So we should use some query alter to
 * ensure the presence of the values we need in here.
 */
function sharedcontent_ui_preprocess_sharedcontent_local_content(&$data) {
  $selected_index_id = sharedcontent_ui_selected_sharedcontent_index_id();

  $column_name = 'actions';
  $column_class = 'views-field views-field-' . $column_name;

  module_load_include('inc', 'views', 'includes/admin');
  views_ui_add_admin_css();

  foreach ($data['rows'] as $key => $row) {
    $index = $data['result'][$key]->_entity_properties;
    $entity = $data['result'][$key]->entity;
    $links = array();

    // @todo Also check for entity type. But first we need to make
    // this information available.
    $is_selected = $index['entity object']->id == $selected_index_id;
    if ($is_selected) {
      $data['row_classes'][$key][] = 'active';
    }

    if (_sharedcontent_entity_is_linkable($index['entity object']->entity_type)) {
      if ($is_selected) {
        $links['unselect'] = array(
          'title' => t('Unselect'),
          'href' => 'admin/content/sharedcontent/dashboard/unselect',
        );
      }
      else {
        $links['select'] = array(
          'title' => t('Select'),
          'href' => 'admin/content/sharedcontent/dashboard/' . $index['entity object']->id,
        );
      }
    }

    $print_flag =
      // We are on the all or queue display
      in_array($data['view']->current_display, array('all', 'queue'))
        // We do have a valid flag.
        && ($flag = flag_get_flag('sharedcontent_local_queue'))
        // User has permission to use this flag.
        && $flag->access($entity);

    if ($print_flag) {
      // Flag
      if (!$flag->is_flagged($entity) && $flag->access($entity, 'flag')) {
        $links['queue'] = flag_flag_link($flag, 'flag', $entity);
        $links['queue']['title'] = t('Queue');
      }
      // Unflag
      elseif ($flag->is_flagged($entity) && $flag->access($entity, 'unflag')) {
        $links['dequeue'] = flag_flag_link($flag, 'unflag', $entity);
        $links['dequeue']['title'] = t('Dequeue');
      }
    }

    $data['rows'][$key][$column_name] = theme('links__ctools_dropbutton', array('links' => $links));
    $data['field_classes'][$column_name][$key] = $column_class;
    $data['field_attributes'][$column_name][$key] = array();

    $data['fields'][$column_name] = $column_name;
    $data['header_classes'][$column_name] = $column_class;
    $data['header'][$column_name] = t('Actions');
  }
}

/**
 * Preprocess function for the remote content views.
 *
 * Add dequeue links if the queue display is rendered.
 * Add link action for each sharedcontent_reference field configured to
 * be used in variable sharedcontent_reference_field.
 *
 * @todo Do not rely on the presence of certain values for someone
 * could have changed the view. So we should use some query alter to
 * ensure the presence of the values we need in here.
 *
 * @see sharedcontent_ui_get_dashboard_active_local_content()
 * @see sharedcontent_client_get_all_shared_content_field_names()
 */
function sharedcontent_ui_preprocess_sharedcontent_remote_content(&$data) {
  // Render action links only for certain displays.
  $display_actions = in_array($data['view']->current_display, array(
    'queue',
    'all',
    'suggestions',
    'linked',
  ));

  if ($display_actions) {
    $column_name = 'actions';
    $column_class = 'views-field views-field-' . $column_name;

    module_load_include('inc', 'views', 'includes/admin');
    views_ui_add_admin_css();

    foreach ($data['rows'] as $key => $row) {
      $index = $data['result'][$key]->_entity_properties;
      $entity = $data['result'][$key]->entity;
      $links = array();

      $source_id = sharedcontent_ui_selected_sharedcontent_index_id();
      $local_content = sharedcontent_ui_get_dashboard_active_local_content();
      $referenceable = in_array($index['status'], array(
        SHAREDCONTENT_INDEX_STATUS_VISIBLE,
        SHAREDCONTENT_INDEX_STATUS_LINKABLE
      ));

      if ($local_content && $referenceable) {
        // Assign buttons to all sharedcontent fields.
        $sharedcontent_field_names = sharedcontent_client_get_all_shared_content_field_names();
        foreach ($sharedcontent_field_names as $sharedcontent_field_name) {
          if (isset($local_content->{$sharedcontent_field_name})) {
            $label = _sharedcontent_ui_field_label($sharedcontent_field_name);
            $links[$sharedcontent_field_name] = array(
              'title' => t('Link to field @field', array('@field' => $label)),
              'href' => 'admin/content/sharedcontent/link/' . $source_id . '/' . $entity,
              'query' => drupal_get_destination(),
            );
          }
        }
      }

      // Simplify title for link action if there is only one.
      if (count($links) == 1) {
        $link_keys = array_keys($links);
        $link_key = $link_keys[0];
        $links[$link_key]['title'] = t('Link');
      }

      $print_flag =
        // We are on the all or queue display
        in_array($data['view']->current_display, array('all', 'queue'))
          // We do have a valid flag.
          && ($flag = flag_get_flag('sharedcontent_remote_queue'))
          // User has permission to use this flag.
          && $flag->access($entity);

      if ($print_flag) {
        // Flag
        if (!$flag->is_flagged($entity) && $flag->access($entity, 'flag')) {
          $links['queue'] = flag_flag_link($flag, 'flag', $entity);
          $links['queue']['title'] = t('Queue');
        }
        // Unflag
        elseif ($flag->is_flagged($entity) && $flag->access($entity, 'unflag')) {
          $links['dequeue'] = flag_flag_link($flag, 'unflag', $entity);
          $links['dequeue']['title'] = t('Dequeue');
        }
      }

      $data['rows'][$key][$column_name] = theme('links__ctools_dropbutton', array('links' => $links));
      $data['field_classes'][$column_name][$key] = $column_class;
      $data['field_attributes'][$column_name][$key] = array();
    }

    $data['fields'][$column_name] = $column_name;
    $data['header_classes'][$column_name] = $column_class;
    $data['header'][$column_name] = t('Actions');
  }
}

/**
 * @todo doc
 *
 * @see sharedcontent_client_get_all_shared_content_field_names()
 * @see sharedcontent_ui_get_dashboard_active_local_content()
 * @see _sharedcontent_ui_field_label()
 */
function sharedcontent_ui_preprocess_sharedcontent_current(&$data) {

  $column_name = 'actions';
  $column_class = 'views-field views-field-' . $column_name;

  module_load_include('inc', 'views', 'includes/admin');
  views_ui_add_admin_css();

  foreach ($data['rows'] as $key => $row) {
    $index_record = $data['result'][$key];
    $links = array();

    $source_id = sharedcontent_ui_selected_sharedcontent_index_id();
    $local_content = sharedcontent_ui_get_dashboard_active_local_content();
    $sharedcontent_field_names = sharedcontent_client_get_all_shared_content_field_names();

    // All Shared Content fields.
    foreach ($sharedcontent_field_names as $sharedcontent_field_name) {
      // If exists.
      if (isset($local_content->value()->{$sharedcontent_field_name})) {
        // All sharedcontent field language values.
        foreach ($local_content->value()->{$sharedcontent_field_name} as $languages) {
          // All sharedcontent fields.
          foreach ($languages as $record_ids) {
            // All field values.
            foreach ($record_ids as $record_id) {
              if ($index_record->id == $record_id) {
                // If the index record is referenced in that particular field.
                $label = _sharedcontent_ui_field_label($sharedcontent_field_name);
                $links[$sharedcontent_field_name] = array(
                  'title' => t('Unlink from field @field', array('@field' => $label)),
                  'href' => 'admin/content/sharedcontent/unlink/' . $source_id . '/' . $index_record->id,
                  'query' => drupal_get_destination(),
                );
                $links[$sharedcontent_field_name]['query']['field'] = $sharedcontent_field_name;
              }
            }
          }
        }
      }
    }

    // Simplify title for link action if there is only one.
    if (count($links) == 1) {
      $link_keys = array_keys($links);
      $link_key = $link_keys[0];
      $links[$link_key]['title'] = t('Unlink');
    }

    $data['rows'][$key][$column_name] = theme('links__ctools_dropbutton', array('links' => $links));
    $data['field_classes'][$column_name][$key] = $column_class;
    $data['field_attributes'][$column_name][$key] = array();
  }

  $data['fields'][$column_name] = $column_name;
  $data['header_classes'][$column_name] = $column_class;
  $data['header'][$column_name] = t('Actions');
}

/**
 * Preprocess function to add action links to assignments view.
 *
 * Add ctools dropbutton links to each row of a assignment view.
 *
 * @todo Do not rely on the presence of certain values for someone
 * could have changed the view. So we should use some query alter to
 * ensure the presence of the values we need in here.
 */
function sharedcontent_ui_preprocess_sharedcontent_assignments(&$data) {
  $column_name = 'actions';
  $column_class = 'views-field views-field-' . $column_name;

  module_load_include('inc', 'views', 'includes/admin');
  views_ui_add_admin_css();

  $linking = array();
  foreach ($data['result'] as $result) {
    $source_url = $result->sharedcontent_index_sharedcontent_assignment_url;
    $target_url = $result->sharedcontent_index_sharedcontent_assignment_1_url;
    $linking[$source_url][$target_url] = $target_url;
  }

  foreach ($data['rows'] as $key => $row) {
    $assignment = $data['result'][$key];
    $links = array();

    $source_is_local = $assignment->sharedcontent_index_sharedcontent_assignment_origin == SHAREDCONTENT_INDEX_BUNDLE_LOCAL;
    $source_is_reachable = $assignment->sharedcontent_index_sharedcontent_assignment_status != SHAREDCONTENT_INDEX_STATUS_UNREACHABLE;
    $source_id = $assignment->sharedcontent_index_sharedcontent_assignment_id;
    $target_is_local = $assignment->sharedcontent_index_sharedcontent_assignment_1_origin == SHAREDCONTENT_INDEX_BUNDLE_LOCAL;
    $target_id = $assignment->sharedcontent_assignment_target_id;
    $link_exists = isset($linkings[$assignment->sharedcontent_index_sharedcontent_assignment_1_url])
      && in_array($assignment->sharedcontent_index_sharedcontent_assignment_url, $linkings[$assignment->sharedcontent_index_sharedcontent_assignment_1_url]);

    if ($target_is_local && $source_is_reachable && !$link_exists) {
      // @todo add a link for all reference fields available.
      $links['link_back'] = array(
        'title' => t('Link Back'),
        'href' => 'admin/content/sharedcontent/link/' . $target_id . '/' . $source_id,
        'query' => drupal_get_destination(),
      );
    }

    if ($source_is_local) {
      $links['show_source'] = array(
        'title' => t('Show source on ShareBoard'),
        'href' => 'admin/content/sharedcontent/dashboard/' . $source_id,
      );
    }

    if ($target_is_local) {
      $links['show_target'] = array(
        'title' => t('Show target on ShareBoard'),
        'href' => 'admin/content/sharedcontent/dashboard/' . $target_id,
      );
    }

    $actions = array(
      '#theme' => 'links__ctools_dropbutton',
      '#attributes' => array(
        'class' => array('horizontal', 'right', 'links', 'actions'),
      ),
      '#links' => $links,
    );
    $data['rows'][$key][$column_name] = drupal_render($actions);

    $data['field_classes'][$column_name][$key] = $column_class;
    $data['field_attributes'][$column_name][$key] = array();
  }

  $data['#attached']['js'][] = drupal_get_path('module', 'sharedcontent_client') . '/js/overlay.js';
  $data['fields'][$column_name] = $column_name;
  $data['header_classes'][$column_name] = $column_class;
  $data['header'][$column_name] = t('Actions');
}

/**
 * Implements hook_views_api().
 */
function sharedcontent_ui_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_data().
 *
 * Adds a custom filter for selecting only content types of nodes with Shared Content field attached to it.
 *
 * @see SharedContentCapableContentTypes
 * @see SharedContentIndexAssigned
 * @see SharedContentIndexSelf
 * @see SharedContentQueuedRemoteContent
 */
function sharedcontent_ui_views_data() {

  $data['search_api_index_sharedcontent']['assignment_filter'] = array(
    'group' => t('Shared Content'),
    'title' => t('Is assigned to selected local content'),
    'help' => t('Filters the Shared Content index for entities assigned to the selected local content.'),
    'real field' => 'uuid',
    'filter' => array(
      'handler' => 'SharedContentIndexAssigned',
    ),
  );

  $data['search_api_index_sharedcontent']['self_filter'] = array(
    'group' => t('Shared Content'),
    'title' => t('Is selected local content'),
    'help' => t('Filters the Shared Content index for the selected local content.'),
    'real field' => 'uuid',
    'filter' => array(
      'handler' => 'SharedContentIndexSelf',
    ),
  );

  return $data;
}

/**
 * Implements hook_views_plugins().
 *
 * @see SharedContentIndexTags
 */
function sharedcontent_ui_views_plugins() {
  return array(
    'module' => 'sharedcontent_ui',
    'argument default' => array(
      'sharedcontent_index_tags' => array(
        'title' => t('Shared content tags'),
        'handler' => 'SharedContentIndexTags',
        'parent' => 'fixed',
      ),
      'sharedcontent_index_selected' => array(
        'title' => t('Selected Shared Content Index Record'),
        'handler' => 'SharedContentIndexSelectedRecord',
        'parent' => 'fixed',
      ),
    ),
  );
}

/**
 * Confirmation form to clear the remote content queue.
 *
 * @see sharedcontent_ui_clear_queue_submit()
 */
function sharedcontent_ui_clear_queue($form, &$form_state, $queue) {
  $form['queue'] = array(
    '#type' => 'value',
    '#value' => $queue
  );
  $description = t('If you confirm, the @queue content queue will be emptied.', array(
    '@queue' => $queue,
  ));
  return confirm_form($form, 'Do you realy whant to proceed?', drupal_get_destination(), $description);
}

/**
 * Form submit to clear the remote content queue.
 *
 * @see sharedcontent_ui_clear_queue_submit()
 *
 * @todo Use batch api.
 */
function sharedcontent_ui_clear_queue_submit($form, &$form_state) {
  $count = NULL;
  $queue = $form_state['values']['queue'];
  $flagings = flag_get_flagged_content($queue);

  if (!empty($flagings)) {
    $count = count($flagings);
    foreach ($flagings as $flaging) {
      flag('unflag', $queue, $flaging->content_id);
    }
  }
  else {
    drupal_set_message(t('No valid queue was given. No action was taken.'), 'error');
  }

  if (!is_null($count)) {
    drupal_set_message(t('@count entries where removed from @queue content queue.', array(
      '@count' => $count,
      '@queue' => $queue,
    )));
  }
  else {
    drupal_set_message(t('No entries found to remove from @queue content queue.', array(
      '@queue' => $queue,
    )));
  }
}

/**
 * Implements hook_form_alter().
 *
 * @see http://drupal.org/node/1109980#comment-6419894
 */
function sharedcontent_ui_form_views_exposed_form_alter(&$form, &$form_state) {
  // Workaround, because on a Ajax-Request the url of the current panel
  // page gets lost and "/" is used instead.
  $views = array(
    'sharedcontent_local_content',
    'sharedcontent_remote_content',
  );

  $is_shareboard_view = isset($form_state['view']->name)
    && in_array($form_state['view']->name, $views);

  if ($is_shareboard_view && $form['#action'] = '/') {
    // Fix action URL.
    $form['#action'] = '/' . $_GET['q'];
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function sharedcontent_ui_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'access') {
    return 'plugins/access';
  }
}
