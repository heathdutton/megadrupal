<?php

/**
 * @file
 * Hooks and callback functions for the Shared Content chapters module.
 *
 * http://www.longtailvideo.com/support/jw-player/jw-player-for-flash-v5/17248/providing-video-chapter-markers/
 */

/**
 * Implements hook_form_field_ui_field_overview_form_alter().
 *
 * Add additional input fields to the field collection field overview
 * form allowing the site administrator to configure if the given
 * field collection is to be treated as chapter or not and how to index
 * it if it is a chapter.
 */
function sharedcontent_chapters_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  // Only alter on field collections.
  if ($form['#entity_type'] != 'field_collection_item') {
    return;
  }

  // Only alter if the field collection is indexed.
  $indexed_entities = variable_get('sharedcontent_indexed_entities', array());
  if (!(isset($indexed_entities['field_collection_item'])
    && $indexed_entities['field_collection_item'][$form['#bundle']])
  ) {
    return;
  }

  $form['chapters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shared Content Chapters'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['chapters']['is_chapter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is Shared Content Chapter'),
    '#description' => t('By checking this option, this field collection will be indexed as chapter index.'),
    '#default_value' => variable_get('sharedcontent_chapter_' . $form['#bundle'], FALSE),
  );

  $options = array();
  $options[NULL] = t('- None -');
  $instances = field_info_instances('field_collection_item', $form['#bundle']);
  foreach ($instances as $key => $data) {
    $options[$key] = $data['label'];
  }

  // @todo Make keywords a checkbox field and allow to take multiple
  // fields into the keywords.
  foreach (array('title', 'keywords') as $attribute) {
    $var_name = 'sharedcontent_chapter_' . $form['#bundle'] . '_field_' . $attribute;
    $replacements = array('@attr' => t(drupal_ucfirst($attribute)));

    $form['chapters'][$attribute] = array(
      '#type' => 'select',
      '#title' => t('@attr field', $replacements),
      '#options' => $options,
      '#default_value' => variable_get($var_name, NULL),
      '#description' => t('Select the field that will be indexed as @attr.', $replacements),
      '#states' => array(
        'visible' => array(
          'input[name="is_chapter"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  $var_name = 'sharedcontent_chapter_' . $form['#bundle'] . '_field_url';

  $form['chapters']['url_conf'] = array(
    '#type' => 'textfield',
    '#title' => t('URL configuration'),
    '#description' => t('Configure how to override the url. This can be a function name or you can use tokens. Leave blank if no url altering should happen.'),
    '#default_value' => variable_get($var_name, NULL),
    '#size' => 60,
    '#maxlength' => 128,
    '#states' => array(
      'visible' => array(
        'input[name="is_chapter"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['chapters']['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These tokens can be used as replacment paterns.'),
  );

  $form['chapters']['token_help']['browser'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('sharedcontent_index', 'field_collection_item'),
  );

  $form['#submit'][] = 'sharedcontent_chapters_form_field_ui_field_overview_form_submit';
}

/**
 * Submit callback for field overview form
 *
 * @see sharedcontent_chapters_form_field_ui_field_overview_form_alter()
 */
function sharedcontent_chapters_form_field_ui_field_overview_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $values = $form_state['values'];
  if ($values['is_chapter']) {
    variable_set('sharedcontent_chapter_' . $form['#bundle'], TRUE);

    foreach (array('title', 'keywords') as $attribute) {
      $var_name = 'sharedcontent_chapter_' . $form['#bundle'] . '_field_' . $attribute;
      variable_set($var_name, $values[$attribute]);
    }

    $var_name = 'sharedcontent_chapter_' . $form['#bundle'] . '_field_url';
    variable_set($var_name, $values['url_conf']);
  }
  else {
    variable_set('sharedcontent_chapter_' . $form['#bundle'], FALSE);
  }
}

/**
 * Implements hook_entity_presave()
 *
 * Invoke alter hook and rule event so modules can react on possible
 * chaptering based on field collection.
 */
function sharedcontent_chapters_sharedcontent_index_presave($index) {
  // Skip none collection items.
  if ($index->entity_type != 'field_collection_item') {
    return;
  }

  // Get item entity.
  $item = entity_load_single($index->entity_type, $index->entity_id);
  // Skip if we get an empty result.
  if (is_null($item)) {
    return;
  }

  // Skip none chapter items.
  if (!variable_get('sharedcontent_chapter_' . $item->field_name, FALSE)) {
    return;
  }

  // Generically get title and keywords.
  foreach (array('title', 'keywords') as $attribute) {
    $var_name = 'sharedcontent_chapter_' . $item->field_name . '_field_' . $attribute;
    $field_name = variable_get($var_name, FALSE);
    if ($field_name && $field_data = field_get_items($index->entity_type, $item, $field_name, $index->language)) {
      $value = array();
      foreach ($field_data as $data) {
        if (isset($data['value'])) {
          $value[] = $data['value'];
        }
        elseif (isset($data['term'])) {
          $value[] = $data['term']['name'];
        }
        elseif (isset($data['tid'])) {
          $term = taxonomy_term_load($data['tid']);
          if ($term) {
            $value[] = $term->name;
          }
        }
      }
      $index->$attribute = implode(' ', $value);
    }
  }

  // Get parent entity.
  if ($index->entity_type == 'field_collection_item') {
    $parent = field_collection_item_get_host_entity($item);
    // Field collection items are saved before their host entity.
    // In case of a new created entity this host entity does not yet
    // exists. The following code makes sure we do have a host entity
    // when indexing field collection items as chapters.
    if (!$parent->value()) {
      if (variable_get('sharedcontent_queue_indexed_entities', FALSE)) {
        // We do not need to make sure to have a parent entity in this
        // request for the indexing will happen in a cron run where the
        // host entity will exist.
        // So we skipp here and expect cron to care about the rest.
        return;
      }
      // This might be an edge case but a chapter might be generated without
      // an existing parent record. So we make this obvious.
      if (empty($index->parent_uuid)) {
        $index->parent_uuid = SHAREDCONENT_CHAPTER_ORPHAN;
      }
      elseif ($index->parent_uuid == SHAREDCONENT_CHAPTER_ORPHAN) {
        // We came here the second time in one request and the field
        // collection still has no parent item.
        // We need to exit here in order to prevent possible loop in
        // shutdown functions.
        return;
      }
      // We are missing hook_entity_postsave().
      // In to make sure we have a consistent index we delay the indexing
      // of chapters with a shutdown function where we have some guarantee
      // that the host entity does exist.
      drupal_register_shutdown_function('sharedcontent_chapters_prevent_orphaned_chapters', $index->entity_id);
      return;
    }
  }

  // Generically get an altered url.
  $var_name = 'sharedcontent_chapter_' . $item->field_name . '_field_url';
  // The variable is intended to contain either a the name of a callback
  // function or a pattern based on tokens
  // @todo Implement token handling for url altering.
  $url_conf = variable_get($var_name, FALSE);
  if (!empty($url_conf)) {
    if (function_exists($url_conf)) {
      $index->url = call_user_func_array($url_conf, array($item, $parent));
    }
    else {
      $url = token_replace(
        $url_conf,
        array(
          'sharedcontent_index' => $index,
          $index->entity_type => $item,
          $parent->type() => $parent->value(),
        ),
        array(
          // @todo: This leads to Notice: Trying to get property of non-object.
//          'language' => $index->language,
        )
      );
      $index->url = $url;
    }
  }

  // Link with parent record.
  $parent_index = sharedcontent_index_load_by_entity_id(
    entity_id($parent->type(), $parent->value()),
    $parent->type(),
    sharedcontent_entity_language($parent->value(), $parent->type())
  );


  // The parent index might not yet exist due to delayed indexing.
  // Queueing for later indexing.
  if (!is_object($parent_index)) {
    throw new SharedContentIndexingException(SHAREDCONTENT_ERROR_NO_PARENT_INDEX, array(
      'index' => $index,
      'entity' => $item,
      'parent entity' => $parent,
    ));
  }
  $index->parent_uuid = $parent_index->uuid;
  // The Chapter is supposed to be the same bundle as the parent.
  // For bundle in teh index record is only for Search and Display, we
  // are save to write in there what ever we like.
  $index->entity_bundle = $parent_index->entity_bundle;
  // Chapters does not have their own dates. We take the ones of the
  // parent instead.
  $index->entity_created = $parent_index->entity_created;
  $index->entity_changed = $parent_index->entity_changed;
}

/**
 * Prevent orphaned chapter records.
 *
 * This is some workaround for the missing hook_entity_postsave().
 *
 * We need to save trigger new save for new created field collection
 * items in order to make sure the url and parent_uuid alteration is
 * triggered with an existing parent. This parent does not exits while
 * when the item is saved initially.
 *
 * @param $id
 *   The id of teh field_collection_item to be resaved.
 *
 * @see sharedcontent_chapters_sharedcontent_index_presave()
 */
function sharedcontent_chapters_prevent_orphaned_chapters($id) {
  $item = field_collection_item_load($id, TRUE);
  sharedcontent_create_or_update_index_for_entity($item, 'field_collection_item');
}
