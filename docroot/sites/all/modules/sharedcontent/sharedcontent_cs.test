<?php
/**
 * @file
 * Scenario tests for Shared Content.
 */

class SharedContentCSTestsBase extends DrupalWebTestCase {

  public $baseDomain;

  /**
   * @todo doc
   */
  function setUp() {
    $this->baseDomain = variable_get('sc_testing_base_domain');
    $this->setup = TRUE;
  }

  /**
   * @todo doc
   */
  function tearDown() {

  }

  /**
   * @todo doc
   */
  protected function remoteClickLink($server_name, $label, $index = 0) {
    $base_url = 'http://' . $server_name . '.' . $this->baseDomain;
    $url_before = $this->getUrl();
    $urls = $this->xpath('//a[normalize-space(text())=:label]', array(':label' => $label));

    if (isset($urls[$index])) {
      $url_target = $this->getAbsoluteRemoteUrl($base_url, $urls[$index]['href']);
    }

    $this->assertTrue(isset($urls[$index]), t('Clicked link %label (@url_target) from @url_before', array(
      '%label' => $label,
      '@url_target' => $url_target,
      '@url_before' => $url_before
    )), t('Browser'));

    if (isset($url_target)) {
      return $this->drupalGet($url_target);
    }
    return FALSE;
  }

  /**
   * @todo doc
   */
  protected function remoteGet($server_name, $path, array $options = array(), array $headers = array()) {
    $base_url = 'http://' . $server_name . '.' . $this->baseDomain;
    return $this->drupalGet($this->getAbsoluteRemoteUrl($base_url, $path), $options, $headers);
  }

  /**
   * @todo doc
   */
  protected function getAbsoluteRemoteUrl($base_url, $path) {
    global $base_path;

    $parts = parse_url($path);
    if (empty($parts['host'])) {
      // Ensure that we have a string (and no xpath object).
      $path = (string) $path;
      // Strip $base_path, if existent.
      $length = strlen($base_path);
      if (substr($path, 0, $length) === $base_path) {
        $path = substr($path, $length);
      }
      // Ensure that we have an absolute path.
      if ($path[0] !== '/') {
        $path = '/' . $path;
      }
      // Finally, prepend the $base_url.
      $path = $base_url . $path;
    }
    return $path;
  }

  /**
   * @todo doc
   */
  protected function remotePost($server_name, $path, $edit, $submit, array $options = array(), array $headers = array(), $form_html_id = NULL, $extra_post = NULL) {

    $base_url = 'http://' . $server_name . '.' . $this->baseDomain;

    $submit_matches = FALSE;
    $ajax = is_array($submit);

    if (!empty($path)) {
      $this->drupalGet($this->getAbsoluteRemoteUrl($base_url, $path), $options);
    }

    if ($this->parse()) {
      $edit_save = $edit;
      // Let's iterate over all the forms.
      $xpath = "//form";
      if (!empty($form_html_id)) {
        $xpath .= "[@id='" . $form_html_id . "']";
      }
      $forms = $this->xpath($xpath);
      foreach ($forms as $form) {
        // We try to set the fields of this form as specified in $edit.
        $edit = $edit_save;
        $post = array();
        $upload = array();
        $submit_matches = $this->handleForm($post, $edit, $upload, $ajax ? NULL : $submit, $form);

        $action = isset($form['action']) ?
          $this->getAbsoluteRemoteUrl($base_url, (string) $form['action']) :
          $this->getUrl();

        if ($ajax) {
          $action = $this->getAbsoluteRemoteUrl($base_url, (!empty($submit['path']) ? $submit['path'] : 'system/ajax'));
          // Ajax callbacks verify the triggering element if necessary, so while
          // we may eventually want extra code that verifies it in the
          // handleForm() function, it's not currently a requirement.
          $submit_matches = TRUE;
        }

        // We post only if we managed to handle every field in edit and the
        // submit button matches.
        if (!$edit && ($submit_matches || !isset($submit))) {
          $post_array = $post;
          if ($upload) {
            // TODO: cURL handles file uploads for us, but the implementation
            // is broken. This is a less than elegant workaround. Alternatives
            // are being explored at #253506.
            foreach ($upload as $key => $file) {
              $file = drupal_realpath($file);
              if ($file && is_file($file)) {
                $post[$key] = '@' . $file;
              }
            }
          }
          else {
            foreach ($post as $key => $value) {
              // Encode according to application/x-www-form-urlencoded
              // Both names and values needs to be urlencoded, according to
              // http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1
              $post[$key] = urlencode($key) . '=' . urlencode($value);
            }
            $post = implode('&', $post) . $extra_post;
          }
          $out = $this->curlExec(array(
            CURLOPT_URL => $action,
            CURLOPT_POST => TRUE,
            CURLOPT_POSTFIELDS => $post,
            CURLOPT_HTTPHEADER => $headers
          ));
          // Ensure that any changes to variables in the other thread are picked up.
          $this->refreshVariables();

          // Replace original page output with new output from redirected page(s).
          if ($new = $this->checkForMetaRefresh()) {
            $out = $new;
          }
          $this->verbose('POST request to: ' . $path .
            '<hr />Ending URL: ' . $this->getUrl() .
            '<hr />Fields: ' . highlight_string('<?php ' . var_export($post_array, TRUE), TRUE) .
            '<hr />' . $out);
          return $out;
        }
      }
      // We have not found a form which contained all fields of $edit.
      foreach ($edit as $name => $value) {
        $this->fail(t('Failed to set field @name to @value', array(
          '@name' => $name,
          '@value' => $value
        )));
      }
      if (!$ajax && isset($submit)) {
        $this->assertTrue($submit_matches, t('Found the @submit button', array('@submit' => $submit)));
      }
      $this->fail(t('Found the requested form fields at @path', array('@path' => $path)));
    }
  }

  /**
   * @todo doc
   */
  protected function remotePostAJAX($server_name, $path, $edit, $triggering_element, $ajax_path = NULL, array $options = array(), array $headers = array(), $form_html_id = NULL, $ajax_settings = NULL) {

    $base_url = 'http://' . $server_name . '.' . $this->baseDomain;

    if (!empty($path)) {
      $this->drupalGet($base_url . '/' . $path, $options);
    }

    $content = $this->content;
    $drupal_settings = $this->drupalSettings;

    // Get the Ajax settings bound to the triggering element.
    if (!isset($ajax_settings)) {
      if (is_array($triggering_element)) {
        $xpath = '//*[@name="' . key($triggering_element) . '" and @value="' . current($triggering_element) . '"]';
      }
      else {
        $xpath = '//*[@name="' . $triggering_element . '"]';
      }
      if (isset($form_html_id)) {
        $xpath = '//form[@id="' . $form_html_id . '"]' . $xpath;
      }
      $element = $this->xpath($xpath);
      $element_id = (string) $element[0]['id'];
      $ajax_settings = $drupal_settings['ajax'][$element_id];
    }

    // Add extra information to the POST data as ajax.js does.
    $extra_post = '';
    if (isset($ajax_settings['submit'])) {
      foreach ($ajax_settings['submit'] as $key => $value) {
        $extra_post .= '&' . urlencode($key) . '=' . urlencode($value);
      }
    }
    foreach ($this->xpath('//*[@id]') as $element) {
      $id = (string) $element['id'];
      $extra_post .= '&' . urlencode('ajax_html_ids[]') . '=' . urlencode($id);
    }
    if (isset($drupal_settings['ajaxPageState'])) {
      $extra_post .= '&' . urlencode('ajax_page_state[theme]') . '=' . urlencode($drupal_settings['ajaxPageState']['theme']);
      $extra_post .= '&' . urlencode('ajax_page_state[theme_token]') . '=' . urlencode($drupal_settings['ajaxPageState']['theme_token']);
      foreach ($drupal_settings['ajaxPageState']['css'] as $key => $value) {
        $extra_post .= '&' . urlencode("ajax_page_state[css][$key]") . '=1';
      }
      foreach ($drupal_settings['ajaxPageState']['js'] as $key => $value) {
        $extra_post .= '&' . urlencode("ajax_page_state[js][$key]") . '=1';
      }
    }

    // Unless a particular path is specified, use the one specified by the
    // Ajax settings, or else 'system/ajax'.
    if (!isset($ajax_path)) {
      $ajax_path = isset($ajax_settings['url']) ? $ajax_settings['url'] : 'system/ajax';
    }

    // Submit the POST request.
    $return = drupal_json_decode($this->remotePost($base_url, NULL, $edit, array(
      'path' => $ajax_path,
      'triggering_element' => $triggering_element
    ), $options, $headers, $form_html_id, $extra_post));

    // Change the page content by applying the returned commands.
    if (!empty($ajax_settings) && !empty($return)) {
      // ajax.js applies some defaults to the settings object, so do the same
      // for what's used by this function.
      $ajax_settings += array(
        'method' => 'replaceWith',
      );
      // DOM can load HTML soup. But, HTML soup can throw warnings, suppress
      // them.
      $dom = new DOMDocument();
      @$dom->loadHTML($content);
      // XPath allows for finding wrapper nodes better than DOM does.
      $xpath = new DOMXPath($dom);
      foreach ($return as $command) {
        switch ($command['command']) {
          case 'settings':
            $drupal_settings = drupal_array_merge_deep($drupal_settings, $command['settings']);
            break;

          case 'insert':
            $wrapperNode = NULL;
            // When a command doesn't specify a selector, use the
            // #ajax['wrapper'] which is always an HTML ID.
            if (!isset($command['selector'])) {
              $wrapperNode = $xpath
                ->query('//*[@id="' . $ajax_settings['wrapper'] . '"]')
                ->item(0);
            }
            // @todo Ajax commands can target any jQuery selector, but these are
            //   hard to fully emulate with XPath. For now, just handle 'head'
            //   and 'body', since these are used by ajax_render().
            elseif (in_array($command['selector'], array(
              'head',
              'body'
            ))
            ) {
              $wrapperNode = $xpath->query('//' . $command['selector'])
                ->item(0);
            }
            if ($wrapperNode) {
              // ajax.js adds an enclosing DIV to work around a Safari bug.
              $newDom = new DOMDocument();
              $newDom->loadHTML('<div>' . $command['data'] . '</div>');
              $newNode = $dom->importNode($newDom->documentElement->firstChild->firstChild, TRUE);
              $method = isset($command['method']) ? $command['method'] : $ajax_settings['method'];
              // The "method" is a jQuery DOM manipulation function. Emulate
              // each one using PHP's DOMNode API.
              switch ($method) {
                case 'replaceWith':
                  $wrapperNode->parentNode->replaceChild($newNode, $wrapperNode);
                  break;
                case 'append':
                  $wrapperNode->appendChild($newNode);
                  break;
                case 'prepend':
                  // If no firstChild, insertBefore() falls back to
                  // appendChild().
                  $wrapperNode->insertBefore($newNode, $wrapperNode->firstChild);
                  break;
                case 'before':
                  $wrapperNode->parentNode->insertBefore($newNode, $wrapperNode);
                  break;
                case 'after':
                  // If no nextSibling, insertBefore() falls back to
                  // appendChild().
                  $wrapperNode->parentNode->insertBefore($newNode, $wrapperNode->nextSibling);
                  break;
                case 'html':
                  foreach ($wrapperNode->childNodes as $childNode) {
                    $wrapperNode->removeChild($childNode);
                  }
                  $wrapperNode->appendChild($newNode);
                  break;
              }
            }
            break;

          // @todo Add suitable implementations for these commands in order to
          //   have full test coverage of what ajax.js can do.
          case 'remove':
            break;
          case 'changed':
            break;
          case 'css':
            break;
          case 'data':
            break;
          case 'restripe':
            break;
        }
      }
      $content = $dom->saveHTML();
    }
    $this->drupalSetContent($content);
    $this->drupalSetSettings($drupal_settings);
    return $return;
  }
}

class SharedContentC1Tests extends SharedContentCSTestsBase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'Scenario 1 tests',
      'description' => t('Tests running across several Shared Content systems.'),
      'group' => 'Shared Content CS',
    );
  }

  /**
   * @todo doc
   */
  function testSitesAvailability() {
    if (empty($this->baseDomain)) {
      $this->pass('Base domain needs to be set to run distributed tests.');
      return;
    }

    $this->remotePost('s1', 'user', array(
      'name' => 'admin',
      'pass' => 'q'
    ), t('Log in'));
    $this->remoteGet('s1', 'admin/reports/sharedcontent/index');
    $this->assertText(t('Shared Content Index'));

    $this->remotePost('c1', 'user', array(
      'name' => 'admin',
      'pass' => 'q'
    ), t('Log in'));
    $this->remoteGet('c1', 'admin/content/sharedcontent');
    $this->assertText(t('ShareBoard'));


  }
}

class SharedContentC2Tests extends SharedContentCSTestsBase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'Scenario 2 tests',
      'description' => t('Tests running across several Shared Content systems.'),
      'group' => 'Shared Content CS',
    );
  }

  /**
   * @todo doc
   */
  function testSitesAvailability() {
    if (empty($this->baseDomain)) {
      $this->pass('Base domain needs to be set to run distributed tests.');
      return;
    }

    $this->remotePost('s1', 'user', array(
      'name' => 'admin',
      'pass' => 'q'
    ), t('Log in'));
    $this->remoteGet('s1', 'admin/reports/sharedcontent/index');
    $this->assertText(t('Shared Content Index'));

    $this->remotePost('c1', 'user', array(
      'name' => 'admin',
      'pass' => 'q'
    ), t('Log in'));
    $this->remoteGet('c1', 'admin/content/sharedcontent');
    $this->assertText(t('ShareBoard'));


  }
}

class SharedContentC3Tests extends SharedContentCSTestsBase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'Scenario 3 tests',
      'description' => t('Tests running across several Shared Content systems.'),
      'group' => 'Shared Content CS',
    );
  }

  /**
   * @todo doc
   */
  function testSitesAvailability() {
    if (empty($this->baseDomain)) {
      $this->pass('Base domain needs to be set to run distributed tests.');
      return;
    }

    $this->remotePost('sc1', 'user', array(
      'name' => 'admin',
      'pass' => 'q'
    ), t('Log in'));
    $this->remoteGet('sc1', 'admin/reports/sharedcontent/index');
    $this->assertText(t('Shared Content Index'));

    $this->remotePost('sc2', 'user', array(
      'name' => 'admin',
      'pass' => 'q'
    ), t('Log in'));
    $this->remoteGet('sc2', 'admin/content/sharedcontent');
    $this->assertText(t('ShareBoard'));


  }
}
