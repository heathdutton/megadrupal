<?php
/**
 * @file
 * Shared Content test cases for the included automation features.
 *
 * @todo Add test for rules_sharedcontent_queue_local
 * @todo Add test for rules_sharedcontent_queue_remote
 * @todo Add test for rules_sharedcontent_queue_remote_update
 * @todo Add test for rules_sharedcontent_search_enqueue_match
 * @todo Add test for rules_sharedcontent_search_local_match_on_new_remote
 */

class SharedContentAutomationTestCase extends DrupalWebTestCase {

  protected $profile = 'testing';

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'Automation tests',
      'description' => 'Test for automation features',
      'group' => 'Shared Content',
    );
  }

  function setUp() {
    parent::setUp(array(
      'sharedcontent_server',
      'sharedcontent_client',
      'sharedcontent_template_client_rules',
    ));

  }

  /**
   * Tests the back linking rules
   *
   * @todo Add another test that assures correct crud of assignments.
   */
  public function testBacklinking() {
    // Given a linkable content type
    $content_type = $this->drupalCreateContentType()->type;
    module_load_include('inc', 'sharedcontent_client', 'includes/sharedcontent_client.admin');
    $field_name = sharedcontent_client_get_default_shared_content_field_name();
    sharedcontent_client_attach_shared_content_field($field_name, 'node', $content_type);

    // And a node A and B indexed by Shared Content.
    variable_set('sharedcontent_indexed_entities', array(
      'node' => array(
        $content_type => 1,
      ),
    ));

    $settings = array(
      'type' => $content_type,
    );
    $node_a = $this->drupalCreateNode($settings);
    $node_b = $this->drupalCreateNode($settings);
    $index_a = sharedcontent_index_load_by_entity_id($node_a->nid);
    $index_b = sharedcontent_index_load_by_entity_id($node_b->nid);

    // And index B is of type origin.
    $index_b->origin = SHAREDCONTENT_INDEX_BUNDLE_REMOTE;
    $index_b->save();

    // And the back link rules are enabled.
    $rules_configs = entity_load('rules_config', FALSE, array(
      'name' => array(
        'rules_sharedcontent_back_link_add',
        'rules_sharedcontent_back_link_remove'
      ),
    ));
    foreach ($rules_configs as $rules_config) {
      $rules_config->active = TRUE;
      $rules_config->save();
    }
    rules_clear_cache();

    // When I receive an assignment from a client.
    $assignment = array(
      'uuid' => '08030bc2-a0c7-4a5e-8e00-d57756d828f2',
      'source' => $index_b->uuid,
      'target' => $index_a->uuid,
      'url' => 'http://example.com',
      'status' => SHAREDCONTENT_ASSIGNMENT_ACTIVE,
    );
    sharedcontent_server_resource_assignment('08030bc2-a0c7-4a5e-8e00-d57756d828f2', $assignment);

    // Then I have an assignment that links back.
    $result = entity_load('sharedcontent_assignment', FALSE, array(
      'status' => SHAREDCONTENT_ASSIGNMENT_ACTIVE,
    ));
    $this->assertEqual(2, count($result));

    // When I receive a deleted assignment.
    $assignment['status'] = SHAREDCONTENT_ASSIGNMENT_DELETED;
    sharedcontent_server_resource_assignment('08030bc2-a0c7-4a5e-8e00-d57756d828f2', $assignment);

    // Then my back linking gets also deleted.
    $result = entity_load('sharedcontent_assignment', FALSE, array(
      'status' => SHAREDCONTENT_ASSIGNMENT_DELETED,
    ));
    $this->assertEqual(2, count($result));
  }
}
