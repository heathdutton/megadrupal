<?php

/**
 * @file
 * Install, update and uninstall functions for the sharedcontent module.
 */

/**
 * Implements hook_schema().
 */
function sharedcontent_schema() {
  $schema = array();

  $schema['sharedcontent_index'] = array(
    'description' => 'Shared Content index.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'connection_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'description' => 'Name of the connection the record was retrieved from.',
      ),
      'origin' => array(
        'type' => 'varchar',
        'length' => '8',
        'not null' => TRUE,
        'description' => 'Connection bundle name. Enum [local, shadow, remote]',
        'default' => 'local',
      ),
      'uuid' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => TRUE,
        'description' => 'Globally unique id of the indexed record.',
      ),
      'parent_uuid' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => FALSE,
        'description' => 'UUID of a possible parent record.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Id of the indexed local content.',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'Type of the indexed content.',
      ),
      'entity_bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'description' => 'Bundle of the indexed content if available.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Title of the indexed local content.',
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'description' => 'Language of the indexed local content.',
      ),
      'translationset_id' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Id of the translation set if any.',
      ),
      'keywords' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'A bunch of keywords describing the indexed content.',
      ),
      'tags' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'A bunch of tags describing the indexed content.',
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URL to the place the content can be viewed.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Status of this index record. Allow to define if the record is visible and or can be linked.',
        'default' => 1,
        //Needs to be consistent with SHAREDCONTENT_INDEX_STATUS_VISIBLE.
      ),
      'accessibility' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Accessibility status of this indexed record. Allow to define if the record is public accessible or not.',
        'default' => 1,
      ),
      'entity_created' => array(
        'description' => 'UNIX timestamp of when the indexed content was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_changed' => array(
        'description' => 'UNIX timestamp of when the indexed content was updated.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'UNIX timestamp of when the index record was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'UNIX timestamp of when the index record was updated.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'reference' => array(
        'entity_type',
        'entity_id',
        'origin',
        'language'
      ),
    )
  );

  $schema['sharedcontent_assignment'] = array(
    'description' => 'Shared Content assignment.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'origin' => array(
        'type' => 'varchar',
        'length' => '8',
        'not null' => TRUE,
        'description' => 'Bundle name. Enum [local, shadow, remote]',
        'default' => 'local',
      ),
      'uuid' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => TRUE,
        'description' => 'Globally unique id of the assignment record.',
      ),
      'source_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Id of the source content.',
      ),
      'source' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => TRUE,
        'description' => 'uuid of the source content.',
      ),
      'target_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Id of the target content.',
      ),
      'target' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => TRUE,
        'description' => 'uuid of the target content.',
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URL of the system reporting this assignment.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Status of this assignment record.',
        'default' => 0,
        //Needs to be consistent with SHAREDCONTENT_ASSIGNMENT_ACTIVE.
      ),
      'created' => array(
        'description' => 'UNIX timestamp of when the assignment was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'UNIX timestamp of when the assignment was updated.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'uuid' => array('uuid'),
      'assignment' => array('source', 'target', 'url'),
    ),
  );

  return $schema;
}

/**
 * Split creation and update fields for indexed entity and  index record.
 */
function sharedcontent_update_7000() {
  // Rename existing date columns.
  $spec = array(
    'description' => 'UNIX timestamp of when the indexed content was created.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_change_field('sharedcontent_index', 'created', 'entity_created', $spec);

  $spec = array(
    'description' => 'UNIX timestamp of when the indexed content was created.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_change_field('sharedcontent_index', 'changed', 'entity_changed', $spec);

  // Add new columns allowing NULL values.
  $spec = array(
    'type' => 'int',
    'unsigned' => TRUE,
  );
  db_add_field('sharedcontent_index', 'created', $spec);

  $spec = array(
    'type' => 'int',
    'unsigned' => TRUE,
  );
  db_add_field('sharedcontent_index', 'changed', $spec);

  // Copy the existing date values to the new columns
  db_update('sharedcontent_index')
    ->expression('created', 'entity_created')
    ->expression('changed', 'entity_changed')
    ->execute();

  // Make the new columns NOT NULL.
  $spec = array(
    'description' => 'UNIX timestamp of when the index record was created.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_change_field('sharedcontent_index', 'created', 'created', $spec);

  $spec = array(
    'description' => 'UNIX timestamp of when the index record was updated.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_change_field('sharedcontent_index', 'changed', 'changed', $spec);
}

/**
 * Adds queue weight field to the sharedcontent index table.
 */
function sharedcontent_update_7001() {
  db_add_field('sharedcontent_index', 'queue_weight', array(
    'description' => 'Queue weight for prioritizing indexes.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Adds table for sharedcontent assignments.
 */
function sharedcontent_update_7002() {
  db_create_table('sharedcontent_assignment', array(
    'description' => 'Shared Content assignment.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uuid' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => TRUE,
        'description' => 'Globally unique id of the assignment record.',
      ),
      'source' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => TRUE,
        'description' => 'uuid of the source content.',
      ),
      'target' => array(
        'type' => 'varchar',
        'length' => 37,
        'not null' => TRUE,
        'description' => 'uuid of the target content.',
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URL of the system reporting this assignment.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Status of this assignment record.',
        'default' => 0,
        //Needs to be consistent with SHAREDCONTENT_ASSIGNMENT_ACTIVE.
      ),
      'created' => array(
        'description' => 'UNIX timestamp of when the assignment was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'UNIX timestamp of when the assignment was updated.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'uuid' => array('uuid'),
      'assignment' => array('source', 'target', 'url'),
    ),
  ));
}

/**
 * Adds tags field to the sharedcontent index table.
 */
function sharedcontent_update_7003() {
  db_add_field('sharedcontent_index', 'tags', array(
    'type' => 'text',
    'not null' => FALSE,
    'description' => 'A bunch of tags describing the indexed content.',
  ));
}

/**
 * Adds accessibility field to the sharedcontent index table.
 */
function sharedcontent_update_7004() {
  db_add_field('sharedcontent_index', 'accessibility', array(
    'type' => 'int',
    'not null' => TRUE,
    'description' => 'Accessibility status of this indexed record. Allow to define if the record is paid or not.',
    'default' => 1,
  ));
}

/**
 * Removes queue weight field from the sharedcontent index table.
 */
function sharedcontent_update_7005(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_id'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(id) FROM {sharedcontent_index} WHERE queue_weight > 0')->fetchField();
  }

  $result = db_query_range('SELECT id FROM {sharedcontent_index} WHERE queue_weight > 0 ORDER BY id', $sandbox['last_id'] + 1, 10);

  // Flag this records with flag module.
  foreach ($result as $row) {
    flag('flag', 'sharedcontent_remote_queue', $row->id);
    $sandbox['progress']++;
  }

  if ($row) {
    $sandbox['last_id'] = $row->id;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  if ($sandbox['#finished']) {
    db_drop_field('sharedcontent_index', 'queue_weight');
  }
}

/**
 * Update sharedcontent assignments table.
 */
function sharedcontent_update_7006() {
  // Add source_id field.
  db_add_field('sharedcontent_assignment', 'source_id', array(
    'type' => 'int',
    'not null' => FALSE,
    'description' => 'Id of the source content.',
  ));

  // Add target_id field.
  db_add_field('sharedcontent_assignment', 'target_id', array(
    'type' => 'int',
    'not null' => FALSE,
    'description' => 'Id of the target content.',
  ));

  // Update db index.
  if (!db_index_exists('sharedcontent_assignment', 'source_id')) {
    db_add_index('sharedcontent_assignment', 'source_id', array('source_id'));
  }
  if (!db_index_exists('sharedcontent_assignment', 'target_id')) {
    db_add_index('sharedcontent_assignment', 'target_id', array('target_id'));
  }
}

/**
 * Update values of the newly added fields (from the previous update).
 */
function sharedcontent_update_7007(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_id'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(id) FROM {sharedcontent_assignment}')->fetchField();
  }

  $result = db_query_range('SELECT id, source, target FROM {sharedcontent_assignment} ORDER BY id', $sandbox['last_id'] + 1, 10);

  // Flag this records with flag module.
  foreach ($result as $row) {
    $from = sharedcontent_index_load_by_uuid($row->source);
    $to = sharedcontent_index_load_by_uuid($row->target);

    db_update('sharedcontent_assignment')
      ->fields(array(
        'source_id' => $from->id,
        'target_id' => $to->id,
      ))
      ->condition('id', $row->id)
      ->execute();

    $sandbox['progress']++;
  }

  if ($row) {
    $sandbox['last_id'] = $row->id;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Creates origin field for sharedcontent_index table.
 */
function sharedcontent_update_7008() {
  if (!db_field_exists('sharedcontent_index', 'origin')) {
    db_add_field('sharedcontent_index', 'origin', array(
      'type' => 'varchar',
      'length' => '8',
      'not null' => TRUE,
      'description' => 'Bundle name. Enum [local, shadow, remote]',
      'default' => 'local',
    ));
  }
}

/**
 * Creates origin field for sharedcontent_assignment table.
 */
function sharedcontent_update_7009() {
  if (!db_field_exists('sharedcontent_assignment', 'origin')) {
    db_add_field('sharedcontent_assignment', 'origin', array(
      'type' => 'varchar',
      'length' => '8',
      'not null' => TRUE,
      'description' => 'Bundle name. Enum [local, shadow, remote]',
      'default' => 'local',
    ));
  }
}

/**
 * Add a uniqe key on the sharedcontent index table.
 */
function sharedcontent_update_7010() {
  db_add_unique_key('sharedcontent_index', 'reference', array(
    'entity_type',
    'entity_id',
    'origin',
    'language'
  ));
}

/**
 * Make unique key a normal index.
 */
function sharedcontent_update_7011() {
  db_drop_index('sharedcontent_index', 'reference');
  db_add_index('sharedcontent_index', 'reference', array(
    'entity_type',
    'entity_id',
    'origin',
    'language'
  ));
}

/**
 * Add parent relation.
 */
function sharedcontent_update_7012() {
  db_add_field('sharedcontent_index', 'parent_uuid', array(
    'type' => 'varchar',
    'length' => 37,
    'not null' => FALSE,
    'description' => 'UUID of a possible parent record.',
  ));
}

/**
 * Switch to Shared Content selection handler.
 */
function sharedcontent_update_7013() {
  $field = field_info_field('sharedcontent_reference');
  $field['settings']['handler'] = 'sharedcontent';
  $field['settings']['handler_settings']['target_bundles'] = array(
    SHAREDCONTENT_INDEX_BUNDLE_LOCAL => SHAREDCONTENT_INDEX_BUNDLE_LOCAL,
    SHAREDCONTENT_INDEX_BUNDLE_REMOTE => SHAREDCONTENT_INDEX_BUNDLE_REMOTE,
  );
  $field['settings']['handler_settings']['sort'] = array(
    'type' => 'property',
    'property' => 'changed',
    'direction' => 'DESC',
  );
  field_update_field($field);
}

/**
 * Implements hook_uninstall().
 */
function sharedcontent_uninstall() {
  db_delete('variable')
    ->condition('name', 'sharedcontent_%', 'LIKE')
    ->execute();
}
