<?php

/**
 * @file
 * Contains tests for Shared Content.
 */

abstract class SharedcontentBaseTestCase extends DrupalWebTestCase {

  protected $user_editor;
  protected $user_admin;
  protected $user_client;

  /**
   * Overrides DrupalWebTestCase::setUp()
   */
  function setUp(array $dependencies, array $permissions) {
    parent::setUp($dependencies);

    // Given a editor
    $this->setUpEditor($permissions['editor']);

    // And a administrator
    $this->setUpAdmin($permissions['admin']);

    // And a client
    $this->setUpClient($permissions['client']);
  }

  /**
   * @todo doc
   */
  private function setUpEditor(array $permissions) {
    $this->user_editor = $this->drupalCreateUser($permissions);
  }

  /**
   * @todo doc
   */
  private function setUpAdmin(array $permissions) {
    $this->user_admin = $this->drupalCreateUser($permissions);
  }

  /**
   * @todo doc
   */
  private function setUpClient(array $permissions) {
    $this->user_client = $this->drupalCreateUser($permissions);
  }


  /**
   * Login as a editor.
   */
  function loginAsEditor() {
    $this->drupalLogin($this->user_editor);
  }

  /**
   * Login as a administrator.
   */
  function loginAsAdmin() {
    $this->drupalLogin($this->user_admin);
  }

  /**
   * Login as a client.
   */
  function loginAsClient() {
    $this->drupalLogin($this->user_client);
  }

  /**
   * @todo doc
   */
  function createVocabulary() {
    // Create a vocabulary.
    $vocabulary = new stdClass();
    $vocabulary->name = $this->randomName();
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = drupal_strtolower($this->randomName());
    $vocabulary->help = '';
    $vocabulary->nodes = array('article' => 'article');
    $vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($vocabulary);
    return $vocabulary;
  }

  /**
   * @todo doc
   */
  function createTerm($vocabulary) {
    $term = new stdClass();
    $term->name = $this->randomName();
    $term->description = $this->randomName();
    // Use the first available text format.
    $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
    return $term;
  }

  /**
   * @todo doc
   */
  function createConnection($name) {
    $connection = new stdClass();
    $connection->disabled = FALSE;
    $connection->api_version = 1;
    $connection->name = $name;
    $connection->admin_title = drupal_ucfirst($name);
    $connection->admin_description = '';
    $connection->version = 3;
    $connection->endpoint = 'sc/sharedcontent';
    $connection->config = array(
      'auth' => array(
        'plugin' => 'ServicesClientConnectionSessionAuth',
        'config' => array(
          'username' => $this->user_admin->name,
          'password' => $this->user_admin->pass_raw,
        ),
      ),
      'server' => array(
        'plugin' => 'ServicesClientConnectionRestServer',
        'config' => array(
          'request_formatter' => 'json',
          'response_parser' => 'json',
        ),
      ),
      'request' => array(
        'plugin' => 'ServicesClientConnectionTestRequest',
        'config' => array(),
      ),
    );
    $connection->debug = 1;

    services_client_connection_save($connection);
  }
}
