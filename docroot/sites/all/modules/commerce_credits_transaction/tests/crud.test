<?php
/**
 * @file
 * Commerce Credits Transaction CRUD Tests
 */


/**
 * Test create, read, update, and delete commerce credits with transactional support.
 */
class CommerceCreditsTransactionCRUDTestCase extends CommerceCreditsTransactionTestCase {

  static public function getInfo() {
    return array(
      'name' => 'Transaction CRUD',
      'description' => 'Assert successful CRUD operations for commerce credits with transactional support.',
      'group' => 'Commerce credits',
    );
  }

  public function testCRUD() {

    // Assert that the user has no credits.
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 0);

    // Add credits and assert credits and transaction.
    $user_wrapper = entity_metadata_wrapper('user', $this->web_user);
    commerce_credits_add_credits($user_wrapper, 'credit', 10);
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 10);
    $this->assertCreditTransaction('user', $this->web_user, 10, 'in');

    // Remove credits and assert credits and transaction.
    commerce_credits_remove_credits($user_wrapper, 'credit', 5);
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 5);

    // Load controller and from and to credit entities.
    $controller = entity_get_controller('commerce_credits');
    $from_credits = $controller->loadByEntity($this->web_user->uid, 'user', 'credit');
    $from_credits = array_shift($from_credits);

    // Create a credits entity for the node.
    $to_credits = $controller->createByEntity($this->transferNode->nid, 'node', 'credit');

    // Transfer credits and assert credits and transaction.
    $controller->transferCreditWithTransaction($from_credits, $to_credits, 2);
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 3);
    $this->assertCreditTransaction('user', $this->web_user, 2, 'transfer');
    $this->assertEntityHasCredits('node', $this->transferNode, 'credit', 2);
    $this->assertCreditTransaction('user', $this->web_user, 5, 'out');

    // Transfer credits as pending transaction and assert credits and
    // transaction.
    $controller->transferCreditWithTransaction($from_credits, $to_credits, 3, 'pending');
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 0);
    $this->assertEntityHasCredits('node', $this->transferNode, 'credit', 5);
    $this->assertCreditTransaction('node', $this->transferNode, 3, 'transfer');

    // Complete the transaction.
    $transaction_controller = entity_get_controller('commerce_credits_transaction');
    $num = $transaction_controller->completeTransaction('node', $this->transferNode, 'to');
    $this->assertEqual($num, 1, t('Successfully completed !num transaction.', array('!num' => $num)));

    // Add more credits to the user, transfer (pending) to the node, and then
    // delete the node to assert that the pending transactions are reversed.
    commerce_credits_add_credits($user_wrapper, 'credit', 10);
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 10);
    $this->assertCreditTransaction('user', $this->web_user, 10, 'in');

    // Credit entities need to be loaded/refreshed.
    $from_credits = $controller->loadByEntity($this->web_user->uid, 'user', 'credit');
    $from_credits = array_shift($from_credits);
    $to_credits = $controller->loadByEntity($this->transferNode->nid, 'node', 'credit');
    $to_credits = array_shift($to_credits);

    $controller->transferCreditWithTransaction($from_credits, $to_credits, 5, 'pending');
    $this->assertCreditTransaction('user', $this->web_user, 5, 'transfer');

    // delete node and run cron.
    node_delete($this->transferNode->nid);
    $this->cronRun();

    // Assert that the user has 10 credits.
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 10);
  }

}
