<?php
/**
 * @file
 * Commerce Credits Transaction Widget Test Class.
 */


/**
 * Test CTools pay/transfer widget.
 */
class CommerceCreditsTransactionWidgetTestCase extends CommerceCreditsTransactionTestCase {

  static public function getInfo() {
    return array(
      'name' => 'Transaction Widget',
      'description' => 'Assert that a user can use the transaction widget.',
      'group' => 'Commerce credits',
    );
  }

  public function setUp() {
    parent::setUp();

    $this->drupalLogin($this->web_user);
  }

  /**
   * Assert that that a user can pay with credits to another entity.
   */
  public function testWidget() {

    // Give the user some credits.
    $user_wrapper = entity_metadata_wrapper('user', $this->web_user);
    commerce_credits_add_credits($user_wrapper, 'credit', 10);
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 10);
    $this->assertCreditTransaction('user', $this->web_user, 10, 'in');

    // Form values.
    $edit = array(
      'credits' => 5,
    );

    // Go to the widget page for the node entity.
    $this->drupalPost('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs', $edit, 'Pay With Credits');
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 5);
    $this->assertEntityHasCredits('node', $this->transferNode, 'credit', 5);

    // Try to use the widget with more credits than have.
    $edit['credits'] = 500;
    $this->drupalPost('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs', $edit, 'Pay With Credits');
    $this->assertText('There are not enough credits to fulfill this transaction');

    // Try to pay with a non-integer.
    $edit['credits'] = $this->randomName(5);
    $this->drupalPost('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs', $edit, 'Pay With Credits');
    $this->assertText('You must provide a valid, positive number of credits');

    // Try to pay with a float value.
    $edit['credits'] = 5.011111;
    $this->drupalPost('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs', $edit, 'Pay With Credits');
    $this->assertText('You must provide a valid, positive number of credits');

    // Try to pay with a negative integer.
    $edit['credits'] = -5;
    $this->drupalPost('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs', $edit, 'Pay With Credits');
    $this->assertText('You must provide a valid, positive number of credits');

    // Make sure you can't transfer to yourself.
    $edit['credits'] = 5;
    $this->drupalPost('credits/transaction/credit/user/' . $this->web_user->uid . '/nojs', $edit, 'Pay With Credits');
    $this->assertText('You cannot transfer credits to yourself');

    // Login as a site administrator and do a user to node transfer.
    $this->drupalLogin($this->site_admin);

    $edit['credits'] = 5;
    $this->drupalPost('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs/user/' . $this->web_user->uid, $edit, 'Pay With Credits');
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 0);
    $this->assertEntityHasCredits('node', $this->transferNode, 'credit', 10);
  }

}

/**
 * Test widget UI.
 */
class CommerceCreditsTransactionWidgetUITestCase extends CommerceCreditsTransactionTestCase {
  static public function getInfo() {
    return array(
      'name' => 'Transaction Widget UI',
      'description' => 'Assert that the widget UI has correct text and what not.',
      'group' => 'Commerce credits',
    );
  }

  public function setUp() {
    parent::setUp();

    // Login as a web user.
    $this->drupalLogin($this->web_user);
  }

  public function testWidgetUI() {
    // Give the user some credits.
    $user_wrapper = entity_metadata_wrapper('user', $this->web_user);
    commerce_credits_add_credits($user_wrapper, 'credit', 10);
    $this->assertEntityHasCredits('user', $this->web_user, 'credit', 10);
    $this->assertCreditTransaction('user', $this->web_user, 10, 'in');

    // Go to the widget page for the node entity.
    $this->drupalGet('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs');
    $this->assertText('Transfer credits to ' . $this->transferNode->title);

    // Login as an administrator.
    $this->drupalLogin($this->site_admin);

    // Go to the widget page for transferring from a user to a node.
    $this->drupalGet('credits/transaction/credit/node/' . $this->transferNode->nid . '/nojs/user/' . $this->web_user->uid);
    // @todo DrupalWTF: assertTitle does not work despite equality.
    $this->assertText('Transfer credits from ' . format_username($this->web_user) . ' to ' . $this->transferNode->title);
  }
}
