<?php
/**
 * @file
 * Commerce Credits Transaction Unit Tests
 */


/**
 * Test array reduce of values returned from module_invoke_all().
 */
class CommerceCreditsTransactionArrayReduceTestCase extends DrupalUnitTestCase {

  static public function getInfo() {
    return array(
      'name' => 'Transaction Widget Access Array Reduce test',
      'description' => 'Assert that array reduced to single value.',
      'group' => t('Commerce credits'),
    );
  }

  public function setUp() {
    parent::setUp();

    // Unit tests don't go through Drupal's module loading so need to require
    // files manually.
    require_once drupal_get_path('module', 'node') . '/node.module';
    require_once drupal_get_path('module', 'commerce_credits_transaction') . '/commerce_credits_transaction.module';
  }

  public function testArrayReduceOne() {
    $values = array(
      'mymodule' => NODE_ACCESS_IGNORE,
    );

    $value = array_reduce($values, 'commerce_credits_transaction_reduce_access_array');

    $this->assertEqual(NODE_ACCESS_IGNORE, $value, t('Array reduced to NODE_ACCESS_IGNORE - %value', array('%value' => $value)));
  }

  public function testArrayReduceMultiple() {
    $values = array(
      'mymodule' => NODE_ACCESS_IGNORE,
      'mymodule2' => NODE_ACCESS_IGNORE,
      'mymodule3' => NODE_ACCESS_IGNORE,
    );

    $value = array_reduce($values, 'commerce_credits_transaction_reduce_access_array');

    $this->assertEqual(NODE_ACCESS_IGNORE, $value, t('Array reduced to NODE_ACCESS_IGNORE - %value', array('%value' => $value)));
  }

  public function testArrayReduceMixedValues() {
    $values = array(
      'mymodule' => NODE_ACCESS_IGNORE,
      'mymodule2' => NODE_ACCESS_DENY,
      'mymodule3' => NODE_ACCESS_IGNORE,
      'mymodule4' => NODE_ACCESS_ALLOW,
    );

    $value = array_reduce($values, 'commerce_credits_transaction_reduce_access_array');

    // Demonstrate FIFO.
    $this->assertEqual(NODE_ACCESS_ALLOW, $value, t('Array reduced to NODE_ACCESS_ALLOW showing last in, last out - %value', array('%value' => $value)));
  }

}
