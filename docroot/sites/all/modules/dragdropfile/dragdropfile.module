<?php

define('DRAGDROPFILE_UPLOAD_METHOD', 'series');
define('DRAGDROPFILE_CANCEL_ALL_DROPS', 0);
define('DRAGDROPFILE_DEFAULT_ENABLED', 1);
define('DRAGDROPFILE_SUBMIT_BUTTON_SELECTOR', '.i-am-dragdropfile');
define('DRAGDROPFILE_DEFAULT_TITLE', 'DRAG ON ME');

/**
 * Implements hook_menu().
 */
function dragdropfile_menu() {
  $items['admin/config/media/dragdropfile'] = array(
    'title' => 'HTML5 Drag & Drop File',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dragdropfile_config_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Config form handler for dragdropfile.
 */
function dragdropfile_config_form($form, &$form_state) {
  $form['dragdropfile_default_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable this widget by default on all managed files'),
    '#default_value' => variable_get('dragdropfile_default_enabled', DRAGDROPFILE_DEFAULT_ENABLED),
    '#description' => t("If checked the drag'n'drop widget option in fields settings will be checked by default."),
  );

  $form['dragdropfile_upload_method'] = array(
    '#type' => 'select',
    '#title' => t('Upload method'),
    '#options' => array(
      'series' => t('Series'),
      'parallel' => t('Parallel'),
    ),
    '#default_value' => variable_get('dragdropfile_upload_method', DRAGDROPFILE_UPLOAD_METHOD),
    '#required' => TRUE,
    '#description' => t("<em>Series</em> will upload slower (one after another, with a separate XHR request and full Drupal bootstrap), but is safer, because Drupal doesn't handle multiple files very well. <em>Parallel</em> should be much faster, but MIGHT create problems with file validation and sudden form submission."),
  );

  $form['dragdropfile_cancel_all_drops'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cancel all file drops in forms where DDF is enabled'),
    '#default_value' => variable_get('dragdropfile_cancel_all_drops', DRAGDROPFILE_CANCEL_ALL_DROPS),
    '#description' => t("This is useful if you don't aim very well and accidentally drop files outside the drop zone. If checked, nothing will happen, otherwise the browser might open the image in your active tab."),
  );

  $form['dragdropfile_submit_button_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit button selector'),
    '#default_value' => variable_get('dragdropfile_submit_button_selector', DRAGDROPFILE_SUBMIT_BUTTON_SELECTOR),
    '#required' => TRUE,
    '#description' => t("Some themes, like Bootstrap, change buttons dramatically, so the default selector might not work. Pick your own."),
  );

  $form = system_settings_form($form);
  return $form;
}

/**
 * Helper to attach JS and CSS resources to a form.
 */
function _dragdropfile_attach_resources(&$element, &$form_state) {
  // Expose this field.
  $element['#dragdropfile'] = TRUE;

  // Attach global resources.
  $upload_method = variable_get('dragdropfile_upload_method', DRAGDROPFILE_UPLOAD_METHOD);

  // Add resources to this form.
  $path = drupal_get_path('module', 'dragdropfile');
  $element['#attached']['js'][] = $path . '/Drupal.ajax.prototype.eventResponse.js';
  $element['#attached']['js'][] = $path . '/dragdropfile-' . $upload_method . '.js';
  $element['#attached']['css'][] = $path . '/dragdropfile.css';
  if (variable_get('dragdropfile_cancel_all_drops', DRAGDROPFILE_CANCEL_ALL_DROPS)) {
    $element['#attached']['js'][] = $path . '/dragdropfile-lousy-aim.js';
  }

  // Custom submit button selector.
  $selector = variable_get('dragdropfile_submit_button_selector', DRAGDROPFILE_SUBMIT_BUTTON_SELECTOR);
  $element['#attached']['js'][] = array(
    'data' => array('dragDropFile' => array('submitButtonSelector' => $selector)),
    'type' => 'setting'
  );
}

/**
 * On which field types FDD should work.
 *
function _dragdropfile_field_types() {
  $supported = array('file', 'image');
  drupal_alter('dragdropfile_field_types', $supported);
  return $supported;
}

/**
 * Helper to check if the given instance is a valid FDD field.
 *
function _dragdropfile_is_field_type($type) {
  return in_array($type, _dragdropfile_field_types());
}

/**
 * On which field widget types FDD should work.
 */
function _dragdropfile_field_widget_types() {
  $supported = array('file_generic', 'image_image');
  drupal_alter('dragdropfile_field_widget_types', $supported);
  return $supported;
}

/**
 * Helper to check if the given instance is a valid FDD field widget.
 */
function _dragdropfile_is_widget_type($type) {
  return in_array($type, _dragdropfile_field_widget_types());
}

/**
 * Helper to determine the Drag & Drop state of a field instance.
 */
function _dragdropfile_is_enabled($instance) {
  // Use field instance settings.
  $settings = $instance['widget']['settings'];
  if (isset($settings['dragdropfile_enabled'])) {
    return $settings['dragdropfile_enabled'];
  }

  // Or use the default value as set in module settings.
  $default_value = variable_get('dragdropfile_default_enabled', DRAGDROPFILE_DEFAULT_ENABLED);
  return $default_value;
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form().
 */
function dragdropfile_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $field = $form['#field'];
  $instance = $form['#instance'];

  if (_dragdropfile_is_widget_type($instance['widget']['type'])) {
    $settings = $instance['widget']['settings'];

    $form['instance']['widget']['settings']['dragdropfile_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable <strong>HTML5 Drag & Drop</strong> for this field'),
      '#default_value' => _dragdropfile_is_enabled($instance),
      '#description' => t("With this checked, this field instance will have an HTML5 Drop interface'. You can CSS the shit out of it with custom CSS."),
      '#weight' => 80,
    );
    $form['instance']['widget']['settings']['dragdropfile_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Drag & Drop title'),
      '#default_value' => @$settings['dragdropfile_title'],
      '#description' => t("Will be translated. If this doesn't work for you, use CSS and <code>html[lang=xx]</code>. Defaults to &quot;%title&quot;.", array(
        '%title' => DRAGDROPFILE_DEFAULT_TITLE,
      )),
      '#weight' => 81,
      '#states' => array(
        'visible' => array(
          '#edit-instance-widget-settings-dragdropfile-enabled' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implement hook_field_widget_form_alter().
 */
function dragdropfile_field_widget_form_alter(&$element, &$form_state, $context) {
  $field = $context['field'];
  $instance = $context['instance'];

  if (_dragdropfile_is_widget_type($instance['widget']['type']) && _dragdropfile_is_enabled($instance)) {
    _dragdropfile_attach_resources($element, $form_state);

    $element['#field_instance'] = $instance;

    $element['#process'][] = '_dragdropfile_element_process_pre';
    $element['#process'][] = '_dragdropfile_element_process';
    $element['#max_delta'] = $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED ? 999999 : $field['cardinality'];

    // Only affect fields with cardinality > 1.
    if ($element['#max_delta'] > 1) {
      $element['#after_build'][] = '_dragdropfile_element_after_build';
    }
  }
}

/**
 * Processor to enable dragdropfile for this field.
 */
function _dragdropfile_element_process_pre(&$element, &$form_state, &$complete_form) {
  foreach (element_children($element) as $delta) {
    $element[$delta]['#process'][] = '_dragdropfile_element_input_process';
    $element[$delta]['#field_instance'] = $element['#field_instance'];
  }
  return $element;
}

/**
 * Processor to handle "multiple" file uploads.
 */
function _dragdropfile_element_process(&$element, &$form_state, &$complete_form) {
  // _dragdropfile_attach_resources($complete_form, $form_state);

  ksort($element);
  $indexes = element_children($element);
  $delta = count($indexes);

  // The multiple uploader is needed only if there are multiple empty slots.
  if ($delta < $element['#max_delta']) {
    $upload_prefix = implode('_', $element['#parents']) . '_';
    $changed = FALSE;

    foreach ($indexes as $index) {
      $el = &$element[$index];
      $el['#parent_max_delta'] = $element['#max_delta'] - $delta + 1;

      // are there any files from a "multiple" upload field?
      $upload_name = $upload_prefix . $index;
      if (!empty($_FILES['files']['name'][$upload_name]) && is_array($_FILES['files']['name'][$upload_name])) {
        $original_files = $_FILES['files'];
        unset($_FILES['files']['name'][$upload_name],
          $_FILES['files']['type'][$upload_name],
          $_FILES['files']['tmp_name'][$upload_name],
          $_FILES['files']['error'][$upload_name],
          $_FILES['files']['size'][$upload_name]);

        // Add a new form element for each extra uploaded file.
        $first = TRUE;
        foreach ($original_files['name'][$upload_name] as $i => $name) {
          if ($original_files['error'][$upload_name][$i]) {
            continue;
          }

          if ($first) {
            $new_name = $upload_name;
            $first = FALSE;
          }
          else {
            if ($delta >= $element['#max_delta']) {
              continue;
            }
            $index = $delta;
            $new_name = $upload_prefix . $delta;
            $element[$delta] = $el;
            $delta++;
          }

          $changed = TRUE;
          $_FILES['files']['name'][$new_name] = $name;
          $_FILES['files']['type'][$new_name] = $original_files['type'][$upload_name][$i];
          $_FILES['files']['tmp_name'][$new_name] = $original_files['tmp_name'][$upload_name][$i];
          $_FILES['files']['error'][$new_name] = $original_files['error'][$upload_name][$i];
          $_FILES['files']['size'][$new_name] = $original_files['size'][$upload_name][$i];
        }

        // Add one final empty upload.
        if (!$first && $delta < $element['#max_delta']) {
          $element[$delta] = $el;
          $element['#actual_upload_delta'] = $delta;
          $delta++;
        }
      }

      unset($el);
    }
  }

  return $element;
}

/**
 * After build to handle invalid uploads that were given a file input by _dragdropfile_element_process().
 */
function _dragdropfile_element_after_build($element, &$form_state) {
  // Remove all invalid file inputs.
  if (isset($element['#actual_upload_delta'])) {
    foreach (element_children($element) as $delta) {
      if ($delta != $element['#actual_upload_delta'] && empty($element[$delta]['#file'])) {
        unset($element[$delta]);
      }
    }
  }

  return $element;
}

/**
 * Processor to add "multiple" attribute to file upload inputs.
 */
function _dragdropfile_element_input_process($element, $form_state, $complete_form) {
  $element['upload_button']['#attributes']['class'][] = 'i-am-dragdropfile';
  $element['upload']['#attributes']['max'] = 1;

  $instance = $element['#field_instance'];
  $element['upload_button']['#attributes']['data-ddf-title'] = t(trim(@$instance['widget']['settings']['dragdropfile_title']) ?: DRAGDROPFILE_DEFAULT_TITLE);

  if (isset($element['#parent_max_delta'])) {
    $element['upload']['#attributes']['multiple'] = '';
    $element['upload']['#attributes']['data-validate'] = 'settings';
    $element['upload']['#attributes']['max'] = $element['#parent_max_delta'];
    $element['upload']['#name'] .= '[]';
  }

  return $element;
}
