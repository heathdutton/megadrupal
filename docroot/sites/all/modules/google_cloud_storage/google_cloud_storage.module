<?php

/**
 * Implements hook_menu().
 */
function google_cloud_storage_menu() {

  $items['admin/config/media/google-cloud-storage'] = array(
    'title' => 'Google Cloud Storage',
    'description' => 'Google Cloud Storage Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_cloud_storage_admin'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_admin().
 */
function google_cloud_storage_admin() {
  
  $google_cloud_storage_client_id = variable_get('google_cloud_storage_client_id');
  $google_cloud_storage_service_account_name = variable_get('google_cloud_storage_service_account_name');
  $google_cloud_storage_key_file_path = variable_get('google_cloud_storage_key_file_path');
  $google_cloud_storage_debug = variable_get('google_cloud_storage_debug');
  
  $form['google_cloud_storage_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client ID'),
    '#description' => t('Enter the Client ID.'),
    '#default_value' => $google_cloud_storage_client_id,
    '#required' => TRUE,
  );

  $form['google_cloud_storage_service_account_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Service account name'),
    '#description' => t('Enter the Service account name (Service account Email address).'),
    '#default_value' => $google_cloud_storage_service_account_name,
  );

  $form['google_cloud_storage_key_file_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key'),
    '#description' => t('Enter the path to the private key file.'),
    '#default_value' => $google_cloud_storage_key_file_path,
  );
  $form['google_cloud_storage_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug'),
    '#description' => t('Check the box to enable logging.'),
    '#default_value' => $google_cloud_storage_debug,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_validate().
 *
 * Validate Google Cloud Storage settings
 */
function google_cloud_storage_admin_validate($form, &$form_state) {
  $info = libraries_load('google-api-php-client');
  
  if ($info['loaded']) {  
  
    $google_cloud_storage_client_id = $form_state['values']['google_cloud_storage_client_id'];
    $google_cloud_storage_service_account_name = $form_state['values']['google_cloud_storage_service_account_name'];
    $google_cloud_storage_key_file_path = $form_state['values']['google_cloud_storage_key_file_path'];

    try {
      $client = new apiClient();
      
      $client->setClientId($google_cloud_storage_client_id);
      $client->setApplicationName("Google Cloud Storage Drupal module");
      
      $key = file_get_contents($google_cloud_storage_key_file_path);
      $client->setAssertionCredentials(new apiAssertionCredentials(
        $google_cloud_storage_service_account_name,
        array('https://www.googleapis.com/auth/devstorage.full_control'),
        $key)
      );
      
      $client::$auth->refreshTokenWithAssertion();
      
      $access_token = json_decode($client->getAccessToken())->access_token;
      
      cache_set("google_cloud_storage_access_token", $access_token, 'cache', CACHE_TEMPORARY);
      
      //if authentication passed, save these variables now
      //so if container is incorrect, we can still fetch list of buckets
      variable_set('google_cloud_storage_client_id', $google_cloud_storage_client_id);
      variable_set('google_cloud_storage_service_account_name', $google_cloud_storage_service_account_name);
      variable_set('google_cloud_storage_key_file_path', $google_cloud_storage_key_file_path);
      
    } catch (Exception $e) {
      watchdog_exception('google_cloud_storage', $e);
      form_set_error('google_cloud_storage_client_id][google_cloud_storage_service_account_name][google_cloud_storage_key_file_path', t('Error authenticating. Please check the Client ID, Service Account Name, and/or Key file path and try again.'));
    }
  }
  else {
    form_set_error('', t("Google's APIs Client Library for PHP was not loaded."));
  }
}

/**
 * Implements hook_stream_wrappers().
 *
 */
function google_cloud_storage_stream_wrappers() {
  
  $google_cloud_storage_client_id = variable_get('google_cloud_storage_client_id');
  $google_cloud_storage_service_account_name = variable_get('google_cloud_storage_service_account_name');
  $google_cloud_storage_key_file_path = variable_get('google_cloud_storage_key_file_path');
  
  $wrappers = array();
  
  // if there is valid authentication, try to get the list of buckets
  if ($google_cloud_storage_client_id && $google_cloud_storage_service_account_name && $google_cloud_storage_key_file_path) {
    try {
      $access_token = _google_cloud_storage_get_access_token();
      $google_storage = new GoogleCloudStorageClient($access_token);
      $resp = $google_storage->listBuckets();
      
      foreach ($resp->Buckets->children() as $bucket) {
        $bucket_name = (string)$bucket->Name;
        
        $wrappers['gcs.' . $bucket_name] = array(
          'name' => t('Google Cloud Storage [@bucketname].', array('@bucketname' => $bucket_name)),
          'class' => 'GoogleCloudStorageStreamWrapper',
          'description' => t('Google Cloud Storage [@bucketname].', array('@bucketname' => $bucket_name)),
        );
      }
    } catch (Exception $e) {
      drupal_set_message(t('Error getting list of buckets.'), 'error');
    }
  }
  
  return $wrappers;
}

/**
 * Implements hook_libraries_info().
 */
function google_cloud_storage_libraries_info() {
  return array(
    'google-api-php-client' => array(
      'title' => 'Google APIs Client Library for PHP',
      'vendor url' => 'http://code.google.com/p/google-api-php-client/',
      'download url' => 'http://code.google.com/p/google-api-php-client/downloads/list',
      'version arguments' => array(
        'file' => 'makeRelease.sh',
        'pattern' => '/VERSION=(\d+\.\d+(\.\d+)?)/',
      ),
      'files' => array(
        'php' => array(
          'src/apiClient.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function google_cloud_storage_requirements() {
  $t = get_t();
  $requirements = array();

  $info = libraries_load('google-api-php-client');
  if (!$info['loaded']) {
    $requirements['google-api-php-client'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('Google APIs Client Library for PHP'),
      'value' => $t('Failed to load the Google APIs Client Library for PHP'),
      'description' => $t('Please make sure the Google APIs Client Library for PHP is installed in the libraries directory (libraries\google-api-php-client).'),
    );
  }
  else {
    $requirements['google-api-php-client'] = array(
      'severity' => REQUIREMENT_INFO,
      'title' => $t('Google APIs Client Library for PHP'),
      'value' => $info['version'],
    );
  }

  return $requirements;
}

function _google_cloud_storage_get_access_token() {
  $access_token_cache = cache_get("google_cloud_storage_access_token");
  
  if ($access_token_cache) {
    //check to make sure the access token is less than 1 hour old
    $created = new DateTime(date("r", $access_token_cache->created));
    $now = new DateTime();
    $age = $now->diff($created);
    if ($age->h > 0) {
      if (variable_get('google_cloud_storage_debug')) {
        watchdog("google_cloud_storage", "access token is too old", NULL, WATCHDOG_DEBUG);
      }
      $access_token_cache = NULL;
    }
  }
  
  if ($access_token_cache) {
    if (variable_get('google_cloud_storage_debug')) {
      watchdog("google_cloud_storage", "loading cached access token", NULL, WATCHDOG_DEBUG);
    }
    
    $access_token = $access_token_cache->data;
  }
  else {
    if (variable_get('google_cloud_storage_debug')) {
      watchdog("cloud_files", "requesting Google Cloud Storage access token", NULL, WATCHDOG_DEBUG);
    }
    
    $info = libraries_load('google-api-php-client');
    if ($info['loaded']) {
      $google_cloud_storage_client_id = variable_get('google_cloud_storage_client_id');
      $google_cloud_storage_service_account_name = variable_get('google_cloud_storage_service_account_name');
      $google_cloud_storage_key_file_path = variable_get('google_cloud_storage_key_file_path');

      $client = new apiClient();

      $client->setApplicationName("Google Cloud Storage Drupal module");
      $client->setClientId($google_cloud_storage_client_id);

      $key = file_get_contents($google_cloud_storage_key_file_path);
      $client->setAssertionCredentials(new apiAssertionCredentials(
        $google_cloud_storage_service_account_name,
        array('https://www.googleapis.com/auth/devstorage.full_control'),
        $key)
      );

      $client::$auth->refreshTokenWithAssertion();

      $access_token = json_decode($client->getAccessToken())->access_token;
      
      cache_set("google_cloud_storage_access_token", $access_token, 'cache', CACHE_TEMPORARY);
    }
    else {
      drupal_set_message(t("Google's APIs Client Library for PHP could not be loaded."), 'error');
      watchdog('google_cloud_storage', "Google's APIs Client Library for PHP was not loaded.", NULL, WATCHDOG_NOTICE);
    }
  }
  
  return $access_token;
}

/**
 * Adds file info to the database.
 *
 * @param string $uri
 * @param string $filemime
 * @param integer $filesize
 */
function google_cloud_storage_add_fileinfo($uri, $filemime, $filesize) {
  // add file info to database
  $new_file = new stdClass();
  $new_file->uri = $uri;
  $new_file->filemime = $filemime;
  $new_file->filesize = $filesize;        
  drupal_write_record('google_cloud_storage', $new_file);
}

/**
 * Gets file info from the database.
 *
 * @param string $uri
 * @return array
 */
function google_cloud_storage_get_fileinfo($uri) {
  $query = db_select('google_cloud_storage', 'gcs');
  $query
    ->condition('uri', $uri)
    ->fields('gcs', array('uri', 'filemime', 'filesize'));
  $result = $query->execute();
  return $result->fetchAssoc();
}

/**
 * Removes file info from the database.
 *
 * @param string $uri
 * 
 * @return DeleteQuery
 *   A new DeleteQuery object for this connection.
 */
function google_cloud_storage_remove_fileinfo($uri) {
  return db_delete('google_cloud_storage')
    ->condition('uri', $uri)
    ->execute();
}