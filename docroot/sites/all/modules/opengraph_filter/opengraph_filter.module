<?php

/**
 * Function to find all opengraph (and related) tags from a uri.
 * 
 * Returns a (multidimensional) array on success, or an empty one on failure.
 */
function opengraph_filter_find_tags($uri, $reset = FALSE) {

  $tags = &drupal_static(__FUNCTION__);
  $cache_key = md5($uri);
  
  if (!$reset) {
    // Try to find results in static cache (memory).
    if (!empty($tags) && isset($tags[$cache_key])) {
      return $tags[$cache_key];
    }
    
    // Try to find results in cache table (database).
    if ($cache = cache_get('tags:' . $cache_key, 'cache_opengraph_filter')) {
      // Save result in static cache
      $tags[$cache_key] = $cache->data;
      return $tags[$cache_key];
    }
  }
  
  // We really do need to query the web, since we have no cached version.
  // Let us start with an empty array.
  $tags[$cache_key] = array(
    'request_uri' => $uri,
  );
  
  if ($html = opengraph_filter_get_html($uri, $reset)) {
    
    // Preg Query for title.
    $search = '/<title>(.*)<\/title>/Ui';
    if (preg_match($search, $html, $found)) {
      $tags[$cache_key]['title'] = filter_xss(decode_entities($found[1]));
    }
    
    // Preg Query for correct metatags.
    $search = '/<meta[^>]+(name|property)\s?=\s?([\'"]+)(.*)\2[^>]+(value|content)\s?=\s?([\'"]+)(.*)\5.*>/Ui'; 
    
    if (preg_match_all($search, $html, $found, PREG_PATTERN_ORDER)) {
      $num_found = count($found[0]);
      for ($i=0; $i<$num_found; $i++) {
        $found[3][$i] = preg_replace('/[^a-z0-9:\._-]/', '', strtolower(trim($found[3][$i])));
        $found[6][$i] = filter_xss(decode_entities(trim($found[6][$i])));
        
        // Ignore if either the tag name or the tag value is empty.
        if (!drupal_strlen($found[3][$i]) || !drupal_strlen($found[6][$i])) {
          continue;
        }
        
        // Magic to put the found tags in a multidimensional array.
        $these_tags = &$tags[$cache_key];
        $keys = preg_split('/[\.|:]/', $found[3][$i]);
        $num_keys = count($keys);
        for ($j=0; $j<$num_keys; $j++) {
          $key = $keys[$j];

          if (gettype(@$these_tags) == 'array' && count($these_tags) && $these_tags == array_values($these_tags)) {
            // numeric array
            $these_tags = &$these_tags[count($these_tags)-1];
          }

          if ($j == ($num_keys - 1)) {
            // We write the value in the array.
            if (gettype(@$these_tags[$key]) != 'NULL') {
              if(gettype(@$these_tags) == 'string') {
                $these_tags = array($keys[$j-1] => $these_tags);
                $these_tags[$key] = $found[6][$i];
              }
              elseif (gettype(@$these_tags[$key]) != 'array' || (gettype(@$these_tags[$key]) == 'array' && $these_tags[$key] != array_values($these_tags[$key]))) {
                $these_tags[$key] = array($these_tags[$key], $found[6][$i]);
              } else {
                $these_tags[$key][] = $found[6][$i];
              }
            } else {
              $these_tags[$key] = $found[6][$i];
            }
            
          } else {

            // We need to move one level deeper in our array.
            if (gettype(@$these_tags[$key]) == 'NULL') {
              $these_tags[$key] = array();
            }
            elseif(gettype(@$these_tags[$key]) == 'string') {
              $these_tags[$key] = array($key => $these_tags[$key]);
            }
            $these_tags = &$these_tags[$key];
          }   
        }
        unset($these_tags);
      }
    }
  }


  // Write results back to the database cache.
  cache_set('tags:' . $cache_key, $tags[$cache_key], 'cache_opengraph_filter', (REQUEST_TIME + 3600));
  
  return $tags[$cache_key];
}

/**
 * Function to get HTML from uri.
 * Stored in cache so that we can also get other things than metatags out the HTML (RDFa?).
 */
function opengraph_filter_get_html($uri, $reset = FALSE) {
  $cache_key = md5($uri);
  $html = FALSE;
  
  if (!$reset) {
    // Try to find results in cache table (database).
    if ($cache = cache_get('html:' . $cache_key, 'cache_opengraph_filter')) {
      // Save result in static cache
      $html = $cache->data;
      return $html;
    }
  }
  
  $request = drupal_http_request($uri, array('headers' => array('User-Agent' => 'Drupal OpenGraph Filter (+http://drupal.org/)')));
  if ($request->code == 200) {
    $html = $request->data;
  }
  
  // Write results back to the database cache.
  cache_set('html:' . $cache_key, $html, 'cache_opengraph_filter', (REQUEST_TIME + 3600));
  
  return $html;
}

/**
 * Implements hook_filter_info().
 */
function opengraph_filter_filter_info() {
  $filters = array();
  $filters['opengraph_filter'] = array(
    'title' =>  t('Add a preview of URLs found in the text, based on the URL\'s (OpenGraph) metatags.'),
    'process callback' => '_opengraph_filter_processor',
    'settings callback' => '_opengraph_filter_settings',
    'default settings' => array(
      'opengraph_filter_num' => 1,
    ),
  );
  return $filters;
}
/**
 * Settings callback for URL filter.
 */
function _opengraph_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['opengraph_filter_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of previews'),
    '#default_value' => $filter->settings['opengraph_filter_num'],
    '#size' => 5,
    '#maxlength' => 4,
    '#field_suffix' => t('previews'),
    '#description' => t('The number of previews that will be add. The URL that is first found will be processed first. A preview will be genereated from a succesfull call for metatags.'),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  return $settings;
}

/**
 * Call back for finding urls. Largely stolen from _filter_url in the filter.module
 */
function _opengraph_filter_processor($text, $filter) {
  // Tags to skip and not recurse into.
  $ignore_tags = 'a|script|style|code|pre';

  // Create an array which contains the regexps for each type of link.
  // The key to the regexp is the name of a function that is used as
  // callback function to process matches of the regexp. The callback function
  // is to return the replacement for the match. The array is used and
  // matching/replacement done below inside some loops.
  $tasks = array();

  // Prepare protocols pattern for absolute URLs.
  // check_url() will replace any bad protocols with HTTP, so we need to support
  // the identical list. While '//' is technically optional for MAILTO only,
  // we cannot cleanly differ between protocols here without hard-coding MAILTO,
  // so '//' is optional for all protocols.
  // @see filter_xss_bad_protocol()
  $protocols = array('http', 'https');
  $protocols = implode(':(?://)?|', $protocols) . ':(?://)?';

  // Prepare domain name pattern.
  // The ICANN seems to be on track towards accepting more diverse top level
  // domains, so this pattern has been "future-proofed" to allow for TLDs
  // of length 2-64.
  $domain = '(?:[A-Za-z0-9._+-]+\.)?[A-Za-z]{2,64}\b';
  $ip = '(?:[0-9]{1,3}\.){3}[0-9]{1,3}';
  $auth = '[a-zA-Z0-9:%_+*~#?&=.,/;-]+@';
  $trail = '[a-zA-Z0-9:%_+*~#&\[\]=/;?!\.,-]*[a-zA-Z0-9:%_+*~#&\[\]=/;-]';

  // Prepare pattern for optional trailing punctuation.
  // Even these characters could have a valid meaning for the URL, such usage is
  // rare compared to using a URL at the end of or within a sentence, so these
  // trailing characters are optionally excluded.
  $punctuation = '[\.,?!]*?';

  // Match absolute URLs.
  $url_pattern = "(?:$auth)?(?:$domain|$ip)/?(?:$trail)?";
  $pattern = "`((?:$protocols)(?:$url_pattern))($punctuation)`";
  $tasks['_filter_url_parse_full_links'] = $pattern;

  // Match www domains.
  $url_pattern = "www\.(?:$domain)/?(?:$trail)?";
  $pattern = "`($url_pattern)($punctuation)`";
  $tasks['_filter_url_parse_partial_links'] = $pattern;

  // Each type of URL needs to be processed separately. The text is joined and
  // re-split after each task, since all injected HTML tags must be correctly
  // protected before the next task.
  $urls = array();
  foreach ($tasks as $task => $pattern) {
    // HTML comments need to be handled separately, as they may contain HTML
    // markup, especially a '>'. Therefore, remove all comment contents and add
    // them back later.
    _filter_url_escape_comments('', TRUE);
    $text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);

    // Split at all tags; ensures that no tags or attributes are processed.
    $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
    // PHP ensures that the array consists of alternating delimiters and
    // literals, and begins and ends with a literal (inserting NULL as
    // required). Therefore, the first chunk is always text:
    $chunk_type = 'text';
    // If a tag of $ignore_tags is found, it is stored in $open_tag and only
    // removed when the closing tag is found. Until the closing tag is found,
    // no replacements are made.
    $open_tag = '';

    for ($i = 0; $i < count($chunks); $i++) {
      if ($chunk_type == 'text' || ($chunk_type == 'tag' && substr(strtolower($chunks[$i]), 0, 3) == '<a ')) {
        // Only process this text if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // If there is a match, add to urls array.
          if (preg_match_all($pattern, $chunks[$i], $found, PREG_PATTERN_ORDER)) {
            $num_found = count($found[1]);
            for ($j=0; $j< $num_found; $j++) {
              if ($task == '_filter_url_parse_partial_links') {
                $urls[] = 'http://' . $found[1][$j];
              }
              else {
                $urls[] = $found[1][$j];
              }
            }
          }
        }
        // Text chunk is done, so next chunk must be a tag.
        $chunk_type = 'tag';
      }
      else {
        
        // Only process this tag if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // Check whether this tag is contained in $ignore_tags.
          if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
            $open_tag = $matches[1];
          }
        }
        // Otherwise, check whether this is the closing tag for $open_tag.
        else {
          if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
            $open_tag = '';
          }
        }
        // Tag chunk is done, so next chunk must be text.
        $chunk_type = 'text';
      }
    }

    $text = implode($chunks);
    // Revert back to the original comment contents
    _filter_url_escape_comments('', FALSE);
    $text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);
  }

  $urls = array_values(array_unique($urls));
  $urls_found = count($urls);
  $processed = 0;
  for ($i=0; $i<$urls_found; $i++) {
    $html = theme('opengraph_filter', array('uri' => $urls[$i]));
    if (drupal_strlen($html)) {
      $text .= $html;
      $processed++;
    }
    if ($processed >= $filter->settings['opengraph_filter_num']) {
      break;
    }
  }

  return $text;
}

/**
 * Implements hook_theme().
 */
function opengraph_filter_theme() {
  return array(
    'opengraph_filter' => array(
      'variables' => array('uri' => NULL, 'tags' => array(), 'metatags' => array(), 'multiple_images' => FALSE),
      'path' => drupal_get_path('module', 'opengraph_filter') . '/theme',
      'template' => 'opengraph-filter',
      'pattern' => 'opengraph_filter__',
    ),
    'opengraph_filter_image' => array(
      'variables' => array('image' => NULL),
    ),
    'opengraph_filter_images' => array(
      'variables' => array('image' => NULL),
    ),
  );
}

function theme_opengraph_filter_image(&$variables) {
  
  $return = '<span><a href="' . $variables['url'] . '" ';
  $return .= 'title="' . check_plain($variables['title']) . '">';
  if (is_array($variables['image'])) {
    $src = $variables['image']['image'];
    $height = NULL;
    if (isset($variables['image']['width']) && isset($variables['image']['height'])) {
      $width = 80;
      $height = floor(($width / $variables['image']['width']) * $variables['image']['height']);
    }
  } elseif (!empty($variables['image'])) {
    $src = $variables['image'];
  }
  $return .= '<img src="' . $src . '" width="80"';
  if (!empty($height)) {
    $return .= ' height="' . $height . '"';
  }
  $return .= ' border="0" alt="' . check_plain($variables['title']) . '" />';
  $return .= '</a></span>';
  return $return;
}

function theme_opengraph_filter_images(&$variables) {
  $return = '';
  
  /*
  foreach($variables['image'] as $image) {
    $return .= theme('opengraph_image', array('image' => $image));
  }
   * 
   * For now we just return the first image.
   * TODO: include a basic slider (don't forget to include the JS also!)
  */
  $return = theme('opengraph_image', array('image' => $variables['image'][0]));
  return $return;
}

function template_preprocess_opengraph_filter(&$variables) {
    
  if (!count($variables['metatags']) && !empty($variables['uri'])) {
    $tags = opengraph_filter_find_tags($variables['uri']);
    if (count($tags) > 1) {
      $variables['metatags'] = $tags;
    }
  }
  
  $keys = array('title', 'description', 'image', 'url', 'type');
  
  // Set default
  foreach ($keys as $key) {
    if (isset($variables['metatags'][$key])) {
      $variables['tags'][$key] = NULL;
    }
  }
  $variables['tags']['url'] = $variables['metatags']['request_uri'];
  $variables['tags']['type'] = 'website';
  foreach ($keys as $key) {
    if (isset($variables['metatags'][$key])) {
      $variables['tags'][$key] = $variables['metatags'][$key];
    }
  }
  // Override with OpenGraph vars
  if (isset($variables['metatags']) && isset($variables['metatags']['og']) && is_array($variables['metatags']['og'])) {
    foreach ($keys as $key) {
      if (isset($variables['metatags']['og'][$key])) {
        $variables['tags'][$key] = $variables['metatags']['og'][$key];
      }
    }
  }
  
  // We need to show at least something!
  // If tags is empty we give back an empty template in the tpl.php
  if (!isset($variables['tags']['title']) && !isset($variables['tags']['description'])) {
    $variables['tags'] = array();
  }
  
  // Detect multiple images.
  if (isset($variables['tags']['image']) &&
      is_array($variables['tags']['image']) &&
      count($variables['tags']['image']) &&
      $variables['tags']['image'] == array_values($variables['tags']['image'])
     ) {
    $variables['multiple_images'] = TRUE;
  }

  if (count($variables['tags'])) {
    if (!empty($variables['tags']['type'])) {
      if (strstr($variables['tags']['type'], '.') !== FALSE) {
        $type = explode('.', $variables['tags']['type']);
        $variables['theme_hook_suggestions'][] = 'opengraph_filter__' . $type[0];
        $variables['classes_array'][] = $type[0];
      }
      $variables['theme_hook_suggestions'][] = 'opengraph_filter__' . str_replace('.', '__', $variables['tags']['type']);
      $variables['classes_array'][] = str_replace('.', '-', $variables['tags']['type']);
    }
    $domain = @parse_url($variables['uri']);
    if (drupal_substr($domain['host'], 0, 4) == 'www.') {
      $domain['host'] = drupal_substr($domain['host'], 4);
    }
    $variables['classes_array'][] = str_replace('.', '-', $domain['host']);
    
    if (!empty($variables['tags']['image'])) {
      $theme_images = array(
        'image' => $variables['tags']['image'],
        'url' => $variables['tags']['url'],
        'title' => $variables['tags']['title'],
      );
      
      if ($variables['multiple_images']) {
        $variables['image'] = theme('opengraph_filter_images', $theme_images);
      }
      else {
        $variables['image'] = theme('opengraph_filter_image', $theme_images);
      }
    }
  }
}

/**
 * Implements hook_init().
 * 
 * Really hate to do this, but filter output is cached, so we cannot add JS/CSS on the fly; when needed.
 */
function opengraph_filter_init() {
  //drupal_add_js(drupal_get_path('module', 'opengraph_filter') . '/theme/opengraph-filter.js', array('every_page' => TRUE));
  drupal_add_css(drupal_get_path('module', 'opengraph_filter') . '/theme/opengraph-filter.css', array('every_page' => TRUE));
}
