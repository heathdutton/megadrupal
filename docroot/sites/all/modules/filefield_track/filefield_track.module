<?php
/**
 * @file
 * Defines hooks and pages for tracking file downloads.
 */

/**
 * Implements hook_menu().
 */
function filefield_track_menu() {
  $items['admin/reports/downloads'] = array(
    'title' => t('Tracked downloads'),
    'description' => t('View download statistics for tracked files.'),
    'page callback' => 'filefield_track_stats',
    'page arguments' => array('user'),
    'access arguments' => array('access site reports'),
  );
  $items['admin/reports/downloads/user'] = array(
    'title' => t('By user'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/reports/downloads/file'] = array(
    'title' => t('By file'),
    'access arguments' => array('access site reports'),
    'page callback' => 'filefield_track_stats',
    'page arguments' => array('file'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['download/%/%'] = array(
    'title' => t('Download file'),
    'title arguments' => array(2),
    'title callback' => 'filefield_track_dynamic_title',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filefield_track_download_form', 1),
    'access arguments' => array('access content'),
    'file' => 'filefield_track.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 * @todo: autogenerate theme registry entrys for widgets.
 */
function filefield_track_theme() {
  return array(
    'filefield_track_stats' => array(
      'variables' => array('header' => array(), 'rows' => array()),
    ),
    'filefield_track_link' => array(
      'variables' => array('file' => NULL, 'icon_directory' => NULL),
      'file' => 'filefield_track_formatter.inc',
    ),
    'filefield_track_formatter_table' => array(
      'variables' => array('items' => NULL),
      'file' => 'filefield_track_formatter.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function filefield_track_field_formatter_info() {
  return array(
    'filefield_track_default' => array(
      'label' => t('Generic file (with tracking)'),
      'field types' => array('file'),
    ),
    'filefield_track_table' => array(
      'label' => t('Table of files'),
      'field types' => array('file'),
    ),
    'filefield_track_url_plain' => array(
      'label' => t('URL to file (with tracking)'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function filefield_track_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'filefield_track_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'filefield_track_link',
          '#file' => (object) $item,
        );
      }
      break;

    case 'filefield_track_url_plain':
      foreach ($items as $delta => $item) {
        $file = (object) $item;
        $element[$delta] = array(
          '#markup' => empty($item['uri']) ? '' : filefield_track_path($file),
        );
      }
      break;

    case 'filefield_track_table':
      if (!empty($items)) {
        // Display all values in a single element..
        $element[0] = array(
          '#theme' => 'filefield_track_formatter_table',
          '#items' => $items,
        );
      }
      break;
  }

  return $element;
}
/**
 * Menu title callback to allow for dynamic page titles.
 */
function filefield_track_dynamic_title($filename) {
  return t('Download !filename', array('!filename' => $filename));
}

/**
 * Displays the statistics interface.
 */
function filefield_track_stats($display = 'user') {
  // Set up the basic query that both display types have in common.
  $query = db_select('filefield_track', 'd');
  $query->join('file_managed', 'f', 'f.fid = d.fid');
  $query->addField('f', 'uri', 'filepath');
  $query->extend('PagerDefault')->limit(100);

  switch ($display) {
    case 'user':
      $header = array(
        array(
          'data' => t('Email'),
          'field' => 'd.email',
        ),
        array(
          'data' => t('User'),
          'field' => 'd.uid',
        ),
        array(
          'data' => t('File'),
          'field' => 'filepath',
        ),
        array(
          'data' => t('Last Download'),
          'field' => 'd.changed',
          'sort' => 'desc',
        ),
        array(
          'data' => t('Download Count'),
          'field' => 'd.count',
        ),
      );
      $query->fields('d');
      break;

    case 'file':
      $header = array(
        array(
          'data' => t('File'),
          'field' => 'filepath',
        ),
        array(
          'data' => t('Download Count'),
          'field' => 'count',
          'sort' => 'desc',
        ),
      );
      $query->addExpression('SUM(d.count)', 'count');
      $query->condition('d.fid', 0, '>')->groupBy('f.fid');
      break;
  }

  // Turn on table sort using the header and execute.
  $results = $query->extend('TableSort')->orderByHeader($header)->execute();

  $rows = array();
  foreach ($results as $row) {
    $rows[] = $row;
  }
  return theme('filefield_track_stats', array(
    'header' => $header,
    'rows' => $rows,
    'display' => $display)
  );
}

/**
 * Theme function for the statistics interface.
 */
function theme_filefield_track_stats($variables) {
  $header = $variables['header'];
  $rows = array();
  foreach ($variables['rows'] as $row) {
    switch ($variables['display']) {
      case 'user':
        $tmp_row = array(
          $row->email,
          theme('username', array('account' => user_load($row->uid))),
          $row->filepath,
          format_date($row->changed, 'short'),
          array(
            'data' => $row->count,
            'style' => 'text-align: center;',
          ),
        );
        break;

      case 'file':
        $tmp_row = array(
          $row->filepath,
          array(
            'data' => $row->count,
            'style' => 'text-align: center;',
          ),
        );
        break;
    }
    $rows[] = $tmp_row;
  }

  $output = theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'sticky' => TRUE,
      'empty' => t('There are no download statistics to show yet.'),
    ));
  $output .= theme('pager', array('tags' => array('tags' => array())));
  return $output;
}

/**
 * Builds the trackable path to a file.
 *
 * @param object $file
 *   object containing the file information
 */
function filefield_track_path($file) {
  return 'download/' . $file->fid . '/' . $file->filename;
}
