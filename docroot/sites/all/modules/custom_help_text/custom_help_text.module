<?php

/**
 * @file
 * Custom Help Text module file.
 */

/**
 * Implements hook_help().
 */
function custom_help_text_help($path, $arg) {
  global $user;
  $help = array();

  switch ($path) {
    case 'admin/structure/custom_help_text':
      return '<p>' . t('The administration menu module provides a dropdown menu arranged for one- or two-click access to most administrative tasks and other common destinations (to users with the proper permissions). Use the settings below to customize the appearance of the menu.') . '</p>';

    case 'admin/help#custom_help_text':
      return FALSE; // @todo Add a nice help text.
  }

  if (!user_access('view custom help text') || !user_access('administer custom help text')) {
    // User does not have access to view this so just return false.
    return FALSE;
  }

  $path_alias = drupal_get_path_alias();
  $path = drupal_is_front_page() ? variable_get('site_frontpage', 'node') : current_path();
  $user_roles = array_values($user->roles);

  // Get all custom help text and sort by weight.
  ctools_include('export');
  $objects = ctools_export_crud_load_all('custom_help_text');

  uasort($objects, function ($a, $b) {
    return strcmp($b->weight, $a->weight);
  });

  foreach ($objects as $name => $object) {
    if (!drupal_match_path($path, $object->path) || !drupal_match_path($path_alias, $object->path)) {
      continue;
    }

    if (!is_array($object->options)) {
      $object->options = unserialize($object->options);
    }
    $access_roles = array_intersect($user_roles, array_values($object->options['roles']));
    $object->help = isset($object->help) ? trim($object->help) : '';

    if (!empty($access_roles) && !empty($object->help)) {
      $help[] = $object->help;
    }
  }

  if (empty($help)) {
    return FALSE;
  }
  elseif (count($help) == 1) {
    return implode($help);
  }
  else {
    return theme('item_list', array('items' => $help));
  }
}

/**
 * Implements hook_permission().
 */
function custom_help_text_permission() {
  return array(
    'administer custom help text' => array(
      'title' => t('Administer texts'),
      'description' => t('Allow users to administer the custom help text.'),
    ),
    'administer custom help text settings' => array(
      'title' => t('Administer settings'),
      'description' => t('Allow users to administer the custom help text settings.'),
    ),
    'view custom help text' => array(
      'title' => t('View custom help texts'),
      'description' => t('Allow users to view the custom help text.'),
    ),
    'export custom help text' => array(
      'title' => t('Export custom help texts'),
      'description' => t('Allow users to export and import custom help text.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function custom_help_text_menu() {
  $items = array();

  $items['admin/structure/custom-help-text/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_help_text_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer custom help text settings'),
    'file' => 'custom_help_text.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  $items['admin/structure/custom-help-text/restore'] = array(
    'title' => 'Restore',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_help_text_restore_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer permissions'),
    'file' => 'custom_help_text.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 49,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function custom_help_text_theme() {
  return array(
    'custom_help_text_list_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * The custom help text main admin page form.
 *
 * @param array $form_state
 *   The current form state.
 *
 * @return array
 *   The form.
 */
function custom_help_text_list_form() {
  $form = array();
  $form['#method'] = 'post';

  // Get all custom help text and sort by weight.
  ctools_include('export');
  $objects = ctools_export_crud_load_all('custom_help_text');
  uasort($objects, function ($a, $b) {
    return strcmp($b->weight, $a->weight);
  });
  $i = 1;
  foreach ($objects as $object) {
    $row = array();

    // Administrative Title
    $row['admin_title_' . $i] = array(
      '#markup' => check_plain($object->admin_title),
    );

    // Path(s)
    $paths = explode(PHP_EOL, $object->path);
    $paths = array_map(function ($a) {
      return trim($a);
    }, $paths);

    foreach ($paths as $key => $path) {
      if ($path == '<front>') {
        $paths[$key] = check_plain($path);
      }
      elseif (empty($object->disabled) && drupal_valid_path($path)) {
        $paths[$key] = l('/' . $path, $path);
      }
      else {
        $paths[$key] = '/' . $path;
      }
    }

    $row['path_' . $i] = array(
      '#markup' => implode(', ', $paths),
    );

    // System Name
    $row['name_' . $i] = array(
      '#type' => 'hidden',
      '#delta' => 50,
      '#value' => $object->name,
    );

    // Weight
    $row['weight_' . $i] = array(
      '#type' => 'weight',
      '#size' => 5,
      '#delta' => 50,
      '#default_value' => $object->weight,
      '#attributes' => array(
        'class' => array(
          'weight',
        ),
      ),
    );

    // Help text
    $row['help_' . $i] = array(
      '#markup' => $object->help,
    );

    // Edit & Clone
    $operations = array(
      array(
        'title' => t('Edit'),
        'href' => "admin/structure/custom-help-text/list/{$object->name}",
      ),
    );

    // Delete
    if ($object->export_type == EXPORT_IN_DATABASE) {
      $operations[] = array(
        'title' => t('Delete'),
        'href' => "admin/structure/custom-help-text/list/{$object->name}/delete",
      );
    }

    // Disable / Enable
    if (empty($object->disabled)) {
      $operations[] = array(
        'title' => t('Disable'),
        'href' => "admin/structure/custom-help-text/list/{$object->name}/disable",
        'ajax' => TRUE,
        'query' => array(
          'token' => drupal_get_token('disable'),
        ),
        'attributes' => array('class' => array('use-ajax')),
      );
    }
    else {
      $operations[] = array(
        'title' => t('Enable'),
        'href' => "admin/structure/custom-help-text/list/{$object->name}/enable",
        'ajax' => TRUE,
        'query' => array(
          'token' => drupal_get_token('enable'),
        ),
        'attributes' => array('class' => array('use-ajax')),
      );
    }


    // Revert
    if ($object->export_type == EXPORT_IN_CODE + EXPORT_IN_DATABASE) {
      $operations[] = array(
        'title' => t('Revert'),
        'href' => "admin/structure/custom-help-text/list/{$object->name}/revert",
      );
    }

    // Clone
    $operations[] = array(
      'title' => t('Clone'),
      'href' => "admin/structure/custom-help-text/list/{$object->name}/clone",
    );

    // Export
    if (user_access('export custom help text')) {
      $operations[] = array(
        'title' => t('Export'),
        'href' => "admin/structure/custom-help-text/list/{$object->name}/export",
      );
    }

    // Operation links
    $row['action_' . $i] = array(
      '#markup' => theme('links__ctools_dropbutton', array(
        'links' => $operations,
        //'attributes' => array('class' => array('links', 'inline')),
      )),
    );

    $row['#object'] = $object;

    $form['rows'][$i] = $row;

    $i++;
  }

  // Submit
  $form['submit'] = array(
    '#callback' => 'custom_help_text_list_form_submit',
    '#type' => 'submit',
    '#value' => t('Save changes'),
  );

  return $form;
}

/**
 * The theme for the custom help text administration form.
 *
 * This will take the form data and wrap it in a tabledrag element.
 *
 * @param array $variables
 *   The form
 *
 * @return array
 *   The rendered form.
 */
function theme_custom_help_text_list_form($variables) {
  ctools_add_css('export-ui-list');

  $form = $variables['form'];
  $rows = array();

  if (isset($form['rows']) && is_array($form['rows'])) {
    // Loop through each "row" in the table array.
    foreach ($form['rows'] as $id => $row) {
      // We are only interested in numeric keys.
      if (intval($id)) {
        $fields = array();

        // Add data.
        $fields[] = drupal_render($form['rows'][$id]['admin_title_' . $id]);
        $fields[] = drupal_render($form['rows'][$id]['path_' . $id]);

        // Add the weight field to the row.
        $fields[] = drupal_render($form['rows'][$id]['weight_' . $id]);

        // Add actions.
        $fields[] = array(
          'data' => drupal_render($form['rows'][$id]['action_' . $id]),
          'class' => array('ctools-export-ui-operations'),
        );

        // Add the row to the array of rows.
        $rows[] = array(
          'data' => $fields,
          'title' => drupal_render($form['rows'][$id]['help_' . $id]),
          'class' => array(
            'draggable',
            (empty($form['rows'][$id]['#object']->disabled)) ? 'ctools-export-ui-enabled' : 'ctools-export-ui-disabled',
          ),
        );
      }
    }
    // Make sure the header count matches the column count.
    $header = array(
      t('Name'),
      t('Path'),
      t('Weight'),
      array(
        'data' => t('Operations'),
        'class' => array('ctools-export-ui-operations'),
      ),
    );

    $options = array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(
        'id' => 'ctools-export-ui-list-items',
      ),
    );

    drupal_add_tabledrag('ctools-export-ui-list-items', 'order', 'sibling', 'weight');

    $output = theme('table', $options);
  }
  else {
    $output = '<p>' . t('No custom help text found. Use Add or Import to create one.') . '</p>';
  }

  return $output . drupal_render_children($form);
}

/**
 * Implements hook_submit().
 *
 * For the custom_help_text_list_form() form.
 */
function custom_help_text_list_form_submit($form, &$form_state) {
  $rows = array();

  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, 'name_') !== FALSE || strpos($key, 'weight_') !== FALSE) {
      $replace_elements = array('name_', 'weight_');
      $rows[str_replace($replace_elements, '', $key)][drupal_substr($key, 0, strpos($key, '_'))] = $value;
    }
  }

  foreach ($rows as $delta => $row) {
    custom_help_text_admin_update($row['name'], $row['weight']);
  }

  drupal_set_message(t('Order of help items updated'));
}

/**
 * Implements hook_block_view_alter().
 */
function custom_help_text_block_view_alter(&$data, $block) {
  $settings = variable_get('custom_help_text', array());
  $change_block = isset($settings['options']) && $settings['options']['fieldset'];

  if ($block->bid == 'system-help' && !empty($data['content']) && $change_block && user_access('view custom help text')) {
    global $user;

    $fieldset = array(
      '#theme' => 'fieldset',
      '#title' => t('!custom_help_text_title', array('!custom_help_text_title' => $settings['options']['title'])),
      '#children' => $data['content'],
    );

    if ($settings['options']['collapsible']) {
      drupal_add_library('system', 'drupal.collapse');
      $fieldset['#attributes'] = array('class' => array('collapsible'));
    }

    if (
      (isset($user->data['custom_help_text_collapsed']) && $user->data['custom_help_text_collapsed'] == 'collapsed') ||
      (isset($user->data['custom_help_text_collapsed']) && $user->data['custom_help_text_collapsed'] == 'default' && $settings['options']['collapsed']) ||
      (!isset($user->data['custom_help_text_collapsed']) && $settings['options']['collapsed'])
    ) {
      $fieldset['#attributes']['class'][] = 'collapsed';
    }

    $data['content'] = render($fieldset);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function custom_help_text_ctools_plugin_api($owner, $api) {
  if ($owner == 'custom_help_text' && $api == 'custom_help_text') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function custom_help_text_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Helper function to update a single help item.
 *
 * @param string $machine_name
 *   The help machine name to update.
 * @param int $weight
 *   The weight of the help item.
 */
function custom_help_text_admin_update($name, $weight = NULL) {
  $object = ctools_export_crud_load('custom_help_text', $name);

  if (!is_null($weight)) {
    $object->weight = (string) $weight;
    ctools_export_crud_save('custom_help_text', $object);
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function custom_help_text_field_extra_fields() {
  $extra['user']['user']['form']['custom_help_text'] = array(
    'label' => t('Custom Help Text settings'),
    'description' => t('Custom Help Text module form element.'),
    'weight' => 5,
  );

  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Allow users to decide if tracking code will be added to pages or not.
 */
function custom_help_text_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];

  $settings = variable_get('custom_help_text', array());
  $collapsed = isset($settings['options']['user_default']) ? $settings['options']['user_default'] : FALSE;

  if (user_access('view custom help text') && $collapsed) {
    $data = isset($account->data['custom_help_text']) ? $account->data['custom_help_text'] : array();
    $title = isset($settings['options']['title']) ? $settings['options']['title'] : t('Help');

    if ($collapsed) {
      $form['custom_help_text']['collapsed'] = array(
        '#type' => 'checkbox',
        '#title' => t('Collapse the @title text', array('@title' => $title)),
        '#description' => t('You can always expand the @title text when it is collapsed.', array('@title' => $title)),
        '#default_value' => isset($data['collapsed']) ? (bool) $data['collapsed'] : FALSE,
      );
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function custom_help_text_user_presave(&$edit, $account, $category) {
  if (isset($edit['custom_help_text'])) {
    $edit['data']['custom_help_text'] = $edit['custom_help_text'];
  }
}

/**
 * Implements hook_variable_info().
 */
function custom_help_text_variable_info($options) {
  $variable['custom_help_text'] = array(
    'type' => 'string',
    'title' => t('Title', array(), $options),
    'default' => array('*' => 0),
    'description' => t('Title', array(), $options),
    'required' => TRUE,
    'localize' => TRUE,
    'group' => 'custom_help_text',
  );

  return $variable;
}

/**
 * Implements hook_variable_group_info().
 */
function custom_help_text_variable_group_info() {
  $groups['custom_help_text'] = array(
    'title' => t('Custom Help Text'),
    'access' => 'administer custom help text settings',
    'path' => array('admin/structure/custom-help-text/settings'),
  );

  return $groups;
}
