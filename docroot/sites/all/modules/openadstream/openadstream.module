<?php
/**
 * @file
 * Main openadstream.module file.
 */

// Private helper functions.
/**
 * Create the Open AdStream javascript to display an advertisement.
 */
function _openadstream_block_js($position) {
  $position_lower = drupal_strtolower($position);
  $js = <<<JS
    <div class="oas-ad oas-{$position_lower}"><script>
      OAS_RICH('{$position}');
    </script></div>
JS;
  return $js;
}
/**
 * Retrieve a list of all positions.
 *
 * @return array
 *   list of all positions
 */
function _openadstream_positions() {

  $positions = &drupal_static(__FUNCTION__);

  if (empty($positions)) {
    $query = db_select('openadstream_positions', 'oasp')
      ->fields('oasp', array('position_id', 'name', 'description', 'data'))
      ->orderBy('oasp.name');

    $results = $query->execute();
    while ($result = $results->fetchAssoc()) {
      $result['data'] = unserialize($result['data']);
      $positions[] = $result;
    }
  }

  return $positions;
}
/**
 * Retrieve all pagename pagenames.
 *
 * @return array
 *   list of all pagename pagenames
 */
function _openadstream_pagenames() {

  $pagenames = &drupal_static(__FUNCTION__);

  if (empty($pagenames)) {
    $query = db_select('openadstream_pagenames', 'oasp')
      ->fields('oasp', array('pagename_id', 'path', 'pagename', 'weight'))
      ->orderBy('oasp.weight');

    $results = $query->execute();
    while ($result = $results->fetchAssoc()) {
      $pagenames[] = $result;
    }
  }

  return $pagenames;
}
/**
 * Retrieve pagename pagename rules.
 *
 * Pagename rules are defined in settings form and by modules then attempt to
 * match rules to the current path.
 *
 * @return string
 *   new pagename if one or more rules matched, FALSE if no rules matched
 */
function _openadstream_match_pagename() {
  $pagename = FALSE;

  // A node's manually-assigned pagename always takes priority.
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $pagename = _openadstream_node_pagename(arg(1));
  }
  // If nothing yet, try matching the URL.
  if ($pagename == FALSE) {
    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

    $pages = _openadstream_pagenames();
    if (!empty($pages)) {
      foreach ($pages as $page) {
        $page_match = drupal_match_path($path, $page['path']);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $page['path']);
        }

        if ($page_match) {
          $pagename = $page['pagename'];
          break;
        }
      }
    }
  }

  return $pagename;
}
/**
 * Retrieve the pagename pagename for the specified node id.
 *
 * @return string
 *   Pagename or FALSE if no pagename exists
 */
function _openadstream_node_pagename($nid) {
  return db_select('openadstream_node_pagenames', 'oasnp')
    ->fields('oasnp', array('pagename'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchField();
}

// Hook implementations - core.
/**
 * Implements hook_menu().
 */
function openadstream_menu() {
  $items = array();

  $items['admin/config/services/openadstream'] = array(
    'title' => 'Open AdStream',
    'description' => 'Configure the Open AdStream master code and advertisement blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_settings'),
    'access arguments' => array('administer openadstream configuration'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/openadstream/general'] = array(
    'title' => 'Settings',
    'description' => 'Configure the Open AdStream master code and advertisement blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_settings'),
    'access arguments' => array('administer openadstream configuration'),
    'file' => 'openadstream.admin.inc',
    'weight' => 10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/openadstream/positions'] = array(
    'title' => 'Positions',
    'page callback' => 'openadstream_admin_positions',
    'access arguments' => array('administer openadstream configuration'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/services/openadstream/positions/add'] = array(
    'title' => 'Add Position',
    'description' => 'Create a new Open AdStream position',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_form_positions', NULL),
    'access callback' => 'openadstream_access',
    'access arguments' => array('positions'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/services/openadstream/positions/edit/%'] = array(
    'title' => 'Edit Position',
    'description' => 'Edit an Open AdStream position',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_form_positions', 6),
    'access callback' => 'openadstream_access',
    'access arguments' => array('positions'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/openadstream/positions/delete/%'] = array(
    'title' => 'Delete Position',
    'description' => 'Delete a Open AdStream position',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_form_positions_delete', 6),
    'access callback' => 'openadstream_access',
    'access arguments' => array('positions'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/openadstream/pagenames'] = array(
    'title' => 'Pagenames',
    'page callback' => 'openadstream_admin_pagenames',
    'access callback' => 'openadstream_access',
    'access arguments' => array('positions'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  $items['admin/config/services/openadstream/pagenames/add'] = array(
    'title' => 'Add Pagename',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_form_pagenames', NULL),
    'access callback' => 'openadstream_access',
    'access arguments' => array('positions'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/services/openadstream/pagenames/edit/%'] = array(
    'title' => 'Edit Pagename',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_form_pagenames', 6),
    'access callback' => 'openadstream_access',
    'access arguments' => array('positions'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/openadstream/pagenames/delete/%'] = array(
    'title' => 'Delete Pagename',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openadstream_admin_form_pagenames_delete', 6),
    'access callback' => 'openadstream_access',
    'access arguments' => array('positions'),
    'file' => 'openadstream.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Implements hook_permission().
 */
function openadstream_permission() {
  return array(
    'administer openadstream configuration' => array(
      'title' => t('Administer Open AdStream Configuration'),
      'description' => t('Site wide configuration options.'),
    ),
    'configure openadstream pagenames' => array(
      'title' => t('Configure Open AdStream page names'),
      'description' => t('Add/Change Page Name options for overriding the default page name value.'),
    ),
    'configure openadstream node pagenames' => array(
      'title' => t('Configure Open AdStream Node page names'),
      'description' => t('Add/Change Node Page Name options for overriding the default node page name value.'),
    ),
  );
}
/**
 * Control user access to menu items.
 */
function openadstream_access($restrict) {

  $access = FALSE;
  switch ($restrict) {
    case 'positions':
      $access = user_access('configure openadstream pagenames');
      break;
  }

  if (!$access && user_access('administer openadstream configuration')) {
    $access = TRUE;
  }

  return $access;
}
/**
 * Implements hook_block_info().
 */
function openadstream_block_info() {

  $blocks = array();

  $positions = _openadstream_positions();
  if (!empty($positions)) {
    foreach ($positions as &$position) {
      // Set default from/to dates.
      if (empty($position['data']['dates']['visibility_start'])) {
        $position['data']['dates']['visibility_start'] = NULL;
      }
      if (empty($position['data']['dates']['visibility_end'])) {
        $position['data']['dates']['visibility_end'] = NULL;
      }

      $blocks[$position['name']] = array(
        'info' => 'Open AdStream ad: ' . $position['name'],
        'properties' => $position,
      );
    }
  }

  return $blocks;
}
/**
 * Implements hook_block_configure().
 */
function openadstream_block_configure($delta) {

  $blocks = module_invoke('openadstream', 'block_info');
  $position = $blocks[$delta]['properties'];

  $form['visibility']['date_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Open AdStream'),
    '#description' => t('Optionally set the date range for when this ad block should be visible. Set other global metadata for the ad position !position.', array(
      '!position' => l(t('here'), 'admin/config/services/openadstream/positions/edit/' . $position['position_id'], array(
        'query' => array(
          'destination' => drupal_get_path_alias(),
        ),
      )),
    )),
    '#group' => 'visibility',
    '#weight' => -10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['visibility']['date_fields']['visibility_start'] = array(
    '#type' => 'date_select',
    '#title' => t('Start'),
    '#date_year_range' => '0:+4',
    '#default_value' => $position['data']['dates']['visibility_start'],
  );

  $form['visibility']['date_fields']['visibility_end'] = array(
    '#type' => 'date_select',
    '#title' => t('End'),
    '#date_year_range' => '0:+4',
    '#default_value' => $position['data']['dates']['visibility_end'],
  );

  return $form;
}
/**
 * Implements hook_block_save().
 */
function openadstream_block_save($delta = '', $edit = array()) {

  $blocks = module_invoke('openadstream', 'block_info');
  $position = $blocks[$delta]['properties'];

  $position['data']['dates']['visibility_start'] = $edit['visibility_start'];
  $position['data']['dates']['visibility_end'] = $edit['visibility_end'];
  $position = (object) $position;

  drupal_write_record('openadstream_positions', $position, 'position_id');
}
/**
 * Implements hook_block_view().
 */
function openadstream_block_view($delta = '') {

  $blocks = module_invoke('openadstream', 'block_info');
  $position = $blocks[$delta]['properties'];
  $oas_tag_type = variable_get('openadstream_tag_type', 'mjx');

  // Return nothing if ad start date is in the future.
  if (!empty($position['data']['dates']['visibility_start'])) {
    if (strtotime($position['data']['dates']['visibility_start']) > REQUEST_TIME) {
      return NULL;
    }
  }
  // Return nothing if ad end date is in the past.
  if (!empty($position['data']['dates']['visibility_end'])) {
    if (strtotime($position['data']['dates']['visibility_end']) < REQUEST_TIME) {
      return NULL;
    }
  }

  switch ($oas_tag_type) {
    case 'dx':
      $content = array(
        '#markup' => '<div id="oas_' . $position['name'] . '" class="oas-ad oas-' . drupal_strtolower($position['name']) . '"></div>',
      );
      break;

    case 'mjx':
    default:
      $content = _openadstream_block_js($delta);
      break;
  }

  $block = array(
    'subject' => '',
    'content' => $content,
  );

  return $block;
}
/**
 * Implements hook_preprocess_page().
 */
function openadstream_preprocess_page(&$vars) {

  $oas_server = variable_get('openadstream_oas_hostname', '');
  $oas_client = variable_get('openadstream_hostname', $_SERVER['SERVER_NAME']);
  $oas_tag_type = variable_get('openadstream_tag_type', 'mjx');
  $oas_querystring = variable_get('openadstream_querystring', '');
  $positions = _openadstream_positions();
  $position_names = array();
  if (!empty($positions)) {
    foreach ($positions as $p) {
      $position_names[] = $p['name'];
    }
  }

  $pagename = '';
  if (!empty($oas_querystring) && array_key_exists($oas_querystring, $_GET)) {
    $pagename = $_GET[$oas_querystring];
  }
  if (empty($pagename)) {
    // Check first for page name.
    $pagename = variable_get('openadstream_pagename', '');
    // Use the path_alias if possible.
    if ($pagename == '') {
      $path = $_GET['q'];
      if ($alias = drupal_get_path_alias($_GET['q'])) {
        $path = $alias;
      }
      $pagename = $path;
    }
    // Replace the pagename if we match any of the pagename rules.
    $new_pagename = _openadstream_match_pagename();
    if (!empty($new_pagename)) {
      $pagename = $new_pagename;
      unset($new_pagename);
    }
  }
  // Work out if the base_path() should be included.
  if (variable_get('openadstream_show_basepath', FALSE)) {
    $pagename = base_path() . $pagename;
  }
  $pagename = trim($pagename, '/');

  $tags = array();
  if (!empty($vars['node'])) {
    $tags = module_invoke_all('openadstream_tags', $vars['node']);
  }

  if (!empty($positions)) {
    $js = '';

    switch ($oas_tag_type) {
      case 'dx':
        $sizes = '';
        foreach ($positions as $p) {
          $width = 0;
          if (!empty($p['data'][$oas_tag_type]['width'])) {
            $width = $p['data'][$oas_tag_type]['width'];
          }
          $height = 0;
          if (!empty($p['data'][$oas_tag_type]['height'])) {
            $height = $p['data'][$oas_tag_type]['height'];
          }

          $sizes .= "  oas_tag.definePos('{$p['name']}', [{$width},{$height}]);\n";
        }

        $js = <<<JS
var oas_tag = {};
oas_tag.url = '{$oas_server}';
oas_tag.sizes = function () {
{$sizes}
};
oas_tag.site_page = '{$oas_client}';
(function() {
  oas_tag.version ='1'; var oas = document.createElement('script'),
  protocol = 'https:' == document.location.protocol?'https://':'http://',
  node = document.getElementsByTagName('script')[0];
  oas.type = 'text/javascript'; oas.async = true;
  oas.src = protocol + oas_tag.url + '/om/' + oas_tag.version + '.js';
  node.parentNode.insertBefore(oas, node);
})();
JS;
        break;

      case 'mjx':
      default:
        // The base URL used to load ads.
        $base_url = "http://{$oas_server}/RealMedia/ads/adstream_mjx.ads/";
        // Build the full URL to load the page JS.
        $src = $base_url . $oas_client . "/' + p + '/" . rand() . '@' . implode(',', $position_names) . '?' . implode(',', $tags);
        // The pagename found thus far.
        $js = "var p='{$pagename}';\n";

        // Optional code for checking the URL string.
        if (!empty($oas_querystring)) {
          $js .= "function urlParam(name) {\n";
          $js .= "  name = name.replace(/[\[]/,\"\\\[\").replace(/[\]]/,\"\\\]\");\n";
          $js .= "  var regexS = \"[\\?&]\"+name+\"=([^&#]*)\";\n";
          $js .= "  var regex = new RegExp(regexS);\n";
          $js .= "  var results = regex.exec(window.location.href);\n";
          $js .= "  if (results == null) {\n";
          $js .= "    return \"\";\n";
          $js .= "  }\n";
          $js .= "  else {\n";
          $js .= "    return results[1];\n";
          $js .= "  };\n";
          $js .= "};\n";
          // Check if the pagename is being overridden by the querystring.
          $js .= "var q='{$oas_querystring}';\n";
          $js .= "if (urlParam(q) != '') {\n";
          $js .= "  p = urlParam(q);\n";
          $js .= "};\n";
        }

        // Output the JS load code.
        $js .= "document.write('<' + 'script type=\"text/javascript\" src=\"{$src}\"><' + '/script>');\n";
        break;
    }

    $element = array(
      '#tag' => 'script',
      '#value' => $js,
      '#attributes' => array(
        'type' => 'text/javascript',
        'charset' => 'utf-8',
      ),
    );

    // Add the compiled headers.
    drupal_add_html_head($element, 'openadstream');

    // Compile the HTML head values.
    $vars['head'] = drupal_get_html_head();
  }
}
/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function openadstream_form_node_form_alter(&$form, $form_state) {

  if (!user_access('administer openadstream configuration') || !user_access('configure openadstream node pagenames')) {
    return;
  }

  if (isset($form['#node']->nid)) {
    $pagename = _openadstream_node_pagename($form['#node']->nid);
    if ($pagename !== FALSE) {
      $default_value = $pagename;
    }
    $node = $form['#node'];
    $items = db_query('SELECT * FROM {openadstream_tags} WHERE vid = :vid', array(':vid' => $node->vid))->fetchAssoc();
    $tags = $items->tags;
  }

  $form['openadstream'] = array(
    '#type' => 'fieldset',
    '#title' => t('Open AdStream Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['openadstream']['openadstream_pagename'] = array(
    '#type' => 'textfield',
    '#title' => t('Pagename'),
    '#default_value' => (isset($default_value)) ? $default_value : '',
    '#size' => 20,
    '#maxlength' => 75,
    '#description' => t('Manually override the pagename value, not usually required.'),
  );

  $form['openadstream']['openadstream_tags'] = array(
    '#type' => 'textfield',
    '#title' => t('Tags'),
    '#default_value' => (isset($tags)) ? $tags : '',
    '#size' => 20,
    '#maxlength' => 150,
    '#description' => t('Manually override the tags value, not usually required.'),
  );
}
/**
 * Implements hook_insert().
 */
function openadstream_node_insert($node) {
  openadstream_node_update($node);
}
/**
 * Implements hook_update().
 */
function openadstream_node_update($node) {

  if (!user_access('administer openadstream configuration') || !user_access('configure openadstream node pagenames')) {
    return;
  }

  db_delete('openadstream_node_pagenames')
    ->condition('nid', $node->nid)
    ->execute();
  if (!empty($node->openadstream_pagename)) {
    db_insert('openadstream_node_pagenames')
      ->fields(array(
        'nid' => $node->nid,
        'pagename' => $node->openadstream_pagename,
      ))
      ->execute();
  }

  db_delete('openadstream_tags')
    ->condition('nid', $node->nid)
    ->execute();
  if (!empty($node->openadstream_tags)) {
    db_insert('openadstream_tags')
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'tags' => $node->openadstream_tags,
      ))
      ->execute();
  }

}
/**
 * Implements hook_delete().
 */
function openadstream_node_delete($node) {
  db_delete('openadstream_node_pagenames')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('openadstream_tags')
    ->condition('nid', $node->nid)
    ->execute();
}

// Hook implementations - contrib.
/**
 * Implements hook_openadstream_tags().
 */
function openadstream_openadstream_tags($node) {

  $tags = db_select('openadstream_tags', 'oast')
    ->fields('oast', array('tags'))
    ->condition('oast.vid', $node->vid)
    ->execute()
    ->fetchField();

  $tags = explode(',', $tags);

  return $tags;
}
/**
 * Implements hook_ctools_plugin_directory().
 */
function openadstream_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}
/**
 * Implements hook_panels_pre_render().
 */
function openadstream_panels_pre_render(&$display) {
  // Loop over the display objects.
  foreach ($display->content as &$content) {
    // Don't cache ads.
    if ($content->type == 'ads' || strpos($content->subtype, 'openadstream') !== FALSE) {
      $content->cache['method'] = NULL;
    }
  }
}
