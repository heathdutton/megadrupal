<?php

/**
 * @file
 * Handles product kit support for Ubercart Marketplace.
 *
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function mp_product_kit_form_alter(&$form, $form_state, $form_id) {
  $node = $form['#node'];
  if (is_object($node) && $form_id == $node->type . '_node_form' && $node->type == 'product_kit') {
    global $user;
    $product_types = module_invoke_all('product_types');
    unset($product_types[array_search('product_kit', $product_types)]);
    // TODO Please convert this statement to the D7 database API syntax.
    $result = db_query("SELECT nid, title FROM {node} WHERE uid = %d AND type IN ('" . implode("','", $product_types) . "')", $user->uid);
    $products = array();
    while ($product = db_fetch_object($result)) {
      $products[$product->nid] = $product->title;
    }
    if (!user_access('administer nodes')) {
      $form['base']['products']['#options'] = $products;
    }
  }
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function mp_product_kit_nodeapi_OLD(&$node, $op, $a3 = NULL) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  if ($node->type == 'product_kit') {
    switch ($op) {
      case 'validate':
        $total = 0;
        foreach ($node->products as $i => $product) {
          $product = node_load($product);
          if ($node->items[$i]['discount'] < 0) {
            $product->sell_price += $node->items[$i]['discount'];
          }
          else {
            $product->sell_price = $node->items[$i]['discount'];
          }
          $total += $product->sell_price;
        }
        // handle base price error, if a base price exists
        if (variable_get('mp_products_admin_base', FALSE)) {
          if ($total < variable_get('mp_products_admin_base', FALSE)) {
            form_set_error('sell_price', t('Sell price must be greater than or equal to sitewide base price of ' . uc_currency_format(variable_get('mp_products_admin_base', FALSE))));
          }
        }
        break;
    }
  }
}
