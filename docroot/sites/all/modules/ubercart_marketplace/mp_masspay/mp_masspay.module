<?php

/**
 * @file
 * Provides an interface to manage payments to sellers via PayPal MassPay.
 *
 * The mp_masspay module provides an admin interface to PayPal MassPay.
 *
 */

/**
 * Implements hook_menu().
 */
function mp_masspay_menu() {
  $items = array();

  $items['admin/store/reports/seller/custom'] = array(
    'title' => 'Seller reports',
    'description' => 'View reports of your sellers and their sales.',
    'page callback' => 'mp_masspay_seller',
    'access arguments' => array('view reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mp_masspay.admin.inc',
  );
  $items['admin/store/reports/seller/payments'] = array(
    'page callback' => 'mp_masspay_seller_payments',
    'access arguments' => array('view reports'),
    'type' => MENU_CALLBACK,
    'file' => 'mp_masspay.admin.inc',
  );
  $items['masspay/ipn'] = array(
    'title' => 'Masspay IPN',
    'page callback' => 'mp_masspay_ipn',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'mp_masspay.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for the user_profile_form.
 */
function mp_masspay_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $category = $form['#user_category'];
  if ($category == 'account' && user_access('act as seller', $account) && (variable_get('mp_masspay_enable_paypal', TRUE) || variable_get('mp_masspay_enable_check', FALSE))) {
    $form['payment_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Marketplace payment options'),
    );
    $options = array();
    if (variable_get('mp_masspay_enable_paypal', TRUE)) {
      $options['paypal'] = t('Paypal');
      $form['payment_settings']['paypal_email'] = array(
        '#title' => t('Paypal email address'),
        '#description' => t('Enter your valid Paypal account email address.  Payment for your product sales will be sent to this address.'),
        '#type' => 'textfield',
        '#default_value' => isset($account->data['paypal_email']) ? $account->data['paypal_email'] : '',
        '#required' => variable_get('mp_masspay_paypal_email_required', FALSE),
      );
      $form['#validate'][] = 'mp_masspay_user_profile_form_validate';
    }
    if (variable_get('mp_masspay_enable_check', FALSE)) {
      $options['manual'] = t('Check');
      $form['payment_settings']['manual_pay_details'] = array(
        '#title' => t('Check payment details'),
        '#description' => t('Enter valid check payment instructions. This should include an address, check recipient identification, etc.'),
        '#type' => 'textarea',
        '#default_value' => isset($account->data['manual_pay_details']) ? $account->data['manual_pay_details'] : '',
      );
    }
    $form['payment_settings']['payment_method'] = array(
      '#title' => t('Preferred payment method'),
      '#description' => t('Select the method you would like to be paid with.  Payments for your product sales will be sent using the selected method.'),
      '#options' => $options,
      '#default_value' => isset($account->data['payment_method']) ? $account->data['payment_method'] : key($options),
      '#type' => 'select',
      '#weight' => -1,
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function mp_masspay_user_profile_form_validate($form, &$form_state) {
  $edit = $form_state['values'];
  if ($edit['payment_method'] == 'paypal' && !empty($edit['paypal_email'])) {
    if (!valid_email_address($edit['paypal_email'])) {
      form_set_error('paypal_email', t('Please enter a valid Paypal email address.'));
    }
  }
}

function mp_masspay_user_presave(&$edit, $account) {
  foreach (array('payment_method', 'paypal_email', 'manual_pay_details') as $key) {
    if (!empty($edit[$key])) {
      $edit['data'][$key] = $edit[$key];
    }
  }
}

/**
 * Implements hook_theme().
 */
function mp_masspay_theme() {
  return array(
    'mp_masspay_seller_fieldset' => array(
      'render element' => 'fieldset',
    ),
    'mp_masspay_manuals_fieldset' => array(
      'render element' => 'fieldset',
    ),
  );
}

/**
 * Theme handler for mp_masspay_seller_form().
 */
function theme_mp_masspay_seller_fieldset($variables) {
  $fieldset = $variables['fieldset'];
  $output = '';
  $header = array(t('Seller'), t('# of orders'), t('Products sold'), t('Total revenue'), t('Total commission'), t('Payment method'), t('Pay'));
  $rows = array();
  foreach (element_children($fieldset) as $op_id) {
    $row = array();
    $row[] = drupal_render($fieldset[$op_id]['link']);
    $row[] = drupal_render($fieldset[$op_id]['order_data']);
    $row[] = drupal_render($fieldset[$op_id]['product_data']);
    $row[] = drupal_render($fieldset[$op_id]['revenue_count']);
    $row[] = drupal_render($fieldset[$op_id]['commission_count']);
    $row[] = drupal_render($fieldset[$op_id]['payment_method']);
    $row[] = drupal_render($fieldset[$op_id]['checked']);
    $rows[] = $row;
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($fieldset);
  return $output;
}

/**
 * Theme handler for mp_masspay_manuals_form().
 */
function theme_mp_masspay_manuals_fieldset($variables) {
  $fieldset = $variables['fieldset'];
  $output = '';
  $header = array(t('uid'), t('order ids'), t('manual payment details'), t('commission'), t('pay'));
  $rows = array();
  foreach (element_children($fieldset) as $op_id) {
    $row = array();
    $row[] = drupal_render($fieldset[$op_id]['uid_print']);
    $row[] = drupal_render($fieldset[$op_id]['order_ids_print']);
    $row[] = drupal_render($fieldset[$op_id]['manual_details']);
    $row[] = drupal_render($fieldset[$op_id]['commission_print']);
    $row[] = drupal_render($fieldset[$op_id]['checked']);
    $rows[] = $row;
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($fieldset);
  return $output;
}

function mp_masspay_form_mp_marketplace_settings_seller_form_alter(&$form, &$form_state) {
  $form['mp_masspay'] = array(
    '#type' => 'fieldset',
    '#title' => 'Masspay options',
  );
  $form['mp_masspay']['mp_masspay_enable_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable manual payment method'),
    '#description' => t('Check to enable the manual seller payment method (currently: check).  Enabling this will add a payment details field to seller profile edit forms.'),
    '#default_value' => variable_get('mp_masspay_enable_check', FALSE),
  );
  
  $form['mp_masspay']['mp_masspay_enable_paypal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable PayPal payment method'),
    '#description' => t('Check to add an email address field to seller profile edit forms.  This email address will be the one used for Paypal Masspay functionality.  IMPORTANT: To allow admin to actually send payments via Paypal, uc_paypal must be enabled and api credentials must be entered for WPP (even if not enabled as a gateway).'),
    '#default_value' => variable_get('mp_masspay_enable_paypal', TRUE),
  );
  $form['mp_masspay']['mp_masspay_paypal_email_required'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make paypal email address field required'),
    '#description' => t('If the above checkbox is set, make the paypal email address field on seller profile edit forms required.'),
    '#default_value' => variable_get('mp_masspay_paypal_email_required', FALSE),
  );

  $form['mp_masspay']['mp_masspay_ipn_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log IPN details'),
    '#description' => t('If the above checkbox is set, all the information received in the IPN (Instant Payment Notification) from paypal will be logged on a watchdog entry. Useful for debugging masspay IPNs.'),
    '#default_value' => variable_get('mp_masspay_ipn_debug', FALSE),
  );
}
