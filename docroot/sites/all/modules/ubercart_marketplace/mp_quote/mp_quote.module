<?php

/**
 * @file
 * Handles Ubercart Marketplace shipping quotes.
 *
 * Allows sellers to customize shipping settings for their products
 * and receive payment for their shipping charges as calculated by
 * the quote this module returns
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implements hook_menu().
 */
function mp_quote_menu() {
  $items = array();

  $items['user/%user/selling/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure your shipping settings.',
    'access callback' => 'mp_marketplace_can_view_seller',
    //'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_quote_seller_settings', 1),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/store/settings/quotes/methods/mpquote'] = array(
    'title' => 'Marketplace Quote',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_quote_admin_methods'),
    'access arguments' => array('configure quotes'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Form builder for the admin methods form.
 */
function mp_quote_admin_methods($form, &$form_state) {
  $form = array();

  $form['mp_quote_flatrate_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Flat Rate ID'),
    '#description' => t('The numeric id of the existing flat rate method that is to be used if sellers choose flat rate as a product\'s shipping method. This can be determined by inspecting the last argument of the url to edit the flat rate method (admin/store/settings/quotes/methods/flatrate). This flat rate method should NOT be enabled as a quote method, as it will be invoked by mp_quote and should not be invoked separately or in duplication.'),
    '#default_value' => variable_get('mp_quote_flatrate_id', 1),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 *
 * Auto fills new product location fields, and allows seller to choose
 * quote method if mp_quote shipping method is enabled.
 */
function mp_quote_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node']) && is_object($node = $form['#node'])) {
    if ($form_id == $node->type . '_node_form' && _mp_products_get_types($node->type)) {
      if (empty($node->nid)) { // new Product
        global $user;
        $seller = reset(db_query("SELECT * FROM {mp_quote_sellers} WHERE uid = :uid", array(':uid' => $user->uid))->fetchAll());
        if (!empty($seller)) {
          $form['shipping']['default_address']['first_name']['#default_value'] = $seller->first_name;
          $form['shipping']['default_address']['last_name']['#default_value'] = $seller->last_name;
          $form['shipping']['default_address']['company']['#default_value'] = $seller->company;
          $form['shipping']['default_address']['street1']['#default_value'] = $seller->street1;
          $form['shipping']['default_address']['street2']['#default_value'] = $seller->street2;
          $form['shipping']['default_address']['city']['#default_value'] = $seller->city;
          $form['shipping']['default_address']['zone']['#default_value'] = $seller->zone;
          $form['shipping']['default_address']['postal_code']['#default_value'] = $seller->postal_code;
          $form['shipping']['default_address']['country']['#default_value'] = $seller->country;
        }
      }

      $enabled = variable_get('uc_quote_enabled', array());
      if (!empty($enabled['mp_quote'])) {
        $form['shipping']['quote_method'] = array(
          '#type' => 'radios',
          '#title' => t('Shipping quote method'),
          '#required' => TRUE,
          '#default_value' => isset($node->mp_quote_method) ? $node->mp_quote_method : '',
          '#options' => array(t('Flat Rate'), t('USPS')),
        );
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function mp_quote_node_load($nodes) {
  foreach ($nodes as $node) {
    if (_mp_products_get_types($node->type)) {
      // Override store default address if no product specific address was found.
      $address = db_query("SELECT first_name, last_name, company, street1, street2, city, zone, postal_code, country, phone FROM {uc_quote_product_locations} WHERE nid = :nid", array(':nid' => $node->nid))->fetchAll();
      if (empty($address)) {
        $address = db_query("SELECT first_name, last_name, company, street1, street2, city, zone, postal_code, country, phone FROM {mp_quote_sellers} WHERE uid = :uid", array(':uid' => $node->uid))->fetchAll();
        if (!empty($address)) {
          $node->shipping_address = reset($address);
        }
      }
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function mp_quote_node_prepare($node) {
  if (_mp_products_get_types($node->type) && !empty($node->nid)) {
    $node->mp_quote_method = db_query("SELECT quote_method FROM {mp_quote_products} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
  }
}
  
/**
 * Implements hook_node_submit().
 */
function mp_quote_node_submit($node, $form, &$form_state) {
  if (isset($form_state['values']['quote_method'])) {
    $node->mp_quote_method_new = empty($node->mp_quote_method);
    $node->mp_quote_method = $form_state['values']['quote_method'];
  }
}

/**
 * Implements hook_node_insert().
 */
function mp_quote_node_insert($node) {
  mp_quote_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function mp_quote_node_update($node) {
  if (!empty($node->mp_quote_method)) {
    if ($node->mp_quote_method_new) {
      db_insert('mp_quote_products')
      ->fields(array('nid' => $node->nid, 'quote_method' => $node->mp_quote_method))
      ->execute();
    }
    else {
      db_update('mp_quote_products')
      ->fields(array(
      	'quote_method' => $node->mp_quote_method,
      ))
      ->condition('nid', $node->nid)
      ->execute();
    }
  }  
}

/**
 * Seller quote settings form.
 */
function mp_quote_seller_settings($form, $form_state, $account) {
  $address = reset(db_query("SELECT * FROM {mp_quote_sellers} WHERE uid = :uid", array(':uid' => $account->uid))->fetchAll());
  if (empty($address)) {
    $address = new UcAddress();
  }
  unset($address->phone);
  $form = array();
  $form['shipping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default shipping address'),
    '#description' => t('When delivering products to customers, the original location of the product must be known in order to accurately quote the shipping cost and set up a delivery.  This address will be used as the default for all products which do not have an individual shipping address defined.'),
  );
  $form['shipping']['default_address'] = array(
    '#type' => 'uc_address',
    '#default_value' => $address,
    '#required' => TRUE,
  );

  if (user_access('administer sellers')) {
    $form['shipping']['update_products'] = array(
      '#type' => 'checkbox',
      '#title' => t('Update shipping address on all products belonging to this user.'),
      '#default_value' => FALSE,
    );
  }

  $form['markup_amount'] = array(
    '#type' => 'textfield',
    '#default_value' => empty($address->markup_rate) ? '0' : $address->markup_rate,
    '#title' => t('Markup Amount'),
    '#size' => 10,
    '#description' => t('Enter a numeric value to be added to shipping quotes retrieved in real-time (i.e. USPS live rates). The purpose of this markup is to cover packaging or handling costs.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Seller quote settings form validate handler.
 */
function mp_quote_seller_settings_validate($form, &$form_state) {
  $pattern = '/^\d*(\.\d*)?$/';
  if (!is_numeric($form_state['values']['markup_amount']) && !preg_match($pattern, $form_state['values']['markup_amount'])) {
    form_set_error('markup_amount', t('Please enter a valid markup amount'));
  }
}

/**
 * Seller quote settings form submit handler.
 */
function mp_quote_seller_settings_submit($form, &$form_state) {
  $account = $form_state['build_info']['args'][0];

  db_delete('mp_quote_sellers')
    ->condition('uid', $account->uid)
    ->execute();
  db_insert('mp_quote_sellers')
    ->fields(array(
      'uid' => $account->uid,
      'first_name' => $form_state['values']['first_name'],
      'last_name' => $form_state['values']['last_name'],
      'company' => $form_state['values']['company'],
      'street1' => $form_state['values']['street1'],
      'street2' => $form_state['values']['street2'],
      'city' => $form_state['values']['city'],
      'zone' => $form_state['values']['zone'],
      'postal_code' => $form_state['values']['postal_code'],
      'country' => $form_state['values']['country'],
      'markup_rate' => $form_state['values']['markup_amount'],
    ))
    ->execute();

  if (user_access('administer sellers') && $form_state['values']['update_products']) {
    db_update('uc_quote_product_locations')
    ->fields(array(
      'first_name' => $form_state['values']['first_name'],
      'last_name' => $form_state['values']['last_name'],
      'company' => $form_state['values']['company'],
      'street1' => $form_state['values']['street1'],
      'street2' => $form_state['values']['street2'],
      'city' => $form_state['values']['city'],
      'zone' => $form_state['values']['zone'],
      'postal_code' => $form_state['values']['postal_code'],
      'country' => $form_state['values']['country'],
    ))
    ->where('nid IN (SELECT nid FROM {node} WHERE uid = %d)')
    ->execute();
  }

  drupal_set_message(t('Settings saved'));
}

/**
 * Implements hook_ca_predicate().
 *
 * Connect the quote action with the quote event.
 */
function mp_quote_ca_predicate() {
  $enabled = variable_get('uc_quote_enabled', array());
  $predicates = array();

  $predicates['mp_quote_get_quote'] = array(
    '#title' => t('Shipping quote via mp_quote'),
    '#trigger' => 'get_quote_from_mp_quote',
    '#class' => 'mp_quote',
    '#status' => $enabled['mp_quote'],
    '#actions' => array(
      array(
        '#name' => 'uc_quote_action_get_quote',
        '#title' => t('Fetch a marketplace shipping quote.'),
        '#argument_map' => array(
          'order' => 'order',
          'method' => 'method',
        ),
      ),
    ),
  );

  return $predicates;
}

/**
 * Implements hook_uc_shipping_method().
 */
function mp_quote_uc_shipping_method() {
  $methods = array();

  $enabled = variable_get('uc_quote_enabled', array());
  $weight = variable_get('uc_quote_method_weight', array());
  $methods['mp_quote'] = array(
    'id' => 'mp_quote',
    'module' => 'mp_quote',
    'title' => 'mp_quote',
    'enabled' => isset($enabled['mp_quote']),
    'description' => t('Marketplace Shipping Quotes'),
    'quote' => array(
      'type' => 'order',
      'callback' => 'mp_quote_quote',
      'accessorials' => array('Shipping' => t('Shipping')),
    ),
    'weight' => isset($weight['mp_quote']) ? $weight['mp_quote'] : 0,
  );

  return $methods;
}

/**
 * Callback for retrieving a multi vendor shipping quote.
 *
 * Request a quote on a per vendor basis. Therefore, the quote will
 * take longer to display if many vendors have products in user cart.
 *
 * @param $products
 *   Array of cart contents.
 * @param $details
 *   Order details other than product information.
 * @return
 *   JSON object containing rate, error, and debugging information.
 */
function mp_quote_quote($products, $details) {
  unset($_SESSION['mp_quote_rate']);
  // pbv = products by vendor
  // sort products into an array by vendor, so operations can be performed on a per vendor basis
  $pbv = array();
  foreach ($products as $product) {
    $quote_method = db_query("SELECT quote_method FROM {mp_quote_products} WHERE nid = :nid", array(':nid' => $product->nid))->fetchField();
    $pbv[$product->uid][$quote_method][] = $product;
  }

  // drupal_set_message('<pre>'. print_r($pbv, TRUE) .'</pre>');

  $sqr = 0;
  // sqr = shipping quote rate
  // vp = vendor's products
  // loop through vendors and perform operations (i.e. shipping calculations)
  foreach ($pbv as $uid => $vp) {
    $quotes = array();
    $_SESSION['mp_quote_rate'][$uid] = 0;
    // retrieve a shipping quote for this vendor's products based on methods selected

    // ===FLAT RATE QUOTE METHOD===
    if (isset($pbv[$uid][0])) {
      $flatrate_name = 'flatrate_' . variable_get('mp_quote_flatrate_id', 1);
      $quote = uc_flatrate_quote($pbv[$uid][0], $details, array('id' => $flatrate_name));
      if (empty($quote)) { // return if error retrieving quote
        return $quote;
      }
      $sqr += $quote[0]['rate'];
      $_SESSION['mp_quote_rate'][$uid] += $quote[0]['rate'];
    }

    // ===USPS QUOTE METHOD===
    if (isset($pbv[$uid][1])) {
      $quote = uc_usps_quote($pbv[$uid][1], $details, array('id' => 'usps'));
      if (empty($quote)) { // return if error retrieving quote
        return $quote;
      }
      $markup_rate = db_query("SELECT markup_rate FROM {mp_quote_sellers} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
      $sqr += $quote[1]['rate'] + $markup_rate; // 1 = USPS Priority Mail Service Code (Ubercart)
      $_SESSION['mp_quote_rate'][$uid] += $quote[1]['rate'] + $markup_rate;
    }

  }

  $quotes['Shipping'] = array(
    'rate' => $sqr,
    'format' => uc_currency_format($sqr),
    'option_label' => t('Shipping'),
  );

  return $quotes;
}

/**
 * Implements hook_uc_order().
 *
 * Saves the shipping rates per seller to db
 */
function mp_quote_uc_order($op, &$order, $arg2) {
  if ($op == 'submit' && !empty($_SESSION['mp_quote_rate'])) {
    foreach ($_SESSION['mp_quote_rate'] as $uid => $rate) {
      db_insert('mp_quote_shipping_rates')
      ->fields(array(
        'uid' => $uid,
        'order_id' => $order->order_id,
        'rate' => $rate,
      ))
      ->execute();
    }
    unset($_SESSION['mp_quote_rate']);
  }
}
