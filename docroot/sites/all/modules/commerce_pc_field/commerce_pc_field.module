<?php

/**
 * Implements hook_permission().
 */
function commerce_pc_field_permission() {
  return array(    
    'configure calc field settings' =>  array(
      'title' => t('Configure calculation field settings'),
      'description' => t('Allow administers to setup product types where 
        calculation field should be applied and batch calculated prices 
        for products of selected product types'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_pc_field_menu() {
  $items['admin/commerce/config/product-pricing/pre-calculation-field'] = array(
    'title' => 'Pre-calculation field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pc_field_settings_form'),
    'access arguments' => array('configure calc field settings'),
    'type' => MENU_LOCAL_TASK,  
    'weight' => 6,
  );
  
  return $items;
}

/**
 * Implements hook_entity_presave().
 */
function commerce_pc_field_entity_presave($product, $type) {  
  if ($type == 'commerce_product' && isset($product->field_calculated_price)) {
    // save original price data bcz rules update product 
    // object during calling commerce_product_calculate_sell_price()
    $original_price_value = $product->commerce_price['und'][0];
    $product->field_calculated_price['und'][0] = commerce_product_calculate_sell_price($product);
    // restore original price data
    $product->commerce_price['und'][0] = $original_price_value;    
  }
}

/**
 * Implements hook_commerce_product_ui_product_form_alter().
 */
function commerce_pc_field_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
  //dsm($form);
  if (isset($form['field_calculated_price']) && variable_get('commerce_pc_field_is_hide_field', 0)) {
    $form['field_calculated_price']['#access'] = FALSE;
  }
}

/**
 * Form callback: Pre-calculated field settings.
 */
function commerce_pc_field_settings_form($form, &$form_state) {  
  $product_types = commerce_product_types(); 
  $options = array();
  $active_product_types = array();
  $active_product_type_titles = array();
  foreach ($product_types as $pt) {
    $type = $pt['type'];
    // check if field exists for current Product type (bundle)
    $instance = field_info_instance('commerce_product', 
                                    'field_calculated_price', 
                                    $type);    
    if (is_array($instance)) {
      $active_product_types[] = $instance['bundle'];
      $active_product_type_titles[] = $pt['name'];
    }    
    $options[$type] = $pt['name'];
  }  

  $form['product_types'] = array(
    '#type' => 'checkboxes',
    '#default_value' => $active_product_types,
    '#title' => t('Product types'),    
    '#options' => $options,
    '#description' => t('Select product types that should have pre-calculation-field. 
      After submiiting a form field will be created for every picked product type.')
  );
  $form['commerce_pc_field_is_hide_field'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('commerce_pc_field_is_hide_field', 0),
    '#title' => t('Hide pre-calculation price field'),    
    '#description' => 'Pre-calculation price field will be hidden from product 
                       form but still will be updated after saving a product',
  );

  $form['database'] = array(
    '#type' => 'fieldset',
    '#title' => t('Generate prices for "Pre-calculation price" field'), 
    '#weight' => -10,    
    '#access' => sizeof($active_product_types),
  );

  $form['database']['batch_calculate'] = array(
    '#type' => 'submit',
    '#value' => t('Generate pre-calculated prices'),    
    '#suffix' => '<br><strong>Important</strong>: Use this button one time to generate pre-calculated prices and every time after adding/editing rules that affect on prices, for example Discounts',
  );  
  $form['#submit'][] = 'commerce_pc_field_settings_form_submit';

  return system_settings_form($form);
}

/**
 * Submit callback for commerce_pc_field_settings_form().
 */
function commerce_pc_field_settings_form_submit($form, &$form_state) {  
  $clicked_button = $form_state['clicked_button']['#parents'][0];  
  if ($clicked_button == 'submit') {
    $product_types = $form_state['values']['product_types'];

    foreach ($product_types as $bundle => $checked) {      
      $instance = field_info_instance('commerce_product', 
                                    'field_calculated_price', 
                                    $bundle);      
      if ($bundle === $checked) {        
        if (!is_array($instance)) {          
          $instance = commerce_pc_field_get_new_field_instance($bundle);
          field_create_instance($instance);
          drupal_set_message(
            t('Calculated price field for %product_type has been created', 
            array('%product_type' => $bundle))
          );
        } 
      } else {
        if (is_array($instance)) {          
          field_delete_instance($instance, FALSE);  
          drupal_set_message(
            t('Calculated price field for %product_type has been removed', 
            array('%product_type' => $bundle))
          );        
        } 
      }
    }
  } elseif ($clicked_button == 'batch_calculate') {
    $product_types = array_keys(array_filter($form_state['values']['product_types']));        

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'commerce_product')
    ->entityCondition('bundle', $product_types, 'IN')    
    ->execute();

    if (!isset($result['commerce_product'])) {      
      drupal_set_message(t("There's no any products for selected Product types"));
      return;
    }

    $batch = array(
      'title' => t('Update calculated price field'),
      'operations' => array(),
      'finished' => 'commerce_pc_field_batch_finished',
    );

    $number = 0;
    foreach ($result['commerce_product'] as $id => $obj) {      
      $batch['operations'][] = array('commerce_pc_field_batch_process', array($id));      
      $number++;
    }

    batch_set($batch);
  }
}

function commerce_pc_field_batch_process($id, &$context) {
  $product = entity_load_single('commerce_product', $id);
  entity_save('commerce_product', $product);
}

function commerce_pc_field_batch_finished($success, $results, $operations) {
  // remove message that is generated for 
  // "system settings form" by default during submitting
  unset($_SESSION['messages']);
  if ($success) {    
    drupal_set_message('Update has been completed!');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }  
}

/**
 * get an array for generating field instance of Calculated price field
 */
function commerce_pc_field_get_new_field_instance($bundle) {
  return array(    
    'field_name' => 'field_calculated_price', 
    'entity_type' => 'commerce_product',
    'label' => 'Calculated price',
    'bundle' => $bundle,
    'widget' => array(
      'type' => 'commerce_price_simple',
      'weight' => 20,
      'module' => 'commerce_price',
      'active' => TRUE,
      'settings' => array('currency_code' => 'default'),
    ),
    'settings' => array('user_register_form' => FALSE),
    'display' => array(
      'default' => array(
        'type' => ' commerce_price_formatted_amount',
        'label' => 'above',
        'settings' => array('calculation' => FALSE),
        'module' => 'commerce_price',
        'weight' => 10,
      ),
      'line_item' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 10,
      ),
      'node_teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 10,
      ),
    ),
  );
}

/**
 * get list of Product Types that contain field_calculated_price field
 */
function commerce_pc_field_get_product_types() {
  $result = array();
  $product_types = commerce_product_types();     
  foreach ($product_types as $pt) {
    $type = $pt['type'];
    // check if field exists for current Product type (bundle)
    $instance = field_info_instance('commerce_product', 
                                    'field_calculated_price', 
                                    $type);    
    if (is_array($instance)) {
      $result[] = $instance['bundle'];
    }
  }

  return $result;
}
