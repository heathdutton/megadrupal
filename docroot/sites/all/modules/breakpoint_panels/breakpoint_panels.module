<?php
/**
 * @file
 * Breakpoint Panels for the Panels and Breakpoint modules.
 */

/**
 * Implements hook_menu().
 */
function breakpoint_panels_menu() {
  $items = array();

  // Breakpoint Panels configuration page.
  $items['admin/config/user-interface/breakpoint_panels'] = array(
    'title' => 'Breakpoint Panels',
    'description' => 'Configure break point panels.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoint_panels_settings'),
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Modal pop-up form for assigning breakpoints to panes.
  $items['breakpoint_panels/%ctools_js/settings/form/%/%'] = array(
    'title' => t('Breakpoints Pane'),
    'page callback' => 'breakpoint_panels_modal_popup',
    'page arguments' => array(1, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'theme callback' => 'ajax_base_page_theme',
  );

  // Ajax rendering of a specific pane.
  $items['breakpoint-panels/get-pane/%'] = array(
    'title' => 'Breakpoint Panels AJAX pane handler',
    'page callback' => 'breakpoint_panels_panels_pane_handler',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function breakpoint_panels_libraries_info() {
  // Enquire.js and MatchMedia.js libraries can enhance usability for this module.
  $libraries['enquire.js'] = array(
    'name' => 'enquire.js',
    'files' => array(
      'js' => array(
        'enquire.min.js',
      ),
    ),
  );
  $libraries['matchMedia.js'] = array(
    'name' => 'matchMedia.js',
    'files' => array(
      'js' => array(
        'matchMedia.addListener.js',
        'matchMedia.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Menu callback: Displays the module's configuration settings form.
 */
function breakpoint_panels_settings($form, $form_state) {
  $form['breakpoint_panels_load_hidden_admins'] = array(
    '#title' => t('Load Hidden for Admins (recommended)'),
    '#type' => 'radios',
    '#options' => array(
      'no' => t('Do Not Load'),
      'yes' => t('Load Hidden'),
    ),
    '#default_value' => variable_get('breakpoint_panels_load_hidden_admins', 'yes'),
    '#description' => t('If selected, content will be loaded, but hidden via css for layout purposes.'),
  );
  $form['breakpoint_panels_load_hidden'] = array(
    '#title' => t('Load Hidden'),
    '#type' => 'radios',
    '#options' => array(
      'no' => t('Do Not Load'),
      'yes' => t('Load Hidden'),
    ),
    '#default_value' => variable_get('breakpoint_panels_load_hidden', 'no'),
    '#description' => t('If selected, content will be loaded, but hidden via css for development purposes.'),
  );
  $form['breakpoint_panels_breakpoint_reload'] = array(
    '#title' => t('Auto Reload'),
    '#type' => 'radios',
    '#options' => array(
      'no' => t('Do Not Load'),
      'yes' => t('Auto Reload'),
    ),
    '#default_value' => variable_get('breakpoint_panels_breakpoint_reload', 'no'),
    '#description' => t('If selected, content will be refreshed on resize if media queries change.  This will annoy users but may be handy for development.'),
  );
  $form['breakpoint_panels_show_types'] = array(
    '#title' => t('Show Types'),
    '#type' => 'select',
    '#options' => array(
      'all' => t('All Breakpoints'),
      'active' => t('Active Breakpoints'),
      'custom' => t('Custom Breakpoints'),
      'module' => t('Module Defined Breakpoints'),
      'theme' => t('Theme Defined Breakpoints'),
    ),
    '#default_value' => variable_get('breakpoint_panels_show_types', 'all'),
    '#description' => t('When assigning breakpoints for a pane to be displayed, show the following types of breakpoints. You may want to switch it to custom if you have modules installed that created breakpoints that you do not want listed.'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_panels_ipe_pane_links_alter().
 *
 * Displays the "BP" button in the IPE.
 */
function breakpoint_panels_panels_ipe_pane_links_alter(&$links, $pane, $display) {
  $current_page = page_manager_get_current_page();
  if ( !empty($pane['pane']->pid) && !empty($current_page['handler']) ) {
    $handler = $current_page['handler'];
    $cache_key = 'panel_context:' . $handler->task . '::' . $handler->name . '::::';
    $links['global'] = array(
      'title' => t('Breakpoint settings'),
      'href' => 'breakpoint_panels/nojs/settings/form/' .$cache_key . '/' . $pane['pane']->pid,
      'attributes' => array(
        'class' => 'ctools-use-modal ctools-modal-modal-popup-small',
      ),
    );
  }
}

/**
 * Implements hook_get_pane_links_alter().
 */
function breakpoint_panels_get_pane_links_alter(&$links, $pane) {
  if (!empty($pane->pid)) {
    $taskarg = arg(5);
    $handler = arg(7);
    $cache_key = 'panel_context:' . $taskarg . '::' . $handler . '::::';

    $links['style']['breakpoint_settings'] = array(
      'title' => t('Breakpoint settings'),
      'href' => 'breakpoint_panels/nojs/settings/form/' . $cache_key . '/' . $pane->pid,
      'attributes' => array('class' => array('ctools-use-modal')),
    );
  }
}

/**
 * Creates a modal popup.
 * a lot of this code taken from panels_renderer_editor.class 
 */
function breakpoint_panels_modal_popup($js = NULL, $cache_key, $pid) {
  ctools_include('display-edit', 'panels');
  ctools_include('plugins', 'panels');
  ctools_include('ajax');
  ctools_include('modal');
  ctools_include('context');
  ctools_include('content');

  $plugin = panels_get_display_renderer('editor');
  $cache = panels_edit_cache_get($cache_key);
  $renderer = panels_get_renderer_handler($plugin, $cache->display);

  $renderer->cache = &$cache;
  ctools_include('cleanstring');
  $renderer->clean_key = ctools_cleanstring($cache_key);

  $pane = &$renderer->cache->display->content[$pid];
  $subtype = ctools_content_get_subtype($pane->type, $pane->subtype);

  $form_state = array(
    'display' => &$renderer->display,
    'pane' => &$pane,
    'ajax' => TRUE,
    'title' => t('Configure breakpoint settings on !subtype_title', array('!subtype_title' => $subtype['title'])),
  );

  $modal_output = ctools_modal_form_wrapper('breakpoint_panels_pane_settings_form', $form_state);

  if (empty($form_state['executed'])) {
    $output = $modal_output;
  } else {
    panels_edit_cache_set($renderer->cache);
    $renderer->command_update_pane($pid);
    $renderer->commands[] = ctools_modal_command_dismiss();
    $output = $renderer->commands;
  }

  print ajax_render($output);
  drupal_exit();
}

/**
 * Settings form callback.
 *
 * Create the setting form displayed in the modal popup when assigning
 * breakpoints to panes.
 */
function breakpoint_panels_pane_settings_form($style_settings, $form_state) {
  $form = array();
  $bps = breakpoint_panels_get_breakpoints();

  ctools_form_include($form_state, 'plugins', 'panels');
  form_load_include($form_state, 'php', 'panels', '/plugins/display_renderers/panels_renderer_editor.class');
  $display = &$form_state['display'];
  $pane = &$form_state['pane'];

  // Loop through the breakpoints and check for existing settings.
  foreach ($bps as $bp) {
    $default = TRUE;
    if (!empty($pane->configuration['breakpoints'])) {
      if (isset($pane->configuration['breakpoints'][$bp->breakpoint_panels_name])) {
        $default = $pane->configuration['breakpoints'][$bp->breakpoint_panels_name];
      }
    }

    $form[$bp->breakpoint_panels_name] = array(
      '#type' => 'checkbox',
      '#title' => filter_xss(t('Display ' . $bp->name)),
      '#default_value' => $default,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['pid'] = array(
    '#type' => 'hidden',
    '#value' => $pid,
  );
  $form['task_id'] = array(
    '#type' => 'hidden',
    '#value' => $task_id,
  );
  $form['subtask_id'] = array(
    '#type' => 'hidden',
    '#value' => $subtask_id,
  );
  $form['did'] = array(
    '#type' => 'hidden',
    '#value' => $did,
  );

  return $form;
}

/**
 * Settings form submission.
 *
 * Processes the modal popup settings form after the user has selected which
 * breakpoints a pane will be displayed.
 */
function breakpoint_panels_pane_settings_form_submit(&$form, &$form_state) {
  $bps = breakpoint_panels_get_breakpoints();
  $pane = &$form_state['pane'];
  $display = $form_state['display'];

  $pane->configuration['breakpoints'] = array();
  foreach ($bps as $bp) {
    if (!$bp) {
      continue;
    }
    $pane->configuration['breakpoints'][$bp->breakpoint_panels_name] = $form[$bp->breakpoint_panels_name]['#value'];
  }
  $form_state['executed'] = TRUE;
  return;
}

/**
 * Implements hook_panels_pre_render().
 *
 * Add the breakpoint panels configuration settings to js settings.
 */
function breakpoint_panels_panels_pre_render($display) {
  $settings = breakpoint_panels_get_config();
  drupal_add_js(array(
    'breakpoint_panels_breakpoint' => $settings,
  ), 'setting');

  // Set enquire.js requirement warning.
  if (!$settings['hasEnquire']) {
    $msg = t('Breakpoint Panels requires the enquire.js library. Please download the enquire.min.js file from http://wicky.nillia.ms/enquire.js/ and make sure it is here:<br/>/sites/<"all" or site>/libraries/enquire.js/enquire.min.js');

    // Make sure we only set the message once instead of once for each pane on the page.
    $existing_msgs = drupal_get_messages('error');
    $exists = FALSE;
    if (isset($existing_msgs['error'])) {
      foreach ($existing_msgs['error'] as $m) {
        if ($m == $msg) {
          $exists = TRUE;
        }
      }
    }

    if (!$exists) {
      drupal_set_message($msg, 'error');
    }
  }

  // Set enquire.js requirement warning.
  if (!$settings['hasMatchMedia']) {
    $msg = t('The enquire.js library used by Breakpoint Panels will display more accurately on older browsers like IE if you install the MatchMedia.js library. Please download the matchMedia.js and matchMedia.addListener.js files from https://github.com/paulirish/matchMedia.js/ and make sure they are here:<br/>/sites/<"all" or site>/libraries/matchMedia.js/matchMedia.js<br/>/sites/<"all" or site>/libraries/matchMedia.js/matchMedia.addListener.js');

    // Make sure we only set the message once instead of once for each pane on the page.
    $existing_msgs = drupal_get_messages('warning');
    $exists = FALSE;
    if (isset($existing_msgs['warning'])) {
      foreach ($existing_msgs['warning'] as $m) {
        if ($m == $msg) {
          $exists = TRUE;
        }
      }
    }

    if (!$exists) {
      drupal_set_message($msg, 'warning');
    }
  }
}

/**
 * Returns the configuration for the breakpoint panels and a list of available breakpoints.
 */
function breakpoint_panels_get_config() {
  $conf = array();

  $valid = array(
    'width',
    'min-width',
    'max-width',
    'height',
    'min-height',
    'max-height',
    'aspect-ratio',
    'min-aspect-ratio',
    'max-aspect-ratio',
  );

  $bps = breakpoint_panels_get_breakpoints();

  // Loop through each breakpoint and parse its conditions.
  foreach ($bps as $breakpoint) {
    if (!$breakpoint) {
      continue;
    }

    // Parse the condition.
    $conditions = breakpoint_panels_parse($breakpoint->breakpoint);

    $point = array();

    if (!empty($conditions)) {
      foreach ($conditions as $cmd => $value) {
        if (in_array($cmd, $valid)) {
          $point[$cmd] = $value;
        }
      }
    }

    if (count($point)) {
      // Store the settings for each breakpoint in the JS.
      $conf['breakpoints'][$breakpoint->machine_name] = $point;
      $conf['breakpoints'][$breakpoint->machine_name]['bp'] = $breakpoint->breakpoint;
      $conf['breakpoints'][$breakpoint->machine_name]['css'] = $breakpoint->breakpoint_panels_name;
    }
  }

  // Module settings.
  $conf['autoload'] = (variable_get('breakpoint_panels_breakpoint_reload', 'no') != 'no') ? TRUE : FALSE;
  $conf['adminload'] = (variable_get('breakpoint_panels_load_hidden_admins', 'yes') != 'no') ? TRUE : FALSE;
  $conf['loadhidden'] = (variable_get('breakpoint_panels_load_hidden', 'no') != 'no') ? TRUE : FALSE;
  $conf['showtypes'] = variable_get('breakpoint_panels_show_types', 'all');
  $conf['isloggedin'] = user_is_logged_in();

  $conf['hasEnquire'] = FALSE;
  $enquire_path = libraries_get_path('enquire.js');
  if ($enquire_path && file_exists($enquire_path . '/enquire.min.js')) {
    $conf['hasEnquire'] = TRUE;
  }

  $conf['hasMatchMedia'] = FALSE;
  $match_media_path = libraries_get_path('matchMedia.js');
  if (
    $match_media_path
    && file_exists($match_media_path . '/matchMedia.js')
    && file_exists($match_media_path . '/matchMedia.addListener.js')
  ) {
    $conf['hasMatchMedia'] = TRUE;
  }

  return $conf;
}

/**
 * Parse the min and max dimensions for a breakpoint.
 */
function breakpoint_panels_parse($query) {
  $query = str_replace(' ', '', $query);

  preg_match_all('/\(([a-z\-]+)\:(.+?)\)/', $query, $matches);

  $point = array();
  $count = count($matches[0]);
  for ($i = 0; $i < $count; $i++) {
    $cmd = $matches[1][$i];
    $value = $matches[2][$i];

    switch ($cmd) {
      case 'width':
      case 'min-width':
      case 'max-width':
      case 'height':
      case 'min-height':
      case 'max-height':
      case 'device-width':
      case 'min-device-width':
      case 'max-device-width':
      case 'device-height':
      case 'min-device-height':
      case 'max-device-height':
        // Only px values are supported.
        if (strpos($value, 'px') !== FALSE) {
          $point[$cmd] = (int)str_replace('px', '', $value);
        }
        break;

      case 'aspect-ratio':
      case 'min-aspect-ratio':
      case 'max-aspect-ratio':
      case 'device-aspect-ratio':
      case 'min-device-aspect-ratio':
      case 'max-device-aspect-ratio':
        $parts = explode('/', $value);

        if (count($parts) === 2 && is_numeric($parts[0]) && is_numeric($parts[1])) {
          $point[$cmd] = (float)$parts[0] / (float)$parts[1];
        }

        break;

      default:
        // Unsupported.
        break;
    }
  }

  return count($point) ? $point : FALSE;
}

/**
 * Implements hook_panels_pane_content_alter().
 *
 * Checks for panes that have specific breakpoint settings and swaps their contents out for a placeholder,
 * that will later be filled in with AJAX if rendered on the screen size being viewed on.
 *
 * Some code here taken from / inspired by the ajax_pane project. Thank you to creaoy, twistor, and undertext.
 */
function breakpoint_panels_panels_pane_content_alter($content, $pane, $args, $context, panels_renderer_standard $renderer, panels_display $display) {

  // Check if the processing is even required, if not return.
  if (
    !empty($pane->ajax_rendering)
    || empty($pane->configuration['breakpoints'])
    || empty($pane->pid)
  ) {
    // This is either an AJAX call for the real content, there are no breakpoint settings defined,
    // or there is no valid pid on the pane, if that's the case nothing to do here, bail.
    return;
  }

  // ensure we have Drupal.ajax
  drupal_add_library('system', 'drupal.ajax');

  // Default ajax to TRUE, then prove otherwise.
  $use_ajax = FALSE;

  // Determine if the pane is loaded for all available breakpoints.
  // If so do not use ajax to load.
  $bps = breakpoint_panels_get_breakpoints();

  // Loop through each breakpoint and check for it, the second one isn't found we know
  // that we need to swap in a placeholder and load the pane contents via AJAX.
  if (!empty($bps)) {
    foreach ($bps as $bp) {
      if (empty($pane->configuration['breakpoints'][$bp->breakpoint_panels_name])) {
        $use_ajax = TRUE;
        break;
      }
    }
  }

  // If ajax is not needed for this pane, nothing else to do here, bail.
  if (!$use_ajax) {
    return;
  }

  // At this point we know we have a pane with breakpoint panels settings, so we need to
  // swap out its contents for a placeholder and the content will be be loaded after
  // page load via AJAX to allow for caching to work between screen sizes.

  // Load the supporting libraries if available.
  if ($path = libraries_get_path('matchMedia.js')) {
    drupal_add_js($path . '/matchMedia.js');
    drupal_add_js($path . '/matchMedia.addListener.js');
  }
  if ($path = libraries_get_path('enquire.js')) {
    drupal_add_js($path . '/enquire.min.js');
  }

  // Load the modules .js file on the page
  drupal_add_js(drupal_get_path('module', 'breakpoint_panels') . '/js/breakpoint_panels.js');

  $pass_context = array();

  // Load the current page manager handler object to get the name.
  $task_context = page_manager_get_current_page();
  if (stristr($task_context['name'], '-')) {
    list($task_id, $subtask_id) = explode('-', $task_context['name']);
  }
  else {
    $task_id = $task_context['name'];
    $subtask_id = '';
  }
  $pass_context['task'] = $task_id;
  $pass_context['subtask'] = $subtask_id;

  if (!empty($pane->pid)) {
    $pass_context['pid'] = $pane->pid;
  }
  if (!empty($args)) {
    $pass_context['args'] = $args;
  }

  // Check for panelizer, and pass context so that it can be rebuilt.
  if (!empty($context['panelizer'])) {
    $pass_context['panelizer'] = 1;
    if (!empty($context['panelizer']->keyword)) {
      $pass_context['panelizer_keyword'] = $context['panelizer']->keyword;
    }
    if (!empty($context['panelizer']->argument)) {
      $pass_context['panelizer_argument'] = $context['panelizer']->argument;
    }
  }

  // Serailize and encode the arguments needed to rebuild the context after an
  // AJAX request asks for this pane's contents. Make this into a URL for the AJAX call.
  $url = url('breakpoint-panels/get-pane/' . base64_encode(serialize($pass_context)));

  // Create an ID for the pane to be assigned in the DOM.
  $id = uniqid('breakpoint-panels-pane-' . $pane->pid . '-');

  // If the content has a title clear it out, it will be reloaded within the placeholder
  // after the AJAX load.
  unset($content->title);

  // Loop through the breakpoints that have been set and create a class for them.
  $classes = '';
  foreach ($pane->configuration['breakpoints'] as $bp => $val) {
    if (!$val) {
      $classes .= ' hide-' . $bp;
    }
  }
  $classes = trim($classes);

  $ipemessage = '';
  $css = '';
  $hides = array();
  // Loop through each breakpoint and check for if it needs added to the panes hidden styles.
  foreach ($bps as $bp) {
    // If the breakpoint setting is found and is set to false, then push it to the hidden array.
    if (
      isset($pane->configuration['breakpoints'][$bp->breakpoint_panels_name])
      && $pane->configuration['breakpoints'][$bp->breakpoint_panels_name] == 0
    ) {
      array_push($hides, $bp->breakpoint_panels_name);
      $ipemessage .= '<br />Hidden from ' . $bp->name;
    }

    // Add to the CSS string.
    $css .= '@media ' . $bp->breakpoint . ' { .hide-' . $bp->breakpoint_panels_name . ' { display:none } .hide-responsive.panels-ipe-editing .ipe-hide-' . $bp->breakpoint_panels_name . ' { display:none } } .panels-ipe-editing ' . '.hide-' . $bp->breakpoint_panels_name . ' { display:block }';
  }

  // Add the needed CSS to the page.
  drupal_add_css($css, array('group' => CSS_DEFAULT, 'type' => 'inline'));
  drupal_add_css(drupal_get_path('module', 'breakpoint_panels') . '/breakpoint_panels.css', array('type' => 'file',
    'media' => 'screen'));

  // Cleanup the IPE Message.
  if (!empty($ipemessage)) {
    $ipemessage = '<div class="ipemessage">' . $ipemessage . '<br /><br /></div>';
  }

  // Swap content out for a placeholder.
  $content->content = '<div class="' . $classes . '" data-pane="' . $pane->pid . '">' . $ipemessage . '<div id="' . $id . '" class="bp-ajax-pane" data-src="' . $url . '"></div></div>';

  // Set a flag so to tell this same hook not do the placeholder swap
  // when the pane is rendered via AJAX.
  $content->use_ajax_render = TRUE;
}

/**
 * Menu handler to serve individual panel-panes via AJAX.
 *
 * If the pane uses context like with panelizer it can be passed as a base64 encoded serialized
 * array.
 */
function breakpoint_panels_panels_pane_handler($encoded_context = '', $element_id='') {
  // Make sure required ctools functions/methods will be available.
  ctools_include('plugins', 'panels');
  ctools_include('content');
  ctools_include('context-task-handler');
  // todo: may be able to better accomodate a more universal context support.
  // Check for a context and decode it.
  $context = array();
  if (!empty($encoded_context)) {
    $context = unserialize(base64_decode($encoded_context));
  }
  $task_id = $context['task'];
  $subtask_id = isset($context['subtask']) ? $context['subtask'] : '';

  // @todo Decide whether we should throw a 404 given that we have not enough
  //   context.
  $pid = !empty($context['pid']) ? $context['pid'] : 0;

  // Load the page and the task object.
  $task = page_manager_get_task($task_id);

  $display = _breakpoint_panels_get_display($pid, $task_id, $subtask_id);

  if (!empty($context['args'])) {
    $contexts = ctools_context_handler_get_task_contexts($task, $subtask_id, $context['args']);
    $contexts = ctools_context_handler_get_handler_contexts($contexts, $display);
    $display->context = $contexts;
  }

  // If the pane uses panelizer then we need to load the context of the entity/node being viewed.
  if (!empty($context['panelizer'])) {
    $display->context['panelizer'] = new ctools_context;
    // Load a node for context. This is needed for entity field rendering on a panelizer page.
    if (
      !empty($context['panelizer_argument'])
      && is_numeric($context['panelizer_argument'])
      && !empty($context['panelizer_keyword'])
    ) {
      if (isset($display->args) && is_array($display->args)) {
        $display->args[] = $context['panelizer_argument'];
      }
      else {
        $display->args = array($context['panelizer_argument']);
      }

      if ($context['panelizer_keyword'] == 'node') {
        $display->context['panelizer']->data = node_load($context['panelizer_argument']);
      }
    }
  }

  // Find the pane.
  $pane = $display->content[$pid];

  // Set flag so that we don't rewrite content.
  $pane->ajax_rendering = TRUE;

  // Find the renderer being used for this pane.
  $renderer = panels_get_renderer_handler($display->renderer, $display);

  // Render the new content.
  $content = $renderer->render_pane_content($pane);

  // Setup the variables array and theme it with the panes_pane template.
  $variables = array(
    'content' => $content,
    'pane' => $pane,
    'display' => $display,
  );

  $replace = theme('panels_pane', $variables);
  $commands = array();
  $commands[] = ajax_command_replace('#' . $element_id, $replace);
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}


/**
 * Internal method to get the display object of a pane.
 */
function _breakpoint_panels_get_display($pid=NULL, $task_id=NULL, $subtask_id=NULL, $did=NULL) {
  // Make sure required ctools functions/methods will be available.
  ctools_include('plugins', 'panels');
  ctools_include('content');
  ctools_include('context-task-handler');

  // Load the page and the task object.
  $task = page_manager_get_task($task_id);

  // Load the available task handlers, which allows us to access the display.
  $handlers = page_manager_load_sorted_handlers($task, $subtask_id, TRUE);
  $id = ctools_context_handler_get_render_handler($task, $subtask_id, $handlers, array(), array());
  if (empty($id)) {
    // check handlers for display with our pid.
    foreach ($handlers as $our_id => $handler) {
      if (empty($handler->conf['display']) && !empty($handler->conf['did'])) {
        $temp_display = panels_load_display($handler->conf['did']);
      }
      else {
        $temp_display = $handler->conf['display'];
      }
      if (!empty($temp_display->content[$pid])) {
        $id = $our_id;
        break;
      }
    }
  }
  // Load the display object.
  if (!empty($handlers[$id]->conf['display'])) {
    $display = $handlers[$id]->conf['display'];
  }
  elseif (!empty($handlers[$id]->conf['did'])) {
    $display = panels_load_display($handlers[$id]->conf['did']);
  }
  // if fetching the display as usual did not work.
  if (empty($display)) {
    // Load the pane so that we can update the configuration.
    $display = panels_load_display($did);
  }
  return $display;
}

/**
 * Returns list of all breakpoints with a CSS friendly name.
 */
function breakpoint_panels_get_breakpoints() {
  // Check the module configuration preference for which types to display as options.
  $types = variable_get('breakpoint_panels_show_types', 'all');
  if ($types == 'active') {
    $breakpoints = breakpoints_breakpoint_load_all_active();
  }
  if ($types == 'module') {
    $breakpoints = breakpoints_breakpoint_load_all_module();
  }
  if ($types == 'theme') {
    global $theme_key;
    $breakpoints = breakpoints_breakpoint_load_all_theme($theme_key);
  }
  if ($types == 'custom') {
    $breakpoints = breakpoints_breakpoint_load_all_custom();
  }
  else {
    $breakpoints = breakpoints_breakpoint_load_all();
  }

  // For each breakpoint find a base name to use from the machine name, then make a css
  // friendly name the module can use as a unique identifier.
  foreach ($breakpoints as $ix => $bp) {
    $arr_test = explode('.', $bp->machine_name);
    if (is_array($arr_test)) {
      $base = array_pop($arr_test);
    }
    else {
      $base = $bp->machine_name;
    }

    $breakpoints[$ix]->breakpoint_panels_name = drupal_clean_css_identifier(str_replace('.', '-', $bp->machine_name));
  }

  return $breakpoints;
}
