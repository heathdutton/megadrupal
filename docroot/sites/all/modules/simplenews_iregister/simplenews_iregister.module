<?php

/**
 * @file
 * Generates the iframe code for the remote registration on Simplenews.
 *
 * Date: Thu Nov 21 11:24:58 CET 2013
 * File: simplenews_iregister.module
 * Author: Callegari Stefano
 */

/**
 * Implements hook_help().
 *
 * SC Thu Nov 21 11:32:20 CET 2013 stefano
 */
function simplenews_iregister_help($path, $arg) {
  $help = "";

  switch ($path) {
    case 'admin/help#simplenews_iregister':
      $help = "<p>" . t('Simple Iregister generates the iframe code to have a Simplenews block to manage subscription for a single newsletter.') . "</p>";
      break;
  }

  return $help;
}

/**
 * Implements hook_permission().
 *
 * SC Thu Nov 21 12:31:35 CET 2013 stefano
 */
function simplenews_iregister_permission() {
  return array(
    'newsletter iregister admin setting' => array(
      'title' => t('Newsletter iframe register admin setting')),
    'newsletter iregister admin setting own' => array(
      'title' => t('Newsletter iframe register admin setting own newsletter')));
}

/**
 * Implements hook_menu().
 *
 * Arguments: 1 newsletter id, 2 key, 3 lang
 *
 * SC Thu Nov 21 12:44:55 CET 2013 stefano
 */
function simplenews_iregister_menu() {
  $items = array();
  $items['iregister/%/%'] = array(
    'title' => 'Iregister',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_iregister_code_form', 1, 3),
    'access callback' => '_simplenews_iregister_code_iframe_perm',
    'access arguments' => array(1, 2));
  $items['admin/config/services/simplenews/iregister'] = array(
    'title' => 'Iframe general key',
    'description' => 'Newsletter iframe key management.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_iregister_admin_setting'),
    'access arguments' => array('newsletter iregister admin setting'),
    'weight' => 10,
    'file' => 'simplenews_iregister.admin.inc');
  $items['iregister_done/%'] = array(
    'title' => 'Iregister registration done',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_iregister_done_form', 1),
    'access callback' => TRUE);

  return $items;
}

/**
 * Implements hook_theme().
 *
 * SC 14/mar/2014 11:53:50 stefano
 */
function simplenews_iregister_theme($existing, $type, $theme, $path) {
  return array(
    'simplenews_iregister' => array(
      'template' => 'page--simplenews-iregister-iframe',
      'pattern' => 'page--simplenews-iregister-iframe__',
      'render element' => 'page',
      'path' => $path . '/templates'),
    'simplenews_iregister_confirm' => array(
      'template' => 'page--simplenews-iregister-confirm',
      'pattern' => 'page--simplenews-iregister-confirm__',
      'render element' => 'page',
      'path' => $path . '/templates'),
    'simplenews_iregister_done' => array(
      'template' => 'page--simplenews-iregister-done',
      'pattern' => 'page--simplenews-iregister-done__',
      'render element' => 'page',
      'path' => $path . '/templates'));
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * SC 14/mar/2014 16:58:41 stefano
 */
function simplenews_iregister_preprocess_page(&$variables, $hook) {
  $base = $variables['page']['content']['system_main'];
  if (isset($base['newsletter']) && variable_get('simplenews_iregister_urldone_internal_' . $base['newsletter']['#value']->tid, FALSE)) {
    $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_confirm';
    $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_confirm__' . $base['newsletter']['#value']->tid;
    if (isset($base['#id']) && $base['#id'] == 'simplenews-confirm-removal-form') {
      $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_confirm__remove__' . $base['newsletter']['#value']->tid;
    }
    elseif (isset($base['#id']) && $base['#id'] == 'simplenews-confirm-add-form') {
      $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_confirm__add__' . $base['newsletter']['#value']->tid;
    }
  }
  if (isset($base['#id']) && $base['#id'] == 'simplenews-iregister-code-form') {
    $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_iframe';
    $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_iframe__' . $base['tid']['#value'];
  }
  if (isset($base['#id']) && $base['#id'] == 'simplenews-iregister-done-form') {
    $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_done';
    $variables['theme_hook_suggestions'][] = 'page__simplenews_iregister_done__' . $base['#tid']['#value'];
  }
}

/**
 * Implements hook_form_alter().
 *
 * SC Fri Nov 22 01:17:32 CET 2013 stefano
 */
function simplenews_iregister_form_simplenews_admin_category_form_alter(&$form, &$form_state, $form_id) {
  $form['simplenews_iregister'] = array(
    '#type' => 'fieldset',
    '#title' => t('Iframe register'),
    '#collapsible' => FALSE,
    '#weight' => 99);
  $form['simplenews_iregister']['iframekey'] = array(
    '#type' => 'fieldset',
    '#title' => t('Iframe key'),
    '#collapsible' => FALSE,
    '#weight' => 98);
  $form['simplenews_iregister']['iframekey']['keyown'] = array(
    '#type' => 'textfield',
    '#size' => 40,
    '#title' => t('The key to validate the iframe'),
    '#description' => t('Insert an alphanumeric case sensitive string [a-z 0-9]. <b>Avoid to change the string or the old iframe will be rejected</b>.'),
    '#required' => TRUE,
    '#default_value' => check_plain(variable_get('simplenews_iregister_keyown_' . $form['tid']['#value'], "")),
    '#element_validate' => array('_simplenews_iregister_keyown_validate'));
  $form['simplenews_iregister']['iframekey']['iframeurl'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => t('The URLs where are the iframes'),
    '#description' => t('Insert a  separated by commas string of domains where you have put this iframe, like "www.example.com,newls.example2.com". For a better checks, you can use their IP'),
    '#required' => TRUE,
    '#default_value' => check_plain(unserialize(variable_get('simplenews_iregister_iframe_hosts_' . $form['tid']['#value'], ""))['domains']));

  $foo_keyown = variable_get('simplenews_iregister_keyown_' . $form['tid']['#value'], "");
  $foo_iframe_hosts = variable_get('simplenews_iregister_iframe_hosts_' . $form['tid']['#value'], "");
  if (!empty($foo_keyown) && !empty($foo_iframe_hosts)) {

    // Js to pass the lang from the browser/client.
    //
    // SC 27/feb/2014 16:12:26 stefano.
    $lang_from_js = <<<EOS
<script type="text/javascript">
function setSrc()
{
  var ilink = document.getElementById("simplenews_{$form['tid']['#value']}");
  var ref = ilink.getAttribute("src");
  var language = window.navigator.userLanguage || window.navigator.language;
  ilink.setAttribute("src", ref+"/"+language);
}
if (window.addEventListener) {
  window.addEventListener("load", setSrc, false);
} else {
  window.attachEvent("onload", setSrc);
}
setSrc();
</script>
EOS;

    $foo_url = url("iregister/" . $form['tid']['#value'] . "/" . _simplenews_iregister_key($form['tid']['#value']), array(
      "absolute" => TRUE));

    $form['simplenews_iregister']['iframekey']['iframecode'] = array(
      '#type' => 'item',
      '#title' => t('Iframe'),
      '#description' => t('Copy this code on your site.'),
      '#markup' => "<code>" . check_plain($lang_from_js) . check_plain('<iframe class="drupal_simplenews" id="simplenews_' . $form['tid']['#value'] . '" src="' . $foo_url . '">Sorry, your browser doesn\'t support iframe</iframe>') . "</code>");
  }
  // Added a fieldset for the css.
  //
  // SC 10/feb/2014 17:19:18 stefano.
  $form['simplenews_iregister']['iframecss'] = array(
    '#type' => 'fieldset',
    '#title' => t('Iframe CSS'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 99);
  $form['simplenews_iregister']['iframecss']['css'] = array(
    '#type' => 'textarea',
    '#description' => t('Adds the CSS rules for the iframe content.'),
    '#default_value' => check_plain(variable_get('simplenews_iregister_css_' . $form['tid']['#value'], "")));

  // Manages the confirmation page when "Opt-in/out method" has set to Double
  //
  // SC 14/mar/2014 10:25:32 stefano.
  $form['simplenews_iregister']['urldone'] = array(
    '#type' => 'fieldset',
    '#title' => t('Iframe confirm URL'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 99);
  $form['simplenews_iregister']['urldone']['text'] = array(
    '#type' => 'item',
    '#title' => t('Manages the confirmation pages when "Opt-in/out method" has set to Double (the same for (un)subscribe).'));
  $form['simplenews_iregister']['urldone']['internal_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('Internal URL'),
    '#description' => t('Uses an anonymous page instead the default page or the URL below.'),
    '#default_value' => variable_get('simplenews_iregister_urldone_internal_' . $form['tid']['#value'], ""));
  $form['simplenews_iregister']['urldone']['other_url'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => t('Other URL'),
    '#description' => t('Sets the URL where will sent the user after has confirmed the operation.'),
    '#default_value' => check_plain(variable_get('simplenews_iregister_urldone_url_' . $form['tid']['#value'], "")));

  $form['#submit'][] = '_simplenews_iregister_keyown_submit';
  $form['#submit'][] = '_simplenews_iregister_css_submit';
}

/**
 * Form validate.
 *
 * SC Fri Nov 22 09:59:37 CET 2013 stefano
 */
function _simplenews_iregister_keyown_validate($form, &$form_state) {
  if (preg_match('|.*[^a-zA-Z0-9]+.*|', $form_state['values']['keyown'])) {
    form_set_error('keyown', t('Only alphanumeric characters.'));
  }
}

/**
 * Form submit.
 *
 * SC Fri Nov 22 09:59:57 CET 2013 stefano
 *
 * @see simplenews_iregister_form_simplenews_admin_category_form_alter()
 */
function _simplenews_iregister_keyown_submit($form, &$form_state) {
  // Save the old variable.
  //
  // SC 31/gen/2014 13:00:17 stefano.
  $old_keyown = variable_get('simplenews_iregister_keyown_' . $form_state['values']['tid'], $form_state['values']['keyown'], '');
  variable_set('simplenews_iregister_keyown_' . $form_state['values']['tid'], $form_state['values']['keyown']);

  // Retrieves an ip array from the domains list.
  //
  // SC Fri Nov 22 16:05:30 CET 2013 stefano.
  $domains = explode(',', $form_state['values']['iframeurl']);

  $host_ip = array();
  foreach ($domains as $value) {
    $host_ip[] = gethostbyname(check_plain($value));
  }
  variable_set('simplenews_iregister_iframe_hosts_' . $form_state['values']['tid'], serialize(array(
    'hostip' => $host_ip,
    'domains' => $form_state['values']['iframeurl'])));

  // Checks if the user change the key so needs a new iframe.
  //
  // SC 31/gen/2014 12:48:38 stefano.
  if ($old_keyown != variable_get('simplenews_iregister_keyown_' . $form_state['values']['tid'], $form_state['values']['keyown'], '')) {
    $foo_url = url("iregister/" . $form['tid']['#value'] . "/" . _simplenews_iregister_key($form['tid']['#value']), array(
      "absolute" => TRUE));
    $categories = simplenews_categories_load_multiple();

    $message = t('<b>IFRAME</b> You can put the follow code in your site for <i>@newslname</i>:<br />!newsliframe', array(
      '@newslname' => _simplenews_newsletter_name($categories[$form['tid']['#value']]),
      '!newsliframe' => $form['simplenews_iregister']['iframekey']['iframecode']['#markup']));

    drupal_set_message($message);
  }

  // Page done.
  //
  // SC 14/mar/2014 10:56:43 stefano.
  variable_set('simplenews_iregister_urldone_internal_' . $form_state['values']['tid'], $form_state['values']['internal_check']);
  variable_set('simplenews_iregister_urldone_url_' . $form_state['values']['tid'], $form_state['values']['other_url']);
}

/**
 * Form submit.
 *
 * SC 10/feb/2014 19:45:08 stefano
 *
 * @see simplenews_iregister_form_simplenews_admin_category_form_alter()
 */
function _simplenews_iregister_css_submit($form, &$form_state) {
  variable_set('simplenews_iregister_css_' . $form_state['values']['tid'], check_plain($form_state['values']['css']));
}

/**
 * Implements hook_form().
 *
 * SC Fri Nov 22 19:08:33 CET 2013 stefano
 *
 * @todo Pass the language for localization.
 */
function simplenews_iregister_code_form($form, &$form_state, $tid, $lang = FALSE) {
  $form = array();

  if (drupal_multilingual() && $lang) {
    global $language;
    $languages = language_list();
    $pattern = "/(" . implode("|", array_keys($languages)) . ")/i";
    if (preg_match($pattern, $lang, $matches) && $languages[$matches[1]]->enabled) {
      $form['language']['#value'] = $matches[1];
      $language = $languages[$matches[1]];
    }
    else {
      $form['language']['#value'] = language_default();
    }
  }
  elseif (!$lang) {
    $lang = language_default();
  }

  // Adds the CSS.
  //
  // SC 11/feb/2014 15:23:07 stefano.
  _simplenews_iregister_add_css_form($form, $tid);

  // Uses the values from block configuration
  //
  // SC 06/feb/2014 17:46:32 stefano.
  $raw_block = block_load('simplenews', $tid);

  $foo_block = _block_render_blocks(array($raw_block));

  $hostip = ip_address();
  $key_post = _simplenews_iregister_key($tid, $hostip);
  $newsletter = simplenews_category_load($tid);

  if (strtolower($raw_block->title) != "<none>") {
    $form['title'] = array(
      '#type' => 'item',
      '#title' => $foo_block['simplenews_' . $tid]->title,
      '#prefix' => '<h2>',
      '#suffix' => '</h2>');
  }
  $form['text'] = array(
    '#type' => 'item',
    '#title' => t(variable_get('simplenews_block_m_' . $tid, '')));
  $form['is_iframe'] = array('#type' => 'hidden', '#value' => 1);
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#size' => 20,
    '#maxlength' => 128,
    '#required' => TRUE);
  $form['tid'] = array('#type' => 'hidden', '#value' => $tid);
  $form['#attributes'] = array('class' => array('simplenews-subscribe'));
  $form['#tid'] = $tid;
  // @todo: add clean submit handler
  $form['subscribe'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
    '#weight' => 20,
    '#name' => 'add');
  // @todo: add clean submit handler
  $form['unsubscribe'] = array(
    '#type' => 'submit',
    '#value' => t('Unsubscribe'),
    '#weight' => 30,
    '#name' => 'del');

  $form['#prefix'] = '<div id="simplenews_iregister_' . $tid . '">';
  $form['#suffix'] = '</div>';

  return $form;
}

/**
 * Validate form.
 *
 * SC 06/mar/2014 15:36:30 stefano
 */
function simplenews_iregister_code_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t("The e-mail address you supplied is not valid."));
  }
}

/**
 * Submit form.
 *
 * Newsletter registrations.
 *
 * SC Fri Nov 22 19:17:05 CET 2013 stefano
 */
function simplenews_iregister_code_form_submit($form, &$form_state) {
  $mail = check_plain($form_state['values']['mail']);
  $tid = $form_state['values']['tid'];
  $action = (isset($form_state['values']['del']) ? 'unsubscribe' : 'subscribe');
  $account = simplenews_load_user_by_mail($mail);
  $confirm = simplenews_require_double_opt_in($tid, $account);

  // Verifies the user registration.
  //
  // SC 13/mar/2014 16:34:53 stefano.
  $subscriber = simplenews_subscriber_load_by_mail($mail);
  $url = _simplenews_iregister_redirect_registration($tid);

  // Added a new source of subscription: iregister
  //
  // SC 18/mar/2014 00:58:32 stefano.
  switch ($action) {
    case 'subscribe':
      if (isset($subscriber->tids[$tid])) {
        drupal_set_message(t("You're already registered with this newsletter."), 'warning');
        drupal_goto($url);
        break;
      }
      simplenews_subscribe_user($mail, $tid, $confirm, 'iregister');
      if ($confirm) {
        drupal_set_message(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
      }
      break;

    case 'unsubscribe':
      if (!isset($subscriber->tids[$tid])) {
        drupal_set_message(t("You are not registered to this newsletter."), 'warning');
        drupal_goto($url);
        break;
      }
      simplenews_unsubscribe_user($mail, $tid, $confirm, 'iregister');
      if ($confirm) {
        drupal_set_message(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));
      }
      break;
  }
}

/**
 * Implements hook_simplenews_unsubscribe_user().
 *
 * SC 13/mar/2014 11:54:33 stefano
 */
function simplenews_iregister_simplenews_unsubscribe_user($subscriber, $subscription) {
  _simplenews_iregister_manage_user($subscriber, $subscription, 'unsub');
}

/**
 * Implements hook_simplenews_subscribe_user().
 *
 * SC 13/mar/2014 12:02:37 stefano
 */
function simplenews_iregister_simplenews_subscribe_user($subscriber, $subscription) {
  _simplenews_iregister_manage_user($subscriber, $subscription, 'sub');
}

/**
 * Unifies subscribe and unsubscribe.
 *
 * Unifies subscribe and unsubscribe code for
 * hook_simplenews_(un)subscribe_user.
 *
 * SC 20/mar/2014 10:40:34 stefano
 *
 * @param object $subscriber
 *        the user data
 * @param object $subscription
 *        the newsletter data
 * @param string $type
 *        the operation to do
 */
function _simplenews_iregister_manage_user($subscriber, $subscription, $type = 'sub') {
  $account = simplenews_load_user_by_mail($subscriber->mail);
  $confirm = simplenews_require_double_opt_in($subscription->tid, $account);
  $category = simplenews_category_load($subscription->tid);
  $url = '';
  if ($confirm) {
    if (variable_get('simplenews_iregister_urldone_internal_' . $subscription->tid, FALSE)) {
      $url = url('iregister_done/' . $subscription->tid, array(
        "absolute" => TRUE));
    }
    if (variable_get('simplenews_iregister_urldone_url_' . $subscription->tid, '')) {
      $url = variable_get('simplenews_iregister_urldone_url_' . $subscription->tid, '');
    }
    if ($type == 'sub') {
      drupal_set_message(t('%user was added to the %newsletter mailing list.', array(
        '%user' => $subscriber->mail,
        '%newsletter' => _simplenews_newsletter_name($category))));
    }
    else {
      drupal_set_message(t('%user was unsubscribed from the %newsletter mailing list.', array(
        '%user' => $subscriber->mail,
        '%newsletter' => _simplenews_newsletter_name($category))));
    }
  }
  elseif ($subscription->source == 'iregister') {
    $url = _simplenews_iregister_redirect_registration($subscription->tid);
    if ($type == 'sub') {
      drupal_set_message(t('You have been subscribed.'));
    }
    else {
      drupal_set_message(t('You have been unsubscribed.'));
    }
  }
  if ($url) {
    drupal_goto($url);
  }
}

/**
 * Generates the url to force the redirect to the form.
 *
 * SC 13/mar/2014 12:15:53 stefano
 *
 * @param int $tid
 *        the newsletter id
 */
function _simplenews_iregister_redirect_registration($tid) {
  global $language;
  $key = _simplenews_iregister_key($tid);
  return url("iregister/" . $tid . "/" . $key . "/" . $language->language, array(
    "absolute" => TRUE));
}

/**
 * Implements hook_theme_registry_alter().
 *
 * http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 *
 * SC 12/feb/2014 09:39:13 stefano
 */
function simplenews_iregister_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'simplenews_iregister') . "/templates";
  // Munge on a copy.
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _simplenews_iregister_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Implements hook_form().
 *
 * SC 13/mar/2014 19:04:42 stefano
 */
function simplenews_iregister_done_form($form, &$form_state, $tid) {
  $form = array();

  _simplenews_iregister_add_css_form($form, $tid);

  $form['title'] = array(
    '#type' => 'item',
    '#title' => t('Thanks'),
    '#prefix' => '<h2>',
    '#suffix' => '</h2>');
  $form['text'] = array(
    '#type' => 'item',
    '#title' => t('The procedure has finished, you can close this page.'),
    '#prefix' => '<p>',
    '#suffix' => '</p>');

  // TODO: Commented until I will find a solution to close windows/tab under
  // Firefox.
  //
  // SC 24/mar/2014 16:41:09 stefano.

  // $form['subscribe'] = array(
  // '#type' => 'submit',
  // '#value' => t('Click to close'),
  // '#weight' => 20,
  // '#name' => 'close',
  // '#attributes' => array(
  // 'onclick' => "parent.window.open('','_parent','', true);parent.self.close();"));

  $form['#tid'] = array('#type' => 'hidden', '#value' => $tid);

  $form['#prefix'] = '<div id="simplenews_iregister_' . $tid . '">';
  $form['#suffix'] = '</div>';

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * SC 18/mar/2014 01:52:40 stefano
 */
function simplenews_iregister_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'simplenews_confirm_add_form' || $form_id == 'simplenews_confirm_removal_form') {
    if (variable_get('simplenews_iregister_urldone_internal_' . $form['newsletter']['#value']->tid, FALSE)) {
      _simplenews_iregister_add_css_form($form, $form['newsletter']['#value']->tid);
    }
    $form['#tid'] = array(
      '#type' => 'hidden',
      '#value' => $form['newsletter']['#value']->tid);
  }
}

/**
 * Implements hook_css_alter().
 *
 * SC 18/mar/2014 11:38:23 stefano
 */
function simplenews_iregister_css_alter(&$css) {
  // Cleans for the iframe the other CSSs (keeps only the system's CSS) and
  // uses the CSS from the newsletter if exists.
  //
  // SC 19/mar/2014 09:17:54 stefano.
  $foo = explode('/', current_path());
  if (!empty($foo[0]) && $foo[0] == 'iregister' && !empty($foo[1])) {
    $foo = trim(variable_get('simplenews_iregister_css_' . $foo[1], ''));
    if (!empty($foo)) {
      foreach ($css as $key => $value) {
        if (!($value['type'] == 'inline' || strstr($key, "modules/system") !== FALSE)) {
          unset($css[$key]);
        }
      }
    }
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter).
 *
 * SC 25/feb/2014 16:24:29 stefano
 *
 * @param array $a
 *        the theme paths
 * @param string $element
 *        this module path
 *
 * @return void
 */
function _simplenews_iregister_insert_after_first_element(&$a, $element) {
  if (is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * Checks that the iframe has permission.
 *
 * SC Thu Nov 21 23:36:50 CET 2013 stefano
 *
 * @todo I must use HTTP_REFERER even if is not recommended.
 *
 * @param int $tid
 *        newsletter id
 * @param string $key
 *        the check key
 *
 * @return bool menu permission
 */
function _simplenews_iregister_code_iframe_perm($tid, $key) {
  $remotehost = isset($_SERVER['HTTP_REFERER']) ? check_plain($_SERVER['HTTP_REFERER']) : '';
  $hostip = gethostbyname(parse_url($remotehost, PHP_URL_HOST));
  return (in_array($hostip, unserialize(variable_get('simplenews_iregister_iframe_hosts_' . $tid, array()))['hostip']) && $key === _simplenews_iregister_key($tid)) !== FALSE;
}

/**
 * Checks that the form has permission.
 *
 * SC Thu Nov 21 23:36:50 CET 2013 stefano
 *
 * @param int $tid
 *        newsletter id
 * @param string $key
 *        the check key
 *
 * @return bool menu permission
 */
function _simplenews_iregister_code_iframe_manage_perm($tid, $key) {
  $hostip = ip_address();
  return ($key === _simplenews_iregister_key($tid, $hostip)) !== FALSE;
}

/**
 * Generates the control key for the post (iframe).
 *
 * SC Fri Nov 22 15:18:51 CET 2013 stefano
 *
 * @param int $tid
 *        the newswletter id
 * @param string $hostip
 *        the ip from the remote host
 *
 * @return string the key
 */
function _simplenews_iregister_key($tid, $hostip = '') {
  return check_plain(md5($tid . variable_get('simplenews_iregister_keyown_' . $tid) . variable_get('simplenews_iregister_key') . $hostip));
}

/**
 * Adds the css into the form
 *
 * SC 13/mar/2014 20:02:35 stefano
 *
 * @param array $form
 *        the data
 * @param int $tid
 *        the newsletter id
 */
function _simplenews_iregister_add_css_form(&$form, $tid) {
  $css = variable_get('simplenews_iregister_css_' . $tid, FALSE);
  $foo = preg_replace("#/\*(.|\s)*?\*/#m", '', $css);

  $form['#attached']['css'] = array(
    $foo => array('type' => 'inline', 'group' => CSS_THEME, 'weight' => 100));
}
