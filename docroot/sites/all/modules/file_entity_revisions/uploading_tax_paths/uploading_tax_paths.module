<?php
/**
 * @file
 * Custom paths for uploading documents - Works with File Entity Revisions
 * 
 * This module handles keeping file URIs constant, and determines path name
 * by path settings and taxonomy field value.  
 * Uses file->filename for file name.
 * 
 * @Author: Rick Tilley (pcrats33)
 * 
 */

/**
 * Implements hook_form_FORMID_alter().
 * Adds field in admin/config/media/file-system to set the revisions://
 * storage directory.
 * This would normally be a sub-folder of public://. 
 * @param unknown $form
 * @param unknown $form_state
 * @param unknown $form_id
 */
function uploading_tax_paths_form_system_file_system_settings_alter(&$form, &$form_state, $form_id) {
  if (isset($form['file_default_scheme']) 
      && isset($form['file_default_scheme']['#options'])
      && isset($form['file_default_scheme']['#options']['revisions'])) {
    unset($form['file_default_scheme']['#options']['revisions']);
    if ($form['file_default_scheme']['#default_value'] == 'revisions') {
      $form['file_default_scheme']['#default_value'] = 'public';
    }
  } 
  $form['file_revisions_path'] = array(
  	  '#type' => 'textfield',
      '#title' => 'Revisions file system path',
      '#default_value' => variable_get('file_revisions_path', ''),
      '#maxlength' => 255,
      '#description' => t('An existing local file system path for storing file revisions.  It should be writable by Drupal and not accessible over the web.'),
      '#after_build' => array('system_check_directory'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * the form: field_ui_field_edit_form
 * 
 * Attaches configuration options to taxonomy terms on a file type.
 * Each file type should have at least one taxonomy field attached to it.  
 * When editing that field, a check box will appear to allow this module to
 * setup a default path for files of that type.  This is required in order for
 * this module to touch file locations and file names.
 * 
 * @param unknown $form
 * @param unknown $form_state
 * @param unknown $form_id
 */
function uploading_tax_paths_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Make sure this is a taxonomy field.
  if (!in_array($form['#field']['type'], array('taxonomy_term_reference'))) {
    return;
  }
  // Make sure this is a file type.
  if (!(isset($form['#instance']['entity_type']) && $form['#instance']['entity_type'] == 'file')) {
    return;
  }
  
  // Get the fields instances on the current bundle, ie fields that have
  // widgets that sit alongside the one we are editing.
  $current_field_name = $form['#field']['field_name'];
  $current_entity_type  = $form['#instance']['entity_type'];
  $current_bundle       = $form['#instance']['bundle'];
  $current_bundle_instances = field_info_instances($current_entity_type, $current_bundle);
  $avail = true;
  $taken_field = null;
  // Only allow one field to have this box checked.
  foreach ($current_bundle_instances as $field => $fdata) {
    if ($field != $current_field_name && isset($fdata['uploading_tax_paths']) && $fdata['uploading_tax_paths'] == 1) {
      $avail = false;
      $taken_field = $field;
    }
  }  
  $checked = isset($form['#instance']['uploading_tax_paths']) ? $form['#instance']['uploading_tax_paths'] : false;
  $form['instance']['uploading_tax_paths'] = array(
  	  '#type' => 'checkbox',
      '#title' => t('Use field\'s value to determine upload sub-path.'),
      '#description' => t('The taxonomy name will be converted to a path name that can be used for upload placement whenever a new file is uploaded.'),
      '#default_value' => $checked,
  );
  if ($avail) {
    $form['instance']['uploading_tax_paths_fieldset'] = array(
    	  '#type' => 'fieldset',
        '#title' => t('Uploading Taxonomy Paths Settings'),
        '#states' => array(
    	    // Only show the fields when the box is checked
    	    'visible' => array(
    	        'input[name="instance[uploading_tax_paths]"]' => array('checked' => true),
    	    ),
        ),
    );
    $path = isset($form['#instance']['default_uploading_path']) ? $form['#instance']['default_uploading_path'] : '';
    $form['instance']['uploading_tax_paths_fieldset']['default_uploading_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to store uploaded files'),
        '#description' => t('Enter a path, use %1 to represent the taxonomy value'),
        '#default_value' => $path,
        '#size' => 80,
        '#maxlength' => 255,
        // Core bug issue http://drupal.org/node/1130946
        '#parents' => array('instance', 'default_uploading_path'),
    );
  }
  else {
    // Another field is using this option, disable it.
    $form['instance']['uploading_tax_paths']['#disabled'] = true;
    $form['instance']['uploading_tax_paths']['#description'] = 
      t('This option is only available once per file type.  Uncheck this option on the @taken field in order to be able to check it here.', 
        array('@taken' => $taken_field));
    $form['instance']['uploading_tax_paths']['#default_value'] = false;
  }
}

/**
 * Implements Hook_menu().
 * Adds route to config menu for checking which file types are configured and how.
 * @return multitype:multitype:string multitype:string
 */
function uploading_tax_paths_menu() {
  $items = array();
  $items['admin/config/workflow/uploading_tax_paths'] = array(
      'title' => 'Uploading Tax Paths',
      'description' => 'See the path settings for each file type.',
      'access arguments' => array('administer content types'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uploading_tax_paths_current_config'),
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/* Stream Wrapper (file scheme) Implementation */
/**
 * Implements hook_stream_wrappers().
 * not currently being used.
 * This is an attempt to create a new file scheme revisions://
 * @return multitype:multitype:string The Ambigous <The, string, A, Optional>
 */
function uploading_tax_paths_stream_wrappers() {
  return array(
      'revisions' => array(
          'name' => t('File revisions that aren\'t currently published'),
          'class' => 'UploadingTaxPathsStreamWrapper',
          'description' => t('Keeps files safe from being accessed when they aren\'t published'),
          'type' => STREAM_WRAPPERS_NORMAL,
      ),
  );
}

/**
 * File Revisions (revisions://) stream wrapper class.
 * not currently being used.
 * This is an attempt to create a new file scheme revisions://
 * @author tilley_r
 *
 */
class UploadingTaxPathsStreamWrapper extends DrupalPrivateStreamWrapper {
  /**
   * Overrides getDirectoryPath().
   * @see DrupalPrivateStreamWrapper::getDirectoryPath()
   */
  public function getDirectoryPath() {
    // @todo: figure out correct path.
    return variable_get('file_revisions_path', '');
  }
  
  /**
   * Overrides getExternalUrl().
   * Return the HTML URI of a private file.
   */
  function getExternalUrl() {
    $path = str_replace('\\', '/', $this->getTarget());
    return url('system/revisions/' . $path, array('absolute' => TRUE));
  }
}
/* End Stream Wrapper Implementation */

/**
 * Implements hook_file_presave().
 * Puts files in their place.  This is the main call for this module.
 * @param stdClass $file
 */
function uploading_tax_paths_file_presave($file) {
  // Break uri into pieces to check scheme.
  $currentpathinfo = _uploading_paths_path_info($file->uri);
  if (strtoupper($currentpathinfo['scheme']) == 'TEMPORARY:') {
    // Ignore Temporary:// schema, return.
    return;
  }
  // Get ideal URL & compare with existing URI
  $newuri = uploading_tax_paths_generate_file_path($file);
  if ($newuri === FALSE || $newuri === TRUE || strlen($newuri) < 4) {
    // Failed, matches the ideal, or too short: do nothing.
    return;
  }
  // Changing location, check file_managed and file_managed_revisions if file exists currently
  $currents = db_select('file_managed', 'f')
  ->fields('f', array('fid', 'vid'))
  ->condition('f.uri', $newuri, '=')
  ->execute()->fetchAllAssoc('fid');
  // Don't move it if fid != FID.  This means another file is using this location.
  foreach ($currents as $c) {
    if ($c->fid != $file->fid) {
      drupal_set_message(t('Another file (@fid) at @uri already exists with that name and path, please rename your file and resave!', 
        array('@uri' => $newuri, '@fid' => $c->fid)), 'warning');
      return;
    }
  }
  $revisions = db_select('file_managed_revisions', 'r')
      ->fields('r', array('fid', 'vid'))
      ->condition('r.uri', $newuri, '=')
      ->execute()->fetchAllAssoc('fid');
  // Grab the last one, should only be one.
  $oldvid = $oldfid = null;
  foreach ($revisions as $r) {
    $oldfid = $r->fid;
    $oldvid = $r->vid;
  }
  if (count($revisions) > 1) {
    drupal_set_message(t('More than one file revision is using this uri!'), 'warning');
  }
  // If not duplicated in file_managed, move that file and resave its URI
  // Also move our file into its spot for saving.
  $uri = _uploading_tax_paths_stash_file($file, $oldfid, $oldvid, $newuri);
  if ($uri) {
    $file->uri = $uri;
  }
}
/**
 * This helper function stashes a file that is located at a desired URI
 * and updates the file_managed_revisions table ONLY
 * -- DO NOT do this if the file is a current revision as it will not update
 * the file_managed table.  This is ok if the fid matches the current file
 * however since it will be saved after this hook is done.
 * It then moves the new file to the desired location.
 * @param unknown $newfile
 * @param unknown $oldfid
 * @param unknown $oldvid
 * @param unknown $uri
 * @return False or $uri
 */
function _uploading_tax_paths_stash_file($newfile, $oldfid, $oldvid, $uri) {
  // Rename current file.
  $ret = false;
  if (isset($oldfid) && isset($oldvid)) {
    $stashed = file_unmanaged_copy($uri, $uri, FILE_EXISTS_RENAME);
    // Update file_managed_revisions where vid=VID.
    if ($stashed) {
      $result = db_update('file_managed_revisions')
      ->fields(array('uri' => $stashed))
      ->condition('vid', $oldvid, '=')
      ->condition('fid', $oldfid, '=')
      ->execute();
    }
    else {
      // Unable to move old file, bail!
      return false;
    }
  }
  // Copy new file into place.
  $path = substr($uri, 0, strrpos($uri, '/'));
  if ($newfile->uri !== $uri && file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
    // First copy to directory.
    $tempfirst = file_unmanaged_copy($newfile->uri, $path, FILE_EXISTS_RENAME);
    // Check if this will be the current revision before renaming.
    if (isset($newfile->original) && $newfile->original->published == 1 && $newfile->published == 0) {
      // Don't rename, this will not be the current revision.
      $ret = $tempfirst;
      if ($newfile->uri != $tempfirst) {
        // We moved the file so delete the old one.
        file_unmanaged_delete($newfile->uri);
      }
    }
    else {
      // Then Rename to desired $uri
      if ($tempfirst == $uri || $disco = rename($tempfirst, $uri)) {
        $ret = $uri;
        // Effectively move, don't just copy.
        file_unmanaged_delete($newfile->uri);
      }
      else {
        // Something failed in middle step, delete temp copy.
        file_unmanaged_delete($tempfirst);
      }
    }
  }
  // Returns false or $uri.
  return $ret;
}


/**
 * helper function, for a good path name we must replace some things
 * Takes out all non alphanumerical characters except dashes and forward slashes
 * Replaces all spaces with dashes.
 * @param unknown $oldname
 */
function _uploading_tax_paths_screentext($oldname) {
  $clean = preg_replace('/[^a-zA-Z0-9 \-\/]/', '', trim($oldname));
  $ret = preg_replace('/[ ]/', '-', $clean);
  return $ret;
}
/**
 * Returns false or a new URI for the file to be located at.
 * @param stdClass $new_file
 * @return void|false|string
 */
function uploading_tax_paths_generate_file_path($new_file) {
  $taken_field = null;
  $file_type = $new_file->type;
  $file_path = null;
  $replacement_value = null;
  // Not using domain path anymore.
//  $domain_field = null;
  $current_bundle_instances = field_info_instances('file', $file_type);
  // Find the taxonomy that is used for determining path.
  foreach ($current_bundle_instances as $field => $fdata) {
    if ($file_path == null && isset($fdata['uploading_tax_paths']) && $fdata['uploading_tax_paths'] == 1) {
      $taken_field = $field;
      $file_path = $fdata['default_uploading_path'];
    }
    /*
    if ($domain_field == null && isset($fdata['widget']) && isset($fdata['widget']['module'])
       && $fdata['widget']['module'] == 'domain_entity') {
      $domain_field = $field;
    }
    */
  }
  if (!isset($file_path)) {
    // Don't alter path, no default path configuration found.
    return FALSE;
  }
  if (isset($taken_field) && isset($new_file->{$taken_field})
      && isset($new_file->{$taken_field}[LANGUAGE_NONE])
      && isset($new_file->{$taken_field}[LANGUAGE_NONE][0])
      && isset($new_file->{$taken_field}[LANGUAGE_NONE][0]['tid'])) {
    $tid = $new_file->{$taken_field}[LANGUAGE_NONE][0]['tid'];
    $tax = taxonomy_term_load($tid);
    $replacement_value = $tax ? _uploading_tax_paths_screentext($tax->name) : null;
  }
  if (!isset($replacement_value)) {
    // Don't alter path if no taxonomy value is found.
    return FALSE;
  }
  /*
  $domain = domain_get_domain();
  // Specialized code!!** the field name may not always be domain_file.
  // We want to grab the domain access domain name and use that if available.
  if (isset ($domain_field) && isset($new_file->{$domain_field}) 
       && isset($new_file->{$domain_field}[LANGUAGE_NONE])
       && isset($new_file->{$domain_field}[LANGUAGE_NONE][0]['domain_id'])) {
    $domid = $new_file->{$domain_field}[LANGUAGE_NONE][0]['domain_id'];
    $domname = db_select('domain', 'd')
                ->fields('d', array('sitename'))
                ->condition('d.domain_id', $domid, '=')
                ->execute()->fetchField();
    if ($domname && strlen($domname) > 2) {
      $domain['sitename'] = $domname;
    }
  }
  $sitename = _uploading_tax_paths_screentext($domain['sitename']);
  */
  // No longer using sitename.
  $sitename = false;
  
  $newuri = $new_file->uri;
  if ($newuri === false) {
    // File is being updated but URI is not being updated so it will be = false.
    $old_file = file_load($new_file->fid);
    $newuri = $old_file->uri;
  }
  // Get where the file should go, if it should go anywhere.
  $loc = _uploading_paths_file_is_home($newuri, $replacement_value, $file_path, $sitename, $new_file->filename, $new_file);
  // Now check to see if the file needs to be moved
  if ($loc === true) {
    // File is already where it should be.
    return;
  }
  return $loc; 
}
/**
 * Helper function that sees if file should be relocated.
 * Returns true if the file is where it should be, otherwise returns the URI
 * where it should be moved to.
 * @param unknown $uri       // Current uri
 * @param unknown $rval      // Replacement value from taxonomy field
 * @param unknown $default   // Default path settings
 * @param unknown $sitename  // Domain name
 * @param unknown $filename  // Filename field
 * @param unknown $file      // File entity for published value
 * @return boolean|string
 */
function _uploading_paths_file_is_home($uri, $rval, $default, $sitename, $filename, $file) {
  $info = _uploading_paths_path_info($uri);
  $pubscheme = isset($file->permascheme) ? $file->permascheme : 'private';
  if (isset($file->published)) {
    // Put unpublished files in revisions://
    $info['scheme'] = ($file->published == 1) ? $pubscheme . ':' : 'revisions:';
  }
// .. with domain .. $goodpath = $info['scheme'] . '//' . $sitename . '/' . _uploading_paths_make_url($rval, $default) 
  $goodpath = $info['scheme'] . '//' . _uploading_paths_make_url($rval, $default) 
       . '/' . $filename;
  if ($uri == $goodpath)
    return true;
  else
    return $goodpath;
}
/**
 * Helper function creates desired URI for file using replacement patterns.
 * @param unknown $rval
 * @param unknown $default
 * @return mixed
 */
function _uploading_paths_make_url($rval, $default) {
  return str_replace('%1', $rval, $default);
}
/**
 * Helper function that provides path info from an URI
 * Used to separate file scheme from path, not the most efficient way
 * but it works.
 * @param string $uri
 * @return multitype:Ambigous <NULL, mixed> string multitype:
 */
function _uploading_paths_path_info($uri) {
  $urlpieces = explode('/', $uri);
  $urlscheme = null;
  if (is_array($urlpieces) && count($urlpieces) > 2) {
    if ($urlpieces[1] == '') {
      $urlscheme = array_shift($urlpieces);
      array_shift($urlpieces);
    }
  }
  $path = implode('\\', $urlpieces);
  return array(
  	  'scheme' => $urlscheme,
      'path' => $path,
      'pieces' => $urlpieces,
  );
}

/**
 * helper function clears adaptive image cache for specific file
 * @param unknown $uri
 */
/*
function _uploading_paths_stylecache_clear($uri) {
  $urihalf = explode('//', $uri);
  $fileuri = $urihalf[1];
  $styles1 = file_scan_directory('public://styles', '/.*/
  /* woops reg expression messes up comments!
', array(
    'recurse' => false,
    ));
  $styles2 = file_scan_directory('private://styles', '/.*/
    /* woops reg expression messes up comments!
', array(
      'recurse' => false,
  ));
  $styles = array_merge($styles1, $styles2);
  foreach ($styles as $surl => $s) {
    $thm = substr($surl, 0, 7);
    if ($thm[6] == ':')
      $thm = substr($thm, 0, 6);
    $targeturi = $surl . '/' . $thm . '/' . $fileuri;
    $success = file_unmanaged_delete($targeturi);
  }
}
*/
 
/**
 * Menu callback: admin/config/workflow/uploading_tax_paths
 * Shows file types and what default paths are configured.
 * @return Ambigous <multitype:string , multitype:boolean multitype:string boolean Ambigous <The, string, A, Optional>  >
 */
function uploading_tax_paths_current_config() {
  $form = array();
  $form['#tree'] = true;
  $form['fileconfigs'] = array(
      '#title' => t('File types and their configurations.'),
      '#type' => 'fieldset',
      '#collapsible' => false,
      '#collapsed' => false,
  );
  $file_path = array();
  $types = db_select('file_type', 't')
             ->fields('t', array('type', 'label'))
             ->execute();
  if ($types) {
    foreach ($types as $type) {
      if (isset($type->type)) {
        $found = false;
        $current_bundle_instances = field_info_instances('file', $type->type);
        $file_path[$type->type] = array(
            'label' => $type->label,
            'type' => $type->type,
        );
        // Find the taxonomy that is used for determining path.
        foreach ($current_bundle_instances as $field => $fdata) {
          if (isset($fdata['uploading_tax_paths']) && $fdata['uploading_tax_paths'] == 1) {
            $file_path[$type->type]['field'] = $field;
            $file_path[$type->type]['path'] = $fdata['default_uploading_path'];
            $form['fileconfigs'][$type->type] = array(
            	  '#markup' => _uploading_tax_paths_current_config_render_row($file_path[$type->type]),
            );
            $found = true;
            break;
          }
        }
        if (!$found) {
          $form['fileconfigs'][$type->type] = array(
          	'#markup' => _uploading_tax_paths_current_config_render_row($file_path[$type->type]),
          );
        }
      }
    }
    $form['explanation'] = array(
    	'#markup' => '<div class="utp-explanation-config">' .
        'In order to configure a default path, you will need to edit a taxonomy'
      . ' field attached to a file type and check the box that says: '
      . '<b>Use field\'s value to determine upload sub-path.</b></div>',
    );
  }
  return $form;
}
/**
 * Helper function, takes an array of values and creates html markup for a row on the config form.
 * @param unknown $file_type
 * @return string
 */
function _uploading_tax_paths_current_config_render_row($file_type) {
  $prediv = '<div class="utp-current-config">';
  $postdiv = '</div>';
  $newln = '<br>';
  $markup = '';
  foreach ($file_type as $fp => $fpdat) {
    switch ($fp) {
    	case 'type':
    	  $prediv .= t('(<a href="/admin/structure/file-types/manage/@type/fields" target="_blank">', array('@type' => $fpdat));
    	  $postdiv = '</a>)' . $postdiv;
    	  break;
    }
    $markup .= $prediv . $fpdat . $postdiv;
    $prediv = '<div class="utp-current-config">';
    $postdiv = '</div>';
    $newln = '<br>';
  }
  if (!isset($file_type['path'])) {
    $prediv = substr($prediv, 0, -2) . ' utp-warning-config">';
    $markup .= $prediv . 'File path not configured!' . $postdiv;
  }
  $markup .= $newln;
  return $markup;
}