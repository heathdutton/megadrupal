<?php

/**
 * @file
 * Install, update and uninstall functions for the file_entity_revisions module.
 */

/**
 * Implements hook_schema().
 */
function file_entity_revisions_schema() {

  // Load File Entity and File Admin Install files.
  module_load_include('install', 'file_entity');
  module_load_include('install', 'file_admin');

  // Calling drupal_get_schema here does horrible horrible things.
  // Keep the schema under the file_managed key so the other alter hooks can
  // properly alter it.
  $temp_schema['file_managed'] = drupal_get_schema_unprocessed('system', 'file_managed');
  file_entity_schema_alter($temp_schema);
  file_admin_schema_alter($temp_schema);


  // Stop using the 'file_managed' key.
  $schema['file_managed_revisions'] = $temp_schema['file_managed'];
  $schema['file_managed_revisions']['module'] = 'file_managed_revisions';
  $schema['file_managed_revisions']['name'] = 'file_managed_revisions';
  $schema['file_managed_revisions']['fields']['fid'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  $schema['file_managed_revisions']['fields']['vid'] = array(
    'type' => 'serial',
    'unsigned' => TRUE,
    'not null' => TRUE,
  );
  $schema['file_managed_revisions']['primary key'] = array('vid');
  $schema['file_managed_revisions']['indexes'] = array(
    'fid' => array('fid'),
    'uid' => array('uid'),
    'status' => array('status'),
    'timestamp' => array('timestamp'),
  );

  // Remove the uniqueness for file uri.
  unset($schema['file_managed_revisions']['unique keys']);

  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function file_entity_revisions_schema_alter(&$schema) {
  $schema['file_managed']['fields']['vid'] = array(
    'description' => 'The current {file_managed_revisions}.vid version identifier.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema['file_managed']['fields']['permascheme'] = array(
      'description' => 'The Stream Wrapper name of where this file should be stored.',
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 127,
  );
}

/**
 * Implements hook_install().
 */
function file_entity_revisions_install() {
  drupal_load('module', 'file_entity_revisions');
  $schema = array();
  file_entity_revisions_schema_alter($schema);
  $spec = $schema['file_managed']['fields']['vid'];
  if (!db_field_exists('file_managed', 'vid')) {
    db_add_field('file_managed', 'vid', $spec);
  }
  $spec = $schema['file_managed']['fields']['permascheme'];
  if (!db_field_exists('file_managed', 'permascheme')) {
    db_add_field('file_managed', 'permascheme', $spec);
  }
  
  // Queue all files to be acted on during cron runs using the Queue API.
  $queue = DrupalQueue::get('file_entity_revisions_create');
  $result = db_select('file_managed', 'f')->fields('f')->execute();
  foreach ($result as $record) {
    $queue->createItem($record);
  }
}

/**
 * Implements hook_uninstall().
 */
function file_entity_revisions_uninstall() {
  // Remove the added column to the core {file_managed} table.
  db_drop_field('file_managed', 'vid');
  db_drop_field('file_managed', 'permascheme');
}

/**
 * Add an index on {file_managed_revisions}.fid.
 */
function file_entity_revisions_update_7001() {
  db_add_index('file_managed_revisions', 'fid', array('fid'));
}

