<?php

/**
 * @file
 * Commerce Direcpay module file.
 *
 * Provides an DirecPay payment method for Drupal Commerce for testing and
 * development. For example integration with other carts, check
 * http://www.direcpay.com/direcpay/dpshoppingcarts.jsp
 */
define('COMMERCE_DIRECPAY_PRODUCTION', 'https://www.timesofmoney.com/direcpay/secure/dpMerchantTransaction.jsp');
define('COMMERCE_DIRECPAY_SANDBOX', 'https://test.timesofmoney.com/direcpay/secure/dpMerchantTransaction.jsp');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_direcpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_direcpay'] = array(
    'base' => 'commerce_direcpay',
    'title' => t('DirecPay'),
    'short_title' => t('DirecPay'),
    'display_title' => t('DirecPay Payment Gateway - India'),
    'description' => t('DirecPay Payment Gateway - India'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_direcpay_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    // Test merchant id provided by Direcpay in integration doc.
    'merchant_id' => '200904281000001',
    'payment_mode' => 'TEST',
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your DirectPay Merchant ID.'),
    '#default_value' => $settings['merchant_id'],
    '#size' => 16,
    '#required' => TRUE,
  );
  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment mode'),
    '#description' => t('The mode for capturing payment.'),
    '#options' => array(
      'LIVE' => t('Live transactions'),
      'TEST' => t('Test transactions'),
    ),
    '#default_value' => $settings['payment_mode'],
  );

  return $form;
}

/**
 * Payment method callback.
 *
 * Prepare a form which posts parameters required by direcpay
 * in order to make payment.
 */
function commerce_direcpay_redirect_form($form, &$form_state, $order, $payment_method) {

  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['merchant_id'])) {
    drupal_set_message(t('DirectPay is not configured for use. Please check the DirectPay Merchant ID.'), 'error');

    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(
      'absolute' => TRUE,
    )),
    // Specify the current payment method instance ID in the notify_url.
    'pay_method' => $payment_method['instance_id'],
  );

  return commerce_direcpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Builds a DirectPay Paymentform from an order object.
 *
 * @param object $order
 *   The fully loaded order being paid for.
 * @param array $settings
 *   An array of settings used to build out the form, including:
 *   - payment_mode : which server to use, either sandbox or live
 *   - cancel_return: the URL PayPal should send the user to on cancellation
 *   - return: the URL DirecPay should send the user to on successful payment
 *   - pay_method: optionally the name of the Commerce payment method
 *   - merchant_id: Merchant id of DirecPay.
 *
 * @return array
 *   A renderable form array.
 */
function commerce_direcpay_order_form($form, &$form_state, $order, $settings = array()) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Get the order total in the default currency.
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($order_total, $currency_code);

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Check the payment mode whetter test or production.
  $collaborator = ($settings['payment_mode'] == 'TEST') ? 'TOML' : 'DirecPay';

  // Return url where the user will be redirect after making the payment.
  $return_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(
    'absolute' => TRUE,
  ));
  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $operation_mode = 'DOM';
  $country_iso3 = 'IND';
  $other_details = md5($settings['merchant_id'] . $order->order_id . '|' . $order->data['payment_redirect_key']);

  // Encrypt the request response.
  $requestparameter = commerce_direcpay_encode_string($settings['merchant_id'] . '|' . $operation_mode . '|' . $country_iso3 . '|' . 'INR' . '|' . $amount . '|' . $order->order_id . '|' . $other_details . '|' . $return_url . '|' . $return_url . '|' . $collaborator);

  // Build the data array that will be translated into hidden form values.
  $data = array(
    'custName' => !empty($billing_address['name_line']) ? drupal_substr($billing_address['name_line'], 0, 50) : drupal_substr($billing_address['first_name'], 0, 50),
    'custAddress' => drupal_substr($billing_address['thoroughfare'], 0, 100),
    'custCity' => drupal_substr($billing_address['locality'], 0, 50),
    'custState' => drupal_substr($billing_address['administrative_area'], 0, 50),
    'custPinCode' => drupal_substr($billing_address['postal_code'], 0, 6),
    'custCountry' => $billing_address['country'],
    'custPhoneNo1' => '',
    'custPhoneNo2' => '',
    'custPhoneNo3' => '',
    'custMobileNo' => '',
    'custEmailId' => drupal_substr($order->mail, 0, 100),
    'deliveryName' => !empty($billing_address['name_line']) ? drupal_substr($billing_address['name_line'], 0, 50) : drupal_substr($billing_address['first_name'], 0, 50),
    'deliveryAddress' => drupal_substr($billing_address['thoroughfare'], 0, 100),
    'deliveryCity' => drupal_substr($billing_address['locality'], 0, 32),
    'deliveryState' => drupal_substr($billing_address['administrative_area'], 0, 32),
    'deliveryPinCode' => drupal_substr($billing_address['postal_code'], 0, 10),
    'deliveryCountry' => $billing_address['country'],
    'deliveryPhNo1' => '',
    'deliveryPhNo2' => '',
    'deliveryPhNo3' => '',
    'deliveryMobileNo' => '',
    'otherNotes' => drupal_substr(implode(', ', $description), 0, 200),
    'editAllowed' => 'N',
    'requestparameter' => $requestparameter,
  );

  // Put the data on a form.
  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => check_plain($value));
  }

  $form['#name'] = 'ecom';
  $form['#method'] = 'POST';
  $form['#action'] = ($settings['payment_mode'] == 'TEST') ? COMMERCE_DIRECPAY_SANDBOX : COMMERCE_DIRECPAY_PRODUCTION;

  return $form;
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_direcpay_redirect_form_validate($order, $payment_method) {
  // Direcpay sends the response in 'responseparams' via POST.
  if (isset($_POST['responseparams']) && !empty($_POST['responseparams'])) {
    $response = explode('|', $_POST['responseparams']);

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    // Url decode the response string.
    $response = array_map('urldecode', $response);

    // Transaction id coming from Direcpay.
    $payment_id = $transaction_id = $response[0];
    // Success or Failure or Error identifier.
    $response_code = $response[1];
    // Get payment mode whether its live or test.
    $mode = $payment_method['settings']['payment_mode'];

    // Log the response coming from Directpay.
    watchdog('commerce_direcpay', 'Receiving payment response for order !order_id from DirecPay', array('!order_id' => $order->order_id));

    // Prepare a transaction object to log the API response.
    $transaction = commerce_payment_transaction_new('commerce_direcpay', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $transaction_id;
    $transaction->remote_status = $mode;
    $transaction->payload[REQUEST_TIME] = $response;

    // Response is similar for SUCCESS and FAIL flag.
    if ($response_code == 'SUCCESS' || $response_code == 'FAIL') {
      $currency_code = $response[3];
      $ver_key = $response[4];
      $order_id = $response[5];
      $amount = $response[6];
      $gateway_method = $payment_method['settings']['payment_mode'];
      $authorize_text = 'Authorized';

      if ($response_code == 'FAIL') {
        $error_message = $response[1];
        $authorize_text = 'Not authorized';
      }

      // Check if the DirecPay order matches with commerce order id.
      if ($order->order_id != $order_id) {
        $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
        watchdog('commerce_direcpay', 'An unauthenticated response from EBS made it to checkout, Order id didn\'t match! Response: @response :.', array('@response' => print_r($response, TRUE)), WATCHDOG_ERROR);
        drupal_set_message($message);
        commerce_payment_redirect_pane_previous_page($order);
      }

      $message = t('@authorize_text by @method order with Transaction id: @transaction_id. (payment id : @payment_id, verification key: @ver_key) @reason_text', array(
        '@authorize_text' => $authorize_text,
        '@method' => $gateway_method,
        '@transaction_id' => $transaction_id,
        '@payment_id' => $payment_id,
        '@ver_key' => $ver_key,
        '@reason_text' => $response_code,
      ));
      $transaction->message = $message;
      // Set the transaction status based on SUCCESS or FAIL.
      $transaction->status = ($response_code == 'SUCCESS') ? COMMERCE_PAYMENT_STATUS_PENDING : COMMERCE_PAYMENT_STATUS_FAILURE;
    }
    // Response flag is ERROR or something else
    // For e.g responseparams=direcpayreferenceid|ERROR|errormessage|.
    else {
      $error_message = $response[2];
      $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
      // Get the order total in the default currency.
      $order_total = $order_wrapper->commerce_order_total->amount->value();
      $amount = commerce_currency_amount_to_decimal($order_total, $currency_code);
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('There was a problem with your order: @response_code  @reason_text', array(
        '@response_code' => $response_code,
        '@reason_text' => $error_message,
      ));
    }
    $transaction->currency_code = $currency_code;
    $transaction->amount = commerce_currency_decimal_to_amount($amount, $currency_code);
    commerce_payment_transaction_save($transaction);

    if ($response_code == 'SUCCESS') {
      // Redirect to the success page if successful.
      commerce_payment_redirect_pane_next_page($order);
    }
    else {
      $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
      watchdog('commerce_direcpay', 'There was a problem with your order: @response_code  @reason_text', array(
        '@response_code' => $response_code,
        '@reason_text' => $error_message,
          ), WATCHDOG_ERROR);
      // Show message to the user.
      // If the response flag is FAIL, ERROR or something else.
      drupal_set_message($message, 'error');
      // Redirect to the review page.
      commerce_payment_redirect_pane_previous_page($order);
    }
  }
}

/**
 * Encode the string.
 *
 * Function drupal_base64_encode doesn't work here as direcpay
 * is not able decode the response.
 *
 * @param string $string
 *   String for encode.
 *
 * @return string
 *   Returns encode string.
 */
function commerce_direcpay_encode_string($string) {
  $encodedtext = base64_encode($string);
  $lenenctxt = strlen($encodedtext);
  $str1 = drupal_substr($encodedtext, 0, 1);
  $str2 = drupal_substr($encodedtext, 1, $lenenctxt);
  $str3 = $str1 . "T" . $str2;
  $encval = base64_encode($str3);

  return $encval;
}
