<?php
/**
 * @file
 * Contains install and update functions for Nodemaker Forums.
 */

/**
 * Implements hook_install().
 */
function nm_forums_install() {
  //separated into functions
  nm_forums_install_vars();
  nm_forums_install_menu();
  nm_forums_install_terms();
  nm_forums_install_old_term();
  nm_forums_install_menu_items();
  drupal_set_message(t('NodeMaker Forums has been installed.'));
}

/**
 * Helper function to set variables and such
 */
function nm_forums_install_vars() {

  //set alias for /forum as /forums
  $path = array('source' => 'forum', 'alias' => 'forums');
  path_save($path);

  //set the pathauto vars that forum mod overrides
  variable_set('pathauto_forum_pattern', '[term:vocabulary]/[term:parents:join:/]/[term:name]');
  variable_set('pathauto_node_forum_pattern', 'forums/[node:taxonomy-forums:parents:join:/]/[node:taxonomy-forums:name]/[node:title]');

  //delete auto-added body field (from the forum.module)
  $entity_type = 'node';
  $field_name = 'body';
  $bundle = 'forum';
  $instance = field_info_instance($entity_type, $field_name, $bundle);;
  field_delete_instance($instance);
  drupal_set_message(t('Forum variables set.'));
}


/**
 * Helper function to set menu item
 */
function nm_forums_install_menu() {
  //insert menu item
  $item = array(
    'link_path' => drupal_get_normal_path('forum'),
    'link_title' => 'Forums',
    'menu_name' => 'main-menu',
  );
  $result = menu_link_save($item);
  menu_cache_clear_all();
  drupal_set_message(t('Forums parent menu item set.'));
}


/**
 * Helper function to save forums and containers
 */
function nm_forums_install_terms() {

  //get the vocab
  $vocab_query = db_select('taxonomy_vocabulary', 'v')
    ->fields('v', array('vid'))
    ->condition('machine_name', 'forums')
    ->execute();
  $vocab = $vocab_query->fetch();
  $vid = (int) $vocab->vid;

  //terms
  $forums = array(
    array(
      'name' => 'Welcome',
      'description' => 'Welcome new members.',
      'weight' => -3,
      'forums' => array(
        array(
          'name' => 'Introductions',
          'description' => 'Introduce yourself.',
        ),
      ),
    ),
    array(
      'name' => 'Help & Support',
      'description' => 'Using this website.',
      'weight' => -2,
      'forums' => array(
        array(
          'name' => 'Website Issues',
          'description' => 'Questions?',
        ),
      ),
    ),
    array(
      'name' => 'Featured Discussions',
      'description' => 'Featured Discussions',
      'weight' => -1,
      'forums' => array(
        array(
          'name' => "What's new?",
          'description' => 'Discuss new developments.',
        ),
        array(
          'name' => "What's old?",
          'description' => "Discuss the good ole' days.",
        ),
      ),
    ),
  );

  //delete existing forum containers (from the forum.install)
  variable_set('forum_containers', '');
  //prepare for new containers
  $containers = array();

  //save the container term
  foreach ($forums as $forum) {
    //$container['vid'] = (int) $vocab;
    $term = new stdClass();
    $term->vid = $vid;
    $term->name = $forum['name'];
    $term->description = $forum['description'];
    $term->weight = $forum['weight'];
    taxonomy_term_save($term);

    //get the tid of the top level container
    $saved_term = taxonomy_get_term_by_name($term->name);
    if (!empty($saved_term)) {
      $new_term = array_pop($saved_term);
      $new_tid = $new_term->tid;
      //save to containers array
      $containers[] = $new_tid;

      //add children forums
      foreach ($forum['forums'] as $child) {
        $child_term = new stdClass();
        $child_term->vid = $vid;
        $child_term->name = $child['name'];
        $child_term->description = $child['description'];
        $child_term->parent = $new_tid;
        taxonomy_term_save($child_term);
      }
    }
  }

  //save the containers as containers
  variable_set('forum_containers', $containers);
  drupal_set_message(t('Forums containers set.'));

}


/**
 * Helper function to move old forum into new container
 */
function nm_forums_install_old_term() {
  //get the vocab
  $vocab_query = db_select('taxonomy_vocabulary', 'v')
    ->fields('v', array('vid'))
    ->condition('machine_name', 'forums')
    ->execute();
  $vocab = $vocab_query->fetch();
  $vocab = (int) $vocab->vid;

  //get tid of old forum
  $original_tid_query = db_select('taxonomy_term_data', 'd')
    ->fields('d', array('tid'))
    ->condition('name', 'General discussion')
    ->condition('vid', $vocab)
    ->execute();
  $original_tid = $original_tid_query->fetch();
  $original_tid = $original_tid->tid;

  //get the tid of the new parent
  $parent_tid_query = db_select('taxonomy_term_data', 'd')
    ->fields('d', array('tid'))
    ->condition('name', 'Featured Discussions')
    ->condition('vid', $vocab)
    ->execute();
  $parent_tid = $parent_tid_query->fetch();
  $parent_tid = $parent_tid->tid;

  //save the parent/tid relationship
  db_update('taxonomy_term_hierarchy')
    ->fields(array('parent' => $parent_tid))
    //->fields(array('name' => 'General Discussion'))
    ->condition('tid', $original_tid)
    ->execute();
  //change name to be ucwords
  db_update('taxonomy_term_data')
    ->fields(array('name' => 'General Discussion'))
    ->condition('tid', $original_tid)
    ->execute();
}


/**
 * Helper function to save menu items
 */
function nm_forums_install_menu_items() {

  menu_cache_clear_all();

  //get the vocab
  $vocab_query = db_select('taxonomy_vocabulary', 'v')
    ->fields('v', array('vid'))
    ->condition('machine_name', 'forums')
    ->execute();
  $vocab = $vocab_query->fetch();
  $vid = (int) $vocab->vid;

  //get the tids of the terms
  $terms = db_select('taxonomy_term_data', 't')
    ->fields('t', array('tid', 'name'))
    ->condition('vid', $vid)
    ->execute()->fetchAll();

  //get parent menu item
  $mlid = db_select('menu_links', 'l')
    ->fields('l', array('mlid'))
    ->condition('menu_name', 'main-menu')
    ->condition('link_path', 'forum')
    ->execute()->fetch();
  $plid = $mlid->mlid;

  //set parent as expanded
  db_update('menu_links')
    ->fields(array('expanded' => 1))
    ->condition('mlid', $plid)
    ->execute();

  //save the top menu items
  foreach ($terms as $term) {
    //find out which are top level
    $parent = db_select('taxonomy_term_hierarchy', 'h')
      ->fields('h', array('parent'))
      ->condition('tid', $term->tid)
      ->execute()->fetch();

    //if this is a top level item
    if ($parent->parent === '0') {
      $item = array(
        'link_path' => drupal_get_normal_path('forum/' . $term->tid),
        'link_title' => $term->name,
        'menu_name' => 'main-menu',
        'plid' => $plid,
      );
      menu_link_save($item);
    }
  }

  menu_cache_clear_all();

  //repeat for sub items (i know they only nest one level)
  foreach ($terms as $term) {
    //find out which are top level
    $parent = db_select('taxonomy_term_hierarchy', 'h')
      ->fields('h', array('parent'))
      ->condition('tid', $term->tid)
      ->execute()->fetch();

    //if this is a sub level item
    if ($parent->parent !== '0') {

      //figure out who the parent should be
      $top_menu = db_select('menu_links', 'm')
        ->fields('m', array('mlid'))
        ->condition('link_path', drupal_get_normal_path('forum/' . $parent->parent))
        ->condition('menu_name', 'main-menu')
        ->execute()->fetch();

      $item = array(
        'link_path' => drupal_get_normal_path('forum/' . $term->tid),
        'link_title' => $term->name,
        'menu_name' => 'main-menu',
        'plid' => $top_menu->mlid,
      );
      menu_link_save($item);
    }
  }

  menu_cache_clear_all();
  drupal_set_message(t('Forums child menu items set.'));

}


/**
 * Implements hook_disable().
 */
function nm_forums_disable() {
  //get dependencies
  $info = db_select('system', 's')
    ->fields('s', array('info'))
    ->condition('name', 'nm_forums')
    ->execute()->fetch();
  $info = unserialize($info->info);

  $dependencies = array();
  foreach ($info['dependencies'] as $project) {
    if ($project != 'forum' && $project != 'advanced_forum') {
    //get module name
    $data = db_select('system', 's')
      ->fields('s', array('info'))
      ->condition('name', $project)
      ->execute()->fetch();
    $data = unserialize($data->info);
    $dependencies[] = $data['name'];
    }
  }

  //also disable core forums
  module_disable(array('advanced_forum', 'forum'), FALSE);

  //notify which mods may be able to be disabled too
  drupal_set_message(t('NodeMaker Forums has been disabled.  Forum & Advanced Forum were also disabled.  To remove containers, forums and nested menu items, you must also <u>uninstall</u> NodeMaker Forums.'));
  drupal_set_message(t('You may now also be able to disable !modules.', array('!modules' => implode(', ', $dependencies))));
}


/**
 * Implements hook_uninstall().
 */
function nm_forums_uninstall() {
  //separate into steps
  nm_forums_uninstall_child_menu_items();
  nm_forums_uninstall_forum();
  drupal_set_message(t('NodeMaker Forums has been uninstalled.'));
}


/**
 *  Helper function for uninstall
 */
function nm_forums_uninstall_child_menu_items() {

  //get the vid for forum vocab
  $vocabs = taxonomy_vocabulary_get_names();
  $vid = $vocabs['forums']->vid;

  //get the tids of the terms
  $terms = db_select('taxonomy_term_data', 't')
    ->fields('t', array('tid', 'name'))
    ->condition('vid', $vid)
    ->execute()->fetchAll();

  //delete each menu item
  foreach ($terms as $term) {
    menu_link_delete(NULL, 'forum/' . $term->tid);
  }

  drupal_set_message(t('All Forums child menu items removed.'));
}


/**
 *  Helper function for uninstall
 */
function nm_forums_uninstall_forum() {
  //uninstall core forum module
  drupal_uninstall_modules(array('advanced_forum', 'forum'), FALSE);
  drupal_set_message(t('Uninstalled Forums and Advanced Forums.'));

}