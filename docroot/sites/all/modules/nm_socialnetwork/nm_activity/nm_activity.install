<?php
/**
 * @file
 * Contains install and update functions for Nodemaker Activity.
 */

/**
 * Implements hook_install().
 */
function nm_activity_install() {

  /*
  Error on install of user_insert.  @todo
  //var to use in templates array
  $roles = user_roles();
  foreach ($roles as $id => $name) {
    $roles[$id] = 0;
  }
  */

  //set the data we will need
  $templates = array(
    array(
      'type' => 'activity',
      'callback' => 'activity_record',
      'label' => 'Leave a Comment',
      'hook' =>  'comment_insert',
      'parameters' => array(
        'options' => array(
          'window' => '0',
          'types' => array(),
          'view_modes' => array(),
        ),
        'templates' => array(
          'en' => array(
            'node' => '[comment:author:activity-profile-link] left a comment on <a href="[comment:node:url]#comment-[comment:cid]" title="[comment:node:title]">[comment:node:title]</a> <em>[comment:created:since] ago</em>',
            'comment' => '[comment:author:activity-profile-link] left a comment on <a href="[comment:node:url]#comment-[comment:cid]" title="[comment:node:title]">[comment:node:title]</a> <em>[comment:created:since] ago</em>',
            'node_comment' => '[comment:author:activity-profile-link] left a comment on <a href="[comment:node:url]#comment-[comment:cid]" title="[comment:node:title]">[comment:node:title]</a> <em>[comment:created:since] ago</em>',
            'public' => '[comment:author:activity-profile-link] left a comment on <a href="[comment:node:url]#comment-[comment:cid]" title="[comment:node:title]">[comment:node:title]</a> <em>[comment:created:since] ago</em>',
          ),
        ),
      ),
    ),
    /*
    //Error on install.  @todo
    array(
      'type' => 'activity',
      'callback' => 'activity_record',
      'label' => 'User Register',
      'hook' =>  ' user_insert',
      'parameters' => array(
        'options' => array(
          'window' => '0',
          'roles' => array($roles),
        ),
        'templates' => array(
          'en' => array(
            'user' => '[user:activity-profile-link] registered <em>[user:created:since] ago</em>',
            'public' => '[user:activity-profile-link] registered <em>[user:created:since] ago</em>',
          ),
        ),
      ),
    ),
    */
    array(
      'type' => 'activity',
      'callback' => 'activity_record',
      'label' => 'Create Blog',
      'hook' =>  'node_insert',
      'parameters' => array(
        'options' => array(
          'window' => '0',
          'types' => array(
            'nm_blog' => 'nm_blog',
          ),
          'view_modes' => array(),
        ),
        'templates' => array(
          'en' => array(
            'node' => '[node:author:activity-profile-link] wrote a blog post <em>[node:created:since] ago</em> - [node:activity-node-link]',
            'public' => '[node:author:activity-profile-link] wrote a blog post <em>[node:created:since] ago</em> - [node:activity-node-link]',
          ),
        ),
      ),
    ),
    array(
      'type' => 'activity',
      'callback' => 'activity_record',
      'label' => 'Create Forum Post',
      'hook' =>  'node_insert',
      'parameters' => array(
        'options' => array(
          'window' => '0',
          'types' => array(
            'forum' => 'forum',
          ),
          'view_modes' => array(),
        ),
        'templates' => array(
          'en' => array(
            'node' => '[node:author:activity-profile-link] wrote a forum topic <em>[node:created:since] ago</em> - [node:activity-node-link]',
            'public' => '[node:author:activity-profile-link] wrote a forum topic <em>[node:created:since] ago</em> - [node:activity-node-link]',
          ),
        ),
      ),
    ),
    array(
      'type' => 'activity',
      'callback' => 'activity_record',
      'label' => 'Create Testimonials',
      'hook' =>  'node_insert',
      'parameters' => array(
        'options' => array(
          'window' => '0',
          'types' => array(
            'nm_testimonial' => 'nm_testimonial',
          ),
          'view_modes' => array(),
        ),
        'templates' => array(
          'en' => array(
            'node' => '[node:author:activity-profile-link] left a [node:content-type:name] <em>[node:created:since] ago</em>',
            'public' => '[node:author:activity-profile-link] left a [node:content-type:name] <em>[node:created:since] ago</em>',
          ),
        ),
      ),
    ),
  );

  //set the activity templates
  foreach ($templates as $template) {
    //save it once to get the aid.
    $aid = actions_save('activity_record', 'activity', array(), $template['label']);

    //save the aid away to the parameters.
    $handler = activity_load_handler($template['hook']);
    actions_save('activity_record', 'activity', array('aid' => $aid, 'templates' => array(), 'options' => ActivityActionHandler::defaultOptions($handler->optionDefinition())), $template['label'], $aid);

    //write to the trigger assignments.
    $record = array(
      'hook' => $template['hook'],
      'weight' => 0,
      'aid' => $aid
    );
    drupal_write_record('trigger_assignments', $record);

    //save the options & template
    actions_save('activity_record', 'activity', array('aid' => $aid, 'templates' => $template['parameters']['templates'], 'options' => $template['parameters']['options']), $template['label'], $aid);

    //update activity log and generate messages for existing content
    //@todo

  }

  //change weight of Trigger per activity module's instructions
  //Activity2 requires Trigger's weight be greater than Pathauto's in order to produce proper aliased paths
  //get Pathauto's weight
  $pathauto = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', 'pathauto')
    ->execute()->fetchAssoc();
  //set Trigger's weight
  db_update('system')
    ->fields(array(
      'weight' => $pathauto['weight'] +1,
    ))
    ->condition('name', 'trigger')
    ->execute();  

}

