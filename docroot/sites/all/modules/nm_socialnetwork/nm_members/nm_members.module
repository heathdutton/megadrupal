<?php
/**
 * @file
 * Code for the nm_members feature.
 */

include_once 'nm_members.features.inc';


/**
 * Implements hook_menu().
 */
function nm_members_menu() {
  $item = array();
  $items['admin/config/nodemaker/nm-members'] = array(
    'title' => t('Members landing page'),
    'description' => t('Configure which roles should be excluded.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodemaker_nm_members_config_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}


/**
 * Custom Process variables for user-profile.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $account
 *
 * @see user-profile.tpl.php
 */
function nm_members_preprocess_user_profile(&$variables) {

  //custom hiding of 'History'
  if (isset($variables['user_profile']['summary'])) {
    unset($variables['user_profile']['summary']);
    unset($variables['elements']['summary']);
  }
  //custom hiding of 'Member Profile' from profile2 since we are using Views to display content
  if (isset($variables['user_profile']['profile_nm_member_profile'])) {
    unset($variables['user_profile']['profile_nm_member_profile']);
    unset($variables['elements']['profile_nm_member_profile']);
  }
  //custom hiding of 'user picture' from core since we are using Views to display profile2 content
  if (isset($variables['user_profile']['user_picture'])) {
    unset($variables['user_profile']['user_picture']);
    unset($variables['elements']['user_picture']);
  }

  //below copied from user.pages.inc

  $account = $variables['elements']['#account'];

  // Helpful $user_profile variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['user_profile'][$key] = $variables['elements'][$key];
  }

  // Preprocess fields.
  field_attach_preprocess('user', $account, $variables['elements'], $variables);
}


/**
 * Implements hook_block_view_alter().
 */
function nm_members_block_view_alter(&$data, $block) {
  //for the nm_members View blocks
  switch ($block->delta) {

    case 'nm_member_profile-block' :
    case 'nm_member_profile-block_1' :
    case 'nm_member_profile-block_2' :
    case 'nm_member_profile-block_3' :
    case 'nm_member_profile-block_4' :
    case 'nm_member_profile-block_5' :

      //make sure there is data first
      if (!empty($data)) {

        //get the Views data
        $viewname = $data['content']['#views_contextual_links_info']['views_ui']['view_name'];
        $display = $data['content']['#views_contextual_links_info']['views_ui']['view_display_id'];
        $view = views_get_view($viewname);
        $view->set_display($display);
        $view->set_arguments(array(arg(1)));
        $view->preview();

        //figure out if there are results in the block
        $not_empty = FALSE;
        foreach ($view->result[0] as $k => $v) {
          if (preg_match('%field_field_%', $k)) {
            if (!empty($v)) {
              $not_empty = TRUE;
            }
          }
        }

        //hide Views blocks if no content
        if ($not_empty == FALSE) {
          unset($data['content']);
          unset($data['subject']);
        }

      }

      break;
  }

}


/**
 * Configuration form.
 */
function nodemaker_nm_members_config_form() {
  $form = array();

  //get all roles
  $roles = user_roles(TRUE);

  //get rid of authenticated user
  $auth = db_select('role', 'r')
    ->fields('r', array('rid'))
    ->condition('name', 'authenticated user')
    ->execute()->fetch();
  //remove auth role from options
  unset($roles[$auth->rid]);

  //get rid of admin role
  $admin = variable_get('user_admin_role');

  $form['members_view_exclude_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exclude members who have any of these roles on the Members page'),
    '#options' => $roles,
    '#default_value' => variable_get('members_view_exclude_roles', array($admin => $admin)),
    '#attributes' => array(
      'class' => array('nodemaker-app-config'),
    ),
  );

  return system_settings_form($form);
}


function nodemaker_nm_members_getting_started_form() {
  $form = nodemaker_nm_members_getting_started_content();
  return system_settings_form($form);
}

/**
  * Content for nodemaker_getting_started_form().
  * Content for nodemaker_nm_members_getting_started_form().
  */
function nodemaker_nm_members_getting_started_content() {

  //variables used throughout form
  $destination = drupal_get_destination();
  $destination = $destination['destination'];
  //get the icon
  $icon = drupal_get_path('module', 'nm_members') . '/' . 'nm_members' . '-icon.png';
  if (file_exists($icon)) {
    $image = l(theme('image', array('path' => $icon, 'attributes' => array('class' => array('nodemaker-icon')))), 'admin/nodemaker/apps/'. 'nm_members', array('html' => TRUE, 'attributes' => array('class' => array('nodemaker-icon-link'), 'title' => 'NodeMaker Members Details')));
  }
  else {
    $image = '';
  }
  //group
  $form['tabs']['nm_members_getting_started'] = array(
    '#type' => 'fieldset',
    '#title' => t('NodeMaker Members'),
    '#description' => $image . t('<h4>NodeMaker Members Launch Checklist</h4><p>NodeMaker Members provides several default configurations, including ones that were defined during installation. This launch checklist will help you understand some of the configurations that you should verify are correct for your needs prior to launching your new website.</p>'),
    '#attributes' => array(
      'class' => array('getting-started'),
    ),
  );

  //permissions for who can view profiles
  $description = t('By default, only logged in users can "view member profiles".  You can change this adjusting the permission.  !link.', array('!link' => l('Check permission', 'admin/people/permissions', array('fragment' => 'module-user', 'query' => array('destination' => $destination), 'attributes' => array('title' => 'Edit member profile visibility')))));
  $form['tabs']['nm_members_getting_started']['nm_members_getting_started_profile_visibility'] = array(
    '#type' => 'checkbox',
    '#title' => t('Member Profile Visibility'),
    '#description' => $description,
    '#default_value' => variable_get('nm_members_getting_started_profile_visibility', 0),
    '#title_display' => 'after',
    '#theme' => 'toggleswitch',
  );



  return $form;

}


/**
 * Implements hook_help().
 */
function nm_members_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nm_members':
      $content = array(
        '#group' => 'info',
        '#theme' => 'item_list',
        '#attributes' => array(
          'class' => array('nodemaker-apps-details'),
        ),
        '#items' => nm_members_help_details(),
      );

      return render($content);
      break;
  }
}


/**
  * Content for hook_help().
  */
function nm_members_help_details() {
  $items = array();
  $items[] = '<strong>' . t('Who can view member profiles?') . '</strong>  ' . t('Check your !link.', array('!link' => l('permissions settings for "view user profiles"', 'admin/people/permissions', array('fragment' => 'module-user'))));
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('Issues?') . '</strong>  ' . t('Have a support question?  Find a bug?  !issue!', array('!issue' => '<a href="http://drupal.org/project/issues/nm_socialnetwork" title="NodeMaker Social Network Issue Queue" target="_blank">Please use the issue queue</a>'));
  return $items;
}
