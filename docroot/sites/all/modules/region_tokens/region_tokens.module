<?php
/**
 * @file
 * Base module file for region_tokens
 *
 * @defgroup region_tokens Region Tokens
 * @{
 */

/**
 * Implements hook_menu().
 */
function region_tokens_menu() {
  $items = array();
  $items['admin/config/content/region-tokens'] = array(
    'title' => 'Region Tokens',
    'description' => 'Administer module configuration settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('region_tokens_settings'),
    'file' => 'includes/region_tokens.admin.inc',
    'access arguments' => array('administer themes'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_token_info.
 */
function region_tokens_token_info() {
  $info = array();
  if (!($regions = variable_get('region_tokens:regions', array()))) {
    return $info;
  }
  $info['types'] = array(
    'region' => array(
      'name' => t('Regions'),
      'description' => t('Tokens with region content.'),
    ),
  );
  foreach ($regions as $name => $data) {
    list($theme, $region) = explode(':', $data);
    $info['tokens']['region'][$name] = array(
      'name' => $data,
      'description' => t('The contents of region %region in theme %theme', array(
        '%region' => $region,
        '%theme' => $theme,
      )),
    );
  }

  return $info;
}

/**
 * Implements hook_tokens.
 *
 * @param string $type The machine-readable name of the type (group) of token
 * being replaced, such as 'node', 'user', or another type defined by a
 * hook_token_info() implementation.
 * @param array $tokens An array of tokens to be replaced. The keys are the
 * machine-readable token names, and the values are the raw [type:token] strings
 * that appeared in the original text.
 * @param array $data (optional) An associative array of data objects to be used
 * when generating replacement values, as supplied in the $data parameter to
 * token_replace().
 * @param array $options (optional) An associative array of options for token
 * replacement; see token_replace() for possible values.
 *
 * @return array
 * - An associative array of replacement values, keyed by the raw [type:token]
 * strings from the original text.
 */
function region_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type === 'region') {
    foreach ($tokens as $key => $replacement) {
      $replacements[$replacement] = '';
      list($theme, $region) = explode(':', $key);
      $enabled = variable_get('region_tokens:regions', array());
      if (!array_key_exists($key, $enabled)) {
        $replacements[$replacement] = $replacement;
        watchdog('region_tokens', 'Region token "%token" has not been enabled; <a href="!url">review settings.</a>.', array(
          '%token' => $replacement,
          '!url' => url('admin/config/content/region-tokens'),
        ));
      }
      elseif (block_list($region) && ($build = block_get_blocks_by_region($region))) {
        $build = array(
          '#theme' => 'region_tokens_region',
          '#region' => $region,
          '#content' => drupal_render($build),
        );
        $replacements[$replacement] = drupal_render($build);
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_preprocess_region_tokens_region().
 */
function region_tokens_preprocess_region_tokens_region(&$vars) {
  $vars['classes_array'][] = drupal_region_class($vars['region']);
  $vars['theme_hook_suggestions'][] = 'region_tokens_region__' . $vars['region'];
}

/**
 * Implements hook_theme().
 */
function region_tokens_theme($existing, $type, $theme, $path) {
  return array(
    'region_tokens_region' => array(
      'variables' => array(
        'region' => NULL,
        'content' => NULL,
      ),
      'template' => 'region-tokens-region',
    ),
  );
}
