<?php
/**
 * @file
 * Contact notes module logic.
 */

define('CONTACT_CENTRE_UNREAD', 0);
define('CONTACT_CENTRE_READ', 1);
define('CONTACT_CENTRE_PATH', 'admin/contact');

/**
 * Implements hook_permission().
 */
function contact_centre_permission() {
  return array(
    'administer contact centre' => array(
      'title' => t('Administer Contact Centre'),
      'description' => t('Administer the settings for the contact centre.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function contact_centre_menu() {
  return array(

    'admin/contact' => array(
      'title' => 'Contact Centre',
      'description' => t('Capture and manage communications from the site-wide contact form.'),
      'weight' => -10,
      'page callback' => 'contact_centre_messages',
      'access arguments' => array('administer contact centre'),
      'file' => 'includes/contact_centre.admin.messages.inc',
      'type' => MENU_NORMAL_ITEM,
    ),

    'admin/contact/messages' => array(
      'title' => 'Contact Centre',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),

    'admin/contact/settings' => array(
      'title' => 'Settings',
      'description' => t('Manage the contact centre settings.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contact_centre_admin_settings'),
      'access arguments' => array('administer contact centre'),
      'file' => 'includes/contact_centre.admin.settings.inc',
      'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    ),

    'admin/contact/%_message_id/view' => array(
      'title' => 'View Message',
      'description' => t('View message from contact centre.'),
      'page callback' => 'contact_centre_view_message',
      'page arguments' => array(2),
      'access arguments' => array('administer contact centre'),
      'file' => 'includes/contact_centre.admin.view.inc',
      'type' => MENU_NORMAL_ITEM,
    ),

    'admin/contact/%_message_id/add-note' => array(
      'title' => 'Add Message Note',
      'description' => t('Add note to message from contact centre.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contact_centre_add_note', 2),
      'access arguments' => array('administer contact centre'),
      'file' => 'includes/contact_centre.admin.add-note.inc',
      'type' => MENU_NORMAL_ITEM,
    ),

    'admin/contact/%_message_id/mark/%_validate_mark_op/%' => array(
      'title' => 'Set Contact Message Status',
      'description' => t('Set status of message from contact centre.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contact_centre_mark', 2, 4, 5),
      'access arguments' => array('administer contact centre'),
      'file' => 'includes/contact_centre.admin.mark.inc',
      'type' => MENU_NORMAL_ITEM,
    ),

  );
}

/**
 * Implement hook_menu_local_tasks_alter().
 */
function contact_centre_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action links to contact centre view and add note pages.
  switch ($root_path) {
    case 'admin/contact/%/view':
      $item = menu_get_item('admin/contact');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      $item = menu_get_item('admin/contact/' . arg(2) . '/add-note');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
    case 'admin/contact/%/add-note':
      $item = menu_get_item('admin/contact');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      $item = menu_get_item('admin/contact/' . arg(2) . '/view');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

/**
 * Menu helper function to validate message id.
 */
function _message_id_load($mid) {
  $query = "SELECT `id` FROM {contact_centre_messages} WHERE id = :id";
  $id = db_query($query, array(':id' => $mid))->fetchField();

  if ($id > 0) {
    return $mid;
  }

  return FALSE;
}

/**
 * Menu helper function to validate status action.
 */
function _validate_mark_op_load($op) {
  if ($op == 'open-status' || $op == 'resolve-status') {
    return $op;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_mail_alter().
 */
function contact_centre_mail_alter(&$message) {
  if ($message['id'] == 'contact_page_mail') {
    $body = $message['body'];
    // Remove default contact string.
    unset($body[0]);
    $record = array(
      'cid'     => isset($message['params']['category']['cid']) ? $message['params']['category']['cid'] : 1,
      'uid'     => isset($message['params']['sender']) ? $message['params']['sender']->uid : 0,
      'name'    => $message['params']['name'],
      'mail'    => $message['params']['mail'],
      'subject' => $message['params']['subject'],
      'message' => implode("\n", $body),
      'created' => REQUEST_TIME,
    );
    drupal_write_record('contact_centre_messages', $record);
    module_invoke_all('contact_centre_message_insert', $record['id']);
  }
}

/**
 * Implements hook_theme().
 */
function contact_centre_theme($existing, $type, $theme, $path) {
  return array(
    'contact_centre_message_view' => array(
      'variables' => array(
        'message_id'        => NULL,
        'contact_category'  => NULL,
        'uid'               => NULL,
        'user_name'         => NULL,
        'user_email'        => NULL,
        'subject'           => NULL,
        'message'           => NULL,
        'created'           => NULL,
        'opened'            => NULL,
        'resolved'          => NULL,
        'notes'             => NULL,
      ),
      'template'      => 'contact-centre-message-view',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implement hook_mail().
 */
function contact_centre_mail($key, &$message, $params) {
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  } 
  if (isset($params['body'])) {
    $message['body'][] = $params['body']; 
  }
  if (isset($params['headers']) && is_array($params['headers'])) {   
    $message['headers'] += $params['headers'];
  }

  switch ($key) {
    case 'action_reply':
      // get the message that is being replied to
      $query = db_select('contact_centre_messages', 'm')
        ->fields('m', array('name', 'message', 'created'))
        ->condition('m.id', $params['mid'], '=');
      // execute the query and fetch all the results back into an associative array
      $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
      $message['body'][] = t('Dear !name,', array('!name' => check_plain($result[0]['name'])));
      $message['body'][] = $params['note'];
      $message['body'][] = t('On !date you wrote:', array('!date' => date('d/m/Y', $result[0]['created'])));
      $message['body'][] = check_plain($result[0]['message']);
      break;
  }
}

/**
 * Implements hook_views_api().
 */
function contact_centre_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'contact_centre') . '/includes',
  );
}

/**
 * Implements hook_user_login().
 */
function contact_centre_user_login(&$edit, $account) {
  if (user_access('administer contact centre', $account)) {
    if (variable_get('contact_centre_show_unopened', TRUE)) {
      $unopened_count = contact_centre_get_unopened_count();
      $unresolved_count = contact_centre_get_unresolved_count();

      if ($unopened_count > 0 || $unresolved_count > 0) {
        drupal_set_message(t('There are <a href="@url">@unopened unopened and @unresolved unresolved</a> contact form messages.', array(
          '@url' => url(CONTACT_CENTRE_PATH),
          '@unopened' => $unopened_count,
          '@unresolved' => $unresolved_count,
        )));
      }
    }
  }
}

/**
 * Implements hook_user_view().
 */
function contact_centre_user_view($account, $view_mode, $langcode) {
  if (user_access('administer contact centre', $account)) {
    if (variable_get('contact_centre_show_profile', FALSE)) {
      $unopened_count = contact_centre_get_unopened_count();
      $unresolved_count = contact_centre_get_unresolved_count();

      if ($unopened_count > 0 || $unresolved_count > 0) {
        $account->content['contact_centre'] = array(
          '#type' => 'user_profile_category',
          '#title' => 'Contact messages',
          'messages' => array(
            '#type' => 'user_profile_item',
            '#title' => '',
            '#markup' => t('There are <a href="@url">@unopened unopened and @unresolved unresolved</a> contact form messages.', array(
              '@url' => url(CONTACT_CENTRE_PATH),
              '@unopened' => $unopened_count,
              '@unresolved' => $unresolved_count,
            )),
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function contact_centre_field_extra_fields() {
  $fields['user']['user'] = array(
    'display' => array(
      'contact_centre' => array(
        'label' => t('Site contact form messages'),
        'description' => t('Saved site contact form messages view element.'),
        'weight' => 10,
      ),
    ),
  );

  return $fields;
}

/**
 * Return the count of unopened messages.
 *
 * @return int
 *   Number of unopened message.
 */
function contact_centre_get_unopened_count() {
  $query = "SELECT COUNT(id) FROM contact_centre_messages WHERE `opened` = 0";
  return db_query($query)->fetchField();
}

/**
 * Return the count of unresolved messages.
 *
 * @return int
 *   Number of unresolved message.
 */
function contact_centre_get_unresolved_count() {
  $query = "SELECT COUNT(id) FROM contact_centre_messages WHERE `resolved` = 0";
  return db_query($query)->fetchField();
}
