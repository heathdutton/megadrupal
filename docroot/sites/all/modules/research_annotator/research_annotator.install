<?php
/**
 * @file: Creates tables and recommended filters on install.
 */

/**
 * Implements hook_schema().
 */
function research_annotator_schema() {
  
  $arr_schema = array();

  $arr_schema['research_annotator_annotation'] = array(
    'description' => 'Stores annotations and annotation based information.',
    'fields' => array(
      'annotation_id' => array(
        'description' => 'A unique id of the annotation.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'node_id' => array(
        'description' => 'The node the annotation belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The user id of the annotation author.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'paragraph_index' => array(
        'description' => 'The paragraph index the annotation belongs to. This can actually be the index of other elements such as tables or lists.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL
      ),
      'annotation' => array(
        'description' => 'The annotation contents.',
        'type' => 'varchar',
        'length' => 10000,
        'not null' => TRUE,
        'default' => '',
      ),
      'annotation_format' => array(
        'description' => 'The output format of the annotation content.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'created' => array(
        'description' => 'The creation datetime of the annotation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The updated datetime of the annotation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'annotation_updated' => array('updated'),
      'annotation_created' => array('created'),
    ),
    'foreign keys' => array(
      'node_id' => array(
        'table' => 'node',
        'columns' => array('node_id' => 'nid'),
      ),
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('annotation_id'),
  );

  return $arr_schema;
}

/*
 * Implements hook_install().
 */
function research_annotator_install() {
  
  // Create a default filter format that people can use on body text.
  $s_filterName = 'annotation_safe_output';

  $arr_filterFormat = array(
    'format' => $s_filterName,
    'name' => st('Annotation Safe Output'),
    'status' => 1,
    'filters' => array(
      $s_filterName => array(
        'weight' => 0,
        'status' => 1,
      ),
      'filter_autop' => array(
        'format' => $s_filterName,
        'status' => 0
      ),
      'filter_htmlcorrector' => array(
        'format' => $s_filterName,
        'status' => 1
      ),
      'filter_html' => array(
        'format' => $s_filterName,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<p> <a> <em> <strong> <cite> <blockquote> <h2> <h3> <h4> <h5> <h6> <ul> <ol> <li> <dl> <dt> <dd> <sup> <sub> <table> <thead> <tbody> <tfoot> <tr> <th> <td> <img>',
          'filter_html_help' => 1,
          'filter_html_nofollow' => 0,
        )
      )
    )
  );

  $o_filterFormat = (object) $arr_filterFormat;
  filter_format_save($o_filterFormat);
}

/**
 * Converts revision id column to node id so annotations are more easily managed.
 */
function research_annotator_update_7100(&$sandbox) {
  
  // Change the db column.
  if (db_field_exists('research_annotator_annotation', 'revision_id')) {
    
    db_change_field(
      'research_annotator_annotation', 
      'revision_id', 
      'node_id', 
      array(
        'description' => 'The node the annotation belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      )
    );

    db_truncate('cache')->execute();

    // Change revision ids into node ids.
    $arr_annotations = entity_load('research_annotation');

    foreach ($arr_annotations as $o_annotation) {
      $o_annotatedNode = node_load(NULL, $o_annotation->node_id);
      $o_annotation->node_id = $o_annotatedNode->nid;
      entity_save('research_annotation', $o_annotation);
    }
  }
    
}
