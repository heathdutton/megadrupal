<?php
/**
 * @file
 * Checkmate sample module creates some basic checks and checkmate item types.
 */

/**
 * Implements hook_install().
 */
function checkmate_sample_install() {
  $t = get_t();

  // Create the basic checkmate-item type.
  $checkmate_item_type = array(
    'type' => '',
    'name' => '',
    'description' => '',
    'help' => '',
    'revision' => 1,
  );

  $checkmate_item_type['type'] = 'default';
  $checkmate_item_type['label'] = $t('Default');
  $checkmate_item_type['description'] = $t('A Default Checkmate item type.');
  $checkmate_item_type['is_new'] = TRUE;
  checkmate_item_type_save((object) $checkmate_item_type);

  // Create all the fields we are adding to our checkmate item type.
  foreach (_checkmate_sample_installed_fields('checkmate_item') as $field) {
    field_create_field($field);
  }

  foreach (_checkmate_sample_installed_instances('checkmate_item') as $instance) {
    $instance['entity_type'] = 'checkmate_item';
    $instance['bundle'] = $checkmate_item_type['type'];
    field_create_instance($instance);
  }

  foreach (_checkmate_sample_installed_fields('checkmate_status') as $field) {
    field_create_field($field);
  }
  // Create all the instances for our fields.
  foreach (_checkmate_sample_installed_instances('checkmate_status') as $instance) {
    $instance['entity_type'] = 'checkmate_item_status';
    $instance['bundle'] = $checkmate_item_type['type'];
    field_create_instance($instance);
  }
  // Create the checkmate display node type.
  $node_display = array(
    'type' => 'checkmate_display',
    'name' => $t('Checkmate display'),
    'base' => 'node_content',
    'description' => $t('A checkmate display node.'),
    'title_label' => $t('Title'),
    'custom' => TRUE,
    'modified' => TRUE,
    'locked' => FALSE,
  );
  $content_type = node_type_set_defaults($node_display);
  node_type_save($content_type);

  variable_set('node_options_checkmate_display', array('status'));
  if (module_exists('comment')) {
    variable_set('comment_checkmate_display', COMMENT_NODE_CLOSED);
  }
  variable_set('node_submitted_checkmate_display', FALSE);
  variable_set('menu_options_checkmate_display', array('management'));
  // Create all the fields we are adding to our checkmate display node type.
  foreach (_checkmate_sample_installed_fields('node') as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  foreach (_checkmate_sample_installed_instances('node') as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_display['type'];
    field_create_instance($instance);
  }
  $cids = _checkmate_sample_create_sample_checks();
  $checkmate_node->type = 'checkmate_display';
  $checkmate_node->title = $t('Checkmate');
  $checkmate_node->body = $t('Checkmate checklist');
  $checkmate_node->status = 1;
  $checkmate_node->promote = 0;
  $checkmate_node->language = LANGUAGE_NONE;
  $checkmate_node->created = time();
  $node = node_submit($checkmate_node);
  foreach ($cids as $cid) {
    $checkmate_node->checkmate_checks[LANGUAGE_NONE][]['cid'] = $cid;
  }
  node_save($node);
  $path = array();
  $path['source'] = 'node/' . $node->nid;
  $path['language'] = LANGUAGE_NONE;
  $path['alias'] = 'admin/reports/checkmate';
  path_save($path);

  $link = array();
  $link['link_title'] = $checkmate_node->title;
  $link['link_path'] = $path['source'];
  $link['router_path'] = 'node/%';
  $parent_menu = db_select('menu_links', 'ml')
    ->condition('link_path', 'admin/reports')
    ->fields('ml', array('mlid'))
    ->execute()->fetchField();
  $link['plid'] = $parent_menu;
  $link['menu_name'] = 'management';
  menu_link_save($link);
  menu_rebuild();
}

/**
 * Implements hook_uninstall().
 */
function checkmate_sample_uninstall() {
  variable_del('node_options_checkmate_display');
  variable_del('comment_checkmate_display');
  variable_del('node_submitted_checkmate_display');
  variable_del('menu_options_checkmate_display');

  module_load_include('module', 'checkmate');

  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'checkmate_display'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);
  $sql = 'SELECT cid FROM {checkmate_item} ci WHERE ci.type = :type';
  $result = db_query($sql, array(':type' => 'default'));
  $cids = array();
  foreach ($result as $row) {
    $cids[] = $row->cid;
  }
  checkmate_item_delete_multiple($cids);
  $sql = 'SELECT csid FROM {checkmate_item_status} cis WHERE cis.type = :type';
  $result = db_query($sql, array(':type' => 'default'));
  $cisds = array();
  foreach ($result as $row) {
    $cisds[] = $row->csid;
  }

  checkmate_item_status_delete_multiple($cisds);

  // Loop over each of the fields defined by this module and delete.
  foreach (_checkmate_sample_installed_fields() as $field_type) {
    foreach (array_keys($field_type) as $field) {
      field_delete_field($field);
    }
  }

  // Loop over any remaining field instances attached to the default bundle.
  $instances = field_info_instances('checkmate_item_status', 'default');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our checkmate item type.
  checkmate_item_type_delete(checkmate_item_type_load('default'));

  // Delete our checkmate display node type.
  node_type_delete('checkmate_display');

  // Purge all field information.
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this checkmate item type.
 */
function _checkmate_sample_installed_fields($type = NULL) {
  $t = get_t();
  $fields['checkmate_status'] = array(
    'checkmate_comment' => array(
      'field_name' => 'checkmate_comment',
      'cardinality' => 1,
      'type' => 'text',
      'settings'    => array(
        'max_length' => 255,
      ),
    ),
    'checkmate_user' => array(
      'field_name' => 'checkmate_user',
      'cardinality' => 1,
      'type' => 'text',
      'settings'    => array(
        'max_length' => 60,
      ),
    ),
  );
  $fields['checkmate_item'] = array(
    'checkmate_links' => array(
      'field_name' => 'checkmate_links',
      'cardinality' => -1,
      'type'        => 'link_field',
    ),
  );
  $fields['node'] = array(
    'checkmate_checks' => array(
      'field_name' => 'checkmate_checks',
      'cardinality' => -1,
      'type' => 'checkmate_reference',
    ),
  );
  return isset($type) ? $fields[$type] : $fields;
}

/**
 * Returns a structured array defining the instances for this checkmate item type.
 */
function _checkmate_sample_installed_instances($type) {
  $t = get_t();
  $fields['checkmate_status'] = array(
    'checkmate_comment' => array(
      'field_name' => 'checkmate_comment',
      'label'       => $t('Comment'),
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(),
    ),
    'checkmate_user' => array(
      'field_name'  => 'checkmate_user',
      'label' => $t('Developer'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(),
    ),
  );
  $fields['checkmate_item'] = array(
    'checkmate_links' => array(
      'field_name' => 'checkmate_links',
      'label'       => $t('Links'),
      'type'        => 'link_field',
      'widget'      => array(
        'type'    => 'link_field',
      ),
      'display' => array(),
    ),
  );
  $fields['node'] = array(
    'checkmate_checks' => array(
      'field_name' => 'checkmate_checks',
      'label'       => $t('Checks'),
      'type'        => 'checkmate_reference',
      'widget'      => array(
        'type'    => 'options_buttons',
      ),
      'display' => array(),
    ),
  );
  return isset($type) ? $fields[$type] : $fields;
}

/**
 * Create some sample checks.
 */
function _checkmate_sample_create_sample_checks() {
  $t = get_t();
  $checks = array();
  $checks[] = array(
    'title' => 'Google Analytics Tracking Code',
    'description' => '',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/config/system/googleanalytics',
          'title' => 'Google Analytics',
        ),
        array(
          'url' => 'admin/config/system/google-analytics-reports',
          'title' => 'Google Analytics Reports login',
        ),
      ),
    ),
    'callback' => 'checkmate_is_variable_not_empty',
    'parameters' => serialize(array('checkmate_variable_name' => 'googleanalytics_account')),
    'check_group' => 'Development',
    'check_subgroup' => 'SEO',
  );
  $checks[] = array(
    'title' => 'URL aliases',
    'description' => 'configure SEO-friendly path patterns',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/config/search/path/patterns',
          'title' => 'URL aliases',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Development',
    'check_subgroup' => 'SEO',
  );
  $checks[] = array(
    'title' => 'Empty views',
    'description' => 'user-friendly message for views with no results',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/structure/views',
          'title' => 'Views',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Development',
    'check_subgroup' => 'Configuration',
  );
  $checks[] = array(
    'title' => 'HTTP 404 error page',
    'description' => '404 pages should be more elaborate, suggesting to log in or clarifying why the page does not exist (anymore).',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Development',
    'check_subgroup' => 'Configuration',
  );
  $checks[] = array(
    'title' => 'Favicon',
    'description' => '',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'http://tools.dynamicdrive.com/favicon',
          'title' => 'Create a favicon',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'General Theming',
  );
  $checks[] = array(
    'title' => 'IE7 on PC',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'Cross browser check',
  );
  $checks[] = array(
    'title' => 'IE8 on PC',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'Cross browser check',
  );
  $checks[] = array(
    'title' => 'IE9 on PC',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'Cross browser check',
  );
  $checks[] = array(
    'title' => 'FF on Mac',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'Cross browser check',
  );
  $checks[] = array(
    'title' => 'Chrome on Mac',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'Cross browser check',
  );
  $checks[] = array(
    'title' => 'Safari on Mac',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'Cross browser check',
  );
  $checks[] = array(
    'title' => 'Print CSS',
    'description' => 'Create a print CSS and test it! Cross-browser!',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Theming',
    'check_subgroup' => 'General Theming',
  );
  $checks[] = array(
    'title' => 'Disable development modules',
    'description' => 'Disable Coder, Devel, Module builder and Origin Development Tools modules.',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/modules',
          'title' => 'Modules',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Testing',
    'check_subgroup' => 'Performance',
  );
  $checks[] = array(
    'title' => 'Enable caching',
    'description' => 'Enable page, CSS and JS cache.',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/config/development/performance',
          'title' => 'Performance settings',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Testing',
    'check_subgroup' => 'Performance',
  );
  $checks[] = array(
    'title' => 'User registration enabled/disabled',
    'description' => 'Check with the customer or project manager if user registration should be disabled and act on it.',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/config/people/accounts',
          'title' => 'Account settings',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Testing',
    'check_subgroup' => 'Security & Spam',
  );
  $checks[] = array(
    'title' => 'Spamspan enabled',
    'callback' => 'checkmate_is_module_enabled',
    'parameters' => serialize(array('checkmate_module_name' => 'spamspan')),
    'check_group' => 'Testing',
    'check_subgroup' => 'Security & Spam',
  );
  $checks[] = array(
    'title' => 'User-1 account',
    'description' => 'Change user 1 username to admin, root, or something else you feel comfortable with.
Change password for the above if weak.
Keep the above info in a safe place!',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'user/1/edit',
          'title' => 'Edit admin user',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Testing',
    'check_subgroup' => 'Security & Spam',
  );
  $checks[] = array(
    'title' => 'Delete test content',
    'description' => 'Search on "test" and "lorem" to find test content, and delete it.',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Go-live',
    'check_subgroup' => 'Content cleanup',
  );
  $checks[] = array(
    'title' => 'Remove local/staging URLs from database?',
    'description' => 'Do a full search on your database for anything like http://localhost or http://staging.project.be and replace it.',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Go-live',
    'check_subgroup' => 'Content cleanup',
  );
  $checks[] = array(
    'title' => 'Remove test user generated content.',
    'description' => 'delete test submissions for webforms, polls, etc.',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Go-live',
    'check_subgroup' => 'Content cleanup',
  );
  $checks[] = array(
    'title' => 'Website information.',
    'description' => 'Is site name, slogan (if used), and e-mail correct?',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/config/system/site-information',
          'title' => 'Site information',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Go-live',
    'check_subgroup' => 'Customer identity',
  );
  $checks[] = array(
    'title' => 'Status report has no errors (no red messages)',
    'checkmate_links' => array(
      LANGUAGE_NONE => array(
        array(
          'url' => 'admin/reports/status',
          'title' => 'Status report',
        ),
      ),
    ),
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Go-live',
    'check_subgroup' => 'Maintenance/Configuration',
  );
  $checks[] = array(
    'title' => 'cron.php is scheduled on live server',
    'description' => 'cron.php is scheduled on live server',
    'callback' => 'checkmate_manual_check',
    'check_group' => 'Go-live',
    'check_subgroup' => 'Maintenance/Configuration',
  );

  $cids = array();
  foreach ($checks as $check) {
    $check += array(
      'title' => '',
      'description' => '',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'uid' => 0,
      'type' => 'default',
    );
    $cids[] = checkmate_item_save((object) $check);
  }
  return $cids;
}
