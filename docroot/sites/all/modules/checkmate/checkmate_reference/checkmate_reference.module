<?php
/**
 * @file
 * Checkmate_reference module file.
 */

/**
 * Implements hook_field_info().
 */
function checkmate_reference_field_info() {
  return array(
    'checkmate_reference' => array(
      'label' => t('Checkmate item reference'),
      'description' => t('This field stores the ID of a related checkmate as an integer value.'),
      'settings' => array(),
      'instance_settings' => array('referenceable_types' => array()),
      'default_widget' => 'options_buttons',
      'default_formatter' => 'checkmate_reference_item',
      'property_type' => 'checkmate_item',
      'property_callbacks' => array('checkmate_reference_property_info_callback'),
    ),
  );
}

/**
 * Callback to alter the property info of the reference fields.
 */
function checkmate_reference_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['options list'] = 'entity_metadata_field_options_list';
}

/**
 * Implements hook_field_instance_settings_form().
 */
function checkmate_reference_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();

  // Build an options array of the product types.
  $options = array();

  foreach (checkmate_item_types() as $type => $info) {
    $options[$type] = check_plain($info->label);
  }

  $form['referenceable_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Checkmate item types that can be referenced'),
    '#description' => t('If no types are selected, any type of checkmate item may be referenced.'),
    '#options' => $options,
    '#default_value' => is_array($settings['referenceable_types']) ? $settings['referenceable_types'] : array(),
    '#multiple' => TRUE,
    '#weight' => -3,
  );
  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function checkmate_reference_field_is_empty($item, $field) {
  return empty($item['cid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function checkmate_reference_field_formatter_info() {
  return array(
    'checkmate_reference_item' => array(
      'label' => t('checkmate Checkmate item'),
      'description' => t('Display the checkmate checklist.'),
      'field types' => array('checkmate_reference'),
    ),
    'checkmate_reference_item_links' => array(
      'label' => t('checkmate Checkmate item links'),
      'description' => t('Display the links to the checkmate checks.'),
      'field types' => array('checkmate_reference'),
    ),
  );
}

/**
 * Implements hook_options_list().
 */
function checkmate_reference_options_list($field, $instance = NULL) {
  $options = array();  $options = db_select('checkmate_item', 'q')
    ->fields('q', array('cid', 'title'));

  $types = array_filter($instance['settings']['referenceable_types']);
  if (count($types)) {
    $options->condition('type', $types);
  }
  return $options->execute()->fetchAllKeyed();
}

/**
 * Implements hook_field_formatter_view().
 */
function checkmate_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // Collect the list of cids.
  $cids = array();
  foreach ($items as $delta => $item) {
    $cids[$item['cid']] = $item['cid'];
  }

  // TODO look for a better solution here.
  if ($instance['entity_type'] == 'checkmate_item') {
    $display['type'] = 'checkmate_reference_item_links';
  }
  switch ($display['type']) {
    case 'checkmate_reference_item':
      $entity_wrapper = entity_metadata_wrapper($instance['entity_type'], $entity);
      $checkmate_data = array(
        'checkmate_entity_type' => $instance['entity_type'],
        'checkmate_bundle' => $instance['bundle'],
        'checkmate_entity_id' => $entity_wrapper->getIdentifier(),
      );
      $result += drupal_get_form('checkmate_checkmate_form', $cids, $checkmate_data);

      if (checkmate_item_access('create', NULL)) {
        $allowed_checkmate_types = array_filter($instance['settings']['referenceable_types']);
        $checkmate_item_types = checkmate_item_types();
        foreach ($allowed_checkmate_types as &$allowed_checkmate_type) {
          $allowed_checkmate_type = $checkmate_item_types[$allowed_checkmate_type];
        }
        $allowed_checkmate_types = $allowed_checkmate_types ? $allowed_checkmate_types : $checkmate_item_types;
        $result['checkmate_type_add'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('checkmate_add_item_links')),
        );
        foreach ($allowed_checkmate_types as $checkmate_item_type) {
          $result['checkmate_type_add'][$checkmate_item_type->type] = array(
            '#type' => 'link',
            '#title' => t('Add a !type checkmate item', array('!type' => $checkmate_item_type->label)),
            '#href' =>  'admin/content/checkmate-item/add/' . $checkmate_item_type->type,
            '#options' => array(
              'query' => array(
                'entity_type' => $checkmate_data['checkmate_entity_type'],
                'entity_id' => $checkmate_data['checkmate_entity_id'],
                'field_name' => $field['field_name'],
                'destination' => $_GET['q'],
              ),
            ),
          );
        }
      }
      break;

    case 'checkmate_reference_item_links':
      $items = checkmate_item_load_multiple($cids);
      foreach ($items as $delta => $item) {
        $result[$delta] = array(
          '#type' => 'link',
          '#title' => $item->title,
          '#href' => 'admin/content/checkmate-item/' . $item->cid . '/edit',
        );
      }
      break;
  }

  return $result;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function checkmate_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'checkmate_reference';
  $info['options_buttons']['field types'][] = 'checkmate_reference';
}

/**
 * After build for checkmate form.
 */
function checkmate_checkmate_form_after_build($form, &$form_state) {
  drupal_add_js(
    array(
      'checkmate' => array(
        'show' => t('Show detail'),
        'hide' => t('Hide detail'),
      ),
    ), 'setting');
  drupal_add_js(drupal_get_path('module', 'checkmate') . '/js/checkmate.js');
  drupal_add_css(drupal_get_path('module', 'checkmate') . '/checkmate.css');
  drupal_add_css(drupal_get_path('module', 'checkmate') . '/checkmate_print.css', array('media' => 'print'));
  return $form;
}

/**
 * This is the main form (actually page) of the checkmate.
 */
function checkmate_checkmate_form($form, &$form_state, $cids, $checkmate_data) {
  $form = array();
  $form['#after_build'][] = 'checkmate_checkmate_form_after_build';

  // Collect all items.
  $statuses = field_info_field('checkmate_status');
  $statuses = call_user_func_array($statuses['settings']['allowed_values_function'], array());
  $items = checkmate_item_load_multiple($cids);

  // Group items and add defaults.
  static $grouped_items = array();
  foreach ($items as $key => &$item) {
    $check_wrapper = entity_metadata_wrapper('checkmate_item', $item);
    $item->weight = 0;
    $item->group = drupal_strtolower($check_wrapper->check_group->value());
    $item->subgroup = drupal_strtolower($check_wrapper->check_subgroup->value());

    if (!isset($grouped_items[$item->group])) {
      $grouped_items[$item->group] = array();
    }

    if (!isset($grouped_items[$item->group][$item->subgroup])) {
      $grouped_items[$item->group][$item->subgroup] = array();
    }
    $grouped_items[$item->group][$item->subgroup][$key] = $item;
  }

  // Cuild output structure.
  $group_count = 0;
  foreach ($grouped_items as $group => &$subgroups) {
    $group_count++;
    $group_key = "group_$group_count";
    // Fieldgroups.
    $form[$group_key] = array(
      '#type' => 'fieldset',
      '#title' => check_plain($group) . ' (<span id="' . 'checkmate_' . $group_key . '">' . checkmate_multilevel_status_count($subgroups, array(CHECKMATE_STATUS_OK)) . '/' .
      checkmate_multilevel_status_count($subgroups, array(
        CHECKMATE_STATUS_OK,
        CHECKMATE_STATUS_NOK,
        CHECKMATE_STATUS_NOT_CHECKED,
        CHECKMATE_STATUS_IN_PROGRESS,
      )) . '</span>)',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $subgroup_count = 0;
    foreach ($subgroups as $subgroup => &$items) {
      $subgroup_count++;
      $subgroup_key = "subgroup_$group_count" . "_$subgroup_count";
      $form[$group_key][$subgroup_key] = array(
        '#type' => 'fieldset',
        '#title' => check_plain(t($subgroup)),
        '#collapsed' => FALSE,
        '#collapsible' => TRUE,
      );
      foreach ($items as $key => $item) {
        $sub_form_state['build_info']['args'] = array($key, $item);
        $form[$group_key][$subgroup_key][$key] = array(
          '#type' => 'subform',
          '#subform_id' => 'checkmate_reference_status_form',
          '#subform_arguments' => array(
            $key,
            $item,
            $checkmate_data,
            $group_key,
          ),
          '#required' => FALSE,
          '#subform_default_triggering_element' => array(
            'wrapper',
            'status_form',
            'save',
          ),
        );
      }
    }
  }
  return $form;
}

/**
 * The checkmate item status form.
 */
function checkmate_reference_status_form($form, &$form_state, $cid, $item, $checkmate_data, $group) {
  $form = array();
  if ($item->callback == 'checkmate_manual_check') {
    $params = array($checkmate_data);
  }
  else {
    $params = !empty($item->parameters) ? unserialize($item->parameters) : array();
  }
  $status = checkmate_get_status_of_item($item, $params);

  if ($item->callback == 'checkmate_manual_check') {
    $current_status = end($status);
    $current_status_id = $current_status ? $current_status->checkmate_status->value() : CHECKMATE_STATUS_NOT_CHECKED;
  }
  else {
    $current_status_id = $status['status'];
  }

  $form['wrapper'] = array(
    '#prefix' => '<div id="check_wrapper_' . $cid . '" class="checkmate_status status_' . str_replace('-', 'min', $current_status_id) . '">',
    '#suffix' => '</div>',
  );
  // Status icon.
  $status_txt = '<div class="check_status">' . theme('checkmate_status', array('status' => $current_status_id)) . '</div>';
  $form['wrapper']['statustxt'] = array(
    '#type' => 'markup',
    '#prefix' => filter_xss($status_txt, array('div', 'img')),
    '#suffix' => l(t('Show detail'), '', array(
      'attributes' => array(
        'class' => array('checkmate_toggle_check'),
      ),
    )),
    '#markup' => '<h2 class="checkmate_title">' . $item->title . '</h2>',
  );

  $form['wrapper']['messages']['#markup'] = '';
  $form['wrapper']['hidden'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('full_form_view'),
    ),
  );
  $item_display = clone $item;
  $item_display->title = NULL;
  $form['wrapper']['hidden']['full_view'] = array(
    '#type' => 'markup',
    '#markup' => drupal_render(entity_view('checkmate_item', array($item_display))),
  );

  if ($item->callback == 'checkmate_manual_check') {
    $form_state['checkmate_data'] = $checkmate_data;
    $view = views_get_view('checkmate_reference');

    $arguments = array(
      $cid,
      $checkmate_data['checkmate_entity_type'],
      $checkmate_data['checkmate_bundle'],
      $checkmate_data['checkmate_entity_id'],
    );

    $view->set_arguments($arguments);

    $form['wrapper']['hidden']['status_history'] = array(
      '#type' => 'markup',
      '#markup' => $view->render('master'),
    );
    $checkmate_status = entity_create('checkmate_item_status', array('type' => $item->type));

    $form_state['checkmate_item_status'] = $checkmate_status;
    $form['wrapper']['hidden']['status_form'] = array(
      '#type' => 'fieldset',
      '#parents' => array('wrapper', 'hidden', 'status_form'),
      '#tree' => TRUE,
    );

    $checkmate_status->checkmate_status[LANGUAGE_NONE][0]['value'] = $current_status_id;
    field_attach_form('checkmate_item_status', $checkmate_status, $form['wrapper']['hidden']['status_form'], $form_state);

    $form['wrapper']['hidden']['status_form']['cid'] = array(
      '#type' => 'value',
      '#value' => $cid,
    );

    $form['wrapper']['hidden']['status_form']['save_' . $cid] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 100,
      '#ajax' => array(
        'callback' => 'checkmate_manual_js',
        'wrapper' => 'check_wrapper_' . $cid,
        'method' => 'replace',
      ),
    );
  }
  else {
    if (isset($status['message'])) {
      $form['wrapper']['hidden']['solution']['message'] = array(
        '#type' => 'markup',
        '#markup' => $status['message'],
        '#suffix' => '<br />',
      );
    }
    if (isset($status['solution'])) {
      $form['wrapper']['hidden']['solution']['solution'] = array(
        '#type' => 'markup',
        '#markup' => $status['solution'],
      );
    }
  }
  $form['#after_build'][] = 'checkmate_reference_status_form_after_build';
  return $form;
}

/**
 * Checkmate reference form after build function.
 */
function checkmate_reference_status_form_after_build($form, &$form_state) {
  if ($form_state['process_input'] || $form_state['rebuild']) {
    $form['wrapper']['statustxt']['#suffix'] = str_replace(t('Show detail'), t('Hide detail'), $form['wrapper']['statustxt']['#suffix']);
    $form['wrapper']['hidden']['#attributes']['style'] = 'display:block;';
  }

  return $form;
}

/**
 * ajax callback when a status is submitted.
 */
function checkmate_manual_js($form, &$form_state) {
  $check_item = $form_state['build_info']['args'][1];
  $button = $form_state['triggering_element'];
  $values = drupal_array_get_nested_value($form_state['values'], array_slice($button['#array_parents'], 0, -1));
  $commands = array();
  $form['wrapper']['messages'] = array(
    '#markup' => theme('status_messages'),
  );
  $commands[] = ajax_command_replace('#check_wrapper_' . $values['cid'], drupal_render($form));
  $group_checkmate_items = entity_load('checkmate_item', FALSE, array('check_group' => $check_item->check_group));
  $count = checkmate_multilevel_status_count(
    $group_checkmate_items,
    array(CHECKMATE_STATUS_OK)) . '/' . checkmate_multilevel_status_count($group_checkmate_items, array(
      CHECKMATE_STATUS_OK,
      CHECKMATE_STATUS_NOK,
      CHECKMATE_STATUS_NOT_CHECKED,
      CHECKMATE_STATUS_IN_PROGRESS,
    ));
  $commands[] = ajax_command_html('#checkmate_' . $form_state['build_info']['args'][3], $count);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * The checkmate item status form submit.
 */
function checkmate_reference_status_form_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $form_state['values'] += drupal_array_get_nested_value($form_state['values'], array_slice($button['#array_parents'], 0, -1));
  $checkmate_item_status = $form_state['checkmate_item_status'];
  entity_form_submit_build_entity('checkmate_item_status', $checkmate_item_status, $form, $form_state);
  $checkmate_item_status = (object) array_merge((array) $checkmate_item_status, $form_state['checkmate_data']);
  checkmate_item_status_save($checkmate_item_status);

  $form_state['values'] = $form_state['input'] = array();
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_views_api().
 */
function checkmate_reference_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'checkmate_reference'),
  );
}
