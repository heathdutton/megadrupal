<?php
/**
 * @file
 * Main module file for Nepali calendar.
 */

/**
 * Implements hook_help().
 */
function nepali_calendar_help($path, $arg) {
  global $base_url;
  $return = '';

  switch ($path) {
    case 'admin/help#nepali_calendar':
      $return = '<h2>' . t('About') . '</h2>';
      $return .= '<p>' . t('Nepali calendar module converts Gregorian calendar (A.D.) to Bikram Sambat (B.S.) and vice-versa.') . '</p>';
      $return .= '<p>' . t('The official Nepali calendar follows Bikram Sambat, abbreviated B.S., said to have been started by mythical Indian emperor VikramƒÅditya. The B.S. year is approximately 56.7 years ahead of the Gregorian Calendar. The Gregorian year 2000 AD began 17 Poush 2056 and ended 16 Poush 2057.') . '</p>';
      $return .= '<p>' . t('Developed by: <a href="@url" target="_blank">@author</a>', array('@author' => 'Chhabi Pachabhaiya', '@url' => 'http://c.pachabhaiya.com'));
      $return .= '<h2>' . t('Uses') . '</h2>';
      $return .= '<p>' . t('<a href="@block">Nepali date</a> block is created automatically when "Nepali calendar" module is installed. This block contains a converted Nepali date and time (e.g., Date: Sunday, Falgun 29, 2067 08:00 pm). Users can assign this block to a region where they wish to display the Nepali date and time.', array('@block' => $base_url . '/admin/structure/block')) . '</h2>';
      break;
  }
  return $return;
}

/**
 * Implements hook_permission().
 */
function nepali_calendar_permission() {
  return array(
    'administer nepali calendar' => array(
      'title' => t('Administer Nepali calendar'),
      'description' => t('Performs administrative tasks on Nepali calendar functionality.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nepali_calendar_menu() {
  // Admin configuration settings.
  $items['admin/config/regional/nepali_calendar'] = array(
    'title' => 'Nepali calendar',
    'description' => 'Manage Nepali calendar settings and configurations.',
    'access arguments' => array('administer nepali calendar'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nepali_calendar_admin_settings_form'),
    'file' => 'includes/nepali_calendar.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function nepali_calendar_block_info() {
  $blocks = array();

  // Block - Nepali date.
  $blocks['nepali_date'] = array(
    'info' => t('Nepali date'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function nepali_calendar_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'nepali_date':
      $block['subject'] = t('Nepali date');
      $block['content'] = nepali_calendar_block_contents($delta);
      break;
  }

  return $block;
}

/**
 * Get date in A.D. of Asia/Kathmandu timezone.
 */
function nepali_calendar_getdate_ne($timestamp) {
  // Convert to equivalent Nepali date/time timestamp.
  $date = new DateTime();
  $date->setTimeStamp($timestamp);
  $date->setTimezone(new DateTimeZone('Asia/Kathmandu'));
  $timestamp_ne = strtotime($date->format('Y-m-d H:i:s'));

  // Get date/time information.
  $getdate_ne = getdate($timestamp_ne);

  return $getdate_ne;
}

/**
 * Nepali calendar block contents.
 *
 * @param string $delta
 *   Unique block ID.
 *
 * @return string
 *   HTML output.
 */
function nepali_calendar_block_contents($delta) {
  $output = '';

  switch ($delta) {
    case 'nepali_date':
      // Get today's date in A.D. of Asia/Kathmandu timezone.
      $today_ne = nepali_calendar_getdate_ne(time());

      $weekdays = array(
        0 => t('Sunday'),
        1 => t('Monday'),
        2 => t('Tuesday'),
        3 => t('Wednesday'),
        4 => t('Thursday'),
        5 => t('Friday'),
        6 => t('Saturday'),
      );

      // Converts A.D. to B.S.
      $bs = nepali_calendar_ad_to_bs($today_ne['year'], $today_ne['mon'], $today_ne['mday']);

      $bs_year = nepali_calendar_translate_digit($bs['bs_year']);
      $bs_month = nepali_calendar_translate_digit($bs['bs_month']);
      $bs_day = nepali_calendar_translate_digit($bs['bs_day']);

      $nepali_calendar_nepali_date_format = variable_get('nepali_calendar_nepali_date_format', 5);

      switch ($nepali_calendar_nepali_date_format) {
        case 0:
          $date = $bs_year . ' ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day;
          break;

        case 1:
          $date = $bs_year . ', ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day;
          break;

        case 2:
          $date = $bs_year . ' ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $weekdays[$today_ne['wday']];
          break;

        case 3:
          $date = $bs_year . ', ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $weekdays[$today_ne['wday']];
          break;

        case 4:
          $date = nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $bs_year;
          break;

        case 5:
          $date = $weekdays[$today_ne['wday']] . ', ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $bs_year;
          break;

        case 6:
          $date = $bs_year . '/' . $bs_month . '/' . $bs_day;
          break;

        default:
          $date = $bs_year . '/' . $bs_month . '/' . $bs_day;
      }

      $output .= '<span class="nepali_date">';
      // Check whether to show label or not.
      if ((bool) variable_get('nepali_calendar_show_date_label', 1)) {
        $output .= t('Date') . ': ';
      }
      $output .= $date;
      // Check whether to show time or not.
      if ((bool) variable_get('nepali_calendar_show_nepal_time', 0)) {
        $hours12 = date('h', mktime($today_ne['hours'], $today_ne['minutes'], $today_ne['seconds'], $today_ne['mon'], $today_ne['mday'], $today_ne['year']));
        $hours24 = date('H', mktime($today_ne['hours'], $today_ne['minutes'], $today_ne['seconds'], $today_ne['mon'], $today_ne['mday'], $today_ne['year']));
        $minutes = date('i', mktime($today_ne['hours'], $today_ne['minutes'], $today_ne['seconds'], $today_ne['mon'], $today_ne['mday'], $today_ne['year']));
        $am_pm = (0 == strcasecmp(date('a', mktime($today_ne['hours'], $today_ne['minutes'], $today_ne['seconds'], $today_ne['mon'], $today_ne['mday'], $today_ne['year'])), 'am')) ? t('am') : t('pm');
        switch (variable_get('nepali_calendar_nepal_time_format', 0)) {
          case 0:
            $output .= ' ' . nepali_calendar_translate_digit($hours12) . ':' . nepali_calendar_translate_digit($minutes) . ' ' . $am_pm;
            break;

          case 1:
            $output .= ' ' . nepali_calendar_translate_digit($hours12) . ':' . nepali_calendar_translate_digit($minutes) . ' ' . strtoupper($am_pm);
            break;

          case 2:
            $output .= ' ' . nepali_calendar_translate_digit($hours24) . ':' . nepali_calendar_translate_digit($minutes);
            break;
        }
      }
      $output .= '</span>';
      break;
  }

  return $output;
}

/**
 * Translates digits.
 */
function nepali_calendar_translate_digit($digit) {
  $translated_digit = '';
  $digits = array(
    0 => t('0'),
    1 => t('1'),
    2 => t('2'),
    3 => t('3'),
    4 => t('4'),
    5 => t('5'),
    6 => t('6'),
    7 => t('7'),
    8 => t('8'),
    9 => t('9'),
  );
  foreach (str_split($digit) as $val) {
    $translated_digit .= $digits[$val];
  }
  return $translated_digit;
}

/**
 * Translate Nepali month.
 */
function nepali_calendar_translate_ne_month($month) {
  $ne_months = array(
    0 => t('Baishakh'),
    1 => t('Jestha'),
    2 => t('Ashadh'),
    3 => t('Shrawan'),
    4 => t('Bhadra'),
    5 => t('Ashwin'),
    6 => t('Kartik'),
    7 => t('Mangsir'),
    8 => t('Poush'),
    9 => t('Magh'),
    10 => t('Falgun'),
    11 => t('Chaitra'),
  );
  return $ne_months[$month];
}

/**
 * Checks if the specified year in A.D. is a leap year or not.
 *
 * Leap years almost always occur every four years
 * (i.e. in years that are divisible by 4). The only exceptions
 * to this is that years that are evenly divisible by 100 are
 * not leap years, unless they are also divisible by 400.
 */
function nepali_calendar_is_leap_year($year) {
  $is_leap_year = FALSE;
  if (($year % 4) == 0 && (($year % 100) != 0 || ($year % 400) == 0)) {
    $is_leap_year = TRUE;
  }
  return $is_leap_year;
}

/**
 * Converts A.D. to B.S.
 *
 * @param int $ad_year
 *   4-digit year in A.D.
 *
 * @param int $ad_month
 *   Month in A.D.
 *
 * @param int $ad_day
 *   Day in A.D.
 *
 * @return array
 *   Array of date in B.S.
 */
function nepali_calendar_ad_to_bs($ad_year = 2011, $ad_month = 03, $ad_day = 13) {
  $bs = array(
    0 => array(31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30),
    1 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    2 => array(30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    3 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    4 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    5 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    6 => array(30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31),
    7 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    8 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    9 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    10 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31),
    11 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    12 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    13 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    14 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    15 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    16 => array(31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    17 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    18 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    19 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    20 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    21 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    22 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    23 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    24 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    25 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    26 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    27 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    28 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    29 => array(30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    30 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    31 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    32 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    33 => array(30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31),
    34 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    35 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    36 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    37 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31),
    38 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    39 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    40 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    41 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    42 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    43 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    44 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    45 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    46 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    47 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    48 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    49 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    50 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    51 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    52 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    53 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    54 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    55 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    56 => array(30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    57 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    58 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    59 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    60 => array(30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    61 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    62 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    63 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    64 => array(31, 31, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31),
    65 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    66 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    67 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    68 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    69 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    70 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    71 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    72 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    73 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    74 => array(31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    75 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    76 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    77 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    78 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    79 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    80 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    81 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    82 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    83 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    84 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    85 => array(31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30),
    86 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    87 => array(30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    88 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    89 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    90 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    91 => array(31, 31, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31),
    92 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    93 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    94 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    95 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    96 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    97 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    98 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    99 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    100 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    101 => array(31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    102 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    103 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    104 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    105 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    106 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    107 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    108 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    109 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    110 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    111 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    112 => array(31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30),
    113 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    114 => array(30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    115 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    116 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    117 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    118 => array(31, 31, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31),
    119 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    120 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    121 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    122 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    123 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    124 => array(31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    125 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    126 => array(31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30),
    127 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    128 => array(31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30),
    129 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31),
    130 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    131 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    132 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    133 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    134 => array(31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30),
    135 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
    136 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30),
    137 => array(31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31),
    138 => array(31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30),
  );

  // Index 0 is non-leap year and index 1 is leap year.
  $ad = array(
    0 => array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),
    1 => array(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),
  );

  // Cycles every 139 years.
  $cycle = 139;

  $ad_index = nepali_calendar_is_leap_year($ad_year) ? 1 : 0;
  $ad_yday = 0;
  for ($i = 0; $i < $ad_month - 1; $i++) {
    $ad_yday = $ad_yday + $ad[$ad_index][$i];
  }

  // Total number days till date in the specified year (AD).
  $ad_yday += $ad_day;

  $bs_year = $ad_year + 56;

  $bs_index = ($bs_year % $cycle) + 2;
  $bs_year_total_days = array_sum($bs[$bs_index]);

  $ad_year_exception = array(
    1901,
    1902,
    1905,
    1906,
    1909,
    1910,
    1913,
    1914,
    1917,
    1918,
    1921,
    1922,
    1925,
    1926,
    1929,
    1930,
    1933,
    1934,
    1937,
    1938,
    1941,
    1942,
    1945,
    1946,
    1949,
    1950,
    1953,
    1954,
    1957,
    1958,
    1961,
    1962,
    1965,
    1966,
    1969,
    1970,
    1973,
    1974,
    1977,
    1978,
    1981,
    1982,
    1985,
    1986,
    1989,
    1990,
    1993,
    1994,
    1997,
    1998,
    2001,
    2002,
    2005,
    2006,
    2009,
    2010,
    2013,
    2017,
    2018,
    2021,
    2022,
    2025,
    2026,
    2029,
    2030,
  );

  if (in_array($ad_year, $ad_year_exception)) {
    $adjust_day = 263;
  }
  else {
    $adjust_day = 262;
  }
  $total_days = $ad_yday + $adjust_day;

  $flag = FALSE;
  if ($total_days > $bs_year_total_days) {
    $flag = TRUE;
    // Increment B.S. year by 1.
    ++$bs_year;
    // Remaining number of days.
    $bs_remaining_days = $total_days - $bs_year_total_days;
  }
  else {
    $bs_remaining_days = $total_days;
  }

  $days_temp = 0;
  $i = 0;
  while ($days_temp < $bs_remaining_days) {
    if ($flag) {
      $days_temp += $bs[$bs_index + 1][$i];
    }
    else {
      $days_temp += $bs[$bs_index][$i];
    }
    ++$i;
  }

  // Baisakh = 1, Jestha = 2 and so on.
  $bs_month = $i;

  if ($flag) {
    $days_temp -= $bs[$bs_index + 1][$i - 1];
  }
  else {
    $days_temp -= $bs[$bs_index][$i - 1];
  }
  $bs_day = $bs_remaining_days - $days_temp;

  $return = array(
    'bs_year' => $bs_year,
    'bs_month' => $bs_month,
    'bs_day' => $bs_day,
  );

  return $return;
}

/**
 * Implements hook_views_api().
 */
function nepali_calendar_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'nepali_calendar') . '/views',
  );
}

/**
 * Get date formatted according to given format.
 */
function nepali_calendar_date_format($date, $format = 0) {
  $weekdays = array(
    0 => t('Sunday'),
    1 => t('Monday'),
    2 => t('Tuesday'),
    3 => t('Wednesday'),
    4 => t('Thursday'),
    5 => t('Friday'),
    6 => t('Saturday'),
  );

  // Converts A.D. to B.S.
  $bs = nepali_calendar_ad_to_bs($date['year'], $date['mon'], $date['mday']);

  $bs_year = nepali_calendar_translate_digit($bs['bs_year']);
  $bs_month = nepali_calendar_translate_digit($bs['bs_month']);
  $bs_day = nepali_calendar_translate_digit($bs['bs_day']);

  $nepali_calendar_nepali_date_format = $format;

  switch ($nepali_calendar_nepali_date_format) {
    case 0:
      $date_format = $bs_year . ' ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day;
      break;

    case 1:
      $date_format = $bs_year . ', ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day;
      break;

    case 2:
      $date_format = $bs_year . ' ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $weekdays[$date['wday']];
      break;

    case 3:
      $date_format = $bs_year . ', ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $weekdays[$date['wday']];
      break;

    case 4:
      $date_format = nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $bs_year;
      break;

    case 5:
      $date_format = $weekdays[$date['wday']] . ', ' . nepali_calendar_translate_ne_month($bs['bs_month'] - 1) . ' ' . $bs_day . ', ' . $bs_year;
      break;

    case 6:
      $date_format = $bs_year . '/' . $bs_month . '/' . $bs_day;
      break;

    default:
      $date_format = $bs_year . '/' . $bs_month . '/' . $bs_day;
  }

  return $date_format;
}

/**
 * Get current Nepali date format array.
 */
function nepali_calendar_nepali_date_format_array() {
  // Get current Nepali date time information.
  $date = nepali_calendar_getdate_ne(time());

  $date_format = array();
  for ($i = 0; $i <= 6; $i++) {
    $date_format += array($i => nepali_calendar_date_format($date, $i));
  }

  return $date_format;
}
