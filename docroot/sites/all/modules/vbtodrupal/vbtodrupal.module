<?php

/**
 * @file
 * Imports vBulletin database into Drupal forums.
 */

/**
 * How many files to copy per pass.
 */
define('VBTODRUPAL_FILES_PER_PASS', 100);

/**   
 * How many comment threads to fix per pass.
 *    
 * Rebuilding comment threads is particularly slow and finnicky, meaning
 * it times out quite often. This figure should be as high as possible
 * without causing PHP timeouts.
 *    
 * Note: set this too low and the import won't timeout, it will just take
 * days to run.
 */   
define('VBTODRUPAL_COMMENT_THREADS_PER_PASS', 8000);

/**
 * Name of the upload field for vBulletin attachments.
 */
define('VBTODRUPAL_ATTACHMENT_FIELD', 'vbtodrupal_attachment');

/**
 * Arbitrary number, added to database ids, to stop collisions.
 */
define('VBTODRUPAL_PICTURES_ADD_TO_IDS', 60000000);

/**
 * Implementation of hook_help().
 */
function vbtodrupal_help($path, $arg) {
  switch ($path) {
    case 'admin/help#vbtodrupal':
      $output = '<p>' . t('vBulletin to Drupal imports vBulletin into Drupal forums. There are two modules included: <em>vBulletin to Drupal</em> and <em>vBulletin Passwords</em>. The former copies data from vBulletin, the latter allows users to login using vBulletin usernames and passwords.') . '</p>';
      $output .= '<p>' . t('To import data from vBulletin, start from the <a href="@config-page">Configure page</a>, where a database user with <em>write access to Drupal</em> and <em>read access to vBulletin</em> is required. Clicking <em>Save and continue</em> will move you along to the <a href="@test-import-page">Test and import from vBulletin</a> page. Things to remember when importing from vBulletin:', array('@config-page' => url('admin/structure/vbtodrupal'), '@test-import-page' => url('admin/structure/vbtodrupal/import'))) . '</p>';
      $output .= '<ul><li>' . t('If, having entered database configuration information, Drupal shows a <em>site off-line</em> message the database configuration is incorrect. Click the <em>Back</em> button in your Web browser and check the configuration.') . '</li>';
      $output .= '<li>' . t('For vBulletin to Drupal to work there <em>must</em> be a user with access to both databases. Many hosting companies disallow access to multiple databases for one user, in this case alternative arrangements must be made i.e. downloading the databases to a computer you control and running the conversion there.') . '</li>';
      $output .= '<li>' . t('The migration process will take several minutes. For a large forum, expect at least 15 minutes for an import to run, allow 30 minutes before worrying that the process has stalled.') . '</li>';
      $output .= '<li>' . t('When the process is complete you will be taken back to the Configure page. Any errors that occurred during the import process will be displayed, if they are not obviously related to your setup open issue from the <a href="@project-page">vBulletin to Drupal project page</a>.', array('@project-page' => url('http://drupal.org/project/vbtodrupal'))) . '</li></ul>';
      return $output;
    case 'admin/structure/vbtodrupal':
      $output = '<p>' . t("Use this page to configure vBulletin to Drupal's database access. Having entered the database settings click <em>Save and continue</em> to test whether Drupal can access vBulletin, then import data from it.") . '</p>';
      $output .= '<p>' . t('The database user must have access to update the Drupal database and read the vBulletin database. A <em>site off-line</em> page means these settings are incorrect, press the <em>Back</em> button and try again.') . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_vbimportapi_importer().
 */
function vbtodrupal_vbimportapi_importer() {
  return array(
    'title' => t('vBulletin to Drupal'),
    'product' => 'vBulletin',
    'operations' => array(
      array('vbtodrupal_field_add', array()),
      array('vbimportapi_import', array('profile_field')),
      array('vbimportapi_import', array('user')),
      array('vbimportapi_import', array('vbuser_salt')),
      array('vbimportapi_import', array('authmap')),
      array('vbimportapi_import', array('profile_value_yahoo')),
      array('vbimportapi_import', array('profile_value_msn')),
      array('vbimportapi_import', array('profile_value_skype')),
      array('vbimportapi_import', array('profile_value_aim')),
      array('vbimportapi_import', array('profile_value_icq')),
      array('vbimportapi_import', array('profile_value_website')),
      array('vbimportapi_import', array('profile_value_location')),
      array('vbimportapi_import', array('profile_value_occupation')),
      array('vbimportapi_import', array('profile_value_interests')),
      array('vbimportapi_import', array('profile_value_gender')),
      array('vbimportapi_import', array('profile_value_biography')),
      array('vbimportapi_import', array('roles')),
      array('vbimportapi_import', array('users_roles')),
      array('vbimportapi_import', array('forum')),
      array('vbimportapi_import', array('forum_top_level_hierarchy')),
      array('vbimportapi_import', array('forum_hierarchy')),
      array('vbimportapi_import', array('forum_containers')),
      array('vbimportapi_import', array('thread')),
      array('vbimportapi_import', array('thread_taxonomy')),
      array('vbimportapi_import', array('field_data_taxonomy_forums')),
      array('vbimportapi_import', array('field_revision_taxonomy_forums')),
      array('vbimportapi_import', array('thread_forum')),
      array('vbimportapi_import', array('forum_index')),
      array('vbimportapi_import', array('node_revision')),
      array('vbimportapi_import', array('field_data_body')),
      array('vbimportapi_import', array('field_revision_body')),
      array('vbimportapi_import', array('comment')),
      array('vbimportapi_import', array('field_data_comment_body')),
      array('vbimportapi_import', array('field_revision_comment_body')),
      array('vbimportapi_import', array('first_posts_delete')),
      array('vbtodrupal_comment_threads_rebuild', array('', VBTODRUPAL_COMMENT_THREADS_PER_PASS)),
      array('vbimportapi_import', array('poll')),
      array('vbimportapi_import', array('poll_node')),
      array('vbimportapi_import', array('poll_vote')),
      array('vbimportapi_import', array('poll_choice')),
      array('vbimportapi_import', array('poll_tally')),
      array('vbimportapi_import', array('poll_tally_post')),
      array('vbimportapi_import', array('file_managed')),
      array('vbimportapi_import', array('file_usage')),
      array('vbimportapi_import', array('file_managed_picture')),
      array('vbimportapi_import', array('file_usage_picture')),
      array('vbimportapi_mime_types_repair', array(t('Determining file types of imported user pictures'))),
      array('vbimportapi_import', array('field_data_attachment')),
      array('vbimportapi_import', array('field_revision_attachment')),
      array('vbimportapi_import', array('attachments_database', VBTODRUPAL_FILES_PER_PASS)),
      array('vbimportapi_import', array('attachments_files', VBTODRUPAL_FILES_PER_PASS)),
      array('vbimportapi_import', array('user_picture_files', VBTODRUPAL_FILES_PER_PASS)),
    ),
  );
}

/**
 * Implementation of hook_vbtodrupal_importer_alter().
 */
function vbtodrupal_vbtodrupal_importer_alter(&$importer) {
  $importer['operations'][] = array('vbimportapi_import', array('existing_user_populate'));
  $importer['operations'][] = array('vbtodrupal_existing_user_prep_import', array());
  $importer['operations'][] = array('vbimportapi_import', array('existing_user_fix_linked'));
  $importer['operations'][] = array('vbtodrupal_existing_user_unlink_import', array());
  $importer['operations'][] = array('vbtodrupal_existing_user_clean_up_import', array());

  // For users in vBulletin who already have an account in Drupal.
  $tables = module_invoke_all('vbtodrupal_user_tables');
  foreach ($tables as $table => $details) {
    // Add default details.
    $details += array('condition' => NULL);
    foreach ($details['update fields'] as $fields) {
      $importer['operations'][] = array('vbtodrupal_existing_user_import', array($table, $fields, $details['condition']));
    }
  }

  $importer['operations'][] = array('vbimportapi_import', array('existing_user_picture'));
  $importer['operations'][] = array('vbtodrupal_truncate_statistics', array());
  $importer['operations'][] = array('vbimportapi_import', array('update_statistics'));

  // Next fix the incompatible BBCode in various text imported from vBulletin.

  $tables = module_invoke_all('vbtodrupal_bbcode_repair');

  foreach (array('quotes', 'post_refs') as $cycle) {
    // Different $cycle-s are for sets of search/replace patterns.
    $mysql_regex_function = 'vbtodrupal_bbcode_mysql_regex_' . $cycle;
    $php_regex_pattern_function = 'vbtodrupal_bbcode_php_regex_pattern_' . $cycle;
    $php_regex_replace_function = 'vbtodrupal_bbcode_php_regex_replace_' . $cycle;

    $defaults = array(
      'mysql_regex' => $mysql_regex_function(),
      'php_regex_pattern' => $php_regex_pattern_function(),
      'php_regex_replace' => $php_regex_replace_function(),
    );

    foreach ($tables as $table => $field_details) {
      $field_details += $defaults;
      $text_fields = array_unique($field_details['text_fields']);
      $key = (is_array($field_details['key']) ? $field_details['key'][0] : $field_details['key']);

      foreach ($text_fields as $text_field) {
        $importer['operations'][] = array('vbtodrupal_bbcode_fix', array($table, $key, $text_field, $field_details['mysql_regex'], $field_details['php_regex_pattern'], $field_details['php_regex_replace']));
      }
    }
  }
}

/**
 * Implements hook_vbtodrupal_bbcode_repair().
 */
function vbtodrupal_vbtodrupal_bbcode_repair() {
  return array(
    'field_data_body' => array(
      'key' => 'entity_id',
      'text_fields' => array('body_value'),
    ),
    'field_data_comment_body' => array(
      'key' => 'entity_id',
      'text_fields' => array('comment_body_value'),
    ),
    'users' => array(
      'key' => 'uid',
      'text_fields' => array('signature'),
    ),
  );
}

/**
 * Implementation of hook_vbimportapi_table_check().
 */
function vbtodrupal_vbimportapi_table_check() {
  return array(
    'thread',
    'post',
    'user' => array(
      'username' => array('is checked against' => array('users' => 'name')),
    ),
    'pm',
    'post' => array(
      'title' => array('is checked against' => array('comment' => 'subject')),
    ),
  );
}

/**
 * Implementation of hook_vbtodrupal_user_tables().
 */
function vbtodrupal_vbtodrupal_user_tables() {
  return array(
    'profile_value' => array(
      'update fields' => array('uid'),
    ),
    'users_roles' => array(
      'update fields' => array('uid'),
    ),
    'node' => array(
      'update fields' => array('uid'),
    ),
    'node_revision' => array(
      'update fields' => array('uid'),
    ),
    'comment' => array(
      'update fields' => array('uid'),
    ),
    'poll_vote' => array(
      'update fields' => array('uid'),
    ),
    'file_managed' => array(
      'update fields' => array('uid'),
    ),
    'file_usage' => array(
      'update fields' => array('id'),
      'condition' => db_and()->condition('module', 'user')->condition('type', 'user'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function vbtodrupal_form_vbimportapi_settings_form_alter(&$form, &$form_state) {
  // @todo: pass control for this check to the API module, currently this
  // is just unseemly boiler plate.
  if ($form['module']['#value'] != 'vbtodrupal') {
    return;
  }

  // Add method for user to specify path to vBulletin, this is then used to
  // import attachments and avatars.
  $form['advanced_options']['path'] = array(
    '#type' => 'textfield',
    '#title' => 'vBulletin installation directory',
    '#default_value' => variable_get('vbtodrupal_path', vbtodrupal_default_path()),
    '#size' => 45,
    '#maxlength' => 100,
  );
  $form['#submit'][] = 'vbtodrupal_vbimportapi_settings_form_submit';
}

/**
 * Submit handler for the settings form.
 *
 * @see vbtodrupal_form_vbimportapi_settings_form_alter().
 */
function vbtodrupal_vbimportapi_settings_form_submit($form, &$form_state) {
  // @todo: pass control for this check to the API module, currently this
  // is just unseemly boiler plate.
  if ($form['module']['#value'] != 'vbtodrupal') {
    return;
  }

  variable_set('vbtodrupal_path', $form_state['values']['path']);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function vbtodrupal_form_vbimportapi_import_form_alter(&$form, &$form_state) {
  // @todo: pass control for this check to the API module, currently this
  // is just unseemly boiler plate.
  if ($form['module']['#value'] != 'vbtodrupal') {
    return;
  }

  if (ini_get('safe_mode')) {
    $form['safe_mode_test']['heading'] = array(
      '#markup' => '<h3>' . t('Testing for PHP safe mode') . '</h3>',
    );
    $form['safe_mode_test']['result'] = array('#markup' => '<p><strong class="marker">' . t('Test failed: importing will probably time out due to restrictions on PHP. Please see your hosts/system administrator to fix this issue (set safe_mode to off in php.ini)') . '</strong></p>');
    $form['tests_passed']['#access'] = FALSE;
  }

  if (!variable_get('user_pictures', 0)) {
    $form['pictures_test']['heading'] = array(
      '#markup' => '<h3>' . t('Testing whether pictures are enabled') . '</h3>',
    );
    $form['pictures_test']['result'] = array('#markup' => '<p><strong class="marker">' . t('Test failed: user pictures are not enabled, please enable them on the <a href="@user_settings_page">user settings page</a>.', array('@user_settings_page' => url('admin/config/people/accounts', array('query' => array('destination' => 'admin/structure/vbtodrupal/import'))))) . '</strong></p>');
    $form['tests_passed']['#access'] = FALSE;
  }
  else {
    // @see user_admin_settings()
    // @see user_save()
    $picture_path = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
    if (!file_prepare_directory($picture_path, FILE_CREATE_DIRECTORY)) {
      $form['pictures_test']['heading'] = array(
        '#markup' => '<h3>' . t('Testing pictures file system') . '</h3>',
      );
      $form['pictures_test']['result'] = array('#markup' => '<p><strong class="marker">' . t('Test failed: user pictures are not configured correctly. Please go to the <a href="@user_settings_page">user settings page</a>, check the settings and click <em>Save configuration</em>.', array('@user_settings_page' => url('admin/config/people/accounts', array('query' => array('destination' => 'admin/structure/vbtodrupal/import'))))) . '</strong></p>');
      $form['tests_passed']['#access'] = FALSE;
    }
  }

  $importer = vbimportapi_module_invoke_importer('vbtodrupal');
  vbimportapi_db_setup($importer['db_info']);
  $cur_path = DRUPAL_ROOT;
  $vb_path = variable_get('vbtodrupal_path', vbtodrupal_default_path());

  try {
    // Test whether avatars are stored in the database as blobs or in the file system.
    $usefileavatar = db_select('setting', 's')
      ->fields('s', array('value'))
      ->condition('varname', 'usefileavatar')
      ->addTag('vbimport')
      ->execute()
      ->fetchField();

    if ($usefileavatar) {
      $dir_fail = FALSE;
      if (is_dir($vb_path)) {
        // We have to change to the vBulletin directory, since the vBulletin
        // setting may be a relative or absolute path.
        chdir($vb_path);
      }
      // Check for the existence of the avatars directory.
      $vb_avatar_path = db_select('setting', 's')
        ->fields('s', array('value'))
        ->condition('varname', 'avatarpath')
        ->addTag('vbimport')
        ->execute()
        ->fetchField();
      if (!is_dir($vb_avatar_path)) {
        $dir_fail = TRUE;
      }
      chdir($cur_path);
      if ($dir_fail) {
        $form['avatar_path_test']['heading'] = array(
          '#markup' => '<h3>' . t('Testing avatar storage') . '<h3>',
        );
        $form['avatar_path_test']['result'] = array('#markup' => '<p><strong class="marker">' . t('Test failed (directory %vb_avatar_path does not exist or vB to Drupal lacks permission to access it): please go back to the <a href="@vbtodrupal_admin_page">vB to Drupal configuration page</a>, under <em>Advanced options -&gt; vBulletin path</em> enter the path to your vBulletin installation. If you are unsure what this is contact your hosting company/system administrator.', array('%vb_avatar_path' => $vb_avatar_path, '@vbtodrupal_admin_page' => url('admin/structure/vbtodrupal'))) . '</strong></p>');
        $form['tests_passed']['#access'] = FALSE;
      }
    }

    // Test whether attachments are stored in the database as blobs or in the
    // file system. According to the database, the attachfile record can have
    // these values:
    //   0|no
    //   1|yes(,)userid/userid.attach
    //   2|yes(,)u/s/e/r/i/d/userid.attach
    // which correspond to how the files are stored on disk. Currently only
    // options (0) and (2) are supported.
    // TODO: add support for option (1).
    $attachfile = db_select('setting', 's')
      ->fields('s', array('value'))
      ->condition('varname', 'attachfile')
      ->addTag('vbimport')
      ->execute()
      ->fetchField();

    if ($attachfile) {
      $dir_fail = FALSE;

      // Only change directory if the $vb_path setting is sane; if the directory
      // does not exist but the attachpath setting is an absolute path, the check
      // below will still pass.
      if (is_dir($vb_path)) {
        // We have to change to the vBulletin directory, since the vBulletin
        // setting may be a relative or absolute path.
        chdir($vb_path);
      }

      // Check for the existence of the avatars directory.
      $vb_attachment_path = db_select('setting', 's')
        ->fields('s', array('value'))
        ->condition('varname', 'attachpath')
        ->addTag('vbimport')
        ->execute()
        ->fetchField();

      if (!is_dir($vb_attachment_path)) {
        $dir_fail = TRUE;
      }

      chdir($cur_path);

      if ($dir_fail) {
        $form['attachment_path_test']['heading'] = array(
          '#markup' => '<h3>' . t('Testing attachment storage') . '</h3>',
        );
        $form['attachment_path_test']['result'] = array('#markup' => '<p><strong class="marker">' . t('Test failed (directory %vb_attachment_path does not exist or vB to Drupal lacks permission to access it): please go back to the <a href="@vbtodrupal_admin_page">vB to Drupal configuration page</a>, under <em>Advanced options -&gt; vBulletin path</em> enter the path to your vBulletin installation. If you are unsure what this is contact your hosting company/system administrator.', array('%vb_attachment_path' => $vb_attachment_path, '@vbtodrupal_admin_page' => url('admin/structure/vbtodrupal'))) . '</strong></p>');
        $form['tests_passed']['#access'] = FALSE;
      }
    }
  }
  catch (PDOException $e) {
    vbimportapi_db_restore();
    drupal_set_message(t('There appears to be a problem with your vBulletin database settings. Please click the back button in your browser and check the settings.'), 'warning');
    throw $e;
  }

  vbimportapi_db_restore();

  // Grab the vid for the Forums vocabulary.
  $sql = "SELECT vid FROM {taxonomy_vocabulary} WHERE module = :module";
  $forum_vid = db_query($sql, array(':module' => 'forum'))->fetchField();
  // Sometimes Drupal hasn't created a vocabulary entry for the forums. If we
  // don't trap the error a SQL warning will be generated.
  if (empty($forum_vid)) {
    $form['forum_test'] = array();
    $form['forum_test']['heading'] = array(
      '#markup' => '<h3>' . t('Testing Forum module has been enabled correctly') . '</h3>',
    );
    $form['forum_test']['result'] = array('#markup' => '<p><strong class="marker">' . t('Test failed: you may need to save the <a href="@forum_admin_page">Forum module admin page</a>. This is due to a quirk in that module.', array('@forum_admin_page' => url('admin/structure/forum/settings', array('query' => array('destination' => 'admin/build/vbtodrupal/import'))))) . '</strong></p>');
    $form['tests_passed']['#access'] = FALSE;
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function vbtodrupal_query_vbtodrupal_attachment_alter(QueryAlterableInterface $query) {
  $contenttypeid = &drupal_static(__FUNCTION__);
  if (!isset($contenttypeid)) {
    if (vbimportapi_import_db_column_exists('contentid', 'attachment')) {
      // vB 4 has a concept of content types.
      $contenttypeid = db_select('contenttype', 'ct')
        ->fields('ct', array('contenttypeid'))
        ->addTag('vbimport')
        ->condition('class', 'Post')
        ->execute()
        ->fetchField();
      $query->condition('a.contenttypeid', $contenttypeid);
    }
  }
}

/**
 * Get the default path where vBulletin is installed.
 *
 * This is a vague guess at what the directory might be, often vBulletin is
 * installed in the 'forums' subdirectory of a Drupal installation, but it
 * could actually be anywhere.
 *
 * @return
 *   Full path representing likely vBulletin installation location.
 */
function vbtodrupal_default_path() {
  $test_directories = array(
    'forum',
    'boards',
    'vbulletin',
  );

  foreach ($test_directories as $directory) {
    $current_directory = $_SERVER['DOCUMENT_ROOT'] . '/' . $directory;
    if (is_dir($current_directory)) {
      return $current_directory;
    }
  }

  return $_SERVER['DOCUMENT_ROOT'] . '/forums';
}

/**
 * Implementation of hook_vbimportapi_delete().
 *
 * These delete functions destroy profile fields and their values, among other
 * destructive acts (and since uids are updated to account for existing users,
 * it's not always possible to delete *only* imported data). Their
 * functionality should never be exposed to users who might use them on live
 * sites with impunity.
 */
function vbtodrupal_vbimportapi_delete() {
  $txn = db_transaction();

  // Delete users.
  db_delete('profile_field')
    ->where("name IN ('user_yim', 'user_msn', 'user_skype', 'user_aim', 'user_icq', 'user_website', 'user_from', 'user_occ', 'user_interests', 'user_gender', 'user_biography')")
    ->execute();

  db_delete('profile_value')
    ->condition('uid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  // Deleting using uid is not always enough, since we update uids during the
  // import process, to account for existing users.
  db_delete('profile_value')
    ->where('fid NOT IN (SELECT fid FROM {profile_field})')
    ->execute();

  db_delete('users')
    ->condition('uid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('authmap')
    ->condition('uid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('vbuser_salt')
    ->condition('uid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('role')
    ->condition('rid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('users_roles')
    ->condition('rid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  // Delete forums.
  db_delete('taxonomy_index')
    ->condition('tid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('taxonomy_term_hierarchy')
    ->condition('tid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('taxonomy_term_data')
    ->condition('tid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  variable_del('forum_containers');

  // Delete nodes.
  db_delete('node')
    ->condition('nid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('forum_index')
    ->condition('nid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('taxonomy_index')
    ->condition('nid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('forum')
    ->condition('nid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('node_revision')
    ->condition('nid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  // Delete comments.
  db_delete('comment')
    ->condition('cid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  // Delete polls.
  db_delete('poll')
    ->condition('nid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('poll_choice')
    ->condition('chid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('poll_vote')
    ->condition('nid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  // Delete files.
  db_delete('file_managed')
    ->condition('fid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  db_delete('file_usage')
    ->condition('fid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();

  // Delete both node and comment attachment fields.
  if (field_info_field(VBTODRUPAL_ATTACHMENT_FIELD)) {
    $tables = array();
    $tables[] = 'field_data_' . VBTODRUPAL_ATTACHMENT_FIELD;
    $tables[] = 'field_revision_' . VBTODRUPAL_ATTACHMENT_FIELD;
    $field = VBTODRUPAL_ATTACHMENT_FIELD . '_fid';
    foreach ($tables as $table) {
      db_delete($table)
        ->condition($field, VBIMPORTAPI_ADD_TO_IDS, '>')
        ->execute();
    }
  }

  foreach (_vbtodrupal_installed_instances() as $instance) {
    if (field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_delete_instance($instance['field_name']);
    }
  }

  foreach (_vbtodrupal_installed_fields() as $field) {
    if (field_info_field($field['field_name'])) {
      field_delete_field($field['field_name']);
    }
  }

  // Delete node body, comment and taxonomy fields.
  $tables = array();
  $tables[] = 'field_data_body';
  $tables[] = 'field_revision_body';
  $tables[] = 'field_data_comment_body';
  $tables[] = 'field_revision_comment_body';
  foreach ($tables as $table) {
    db_delete($table)
      ->condition('entity_id', VBIMPORTAPI_ADD_TO_IDS, '>')
      ->execute();
  }

  $tables = array();
  $tables[] = 'field_data_taxonomy_forums';
  $tables[] = 'field_revision_taxonomy_forums';
  foreach ($tables as $table) {
    db_delete($table)
      ->condition('taxonomy_forums_tid', VBIMPORTAPI_ADD_TO_IDS, '>')
      ->execute();
  }

  db_query("TRUNCATE TABLE {vbtodrupal_users_linker}");
}

/**
 * Generate a list of vBulletin users linked to existing Drupal users.
 */
function vbtodrupal_existing_user_populate_import(&$context) {
  $context['message'] = t('Linking vBulletin and Drupal accounts.');
  $context['query_insert'] = db_insert('vbtodrupal_users_linker')
    ->fields(array('drupal_uid', 'drupal_name', 'vb_username', 'vb_userid', 'vb_avatarrevision', 'vb_uid', 'vb_importuserid'));

  $context['query_select'] = db_select('users', 'du')
    ->addMetaData('import_into_tables', array('du'))
    ->condition('du.uid', VBIMPORTAPI_ADD_TO_IDS, '<');

  $context['query_select']->addField('du', 'uid', 'drupal_uid');
  $context['query_select']->addField('du', 'name', 'drupal_name');
  $context['query_select']->join('user', 'vbu', 'du.name = vbu.username');
  $context['query_select']->addField('vbu', 'username', 'vb_username');
  $context['query_select']->addField('vbu', 'userid', 'vb_userid');
  $context['query_select']->addField('vbu', 'avatarrevision', 'vb_avatarrevision');
  $context['query_select']->addExpression('vbu.userid+:add_to_ids', 'vb_uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));

  // The 'importuserid' field may not exist in every vBulletin installation
  // therefore it's included if it does and a zero is used, for compatibility
  // if it does not.
  if (vbimportapi_import_db_column_exists('importuserid', 'user')) {
    $context['query_select']->addExpression('vbu.importuserid', 'vb_importuserid');
  }
  else {
    $context['query_select']->addExpression('0', 'vb_importuserid');
  }
}

/**
 * Once all users have been imported, delete superfluous ones.
 *
 * It's faster to import all users then delete ones that match (do not need
 * to be linked using {vbtodrupal_users_linker}) than use a sub-query or
 * or left join in the previous step.
 */
function vbtodrupal_existing_user_prep_import() {
  db_delete('vbtodrupal_users_linker')
    ->condition('drupal_uid', 'vb_uid')
    ->execute();
}

/**
 * Fix users imported into vBulletin with incorrect userid.
 *
 * In many cases vBulletin will, seemingly erroneously, set the importuserid
 * to a different user. This checks whether the user record being pointed to
 * is actually the imported user, if not it will ensure it is not treated
 * as a proper user record, not a superfluous vestige from an earlier
 * import process.
 */
function vbtodrupal_existing_user_fix_linked_import(&$context) {
  $context['message'] = t('Updating linked Drupal and vB accounts.');

  $table = array(
    'fields' => array(
      'vb_importusername' => array(
        'type' => 'varchar',
        'length' => 60,
      ),
      'username' => array(
        'type' => 'varchar',
        'length' => 60,
      ),
      'userid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
  );

  // Cannot use an actual temporary table here, unfortunately, because the
  // connection is changed before the post_import hook is run.
  $context['temp_table'] = 'vbtodrupal_existing_user_fix_linked_temp';
  try {
    if (db_table_exists($context['temp_table'])) {
      db_drop_table($context['temp_table']);
    }
    db_create_table($context['temp_table'], $table);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }

  $context['query_insert'] = db_insert($context['temp_table'])
    ->fields(array('vb_importusername', 'username', 'userid'));

  // Unfortunately Drupal's database API does not allow multiple tables
  // in update queries, or this could be performed with one update.
  $context['query_select'] = db_select('vbtodrupal_users_linker', 'ul')
    ->fields('ul', array('vb_importusername'))
    ->fields('vbu', array('username', 'userid'))
    ->addMetaData('import_into_tables', array('ul'));

  $context['query_select']->join('user', 'vbu', 'ul.vb_importuserid = vbu.userid');
}

/**
 * Actually update user link records, main import function does the prep.
 *
 * @see vbtimportapi_db_setup()
 * @see vbtodrupal_existing_user_fix_linked_import()
 */
function vbtodrupal_existing_user_fix_linked_post_import(&$context) {
  try {
    db_add_index($context['temp_table'], $context['temp_table'] . '_userid', array('userid'));
    // This will only work in MySQL, using the Drupal dynamic query API
    // would make this too slow (since it doesn't support multi-table updates).
    $sql = "UPDATE {" . $context['temp_table'] . "} t,
      {vbtodrupal_users_linker} ul
      SET ul.vb_importusername = t.username
      WHERE ul.vb_importuserid = t.userid";
    db_query($sql);
    db_drop_table($context['temp_table']);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }
}

/**
 * Follow-up to linked users fix: remove link when valid one is unobtainable.
 */
function vbtodrupal_existing_user_unlink_import() {
  db_update('vbtodrupal_users_linker')
    ->fields(array(
      'vb_importuserid' => 0,
    ))
    ->condition('vb_username', 'vb_importusername', '!=')
    ->execute();
}

/**
 * Delete unneeded user linkers records.
 *
 * vBulletin's database schema allows duplicate usernames and e-mails.
 * Two users are created when using vBulletin's ImpEx import system, the
 * first has an importuserid pointing to the second. It is the latter we
 * wish to import. See: http://www.vbulletin.com/docs/html/impex_multi_import
 */
function vbtodrupal_existing_user_clean_up_import() {
  db_delete('vbtodrupal_users_linker')
    ->condition('vb_importuserid', 'vb_userid', '<>')
    ->condition('vb_importuserid', 0, '>')
    ->execute();
}

/**
 * Attach newly imported content to existing Drupal users.
 *
 * Orphan threads/posts are caused by duplicate user accounts being in
 * the Drupal {users} table when an import is run. As the user account already
 * exists, the import silently fails, leaving orphaned threads/posts.
 *
 * Note: we don't update {node_comment_statistics} here as that is
 * handled later.
 *
 */
function vbtodrupal_existing_user_import($table, $field, $condition, $sub_module, &$context) {
  $context['message'] = t('Finding orphaned records and attaching them to users.');

  $select = db_select('vbtodrupal_users_linker', 'ul')
    ->fields('ul', array('vb_uid', 'drupal_uid'));

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['max'] = $select->countQuery()->execute()->fetchField();

    if (empty($context['sandbox']['max'])) {
      $context['finished'] = 1;
      return;
    }

    $context['sandbox']['progress'] = 0;
    $context['sandbox']['records_per_pass'] = VBIMPORTAPI_RECORDS_PER_PASS;
  }
  else if ($context['sandbox']['progress'] >= $context['sandbox']['max']) {
    $context['finished'] = 1;
    return;
  }

  module_invoke_all('vbtodrupal_' . $table . '_orphans_pre_update', $field, $context);

  // Go through every user that may need to be updated in tables
  // containing uids.
  $select->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  $temp_table = db_query_temporary((string) $select, $select->getArguments());

  $arguments = array();
  $where = "WHERE (t.$field = ul.vb_uid)";
  if ($condition instanceof QueryConditionInterface) {
    // Create dummy update query, required for the condition to compile.
    $dummy = db_update($table);
    $condition->compile(Database::getConnection(), $dummy);
    $condition_arguments = $condition->arguments();
    if (!empty($condition_arguments)) {
      $arguments = $condition_arguments;
    }
    $where .= " AND " . (string) $condition;
  }

  // This will update one field in one table at a time to the Drupal uid.
  // Dynamic query is too slow here, must use a static one.
  $sql = "UPDATE {" . $table . "} t, {" . $temp_table . "} ul
    SET t.$field = ul.drupal_uid " . $where;
  db_query($sql, $arguments);

  module_invoke_all('vbtodrupal_' . $table . '_orphans_post_update', $field, $context);

  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    $context['sandbox']['progress'] += $context['sandbox']['records_per_pass'];
  }
  else {
    $context['finished'] = 1;
  }
}

/**
 * Update existing users with imported user pictures.
 *
 * Updates existing Drupal users with the avatars from their vBulletin
 * user accounts. This does not try to move avatar/picture files around,
 * it just updates the database user records to point to the avatar file.
 */
function vbtodrupal_existing_user_picture_import(&$context) {
  $context['message'] = t('Updating user pictures.');

  $table = array(
    'fields' => array(
      'drupal_uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'vb_userid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'picture' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
  );

  // Cannot use an actual temporary table here, unfortunately, because the
  // connection is changed before the post_import hook is run.
  $context['temp_table'] = 'vbtodrupal_existing_user_picture_temp';
  try {
    if (db_table_exists($context['temp_table'])) {
      db_drop_table($context['temp_table']);
    }
    db_create_table($context['temp_table'], $table);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }

  $context['query_insert'] = db_insert($context['temp_table'])
    ->fields(array('drupal_uid', 'vb_userid', 'picture'));

  $context['query_select'] = db_select('vbtodrupal_users_linker', 'ul')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('ul', 'fm', 'u'))
    ->fields('ul', array('drupal_uid', 'vb_userid'))
    ->condition('picture', 0);
  // Only select users with an avatar file.
  $context['query_select']->addExpression('fm.fid', 'picture');
  $context['query_select']->join('file_managed', 'fm', 'ul.vb_userid+:pictures_add_to_ids = fm.fid', array(':pictures_add_to_ids' => VBTODRUPAL_PICTURES_ADD_TO_IDS));
  $context['query_select']->join('users', 'u', 'ul.drupal_uid = u.uid');
}

/**
 * Actually update existing users, main import just does preparation.
 *
 * @see vbtodrupal_existing_user_picture_import()
 */
function vbtodrupal_existing_user_picture_post_import(&$context) {
  try {
    db_add_index($context['temp_table'], $context['temp_table'] . '_drupal_uid', array('drupal_uid'));
    // This will only work in MySQL, using the Drupal dynamic query API
    // would make this too slow (since it doesn't support multi-table updates).
    $sql = "UPDATE {" . $context['temp_table'] . "} t, {users} u 
      SET u.picture = t.picture
      WHERE u.uid = t.drupal_uid";
    db_query($sql);
    db_drop_table($context['temp_table']);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }
}

/**
 * Create Fields API fields.
 */
function vbtodrupal_field_add($function, $records_per_pass, $importer_module, $sub_module, &$context) {
  $context['message'] = t('Creating fields.');

  // Create the field(s).
  foreach (_vbtodrupal_installed_fields() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  // Create field instances.
  foreach (_vbtodrupal_installed_instances() as $instance) {
    if (!field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }
}

/**
 * Returns a structured array defining fields created for vB to Drupal.
 *
 * This is factored into this function so it can be used in both
 * vbtodrupal_field_add(), vbtodrupal_vbimportapi_delete() and elsewhere.
 *
 * @todo: Move profile fields from profile.module into user fields.
 */
function _vbtodrupal_installed_fields() {
  return array(
    VBTODRUPAL_ATTACHMENT_FIELD => array(
      'field_name' => VBTODRUPAL_ATTACHMENT_FIELD,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type' => 'file',
    ),
  );
}

/**
 * Returns a structured array defining field instances created for vB to Drupal.
 *
 * This is factored into this function so it can be used in both
 * vbtodrupal_field_add() and vbtodrupal_vbimportapi_delete().
 */
function _vbtodrupal_installed_instances() {
  return array(
    'vbtodrupal_attachment_node' => array(
      'field_name' => VBTODRUPAL_ATTACHMENT_FIELD,
      'entity_type' => 'node',
      'bundle' => 'forum',
      'label' => t('Attachment'),
      'widget' => array(
        'type' => 'file',
      ),
      'settings' => array(
        'file_directory' => 'vbtodrupal',
      ),
      'display' => array(
        'default' => array(
          'type' => 'file_default',
        ),
      ),
    ),
    'vbtodrupal_attachment_comment' => array(
      'field_name' => VBTODRUPAL_ATTACHMENT_FIELD,
      'entity_type' => 'comment',
      'bundle' => 'comment_node_forum',
      'label' => t('Attachment'),
      'widget' => array(
        'type' => 'file',
      ),
      'settings' => array(
        'file_directory' => 'vbtodrupal',
      ),
      'display' => array(
        'default' => array(
          'type' => 'file_default',
        ),
      ),
    ),
  );
}

/**
 * Create profile fields.
 */
function vbtodrupal_profile_field_import(&$context) {
  $values = array(
    array(
      'title' => 'YIM',
      'name' => 'user_yim',
      'explanation' => '',
      'category' => 'Contact',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'MSN',
      'name' => 'user_msn',
      'explanation' => '',
      'category' => 'Contact',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'Skype',
      'name' => 'user_skype',
      'explanation' => '',
      'category' => 'Contact',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'AIM',
      'name' => 'user_aim',
      'explanation' => '',
      'category' => 'Contact',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'ICQ',
      'name' => 'user_icq',
      'explanation' => '',
      'category' => 'Contact',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'Website',
      'name' => 'user_website',
      'explanation' => '',
      'category' => 'Contact',
      'page' => '',
      'type' => 'url',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'Location',
      'name' => 'user_from',
      'explanation' => '',
      'category' => 'Personal',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'Occupation',
      'name' => 'user_occ',
      'explanation' => '',
      'category' => 'Personal',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'Interests',
      'name' => 'user_interests',
      'explanation' => '',
      'category' => 'Personal',
      'page' => '',
      'type' => 'textfield',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
    array(
      'title' => 'Gender',
      'name' => 'user_gender',
      'explanation' => '',
      'category' => 'Personal',
      'page' => '',
      'type' => 'selection',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => 'Male Female',
    ),
    array(
      'title' => 'Biography',
      'name' => 'user_biography',
      'explanation' => 'A few details about yourself',
      'category' => 'Personal',
      'page' => '',
      'type' => 'textarea',
      'weight' => '0',
      'required' => '0',
      'register' => '1',
      'visibility' => '2',
      'options' => '',
    ),
  );
  $context['query_insert'] = db_insert('profile_field') 
    ->fields(array('title', 'name', 'explanation', 'category', 'page', 'type', 'weight', 'required', 'register', 'visibility', 'options'));
  foreach ($values as $record) {
    $context['query_insert']->values($record);
  }
}

/**
 * Import vBulletin users.
 */
function vbtodrupal_user_import(&$context) {
  $context['query_insert'] = db_insert('users')
    ->fields(array('pass', 'mail', 'created', 'access', 'login', 'signature', 'name', 'status', 'timezone', 'uid', 'picture'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('password', 'email', 'joindate', 'lastactivity', 'lastvisit'))
    ->isNull('du.name');

  $context['query_select']->leftJoin('users', 'du', 'u.username = du.name');
  $context['query_select']->leftJoin('customavatar', 'ca', 'u.userid = ca.userid');
  $context['query_select']->leftJoin('usertextfield', 'utf', 'u.userid = utf.userid');
  $context['query_select']->addMetaData('import_into_tables', array('du'));

  $context['query_select']->addExpression("COALESCE(utf.signature, '')", 'signature');
  $name_length = vbimportapi_target_db_column_length('name', 'users');
  $context['query_select']->addExpression("SUBSTRING(username FROM 1 FOR $name_length)", 'name');
  $context['query_select']->addExpression(1, 'status');
  $context['query_select']->addExpression('timezoneoffset*60*60', 'timezone');
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(ca.userid IS NULL, 0, ca.userid+:pictures_add_to_ids)', 'picture', array(':pictures_add_to_ids' => VBTODRUPAL_PICTURES_ADD_TO_IDS));
}

/**
 * Import user salt for vBulletin password auth service.
 *
 * This query (and the next) is the reason this module depends upon vbpassword
 * (because this table has to exist to import to).
 */
function vbtodrupal_vbuser_salt_import(&$context) {
  $context['query_insert'] = db_insert('vbuser_salt')
    ->fields(array('salt', 'drupal_updated', 'uid'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('salt'));
  
  $context['query_select']->addExpression(0, 'drupal_updated');
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Create authmap records for newly imported users.
 */
function vbtodrupal_authmap_import(&$context) {
  $context['query_insert'] = db_insert('authmap')
    ->fields(array('authname', 'uid', 'module'));

  $context['query_select'] = db_select('users', 'u')
    ->fields('u', array('name', 'uid'))
    ->addMetaData('import_into_tables', array('u', 's'));

  $context['query_select']->join('vbuser_salt', 's', 'u.uid = s.uid');
  $context['query_select']->addExpression("'vbpassword'", 'module');
}

/**
 * Import user profile fields: Yahoo instant messaging.
 *
 * @TODO: vBulletin deletes the field if it's not used, making this throw an
 * error. Add a check to ensure the field exists.
 */
function vbtodrupal_profile_value_yahoo_import(&$context) {
  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_yim')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('yahoo'));
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: MSN instant messaging.
 */
function vbtodrupal_profile_value_msn_import(&$context) {
  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_msn')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('msn'));
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: Skype instant messaging.
 */
function vbtodrupal_profile_value_skype_import(&$context) {
  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_skype')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('skype'));
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: AIM instant messaging.
 */
function vbtodrupal_profile_value_aim_import(&$context) {
  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_aim')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('aim'));
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: ICQ instant messaging.
 */
function vbtodrupal_profile_value_icq_import(&$context) {
  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_icq')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('icq'));
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: Website address.
 */
function vbtodrupal_profile_value_website_import(&$context) {
  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_website')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('user', 'u')
    ->fields('u', array('homepage'));
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: Location.
 */
function vbtodrupal_profile_value_location_import(&$context) {
  if ($context['sandbox']['progress'] == 0) {
    if (!vbimportapi_import_db_column_exists('field2', 'userfield')) {
      return;
    }
  }

  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_from')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('userfield', 'uf');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(field2, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'value');
  $context['query_select']->addExpression('uf.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: Occupation.
 */
function vbtodrupal_profile_value_occupation_import(&$context) {
  if ($context['sandbox']['progress'] == 0) {
    if (!vbimportapi_import_db_column_exists('field4', 'userfield')) {
      return;
    }
  }

  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_occ')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('userfield', 'uf');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(field4, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'value');
  $context['query_select']->addExpression('uf.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: Interests.
 */
function vbtodrupal_profile_value_interests_import(&$context) {
  if ($context['sandbox']['progress'] == 0) {
    if (!vbimportapi_import_db_column_exists('field3', 'userfield')) {
      return;
    }
  }

  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_interests')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('userfield', 'uf');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(field3, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'value');
  $context['query_select']->addExpression('uf.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: Gender.
 */
function vbtodrupal_profile_value_gender_import(&$context) {
  if ($context['sandbox']['progress'] == 0) {
    if (!vbimportapi_import_db_column_exists('field5', 'userfield')) {
      return;
    }
  }

  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_gender')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('userfield', 'uf')
    ->fields('uf', array('field5'))
    ->condition(db_or()->condition('field5', 'Male')->condition('field5', 'Female'));

  $context['query_select']->addExpression('uf.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import user profile fields: Biography.
 */
function vbtodrupal_profile_value_biography_import(&$context) {
  if ($context['sandbox']['progress'] == 0) {
    if (!vbimportapi_import_db_column_exists('field1', 'userfield')) {
      return;
    }
  }

  $fid = db_select('profile_field', 'pf')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pf'))
    ->fields('pf', array('fid'))
    ->condition('name', 'user_biography')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('profile_value')
    ->fields(array('value', 'uid', 'fid'));

  $context['query_select'] = db_select('userfield', 'uf')
    ->fields('uf', array('field1'));

  $context['query_select']->addExpression('uf.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':fid', 'fid', array(':fid' => $fid));
}

/**
 * Import roles.
 */
function vbtodrupal_roles_import(&$context) {
  $context['query_insert'] = db_insert('role')
    ->fields(array('name', 'rid'));

  $context['query_select'] = db_select('usergroup', 'u')
    ->fields('u', array('title'));
  $context['query_select']->addExpression('u.usergroupid+:add_to_ids', 'rid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import user roles.
 */
function vbtodrupal_users_roles_import(&$context) {
  $context['query_insert'] = db_insert('users_roles')
    ->fields(array('uid', 'rid'));

  $context['query_select'] = db_select('user', 'u');
  $context['query_select']->addExpression('u.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('u.usergroupid+:add_to_ids', 'rid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import secondary user roles.
 */
function vbtodrupal_secondary_users_roles_import(&$context) {
  $user_groups = db_select('usergroup', 'ug')
    ->addTag('vbimport')
    ->fields('ug', array('usergroupid'))
    ->execute();

  // There is a need to execute an insert query for every user group, the
  // number of groups should be relatively small, so divide the number of user
  // records to be processed every time this function is called by the
  // number of user groups (meaning the same number of records will be
  // processed every iteration).
  $usergroups = &drupal_static(__FUNCTION__);
  if (empty($usergroups['records_per_pass_set'])) {
    $user_group_count = $user_groups
      ->countQuery()
      ->execute()
      ->fetchField();
    $context['sandbox']['records_per_pass'] = ceil($context['sandbox']['records_per_pass'] / $user_group_count);
    $usergroups['records_per_pass_set'] = TRUE;
  }

  // Perform an import for every user group. There is no more elegant way to
  // do this due to the user group data in vBulletin being de-normalised into
  // a single field..
  foreach ($user_groups as $group) {
    $from = db_select('user', 'u')
      ->addTag('vbimport')
      ->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass'])
      ->where('FIND_IN_SET(:gid, u.membergroupids) <> 0', array(':gid' => $group->usergroupid));
    $from->addExpression('userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
    $from->addExpression(':rid', 'rid', array(':rid' => $group->usergroupid + VBIMPORTAPI_ADD_TO_IDS));

    db_insert('users_roles')
      ->fields(array('uid', 'rid'))
      ->from($from)
      ->execute();
  }
}

/**
 * Helper function that does the work of migrating users.
 */
function _vbtodrupal_convusers() {
  // @TODO: Signatures import.
  /* Signatures.
  $sql  = 'INSERT IGNORE INTO %s (uid, signature) ';
  $sql .= 'SELECT {user}.userid+%d, signature ';
  $sql .= 'FROM {user} INNER JOIN {usertextfield} ON {user}.userid={usertextfield}.userid ';
  $sql .= 'WHERE signature IS NOT NULL ';
  db_query($sql, _vbtodrupal_db_prefix_tables('{users_signature}', $drupal_db_prefix, $drupal_db_name), VBIMPORTAPI_ADD_TO_IDS);
  */
}

/**
 * Import forums.
 */
function vbtodrupal_forum_import(&$context) {
 $vid = db_select('taxonomy_vocabulary', 'tv')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('tv'))
    ->fields('tv', array('vid'))
    ->condition('module', 'forum')
    ->execute()
    ->fetchField();

  $context['query_insert'] = db_insert('taxonomy_term_data')
    ->fields(array('name', 'description', 'weight', 'tid', 'vid'));

  $context['query_select'] = db_select('forum', 'f')
    ->fields('f', array('title', 'description', 'displayorder'));
  $context['query_select']->addExpression('f.forumid+:add_to_ids', 'tid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':vid', 'vid', array(':vid' => $vid));
}

/**
 * Import top level containers into the taxonomy term hierarchy.
 */
function vbtodrupal_forum_top_level_hierarchy_import(&$context) {
$context['query_insert'] = db_insert('taxonomy_term_hierarchy')
    ->fields(array('parent', 'tid'));

  $context['query_select'] = db_select('forum', 'f')
    ->condition('parentid', '-1');
  $context['query_select']->addExpression(0, 'parent');
  $context['query_select']->addExpression('f.forumid+:add_to_ids', 'tid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import forum hierarchy.
 */
function vbtodrupal_forum_hierarchy_import(&$context) {
  $context['query_insert'] = db_insert('taxonomy_term_hierarchy')
    ->fields(array('parent', 'tid'));

  $context['query_select'] = db_select('forum', 'f')
    ->condition('parentid', '-1', '>');
  $context['query_select']->addExpression('f.parentid+:add_to_ids', 'parent', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('f.forumid+:add_to_ids', 'tid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import forum containers array.
 */
function vbtodrupal_forum_containers_import(&$context) {
  $existing_containers = variable_get('forum_containers', array());
  $vb_containers = db_select('forum', 'f')
    ->addTag('vbimport')
    ->condition('parentid', '-1')
    ->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  $vb_containers->addExpression('f.forumid+:add_to_ids', 'forumid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $containers = $vb_containers->execute();

  foreach ($containers as $container) {
    if (in_array($container->forumid, $existing_containers)) {
      continue;
    }
    $existing_containers[] = $container->forumid;
  }

  // Containers with something in them are not containers.
  $containers_query = db_select('forum_index', 'fi')
    ->fields('fi', array('tid'))
    ->condition('tid', $existing_containers, 'IN')
    ->groupBy('tid')
    ->havingCondition('nid_count', 0, '>');
  $containers_query->addExpression('COUNT(fi.nid)', 'nid_count');
  $full_containers = $containers_query->execute()->fetchCol();
  $forum_containers = array_values(array_diff($existing_containers, $full_containers));

  variable_set('forum_containers', $forum_containers);
}

/**
 * Import threads as nodes hierarchy.
 */
function vbtodrupal_thread_import(&$context) {
  $context['query_insert'] = db_insert('node')
    ->fields(array('created', 'sticky', 'changed', 'nid', 'vid', 'type', 'language', 'title', 'uid', 'status', 'comment'));

  // Note: we don't import poll threads at this point.
  $context['query_select'] = db_select('thread', 't')
    ->condition('pollid', '0')
    ->fields('t', array('dateline', 'sticky'));

  $context['query_select']->addExpression('t.dateline', 'changed');
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'vid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'forum'", 'type');
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression('IF(t.postuserid = 0, 0, t.postuserid+:add_to_ids)', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(t.visible = 1, 1, 0)', 'status');
  $context['query_select']->addExpression('IF(t.open = 1, :comments_open, :comments_closed)', 'comment', array(':comments_open' => COMMENT_NODE_OPEN, ':comments_closed' => COMMENT_NODE_CLOSED));
}

/**
 * Hook nodes up to taxonomy terms (forums).
 */
function vbtodrupal_thread_taxonomy_import(&$context) {
  $context['query_insert'] = db_insert('taxonomy_index')
    ->fields(array('sticky', 'created', 'nid', 'tid'));

  $context['query_select'] = db_select('thread', 't')
    ->fields('t', array('sticky', 'dateline'));
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.forumid+:add_to_ids', 'tid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import forum taxonomy field data.
 */
function vbtodrupal_field_data_taxonomy_forums_import(&$context) {
  $context['message'] = t('Importing forum category field data.');

  _vbtodrupal_field_taxonomy_forums_import_helper('field_data_taxonomy_forums', $context);
}

/**
 * Import forum taxonomy field revisions.
 */
function vbtodrupal_field_revision_taxonomy_forums_import(&$context) {
  $context['message'] = t('Importing forum category field revisions.');

  _vbtodrupal_field_taxonomy_forums_import_helper('field_revision_taxonomy_forums', $context);
}

/**
 * Helper function to construct taxonomy forum data/revision import queries.
 */
function _vbtodrupal_field_taxonomy_forums_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta', 'taxonomy_forums_tid'));

  $context['query_select'] = db_select('thread', 't');
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'forum'", 'bundle');
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
  $context['query_select']->addExpression('t.forumid+:add_to_ids', 'taxonomy_forums_tid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Fill in Forum table: not sure what this does that term_node doesn't.
 */
function vbtodrupal_thread_forum_import(&$context) {
  $context['query_insert'] = db_insert('forum')
    ->fields(array('nid', 'vid', 'tid'));

  $context['query_select'] = db_select('thread', 't');
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'vid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.forumid+:add_to_ids', 'tid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import forum index table.
 */
function vbtodrupal_forum_index_import(&$context) {
  $context['message'] = t('Importing forum index.');
  $context['query_insert'] = db_insert('forum_index')
    ->fields(array('created', 'sticky', 'last_comment_timestamp', 'comment_count', 'nid', 'title', 'tid'));

  $context['query_select'] = db_select('thread', 't')
    ->fields('t', array('dateline', 'sticky', 'lastpost', 'replycount'));

  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression('t.forumid+:add_to_ids', 'tid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import node revisions.
 */
function vbtodrupal_node_revision_import(&$context) {
  $context['query_insert'] = db_insert('node_revision')
    ->fields(array('log', 'timestamp', 'sticky', 'nid', 'vid', 'uid', 'title', 'status', 'comment'));

  $context['query_select'] = db_select('thread', 't')
    ->fields('t', array('notes', 'dateline', 'sticky'));

  $context['query_select']->join('post', 'p', 't.firstpostid = p.postid');
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS)); 
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'vid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS)); 
  $context['query_select']->addExpression('IF(t.postuserid = 0, 0, t.postuserid+:add_to_ids)', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(t.title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression('IF(t.visible = 1, 1, 0)', 'status');
  $context['query_select']->addExpression('IF(t.open = 1, :comments_open, :comments_closed)', 'comment', array(':comments_open' => COMMENT_NODE_OPEN, ':comments_closed' => COMMENT_NODE_CLOSED));
}

/**
 * Import node body field.
 */
function vbtodrupal_field_data_body_import(&$context) {
  $context['message'] = t('Importing first forum post body fields.');

  _vbtodrupal_field_body_import_helper('field_data_body', $context);
}

/**
 * Import node body field revisions.
 */
function vbtodrupal_field_revision_body_import(&$context) {
  $context['message'] = t('Importing first forum post body field revisions.');

  _vbtodrupal_field_body_import_helper('field_revision_body', $context);
}

/**
 * Helper to construct node body field data/revision import queries.
 */
function _vbtodrupal_field_body_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('body_value', 'entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta'));

  $context['query_select'] = db_select('thread', 't');

  $context['query_select']->join('post', 'p', 't.firstpostid = p.postid');
  $context['query_select']->addField('p', 'pagetext', 'body_value');
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'forum'", 'bundle');
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
}

/**
 * Import posts as comments on forum nodes.
 */
function vbtodrupal_comment_import(&$context) {
  $context['message'] = t('Importing forum posts.');
  $context['query_insert'] = db_insert('comment')
    ->fields(array('hostname', 'created', 'changed', 'name', 'mail', 'homepage', 'cid', 'pid', 'nid', 'uid', 'subject', 'status', 'thread', 'language'));

  $context['query_select'] = db_select('post', 'p')
    ->fields('p', array('ipaddress', 'dateline', 'dateline'))
    ->fields('u', array('username', 'email', 'homepage'));

  $context['query_select']->leftJoin('user', 'u', 'p.userid = u.userid');
  $context['query_select']->addExpression('p.postid+:add_to_ids', 'cid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('p.parentid+:add_to_ids', 'pid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('p.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(p.userid = 0, 0, p.userid+:add_to_ids)', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $subject_length = vbimportapi_target_db_column_length('subject', 'comment');
  $context['query_select']->addExpression("SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(p.title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>') FROM 1 FOR $subject_length)", 'subject');
  $context['query_select']->addExpression('IF(p.visible = 1, :comment_published, :comment_not_published)', 'status', array(':comment_published' => COMMENT_PUBLISHED, ':comment_not_published' => COMMENT_NOT_PUBLISHED));
  $context['query_select']->addExpression("''", 'thread');
  $context['query_select']->addExpression("'und'", 'language');
}

/**
 * Import comment body field.
 */
function vbtodrupal_field_data_comment_body_import(&$context) {
  $context['message'] = t('Importing forum post body fields.');

  _vbtodrupal_comment_body_field_import_helper('field_data_comment_body', $context);
}

/**
 * Import comment body revisions.
 */
function vbtodrupal_field_revision_comment_body_import(&$context) {
  $context['message'] = t('Importing forum post body field revisions.');

  _vbtodrupal_comment_body_field_import_helper('field_revision_comment_body', $context);
}

/**
 * Helper to construct comment body field data/revision import query.
 */
function _vbtodrupal_comment_body_field_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta', 'comment_body_value'));

  $context['query_select'] = db_select('post', 'p');
  $context['query_select']->addExpression("'comment'", 'entity_type');
  $context['query_select']->addExpression("'comment_node_forum'", 'bundle');
  $context['query_select']->addExpression('p.postid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('p.postid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(p.pagetext, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'comment_body_value');
  // comment_body_format intentionally left out for now, could put the
  // the result of filter_fallback_format() in here, but forum posts
  // in plaintext are useless. Can't use the default format, either.
}

/**
 * Helper function that migrates posts into Drupal comments.
 *
 * @TODO: Save min and max posts for delete function and move to comment_import.

function vbtodrupal_posts_import(&$context) {
  if ($context['sandbox']['progress'] == 0) {
    $context['sandbox']['max'] = db_query("SELECT MAX(postid) FROM {{post}}")->fetchField();

    $post_min = db_query("SELECT MIN(postid)+%d FROM {{post}}", VBIMPORTAPI_ADD_TO_IDS)->fetchField();
    $post_max = db_query("SELECT MAX(postid)+%d FROM {{post}}", VBIMPORTAPI_ADD_TO_IDS)->fetchField();
    variable_set('vbtodrupal_post_id_min', $post_min);
    variable_set('vbtodrupal_post_id_max', $post_max);
  }
} */

/**
 * Delete first post comments, since they are nodes in Drupal.
 *
 * @see vbtodrupal_first_posts_delete_post_import()
 */
function vbtodrupal_first_posts_delete_import(&$context) {
  $table = array(
    'fields' => array(
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
  );

  // Cannot use an actual temporary table here, unfortunately, because the
  // connection is changed before the post_import hook is run.
  $context['temp_table'] = 'vbtodrupal_first_posts_delete_temp';
  try {
    if (db_table_exists($context['temp_table'])) {
      db_drop_table($context['temp_table']);
    }
    db_create_table($context['temp_table'], $table);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }

  $query_thread = db_select('thread', 't')
    ->condition('t.firstpostid', 0, '>')
    ->addTag('vbimport');
  $query_thread->addExpression('t.firstpostid+:add_to_ids', 'cid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select'] = clone $query_thread;

  // Hack due to hook_query_alter() not being called when query cast as string.
  vbimportapi_query_vbimport_alter($query_thread);

  $query_thread->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  db_insert($context['temp_table'])
    ->fields(array('cid'))
    ->from($query_thread)
    ->execute();
}

/**
 * Actually delete first posts, main import function does the preparation.
 *
 * It is not possible to use text-based queries in the main import function
 * as the tables would not be prefixed. Only dynamic queries will work.
 *
 * @see vbimportapi_db_setup()
 * @see vbtodrupal_first_posts_delete_import()
 */
function vbtodrupal_first_posts_delete_post_import(&$context) {
  try {
    // Cheeky, because the DB API does not allow joins in delete queries
    // and subqueries, while being portable, are intolerably slow.
    $sql = "DELETE FROM c USING {comment} AS c, {$context['temp_table']} AS t
      WHERE c.cid = t.cid";
    db_query($sql);
    db_drop_table($context['temp_table']);
  }
  catch (Exception $e) {
    // If something bad happens, try to delete the temporary table before
    // re-throwing the error.
    @db_drop_table($context['temp_table']);
    throw $e;
  }
}

/**
 * Rebuild thread in the comment table.
 */
function vbtodrupal_comment_threads_rebuild($function, $records_per_pass, $importer_module, $sub_module, &$context) {
  $context['message'] = t('Rebuilding forum threads.');

  if (variable_get('vbtodrupal_skip_comment_threads_rebuild', FALSE)) {
    return;
  }

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;

    $context['sandbox']['max'] = db_query("SELECT COUNT(*)
      FROM {comment} c
      WHERE c.thread = ''")->fetchField();

    $context['sandbox']['records_per_pass'] = $records_per_pass;
    $comment_schema = drupal_get_schema('comment', 'comment');
    $context['sandbox']['thread_length'] = $comment_schema['fields']['thread']['length'];
  }

  $txn = db_transaction();

  $sql = "SELECT cid, pid, nid, thread
    FROM {comment} c
    WHERE c.thread = ''
    ORDER BY c.created";
  $result = db_query_range($sql, $context['sandbox']['progress'], $context['sandbox']['records_per_pass']);

  foreach ($result as $blank_thread) {
    if ($blank_thread->pid == 0) {
      // No parent.
      $sql = "SELECT MAX(c.thread) AS thread_max
        FROM {comment} c
        WHERE c.nid = :thread_nid";
      $max = db_query($sql, array(':thread_nid' => $blank_thread->nid))->fetchField();

      if ($max == NULL) {
        $thread = int2vancode(1) . '/';
      }
      else {
        // Strip the "/" from the end of the thread.
        $trim_max = rtrim($max, '/');
        $thread = int2vancode(vancode2int($trim_max) + 1) . '/';
      }
    }
    else {
      // Has a parent.
      // Get the parent comment.
      $sql = "SELECT c.thread FROM {comment} c
        WHERE c.cid = :pid";
      $parent = db_query($sql, array(':pid' => $blank_thread->pid))->fetchField();

      // Strip the "/" from the end of the parent thread.
      $parent = rtrim($parent, '/');

      // Get the max value in _this_ thread.
      $sql = "SELECT MAX(c.thread) AS thread_max
        FROM {comment} c
        WHERE c.nid = :blank_thread_nid
        AND c.thread LIKE :thread";
      $max = db_query($sql, array(
        ':blank_thread_nid' => $blank_thread->nid,
        ':thread' => $parent . '.%',
      ))->fetchField();

      if ($max == NULL) {
        // First child of this parent.
        $thread = $parent . '.' . int2vancode() . '/';
      }
      else {
        $max = rtrim($max, '/');

        // Need to get the value at the correct depth.
        $parts = explode('.', $max);
        $parent_depth = count(explode('.', $parent));
        $last = $parts[$parent_depth];

        // Finally, build the thread field for this new comment.
        $thread = $parent . '.' . int2vancode(vancode2int($last) + 1) . '/';
      }
    }

    if (strlen($thread) > $context['sandbox']['thread_length']) {
      $thread = rtrim(substr($thread, 0, $context['sandbox']['thread_length'] - 1), '.') . '/';
    }

    try {
      // Shouldn't use static queries for UPDATEs, but damnit Jim, we need all the
      // speed we can get!
      $sql = "UPDATE {comment} c SET thread = :thread
        WHERE cid = :cid";
      db_query($sql, array(':thread' => $thread, ':cid' => $blank_thread->cid));
    }
    catch (PDOException $e) {
      $txn->rollback();
      throw $e;
    }
  }

  // Progress tracking, since this function is called directly from Batch API
  // not from vbimportapi_import().
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    $context['sandbox']['progress'] += $context['sandbox']['records_per_pass'];
  }
  else {
    $context['finished'] = 1;
  }
}

/**
 * Import polls.
 */
function vbtodrupal_poll_import(&$context) {
  $context['query_insert'] = db_insert('poll')
    ->fields(array('runtime', 'active', 'nid'));

  $context['query_select'] = db_select('poll', 'p')
    ->fields('p', array('timeout', 'active'));

  $context['query_select']->join('thread', 't', 'p.pollid = t.pollid');
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import poll nodes.
 */
function vbtodrupal_poll_node_import(&$context) {
  $context['query_insert'] = db_insert('node')
    ->fields(array('created', 'sticky', 'changed', 'nid', 'vid', 'type', 'language', 'title', 'uid', 'status', 'comment'));

  $context['query_select'] = db_select('poll', 'p')
    ->fields('p', array('dateline'))
    ->fields('t', array('sticky'));

  $context['query_select']->join('thread', 't', 'p.pollid = t.pollid');
  $context['query_select']->addExpression('p.dateline', 'changed');
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'vid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'poll'", 'type');
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(p.question, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');

  $context['query_select']->addExpression('IF(t.postuserid=0, 0, t.postuserid+:add_to_ids)', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(t.visible=1, 1, 0)', 'status');
  $context['query_select']->addExpression('IF(t.open=1, :comments_open, :comments_closed)', 'comment', array(':comments_open' => COMMENT_NODE_OPEN, ':comments_closed' => COMMENT_NODE_CLOSED));
}

/**
 * Import poll values.
 */
function vbtodrupal_poll_vote_import(&$context) {
  $context['query_insert'] = db_insert('poll_vote')
    ->fields(array('chid', 'nid', 'uid', 'hostname', 'timestamp'));

  $context['query_select'] = db_select('pollvote', 'pv');

  $context['query_select']->join('thread', 't', 'pv.pollid = t.pollid');
  $context['query_select']->join('user', 'u', 'pv.userid = u.userid');
  $context['query_select']->addExpression('CONCAT(t.threadid+:add_to_ids, pv.voteoption)', 'chid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('t.threadid+:add_to_ids', 'nid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(pv.userid = 0, 0, pv.userid+:add_to_ids)', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  // Have to add the pollvoteid on to the end of the ip address to avoid
  // integrity constraint violations when importing. Presumably vB allows
  // voting for multiple items on the same poll.
  $context['query_select']->addExpression("CONCAT(u.ipaddress, '-', pv.pollvoteid)", 'hostname');
  $context['query_select']->addExpression('pv.votedate', 'timestamp');
}

/**
 * Import poll choices.
 */
function vbtodrupal_poll_choice_import(&$context) {
  $poll_query = db_select('poll', 'p')
    ->addTag('vbimport')
    ->fields('p', array('pollid', 'options'))
    ->fields('t', array('threadid'));

  $poll_query->join('thread', 't', 'p.pollid = t.pollid');
  $context['query_select'] = clone $poll_query;
  $poll_query->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  $result = $poll_query->execute();
  $chtext_length = vbimportapi_target_db_column_length('chtext', 'poll_choice');

  foreach ($result as $poll_item) {
    $query = db_insert('poll_choice')
      ->fields(array('chid', 'nid', 'chtext', 'chvotes', 'weight'));
    $poll_options = explode('|||', $poll_item->options);
    $values = array();
    $chid = 1;

    foreach ($poll_options as $option_key => $option_val) {
      $query->values(array(
        'chid' => ($poll_item->threadid + VBIMPORTAPI_ADD_TO_IDS) . $chid++,
        'nid' => $poll_item->threadid + VBIMPORTAPI_ADD_TO_IDS,
        'chtext' => substr($option_val, 0, $chtext_length),
        'chvotes' => 0,
        'weight' => $option_key,
      ));
    }

    $query->execute();
  }
}

/**
 * Construct vote statistics.
 *
 * It's easier to count these here than try importing the totals from vBulletin.
 */
function vbtodrupal_poll_tally_import(&$context) {
  $votes = db_select('poll_vote', 'pv')
    ->addTag('vbimport')
    ->addMetaData('import_into_tables', array('pv'))
    ->fields('pv', array('nid', 'chid'))
    ->groupBy('nid')
    ->groupBy('chid');
  $context['select_query'] = clone $votes;
  $votes->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  $votes->addExpression('COUNT(*)', 'vote_count');
  $result = $votes->execute();

  foreach ($result as $vote) {
    $update_votes = db_update('poll_choice')
      ->fields(array(
        'chvotes' => $vote->vote_count,
      ))
      ->condition('nid', $vote->nid)
      ->condition('chid', $vote->chid)
      ->execute();
  }
}

/**
 * Having finished constructing vote statistics, run cron.
 *
 * Cron will close any polls that have expired.
 */
function vbtodrupal_poll_tally_post_import(&$context) {
  poll_cron();
}

/**
 * Import uploaded files.
 *
 * @todo: check which fields come from which tables and syntax for CONCAT statements
 *
 * Status is a flag for Drupal to show whether a file is temporary or permanent.
 * Temp files are deleted by Drupal (http://api.drupal.org/api/constant/~FILE_STATUS_PERMANENT/6).
 */
function vbtodrupal_file_managed_import(&$context) {
  $context['query_insert'] = db_insert('file_managed')
    ->fields(array('filesize', 'timestamp', 'fid', 'uid', 'filename', 'uri', 'filemime', 'status'));

  $context['query_select'] = db_select('attachment', 'a')
    ->addTag('vbtodrupal_attachment');

  $context['query_select']->addExpression('a.attachmentid+:add_to_ids', 'fid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('a.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));

  $filepath = file_default_scheme() . '://vbtodrupal/';

  // When file attachments are imported from the vB database the filename is
  // prepended with the attachmentid to prevent duplicate file names.
  $context['query_select']->addExpression("CONCAT((a.attachmentid+:add_to_ids), '_', filename)", 'filename', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("CONCAT(:filepath, (attachmentid+:add_to_ids), '_', filename)", 'uri', array(':filepath' => $filepath, ':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));

  // Hack serialised data to get the MIME type (sorry to those, including myself, who have
  // to understand this in the future). Try using MySQL Workbench/Query Browser to debug. :)
  $context['query_select']->addExpression("TRIM(LEFT(MID(mimetype, LOCATE('Content-type:', mimetype)+LENGTH('Content-type:'), LENGTH(mimetype)), LOCATE('\"',MID(mimetype, LOCATE('Content-type:', mimetype)+LENGTH('Content-type:'), LENGTH(mimetype)))-1))", 'filemime');

  // In vB 4 the data has been split out from the {attachent} table, into the
  // {filedata} table.
  if (vbimportapi_import_db_table_exists('filedata')) {
    $context['query_select']->join('filedata', 'fd', 'a.filedataid = fd.filedataid');
    $context['query_select']->join('attachmenttype', 'av', 'fd.extension = av.extension');
    $context['query_select']->fields('fd', array('filesize', 'dateline'));
  }
  else {
    $context['query_select']->join('attachmenttype', 'av', 'a.extension = av.extension');
    $context['query_select']->fields('a', array('filesize', 'dateline'));
  }

  $context['query_select']->addExpression(1, 'status');
}

/**
 * Create a file usage record to show which node/comments a file is used by.
 */
function vbtodrupal_file_usage_import(&$context) {
  $context['message'] = t('Recording file usage records.');

  $context['query_insert'] = db_insert('file_usage')
    ->fields(array('fid', 'module', 'type', 'id', 'count'));

  $context['query_select'] = db_select('attachment', 'a')
    ->addTag('vbtodrupal_attachment');

  // 'postid' column renamed to more generic 'contentid' in vB 4.
  if (vbimportapi_import_db_column_exists('contentid', 'attachment')) {
    $contentid_column = 'contentid';
  }
  else {
    $contentid_column = 'postid';
  }

  $context['query_select']->leftJoin('thread', 't', "a.$contentid_column = t.firstpostid");

  $context['query_select']->addExpression('a.attachmentid+:add_to_ids', 'fid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'file'", 'module');
  $context['query_select']->addExpression("IF(t.firstpostid IS NULL, 'comment', 'node')", 'type');
  $context['query_select']->addExpression("COALESCE(t.threadid, a.$contentid_column)+:add_to_ids", 'id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(1, 'count');
}

/**
 * Import user picture records.
 */
function vbtodrupal_file_managed_picture_import(&$context) {
  $context['message'] = t('Importing user picture records.');

  if ($context['sandbox']['progress'] == 0) {
    $context['sandbox']['use_file_avatar'] = db_select('setting', 's')
      ->fields('s', array('value'))
      ->condition('varname', 'usefileavatar')
      ->addTag('vbimport')
      ->execute()
      ->fetchField();
  }
  $use_file_avatar = $context['sandbox']['use_file_avatar'];
  $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');

  $context['query_insert'] = db_insert('file_managed')
    ->fields(array('filesize', 'timestamp', 'fid', 'uid', 'filename', 'uri', 'filemime', 'status'));

  $context['query_select'] = db_select('customavatar', 'ca');
  // Note: join only required for avatarrevision field. Speed increases could
  // be gained by carefully removing the need for that field and this join.
  $context['query_select']->join('user', 'u', 'ca.userid = u.userid');

  $context['query_select']->addField('ca', 'filesize', 'filesize');
  $context['query_select']->addField('ca', 'dateline', 'timestamp');
  $context['query_select']->addExpression('ca.userid+:pictures_add_to_ids', 'fid', array(':pictures_add_to_ids' => VBTODRUPAL_PICTURES_ADD_TO_IDS));
  $context['query_select']->addExpression('ca.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));

  if (!$use_file_avatar) {
    // When avatars are imported from the vB database the filename is prepended
    // with the userid to prevent duplicate file names.
    $context['query_select']->addExpression("CONCAT(ca.userid+:add_to_ids, '_', ca.filename)", 'filename', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
    $context['query_select']->addExpression("CONCAT(:picture_directory, '/', ca.userid+:add_to_ids, '_', ca.filename)", 'uri', array(':picture_directory' => $picture_directory, ':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
    // There's no mime information stored with avatar records, mark this for
    // fixing later.
    $context['query_select']->addExpression("'vbimportapi'", 'filemime');
  }
  else {
    // vBulletin uses completely different file names if the avatars are stored
    // on disk. It also converts the files to .gif!
    $context['query_select']->addExpression("CONCAT('avatar', ca.userid+:add_to_ids, '_', u.avatarrevision, '.gif')", 'filename', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
    $context['query_select']->addExpression("CONCAT(:picture_directory, '/avatar', ca.userid+:add_to_ids, '_', u.avatarrevision, '.gif')", 'uri', array(':picture_directory' => $picture_directory, ':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
    $context['query_select']->addExpression("'image/gif'", 'filemime');
  }

  $context['query_select']->addExpression(FILE_STATUS_PERMANENT, 'status');
}

/**
 * Create file usage records to show which user a file is used by.
 */
function vbtodrupal_file_usage_picture_import(&$context) {
  $context['message'] = t('Recording file usage records for pictures.');

  $context['query_insert'] = db_insert('file_usage')
    ->fields(array('fid', 'module', 'type', 'id', 'count'));

  $context['query_select'] = db_select('customavatar', 'ca');
  $context['query_select']->addExpression('ca.userid+:pictures_add_to_ids', 'fid', array(':pictures_add_to_ids' => VBTODRUPAL_PICTURES_ADD_TO_IDS));
  $context['query_select']->addExpression("'user'", 'module');
  $context['query_select']->addExpression("'user'", 'type');
  $context['query_select']->addExpression('ca.userid+:add_to_ids', 'id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(1, 'count');
}

/**
 * Populate file field data table.
 */
function vbtodrupal_field_data_attachment_import(&$context) {
  $context['message'] = t('Importing attachment data.');

  _vbtodrupal_file_field_import_helper('field_data_' . VBTODRUPAL_ATTACHMENT_FIELD, $context);
}

/**
 * Populate file field revisions table.
 */
function vbtodrupal_field_revision_attachment_import(&$context) {
  $context['message'] = t('Importing attachment revisions.');

  _vbtodrupal_file_field_import_helper('field_revision_' . VBTODRUPAL_ATTACHMENT_FIELD, $context);
}

/**
 * Helper to construct file field import queries for data/revision tables.
 */
function _vbtodrupal_file_field_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('delta', VBTODRUPAL_ATTACHMENT_FIELD . '_display', 'entity_type', 'bundle', 'entity_id', 'revision_id', 'language', VBTODRUPAL_ATTACHMENT_FIELD . '_fid'));

  $context['query_select'] = db_select('attachment', 'a')
    ->addTag('vbtodrupal_attachment');

  // Delta field is part of the primary key, so is required.
  $context['query_select']->addField('a', 'attachmentid', 'delta');

  // The 'visible' field has been changed into the 'state' field in vB 4.
  if (vbimportapi_import_db_column_exists('state', 'attachment')) {
    $context['query_select']->addExpression("IF(a.state = 'visible', 1, 0)", VBTODRUPAL_ATTACHMENT_FIELD . '_display');
  }
  else {
    // This could be added using addField(), but whether the data comes from
    // the state or visible field it needs to appear in the resulting query in the
    // same place; Drupal always puts fields into queries before expressions.
    $context['query_select']->addExpression('a.visible', VBTODRUPAL_ATTACHMENT_FIELD . '_display');
  }

  // 'postid' column renamed to more generic 'contentid' in vB 4.
  if (vbimportapi_import_db_column_exists('contentid', 'attachment')) {
    $contentid_column = 'contentid';
  }
  else {
    $contentid_column = 'postid';
  }

  $context['query_select']->leftJoin('thread', 't', "a.$contentid_column = t.firstpostid");
  $context['query_select']->addExpression("IF(t.firstpostid IS NULL, 'comment', 'node')", 'entity_type');
  $context['query_select']->addExpression("IF(t.firstpostid IS NULL, 'comment_node_forum', 'forum')", 'bundle');

  // The entity_id is the primary key of the entity table this field is
  // attached to. For example: nid for nodes, cid for comments.
  $context['query_select']->addExpression("COALESCE(t.threadid, a.$contentid_column)+:add_to_ids", 'entity_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("COALESCE(t.threadid, a.$contentid_column)+:add_to_ids", 'revision_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression('a.attachmentid+:add_to_ids', VBTODRUPAL_ATTACHMENT_FIELD . '_file_fid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
}

/**
 * Import attachments stored in the database.
 *
 * Handle attachments stored in the database and write them to disk.
 * Zero length files are filtered out, this means these files are not stored
 * on database but on disk.
 */
function vbtodrupal_attachments_database_import(&$context) {
  $attachment_query = db_select('attachment', 'a')
    ->addTag('vbimport')
    ->addTag('vbtodrupal_attachment');

  // Parts of {attachment} split out into {filedata} in vB 4.
  if (vbimportapi_import_db_table_exists('filedata')) {
    $attachment_query->join('filedata', 'fd', 'a.filedataid = fd.filedataid');
    $filedata_table = 'fd';
  }
  else {
    $filedata_table = 'a';
  }

  $attachment_query->addField('a', 'filename', 'filename');
  $attachment_query->addField($filedata_table, 'filedata', 'filedata');
  $attachment_query->where("OCTET_LENGTH($filedata_table.filedata) > 0");
  $attachment_query->addExpression('a.attachmentid+:add_to_ids', 'uniqueid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $attachment_query->addExpression(0, 'avatar');

  if (vbimportapi_import_db_column_exists('importattachmentid', 'attachment')) {
    $attachment_query->where('(importattachmentid = 0 OR importattachmentid = attachmentid)');
  }

  $avatar_query = db_select('customavatar', 'ca')
    ->fields('ca', array('filename', 'filedata'))
    ->addTag('vbimport');
  $avatar_query->where('OCTET_LENGTH(ca.filedata) > 0');
  $avatar_query->addExpression('IF(ca.userid = 0, 0, ca.userid + :add_to_ids)', 'uniqueid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $avatar_query->addExpression(1, 'avatar');

  if (vbimportapi_import_db_column_exists('importcustomavatarid', 'customavatar')) {
    $avatar_query->where('(ca.importcustomavatarid = 0 OR ca.importcustomavatarid = ca.userid)');
  }

  if ($context['sandbox']['max'] == 0) {
    $attachment_count = $attachment_query->countQuery()->execute()->fetchField();
    $avatar_count = $avatar_query->countQuery()->execute()->fetchField();
    $context['sandbox']['max'] = $attachment_count + $avatar_count;
  }

  // Hack due to hook_query_alter() not being called when query cast as string.
  vbimportapi_query_vbimport_alter($attachment_query);
  vbimportapi_query_vbimport_alter($avatar_query);

  // There does not seem to be a way of adding a LIMIT to a union query with
  // DBTNG (only individual queries within the union, not the whole thing).
  $sql = '(' . (string) $attachment_query . ') UNION (' . (string) $avatar_query . ')';
  $arguments = array_merge($attachment_query->getArguments(), $avatar_query->getArguments());
  $result = db_query_range($sql, $context['sandbox']['progress'], $context['sandbox']['records_per_pass'], $arguments);

  foreach ($result as $attachment) {
    if ($attachment->avatar == 0) {
      $filename = file_default_scheme() . '://';
    }
    else {
      $filename = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
    }
    // Add filename and prepend uniqueid so there are no duplicate files.
    $filename .= '/' . $attachment->uniqueid . '_' . $attachment->filename;
    file_unmanaged_save_data($attachment->filedata, $filename, FILE_EXISTS_REPLACE);
  }
}

/**
 * Import attachments stored as files.
 */
function vbtodrupal_attachments_files_import(&$context) {
  // Advise the user exactly how far through we are, otherwise it may seem
  // that the process has stalled.
  $context['message'] = t('Importing attachment files (@progress of @max).', array('@progress' => $context['sandbox']['progress'], '@max' => $context['sandbox']['max']));

  if ($context['sandbox']['progress'] == 0) {
    // Prevent disturbing '(0 of 0)' message.
    $context['message'] = t('Importing attachment files.');

    // If file attachments aren't stored on disk, return without importing.
    $attachfile = db_select('setting', 's')
      ->fields('s', array('value'))
      ->condition('varname', 'attachfile')
      ->addTag('vbimport')
      ->execute()
      ->fetchField();;

    if (!$attachfile) {
      return;
    }

    $context['sandbox']['vb_attachment_path'] = db_select('setting', 's')
      ->fields('s', array('value'))
      ->condition('varname', 'attachpath')
      ->addTag('vbimport')
      ->execute()
      ->fetchField();
  }

  $attachment_query = db_select('attachment', 'a')
    ->addTag('vbimport')
    ->addTag('vbtodrupal_attachment')
    ->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  $attachment_query->addField('a', 'userid', 'vb_userid');
  $attachment_query->addField('a', 'attachmentid', 'vb_attachmentid');
  $attachment_query->addField('a', 'filename', 'filename');
  $attachment_query->addExpression('a.attachmentid+:add_to_ids', 'uniqueid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));

  // 'hash' field should only exist if importing from vBulletin 2.x.
  if (vbimportapi_import_db_column_exists('hash', 'attachment')) {
    $attachment_query->addField('a', 'hash', 'hash');
  }

  if (vbimportapi_import_db_column_exists('importattachmentid', 'attachment')) {
    $attachment_query->where('(importattachmentid = 0 OR importattachmentid = attachmentid)');
  }

  $result = $attachment_query->execute();

  // Move into the vBulletin directory. Means it does not matter whether
  // vBulletin attachpath setting is an absolute or relative path.
  $drupal_path = $_SERVER['DOCUMENT_ROOT'];
  $vb_path = variable_get('vbtodrupal_path', vbtodrupal_default_path());
  if (is_dir($vb_path)) {
    chdir($vb_path);
  }
  $files = array();

  foreach ($result as $attachment) {
    // Get a reference to a new file array item.
    $file = &$files[];
    if (!empty($attachment->hash)) {
      // vBulletin 2.x used a hash for the filename, with a '.file' extension.
      // Forums that upgraded from 2.x do not change the names of these files.
      $file['source'] = $context['sandbox']['vb_attachment_path'] . '/' . $attachment->hash . '.file';
    }
    else {
      // For vBulletin >= 3.x which puts attachments in directories, descending
      // one level per-digit of the userid.
      //
      // Unlike vBulletin 2.x, the extension in 3.x is '.attach'.
      $uid_len = strlen($attachment->vb_userid);
      $dir_parts = array();
      for ($i = 0; $i < $uid_len; $i++) {
        $dir_parts[] = $attachment->vb_userid{$i};
      }
      $file['source'] = $context['sandbox']['vb_attachment_path'] . '/' . implode('/', $dir_parts) . '/' . $attachment->vb_attachmentid . '.attach';
    }
    $file['destination'] = drupal_realpath(file_default_scheme() . '://' . $attachment->uniqueid . '_' . $attachment->filename);
  }

  vbimportapi_multi_copy($files);

  // Reset the directory back to Drupal.
  chdir($drupal_path);
}

/**
 * Import avatars stored as files.
 */
function vbtodrupal_user_picture_files_import(&$context) {
  $context['message'] = t('Importing avatar files (@progress of @max).', array('@progress' => $context['sandbox']['progress'], '@max' => $context['sandbox']['max']));

  if ($context['sandbox']['progress'] == 0) {
    $usefileavatar = db_select('setting', 's')
      ->fields('s', array('value'))
      ->condition('varname', 'usefileavatar')
      ->addTag('vbimport')
      ->execute()
      ->fetchField();

    if (!$usefileavatar) {
      return;
    }

    // Prevent disturbing '(0 of 0)' message.
    $context['message'] = t('Importing avatar files.');
    // Check for the existence of the avatars directory.
    $context['sandbox']['vb_avatar_path'] = db_select('setting', 's')
      ->fields('s', array('value'))
      ->condition('varname', 'avatarpath')
      ->addTag('vbimport')
      ->execute()
      ->fetchField();
  }

  $picture_query = db_select('customavatar', 'ca')
    ->addTag('vbimport')
    ->fields('ca', array('filename'))
    ->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass'])
    ->condition('u.avatarrevision', 0, '>');

  $picture_query->addExpression('IF(ca.userid = 0, 0, ca.userid+:add_to_ids)', 'userid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $picture_query->join('user', 'u', 'ca.userid = u.userid');
  $picture_query->addExpression("CONCAT(:vb_avatar_path, '/avatar', ca.userid, '_', u.avatarrevision, '.gif')", 'file', array(':vb_avatar_path' => $context['sandbox']['vb_avatar_path']));
  $picture_query->where('(OCTET_LENGTH(ca.filedata) = 0 OR OCTET_LENGTH(ca.filedata) IS NULL)');

  if (vbimportapi_import_db_column_exists('importcustomavatarid', 'customavatar')) {
    $picture_query->where('(ca.importcustomavatarid = 0 OR ca.importcustomavatarid = ca.userid)');
  }

  $context['query_select'] = clone $picture_query;
  $result = $picture_query->execute();

  // Move into the vBulletin directory. Means it does not matter whether
  // vBulletin avatarpath setting is an absolute or relative path.
  $drupal_path = $_SERVER['DOCUMENT_ROOT'];
  $vb_path = variable_get('vbtodrupal_path', vbtodrupal_default_path());
  if (is_dir($vb_path)) {
    chdir($vb_path);
  }
  $files = array();

  foreach ($result as $picture) {
    // Get a reference to a new file array item.
    $file = &$files[];
    $file['source'] = $picture->file;
    $file['destination'] = drupal_realpath(file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures'). '/avatar' . $picture->userid . '_' . $picture->avatarrevision . '.gif');
  }

  vbimportapi_multi_copy($files);

  // Reset the directory back to Drupal.
  chdir($drupal_path);
}

/**
 * Truncate statistics table, preparation for rebuilding.
 *
 * @see vbtodrupal_update_statistics_import()
 */
function vbtodrupal_truncate_statistics() {
  db_truncate('node_comment_statistics')->execute();
}

/**
 * Update thread statistics.
 */
function vbtodrupal_update_statistics_import(&$context) {
  $context['message'] = t('Updating comment counts.');

  // Table definition for temporary storage of statistics.
  $table = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'last_comment_timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'last_comment_name' => array(
        'type' => 'text',
        'size' => 'small',
      ),
      'last_comment_uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'comment_count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
  );

  // Cannot use an actual temporary table here, unfortunately, because the
  // connection is changed before the post_import hook is run.
  $context['temp_table'] = 'vbtodrupal_ncs_temp';
  try {
    if (db_table_exists($context['temp_table'])) {
      db_drop_table($context['temp_table']);
    }
    db_create_table($context['temp_table'], $table);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }

  if ($context['sandbox']['max'] == 0) {
    $context['sandbox']['max'] = db_select('node', 'n')
      ->countQuery()
      ->execute()
      ->fetchField();
  }

  $temp_insert = db_insert($context['temp_table'])
    ->fields(array('nid', 'cid', 'last_comment_timestamp', 'last_comment_name', 'last_comment_uid', 'comment_count'));

  $temp_select = db_select('comment', 'c')
    ->fields('c', array('nid'))
    ->groupBy('c.nid')
    ->orderBy('c.created')
    ->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  $temp_select->addExpression('MAX(c.cid)', 'cid');
  $temp_select->addExpression('MAX(c.created)', 'last_comment_timestamp');
  $temp_select->addExpression('MAX(c.name)', 'last_comment_name');
  $temp_select->addExpression('MAX(c.uid)', 'last_comment_uid');
  $temp_select->addExpression('COUNT(c.cid)', 'comment_count');

  // @see: vbimportapi_import()
  vbimportapi_query_alter($temp_select);

  $temp_insert->from($temp_select);
  $temp_insert->execute();

  db_add_index($context['temp_table'], $context['temp_table'] . '_nid', array('nid'));

  $context['query_insert'] = db_insert('node_comment_statistics')
    ->fields(array('nid', 'cid', 'last_comment_timestamp', 'last_comment_name', 'last_comment_uid', 'comment_count'));

  $context['query_select'] = db_select('node', 'n')
    ->addMetaData('import_into_tables', array('n', 't'))
    ->fields('n', array('nid'));
  $context['query_select']->leftJoin($context['temp_table'], 't', 'n.nid = t.nid');
  $context['query_select']->addExpression('IFNULL(t.cid, 0)', 'cid');
  $context['query_select']->addExpression('IFNULL(t.last_comment_timestamp, n.created)', 'last_comment_timestamp');
  $context['query_select']->addExpression('t.last_comment_name', 'last_comment_name');
  $context['query_select']->addExpression('IFNULL(t.last_comment_uid, n.uid)', 'last_comment_uid');
  $context['query_select']->addExpression('IFNULL(t.comment_count, 0)', 'comment_count');
}

/**
 * Implements vbtodrupal_IMPORT_CALLBACK_FUNCTION_post_import()
 */
function vbtodrupal_update_statistics_post_import(&$context) {
  db_drop_table($context['temp_table']);
}

/**
 * Generic incompatible BBCode finder/fixer.
 *
 * @param $table
 *   Table the fields to be searched are in.
 * @param $key
 *   Unique key for the table, used internally to update table records.
 * @param $text_field
 *   Text field who's BBCode should be fixed.
 * @param $mysql_regex
 *   Regular expression used to search database for records to fix.
 * @param $php_regex_pattern
 *   Regular expression used in preg_replace() to search string for text
 *   to fix.
 * @param $php_regex_replace
 *   Replacement pattern used in preg_replace().
 */
function vbtodrupal_bbcode_fix($table, $key, $text_field, $mysql_regex, $php_regex_pattern, $php_regex_replace, &$context) {
  $context['message'] = t('Fixing imported BBCode.');

  // $variable is actually short for {$variable} in PHP, so if {$variable} is
  // used the {} parsed out of the string.
  $table = '{' . $table . '}';

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['max'] = db_query("SELECT MAX($key) FROM $table")->fetchField();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current'] = 0;
    $context['sandbox']['records_per_pass'] = VBIMPORTAPI_RECORDS_PER_PASS / 100;
  }

  $sql = "SELECT $key, $text_field
    FROM $table
    WHERE $text_field REGEXP '$mysql_regex'
    AND $key > :key_from AND $key <= :key_to";
  $result = db_query($sql, array(
    ':key_from' => $context['sandbox']['progress'],
    ':key_to' => $context['sandbox']['progress'] + $context['sandbox']['records_per_pass'],
  ));

  $txn = db_transaction();

  try {
    foreach ($result as $item) {
      // Shouldn't use static queries for updates, but this is unbearably slow
      // when done with dynamic queries.
      $sql = "UPDATE $table SET $text_field = :text_value
        WHERE $key = :key_value";
      db_query($sql, array(
        ':text_value' => preg_replace($php_regex_pattern, $php_regex_replace, $item->{$text_field}),
        ':key_value' => $item->{$key},
      ));
    }
  }
  catch (PDOException $e) {
    $txn->rollback();
    throw $e;
  }

  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    $context['sandbox']['progress'] += $context['sandbox']['records_per_pass'];
  }
  else {
    $context['finished'] = 1;
  }
}

/**
 * MySQL search pattern to find incompatible vB BBCode quotes.
 *
 * @return
 *   A search pattern for use with a MySQL REGEXP.
 */
function vbtodrupal_bbcode_mysql_regex_quotes() {
  return '[[.[.]][[:alnum:]]+="[^"[.].]]+"[[.].]]';
}

/**
 * MySQL search pattern to find incompatible vB BBCode post references.
 *
 * @return
 *   A search pattern for use with a MySQL REGEXP.
 */
function vbtodrupal_bbcode_mysql_regex_post_refs() {
  return '[[.[.]]QUOTE="?[^"[.].]]+;[0-9]+"?[[.].]]';
}

/**
 * Search pattern to find incompatible vB BBCode quotes.
 *
 * @return
 *   A search pattern for use with preg_replace().
 *
 * @see vbtodrupal_bbcode_php_regex_replace_quotes().
 */
function vbtodrupal_bbcode_php_regex_pattern_quotes() {
  return '#(\[\w+=)"([^"\]]+)"\]#si';
}

/**
 * Replace pattern to replace incompatible vB BBCode quotes.
 *
 * @return
 *   A replace pattern for use with preg_replace().
 *
 * @see vbtodrupal_bbcode_php_regex_pattern_quotes().
 */
function vbtodrupal_bbcode_php_regex_replace_quotes() {
  return '$1$2]';
}

/**
 * Search pattern to find incompatible vB BBCode post refs.
 *
 * @return
 *   A search pattern for use with preg_replace().
 *
 * @see vbtodrupal_bbcode_php_regex_replace_post_refs().
 */
function vbtodrupal_bbcode_php_regex_pattern_post_refs() {
  return '#(\[quote=)"?([^"\[\];]+);[0-9]+"?\]#si';
}

/**
 * Replace pattern to replace incompatible vB BBCode post refs.
 *
 * @return
 *   A replace pattern for use with preg_replace().
 *
 * @see vbtodrupal_bbcode_php_regex_pattern_post_refs().
 */
function vbtodrupal_bbcode_php_regex_replace_post_refs() {
  return '$1$2]';
}
