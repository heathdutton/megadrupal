<?php

/**
 * @file
 * Import vBulletin social groups into the Organic Groups
 * module for Drupal.
 */

/**
 * Arbitrary number to add to database id values, stops record collisions.
 *
 * Must be different to vB to Drupal ids to stop id collisions with data
 * imported by that module.
 */
define('VBTOOG_ADD_TO_IDS', 40000000);

/**
 * Arbitrary number to add to discussion id values, stops record collisions.
 *
 * Since both groups and discussions have entries in the {node} table they
 * need to be separated.
 */
define('VBTOOG_DISCUSSION_ADD_TO_IDS', 50000000);

/**
 * Implementation of hook_vbtodrupal_delete_import().
 */
function vbtoog_vbtodrupal_delete_import() {
  $txn = db_transaction();

  $group_min = variable_get('vbtoog_group_id_min', 0);
  $group_max = variable_get('vbtoog_group_id_max', 0);
  db_delete('node')
    ->condition('nid', $group_min, '>=')
    ->condition('nid', $group_max, '<=')
    ->execute();
  db_delete('node_revision')
    ->condition('nid', $group_min, '>=')
    ->condition('nid', $group_max, '<=')
    ->execute();

  // Delete group body fields.
  foreach (array('data', 'revision') as $type) {
    db_delete('field_' . $type . '_body')
      ->condition('entity_id', $group_min, '>=')
      ->condition('entity_id', $group_max, '<=')
      ->condition('bundle', 'vbtoog_group')
      ->execute();
  }

  // Delete group field tables.
  foreach (array('data', 'revision') as $type) {
    if (db_table_exists('field_' . $type . '_' . OG_GROUP_FIELD)) {
      db_delete('field_' . $type . '_' . OG_GROUP_FIELD)
        ->condition('entity_id', $group_min, '>=')
        ->condition('entity_id', $group_max, '<=')
        ->condition('bundle', 'vbtoog_group')
        ->execute();
    }
  }

  // Delete access (that is whether anyone can subscribe to a group)
  // field tables.
  foreach (array('data', 'revision') as $type) {
    if (db_table_exists('field_' . $type . '_' . OG_ACCESS_FIELD)) {
      db_delete('field_' . $type . '_' . OG_ACCESS_FIELD)
        ->condition('entity_id', $group_min, '>=')
        ->condition('entity_id', $group_max, '<=')
        ->condition('bundle', 'vbtoog_group')
        ->execute();
    }
  }

  // Group icon files.
  $file_min = variable_get('vbtoog_icon_files_id_min', 0);
  $file_max = variable_get('vbtoog_icon_files_id_max', 0);

  foreach (array('data', 'revision') as $type) {
    if (db_table_exists('field_' . $type . '_vbtoog_group_icon')) {
      db_delete('field_' . $type . '_vbtoog_group_icon')
        ->condition('vbtoog_group_icon_fid', $file_min, '>=')
        ->condition('vbtoog_group_icon_fid', $file_max, '<=')
        ->condition('bundle', 'vbtoog_group')
        ->execute();
    }
  }

  foreach (array('file_managed', 'file_usage') as $table) {
    db_delete($table)
      ->condition('fid', $file_min, '>=')
      ->condition('fid', $file_max, '<=')
      ->execute();
  }

  // Delete discussions.
  $discussion_min = variable_get('vbtoog_discussion_id_min', 0);
  $discussion_max = variable_get('vbtoog_discussion_id_max', 0);
  db_delete('node')
    ->condition('nid', $discussion_min, '>=')
    ->condition('nid', $discussion_max, '<=')
    ->execute();
  db_delete('node_revision')
    ->condition('nid', $discussion_min, '>=')
    ->condition('nid', $discussion_max, '<=')
    ->execute();

  // Delete discussion body fields.
  foreach (array('data', 'revision') as $type) {
    db_delete('field_' . $type . '_body')
      ->condition('entity_id', $discussion_min, '>=')
      ->condition('entity_id', $discussion_max, '<=')
      ->condition('bundle', 'vbtoog_group_discussion')
      ->execute();
  }

  $comments_min = variable_get('vbtoog_comment_id_min', 0);
  $comments_max = variable_get('vbtoog_comment_id_max', 0);
  db_delete('comment')
    ->condition('cid', $comments_min, '>=')
    ->condition('cid', $comments_max, '<=')
    ->execute();

  // Delete comment body fields.
  foreach (array('data', 'revision') as $type) {
    db_delete('field_' . $type . '_comment_body')
      ->condition('entity_id', $comments_min, '>=')
      ->condition('entity_id', $comments_max, '<=')
      ->execute();
  }

  // Delete discussion group memberships.
  db_delete('og_membership')
    ->condition('etid', $discussion_min, '>=')
    ->condition('etid', $discussion_max, '<=')
    ->condition('gid', $group_min, '>=')
    ->condition('gid', $group_max, '<=')
    ->condition('entity_type', 'node')
    ->execute();

  // Delete user memberships.
  db_delete('og_membership')
    ->condition('gid', $group_min, '>=')
    ->condition('gid', $group_max, '<=')
    ->condition('entity_type', 'user')
    ->execute();

  foreach (_vbtoog_installed_instances() as $instance) {
    if (field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_delete_instance($instance['field_name']);
    }
  }

  foreach (_vbtoog_installed_fields() as $field) {
    if (field_info_field($field['field_name'])) {
      field_delete_field($field['field_name']);
    }
  }

  // Delete node types.
  foreach (array('vbtoog_group', 'vbtoog_group_discussion') as $node_type) {
    node_type_delete($node_type);
    node_types_rebuild();
    menu_rebuild();
  }

  drupal_cron_run();
}

/**
 * Implementation of hook_vbtodrupal_batch_alter().
 */
function vbtoog_vbtodrupal_operations() {
  return array(
    array('vbimportapi_import', array('node_types')),
    array('vbimportapi_import', array('group_node')),
    array('vbimportapi_import', array('group_node_revision')),
    array('vbimportapi_import', array('group_field_data_body')),
    array('vbimportapi_import', array('group_field_revision_body')),
    array('vbimportapi_import', array('field_data_group_group')),
    array('vbimportapi_import', array('field_revision_group_group')),
    array('vbimportapi_import', array('field_data_group_access')),
    array('vbimportapi_import', array('field_revision_group_access')),
    array('vbimportapi_import', array('field_data_vbtoog_group_icon')),
    array('vbimportapi_import', array('field_revision_vbtoog_group_icon')),
    array('vbimportapi_import', array('group_icon_file_managed')),
    array('vbimportapi_import', array('group_icon_file_usage')),
    array('vbimportapi_import', array('group_icon_files')),
    array('vbimportapi_mime_types_repair', array(t('Determining file types of imported group icons.'))),
    array('vbimportapi_import', array('discussion_node')),
    array('vbimportapi_import', array('discussion_node_revision')),
    array('vbimportapi_import', array('discussion_field_data_body')),
    array('vbimportapi_import', array('discussion_field_revision_body')),
    array('vbimportapi_import', array('discussion_comment')),
    array('vbimportapi_import', array('discussion_field_data_comment_body')),
    array('vbimportapi_import', array('discussion_field_revision_comment_body')),
    array('vbimportapi_import', array('discussion_comment_first_posts_delete')),
    array('vbimportapi_import', array('discussion_og_membership')),
    array('vbimportapi_import', array('user_og_membership')),
  );
}

/**
 * Implementation of hook_vbtodrupal_user_tables().
 */
function vbtoog_vbtodrupal_user_tables() {
  return array(
    'node' => array(
      'update fields' => array('uid')
    ),
    'node_revision' => array(
      'update fields' => array('uid'),
    ),
    'file_managed' => array(
      'update fields' => array('uid'),
    ),
    'comment' => array(
      'update fields' => array('uid'),
    ),
    'og_membership' => array(
      'update fields' => array('etid'),
      'condition' => db_and()->condition('entity_type', 'user'),
    ),
  );
}

/**
 * Returns a structured array defining fields created for Organic Groups.
 *
 * This is factored into this function so it can be used in both
 * vbtoog_node_types_import() vbtoog_vbimportapi_delete() and elsewhere.
 */
function _vbtoog_installed_fields() {
  return array(
    'vbtoog_group_icon' => array(
      'field_name' => 'vbtoog_group_icon',
      'type' => 'image',
    ),
  );
}

/**
 * Returns a structured array defining field instances created for vB to OG.
 *
 * This is factored into this function so it can be used in both
 * vbtoog_node_types_import() and vbtoog_vbimportapi_delete().
 */
function _vbtoog_installed_instances() {
  return array(
    'vbtoog_group_icon_node' => array(
      'field_name' => 'vbtoog_group_icon',
      'entity_type' => 'node',
      'bundle' => 'vbtoog_group',
      'label' => t('Group icon'),
      'widget' => array(
        'type' => 'image_image',
      ),
    ),
  );
}

/**
 * Create content type for organic group nodes.
 */
function vbtoog_node_types_import(&$context) {
  $context['message'] = t('Creating content types.');

  $group = new stdClass();
  $group->type = 'vbtoog_group';
  $group->name = t('Social group');
  $group->base = 'node_content';
  $group->description = t('A <em>Social group</em> is a group of people who have something in common.');
  $group->custom = 1;
  variable_set('og_group_type_' . $group->type, 'group');
  node_type_save($group);
  node_add_body_field($group, t('Social group description'));

  // Set comments off for the group node.
  variable_set('comment_vbtoog_group', COMMENT_NODE_HIDDEN);

  // Create organic groups access field, this is how OG knows which groups are
  // open to new members or whether new members must be approved first.
  //
  // Normally this would be done manually, by the user.
  og_create_field(OG_ACCESS_FIELD, 'node', 'vbtoog_group');

  $discussion = new stdClass();
  $discussion->type = 'vbtoog_group_discussion';
  $discussion->name = t('Social group discussion');
  $discussion->base = 'node_content';
  $discussion->description = t('A <em>Social group discussion</em> takes place within a <em>Social group</em>.');
  $discussion->custom = 1;
  variable_set('og_group_content_type_' . $discussion->type, 'og_content');
  variable_set('target_type_' . $discussion->type, 'node');
  variable_set('target_bundles_' . $discussion->type, array($group->type));
  node_type_save($discussion);
  node_add_body_field($discussion);

  // Set comments on for the group discussion node.
  variable_set('comment_vbtoog_group_discussion', COMMENT_NODE_OPEN);

  foreach (_vbtoog_installed_fields() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  foreach (_vbtoog_installed_instances() as $instance) {
    if (!field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }
}

/**
 * Import social groups into Drupal.
 *
 * Organic group selective state is taken from a combination of vBulletin
 * 'option' and 'type' fields (in the {{socialgroup}} table).
 *
 * The Organic groups field is 'og_selective', the possible values are:
 *   - 0, open group;
 *   - 1, moderated group, people can join but will have to be approved;
 *   - 2, invite only;
 *   - 3, closed;
 *
 * For vBulletin, the 'options' field has the following possible values:
 *   - 1, Set all new social group messages to moderated (think this is set
 *     globally for all social groups, see 'Social Group Options' in admincp);
 *   - 2, user must join before viewing the group;
 *   - 4, allow posting messages (nodes);
 *   - 8, allow posting photo albums;
 *   - 16, only the group owner can post discussions (?), this doesn't seem to
 *     be implemented;
 * while the 'type' field has the following possible values:
 *   - 'public', any user may view and join the group;
 *   - 'inviteonly', only users who've been invited may join the group;
 *   - 'moderated', users may join but have to wait for a moderator to
 *     approve them.
 *
 * @todo: update above documentation for Drupal 7.
 */

/**
 * Create nodes that represent Organic Groups.
 */
function vbtoog_group_node_import(&$context) {
  $context['message'] = t('Importing social groups (part two).');

  if ($context['sandbox']['progress'] == 0) {
    // The first group id, plus the number added to imported ids, is the
    // minimum insert id of imported blog entries. This is saved so the entries
    // in {og}, {node}, {og_membership} etc. may be deleted later.
    $result = db_select('socialgroup', 'sg')
      ->addTag('vbimport');
    $result->addExpression('MIN(sg.groupid)+:add_to_ids', 'min', array(':add_to_ids' =>  VBTOOG_ADD_TO_IDS));
    $result->addExpression('MAX(sg.groupid)+:add_to_ids', 'max', array(':add_to_ids' =>  VBTOOG_ADD_TO_IDS));
    $group_bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoog_group_id_min', $group_bounds['min']);
    variable_set('vbtoog_group_id_max', $group_bounds['max']);
  }

  // Get the node type defaults.
  $node = new stdClass();
  $node->type = 'vbtoog_group';
  node_object_prepare($node);
 
  $context['query_insert'] = db_insert('node')
    ->fields(array('created', 'changed', 'nid', 'vid', 'type', 'language', 'title', 'uid', 'status', 'comment', 'promote', 'sticky'));

  $context['query_select'] = db_select('socialgroup', 'sg')
    ->fields('sg', array('dateline', 'dateline'));

  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'vid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression(':node_type', 'type', array(':node_type' => $node->type));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(sg.name, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  // sg.creatoruserid is actually the current owner. Transferring ownership
  // of a group changes this value.
  $context['query_select']->addExpression('sg.creatoruserid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(':published', 'status', array(':published' => NODE_PUBLISHED));
  $context['query_select']->addExpression(':comment_node_hidden', 'comment', array(':comment_node_hidden' => COMMENT_NODE_HIDDEN));
  $context['query_select']->addExpression(':promote', 'promote', array(':promote' => $node->promote));
  $context['query_select']->addExpression(':sticky', 'sticky', array(':sticky' => $node->sticky));
}

/**
 * Create group node revisions.
 */
function vbtoog_group_node_revision_import(&$context) {
  $context['message'] = t('Importing social groups (part three).');

  // Get the node type defaults.
  $node = new stdClass();
  $node->type = 'vbtoog_group';
  node_object_prepare($node);

  $context['query_insert'] = db_insert('node_revision')
    ->fields(array('timestamp', 'nid', 'vid', 'uid', 'title', 'log', 'comment', 'promote', 'sticky'));

  $context['query_select'] = db_select('socialgroup', 'sg')
    ->fields('sg', array('dateline'));

  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'vid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('sg.creatoruserid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(sg.name, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression("''", 'log');
  $context['query_select']->addExpression(':comment', 'comment', array(':comment' => $node->comment));
  $context['query_select']->addExpression(':promote', 'promote', array(':promote' => $node->promote));
  $context['query_select']->addExpression(':sticky', 'sticky', array(':sticky' => $node->sticky));
}

/**
 * Import group node body field.
*/
function vbtoog_group_field_data_body_import(&$context) {
  $context['message'] = t('Importing group descriptions.');

  _vbtoog_group_field_body_import_helper('field_data_body', $context);
}

/**
* Import group node body field revisions.
*/
function vbtoog_group_field_revision_body_import(&$context) {
  $context['message'] = t('Importing group description revisions.');

  _vbtoog_group_field_body_import_helper('field_revision_body', $context);
}

/**
* Helper to construct node body field data/revision import queries.
*/
function _vbtoog_group_field_body_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
  ->fields(array('body_value', 'entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta'));

  $context['query_select'] = db_select('socialgroup', 'sg');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(sg.description, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')");
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'vbtoog_group'", 'bundle');
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
}

/**
 * Import field data that tell OG which nodes are groups.
 */
function vbtoog_field_data_group_group_import(&$context) {
  $context['message'] = t('Importing field data that determines group nodes.');

  _vbtoog_field_group_group_import_helper('field_data_' . OG_GROUP_FIELD, $context);
}

/**
 * Import field revisions that tell OG which nodes are groups.
 */
function vbtoog_field_revision_group_group_import(&$context) {
  $context['message'] = t('Importing field revisions that determines group nodes.');

  _vbtoog_field_group_group_import_helper('field_revision_' . OG_GROUP_FIELD, $context);
}

/**
 * Helper to construct queries for field that determines which group nodes.
 */
function _vbtoog_field_group_group_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta', OG_GROUP_FIELD . '_value'));

  $context['query_select'] = db_select('socialgroup', 'sg');
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'vbtoog_group'", 'bundle');
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');

  // Got that group_group_value should be 1 from og_og_fields_info().
  $context['query_select']->addExpression(':is_a_group', OG_GROUP_FIELD . '_value', array(':is_a_group' => 1));
}

/**
 * Import group visibility field data.
 *
 * 'Group visibility' in Organic Groups appears to determine whether users may
 * join the group without moderation, anyone can see that a private
 * group exists.
 */
function vbtoog_field_data_group_access_import(&$context) {
  $context['message'] = t('Importing group visibility setting data.');

  _vbtoog_field_group_access_import_helper('field_data_' . OG_ACCESS_FIELD, $context);
}

/**
 * Import group visibility field revisions.
 */
function vbtoog_field_revision_group_access_import(&$context) {
  $context['message'] = t('Importing group visibility setting revisions.');

  _vbtoog_field_group_access_import_helper('field_revision_' . OG_ACCESS_FIELD, $context);
}

/**
 * Helper to construct group access field import queries.
 */
function _vbtoog_field_group_access_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta', 'group_access_value'));

  $context['query_select'] = db_select('socialgroup', 'sg');

  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'vbtoog_group'", 'bundle');
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('sg.groupid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');

  // According to the Organic Groups Access module: 0 => Public, 1=> Private.
  $context['query_select']->addExpression("IF(sg.type = 'moderated', 1, 0)", OG_ACCESS_FIELD . '_value');
}

/**
 * Create group icon image field data.
 */
function vbtoog_field_data_vbtoog_group_icon_import(&$context) {
  $context['message'] = t('Importing group icons (part one).');

  _vbtoog_field_vbtoog_group_icon_import_helper('field_data_vbtoog_group_icon', $context);
}

/**
 * Create group icon image field revisions.
 */
function vbtoog_field_revision_vbtoog_group_icon_import(&$context) {
  $context['message'] = t('Importing group icons (part two).');

  _vbtoog_field_vbtoog_group_icon_import_helper('field_revision_vbtoog_group_icon', $context);
}

/**
 * Helper that constructs social group icon field data/revision import queries.
 */
function _vbtoog_field_vbtoog_group_icon_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta', 'vbtoog_group_icon_fid', 'vbtoog_group_icon_alt'));

  $context['query_select'] = db_select('socialgroupicon', 'sgi');
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'vbtoog_group'", 'bundle');
  $context['query_select']->addExpression('sgi.groupid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('sgi.groupid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
  $context['query_select']->addExpression('sgi.groupid+:add_to_ids', 'vbtoog_group_icon_fid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression(':alt_text', 'vbtoog_group_icon_alt', array(':alt_text' => t('Group icon')));
}

/**
 * Create group icon {file_managed} records.
 */
function vbtoog_group_icon_file_managed_import(&$context) {
  $context['message'] = t('Importing group icons (part three).');

  if ($context['sandbox']['progress'] == 0) {
    $result = db_select('socialgroupicon', 'sgi')
      ->addTag('vbimport');
    $result->addExpression('MIN(sgi.groupid)+:add_to_ids', 'min', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
    $result->addExpression('MAX(sgi.groupid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
    $file_bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoog_icon_files_id_min', $file_bounds['min']);
    variable_set('vbtoog_icon_files_id_max', $file_bounds['max']);
  }

  $context['query_insert'] = db_insert('file_managed')
    ->fields(array('timestamp', 'uid', 'fid', 'filename', 'uri', 'filemime', 'filesize', 'status'));

  $filepath = file_default_scheme() . '://';

  $context['query_select'] = db_select('socialgroupicon', 'sgi')
    ->fields('sgi', array('dateline'));
  $context['query_select']->addExpression('sgi.userid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('sgi.groupid+:add_to_ids', 'fid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("CONCAT((sgi.groupid+:add_to_ids), '_groupicon', '.', sgi.extension)", 'filename', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("CONCAT(:filepath, (groupid+:add_to_ids), '_groupicon', '.', sgi.extension)", 'uri', array(':filepath' => $filepath, ':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'vbimportapi'", 'filemime');
  $context['query_select']->addExpression('OCTET_LENGTH(sgi.filedata)', 'filesize');
  $context['query_select']->addExpression('1', 'status');
}

/**
 * Create group icon {file_usage} records.
 */
function vbtoog_group_icon_file_usage_import(&$context) {
  $context['message'] = t('Importing group icons (part four).');

  $context['query_insert'] = db_insert('file_usage')
    ->fields(array('fid', 'module', 'type', 'id', 'count'));

  $context['query_select'] = db_select('socialgroupicon', 'sgi');
  $context['query_select']->addExpression('sgi.groupid+:add_to_ids', 'fid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'file'", 'module');
  $context['query_select']->addExpression("'node'", 'type');
  $context['query_select']->addExpression('sgi.groupid+:add_to_ids', 'id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression(1, 'count');
}

/**
 * Save icon files to disk, in Drupal's filesystem.
 */
function vbtoog_group_icon_files_import(&$context) {
  $context['message'] = t('Importing group icons (part five).');

  $filepath = file_default_scheme() . '://';

  $result = db_select('socialgroupicon', 'sg')
    ->fields('sg', array('filedata'));

  $result->where('OCTET_LENGTH(sg.filedata) > 0');
  $result->addExpression('sg.groupid+:add_to_ids', 'uniqueid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $result->addExpression("CONCAT((sg.groupid+:add_to_ids), '_groupicon', '.', extension)", 'filename', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));

  $context['query_select'] = clone $result;

  $result->addTag('vbimport');
  $result->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);

  $icons = $result->execute();

  foreach ($icons as $icon) {
    file_save_data($icon->filedata, $filepath . $icon->filename, FILE_EXISTS_REPLACE);
  }
}

/**
 * Create discussion nodes.
 */
function vbtoog_discussion_node_import(&$context) {
  $context['message'] = t('Importing social group discussions (part one).');

  if ($context['sandbox']['progress'] == 0) {
    $result = db_select('discussion', 'd')
      ->addtag('vbimport');
    $result->addExpression('MIN(discussionid)+:add_to_ids', 'min', array(':add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
    $result->addExpression('MAX(discussionid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
    $discussion_bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoog_discussion_id_min', $discussion_bounds['min']);
    variable_set('vbtoog_discussion_id_max', $discussion_bounds['max']);
  }

  // Get the node type defaults.
  $node = new stdClass();
  $node->type = 'vbtoog_group_discussion';
  node_object_prepare($node);

  $context['query_insert'] = db_insert('node')
    ->fields(array('created', 'changed', 'nid', 'vid', 'type', 'language', 'title', 'uid', 'status', 'comment', 'promote', 'sticky'));

  $context['query_select'] = db_select('discussion', 'd')
    ->fields('gm', array('dateline', 'dateline'));

  $context['query_select']->join('groupmessage', 'gm', 'd.firstpostid = gm.gmid');
  $context['query_select']->addExpression('d.discussionid+:discussion_add_to_ids', 'nid', array(':discussion_add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression('d.discussionid+:discussion_add_to_ids', 'vid', array(':discussion_add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression(':type', 'type', array(':type' => $node->type));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(gm.title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression('gm.postuserid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("IF(gm.state=:gm_visible, :node_published, :node_not_published)", 'status', array(':gm_visible' => 'visible', ':node_published' => NODE_PUBLISHED, ':node_not_published' => NODE_NOT_PUBLISHED));
  $context['query_select']->addExpression(':comment', 'comment', array(':comment' => $node->comment));
  $context['query_select']->addExpression(':promote', 'promote', array(':promote' => $node->promote));
  $context['query_select']->addExpression(':sticky', 'sticky', array(':sticky' => $node->sticky));
}

/**
 * Create node revisions for Organic Group discussions.
 */
function vbtoog_discussion_node_revision_import(&$context) {
  $context['message'] = t('Importing social group discussions (part two).');

  // Get the node type defaults.
  $node = new stdClass();
  $node->type = 'vbtoog_group_discussion';
  node_object_prepare($node);

  $context['query_insert'] = db_insert('node_revision')
    ->fields(array('timestamp', 'comment', 'nid', 'vid', 'uid', 'title', 'log', 'promote', 'sticky'));

  $context['query_select'] = db_select('discussion', 'd')
    ->fields('gm', array('dateline'));

  $context['query_select']->join('groupmessage', 'gm', 'd.firstpostid = gm.gmid');
  $context['query_select']->addExpression(':comment', 'comment', array(':comment' => $node->comment));
  $context['query_select']->addExpression('d.discussionid+:discussion_add_to_ids', 'nid', array(':discussion_add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression('d.discussionid+:discussion_add_to_ids', 'vid', array(':discussion_add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression('gm.postuserid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(gm.title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression("''", 'log');
  $context['query_select']->addExpression(':promote', 'promote', array(':promote' => $node->promote));
  $context['query_select']->addExpression(':sticky', 'sticky', array(':sticky' => $node->sticky));
}

/**
 * Import group node body field.
*/
function vbtoog_discussion_field_data_body_import(&$context) {
  $context['message'] = t('Importing discussion thread first post body field data.');

  _vbtoog_discussion_field_body_import_helper('field_data_body', $context);
}

/**
* Import group node body field revisions.
*/
function vbtoog_discussion_field_revision_body_import(&$context) {
  $context['message'] = t('Importing discussion thread first post body field revisions.');

  _vbtoog_discussion_field_body_import_helper('field_revision_body', $context);
}

/**
* Helper to construct node body field data/revision import queries.
*/
function _vbtoog_discussion_field_body_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('body_value', 'entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta'));

  $context['query_select'] = db_select('discussion', 'd');

  $context['query_select']->join('groupmessage', 'gm', 'd.firstpostid = gm.gmid');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(gm.pagetext, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'body_value');
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'vbtoog_group_discussion'", 'bundle');
  $context['query_select']->addExpression('d.discussionid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression('d.discussionid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
}

/**
 * Create Organic Group discussion comments.
 */
function vbtoog_discussion_comment_import(&$context) {
  $context['message'] = t('Importing social group discussions (part three).');

  if ($context['sandbox']['progress'] == 0) {
    $result = db_select('groupmessage', 'gm')
      ->addtag('vbimport');
    $result->addExpression('MIN(gmid)+:add_to_ids', 'min', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
    $result->addExpression('MAX(gmid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
    $comment_bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoog_comment_id_min', $comment_bounds['min']);
    variable_set('vbtoog_comment_id_max', $comment_bounds['max']);
  }

  $context['query_insert'] = db_insert('comment')
    ->fields(array('created', 'changed', 'name', 'mail', 'cid', 'pid', 'nid', 'uid', 'subject', 'hostname', 'status', 'thread'));

  $context['query_select'] = db_select('groupmessage', 'gm')
    ->fields('gm', array('dateline', 'dateline'))
    ->fields('u', array('username', 'email'));

  $context['query_select']->join('user', 'u', 'gm.postuserid = u.userid');
  $context['query_select']->addExpression('gm.gmid+:add_to_ids', 'cid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('0', 'pid');
  $context['query_select']->addExpression('gm.discussionid+:discussion_add_to_ids', 'nid', array(':discussion_add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression('gm.postuserid+:importapi_add_to_ids', 'uid', array(':importapi_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $subject_length = vbimportapi_target_db_column_length('subject', 'comment');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(gm.title FROM 1 FOR $subject_length), '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'subject');
  $context['query_select']->addExpression("''", 'hostname');
  $context['query_select']->addExpression("IF(gm.state='visible', :comment_published, :comment_not_published)", 'status', array(':comment_published' => COMMENT_PUBLISHED, ':comment_not_published' => COMMENT_NOT_PUBLISHED));
  $context['query_select']->addExpression("''", 'thread');
}

/**
 * Import comment body field.
 */
function vbtoog_discussion_field_data_comment_body_import(&$context) {
  $context['message'] = t('Importing discussion post body fields.');

  _vbtoog_discussion_field_comment_body_import_helper('field_data_comment_body', $context);
}

/**
 * Import comment body revisions.
 */
function vbtoog_discussion_field_revision_comment_body_import(&$context) {
  $context['message'] = t('Importing discussion post body field revisions.');

  _vbtoog_discussion_field_comment_body_import_helper('field_revision_comment_body', $context);
}

/**
 * Helper to construct comment body field data/revision import query.
 */
function _vbtoog_discussion_field_comment_body_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta', 'comment_body_value'));

  $context['query_select'] = db_select('groupmessage', 'gm');
  $context['query_select']->addExpression("'comment'", 'entity_type');
  $context['query_select']->addExpression("'vbtoog_group_discussion'", 'bundle');
  $context['query_select']->addExpression('gm.gmid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression('gm.gmid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(gm.pagetext, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'comment_body_value');
  // comment_body_format intentionally left out for now, could put the
  // the result of filter_fallback_format() in here, but forum posts
  // in plaintext are useless. Can't use the default format, either.
}

/**
 * Delete first post comments, since they are nodes in Drupal.
 *
 * @see vbtoog_discussion_comment_first_posts_delete_post_import()
 */
function vbtoog_discussion_comment_first_posts_delete_import(&$context) {
  $table = array(
    'fields' => array(
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
  );

  // Cannot use an actual temporary table here, unfortunately, because the
  // connection is changed before the post_import hook is run.
  $context['temp_table'] = 'vbtoog_first_posts_delete_temp';
  try {
    if (db_table_exists($context['temp_table'])) {
      db_drop_table($context['temp_table']);
    }
    db_create_table($context['temp_table'], $table);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }

  $query_thread = db_select('discussion', 'd')
    ->condition('d.firstpostid', 0, '>')
    ->addTag('vbimport');
  $query_thread->addExpression('d.firstpostid+:add_to_ids', 'cid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select'] = clone $query_thread;

  // Hack due to hook_query_alter() not being called when query cast as string.
  vbimportapi_query_vbimport_alter($query_thread);

  $query_thread->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  db_insert($context['temp_table'])
    ->fields(array('cid'))
    ->from($query_thread)
    ->execute();
}

/**
 * Actually delete first posts, main import function does the preparation.
 *
 * It is not possible to use text-based queries in the main import function
 * as the tables would not be prefixed. Only dynamic queries will work.
 *
 * @see vbimportapi_db_setup()
 * @see vbtoog_discussion_comment_first_posts_delete_import()
 */
function vbtoog_discussion_comment_first_posts_delete_post_import(&$context) {
  try {
    // Cheeky, because the DB API does not allow joins in delete queries
    // and subqueries, while being portable, are intolerably slow.
    $sql = "DELETE FROM c USING {comment} AS c, {$context['temp_table']} AS t
      WHERE c.cid = t.cid";
    db_query($sql);
    db_drop_table($context['temp_table']);
  }
  catch (Exception $e) {
    // If something bad happens, try to delete the temporary table before
    // re-throwing the error.
    @db_drop_table($context['temp_table']);
    throw $e;
  }
}

/**
 * Add discussions to their groups (a third table of duplicate data?).
 */
function vbtoog_discussion_og_membership_import(&$context) {
  $context['message'] = t('Importing social group discussions (part seven).');

  $context['query_insert'] = db_insert('og_membership')
    ->fields(array('type', 'etid', 'entity_type', 'gid', 'state', 'created', 'group_type', 'field_name'));

  $context['query_select'] = db_select('discussion', 'd');

  $context['query_select']->join('groupmessage', 'gm', 'd.firstpostid = gm.gmid');
  $context['query_select']->addExpression(':membership_type', 'type', array(':membership_type' => OG_MEMBERSHIP_TYPE_DEFAULT));
  $context['query_select']->addExpression('d.discussionid+:discussion_add_to_ids', 'etid', array(':discussion_add_to_ids' => VBTOOG_DISCUSSION_ADD_TO_IDS));
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression('d.groupid+:add_to_ids', 'gid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression(':state', 'state', array(':state' => OG_STATE_ACTIVE));
  $context['query_select']->addExpression('gm.dateline', 'created');
  $context['query_select']->addExpression("'node'", 'group_type');
  $context['query_select']->addExpression(':og_audience_field', 'field_name', array(':og_audience_field' => OG_AUDIENCE_FIELD));
}

/**
 * Add users to their groups (third table).
 */
function vbtoog_user_og_membership_import(&$context) {
  $context['message'] = t('Importing social group user subscriptions (part three).');

  if ($context['sandbox']['progress'] == 0) {
    $result = db_select('socialgroupmember', 'sgm')
      ->addTag('vbimport');
    $result->addExpression('MIN(sgm.userid)+:add_to_ids', 'min', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
    $result->addExpression('MAX(sgm.userid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
    $user_group_bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoog_users_id_min', $user_group_bounds['min']);
    variable_set('vbtoog_users_id_max', $user_group_bounds['max']);
  }

  $context['query_insert'] = db_insert('og_membership')
    ->fields(array('type', 'etid', 'entity_type', 'gid', 'state', 'created', 'group_type', 'field_name'));

  $context['query_select'] = db_select('socialgroupmember', 'sgm');

  $context['query_select']->addExpression(':membership_type', 'name', array(':membership_type' => OG_MEMBERSHIP_TYPE_DEFAULT));
  $context['query_select']->addExpression('sgm.userid+:import_add_to_ids', 'etid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'user'", 'entity_type');
  $context['query_select']->addExpression('sgm.groupid+:add_to_ids', 'gid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $context['query_select']->addExpression("IF(sgm.type = 'member', :og_state_active, IF(sgm.type = 'moderated', :og_state_pending, :og_state_active))", 'state', array(':og_state_active' => OG_STATE_ACTIVE, ':og_state_pending' => OG_STATE_PENDING));
  $context['query_select']->addExpression('sgm.dateline', 'created');
  $context['query_select']->addExpression("'node'", 'group_type');
  $context['query_select']->addExpression(':og_audience_field', 'field_name', array(':og_audience_field' => OG_AUDIENCE_FIELD));

  // Doesn't seem to be an equivalent to the vBulletin 'invited' state (which
  // means a user has been asked to join a group, but has not accepted).
  $context['query_select']->condition('sgm.type', 'invited', '!=');
}
