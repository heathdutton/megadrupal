<?php

/**
 * @file
 * Imports vBulletin private messages into the Privatemsg module.
 */
function vbtoprivatemsg_vbtodrupal_delete_import() {
  db_delete('pm_message')
    ->condition('mid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();
  db_delete('pm_index')
    ->condition('mid', VBIMPORTAPI_ADD_TO_IDS, '>')
    ->execute();
  if (module_exists('privatemsg_filter')) {
    db_delete('pm_tags')
      ->condition('tag_id', VBIMPORTAPI_ADD_TO_IDS, '>')
      ->execute();
    db_delete('pm_tags_index')
      ->condition('tag_id', VBIMPORTAPI_ADD_TO_IDS, '>')
      ->execute();
  }
}

/**
 * Implementation of hook_vbtodrupal_operations().
 */
function vbtoprivatemsg_vbtodrupal_operations() {
  return array(
    array('vbimportapi_import', array('pm')),
    array('vbimportapi_import', array('pm_receiver')),
    array('vbimportapi_import', array('pm_sender')),
    array('vbimportapi_import', array('pm_tags')),
  );
}

/**
 * Implementation of hook_vbtodrupal_user_tables().
 */
function vbtoprivatemsg_vbtodrupal_user_tables() {
  $return = array(
    'pm_index' => array(
      'update fields' => array('recipient'),
    ),
    'pm_message' => array(
      'update fields' => array('author'),
    ),
  );

  if (module_exists('privatemsg_filter')) {
    $return['pm_tags_index'] = array(
      'update fields' => array('uid'),
    );
  }

  return $return;
}

/**
 * Convert vBulletin private messages to Drupal private messages.
 * Import main PM table
 */
function vbtoprivatemsg_pm_import(&$context) {
  $context['query_insert'] = db_insert('pm_message')
    ->fields(array('body', 'timestamp', 'mid', 'author', 'subject'));

  $context['query_select'] = db_select('pm', 'pm');

  $context['query_select']->join('pmtext', 'pt', 'pm.pmtextid = pt.pmtextid');
  $context['query_select']->fields('pt', array('message', 'dateline'));
  $context['query_select']->addExpression('pm.pmid+:add_to_ids', 'mid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(pt.fromuserid=0, 0, pt.fromuserid+:add_to_ids)', 'author', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(pt.title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'subject');
}

/**
 * PM Index table again, INSERT into this twice, firstly for the receiver,
 * then for the sender.
 */
function vbtoprivatemsg_pm_receiver_import(&$context) {
  $context['query_insert'] = db_insert('pm_index')
    ->fields(array('mid', 'thread_id', 'recipient', 'is_new', 'deleted'));

  $context['query_select'] = db_select('pm', 'pm');

  $context['query_select']->condition('pm.folderid', -1, '>');
  $context['query_select']->addExpression('pm.pmid+:add_to_ids', 'mid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('pm.pmid+:add_to_ids', 'thread_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(pm.userid=0, 0, pm.userid+:add_to_ids)', 'recipient', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(pm.messageread<>0, 0, 1)', 'is_new');
  $context['query_select']->addExpression(0, 'deleted');
}

/**
 * PM Index table again, INSERT into this twice, firstly for the receiver,
 * then for the sender.
 */
function vbtoprivatemsg_pm_sender_import(&$context) {
  $context['query_insert'] = db_insert('pm_index')
    ->fields(array('mid', 'thread_id', 'recipient', 'is_new', 'deleted'));

  $context['query_select'] = db_select('pm', 'pm');

  $context['query_select']->join('pmtext', 'pt', 'pm.pmtextid = pt.pmtextid');
  $context['query_select']->condition('pm.folderid', -1, '>');
  $context['query_select']->where('pt.fromuserid <> pm.userid');
  $context['query_select']->addExpression('pm.pmid+:add_to_ids', 'mid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('pm.pmid+:add_to_ids', 'thread_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('IF(pt.fromuserid=0, 0, pt.fromuserid+:add_to_ids)', 'recipient', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(0, 'is_new');
  $context['query_select']->addExpression(0, 'deleted');
}

/**
 * Import vB message folders.
 */
function vbtoprivatemsg_pm_tags_import(&$context) {
  // This function requires the privatemsg_filter module
  // (used for tagging messages, equivalent to folders in vBulletin PMs).
  if (!module_exists('privatemsg_filter')) {
    return;
  }

  if ($context['sandbox']['progress'] == 0) {
    $max_id_query = db_select('pm_tags', 'pmt');

    $max_id_query->addExpression('MAX(pmt.tag_id)', 'tag_id');
    $context['sandbox']['tag_max'] = $max_id_query->execute()->fetchField();
  }

  // PM Folders: all the folders are stored in usertextfield in a serialised array.
  $folder_query = db_select('usertextfield', 'ut');

  $folder_query->addExpression('IF(ut.userid=0, 0, ut.userid+:add_to_ids)', 'userid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $folder_query->addExpression('ut.userid', 'vb_userid');
  $folder_query->addField('ut', 'pmfolders', 'pmfolders');    
  $folder_query->where("pmfolders <> ''");

  $context['query_select'] = clone $folder_query;

  $folder_query->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  $folder_query->addTag('vbimport');

  $result = $folder_query->execute();

  $pm_tags_insert = db_insert('pm_tags')
    ->fields(array('tag_id', 'tag')); 

  $pm_tags_index_insert = db_insert('pm_tags_index')
    ->fields(array('tag_id', 'uid', 'thread_id'));  

  // Go through the results of the query from vBulletin; need to get the folders
  // array into the pm_tags table, and connect them to a thread_id for the 
  // pm_tags_index table.
  foreach ($result as $user_folders) {
    $folders = unserialize($user_folders->pmfolders);

    // $folder_query only contains the pmfolders and the uid; need to connect to
    // the pm table to match folders to messages; the array index  
    // (e.g. 1, 2 etc.) matches to the folderid field in the pm table.

    foreach ($folders as $folder_key => $folder) { 

      if (empty($folder)) {
        continue;
      }

      $pm_tags_insert->values(array(
        'tag_id' =>  ++$context['sandbox']['tag_max'],
        'tag' => $folder, 
      ));

      // get record where uid = uid and folderid = $folder_key
      $pm_id_query = db_select('pm', 'pm')
        ->condition('pm.userid', $user_folders->vb_userid)
        ->condition('pm.folderid', $folder_key)
        ->addTag('vbimport');

      $pm_id_query->addExpression('pm.pmid+:add_to_ids', 'thread_id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
      $result = $pm_id_query->execute();

      foreach ($result as $pm_id) {
        $pm_tags_index_insert -> values(array(
          'tag_id' => $context['sandbox']['tag_max'],
          'uid' =>  $user_folders->userid, 
          'thread_id' => $pm_id->thread_id,
        ));
      }
    }
  }

  $pm_tags_insert->execute();
  $pm_tags_index_insert->execute();
}
