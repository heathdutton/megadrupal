<?php

/**
 * @file
 * Import vBulletin blogs into Drupal's multi-user blog module.
 */

/**
 * Number that's added to vBulletin blog description records to make
 * them unique.
 */
define('VBTOBLOG_DESCRIPTION_ADD_TO_IDS', 20000000);

/**
 * Number that's added to vBulletin blog records to make them unique.
 */
define('VBTOBLOG_ADD_TO_IDS', 30000000);

/**
 * Name of main category taxonomy to import into.
 */
define('VBTOBLOG_CATEGORIES_VOCABULARY', 'blog_categories');

/**
 * Implementation of hook_vbtodrupal_delete_import().
 */
function vbtoblog_vbtodrupal_delete_import() {
  $blog_description_min = variable_get('vbtoblog_description_id_min', 0);
  $blog_description_max = variable_get('vbtoblog_description_id_max', 0);

  db_delete('node')
    ->condition('nid', $blog_description_min, '>=')
    ->condition('nid', $blog_description_max, '<=')
    ->execute();

  db_delete('node_revision')
    ->condition('nid', $blog_description_min, '>=')
    ->condition('nid', $blog_description_max, '<=')
    ->execute();

  $blog_post_min = variable_get('vbtoblog_post_id_min', 0);
  $blog_post_max = variable_get('vbtoblog_post_id_max', 0);
  db_delete('node')
    ->condition('nid', $blog_post_min, '>=')
    ->condition('nid', $blog_post_max, '<=')
    ->execute();

  db_delete('node_revision')
    ->condition('nid', $blog_post_min, '>=')
    ->condition('nid', $blog_post_max, '<=')
    ->execute();

  $blog_vocabulary = variable_get('vbtodrupal_blog_vocabulary', 0);
  db_delete('taxonomy_index')
    ->where('tid IN (SELECT tid FROM {taxonomy_term_data} WHERE vid = :blog_vocabulary)', array(':blog_vocabulary' => $blog_vocabulary))
    ->execute();
  
  db_delete('taxonomy_term_hierarchy')
    ->where('tid IN (SELECT tid FROM {taxonomy_term_data} WHERE vid = :blog_vocabulary)', array(':blog_vocabulary' => $blog_vocabulary))
    ->execute();

  db_delete('taxonomy_vocabulary')
    ->condition('vid', $blog_vocabulary)
    ->execute();

  $blog_comments_min = variable_get('vbtoblog_comments_id_min', 0);
  $blog_comments_max = variable_get('vbtoblog_comments_id_max', 0);

  db_delete('comment')
    ->condition('cid', $blog_comments_min, '>=')
    ->condition('cid', $blog_comments_max, '<=')
    ->execute();
  
  // Delete node body, comment and taxonomy fields.
  $tables = array();
  $tables[] = 'field_data_body';
  $tables[] = 'field_revision_body';
  foreach ($tables as $table) {
    db_delete($table)
      ->condition(db_or()
        ->condition(db_and()
          ->condition('entity_id', $blog_post_min, '>=')
          ->condition('entity_id', $blog_post_max, '<=')
        )
        ->condition(db_and()
          ->condition('entity_id', $blog_description_min, '>=')
          ->condition('entity_id', $blog_description_max, '<=')
        )
      )
      ->execute();
  }

  $tables = array();
  $tables[] = 'field_data_comment_body';
  $tables[] = 'field_revision_comment_body';
  foreach ($tables as $table) {
    db_delete($table)
      ->condition('entity_id', $blog_comments_min, '>=')
      ->condition('entity_id', $blog_comments_max, '<=')
      ->execute();
  }

  if (!empty($blog_vocabulary)) {
    $field = 'taxonomy_' . VBTOBLOG_CATEGORIES_VOCABULARY . '_tid';
    $tables = array();
    $tables[] = 'field_data_taxonomy_' . VBTOBLOG_CATEGORIES_VOCABULARY;
    $tables[] = 'field_revision_taxonomy_' . VBTOBLOG_CATEGORIES_VOCABULARY;

    foreach ($tables as $table) {
      db_delete($table)
        ->where('tid IN (SELECT tid FROM {taxonomy_term_data} WHERE vid = :blog_vocabulary)', array(':blog_vocabulary' => $blog_vocabulary))
        ->execute();
    }
  }

  // Cannot delete {taxonomy_term_data} until it's finished with.
  db_delete('taxonomy_term_data')
    ->condition('vid', $blog_vocabulary)
    ->execute();

  foreach (_vbtoblog_installed_instances() as $instance) {
    if (field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_delete_instance($instance['field_name']);
    }
  }

  foreach (_vbtoblog_installed_fields() as $field) {
    if (field_info_field($field['field_name'])) {
      field_delete_field($field['field_name']);
    }
  }

}

/**
 * Implementation of hook_vbtodrupal_operations().
 */
function vbtoblog_vbtodrupal_operations() {
  return array(
    array('vbimportapi_import', array('blog_info_nodes')),
    array('vbimportapi_import', array('blog_info_node_revision')),
    array('vbimportapi_import', array('blog_info_field_data_body')),
    array('vbimportapi_import', array('blog_info_field_revision_body')),
    array('vbimportapi_import', array('blog_post_nodes')),
    array('vbimportapi_import', array('blog_post_node_revision')),
    array('vbimportapi_import', array('blog_post_field_data_body')),
    array('vbimportapi_import', array('blog_post_field_revision_body')),
    array('vbimportapi_import', array('blog_comments')),
		array('vbimportapi_import', array('comment_field_data_comment_body')),
		array('vbimportapi_import', array('comment_field_revision_comment_body')),
		array('vbimportapi_import', array('blog_comments_first_posts_delete')),
    array('vbimportapi_import', array('blog_taxonomy_vocabulary')),
    array('vbimportapi_import', array('blog_categories_terms')),
    array('vbimportapi_import', array('blog_categories_taxonomy_index')),
    array('vbtoblog_blog_categories_merge_import', array(variable_get('vbtodrupal_blog_vocabulary', 0), NULL, 'taxonomy_blog', 'blog')),
    array('vbimportapi_import', array('blog_categories_hierarchy')),
    array('vbimportapi_import', array('category_field')),
    array('vbimportapi_import', array('file_managed')),
    array('vbimportapi_import', array('file_usage')),
    array('vbimportapi_import', array('file_save')),
    array('vbimportapi_mime_types_repair', array()),
  );
}

/**
 * Import blog information as a sticky node for each blog user that has one.
 */
function vbtoblog_blog_info_nodes_import(&$context) {
  $context['message'] = t('Importing blogs (part one of twelve).');
  if ($context['sandbox']['progress'] == 0) {
		$result = db_select('blog_user', 'bu')
      ->addTag('vbimport');
    $result->addExpression('MIN(bu.bloguserid)+:add_to_ids', 'min', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
    $result->addExpression('MAX(bu.bloguserid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
   
	 $bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoblog_description_id_min', $bounds['min']);
    variable_set('vbtoblog_description_id_max', $bounds['max']);   
  }

  $context['query_insert'] = db_insert('node')
    ->fields(array('nid', 'vid', 'type', 'language', 'title', 'uid', 'status', 'created', 'changed', 'comment', 'sticky'));

  $context['query_select'] = db_select('blog_user', 'bu')
    ->condition(db_and()->condition('bu.title', '', '<>')->condition('bu.description', '', '<>'));
  $context['query_select']->addExpression('bu.bloguserid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
  $context['query_select']->addExpression('bu.bloguserid+:add_to_ids', 'vid', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
  $context['query_select']->addExpression("'blog'", 'type');
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression('bu.bloguserid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression('1', 'status');
  $context['query_select']->addExpression(':request_time', 'created', array(':request_time' => REQUEST_TIME));
  $context['query_select']->addExpression(':request_time', 'changed', array(':request_time' => REQUEST_TIME));
  $context['query_select']->addExpression(':comment_node_closed', 'comment', array(':comment_node_closed' => COMMENT_NODE_CLOSED));
  $context['query_select']->addExpression('1', 'sticky');
}

/**
 * Import blog information revisions
 */
function vbtoblog_blog_info_node_revision_import(&$context) {
  $context['message'] = t('Importing blogs (part two of twelve).');
  if ($context['sandbox']['progress'] == 0) {
		$result = db_select('blog_user', 'bu')
      ->addTag('vbimport');
    $result->addExpression('MAX(bu.bloguserid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
   
	 $bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoblog_description_id_max', $bounds['max']);   
  }

  $context['query_insert'] = db_insert('node_revision')
    ->fields(array('nid', 'vid', 'uid', 'title', 'log', 'timestamp', 'status', 'comment', 'promote', 'sticky'));

  $context['query_select'] = db_select('blog_user', 'bu')
    ->condition(db_and()->condition('bu.title', '', '<>')->condition('bu.description', '', '<>'));
  $context['query_select']->addExpression('bu.bloguserid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
  $context['query_select']->addExpression('bu.bloguserid+:add_to_ids', 'vid', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
  $context['query_select']->addExpression('bu.bloguserid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(bu.title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression("''", 'log');
  $context['query_select']->addExpression(':request_time', 'timestamp', array(':request_time' => REQUEST_TIME));
  $context['query_select']->addExpression('1', 'status');
  $context['query_select']->addExpression(':comment_node_closed', 'comment', array(':comment_node_closed' => COMMENT_NODE_CLOSED));
  $context['query_select']->addExpression('1', 'promote');
  $context['query_select']->addExpression('1', 'sticky');
}

/**
 * Import blog information body field.
 */
function vbtoblog_blog_info_field_data_body_import(&$context) {
  $context['message'] = t('Importing first blog post body fields.');

  _vbtoblog_blog_info_field_body_import_helper('field_data_body', $context);
}

/**
 * Import blog information body field revisions.
 */
function vbtoblog_blog_info_field_revision_body_import(&$context) {
  $context['message'] = t('Importing first blog post body field revisions.');

  _vbtoblog_blog_info_field_body_import_helper('field_revision_body', $context);
}

/**
 * Helper to construct blog information field data/revision import queries.
 */
function _vbtoblog_blog_info_field_body_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('body_value', 'entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta'));

  $context['query_select'] = db_select('blog_user', 'bu');

  $context['query_select']->addField('bu', 'description', 'body_value'); // the description >> does this need the REPLACE(REPLACE(REPLACE bit?
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'blog'", 'bundle');
  $context['query_select']->addExpression('bu.bloguserid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
  $context['query_select']->addExpression('bu.bloguserid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOBLOG_DESCRIPTION_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
}

/**
 * Import blog posts.
 */
function vbtoblog_blog_post_nodes_import(&$context) {
  $context['message'] = t('Importing blogs (part three of twelve).');
  if ($context['sandbox']['progress'] == 0) {
		$result = db_select('blog', 'b')
      ->addTag('vbimport');
    $result->addExpression('MIN(b.blogid)+:add_to_ids', 'min', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
    $result->addExpression('MAX(b.blogid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
   
	 $bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoblog_post_id_min', $bounds['min']);
    variable_set('vbtoblog_post_id_max', $bounds['max']);   
  }

  // Get the node type defaults.
  $node = new stdClass();
  $node->type = 'blog';
  node_object_prepare($node);

  $context['query_insert'] = db_insert('node')
    ->fields(array('created', 'changed', 'nid', 'vid', 'type', 'language', 'title', 'uid', 'status', 'comment', 'sticky'));

  $context['query_select'] = db_select('blog', 'b')
    ->fields('b', array('dateline', 'dateline'));

  $context['query_select']->addExpression('b.blogid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('b.blogid+:add_to_ids', 'vid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'blog'", 'type');
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression('b.userid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("IF(state='visible', 1, 0)", 'status');
  $context['query_select']->addExpression('IF(options & 4, :comments_open, :comments_closed)', 'comment', array(':comments_open' => COMMENT_NODE_OPEN, ':comments_closed' => COMMENT_NODE_CLOSED));
  $context['query_select']->addExpression(':sticky', 'sticky', array(':sticky' => $node->sticky));
}

/**
 * Import blog post revisions
 */
function vbtoblog_blog_post_node_revision_import(&$context) {
  $context['message'] = t('Importing blogs (part four of twelve).');
  if ($context['sandbox']['progress'] == 0) {
		$result = db_select('blog', 'b')
      ->addTag('vbimport');
    $result->addExpression('MAX(b.blogid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
   
	 $bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoblog_post_id_max', $bounds['max']);   
  }

  $context['query_insert'] = db_insert('node_revision')
    ->fields(array('nid', 'vid', 'uid', 'title', 'log', 'timestamp', 'status', 'comment', 'promote', 'sticky'));

  $context['query_select'] = db_select('blog', 'b');

  $context['query_select']->join('blog_text', 'bt', 'b.firstblogtextid = bt.blogtextid');
  $context['query_select']->addExpression('b.blogid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('b.blogid+:add_to_ids', 'vid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('b.userid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(b.title, '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'title');
  $context['query_select']->addExpression("''", 'log');
  $context['query_select']->addExpression(':request_time', 'timestamp', array(':request_time' => REQUEST_TIME));
  $context['query_select']->addExpression('1', 'status');
	$context['query_select']->addExpression('IF(options & 4, :comments_open, :comments_closed)', 'comment', array(':comments_open' => COMMENT_NODE_OPEN, ':comments_closed' => COMMENT_NODE_CLOSED));
  $context['query_select']->addExpression('1', 'promote');
  $context['query_select']->addExpression('1', 'sticky');  // should this use the same $sticky function as in the previous function?
}

/**
 * Import blog body field.
 */
function vbtoblog_blog_post_field_data_body_import(&$context) {
  $context['message'] = t('Importing first blog post body fields.');

  _vbtoblog_blog_post_field_body_import_helper('field_data_body', $context);
}

/**
 * Import blog body field revisions.
 */
function vbtoblog_blog_post_field_revision_body_import(&$context) {
  $context['message'] = t('Importing first blog post body field revisions.');

  _vbtoblog_blog_post_field_body_import_helper('field_revision_body', $context);
}

/**
 * Helper to construct blog body field data/revision import queries.
 */

function _vbtoblog_blog_post_field_body_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('body_value', 'entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta'));

  $context['query_select'] = db_select('blog_text', 'bt');

  $context['query_select']->addField('bt', 'pagetext', 'body_value'); // the description >> does this need the REPLACE(REPLACE(REPLACE bit?
  $context['query_select']->addExpression("'node'", 'entity_type');
  $context['query_select']->addExpression("'blog'", 'bundle');

	// what field should be used for the add_to_id's (blogtextid?) >> should be same as what was added to the nid. entity_id = nid
  $context['query_select']->addExpression('bt.blogtextid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('bt.blogtextid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
}

/**
 * Import blog post comments.
 */
function vbtoblog_blog_comments_import(&$context) {
  $context['message'] = t('Importing blogs (part five of twelve).');
  if ($context['sandbox']['progress'] == 0) {
		$result = db_select('blog_text', 'bt')
      ->addTag('vbimport');
    $result->addExpression('MIN(bt.blogtextid)+:add_to_ids', 'min', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
    $result->addExpression('MAX(bt.blogtextid)+:add_to_ids', 'max', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
   
	 $bounds = $result->execute()->fetchAssoc();
    variable_set('vbtoblog_comments_id_min', $bounds['min']);
    variable_set('vbtoblog_comments_id_max', $bounds['max']);   
  }

  $context['query_insert'] = db_insert('comment')
    ->fields(array('created', 'changed', 'name', 'mail', 'cid', 'pid', 'nid', 'uid', 'subject', 'hostname', 'status', 'thread', 'language'));

  $context['query_select'] = db_select('blog_text', 'bt')
    ->fields('bt', array('dateline', 'dateline', 'username'));

  $context['query_select']->join('user', 'u', 'bt.userid = u.userid');
  $context['query_select']->addField('u', 'email', 'mail');
  $context['query_select']->addExpression('bt.blogtextid+:add_to_ids', 'cid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('0', 'pid');
  $context['query_select']->addExpression('bt.blogid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('bt.userid+:import_add_to_ids', 'uid', array(':import_add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $subject_length = vbimportapi_target_db_column_length('subject', 'comment');
	$context['query_select']->addExpression("REPLACE(REPLACE(REPLACE(REPLACE(SUBSTRING(bt.title FROM 1 FOR $subject_length), '&amp;', '&'), '&quot;', '\"'), '&lt;', '<'), '&gt;', '>')", 'subject');
  $context['query_select']->addExpression("''", 'hostname');
  $context['query_select']->addExpression("IF(bt.state='visible', :comment_published, :comment_not_published)", 'status', array(':comment_published' => COMMENT_PUBLISHED, ':comment_not_published' => COMMENT_NOT_PUBLISHED));
	$context['query_select']->addExpression("''", 'thread');
  $context['query_select']->addExpression("'und'", 'language');
}

/**
 * Import comment body field.
 */
function vbtoblog_comment_field_data_comment_body_import(&$context) {
  $context['message'] = t('Importing first blog comment body fields.');

  _vbtoblog_comment_field_comment_body_import_helper('field_data_comment_body', $context);
}

/**
 * Import comment body field revisions.
 */
function vbtoblog_comment_field_revision_comment_body_import(&$context) {
  $context['message'] = t('Importing first blog comment body field revisions.');

  _vbtoblog_comment_field_comment_body_import_helper('field_revision_comment_body', $context);
}

/**
 * Helper to construct comment body field data/revision import queries.
 */
function _vbtoblog_comment_field_comment_body_import_helper($table, &$context) {
  $context['query_insert'] = db_insert($table)
    ->fields(array('comment_body_value', 'entity_type', 'bundle', 'entity_id', 'revision_id', 'language', 'delta'));

  $context['query_select'] = db_select('blog_text', 'bt');

  $context['query_select']->addField('bt', 'pagetext', 'comment_body_value');
  $context['query_select']->addExpression("'comment'", 'entity_type');
  $context['query_select']->addExpression("'comment_node_blog'", 'bundle');

  $context['query_select']->addExpression('bt.blogtextid+:add_to_ids', 'entity_id', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('bt.blogtextid+:add_to_ids', 'revision_id', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression("'und'", 'language');
  $context['query_select']->addExpression(0, 'delta');
  // comment_body_format left out for now; see vbtodrupal line 1826
}

/**
 * Delete first post comments, since they are nodes in Drupal.
 */
function vbtoblog_blog_comments_first_posts_delete_import(&$context) {
  $context['message'] = t('Importing blogs (part six of twelve).');

  $table = array(
    'fields' => array(
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
  );

  // Cannot use an actual temporary table here, unfortunately, because the
  // connection is changed before the post_import hook is run.
  $context['temp_table'] = 'vbtodrupal_first_posts_delete_temp';
  try {
    if (db_table_exists($context['temp_table'])) {
      db_drop_table($context['temp_table']);
    }
    db_create_table($context['temp_table'], $table);
  }
  catch (Exception $e) {
    @db_drop_table($context['temp_table']);
    throw $e;
  }

  $query_thread = db_select('blog', 'b')
    ->condition('b.firstblogtextid', 0, '>')
    ->addTag('vbimport');
  $query_thread->addExpression('b.firstblogtextid+:add_to_ids', 'cid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select'] = clone $query_thread;

  // Hack due to hook_query_alter() not being called when query cast as string.
  vbimportapi_query_vbimport_alter($query_thread);

  $query_thread->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);
  db_insert($context['temp_table'])
    ->fields(array('cid'))
    ->from($query_thread)
    ->execute();
}

/**
 * Actually delete first posts, main import function does the preparation.
 *
 * It is not possible to use text-based queries in the main import function
 * as the tables would not be prefixed. Only dynamic queries will work.
 *
 * @see vbimportapi_db_setup()
 * @see vbtodrupal_first_posts_delete_import()
 */
function vbtoblog_first_posts_delete_post_import(&$context) {
  try {
    // Cheeky, because the DB API does not allow joins in delete queries
    // and subqueries, while being portable, are intolerably slow.
    $sql = "DELETE FROM c USING {comment} AS c, {$context['temp_table']} AS t
      WHERE c.cid = t.cid";
    db_query($sql);
    db_drop_table($context['temp_table']);
  }
  catch (Exception $e) {
    // If something bad happens, try to delete the temporary table before
    // re-throwing the error.
    @db_drop_table($context['temp_table']);
    throw $e;
  }
}


/**
 * Create a taxonomy vocabulary for blogs.
 */
function vbtoblog_blog_taxonomy_vocabulary_import(&$context) {
  $context['message'] = t('Creating blog vocabulary.');
  $blog_vocabulary = taxonomy_vocabulary_machine_name_load(VBTOBLOG_CATEGORIES_VOCABULARY);

  if (empty($blog_vocabulary)) {
  
    $edit = array(
      'name' => t('Blog categories'),
      'machine_name' => VBTOBLOG_CATEGORIES_VOCABULARY,
      'hierarchy' => 1,
      'module' => 'taxonomy',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
  }
}

/**
 * Import blog categories as free tagging taxonomy terms.
 *
 * In vBulletin these were more traditional 'categories', but per-user. Since
 * Drupal does not have a facility for per-user categories, put the vBulletin
 * categories into a free-tagging taxonomy, so users aren't shown a list of
 * all terms created by everyone.
 */
function vbtoblog_blog_categories_terms_import(&$context) {
  $context['message'] = t('Importing blogs (part six of twelve).');

  $vocabulary = taxonomy_vocabulary_machine_name_load(VBTOBLOG_CATEGORIES_VOCABULARY);
  $context['query_insert'] = db_insert('taxonomy_term_data')
    ->fields(array('name', 'weight', 'tid', 'vid'));

  $context['query_select'] = db_select('blog_category', 'bc')
    ->fields('bc', array('title', 'displayorder'));

  $context['query_select']->addExpression('bc.blogcategoryid+:add_to_ids', 'tid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression(':vid', 'vid', array(':vid' => $vocabulary->vid));
}

/**
 * Import category/blog post index records.
 */
function vbtoblog_blog_categories_taxonomy_index_import(&$context) {
  $context['message'] = t('Importing blogs (part seven of twelve).');

  $context['query_insert'] = db_insert('taxonomy_index')
    ->fields(array('nid', 'tid', 'sticky', 'created'));

  // Get the node type's default settings.
  $node = new stdClass();
  $node->type = 'blog';
  node_object_prepare($node);

  $context['query_select'] = db_select('blog_categoryuser', 'bcu');
  $context['query_select']->join('blog_text', 'bt', 'bcu.blogid = bt.blogid');
  $context['query_select']->addExpression('bcu.blogid+:add_to_ids', 'nid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('bcu.blogcategoryid+:add_to_ids', 'tid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression($node->sticky, 'sticky');
  $context['query_select']->addExpression('bt.dateline', 'created');
}

/**
 * Merge duplicate, previously imported, taxonomy terms (blogs).
 */
function vbtoblog_blog_categories_merge_import($vid, $records_per_pass, $field_name, $node_type, &$context) {
  $context['message'] = t('Importing blogs (part eight of twelve).');
  $vocabulary = taxonomy_vocabulary_machine_name_load(VBTOBLOG_CATEGORIES_VOCABULARY);
  vbimportapi_taxonomy_merge_duplicates($vocabulary->vid, ceil(VBIMPORTAPI_RECORDS_PER_PASS / 100), VBTOBLOG_CATEGORIES_VOCABULARY, 'blog', $context);
  
}

/**
 * Blog category hierarchy import.
 */
function vbtoblog_blog_categories_hierarchy_import(&$context) {
  $context['message'] = t('Importing blogs (part nine of twelve).');
  $vocabulary = taxonomy_vocabulary_machine_name_load(VBTOBLOG_CATEGORIES_VOCABULARY);

  $context['query_insert'] = db_insert('taxonomy_term_hierarchy')
    ->fields(array('tid', 'parent'));

  $context['query_select'] = db_select('taxonomy_term_data', 'td')
    ->addMetaData('import_into_tables', array('td'))
    ->condition('vid', $vocabulary->vid)
    ->fields('td', array('tid'));

  $context['query_select']->addExpression(0, 'parent');
}

/**
 * Returns a structured array defining fields created for VB to Blogs.
 *
 * This is factored into this function so it can be used in both
 * vbtoblog_field_add(), vbtoblog_vbimportapi_delete() and elsewhere.
 */
function _vbtoblog_installed_fields() {
  return array(
    'taxonomy_' . VBTOBLOG_CATEGORIES_VOCABULARY => array(
      'field_name' => 'taxonomy_' . VBTOBLOG_CATEGORIES_VOCABULARY,
      'type' => 'taxonomy_term_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          'vocabulary' => VBTOBLOG_CATEGORIES_VOCABULARY,
          'parent' => 0,
        ),
      ),
    ),
  );
}

/**
 * Returns a structured array defining field instances created for vB to Drupal.
 *
 * This is factored into this function so it can be used in both
 * pptodrupal_field_add() and pptodrupal_vbimportapi_delete().
 */
function _vbtoblog_installed_instances() {
  return array(
    'taxonomy_' . VBTOBLOG_CATEGORIES_VOCABULARY . '_node' => array(
      'field_name' => 'taxonomy_' . VBTOBLOG_CATEGORIES_VOCABULARY,
      'entity_type' => 'node',
      'bundle' => 'blog',
      'label' => t('Blog categories'),
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
      ),
    ),
  );
}

/**
 * Add categories field to blog content type
 */

function vbtoblog_category_field_import(&$context) {
  $context['message'] = t('Importing blogs (part ten of twelve)');
  // Install field(s) and field instance(s).
  foreach (_vbtoblog_installed_fields() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  foreach (_vbtoblog_installed_instances() as $instance) {
    if (!field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }
}

/**
 * Blog file import.
 */
function vbtoblog_file_managed_import(&$context) {
  $context['message'] = t('Importing blogs (part ten of twelve).');

  $context['query_insert'] = db_insert('file_managed')
    ->fields(array('filesize', 'timestamp', 'fid', 'uid', 'filename', 'uri', 'filemime', 'status'));

  $context['query_select'] = db_select('blog_attachment', 'ba')
    ->fields('ba', array('filesize', 'dateline'));

  $context['query_select']->join('attachmenttype', 'av', 'ba.extension = av.extension');
  $context['query_select']->addExpression('ba.attachmentid+:add_to_ids', 'fid', array(':add_to_ids' => VBTOBLOG_ADD_TO_IDS));
  $context['query_select']->addExpression('ba.userid+:add_to_ids', 'uid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));

  $filepath = file_default_scheme() . '://vbtodrupal/';

  // When file attachments are imported from the vB database the filename is
  // prepended with the attachmentid to prevent duplicate file names.
  $context['query_select']->addExpression("CONCAT((ba.attachmentid+:add_to_ids), '_', filename)", 'filename', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("CONCAT(:filepath, (attachmentid+:add_to_ids), '_', filename)", 'uri', array(':filepath' => $filepath, ':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  // Hack serialised data to get the MIME type (sorry to those, including myself, who have
  // to understand this in the future). Try using MySQL Workbench/Query Browser to debug. :)
  $context['query_select']->addExpression("TRIM(LEFT(MID(mimetype, LOCATE('Content-type:', mimetype)+LENGTH('Content-type:'), LENGTH(mimetype)), LOCATE('\"',MID(mimetype, LOCATE('Content-type:', mimetype)+LENGTH('Content-type:'), LENGTH(mimetype)))-1))", 'filemime');

  $context['query_select']->addExpression(1, 'status');
}

/**
 * Blog file upload table population.
 */
function vbtoblog_file_usage_import(&$context) {
  $context['message'] = t('Importing blogs (part eleven of twelve).');

  $context['query_insert'] = db_insert('file_usage')
    ->fields(array('fid', 'module', 'type', 'id', 'count'));

  $context['query_select'] = db_select('blog_attachment', 'ba');

  //$context['query_select']->leftJoin('thread', 't', 'ba.blogid = t.firstpostid');

  $context['query_select']->addExpression('ba.attachmentid+:add_to_ids', 'fid', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression("'file'", 'module');
  $context['query_select']->addExpression("'node'", 'type'); // not sure if comments can have attachments, and, if so, how I would find that out.
  $context['query_select']->addExpression('ba.blogid+:add_to_ids', 'id', array(':add_to_ids' => VBIMPORTAPI_ADD_TO_IDS));
  $context['query_select']->addExpression(1, 'count');
}

/**
 * Blog file uploads, saving the file itself.
 */
function vbtoblog_file_save_import(&$context) {
  $context['message'] = t('Importing blogs (part twelve of twelve).');

  $filepath = file_default_scheme() . '://';

  $result = db_select('blog_attachment', 'ba')
    ->fields('ba', array('filedata'));

  $result->where('OCTET_LENGTH(ba.filedata) > 0');
  $result->addExpression('ba.blogid+:add_to_ids', 'uniqueid', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));
  $result->addExpression("CONCAT((ba.blogid+:add_to_ids), '_attachment', '.', extension)", 'filename', array(':add_to_ids' => VBTOOG_ADD_TO_IDS));

  $context['query_select'] = clone $result;

  $result->addTag('vbimport');
  $result->range($context['sandbox']['progress'], $context['sandbox']['records_per_pass']);

  $files = $result->execute();

  foreach ($files as $file) {
    file_save_data($file->filedata, $filepath . $file->filename, FILE_EXISTS_REPLACE);
  }
}
