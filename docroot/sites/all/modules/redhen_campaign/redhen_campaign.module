<?php

/**
 * @file
 * Redhen Campaigns main module
 */

define('REDHEN_CAMPAIGN_GOAL_FIELD', 'redhen_campaign_goal');
define('REDHEN_CAMPAIGN_DONATION_FIELD', 'redhen_campaign_donation_type');
define('REDHEN_CAMPAIGN_PAGE_INDIVIDUAL', 1);
define('REDHEN_CAMPAIGN_PAGE_TEAM', 2);

module_load_include('inc', 'redhen_campaign', 'includes/redhen_campaign.forms');
module_load_include('inc', 'redhen_campaign', 'includes/redhen_campaign.field_formatters');

/**
 * Implements hook_entity_info().
 */
function redhen_campaign_entity_info() {
  return array(
    'redhen_campaign' => array(
      'label' => t('RedHen Campaign'),
      'plural label' => t('RedHen Campaigns'),
      'controller class' => 'RedhenCampaignEntityController',
      'rules controller class' => 'EntityDefaultRulesController',
      'metadata controller class' => 'RedhenCampaignMetadataController',
      'entity class' => 'RedhenCampaign',
      'base table' => 'redhen_campaign',
      'fieldable' => TRUE,
      'metatags' => TRUE,
      'entity keys' => array(
        'id' => 'campaign_id',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full Campaign'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),
      'uri callback' => 'entity_class_uri',
      'token type' => 'redhen_campaign',
      'module' => 'redhen_campaign',
      'label callback' => 'entity_class_label',
      'access callback' => 'redhen_campaign_access',
    ),
    'redhen_campaign_type' => array(
      'label' => t('Campaign type'),
      'entity class' => 'RedhenCampaignType',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'redhen_campaign_type',
      'fieldable' => FALSE,
      'bundle of' => 'redhen_campaign',
      'exportable' => TRUE,
      'token type' => 'redhen_campaign_type',
      'entity keys' => array(
        'id' => 'campaign_type_id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'redhen_campaign_type_access',
      'module' => 'redhen_campaign',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/redhen/campaign_types',
        'file' => 'redhen_campaign_type.admin.inc',
        'file path' => drupal_get_path('module', 'redhen_campaign') . '/includes',
        'controller class' => 'RedhenCampaignTypeUIController',
      ),
    ),
    'redhen_campaign_page' => array(
      'label' => t('RedHen Campaign Page'),
      'plural label' => t('RedHen Campaign Pages'),
      'controller class' => 'RedhenCampaignPageEntityController',
      'rules controller class' => 'EntityDefaultRulesController',
      'metadata controller class' => 'RedhenCampaignPageMetadataController',
      'entity class' => 'RedhenCampaignPage',
      'base table' => 'redhen_campaign_page',
      'fieldable' => TRUE,
      'metatags' => TRUE,
      'entity keys' => array(
        'id' => 'page_id',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),
      'uri callback' => 'entity_class_uri',
      'token type' => 'redhen_campaign_page',
      'module' => 'redhen_campaign',
      'label callback' => 'entity_class_label',
      'access callback' => 'redhen_campaign_page_access',
    ),
    'redhen_campaign_page_type' => array(
      'label' => t('Campaign Page type'),
      'entity class' => 'RedhenCampaignPageType',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'redhen_campaign_page_type',
      'fieldable' => FALSE,
      'bundle of' => 'redhen_campaign_page',
      'exportable' => TRUE,
      'token type' => 'redhen_campaign_page_type',
      'entity keys' => array(
        'id' => 'campaign_page_type_id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'redhen_campaign_page_type_access',
      'module' => 'redhen_campaign',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/redhen/page_types',
        'file' => 'redhen_campaign_page_type.admin.inc',
        'file path' => drupal_get_path('module', 'redhen_campaign') . '/includes',
        'controller class' => 'EntityDefaultUIController',
      ),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the campaign types via a hook to avoid a
 * recursion issue as loading the model types requires the entity info as well.
 */
function redhen_campaign_entity_info_alter(&$entity_info) {
  // We're testing to ensure the schema exists; needed because running gui
  // install profile was hitting this BEFORE the schema was installed.
  if (drupal_get_schema('redhen_campaign')) {
    foreach (redhen_campaign_get_types() as $type => $info) {
      $entity_info['redhen_campaign']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/redhen/campaign_types/manage/%redhen_campaign_type',
          'real path' => 'admin/structure/redhen/campaign_types/manage/' . $type,
          'bundle argument' => 5,
          'access arguments' => array('administer redhen_campaign types'),
        ),
      );
    }
  }
  if (drupal_get_schema('redhen_campaign_page')) {
    foreach (redhen_campaign_page_get_types() as $type => $info) {
      $entity_info['redhen_campaign_page']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/redhen/page_types/manage/%redhen_campaign_page_type',
          'real path' => 'admin/structure/redhen/page_types/manage/' . $type,
          'bundle argument' => 5,
          'access arguments' => array('administer redhen_campaign_page types'),
        ),
      );
    }
  }
  // Add custom view modes for Contacts to display authors on Campaign Pages:
  $entity_info['redhen_contact']['view modes']['redhen_campaign_page_owner'] = array(
    'label' => t('Campaign Page Owner'),
    'custom settings' => TRUE,
  );
  $entity_info['redhen_contact']['view modes']['redhen_campaign_page_owner_teaser'] = array(
    'label' => t('Campaign Page Owner Teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['redhen_contact']['view modes']['snippet'] = array(
    'label' => t('Snippet'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function redhen_campaign_entity_property_info_alter(&$info) {
  $info['redhen_donation']['properties']['redhen_campaign_context'] = array(
    'label' => t('RedHen Campaign Context'),
    'description' => t('Redhen Campaign that was donated to.'),
    'type' => 'redhen_campaign',
    'schema field' => 'redhen_campaign_context',
    'required' => FALSE,
    'setter callback' => 'entity_property_verbatim_set',
  );

  $info['redhen_donation']['properties']['redhen_campaign_page_context'] = array(
    'label' => t("RedHen Campaign Page Context"),
    'type' => 'redhen_campaign_page',
    'description' => t("Redhen Campaign Page that the donation came through."),
    'schema field' => 'redhen_campaign_page_context',
    'required' => FALSE,
    'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_schema_alter().
 */
function redhen_campaign_schema_alter(&$schema) {
  $schema['redhen_donation']['fields']['redhen_campaign_context'] = array(
    'description' => 'The id of the campaign context entity.',
    'type' => 'int',
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema['redhen_donation']['fields']['redhen_campaign_page_context'] = array(
    'description' => 'The id of the campaign page context entity.',
    'type' => 'int',
    'not null' => FALSE,
    'default' => NULL,
  );
}

/**
 * Create and add the fundraising Goal field to Campaigns.
 */
function redhen_campaign_create_fields() {
  // Clear the field cache so the field type is found.
  field_cache_clear();
  $automatic_fields = array(
    REDHEN_CAMPAIGN_GOAL_FIELD => array(
      'field_name' => REDHEN_CAMPAIGN_GOAL_FIELD,
      'type' => 'number_integer',
      'locked' => FALSE,
      'cardinality' => 1,
      'settings' => array(),
    ),
    REDHEN_CAMPAIGN_DONATION_FIELD => array(
      'field_name' => REDHEN_CAMPAIGN_DONATION_FIELD,
      'type' => 'redhen_donation',
      'locked' => FALSE,
      'cardinality' => 1,
      'settings' => array(),
    ),
  );
  // If the fields don't already exist, create them.
  foreach ($automatic_fields as $field_name => $field_def) {
    $prior_field = field_read_field($field_name, array('include_inactive' => TRUE));
    if (empty($prior_field)) {
      $new_field = $field_def;
      field_create_field($new_field);
    }
  }
}

/**
 * Create an instance of the donation field for a redhen_campaign bundle.
 */
function redhen_campaign_create_donation_instance($bundle_name) {
  $instance = field_info_instance('redhen_campaign', REDHEN_CAMPAIGN_DONATION_FIELD, $bundle_name);
  if (!$instance) {
    $donation_field_instance = array(
      'field_name' => REDHEN_CAMPAIGN_DONATION_FIELD,
      'entity_type' => 'redhen_campaign',
      'bundle' => $bundle_name,
      'label' => t('Donation Type'),
      'required' => TRUE,
      'settings' => array(),
    );
    field_create_instance($donation_field_instance);
  }
}


/**
 * Create an instance of the goal field for a redhen_campaign or _page bundle.
 */
function redhen_campaign_create_goal_instance($bundle_name, $entity_type = 'redhen_campaign', $label = 'campaign') {
  $instance = field_info_instance($entity_type, REDHEN_CAMPAIGN_GOAL_FIELD, $bundle_name);
  if (!$instance) {
    $goal_field_instance = array(
      'field_name' => REDHEN_CAMPAIGN_GOAL_FIELD,
      'entity_type' => $entity_type,
      'bundle' => $bundle_name,
      'label' => t('Goal'),
      'required' => TRUE,
      'description' => t('The total fundraising goal for this @label.', array('@label' => $label)),
      'settings' => array(
        'prefix' => '$',
      ),
    );
    field_create_instance($goal_field_instance);
  }
}

/**
 * Implements hook_menu().
 */
function redhen_campaign_menu() {
  $items = array();

  // Administer campaigns.
  $items['admin/content/redhen_campaign'] = array(
    'title' => 'Campaigns',
    'description' => 'View RedHen Campaigns.',
    'page callback' => 'redhen_campaign_campaign_admin',
    'file' => 'includes/redhen_campaign.pages.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => 21,
  );

  // Add a Campaign.
  $items['redhen_campaign/add'] = array(
    'title' => 'Add a campaign',
    'description' => 'Add a new campaign.',
    'page callback' => 'redhen_campaign_types_list_page',
    'access callback' => 'redhen_campaign_access',
    'access arguments' => array('create'),
    'file' => 'includes/redhen_campaign.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $entity_info = entity_get_info('redhen_campaign');
  foreach ($entity_info['bundles'] as $key => $bundle) {
    $items['redhen_campaign/add/' . $key] = array(
      'title' => $bundle['label'],
      'title callback' => 'check_plain',
      'description' => isset($bundle['description']) ? $bundle['description'] : '',
      'page callback' => 'redhen_campaign_add_page',
      'page arguments' => array($key),
      'access callback' => 'redhen_campaign_access',
      'access arguments' => array('create'),
      'file' => 'includes/redhen_campaign.pages.inc',
    );
  }

  $items['redhen_campaign/%redhen_campaign'] = array(
    'title callback' => 'redhen_campaign_campaign_title',
    'title arguments' => array(1),
    'page callback' => 'redhen_campaign_view',
    'page arguments' => array(1),
    'access callback' => 'redhen_campaign_access',
    'access arguments' => array('view', 1),
    'weight' => -20,
  );
  $items['redhen_campaign/%redhen_campaign/view'] = array(
    'title' => 'Summary',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['redhen_campaign/%redhen_campaign/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_campaign_campaign_delete_form', 1),
    'access callback' => 'redhen_campaign_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['redhen_campaign/%redhen_campaign/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_campaign_campaign_form', 1),
    'access callback' => 'redhen_campaign_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_LOCAL_TASK,
  );

  // Administer campaign pages.
  $items['admin/content/redhen_campaign_page'] = array(
    'title' => 'Campaign Pages',
    'description' => 'View RedHen Campaign Pages.',
    'page callback' => 'redhen_campaign_campaign_pages_admin',
    'file' => 'includes/redhen_campaign.pages.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => 22,
  );

  // Add a campaign page.
  $items['redhen_campaign_page/add'] = array(
    'title callback' => 'redhen_campaign_page_add_title',
    'description' => 'Add a new campaign page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_campaign_page_add_form'),
    'access callback' => 'redhen_campaign_page_access',
    'access arguments' => array('create'),
    'file' => 'includes/redhen_campaign.forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $cp_entity_info = entity_get_info('redhen_campaign_page');
  foreach ($cp_entity_info['bundles'] as $key => $bundle) {
    $items['redhen_campaign_page/add/' . $key] = array(
      'title' => $bundle['label'],
      'title callback' => 'check_plain',
      'description' => isset($bundle['description']) ? $bundle['description'] : '',
      'page callback' => 'redhen_campaign_page_add_page',
      'page arguments' => array($key),
      'access callback' => 'redhen_campaign_page_access',
      'access arguments' => array('create'),
      'file' => 'includes/redhen_campaign.pages.inc',
    );
  }

  $items['redhen_campaign/page/%redhen_campaign_page'] = array(
    'title callback' => 'redhen_campaign_campaign_page_title',
    'title arguments' => array(2),
    'page callback' => 'redhen_campaign_page_view',
    'page arguments' => array(2, FALSE),
    'access callback' => 'redhen_campaign_page_access',
    'access arguments' => array('view', 2),
    'weight' => -20,
  );
  $items['redhen_campaign/page/%redhen_campaign_page/join'] = array(
    'title callback' => 'redhen_campaign_campaign_page_title',
    'title arguments' => array(2),
    'page callback' => 'redhen_campaign_page_view',
    'page arguments' => array(2, TRUE),
    'access callback' => 'redhen_campaign_page_access',
    'access arguments' => array('view', 2),
    'weight' => -20,
  );
  $items['redhen_campaign/page/%redhen_campaign_page/view'] = array(
    'title' => 'Summary',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['redhen_campaign/page/%redhen_campaign_page/invite'] = array(
    'title' => 'Invite team members',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_campaign_invite_form', 2),
    'access callback' => 'redhen_campaign_page_invite_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_LOCAL_TASK,
  );
  $items['redhen_campaign/page/%redhen_campaign_page/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_campaign_campaign_page_delete_form', 2),
    'access callback' => 'redhen_campaign_page_access',
    'access arguments' => array('delete', 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['redhen_campaign/page/%redhen_campaign_page/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redhen_campaign_campaign_page_form', 2),
    'access callback' => 'redhen_campaign_page_access',
    'access arguments' => array('edit', 2),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Changing the admin/content/redhen_campaign/add menu item to type
 * MENU_LOCAL_ACTION would break display of child items. Instead, dynamically
 * add the local action.
 */
function redhen_campaign_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add link to 'admin/content/redhen_campaign/add' on admin page.
  if ($root_path == 'admin/content/redhen_campaign') {
    $item = menu_get_item('redhen_campaign/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Add link to add campaign on 'admin/content/redhen_campaign_page' page.
  if ($root_path == 'admin/content/redhen_campaign_page') {
    $item = menu_get_item('redhen_campaign_page/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Title callback to create a dynamic title when adding a new campaign page.
 */
function redhen_campaign_page_add_title() {
  $msg = 'Create your fundraiser';
  if (isset($_GET['team']) && is_numeric($_GET['team'])) {
    $team = redhen_campaign_page_load($_GET['team']);
    if ($team) {
      $msg .= ' with ' . $team->label;
    }
  }
  if (isset($_GET['campaign']) && is_numeric($_GET['campaign'])) {
    $campaign = redhen_campaign_load($_GET['campaign']);
    if ($campaign) {
      $msg .= ' for ' . $campaign->label;
    }
  }
  return $msg;
}

/**
 * Implements hook_redhen_donation_title_alter().
 */
function redhen_campaign_redhen_donation_title_alter(&$title, $entity_type, $entity) {
  if ($entity_type == 'redhen_campaign') {
    $title .= " to " . $entity->label;
    if (isset($_GET['campaign_page']) && is_numeric($_GET['campaign_page'])) {
      $page = redhen_campaign_page_load($_GET['campaign_page']);
      if ($page) {
        $title .= ' for ' . $page->label;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function redhen_campaign_theme() {
  return array(
    'redhen_campaign_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'includes/redhen_campaign.forms.inc',
    ),
    'redhen_campaign_list' => array(
      'variables' => array(
        'Campaigns' => NULL,
        'header' => NULL,
        'rows' => NULL,
      ),
    ),
    'redhen_campaign_page_list' => array(
      'variables' => array(
        'Pages' => NULL,
        'header' => NULL,
        'rows' => NULL,
      ),
    ),

    'redhen_campaign_thermometer' => array(
      'template' => 'redhen_campaign_thermometer',
      'variables' => array('percent' => NULL),
    ),
  );
}

/**
 * Loads a campaign by ID.
 */
function redhen_campaign_load($campaign_id) {
  if (empty($campaign_id)) {
    return FALSE;
  }

  $campaigns = redhen_campaign_load_multiple(array($campaign_id), array());
  return $campaigns ? reset($campaigns) : FALSE;
}

/**
 * Loads a campaign page by ID.
 */
function redhen_campaign_page_load($page_id) {
  if (empty($page_id)) {
    return FALSE;
  }

  $pages = redhen_campaign_page_load_multiple(array($page_id), array());
  return $pages ? reset($pages) : FALSE;
}

/**
 * Loads multiple campaigns by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param array $campaign_ids
 *   An array of campaign IDs.
 * @param array $conditions
 *   An array of conditions on the {redhen_campaign} table in the form
 *     'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal campaign loading cache.
 *
 * @return array
 *   An array of campaign objects indexed by campaign_id.
 */
function redhen_campaign_load_multiple($campaign_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($campaign_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('redhen_campaign', $campaign_ids, $conditions, $reset);
}

/**
 * Loads multiple campaign pages by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param array $campaign_page_ids
 *   An array of campaign page IDs.
 * @param array $conditions
 *   An array of conditions on the {redhen_campaign_page} table in the form
 *     'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal campaign_page loading cache.
 *
 * @return array
 *   An array of campaign page objects indexed by campaign_page_id.
 */
function redhen_campaign_page_load_multiple($campaign_page_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($campaign_page_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('redhen_campaign_page', $campaign_page_ids, $conditions, $reset);
}

/**
 * Deletes multiple campaigns by ID.
 *
 * @param array $campaign_ids
 *   An array of campaign IDs to delete.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function redhen_campaign_delete_multiple($campaign_ids) {
  $ret = entity_get_controller('redhen_campaign')->delete($campaign_ids);

  return $ret;
}

/**
 * Deletes multiple campaign pages by ID.
 *
 * @param array $page_ids
 *   An array of campaign page IDs to delete.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function redhen_campaign_page_delete_multiple($page_ids) {
  $ret = entity_get_controller('redhen_campaign_page')->delete($page_ids);

  return $ret;
}

/**
 * Create a new campaign object.
 *
 * @param array $values
 *   Associative array of values. At least include array('type' => $type)
 *
 * @return RedhenCampaign
 *   New campaign entity.
 */
function redhen_campaign_create(array $values = array()) {
  return entity_get_controller('redhen_campaign')->create($values);
}

/**
 * Saves a campaign.
 *
 * @param RedhenCampaign $campaign
 *   The full campaign object to save.
 *
 * @return RedhenCampaign
 *   The saved campaign object.
 */
function redhen_campaign_save(RedhenCampaign $campaign) {
  $campaign->save();
  return $campaign;
}

/**
 * Checks campaign access for various operations.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param RedhenCampaign $campaign
 *   Optionally a campaign to check access for or for the create operation the
 *   campaign type. If nothing is given access permissions for all campaigns are
 *   returned.
 * @param stdClass $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function redhen_campaign_access($op, $campaign = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  if (user_access('administer redhen campaigns', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('view redhen campaigns', $account)) {
    return TRUE;
  }

  if ($op == 'create' && user_access('create redhen campaigns', $account)) {
    return TRUE;
  }

  if (isset($campaign)) {
    if ($account->uid == $campaign->author_uid) {
      if ($op == 'edit' && user_access('create redhen campaigns', $account)) {
        return TRUE;
      }
      if ($op == 'delete' && user_access('delete own redhen campaigns', $account)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Checks campaign page access for various operations.
 */
function redhen_campaign_page_access($op, $page = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  if (user_access('administer redhen campaign pages', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('view redhen campaign pages', $account)) {
    return TRUE;
  }

  if ($op == 'create' && user_access('create redhen campaign pages', $account)) {
    return TRUE;
  }

  if (isset($page)) {
    if ($account->uid == $page->author_uid) {
      if ($op == 'edit' && user_access('create redhen campaign pages', $account)) {
        return TRUE;
      }
      if ($op == 'delete' && user_access('delete own redhen campaign pages', $account)) {
        return TRUE;
      }
    }
    if (user_access('administer redhen campaign pages for own campaigns')) {
      $campaign = redhen_campaign_load($page->campaign_id);
      if ($campaign && $campaign->author_uid == $account->uid) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Access callback for the campaign page invite form.
 */
function redhen_campaign_page_invite_access($op, RedhenCampaignPage $page = NULL, $account = NULL) {
  return ($page->campaign_page_type == REDHEN_CAMPAIGN_PAGE_TEAM) && redhen_campaign_page_access($op, $page, $account);
}

/**
 * Implements hook_permission().
 */
function redhen_campaign_permission() {
  return array(
    'administer redhen campaign types' => array(
      'title' => t('Administer RedHen Campaign Types'),
      'description' => t('Manage RedHen campaign types and their structure.'),
      'restrict access' => TRUE,
    ),
    'administer redhen campaigns' => array(
      'title' => t('Administer RedHen Campaigns'),
      'description' => t('Perform administration tasks for RedHen Campaigns, including deletion.'),
      'restrict access' => TRUE,
    ),
    'view redhen campaigns' => array(
      'title' => t('View Redhen Campaigns'),
      'description' => t('View any existing Campaign content.'),
    ),
    'create redhen campaigns' => array(
      'title' => t('Create Redhen Campaigns'),
      'description' => t('Create new Redhen Campaign content and edit that content.'),
    ),
    'delete own redhen campaigns' => array(
      'title' => t('Delete Own Redhen Campaigns'),
      'description' => t('Delete Redhen Campaign content if this user is the creator of that content.'),
    ),
    'administer redhen campaign page types' => array(
      'title' => t('Administer RedHen Campaign Page Types'),
      'description' => t('Manage RedHen campaign page types and their structure.'),
      'restrict access' => TRUE,
    ),
    'administer redhen campaign pages' => array(
      'title' => t('Administer RedHen Campaign Pages'),
      'description' => t('Perform administration tasks for RedHen Campaign Pages, including deletion.'),
      'restrict access' => TRUE,
    ),
    'administer redhen campaign pages for own campaigns' => array(
      'title' => t('Administer Redhen Campaign Pages on My Campaigns'),
      'description' => t("Perform administration tasks for RedHen Campaign Pages that are affiliated with one's own Campaigns."),
      'restrict access' => TRUE,
    ),
    'view redhen campaign pages' => array(
      'title' => t('View Redhen Campaign Pages'),
      'description' => t('View any existing Campaign Page content.'),
    ),
    'create redhen campaign pages' => array(
      'title' => t('Create Redhen Campaign Pages'),
      'description' => t('Create new Campaign Page content and edit that content.'),
    ),
    'delete own redhen campaign pages' => array(
      'title' => t('Delete Own Redhen Campaign Pages'),
      'description' => t('Delete Redhen Campaign Page content if this user is the creator of that content.'),
    ),
  );
}

/**
 * Display a campaign.
 */
function redhen_campaign_view(RedhenCampaign $campaign, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  return entity_view('redhen_campaign', array($campaign), $view_mode, $langcode, $page);
}

/**
 * Display a campaign page.
 */
function redhen_campaign_page_view(RedhenCampaignPage $campaign_page, $invite, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  if ($invite) {
    $_SESSION['redhen_campaign_team_invitations'][$campaign_page->identifier()] = TRUE;
  }
  return entity_view('redhen_campaign_page', array($campaign_page), $view_mode, $langcode, $page);
}

/**
 * Title callback for hook_menu().
 *
 * @param RedhenCampaign $campaign
 *   A loaded campaign object.
 *
 * @return string
 *   Campaign title.
 */
function redhen_campaign_campaign_title(RedhenCampaign $campaign) {
  return $campaign->label();
}

/**
 * Title callback for hook_menu().
 *
 * @param RedhenCampaignPage $page
 *   A loaded campaign_page object.
 *
 * @return string
 *   Page title.
 */
function redhen_campaign_campaign_page_title(RedhenCampaignPage $page) {
  return $page->label();
}

/**
 * Gets an array of all campaign types, keyed by the name.
 *
 * @param string $name
 *   If set, the type with the given name is returned.
 */
function redhen_campaign_get_types($name = NULL) {
  $types = entity_load_multiple_by_name('redhen_campaign_type', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Gets an array of all campaign types, keyed by the name.
 *
 * @param string $name
 *   If set, the type with the given name is returned.
 */
function redhen_campaign_page_get_types($name = NULL) {
  $types = entity_load_multiple_by_name('redhen_campaign_page_type', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Return campaign types suitable for use in an options list.
 *
 * @return array
 *   Associative array keyed by name with a label value.
 */
function redhen_campaign_type_options_list() {
  $options = array();
  foreach (redhen_campaign_get_types() as $type) {
    $options[$type->name] = $type->label();
  }

  return $options;
}

/**
 * Return campaign page types suitable for use in an options list.
 *
 * @return array
 *   Associative array keyed by name with a label value.
 */
function redhen_campaign_page_type_options_list() {
  $options = array();
  foreach (redhen_campaign_page_get_types() as $type) {
    $options[$type->name] = $type->label();
  }

  return $options;
}

/**
 * Access callback for the entity API.
 */
function redhen_campaign_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer redhen_campaign types', $account);
}

/**
 * Access callback for the entity API.
 */
function redhen_campaign_page_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer redhen_campaign_page types', $account);
}

/**
 * Menu argument loader; Load a campaign type by string.
 *
 * @param string $type
 *   The machine-readable name of a campaign type to load.
 *
 * @return array
 *   A campaign type array or FALSE if $type does not exist.
 */
function redhen_campaign_type_load($type) {
  return redhen_campaign_get_types($type);
}

/**
 * Saves a model type to the db.
 */
function redhen_campaign_type_save(RedhenCampaignType $type) {
  $type->save();
}

/**
 * Deletes a model type from the db.
 */
function redhen_campaign_type_delete(RedhenCampaignType $type) {
  $type->delete();
}

/**
 * Menu argument loader; Load a campaign page type by string.
 *
 * @param string $type
 *   The machine-readable name of a campaign type to load.
 *
 * @return array
 *   A campaign type array or FALSE if $type does not exist.
 */
function redhen_campaign_page_type_load($type) {
  return redhen_campaign_page_get_types($type);
}

/**
 * Saves a model type to the db.
 */
function redhen_campaign_page_type_save(RedhenCampaignPageType $type) {
  $type->save();
}

/**
 * Deletes a model type from the db.
 */
function redhen_campaign_page_type_delete(RedhenCampaignPageType $type) {
  $type->delete();
}

/**
 * Returns HTML for a list of available campaign types for campaign creation.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 *
 * @ingroup themeable
 */
function theme_redhen_campaign_add_list($variables) {
  $content = $variables['content'];
  $output = '';

  if ($content) {
    $output = '<dl class="node-type-list">';
    foreach ($content as $item) {
      $output .= '<dt>' . l($item['title'], $item['href'], $item['localized_options']) . '</dt>';
      $output .= '<dd>' . filter_xss_admin($item['description']) . '</dd>';
    }
    $output .= '</dl>';
  }
  else {
    $output = '<p>' . t('You have not created any campaign types yet. Go to the <a href="@link">campaign type creation page</a> to add a new RedHen campaign type.',
      array('@link' => url('admin/structure/redhen/campaign_types'))) . '</p>';
  }
  return $output;
}

/**
 * Theme function for campaign list.
 *
 * @param array $variables
 *   Contains header and row arrays.
 *
 * @return string
 *   Rendered markup.
 */
function theme_redhen_campaign_list($variables) {
  $header = $variables['header'];
  $rows = $variables['rows'];

  $render['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No campaigns available.'),
  );
  $render['pager'] = array(
    '#theme' => 'pager',
  );

  return render($render);
}

/**
 * Theme function for campaign page list.
 *
 * @param array $variables
 *   Contains header and row arrays.
 *
 * @return string
 *   Rendered markup.
 */
function theme_redhen_campaign_page_list($variables) {
  $header = $variables['header'];
  $rows = $variables['rows'];

  $render['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No campaign pages available.'),
  );
  $render['pager'] = array(
    '#theme' => 'pager',
  );

  return render($render);
}

/**
 * Calculate the total contributions to date for a campaign.
 */
function redhen_campaign_calculate_total_contributions($type, $entity) {
  $total = -1;
  $query = db_select('redhen_donation', 'd');
  if ($type == 'redhen_campaign') {
    $query->condition('redhen_campaign_context', $entity->campaign_id);
  }
  elseif ($type == 'redhen_campaign_page') {
    if (isset($entity->team)) {
      // Recalculate team total:
      if ($team = redhen_campaign_page_load($entity->team)) {
        redhen_campaign_calculate_total_contributions('redhen_campaign_page', $team);
      }
    }
    if ($entity->type == 'team') {
      $query->leftJoin('redhen_campaign_page', 'cp', 'd.redhen_campaign_page_context = cp.page_id');
      $db_or = db_or();
      $db_or->condition('d.redhen_campaign_page_context', $entity->page_id);
      $db_or->condition('cp.team', $entity->page_id);
      $query->condition($db_or);
    }
    else {
      $query->condition('redhen_campaign_page_context', $entity->page_id);
    }
  }

  $query->addExpression('SUM(received)', 'sum_received');
  $result = $query->execute()->fetchCol();
  $total = reset($result);

  if ($total >= 0) {
    $wrapper = entity_metadata_wrapper($type, $entity);
    $wrapper->progress = $total;
    $wrapper->save();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function redhen_campaign_preprocess_redhen_campaign_thermometer(&$variables) {
  $variables['percent'] = round((float) $variables['percent'], 2);
}

/**
 * Implements hook_field_extra_fields().
 */
function redhen_campaign_field_extra_fields() {
  $return = array();

  $entity_type = 'redhen_campaign';
  $entity_info = entity_get_info($entity_type);
  foreach (array_keys($entity_info['bundles']) as $bundle) {
    $return[$entity_type][$bundle]['form']['label'] = array(
      'label' => t('Label'),
      'description' => t('Label'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['form']['promote'] = array(
      'label' => t('Promote'),
      'description' => t('Promote to the front page.'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['form']['sticky'] = array(
      'label' => t('Sticky'),
      'description' => t('Sticky at the top of lists.'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['form']['join'] = array(
      'label' => t('Join link'),
      'description' => t('Adds a link to join this Campaign'),
      'weight' => -10,
    );

    $return[$entity_type][$bundle]['display']['label'] = array(
      'label' => t('Label'),
      'description' => t('Label'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['display']['join'] = array(
      'label' => t('Join link'),
      'description' => t('Link to Join this Campaign'),
      'weight' => -10,
    );
  }
  $entity_type = 'redhen_campaign_page';
  $entity_info = entity_get_info($entity_type);
  foreach (array_keys($entity_info['bundles']) as $bundle) {
    $return[$entity_type][$bundle]['form']['label'] = array(
      'label' => t('Label'),
      'description' => t('Label'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['display']['label'] = array(
      'label' => t('Label'),
      'description' => t('Label'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['display']['owner'] = array(
      'label' => t('Owner'),
      'description' => t('Page Owner'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['form']['campaign'] = array(
      'label' => t('Campaign'),
      'description' => t('Parent Campaign'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['display']['campaign'] = array(
      'label' => t('Campaign'),
      'description' => t('Parent Campaign'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['form']['team'] = array(
      'label' => t('Team'),
      'description' => t('Team Page'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['display']['team'] = array(
      'label' => t('Team Page'),
      'description' => t('Team Page'),
      'weight' => -10,
    );
    $return[$entity_type][$bundle]['display']['donate'] = array(
      'label' => t('Donate Link'),
      'description' => t('Link to donate to this Campaign Page'),
      'weight' => -10,
    );
  }

  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function redhen_campaign_form_redhen_donation_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['donation_settings']['entity_type'] != 'redhen_campaign') {
    return;
  }
  $params = drupal_get_query_parameters();
  $donation_wrapper = entity_metadata_wrapper('redhen_donation', $form_state['donation']);
  $campaign = redhen_campaign_load($form_state['donation_settings']['entity_id']);
  if ($campaign) {
    $donation_wrapper->redhen_campaign_context = $campaign;
  }
  if (isset($params['campaign_page'])) {
    $page = redhen_campaign_page_load($params['campaign_page']);
    if ($page) {
      $donation_wrapper->redhen_campaign_page_context = $page;
    }
  }
}

/**
 * Implements hook_redhen_donation_save().
 */
function redhen_campaign_redhen_donation_save($donation) {
  if ($donation->entity_type == 'redhen_campaign') {
    if ($campaign = redhen_campaign_load($donation->entity_id)) {
      redhen_campaign_calculate_total_contributions('redhen_campaign', $campaign);
    }
    if (isset($donation->redhen_campaign_page_context)) {
      if ($page = redhen_campaign_page_load($donation->redhen_campaign_page_context)) {
        redhen_campaign_calculate_total_contributions('redhen_campaign_page', $page);
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function redhen_campaign_mail($key, &$message, $params) {
  switch ($key) {
    case 'invite':
      $message['subject'] .= $params['subject'];
      $message['body'][] = $params['message'];

      break;
  }
}

/**
 * Send a campaign invitation email.
 *
 * @param RedhenCampaignPage $campaign_page
 *   Loaded campaign page to invite users to.
 * @param string $emails
 *   Comma separated list of emails.
 * @param $message
 *   The message to send. The invite URL will be appended.
 *
 * @return bool
 *   Success status.
 */
function redhen_campaign_send_invite(RedhenCampaignPage $campaign_page, $emails, $message) {
  global $language;
  $wrapper = entity_metadata_wrapper('redhen_campaign_page', $campaign_page);

  $params = array();
  $params['subject'] = t("Invitation to the join the @team", array('@team' => $wrapper->label()));
  $query = array(
    'destination' => "redhen_campaign_page/add?campaign={$campaign_page->campaign}&team={$campaign_page->identifier()}",
  );
  $url = url('user/register', array('absolute' => TRUE, 'query' => $query));
  $message = $message . "\n\n\n\n" . $url;
  $params['message'] = $message;

  $result = drupal_mail('redhen_campaign', 'invite',
    $emails, $language, $params, $wrapper->author->mail->value()
  );

  if ($result) {
    $msg = t('Your invitations have been sent.');
    $redirect_url = $campaign_page->uri();
    $form_state['redirect'] = $redirect_url['path'];
  }
  else {
    $msg = t('There has been a problem sending your invitations.');
  }

  drupal_set_message($msg);

  return $result;
}
