<?php

/**
 * @file
 * Test case for Lom object and the save handler
 *
 * run test with command:
 * phpunit --colors --verbose ./archibald_lom.test
 */
ini_set('display_errors', 'on');
error_reporting(E_ALL);
restore_error_handler();
define('DRUPAL_ROOT', __DIR__ . '/../../../../../');

require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
require_once DRUPAL_ROOT . '/includes/unicode.inc';

require_once __DIR__ . '/Lom.class.php';
require_once __DIR__ . '/LomSaveHandler.class.php';


$_SERVER['REMOTE_ADDR'] = '999.999.0.0';
drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
require_once __DIR__ . '/../archibald.module';

class ArchibaldLom_Unit_Test extends PHPUnit_Framework_TestCase {

  /**
   *
   * @var Lom
   */
  private $insert = NULL;

  /**
   *
   * @var Lom
   */
  private $loaded = NULL;

  /**
   *
   * @var array
   */
  private $jsonExported = NULL;

  /**
   *
   * @var Lom
   */
  private $jsonImported = NULL;

  /**
   * prepare everything for test
   */
  protected function setUp() {
    parent::setUp();
    if ($this->insert == NULL) {
      $this->insert = new ArchibaldLom();
    }
  }

  /**
   * process the test
   */
  public function testInit() {

    $this->insertTest();
    $this->exportJSON();
    $this->verifyJSON();
    $this->loadTest();
    $this->insertTest(TRUE);
    $this->loadTest();


    db_delete('archibald_langstring_terms')
      ->condition('term', 'unitTest_%', LIKE)
      ->execute();
  }

  /**
   * convert resource to json
   */
  private function exportJSON() {
    $this->jsonExported = ArchibaldLomSaveHandler::jsonExport($this->insert);
  }

  /**
   * convert json to resource and
   * test if both still match
   */
  private function verifyJSON() {

    $this->jsonImported = ArchibaldLomSaveHandler::jsonImport($this->jsonExported);

    $insert_string = var_export($this->insert, TRUE);
    $loaded_string = var_export($this->jsonImported, TRUE);
    if ($insert_string != $loaded_string) {
      $this->logMessage("Inserted Object:");
      print_r($this->insert);
      $this->logMessage("Loaded JSON Object:");
      print_r($this->jsonImported);


      file_put_contents("/tmp/record_insert", $insert_string);
      file_put_contents("/tmp/record_loaded", $loaded_string);

      print_r($this->phpDiff($insert_string, $loaded_string));
      $this->assertTrue(FALSE, 'Loaded Object not equals Inserted, changes below');
    }
  }

  /**
   * create new Lom resource object
   * @param boolean $update
   */
  private function insertTest($update = FALSE) {
    $lom = $this->insert;
    $vcard = "BEGIN:VCARD
VERSION:3.0
CLASS:PUBLIC
PRODID:-//class_vcard from TroyWolf.com//NONSGML Version 1//EN
REV:2011-04-26 03:56:54
FN:Christian Ackermann
N:Ackermann;Christian;;;
TITLE:ICT-Entwicklung und Support
ORG:Educa.ch - Schweizer Medieninstitut für Bildung und Kultur
ADR;TYPE=work:;;Erlachstrasse 22;Bern 9;CH;3000 ;
EMAIL;TYPE=internet,pref:christian.ackermann@educa.ch
TEL;TYPE=work,voice:+41 31 300 5541
TZ:-0500
END:VCARD";

    $general = new ArchibaldLomDataGeneral();

    $lang_string = new ArchibaldLomDataLangString();
    if ($update == TRUE) {
      $lang_string->setString("unitTest_kann kein franz", "fr");
    }
    else {
      $lang_string->setString("unitTest_just a title from general", "en");
    }
    $lang_string->setString("unitTest_ist nur ne titel für general", "de");
    $general->setTitle($lang_string);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_just a description from general", "en");

    if ($update != TRUE) {
      $lang_string->setString("unitTest_ist nur ne beschreibung für general", "de");
    }
    $general->setDescription($lang_string);

    $general->setAggregationLevel(ArchibaldLom::GENERAL_AGGREGATIONLEVEL_2);
    if ($update == TRUE) {
      $general->setAggregationLevel(ArchibaldLom::GENERAL_AGGREGATIONLEVEL_1);
    }

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_coverage 1", "en");
    $general->addCoverage($lang_string);

    $lang_string = new ArchibaldLomDataLangString();
    if ($update == TRUE) {
      $lang_string->setString("unitTest_coverage 3", "en");
    }
    else {
      $lang_string->setString("unitTest_coverage 2", "en");
    }
    $general->addCoverage($lang_string);

    $general->setStructure(ArchibaldLom::GENERAL_STRUCTURE_ATOMIC);

    $general->addIdentifier(new ArchibaldLomDataIdentifier("ISBN", "5435-534r-fsdf234"));

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_identifiyer_title", "en");
    $general->addIdentifier(new ArchibaldLomDataIdentifier("URL", "http://www.educa.ch", $lang_string));

    $lang_string = new ArchibaldLomDataLangString();
    if ($update == TRUE) {
      $lang_string->setString("unitTest_keyword1 update", "en");
      $lang_string->setString("unitTest_schlüsselwort1update", "de");
    }
    else {
      $lang_string->setString("unitTest_keyword1", "en");
      $lang_string->setString("unitTest_schlüsselwort1", "de");
    }

    $general->addKeyword($lang_string);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_keyword2", "en");
    $lang_string->setString("unitTest_schlüsselwort2", "de");
    $general->addKeyword($lang_string);

    if ($update == TRUE) {
      $lang_string = new ArchibaldLomDataLangString();
      $lang_string->setString("unitTest_keyword4", "en");
      $lang_string->setString("unitTest_schlüsselwort4", "de");
      $general->addKeyword($lang_string);
    }
    $general->addLanguage('de');

    $lom->setGeneral($general);

    $liveCycle = new ArchibaldLomDataLifeCycle();
    $liveCycle->setStatus(ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_FINALE);
    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_1.0", "en");
    $lang_string->setString("unitTest_äens döt nüll", "de");
    $liveCycle->setVersion($lang_string);

    $contribute = new ArchibaldLomDataContribute();
    $contribute->setRole(ArchibaldLomDataLifeCycle::CONTRIBUTE_ROLE_AUTHOR);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_date description2", "en");
    $lang_string->setString("unitTest_datumsbeschreibung2", "de");

    $date = new ArchibaldLomDataDateTime(time(), $lang_string);
    $contribute->setDate($date);
    $contribute->addEntity($vcard);

    $liveCycle->addContribute($contribute);
    $lom->setLifeCycle($liveCycle);

    $rights = new ArchibaldLomDataRights();
    $rights->setCost(ArchibaldLomDataRights::COST_NO);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_right description", "en");
    $lang_string->setString("unitTest_rechtebeschreibung", "de");
    $rights->setDescription($lang_string);
    $lom->setRights($rights);

    $technical = new ArchibaldLomDataTechnical();
    $technical->addFormat("application/octec-stream");
    $technical->addLocation("http://google.de/tollefile.txt");

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_firefox", "en");
    $lang_string->setString("unitTest_firefox", "de");
    $technical->setOtherPlattformRequirements($lang_string);

    $technical->setSize(1024);

    $technical->setDuration(new ArchibaldLomDataDuration(array("hours" => 2, "minutes" => 10, "seconds" => 23.4)));

    $technical->setPreviewImage('http://www.google.ch/intl/en_com/images/srpr/logo1w.png');

    $lom->setTechnical($technical);

    $annotation = new ArchibaldLomDataAnnotation();
    $annotation->setDate($date);
    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_just a description from annoation", "en");
    $lang_string->setString("unitTest_ist nur ne beschreibung für annoation", "de");

    $annotation->setDescription($lang_string);
    $annotation->setEntity($vcard);

    $lom->addAnnotation($annotation);


    $education = new ArchibaldLomDataEducation();
    $education->addContext(ArchibaldLomDataEducation::CONTEXT_SCHOOL);
    $education->addContext(ArchibaldLomDataEducation::CONTEXT_TRAINING);
    $education->addIntendedEndUserRole(ArchibaldLomDataEducation::INTENDED_END_USER_ROLE_TEACHER);
    $education->addLanguage("de");
    $education->addLearningResourceType('documentary', ArchibaldLomDataEducation::LEARNING_RESOURCE_TYPE_COURSE);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_12-17", "en");
    $lang_string->setString("unitTest_12-18", "de");
    $education->addTypicalAgeRange($lang_string);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_just a description from education", "en");
    $lang_string->setString("unitTest_ist nur ne beschreibung für education", "de");

    $education->setDescription($lang_string);

    $education->setSemanticDensity(ArchibaldLomDataEducation::SEMANTIC_LEVEL_LOW);
    $lom->setEducation($education);

    $meta_meteData = new ArchibaldLomDataMetaMetadata();

    $contribute = new ArchibaldLomDataContribute();
    $contribute->setRole(ArchibaldLomDataMetaMetadata::CONTRIBUTE_ROLE_CREATOR);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_date description", "en");
    $lang_string->setString("unitTest_datumsbeschreibung", "de");

    $date = new ArchibaldLomDataDateTime(time(), $lang_string);
    $contribute->setDate($date);
    $contribute->addEntity($vcard);

    $meta_meteData->addContribute($contribute);
    $meta_meteData->setLanguage("de");
    $lom->setMetaMetadata($meta_meteData);


    $classification = new ArchibaldLomDataClassification();
    $classification->setPurpose(ArchibaldLomDataClassification::PURPOSE_SKILL_LEVEL);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_classikeyword1", "en");
    $lang_string->setString("unitTest_classikeyword1", "de");
    $classification->addKeyword($lang_string);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_class desc", "en");
    $lang_string->setString("unitTest_classification beschreibung irgendwas", "de");

    $classification->setDescription($lang_string);

    $taxonPath = new ArchibaldLomDataTaxonPath();
    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_educa source", "en");
    $lang_string->setString("unitTest_educa source", "de");
    $taxonPath->setSource($lang_string);

    $lang_string = new ArchibaldLomDataLangString();
    $lang_string->setString("unitTest_master chief instructor for the world", "en");
    $lang_string->setString("unitTest_gott", "de");

    $taxon = new ArchibaldLomDataTaxon("badboy", $lang_string);

    $taxonPath->addTaxon($taxon);

    $classification->addTaxonPath($taxonPath);
    $lom->addClassification($classification);


    $curriculum_per = '{"Cycle 2":' .
      '{"Math\u00e9matiques et Sciences de la nature":{"MSN 25":' .
      '{"discipline":"Sciences de la nature","object":' .
      '"Diversit\u00e9 du vivant","code":"MSN 25","url_part":"MSN_25",' .
      '"description":"Repr\u00e9senter des ph\u00e9nom\u00e8nes naturels, ' .
      'techniques, sociauxou des situations math\u00e9matiques",' .
      '"object_elements":[{"uuid":"89db62571d03d1769031bd5bf333c03a",' .
      '"url_part":"","subtitle":"GENERAL","childs":[],"details":' .
      '[{"ident":5,"url_part":"MSN_25#8242","text":"Cet objectif n\'est pas ' .
      'travaill\u00e9 pour lui-m\u00eame. ' .
      'Il s\'active dans les autres axes seulement.","school_year":' .
      '"5e \u2013 6e ann\u00e9es"}]}]}},"Langues":{"L1 22":{' .
      '"discipline":"Allemand","object":"Fonctionnement de la langue",' .
      '"code":"L1 22","url_part":"L1_22","description":"\u00c9crire des textes' .
      'vari\u00e9s \u00e0 l\'aide de diverses r\u00e9f\u00e9rences",' .
      '"object_elements":[{"uuid":"7b18a2603a68e16652e9c7b13f1d01de",' .
      '"url_part":"L1_22#les-regroupements-de-genres","subtitle":' .
      '"Les regroupements de genres","childs":[{"uuid":' .
      '"fed0971e4bb314ac3f648c6776cbe22f","url_part":"L1_22#le-texte-qui-' .
      'transmet-des-savoirs","subtitle":"Le texte qui transmet des savoirs",' .
      '"childs":[],"details":[{"ident":5,"url_part":"L1_22#16827","text":' .
      '"Genres conseill\u00e9s\u00a0:","school_year":"5e \u2013 ' .
      '6e ann\u00e9es"},{"ident":5,"url_part":"L1_22#633","text":"\n\u2022 ' .
      'le texte qui explique \u00abcomment\u00bb et \u00abpourquoi\u00bb ' .
      '\n\u2022 l\u2019article encyclop\u00e9dique \n\u2022 ' .
      'l\u2019expos\u00e9 \u00e9crit \n\u2022 la note de synth\u00e8se ' .
      '\n","school_year":"5e \u2013 6e ann\u00e9es"},{"ident":5,"url_part":' .
      '"L1_22#642","text":"\u00c9criture et organisation d\u2019un texte ' .
      'qui transmet des savoirs (ordre logique des id\u00e9es, titre et ' .
      'sous-titres, disposition \u00e0 bon escient de croquis, dessins, ' .
      'photos,\u2026)","school_year":"5e \u2013 6e ann\u00e9es"}]}],' .
      '"details":[]}]}},"Formation g\u00e9n\u00e9rale":{"FG 25":{' .
      '"discipline":"Identit\u00e9","object":"Identit\u00e9","code":"FG 25",' .
      '"url_part":"FG_25","description":"Reconna\u00eetre l\'alt\u00e9rit' .
      '\u00e9 et d\u00e9velopper le respect mutuel dans la communaut' .
      '\u00e9 scolaire","object_elements":[]}}},"Cycle 3":{"Formation ' .
      'g\u00e9n\u00e9rale":{"FG 38":{"discipline":"Identit\u00e9","object":' .
      '"Identit\u00e9","code":"FG 38","url_part":"FG_38","description":' .
      '"Expliciter ses r\u00e9actions et ses comportements en fonction des ' .
      'groupes d\u2019appartenance et des situations v\u00e9cues",' .
      '"object_elements":[{"uuid":"f844526e4fb9414177c66cc8085175af",' .
      '"url_part":"","subtitle":"GENERAL","childs":[],"details":[{"ident":' .
      '9,"url_part":"FG_38#8250","text":"Cet objectif n\'est pas travaill' .
      '\u00e9 pour lui-m\u00eame. Il s\'active dans les autres axes ' .
      'seulement.","school_year":"9e ann\u00e9e"}]}]}}}}';

    $curriculum = new ArchibaldLomDataCurriculum();
    $curriculum->setSource('per');
    $curriculum->setEntity($curriculum_per);
    $lom->addCurriculum($curriculum);


    $new_resource = new ArchibaldLomDataResource();
    $new_resource->addIdentifier(new ArchibaldLomDataIdentifier('educa',  'ba214e3836d75801af60c2d9c9aba053'));

    $new_relation = new ArchibaldLomDataRelation();
    $new_relation->setKind(new ArchibaldLomDataVocabulary(ArchibaldLomDataRelation::KIND_HAS_PART));
    $new_relation->setResource($new_resource);

    $lom->addRelation($new_relation);

    $new_resource = new ArchibaldLomDataResource();
    $new_resource->addIdentifier(new ArchibaldLomDataIdentifier('educa', 'd82b13c943276f68fbc17108a4ddd198'));

    $new_relation = new ArchibaldLomDataRelation();
    $new_relation->setKind(new ArchibaldLomDataVocabulary(ArchibaldLomDataRelation::KIND_HAS_PART));
    $new_relation->setResource($new_resource);

    $lom->addRelation($new_relation);

    $lom_id = '';
    if ($update == TRUE) {
      $lom_id = ArchibaldLomSaveHandler::update($lom);
    }
    else {
      $lom_id = ArchibaldLomSaveHandler::insert($lom);
    }

    $lom->lomId = $lom_id;

    $this->insert = $lom;
    $this->logMessage("inserted lomid: " . $lom_id . " rev: " . $lom->version);
  }

  /**
   * load the Lom ressouce from database and
   * test if it is still the same / nothing get lost
   */
  public function loadTest() {
    echo "Try to load lomid: " .
    $this->insert->getLomId() .
    " rev:" . $this->insert->getVersion() . "\n";

    // dont use cache here
    $this->loaded = ArchibaldLomSaveHandler::load($this->insert->getLomId(), $this->insert->getVersion(), FALSE);
    $this->assertTrue(($this->loaded instanceof ArchibaldLom),
      'loaded class is not a lom class it is: ' . get_class($this->loaded)
    );

    $test_inserted = $this->insert;
    $test_loaded = $this->loaded;

    $inserted_general_keywords = $test_inserted->getGeneral()->getKeyword();
    $loaded_general_keywords = $test_loaded->getGeneral()->getKeyword();

    $inserted_general_coverage = $test_inserted->getGeneral()->getCoverage();
    $loaded_general_coverage = $test_loaded->getGeneral()->getCoverage();

    $inserted_general = $test_inserted->getGeneral();
    $loaded_general = $test_loaded->getGeneral();

    $inserted_general->setKeyword(array());
    $loaded_general->setKeyword(array());

    $inserted_general->setCoverage(array());
    $loaded_general->setCoverage(array());

    $inserted_lang_string = $inserted_general->getDescription();
    $loadet_lang_string = $loaded_general->getDescription();

    if ($inserted_lang_string->getString('de') == '') {
      if ($loadet_lang_string->getString('de') != '') {
        /*
         * this is the correct behavior, because
         * it was a new langstring with the same string create
         * as allready exist in database
         * because of thisn the software load the old langstring with includet
         * german translation
         *
         * To avoid this behavior, use the loaded langstring (same id)
         * Then will the german translation destroyed
         */
        $loadet_lang_string->setString(NULL, 'de');
        $loaded_general->setDescription($loadet_lang_string);
      }
      else {
        $this->assertTrue(FALSE, 'The langstring was replaced insted of merged');
      }
    }


    $test_inserted->setGeneral($inserted_general);
    $test_loaded->setGeneral($loaded_general);
    unset($inserted_general);
    unset($loaded_general);



    #$test_inserted = $this->insert->getLifeCycle();
    #$test_loaded = $this->loaded->getLifeCycle();


    $insert_string = var_export($test_inserted, TRUE);
    $loaded_string = var_export($test_loaded, TRUE);
    $this->logMessage("Checking Lom Object without general keywords and coverages.");

    if ($insert_string != $loaded_string) {

      $this->logMessage("Inserted Object:");
      print_r($test_inserted);
      $this->logMessage("Loaded Object:");
      print_r($test_loaded);
      file_put_contents("/tmp/record_insert", $insert_string);
      file_put_contents("/tmp/record_loaded", $loaded_string);
      print_r($this->phpDiff($insert_string, $loaded_string));
      $this->assertTrue(
        FALSE,
        'Loaded Object not equals Inserted, changes below'
      );
    }


    $this->logMessage("Checking General Keywords");
    foreach ($inserted_general_keywords as $i_keyword) {
      $missed = TRUE;
      foreach ($loaded_general_keywords as $k => $l_keyword) {
        if ($i_keyword->getId() == $l_keyword->getId()) {
          $missed = FALSE;

          $ike = var_export($l_keyword, TRUE);
          $lke = var_export($l_keyword, TRUE);
          $this->assertEquals($ike, $lke, 'keywords are not equals');
          unset($loaded_general_keywords[$k]);
        }
      }
      $this->assertFalse($missed, 'Keyword is missing');
    }

    $this->logMessage("Checking General Coverages");
    foreach ($inserted_general_coverage as $i_coverage) {
      $missed = TRUE;
      foreach ($loaded_general_coverage as $k => $l_coverage) {

        if ($i_coverage->getId() == $l_coverage->getId()) {
          $missed = FALSE;
          $ike = var_export($i_coverage, TRUE);
          $lke = var_export($l_coverage, TRUE);
          $this->assertEquals($ike, $lke, 'coverage are not equals');
          $this->logMessage("Keyword:");
          print_r($l_coverage->getStrings());
          unset($loaded_general_coverage[$k]);
        }
      }
      $this->assertFalse($missed, 'Coverage is missing');
    }

    ArchibaldLomSaveHandler::purge($this->loaded);
  }

  /**
   * print message to console
   * @param string $msg
   */
  private function logMessage($msg) {
    echo "\033[1;33m" . $msg . "\033[0m\n";
  }

  /**
   * diff to php arrays/objects
   * @param mixed $old
   * @param mixed $new
   * @return string
   *   diff code
   */
  private function phpDiff($old, $new) {
    # split the source text into arrays of lines
    $t1 = explode("\n", $old);
    $x = array_pop($t1);
    if ($x > '') {
      $t1[] = "$x\n\\ No newline at end of file";
    }
    $t2 = explode("\n", $new);
    $x = array_pop($t2);
    if ($x > '') {
      $t2[] = "$x\n\\ No newline at end of file";
    }

    # build a reverse-index array using the line as key and line number as value
    # don't store blank lines, so they won't be targets of the shortest distance
    # search
    foreach ($t1 as $i => $x) {
      if ($x > '') {
        $r1[$x][] = $i;
      }
    }

    foreach ($t2 as $i => $x) {
      if ($x > '') {
        $r2[$x][] = $i;
      }
    }

    $a1 = 0;
    $a2 = 0;   # start at beginning of each list
    $actions = array();

    # walk this loop until we reach the end of one of the lists
    while ($a1 < count($t1) && $a2 < count($t2)) {
      # if we have a common element, save it and go to the next
      if ($t1[$a1] == $t2[$a2]) {
        $actions[] = 4;
        $a1++;
        $a2++;
        continue;
      }

      # otherwise, find the shortest move "Manhattan-distance" from the
      # current location
      $best1 = count($t1);
      $best2 = count($t2);
      $s1 = $a1;
      $s2 = $a2;
      while (($s1 + $s2 - $a1 - $a2) < ($best1 + $best2 - $a1 - $a2)) {
        $d = -1;
        foreach ((array) @$r1[$t2[$s2]] as $n)
          if ($n >= $s1) {
            $d = $n;
            break;
          }
        if ($d >= $s1 && ($d + $s2 - $a1 - $a2) < ($best1 + $best2 - $a1 - $a2)) {
          $best1 = $d;
          $best2 = $s2;
        }
        $d = -1;
        foreach ((array) @$r2[$t1[$s1]] as $n)
          if ($n >= $s2) {
            $d = $n;
            break;
          }
        if ($d >= $s2 && ($s1 + $d - $a1 - $a2) < ($best1 + $best2 - $a1 - $a2)) {
          $best1 = $s1;
          $best2 = $d;
        }
        $s1++;
        $s2++;
      }
      while ($a1 < $best1) {
        $actions[] = 1;
        $a1++;
      }  # deleted elements
      while ($a2 < $best2) {
        $actions[] = 2;
        $a2++;
      }  # added elements
    }

    # we've reached the end of one list, now walk to the end of the other
    while ($a1 < count($t1)) {
      $actions[] = 1;
      $a1++;
    }  # deleted elements
    while ($a2 < count($t2)) {
      $actions[] = 2;
      $a2++;
    }  # added elements
    # and this marks our ending point
    $actions[] = 8;

    # now, let's follow the path we just took and report the added/deleted
    # elements into $out .
    $op = 0;
    $x0 = $x1 = 0;
    $y0 = $y1 = 0;
    $out = array();
    foreach ($actions as $act) {
      if ($act == 1) {
        $op|=$act;
        $x1++;
        continue;
      }
      if ($act == 2) {
        $op|=$act;
        $y1++;
        continue;
      }
      if ($op > 0) {
        $xstr = ($x1 == ($x0 + 1)) ? $x1 : ($x0 + 1) . ",$x1";
        $ystr = ($y1 == ($y0 + 1)) ? $y1 : ($y0 + 1) . ",$y1";
        if ($op == 1) {
          $out[] = "{$xstr}d{$y1}";
        }
        elseif ($op == 3) {
          $out[] = "{$xstr}c{$ystr}";
        }

        while ($x0 < $x1) {
          $out[] = '< ' . $t1[$x0];
          $x0++;
        } # deleted elems

        if ($op == 2) {
          $out[] = "{$x1}a{$ystr}";
        }
        elseif ($op == 3) {
          $out[] = '---';
        }

        while ($y0 < $y1) {
          $out[] = '> ' . $t2[$y0];
          $y0++;
        }   # added elems
      }
      $x1++;
      $x0 = $x1;
      $y1++;
      $y0 = $y1;
      $op = 0;
    }
    $out[] = '';
    return join("\n", $out);
  }

}