<?php

/**
 * @file
 * module provides modal frames with help information / cataloging instructions
 * for archibald
 */

/**
 * base path to help module
 */
define('ARCHIBALD_HELP_PATH', DRUPAL_ROOT . '/' . drupal_get_path('module', 'archibald_help') . '/');

/**
 * path to the help/instruction documents
 */
define('ARCHIBALD_HELP_DOCS', ARCHIBALD_HELP_PATH . "/docs");

/**
 * Implements hook_permission().
 */
function archibald_help_permission() {
  return array(
    'edit archibald help files' => array(
      'title' => t('Create and edit Archibald help files'),
      'description' => t('Create and edit Archibald help files'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function archibald_help_menu() {
  $items['admin/help/archibald'] = array(
    'title' => 'Archibald help system',
    'page callback' => 'archibald_help_get',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/archibald/help'] = array(
    'title' => 'Help file config',
    'description' => 'Set configuration values for the Archibald help system',
    'page callback' => 'archibald_help_config',
    'access arguments' => array('edit archibald help files'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 90,
  );


  $items['admin/content/archibald/help/edit'] = array(
    'title' => 'Edit Archibald help files',
    'description' => 'Edit custom help files',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_help_edit_files'),
    'access arguments' => array('edit archibald help files'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 *
 * Render some basic output for this module.
 */
function archibald_help_theme() {
  return array(
    // Sample theme functions.
    'archibald_help_config' => array(),
  );
}

/**
 * menu callback to display help configuration
 */
function archibald_help_config() {
  return theme('archibald_help_config');
}

/**
 * Displays formular to edit a help text item
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form. The arguments
 *   that drupal_get_form() was originally called with are available in the
 *   array $form_state['build_info']['args'].
 * @param string $identifier
 *   help item to edit
 */
function archibald_help_edit_files($form, $form_state, $identifier) {
  module_load_include('php', 'archibald', 'includes/Dir.class');

  $writeable = is_writable(ARCHIBALD_HELP_DOCS . '_own');
  if (!$writeable) {
    drupal_set_message(
      t('Help-Directory "' . ARCHIBALD_HELP_DOCS . '_own" not writeable, can not store files'),
      'error',
      FALSE
    );
  }

  $dir = new ArchibaldDir(ARCHIBALD_HELP_PATH . '/docs_own');
  $dir->justFiles();
  $dir->fileRegexp($identifier . '.htm');
  $translated_docs = $languages = array();
  foreach ($dir as $file) {
    if (!preg_match("/\/([a-zA-Z][a-zA-Z])$/", $file->directory, $matches)) {
      continue;
    }
    $translated_docs[$matches[1]] = 1;
  }

  $dir = new ArchibaldDir(ARCHIBALD_HELP_PATH . '/docs');
  $dir->justFiles();
  $dir->fileRegexp($identifier . '.htm');
  foreach ($dir as $file) {
    if (!preg_match("/\/([a-zA-Z][a-zA-Z])$/", $file->directory, $matches)) {
      continue;
    }

    $v = 0;
    if (isset($translated_docs[$matches[1]])) {
      $v = 1;
    }
    $languages[$matches[1]] = $v;
  }
  $form['fileidentifier'] = array(
    '#type' => 'hidden',
    '#default_value' => $identifier,
  );
  foreach ($languages as $lang => $translated) {

    $default_value = '';
    if ($translated == 1) {
      $default_value = file_get_contents(
        ARCHIBALD_HELP_DOCS . '_own/' . $lang . '/' . $identifier . '.htm'
      );
    }

    $form['language_' . $lang] = array(
      '#type' => 'textarea',
      '#title' => t('Translation for @lang', array('@lang' => $lang)),
      '#value' => $default_value,
      '#rows' => 5,
    );

    if (!$writeable) {
      $form['language_' . $lang]['#disabled'] = TRUE;
    }
  }

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 9999,
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#weight' => 9999,
  );
  return $form;
}

/**
 * Displays formular to edit a help text item submit handler
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form. The arguments
 *   that drupal_get_form() was originally called with are available in the
 *   array $form_state['build_info']['args'].
 */
function archibald_help_edit_files_submit($form, $form_state) {

  switch ($form_state['clicked_button']['#id']) {
    case 'edit-save':
      $error      = FALSE;
      $file_name  = ARCHIBALD_HELP_DOCS . '_own/%LANG%';
      $identifier = $form['fileidentifier']['#value'];
      $docname    = $identifier . '.htm';
      unset($form['fileidentifier']);
      foreach ($form as $k => $tmp_arr) {
        if (!preg_match("/^language_([a-z][a-z])$/", $k, $matches)) {
          continue;
        }

        $filename = str_replace('%LANG%', $matches[1], $file_name);

        if (!is_dir($filename)) {
          mkdir($filename, 0777);
        }


        if (!is_writeable($filename)) {
          if (!@chmod($filename, 0777)) {
            drupal_set_message(
              t('[Permission denied] Could not write to:') . $filename,
              'error'
            );

            $error = TRUE;
            continue;
          }
        }

        $filename .= '/' . $docname;

        if (!file_exists($filename)) {
          touch($filename);
        }

        if (!is_writeable($filename)) {
          if (!@chmod($filename, 0777)) {
            drupal_set_message(
              t('[Permission denied] Could not write to:') . $filename,
              'error'
            );
            $error = TRUE;
            continue;
          }
        }
        if (!empty($form_state['input'][$k])) {
          $fp = fopen($filename, 'w');
          fwrite($fp, $form_state['input'][$k]);
          fclose($fp);
        }
        else {
          unlink($filename);
        }
      }
      if ($error) {
        drupal_goto('admin/content/archibald/help/edit/' . $identifier);
        return;
      }
      break;
  }
  drupal_goto('admin/config/services/archibald_help');
}

/**
 * theme archibald help config overview
 *
 * @param array $variables
 *
 * @return string
 */
function theme_archibald_help_config($variables) {
  module_load_include('php', 'archibald', 'includes/Dir.class');

  $html = '';
  $table = array(
    'header' => array(
      t('Identifier'),
      t('Custom help files'),
    ),
    'rows' => array(),
  );

  $is_editor = (user_access('edit archibald help files') ||
    user_access('delete archibald help files')
  );
  if ($is_editor) {
    $table['header'][] = t('Options');
  }

  //@TODO cha: its not working any more, wha is with the subfoldes de, fr, it ...

  $translated_docs = array();
  $dir = new ArchibaldDir(ARCHIBALD_HELP_PATH . '/docs_own');
  $dir->justFiles();
  $dir->fileExtension('htm');

  foreach ($dir as $file) {
    $file->filename = str_replace('.' . $file->ext, '', $file->filename);
    if (!preg_match("/\/([a-zA-Z][a-zA-Z])$/", $file->directory, $matches)) {
      continue;
    }
    if (!isset($translated_docs[$file->filename])) {
      $translated_docs[$file->filename] = array();
    }
    $translated_docs[$file->filename][$matches[1]] = 1;
  }

  $dir = new ArchibaldDir(ARCHIBALD_HELP_PATH . '/docs');
  $dir->justFiles();
  $dir->fileExtension('htm');
  $files = array();
  foreach ($dir as $file) {
    $file->filename = str_replace('.' . $file->ext, '', $file->filename);
    if (!preg_match("/\/([a-zA-Z][a-zA-Z])$/", $file->directory, $matches)) {
      continue;
    }
    if (!isset($files[$file->filename])) {
      $files[$file->filename] = array();
    }
    $v = 0;
    if (isset($translated_docs[$file->filename][$matches[1]])) {
      $v = 1;
    }
    $files[$file->filename][$matches[1]] = $v;
  }

  $user_access_edit = user_access('edit archibald help files');

  // generate table from result set
  foreach ($files as $file => $languages) {

    $row = array($file);

    $translated_languages = array();
    foreach ($languages as $lang => $translated) {
      if ($translated == 0) {
        $translated_languages[] = "<strike>" . $lang . "</strike>";
      }
      else {
        $translated_languages[] = '' . $lang . '';
      }
    }
    $row[] = implode(' | ', $translated_languages);
    // if user is allowed to edit show options for this
    if ($is_editor) {
      $tmp = array();

      if ($user_access_edit) {
        $tmp[] = l(t('Edit'), 'admin/content/archibald/help/edit/' . $file);
      }

      $tmp = implode(' | ', $tmp);
      $row[] = $tmp;
    }

    $table['rows'][] = $row;
  }
  $html .= theme('table', $table);

  $html .= theme('pager');

  return $html;
}

/**
 * ajax callback for getting help layer content
 *
 * @global object $language
 *
 * @param string $id
 */
function archibald_help_get($id) {
  global $language;
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  $return = '';
  if (file_exists(ARCHIBALD_HELP_DOCS . '_own/' . $language->language . '/' . $id . '.htm')) {
    $return = file_get_contents(ARCHIBALD_HELP_DOCS . '_own/' . $language->language . '/' . $id . '.htm');
  }
  else {
    $return = file_get_contents(ARCHIBALD_HELP_DOCS . '/' . $language->language . '/' . $id . '.htm');
  }

  $commands = array(
    ctools_modal_command_display(t('Archibald help system'), $return),
  );
  print ajax_render($commands);
  exit;
}

/**
 * Implement hook_form_alter().
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form. The arguments
 *   that drupal_get_form() was originally called with are available in the
 *   array $form_state['build_info']['args'].
 * @param string $form_id
 *   String representing the name of the form itself. Typically this is the
 *   name of the function that generated the form.
 */
function archibald_archibald_help_form_content_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(
    drupal_get_path('module', 'archibald_help') . '/archibald_help.js'
  );

  drupal_add_css(
    drupal_get_path('module', 'archibald_help') . '/archibald_help.css'
  );
}

