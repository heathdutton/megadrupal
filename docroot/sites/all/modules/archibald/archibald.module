<?php

/**
 * @file
 * archibald (digital school library / digitale Schulbiliothek) / Archibald 2
 * module file
 */

define('ARCHIBALD_PATH', dirname(__FILE__) . '/');
define('ARCHIBALD_VERSION', 4.3);
//define('ARCHIBALD_PATH', DRUPAL_ROOT . '/' . drupal_get_path('module', 'archibald') . '/');

require_once ARCHIBALD_PATH . 'includes/archibald.fields.inc';
require_once ARCHIBALD_PATH . 'includes/archibald.form.inc';
require_once ARCHIBALD_PATH . 'includes/taxonomy_sync.inc';
require_once ARCHIBALD_PATH . 'includes/archibald.image_handler.inc';
require_once ARCHIBALD_PATH . 'includes/archibald.theme.inc';
require_once ARCHIBALD_PATH . 'includes/archibald.translate.inc';
require_once ARCHIBALD_PATH . 'includes/archibald.taxonomy.inc';

define('ARCHIBALD_RES_FIELD_OPTIONAL', '0');
define('ARCHIBALD_RES_FIELD_RECOMMEND', '1');
define('ARCHIBALD_RES_FIELD_REQUIRED', '2');

define('ARCHIBALD_PUBLISH_TOGETHER', 1);
define('ARCHIBALD_PUBLISH_SEPERATE', 0);

define('ARCHIBALD_WORKING_MODE_DEVELOPMENT', 0);
define('ARCHIBALD_WORKING_MODE_DEMO', 1);
define('ARCHIBALD_WORKING_MODE_LIVE', 2);

define('ARCHIBALD_PUBLISH_STATUS_NONE', 0);
define('ARCHIBALD_PUBLISH_STATUS_LOCAL', 1);
define('ARCHIBALD_PUBLISH_STATUS_CENTRAL', 2);
define('ARCHIBALD_PUBLISH_STATUS_LOCAL_CENTRAL', 3);

define('ARCHIBALD_DEFAULT_IDENTIFIER_FILE_EXTENSIONS', 'pdf doc docx odt xls xlsx ods ppt pttx opp gif jpg jpeg tiff png zip');

define('ARCHIBALD_FRONT_END_SESSION_SEARCH_KEY', 'archibald_search_query_frontend');
define('ARCHIBALD_FRONT_END_SESSION_SEARCH_FILTER', 'archibald_search_filter_frontend');

/**
 * Save site logo as a permanent file on form submission.
 */
function archibald_educa_system_theme_settings_form_submit(&$form, &$form_state) {
  $fid = $form_state['values']['site_logo'];
  $file = file_load($fid);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
}

/**
 * Implements hook_permission().
 */
function archibald_permission() {

  $permission_description = t('Without this permission the user cannot see/edit this field.');


  $content_partner_permissions = array();

  // Publish content partner permissions.
  foreach (archibald_load_content_partner() as $content_partner) {
    $content_partner_permissions['work for cp ' . $content_partner['content_partner_id']] = array(
      'title' => t('Work for content partner: @cp', array('@cp' => $content_partner['name'])),
      'description' => t('Allows to edit/add/delete descriptions for content partner @cp', array('@cp' => $content_partner['name'])),
    );
  }

  return $content_partner_permissions + array(
    'view archibald homepage' => array(
      'title' => t('View archibald homepage'),
      'description' => t('View archibald homepage'),
    ),
    'view archibald content' => array(
      'title' => t('View published descriptions'),
      'description' => t('View published descriptions'),
    ),
    'view archibald content revisions' => array(
      'title' => t('View description revisions'),
      'description' => t('View all published and unpublished revisions of a description'),
    ),
    'add archibald content' => array(
      'title' => t('Create descriptions (title and identifier)'),
      'description' => t('Enables user to create new descriptions with title and identifier'),
    ),
    'edit archibald content' => array(
      'title' => t('Edit descriptions (title and identifier)'),
      'description' => t('Enables user to edit descriptions (title and identifier)'),
    ),
    'delete archibald content' => array(
      'title' => t('Delete descriptions'),
      'description' => t('Delete descriptions'),
      'restrict access' => TRUE,
    ),
    'export archibald content' => array(
      'title' => t('Export a description to JSON'),
      'description' => t('This format is used by the API'),
    ),
    'translate archibald content' => array(
      'title' => t('Translate descriptions'),
      'description' => t('Translate descriptions into one more language.'),
    ),
    'change archibald content status' => array(
      'title' => t('Change description status'),
      'restrict access' => TRUE,
    ),
    'change archibald content partner' => array(
      'title' => t('Assign description to a content partner'),
      'restrict access' => TRUE,
    ),
    'publish archibald content central' => array(
      'title' => t('Publish descriptions to the national catalogue'),
      'restrict access' => TRUE,
    ),
    'publish archibald content local' => array(
      'title' => t('Publish descriptions to the local catalogue'),
      'restrict access' => TRUE,
    ),
    'manage archibald content' => array(
      'title' => t('Manage descriptions'),
      'description' => t('View descriptions in admin overview'),
    ),
    'manage archibald vcards' => array(
      'title' => t('Manage vCards'),
      'description' => t('Create and edit vCards'),
    ),
    'manage archibald coverages' => array(
      'title' => t('Manage coverages'),
      'description' => t('Create and edit coverages'),
    ),
    'manage archibald keywords' => array(
      'title' => t('Manage keywords'),
      'description' => t('Create and edit keywords'),
    ),

    //Field permissions
    // TAB :: General
    'archibald content field general description' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('general.description', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field general language' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('general.language', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field technical preview_image' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('technical.previewImage', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field technical preview_image_copyright_description' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('technical.previewImageCopyrightDescription', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field general life_cycle version' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('lifecycle.version', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field education aggregationLevel' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('education.aggregationLevel', TRUE)
      )),
      'description' => $permission_description,
    ),
    // TAB :: Contributors
    'archibald content field life_cycle contribute' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('lifecycle.contributor', TRUE)
      )),
      'description' => $permission_description,
    ),
    // TAB :: Tags
    'archibald content field keywords keyword' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('general.keyword', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field keywords coverage' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('general.coverage', TRUE)
      )),
      'description' => $permission_description,
    ),
    // TAB :: Rights
    'archibald content field rights cost' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('right.cost', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field rights description' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('right.description', TRUE)
      )),
      'description' => $permission_description,
    ),
    // TAB :: Education
    'archibald content field education description' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('education.description', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field education learningResourceTypeDocumentary' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => t('Educational Information') . ' > ' . t('Learning Resource type') . ' > ' . t('Documentary')
      )),
      'description' => $permission_description,
    ),
    'archibald content field education learningResourceTypePedagogical' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => t('Educational Information') . ' > ' . t('Learning Resource type') . ' > ' . t('Pedagogical')
      )),
      'description' => $permission_description,
    ),
    'archibald content field education intendedEndUserRole' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('education.intendedEndUserRole', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field education typicalAgeRange' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('education.typicalAgeRange', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field education typicalLearningTime' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('education.typicalLearningTime', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field education difficulty' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('education.difficulty', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field technical duration' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('technical.duration', TRUE)
      )),
      'description' => $permission_description,
    ),
    // TAB :: Classification
    'archibald content field classification context' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('classification.context', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field classification curriculums' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('classification.curriculums', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field classification defaultCurriculum' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('classification.defaultCurriculum', TRUE)
      )),
      'description' => $permission_description,
    ),
    // TAB :: Relations
    'archibald content field relations relation' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('relation.relation', TRUE)
      )),
      'description' => $permission_description,
    ),
    // TAB :: Technical Information
    'archibald content field technical location' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('technical.location', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field technical format' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('technical.format', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field technical size' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('technical.size', TRUE)
      )),
      'description' => $permission_description,
    ),
    'archibald content field technical otherPlattformRequirements' => array(
      'title' => t('Has right to add/edit the field "@field"', array(
        '@field' => archibald_get_field_label('technical.otherPlattformRequirements', TRUE)
      )),
      'description' => $permission_description,
    )
  );
}

/**
 * alter user view to show parsed vcard
 * Implements hook_user_view_alter().
 */
function archibald_user_view_alter(&$build, &$context) {
  module_load_include('inc', 'archibald', 'includes/archibald.contributor');

  if (isset($build['field_user_vcard'])) {
    $build['field_user_vcard'][0]['#markup'] = archibald_contributor_preview($build['field_user_vcard'][0]['#markup'], TRUE);
  }
}

/**
 * returns wether the user can upload a file as a general identifer or not
 * @staticvar array $cache
 *
 * @param string $lom_id
 *
 * @return boolean TRUE if allowed, FALSE if not
 */
function archibald_can_upload_general_identifer($lom_id = '') {
  $cache = &archibald_static(__FUNCTION__, array());

  if (isset($cache[$lom_id])) {
    return $cache[$lom_id];
  }

  if (!empty($lom_id)) {
    $status = archibald_get_lom_stats($lom_id);

    if (!empty($status->content_partner)) {
      // This applied when we also had the option to upload files by FTP
      // if (!empty($status->content_partner['username']) && $status->content_partner['file_server_type'] == 'no') {
      if ($status->content_partner['file_server_type'] == 'no') {
        $cache[$lom_id] = FALSE;
      }
      else {
        $cache[$lom_id] = TRUE;
      }

      return $cache[$lom_id];
    }
  }

  $file_server_configurated = FALSE;
  $is_a_content_partner_with_central_key = FALSE;
  foreach (archibald_load_content_partner() as $content_partner) {
    if ($content_partner['file_server_type'] != 'no') {
      $file_server_configurated = TRUE;
    }

    if (!empty($content_partner['username'])) {
      $is_a_content_partner_with_central_key = TRUE;
    }
  }

  if ($file_server_configurated == FALSE && $is_a_content_partner_with_central_key == FALSE) {
    // There is no content partner with can publish central and local you are permitted to upload what you want.
    $file_server_configurated = TRUE;
  }

  $cache[$lom_id] = $file_server_configurated;
  return $cache[$lom_id];
}

/**
 * Implements hook_form_FORM_ID_alter().
 * add modal frame and other js libs, to implement the user vCard selection
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form. The arguments that
 *   drupal_get_form() was originally called with are available in the array
 *   $form_state['build_info']['args'].
 */
function archibald_form_user_register_form_alter(&$form, &$form_state) {
  archibald_enable_user_hook();
}

/**
 * Implements hook_form_FORM_ID_alter().
 * add modal frame and other js libs, to implement the user vCard selection
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form. The arguments that
 *   drupal_get_form() was originally called with are available in the array
 *   $form_state['build_info']['args'].
 */
function archibald_form_user_profile_form_alter(&$form, &$form_state) {
  archibald_enable_user_hook();
}

/**
 * Implements hook_user_logout();
 */
function archibald_user_logout() {
  //Reset all double editing locks for this user
  archibald_prohibit_double_edit_checkout('', FALSE);
}

/**
 * Implements hook_user_delete();
 *
 * @param object $account
 *   The user account which was deleted.
 */
function archibald_user_delete($account) {

  // Set all owned descriptions to anonymous
  db_update('archibald_lom')
    ->fields(array(
      'uid' => NULL
    ))
    ->condition('uid', $account->uid)
    ->execute();

  // Update responseable person.
  db_update('archibald_lom_stats')
    ->fields(array(
      'responsible_uid' => NULL
    ))
    ->condition('responsible_uid', $account->uid)
    ->execute();

  // Update editing pereson.
  db_update('archibald_lom_stats')
    ->fields(array(
      'editing_uid' => NULL
    ))
    ->condition('editing_uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_menu().
 */
function archibald_menu() {
  $items['archibald'] = array(
    'title' => 'Search results',
    'type' => MENU_CALLBACK,
    'page callback' => 'archibald_content_overview',
    'access arguments' => array('view archibald homepage'),
    'file' => 'includes/archibald.overview.inc',
  );
  $items['archibald/%'] = array(
    'title' => 'dsb content',
    'access arguments' => array('view archibald content'),
    'page callback' => 'archibald_content_view',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.pages.inc',
  );

  $items['archibald/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/%/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => 'archibald_revision_overview',
    'page arguments' => array(1),
    'access arguments' => array('view archibald content revisions'),
    'weight' => 30,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/%/revisions/%/view'] = array(
    'title' => 'Revisions',
    'page callback' => 'archibald_content_view',
    'page arguments' => array(1, 3),
    'access arguments' => array('view archibald content revisions'),
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/%/json_export'] = array(
    'title' => 'JSON export',
    'page callback' => 'archibald_json_export',
    'page arguments' => array(1),
    'access arguments' => array('export archibald content'),
    'weight' => 40,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'archibald_content_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit archibald content'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/%/translate'] = array(
    'title' => 'Translate',
    'page callback' => 'archibald_translate_wizard',
    'page arguments' => array(1),
    'access arguments' => array('translate archibald content'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/archibald.translate.inc',
  );

  $items['archibald/%/translate/keywords'] = array(
    'title' => 'Manage keywords',
    'page callback' => 'archibald_translate_keywords',
    'page arguments' => array(1, 'keywords'),
    'access arguments' => array('translate archibald content'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/archibald.translate.inc',
  );

  $items['archibald/%/translate/coverages'] = array(
    'title' => 'Manage coverages',
    'page callback' => 'archibald_translate_keywords',
    'page arguments' => array(1, 'coverages'),
    'access arguments' => array('translate archibald content'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/archibald.translate.inc',
  );

  $items['admin/archibald/translate_term'] = array(
    'title' => 'Enter translations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_translate_form'),
    'access arguments' => array('translate archibald content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.translate.inc',
  );

  $items['archibald/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'archibald_content_delete',
    'page arguments' => array(1),
    'access arguments' => array('delete archibald content'),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/%/publish'] = array(
    'title' => 'Publish',
    'page callback' => 'archibald_content_publish',
    'page arguments' => array(1),
    'access callback' => 'archibald_check_publish_access',
    'weight' => 40,
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.publish.inc',
  );
  $items['archibald/%/publish/status/central'] = array(
    'title' => 'Publish status national',
    'page callback' => 'archibald_content_publish_central_status',
    'page arguments' => array(1),
    'access arguments' => array('publish archibald content central'),
    'weight' => 40,
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.publish.inc',
  );
  $items['archibald/publish/status/central'] = array(
    'title' => 'Publish status national',
    'page callback' => 'archibald_content_publish_central_status_all',
    'page arguments' => array(),
    'access arguments' => array('publish archibald content central'),
    'weight' => 40,
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.publish.inc',
  );
  $items['archibald/publish/status/central/status'] = array(
    'title' => 'Publish status national',
    'page callback' => 'archibald_content_publish_central_status_all_status',
    'page arguments' => array(),
    'access arguments' => array('publish archibald content central'),
    'weight' => 40,
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.publish.inc',
  );
  $items['archibald/%/set_status'] = array(
    'title' => 'Set status selector',
    'page callback' => 'archibald_content_set_status',
    'page arguments' => array(1),
    'access arguments' => array('change archibald content status'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );
  $items['archibald/%/set_status/form'] = array(
    'title' => 'Set status selector',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_content_set_status_form'),
    'access arguments' => array('change archibald content status'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );


  $items['archibald/change_log/%'] = array(
    'title' => 'Modifications finished?',
    'page callback' => 'archibald_change_log',
    'page arguments' => array(2),
    'access callback' => 'archibald_check_publish_access',
    //'access arguments' => array('manage dsb content', 'edit dsb content', 'translate dsb content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );

  $items['archibald/%/set_new_responsible/form'] = array(
    'title' => 'Change person responsible',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_content_set_responsible_form'),
    'access arguments' => array('edit archibald content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );
  $items['archibald/%/set_new_responsible'] = array(
    'title' => 'Change person responsible',
    'page callback' => 'archibald_content_set_responsible',
    'page arguments' => array(1),
    'access arguments' => array('edit archibald content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );
  $items['archibald/%/set_content_partner'] = array(
    'title' => 'Change content partner',
    'page callback' => 'archibald_content_set_content_partner',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );
  $items['archibald/%/log'] = array(
    'title' => 'Publication log',
    'page callback' => 'archibald_dblog_overview',
    'page arguments' => array(1),
    'access arguments' => array('edit archibald content'),
    'weight' => 40,
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.pages.inc',
  );

  $items['archibald/%/edit_final/%'] = array(
    'title' => 'Set status selector',
    'page callback' => 'archibald_content_edit_final',
    'page arguments' => array(1, 3),
    'access arguments' => array('edit archibald content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );

  $items['archibald/add'] = array(
    'title' => 'Add content',
    'page callback' => 'archibald_content_edit',
    'page arguments' => array('add'),
    'access callback' => 'archibald_content_add_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/add/%'] = array(
    'title' => 'Add content',
    'page callback' => 'archibald_content_edit',
    'access callback' => 'archibald_content_add_access',
    'page arguments' => array('add', 2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.pages.inc',
  );
  $items['archibald/add/%/%/copy'] = array(
    'title' => 'Add content',
    'page callback' => 'archibald_content_edit',
    'access arguments' => array('add archibald content'),
    'page arguments' => array('add', 2, 3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.pages.inc',
  );


  // admin content overview
  $items['admin/archibald'] = array(
    'title' => 'Descriptions',
    'page callback' => 'archibald_admin_content_overview',
    'page arguments' => array('draft'),
    'access arguments' => array('manage archibald content'),
    'file' => 'includes/archibald.pages.inc',
    'weight' => -10,
  );
  $items['admin/archibald/proposal'] = array(
    'title' => 'Proposals',
    'page callback' => 'archibald_admin_content_overview',
    'page arguments' => array('unavailable'),
    'access callback' => 'archibald_multi_access',
    'access arguments' => array('manage archibald content', 'edit archibald content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -40,
    'file' => 'includes/archibald.pages.inc',
  );

  $items['admin/archibald/in_progress'] = array(
    'title' => 'In progress',
    'page callback' => 'archibald_admin_content_overview',
    'page arguments' => array('draft'),
    'access callback' => 'archibald_multi_access',
    'access arguments' => array('manage archibald content', 'edit archibald content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
    'file' => 'includes/archibald.pages.inc',
  );

  if (!archibald_can_publish_central()) {
    // ARCHIBALD_PUBLISH no central available
    $items['admin/archibald/to_publish'] = array(
      'title' => 'To publish',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('to_publish_local'),
      'access callback' => 'archibald_check_publish_access',
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
      'file' => 'includes/archibald.pages.inc',
    );

    $items['admin/archibald/published'] = array(
      'title' => 'Published',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('published_local'),
      'access callback' => 'archibald_check_publish_access',
      'type' => MENU_LOCAL_TASK,
      'weight' => -8,
      'file' => 'includes/archibald.pages.inc',
    );
  }
  elseif (variable_get('archibald_publish_type', ARCHIBALD_PUBLISH_SEPERATE) == ARCHIBALD_PUBLISH_SEPERATE) {

    $items['admin/archibald/to_publish'] = array(
      'title' => 'To publish',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('to_publish_local'),
      'access callback' => 'archibald_check_publish_access',
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
      'file' => 'includes/archibald.pages.inc',
    );
    $items['admin/archibald/to_publish/local'] = array(
      'title' => 'Locally',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('to_publish_local'),
      'access arguments' => array('publish archibald content local'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
      'file' => 'includes/archibald.pages.inc',
    );
    $items['admin/archibald/to_publish/central'] = array(
      'title' => 'Nationally',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('to_publish'),
      'access arguments' => array('publish archibald content central'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
      'file' => 'includes/archibald.pages.inc',
    );

    $items['admin/archibald/published'] = array(
      'title' => 'Published',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('published_local'),
      'access callback' => 'archibald_check_publish_access',
      'type' => MENU_LOCAL_TASK,
      'weight' => -8,
      'file' => 'includes/archibald.pages.inc',
    );

    $items['admin/archibald/published/local'] = array(
      'title' => 'Locally',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('published_local'),
      'access arguments' => array('publish archibald content local'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
      'file' => 'includes/archibald.pages.inc',
    );

    $items['admin/archibald/published/central'] = array(
      'title' => 'Nationally',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('published'),
      'access arguments' => array('publish archibald content central'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 5,
      'file' => 'includes/archibald.pages.inc',
    );
  }
  else {

    // ARCHIBALD_PUBLISH_TOGETHER
    $items['admin/archibald/to_publish'] = array(
      'title' => 'To publish',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('to_publish_local'),
      'access callback' => 'archibald_check_publish_access',
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
      'file' => 'includes/archibald.pages.inc',
    );

    $items['admin/archibald/published'] = array(
      'title' => 'Published',
      'page callback' => 'archibald_admin_content_overview',
      'page arguments' => array('published'),
      'access callback' => 'archibald_check_publish_access',
      'type' => MENU_LOCAL_TASK,
      'weight' => -8,
      'file' => 'includes/archibald.pages.inc',
    );
  }

  $items['admin/archibald/batch_ops'] = array(
    'title' => 'Batch operations',
    'page callback' => 'archibald_admin_batch_ops',
    'access callback' => 'archibald_check_batch_operation_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.batch_ops.inc',
  );

  $items['admin/archibald/batch_ops/ajax'] = array(
    'title' => 'Batch operations Ajax',
    'page callback' => 'archibald_admin_batch_ops_ajax',
    'access callback' => 'archibald_check_batch_operation_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.batch_ops.inc',
  );

  $items['admin/archibald/to_republish'] = array(
    'title' => 'Descriptions to republish',
    'page callback' => 'archibald_admin_to_republish',
    'access callback' => 'archibald_multi_access',
    'access arguments' => array('publish archibald content central', 'publish archibald content local'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.pages.inc',
  );


  $items['admin/config/services/archibald'] = array(
    'title' => 'Configuration for Archibald',
    'description' => 'Set configuration values for Archibald',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/archibald.admin.inc',
  );


  // administration stuff
  $items['admin/config/services/archibald/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/archibald/fields'] = array(
    'title' => 'LOM metadata-fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_admin_settings_fields'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/archibald.admin.inc',
    'weight' => 4,
  );

  $items['admin/config/services/archibald/fields_proposal'] = array(
    'title' => 'LOM metadata-fields (proposal)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_admin_settings_fields_proposal'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/archibald.admin.inc',
    'weight' => 4,
  );

  $items['admin/config/services/archibald/settings/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_content_partner_edit_form'),
    'file' => 'includes/archibald.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/archibald/settings/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_content_partner_delete_form'),
    'file' => 'includes/archibald.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/archibald/settings/add'] = array(
    'title' => 'Add new content partner',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_content_partner_edit_form'),
    'file' => 'includes/archibald.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/archibald/languages'] = array(
    'title' => 'Language settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_admin_settings_language'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/archibald.admin.inc',
    'weight' => 10,
  );

  $items['admin/config/services/archibald/solr'] = array(
    'title' => 'Solr search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archibald_admin_settings_solr'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/archibald.admin.inc',
    'weight' => 10,
  );

  // ajax callbacks
  $items['archibald_contributor'] = array(
    'title' => 'vCard',
    'description' => 'Choose or add contributor',
    'page callback' => 'archibald_choose_contributor',
    'access callback' => "archibald_can_change_vcards",
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.contributor.inc',
  );
  $items['archibald_contributor/preview'] = array(
    'title' => 'Contributor\'s vCard preview',
    'description' => 'Display preview of contributor\'s vCard.',
    'page callback' => 'archibald_contributor_preview',
    'access callback' => "archibald_can_change_vcards",
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.contributor.inc',
  );
  $items['archibald_contributor/add'] = array(
    'title' => 'Add vCard',
    'page callback' => 'archibald_contributor_add',
    'page arguments' => array(),
    'access callback' => "archibald_can_change_vcards",
    'type' => MENU_CALLBACK,
    // Need this because required functions are within contributor.inc
    'file' => 'includes/archibald.contributor.inc',
  );
  $items['archibald_contributor/edit'] = array(
    'title' => 'Edit vCard',
    'page callback' => 'archibald_contributor_edit',
    'page arguments' => array(),
    'access callback' => "archibald_can_change_vcards",
    'type' => MENU_CALLBACK,
    // Need this because required functions are within contributor.inc
    'file' => 'includes/archibald.contributor.inc',
  );
  $items['archibald_contributor/delete'] = array(
    'title' => 'Delete vCard',
    'page callback' => 'archibald_contributor_delete',
    'page arguments' => array(),
    'access callback' => "archibald_can_change_vcards",
    'type' => MENU_CALLBACK,
    // Need this because required functions are within contributor.inc
    'file' => 'includes/archibald.contributor.inc',
  );
  $items['archibald_contributor/get'] = array(
    'title' => 'Find vCard',
    'page callback' => 'archibald_contributor_get',
    'page arguments' => array(),
    'access callback' => "archibald_can_change_vcards",
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.contributor.inc',
  );
  $items['archibald_contributor/choose'] = array(
    'title' => 'Choose vCard',
    'page callback' => 'archibald_contributor_choose',
    'page arguments' => array(),
    'access callback' => "archibald_can_change_vcards",
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.contributor.inc',
  );
  $items['admin/archibald/classification'] = array(
    'title' => 'Curricula',
    'description' => 'Add or remove classification',
    'page callback' => 'archibald_classification_ajax',
    'access callback' => "archibald_can_add_or_delete_resources",
    'type' => MENU_CALLBACK,
    'file' => 'form/form_classification.inc',
  );

  //get the autocomplete values
  $items['archibald/autocomplete'] = array(
    'title' => 'Auto complete search in LangStrings',
    'page callback' => 'archibald_autocomplete_data',
    'access callback' => "archibald_can_add_or_delete_resources",
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );

  $items['archibald/user_editor_autocomplete'] = array(
    'title' => 'Auto complete search in users',
    'page callback' => 'archibald_user_editor_autocomplete_data',
    'access callback' => "archibald_can_add_or_delete_resources",
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );

  $items['archibald_vcard'] = array(
    'title' => 'Display vCard',
    'access arguments' => array('view archibald content'),
    'page callback' => 'archibald_vcard',
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );

  // file handler
  $items['archibald_file'] = array(
    'title' => 'Download file',
    'page callback' => 'archibald_file_download',
    'access arguments' => array('view archibald content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );

  $items['archibald_file_preview'] = array(
    'title' => 'Preview image',
    'page callback' => 'archibald_file_preview_image',
    'access arguments' => array('view archibald content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/archibald.ajax.inc',
  );

  // prohibit double edit
  $items['archibald_prohibit_double_edit/ping'] = array(
    'page callback' => 'archibald_prohibit_double_edit_ping',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['archibald_prohibit_double_edit/checkout'] = array(
    'page callback' => 'archibald_prohibit_double_edit_checkout',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );


  $items['archibald/%/revisions/%/view/edit'] = $items['archibald/%/edit'];
  $items['archibald/%/revisions/%/view/translate'] = $items['archibald/%/translate'];
  $items['archibald/%/revisions/%/view/delete'] = $items['archibald/%/delete'];
  $items['archibald/%/revisions/%/view/revisions'] = $items['archibald/%/revisions'];


  $items['admin/archibald/other'] = array(
    'title' => 'More',
    'page callback' => 'archibald_choose_contributor',
    'page arguments' => array('standalone'),
    'access arguments' => array('manage archibald vcards'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'file' => 'includes/archibald.contributor.inc',
  );

  $items['admin/archibald/other/vcards'] = $items['admin/archibald/other'];
  $items['admin/archibald/other/vcards']['title'] = 'vCards';
  $items['admin/archibald/other/vcards']['type'] = MENU_DEFAULT_LOCAL_TASK;

  $items['admin/archibald/other/archibald_keywords'] = array(
    'title' => 'Archibald keywords',
    'description' => 'Manage archibald keywords',
    'page callback' => 'archibald_admin_manage_keywords',
    'access arguments' => array('manage archibald keywords'),
    'file' => 'includes/archibald.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/archibald/other/archibald_keyword/%/edit'] = array(
    'title' => 'Edit archibald keyword',
    'description' => 'Edit archibald keyword',
    'page callback' => 'archibald_admin_edit_keyword',
    'page arguments' => array(4),
    'access arguments' => array('manage archibald keywords'),
    'file' => 'includes/archibald.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/archibald/other/archibald_keyword/%/delete'] = array(
    'title' => 'Delete archibald keyword',
    'description' => 'Delete archibald keyword',
    'page callback' => 'archibald_admin_manage_keywords',
    'page arguments' => array('delete', 4),
    'access arguments' => array('manage archibald keywords'),
    'file' => 'includes/archibald.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/archibald/other/archibald_coverages'] = array(
    'title' => 'Archibald coverages',
    'description' => 'Manage archibald coverages',
    'page callback' => 'archibald_admin_manage_coverages',
    'access arguments' => array('manage archibald coverages'),
    'file' => 'includes/archibald.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/archibald/other/archibald_coverages/add'] = array(
    'title' => 'Add coverage',
    'description' => 'Add coverage',
    'page callback' => 'archibald_admin_add_coverages',
    'access arguments' => array('manage archibald coverages'),
    'file' => 'includes/archibald.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/archibald/other/archibald_coverage/%/edit'] = array(
    'title' => 'Edit archibald coverage',
    'description' => 'Edit archibald coverage',
    'page callback' => 'archibald_admin_edit_coverage',
    'page arguments' => array(4),
    'access arguments' => array('manage archibald coverages'),
    'file' => 'includes/archibald.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/archibald/other/archibald_coverage/%/delete'] = array(
    'title' => 'Delete archibald coverage',
    'description' => 'Delete archibald coverage',
    'page callback' => 'archibald_admin_manage_coverages',
    'page arguments' => array('delete', 4),
    'access arguments' => array('manage archibald coverages'),
    'file' => 'includes/archibald.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_page_alter().
 * If a user can add proposals, we force the seven theme.
 * This hook will remain until we create a theme that displays forms
 * that behave well in all resolutions/screen sizes
 */
function archibald_page_alter(&$page) {
  if (archibald_content_add_access() && preg_match('/^archibald\/add.*$/i', current_path())) {
    global $theme_key;
    if ($theme_key =='seven') {
      try {
        unset($page['content']['user_login']);
      } catch (Exception $e) {
        print($e->getMessage());
      }
    }
  }
}

/**
 * Implements hook_js_alter().
 * If a user can add proposals, and for all ajax calls responses, we force the seven theme.
 * This hook will remain until we create a theme that displays forms
 * that behave well in all resolutions/screen sizes
 */
function archibald_js_alter(&$javascript) {
  if (archibald_content_add_access() && (preg_match('/^archibald\/add.*$/i', current_path()) || preg_match('/.*\/ajax.*$/i', current_path()) || preg_match('/.*\/archibald\/classification\/.*$/i', current_path()))) {
    $themes = list_themes();

    if (isset($themes['seven'])) {
      $theme_key = 'seven';
      $javascript['settings']['ajaxPageState'] = array(
        'theme' => $theme_key, 'theme_token' => drupal_get_token($theme_key)
      );
      $javascript['settings']['data'][2]['ajaxPageState'] = array(
        'theme' => $theme_key, 'theme_token' => drupal_get_token($theme_key)
      );
    }
  }
}

/**
 * Implements ajax_render_alter().
 * If a user can add proposals, and for all ajax calls responses, we force the seven theme.
 * This hook will remain until we create a theme that displays forms
 * that behave well in all resolutions/screen sizes
 */
function archibald_ajax_render_alter(&$commands) {
  if (archibald_content_add_access() && (preg_match('/.*\/archibald\/classification\/.*$/i', current_path()))) {
    $themes = list_themes();

    if (isset($themes['seven'])) {
      $theme_key = 'seven';
      $commands[0]['settings']['ajaxPageState'] = array(
        'theme' => $theme_key, 'theme_token' => drupal_get_token($theme_key)
      );
      if( isset($commands[1]) && $commands[1]['command'] == 'add_css'  ) unset( $commands[1] );
      if( isset($commands[1]) && $commands[1]['command'] == 'insert'  ) unset( $commands[1] );
      unset($commands[0]['settings']['css']);
      unset($commands[0]['settings']['js']);
    }
  }
}


/**
 * Implements hook_custom_theme().
 * If a user can add proposals, we force the seven theme and add proposals css.
 * This hook will remain until we create a theme that displays forms
 * that behave well in all resolutions/screen sizes
 */
function archibald_custom_theme() {

  drupal_add_library('system', 'jquery.cookie');

  if (archibald_content_add_access() && preg_match('/.*\/ajax.*$/i', current_path()) || preg_match('/^archibald\/add.*$/i', current_path()) || preg_match('/^archibald\/.*\/edit.*$/i', current_path())) {
    // Uncomment this to enable jquery UI tooltips. Requires jquery => 1.4
    // drupal_add_css(drupal_get_path('module', 'archibald') . '/css/ui-lightness/jquery-ui-1.10.1.custom.min.css');
    // drupal_add_js(drupal_get_path('module', 'archibald') . '/js/jquery-ui-1.10.1.custom.min.js');
    drupal_add_css(drupal_get_path('module', 'archibald') . '/css/proposal.css');
    $themes = list_themes();
    if (isset($themes['seven'])) {
      $theme_key = 'seven';
      return $theme_key;
    }
  }
  return FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function archibald_admin_paths() {
  $pathes = archibald_menu();
  $admin_pathes = array();
  $regexp = "/^archibald(\/%(\/(view|revisions\/%\/view))?)?$/";
  foreach ($pathes AS $path => &$v) {
    if (!preg_match($regexp, $path) && $path != 'archibald_contributor') {
      $replaced_path = str_replace("%", "*", $path);
      $admin_pathes[$replaced_path] = TRUE;
      if (preg_match("/^archibald_contributor\/[^\/]/", $path)) {
        $admin_pathes[$replaced_path . '/*'] = TRUE;
      }

    }
  }
  unset($admin_pathes['archibald/*/publish']);
  return $admin_pathes;
}

/**
 * Implements hook_theme().
 *
 * Render some basic output for this module.
 */
function archibald_theme() {
  return array(
    'archibald_content_choose_language' => array(
      'arguments' => array(
        'lang_list' => array(),
        'lom_id' => 'add',
      ),
    ),
    'archibald_language_settings' => array(
      'render element' => 'form',
    ),
    'archibald_two_column_checkbox' => array(
      'render element' => 'form',
    ),
    'archibald_general' => array(
      'render element' => 'form',
    ),
    'archibald_general_identifier' => array(
      'render element' => 'form',
    ),
    'archibald_keywords' => array(
      'render element' => 'form',
    ),
    'archibald_general_keyword' => array(
      'render element' => 'form',
    ),
    'archibald_general_coverage' => array(
      'render element' => 'form',
    ),
    'archibald_education' => array(
      'render element' => 'form',
    ),
    'archibald_education_typical_age_range' => array(
      'render element' => 'form',
    ),
    'archibald_technical' => array(
      'render element' => 'form',
    ),
    'archibald_technical_duration' => array(
      'render element' => 'form',
    ),
    'archibald_rights' => array(
      'render element' => 'form',
    ),
    'archibald_classification' => array(
      'render element' => 'form',
    ),
    'archibald_duration_form' => array(
      'render element' => 'form',
    ),
    'archibald_life_cycle_contribute' => array(
      'render element' => 'form',
    ),
    'archibald_relations_relation' => array(
      'render element' => 'form',
    ),
    'archibald_admin_content_overview_form' => array(
      'render element' => 'form',
    ),
    'archibald_admin_content_overview' => array(
      'arguments' => array(
        'search_result' => array(),
        'search_form' => array(),
        'search_result_count' => 0,
        'type' => '',
      ),
    ),
    'archibald_content_view' => array(
      'arguments' => array(
        'lom' => NULL,
        'additional' => array(),
      ),
      'template' => 'templates/archibald_content_view',
    ),
    'archibald_content_view_curriculum_educa' => array(
      'arguments' => array(
        'entrys' => array(),
        'action' => 'view',
      ),
      'template' => 'templates/archibald_content_view_curriculum_educa',
    ),
    'archibald_content_view_curriculum_per' => array(
      'arguments' => array(
        'entrys' => array(),
        'action' => 'view',
      ),
      'template' => 'templates/archibald_content_view_curriculum_per',
    ),
    'archibald_content_view_curriculum_per_details' => array(
      'arguments' => array(
        'objectiv' => new stdClass(),
        'action' => 'view',
      ),
      'template' => 'templates/archibald_content_view_curriculum_per_details',
    ),
    'archibald_content_overview' => array(
      'arguments' => array(
        'search_form' => array(),
        'search_result' => array(),
        'search_result_count' => 0,
      ),
      'template' => 'templates/archibald_content_overview',
    ),
    'archibald_content_overview_row' => array(
      'arguments' => array(
        'row' => array(),
      ),
      'template' => 'templates/archibald_content_overview_row',
    ),
    'archibald_content_overview_form' => array(
      'render element' => 'form',
      'file' => 'includes/archibald.overview.inc',
    ),
    'archibald_choose_contributor_search' => array(
      'arguments' => array(
        'search_result' => array(),
        'query' => '',
        'pages' => 1,
        'page' => 1,
        'ajax' => FALSE,
        'contributor_id' => '',
      ),
      'file' => 'includes/archibald.contributor.inc',
    ),
    'archibald_choose_contributor_search_form' => array(
      'render element' => 'form',
      'file' => 'includes/archibald.contributor.inc',
    ),
    'archibald_choose_contributor_preview' => array(
      'arguments' => array(
        'vcard' => NULL,
      ),
      'file' => 'includes/archibald.contributor.inc',
    ),
    'archibald_image' => array(
      'variables' => array(
        'image' => NULL,
        'style' => NULL,
      ),
    ),
    'archibald_admin_batch_ops' => array(
      'file' => 'includes/archibald.batch_ops.inc',
    ),
    'archibald_admin_batch_ops_ajax' => array(
      'file' => 'includes/archibald.batch_ops.inc',
    ),
    'archibald_admin_content_overview_reponsible' => array(
      'variables' => array(
        'uid' => '',
        'name' => '',
        'lom_id' => '',
      ),
      'file' => 'includes/archibald.pages.inc',
    ),
    'archibald_admin_content_publish_status' => array(
      'variables' => array(
        'res_row' => new stdClass(),
      ),
      'file' => 'includes/archibald.publish.inc',
    ),
    'archibald_dblog_message' => array(
      'variables' => array(
        'event' => NULL,
        'link' => FALSE,
      ),
      'file' => 'includes/archibald.pages.inc',
    ),
    'archibald_content_publish_central_status' => array(
      'variables' => array(
        'lom' => NULL,
        'status' => new stdClass(),
      ),
      'file' => 'includes/archibald.publish.inc',
    ),
    'archibald_content_publish_central_status_all' => array(
      'variables' => array(
        'resources' => array(),
      ),
      'file' => 'includes/archibald.publish.inc',
    ),
    'archibald_content_set_status_faulty' => array(
      'variables' => array(
        'lom' => new stdClass(),
        'errors' => array(),
      ),
      'file' => 'includes/archibald.ajax.inc',
    ),
    'archibald_search_block_form' => array(
      'render element' => 'form',
      'template' => 'templates/archibald_search_block_form',
    ),
    'archibald_admin_settings_fields' => array(
      'render element' => 'form',
    ),
    'archibald_lom_identifier' => array(
      'arguments' => array(
        'identifier' => NULL,
        'just_link' => FALSE,
        'force_title' => '',
      ),
    ),
    'archibald_admin_to_republish' => array(
      'arguments' => array(
        'search_result' => array(),
        'confirmation_form' => NULL,
        'search_result_count' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function archibald_block_info() {
  $blocks = array();
  $blocks['search_form']['info'] = t('Search form');
  // Not worth caching.
  $blocks['search_form']['cache'] = DRUPAL_NO_CACHE;
  $blocks['search_form']['properties']['administrative'] = TRUE;

  $blocks['workspace']['info'] = t('My workspace');
  // Not worth caching.
  $blocks['workspace']['cache'] = DRUPAL_NO_CACHE;
  $blocks['workspace']['properties']['administrative'] = TRUE;

  $blocks['select_language_switcher'] = array(
    'info' => t('Language switcher (Selectfield)'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *   Which block to render. This is a unique identifier for the block
 *   within the module, defined in hook_block_info().
 */
function archibald_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'select_language_switcher':
      drupal_add_js(drupal_get_path('module', 'archibald') . '/js/archibald_select_language_switcher.js');
      drupal_add_css(drupal_get_path('module', 'archibald') . '/css/archibald_select_language_switcher.css');

      /* This code is almost from locale.module with a bit of modifications
       * Instead of themeing it using theme('links') we'll theme our own dropdown
       */
      global $language;

      $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
      $languages = language_list();
      $options = array();
      foreach ($languages as $lang_item) {
        $options[$lang_item->language] = array(
          'href' => $path,
          'title' => $lang_item->native,
          'language' => $lang_item,
        );
      }
      $all_options = $options;
      drupal_alter('translation_link', $options, $path);

      // add a link to the home page for languages with no content
      $untranslated = array_diff_key($all_options, $options);
      if (count($untranslated)) {
        foreach ($untranslated as $langkey => $option_untranslated) {
          $untranslated[$langkey]['href'] = '<front>';
        }
        $path_front = '<front>';
        drupal_alter('translation_link', $untranslated, $path_front);
        // maintain the normal language menu order when merging in the front page links
        $newoptions = array();
        foreach ($languages[1] as $language_item) {
          $lang = $language_item->language;
          if (isset($options[$lang])) {
            $newoptions[$lang] = $options[$lang];
          }
          elseif (isset($untranslated[$lang])) {
            $newoptions[$lang] = $untranslated[$lang];
          }
        }
        $options = $newoptions;
      }

      /* Here we theme our own dropdown */
      $select_options = array();
      foreach ($options as $lang_option) {
        $selected = '';
        if ($language->language == $lang_option['language']->language) {
          $selected = ' selected="selected"';
        }
        if (!intval($lang_option['language']->enabled)) {
          continue;
        }

        $url = url($lang_option['href'], array('language' => $lang_option['language']));
        $select_options[] = '<option value="' . $url . '"' . $selected . '>' . $lang_option['title'] . '</option>';
      }

      $block['content'] = "<div class='archibald_select_language_switcher_block'><span>" . t('Interface language') . "</span><select class='archibald_select_language_switcher'>" . implode("", $select_options) . "</select></div>";
      break;
    case 'search_form':
      if (user_access('view archibald content')) {
        $block['content'] = drupal_get_form('archibald_search_block_form');
      }
      break;

    case 'workspace':
      if (user_access('manage archibald content') &&
        user_access('edit archibald content')
      ) {
        module_load_include('inc', 'archibald', 'includes/archibald.pages');
        $block['content'] = archibald_admin_content_overview('own');
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_init().
 *
 * provides settings to js for several actions and needs
 */
function archibald_init() {
  drupal_add_js(array(
      'archibald' => array(
        'urls' => array(
          'archibald_file' => url('archibald_file'),
          'archibald_file_preview' => url('archibald_file_preview'),
          'archibald_vcard' => url('archibald_vcard'),
          'archibald_clinet_overview' => url('archibald'),
          'module_base_path' => base_path() . drupal_get_path('module', 'archibald')
        ),
      ),
    ), 'setting');
}

/**
 * load a current version of a lom object from database by id
 *
 * @param string $lom_id
 * @param string $version
 * @param boolean $use_cache
 *   default TRUE
 *
 * @return ArchibaldLom
 */
function archibald_load($lom_id, $version = '', $use_cache = TRUE) {
  return ArchibaldLomSaveHandler::load($lom_id, $version, $use_cache);
}

/**
 * save a lom object to database
 *
 * @param ArchibaldLom $lom
 * @param string $version
 *  reference
 *
 * @return string lom_id
 */
function archibald_save(ArchibaldLom $lom, &$version = '') {
  if ($lom->getLomId() != '') {
    return ArchibaldLomSaveHandler::update($lom, $version);
  }
  else {
    return ArchibaldLomSaveHandler::insert($lom, $version);
  }
}

/**
 * generate parseabel filename for identifier entry field
 *
 * @param object $file
 *
 * @return string
 */
function archibald_file_get_url($file) {
  return 'archibald_file/' . $file->fid . '/' . $file->filename;
}

/**
 * handle langstring saving
 *
 * @param ArchibaldLomDataLangString $lang_string
 * @param string $language
 * @param string $new_string
 * @param boolean $keep_lang_string
 *  default TRUE
 *
 * @return ArchibaldLomDataLangString
 * @cha, 26.06.2012
 * Disabled spellcheck
 *
 * removed parameter $keep_lang_string = TRUE
 */
function archibald_langstring_submit($lang_string, $language, $new_string, $keep_lang_string = TRUE) {

  if (!($lang_string instanceof ArchibaldLomDataLangString)) {
    $lang_string = new ArchibaldLomDataLangString();
  }
  elseif ($keep_lang_string != TRUE) {
    $new_lang_string = new ArchibaldLomDataLangString();
    $new_lang_string->strings = $lang_string->strings;
    $lang_string = $new_lang_string;
  }

  $lang_string->setString($new_string, $language);

  return $lang_string;
}

/**
 * Implements hook_cron().
 * Perform the synchronization process between archibald and ontology service.
 * Perform publishing process
 * Perform solr search indexing
 */
function archibald_cron() {
  // Only sync taxonomies with ontology server max all 4 hours,
  // but sync taxonomies in case cron is run manually (if $_GET['cron_key'] is not set)

  // If this is set to TRUE, force taxonomy handling to be ignored
  $debug = FALSE;

  if( !$debug ) {
    if (variable_get('archibald_last_sync_taxonomy', 0) + (60 * 60 * 4) < time() || !isset($_GET['cron_key'])) {
      archibald_sync_taxonomy_os('lom-v1');
      archibald_sync_taxonomy_os('educa_standard_curriculum');

      // At the moment the variable 'archibald_ontology_sync_licences' is not set in the
      // archibald configuration. See archibald/includes/archibald.admin.inc: 668 and 898
      if (variable_get('archibald_ontology_sync_licences', 0) == 1) {
        archibald_sync_taxonomy_os('lom-v1-installation');
      }

      variable_set('archibald_last_sync_taxonomy', time());

      $dir = DRUPAL_ROOT . '/' . drupal_get_path('module', 'archibald') . '/includes/';

      foreach (scandir($dir) as $file) {
        if (preg_match('/^curriculum_([a-z0-9]+)\.class\.php$/i', $file, $curriculum)) {
          $curriculum[1];
          $curr_name = 'curriculum_' . $curriculum[1];
          module_load_include(
            'php', 'archibald', 'includes/curriculum/' . $curr_name . '.class'
          );

          $curr_handler = new $curr_name();
          if (method_exists($curr_handler, 'setup_process')) {
            $curr_handler->setup_process();
          }
        }
      }
    }
  }

  module_load_include('php', 'archibald', 'includes/LomPublish.class');
  $archibald_lom_publish = new ArchibaldLomPublish();
  $archibald_lom_publish->cron();

  if (module_exists('apachesolr') && variable_get('archibald_solr_search_activ', 0) == 1) {
    module_load_include('php', 'archibald', 'includes/LomSolrSearch.class');
    $archibald_lom_solr_search = new ArchibaldLomSolrSearch();
    $archibald_lom_solr_search->cron();
  }
}

/**
 * get current language object by its name
 *
 * @global Object $language
 * @global type $languages
 *
 * @param string $code
 *
 * @return array
 */
function archibald_get_language_by_code($code) {
  global $language, $languages;
  if ($code === 'none') {
    return t('None');
  }
  $lang = $language->language;
  $code = drupal_strtolower($code);
  $lang = drupal_strtolower($lang);

  if (!isset($languages[$code])) {
    return $code;
  }
  return $languages[$code];
}

/**
 * determin i18n name of vocabular key
 * @staticvar string $vocabularies
 *
 * @param string $key  identd
 * @param string $vocab
 *   vacoabular machine_name
 * @param boolean $get_all_trans
 *   if it is TRUE, it will return a array insted of string
 * @param string $lang_code
 *   only possible if $get_all_trans==FALSE
 *
 * @return type
 */
function archibald_get_term_by_key($key, $vocab, $get_all_trans = FALSE, $lang_code = NULL, &$taxon_url = '') {
  $vocabularies = &archibald_static(__FUNCTION__, NULL);
  if (is_null($vocabularies)) {
    $vocabularies = array();
    foreach (taxonomy_get_vocabularies() as $vocabularie) {
      $vocabularies[$vocabularie->machine_name] = $vocabularie->vid;
    }
  }

  // if( $key == 'typical_learning_time' ) {
  //   print_r( $vocabularies );
  //   die();
  // }

  if (empty($vocabularies[$vocab])) {
    return $key;
  }

  $tree = taxonomy_get_tree($vocabularies[$vocab], 0, NULL, TRUE);
  foreach ($tree as $term) {
    $taxon_key = @$term->field_taxon_key['und'][0]['value'];
    if (!empty($term->field_taxon_url)) {
      $taxon_url = @$term->field_taxon_url['und'][0]['value'];
    }

    if ($key == $taxon_key) {
      $taxon_context = @$term->field_taxon_context['und'][0]['value'];
      if ($get_all_trans == TRUE) {
        $names = array();
        $names[i18n_string_source_language()] = $term->name;
        $langs = locale_language_list();
        unset($langs[i18n_string_source_language()]);
        foreach ($langs as $lang_key => $lang_name) {
          $tmp_name = i18n_taxonomy_term_name($term, $lang_key);
          if (!empty($tmp_name)) {
            $names[$lang_key] = $tmp_name;
          }
        }
        return $names;
      }
      else {
        return i18n_taxonomy_term_name($term, $lang_code);
      }
    }
  }
  return $key;
}

/**
 * remove catalog part von | joined form value
 *
 * @param string $value
 *
 * @return string
 */
function archibald_select_options_default_value_filter_splitter($value) {
  if (strpos($value, '|') !== FALSE) {
    list($catalog, $value) = explode('|', $value);
  }
  return $value;
}

/**
 * check if user is allowed to create a new lom object
 *
 * @return boolean
 */
function archibald_content_add_access() {
  return archibald_multi_access(
    'add archibald content'
  );
}

/**
 * access callback to check if a user can add or edit archibald lom content
 *
 * @return boolean
 */
function archibald_can_add_or_delete_resources() {
  return (user_access('edit archibald content') ||
    user_access('add archibald content')
  );
}

/**
 * access callback for general publish functionality
 *
 * @return boolean
 */
function archibald_check_publish_access() {
  return (user_access('publish archibald content local') ||
    user_access('publish archibald content central')
  );
}

/**
 * access callback for general publish functionality in batch operation context
 *
 * @return boolean
 */
function archibald_check_batch_operation_access() {
  return archibald_multi_access_or('change archibald content status', 'publish archibald content central', 'publish archibald content local');
}

/**
 * check multiply user_access access args if them are valid
 *
 * @return boolean
 *   case yes or no
 */
function archibald_multi_access_or() {
  foreach (func_get_args() as $arg) {
    if (user_access($arg) == TRUE) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * check multiply user_access access args if them are valid
 *
 * @return boolean
 *   case yes or no
 */
function archibald_multi_access() {
  foreach (func_get_args() as $arg) {
    if (user_access($arg) == FALSE) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by archibald_mail() and the settings forms to retrieve strings.
 *
 * @param string $key
 *  identifier of mail type and part
 *   new_unavailable_subject
 *   new_unavailable_body
 *     New proposal from annonymous user
 *
 *   status2final_subject
 *   status2final_body
 *     Editor changed status to final, now validator needs to prove
 *
 *   status2draft_subject
 *   status2draft_body
 *     Validator changed status to draf, editor have to fix content
 *
 *   set_responsible_subject
 *   set_responsible_body
 *     New editor wos chososen to be resposinble for ressource
 *
 * @param string $langcode
 *  Default: current drupal language code
 *
 * @param array $variables
 *   list of variables to be replace in text with token_replace()
 *
 * @param boolean $admin_mode
 *   if we are within admin mode or not (optional, default=FALSE)
 */
function archibald_mail_text($key, $langcode = NULL, $variables = array(), $admin_mode = FALSE, $force_default = FALSE) {
  global $user, $language;

  $langcode = empty($langcode) ? $language->language : $langcode;

  if ($admin_mode) {
    $langcode = 'en';
  }

  $text = '';
  $admin_setting = variable_get('archibald_mail_' . $key, FALSE);

  if (!$force_default && !empty($admin_setting)) {
    // An admin setting overrides the default string.
    $text = archibald_rmr($admin_setting);
    if (!$admin_mode) {
      $text = t($text, array(), array('langcode' => $langcode));
    }
    else {
      // Make sure that text is registered in the locale source table so that admin is able to translate it immediately
      // (For some reasons it did not work with the t() function)
      locale($text);
    }
  }
  else {
    // return '(Default) ' . $langcode;
    // No override, return default string.
    switch ($key) {
      case 'new_unavailable_subject':
        $text = t('New resource has been proposed', array(), array('langcode' => $langcode));
        break;
      case 'new_unavailable_body':
        $text = t('Dear Editor

The resource «[lom:title]» has been proposed for describing-
[lom:url]

Follow the link below to the overview of all proposed resources:
[overview:proposal-url]

This is an automatic e-mail by Archibald. Please don\'t answer.', array(), array('langcode' => $langcode));
        break;
      case 'new_proposal_subject':
        $text = t('Proposal has been submitted', array(), array('langcode' => $langcode));
        break;
      case 'new_proposal_body':
        $text = t('Dear User

Thank you for your proposal!

You have submitted: «[lom:title]».

We will keep you informed when your proposal is being reviewed.

This is an automatic e-mail by Archibald. Please don\'t answer.', array(), array('langcode' => $langcode));
        break;
      case 'proposal2draft_subject':
        $text = t('Proposal is being reviewed', array(), array('langcode' => $langcode));
        break;
      case 'proposal2draft_body':
        $text = t('Dear User

Your proposal «[lom:title]» is currently being reviewed.

This is an automatic e-mail by Archibald. Please don\'t answer.', array(), array('langcode' => $langcode));
        break;
      case 'status2final_subject':
        $text = t('Status of description has been changed to final', array(), array('langcode' => $langcode));
        break;
      case 'status2final_body':
        $text = t('Dear Publisher

The status of the description «[lom:title]» has been changed to final.
[lom:url]

The description can now be evaluated and published to the national catalogue.

Follow the link below to the overview of all descriptions ready for publishing:
[overview:to-publish-url]

This is an automatic e-mail by Archibald. Please don\'t answer.', array(), array('langcode' => $langcode));
        break;
      case 'status2draft_subject':
        $text = t('Status of description has been reset to draft', array(), array('langcode' => $langcode));
        break;
      case 'status2draft_body':
        $text = t('Dear Editor

The status of the description «[lom:title]» has been reset to draft.
[lom:url]

The description must be reviewed.

Follow the link below to the overview of all descriptions in progress:
[overview:in-progress-url]

This is an automatic e-mail by Archibald. Please don\'t answer.', array(), array('langcode' => $langcode));
        break;
      case 'set_responsible_subject':
        $text = t('A description has been assigned to you', array(), array('langcode' => $langcode));
        break;
      case 'set_responsible_body':
        $text = t('Dear Editor

The user [user:name] has assigned the description «[lom:title]» to you.
[lom:url]

Follow the link below to the overwiev of all descriptions in progress:
[overview:in-progress-url]

This is an automatic e-mail by Archibald. Please don\'t answer.', array(), array('langcode' => $langcode));
        break;
      case 'proposal2publish_subject':
        $text = t('Proposal has been published', array(), array('langcode' => $langcode));
        break;
      case 'proposal2publish_body':
        $text = t('Dear User

The proposal «[lom:title]» has been published.

Follow the link below to the Archibald home of the selected content partner to view your proposal.
[lom:url]

This is an automatic e-mail by Archibald. Please don\'t answer.', array(), array('langcode' => $langcode));
        break;

    }

    if ($admin_mode == TRUE) {
      return $text;
    }
  }

  if (!empty($variables)) {
    $variables['user'] = $user;
    $languages = language_list();
    $lang_obj = isset($languages[$langcode]) ? $languages[$langcode] : $language;
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace(
      $text, $variables, array(
        'language' => $lang_obj,
        'callback' => 'archibald_mail_tokens',
        'sanitize' => FALSE,
      )
    );
  }

  return $text;
}

/**
 * Token callback to add unsafe tokens for archibald status mails.
 *
 * @see archibald_mail()
 *
 * @param array $replacements
 *   called by refferenze list of tokens
 *
 * @param array $data
 *   raw data to create tokens from
 *
 * @param array $options
 */
function archibald_mail_tokens(&$replacements, $data, $options) {
  if (isset($data['lom_id'])) {
    $search = new ArchibaldLomSQLSearch();
    $replacements['[lom:id]'] = $data['lom_id'];
    $replacements['[lom:url]'] = url(
      'archibald/' . $data['lom_id'], array(
        'absolute' => TRUE,
      )
    );

    $replacements['[lom:title]'] = $search->getLomTitle($data['lom_id']);
  }
  $replacements['[overview:proposal-url]'] = url(
    'admin/archibald/proposal', array(
      'absolute' => TRUE,
    )
  );

  $replacements['[overview:to-publish-url]'] = url(
    'admin/archibald/to_publish', array(
      'absolute' => TRUE,
    )
  );

  $replacements['[overview:in-progress-url]'] = url(
    'admin/archibald', array(
      'absolute' => TRUE,
    )
  );
}

/**
 * Implements hook_mail().
 *
 * @param string $key
 *   see: archibald_mail_text()
 *
 * @param arrray $message
 *   called by refference
 *     array('subject', 'body')
 *
 * @params array $params
 *
 */
function archibald_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('lom_id' => $params['lom_id']);

  if (!empty($params['subject'])) {
    $message['subject'] .= $params['subject'];
  }
  else {
    $message['subject'] .= archibald_mail_text($key . '_subject', $language, $variables);
  }

  if (!empty($params['body'])) {
    $message['body'][] = $params['body'];
  }
  else {
    $message['body'][] = archibald_mail_text($key . '_body', $language, $variables);
  }
}

/**
 * send a info mail to usergroup configurated by key
 *
 * @param string $lom_id
 *
 * @param string $key
 *  for possible keys
 *  @see archibald_mail_text()
 *
 * @param integer $uid
 *  this is the uid of new responsible editor if key=set_responsible
 *
 * @param string $subject
 *
 * @param string $body
 */
function archibald_send_mail($lom_id, $key, $uid = NULL, $subject = '', $body = '', $debug_email = FALSE) {

  $params = array(
    'lom_id' => $lom_id,
    'subject' => $subject,
    'body' => $body,
  );

  // Do not send this mails.
  $sendmail = variable_get('archibald_send_mails_' . $key, TRUE);
  if (empty($sendmail)) {
    return;
  }
  $accounts = array();
  $gid = 0;

  switch ($key) {

    case 'proposal2publish':
      global $user;
      if ($debug_email) {
        $stats = new stdClass;
        $stats->proposal_contact_email = $debug_email;
        $stats->proposal_mail_sent = NULL;
      }
      else {
        $stats = archibald_get_lom_stats($lom_id, TRUE);
      }
      if (empty($stats->proposal_mail_sent)) {
        // Only send an email if we have a valid email address.
        if (!empty($stats->proposal_contact_email) && valid_email_address($stats->proposal_contact_email)) {
          $lom = archibald_load($lom_id);
          $meta_metadata = $lom->getMetaMetadata();
          $language_mail = $meta_metadata->getLanguage();

          drupal_mail('archibald', 'proposal2publish', $stats->proposal_contact_email, $language_mail, $params);
        }
        if (!$debug_email) {
          db_update('archibald_lom_stats')
            ->fields(array(
              'proposal_mail_sent' => 1
            ))
            ->condition('lom_id', $lom_id)
            ->execute();
        }
      }
      return;

    case 'new_proposal':
      if ($debug_email) {
        $lom = archibald_load($lom_id);
        $meta_metadata = $lom->getMetaMetadata();
        $language_mail = $meta_metadata->getLanguage();
        drupal_mail('archibald', 'new_proposal', $debug_email, $language_mail, $params);
      }
      return;

      break;

    case 'new_unavailable':
      $accounts = variable_get('archibald_mail_new_unavailable_group', array(1));
      break;

    case 'status2final':
      $accounts = variable_get('archibald_mail_status2final_group', array(1));
      break;

    case 'status2draft':
      $accounts = variable_get('archibald_mail_status2draft_group', array(1));

      /*
       * @cha, 09.04.2013
       * Changed behaviour that status2draft is now also selectable.
       */
      /*
        $uid = ArchibaldLomSaveHandler::getResponsibleUid($lom_id);
        if (!empty($uid)) {
          // uid of current repsonsible editor
          $accounts = array(user_load($uid));
        }
        else {
          // when we have no repsonsible (should never happen)
          // then send it to all editors
          $rid = variable_get('archibald_mail_new_unavailable_group', 1);
        }
      */
      break;

    case 'set_responsible':
      // uid of new repsonsible editor
      $accounts = array($uid => $uid);
      break;
  }

  if (!empty($accounts)) {
    if (!is_array($accounts)) {
      $accounts = array($accounts);
    }
    foreach ($accounts as $k => $v) {
      $v = trim($v);
      if (empty($v) || (int)$v . '' !== $v . '') {
        unset($accounts[$k]);
      }
    }

    if (!empty($accounts)) {
      $accounts = user_load_multiple($accounts);
    }

    foreach ($accounts as $account) {
      $recipient = ($debug_email) ? $debug_email : $account->mail;
      $language = user_preferred_language($account);
      if (!empty($language) && is_object($language) && !empty($language->language)) {
        $language = $language->language;
      }

      $variables = array('lom_id' => $lom_id);
      $mparams = $params;
      if (empty($mparams['subject'])) {
        $mparams['subject'] = archibald_mail_text($key . '_subject', $language, $variables);
      }
      if (empty($mparams['body'])) {
        $mparams['body'] = archibald_mail_text($key . '_body', $language, $variables);
      }

      // If set, send the e-mail to the specified debug email
      if ($debug_email) {
        $mparams['body'] = "DEBUG: e-mail sent to " . $account->mail . " in $language\n Prefered language: " . $language . "\n" . $mparams['body'];
      }

      drupal_mail('archibald', $key, $recipient, $language, $mparams);
    }
  }
}

/**
 * get optionslist for general.language and
 * adapt default options, cause we dont save the source part
 * of the value in lom object
 */
function archibald_get_general_language_options(&$default_options = array(), $lang_code = '') {

  global $language;

  $options = array();
  $languages = language_list('enabled');
  $languages = $languages[1];

  foreach ($languages as $lang_key => $lang_value) {
    $options[] = $lang_key;
  }

  $options = array();
  //read out languages from archibald client language settings
  $options = variable_get('archibald_language_settings', array());

  if (!preg_match("/[a-z][a-z]([0-9]+)?/is", drupal_strtolower($lang_code)) || empty($lang_code)) {
    $lang_code = $language->language;
  }
  $file = dirname(__FILE__) . '/includes/languages/' . $lang_code . '.php';

  if (!is_file($file)) {
    $file = dirname(__FILE__) . '/includes/languages/en.php';
  }
  include($file);

  $return_array = array();
  $return_array['none'] = t('None');
  foreach ($options as $k) {
    $return_array[$k] = $languages[$k];
  }

  //backup taxon languages from hh
  /*
   * $options = archibald_get_taxonomy_options('language');
   * foreach (array_keys($options) as $opt) {
   *   // backup taxon languages from hh
   *   list($source, $entity) = explode('|', $opt, 2);
   *   $entity = $opt;
   *
   *   foreach ($default_options as $key => $val) {
   *     if ($val == $entity) {
   *       $default_options[$key] = $opt;
   *     }
   *   }
   * }
   * return $options;
   */


  return $return_array;
}

/**
 * get bias multiplicator for field boosting at solr search
 *
 * If adopting values here,
 * take care of that them exists here in
 * $weights archibald_admin_settings_solr()
 *
 * @param string $key
 * @param boolean $get_educa_default
 *   return educa`s default settings
 *
 * @return string
 */
function archibald_get_solr_bias_value($key, $get_educa_default = FALSE) {
  $values = array('label' => '3.0',
    'content' => '2.6',
    'tm_keywords' => '3.0',
    'tm_coverage' => '3.0',
    'ts_otherPlattformRequirements' => '2.4',
    'ts_education_description' => '2.4',
    'tm_contributor' => '2.0',
    'tm_vocabular_text' => '2.5'
  );

  if ($get_educa_default == TRUE) {
    return $values[$key];
  }
  return variable_get('archibald_solr_bias_' . $key, $values[$key]);
}

/**
 * add metaMetaDate contributor if not set jet
 * @global object $user
 *
 * @return mixed
 *  can return FALSE or ArchibaldLomContributor
 */
function archibald_add_meta_meta_contributor() {
  global $user;

  $user_fields = user_load($user->uid);
  if (isset($user_fields->field_user_vcard['und']['0']['value'])) {
    $contribute = new ArchibaldLomDataContribute();
    $contribute->setRole(ArchibaldLomDataMetaMetadata::CONTRIBUTE_ROLE_CREATOR);
    $contribute->setDate(new ArchibaldLomDataDateTime(time()));

    $contributor = new ArchibaldLomContributor(
      $user_fields->field_user_vcard['und']['0']['value']
    );

    $contribute->addEntity($contributor->getVcard());

    return $contribute;
  }
  else {
    if (user_is_logged_in()) {
      drupal_set_message(
        t(
          'There is no vCard for your account, no !field has been attributed. Set !link',
          array(
            '!field' => archibald_get_field_label('lifecycle.contributor', FALSE),
            '!link' => l(
              t('Edit account'),
              'user/' . $user->uid . '/edit',
              array('attributes' => array('target' => '_blank'))
            ),
          )
        ), 'warning'
      );
    }
    return FALSE;
  }
}

/**
 * Form builder; Output a search form for the search block's search box.
 *
 * @ingroup forms
 * @see archibald_search_block_form_submit()
 * @see archibald_search_block_form.tpl.php
 */
function archibald_search_block_form($form, &$form_state) {
  $form['#action'] = url('archibald');

  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => '',
    '#attributes' => array(
      'title' => t('Enter a search term'),
    ),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  $form['#theme'] = 'archibald_search_block_form';

  return $form;
}

/**
 * set editor last seen bit for resource
 *
 * @global object $user
 *
 * @param string $lom_id
 *
 * @return boolean
 */
function archibald_prohibit_double_edit_ping($lom_id) {
  global $user;

  if (empty($user->uid) || empty($lom_id)) {
    drupal_json_output(array('status' => 'FAILED'));
    exit();

    return FALSE;
  }

  db_query(
    'UPDATE {archibald_lom_stats} ' .
    'SET  editing_uid=:uid, editing_last_seen=:time ' .
    'WHERE lom_id=:lom_id ;', array(
      ':uid' => $user->uid,
      ':lom_id' => $lom_id,
      ':time' => time(),
    )
  );

  drupal_json_output(array('status' => 'OK'));
  exit();
}

/**
 * reset editor last seen bit for resource
 *
 * @global object $user
 *
 * @param string $lom_id
 * @param boolean $json
 *  echo json code
 *
 * @return boolean
 */
function archibald_prohibit_double_edit_checkout($lom_id = "", $json = TRUE) {
  global $user;

  if (empty($user->uid) || empty($lom_id)) {
    if ($json == TRUE) {
      drupal_json_output(array('status' => 'FAILED'));
      exit();
    }
    return FALSE;
  }
  if (empty($lom_id)) {
    db_query(
      'UPDATE {archibald_lom_stats} SET editing_last_seen=0 WHERE editing_uid=:uid ;',
      array(
        ':uid' => $user->uid,
      )
    );
  }
  else {
    db_query(
      'UPDATE {archibald_lom_stats} SET editing_uid=:uid, editing_last_seen=0 WHERE lom_id=:lom_id ;',
      array(
        ':uid' => $user->uid,
        ':lom_id' => $lom_id,
      )
    );
  }
  if ($json == TRUE) {
    drupal_json_output(array('status' => 'OK'));
    exit();
  }

  return TRUE;
}

/**
 * get a list of all content_partners
 *
 * @param integer $content_partner_id
 *   optional
 *   get only a singe content partner
 *
 * @return array
 *   list off
 *     integer content_partner_id
 *     string name
 *     string username
 *     string password
 *     integer key file id
 *     object key_file file object
 *     integer icon file id
 *     object icon_file file object
 *     string file_server_type
 */
function archibald_load_content_partner($content_partner_id = NULL) {
  $content_partners = &archibald_static(__FUNCTION__, array());

  if (empty($content_partners)) {
    $query = db_select('archibald_settings_content_partner ', 'cp');
    $query->fields(
      'cp', array(
        'content_partner_id',
        'name',
        'username',
        'password',
        'key_fid',
        'icon_fid',
        'file_server_type',
      )
    );

    $res = $query->execute();

    while ($data = $res->fetchAssoc()) {
      $data['key'] = $data['key_fid'];
      $data['icon'] = $data['icon_fid'];

      $data['key_file'] = new stdClass();
      if (!empty($data['key'])) {
        $data['key_file'] = file_load($data['key']);
      }

      $data['icon_file'] = new stdClass();
      if (!empty($data['icon'])) {
        $data['icon_file'] = file_load($data['icon']);
      }

      $data['usage_count'] = db_select('archibald_lom_stats', 'ls')
        ->fields('ls', array(
          'lom_id'
        ))
        ->condition('content_partner_id', $data['content_partner_id'])
        ->where('(ls.publication_version IS NOT NULL OR ls.local_published != \'\')')
        ->execute()->rowCount();

      $content_partners[$data['content_partner_id']] = $data;
    }
  }

  if ($content_partner_id !== NULL) {
    if (empty($content_partners[$content_partner_id])) {
      return array(
        'content_partner_id' => 0,
        'name' => '',
        'username' => '',
        'password' => '',
        'file_server_type' => '',
        'icon' => 0,
        'icon_file' => new stdClass(),
        'key' => 0,
        'key_file' => new stdClass(),
        'usage_count' => 0,
      );
    }

    return $content_partners[$content_partner_id];
  }

  return $content_partners;
}

/**
 * get status of central publish possibilty.
 * Be care full!!! This returns the general status, if there is any
 * content partner configurated which can publish.
 * If you have a singe lom resource, use something like:
 * @example
 * $status = archibald_get_lom_stats($lom_id);
 * $is_central_configurated = FALSE;
 * if (!empty($status->content_partner) &&
 *     $status->content_partner['key'] &&
 *     $status->content_partner['username'] &&
 *     $status->content_partner['password']) {
 *   $is_central_configurated = TRUE;
 * }
 *
 * @staticvar boolean $can_publish_central
 *
 * @return boolean
 */
function archibald_can_publish_central() {
  $can_publish_central = &archibald_static(__FUNCTION__, NULL);
  if ($can_publish_central == NULL) {
    $can_publish_central = FALSE;
    foreach (archibald_load_content_partner() as $content_partner) {
      if (!empty($content_partner['key_file']) && !empty($content_partner['username'])) {
        $can_publish_central = TRUE;
        break;
      }
    }
  }

  return $can_publish_central;
}

/**
 * Returns wether the lom resource is published or not.
 *
 * Will return:
 *  0 => not published
 *  1 => local published
 *  2 => central published
 *  3 => local and central published
 *
 * @param type $lom_id
 *   the lom id
 * @param string $version
 *   the version
 *
 * @return int
 *   the status
 */
function archibald_lom_is_published($lom_id, $version) {

  $status = db_select('archibald_lom_stats', 'archibaldls')->fields(
    'archibaldls', array(
      'lom_id',
      'publication_version',
      'publication_time',
      'publication_progress',
      'publication_log',
      'responsible_uid',
      'indexed_version',
      'editing_uid',
      'editing_last_seen',
      'local_published',
      'content_partner_id',
    )
  )->condition('lom_id', $lom_id)->range(0, 1)->execute()->fetchObject();

  if (empty($status)) {
    return ARCHIBALD_PUBLISH_STATUS_NONE;
  }

  if ($status->publication_version == $version && $status->local_published == $version) {
    return ARCHIBALD_PUBLISH_STATUS_LOCAL_CENTRAL;
  }
  elseif ($status->publication_version == $version) {
    return ARCHIBALD_PUBLISH_STATUS_CENTRAL;
  }
  elseif ($status->local_published == $version) {
    return ARCHIBALD_PUBLISH_STATUS_LOCAL;
  }

  return ARCHIBALD_PUBLISH_STATUS_NONE;
}

/**
 * Updates the stats table so that the resource will be republish.
 * @param string $lom_id
 *   the lom id
 * @param boolean $local_too
 *   Wether we want the resource local republished too (solr index)
 *   (optional, default = TRUE)
 */
function archibald_republish_resource($lom_id, $local_too = TRUE) {

  $update = array(
    'publication_progress = 0',
    'publication_log = NULL',
  );

  if ($local_too == TRUE) {
    $update[] = "indexed_version = ''";
  }
  db_query("UPDATE {archibald_lom_stats} SET " . implode(", ", $update) . " WHERE lom_id = :lom_id", array(':lom_id' => $lom_id));
}

/**
 * Redirects to the republish page
 */
function archibald_goto_republish_all() {
  drupal_goto('archibald/publish/status/central');
  die();
}
/**
 * get lom stats by lom_id
 *
 * @param string $lom_id
 * @param boolean $minimal
 *   default FALSE
 *   when TRUE only entries from {archibald_lom_stats} table will returned
 *
 * @return stdClass
 */
function archibald_get_lom_stats($lom_id, $minimal = FALSE) {
  $cache = &archibald_static(__FUNCTION__, array());

  if (!empty($cache[$lom_id])) {
    return $cache[$lom_id];
  }

  $status = db_select('archibald_lom_stats', 'archibaldls')->fields(
    'archibaldls', array(
      'lom_id',
      'publication_version',
      'publication_time',
      'publication_progress',
      'publication_log',
      'responsible_uid',
      'indexed_version',
      'editing_uid',
      'editing_last_seen',
      'local_published',
      'content_partner_id',
      'proposal_mail_sent',
      'proposal_contact_name',
      'proposal_contact_email',
      'proposal_contact_phone',
      'proposal_message',
    )
  )->condition('lom_id', $lom_id)->range(0, 1)->execute()->fetchObject();

  if (empty($status)) {
    $status = (object)array(
      'lom_id' => '',
      'publication_version' => '',
      'publication_time' => 0,
      'publication_progress' => 0,
      'publication_log' => '',
      'responsible_uid' => 0,
      'indexed_version' => '',
      'editing_uid' => 0,
      'editing_last_seen' => 0,
      'local_published' => '',
      'content_partner_id' => 0,
      'proposal_mail_sent' => 0,
      'proposal_contact_name' => '',
      'proposal_contact_email' => '',
      'proposal_contact_phone' => '',
      'proposal_message' => '',
    );
  }

  if ($minimal == TRUE) {
    return $status;
  }

  $lom = archibald_load($lom_id);

  if (empty($status->publication_log)) {
    $status->publication_log = new stdClass();
  }
  else {
    $status->publication_log = unserialize($status->publication_log);
  }

  $status->content_partner = array();
  if (!empty($status->content_partner_id)) {
    $status->content_partner = archibald_load_content_partner($status->content_partner_id);
  }



  // determine $status->publication_central_status
  //  none
  //  error
  //  processing
  //  waiting
  //  ok
  //  old
  $status->publication_central_status = 'none';

  if (!empty($status->publication_version)) {
    if ($status->publication_version == $lom->version) {

      if ($status->publication_progress < 100) {
        if (empty($status->publication_log)) {
          // publishing actualy not started
          $status->publication_central_status = 'waiting';
        }
        elseif (isset($status->publication_log->lom_status) && in_array($status->publication_log->lom_status, array('error', 'files not ready'))) {
          // publish process was started, but stop with an error
          $status->publication_central_status = 'error';
        }
        else {
          // publish process was started and is running
          $status->publication_central_status = 'processing';
        }
      }
      else {
        // yes remote published
        $status->publication_central_status = 'ok';
      }
    }
    else {
      // old revision remote published
      $status->publication_central_status = 'old';
    }
  }


  // determine $status->publication_local_status
  //  none
  //  ok
  //  old
  $status->publication_local_status = 'none';

  if (!empty($status->local_published)) {
    if ($status->local_published == $lom->version) {
      // yes local published
      $status->publication_local_status = 'ok';
    }
    else {
      // old revision local published
      $status->publication_local_status = 'old';
    }
  }

  $cache[$lom_id] = $status;

  return $status;
}

/**
 * get a list of all available curriculums
 * @return array
 *   list of existing curriculums
 */
function archibald_get_available_curriculums() {
  $curriculums = array();

  $dir = new ArchibaldDir('includes/curriculum', FALSE, dirname(__FILE__));
  $dir->justFiles();

  foreach ($dir as $entry) {
    if (preg_match("/^curriculum_(.+)\.class\.php$/U", $entry->filename, $match)) {
      $curriculums[] = $match[1];
    }
  }

  return $curriculums;
}

/**
 * get a list of all activated curriculums
 * @return array
 *   list of activated curriculums
 */
function archibald_get_active_curriculums() {
  $curriculums = array();

  foreach (archibald_get_available_curriculums() as $curriculum) {
    $classname = 'ArchibaldCurriculum' . drupal_ucfirst($curriculum);
    $class = new $classname();
    if ($class->isActive()) {
      $curriculums[] = $curriculum;
    }
  }

  // Make sure 'specific curricula' come first and 'educa' last
  // TODO : Has to be done properly
  asort( $curriculums );
  $curriculums = array_reverse( $curriculums );

  return $curriculums;
}

/**
 *
 * @param string $lom_id
 *   The lom id
 * @param string $type
 *   The change type (translation/update)
 * @param string $field
 *   The field which changed
 * @param string $old_value
 *   The old value
 * @param string $new_value
 *   The new value
 */
function archibald_insert_change_log($lom_id, $language, $field, $old_value, $new_value) {

  // Check if we have already an entry with the given PK values.
  $row = db_select('archibald_change_log', 'acl')
    ->condition('lom_id', $lom_id)
    ->condition('language', $language)
    ->condition('field', $field)
    ->fields('acl', array(
        'lom_id',
    ))
    ->execute()
    ->fetchAssoc();

  // If we have it, just update the current new value.
  if (!empty($row['lom_id'])) {
    db_update('archibald_change_log')
      ->fields(array('new_value' => $new_value))
      ->condition('lom_id', $lom_id)
      ->condition('language', $language)
      ->condition('field', $field)
      ->execute();
  }
  else {
    // We have it not, insert the values.
    db_insert('archibald_change_log')
      ->fields(array(
        'lom_id' => $lom_id,
        'language' => $language,
        'field' => $field,
        'old_value' => $old_value,
        'new_value' => $new_value,
      ))
      ->execute();
  }
}

/**
 * Reset the 'republication required' flag to the affected resources.
 *
 * @return boolean
 *  FALSE = reset of the 'republication required' flag failed due to errors (invalid lom object)
 *  TRUE =  succesully reset 'republication required' flag of all descriptions
 */
function archibald_reset_republication_required() {

  foreach (db_query("SELECT lom_id, publication_version FROM {archibald_lom_stats} WHERE republication_required = 1") as $row) {
    if (!empty($row->publication_version)) {
      $lom = ArchibaldLomSaveHandler::load($row->lom_id, $row->publication_version);
      $LOM_Validate = new ArchibaldLomValidate($lom);

      if (!$LOM_Validate->readyForPublish()) {
        drupal_set_message(t('The status cannot be changed because the description is incomplete.') . '<br />' . t('Please edit description and try again'), 'error');
        return FALSE;
      }

      if ($lom->getLifeCycle()->getStatus() != ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_FINALE) {
        drupal_set_message(t('Description status is not final.') . '<br />' . t('Please change status to final'), 'error');
        return FALSE;
      }

      // Description is valid and republishing will initated now.
      db_update('archibald_lom_stats')
        ->condition('lom_id', $lom->getLomId())
        ->fields(
          array(
            'publication_progress' => NULL,
            'publication_log' => NULL,
            'indexed_version' => ''
          )
        )
        ->execute();
    }
  }

   // Reset 'republication required' flag
  db_update('archibald_lom_stats')
    ->fields(array(
      'republication_required' => 0,
      'indexed_version' => '',
      ))
    ->condition('republication_required', 1)
    ->execute();

  db_delete('archibald_change_log')->execute();

  return TRUE;
}

/**
 * Set the 'new revision required' flag to the affected resources.
 *
 * @param string $langstring_id
 *  the langstring id
 * @param ArchibaldLomDataLangString $old_value
 *  the old value
 * @param ArchibaldLomDataLangString $new_value
 *  the new value
 */
function archibald_handle_new_revision_is_required($langstring_id, $old_value, $new_value) {
  archibald_reset_lom_cache($langstring_id);
  //Get all resource which includes the given langstring id but only central published or if solr is enabled local published too.
  $sql = "
    SELECT
      l.lom_id, l.version,
      ls.publication_version, ls.local_published,
      l.rights_description,
      g.title, g.description,
      gi.title,
      gk.keyword,
      gc.coverage,
      lc.version AS lifecycle_version,
      t.other_plattform_requirements, t.duration_description
    FROM {archibald_lom} l
    JOIN {archibald_lom_stats} ls ON (l.lom_id = ls.lom_id AND (l.version = ls.publication_version OR (l.version = ls.local_published AND :solr_enabled)))
    LEFT JOIN {archibald_general} g ON (l.general_id = g.general_id)
    LEFT JOIN {archibald_general_identifier} gi ON (l.general_id = gi.general_id)
    LEFT JOIN {archibald_general_keywords} gk ON (l.general_id = gk.general_id)
    LEFT JOIN {archibald_general_coverage} gc ON (l.general_id = gc.general_id)
    LEFT JOIN {archibald_lifecycle} lc ON (l.lifecycle_id = lc.lifecycle_id)
    LEFT JOIN {archibald_technical} t ON (l.technical_id = t.technical_id)
    WHERE
      l.rights_description = :langstring_id OR
      g.title = :langstring_id OR g.description = :langstring_id OR
      gi.title = :langstring_id OR
      gk.keyword = :langstring_id OR
      gc.coverage = :langstring_id OR
      lc.version = :langstring_id OR
      t.other_plattform_requirements = :langstring_id OR t.duration_description = :langstring_id
    GROUP BY
      l.lom_id, l.version,
      ls.publication_version, ls.local_published,
      l.rights_description,
      g.title, g.description,
      gi.title,
      gk.keyword,
      gc.coverage,
      lc.version,
      t.other_plattform_requirements, t.duration_description
  ";

  $solr_enabled = variable_get('archibald_solr_search_activ', 0);
  $params = array(
    ':solr_enabled' => $solr_enabled,
    ':langstring_id' => $langstring_id
  );

  $change_log = array();
  $lom_stat_processed = array();
  foreach (db_query($sql, $params) as $row) {
    $row = (array) $row;
    $update = array();
    if ($row['publication_version'] == $row['version']) {
      //Set the bit
      $update["republication_required "] = "republication_required = 1";
    }
    if ($solr_enabled == 1 && $row['local_published'] == $row['version']) {
      //Reindex solr
      $update["republication_required "] = "republication_required = 1";
    }

    if (empty($update)) {
      // Not the correct version.
      continue;
    }

    foreach ($row AS $field => $check_id) {
      if ($check_id != $langstring_id || isset($change_log[$row['lom_id']][$field])) {
        continue;
      }

      if (!isset($change_log[$row['lom_id']])) {
        $change_log[$row['lom_id']] = array();
      }
      $change_log[$row['lom_id']][$field] = TRUE;
    }

    if (isset($lom_stat_processed[$row['lom_id']])) {
      continue;
    }
    //Do it...
    db_query("UPDATE {archibald_lom_stats} SET " . implode(", ", $update) . " WHERE lom_id = :lom_id", array(
      ':lom_id' => $row['lom_id']
    ));
    $lom_stat_processed[$row['lom_id']] = TRUE;
  }

  // die();

  // Get the changed values only once.
  $old_values = $old_value->getStrings();
  $new_values = $new_value->getStrings();

  $text_changes = array();
  foreach ($old_values AS $language => $string) {
    if (!isset($new_values[$language])) {
      $text_changes[$language] = array(
        'old' => $string,
        'new' => 'DELETED',
      );
      continue;
    }

    if ($old_values[$language] != $new_values[$language]) {
      $text_changes[$language] = array(
        'old' => $old_values[$language],
        'new' => $new_values[$language],
      );
    }
    unset($new_values[$language]);
  }

  foreach ($new_values AS $language => $string) {
    if (!empty($string)) {
      $text_changes[$language] = array(
        'old' => 'ADDED',
        'new' => $string,
      );
    }
  }

  // We only need to insert a change log if a string has changed.
  if (!empty($text_changes)) {

    foreach ($change_log AS $lom_id => $fields) {
      foreach ($fields AS $field => $true) {
        foreach ($text_changes AS $language => $values) {
          archibald_insert_change_log($lom_id, $language, $field . "|" . $langstring_id, $values['old'], $values['new']);
        }
      }
    }
  }

}

/**
 * Provide javascript to show the lock screen for a resource which has the
 * status "final"
 *
 * @param string $lom_id
 * @param string $version
 * @param string $status
 */
function archibald_show_lock_status_dialog($lom_id, $version, $status) {
  if (!empty($lom_id)) {
    if ($status == ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_FINALE) {
      drupal_add_js(drupal_get_path('module', 'archibald') . '/js/jquery-ui-1.8.23.custom.min.js');
      drupal_add_js(drupal_get_path('module', 'archibald') . '/js/archibald.js');
      drupal_add_css(drupal_get_path('module', 'archibald') . '/css/archibald_edit_final_status.css');
      drupal_add_css(drupal_get_path('module', 'archibald') . '/css/archibald_ui_dialog.css');
      $is_published = 'unpublished';
      if (archibald_lom_is_published($lom_id, $version)) {
        $is_published = 'published';
      }
      $archibald_edit_final_open = url('archibald/' . $lom_id . '/edit_final/' . $is_published);
      drupal_add_js(array('archibald_edit_final_status_is_published' => $is_published), 'setting');
      drupal_add_js(array('archibald_edit_final_status_open' => $archibald_edit_final_open), 'setting');
      drupal_add_js(array('archibald_edit_final_status_close' => url('admin/archibald/published')), 'setting');
    }
  }
}

/**
 * Set the republication flag for the given resource.
 *
 * @param string $lom_id
 *   the lom id
 */
function archibald_need_republication($lom_id) {
  if (empty($lom_id)) {
    return TRUE;
  }
  $status = archibald_get_lom_stats($lom_id);

  $solr_enabled = variable_get('archibald_solr_search_activ', 0);

  if ($solr_enabled == 0 && empty($status->publication_version)) {
    return TRUE;
  }

  if (!empty($status->publication_version) || !empty($status->local_published)) {
    db_update('archibald_lom_stats')
      ->fields(array(
        'republication_required' => '1'
      ))
      ->condition('lom_id', $lom_id)
      ->execute();

  }
}

/**
 * Returns a list with all content partners where the user is allowed to
 * publish or boolean if the current user is allowed to publish for the specified
 * content partner id.
 *
 * @staticvar array $cache
 *   holds the cached cps.
 *
 * @param int $content_partner_id
 *   the content partner id
 *
 * @return mixed
 *   if $content_partner_id is not NULL returns boolean true if curren user
 *   can publish for this content partner, else false
 *   if $content_partner_id IS NULL it returns a list with all content partners
 *   where the current user is allowed to publish
 *   returning array has the content partner id as keys and the name as values.
 */
function archibald_can_publish_for_content_partner($content_partner_id = NULL) {
  $cache = &archibald_static(__FUNCTION__, NULL);

  // Direct return access if content partner id is provided.
  if ($content_partner_id !== NULL) {
    return user_access('work for cp ' . $content_partner_id);
  }

  if ($cache === NULL) {

    $cache = array();
    foreach (archibald_load_content_partner() as $content_partner) {
      // Skip if access denied.
      if (!user_access('work for cp ' . $content_partner['content_partner_id'])) {
        continue;
      }
      $cache[$content_partner['content_partner_id']] = $content_partner['name'];
    }
  }

  return $cache;
}

/**
 * Set new status of a lom object.
 *
 * @global object $user
 *
 * @param ArchibaldLom $lom
 *   The lom object.
 * @param string $old_status
 *   The old status.
 * @param string $new_status
 *   The new status.
 * @param boolean $send_info_mail
 *   Set to true to send the status mail.
 * @param string $mail_subject
 *   The mail subject.
 * @param string $mail_text
 *   The mail text.
 * @return string
 *   The new status
 */
function archibald_set_status($lom, $old_status, $new_status, $send_info_mail, $mail_subject = '', $mail_text = '' ) {
  global $user;

  if (empty($old_status)) {
    $old_status = 'unavailable';
  }

  $lom_lifeCycle = $lom->getLifeCycle();
  if (!($lom_lifeCycle instanceof ArchibaldLomDataLifeCycle)) {
    $lom_lifeCycle = new ArchibaldLomDataLifeCycle();
  }

  // Handle lifeCycle status
  if (empty($new_status)) {
    $new_status = ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_DRAFT;
  }
  $lom_lifeCycle->setStatus($new_status);


  $lom->setLifeCycle($lom_lifeCycle);
  archibald_save($lom);
  $archibald_lom = new ArchibaldLom();
  $title = $archibald_lom->determinTitle($lom);

  watchdog(
    'Content',
    'Description "!title": status was changed @from -> @to (send mail: @mail)',
    array(
      '!title' => $title,
      '@lom_id' => $lom->lom_id,
      '@from' => $old_status,
      '@to' => $new_status,
      '@mail' => print_r($send_info_mail, 1),
    ),
    WATCHDOG_NOTICE,
    'archibald/' . $lom->lom_id
  );

  // if old status is unavailable (user proposal) and an editor changes the description status,
  // he is automaticaly responsible for it
  if ($old_status == 'unavailable') {
    ArchibaldLomSaveHandler::setResponsibleUid($lom->lom_id, $user->uid);
    $params = array(
      'lom_id' => $lom->getLomId(),
      'subject' => '',
      'body' => '',
    );
    $stats = archibald_get_lom_stats($lom->getLomId(), TRUE);
    $meta_metadata = $lom->getMetaMetadata();
    $language_mail = $meta_metadata->getLanguage();
    drupal_mail('archibald', 'proposal2draft', $stats->proposal_contact_email, $language_mail, $params);
  }

  // mark descriptions as final: mail to all publishers
  if ($old_status != ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_FINALE && $new_status == ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_FINALE && $send_info_mail == TRUE) {
    $variables = array('lom_id' => $lom->lom_id);
    $subject = archibald_mail_text('status2final_subject', NULL, $variables);
    $body = archibald_mail_text('status2final_body', NULL, $variables);
    archibald_send_mail($lom->lom_id, 'status2final', NULL, $subject, $body);
  }

  // mark descriptions as draft: mail to responsible editor
  if ($old_status != 'draft' && $new_status == 'draft' && $send_info_mail) {
    $variables = array('lom_id' => $lom->lom_id);
    $subject = archibald_mail_text('status2draft_subject', NULL, $variables);
    $body = archibald_mail_text('status2draft_body', NULL, $variables);
    archibald_send_mail($lom->lom_id, 'status2draft', NULL, $subject, $body);
  }

  return $new_status;
}

/**
 * This is a helper function which removes all windows line breaks '\r' from a string.
 *
 * @param string $text
 *  string to remove all windows line breaks '\r'
 *
 * @return string
 *   string without windows line breaks '\r'
 */
function archibald_rmr($text) {
  return str_replace("\r", "", $text);
}

/**
 * Checks if a given lom object corresponds to a new proposal being added.
 *
 * @param object $lom
 *  The LOM object we are checking against
 *
 * @return boolean
 *   Indicates if a new proposal or not
 */
function archibald_is_new_proposal($lom) {
  $cache = &archibald_static(__FUNCTION__, array());
  $lom_id = $lom->getLomId();

  if (!isset($cache[$lom_id])) {
    $cache[$lom_id] = $lom->getLifeCycle()->getStatus() == ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_UNAVAILABLE;
  }
  return $cache[$lom_id];
}


/**
 * access callback to check if a user can only propose (and not edit)
 *
 * @return boolean
 */
function archibald_can_only_propose() {
  $cache = archibald_static(__FUNCTION__, NULL);
  if ($cache === NULL) {
    $cache = user_access('add archibald content') && !user_access('edit archibald content');
  }
  return $cache;
}

/**
 * Checks if a given lom object corresponds to a proposal.
 *
 * @param object $lom
 *  The LOM object we are checking against
 *
 * @return boolean
 *   Indicates if a proposal or not
 */
function archibald_is_proposal($lom) {
  $cache = &archibald_static(__FUNCTION__, array());

  $lom_id = $lom->getLomId();
  if ($lom_id == '') {
    return archibald_can_only_propose();
  }
  else {
    if (!isset($cache[$lom_id])) {
      $stats = archibald_get_lom_stats($lom_id);
      $cache[$lom_id] = archibald_is_new_proposal($lom) || !empty($stats->proposal_contact_name);
    }
    return $cache[$lom_id];
  }
}

/**
 * Checks if a given lom_id in a form corresponds to a proposal.
 *
 * @param boolean $empty_lom_id
 *   lom id needs to be empty so you have to check if it should be handled as a proposal and you have
 *   values with and without lom ids, pass the empty state of lom_id.
 *
 * @return boolean
 *   Indicates if current form is a proposal (true) or a normal addition (false)
 */
function archibald_form_is_proposal($empty_lom_id = TRUE) {
  return ($empty_lom_id && archibald_can_only_propose());
}

/**
 * Get or Set the is proposal state.
 *
 * @param boolean $is_proposal
 *   If provided it will set the value and return the current state, else it will just return it
 *   (optional, default = NULL).
 *
 * @return boolean
 *   returns TRUE if it should be handled for proposal fields, else FALSE
 */
function archibald_fields_is_proposal($is_proposal = NULL) {
  $value = &archibald_static(__FUNCTION__, FALSE);

  if ($is_proposal !== NULL) {
    $value = $is_proposal;
    return $value;
  }

  return $value;
}

/**
 * Enables user hook javascript behaviours.
 *
 * @global Object $language
 */
function archibald_enable_user_hook() {
  $enabled_interface_languages = variable_get("language_negotiation_language", array());

  ctools_include('modal');
  ctools_modal_add_js();
  // drupal_add_js(drupal_get_path('module', 'archibald') . '/js/archibald.js');

  global $language;
  $current_language = $language->language;
  $js_variables = array(
    'current_language' => $current_language,
    'url_detection_enabled' => isset($enabled_interface_languages['locale-url']),
  );
  drupal_add_js(array('archibald' => $js_variables), "setting");

  drupal_add_js(drupal_get_path('module', 'archibald') . '/js/user_hook.js');
}

/**
 * Return all users which owns the permission(s).
 *
 * @param array|string $perms
 *   A single permission string or an array with permission strings.
 *
 * @return array
 *   Returns an array with user objects which has the given permission.
 */
function archibald_get_users_with_perm($perms) {

  $uids = $accounts = array();

  if (!is_array($perms)) {
    $perms = array($perms);
  }

  $roles = array();
  foreach ($perms AS $perm) {
    $roles += user_roles(TRUE, $perm);
  }

  $result = db_query('SELECT DISTINCT(uid) FROM {users_roles} WHERE rid IN (:rids)', array(':rids' => array_keys($roles)));
  foreach ($result as $row) {
    $uids[] = $row->uid;
  }

  if (!empty($uids)) {
    $accounts = user_load_multiple($uids);
  }
  return $accounts;
}

/**
 * Return all users which owns the permission(s) which can be used for an checkboxes form field.
 *
 * @param array|string $perms
 *   A single permission string or an array with permission strings.
 *
 * @return array
 *   Returns an array with the users, key is the user id and value the "username (email)"
 */
function archibald_get_users_with_perm_options($perms) {
  $options = array();
  foreach (archibald_get_users_with_perm($perms) AS $user) {
    $options[$user->uid] = $user->name . ' (' . $user->mail . ')';
  }
  return $options;
}

/**
 * Same as the drupal_static function but within our own namespace which prevents resetting from other
 * modules.
 *
 * @param $name
 *   Globally unique name for the variable. For a function with only one static,
 *   variable, the function name (e.g., via the PHP magic __FUNCTION__ constant)
 *   is recommended. For a function with multiple static variables add a
 *   distinguishing suffix to the function name for each one.
 * @param $default_value
 *   Optional default value.
 * @param $reset
 *   TRUE to reset a specific named variable, or all variables if $name is NULL.
 *   Resetting every variable should only be used, for example, for running
 *   unit tests with a clean environment. Should be used only though via
 *   function drupal_static_reset() and the return value should not be used in
 *   this case.
 *
 * @return
 *   Returns a variable by reference.
 *
 * @see drupal_static()
 */
function &archibald_static($name, $default_value = NULL, $reset = FALSE) {
  static $data = array(), $default = array();
  // First check if dealing with a previously defined static variable.
  if (isset($data[$name]) || array_key_exists($name, $data)) {
    // Non-NULL $name and both $data[$name] and $default[$name] statics exist.
    if ($reset) {
      // Reset pre-existing static variable to its default value.
      $data[$name] = $default[$name];
    }
    return $data[$name];
  }
  // Neither $data[$name] nor $default[$name] static variables exist.
  if (isset($name)) {
    if ($reset) {
      // Reset was called before a default is set and yet a variable must be
      // returned.
      return $data;
    }
    // First call with new non-NULL $name. Initialize a new static variable.
    $default[$name] = $data[$name] = $default_value;
    return $data[$name];
  }
  // Reset all: ($name == NULL). This needs to be done one at a time so that
  // references returned by earlier invocations of drupal_static() also get
  // reset.
  foreach ($default as $name => $value) {
    $data[$name] = $value;
  }
  // As the function returns a reference, the return should always be a
  // variable.
  return $data;
}

/**
 * Resets one or all centrally stored static variable(s).
 *
 * @param $name
 *   Name of the static variable to reset. Omit to reset all variables.
 */
function archibald_static_reset($name = NULL) {
  archibald_static($name, NULL, TRUE);
}

/**
 * get array of lifecycle.status options ready for use im form api #type=select
 *
 * @return array
 */
function archibald_get_life_cycle_status_options() {
  $ret = array
  (
    ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_DRAFT => t('Draft'),
    ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_FINALE => t('Final'),
    ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_UNAVAILABLE => t('Unavailable')
  );
  return $ret;
}

/**
 * Check vCards habdling permissions
 *
 * @return boolean
 */
function archibald_can_change_vcards() {
  return user_access('manage archibald vcards') || archibald_can_add_or_delete_resources();
}
