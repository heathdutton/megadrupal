<?php
  /**
   * @file
   * The archibald statistic form, which controls, how much a description
   * was clicked per day, week or month.
   */

  /**
   * Implements hook_menu().
   *
   * Adds menu callback for adding ratings
   *
   * @return array menu
   */
  function archibald_stats_menu() {
    $items['admin/archibald/other/stats'] = array(
      'title' => 'Statistic',
      'page callback' => 'archibald_stats_display',
      'type' => MENU_LOCAL_TASK,
      'weight' => -1,
      'access arguments' => array('view archibald stats'),
    );

    return $items;
  }

  /**
  * Implements hook_permission().
  *
  * @return array
  *   list off all psoible permissions
  */
  function archibald_stats_permission() {
   return array(
     'view archibald stats' => array(
       'title' => t('View description statistics of the national catalogue.'),
       'description' => t('View description statistics of the national catalogue.'),
     ),
   );
  }

  /**
   * Implements hook_theme().
   *
   * @param array $existing
   *   An array of all existing implementations.
   * @param string $type
   *   Wheter a theme, module, etc. is being processed.
   *     'module' = A module is being checked for theme implementations
   *     'base_theme_engine' = A theme engine is being checked for a theme
   *     'theme_engine' = A theme engine is being checked for the actual module
   *     'base_theme' = A base theme is being checked for theme implementations
   *     'theme' = The actual theme in use is being checked
   * @param string $theme
   *   The actual name of theme, module, etc. that is being processed.
   * @param strng $path
   *   The directory path of the theme or module.
   * @return array
   *   Returns an associative array of the information about the hook_theme.
   */
  function archibald_stats_theme() {
    return array(
      'archibald_stats_filter_form' => array(
        'render element' => 'form',
      ),
    );
  }

  /**
   * Renderes the stats view.
   *
   * @return string
   *   The rendered HTML.
   */
  function archibald_stats_display() {
    $output = "";
    $f = drupal_get_form("archibald_stats_filter_form");
    $output .= drupal_render($f);
    $output .= archibald_stats_analysis();
    return $output;
  }

  /**
   * Returns the data of a JSON file.
   *
   * This function returns the data values of a identified JSON file.
   *
   * @param int $start timestamp
   *   Start date of the data.
   * @param int $end timestamp
   *   End date of the data.
   * @param string $aggregation
   *   Identified the JSON file
   *   d = day
   *   w = week
   *   m = month
   *
   * @return array $json_array
   *   The identified JSON file with all the data values from the start and end date
   */
  function get_statistics($start, $end, $aggregation) {
    // Set the value for the parameter $aggregation, default = m.
    if ($aggregation == 'd') {
      $aggregation = 'daily';
    }
    elseif ($aggregation == 'w') {
      $aggregation = 'weekly';
    }
    else {
      $aggregation = 'monthly';
    }

    // Choose the JSON file with parameter $aggregation value.
    $json_file = file_get_contents(dirname(__FILE__) . '/archibald_stats_' . $aggregation . '.json');
    $json_array = json_decode($json_file, TRUE);

    return $json_array;
  }

  /**
   * Returns an array which have the default values included for a initial search.
   *
   * @return array
   *   The default values.
   */
  function archibald_stats_return_default_values() {
    $start = array();
    list($start['year'], $start['month'], $start['day']) = explode("-", date("Y-n-j", strtotime("-6 Month")));
    list($start['year'], $start['month'], $start['day']) = explode("-", date("Y-n-j", strtotime("-6 Month")));
    return array(
      'start' => $start,
      'end' => '',
      'aggregation' => 'm',
      'content_partner' => 0,
      'limit' => 20,
    );
  }

  /**
   * Implements hook_form().
   *
   * @param array $form
   *   The form.
   * @param array $form_state
   *   Delivery the data values of the form.
   * @return array $form
   *   The form with all the elements.
   *      Date element
   *      Option element
   *      Buttons
   */
  function archibald_stats_filter_form($form, &$form_state) {
    $form['#theme'] = 'archibald_stats_filter_form';



    $defaults = archibald_stats_return_default_values();

    if (!empty($_SESSION['archibald_stats_form_filter_data'])) {
      $defaults = $_SESSION['archibald_stats_form_filter_data'];
    }

    #$form_state['redirect'] = FALSE;
    #$form_state['no_redirect'] = TRUE;

    $form['start'] = array(
      '#type' => 'date',
      '#title' => t('Start date'),
    );
    $form['end'] = array(
      '#type' => 'date',
      '#title' => t('End date'),
    );
    $form['aggregation'] = array(
      '#type' => 'select',
      '#options' => array(
        'm' => t('Month'),
        'y' => t('Year'),
      ),
      '#title' => t('Period'),
    );

    $limit = array('' => t('All'));
    for($i = 10; $i <= 100; $i=$i+10) {
      $limit[$i] = $i;
    }

    $form['limit'] = array(
      '#type' => 'select',
      '#options' => $limit,
      '#title' => t('Number of results'),
    );

    $content_partners = array();
    foreach (archibald_load_content_partner() AS $row) {
      if (!archibald_can_publish_for_content_partner($row['content_partner_id'])) {
        continue;
      }
      $content_partners[$row['content_partner_id']] = $row['name'];
    }
    if (count($content_partners) > 1) {
      $form['content_partner'] = array(
        '#type' => 'select',
        '#options' => $content_partners,
        '#title' => t('Content partner'),
      );
    }
    else {
      $form['content_partner'] = array(
        '#type' => 'hidden',
        '#value' => key($content_partners),
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Filter'),
    );
    $form['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset'),
    );

    foreach ($defaults AS $k => $v) {
      $form[$k]['#default_value'] = $v;
    }

    return $form;
  }

  /**
   * Implements hook_form_validate().
   *
   * Set the redirect by clicking the submit button.
   *
   * Set the redirect to false, so the page does only refresh the display
   * and does not go to a (new) URL.
   *
   * @param array $form
   *   The form.
   * @param array $form_state
   *   The current form state.
   */
  function archibald_stats_filter_form_validate($form, &$form_state) {
    drupal_add_css(drupal_get_path('module', 'archibald_stats') . '/css/form_theme.css');
    if (isset($form_state['values']['start']) && isset($form_state['values']['end'])) {
      $start_date = mktime(0, 0, 0, $form_state['values']['start']['month'], $form_state['values']['start']['day'], $form_state['values']['start']['year']);
      $end_date = mktime(0, 0, 0, $form_state['values']['end']['month'], $form_state['values']['end']['day'], $form_state['values']['end']['year']);

      if ($start_date > $end_date) {
        form_set_error('start', t('The start date cannot be greater than end date'));
        form_set_error('end', '');
      }
    }

    if (!isset($form_state['values']['content_partner']) || !archibald_can_publish_for_content_partner($form_state['values']['content_partner'])) {
      form_set_error('content_partner', t('You are not allowed to view the statistics of this content partner'));
    }
  }

  /**
   * Implements hook_form_submit().
   *
   * Set the redirect by clicking the submit button.
   *
   * Set the redirect to false, so the page does only refresh the display
   * and does not go to a (new) URL.
   *
   * @param array $form
   *   The form.
   * @param array $form_state
   *   The current form state.
   */
  function archibald_stats_filter_form_submit($form, &$form_state) {
    drupal_add_css(drupal_get_path('module', 'archibald_stats') . '/css/form_theme.css');
    if ($form_state['values']['op'] === $form_state['values']['reset']) {
      unset($_SESSION['archibald_stats_form_filter_data']);
    }
    else {
      $_SESSION['archibald_stats_form_filter_data'] = $form_state['values'];
    }
  }

  /**
   * Returns an arranged form.
   *
   * This function returns a new arranged form for this module.
   * It save place on the page, so the user must not scroll to much.
   *
   * @param array $form
   *   The form.
   *
   * @return string $output
   *   The rendered html.
   */
  function theme_archibald_stats_filter_form($form) {
    drupal_add_css(drupal_get_path('module', 'archibald_stats') . '/css/form_theme.css');

    $output = '<div class="archibald_stats_filter_form">';
    $output .= drupal_render($form['form']['start']);
    $output .= drupal_render($form['form']['end']);
    $output .= drupal_render($form['form']['aggregation']);
    $output .= drupal_render($form['form']['limit']);
    if (isset($form['form']['content_partner'])) {
      $output .= drupal_render($form['form']['content_partner']);
    }

    $output .= '<div id="archibald_stats_filter_form_btns">' . drupal_render_children($form['form']) . '</div>';
    $output .= '<span style="clear: both;display: block;"></span>';
    $output .= '</div>';
    $output .= t('Use the search function of your web browser (Ctrl + F) to display statistical data of a specific description. To do this, set the filter «Number of results» to «All».');

    return $output;
  }

  /**
   * Shows the analysis in table form.
   *
   * This function shows the data values in table form, which were select
   * before the submit button was clicked.
   *
   * @return string theme
   *   Return a HTML table with the statistic values.
   */
  function archibald_stats_analysis() {
    include_once 'LomStats.class.php';
    drupal_add_css(drupal_get_path('module', 'archibald_stats') . '/css/statistic_analysis_style.css');

    if (isset($_SESSION['archibald_stats_form_filter_data'])) {
      $form_state = $_SESSION['archibald_stats_form_filter_data'];
    }
    else {
      $form_state = archibald_stats_return_default_values();
    }

    if (!isset($form_state['content_partner'])) {
      return "";
    }

    if (!archibald_can_publish_for_content_partner($form_state['content_partner'])) {
      return "";
    }
    switch ($form_state['aggregation']) {
      case 'm':
        $aggre_value = 'month';
        break;
      default:
        $aggre_value = 'year';
        break;
    }

    if (isset($form_state['start']) && !empty($form_state['start'])) {
      $y = (((int)$form_state['start']['year'] < 10) ? '0' : '') . $form_state['start']['year'];
      $m = (((int)$form_state['start']['month'] < 10) ? '0' : '') . $form_state['start']['month'];
      $d = (((int)$form_state['start']['day'] < 10) ? '0' : '') . $form_state['start']['day'];
      $start = $y . '-' . $m . '-' . $d;
    }
    else {
      $start = '';
    }

    if (isset($form_state['end']) && !empty($form_state['end'])) {
      $y = (((int)$form_state['end']['year'] < 10) ? '0' : '') . $form_state['end']['year'];
      $m = (((int)$form_state['end']['month'] < 10) ? '0' : '') . $form_state['end']['month'];
      $d = (((int)$form_state['end']['day'] < 10) ? '0' : '') . $form_state['end']['day'];
      $end = $y . '-' . $m . '-' . $d;
    }
    else {
      $end = '';
    }

    $stats = new ArchibaldLomStats();
    $results = $stats->statsResources($start, $end, $aggre_value, $form_state['content_partner']);

    $data = $rows = $header = $have_values = array();
    if (empty($results) || !is_array($results)) {
      $results = array();
    }

    foreach ($results AS $row) {
      $row = (array) $row;

      // Skip values if they are not educa descritions.
      if (strpos($row['lomId'], "archibald###") !== 0) {
        continue;
      }

      // Get the lom id.
      $el = explode( '###', $row['lomId'] );
      $lom_id = $el[1];
      unset( $el );

      switch ($aggre_value) {
        case 'month':
          $date = sprintf("%02d/%04d", $row[$aggre_value], $row['year']);
          break;
        default:
          $date = $row['year'];
          break;
      }

      if (!isset($data[$lom_id])) {
        $data[$lom_id] = array();
      }

      $data[$lom_id][$date] = $row['views'];
      $have_values[$date] = TRUE;
    }

    $headers = array_keys($have_values);
    if ($aggre_value == 'month') {
        function cmp_date($a, $b)
        {
          $a = explode('/', $a);
          $a = sprintf("%04d-%02d-%02d", $a[1], $a[0], 1);
          $b = explode('/', $b);
          $b = sprintf("%04d-%02d-%02d", $b[1], $b[0], 1);
          return strcmp($a, $b);
        }
        usort($headers, "cmp_date");
    }
    else {
        asort($headers);
    }

    foreach ($data AS $lom_id => $descriptions) {
      $row = array();
      $title = ArchibaldLom::determinTitle($lom_id);
      if (empty($title)) {
        $row[] = $lom_id;
      }
      else {
        $row[] = l($title, 'archibald/' . $lom_id, array('attributes' => array('target' => '_blank')));
      }
      $sum = 0;
      foreach ($headers AS $date) {
        $val = (!isset($descriptions[$date])) ? '-' : $descriptions[$date];
        if ((int)$val > 0) {
         $sum += $val;
        }
        $row[] = $val;
      }
      $row[] = $sum;
      $rows[] = $row;
    }

    array_unshift($headers, t("Description / Date"));
    array_push($headers, 'Ʃ');

    usort($rows, function($a, $b) {
      $count_a = count($a)-1;
      $count_b = count($b)-1;
      if ((int)$a[$count_a] > (int)$b[$count_b]) {
        return -1;
      }
      elseif ((int)$a[$count_a] < (int)$b[$count_b]) {
        return 1;
      }
      return 0;
    });

    if (!empty($form_state['limit'])) {
      $rows = array_slice($rows, 0, (int)$form_state['limit']);
    }

    if (empty($rows)) {
      $rows[] = array(t('No results found.'));
      $headers = array(t("Description / Date"));
    }

    return theme('table', array(
      'header' => $headers,
      'rows' => $rows,
    ));
  }