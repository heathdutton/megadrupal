<?php
/**
 * @file
 * test class for archibald
 */

/**
 * This is the basic web test class for archibald.
 *
 * It setsup the test environment and creates all the test users, roles and permissions.
 */
class ArchibaldWebTestCase extends DrupalWebTestCase {

  protected $user_proposer;
  protected $user_editor;
  protected $user_editor_biblio;
  protected $user_editor_pedagog;
  protected $user_publisher;
  protected $user_admin;

  protected $lom_id;

  /**
   * Set up the test environment.
   *
   * Enable module 'archibald' and creates all required test users, roles and permissions.
   */
  public function setUp() {
    archibald_static_reset();
    parent::setUp('archibald');

    $this->vcard_creator = $this->drupalCreateUser(array(
      'administer site configuration',
      'view archibald content',
      'add archibald content',
      'edit archibald content',
      'manage archibald content',
      'manage archibald vcards',
      'change archibald content status',
      'archibald content field education learningResourceType',
      'archibald content field education intendedEndUserRole',
      'archibald content field education typicalAgeRange',
      'archibald content field education typicalLearningTime',
      'archibald content field education difficulty',
      'archibald content field education aggregationLevel',
      'archibald content field education description',
      'archibald content field classification context',
      'work for cp 1'
      ));
    $this->user_admin = $this->drupalCreateUser(array('administer site configuration'));
    $this->setVcard('Simon', 'Admin', $this->user_admin);
    /*
     * drupalCreateUser returns a full user object. Example:
     * Data is created randomly.
     *
     * stdClass Object (
     * 	[uid] => 4
     * 	[hostname] => 192.168.1.136
     * 	[roles] => Array ( [8] => 8 [2] => authenticated user )
     * 	[cache] => 0
     * 	[name] => t1MccA7d
     * 	[mail] => t1MccA7d@example.com
     * 	[pass] => $S$D7EHqI9SqEDZsOLtqCa4UaF/rFceuQtuFmTgIg4iRf1qZRmd.Chf
     * 	[status] => 1
     * 	[created] => 1338903601
     * 	[theme] =>
     * 	[signature] =>
     * 	[access] => 0
     * 	[login] => 0
     * 	[language] =>
     * 	[picture] => 0
     * 	[init] =>
     * 	[pass_raw] => vXpdFajZrJ
     * )
     */
    $this->user_proposer = $this->drupalCreateUser(
      array(
        'view archibald homepage',
        'view archibald content',
        'add archibald content',
        'archibald content field general description',
        'archibald content field general language',
        'archibald content field technical preview_image',
        'archibald content field education learningResourceType',
        'archibald content field classification context',
      )
    );

    $user_editor_pedagog_permissions = array(
      'view archibald content',
      'add archibald content',
      'edit archibald content',
      'manage archibald content',
      'manage archibald vcards',
      'change archibald content status',
      'archibald content field education learningResourceType',
      'archibald content field education intendedEndUserRole',
      'archibald content field education typicalAgeRange',
      'archibald content field education typicalLearningTime',
      'archibald content field education difficulty',
      'archibald content field education aggregationLevel',
      'archibald content field education description',
      'archibald content field classification context',
      'administer site configuration',
      'work for cp 1',
    );
    $this->user_editor_pedagog = $this->drupalCreateUser($user_editor_pedagog_permissions);
    $this->setVcard('Marius', 'PedaEditor', $this->user_editor_pedagog);

    $user_editor_biblio_permissions = array(
      'view archibald content',
      'add archibald content',
      'edit archibald content',
      'manage archibald content',
      'manage archibald vcards',
      'change archibald content status',
      'view archibald content revisions',
      'archibald content field general description',
      'archibald content field general language',
      'archibald content field technical preview_image',
      'archibald content field general life_cycle version',
      'archibald content field technical otherPlattformRequirements',
      'administer site configuration',
      'work for cp 1',
    );
    $this->user_editor_biblio = $this->drupalCreateUser($user_editor_biblio_permissions);
    $this->setVcard('Michael', 'BiblioEditor', $this->user_editor_biblio);

    $this->user_editor = $this->drupalCreateUser(array_unique(array_merge(
      $user_editor_biblio_permissions,
      $user_editor_pedagog_permissions
    )));

    $this->setVcard('Paul', 'Editor', $this->user_editor);

    $this->user_publisher = $this->drupalCreateUser(
      array(
        'view archibald content',
        'view archibald content revisions',
        'manage archibald content',
        'delete archibald content',
        'change archibald content status',
        'publish archibald content local',
        'view the administration theme',
        'work for cp 1'
      )
    );

    $this->setVcard('Markus', 'Publisher', $this->user_publisher);



    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('add archibald content'));

    cache_clear_all();

  }

  /**
   * Generate a new vCard.
   *
   * @param string $firstname
   *   The firstname
   * @param string $lastname
   *   The lastname
   * @param stdClass $account
   *   The user account
   *
   * @return string
   *   a vCard
   */
  protected function setVcard($firstname, $lastname, &$account) {
    $vcard = new ArchibaldAppDataVcard();
    $vcard->firstname = $firstname;
    $vcard->lastname = $lastname;

    $this->drupalLogin($this->vcard_creator);
    $vid = $this->checkVcardCreate($firstname, $lastname);
    $this->drupalLogout();
    if (!empty($vid)) {
      $this->drupalLogin($account);
      $this->drupalPost('user/' . $account->uid . '/edit', array(
        'field_user_vcard[und][0][value]' => $vid,
      ), t('Save'));
      $this->assertText("The changes have been saved.", "User profile saved with vcard.");
    }
    $data = db_select('field_revision_field_user_vcard', 'v')
      ->fields('v', array('field_user_vcard_value'))
      ->condition('entity_id', $account->uid)
      ->execute()
      ->fetchAssoc();

    $account->field_user_vcard = $vid;

    $this->assert(($data['field_user_vcard_value'] == $vid), 'Found correct vcard for user: ' . $account->uid);
    $this->drupalLogout();
  }

  /**
   * Create a new vCard and test the add Form.
   *
   * @return string
   *   a vCard id
   */
  protected function checkVcardCreate($firstname = 'Mäximilèan a\'rn', $lastname = 'Dèl«âgäçenre') {
    // Dataset with evil but valid test aata.
    $fields = array(
      'firstname' => $firstname,
      'lastname' => $lastname,
      'organisation' => 'Mè°x\'im "vonte" täsd',
      'country' => 'Mèxi\'cö',
      'zip' => '8975',
      'city' => '',
      'address1' => 'Löckbèx 1337',
      'address2' => 'Addt34',
      'email' => 'test@examlple.com',
      'url' => 'http://www.google.de',
      'tel' => 'äèccd\'ddfe',
    );

    // test againe with valid data.
    $this->drupalPostAJAXmodal('archibald_contributor/add/standalone/ajax', $fields, t('Save'), $called_commands);

    // Check if we got no error messages. Becasue we expect a successfull saved form, with no errors.
    $this->assertNoText('Please enter a valid E-Mail addres', 'Dont show: e-mail seams not to be valid');
    $this->assertTrue(in_array('modal_dismiss', $called_commands), 'Modal closed');

    // Return the new contributer id.
    if (!empty($this->drupalSettings['archibald']['new_contributer_id'])) {
      if (is_array($this->drupalSettings['archibald']['new_contributer_id'])) {
        // If it is an array, return the second value.
        return $this->drupalSettings['archibald']['new_contributer_id'][1];
      }
      else {
        return $this->drupalSettings['archibald']['new_contributer_id'];
      }
    }
  }

  /**
   * This function gets the lom id for a given resource title.
   *
   * @param string $title
   *   The title of a Lom ressource.
   *
   * @return string
   *   The lom id.
   */
  protected function getLomIdByTitle($title) {
    $query = db_select('archibald_lom', 'al');
    $query->join('archibald_general', 'ag', 'al.general_id = ag.general_id');
    $query->join('archibald_langstring_terms', 'alt', 'ag.title = alt.langstring_terms_id');
    $query->condition('alt.term', $title);
    $query->fields('al' , array('lom_id'));
    $result = $query->execute();

    return $result->fetchField();
  }


  /**
   * Pass if the raw text IS found on the loaded page, fail otherwise.
   *
   * Raw text refers to the raw HTML that the page generated.
   *
   * Why to use assertEncodet() insted of assertRaw() ?
   * If you do a check Plaintext in theme. It will encode singe and double quotes.
   * This will let assertRaw() be false.
   *
   * @param $raw
   *   Raw (HTML) string to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   *
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertEncodet($raw, $message = '', $group = 'Other') {
    return $this->assertRaw(htmlspecialchars($raw, ENT_QUOTES), $message, $group);
  }

  /**
   * Execute a POST request on a Drupal page.
   *
   * It will be done as usual POST request with SimpleBrowser.
   * It will operate like cTools modal js lib.
   *
   * @param $path
   *   Location of the post form. Either a Drupal path or an absolute path or
   *   NULL to post to the current page. For multi-stage forms you can set the
   *   path to NULL and have it post to the last received page.
   * @param $edit
   *   Field data in an associative array. Changes the current input fields
   *   (where possible) to the values indicated. A checkbox can be set to
   *   TRUE to be checked and FALSE to be unchecked. Note that when a form
   *   contains file upload fields, other fields cannot start with the '@'
   *   character.
   * @param $submit
   *   Value of the submit button whose click is to be emulated. For example,
   *   t('Save'). The processing of the request depends on this value. For
   *   example, a form may have one button with the value t('Save') and another
   *   button with the value t('Delete'), and execute different code depending
   *   on which one is clicked.
   *
   * @param $called_commands
   *   A list of commands with was called.
   *   Called by refference
   *
   * @param $options
   *   Options to be forwarded to url().
   *
   * @param $start_get_post
   *   Options list to post for getting form.
   */
  protected function drupalPostAJAXmodal($path, $edit, $submit = NULL, &$called_commands = array(), array $options = array(), array $start_get_post = array()) {

    $this->drupalGetAJAXmodal($path, $start_get_post);

    // Submit the POST request.
    $return = drupal_json_decode($this->drupalPost(NULL, $edit, $submit));

    $drupal_settings = $this->drupalSettings;

    $content = '';
    foreach ($return as $command) {
      switch ($command['command']) {
        case 'settings':
          $drupal_settings = drupal_array_merge_deep($drupal_settings, $command['settings']);
          break;

        case 'modal_display':
          $content = $command['output'];

          $message = 'POST AJAX modal request to: ' . $path;
          $message .= '<hr />Ending URL: ' . $this->getUrl();
          $message .= '<hr />Modal content: <br />';
          $message .= $command['output'];
          $this->verbose($message);

          break;

        case 'insert':
          $content .= $command['data'];


          $message = 'POST AJAX modal request to: ' . $path;
          $message .= '<hr />Ending URL: ' . $this->getUrl();
          $message .= '<hr />Selector: ' . $command['selector'];
          $message .= '<hr />Insert: <br />';
          $message .= $command['data'];
          $this->verbose($message);

          break;
      }

      switch ($command['command']) {
        case 'insert':
          $called_commands[] = $command['command'] . '|' . $command['method'] . '|' . $command['selector'];
          break;

        default:
          $called_commands[] = $command['command'];
          break;
      }
    }

    $this->drupalSetContent($content);
    $this->drupalSetSettings($drupal_settings);

    return $return;
  }

  /**
   * Execute a GET request on a Drupal page.
   * It will operate like cTools modal js lib.
   *
   * @param $path
   *   Location of the post form. Either a Drupal path or an absolute path or
   *   NULL to post to the current page. For multi-stage forms you can set the
   *   path to NULL and have it post to the last received page.
   *
   * @param $edit
   *   Some post values to usw a plain post..
   *
   * @param $called_commands
   *   A list of commands with was called.
   *   Called by refference
   */
  protected function drupalGetAJAXmodal($path, array $edit = array(), &$called_commands = array()) {
    if (empty($edit)) {
      $raw = $this->drupalGet($path);
      $return = drupal_json_decode($raw);

    }
    else {
      // No $submit was given, cause of this we submit not a form, insted we submit directly without do a get bevore.
      $options['absolute'] = TRUE;

      $post = array();
      foreach ($edit as $key => $value) {
        // Encode according to application/x-www-form-urlencoded
        // Both names and values needs to be urlencoded, according to
        // http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1
        $post[$key] = urlencode($key) . '=' . urlencode($value);
      }
      $post = implode('&', $post);

      $raw = $this->curlExec(array(
        CURLOPT_URL => url($path, $options),
        CURLOPT_POST => TRUE,
        CURLOPT_POSTFIELDS => $post,
        CURLOPT_NOBODY => FALSE
      ));

      $return = @drupal_json_decode($raw);

      $message = 'GET AJAX modal request to: ' . $path;
      $message .= '<hr />Ending URL: ' . $this->getUrl();
      $message .= '<hr />Post values: <br />';
      $message .= highlight_string('<?php ' . var_export($edit, TRUE), TRUE);
      $message .= '<hr />Output string: <br />';
      $message .= $raw;
      $message .= '<hr />Decoded json: <br />';
      $message .= highlight_string('<?php ' . var_export($return, TRUE), TRUE);
      $this->verbose($message);

      if ($return === NULL && !empty($raw)) {
        // No valid json was returned, we expect that it is html.
        $this->drupalSetContent($raw);
        return TRUE;
      }
    }

    $content = '';
    $drupal_settings = $this->drupalSettings;

    foreach ($return as $command) {
      switch ($command['command']) {
        case 'settings':
          $drupal_settings = drupal_array_merge_deep($drupal_settings, $command['settings']);
          break;

        case 'modal_display':
          $content = $command['output'];

          $message = 'GET AJAX modal request to: ' . $path;
          $message .= '<hr />Ending URL: ' . $this->getUrl();
          $message .= '<hr />Modal content: <br />';
          $message .= $command['output'];
          $this->verbose($message);

          break;

        case 'insert':
          $content .= $command['data'];

          $message = 'GET AJAX modal request to: ' . $path;
          $message .= '<hr />Ending URL: ' . $this->getUrl();
          $message .= '<hr />Selector: ' . $command['selector'];
          $message .= '<hr />Insert: <br />';
          $message .= $command['data'];
          $this->verbose($message);

          break;
      }

      switch ($command['command']) {
        case 'insert':
          $called_commands[] = $command['command'] . '|' . $command['methode'] . '|' . $command['selector'];
          break;

        default:
          $called_commands[] = $command['command'];
          break;
      }
    }


    $this->drupalSetContent($content);
    $this->drupalSetSettings($drupal_settings);

    return TRUE;
  }


  /**
   * Set all resource field requirements to lovales level but the given one to the given level.
   *
   * @param string $field_name
   *  The field name to change values.
   * @param integer $current_requirement_level
   *   The curriculum level to set to.
   *   ARCHIBALD_RES_FIELD_OPTIONAL, ARCHIBALD_RES_FIELD_RECOMMEND or ARCHIBALD_RES_FIELD_REQUIRED
   * @param array $post
   *   The post with will be send to set all permissions.
   *   Called by refference
   */
  protected function setFieldRequiredSettings($field_name, $current_requirement_level, &$post = array(), $proposal = FALSE) {

    $need_to_log_out_after = FALSE;
    if (!$this->loggedInUser) {
      $tmp_user = array(
        'administer site configuration',
      );
      $tmp_user = $this->drupalCreateUser($tmp_user);
      $this->drupalLogin($tmp_user);

      $need_to_log_out_after = TRUE;
    }

    foreach (archibald_get_field_info() as $section_id => $section) {
      if ($section_id == 'relation') {
        continue;
      }

      foreach ($section['fields'] as $field_id => $field) {
        $name = $section_id . '_' . $field_id;

        $post[$name] = $field['minimum_requirements' . (($proposal) ? '_proposal' : '')];

        if ($post[$name] == ARCHIBALD_RES_FIELD_RECOMMEND) {
          // Its only recommendet, those values could be lower then the our suggestion.
          $post[$name] = ARCHIBALD_RES_FIELD_OPTIONAL;
        }

        // For debug, because the drupalPost variant is harder to debug in this case.
        // variable_set('archibald_field_require_type_' . drupal_strtolower($name), $post[$name]);
      }
    }

    // For debug, because the drupalPost variant is harder to debug in this case.
    // variable_set('archibald_field_require_type_' . drupal_strtolower($field_name), $current_requirement_level);

    if (!empty($field_name)) {
      $post[$field_name] = $current_requirement_level;
    }

    $this->drupalPost(
      'admin/config/services/archibald/fields' . (($proposal) ? '_proposal' : ''),
      $post,
      t('Save')
    );

    if ($need_to_log_out_after == TRUE) {
      $this->drupalLogout();
    }

  }
}

/**
 *
 * This function tests the basic workflow in archibald. Test cases:
 *
 *  - user_propser adds a resource -> resource is listed under propsed, status is unavailable
 *  - usr_editor_biblio wants to change status -> not possible (calssification missing)
 *  - user_admin changes fields configuration -> field classification is no longer required
 *  - user_editor_biblio wants tochange status -> field classification is OK, but learning resource type is missing
 *  - user_editor_biblio edits resource -> user is not able to edito educational fields, resource is saved
 *  - user_editor_biblio changes responsibility to user_editor_pedagog -> pedagog is display as new responsible
 *  - user_editor_pedagog edits resource -> user is not allowed to edit bibliographic fields, resource is saved
 *  - user_editor_pedagog changes status to draft -> opration permitted, status changed, resource listed under 'In progress'
 *  - user_publisher changes status to final -> opration permitted, status changed, resource listed under 'To publish'
 *  - user_publishewr publish resource local -> resource is listed under 'published' and is publish (search interface)
 *
 * @author cmueller
 *
 */
class ArchibaldBasicWorkflowWebTestCase extends ArchibaldWebTestCase {

  /**
   * Returns infos about the test case.
   *
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Archibald Basic Workflow',
      'description' => 'Tests the basic worflow',
      'group' => 'Archibald',
    );
  }

  /**
   * This is the main test function which is called by drupal testing framework.
   *
   * This function calls all the private test function.
   *
   * The drupal testing framework resets after each test function the database.
   * Because in this case all test function are depending on each other, they are called
   * within one main test function. E.g. the _testArchibaldPropseResource create a resource which is
   * needed by the test function checkArchibaldCheckStatus(). So the main test function makes sure that
   * test cases are executed in the defined order.
   */
  public function testArchibaldWorkflow() {
    $this->checkArchibaldProposeResource();
    $this->checkArchibaldTryToDeleteResource();

    $this->drupalLogin($this->user_editor_biblio);
    $this->drupalGet('archibald/' . $this->lom_id . '/set_status');

    /**
     * @cha, 12.04.2013 / 1
     *
     * Removed check of required classification context and lifecycle version because setting to draft is always allowed, only
     * set to final needs to be verified for all fields.


    if (archibald_get_field_requirements('classification.context') == ARCHIBALD_RES_FIELD_REQUIRED) {
      // Only if archibald_can_publish_central() returs true.
      // At least one key for centreal system was configurated.
      // Then is the field context required.

      $this->assertText(
        'The value of field \u00ab' . str_replace('>', '\u0026gt;', archibald_get_field_label('classification_context', TRUE)) . '\u00bb is missing'
      );
    }
    else {
      $this->assertNoText(
        'The value of field \u00ab' . str_replace('>', '\u0026gt;', archibald_get_field_label('classification_context', TRUE)) . '\u00bb is missing'
      );
    }

    $this->setFieldRequiredSettings('lifecycle_version', ARCHIBALD_RES_FIELD_REQUIRED);
    $this->drupalGet('archibald/' . $this->lom_id . '/set_status');
    $this->assertText(
      'The value of field \u00ab' . str_replace('>', '\u0026gt;', archibald_get_field_label('lifecycle_version', TRUE)) . '\u00bb is missing'
    );
    */
    $this->assertNoText(
      'The value of field \u00ab' . str_replace('>', '\u0026gt;', archibald_get_field_label('classification_context', TRUE)) . '\u00bb is missing'
    );
    $this->setFieldRequiredSettings('lifecycle_version', ARCHIBALD_RES_FIELD_REQUIRED);
    /** Change end @cha, 12.04.2013 / 1 **/

    $this->drupalLogout();
    $this->checkArchibaldChangeResponsibility();
    $this->checkArchibaldEditResourceBiblio();
    $this->checkArchibaldEditResourceEducational();
    $this->checkArchibaldSetStatusDraft();
    $this->checkArchibaldEditResourceEducational();
    $this->setFieldRequiredSettings(NULL, NULL);
    $this->checkArchibaldSetStatusFinal();
    $this->checkArchibaldTryToPublishResource();
    $this->checkArchibaldPublishLocal();
  }

  /**
   * Action: An anonymous user adds a resource description.
   *
   * Expected Result: The resource is listed under propsed resource and has status 'unavailable'.
   */
  private function checkArchibaldProposeResource() {
    $fields = array(
      'general[title]' => 'Â«La ForteresseÂ»',
      'general[identifier][identifier_0][title]' => 'Hintergrundinformationen',
      'general[identifier][identifier_0][entity]' => 'http://file-api-dsb.educa.ch/files/168/lf_6_hintergrundinformationen.pdf',
      'contactInfo[proposalContactEmail]' => 'cha@educa.ch',
      'contactInfo[proposalContactName]' => 'Christian Ackermann',
      'general[proposal_message]' => 'Test message',
    );

    $this->drupalPost('archibald/add/en', $fields, t('Save'));
    $this->assertText('Thank you! Your proposal', 'Can save proposal');
    $this->drupalLogin($this->user_editor_biblio);

    $this->clickLink('Descriptions');
    $this->clickLink('Proposals');

    $this->assertRaw('Â«La ForteresseÂ»', 'Resource Â«La ForteresseÂ» is listed under proposals');
    $this->assertText('Proposal', 'The status is Proposal');
    $this->assertText('Anonymous', 'The owner is anonymous');

    $this->lom_id = $this->getLomIdByTitle('Â«La ForteresseÂ»');

    $this->drupalLogout();
  }

  /**
   * Action: user_editor_biblio tries to delete the resource.
   *
   * Expected Result: User is not allowd to delete resource.
   */
  private function checkArchibaldTryToDeleteResource() {
    $this->drupalLogin($this->user_editor_biblio);
    $this->drupalGet('archibald/' . $this->lom_id . '/delete');
    $this->assertText('Access denied', 'Bibliographic editor is not allowed to delete resource');
    $this->drupalLogout();
  }

  /**
   * Action: user_editor_biblio edits the general description and language of the resource.
   *
   * Expected Result:  User is not allowed to edit Educational information, Classification and Location
   *                   Message 'Resource saved successfully' is displayed.
   */
  private function checkArchibaldEditResourceBiblio() {
    $this->drupalLogin($this->user_editor_biblio);

    $fields = array(
      'general[description]' => 'Unterrichtsmaterialien zum Dokumentarfilm Â«La ForteresseÂ» von Fernand Melgar.
         Nach ihrer nicht selten lebensgefÃ¤hrlichen Reise wÃ¤hnen sich viele FlÃ¼chtlinge mit ihrer Ankunft im Land des
         Roten Kreuzes am Ziel, in Sicherheit. Nur wenige ahnen, dass ihnen die letzte, entscheidende PrÃ¼fung noch bevorsteht:
         das neue Schweizer Asylverfahren. Zum ersten Mal durchdringt in Â«La ForteresseÂ» eine Kamera uneingeschrÃ¤nkt die
         Mauern eines Schweizer Empfangszentrums fÃ¼r Asylbewerber. Sie vermittelt einen menschlichen Blick auf einen
         kargen Ãœbergangsort, wo 200 MÃ¤nner, Frauen und Kinder zwischen Hoffen und Bangen darauf warten, dass der Staat
         Ã¼ber ihr Schicksal entscheidet. Mitleid und Misstrauen prÃ¤gen den Kontakt zwischen den FlÃ¼chtlingen und dem
         Personal des Zentrums, welches das restriktivste Asylgesetz aller europÃ¤ischen Staaten umsetzen muss.
         Mit Respekt und nicht ohne Humor fÃ¼hrt uns Â«La ForteresseÂ» ins Zentrum eines Orts, wo tÃ¤glich Menschen aussortiert werden.
         Â«Kinokultur in der SchuleÂ» empfiehlt, den Film im Kino zu schauen und organisiert auf Wunsch Kinovorstellungen
         fÃ¼r Schulen. Kontakt: Tel. & Fax 032 623 57 07 oder kinokultur@achaos.ch. Die DVD kÃ¶nnen Sie auf www.looknow.ch
         bestellen oder auf www.filmeeinewelt.ch mieten oder kaufen.',
      'general[language][de]' => 'de',
    );

    $this->drupalGet('archibald/' . $this->lom_id . '/edit');

    $this->assertNoText('Educational information', 'Bibliographic editor is not allowed to edit educational information');
    $this->assertNoText('Curricula', 'Bibliographic editor is not allowed to edit curricula');
    $this->assertNoText('Location', 'Bibliographic editor is not allowed to edit resource location');

    $this->drupalPost('archibald/' . $this->lom_id . '/edit', $fields, t('Save'));
    $this->assertText(str_replace('>', '&gt;', archibald_get_field_label('lifecycle_version', TRUE)) . ' field is required.');

    $this->drupalPost('archibald/' . $this->lom_id . '/edit', $fields + array('general[life_cycle][version]' => 'Endversion'), t('Save'));


    $this->assertRaw(
      'Description "Â«La ForteresseÂ»" has been successfully saved',
      'Description "Â«La ForteresseÂ»" has been successfully saved'
    );

    $this->drupalLogout();
  }

  /**
   * Action: user_editor_biblio changes status from unavailable to draft.
   *
   * Expected Result: Resource is listed under 'in progress'.
   */
  private function checkArchibaldSetStatusDraft() {
    $this->drupalLogin($this->user_editor_biblio);

    $fields = array(
      'lom_id' => $this->lom_id,
      'old_status' => ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_UNAVAILABLE,
      'status' => ArchibaldLomDataLifeCycle::LIFECYCLE_STATUS_DRAFT,
      'content_partner' => '1',
    );

    $this->drupalPost('archibald/' . $this->lom_id . '/set_status/form', $fields, t('Save'));
    $this->drupalGet('admin/archibald');
    $this->assertText('Â«La ForteresseÂ»', 'The resource Â«La ForteresseÂ» is now listed under "In progress"');
    $this->drupalLogout();
  }

  /**
   * Action: user_editor_biblio changes status from draft to final.
   *
   * Expected Result: Resource is listed under 'To publish'.
   */
  private function checkArchibaldSetStatusFinal() {
    $this->drupalLogin($this->user_publisher);

    $fields = array(
      'lom_id' => $this->lom_id,
      'old_status' => 'draft',
      'status' => 'LOMv1.0|final'
    );

    $this->drupalPost('archibald/' . $this->lom_id . '/set_status/form', $fields, t('Save'));
    $this->drupalGet('admin/archibald/to_publish');
    $this->assertText('Â«La ForteresseÂ»', 'The resource Â«La ForteresseÂ» is now listed under "To publish"');
    $this->drupalLogout();
  }

  /**
   * Action: user_editor_biblio changes responsibility to user_editor_pedagog.
   *
   * Expected Result: Responsibility is changed.
   */
  private function checkArchibaldChangeResponsibility() {
    $this->drupalLogin($this->user_editor_biblio);

    $fields = array(
      'lom_id' => $this->lom_id,
      'form_id' => 'archibald_content_set_responsible_form',
      'new_responsible' => $this->user_editor_pedagog->uid
    );
    $this->drupalPost('archibald/' . $this->lom_id . '/set_new_responsible/form', $fields, t('Confirm'));
    $this->drupalGet('admin/archibald/proposal');
    $this->assertText('Â«La ForteresseÂ»', 'The resource Â«La ForteresseÂ» is now listed under "in progress"');
    $this->assertRaw('>' . $this->user_editor_pedagog->name . '</span>',
      'The resource Â«La ForteresseÂ» is is assigned to user_editor_pedagog');

    $this->drupalLogout();
  }

  /**
   * Action: user_editor_pedagog edits educational fields of resource.
   *
   * Expected Result: Message 'Resource La Forteresse was successfully saved' is displayed.
   */
  private function checkArchibaldEditResourceEducational() {
    $this->drupalLogin($this->user_editor_pedagog);

    $fields = array(
      'education[description]' => 'Dossier eignet sich primÃ¤r fÃ¼r eine thematische Vorbereitung der Filmvisionierung,
        lÃ¤sst sich aber auch fÃ¼r nachbereitende Arbeiten einsetzen. Dossier 2 und 3 beinhalten inhaltliche
        und formale Fragen und Aufgabenstellungen fÃ¼r eine Nachbereitung der Filmvisionierung.
        Mit Dossier 4 kÃ¶nnen Theorie und Analyse des Genres Dokumentarfilm vor- oder nachbereitend
        vertiefend behandelt werden. Das Material ist als Fundus zur Auswahl gedacht. Es lÃ¤sst sich flexibel zur
        Vor- oder Nachbereitung der Filmvisionierung einsetzen â€“ je nachdem wie viel Zeit zur VerfÃ¼gung steht
        oder in welcher Vertiefung einzelne Themen behandelt werden. Die Materialien sind weitgehend
        fÃ¤cherÃ¼bergreifend sowie handlungs- und situationsorientiert konzipiert. Die ArbeitsauftrÃ¤ge und
        Fragestellungen wurden in Zusammenarbeit mit Gymnasiastinnen und Gymnasiasten erarbeitet.',
      'education[learningResourceType_pedagogical][LREv3.0|demonstration]' => 'LREv3.0|demonstration',
      'education[learningResourceType_pedagogical][LOMv1.0|experiment]' => 'LOMv1.0|experiment',
      'education[learningResourceType_pedagogical][LREv3.0|role play]' => 'LREv3.0|role play',
      'education[learningResourceType_pedagogical][LOMv1.0|simulation]' => 'LOMv1.0|simulation',
      'education[intendedEndUserRole][LOMv1.0|learner]' => 'LOMv1.0|learner',
      'education[intendedEndUserRole][LOMv1.0|teacher]' => 'LOMv1.0|teacher',
      'education[typicalLearningTime]' => 50,
      'classification[context][LREv3.0|compulsory education]' => 'LREv3.0|compulsory education'
    );

    $this->drupalGet('archibald/' . $this->lom_id . '/edit');

    $this->assertNoText('Contributor', 'Pedagogical editor is not allowed to edit Ccontributor');
    $this->assertNoText('Keywords', 'Pedagogical editor is not allowed to edit keywords');
    $this->assertNoText('Rights', 'Pedagogical editor is not allowed to edit rights');
    $this->assertNoText('Relations', 'Pedagogical editor is not allowed to edit relations');

    $this->drupalPost('archibald/' . $this->lom_id . '/edit', $fields, t('Save'));

    $this->assertRaw(
      'Description "Â«La ForteresseÂ»" has been successfully saved',
      'Description "Â«La ForteresseÂ»" has been successfully saved');

    $this->drupalLogout();
  }

  /**
   * Action: user_editor_biblio tries to publish the resource.
   *
   * Expected Result: User is not allowed to publish resource
   */
  private function checkArchibaldTryToPublishResource() {
    $this->drupalLogin($this->user_editor_biblio);
    $this->drupalGet('archibald/' . $this->lom_id . '/publish');
    $this->assertText('Access denied', 'Bibliographic editor is not allowed to publish resource');
    $this->drupalLogout();
  }

  /**
   * Action: user_publisher tries to local publish the resource.
   *
   * Expected Result: Resource is published local.
   */
  private function checkArchibaldPublishLocal() {
    $this->drupalLogin($this->user_publisher);

    $fields = array();


    $status = archibald_get_lom_stats($this->lom_id);

    // Figure out if there is a plain enviroment or a key was set.
    $is_central_configurated = FALSE;
    if (!empty($status->content_partner) && $status->content_partner['key']) {
      $is_central_configurated = TRUE;
    }

    // Avoid to have a 'Publish locally and nationally' button.
    variable_set('archibald_publish_type', ARCHIBALD_PUBLISH_SEPERATE);

    if ($is_central_configurated) {
      $button = t('Publish locally');
    }
    else {
      $button = t('Publish');
    }

    $this->drupalPost('archibald/' . $this->lom_id . '/publish', $fields, $button);

    $this->drupalGet('admin/archibald/published');
    $this->assertText('Â«La ForteresseÂ»', 'The resource Â«La ForteresseÂ» is now listed under "published"');

    $this->drupalLogout();

    $this->drupalLogin($this->user_proposer);

    $this->drupalGet('archibald');
    $this->assertText('Â«La ForteresseÂ»', 'The resource Â«La ForteresseÂ» is now public (local)"');

    $this->drupalGet('archibald/' . $this->lom_id);
    $this->assertText('Dossier eignet sich primÃ¤r fÃ¼r eine thematische Vorbereitung der Filmvisionierung',
      'Detailed resource view: Educational description is displayed');

    $this->assertText('German', 'Detailed resource view:: Language is displayed');
    $this->assertText('Demonstration', 'Detailed resource view: Resource learning type is demonstration');
    $this->assertText('Experiment', 'Detailed resource view: Resource learning type is experiment');
    $this->assertText('Role play', 'Detailed resource view: Resource learning type is role play');
    $this->assertText('Simulation', 'Detailed resource view: Resource learning type is simulation');
    $this->assertText('Compulsory education', 'Detailed resource view: classification is compulsory education');
    $this->assertText('Learner', 'Detailed resource view: Target group is learner');
    $this->assertText('Teacher', 'Detailed resource view: Target group is teacher');
    $this->assertText('Up to 1 lesson', 'Detailed resource view: Learning time is up to 1 lesson');

    $this->drupalLogout();
  }
}

/**
 *
 * This function tests the basic lom resource without in archibald. Test cases:
 *
 * This test has an expected run time of 3 minutes.
 *
 * @author hhenning
 */
class ArchibaldLomWebTestCase extends ArchibaldWebTestCase {

  /**
   * lom_id of current ressource
   * @var string
   */
  protected $lom_id = '';

  /**
   * The session ident for curriculum part of lom form.
   * @var string
   */
  protected $session_ident = '';

  /**
   * Returns infos about the test case.
   *
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Archibald Basic Lom Resource Form',
      'description' => 'Tests basics of the lom resource form',
      'group' => 'Archibald',
    );
  }


  /**
   * This is the main test function which is called by drupal testing framework.
   *
   * This function calls all the private test function.
   *
   * It will test annonymous resource creation
   *
   * ATTENTION:
   *   This test oes a huge ammount of http request
   *   with takes a horrible long time!
   */
  public function testArchibalLomResourceAddEdit() {
    $this->checkArchibaldLomForm();
  }

  /**
   * Check if all lom values will stored, loaded and displayed correctly.
   *
   * @return string
   *   a new lom_id
   */
  protected function checkArchibaldLomForm() {
    // Login with full permissions.
    $user = ArchibaldPermissionsWebTestCase::getLomFormUser();
    $this->drupalLogin($user);

    // Create first tiny resource for use as relation
    $fields = array(
      'general[title]' => 'Â«La FortÃ¨ress\'eÂ»',
      'general[identifier][identifier_0][title]' => 'Hintergrundinformationen',
      'general[identifier][identifier_0][entity]' => 'http://file-api-dsb.educa.ch/files/168/lf_6_hintergrundinformationen.pdf',
    );


    // Submit first tiny resource.
    $this->drupalPost('archibald/add/en', $fields, t('Save'));

    // Try to extract lom id after submit the form.
    $this->assertTrue(preg_match('#archibald/([a-zA-Z0-9]+)/revisions#', $this->getUrl(), $match), 'Get lom_id from URL');

    $this->lom_id = $match[1];

    // Create the test resource. Containing full data.
    $fields = $this->getLomForm($this->lom_id);

    // Open the new form.
    $this->drupalGet('archibald/add/en');

    // Try to extract session_ident for curriculum form part.
    $this->assertTrue(
      preg_match('#name\="classification\[session_ident\]" value\="([a-zA-Z0-9]+)"#', $this->drupalGetContent(), $match),
      'Get curriculum session_ident'
    );

    if (!empty($match[1])) {
      $this->session_ident = $match[1];

      // We need this to switch back to the lom main form after curriculum test.
      $tmp_content = $this->drupalGetContent();
      $tmp_settings = $this->drupalGetSettings();

      // Check educa curriculum.
      $this->checkBasicCurriculum();

      // Go back from cuirriculum to lom resource main form.
      $this->drupalSetContent($tmp_content);
      $this->drupalSetSettings($tmp_settings);
    }

    // Submit the form.
    $this->drupalPost(NULL, $fields, t('Save'));

    $this->assertTrue(preg_match('#archibald/([a-zA-Z0-9]+)/revisions#', $this->getUrl(), $match), 'Get lom_id from URL');

    $this->lom_id = $match[1];

    // Test the display of lom resouce.
    $this->assertText($fields['general[title]'], 'Test general title');

    $this->assertEncodet($fields['general[description]'], 'Test general description');

    $this->assertEncodet($fields['general[identifier][identifier_0][title]'], 'Test Identifier');
    $this->assertEncodet($fields['general[identifier][identifier_1][title]'], 'Test Identifier');
    $this->assertRaw('test_document.pdf', 'Test Identifier upload');

    $this->assertRaw('styles/archibald_details/public/files/preview_image/test_image', 'Test preview image');

    $this->assertEncodet($fields['keywords[keyword][keyword_0]'], 'Test Keyword');
    $this->assertEncodet($fields['keywords[keyword][keyword_1]'], 'Test Keyword');

    $this->assertText('German, French', 'Test general language');

    $this->assertText('animated image', 'Test Learning resource type');
    $this->assertText('Case study', 'Test Learning resource type');
    $this->assertText('Demonstration', 'Test Learning resource type');
    $this->assertText('Self assessment', 'Test Learning resource type');

    $this->assertText('Learners', 'Test Intended end user role');
    $this->assertText('Teachers', 'Test Intended end user role');

    $this->assertText('6-17', 'Test Typical age range');

    $this->assertText('Easy', 'Test Difficulty');

    $this->assertText('1 to 5 lesson', 'Test Typical learning time');

    $this->assertEncodet($fields['education[description]'], 'Test education description');

    $this->assertText($fields['general[otherPlattformRequirements]'], 'Test general otherPlattformRequirements');

    $this->assertEncodet($fields['general[technical][location]'], 'Test general location');
    $this->assertEncodet($fields['general[life_cycle][version]'], 'Test general version');

    $this->assertText('Compulsory education', 'Test Context');

    $this->assertEncodet('Â«La FortÃ¨ress\'eÂ»', 'Test Relations');

    $this->checkContentForBasicCurriculumItems();

    $this->drupalLogout();

    return $this->lom_id;
  }

  /**
   * Get a complete lom resource form.
   *
   * @param string $relation_lom_id
   *   A lom id given for relatin has part of
   *   Default: NULL, no relation will add.
   *
   * @return array
   *   a complet lom object form post
   */
  protected function getLomForm($relation_lom_id = NULL) {
    $rights_licence = $this->getEvilLicence();

    $form = array(
      'language' => 'en',
      'general[title]' => 'Ã‰ducation Ã  l\'imageÂ² Â«Ã¢gÃ¤Ã§enreÂ°Â»!',
      // 'general[title_spell_spell_check]' => '1',
      'general[description]' => 'Test Description Ã‰ducation Ã   l\'imageÂ² Â«Ã¢gÃ¤Ã§enreÂ°Â»! With havy bad Text <b>Including HTML</b>',
      // 'general[escription_spell_check]' => '1',
      'general[identifier][identifier_0][title]' => 'Identifier Ã‰db>ucation</b> Ã   l\'imageeÂ² Â«Ã¢gÃ¤Ã§enreÂ°Â»!',
      'general[identifier][identifier_0][catalog]' => 'URL',
      'general[identifier][identifier_0][entity]' => 'http://www.google.de',
      'general[identifier][identifier_1][title]' => 'Some funny Planet',
      'general[identifier][identifier_1][catalog]' => 'URL',
      'general[identifier][identifier_1][entity]' => '',
      'files[general_identifier_identifier_1_fid]' => realpath(drupal_get_path('module', 'archibald')) . '/data/test_document.pdf',
      'files[general_preview_image]' => realpath(drupal_get_path('module', 'archibald')) . '/data/test_image.png',
      'general[language][de]' => 'de',
      'general[language][fr]' => 'fr',
      'general[technical][location]' => 'location: l\'imageÂ² Â«Ã¢gÃ¤Ã§enreÂ°Â»! <b>With</b> hav',
      'general[life_cycle][version]' => 'version: l\'imageÂ² Â«Ã¢gÃ¤Ã§enreÂ°Â»! <b>With</b> hav',
      'general[otherPlattformRequirements]' => 'Techical requirements: l\'imageÂ² Â«Ã¢gÃ¤Ã§enreÂ°Â»! With havy',
      'life_cycle[contribute][contribute_1][entity]' => $this->checkVcardCreate(),
      'keywords[keyword][keyword_0]' => '«âgäçenre°»!',
      'keywords[keyword][keyword_1]' => 'Täst Kèywör\'d',
      // Need first create the coverage list taxonomy.
      #'keywords[coverage][coverage_0]' => 'Täsd Kovär\'age',
      #'keywords[coverage][coverage_1]' => 'coverages Test',
      'education[description]' => 'Cras euismod, metus egÃ¤t matti\'s faucibus, ante justo aliquet eros, eget fermentum urna eros blandit est. Curabitur eget dolor dui! Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Ut tempus, dolor et mattis aliquet, ipsum velit molestie enim; in egestas urna quam rhoncus nunc. Maecenas facilisis pulvinar lacus ut sagittis. Nam consectetur congue Â«Ã¢gÃ¤Ã§enreÂ°Â»! rhoncus. Cras rhoncus fac',
      // 'education[description_spell_check]' => '1',
      'education[learningResourceType_pedagogical][LOMv1.0|self assessment]' => 'LOMv1.0|self assessment',
      'education[learningResourceType_pedagogical][LREv3.0|case study]' => 'LREv3.0|case study',
      'education[learningResourceType_pedagogical][LREv3.0|demonstration]' => 'LREv3.0|demonstration',
      'education[learningResourceType_documentary][LOM-CHv1.0|animated image]' => 'LOM-CHv1.0|animated image',
      'education[intendedEndUserRole][LOMv1.0|learner]' => 'LOMv1.0|learner',
      'education[intendedEndUserRole][LOMv1.0|teacher]' => 'LOMv1.0|teacher',
      'education[typicalAgeRange][from]' => '6',
      'education[typicalAgeRange][to]' => '17',
      'education[typicalLearningTime]' => '150',
      'education[difficulty]' => 'LOMv1.0|easy',
      'education[aggregationLevel]' => '3',
      'classification[context][LREv3.0|compulsory education]' => 'LREv3.0|compulsory education',
      'rights[cost]' => 'LOMv1.0|yes',
      'rights[description]' => $rights_licence->field_taxon_key['und'][0]['value'],
    );

    if (!empty($relation_lom_id)) {
      $form['relations[relation][relation_0][name]'] = 'Dossier pädagogique Ecole-Musäe: "A lÃ¢Â€Â™abri des murailles, la vie dÃ¢Â™ un chÃ¨Â¢\'teau Ã   lÃ¢Â€poque savoyarde"';
      $form['relations[relation][relation_0][ressource]'] = $relation_lom_id;
    }

    return $form;
  }

  /**
   * Create a new vCard and test the add Form.
   *
   * @return string
   *   a vCard id
   */
  protected function checkVcardCreate($firstname = 'Mäximilèan a\'rn', $lastname = 'Dèl«âgäçenre') {
    // Dataset with evil but valid test aata.
    $fields = array(
      'firstname' => $firstname,
      'lastname' => $lastname,
      'organisation' => 'Mè°x\'im "vonte" täsd',
      'country' => 'Mèxi\'cö',
      'zip' => '8975',
      'city' => '',
      'address1' => 'Löckbèx 1337',
      'address2' => 'Addt34',
      'email' => 'test@examlple.com',
      'url' => 'http://www.google.de',
      'tel' => 'äèccd\'ddfe',
      'files[logo]' => realpath(drupal_get_path('module', 'archibald')) . '/data/test_image.png',
    );

    // Second dataset with invalid data.
    $fieldsb = $fields;
    $fieldsb['email'] = 'Illögè@öègal.de';
    $fieldsb['url'] = 'wrong url';
    unset($fieldsb['firstname'], $fieldsb['lastname'], $fieldsb['organisation']);

    // First test run with invalid data.
    $this->drupalPostAJAXmodal(
      'archibald_contributor/add/standalone/ajax',
      $fieldsb,
      t('Save')
    );

    // Lookup if for validater found all invalid data.
    $this->assertText('Enter first name', 'Found invalid missing name');
    $this->assertText('Please enter a valid E-Mail addres', 'Found invalid e-mail');
    $this->assertText('Please enter a valid URL', 'Found invalid url');

    // test againe with valid data.
    $this->drupalPostAJAXmodal(
      'archibald_contributor/add/standalone/ajax',
      $fields,
      t('Save'),
      $called_commands
    );

    // Check if we got no error messages. Becasue we expect a successfull saved form, with no errors.
    $this->assertNoText('Please enter a valid E-Mail addres', 'Dont show: e-mail seams not to be valid');
    $this->assertTrue(
      in_array('modal_dismiss', $called_commands),
      'Modal closed'
    );

    // Check if it was saved succesfully and a new contributor id was returned.
    $this->assertTrue(
      !empty($this->drupalSettings['archibald']['new_contributor_id']),
      'Found settings new_contributor_id'
    );

    // Return the new contributor id.
    if (!empty($this->drupalSettings['archibald']['new_contributor_id'])) {
      if (is_array($this->drupalSettings['archibald']['new_contributor_id'])) {
        // If it is an array, return the second value.
        return $this->drupalSettings['archibald']['new_contributor_id'][1];
      }
      else {
        return $this->drupalSettings['archibald']['new_contributor_id'];
      }
    }
  }

  /**
   * Create a rights_licenses term witch include evil chars.
   *
   * @staticvar string $vocabularies
   * @return object
   *   a taxonomy term object
   */
  protected function getEvilLicence() {

    static $vocabularies = NULL;

    // Load vocabulary vid`s.
    if (is_null($vocabularies)) {
      $vocabularies = array();
      foreach (taxonomy_get_vocabularies() as $vocabularie) {
        $vocabularies[$vocabularie->machine_name] = $vocabularie->vid;
      }
    }

    // Dataset with evil but valid test aata.
    $term = new stdClass();
    $term->name = 'Evi\'s li`çenes»! <b>With</b> hav';
    $term->description = '';
    $term->field_taxon_key['und'][0]['value'] = 'evil_test_key';
    $term->field_taxon_url['und'][0]['value'] = 'http://evil.examle.org/teest';

    // Use the first available text format.
    $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();

    $term->vid = $vocabularies['rights_licenses'];

    // Save term and return the $term object.
    taxonomy_term_save($term);
    return $term;
  }

  /**
   * Basic test for the educa curriculum part of lom resource add/edit form.
   */
  protected function checkBasicCurriculum() {

    $basic_post = array(
      'machine_name' => 'educa',
      'session_ident' => $this->session_ident,
    );

    // Test if form basicly loads
    $this->drupalGetAJAXmodal(
      'admin/archibald/classification/get_add_form',
      $basic_post
    );

    $this->assertRaw('compulsory education|cycle_1', 'Found a education level');
    $this->assertRaw('mathematics and natural science', 'Found a discipline');

    // Add 5 Items
    $this->drupalPostAJAXmodal(
      'admin/archibald/classification/get_add_form',
      $basic_post + array(
        'educationalLevel' => 'compulsory education|cycle_2|7th_and_8th_year',
        'discipline' => 'languages|german foreign language',
      ),
      t('Add'),
      $called_commands,
      array(),
      $basic_post
    );

    // Try to extract lom id after submit the form.
    $this->assertTrue(
      in_array('archibald_ajax_update_classifications', $called_commands),
      'The curriculum reload request for overlay was done'
    );

    $this->assertTrue(
      in_array('insert|html|.archibald_classification[machine_name=educa] .archibald_classification_entrys', $called_commands),
      'The curriculum for basic form was returned'
    );

    $this->drupalPostAJAXmodal(
      'admin/archibald/classification/get_add_form',
      $basic_post + array(
        'educationalLevel' => 'compulsory education|cycle_2',
        'discipline' => 'languages|italian foreign language',
      ),
      t('Add'),
      $called_commands,
      array(),
      $basic_post
    );

    $this->drupalPostAJAXmodal(
      'admin/archibald/classification/get_add_form',
      $basic_post + array(
        'educationalLevel' => 'post compulsory education|matura_schools',
        'discipline' => 'languages|ancient languages|hebrew',
      ),
      t('Add'),
      $called_commands,
      array(),
      $basic_post
    );

    $this->drupalPostAJAXmodal(
      'admin/archibald/classification/get_add_form',
      $basic_post + array(
        'educationalLevel' => 'compulsory education|cycle_3|10th_year',
        'discipline' => 'mathematics and natural science|natural sciences|biology',
      ),
      t('Add'),
      $called_commands,
      array(),
      $basic_post
    );

    $this->drupalPostAJAXmodal(
      'admin/archibald/classification/get_add_form',
      $basic_post + array(
        'educationalLevel' => 'compulsory education|cycle_1',
        'discipline' => 'arts|music',
      ),
      t('Add'),
      $called_commands,
      array(),
      $basic_post
    );

    // Test if the content of all 5 add request is now with in the return.
    $this->checkContentForBasicCurriculumItems();

    /*
     * Check the additional 1st cycle Music element,
     * witch we will delete in next step, to test deleting.
     */

    $this->assertText('1st cycle');
    $this->assertText('up to 4th school year');
    $this->assertText('Music');

    // Test a delete query.
    $this->assertTrue(
      preg_match('/Music.+href\=\"educa\|([a-zA-Z0-9]+)\"/sU', $this->drupalGetContent(), $match),
      'Found delete button for "Music"'
    );

    if (!empty($match[1])) {
      // Found the ek of item "Music" , now try to delte it.
      $this->drupalGetAJAXmodal(
        'admin/archibald/classification/remove',
        array(
          'machine_name' => 'educa',
          'session_ident' => $this->session_ident,
          'key' => $match[1],
        )
      );

      $this->assertNoText('Music', 'The item "Music" was deleted');
    }
  }

  /**
   * Check if last request reutrned basic/educa curriculum items
   * with was addet in self::checkBasicCurriculum() methode.
   */
  protected function checkContentForBasicCurriculumItems() {
    // First check if we see the output and not the add form.
    $this->assertText('School grade');

    // Now check if all items are output we added before.
    $this->assertText('Compulsory education');
    $this->assertText('2nd cycle');
    $this->assertText('3rd cycle');
    $this->assertText('7th and 8th year');
    $this->assertText('5th to 8th school year');
    $this->assertText('10th year');

    $this->assertText('Post-compulsory education');
    $this->assertText('Matura schools');

    $this->assertText('Language');
    $this->assertText('German');
    $this->assertText('Italian');
    $this->assertText('Hebrew');

    $this->assertText('Natural sciences');
    $this->assertText('Biology');
  }
}

/**
 * The Class test all Permissions arround archibald.
 *
 * This test has an expected run time of 3 minutes.
 *
 * @author hhenning
 */
class ArchibaldPermissionsWebTestCase extends ArchibaldWebTestCase {

  /**
   * lom_id of current ressource
   * @var string
   */
  protected $lom_id = '';

  /**
   * Returns infos about the test case.
   *
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Archibald Permission',
      'description' => 'Tests if permissions will be check right in all situations',
      'group' => 'Archibald',
    );
  }

  /**
   * This is the main test function which is called by drupal testing framework.
   *
   * This function calls all the private test function.
   *
   * It will test annonymous resource creation
   * Resource field permissions
   * Required status
   */
  public function testArchibalPermissons() {

    $this->checkArchibaldResourceAddAnnonymous();
    $this->checkArchibaldPermissions();

  }

  /**
   * An anonymous user add a new resource.
   *
   * Test the full click path with language chooser.
   */
  private function checkArchibaldResourceAddAnnonymous() {
    $this->drupalLogout();

    // Test if annonymous will be denied to create ressourcen.
    user_role_revoke_permissions(DRUPAL_ANONYMOUS_RID, array('add archibald content'));

    $this->drupalGet('archibald/add');
    $this->assertText('You are not authorized to access this page', 'Annonymous user is not allowed to create a resource');

    // Add Permission to annonymous role.
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('add archibald content'));

    // Test if annonymous will be permitted to create ressourcen.
    // Test with activated language switch and a single language activated is harder then without.
    variable_set('archibald_switch_language_while_add', 1);

    db_update('languages')
      ->fields(array('enabled' => 0))
      ->condition('language', language_default('language'), '!=')
      ->execute();

    $this->drupalGet('archibald/add');
    // If  there is only a single language is active, the base language chooser page will not be shown.
    $this->assertText('General information', 'The form will displayed');

    // Test with more then 1 active language language.
    locale_add_language('de', NULL, NULL, NULL, '', '', TRUE, TRUE);

    $this->drupalGet('archibald/add');

    $this->assertText('Choose the language', 'Annonymous user is allowed to create a resource');

    // Test if form will displayed after language choose
    $this->clickLink('English');

    $this->assertText('General information', 'The form will displayed');

    $not_permitted_sections = array(
      'Contributor',
      'Keywords',
      'Educational information',
      'Curricula',
      'Rights',
      'Relations'
    );

    foreach ($not_permitted_sections as $section) {
      $this->assertNoText($section, 'User is not allowed to see ' . $section . ' section');
    }

    $fields = array(
      'general[title]' => 'Â«La ForteresseÂ»',
      'general[identifier][identifier_0][title]' => 'Hintergrundinformationen',
      'general[identifier][identifier_0][entity]' => 'http://www.google.de/',
      'contactInfo[proposalContactEmail]' => 'cha@educa.ch',
      'contactInfo[proposalContactName]' => 'Christian Ackermann',
      'general[proposal_message]' => 'Test message',
    );

    $this->drupalPost(NULL, $fields, t('Save'));

    $this->assertText('Thank you! Your proposal "Â«La ForteresseÂ»" has been successfully submitted.', 'Resource was saved');
  }

  /**
   * Check full lom form if the right fields will displayed when it`s permission was set.
   */
  protected function checkArchibaldPermissions() {
    if (empty($this->lom_id)) {
      return FALSE;
    }

    foreach ($this->getLomfieldPermisssion() as $section => $permissions) {
      foreach ($permissions as $permission => $string_to_find) {

        $user = $this->drupalCreateUser(array(
          'edit archibald content',
          $permission
        ));

        $this->drupalLogin($user);


        $this->drupalGet('archibald/' . $this->lom_id . '/edit');
        $this->assertRaw($string_to_find, 'Check permission: ' . $permission);

        foreach ($this->getLomfieldPermisssion() as $section_b => $null) {
          if ($section_b != 'General information') {
            if ($section_b != $section) {
              $this->assertNoText($section_b, 'Check permission section: ' . $section_b);
            }
            else {
              $this->assertText($section_b, 'Check permission section: ' . $section_b);
            }
          }
        }

        $this->drupalLogout();
      }
    }
  }

  /**
   * Get an aray of permissions for lom form.
   *
   * @return array
   *   Section of Lom form =>
   *     permission => field key
   */
  public function getLomfieldPermisssion() {
    $possible_permissions = array(
      'General information' => array(
        'archibald content field general description' => 'general[description]',
        'archibald content field general language' => 'general[language]',
        'archibald content field technical preview_image' => 'Preview image',
        'archibald content field general life_cycle version' => 'general[life_cycle][version]',
        'archibald content field technical location' => 'general[technical][location]',
        'archibald content field technical otherPlattformRequirements' => 'general[otherPlattformRequirements]',
      ),
      'Contributor' => array(
        'archibald content field life_cycle contribute' => 'life_cycle[contribute][contribute_',
      ),
      'Keywords' => array(
        'archibald content field keywords keyword' => 'keywords[keyword][keyword_',
        'archibald content field keywords coverage' => 'keywords[coverage][coverage_',
      ),
      'Educational information' => array(
        'archibald content field education description' => 'education[description]',
        'archibald content field education learningResourceType' => 'education[learningResourceType_pedagogical]',
        'archibald content field education intendedEndUserRole' => 'education[intendedEndUserRole]',
        'archibald content field education typicalAgeRange' => 'education[typicalAgeRange]',
        'archibald content field education typicalLearningTime' => 'education[typicalLearningTime]',
        'archibald content field education difficulty' => 'education[difficulty]',
        'archibald content field education aggregationLevel' => 'education[aggregationLevel]',
      ),
      'Curricula' => array(
        'archibald content field classification context' => 'classification[context]',
        'archibald content field classification curriculums' => 'archibald_classification',
      ),
      'Rights' => array(
        'archibald content field rights cost' => 'rights[cost]',
        'archibald content field rights description' => 'rights[description]',
      ),
      'Relations' => array(
        'archibald content field relations relation' => 'relations[relation][relation_',
      ),
    );

    return $possible_permissions;
  }

  /**
   * Create a new user with have all possible permissions a lom form.
   *
   * @param boolean $can_edit
   *   If set to FALSE the user can not edit description and he is a proposer (optional, default = TRUE)
   * @param boolean $cat_administer_site_configuration
   *   Set this value to TRUE to enable the test user to change configurations.
   *   default: FALSE
   *
   * @return object
   *   drupal user object
   */
  public function getLomFormUser($cat_administer_site_configuration = FALSE, $can_edit = TRUE) {
    $user_permissions = array(
      'add archibald content',
    );

    if ($can_edit === TRUE) {
      $user_permissions[] = 'edit archibald content';
      $user_permissions[] = 'view archibald content revisions';
    }
    if ($cat_administer_site_configuration == TRUE) {
      $user_permissions[] = 'administer site configuration';
    }

    foreach (self::getLomfieldPermisssion() as $section => $permissions) {
      foreach ($permissions as $permission => $string_to_find) {
        $user_permissions[] = $permission;
      }
    }

    return $this->drupalCreateUser($user_permissions);
  }
}

/**
 *
 * This function tests the lom resource form field requriements/validation configurator of archibald.
 *
 * This test has an expected run time of 5 minutes.
 *
 * @author hhenning
 */
class ArchibaldLomFormFieldRequirementWebTestCase extends ArchibaldWebTestCase {

  /**
   * Returns infos about the test case.
   *
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Archibald Basic Lom Resource Field Requirement',
      'description' => 'Tests lom resource form field requirements settings',
      'group' => 'Archibald',
    );
  }

  /**
   * This is the main test function which is called by drupal testing framework.
   *
   * This function calls all the private test function.
   *
   * Resource field permissions
   * Required status
   */
  public function testArchibalLomResourceFieldRequirements() {
    $this->checkArchibaldFieldRequirements();
  }

  /**
   * Check all fields if it is required, recommendet or optional.
   */
  protected function checkArchibaldFieldRequirements() {
    // Login with full permissions.
    $users = array(
      'proposer' => ArchibaldPermissionsWebTestCase::getLomFormUser(TRUE, FALSE),
      'editor' => ArchibaldPermissionsWebTestCase::getLomFormUser(TRUE)
    );

    foreach ($users AS $user_type => $user) {

      archibald_fields_is_proposal(($user_type == 'proposer'));
      $prefix = archibald_fields_is_proposal() ? '_proposal' : '';
      $this->drupalLogin($user);

      $requirement_levels = array(
        ARCHIBALD_RES_FIELD_OPTIONAL => array(
          'title' => 'Optional',
          'to_find' => '\s*<\/(span|label)\>',
        ),
        ARCHIBALD_RES_FIELD_RECOMMEND => array(
          'title' => 'Recommend',
          'to_find' => '[^\>]*form\-recommended'
        ),
        ARCHIBALD_RES_FIELD_REQUIRED => array(
          'title' => 'Required',
          'to_find' => '[^\>]*form\-required',
        ),
      );

      $fields_info = archibald_get_field_info();
      #$this->assert(FALSE, "Is proposal user? ". var_export($fields_info, TRUE));
      #$this->assert(FALSE, "Field info: ". archibald_fields_is_proposal());
      foreach ($requirement_levels as $requirement_level => $requirement_level_data) {

        foreach ($fields_info as $section_key => $section) {
          // Prepare Settings.
          foreach ($section['fields'] as $field_key => $field) {
            $field_id = drupal_strtolower($section_key . '.' . $field_key);
            $field_name = str_replace('.', '_', $field_id);
            $field_name_plain = str_replace('.', '_', $section_key . '_' . $field_key);

            /*
             * Sos fields we dont like to test.
             * Because:
             *  relations: have no possibillitiy to be required, because its makes no sense.
             *  curriculums: here we need to implement the check later, cause of we have to check a section not a field.
             */
            $field_not_to_check = array(
              'classification.curriculums',
              'relation.resource',
              'relation.relation',
            );

            // Do not check proposal only fields on non proposer.
            if ($user_type != 'proposer') {
              $field_not_to_check[] = 'general.proposalmessage';
              $field_not_to_check[] = 'contactinfo.proposalcontactemail';
              $field_not_to_check[] = 'contactinfo.proposalcontactname';
              $field_not_to_check[] = 'contactinfo.proposalcontactphone';
            }

            if (in_array($field_id, $field_not_to_check)) {
              continue;
            }

            // Determine the current requirement level for the actual field.
            $current_requirement_level = $requirement_level;
            #$this->assert(FALSE, "Requirement level for :" . $field_name_plain . " = " . $current_requirement_level);
            #$this->assert(FALSE, "Getting minimum requirements with key: minimum_requirements" . $prefix. ": " . $field['minimum_requirements' . $prefix]);
            if ($current_requirement_level < $field['minimum_requirements' . $prefix] && $field['minimum_requirements' . $prefix] >= ARCHIBALD_RES_FIELD_REQUIRED) {
              $current_requirement_level = $field['minimum_requirements' . $prefix];
            }
            #$this->assert(FALSE, "After min check, Requirement level for :" . $field_name_plain . " = " . $current_requirement_level);
            $current_requirement_level_title = $requirement_levels[$current_requirement_level]['title'];
            $current_requirement_level_to_find = $requirement_levels[$current_requirement_level]['to_find'];

            // Set all field to the lowes level as possible but only the current to the current level to check.
            $current_permission_list = array();
            $this->setFieldRequiredSettings($field_name_plain, $current_requirement_level, $current_permission_list, archibald_fields_is_proposal());
            #$this->assert(FALSE, "Current permission list: " . var_export($current_permission_list, TRUE));

            $this->drupalLogin($user);

            $this->verbose('setFieldRequiredSettings: ' . $field_name_plain . ' is: ' . $requirement_levels[$current_requirement_level]['title']);

            // Request the lom form.
            $this->drupalGet('archibald/add/en');
            #$this->assert(FALSE, "Field id: " . $field_id);
            // Check if there is a grey, red or none star behind the currend field to check.
            $this->assertPattern('/' . preg_quote($field['label']) . $current_requirement_level_to_find . '/',
              $section['label'] . ' > ' . $field['label'] . ' is ' . $current_requirement_level_title
            );

            // Because of that there are select fields with can`t be empty, we dont need to check them.
            $selects_field_not_to_check = array(
              'right.cost',
              'right.copyright',
            );
            $selects_field_skip_in_foreach = array(
              'right_cost' => TRUE,
              'right_copyright' => TRUE,
            );

            if (in_array($field_id, $selects_field_not_to_check)) {
              continue;
            }

            // Submit a empty to form to see what messages will displayed.
            $this->drupalPost(NULL, array(), t('Save'));

            // Check each possible error message will displayed or not.
            foreach ($current_permission_list as $current_field_name => $current_permission) {
              if (isset($selects_field_skip_in_foreach[$current_field_name])) {
                continue;
              }
              if ($current_field_name == 'general_title') {
                // For general_title there is the drupal form api #required => TRUE used, cause of this is hte title not the full path.
                $label = archibald_get_field_label($current_field_name);
              }
              else {
                $label = archibald_get_field_label($current_field_name, TRUE);
              }

              $error_message = str_replace('>', '&gt;', t('!name field is required.', array('!name' => $label)));
              if ($current_permission == ARCHIBALD_RES_FIELD_REQUIRED) {
                $this->assertRaw($error_message, 'Error mesasge for: "' . $label . '" was displayed (field name: ' . $current_field_name . ').');
              }
              else {
                // Only required field shoudl throw error messages,
                // optional and recommendet should NOT.
                $this->assertNoRaw($error_message, 'Error mesasge for: "' . $label . '" was not displayed.');;
              }
            }
          }
        }
      }

      $this->drupalLogout();
    }
  }
}