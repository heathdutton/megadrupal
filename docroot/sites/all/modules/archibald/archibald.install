<?php

/**
 * @file
 * Archibald module install file.
 */

/**
 * Implements hook_schema().
 */
function archibald_schema() {
  // Doesn't always include the required classes...
  require_once dirname(__FILE__) . '/includes/DbStruct.class.php';

  $schema = array();

  //###################################### MAIN OBJ #############################
  //@Schema LOM.
  $db_struct = new ArchibaldDbStruct('archibald_lom', 'LOM object.');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, 'the unique key for the lom object', 32);
  $db_struct->addField('version', ArchibaldDbStruct::T_VARCHAR, 'The version (revision)', 32);
  $db_struct->addField('uid', ArchibaldDbStruct::T_INT, 'The creator uid (drupal userid)');
  $db_struct->addField('deleted', ArchibaldDbStruct::T_TINYINT, 'if the object is deleted?');
  $db_struct->addField('general_id', ArchibaldDbStruct::T_INT, '{archibald_lom}.general_id as a {archibald_general}.general_id');
  $db_struct->addField('lifecycle_id', ArchibaldDbStruct::T_INT, '{archibald_lom}.lifecycle_id as a {archibald_lifecycle}.lifecycle_id');
  $db_struct->addField('technical_id', ArchibaldDbStruct::T_INT, '{archibald_lom}.technical_id as a {archibald_technical}.technical_id');
  $db_struct->addField('education_id', ArchibaldDbStruct::T_INT, '{archibald_lom}.education_id as a {archibald_education}.education_id');
  $db_struct->addField('meta_metadata_id', ArchibaldDbStruct::T_INT, '{archibald_lom}.meta_metadata_id as a {archibald_meta_metadata}.meta_metadata_id');
  $db_struct->addField('rights_cost', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.rights_cost as a taxon id for yes/no', 60);
  $db_struct->addField('rights_copyrightandotherrestrictions', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.copyrightAndOtherRestrictions as a taxon id for yes/no', 60);
  $db_struct->addField('rights_description', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.rights_description as a {archibald_langstring}.id', 32);
  $db_struct->addField('save_time', ArchibaldDbStruct::T_INT, 'Unix Timestamp of saving');
  $db_struct->addPrimaryKey('lom_id', 'version');
  $schema += $db_struct->getSchema();

  //###################################### UTILS ################################
  //@Schema ArchibaldLomDataLangString.
  $db_struct = new ArchibaldDbStruct("archibald_langstring_terms", 'DSB Client Lang String Terms.');
  $db_struct->addField('langstring_terms_id', ArchibaldDbStruct::T_VARCHAR, 'The current {archibald_langstring}.id identifier', 32);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'The current {languages}.language identifier', 10);
  $db_struct->addField('term', ArchibaldDbStruct::T_TEXT, 'the text');
  $db_struct->addPrimaryKey('langstring_terms_id', 'language');
  $db_struct->addIndexKey('archibald_langstring_terms', array('term', 180));
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataVocabulars.
  $db_struct = new ArchibaldDbStruct('archibald_vocabulars', 'DSB Client Vocabular.');
  $db_struct->addField('id', ArchibaldDbStruct::T_VARCHAR, 'the id for given type', 70);
  $db_struct->addField('type', ArchibaldDbStruct::T_VARCHAR, 'vocabulary type', 100);
  $db_struct->addField('source', ArchibaldDbStruct::T_VARCHAR, 'the source where to find', 100);
  $db_struct->addField('value', ArchibaldDbStruct::T_VARCHAR, 'the value', 120);
  $db_struct->addPrimaryKey('id', 'type', 'source', 'value');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataContribute.
  $db_struct = new ArchibaldDbStruct('archibald_contribute', 'ArchibaldLomDataContribute.');
  $db_struct->addField('contribute_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the contribute object');
  $db_struct->addField('type', ArchibaldDbStruct::T_VARCHAR, '{archibald_contribute}.type, for example "lifecycle"', 20);
  $db_struct->addField('role', ArchibaldDbStruct::T_VARCHAR, '{archibald_contribute}.role as a taxon id', 60);
  $db_struct->addField('date_date', ArchibaldDbStruct::T_VARCHAR, '{archibald_contribute}.date_date as a LOM Date String', 60);
  $db_struct->addField('date_description', ArchibaldDbStruct::T_VARCHAR, '{archibald_contribute}.date_description as a {archibald_langstring}.id', 32);
  $db_struct->addPrimaryKey('contribute_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataContributeEntity.
  $db_struct = new ArchibaldDbStruct('archibald_contribute_entity', 'ArchibaldLomDataContributeEntity.');
  $db_struct->addField('contribute_id', ArchibaldDbStruct::T_INT, 'the unique key for the contribute object');
  $db_struct->addField('entity', ArchibaldDbStruct::T_TEXT, '{archibald_contribute_entity}.entity a vCard IETF RFC 2426:1998');
  $db_struct->addField(
    'entity_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_contributors}.contributor_id contributor identifer, to reference lom object when updating contributor', 32
  );
  $db_struct->addPrimaryKey('contribute_id');
  $schema += $db_struct->getSchema();

  //###################################### GENERAL ##############################
  //@Schema ArchibaldLomDataGeneral.
  $db_struct = new ArchibaldDbStruct('archibald_general', 'LOM_General object.');
  $db_struct->addField('general_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the general object');
  $db_struct->addField('title', ArchibaldDbStruct::T_VARCHAR, '{archibald_general}.title as a {archibald_langstring}.id', 32);
  $db_struct->addField('description', ArchibaldDbStruct::T_VARCHAR, '{archibald_general}.description as a {archibald_langstring}.id', 32);
  $db_struct->addField('structure', ArchibaldDbStruct::T_VARCHAR, '{archibald_general}.structure as a taxonomy code', 60);
  $db_struct->addField('aggregationlevel', ArchibaldDbStruct::T_VARCHAR, '{archibald_general}.aggregationLevel as a taxonomy code', 60);
  $db_struct->addPrimaryKey('general_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataGeneralIdentifier.
  $db_struct = new ArchibaldDbStruct('archibald_general_identifier', 'LOM_Identifier for general object.');
  $db_struct->addField('catalog', ArchibaldDbStruct::T_VARCHAR, 'the catalog', 60);
  $db_struct->addField('entry', ArchibaldDbStruct::T_VARCHAR, 'the unique identifier in this catalog', 450);
  $db_struct->addField('title', ArchibaldDbStruct::T_VARCHAR, '{archibald_general_identifier}.title as a {archibald_langstring}.id', 32);
  $db_struct->addField('general_id', ArchibaldDbStruct::T_INT, 'the unique key for the general object');
  $db_struct->addIndexKey('archibald_general_identifier', 'catalog');
  $db_struct->addIndexKey('archibald_general_identifier', array('entry', 180));
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataGeneralKeywords.
  $db_struct = new ArchibaldDbStruct('archibald_general_keywords', 'keywords for general object.');
  $db_struct->addField('keyword', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addField('general_id', ArchibaldDbStruct::T_INT, 'the unique key for the general object');
  $db_struct->addPrimaryKey('keyword', 'general_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataGeneralLanguages.
  $db_struct = new ArchibaldDbStruct('archibald_general_languages', 'languages for general object.');
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'language code', 8, array('not null' => TRUE, 'default' => ''));
  $db_struct->addField('general_id', ArchibaldDbStruct::T_INT, 'the unique key for the general object');
  $db_struct->addPrimaryKey('language', 'general_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataGeneralCoverage.
  $db_struct = new ArchibaldDbStruct('archibald_general_coverage', 'coverage for general object.');
  $db_struct->addField('coverage', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addField('general_id', ArchibaldDbStruct::T_INT, 'the unique key for the general object');
  $db_struct->addPrimaryKey('coverage', 'general_id');
  $schema += $db_struct->getSchema();

  //###################################### life CYCLE ###########################
  //@Schema ArchibaldLomDataLifeCycle.
  $db_struct = new ArchibaldDbStruct('archibald_lifecycle', 'ArchibaldLomDataLifeCycle object.');
  $db_struct->addField('lifecycle_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the lifecycle object');
  $db_struct->addField('version', ArchibaldDbStruct::T_VARCHAR, '{archibald_lifecycle}.version as a {archibald_langstring}.id', 32);
  $db_struct->addField('status', ArchibaldDbStruct::T_VARCHAR, '{archibald_lifecycle}.status  as a taxonomy code', 60);
  $db_struct->addPrimaryKey('lifecycle_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataLifeCycleContributes.
  $db_struct = new ArchibaldDbStruct('archibald_lifecycle_contributes', 'ArchibaldLomDataLifeCycleContributes object.');
  $db_struct->addField('lifecycle_id', ArchibaldDbStruct::T_INT, '{archibald_lifecycle}.id');
  $db_struct->addField('contribute_id', ArchibaldDbStruct::T_INT, '{archibald_contribute}.id');
  $db_struct->addPrimaryKey('lifecycle_id', 'contribute_id');
  $schema += $db_struct->getSchema();

  //###################################### META METADATA ########################
  //@Schema ArchibaldLomDataMetaMetadata.
  $db_struct = new ArchibaldDbStruct('archibald_meta_metadata', 'ArchibaldLomDataMetaMetadata object.');
  $db_struct->addField('meta_metadata_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('metadataschema', ArchibaldDbStruct::T_VARCHAR, '{archibald_lifecycle}.metadataschema LOMv1.0', 60);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, '{archibald_meta_metadata}.language as a 2 char language code', 2);
  $db_struct->addPrimaryKey('meta_metadata_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataMetaMetadataIdentifier.
  $db_struct = new ArchibaldDbStruct('archibald_meta_metadata_identifier', 'LOM_Identifier for ArchibaldLomDataMetaMetadata object.');
  $db_struct->addField('catalog', ArchibaldDbStruct::T_VARCHAR, 'the catalog', 60);
  $db_struct->addField('entry', ArchibaldDbStruct::T_VARCHAR, 'the unique identifier in this catalog', 250);
  $db_struct->addField('meta_metadata_id', ArchibaldDbStruct::T_INT, 'the unique key for the ArchibaldLomDataMetaMetadata object');
  $db_struct->addPrimaryKey('catalog', 'entry', 'meta_metadata_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataMetaMetadataContributes.
  $db_struct = new ArchibaldDbStruct('archibald_meta_metadata_contributes', 'ArchibaldLomDataMetaMetadataContributes object.');
  $db_struct->addField('meta_metadata_id', ArchibaldDbStruct::T_INT, '{archibald_meta_metadata}.id');
  $db_struct->addField('contribute_id', ArchibaldDbStruct::T_INT, '{archibald_contribute}.id');
  $db_struct->addPrimaryKey('meta_metadata_id', 'contribute_id');
  $schema += $db_struct->getSchema();

  //###################################### Technical ############################
  //@Schema ArchibaldLomDataTechnical.
  $db_struct = new ArchibaldDbStruct('archibald_technical', 'ArchibaldLomDataTechnical object.');
  $db_struct->addField('technical_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('size', ArchibaldDbStruct::T_BIGINT, 'just digits, non-negative, integer', NULL, array('unsigned' => TRUE, 'default' => NULL));
  $db_struct->addField('format', ArchibaldDbStruct::T_VARCHAR, 'Determines the mime-type of the description', 180, array('default' => NULL));
  $db_struct->addField(
    'other_plattform_requirements', ArchibaldDbStruct::T_VARCHAR, '{archibald_technical}.other_plattform_requirements as a {archibald_langstring}.id', 32
  );
  $db_struct->addField('duration_duration', ArchibaldDbStruct::T_VARCHAR, '{dsb_technical}.duration_duration', 30);
  $db_struct->addField('duration_description', ArchibaldDbStruct::T_VARCHAR, '{dsb_technical}.duration_description', 32);
  $db_struct->addField('preview_image', ArchibaldDbStruct::T_VARCHAR, 'Image URL', 250);
  $db_struct->addField('preview_image_description', ArchibaldDbStruct::T_TEXT, 'Determines the mime-type of the description', NULL, array('default' => NULL));
  $db_struct->addPrimaryKey('technical_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataTechnicalLocations.
  $db_struct = new ArchibaldDbStruct('archibald_technical_locations', 'ArchibaldLomDataTechnicalLocations object.');
  $db_struct->addField('technical_id', ArchibaldDbStruct::T_INT, '{archibald_technical}.id');
  $db_struct->addField('location', ArchibaldDbStruct::T_TEXT, '', NULL, array('not null' => TRUE));
  $schema += $db_struct->getSchema();

  //###################################### EDUCATION#############################
  //@Schema ArchibaldLomDataEducation.
  $db_struct = new ArchibaldDbStruct('archibald_education', 'ArchibaldLomDataEducation object.');
  $db_struct->addField('education_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('interactivetype', ArchibaldDbStruct::T_VARCHAR, 'taxon path id', 60);
  $db_struct->addField('interactivitylevel', ArchibaldDbStruct::T_VARCHAR, 'taxon path id', 60);
  $db_struct->addField('semanticdensity', ArchibaldDbStruct::T_VARCHAR, 'taxon path id', 60);
  $db_struct->addField('difficult', ArchibaldDbStruct::T_VARCHAR, 'taxon path id', 60);
  $db_struct->addField('description', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addField('typicallearningtime', ArchibaldDbStruct::T_VARCHAR, 'the duration', 180, array('default' => NULL));
  $db_struct->addPrimaryKey('education_id');
  $db_struct->addIndexKey('education_difficult', 'difficult');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataEducationLearningResourceType.
  $db_struct = new ArchibaldDbStruct('archibald_education_learningresourcetype', 'ArchibaldLomDataEducationLearningResourceType object.');
  $db_struct->addField('education_id', ArchibaldDbStruct::T_INT, 'education id');
  $db_struct->addField('learningresourcetype_id', ArchibaldDbStruct::T_VARCHAR, 'taxon path id', 60);
  $db_struct->addPrimaryKey('education_id', 'learningresourcetype_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataEducationIntendedEndUserRole.
  $db_struct = new ArchibaldDbStruct('archibald_education_intendedenduserrole', 'ArchibaldLomDataEducationIntendedEndUserRole object.');
  $db_struct->addField('education_id', ArchibaldDbStruct::T_INT, 'education id');
  $db_struct->addField('intendedenduserrole_id', ArchibaldDbStruct::T_VARCHAR, 'taxon path id', 60);
  $db_struct->addPrimaryKey('education_id', 'intendedenduserrole_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataEducationContext.
  $db_struct = new ArchibaldDbStruct('archibald_education_context', 'ArchibaldLomDataEducationContext object.');
  $db_struct->addField('education_id', ArchibaldDbStruct::T_INT, 'education id');
  $db_struct->addField('context_id', ArchibaldDbStruct::T_VARCHAR, 'taxon path id', 60);
  $db_struct->addPrimaryKey('education_id', 'context_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataEducationTypicalAgeRange.
  $db_struct = new ArchibaldDbStruct('archibald_education_typicalagerange', 'ArchibaldLomDataEducationTypicalAgeRange object.');
  $db_struct->addField('education_id', ArchibaldDbStruct::T_INT, 'education id');
  $db_struct->addField('typicalagerange', ArchibaldDbStruct::T_VARCHAR, 'the age range', 32);
  $db_struct->addPrimaryKey('education_id', 'typicalagerange');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataEducationLanguage.
  $db_struct = new ArchibaldDbStruct('archibald_education_language', 'ArchibaldLomDataEducationLanguage object.');
  $db_struct->addField('education_id', ArchibaldDbStruct::T_INT, 'education id');
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, '2 char language code', 2);
  $db_struct->addPrimaryKey('education_id', 'language');
  $schema += $db_struct->getSchema();

  //###################################### RELATIONS#############################
  //@Schema ArchibaldLomDataRelations.
  $db_struct = new ArchibaldDbStruct('archibald_relations', 'Relations to DOI, ISBN or URL');
  $db_struct->addField('relation_id', ArchibaldDbStruct::T_SERIAL, '{archibald_lom}.lom_id of child');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.lom_id', 32);
  $db_struct->addField('lom_version', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.version', 32);
  $db_struct->addField('kind', ArchibaldDbStruct::T_VARCHAR, '', 180);
  $db_struct->addUniqueKey('relation_id', 'lom_id', 'lom_version');
  $schema += $db_struct->getSchema();

  //###################################### ANNOTATION ###########################
  //@Schema ArchibaldLomDataAnnotation.
  $db_struct = new ArchibaldDbStruct('archibald_annotations', 'ArchibaldLomDataAnnotation object.');
  $db_struct->addField('annotation_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.id', 32);
  $db_struct->addField('lom_version', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.version', 32);
  $db_struct->addField('entity', ArchibaldDbStruct::T_TEXT, 'vCard IETF RFC 2426:1998');
  $db_struct->addField('date_date', ArchibaldDbStruct::T_VARCHAR, '{archibald_annotations}.date_date as a LOM Date String', 60);
  $db_struct->addField('date_description', ArchibaldDbStruct::T_VARCHAR, '{archibald_annotations}.date_description as a {archibald_langstring}.id', 32);
  $db_struct->addField('description', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addPrimaryKey('annotation_id');
  $schema += $db_struct->getSchema();

  //###################################### CLASSIFICATION #######################
  //@Schema ArchibaldLomDataClassification.
  $db_struct = new ArchibaldDbStruct('archibald_classification', 'ArchibaldLomDataClassification object.');
  $db_struct->addField('classification_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.id', 32);
  $db_struct->addField('lom_version', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.version', 32);
  $db_struct->addField('purpose', ArchibaldDbStruct::T_VARCHAR, 'the taxon id', 60);
  $db_struct->addField('description', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addPrimaryKey('classification_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataClassificationKeywords.
  $db_struct = new ArchibaldDbStruct('archibald_classification_keywords', 'ArchibaldLomDataClassificationKeywords object.');
  $db_struct->addField('classification_id', ArchibaldDbStruct::T_INT, 'the classification_id');
  $db_struct->addField('keyword', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addPrimaryKey('classification_id', 'keyword');
  $schema += $db_struct->getSchema();


  //@Schema ArchibaldLomDataClassification2TaxonPath.
  $db_struct = new ArchibaldDbStruct('archibald_classification_taxon', 'ArchibaldLomDataClassification2TaxonPath object.');
  $db_struct->addField('classification_id', ArchibaldDbStruct::T_INT, 'the classification_id');
  $db_struct->addField('taxon_path_id', ArchibaldDbStruct::T_INT, 'the taxon_path_id');
  $db_struct->addPrimaryKey('classification_id', 'taxon_path_id');
  $schema += $db_struct->getSchema();



  //@Schema ArchibaldLomDataTaxonPath.
  $db_struct = new ArchibaldDbStruct('archibald_taxon_path', 'ArchibaldLomDataTaxonPath object.');
  $db_struct->addField('taxon_path_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('source', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addPrimaryKey('taxon_path_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldLomDataTaxon.
  $db_struct = new ArchibaldDbStruct('archibald_taxon', 'ArchibaldLomDataTaxon object.');
  $db_struct->addField('taxon_path_id', ArchibaldDbStruct::T_INT, 'the taxon_path_id');
  $db_struct->addField('id', ArchibaldDbStruct::T_VARCHAR, 'identifier for this taxon', 100, array('default' => NULL));
  $db_struct->addField('entry', ArchibaldDbStruct::T_VARCHAR, '{archibald_langstring}.id', 32);
  $db_struct->addField('weight', ArchibaldDbStruct::T_INT, 'weight for sorting');
  $db_struct->addUniqueKey('taxon_path_id', 'id', 'entry');
  $schema += $db_struct->getSchema();

  //###################################### CURRICULUM ###########################
  //@Schema ArchibaldLomDataCurriculum.
  $db_struct = new ArchibaldDbStruct('archibald_curriculum', 'LOMDATA_Curriculum object.');
  $db_struct->addField('curriculum_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.id', 32);
  $db_struct->addField('lom_version', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.version', 32);
  $db_struct->addField('source', ArchibaldDbStruct::T_VARCHAR, 'curriculum ident', 60);
  $db_struct->addField('entity', ArchibaldDbStruct::T_TEXT, 'json encodet curriculum');
  $db_struct->addPrimaryKey('curriculum_id');
  $schema += $db_struct->getSchema();


  //@Schema ArchibaldLomDataContributors.
  $db_struct = new ArchibaldDbStruct('archibald_contributors', 'Address databse for contributors');
  $db_struct->addField('contributor_id', ArchibaldDbStruct::T_VARCHAR, 'the unique key for the contributor data set md5(lastname.firstname.zip.city.address1)', 32);
  $db_struct->addField('uid', ArchibaldDbStruct::T_VARCHAR, '', 32);
  $db_struct->addField('lastname', ArchibaldDbStruct::T_VARCHAR, '', 180);
  $db_struct->addField('firstname', ArchibaldDbStruct::T_VARCHAR, '', 180);
  $db_struct->addField('organisation', ArchibaldDbStruct::T_VARCHAR, '', 255);
  $db_struct->addField('country', ArchibaldDbStruct::T_VARCHAR, '', 60);
  $db_struct->addField('zip', ArchibaldDbStruct::T_VARCHAR, '', 20);
  $db_struct->addField('city', ArchibaldDbStruct::T_VARCHAR, '', 180);
  $db_struct->addField('address1', ArchibaldDbStruct::T_VARCHAR, '', 255);
  $db_struct->addField('address2', ArchibaldDbStruct::T_VARCHAR, '', 255);
  $db_struct->addField('email', ArchibaldDbStruct::T_VARCHAR, '', 255);
  $db_struct->addField('url', ArchibaldDbStruct::T_VARCHAR, '', 255);
  $db_struct->addField('tel', ArchibaldDbStruct::T_VARCHAR, '', 32);
  $db_struct->addField('logo', ArchibaldDbStruct::T_VARCHAR, 'The Logo File URI.', 255);
  $db_struct->addPrimaryKey('contributor_id');
  $schema += $db_struct->getSchema();

  ############ STATS for publications and other generela stuff ################
  $db_struct = new ArchibaldDbStruct('archibald_lom_stats', 'LOM object.');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, 'the unique key for the lom object', 32);
  $db_struct->addField('publication_version', ArchibaldDbStruct::T_VARCHAR, 'The version (revision) with was published', 32);
  $db_struct->addField('publication_time', ArchibaldDbStruct::T_INT, 'Unix Timestamp of publication');
  $db_struct->addField('publication_progress', ArchibaldDbStruct::T_INT, 'Progress of job in percent');
  $db_struct->addField('publication_log', ArchibaldDbStruct::T_TEXT, 'Progress log of publication log');
  $db_struct->addField('responsible_uid', ArchibaldDbStruct::T_INT, 'The responsible editor uid (drupal userid)');
  $db_struct->addField('indexed_version', ArchibaldDbStruct::T_VARCHAR, 'The version (revision) with is currently indexed in solr', 32);
  $db_struct->addField('editing_uid', ArchibaldDbStruct::T_INT, 'uid of user who last edit this node (drupal userid)');
  $db_struct->addField('editing_last_seen', ArchibaldDbStruct::T_INT, 'unix timestamp of last seen, ajax, of last edit this resource');
  $db_struct->addField('local_published', ArchibaldDbStruct::T_VARCHAR, 'determines whether the resource is locally published or not', 64, array('default' => '', 'not null' => TRUE));
  $db_struct->addField('content_partner_id', ArchibaldDbStruct::T_INT, '{archibald_settings_content_partner}.id  is central published with this content partner');
  $db_struct->addField('republication_required', ArchibaldDbStruct::T_INT, 'Determines if a new revision is required or not');
  $db_struct->addField('proposal_contact_name', ArchibaldDbStruct::T_VARCHAR, 'Name of the person making the proposal', 255, array('not null' => TRUE, 'default' => ''));
  $db_struct->addField('proposal_contact_email', ArchibaldDbStruct::T_VARCHAR, 'Email of the person making the proposal', 255, array('not null' => TRUE, 'default' => ''));
  $db_struct->addField('proposal_contact_phone', ArchibaldDbStruct::T_VARCHAR, 'Phone number of the person making the proposal', 50, array('not null' => TRUE, 'default' => ''));
  $db_struct->addField('proposal_message', ArchibaldDbStruct::T_TEXT, 'Message of the person making the proposal', array('default' => NULL));
  $db_struct->addField('proposal_mail_sent', ArchibaldDbStruct::T_INT, 'If we have already sent the publish mail to the proposal user', NULL, array('not null' => TRUE, 'default' => 0));
  $db_struct->addField('batch_op_key', ArchibaldDbStruct::T_VARCHAR, 'Batch Operation Key', 100, array('not null' => TRUE, 'default' => ''));
  $db_struct->addField('batch_op_time', ArchibaldDbStruct::T_INT, 'Batch Operation start time', 16, array('not null' => TRUE, 'default' => 0));

  $db_struct->addPrimaryKey('lom_id');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldFile  (uploaded files translation table).
  $db_struct = new ArchibaldDbStruct('archibald_file', 'DSB Client uploaded files translation table.');
  $db_struct->addField('fid', ArchibaldDbStruct::T_INT, 'The {file_managed}.fid being referenced in this field.');
  $db_struct->addField('timestamp', ArchibaldDbStruct::T_INT, 'The {file_managed}.timestamp being referenced in this field. To be shure that it is the actual one');
  $db_struct->addField('url', ArchibaldDbStruct::T_VARCHAR, 'the url of the uploaded file', 255);
  $db_struct->addField('file_server_type', ArchibaldDbStruct::T_VARCHAR, 'type of file server', 64);
  $db_struct->addUniqueKey('fid', 'timestamp', 'file_server_type');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldChangeLog.
  $db_struct = new ArchibaldDbStruct('archibald_change_log', 'Change log.');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.id', 32);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'the type of change', 4);
  $db_struct->addField('field', ArchibaldDbStruct::T_VARCHAR, 'the field which changed', 255);
  $db_struct->addField('old_value', ArchibaldDbStruct::T_TEXT, 'the old value');
  $db_struct->addField('new_value', ArchibaldDbStruct::T_TEXT, 'the new value');
  $db_struct->addPrimaryKey('lom_id', 'language', 'field');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldImportLog.
  $db_struct = new ArchibaldDbStruct('archibald_import_log', 'Import log.');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.id', 32);
  $db_struct->addField('remote_id', ArchibaldDbStruct::T_VARCHAR, 'the unique remote id', 32);
  $db_struct->addField('plugin', ArchibaldDbStruct::T_VARCHAR, 'the plugin', 32);
  $db_struct->addPrimaryKey('lom_id', 'remote_id', 'plugin');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldCoverageList.
  $db_struct = new ArchibaldDbStruct('archibald_coverage_list', 'Predfined coverages.');
  $db_struct->addField('coverage', ArchibaldDbStruct::T_VARCHAR, 'the coverage', 255);
  $db_struct->addField('context', ArchibaldDbStruct::T_VARCHAR, 'the context like rameau, swd', 20);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'the language', 4);
  $db_struct->addField('langstring_id', ArchibaldDbStruct::T_VARCHAR, 'the langstring id', 32);
  $db_struct->addPrimaryKey('coverage', 'language');
  $schema += $db_struct->getSchema();


  //@Schema ArchibaldCoverageList.
  $db_struct = new ArchibaldDbStruct('archibald_keyword_list', 'Predfined keyword.');
  $db_struct->addField('keyword', ArchibaldDbStruct::T_VARCHAR, 'the keyword', 255);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'the language', 4);
  $db_struct->addField('langstring_id', ArchibaldDbStruct::T_VARCHAR, 'the langstring id', 32);
  $db_struct->addPrimaryKey('keyword', 'language');
  $schema += $db_struct->getSchema();

  //@Schema ArchibaldSettings.
  $db_struct = new ArchibaldDbStruct('archibald_settings_content_partner', 'settings for content partner instances.');
  $db_struct->addField('content_partner_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('name', ArchibaldDbStruct::T_VARCHAR, 'String to identify a content partner instance', 128);
  $db_struct->addField('username', ArchibaldDbStruct::T_VARCHAR, 'api username', 128);
  $db_struct->addField('password', ArchibaldDbStruct::T_VARCHAR, 'api password', 128);
  $db_struct->addField('key_fid', ArchibaldDbStruct::T_INT, '{file_managed}.fid  ssl key file', 256);
  $db_struct->addField('icon_fid', ArchibaldDbStruct::T_INT, '{file_managed}.fid  icon of content_partner', 256);
  $db_struct->addField('file_server_type', ArchibaldDbStruct::T_VARCHAR, 'type of file server', 64);
  $db_struct->addPrimaryKey('content_partner_id');
  $schema += $db_struct->getSchema();


  return $schema;
}

/**
 * Implements hook_disable().
 */
function archibald_disable() {
  if (module_exists('shortcut')) {
    $shortcut_set = shortcut_set_load('shortcut-set-1');
    foreach ($shortcut_set->links AS $i => $link) {
      if ($link['link_path'] == 'admin/archibald') {
        unset($shortcut_set->links[$i]);
      }
    }
    shortcut_set_save($shortcut_set);
  }
}

/**
 * Implements hook_install().
 *
 * Because this is a new module in D7, hook_update_N() doesn't help D6
 * users who upgrade to run the migration path. So, we try that here as
 * the module is being installed.
 */
function archibald_install() {
  $t = get_t();
  $dir = DRUPAL_ROOT . '/' . drupal_get_path('module', 'archibald') . '/includes/curriculum/';
  foreach (scandir($dir) as $file) {
    if (preg_match('/^curriculum_([a-z0-9]+)\.class\.php$/i', $file, $curriculum)) {

      $curr_name = 'curriculum_' . $curriculum[1];
      module_load_include('php', 'archibald', 'includes/curriculum/' . $curr_name . '.class');

      $curr_class_name = 'ArchibaldCurriculum' . drupal_ucfirst($curriculum[1]);
      $curr_handler = new $curr_class_name();
      if (method_exists($curr_handler, 'setupProcess')) {
        $curr_handler->setupProcess();
      }
    }
  }

  user_role_change_permissions(DRUPAL_ANONYMOUS_RID,
    array(
      'view archibald content' => TRUE,
      'export archibald content' => FALSE,
      'view archibald homepage' => TRUE,
      'view the administration theme' => TRUE,
      'administer comments' => FALSE,
      'access comments' => TRUE,
      'post comments' => FALSE,
      'skip comment approval' => FALSE,
      'edit own comments' => FALSE,
    )
  );

  user_role_change_permissions(DRUPAL_AUTHENTICATED_RID,
    array(
      'view archibald content' => TRUE,
      'export archibald content' => FALSE,
      'view archibald homepage' => TRUE,
      'view the administration theme' => TRUE,
      'administer comments' => FALSE,
      'access comments' => TRUE,
      'post comments' => TRUE,
      'skip comment approval' => FALSE,
      'edit own comments' => FALSE,
    )
  );


  archibald_create_lom_taxonomies();

  // Give right to edit right licenses to Administrators
  $vocabulary_name = '';
  $result = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'rights_licenses'");
  $rec = $result->fetchAssoc();
  if ( $rec ) {
    user_role_grant_permissions(3, array('edit terms in ' . $rec['vid']));
  }

  //Set default activated languages from archibald form.
  variable_set('archibald_language_settings', array('de', 'fr', 'it', 'rm', 'en'));

  // configure dsb api urls.
  $content_partner = array(
    'name' => 'default',
    'username' => '',
    'password' => '',
    'key_fid' => 0,
    'icon_fid' => 0,
    'file_server_type' => 'educa',
  );

  db_insert('archibald_settings_content_partner')
    ->fields($content_partner)
    ->execute();

  archibald_create_default_roles();

  variable_set('archibald_ontology_url', 'http://ontology.biblio.educa.ch');

  $sync = new ArchibaldTaxonomyOntologyServerSync();
  $sync->sync('lom-v1');
  $sync->sync('lom-v1-installation');
  $sync->sync('educa_standard_curriculum');

  variable_set('archibald_curriculum_educa_active', '1');

  //Place items in user menu.
  archibald_install_use_menu();
  archibald_install_use_menu_translations();

  //Set default send emails.
  variable_set('archibald_send_mails', TRUE);
  variable_set('archibald_send_mails_new_unavailable', TRUE);
  variable_set('archibald_send_mails_status2final', TRUE);
  variable_set('archibald_send_mails_status2draft', TRUE);
  variable_set('archibald_send_mails_set_responsible', TRUE);

  variable_set('archibald_working_mode', ARCHIBALD_WORKING_MODE_LIVE);
  variable_set("archibald_api_url", 'https://dsb-api.educa.ch/v2');

  variable_set('archibald_field_require_type_classification_defaultcurriculum' , 1);
  variable_set('archibald_field_require_type_proposal_classification_defaultcurriculum' , 0);

  variable_set('archibald_field_require_type_technical_previewimagecopyrightdescription' , 1);
  variable_set('archibald_field_require_type_proposal_technical_previewimagecopyrightdescription' , 0);

  variable_set('archibald_field_require_type_education_learningresourcetypepedagogical' , 1);
  variable_set('archibald_field_require_type_proposal_education_learningresourcetypepedagogical' , 0);

  variable_set('archibald_field_require_type_technical_duration' , 0);
  variable_set('archibald_field_require_type_proposal_technical_duration' , 0);

  variable_set('archibald_field_require_type_technical_format' , 1);
  variable_set('archibald_field_require_type_proposal_technical_format' , 0);

  variable_set('archibald_field_require_type_technical_size' , 0);
  variable_set('archibald_field_require_type_proposal_technical_size' , 0);

}

/**
 * reimport all po files with overwriting existing strings
 */
function archibald_update_translations() {
  $files = file_scan_directory(
    drupal_get_path('module', 'archibald') . '/translations', '/(^|\.)[de|fr|it|rm]+\.po$/', array('recurse' => FALSE)
  );
  foreach ($files as $file) {
    _locale_import_po($file, $file->name, LOCALE_IMPORT_OVERWRITE, 'default');
  }
}

/**
 * place items in user menu
 */
function archibald_install_use_menu() {
  // Create a DSB Content link in the main menu.
  $item = array(
    'link_title' => 'Create new resource',
    'link_path' => 'archibald/add',
    'menu_name' => 'user-menu',
    'weight' => 20,
    'language' => 'und',
  );
  menu_link_save($item);

  // Resource overview link in the main menu.
  $item = array(
    'link_title' => 'Resource overview',
    'link_path' => 'admin/archibald',
    'menu_name' => 'user-menu',
    'weight' => 24,
    'language' => 'und',
  );
  menu_link_save($item);

  // Manage vCards link in the main menu.
  $item = array(
    'link_title' => 'edit vCard',
    'link_path' => 'archibald_contributor/standalone',
    'menu_name' => 'user-menu',
    'weight' => 28,
    'language' => 'und',
  );
  menu_link_save($item);
}

/**
 * place items in user menu
 */
function archibald_install_use_menu_translations() {
  // Create a DSB Content link in the main menu.
  $item = array(
    'link_title' => 'Neue Beschreibung erstellen',
    'link_path' => 'archibald/add',
    'menu_name' => 'user-menu',
    'weight' => 20,
    'language' => 'de',
  );
  menu_link_save($item);
  $item = array(
    'link_title' => 'Ajouter une notice',
    'link_path' => 'archibald/add',
    'menu_name' => 'user-menu',
    'weight' => 20,
    'language' => 'fr',
  );
  menu_link_save($item);

  // Resource overview link in the main menu.
  $item = array(
    'link_title' => 'Alle Beschreibungen',
    'link_path' => 'admin/archibald',
    'menu_name' => 'user-menu',
    'weight' => 24,
    'language' => 'de',
  );
  menu_link_save($item);
  $item = array(
    'link_title' => 'Vue d\'ensemble',
    'link_path' => 'admin/archibald',
    'menu_name' => 'user-menu',
    'weight' => 24,
    'language' => 'fr',
  );
  menu_link_save($item);

  // Manage vCards link in the main menu.
  $item = array(
    'link_title' => 'vCard bearbeiten',
    'link_path' => 'archibald_contributor/standalone',
    'menu_name' => 'user-menu',
    'weight' => 28,
    'language' => 'de',
  );
  menu_link_save($item);
  $item = array(
    'link_title' => 'Modifier la vCard',
    'link_path' => 'archibald_contributor/standalone',
    'menu_name' => 'user-menu',
    'weight' => 28,
    'language' => 'fr',
  );
  menu_link_save($item);
}

/**
 * List taxonomy vocabularies used by archibald
 */
function archibald_get_vocabularies(){
  return array(
    array(
      'general catalog',
      'general_catalog',
      FALSE,
      FALSE,
      TRUE,
      FALSE,
    ),
    array(
      'life cycle status',
      'life_cycle_status',
      'LOMv1.0',
      'LOMv1.0\015\012LREv3.0\015\012LREv4.5\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'rights licenses',
      'rights_licenses',
      FALSE,
      FALSE,
      TRUE,
      TRUE,
    ),
    array(
      'intended end user role',
      'intended_enduserrole',
      'LOMv1.0',
      'LOMv1.0\015\012LREv3.0\015\012LREv4.5\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'education context',
      'education_context',
      'LOMv1.0',
      'LOMv1.0\015\012LREv3.0\015\012LREv4.5\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'language',
      'language',
      'ISO 639-1',
      '',
      TRUE,
      FALSE,
    ),
    array(
      'learning resource type',
      'learning_resourcetype',
      'LREv3.0',
      'LOMv1.0\015\012LREv3.0\015\012LREv4.5\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'life cycle contribute role',
      'lc_cont_role',
      'LOMv1.0',
      'LOMv1.0\015\012LREv3.0\015\\12LREv4.5\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'difficulty',
      'difficulty',
      'LOMv1.0',
      'LOMv1.0\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'educa_school_levels',
      'educa_school_levels',
      'LOM-CHv1.0',
      'LOM-CHv1.0\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'educa_school_subjects',
      'educa_school_subjects',
      'LOM-CHv1.0',
      'LOM-CHv1.0\015\012EDUCAv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'life_cycle_role',
      'life_cycle_role',
      'LOMv1.0',
      'LOMv1.0\015\012LOMv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'aggregation_level',
      'aggregation_level',
      'LOMv1.0',
      'LOMv1.0',
      TRUE,
      FALSE,
    ),
    array(
      'mmd_cont_role',
      'mmd_cont_role',
      'LOMv1.1',
      'LOMv1.1',
      TRUE,
      FALSE,
    ),
    array(
      'rel_catalog',
      'rel_catalog',
      'LOMv1.1',
      'LOMv1.1',
      TRUE,
      FALSE,
    ),
    array(
      'rel_kind',
      'rel_kind',
      'LOMv1.1',
      'LOMv1.1',
      TRUE,
      FALSE,
    ),
    array(
      'rights_cost',
      'rights_cost',
      'LOMv1.1',
      'LOMv1.1',
      TRUE,
      FALSE,
    ),
    array(
      'typical_learning_time',
      'typical_learning_time',
      'LOMv1.1',
      'LOMv1.1',
      TRUE,
      FALSE,
    ),
    array(
      'technical_format',
      'technical_format',
      'LOMv1.1',
      'LOMv1.1',
      TRUE,
      FALSE,
    )
  );
}

/**
 * create all taxonomys for sync with ontology server
 */
function archibald_create_lom_taxonomies() {

  /**
   * Configure fields
   */
  // Create Key field.
  $field = field_info_field('field_taxon_key');
  if (empty($field)) {
    $field = array(
      'field_name' => 'field_taxon_key',
      'type' => 'text',
      'cardinality' => 1,
      'settings' => array('max_length' => 60),
    );
    field_create_field($field);
  }

  // Create Context field.
  $field = field_info_field('field_taxon_context');
  if (empty($field)) {
    $field = array(
      'field_name' => 'field_taxon_context',
      'type' => 'text',
      'cardinality' => 1,
      'settings' => array('max_length' => 25),
    );
    field_create_field($field);
  }

  $field = field_info_field('field_taxon_url');
  if (empty($field)) {
    // Create Context field.
    $field = array(
      'field_name' => 'field_taxon_url',
      'type' => 'text',
      'cardinality' => 1,
      'settings' => array('max_length' => 255),
    );
    field_create_field($field);
  }

  // Create Deprecated field.
  $field = field_info_field('field_taxon_deprecated');
  if (empty($field)) {
    $field = array(
      'field_name' => 'field_taxon_deprecated',
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array(
        //// Make sure that 0 works as a 'on' value'.
        'allowed_values' => array(0 => 'Not deprecated', 1 => 'Deprecated'),
      ),
    );
    field_create_field($field);
  }

  /**
   * Add taxonomy vocabularies
   */
  $vocabularies = archibald_get_vocabularies();
  foreach ($vocabularies as $vocab_data) {
    archibald_create_vocabulary($vocab_data);
  }

  // Create Vcard field.
  $field = field_info_field('field_user_vcard');
  if (empty($field)) {
    $field = array(
      'field_name' => 'field_user_vcard',
      'type' => 'text',
      'cardinality' => 1,
      'settings' => array(
        'max_length' => 255,
      ),
    );
    field_create_field($field);
  }

  $instance = field_info_instance('user', 'field_user_vcard', 'user');
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'field_user_vcard',
      'entity_type' => 'user',
      'bundle' => 'user',
      'label' => 'vCard',
      'description' => '',
      'required' => 1,
      'default_value' => NULL,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'type' => 'text_textfield',
        'weight' => '7',
        'module' => 'text',
        'active' => 1,
        'settings' => array(
          'size' => '120',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Deletes a vocabulary.
 *
 */
function archibald_delete_vocabulary($vocab_data){
  $v = taxonomy_vocabulary_machine_name_load($vocab_data[1]);
  if (!empty($v)){
    taxonomy_vocabulary_delete($v->vid);
    echo "Deleted taxonony " . $v->machine_name . "\n";
  }
}

/**
 * Creates a vocabulary.
 *
 * @param array $vocab_data
 *   array containing the vocabulary infos. structure od array:
 *     array(
 *       'vocabulary name',
 *       'vocabulary machine name',
 *       'the default context for terms',
 *       'list with available contexts',
 *       define is field 'key' is added to the vocabulary (TRUE|FALSE),
 *       define is field 'url' is added to the vocabulary (TRUE|FALSE),
 *     )
 */
function archibald_create_vocabulary($vocab_data) {
  $vocabularies = entity_load('taxonomy_vocabulary', FALSE, array(
    'machine_name' => $vocab_data[1],
  ));

  if (empty($vocabularies)) {
    $vocabulary = (object)array(
      'name' => $vocab_data[0],
      'description' => '',
      'machine_name' => $vocab_data[1],
      'help' => '',
      'i18n_mode' => 1,
      'language' => 'und',
    );
    taxonomy_vocabulary_save($vocabulary);
  }

  $instance = field_info_instance('taxonomy_term', 'field_taxon_deprecated', $vocab_data[1]);
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'field_taxon_deprecated',
      'entity_type' => 'taxonomy_term',
      'bundle' => $vocab_data[1],
      'label' => 'Deprecated',
      'required' => 0,
      'widget' => array(
        'type' => 'options_onoff',
      ),
    );
    field_create_instance($instance);
  }


  if ($vocab_data[4] !== FALSE) {
      // Add Key field instance.
    $instance = field_info_instance('taxonomy_term', 'field_taxon_key', $vocab_data[1]);
    if (empty($instance)) {
      $instance = array(
        'field_name' => 'field_taxon_key',
        'entity_type' => 'taxonomy_term',
        'bundle' => $vocab_data[1],
        'label' => 'Key',
        'description' => '',
        'required' => 1,
        'default_value' => NULL,
        'settings' => array(
          'text_processing' => '0',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => '2',
          'module' => 'text',
          'active' => 1,
          'settings' => array(
            'size' => '60',
          ),
        ),
      );
      field_create_instance($instance);
    }
  }

  if ($vocab_data[2] !== FALSE) {
    // Add Context field instance.
    $instance = field_info_instance('taxonomy_term', 'field_taxon_context', $vocab_data[1]);
    if (empty($instance)) {
      $instance = array(
        'field_name' => 'field_taxon_context',
        'entity_type' => 'taxonomy_term',
        'bundle' => $vocab_data[1],
        'label' => 'Context',
        'description' => strtr($vocab_data[3], array("\\" => '\\\\')),
        'required' => 1,
        'default_value' => array(0 => array('value' => $vocab_data[2])),
        'settings' => array(
          'text_processing' => '0',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => '2',
          'module' => 'text',
          'active' => 1,
          'settings' => array(
            'size' => '60',
          ),
        ),
      );
      field_create_instance($instance);
    }
  }

  if ($vocab_data[5] !== FALSE) {
    // Add URL field instance.
    $instance = field_info_instance('taxonomy_term', 'field_taxon_url', $vocab_data[1]);
    if (empty($instance)) {
      $instance = array(
        'field_name' => 'field_taxon_url',
        'entity_type' => 'taxonomy_term',
        'bundle' => $vocab_data[1],
        'label' => 'URL',
        'required' => 0,
        'settings' => array(
          'text_processing' => '0',
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => '9',
          'module' => 'text',
          'active' => 1,
          'settings' => array(
            'size' => '60',
          ),
        ),
      );
      field_create_instance($instance);
    }
  }
}


/**
 * create default user roles and give permissions
 */
function archibald_create_default_roles() {

  // Create a role for editor.
  $editor_role         = new stdClass();
  $editor_role->name   = 'archibald editor';
  $editor_role->weight = 10;
  user_role_save($editor_role);
  user_role_grant_permissions($editor_role->rid, array(
      'view archibald homepage',
      'view archibald content',
      'view archibald content revisions',
      'add archibald content',
      'edit archibald content',
      'delete archibald content',
      'translate archibald content',
      'change archibald content status',
      'manage archibald content',
      'manage archibald vcards',
      'export archibald content',
      'view the administration theme',
      'publish archibald content local',
      'manage archibald coverages',
      'manage archibald keywords',

      //Field permissions.
      'archibald content field classification context',
      'archibald content field classification curriculums',
      'archibald content field classification defaultCurriculum',
      'archibald content field general description',
      'archibald content field general language',
      'archibald content field general life_cycle version',
      'archibald content field education aggregationLevel',
      'archibald content field education description',
      'archibald content field education difficulty',
      'archibald content field education intendedEndUserRole',
      'archibald content field education learningResourceTypeDocumentary',
      'archibald content field education learningResourceTypePedagogical',
      'archibald content field education typicalAgeRange',
      'archibald content field education typicalLearningTime',
      'archibald content field keywords keyword',
      'archibald content field keywords coverage',
      'archibald content field life_cycle contribute',
      'archibald content field rights cost',
      'archibald content field rights description',
      'archibald content field relations relation',
      'archibald content field technical duration',
      'archibald content field technical format',
      'archibald content field technical location',
      'archibald content field technical otherPlattformRequirements',
      'archibald content field technical preview_image',
      'archibald content field technical preview_image_copyright_description',
      'archibald content field technical size',
    ));

  //  EDITOR
  user_role_change_permissions($editor_role->rid,
    array(
      'administer comments' => FALSE,
      'access comments' => TRUE,
      'post comments' => TRUE,
      'skip comment approval' => FALSE,
      'edit own comments' => FALSE,
    )
  );

  // Create a role for publisher.
  $publ_role         = new stdClass();
  $publ_role->name   = 'archibald publisher';
  $publ_role->weight = 20;
  user_role_save($publ_role);
  user_role_grant_permissions($publ_role->rid,
    array(
      'view archibald homepage',
      'view archibald content',
      'export archibald content',
      'view archibald content revisions',
      'change archibald content partner',
      'change archibald content status',
      'manage archibald content',
      'publish archibald content local',
      'publish archibald content central',
      'view the administration theme',
    )
  );

  //  PUBLISHER
  user_role_change_permissions($publ_role->rid,
    array(
      'administer comments' => TRUE,
      'access comments' => TRUE,
      'post comments' => TRUE,
      'skip comment approval' => TRUE,
      'edit own comments' => TRUE,
    )
  );

  variable_set('archibald_status2final_subject', $editor_role->rid);
  variable_set('archibald_mail_status2final_group', $publ_role->rid);

  $admin_role = user_role_load_by_name('administrator');
  if (!empty($admin_role->rid)) {
    user_role_grant_permissions($admin_role->rid, array('export archibald content'));
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical preview_image_copyright_description'));
    user_role_grant_permissions($admin_role->rid, array('archibald content field education learningResourceTypePedagogical'));
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical duration'));
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical format'));
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical size'));
    user_role_grant_permissions($admin_role->rid, array('archibald content field classification defaultCurriculum'));
  }
}

// Implements hook_uninstall
function archibald_uninstall(){
  // Delete variables
  variable_del("archibald_language_settings");
  variable_del("archibald_ontology_url");
  variable_del("archibald_working_mode");
  variable_del("archibald_curriculum_educa_active");
  variable_del("archibald_send_mails");
  variable_del("archibald_send_mails_new_unavailable");
  variable_del("archibald_send_mails_status2final");
  variable_del("archibald_send_mails_status2draft");
  variable_del("archibald_send_mails_set_responsible");
  variable_del("archibald_api_url");
  variable_del("archibald_field_require_type_classification_defaultcurriculum");
  variable_del("archibald_field_require_type_proposal_classification_defaultcurriculum");
  variable_del("archibald_field_require_type_technical_previewimagecopyrightdescription");
  variable_del("archibald_field_require_type_proposal_technical_previewimagecopyrightdescription");
  variable_del("archibald_field_require_type_education_learningresourcetypepedagogical");
  variable_del("archibald_field_require_type_proposal_education_learningresourcetypepedagogical");
  variable_del("archibald_field_require_type_technical_duration");
  variable_del("archibald_field_require_type_proposal_technical_duration");
  variable_del("archibald_field_require_type_technical_format");
  variable_del("archibald_field_require_type_proposal_technical_format");
  variable_del("archibald_field_require_type_technical_size");
  variable_del("archibald_field_require_type_proposal_technical_size");
  variable_del("archibald_status2final_subject");
  variable_del("archibald_mail_status2final_group");

  variable_del("archibald_per2default");
  variable_del("archibald_curriculum_per_curriculum_url");

  // Delete roles
  user_role_delete("archibald publisher");
  user_role_delete("archibald editor");

  /**
   * Delete taxonomy vocabularies
   */
  $vocabularies = archibald_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    archibald_delete_vocabulary($vocabulary);
  }

  // Delete fields
  field_delete_field('field_taxon_deprecated');
  field_delete_field('field_taxon_key');
  field_delete_field('field_taxon_context');
  field_delete_field('field_taxon_url');
  field_delete_field('field_user_vcard');
}

/**
 * change db struc ad title to general identifyer,
 * add indexed version to lom stats
 */
function archibald_update_7200() {
  $ret = array();
  $ret[] = db_add_field('dsbc_general_identifier', 'title',
    array(
      'description' => '{dsbc_general_identifier}.title as {dsbc_langstring}.id',
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
    )
  );
  $ret[] = db_add_field('dsbc_lom_stats', 'indexed_version',
    array(
      'description' => 'The version (revision) with is currently indexed in solr',
      'type' => 'varchar',
      'length' => 32,
    )
  );
  return $ret;
}

/**
 * add logo to dsbc_contributors contributor
 * add index to dsbc_education fro better search performance
 * update translations
 * implement hook_update_xxxx().
 */
function archibald_update_7201() {
  $ret = array();
  $ret[] = db_add_field('dsbc_contributers', 'logo',
    array(
      'description' => 'The Logo File URI',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    )
  );

  $ret[] = db_add_index('dsbc_education', 'education_difficult',
    array(
      'difficult',
    )
  );

  return $ret;
}

/**
 * add the archibald import log table
 * implement hook_update_xxxx().
 */
function archibald_update_7202() {
  //@Schema ArchibaldImportLog.
  $db_struct = new ArchibaldDbStruct('dsbc_import_log', 'Import log.');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{dsbc_lom}.id', 32);
  $db_struct->addField('remote_id', ArchibaldDbStruct::T_VARCHAR, 'the unique remote id', 32);
  $db_struct->addField('plugin', ArchibaldDbStruct::T_VARCHAR, 'the plugin', 32);
  $db_struct->addPrimaryKey('lom_id', 'remote_id', 'plugin');
  $ret    = array();
  $schema = $db_struct->getSchema();
  $ret[]  = db_create_table('dsbc_import_log', $schema['dsbc_import_log']);

  return $ret;
}

/**
 * change archibald_contributer default values and resunc ontologys,
 * cause of lang ky changes
 * implement hook_update_xxxx().
 */
function archibald_update_7203() {
  $ret[] = db_change_field('dsbc_contributers', 'lastname', 'lastname',
    array(
      'type' => 'varchar',
      'length' => 180,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'firstname', 'firstname',
    array(
      'type' => 'varchar',
      'length' => 180,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'organisation', 'organisation',
    array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'country', 'country',
    array(
      'type' => 'varchar',
      'length' => 60,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'zip', 'zip',
    array(
      'type' => 'varchar',
      'length' => 20,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'city', 'city',
    array(
      'type' => 'varchar',
      'length' => 180,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'address1', 'address1',
    array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'address2', 'address2',
    array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'email', 'email',
    array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'tel', 'tel',
    array(
      'type' => 'varchar',
      'length' => 32,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  $ret[] = db_change_field('dsbc_contributers', 'logo', 'logo',
    array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'default' => NULL,
      'description' => 'The Logo File URI.',
    )
  );

  archibald_sync_taxonomy_os('lom-v1');
  archibald_sync_taxonomy_os('educa_standard_curriculum');

  return $ret;
}

/**
 * implement hook_update_xxxx().
 * change dsb_contributer add rul field
 */
function archibald_update_7204() {
  $ret[] = db_add_field('dsbc_contributers', 'url',
    array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  return $ret;
}

/**
 * change dsb_contribute_entity add entity_id field
 * implement hook_update_xxxx().
 */
function archibald_update_7205() {
  require_once drupal_get_path('module', 'archibald') . '/includes/LomContributor.class.php';

  $ret[] = db_add_field('dsbc_contribute_entity', 'entity_id',
    array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'default' => NULL,
      'description' => '{dsbc_contributers}.contributer_id' .
      'contributer identifer, ' .
      'for refernce lom object while  update contributer',
    )
  );

  // generate all entity_id`s.
  $res = db_query("SELECT entity FROM {dsbc_contribute_entity} GROUP BY entity");
  while ($row = $res->fetchAssoc()) {
    print_r();
  }

  return $ret;
}

/**
 * change dsbc_general_identifier
 * replace PRIMARY to normal INDEX and increase entry length
 *
 * cause mysql can on a primary key not handle fields longer than 250 chars
 * on utf-8 1 char = 3 bytes
 * 250*3 == 750 max key length
 * implement hook_update_xxxx().
 */
function archibald_update_7206() {
  $ret[] = db_drop_primary_key('dsbc_general_identifier');
  $ret[] = db_change_field('dsbc_general_identifier', 'entry', 'entry',
    array(
      'type' => 'varchar',
      'length' => 450,
      'not null' => FALSE,
      'default' => NULL,
    )
  );
  $ret[] = db_add_index('dsbc_general_identifier', 'dsbc_general_identifier',
    array(
      'catalog',
      'entry',
      'general_id',
    )
  );

  return $ret;
}

/**
 * place items in user menu
 * add the dsb coverage table
 * implement hook_update_xxxx().
 */
function archibald_update_7207() {
  archibald_install_use_menu();
}

/**
 * add fields for prohibit double edit functionalety
 * implement hook_update_xxxx().
 */
function archibald_update_7208() {
  $ret[] = db_add_field('dsbc_lom_stats', 'editing_uid',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'uid of user who last edit this node (drupal userid)',
    )
  );
  $ret[] = db_add_field('dsbc_lom_stats', 'editing_last_seen',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'unix timestamp of last seen, ajax, of last edit this resource',
    )
  );

  return $ret;
}

/**
 * add the dsb coverage table
 * fix unique fields
 * implement hook_update_xxxx().
 */
function archibald_update_7209() {
  // , 'dsbc_langstring_terms'
  //@Schema ArchibaldCoverageList.
  $db_struct = new ArchibaldDbStruct('dsbc_coverage_list', 'Predfined coverages.');
  $db_struct->addField('coverage', ArchibaldDbStruct::T_VARCHAR, 'the coverage', 255);
  $db_struct->addField('context', ArchibaldDbStruct::T_VARCHAR, 'the context like rameau, swd', 20);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'the anguage', 4);
  $db_struct->addPrimaryKey('coverage', 'language');
  $ret    = array();
  $schema = $db_struct->getSchema();
  $ret[]  = db_create_table('dsbc_coverage_list', $schema['dsbc_coverage_list']);
  $tables = array('dsbc_taxon', 'dsbc_file', 'dsbc_relations');
  $schema = archibald_schema();

  foreach ($tables as $table) {
    $ret[] = db_rename_table($table, $table . '_old');
    $ret[] = db_create_table($table, $schema[$table]);
    $res   = db_query('SELECT * FROM {' . $table . '_old}');
    while ($row = $res->fetchAssoc()) {
      try {
        db_insert($table)->fields($row)->execute();
      }
      catch (Exception $e) {
        // no problem its only a collision with new unique index
      }
    }
    $ret[] = db_drop_table($table . '_old');
  }

  return $ret;
}

/**
 * fix unique langstring
 * implement hook_update_xxxx().
 */
function archibald_update_7210() {
  $ret[] = db_drop_unique_key('dsbc_langstring_terms', 'language_term');
  $ret[] = db_add_index('dsbc_langstring_terms', 'dsbc_langstring_terms', array(array('term', 300)));
  return $ret;
}

/**
 * fix unique classification
 * implement hook_update_xxxx().
 */
function archibald_update_7211() {
  return array(db_drop_unique_key('dsbc_classification', 'lom_id_lom_version_purpose'));
}

/**
 * fix taxonomy i18 mode
 * implement hook_update_xxxx().
 */
function archibald_update_7212() {
  $dsb_vocabularies = array(
    'general catalog' => 1,
    'life cycle status' => 1,
    'rights licenses' => 1,
    'intended end user role' => 1,
    'education context' => 1,
    'language' => 1,
    'learning resource type' => 1,
    'life cycle contribute role' => 1,
    'difficulty' => 1,
    'educa_school_levels' => 1,
    'educa_school_subjects' => 1,
    'life_cycle_role' => 1,
  );

  foreach (taxonomy_vocabulary_get_names() As $vocabulary) {
    if (!empty($dsb_vocabularies[$vocabulary->name])) {
      $vocabulary = taxonomy_vocabulary_load($vocabulary->vid);
      $vocabulary->i18n_mode = I18N_MODE_LOCALIZE;
      taxonomy_vocabulary_save($vocabulary);
    }
  }

  archibald_sync_taxonomy_os('lom-v1');
  archibald_sync_taxonomy_os('educa_standard_curriculum');
}

/**
 * place items translations in user menu
 * implement hook_update_xxxx().
 */
function archibald_update_7213() {
  archibald_install_use_menu_translations();
}

/**
 * improve sor search
 * implement hook_update_xxxx().
 */
function archibald_update_7214() {
  module_load_include('inc', 'apachesolr', 'apachesolr.admin');
  apachesolr_delete_index();

  module_load_include('php', 'archibald', 'includes/LomSolrSearch.class');
  $lom_solr_search = new LOM_Solr_Search();
  $lom_solr_search->cron();
}

/**
 * add local publish status
 * implement hook_update_xxxx().
 */
function archibald_update_7215() {
  return array(
    db_add_field('dsbc_lom_stats', 'local_published',
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 64,
        'default' => '',
        'description' => 'determines if the resource is local published NULL=not, version_id = published',
      )
    )
  );
}

/**
 * create table for dsbc_curriculum
 * implement hook_update_xxxx().
 */
function archibald_update_7216() {
  //###################################### CURRICULUM ###########################
  //@Schema ArchibaldLomDataCurriculum.
  $db_struct = new ArchibaldDbStruct('dsbc_curriculum', 'LOMDATA_Curriculum object.');
  $db_struct->addField('curriculum_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{dsbc_lom}.id', 32);
  $db_struct->addField('lom_version', ArchibaldDbStruct::T_VARCHAR, '{dsbc_lom}.version', 32);
  $db_struct->addField('source', ArchibaldDbStruct::T_VARCHAR, 'curriculum ident', 60);
  $db_struct->addField('entity', ArchibaldDbStruct::T_TEXT, 'json encodet curriculum');
  $db_struct->addPrimaryKey('curriculum_id');
  $schema = $db_struct->getSchema();
  return array(db_create_table('dsbc_curriculum', $schema['dsbc_curriculum']));
}

/**
 * update all nodes, convert per from dsbc_classification to dsbc_curriculum
 *
 * implement hook_update_xxxx().
 *
 * @param array $sandbox
 *   called by reference
 *   batch process
 */
function archibald_update_7217(&$sandbox) {
  module_load_include('php', 'archibald', 'includes/curriculum/curriculum.abstract');
  module_load_include('php', 'archibald', 'includes/curriculum/curriculum_per.class');
  module_load_include('php', 'archibald', 'includes/curriculum/old/curriculum_per_1_0.class');

  // Update all lom objects.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['lom_ids'] = array();
    $res = db_query('SELECT lom_id
      FROM {dsbc_lom} l
      WHERE l.save_time = (  SELECT la.save_time
        FROM {dsbc_lom} la
        WHERE l.lom_id=la.lom_id
        ORDER BY la.save_time DESC
        LIMIT 1)
      AND l.deleted IS NULL');

    while ($row = $res->fetchObject()) {
      $sandbox['lom_ids'][] = $row->lom_id;
    }

    $sandbox['max'] = count($sandbox['lom_ids']);

    $new_handler = new ArchibaldCurriculumPer();
    $new_handler->setupProcess();
  }

  $need_to_be_processed = FALSE;
  $lom_id = array_shift($sandbox['lom_ids']);
  $lom = archibald_load($lom_id);
  $lom_classification = $lom->get_classification();
  if (!empty($lom_classification)) {
    $old_handler = new ArchibaldCurriculumPer10();
    $old_handler->setLomClassification($lom_classification);
    $old_entrys = $old_handler->get_entrys();
    if (!empty($old_entrys)) {
      $need_to_be_processed = TRUE;
      // convert all existing curriculum entry`s.
      $new_handler = new ArchibaldCurriculumPer();
      $discipline_a_options = array();
      $new_curriculum = $new_handler->get_curriculum();
      foreach ($new_curriculum->matrix as $educational_level_content) {
        foreach ($educational_level_content as $disciline_a => $dis_a_cnt) {
          $discipline_a_options[strtoupper($disciline_a)] = $disciline_a;
        }
      }

      foreach ($old_entrys as $old_key => $old_entry) {
        $educational_level_class = '';
        if (!empty($old_entry->educational_level[1])) {
          $educational_level_class = $old_entry->educational_level[1];
        }
        $domaine = $old_entry->discipline[0];
        if (!empty($discipline_a_options[$old_entry->discipline[0]])) {
          $domaine = $discipline_a_options[$old_entry->discipline[0]];
        }

        $new_handler->add(
          $old_entry->educational_level[0],
          $educational_level_class,
          $domaine,
          $old_entry->discipline[1],
          $old_entry->discipline[2],
          $old_entry->discipline_ids[0]
        );
        $old_handler->remove($old_entry->key);
      }

      // save new version of lom object.
      $lom->setClassification($old_handler->getLomClassification());
      $lom->setCurriculum($new_handler->getLomCurriculum());
      archibald_save($lom);
    }
  }

  $sandbox['progress']++;
  if (empty($sandbox['max'])) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['progress'] / $sandbox['max']);
  }

  $lom_title = LOM::determin_title($lom);

  if ($need_to_be_processed == FALSE) {
    $msg = t('Has no old PER entries: !lom_title', array('!lom_title' => $lom_title));

    if (function_exists('drush_log')) {
      drush_log($msg, 'notice');
    }
  }
  else {
    $msg = t('Succesfully updated: !lom_title', array('!lom_title' => $lom_title));

    if (function_exists('drush_log')) {
      drush_log($msg, 'ok');
    }
  }

  return $msg;
}

/**
 * update all nodes, with status public and set published bit
 * implement hook_update_xxxx().
 */
function archibald_update_7218() {
  $res = db_query('SELECT l.lom_id, l.version
    FROM {dsbc_lom} l
    INNER JOIN {dsbc_lifecycle} lc ON (lc.lifecycle_id=l.lifecycle_id)
    WHERE l.save_time = (SELECT la.save_time
      FROM {dsbc_lom} la
      WHERE l.lom_id=la.lom_id
      ORDER BY la.save_time DESC
      LIMIT 1)
    AND lc.status = \'final\'
    AND l.deleted IS NULL');

  while ($row = $res->fetchObject()) {
    db_update('dsbc_lom_stats')
      ->fields(array('local_published' => $row->version))
      ->condition('lom_id', $row->lom_id)
      ->execute();
  }
}

/**
 * create table for content_partner settings
 * implement hook_update_xxxx().
 */
function archibald_update_7219() {

  //@Schema ArchibaldSettingsContentPartner.
  $db_struct = new ArchibaldDbStruct('dsbc_settings_content_partner', 'settings for content partner instances.');
  $db_struct->addField('content_partner_id', ArchibaldDbStruct::T_SERIAL, 'the unique key for the object');
  $db_struct->addField('name', ArchibaldDbStruct::T_VARCHAR, 'String to identify a content partner instance', 128);
  $db_struct->addField('username', ArchibaldDbStruct::T_VARCHAR, 'api username', 128);
  $db_struct->addField('password', ArchibaldDbStruct::T_VARCHAR, 'api password', 128);
  $db_struct->addField('key_fid', ArchibaldDbStruct::T_INT, '{file_managed}.fid  ssl key file', 256);
  $db_struct->addField('icon_fid', ArchibaldDbStruct::T_INT, '{file_managed}.fid  icon of content_partner', 256);
  $db_struct->addField('file_server_type', ArchibaldDbStruct::T_VARCHAR, 'type of file server', 64);
  $db_struct->addPrimaryKey('content_partner_id');
  $ret = array();
  $schema = $db_struct->getSchema();

  db_create_table('dsbc_settings_content_partner', $schema['dsbc_settings_content_partner']);

  db_insert('dsbc_settings_content_partner')
    ->fields(
      array(
        'name' => 'default',
        'username' => variable_get('archibald_auth_username'),
        'password' => variable_get('archibald_private_key_secret'),
        'key_fid' => variable_get('archibald_private_key'),
        'icon_fid' => variable_get('archibald_logo'),
        'file_server_type' => 'educa',
      )
    )
    ->execute();

  db_add_field('dsbc_lom_stats', 'content_partner_id',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => '{dsbc_settings_content_partner}.id is central published with this content partner',
    )
  );

  db_update("dsbc_lom_stats")
  ->fields(array(
    'content_partner_id' => 1
  ))
  ->condition("publication_version", NULL, 'IS NOT NULL')
  ->execute();
}

/**
 * update table dsbc_file and add field file_server_type
 * implement hook_update_xxxx().
 */
function archibald_update_7220() {
  db_add_field('dsbc_file', 'file_server_type',
    array(
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 64,
      'default' => '',
      'description' => 'type of file server',
    )
  );

  db_drop_primary_key('dsbc_file');
  db_add_unique_key('dsbc_file', 'fid_timestamp_file_server_type',
    array(
      'fid',
      'timestamp',
      'file_server_type',
    )
  );

  db_update("dsbc_file")
  ->fields(array(
    'file_server_type' => 'educa'
  ))
  ->execute();
}

/**
 * rename table fields to lower case
 * implement hook_update_xxxx().
 */
function archibald_update_7221() {
  if (db_driver() != 'pgsql') {
    //We need to rename it twice because just lower case the fields will throw an error.
    //That the field already exists.
    db_change_field("dsbc_lom", "rights_copyrightAndOtherRestrictions", "rights_copyrightandotherrestrictions2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => '{dsbc_lom}.copyrightAndOtherRestrictions as a taxon id for yes/no',
      )
    );

    db_change_field("dsbc_general", "aggregationLevel", "aggregationlevel2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => '{dsbc_general}.aggregationLevel as a taxonomy code',
      )
    );

    db_change_field("dsbc_meta_metadata", "metadataschema", "metadataschema2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => 'LOMv1.0',
        'description' => '{dsbc_lifecycle}.metadataschema',
      )
    );

    db_change_field("dsbc_education", "interactiveType", "interactivetype2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education", "interactivityLevel", "interactivitylevel2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education", "semanticDensity", "semanticdensity2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education", "typicalLearningTime_duration", "typicallearningtime_duration2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 32,
        'default' => '',
        'description' => 'the duration',
      )
    );

    db_change_field("dsbc_education", "typicalLearningTime_description", "typicallearningtime_description2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 32,
        'default' => '',
        'description' => '{dsbc_langstring}.id',
      )
    );

    db_change_field("dsbc_education_learningresourcetype", "learningResourceType_id", "learningresourcetype_id2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education_intendedenduserrole", "intendedEndUserRole_id", "intendedenduserrole_id2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education_typicalagerange", "typicalAgeRange", "typicalagerange2",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 32,
        'default' => '',
        'description' => 'the age range',
      )
    );

    //RENAME all fields to the needed ones.
    db_change_field("dsbc_lom", "rights_copyrightandotherrestrictions2", "rights_copyrightandotherrestrictions",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => '{dsbc_lom}.copyrightAndOtherRestrictions as a taxon id for yes/no',
      )
    );

    db_change_field("dsbc_general", "aggregationlevel2", "aggregationlevel",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => '{dsbc_general}.aggregationLevel as a taxonomy code',
      )
    );

    db_change_field("dsbc_meta_metadata", "metadataschema2", "metadataschema",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => 'LOMv1.0',
        'description' => '{dsbc_lifecycle}.metadataschema',
      )
    );

    db_change_field("dsbc_education", "interactivetype2", "interactivetype",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education", "interactivitylevel2", "interactivitylevel",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education", "semanticdensity2", "semanticdensity",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education", "typicallearningtime_duration2", "typicallearningtime_duration",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 32,
        'default' => '',
        'description' => 'the duration',
      )
    );

    db_change_field("dsbc_education", "typicallearningtime_description2", "typicallearningtime_description",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 32,
        'default' => '',
        'description' => '{dsbc_langstring}.id',
      )
    );

    db_change_field("dsbc_education_learningresourcetype", "learningresourcetype_id2", "learningresourcetype_id",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education_intendedenduserrole", "intendedenduserrole_id2", "intendedenduserrole_id",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 60,
        'default' => '',
        'description' => 'taxon path id',
      )
    );

    db_change_field("dsbc_education_typicalagerange", "typicalagerange2", "typicalagerange",
      array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 32,
        'default' => '',
        'description' => 'the age range',
      )
    );

    db_drop_primary_key("dsbc_education_learningresourcetype");
    db_drop_primary_key("dsbc_education_intendedenduserrole");
    db_drop_primary_key("dsbc_education_typicalagerange");

    db_add_primary_key("dsbc_education_learningresourcetype",
      array(
        'education_id',
        'learningresourcetype_id',
      )
    );

    db_add_primary_key("dsbc_education_intendedenduserrole",
      array(
        'education_id',
        'intendedenduserrole_id',
      )
    );
    db_add_primary_key("dsbc_education_typicalagerange",
      array(
        'education_id',
        'typicalagerange',
      )
    );
  }
}

/**
 * replace old section permission to field permission
 * implement hook_update_xxxx().
 */
function archibald_update_7222() {
  $res = db_query("SELECT * FROM {role_permission}");
  while ($row = $res->fetchAssoc()) {
    $new_perm_array = array();
    switch ($row['permission']) {
      case 'dsb content set classification':
        $new_perm_array = array(
          'dsb content field classification context',
          'dsb content field classification curriculums',
        );
        break;

      case 'dsb content set contributer':
      case 'dsb content set contributor':
        $new_perm_array = array(
          'dsb content field life_cycle contribute',
        );
        break;

      case 'dsb content set coverages':
        $new_perm_array = array(
          'dsb content field keywords coverage',
        );
        break;

      case 'dsb content set education':
        $new_perm_array = array(
          'dsb content field education learningResourceType',
          'dsb content field education intendedEndUserRole',
          'dsb content field education typicalAgeRange',
          'dsb content field education typicalLearningTime',
          'dsb content field education difficulty',
          'dsb content field education aggregationLevel',
          'dsb content field education description',
        );
        break;

      case 'dsb content set general':
        $new_perm_array = array(
          'dsb content field general language',
          'dsb content field general description',
          'dsb content field general preview_image',
          'dsb content field general life_cycle version',
          'dsb content field general technical location',
          'dsb content field technical otherPlattformRequirements',
        );
        break;

      case 'dsb content set keyowrds':
        $new_perm_array = array(
          'dsb content field keywords keyword',
        );
        break;

      case 'dsb content set relation':
        $new_perm_array = array(
          'dsb content field relations relation',
        );
        break;

      case 'dsb content set rights':
        $new_perm_array = array(
          'dsb content field rights cost',
          'dsb content field rights copyrightAndOtherRestrictions',
          'dsb content field rights description',
        );
        break;
    }

    if (empty($new_perm_array)) {
      continue;
    }

    foreach ($new_perm_array as $new_role) {
      $entry_check = db_query("SELECT 1 FROM {role_permission} WHERE rid = :rid AND permission = :permission AND module = :module",
        array(
          ':rid' => $row['rid'],
          ':permission' => $new_role,
          ':module' => $row['module'],
        )
      )
      ->fetchAssoc();

      if (isset($entry_check[1])) {
        continue;
      }

      db_insert("role_permission")
        ->fields(array(
          'rid' => $row['rid'],
          'permission' => $new_role,
          'module' => $row['module'],
        ))
        ->execute();
    }

    db_delete('role_permission')
      ->condition("rid", $row['rid'])
      ->condition("permission", $row['permission'])
      ->condition("module", $row['module'])
      ->execute();
  }
}

/**
 * update all menu pathes from "dsb" to "archibald"
 * implement hook_update_xxxx().
 */
function archibald_update_7223() {
  if (variable_get('site_frontpage') == 'dsb') {
    variable_set('site_frontpage', 'archibald');
  }

  $menu_links = db_update('menu_links')
    ->fields(
      array(
        'link_path' => 'admin/archibald',
      )
    )
    ->condition('link_path', 'admin/dsb')
    ->execute();

  $menu_links = db_update('menu_links')
    ->fields(
      array(
        'link_path' => 'archibald/add',
      )
    )
    ->condition('link_path', 'dsb/add')
    ->execute();
}

/**
 * increase lom technical format the length for mime type`s
 * implement hook_update_xxxx().
 */
function archibald_update_7224() {

  db_drop_primary_key('dsbc_technical_formats');

  db_change_field("dsbc_technical_formats", "format", "format",
    array(
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 255,
      'default' => '',
      'description' => 'The format mime-type or "non-digital"',
    )
  );

  db_add_primary_key(
    'dsbc_technical_formats',
    array(
      'technical_id',
      'format'
    )
  );
}

/**
 * add the new stat field translation_in_progress
 * implement hook_update_xxxx().
 */
function archibald_update_7225() {

  db_add_field('dsbc_lom_stats', 'translation_in_progress',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'Determines if a translation is or was in progress',
    )
  );

}

/**
 * change the full module naming from dsb_client to archibald
 * implement hook_update_xxxx().
 *
 * If nothing work do this
 *
 *  DELETE FROM system WHERE filename LIKE 'sites/all/modules/dsb_client/archibald%' AND schema_version = -1;
 *  UPDATE `system` SET `filename` = 'sites/all/modules/dsb_client/archibald.module',`name` = 'archibald',`type` = 'module' WHERE `system`.`filename` = 'sites/all/modules/dsb_client/dsb_client.module';
 *  UPDATE `system` SET `filename` = 'sites/all/modules/dsb_client/archibald_comments/archibald_comments.module',`name` = 'archibald_comments',`type` = 'module' WHERE `system`.`filename` = 'sites/all/modules/dsb_client/dsb_client_comments/dsb_client_comments.module';
 *  UPDATE `system` SET `filename` = 'sites/all/modules/dsb_client/archibald_help/archibald_help.module',`name` = 'archibald_help',`type` = 'module' WHERE `system`.`filename` = 'sites/all/modules/dsb_client/dsb_client_help/dsb_client_help.module';
 *  UPDATE `system` SET `filename` = 'sites/all/modules/dsb_client/archibald_import/archibald_import.module',`name` = 'archibald_import',`type` = 'module' WHERE `system`.`filename` = 'sites/all/modules/dsb_client/dsb_client_import/dsb_client_import.module';
 *  UPDATE `system` SET `filename` = 'sites/all/modules/dsb_client/archibald_ratings/archibald_ratings.module',`name` = 'archibald_ratings',`type` = 'module' WHERE `system`.`filename` = 'sites/all/modules/dsb_client/dsb_client_ratings/dsb_client_ratings.module';
 *  UPDATE `system` SET `filename` = 'sites/all/modules/dsb_client/archibald_stats/archibald_stats.module',`name` = 'archibald_stats',`type` = 'module' WHERE `system`.`filename` = 'sites/all/modules/dsb_client/dsb_client_stats/dsb_client_stats.module';
 *
 *  DELETE FROM `registry` WHERE `module`='dsb_client';
 *
 *
 */
function archibald_update_7226() {
  // update all variables.
  $res = db_query("SELECT name FROM {variable} WHERE name LIKE 'dsb_%' OR name LIKE 'dsbc_%'");
  while ($row = $res->fetchAssoc()) {
    try {
      db_update('variable')
        ->fields(
          array(
            'name' => strtr(
              $row['name'],
              array(
                'dsb_client_' => 'archibald_',
                'dsb_mail_' => 'archibald_mail_',
                'dsbc_' => 'archibald_'
              )
            ),
          )
        )
        ->condition('name', $row['name'], '=')
        ->execute();
      }
      catch (PDOException $e) {
        // Here we can ignore errors.
      }
  }

  // update all permissions.
  $res = db_query("SELECT permission, module FROM {role_permission} WHERE module LIKE 'dsb_client'");
  while ($row = $res->fetchAssoc()) {
    db_update('role_permission')
      ->fields(
        array(
          'permission' => strtr(
            $row['permission'],
            array(
              'dsb' => 'archibald'
            )
          ),
          'module' => 'archibald',
        )
      )
      ->condition('module', $row['module'], '=')
      ->condition('permission', $row['permission'], '=')
      ->execute();
  }

  // update menu links.
  $menu_links = db_update('menu_links')
  ->fields(
    array(
      'link_path' => 'archibald_contributor/standalone',
    )
  )
  ->condition('link_path', 'dsb_contributor/standalone')
  ->execute();


  // update all tables.
  $schema = archibald_schema();

  foreach ($schema as $table => $null) {
    $table_old = strtr($table, array('archibald_' => 'dsbc_'));
    $ret[] = db_rename_table($table_old, $table);
  }

  drupal_flush_all_caches();

  // update the lom ressources.
  $res = db_query("SELECT technical_id, preview_image FROM {archibald_technical} WHERE preview_image LIKE 'dsb_client_file%' ");
  while ($row = $res->fetchAssoc()) {
    db_update('archibald_technical')
      ->fields(
        array(
          'preview_image' => strtr(
            $row['preview_image'],
            array(
              'dsb_client_file' => 'archibald_file'
            )
          ),
        )
      )
      ->condition('preview_image', $row['preview_image'], '=')
      ->execute();
  }

  $res = db_query("SELECT general_id, entry FROM {archibald_general_identifier} WHERE entry LIKE 'dsb_client_file%'");
  while ($row = $res->fetchAssoc()) {
    db_update('archibald_general_identifier')
      ->fields(
        array(
          'entry' => strtr(
            $row['entry'],
            array(
              'dsb_client_file' => 'archibald_file'
            )
          ),
        )
      )
      ->condition('entry', $row['entry'], '=')
      ->execute();
  }

  db_update('archibald_lom_stats')
    ->fields(
      array(
        'indexed_version' => NULL,
      )
    )
    ->execute();


  // reSetup Curriculum.
  module_load_include('php', 'archibald', 'includes/curriculum/curriculum.abstract');
  module_load_include('php', 'archibald', 'includes/curriculum/curriculum_per.class');
  $curr_handler = new ArchibaldCurriculumPer();
  if (method_exists($curr_handler, 'setupProcess')) {
    $curr_handler->setupProcess();
  }

  variable_set('archibald_working_mode', ARCHIBALD_WORKING_MODE_LIVE);
}

/**
 * further updates to merge dsb to archibald (user roles and one mail variable)
 * implement hook_update_xxxx().
 */
function archibald_update_7227() {

  // update missing variables.
  db_update('variable')
    ->fields(array(
      'name' => 'archibald_status2final_subject',
    ))
    ->condition('name', 'status2final_subject')
    ->execute();

  //Update all dsb roles.
  $res = db_query("SELECT name FROM {role} WHERE name LIKE 'dsb %'");
  while ($row = $res->fetchAssoc()) {
    db_update('role')
      ->fields(array(
        'name' =>  str_replace('dsb ', 'archibald ', $row['name'])
      ))
      ->condition('name', $row['name'])
      ->execute();
  }

}

/**
 * Adds the uid data field to contributers
 * Implements hook_update_xxxx().
 */
function archibald_update_7228() {

  // Add the new vcard field.
  db_add_field('archibald_contributers', 'uid',
    array(
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 32,
      'default' => '',
      'description' => '',
    )
  );

  // Update all internal contributers table.
  $txn = db_transaction();
  // the transaction will automaticly commited at the end of function
  $res = db_query("SELECT contributer_id FROM {archibald_contributers}");
  while ($row = $res->fetchAssoc()) {
    $contributer = new ArchibaldLomContributor($row['contributer_id']);
    $data = $contributer->getData(TRUE);
    $data['uid'] = $row['contributer_id'];
    $contributer->renderDataObject($data);
    $contributer->save();
  }


}

/**
 * Update all contribute entitys fro al lom resources
 * Implements hook_update_xxxx().
 *
 * @param array $sandbox
 *   called by reference
 *   batch process
 *
 */
function archibald_update_7229(&$sandbox) {
  // Update all lom contributer entities.

  // Update all lom objects.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['contribute_entity'] = array();
    $res = db_query("SELECT * FROM {archibald_contribute_entity}");
    while ($row = $res->fetchAssoc()) {
      $sandbox['contribute_entity'][] = $row;
    }

    $sandbox['max'] = count($sandbox['contribute_entity']);

    if (function_exists('drush_log')) {
      drush_log('Starting: ' . $sandbox['max'] . ' updates', 'notice');
    }
  }

  for ($i=0 ; $i<=100 ; $i++) {
    $row = array_shift($sandbox['contribute_entity']);

    if (empty($row)) {
      break;
    }

    $contributer = new ArchibaldLomContributor($row['entity']);
    $data = $contributer->getData(TRUE);
    $data['uid'] = $row['entity_id'];
    $contributer->renderDataObject($data);

    db_update('archibald_contribute_entity')
      ->fields(array(
        'entity' => $contributer->getVcard()
      ))
      ->condition('contribute_id', $row['contribute_id'])
      ->condition('entity_id', $row['entity_id'])
      ->execute();

    $sandbox['progress']++;
  }

  if (function_exists('drush_log')) {
    drush_log('Update progress: ' . sprintf('%.2f%%', ($sandbox['progress'] / $sandbox['max'] * 100)), 'notice');
  }

  if (empty($sandbox['max'])) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['progress'] / $sandbox['max']);
  }
}

/**
 * Activate default curriculums
 * Implements hook_update_xxxx().
 */
function archibald_update_7230() {
  variable_set('archibald_curriculum_educa_active', '1');
}

/**
 * Implements hook_update_xxxx().
 *
 * Change the stat field translation_in_progress in new_revision_required
 *
 */
function archibald_update_7231() {

  db_change_field('archibald_lom_stats', 'translation_in_progress', 'new_revision_required',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'Determines if a new revision is required or not',
    )
  );

  //@Schema ArchibaldChangeLog.
  $db_struct = new ArchibaldDbStruct('archibald_change_log', 'Change log.');
  $db_struct->addField('lom_id', ArchibaldDbStruct::T_VARCHAR, '{archibald_lom}.id', 32);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'the type of change', 4);
  $db_struct->addField('field', ArchibaldDbStruct::T_VARCHAR, 'the field which changed', 64);
  $db_struct->addField('old_value', ArchibaldDbStruct::T_TEXT, 'the old value');
  $db_struct->addField('new_value', ArchibaldDbStruct::T_TEXT, 'the new value');
  $db_struct->addPrimaryKey('lom_id', 'language', 'field');
  $ret    = array();
  $schema = $db_struct->getSchema();
  $ret[]  = db_create_table('archibald_change_log', $schema['archibald_change_log']);

  return $ret;
}

/**
 * Implements hook_update_xxxx().
 *
 * Update some permissions
 *
 */
function archibald_update_7232() {
  $change_permissions = array(
    'archibald content field general otherPlattformRequirements' => 'archibald content field technical otherPlattformRequirements',
    'archibald content field general technical location' => 'archibald content field technical location',
    'archibald content field general preview_image' => 'archibald content field technical preview_image',
  );

  // update all permissions.
  $res = db_query("SELECT rid, permission, module FROM {role_permission} ");
  while ($row = $res->fetchAssoc()) {

    if (empty($change_permissions[$row['permission']])) {
      continue;
    }

    db_update('role_permission')
      ->fields(
        array(
          'permission' => $change_permissions[$row['permission']],
        )
      )
      ->condition('rid', $row['rid'], '=')
      ->condition('permission', $row['permission'], '=')
      ->condition('module', $row['module'], '=')
      ->execute();
  }
}

/**
 * Implements hook_update_xxxx().
 *
 * Change database field name from new_revision_required to republication_required
 */
function archibald_update_7233() {
  db_change_field('archibald_lom_stats', 'new_revision_required', 'republication_required',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'Determines if a new revision is required or not',
    )
  );
}

/**
 * Implements hook_update_xxxx().
 *
 * Add new table for keyword list
 *
 */
function archibald_update_7234() {
  //@Schema ArchibaldKeywordList.
  $db_struct = new ArchibaldDbStruct('archibald_keyword_list', 'Predfined keyword.');
  $db_struct->addField('keyword', ArchibaldDbStruct::T_VARCHAR, 'the keyword', 255);
  $db_struct->addField('language', ArchibaldDbStruct::T_VARCHAR, 'the language', 4);
  $db_struct->addField('langstring_id', ArchibaldDbStruct::T_VARCHAR, 'the langstring id', 32);
  $db_struct->addPrimaryKey('keyword', 'language');
  $ret    = array();
  $schema = $db_struct->getSchema();
  $ret[]  = db_create_table('archibald_keyword_list', $schema['archibald_keyword_list']);

  // Add the new coverage field "langstring_id".
  db_add_field('archibald_coverage_list', 'langstring_id',
    array(
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 32,
      'default' => '',
      'description' => 'the langstring id',
    )
  );

  return $ret;
}

/**
 * Implements hook_update_xxxx().
 *
 * change no null to local published stats field
 *
 */
function archibald_update_7235() {

  db_query("UPDATE {archibald_lom_stats} SET local_published = '' WHERE local_published IS NULL");

  db_change_field('archibald_lom_stats', 'local_published', 'local_published',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 64,
      'default' => '',
      'description' => 'determines if the resource is local published, version_id = published',
    )
  );

}

/**
 * Implements hook_update_xxxx().
 *
 * Disable and uninstall all Archibald submodules.
 *
 */
function archibald_update_7236() {

  module_disable(
    array(
      'archibald_ratings',
      'archibald_comments',
      'archibald_stats',
      'archibald_import',
    ),
    FALSE);

  drupal_uninstall_modules(
    array(
      'archibald_ratings',
      'archibald_comments',
      'archibald_stats',
      'archibald_import',
    ),
    FALSE);
}

/**
 * Implements hook_update_xxxx().
 *
 * Updates the coverage/keyword list with current coverages and keywords within the descriptions.
 *
 */
function archibald_update_7237() {

  // Coverage list fill.
  db_query('DELETE FROM {archibald_coverage_list}');

  $res = db_query('SELECT * FROM {archibald_general_coverage}');
  while ($row = $res->fetchAssoc()) {
    $coverage = ArchibaldLomSaveHandler::requestLangStringObj($row['coverage'])->getStrings();
    foreach ($coverage AS $lang => $val) {

      $exist_check = db_select('archibald_coverage_list', 'cl')
        ->fields('cl', array(
          'langstring_id',
        ))
        ->condition('coverage', $val)
        ->condition('language', $lang)
        ->execute()
        ->fetchAssoc();

      if (empty($exist_check) || !isset($exist_check['langstring_id']) || empty($exist_check['langstring_id'])) {

        $langstring = new ArchibaldLomDataLangString($val, $lang);
        $langstring_id = ArchibaldLomSaveHandler::saveOrInsertLangString($langstring);

        db_insert('archibald_coverage_list')
          ->fields(array(
            'coverage' => $val,
            'language' => $lang,
            'langstring_id' => $langstring_id,
          ))
          ->execute();

        $sql = "SELECT a.general_id, a.coverage, b.term
    FROM {archibald_general_coverage} a
    LEFT JOIN {archibald_langstring_terms} b ON (a.coverage = b.langstring_terms_id)
    WHERE
      (
        (b.language = :lang AND b.term = :text) OR (b.language IS NULL AND b.term IS NULL)
      ) AND a.coverage != :ls";
        $gc_check = db_query($sql, array(
          ':lang' => $lang,
          ':text' => $val,
          ':ls' => $langstring_id,
          ));

        $gw_ids = array();
        while ($gc_row = $gc_check->fetchAssoc()) {
          db_query("DELETE FROM {archibald_general_coverage} WHERE coverage = :kw AND general_id = :gid", array(
            ':kw' => $gc_row['coverage'],
            ':gid' => $gc_row['general_id'],
          ));

          if (!empty($gc_row['term'])) {
            $gw_ids[$gc_row['general_id']] = TRUE;
          }
        }

        foreach ($gw_ids AS $id => $true) {
          db_insert('archibald_general_coverage')
            ->fields(array(
              'coverage' => $langstring_id,
              'general_id' => $id,
            ))
            ->execute();
        }
      }
    }
  }

  // Keyword fill.
  db_query('DELETE FROM {archibald_keyword_list}');

  $res = db_query('SELECT * FROM {archibald_general_keywords}');
  while ($row = $res->fetchAssoc()) {
    $keyword = ArchibaldLomSaveHandler::requestLangStringObj($row['keyword'])->getStrings();
    foreach ($keyword AS $lang => $val) {

      $exist_check = db_select('archibald_keyword_list', 'cl')
        ->fields('cl', array(
          'langstring_id',
        ))
        ->condition('keyword', $val)
        ->condition('language', $lang)
        ->execute()
        ->fetchAssoc();

      if (empty($exist_check) || !isset($exist_check['langstring_id']) || empty($exist_check['langstring_id'])) {

        $langstring = new ArchibaldLomDataLangString($val, $lang);
        $langstring_id = ArchibaldLomSaveHandler::saveOrInsertLangString($langstring);

        db_insert('archibald_keyword_list')
          ->fields(array(
            'keyword' => $val,
            'language' => $lang,
            'langstring_id' => $langstring_id,
          ))
          ->execute();

        $sql = "SELECT a.general_id, a.keyword, b.term
    FROM {archibald_general_keywords} a
    LEFT JOIN {archibald_langstring_terms} b ON (a.keyword = b.langstring_terms_id)
    WHERE
      (
        (b.language = :lang AND b.term = :text) OR (b.language IS NULL AND b.term IS NULL)
      ) AND a.keyword != :ls";
        $gc_check = db_query($sql, array(
          ':lang' => $lang,
          ':text' => $val,
          ':ls' => $langstring_id,
          ));
        $gw_ids = array();
        while ($gc_row = $gc_check->fetchAssoc()) {
          db_query("DELETE FROM {archibald_general_keywords} WHERE keyword = :kw AND general_id = :gid", array(
            ':kw' => $gc_row['keyword'],
            ':gid' => $gc_row['general_id'],
          ));

          if (!empty($gc_row['term'])) {
            $gw_ids[$gc_row['general_id']] = TRUE;
          }
        }

        foreach ($gw_ids AS $id => $true) {
          db_insert('archibald_general_keywords')
            ->fields(array(
              'keyword' => $langstring_id,
              'general_id' => $id,
            ))
            ->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_update_xxxx().
 *
 * Update max length for change log field "field"
 */
function archibald_update_7238() {
  db_change_field('archibald_change_log', 'field', 'field',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 255,
      'default' => '',
      'description' => 'the field which changed',
    )
  );
}


/**
 * Implements hook_update_XXXX;
 *
 * Creates the vocabulary 'aggregation_level' and synchronize it with the ontology server.
 */
function archibald_update_7239() {
  archibald_create_vocabulary(
    array(
      'aggregation_level',
      'aggregation_level',
      'LOMv1.0',
      'LOMv1.0',
      TRUE,
      FALSE,
    )
  );

  archibald_sync_taxonomy_os('lom-v1');
}

/**
 * Implements hook_update_xxxx().
 *
 * Change technical location database field name from varchar to text (This will also remove primary key, because of new text type)
 */
function archibald_update_7240() {
  db_drop_primary_key('archibald_technical_locations');
  db_change_field('archibald_technical_locations', 'location', 'location',
    array(
      'type' => 'text',
      'not null' => TRUE,
      'description' => '',
    )
  );
}

/**
 * Add proposal fields to lom stats
 */
function archibald_update_7241() {
  // Add the new coverage field "langstring_id".
  db_add_field('archibald_lom_stats', 'proposal_contact_name',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 255,
      'default' => '',
      'description' => 'Name of the person making the proposal',
    )
  );
  db_add_field('archibald_lom_stats', 'proposal_contact_email',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 255,
      'default' => '',
      'description' => 'E-mail of the person making the proposal',
    )
  );
  db_add_field('archibald_lom_stats', 'proposal_contact_phone',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 50,
      'default' => '',
      'description' => 'Phone number of the person making the proposal',
    )
  );
  db_add_field('archibald_lom_stats', 'proposal_message',
    array(
      'type' => 'text',
      'not null' => FALSE,
      'description' => 'Message of the person making the proposal',
      'default' => NULL,
    )
  );
}

/**
 * Implements hook_update_xxxx().
 *
 * Setup send mail variable to default: true
 */
function archibald_update_7242() {
  variable_set('archibald_send_mails', TRUE);
}

/**
 * Implements hook_update_xxxx().
 *
 * Add batch_ops fields to lom stats
 */
function archibald_update_7243() {
  db_add_field('archibald_lom_stats', 'batch_op_key',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 100,
      'default' => '',
      'description' => 'Batch operation key',
    )
  );
  db_add_field('archibald_lom_stats', 'batch_op_time',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'length' => 16,
      'default' => 0,
      'description' => 'Batch operation start time',
    )
  );
}

/**
 * Implements hook_update_xxxx().
 *
 * Change general language -> language field from 2 to 4 chars because of new value 'none'
 */
function archibald_update_7244() {
  db_change_field('archibald_general_languages', 'language', 'language',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 4,
      'default' => '',
      'description' => 'language as a 2 char language code or none',
    )
  );
}

/**
 * Implements hook_update_xxxx().
 *
 * Remove main server and file server field from content partner settings (not file server type). api server is used from global.
 */
function archibald_update_7245() {
  db_drop_field('archibald_settings_content_partner', 'main_server');
  db_drop_field('archibald_settings_content_partner', 'file_server');
}

/**
 * Add fields to not send emails twice for proposals
 */
function archibald_update_7246() {
  db_add_field('archibald_lom_stats', 'proposal_mail_sent',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'If we have already sent the publish mail to the proposal user',
    )
  );
}

/**
 * Implements hook_update_xxxx().
 *
 * Changes contributer table and field to contributor
 */
function archibald_update_7247() {

  if (db_driver() == 'pgsql') {
    if (db_table_exists('archibald_contributers')) {
      db_drop_primary_key("archibald_contributers");
    }
    else if (db_table_exists('archibald_contributors')) {
      db_drop_primary_key("archibald_contributors");
    }
  }
  if (db_table_exists('archibald_contributers')) {
    db_rename_table('archibald_contributers', 'archibald_contributors');
  }
  $ret[] = db_change_field('archibald_contributors', 'contributer_id', 'contributor_id',
    array(
      'type' => 'varchar',
      'length' => 32,
      'not null' => FALSE,
      'default' => NULL,
    )
  );

  if (db_driver() == 'pgsql') {
    db_add_primary_key("archibald_contributors",
      array(
        'contributor_id',
      )
    );
  }

  db_query("UPDATE {file_usage} SET type = 'contributor_logo' WHERE type = 'contributer_logo'");

  $res = db_select('archibald_lom_stats', 'ls')
   ->fields('ls', array(
     'lom_id',
     'publication_log',
   ))
   ->condition('publication_log', '%ontributer%', 'LIKE')
   ->execute();
  while ($row = $res->fetchAssoc()) {
    db_query("UPDATE {archibald_lom_stats} SET publication_log = :log WHERE lom_id = :lom_id", array(
      ':log' => str_replace('ontributer', 'ontributor', $row['publication_log']),
      ':lom_id' => $row['lom_id'],
    ));
  }
  return $ret;
}

/**
 * Implements hook_update_xxxx().
 *
 * Replace archibald urls. disallow file uploads
 */
function archibald_update_7248() {

  // Init Uploader.
  $uploader = new ArchibaldUploaderEduca();

  // Get all file server files.
  $res = db_select('archibald_general_identifier', 'i')
    ->fields('i', array(
      'entry',
      'general_id',
    ))
    ->where("entry LIKE 'archibald_file/%'")
    ->execute();

  while ($row = $res->fetchAssoc()) {

    // Do not process if we have not a file server file.
    if (!preg_match('/^archibald_file\/([0-9]+)\//', $row['entry'], $matches)) {
      continue;
    }

    // Find the content partner based up on the lom id.
    $cp_res = db_query("SELECT content_partner_id FROM {archibald_lom_stats} ls
      JOIN {archibald_lom} l ON (l.lom_id = ls.lom_id)
      WHERE l.general_id = :gi", array(
        ':gi' => $row['general_id'],
      ));
    $cp = $cp_res->fetchAssoc();

    // Set the content partner.
    $uploader->loadContentPartnerByContentPartnerId($cp['content_partner_id']);

    // Get the file to upload.
    $file = file_load($matches[1]);
    $file_real_path = $file->uri;

    // Correct real path.
    if (isset($file) && $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri)) {
      $file_real_path = $wrapper->realpath();
    }

    // Get the upload url.
    $status = $uploader->uploadFile(1, $file_real_path, 2, NULL, $nothing);
    if ($status->code != 200) {
      continue;
    }

    // Update the new url.
    db_update('archibald_general_identifier')
      ->fields(array(
        'entry' => $status->url,
      ))
      ->condition('entry', $row['entry'])
      ->condition('general_id', $row['general_id'])
      ->execute();
  }

  // Reset file server type to not permitted.
  db_update('archibald_settings_content_partner')
    ->fields(array(
      'file_server_type' => 'no',
    ))
    ->execute();
}


/**
 * Implements hook_update_xxxx().
 *
 * Make sure anonymous and authenticated users can view the homepage
 */
function archibald_update_7249() {
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('view archibald homepage'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('view archibald homepage'));
}

/**
 * Implements hook_update_xxxx().
 *
 * Fix file server type
 */
function archibald_update_7250() {
  if (db_driver() == 'pgsql') {
    $sql = "SELECT
              fid,
              timestamp,
              array_to_string(array_agg(CASE WHEN file_server_type IS NULL THEN 'null' ELSE file_server_type END), ',') AS fst
            FROM
              archibald_file
            GROUP BY
              fid, timestamp
            ORDER BY
              fid";
  }
  else
  {
    $sql = "SELECT
              fid,
              timestamp,
              GROUP_CONCAT( CASE ISNULL(file_server_type) WHEN 1 THEN 'NULL' ELSE file_server_type END ) AS fst
            FROM
              archibald_file
            GROUP BY
              fid, timestamp
            ORDER BY
              fid";
  }
  $res = db_query($sql);
  while ($row = $res->fetchAssoc()) {
    $fst = explode(',', $row['fst']);
    if (count($fst) > 1) {
      $sql_delete = FALSE;
      // print_r($row);
      if( in_array('no', $fst) ){
        $sql_delete = "DELETE
          FROM
            archibald_file
          WHERE
            fid = " . $row['fid'] . "
          AND
            timestamp = " . $row['timestamp'] . "
          AND
            (file_server_type != 'no' OR file_server_type IS NULL)
        ";
        // echo "**NO**";
      }
      elseif ( in_array('archibald', $fst) ) {
        $sql_delete = "DELETE
          FROM
            archibald_file
          WHERE
            fid = " . $row['fid'] . "
          AND
            timestamp = " . $row['timestamp'] . "
          AND
            (file_server_type != 'archibald' OR file_server_type IS NULL)
        ";
        // echo "**ARCHIBALD**";
      }
      elseif ( in_array('educa', $fst) ) {
        $sql_delete = "DELETE
          FROM
            archibald_file
          WHERE
            fid = " . $row['fid'] . "
          AND
            timestamp = " . $row['timestamp'] . "
          AND
            (file_server_type != 'educa' OR file_server_type IS NULL)
        ";
        // echo "**EDUCA**";
      }
      if ($sql_delete){
        // echo "\n";
        // print_r($sql_delete);
        db_query($sql_delete);
      }
      // echo "\n\n\n";
    }
  }

  // Reset file server type to not permitted.
  db_update('archibald_file')
    ->fields(array(
      'file_server_type' => 'no',
    ))
    ->execute();
}

/*
  .##........#######..##.....##.......##........#######.
  .##.......##.....##.###...###.....####.......##.....##
  .##.......##.....##.####.####.......##.......##.......
  .##.......##.....##.##.###.##.......##.......########.
  .##.......##.....##.##.....##.......##.......##.....##
  .##.......##.....##.##.....##.......##...###.##.....##
  .########..#######..##.....##.....######.###..#######.
*/

/**
 * Implements hook_update_xxxx().
 *
 * Remove Copyright and other Restrictions
 */
function archibald_update_7251() {
  db_delete('role_permission')
    ->condition("permission", "archibald content field rights copyrightAndOtherRestrictions")
    ->condition("module", "archibald")
    ->execute();
}

/**
 * Implements hook_update_xxxx().
 *
 * Remove Coverages alltogether
 */
function archibald_update_7252() {
  db_truncate('archibald_general_coverage')->execute();
  db_truncate('archibald_coverage_list')->execute();
}

/**
 * Implements hook_update_XXXX;
 *
 * Creates new vocabularies for LOM-CH 1.1 and synchronize them with the ontology server.
 */
function archibald_update_7253() {
  $to_add = array(
    'mmd_cont_role',
    'rel_catalog',
    'rel_kind',
    'rights_cost',
    'typical_learning_time',
    'technical_format'
  );
  foreach ($to_add as $voc) {
    archibald_create_vocabulary(
      array(
        $voc,
        $voc,
        'LOMv1.1',
        'LOMv1.1',
        TRUE,
        FALSE
      )
    );
  }

  archibald_sync_taxonomy_os('lom-v1');
}

/**
 * Implements hook_update_XXXX;
 *
 * Relations db changes
 */
function archibald_update_7254() {
  if (db_driver() == 'pgsql') {
    try {
      db_drop_table( 'archibald_relations' );
      $sql = 'DROP SEQUENCE archibald_relations_relation_id_seq;';
      db_query($sql);
    } catch (Exception $e) {
      echo("****** SEQUENCE does not exist ******");
    }

    $sql = 'CREATE SEQUENCE archibald_relations_relation_id_seq START 1;';
    db_query($sql);

    db_drop_table( 'archibald_relations' );
    $sql = 'CREATE TABLE "public"."archibald_relations" (
      "lom_id" varchar(32),
      "lom_version" varchar(32),
      "relation_id" int4 DEFAULT nextval(\'archibald_relations_relation_id_seq\'::regclass) NOT NULL,
      "kind" varchar(180),
      "value" varchar(180),
      "catalog" varchar(180),
      "description" varchar(32)
    )
    WITH (OIDS=FALSE)';
    db_query($sql);

    db_add_primary_key("archibald_relations",
      array(
        'relation_id',
      )
    );

  } else {
    db_truncate('archibald_relations')->execute();
    db_drop_index('archibald_relations', 'relation_id_lom_id_lom_version');

    db_add_field('archibald_relations', 'value',
      array(
        'type' => 'varchar',
        'length' => 180,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The value of the relation',
      )
    );

    db_add_field('archibald_relations', 'catalog',
      array(
        'type' => 'varchar',
        'length' => 180,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The catalog of the relation (DOI, ISBN, URL etc.)',
      )
    );

    db_add_field('archibald_relations', 'description',
      array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The description of the relation',
      )
    );

    db_change_field('archibald_relations', 'relation_id', 'relation_id',
      array('type' => 'serial', 'not null' => TRUE),
      array('primary key' => array('relation_id'))
    );
  }
}

/**
 * Implements hook_update_XXXX;
 *
 * Technical->format db changes
 */
function archibald_update_7255() {
  db_add_field('archibald_technical', 'format',
    array(
      'type' => 'varchar',
      'length' => 180,
      'not null' => FALSE,
      'default' => NULL,
      'description' => 'Determines the mime-type of the description',
    )
  );

  db_drop_table( 'archibald_technical_formats' );
}

/**
 * Implements hook_update_XXXX;
 *
 * Technical->format db changes
 */
function archibald_update_7256() {
  db_add_field('archibald_education', 'typicalLearningTime',
    array(
      'type' => 'varchar',
      'length' => 180,
      'not null' => FALSE,
      'default' => NULL,
      'description' => 'learningTime Vocabulary',
    )
  );

  $sql = "SELECT
    education_id,
    CASE typicallearningtime_duration
      WHEN 'PT50M'
        THEN 'up_to_one_lesson'
      WHEN 'PT150M'
        THEN 'one_to_five_lessons'
      WHEN 'PT251M'
        THEN 'more_than_five_lessons'
      ELSE
        NULL
    END AS tlt
  FROM
    archibald_education
  WHERE
    LENGTH(typicallearningtime_duration) > 0";

  $res = db_query($sql);

  while ($row = $res->fetchAssoc()) {
    $sql = "UPDATE
      archibald_education
      SET
        typicallearningtime = '" . $row['tlt'] . "'
      WHERE
        education_id = " . $row['education_id'] . "
    ";
    db_query($sql);

    $sql = "INSERT INTO
      archibald_vocabulars
        (id, type, source, value)
      VALUES
        (" . $row['education_id'] . ", 'education:typicalLearningTime', 'LOM-CHv1.0', '" . $row['tlt'] . "')
    ";
    db_query($sql);

  }
  db_drop_field('archibald_education', 'typicallearningtime_duration');
  db_drop_field('archibald_education', 'typicallearningtime_description');
}

/**
 * Implements hook_update_XXXX;
 *
 * Technical->preview_image db changes
 */
function archibald_update_7257() {
  db_add_field('archibald_technical', 'preview_image_description',
    array(
      'type' => 'text',
      'not null' => FALSE,
      'default' => NULL,
      'description' => 'Determines the mime-type of the description',
    )
  );

  db_drop_table( 'archibald_technical_formats' );
}

/**
 * Implements hook_update_XXXX;
 *
 * Archibald Taxonomy fix
 */
function archibald_update_7258() {
  db_change_field('archibald_taxon', 'id', 'id',
    array(
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 100,
      'default' => NULL
    )
  );
}



/**
 * Implements hook_update_XXXX;
 *
 * Archibald fix technical -> size length
 */
function archibald_update_7259() {
  db_change_field('archibald_technical', 'size', 'size',
    array(
      'type' => 'int',
      'not null' => FALSE,
      'size' => 'big',
      'unsigned' => TRUE,
      'default' => NULL
    )
  );

  db_update('archibald_technical')
    ->fields(
      array(
        'size' => 0
      )
    )
    ->execute();
}


/**
 * Implements hook_update_XXXX;
 *
 * Archibald contribute role editor => publisher
 */
function archibald_update_7260() {
  db_update('archibald_contribute')
    ->fields(array(
      'role' => 'publisher',
    ))
    ->condition('role', 'editor', '=')
    ->execute();
  db_update('archibald_vocabulars')
    ->fields(array(
      'value' => 'publisher',
    ))
    ->condition('type', 'contribute:lifecycle', '=')
    ->condition(db_and()->condition('value', 'editor', '='))
    ->execute();
}



/**
 * Implements hook_update_XXXX;
 *
 * Archibald languages => allow codes > 4 digits/letters
 */
function archibald_update_7261() {
  db_change_field('archibald_general_languages', 'language', 'language',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'length' => 8,
      'default' => ''
    )
  );
}



/**
 * Implements hook_update_xxxx().
 *
 * Update some permissions
 *
 */
function archibald_update_7262() {
  $change_permissions = array(
    'archibald content field education learningResourceType' => 'archibald content field education learningResourceTypeDocumentary'
  );

  // update all permissions.
  $res = db_query("SELECT rid, permission, module FROM {role_permission} ");
  while ($row = $res->fetchAssoc()) {

    if (empty($change_permissions[$row['permission']])) {
      continue;
    }

    db_update('role_permission')
      ->fields(
        array(
          'permission' => $change_permissions[$row['permission']],
        )
      )
      ->condition('rid', $row['rid'], '=')
      ->condition('permission', $row['permission'], '=')
      ->condition('module', $row['module'], '=')
      ->execute();
  }

  $editor_role = user_role_load_by_name('archibald editor');
  user_role_grant_permissions($editor_role->rid, array('archibald content field technical preview_image_copyright_description'), 'archibald');
  user_role_grant_permissions($editor_role->rid, array('archibald content field education learningResourceTypePedagogical'), 'archibald');
  user_role_grant_permissions($editor_role->rid, array('archibald content field technical duration'), 'archibald');
  user_role_grant_permissions($editor_role->rid, array('archibald content field technical format'), 'archibald');
  user_role_grant_permissions($editor_role->rid, array('archibald content field technical size'), 'archibald');

  variable_set('archibald_field_require_type_technical_previewimagecopyrightdescription' , 1);
  variable_set('archibald_field_require_type_proposal_technical_previewimagecopyrightdescription' , 0);

  variable_set('archibald_field_require_type_education_learningresourcetypepedagogical' , 1);
  variable_set('archibald_field_require_type_proposal_education_learningresourcetypepedagogical' , 0);

  variable_set('archibald_field_require_type_technical_duration' , 0);
  variable_set('archibald_field_require_type_proposal_technical_duration' , 0);

  variable_set('archibald_field_require_type_technical_format' , 1);
  variable_set('archibald_field_require_type_proposal_technical_format' , 0);

  variable_set('archibald_field_require_type_technical_size' , 0);
  variable_set('archibald_field_require_type_proposal_technical_size' , 0);

  archibald_sync_taxonomy_os('lom-v1');

}

/**
 * Implements hook_update_xxxx().
 *
 * Update admin permissions
 *
 */
function archibald_update_7263() {
  $admin_role = user_role_load_by_name('administrator');
  if (!empty($admin_role->rid)) {
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical preview_image_copyright_description'), 'archibald');
    user_role_grant_permissions($admin_role->rid, array('archibald content field education learningResourceTypePedagogical'), 'archibald');
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical duration'), 'archibald');
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical format'), 'archibald');
    user_role_grant_permissions($admin_role->rid, array('archibald content field technical size'), 'archibald');
  }
}


/**
 * Implements hook_update_xxxx().
 *
 * Update lrt mappings
 *
 */
function archibald_update_7264() {
  db_update('archibald_education_learningresourcetype')
    ->fields(
      array(
        'learningresourcetype_id' => 'glossary',
      )
    )
    ->condition('learningresourcetype_id', 'reference', '=')
    ->execute();

  db_update('archibald_vocabulars')
    ->fields(
      array(
        'value' => 'glossary',
        'id' => 'glossary',
        'source' => 'LREv3.0'
      )
    )
    ->condition('value', 'reference', '=')
    ->execute();



  db_update('archibald_education_learningresourcetype')
    ->fields(
      array(
        'learningresourcetype_id' => 'application',
      )
    )
    ->condition('learningresourcetype_id', 'software', '=')
    ->execute();

  db_update('archibald_vocabulars')
    ->fields(
      array(
        'value' => 'application',
        'id' => 'application',
        'source' => 'LREv3.0'
      )
    )
    ->condition('value', 'software', '=')
    ->execute();



  db_update('archibald_education_learningresourcetype')
    ->fields(
      array(
        'learningresourcetype_id' => 'website',
      )
    )
    ->condition('learningresourcetype_id', 'Interactive document', '=')
    ->execute();

  db_update('archibald_vocabulars')
    ->fields(
      array(
        'value' => 'website',
        'id' => 'website',
        'source' => 'LREv3.0'
      )
    )
    ->condition('value', 'Interactive document', '=')
    ->execute();



  db_update('archibald_education_learningresourcetype')
    ->fields(
      array(
        'learningresourcetype_id' => 'summative evaluation',
      )
    )
    ->condition('learningresourcetype_id', 'assessment', '=')
    ->execute();

  db_update('archibald_vocabulars')
    ->fields(
      array(
        'value' => 'summative evaluation',
        'id' => 'summative evaluation',
        'source' => 'LOM-CHv1.1'
      )
    )
    ->condition('value', 'assessment', '=')
    ->execute();



  db_update('archibald_education_learningresourcetype')
    ->fields(
      array(
        'learningresourcetype_id' => 'presentation',
      )
    )
    ->condition('learningresourcetype_id', 'projection', '=')
    ->execute();

  db_update('archibald_vocabulars')
    ->fields(
      array(
        'value' => 'presentation',
        'id' => 'presentation',
        'source' => 'LREv3.0'
      )
    )
    ->condition('value', 'projection', '=')
    ->execute();

}

/**
 * Implements hook_update_xxxx().
 *
 * Update archibald_meta_metadata_identifier
 *
 */
function archibald_update_7265() {
  $results = db_select('archibald_lom', 'l')
    ->fields('l', array('lom_id', 'version'))
    ->condition('deleted', 1)
    ->orderBy('save_time', 'DESC')
    ->execute()
    ->fetchAll();

  foreach ($results AS $row) {
    ArchibaldLomSaveHandler::purge($row->lom_id, $row->version, TRUE);
  }

  // $query = "SELECT * FROM
  //   (
  //   SELECT entry, COUNT(entry) AS count_entries
  //     FROM archibald_meta_metadata_identifier
  //     GROUP BY meta_metadata_id, entry
  //   ) AS s
  //   WHERE
  //     s.count_entries > 1";
  // $res = db_query( $query );
  // while ($row = $res->fetchAssoc()) {
  //   print_r( $row );
  // }

  db_update('archibald_meta_metadata_identifier')
    ->fields(
      array(
        'catalog' => 'archibald'
      )
    )
    ->condition('catalog', 'educa', '=')
    ->execute();
}

/**
 * Implements hook_update_xxxx().
 *
 * Create new permission for Standard curriculum
 *
 */
function archibald_update_7266() {
  $admin_role = user_role_load_by_name('administrator');
  if (!empty($admin_role->rid)) {
    user_role_grant_permissions($admin_role->rid, array('archibald content field classification defaultCurriculum'));
  }

  $editor_role = user_role_load_by_name('archibald editor');
  if (!empty($editor_role->rid)) {
    user_role_grant_permissions($editor_role->rid, array('archibald content field classification defaultCurriculum'));
  }

  variable_set('archibald_field_require_type_classification_defaultCurriculum' , 1);
  variable_set('archibald_field_require_type_proposal_classification_defaultCurriculum' , 0);
}

/**
 * Implements hook_update_xxxx().
 *
 * Fix uppercase issue for Standard curriculum
 *
 */
function archibald_update_7267() {
  variable_del('archibald_field_require_type_classification_defaultCurriculum');
  variable_del('archibald_field_require_type_proposal_classification_defaultCurriculum');
  variable_set('archibald_field_require_type_classification_defaultcurriculum' , 1);
  variable_set('archibald_field_require_type_proposal_classification_defaultcurriculum' , 0);
}

/**
 * Implements hook_update_xxxx().
 *
 * Reset file upload information, in order to migrate file uploads
 * to the new server when a revision to an existing description
 * is nationally published
 *
 */
function archibald_update_7268() {
  db_update('archibald_file')
    ->fields(
      array(
        'url' => NULL,
      )
    )
    ->execute();
}


/**
 * Implements hook_update_xxxx().
 *
 * Grant new permission for JSON export rights
 *
 */
function archibald_update_7269() {
  $admin_role = user_role_load_by_name('administrator');
  if (!empty($admin_role->rid)) {
    user_role_grant_permissions($admin_role->rid, array('export archibald content'));
  }

  $editor_role = user_role_load_by_name('archibald editor');
  if (!empty($editor_role->rid)) {
    user_role_grant_permissions($editor_role->rid, array('export archibald content'));
  }

  $publisher_role = user_role_load_by_name('archibald publisher');
  if (!empty($publisher_role->rid)) {
    user_role_grant_permissions($publisher_role->rid, array('export archibald content'));
  }
}


/**
 * Implements hook_update_xxxx().
 *
 * Set the new API address
 *
 */
function archibald_update_7270() {
  variable_set('archibald_api_url', 'https://dsb-api.educa.ch/v2');
}

