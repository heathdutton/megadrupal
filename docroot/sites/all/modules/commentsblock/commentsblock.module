<?php

/**
 * @file
 * Puts the comment form into a block and provides a default view for the
 * comments.
 * We can now easily sort stuff and add fields.
 *
 * Difference from 1.0. We now cache the contents in a variable instead of rendering them.
 * Concept taken from: http://drupal.org/project/comment_block
 */

/**
 * Implements hook_menu().
 */
function commentsblock_menu() {
  $items['admin/config/user-interface/commentsblock'] = array(
    'title' => 'Comments Block',
    'description' => 'How to display the comments block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commentsblock_settings_form'),
    'access arguments' => array('administer comment blocks'),
    'file' => 'commentsblock.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commentsblock_permission() {
  return array(
    'administer comment blocks' => array(
      'title' => t('administer comment blocks'),
      'description' => t('Administer comment blocks'),
    ),
  );
}

/**
 * Implements hook_views_api().
 *
 * The view is automatically included via commentsblock_views_default_views()
 * if path is correct see docs:
 *
 * @link http://drupalcontrib.org/api/drupal/contributions--views--docs--views.api.php/function/hook_views_default_views/7
 */
function commentsblock_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commentsblock') . '/views',
  );
}

/**
 * Implements hook_view_alter().
 *
 * This will make room for your custom comment view or block by removing the regular
 * comment listing from the node body.
 *
 * @todo the unset is not a good solution? maybe difficulties with other modules?
 */

function commentsblock_node_view_alter(&$build) {
  comment_block_static_comments($build['#node']->nid, $build);
  unset($build['comments']);

  // Shows "Add comment" on the bottom of the node.
  $hidelink = variable_get('commentsblock_display_link', 0);
  if($hidelink == 1) {
   unset($build['links']['comment']);
  }
}

/**
 * Implements hook_block_info().
 */
function commentsblock_block_info() {
  $blocks = array();
  $blocks['comment_form_block'] = array(
    'info' => t('Comment form block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * We use a custom view for the comment display and put the block in a form
 * OR
 * We put form+comments in the form
 */
function commentsblock_block_view($delta) {
  $block = array();
  $display_option = variable_get('commentsblock_display', '');

  if ($delta == 'comment_form_block') {
    // Get the active menu object.
    if ($node = menu_get_object()) {
      // Make sure comments aren't closed.
      if (($node->comment !== 0) && (arg(2) == NULL)) {
        // Render the comments and comment form (access checks, etc. are done
        // by comment_node_page_additions()).
        $static_comments = comment_block_static_comments($node->nid, false, $node);
        $block['content'] = drupal_render($static_comments);
      }
    }
  }

/*  switch ($delta) {
    case 'comment_form_block':

      // Only nodes in page view.
      if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {

        $node = menu_get_object('node');

        // Display comments and form
        if ($node->comment == COMMENT_NODE_OPEN) {
          $block['subject'] = t('Post new comment');

          // Only display the form if user is allowed to post
          if ($display_option == 0 && user_access('post comments')) {
            //load only the form
            $block['content'] = drupal_get_form("comment_node_{$node->type}_form", (object) array('nid' => $node->nid));
          }
          else {
            //load form along with all comments
            $block['content'] = comment_node_page_additions($node);
          }
        }
        // Display comments without form
        else {
          if ($node->comment == COMMENT_NODE_CLOSED) {
            // load all comments (function checks if it should include form)
            $block['content'] = comment_node_page_additions($node);
          }
        }

      }
      break;
  }*/
  return $block;
}


/***************************************** HELPER ******************************/

/**
 * This breaks just about every rule in the book, but our choices are to either
 * rebuild the content or to have the node put the content into this static variable,
 * then retrieve it from the block view.
 * For sake of performance, we choose the static variable
 */
function comment_block_static_comments($nid, $build = false, $node = false) {
  $comments = &drupal_static(__FUNCTION__);

  if (isset($build['comments'])) {
    // @todo Would add $links above the comments title. Useful?
    // $comments[$nid]['links'] = $build['links']['comment'];
    $comments[$nid]['comments'] = $build['comments'];
  }
  else {
    // Normal behavior will be that the node calls this function before.
    if (!isset($comments[$nid])) {
      $comments[$nid]['links'] = '';
      if ($node) {
        $comments[$nid]['comments'] = comment_node_page_additions($node);
      }
    }
    return $comments[$nid];
  }

  // We remove the comments and only load the form if the user wants this.
  $comment_form_only = variable_get('commentsblock_display', 0);
  if ($comment_form_only == 1) {
    unset($comments[$nid]['comments']['comments']);
  }
}
