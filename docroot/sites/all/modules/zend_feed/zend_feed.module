<?php

/**
 * @file
 * 
 * @see http://framework.zend.com/
 */

/**
 * Indicates that autodiscovery is enabled.
 */
define('ZEND_FEED_AUTODISCOVERY_NORMAL', 1);

/**
 * Indicates that autodiscovery is disabled.
 */
define('ZEND_FEED_AUTODISCOVERY_DISABLED', 0);

/**
 * Minimum cache lifetime.
 */
define('ZEND_FEED_CACHE_LIFETIME', 3600);

/**
 * Implement hook_help().
 */
function zend_feed_help($path, $arg) {
  switch ($path) {
    case 'admin/help#zend_feed':
      return '<p>'. t("Uses the Zend Framework's Zend_Feed to download and parse feeds.") .'</p>';
    case 'admin/settings/zend/zend_feed':
      return '<p>'. t('Zend_Feed provides functionality for consuming RSS and Atom feeds.') .'</p>';
  }
}

/**
 * Implement hook_menu().
 */
function zend_feed_menu() {
  $items['admin/settings/zend/zend_feed'] = array(
    'title' => 'Zend_Feed',
    'description' => 'Control how Zend_Feed works.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zend_feed_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

function zend_feed_admin_settings() {
  $form['zend_feed_autodiscovery'] = array(
    '#type' => 'radios',
    '#title' => t('Disable/Enable autodiscovery'),
    '#default_value' => variable_get('zend_feed_autodiscovery', ZEND_FEED_AUTODISCOVERY_DISABLED),
    '#options' => array(
      ZEND_FEED_AUTODISCOVERY_DISABLED => t('Disabled'), 
      ZEND_FEED_AUTODISCOVERY_NORMAL => t('Enabled')
    ),
    '#description' => t('Web pages often contain <link> tags that refer to feeds with content relevant to the particular page. Zend_Feed enables you to retrieve first feed referenced by a web page.'),
  );

  return system_settings_form($form);
}

/**
 * Implement hook_cron().
 *
 * Expire outdated cache entries.
 */
function zend_feed_cron() {
  cache_clear_all(NULL, 'cache_zend_feed');
}

/**
 * Implement hook_simpletest().
 */
function zend_feed_simpletest() {
  $tests = file_scan_directory(drupal_get_path('module', 'zend_feed') .'/tests', '\.test');
  return array_keys($tests);
}

/**
 * Write a record to the database.
 *
 * @param unknown_type $url
 * @param unknown_type $etag
 * @param unknown_type $modified
 * @param unknown_type $alternate
 * @return unknown
 */
function zend_feed_write_record($url, $etag = '', $modified = 0, $alternate = '') {
  // Update.
  db_query("UPDATE {zend_feed} SET etag = '%s', modified = %d, alternate = '%s' WHERE url = '%s'", $etag, $modified, $alternate, $url);
  if (!db_affected_rows()) {
    // Insert.
    @db_query("INSERT INTO {zend_feed} (url, etag, modified, alternate) VALUES ('%s', '%s', %d, '%s')", $url, $etag, $modified, $alternate);
  }
}

/**
 * Read a record from the database.
 *
 * @param int $nid
 * @return unknown
 */
function zend_feed_read_record($url, $reset = FALSE) {
  static $records;
  
  if ($reset || !isset($records[$url])) {
    $result = db_query("SELECT * FROM {zend_feed} WHERE url = '%s'", $url);
    while ($row = db_fetch_array($result)) {
      $records[$url] = $row;
//      return $row;
    }
  }
  
  return isset($records[$url]) ? $records[$url] : FALSE;
}

function zend_feed_get_alternate($url) {
  if ($record = zend_feed_read_record($url)) {
    return $record['alternate'];
  }
  
  return FALSE;
}

/**
 * Enter description here...
 *
 * @param string $url
 * @return unknown
 */
function zend_feed_http_request($url) {
  $request_url = $url;
  
  // Generate conditional GET headers.
  $headers = array();
  $db_result = zend_feed_read_record($url);
  if ($db_result !== FALSE) {
    $headers['If-None-Match'] = $db_result['etag'];
    $headers['If-Modified-Since'] = gmdate('D, d M Y H:i:s', $db_result['modified']) .' GMT';
    if (valid_url($db_result['alternate'], TRUE)) {
      $request_url = (string) $db_result['alternate'];
    }
  }
  
  // Request feed.
  $result = drupal_http_request($request_url, $headers);
  
  // Process HTTP response code.
  switch ($result->code) {
    case 304: // Not modified.
      return $result;
    case 200: // OK
    case 301: // Moved permanently.
    case 302: // Moved temporarily.
    case 307: // Moved temporarily.
      $etag = empty($result->headers['ETag']) ? '' : $result->headers['ETag'];
      $modified = empty($result->headers['Last-Modified']) ? 0 : strtotime($result->headers['Last-Modified']);
      
//      if ($modified != $db_result['modified']) {
        // Update conditional GET headers data.
      zend_feed_write_record($url, $etag, $modified);
//      }
    	
      return $result;
      
    default:
      if (($result->code > 99) && ($result->code < 1000)) {
        // @todo Output should be more user friendly.
        watchdog('zend_feed', 'Feed %url: HTTP code: %code, error: %error', array('%url' => $url, '%code' => $result->code, '%error' => $result->error), WATCHDOG_WARNING);
      }
  }
  
  return FALSE;
}

/**
 * Import feed from URL. Supports autodiscovery.
 * 
 * @param string $url
 * @return Zend_Feed_Abstract
 */
function zend_feed_import($url, $retry = 1) {
  // Ensure that the URL is valid.
  if (!valid_url($url, TRUE)) {
    return FALSE;
  }
  
  $hash = md5($url);
  
  /**
   * Download.
   */
  if ($cache = cache_get('zend_feed:'. $hash, 'cache_zend_feed') && !empty($cache->data)) {
    $result = $cache->data;
  }
  else {
    // Request.
    $result = zend_feed_http_request($url);
  }
  
  // Process HTTP response data.
  if ($result && !empty($result->data)) {
    zend_require('Zend/Feed.php');
    
    try {
      $zend_feed = Zend_Feed::importString($result->data);
      if ($cache == 0) {
        cache_set('zend_feed:'. $hash, $result, 'cache_zend_feed', time() + ZEND_FEED_CACHE_LIFETIME);
      }
      return $zend_feed;
    }
    catch (Exception $e) {
      // Feed import failed. Continue execution.
    }
      
    /**
     * Autodiscovery.
     */
        
    if ($retry <= 0) {
      return FALSE;
    }

    // Parse the contents for appropriate <link ... /> tags.
    $pattern = '~(<link[^>]+)/?>~i';
    $preg_result = @preg_match_all($pattern, $result->data, $matches);
    if ($preg_result === FALSE) {
      return FALSE;
    }
    
    // Try to fetch a feed from first link tag that appears to refer to a feed.
    if (isset($matches[1]) && count($matches[1]) > 0) {
      foreach ($matches[1] as $link) {
        // Force string to be an utf-8 one.
        if (!mb_check_encoding($link, 'UTF-8')) {
          $link = mb_convert_encoding($link, 'UTF-8');
        }
        $xml = @simplexml_load_string(rtrim($link, ' /') .' />');
        if ($xml === FALSE) {
          continue;
        }
        $attributes = $xml->attributes();
        if (!isset($attributes['rel']) || !@preg_match('~^(?:alternate|service\.feed)~i', $attributes['rel'])) {
          continue;
        }
        if (!isset($attributes['type']) || !@preg_match('~^application/(?:atom|rss)\+xml~', $attributes['type'])) {
          continue;
        }
        if (!isset($attributes['href'])) {
          continue;
        }
        
        $alt_url = (string) $attributes['href'];
        if (!valid_url($alt_url, TRUE)) {
          $uri = parse_url($url);
          // Canonize the url.
          if (substr($alt_url, 0, 1) != '/') {
            // Add the current root path to this one.
            $alt_url = rtrim($uri['path'], '/') .'/'. $alt_url;
          }
          $alt_url = $uri['scheme'] .'://'. $uri['host'] .'/'. $alt_url;
        }
        
        $zend_feed = zend_feed_import($alt_url, --$retry);
        if ($zend_feed !== FALSE) {
//          cache_set('zend_feed:'. md5($alt_url), 'cache_zend_feed', serialize($result), time() + ZEND_FEED_CACHE_LIFETIME);
          db_query("UPDATE {zend_feed} SET alternate = '%s' WHERE url = '%s'", $alt_url, $url);
          return $zend_feed;
        }
      }
    }
  }
  
  return FALSE;
}
