<?php

/**
 * Implements hook_menu().
 */
function manticore_menu() {
  $items = array();

  $items['admin/config/services/manticore'] = array(
    'title' => 'Manticore',
    'access arguments' => array('administer manticore'),
    'description' => 'Configure how Manticore integrates on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manticore_admin'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'manticore.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function manticore_help($path, $args) {
  $output = '';
  switch ($path) {
    case 'admin/help#manticore':
      $output .= '<p>' . t('Allows user integration with <a href="@manticore">Manticore</a>. ', array('@manticore' => 'http://manticoretechnologies.com')) . '</p>';
      break;

    case 'admin/config/services/manticore':
      $output .= '<p>' . t('Provide the fields below to allow users to be syncronized between your site and Manticore.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function manticore_permission() {
  return array(
    'administer manticore' => array(
      'title' => t('administer manticore'),
      'description' => t('TODO Add a description for \'administer manticore\''),
    ),
  );
}

/**
 * Implements hook_library().
 */
function manticore_library() {
  // Download tracking library for Manticore.
  $filetypes = variable_get('manticore_downloadtracking_filetypes', 'pdf,txt,zip,tar,gz');
  $types = explode(',', $filetypes);
  $libraries['manticore'] = array(
    'title' => 'Manticore',
    'website' => 'http://manticoretechnology.com',
    'version' => '1.0',
    'js' => array(
      // The JavaScript file.
      drupal_get_path('module', 'manticore') . '/manticore.js' => array(),
      // The JavaScript settings.
      array(
        'data' => array('manticore' => $types),
        'type' => 'setting',
      ),
    ),
  );
  return $libraries;
}

/**
 * Creates the Manticore API instance.
 */
function manticore_api() {
  static $manticore = NULL;
  if (!isset($manticore)) {
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'manticore') . '/manticore.php';
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'manticore') . '/manticore.drupal.php';

    // Get the key, group and id values for use in the Manticore API.
    $key = variable_get('manticore_key', '');
    $group = variable_get('manticore_group', '');
    $id = variable_get('manticore_id', '');
    // These are required values.
    if (empty($key) || empty($group) || empty($id)) {
      $manticore = FALSE;
    }
    else {
      $manticoremethod = variable_get('manticore_method', 'ManticoreDrupal');
      $manticore = new $manticoremethod($key, $group, $id);
    }
  }
  return $manticore;
}

/**
 * Make a call to the Manticore API.
 */
function manticore_call(array $parameters = array()) {
  // Call the Manticore API.
  $manticore = manticore_api();
  if ($manticore == FALSE) {
    watchdog('manticore', 'The Manticore module is configured incorrectly. Please visit the administration settings.', array(), WATCHDOG_ERROR);
    return;
  }

  // Call the Manticore API.
  try {
    $data = $manticore->call($parameters);
    watchdog('manticore', 'Made a successful request to the Manticore API.<br /><strong>Parameters:</strong><pre>!parameters</pre><br /><strong>Data:</strong><pre>!data</pre>', array(
      '!parameters' => print_r($parameters, TRUE),
      '!data' => print_r($data, TRUE),
    ));
    return TRUE;
  }
  catch (ManticoreException $exception) {
    $message = 'Manticore #@code: %exception<br /><strong>Info:</strong><pre>!info</pre><br /><strong>Data:</strong><pre>!data</pre>';
    $variables = array(
      '%exception' => $exception->getMessage(),
      '@code' => $exception->code,
      '!info' => print_r($exception->info, TRUE),
      '!data' => print_r($exception->data, TRUE),
    );
    watchdog('manticore', $message, $variables, WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Implements hook_init().
 */
function manticore_init() {
  // Download tracking code.
  if (variable_get('manticore_downloadtracking')) {
    drupal_add_library('manticore', 'manticore');
  }
}

/**
 * Implementation of hook_page_alter().
 */
function manticore_page_alter(&$page) {
  // Inject the installation code if desired.
  if (variable_get('manticore_installationcode', FALSE)) {
    $file = variable_get('manticore_applicationfile_filepath', '');
    $group = variable_get('manticore_group', '');
    $id = variable_get('manticore_id', '');
    $key = variable_get('manticore_key', '');
    if (!empty($file) && !empty($group) && !empty($id) && !empty($key)) {
      $file = file_create_url($file);
      $output = <<<EOT
<!--Begin Manticore Technology Code-->
<!--Copyright 2000-2010, Manticore Technology Corporation.  All rights reserved.  Patent pending.-->
<!--Consumer Privacy Statement available at www.ManticoreTechnology.com/ConsumerPrivacy.asp-->
<!--www.ManticoreTechnology.com-->
<script language="JavaScript">
//<!--
  var MTC_GROUP="$group";
  var MTC_ID="$id";
  var MTC_Key="$key";
//-->
</script>
<script language="JavaScript">var MTCjsv;</script>
<script language="JavaScript1.0">MTCjsv="1.0";</script>
<script language="JavaScript1.1">MTCjsv="1.1";</script>
<script language="JavaScript1.2">MTCjsv="1.2";</script>
<script language="JavaScript1.3">MTCjsv="1.3";</script>
<script language="JavaScript1.4">MTCjsv="1.4";</script>
<script language="JavaScript1.5">MTCjsv="1.5";</script>
<script language="JavaScript1.6">MTCjsv="1.6";</script>
<script language="JavaScript1.7">MTCjsv="1.7";</script>
<script language="JavaScript" src="$file"></script>
<script language="JavaScript">
//<!--
  mtcGO();
//-->
</script>
<!--End Manticore Technology Code-->
EOT;
      $page['page_bottom']['manticore'] = array(
        '#type' => 'markup',
        '#markup' => $output,
      );
    }
  }
}

/**
 * Returns an array of field names to be sent over to Manticore.
 *
 * @param $array
 *   Tells the function to return the fields as an array. If set to false,
 *   will return the string index of the values.
 */
function manticore_availablefields($array = TRUE) {
  static $fieldsarray = array();
  // The default available fields.
  $default = "EmailAddress|text\nFirstName|text\nLastName|text\nCompany|text\nTitle|text\nFax|text\nMobilePhone|text\nWorkPhone|text\nAddress1|text\nAddress2|text\nCity|text\nRegion|text\nPostalCode|text\nCountry|text";
  $string = variable_get('manticore_availablefields', $default);
  // Check if we are to return it as a string, or an array.
  if ($array) {
    // Use that staticly cached version, if it's available.
    if (!empty($fieldsarray)) {
      return $fieldsarray;
    }
    // Each field is a new line.
    $array = explode("\n", $string);
    foreach ($array as $field) {
      // Each field has a name and a type, seperated by a |.
      $info = explode('|', $field);
      $name = trim(isset($info[0]) ? $info[0] : '');
      $type = trim(isset($info[1]) ? $info[1] : 'text');
      // Only accept fields with proper names.
      if (!empty($name)) {
        $fieldsarray[$name] = $type;
      }
    }
    return $fieldsarray;
  }
  return $string;
}
