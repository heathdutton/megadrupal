<?php
/**
 * @file
 * @author - sherakama
 * Todo::::
 *
 *     4. Create global content type default settings
 *
 **/

DEFINE('CVM_FIELD_NAME', 'field_cvm_cvm'); // The fieldname to look for


/**
 * Implements hook_enable().
 * Create a field for use later
 */
function contextual_view_modes_enable() {

  // Need to tell drupal about my new field first :(.
  field_cache_clear();
  field_associate_fields('contextual_view_modes');

  // Check if our field is not already created.
  if (!field_info_field(CVM_FIELD_NAME)) {
    $field = array(
      'field_name' => CVM_FIELD_NAME,
      'type' => 'contextual_view_modes_cvm',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    $the_field = field_create_field($field);
  }

}



/**
 * Implements hook_menu().
 */
function contextual_view_modes_menu() {
  $items = array();

  $items['admin/structure/cvm'] = array(
    'title' => 'Contextual View Modes',
    'description' => 'Settings and configuration options for contextual view modes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextual_view_modes_settings'),
    'file' => 'contextual_view_modes.admin.inc',
    'access arguments' => array('administer cvm settings'),
  );

  return $items;
}


/**
 * Implementation of hook_perm().
 */
function contextual_view_modes_permission() {
  return array(
    'administer cvm settings' => array(
      'title' => t('Administer Contextual View Modes'),
      'description' => t('Allow administration of contextual view mode settings'),
      ),
    'set view modes per node' => array(
        'title' => t('Contextual View Modes Per Node'),
        'description' => t('Allow changing/setting contextual view mode per node'),
      )
    );
}


/**
 * Implements hook_field_info().
 */
function contextual_view_modes_field_info() {
  return array(
    'contextual_view_modes_cvm' => array(
      'label' => t('Contextual View Modes'),
      'description' => t('Allows users to select a view mode and a context to apply it on'),
      'settings' => array(),
      'instance_settings' => array(
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      ),
      'default_widget' => 'contextual_view_modes_widget',
      'default_formatter' => 'contextual_view_modes_no_output',
      'no_ui' => TRUE,
    ),
  );
}


/**
 * Implements hook_field_validate().
 */
function contextual_view_modes_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  // For storing the context keys. Con't have more then one use of the context.
  $found = array();

  foreach ($items as $delta => $item) {
    if (!empty($item['context']) && $item['context'] !== "none") {

      if (in_array($item['context'], $found)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'contextual_view_modes_invalid',
          'message' => t("Contextual View Mode Error: %itm context already in use!", array("%itm" => $item['context'])),
        );
      }

      $found[] = $item['context'];

    }
  }
}


/**
 * Implements hook_field_is_empty().
 */
function contextual_view_modes_field_is_empty($item, $field) {

  if (empty($item['context']) || $item['context'] == "none") {
    return TRUE;
  }

  if (empty($item['view_mode']) || $item['view_mode'] == "none") {
    return TRUE;
  }

  return FALSE;
}


/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have a formatter for this field
 *
 * @see field_example_field_formatter_view()
 */
function contextual_view_modes_field_formatter_info() {
  return array(
    'contextual_view_modes_default' => array(
      'label' => t('Default'),
      'field types' => array('contextual_view_modes_cvm'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function contextual_view_modes_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'contextual_view_modes_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
         // '#theme' => 'contextual_view_modes_theme_cvm_field',
          '#data' => $item['context'],
          '#markup' => contextual_view_modes_default_markup($entity_type, $entity, $field, $instance, $langcode, $items, $display),
         // '#some_setting' => $settings['some_settig'],
        );
      }
      break;
  }

  return $element;
}


/**
 * Returns the output for the field formatter
 * @param  [type] $entity_type [description]
 * @param  [type] $entity      [description]
 * @param  [type] $field       [description]
 * @param  [type] $instance    [description]
 * @param  [type] $langcode    [description]
 * @param  [type] $items       [description]
 * @param  [type] $display     [description]
 * @return string of HTML markup
 */
function contextual_view_modes_default_markup($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  if (empty($items)) {
    return t('No contextual view modes set.');
  }

  $data = array();
  foreach ($items as $k => $opts) {
    $data[] = t('When context') . " <strong>" . $opts['context'] . "</strong> " . t('is true display with view mode') . ": <strong>" . $opts['view_mode'] . "</strong>";
  }

  $output = theme_item_list(array(
    'items'       => $data,
    'type'        => 'ul',
    'title'       => "",
    'attributes'  => array()
    )
  );
  return $output;
}


/**
 * Implements hook_field_widget_info().
 */
function contextual_view_modes_field_widget_info() {
    return array(
    'contextual_view_modes_picker' => array(
      'label' => t('Contextual View Modes Picker'),
      'field types' => array('contextual_view_modes_cvm'),
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * [contextual_view_modes_field_widget_form description]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @param  [type] $field      [description]
 * @param  [type] $instance   [description]
 * @param  [type] $langcode   [description]
 * @param  [type] $items      [description]
 * @param  [type] $delta      [description]
 * @param  [type] $element    [description]
 * @return [type]
 */
function contextual_view_modes_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Get the available contexts for use in a select field.
  $contexts = array('none' => '- Pick a context -');
  $contexts += context_context_list();
  foreach ($contexts as $key => $name) {
    $contexts[$key] = ucwords(str_replace('_', " ", $name));
  }

  // Get the available view modes for use in a select field.
  $ds_modes = ds_entity_view_modes('node');
  $ds_modes_formatted = array('none' => '- None -');
  foreach ($ds_modes as $name => $values) {
    $ds_modes_formatted[$name] = ucwords(str_replace('_', " ", $values['label']));
  }

  //  //////////////////////////////////////////////////////////////////////////

  $default_context = isset($items[$delta]['context']) ? $items[$delta]['context'] : '';
  $default_view_mode = isset($items[$delta]['view_mode']) ? $items[$delta]['view_mode'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;

  $widget += array(
    '#type' => 'fieldset',
    '#element_validate' => array('contextual_view_modes_picker_validate'),
    '#delta' => $delta,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'contextual_view_modes') . '/contextual_view_modes.css'),
    ),
  );

  $widget['context'] = array(
    '#type' => 'select',
    '#title' => t("When this context: "),
    '#options' => $contexts,
    '#default_value' => $default_context,
  );

  $widget['view_mode'] = array(
    '#type' => 'select',
    '#title' => t("Use this view mode: "),
    '#options' => $ds_modes_formatted,
    '#default_value' => $default_view_mode,
  );

  $element = $widget;
  return $element;
}

/**
 * [contextual_view_modes_picker_validate description]
 * @param  [type] $element       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function contextual_view_modes_picker_validate($element, &$form_state) {
  $delta = $element['#delta']; // TODO: Isn't there a better way to find out which element?
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['cvm'])) {
    // TODO: Check to see if there are multiple settings for a context...
  }
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see field_example_field_validate()
 * @see form_error()
 */
function contextual_view_modes_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'contextual_view_modes_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * @param  $form  The form array
 * @param $form_state  The form state
 *
 */

function contextual_view_modes_form_node_form_alter(&$form, $form_state, $form_id) {

  $lang = $form['language']['#value'];
  $enabled_types = variable_get('cvm_enabled_content_types', array());
  $type = $form['type']['#value'];

  // We only want this to show up on enabled content types
  if(!in_array($type, $enabled_types)) {
    return;
  }

  $form['contextual_display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contextual View Modes Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 100,
  );


   // If there are global settings for this content type lets show the user here.
  $global_cvm = variable_get('cvm_global_content_type_modes', array());
  if (isset($global_cvm[$type])) {
    // There are global settings for this content type. Lets show the user.

    $data = array();
    foreach ($global_cvm[$type] as $context_name => $vm) {
      $data[] = t('The view mode: !vm is set for context: !c', array('!vm' => "<strong>" . $vm . "</strong>", "!c" => "<strong>" . $context_name . "</strong>"));
    }

    $form['contextual_display']['showntell'] = array(
      '#markup' => theme_item_list(array(
        'items' => $data,
        'type' => 'ul',
        'title' => t('Enabled Global Contextual View Modes'),
        'attributes' => array()
        )
      ),
    );

  }



  // Move all contextual view mode fields into the group.
  $fields = $form_state['field'];

  foreach ($fields as $field_name => $settings) {
    if ($settings[$lang]['field']['type'] == "contextual_view_modes_cvm") {
      $form['contextual_display'][$field_name] = $form[$field_name];
      unset($form[$field_name]);
    }
  }

}


/**
 * Alters the build one more time to support view modes per node with contexts
 * @param  $build  The build array that drupal_render() expects
 */
function contextual_view_modes_node_view_alter(&$build) {

  // To avoid an endless loop do this vvvvvv.
  static $call_once;
  $call_once++;
  if ($call_once >= 2) {
    return;
  }

  // Only work with nodes when on page view.
  $a0 = arg(0);
  $a1 = arg(1);
  if ($a0 !== "node" || !is_numeric($a1)) {
    return;
  }

  // Get current node.
  $node = $build['#node'];

  // If v is not set then we want to run our version of ds_extras display switch.
  if (isset($_GET['v'])) {
    // V is set. Dont eff with that.
    return;
  }

  // Check for the cvm field.
  if (!isset($node->{CVM_FIELD_NAME})) {
    return;
  }

  // Get all of the contexts that have a match.
  $contexts = context_active_contexts();

  // Loop through each context and see if this node has a view mode assigned
  // to a valid context.
  foreach ($contexts as $context_name => $context) {

    // Avoid php errors...
    if (empty($node->{CVM_FIELD_NAME}[$node->language])) {
      continue;
    }

    foreach ($node->{CVM_FIELD_NAME}[$node->language] as $k => $values) {
      if ($values['context'] == $context_name) {
        $node->ds_switch = $context_name;
        $build = node_view($node, $node->ds_switch);
        // Take only the first match.
        return;
      }
    }
  }

  // If we get here then there has not been a setting for this specific node.
  // Check to see if there is a global context we need to do.

  $global_cvm = variable_get('cvm_global_content_type_modes', array());
  if (isset($global_cvm[$node->type])) {
    // We found settings...

    foreach ($contexts as $context_name => $context) {
      if (isset($global_cvm[$node->type][$context_name])) {
        $node->ds_switch = $global_cvm[$node->type][$context_name];
        $build = node_view($node, $node->ds_switch);
        // Take only the first match.
        return;
      }
    }

  }

}

