<?php

/**
 * @file
 * Tests for plugins/FeedsArrayParser.inc
 */

/**
 * Test PHP Array parser.
 */
class FeedsArrayParserTestCase extends FeedsWebTestCase {
  
  public function setUp() {
  	parent::setUp(array('feeds_array_parser'));
  }
  
  public static function getInfo() {
    return array(
      'name' => 'Array parser',
      'description' => 'Import test for the native PHP array parser.',
      'group' => 'Feeds',
    );
  }

  /**
   * Run tests.
   */
  public function test() {
    $this->createImporterConfiguration('Array', 'array');
    $this->setPlugin('array', 'FeedsArrayParser');

    $this->addMappings('array',
      array(
        array(
          'source' => 'title',
          'target' => 'title',
          'unique' => FALSE,
        ),
        array(
          'source' => 'body',
          'target' => 'body',
          'unique' => FALSE,
        ),
        array(
          'source' => 'created',
          'target' => 'created',
          'unique' => FALSE,
        ),
         array(
          'source' => 'guid',
          'target' => 'guid',
          'unique' => TRUE,
        ),
      )
    );


    $path = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'feeds_array_parser') . '/tests/';
    $nid = $this->createFeedNode('array', $path . 'testdata.txt', 'Testing Array Parser');
    $this->assertText('Created 5 nodes');

    // Assert DB status.
    $count = db_query("SELECT COUNT(*) FROM {feeds_item} WHERE entity_type = 'node'")->fetchField();
    $this->assertEqual($count, 5, 'Accurate number of items in database.');

    // Check items against known content of feed.
    $items = db_query("SELECT * FROM {feeds_item} WHERE entity_type = 'node' AND feed_nid = :nid ORDER BY entity_id", array(':nid' => $nid));

    // Check first item.
    date_default_timezone_set('GMT');
    $item = $items->fetchObject();
    $node = node_load($item->entity_id);
    $this->assertEqual($node->title, 'Item one');
    $this->assertEqual($node->created, strtotime('2011-12-01'), 'Feed item one date is correct.');
    
    $item = $items->fetchObject();
    $node = node_load($item->entity_id);
    $this->assertEqual($node->title, 'Item two');
    $this->assertEqual($node->created, strtotime('2011-12-02'), 'Feed item two date is correct.');
    
    $item = $items->fetchObject();
    $node = node_load($item->entity_id);
    $this->assertEqual($node->title, 'Item three');
    $this->assertEqual($node->created, strtotime('2011-12-03'), 'Feed item three date is correct.');
    
    $item = $items->fetchObject();
    $node = node_load($item->entity_id);
    $this->assertEqual($node->title, 'Item four');
    $this->assertEqual($node->created, strtotime('2011-12-04'), 'Feed item four date is correct.');
    
    $item = $items->fetchObject();
    $node = node_load($item->entity_id);
    $this->assertEqual($node->title, 'Item five');
    $this->assertEqual($node->created, strtotime('2011-12-05'), 'Feed item five date is correct.');
    // Check for more items.
    $item = $items->fetchObject();
    $this->assertFalse($item, 'Correct number of feed items recorded.');
  }
}
