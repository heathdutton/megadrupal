<?php

require_once 'collectiveaccess_feeds.queue.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function collectiveaccess_feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_feeds_plugins().
 */
function collectiveaccess_feeds_feeds_plugins() {
  $info = array();
  $info['FeedsCollectiveAccessFetcher'] = array(
    'name' => 'CollectiveAccess Object Fetcher',
    'description' => 'Fetches CollectiveAccess objects.',
    'help' => 'CollectiveAccess objects will be fetched from a selected CollectiveAccess instance.',
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'FeedsCollectiveAccessFetcher',
      'file' => 'FeedsCollectiveAccessFetcher.inc',
      'path' => drupal_get_path('module', 'collectiveaccess_feeds') . '/plugins',
    ),
  );
  $info['FeedsCollectiveAccessParser'] = array(
    'name' => 'CollectiveAccess Object Parser',
    'description' => 'Parses CollectiveAccess objects',
    'help' => 'Fetched CollectiveAccess objects will be parsed to be imported',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsCollectiveAccessParser',
      'file' => 'FeedsCollectiveAccessParser.inc',
      'path' => drupal_get_path('module', 'collectiveaccess_feeds') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Implements hook_feeds_after_import().
 */
function collectiveaccess_feeds_feeds_after_import(FeedsSource $source) {
  // Remove processed items from queue
  if (isset($source->queued_items)) {
    collectiveaccess_feeds_delete_queue_items($source->id, array_keys($source->queued_items));
  }
}

/**
 * Get a list of available item parsers, based on type of content
 */
function collectiveaccess_feeds_get_item_parsers() {
  $parsers = array(
    'ca_objects' => 'CollectiveAccessObjectParser',
    'ca_entities' => 'CollectiveAccessEntityParser',
  );
  // allow other modules to extend this
  drupal_alter('collectiveaccess_feeds_item_parsers', $parsers);
  return $parsers;
}