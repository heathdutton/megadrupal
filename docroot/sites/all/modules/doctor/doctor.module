<?php
/**
 * @file
 * Doctor module file.
 */

// The cache name for the doctor listeners handlers.
define('DOCTOR_LISTENER_CACHE', 'doctor_listener_info');

// The cache name for the doctor listen item in the UI.
define('DOCTOR_LISTENER_CACHE_UI', 'doctor_listener_info_ui');

/**
 * Implements hook_menu_item().
 */
function doctor_menu() {
  $items['admin/config/development/doctor'] = array(
    'title' => 'Doctor settings',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('doctor_settings'),
    'access arguments' => array('doctor manage settings'),
    'description' => 'Manage settings for the doctor module.',
  );

  $items['admin/structure/doctor'] = array(
    'title' => 'Doctor ',
    'access arguments' => array('doctor manage bundles'),
  );

  $items['admin/structure/doctor'] = array(
    'title' => 'Doctor',
    'description' => 'Manage the bundles for the module Doctor.',
    'page callback' => 'doctor_bundles_manage',
    'access arguments' => array('doctor manage bundles'),
  );

  $items['admin/structure/doctor/add'] = array(
    'title' => 'Add a new bundle',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('doctor_bundle_form'),
    'access arguments' => array('doctor manage bundles'),
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (doctor_get_types() as $bundle) {
    $items['admin/structure/doctor/manage/' . $bundle->type] = array(
      'title' => $bundle->name,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('doctor_bundle_form', 4),
      'access arguments' => array('doctor manage bundles'),
    );

    $items['admin/structure/doctor/manage/' . $bundle->type .'/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('doctor_bundle_form', 4),
      'access arguments' => array('doctor manage bundles'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    );

    $items['admin/structure/doctor/manage/' . $bundle->type .'/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('doctor_bundle_delete', 4),
      'access arguments' => array('doctor manage bundles'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    );
  }

  $items['admin/reports/doctor']  = array(
    'title' => 'Doctor',
    'description' => 'Watch all of the doctor items.',
    'access arguments' => array('doctor display items'),
    'page callback' => 'doctor_view_items',
  );

  $items['doctor/%doctor/delete']  = array(
    'title' => 'Delete',
    'description' => 'Delete an item.',
    'access arguments' => array('doctor delete items'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('doctor_delete_item', 1),
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function doctor_admin_paths() {
  return array(
    'doctor/*' => TRUE,
  );
}

/**
 * Get all the doctor entity bundles available.
 *
 * @param $name
 *  The name of the bundle type. Optional.
 *
 * @return mixed
 *  The existed doctor entities type.
 */
function doctor_get_types($name = NULL) {
  $results = db_select('doctor_type')
    ->fields('doctor_type')
    ->execute()
    ->fetchAllAssoc('type');

  if (!empty($name)) {
    return isset($results[$name]) ? $results[$name] : array();
  }

  return $results;
}

/**
 * Create a new doctor bundle.
 *
 * @param $human_name
 *  The human readable name of the bundle.
 * @param $machine_name
 *  The machine name of the bundle.
 * @param $description
 *  The description of the bundle.
 *
 * @throws Exception
 */
function doctor_create_type($human_name, $machine_name, $description) {
  if (doctor_get_types($machine_name)) {
    throw new Exception(t('A doctor bundle with the name @name already exists.', array('@name' => $machine_name,)));
  }
  db_insert('doctor_type')
    ->fields(
      array(
        'type' => $machine_name,
        'name' => $human_name,
        'description' => $description,
      )
    )
    ->execute();
}

/**
 * Update a existed doctor bundle.
 *
 * @param $human_name
 *  The human readable name of the bundle.
 * @param $machine_name
 *  The machine name of the bundle.
 * @param $description
 *  The descriptions of the bundle.
 */
function doctor_update_type($human_name, $machine_name, $description) {
  db_update('doctor_type')
    ->fields(
      array(
        'name' => $human_name,
        'description' => $description,
      )
    )
    ->condition('type', $machine_name)
    ->execute();
}

/**
 * Implements hook_views_api().
 */
function doctor_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'doctor') . '/views',
  );
}

/**
 * Delete a doctor bundle.
 *
 * @param $type
 *  The doctor bundle to be deleted.
 */
function doctor_delete_type($type) {
  db_delete('doctor_type')
  ->condition('type', $type)
  ->execute();
}

/**
 * Implements hook_flush_caches().
 *
 * When flushing the cache, we need to add defined bundles via hooks.
 */
function doctor_flush_caches() {
  $information = module_invoke_all('doctor_bundle_info');

  foreach ($information as $bundle) {
    if (doctor_get_types($bundle['type'])) {
      continue;
    }

    doctor_create_type($bundle['name'], $bundle['type'], $bundle['description']);
  }
}

/**
 * Implements hook_doctor_bundle_info().
 */
function doctor_doctor_bundle_info() {
  return array(
    'doctor' => array(
      'name' => 'Doctor',
      'type' => 'doctor',
      'description' => 'Main doctor bundle.',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function doctor_theme() {
  return array(
    'doctor_admin_overview' => array(
      'variables' => array('bundle' => NULL),
    ),
  );
}

/**
 * Theme callback: build the row of the name, machine name and description.
 */
function theme_doctor_admin_overview($variables) {
  $bundle = $variables['bundle'];

  $output = check_plain($bundle->name);
  $output .= ' <small>' . t('(Machine name: @type)', array('@type' => $bundle->type)) . '</small>';
  $output .= '<div class="description">' . filter_xss_admin($bundle->description) . '</div>';

  return $output;
}

/**
 * Implements hook_permission(),
 */
function doctor_permission() {
  return array(
    'doctor manage settings' => array(
      'title' => t('Manage Doctor settings'),
      'description' => t('Allow for a user to change the settings of the module Doctor.'),
    ),
    'doctor manage bundles' => array(
      'title' => t('Manage doctor bundles'),
      'description' => t('Allow the user to manage the Doctor bundles.'),
    ),
    'doctor display items' => array(
      'title' => t('View doctor items'),
      'description' => t('Grant the user permission to view the doctor items via the UI.'),
    ),
    'doctor delete items' => array(
      'title' => t('Delete doctor items'),
      'description' => t('Grant the user permission to delete the doctor items via the UI.'),
    ),
  );
}

/**
 * Mange the settings of the Doctor module's
 */
function doctor_settings($form, $form_sate) {
  $description = 'Some items can be created when the doctor is not listening. Delete them before the docotor will listen again.';
  $description .= '<br />Default behavior will display all the items when the docotor is starting to listen.';
  $form['purge_muted_items'] = array(
    '#type' => 'checkbox',
    '#title' => t("Delete items when the doctor didn't listen"),
    '#description' => t($description),
    '#default_value' => variable_get('purge_muted_items'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_entity_info().
 */
function doctor_entity_info() {
  $return = array(
    'doctor' => array(
      'label' => t('Doctor'),
      'entity class' => 'doctorEntity',
      'controller class' => 'EntityAPIController',
      'base table' => 'doctor',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
    ),
  );

  foreach (doctor_get_types() as $bundle) {
    $return['doctor']['bundles'][$bundle->type] = array(
      'label' => $bundle->name,
      'admin' => array(
        'path' => 'admin/structure/doctor/manage/' . $bundle->type,
        'real path' => 'admin/structure/doctor/manage/' . str_replace('_', '-', $bundle->type),
        'access arguments' => array('doctor manage bundles'),
      ),
    );
  }

  return $return;
}

/**
 * Implements hook_entity_property_info().
 */
function doctor_entity_property_info() {
  $info = array();
  $properties = &$info['doctor']['properties'];

  $properties['data'] = array(
    'label' => t("Data"),
    'type' => 'unknown',
    'description' => t("The data of the listen item."),
    'setter callback' => 'doctor_entity_metadata_wrapper_data_setter_callback',
    'validation callback' => 'doctor_entity_metadata_wrapper_data_validation_callback',
    'schema field' => 'data',
  );

  return $info;
}

/**
 * Setter callback for the doctor data listen item.
 */
function doctor_entity_metadata_wrapper_data_setter_callback(&$data, $name, $value, $langcode, $type, $info) {
  $data->$name = $value;
}

/**
 * Validate function for the doctor data listen item. Each value that will be
 * set is fine due to the fact that before the saving to the DB the value
 * is getting serialized.
 */
function doctor_entity_metadata_wrapper_data_validation_callback() {
  return TRUE;
}

/**
 * Create a doctor listener item.
 *
 * @param $data
 *  Data that will be store in the doctor listener in the DB entry.
 * @param $time
 *  The time the item created.
 *
 * @return doctorEntity
 *  The entity object of the listener item.
 */
function doctor_create($data, $time = NULL) {
  $values = array(
    'data' => $data,
    'created' => $time == NULL ? time() : $time,
  );

  return entity_create('doctor', $values);
}

/**
 * Load a doctor item.
 *
 * @param $id
 *  The doctor item.
 *
 * @return doctorEntity
 *  The doctor item object.
 */
function doctor_load($id) {
  $results = entity_load('doctor', array($id));
  return reset($results);
}

/**
 * Load multiple doctor listen items.
 *
 * @param $ids
 *  List of IDs to load.
 *
 * @return doctorEntity
 *  List of doctor listen items.
 */
function doctor_load_multiple($ids) {
  return entity_load('doctor', $ids);
}

/**
 * Get all the listener items.
 *
 * @return doctorEntity
 *  List of doctor listen items.
 */
function doctor_items() {
  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'doctor')
    ->propertyOrderBy('created')
    ->propertyCondition('watched', 0)
    ->execute();

  if (empty($result['doctor'])) {
    return;
  }

  return doctor_load_multiple(array_keys($result['doctor']));
}

/**
 * Gather the handlers for the listeners.
 */
function doctor_listener_handler() {
  if ($cache = cache_get(DOCTOR_LISTENER_CACHE)) {
    $doctor_listener_handler = $cache->data;
  }
  else {
    // Collect all the doctor listeners handlers.
    $doctor_listener_handler = module_invoke_all('doctor_listener_info');

    // Let other modules to alter the module.
    drupal_alter('doctor_listener_info', $info);

    cache_set(DOCTOR_LISTENER_CACHE, $doctor_listener_handler, 'cache');
  }

  return $doctor_listener_handler;
}

/**
 * Display handler for the UI.
 */
function doctor_listener_handler_ui() {
  if ($cache = cache_get(DOCTOR_LISTENER_CACHE_UI)) {
    $doctor_listener_handler_ui = $cache->data;
  }
  else {
    // Collect all the doctor listeners handlers.
    $doctor_listener_handler_ui = module_invoke_all('doctor_listener_ui_info');

    // Let other modules to alter the module.
    drupal_alter('doctor_listener_ui_info', $info);

    cache_set(DOCTOR_LISTENER_CACHE_UI, $doctor_listener_handler_ui, 'cache');
  }

  return $doctor_listener_handler_ui;
}

/**
 * Purge all the muted items.
 */
function doctor_purge_muted_items() {
  $items = doctor_items();

  if (!$items) {
    return;
  }

  foreach ($items as $item) {
    $item->delete();
  }
}

/**
 * Manage the bundles.
 */
function doctor_bundles_manage() {
  $headers = array(
    t('Name'),
    array('data' => t('Options'), 'colspan' => module_exists('field_ui') ? 3 : 2),
  );

  $data = array();

  $bundles = doctor_get_types();
  if (empty($bundles)) {
    $data[] = array(
      array('data' => t("There are no bundles available"), 'colspan' =>  module_exists('field_ui') ? 4 : 3),
    );
  }
  else {

    foreach ($bundles as $i => $bundle) {
      $data[$i] = array(
        array('data' => theme('doctor_admin_overview', array('bundle' => $bundle)), 'width' => '70%'),
        array('data' => l(t('Edit'), 'admin/structure/doctor/manage/' . $bundle->type . '/edit'), 'width' => '10%'),
        array('data' => l(t('Delete'), 'admin/structure/doctor/manage/' . $bundle->type . '/delete'), 'width' => '10%'),
      );

      if (module_exists('field_ui')) {
        $data[$i][] = array('data' => l(t('Manage fields'), 'admin/structure/doctor/manage/' . $bundle->type . '/fields'), 'width' => '10%');
      }
    }
  }

  $output = theme('table', array('header' => $headers, 'rows' => $data));

  return $output;
}

/**
 * Form for adding a new bundle.
 */
function doctor_bundle_form($form, &$form_state, $type = NULL) {
  if ($type) {
    $info = doctor_get_types($type);
    $name = $info->name;
    $machine = $info->type;
    $description = $info->description;
    $form_state['op'] = 'edit';
  }
  else {
    $name = '';
    $machine = '';
    $description = '';
    $form_state['op'] = 'create';
  }
  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => $name,
    '#description' => t('The human readable name of the entity type.'),
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => $machine,
    '#maxlength' => 32,
    '#machine_name' => array(
      'exists' => 'doctor_get_types',
    ),
    '#description' => t('A machine readable name of the entity type.'),
  );

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('A short description about the new entity type.'),
    '#required' => TRUE,
    '#default_value' => $description,
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
    'cancel' => array(
      '#markup' => l(t('Cancel'), 'admin/structure/doctor'),
    ),
  );

  return $form;
}

/**
 * Adding a new Doctor entity bundle.
 */
function doctor_bundle_form_submit($form, &$form_state) {
  if ($form_state['op'] == 'edit') {
    $function_name = 'doctor_update_type';
    $message = t('The doctor bundle @name has updated successfully.', array(
      '@name' => $form_state['values']['name'],
    ));
  }
  else {
    $function_name = 'doctor_create_type';
    $message = t('The doctor bundle @name has created successfully.', array(
      '@name' => $form_state['values']['name'],
    ));
  }
  $function_name($form_state['values']['name'], $form_state['values']['type'], $form_state['values']['description']);
  $form_state['redirect'] = 'admin/structure/doctor';
  drupal_set_message($message);

  // Clear all the caches after creating a new bundle.
  drupal_flush_all_caches();
}

/**
 * Deleting the bundle.
 */
function doctor_bundle_delete($form, &$form_state, $type) {
  // When the bundle is exported - display a message to the user.
  $information = module_invoke_all('doctor_bundle_info');

  foreach ($information as $exported_bundles) {
    if ($exported_bundles['type'] == $type) {
      drupal_set_message(t("This bundle is already exported via code. Deleting this bundle won't be affected."), 'error');
    }
  }

  $bundle = doctor_get_types($type);
  $form_state['bundle'] = $bundle;

  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure you want to delete the bundle %title?',
      array('%title' => $bundle->name)),
    'admin/structure/doctor',
    t('Are you sure you want to delete the bundle? This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * Deleting the bundle submit handler.
 */
function doctor_bundle_delete_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#type']) {
    doctor_delete_type($form_state['bundle']->type);

    $form_state['redirect'] = 'admin/structure/doctor';
    drupal_set_message(t('The bundle @name deleted successfully', array(
      '@name' => $form_state['bundle']->name,
    )));
  }

  // Clear all the caches after deleting a bundle.
  drupal_flush_all_caches();
}

/**
 * Implements hook_features_api().
 */
function doctor_features_api() {
  return array(
    'doctor' => array(
      'name' => t('Doctor bundles'),
      'feature_source' => TRUE,
      'default_hook' => 'doctor_bundle_info',
    ),
  );
}

/**
 * Implements hook_features_export_options().
 */
function doctor_features_export_options() {
  $names = array();

  foreach (doctor_get_types() as $bundle) {
    $names[$bundle->type] = $bundle->name;
  }

  return $names;
}

/**
 * Implements hook_features_export().
 */
function doctor_features_export($data, &$export, $module_name = '') {
  $pipe = array();
  $bundles = doctor_get_types();

  foreach ($bundles as $bundle) {
    // Verify that the user did ask to export this bundle type.
    if (!in_array($bundle->type, $data)) {
      continue;
    }

    $export['features']['doctor'][$bundle->type] = $bundle->type;
    $export['dependencies']['doctor'] = 'doctor';
    $export['dependencies']['features'] = 'features';

    $fields = field_info_instances('doctor', $bundle->type);
    foreach ($fields as $name => $field) {
      $pipe['field'][] = "doctor-{$field['bundle']}-{$field['field_name']}";
    }
  }

  return $pipe;
}

/**
 * Implements hook_features_export_render().
 */
function doctor_features_export_render($module, $data, $export = NULL) {
  $output = array();
  $output[] = '  $items = array(';
  foreach ($data as $type) {
    if (!$bundle = doctor_get_types($type)) {
      continue;
    }

    $bundle->name = str_replace("'", "\'", $bundle->name);
    $bundle->description = str_replace("'", "\'", $bundle->description);
    $output[] = "    '{$bundle->type}' => array(";
    $output[] = "      'name' => t('{$bundle->name}'),";
    $output[] = "      'type' => '{$bundle->type}',";
    $output[] = "      'description' => t('{$bundle->description}'),";
    $output[] = "    ),";
  }

  $output[] = '  );';
  $output[] = '  return $items;';
  $output = implode("\n", $output);
  return array('doctor_bundle_info' => $output);
}

/**
 * Implements hook_features_revert().
 *
 * @param $module
 * name of module to revert content for
 */
function doctor_features_revert($module = NULL) {
  if (!function_exists($module . '_doctor_bundle_info')) {
    return;
  }
  $bundles = call_user_func($module . '_doctor_bundle_info');

  foreach ($bundles as $bundle) {
    doctor_update_type($bundle['name'], $bundle['type'], $bundle['description']);
  }
}

/**
 * Implements hook_features_disable().
 *
 * @param $modules
 *  List of modules.
 */
function doctor_modules_enabled($modules) {
  doctor_module_enabled_disabled($modules);
}

/**
 * Implements hook_features_enable().
 *
 * @param $modules
 *  List of modules.
 */
function doctor_modules_disabled($modules) {
  doctor_module_enabled_disabled($modules);
}

/**
 * Flushing the cache if the given list of modules invoke the doctor bundle info
 * hook.
 *
 * @param $modules
 *  List of modules.
 */
function doctor_module_enabled_disabled($modules) {
  foreach ($modules as $module) {
    if (!function_exists($module . '_doctor_bundle_info')) {
      continue;
    }
    drupal_flush_all_caches();
  }
}

/**
 * Display a list of doctor items.
 */
function doctor_view_items() {
  $per_page = 25;
  $page = !isset($_GET['page']) ? 0 : $_GET['page'];

  // Build the query.
  $query = new entityFieldQuery();
  $query
    ->entityCondition('entity_type', 'doctor')
    ->range($page * $per_page, $per_page)
    ->propertyOrderBy('created', 'ASC');

  // Adding the type of the doctor items.
  if (isset($_GET['type'])) {
    $query->propertyCondition('type', $_GET['type']);
  }

  $result = $query
    ->execute();

  // Gather all the doctor items.
  $content = array();
  if (empty($result['doctor'])) {
    $content[] = array(
      array('data' => t('No data were found.'), 'colspan' => 5)
    );
  }
  else {
    // Get the total amount of doctor items.
    $query = new entityFieldQuery();
    $total = $query
      ->entityCondition('entity_type', 'doctor')
      ->count()
      ->execute();

    pager_default_initialize($total, $per_page);

    // Loop over the doctor items.
    $doctors = doctor_load_multiple(array_keys($result['doctor']));
    foreach ($doctors as $doctor) {

      // The first module that will return an output will win the privilege to
      // present his styled doctor item.
      if ($listeners = doctor_listener_handler_ui()) {
        foreach ($listeners as $listener) {
          if ($output = call_user_func($listener['callback'], $doctor->data)) {
            break;
          }
        }
      }

      $content[] = array(
        !empty($output) ? $output : print_r($doctor->data, TRUE),
        date('Y-m-d H:i', $doctor->created),
        l(t('Delete'), 'doctor/' . $doctor->id . '/delete'),
      );
    }
  }

  $output = '';

  // Displaying the table.
  $output .= theme('table', array(
    'header' => array(
      array('data' => t('Doctor items'), 'width' => '80%'),
      array('data' => t('Published on'), 'width' => '10%'),
      array('data' => t('Options'), 'width' => '10%'),
    ),
    'rows' => $content,
  ));

  $output .= theme('pager');

  return $output;
}

/**
 * Delete an item.
 */
function doctor_delete_item($form, &$form_state, $doctor) {
  $form_state['#entity'] = $doctor;

  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure to delete the doctor item %id',
      array('%id' => $doctor->id)),
    'admin/reports/doctor',
    t('Are you sure you want to delete the doctor item? This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * Deleting the sub theme submit handler.
 */
function doctor_delete_item_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#type']) {
    $form_state['#entity']->delete();

    $form_state['redirect'] = 'admin/reports/doctor';
    drupal_set_message(t('The doctor item %id has deleted successfully', array(
      '%id' => $form_state['#entity']->id,
    )));
  }
}
