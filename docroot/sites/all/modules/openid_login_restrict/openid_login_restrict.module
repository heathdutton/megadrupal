<?php

/* Implements hook_menu().
 */
function openid_login_restrict_menu() {
  $items['user/bypass'] = array(
    'title' => 'User Login',
    'page callback' => '_openid_login_restrict_bypass',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function openid_login_restrict_permission() {
  return array(
    'bypass openid login' => array(
      'title' => t('Bypass OpenID login restriction'),
    ),
    'access open id page' => array(
      'title' => t('Access all member OpenID pages'),
    ),
    'access own open id page' => array(
      'title' => t('Access own OpenID page'),
    ),
  );
}

/**
 * implemeents hook_form_alter()
 */
function openid_login_restrict_form_alter(&$form, &$form_state, $form_id) {

  if(!isset($_GET['bypass'])) {
 
    if ($form_id == 'user_login_block' || $form_id == 'user_login') {
      $restrict = variable_get('openid_login_restrict_openidfirst', 1);

      if ($restrict) {
        $form['#attached']['js'][] = drupal_get_path('module', 'openid_login_restrict') . '/openid_login_restrict.js';
      } 

      if (empty($form_state['input']['openid_identifier'])) {
        $form['#validate'] = array('openid_login_restrict_login_validate', 'user_login_name_validate', 'user_login_authenticate_validate', 'user_login_final_validate');
      }
    }

    if ($form_id == 'user_login' && $restrict == 2) {

      $form['openid_identifier'] = array(
        '#type' => 'hidden',
        '#value' => variable_get('openid_login_restrict_server', 1),
      );

      $form['openid_redirectnotice'] = array(
        '#markup' => variable_get('openid_login_restrict_redirect_message', t('Please wait while we redirect you to the login page.')),
        '#weight' => -3,
      );

      $form['#attached']['js'][] = drupal_get_path('module', 'openid_login_restrict') . '/openid_login_redirect.js';   
    } 
  }  
}

/**
 * Only allow users with bypass permission to log in normally
 */
function openid_login_restrict_login_validate($form, &$form_state) {
  $account = db_query("SELECT * FROM {users} WHERE name = :name AND status = 1", array(':name' => $form_state['values']['name']))->fetchObject();  

  if (!user_access('bypass openid login', $account)) {
    form_set_error('name', t('Please use OpenID to log in instead.'));
  }
}

/**
 * Implements hook_menu_alter().
 */
function openid_login_restrict_menu_alter(&$items) {
  $redirect = variable_get('openid_login_restrict_password_page', ''); 
  if (!empty($redirect)) {
    // Redirect password page to central server
    $items['user/password']['page callback'] = '_openid_login_restrict_password_page';
  } 

  // Restrict access to member's openid page
  $items['user/%user/openid']['access callback'] = '_openid_login_restrict_access';
  $items['user/%user/openid']['access arguments'] = array(1);
} 

function _openid_login_restrict_bypass() {
  drupal_goto('user', array('query' => array('bypass' => '1')));
}

/**
 * Member openid page access callback
 */
function _openid_login_restrict_access($member) {
   global $user; 
   return user_access('access open id page') || ($member->uid == $user->uid && user_access('access own open id page'));
}    

/**
 * Password page callback
 */
function _openid_login_restrict_password_page() {
  drupal_goto(variable_get('openid_login_restrict_password_page', ''));
}

/**
 * Add OpenID fieldset to user settings page.
 */
function openid_login_restrict_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {

  $form['openid_login_restrict'] = array(
    '#type' => 'fieldset',
    '#title' => t('OpenID login restriction settings'),
  );
  $form['openid_login_restrict']['openid_login_restrict_openidfirst'] = array(
    '#type' => 'radios',
    '#title' => t('What to display on the user login form and block:'),
    '#options' => array(
       0 => 'Display the normal Drupal user login form',
       1 => 'Display the OpenID login form',
       2 => 'Hide both forms, and redirect to a single OpenID server site (applies to login page only)',
     ),
    '#default_value' => variable_get('openid_login_restrict_openidfirst', 1),
  );  
  $form['openid_login_restrict']['openid_login_restrict_server'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenID server site'),
    '#description' => t('Use this if you want to use a single OpenID server as a common login server for a number of sites. If the \'Redirect to a single OpenID server site\' option is checked above, then this site will be used as OpenID identifier and all requests to the Drupal user form will be redirected here. Users with the \'Bypass OpenID login restriction\' can still log in at user/bypass. In order to be effective, the user login block should be disabled.'),
    '#default_value' => variable_get('openid_login_restrict_server', ''),
  ); 
  $form['openid_login_restrict']['openid_login_restrict_password_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect the \'Request new password\' link to an external password page:'),
    '#description' => t('If this field is empty, the link will direct to the normal Drupal password recovery page.'),
    '#default_value' => variable_get('openid_login_restrict_password_page', ''),
  ); 
  $form['openid_login_restrict']['openid_login_restrict_redirect_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message to display while page is being redirected to OpenID server'),
    '#default_value' => variable_get('openid_login_restrict_redirect_message', t('Please wait while we redirect you to the login page.')),
  );

}
