<?php
function hide_contextual_links_permission()
{
  return array(
      'administer contextual links' => array(
          'title' => t('Administer hidden contextual links'),
          'description' => t('Provides the ability to disable contextual links on a per block basis.'),
      ),
      'override hidden contextual links' => array(
          'title' => t('Override hidden contextual links'),
          'description' => t('Hiding a contextual link will have no effect for users with this permission. They will always see contextual links.'),
      ),
  );
}

function hide_contextual_links_form_alter(&$form, &$form_state, $form_id)
{
  // Retrieve the current setting for the block
  if ($form_id == 'block_admin_configure' && user_access('administer contextual links')) {
    $form['hide_contextual_links'] = array(
        '#type' => 'fieldset',
        '#title' => t('Contextual Links Visibility'),
        '#weight' => 100,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'visibility',
        '#tree' => TRUE,
    );
    $form['hide_contextual_links']['delta'] = array(
        '#type' => 'hidden',
        '#default_value' => $form['delta']['#value'],
        '#group' => 'visibility',
    );
    $form['hide_contextual_links']['type'] = array(
        '#type' => 'select',
        '#title' => t('Hide this block\'s contextual link'),
        '#options' => array('0' => 'Visible', '1' => 'Hidden', '2' => 'Hidden From All'),
        '#default_value' => hide_contextual_links_get_blocks_setting($form['delta']['#value']),
        '#group' => 'visibility',
    );
    $form['visibility']['#attached']['js'][] = drupal_get_path('module', 'hide_contextual_links') . '/hide_contextual_links.js';

    $form['#submit'][] = 'hide_contextual_links_block_form_submit';
  }

  if ($form_id == 'block_custom_block_delete') {
    $form['#submit'][] = 'hide_contextual_links_block_custom_block_delete_submit';
  }
}

function hide_contextual_links_block_form_submit($form, &$form_state)
{
  // Get the block id
  $delta = $form_state['build_info']['args'][1];

  // Get the currently stored setting
  $stored_setting = hide_contextual_links_get_blocks_setting($delta);

  // Get the submitted setting
  $submitted_setting = $form_state['values']['hide_contextual_links']['type'];

  if ($stored_setting && !$submitted_setting) {
    // There is a setting for this block already and the setting in the form is to disable it.
    // Delete the setting.
    db_delete('hide_contextual_links')
        ->condition('delta', $delta)
        ->execute();
  } else if ($stored_setting && $submitted_setting && $submitted_setting != $stored_setting) {
    // there is a setting for this block already, but the submitted value is different
    // Update the setting
    db_update('hide_contextual_links')
        ->fields(array(
            'type' => $submitted_setting,
        ))
        ->condition('delta', $delta)
        ->execute();
  } else if (!$stored_setting && $submitted_setting) {
    // there is no setting for this block yet, but there is a submitted value.
    // Insert the setting
    db_insert('hide_contextual_links')
        ->fields(array('delta' => $delta, 'type' => $submitted_setting))
        ->execute();
  }

  cache_clear_all('hide_contextual_links_data', 'cache');
}

/* When a block is deleted, delete it's matching delta in the "hide_contextual_links" table
 */
function hide_contextual_links_block_custom_block_delete_submit($form, &$form_state)
{
  $delta_deleted = db_delete('hide_contextual_links')
      ->condition('delta', $form_state['build_info']['args'][1])
      ->execute();

  cache_clear_all('hide_contextual_links_data', 'cache');
}

/**
 * Simple utility to retrieve the current blocks setting in the block's admin page.
 */
function hide_contextual_links_get_blocks_setting($delta)
{
  $result = db_query("SELECT type FROM {hide_contextual_links} WHERE delta = :delta", array(':delta' => $delta))->fetchCol(0);
  if (count($result)) {
    return $result[0];
  }
}

/**
 * Return TRUE if given block delta should be hidden and FALSE if visible.
 * Cache these settings in memory and the cache table because this function could be called many times in a page.
 */
function hide_contextual_links_is_hidden($block_delta)
{
  $settings = &drupal_static(__FUNCTION__);
  if (!isset($settings)) {
    if ($cache = cache_get('hide_contextual_links_data')) {
      $settings = $cache->data;
    } else {
      $result = db_query('SELECT * FROM {hide_contextual_links}');
      if ($result) {
        $settings = array();
        while ($row = $result->fetchAssoc()) {
          $settings[$row['delta']] = $row['type'];
        }
      }
      cache_set('hide_contextual_links_data', $settings, 'cache');
    }
  }


  // If this block is to be hidden at all
  if (array_key_exists($block_delta, $settings)) {
    if ($settings[$block_delta] == 2) {
      // If it is to be hidden from all users
      return true;
    } else {
      // Otherwise only hide if if the user DOES not have the override permission
      if (!user_access('override hidden contextual links')) {
        return true;
      }
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function hide_contextual_links_contextual_links_view_alter(&$element, $items)
{
  if (isset($element['#element']['#block']) && hide_contextual_links_is_hidden($element['#element']['#block']->delta)) {
    unset($element['#links']);
  }
}