<?php
/**
 * @file
 * Module installation.
 */
/**
 * Implements hook_update_N().
 */
function sign_for_acknowledgement_update_7200() {
  if (!module_exists('date')) {
    throw new Exception('Date module not found, please install and activate it!');
  }
  module_load_include('module', 'sign_for_acknowledgement');
  _sign_for_acknowledgement_reset_expirations();
}
/**
 * Implements hook_update_N().
 */
function sign_for_acknowledgement_update_7201() {
  module_load_include('module', 'sign_for_acknowledgement');
  _sign_for_acknowledgement_reset_alternate_form();
  $table = 'sign_for_acknowledgement';
  $fieldname = 'alternate';
  if (!db_field_exists($table, $fieldname)) {
    $field = array(
      'type' => 'varchar',
      'length' => 256,
      'not null' => TRUE,
      'default' => '',
      'description' => 'User selection in alternate form.',
    );
    db_add_field($table, $fieldname, $field);
  }
}
/**
 * Implements hook_update_N().
 */
function sign_for_acknowledgement_update_7204() {
  module_load_include('module', 'sign_for_acknowledgement');
  _sign_for_acknowledgement_reset_roles();
}
/**
 * Implements hook_update_N().
 */
function sign_for_acknowledgement_update_7205() {
  module_load_include('module', 'sign_for_acknowledgement');
  _sign_for_acknowledgement_reset_annotation_field();
  $table = 'sign_for_acknowledgement';
  $fieldname = 'annotation';
  if (!db_field_exists($table, $fieldname)) {
    $field = array(
      'type' => 'text',
      'size' => 'medium',
      'not null' => FALSE,
      'description' => 'User annotation any form.',
    );
    db_add_field($table, $fieldname, $field);
  }
}
/**
 * Implements hook_update_N().
 */
function sign_for_acknowledgement_update_7206() {
  module_load_include('module', 'sign_for_acknowledgement');
  _sign_for_acknowledgement_reset_users();
}
/**
 * Implements hook_update_N().
 */
function sign_for_acknowledgement_update_7207() {
  module_load_include('module', 'sign_for_acknowledgement');
  _sign_for_acknowledgement_reset_annotation_field();
}
/**
 * Implements hook_update_N().
 */
function sign_for_acknowledgement_update_7208() {
  module_load_include('module', 'sign_for_acknowledgement');
  _sign_for_acknowledgement_reset_views();
}
/**
 * Implements hook_enable().
 */
function sign_for_acknowledgement_enable() {
  _sign_for_acknowledgement_reset_views();
  _sign_for_acknowledgement_reset_expirations();
  _sign_for_acknowledgement_reset_alternate_form();
  _sign_for_acknowledgement_reset_roles();
  _sign_for_acknowledgement_reset_users();
  _sign_for_acknowledgement_reset_annotation_field();
}

/**
 * Implements hook_install().
 */
function sign_for_acknowledgement_install() {
  $t = get_t();
  drupal_set_message($t('"Sign for acknowledgement" settings are available under !link',
    array('!link' => l($t('Administer > Site configuration > People'), 'admin/config/people/acknowledge')))
  );
}
/**
 * Implements hook_schema().
 */
function sign_for_acknowledgement_schema() {
  $schema['sign_for_acknowledgement'] = array(
    'description' => 'Having read table.',
    'fields' => array(
      'hid'  => array(
        'description' => 'autoincremental index',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'node_id'  => array(
        'description' => 'node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'user_id' => array(
        'description' => 'user id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'mydate' => array(
        'description' => 'datestamp of the signature',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'alternate' => array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
        'description' => 'User selection in alternate form.',
      ),
      'annotation' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
        'description' => 'User annotation any form.',
      ),
    ),
    'primary key' => array('hid'),
  );

  return $schema;
}
/**
 * Implements hook_uninstall().
 */
function sign_for_acknowledgement_uninstall() {
  @field_delete_field('field_sfa_status');
  @field_delete_field('expire_date');
  @field_delete_field('alternate_form');
  @field_delete_field('alternate_form_text');
  @field_delete_field('enable_roles');
  @field_delete_field('enable_users');
  @field_delete_field('field_sfa_checkbox');
  @field_delete_field('annotation_field');
  @field_delete_field('annotation_field_required');
  variable_del('sign_for_acknowledgement_node_types');
  variable_del('sign_for_acknowledgement_firstname');
  variable_del('sign_for_acknowledgement_lastname');
  variable_del('sign_for_acknowledgement_limit');
  variable_del('sign_for_acknowledgement_weight');
  variable_del('sign_for_acknowledgement_do_sign');
  variable_del('sign_for_acknowledgement_is_signed');
  variable_del('sign_for_acknowledgement_is_expired');
  variable_del('sign_for_acknowledgement_marked');
  variable_del('sign_for_acknowledgement_warning');
  variable_del('sign_for_acknowledgement_data_sent');
  variable_del('sign_for_acknowledgement_show_submit');
  variable_del('sign_for_acknowledgement_block_expired');
  variable_del('sign_for_acknowledgement_alternate_request');
  variable_del('sign_for_acknowledgement_fields');
  variable_del('sign_for_acknowledgement_roles');
  variable_del('sign_for_acknowledgement_show_roles');
  variable_del('sign_for_acknowledgement_use_default_roles');
  variable_del('sign_for_acknowledgement_use_single_user');
  variable_del('sign_for_acknowledgement_checkbox_in_views');
}
