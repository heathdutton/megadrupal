<?php

/**
 * @file
 * Tests for username_reminder.module.
 */

/**
 * Tests requesting a username reminder.
 */
class UsernameReminderRequestReminderTestCase extends DrupalWebTestCase {

  /**
   * Gets info about the test case.
   */
  public static function getInfo() {
    return array(
      'name' => 'Request username reminder',
      'description' => 'Ensure that requesting a username reminder works as expected.',
      'group' => 'Username Reminder',
    );
  }

  /**
   * Sets up the test.
   */
  public function setUp() {
    parent::setUp('username_reminder');
  }

  /**
   * Tests requesting username for unknown e-mail address.
   */
  public function testUsernameReminderUnknownEmail() {
    $mail = 'foo@example.com';
    $edit = array('mail' => $mail);
    $this->drupalPost('user/username', $edit, t('E-mail your username'));
    $this->assertRaw(t('Sorry, %mail is not a recognized e-mail address.', array('%mail' => $mail)), 'Message indicates unknown e-mail address.');
  }

  /**
   * Tests requesting username for active account.
   */
  public function testUsernameReminderActiveAccount() {
    $account = $this->drupalCreateUser();
    $edit = array('mail' => $account->mail);
    $this->drupalPost('user/username', $edit, t('E-mail your username'));
    $this->assertText(t('Your username has been sent to your e-mail address.'), 'Message indicates username reminder sent.');
    $expected_email = array(
      'subject' => token_replace(t("[site:name] username reminder")),
      'body' => token_replace(t("Your username: [user:name]\n\n--  [site:name] team"), array('user' => $account)) . "\n",
    );
    $this->assertMail('subject', $expected_email['subject'], 'Sent e-mail subject matches expectation.');
    $this->assertMail('body', $expected_email['body'], 'Sent e-mail body matches expectation.');
  }

  /**
   * Tests requesting username for inactive account.
   */
  public function testUsernameReminderInactiveAccount() {
    $account = $this->drupalCreateUser();
    user_save($account, array('status' => 0));
    $edit = array('mail' => $account->mail);
    $this->drupalPost('user/username', $edit, t('E-mail your username'));
    $this->assertRaw(t('Sorry, %mail is not a recognized e-mail address.', array('%mail' => $account->mail)), 'Message indicates unknown e-mail address.');
  }

  /**
   * Tests customizing username reminder e-mail.
   */
  public function testCustomUsernameReminder() {
    // Customize e-mail.
    $admin = $this->drupalCreateUser(array('administer username reminder'));
    $this->drupalLogin($admin);
    $edit = array(
      'username_reminder_subject' => 'foo',
      'username_reminder_body' => 'bar: [user:name]',
    );
    $this->drupalPost('admin/config/people/username_reminder', $edit, t('Save configuration'));
    $this->assertRaw(t('The configuration options have been saved.'), t('Configuration saved.'));
    $this->drupalLogout();

    // Request username reminder.
    $account = $this->drupalCreateUser();
    $edit = array('mail' => $account->mail);
    $this->drupalPost('user/username', $edit, t('E-mail your username'));
    $this->assertText(t('Your username has been sent to your e-mail address.'), 'Message indicates username reminder sent.');
    $expected_email = array(
      'subject' => 'foo',
      'body' => token_replace("bar: [user:name]", array('user' => $account)) . "\n",
    );
    $this->assertMail('subject', $expected_email['subject'], 'Sent e-mail subject matches expectation.');
    $this->assertMail('body', $expected_email['body'], 'Sent e-mail body matches expectation.');
  }

}
