<?php

/**
 * @file
 * Provides form for requesting a username reminder.
 *
 * A user who has forgotten their username can enter their e-mail address into
 * the form, and if it matches an active account, the account username is
 * e-mailed to the e-mail address.
 *
 * The username is e-mailed instead of displayed on the site to prevent
 * username enumeration.
 *
 * This module duplicates some code from the user module, especially the
 * user_pass form.
 */

/**
 * Implements hook_permission().
 */
function username_reminder_permission() {
  return array(
    'administer username reminder' => array(
      'title' => t('Administer username reminder'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for user_login_block().
 *
 * Inserts link to username reminder form into user login block links.
 *
 * Unfortunately it seems necessary to duplicate code from user_login_block()
 * to do this.
 */
function username_reminder_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  $items = array();
  if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
    $items[] = l(t('Create new account'), 'user/register', array('attributes' => array('title' => t('Create a new user account.'))));
  }
  $items[] = l(t('Look up your username'), 'user/username', array('attributes' => array('title' => t('Look up your username using your e-mail address.'))));
  $items[] = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
  $form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
  return $form;
}

/**
 * Implements hook_menu().
 */
function username_reminder_menu() {
  $items['user/username'] = array(
    'title' => 'Look up your username',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('username_reminder_form'),
    // Only allow anonymous users to access the username reminder form.
    // Authenticated users should ordinarily know their username since they
    // ordinarily will have used it to log in.
    'access callback' => 'user_is_anonymous',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/people/username_reminder'] = array(
    'title' => 'Username reminder',
    'description' => 'Configure username reminder settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('username_reminder_settings_form'),
    'access arguments' => array('administer username reminder'),
    'file' => 'username_reminder.admin.inc',
  );
  return $items;
}

/**
 * Form constructor for username reminder form.
 *
 * @see username_reminder_form_validate()
 * @see username_reminder_form_submit()
 * @see user_pass()
 *
 * @ingroup forms
 */
function username_reminder_form() {
  $form['instructions'] = array(
    '#prefix' => '<p>',
    '#markup' => t('Complete the form below and an e-mail will be sent to you with your username.'),
    '#suffix' => '</p>',
  );
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#size' => 60,
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#required' => TRUE,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('E-mail your username'));
  return $form;
}

/**
 * Form validation handler for username_reminder_form().
 *
 * @see username_reminder_form_submit()
 * @see user_pass_validate()
 */
function username_reminder_form_validate($form, &$form_state) {
  $mail = trim($form_state['values']['mail']);
  $users = user_load_multiple(array(), array('mail' => $mail, 'status' => '1'));
  $account = reset($users);
  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('mail', t('Sorry, %mail is not a recognized e-mail address.', array('%mail' => $mail)));
  }
}

/**
 * Form submission handler for username_reminder_form().
 *
 * @see username_reminder_form_validate()
 * @see user_pass_submit()
 */
function username_reminder_form_submit($form, &$form_state) {
  global $language;
  $account = $form_state['values']['account'];
  $params['account'] = $account;
  $mail = drupal_mail('username_reminder', 'reminder', $account->mail, $language, $params);
  if (!empty($mail)) {
    watchdog('user', 'Username reminder mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
    drupal_set_message(t('Your username has been sent to your e-mail address.'));
  }
  $form_state['redirect'] = 'user';
}

/**
 * Implements hook_mail().
 */
function username_reminder_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('user' => $params['account']);
  switch ($key) {
    case 'reminder':
      $message['subject'] .= _username_reminder_text('subject', $language, $variables);
      $message['body'][] = _username_reminder_text('body', $language, $variables);
      break;
  }
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by username_reminder_mail() and the settings forms to retrieve strings.
 *
 * @see _user_mail_text()
 */
function _username_reminder_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('username_reminder_' . $key, FALSE)) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'subject':
        $text = t('[site:name] username reminder', array(), array('langcode' => $langcode));
        break;

      case 'body':
        $text = t("Your username: [user:name]\n\n--  [site:name] team", array(), array('langcode' => $langcode));
        break;
    }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array(
        'language' => $language,
        'sanitize' => FALSE,
        'clear' => TRUE,
      ));
  }

  return $text;
}
