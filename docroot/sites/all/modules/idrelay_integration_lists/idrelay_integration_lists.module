<?php
/**
 * @file
 * A block module that allows to subscribe to idrelay newsletters.
 * Id_relay_integration_lists
 *
 * PHP version 5
 *
 * @category Integration
 * @package  Integration
 * @link     drupal.org
 */

/**
 * Return the URI for an entity.
 *
 * Callback for hook_entity_info().
 *
 * @return array
 *   An associative array with element 'blocks'.
 */
function idrelay_integration_lists_block_info() {
  $blocks['idrelay_integration_lists'] = array(
    'info' => t('Idrelay Subscription Form'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Form constructor for the idrelay subscription form.
 *
 * @see idrelay_integration_lists_form_validate()
 * @see idrelay_integration_lists_form_submit()
 *
 * @ingroup forms
 */
function idrelay_integration_lists_form($form, &$form_state) {
  $form['idrelay_integration_lists_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#size' => 30,
    '#maxlength' => 60,
    '#description' => t('Your e-mail address'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );
  return $form;
}

/**
 * Implements hook_block_view().
 */
function idrelay_integration_lists_block_view($delta = '') {
  switch ($delta) {
    case 'idrelay_integration_lists':
      $block['subject'] = t('Subscribe to our Newsletter');
      if (user_access('access content')) {
        $block['content'] = drupal_get_form('idrelay_integration_lists_form');
      }
      break;

  }
  return $block;
}

/**
 * Form validation handler for idrelay_integration_lists_form().
 *
 * @see idrelay_integration_lists_form_submit()
 */
function idrelay_integration_lists_form_validate($form, &$form_state) {
  if ($form_state['values']['idrelay_integration_lists_email'] && !valid_email_address($form_state['values']['idrelay_integration_lists_email'])) {
    form_set_error('mail', t('The e-mail address you specified is not valid.'));
  }
  $alid  = variable_get('idrelay_integration_lists_alid');
  $email = $form_state["values"]["idrelay_integration_lists_email"];
  $data = '<recipient> <alid>' . $alid . '</alid>';
  $data .= '<idrhandle>' . $email . '</idrhandle>
<format>std</format> </recipient>';
  $response = _idrelay_integration_lists_get_responsecode($data);
  switch (_idrelay_integration_lists_parse_response($response)) {
    case "subscribed":
      form_set_error('', t("Your e-mail is already registered in our newsletter"));
      break;

    case "unsubscribed":
      drupal_set_message(t("Welcome back subscriber, we've missed you"));
      break;

    case "newcomer":
      drupal_set_message(t("Thanks for registering to our newsletters."));
      break;

  }
}
/**
 * Function _idrelay_integration_lists_xmlentities for the xmlstring.
 *
 * @param string $string
 *   The string will be passed and processed.
 *
 * @return string
 *   returns the new string
 */
function _idrelay_integration_lists_xmlentities($string) {
  return str_replace(
        array("&amp;", "&lt;", "&gt;", "&quot;", "&apos;"),
        array("&", "<", ">", "\"", "'"), $string
    );
}

/**
 * Function _idrelay_integration_lists_parse_response will look into the xml.
 *
 * @param stdClass $response 
 *   Is the xml we get back from id-relay api callback.
 *
 * @return string 
 *   will return, subscribed/unsubscribed/newcomer
 */
function _idrelay_integration_lists_parse_response($response) {
  if ($response->code != '200') {
    form_set_error('', t("Something went wrong, try again later."));
  }
  else {
    $string = htmlentities($response->data, ENT_QUOTES, "UTF-8");
    $string1 = _idrelay_integration_lists_xmlentities($string);
    $doc = simplexml_load_string($string1);
    if (!empty($doc->recipient)) {
      $subscribed = "subscribed";
      $subscribed_value = (string) $doc->recipient->xml->f1[0]->attributes()->$subscribed;
      if ($subscribed_value === "yes") {
        return "subscribed";
      }
      elseif ($subscribed_value === "no") {
        return "unsubscribed";
      }
    }
    return "newcomer";
  }
}

/**
 * Form submission handler for idrelay_integration_lists_form().
 *
 * @see idrelay_integration_lists_form_validate()
 */
function idrelay_integration_lists_form_submit($form, &$form_state) {
  $alid  = variable_get('idrelay_integration_lists_alid');
  $email = $form_state["values"]["idrelay_integration_lists_email"];
  $data  = '<recipient><alid>' . $alid . '</alid>';
  $data .= '<xml><f1>' . $email . '</f1>
</xml><subscribed>true</subscribed></recipient>';
  $content = _idrelay_integration_lists_get_responsecode($data);
  if ($content == "") {
    form_set_error('', t("Something went wrong, report this to our webmaster"));
  }
}

/**
 * Function will get a response code with the data from webservice.
 *
 * @param string $data
 *   Is the xml data you are sending
 *
 * @return stdClass
 *   It will returned a stdClass object.
 */
function _idrelay_integration_lists_get_responsecode($data) {
  $username = variable_get('idrelay_integration_lists_username');
  $password = variable_get('idrelay_integration_lists_password');
  $url = variable_get('idrelay_integration_lists_wsurl');
  $data_string = 'sLogin=' . $username . '&sPassword=' . $password . '&sData=' . $data;
  $options = array(
    'method'  => 'POST',
    'data'  => $data_string,
    'timeout'  => 15,
    'headers'  => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );
  // Send the request.
  $result = drupal_http_request($url, $options);
  return $result;
}

/**
 * Implements hook_menu() for idrelay_integration_menu().
 */
function idrelay_integration_lists_menu() {
  $items = array();
  $items['admin/config/content/idrelay_integration_lists'] = array(
    'title' => 'Idrelay Settings',
    'description' => 'Configuration for idrelay',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idrelay_integration_lists_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Form constructor for the idrelay settings form.
 *
 * @see idrelay_integration_lists_form_validate()
 * @see idrelay_integration_lists_form_submit()
 *
 * @ingroup forms
 */
function idrelay_integration_lists_settings_form($form, &$form_state) {
  $form['idrelay_integration_lists_wsurl'] = array(
    '#type' => 'textfield',
    '#title' => t('Idrelay Webservice URL'),
    '#default_value' => variable_get('idrelay_integration_lists_wsurl', 'http://api.idrelay.com'),
    '#description' => t('Your Webservice adress for getting recipient.'),
    '#required' => TRUE,
  );
  $form['idrelay_integration_lists_alid'] = array(
    '#type' => 'textfield',
    '#title' => t('Idrelay ALID'),
    '#default_value' => variable_get('idrelay_integration_lists_alid', 0000),
    '#size' => 4,
    '#maxlength' => 4,
    '#description' => t("Your ALID for Idrelay."),
    '#required' => TRUE,
  );
  $form['idrelay_integration_lists_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Idrelay Username'),
    '#default_value' => variable_get('idrelay_integration_lists_username', 'user01'),
    '#size' => 20,
    '#maxlength' => 20,
    '#description' => t("Provide your idrelay's username."),
    '#required' => TRUE,
  );
  $form['idrelay_integration_lists_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Idrelay password'),
    '#default_value' => variable_get('idrelay_integration_lists_password', 'pass01'),
    '#size' => 20,
    '#maxlength' => 20,
    '#description' => t("Provide your idrelay's password."),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}
