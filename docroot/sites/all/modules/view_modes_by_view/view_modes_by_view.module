<?php

/**
 * @file
 * Provides a list of View Modes as they are used in Views.
 */

/**
 * Implements hook_menu().
 */
function view_modes_by_view_menu() {
  $items = array();

  $items['admin/reports/view-modes/views'] = array(
    'title' => 'View Modes by View',
    'description' => 'Provides an overview of view modes as used in views.',
    'page callback' => 'view_modes_by_view_ui_field_list',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array('administer views'),
  );

  return $items;
}

/**
 * Provides a report of all instances of view modes used in all views.
 *
 * @see views_ui_field_list()
 */
function view_modes_by_view_ui_field_list() {
  $views = views_get_all_views();

  // Fetch all fieldapi fields which are used in views
  // Therefore search in all views, displays and handler-types.
  $view_modes = array();
  foreach ($views as $view) {
    foreach ($view->display as $display_id => $display) {
      // If this display has a view mode, add it to the list.
      if ($view_mode = view_modes_by_view_get_view_mode($display)) {
        $name = !empty($view->human_name) ? $view->human_name : $view->name;
        $name .= ': ' . $display->display_title;
        $view_modes[$view_mode][$view->name]['name'] = $name;
        $view_modes[$view_mode][$view->name]['display'] = $display_id;
      }
    }
  }

  $header = array(t('View mode'), t('Used in'));
  $rows = array();
  foreach ($view_modes as $view_mode => $views) {
    $rows[$view_mode]['data'][0] = check_plain($view_mode);
    foreach ($views as $key => $view) {
      $view_name = $view['name'];
      $view_display = $view['display'];
      $rows[$view_mode]['data'][1][] = l($view_name, "admin/structure/views/view/$key/edit/$view_display");
    }
    $rows[$view_mode]['data'][1] = implode(', ', $rows[$view_mode]['data'][1]);
  }

  // Sort rows by view mode.
  ksort($rows);
  $output = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No view modes have been used in any views yet.'),
  );

  return $output;
}

/**
 * Returns the view mode being used by this views display.
 *
 * @param array $display
 *    The Views display to check.
 * @return
 *    The machine name of the view mode, or false.
 */
function view_modes_by_view_get_view_mode($display) {
  if (isset($display->display_options)) {
    if (isset($display->display_options['row_options']['view_mode'])) {
      return $display->display_options['row_options']['view_mode'];
    }
    elseif (isset($display->display_options['row_options']['build_mode'])) {
      return $display->display_options['row_options']['build_mode'];
    }
    elseif (isset($display->display_options['row_plugin'])) {
      // Might be using the 'Content' row plugin provided by the node module.
      $plugin = views_get_plugin('row', $display->display_options['row_plugin']);
      if (isset($plugin->options['view_mode'])) {
        return $plugin->options['view_mode'];
      }
    }
  }
}
