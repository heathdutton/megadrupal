<?php

/**
 * Implements hook_element_info_alter().
 */
function single_date_time_element_info_alter(&$type) {
  if (isset($type['date_combo'])) {
    $type['date_combo']['#pre_render'][] = 'single_date_time_date_combo_pre_render';
    $type['date_combo']['#process'][] = 'single_date_time_combo_process';
  }
  if (isset($type['date_popup'])) {
    $type['date_popup']['#process'][] = 'single_date_time_date_popup_process';
  }
}

/**
 * Field process callback function.
 * 
 * @see single_date_time_element_info_alter().
 */
function single_date_time_combo_process(&$element, &$form_state, $form) {
  if(!isset($element['value2'])) {
    return $element;
  }
  $start_date = str_replace('-', '', substr($element['value']['#default_value'], 0, 10));
  $end_date = str_replace('-', '', substr($element['value2']['#default_value'], 0, 10));
  if ($start_date == $end_date) {
    $element['show_todate']['#default_value'] = FALSE;
  }

  return $element;
}

/**
 * Field pre_render callack function.
 * 
 * @see single_date_time_element_info_alter().
 */
function single_date_time_date_combo_pre_render(&$element) {
  // Add end time to start date, remove end date.
  if (single_date_time_check_if_enable($element)) {
    $element['value']['endtime'] = single_date_time_date_change_endtime($element['value2']['time']);

    $element['value']['endtime']['#title'] = t('End Time');
    $state_key = key($element['value2']['#states']['visible']);
    $state = array(
      'visible' => array(
        $state_key => array(
          'checked' => FALSE
        )
      )
    );

    if (empty($element['value']['endtime']['#states'])) {
      $element['value']['endtime']['#states'] = $state; //$element['value2']['#states'];
    }
  }
  //$element['value']['endtime']['#attributes']['class'] = array('hasTimeEntry', 'date-popup-init');
  return $element;
}

/**
 * Change the end date time value and make it as endtime value.
 * 
 * @see single_date_time_date_combo_pre_render().
 */
function single_date_time_date_change_endtime($date_time) {
  $replace_arrays = array('#parents', '#array_parents');
  foreach ($replace_arrays as $val) {
    // Replace the value2 to value.
    $key = array_search('value2', $date_time[$val], TRUE);
    $date_time[$val][$key] = 'value';
    // Replace time to endtime;
    $t_key = array_search('time', $date_time[$val], TRUE);
    $date_time[$val][$t_key] = 'endtime';
  }

  // Replace id.
  $date_time['#id'] = str_replace(array('value2', 'time'), array('value', 'endtime'), $date_time['#id']);
  // Replace name value.
  $date_time['#name'] = str_replace(array('value2', 'time'), array('value', 'endtime'), $date_time['#name']);
  //drupal_set_message("<pre>".print_r($date_time, true)."</pre>");
  return $date_time;
}

/**
 * Field process callback.
 * 
 * @see single_date_time_element_info_alter()
 */
function single_date_time_date_popup_process(&$element, &$form_state, $form) {
  $element_value = array(
    'value' =>
    array('#instance' => $element['#instance']
    )
  );
  if (single_date_time_check_if_enable($element_value)) {
    $parents = $element['time']['#parents'];
    if (array_search('value', $parents, TRUE)) {

      $granularity = date_format_order($element['#date_format']);
      $time_granularity = array_intersect($granularity, array('hour', 'minute', 'second'));
      $format = date_popup_format_to_popup_time(date_limit_format($element['#date_format'], $time_granularity), 'wvega');
      // drupal_set_message("<pre>".print_r($element, true)."</pre>");
      //   drupal_set_message("<pre>".print_r($element, true)."</pre>"); 
      $start_time = new DateObject($element['#default_value'], $element['#date_timezone'], DATE_FORMAT_DATETIME);
      date_increment_round($start_time, $element['#date_increment']);
      $start_time = $start_time->format(DATE_FORMAT_UNIX) * 1000;

      $settings = array(
        'show24Hours' => 1,
        'showSeconds' => FALSE,
        'timeSteps' => array(1, 15, 0),
        'spinnerImage' => '',
        'fromTo' => '',
      );
      $return_id = str_ireplace('timeEntry', 'endtimeEntry', $element['time']['#id']);
      $js_settings['datePopup'][$return_id] = array(
        'func' => 'timeEntry',
        'settings' => $settings
      );
      drupal_add_js($js_settings, 'setting');
      // drupal_set_message("<pre>".print_r($js_settings, true)."</pre>");
    }
  }
  return $element;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function single_date_time_field_widget_form_alter(&$element, &$form_state, $context) {
   $types = array(
     'date', 
     'datetime', 
     'datestamp'
     );
  if (in_array($context ['field']['type'], $types)) {
    $elm = array();
    $field_value = current($form_state['field'][$element['#field_name']]);
    $elm['value']['#instance'] = $field_value['instance'];
    //drupal_set_message("<pre>".print_r($element , true)."</pre>");
    if (single_date_time_check_if_enable($elm)) {
      array_unshift($element['#element_validate'], 'single_date_time_pre_validation');
    }
  }
}

/**
 * Field form validation callback.
 * 
 * @see single_date_time_field_widget_form_alter().
 */
function single_date_time_pre_validation($element, &$form_state) {

  $show_date = $startdate = $endtime = $enddate = $element['#parents'];
  $show_date[] = 'show_todate';
  $show_date_value = drupal_array_get_nested_value($form_state['values'], $show_date);
  if ($show_date_value) {
    return;
  }
  drupal_array_set_nested_value($form_state['values'], $show_date, 1);
  // $endtime = drupal_array_get_nested_value($form_state['input'], $endTime);
  // Replace showdate value in parents.
  // Get endtime value whuch we added field in the form.
  $endtime[] = 'value';
  // Get the start date value from input form_state array.
  $get_start_value = drupal_array_get_nested_value($form_state['input'], $endtime);

  $endtime[] = 'endtime';
  $endtime_value = drupal_array_get_nested_value($form_state['input'], $endtime);
  $endtime_time = strtotime($endtime_value);



  // Get start date
  $startdate[] = 'value';
  $startdate_value = drupal_array_get_nested_value($form_state['values'], $startdate);
  $start_time = substr($startdate_value, -5);
  $start_time = strtotime($start_time);
  $start_date = substr($startdate_value, 0, -5);
  $endfield_name = implode('][', $endtime);
  if (empty($endtime_time)) {
    form_set_error($endfield_name, t('End time is required.'));
  }
  //drupal_set_message("<pre>".print_r(implode('][', $endtime) , true)."</pre>");
  if ($start_time >= $endtime_time) {
    form_set_error($endfield_name, t('End time must be greater than start time.'));
  }
  $enddate[] = 'value2';
  $enddate_value = $start_date . ' ' . $endtime_value;
  drupal_array_set_nested_value($form_state['values'], $enddate, $enddate_value);

  $enddate[] = 'date';
  drupal_array_set_nested_value($form_state['input'], $enddate, $get_start_value['date']);
  // remove last date entry from array.
  array_pop($enddate);

  $enddate[] = 'time';
  drupal_array_set_nested_value($form_state['input'], $enddate, $endtime_value);
}

/**
 * Implements hook_date_field_widget_settings_form_alter().
 */
function single_date_time_date_field_widget_settings_form_alter(&$form, $context) {

  $field = $context['field'];
  $instance = $context['instance'];
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'date_popup' && !empty($field['settings']['todate'])) {
    // Add this module's widget settings.
    $form['single_date_time'] = array(
      '#type' => 'fieldset',
      '#title' => t('Single Date Endtime'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 8,
      '#fieldset' => 'date_format',
    );

    $form['single_date_time']['single_date_time'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show endtime for single day'),
      '#default_value' => !empty($settings['single_date_time']['single_date_time']),
      '#description' => t('Show the end time for for same date.'),
    );
  }
}

/**
 * Check the settings is enable or disabled.
 */
function single_date_time_check_if_enable($element) {
  if (isset($element['value']) && isset($element['value']['#instance'])) {
    $instance = $element['value']['#instance'];
    $widget = $instance['widget'];
    $settings = $widget['settings'];
    if (isset($settings['single_date_time']) && $settings['single_date_time']['single_date_time']) {
      return TRUE;
    }
  }
  return FALSE;
}
