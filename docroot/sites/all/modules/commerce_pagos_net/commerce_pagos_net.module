<?php

/**
 * @file
 * Implements Pagos Net Drupal Commerce checkout.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_pagos_net_libraries_info() {
  $libraries['nusoap'] = array(
    'name' => 'NuSOAP',
    'vendor url' => 'https://github.com/deviservi/nusoap',
    'download url' => 'https://github.com/deviservi/nusoap/archive/master.zip',
    'version arguments' => array(
      'file' => 'lib/nusoap.php',
      'pattern' => '/var \$version = \'([0-9\.]+)\'/',
      'lines' => 120,
    ),
    'files' => array(
      'php' => array('lib/nusoap.php'),
    ),
  );
  return $libraries;
}

/**
 * Function to consume cmeRegistroItem WS
 * @param type $datos
 * @param type $cuenta
 * @param type $webservice
 * @param type $consulta
 * @return type
 */
function wsRegistroPlan( $datos, $cuenta, $webservice, $consulta)
{
  libraries_load('nusoap');
  // new nusoap_client($webservice,'wsdl', $proxyhost, $proxyport, $proxyusername, $proxypassword);
  // Since we are not using a proxy we send false as parameters
  $client = new nusoap_client($webservice,'wsdl', false, false, false, false );
  $err = $client->getError();

  if ($err)
  {
    // Display the error
    echo '<h2>Constructor error</h2><pre>' . $err . '</pre>';
    // At this point, you know the call that follows will fail
  }

  $param = array(
  'datos' => $datos,
  'cuenta' => $cuenta);
  $result = $client->call($consulta, $param, '', '', true, true);
  return $result;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_pagos_net_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['pagos_net'] = array(
    'base' => 'commerce_pagos_net',
    'title' => t('Pagos Net'),
    'short_title' => t('PagosNet'),
    'description' => t('Implements Pagos Net in Drupal Commerce checkout.'),
    'terminal' => FALSE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,

    // Because the order form generation code does not have access to a payment
    // method info array, we set the bn directly there instead of making use of
    // this buttonsource variable. It's here for consistency with other payment
    // methods in this package.
    'buttonsource' => 'CommerceGuys_Cart_PPS',
  );

  return $payment_methods;
}

/**
 * Returns the default settings for Pagos Net payment method.
 */
function commerce_pagos_net_default_settings() {
  $default_currency = commerce_default_currency();

  return array(
    'webservice_name' => '',
    'server' => '',
    'cod_prefix' => 'ELDEBER',
    'cod_empresa' => '',
    'note' => '',
    'due_date' => '30',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_pagos_net_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_pagos_net_default_settings();

  $form['webservice_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Web Service name assigned by Pagos Net'),
    '#description' => t('This is a name given by Pagos Net to access the webservice'),
    '#default_value' => $settings['webservice_name'],
    '#required' => TRUE,
  );
  $form['server'] = array(
    '#type' => 'textfield',
    '#title' => t('Pagos Net server'),
    '#description' => t('This is the server address to the Pagos Net web service endpoint'), 
    '#default_value' => $settings['server'],
    '#required' => TRUE,
  );
  $form['cod_prefix'] = array(
    '#type' => 'textfield',
    '#title' => 'Prefijo para c贸digo',
    '#description' => 'Aparecera como parte del c贸digo de recaudaci贸n', 
    '#default_value' => $settings['cod_prefix'],
    '#required' => FALSE,
  );
  $form['cod_empresa'] = array(
    '#type' => 'textfield',
    '#title' => t('Company code assigned by Pagos Net'),
    '#required' => TRUE,
    '#default_value' => $settings['cod_empresa'],
  );
  $form['note'] = array(
    '#type' => 'textfield',
    '#title' => t('Note description'),
    '#description' => t('A description of the payment to be used by pagos net (e.g. "Payment for store XYZ.inc").'),
    '#default_value' => $settings['note'],
    '#required' => TRUE,
  );
  $form['due_date'] = array(
    '#type' => 'textfield',
    '#title' => t('Due date'),
    '#description' => t('A number of days from today. For example 3 represents three days from today.'),
    '#default_value' => $settings['due_date'],
    '#element_validate' => array('element_validate_integer'),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: adds a message to the submission form if enabled in
 * the payment method settings.
 */
function commerce_pagos_net_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['commerce_pagos_net_information'] = array(
      '#markup' => '<span class="pagos-net-info">' . t('(Continua para completar la compra via Pagos Net.)') . '</span>',
    );
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pagos_net_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a Pagos Net option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find Pagos Net...
      if ($method_id == 'pagos_net') {
        // Prepare the replacement radio button text with icons.
        //$icons = commerce_paypal_icons();
        //$value = t('!logo PayPal - pay securely without sharing your financial information', array('!logo' => $icons['paypal']));
        //$value .= '<div class="commerce-paypal-icons"><span class="label">' . t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

        // Add the CSS.
        //$form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_paypal_wps') . '/theme/commerce_paypal_wps.theme.css';

        break;
      }
    }
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_pagos_net_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Display an error and prevent the payment attempt if PayPal WPP has not been
  // configured yet.

  if (empty($payment_method['settings'])) {
    drupal_set_message(t('This payment method must be configured by an administrator before it can be used.'), 'error');
    return FALSE;
  }

// Set the order status to pending
  $order_updated = commerce_order_status_update($order, 'pending', FALSE, TRUE, $log = t('Changed status in pagos_net_commerce_checkout_complete_hook'));

// Get the user info from database in order to send it to Pagos Net webservice 

  $nit = db_select('field_data_field_nit', 'nit')
    ->fields('nit', array('field_nit_value'))
    ->condition('entity_id', $order->commerce_customer_billing['und'][0]['profile_id'],'=')
    ->condition('entity_type','commerce_customer_profile','=')
    ->execute()
    ->fetchField();

  $nombre_razon_social = db_select('field_data_field_nombre_razon_social', 'nrz')
    ->fields('nrz', array('field_nombre_razon_social_value'))
    ->condition('entity_id', $order->commerce_customer_billing['und'][0]['profile_id'],'=')
    ->condition('entity_type','commerce_customer_profile','=')
    ->execute()
    ->fetchField();


// BEGIN cmeRegistroPlan
 

  date_default_timezone_set('America/La_Paz');

  $TRANSACCION='A';
  $NOMBRE= $nombre_razon_social;
  $NIT = $nit;
  $CODCLIENTE = $order->uid;
  $CODEMPRESA = $payment_method['settings']['cod_empresa'];
  $FECHAIN = date("Ymd");
  $HORAIN = date("His");
  $EMAIL = $order->mail;
  $MONEDA = 'BS';
  if ($payment_method['settings']['cod_prefix']) {
    $CODRECAUDA = $payment_method['settings']['cod_prefix']  . str_pad($order->order_id, 6, '0', STR_PAD_LEFT);
  } else {
    $CODRECAUDA = str_pad($order->order_id, 6, '0', STR_PAD_LEFT);
  }
  $DESRECAUDA = $payment_method['settings']['note'];
  $FECHAVEN =date('Ymd', strtotime('+' . $payment_method['settings']['due_date'] . ' days'));
  $HORAVEN =000000;
  $COD_PRODUCTO = 1;
    
  $NROPAGO = 1;
  $MONTOPAGO = $order->commerce_order_total['und'][0]['amount']/100;
  $DESCPAGO = "CUOTA1";
  $MONTOCF = $MONTOPAGO; 
  $NOBREFAC = $nombre_razon_social;
  $NITFAC = $nit;
    
  $DPLANILLAS =array('DPlanilla'=>Array('numeroPago'=>$NROPAGO,'montoPago'=>$MONTOPAGO, 'descripcion'=>$DESCPAGO, 'montoCreditoFiscal'=>$MONTOCF, 'nombreFactura'=>$NOBREFAC, 'nitFactura'=>$NITFAC));//
    
  $datos = array('transaccion'=>$TRANSACCION,'nombre'=>$NOMBRE,'nit_CI_cliente'=>$NIT,'codigoCliente'=>$CODCLIENTE,'codigoEmpresa'=>$CODEMPRESA, 'fecha'=>$FECHAIN, 'hora'=>$HORAIN, 'correoElectronico'=>$EMAIL, 'moneda'=>$MONEDA, 'codigoRecaudacion'=>$CODRECAUDA,'descripcionRecaudacion'=>$DESRECAUDA,'fechaVencimiento'=>$FECHAVEN, 'horaVencimiento'=>$HORAVEN,'codigoProducto'=>$COD_PRODUCTO, 'planillas'=>$DPLANILLAS);
    
  $result = wsRegistroPlan($datos, $payment_method['settings']['webservice_name'],$payment_method['settings']['server'], 'cmeRegistroPlan');
   
  // If codError is 0 then transacction was successful, else, show an error
  if($result['cmeRegistroPlanResult']['codError'] == "0")
  {
    $order_updated->field_codigo_recaudacion['und'][0]['value'] = $CODRECAUDA;
    commerce_order_save($order_updated);
    return TRUE;
  }
  else
  {
    drupal_set_message(t('Hubo un error al procesar la petici贸n, por favor intente mas tarde, Pagos Net Error : ' . $result['cmeRegistroPlanResult']['descripcionError']), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_commerce_checkout_pane_info()
 * Defines a new checkout pane (this one is used to deliver a different completion message
 */
function commerce_pagos_net_commerce_checkout_pane_info() {
  $panes['pagos_net'] = array(
    'title' => t('Pagos Net checkout complete message'),
    'page' => 'complete',
    'weight' => 10,
    'file' => 'includes/commerce_pagos_net.checkout_pane.inc',
    'base' => 'commerce_pagos_net_pane',
  );
  // disable this pane if the order is not payed with pagos_net
  if (arg(0) == 'checkout') {
    $commerce_order = menu_get_object('commerce_order');
    if (NULL == $commerce_order) {
      $commerce_order = commerce_cart_get_properties(FALSE, array(), 'current_cart_order');
    }
    if (isset($commerce_order->data['payment_method'])) {
      list($payment_method) = explode('|', $commerce_order->data['payment_method']);
      if ($payment_method != 'pagos_net') {
        unset($panes['pagos_net']);
      }
    }
  }
  return $panes;
}


/**
 * Implements hook_menu(). to catch the callback from Pagos Net
 */
function commerce_pagos_net_menu() {
  $items['pagos-net-callback'] = array(
    'title' => 'Pagos Net Callback',
    'page callback' => 'commerce_pagos_net_callback_processing',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Page callback for /pagos-net-callback.
 */
function commerce_pagos_net_callback_processing() {
  // Pull in the NuSOAP code
  require_once('lib/nusoap.php');
  // Create the server instance
  $server = new soap_server();
  // Initialize WSDL support
  $server->configureWSDL('wsComelecServer', 'urn:wsComelecServer');
  // Register the data structures used by the service
  $server->wsdl->addComplexType(
    'WsTransaccion',
    'complexType',
    'struct',
    'all',
    '',
    array(
        'CodigoEmpresa' => array('name' => 'CodigoEmpresa', 'type' => 'xsd:int'),
	'CodigoRecaudacion' => array('name' => 'CodigoRecaudacion', 'type' => 'xsd:string'),
	'CodigoProducto' => array('name' => 'CodigoProducto', 'type' => 'xsd:string'),
	'NumeroPago' => array('name' => 'NumeroPago', 'type' => 'xsd:int'),
	'Fecha' => array('name' => 'Fecha', 'type' => 'xsd:int'),
	'Secuencial' => array('name' => 'Secuencial', 'type' => 'xsd:int'),
	'Hora' => array('name' => 'Hora', 'type' => 'xsd:int'),
	'OrigenTransaccion' => array('name' => 'OrigenTransaccion', 'type' => 'xsd:string'),
	'Pais' => array('name' => 'pais', 'type' => 'xsd:int'),
	'Departamento' => array('name' => 'Departamento', 'type' => 'xsd:int'),
	'Ciudad' => array('name' => 'Ciudad', 'type' => 'xsd:int'),	
	'Entidad' => array('name' => 'Entidad', 'type' => 'xsd:string'),
	'Agencia' => array('name' => 'Agencia', 'type' => 'xsd:string'),
	'Operador' => array('name' => 'Operador', 'type' => 'xsd:int'),
	'Monto' => array('name' => 'Monto', 'type' => 'xsd:double'),
	'LoteDosificacion' => array('name' => 'LoteDosificacion', 'type' => 'xsd:int', 'minOccurs'=>'0'),
	'NroRentaRecibo' => array('name' => 'NroRentaRecibo', 'type' => 'xsd:string'),
	'MontoCreditoFiscal' => array('name' => 'MontoCreditoFiscal', 'type' => 'xsd:double', 'minOccurs'=>'0'),
	'CodigoAutorizacion' => array('name' => 'CodigoAutorizacion', 'type' => 'xsd:string', 'minOccurs'=>'0'),
        'CodigoControl' => array('name' => 'CodigoControl', 'type' => 'xsd:string', 'minOccurs'=>'0'),
        'NitFacturar' => array('name' => 'NitFacturar', 'type' => 'xsd:string', 'minOccurs'=>'0'),
	'NombreFacturar' => array('name' => 'NombreFacturar', 'type' => 'xsd:string', 'minOccurs'=>'0'),
	'Transaccion' => array('name' => 'Transaccion', 'type' => 'xsd:string')
    )
  );
  $server->wsdl->addComplexType(
    'RespTransaccion',
    'complexType',
    'struct',
    'all',
    '',
    array(
        'CodError' => array('name' => 'CodError', 'type' => 'xsd:int'),
        'Descripcion' => array('name' => 'Descripcion', 'type' => 'xsd:string')
    )
  );

// Register the method to expose
  $server->register('datosTransaccion',                    // method name
    array('datos' => 'tns:WsTransaccion', 'user'=> 'xsd:string', 'password' => 'xsd:string'),   // input parameters
    array('return' => 'tns:RespTransaccion'),      // output parameters
    'urn:wsComelecServer',                         // namespace
    'urn:wsComelecServer#datosTransaccion',        // soapaction
    'rpc',                                    // style
    'encoded',                                     // use
    'Aqu&iacute; se describe la documentaci&oacute;n y tipos de error posibles'     // documentation
  );
// Define the method as a PHP function
  function datosTransaccion($datos, $user, $password) {
  // echo "datos recibidos:";		// ac谩 se define lo que se hace con los par谩metros de entrada
  //print_r($transacc); 
  if(($user=='demo')&&($password=='demo')){
    $retval = array(
                'CodError' => 0,
                'Descripcion' => 'OK datos enviados:'
				. $datos['CodigoEmpresa'] . "|"
				. $datos['CodigoRecaudacion'] . "|"
				. $datos['CodigoProducto'] . "|"
				. $datos['NumeroPago'] . "|"
				. $datos['Fecha'] . "|"
				. $datos['Secuencial'] . "|"
				. $datos['Hora'] . "|"
				. $datos['Pais'] . "|"
				. $datos['Departamento'] . "|"
				. $datos['Ciudad'] . "|"
				. $datos['Entidad'] . "|"
				. $datos['Agencia'] . "|"
				. $datos['Operador'] . "|"
				. $datos['Monto'] . "|"
				. $datos['LoteDosificacion'] . "|"
				. $datos['NroRentaRecibo'] . "|"
				. $datos['MontoCreditoFiscal'] . "|"
				. $datos['CodigoAutorizacion'] . "|"
				. $datos['CodigoControl'] . "|"
				. $datos['NitFacturar'] . "|"
				. $datos['NombreFacturar'] . "|"
				. $datos['Transaccion'] . "|"
                );
  }else{
	    $retval = array(
                'CodError' => 99,
                'Descripcion' => 'Usuario o Contrase帽a erroneos');
	}

 	return $retval; //new soapval('return', 'RespTransaccion', $retval, false, 'urn:wsComelecServer');
  }

// Use the request to (try to) invoke the service
  $HTTP_RAW_POST_DATA = isset($HTTP_RAW_POST_DATA) ? $HTTP_RAW_POST_DATA : '';
  $server->service($HTTP_RAW_POST_DATA);

// reference: http://www.scottnichol.com/nusoapprogwsdl.htm
}

