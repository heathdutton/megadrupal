<?php
/**
 * @file
 * Install, update and uninstall functions for the endicia module.
 */

/**
 * Implements hook_schema().
 */
function endicia_schema() {
  $schema = array();

  $schema['endicia_label_presets'] = array(
    'description' => 'Stores the Endicia label preset information.',
    'fields' => array(
      'preset_id' => array(
        'description' => 'Primary key: the label preset ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Human-readable name of the label preset.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'mail_shape' => array(
        'description' => 'Endicia mailpiece shape identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_class_domestic' => array(
        'description' => 'Endicia mail class to ship with for domestic shipments.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_class_international' => array(
        'description' => 'Endicia mail class to ship with for international shipments.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'length' => array(
        'description' => 'Package length, in inches.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'width' => array(
        'description' => 'Package width, in inches.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'height' => array(
        'description' => 'Package height, in inches.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('preset_id'),
  );

  $schema['endicia_label_archive'] = array(
    'description' => 'Stores information about printed Endicia labels.',
    'fields' => array(
      'id' => array(
        'description' => 'The internal record identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => 'The Drupal managed file ID of the generated label file.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'module' => array(
        'description' => 'The module which generated and saved the label.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'UNIX timestamp for the date and time the label was saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tracking_num' => array(
        'description' => 'Tracking (PIC) number for the package or parcel',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'part_num' => array(
        'description' => 'Label part number descriptor for labels with multiple pieces with 0 indicating a non-multipart image.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implementation of hook_uninstall().
 */
function endicia_uninstall() {
  $variables = array(
    'endicia_account_id',
    'endicia_passphrase',
    'endicia_gf_auth_token',
    'endicia_service_type_domestic',
    'endicia_service_type_international',
    'endicia_test_mode',
    'endicia_debug_mode',
    'endicia_disabled_pkg_types',
    'endicia_label_lifetime',
    'endicia_message_text',
    'endicia_message_time',
    'endicia_message_last_time',
  );

  // Uninstall the variables listed above.
  foreach($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implements hook_requirements().
 */
function endicia_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  if ($phase == 'runtime') {
    $requirements['endicia'] = array(
      'title' => $t('Endicia API'),
      'value' => $t('Version !version', array('!version' => ENDICIA_API_VERSION)),
    );

    $data = array();
    $uri = ENDICIA_ELS_SERVICES_URI;
    $response_node = 'VersionStatusResponse';
    $response = endicia_api_request($uri, 'VersionStatus', $data, $response_node);
    // Check for errors
    if ($error = endicia_api_request_error_check($response, $response_node) || $response === FALSE) {
      $requirements['endicia']['description'] = $t('Endicia was not able to retrieve its version status from Grindflow. Please check to ensure you are running the most recent version of Endicia.');
      $requirements['endicia']['severity'] = REQUIREMENT_WARNING;
    }
    else {
      // Cache the message if a valid time was found
      if ($response[$response_node]['Message']['Time'] > 0) {
        variable_set('endicia_message_text', $response[$response_node]['Message']['Text']);
        variable_set('endicia_message_time', $response[$response_node]['Message']['Time']);
      }

      // Check module version status
      if ($response[$response_node]['Outdated']) {
        if ($response[$response_node]['DaysRemaining'] > 0) {
          $requirements['endicia']['value'] = $t('Version !version (!days days remaining)', array('!version' => ENDICIA_API_VERSION, '!days' => $response[$response_node]['DaysRemaining']));
          $requirements['endicia']['description'] = $t('This API version is has been deprecated and is being phased out. Please update the Endicia module to ensure continued service.');
          $requirements['endicia']['severity'] = REQUIREMENT_ERROR;
        }
        else {
          $requirements['endicia']['value'] = $t('Version !version (UNSUPPORTED)', array('!version' => ENDICIA_API_VERSION));
          $requirements['endicia']['description'] = $t('This API version is no longer supported has been disabled. Please update the Endicia module to ensure continued service.');
          $requirements['endicia']['severity'] = REQUIREMENT_ERROR;
        }
      }
      else {
        if ($response[$response_node]['CurrentVersion'] == ENDICIA_API_VERSION) {
          $requirements['endicia']['value'] = $t('Version !version', array('!version' => ENDICIA_API_VERSION));
          $requirements['endicia']['severity'] = REQUIREMENT_OK;
        }
        else {
          $requirements['endicia']['value'] = $t('Version !version (updates available)', array('!version' => ENDICIA_API_VERSION));
          $requirements['endicia']['description'] = $t('This API version is currently supported, but updates are available. You may wish to update the latest Endicia module.');
          $requirements['endicia']['severity'] = REQUIREMENT_OK;
        }
      }
    }
  }

  return $requirements;
}
