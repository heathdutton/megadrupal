<?php
/**
 * @file
 * Hook implementations and helper functions for the endicia module.
 */
define('ENDICIA_API_VERSION', '0.3');
define('ENDICIA_PRODUCTION_URI', sprintf("www.grindflow.com/els/%s/production", ENDICIA_API_VERSION));
define('ENDICIA_TEST_URI', sprintf("www.grindflow.com/els/%s/test", ENDICIA_API_VERSION));
define('ENDICIA_ELS_SERVICES_URI', sprintf("www.grindflow.com/els/%s/elsservices", ENDICIA_API_VERSION));

/**
 * Implements hook_permission().
 */
function endicia_permission() {
  return array(
    'administer endicia' => array(
      'title' => t('Administer Endicia'),
      'description' => t('Allows users to use and configure all aspects of Endicia.'),
    ),
    'configure endicia presets' => array(
      'title' => t('Configure Label Presets'),
      'description' => t('Allows users to add, edit or delete Endicia Label Presets.'),
    ),
    'buy endicia postage' => array(
      'title' => t('Buy postage'),
      'description' => t('Allows users to configure all aspects of Endicia.'),
    ),
    'request endicia refunds' => array(
      'title' => t('Request refunds'),
      'description' => t('Allows users to configure all aspects of Endicia.'),
    ),
    'use endicia' => array(
      'title' => t('Use Endicia'),
      'description' => t('Allows users to view account status and use the cloud print feature.'),
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Deletes Endicia shipping labels from the file system automatically
 * on a periodic basis.  Cron must be enabled for automatic deletion.
 * Default is never delete the labels, keep them forever.
 */
function endicia_cron() {
  $current_time = time();
  $cutoff = $current_time - variable_get('endicia_label_lifetime', 0);
  if ($cutoff == $current_time) {
    // Label lifetime is set to 0, meaning never delete
    return;
  }

  $label_dir = 'private://endicia_labels';
  if ($path = file_prepare_directory($label_dir, FILE_CREATE_DIRECTORY)) {
    $exclude = array('.', '..');
    $files = array_diff(scandir($label_dir), $exclude);
    if ($files) {
      foreach ($files as $file) {
        $file_uri = $label_dir . '/' . $file;
        if ($cutoff > filectime($file_uri)) {
          file_unmanaged_delete($file_uri);
        }
      }
    }
  }
}

/**
 * Implements hook_init().
 */
function endicia_init() {
  $last_time = variable_get('endicia_message_last_time', 0);
  // Negative value indicates to never show partner messages
  if ($last_time >= 0 && user_access('use endicia')) {
    $message_time = variable_get('endicia_message_time', 0);
    $message_text = variable_get('endicia_message_text', '');
    if ($message_time > $last_time) {
      variable_set('endicia_message_last_time', $message_time);
      drupal_set_message(check_markup($message_text, 'filtered_html'));
    }
  }
}

/**
 * Implements hook_file_download().
 *
 * Provide the correct header information for our private file downloads.
 * See http://www.drupalcoder.com/blog/mixing-private-and-public-downloads-in-drupal-6
 */
function endicia_file_download($uri) {
  $path = file_uri_target($uri);
  if (user_access('use endicia') && strpos($path, 'endicia_labels') === 0) {
    // Here we mimic what file_get_content_headers() does since we are dealing
    // with unmanaged files.
    $name = drupal_basename($path);
    $type = file_get_mimetype($uri);

    $inline_types = variable_get('file_inline_types', array('^text/', '^image/', 'flash$'));
    $disposition = 'attachment';
    foreach ($inline_types as $inline_type) {
      // Exclamation marks are used as delimiters to avoid escaping slashes.
      if (preg_match('!' . $inline_type . '!', $type)) {
        $disposition = 'inline';
      }
    }

    return array(
      'Content-Type' => mime_header_encode($type),
      'Content-Length' => filesize($uri),
      'Content-Disposition' => $disposition . '; filename="' . mime_header_encode($name) . '"',
      'Cache-Control' => 'private',
    );
  }
}

/**
 * Returns the file extension given the image label format.
 */
function _endicia_get_file_extension($format) {
  switch($format) {
    case 'PNG':
      return 'png';
    case 'GIF':
      return 'gif';
    case 'JPEG':
      return 'jpg';
    case 'PDF':
      return 'pdf';
    case 'ZPLII':
      return 'zpl';
    case 'EPL2':
      return 'epl';
    default:
      return 'file';
  }
}

/**
 * Returns an associative array of the parcel types mapped to their human-
 * readable names.
 */
function _endicia_pkg_types($filter = NULL) {
  $types = array(
    'Card' => t('Card'),
    'Letter' => t('Letter'),
    'Flat' => t('Flat'),
    'Parcel' => t('Parcel'),
    'LargeParcel' => t('Large Parcel'),
    'IrregularParcel' => t('Irregular Parcel'),
    'FlatRateEnvelope' => t('Flat Rate Envelope'),
    'FlatRateLegalEnvelope' => t('Flat Rate Envelope (Legal)'),
    'FlatRatePaddedEnvelope' => t('Flat Rate Envelope (Padded)'),
    'FlatRateGiftCardEnvelope' => t('Flat Rate Envelope (Gift Card)'),
    'FlatRateWindowEnvelope' => t('Flat Rate Window Envelope'),
    'FlatRateCardboardEnvelope' => t('Flat Rate Cardboard Envelope'),
    'SmallFlatRateEnvelope' => t('Small Flat Rate Envelope'),
    'SmallFlatRateBox' => t('Small Flat Rate Box'),
    'MediumFlatRateBox' => t('Medium Flat Rate Box'),
    'LargeFlatRateBox' => t('Large Flat Rate Box'),
    'DVDFlatRateBox' => t('DVD Flat Rate Box'),
    'LargeVideoFlatRateBox' => t('Large Video Flat Rate Box'),
    'RegionalRateBoxA' => t('Regional Rate Box (A)'),
    'RegionalRateBoxB' => t('Regional Rate Box (B)'),
    'RegionalRateBoxC' => t('Regional Rate Box (C)'),
  );
  if ($filter == 'enabled') {
    $visibility = variable_get('endicia_pkg_type_visibility', array());
    foreach ($visibility as $type => $visible) {
      if (!$visible) {
        unset($types[$type]);
      }
    }
  }
  return $types;
}

/**
 * Extracts the address information from an order and returns the $type
 * address information as an object.
 */
function _endicia_get_address($source, $type) {
  // TODO: Eventually, we should migrate to the proper names... We are
  // currently using UC-style address properties.
  $properties = array(
    'first_name' => 'first_name',
    'last_name' => 'last_name',
    'company' => 'organisation_name',
    'street1' => 'thoroughfare',
    'street2' => 'premise',
    'city' => 'locality',
    'zone' => 'administrative_area',
    'postal_code' => 'postal_code',
    'country' => 'country',
    'phone' => 'phone',
    'email' => 'email',
  );

  $address = new stdClass();
  foreach($properties as $property => $src_property) {
    if (is_array($source)) {
      $address->{$property} = $source[$type . '_' . $src_property];
    }
    else {
      $address->{$property} = $source->{$type . '_' . $src_property};
    }
  }
  return $address;
}

/**
 * Returns a mapping of the valid mail classes and their human-readable values.
 *
 * @param $filter
 *   If set to FALSE, all mail classes are returned. If set to 'International'
 *   or 'Domestic', then only mail classes of that type will be returned.
 */
function _endicia_mail_classes($filter=FALSE) {
  $classes = array();
  if ($filter === FALSE || $filter == 'Domestic') {
    $classes += array(
      'Express' => t('Express Mail'),
      'First' => t('First-Class Mail'),
      'LibraryMail' => t('Library Mail'),
      'MediaMail' => t('Media Mail'),
      'ParcelPost' => t('Parcel Post'),
      'ParcelSelect' => t('Parcel Select'),
      'Priority' => t('Priority Mail'),
      'CriticalMail' => t('Critical Mail'),
      'StandardMail' => t('Standard Mail'),
    );
  }
  if ($filter == FALSE || $filter == 'International') {
    $classes += array(
      'ExpressMailInternational' => t('Express Mail International'),
      'FirstClassPackageInternationalService' => t('First Class Package International'),
      'FirstClassMailInternational' => t('First Class Mail International'),
      'PriorityMailInternational' => t('Priority Mail International'),
      'GXG' => t('Global Express Guaranteed'),
    );
  }
  return $classes;
}

/**
 * Small convenience function to determine the shipping class / accessorial
 */
function _endicia_get_service_type($is_international) {
  $service_type_domestic = variable_get('endicia_service_type_domestic', 'Express');
  $service_type_international = variable_get('endicia_service_type_international', 'ExpressMailInternational');
  return $is_international ? $service_type_international : $service_type_domestic;
}

/*
 * Generate a pseudo-random v4 UUID.
 * See http://www.php.net/manual/en/function.uniqid.php#94959
 */
function _endicia_v4uuid() {
  return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',

    // 32 bits for "time_low"
    mt_rand(0, 0xffff), mt_rand(0, 0xffff),

    // 16 bits for "time_mid"
    mt_rand(0, 0xffff),

    // 16 bits for "time_hi_and_version",
    // four most significant bits holds version number 4
    mt_rand(0, 0x0fff) | 0x4000,

    // 16 bits, 8 bits for "clk_seq_hi_res",
    // 8 bits for "clk_seq_low",
    // two most significant bits holds zero and one for variant DCE1.1
    mt_rand(0, 0x3fff) | 0x8000,

    // 48 bits for "node"
    mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
  );
}

/**
 * Returns True if we should be using the test servers.
 */
function _endicia_in_test_mode() {
  return (variable_get('endicia_test_mode', 0) || variable_get('endicia_debug_mode', 0));
}

/**
 * Converts an array to a PHP stdClass object.
 */
function _endicia_array_to_object($array) {
  if (is_array($array)) {
    return (object) array_map(__FUNCTION__, $array);
  }
  else {
    // Return as-is
    return $array;
  }
}

/**
 * Checks the response of an API request for errors, returning information about
 * any errors found.
 *
 * @param $response
 *  The response data returned by an API request in endicia_api_request().
 * @param $response_node
 *  The root XML node name that the response results are contained in.
 * @return
 *   FALSE for successful requests, if the request was unsuccessful than an
 *   associative array with the indicies 'message' and 'status' holding the
 *   textual error message and status code (respectively) is returned. This data
 *   is passed through a filter and safe for use on form elements.
 * @ingroup api
 * @see endicia_api_request().
 */
function endicia_api_request_error_check($response, $response_node) {
  if (is_array($response)) {
    $response = _endicia_array_to_object($response);
  }

  // If we have a valid status code returned (be it 0 or otherwise), set it.
  // Otherwise, use -1 to trigger an error message search.
  $error_status = isset($response->$response_node->Status) ? $response->$response_node->Status : -1;

  // If something went wrong, or if we don't have a status, check error messages
  // to see if they are non-empty.
  $error_message = FALSE;
  if ($error_status != 0 && isset($response->$response_node->ErrorMessage) && !empty($response->$response_node->ErrorMessage)) {
    $error_message = $response->$response_node->ErrorMessage;
  }

  if ($error_message !== FALSE) {
    return array(
      'status' => $error_status,
      'message' => $error_message,
    );
  }
  return FALSE;
}

/**
 * Handle fatal communication errors with the GEC servers
 */
function _endicia_communication_error_redirect($url = NULL) {
  drupal_set_message(t('An error occurred while communicating with the GEC Server (check the site log for details).'), 'error');
  if ($url) {
    drupal_goto($url);
  }
}

/**
 * Submit an API request via SOAP to the Grindflow Endicia Cloud API server.
 *
 * Any SOAP exceptions while making the request are logged and an error message
 * will be displayed to the user. If the request is successful but the server
 * returns and error as the response, the error will be logged but the results
 * will be returned anyways so that the calling function can react to the
 * specific error if nescessary.
 *
 * @param $uri
 *   The URL to the SOAP WSDL to load for this request. Note that caching is
 *   enabled, so during development you may wish to disable caching or
 *   alternatively clear the /tmp/wsdl* files that are generated by PHP.
 * @param $method
 *   The specific SOAP method to call use for this request.
 * @param $data
 *   An associative array of parameters to pass as an argument for this method.
 *   It will be converted to XML for you automatically if the selected method
 *   requires it.
 * @param $response_node
 *   The root XML node name that the response results are contained in.
 *  @return
 *    FALSE if a SOAP exception occured while performing the request or if the
 *    request was unsuccessful. Otherwise, the SOAP response object is returned.
 *
 * @ingroup api
 * @see endicia_api_request_error_check().
 */
function endicia_api_request($uri, $method, $data, $response_node) {
  $data['GFAuthToken'] = variable_get('endicia_gf_auth_token', '');
  $hook = 'endicia_api_request_data_alter';
  $validations = array();
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $validations[$module] = $function($method, $data);
  }
  foreach ($validations as $proceed) {
    if ($proceed === FALSE) {
      return FALSE;
    }
  }

  if (isset($data['AccountID']) && empty($data['AccountID'])) {
    $variables = array('!click_here' => l(t('click here'), 'http://www.grindflow.com/grindflow-endicia-cloud-services/sign-up', array('external' => TRUE, 'attributes' => array('target' => '_blank'))));
    if (module_exists('endicia_ui')) {
      $variables['!account_credentials'] = l(t('account credentials'), 'admin/endicia/settings/credentials');
    }
    else {
      $variables['!account_credentials'] = l(t('account credentials'), 'http://www.grindflow.com/grindflow-endicia-cloud-services/manually-configuring-account-settings', array('external' => TRUE, 'attributes' => array('target' => '_blank')));
    }
    drupal_set_message(t('You must configure your Grindflow Endicia Cloud !account_credentials before using Endicia for Drupal. If you do not yet have a Grindflow Endicia Cloud account, !click_here to purchase an account.', $variables), 'error');
    return FALSE;
  }

  $data['APIVersion'] = ENDICIA_API_VERSION;
  $data['RequestID'] = _endicia_v4uuid();
  $client = new SoapClient(NULL, array('location' => 'https://' . $uri, 'uri' => $uri));
  try {
    $response = $client->$method($data);
    if ($error = endicia_api_request_error_check($response, $response_node)) {
      $message = 'Received an error response during call to %method. Error #@errornum: %errormsg.';
      $variables = array(
        '%method' => $method,
        '@errornum' => $error['status'],
        '%errormsg' => $error['message'],
      );
      if (_endicia_in_test_mode()) {
        $variables['!request_data'] = '<pre>' . check_plain(print_r($data, true)) . '</pre>';
        $message .= ' The API request data was: !request_data';
      }
      watchdog('endicia', $message, $variables, WATCHDOG_ERROR);
    }
    return $response;
  }
  catch (Exception $e) {
    // Log the SOAP error
    $message = 'API server SOAP exception during call to %method: @errormsg.';
    $variables = array(
      '%method' => $method,
      '@errormsg' => '<pre>' . check_plain($e) . '</pre>',
    );
    if (_endicia_in_test_mode()) {
      $variables['!request_data'] = '<pre>' . check_plain(print_r($data, TRUE)) . '</pre>';
      $message .= t(' The API request data was: !request_data');
    }
    watchdog('endicia', $message, $variables, WATCHDOG_ERROR);
  }
  return FALSE;
}


/**
 * Submit an API request and get the account status.
 *
 * @returns
 *   An empty array for disabled accounts or an associative
 *   array of values containing information about the account. Returns FALSE in
 *   the event of an error and NULL for SOAP failures.
 *
 * @ingroup api
 */
function endicia_get_account_status() {
  $account_id = variable_get('endicia_account_id', '');

  $data = array(
    'AccountID' => $account_id,
    'Password' => variable_get('endicia_passphrase', ''),
  );

  $uri = _endicia_in_test_mode() ? ENDICIA_TEST_URI : ENDICIA_PRODUCTION_URI;
  $response_node = 'AccountStatusResponse';
  $response = endicia_api_request($uri, 'GetAccountStatus', $data, $response_node);
  // Check for failures
  if ($response === FALSE) {
    return NULL;
  }
  // Check for errors
  if ($error = endicia_api_request_error_check($response, $response_node)) {
    $message = 'Could not retrieve your account status. Error #@errornum: %errormsg (check the site log for details).';
    $variables = array(
      '@errornum' => $error['status'],
      '%errormsg' => $error['message'],
    );
    drupal_set_message(t($message, $variables), 'error');
    return FALSE;
  }
  return (array)$response->AccountStatusResponse->CertifiedIntermediary;
}

/**
 * Convenience function to save label data to the endicia label storage
 * directory.
 * @param $filename
 *   The name of the file
 * @param $data
 *   The image or ZPL label data to save
 * @param $module
 *   The name of the module saving the image
 * @param $tracking_num
 *   The tracking (PIC) number for the package or parcel
 * @returns
 *   The relative file path of the saved label file from sites/default/files, or
 *   FALSE if creating the file failed.
 */
function endicia_save_label($filename, $data, $module, $tracking_num) {
  $file = FALSE;
  $previously_existed = FALSE;
  $directory = 'private://endicia_labels';

  $available_wrappers = array_keys(file_get_stream_wrappers());
  if (!in_array('private', $available_wrappers)) {
    drupal_set_message(t("The label could not be saved because Drupal's private filesystem path has not been configured. You can visit the label archives to see the label's tracking number and process a refund."), 'error');
    $label = new stdClass();
    $label->fid = NULL;
    $label->timestamp = time();
    $label->module = $module;
    $label->tracking_num = $tracking_num;
  }
  else if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY|FILE_MODIFY_PERMISSIONS)) {
    $label_path = $directory . '/' . $filename;
    $previously_existed = file_exists($label_path);
    $file = file_save_data($data, $label_path, FILE_EXISTS_REPLACE);

    $label = new stdClass();
    $label->fid = $file->fid;
    $label->timestamp = $file->timestamp;
    $label->module = $module;
    $label->tracking_num = $tracking_num;
  }

  // Even if we re-use the same file, write a new records to the label archives
  drupal_write_record('endicia_label_archive', $label);

  return $file;
}

/**
 * Load all presets and return them in a numerically-indexed array.
 */
function endicia_label_preset_get_all() {
  $presets = array();
  $presets = db_select('endicia_label_presets', 'lp')
    ->fields('lp')
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
  return $presets;
}

/**
 * Returns a preset definition array structure as if it was retrieved from the
 * database, populating it with dummy values. Use this function to create the
 * initial definition array structure before submitting it to the database to
 * ensure all values are set to their defaults if they are not populated by the
 * function saving the new entry.
 */
function endicia_label_preset_new() {
  return array(
    'preset_id' => -1,
    'name' => '',
    'ship_type' => '',
    'mail_shape' => '',
    'mail_class_domestic' => '',
    'mail_class_international' => '',
    'width' => 0,
    'length' => 0,
    'height' => 0,
  );
}


function endicia_label_preset_load($preset_id) {
  $preset = db_select('endicia_label_presets', 'lp')
    ->fields('lp')
    ->condition('preset_id', $preset_id)
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
  return isset($preset[0]) ? $preset[0] : FALSE;

}

function endicia_label_preset_save($preset) {
  if ($preset['preset_id'] == -1) {
    unset($preset['preset_id']);
    return drupal_write_record('endicia_label_presets', $preset);
  }
  else {
    return drupal_write_record('endicia_label_presets', $preset, 'preset_id');
  }
}

function endicia_label_preset_delete($preset_id) {
  $num_deleted = db_delete('endicia_label_presets')
    ->condition('preset_id', $preset_id)
    ->execute();
  return $num_deleted;
}

/**
 * Get an array of all country code => country name pairs.
 *
 * Mimics Drupal's _country_get_predefined_list(), however it returns
 * untranslated country names in English.
 */
function _endicia_country_get_predefined_list() {
  $countries = array(
    'AD' => 'Andorra',
    'AE' => 'United Arab Emirates',
    'AF' => 'Afghanistan',
    'AG' => 'Antigua and Barbuda',
    'AI' => 'Anguilla',
    'AL' => 'Albania',
    'AM' => 'Armenia',
    'AN' => 'Netherlands Antilles',
    'AO' => 'Angola',
    'AQ' => 'Antarctica',
    'AR' => 'Argentina',
    'AS' => 'American Samoa',
    'AT' => 'Austria',
    'AU' => 'Australia',
    'AW' => 'Aruba',
    'AX' => 'Aland Islands',
    'AZ' => 'Azerbaijan',
    'BA' => 'Bosnia and Herzegovina',
    'BB' => 'Barbados',
    'BD' => 'Bangladesh',
    'BE' => 'Belgium',
    'BF' => 'Burkina Faso',
    'BG' => 'Bulgaria',
    'BH' => 'Bahrain',
    'BI' => 'Burundi',
    'BJ' => 'Benin',
    'BL' => 'Saint Barthélemy',
    'BM' => 'Bermuda',
    'BN' => 'Brunei',
    'BO' => 'Bolivia',
    'BR' => 'Brazil',
    'BS' => 'Bahamas',
    'BT' => 'Bhutan',
    'BV' => 'Bouvet Island',
    'BW' => 'Botswana',
    'BY' => 'Belarus',
    'BZ' => 'Belize',
    'CA' => 'Canada',
    'CC' => 'Cocos (Keeling) Islands',
    'CD' => 'Congo (Kinshasa)',
    'CF' => 'Central African Republic',
    'CG' => 'Congo (Brazzaville)',
    'CH' => 'Switzerland',
    'CI' => 'Ivory Coast',
    'CK' => 'Cook Islands',
    'CL' => 'Chile',
    'CM' => 'Cameroon',
    'CN' => 'China',
    'CO' => 'Colombia',
    'CR' => 'Costa Rica',
    'CU' => 'Cuba',
    'CW' => 'Curaçao',
    'CV' => 'Cape Verde',
    'CX' => 'Christmas Island',
    'CY' => 'Cyprus',
    'CZ' => 'Czech Republic',
    'DE' => 'Germany',
    'DJ' => 'Djibouti',
    'DK' => 'Denmark',
    'DM' => 'Dominica',
    'DO' => 'Dominican Republic',
    'DZ' => 'Algeria',
    'EC' => 'Ecuador',
    'EE' => 'Estonia',
    'EG' => 'Egypt',
    'EH' => 'Western Sahara',
    'ER' => 'Eritrea',
    'ES' => 'Spain',
    'ET' => 'Ethiopia',
    'FI' => 'Finland',
    'FJ' => 'Fiji',
    'FK' => 'Falkland Islands',
    'FM' => 'Micronesia',
    'FO' => 'Faroe Islands',
    'FR' => 'France',
    'GA' => 'Gabon',
    'GB' => 'United Kingdom',
    'GD' => 'Grenada',
    'GE' => 'Georgia',
    'GF' => 'French Guiana',
    'GG' => 'Guernsey',
    'GH' => 'Ghana',
    'GI' => 'Gibraltar',
    'GL' => 'Greenland',
    'GM' => 'Gambia',
    'GN' => 'Guinea',
    'GP' => 'Guadeloupe',
    'GQ' => 'Equatorial Guinea',
    'GR' => 'Greece',
    'GS' => 'South Georgia and the South Sandwich Islands',
    'GT' => 'Guatemala',
    'GU' => 'Guam',
    'GW' => 'Guinea-Bissau',
    'GY' => 'Guyana',
    'HK' => 'Hong Kong S.A.R., China',
    'HM' => 'Heard Island and McDonald Islands',
    'HN' => 'Honduras',
    'HR' => 'Croatia',
    'HT' => 'Haiti',
    'HU' => 'Hungary',
    'ID' => 'Indonesia',
    'IE' => 'Ireland',
    'IL' => 'Israel',
    'IM' => 'Isle of Man',
    'IN' => 'India',
    'IO' => 'British Indian Ocean Territory',
    'IQ' => 'Iraq',
    'IR' => 'Iran',
    'IS' => 'Iceland',
    'IT' => 'Italy',
    'JE' => 'Jersey',
    'JM' => 'Jamaica',
    'JO' => 'Jordan',
    'JP' => 'Japan',
    'KE' => 'Kenya',
    'KG' => 'Kyrgyzstan',
    'KH' => 'Cambodia',
    'KI' => 'Kiribati',
    'KM' => 'Comoros',
    'KN' => 'Saint Kitts and Nevis',
    'KP' => 'North Korea',
    'KR' => 'South Korea',
    'KW' => 'Kuwait',
    'KY' => 'Cayman Islands',
    'KZ' => 'Kazakhstan',
    'LA' => 'Laos',
    'LB' => 'Lebanon',
    'LC' => 'Saint Lucia',
    'LI' => 'Liechtenstein',
    'LK' => 'Sri Lanka',
    'LR' => 'Liberia',
    'LS' => 'Lesotho',
    'LT' => 'Lithuania',
    'LU' => 'Luxembourg',
    'LV' => 'Latvia',
    'LY' => 'Libya',
    'MA' => 'Morocco',
    'MC' => 'Monaco',
    'MD' => 'Moldova',
    'ME' => 'Montenegro',
    'MF' => 'Saint Martin (French part)',
    'MG' => 'Madagascar',
    'MH' => 'Marshall Islands',
    'MK' => 'Macedonia',
    'ML' => 'Mali',
    'MM' => 'Myanmar',
    'MN' => 'Mongolia',
    'MO' => 'Macao S.A.R., China',
    'MP' => 'Northern Mariana Islands',
    'MQ' => 'Martinique',
    'MR' => 'Mauritania',
    'MS' => 'Montserrat',
    'MT' => 'Malta',
    'MU' => 'Mauritius',
    'MV' => 'Maldives',
    'MW' => 'Malawi',
    'MX' => 'Mexico',
    'MY' => 'Malaysia',
    'MZ' => 'Mozambique',
    'NA' => 'Namibia',
    'NC' => 'New Caledonia',
    'NE' => 'Niger',
    'NF' => 'Norfolk Island',
    'NG' => 'Nigeria',
    'NI' => 'Nicaragua',
    'NL' => 'Netherlands',
    'NO' => 'Norway',
    'NP' => 'Nepal',
    'NR' => 'Nauru',
    'NU' => 'Niue',
    'NZ' => 'New Zealand',
    'OM' => 'Oman',
    'PA' => 'Panama',
    'PE' => 'Peru',
    'PF' => 'French Polynesia',
    'PG' => 'Papua New Guinea',
    'PH' => 'Philippines',
    'PK' => 'Pakistan',
    'PL' => 'Poland',
    'PM' => 'Saint Pierre and Miquelon',
    'PN' => 'Pitcairn',
    'PR' => 'Puerto Rico',
    'PS' => 'Palestinian Territory',
    'PT' => 'Portugal',
    'PW' => 'Palau',
    'PY' => 'Paraguay',
    'QA' => 'Qatar',
    'RE' => 'Reunion',
    'RO' => 'Romania',
    'RS' => 'Serbia',
    'RU' => 'Russia',
    'RW' => 'Rwanda',
    'SA' => 'Saudi Arabia',
    'SB' => 'Solomon Islands',
    'SC' => 'Seychelles',
    'SD' => 'Sudan',
    'SE' => 'Sweden',
    'SG' => 'Singapore',
    'SH' => 'Saint Helena',
    'SI' => 'Slovenia',
    'SJ' => 'Svalbard and Jan Mayen',
    'SK' => 'Slovakia',
    'SL' => 'Sierra Leone',
    'SM' => 'San Marino',
    'SN' => 'Senegal',
    'SO' => 'Somalia',
    'SR' => 'Suriname',
    'ST' => 'Sao Tome and Principe',
    'SV' => 'El Salvador',
    'SY' => 'Syria',
    'SZ' => 'Swaziland',
    'TC' => 'Turks and Caicos Islands',
    'TD' => 'Chad',
    'TF' => 'French Southern Territories',
    'TG' => 'Togo',
    'TH' => 'Thailand',
    'TJ' => 'Tajikistan',
    'TK' => 'Tokelau',
    'TL' => 'Timor-Leste',
    'TM' => 'Turkmenistan',
    'TN' => 'Tunisia',
    'TO' => 'Tonga',
    'TR' => 'Turkey',
    'TT' => 'Trinidad and Tobago',
    'TV' => 'Tuvalu',
    'TW' => 'Taiwan',
    'TZ' => 'Tanzania',
    'UA' => 'Ukraine',
    'UG' => 'Uganda',
    'UM' => 'United States Minor Outlying Islands',
    'US' => 'United States',
    'UY' => 'Uruguay',
    'UZ' => 'Uzbekistan',
    'VA' => 'Vatican',
    'VC' => 'Saint Vincent and the Grenadines',
    'VE' => 'Venezuela',
    'VG' => 'British Virgin Islands',
    'VI' => 'U.S. Virgin Islands',
    'VN' => 'Vietnam',
    'VU' => 'Vanuatu',
    'WF' => 'Wallis and Futuna',
    'WS' => 'Samoa',
    'YE' => 'Yemen',
    'YT' => 'Mayotte',
    'ZA' => 'South Africa',
    'ZM' => 'Zambia',
    'ZW' => 'Zimbabwe',
  );
  return $countries;
}
