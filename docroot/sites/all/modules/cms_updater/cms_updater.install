<?php

/**
 * @file
 * Install, update, and uninstall functions for the CMS Updater module.
 */

require_once 'conf/constants.php';
require_once 'cmsupdaterclasses/Drupal7CMSUpdater.php';

/**
 * Implement hook_enable().
 */
function cms_updater_enable() {
  drupal_set_message(t('The CMS Updater module has been successfully enabled. Please visit the <a href="@cms-updater-config">configuration page</a> to activate the service.', array('@cms-updater-config' => url('admin/config/system/cms-updater'))), 'status');

  // Tell the cms updater service that this client is now enabled again
  if (variable_get('cms_updater_key', '')) {
    $domain = $GLOBALS['base_url'];
    $path = drupal_get_path('module', 'cms_updater');
    $data = array(
      'path'    => $path,
      'domain'  => $domain,
      'key'     => variable_get('cms_updater_key', ''),
      'cms'     => 1,
      'version' => VERSION,
    );
    $check_url = CMS_UPDATER_SERVICE_URL . '/api/service/set_version.json';
    $json_data = json_encode($data);

    // Prepare request
    $options = array(
      'headers' => array(
        'Content-Type' => 'application/json',
      ),
      'method'  => 'POST',
      'data'    => $json_data,
    );

    // Send request
    drupal_http_request($check_url, $options);
  }
}

/**
 * Implement hook_disable().
 */
function cms_updater_disable() {
  // Tell the cms updater service that this client is disabled
  $domain = $GLOBALS['base_url'];
  $path = drupal_get_path('module', 'cms_updater');
  $data = array(
    'path'   => $path,
    'domain' => $domain,
    'key'    => variable_get('cms_updater_key', ''),
    'active' => 0,
  );
  $check_url = CMS_UPDATER_SERVICE_URL . '/api/service/site_active.json';
  $json_data = json_encode($data);

  // Prepare request
  $options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
    ),
    'method'  => 'POST',
    'data'    => $json_data,
  );
  // Send request
  drupal_http_request($check_url, $options);
}

/**
 * Implements hook_uninstall().
 */
function cms_updater_uninstall() {
  // Delete CMS Updater variables.
  variable_del('cms_updater_key');
  variable_del('cms_updater_email');
  variable_del('cms_updater_expiry');
  variable_del('cms_updater_last_update');
}

/**
 * Implements hook_requirements().
 *
 * 1.: Is Drupal root dir determinable?
 * 2.: Is curl available?
 * 3.: Is the web server able to write to the Drupal files dir?
 * 4.: Is the tmp dir writable?
 * 5.: Is files dir writable?
 *
 * 6.: Show last core update on status report.
 * 7.: Show error if license key is expired?
 *
 * @param $phase
 * @return array
 */
function cms_updater_requirements($phase) {
  $requirements = array();

  // Do only on install
  if ($phase == 'install') {
    // Ensure translations don't break during installation.
    $t = get_t();

    $cms_updater = New Drupal7CMSUpdater;
    module_load_include('inc', 'cms_updater', 'cms_updater.functions');

    //Check if Document Root determinable:
    $doc_root = dirname(__FILE__);
    $doc_root = $cms_updater->search_up_document_root($doc_root);

    if ($doc_root === FALSE) {
      $requirements['cms_updater_document_root'] = array(
        'title'       => $t('CMS Updater - Document root error'),
        'value'       => $doc_root,
        'severity'    => REQUIREMENT_ERROR,
        'description' => $t('Document root not securely determinable'),
      );
    }

    // Check if curl exists
    $curl_exists = function_exists('curl_version');
    if (!$curl_exists) {
      $requirements['cms_updater_curl'] = array(
        'title'       => $t('CMS Updater - curl support'),
        'value'       => $t('No'),
        'severity'    => REQUIREMENT_ERROR,
        'description' => $t('Curl is not available'),
      );
    }

    if ($doc_root) {
      // Check if apache can write to Drupal root
      $include = _cms_updater_get_drupal_root_file_structure();
      $apache_writable = _cms_updater_check_fileperms($doc_root, $exclude = array(), $include);
      if (sizeof($apache_writable['erronfiles']) > 0) {
        $desc = t('Web server can not write to files, e.g.:');
        $desc .= _cms_updater_files_array_to_list($apache_writable['erronfiles']);
        $requirements['cms_updater_apache_can_write'] = array(
          'title'       => $t('CMS Updater - web server can write'),
          'value'       => $t('No'),
          'severity'    => REQUIREMENT_ERROR,
          'description' => $desc,
        );
      }

      // Check writable temp dir determinable
      if (!_cms_updater_check_get_writable_temp_dir($doc_root)) {
        $requirements['cms_updater_writable_tmp_dir_determinable'] = array(
          'title'       => $t('CMS Updater - writable tmp dir determinable'),
          'value'       => $t('NO'),
          'severity'    => REQUIREMENT_ERROR,
          'description' => $t('Writable tmp dir is not determinable'),
        );
      }

      // Check Writable files_dir
      $files_path = $cms_updater->determine_files_path($doc_root);
      if (!$files_path) {
        $requirements['cms_updater_writable_files_dir'] = array(
          'title'       => $t('CMS Updater - writable files directory'),
          'value'       => $t('NO'),
          'severity'    => REQUIREMENT_ERROR,
          'description' => $t('No writable files directory found.')
        );
      }
    }
    // Check that Drupal can issue HTTP requests.
    if (variable_get('drupal_http_request_fails', TRUE) && !system_check_http_request()) {
      $requirements['cms_updater_http_requests'] = array(
        'title'       => $t('CMS Updater - HTTP request status:'),
        'value'       => $t('Fails'),
        'severity'    => REQUIREMENT_ERROR,
        'description' => $t('Your system or network configuration does not allow to access the CMS Updater service.'),
      );
    }
  }
  // Delete object
  unset($cms_updater);

  // Show only on runtime
  if ($phase == 'runtime') {
    // Show date of last core update
    if ($cms_updater_last_update = variable_get('cms_updater_last_update')) {
      $cms_updater_last_update = format_date(variable_get('cms_updater_last_update'), 'custom', 'Y-m-d H:i:s');
    }
    else {
      $cms_updater_last_update = t('Never');
    }
    $requirements['cms_updater_last_update'] = array(
      'title'    => t('CMS Updater - last core update'),
      'value'    => check_plain($cms_updater_last_update),
      'severity' => REQUIREMENT_OK,
    );

    // Show the license date of expiry
    if ($expiry = variable_get('cms_updater_expiry')) {
      $expiry_time = strtotime($expiry);
      $requirements['cms_updater_expiry'] = array(
        'title'    => t('CMS Updater - date of expiry'),
        'value'    => check_plain($expiry),
        'severity' => REQUIREMENT_OK,
      );
      // Set an error if the time has expired
      if ($expiry_time <= time()) {
        $requirements['cms_updater_expiry']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }

  return $requirements;
}

