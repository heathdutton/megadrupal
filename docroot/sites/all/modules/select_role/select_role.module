<?php

/**
 * @file
 * Forcing the user to choose one role after login.
 *
 * After selecting a role, will led to other roles does not work. User can
 * switch role anytime just visit select_role/landing.
 */

/**
 * Indicates which pages will be ignored (no select role checks).
 *
 * Abosuletely exclude is select_role/landing, user/logout, and
 * caslogout (from module cas).
 */
define('SELECT_ROLE_EXCLUDE', 'js/*');

/**
 * Implements hook_boot().
 */
function select_role_boot() {
  if (!empty($_SESSION['select_role']['role_removed'])) {
    global $user;
    foreach ($_SESSION['select_role']['role_removed'] as $rid => $label) {
      unset($user->roles[$rid]);
    }
  }
}

/**
 * Implements hook_init().
 */
function select_role_init() {
  if (isset($_SESSION['select_role'])) {
    return;
  }

  // Exception, include anonymous and root.
  global $user;
  if (!isset($user->uid) || $user->uid == 0 || $user->uid == 1) {
    return;
  }
  $request_path = request_path();
  $no_request_path = array(
    'select_role/landing',
    'user/logout',
    'caslogout',
  );
  if (in_array($request_path, $no_request_path)) {
    return;
  }

  // Test against exclude pages.
  if ($pages = variable_get('select_role_exclude', SELECT_ROLE_EXCLUDE)) {
    $path = drupal_get_path_alias($request_path);
    if (drupal_match_path($path, $pages)) {
      return;
    }
  }

  // Redirect.
  $url = 'select_role/landing';
  drupal_goto($url, array('query' => array(drupal_get_destination())));
}

/**
 * Implements hook_menu().
 */
function select_role_menu() {
  $items = array();
  $items['admin/config/people/select_role'] = array(
    'title' => 'Select Role',
    'description' => 'Select Role Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('select_role_admin_form'),
    'access arguments' => array('administer select role'),
    'file' => 'select_role.admin.inc',
  );
  $items['select_role/landing'] = array(
    'title' => 'Select Role',
    'description' => 'Select role that assign to you.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('select_role_landing'),
    'access callback' => 'select_role_access',
    'file' => 'select_role.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function select_role_permission() {
  return array(
    'administer select role' => array(
      'title' => t('Administer Select Role'),
    ),
  );
}

/**
 * Access to landing page.
 */
function select_role_access() {
  if (!user_is_logged_in()) {
    return FALSE;
  }
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  $return = TRUE;
  if (isset($_SESSION['select_role'])) {
    $select_role_options = select_role_options();
    // User that no option to select role or
    // only have one role, is don't need to select role.
    $count = count($select_role_options);
    if ($count === 0 || $count === 1) {
      $return = FALSE;
    }
  }
  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Provide extra fields to give the select roles to certain users.
 */
function select_role_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $edit_user = $form_state['user'];
  $rids = db_query("SELECT rid FROM {select_role} WHERE uid = :uid", array(':uid' => $edit_user->uid))->fetchCol();
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  $form['select_role'] = array(
    '#weight' => -9.5,
    '#type' => 'checkboxes',
    '#title' => t('Select Role'),
    '#options' => $roles,
    '#default_value' => $rids,
    '#description' => t('Select roles that will be selected by this user. This configuration effected for this user only. Leave blank to use !url.', array('!url' => l(t('global configuration'), 'admin/config/people/select_role'))),
    '#access' => user_access('administer select role'),
  );
  foreach ($roles as $rid => $label) {
    $key = 'input[name="roles[' . $rid . ']"]';
    $form['select_role'][$rid] = array(
      '#type' => 'checkbox',
      '#title' => $label,
      '#states' => array(
        'visible' => array(
          $key => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_user_update().
 */
function select_role_user_update(&$edit, $account, $category) {
  if ($category == 'account' && isset($edit['select_role'])) {
    $roles = array_filter($edit['roles']);
    unset($roles[DRUPAL_AUTHENTICATED_RID]);
    $select_role = array_filter($edit['select_role']);
    $select_role_options_user = array_intersect_key($select_role, $roles);
    $query = db_delete('select_role');
    $query->condition('uid', $account->uid);
    $query->execute();
    $query = db_insert('select_role')->fields(array('uid', 'rid'));
    foreach ($select_role_options_user as $rid) {
      $query->values(array(
        'uid' => $account->uid,
        'rid' => $rid,
      ));
    }
    $query->execute();
  }
}

/**
 * Return array of options that need to selected by user.
 */
function select_role_options($user = NULL) {
  if (is_null($user)) {
    $user = $GLOBALS['user'];
  }
  $rids = db_query("SELECT rid FROM {select_role} WHERE uid = :uid", array(':uid' => $user->uid))->fetchCol();
  if (empty($rids)) {
    // Use global.
    $select_role_user = variable_get('select_role_global', array());
  }
  else {
    // Populate label.
    $roles = user_roles();
    foreach ($rids as $rid) {
      $select_role_user[$rid] = $roles[$rid];
    }
  }

  $user_roles = db_query("SELECT r.rid, r.name FROM {role} r INNER JOIN {users_roles} ur ON ur.rid = r.rid WHERE ur.uid = :uid", array(':uid' => $user->uid))->fetchAllKeyed(0, 1);
  return array_intersect_key($select_role_user, $user_roles);
}

/**
 * Implements hook_help().
 */
function select_role_help($path, $arg) {
  switch ($path) {
    case 'admin/help#select_role':
      return t("Forcing the user to choose one role after login, and led to other roles doesn't work. User can switch role anytime just visit select_role/landing.");
  }
}

/**
 * Implements hook_user_role_presave().
 *
 * Add support to module role_export.
 */
function select_role_user_role_presave($role) {
  if (module_exists('role_export')) {
    // Add info old rid.
    $GLOBALS['select_role']['old_rid'] = $role->rid;
  }
}

/**
 * Implements hook_user_role_update().
 */
function select_role_user_role_update($role) {
  if (module_exists('role_export') && isset($GLOBALS['select_role']['old_rid'])) {
    // Update the numeric id and the machine name in the select_role table.
    db_update('select_role')
      ->fields(array('rid' => $role->rid))
      ->condition('rid', $GLOBALS['select_role']['old_rid'])
      ->execute();

    // Update variable.
    $vars = variable_get('select_role_global');
    if (!empty($vars)) {
      foreach ($vars as $rid => $label) {
        if ($rid == $GLOBALS['select_role']['old_rid'] && $rid != $role->rid) {
          $vars[$role->rid] = $label;
          unset($vars[$rid]);
          $changed = TRUE;
        }
      }
      if (isset($changed)) {
        variable_set('select_role_global', $vars);
      }
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function select_role_user_presave(&$edit, &$account, $category) {
  // Bring back the original roles.
  if ($GLOBALS['user']->uid == $account->uid && !empty($_SESSION['select_role']['role_removed'])) {
    $account->roles += $_SESSION['select_role']['role_removed'];
  }
}

/**
 * Implements hook_user_logout().
 */
function select_role_user_logout($account) {
  // If module masquerade exists, and user switch to other user,
  // make sure the session clear after switch back to origin.
  unset($_SESSION['select_role']);
}
