<?php
/**
 * @file role_toggle.module
 *
 * TODO:
 * - let permissions follow the renaming of roles
 */

/**
 * Implements hook_permission().
 */
function role_toggle_permission() {
  $perms = array();
  foreach (role_toggle_user_roles() as $rid => $role_name) {
    $perms[role_toggle_permission_name($rid)] = array(
      'title' => role_toggle_permission_label($rid),
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function role_toggle_menu() {
  $items = array();
  $items['admin/role-toggle'] = array(
    'title' => t('Role toggle'),
    'description' => 'Allows permitted users to toggle a role.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_toggle_form'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'role_toggle_any_user_access',
  );
  return $items;
}

/**
 * Access callback for role toggle.
 *
 * @param int $rid
 * @param object $account
 * @return bool $access
 */
function role_toggle_user_access($rid, $account = NULL) {
  return user_access(role_toggle_permission_name($rid), $account);
}

/**
 * Access callback for role toggle.
 *
 * Enter description here ...
 * @param int $rid
 * @return bool $access
 */
function role_toggle_any_user_access($account = NULL) {
  $access = FALSE;
  foreach(role_toggle_user_roles() as $rid => $role_name) {
    if(role_toggle_user_access($rid, $account)) {
      $access = TRUE;
    }
  }
  return $access;
}

/**
 * Abstraction for role name
 *
 * @param int $rid
 * @return string
 */
function role_toggle_role_name($rid) {
  $roles = role_toggle_user_roles();
  $role_name = $roles[$rid];
  return $role_name;
}

/**
 * Abstraction for permission name
 *
 * @param int $rid
 * @return string
 */
function role_toggle_permission_name($rid) {
  return format_string('toggle role @role', array('@role' => role_toggle_role_name($rid)));
}

/**
 * Abstraction for permission label
 *
 * @param int $rid
 * @return string
 */
function role_toggle_permission_label($rid) {
  return t('Toggle role %role', array('%role' => role_toggle_role_name($rid)));
}

/**
 * Get all applicable user roles.
 *
 * @return array - roles from user_roles().
 */
function role_toggle_user_roles() {
  $roles = &drupal_static('__FUNCTION__');
  if(!isset($roles)) {
    $roles = user_roles();
    unset($roles[DRUPAL_ANONYMOUS_RID]);
    unset($roles[DRUPAL_AUTHENTICATED_RID]);
  }
  return $roles;
}

/**
 * Get all roles we may toggle.
 *
 * @param object $account
 * @return array $roles
 */
function role_toggle_allowed_roles($account = NULL) {
  $roles = role_toggle_user_roles();
  $allowed_roles = array();
  foreach($roles as $rid => $role_name) {
    if(role_toggle_user_access($rid, $account)) {
      $allowed_roles[$rid] = $role_name;
    }
  }
  return $allowed_roles;
}

/**
 * Prepare account info, default to user and load role info
 *
 * @param object &$account
 */
function _role_toggle_prepare_account(&$account) {
  if(!$account) {
    global $user;
    $account = user_load($user->uid);
  }
  if(!isset($account->roles)) {
    $account = user_load($account->uid);
  }
}

/**
 * Get role state.
 *
 * @param int $rid
 * @param object $account
 */
function role_toggle_role_state($rid, $account = NULL) {
  _role_toggle_prepare_account($account);
  $roles = role_toggle_user_roles();
  return array_key_exists($rid, $account->roles);
}

/**
 * Get css class for role state.
 *
 * @param bool $role_state
 * @return string $css_class
 */
function role_toggle_indicator_class($role_state) {
  return "role-toggle-role-" . ($role_state ? 'active' : 'inactive');
}

/**
 * Get role css file path
 *
 * @return string $css_path
 */
function role_toggle_get_css_path() {
  return drupal_get_path('module', 'role_toggle') . '/role_toggle.css';
}
/**
 * Toggle Form generation.
 *
 * Submitting the generated form will toggle a role.
 *
 * @param array $form
 * @param array $form_state
 */
function role_toggle_form($form, &$form_state) {
  foreach (role_toggle_allowed_roles() as $rid => $role_name) {
    $rid = (int) $rid;
    $role_state = role_toggle_role_state($rid);
    $class = role_toggle_indicator_class($role_state);
    $form['role-toggle']["role-$rid"] = array(
      '#type' => 'submit',
      '#name' => $rid,
      '#value' => check_plain($role_name),
      '#attributes' => array('class' => array($class)),
    );
  }
  if(isset($form['role-toggle'])) {
    $form['role-toggle']['#attached']['css'] = array(
      role_toggle_get_css_path(),
    );
  }
  return $form;
}

/**
 * Toggle Form submit callback.
 *
 * @param array $form
 * @param array $form_state
 */
function role_toggle_form_submit($form, &$form_state) {
  $rid = (int) $form_state['triggering_element']['#name'];

  global $user;
  $all_roles = role_toggle_user_roles();
  $role_name = $all_roles[$rid];

  // we are paranoid and check access again.
  if (!role_toggle_user_access($rid)) {
    drupal_set_message(t('Role toggle for user #%uid and role #%rid not permitted.', array('%uid' => $user->uid, '%rid' => $rid)), 'error');
    return;
  }

  $target_state = role_toggle_toggle($rid);
  role_toggle_set_message($rid, $target_state);
}

/**
 * Set a success message.
 *
 * @param int $rid
 * @param bool $target_state
 */
function role_toggle_set_message($rid, $target_state) {
  $all_roles = role_toggle_user_roles();
  if($target_state) {
    drupal_set_message(t('Role %role set active.', array('%role' => $all_roles[$rid])));
  } else {
    drupal_set_message(t('Role %role set inactive.', array('%role' => $all_roles[$rid])));
  }
}

/**
 * Do the actual work and toggle the role.
 *
 * @param int $rid
 * @param object $account
 * @return bool $target_state
 */
function role_toggle_toggle($rid, $account = NULL) {
  _role_toggle_prepare_account($account);

  // set $roles.
  $all_roles = role_toggle_user_roles();

  // toggle.
  if(!isset($account->roles[$rid])) {
    $account->roles[$rid] = $all_roles[$rid];
    $target_state = TRUE;
  } else {
    unset($account->roles[$rid]);
    $target_state = FALSE;
  }

  // save and return.
  user_save($account);
  if(module_exists('admin_menu')) {
    admin_menu_flush_caches();
  }
  return $target_state;
}

/**
 * Implements hook_block_info().
 *
 * @return array $blocks
 */
function role_toggle_block_info() {
  $blocks['main']['info'] = t('Role toggle');
  $blocks['main']['cache'] = DRUPAL_NO_CACHE;
  return $blocks;
}

/**)
 * Implements hook_block_view().
 *
 * @return array $block
 */
function role_toggle_block_view($delta) {
  if ($delta == 'main') {
    $form = drupal_get_form('role_toggle_form');
    if (array_key_exists('role-toggle', $form)) {
      $block['subject'] = t('Role toggle');
      $block['content'] = $form;
    } else {
      $block = array();
    }
  }
  return $block;
}
