<?php

/**
 * @file
 * Adds file info (file type icon, extension, size) to local managed file links.
 *
 * This module offers a filter as well as a theme override.
 */

/**
 * Implementation of hook_theme_registry_alter().
 */
function append_file_info_theme_registry_alter(&$theme_registry) {
  // If theme_file_link has not been overridden already, use ours instead.
  if ($theme_registry['file_link']['function'] == 'theme_file_link') {
    $theme_registry['file_link']['function'] = 'append_file_info_custom_theme_file_link';
    $theme_registry['file_link']['type'] = 'module';
    $theme_registry['file_link']['theme path'] = drupal_get_path('module', 'append_file_info');
  }
  if ($theme_registry['image_widget']['function'] == 'theme_image_widget') {
    $theme_registry['image_widget']['function'] = 'append_file_info_custom_theme_image_widget';
    $theme_registry['image_widget']['type'] = 'module';
    $theme_registry['image_widget']['theme path'] = drupal_get_path('module', 'append_file_info');
  }
  if ($theme_registry['file_widget']['function'] == 'theme_file_widget') {
    $theme_registry['file_widget']['function'] = 'append_file_info_custom_theme_file_widget';
    $theme_registry['file_widget']['type'] = 'module';
    $theme_registry['file_widget']['theme path'] = drupal_get_path('module', 'append_file_info');
  }
}

/**
 * Contains custom version theme_file_widget (removing the file size, as it
 * already is in the link).
 *
 * @see theme_file_widget
 */
function append_file_info_custom_theme_file_widget($variables) {
  $element = $variables['element'];
  $output = '';

  // The "form-managed-file" class is required for proper Ajax functionality.
  $output .= '<div class="file-widget form-managed-file clearfix">';
  $output .= drupal_render_children($element);
  $output .= '</div>';

  return $output;
}

/**
 * Contains custom version theme_image_widget (removing the file size, as it
 * already is in the link).
 *
 * @see theme_image_widget
 */
function append_file_info_custom_theme_image_widget($variables) {
  $element = $variables['element'];
  $output = '';
  $output .= '<div class="image-widget form-managed-file clearfix">';

  if (isset($element['preview'])) {
    $output .= '<div class="image-preview">';
    $output .= drupal_render($element['preview']);
    $output .= '</div>';
  }

  $output .= '<div class="image-widget-data">';
  $output .= drupal_render_children($element);
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Contains custom version of theme_file_link (adding a line of code).
 *
 * @see theme_file_link
 */
function append_file_info_custom_theme_file_link($variables) {
  $file = $variables['file'];
  $icon_directory = $variables['icon_directory'];

  $url = file_create_url($file->uri);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
  );

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  // Begin custom code
  if (function_exists('_append_file_info_get_extra_link_text')) {
    $link_text .= _append_file_info_get_extra_link_text($file);
  }
  // End custom code

  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';
}

/**
 * Gets text to be appended to file links (extension, file size).
 */
function _append_file_info_get_extra_link_text($file) {
  $file_parts = explode('.', drupal_basename($file->uri));
  $extension = strtoupper(array_pop($file_parts));
  // Add support for TAR.GZ
  if (in_array($extension, array('GZ', 'BZ2')) && count($file_parts) > 2) {
    $extension = strtoupper(array_pop($file_parts)) . '.' . $extension;
  }
  $link_text = ' (' . check_plain($extension) . ', ' . format_size($file->filesize) . ')';
  return $link_text;
}

/**
 * Implementation of hook_filter_info().
 */
function append_file_info_filter_info() {
  $filters['append_file_info_filter'] = array(
    'title' => t('Append File Info Filter'),
    'description' => t('Appends file info (extension, size) to links to local managed files.'),
    'process callback' => 'append_file_info_filter_process',
  );
  return $filters;
}

/**
 * Gets file entity object from path.
 *
 * @param $path string
 *   The path to the file.
 *
 * @return object|boolean
 *   File entity object or FALSE.
 */
function _append_file_info_get_file_from_path($path) {
  if (preg_match('`^' . preg_quote(variable_get('file_public_path', conf_path() . '/files'),'`') . '/(.+)$`', $path, $matches)) {
    $files = file_load_multiple(array(), array('uri' => 'public://' . $matches[1]));
  }
  elseif (variable_get('file_private_path') && variable_get('file_private_path') != '' && preg_match('`^' . preg_quote(variable_get('file_private_path'),'`') . '/(.+)$`', $path, $matches)) {
    $files = file_load_multiple(array(), array('uri' => 'private://' . $matches[1]));
  }
  elseif (preg_match('`^file/(\d+)`', $path, $matches) || preg_match('`^media/(\d+)`', $path, $matches)) {
    $fid = $matches[1];
    $files = file_load_multiple(array($fid));
  }

  if (empty($files)) {
    return FALSE;
  }
  $file = reset($files);
  // Check whether file is local.
  $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
  if (!$wrapper instanceof DrupalLocalStreamWrapper) {
    // File is not local.
    return FALSE;
  }
  return $file;
}

/**
 * Append File Info Filter process callback.
 */
function append_file_info_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $dom = filter_dom_load($text);
  foreach ($dom->getElementsByTagName('a') as $link) {
    $href = $link->getAttribute('href');
    preg_match('`^' . preg_quote(base_path(), '`') . '(.+)`', $href, $matches);
    if (!$matches) {
      continue;
    }
    $path = rawurldecode($matches[1]);
    $path = _append_file_info_strip_langcode($path, $langcode);
    $file = _append_file_info_get_file_from_path($path);
    if (!empty($file)) {
      $class = $link->getAttribute('class');
      // Skip file if it has a no-file-info class.
      if (!empty($class) && strstr('no-file-info', $class)) {
        continue;
      }
      // Skip link if it has images in it.
      foreach ($link->getElementsByTagName('img') as $img) {
        // Process next link.
        continue 2;
      }
      // Add file info.
      $within_text = _append_file_info_get_extra_link_text($file);
      $within = new DOMText($within_text);

      $link->appendChild($within);

      // Add a wrapper span.
      $new_span = $dom->createElement('span');
      $new_span->setAttribute('class','file-with-file-info');

      // Replace link with this wrapper span.
      $link->parentNode->replaceChild($new_span, $link);
      // Append this link to wrapper span.
      $new_span->appendChild($link);

      $before = $dom->createDocumentFragment();
      // Add file icon.
      $before->appendXML(theme('file_icon', array('file' => $file)) . '&#160;');
      $link->parentNode->insertBefore($before, $link);
    }
  }
  $html = filter_dom_serialize($dom);
  return $html;
}

/**
 * Strips the langcode prefix from the path.
 */
function _append_file_info_strip_langcode($path) {
  $languages = _append_file_info_get_languages();
  if ($languages) {
    $args = explode('/', $path);
    $prefix = array_shift($args);
    foreach ($languages as $language) {
      if (!empty($language->prefix) && ($language->prefix == $prefix)) {
        // Set langcode to this language
        $langcode = $language->language;
        $path = implode('/', $args);
        break;
      }
    }
  }

  return $path;
}

/**
 * Gets a list of all enabled languages.
 */
function _append_file_info_get_languages() {
  static $languages;

  if (!isset($languages)) {
    $languages = FALSE;
    if (drupal_multilingual() && language_negotiation_get_any(LOCALE_LANGUAGE_NEGOTIATION_URL)) {
      $languages = language_list('enabled');
      $languages = $languages[1];
    }
  }

  return $languages;
}
