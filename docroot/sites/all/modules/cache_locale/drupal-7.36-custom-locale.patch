diff --git a/modules/locale/locale.module b/modules/locale/locale.module
index 5139191..eb50780 100644
--- a/modules/locale/locale.module
+++ b/modules/locale/locale.module
@@ -666,6 +666,33 @@ function locale_modules_disabled($modules) {
  *   Language code to use for the lookup.
  */
 function locale($string = NULL, $context = NULL, $langcode = NULL) {
+  // Support for custom locale function.
+  static $custom_locale = NULL;
+  if (!isset($custom_locale)) {
+    $custom_locale = variable_get('custom_locale', FALSE);
+    if ($custom_locale) {
+      if (!class_exists($custom_locale)) {
+        // Calling watchdog results in calling hook_watchdog, that might call
+        // t() resulting in calling this function. Because of this we have to
+        // set the static $custom_locale to false before calling watchdog, or
+        // the next time this function is called, it will think that the class
+        // exists.
+        $locale_class = $custom_locale;
+        $custom_locale = FALSE;
+        watchdog('locale', 'Class %class does not exist', array('%class' => $locale_class), WATCHDOG_WARNING);
+      }
+      elseif (!class_implements($custom_locale, 'LocaleInterface')) {
+        // See comment above.
+        $locale_class = $custom_locale;
+        $custom_locale = FALSE;
+        watchdog('locale', 'Class %class does not implement LocaleInterface', array('%class' => $locale_class), WATCHDOG_WARNING);
+      }
+    }
+  }
+  if ($custom_locale && !empty($custom_locale::$isValid)) {
+    return $custom_locale::locale($string, $context, $langcode);
+  }
+
   global $language;
 
   // Use the advanced drupal_static() pattern, since this is called very often.
