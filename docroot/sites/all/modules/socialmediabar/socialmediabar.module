<?php

/**
 * @file
 * SocialMediaBar mainline code.
 *
 * Provides the mainline code for SocialMediaBar, including the admin
 * interfaces, proxy URLs, and rendering.
 */

require_once 'src/Network/NetworkFactory.php';

/**
 * Implements hook_menu().
 */
function socialmediabar_menu() {
  return array(
    'admin/config/services/socialmediabar' => array(
      'title' => 'Social Media Bar Admin',
      'description' => 'Set up configuration options for the Social Media Bar',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('socialmediabar_admin_form'),
      'access arguments' => array('administer socialmediabar settings'),
    ),
    'socialmediabar/countproxy' => array(
      'title' => 'Social Media Bar Admin',
      'page callback' => 'socialmediabar_countproxy',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'socialmediabar/shareproxy' => array(
      'page callback' => 'socialmediabar_shareproxy',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * The main admin form.
 *
 * @return array
 *   Returns the render array for the admin form.
 */
function socialmediabar_admin_form($form = array(), &$form_state = array()) {
  $form['instructions'] = array(
    '#type' => 'markup',
    '#markup' => 'SocialMediaBar is a small media sharing bar that will sit in your template, as well as float to the side as your users scroll down the page. You can decide which networks you want to provide access to, and fill in any needed network information here.',
  );

  $form['available_networks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Available Networks'),
  );

  $form['available_networks']['socialmediabar_enabled_networks'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'facebook' => t('Facebook'),
      'twitter' => t('Twitter'),
      'linkedin' => t('LinkedIn'),
      'googleplus' => t('Google+'),
      'email' => t('ShareThis Email'),
    ),
    '#default_value' => array_values(variable_get('socialmediabar_enabled_networks', array())),
  );

  $form['cache_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cache Settings'),
    '#description' => t('SocialMediaBar will cache the counts from the social media networks to speed up rendering, especially on heavily trafficked sites. By default we cache the results for 30 minutes, but you can change this value to better fit your traffic situation.<br/><br/>Please note, that if you change this to a smaller setting, the old data that is still cached will stay at the old time limit until it expires. You will need to clear your cache via the Performance page to flush the old data.'),
  );

  $form['cache_settings']['socialmediabar_cache_time'] = array(
    '#type' => 'select',
    '#title' => t('Cache Time-To-Live:'),
    '#options' => array(
      0 => t('Never'),
      5 => t('5 minutes'),
      10 => t('10 minutes'),
      15 => t('15 minutes'),
      20 => t('20 minutes'),
      25 => t('25 minutes'),
      30 => t('30 minutes'),
      35 => t('35 minutes'),
      40 => t('40 minutes'),
      45 => t('45 minutes'),
      50 => t('50 minutes'),
      55 => t('55 minutes'),
      60 => t('60 minutes'),
    ),
    '#default_value' => variable_get('socialmediabar_cache_time', 30),
  );

  $form['sharethis_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('ShareThis Settings'),
    '#description' => t('This module requires signing up with ShareThis and getting an API key through the developer program. Please visit <a href="http://developer.sharethis.com/">http://developer.sharethis.com/</a> to get signed up and request a key.'),
  );

  $form['sharethis_settings']['socialmediabar_sharethis_apikey'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#default_value' => variable_get('socialmediabar_sharethis_apikey', ''),
    '#title' => t('ShareThis API Key:'),
  );

  $form['additional_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional Settings'),
  );

  $visible_lib = libraries_load('jquery-visible');
  if ($visible_lib && $visible_lib['loaded']) {
    $form['additional_settings']['socialmediabar_always_visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Always Visible'),
      '#default_value' => variable_get('socialmediabar_always_visible', 0),
      '#description' => t('With this enabled, the sharing bar will always be visible as a floating element when it is not visible at the rendered location. For example, if you put SocialMediaBar near the title, and the user scrolls down, the bar will appear on the side of the page. Requires the jQuery Visible module'),
    );
  }
  else {
    $form['additional_settings']['socialmediabar_always_visible'] = array(
      '#type' => 'markup',
      '#markup' => '<strong>Always Visible</strong> - Please download and install the jQuery Visible module to enable "Always Visible" options.',
    );
  }

  return system_settings_form($form);
}

/**
 * Callback to get the count for a specific URL from a specific provider.
 *
 * Contacts the ShareThis API to return a count for a URL against a network
 * Since the ShareThis API doesn't allow cross domains requests, we let the
 * server handle it. Since we want the response, we just return it to the
 * browser as a JSON object.
 */
function socialmediabar_countproxy() {
  $params = drupal_get_query_parameters();
  $errors = array();

  if (!isset($params['url'])) {
    $errors[] = t('Please provide a URL to check.');
  }

  if (!isset($params['provider'])) {
    $errors[] = t('Please provide a provider to check against');
  }

  if (count($errors)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_json_output(array('errors' => $errors));
    drupal_exit();
  }

  $url = $params['url'];
  $provider = $params['provider'];

  try {
    $network = SocialMediaBar\Network\NetworkFactory::getNetwork($params['provider']);
    $count = $network->getCount($url);

    drupal_json_output(array($provider => array('outbound' => $count)));
  }
  catch (Exception $e) {
    drupal_add_http_header('Status', '500 Internal Server Error');
    drupal_json_output(array('errors' => array($e->getMessage())));
    watchdog_exception('socialmediabar', $e);
    drupal_exit();
  }
}

/**
 * Returns a URL to forward the user on to.
 */
function socialmediabar_shareproxy() {
  $params = drupal_get_query_parameters();
  $errors = array();

  if (!isset($params['url'])) {
    $errors[] = 'Please provide a URL to share.';
  }

  if (!isset($params['network'])) {
    $errors[] = 'Please provide a network to use for sharing';
  }

  if (!isset($params['title'])) {
    $params['title'] = '';
  }

  if (count($errors)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_json_output(array('errors' => $errors));
    drupal_exit();
  }

  try {
    $network = SocialMediaBar\Network\NetworkFactory::getNetwork($params['network']);
    drupal_goto($network->buildShareURL($params['url'], $params['title']));
    drupal_exit();
  }
  catch (Exception $e) {
    drupal_add_http_header('Status', '500 Internal Server Error');
    drupal_json_output(array('errors' => array($e->getMessage())));
    watchdog_exception('socialmediabar', $e);
    drupal_exit();
  }
}

/**
 * Implements hook_theme().
 */
function socialmediabar_theme() {
  return array(
    'socialmediabar' => array(
      'template' => 'socialmediabar',
      'path' => drupal_get_path('module', 'socialmediabar') . '/templates/',
      'variables' => array('api_key' => NULL, 'networks' => NULL),
    ),
  );
}

/**
 * Renders out the social media bar.
 */
function socialmediabar_render() {
  $output = '';

  if (function_exists('curl_version')) {
    $always_visible = variable_get('socialmediabar_always_visible', 0);

    if ($always_visible) {
      if (($jq_visible_library = libraries_load('jquery-visible')) && !empty($jq_visible_library['loaded'])) {
        drupal_add_js(drupal_get_path('module', 'socialmediabar') . '/js/socialmediabar_visible.js', 'file');
      }
    }

    $api_key = variable_get('socialmediabar_sharethis_apikey', '');
    if (!empty($api_key)) {
      drupal_add_js(array('socialmediabar' => array('apikey' => $api_key)), 'setting');

      drupal_add_js('https://ws.sharethis.com/button/buttons.js', array(
        'type' => 'external',
      ));

      drupal_add_js(drupal_get_path('module', 'socialmediabar') . '/js/socialmediabar_email.js', array(
        'type' => 'file',
        'scope' => 'footer',
      ));
    }

    $networks = variable_get('socialmediabar_enabled_networks', array());
    foreach ($networks as $network => $enabled) {
      if ($network !== $enabled) {
        unset($networks[$network]);
      }
    }

    $output = theme('socialmediabar', array('api_key' => $api_key, 'networks' => $networks));
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function socialmediabar_permission() {
  return array(
    'administer socialmediabar settings' => array(
      'title' => t('Administer SocialMediaBar Settings'),
      'description' => t('Allows a user to make changes to SocialMediaBar'),
    ),
  );
}

/**
 * Implements hook_modules_enabled().
 *
 * Disables itself if cURL is not enabled
 */
function socialmediabar_modules_enabled($modules) {
  if (!function_exists('curl_version')) {
    drupal_set_message(t('SocialMediaBar requires cURL to be enabled in your PHP setup. Please enable cURL to activate SocialMediaBar.'), 'error');
    module_disable(array('socialmediabar'));
  }
}
