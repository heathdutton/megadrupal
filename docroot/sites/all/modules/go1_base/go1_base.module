<?php

/**
 * @file go1_base.module
 *
 * Include custom functions.
 *
 * @todo  Next release:
 *
 *  - Remove go1_fn(), go1_fn_fake()
 *  - Update docs for service container > reuse option.
 */

use Drupal\go1_base\Cache;
use Drupal\go1_base\Config\Config;
use Drupal\go1_base\Container;
use Drupal\go1_base\Helper\ModulesFetcher;

require_once dirname(__FILE__) . '/lib/GO1.php';
require_once dirname(__FILE__) . '/lib/Autoloader.php';
require_once dirname(__FILE__) . '/go1_base.hooks.inc';
require_once dirname(__FILE__) . '/go1_base.missing.inc';
require_once dirname(__FILE__) . '/go1_base.hack.inc';

/**
 * Can not:
 *    new Thing()->doStuff();
 *
 * Can:
 *    go1_id(new Thing())->doStuff();
 */
function go1_id($x) {
  return $x;
}

/**
 * Invokes the "new" operator with a vector of arguments. There is no way to
 * call_user_func_array() on a class constructor, so you can instead use this
 * function:
 *
 * $obj = go1_newv($class_name, $argv);
 *
 * That is, these two statements are equivalent:
 *
 * $pancake = new Pancake('Blueberry', 'Maple Syrup', true);
 * $pancake = newv('Pancake', array('Blueberry', 'Maple Syrup', true));
 *
 * @param  string  The name of a class.
 * @param  list    Array of arguments to pass to its constructor.
 * @return obj     A new object of the specified class, constructed by passing
 *                  the argument vector to its constructor.
 */
function go1_newv($class_name, $argv = array()) {
  $reflector = new ReflectionClass($class_name);
  if ($argv) {
    return $reflector->newInstanceArgs($argv);
  }
  return $reflector->newInstance();
}

/**
 * Service container.
 *
 * @staticvar \Drupal\go1_base\Container $container
 * @param string $id
 * @return mixed
 *
 * @see https://github.com/mrsinguyen/go1_base/wiki/7.x-2.x-service-container
 */
function go1_container($id = 'container') {
  static $container = NULL;

  if (!$container) {
    $container = new Container();
  }

  $args = func_get_args();
  if (1 !== count($args)) {
    array_shift($args);
    $container["{$id}:arguments"] = $args;
  }

  return $container[$id];
}

/**
 * Wrapper for Key-Value services.
 *
 * @param  string $bin
 * @param  array  $options
 */
function go1_kv($bin, $options = array(), $engine_name = 'array') {
  global $go1;

  if (isset($go1['kv'][$bin]['engine'])) {
    $engine_name = $go1['kv'][$bin]['engine'];
  }

  $engine = go1_container("kv.engine.{$engine_name}");
  $engine->setOptions($options);

  return $engine;
}

/**
 * Make function easier to be replaced by an other one.
 *
 * For example:
 *
 *  // Override entity_bundle function
 *  $GLOBALS['conf']['go1fn:entity_bundle'] = function($type, $entity) { return $entity->type; };
 *
 *  Call replacable entity_bundle function:
 *    go1_fn('entity_bundle', 'node', $node);
 *
 *  @see  go1_fn_fake()
 *  @todo Use go1_fn class, remove in next release.
 */
function go1_fn() {
  $args = func_get_args();
  $fn = array_shift($args);
  return call_user_func_array(variable_get("go1fn:{$fn}", $fn), $args);
}

/**
 * Similar to go1_fn(). Usage:
 *
 *  \go1_fn::entity_bundle('node', $node);
 */
class go1_fn {

  public static function __callStatic($fn, $args) {
    return call_user_func_array(variable_get("go1fn:{$fn}", $fn), $args);
  }
}

/**
 * Care about site caching.
 *
 * @param  array|string $options
 * @param  Closure|string $callback
 * @param  array  $arguments
 * @return mixed
 * @see    go1_cache_flush_by_tag()
 * @see    https://github.com/mrsinguyen/go1_base/wiki/7.x-2.x-cache-warming
 * @see    https://github.com/mrsinguyen/go1_base/wiki/7.x-2.x-Function:-go1_cache
 */
function go1_cache($options, $callback = NULL, $arguments = array()) {
  // User prefer string as cache options
  // Style: $id OR $id,$ttl OR $id,~,$bin OR $id,~,~ OR $id,$ttl,$bin
  if (is_string($options)) {
    @list($id, $ttl, $bin) = explode(',', $options);

    $options = array(
      'id'  => $id,
      'ttl' => is_null($ttl) ? NULL : ('~' === $ttl ? NULL : $ttl),
      'bin' => is_null($bin) ? NULL : ('~' === $bin ? NULL : $bin),
    );
  }

  if (isset($options['cache_id'])) {
    $options['id'] = $options['cache_id'];
    unset($options['cache_id']);
  }

  foreach (array('callback', 'options') as $k) {
    if (!empty($kk) && isset($options[$k])) {
      $kk = $options[$k];
    }
  }

  return go1_id(new Cache($options, $callback, $arguments))->get();
}

/**
 * Delete cached data by tags.
 *
 * @see go1_cache()
 * @param  array  $tags
 */
function go1_cache_flush_by_tags($tags = array()) {
  go1_container('cache.tag_flusher')->flush($tags);
}

/**
 * Usage
 *
 * // Lookup at /path/to/my_module/config/config.yml > webmaster
 * $webmaster_email = go1_config('my_module')->get('webmaster');
 *
 * // Lookup at /path/to/my_module/config/templates.yml > email.notify
 * $mail_notify_template = go1_config('my_module', 'templates')->get('email.notify');
 *
 * @param  string  $module    Module name
 * @param  string  $id        Config ID
 * @param  boolean $refresh   Build new cache
 * @return Config
 */
function go1_config($module, $id = 'config', $refresh = FALSE) {
  return go1_container('config')->setModule($module)->setId($id);
}

/**
 * Get modules that depends on a specific module.
 * @param string $base_module
 * @param string $config_file
 * @return array
 * @see system_list()
 */
function go1_modules($base_module = 'go1_base', $config_file = '') {
  $o['ttl'] = '+ 1 year';
  $o['bin'] = 'cache_bootstrap';
  $o['id']  = "go1modules:{$base_module}:{$config_file}";

  return go1_cache($o, function() use ($base_module, $config_file) {
    $module_enabled = system_list('module_enabled');
    return go1_id(new ModulesFetcher($base_module, $config_file))
        ->fetch($module_enabled);
  });
}

/**
 * Shortcut to render to icon.
 */
function go1_icon($name, $source = 'icon.fontawesome') {
  try {
    return go1_container($source)->get($name)->render();
  }
  catch (Exception $e) {
    return $e->getMessage();
  }
}

/**
 * Generate path for library.
 *
 * @param  string $name
 * @param  string $version
 * @return string
 */
function go1_library($name, $version = 'default', $include_drupal_root = TRUE) {
  $paths = array(conf_path(), 'sites/all');
  foreach ($paths as $path) {
    $return = DRUPAL_ROOT . "/{$path}/libraries/{$name}";
    if ('default' !== $version) {
      $return .= "/{$version}";
    }

    if (FALSE !== @fileowner($return)) {
      return $include_drupal_root ? rtrim($return, '/') : substr($return, strlen(DRUPAL_ROOT) + 1);
    }
  }
  $msg = "Missing library: {$name} (version {$version})";
  if (go1_debug()) {
    $msg .= ' You can run `drush go1r` to install missing dependencies.';
  }
  throw new Exception($msg);

}

/**
 * This is wrapper for typped-data, an API to make sure data provided is matched
 * to its schema.
 *
 * Example:
 *
 *   $schema = array('type' => 'constant');
 *   $input = 'MENU_LOCAL_TASK';
 *   $data = go1_data($schema, $input);
 *   // Validate
 *   echo $data->validate($error) ? $data->getValue() : $error;
 *
 * @see https://github.com/mrsinguyen/go1_base/wiki/7.x-2.x-typed-data
 */
function go1_data($def, $value = NULL) {
  if (!is_array($def)) {
    throw new Exception('Definition must be an array.');
  }

  if (!isset($def['type'])) {
    throw new Exception('Missing type key');
  }

  $service = strpos($def['type'], 'type.') === 0 ? $def['type'] : ('type.' . $def['type']);

  // Special type: list<element_type>
  if (strpos($service, 'type.list<') === 0) {
    $def['element_type'] = substr($service, 10, -1);
    $service = 'type.list';
  }

  return go1_container($service)
    ->setDef($def)
    ->setValue($value)
  ;
}
