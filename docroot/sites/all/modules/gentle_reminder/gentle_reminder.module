<?php

/**
 * Implements hook_init().
 */
function gentle_reminder_init() {
  module_load_include('mail_edit.inc', 'gentle_reminder');
}

/**
 * Implements hook_menu().
 */
function gentle_reminder_menu() {
  $items = array();

  $items['config/system/gentle_reminder'] = array(
    'title' => 'Gentle Reminder',
    'description' => 'Configure reminder settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gentle_reminder_admin_settings'),
    'access arguments' => array('administer gentle reminder'),
    'file' => 'gentle_reminder.admin.inc',
  );

  $items['user/%user/reminder'] = array(
    'title' => 'Reminder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gentle_reminder_user_settings_form', 1),
    'access callback' => 'gentle_reminder_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gentle_reminder.pages.inc',
  );

  return $items;
}

/**
 * Access callback for user account reminder.
 */
function gentle_reminder_access($account) {
  $is_owner = $GLOBALS['user']->uid == $account->uid;
  $has_access = user_access('edit reminder settings');
  $is_administer = user_access('administer gentle reminder');

  return ($is_owner && $has_access) || $is_administer;
}

/**
 * Implements hook_permission().
 */
function gentle_reminder_permission() {
  $permissions = array(
    'administer gentle reminder' => array(
      'title' => t('Administer Gentle Reminder'),
      'description' => t('Allows to administer gentle reminder module.'),
    ),
    'edit reminder settings' => array(
      'title' => t('Edit reminder settings'),
      'description' => t('Allows a user to change reminder settings.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_cronapi().
 */
function gentle_reminder_cronapi($op, $job = NULL) {
  $items = array();

  foreach (module_implements('gr_queue') as $module) {
    $items['gr_' . $module] = array(
      'rule' => '4 0 1 * *', // Once a month.
      'callback' => 'gentle_reminder_filler',
      'arguments' => array($module),
    );
  }

  return $items;
}

function gentle_reminder_filler($module) {
  // Add new.
  $queue = DrupalQueue::get('gr_' . $module, TRUE);

  $items = module_invoke($module, 'gr_queue');
  foreach ($items as $item) {
    $queue->createItem($item);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function gentle_reminder_cron_queue_info() {
  $items = array();

  $hook = 'gr_worker';
  foreach (module_implements($hook) as $module) {
    $items['gr_' . $module] = array(
      'worker callback' => $module . '_' .  $hook,
      'time' => 30,
    );
  }

  return $items;
}

/**
 * Send a notification email to a recipient.
 *
 * @param $recipient
 * @param $module
 * @param $params
 */
function gentle_reminder_send_mail($recipient, $module, $params) {
  $is_dev = variable_get('gentle_reminder_dev_mode', FALSE);
  $is_allowed = gentle_reminder_allowed_to_remind($recipient, $module);

  // Check dev mode.
  if (!$is_dev && $is_allowed) {
    $params['gentle_reminder']['recipient'] = $recipient;
    $params['gentle_reminder']['module'] = $module;

    drupal_mail('gentle_reminder', $module, $recipient->mail, user_preferred_language($recipient), $params);
  }
}

/**
 * Implements hook_mail().
 */
function gentle_reminder_mail($key, &$message, $params) {
  $options = array('language' => user_preferred_language($params['recipient']));
  $mail_edit = gentle_reminder_mail_edit_text($key, $options['language']);

  $message['subject'] = trim(token_replace($mail_edit['subject'], $params, $options));
  $message['body'][] = trim(token_replace($mail_edit['body'], $params, $options));
}

/**
 * Does user allowed us to remind him.
 *
 * @param $account
 * @param $module
 *
 * @return bool
 */
function gentle_reminder_allowed_to_remind($account, $module) {
  $is_allowed = db_select('gentle_reminder_user_settings', 's')
    ->fields('s', array('module', 'status'))
    ->condition('s.uid', $account->uid)
    ->condition('s.module', $module)
    ->execute()->fetchAllAssoc('module');

  return isset($is_allowed[$module]) ? (bool)$is_allowed[$module]->status : TRUE;
}
