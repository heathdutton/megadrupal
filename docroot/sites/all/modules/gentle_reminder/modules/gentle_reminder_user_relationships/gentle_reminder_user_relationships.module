<?php

/**
 * Implements hook_gr_info().
 */
function gentle_reminder_user_relationships_gr_info() {
  return array(
    'name' => t('Pending invitations'),
    'needs-data' => array('user-relationships'),
  );
}

/**
 * Implements hook_gr_queue().
 */
function gentle_reminder_user_relationships_gr_queue() {
  // Drop old records.
  db_delete('queue')->condition('name', 'gr_gentle_reminder_user_relationships')->execute();

  $query = db_select('user_relationships', 'r');
  $query->innerJoin('users', 'u', 'r.requestee_id = u.uid');
  $query->condition('r.approved', 0);
  $query->condition('u.status', 1);
  $query->fields('r', array('requestee_id'));
  $result = $query->execute()->fetchCol();

  return array_unique($result);
}

/**
 * Implements hook_gr_worker().
 */
function gentle_reminder_user_relationships_gr_worker($uid) {
  $recipient = user_load($uid);

  if ($recipient->status) {
    $relationships = _gentle_reminder_user_relationships_get_relationships($recipient);

    if ($relationships) {
      $params = array();
      $params['gentle_reminder']['items'] = $relationships;
      $params['gentle_reminder']['rendered_items'] = _gentle_reminder_user_relationships_render_items($relationships);
      gentle_reminder_send_mail($recipient, 'gentle_reminder_user_relationships', $params);
    }
  }
}

/**
 * Implements hook_gr_template().
 */
function gentle_reminder_user_relationships_gr_template() {
  return array(
    'subject' => t('You have some pending invitations on [site:name]'),
    'body' => t('Hi [gentle_reminder:recipient:name],
This is an automatic reminder from the site [site:name]. You have [gentle_reminder:items:count] pending invitations.
[gentle_reminder:items]'),
    'item_body' => t("[user-relationships:requester:name]
Link to approve: [user-relationships:requester:approve-link]
Link to decline: [user-relationships:requester:delete-link]\n"),
  );
}

/**
 * Render items.
 *
 * @param $items
 *  Array of items to render.
 *
 * @return array
 *  Array of rendered items.
 */
function _gentle_reminder_user_relationships_render_items($items) {
  $templates = gentle_reminder_mail_edit_text('gentle_reminder_user_relationships');

  $rendered_items = array();
  foreach ($items as $key => $item) {
    $rendered_items[$key] = mail_edit_format($templates['item_body'], array('relationship' => $item));
  }

  return $rendered_items;
}

/**
 * Load pending relationships by user.
 *
 * @param $recipient
 *
 * @return array
 */
function _gentle_reminder_user_relationships_get_relationships($recipient) {
  $rids = db_select('user_relationships', 'r')
    ->fields('r', array('rid'))
    ->condition('r.approved', 0)
    ->condition('r.requestee_id', $recipient->uid)
    ->execute()->fetchCol();

  $relationships = array();

  if ($rids) {
    $relationships = user_relationships_load(array('rid' => $rids));
    foreach ($relationships as &$relationship) {
      $requester = user_load($relationship->requester_id);
      $requestee = user_load($relationship->requestee_id);

      // Load user objects, required by tokens.
      if ($requester && $requestee) {
        $relationship->requester = $requester;
        $relationship->requestee = $requestee;
      }
      // If user is dead - do not suggest relation.
      else {
        $relationship = NULL;
      }
    }
  }

  $relationships = array_filter($relationships);
  drupal_alter('gr_user_relationships_items', $recipient, $relationships);

  return $relationships;
}
