<?php

/**
 * Implements hook_gr_info().
 */
function gentle_reminder_privatemsg_gr_info() {
  return array(
    'name' => t('Unread messages'),
    'needs-data' => array('privatemsg_message'),
  );
}

/**
 * Implements hook_gr_queue().
 */
function gentle_reminder_privatemsg_gr_queue() {
  // Drop old records.
  db_delete('queue')->condition('name', 'gr_gentle_reminder_privatemsg')->execute();

  $query = db_select('pm_message', 'm');
  $query->innerJoin('pm_index', 'i', 'm.mid = i.mid');
  $query->innerJoin('users', 'u', 'i.recipient = u.uid');
  $query->condition('i.is_new', 1);
  $query->condition('u.status', 1);
  $query->fields('i', array('recipient'));
  $result = $query->execute()->fetchCol();

  return array_unique($result);
}

/**
 * Implements hook_gr_worker().
 */
function gentle_reminder_privatemsg_gr_worker($uid) {
  $recipient = user_load($uid);
  $messages = _gentle_reminder_privatemsg_get_unread_messages($recipient);

  if ($recipient && $messages) {
    // Delete not valid messages.
    foreach ($messages as &$message) {
      if (!_pm_email_notify_send_check($recipient->uid, $message)) {
        unset($message);
      }
    }

    // Send messages for rest.
    if (!empty($messages)) {
      $params = array();
      $params['gentle_reminder']['items'] = $messages;
      $params['gentle_reminder']['rendered_items'] = _gentle_reminder_privatemsg_render_items($messages);

      gentle_reminder_send_mail($recipient, 'gentle_reminder_privatemsg', $params);

      watchdog('gentle_reminder_privatemsg', 'Reminder: %count unread messages to !recipient', array(
        '%count' => count($messages),
        '!recipient' => theme('username', array('account' => $recipient))
      ));
    }
  }
}

/**
 * Implements hook_gr_template().
 */
function gentle_reminder_privatemsg_gr_template() {
  return array(
    'subject' => t('You have some unread messages on [site:name]'),
    'body' => t('Hi [gentle_reminder:recipient:name],
This is an automatic reminder from the site [site:name]. You have [gentle_reminder:items:count] unread messages.
[gentle_reminder:items]'),
    'item_body' => t("Author: [privatemsg_message:author]
Subject: [privatemsg_message:subject]
Body: [privatemsg_message:body]
url: [privatemsg_message:url]\n"),
  );
}

/**
 * Render items.
 *
 * @param $items
 *  Array of items to render.
 *
 * @return array
 *  Array of rendered items.
 */
function _gentle_reminder_privatemsg_render_items($items) {
  $templates = gentle_reminder_mail_edit_text('gentle_reminder_privatemsg');

  $rendered_items = array();
  foreach ($items as $key => $item) {
    $rendered_items[$key] = mail_edit_format($templates['item_body'], array('privatemsg_message' => $item));
  }

  return $rendered_items;
}

/**
 * Returns messages for current user.
 *
 * @param $recipient
 * @return array
 */
function _gentle_reminder_privatemsg_get_unread_messages($recipient) {
  $query = db_select('pm_message', 'm');
  $query->innerJoin('pm_index', 'i', 'm.mid = i.mid');
  $query->innerJoin('users', 'u', 'i.recipient = u.uid');
  $query->condition('i.recipient', $recipient->uid);
  $query->condition('i.is_new', 1);
  $query->condition('u.status', 1);
  $query->fields('m', array('mid'));
  $result = $query->execute()->fetchCol();

  $messages = privatemsg_message_load_multiple(array_unique($result));
  drupal_alter('gr_privatemsg_items', $recipient, $messages);

  return $messages;
}
