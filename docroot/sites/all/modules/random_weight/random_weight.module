<?php
/**
 * @file
 * Random Weight main module file.
 */

/**
 * Provide some simple instructions regarding how to use the module.
 *
 * Implements hook_help().
 */
function random_weight_help($path, $arg) {
  switch ($path) {
    case 'admin/help#random_weight';
      $output = '<h3>' . t('Random Weight') . '</h3>';
      $output .= "<p>Simply enable 'Random Weight' under weight settings when
                     editing the content type and then select a frequency.</p>";

      return $output;
      break;
  }
}

/**
 * Implements hook_cron().
 */
function random_weight_cron() {

  // Load required files.
  module_load_include('inc', 'random_weight', 'includes/settings');
  module_load_include('inc', 'random_weight', 'includes/frequencies');

  // Select all settings.
  $settings = _random_weight_get_all_settings();

  // Get frequencies.
  $frequencies = _random_weight_get_frequencies();

  foreach ($settings as $type => $setting) {
    $function = $frequencies[$setting['frequency']]['callback'];

    // Check if we should update the weights.
    if ($function($setting['last_run'])) {
      $settings[$type]['last_run'] = _random_weight_update($type, $setting['weight_range']);
    }
  }

  // Save the last run times.
  _random_weight_save_settings($settings);
}

/**
 * Provides three frequencies.
 *
 * Implements hook_random_weight_frequency_info().
 */
function random_weight_random_weight_frequency_info() {
  return array(
    'daily' => array(
      'title' => t('Run once daily'),
      'callback' => '_random_weight_weekly',

    ),
    'weekly' => array(
      'title' => t('Run once weekly'),
      'callback' => '_random_weight_weekly',
    ),
    'monthly' => array(
      'title' => t('Run once month'),
      'callback' => '_random_weight_monthly',
    ),
  );
}

/**
 * Re-order our module so we always run after the Weight module.
 *
 * Implements hook_module_implements_after().
 */
function random_weight_module_implements_alter(&$implem, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implem['random_weight'])) {

      // Re-order my module.
      $random_weight = $implem['random_weight'];
      unset($implem['random_weight']);
      $implem['random_weight'] = $random_weight;
    }
  }
}

/**
 * Hook info the node type form to provide our own settings.
 *
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array &$form
 *   The form array.
 *
 * @param array &$form_state
 *   The form state array.
 */
function random_weight_form_node_type_form_alter(&$form, &$form_state) {

  // Load required files.
  module_load_include('inc', 'random_weight', 'includes/settings');
  module_load_include('inc', 'random_weight', 'includes/frequencies');

  // Load settings for this content type.
  $settings = _random_weight_get_settings($form['#node_type']->type);

  // Get frequencies.
  $frequencies = _random_weight_get_frequencies();

  /*
   * Build a nicely formatted key => title array of
   * frequencies for the select options.
   */
  $frequency_options = array();
  foreach ($frequencies as $key => $frequency) {
    $frequency_options[$key] = $frequency['title'];
  }

  // Get the selected frequency.
  $frequency = isset($settings['frequency']) ? $settings['frequency'] : '';

  // Is random weight enabled?
  $enabled = (empty($settings) ? 0 : 1);

  $form['weight_settings']['random_weight_enabled'] = array(
    '#type' => 'radios',
    '#title' => t('Enable Random Weight.'),
    '#description' => t('Enable random weight for this content type?'),
    '#options' => array(
      t('No'),
      t('Yes'),
    ),
    '#default_value' => $enabled,
  );

  $form['weight_settings']['random_weight_frequency'] = array(
    '#type' => 'select',
    '#title' => t('Update Frequency'),
    '#description' => t('How often should the node weight be updated?'),
    '#options' => $frequency_options,
    '#default_value' => $frequency,
  );

  $form['#submit'][] = '_random_weight_form_submit';

}

/**
 * Provide our own submit handler for this form so we can save our settings.
 *
 * @param array $form
 *   The form array.
 *
 * @param array $form_state
 *   The form state array.
 */
function _random_weight_form_submit($form, &$form_state) {
  $weight_enabled = $form_state['values']['weight_enabled'];
  $random_weight_enabled = $form_state['values']['random_weight_enabled'];

  // Content type.
  $type = $form_state['values']['type'];

  // Run frequency / callback key.
  $frequency = $form_state['values']['random_weight_frequency'];

  // The weight range.
  $range = $form_state['values']['weight_range'];

  if ($weight_enabled) {
    if ($random_weight_enabled) {

      $settings = array(
        $type => array(
          'type' => $type,
          'frequency' => $frequency,
          'weight_range' => $range,
        ),
      );

      // Save settings.
      _random_weight_save_settings($settings);

    }
    else {
      // Delete settings.
      _random_weight_delete_settings($type);
    }
  }
}

/**
 * Randomize the results in our entity field query.
 *
 * @param object $query
 *   The select query object.
 */
function random_weight_query_random_alter($query) {
  $query->orderRandom();
}

/**
 * Randomly updates all the weights for the specified content type.
 *
 * @param string $content_type
 *   The content type.
 *
 * @param int $range
 *   The range as a number.
 *
 * @return int
 *   Returns the current request time.
 */
function _random_weight_update($content_type, $range) {

  // Retrieve all nodes for this content type.
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'node', '=')
    ->entityCondition('bundle', $content_type)
    ->addTag('random')
    ->range(0, $range * 2)
    ->execute();

  // If we have nodes.
  if (isset($results['node'])) {
    // Get the node ids.
    $nids = array_keys($results['node']);

    // Init counter to use for weights. Starts at -range through to range.
    $weight = 0 - abs($range);

    // Load the random nodes.
    $nodes = node_load_multiple($nids);

    // Loop over random $nodes updating the node weight.
    foreach ($nodes as $node) {

      $node->weight_weight = $weight;

      // Save the node weight.
      _weight_set_weight($node);

      // Increment counter.
      $weight++;
    }
  }

  return REQUEST_TIME;
}
