<?php

/**
* @file
* This file describe logic to display secundary menu as group tabs for OG
*
*/
/**
 * Returns child nids of a OG node
 *
 * @param  integer $gid
 *   nid of a OG node
 * @param  string $entity_type
 *   entity type
 * @return array
 *   Returns an array of child nids of a OG node
 */
function og_tabs_group_child_nids($gid, $entity_type = 'node') {

  $childs = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'og_membership')
    ->entityCondition('bundle', 'og_membership_type_default')
    ->propertyCondition('entity_type', $entity_type)
    ->propertyCondition('gid', $gid)
    ->propertyOrderBy('etid', 'ASC');

  $results = $query->execute();

  if (isset($results['og_membership'])) {
    $rows = $results['og_membership'];
    foreach ($rows as $k => $v) {
     $child = og_membership_load($v->id);
     $childs[] = call_user_func($entity_type . '_load', $child->etid);
    }
  }
  return $childs;
}

/**
 * Implements preprocess_page() to display secundary menu as group tabs
 *
 */
function og_tabs_preprocess_page(&$vars) {
  $current_menu = menu_get_item();
  if ($current_menu['path'] == 'node/%/members') {
    $gnode = node_load($current_menu['map'][1]);
    drupal_set_title($gnode->title);
    $vars['tabs']['#secondary'] = _og_tabs_display_tabs($gnode);
  }
  if (isset($vars['node']->type)) {
    if ((variable_get('og_tab_' . $vars['node']->type, 0) == 1) && ((og_is_group_type('node', $vars['node']->type)) || (og_is_group_content_type('node', $vars['node']->type)))) {
      $vars['tabs']['#secondary'] = _og_tabs_display_tabs($vars['node']);
    }
  }
}

/**
 * Returns an array of links
 * @param  object $node
 *  node object
 * @return array
 *   Returns an array of links
 */
function _og_tabs_display_tabs($node) {
  $links = array();
  // get gnode
  $gnode = _og_tabs_get_node_group($node);
  drupal_set_title($gnode->title);
  $og_childs = og_tabs_group_child_nids($gnode->nid);
  $i = 0;
  foreach ($og_childs as $child) {
  $i++;
   $links[] = array(
    '#theme' => 'menu_local_task',
    '#link' => array(
       'path' => 'node/' . $child->nid,
       'href' => 'node/' . $child->nid,
       'localized_options' => array(),
       'title' => t('Topic') . ' ' . $i,
    )
  );
  }
  // first gnode
  $glink = array(
    '#theme' => 'menu_local_task',
    '#link' => array(
       'path' => 'node/' . $gnode->nid,
       'href' => 'node/' . $gnode->nid,
       'localized_options' => array(),
       'title' => t('Introduction'),
    ));
  if (!is_null($links)) {
    array_unshift($links, $glink);
  }
  // members tab
  $memberlink = array(
    '#theme' => 'menu_local_task',
    '#link' => array(
       'path' => 'node/' . $gnode->nid . '/members',
       'href' => 'node/' . $gnode->nid . '/members',
       'localized_options' => array(),
       'title' => t('Members'),
    ));

  if (!is_null($links)) {
    array_push($links, $memberlink);
  }

  return $links;
}

/**
 * Implement hook_form_FORM_ID_alter().
 */

function og_tabs_form_node_type_form_alter(&$form, &$form_state) {
 $type = $form['#node_type']->type;
 $form['og_tabs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Organic groups (Tabs)'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#description' => t('Display tabs for OG'),
    '#weight' => 100,
  );
  $form['og_tabs']['og_tab'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use tabs'),
    '#default_value' => variable_get('og_tab_' . $type, 0),
    '#description' => t('Use tabs to display OG content types'),
  );
}

/**
 * Returns OG group node if you are enter a OG content node or a OG group node
 * @param  object $node
 *   node object
 * @return object
 *   group node object
 */
function _og_tabs_get_node_group($node) {
  if (og_is_group_content_type('node', $node->type)) {
    $gid = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['target_id'];
    $gnode = node_load($gid);
  }
  elseif (og_is_group_type('node', $node->type)) {
    $gnode = $node;
  }
  return $gnode;
}

/**
 * Implements hook_node_view to display titles for each tab
 *
 */
function og_tabs_node_view($node, $view_mode) {
  if ((variable_get('og_tab_' . $node->type, 0) == 1) && og_is_group_content_type('node', $node->type) && $view_mode == 'full') {
    $node->content['og_tabs'] = array(
      '#type' => 'markup',
      '#markup' => '<h2>' . check_markup($node->title) . '</h2>',
      '#weight' => -100,
    );
  }
}

