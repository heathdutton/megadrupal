<?php

/**
 * @file
 * Provides an Indian Version of payu payment method for Drupal Commerce.
 */

define('INDIA_COMMERCE_PAYU_COMMERCE_BILLING_PHONE_FIELD', 'commerce_billing_phone');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payu_india_commerce_payment_method_info() {
  $payment_methods = array();
  $display_title = t('India - PayU Payment Gateway');
  $payment_methods['commerce_payu_india'] = array(
    'base' => 'commerce_payu_india',
    'title' => t('PayU India'),
    'short_title' => t('payu'),
    'display_title' => $display_title,
    'description' => t('Indian version of PayU Payment Gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payu_india_settings_form($settings = NULL) {
  $form = array();
  // Merge default settings into the stored settings array.
  $settings = ( array ) $settings + array(
    'key' => '',
    'salt' => '',
    'payment_mode' => 'TEST',
  );
  $form['key'] = array(
    '#type' => 'textfield',
    '#title' => t('key'),
    '#description' => t('Your payU Merchant Key.'),
    '#default_value' => $settings['key'],
    '#size' => 12,
    '#required' => TRUE,
  );
  $form['salt'] = array(
    '#type' => 'textfield',
    '#title' => t('Salt'),
    '#description' => t('Your payU account Salt.'),
    '#default_value' => $settings['salt'],
    '#size' => 12,
    '#required' => TRUE,
  );
  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment mode'),
    '#description' => t('The mode for capturing payment.'),
    '#options' => array(
      'LIVE' => t('Live transactions'),
      'TEST' => t('Test transactions only'),
    ),
    '#default_value' => $settings['payment_mode'],
  );
  return $form;
}

/**
 * Payment method callback: redirect form.
 *
 * A wrapper around the module's general
 * use function for building a WPS form.
 */
function commerce_payu_india_redirect_form($form, &$form_state, $order, $payment_method) {

  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['key']) || empty($payment_method['settings']['salt'])) {
    drupal_set_message(t('payU is not configured for use. Please check the payU account details.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array(
      'absolute' => TRUE,
    )),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(
      'absolute' => TRUE,
      'query' => array(
        'DR' => '{DR}',
      ),
    )),
    // Specify the current payment method instance ID in the notify_url
    'pay_method' => $payment_method['instance_id'],
  );

  return commerce_payu_india_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_payu_india_redirect_form_validate($order, $payment_method) {
  $response = array();
  $response = $_REQUEST;
  $currency_code = "";
  $order_id = $response['txnid'];
  $status = $response['status'];
  $transaction_id = $response['bank_ref_num'];
  if ($response['mihpayid']) {
    $payment_id = $response['mihpayid'];
  }
  else {
    $payment_id = $response['PaymentID'];
  }
  $amount = $response['amount'];
  $description = $response['productinfo'];
  $mode = $response['mode'];
  if (array_key_exists('error', $response)) {
    $error_message = $response['error'];
  }
  watchdog('commerce_payu', 'Receiving payment response for order !order_id from PayU', array(
    '!order_id' => $order_id,
  ));
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if ($order->order_id != $order_id) {
    $auth_successful = FALSE;
  }
  else {
    $auth_successful = TRUE;
  }
  if (!$auth_successful || !$order) {
    // Invalid response.
    $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
    watchdog('commerce_payu', 'An unauthenticated response from payu made it to checkout, Order id didn\'t match! Response: @Response :.', array(
      '@Response' => print_r($response, TRUE),
    ), WATCHDOG_ERROR);
  }
  else {
    $quantity = commerce_line_items_quantity($order_wrapper->commerce_line_items, commerce_product_line_item_types());
    if ($quantity > 0) {

      // Prepare a transaction object to log the API response.
      $transaction = commerce_payment_transaction_new('commerce_payu', $order->order_id);
      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->remote_id = $payment_id;
      $transaction->remote_status = $mode;
      $transaction->amount = commerce_currency_decimal_to_amount($amount, $currency_code);
      $transaction->currency_code = $currency_code;
      $transaction->payload[REQUEST_TIME] = $response;
      $hash_data['key'] = $response['key'];
      $hash_data['txnid'] = $response['txnid'];
      $hash_data['amount'] = $response['amount'];
      $hash_data['productinfo'] = $response['productinfo'];
      $hash_data['firstname'] = $response['firstname'];
      $hash_data['email'] = $response['email'];
      if ($response['additionalCharges']) {
        $hash_data['additional_charges'] = $response['additionalCharges'];
      }
      $salt = $payment_method['settings']['salt'];
      $hash_com = commerce_payu_india_reverse_hash($hash_data, $salt, $status);

      if ($hash_com === $response['hash']) {
        if ($status == 'success') {
          // Order APPROVED (1).
          $gateway_method = $payment_method['settings']['payment_mode'];
          $message = t('Authorized by @method order with Transaction id: @transaction_id. (payment id : @payment_id, description: @description)', array(
            '@method' => $gateway_method,
            '@transaction_id' => $transaction_id,
            '@payment_id' => $payment_id,
            '@description' => $description,
          ));
          $transaction->message = $message;
          $message = '';
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          commerce_payment_transaction_save($transaction);
          commerce_payment_redirect_pane_next_page($order);
          // }.
        }
        else {
          drupal_set_message(t("The transaction was declined by the credit card company"), 'error');
          $message = t('The transaction was declined by the credit card company. Reason provided: @reason_text', array(
            '@reason_text' => $error_message,
          ));
          $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
          $transaction->message = t('There was a problem with your order: @response_code  @reason_text', array(
            '@response_code' => $status,
            '@reason_text' => $error_message,
          ));
          commerce_payment_transaction_save($transaction);
          commerce_payment_redirect_pane_previous_page($order);
        }
      }
      else {
        drupal_set_message(t("Some Error Occurred"), 'error');
        $message = t('Hash Code Mismatch');
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = $message;
        commerce_payment_transaction_save($transaction);
        commerce_payment_redirect_pane_previous_page($order);
      }
    }
    else {
      // Order is invalid or empty.
      drupal_set_message(t("Some Error Accured"), 'error');
      watchdog('commerce_payu', 'An invalid or empty order made it to checkout.  Order ID: @order_id', array(
        '@order_id' => $order_id,
      ), WATCHDOG_ERROR);
    }
  }
}

/**
 * Ask for India payU redirect form.
 */
function commerce_payu_india_order_form($form, &$form_state, $order, $settings) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  // Ensure a default value for the payment_method setting.
  $settings += array(
    'payment_method' => '',
  );

  // Get the order total in the default currency.
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($order_total, $currency_code);
  $amount = number_format($amount, 2, '.', '');
  $inr_total = $amount;
  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }
  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $return_url = urldecode(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(
    'query' => array(
      'DR' => '{DR}',
    ),
    'absolute' => TRUE,
  )));
  // Build the data array that will be translated into hidden form values.
  $key = $settings['key'];
  $salt = $settings['salt'];
  $productinfo = drupal_substr(implode(', ', $description), 0, 255);
  $email = drupal_substr($order->mail, 0, 100);
  $firstname = drupal_substr($billing_address['first_name'], 0, 128);
  $txnid = $order->order_id;
  $hash_data['key'] = $key;
  $hash_data['txnid'] = $txnid;
  $hash_data['amount'] = $amount;
  $hash_data['productinfo'] = $productinfo;
  $hash_data['firstname'] = $firstname;
  $hash_data['email'] = $email;
  // Secure hash validation.
  $hash = commerce_payu_india_get_hash($hash_data, $salt);
  $data = array(
    'hash' => $hash,
    'key' => $key,
    'txnid' => $txnid,
    'amount' => $inr_total,
    'surl' => $return_url,
    'furl' => $return_url,
    'firstname' => $firstname,
    'Lastname' => drupal_substr($billing_address['last_name'], 0, 128),
    'address1' => drupal_substr($billing_address['thoroughfare'], 0, 255),
    'address2' => drupal_substr($billing_address['premise'], 0, 255),
    'city' => drupal_substr($billing_address['locality'], 0, 32),
    'state' => drupal_substr($billing_address['administrative_area'], 0, 32),
    'Zipcode' => drupal_substr($billing_address['postal_code'], 0, 10),
    'country' => $billing_address['country'],
    'phone' => $order_wrapper->commerce_customer_billing->commerce_billing_phone->value(),
    'productinfo' => $productinfo,
    'email' => $email,
  );

  // Put the data on a form.
  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }
  if ($settings['payment_mode'] == 'LIVE') {
    $form['#action'] = 'https://secure.payu.in/_payment';
  }
  else {
    $form['#action'] = 'https://test.payu.in/_payment';
  }
  return $form;
}

/**
 * Generate Hash code to send as Post parameter.
 */
function commerce_payu_india_get_hash($params, $salt) {
  $posted = array();

  if (!empty($params)) {
    foreach ($params as $key => $value) {
      $posted[$key] = htmlentities($value, ENT_QUOTES);
    }
  }

  $hash_sequence = "key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10";

  $hash_vars_seq = explode('|', $hash_sequence);
  $hash_string = NULL;

  foreach ($hash_vars_seq as $hash_var) {
    $hash_string .= isset($posted[$hash_var]) ? $posted[$hash_var] : '';
    $hash_string .= '|';
  }

  $hash_string .= $salt;
  return strtolower(hash('sha512', $hash_string));
}

/**
 * Generate reverse hash code for validation after transaction is completed.
 */
function commerce_payu_india_reverse_hash($params, $salt, $status) {
  $posted = array();
  $hash_string = NULL;

  if (!empty($params)) {
    foreach ($params as $key => $value) {
      $posted[$key] = htmlentities($value, ENT_QUOTES);
    }
  }
  $additional_hash_sequence = 'base_merchantid|base_payuid|miles|additional_charges';
  $hash_vars_seq = explode('|', $additional_hash_sequence);

  foreach ($hash_vars_seq as $hash_var) {
    $hash_string .= isset($posted[$hash_var]) ? $posted[$hash_var] . '|' : '';
  }

  $hash_sequence = "udf10|udf9|udf8|udf7|udf6|udf5|udf4|udf3|udf2|udf1|email|firstname|productinfo|amount|txnid|key";
  $hash_vars_seq = explode('|', $hash_sequence);
  $hash_string .= $salt . '|' . $status;

  foreach ($hash_vars_seq as $hash_var) {
    $hash_string .= '|';
    $hash_string .= isset($posted[$hash_var]) ? $posted[$hash_var] : '';
  }

  return strtolower(hash('sha512', $hash_string));
}
