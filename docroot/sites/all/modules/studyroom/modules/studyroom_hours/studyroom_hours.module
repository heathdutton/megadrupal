<?php

/**
 * @file
 * Module file for the studyroom_hours field.
 */

module_load_include('inc', 'studyroom_hours', 'studyroom_hours.field');

/**
 * Implements hook_menu_alter().
 */
function studyroom_hours_menu_alter(&$items) {
  // Remove the delete tab for this field.  Need to do this rather
  // than locking field because user needs to be able to edit default's.
  // Cannot remove delete options from 'manage field' page.
  if (defined('STUDYROOM_SPACE_MENU_LOCATION')) {
    $items[STUDYROOM_SPACE_MENU_LOCATION . '/manage/%studyroom_space_location/fields/%field_ui_menu/delete']['type'] = MENU_CALLBACK;
    $items[STUDYROOM_SPACE_MENU_LOCATION . '/manage/%studyroom_space_location/fields/%field_ui_menu/delete']['access callback'] = FALSE;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function studyroom_hours_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['date_part_label_time']['function'])) {
    $theme_registry['date_part_label_time']['function'] = 'studyroom_hours_theme_date_part_label_time';
  }
}

/**
 * Returns HTML for a date_select 'time' label.
 *
 * If this is out date_select, return nothing.
 */
function studyroom_hours_theme_date_part_label_time($variables) {
  $element = $variables['element'];
  if (isset($element['#studyroom_hours']) && $element['#studyroom_hours']) {
    return NULL;
  }

  return t('Time', array(), array('context' => 'datetime'));
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form().
 *
 *  Hide the cardinality setting on the field settings for hours fields.
 */
function studyroom_hours_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form['#field']['type'], array('studyroom_hours'))) {
    $form['field']['cardinality']['#default_value'] = 7;
    $form['field']['cardinality']['#access'] = FALSE;
  }
}

/**
 * Function to set format type for hours.
 *
 * Based on date_format_type_format.
 */
function studyroom_hours_format_type_format($format_type, $langcode = NULL) {
  $static = &drupal_static(__FUNCTION__);
  if (!isset($static[$langcode][$format_type])) {
    $format = system_date_format_locale($langcode, $format_type);
    if (!is_string($format)) {
      $default = 'H:i A';
    }
    $format = variable_get('date_format_' . $format_type, $default);
    $static[$langcode][$format_type] = $format;
  }
  return $static[$langcode][$format_type];
}

/**
 * Implements hook_theme().
 */
function studyroom_hours_theme() {
  return array(
    'studyroom_hours' => array(
      'render element' => 'element',
      'file' => 'studyroom_hours.theme.inc',
    ),
    'hours_display' => array(
      'variables' => array(
        'start_time' => NULL,
        'end_time' => NULL,
        'weekday' => NULL,
      ),
      'file' => 'studyroom_hours.theme.inc',
    ),
  );
}

/**
 * Implements FAPI hook_element_info().
 */
function studyroom_hours_element_info() {
  return array(
    'studyroom_hours' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('studyroom_hours_element_process'),
      '#element_validate' => array('studyroom_hours_element_validate'),
    ),
  );
}

/**
 * Process an individual room_hours element.
 *
 * Create element with start and end date.
 * This is modified code from "date_combo_element_process"
 */
function studyroom_hours_element_process($element, &$form_state, $complete_form) {
  $element['#tree'] = TRUE;

  $field_name = $element['#field_name'];
  $langcode = isset($element['#language']) ? $element['#language'] : LANGUAGE_NONE;
  $instance = field_widget_instance($element, $form_state);
  $days = date_week_days_untranslated();

  for ($delta = 0; $delta < 7; $delta++) {
    $sub = array();
    $sub['#title'] = $days[$delta];

    // Convert values into DATETIME format.
    $process = array('start_time', 'end_time');
    foreach ($process as $processed) {
      $sub['#default_value'][$processed] = NULL;
      if (isset($element['#default_value'][$delta][$processed])) {
        $date = new DateObject($element['#default_value'][$delta][$processed]);
        $sub['#default_value'][$processed] = date_format($date, DATE_FORMAT_DATETIME);
      }
      elseif (isset($instance['default_value'][$delta][$processed])) {
        $date = new DateObject($instance['default_value'][$delta][$processed]);
        $sub['#default_value'][$processed] = date_format($date, DATE_FORMAT_DATETIME);
      }
    }

    $sub['start_time'] = array(
      '#title'         => '',
      '#default_value' => isset($sub['#default_value']['start_time']) ? $sub['#default_value']['start_time'] : '',
      '#date_format'   => $instance['widget']['settings']['input_format'],
      '#type'          => 'date_popup',
      '#ajax'          => !empty($sub['#ajax']) ? $sub['#ajax'] : FALSE,
      '#date_increment' => variable_get('studyroom_time_increment', '15'),
      '#studyroom_hours' => TRUE,
    );

    $sub['end_time'] = $sub['start_time'];
    $sub['end_time']['#default_value'] = isset($sub['#default_value']['end_time']) ? $sub['#default_value']['end_time'] : '';
    unset($sub['#default_value']);

    $element[$delta] = $sub;
  }

  $element['#required'] = (isset($form_state['complete form']['#instance']['required'])) ?
    $form_state['complete form']['#instance']['required'] : $instance['required'];

  if (isset($instance['settings']['set_hour_limits']) && $instance['settings']['set_hour_limits']) {
    $element['#limit_note'] = t('This location has a limit set on the start time and end time of %time1 & %time2 respectively.',
      array(
        '%time1' => studyroom_hours_mil_to_ampm($instance['settings']['limit_start']),
        '%time2' => studyroom_hours_mil_to_ampm($instance['settings']['limit_end']))
      );
  }

  return $element;
}

/**
 * Validate and update the hours element.
 *
 * Make sure each day has none or 2 values, then save fixed
 * form_state with correct values.
 *
 * @see studyroom_hours_field_widget_form()
 */
function studyroom_hours_element_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $langcode = isset($element['#language']) ? $element['#language'] : LANGUAGE_NONE;
  $form_input = drupal_array_get_nested_value($form_state['input'], $element['#field_parents']);

  $items = $form_input[$field_name][$langcode];
  $days = date_week_days_untranslated();
  $empty_element = TRUE;
  $studyroom_time_increment = variable_get('studyroom_time_increment', '15');

  for ($delta = 0; $delta < 7; $delta++) {
    // Check for empty 'Start date'
    $empty = empty($items[$delta]['start_time']['time']) ? TRUE : FALSE;

    // An 'End' time without a 'Start' time is a validation error.
    if ($empty && !empty($items[$delta]['end_time']['time'])) {
      form_error($element[$delta]['start_time'], t("A 'Start time' is required if an 'end time' is supplied for %day.",
        array('%day' => $days[$delta])));
    }
    // An 'Start' time without a 'End' time is a validation error.
    elseif (!$empty && empty($items[$delta]['end_time']['time'])) {
      form_error($element[$delta]['end_time'], t("A 'End time' is required if an 'Start time' is supplied for %day.",
        array('%day' => $days[$delta])));
    }

    if (!empty($items[$delta]['start_time']['time'])) {
      $start_time = new DateObject($items[$delta]['start_time']['time']);
      $items[$delta]['start_time'] = date_format($start_time, 'H:i:s');
      $empty_element = FALSE;
    }
    else {
      $items[$delta]['start_time'] = NULL;
    }

    if (!empty($items[$delta]['end_time']['time'])) {
      $end_time = new DateObject($items[$delta]['end_time']['time']);
      $items[$delta]['end_time'] = date_format($end_time, 'H:i:s');
    }
    else {
      $items[$delta]['end_time'] = NULL;
    }

    // Check if start time less than end time.
    if (isset($items[$delta]['start_time']) && isset ($items[$delta]['end_time'])) {
      $diff = $start_time->difference($end_time, 'minutes', FALSE);
      if ($diff < $studyroom_time_increment) {
        form_error($element[$delta]['end_time'], t("A 'End time' must be later than the 'Start time' for %day.",
          array('%day' => $days[$delta])));
      }
    }
  }
  // Set form values.
  form_set_value($element, $items, $form_state);

  if ($element['#required'] && $empty_element) {
    form_error($element, t("At least one day must have a time value set."));
  }

  if (form_get_errors()) {
    return;
  }
}

/**
 * Helper Functions.
 */
function studyroom_hours_mil_to_ampm($time) {
  if (strlen($time) == 2) {
    $time = $time . ':00';
  }
  return format_date(strtotime($time), 'custom', "g:i A");
}


/**
 * API Type functions.
 *
 * Return the weekday hours date object or FALSE. Since the return types are mixed,
 * be sure to use the strict comparison operators (e.g., ===).
 */
function studyroom_hours_day_hours($field, $week_day = 0, $date = NULL, $language = NULL) {
  $week = (isset($language)) ? $field[$language] : array_shift($field);
  $date_part = (isset($date) && is_object($date)) ? $date->format('Y-m-d') . ' ' : '';

  if (isset($week[$week_day]) && isset($week[$week_day]['start_time'])) {
    return array(
      'start_time' => new DateObject($date_part . $week[$week_day]['start_time']),
      'end_time' => new DateObject($date_part . $week[$week_day]['end_time']),
    );
  }
  else {
    return FALSE;
  }
}
