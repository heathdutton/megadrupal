<?php
/**
 * @file
 * Install, update and uninstall functions for the studyroom_space module.
 */

/**
 * Implements hook_install().
 */
function studyroom_space_install() {
  studyroom_space_create_category_vocabulary();

  // Create default location.
  $values = array(
    'type' => 'main',
    'label' => 'Main',
    'description' => 'Main location for studyroom.',
    'min_duration' => NULL,
    'max_duration' => NULL,
    'max_days_advance' => NULL,
    'max_times_per_week' => 0,
    'allowed_reservation_types' => array('user' => 'user', 'admin' => TRUE),
    'module' => 'studyroom_space',
  );
  $type = studyroom_space_location_create($values);
  $type->save();

  menu_rebuild();
}

/**
 * Implements hook_uninstall().
 *
 * @todo field_config_instance does not get cleaned up.
 */
function studyroom_space_uninstall() {
  // Delete the vocabulary.
  $vocabulary_name = variable_get('studyroom_space_vocabulary', NULL);
  if (isset($vocabulary_name)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    if (isset($vocabulary) && is_object($vocabulary)) {
      taxonomy_vocabulary_delete($vocabulary->vid);
      field_delete_field('field_' . $vocabulary_name);
    }
  }

  $locations = db_query("SELECT type FROM {studyroom_space_location}")->fetchCol();
  foreach ($locations as $location) {
    field_attach_delete_bundle('studyroom_space', $location);
  }

  // Delete fields.
  field_delete_field('field_space_hours');

  // Purge field data.
  field_purge_batch(25);
}

/**
 * Implements hook_schema().
 */
function studyroom_space_schema() {
  $schema['studyroom_space'] = array(
    'description' => 'The base table for studyroom_space entities.',
    'fields' => array(
      'space_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Identifier for a space.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The {studyroom_space_location}.type of this space.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The name of the space - a human-readable identifier.',
      ),
      'capacity' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The capacity of this room.',
      ),
      'min_duration' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The minimum length of time (in seconds) of a reservation for this space.',
      ),
      'max_duration' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The maximum length of time (in seconds) of a reservation for this space.',
      ),
      'max_days_advance' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The maximum number of days in advance to allow a reservation for this space.',
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => LANGUAGE_NONE,
        'description' => 'The language of the space.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp when the space was created.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp when the space was most recently saved.',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the space is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('space_id'),
    'foreign keys' => array(
      'location' => array(
        'table' => 'studyroom_space_location',
        'columns' => array('type' => 'type'),
      ),
    ),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['studyroom_space_location'] = array(
    'description' => 'Stores information about defined locations.',
    'fields' => array(
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The machine-readable name of this location.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The human-readable name of this location.',
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'A brief description of this location.',
        'translatable' => TRUE,
      ),
      'min_duration' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The minimum length of time (in seconds) of a reservation for this location.',
      ),
      'max_duration' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The maximum length of time (in seconds) of a reservation for this location.',
      ),
      'max_days_advance' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The maximum number of days in advance to allow a reservation for this location.',
      ),
      'max_times_per_week' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The maximum number of reservation per week for this location.',
      ),
      'allowed_reservation_types' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of reservation types that can be used by this location.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The name of the providing module if the entity has been defined in code.',
      ),
    ),
    'primary key' => array('type'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Create the modules vocabulary and default term.
 */
function studyroom_space_create_category_vocabulary() {
  // Create a default vocabulary "Space Category", enabled for the space type.
  $vocabulary = (object) array(
    'name' => st('Space Category'),
    'description' => st('Use space category to group spaces into categories.'),
    'machine_name' => 'space_category',
    'module' => 'studyroom_space',
    'hierarchy' => 0,
  );
  taxonomy_vocabulary_save($vocabulary);
  variable_set('studyroom_space_vocabulary', $vocabulary->machine_name);

  // Create a default term.
  $term = (object) array(
    'name' => t('Default'),
    'description' => 'Default category',
    'parent' => array(0),
    'vid' => $vocabulary->vid,
  );
  taxonomy_term_save($term);

  drupal_set_message(st('Created new %name vocabulary', array('%name' => $vocabulary->name)));
}

/**
 * Add new colunm to {studyroom_space_location} for max_times_per_week.
 */
function studyroom_space_update_7001() {
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'The maximum number of reservation per week for this location.',
  );
  db_add_field('studyroom_space_location', 'max_times_per_week', $spec);
}

/**
 * Remove columns 'data' and 'id', rename 'name' to 'label'
 */
function studyroom_space_update_7002() {
  db_change_field('studyroom_space_location', 'id', 'id', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  db_drop_primary_key('studyroom_space_location');
  db_add_primary_key('studyroom_space_location', array('type'));

  // Remove old primary key field.
  // @TODO does not work, throw PDO error.
  //db_drop_field('studyroom_space_location', 'id');

  // Remove unused fields.
  db_drop_field('studyroom_space', 'data');
  
  db_change_field('studyroom_space', 'name', 'label', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
    'description' => 'The name of the space - a human-readable identifier.',
  ));
}

/**
 * Move content in description to new body field.
 */
function studyroom_space_update_7003() {
  foreach (studyroom_space_locations() as $type =>$location) {  
    studyroom_space_add_body_field($type);
  }

  $results = db_select('studyroom_space', 's')
    ->fields('s', array('space_id', 'description'))
    ->execute();

  foreach ($results as $result) {
    $space = studyroom_space_load($result->space_id);
    $wrapper = entity_metadata_wrapper('studyroom_space', $space);

    $description = unserialize($result->description);
    $wrapper->field_space_body->set(array(
      'value' => $description['value'],
      'format' => $description['format'],
    ));
    $wrapper->save();    
  }

  // Remove old description column.
  db_drop_field('studyroom_space', 'description');
}
