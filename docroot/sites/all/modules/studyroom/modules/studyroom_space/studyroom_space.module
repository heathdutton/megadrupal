<?php

/**
 * @file
 * Module for the studyroom_space.
 */

define('STUDYROOM_SPACE_MENU_SPACE', STUDYROOM_MENU . '/space');
define('STUDYROOM_SPACE_MENU_LOCATION', STUDYROOM_MENU . '/locations');
define('STUDYROOM_SPACE_PATH', 'space/');

/**
 * Implements hook_entity_info().
 */
function studyroom_space_entity_info() {
  $return['studyroom_space'] = array(
    'label' => t('Spaces'),
    'entity class' => 'StudyroomSpace',
    'controller class' => 'StudyroomSpaceController',
    'extra fields controller class' => 'StudyroomExtraFieldsController',
    'base table' => 'studyroom_space',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'space_id',
      'bundle' => 'type',
      'label' => 'label',
      'language' => 'language',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'studyroom_space_create',
    'access callback' => 'studyroom_space_access',
    'module' => 'studyroom_space',
    'admin ui' => array(
      'path' => STUDYROOM_SPACE_MENU_SPACE,
      'file' => 'studyroom_space.admin.inc',
      'controller class' => 'StudyroomSpaceUIController',
      'menu wildcard' => '%studyroom_space',
    ),
  );
  $return['studyroom_space_location'] = array(
    'label' => t('Location'),
    'entity class' => 'StudyroomSpaceLocation',
    'controller class' => 'StudyroomSpaceLocationController',
    'base table' => 'studyroom_space_location',
    'fieldable' => FALSE,
    'bundle of' => 'studyroom_space',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'studyroom_space_location_access',
    'module' => 'studyroom_space',
    'admin ui' => array(
      'path' => STUDYROOM_SPACE_MENU_LOCATION,
      'file' => 'studyroom_space_location.admin.inc',
      'controller class' => 'StudyroomSpaceLocationUIController',
    ),
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function studyroom_space_entity_info_alter(&$entity_info) {
  $argument_count = count(explode('/', STUDYROOM_SPACE_MENU_LOCATION)) + 1;
  foreach (studyroom_space_locations() as $type => $info) {
    $entity_info['studyroom_space']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => STUDYROOM_SPACE_MENU_LOCATION . '/manage/%studyroom_space_location',
        'real path' => STUDYROOM_SPACE_MENU_LOCATION . '/manage/' . $type,
        'bundle argument' => $argument_count,
        'access arguments' => array('administer studyroom_space locations'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function studyroom_space_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity.
  $permissions = array(
    'bypass studyroom_space access' => array(
      'title' => t('Bypass space access control'),
      'description' => t('View, edit and delete all spaces regardless of permission restrictions.'),
      'restrict access' => TRUE,
    ),
    'administer studyroom_space locations' => array(
      'title' => t('Administer studyroom locations'),
      'description' => t('Create and delete fields for locations, and set their permissions.'),
      'restrict access' => TRUE,
    ),
    'access spaces overview' => array(
      'title' => t('Access the spaces overview page'),
      'restrict access' => TRUE,
    ),
    'access spaces' => array(
      'title' => t('View published spaces'),
    ),
    'access unpublished spaces' => array(
      'title' => t('View any unpublished spaces'),
    ),
  );

  // Generate permissions per location.
  foreach (studyroom_space_locations() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "create $type_name space" => array(
        'title' => t('%type_name: Create new space', array('%type_name' => $type->label)),
      ),
      "edit any $type_name space" => array(
        'title' => t('%type_name: Edit any space', array('%type_name' => $type->label)),
      ),
      "delete any $type_name space" => array(
        'title' => t('%type_name: Delete any space', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Determines whether the given user has access to a studyroom_space.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $studyroom_space
 *   Optionally a studyroom_space or a studyroom_space type to check access
 *   for. If nothing is given, access for all studyroom_spaces is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function studyroom_space_access($op, $studyroom_space = NULL, $account = NULL) {
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  if (user_access('bypass studyroom_space access', $account)) {
    return TRUE;
  }

  if ($op == 'view') {
    return user_access("access spaces", $account);
  }

  if ($op == 'create-spaces') {
    foreach (studyroom_space_locations() as $location) {
      if (user_access("create $location->type space", $account)) {
        return TRUE;
      }
    }
    return FALSE;
  }

  if (!is_object($studyroom_space)) {
    $studyroom_space = studyroom_space_location_load($studyroom_space);
  }

  if (isset($studyroom_space) && isset($studyroom_space->type)) {
    switch ($op) {
      case 'create':
        return user_access("create $studyroom_space->type space", $account);

      case 'edit':
      case 'delete':
        return user_access("$op any $studyroom_space->type space", $account);

      default:
        return FALSE;
    }
  }
  return FALSE;
}

/**
 * Access callback for the entity API.
 */
function studyroom_space_location_access($op, $entity = NULL, $account = NULL) {
  return user_access('administer studyroom_space locations', $account);
}


/**
 * Implements hook_views_api().
 */
function studyroom_space_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'studyroom_space') . '/views',
  );
}

/**
 * Implements hook_admin_paths().
 */
function studyroom_space_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      STUDYROOM_SPACE_PATH . '*/edit' => TRUE,
      STUDYROOM_SPACE_PATH . '*/delete' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_theme().
 */
function studyroom_space_theme() {
  $module_path = drupal_get_path('module', 'studyroom_space');

  return array(
    'studyroom_space_location_overview_form' => array(
      'render element' => 'form',
      'file' => 'studyroom_space_location.admin.inc',
    ),
    'studyroom_space' => array(
      'render element' => 'elements',
      'path' => "$module_path/theme",
      'template' => 'studyroom-space',
    ),
  );
}

/**
 * Gets an array of all studyroom_space locations, keyed by the type name.
 *
 * @param bool $reset
 *   Boolean indicating whether or not the cache should be reset.
 *
 * @return StudyroomSpaceLocation
 *   An array of studyroom_space types
 */
function studyroom_space_locations($reset = FALSE) {
  // First check the static cache for a space location array.
  $space_locations = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the locations now.
  if (!isset($space_locations) || $reset) {
    $space_locations = entity_load_multiple_by_name('studyroom_space_location', FALSE);
  }

  return $space_locations;
}

/**
 * Resets the cached list of space locations.
 */
function studyroom_space_locations_reset() {
  $space_locations = &drupal_static('studyroom_space_locations');
  $space_locations = NULL;
  entity_info_cache_clear();
}

/**
 * Menu argument loader; Load a studyroom_space type by string.
 *
 * @param string $type
 *   The machine-readable name of a studyroom_space type to load.
 *
 * @return StudyroomSpaceLocation[]
 *   A studyroom_space type array or FALSE if $type does not exist.
 */
function studyroom_space_location_load($type) {
  $types = studyroom_space_locations();
  return isset($types[$type]) ? $types[$type] : array();
}

/**
 * Create a studyroom_space object.
 */
function studyroom_space_location_create($values = array()) {
  $ret = entity_get_controller('studyroom_space_location')->create($values);
  return $ret;
}

/**
 * Saves a studyroom_space type to the db.
 */
function studyroom_space_location_save(StudyroomSpaceLocation $type) {
  $type->save();
}

/**
 * Deletes a studyroom_space type from the db.
 */
function studyroom_space_location_delete(StudyroomSpaceLocation $type) {
  $type->delete();
}

/**
 * Gets an array of all studyroom_space space, keyed by the space_id.
 */
function studyroom_space_get_spaces($all = FALSE) {
  if ($all) {
    return entity_load_multiple_by_name('studyroom_space');
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'studyroom_space')
    ->propertyCondition('status', 1)
    ->propertyOrderBy('type')
    ->propertyOrderBy('label');
  $results = $query->execute();

  $ids = isset($results['studyroom_space']) ? array_keys($results['studyroom_space']) : array();
  return ($ids) ? studyroom_space_load_multiple($ids) : array();
}

/**
 * Gets an array of all spaces by type, keyed by the space_id.
 */
function studyroom_space_get_spaces_by_type($type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'studyroom_space')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', $type)
    ->propertyOrderBy('label');
  $results = $query->execute();

  $ids = isset($results['studyroom_space']) ? array_keys($results['studyroom_space']) : array();
  return ($ids) ? studyroom_space_load_multiple($ids) : array();
}

/**
 * Fetch a studyroom_space object.
 *
 * Make sure that the wildcard you choose in the studyroom_space entity
 * definition fits the function name here.
 *
 * @param int $space_id
 *   Integer specifying the studyroom_space id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return studyroom_space
 *   A fully-loaded $studyroom_space object or FALSE if it cannot be loaded.
 *
 * @see studyroom_space_load_multiple()
 */
function studyroom_space_load($space_id, $reset = FALSE) {
  $studyroom_spaces = studyroom_space_load_multiple(array($space_id), array(), $reset);
  return reset($studyroom_spaces);
}

/**
 * Load multiple studyroom_spaces based on certain conditions.
 *
 * @param array $space_ids
 *   An array of studyroom_space IDs.
 * @param array $conditions
 *   An array of conditions to match against the {studyroom_space} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @see entity_load()
 * @see studyroom_space_load()
 */
function studyroom_space_load_multiple($space_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('studyroom_space', $space_ids, $conditions, $reset);
}

/**
 * Deletes a studyroom_space.
 */
function studyroom_space_delete(StudyroomSpace $studyroom_space) {
  $studyroom_space->delete();
}

/**
 * Delete multiple studyroom_spaces.
 *
 * @param array $space_ids
 *   An array of studyroom_space IDs.
 */
function studyroom_space_delete_multiple(array $space_ids) {
  entity_get_controller('studyroom_space')->delete($space_ids);
}

/**
 * Create a studyroom_space object.
 */
function studyroom_space_create($values = array()) {
  return entity_get_controller('studyroom_space')->create($values);
}


/**
 * Saves a studyroom_space to the database.
 *
 * @param object $studyroom_space
 *   The studyroom_space object.
 */
function studyroom_space_save(StudyroomSpace $studyroom_space) {
  return $studyroom_space->save();
}

/**
 * URI callback for studyroom_spaces.
 */
function studyroom_space_uri(StudyroomSpace $studyroom_space) {
  return array(
    'path' => STUDYROOM_SPACE_PATH . $studyroom_space->space_id,
  );
}

/**
 * Function to find all spaces using a reservation type.
 */
function studyroom_space_by_resv_type($type) {
  $spaces = array();
  foreach (studyroom_space_get_spaces() as $space) {
    foreach ($space->reservation_types as $resv_type) {
      if ($type == $resv_type) {
        $spaces[$space->space_id] = $space->space_id;
      }
    }
  }
  return $spaces;
}

/**
 * Entity_property_info getter function.
 */
function studyroom_space_get_property($data, array $options, $name, $type, $info) {
  if (is_object($data)) {
    switch ($name) {
      case 'location':
        $location = studyroom_space_location_load($data->type);
        return $location->label();

      case 'min_duration':
        return format_interval($data->min_duration, 2);

      case 'max_duration':
        return format_interval($data->max_duration, 2);

      case 'max_days_advance':
        return studyroom_format_day($data->max_days_advance);
    }
  }
  return NULL;
}

/**
 * Implements ENTITY_preprocess_entity_ENTITY().
 */
function studyroom_space_preprocess_entity_studyroom_space(&$variables) {
  if (!user_is_logged_in()) {
    drupal_set_message(t('You must !login to make a reservation.',
      array(
        '!login' => l(t('Sign in'),
        'user/login',
        array('query' => drupal_get_destination())
        ))));
  }

  // All availability field to entity.
  if (module_exists('studyroom_availability')) {
    $args = explode('/', drupal_get_path_alias());
    $id_count = count(explode('/', STUDYROOM_SPACE_PATH));

    $year = isset($args[$id_count]) ? $args[$id_count] : '';
    $week = isset($args[$id_count + 1]) ? $args[$id_count + 1] : '';
    $entity = $variables['studyroom_space'];

    // Check for valid year and date in input.
    _studyroom_space_validate_dates($year, $week);

    $availability = new SpaceAvailability();
    $availability->date = array('year' => $year, 'week' => $week);
    $items = $availability->spaceAvailabilityByWeek($entity, $year, $week);

    $variables['content']['availability'] = array(
      '#markup' => theme('studyroom_availability_week', array(
        'items' => $items,
        'availability' => $availability,
        'space' => $entity,
      )),
      '#weight' => 400,
    );
  }

  // Add node-unpublished class if necessary.
  if (!$variables['studyroom_space']->status) {
    $variables['classes_array'][] = 'node-unpublished';
  }
}

/**
 * Implements hook_entity_view().
 *
 * Returns an access denied page if page unpublished and
 * user does not have permission to view unpublised spaces.
 */
function studyroom_space_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type != 'studyroom_space' || $view_mode != 'full') {
    return;
  }

  if ($entity->status == 0 && !user_access('access unpublished spaces')) {
    drupal_access_denied();
  }
}


/**
 * Create the modules vocabulary and default term.
 */
function studyroom_space_configure_location($type = NULL) {
  if (!isset($type)) {
    return;
  }

  // Add category taxonomy field.
  studyroom_space_create_category($type);

  // Add room hours field.
  if (module_exists('studyroom_hours')) {
    studyroom_space_create_hours($type);
  }

  // Add space body field.
  studyroom_space_add_body_field($type);
}

/**
 * Add the category field instance to the new location bundle.
 */
function studyroom_space_create_category($type) {
  $vocabulary_name = variable_get('studyroom_space_vocabulary', NULL);
  if (!isset($vocabulary_name)) {
    drupal_set_message(t('Could not create category instance because the studyroom vocabulary could not be found.'));
    return;
  }

  $field_name = 'field_' . $vocabulary_name;
  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'field_name' => 'field_' . $vocabulary_name,
      'type' => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary_name,
            'parent' => 0,
          ),
        ),
      ),
      'locked' => '1',
      'cardinality' => '1',
    );
    field_create_field($field);
  }

  $instance = field_info_instance('studyroom_space', $field_name, $type);
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'studyroom_space',
      'label' => 'Space Category',
      'bundle' => $type,
      'description' => t('Select the category that best fits this space.'),
      'required' => TRUE,
      'locked' => '1',
      'widget' => array(
        'type' => 'options_select',
        'weight' => -40,
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
        'teaser' => array(
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Create the room hours instance.
 */
function studyroom_space_create_hours($type) {
  $field_name = 'field_space_hours';
  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'studyroom_hours',
    );
    field_create_field($field);
  }

  $instance = field_info_instance('studyroom_space', $field_name, $type);
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'studyroom_space',
      'label' => 'Hours',
      'description' => 'Hours for this space.',
      'bundle' => $type,
      'required' => TRUE,
      'widget' => array(
        'type' => 'studyroom_hours',
        'weight' => 20,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'studyroom_hours',
          'weight' => 20,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'weight' => 20,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Adds body field to a space.
 *
 * @param string $type
 *   A space type name.
 */
function studyroom_space_add_body_field($type) {
  $field_name = 'field_space_body';
  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'translatable' => '0',
      'field_name' => $field_name,
      'type' => 'text_long',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
    );
    field_create_field($field);
  }

  $instance = field_info_instance('studyroom_space', $field_name, $type);
  if (empty($instance)) {
    $instance = array(
      'label' => 'Body',
      'widget' => array(
        'weight' => '-20',
        'type' => 'text_textarea',
        'active' => 1,
        'settings' => array(
          'rows' => '5',
        ),
      ),
      'settings' => array(
        'text_processing' => '1',
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'settings' => array(),
          'weight' => -20,
        ),
      ),
      'required' => 0,
      'description' => 'Description of the space',
      'default_value' => NULL,
      'field_name' => $field_name,
      'entity_type' => 'studyroom_space',
      'bundle' => $type,
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_block_info().
 */
function studyroom_space_block_info() {
  $blocks['studyroom_spaces'] = array(
    'info' => t('Spaces'),
    'status' => TRUE,
    'region' => 'sidebar_first',
    'weight' => -5,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function studyroom_space_block_configure($delta = '') {
  $form = array();
  if ($delta == 'studyroom_spaces') {
    $form['location'] = array(
      '#type' => 'fieldset',
      '#title' => t('Location'),
      '#collapsible' => FALSE,
    );
    $form['location']['studyroom_space_locations_name'] = array(
      '#type' => 'select',
      '#title' => t('Add location to space title'),
      '#default_value' => variable_get('studyroom_space_locations_name', FALSE),
      '#options' => array(
        '0' => '- None -',
        'prefix' => 'Before',
        'suffix' => 'After',
      ),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function studyroom_space_block_save($delta = '', $edit = array()) {
  if ($delta == 'studyroom_spaces') {
    variable_set('studyroom_space_locations_name', $edit['studyroom_space_locations_name']);
  }
}

/**
 * Implements hook_block_view().
 */
function studyroom_space_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'studyroom_spaces':
      $block['subject'] = t('Studyroom spaces');
      $loc = variable_get('studyroom_space_locations_name', FALSE);
      $block['content'] = studyroom_space_block_contents($delta, $loc);
      break;

  }
  return $block;
}

/**
 * A module-defined block content function.
 *
 * @todo Order spaces by location, and include location info in display.
 */
function studyroom_space_block_contents($which_block, $loc = FALSE) {
  switch ($which_block) {
    case 'studyroom_spaces':
      $spaces = studyroom_space_get_spaces();
      foreach ($spaces as $space) {
        if ($space->status && entity_access('view', 'studyroom_space', $space)) {
          $url = studyroom_space_uri($space);
          if ($loc) {
            $loc_obj = studyroom_space_location_load($space->type);
            if ($loc == 'prefix') {
              $items[] = l($loc_obj->label() . ' - ' . $space->label(), $url['path']);
            }
            elseif ($loc == 'suffix') {
              $items[] = l($space->label() . ' - ' . $loc_obj->label(), $url['path']);
            }
          }
          else {
            $items[] = l($space->label(), $url['path']);
          }
        }
      }
      if (isset($items)) {
        return array('#markup' => theme('item_list', array('items' => $items)));
      }
      else {
        return array('#markup' => t('No Spaces Found.'));
      }
      break;
  }
}

/**
 * Function to validate input dates.
 */
function _studyroom_space_validate_dates(&$year = '', &$week = '') {
  $year = (int) check_plain($year);
  $week = (int) check_plain($week);
  $today = new DateTime();
  $today_date = date_format($today, DATE_FORMAT_DATE);

  // Set default year and check for validity.
  $year = ($year == 0) ? date_format($today, 'Y') : $year;
  if ($year < 2000 || $year > 2100) {
    $cyear = date_format($today, 'Y');
    drupal_set_message(t('The year @year is an invalid year, so @cyear will be used.', array('@year' => $year, '@cyear' => $cyear)));
    $year = $cyear;
  }

  // Set default week and check for validity.
  $week = ($week == 0) ? date_week($today_date) : $week;
  if ($week < 0) {
    $cweek = date_week($today_date);
    drupal_set_message(t('The week @week is an invalid week, so @cweek will be used.', array('@week' => $week, '@cweek' => $cweek)));
    $week = $cweek;
  }
}
