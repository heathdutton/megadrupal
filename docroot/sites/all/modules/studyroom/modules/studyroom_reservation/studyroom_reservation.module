<?php

/**
 * @file
 * Module for the studyroom_reservation.
 */

define('STUDYROOM_RESERVATION_ADMIN_PATH', 'admin/content/reservation');
define('STUDYROOM_RESERVATION_TYPE_ADMIN_PATH', STUDYROOM_MENU . '/reservation/type');
define('STUDYROOM_RESERVATION_PATH', 'reservation/');

/**
 * Implements hook_entity_info().
 */
function studyroom_reservation_entity_info() {
  $return['studyroom_reservation'] = array(
    'label' => t('Reservation'),
    'entity class' => 'StudyroomReservation',
    'controller class' => 'StudyroomReservationController',
    'extra fields controller class' => 'StudyroomExtraFieldsController',
    'base table' => 'studyroom_reservation',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'reservation_id',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'studyroom_reservation_create',
    'access callback' => 'studyroom_reservation_access',
    'module' => 'studyroom_reservation',
    'admin ui' => array(
      'path' => STUDYROOM_RESERVATION_PATH,
      'file' => 'studyroom_reservation.admin.inc',
      'controller class' => 'StudyroomReservationUIController',
      'menu wildcard' => '%studyroom_reservation',
    ),
  );
  // The entity that holds information about the entity types.
  $return['studyroom_reservation_type'] = array(
    'label' => t('Reservation Type'),
    'entity class' => 'StudyroomReservationType',
    'controller class' => 'StudyroomReservationTypeController',
    'base table' => 'studyroom_reservation_type',
    'fieldable' => FALSE,
    'bundle of' => 'studyroom_reservation',
    'exportable' => TRUE,
    'sortable' => TRUE,
    'entity keys' => array(
      'id' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'studyroom_reservation_type_access',
    'module' => 'studyroom_reservation',
    'admin ui' => array(
      'path' => STUDYROOM_RESERVATION_TYPE_ADMIN_PATH,
      'file' => 'studyroom_reservation_type.admin.inc',
      'controller class' => 'StudyroomReservationTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function studyroom_reservation_entity_info_alter(&$entity_info) {
  foreach (studyroom_reservation_types() as $type => $info) {
    $entity_info['studyroom_reservation']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => STUDYROOM_RESERVATION_TYPE_ADMIN_PATH . '/manage/%studyroom_reservation_type',
        'real path' => STUDYROOM_RESERVATION_TYPE_ADMIN_PATH . '/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer studyroom_reservation types'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 *
 * @todo Add permission to override date restrictions?
 */
function studyroom_reservation_permission() {
  $permissions = array(
    'bypass studyroom_reservations access' => array(
      'title' => t('Bypass reservations access control'),
      'description' => t('View, edit and delete all reservations regardless of permission restrictions.'),
      'restrict access' => TRUE,
    ),
    'administer studyroom_reservation types' => array(
      'title' => t('Administer studyroom reservation types'),
      'restrict access' => TRUE,
    ),
    'access reservations overview' => array(
      'title' => t('Access the reservations overview page'),
      'restrict access' => TRUE,
    ),
  );

  // Generate permissions per studyroom_reservation.
  foreach (studyroom_reservation_types() as $type) {
    // Only add perms for types with UI equal true.
    if (!$type->ui) {
      continue;
    }
    $type_name = check_plain($type->type);
    $permissions += array(
      "view $type_name studyroom_reservation" => array(
        'title' => t('%type_name: View details of any reservation', array('%type_name' => $type->label)),
      ),
      "create $type_name studyroom_reservation" => array(
        'title' => t('%type_name: Create a reservation', array('%type_name' => $type->label)),
      ),
      "edit own $type_name studyroom_reservation" => array(
        'title' => t('%type_name: Edit own reservation', array('%type_name' => $type->label)),
      ),
      "edit any $type_name studyroom_reservation" => array(
        'title' => t('%type_name: Edit any reservation', array('%type_name' => $type->label)),
      ),
      "delete own $type_name studyroom_reservation" => array(
        'title' => t('%type_name: Delete own reservation', array('%type_name' => $type->label)),
      ),
      "delete any $type_name studyroom_reservation" => array(
        'title' => t('%type_name: Delete any reservation', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Access callback for the entity API.
 */
function studyroom_reservation_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer studyroom_reservation types', $account);
}

/**
 * Determines whether the given user has access to a studyroom_reservation.
 *
 * @param string $op
 *   Operation being performed. One of 'view', 'create', 'delete', or 'edit'.
 * @param object $reservation
 *   A reservation or reservation type to check access for.
 *   If nothing is given, access for all studyroom_reservations is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function studyroom_reservation_access($op, $reservation = NULL, $account = NULL) {
  if (!is_object($reservation)) {
    $type = $reservation;
    $reservation = new stdClass();
    $reservation->type = $type;
  }

  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  if ($op == 'create-reservation') {
    foreach (studyroom_reservation_types() as $type) {
      if (user_access('create ' . $type->type . ' studyroom_reservation', $account)) {
        return TRUE;
      }
    }
    return FALSE;
  }

  if (user_access('bypass studyroom_reservations access', $account)) {
    return TRUE;
  }

  if (isset($reservation) && isset($reservation->type)) {
    $perm = $reservation->type . ' studyroom_reservation';
    switch ($op) {
      case 'view':
      case 'create':
        return user_access($op . ' ' . $perm, $account);

      case 'delete':
      case 'edit':
        // No edit/delete access if locked.
        if ($reservation->isLocked()) {
          return FALSE;
        }

        if (user_access($op . ' any ' . $perm, $account)) {
          return TRUE;
        }

        if (user_access($op . ' own ' . $perm, $account) && ($account->uid == $reservation->uid)) {
          // Make sure only modifying a future reservation.
          $date = field_get_items('studyroom_reservation', $reservation, 'field_reservation_datetime');
          $date = array_shift($date);
          $date = new DateObject($date['value'], $date['timezone'], 'Y-m-d H:i:s');
          $now = date_now();
          if ($now->difference($date, 'minutes', FALSE) > 2) {
            return TRUE;
          }
        }
    }
  }
  return FALSE;
}


/**
 * Function to get reservation types user as access to.
 */
function studyroom_reservation_type_user_access() {
  $types = studyroom_reservation_types();

  $ret = array();
  foreach ($types as $type) {
    if (entity_access('create', 'studyroom_reservation', $type)) {
      $ret[$type->type] = $type;
    }
  }
  return $ret;
}

/**
 * Implements hook_admin_paths().
 */
function studyroom_reservation_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      STUDYROOM_RESERVATION_PATH . '*/edit' => TRUE,
      STUDYROOM_RESERVATION_PATH . '*/delete' => TRUE,
      STUDYROOM_RESERVATION_PATH . 'add' => TRUE,
      STUDYROOM_RESERVATION_PATH . 'add/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Gets an array of all studyroom_reservation types, keyed by the type name.
 *
 * @param bool $reset
 *   Boolean indicating whether or not the cache should be reset.
 *
 * @return StudyroomReservationType[]
 *   A array of reservation types or a single one.
 */
function studyroom_reservation_types($reset = FALSE) {
  // First check the static cache for a reservation types array.
  $reservation_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($reservation_types) || $reset) {
    $reservation_types = entity_load_multiple_by_name('studyroom_reservation_type', FALSE);
  }

  return $reservation_types;
}

/**
 * Resets the cached list of reservation types.
 */
function studyroom_reservation_types_reset() {
  $reservation_types = &drupal_static('studyroom_reservation_types');
  $reservation_types = NULL;
  entity_info_cache_clear();
}

/**
 * Build an options array of reservation types.
 *
 * @param bool $public_only
 *   Whether to return public-only or all types.
 */
function studyroom_reservation_types_options($public_only = TRUE) {
  $types = studyroom_reservation_types();

  foreach ($types as $type) {
    // Do not include non-ui types.
    if (!$type->ui) {
      continue;
    }
    if ($public_only && $type->public) {
      $options[$type->type] = $type->label;
    }
    else {
      $options[$type->type] = $type->label;
    }
  }
  return isset($options) ? $options : array();
}

/**
 * Return array of non-public reservation types.
 */
function studyroom_reservation_types_admin() {
  $types = studyroom_reservation_types();

  foreach ($types as $type) {
    if (!$type->public && $type->ui) {
      $options[$type->type] = $type->label;
    }
  }
  return isset($options) ? $options : array();
}

/**
 * Menu argument loader; Load a studyroom_reservation type by string.
 *
 * @param string $type
 *   The machine-readable name of a studyroom_reservation type to load.
 */
function studyroom_reservation_type_load($type) {
  $types = studyroom_reservation_types();
  return isset($types[$type]) ? $types[$type] : array();
}

/**
 * Saves a studyroom_reservation type to the db.
 */
function studyroom_reservation_type_save(StudyroomReservationType $type) {
  $type->save();
}

/**
 * Deletes a studyroom_reservation type from the db.
 */
function studyroom_reservation_type_delete(StudyroomReservationType $type) {
  $type->delete();

  studyroom_reservation_types_reset();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Create a studyroom_reservation_type object.
 */
function studyroom_reservation_type_create($values = array()) {
  return entity_get_controller('studyroom_reservation_type')->create($values);
}

/**
 * Returns the reservation type label.
 */
function studyroom_reservation_type_label($type) {
  $reservation_type = studyroom_reservation_type_load($type);
  return $reservation_type->label;
}

/**
 * Function to get default type.
 *
 * @todo Should this be setting OR lowest weight? Tweak results based on above.
 */
function studyroom_reservation_type_default() {
  $types = studyroom_reservation_types();
  $types = array_shift($types);
  return $types->type;
}

/**
 * Fetch a studyroom_reservation object.
 *
 * Make sure that the wildcard you choose in the studyroom_reservation
 * entity definition fits the function name here.
 *
 * @param int $reservation_id
 *   Integer specifying the studyroom_reservation id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $studyroom_reservation object or FALSE.
 *
 * @see studyroom_reservation_load_multiple()
 */
function studyroom_reservation_load($reservation_id, $reset = FALSE) {
  $studyroom_reservations = studyroom_reservation_load_multiple(array($reservation_id), array(), $reset);
  return reset($studyroom_reservations);
}

/**
 * Load multiple studyroom_reservations.
 *
 * @param int $reservation_ids
 *   An array of studyroom_reservation IDs.
 * @param array $conditions
 *   An array of conditions to match against the {studyroom_reservation} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return oject
 *   An array of studyroom_reservation objects, indexed by reservation_id.
 *
 * @see entity_load()
 * @see studyroom_reservation_load()
 */
function studyroom_reservation_load_multiple($reservation_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('studyroom_reservation', $reservation_ids, $conditions, $reset);
}

/**
 * Delete multiple studyroom_reservations.
 *
 * @param array $reservation_ids
 *   An array of reservation IDs.
 */
function studyroom_reservation_delete_multiple(array $reservation_ids) {
  entity_get_controller('studyroom_reservation')->delete($reservation_ids);
}

/**
 * Delete multiple studyroom_reservations.
 *
 * @param array $reservation_ids
 *   An array of reservation IDs.
 */
function studyroom_reservation_delete_locked_multiple(array $reservation_ids) {
  entity_get_controller('studyroom_reservation')->deleteLocked($reservation_ids);
}

/**
 * Create a studyroom_reservation object.
 */
function studyroom_reservation_create($values = array()) {
  return entity_get_controller('studyroom_reservation')->create($values);
}

/**
 * Saves a studyroom_reservation to the database.
 *
 * @param object $studyroom_reservation
 *   The studyroom_reservation object.
 */
function studyroom_reservation_save(StudyroomReservation $studyroom_reservation) {
  return $studyroom_reservation->save();
}

/**
 * URI callback for studyroom_reservations.
 */
function studyroom_reservation_uri(StudyroomReservation $studyroom_reservation) {
  return array(
    'path' => STUDYROOM_RESERVATION_PATH . $studyroom_reservation->reservation_id,
  );
}

/**
 * Implements hook_views_api().
 */
function studyroom_reservation_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'studyroom_reservation') . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function studyroom_reservation_theme() {
  $module_path = drupal_get_path('module', 'studyroom_reservation');

  $base = array(
    'file' => 'theme.inc',
    'path' => "$module_path/theme",
  );

  return array(
    'studyroom_reservation_choose_type' => $base + array(
      'variables' => array(
        'types' => array(),
        'space' => 'int',
        'datetime' => 'int',
      ),
    ),
    'studyroom_reservation_type_overview_tabledrag_form' => $base + array(
      'render element' => 'form',
    ),
    'studyroom_reservation' => array(
      'render element' => 'elements',
      'template' => 'studyroom-reservation',
      'path' => "$module_path/theme",
    ),
  );
}

/**
 * Callback for getting studyroom_reservation properties.
 */
function studyroom_reservation_get_properties($data, array $options, $name) {
  switch ($name) {
    case 'duration':
      return format_interval($data->duration);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function studyroom_reservation_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link.
  if ($root_path == STUDYROOM_RESERVATION_ADMIN_PATH) {
    $item = menu_get_item(STUDYROOM_RESERVATION_PATH . 'add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Create the fields.
 */
function studyroom_reservation_create_fields() {
  // Create reservation datetime field.
  studyroom_reservation_create_field_reservation_datetime();

  // Create field for occupancy.
  studyroom_reservation_create_field_reservation_occupancy();

  // @todo Add hook to allow other modules to add fields.
}

/**
 * Create the field instances.
 */
function studyroom_reservation_create_field_instances($entity_type = NULL) {
  // Create reservation datetime field instance.
  if (isset($entity_type)) {
    studyroom_reservation_create_field_instance_reservation_datetime($entity_type);
  }
  else {
    foreach (studyroom_reservation_types() as $type) {
      studyroom_reservation_create_field_instance_reservation_datetime($type->type);
    }
  }

  // @todo Add hook to allow other modules to add field instances.
}

/**
 * Create the room hours field.
 */
function studyroom_reservation_create_field_reservation_datetime() {
  $field = field_info_field('field_reservation_datetime');
  if (empty($field)) {
    $field = array(
      'translatable' => '0',
      'settings' => array(
        'granularity' => array(
          'month' => 'month',
          'day' => 'day',
          'hour' => 'hour',
          'minute' => 'minute',
          'year' => 'year',
          'second' => 0,
        ),
        'tz_handling' => 'none',
        'timezone_db' => '',
        'cache_enabled' => 0,
        'cache_count' => '4',
        'todate' => '',
      ),
      'field_name' => 'field_reservation_datetime',
      'type' => 'datetime',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
    );
    field_create_field($field);
  }
}

/**
 * Create the room hours field.
 */
function studyroom_reservation_create_field_instance_reservation_datetime($bundle) {
  $instance = field_info_instance('studyroom_reservation', 'field_reservation_datetime', $bundle);
  if (empty($instance)) {
    $instance = array(
      'label' => 'Reservation date & time',
      'widget' => array(
        'weight' => '-40',
        'type' => 'date_popup',
        'active' => 1,
        'settings' => array(
          'input_format' => 'm/d/Y - h:i a',
          'input_format_custom' => '',
          'year_range' => '-0:+1',
          'increment' => variable_get('studyroom_time_increment', '15'),
          'label_position' => 'above',
          'text_parts' => array(),
        ),
      ),
      'settings' => array(
        'default_value' => 'now',
        'default_value_code' => '',
        'default_value2' => 'same',
        'default_value_code2' => '',
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'date_default',
          'settings' => array(
            'format_type' => 'long',
            'multiple_number' => '',
            'multiple_from' => '',
            'multiple_to' => '',
            'fromto' => 'both',
          ),
          'weight' => 1,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'required' => 1,
      'description' => 'Date/Time for this reservation.',
      'field_name' => 'field_reservation_datetime',
      'entity_type' => 'studyroom_reservation',
      'bundle' => $bundle,
    );
    field_create_instance($instance);
  }
}

/**
 * Create the room hours field.
 */
function studyroom_reservation_create_field_reservation_occupancy() {
  $field = array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_reservation_occupancy',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  );
  field_create_field($field);

  $instance = array(
    'label' => 'Occupancy',
    'widget' => array(
      'weight' => '6',
      'type' => 'number',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'min' => '1',
      'max' => '100',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'number_integer',
        'settings' => array(
          'thousand_separator' => ' ',
          'decimal_separator' => '.',
          'scale' => 0,
          'prefix_suffix' => TRUE,
        ),
        'weight' => 2,
      ),
    ),
    'required' => 1,
    'description' => 'Enter the number of occupants for this space.',
    'default_value' => NULL,
    'field_name' => 'field_reservation_occupancy',
    'entity_type' => 'studyroom_reservation',
    'bundle' => 'user',
  );
  field_create_instance($instance);
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Lock the field settings on 'field_reservation_datetime'.
 */
function studyroom_reservation_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['field_name'] == 'field_reservation_datetime') {
    $form['field']['#access'] = FALSE;
    drupal_set_message(t('Some settings have been removed to ensure the module works correctly.'));
  }
}

/**
 * Implements hook_menu_alter().
 */
function studyroom_reservation_menu_alter(&$items) {
  // Remove the delete tab and field-settings for this field. Need to do this
  // rather than locking field because user needs ability to edit some settings.
  $path = STUDYROOM_RESERVATION_TYPE_ADMIN_PATH . '/manage/%studyroom_reservation_type/fields';
  $items[$path . '/field_reservation_datetime/delete']['type'] = MENU_CALLBACK;
  $items[$path . '/field_reservation_datetime/field-settings']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_studyroom_time_increment_update().
 */
function studyroom_reservation_studyroom_time_increment_update($time_increment) {
  foreach (studyroom_reservation_types() as $type) {
    $instance = field_info_instance('studyroom_reservation', 'field_reservation_datetime', $type->type);
    $instance['widget']['settings']['increment'] = $time_increment;
    field_update_instance($instance);
  }
}

/**
 * Alter the date_popup widget element.
 */
function studyroom_reservation_date_popup_process_alter(&$element, &$form_state, $context) {
  // Return if no field set in element or not field_reservation_datetime field.
  if (!isset($element['#field']) || $element['#field']['field_name'] != 'field_reservation_datetime') {
    return;
  }

  // Set minimum date to today for all reservations.
  $id = $element['date']['#id'];
  $js_settings['datePopup'][$id] = array(
    'func' => 'datepicker',
    'settings' => array(
      'minDate' => "0",
      'maxDate' => "+" . $form_state['studyroom']->max_days_advance . "d",
    ),
  );
  drupal_add_js($js_settings, 'setting');
}

/**
 * Implements hook_entity_insert().
 */
function studyroom_reservation_entity_insert($entity, $type) {
  if ($type != 'studyroom_reservation') {
    return;
  }

  $uri = studyroom_reservation_uri($entity);
  $link = l(t('view'), $uri['path']);
  $type = studyroom_reservation_type_label($entity->type);
  $watchdog_args = array('@type' => $type, '%title' => $entity->label());
  $t_args = array('%title' => $entity->label());

  watchdog('studyroom_reservation', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $link);
  if (!$entity->isLocked() && (isset($entity->message) && $entity->message)) {
    drupal_set_message(t('%title has been created.', $t_args));
  }
}

/**
 * Implements hook_entity_update().
 */
function studyroom_reservation_entity_update($entity, $type) {
  if ($type != 'studyroom_reservation') {
    return;
  }

  $uri = studyroom_reservation_uri($entity);
  $link = l(t('view'), $uri['path']);
  $type = studyroom_reservation_type_label($entity->type);
  $watchdog_args = array('@type' => $type, '%title' => $entity->label());
  $t_args = array('%title' => $entity->label());

  watchdog('studyroom_reservation', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $link);
  if (!$entity->isLocked() && (isset($entity->message) && $entity->message)) {
    drupal_set_message(t('%title has been updated.', $t_args));
  }
}

/********************************* API TYPE FUNCTIONS ************************/
/**
 * API type function to get reservation_per_space_per_day.
 *
 * @todo Validate input values.
 */
function studyroom_reservation_per_space_per_day($space_id, $date, $curr_reservation = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'studyroom_reservation')
    ->propertyCondition('space_id', $space_id)
    ->fieldCondition('field_reservation_datetime', 'value', $date, 'STARTS_WITH')
    ->fieldOrderBy('field_reservation_datetime', 'value', 'ASC');

  // Do not get current reservation (if exists).
  if (isset($curr_reservation) && isset($curr_reservation->reservation_id)) {
    $query->propertyCondition('reservation_id', $curr_reservation->reservation_id, '<>');
  }

  $entities = $query->execute();

  // Return if no resverations found.
  if (count($entities) == 0) {
    return array();
  }

  $res_ids = array_keys($entities['studyroom_reservation']);
  return _studyroom_reservation_api_return($res_ids);
}

/**
 * API type function to get reservation_per_space_per_range.
 *
 * @todo Validate input values.
 */
function studyroom_reservation_per_space_per_range($space, $year, $week, $json = FALSE) {
  $week_range = date_week_range($week, $year);
  // Was 'Y-m-d H:i:s' before.
  $week_start = date_format_date($week_range[0], 'custom', 'Y-m-d');
  $week_end = date_format_date($week_range[1], 'custom', 'Y-m-d');

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'studyroom_reservation')
                    ->propertyCondition('space_id', $space->space_id)
                    ->fieldCondition('field_reservation_datetime', 'value', array($week_start, $week_end), 'BETWEEN')
                    ->fieldOrderBy('field_reservation_datetime', 'value', 'ASC')
                    ->execute();

  // Return if no resverations found.
  if (count($entities) == 0) {
    return array();
  }

  $res_ids = array_keys($entities['studyroom_reservation']);
  if ($json) {
    return _studyroom_reservation_api_return_json($res_ids);
  }
  else {
    return _studyroom_reservation_api_return($res_ids, TRUE);
  }
}

/**
 * API type function to get reservation_per_start_time.
 *
 * @todo Validate input values.
 */
function studyroom_reservation_per_time_range($start_time, $end_time) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'studyroom_reservation')
    ->propertyCondition('locked', 0)
    ->fieldCondition('field_reservation_datetime', 'value', array($start_time, $end_time), 'BETWEEN')
    ->fieldOrderBy('field_reservation_datetime', 'value', 'ASC');

  $entities = $query->execute();

  // Return if no resverations found.
  if (count($entities) == 0) {
    return array();
  }

  return array_keys($entities['studyroom_reservation']);
}

/**
 * Internal function to build API return arrays.
 */
function _studyroom_reservation_api_return($res_ids = array(), $by_date = FALSE) {
  $resvs = array();
  if (count($res_ids) == 0) {
    return $resvs;
  }

  // Load reservations.
  $resverations = studyroom_reservation_load_multiple($res_ids, array(), TRUE);
  if (count($resverations) == 0) {
    return $resvs;
  }

  // Change structure for easier usage.
  foreach ($resverations as $id => $resveration) {
    $date_time = field_get_items('studyroom_reservation', $resveration, 'field_reservation_datetime');
    if (!is_array($date_time)) {
      watchdog('studyroom_reservation', '%title - no date field in _studyroom_reservation_api_return',
        array('%title' => $resveration->label), WATCHDOG_ERROR);
      continue;
    }
    $date_time = array_shift($date_time);
    $date_time = new DateObject($date_time['value'], $date_time['timezone']);

    // Clean up reservation.
    unset($resveration->field_reservation_datetime);

    // Build reservation info.
    $key = $date_time->format('Y-m-d');
    $r = new stdClass();
    $r = $resveration;
    $r->res_date = $key;
    $r->start_time = $date_time->format('U');

    // Add duration.
    $date_time->add(new DateInterval('PT' . $resveration->duration . 'S'));
    $r->end_time = $date_time->format('U');
    $r->all_day = ($resveration->duration == 86399) ? TRUE : FALSE;

    if ($by_date) {
      $resvs[$key][$id] = $r;
    }
    else {
      $resvs[$id] = $r;
    }
  }

  return $resvs;
}

/**
 * Internal function to build API return arrays.
 */
function _studyroom_reservation_api_return_json($res_ids = array(), $by_date = FALSE) {
  $resvs = array();
  if (count($res_ids) == 0) {
    return $resvs;
  }

  // Load reservations.
  $entities = studyroom_reservation_load_multiple($res_ids);
  if (count($entities) == 0) {
    return $resvs;
  }

  // Change structure for easier usage.
  foreach ($entities as $id => $entity) {
    $date_time = field_get_items('studyroom_reservation', $entity, 'field_reservation_datetime');
    $start = new DateObject($date_time[0]['value'], $date_time[0]['timezone']);
    $uri = studyroom_reservation_uri($entity);

    // Add duration.
    $end = clone($start);
    $end->add(new DateInterval('PT' . $entity->duration . 'S'));

    // $resvs[$id];
    $resvs[] = array(
      'title' => $entity->label . ' - ' . $start->format('m-d-Y H:i a'),
      'start' => $start->format('U'),
      'end' => $end->format('U'),
      'url' => '/' . $uri['path'],
    );
  }

  return $resvs;
}
