<?php
/**
 * @file
 * Main module for studyroom_devel_generate.
 */

/**
 * Implements hook_menu().
 */
function studyroom_devel_generate_menu() {
  $items = array();
  if (module_exists('studyroom_space')) {
    $items['admin/config/development/generate/spaces'] = array(
      'title' => 'Generate spaces',
      'description' => 'Generate a given number of spaces. Optionally delete current spaces.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('studyroom_devel_generate_spaces_form'),
      'access arguments' => array('configure studyroom settings'),
    );
  }
  if (module_exists('studyroom_reservation')) {
    $items['admin/config/development/generate/reservations'] = array(
      'title' => 'Generate reservations',
      'description' => 'Generate a given number of reservations. Optionally delete current reservations.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('studyroom_devel_generate_reservations_form'),
      'access arguments' => array('configure studyroom settings'),
    );
  }
  if (module_exists('studyroom_closed')) {
    $items['admin/config/development/generate/closed'] = array(
      'title' => 'Generate closed reservations',
      'description' => 'Generate a given number of closed reservations. Optionally delete current reservations.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('studyroom_devel_generate_closed_form'),
      'access arguments' => array('configure studyroom settings'),
    );
  }
  return $items;
}

/**
 * Generates spaces using FormAPI.
 */
function studyroom_devel_generate_spaces_form() {
  $options = array();

  $locations = studyroom_space_locations();
  foreach ($locations as $type => $location) {
    $options[$type] = $location->label;
  }

  if (empty($options)) {
    drupal_set_message(t('You do not have any !create defined, so spaces cannot be generated.',
      array('!create' => l(t('location'), STUDYROOM_SPACE_MENU_LOCATION . '/add'))), 'error', FALSE);
    return;
  }

  $form['locations'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Locations'),
    '#options' => $options,
    '#default_value' => array_keys($options),
    '#description' => t('Be sure to <strong>define</strong> !link for the Hours field (manage fields) for each location, as this module use those hours when creating each space.', array('!link' => l(t('default hours'), STUDYROOM_SPACE_MENU_LOCATION))),
  );
  $form['kill_spaces'] = array(
    '#type' => 'checkbox',
    '#title' => t('<strong>Delete all spaces</strong> in these locations before generating new spaces.'),
    '#default_value' => FALSE,
  );
  $form['num_spaces'] = array(
    '#type' => 'textfield',
    '#title' => t('How many spaces would you like to generate?'),
    '#default_value' => 1,
    '#size' => 10,
  );
  $form['title_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Max word length of titles'),
    '#default_value' => 4,
    '#size' => 10,
  );
  $form['max_capacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Max capacity of space'),
    '#default_value' => 5,
    '#size' => 10,
  );
  $form['random_times'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use random times for hours field.'),
    '#default_value' => FALSE,
  );

  unset($options);
  $options[LANGUAGE_NONE] = t('Language neutral');
  if (module_exists('locale')) {
    $options += locale_language_list();
  }
  $form['add_language'] = array(
    '#type' => 'select',
    '#title' => t('Set language on products'),
    '#multiple' => TRUE,
    '#disabled' => !module_exists('locale'),
    '#description' => t('Requires locale.module'),
    '#options' => $options,
    '#default_value' => array(LANGUAGE_NONE => LANGUAGE_NONE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  $form['#redirect'] = FALSE;

  return $form;
}

/**
 * Submit function for studyroom_devel_generate_spaces_form().
 */
function studyroom_devel_generate_spaces_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  module_load_include('inc', 'studyroom_devel_generate', 'devel_generate');
  $form_state['values']['locations'] = array_filter($form_state['values']['locations']);
  if ($form_state['values']['num_spaces'] <= 50) {
    studyroom_devel_generate_spaces($form_state);
  }
  else {
    module_load_include('inc', 'studyroom_devel_generate', 'devel_generate_batch');
    studyroom_devel_generate_batch_spaces($form_state);
  }
}

/**
 * Generates reservations using FormAPI.
 */
function studyroom_devel_generate_reservations_form() {
  $form['types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Types'),
    '#options' => studyroom_reservation_types_options(),
    '#default_value' => array('user'),
  );
  $form['notes'] = array(
    '#markup' => t('Be sure to <strong>define</strong> !link for the Hours field (manage fields) for each location, as this module use those hours when creating each space.', array('!link' => l(t('default hours'), STUDYROOM_SPACE_MENU_LOCATION))),
    '#prefix' => '<div class="form-item"><div class="description">',
    '#suffix' => '</div></div>',
  );
  $form['kill_reservations'] = array(
    '#type' => 'checkbox',
    '#title' => t('<strong>Delete all reservations</strong> of these types before generating new reservations.'),
    '#default_value' => FALSE,
  );

  // Spaces.
  $space = new StudyroomSpace();
  unset($options);
  $options = $space->optionsSpaces();
  if (empty($options)) {
    drupal_set_message(t('You do not have any !space created, so reservations cannot be generated.</a>',
      array('!space' => l(t('spaces'), STUDYROOM_SPACE_MENU_SPACE))), 'error', FALSE);
    return;
  }
  $form['spaces_fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Spaces'),
    '#description' => t('Select which spaces to use. If a space cannot use the reservation type selected, it will be skipped.'),
    '#tree' => FALSE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="spaces_all"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['spaces_fs']['spaces'] = array(
    '#title' => t('Spaces'),
    '#type' => 'tableselect',
    '#header' => array(
      'title' => array('data' => t('Space')),
      'location' => array('data' => t('Location')),
    ),
    '#options' => $options,
    '#default_value' => drupal_map_assoc(array_keys($options)),
    '#multiple' => TRUE,
    '#empty' => t('No spaces available.'),
    '#prefix' => '<div class="studyroom-devel-generate-tableselect">',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );

  $form['num_reservations'] = array(
    '#type' => 'textfield',
    '#title' => t('How many reservations would you like to try to generate?'),
    '#default_value' => 10,
    '#size' => 10,
    '#required' => TRUE,
    '#description' => t('Actually number generated might be less due to conflicts when being created.'),
  );
  $time_range_options = array(86400, 259200, 604800, 1209600, 2592000);
  $form['time_range'] = array(
    '#type' => 'select',
    '#title' => t('How far in advance should reservations be created?'),
    '#options' => drupal_map_assoc($time_range_options, 'format_interval'),
    '#default_value' => 1209600,
    '#description' => t('Currently does not respect any limits placed on spaces or reservation types.'),
  );

  unset($options);
  $options[LANGUAGE_NONE] = t('Language neutral');
  if (module_exists('locale')) {
    $options += locale_language_list();
  }
  $form['add_language'] = array(
    '#type' => 'select',
    '#title' => t('Set language on products'),
    '#multiple' => TRUE,
    '#disabled' => !module_exists('locale'),
    '#description' => t('Requires locale.module'),
    '#options' => $options,
    '#default_value' => array(LANGUAGE_NONE => LANGUAGE_NONE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  $form['#redirect'] = FALSE;

  return $form;
}

/**
 * Submit function for studyroom_devel_generate_reservations_form().
 */
function studyroom_devel_generate_reservations_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  module_load_include('inc', 'studyroom_devel_generate', 'devel_generate');
  $form_state['values']['types'] = array_filter($form_state['values']['types']);

  if ($form_state['values']['num_reservations'] <= 50) {
    studyroom_devel_generate_reservations($form_state);
  }
  else {
    module_load_include('inc', 'studyroom_devel_generate', 'devel_generate_batch');
    studyroom_devel_generate_batch_reservations($form_state);
  }
}

/**
 * Generates reservations using FormAPI.
 */
function studyroom_devel_generate_closed_form() {
  $form['kill_reservations'] = array(
    '#type' => 'checkbox',
    '#title' => t('<strong>Delete all closed reservations</strong> before generating new reservations.'),
    '#default_value' => FALSE,
  );

  // Spaces.
  $space = new StudyroomSpace();
  $options = $space->optionsSpaces();
  if (empty($options)) {
    drupal_set_message(t('You do not have any !space created, so reservations cannot be generated.</a>',
      array('!space' => l(t('spaces'), STUDYROOM_SPACE_MENU_ADMIN_SPACE))), 'error', FALSE);
    return;
  }

  $form['spaces_fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Spaces'),
    '#description' => t('Select which spaces to use.'),
    '#tree' => FALSE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="spaces_all"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['spaces_fs']['spaces'] = array(
    '#title' => t('Spaces'),
    '#type' => 'tableselect',
    '#header' => array(
      'title' => array('data' => t('Space')),
      'location' => array('data' => t('Location')),
    ),
    '#options' => $options,
    '#default_value' => drupal_map_assoc(array_keys($options)),
    '#multiple' => TRUE,
    '#empty' => t('No spaces available.'),
    '#prefix' => '<div class="studyroom-devel-generate-tableselect">',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );

  $form['num_reservations'] = array(
    '#type' => 'textfield',
    '#title' => t('How many reservations would you like to try to generate?'),
    '#default_value' => 10,
    '#size' => 10,
    '#required' => TRUE,
    '#description' => t('Maximum value cannot exceed 30.'),
  );

  unset($options);
  $options[LANGUAGE_NONE] = t('Language neutral');
  if (module_exists('locale')) {
    $options += locale_language_list();
  }
  $form['add_language'] = array(
    '#type' => 'select',
    '#title' => t('Set language on products'),
    '#multiple' => TRUE,
    '#disabled' => !module_exists('locale'),
    '#description' => t('Requires locale.module'),
    '#options' => $options,
    '#default_value' => array(LANGUAGE_NONE => LANGUAGE_NONE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  $form['#redirect'] = FALSE;

  return $form;
}

/**
 * Validate function for studyroom_devel_generate_reservations_form().
 */
function studyroom_devel_generate_closed_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['num_reservations'] > 30) {
    form_set_error('num_reservations', t('Number of reservation to create must be under 30.'));
  }
}

/**
 * Submit function for studyroom_devel_generate_reservations_form().
 */
function studyroom_devel_generate_closed_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $values = $form_state['values'];

  module_load_include('inc', 'studyroom_devel_generate', 'devel_generate');
  studyroom_devel_generate_closed($values);
}

/**
 * Pre-process the devel_generate_content_form request.
 *
 * This is needed so batch api can get the list of users once.
 */
function studyroom_devel_generate_pre_users(&$results) {
  module_load_include('inc', 'devel_generate');
  // Get user id.
  $users = devel_get_users();
  unset($users[0]);
  $results['users'] = $users;
}
