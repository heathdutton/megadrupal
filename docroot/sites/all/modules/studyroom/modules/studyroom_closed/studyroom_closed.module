<?php
/**
 * @file
 * Module for the System Reservation Entity
 */

define('STUDYROOM_CLOSED_MENU_ADMIN_SPACE', 'admin/studyroom/closed');

/**
 * Implements hook_entity_info().
 *
 * @todo work on permissions.
 */
function studyroom_closed_entity_info() {
  $return['studyroom_closed'] = array(
    'label' => t('Closed Reservation'),
    'entity class' => 'StudyroomClosed',
    'controller class' => 'StudyroomClosedController',
    'base table' => 'studyroom_closed',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'studyroom_closed_id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'studyroom_closed_create',
    'module' => 'studyroom_closed',
    'admin ui' => array(
      'path' => STUDYROOM_CLOSED_MENU_ADMIN_SPACE,
      'file' => 'studyroom_closed.admin.inc',
      'controller class' => 'StudyroomClosedUIController',
      'menu wildcard' => '%studyroom_closed',
    ),
  );

  return $return;
}

/**
 * Implements hook_permission().
 */
function studyroom_closed_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity.
  $permissions = array(
    'administer studyroom_closed' => array(
      'title' => t('Administer closed reservations'),
      'description' => t('Edit and delete all closed reservations.'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function studyroom_closed_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'studyroom_closed') . '/views',
  );
}

/**
 * Fetch a studyroom_closed object.
 *
 * Make sure that the wildcard you choose in the studyroom_closed
 * entity definition fits the function name here.
 *
 * @param int $studyroom_closed_id
 *   Integer specifying the studyroom_closed id.
 * @param lool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $studyroom_closed object or FALSE if it cannot be loaded.
 *
 * @see studyroom_closed_load_multiple()
 */
function studyroom_closed_load($studyroom_closed_id, $reset = FALSE) {
  $closeds = studyroom_closed_load_multiple(array($studyroom_closed_id), array(), $reset);
  return reset($closeds);
}


/**
 * Load multiple studyroom_closeds based on certain conditions.
 *
 * @param array $studyroom_closed_ids
 *   An array of studyroom_closed IDs.
 * @param array $conditions
 *   An array of conditions to match against the {studyroom_closed} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   An array of studyroom_closed objects, indexed by studyroom_closed_id.
 *
 * @see entity_load()
 * @see studyroom_closed_load()
 */
function studyroom_closed_load_multiple($studyroom_closed_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('studyroom_closed', $studyroom_closed_ids, $conditions, $reset);
}


/**
 * Deletes a studyroom_closed.
 */
function studyroom_closed_delete(StudyroomClosed $studyroom_closed) {
  $studyroom_closed->delete();
}


/**
 * Delete multiple studyroom_closeds.
 */
function studyroom_closed_delete_multiple(array $studyroom_closed_ids) {
  entity_get_controller('studyroom_closed')->delete($studyroom_closed_ids);
}


/**
 * Create a studyroom_closed object.
 */
function studyroom_closed_create($values = array()) {
  return entity_get_controller('studyroom_closed')->create($values);
}


/**
 * Saves a studyroom_closed to the database.
 */
function studyroom_closed_save(StudyroomClosed $studyroom_closed) {
  return $studyroom_closed->save();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function studyroom_closed_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/studyroom/closed/add' on 'admin/studyroom/closed'.
  if ($root_path == STUDYROOM_CLOSED_MENU_ADMIN_SPACE) {
    $item = menu_get_item(STUDYROOM_CLOSED_MENU_ADMIN_SPACE . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Create the date field.
 */
function studyroom_closed_create_date_field() {
  $field_name = 'field_studyroom_closed_dates';
  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'translatable' => '0',
      'settings' => array(
        'granularity' => array(
          'month' => 'month',
          'day' => 'day',
          'hour' => 'hour',
          'minute' => 'minute',
          'year' => 'year',
          'second' => 0,
        ),
        'tz_handling' => 'none',
        'timezone_db' => '',
        'cache_enabled' => 0,
        'cache_count' => '4',
        'repeat' => '1',
        'todate' => 'required',
      ),
      'field_name' => $field_name,
      'type' => 'datetime',
      'active' => '1',
      'locked' => '0',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_create_field($field);
  }

  $instance = field_info_instance('studyroom_closed', $field_name, 'studyroom_closed');
  if (empty($instance)) {
    $instance = array(
      'label' => 'Dates',
      'widget' => array(
        'weight' => '25',
        'type' => 'date_popup',
        'active' => 1,
        'settings' => array(
          'input_format' => 'm/d/Y - h:i a',
          'input_format_custom' => '',
          'year_range' => '-0:+3',
          'increment' => variable_get('studyroom_time_increment', '15'),
          'label_position' => 'none',
          'text_parts' => array(),
          'display_all_day' => 1,
          'repeat_collapsed' => 1,
        ),
      ),
      'settings' => array(
        'default_value' => 'now',
        'default_value_code' => '',
        'default_value2' => 'blank',
        'default_value_code2' => '',
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'date_default',
          'settings' => array(
            'format_type' => 'long',
            'multiple_number' => '',
            'multiple_from' => '',
            'multiple_to' => '',
            'fromto' => 'both',
            'show_repeat_rule' => 'show',
          ),
          'weight' => 2,
        ),
      ),
      'required' => 1,
      'description' => 'Select the date(s) to create a closed reservation.',
      'field_name' => $field_name,
      'entity_type' => 'studyroom_closed',
      'bundle' => 'studyroom_closed',
    );
    field_create_instance($instance);
  }
}

/**
 * Implements of hook_studyroom_time_increment_update().
 */
function studyroom_closed_studyroom_time_increment_update($time_increment) {
  $instance = field_info_instance('studyroom_closed', 'field_studyroom_closed_dates', 'studyroom_closed');
  $instance['widget']['settings']['increment'] = $time_increment;
  field_update_instance($instance);
}

/**
 * Alter the date_popup widget element.
 *
 * Only process if field is field_studyroom_closed_dates.
 */
function studyroom_closed_date_popup_process_alter(&$element, &$form_state, $context) {
  if (!isset($element['#field']) || $element['#field']['field_name'] != 'field_studyroom_closed_dates') {
    return;
  }

  // Set minimum date to today for all reservations.
  $id = $element['date']['#id'];
  $js_settings['datePopup'][$id] = array(
    'func' => 'datepicker',
    'settings' => array(
      'minDate' => "0",
    ),
  );
  drupal_add_js($js_settings, 'setting');
}

/**
 * Theme the resevation label.
 */
function theme_studyroom_reservation_closed_label() {
  return 'CLOSED';
}

/**
 * Implements hook_entity_delete().
 *
 * See if any conflict can be deleted.
 */
function studyroom_closed_entity_delete($entity, $type) {
  if ($type != 'studyroom_reservation') {
    return;
  }

  // Use db_query to get any conflict.
  $record = db_select('studyroom_closed_conflict', 'c')
    ->fields('c')
    ->condition('reservation', $entity->reservation_id)
    ->execute()
    ->fetchObject();

  // Remove conflict entry.
  if ($record) {
    db_delete('studyroom_closed_conflict')
      ->condition('reservation', $record->reservation)
      ->execute();
  }
}
