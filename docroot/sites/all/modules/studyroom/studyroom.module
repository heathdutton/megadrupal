<?php

/**
 * @file
 * Main module for the studyroom system.
 */

define('STUDYROOM_MENU', 'admin/studyroom');

/**
 * Implements hook_help().
 */
function studyroom_help($path, $arg) {
  switch ($path) {
    case 'admin/help#studyroom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The studyroom module is an system of modules that allow you to build a reservation system for most university use. The module allows for multiple locations (each with there own set of configurations), reservation profiles to have different rules for rooms, default room hours for each location, and many more options.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('To configure and manage the studyroom system, you will use both our modules and several core components.  Below is an explaination of which one and how there are used (with links to each).') . '</p>';

      $output .= '<dl>';
      $output .= '<dt><h4>' . t('Core') . '</h4></dt>';
      $output .= '<dd>' . t('We use taxonomy to create and manage several vocabularies to organize our rooms and determine reservations type.  These can be managed through the !taxo. The vocabularies we use are "<em>Categories</em>" and "<em>Reservation Type</em>".', array('!taxo' => l(t('Taxonomy page'), 'admin/structure/taxonomy'))) . '</dd>';
      $output .= '<dd>' . t('Users') . '</dd>';
      $output .= '</dl>';

      $output .= '<dl>';
      $output .= '<dt><h4>' . t('Studyroom') . '</h4></dt>';
      $output .= '<dd>' . t('Rooms are used to create and manage locations and rooms.  These can be managed through the !url.', array('!url' => l(t('configuration page'), 'admin/studyroom/room'))) . '</dd>';
      $output .= '<dd>' . t('Reservation profiles are used to ...  These can be managed through the !url.', array('!url' => l(t('configuration page'), 'admin/studyroom/reservation')));
      $output .= '</dl>';
      return $output;

    case STUDYROOM_MENU:
      return '<p>' . t('See !url for links to other configuration options.', array('!url' => l(t('system help'), 'admin/help/studyroom'))) . '</p>';

  }
}

/**
 * Implements template_preprocess_entity().
 *
 * Runs a entity specific preprocess function, if it exists.
 */
function studyroom_preprocess_entity(&$variables, $hook) {
  $function = $variables['entity_type'] . '_preprocess_entity_' . $variables['entity_type'];
  if (function_exists($function)) {
    $function($variables, $hook);
  }
}

/**
 * Implements hook_permission().
 */
function studyroom_permission() {
  $permissions = array(
    'configure studyroom settings' => array(
      'title' => t('Configure studyroom settings'),
      'description' => t('Allows users to configure studyroom settings'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function studyroom_menu() {
  // Top level "studyroom" container.
  $items[STUDYROOM_MENU] = array(
    'title' => 'Studyroom',
    'description' => 'Administer the studyroom system.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  $items['admin/config/studyroom'] = array(
    'title' => 'Studyroom',
    'description' => 'Configure settings studyroom management.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('studyroom_settings_form'),
    'access arguments' => array('configure studyroom settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Configuration settings form.
 */
function studyroom_settings_form() {
  $form = array();

  $form['time_increment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display hour increments'),
    '#description' => t('This will determine the hour increment to use when displaying hours of the day to the screen.'),
  );
  $form['time_increment']['studyroom_time_increment'] = array(
    '#type' => 'select', '#title' => t('Time increments'),
    '#default_value' => variable_get('studyroom_time_increment', '15'),
    '#options' => array(
      1 => t('1 minute'),
      5 => t('5 minutes'),
      10 => t('10 minutes'),
      15 => t('15 minutes'),
      30 => t('30 minutes'),
      60 => t('60 minutes'),
    ),
    '#description' => t('Select the minute increment value.'),
  );

  $form['time_limit'] = array(
    '#type' => 'fieldset',
    '#title' => t('Limit hours'),
    '#description' => t('Set limits on which hours are able to be scheduled.'),
  );

  // Build hours array.
  $hours = date_hours();
  $form['time_limit']['studyroom_limit_start'] = array(
    '#type' => 'select',
    '#title' => t('Limit start time'),
    '#default_value' => variable_get('studyroom_limit_start', ''),
    '#options' => array('' => '- None -') + drupal_map_assoc($hours, 'studyroom_format_hours_ampm'),
    '#description' => t("Set the global day start time.  No time's used in this package will be allowed to start before this time."),
  );
  $form['time_limit']['studyroom_limit_end'] = array(
    '#type' => 'select',
    '#title' => t('Limit end time'),
    '#default_value' => variable_get('studyroom_limit_end', ''),
    '#options' => array('' => '- None -') + drupal_map_assoc($hours, 'studyroom_format_hours_ampm'),
    '#description' => t("Set the global day end time.  No time's used in this package will be allowed to end after this time."),
  );

  $studyroom = new Studyroom();
  $form['rules'] = array(
    '#type' => 'fieldset',
    '#title' => t('Reservation rules'),
    '#description' => t('Set site wide rules for making reservations.'),
  );
  $form['rules']['studyroom_min_duration'] = array(
    '#type' => 'select',
    '#title' => t('Set minimum duration'),
    '#default_value' => variable_get('studyroom_min_duration', ''),
    '#options' => $studyroom->optionsMinDuartion(FALSE),
    '#description' => t("Set the global minimum duration for a reservation."),
  );
  $form['rules']['studyroom_max_duration'] = array(
    '#type' => 'select',
    '#title' => t('Set maximum duration'),
    '#default_value' => variable_get('studyroom_max_duration', ''),
    '#options' => $studyroom->optionsMaxDuartion(),
    '#description' => t("Set the global maximum duration for a reservation."),
  );
  $form['rules']['studyroom_max_days_advance'] = array(
    '#type' => 'select',
    '#title' => t('Set maximum days in advance'),
    '#default_value' => variable_get('studyroom_max_days_advance', ''),
    '#options' => $studyroom->optionsMaxDayAdvance(),
    '#description' => t("Set the global maximum days in advance a reservation can be made."),
  );

  $form['#submit'][] = 'studyroom_settings_form_submit';
  return system_settings_form($form);
}

/**
 * Form validate handler for studyroom_settings_form().
 */
function studyroom_settings_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  // Make sure minimum duration is equal or larger that time increment.
  if ($values['studyroom_min_duration'] < $values['studyroom_time_increment'] * 60) {
    form_set_error('studyroom_min_duration', t('Minimum duration cannot be less than the time incements.'));
  }

  // If either limit value set, check if valid; else set to null.
  if (!empty($values['studyroom_limit_start']) || !empty($values['studyroom_limit_end'])) {
    if (empty($values['studyroom_limit_start'])) {
      form_set_error('studyroom_limit_start', t('You must provide a start day time limit.'));
    }
    if (empty($values['studyroom_limit_end'])) {
      form_set_error('studyroom_limit_end', t('You must provide a end day time limit.'));
    }

    // Check if end time greater that start time.
    if ($values['studyroom_limit_start'] > $values['studyroom_limit_end']) {
      form_set_error('studyroom_limit_start', t('The day start time limit is less the day end time limit.'));
    }
  }
  else {
    form_set_value($form['time_limit']['studyroom_limit_start'], NULL, $form_state);
    form_set_value($form['time_limit']['studyroom_limit_end'], NULL, $form_state);
  }

  $studyroom = new Studyroom();
  $studyroom->validateDurations($form, $form_state, 'studyroom', '');

  if (empty($values['studyroom_max_days_advance'])) {
    form_set_value($form['rules']['studyroom_max_days_advance'], NULL, $form_state);
  }
}

/**
 * Form submit handler for studyroom_settings_form().
 */
function studyroom_settings_form_submit($form, &$form_state) {
  // Notify other modules that time increment has changed.
  module_invoke_all('studyroom_time_increment_update', $form_state['values']['studyroom_time_increment']);
}

/**
 * Global Functions
 */

/**
 * Return start of day limit for studyrooms.
 */
function studyroom_limit_start() {
  $hour = variable_get('studyroom_limit_start', NULL);
  if (!isset($hour)) {
    return '00:00:00';
  }

  return $hour . ':00:00';
}

/**
 * Return end of day limit for studyrooms.
 *
 * @param bool $real
 *   Flag to return actually value.
 */
function studyroom_limit_end($real = FALSE) {
  $hour = variable_get('studyroom_limit_end', NULL);
  if (!isset($hour)) {
    return '23:59:59';
    // Old: return ($real) ? '24:00:00' : '23:59:59';
  }

  return ($real) ? $hour . ':00:00' : ($hour - 1) . ':59:59';
}

/**
 * Return date_hours() values filtered for start and end limits.
 */
function studyroom_date_hours($format = 'H') {
  $hours = date_hours($format);
  $limit_start = studyroom_limit_start();
  $limit_end = studyroom_limit_end(TRUE);

  foreach ($hours as $key => $hour) {
    if (strlen($key) > 0 && ($key < $limit_start || $key > $limit_end)) {
      unset($hours[$key]);
    }
  }

  return $hours;
}

/**
 * Implements hook_date_popup_process_alter().
 *
 * Set start time and site time limits.
 */
function studyroom_date_popup_process_alter(&$element, &$form_state, $context) {
  // List of fields we are using.
  $fields = array(
    'field_reservation_datetime',
    'field_space_hours',
    'field_studyroom_closed_dates',
  );
  if ((isset($element['#field']) && in_array($element['#field']['field_name'], $fields))
    || isset($element['#studyroom_hours']) && $element['#studyroom_hours']) {

    // Get default values to use.  If closed field, use real time.
    $real = ((isset($element['#studyroom_hours']) && $element['#studyroom_hours'])
      || $element['#field']['field_name'] == 'field_studyroom_closed_dates') ? TRUE : FALSE;
    $limit_start = studyroom_limit_start();
    $limit_end = studyroom_limit_end($real);

    $popup = date_popup_get_preferred_timepicker();
    if ($popup == 'wvega') {
      $func = 'timepicker';
      $settings = array(
        'minTime' => $limit_start,
        'maxTime' => $limit_end,
      );
      // Set default start time if limits.
      $start_time = new DateObject($settings['minTime']);
      $settings['startTime'] = $start_time->format(DATE_FORMAT_UNIX) * 1000;
    }
    else {
      $func = 'timeEntry';
      $min_time = new DateObject($limit_start);
      $max_time = new DateObject($limit_end);
      $settings = array(
        'minTime' => $min_time->format(DATE_FORMAT_DATETIME),
        'maxTime' => $max_time->format(DATE_FORMAT_DATETIME),
      );
    }
    $id = $element['time']['#id'];
    $js_settings['datePopup'][$id] = array(
      'func' => $func,
      'settings' => $settings,
    );
    drupal_add_js($js_settings, 'setting');
  }
}

/**
 * Return hours formated for ampm for drupal_map_assoc.
 */
function studyroom_format_hours_ampm($interval) {
  $output = '';
  if (!empty($interval)) {
    if (!strstr($interval, ":")) {
      $output = format_date(mktime($interval, 0, 0, 1, 1, 2000), 'custom', 'g a');
    }
    else {
      list($hr, $min) = explode(":", $interval);
      $output = format_date(mktime($hr, $min, 0, 1, 1, 2000), 'custom', 'g:i a');
    }
  }
  if ($interval == '0') {
    $output = 'Midnight';
  }

  return $output ? $output : t('', array());
}

/**
 * Return days formated for drupal_map_assoc.
 */
function studyroom_format_day($interval, $granularity = 2, $langcode = NULL) {
  $units = array(
    '1 year|@count years' => 365,
    '1 month|@count months' => 30,
    '1 week|@count weeks' => 7,
    '1 day|@count days' => 1,
  );
  $output = '';
  foreach ($units as $key => $value) {
    $key = explode('|', $key);
    if ($interval >= $value) {
      $output .= ($output ? ' ' : '') . format_plural(floor($interval / $value), $key[0], $key[1], array(), array('langcode' => $langcode));
      $interval %= $value;
      --$granularity;
    }

    if ($granularity == 0) {
      break;
    }
  }
  return $output ? $output : t('0 day', array(), array('langcode' => $langcode));
}
