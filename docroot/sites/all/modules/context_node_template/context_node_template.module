<?php

/**
 * @file
 * Provides extra condition with node page template.
 */

/**
 * Implementation of hook_perm().
 */
function context_node_template_permission() {
  return array(
    'administer node templates' => array(
      'title' => t('Administer node templates'),
      'description' => t('Administer the node templates.'),
    ),
  );
}

/**
 * Implements of hook_init().
 */
function context_node_template_init() {
  $item = menu_get_item();
  if ($item['path'] == 'node/%' && $plugin = context_get_plugin('condition', 'context_node_template')) {
    $plugin->execute($item);
  }
}

/**
 * Implements hook_menu().
 */
function context_node_template_menu() {	
  $items['admin/config/content/node_template'] = array(		
    'title' => 'Context node template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_node_template_settings_form'),
    'access arguments' => array('administer node templates'),
  );

  return $items  ; 
}

/**
 * Context node template settings page.
 */
function context_node_template_settings_form($form) {
  $header = array(
    array( 'data' => 'Template'),
    array( 'data' => 'Template Alias'),  
  );

  $form['node_template'] = array(
    '#tree' => TRUE,
    '#header' => $header,
    '#theme' => 'context_node_template_form_table'
  );

  foreach (_get_page_templates() as $key => $template) {
    if($key != 'default'){
      $form['node_template'][$key]['#template'] = $key;
      $form['node_template'][$key]['template_alias'] = array(
        '#type' => 'textfield',
        '#default_value' => $template,
        '#size' => 10
      );
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implementation of hook_theme.
 */
function context_node_template_theme() {
  return array(
    'context_node_template_form_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme callback for the form table.
 */
function theme_context_node_template_form_table(&$variables) {
  // Get the userful values.
  $element = $variables['element'];
  $header = $element['#header'];
  
  foreach (element_children($element) as $key) {
    $rows[] = array(
      array('data' => $element[$key]['#template']),
      array('data' => $element[$key]['template_alias']),
    );
  }
  if(!empty($rows)){
    return theme('table', array('header' => $header, 'rows' => $rows));
  }
}

/**
 * Save the template alias value.
 */
function context_node_template_settings_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['node_template'])) {
    foreach ($form_state['values']['node_template'] as $template => $alias) {
      $result = db_query('SELECT * FROM {node_template_alias} WHERE template = :template', array(':template' => $template))->fetchAll();
      if (!empty($result)) {
        db_update('node_template_alias')
          ->fields(array('template_alias' => $alias))
          ->condition('template', $template)
          ->execute();        
      }else{
        db_insert('node_template_alias')
          ->fields(array(
            'template' => $template,
            'template_alias' => $alias,
          ))
          ->execute();
      }
    }

    drupal_set_message(t('The config save successfully.'));
  }
}

/**
 * Implements hook_node_insert().
 */
function context_node_template_node_insert($node) {   
  if (isset($node->template)) {
    db_insert('node_template')
      ->fields(array(
        'nid' => $node->nid,
        'template' => $node->template,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function context_node_template_node_update($node) {
  $result = db_query('SELECT template FROM {node_template} WHERE nid = :nid', array(':nid' => $node->nid))->fetchObject();
  if(isset($result->template)) {
    $template = $result->template;
  }

  if (isset($node->template)) {
    if (empty($template)) {
      db_insert('node_template')
        ->fields(array(
          'nid' => $node->nid,
          'template' => $node->template,
        ))
        ->execute();
    }
    else {
      db_update('node_template')
        ->fields(array('template' => $node->template))
        ->condition('nid', $node->nid)
        ->execute();
    }
  }
  else {
    db_delete('node_template')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_view().
 */
function context_node_template_node_view($node, $view_mode) {  
  if(isset($node->nid)) {
      $result = db_query('SELECT template FROM {node_template} WHERE nid = :nid', array(':nid' => $node->nid))->fetchObject();
      if(isset($result->template)) {
        $template = $result->template;
      }
  }

  if (empty($template)) {
    if (variable_get('template_'. $node->type, FALSE)) {
      $template = variable_get('template_'. $node->type, FALSE);
    }
    else {
      $template = 'default';
    }
  }

  $node->template = $template;
}

/**
 * Implements hook_node_prepare().
 */
function context_node_template_node_prepare($node) {
  if(isset($node->nid)) {
    $result = db_query('SELECT template FROM {node_template} WHERE nid = :nid', array(':nid' => $node->nid))->fetchObject();
    if(isset($result->template)) {
      $template = $result->template;
    }
  }

  if (empty($template)) {
    if (variable_get('template_'. $node->type, FALSE)) {
      $template = variable_get('template_'. $node->type, FALSE);
    }
    else {
      $template = 'default';
    }
  }

  $node->template = $template;
}

/**
 * Implements hook_node_delete().
 */
function context_node_template_node_delete($node) {
  db_delete('node_template')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implementation of hook_form_alter().
 */
function context_node_template_form_alter(&$form, $form_state, $form_id) {
  if(isset($form['#node']->type) && variable_get('template_'. $form['#node']->type, FALSE)){
    if ($form['#node']->type .'_node_form' == $form_id) {
      $form['template'] = array(
        '#type' => 'fieldset',
        '#title' => t('Template settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#access' => user_access('administer node templates')
      );

      $template = $form['#node']->template;

      $form['template']['template'] = array(
        '#type' => 'select',
        '#title' => 'Template',
        '#description' => 'Select the template to be used for showing this node',
        '#default_value' => $template,
        '#options' => _get_page_templates(),
        '#access' => user_access('administer node templates')
      );
      $form['template']['#item'] = $template;
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function context_node_template_form_node_type_form_alter(&$form, &$from_state) {
  if (isset($form['#node_type']->type)) {
    $form['node_template'] = array(
      '#type' => 'fieldset',
      '#title' => t('Template settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['node_template']['template'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled Node Template'),
      '#default_value' => variable_get('template_'. $form['#node_type']->type, FALSE),
      '#description' => t('If enabled, this content type will can use node template.'),
    );
  }
}

/**
 * Scan the page templates in theme dir.
 */
function _get_page_templates() {
  $theme = variable_get('theme_default', 'bartik');
  $theme_path = drupal_get_path('theme', $theme);
  $options = array('default' => t('default'));

  $files = file_scan_directory($theme_path, '/.*\.tpl.php$/');
  if (!empty($files)) {
    foreach ($files as $file) {
      if ($file->name != '.' && $file->name != '..' && drupal_substr($file->name, 0, 4) == 'page') {
        $name = drupal_substr($file->name, 0, -4);  // name without .tpl
        $options[$name] = context_node_template_get_templates_alias($name);
      }  
    }
  }

  return $options;
}

/**
 * Get alias by template name.
 */
function context_node_template_get_templates_alias($name) {
  $result = db_query('SELECT template_alias FROM {node_template_alias} WHERE template = :template', array(':template' => $name))->fetchObject();
  if(!empty($result->template_alias)) {
    return $result->template_alias;
  }

  return $name;
}

/**
 * Implementation of hook_preprocess_page().
 */
function context_node_template_process_page(&$variables) {
  if (drupal_substr(request_uri(), -5) != '/edit') {
    if (!empty($variables['node']->template) && $variables['node']->template != 'default') {
      $variables['theme_hook_suggestions'][] = strtr($variables['node']->template,"--","__");
    }
  }
}

/**
 * Implements of hook_context_registry().
 */
function context_node_template_context_registry() {
  return array(
    'conditions' => array(
      'context_node_template' => array(
        'title' => t('Node Page Template'),
        'plugin' => 'context_node_template_context_condition',
      ),
    ),
  );
}

/**
 * Implements of hook_ctools_plugin_api().
 */
function context_node_template_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implements of hook_context_plugins().
 */
function context_node_template_context_plugins() {
  $plugins = array();
  $plugins['context_node_template_context_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'context_node_template') . '/plugins',
      'file' => 'context_node_template_context_condition.inc',
      'class' => 'ContextNodeTemplateContextCondition',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}
