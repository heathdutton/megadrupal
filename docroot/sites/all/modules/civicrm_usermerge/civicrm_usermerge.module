<?php

/**
 * @file
 * Module file used to extend the functionality of the usermerge module.
 */

/**
 * Implements hook_usermerge_merge_users().
 */
function civicrm_usermerge_usermerge_merge_users($user_to_delete, $user_to_keep) {
  civicrm_initialize();

  // Get $user_to_delete contact_id
  $result = civicrm_api('uf_match', 'get', array(
    'version' => 3,
    'uf_id' => $user_to_delete->uid,
  ));
  // If they don't have a contact, don't worry about it... lets move along...
  if (empty($result['id']) || $result['is_error']) {
    watchdog(
      'civicrm_usermerge',
      "Couldn't retrieve a Civi Contact ID for User to delete UID:@user_to_delete",
      array('@user_to_delete' => $user_to_delete->uid),
      WATCHDOG_WARNING
    );

    // Exit out because we dont' need to do the whole merge thing now.
    return;
  }
  $contact_to_delete = $result['values'][$result['id']]['contact_id'];

  // Figure out the id of the uf_match record incase we need it below.
  $contact_to_delete_uf_match_id = $result['id'];

  // Get $user_to_keep contact_id.
  $result = civicrm_api('uf_match', 'get', array(
    'version' => 3,
    'uf_id' => $user_to_keep->uid,
  ));

  // If they don't have a contact, just change the user it's associated with.
  // This should RARELY happen, but it's easier than going through and creating
  // a new contact and the merging into while deleting the other.
  if (empty($result['id']) || $result['is_error']) {
    // I really don't like raw sql, but there is no other way to change hands
    // here.
    $query = "UPDATE civicrm_uf_match
      SET uf_id = %1
      WHERE id =  %2";
    $p = array(
      1 => array($user_to_keep->uid, 'Integer'),
      2 => array($contact_to_delete_uf_match_id, 'Integer'),
    );
    CRM_Core_DAO::executeQuery($query, $p);
    watchdog(
      'civicrm_usermerge',
      "Couldn't retrieve a Civi Contact ID for User to keep UID:@user_to_keep. Merge was still successful.",
      array('@user_to_keep' => $user_to_keep->uid),
      WATCHDOG_WARNING
    );

    // Exit out because we don't need to do the whole merge thing now.
    return;
  }
  $contact_to_keep = $result['values'][$result['id']]['contact_id'];

  // Alright, lets merge this baby. Must do it aggrassivly or conflicts in
  // information will cause the contacts to not merge all the time.
  $params = array(
    'main_id' => $contact_to_keep,
    'other_id' => $contact_to_delete,
    'mode' => 'aggressive',
    'version' => 3,
  );
  $result = civicrm_api('contact', 'merge', $params);
  if (!empty($result['is_error'])) {
    // All I can do is log this error. UserMerge is currently programmed to
    // always succeed.
    // @see https://drupal.org/node/2078113
    watchdog(
      'civicrm_usermerge',
      'Merge failed with message: @msg',
      array('@msg' => $result['error_message']),
      WATCHDOG_ERROR
    );
  }
}

/**
 * Implements hook_usermerge_actions_supported().
 */
function civicrm_usermerge_usermerge_actions_supported() {
  return array(
    'civicrm_usermerge' => t("Migrate user CiviCRM contact and associate items like memberships, groups, and contributions, to the new user."),
  );
}
