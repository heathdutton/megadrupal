<?php
/**
 * @file
 * The module file.
 */

/**
 * @mainpage Limit Visit
 * Limit visit provides the ability to limit the number of times a user can
 * view a page or set of pages, based upon the url, per hour.
 */

/**
 * Implements hook_help().
 */
function limit_visit_help($path, $arg) {
  switch ($path) {
    case 'admin/help#limit_visit':
      // Return a line-break version of the module README.txt
      return check_markup(file_get_contents(drupal_get_path('module', 'limit_visit') . "/README.txt"));
  }
}

/**
 * Implements hook_menu().
 */
function limit_visit_menu() {
  $items["admin/config/system/limit_visit"] = array(
    'title' => 'Limit visit',
    'description' => 'Limit the number of visits allowed per hour to certain pages.',
    'page callback' => 'limit_visit_admin',
    'access arguments' => array('administer limit_visit'),
    'file' => 'limit_visit.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function limit_visit_theme() {
  return array(
    'limit_visit_admin_form' => array('render element' => 'form'),
  );
}

/**
 * Implements hook_permission().
 */
function limit_visit_permission() {
  return array(
    'administer limit_visit' => array(
      'title' => t('administer limit_visit'),
      'description' => t('Set limitations on number of visits to certain pages allowed per user'),
      'restrict access' => TRUE,
    ),
    'bypass limit_visit' => array(
      'title' => t('by pass limit_visit'),
      'description' => t('Ignore limitations of limit_visit'),
    ),
  );
}

/**
 * Implements hook_boot().
 */
function limit_visit_boot() {
  global $user;
  $rules = NULL;
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);

  drupal_load('module', 'user');
  if (user_access('bypass limit_visit')) {
    return TRUE;
  }

  // Load from cache.
  if ($cache = cache_get('limit_visit_rules')) {
    $rules = $cache->data;
  }

  // Load from db and store in cache.
  if (!isset($rules)) {
    $qry = db_select('limit_visit_rules', 'lvr');
    $qry->fields('lvr');
    $rules = $qry->execute()->fetchAllAssoc('lvid');
    cache_set('limit_visit_rules', $rules);
  }

  // For each rule.
  foreach ($rules as $lvid => $rule) {
    if (!drupal_match_path(request_path(), $rule->path)) {
      continue;
    }
    // Get user visit history.
    $recqry = db_select('limit_visit_counts', 'lvc');
    $recqry->fields('lvc');
    $recqry->condition('lvid', $lvid);
    $recqry->condition('uid', $user->uid);
    $record = $recqry->execute()->fetchAssoc();

    // If none exists create a record.
    if (!isset($record['uid'])) {
      db_insert("limit_visit_counts")
        ->fields(array(
          'lvid' => $lvid,
          'uid' => $user->uid,
          'count' => 1,
          'first_visit' => REQUEST_TIME,
        ))->execute();
      return TRUE;
    }
    // If the time has past count=1 time=now.
    if (REQUEST_TIME - $record['first_visit'] > 3600) {
      db_update("limit_visit_counts")
        ->fields(array(
          'count' => 1,
          'first_visit' => REQUEST_TIME,
        ))
        ->condition('lvid', $record['lvid'])
        ->condition('uid', $record['uid'])
        ->execute();
      return TRUE;
    }
    // If the limit has not been reached increment.
    if ($record['count'] < $rule->allowed) {
      db_update("limit_visit_counts")
        ->fields(array(
          'count' => $record['count'] + 1,
        ))
        ->condition('lvid', $record['lvid'])
        ->condition('uid', $record['uid'])
        ->execute();
      return TRUE;
    }
    // Otherwise redirect to problem page.
    $redirect = variable_get("limit_visit_redirect", "");
    if (empty($redirect)) {
      drupal_access_denied();
    }
    drupal_goto($redirect, array(), 307);
  }
}
