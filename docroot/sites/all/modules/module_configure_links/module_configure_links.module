<?php
/**
 * @file
 * Displays or redirects to configuration pages for newly enabled modules.
 */

/**
 * Implements hook_modules_enabled().
 */
function module_configure_links_modules_enabled($modules) {
  // Create global to pass new module list to submit function.
  global $_module_configure_links;
  $_module_configure_links = $modules;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function module_configure_links_form_system_modules_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'module_configure_links_submit';
}

/**
 * Additional submit function for the system modules form.
 *
 * Generates a list of module configuration pages and displays them.
 */
function module_configure_links_submit($form, &$form_state) {
  global $_module_configure_links;

  if ($links = module_configure_links_get_links($_module_configure_links)) {
    // If Drupal is running on the command line (normally via Drush), display a list of URLs
    if (drupal_is_cli()) {
      $list = '';
      foreach ($links as $link) {
        // Create module configure URL list
        $list .= "\n  " . t('@name: !url', array('@name' => $link['name'], '!url' => $link['path']));
      }
      drupal_set_message(t('Enabled module configuration pages:') . $list);
    }
    // If only one module has been enabled, redirect to it.
    elseif (count($links) == 1) {
      drupal_set_message(t('Redirected to @name module configuration page.',
        array('@name' => $links[0]['name'])));
      $form_state['redirect'] = $links[0]['path'];
    }
    // If more than one module enabled, list all configuration links.
    else {
      foreach ($links as $link) {
        // Create module configure links using system classes
        $options = array('attributes' => array(
          'class' => array('module-link', 'module-link-configure'),
          'title' => $link['description'])
        );
        $list[] = l(t($link['name']), $link['path'], $options);
      }
      drupal_set_message(t('Enabled module configuration pages:') .
        theme('item_list', array('items' => $list)));
    }
  }
}

/*
 * Returns a list of configure links for the supplied module list
 */
function module_configure_links_get_links($modules) {
  if (empty($modules)) {
    return FALSE;
  }

  $links = array();
  foreach ($modules as $module) {
    // Load for the info file.
    $info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
    // If the info file exists.
    if (!empty($info)) {
      // If configure is set.
      if (isset($info['configure']) && $link = _module_configure_links_get_links($info['configure'])) {
        $link['name'] = $info['name'];
        $link['description'] = $info['description'];
        $links[] = $link;
      }
      // If configure is not in the info file, make a reasonable guess
      // using by the module's hook_menu.
      elseif ($menu_items = module_invoke($module, 'menu')) {
        $configure = "";
        // Find the shortest path beginning with 'admin/'
        foreach ($menu_items as $path => $item) {
          if (drupal_substr($path, 0, 6) == 'admin/') {
            // Store the first path found, or the next shorter path
            if (empty($configure) || count($path) < count($configure)) {
              $configure = $path;
            }
          }
        }
        // If a short admin path has been located, and a link is available.
        if (!empty($configure) && $link = _module_configure_links_get_links($configure)) {
          $link['name'] = $info['name'];
          $link['description'] = $info['description'];
          $links[] = $link;
        }
      }
    }
  }
  return empty($links) ? FALSE : $links;
}

/*
 * Returns link menu, if accessible by the current user, for a path.
 */
function _module_configure_links_get_links($path) {
  $menu_item = menu_get_item($path);
  // If user has access to menu item or this is CLI.
  if ($menu_item['access'] || drupal_is_cli()) {
    $link['path'] = $path;
    return $link;
  }
  return FALSE;
}
