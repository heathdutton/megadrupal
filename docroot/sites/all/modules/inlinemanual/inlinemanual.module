<?php

/**
 * @file
 * Enables users to use Inline Manuals.
 * Created by fine folks from inlinemanual.com
 * http://inlinemanual.com
 */

/**
 * Implements hook_menu().
 */
 function inlinemanual_menu() {
  $items['admin/config/services/inlinemanual'] = array(
 	'title' => 'Inline Manual',
 	'description' => 'Topics and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inlinemanual_admin_list'),
  	'access arguments' => array('administer inline manual'),
    'file' => 'inlinemanual.admin.inc',
  );

  $items['admin/config/services/inlinemanual/list'] = array(
    'title' => 'Topics',
    'description' => 'List of the topics.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/services/inlinemanual/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure inline manual.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inlinemanual_admin_settings_form'),
    'access arguments' => array('administer inline manual'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inlinemanual.admin.inc',
    'weight' => 1,
  );

  $items['admin/config/services/inlinemanual/refresh'] = array(
    'title' => 'Refresh topics',
    'description' => 'Update topics from server',
    'page callback' => 'inlinemanual_admin_topics_refresh',
    'access arguments' => array('administer inline manual'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inlinemanual.admin.inc',
    'weight' => 2,
  );

  $items['admin/config/services/inlinemanual/topic/%/permissions'] = array(
    'title' => 'Edit permissions',
    'description' => 'Edit permissions for a given topic.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inlinemanual_admin_topic_permissions_form', 5),
    'access arguments' => array('administer inline manual'),
    'file' => 'inlinemanual.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/inlinemanual/topic/%/remove'] = array(
    'title' => 'Remove topic',
    'description' => 'Remove topic from the Drupal database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inlinemanual_admin_topic_delete_confirm_form', 5),
    'access arguments' => array('administer inline manual'),
    'file' => 'inlinemanual.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['inlinemanual/topics'] = array(
    'title' => 'List topics',
    'page callback' => 'inlinemanual_ajax_topics',
    'access arguments' => array('use inline manual'),
    'type' => MENU_CALLBACK,
  );

  $items['inlinemanual/topic/%inlinemanual_topic'] = array(
    'title' => 'Play topic',
    'page callback' => 'inlinemanual_ajax_topic',
    'page arguments' => array(2),
    'access arguments' => array('use inline manual'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter()
 */
function inlinemanual_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/config/services/inlinemanual') {
    $item = menu_get_item('admin/config/services/inlinemanual/refresh');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission()
 */
function inlinemanual_permission() {
  $topics = inlinemanual_get_topics();

  $perms = array(
    'administer inline manual' => array(
      'title' => t('Administer inline manual'),
    ),
    'view disabled inline manuals' => array(
      'title' => t('View disabled inline manuals'),
    ),
    'use inline manual' => array(
      'title' => t('Use inline manual'),
    ),
  );

  if ($topics) {
    foreach ($topics as $topic) {
      $perms['view inlinemanual_topic_' . $topic->tid] = array(
        'title' => t('View %topic_name', array('%topic_name' => $topic->title)),
      );
    }
  }

  return $perms;
}

/**
 * Implements hook_theme
 */
function inlinemanual_theme() {
  return array(
    'inlinemanual_admin_topic_permissions_form' => array(
      'render element' => 'form',
      'file' => 'inlinemanual.admin.inc',
    ),
  );
}

/**
 * Loads a topic item.
 *
 * @param $tid
 *   The topic id.
 *
 * @return
 *   An object describing the item.
 */
function inlinemanual_topic_load($tid) {
  $topics = &drupal_static(__FUNCTION__);
  if (!isset($topics[$tid])) {
    $topic = db_query('SELECT * FROM {inm_topics} WHERE tid = :tid', array(':tid' => $tid))->fetchObject();
    if ($topic) {
      $topic->steps = (array) unserialize($topic->steps);
    }
    $topics[$tid] = $topic;
  }
  return $topics[$tid];
}

/**
 * Featch all topics from through the InlineManual API
 */
function inlinemanual_topics_fetch_all() {
  InlineManual::$site_api_key = variable_get('inlinemanual_site_key', '');

  // Update the database with topics listing and fetch all topics.
  // Keep the visibility settings.
  try {
    $topics = InlineManual_Site::fetchAllTopics();
    foreach ($topics as $topic) {
      $topic = InlineManual_Site::fetchTopic($topic->id);
      db_merge('inm_topics')
          ->key(array('tid' => $topic->id))
          ->fields(array(
            'tid' => $topic->id,
            'title' => $topic->title,
            'description' => $topic->description,
            'version' => $topic->version,
            'steps' => serialize($topic->steps),
            'timestamp' => 0,
            'weight' => $topic->order
            // do not refresh status
          ))
          ->execute();
    }
    return TRUE;
  }
  catch (InlineManual_Error $e) {
    watchdog('inm', 'InlineManual API request failed: %error.', array('%error' => $e->getMessage(), WATCHDOG_ERROR));
    return FALSE;
  }
}

/**
 * Returns a list of topics ordered by title
 */
function inlinemanual_get_topics($status = NULL) {
  $query = db_select('inm_topics', 't');
  $query->fields('t', array('tid', 'title', 'description', 'status', 'version', 'steps'))->orderBy('t.weight');
  if ($status == 'active') {
   $query->condition('status', 1, '=');
  }
  $topics = $query->execute()->fetchAll();

  foreach($topics as $key => $topic) {
    $topics[$key]->steps = unserialize($topic->steps);
  }

  return $topics;
}

/**
 * Returns an array of topics ordered by title
 */
function inlinemanual_get_active_topics_list() {
  $topics_list = array();
  $topics = inlinemanual_get_topics('active');
  if ($topics) {
    foreach ($topics as $topic) {
      $topics_list[$topic->tid] = $topic->title;
    }
  }
  return $topics_list;
}

/**
 * Returns a list of accessible topics for current user
 */
function inlinemanual_available_topics($account = NULL) {
  global $user;
  $account = ($account ? $account : $user);

  $available = array();
  $topics = inlinemanual_get_topics('active');
  if ($topics) {
    foreach ($topics as $topic) {
      if (user_access('view inlinemanual_topic_'. $topic->tid, $account) && ($topic->status || user_access('view disabled inline manuals', $account))) {
        $available[$topic->tid] = $topic;
      }
    }
  }

  return $available;
}

/**
 * Updates status of specified topics
 */
function inlinemanual_topics_update_status($status, $tids) {
  $num_updated = db_update('inm_topics')
    ->fields(array(
      'status' => $status,
    ))
    ->condition('tid', $tids, 'IN')
    ->execute();
  return $num_updated;
}

/**
 * Ajax menu callback; Return the json output with topics list.
 */
function inlinemanual_ajax_topics() {
  $topics = inlinemanual_available_topics();
  return drupal_json_output($topics);
}

function inlinemanual_static_topics() {
  $topics = inlinemanual_available_topics();
  return $topics;
}

/**
 * Ajax menu callback; Return tour steps for the given topic.
 */
function inlinemanual_ajax_topic($topic) {
  if (!empty($topic)) {
    return drupal_json_output($topic->steps);
  }
}

/**
 * Implements hook_page_build().
 */
function inlinemanual_page_build(&$page) {
  if (user_access('use inline manual')) {
    // TODO: check if jQuery update module is enabled and version installed
    global $base_path;
    global $is_https;
    global $user;
    // TODO: allow to fetch player over http
    $url_scheme = 'https://';
    // $url_scheme = ($is_https) ? 'https://' : 'http://';

    // We support only clean urls right now
    // TODO: think about paths with params + FIX
    $config = json_encode(
      array(
        'base_path' => $base_path,
        'variables' => array(
          'user_id' => $user->uid
        ),
        'position' => variable_get('inlinemanual_widget_position', 'bottom_right'),
        'z_index' => variable_get('inlinemanual_widget_z_index', 1000),
        'l10n' => array(
          'title' => variable_get('inlinemanual_widget_title', 'Get support'),
          'back' => t('Back'),
          'previous' => t('&laquo; Prev'),
          'next' => t('Next &raquo;'),
          'end' => t('End'),
          'footer' => variable_get('inlinemanual_widget_footer', '')
        ),
        'topics' => inlinemanual_static_topics()
      )
    );

    // TODO: include js and css from inlinemanual CDN or local
    drupal_add_js($url_scheme . 'inlinemanual.com/inm/player/inline-manual-player.min.js', 'external');
    drupal_add_js('jQuery(document).ready( function() { createInlineManualPlayer( ' . $config . ', "InlineManualPlayer" ); })', array('type' => 'inline', 'scope' => 'footer', 'weight' => 100));
    drupal_add_css('.inmplayer-trigger, .inmplayer-panel-header { background-color: ' . variable_get('inlinemanual_widget_color', '#222222') . ' !important; color: ' . variable_get('inlinemanual_widget_text_color', '#ffffff') . ' !important; }', array('type' => 'inline'));
  }
}

/**
 * Implements hook_rules_action_info().
 */
function inlinemanual_rules_action_info() {
  $actions = array(
    'inlinemanual_show_topic' => array(
      'label' => t('Show selected topic'),
      'group' => t('InlineManual'),
      'parameter' => array(
        // To select a topic.
        'topic' => array(
          'type' => 'integer',
          'label' => t('Topic'),
          'options list' => 'inlinemanual_get_active_topics_list',
          'description' => t('Select the topic that will automatically open.'),
        ),
      ),
    ),
  );
  return $actions;
}

/**
 * View message for selected roles.
 */
function inlinemanual_show_topic($topic) {
  drupal_add_js('jQuery(document).ready( function() { InlineManualPlayer._activateTopic('. $topic .', 0); });', array('type' => 'inline', 'scope' => 'footer', 'weight' => 101));
}
