<?php

/**
 * Add links to pages on Wayback Machine for old articles
 * Coded by Martin Joergensen, Vertikal.dk, March 2014
 * */

DEFINE('WAYBACK_FIRST_YEAR', 1996);
 
/**
 * Implements hook_perm()
 */
function wayback_filter_permission() {
  return array(
    'access wayback filter setup' => array(
    'title' => t('Access Wayback Filter setup'),
    'description' => t('Allow user to change settings for Wayback Filter.'),
    ),
  );
}


/**
* Implement hook_menu()
**/
function wayback_filter_menu() {
  $items = array();

  $items['admin/config/content/wayback'] = array(
    'title' => 'Wayback',
    'description' => 'Set up Wayback filter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wayback_filter_setup_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access wayback filter setup'),
  );

  return $items;
}


/**
* Implement hook_filter_info()
**/
function wayback_filter_filter_info() {
  $filters = array();

  $filters['wayback_filter'] = array(
    'title' => t('Add Wayback links'), 
    'description' => t('Add links to pages on Wayback Machine for old articles.'), 
    'process callback' => '_wayback_filter_filter_process',
    'tips callback' => '_wayback_filter_filter_tips',
  );

  return $filters;
}


/**
 * Callback for replacing aliased a href codes
 * */
function _wayback_filter_filter_process($text, $filter, $format) {
  // If not showing node, simply retuurn text
  if (!(arg(0) == 'node' && is_numeric(arg(1)) && !arg(2))) {
    return $text;
  }

  // Is the node old enough? Else return text
  $nid = arg(1);
  $node = node_load($nid);
	$use_age = variable_get('wayback_filter_date_or_age', 0);
	if ($use_age) {
		$years = strtotime('-' . variable_get('wayback_filter_relative_age', 0) . ' years');
		$cutting_date = $years;
	}
	else {
		$cutting_date =  strtotime(variable_get('wayback_filter_cutting_date', date('Y-m-d')));
	}
  
  if ($node->created > $cutting_date) {
    return $text;
  }

  // Find <a codes
  $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
  preg_match_all("/$regexp/siU", $text, $result);
	$done = array();
  // Go through each 
  foreach ($result[0] as $orig_code) {
		// Find hrefs
		preg_match('/href="([^"]*)"/i', $orig_code, $href);
		if ($href && !isset($done[$href[1]])) {
			// Work on http(s):// refs only
			if (substr($href[1], 0, 7) == 'http://' || substr($href[1], 0, 8) == 'https://') {
				// Create wayback link
				$time = date('YmdHis', $node->created);
				$wayback = 'https://web.archive.org/web/' . $time . '/' . $href[1];
				$wayback = $orig_code . ' [<a title="' .
					t('This link can take you to the Archive.org-version of the page if the original site is dead'	) .
					'" class="wayback-link" href="' . $wayback . '">' . t('Wayback-link') . '</a>]';
				// Replace with added Wayback-link
				$text = str_replace($orig_code, $wayback, $text);
			}
			// Avoid repeated replaces
			$done[$href[1]] = TRUE;
		}
  }
  return $text;
}


/**
 * Callback for filter tips
 * */
function _wayback_filter_filter_tips_magazine() {
  return t('Add links to Archive.org\'s Waybback Machine for URLs on old articles to ensure that the user can see something when pages have died.');
}


/**
 * Setup form for cutting date
 * */
function wayback_filter_setup_form($form) {


	$form['wayback_filter_date_or_age'] = array(
    '#type' => 'radios',
		'#options' => array(0 => t('Cutting date'), 1 => t('Relative age')),
    '#title' => t('Cutting date or relative age'),
    '#default_value' => variable_get('wayback_filter_date_or_age', 0),
    '#description' => t('Select whether to use cutting date or relative age for the Wayback filter. Set the selected value(s) below.'),
  );

	$form['wayback_filter_cutting_date_field'] = array(
		'#type' => 'fieldset',
    '#title' => t('Cutting date'),
	);
	
  $form['wayback_filter_cutting_date_field']['wayback_filter_cutting_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => WAYBACK_FIRST_YEAR . ':0',
    '#default_value' => variable_get('wayback_filter_cutting_date', date('Y-m-d')),
    '#description' => t('Cutting date to use for the Wayback filter. Articles older than this date has the filter, younger articles don\'t.'),
  );

	$first_year = date('Y');
	$options = array();
	while($first_year >= WAYBACK_FIRST_YEAR) {
		$age = date('Y') - $first_year;
		$options[$age] = $age;
		$first_year--;
	}

	$form['wayback_filter_cutting_first_year_field'] = array(
		'#type' => 'fieldset',
		'#title' => t('Relative age'),
	);
	
	$form['wayback_filter_cutting_first_year_field']['wayback_filter_relative_age'] = array(
    '#type' => 'select',
		'#options' => $options,
    '#default_value' => variable_get('wayback_filter_relative_age', 0),
    '#description' => t('Relative age for Wayback filter. Articles older than this number of years has the filter, younger articles don\'t.'),
  );

	
  return system_settings_form($form);
}

