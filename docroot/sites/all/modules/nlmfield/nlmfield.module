<?php

require_once('nlmfield.widgets.inc');
require_once('nlmfield.formatters.inc');

// Pattern for first and last name. Compatible with contributor names.
define('NLMFIELD_PATTERN_FIRSTNAME_LASTNAME', 'f l c');

/**
 * Implements hook_field_info().
 */
function nlmfield_field_info() {
  return array(
    'nlmfield_contributor' => array(
      'label' => 'NLM - Contributor',
      'description' => t('Stores information about a person (name, affiliation etc.)'),
      'default_widget' => 'nlmfield_xml',
      'default_formatter' => 'nlmfield_xml',
      'settings' => array(
        'nlmfield_namespace' => 'nlm',
        'nlmfield_namespace_def_url' => 'http://www.ncbi.nlm.nih.gov',
        'additional_namespaces' => ''
      )
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function nlmfield_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  $form['nlmfield_namespace'] = array(
    '#type' => 'textfield',
    '#title' => t('Namespace Prefix'),
    '#default_value' => isset($settings['nlmfield_namespace']) ? $settings['nlmfield_namespace'] : 'nlm',
  );
  $form['nlmfield_namespace_def_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Namespace URL'),
    '#default_value' => isset($settings['nlmfield_namespace_def_url']) ? $settings['nlmfield_namespace_def_url'] : 'http://www.ncbi.nlm.nih.gov',
  );
  $form['additional_namespaces'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional Namespaces'),
    '#default_value' => isset($settings['additional_namespaces']) ? $settings['additional_namespaces'] : '',
    '#description' => t('If you plan on using additional XML namespaces, declare them here in prefix|http://namespace.url format.'),
  );

  return $form;
}

/**
 * Load the BetterDOMDocument library
 */
function nlmfield_load_library() {
  if (!class_exists('BetterDOMDocument')) {
    if (module_exists('libraries')) {
      $path = libraries_get_path('BetterDOMDocument');
      if (file_exists($path . '/BetterDOMDocument.php')) {
        require_once($path . '/BetterDOMDocument.php');
        return;
      }
    }
    drupal_set_message('Could not load BetterDOMDocument. Please download it from https://github.com/highwire/opensource-php-BetterDOMDocument and place it in sites/all/libraries', 'error');
    drupal_not_found();
    drupal_exit();
  }
}

/**
 * Implements hook_field_presave().
 * PDO throws an error when attempting to insert an empty string into a float
 * field. Go through all values and convert empty strings to NULL.
 */
function nlmfield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] === 'nlmfield_contributor') {
    foreach ($items as $delta => $item) {
      if (!empty($item)) {
        foreach ($item as $k => $v) {
          if ($v === '') {

            $item[$k] = NULL;
          }
        }
        nlmfield_compute_values($item, 'nlmfield_contributor', $field['settings']['nlmfield_namespace']);
        $items[$delta] = $item;
      }
    }
  }
}

/**
 * Implements hook_content_is_empty().
 */
function nlmfield_field_is_empty($item, $field) {
  return (empty($item['xml']));
}

/**
 * Implements hook_view_api().
 */
function nlmfield_views_api() {
  return array(
    'api' => '3.1',
    'path' => drupal_get_path('module', 'nlmfield') . '/views',
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function nlmfield_ctools_plugin_type() {
  return array(
    'behaviors' => array(
      'use hooks' => TRUE,
    )
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function nlmfield_ctools_plugin_api($module, $api) {
  return array('version' => 1);
}

/**
 * nlmfield Compute Values
 *
 * Compute all dependant values. We convert the XML field to all other
 * dependant columns. If XML is empty, we compute it from all other values.
 */
function nlmfield_compute_values(&$values, $field_type, $namespace = 'nlm') {
  $dom = new BetterDOMDocument($values['xml'], $namespace);

  foreach (nlmfield_column_bits('nlmfield_contributor') as $column => $bit) {
    $values[$column] = drupal_substr(strip_tags(nlmfield_process_bit('nlmfield_contributor', $bit, $dom)), 0, 192);
  }

  return $values;
}

/**
 * Implements hook_apachesolr_field_mappings().
 */
function nlmfield_apachesolr_field_mappings() {
  return array(
    'nlmfield' => array(
      'indexing_callback' => 'nlmfield_apachesolr_index',
      'facets' => TRUE,
    )
  );
}

/**
 * Name callback for field name
 */
function nlmfield_apachesolr_index($node, $field_name, $index_key, $field_info) {
  //@@TODO: Fill this out
  $return = array();
  return $return;
}

/**
 * Defined extraction bits for auxiliary columns
 */
function nlmfield_column_bits($field_type) {
  return array(
    'contrib_type' => 't',
    'name_string'  => 'n',
    'name_style'   => 'y',
    'name_sur'     => 's',
    'name_given'   => 'g',
    'name_sort'    => 'o',
    'role'         => 'r',
    'aff'          => 'a',
    'email'        => 'e',
  );
}

// Bit functions
// ----------------

/**
 * Get bits for a given field-type
 *
 * A "bit" in this context is a replacable character (much like a token) than can be used
 * to extract a piece of information from an XML string.
 * Bits are used in formatters and also for extracting auxiliary data to be stored in the
 * database. Bits can be added or modified using hook_nlmfield_bits_alter
 * Bits are defined by their 'xpath', which is standard xpath, with a twist:
 *  - Everyting should be namespaced with 'nlm:' - this allows us to make the namespace dynamic
 *  - You can append a post-processing function using "||function_name"
 *  - xpaths without a post-process function will use the default, which extracts the string value of the
 *    first found node discovered by the xpath.
 *  - You can hand the whole thing off to a post-processing function by omtting the xpath and only inlcuding
 *    the "||function_name" notation. In this case the whole DOMDocument will be passed to the function
 */
function nlmfield_bits($fieldtype) {
  $bits = array(
    's' => array(
      'title' => 'Surname',
      'xpath' => '//nlm:surname',
    ),
    'g' => array(
      'title' => 'Given Names',
      'xpath' => '//nlm:given-names',
    ),
    'G' => array(
      'title' => 'Given Names Initials',
      'xpath' => '//nlm:given-names||nlmfield_bit_initials',
    ),
    'F' => array(
      'title' => 'Given Names Initials: First Name',
      'xpath' => '//nlm:given-names||nlmfield_bit_initials_first',
    ),
    'M' => array(
      'title' => 'Given Names Initials: Middle Name',
      'xpath' => '//nlm:given-names||nlmfield_bit_initials_middle',
    ),
    't' => array(
      'title' => 'Contributor Type',
      'xpath' => '//@nlm:contrib-type|//@contrib-type',
      'default' => 'contributor',
    ),
    'n' => array(
      'title' => 'String Name',
      'xpath' => '//nlm:string-name||nlmfield_bit_strip_tags',
    ),
    'y' => array(
      'title' => 'Name Style (western, eastern or islensk)',
      'xpath' => '//@nlm:name-style|//@name-style',
      'default' => 'western',
    ),
    'o' => array(
      'title' => 'Sortable',
      'xpath' => '||nlmfield_bit_sort',
    ),
    'r' => array(
      'title' => 'Role',
      'xpath' => '//nlm:role',
    ),
    'a' => array(
      'title' => 'Affiliation',
      'xpath' => '//nlm:aff',
    ),
    'A' => array(
      'title' => 'Address',
      'xpath' => '//nlm:address',
    ),
    'i' => array(
      'title' => 'Institution',
      'xpath' => '//nlm:institution',
    ),
    'C' => array(
      'title' => 'Country',
      'xpath' => '//nlm:country',
    ),
    'e' => array(
      'title' => 'E-Mail',
      'xpath' => '//nlm:email',
    ),
    'p' => array(
      'title' => 'Prefix',
      'xpath' => '//nlm:prefix',
    ),
    'x' => array(
      'title' => 'Suffix',
      'xpath' => '//nlm:suffix',
    ),
    'd' => array(
      'title' => 'Degrees and Professional Certifications',
      'xpath' => '//nlm:degrees',
    ),
    'f' => array(
      'title' => 'First Names (not the same as Given Names)',
      'xpath' => '||nlmfield_bit_first',
    ),
    'l' => array(
      'title' => 'Last Names (not the same as Surnames)',
      'xpath' => '||nlmfield_bit_last',
    ),
    'c' => array(
      'title' => 'Collaborative Name',
      'xpath' => '//nlm:collab',
    ),
  );

  // Let other module add or edit bit definitions
  drupal_alter('nlmfield_bits', $bits, $fieldtype);

  // Add in the ID
  foreach ($bits as $char => $bit) {
    $bits[$char]['char'] = $char;
  }

  return $bits;
}

/**
 * Given a fieldtype, a bit (character), and a BetterDOMDocument object, return the extraced value
 */
function nlmfield_process_bit($fieldtype, $bit, $xml, $namespace = 'nlm') {
  $bits = nlmfield_bits($fieldtype);
  return nlmfield_process_xpath($bits[$bit]['xpath'], $xml, !empty($bits[$bit]['default']) ? $bits[$bit]['default'] : '', $namespace);
}

/**
 * Given a bit xpath and a BetterDOMDocument (or XML string) return the extracted value
 */
function nlmfield_process_xpath($full_xpath, $xml, $default = '', $namespace = 'nlm') {
  if ($xml) {
    nlmfield_load_library();
    $dom = new BetterDOMDocument($xml, $namespace);
  }
  else {
    $dom = FALSE;
  }

  $path_parts = explode('||', $full_xpath);

  if (!empty($path_parts[0])) $xpath = $path_parts[0];
  if (!empty($path_parts[1])) $func  = $path_parts[1];
  else $func = 'nlmfield_bit_default';

  if (empty($namespace)) {
    $namespace = 'nlm';
  }
  if (isset($xpath)) {
    $xpath = str_replace('nlm:', $namespace . ':', $xpath);
  }
  if (!empty($xpath) && !empty($dom)) {
    $node_list = $dom->xpath($xpath);
    if ($node_list) {
      if ($node_list->length) {
        return $func($node_list);
      }
    }
    return $default;
  }
  elseif (!empty($xpath)) {
    return $default;
  }
  elseif (!empty($dom)) {
    return $func($dom);
  }
  return FALSE;
}

function nlmfield_bit_default($node_list) {
  $node_value = '';
  if ($node_list) {
    if ($node_list->length) {
      foreach ($node_list as $node) {
        if (get_class($node) == 'DOMElement') {
          $node_value .= $node_list->dom->asHTML($node);
        }
        else {
          $node_value .= $node->nodeValue;
        }
      }
      return $node_value;
    }
  }
}

function nlmfield_bit_sort($dom) {
  $namestyle = nlmfield_process_bit('nlmfield_contributor', 'y', $dom);
  $surname   = nlmfield_process_bit('nlmfield_contributor', 's', $dom);
  $givenname = nlmfield_process_bit('nlmfield_contributor', 'g', $dom);

  if ($namestyle == 'western') {
    return $surname . ', ' . $givenname;
  }
  elseif ($namestyle == 'eastern') {
    return $surname . ' ' . $givenname;
  }
  elseif ($namestyle == 'islensk') {
    return $givenname . ' ' . $surname;
  }
}

function nlmfield_bit_first($dom) {
  $namestyle = nlmfield_process_bit('nlmfield_contributor', 'y', $dom);
  if ($namestyle == 'western' || $namestyle == 'islensk') {
    return nlmfield_process_bit('nlmfield_contributor', 'g', $dom);
  }
  elseif ($namestyle == 'eastern') {
    return nlmfield_process_bit('nlmfield_contributor', 's', $dom);
  }
}

function nlmfield_bit_last($dom) {
  $namestyle = nlmfield_process_bit('nlmfield_contributor', 'y', $dom);
  if ($namestyle == 'western' || $namestyle == 'islensk') {
    return nlmfield_process_bit('nlmfield_contributor', 's', $dom);
  }
  elseif ($namestyle == 'eastern') {
    return nlmfield_process_bit('nlmfield_contributor', 'g', $dom);
  }
}

function nlmfield_bit_strip_tags($node_list) {
  $string = $node_list->item(0)->nodeValue;
  if ($string) return strip_tags($string);
  else return '';
}

function nlmfield_bit_initials($node_list) {
  $string = $node_list->item(0)->nodeValue;

  $result = '';
  $parts = explode(' ', $string);
  foreach ($parts as $part) {
    $result .= strtoupper(drupal_substr($part, 0, 1));
  }
  return $result;
}

function nlmfield_bit_initials_first($node_list) {
  $string = $node_list->item(0)->nodeValue;
  $result = '';
  $parts = explode(' ', $string);
  $result .= strtoupper(drupal_substr($parts[0], 0, 1));
  return $result;
}

function nlmfield_bit_initials_middle($node_list) {
  $string = $node_list->item(0)->nodeValue;
  $result = '';
  $parts = explode(' ', $string);
  if (count($parts) > 1) {
    $result .= strtoupper(drupal_substr($parts[1], 0, 1));
    return $result;
  }
  else return '';
}

// Preset functions
// ----------------

/**
 * Get presets for a given field-type
 *
 * A preset is a string, containing mulitple "bits" that can be
 * processed into a useful string. It is similiar to how the PHP
 * "date()" function works.
 *
 * Presets should contain the following keys:
 *  - name:  machine-name identifier
 *  - title: human readable title
 *  - pattern OR callback: Either a pattern or a callback function
 *
 * Patterns are processed according to the following rules:
 * - All bits are replaced with their extracted values
 * - If a empty bit is followed by a space, the following space is ignored
 * - You may use a ?<bit> to indicate that the following character should only be
 *   included if the bit is not empty
 * - You may escape characters using \. ProTip™: If you are writing a hook in code don't forget
 *   that you will likely need to double escape '\\'.
 */
function nlmfield_presets($fieldtype) {
  $presets = array(
    'fullname' => array(
      'title' => 'Full Name',
      'pattern' => 'p f l?x x?d ?d[d?d]',
    ),
    'email' => array(
      'title' => 'Email',
      'pattern' => 'e',
    ),
    'fullname_role_aff' => array(
      'title' => 'Full Name with role, affiliation',
      'pattern' => 'p f l?x x?d ?d[d?d]?r,?r r?a,?a a',
    ),
    'chicago_short' => array(
      'title' => 'Chicago - Short',
      'pattern' => 's',
    ),
    'chicago_long' => array(
      'title' => 'Chicago - Long',
      'pattern' => NLMFIELD_PATTERN_FIRSTNAME_LASTNAME,
    ),
    'chicago_medium_pattern_1' => array(
      'title' => 'Chicago - Medium - Pattern-1',
      'pattern' => 'l, f',
    ),
    'chicago_medium_pattern_2' => array(
      'title' => 'Chicago - Medium - Pattern-2',
      'pattern' => 'f l ',
    ),
    'bluebook_short' => array(
      'title' => 'BlueBook - Short',
      'pattern' => 's',
    ),
    'bluebook_long' => array(
      'title' => 'BlueBook - Long',
      'pattern' => 'f?f.?l l',
    ),
    'vancouver' => array(
      'title' => 'Vancouver',
      'pattern' => 's G',
    ),
    'apa' => array(
      'title' => 'APA',
      'pattern' => 's?s,?F F?F.?M M?M.',
    ),
    'apa_pattern2' => array(
      'title' => 'APA - Pattern2',
      'pattern' => 's, M.',
    ),
    'apa_pattern3' => array(
      'title' => 'APA - Pattern3',
      'pattern' => 's, F.',
    ),
    'first_initial' => array(
      'title' => 'First initial',
      'pattern' => 'F',
    ),
    'middle_initial' => array(
      'title' => 'Middle initial',
      'pattern' => 'M',
    ),
    'mla' => array(
      'title' => 'MLA',
      'pattern' => 'l?l,?f f',
    ),
    'mla_medium' => array(
      'title' => 'MLA - Medium',
      'pattern' => 'f l',
    ),
    'alwd' => array(
      'title' => 'ALWD',
      'pattern' => 'f?f.?l l',
    ),
    'harvard' => array(
      'title' => 'Harvard referencing',
      'pattern' => 's?s,?F F?F.?M M?M.',
    ),
    'asa' => array(
      'title' => 'ASA',
      'pattern' => 'l?l,?f f',
    ),
    'ama' => array(
      'title' => 'AMA',
      'pattern' => 's FM',
    ),
    'mhra' => array(
      'title' => 'MHRA',
      'pattern' => NLMFIELD_PATTERN_FIRSTNAME_LASTNAME,
    ),
  );

  // Let other module add or edit preset definitions
  drupal_alter('nlmfield_presets', $presets, $fieldtype);

  // Add in the ID
  foreach ($presets as $name => $preset) {
    $presets[$name]['name'] = $name;
  }

  return $presets;
}

/**
 * Process the given preset into a output string
 */
function nlmfield_process_preset($fieldtype, $preset_name, $xml) {
  $presets = nlmfield_presets($fieldtype);
  return nlmfield_process_pattern($fieldtype, $presets[$preset_name]['pattern'], $xml);
}

/**
 * Process the given pattern into a output string
 */
function nlmfield_process_pattern($fieldtype, $pattern_string, $xml, $remove_labels = FALSE) {
  nlmfield_load_library();
  $dom = new BetterDOMDocument($xml, 'nlm');

  if ($remove_labels) {
    $dom->remove("//nlm:label");
  }

  $pattern = preg_split('//', $pattern_string, -1);
  array_shift($pattern);
  array_pop($pattern);

  $bits = array_keys(nlmfield_bits($fieldtype));

  $result = '';

  while ($char = array_shift($pattern)) {
    // If the character is an escape character, write the next char
    // to the result
    if ($char == '\\') {
      $result .= array_shift($pattern);
      continue;
    }

    // It's a control '?' character
    if ($char == '?') {
      $bitchar = array_shift($pattern);
      $subchar = array_shift($pattern);
      if (nlmfield_process_bit($fieldtype, $bitchar, $dom)) {
        $result .= $subchar;
      }
      continue;
    }

    // It's a bit
    if (in_array($char, $bits)) {
      $extracted = nlmfield_process_bit($fieldtype, $char, $dom);
      if ($extracted) {
        $result .= $extracted;
      }
      else {
        // It's empty - check to see if the following character is a string
        $nextchar = array_shift($pattern);
        // If it's not a string, put it back
        if ($nextchar != ' ') array_unshift($pattern, $nextchar);
      }
      continue;
    }

    // It's just some other character
    $result .= $char;
  }
  return $result;
}
