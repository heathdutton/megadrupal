<?php
class HotelBookingTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Hotel Booking',
      'description' => 'Ensure that the hotel_booking functionality works as expected.',
      'group' => 'Hotel Booking',
    );
  }

  public function setUp() {
    parent::setUp('hotel_booking');  // Enable any modules required for the test
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'edit any hotel room availability',
      'administer hotel booking settings',
      'view hotel search results' ,
      'create hotel_room_type content',
      'edit any hotel_room_type content',
      'delete any hotel_room_type content'
    ));
    $this->drupalLogin($this->privileged_user);
  }

  /**
   * Tests creating, editing and deleting a new base rate
  */
  public function testHotelBookingBaseRateOperations() {
    // Create base rate data
    $edit = array();
    $date = new DateObject('now');
    for ($i = 0; $i < 30; $i++) {
      $edit['rates['. $date->format('Y') .'-'. $date->format('m') .'-'. $date->format('d') .']'] = 150;
      $date->modify('+1 day');
    }
    $edit['name'] = $this->randomName(16);
    $this->drupalPost('admin/store/hotel_booking/rates/add', $edit, t('Save'));
    //check save worked
    $this->assertText(t('Saved your base rate'), t('The base rate was created'));
    //navigate to edit page
    $this->drupalGet('admin/store/hotel_booking/rates/1');
    //reset the date
    $date = new DateObject('now');
    //check base rate of 150 was saved
    $this->assertFieldById('edit-rates-'. $date->format('Y') .'-'. $date->format('m') .'-'. $date->format('d'), 150, t('The base rate was saved correctly'));

    // Edit the data
    $edit = array();
    $date = new DateObject('now');
    for ($i = 0; $i < 30; $i++) {
      $edit['rates['. $date->format('Y') .'-'. $date->format('m') .'-'. $date->format('d') .']'] = 160;
      $date->modify('+1 day');
    }
    $edit['name'] = $this->randomName(16);
    $this->drupalPost('admin/store/hotel_booking/rates/1', $edit, t('Update'));
    $this->assertText(t('Saved your base rate'));
    //load edit page again
    $this->drupalGet('admin/store/hotel_booking/rates/1');
    //reset the date
    $date = new DateObject('now');
    //check base rate is now 160
    $this->assertFieldById('edit-rates-'. $date->format('Y') .'-'. $date->format('m') .'-'. $date->format('d'), 160, t('The base rate was saved correctly'));

    //delete the data
    $this->drupalPost('admin/store/hotel_booking/rates/1/delete', array(), t('Delete'));
    $this->assertText(t('has been deleted'), t('The base rate was deleted'));
  }

  /**
   * Tests creating, editing and deleting a rate modifier
  */
  public function testHotelBookingRateModifierOperations() {
    // Create rate modifier data
    $edit = array('rate' => 15, 'method' => 'P');
    $this->drupalPost('admin/store/hotel_booking/rate_modifiers/add', $edit, t('Save'));
    //check save worked
    $this->assertText(t('Base rate plus 15.00%'), t('The rate modifier was created'));
    //navigate to edit page
    $this->drupalGet('admin/store/hotel_booking/rate_modifiers/1');
    $this->assertFieldById('edit-rate', 15, t('The rate modifier was saved correctly'));
    ///now edit it
    $edit = array('rate' => 16, 'method' => 'V');
    $this->drupalPost('admin/store/hotel_booking/rate_modifiers/1', $edit, t('Update'));
    $this->assertText(t('Base rate plus !rate', array(
            '!rate' => uc_currency_format(16))), t('The rate modifier was edited correctly'));
    //now delete it
    $this->drupalPost('admin/store/hotel_booking/rate_modifiers/1/delete', array(), t('Delete'));
    $this->assertText(t('Deleted your modifier'), t('The rate modifier was deleted'));
  }

  /**
   * Tests creating, editing and deleting an occupancy modifier
  */
  public function testHotelBookingOccupancyModifierOperations() {
    // Create occ modifier data
    $edit = array('rate' => 15, 'type' => 'A', 'threshold' => 2);
    $this->drupalPost('admin/store/hotel_booking/occupancy_modifiers/add', $edit, t('Save'));
    //check save worked
    $this->assertText(t('2 adults'), t('The occupancy modifier was created'));
    //navigate to edit page
    $this->drupalGet('admin/store/hotel_booking/occupancy_modifiers/1');
    $this->assertFieldById('edit-rate', 15, t('The occupancy modifier was saved correctly'));
    ///now edit it
    $edit = array('rate' => 16, 'type' => 'C', 'threshold' => 0);
    $this->drupalPost('admin/store/hotel_booking/occupancy_modifiers/1', $edit, t('Update'));
    $this->assertText(t('0 children'), t('The occupancy modifier was edited correctly'));
    //now delete it
    $this->drupalPost('admin/store/hotel_booking/occupancy_modifiers/1/delete', array(), t('Delete'));
    $this->assertText(t('Deleted your occupancy modifier'), t('The occupancy modifier was deleted'));
  }

  /**
   * Tests creating, editing and deleting a room type
  */
  public function testHotelBookingRoomTypeOperations() {
    // Create base rate data
    $edit = array();
    $date = new DateObject('now');
    for ($i = 0; $i < 30; $i++) {
      $edit['rates['. $date->format('Y') .'-'. $date->format('m') .'-'. $date->format('d') .']'] = 150;
      $date->modify('+1 day');
    }
    $edit['name'] = $this->randomName(16);
    $this->drupalPost('admin/store/hotel_booking/rates/add', $edit, t('Save'));
    // Create rate modifier data
    $edit = array('rate' => 10, 'method' => 'V');
    $this->drupalPost('admin/store/hotel_booking/rate_modifiers/add', $edit, t('Save'));
    // Create occ modifier data
    $edit = array('rate' => 15, 'type' => 'A', 'threshold' => 2);
    $this->drupalPost('admin/store/hotel_booking/occupancy_modifiers/add', $edit, t('Save'));
    // Create room data
    $edit = array(
      'title' => $this->randomName(16),
      'model' => '1234',
      'hbrid' => 1,
      'hbrmid' => 1,
      'adult_occupancy_modifiers[1]' => 'on',
      'default_available' => 2,
      'minimum_occupancy' => 1,
      'capacity' => 4,
      'smoking' => 0
    );
    $this->drupalPost('node/add/hotel-room-type', $edit, t('Save'));
    //check save worked
    $this->assertText(t('Hotel Room Type @title has been created.', array('@title' => $edit['title'])), t('The room type was created'));

    $edit['type'] = 'hotel_room_type';
    $node = $this->drupalCreateNode($edit);
    $nid = $node->nid;

    //navigate to calendar edit page
    $now = new DateObject('now');
    $end_day = mktime(0, 0, 0, $now->format('n') + 1, 0, $now->format('Y')); //last day of previous month
    $days_in_month = date('j', $end_day);
    $cal_edit = array('goto' => 'node/'. $nid);
    for ($i = 1; $i <= $days_in_month; $i++) {
      $cal_edit["calendar[{$i}][available]"] = 2;
      $cal_edit["calendar[{$i}][restrictions][minimum_occupancy]"] = 0;
      $cal_edit["calendar[{$i}][restrictions][minimum_stay]"] = 0;
      $cal_edit["calendar[{$i}][restrictions][no_check_in]"] = 0;
      $cal_edit["calendar[{$i}][restrictions][no_check_out]"] = 0;
    }
    $month = $now->format('n');
    $year = $now->format('Y');
    $this->drupalPost("node/$nid/availability/$year/$month", $cal_edit, t('Submit'));
    //now we add a day b/c avail is not set for today
    $now->modify('+1 day');
    $this->assertText(t('Availability settings have been saved.'), t('The availability was successfully set.'));
    $this->assertRaw('<div class="calendar-view-wrap"><div id="hotel-booking-cell-'. $nid .'-'. $now->format('Ymd') .'" class="hotel-booking-calendar-view hotel-booking-state-available">
  <div class="calendar-day-number">'. $now->format('j') .'</div>
      <div class="hotel-booking-calendar-price-outer">
      <div class="hotel-booking-calendar-price">'. uc_currency_format(165.00) .'</div>
  </div>  </div></div>', t('The availability and pricing was successfully applied'));
    $search = array(
      'check_in[date]' => $now->format('d M Y'),
      'nights' => 2,
      'adults' => 2,
      'children' => 0,
      'smoking' => 3
    );
    $this->drupalPost('node/'. $nid, $search, t('Book Room'));
    $this->assertText(t('@title added to your shopping cart.', array('@title' => $edit['title'])), t('The room was added to the cart'));

  }
}