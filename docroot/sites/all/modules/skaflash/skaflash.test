<?php

/**
 * @file
 * Tests for the SkaFlash module.
 */


/**
 * Contains useful helper functions/variables to be used by SkaFlash tests.
 */
class SkaflashWebTestCase extends DrupalWebTestCase {
  /**
   * The path to the admin configuration page.
   */
  protected $admin_page = 'admin/config/services/skaflash';

  /**
   * The path to the default API endpoint.
   */
  protected $default_endpoint = 'endpoints/skaflash';

  /**
   * A valid set of data to POST to the API endpoint.
   */
  protected $default_data = array(
    'email' => 'test@skaflash.com',
    'phone' => '+1234567890',
    'timestamp' => '4/27/2013 6:18:12 AM',
  );

  /**
   * A simple function that POSTs data to a URL and returns the response. This
   * is necessary because drupalPost() attempts to parse the response, which
   * causes test failures we do not care about.
   *
   * @param $path
   *   The path to which the POST request should be sent.
   *
   * @param $params
   *   An associate array of parameters to be POSTed.
   *
   * @param $headers
   *   An array of extra headers to be sent with the POST.
   *
   * @return
   *   The response received.
   */
  protected function simplePost($path, $params = array(), $headers = array()) {
    $action = url($path, array('absolute' => TRUE));
    $post = array();

    foreach ($params as $key => $value) {
      $post[$key] = urlencode($key) . '=' . urlencode($value);
    }
    $post = implode('&', $post);

    return $this->curlExec(array(
      CURLOPT_URL => $action,
      CURLOPT_POST => TRUE,
      CURLOPT_POSTFIELDS => $post,
      CURLOPT_HTTPHEADER => $headers,
    ));
  }
}


/**
 * Tests configuration changes of the SkaFlash module.
 */
class SkaflashConfigTestCase extends SkaflashWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'SkaFlash Configuration',
      'description' => 'Tests SkaFlash configurations and config forms.',
      'group' => 'SkaFlash',
    );
  }

  public function setUp() {
    parent::setUp('skaflash');

    // Create an admin user with all requisite permissions and log him in.
    $this->admin_user = $this->drupalCreateUser(array(
      'access administration pages',
      'access content',
      'configure skaflash integration',
    ));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Tests basic config changes of the SkaFlash module.
   */
  public function testBasicConfiguration() {
    // Ensure the configuration page is available and perform basic checks.
    $this->drupalGet($this->admin_page);
    $this->assertFieldById('edit-skaflash-endpoint-path', $this->default_endpoint, 'Endpoint is properly configured by default.');
    $this->assertRaw('<span id="endpoint-path">' . $this->default_endpoint . '</span>', 'Endpoint help text is displayed properly.');
    $this->assertTrue(drupal_valid_path($this->default_endpoint, FALSE), 'Endpoint exists in the menu router.');

    // Attempt to provide a new endpoint and perform the same checks.
    $alt_endpoint = 'alt/endpoints/skaflash';
    $this->drupalPost(NULL, array('skaflash_endpoint_path' => $alt_endpoint), t('Save configuration'));
    $this->assertFieldById('edit-skaflash-endpoint-path', $alt_endpoint, 'Endpoint is properly configured.');
    $this->assertRaw('<span id="endpoint-path">' . $alt_endpoint . '</span>', 'Endpoint help text is displayed properly.');
    $this->assertTrue(drupal_valid_path($alt_endpoint, FALSE), 'Endpoint exists in the menu router.');

    // Check that it's not possible to use an existing path as an endpoint.
    $this->drupalPost(NULL, array('skaflash_endpoint_path' => $this->admin_page), t('Save configuration'));
    $this->assertText('The path admin/config/services/skaflash is already in use.', 'Bad config change displayed an error message.');
    $this->assertFieldByXpath($this->constructFieldXpath('class', 'form-text required error'), NULL, 'Bad config change highlighted the trouble field.');
  }
}


/**
 * Tests API handling of the SkaFlash module.
 */
class SkaflashApiTestCase extends SkaflashWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'SkaFlash API',
      'description' => 'Tests SkaFlash API handling.',
      'group' => 'SkaFlash',
    );
  }

  public function setUp() {
    parent::setUp('skaflash');
  }

  /**
   * Tests basic config changes of the SkaFlash module.
   */
  public function testBasicConfiguration() {
    // If we provide bad data, we should get a proper 4xx response logged.
    db_truncate('watchdog')->execute();
    $result = $this->simplePost($this->default_endpoint, array());
    $this->assertTrue(strpos($this->headers[0], '400 Bad Request') !== FALSE, 'Invalid API request returned 400');

    // Check that the API request was logged.
    $query = db_query('SELECT wid FROM {watchdog} WHERE type=:type', array(':type' => 'skaflash'));
    $rows = $query->rowCount();
    $this->assertTrue($rows, 'Invalid API request logged in watchdog.');

    // If we provide good data, we should get a proper 2xx response logged.
    db_truncate('watchdog')->execute();
    $result = $this->simplePost($this->default_endpoint, $this->default_data);
    $this->assertTrue(strpos($this->headers[0], '204 No Content') !== FALSE, 'Valid API request returned 204');

    // Check that the API request was logged.
    $query = db_query('SELECT wid FROM {watchdog} WHERE type=:type', array(':type' => 'skaflash'));
    $rows = $query->rowCount();
    $this->assertTrue($rows, 'Valid API request logged in watchdog.');
  }
}
