<?php

/**
 * @file
 * Provide structure for the administrative interface to specification import.
 */

// Dispay format constant.
define('PRODUCT_SPECIFICATION_IMPORT_DISPLAY_FORMAT', 'filtered_html');

/**
 * Implements hook_permission().
 */
function product_specification_import_permission() {
  return array(
    'administer specification import' => array(
      'title' => t('Administer specification import'),
      'description' => t('Import specification.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function product_specification_import_menu() {
  $items = array();
  $items['specification/import'] = array(
    'title' => 'Import Specifications',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_specification_import_form'),
    'access arguments' => array('administer specification import'),
  );
  $items['import/%/template'] = array(
    'page callback' => 'product_specification_import_template',
    'page arguments' => array(1),
    'access arguments' => array('administer specification import'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Ajax callback to display bundle list.
 */
function product_specification_import_ajax(&$form, &$form_state) {
  return $form['import'];
}

/**
 * Ajax callback to display fields.
 */
function product_specification_import_field_ajax(&$form, &$form_state) {
  return $form['import']['ps_field'];
}

/**
 * Ajax callback to display import form.
 */
function product_specification_import_specification_ajax(&$form, &$form_state) {
  return $form['import']['ps_field']['specification'];
}

/**
 * Form constructor for the specification import form.
 *
 * @see product_specification_import_form_submit()
 */
function product_specification_import_form($form, &$form_state) {
  if (isset($form_state['values'])) {
    // Restore form_state values lost in managed_file upload.
    $form_state['storage'] = array_merge($form_state['storage'], $form_state['values']);
    $form_state['values'] = array_merge($form_state['values'], $form_state['storage']);
  }
  else {
    $form_state['storage'] = array();
  }
  $form['import'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import'),
    '#prefix' => '<div id="product-specification-bundle-wrapper">',
    '#suffix' => '</div>',
  );
  $content_type = field_info_bundles();
  $entity_info = entity_get_info();
  $field = field_read_fields(array('type' => 'product_specification'));
  $entity_options = $bundles = $fields = array();
  foreach ($field as $key => $value) {
    $instance = field_read_instances(array('field_name' => $key));
    foreach ($instance as $entity) {
      $entity_options[$entity['entity_type']] = $entity_info[$entity['entity_type']]['label'];
      $bundles[$entity['entity_type']][$entity['bundle']] = $content_type[$entity['entity_type']][$entity['bundle']]['label'];
      $fields[$entity['bundle']][$entity['field_name']] = $entity['label'];
    }
  }
  if (!empty($entity_options)) {
    $form['import']['entity_type'] = array(
      '#type' => 'select',
      '#title' => t('Entity Type'),
      '#options' => array('- Select') + $entity_options,
      '#default_value' => empty($form_state['values']['entity_type']) ? '' : $form_state['values']['entity_type'],
      '#ajax' => array(
        'callback' => 'product_specification_import_ajax',
        'wrapper' => 'product-specification-bundle-wrapper',
      ),
      '#required' => TRUE,
    );
  }
  else {
    $form['import']['info'] = array(
      '#markup' => t('Specification field is not created yet.'),
    );
  }
  if (!empty($form_state['values']['entity_type'])) {
    $options = $bundles[$form_state['values']['entity_type']];
    $form['import']['bundle'] = array(
      '#type' => 'select',
      '#title' => t('Bundle'),
      '#options' => array('- Select') + $options,
      '#default_value' => empty($form_state['values']['bundle']) ? '' : $form_state['values']['bundle'],
      '#ajax' => array(
        'callback' => 'product_specification_import_field_ajax',
        'wrapper' => 'product-specification-field-wrapper',
      ),
      '#required' => TRUE,
    );

    $form['import']['ps_field'] = array(
      '#parent' => TRUE,
      '#prefix' => '<div id="product-specification-field-wrapper">',
      '#suffix' => '</div>',
    );

    if (!empty($form_state['values']['bundle'])) {
      $options = $fields[$form_state['values']['bundle']];
      $form['import']['ps_field']['field'] = array(
        '#type' => 'select',
        '#title' => t('Field Name'),
        '#options' => array('- Select') + $options,
        '#default_value' => empty($form_state['values']['field']) ? '' : $form_state['values']['field'],
        '#ajax' => array(
          'callback' => 'product_specification_import_specification_ajax',
          'wrapper' => 'product-specification-import-wrapper',
        ),
        '#required' => TRUE,
      );
      $form['import']['ps_field']['specification'] = array(
        '#parent' => TRUE,
        '#prefix' => '<div id="product-specification-import-wrapper">',
        '#suffix' => '</div>',
      );
      if (!empty($form_state['values']['field'])) {
        if (in_array($form_state['values']['entity_type'], array('commerce_product'))) {
          $form['import']['ps_field']['specification']['product_id'] = array(
            '#type' => 'select',
            '#title' => t('Product ID / SKU'),
            '#options' => array(
              'sku' => t('SKU'),
              'product_id' => t('Product ID'),
            ),
          );
        }
        $wiki_link = "http://en.wikipedia.org/wiki/Comma-separated_values";
        $csv = array(
          "!csv_files" => l(t(".csv"), $wiki_link, array('attributes' => array('target' => '_blank'))
          ),
        );
        $items = array(t("Make sure the file is in a !csv_files format.", $csv),
          l(t("Downlod a template"), "import/" . $form_state['values']['entity_type'] . "/template"),
          t('Be sure to click the "Upload" button when you select a csv.'),
        );

        $form['import']['ps_field']['specification']['info'] = array(
          '#title' => t('A few notes when uploading.'),
          '#items' => $items,
          '#theme' => 'item_list',
        );

        $form['import']['ps_field']['specification']['delimiter'] = array(
          '#type' => 'select',
          '#title' => t('Delimiter'),
          '#description' => t('The character that delimits fields in the CSV file.'),
          '#options' => array(
            ',' => t(','),
            ';' => t(';'),
            'TAB' => t('TAB'),
            '|' => t('|'),
            '+' => t('+'),
          ),
          '#default_value' => isset($form_state['values']['delimiter']) ? $form_state['values']['delimiter'] : ',',
        );
        $form['import']['ps_field']['specification']['no_headers'] = array(
          '#type' => 'checkbox',
          '#title' => t('No Headers'),
          '#description' => t("Check if the imported CSV file does not start with a header row. If checked, mapping sources must be named '0', '1', '2' etc."),
          '#default_value' => isset($form_state['values']['no_headers']) ? $form_state['values']['no_headers'] : 0,
        );
        $form['import']['ps_field']['specification']['file'] = array(
          '#title' => t('Import'),
          '#type' => 'managed_file',
          '#description' => t('The uploaded csv will be imported and temporarily saved.'),
          '#upload_location' => 'public://tmp/',
          '#upload_validators' => array(
            'file_validate_extensions' => array(
              'csv',
            ),
          ),
        );
        $form['import']['ps_field']['specification']['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Import'),
        );
      }
    }
  }
  return $form;
}

/**
 * Submit handler for product_specification_import_form().
 */
function product_specification_import_form_submit(&$form, &$form_state) {
  // Check to make sure that the file was uploaded to the server properly.
  $file = file_load($form_state['values']['file']);
  if (!empty($file->uri)) {
    if (file_exists(drupal_realpath($file->uri))) {
      $handle = fopen(drupal_realpath($file->uri), "r");
      (!$form_state['values']['no_headers']) ? fgetcsv($handle) : '';
      $spcifications = array();
      $product_id = isset($form_state['values']['product_id']) ? $form_state['values']['product_id'] : NULL;
      while (($data = fgetcsv($handle, 0, $form_state['values']['delimiter'], '"')) !== FALSE) {
        if (!is_numeric($data[1])) {
          return drupal_set_message(t('There was an error in uploaded file. Delta should be a numeric value.'), 'error');
        }
        if (!array_key_exists($data[0], $spcifications)) {
          $spcifications = array();
        }
        $spcifications[$data[0]][$data[1]][] = array(
          'name' => $data[2],
          'value' => $data[3],
        );
        $operations[$data[0]] = array('product_specification_import_form_batch_processing',
          array($spcifications, $data[0], $form_state['values'], $product_id));
      }
      $batch = array(
        'title' => t('Importing CSV...'),
        'operations' => $operations,
        'finished' => 'product_specification_import_form_finished',
        'init_message' => t('Initializing...'),
        'error_message' => t('Specification importing received a error.'),
        'progress_message' => t('Imported @current of @total products.'),
      );
      batch_set($batch);
      fclose($handle);
    }
  }
  else {
    drupal_set_message(t('There was an error uploading your file. Please contact a System administator.'), 'error');
  }
}

/**
 * Batch processing creates specifications with then given information.
 */
function product_specification_import_form_batch_processing($data, $entity_id, $values, $product_id, &$context) {
  // Load entity.
  $entity = ($product_id) ? array_shift(entity_load($values['entity_type'], FALSE, array($product_id => $entity_id))) : entity_load_single($values['entity_type'], $entity_id);
  if ($entity) {
    foreach ($data[$entity_id] as $delta => $items) {
      $specification = array();
      foreach ($items as $key => $value) {
        if ($key == 0) {
          $specification['cell_0_0'] = $value['name'];
        }
        else {
          $specification['cell_' . $key . '_0'] = $value['name'];
          $specification['cell_' . $key . '_1'] = $value['value'];
        }
      }
      $specification['rebuild'] = array(
        'count_cols' => PRODUCT_SPECIFICATION_DEFAULT_COLUMNS,
        'count_rows' => count($items),
      );
      $entity->{$values['field']}[LANGUAGE_NONE][$delta] = array(
        'value' => serialize($specification),
        'format' => PRODUCT_SPECIFICATION_IMPORT_DISPLAY_FORMAT,
      );
    }
    entity_save($values['entity_type'], $entity);
    $context['results']['import'] = $entity_id;
  }
  else {
    $context['results']['not_import'][] = $entity_id;
  }
}

/**
 * This function runs when the batch processing is complete *.
 */
function product_specification_import_form_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Import processed successfully.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

/**
 * This function provides template for specifiacation batch import.
 */
function product_specification_import_template($arg) {
  $sep = ',';
  $columns = array();
  if (in_array($arg, array('commerce_product'))) {
    $source = array('Product Id / SKU');
  }
  else {
    $source = array(str_replace('_', ' ', ucfirst($arg)) . ' ID');
  }
  foreach (array_merge($source, array('Delta', 'Name', 'Value')) as $col) {
    if (strpos($col, $sep) !== FALSE) {
      $col = '"' . str_replace('"', '""', $col) . '"';
    }
    $columns[] = $col;
  }
  drupal_add_http_header('Cache-Control', 'max-age=60, must-revalidate');
  drupal_add_http_header('Content-Disposition', 'attachment; filename="' . $arg . '_template.csv"');
  drupal_add_http_header('Content-type', 'text/csv; charset=utf-8');
  print implode($sep, $columns);
  drupal_exit();
}
