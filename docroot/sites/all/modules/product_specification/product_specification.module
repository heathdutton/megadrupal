<?php

/**
 * @file
 * Allow users to store tabular data fields with a entity.
 */

// Dispay format constant.
define('PRODUCT_SPECIFICATION_DEFAULT_COLUMNS', 2);
// Input constant.
define('PRODUCT_SPECIFICATION_INPUT', 'input');

/**
 * Implements hook_menu().
 */
function product_specification_menu() {
  return array(
    'admin/config/content/product_specification' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('product_specification_admin_settings_form'),
      'title' => 'Product Specification',
      'description' => 'Global configuration for the product specification module',
      'access arguments' => array('configure product specification'),
    ),
  );
}

/**
 * Menu callback to prepare administration configuration form.
 */
function product_specification_admin_settings_form() {
  $form = array();

  $form['product_specification_csv_separator'] = array(
    '#type' => 'textfield',
    '#title' => t('CSV separator'),
    '#size' => 1,
    '#maxlength' => 1,
    '#default_value' => variable_get('product_specification_csv_separator', ','),
    '#description' => t('Select the separator for the CSV import.'),
  );

  return system_settings_form($form);
}

/**
 * Validation hook for product_specification_admin_settings_form form.
 */
function product_specification_admin_settings_form_validate($form, &$form_state) {
  if (drupal_strlen($form_state['values']['product_specification_csv_separator']) !== 1) {
    $message = t('Separator must be one character only!');
    form_set_error('product_specification_csv_separator', $message);
  }
}

/**
 * Implements hook_permission().
 */
function product_specification_permission() {
  return array(
    'configure product specification' => array(
      'title' => t('Allow changes in the global product_specification module configuration'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function product_specification_field_info() {
  return array(
    'product_specification' => array(
      'label' => t('Specification Field'),
      'description' => t('Stores a table of text fields'),
      'default_widget' => 'product_specification',
      'default_formatter' => 'default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function product_specification_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $form['cell_processing'] = array(
    '#type' => 'radios',
    '#title' => t('Table cell processing'),
    '#default_value' => isset($field['settings']['cell_processing']) ? $field['settings']['cell_processing'] : 0,
    '#options' => array(
      t('Plain text'),
      t('Filtered text (user selects input format)'),
    ),
  );
  $form['default_message'] = array(
    '#type' => 'markup',
    '#value' => t('To specify a default table, use the &quot;Default Value&quot; above. There you can specify a default number of rows/columns and values.'),
  );

  return $form;
}

/**
 * Implements hook_field_presave().
 */
function product_specification_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $table) {
    if (empty($table['value'])) {
      $data = product_specification_rationalize_table($table['product_specification'], TRUE);
      if (!empty($data)) {
        $product_specification = array();
        if (!empty($table['product_specification'])) {
          foreach ($table['product_specification'] as $key => $value) {
            $product_specification[$key] = $value;
          }
        }
        $items[$delta]['value'] = serialize($product_specification);
      }
      else {
        unset($items[$delta]);
      }
    }
    elseif (empty($table['product_specification'])) {
      // Batch processing only provides the 'value'
      $items[$delta]['product_specification'] = unserialize($items[$delta]['value']);
    }
  }
}

/**
 * Implements hook_field_validate().
 */
function product_specification_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Catch empty form submissions for required product_specifications.
  if ($instance['required'] && isset($items[0]) && product_specification_field_is_empty($items[0], $field)) {
    $message = t('@field is a required field.', array('@field' => $instance['label']));
    $errors[$field['field_name']][$langcode][0]['product_specification'][] = array(
      'error' => 'empty_required_product_specification',
      'message' => $message,
    );
  }
}

/**
 * Implements hook_field_widget_error().
 */
function product_specification_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['product_specification'], $error[0]['message']);
}

/**
 * Implements hook_field_load().
 */
function product_specification_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($items as $delta => $table) {
    foreach ($table as $row => $data) {
      if (isset($table[$row]['value'])) {
        $items[$delta][$row]['specificationdata'] = product_specification_rationalize_table(unserialize($data['value']));
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function product_specification_field_is_empty($item, $field) {
  // @todo, is this the best way to mark the default value form?
  // if we don't, it won't save the number of rows/cols
  // Allow the system settings form to have an emtpy table
  $arg0 = arg(0);
  if ($arg0 == 'admin') {
    return FALSE;
  }

  // Remove the preference fields to see if the table cells are all empty.
  unset($item['product_specification']['rebuild']);
  unset($item['product_specification']['import']);
  unset($item['product_specification']['field_type']);
  if (!empty($item['product_specification'])) {
    foreach ($item['product_specification'] as $cell) {
      if (!empty($cell)) {
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Implements hook_field_formatter_info().
 */
function product_specification_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Tabular View'),
      'field types' => array('product_specification'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function product_specification_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $table) {
    // Rationalize the stored data.
    if (!empty($table['specificationdata'])) {
      $tabledata = $table['specificationdata'];
    }
    elseif (!empty($table['value'])) {
      $tabledata = product_specification_rationalize_table(unserialize($table['value']));
    }
    // Run the table through input filters.
    if (isset($tabledata)) {
      if (!empty($tabledata)) {
        foreach ($tabledata as $row_key => $row) {
          foreach ($row as $col_key => $cell) {
            $tabledata[$row_key][$col_key] = array(
              'data' => ($table['format'] != '' && $table['format'] != 'plain_text') ? check_markup($cell, $table['format']) : check_plain($cell),
              'class' => array('row_' . $row_key, 'col_' . $col_key),
            );
            if (count($row) == 1 || (empty($row[1]))) {
              $tabledata[$row_key][$col_key]['colspan'] = array(PRODUCT_SPECIFICATION_DEFAULT_COLUMNS);
              unset($tabledata[$row_key][1]);
            }
            if ($col_key == 0) {
              $tabledata[$row_key][$col_key]['width'] = array('25%');
            }
          }
          if (empty($row[0]) && empty($row[1])) {
            unset($tabledata[$row_key]);
          }
        }
      }
      // Pull the header for theming.
      $header_data = NULL;
      if (count($tabledata) > 1) {
        if (isset($tabledata[0])) {
          $header_data = array_shift($tabledata);
        }
      }
      // Check for an empty header, if so we don't want to theme it.
      if ($header_data) {
        $noheader = TRUE;
        foreach ($header_data as $cell) {
          if (strlen($cell['data']) > 0) {
            $noheader = FALSE;
            break;
          }
        }
      }
      $header = $noheader ? NULL : $header_data;

      list($entity_id) = entity_extract_ids($entity_type, $entity);
      // Theme the table for display.
      $element[$delta]['#markup'] = theme('product_specification_view', array(
        'header' => $header,
        'rows' => $tabledata,
        'delta' => $delta,
        'entity_type' => $entity_type,
        'entity_id' => $entity_id,
        'field_name' => $field['field_name'],
        'langcode' => $langcode,
      ));
    }
    $element['#attached']['css'] = array(drupal_get_path('module', 'product_specification') . '/css/product_specification.css');
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function product_specification_field_widget_info() {
  return array(
    'product_specification' => array(
      'label' => t('Specification field'),
      'field types' => array('product_specification'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_widget_form().
 */
function product_specification_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['#type'] = 'product_specification';

  // Establish a list of saved/submitted/default values.
  if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == 'product_specification_rebuild_' . $field['field_name'] . '_' . $delta) {
    // Rebuilding table rows/cols
    $default_value = product_specification_rationalize_table($form_state['product_specification_rebuild'][$field['field_name']][$langcode][$delta]['product_specification']);
    $field_type = $form_state['product_specification_rebuild'][$field['field_name']][$langcode][$delta]['product_specification']['field_type'];
  }
  elseif (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == 'product_specification-import-button-' . $field['field_name'] . '-' . $delta) {
    // Importing CSV data.
    product_specification_import_csv($form, $form_state);
    $default_value = product_specification_rationalize_table($form_state[PRODUCT_SPECIFICATION_INPUT][$field['field_name']][$langcode][$delta]['product_specification']);
    $field_type = $form_state[PRODUCT_SPECIFICATION_INPUT][$field['field_name']][$langcode][$delta]['product_specification']['field_type'];
  }
  elseif (isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#type'] == 'select') {
    // Changing field format.
    $default_value = product_specification_rationalize_table($form_state['values'][$field['field_name']][$langcode][$delta]['product_specification']);
    $field_type = $form_state['values'][$field['field_name']][$langcode][$delta]['product_specification']['field_type'];
  }
  elseif (isset($items[$delta]['value'])) {
    // Default from database (saved node).
    $default_items = unserialize($items[$delta]['value']);
    $field_type = isset($default_items['field_type']) ? $default_items['field_type'] : 'textfield';
    $default_value = product_specification_rationalize_table($default_items);
  }
  else {
    // After the first table, we don't want to populate the values in the table.
    if ($delta > 0) {
      product_specification_delete_table_values($instance['default_value'][0]['product_specification']);
    }

    // Get the widget default value.
    if (!empty($form_state[PRODUCT_SPECIFICATION_INPUT][$field['field_name']][$langcode][$delta]['product_specification'])) {
      $data_items = $form_state[PRODUCT_SPECIFICATION_INPUT][$field['field_name']][$langcode][$delta]['product_specification'];
      $default_value = product_specification_rationalize_table($data_items);
      $default_count_cols = isset($data_items['rebuild']['count_cols']) ? $data_items['rebuild']['count_cols'] : PRODUCT_SPECIFICATION_DEFAULT_COLUMNS;
      $default_count_rows = isset($data_items['rebuild']['count_cols']) ? $data_items['rebuild']['count_cols'] : PRODUCT_SPECIFICATION_DEFAULT_COLUMNS;
      $field_type = $data_items['field_type'];
    }
    else {
      $default_value = product_specification_rationalize_table($instance['default_value'][0]['product_specification']);
      $default_count_cols = isset($items[0]['product_specification']['rebuild']['count_cols']) ? $items[0]['product_specification']['rebuild']['count_cols'] : PRODUCT_SPECIFICATION_DEFAULT_COLUMNS;
      $default_count_rows = isset($items[0]['product_specification']['rebuild']['count_cols']) ? $items[0]['product_specification']['rebuild']['count_cols'] : PRODUCT_SPECIFICATION_DEFAULT_COLUMNS;
      $field_type = $instance['default_value'][0]['product_specification']['field_type'];
    }
  }

  if (!empty($instance['description'])) {
    $help_text = $instance['description'];
  }
  else {
    $help_text = t('The first row will appear as the table header. Leave the first row blank if you do not need a header.');
  }

  $element['product_specification'] = array(
    '#title' => check_plain($element['#title']),
    '#attributes' => array('id' => 'form-product_specification-' . $field['field_name'] . '-' . $delta, 'class' => array('form-product_specification')),
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#collapsible' => FALSE,
    '#prefix' => '<div id="product_specification-' . $field['field_name'] . '-' . $delta . '-wrapper">',
    '#suffix' => '</div>',
  );

  $element['product_specification']['field_description'] = array(
    '#markup' => check_plain($help_text),
  );
  // Give the fieldset the appropriate class if it is required.
  if ($element['#required']) {
    $element['product_specification']['#title'] .= ' <span class="form-required" title="' . t('This field is required') . '">*</span>';
  }

  $element['product_specification']['field_type'] = array(
    '#type' => 'select',
    '#title' => 'Field Type',
    '#description' => t('Select a field element to edit the data.'),
    '#options' => array('textfield' => t('Text Field'), 'textarea' => t('Text Area')),
    '#default_value' => $field_type,
    '#ajax' => array(
      'callback' => 'product_specification_field_selecter_form_ajax',
      'wrapper' => 'product_specification-' . $field['field_name'] . '-' . $delta . '-wrapper',
      'effect' => 'fade',
    ),
  );
  if (in_array(arg(0), array('admin', 'system'))) {
    $element['product_specification']['field_description']['#markup'] = t('This form defines the table field defaults, but the number of rows and content can be overridden on a per-bundle basis. The first row will appear as the header. Leave the first row blank if you do not need a header.');
  }

  // Determine how many rows/columns are saved in the data.
  if (!empty($default_value)) {
    $count_rows = count($default_value);
    $count_cols = 0;
    foreach ($default_value as $row) {
      $temp_count = count($row);
      if ($temp_count > $count_cols) {
        $count_cols = $temp_count;
      }
    }
  }
  else {
    $count_cols = isset($default_count_cols) ? $default_count_cols : 0;
    $count_rows = isset($default_count_rows) ? $default_count_rows : 0;
  }

  // Override the number of rows/columns if the user rebuilds the form.
  if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == 'product_specification_rebuild_' . $field['field_name'] . '_' . $delta) {
    $count_cols = $form_state['product_specification_rebuild'][$field['field_name']][$langcode][$delta]['product_specification']['rebuild']['count_cols'];
    $count_rows = $form_state['product_specification_rebuild'][$field['field_name']][$langcode][$delta]['product_specification']['rebuild']['count_rows'];

    drupal_set_message(t('Table structure rebuilt.'), 'status', FALSE);
  }

  // Render the form table.
  $element['product_specification']['a_break'] = array(
    '#markup' => '<table>',
  );
  for ($i = 0; $i < $count_rows; $i++) {
    $zebra = $i % PRODUCT_SPECIFICATION_DEFAULT_COLUMNS == 0 ? 'even' : 'odd';
    $element['product_specification']['b_break' . $i] = array(
      '#markup' => '<tr class="product_specification-row-' . $i . ' ' . $zebra . '">',
    );
    $colspan = ($i == 0) ? ' colspan="' . PRODUCT_SPECIFICATION_DEFAULT_COLUMNS . '"' : '';
    $col_count = ($i == 0) ? 1 : $count_cols;
    for ($ii = 0; $ii < $col_count; $ii++) {
      $cell_default = isset($default_value[$i][$ii]) ? $default_value[$i][$ii] : '';
      $element['product_specification']['cell_' . $i . '_' . $ii] = array(
        '#type' => ($field_type) ? $field_type : 'textfield',
        '#maxlength' => 4096,
        '#size' => 0,
        '#attributes' => array(
          'id' => 'product_specification_' . $delta . '_cell_' . $i . '_' . $ii,
          'class' => array('product_specification-row-' . $i, 'product_specification-col-' . $ii),
          'style' => 'width:100%',
        ),
        '#default_value' => $cell_default,
        '#prefix' => '<td style="width:' . floor(100 / $count_cols) . '%"' . $colspan . '>',
        '#suffix' => '</td>',
      );
    }
    $element['product_specification']['c_break' . $i] = array(
      '#markup' => '</tr>',
    );
  }
  $element['product_specification']['t_break' . $i] = array(
    '#markup' => '</table>',
  );
  $element['product_specification']['rebuild']['count_cols'] = array(
    '#type' => 'hidden',
    '#value' => $count_cols,
  );
  $element['product_specification']['rebuild']['count_rows'] = array(
    '#type' => 'hidden',
    '#value' => $count_rows,
  );
  $element['product_specification']['rebuild']['add_one'] = array(
    '#type' => 'button',
    '#validate' => array(),
    '#limit_validation_errors' => array(),
    '#executes_submit_callback' => TRUE,
    '#submit' => array('product_specification_rebuild_form'),
    '#value' => t('Add one row'),
    '#name' => 'product_specification_rebuild_' . $field['field_name'] . '_' . $delta,
    '#attributes' => array(
      'class' => array('product_specification-rebuild'),
    ),
    '#ajax' => array(
      'callback' => 'product_specification_rebuild_form_ajax',
      'wrapper' => 'product_specification-' . $field['field_name'] . '-' . $delta . '-wrapper',
      'effect' => 'fade',
    ),
  );
  if ($count_rows > PRODUCT_SPECIFICATION_DEFAULT_COLUMNS) {
    $element['product_specification']['rebuild']['remove_one'] = array(
      '#type' => 'button',
      '#validate' => array(),
      '#limit_validation_errors' => array(),
      '#executes_submit_callback' => TRUE,
      '#submit' => array('product_specification_rebuild_form'),
      '#value' => t('Remove one row'),
      '#name' => 'product_specification_rebuild_' . $field['field_name'] . '_' . $delta,
      '#attributes' => array(
        'class' => array('product_specification-rebuild'),
      ),
      '#ajax' => array(
        'callback' => 'product_specification_rebuild_form_ajax',
        'wrapper' => 'product_specification-' . $field['field_name'] . '-' . $delta . '-wrapper',
        'effect' => 'fade',
      ),
    );
  }

  // Allow the user to import a csv file.
  $element['product_specification']['import'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Import from CSV'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $element['product_specification']['import']['product_specification_csv_' . $field['field_name'] . '_' . $delta] = array(
    '#name' => 'files[' . $field['field_name'] . '_' . $delta . ']',
    '#title' => 'File upload',
    '#type' => 'file',
  );

  $element['product_specification']['import']['rebuild_' . $field['field_name'] . '_' . $delta] = array(
    '#type' => 'button',
    '#validate' => array(),
    '#limit_validation_errors' => array(),
    '#executes_submit_callback' => TRUE,
    '#submit' => array('product_specification_rebuild_form'),
    '#value' => t('Upload CSV'),
    '#name' => 'product_specification-import-button-' . $field['field_name'] . '-' . $delta,
    '#attributes' => array(
      'class' => array('product_specification-rebuild'),
    ),
    '#ajax' => array(
      'callback' => 'product_specification_rebuild_form_ajax',
      'wrapper' => 'product_specification-' . $field['field_name'] . '-' . $delta . '-wrapper',
      'effect' => 'fade',
      'event' => 'click',
    ),
  );

  // Allow the user to select input filters.
  if (!empty($field['settings']['cell_processing'])) {
    $element['#base_type'] = $element['#type'];
    $element['#type'] = 'text_format';
    $element['#display_format'] = isset($items[$delta]['cell_processing']) ? $items[$delta]['cell_processing'] : NULL;
  }
  $element['#attached']['css'] = array(drupal_get_path('module', 'product_specification') . '/css/product_specification.css');
  return $element;
}

/**
 * Helper function to import data from a CSV file.
 */
function product_specification_import_csv($form, &$form_state) {
  // Look for the field name by checking on the clicked button.
  if (preg_match('/product_specification-import-button-(.*)$/', $form_state['clicked_button']['#name'], $id)) {
    // Extract the field and file name from the id of the clicked button.
    $file_name = preg_replace('/\-/', '_', $id[1]);
    preg_match('/_([0-9]+)$/', $file_name, $field_delta);
    // Extract the field delta from the field name.
    $delta = $field_delta[1];
    $field_name = preg_replace('/' . $field_delta[0] . '/', '', $file_name);
    $language = isset($form[$field_name]['#language']) ? $form[$field_name]['#language'] : 'und';
    $file = file_save_upload($file_name, array('file_validate_extensions' => array('csv')));

    if (is_object($file)) {
      if (($handle = fopen($file->uri, "r")) !== FALSE) {
        product_specification_delete_table_values($form_state['values'][$field_name][$language][$delta]['product_specification']);

        // Populate CSV values.
        $max_col_count = 0;
        $row_count = 0;
        while (($csv = fgetcsv($handle, 0, variable_get('product_specification_csv_separator', ','))) !== FALSE) {
          $col_count = count($csv);
          foreach ($csv as $col_id => $col) {
            if ($col_id < 2) {
              $form_state[PRODUCT_SPECIFICATION_INPUT][$field_name][$language][$delta]['product_specification']['cell_' . $row_count . '_' . $col_id] = $form_state['values'][$field_name][$language][$delta]['product_specification']['cell_' . $row_count . '_' . $col_id] = $col;
            }
          }
          $max_col_count = $col_count > $max_col_count ? $col_count : $max_col_count;
          $row_count++;
        }
        fclose($handle);

        $form_state[PRODUCT_SPECIFICATION_INPUT][$field_name][$language][$delta]['product_specification']['rebuild']['count_cols'] = $form_state['values'][$field_name][$language][$delta]['product_specification']['rebuild']['count_cols'] = $max_col_count;
        $form_state[PRODUCT_SPECIFICATION_INPUT][$field_name][$language][$delta]['product_specification']['rebuild']['count_rows'] = $form_state['values'][$field_name][$language][$delta]['product_specification']['rebuild']['count_rows'] = $row_count;

        drupal_set_message(t('Successfully imported @file', array('@file' => $file->filename)));
      }
      else {
        drupal_set_message(t('There was a problem importing @file.', array('@file' => $file->filename)));
      }
    }
  }
}

/**
 * Helper function to remove all values in a particular table.
 */
function product_specification_delete_table_values(&$product_specification) {
  // Empty out previously entered values.
  foreach ($product_specification as $key => $value) {
    if (strpos($key, 'cell_') === 0) {
      $product_specification[$key] = '';
    }
  }
}

/**
 * AJAX callback to select field edit format.
 */
function product_specification_field_selecter_form_ajax($form, $form_state) {
  $parents = $form_state['triggering_element']['#parents'];
  if ($form['form_id']['#id'] == 'edit-field-ui-field-edit-form') {
    $rebuild = $form['instance']['default_value_widget'][$parents[0]];
  }
  else {
    $rebuild = $form[$parents[0]][$parents[1]][$parents[2]]['product_specification'];
  }
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace(NULL, drupal_render($rebuild)),
    ),
  );
}

/**
 * AJAX callback to add/remove row.
 */
function product_specification_rebuild_form_ajax($form, $form_state) {
  $rebuild = $form;
  $parents = $form_state['clicked_button']['#parents'];
  if ($form['form_id']['#id'] == 'edit-field-ui-field-edit-form') {
    $rebuild = $form['instance']['default_value_widget'][$parents[0]];
  }
  else {
    foreach ($parents as $parent) {
      // Locate the delta of the field - 0 deltas need to break after
      // descending to the 'rebuild' element, but deltas greater than
      // 0 need to break /before/ adding the 'rebuild' element.
      if (is_int($parent)) {
        $delta = $parent;
      }
      $tmp = $rebuild;

      if ($parent == 'rebuild' || $parent == 'import') {
        $rebuild = $delta == 0 ? $tmp[$parent] : $tmp;
        break;
      }
      $rebuild = $tmp[$parent];
    }
  }
  // We don't want to re-send the format/_weight options.
  unset($rebuild['format']);
  unset($rebuild['_weight']);

  // We need to avoid sending headers or the multipart form
  // will make it fail. So, we need to explicitly define the
  // whole response to ajax_deliver().
  return array(
    '#type' => 'ajax',
    '#header' => FALSE,
    '#commands' => array(
      ajax_command_insert(NULL, drupal_render($rebuild)),
      ajax_command_prepend(NULL, theme('status_messages')),
    ),
  );
}

/**
 * Helper function to rebuild the table structure w/o submitting the form.
 */
function product_specification_rebuild_form($form, &$form_state) {
  // Maintain the product_specification data.
  $form_state['product_specification_rebuild'] = $form_state[PRODUCT_SPECIFICATION_INPUT];
  $parents = $form_state['clicked_button']['#parents'];
  if ($parents[5] == 'add_one') {
    $form_state['product_specification_rebuild'][$parents[0]][$parents[1]][$parents[2]][$parents[3]]['rebuild']['count_rows']++;
  }
  elseif ($parents[5] == 'remove_one') {
    $form_state['product_specification_rebuild'][$parents[0]][$parents[1]][$parents[2]][$parents[3]]['rebuild']['count_rows']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Helper function to turn form elements into a structured array.
 */
function product_specification_rationalize_table($product_specification, $remove_empty_cell = FALSE) {
  $tabledata = array();
  // Rationalize the table data.
  if (!empty($product_specification)) {
    // Remove exterraneous form data.
    $count_cols = $product_specification['rebuild']['count_cols'];
    $count_rows = $product_specification['rebuild']['count_rows'];
    unset($product_specification['rebuild']);
    unset($product_specification['import']);
    unset($product_specification['field_type']);

    foreach ($product_specification as $key => $value) {
      preg_match('/cell_(.*)_(.*)/', $key, $cell);
      // $cell[1] is row count $cell[2] is col count.
      if ((int) $cell[1] < $count_rows && (int) $cell[PRODUCT_SPECIFICATION_DEFAULT_COLUMNS] < $count_cols) {
        if (!$remove_empty_cell || ($remove_empty_cell && $value)) {
          $tabledata[$cell[1]][$cell[PRODUCT_SPECIFICATION_DEFAULT_COLUMNS]] = $value;
        }
      }
    }
  }
  return $tabledata;
}

/**
 * Implements hook_theme().
 */
function product_specification_theme() {
  return array(
    'product_specification_view' => array(
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'delta' => NULL,
        'entity_type' => NULL,
        'entity_id' => NULL,
        'field_name' => NULL,
        'langcode' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for table view.
 */
function theme_product_specification_view($variables) {
  $attributes = array(
    'id' => 'product_specification-' . $variables['delta'],
    'class' => array(
      'product_specification',
    ),
  );

  return '<div id="product_specification-wrapper-' . $variables['delta'] . '" class="product_specification-wrapper">'
      . theme('table', array(
        'header' => $variables['header'],
        'rows' => $variables['rows'],
        'attributes' => $attributes,
          )
      )
      . '</div>';
}
