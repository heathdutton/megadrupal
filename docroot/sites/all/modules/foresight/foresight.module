<?php
/**
 * @file
 * Adds device pixel ratio awareness to core image style effects and renders
 * images using foresight.js.
 */

/**
 * Maximum scale to prevent generation of huge images.
 */
define('FORESIGHT_MAX_SCALE', 4);

/**
 * Implements hook_init().
 */
function foresight_init() {
  $test_kb = variable_get('foresight_speed_test_kb', 50);

  $settings = array(
    'options' => array(
      'minKbpsForHighBandwidth' => variable_get('foresight_min_kbs_for_high_bandwidth', 300),
      'speedTestUri' => file_create_url(libraries_get_path('foresight') . '/speed-test/' . $test_kb . 'K.jpg'),
      'speedTestKB' => $test_kb,
      'speedTestExpireMinutes' => variable_get('foresight_speed_test_expires_minutes', 30),
      'forcedPixelRatio' => variable_get('foresight_forced_pixel_ratio', ''),
      'forcedBandwidth' => variable_get('foresight_forced_bandwidth', ''),
    ),
  );
  drupal_add_js('foresight = ' . drupal_json_encode($settings), array('type' => 'inline'));
  drupal_add_js(drupal_get_path('module', 'foresight') . '/foresight.js');

  if (!module_exists('libraries')) {
    drupal_load('module', 'libraries');
  }
  if (file_exists(libraries_get_path('foresight') . '/foresight.js')) {
    drupal_add_js(libraries_get_path('foresight') . '/foresight.js');
  }

  drupal_add_css(drupal_get_path('module', 'foresight') . '/foresight.css');
}

/**
 * Implements hook_menu().
 *
 * Create our own menu callbacks to replace the default style/%image_style path.
 * These include the device's pixel ratio in the path.
 */
function foresight_menu() {
  $items = array();

  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  $directory_length = count(explode('/', $directory_path));
  $items[$directory_path . '/styles-foresight/%/%'] = array(
    'title' => 'Generate image style variation',
    'page callback' => 'foresight_image_style_deliver',
    'page arguments' => array($directory_length + 1, $directory_length + 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Generate and deliver image derivatives of private files.
  // These image derivatives are always delivered through the menu system.
  $items['system/files/styles-foresight/%/%'] = array(
    'title' => 'Generate image style variation',
    'page callback' => 'foresight_image_style_deliver',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/media/foresight'] = array(
    'title' => 'Foresight',
    'description' => 'Settings for Foresight images',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('foresight_admin'),
    'access arguments' => array('administer foresight'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'foresight.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function foresight_permission() {
  return array(
    'administer foresight' => array(
      'title' => t('Administer Foresight'),
      'description' => t('Configure how Foresight images are displayed.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function foresight_theme() {
  return array(
    'foresight_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'settings' => array(),
        'image_style' => NULL,
        'path' => NULL,
      ),
    ),
    'foresight_image_style' => array(
      'variables' => array(
        'settings' => array(),
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function foresight_field_formatter_info() {
  $formatters = array(
    'foresight_image' => array(
      'label' => t('Foresight Image'),
      'field types' => array('image', 'file'),
      'description' => t('Pixel ratio aware image using Foresight library'),
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
        'request_dimensions' => TRUE,
        'scale' => TRUE,
        'check_bandwidth' => TRUE,
      ),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function foresight_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Reuse image field settings.
  $form = image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);

  $form['request_dimensions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Scale to exact layout dimensions (responsive images)'),
    '#default_value' => $settings['request_dimensions'],
  );

  $form['scale'] = array(
    '#type' => 'select',
    '#title' => t('Scale to device pixel ratio (retina)'),
    '#default_value' => $settings['scale'],
    '#options' => foresight_scale_options(),
  );

  $form['check_bandwidth'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check bandwidth'),
    '#default_value' => $settings['check_bandwidth'],
    '#states' => array(
      'invisible' => array(
        'select[name$="[settings_edit_form][settings][scale]"]' => array('value' => ''),
      ),
    ),
  );

  return $form;
}

/**
 * Get pixel ratio scale options.
 */
function foresight_scale_options() {
  return array(
    '' => t('Off'),
    'exact' => t('Exact'),
    'rounded' => t('Rounded'),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function foresight_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Again, act like image module.
  $summary = image_field_formatter_settings_summary($field, $instance, $view_mode);

  if ($settings['request_dimensions']) {
    $summary .= '<br />' . t('Scale to exact layout dimensions');
  }
  if ($settings['scale']) {
    $options = foresight_scale_options();
    $summary .= '<br />' . t('Scale to device pixel ratio: @scale', array(
      '@scale' => $options[$settings['scale']],
    ));
    if ($settings['check_bandwidth']) {
      $summary .= '<br />' . t('Check bandwidth');
    }
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function foresight_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'foresight_image_formatter',
      '#item' => $item,
      '#settings' => $display['settings'],
      // Keep this in a separate variable so we can pass directly to
      // default image_formatter.
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return $element;
}

/**
 * Implements hook_image_style_flush().
 *
 * Removes cached style variations from styles-foresight.
 */
function foresight_image_style_flush($style) {
  $base_directory = drupal_realpath(file_default_scheme() . '://styles-foresight');

  // Files are in 'styles-foresight/%/%style_name' so we need to iterate over
  // base directory.
  $handle = opendir($base_directory);
  while (FALSE !== ($file = readdir($handle))) {
    if ($file[0] != '.') {
      $style_directory = $base_directory . '/' . $file . '/' . $style['name'];
      if (is_dir($style_directory)) {
        file_unmanaged_delete_recursive($style_directory);
      }
    }
  }
}

/**
 * Deliver pixel ratio variation for an image style.
 *
 * This shares a lot of code with image_style_deliver() but alters the
 * destination path to use our custom menu callback and applies scale
 * transformations to effect data.
 *
 * @param string $dimensions
 *   Image dimensions and scale string {requestWidth}x{requestHeight}x{scale}
 * @param string $style_name
 *   The image style
 *
 * @see image_style_deliver()
 */
function foresight_image_style_deliver($dimensions, $style_name, $scheme) {
  // Create empty style to display original image.
  if ($style_name == 'original') {
    $style = array('name' => 'original', 'effects' => array());
  }
  // Load style.
  else {
    $style = image_style_load($style_name);
  }

  // Check that the style is defined and the scheme is valid.
  if (!$style || !file_stream_wrapper_valid_scheme($scheme)) {
    drupal_exit();
  }

  // Parse dimensions string.
  $dimension_parts = explode('x', $dimensions);
  if (count($dimension_parts) == 3) {
    list($request_width, $request_height, $scale) = $dimension_parts;
  }
  elseif (count($dimension_parts) == 2) {
    list($request_width, $request_height) = $dimension_parts;
    $scale = 1;
  }
  elseif (count($dimension_parts) == 1) {
    list($scale) = $dimension_parts;
    $request_width = NULL;
    $request_height = NULL;
  }

  // Make sure ratio is a float.
  $scale = (float) $scale;

  // Enforce maximum scale.
  if ($scale > FORESIGHT_MAX_SCALE) {
    $scale = FORESIGHT_MAX_SCALE;
  }

  // Get file path from additional args.
  $target = implode('/', array_slice(func_get_args(), 3));
  $image_uri = $scheme . '://' . $target;

  // Build path using our custom callback.
  $derivative_uri = foresight_image_style_path($dimensions, $style['name'], $image_uri);

  // If using the private scheme, let other modules provide headers and
  // control access to the file.
  if ($scheme == 'private') {
    if (file_exists($derivative_uri)) {
      file_download($scheme, file_uri_target($derivative_uri));
    }
    else {
      $headers = module_invoke_all('file_download', $image_uri);
      if (in_array(-1, $headers) || empty($headers)) {
        return drupal_access_denied();
      }
      if (count($headers)) {
        foreach ($headers as $name => $value) {
          drupal_add_http_header($name, $value);
        }
      }
    }
  }

  // Check if derivative already exists.
  if (file_exists($derivative_uri)) {
    $success = TRUE;
  }
  else {
    // Try to get lock.
    $lock_name = 'image_style_deliver:' . $style['name'] . ':' . drupal_hash_base64($image_uri);
    $lock_acquired = lock_acquire($lock_name);

    // Image generation is in progress in another thread.
    if (!$lock_acquired) {
      // Tell client to retry again in 3 seconds. Currently no browsers are
      // known to support Retry-After.
      drupal_add_http_header('Status', '503 Service Unavailable');
      drupal_add_http_header('Retry-After', 3);
      print t('Image generation in progress. Try again shortly.');
      drupal_exit();
    }

    // Get original image dimensions.
    $image_info = image_get_info($image_uri);
    if (is_array($image_info) && $image_info['width'] && $image_info['height']) {
      // Apply tranformations to style.
      foresight_apply_scale($style, $image_info, $scale, $request_width, $request_height);
      // Try to generate image.
      $success = image_style_create_derivative($style, $image_uri, $derivative_uri);
    }
    else {
      // Failed to get image dimensions.
      $success = FALSE;
    }

    // Release lock.
    lock_release($lock_name);
  }

  if ($success) {
    $image = image_load($derivative_uri);
    file_transfer($image->source, array('Content-Type' => $image->info['mime_type'], 'Content-Length' => $image->info['file_size']));
  }
  else {
    watchdog('foresight', 'Unable to generate the derived image located at %path.', array('%path' => $derivative_uri));
    drupal_add_http_header('Status', '500 Internal Server Error');
    print t('Error generating image.');
    drupal_exit();
  }
}

/**
 * Apply scale transformations to style.
 *
 * @param array $style
 *   Image style to transform
 * @param array $image_info
 *   Image information including dimensions
 * @param float $scale
 *   Pixel ratio scale
 * @param int $request_width
 *   Requested image width
 * @param int $request_height
 *   Requested image height
 */
function foresight_apply_scale(&$style, $image_info, $scale, $request_width, $request_height) {
  // Apply scale transformations if request dimensions supplied.
  if ($request_width && $request_height) {
    if ($style['name'] != 'original') {
      image_style_transform_dimensions($style['name'], $image_info);
    }
    // Get ratio of requested dimensions to original and apply this to scale.
    // If width and height are out of proportion use the largest ratio to
    // avoid upscaling in the browser.
    $width_ratio = $request_width / $image_info['width'];
    $height_ratio = $request_height / $image_info['height'];

    $scale *= max($width_ratio, $height_ratio);
  }

  // These effects should have their settings modified to apply scale.
  $scaled_effects = array(
    'image_scale',
    'image_scale_and_crop',
    'image_resize',
  );

  // Apply scale to effects.
  $matched_effect = FALSE;
  foreach ($style['effects'] as $i => $effect) {
    if (in_array($effect['name'], $scaled_effects)) {
      $style['effects'][$i]['data']['width'] = round($effect['data']['width'] * $scale);
      $style['effects'][$i]['data']['height'] = round($effect['data']['height'] * $scale);
      $matched_effect = TRUE;
    }
  }
  // Add a custom scale effect if no existing effects were overridden.
  if (!$matched_effect) {
    $scale_effect = image_effect_definition_load('image_scale');
    $scale_effect['data'] = array(
      'width' => round($image_info['width'] * $scale),
      'height' => round($image_info['height'] * $scale),
      'upscale' => FALSE,
    );
    $style['effects'][] = $scale_effect;
  }
}

/**
 * Return the URI of an image when using a style.
 *
 * The path returned by this function may not exist. The default generation
 * method only creates images when they are requested by a user's browser.
 *
 * @param string $dimensions
 *   Image dimensions and scale string {requestWidth}x{requestHeight}x{scale}
 * @param string $style_name
 *   The name of the style to be used with this image.
 * @param string $uri
 *   The URI or path to the image.
 *
 * @return string
 *   The URI to an image style image.
 * @see image_style_url()
 */
function foresight_image_style_path($dimensions, $style_name, $uri) {
  $scheme = file_uri_scheme($uri);
  if ($scheme) {
    $path = file_uri_target($uri);
  }
  else {
    $path = $uri;
    $scheme = file_default_scheme();
  }
  return $scheme . '://styles-foresight/' . $dimensions . '/' . $style_name . '/' . $scheme . '/' . $path;
}

/**
 * Returns HTML for an image field formatter.
 *
 * Based on theme_image_formatter() but calls theme_foresight_image_style()
 * instead of theme_image_style().
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - image_style: An optional image style.
 *   - settings: array of image style settings.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 * @see theme_image_formatter()
 */
function theme_foresight_image_formatter($variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
  );

  if (array_key_exists('alt', $item)) {
    $image['alt'] = $item['alt'];
  }

  if (isset($item['attributes'])) {
    $image['attributes'] = $item['attributes'];
  }

  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }
  elseif (isset($item['image_dimensions']['width']) && isset($item['image_dimensions']['height'])) {
    $image['width'] = $item['image_dimensions']['width'];
    $image['height'] = $item['image_dimensions']['height'];
  }

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
  }
  else {
    $image['style_name'] = 'original';
  }
  $image['settings'] = $variables['settings'];
  $output = theme('foresight_image_style', $image);

  // The link path and link options are both optional, but for the options to be
  // processed, the link path must at least be an empty string.
  if (isset($variables['path']['path'])) {
    $path = $variables['path']['path'];
    $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  return $output;
}

/**
 * Renders an image using custom markup for foresight.js.
 *
 * @ingroup themeable
 * @see theme_image_style()
 */
function theme_foresight_image_style(&$variables) {

  $attributes = $variables['attributes'];
  $settings = $variables['settings'];

  // Use default style output for src attribute. The image-set property in
  // our CSS will replace this with ratio specific URL.
  $attributes['data-src'] = image_style_url($variables['style_name'], $variables['path']);

  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );
  image_style_transform_dimensions($variables['style_name'], $dimensions);

  $attributes['data-width'] = $dimensions['width'];
  $attributes['data-height'] = $dimensions['height'];

  // Build Foresight class name.
  $class = 'fs-img';

  // Add options to class.
  if ($settings['request_dimensions']) {
    $class .= '-dimensions';
  }
  else {
    $class .= '-nodimensions';
  }
  if ($settings['scale']) {
    $class .= '-scale' . $settings['scale'];
    if ($settings['check_bandwidth']) {
      $class .= '-bandwidth';
    }
    else {
      $class .= '-nobandwidth';
    }
  }
  else {
    $class .= '-noscale';
  }
  $attributes['class'][] = 'fs-img';
  $attributes['class'][] = $class;

  foreach (array('alt', 'title') as $key) {
    if (isset($variables[$key])) {
      $attributes[$key] = $variables[$key];
    }
  }
  $output = '<img' . drupal_attributes($attributes) . ' />';

  // Include default output in noscript if enabled.
  if (variable_get('foresight_noscript', TRUE)) {
    $output .= '<noscript>' . theme('image_style', $variables) . '</noscript>';
  }
  return $output;
}
