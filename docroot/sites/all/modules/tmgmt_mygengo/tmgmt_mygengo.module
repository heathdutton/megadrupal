<?php

/**
 * @file
 * Module file of the translation management mygengo module.
 *
 * Credits:
 * Originally implemented by Ryan McGrath, Gengo. Reworked and added new
 * features by MDSystems.
 *
 * TMGMT vs Gengo jobs
 * =====================
 * TMGMT manages translation jobs which are containers for job items and those
 * are divided into data items.
 *
 * myGengo's job is at the level of TMGMGT data items. When a TMGMT job is sent
 * to myGengo all the data items are sent as grouped myGengo jobs.
 *
 * TODOs
 * =====================
 * @todo With the poll feature we added a mapping table of data items to myGengo jobs.
 *   Therefore it is possible to implement regular review-reject process instead
 *   of current feature which submits a completely new job to myGengo.
 *
 * @todo Do we need access check? Review possible scenarios and either remove it
 *   completely or add some meaning full access control.
 */

define('TMGMT_MYGENGO_COMMENTS_CACHE_EXPIRE', 900);

/**
 * Ajax callback for comment pane form in the review tool.
 *
 * @see TMGMTMyGengoTranslatorUIController::reviewForm()
 */
function tmgmt_mygengo_review_comments_pane_form_ajax($form, &$form_state) {
  $gengo_job_id = $form_state['triggering_element']['#gengo_job_id'];
  $target_key = $form_state['triggering_element']['#target_key'];
  $parts = explode('|', $target_key);
  $top_key = $parts[0];
  return $form['review'][$top_key][$target_key]['below'][$gengo_job_id . '_gengo']['comments_wrapper'];
}
/**
 * Ajax callback for input pane form part in the review tool.
 *
 * @see TMGMTMyGengoTranslatorUIController::reviewForm()
 */
function tmgmt_mygengo_review_form_input_pane_ajax($form, &$form_state) {
  $gengo_job_id = $form_state['triggering_element']['#gengo_job_id'];
  $target_key = $form_state['triggering_element']['#target_key'];
  $parts = explode('|', $target_key);
  $top_key = $parts[0];
  return $form['review'][$top_key][$target_key]['below'][$gengo_job_id . '_gengo']['input_wrapper'];
}

/**
 * Gengo action form cancel button submit callback.
 *
 * Unsets workflow specific data from $form_state to have the form build in the
 * initial state.
 *
 * @see TMGMTMyGengoTranslatorUIController::getCommentForm()
 */
function tmgmt_mygengo_gengo_cancel_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['gengo_action'] = NULL;
  $form_state['active_gengo_job_id'] = NULL;
}

/**
 * Data item gengo buttons submit callback.
 *
 * Based on clicked button will set workflow data into $form_state.
 *
 * @see TMGMTMyGengoTranslatorUIController::reviewForm()
 */
function tmgmt_mygengo_gengo_action_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['gengo_action'] = $form_state['triggering_element']['#gengo_action'];
  $form_state['active_gengo_job_id'] = $form_state['triggering_element']['#gengo_job_id'];
}

/**
 * Validates comment to be sent to gengo service.
 *
 * @see TMGMTMyGengoTranslatorUIController::getCommentForm()
 */
function tmgmt_mygengo_add_comment_form_validate($form, &$form_state) {
  $gengo_job_id = $form_state['triggering_element']['#gengo_job_id'];

  if (empty($form_state['values'][$gengo_job_id . '_comment'])) {
    form_set_error($gengo_job_id . '_comment', t('Comment body cannot be empty.'));
  }
}

/**
 * Submits comment to gengo service.
 *
 * @see TMGMTMyGengoTranslatorUIController::getCommentForm()
 */
function tmgmt_mygengo_add_comment_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['gengo_action'] = NULL;
  $form_state['active_gengo_job_id'] = NULL;
  $gengo_job_id = $form_state['triggering_element']['#gengo_job_id'];
  /* @var TMGMTJobItem $item */
  $item = $form_state['item'];
  $job = $item->getJob();

  try {
    $connector = new TMGMTGengoConnector($job->getTranslator());
    $connector->postComment($gengo_job_id, $form_state['values'][$gengo_job_id . '_comment']);
    $form_state['submitted_gengo_action'] = 'comment';
  }
  catch (TMGMTException $e) {
    watchdog_exception('tmgmt_mygengo', $e);
    drupal_set_message(t('Unable to add comment. Error: !error', array('!error' => $e->getMessage())), 'error');
  }
}

/**
 * Submits a revision to gengo service.
 *
 * Upon successful revision submission to gengo it will put the data item into
 * pending state.
 *
 * @see TMGMTMyGengoTranslatorUIController::getCommentForm()
 */
function tmgmt_mygengo_add_revision_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['gengo_action'] = NULL;
  $form_state['active_gengo_job_id'] = NULL;
  $gengo_job_id = $form_state['triggering_element']['#gengo_job_id'];
  /* @var TMGMTJobItem $item */
  $item = $form_state['item'];
  $job = $item->getJob();

  try {
    $connector = new TMGMTGengoConnector($job->getTranslator());
    $connector->reviseJob($gengo_job_id, $form_state['values'][$gengo_job_id . '_comment']);

    $data_item_key = $form_state['values'][$gengo_job_id . '_data_item_key'];
    $item->updateData($data_item_key, array('#status' => TMGMT_DATA_ITEM_STATE_PENDING));

    $items = array();
    $items[$item->tjiid] = $item;

    // Check remote mapping for duplicates, update them as well.
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($item->tjid, $item->tjiid, $data_item_key);
    $remote = reset($remotes);
    if (!empty($remote->remote_data['duplicates'])) {
      foreach ($remote->remote_data['duplicates'] as $duplicate_key) {
        list($tjiid, $data_item_key) = explode('][', $duplicate_key, 2);
        if (!isset($items[$tjiid])) {
          $items[$tjiid] = tmgmt_job_item_load($tjiid);
        }
        if ($items[$tjiid]) {
          $items[$tjiid]->updateData($data_item_key, array('#status' => TMGMT_DATA_ITEM_STATE_PENDING));
        }
      }
    }

    // Save all updated items.
    foreach ($items as $item) {
      $item->save();
    }

    $form_state['submitted_gengo_action'] = 'revision';
  }
  catch (TMGMTException $e) {
    watchdog_exception('tmgmt_mygengo', $e);
    drupal_set_message(t('Unable to add revision. Error: !error', array('!error' => $e->getMessage())), 'error');
  }
}

/**
 * Theme function to display comments thread.
 *
 * @param array $variables
 *   - thread: Comments thread received from gengo service.
 *
 * @return string
 *   HTML output.
 */
function theme_tmgmt_mygengo_comments_thread($variables) {
  $thread = $variables['thread'];
  $gengo_job_id = $variables['gengo_job_id'];
  if (empty($thread) || !is_array($thread)) {
    return '';
  }

  $comments = array();
  $i = 0;

  foreach ($thread as $comment) {
    $zebra = ++$i%2 == 0 ? 'even' : 'odd';

    $attributes = drupal_attributes(array('class' => array('gengo-comment-body', $zebra)));

    $comments[] = '<div class="gengo-comment-meta">' .
        t('At %time by %author:', array('%time' => format_date($comment->ctime), '%author' => $comment->author)) .
        '</div><div ' . $attributes . '>' . check_plain($comment->body) . '</div>';
  }

  return theme('item_list', array('items' => $comments)) . '<div class="comments-list-closing" id="' . $gengo_job_id . '-comments-list-closing"></div>';
}

/**
 * Implements hook_theme().
 */
function tmgmt_mygengo_theme() {
  return array(
    'tmgmt_mygengo_comments_thread' => array(
      'variables' => array('thread' => NULL, 'gegno_job_id' => NULL),
    ),
  );
}

/**
 *  Implements hook_menu().
 */
function tmgmt_mygengo_menu() {
  $items['tmgmt_mygengo_callback'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'mygengo_callback',
    'description' => '',
    'page callback' => 'tmgmt_mygengo_callback',
    'access callback' => 'tmgmt_mygengo_access_check'
  );
  return $items;
}

/**
 * Submit callback to poll translations form Gengo.
 */
function _tmgmt_mygengo_poll_submit($form, &$form_state) {
  /**
   * @var TMGMTJob $job
   */
  $job = $form_state['tmgmt_job'];
  /**
   * @var TMGMTMyGengoTranslatorPluginController $controller
   */
  $controller = $job->getTranslator()->getController();

  // Fetch everything for this job, this updates the mapping and saves
  // translations if there are any.
  $controller->fetchGengoJobs($job);

  // Clear comments cache.
  // @todo: Improve cache id to clear cache for this job item only?
  cache_clear_all('tmgmt_mygengo_comments_', 'cache_tmgmt', TRUE);

  drupal_set_message(t('All available translations from Gengo have been polled.'));
}

/**
 * Process response from mygengo.
 */
function tmgmt_mygengo_callback() {
  // First, check if this is a comment notification.
  if (isset($_POST['comment'])) {
    $comment = json_decode($_POST['comment']);
    cache_clear_all('tmgmt_mygengo_comments_' . $comment->job_id, 'cache_tmgmt');
    return '';
  }

  // Check if we have a job.
  if (!isset($_POST['job'])) {
    return MENU_NOT_FOUND;
  }

  $data = json_decode($_POST['job']);
  list($tjid, $tjiid, $data_item_key) = explode('][', $data->custom_data, 3);
  $job = tmgmt_job_load($tjid);
  if (!$job) {
    watchdog('tmgmt_mygengo', 'Failed to load translation job for @data', array('@data' => var_export($data, TRUE)), WATCHDOG_WARNING);
    return;
  }

  $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($tjid, $tjiid, $data_item_key);
  $remote = reset($remotes);
  // Create a mapping for this job if we don't have one yet. Should not happen
  // as we pre-create mappings with the order id..
  if (!$remote) {
    $item = tmgmt_job_item_load($tjiid);
    $item->addRemoteMapping($data_item_key, NULL, array(
      'remote_identifier_2' => $data->job_id,
      'word_count' => $data->unit_count,
      'remote_data' => array(
        'credits' => $data->credits,
        'tier' => $data->tier,
      ),
      // @todo: Add remote_url.
    ));
  }
  elseif (empty($remote->remote_identifier_2)) {
    $remote->remote_identifier_2 = $data->job_id;
    $remote->word_count = $data->unit_count;
    $remote->remote_data['credits'] = $data->credits;
    $remote->remote_data['tier'] = $data->tier;
    $remote->save();
  }

  /**
   * @var TMGMTMyGengoTranslatorPluginController $mygengo
   */
  $mygengo = $job->getTranslator()->getController();
  // Prepend the job item id.
  $mygengo->saveTranslation($job, $tjiid . '][' . $data_item_key, $data);

  print '';
}

/**
 * tmgmt_mygengo_callback access check.
 */
function tmgmt_mygengo_access_check() {
  // @todo Add validation.
  return TRUE;
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_mygengo_tmgmt_translator_plugin_info() {
  return array(
    'mygengo' => array(
      'label' => t('Gengo translator'),
      'description' => t('A Gengo translator service.'),
      'plugin controller class' => 'TMGMTMyGengoTranslatorPluginController',
      'ui controller class' => 'TMGMTMyGengoTranslatorUIController',
      'default settings' => array(
        'show_remaining_credits_info' => 1,
      ),
    ),
  );
}
