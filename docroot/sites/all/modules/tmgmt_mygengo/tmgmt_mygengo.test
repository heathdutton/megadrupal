<?php

/**
 * @file
 * Test cases for the Gengo translator module.
 */

/**
 * Basic tests for the Gengo translator.
 */
class TMGMTMyGengoTestCase extends TMGMTBaseTestCase {

  /**
   * @var TMGMTTranslator $translator
   */
  protected $translator;

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Gengo Translator tests'),
      'description' => t('Tests the Gengo translator plugin integration.'),
      'group' => t('Translation Management'),
    );
  }

  function setUp() {
    parent::setUp(array('tmgmt_ui', 'tmgmt_mygengo', 'tmgmt_mygengo_test'));
    $this->setEnvironment('de');
    $this->translator = tmgmt_translator_load('mygengo');
    variable_set('tmgmt_mygengo_use_mock_service', TRUE);
  }

  /**
   * Tests basic API methods of the plugin.
   */
  function testAPI() {

    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $this->translator->name;
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#text' => 'Hello world',
        '#label' => 'Wrapper label',
      ),
    );
    $item->save();

    // The translator should not be available at this poitn because we didn't
    // define an API key yet.
    $this->assertFalse($job->isTranslatable());

    // Save a wrong api key.
    $this->translator->settings['api_public_key'] = 'wrong key';
    $this->translator->settings['api_private_key'] = 'wrong key';
    $this->translator->save();

    // Make sure the translator returns the correct supported target languages.
    $languages = $job->getTranslator()->getSupportedTargetLanguages('en');
    $this->assertTrue(isset($languages['de']));
    $this->assertTrue(isset($languages['es']));
    $this->assertFalse(isset($languages['it']));
    $this->assertFalse(isset($languages['en']));

    // @todo Actually check if the api key is valid.
    $this->assertTrue($job->isTranslatable());
    $job->requestTranslation();

    // Should have been rejected due to the wrong api key.
    $this->assertTrue($job->isRejected());
    $messages = $job->getMessages();
    $message = end($messages);
    $this->assertEqual('error', $message->type);
    $this->assert(strpos($message->getMessage(), 'Job has been rejected') !== FALSE,
      t('Job should be rejected as we provided wrong api key.'));

    // Save a correct api key.
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';
    $this->translator->save();
    $this->assertTrue($job->isTranslatable());

    // Note that requesting translation goes with default
    // gengo_auto_approve = 1
    $job->requestTranslation();
    // And therefore the job should be active
    $this->assertTrue($job->isActive());
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isActive());
    }

    // Create a gengo response of translated and approved job.
    $post['job'] = json_encode(tmgmt_mygengo_test_build_response_job(
      'Hello world',
      'Hallo Welt',
      'approved',
      'standard',
      implode('][', array($job->tjid, $item->tjiid, 'wrapper')),
      $item->data['wrapper']['#label']
    ));

    $action = url('tmgmt_mygengo_callback', array('absolute' => TRUE));
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post));

    // Response should be empty if everything went ok.
    $this->assertResponse(200);
    $this->assertTrue(empty($out));

    // Clear job item caches.
    entity_get_controller('tmgmt_job_item')->resetCache();

    // Verify the label/slug.
    $this->refreshVariables();
    $data = variable_get('tmgmt_mygengo_test_last_gengo_response', FALSE);
    // Find the key under which we can access the job received:
    $jobs = $data->jobs;
    $job_keys = array_keys($jobs);
    $key = array_shift($job_keys);
    $this->assertEqual($data->jobs[$key]->slug, $item->getSourceLabel() . ' > ' . $item->data['wrapper']['#label']);

    // Now it should be needs review.
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('Hallo Welt', $data['wrapper']['#translation']['#text']);

    // Test machine translation.
    $job = $this->createJob();
    $job->settings['quality'] = 'machine';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'subwrapper1' => array(
          '#text' => 'Hello world',
          '#label' => 'Sub label 1',
        ),
        'subwrapper2' => array(
          '#text' => 'Hello world again',
          '#label' => 'Sub label 2',
        ),
      ),
      'no_label' => array(
        '#text' => 'No label',
      ),
      'escaping' => array(
        '#text' => 'A text with a @placeholder',
        '#escape' => array(
          14 => array('string' => '@placeholder'),
        )
      ),
    );
    $item->save();

    // Machine translation should immediately go to needs review.
    $job->requestTranslation();
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    // If received a job item with tier machine the mock service will prepend
    // mt_de_ to the source text.
    $this->assertEqual('mt_de_Hello world', $data['wrapper']['subwrapper1']['#translation']['#text']);
    $this->assertEqual('mt_de_Hello world again', $data['wrapper']['subwrapper2']['#translation']['#text']);
    $this->assertEqual('mt_de_A text with a @placeholder', $data['escaping']['#translation']['#text']);

    // Verify generated labels/slugs.
    $this->refreshVariables();
    $data = variable_get('tmgmt_mygengo_test_last_gengo_response', FALSE);
    $jobs = $data->jobs;

    $subwrapper1_key = $job->tjid . '][' . $item->tjiid . '][wrapper][subwrapper1';
    $no_label_key = $job->tjid . '][' . $item->tjiid . '][no_label';
    $escaping_key = $job->tjid . '][' . $item->tjiid . '][escaping';
    $this->assertEqual($jobs[$subwrapper1_key]->slug, $item->getSourceLabel() . ' > Parent label > Sub label 1');
    $this->assertEqual($jobs[$no_label_key]->slug, $item->getSourceLabel());
    $this->assertEqual($jobs[$escaping_key]->body_src, 'A text with a [[[@placeholder]]]');

    // Test positions.
    $position = 0;
    foreach ($jobs as $response_job) {
      $this->assertEqual($position++, $response_job->position);
    }
  }

  function testOrderModeCallback() {
    variable_set('tmgmt_mygengo_test_order_mode', 1);

    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';
    $this->translator->save();

    // Test machine translation.
    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'subwrapper1' => array(
          '#text' => 'Hello world',
          '#label' => 'Sub label 1',
        ),
        'subwrapper2' => array(
          '#text' => 'Hello world again',
          '#label' => 'Sub label 2',
        ),
      ),
      'no_label' => array(
        '#text' => 'No label',
      ),
    );
    $item->save();

    $job->requestTranslation();
    $this->assertTrue($job->isActive());
    $this->refreshVariables();
    $orders = variable_get('tmgmt_mygengo_test_orders', array());
    $order_id = key($orders);
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid);
    // Remotes should have been created with the order id and without job id.
    $this->assertEqual(count($remotes), 3, '3 remote mappings created.');

    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item->tjiid, 'wrapper][subwrapper1');
    $remote = reset($remotes);
    $this->assertEqual($remote->remote_identifier_1, $order_id);
    $this->assertEqual($remote->remote_identifier_2, '');
    $this->assertEqual($remote->tjiid, $item->tjiid);

    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item->tjiid, 'no_label');
    $remote = reset($remotes);
    $this->assertEqual($remote->remote_identifier_1, $order_id);
    $this->assertEqual($remote->remote_identifier_2, '');
    $this->assertEqual($remote->tjiid, $item->tjiid);

    // Create a gengo response of the job.
    $gengo_job = $orders[$order_id][$job->tjid . '][' . $item->tjiid . '][wrapper][subwrapper1'];
    $post['job'] = json_encode($gengo_job);

    $action = url('tmgmt_mygengo_callback', array('absolute' => TRUE));
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post));

    // Response should be empty if everything went ok.
    $this->assertResponse(200);
    $this->assertTrue(empty($out));

    entity_get_controller('tmgmt_remote')->resetCache();
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item->tjiid, 'wrapper][subwrapper1');
    $remote = reset($remotes);
    $this->assertEqual($remote->remote_identifier_1, $order_id);
    $this->assertEqual($remote->remote_identifier_2, $gengo_job->job_id);
    $this->assertEqual($remote->word_count, $gengo_job->unit_count);
    $this->assertEqual($remote->remote_data['credits'], $gengo_job->credits);
    $this->assertEqual($remote->remote_data['tier'], $gengo_job->tier);
  }

  function testOrderModePollJob() {
    variable_set('tmgmt_mygengo_test_order_mode', 1);
    $this->loginAsAdmin();
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';
    $this->translator->save();
    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'title' => array(
        '#text' => 'Hello world',
        '#label' => 'Title',
      ),
      'body' => array(
        '#text' => 'This is some testing content',
        '#label' => 'Body',
      ),
    );
    $item->save();
    $item2 = $job->addItem('test_source', 'test', '2');
    $item2->data = array(
      'title' => array(
        '#text' => 'Hello world 2',
        '#label' => 'Title',
      ),
      'body' => array(
        '#text' => 'This is some testing content 2',
        '#label' => 'Body',
      ),
      'another_field' => array(
        '#text' => 'More testing',
        '#label' => 'Another',
      ),
    );
    $item2->save();

    $job->requestTranslation();
    $this->refreshVariables();

    // Add the jobs as a response.
    $this->refreshVariables();
    $orders = variable_get('tmgmt_mygengo_test_orders', array());
    $order_id = key($orders);
    variable_set('tmgmt_mygengo_test_last_gengo_response', (object) array('jobs' => $orders[$order_id]));

    // Poll jobs from gengo.
    $this->drupalPost('admin/tmgmt/jobs/' . $job->tjid, array(), t('Poll translations'));
    $this->assertText(t('All available translations from Gengo have been polled.'));

    // Check the updated mappings of item 1.
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item->tjiid);
    $this->assertEqual(count($remotes), 2, '2 remotes for item 1');

    $gengo_job = $orders[$order_id][$job->tjid . '][' . $item->tjiid . '][body'];

    entity_get_controller('tmgmt_remote')->resetCache();
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item->tjiid, 'body');
    $remote = reset($remotes);
    $this->assertEqual($remote->remote_identifier_1, $order_id);
    $this->assertEqual($remote->remote_identifier_2, $gengo_job->job_id);
    $this->assertEqual($remote->word_count, $gengo_job->unit_count);
    $this->assertEqual($remote->remote_data['credits'], $gengo_job->credits);
    $this->assertEqual($remote->remote_data['tier'], $gengo_job->tier);

    // And item 2.
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item2->tjiid);
    $this->assertEqual(count($remotes), 3, '3 remotes for item 2');
    $gengo_job = $orders[$order_id][$job->tjid . '][' . $item2->tjiid . '][body'];

    entity_get_controller('tmgmt_remote')->resetCache();
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item2->tjiid, 'body');
    $remote = reset($remotes);
    $this->assertEqual($remote->remote_identifier_1, $order_id);
    $this->assertEqual($remote->remote_identifier_2, $gengo_job->job_id);
    $this->assertEqual($remote->word_count, $gengo_job->unit_count);
    $this->assertEqual($remote->remote_data['credits'], $gengo_job->credits);
    $this->assertEqual($remote->remote_data['tier'], $gengo_job->tier);
  }

  function testAvailableStatus() {
    $this->loginAsAdmin();

    // Make sure we have correct keys.
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';

    $this->translator->save();

    $job = $this->createJob();
    // Set quality to machine so it gets translated right away.
    $job->settings['quality'] = 'machine';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'subwrapper' => array(
          '#text' => 'Hello world',
          '#label' => 'Sub label 1',
        ),
      ),
    );
    $item->save();

    $job->requestTranslation();

    // Make sure machine translation was received.
    entity_get_controller('tmgmt_job_item')->resetCache();
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('mt_de_Hello world', $data['wrapper']['subwrapper']['#translation']['#text']);

    // Create another job with "same source" text. The translator service will
    // return an existing translation with status available.
    $job = $this->createJob();
    // Tell the mock service to return available translation.
    $job->settings['quality'] = 'availablestandard';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#label' => 'Text label',
        '#text' => 'Lazy-Loading Some text that has been submitted and translated.',
      ),
    );
    $item->save();

    $job->requestTranslation();

    // See if available translation from gengo has updated our translation.
    entity_get_controller('tmgmt_job_item')->resetCache();
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('Translated Some text that has been submitted and translated.', $data['wrapper']['#translation']['#text']);

  }

  /**
   * Tests that duplicated strings can be translated correctly.
   */
  function testDuplicateStrings() {
    $this->loginAsAdmin();

    // Make sure we have correct keys.
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';

    $this->translator->save();

    $job = $this->createJob();
    // Set quality to machine so it gets translated right away.
    // @todo Add tests for standard.
    $job->settings['quality'] = 'machine';
    $job->translator = $this->translator->name;
    $job->save();
    $item1 = $job->addItem('test_source', 'test', '1');
    $item1->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'duplicate1' => array(
          '#text' => 'This text is a duplicate',
          '#label' => 'Duplicate label 1',
        ),
        'duplicate2' => array(
          '#text' => 'This text is a duplicate',
          '#label' => 'Duplicate label 2',
        ),
      ),
    );
    $item1->save();
    $item2 = $job->addItem('test_source', 'test', '2');
    $item2->data = array(
      'wrapper' => array(
        '#label' => 'Parent label',
        'duplicate1' => array(
          '#text' => 'Not duplicate but same key',
          '#label' => 'Not duplicate',
        ),
        'real_duplicate' => array(
          '#text' => 'This text is a duplicate',
          '#label' => 'Duplicate label 3',
        ),
      ),
    );
    $item2->save();

    $job->requestTranslation();

    // Make sure the duplicated and not duplicated texts are translated.
    entity_get_controller('tmgmt_job_item')->resetCache();
    list($item1, $item2) = array_values($job->getItems());

    // Item 1.
    $this->assertTrue($item1->isNeedsReview());
    $data = $item1->getData();
    $this->assertEqual('mt_de_This text is a duplicate', $data['wrapper']['duplicate1']['#translation']['#text']);
    $this->assertEqual('mt_de_This text is a duplicate', $data['wrapper']['duplicate2']['#translation']['#text']);

    // Item 2.
    $data = $item2->getData();
    $this->assertTrue($item2->isNeedsReview());
    $this->assertEqual('mt_de_This text is a duplicate', $data['wrapper']['real_duplicate']['#translation']['#text']);
    $this->assertEqual('mt_de_Not duplicate but same key', $data['wrapper']['duplicate1']['#translation']['#text']);
  }

  function testComments() {
    $this->loginAsAdmin();

    // Create job with two job items.

    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';
    $this->translator->save();
    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'title' => array(
        '#text' => 'Hello world',
        '#label' => 'Title',
      ),
      'body' => array(
        '#text' => 'This is some testing content',
        '#label' => 'Body',
      ),
    );
    $item->save();
    $item = $job->addItem('test_source', 'test', '2');
    $item->data = array(
      'title' => array(
        '#text' => 'Nice day',
        '#label' => 'Title',
      ),
      'body' => array(
        '#text' => 'It is nice day out there',
        '#label' => 'Body',
      ),
    );
    $item->save();

    // Request translation which also must create remote job mappings.
    $job->requestTranslation();

    // Get mapping for first data item of second job item -> Title "Nice day".
    $remotes = entity_get_controller('tmgmt_remote')->loadByLocalData($job->tjid, $item->tjiid, 'title');
    $remote = reset($remotes);

    $this->drupalPostAJAX('admin/tmgmt/items/' . $item->tjiid, array(), array($remote->remote_identifier_2 . '_comment_form' => '✉'));
    $this->assertText(t('New comment'));
    $comment = $this->randomName();
    $this->drupalPostAJAX(NULL, array($remote->remote_identifier_2 . '_comment' => $comment), array($remote->remote_identifier_2 . '_submit' => t('Submit comment')));

    // Reload the review form again and check if comment text is present.
    $this->drupalGet('admin/tmgmt/items/' . $item->tjiid);
    $this->assertText($comment);

    // Put first data item (Title "Nice day") into translated status so we can
    // request a revision.
    /* @var TMGMTMyGengoTranslatorPluginController $plugin */
    $plugin = $job->getTranslatorController();
    $data = new stdClass();
    $data->status = 'reviewable';
    $data->body_tgt = 'Nice day translated';
    $key = $item->tjiid . '][' . $remote->data_item_key;
    $plugin->saveTranslation($job, $key, $data);

    // Request a review.
    $comment = $this->randomName();
    $this->drupalPostAJAX('admin/tmgmt/items/' . $item->tjiid, array(), array($remote->remote_identifier_2 . '_revision_form' => '✍'));
    $this->drupalPostAJAX(NULL, array($remote->remote_identifier_2 . '_comment' => $comment), array($remote->remote_identifier_2 . '_submit' => t('Request revision')));

    $job = tmgmt_job_load($job->tjid);
    $data = $job->getData(tmgmt_ensure_keys_array($key));
    // Test the data item status - should be back to pending.
    $this->assertEqual($data[$item->tjiid]['#status'], TMGMT_DATA_ITEM_STATE_PENDING);
    // Reload the review form again and check if comment text is present.
    $this->drupalGet('admin/tmgmt/items/' . $item->tjiid);
    $this->assertText($comment);
  }

  function testPollJob() {
    $this->loginAsAdmin();
    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';
    $this->translator->save();
    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'title' => array(
        '#text' => 'Hello world',
        '#label' => 'Title',
      ),
      'body' => array(
        '#text' => 'This is some testing content',
        '#label' => 'Body',
      ),
    );
    $item->save();

    $job->requestTranslation();
    $this->refreshVariables();

    // Load fake gengo response and simulate the that the title job
    // gets translated.
    $data = variable_get('tmgmt_mygengo_test_last_gengo_response');
    $key = $job->tjid . '][' . $item->tjiid . '][title';
    $data->jobs[$key]->status = 'approved';
    $data->jobs[$key]->body_tgt = 'Title translated';
    variable_set('tmgmt_mygengo_test_last_gengo_response', $data);

    // Poll jobs from gengo.
    $this->drupalPost('admin/tmgmt/jobs/' . $job->tjid, array(), t('Poll translations'));
    $this->assertText(t('All available translations from Gengo have been polled.'));

    // Reload item data.
    entity_get_controller('tmgmt_job_item')->resetCache();
    $item = tmgmt_job_item_load($item->tjiid);
    $item_data = $item->getData();

    // Title should be translated by now.
    $this->assertEqual($item_data['title']['#translation']['#text'], 'Title translated');
    $this->assertEqual($item_data['title']['#status'], TMGMT_DATA_ITEM_STATE_TRANSLATED);
    // Body should be untouched.
    $this->assertTrue(empty($item_data['body']['#translation']));
    $this->assertEqual($item_data['body']['#status'], TMGMT_DATA_ITEM_STATE_PENDING);
  }

  function testGengoCheckoutForm() {
    $this->loginAsAdmin();

    $this->translator->settings['api_public_key'] = 'correct key';
    $this->translator->settings['api_private_key'] = 'correct key';
    $this->translator->save();
    $job = $this->createJob();
    $job->settings['quality'] = 'standard';
    $job->translator = $this->translator->name;
    $job->save();
    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'title' => array(
        '#text' => 'Hello world',
        '#label' => 'Title',
      ),
      'body' => array(
        '#text' => 'This is some testing content',
        '#label' => 'Body',
      ),
    );
    $item->save();

    $this->drupalGet('admin/tmgmt/jobs/' . $job->tjid);
    $needed_credits = $this->xpath('//div[@id=:id]', array(':id' => 'edit-settings-quote-needed-credits'));
    // The quote service returns two jobs each worth 2.
    $this->assertTrue(strpos($needed_credits[0]->asXML(), '4') !== FALSE);

    $word_count = $this->xpath('//div[@id=:id]', array(':id' => 'edit-settings-quote-word-count'));
    // The quote service returns two jobs each having 2 words.
    $this->assertTrue(strpos($word_count[0]->asXML(), '4') !== FALSE);

    $remaining_credit = $this->xpath('//div[@id=:id]', array(':id' => 'edit-settings-quote-remaining-credits'));
    // The account balance service returns static value of 25.32 USD
    $this->assertTrue(strpos($remaining_credit[0]->asXML(), '25.32 USD') !== FALSE);

    $eta = $this->xpath('//div[@id=:id]', array(':id' => 'edit-settings-quote-eta'));
    // The quote service returns ETA of now + one day.
    $out = $eta[0]->asXML();
    // Check both cases to prevent case when we are here at the minute border
    // and one second ahead of the page render.
    $check_1 = strpos($out, format_date(time() + 60*60*24, "long")) !== FALSE;
    $check_2 = strpos($out, format_date((time() + 60*60*24) - 1, "long")) !== FALSE;
    $this->assertTrue($check_1 || $check_2);

  }
}
