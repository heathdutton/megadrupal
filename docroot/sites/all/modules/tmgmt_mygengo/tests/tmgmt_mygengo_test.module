<?php

/**
 * @file
 * Module file of the translation management Gengo test module.
 */

/**
 * Implements hook_menu().
 */
function tmgmt_mygengo_test_menu() {
  $items['tmgmt_mygengo_mock/v2/translate/job/%'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_job',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/jobs/%'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_jobs_get',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/order/%'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_order_get',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/job/%/comment'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_comment_create',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/job/%/comments'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_comments_get',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/jobs'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_translate',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/account/balance'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_account_balance',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/service/languages'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_get_languages',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/service/language_pairs'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_get_language_pairs',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['tmgmt_mygengo_mock/v2/translate/service/quote'] = array(
    'page callback' => 'tmgmt_mygengo_test_service_get_quote',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Mock service - Job PUT - used for job review.
 *
 * @param int $gengo_job_id
 *   Gengo job id.
 */
function tmgmt_mygengo_test_service_job($gengo_job_id) {
  $data = array();
  parse_str(file_get_contents('php://input'), $data);

  $data = drupal_json_decode($data['data']);

  if ($data['action'] == 'revise') {

    $comment = new stdClass();
    $comment->body = $data['comment'];
    $comment->ctime = REQUEST_TIME;
    $comment->author = 'yogi bear';

    $comments = variable_get('tmgmt_mygengo_test_comments', array());
    $comments[$gengo_job_id][] = $comment;
    variable_set('tmgmt_mygengo_test_comments', $comments);
  }

  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => '',
  ));
}

/**
 * Mock service to return previously submitted jobs.
 */
function tmgmt_mygengo_test_service_jobs_get() {
  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => variable_get('tmgmt_mygengo_test_last_gengo_response'),
  ));
}

/**
 * Mock service to return information about an order.
 */
function tmgmt_mygengo_test_service_order_get($order_id) {
  debug($order_id);
  $orders = variable_get('tmgmt_mygengo_test_orders', array());
  debug($orders[$order_id]);
  if (isset($orders[$order_id])) {
    $order = (object) array(
      'order_id' => $order_id,
      'jobs_available' => array(),
      'jobs_queued' => 0,
      'total_jobs' => count($orders[$order_id]),
    );
    foreach ($orders[$order_id] as $job) {
      $order->jobs_available[] = $job->job_id;
    }
    drupal_json_output(array(
      'opstat' => 'ok',
      'response' => array('order' => $order),
    ));
    return;
  }
  drupal_json_output(array(
    'opstat' => 'error',
    'err' => array('code' => 123, 'msg' => 'Order id ' . $order_id . ' does not exist'),
  ));
}

/**
 * Mock service call to create a comment.
 *
 * @param $gengo_job_id
 *   Remote job id.
 */
function tmgmt_mygengo_test_service_comment_create($gengo_job_id) {
  $comment = new stdClass();
  $data = drupal_json_decode($_POST['data']);
  $comment->body = $data['body'];
  $comment->ctime = REQUEST_TIME;
  $comment->author = 'yogi bear';

  $comments = variable_get('tmgmt_mygengo_test_comments', array());
  $comments[$gengo_job_id][] = $comment;
  variable_set('tmgmt_mygengo_test_comments', $comments);

  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => array(),
  ));
}

/**
 * Mock service call to fetch remote comments.
 *
 * @param $gengo_job_id
 *   Remote job id.
 */
function tmgmt_mygengo_test_service_comments_get($gengo_job_id) {
  $response = new stdClass();
  $comments = variable_get('tmgmt_mygengo_test_comments', array());
  if (!isset($comments[$gengo_job_id])) {
    $comments[$gengo_job_id] = array();
  }

  $response->thread = $comments[$gengo_job_id];

  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $response,
  ));
}

/**
 * Page callback account balance.
 */
function tmgmt_mygengo_test_service_account_balance() {
  $balance = new stdClass();
  $balance->credits = 25.32;
  $balance->currency = 'USD';
  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $balance,
  ));
}

/**
 * Page callback for getting the supported languages.
 */
function tmgmt_mygengo_test_service_get_languages() {

  $languages = array(
    'de' => array(
      'lc' => 'de',
    ),
    'en' => array(
      'lc' => 'en',
    ),
    'es' => array(
      'lc' => 'es',
    ),
  );

  // Remote source language.
  unset($languages[$_GET['lc_src']]);

  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $languages,
  ));
}

/**
 * Page callback for getting language pairs.
 */
function tmgmt_mygengo_test_service_get_language_pairs() {

  $pairs = array();

  $pair = new stdClass();
  $pair->lc_src = 'en';
  $pair->lc_tgt = 'de';
  $pair->tier = 'standard';
  $pair->unit_price = '0.0500';
  $pair->currency = 'USD';
  $pairs[] = $pair;

  $pair->tier = 'pro';
  $pair->unit_price = '0.1000';
  $pairs[] = $pair;

  $pair->tier = 'ultra';
  $pair->unit_price = '0.1500';
  $pairs[] = $pair;

  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $pairs,
  ));
}

/**
 * Page callback for getting a jobs quote.
 *
 * Note that this mock service returns just static info. There is no logic
 * that would somehow react on what has been submitted as job data.
 */
function tmgmt_mygengo_test_service_get_quote() {

  $quote = new stdClass();
  $quote->jobs = array();

  $quote->jobs[0] = new stdClass();
  $quote->jobs[0]->unit_count = 2;
  $quote->jobs[0]->credits = 2;
  $quote->jobs[0]->eta = 60*60*24; // One day.
  $quote->jobs[0]->type = 'text';
  $quote->jobs[0]->currency = 'USD';

  $quote->jobs[1] = new stdClass();
  $quote->jobs[1]->unit_count = 2;
  $quote->jobs[1]->credits = 2;
  $quote->jobs[1]->eta = 60*60*24; // One day.
  $quote->jobs[1]->type = 'text';
  $quote->jobs[1]->currency = 'USD';

  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $quote,
  ));
}

/*
 * Gengo mock service.
 */
function tmgmt_mygengo_test_service_translate() {

  tmgmt_mygengo_test_authenticate();

  $response = new stdClass();

  $sources = array();

  // Use case when jobs have been submitted to gengo.
  if (!empty($_POST['data'])) {
    $data = json_decode($_POST['data']);

    foreach ($data->jobs as $id => $job) {

      // Simulate API behavior to ignore multiple jobs with the same source.
      if (array_search($job->body_src, $sources)) {
        continue;
      }

      // Keep track of source strings.
      $sources[$id] = $job->body_src;

      // Machine translation - simulate returning translation job right away.
      if ($job->tier == 'machine') {
        $body_tgt = 'mt_de_' . $job->body_src;
        $response->jobs[$id] = tmgmt_mygengo_test_build_response_job($job->body_src, $body_tgt, 'approved', $job->tier, $job->custom_data, $job->slug, $job->position);
      }
      // Hack to tell mock service that translation should be returned right
      // away as available.
      elseif (strpos($job->body_src, 'Lazy-Loading') !== FALSE) {
        $body_tgt = str_replace('Lazy-Loading', 'Translated', $job->body_src);
        $response->jobs[$id] = tmgmt_mygengo_test_build_response_job($job->body_src, $body_tgt, 'available', $job->tier, $job->custom_data, $job->slug, $job->position);
      }
      // Otherwise we have submitted a job, however just return the job object
      // without translation and in pending state.
      else {
        $response->jobs[$id] = tmgmt_mygengo_test_build_response_job($job->body_src, NULL, 'pending', $job->tier, $job->custom_data, $job->slug, $job->position);
      }
    }

    // If order mode is enabled, return an order_id instead of the jobs.
    if (variable_get('tmgmt_mygengo_test_order_mode')) {
      $orders = variable_get('tmgmt_mygengo_test_orders', array());
      if (empty($orders)) {
        $order_id = 1;
      }
      else {
        $order_id = count($orders) + 1;
      }
      $orders[$order_id] = $response->jobs;
      debug($orders);
      variable_set('tmgmt_mygengo_test_orders', $orders);
      unset($response->jobs);
      $response->order_id = $order_id;
    }

    // Save the response so that it can be further examined.
    variable_set('tmgmt_mygengo_test_last_gengo_response', $response);
  }

  // @todo To fix tests I believe this has to be changed in some cases. Just
  //   return the $response not the structure.
  drupal_json_output(array(
    'opstat' => 'ok',
    'response' => $response,
  ));
}

/**
 * Helper function to build gengo job.
 */
function tmgmt_mygengo_test_build_response_job($body_src, $body_tgt, $status, $tier, $custom_data, $slug, $position = 0) {

  $job = new stdClass();
  $job->lc_src = 'en';
  $job->lc_tgt = 'de';
  $job->body_src = $body_src;
  $job->unit_count = str_word_count($job->body_src);
  // Fake credit calculation.
  $job->credits = $job->unit_count * .4;
  $job->status = $status;
  $job->tier = $tier;
  $job->custom_data = $custom_data;
  $job->slug = $slug;
  $job->job_id = rand(1, 100);
  $job->status = NULL;
  $job->position = $position;

  if (!empty($body_tgt)) {
    $job->status = 'approved';
  }

  // Add translation if available.
  if (!empty($body_tgt)) {
    $job->body_tgt = $body_tgt;
  }

  return $job;
}

/**
 * Helper function to run authentication.
 */
function tmgmt_mygengo_test_authenticate() {

  if ($_REQUEST['api_key'] == 'correct key') {
    $sig = hash_hmac('sha1', $_REQUEST['ts'], 'correct key');
    if ($sig == $_REQUEST['api_sig']) {
      return;
    }
  }

  drupal_json_output(array(
    'opstat' => 'failure',
    // We do not really need a response here.
    'response' => '',
    'err' => array(array((object)array('msg' => 'Authentication failure', 'code' => 100))),
  ));

  // In case of error we do not want to continue.
  drupal_exit();
}
