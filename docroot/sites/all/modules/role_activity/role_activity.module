<?php

/**
 * @file
 * Enables the activity of specific user roles to be tracked and logged.
 */

/**
 * Implements hook_menu().
 */
function role_activity_menu() {
  $items['admin/config/system/role_activity'] = array(
    'title' => 'User activity logging settings',
    'description' => 'Settings for logging of activity for users in certain roles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_activity_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'role_activity.admin.inc',
  );
  $items['admin/reports/role_activity'] = array(
    'title' => 'User activity log',
    'description' => 'User activity log in chronological order, most recent first.',
    'page callback' => 'role_activity_log',
    'access arguments' => array('view role activity'),
    'file' => 'role_activity.pages.inc',
  );
  $items['admin/reports/role_activity/list'] = array(
    'title' => 'Recent activity',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/reports/role_activity/top_users'] = array(
    'title' => 'Top users',
    'page callback' => 'role_activity_top_users',
    'access arguments' => array('view role activity'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'role_activity.pages.inc',
  );
  $items['admin/reports/role_activity/user/%user'] = array(
    'title' => 'Activity by user',
    'page callback' => 'role_activity_by_user',
    'page arguments' => array(4),
    'access arguments' => array('view role activity'),
    'type' => MENU_CALLBACK,
    'file' => 'role_activity.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function role_activity_permission() {
  return array(
    'view role activity' => array(
      'title' => t('View role activity'),
    ),
  );
}

/**
 * Checks whether the given user has any of the roles we shold monitor.
 */
function role_activity_check_role($account) {
  $roles = array_filter(variable_get('role_activity', array()));

  if (empty($roles)) {
    return FALSE;
  }

  if (!empty($account->uid) && in_array(DRUPAL_AUTHENTICATED_RID, $roles)) {
    return TRUE;
  }

  return array_intersect_key($account->roles, $roles);
}

/**
 * Implementation of hook_watchdog().
 */
function role_activity_watchdog(array $log_entry) {
  if (!role_activity_check_role($log_entry['user'])) {
    // If user is not among the roles we should check.
    return;
  }
  if (!($action = role_activity_parse($log_entry['type'], $log_entry['message']))) {
    // It the parser did not find that we should the action, skip.
    return;
  }

  role_activity_write($log_entry, $action);
}

/**
 * Parses the watchdog messages for certain patterns.
 */
function role_activity_parse($type = '', $message = '') {
  $action = '';

  switch ($type) {
    case 'content':
      if (preg_match('/@type: updated/i', $message)) {
        $action = t('Content updated');
      }
      elseif (preg_match('/@type: deleted/i', $message)) {
        $action = t('Content deleted');
      }
      elseif (preg_match('/Comment posted/i', $message)) {
        $action = t('Comment updated or posted');
      }
      elseif (preg_match('/Deleted comment/i', $message)) {
        $action = t('Comment deleted');
      }
      break;

    case 'user':
      if (preg_match('/Session opened/i', $message)) {
        $action = t('User login');
      }
      elseif (preg_match('/Session closed/i', $message)) {
        $action = t('User logoff');
      }
      elseif (preg_match('/Deleted user/i', $message)) {
        $action = t('User deleted');
      }
      break;

    case 'aggregator':
      if (preg_match('/Feed %feed added/i', $message)) {
        $action = t('Feed added');
      }
      elseif (preg_match('/Feed %feed deleted/i', $message)) {
        $action = t('Feed deleted');
      }
      elseif (preg_match('/Updated URL for feed/i', $message)) {
        $action = t('Feed updated');
      }
      break;

    case 'sshkey':
      if (strpos($message, 'Added new SSH key') !== FALSE) {
        $action = t('SSH key added');
      }
      elseif (strpos($message, 'Updated SSH key') !== FALSE) {
        $action = t('SSH key updated');
      }
      elseif (strpos($message, 'Deleted SSH key') !== FALSE) {
        $action = t('SSH key deleted');
      }
  }

  return $action;
}

/**
 * Stores role activity information.
 */
function role_activity_write($log, $action) {
  $id = db_insert('role_activity')
  ->fields(array(
    'uid' => $log['user']->uid,
    'timestamp' => $log['timestamp'],
    'type' => substr($log['type'], 0, 64),
    'referer' => substr($log['referer'], 0, 128),
    'ip' => $log['ip'],
    'action' => substr($action, 0, 256),
    'link' => isset($log['link']) ? substr($log['link'], 0, 255) : '',
    'uri' => substr($log['request_uri'], 0, 255),
    'message' => t($log['message'], $log['variables']),
  ))
  ->execute();
}

/**
 * Provides a short title for linking to the related path.
 */
function _role_activity_format_path($path, $width = 32) {
  global $base_url;
  $short_path = preg_replace('?^' . $base_url . '?', '', $path);
  $short_title = truncate_utf8($short_path, $width, FALSE, TRUE);
  return l($short_title, $path, array('attributes' => array('title' => $path)));
}
