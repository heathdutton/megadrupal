<?php
/**
 * @file
 * Main file for the CPV module with some utility functions.
 */

/**
 * Implementation of hook_views_api().
 */
function cpv_views_api() {
  return array(
    'api' => '3.0-alpha1',
  );
}


/**
 * Implements hook_menu().
 */
function cpv_menu() {
  $items['admin/structure/views/settings/cpv'] = array(
    'title' => 'Code per Views Page Display',
    'description' => 'Configure Code per Views Page Display settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cpv_settings'),
    'access arguments' => array('administer views'),
    'file' => 'cpv.admin.inc',
  );

  // CPV settings are only needed if code can be served from the file system.
  return $items;
}

/**
 * Validates CSS or Javascript.
 *
 * Validates that the CSS or JS code doesn't start with a style or script tag,
 * respectively.
 *
 * @param $data
 *   A string containing the CSS or JS code.
 * @param $type
 *   A string containing either 'css' or 'js' indicating the type of code.
 *
 * @return
 *   TRUE if the code is valid.
 */
function cpv_validate_code($data, $type) {
  $patterns = array(
    'css' => '~<\s*\/?\s*style\s*.*?>~i',
    'js' => '~<\s*\/?\s*script\s*.*?>~i',
  );
  return preg_match($patterns[$type], $data);
}

/**
 * Moves a directory to another directory.
 *
 * Assumes no sub-directories exist in the source directory and overwrites
 * existing files in the destination directory.
 *
 * @param $source
 *   A string containing the source directory, without trailing slash. This must
 *   be a stream wrapper URI.
 * @param $destination
 *   A string containing the destination directory, without trailing slash.
 *   This must be a stream wrapper URI.
 *
 * @return
 *   TRUE on success, or FALSE otherwise.
 */
function cpv_dir_unmanaged_move($source, $destination) {
  $result = TRUE;
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY);
  $files = file_scan_directory($source, '/.*/');
  foreach($files as $file) {
    file_unmanaged_move($source . '/' . $file->filename,
                        $destination . '/' . $file->filename,
                        FILE_EXISTS_REPLACE)
      or $result = FALSE;
  }
  file_unmanaged_delete_recursive($source) or $result = FALSE;
  return $result;
}

/**
 * Saves a CPV-managed file is the new data isn't empty.
 *
 * If the file already exists, it is overwritten.
 *
 * @param $data
 *   A string containing the new file's contents.
 * @param $type
 *   A string containing the filename.
 * @param $path
 *   (optional) A string containing the destination path. Defaults to the path
 *   set in the CPV admin config setting form field, cpv_save.
 *
 * @return
 *   TRUE if the file was created, or FALSE if the data was empty in the event
 *   of an error.
 */
function cpv_save_file($data, $filename, $path = NULL) {
  if (!drupal_strlen(trim($data))) {
    return FALSE;
  }
  if (!isset($path)) {
    $path = variable_get('cpv_path', 'public://cpv');
  }
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  return file_unmanaged_save_data($data, $path . '/' . $filename, FILE_EXISTS_REPLACE);
}

/**
 * Deletes a CPV-managed file if it exists.
 *
 * @param $data
 *   A string containing the new file's contents.
 * @param $type
 *   A string containing the filename.
 *
 * @return
 *   TRUE if the file was deleted or did not exist, or FALSE in the event of an
 *   error.
 */
function cpv_delete_file($filename) {
  $path = variable_get('cpv_path', 'public://cpv') . '/' . $filename;
  return file_unmanaged_delete($path);
}