<?php

/**
 * @file
 * Module file for the silverpop module.
 */

/**
 * Implements hook_menu().
 */
function silverpop_menu() {
  $items['admin/config/services/silverpop'] = array(
    'title' => 'Silverpop settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('silverpop_admin'),
    'access arguments' => array('administer silverpop settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'silverpop.forms.admin.inc',
    'description' => 'Manage Silverpop settings.'
  );

  $items['admin/config/services/silverpop/general'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/silverpop/add'] = array(
    'title' => 'Add Silverpop settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('silverpop_settings_form'),
    'access arguments' => array('administer silverpop settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'silverpop.forms.admin.inc',
  );

  $items['admin/config/services/silverpop/%/delete'] = array(
    'title' => 'Delete entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('silverpop_settings_delete_confirm', 4),
    'access arguments' => array('administer silverpop settings'),
    'type' => MENU_CALLBACK,
    'file' => 'silverpop.forms.admin.inc',
  );

  $items['admin/config/services/silverpop/%/edit'] = array(
    'title' => 'Edit entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('silverpop_settings_form', 4),
    'access arguments' => array('administer silverpop settings'),
    'type' => MENU_CALLBACK,
    'file' => 'silverpop.forms.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function silverpop_permission() {
  return array(
    'administer silverpop settings' => array(
      'title' => t('Administer Silverpop settings'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function silverpop_init() {
  $domains = variable_get('silverpop_tracked_domains', '');

  // Add Silverpop page tracking.
  if ($domains) {
    $meta = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'com.silverpop.brandeddomains',
        'content' => $domains,
      ),
    );

    drupal_add_html_head($meta, 'silverpop_webtracking_metatag');
  }

  $tracking_source = variable_get('silverpop_script_src', '');

  if ($tracking_source) {
    drupal_add_js($tracking_source, 'external');
  }

  // Add event tracking.
  $result = db_query("SELECT * FROM {silverpop_settings}");

  foreach ($result as $row) {
    $event_name = check_plain($row->event_name);
    $event_type = check_plain($row->event_type);
    $css_selector = check_plain($row->css_selector);

    $tracking_js = "return ewt.trackLink({name:'$event_name',type:'$event_type',link:this });";

    drupal_add_js("jQuery('$css_selector').click(function () { $tracking_js });",
      array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
    );
  }
}

/**
 * Silverpop get password.
 *
 * @param boolean $decrypt
 *   Decrypt password returned if TRUE.
 *
 * @return string
 */
function silverpop_get_password($decrypt = TRUE) {
  $password = variable_get('silverpop_password', '');

  // If mcrypt is being used we need to decrypt the password.
  if ($password AND function_exists('mcrypt_encrypt') AND $decrypt) {
    $key = drupal_substr(drupal_get_hash_salt(), 0, 32);
    $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    $ciphertext_dec = base64_decode($password);
    $plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $ciphertext_dec, MCRYPT_MODE_ECB, $iv);

    return rtrim($plaintext_dec, "\0");
  }
  elseif ($password) {
    return $password;
  }
  else {
    return '';
  }
}

/**
 * Silverpop Set Password.
 *
 * @param string $password
 */
function silverpop_set_password($password='') {
  // If mcrypt is available we will encrypt the password in the database.
  if ($password AND function_exists('mcrypt_encrypt')) {
    $key = drupal_substr(drupal_get_hash_salt(), 0, 32);
    $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $password, MCRYPT_MODE_ECB, $iv);
    $ciphertext_base64 = base64_encode($ciphertext);

    // Store encrypted password.
    return $ciphertext_base64;
  }
  // Otherwise it will be in plain text
  elseif ($password) {
    return $password;
  }
}
