<?php

/**
 * @file
 * Installation file for the Commerce BitPay payment module.
 */

/**
 * Implements hook_requirements().
 *
 * Verifies the cURL PHP library is available.
 */
function commerce_bitpay_requirements($phase) {
  $t = get_t();
  $requirements = array();

  // BitPay's provided API code requires cURL.
  if (!function_exists('curl_version')) {
    $requirements['commerce_bitpay_curl'] = array(
      'title' => $t('cURL'),
      'value' => $t('Not found'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('Commerce BitPay requires the PHP !curl_url library.', array('!curl_url' => l($t('cURL'), 'http://www.php.net/manual/en/book.curl.php'))),
    );
  }

  if ($phase == 'runtime') {
    // Check if the enabled currencies are supported by BitPay.
    if (request_path() == 'admin/reports/status') {
      /*
      If you do too many rate API requests per hour, they could restrict
      your access to the API. This could show as:

      HTTP request failed! HTTP/1.1 520 Origin Error

      Without the limiter to only execute this on admin/reports/status, this
      code runs on most administration pageloads as part of checking for status
      errors; BitPay thinks that's abusive.
      */
      $bitpay_currencies = commerce_bitpay_currencies();

      // This if statement will fail if bitpay.com is down.
      if ($bitpay_currencies !== FALSE && is_array($bitpay_currencies)) {
        $commerce_currencies = commerce_currencies(TRUE);
        $commerce_default_currency = commerce_default_currency();
        foreach ($commerce_currencies as $symbol => $details) {
          if (!in_array($symbol, array_keys($bitpay_currencies)) && $symbol != 'BTC') {
            $unsupported_currency[$symbol] = $details;
          }
          elseif ($commerce_default_currency == $symbol) {
            $conversion_rate = $t('1 BTC = @d @code', array('@d' => $bitpay_currencies[$symbol]['rate'], '@code' => $symbol));
          }
        }
        if (empty($unsupported_currency)) {
          $requirements['commerce_bitpay_supported_currencies'] = array(
            'title' => $t('BitPay Bitcoin exchange'),
            'value' => isset($conversion_rate) ? $conversion_rate : $t('Supported'),
            'severity' => REQUIREMENT_INFO,
          );
        }
        else {
          $requirements['commerce_bitpay_supported_currencies'] = array(
            'title' => $t('BitPay currency support'),
            'value' => $t('Unsupported: @list', array('@list' => implode(', ', array_keys($unsupported_currency)))),
            'severity' => REQUIREMENT_WARNING,
            'description' => $t('!bitpay_currency_support_url', array('!bitpay_currency_support_url' => l($t('BitPay supports a limited subset of currencies.'), 'https://bitpay.com/bitcoin-exchange-rates'))),
          );
        }
      }
    }

    // Warn if the BitPay library isn't installed.
    $library = libraries_detect('php-client');
    if (empty($library['installed'])) {
      $requirements['commerce_bitpay_library'] = array(
        'title' => $t('BitPay PHP library'),
        'value' => $t('Not found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('Commerce BitPay requires copying the !support_url to the libraries directory on the web server: sites/all/libraries/php-client or sites/{domain}/libraries/php-client.', array('!support_url' => l($t('BitPay php-client library'), 'https://github.com/bitpay/php-client'))),
      );
    }

    // Check to see if the Rule has been setup yet. Yes, this is imprecise.
    $result = db_select('rules_config', 'r')
      ->condition('r.data', '%apiKey%', 'LIKE')
      ->condition('r.data', '%bitpay%', 'LIKE')
      ->condition('r.module', 'commerce_payment')
      ->condition('r.plugin', 'reaction rule')
      ->addTag('commerce_bitpay_apikey_requirements')
      ->countQuery()
      ->execute()
      ->fetchField();
    if (!$result) {
      $requirements['commerce_bitpay_apikey'] = array(
        'title' => $t('BitPay configuration'),
        'value' => $t('!link', array('!link' => l($t('API key missing'), 'admin/commerce/config/payment-methods/manage'))),
        'severity' => REQUIREMENT_WARNING,
        'description' => $t('See https://bitpay.com/api-keys to generate an API key.'),
      );
    }

    $requirements['commerce_bitpay_donation'] = array(
      'title' => '<a href="bitcoin:1Drupa1oXCheXrbZbo6LQEu15ZNbFRGjXF">1Drupa1oXCheXrbZbo6LQEu15ZNbFRGjXF</a>',
      'description' => $t('Unlike more traditional payment modules, Commerce BitPay is not funded by Commerce Guys or BitPay. Please fund ongoing maintenance to keep the module supported and bug-free.'),
      'severity' => REQUIREMENT_INFO,
      'value' => '<script data-gittip-username="deekayen" data-gittip-widget="button" src="//gttp.co/v1.js"></script>',
    );

    global $base_url;
    if (stripos($base_url, 'https://') !== 0) {
      $requirements['commerce_bitpay_base_url_https'] = array(
        'title' => 'HTTPS support',
        'description' => $t('The base_url setting of this site requires HTTPS to automatically update transactions from successful BitPay payments.'),
        'severity' => REQUIREMENT_WARNING,
        'value' => 'Not configured',
      );
    }
  }

  return $requirements;
}

/**
 * Remove legacy variables from ihqtzup's sandbox.
 */
function commerce_bitpay_update_7100() {
  variable_del('commerce_bitpay_apikey');
  variable_del('commerce_bitpay_secret');
  variable_del('commerce_bitpay_currency');
  variable_del('commerce_bitpay_redirectURL');
  variable_del('commerce_bitpay_notificationEmail');

  drupal_set_message(t('You should re-configure your API key and currency in the payment method actions. Obsolete settings were deleted.'), 'warning');

  return array();
}

/**
 * Rebuild the menus to support order and transaction IDs in the IPN.
 */
function commerce_bitpay_update_7200() {
  menu_rebuild();
  menu_cache_clear_all();
  return array();
}
