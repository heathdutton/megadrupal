<?php
/**
 * @file
 * Code for the Showoff Feeds feature.
 */

include_once 'showoff_feeds.features.inc';
include_once 'includes/showoff_feeds.field.inc';

/**
 * Implements hook_menu();
 */
function showoff_feeds_menu() {
  $items = array();

  $vocab = taxonomy_vocabulary_machine_name_load('feeds');
  if ($vocab !== FALSE) {
    $vid = $vocab->vid;
    $items['category/add'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('showoff_feeds_category_add_form'),
      'title' => 'Add a Feed Category',
      'access arguments' => array('edit terms in ' . $vid),
      'type' => MENU_CALLBACK,
    );
    $items['feed/add'] = array(
      'title' => 'Add an RSS Feed',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('showoff_feeds_feed_add_form'),
      'access arguments' => array('edit terms in ' . $vid),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implements hook_hook_info().
 */
function showoff_feeds_hook_info() {
  return array(
    'showoff_layout_info' => array(
      'group' => 'layout_info',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function showoff_feeds_theme($existing, $type, $theme, $path) {
  return array(
    'showoff_feed' => array(
      'variables' => array(
        'feed' => NULL,
      ),
      'file' => 'includes/showoff_feeds.theme.inc',
    ),
    'showoff_layout' => array(
      'variables' => array(
        'layout' => NULL,
        'feeds' => NULL,
        'node' => NULL,
      ),
      'file' => 'includes/showoff_feeds.theme.inc',
    ),
  );
}

/**
 * Implements hook_modules_enabled().
 */
function showoff_feeds_modules_enabled($modules) {
  // Clear our cached layouts by checking all implementations and updating the DB.
  showoff_feeds_get_layouts(TRUE);
}

/**
 * Returns the specified layout.
 */
function showoff_feeds_get_layout($type) {
  $layouts = showoff_feeds_get_layouts();
  return $layouts[$type];
}

/**
 * Returns an array, keyed by type, of available layouts.
 */
function showoff_feeds_get_layouts($reset = FALSE) {
  $layouts = &drupal_static(__FUNCTION__);
  if (!isset($layouts) || $reset) {
    db_delete('showoff_layouts')
      ->execute();
    $layouts = array();
    foreach (module_implements('showoff_layout_info') as $module) {
      $func = $module . '_showoff_layout_info';
      $mod_layouts = $func();
      foreach ($mod_layouts as $type => $info) {
        $record = array(
          'type' => $type,
          'name' => check_plain($info['name']),
          'description' => check_plain($info['description']),
          'path' => check_plain($info['file']),
          'settings' => (is_array($info['regions']) ? $info['regions'] : array()),
          'module' => $module,
        );
        $layouts[$type] = $record;
        drupal_write_record('showoff_layouts', $record);
      }
    }
  }
  return $layouts;
}

function showoff_feeds_map_layouts() {
  $layouts = showoff_feeds_get_layouts();
  foreach ($layouts as $type => $info) {
    $options[$type] = $info['name'];
  }
  return $options;
}

/**
 * Implements hook_showoff_layout_info().
 */
function showoff_feeds_showoff_layout_info() {
  return array(
    'showoff_layout_simple' => array(
      'name' => 'Simple Fullscreen',
      'description' => 'Provides a basic fullscreen layout with a single feed that spans the entire screen.',
      'file' => drupal_get_path('module', 'showoff_feeds') . '/layouts/simple.inc',
      'regions' => array('feed-1'),
    ),
    'showoff_layout_advanced' => array(
      'name' => 'Advanced Splitscreen',
      'description' => 'Provides an advanced split screen layout.',
      'file' => drupal_get_path('module', 'showoff_feeds') . '/layouts/advanced.inc',
      'regions' => array('feed-1', 'feed-2'),
    ),
  );
}

/**
 * Form builder to add a feed category term.
 */
function showoff_feeds_category_add_form($form, &$form_state) {
  $form['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a Feed Category'),
    '#collapsible' => FALSE,
  );
  $form['info']['category_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Category Name',
    '#description' => t('A name used to categorize images or videos.'),
    '#required' => TRUE,
  );
  $form['info']['actions'] = array(
    '#type' => 'actions',
    'cancel' => array(
      '#markup' => l(t('Cancel'), '<front>'),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Add Feed Category'),
    ),
  );
  return $form;
}

/**
 * Add our new feed category term to the vocabulary.
 */
function showoff_feeds_category_add_form_submit($form, &$form_state) {
  $new_term = $form_state['values']['category_name'];
  $vocab = taxonomy_vocabulary_machine_name_load('feeds');
  if ($vocab !== FALSE) {
    $term = new stdClass();
    $term->vid = $vocab->vid;
    $term->name = check_plain($new_term);
    taxonomy_term_save($term);
    drupal_set_message(t('The category <em>!feed</em> has been created.', array('!feed' => $new_term)));
  }
  $form_state['redirect'] = 'feeds';
}

/**
 * Form builder to add a new RSS feed.
 */
function showoff_feeds_feed_add_form($form, &$form_state) {
  $form['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add an RSS Feed'),
    '#collapsible' => FALSE,
  );
  $form['info']['feed_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Feed Name'),
    '#description' => t('A name by which to remember the feed. The auto-generated machine name will be used as the feed\'s URL.'),
    '#required' => TRUE,
  );
  $form['info']['feed_machine_name'] = array(
    '#type' => 'machine_name',
    '#title' => t('Feed machine name'),
    '#maxlength' => 30,
    '#machine_name' => array(
      'exists' => 'showoff_feeds_feed_exists',
      'source' => array('info', 'feed_name'),
    ),
  );
  $form['info']['feed_categories'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Feed Categories'),
    '#description' => t('The terms that will be used to determine which images and videos are displayed in this feed.'),
    '#required' => TRUE,
    '#options' => showoff_feeds_feed_category_terms(),
  );
  $form['info']['actions'] = array(
    '#type' => 'actions',
    'cancel' => array(
      '#markup' => l(t('Cancel'), '<front>'),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Add RSS Feed'),
    ),
  );
  return $form;
}

/**
 * Create the RSS feed on the feeds view as a new display.
 */
function showoff_feeds_feed_add_form_submit($form, &$form_state) {
  $view = views_get_view('feeds');
  if ($view !== NULL) {
    $display_name = $form_state['values']['feed_name'];
    $display_id = $form_state['values']['feed_machine_name'];
    $terms = $form_state['values']['feed_categories'];
    $handler = $view->new_display('feed', $display_name, $display_id);
    $handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
    $handler->display->display_options['pager']['type'] = 'none';
    $handler->display->display_options['pager']['options']['offset'] = '0';
    $handler->display->display_options['style_plugin'] = 'rss';
    $handler->display->display_options['row_plugin'] = 'node_rss';
    $handler->display->display_options['row_options']['item_length'] = 'rss';
    $handler->display->display_options['defaults']['filter_groups'] = FALSE;
    $handler->display->display_options['defaults']['filters'] = FALSE;
    /* Filter criterion: Content: Published */
    $handler->display->display_options['filters']['status']['id'] = 'status';
    $handler->display->display_options['filters']['status']['table'] = 'node';
    $handler->display->display_options['filters']['status']['field'] = 'status';
    $handler->display->display_options['filters']['status']['value'] = 1;
    $handler->display->display_options['filters']['status']['group'] = 1;
    $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
    /* Filter criterion: Content: Type */
    $handler->display->display_options['filters']['type']['id'] = 'type';
    $handler->display->display_options['filters']['type']['table'] = 'node';
    $handler->display->display_options['filters']['type']['field'] = 'type';
    $handler->display->display_options['filters']['type']['value'] = array(
      'image' => 'image',
      'video' => 'video',
    );
    $handler->display->display_options['filters']['type']['group'] = 1;
    /* Filter criterion: Content: Feeds (field_feed) */
    $handler->display->display_options['filters']['field_feed_tid']['id'] = 'field_feed_tid';
    $handler->display->display_options['filters']['field_feed_tid']['table'] = 'field_data_field_feed';
    $handler->display->display_options['filters']['field_feed_tid']['field'] = 'field_feed_tid';
    $handler->display->display_options['filters']['field_feed_tid']['value'] = $terms;
    $handler->display->display_options['filters']['field_feed_tid']['group'] = 1;
    $handler->display->display_options['filters']['field_feed_tid']['type'] = 'select';
    $handler->display->display_options['filters']['field_feed_tid']['vocabulary'] = 'feeds';
    /* Filter criterion: Content: Date -  start date (field_date) */
    $handler->display->display_options['filters']['field_date_value']['id'] = 'field_date_value';
    $handler->display->display_options['filters']['field_date_value']['table'] = 'field_data_field_date';
    $handler->display->display_options['filters']['field_date_value']['field'] = 'field_date_value';
    $handler->display->display_options['filters']['field_date_value']['operator'] = '<=';
    $handler->display->display_options['filters']['field_date_value']['group'] = 1;
    $handler->display->display_options['filters']['field_date_value']['granularity'] = 'hour';
    $handler->display->display_options['filters']['field_date_value']['default_date'] = 'now';
    /* Filter criterion: Content: Date - end date (field_date:value2) */
    $handler->display->display_options['filters']['field_date_value2']['id'] = 'field_date_value2';
    $handler->display->display_options['filters']['field_date_value2']['table'] = 'field_data_field_date';
    $handler->display->display_options['filters']['field_date_value2']['field'] = 'field_date_value2';
    $handler->display->display_options['filters']['field_date_value2']['operator'] = '>';
    $handler->display->display_options['filters']['field_date_value2']['granularity'] = 'hour';
    $handler->display->display_options['filters']['field_date_value2']['default_date'] = 'now';
    $handler->display->display_options['path'] = $display_id;
    $view->save();
    drupal_set_message(t('The feed <em>!feed</em> has been created.', array('!feed' => $display_name)));
    $form_state['redirect'] = 'feeds';
  }
}

/**
 * Machine name helper function.
 */
function showoff_feeds_feed_exists($key) {
  $view = views_get_view('feeds');
  return isset($view->display[$key]);
}

/**
 * Helper function to get an associative array of terms for checkboxes.
 */
function showoff_feeds_feed_category_terms() {
  $options = array();
  $vocab = taxonomy_vocabulary_machine_name_load('feeds');
  if ($vocab !== FALSE) {
    $tree = taxonomy_get_tree($vocab->vid);
    foreach ($tree as $term) {
      $options[$term->tid] = $term->name;
    }
  }
  return $options;
}

/**
 * Implements hook_date_format_types().
 */
function showoff_feeds_date_format_types() {
  return array(
    'month_day' => t('Month and Day Only'),
  );
}

/**
 * Implements hook_date_formats().
 */
function showoff_feeds_date_formats() {
  return array(array(
    'type' => 'month_day',
    'format' => 'F j',
  ));
}
