<?php

/**
 * Implements hook_menu().
 */
function commerce_direct_buy_menu() {
  $items = array();
  
  $items['commerce-direct-buy/search'] = array(
    'title' => 'Direct buy search',
    'page callback' => 'commerce_direct_buy_search',
    'access arguments' => array('use direct buy'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_direct_buy.pages.inc',
    'file path' => drupal_get_path('module', 'commerce_direct_buy') . '/includes',
  ); 
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_direct_buy_permission() {
  return array(
    'use direct buy' => array(
      'title' => t('Use direct buy'), 
      'description' => t('Allow users to buy products directly.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 * 
 * @return 
 *   Block info array.
 * 
 */
function commerce_direct_buy_block_info() {
  $blocks = array();
  
  $blocks['commerce_direct_buy'] = array(
    'info' => t('Commerce direct buy'), 
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * @param type $delta
 *   Block delta key.
 * @return type 
 *   Block view array.
 */
function commerce_direct_buy_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'commerce_direct_buy':
      $block['subject'] = t('Direct buy');
      $block['content'] = commerce_direct_buy_block_content();
      break;
  }
  
  return $block;
}

/**
 * Block callback.
 * @return type 
 */
function commerce_direct_buy_block_content() {
  if (user_access('use direct buy')) {
    return drupal_render(drupal_get_form('commerce_direct_buy_form'));
  }
}

/**
 * Direct buy form.
 * 
 * @return 
 *   Form array.
 */
function commerce_direct_buy_form() {
  $form = array();

  $form['sku'] = array(
      '#type' => 'textfield',
      '#title' => t('Product'),
      '#required' => TRUE,
      '#autocomplete_path' => 'commerce-direct-buy/search',
  );

  $form['quantity'] = array(
      '#type' => 'textfield',
      '#title' => t('Quantity'),
      '#required' => TRUE,
      '#maxlength' => 4,
      '#size' => 4, 
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add to cart')
  );
  
  return $form;
}

/**
 * Direct buy form validation.
 */
function commerce_direct_buy_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];
  $form_state['redirect']  = array('cart');
  $result = db_select('commerce_product', 'p')
          ->fields('p', array('product_id'))
          ->condition('sku', $values['sku'], '=')
          ->execute()
          ->fetchField();

  if (empty($result)) {
    form_set_error('sku', t('The sku is not matching any product.'));
  }
  else {
    // For further reference.
    $form_state['values']['product_id'] = $result;
  }
  
  if (intval($values['quantity']) <= 0) {
    form_set_error('quantity', t('The quantity should be numeric and higher than 0.'));
  }
}

/**
 * Direct buy form submission.
 */
function commerce_direct_buy_form_submit(&$form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  
  if ($product = commerce_product_load($values['product_id'])) {
    $line_item = commerce_product_line_item_new($product, $values['quantity']);
    $line_item = commerce_cart_product_add($user->uid, $line_item);
  }
  
  drupal_set_message(t('The product: @title has been added to your cart', array('@title' => $product->title)));

  return $line_item;
}
