<?php
// $Id: custom_username_validation.module,v 1.4 2010/07/19 10:12:42 schneck Exp $

/**
 * This module was initially sponsored by webrunners.net
 */

$custom_username_validation_pattern_valid = TRUE;
$custom_username_validation_pattern_errmsg = '';

/**
 * Custom Error handler: Used if pattern invalid
 *
 * @see http://php.net/manual/en/function.set-error-handler.php
 * @param $errno Error code
 * @param $errstr Error string
 * @param $errfile Error file
 * @param $errline Line where error occured 
 */
function custom_username_validation_error_handler($errno, $errstr) {
    global $custom_username_validation_pattern_valid, $custom_username_validation_pattern_errmsg;
    
    // Just set a global flag that the pattern is invalid and preserve error message
    $custom_username_validation_pattern_valid = FALSE;
    $custom_username_validation_pattern_errmsg = $errstr;
}

/**
 * Validation function
 *
 * @param mixed $element Posted form structure
 */
function custom_username_validation_username_validate ($element) {
    
  /** Get username from form elements */

  $username = $element['account']['name']['#value'];
  
  /** If user may override validation, just return */
  if (user_access('override custom username validation'))
    return;

  /** If username not set, do not validate */
  if (!$username)
    return;
  
  /** If pattern not set in module settings, do not validate */
  $pattern = variable_get('custom_username_validation_pattern', '');
  if ($pattern == '')
    return;  
  
  if (!@preg_match($pattern, $username))
    form_set_error('name', t(variable_get('custom_username_validation_errormsg', '')));
}



/**
 * Admin-Settings
 */

function custom_username_validation_admin() {

    global $user;
    
    // If user is admin, display the note that he may set permissions
    if ($user->uid == 1) {
        $form['custom_username_validation_hint'] = array(
            '#type' => 'fieldset',
            '#title' => t('Hint'),
        );
        $form['custom_username_validation_hint']['custom_username_validation_hint_text'] = array(
          '#markup' => t('There is a <a href="@link">permission</a> which can be set to allow particular groups to override the pattern. Currently, the admin is always allowed to override it. Additionally, you may give groups the rights to edit the pattern.',
                        array('@link' => url('admin/people/permissions'))
          )
        );
    }


  $form['custom_username_validation_config'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configuration'),
  );

  $form['custom_username_validation_config']['custom_username_validation_pattern'] = array(
    '#type' => 'textfield',
    '#title' => t('Pattern to match'),
    '#default_value' => variable_get('custom_username_validation_pattern', ''),
    '#description' => t("See PHP's preg_match() for details. Example for a german phone number: /^(00|\+)49[1-9]{1}[0-9]{6,14}$/")
  );

  $form['custom_username_validation_config']['custom_username_validation_hint'] = array(
    '#type' => 'textfield',
    '#title' => t('Username description in register/edit forms'),
    '#default_value' => variable_get('custom_username_validation_hint', ''),
    '#description' => t("Description message to override Drupal's default username description on user registration/edit forms. Leave blank to use Drupal's default.")
  );
  
  $form['custom_username_validation_config']['custom_username_validation_errormsg'] = array(
    '#type' => 'textfield',
    '#title' => t('Error message'),
    '#default_value' => variable_get('custom_username_validation_errormsg', t('Username format is invalid')),
    '#description' => t("Error message that appears in form message collection if username is invalid")
  );

  $form['custom_username_validation_test'] = array(
      '#type' => 'fieldset',
      '#title' => t('Test pattern'),      
      '#collapsed' => TRUE
  );        
  
  $form['custom_username_validation_test']['custom_username_validation_teststring'] = array(
    '#type' => 'textfield',   
    '#title' => t('Test-Username'),
    '#default_value' => '',
    '#description' => t('Enter a username here')
  );
  
  $form['custom_username_validation_test']['custom_username_validation_teststring_submit'] = array(
    '#type' => 'button',   
    '#value' => t('Test your pattern'),
    '#ajax' => array(
          'callback' => 'custom_username_validation_test_validation',
          'wrapper' => 'test_validation_panel',
          'method' => 'replace',
          'effect' => 'fade',  
    )
  );

  $form['custom_username_validation_test']['custom_username_validation_test_panel'] = array(
    '#prefix' => '<div id="test_validation_panel" style="display: block;">',
    '#markup' => '',
    '#suffix' => '</div>'
  );  
  return system_settings_form($form);
}
                
                                                         
/**
 * Tests a given string against a pattern (Parameters via $_POST). 
 * Called from the test-fieldset in the admin settings.
 *
 * @return mixed JSON-String
 */
function custom_username_validation_test_validation(&$form, &$form_state) {
    global $custom_username_validation_pattern_valid, $custom_username_validation_pattern_errmsg;

    $tpl_error = '<div style="padding:4px;color:white;background-color:#800;font-weight: bold;">%s</div>';
    $tpl_success = '<div style="padding:4px;color:white;background-color:#080;font-weight: bold;">%s</div>';

    $teststring = $form['custom_username_validation_test']['custom_username_validation_teststring']['#value'];
    $pattern = $form['custom_username_validation_config']['custom_username_validation_pattern']['#value'];


    if ($teststring == '') {
		$form['custom_username_validation_test']['custom_username_validation_test_panel']['#markup'] = sprintf($tpl_error, t('Please enter a username to test.'));
		return $form['custom_username_validation_test']['custom_username_validation_test_panel'];
    }                                                                    
    else {
      $custom_username_validation_pattern_valid = TRUE;
      $custom_username_validation_pattern_errmsg = '';
      // Redirect error handling temporarily
      set_error_handler('custom_username_validation_error_handler');
      
      // Check if pattern matches
      $validates = @preg_match($_POST['custom_username_validation_pattern'], $teststring);        
      
      // Restore old error handler
      restore_error_handler();
      
      if (!$custom_username_validation_pattern_valid) {
	        watchdog('Custom username validation', 'Pattern invalid', NULL, WATCHDOG_DEBUG );
			$markup = sprintf($tpl_error, t('The pattern %pattern is invalid. The error message was: %errmsg', 
			                                 array(
				                                   '%pattern' => $pattern, 
			                                       '%errmsg' => $custom_username_validation_pattern_errmsg)
                                             )
            );
            $form['custom_username_validation_test']['custom_username_validation_test_panel']['#markup'] = $markup;
			return $form['custom_username_validation_test']['custom_username_validation_test_panel'];

      }
      elseif ($validates) {
	        watchdog('Custom username validation', 'Term matches', NULL, WATCHDOG_DEBUG );
			$markup = sprintf($tpl_success, t('The pattern %pattern matches "%teststring', 
                           	                array(
	                                              '%pattern' => $pattern, 
	                                               '%teststring' => $teststring
	                                        )
	                                      )
            );
            $form['custom_username_validation_test']['custom_username_validation_test_panel']['#markup'] = $markup;
			return $form['custom_username_validation_test']['custom_username_validation_test_panel'];
      }
      else {
	        watchdog('Custom username validation', 'Term does not match', NULL, WATCHDOG_DEBUG );
			$markup = sprintf($tpl_error, t('The pattern %pattern does not match "%teststring"', 
                         	                array(
	                                              '%pattern' => $pattern, 
	                                               '%teststring' => $teststring
	                                        )
	                                      )
            );
            $form['custom_username_validation_test']['custom_username_validation_test_panel']['#markup'] = $markup;
	    	return $form['custom_username_validation_test']['custom_username_validation_test_panel'];
      }
        
    }
}

/**
 * **************************************************************
 * Hooks
 * **************************************************************
 */

/**
* Implementation of hook_form_alter().
*/

function custom_username_validation_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form') {  
      
    $form['#validate'][] = 'custom_username_validation_username_validate';
    $hint = t(variable_get('custom_username_validation_hint', ''));

    if (($hint != "") && (!user_access('override custom username validation'))) {     
        
        if (array_key_exists('account', $form))
          $form['account']['name']['#description'] = $hint;
        else
            $form['name']['#description'] = $hint;
    }
  }
}

/**
* Implementation of hook_menu().
*/
function custom_username_validation_menu() {
  $items = array();

  $items['custom_username_validation/test_validation'] = array(
    'page callback' => 'custom_username_validation_test_validation',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer custom username validation'),
  );

  $items['admin/config/people/custom_username_validation'] = array(
    'title' => t('Custom username validation'),
    'description' => t('Set username pattern to match and an error message on matching fail'),
    'access callback' => 'user_access',
    'access arguments' => array('administer custom username validation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_username_validation_admin'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implementation of hook_permission()
 */
function custom_username_validation_permission () {

    return array(
    'administer custom username validation' => array(
      'title' => t('Administer custom username validation'),
      'description' => t('Perform administration tasks for custom username validation.'),
    ),
    'override custom username validation' => array(
      'title' => t('Override custom username validation'),
      'description' => t('Users with this permission may override the custom username validation'),
    )
  );
}
