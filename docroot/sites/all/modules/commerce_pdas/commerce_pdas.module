<?php
/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function commerce_pdas_menu() {
  $items = array();

  $items['admin/commerce/config/commerce_pdas'] = array(
    'title' => 'Product Attribute Field Querystring Mapping',
    'description' => 'Map product attribute field names to custom values that will read from the URL.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pdas_settings_form'),
    'access arguments' => array('configure store'),
    'file' => 'includes/commerce_pdas.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Alter the Bundle Add To Cart form.
 */
function commerce_pdas_form_commerce_bundle_add_to_cart_form_alter(&$form, &$form_state) {
  if (empty($form['product_groups'])) {
    return;
  }

  // Loop through the product groups elements.
  foreach ($form['product_groups'] as $product_group_id => &$product_group) {
    // Ignore any element that is not a product group.
    if (strpos($product_group_id, 'product_group_') !== 0) {
      continue;
    }
    if (!empty($product_group['attributes'])) {
      _commerce_pdas_add_to_cart_attributes_alter($product_group['attributes']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Alter the Add To Cart form.
 */
function commerce_pdas_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  if (!empty($form['attributes'])) {
    _commerce_pdas_add_to_cart_attributes_alter($form['attributes']);
  }
}

/**
 * Implements hook_entity_view().
 *
 * Attempt to identify if we're viewing a product display with an add-to-cart
 * form. Generate an attribute lookup map that custom jquery can compare any
 * querystring parameters to.
 *
 * Note: We don't actually lookup any querystring parameters here to allow for
 * potentially caching a product display.
 *
 * The lookup map structure is as follows:
 * <field short name>
 *   - selector : <attribute class selector>
 *   - options
 *     - <term name> : <term id>
 *
 * @todo Check for any product reference field, not just 'field_product'.
 */
function commerce_pdas_entity_view($entity, $entity_type, $view_mode, $langcode) {
  // If we're on a product display node and the product reference field is
  // configured to render as an add to cart form.
  if ($entity_type == 'node' && !empty($entity->field_product) && in_array($entity->content['field_product']['#formatter'], array('commerce_cart_add_to_cart_form', 'commerce_bundle_add_to_cart_form'))) {

    $attribute_fields = _commerce_pdas_get_cart_attribute_fields();
    $attribute_lookup_map = array();

    foreach ($attribute_fields as $field_name => $attribute_field) {
      // Convert to lowercase to allow for case insensitive querystring values.
      $field_options = array_map('strtolower', $attribute_field['options']);
      $short_name = _commerce_pdas_field_shortname($field_name);
      $attribute_lookup_map[$short_name] = array(
        'attributeSelector' => _commerce_pdas_attribute_class($field_name),
        'attributeOptions' => array_flip($field_options),
      );
    }

    drupal_add_js(array('commercePDAS' => $attribute_lookup_map), 'setting');
    drupal_add_js(drupal_get_path('module', 'commerce_pdas') . '/commerce_pdas.js');
  }
}

/**
 * Helper function: alter the attribute field in add to cart form
 *
 * Given the ajax and rebuilding of the form for add-to-cart and
 * bundle-add-to-cart, we want to keep the logic here simple. So we simply look
 * for any 'field_' form element and add a special class to it so the custom
 * jquery can target the field.
 *
 * @param  array $attributes_form_part
 *   The 'attributes' form element in the add-to-cart form or within a product
 *   group in the bundle-add-to-cart form.
 */
function _commerce_pdas_add_to_cart_attributes_alter(&$attributes_form_part) {
  foreach ($attributes_form_part as $form_part_name => $form_part) {
    if (strpos($form_part_name, 'field_') !== 0) {
      continue;
    }

    $attributes_form_part[$form_part_name]['#attributes']['class'][] = _commerce_pdas_attribute_class($form_part_name);
    $attributes_form_part[$form_part_name]['#attributes']['class'][] = 'pdas-attribute-field';
  }
}

/**
 * Helper function: Generate / lookup short attribute name.
 *
 * Field names can be long and not user friendly when used in a querystring to
 * set an attribute field value. This function strips 'field_' from the field
 * name by default. This turns 'field_color' into 'color'.
 *
 * @param  string $field_name
 *
 * @return string
 *   Shortened field name.
 *
 * @todo add configuration / lookup functionality
 */
function _commerce_pdas_field_shortname($field_name) {
  $short_names = variable_get('commerce_pdas_short_names', array());
  return !empty($short_names[$field_name]) ? $short_names[$field_name] : str_replace('field_', '', $field_name);
}

/**
 * Helper function: Generate html class selector for attribute field.
 *
 * @param  string $field_name
 *
 * @return string
 *   html class selector
 */
function _commerce_pdas_attribute_class($field_name) {
  return drupal_html_class('pdas-' . $field_name);
}

/**
 * Returns an array of product fields enabled as an attribute field
 * for Add to Cart forms from provided products.
 *
 * Note: taken mostly from _commerce_product_urls_get_cart_attribute_fields()
 */
function _commerce_pdas_get_cart_attribute_fields() {
  $product_types = commerce_product_types();

  // Now let's loop through all product types and generate an array
  // of all possible attribute fields available in them. Quite a big part
  // of this code is borrowed from commerce_cart_add_to_cart_form().
  $attribute_fields = array();

  foreach ($product_types as $product_type => $product_type_info) {

    foreach (field_info_instances('commerce_product', $product_type) as $field_name => $instance) {
      // A field qualifies if it is single value, required and uses a widget
      // with a definite set of options. For the sake of simplicity, this is
      // currently restricted to fields defined by the options module.
      $field = field_info_field($instance['field_name']);

      // Get the array of Cart settings pertaining to this instance.
      $commerce_cart_settings = commerce_cart_field_instance_attribute_settings($instance);

      // If the instance is of a field type that is eligible to function as
      // a product attribute field and if its attribute field settings
      // specify that this functionality is enabled...
      if (commerce_cart_field_attribute_eligible($field) && $commerce_cart_settings['attribute_field']) {

        // Get the options properties from the options module and store the
        // options for the instance in select list format in the array of
        // qualifying fields.
        $properties = _options_properties('select', FALSE, TRUE, TRUE);

        // Try to fetch localized names.
        $allowed_values = NULL;

        // Prepare translated options if using the i18n_field module.
        if (module_exists('i18n_field')) {
          if (($translate = i18n_field_type_info($field['type'], 'translate_options'))) {
            $allowed_values = $translate($field);
            _options_prepare_options($allowed_values, $properties);
          }

          // Translate the field title if set.
          if (!empty($instance['label'])) {
            $instance['label'] = i18n_field_translate_property($instance, 'label');
          }
        }

        // Otherwise just use the base language values.
        if (empty($allowed_values)) {
          $allowed_values = _options_get_options($field, $instance, $properties, 'commerce_product', array());
        }

        if (!empty($allowed_values)) {
          $attribute_fields[$field_name]['options'] = $allowed_values;
          $attribute_fields[$field_name]['label'] = $instance['label'];
        }

      }
    }
  }

  return $attribute_fields;
}
