<?php

/**
 * @file
 * Adds Drupal Commerce functionality to CRM Core Profiles.
 */

include_once 'crm_core_profile_commerce_items.features.inc';

define('CCPCI_AMOUNT_STATIC', 0);
define('CCPCI_AMOUNT_VARIABLE', 1);
define('CCPCI_AMOUNT_VARIABLE_BUTTONS', 2);

/**
 * Implements crm_core_profile_register_entity().
 */
function crm_core_profile_commerce_items_crm_core_profile_register_entity() {
  return array(
    // @todo: We must change entity key here. We don't create commerce product
    // when profile form get submitted, we creating commerce order as result of
    // donation or registration to event. So this change is probably number one
    // module refactoring list because it put inconsistency in code. Under
    // 'inconsistency' I mean that we introduce entity of type
    // 'commerce_product', which is not an commerce product by fact, with title
    // 'Commerce Profile', but have nothing common with commerce profile.
    'commerce_product' => 'CommerceProfileHandler',
  );
}

/**
 * Validate callback.
 *
 * Ensures that at least one address field attached to profile form.
 */
function crm_core_profile_commerce_items_check_address_field_exists($form, $form_state) {
  if (isset($form_state['values']['entities']['commerce_order'])
    && !empty($form_state['values']['entities']['commerce_order']['status'])
  ) {
    $ccb = 'commerce_customer_billing';
    $valid = FALSE;
    foreach ($form_state['values']['fields'] as $field_config) {
      if ($field_config['field_name'] == $ccb && $field_config['status']) {
        $valid = TRUE;
        break;
      }
      $field = field_info_field($field_config['field_name']);
      if ($field['type'] == 'addressfield' && $field_config['status']) {
        $valid = TRUE;
        break;
      }
    }

    if (!$valid) {
      form_set_error('', t('Payment forms require an address field in order to process payments. Please add a valid address field from a contact or activity record, or select the billing address field from the Commerce plug in.'));
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * In case shopping cart attached to profile and there is no payment form
 * attached, redirect user to order checkout page.
 */
function crm_core_profile_commerce_items_form_crm_core_profile_entry_form_alter(&$form, &$form_state) {
  $profile =& $form_state['profile'];
  if (isset($profile->fields['commerce_order_commerce_order_commerce_cart']) &&
    !empty($profile->fields['commerce_order_commerce_order_commerce_cart']['status']) &&
    empty($profile->fields['commerce_order_commerce_order_commerce_payment']['status'])
  ) {
    $form['#submit'][] = 'crm_core_profile_commerce_profile_entry_form_submit';
  }
}

/**
 * Submit handler for CRM Core profile forms..
 */
function crm_core_profile_commerce_items_profile_entry_form_submit($form, &$form_state) {
  $order_id = commerce_cart_order_id($GLOBALS['user']->uid);
  if (!empty($order_id)) {
    $form_state['redirect'] = 'checkout/' . $order_id;
  }
}

/**
 * Implements hook_theme().
 */
function crm_core_profile_commerce_items_theme() {
  $theme = array(
    // Themes custom commerce cart.
    'crm_core_profile_commerce_cart' => array(
      'render element' => 'table',
      'file' => '/theme/crm_core_profile_commerce_items.theme.inc',
    ),
    'crm_core_profile_commerce_cart_summary' => array(
      'variables' => array(
        'total' => NULL,
        'total_raw' => NULL,
        'total_label' => NULL,
      ),
      'path' => drupal_get_path('module', 'crm_core_profile_commerce_items') . '/theme',
      'template' => 'crm-core-profile-commerce-cart-summary',
    ),
    'crm_core_profile_commerce_items_amount_buttons' => array(
      'variables' => array(
        'amounts' => array(),
      ),
      'path' => drupal_get_path('module', 'crm_core_profile_commerce_items') . '/theme',
      'template' => 'crm-core-profile-commerce-items-amount-buttons',
    ),
  );

  return $theme;
}

/**
 * Returns refreshed cart via AJAX.
 */
function crm_core_profile_commerce_items_cart_refresh(&$form, &$form_state) {
  return $form['cart_wrapper']['cart'];
}

/**
 * Helper to format amounts to default site currency.
 */
function _crm_core_profile_commerce_items_currency_format($amount) {
  return commerce_currency_format($amount, commerce_default_currency(), NULL, FALSE);
}

/**
 * Helper to get list of enabled commerce payment methods.
 */
function _crm_core_profile_commerce_items_enabled_payment_methods() {
  // Get a list of available payment processors for the site.
  $order = new stdClass();
  rules_invoke_all('commerce_payment_methods', $order);

  $payment_methods = array();
  if (!empty($order->payment_methods)) {
    // Sort the payment processors by weight.
    uasort($order->payment_methods, 'drupal_sort_weight');

    foreach ($order->payment_methods as $instance_id => $method_info) {
      $payment_methods[$instance_id] = commerce_payment_method_instance_load($instance_id);
    }
  }

  return $payment_methods;
}

/**
 * Returns refreshed payment form via AJAX.
 */
function crm_core_profile_commerce_items_payment_form_refresh(&$form, &$form_state) {
  return $form['commerce_payment_form']['payment_details'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changing token information on profile edit form.
 */
function crm_core_profile_commerce_items_form_crm_core_profile_new_form_alter(&$form, &$form_state) {
  if (module_exists('token') && isset($form['entities']['commerce_product'])) {
    $form['entities']['commerce_product']['token']['tokens']['#token_types'][0] = token_get_entity_mapping('entity', 'commerce_order');
  }
}

/**
 * Implements hook_crm_core_profile_before_token_replace_alter().
 *
 * Because of implementation inconsistency we must replace key-type
 * of token replacement context.
 */
function crm_core_profile_commerce_items_crm_core_profile_before_token_replace_alter(&$context) {
  if (isset($context['commerce-product'])) {
    $order = $context['commerce-product'];
    unset($context['commerce-product']);
    $context['commerce-order'] = $order;
  }
}

/**
 * Amount field validate handler.
 */
function crm_core_profile_commerce_items_commerce_amount_single_validate_field($element, &$form_state) {

  $value = $element['#value'];
  $separator = '.';
  $label = $element['#title'];

  // Reject invalid characters.
  if (!empty($value)) {

    $regexp = '@([^-0-9\\' . $separator . '])|(.-)@';
    $message = t('Only numbers and the decimal separator (@separator) allowed in %field.', array('%field' => $label, '@separator' => $separator));

    if ($value != preg_replace($regexp, '', $value)) {
      form_error($element, $message);
    }
    else {
      // Verify that only one decimal separator exists in the field.
      if (substr_count($value, $separator) > 1) {
        $message = t('%field: There should only be one decimal separator (@separator).',
          array(
            '%field' => check_plain($label),
            '@separator' => $separator,
          )
        );
        form_error($element, $message);
      }
      else {
        // Substitute the decimal separator; things should be fine.
        $value = strtr($value, $separator, '.');
      }
      form_set_value($element, $value, $form_state);
    }
  }
}

/**
 * Helper to parse amount values from string.
 *
 * @param string $amounts
 *   String containing decimal amounts separated by comma.
 *
 * @return array
 *   Array of amounts.
 */
function crm_core_profile_commerce_items_parse_amounts($amounts) {

  // Replace all new lines with commas.
  $amounts = str_replace(array("\r\n", "\n", "\r"), ',', $amounts);
  // Break this into an array.
  $amounts = explode(',', $amounts);
  $amounts = array_map('trim', $amounts);
  $amounts = array_filter($amounts);
  // We need this trick to restore array indexes.
  $amounts = array_merge(array(), $amounts);

  return $amounts;
}
