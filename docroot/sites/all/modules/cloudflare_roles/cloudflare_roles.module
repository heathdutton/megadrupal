<?php

/**
 *  @file
 */

/**
 * Implements hook_permission()
 */
function cloudflare_roles_permission() {
  return array(
    'administer cloudflare' => array(
      'title' => t('Administer Cloudflare'), 
      'description' => t('Perform administration tasks for Cloudflare.'),
    ),
    'cloudflare whitelist' => array(
      'title' => t('Cloudflare Whitelisted'), 
      'description' => t('Be whitelisted by Cloudflare.'),
    ),
    'cloudflare ban' => array(
      'title' => t('Cloudflare Ban'), 
      'description' => t('Be banned by Cloudflare.'),
    ),    
    );
}

function _cloudflare_roles_last_ip($account) {
  $key = "last_ip_" . $account->uid;
  $last_ip = cache_get($key);
  if ($last_ip) {
    $last_ip = $last_ip->data;
  } 
  else {
      //$last_ip = db_query("SELECT ip FROM {uiplog} WHERE uid = :uid and timestamp < :timestamp order by timestamp desc limit 1", array(":uid" => $account->uid, ":timestamp" => REQUEST_TIME))->fetchField();
      $last_ip = db_query_range("SELECT ip FROM {uiplog} WHERE uid = :uid and timestamp < :timestamp ORDER BY timestamp DESC", 0, 1, array(":uid" => $account->uid, ":timestamp" => REQUEST_TIME))->fetchField();

      if ($last_ip) {
        cache_set($key, $last_ip, 'cache_field' , CACHE_TEMPORARY);
    }
  }
  return $last_ip;
}

/**
 * Implements hook_user_login().
 * TODO : if there are too many people with role, could impact cloudflare api limit
 */
function cloudflare_roles_user_login(&$edit, $account) {
  if (user_access("cloudflare whitelist", $account) || user_access("cloudflare ban", $account)) {
    $last_ip = _cloudflare_roles_last_ip($account);
    $ip = ip_address();
    
    if (user_access("cloudflare whitelist", $account)) {
      if ($last_ip && $ip != $last_ip) {
         _cloudflare_roles_reset_ip($last_ip);
      }
       _cloudflare_whitelist_ip($ip);
    } 
    elseif (user_access("cloudflare ban", $account)) {
     _cloudflare_ban_ip($ip);
    }
  }

}

/**
 * Implements hook_user_logout().
 * //TODO : if there are too many people with role, could impact cloudflare api limit
 * //TODO : cleanup cron? - reset ip's based on time since last login?
 */
function cloudflare_roles_user_logout($account) {
  if (user_access("cloudflare whitelist", $account)) {
    _cloudflare_roles_reset_ip(ip_address());
  }

}

/**
 * Implements hook_user_load().
 * //TODO : if there are too many people with role, could impact cloudflare api limit
 */
function cloudflare_roles_user_load($accounts) {
  global $user;
  foreach ($accounts as $account) {
  //Only do this if you are the current user
  if ($user->uid == $account->uid && (user_access("cloudflare whitelist", $account) || user_access("cloudflare ban", $account))) {
    $last_ip = _cloudflare_roles_last_ip($account);
    $ip = ip_address();
     
    if ($ip != $last_ip) {
      db_insert('uiplog')->fields(array(
            'ip' => $ip,
            'uid' => $account->uid,
            'timestamp' => REQUEST_TIME,
        ))->execute();
      
      if (user_access("cloudflare whitelist", $account)) {
        if ($last_ip) {
          _cloudflare_roles_reset_ip($last_ip);
          $key = "last_ip_" . $account->uid;
          cache_set($key, $ip, 'cache_field', CACHE_TEMPORARY);
        }
          _cloudflare_whitelist_ip($ip);
      } 
      elseif (user_access("cloudflare ban", $account)) {
          _cloudflare_ban_ip($ip);
      }
    }
  }
 }
}

function _cloudflare_roles_reset_ip($ip) {
  $result = _cloudflare_threat_api('nul', $ip);
  // Get the first line only
  list($status_code) = explode("\n", $result);

  if ($status_code == "OK") {
    //drupal_set_message(t("You have successfully removed %ip from your Cloudflare lists.", array('%ip' => $ip)), 'status', FALSE);
    // record a message noting the action taken
    watchdog('cloudflare_roles', 'You have successfully removed %ip from your Cloudflare lists.', array('%ip' => $ip));
  }
  else {
    _cloudflare_roles_error($ip, $status_code);
  }
  return $status_code;
}

function _cloudflare_roles_error($ip, $status_code) {
   $message_user = $message_watchdog = "";
   switch ($status_code) {
      case "E_UNAUTH":
        $message_user = "Cloudflare response: Authorization could not be completed.";
        $message_watchdog = t("Cloudflare response: Authorization could not be completed.");
        break;
      case "E_INVLDIP":
        $message_user = "Cloudflare response: Malformed IPv4 address passed in. (IP: %ip)";
        $message_watchdog = t("Cloudflare response: Malformed IPv4 address passed in. (IP: %ip)");
        break;
      case "E_INVLDINPUT":
        $message_user = "Cloudflare response: Some other input was not valid.";
        $message_watchdog = t("Cloudflare response: Some other input was not valid.");
        break;
      case "E_MAXAPI":
        $message_user = "Cloudflare response: You have exceeded your allowed number of API calls.";
        $message_watchdog = t("Cloudflare response: You have exceeded your allowed number of API calls.");
        break;
      case "CF_CIDR":
        $message_user = "Sorry, %ip belongs to Cloudflare and cannot be changed.";
        $message_watchdog = t("Sorry, %ip belongs to Cloudflare and cannot be changed.");
        break;
      case "MY_IP":
        $message_user = "%ip belongs to you!";
        $message_watchdog = t("%ip belongs to you!");
        break;
    }
    // record a message noting the action taken
    watchdog('cloudflare_roles', $message_watchdog, array('%ip' => $ip));
}

