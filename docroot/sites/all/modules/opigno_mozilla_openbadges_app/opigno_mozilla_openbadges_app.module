<?php

/**
 * @file
 * Add the Openbadge functionalities in the Opigno LMS system.
 * This is the core module file. All the called hooks are here.
 */

/**
 * The key to pass in parameters when sending the "You have earned a badge" mail
 */
define('MAIL_KEY_EARNING_BADGE', 'earned_badge_message');

/**
 * This app name
 */
define('OPENBADGES_APP_NAME', 'opigno_mozilla_openbadges_app');

/**
 * Base URI where the badges will be stored
 */
define('OPENBADGE_BASE_FOLDER_URI', 'public://badges');

/**
 * The machine content type name
 */
define('OPENBADGE_CONTENT_TYPE_NAME', 'openbadge');



/**
 * Implements hook_node_insert().
 *
 * Save the badge physically in the folder.
 *
 * @param $node stdClass An Openbadge node
 */
function opigno_mozilla_openbadges_app_node_insert($node)
{
  if ($node->type === OPENBADGE_CONTENT_TYPE_NAME) {

    $openbadgeFileManager = OpignoOpenbadgesPresenter::getOpenbadgeFileManager($node, OPENBADGE_BASE_FOLDER_URI);
    if ($openbadgeFileManager->saveBasicBadgeFiles())
    {
      // Have to update the image ID after the save
      OpignoOpenbadgeFm::updateImageFileID($node, $openbadgeFileManager->getLogoFileID());

      drupal_set_message(t('Badge "!title" has been created', array('!title' => $node->title)), 'status');
    }
    else
    {
      drupal_set_message(t('Error while creating the badge'), 'error');
    }

  }
  // If the created node is a course or a class, add the reference in the openbadge node
  else if ($node->type == 'class' || $node->type == OPIGNO_COURSE_BUNDLE)
  {
    OpignoOpenbadgesPresenter::add_og_ref($node);
  }
}

/**
 * Implements hook_node_view_alter().
 *
 * Add some fields in the badge overview.
 *
 * @param $build Array The view's array as expected by drupal_render()
 */
function opigno_mozilla_openbadges_app_node_view_alter(&$build)
{
  OpignoOpenbadgesPresenter::node_view_alter_add_earners_field($build);
  OpignoOpenbadgesPresenter::node_view_alter_add_badge_image_info_panel($build);
}


/**
 * Implements hook_node_presave().
 *
 * Prevent from revisionning the badge if it's not necessary.
 *
 * @param $node stdClass An Openbadge node
 * @return $node The modified node in order to save the modifications
 */
function opigno_mozilla_openbadges_app_node_presave($node)
{
  if ($node->type === OPENBADGE_CONTENT_TYPE_NAME) {
    // Forced to do the stop revisioning here because the hook_node_update is executed after the saving in db and this
    //   hook is executed before the db save
    // Verify that the updated badge is different from the ancient badge and stop the revision if they are equals
    if ($node->is_new == false
        && !empty($node->original)
        && OpignoOpenbadgesPresenter::formValuesAreEquals($node, $node->original)
    ) {
      $node->revision = null;
    }
  }
  return $node;
}


/**
 * Implements hook_node_update().
 *
 * Save the modification of a badge.
 *
 * @param $node stdClass The updated openbadge node
 */
function opigno_mozilla_openbadges_app_node_update($node)
{
  if ($node->type === OPENBADGE_CONTENT_TYPE_NAME && !OpignoOpenbadgesPresenter::formValuesAreEquals($node, $node->original))
  {
    // Create a new revision of badge if there's a modification of itself
    $openbadgeFileManager = OpignoOpenbadgesPresenter::getOpenbadgeFileManager($node, OPENBADGE_BASE_FOLDER_URI);
    if ($openbadgeFileManager != false && $openbadgeFileManager->saveBasicBadgeFiles())
    {
      // Have to update the image ID after the saved files
      OpignoOpenbadgeFm::updateImageFileID($node, $openbadgeFileManager->getLogoFileID());

      drupal_set_message(t('Badge "!title" has been updated', array('!title' => $node->title)), 'status');
    }
    else
    {
      drupal_set_message(t('Error while updating the badge'), 'error');
    }

    // If nobody has earned the old badge, delete the old badge
    $originalImpl = OpignoOpenbadgesPresenter::getOpenbadgeFileManager($node->original, OPENBADGE_BASE_FOLDER_URI);
    ($originalImpl != false ? $originalImpl->removeBadgeIfUnused() : null);
  }
  // If the updated node is a course or a class, add the reference in the openbadge node
  else if ($node->type == 'class' || $node->type == OPIGNO_COURSE_BUNDLE)
  {
    OpignoOpenbadgesPresenter::add_og_ref($node);
  }
}


/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Change the implementation of Openbadge form in certain forms in order to hide some fields.
 *
 * @param $entity_form Array The openbadge form
 * @param $form_state Array The complete form state
 */
function opigno_mozilla_openbadges_app_inline_entity_form_entity_form_alter(&$entity_form, &$form_state)
{
  if ($form_state['node']->type === OPIGNO_COURSE_BUNDLE || $form_state['node']->type === 'class')
  {
    OpignoOpenbadgesPresenter::entity_form_alter_hide_status($entity_form);
    OpignoOpenbadgesPresenter::entity_form_alter_hide_og_ref($entity_form);
  }
}


/**
 * Implements hook_form_alter().
 *
 * This method does these modifications only on certain forms :
 * - Change the initial table in the "Badge settings" tab.
 * - Remove the possibility to delete a badge.
 * - Add the badge revisions table.
 * - Remove the "Create" and "Update" button of the openbadge form
 * - Add the "connect a backpack" button in user edit form
 * - Add the "sync my backpack" button in user edit form
 * - Process some GET requests in the user edit form
 *
 * @param $form Array The form to alter
 * @param $form_state Array The complete form state
 * @param $form_id String The form ID
 */
function opigno_mozilla_openbadges_app_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == OPIGNO_COURSE_BUNDLE .'_node_form' || $form_id == 'class_node_form')
  {
    // Remove the not needed form elements
    OpignoOpenbadgesPresenter::form_alter_remove_unnecessaries($form);

    // If there is a badge, add the revisions table under this badge
    if (isset($form[OpignoOpenbadgesPresenter::FIELD_BADGE_SETTINGS_REF][LANGUAGE_NONE]['entities'][0]))
    {
      OpignoOpenbadgesPresenter::form_alter_add_revisions_table($form);
    }
  }

  // Remove the possibility to create a badge alone (without course or class)
  else if ($form_id == OPENBADGE_CONTENT_TYPE_NAME .'_node_form')
  {
    OpignoOpenbadgesPresenter::form_alter_hide_all($form);
    form_set_error('', t('You cannot create a badge here. To create a badge, go to the specific course or class settings'));
  }

  else if ($form_id == 'user_profile_form')
  {
    // If the user come from the Backpack Connect callback, get the info and save them in DB
    if ( !empty($_GET['access_token'])
      && !empty($_GET['refresh_token'])
      && !empty($_GET['expires'])
      && !empty($_GET['api_root'])
      && !empty($form['#user']->uid)
    ) {
      BackpackConnectPresenter::check_and_save_db(
        $_GET['api_root'],
        $_GET['access_token'],
        $_GET['refresh_token'],
        $form['#user']->uid,
        $_GET['expires']
      );

      BackpackConnectPresenter::remove_gets_queries_from_url();
    }

    BackpackConnectPresenter::form_alter_do_ajax_behaviours($form, $form_state);
    BackpackConnectPresenter::form_alter_add_settings($form, $form_state);

    BackpackDisplayerPresenter::form_alter_do_ajax_behaviours($form, $form_state);
    BackpackDisplayerPresenter::form_alter_add_collections_settings($form);
  }

  // TODO: IF form is delete confirm. Check each entries and remove the badges. If a badge was removed, show a message.

}

/**
 * Just return the good form. The modifications are made in the hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function ajax_opigno_mozilla_openbadges_app_backpack_collections_settings_callback($form, &$form_state)
{
  return $form['group_badge_collections'];
}

/**
 * Just return the good form. The modifications are made in the hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function ajax_opigno_mozilla_openbadges_app_backpack_connect_settings_callback($form, &$form_state)
{
  return $form['backpack_connect_settings'];
}


/**
 * Add these validations to the user form :
 * - Need to be connected to a backpack in order to activate the synchronization.
 *
 * @param $form array The user form
 * @param $form_state array The result of the form
 */
function opigno_mozilla_openbadges_app_user_form_validate_backpack_connect($form, &$form_state)
{
  if ($form_state['values']['field_badge_sync_auto']['und'][0]['value'] == 1)
  {
    if (BackpackConnectDb::getEntries($form['#user']->uid) == false)
    {
      form_set_error('', t('You need to connect a backpack in order to synchronize it automatically'));
    }
  }
}

/**
 * Implements hook_node_validate().
 *
 * Check if the openbadge form is correct.
 *
 * @param $node stdClass The openbadge node to check
 * @param $form Array The complete form
 * @param $form_state Array The complete form state
 */
function opigno_mozilla_openbadges_app_node_validate($node, $form, &$form_state)
{
  if ($node->type == OPIGNO_COURSE_BUNDLE || $node->type == 'class') {
    // If the button "add a new badge" is here and the "activate badge system" checkbox is checked,
    //   show an error
    OpignoOpenbadgesPresenter::node_validate_check_if_activated($form_state);
  }

  if ($node->type == OPENBADGE_CONTENT_TYPE_NAME)
  {
    form_set_error('', t('You cannot create a badge here. To create a badge, go to the specific course or class settings'));
  }
}


/**
 * Implements hook_opigno_course_passed().
 *
 * Give the badge to the user if he has passed the course.
 *
 * @param $courseNid Integer The course node ID
 * @param $uid Integer The user ID
 */
function opigno_mozilla_openbadges_app_opigno_course_passed($courseNid, $uid)
{
  // Give course badge
  OpignoOpenbadgesPresenter::give_badge($courseNid, $uid);

  // Give class badge
  OpignoOpenbadgesPresenter::give_badge_if_class_passed($courseNid, $uid);
}


/**
 * Implements hook_mail().
 *
 * Add the subject, the body and the "from" field into the mail.
 *
 * @param $key String The mail key
 * @param $message Array The content of the mail (everything is in this)
 * @param $params Array Some params
 */
function opigno_mozilla_openbadges_app_mail($key, &$message, $params)
{
  if ($key == MAIL_KEY_EARNING_BADGE)
  {
    $message['subject'] = t('You have earned a new badge !'); // TODO: Real values here !
    $message['body'][] = t('Congratulations ! You have a new badge on your Opigno profile page.'); // TODO: Real values here !
    $message['from'] = variable_get('site_mail', 'admin@'. $_SERVER['SERVER_NAME']); // TODO: Put real mail
  }
}


/**
 * Implements hook_user_view_alter().
 *
 * Add the badges on the profile page.
 *
 * @param $build Array The profile page content
 * @param $type String The type of page
 */
function opigno_mozilla_openbadges_app_user_view_alter(&$build, $type)
{
  if ($type == 'user')
  {
    OpignoOpenbadgesPresenter::user_view_alter_add_badges_section($build);

    BackpackDisplayerPresenter::user_view_alter_add_collections_section($build);
  }
}


/**
 * Implements hook_menu_alter().
 *
 * Change the access callback when a revision view is called.
 *
 * @param $items Array All the callbacks
 */
function opigno_mozilla_openbadges_app_menu_alter(&$items)
{
  // Change viewing access
  // default: _node_revision_access (1, view)
  $items['node/%node/revisions/%/view']['access callback'] = 'opigno_mozilla_openbadges_app_node_revision_access';

  // Change revisions overview page
  // default: node_revision_overview (1)
  $items['node/%node/revisions']['page callback'] = 'opigno_mozilla_openbadges_app_node_revision_overview';

  // Change delete / revert access
  // default: _node_revision_access (1, update)
  $items['node/%node/revisions/%/revert']['access callback'] = 'opigno_mozilla_openbadges_app_node_revision_revert_delete_access';
  $items['node/%node/revisions/%/revert']['access arguments'] = array(1, 'revert', 'revision');

  // default: _node_revision_access (1, delete)
  $items['node/%node/revisions/%/delete']['access callback'] = 'opigno_mozilla_openbadges_app_node_revision_revert_delete_access';
  $items['node/%node/revisions/%/delete']['access arguments'] = array(1, 'delete', 'revision');

  // default: node_access (delete, 1)
  $items['node/%node/delete']['access callback'] = 'opigno_mozilla_openbadges_app_node_revision_revert_delete_access';
  $items['node/%node/delete']['access arguments'] = array(1, 'delete', 'node');
}


/**
 * Create the table for overviewing all the revisions of a node.
 * Based on node_revision_overview(), this method modify the table of openbadge table
 *
 * @param $node stdClass The node to build the overview
 *
 * @return array The table as expected by drupal_render()
 */
function opigno_mozilla_openbadges_app_node_revision_overview($node)
{
  $build = node_revision_overview($node);

  if ($node->type == OPENBADGE_CONTENT_TYPE_NAME)
  {
    OpignoOpenbadgesPresenter::node_revision_overview_remove_operations($build);
  }

  return $build;
}


/**
 * Change the access criteria in order to remove the possibility to delete or revert an openbadge.
 *
 * @param $node stdClass The node concerned
 * @param $op String The operation name (here: delete or revert)
 * @param $entityType String The entity type (here: node or revision)
 *
 * @return bool true if it can access | false otherwise
 */
function opigno_mozilla_openbadges_app_node_revision_revert_delete_access($node, $op, $entityType)
{
  if ($node->type == OPENBADGE_CONTENT_TYPE_NAME)
  {
    if ($op == 'delete' || $op == 'revert') {
      drupal_set_message(t('You cannot @op a badge. But you can disable it in his course/class settings', array('@op' => $op)), 'warning');
      return false;
    }
  }

  if ($entityType == 'node')
  {
    return node_access($op, $node, NULL);
  }
  else
  {
    return _node_revision_access($node, ($op == 'revert' ? 'update' : $op), NULL);
  }
}


/**
 * The access callback when a revision view is called.
 *
 * If the call is for viewing a revision of an openbadge, all logged users can access.
 * Else, do normal check.
 *
 * @param $node stdClass The called node
 * @param string $op String The operation asked (view, update, etc)
 * @param null $account The account who called
 *
 * @return bool true if access granted | false if no access
 */
function opigno_mozilla_openbadges_app_node_revision_access($node, $op = 'view', $account = NULL)
{
  if ($node->type == OPENBADGE_CONTENT_TYPE_NAME && user_is_logged_in())
  {
    return true;
  }
  else
  {
    return _node_revision_access($node, $op, $account);
  }
}


/**
 * Implements hook_views_api().
 */
function opigno_mozilla_openbadges_app_views_api() {
  return array(
    'api' => '3.0',
  );
}

// DONETODO: Show only last revision of badge on profile page
// DONETODO: Unify the badge earning verification
// DONETODO: Check encoding of the criteria html page
// DONETODO: Issue only last revision of badges in backpack ?
// DONETODO: Add the page formatter (header, footer) to the html criteria file
// DONETODO: Add help information for the "criteria" field
// DONETODO: Add help info for mozilla backpack displayer

// TODO: Change values for mail
// TODO: Maybe ? Can delete a badge if there's only one revision and nobody earned it

// DONETODO: Export new view
// DONETODO: Export hidden fields for profile page
// DONETODO: Export hidden fields for course info panel
// DONETODO: Export the help text for criteria in Openbadge content type fields
