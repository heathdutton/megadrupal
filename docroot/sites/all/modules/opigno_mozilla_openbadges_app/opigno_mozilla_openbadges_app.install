<?php


/**
 * Implements hook_install().
 */
function opigno_mozilla_openbadges_app_install() {

  ////////////////////////////////////////////////
  ////////                                  //////
  ////////      CREATING CONTENT TYPE       //////
  ////////                                  //////
  ////////////////////////////////////////////////
  $types = openbadges_content_types();
  foreach ($types as $typeName => $typeValues)
  {
    $loadedType = node_type_load($typeName);
    if (empty($loadedType)) {
      $typeDefault = node_type_set_defaults($typeValues);
      node_type_save($typeDefault);
    }
  }

  ////////////////////////////////////////////////
  ////////                                  //////
  ////////      SETTING CONTENT TYPE        //////
  ////////                                  //////
  ////////////////////////////////////////////////
  $variables = openbadges_content_type_variables();
  foreach ($variables as $varName => $varValues)
  {
    variable_set($varName, $varValues->value);
  }

  include_once drupal_get_path('module', 'og') . '/og_ui/og_ui.module';
  if (function_exists('og_ui_node_type_save')) {
    variable_set('og_group_content_type_openbadge', TRUE);
    og_ui_node_type_save('openbadge');
  }


  ////////////////////////////////////////////////
  ////////                                  //////
  ////////      CREATING FIELD BASE         //////
  ////////                                  //////
  ////////////////////////////////////////////////
  $fieldsBase = openbadges_field_bases();
  foreach ($fieldsBase as $fieldName => $fieldValues)
  {
    $fieldLoaded = field_info_field($fieldName);
    if (empty($fieldLoaded)) {
      field_create_field($fieldValues);
    }
  }


  ////////////////////////////////////////////////
  ////////                                  //////
  ////////      CREATING FIELD INSTANCES    //////
  ////////                                  //////
  ////////////////////////////////////////////////
  $instances = openbadges_field_instances();
  foreach ($instances as $instanceName => $instanceValues)
  {
    $instanceLoaded = field_info_instance($instanceValues['entity_type'], $instanceValues['field_name'], $instanceValues['bundle']);
    if (empty($instanceLoaded))
      field_create_instance($instanceValues);
  }


  ////////////////////////////////////////////////
  ////////                                  //////
  ////////      CREATING FIELD GROUPS       //////
  ////////                                  //////
  ////////////////////////////////////////////////
  ctools_include('export');
  $fieldGroups = openbadges_fields_groups();
  foreach ($fieldGroups as $groupName => $groupValues)
  {
    if (!field_group_exists($groupValues->group_name, $groupValues->entity_type, $groupValues->bundle, $groupValues->mode))
    {
      $groupDatas = (object) array_merge((array) $groupValues, $groupValues->data);
      field_group_group_save($groupDatas);
      ctools_export_crud_enable('field_group', $groupValues->identifier);
    }
  }

  if (function_exists('opigno_lms_refresh_strings_and_import')) {
    opigno_lms_refresh_strings_and_import(array('field'));
  }
}


/**
 * Implements hook_schema().
 */
function opigno_mozilla_openbadges_app_schema()
{
  include_once(drupal_get_path('module', 'opigno_mozilla_openbadges_app') .'/includes/backpack_connect/storage/backpackconnectdb.opigno_mozilla_openbadges_app.inc');
  include_once(drupal_get_path('module', 'opigno_mozilla_openbadges_app') .'/includes/backpack_displayer/storage/backpackdisplayercollectiondb.opigno_mozilla_openbadges_app.inc');
  include_once(drupal_get_path('module', 'opigno_mozilla_openbadges_app') .'/includes/backpack_displayer/storage/backpackdisplayerdb.opigno_mozilla_openbadges_app.inc');
  return array(
    BackpackConnectDb::TABLE_NAME => array(
      'fields' => array(
        BackpackConnectDb::FIELD_UID => array(
          'description' => 'The user ID',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE
        ),
        BackpackConnectDb::FIELD_ACCESS_TOKEN => array(
          'description' => 'The access token',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE
        ),
        BackpackConnectDb::FIELD_REFRESH_TOKEN => array(
          'description' => 'The token to use to refresh the access token',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE
        ),
        BackpackConnectDb::FIELD_EXPIRES_TIMESTAMP => array(
          'description' => 'The date (timestamp format) from when the access token will be unvalid',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE
        ),
        BackpackConnectDb::FIELD_API_ROOT => array(
          'description' => 'The API root of the used backpack',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE
        ),
        BackpackConnectDb::FIELD_RECIPIENT => array(
          'description' => 'The recipient to add to the json file',
          'type' => 'varchar',
          'length' => 500,
          'not null' => TRUE
        )
      ),
      'indexes' => array(
        BackpackConnectDb::FIELD_UID => array(BackpackConnectDb::FIELD_UID),
        BackpackConnectDb::FIELD_API_ROOT => array(BackpackConnectDb::FIELD_API_ROOT)
      ),
      'primary key' => BackpackConnectDb::getPrimaryKey()
    ),

    BackpackDisplayerDb::TABLE_NAME => array(
      'fields' => array(
        BackpackDisplayerDb::FIELD_UID => array(
          'description' => 'The internal user ID',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE
        ),
        BackpackDisplayerDb::FIELD_BACKPACK_USER_ID => array(
          'description' => 'The backpack user ID',
          'type' => 'int',
          'not null' => TRUE
        ),
      ),
      'indexes' => array(
        BackpackDisplayerDb::FIELD_UID => array(BackpackDisplayerDb::FIELD_UID)
      ),
      'primary key' => BackpackDisplayerDb::getPrimaryKey()
    ),

    BackpackDisplayerCollectionDb::TABLE_NAME => array(
      'fields' => array(
        BackpackDisplayerCollectionDb::FIELD_UID => array(
          'description' => 'The internal user ID',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE
        ),
        BackpackDisplayerCollectionDb::FIELD_COLLECTION_ID => array(
          'description' => 'The backpack external collection ID',
          'type' => 'int',
          'not null' => TRUE
        )
      ),
      'indexes' => array(
        BackpackDisplayerCollectionDb::FIELD_UID => array(BackpackDisplayerCollectionDb::FIELD_UID)
      ),
      'primary key' => BackpackDisplayerCollectionDb::getPrimaryKey()
    )
  );
}



/**
 * Array of content types
 */
function openbadges_content_types() {
  $items = array(
    'openbadge' => array(
      'type' => 'openbadge',
      'name' => 'Openbadges',
      'base' => 'node_content',
      'description' => st('A badge is a reward for a student when he pass a course or a class.'),
      'has_title' => '1',
      'title_label' => st('Name'),
      'help' => ''
    ),
  );
  return $items;
}

/**
 * Array of default variables for the content types
 */
function openbadges_content_type_variables() {
  $export = array();

  $strongarm = new stdClass();
  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
  $strongarm->api_version = 1;
  $strongarm->name = 'comment_openbadge';
  $strongarm->value = 1;
  $export['comment_openbadge'] = $strongarm;

  $strongarm = new stdClass();
  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
  $strongarm->api_version = 1;
  $strongarm->name = 'node_options_openbadge';
  $strongarm->value = array(
    0 => 'status',
    1 => 'revision',
  );
  $export['node_options_openbadge'] = $strongarm;

  $strongarm = new stdClass();
  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
  $strongarm->api_version = 1;
  $strongarm->name = 'print_display_openbadge';
  $strongarm->value = 0;
  $export['print_display_openbadge'] = $strongarm;

  $strongarm = new stdClass();
  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
  $strongarm->api_version = 1;
  $strongarm->name = 'print_display_urllist_openbadge';
  $strongarm->value = 0;
  $export['print_display_urllist_openbadge'] = $strongarm;

  $strongarm = new stdClass();
  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
  $strongarm->api_version = 1;
  $strongarm->name = 'print_pdf_display_openbadge';
  $strongarm->value = 0;
  $export['print_pdf_display_openbadge'] = $strongarm;

  $strongarm = new stdClass();
  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
  $strongarm->api_version = 1;
  $strongarm->name = 'print_pdf_display_urllist_openbadge';
  $strongarm->value = 0;
  $export['print_pdf_display_urllist_openbadge'] = $strongarm;

  return $export;
}

/**
 * Array of field bases
 */
function openbadges_field_bases() {
  $field_bases = array();

  // Exported field_base: 'field_badge_active'
  $field_bases['field_badge_active'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_active',
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'list',
    'settings' => array(
      'allowed_values' => array(
        0 => '',
        1 => '',
      ),
      'allowed_values_function' => '',
    ),
    'translatable' => 0,
    'type' => 'list_boolean',
  );

  // Exported field_base: 'field_badge_criteria'
  $field_bases['field_badge_criteria'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_criteria',
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'text_with_summary',
  );

  // Exported field_base: 'field_badge_description'
  $field_bases['field_badge_description'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_description',
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'text_long',
  );

  // Exported field_base: 'field_badge_image'
  $field_bases['field_badge_image'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_image',
    'foreign keys' => array(
      'fid' => array(
        'columns' => array(
          'fid' => 'fid',
        ),
        'table' => 'file_managed',
      ),
    ),
    'indexes' => array(
      'fid' => array(
        0 => 'fid',
      ),
    ),
    'locked' => 0,
    'module' => 'image',
    'settings' => array(
      'default_image' => 0,
      'uri_scheme' => 'public',
    ),
    'translatable' => 0,
    'type' => 'image',
  );

  // Exported field_base: 'field_badge_mail_notification'
  $field_bases['field_badge_mail_notification'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_mail_notification',
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'list',
    'settings' => array(
      'allowed_values' => array(
        0 => 'Do not send a mail',
        1 => 'Send a mail',
      ),
      'allowed_values_function' => '',
    ),
    'translatable' => 0,
    'type' => 'list_boolean',
  );

  // Exported field_base: 'field_badge_ref'
  $field_bases['field_badge_ref'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_ref',
    'foreign keys' => array(
      'node' => array(
        'columns' => array(
          'target_id' => 'nid',
        ),
        'table' => 'node',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(
          'openbadge' => 'openbadge',
        ),
      ),
      'target_type' => 'node',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Exported field_base: 'field_badge_sync_auto'
  $field_bases['field_badge_sync_auto'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_sync_auto',
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'list',
    'settings' => array(
      'allowed_values' => array(
        0 => '',
        1 => '',
      ),
      'allowed_values_function' => '',
    ),
    'translatable' => 0,
    'type' => 'list_boolean',
  );

  // Exported field_base: 'field_badge_visibility'
  $field_bases['field_badge_visibility'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_badge_visibility',
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'list',
    'settings' => array(
      'allowed_values' => array(
        0 => 'Hidden',
        1 => 'Visible',
      ),
      'allowed_values_function' => '',
    ),
    'translatable' => 0,
    'type' => 'list_boolean',
  );

  // Exported field_base: 'og_group_ref'
  $field_bases['og_group_ref'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'og_group_ref',
    'foreign keys' => array(),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'og',
      'handler_settings' => array(
        'behaviors' => array(
          'og_behavior' => array(
            'status' => TRUE,
          ),
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'membership_type' => 'og_membership_type_default',
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'handler_submit' => 'Change handler',
      'target_type' => 'node',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  return $field_bases;
}

/**
 * Array of field instances
 */
function openbadges_field_instances() {
  $field_instances = array();

  // Exported field_instance: 'node-class-field_badge_active'
  $field_instances['node-class-field_badge_active'] = array(
    'bundle' => 'class',
    'default_value' => array(
      0 => array(
        'value' => 0,
      ),
    ),
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'list',
        'settings' => array(),
        'type' => 'list_default',
        'weight' => 18,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_badge_active',
    'label' => 'Activate badge system for this class',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'display_label' => 1,
      ),
      'type' => 'options_onoff',
      'weight' => 42,
    ),
  );

  // Exported field_instance: 'node-class-field_badge_ref'
  $field_instances['node-class-field_badge_ref'] = array(
    'bundle' => 'class',
    'default_value_function' => '',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'entityreference_label',
        'weight' => 19,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_badge_ref',
    'label' => 'Badge',
    'required' => 0,
    'settings' => array(
      'behaviors' => array(
        'prepopulate' => array(
          'status' => 0,
        ),
      ),
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'inline_entity_form',
      'settings' => array(
        'fields' => array(),
        'type_settings' => array(
          'allow_existing' => 0,
          'delete_references' => 0,
          'label_plural' => 'badges',
          'label_singular' => 'badge',
          'match_operator' => 'CONTAINS',
          'override_labels' => 1,
        ),
      ),
      'type' => 'inline_entity_form',
      'weight' => 43,
    ),
  );

  // Exported field_instance: 'node-course-field_badge_active'
  $field_instances['node-course-field_badge_active'] = array(
    'bundle' => 'course',
    'default_value' => array(
      0 => array(
        'value' => 0,
      ),
    ),
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 12,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_badge_active',
    'label' => 'Activate badge system for this course',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'display_label' => 1,
      ),
      'type' => 'options_onoff',
      'weight' => 45,
    ),
  );

  // Exported field_instance: 'node-course-field_badge_ref'
  $field_instances['node-course-field_badge_ref'] = array(
    'bundle' => 'course',
    'default_value_function' => '',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 9,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_badge_ref',
    'label' => 'Badge',
    'required' => 0,
    'settings' => array(
      'behaviors' => array(
        'prepopulate' => array(
          'status' => 0,
        ),
      ),
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'inline_entity_form',
      'settings' => array(
        'fields' => array(),
        'type_settings' => array(
          'allow_existing' => 0,
          'delete_references' => 0,
          'label_plural' => 'badges',
          'label_singular' => 'badge',
          'match_operator' => 'CONTAINS',
          'override_labels' => 1,
        ),
      ),
      'type' => 'inline_entity_form',
      'weight' => 46,
    ),
  );

  // Exported field_instance: 'node-openbadge-field_badge_criteria'
  $field_instances['node-openbadge-field_badge_criteria'] = array(
    'bundle' => 'openbadge',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Write here the criteria needed to get the badge.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 3,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_badge_criteria',
    'label' => 'Badge criteria',
    'required' => 1,
    'settings' => array(
      'display_summary' => 0,
      'text_processing' => 1,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 20,
        'summary_rows' => 5,
      ),
      'type' => 'text_textarea_with_summary',
      'weight' => 5,
    ),
  );

  // Exported field_instance: 'node-openbadge-field_badge_description'
  $field_instances['node-openbadge-field_badge_description'] = array(
    'bundle' => 'openbadge',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 1,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_badge_description',
    'label' => 'Badge description',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 5,
      ),
      'type' => 'text_textarea',
      'weight' => 3,
    ),
  );

  // Exported field_instance: 'node-openbadge-field_badge_image'
  $field_instances['node-openbadge-field_badge_image'] = array(
    'bundle' => 'openbadge',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'image',
        'settings' => array(
          'image_link' => '',
          'image_style' => '',
        ),
        'type' => 'image',
        'weight' => 2,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_badge_image',
    'label' => 'Badge image',
    'required' => 1,
    'settings' => array(
      'alt_field' => 0,
      'default_image' => 0,
      'file_directory' => 'badges',
      'file_extensions' => 'png',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'title_field' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'image',
      'settings' => array(
        'preview_image_style' => 'thumbnail',
        'progress_indicator' => 'throbber',
      ),
      'type' => 'image_image',
      'weight' => 4,
    ),
  );

  // Exported field_instance: 'node-openbadge-og_group_ref'
  $field_instances['node-openbadge-og_group_ref'] = array(
    'bundle' => 'openbadge',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'og_ui',
        'settings' => array(),
        'type' => 'og_list_default',
        'weight' => 0,
      ),
      'question' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'og_group_ref',
    'label' => 'Groups audience',
    'required' => FALSE,
    'settings' => array(
      'behaviors' => array(
        'og_widget' => array(
          'admin' => array(
            'widget_type' => 'entityreference_autocomplete',
          ),
          'default' => array(
            'widget_type' => 'options_select',
          ),
          'status' => TRUE,
        ),
      ),
      'user_register_form' => FALSE,
    ),
    'view modes' => array(
      'full' => array(
        'custom settings' => FALSE,
        'label' => 'Full',
        'type' => 'og_list_default',
      ),
      'teaser' => array(
        'custom settings' => FALSE,
        'label' => 'Teaser',
        'type' => 'og_list_default',
      ),
    ),
    'widget' => array(
      'module' => 'og',
      'settings' => array(),
      'type' => 'og_complex',
      'weight' => 31,
    ),
  );

  // Exported field_instance: 'user-user-field_badge_mail_notification'
  $field_instances['user-user-field_badge_mail_notification'] = array(
    'bundle' => 'user',
    'default_value' => array(
      0 => array(
        'value' => 0,
      ),
    ),
    'deleted' => 0,
    'description' => 'You can receive an email when you earn a new badge.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 5,
      ),
    ),
    'entity_type' => 'user',
    'field_name' => 'field_badge_mail_notification',
    'label' => 'Notify me by email when I earn a new badge',
    'required' => 0,
    'settings' => array(
      'user_register_form' => 0,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'display_label' => 1,
      ),
      'type' => 'options_onoff',
      'weight' => 3,
    ),
  );

  // Exported field_instance: 'user-user-field_badge_sync_auto'
  $field_instances['user-user-field_badge_sync_auto'] = array(
    'bundle' => 'user',
    'default_value' => array(
      0 => array(
        'value' => 0,
      ),
    ),
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 6,
      ),
    ),
    'entity_type' => 'user',
    'field_name' => 'field_badge_sync_auto',
    'label' => 'Synchronize new badge automatically with the backpack',
    'required' => 0,
    'settings' => array(
      'user_register_form' => 0,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'display_label' => 1,
      ),
      'type' => 'options_onoff',
      'weight' => 4,
    ),
  );

  // Exported field_instance: 'user-user-field_badge_visibility'
  $field_instances['user-user-field_badge_visibility'] = array(
    'bundle' => 'user',
    'default_value' => array(
      0 => array(
        'value' => 1,
      ),
    ),
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 4,
      ),
    ),
    'entity_type' => 'user',
    'field_name' => 'field_badge_visibility',
    'label' => 'Show badges on my profile',
    'required' => 0,
    'settings' => array(
      'user_register_form' => 0,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'display_label' => 1,
      ),
      'type' => 'options_onoff',
      'weight' => 2,
    ),
  );

  st('Activate badge system for this class');
  st('Activate badge system for this course');
  st('Badge');
  st('Badge criteria');
  st('Badge description');
  st('Badge image');
  st('Groups audience');
  st('Notify me by email when I earn a new badge');
  st('Show badges on my profile');
  st('Synchronize new badge automatically with the backpack');
  st('Write here the criteria needed to get the badge.');
  st('You can receive an email when you earn a new badge.');

  return $field_instances;
}

/**
 * Array of field groups
 */
function openbadges_fields_groups() {
  $export = array();

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_badge_settings|node|class|form';
  $field_group->group_name = 'group_badge_settings';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'class';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Badge settings',
    'weight' => '12',
    'children' => array(
      0 => 'field_badge_active',
      1 => 'field_badge_ref',
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'label' => 'Badge settings',
      'instance_settings' => array(
        'required_fields' => 0,
        'classes' => 'group-badge-settings field-group-tab',
        'description' => '',
      ),
      'formatter' => 'closed',
    ),
  );
  $export['group_badge_settings|node|class|form'] = $field_group;

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_badge_settings|node|course|form';
  $field_group->group_name = 'group_badge_settings';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'course';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Badge settings',
    'weight' => '12',
    'children' => array(
      0 => 'field_badge_active',
      1 => 'field_badge_ref',
      2 => 'field_badge_ref_un_test',
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'label' => 'Badge settings',
      'instance_settings' => array(
        'required_fields' => 0,
        'classes' => 'group-badge-settings field-group-tab',
        'description' => '',
      ),
      'formatter' => 'closed',
    ),
  );
  $export['group_badge_settings|node|course|form'] = $field_group;

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_badge_settings|user|user|form';
  $field_group->group_name = 'group_badge_settings';
  $field_group->entity_type = 'user';
  $field_group->bundle = 'user';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Badge',
    'weight' => '1',
    'children' => array(
      0 => 'field_badge_visibility',
      1 => 'field_badge_mail_notification',
      2 => 'field_badge_sync_auto',
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'formatter' => 'collapsible',
      'instance_settings' => array(
        'description' => '',
        'classes' => 'group-badge-settings field-group-fieldset',
        'required_fields' => 1,
      ),
    ),
  );
  $export['group_badge_settings|user|user|form'] = $field_group;

  return $export;
}