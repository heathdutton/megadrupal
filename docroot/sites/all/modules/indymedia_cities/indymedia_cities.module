<?php
// $Id: indymedia_cities.module,v 1.1.6.3 2011/01/05 23:48:02 mfb Exp $

/**
 * @file
 * Makes and updates cities list block.
 */

/**
 * Implements hook_init.
 */
function indymedia_cities_init() {
  switch (variable_get('indymedia_cities_style_block', 'item_list')) {
    case 'accordion':
      drupal_add_library('system', 'ui.accordion');
      drupal_add_js(drupal_get_path('module', 'indymedia_cities') . '/indymedia_cities.js');
      drupal_add_css(drupal_get_path('module', 'indymedia_cities') . '/indymedia_cities.css');
      break;
    case 'fieldset':
      drupal_add_library('system', 'drupal.collapse');
      break;
  }
}

/**
 * Implements hook_menu.
 */
function indymedia_cities_menu() {
  $items['admin/config/services/indymedia/cities'] = array(
    'title' => 'Indymedia cities list',
    'description' => 'Makes and updates cities list block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('indymedia_cities_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'indymedia_cities.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info.
 */
function indymedia_cities_block_info() {
  $blocks[LANGUAGE_NONE]['info'] = t('Cities list (language auto-detect)');
  $blocks[LANGUAGE_NONE]['cache'] = DRUPAL_CACHE_GLOBAL;
  foreach (variable_get('indymedia_cities_languages', array('en' => 1)) as $language => $status) {
    if ($status) {
      $blocks[$language]['info'] = t('Cities list (@language)', array('@language' => $language));
      $blocks[$language]['cache'] = DRUPAL_CACHE_GLOBAL;
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view.
 */
function indymedia_cities_block_view($langcode = LANGUAGE_NONE) {
  global $language;
  if ($langcode == LANGUAGE_NONE) {
    $languages = variable_get('indymedia_cities_languages', array('en' => 1));
    $langcode = !empty($languages[$language->language]) ? $language->language : 'en';
  }
  $style = variable_get('indymedia_cities_style_block', 'item_list');
  return array(
    'subject' => t('Global IMC Network'),
    'content' => indymedia_cities_list($langcode, $style),
  );
}

/**
 * Implements hook_cron.
 */
function indymedia_cities_cron() {
  module_load_include('cron.inc', 'indymedia_cities');
  indymedia_cities_refresh();
}

/**
 * Returns the available versions of the cities list.
 */
function indymedia_cities_languages() {
  return array(
    'de' => 'http://www.indymedia.org/cities.de.xml',
    'en' => 'http://www.indymedia.org/cities.xml',
    'es' => 'http://www.indymedia.org/cities.es.xml',
    'fr' => 'http://www.indymedia.org/cities.fr.xml',
    'it' => 'http://www.indymedia.org/cities.it.xml',
    'nl' => 'http://www.indymedia.org/cities.nl.xml',
  );
}

/**
 * Implements hook_theme()
 */
function indymedia_cities_theme() {
  return array(
    'indymedia_cities_list' => array(
      'variables' => array('simplexml' => NULL, 'style' => 'item_list'),
      'file' => 'indymedia_cities.theme.inc',
    ),
    'indymedia_cities_item_list' => array(
      'variables' => array('items' => NULL),
      'file' => 'indymedia_cities.theme.inc',
    ),
    'indymedia_cities_fieldset' => array(
      'variables' => array('items' => NULL),
      'file' => 'indymedia_cities.theme.inc',
    ),
    'indymedia_cities_accordion' => array(
      'variables' => array('items' => NULL),
      'file' => 'indymedia_cities.theme.inc',
    ),
  );
}

/**
 * Return the cities list in HTML format.
 */
function indymedia_cities_list($language = 'en', $style = 'item_list') {
  $cache = cache_get('indymedia_cities:xml:' . $language);
  if (empty($cache)) {
    module_load_include('cron.inc', 'indymedia_cities');
    $cache = indymedia_cities_update($language);
  }
  return theme('indymedia_cities_list', array('simplexml' => empty($cache) ? NULL : simplexml_load_string($cache->data), 'style' => $style));
}
