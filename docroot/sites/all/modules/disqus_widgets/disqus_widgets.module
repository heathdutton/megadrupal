<?php
/**
 * @file
 * Implements Disqus widgets using the 3.0 API.
 */

require_once __DIR__ . '/disqus_widgets.helpers.inc';
require_once __DIR__ . '/disqus_widgets.block.inc';

/**
 * Implements hook_libraries_info().
 */
function disqus_widgets_libraries_info() {

  $libraries = array();

  $libraries['disqus-php'] = array(
    'name' => 'Disqus',
    'vendor url' => 'http://disqus.com',
    'download url' => 'https://github.com/disqus/disqus-php',
    'xautoload' => function ($api) {

      $plugin = new Drupal\disqus_widgets\xautoload\disqusWidgetsLibraryFinderPlugin('sites/all/libraries/disqus-php');

      $api->namespacePlugin('Disqus', $plugin);
    },
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function disqus_widgets_block_info() {

  $blocks = array();

  $blocks['disqus_recent'] = array(
    'info' => t('Disqus Recent Comments'),
    'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['disqus_recent_global'] = array(
    'info' => t('Disqus Global Recent Comments'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['disqus_comment_area'] = array(
    'info' => t('Disqus Comment Area'),
    'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function disqus_widgets_block_view($delta = '') {

  switch ($delta) {

    case 'disqus_recent':
      return disqus_widgets_disqus_recent_block_view();

    case 'disqus_recent_global':
      return disqus_widgets_disqus_recent_global_block_view();

    case 'disqus_comment_area':
      return disqus_widgets_disqus_comment_area_view();
  }
}

/**
 * Implements hook_theme().
 */
function disqus_widgets_theme($existing, $type, $theme, $path) {

  $themes = array();

  $themes['disqus_widgets_comment'] = array(
    'variables' => array(
      'comment' => NULL,
      'message' => NULL,
      'author' => NULL,
      'date' => NULL,
    ),
    'template' => 'disqus-widgets-comment',
    'path' => $path . '/theme',
  );

  $themes['disqus_widgets_author'] = array(
    'variables' => array('author' => NULL),
    'template' => 'disqus-widgets-author',
    'path' => $path . '/theme',
  );

  $themes['disqus_widgets_message'] = array(
    'variables' => array('comment' => NULL, 'message' => NULL),
    'template' => 'disqus-widgets-message',
    'path' => $path . '/theme',
  );

  $themes['disqus_widgets_comment_date'] = array(
    'variables' => array('comment' => NULL, 'date' => NULL),
    'template' => 'disqus-widgets-comment-date',
    'path' => $path . '/theme',
  );

  $themes['disqus_widgets_comment_area'] = array(
    'variables' => array('shortname' => NULL, 'identifier' => NULL),
    'template' => 'disqus-widgets-comment-area',
    'path' => $path . '/theme',
  );

  return $themes;
}

/**
 * Implements hook_menu().
 */
function disqus_widgets_menu() {

  $items = array();

  $items['admin/config/services/disqus'] = array(
    'title' => t('Disqus'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('disqus_widgets_disqus_admin_view'),
    'access arguments' => array('administer disqus_widgets settings'),
    'file' => 'disqus_widgets.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function disqus_widgets_permission() {

  return array(
    'administer disqus_widgets settings' => array(
      'title' => t('Administer Disqus Widgets'),
      'description' => t('Allows the user to administer the configuration settings of the Disqus widgets.'),
    ),
  );
}

/**
 * Implements hook_preprocess_disqus_widgets_comment().
 */
function disqus_widgets_preprocess_disqus_widgets_comment_date(&$variables) {

  /*
    Comments come from Disqus without a timezone specified, so we tweak the
    data a bit here to include a UTC timezone.
   */
  $comment = $variables['comment'];
  $date = &$variables['date'];
  $date = format_date(strtotime($comment->createdAt . ' UTC'), 'short');
}
