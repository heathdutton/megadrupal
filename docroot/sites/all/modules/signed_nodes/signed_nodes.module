<?php
/**
 * @file
 * The main signed_nodes control module file,
 * which controls the creation of node agreements and user signatures to those agreements.
 *
 */

/**
 * Implementation of hook_perm().
 */
function signed_nodes_perm() {
  return array('administer signed nodes', 'view signed nodes reports');
}

/**
 * To implement the popup for users who have not signed the agreement, we use
 * dialog function of jquery.ui
 * Implementation of hook_init().
 */
function signed_nodes_init() {
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js(drupal_get_path('module', 'signed_nodes') . '/signed_nodes.js');
}

/**
 * Implementation of hook_menu().
 */
function signed_nodes_menu() {
  $items['admin/config/content/signed_nodes'] = array(
    'title' => 'Signed Nodes',
    'access arguments' => array('administer signed nodes'),
    'page callback' => 'signed_nodes_overview',
    'description' => 'Allows the creation of signature nodes.',
    'file' => 'signed_nodes.admin.inc',
  );
  $items['admin/config/content/signed_nodes/edit'] = array(
    'title' => 'Edit signed nodes',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer signed nodes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signed_nodes_edit_form'),
    'file' => 'signed_nodes.admin.inc',
  );
  $items['admin/config/content/signed_nodes/list'] = array(
    'title' => 'List',
    'weight' => -10,
    'access arguments' => array('administer signed nodes'),
    'page callback' => 'signed_nodes_overview',
    'file' => 'signed_nodes.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/content/signed_nodes/add'] = array(
    'title' => 'Add signed nodes',
    'weight' => -8,
    'access arguments' => array('administer signed nodes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signed_nodes_add_form'),
    'file' => 'signed_nodes.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/signed_nodes/delete'] = array(
    'title' => 'Delete signed nodes',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer signed nodes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signed_nodes_delete_form'),
    'file' => 'signed_nodes.admin.inc',
  );

  $items['signed_nodes'] = array(
    'title' => 'Signed Nodes Reports',
    'access arguments' => array('view signed nodes reports'),
    'page callback' => 'signed_nodes_report_overview',
    'file' => 'signed_nodes.pages.inc',
  );
  $items['signed_nodes/report'] = array(
    'title' => 'Reports',
    'access arguments' => array('view signed nodes reports'),
    'page callback' => 'signed_nodes_report_overview',
    'file' => 'signed_nodes.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['signed_nodes/report/signed'] = array(
    'title' => 'Reports: User Signature Completed',
    'type' => MENU_CALLBACK,
    'access arguments' => array('view signed nodes reports'),
    'page callback' => 'signed_nodes_report_signed',
    'file' => 'signed_nodes.pages.inc',
  );

  $items['signed_nodes/report/pending'] = array(
    'title' => 'Reports: User Signature Pending',
    'type' => MENU_CALLBACK,
    'access arguments' => array('view signed nodes reports'),
    'page callback' => 'signed_nodes_report_pending',
    'file' => 'signed_nodes.pages.inc',
  );

  return $items;
}
/**
 * Get a single agreement.
 *
 * @param $snid
 *   The agreement id called signed_node id
 *
 * @return
 *   returns an agreement with all its elements as object.
 */
function signed_nodes_load_all($snid) {
  $result = db_query("SELECT * FROM {signed_nodes} where snid = :snid", array(':snid' => $snid));
  $items = array();

  foreach ($result as $row) {
    $items[] = $row;
  }

  return $items[0];
}

/**
 * Get agreements for all nodes.
 *
 * @return
 *   returns an array of all agreements created by admin with all its elements as object.
 */
function signed_nodes_get_all() {
  $signed_nodes = array();
  $result = db_query("SELECT snid, nid, year FROM {signed_nodes}");
  $items = array();

  foreach ($result as $row) {
    $items[$row->snid] = $row;
  }

  return $items;
}

/**
 * Get node-id of an agreement.
 *
 * @param $snid
 *   The agreement id called signed_node id
 *
 * @return
 *   returns a node id of an agreement.
 */
function signed_node_get_nid($snid) {
  return db_query("SELECT nid FROM {signed_nodes} WHERE snid = :snid", array(':snid' => $snid))->fetchField();
}

/**
 * Get agreement year set up for a node.
 *
 * @param $nid
 *   The node id of an agreement
 *
 * @return
 *   returns an agreement year of a particular node.
 */
function signed_nodes_get_year($nid) {
  $signed_nodes = array();
  $result = db_query("SELECT snid, year FROM {signed_nodes} WHERE nid = :nid", array(':nid' => $nid));
  $items = array();

  foreach ($result as $row) {
    $items[$row->snid] = $row->year;
  }

  return $items;

}

/**
 * Deletes an agreement and its related signed user data.
 *
 * @param $snid
 *   The agreement id called signed_node id
 */
function signed_nodes_delete_agreement($snid) {
  db_delete('signed_nodes')->condition('snid', $snid)->execute();
  db_delete('signed_nodes_user')->condition('snid', $snid)->execute();
}


/**
 * Implementation of hook_view().
 */
function signed_nodes_node_view($node, $view_mode, $langcode) {
  global $user;
  if ($view_mode == 'full') {
    if ($node->nid) {
      $snid = db_query("SELECT snid FROM {signed_nodes} where nid = :nid and year = :year", array(':nid' => $node->nid, ':year' => date('Y')))->fetchField();
      //krumo($snid);
      if ($snid && $user->uid > 0) {
        $agreed = db_query("SELECT 1 FROM {signed_nodes_user} where snid = :snid and uid = :uid", array(':snid' => $snid, ':uid' => $user->uid))->fetchField();
        //krumo($agreed);
        if (!$agreed) {
          $output = drupal_get_form('signed_nodes_nodeform', $snid);
          $output['#weight'] = 100;
          $node->content['form'] = $output;
        }
      }
    }
  }
}

/**
 * Creates an agreement form, if that node has an agreement setup.
 *
 * @param $snid
 *   The agreement id of an agreement
 *
 * @return
 *   returns an agreement as a form.
 */

function signed_nodes_nodeform($form, &$form_state, $snid) {

  if ($snid) {
    $agreement = db_query("SELECT agreement_message FROM {signed_nodes} where snid = :snid", array(':snid' => $snid))->fetchField();
    $form['snid'] = array(
    '#type' => 'hidden',
    '#value' => $snid,
  );
  }
  $form['agreementfieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Agreement'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['agreementfieldset']['agreement'] = array(
    '#type' => 'checkbox',
    '#required' => TRUE,
    '#title' => t($agreement),
  );
  $form['agreementfieldset']['button'] = array(
      '#value' => 'submit',
      '#type' => 'submit',
    );
  return $form;
}


/**
 * Validate the signed nodes user agreement from .
 *
 * @see signed_nodes_nodeform()
 */
function signed_nodes_nodeform_validate($form, &$form_state) {

  $agreement = $form_state['values']['agreement'];

  // Make sure user has checked the checkbox.
  if ($agreement == 0) {
    form_set_error('agreementfieldset', t('Please check the checkbox to agree to this node agreement.'));
  }
}

/**
 * Submit handler for the signed nodes user agreement from.
 *
 * @see signed_nodes_nodeform()
 */
function signed_nodes_nodeform_submit($form, &$form_state) {
  global $user;
  $record = array();
  $record['snid'] = $form_state['values']['snid'];
  $record['uid'] = $user->uid;
  drupal_write_record( 'signed_nodes_user', $record );
  watchdog('signed_nodes_user', 'User %name agreed to the terms of the SignedNode Agreement %snode', array('%name' => $user->name, '%snode' => $form_state['values']['snid']));
  drupal_set_message(t('You have agreed to the terms of this post.'), 'status');
}



/**
 * Implementation of hook_user_delete($account).
 * @todo Have to come up with logic if a user is deleted should we keep the signature or delete it.
function signed_nodes_user_delete($account) {
  // add some logic here
}*/