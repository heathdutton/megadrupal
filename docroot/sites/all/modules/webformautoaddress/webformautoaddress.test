<?php
/**
 * @file
 * Test case(s) for the Webform Auto Address module.
 */

/**
 * Tests different units (i.e., functions) of the Webform Auto Address module.
 */
class WebformAutoAddressUnitTest extends DrupalUnitTestCase {
  /**
   * Give the information to display to the SimpleTest system.
   *
   * @return string[]
   *   An associative array with the information for SimpleTest to show.
   */
  public static function getInfo() {
    return array(
      'name' => 'Webform Auto Address unit tests',
      'description' => 'Tests that all functions of the Webform Auto Address module works properly.',
      'group' => 'Webform Auto Address',
    );
  }

  /**
   * Test the function that parses the postal code.
   */
  public function testWebformAutoAddressParsePostalCode() {
    $result = webformautoaddress_parse_postal_code('');
    $this->assertTrue(empty($result), 'An empty postal code should return an empty result.');

    $result = webformautoaddress_parse_postal_code('1234');
    $this->assertTrue(empty($result), 'A postal code of only digits should return an empty result.');

    $result = webformautoaddress_parse_postal_code('AB');
    $this->assertTrue(empty($result), 'A postal code of alphabetic characters should return an empty result.');

    $result = webformautoaddress_parse_postal_code('123AB');
    $this->assertTrue(empty($result), 'A postal code missing digit(s) should return an empty result.');

    $result = webformautoaddress_parse_postal_code('12345AB');
    $this->assertTrue(empty($result), 'A postal code having more than four digits should return an empty result.');

    $result = webformautoaddress_parse_postal_code('1234A');
    $this->assertTrue(empty($result), 'A postal code missing alphabetic characters should return an empty result.');

    $result = webformautoaddress_parse_postal_code('1234ABC');
    $this->assertTrue(empty($result), 'A postal code having more than two alphabetic characters should return an empty result.');

    $result = webformautoaddress_parse_postal_code('AB1234');
    $this->assertTrue(empty($result), 'A postal code starting with alphabetic characters should return an empty result.');

    $result = webformautoaddress_parse_postal_code('1234AB');
    $this->assertEqual($result, '1234AB', '1234AB should be a correct postal code.');

    $result = webformautoaddress_parse_postal_code('1234ab');
    $this->assertEqual($result, '1234ab', '1234ab should be a correct postal code.');

    $result = webformautoaddress_parse_postal_code('1234aB');
    $this->assertEqual($result, '1234aB', '1234aB should be a correct postal code.');

    $result = webformautoaddress_parse_postal_code(' 1234AB');
    $this->assertEqual($result, '1234AB', 'Spaces in front of the postal code should be removed.');

    $result = webformautoaddress_parse_postal_code('1234AB ');
    $this->assertEqual($result, '1234AB', 'Spaces after the postal code should be removed.');

    $result = webformautoaddress_parse_postal_code('1234 AB');
    $this->assertEqual($result, '1234AB', 'Spaces in between the postal code should be removed.');
  }

  /**
   * Test the function that parses the house number.
   */
  public function testWebformAutoAddressParseHouseNumber() {
    $result = webformautoaddress_parse_house_number('');
    $this->assertTrue(empty($result[0]) && empty($result[1]), 'An empty house number should return an empty house number and addition.');

    $result = webformautoaddress_parse_house_number('1');
    $this->assertTrue($result[0] == '1' && empty($result[1]), 'A full house number with only a digit should return the house number and an empty addition.');

    $result = webformautoaddress_parse_house_number('12');
    $this->assertTrue($result[0] == '12' && empty($result[1]), 'A full house number with multiple digits should return the house number and an empty addition.');

    $result = webformautoaddress_parse_house_number('A');
    $this->assertTrue(empty($result[0]) && empty($result[1]), 'A full house number containing only an alphabetic character(s) should return an empty house number and addition.');

    $result = webformautoaddress_parse_house_number('A1');
    $this->assertTrue(empty($result[0]) && empty($result[1]), 'A full house number starting with an alphabetic character(s) should return an empty house number and addition.');

    $result = webformautoaddress_parse_house_number('1A');
    $this->assertTrue($result[0] == '1' && $result[1] == 'A', 'A full house number containing a digit and a alphabetic character should return the house number and the addition.');

    $result = webformautoaddress_parse_house_number('12A');
    $this->assertTrue($result[0] == '12' && $result[1] == 'A', 'A full house number containing multiple digits and a alphabetic character should return the house number and the addition.');

    $result = webformautoaddress_parse_house_number('1AB');
    $this->assertTrue($result[0] == '1' && $result[1] == 'AB', 'A full house number containing a digits and multiple alphabetic characters should return the house number and the addition.');

    $result = webformautoaddress_parse_house_number('12AB');
    $this->assertTrue($result[0] == '12' && $result[1] == 'AB', 'A full house number containing multiple digits and multiple alphabetic characters should return the house number and the addition.');

    $result = webformautoaddress_parse_house_number('12aB');
    $this->assertTrue($result[0] == '12' && $result[1] == 'aB', 'A full house number containing multiple digits and multiple alphabetic characters (of different case) should return the house number and the addition.');

    $result = webformautoaddress_parse_house_number(' 12AB');
    $this->assertTrue($result[0] == '12' && $result[1] == 'AB', 'Spaces in front of a full house number and should not be a problem.');

    $result = webformautoaddress_parse_house_number('12AB ');
    $this->assertTrue($result[0] == '12' && $result[1] == 'AB', 'Spaces after a full house number and should not be a problem.');

    $result = webformautoaddress_parse_house_number('12 AB');
    $this->assertTrue($result[0] == '12' && $result[1] == 'AB', 'Spaces in between the house number and addition should not be a problem.');

    $result = webformautoaddress_parse_house_number('12_AB');
    $this->assertTrue($result[0] == '12' && $result[1] == 'AB', 'Non digits and non alphabetic characters in between the house number and addition should not be a problem.');

    $result = webformautoaddress_parse_house_number('12 - AB');
    $this->assertTrue($result[0] == '12' && $result[1] == 'AB', 'Non digits, non alphabetic characters and spaces in between the house number and addition should not be a problem.');

    $result = webformautoaddress_parse_house_number('12_');
    $this->assertTrue($result[0] == '12' && empty($result[1]), 'Non alphabetic characters as addition should return the house number and an empty addition.');

    $result = webformautoaddress_parse_house_number('12 3');
    $this->assertTrue($result[0] == '12' && $result[1] == '3', 'An addition as a number should be valid.');

    $result = webformautoaddress_parse_house_number('12 3B');
    $this->assertTrue($result[0] == '12' && $result[1] == '3B', 'An addition as a number and alphabetic character should be valid.');
  }
}

/**
 * Tests the functionality of the Webform Auto Address module.
 */
class WebformAutoAddressFunctionalTest extends DrupalWebTestCase {
  /**
   * Provide the information to display to the SimpleTest system.
   *
   * @return string[]
   *   An associative array with the information for SimpleTest to show.
   */
  public static function getInfo() {
    return array(
      'name' => 'Webform Auto Address functional tests',
      'description' => 'Ensure that the auto address component in a webform functions properly.',
      'group' => 'Webform Auto Address',
    );
  }

  /**
   * Configure the Drupal test environment.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable the required modules for this test case.
    parent::setUp('webformautoaddress');
  }

  /**
   * Check if all (dependent) modules are enabled.
   */
  public function testWebformAutoAddressEnabledModules() {
    $this->assertTrue(module_exists('webform'), 'Module Webform should also be enabled.');
  }

  /**
   * Test creating a Webform and adding a Webform Auto Address component.
   *
   * A priviliged user creates a webform containing the Webform Auto Address
   * component. The webform is filled in by an anonymous user and the priviliged
   * user checks if the entered values are correctly processed and available in
   * results section.
   */
  public function testWebformAutoAddressCreateWebform() {
    // Setup a user that has priviliges to create a Webform.
    $this->priviliged_user = $this->drupalCreateUser(array(
      'create webform content',
      'edit own webform content',
      'access all webform results',
      'edit webform components',
    ));

    // Login the user.
    $this->drupalLogin($this->priviliged_user);

    // Create the node containing the webform (using the credentials of the
    // logged in user.
    $node_settings = array(
      'type' => 'webform',
    );
    $webform = $this->drupalCreateNode($node_settings);
    $this->assertTrue(!empty($webform->nid), 'Webform node has been be created.');

    // Add a Webform Auto Address component to the newly created node.
    $component = array(
      'add[name]' => $this->randomName(8),
      'add[type]' => 'address_auto',
    );
    $this->drupalPost('node/' . $webform->nid . '/webform/components', $component, t('Add'));
    $this->drupalPost(NULL, array(), t('Save component'));

    // Logout the user to check if an anonymous user can fill in the form.
    $this->drupalLogout();

    // As an anonymous user fill in the webform with a randomly created address.
    $address = array(
      'submitted[' . strtolower($component['add[name]']) . '][postal_code]' => $this->randomDutchPostalCode(),
      'submitted[' . strtolower($component['add[name]']) . '][house_number]' => $this->randomDutchHouseNumber(),
      'submitted[' . strtolower($component['add[name]']) . '][street_name]' => $this->randomName(14),
      'submitted[' . strtolower($component['add[name]']) . '][city]' => $this->randomName(8),
    );
    $this->drupalPost('node/' . $webform->nid, $address, t('Submit'));

    // The submission id of the form is provided in the returned URL.
    preg_match('~\?sid=(?P<submission_id>\d+)~', $this->getUrl(), $match);

    // Login with the priviliged user to see the results.
    $this->drupalLogin($this->priviliged_user);

    // Check if the results match the filled in data from the anonymous visitor.
    $this->drupalGet('node/' . $webform->nid . '/submission/' . $match['submission_id']);
    $this->assertText($address['submitted[' . strtolower($component['add[name]']) . '][postal_code]'], 'Found the postal code on the submission page.');
    $this->assertText($address['submitted[' . strtolower($component['add[name]']) . '][house_number]'], 'Found the house number on the submission page.');
    $this->assertText($address['submitted[' . strtolower($component['add[name]']) . '][street_name]'], 'Found the street name on the submission page.');
    $this->assertText($address['submitted[' . strtolower($component['add[name]']) . '][city]'], 'Found the city on the submission page.');
  }

  /**
   * Generate a random (Dutch) postal code.
   *
   * Since our module is focussed on autocompleting address information for The
   * Netherlands, this function generates a random Dutch postal code.
   *
   * @return string
   *   A randomly generated Dutch postal code existing of four digit and two
   *   uppercase alphabetic characters.
   */
  public function randomDutchPostalCode() {
    return mt_rand(1000, 9999) . strtoupper($this->randomName(2));
  }

  /**
   * Generate a random (Dutch) house number.
   *
   * Though house numbers (in The Netherlands) aren't described by a vast set of
   * rules, we generate one in the form of a few digits and (possibly) a couple
   * of alphabetic characters (the addition).
   *
   * @return string
   *   A randomly generated house number containing a few digits and alphabetic
   *   characters indicating the addition.
   */
  public function randomDutchHouseNumber() {
    return mt_rand(1, 2000) . strtoupper($this->randomName(mt_rand(0, 3)));
  }
}
