<?php

/**
 * @file
 * Hooks and helpers functions for Domain roles.
 */

/**
 * Implements hook_boot().
 */
function domain_roles_boot() {
  global $_domain, $user;
  if (_domain_roles_active($_domain, $user)) {
    $user->roles = _domain_roles_fetch($_domain, $user);
  }
}

/**
 * Function to return 'active' state for this user-domain combination.
 */
function _domain_roles_active($domain, $user) {
  return $user->uid && 1 != (int) $user->uid && isset($user->domain_user[$domain['domain_id']]);
}

/**
 * Function to get user roles by domain.
 */
function _domain_roles_fetch($domain, $user, $membersonly = FALSE) {
  $defaults = variable_get('domain_roles_role', array());
  $roles = db_query('SELECT rid,name FROM {role} order by rid')->fetchAllKeyed();
  $assigned_role = array();
  if (isset($defaults[0]['all']) && in_array($user->uid, $defaults[0]['all'])) {
    foreach ($roles as $rid => $role) {
      if ($defaults[$rid]['all'] != NULL) {
        $assigned_role[$rid] = $role;
      }
    }
    return $assigned_role;
  }
  elseif (isset($defaults[0][$domain['domain_id']]) && in_array($user->uid, $defaults[0][$domain['domain_id']])) {
    foreach ($roles as $rid => $role) {
      if ($defaults[$rid][$domain['domain_id']] != NULL) {
        $assigned_role[$rid] = $role;
      }
    }
    return $assigned_role;
  }
  elseif (!$membersonly) {
    $assigned_role[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';
    return $assigned_role;
  }
}

/**
 * Implements hook_menu().
 */
function domain_roles_menu() {
  $items = array();

  $items['admin/structure/domain/domain_roles'] = array(
    'title' => 'Domain Roles Settings',
    'description' => 'This will allow user to administer Domain based roles settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_roles_settings_form'),
    'access arguments' => array('administer domain roles'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['domain_roles/multiple_autocomplete'] = array(
    'title' => 'Multiple select auto complete',
    'page callback' => 'domain_roles_multiple_select_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer domain roles'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function domain_roles_permission() {
  return array(
    'administer domain roles' => array(
      'title' => t('administer domain roles'),
      'description' => t('This will allow user to administer domain based roles settings'),
    ),
  );
}

/**
 * Page callback for admin settings form.
 */
function domain_roles_settings_form($form, &$form_state) {
  $form = array();
  $roles = user_roles();
  $domains = array();
  $roles[0] = t('Users');
  ksort($roles);
  $defaults = variable_get('domain_roles_role', array());
  $form['domain_roles_role'] = array(
    '#tree' => TRUE,
  );
  foreach (domain_domains() as $key => $value) {
    $domains[$key] = $value['sitename'];
  }
  foreach ($roles as $rid => $role) {
    $form['domain_roles_role'][$rid]['#tree'] = TRUE;
    if ($rid == 0) {
      $form['domain_roles_role'][$rid]['all'] = array(
        '#title' => t('All domains'),
        '#type' => 'textfield',
        '#autocomplete_path' => 'domain_roles/multiple_autocomplete',
        '#default_value' => (isset($defaults[$rid]['all'])) ? domain_roles_get_users_data('all') : '',
      );
    }
    else {
      $form['domain_roles_role'][$rid]['all'] = array(
        '#title' => t('All domains'),
        '#type' => 'checkbox',
        '#default_value' => (isset($defaults[$rid]['all'])) ? $defaults[$rid]['all'] : 0,
      );
    }
    foreach ($domains as $domain_id => $domain) {
      if ($rid == 0) {
        $form['domain_roles_role'][$rid][$domain_id] = array(
          '#title' => filter_xss_admin($domain),
          '#type' => 'textfield',
          '#autocomplete_path' => 'domain_roles/multiple_autocomplete',
          '#default_value' => (isset($defaults[$rid][$domain_id])) ? domain_roles_get_users_data($domain_id) : '',
        );
      }
      else {
        $form['domain_roles_role'][$rid][$domain_id] = array(
          '#title' => filter_xss_admin($domain),
          '#type' => 'checkbox',
          '#default_value' => (isset($defaults[$rid][$domain_id])) ? $defaults[$rid][$domain_id] : 0,
        );
      }
    }
  }
  $form = system_settings_form($form);
  $form['#submit'][] = 'domain_roles_settings_form_submit';
  // System settings form adds a theme we cannot use.
  unset($form['#theme']);
  return $form;
}

/**
 * Custom Admin Setting Submit Callback.
 */
function domain_roles_settings_form_submit($form, &$form_state) {
  $domains = domain_domains();
  $domain_roles_role_data = array();
  $domain_roles_role_data = variable_get('domain_roles_role');
  $domain_roles_role_data[0]['all'] = domain_roles_get_uids($form_state['values']['domain_roles_role'][0]['all']);
  foreach ($domains as $domain_id => $domain) {
    $domain_roles_role_data[0][$domain_id] = domain_roles_get_uids($form_state['values']['domain_roles_role'][0][$domain_id]);
  }
  variable_set('domain_roles_role', $domain_roles_role_data);
}

/**
 * FormsAPI theming.
 */
function theme_domain_roles_settings_form($variables) {
  $form = $variables['form'];
  $output = '';
  $header = array(t('Domains'));
  $roles = array();
  $roles = user_roles();
  $roles[0] = t('Users');
  $rows = array();
  ksort($roles);
  $domains = domain_domains();
  foreach ($roles as $rid => $role) {
    $header[] = $role;
  }
  $row = array();
  $row[] = 'All Domains';
  foreach ($roles as $rid => $role) {
    $form['domain_roles_role'][$rid]['all']['#title'] = '';
    $row[] = drupal_render($form['domain_roles_role'][$rid]['all']);
  }
  $rows[] = $row;
  foreach ($domains as $domain_id => $domain) {
    $row = array();
    $row[] = isset($domains[$domain_id]) ? filter_xss_admin($domains[$domain_id]['sitename']) : '';
    foreach ($roles as $rid => $role) {
      $form['domain_roles_role'][$rid][$domain_id]['#title'] = '';
      $row[] = drupal_render($form['domain_roles_role'][$rid][$domain_id]);
    }
    $rows[] = $row;
  }
  $output = '<p>' . t('Domain Roles Settings Allows you to save user roles per domain.') . '</p>';
  $output .= '<p>' . t('Enter a comma seperated list of users.') . '</p>';
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Implements hook_theme().
 */
function domain_roles_theme($existing, $type, $theme, $path) {
  $themes = array(
    'domain_roles_settings_form' => array(
      'render element' => 'form',
    ),
  );
  return $themes;
}

/**
 * Function to Implement User Autocomplete in the configuration form().
 */
function domain_roles_multiple_select_autocomplete($string = '') {
  $array = drupal_explode_tags($string);
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
    $prefix = count($array) ? drupal_implode_tags($array) . ', ' : '';
    $query = db_select('users', 'u');
    $users_return = $query
      ->fields('u', array('uid', 'name'))
      ->condition('u.name', db_like($last_string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute()
      ->fetchAllKeyed();
    foreach ($users_return as $uid => $name) {
      $prefix = count($array) ? implode(', ', $array) . ',' : '';
      $matches[$prefix . $name . ':' . $uid] = check_plain($name);
    }
  }
  drupal_json_output($matches);
}

/**
 * Custom function to retrieve only uids from whole user_data(admin:1).
 */
function domain_roles_get_uids($users_data) {
  $uids = array();
  $users_data = explode(',', $users_data);
  foreach ($users_data as $record) {
    $user_data = array();
    $user_data = explode(':', $record);
    $uid = array_pop($user_data);
    $uids[] = $uid;
  }
  return $uids;
}

/**
 * Custom function to build user_data(admin:1).
 */
function domain_roles_get_users_data($domain_id) {
  $domain_roles_data = variable_get('domain_roles_role');
  $users = '';
  if ($domain_id == 'all' && $domain_roles_data[0]['all'][0] != NULL ) {
    $result = db_query("SELECT u.uid, u.name FROM {users} u where u.uid IN (:uid)", array(':uid' => $domain_roles_data[0]['all']));
    foreach ($result as $record) {
      $users .= $record->name . ':' . $record->uid . ',';
    }
  }
  else {
    if ($domain_roles_data[0][$domain_id][0] != NULL) {
      $result = db_query("SELECT u.uid,u.name FROM {users} u where u.uid IN (:uid)", array(':uid' => $domain_roles_data[0][$domain_id]));
      foreach ($result as $record) {
        $users .= $record->name . ':' . $record->uid . ',';
      }
    }
  }
  $users = trim($users, ',');
  if (empty($users)) {
    return;
  }
  return $users;
}
