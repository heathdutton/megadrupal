<?php

/**
 * @file
 * Main file for Entity Documentation module.
 */

/**
 * Implements hook_menu().
 */
function entity_documentation_menu() {

  // Documentation main page.
  $items['admin/config/development/entity-documentation'] = array(
    'title' => 'Entity Documentation',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Entity Documentation main page.',
    'page callback' => 'entity_documentation_types_page_callback',
    'access arguments' => array('administer entity documentation'),
    'file' => 'includes/entity_documentation.pages.inc',
    'weight' => 0,
  );

  // Chart Settings as tab.
  $items['admin/config/development/entity-documentation/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Settings.
  $items['admin/config/development/entity-documentation/settings'] = array(
    'title' => 'Settings',
    'description' => 'Entity Documentation configuration page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_documentation_settings_form'),
    'access arguments' => array('administer entity documentation'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/entity_documentation.admin.inc',
    'weight' => 1,
  );

  // Export page callback.
  $items['ed/%/%/%'] = array(
    'title' => 'Export',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Export documentation.',
    'page callback' => 'entity_documentation_export',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access entity documentation'),
    'file' => 'includes/entity_documentation.pages.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function entity_documentation_permission() {
  return array(
    'administer entity documentation' => array(
      'title' => t('Administer Entity Documentation'),
      'description' => t('Entity Documentation settings.'),
    ),
    'access entity documentation' => array(
      'title' => t('Access Entity Documentation'),
      'description' => t('Access Entity Documentation.'),
    ),
  );
}

/**
 * Implements hook_variable_info().
 */
function entity_documentation_variable_info() {
  $variables = array();

  // Entity Documentation update interval.
  $variables['ed_update_interval'] = array(
    'title' => t('Entity Documentation update interval'),
    'default' => 0,
    'group' => 'entity_documentation',
    'token' => FALSE,
  );

  // Entity Documentation auto export.
  $variables['ed_auto_export'] = array(
    'title' => t('Auto export Entity Documentation'),
    'default' => serialize(array()),
    'group' => 'entity_documentation',
    'token' => FALSE,
  );

   // Entity Documentation path export.
  $variables['ed_export_path'] = array(
    'title' => t('Path of Entity Documentation files'),
    'default' => variable_get('file_public_path', 'sites/default/files') . '/entity_documentation',
    'group' => 'entity_documentation',
    'token' => FALSE,
  );

  return $variables;
}

/**
 * Implementation of hook_cron().
 */
function entity_documentation_cron() {
  module_load_include('inc', 'entity_documentation', 'includes/entity_documentation.functions');

  $update_interval = variable_get('ed_update_interval');
  // If it is not 0(Never).
  if ($update_interval) {
    // Process auto export.
    ed_auto_export();
  }
}
