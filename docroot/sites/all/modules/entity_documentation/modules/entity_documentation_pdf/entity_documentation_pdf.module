<?php

/**
 * @file
 * Main file for Entity Documentation PDF module.
 */

/**
 * Implements hook_ed_exporter().
 */
function entity_documentation_pdf_ed_exporter($exporters) {

  $exporters['pdf'] = array(
    'name' => 'PDF',
  );

  return $exporters;
}

/**
 * Implements hook_ed_documentation_export().
 */
function entity_documentation_pdf_ed_documentation_export($exporter, $entity, $bundle) {

  if ($exporter == 'pdf') {

    $tcpdf = _entity_documentation_pdf_get($entity, $bundle);

    $pdf = $tcpdf->Output('', 'S');

    // Tell the browser that this is not an HTML file to show, but a pdf file to
    // download.
    header('Content-Type: application/pdf');
    header('Content-Length: ' . strlen($pdf));
    header('Content-Disposition: attachment; filename="' . $entity . '-' . $bundle . '.pdf"');

    print $pdf;

    return NULL;
  }
}

/**
 * Implements hook_ed_documentation_file_export().
 */
function entity_documentation_pdf_ed_documentation_file_export($exporter, $entity, $bundle, $file) {
  if ($exporter == 'pdf') {
    $tcpdf = _entity_documentation_pdf_get($entity, $bundle);
    $pdf = $tcpdf->Output($file, 'F');
  }
}

/**
 * Get TCPDF object.
 *
 * @return object
 *   TCPDF object.
 */
function _entity_documentation_pdf_get($entity, $bundle) {
  // Get documentation array.
  module_load_include('inc', 'entity_documentation', 'includes/entity_documentation.functions');
  $documentation_array = ed_bundle_array($entity, $bundle);

  // Add css.
  $filepath = drupal_get_path('module', 'entity_documentation_pdf') . '/css/entity_documentation_pdf.css';
  $css = file_get_contents($filepath);
  $documentation_array[$entity][$bundle]['css'] = $css;

  // Get the content we want to convert into pdf.
  $html = theme('entity_documentation_pdf', $documentation_array[$entity][$bundle]);

  // Use tcpdf_get_instance().
  $tcpdf = tcpdf_get_instance();

  // Header and footer.
  $tcpdf->DrupalInitialize(array(
    'header' => array(
      'html' => 'Documentation for ' . $entity . ' ' . $bundle,
    ),
    'footer' => array(
      'html' => 'Documentation for ' . $entity . ' ' . $bundle,
    ),
  ));
  // Insert the content. Note that DrupalInitialize automatically adds the first
  // page to the pdf document.
  $tcpdf->writeHTML($html);

  return $tcpdf;
}

/**
 * Implements hook_theme().
 */
function entity_documentation_pdf_theme($existing, $type, $theme, $path) {
  switch ($type) {
    case 'module':
      $themes = array(
        'entity_documentation_pdf' => array(
          'template' => 'tpl/entity_documentation_pdf',
          'variables' => array('variables' => NULL),
        ),
      );
      break;
  }
  return $themes;
}
