<?php

/**
 * @file
 * Code for the Notify 404 module.
 */

define('NOTIFY_404_FREQUENCY', 10);
define('NOTIFY_404_VOLUME', 10);

/**
 * Implements hook_menu().
 */
function notify_404_menu() {
  $items = array();

  if (module_exists('dblog')) {
    $items['admin/config/system/notify-404'] = array(
      'title' => 'Notify 404',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('notify_404_email_form'),
      'access arguments' => array('administer 404 notifications'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'notify_404.admin.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_help().
 */
function notify_404_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/notify-404':
      return '<p>' . t("The Notify 404 module can help administrators determine
                        404 frequencies / volumes and recieve notifications of
                         the site error.") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function notify_404_permission() {
  $permissions = array();
  $permissions['administer 404 notifications'] = array(
    'title' => t('Administer 404 Notifications'),
    'description' => t('Perform administration tasks related to email template
                        and frequency.'),
  );
  return $permissions;
}

/**
 * Retrieves the 404's from the watchdog.
 *
 * @param string $type
 *   The type of error to retrieve
 *
 * @return array
 *   Returns the rows retrieved or an empty array
 */
function notify_404_get() {
  $count_query = db_select('watchdog', 'w');
  $count_query->addExpression('COUNT(DISTINCT(w.message))');
  $count_query->leftJoin('redirect', 'r', 'w.message = r.source');
  $count_query->condition('w.type', 'page not found');
  $count_query->isNull('r.rid');

  $query = db_select('watchdog', 'w')->extend('PagerDefault')->extend('TableSort');
  $query->fields('w', array('message'));
  $query->addExpression('COUNT(wid)', 'count');
  $query->addExpression('MAX(timestamp)', 'timestamp');
  $query->leftJoin('redirect', 'r', 'w.message = r.source');
  $query->isNull('r.rid');
  $query->condition('w.type', 'page not found');
  $query->groupBy('w.message');
  $query->setCountQuery($count_query);
  $results = $query->execute();

  $rows = array();
  foreach ($results as $dblog) {
    $rows[] = $dblog;
  }
  return $rows;
}

/**
 * Implements hook_cron().
 *
 * Gathers the system 404s and sends an email.
 */
function notify_404_cron() {
  $notify_404 = variable_get('notify_404');
  if (module_exists('dblog') && $notify_404) {
    $first_run = FALSE;

    // Current Time.
    $now = time();
    // The last time we ran the check.
    if (isset($notify_404['last_checked'])) {
      $last_checked = $notify_404['last_checked'];
    }
    else {
      $first_run = TRUE;
      // Set the variable for the first time occurrence.
      $last_checked = $now;
      $notify_404['last_checked'] = $last_checked;
      variable_set('notify_404', $notify_404);
    }

    // The time this frequency should be checked.
    if (isset($notify_404['next_time_check'])) {
      $next_time_check = $notify_404['next_time_check'];
    }
    else {
      // Set the variable for first time occurrence.
      $next_time_check = $notify_404['frequency'] * 60 + $now;
      $notify_404['next_time_check'] = $next_time_check;
      variable_set('notify_404', $notify_404);
    }

    if ($now >= $next_time_check) {
      $rows = notify_404_get();
      $pnf_links = array();
      foreach ($rows as $row) {
        if ($first_run || ($row->count >= $notify_404['volume'] && $row->timestamp >= $last_checked)) {
          $pnf_links[] = $row;
        }
      }

      if ($pnf_links) {
        // Send the email.
        notify_404_mail_send($pnf_links, $notify_404);
      }

      // Set the values for next time period check.
      $notify_404['last_checked'] = $next_time_check;
      $next_time_check += $notify_404['frequency'] * 60;
      $notify_404['next_time_check'] = $next_time_check;
      variable_set('notify_404', $notify_404);
    }
  }
}

/**
 * Determines email variables and sends the email.
 *
 * @param array $invalid_links
 *   The 404s that have been retrieved from the watchdog
 *
 * @param array $notify_404
 *   The notify 404 variable
 */
function notify_404_mail_send($pnf_links = NULL, $notify_404 = NULL) {
  $module = 'notify_404';
  $key = 'notify_404_email';
  $pnf_output = NULL;
  $to = $notify_404['to'];
  $from = variable_get('site_mail', 'admin@example.com');
  $params['subject'] = $notify_404['subject'];
  $params['message'] = $notify_404['message'];

  // Generate link output.
  foreach ($pnf_links as $pnf_link) {
    $pnf_output .= url($pnf_link->message, array('absolute' => TRUE)) . "\n";
    $pnf_output .= t('Count:') . $pnf_link->count . "\n\n";
  }

  $params['notify_404_links'] = $pnf_output;
  $result = drupal_mail($module, $key, $to, language_default(), $params, $from, TRUE);
  if ($result['result'] == TRUE) {
    drupal_set_message(t('Your message has been sent.'));
  }
  else {
    drupal_set_message(t('There was a problem sending your message
                          and no email has been sent.'), 'error');
  }
}

/**
 * Implements hook_mail().
 *
 * Sets the subject and message.
 */
function notify_404_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_404_email':
      $variables['user'] = $account = user_load(1);
      $variables['params'] = $params;
      $message['subject'] = token_replace($params['subject'], $variables, array(
          'sanitize' => FALSE,
          'clear' => TRUE,
        )
      );
      $message['body'][] = token_replace($params['message'], $variables, array(
          'sanitize' => FALSE,
          'clear' => TRUE,
        )
      );
      break;
  }
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by user_mail() and the settings forms to retrieve strings.
 */
function notify_404_mail_text($key) {
  global $language;
  $language_code = isset($language) ? $language->language : NULL;
  $text = '';

  switch ($key) {
    case 'notify_404_subject':
      $text = t('Notify 404: Page Not Found Summary', array(), array('langcode' => $language_code));
      break;

    case 'notify_404_message':
      $main_body = "[user:name],

The following links are 404 occurrences on [site:name].

[notify-404:404-links]

Drupal has a summary of the top page not found errors located here:

[notify-404:top-page-not-found-url]";

      if (module_exists('redirect')) {
        $main_body .= "\n\nYou can fix these 404's by navigating here:

[notify-404:redirect-url]";
      }
      else {
        $main_body .= "\n\nYou can fix the 404 pages with the Redirect module:

[notify-404:redirect-module-url]";
      }

      $main_body .= "\n\n--  [site:name] team";
      $text = t($main_body, array(), array('langcode' => $language_code));
      break;

  };

  return $text;
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * notify_404_mail_text() to set up some additional tokens.
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values.
 * @param array $options
 *   Unused parameter required by the token_replace() function.
 */
function notify_404_mail_tokens(&$replacements, $data, $options) {
  $replacements['[notify-404:404-links]'] = notify_404_token_values('notify-404:404-links');
  $replacements['[notify-404:top-page-not-found-url]'] = notify_404_token_values('notify-404:top-page-not-found-url');
  $replacements['[notify-404:redirect-url]'] = notify_404_token_values('notify-404:redirect-url');
  $replacements['[notify-404:redirect-module-url]'] = notify_404_token_values('notify-404:redirect-module-url');
}

/**
 * Provided the specific key, will generate a return URL for token replacement.
 *
 * @param string $key
 *   The key to generate the URL.
 *
 * @return string
 *   The generated URL.
 */
function notify_404_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'notify-404') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case '404-links':
          $replacements[$original] = $data['params']['notify_404_links'];
          break;

        case 'top-page-not-found-url':
          $replacements[$original] = url("admin/reports/page-not-found", array('absolute' => TRUE));
          break;

        case 'redirect-url':
          $replacements[$original] = url("admin/config/search/redirect/404", array('absolute' => TRUE));
          break;

        case 'redirect-module-url':
          $replacements[$original] = url("http://drupal.org/project/redirect", array('absolute' => TRUE));
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_token_info().
 *
 * @return array
 */
function notify_404_token_info() {
  $type = array(
    'name' => t('Notify 404'),
    'description' => t('Tokens related to Notify 404 variables'),
    'needs-data' => 'notify_404',
  );
  // Core tokens for notify.
  $notify_404['notify-404:404-links'] = array(
    'name' => t("404 Links"),
    'description' => t('The 404s found within the system.'),
  );
  $notify_404['notify-404:top-page-not-found-url'] = array(
    'name' => t("Top Page Not Found URL"),
    'description' => t("Drupal core URL to the top 404 errors in the site."),
  );
  $notify_404['notify-404:redirect-url'] = array(
    'name' => t("Redirect URL"),
    'description' => t("The administration URL for the redirect module."),
  );
  $notify_404['notify-404:redirect-module-url'] = array(
    'name' => t("Redirect Module URL"),
    'description' => t("The Drupal.org URL for the Redirect module."),
  );
  return array(
    'types' => array('notify_404' => $type),
    'tokens' => array('notify_404' => $notify_404),
  );
}
