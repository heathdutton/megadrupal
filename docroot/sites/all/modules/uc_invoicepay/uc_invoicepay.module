<?php

/**
 * Implementation of hook_menu().
 */
function uc_invoicepay_menu() {
  $items = array();

  $items['admin/store/configuration/uc-invoicepay'] = array(
      'title' => t('Invoice Payment Form'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uc_invoicepay_admin_settings_form'),
      'access arguments' => array('administer store configuration'),
      'file' => 'includes/admin.inc',
  );

  $items['invoice/pay'] = array(
      'title callback' => 'uc_invoicepay_form_page_title',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uc_invoicepay_invoice_form'),
      'access callback' => TRUE,
      'file' => 'includes/forms.inc',
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function uc_invoicepay_theme() {
  $items = array();

  $items['uc_invoicepay_invoice_payment_summary'] = array('variables' => array('uc_order' => array()));

  return $items;
}

/**
 * Implementation of hook_requirements().
 */
function uc_invoicepay_requirements($phase) {
  $requirements = array();

  switch ($phase) {
    case 'runtime':
      $product_nid = variable_get('uc_invoicepay_invoice_product_nid', '');
      $requirements['uc_invoicepay_nid'] = array(
          'title' => t('Ubercart Invoice Payment Form'),
      );
      if ($product_nid) {
        $link = l(t('change it here'), 'admin/store/configuration/uc-invoicepay');
        $node = node_load($product_nid);
        $requirements['uc_invoicepay_nid']['value'] = t('Invoice product node set as !node (id !nid).  You can !link', array('!link' => $link, '!node' => $node->title, '!nid' => $product_nid));
        $requirements['uc_invoicepay_nid']['severity'] = REQUIREMENT_INFO;
      }
      else {
        $link = l(t('set it here'), 'admin/store/configuration/uc-invoicepay', array('query' => array('destination' => 'admin/reports/status')));
        $requirements['uc_invoicepay_nid']['value'] = t('Invoice product node ID not specified.  Please !link', array('!link' => $link));
        $requirements['uc_invoicepay_nid']['severity'] = REQUIREMENT_ERROR;
      }
      break;
  }

  return $requirements;
}

/**
 * Implementation of hook_uc_cart_item().
 */
function uc_invoicepay_uc_cart_item($op, $item) {
  switch ($op) {
    case 'load':
      if ($item->data['invoice']) {
        $item->module = 'uc_product';
        if ($item->data['invoice']['amount'] != NULL) {
          $item->price = $item->data['invoice']['amount'];
        }
      }
      break;
  }
}

/**
 * Implementation of hook_uc_product_description().
 */
function uc_invoicepay_uc_product_description($product) {
  $description = array();
  if (uc_invoicepay_product_is_invoice_payment($product)) {
    $description['attributes'][] = array(
        '#attribute_name' => t('Invoice #'),
        '#options' => $product->data['invoice']['invoice_num'],
    );
    if ($product->data['invoice']['memo']) {
      $description['attributes'][] = array(
          '#attribute_name' => t('Memo'),
          '#options' => $product->data['invoice']['memo'],
      );
    }
  }

  return $description;
}

/**
 * Implementation of hook_token_info().
 */
function uc_invoicepay_token_info() {
  $tokens['invoice-payment-summary'] = array(
      'name' => t('Invoice Payment Summary'),
      'description' => t('A summary of an invoice payment through Ubercart'),
  );

  return array(
      'tokens' => array('uc_order' => $tokens),
  );
}

/**
 * Implementation of hook_tokens().
 */
function uc_invoicepay_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'uc_order' && !empty($data['uc_order'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'invoice-payment-summary':
          $replacements[$original] = theme('uc_invoicepay_invoice_payment_summary', array('uc_order' => $data['uc_order']));
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Helper function to determine if a certain product in the user's shopping cart is an invoice payment.
 */
function uc_invoicepay_product_is_invoice_payment($product) {
  return ($product->data['invoice']);
}

function theme_uc_invoicepay_invoice_payment_summary($variables) {
  $order = $variables['uc_order'];
  $output = '';

  $line_break = "<br />\n";
  foreach ($order->products as $product) {
    if (uc_invoicepay_product_is_invoice_payment($product)) {
      $output .= $line_break;
      $output .= '<h3>' . t('Invoice Payment Summary:') . '</h3>';
      $output .= t('Invoice #: !invoice_num', array('!invoice_num' => $product->data['invoice']['invoice_num'])) . $line_break;
      $output .= t('Amount: !amount', array('!amount' => '$' . number_format($product->data['invoice']['amount'], 2))) . $line_break;
      if ($product->data['invoice']['memo']) {
        $output .= t('Memo: !memo', array('!memo' => $product->data['invoice']['memo'])) . $line_break;
      }
      $output .= $line_break;
    }
  }

  return $output;
}

function uc_invoicepay_form_page_title() {
  return variable_get('uc_invoicepay_form_page_title', t('Pay an Invoice'));
}