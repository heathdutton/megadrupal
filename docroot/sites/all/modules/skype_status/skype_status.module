<?php

define('SKYPE_STATUS_IMAGE_PATH', drupal_get_path('module', 'skype_status') . '/images');

/**
 * Implements hook_menu().
 */
function skype_status_menu() {
  return array(
    'admin/config/people/skype_status' => array(
      'title' => 'Skype status settings',
      'description' => 'Configure the behavior of Skype status for users.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('skype_status_admin_settings'),
      'access arguments' => array('administer skype status'),
      'file' => 'includes/skype_status.admin.inc',
    ),
    'skype_status' => array(
      'page callback' => '_skype_status_callback',
      'page arguments' => array(1, 2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Page callback for the status menu entry.
 *
 * @param string $id
 *   The Skype ID of the user.
 * @param string $style
 *   The preferred style of the button.
 */
function _skype_status_callback($id, $style) {
  global $language;
  $status = skype_status_get_status($id, $language->language);

  $variables = array(
    'id' => $id,
    'status' => $status,
    'style' => $style
  );

  print theme('skype_status_image', $variables);
}

/**
 * Implements hook_permission().
 */
function skype_status_permission() {
  return array(
    'administer skype status' => array(
      'title' => t('Administer Skype Status'),
      'description' => t('Perform administration tasks for Skype Status.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function skype_status_theme() {
  module_load_include('inc', 'skype_status', 'includes/skype_status.theme');
  return skype_status_theme_theme();
}

/**
 * Implements hook_init().
 */
function skype_status_init() {
  $profile_settings = skype_status_get_profile_settings();
  $block_settings = skype_status_get_block_settings();

  $data = array(
    'skypeStatus' => array(
      'ajaxURL' => url('skype_status', array('absolute' => TRUE)),
      'profileStyle' => $profile_settings['style'],
      'blockStyle' => $block_settings['style'],
    ),
  );

  drupal_add_js($data, 'setting');
}

/**
 * Implements hook_block_info().
 */
function skype_status_block_info() {
  $blocks['button'] = array(
    'info' => t('Skype status'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function skype_status_block_view($delta = '') {
  $settings = skype_status_get_block_settings();

  $block = array();
  switch ($delta) {
    case 'button':
      $block['subject'] = t('Skype status');
      $block['content'] = array(
        '#theme' => 'skype_status_block',
        '#id' => $settings['id'],
        '#message' => $settings['message'],
        '#action' => $settings['action'],
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function skype_status_block_configure($delta = '') {
  $form = array();

  if ($delta == 'button') {
    $settings = skype_status_get_block_settings();

    $form['skype_status_block_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Skype ID'),
      '#default_value' => $settings['id'],
    );

    $form['skype_status_block_message'] = array(
      '#type' => 'textfield',
      '#title' => t('Message'),
      '#default_value' => $settings['message'],
    );

    $form['skype_status_block_action'] = array(
      '#type' => 'radios',
      '#title' => t('Action'),
      '#description' => t('What to do when clicking on the Skype status button?'),
      '#options' => array(
        'call' => t('Call'),
        'chat' => t('Chat'),
      ),
      '#default_value' => $settings['action'],
    );

    $form['skype_status_block_style'] = array(
      '#type' => 'radios',
      '#title' => t('Button style preference'),
      '#options' => skype_status_get_styles(),
      '#default_value' => $settings['style'],
    );

    $form['#attached']['js'] = array(
      drupal_get_path('module', 'skype_status') . '/includes/skype_status.admin.js',
    );

  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function skype_status_block_save($delta = '', $edit = array()) {
  if ($delta == 'button') {
    $settings = array(
      'id' => $edit['skype_status_block_id'],
      'message' => $edit['skype_status_block_message'],
      'action' => $edit['skype_status_block_action'],
      'style' => $edit['skype_status_block_style'],
    );
    variable_set('skype_status_block', $settings);
  }
  return;
}

/**
 * Implements hook_user_view_alter().
 */
function skype_status_user_view_alter(&$build) {
  $account = $build['#account'];

  $settings = skype_status_get_profile_settings();
  $field = !empty($settings['field']) ? $settings['field'] : NULL;

  if (!empty($account->$field) && $account->uid !== 0) {
    $id = isset($account->{$field}['und'][0]['value']) ? $account->{$field}['und'][0]['value'] : $account->$field;
    $build[$field]['#type'] = 'item';
    $build[$field]['#markup'] = theme('skype_status', array('id' => $id, 'type' => 'profile', 'action' => $settings['action']));
    unset($build[$field]['#theme']);
    if ($settings['title'] == FALSE) {
      unset($build[$field]['#title']);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function skype_status_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'skype_status') . '/includes/views'
  );
}

/**
 * Helper function to get the available styles for the Skype button.
 *
 * @return array
 *   An associative array containing the available style buttons.
 */
function skype_status_get_styles() {
  $styles = array('balloon', 'bigclassic', 'smallclassic', 'mediumicon', 'smallicon');

  $options = array();
  foreach ($styles as $style) {
    $path = SKYPE_STATUS_IMAGE_PATH . '/' . $style . '/1.png';
    $attributes = array('id' => $style, 'class' => 'skype-status-img-rotate');
    $image = theme('image', array('path' => $path, 'attributes' => $attributes));
    $options[$style] = $image;
  }

  return $options;
}

/**
 * Helper function to get the available fields for the Skype ID.
 *
 * @return array
 *   An associative array containing the fields.
 */
function skype_status_get_fields() {
  $fields = array();

  $instances = field_info_instances('user', 'user');
  foreach ($instances as $field_name => $field) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] == 'text') {
      $fields[$field_name] = $field['label'];
    }
  }

  if (module_exists('profile')) {
    $query = db_select('profile_field');

    $query
      ->fields('profile_field', array('title', 'name'))
      ->condition('type', 'textfield')
      ->orderBy('weight', 'ASC');

    $result = $query->execute();
    foreach ($result as $field) {
      $fields[$field->name] = $field->title;
    }
  }

  return $fields;
}

/**
 * Helper function to get all Skype settings for users.
 */
function skype_status_get_profile_settings() {
  $defaults = array(
    'field' => '',
    'title' => TRUE,
    'action' => 'call',
    'style' => 'bigclassic',
  );

  return variable_get('skype_status_profile', $defaults);
}

/**
 * Helper function to get all Skype settings for the block.
 */
function skype_status_get_block_settings() {
  $defaults = array(
    'id' => '',
    'message' => '',
    'action' => 'call',
    'style' => 'bigclassic',
  );
  return variable_get('skype_status_block', $defaults);
}

/**
 * Helper function to determine the status of the given Skype ID.
 *
 * @param string $id
 *   The Skype ID of the user.
 * @param string $language
 *   (optional) The language code to use for the request. Defaults to 'en'.
 *
 * @return
 *   An associative array containing a status code and status message.
 */
function skype_status_get_status($id, $lang = 'en') {
  $url = sprintf("http://mystatus.skype.com/%s.xml", $id);
  $response = drupal_http_request($url);

  $dom = new DomDocument();
  $dom->loadXml($response->data);

  $presences = $dom->getElementsByTagName('presence');
  foreach ($presences as $presence) {
    if ($presence->getAttribute('xml:lang') == 'NUM') {
      $num = $presence->textContent;
    }
    if ($presence->getAttribute('xml:lang') == $lang) {
      $text = $presence->textContent;
    }
  }

  $status = array(
   'num' => $num,
   'text' => $text,
  );

  return $status;
}