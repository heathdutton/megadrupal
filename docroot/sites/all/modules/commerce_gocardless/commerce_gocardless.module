<?php

/**
 * Implements hook_menu().
 */
function module_name_menu() {
  $items = array();

  $items['gocardless/webhook'] = array(
    'page callback' => 'commerce_gocardless_webhook',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_libraries_info().
 */
function commerce_gocardless_libraries_info() {
  $libraries['gocardless-php'] = array(
    'name' => 'GoCardless PHP library',
    'vendor url' => 'http://gocardless.com',
    'download url' => 'https://github.com/gocardless/gocardless-php/zipball/v0.3.3',
    'version arguments' => array(
      'file' => 'CHANGELOG.md',
      'pattern' => '@## ([0-9\.]+)@',
      'lines' => 2,
    ),
    'path' => 'lib',
    'files' => array(
      'php' => array('GoCardless.php'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_gocardless_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['gocardless'] = array(
    'base' => 'commerce_gocardless',
    'title' => t('GoCardless'),
    'short_title' => t('GoCardless'),
    'display_title' => t('Direct Debit'),
    'description' => t('Integrates GoCardless Direct Debit Payment.'),
    'offsite' => TRUE,
    'cardonfile' => array(
      'create callback' => '',
      'update callback' => '',
      'delete callback' => 'commerce_gocardless_cardonfile_delete',
    ),
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the payment method.
 */
function commerce_gocardless_default_settings() {
  return array(
    'app_id' => '',
    'app_secret' => '',
    'merchant_id' => '',
    'access_token' => '',
    'sandbox' => FALSE,
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_gocardless_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_gocardless_default_settings();

  $form = array();

  $form['app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('App ID'),
    '#description' => t('App identifier'),
    '#default_value' => $settings['app_id'],
    '#required' => TRUE,
  );

  $form['app_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('App Secret'),
    '#description' => t('App secret'),
    '#default_value' => $settings['app_secret'],
    '#required' => TRUE,
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Merchant ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );

  $form['access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Access token'),
    '#description' => t('Access token'),
    '#default_value' => $settings['access_token'],
    '#required' => TRUE,
  );

  $form['sandbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use sandbox.'),
    '#description' => t('Test transactions.'),
    '#default_value' => $settings['sandbox'],
  );

  // Card on File module support.
  if (module_exists('commerce_cardonfile')) {

  }

  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File funcitionality download and install the Card on File module.'),
    );
  }

  return $form;
}

function commerce_gocardless_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = commerce_line_items_total($wrapper->commerce_line_items);
  $amount = commerce_currency_amount_to_decimal($total['amount'], $total['currency_code']);
  $order_amount = number_format($amount, 2, '.', '');

  // Include the library

  if (($library = libraries_load('gocardless-php')) && !empty($library['loaded'])) {
    if ($payment_method['settings']['sandbox'] = TRUE) {
      // Use the sandbox environment for testing
      GoCardless::$environment = 'sandbox';
    }

    // Set config vars
    $account_details = array(
      'app_id'        => $payment_method['settings']['app_id'],
      'app_secret'    => $payment_method['settings']['app_secret'],
      'merchant_id'   => $payment_method['settings']['merchant_id'],
      'access_token'  => $payment_method['settings']['access_token'],
    );

    // Initialize GoCardless
    GoCardless::set_account_details($account_details);

    $payment_details = array(
      'amount'  => $order_amount,
      'name'    => 'Order ' . $order->order_id,
      'redirect_uri' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute'=>TRUE)),
    );

    $url = GoCardless::new_bill_url($payment_details);

    drupal_goto($url);
    // Display the link
    $form['link'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="'.$url.'">New subscription</a>',
    );

    return $form;
  }
  else {
    drupal_set_message(t('GoCardless Library not loaded'), 'error');
  }


}

function commerce_gocardless_redirect_form_submit($order, $payment_method) {
  // Include the library
  libraries_load('gocardless-php');

  // Required confirm variables
  $confirm_params = array(
    'resource_id'    => $_GET['resource_id'],
    'resource_type'  => $_GET['resource_type'],
    'resource_uri'   => $_GET['resource_uri'],
    'signature'      => $_GET['signature']
  );

  // State is optional
  if (isset($_GET['state'])) {
    $confirm_params['state'] = $_GET['state'];
  }

  if ($payment_method['settings']['sandbox'] = TRUE) {
    // Use the sandbox environment for testing
    GoCardless::$environment = 'sandbox';
  }

  // Set config vars
  $account_details = array(
    'app_id'        => $payment_method['settings']['app_id'],
    'app_secret'    => $payment_method['settings']['app_secret'],
    'merchant_id'   => $payment_method['settings']['merchant_id'],
    'access_token'  => $payment_method['settings']['access_token'],
  );

  // Initialize GoCardless
  GoCardless::set_account_details($account_details);

  $confirmed_resource = GoCardless::confirm_resource($confirm_params);

  watchdog('commerce_gocardless', '<pre>' . print_r($confirmed_resource, TRUE) . '</pre>');

  // Create a new payment transaction and setup the amount.
  $transaction = commerce_payment_transaction_new('gocardless', $order->order_id);
  $transaction->amount = commerce_currency_decimal_to_amount($confirmed_resource->amount, $confirmed_resource->currency);
  $transaction->currency_code = $confirmed_resource->currency;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $confirmed_resource->id;
  $transaction->remote_status = $confirmed_resource->status;
  $transaction->message = t('Payment Pending');

  commerce_payment_transaction_save($transaction);
}

function commerce_gocardless_webhook() {
  // Include the library
  libraries_load('gocardless-php');

  $webhook = file_get_contents('php://input');
  $webhook_array = json_decode($webhook, true);
  $webhook_valid = GoCardless::validate_webhook($webhook_array['payload']);

  if ($webhook_valid == TRUE) {
    // Send a success header
    header('HTTP/1.1 200 OK');

    $data = $webhook_array['payload'];

    switch ($data['resource_type']) {
      case 'bill' :
        commerce_gocardless_webhook_bill($data['action'], $data['bills']);
        break;
      case 'subscription' :

        break;
      case 'pre_authorization' :

        break;
    }

  } else {

    header('HTTP/1.1 403 Invalid signature');

  }
}

function commerce_gocardless_webhook_bill($action, $items) {
  switch ($action) {
    case 'paid' :

      foreach ($items as $item) {
        commerce_payment_transaction_load_multiple(array(), array('remote_id' => $item->id));
        if (count($transactions) > 0) {
          $transaction = end($transactions);

          $transaction->remote_status = $item->status;
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

          commerce_payment_transaction_save($transaction);
        }
        else {
          watchdog('commerce_gocardless', 'Transaction could not be found', WATCHDOG_ERROR);
        }
      }

      break;

    case 'failed' :

      foreach ($items as $item) {
        commerce_payment_transaction_load_multiple(array(), array('remote_id' => $item->id));
        if (count($transactions) > 0) {
          $transaction = end($transactions);

          $transaction->remote_status = $item->status;
          $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;

          commerce_payment_transaction_save($transaction);
        }
        else {
          watchdog('commerce_gocardless', 'Transaction could not be found', WATCHDOG_ERROR);
        }
      }

      break;

    case 'refunded' :

      foreach ($items as $item) {
        commerce_payment_transaction_load_multiple(array(), array('remote_id' => $item->id));
        if (count($transactions) > 0) {
          $transaction = end($transactions);

          $transaction->remote_status = $item->status;
          $transaction->status = COMMERCE_PAYMENT_STATUS_CANCELED;

          commerce_payment_transaction_save($transaction);
        }
        else {
          watchdog('commerce_gocardless', 'Transaction could not be found', WATCHDOG_ERROR);
        }
      }

      break;
  }
}