<?php
/**
 * @file
 * Manage tasks from your wunderlist account.
 */

/**
 * Implements hook_menu().
 */
function wunderlist_menu() {

  $items['admin/config/services/wunderlist'] = array(
    'title' => 'Wunderlist',
    'description' => 'Wunderlist settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wunderlist_admin_form'),
    'access arguments' => array('administer wunderlist configuration'),
    'file' => 'wunderlist.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['wunderlist/oauth2'] = array(
    'title' => 'Wunserlist OAuth2',
    'access callback' => TRUE,
    'page callback' => 'wunderlist_oauth',
  );

  $items['wunderlist/list/update/%'] = array(
    'title' => 'Wunderlist webhook',
    'access callback' => TRUE,
    'page callback' => 'wunderlist_list_update',
    'page arguments' => array(3),
  );

  return $items;
}

/**
 * Custom page callback to update a list when changed externally.
 *
 * @param int $list_id
 *   The changed list_id.
 */
function wunderlist_list_update($list_id) {
  module_load_include('inc', 'wunderlist');
  watchdog('wunderlist', 'Webhook called for list :list', array(':list' => $list_id));
  $client = new Wunderlist();
  $tasks = $client->getTasks($list_id);
  foreach ($tasks as $task) {
    wunderlist_task_save($task);
    wunderlist_user_save($task['created_by_id'], $task['avatar']);
  }
}

/**
 * Implements hook_permission().
 */
function wunderlist_permission() {
  return array(
    'administer wunderlist configuration' => array(
      'title' => t('Administer Wunderlist'),
      'description' => t('Configure wunderlist.'),
    ),
    'access wunderlist content' => array(
      'title' => t('Access Wunderlist content'),
      'description' => t('Access Wunderlist content'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function wunderlist_help($path, $arg) {
  switch ($path) {
    case 'admin/help#wunderlist':
      $output = file_get_contents(drupal_get_path('module', 'wunderlist') .
        '/README.txt');
      if (module_exists('markdown')) {
        $content = module_invoke('markdown', 'filter', 'process', 0, -1,
          $output);
        return $content;
      }
      return '<pre>' . $output . '</pre>';
  }
}

/**
 * Implements hook_cron().
 */
function wunderlist_cron() {
  module_load_include('inc', 'wunderlist');
  $oauth2_client = new Wunderlist();
  $list = $oauth2_client->getList();
  if ($list) {
    wunderlist_list_save($list, $oauth2_client);
  }
}

/**
 * Implements hook_theme().
 */
function wunderlist_theme() {
  return array(
    'wunderlist_list' => array(
      'variables' => array(
        'list' => array(),
      ),
      'template' => 'wunderlist-list',
    ),
    'wunderlist_tasks' => array(
      'variables' => array(
        'tasks' => array(),
      ),
      'template' => 'wunderlist-tasks',
    ),
  );
}

/**
 * Authentication callback to get a token from the Wunderlist API.
 */
function wunderlist_oauth() {
  if (variable_get('wunderlist_token', FALSE)) {
    drupal_goto('admin/config/services/wunderlist');
  }

  try {
    global $base_url;
    $server_url = variable_get('wunderlist_url', '');
    $client_url = $base_url;
    $client_id = variable_get('wunderlist_client_id', '');
    $client_secret = variable_get('wunderlist_client_secret', '');
    $oauth2_config = array(
      'token_endpoint' => $server_url . '/oauth/access_token',
      'auth_flow' => 'server-side',
      'client_id' => $client_id,
      'client_secret' => $client_secret,
      'authorization_endpoint' => $server_url . '/oauth/authorize',
      'redirect_uri' => $client_url . '/wunderlist/oauth2',
    );
    $oauth2_client = new Wunderlist($oauth2_config);

    $access_token = $oauth2_client->getAccessToken();
    variable_set('wunderlist_token', $access_token);
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }

  drupal_goto('admin/config/services/wunderlist');
}

/**
 * Implements hook_views_api().
 */
function wunderlist_views_api() {
  return array('api' => 3);
}
