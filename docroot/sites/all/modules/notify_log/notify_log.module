<?php

/**
 * @file
 * This module allow you get pretty notification about new log entries.
 */

// Notification ways.
define('NOTIFY_LOG_TYPE_JS', 'js');
define('NOTIFY_LOG_TYPE_SYSTEM', 'system');
define('NOTIFY_LOG_GROWL_LIBRARY', 'jquery.growl');

// System types.
define('NOTIFY_LOG_TYPE_SYSTEM_LOW', 'low');
define('NOTIFY_LOG_TYPE_SYSTEM_NORMAL', 'normal');
define('NOTIFY_LOG_TYPE_SYSTEM_CRITICAL', 'critical');

// Growl types.
define('NOTIFY_LOG_TYPE_JS_INFO', 'default');
define('NOTIFY_LOG_TYPE_JS_WARNING', 'warning');
define('NOTIFY_LOG_TYPE_JS_ERROR', 'error');

// Growl locations.
define('NOTIFY_LOG_TYPE_JS_LOCATION_TOP_LEFT', 'tl');
define('NOTIFY_LOG_TYPE_JS_LOCATION_TOP_RIGHT', 'tr');
define('NOTIFY_LOG_TYPE_JS_LOCATION_TOP_CENTER', 'tc');
define('NOTIFY_LOG_TYPE_JS_LOCATION_BOTTOM_LEFT', 'bl');
define('NOTIFY_LOG_TYPE_JS_LOCATION_BOTTOM_RIGHT', 'br');
define('NOTIFY_LOG_TYPE_JS_LOCATION_BOTTOM_CENTER', 'bc');

// Growl size.
define('NOTIFY_LOG_TYPE_JS_SIZE_SMALL', 'small');
define('NOTIFY_LOG_TYPE_JS_SIZE_MEDIUM', 'medium');
define('NOTIFY_LOG_TYPE_JS_SIZE_LARGE', 'large');

// Default Growl duration.
define('NOTIFY_LOG_TYPE_JS_DURATION', 5);

/**
 * Implements hook_help().
 */
function notify_log_help($path, $arg) {
  switch ($path) {
    case 'admin/help#notify_log':
      $path = dirname(__FILE__) . '/README.txt';

      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      if (!isset($readme)) {
        return NULL;
      }

      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function notify_log_menu() {
  $items['admin/config/development/notify-log'] = array(
    'title' => 'Notify log',
    'description' => 'Configure settings related to the Notify log.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('notify_log_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_page_build().
 */
function notify_log_page_build(&$page) {
  if (user_access('access log notifications') && notify_log_type() == NOTIFY_LOG_TYPE_JS) {
    $path = drupal_get_path('module', 'notify_log');

    $page['content']['#attached']['js'][$path . '/js/notify_log.js'] = array();

    // Attach Growl library.
    $growl = libraries_load(NOTIFY_LOG_GROWL_LIBRARY);
    libraries_load_files($growl);
  }
}

/**
 * Implements hook_permission().
 */
function notify_log_permission() {
  $items['access log notifications'] = array(
    'title' => t('Access log notifications'),
    'description' => t('Allow user to see log notifications.'),
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function notify_log_libraries_info() {
  $libraries[NOTIFY_LOG_GROWL_LIBRARY] = array(
    'name' => 'jQuery Growl',
    'vendor url' => 'http://ksylvest.github.io/jquery-growl',
    'download url' => 'http://ksylvest.github.io/jquery-growl',
    'version arguments' => array(
      'file' => 'javascripts/jquery.growl.js',
      'pattern' => '@^([0-9\.]+)@',
      'lines' => 6,
    ),
    'files' => array(
      'js' => array('javascripts/jquery.growl.js'),
      'css' => array('stylesheets/jquery.growl.css'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_watchdog().
 */
function notify_log_watchdog($log_entry) {
  $notify_type = notify_log_type();
  $access = FALSE;

  // We can not handle any errors/notices that occurred at low bootstrap level if method is 'browser'.
  // If you really need it, we suggest to use the 'system' way.
  if ($notify_type == NOTIFY_LOG_TYPE_JS && !function_exists('user_access')) {
    return;
  }
  // Check access for view notification via browser.
  elseif ($notify_type == NOTIFY_LOG_TYPE_JS && function_exists('user_access')) {
    $access = user_access('access log notifications');
  }
  // But we can handle it by system notification way,
  elseif ($notify_type == NOTIFY_LOG_TYPE_SYSTEM) {
    $access = TRUE;
  }

  if (!$access || !notify_log_severity($log_entry['severity'])) {
    return;
  }

  $log_entry['variables'] = $log_entry['variables'] ? $log_entry['variables'] : array();
  $severity = $log_entry['severity'];
  $data['message'] = strip_tags(t($log_entry['message'], $log_entry['variables']));
  $data['title'] = $log_entry['type'];

  if ($notify_type == NOTIFY_LOG_TYPE_JS) {
    if ($severity <= WATCHDOG_ERROR) {
      $data['style'] = NOTIFY_LOG_TYPE_JS_ERROR;
    }
    elseif ($severity <= WATCHDOG_NOTICE) {
      $data['style'] = NOTIFY_LOG_TYPE_JS_WARNING;
    }
    else {
      $data['style'] = NOTIFY_LOG_TYPE_JS_INFO;
    }

    $data += notify_log_js_settings($data['style']);

    drupal_add_js(array('notifyLog' => array($data)), 'setting');
  }
  elseif ($notify_type == NOTIFY_LOG_TYPE_SYSTEM) {
    if ($severity <= WATCHDOG_ERROR) {
      $style = NOTIFY_LOG_TYPE_SYSTEM_CRITICAL;
    }
    elseif ($severity <= WATCHDOG_NOTICE) {
      $style = NOTIFY_LOG_TYPE_SYSTEM_NORMAL;
    }
    else {
      $style = NOTIFY_LOG_TYPE_SYSTEM_LOW;
    }

    $user_name = escapeshellarg(notify_log_system_user());
    $style = escapeshellarg($style);
    $type = escapeshellarg($log_entry['type']);
    $message = escapeshellarg($data['message']);
    $cmd = 'export DISPLAY=:0; sudo -u ' . $user_name . ' notify-send -u ' . $style . ' "' . $type . '" "' . $message . '"';
    exec($cmd);
  }
}

/**
 * Form builder for settings form.
 */
function notify_log_settings_form() {
  $form['notify_log_type'] = array(
    '#type' => 'radios',
    '#title' => t('Notification way'),
    '#description' => t('Select the way of notification.'),
    '#options' => array(
      NOTIFY_LOG_TYPE_JS => t('Browser (Growl)'),
      NOTIFY_LOG_TYPE_SYSTEM => t('System (Notify OSD)'),
    ),
    '#default_value' => notify_log_type(),
  );
  if (!notify_log_system_capability()) {
    $form['notify_log_type'][NOTIFY_LOG_TYPE_SYSTEM] = array('#disabled' => TRUE);
    $form['notify_log_type']['#description'] .= '<br />' . t('"System" way available only for Linux based developers, also it needed some system configuration (see README.txt file).');
  }
  if (!notify_log_js_capability()) {
    $form['notify_log_type'][NOTIFY_LOG_TYPE_JS] = array('#disabled' => TRUE);

    // Update description.
    $library = libraries_load(NOTIFY_LOG_GROWL_LIBRARY);
    $description = $library['installed']
      ? t('For using browser notification, jQuery version should be greater or equal than 1.7')
      : t('For using browser notification, you should download and install the !link library.', array('!link' => l(t('jQuery Growl'), $library['download url'])));

    $form['notify_log_type']['#description'] .= '<br />' . $description;
  }

  $form['notify_log_severity'] = array(
    '#type' => 'select',
    '#title' => t('Severity type'),
    '#description' => t('Select severity levels to display. If nothing chosen - display all types.'),
    '#options' => watchdog_severity_levels(),
    '#default_value' => variable_get('notify_log_severity'),
    '#multiple' => TRUE,
  );

  $form['notify_log_system_user'] = array(
    '#type' => 'textfield',
    '#title' => t('System username'),
    '#description' => t('Enter username of your OS user.'),
    '#default_value' => notify_log_system_user(),
    '#states' => array(
      'visible' => array(
        ':input[name="notify_log_type"]' => array('value' => NOTIFY_LOG_TYPE_SYSTEM),
      ),
    ),
  );

  $form['notify_log_js'] = array(
    '#type' => 'fieldset',
    '#title' => t('Growl settings'),
    '#states' => array(
      'visible' => array(
        ':input[name="notify_log_type"]' => array('value' => NOTIFY_LOG_TYPE_JS),
      ),
    ),
  );

  $types = array(
    NOTIFY_LOG_TYPE_JS_INFO,
    NOTIFY_LOG_TYPE_JS_WARNING,
    NOTIFY_LOG_TYPE_JS_ERROR,
  );
  foreach ($types as $type) {
    $form['notify_log_js']['notify_log_js_' . $type] = array(
      '#type' => 'fieldset',
      '#title' => t(drupal_ucfirst($type)),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['notify_log_js']['notify_log_js_' . $type]['notify_log_js_' . $type . '_location'] = array(
      '#type' => 'select',
      '#title' => t('Location'),
      '#description' => t('Choose comfortable position for notification.'),
      '#options' => array(
        NOTIFY_LOG_TYPE_JS_LOCATION_TOP_LEFT => t('Top left'),
        NOTIFY_LOG_TYPE_JS_LOCATION_TOP_RIGHT => t('Top right'),
        NOTIFY_LOG_TYPE_JS_LOCATION_TOP_CENTER => t('Top center'),
        NOTIFY_LOG_TYPE_JS_LOCATION_BOTTOM_LEFT => t('Bottom left'),
        NOTIFY_LOG_TYPE_JS_LOCATION_BOTTOM_RIGHT => t('Bottom right'),
        NOTIFY_LOG_TYPE_JS_LOCATION_BOTTOM_CENTER => t('Bottom center'),
      ),
      '#default_value' => variable_get('notify_log_js_' . $type . '_location', NOTIFY_LOG_TYPE_JS_LOCATION_TOP_RIGHT),
    );
    $form['notify_log_js']['notify_log_js_' . $type]['notify_log_js_' . $type . '_size'] = array(
      '#type' => 'select',
      '#title' => t('Size'),
      '#description' => t('Select the size of notification.'),
      '#options' => array(
        NOTIFY_LOG_TYPE_JS_SIZE_SMALL => t('Small'),
        NOTIFY_LOG_TYPE_JS_SIZE_MEDIUM => t('Medium'),
        NOTIFY_LOG_TYPE_JS_SIZE_LARGE => t('Large'),
      ),
      '#default_value' => variable_get('notify_log_js_' . $type . '_size', NOTIFY_LOG_TYPE_JS_SIZE_MEDIUM),
    );
    $form['notify_log_js']['notify_log_js_' . $type]['notify_log_js_' . $type . '_static'] = array(
      '#type' => 'checkbox',
      '#title' => t('Static'),
      '#description' => t('The notifications will be shown until user close it manually.'),
      '#default_value' => variable_get('notify_log_js_' . $type . '_static', FALSE),
    );
    $form['notify_log_js']['notify_log_js_' . $type]['notify_log_js_' . $type . '_duration'] = array(
      '#type' => 'textfield',
      '#title' => t('Duration'),
      '#description' => t('Duration (in seconds) display notices on the screen.'),
      '#default_value' => variable_get('notify_log_js_' . $type . '_duration', NOTIFY_LOG_TYPE_JS_DURATION),
      '#states' => array(
        'visible' => array(
          ':input[name="notify_log_js_' . $type . '_static"]' => array('checked' => FALSE),
        ),
      ),
    );
  }

  $form['#validate'][] = 'notify_log_settings_form_validate';
  return system_settings_form($form);
}

/**
 * Form validate for notify_log_settings_form() form.
 */
function notify_log_settings_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];

  if ($values['notify_log_type'] == NOTIFY_LOG_TYPE_SYSTEM) {
    if (!$values['notify_log_system_user']) {
      form_error($form['notify_log_system_user'], t('You should specify system user name to use system notifications.'));
    }
    elseif (!notify_log_system_user_exists($values['notify_log_system_user'])) {
      form_error($form['notify_log_system_user'], t('There is no such user in your OS'));
    }
  }
}

/**
 * Get notifications type.
 *
 * @return string
 *   Get current notification type
 */
function notify_log_type() {
  return variable_get('notify_log_type');
}

/**
 * Get system username.
 *
 * @return string
 *   Get system user name (used for 'system' way of notifications)
 */
function notify_log_system_user() {
  return variable_get('notify_log_system_user', '');
}

/**
 * Check $severity type for capability.
 *
 * @param int $severity
 *   Severity level, @see watchdog_severity_levels() for more information.
 *
 * @return bool
 *   Indicator of available of using this $severity type
 */
function notify_log_severity($severity) {
  $severities = variable_get('notify_log_severity', array());

  if (!$severities) {
    return TRUE;
  }

  return in_array($severity, $severities);
}

/**
 * Check system capability to use System notifications.
 *
 * @return bool
 *   Indicator of available using 'system' way of notifications
 */
function notify_log_system_capability() {
  $status_code = -1;
  $data = array();

  if (stripos(PHP_OS, 'Linux') === FALSE) {
    return FALSE;
  }
  elseif (!function_exists('exec')) {
    return FALSE;
  }

  exec('notify-send', $data, $status_code);

  // Status '127' - Not found.
  // Status '-1' - Error.
  if ($status_code == 127 || $status_code == -1) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Check js capability to use Growl notifications.
 *
 * @return bool
 *   Indicator of available using 'browser' way of notifications
 */
function notify_log_js_capability() {
  // During low bootstrap level this function can be unavailable.
  if (function_exists('libraries_load')) {
    $library = libraries_load(NOTIFY_LOG_GROWL_LIBRARY);
    $jquery = drupal_get_library('system', 'jquery');

    return $library['installed'] && (version_compare($jquery['version'], '1.7') >= 0);
  }

  return FALSE;
}

/**
 * Check system user exists.
 *
 * @param string $username
 *   System username to be checked.
 *
 * @return bool
 *   Indicator of the existence user in system
 */
function notify_log_system_user_exists($username) {
  $passwd = file_get_contents('/etc/passwd');

  if (strpos($passwd, $username . ':') === FALSE) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Get settings for JS plugin.
 *
 * @param string $type
 *   Notification type.
 *
 * @return array
 *   Array of jquery.growl plugin default settings
 */
function notify_log_js_settings($type) {
  if ($sticky = variable_get('notify_log_js_' . $type . '_static', FALSE)) {
    $data['static'] = $sticky;
  }

  $data['size'] = variable_get('notify_log_js_' . $type . '_size', NOTIFY_LOG_TYPE_JS_SIZE_MEDIUM);
  $data['location'] = variable_get('notify_log_js_' . $type . '_location', NOTIFY_LOG_TYPE_JS_LOCATION_TOP_RIGHT);

  // Get duration in milliseconds.
  $data['duration'] = 1000 * variable_get('notify_log_js_' . $type . '_duration', NOTIFY_LOG_TYPE_JS_DURATION);

  return $data;
}
