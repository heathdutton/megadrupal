<?php

/**
 * @file
 * Provides a configurable meta refresh when viewing individual nodes.
 */

/**
 * Implementation of hook_permission().
 * Creates two new permissions: one to create refreshes and one the change
 * the global settings of the module.
 */
function refresh_permission() {
  return array(
    'create refreshes' => array(
      'title' => t('Create refresh settings'),
      'description' => t('Create refresh settings for nodes'),
    ), 
    'administer refreshes' => array(
      'title' => t('Change refresh settings'),
      'description' => t('Change global refresh settings'),
    ), 
  );
}

/**
 * Implementation of hook_form_BASE_FORM_ID_alter().
 * Adds a refresh group and numeric edit field to the node editing form.
 */
function refresh_form_node_form_alter(&$form, $form_state) {
  if (isset($form['#node']->refresh)) {
    $refresh = $form['#node']->refresh;
  }
  else {
    $refresh = '';
  }
  $form['refresh'] = array(
    '#type' => 'fieldset',
    '#title' => t('Refresh settings'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($refresh),
    '#access' => user_access('create refreshes'),
    '#weight' => 30,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('refresh-form'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'refresh') . '/refresh.js'),
    ),
  );
  $form['refresh']['refresh'] = array(
    '#type' => 'textfield',
    '#default_value' => $refresh,
    '#maxlength' => 3,
    '#size' => 10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Optionally provide a number of seconds after which the node page refreshes.'),
  );
}

/**
 * Implements hook_node_view.
 * Add a refresh tag when viewing the node by itself, not as a teaser.
 */
function refresh_node_view($node, $view_mode)
{
// TODO: add check for editing nodes using overlay
  if (($view_mode == 'full') && node_is_page($node) && ($node->refresh > 0)) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'http-equiv' => 'refresh',
        'content' => check_plain($node->refresh),
      ),
    );
    drupal_add_html_head($element, 'refresh');
  }
}

/**
 * Implements hook_node_load.
 */
function refresh_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    $result = db_query("SELECT seconds FROM {node_refresh} WHERE nid = :nid AND vid = :vid", array('nid' => $node->nid, 'vid' => $node->vid));    
    $nodes[$nid]->refresh = $result->fetchField();
  }
}

/**
 * Implements hook_node_delete.
 */
function refresh_node_delete($node) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    db_query("DELETE FROM {node_refresh} WHERE nid = :nid AND vid = :vid", array('nid' => $node->nid, 'vid' => $node->vid));    
  }
}

/**
 * Implements hook_node_validate.
 */
function refresh_node_validate($node, $form, &$form_state) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    $refresh = trim($node->refresh);
    if ((strlen($refresh) > 0) && (!ctype_digit($refresh) || ((int)$refresh <= 0))) {
      form_set_error('refresh', t('The refresh number is invalid. Please a positive number of seconds.'));
    }
  }
}

/**
 * Implements hook_node_insert.
 */
function refresh_node_insert($node) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    if ((int) $node->refresh > 0) {
      db_query("INSERT INTO {node_refresh} (nid, vid, seconds) VALUES (:nid, :vid, :seconds)", array('nid' => $node->nid, 'vid' => $node->vid, 'seconds' => (int) $node->refresh));
    }
  }
}

/**
 * Implements hook_node_update.
 */
function refresh_node_update($node) {
  if (user_access('create refreshes') || user_access('administer refreshes')) {
    db_query("DELETE FROM {node_refresh} WHERE nid = :nid AND vid = :vid", array('nid' => $node->nid, 'vid' => $node->vid));    
    if ((int) $node->refresh > 0) {
      db_query("INSERT INTO {node_refresh} (nid, vid, seconds) VALUES (:nid, :vid, :seconds)", array('nid' => $node->nid, 'vid' => $node->vid, 'seconds' => (int) $node->refresh));
    }
  }
}
