<?php
/**
 * Implements hook_rules_action_info().
 */
function apachesolr_rules_rules_action_info() {
  $defaults = array(
    'group' => t('Apache Solr'),
    'module' => 'apachesolr_rules',
  );
  
  $actions['apachesolr_rules_solr_add'] = $defaults + array(
    'label' => t('Add content to Solr'),
    'base' => 'apachesolr_rules_solr_add',
    'parameter' => array(
      'nid' => array(
        'type' => 'node',
        'label' => t('Content'),
      ),
      'solr_env' => array(
        'type' => 'list<integer>',
        'options list' => 'apachesolr_rules_get_environments',
        'label' => t('Solr Environments (read & write only)'),
      ),
    ),
  );
  $actions['apachesolr_rules_solr_delete'] = $defaults + array(
    'label' => t('Delete content from Solr'),
    'base' => 'apachesolr_rules_solr_delete',
    'parameter' => array(
      'nid' => array(
        'type' => 'node',
        'label' => t('Content'),
      ),
      'solr_env' => array(
        'type' => 'list<integer>',
        'options list' => 'apachesolr_rules_get_environments',
        'label' => t('Solr Environments (read & write only)'),
      ),
    ),
  );
  return $actions;
}

function apachesolr_rules_get_environments() {
  $default_env_id = apachesolr_default_environment();
  $environments = array('all' => t('All'), 'default' => t('Default Enviroment (@env)', array('@env' => $default_env_id)));
  $all_environments = apachesolr_load_all_environments();
  foreach ($all_environments as $env_id => $env) {
    if(isset($env['conf']['apachesolr_read_only']) && $env['conf']['apachesolr_read_only'] == 0) {
      $environments[$env_id] = $env['name'];
    }
  }
  unset($environments[$default_env_id]);
  return $environments;
}

function apachesolr_rules_solr_add($entity, $environments) {
  foreach ($environments as $env_id => $env) {
    apachesolr_rules_add_solr_doc($entity, $env_id);
  }
}
function apachesolr_rules_solr_delete($entity, $environments) {
  foreach ($environments as $env_id => $env) {
    apachesolr_rules_delete_solr_doc($entity, $env_id);
  }
}

function apachesolr_rules_add_solr_doc($entity, $env_id = 'all', $type = 'node') {
  //Do not index if environment is ready only
  $default_env_id = apachesolr_default_environment();
  $environments = array();
  if ($env_id == 'default') {
    $environments[] = $default_env_id;
  }
  elseif ($env_id == 'all') {
    $environments = array_keys(apachesolr_load_all_environments());
  } else {
    $environments[] = apachesolr_environment_load($env_id);
  }
  module_load_include('inc', 'apachesolr', 'apachesolr.index');

  foreach ($environments as $envid) {
    $environemnt = apachesolr_environment_load($envid);
    if (isset($environemnt['conf']['apachesolr_read_only']) && $environemnt['conf']['apachesolr_read_only'] == 0) {
      // Entity should be indexed, so send it to solr
      $ids = entity_extract_ids($type, $entity);
      $id = $ids[0];

      $item = new stdClass();
      $item->entity_type = $type;
      $item->entity_id = $id;

      $doc = apachesolr_index_entity_to_documents($item, $envid);
      apachesolr_index_send_to_solr($envid, $doc);
      try {
        $solr = apachesolr_get_solr($envid);
        $solr->commit();
      }
      catch (Exception $e) {
        //Do nothing
      }
    }
  }
}

function apachesolr_rules_delete_solr_doc($entity, $env_id, $type = 'node') {
  $environments = array();
  //Do not index if environment is ready only
  $default_env_id = apachesolr_default_environment();
  if ($env_id == 'default') {
    $environments[] = $default_env_id;
  }
  elseif ($env_id == 'all') {
    $environments = array_keys(apachesolr_load_all_environments());
  }
  module_load_include('inc', 'apachesolr', 'apachesolr.index');

  foreach ($environments as $envid) {
    $environemnt = apachesolr_environment_load($envid);
    if (isset($environemnt['conf']['apachesolr_read_only']) && $environemnt['conf']['apachesolr_read_only'] == 0) {
      // Entity should be indexed, so send it to solr
      $ids = entity_extract_ids($type, $entity);
      $id = $ids[0];
      apachesolr_remove_entity($envid, $type, $id);
      try {
        $solr = apachesolr_get_solr($envid);
        $solr->commit();
      }
      catch (Exception $e) {
        //Do nothing
      }
    }
  }
}
