<?php
/**
 * @file
 * Contains main module functionality.
 */

/**
 * Implements hook_help().
 */
function multisite_redirect_help($path, $arg) {
  switch ($path) {
    case 'admin/help#multisite_redirect':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Multisite Redirect is a system designed to allow users to create and manage URL redirects across domains in a sort of multisite configuration. The primary use case for this module is one where a client might have multiple domains that are being consolidated into a single site. In this scenario not only will the domains be different, but the URLs associated with them as well. Rather than killing all of the obsolete URLs from an old domain, you can drive all of the SEO juice to the primary site. With this module you can define rules that will redirect certain patterns of URLs on certain sites to be redirected somewhere else.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('After enabling the module, you\'ll need to setup your <strong>sites/sites.php</strong> file by pointing all of the domains that are to be managed by this module, at the primary site. In many cases this may just be "default" if you\'re not running a true multisite setup.') . '</p>';
      $output .= '<h4>' . t('Example sites.php') . '</h4>';
      $output .= '<pre>';
      $output .= '$sites[\'domain1.com\'] = \'default\';' . "\r\n";
      $output .= '$sites[\'domain1.com\'] = \'default\';' . "\r\n";
      $output .= '$sites[\'domain2.com\'] = \'default\';' . "\r\n";
      $output .= '$sites[\'foobar.domain.com\'] = \'default\';' . "\r\n";
      $output .= '</pre>';
      $output .= '<p>' . t('In this example URLs from domain1.com, domain2.com, domain3.com, and foobar.domain.com will all be managed by the default site. You can read more about how to setup multisite and your sites.php ' . l(t('here'), 'https://api.drupal.org/api/drupal/sites!example.sites.php/7') . '.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function multisite_redirect_permission() {
  return array(
    'administer multisite redirects' => array(
      'name' => t('Administer multisite redirects'),
      'description' => t('Administer multisite redirects'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function multisite_redirect_menu() {
  $items['admin/config/search/multisite-redirect'] = array(
    'title' => 'Multisite Redirects',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer multisite redirects'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_redirect_admin_form'),
    'file' => 'multisite_redirect.admin.inc',
  );
  $items['admin/config/search/multisite-redirect/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer multisite redirects'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_redirect_admin_form'),
    'file' => 'multisite_redirect.admin.inc',
  );
  $items['admin/config/search/multisite-redirect/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_redirect_settings_form'),
    'access arguments' => array('administer multisite redirects'),
    'file' => 'multisite_redirect.admin.inc',
  );
  $items['admin/config/search/multisite-redirect/%multisite_redirect'] = array(
    'title' => 'Edit Redirect',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer multisite redirects'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_redirect_edit_form', 4),
    'file' => 'multisite_redirect.admin.inc',
  );
  $items['admin/config/search/multisite-redirect/add'] = array(
    'title' => 'Add redirect',
    'type' => MENU_LOCAL_ACTION,
    'access arguments' => array('administer multisite redirects'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_redirect_edit_form'),
    'file' => 'multisite_redirect.admin.inc',
  );
  $items['admin/config/search/multisite-redirect/%multisite_redirect/delete'] = array(
    'title' => 'Delete Redirect',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer multisite redirects'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_redirect_delete_form', 4),
    'file' => 'multisite_redirect.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function multisite_redirect_init() {
  global $base_url;
  $current = parse_url($base_url);
  $exclusions = variable_get('multisite_redirect_exclusions');
  if ((isset($exclusions[$current['host']]) && $exclusions[$current['host']] === 0) || !isset($exclusions[$current['host']])) {
    $rules = multisite_redirect_get_rules();
    if (!empty($rules)) {
      foreach ($rules as $rule) {
        $alias = drupal_lookup_path('alias', current_path());
        if (drupal_match_path($alias, $rule->source_path) || drupal_match_path(current_path(), $rule->source_path)) {
          drupal_alter('redirect_execute', $rule);
          multisite_redirect_execute($rule);
          break;
        }
      }
    }
  }
}

/**
 * Executes the redirect rule.
 *
 * @param object $rule
 */
function multisite_redirect_execute($rule) {
  module_invoke_all('redirect_execute', $rule);
  if (!empty($rule)) {
    $status_code = ($rule->status_code == 0) ? 301 : $rule->status_code;
    $rule->count += 1;
    $rule->access = time();
    multisite_redirect_save($rule);
    if (valid_url($rule->redirect, TRUE)) {
      drupal_goto($rule->redirect, array(), $status_code);
    }
    elseif (valid_url($rule->redirect)) {
      $primary = variable_get('multisite_redirect_primary_site');
      if (!empty($primary) && $rule->redirect != '*') {
        drupal_goto('http://' . $primary . '/' . $rule->redirect, array(), $status_code);
      }
      elseif (!empty($primary) && $rule->redirect == '*') {
        $alias = drupal_lookup_path('alias', current_path());
        drupal_goto('http://' . $primary . '/' . $alias, array(), $status_code);
      }
    }
    else {
      if (user_access('administer multisite redirects')) {
        drupal_set_message(t('Unable to perform redirect rule, invalid redirect path <strong>%path</strong>.', array('%path' => check_plain($rule->redirect))), 'warning');
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function multisite_redirect_theme($existing, $type, $theme, $path) {
  return array(
    'multisite_redirect_rules_table' => array(
      'render element' => 'element'
    ),
  );
}

/**
 * Returns a list of all site options for redirects as defined in sites.php.
 *
 * @param bool $show_current
 *   Specify whether or not to return the current site in the list of sites.
 * @param bool $show_any
 *   Specify whether or not to return the "any" option in the list of sites.
 * @return array
 *   Returns an array of site options.
 */
function multisite_redirect_get_sites($show_current = TRUE, $show_any = TRUE) {
  global $base_url;
  $current = parse_url($base_url);
  $conf_path = conf_path();
  $sites = array();
  $domains = array($current['host'] => $current['host']);
  if (file_exists(DRUPAL_ROOT . '/sites/sites.php')) {
    include(DRUPAL_ROOT . '/sites/sites.php');
  }
  foreach ($sites as $domain => $path) {
    if ('sites/' . $path == $conf_path) {
      $domains[$domain] = $domain;
    }
  }
  if (!$show_current) {
    unset($domains[$current['host']]);
  }
  asort($domains);
  return $show_any ? array_merge(array('any' => t('any')), $domains) : $domains;
}

/**
 * Delete form submit callback.
 */
function multisite_redirect_delete_form_submit($form, &$form_state) {
  multisite_redirect_delete($form['#redirect']->rid);
  drupal_set_message(t('Redirect deleted.'));
  drupal_goto('admin/config/search/multisite-redirect');
}

/**
 * Administrative form submit callback.
 */
function multisite_redirect_admin_form_submit($form, &$form_state) {
  foreach ($form['#rules'] as $rule) {
    $rule->weight = $form_state['values']['multisite_redirect_rules_table'][$rule->rid]['weight'];
    multisite_redirect_save($rule);
  }
}

/**
 * Edit form vaidation callback.
 */
function multisite_redirect_edit_form_validate($form, &$form_state) {
  if (!valid_url($form_state['values']['redirect']) && $form_state['values']['redirect'] != '<front>' && $form_state['values']['redirect'] != '*') {
    form_set_error('redirect', t('Invalid redirect path.'));
  }
}

/**
 * Edit form submit callback.
 */
function multisite_redirect_edit_form_submit($form, &$form_state) {
  $redirect = array_merge((array) $form['#redirect'], array(
    'source_site' => $form_state['values']['site'],
    'source_path' => $form_state['values']['path'],
    'redirect' => $form_state['values']['redirect'],
    'status_code' => $form_state['values']['status_code'],
  ));
  multisite_redirect_save((object) $redirect);
  drupal_set_message(t('Redirect rule saved.'));
  drupal_goto('admin/config/search/multisite-redirect');
}

/**
 * Prepares an empty redirect object.
 *
 * @param $redirect
 *   Empty stdObject to be modified.
 * @param array $defaults
 *   An array of default values to be merged into the redirect object.
 */
function multisite_redirect_object_prepare($redirect, $defaults = array()) {
  $defaults += array(
    'rid' => NULL,
    'source_site' => NULL,
    'source_path' => NULL,
    'redirect' => NULL,
    'language' => LANGUAGE_NONE,
    'status_code' => 0,
    'count' => 0,
    'access' => 0,
    'weight' => 0,
  );
  foreach ($defaults as $key => $default) {
    if (!isset($redirect->{$key})) {
      $redirect->{$key} = $default;
    }
  }
}

/**
 * Saves or updates a redirect rule to the database.
 *
 * @param $redirect
 *   Redirect rule to be saved to the database.
 * @return DatabaseStatementInterface|int|null
 *   A new query object for this connection.
 */
function multisite_redirect_save($redirect) {
  drupal_alter('redirect_rule', $redirect);
  if (empty($redirect->rid)) {
    module_invoke_all('redirect_insert', $redirect);
    return db_insert('multisite_redirect')
      ->fields((array) $redirect)
      ->execute();
    }
  else {
    module_invoke_all('redirect_update', $redirect);
    return db_update('multisite_redirect')
      ->fields((array) $redirect)
      ->condition('rid', $redirect->rid)
      ->execute();
  }
}

/**
 * Load a redirect rule from the database.
 *
 * @param $rid
 *   The rid of the redirect rule to be
 * @return array
 *   Returns a redirect rule.
 */
function multisite_redirect_load($rid) {
  $rules = multisite_redirect_load_multiple(array('rid' => $rid));
  if (!empty($rules)) {
    $rule = array_shift($rules);
    module_invoke_all('redirect_load', $rule);
    return $rule;
  }
  return NULL;
}

/**
 * Load multiple redirect rules from the database.
 *
 * @param array $conditions
 *   An array of database query conditions.
 * @return mixed
 *   A new query object for this connection.
 */
function multisite_redirect_load_multiple($conditions = array()) {
  $query = db_select('multisite_redirect')
    ->fields('multisite_redirect');
  if (!empty($conditions)) {
    foreach ($conditions as $field => $value) {
      $query->condition($field, $value);
    }
  }
  $query->orderBy('weight', 'ASC');
  $query->orderBy('rid', 'ASC');
  $result = $query->execute();
  return $result->fetchAll();
}

/**
 * Load all redirect rules for a specific site.
 *
 * @param $source_site
 *   The site to load the rules for.
 * @param bool $show_any
 *   True/false whether or not to show rules specified for the "any" option.
 * @return mixed
 *   Returns an array of redirect rules.
 */
function multisite_redirect_load_by_site($source_site, $show_any = TRUE) {
  $query = db_select('multisite_redirect')
    ->fields('multisite_redirect');
  if ($show_any) {
    $or = db_or();
    $or->condition('source_site', $source_site);
    $or->condition('source_site', 'any');
    $query->condition($or);
  }
  else {
    $query->condition('source_site', $source_site);
  }
  $query->orderBy('weight', 'ASC');
  $query->orderBy('rid', 'ASC');
  $result = $query->execute();
  return $result->fetchAll();
}

/**
 * Delete a redirect rule from the database.
 *
 * @param $rid
 *   The rid of the rule to be deleted.
 * @return DatabaseStatementInterface
 *   A new DeleteQuery object for this connection.
 */
function multisite_redirect_delete($rid) {
  module_invoke('redirect_delete', $rid);
  return db_delete('multisite_redirect')
    ->condition('rid', $rid)
    ->execute();
}

/**
 * Get the rules for the current site.
 *
 * @return mixed
 *   Returns an array of redirect rules.
 */
function multisite_redirect_get_rules() {
  global $base_url;
  $current = parse_url($base_url);
  $rules = &drupal_static(__FUNCTION__, multisite_redirect_load_by_site($current['host']));
  return $rules;
}

/**
 * Theme callback for multisite_redirect_rules_table.
 */
function theme_multisite_redirect_rules_table($vars) {
  $element = $vars['element'];
  drupal_add_tabledrag('multisite-redirect-rules-table', 'order', 'sibling', 'attribute-weight');

  $header = array(
    'source_site' => t('Source Site'),
    'source_path' => t('Source Path'),
    'redirect' => t('Redirect'),
    'status_code' => t('Status Code'),
    'access' => t('Last access'),
    'count' => t('Count'),
    'edit' => NULL,
    'delete' => NULL,
    'weight' => t('Weight'),
  );

  $rows = array();
  foreach (element_children($element) as $key) {
    $row = array();

    $row['data'] = array();
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($element[$key][$fieldname]);
      $row['class'] = array('draggable');
    }
    $rows[] = $row;
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'multisite-redirect-rules-table'),
  ));
}
