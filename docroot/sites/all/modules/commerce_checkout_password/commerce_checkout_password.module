<?php
// Define a constant to hold the session key that will store the hashed password from the checkout step.
define('COMMERCE_CHECKOUT_PASSWORD_SESSION_KEY', 'commerce_checkout_password');

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_checkout_password_commerce_checkout_pane_info() {
  return array(
    'commerce_checkout_password_pane' => array(
      'title' => t('Account password'),
      'page' => 'checkout',
      'base' => 'commerce_checkout_password_pane',
    ),
  );
}

/**
 * Form callback for the commerce_checkout_password_pane settings form.
 *
 * @param object $pane
 * @return array
 */
function commerce_checkout_password_pane_settings_form($pane) {
  $values = variable_get('commerce_checkout_password_header_markup', array(
    'value' => '',
    'format' => 'full_html',
  ));

  // Return our custom pane to display in the checkout step.
  return array(
    'commerce_checkout_password_header_markup' => array(
      '#type' => 'text_format',
      '#format' => $values['format'],
      '#title' => t('Help text'),
      '#default_value' => $values['value'],
      '#description' => 'Set the markup to use as help text for the password pane on the checkout page.',
    ),
  );
}

/**
 * Form callback for the commerce_checkout_password_pane form.
 *
 * @param array $form
 * @param array $form_state
 * @param object $pane
 * @param object $order
 * @return array
 */
function commerce_checkout_password_pane_checkout_form(&$form, &$form_state, $pane, $order) {
  // We're actually doing the real form building in hook_form_alter.
  // We need to do this to make sure the "account" element has already been constructed.

  // Return null so the pane handler doesn't render a fieldset.
  return null;
}

/**
 * Adds the password box to the checkout form.
 * We are assuming the "account" element has already been added to the form.
 *
 * @param array $form
 * @param array $form_state
 */
function commerce_checkout_password_add_pane(&$form, &$form_state) {
  // If the account element doesn't exist, we can't continue.
  // If the user is not an anonymous user, don't continue.
  if(!isset($form['account']) || !user_is_anonymous()) {
    return;
  }

  // Verify the checkout password pane is enabled.
  $enabled = db_select('commerce_checkout_pane', 'p')
    ->fields('p', array('pane_id'))
    ->condition('pane_id', 'commerce_checkout_password_pane')
    ->condition('enabled', 1)
    ->execute()->rowCount();

  // If it's not enabled, exit.
  if(!$enabled) {
    return;
  }

  $markup = variable_get('commerce_checkout_password_header_markup', array(
    'value' => '',
    'format' => 'full_html',
  ));

  $pane_form = array(
    'header_markup' => array(
      '#markup' => $markup['value'],
    ),
    'pass' => array(
      '#type' => 'password_confirm',
      '#required' => true,
    ),
  );

  // Instead of adding content to our custom pane, we're actually going to hijack the $form and add it to the "account".
  $form['account'] += $pane_form;

  // We also need to add some client side setting values to work with core's user.js
  $form['#attached']['js'][] = array(
    'data' => array(
      'password' => array(
        'username' => '',
      ),
    ),
    'type' => 'setting',
  );
}

/**
 * Callback for the commerce_checkout_password_pane's validate event.
 *
 * @param array $form
 * @param array $form_state
 * @param object $pane
 * @param object $order
 * @return bool
 */
function commerce_checkout_password_pane_checkout_form_validate($form, &$form_state, $pane, $order) {
  return true;
}

/**
 * Submit callback for the commerce_checkout_password_pane on the checkout step.
 *
 * @param array $form
 * @param array $form_state
 * @param object $pane
 * @param object $order
 */
function commerce_checkout_password_pane_checkout_form_submit($form, &$form_state, $pane, $order) {
  // Only add our password prompts for new users.
  if(user_is_anonymous() && isset($form_state['values']['account'])) {
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    // Get the password and hash it so we can safely store it in session for later use when updating the user.
    $pass = user_hash_password($form_state['values']['account']['pass']);
    $_SESSION[COMMERCE_CHECKOUT_PASSWORD_SESSION_KEY] = $pass;
  }
}

/**
 * Implements hook_user_insert().
 */
function commerce_checkout_password_user_insert(&$edit, $account, $category) {
  // We're going to override the password with the value that we stored in session if it exists.
  if(isset($_SESSION[COMMERCE_CHECKOUT_PASSWORD_SESSION_KEY])) {
    $user_password_hash = $_SESSION[COMMERCE_CHECKOUT_PASSWORD_SESSION_KEY];
    // We can't use the normal user_save(...) process to set the password because its built-in password saving process
    // hashes the password which we've already done. We're going to write the hash directly to the db.
    db_update('users')
      ->fields(array(
        'pass' => $user_password_hash))
      ->condition('uid', $account->uid)
      ->execute();
    // Be sure to remove our session variable now that we're done with it.
    unset($_SESSION[COMMERCE_CHECKOUT_PASSWORD_SESSION_KEY]);
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function commerce_checkout_password_commerce_checkout_complete($order) {
  // We'll want to manually create a user for the anonymous visitor and associate the order to it.
  global $user;

  // The below logic was mostly copied from the
  // function "commerce_checkout_complete_registration_confirmation_pane_checkout_form_submit"
  // in the "commerce_checkout_complete_registration.module" file.

  // Nothing to do for the authenticated users, or existing.
  if (!user_is_logged_in()) {
    // Set the new account data.
    $name = $order->mail;
    $mail = $order->mail;
    // Generate a random password, our custom password will be applied in hook_user_insert().
    $pass = user_password();
    $notify = variable_get('commerce_checkout_registration_account_notification', FALSE);

    // Setup the account fields array and save it as a new user.
    $fields = array(
      'name' => $name,
      'mail' => $mail,
      'init' => $mail,
      'pass' => $pass,
      'roles' => array(),
      'status' => 1,
      'timezone' => variable_get(
        'date_default_timezone',
        @date_default_timezone_get())
    );
    $account = user_save('', $fields);

    // Send the customer their account details if enabled.
    if ($notify) {
      global $language;
      // Send the e-mail through the user module.
      drupal_mail(
        'user',
        'register_no_approval_required',
        $mail,
        $language,
        array('account' => $account),
        commerce_email_from()
      );
    }

    // Set the current user to our new account.
    $user = $account;

    // Assign the order to the new user.
    $order->uid = $user->uid;
    commerce_order_save($order);

    // Assign the order customer profiles to the new user.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach (commerce_info_fields('commerce_customer_profile_reference', 'commerce_order') as $field_name => $field) {
      if ($order_wrapper->__isset($field_name)) {
        $customer_profile_wrapper = $order_wrapper->{$field_name};
        $customer_profile_wrapper->uid = $user->uid;
        $customer_profile_wrapper->save();
      }
    }

    // Use this event to do extra operations with Rules to the new account and/or order.
    rules_invoke_all('commerce_checkout_complete_registration', $user, $order);

    // We're logging in the user so lets mimic the login process.
    $user_login = array(
      'name' => $account->name,
      'uid' => $account->uid,
    );

    user_login_finalize($user_login);
  }
}

/*
* Implements hook_form_alter
*/
function commerce_checkout_password_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id='commerce_checkout_form_checkout') {
    if (isset($form['buttons'])){
      array_unshift($form['buttons']['continue']['#validate'],'check_form_validate');
    }
    commerce_checkout_password_add_pane($form, $form_state);
  }
}

function check_form_validate(&$form, &$form_state){
    if (isset($form_state['values']['account']['login']['mail'])){
      $mail=$form_state['values']['account']['login']['mail'];
    $user=user_load_by_mail($mail);
    // echo "<pre>"; print_r($user);exit();
    if (!empty($user->uid)) {
      form_set_error('account][login][mail',t("The email address is already in use please login or try another email address"));
    }
  }
}
