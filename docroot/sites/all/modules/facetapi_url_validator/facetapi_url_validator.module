<?php


/**
 * Implements hook_facetapi_url_processors().
 */
function facetapi_url_validator_facetapi_url_processors() {
  return array(
    'validator' => array(
      'handler' => array(
        'label' => t('Validating URL processors'),
        'class' => 'FacetapiUrlProcessorValidator',
      ),
    ),
  );
}

/**
 * Allows for alterations to the searcher definitions.
 *
 * @param array &$searcher_info
 *   The return values of hook_facetapi_searcher_info() implementations.
 *
 * Implements hook_facetapi_searcher_info().
 */
function facetapi_url_validator_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as &$info) {
    if ($info['url processor'] == 'standard') {
      $info['url processor'] = 'validator';
    }
  }
}

/**
 * Get the possible type validations.
 */
function facetapi_url_validator_type_validation_map() {
  $type_map = &drupal_static(__FUNCTION__);
  if (is_null($type_map)) {
    $key = 'facetapi_url_validator_type_validation_map';
    $type_map = module_invoke_all($key);
    if (!is_array($type_map)) {
      $type_map = array();
    }
    drupal_alter($key, $type_map);
  }
  return $type_map;
}

/**
 * Implements hook_facetapi_url_validator_type_validation_map().
 */
function facetapi_url_validator_facetapi_url_validator_type_validation_map() {
  return array(
    'integer' => 'is_numeric',
    'taxonomy_term' => 'is_numeric',
    'node' => 'is_numeric',
    'decimal' => 'is_numeric',
    'string' => 'is_string',
  );
}
