<?php

/**
 * @file
 * The core API to aggregate all your web activity into Drupal.
 */

/**
 * Implements hook_menu().
 */
function activitystream_menu() {
  $items['activity-stream'] = array(
    'access arguments'  => array('access content'),
    'file'              => 'activitystream.pages.inc',
    'page callback'     => 'activitystream_default_page',
    'title'             => 'Activity Stream',
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['user/%user/activity-stream'] = array(
    'access callback'   => 'user_view_access',
    'access arguments'  => array(1),
    'file'              => 'activitystream.pages.inc',
    'page callback'     => 'activitystream_default_page',
    'page arguments'    => array(1),
    'title'             => 'Activity Stream',
    'type'              => MENU_LOCAL_TASK,
  );
  $items['user/%user/edit/activity-stream'] = array(
    'access callback'   => 'user_edit_access',
    'access arguments'  => array(1),
    'file'              => 'activitystream.module',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('activitystream_accounts_form', 1),
    'title'             => 'Activity Stream accounts',
    'type'              => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function activitystream_theme() {
  $path = drupal_get_path('module', 'activitystream') . '/templates';

  return array(
    'activitystream_items_wrapper' => array(
      'render element'  => 'element',
    ),
    'activitystream_item' => array(
      'variables'       => array('node' => NULL, 'service' => NULL),
      'template'        => 'activitystream-item',
      'path'            => $path,
    ),
  );
}

/**
 * Process variables for activitystream-item.tpl.php.
 */
function template_preprocess_activitystream_item(&$variables) {
  $variables['statement']['actor'] = array(
    '#theme'    => 'username',
    '#account'  => $variables['node'],
  );
  $variables['statement']['verb'] = array(
    '#markup'   => isset($variables['service']['verb'])
                   ? ' ' . check_plain($variables['service']['verb']) . ' '
                   : ' ' . t('posted') . ' ',
  );
  $variables['statement']['object'] = array(
    '#type'     => 'link',
    '#title'    => $variables['node']->title,
    '#href'     => $variables['node']->activitystream_link[LANGUAGE_NONE][0]['value'],
  );
  $variables['time_ago'] = array(
    '#markup' => t('@time ago', array('@time' => format_interval(REQUEST_TIME - $variables['node']->created, 1))),
  );
  $variables['service_icon'] = array(
    '#theme' => 'image_formatter',
    '#item' => array(
      'uri'   => $variables['service']['icon'],
      'alt'   => $variables['service']['name'],
      'title' => $variables['service']['name'],
    ),
  );
  $variables['permalink_icon'] = array(
    '#theme' => 'image_formatter',
    '#item' => array(
      'uri'   => drupal_get_path('module', 'activitystream') . '/images/permalink.png',
      'alt'   => t('Permalink'),
      'title' => t('Permalink'),
    ),
    '#path' => array(
      'path'    => 'node/' . $variables['node']->nid,
      'options' => array('html' => TRUE),
    ),
  );
  $variables['external_icon'] = array(
    '#theme' => 'image_formatter',
    '#item' => array(
      'uri'   => drupal_get_path('module', 'activitystream') . '/images/external.png',
      'alt'   => t('External link'),
      'title' => t('External link'),
    ),
    '#path' => array(
      'path'    => $variables['node']->activitystream_link[LANGUAGE_NONE][0]['value'],
      'options' => array('html' => TRUE),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function activitystream_block_info() {
  return array(
    'activitystream_site_wide_block' => array(
      'info'  => t('Activity Stream (Site-wide, Wide)'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function activitystream_block_view($delta = '') {
  if ($delta == 'activitystream_site_wide_block') {
    include_once(drupal_get_path('module', 'activitystream') . '/activitystream.pages.inc');
    return array( // stupid file that I have to include. WHERE"S MY FUNCTION REGSITERYR.
      'content' => activitystream_default_block(NULL, 10, 'wide'),
      'subject' => t('Activity Stream'),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function activitystream_form_activitystream_item_node_form_alter(&$form, &$form_state) {
  // Archives don't allow raw data modifications.
  $form['activitystream_raw']['#disabled'] = TRUE;
}

/**
 * Implements hook_cron().
 */
function activitystream_cron() {
  $results = db_select('activitystream_account')
    ->fields('activitystream_account', array('uid', 'service', 'data'))
    ->execute()->fetchAll(); // NP: Bogus Order's "Granny Zen".

  foreach ($results as $result) {
    $items = activitystream_items_fetch($result->uid, $result->service, unserialize($result->data));
    activitystream_items_save($result->uid, $result->service, $items); // Must forage for food.
  }
}

/**
 * Call a service's items fetch hook and return the items.
 *
 * @param $uid
 *   The Drupal user whose items are being fetched.
 * @param $service
 *   The service whose items are being fetched.
 * @param $data
 *   The user's saved account information for the service.
 *
 * @return $items
 *   An array of items returned by the service for this user.
 */
function activitystream_items_fetch($uid, $service, $data) {
  $items = module_invoke_all('activitystream_' . $service . '_items_fetch', $uid, $data);
  drupal_alter('activitystream_' . $service . '_items', $items, $uid, $data);
  return $items;
}

/**
 * Retrieve the latest Activity Stream item nodes.
 *
 * @param $uid
 *   The Drupal user whose items are being loaded. If NULL,
 *   return the latest $count items, regardless of who owns them.
 * @param $count
 *   The number of items to return. Defaults to 20.
 *
 * @return $nodes
 *   A list of loaded nodes, sorted by descending creation date.
 */
function activitystream_items_load($uid = NULL, $count = 20) {
  $nodes = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activitystream_item')
    ->propertyCondition('status', 1)->propertyOrderBy('created', 'DESC');

  if (!empty($uid)) {
    $query->propertyCondition('uid', $uid);
  }

  $results = $query->pager($count)->execute();

  if (isset($results['node'])) {
    $nodes = node_load_multiple(array_keys($results['node']));
  }

  return $nodes;
}

/**
 * Create or update Activity Stream item nodes for a service and user.
 *
 * @param $uid
 *   The Drupal user whose items are being saved.
 * @param $service
 *   The service whose items are being saved.
 * @param $items
 *   An array of items retured by the service for this user.
 */
function activitystream_items_save($uid, $service, $items) {
  $body_format = &drupal_static(__FUNCTION__);
  if (!isset($body_format)) { // Ugh. Better way?
    $default_filter = array_shift(filter_formats());
    $field_body = field_read_instance('node', 'body', 'activitystream_item');
    $body_format = $field_body['settings']['text_processing'] ? $default_filter->format : NULL;
  }

  foreach ($items as $item) {
    $item['guid'] = !empty($item['guid']) ? $item['guid'] : $item['link'];

    // Does the GUID already exist?
    $query = new EntityFieldQuery();
    $guid_results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'activitystream_item') // OH HAI.
      ->fieldCondition('activitystream_guid', 'value', $item['guid'])
      ->propertyCondition('uid', $uid)->execute();

    // Re-use or create nodes.
    $source_changed = FALSE;
    if (isset($guid_results['node'])) {
      $result = array_shift($guid_results['node']);
      $node = node_load($result->nid);
      $source_changed = ($node->title != $item['title'] || $node->body[LANGUAGE_NONE][0]['value'] != $item['body']);
      // If the major parts of the item have changed, we'll edit and resave the node below.
    }
    else {
      $node = new stdClass();
      $node->type = 'activitystream_item';
      node_object_prepare($node);
      $node->uid = $uid; // Bad NOP.
      $node->language = LANGUAGE_NONE;
    }

    if ($source_changed || !isset($node->nid)) {
      $node->title    = $item['title'];
      $node->created  = $item['timestamp'];
      $node->activitystream_link[LANGUAGE_NONE][0]['value'] = $item['link'];
      $node->activitystream_service[LANGUAGE_NONE][0]['value'] = $service;
      $node->activitystream_guid[LANGUAGE_NONE][0]['value'] = $item['guid'];
      $node->activitystream_raw[LANGUAGE_NONE][0]['value'] = $item['raw'];
      $node->body[LANGUAGE_NONE][0] = array('format' => $body_format, 'value' => $item['body']);
      node_save($node);
    }
  }
}

/**
 * Form constructor for a user's Activity Stream accounts.
 *
 * Filled in by Activity Stream modules using hook_form_alter().
 */
function activitystream_accounts_form($form, &$form_state, $drupal_user) {
  $form['#user'] = $drupal_user;
  $form['#attached']['css'][] = array(
    'type' => 'file', // Tweak the form display for inlining, purdiness. Maybe.
    'data' => drupal_get_path('module', 'activitystream') . '/activitystream.css',
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Save'),
  );

  return $form;
}

/**
 * Form submit handler for a user's Activity Stream accounts.
 */
function activitystream_accounts_form_submit($form, &$form_state) {
  drupal_set_message(t('The changes have been saved.'));
}

/**
 * Load account information for a service.
 *
 * @param $service
 *   An identifier for the service whose data is being loaded.
 * @param $uid
 *   The Drupal user this stored data applies to (defaults to current user).
 *
 * @return $data
 *   The data stored for this service and user (unserialized).
 */
function activitystream_account_load($service = NULL, $uid = NULL) {
  $uid = isset($uid) ? $uid : $GLOBALS['user']->uid;
  return unserialize(db_select('activitystream_account')
    ->fields('activitystream_account', array('data'))
    ->condition('service', $service)->condition('uid', $uid)
    ->execute()->fetchField());
}

/**
 * Save account information for a service.
 *
 * @param $service
 *   An identifier for the service whose account is being saved.
 * @param $data
 *   The data being saved (of any type; serialization occurs).
 * @param $uid
 *   The Drupal user this stored data applies to (defaults to current user).
 */
function activitystream_account_save($service = NULL, $data = NULL, $uid = NULL) {
  $uid = isset($uid) ? $uid : $GLOBALS['user']->uid;
  db_merge('activitystream_account')
    ->key(array('uid' => $uid, 'service' => $service))
    ->fields(array('data' => serialize($data)))
    ->execute();
}

/**
 * Delete account information for a service.
 *
 * @param $service
 *   An identifier for the service whose account is being deleted.
 * @param $uid
 *   The Drupal user this stored data applies to (defaults to current user).
 */
function activitystream_account_delete($service = NULL, $uid = NULL) {
  $uid = isset($uid) ? $uid : $GLOBALS['user']->uid;
  db_delete('activitystream_account')
    ->condition('service', $service)
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Load information about available services.
 *
 * @return $services
 *   An array of all services.
 */
function activitystream_services_load() {
  $activitystream_services = &drupal_static(__FUNCTION__);

  if (!isset($activitystream_services)) {
    $activitystream_services = module_invoke_all('activitystream_services');
  }

  return $activitystream_services;
}
