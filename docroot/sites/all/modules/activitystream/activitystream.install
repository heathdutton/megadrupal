<?php

/**
 * @file
 * Install, update, and uninstall functions for Activity Stream Core.
 */

/**
 * Implements hook_schema().
 */
function activitystream_schema() {
  $schema['activitystream_account'] = array(
    'description' => 'Provides a general storage area for user service accounts.',
    'fields' => array(
      'uid' => array(
        'default'       => 0,
        'description'   => 'The {users}.uid that has configured a service.',
        'not null'      => TRUE,
        'type'          => 'int',
      ),
      'service'  => array(
        'default'       => '',
        'description'   => 'The internal service name which has been configured.',
        'length'        => 255,
        'not null'      => TRUE,
        'type'          => 'varchar',
      ),
      'data' => array(
        'description'   => "A serialized string of the user's service configuration.",
        'not null'      => TRUE,
        'size'          => 'big',
        'type'          => 'blob',
      ),
    ),
    'primary key'       => array('uid', 'service'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function activitystream_install() {
  $type = (object) array(
    'type'         => 'activitystream_item',
    'name'         => st('Activity Stream item'),
    'base'         => 'node_content',
    'description'  => st('Use <em>Activity Stream items</em> to record web activity.'),
    'custom'       => 1, // We don't delete for uninstall, so let users make that choice.
  );
  node_type_save($type);
  node_add_body_field($type);

  // Publish items by default, but do not promote to front.
  variable_set('node_options_activitystream_item', array('status'));

  $fields = array(
    array(
      'field_name'  => 'activitystream_link',
      'type'        => 'text',
    ),
    array(
      'field_name'  => 'activitystream_service',
      'type'        => 'text',
    ),
    array(
      'field_name'  => 'activitystream_guid',
      'type'        => 'text',
    ),
    array(
      'field_name'  => 'activitystream_raw',
      'type'        => 'text_long',
      'locked'      => TRUE,
    ),
  );
  foreach ($fields as $field) {
    field_create_field($field);
  }

  $instances = array(
    array(
      'entity_type' => 'node',
      'bundle'      => 'activitystream_item',
      'field_name'  => 'activitystream_link',
      'label'       => st('Link'),
      'description' => st('The service URL that represents this activity item.'),
      'widget'      => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type'  => 'text_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type'  => 'text_default',
        ),
      ),
    ),
    array(
      'entity_type' => 'node',
      'bundle'      => 'activitystream_item',
      'field_name'  => 'activitystream_service',
      'description' => st('The machine name of the service; usually set by modules.'),
      'label'       => st('Service'),
      'widget'      => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type'  => 'text_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type'  => 'text_default',
        ),
      ),
    ),
    array(
      'entity_type' => 'node',
      'bundle'      => 'activitystream_item',
      'field_name'  => 'activitystream_guid',
      'description' => st('For duplicates and remote update handling; usually set by modules.'),
      'label'       => st('Globally unique identifier (GUID)'),
      'widget'      => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type'  => 'hidden',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type'  => 'hidden',
        ),
      ),
    ),
    array(
      'entity_type' => 'node',
      'bundle'      => 'activitystream_item',
      'field_name'  => 'activitystream_raw',
      'label'       => st('Raw data'),
      'description' => st('The raw data received from the service for this activity item.'),
      'widget'      => array(
        'type'      => 'text_textarea',
        'settings'  => array(
          'rows'    => 10,
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type'  => 'hidden',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type'  => 'hidden',
        ),
      ),
    ),
  );
  foreach ($instances as $instance) {
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 */
function activitystream_uninstall() {
  // Activity Stream strives to promote archiving of a users' web
  // activity so we deliberately leave content and structure intact.
  // We will, however, delete configuration specific to the module
  // (such as {activitystream_accounts} and any variables).
}

