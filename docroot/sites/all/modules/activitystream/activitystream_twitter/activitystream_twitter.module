<?php

/**
 * @file
 * Import Twitter tweets into a user's Activity Stream.
 */

/**
 * Implements hook_activitystream_services().
 */
function activitystream_twitter_activitystream_services() {
  return array(
    'twitter' => array(
      'type'  => 'twitter',
      'name'  => t('Twitter'),
      'verb'  => t('tweeted'),
      'icon'  => drupal_get_path('module', 'activitystream_twitter') . '/twitter.png',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function activitystream_twitter_form_activitystream_accounts_form_alter(&$form, &$form_state) {
  $form['activitystream_twitter']['activitystream_twitter_username'] = array(
    '#default_value'  => activitystream_account_load('twitter', $form['#user']->uid),
    '#title'          => t('Twitter username'),
    '#type'           => 'textfield',
  );

  $form['#submit'][] = 'activitystream_twitter_form_activitystream_accounts_form_submit';
}

/**
 * Form submit handler for a user's Activity Stream accounts.
 */
function activitystream_twitter_form_activitystream_accounts_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['activitystream_twitter_username'])) {
    $twitter_username = str_replace('@', '', $form_state['values']['activitystream_twitter_username']);
    activitystream_account_save('twitter', $twitter_username, $form['#user']->uid);
  }
  else {
    activitystream_account_delete('twitter', $form['#user']->uid);
  }
}

/**
 * Implements hook_activitystream_SERVICE_items_fetch().
 */
function activitystream_twitter_activitystream_twitter_items_fetch($uid, $twitter_username) {
  $feed_url = 'http://twitter.com/statuses/user_timeline/' . $twitter_username . '.rss';
  $items = activitystream_feed_items_fetch($uid, $feed_url);

  foreach ($items as $index => $item) {
    // Only do @ and # linking here. Any URLs included in the tweet might be
    // handled by $node->body[...]['safe_value'] and the filtered_html format,
    // which defaults to linking URLs already. This does mean that an admin
    // COULD accidentally disable auto-conversion of plain URLs, but we felt
    // that was a better tradeoff than using or replicating _filter_url().
    // This also means we need to tweak the activitystream_item statement to
    // use the formatted body instead of the plain-text title. See preprocess.
    $items[$index]['body']  = preg_replace('/@(\w*)/', '<a href="http://twitter.com/$1">@$1</a>', $items[$index]['body']);
    $items[$index]['body']  = preg_replace('/#(\w*)/', '<a href="http://twitter.com/#!/search/$1">#$1</a>', $items[$index]['body']);

    // Remove the user's Twitter username from the beginning of the feed.
    $items[$index]['body']  = preg_replace('/^(' . $twitter_username . '): /', '', $items[$index]['body']);
    $items[$index]['title'] = preg_replace('/^(' . $twitter_username . '): /', '', $items[$index]['title']);
  }

  return $items;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * We've saved the fetched tweet with some extra @username and #hashtag links,
 * so we want to use the node body for rendering instead of reapplying the
 * munging to the plain-text title. We also hope this allows piggy-backing
 * off the default URL linking present in core's _filter_url().
 */
function activitystream_twitter_preprocess_activitystream_item(&$variables) {
  if ($variables['service']['type'] == 'twitter') {
    unset($variables['statement']['object']);
    $variables['statement']['object'] = array(
      '#markup' => '"' . preg_replace('/\s*<\/?p>\s*/', '', $variables['node']->body[LANGUAGE_NONE][0]['safe_value']) . '"',
    );
  }
}

