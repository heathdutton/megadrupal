<?php

/**
 * @file
 * Provides integration with Moneris Hosted Pay Page payment method (off-site).
 */

define('COMMERCE_MONERIS_HPP_URL_US_PROD', 'https://esplus.moneris.com/DPHPP/index.php');
define('COMMERCE_MONERIS_HPP_URL_US_TEST', 'https://esplusqa.moneris.com/DPHPP/index.php');

define('COMMERCE_MONERIS_HPP_URL_CA_PROD', 'https://www3.moneris.com/HPPDP/index.php');
define('COMMERCE_MONERIS_HPP_URL_CA_TEST', 'https://esqa.moneris.com/HPPDP/index.php');

define('COMMERCE_PAYMENT_STATUS_MONERIS_CANCELLED', 'moneris_cancelled');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_moneris_hpp_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_moneris_hpp'] = array(
    'title' => 'Moneris HPP',
    'display_title' => 'Credit card',
    'description' => t('Moneris Hosted Pay Page payment method (off-site)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
function commerce_moneris_hpp_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[COMMERCE_PAYMENT_STATUS_MONERIS_CANCELLED] = array(
    'status' => COMMERCE_PAYMENT_STATUS_MONERIS_CANCELLED,
    'title' => t('Cancelled'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-failure.png',
    'total' => FALSE,
  );

  return $statuses;
}

/**
 * Implements hook_menu().
 */
function commerce_moneris_hpp_menu() {
  $items = array();

  // Response URL.
  $items['commerce-moneris-hpp/callback'] = array(
    'page callback' => 'commerce_moneris_hpp_callback_response',
    'page arguments' => array('response'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Async Response URL.
  $items['commerce-moneris-hpp/validate'] = array(
    'page callback' => 'commerce_moneris_hpp_callback_response',
    'page arguments' => array('validate'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Payment method callback: settings form.
 */
function commerce_moneris_hpp_settings_form($settings = array()) {
  global $base_url;

  // Merge default settings into the stored settings array.
  // Settings are stored in multi-level array, so we need recursive merge. And
  // actually replace instead of merge, to make sure the default settings are
  // correctly overriden by custom user settings (array_merge_recursive() would
  // just add new array elements instead of overriding existing ones).
  $settings = array_replace_recursive(commerce_moneris_hpp_settings_default(), $settings);

  $form = array();

  $markup = '<p>' . t('Response URL: @response_url', array('@response_url' => $base_url . '/commerce-moneris-hpp/callback'));
  $markup .= '<br />' . t('Async Response URL: @response_url', array('@response_url' => $base_url . '/commerce-moneris-hpp/validate')) . '</p>';
  $form['markup'] = array(
    '#markup' => $markup,
  );

  $form['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Gateway'),
    '#options' => commerce_moneris_gateways(TRUE),
    '#default_value' => $settings['gateway'],
  );

  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => commerce_moneris_environments(TRUE),
    '#default_value' => $settings['server'],
  );

  // Collect Moneris Store ID and HPP Key for each available environment.
  foreach (commerce_moneris_gateways() as $gateway_id => $gateway) {
    foreach (commerce_moneris_environments() as $environment_id => $environment) {

      $form[$gateway_id][$environment_id]['store_id'] = array(
        '#type' => 'textfield',
        '#title' => t('@gateway @environemnt Store ID', array(
          '@gateway' => $gateway,
          '@environemnt' => $environment,
        )),
        '#default_value' => $settings[$gateway_id][$environment_id]['store_id'],
        '#states' => array(
          'visible' => array(
            ':input[name*="gateway"]' => array('value' => $gateway_id),
            ':input[name*="server"]' => array('value' => $environment_id),
          ),
          'required' => array(
            ':input[name*="gateway"]' => array('value' => $gateway_id),
            ':input[name*="server"]' => array('value' => $environment_id),
          ),
        ),
      );

      $form[$gateway_id][$environment_id]['hpp_key'] = array(
        '#type' => 'textfield',
        '#title' => t('@gateway @env HPP Key', array(
          '@gateway' => $gateway,
          '@env' => $environment,
        )),
        '#default_value' => $settings[$gateway_id][$environment_id]['hpp_key'],
        '#states' => array(
          'visible' => array(
            ':input[name*="gateway"]' => array('value' => $gateway_id),
            ':input[name*="server"]' => array('value' => $environment_id),
          ),
          'required' => array(
            ':input[name*="gateway"]' => array('value' => $gateway_id),
            ':input[name*="server"]' => array('value' => $environment_id),
          ),
        ),
      );

    }
  }

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  if (module_exists('commerce_moneris_api')) {
    $options = array();
    foreach (commerce_moneris_payment_method_instances('commerce_moneris_api') as $instance => $method) {
      $options[$instance] = $method['title'];
    }
    $form['moneris_api'] = array(
      '#type' => 'select',
      '#title' => t('Moneris API payment method'),
      '#description' => t('Selected Moneris API payment method will be use for <em>Refund</em>, <em>Capture</em>, <em>ReAuth</em> and <em>Reverse</em> transactions.'),
      '#options' => $options,
      '#empty_option' => t('- Select -'),
      '#default_value' => $settings['moneris_api'],
    );
  }

  return $form;
}

/**
 * Returns default settings for the Moneris HPP payment method.
 *
 * @see commerce_moneris_hpp_settings_form()
 */
function commerce_moneris_hpp_settings_default() {
  $default_settings = array(
    'gateway' => COMMERCE_MONERIS_USA,
    'server' => 'test',
    'log' => array(),
    'moneris_api' => array(),
  );
  foreach (commerce_moneris_gateways() as $gateway_id => $gateway) {
    foreach (commerce_moneris_environments() as $environment_id => $environment) {
      $default_settings[$gateway_id][$environment_id]['store_id'] = '';
      $default_settings[$gateway_id][$environment_id]['hpp_key'] = '';
    }
  }
  return $default_settings;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_moneris_hpp_redirect_form($form, &$form_state, $order, $payment_method) {
  // Payment method settings.
  $gateway = $payment_method['settings']['gateway'];
  $environment = $payment_method['settings']['server'];
  $store_id = $payment_method['settings'][$gateway][$environment]['store_id'];
  $hpp_key = $payment_method['settings'][$gateway][$environment]['hpp_key'];

  // Amount.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  // Make sure the order uses the same currency as the gateway, otherwise
  // otherwise redirect back to previous checkout page with an error.
  // The problem is that both Moneris gateways support only one currency native
  // to their relevant country, so the currency of the requested transactions
  // is not configurable - therefore is has to be the same as the gateway
  // supported currency.
  $gateway_currency_code = commerce_moneris_currency($gateway);
  if ($currency_code != $gateway_currency_code) {
    $message = 'Unable to request the payment for order ID @order_id. Order currency (@order_currency) must be the same as selected Moneris gateway currency (@gateway_currency) for payment method @payment_method.';
    $variables = array(
      '@order_id' => $order->order_id,
      '@order_currency' => $currency_code,
      '@gateway_currency' => $gateway_currency_code,
      '@payment_method' => $payment_method['instance_id'],
    );
    commerce_payment_redirect_pane_previous_page($order, t($message, $variables));
    $order_link = l(t('view order'), 'admin/commerce/orders/' . $order->order_id);
    watchdog('commerce_moneris_hpp', $message, $variables, WATCHDOG_ERROR, $order_link);
    drupal_set_message('We encountered an error processing your transaction. Please contact us to resolve the issue.', 'error');
    drupal_goto(commerce_checkout_order_uri($order));
  }

  // Save initial transaction.
  $transaction = commerce_payment_transaction_new('commerce_moneris_hpp', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->payload = array(
    'gateway' => $gateway,
    'server' => $environment,
  );

  $transaction->amount = $amount;
  $transaction->currency_code = $currency_code;
  commerce_payment_transaction_save($transaction);

  // Order number sent to Moneris must be unique per transaction.
  // Therefore we will combine it with our local transaction ID.
  $unique_order_id = $order->order_id . '-' . $transaction->transaction_id;
  $transaction->payload['unique_order_id'] = $unique_order_id;

  // Convert the price amount to a user friendly decimal value.
  $amount = number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 2, '.', '');

  // Create transaction data.
  switch ($gateway) {
    case COMMERCE_MONERIS_USA:
      $data = array(
        'amount' => $amount,
        'order_no' => $unique_order_id,
        'cust_id' => $order->uid,
        'client_email' => $order->mail,
      );
      break;
    case COMMERCE_MONERIS_CANADA:
      $data = array(
        'charge_total' => $amount,
        'order_id' => $unique_order_id,
        'cust_id' => $order->uid,
        'email' => $order->mail,
      );
      break;
  }
  // We don't want payment method settings (including merchant details) to go
  // through alter hook implementations below, so we will add them only after
  // they have been already called.

  // Allow other modules to alter the $data.
  drupal_alter('commerce_moneris_hpp_data', $data, $order);

  // Add remaining required details.
  switch ($gateway) {
    case COMMERCE_MONERIS_USA:
      $data['hpp_id'] = $store_id;
      $data['hpp_key'] = $hpp_key;
      break;
    case COMMERCE_MONERIS_CANADA:
      $data['ps_store_id'] = $store_id;
      $data['hpp_key'] = $hpp_key;
      break;
  }

  $transaction->payload['request'] = $data;
  commerce_payment_transaction_save($transaction);

  // Log the request if required.
  if (!empty($payment_method['settings']['log']['request'])) {
    watchdog('commerce_moneris_hpp', 'request: <pre>' . check_plain(print_r($data, TRUE)) . '</pre>', array(), WATCHDOG_DEBUG);
  }

  // Prepare redirect form.
  $form = array();
  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  $form['#action'] = commerce_moneris_hpp_get_server_url($gateway, $environment);

  return $form;
}

/**
 * Callback page for both gateway responses - redirect back and validate.
 *
 * @param string $callback_type
 *   A string indicating which callback type we are dealing with.
 *   Might be either 'response', when a user is redirected back from Moneris
 *   gateway after completing/cancelling the payment transaction, or 'validate',
 *   when the gateway performs an asyncronous callback to verify transaction
 *   details/status.
 *
 * @see commerce_moneris_hpp_menu().
 */
function commerce_moneris_hpp_callback_response($callback_type) {
  // Fetch Moneris gateway transaction response.
  if ($response = commerce_moneris_hpp_get_response()) {

    // For Asyncronous Response callbacks the response is returned as XML
    // in the 'xml_response' value.
    if ($callback_type == 'validate' && !empty($response['xml_response'])) {
      $response = (array) new SimpleXMLElement($response['xml_response']);
      // A small extra trick to ensure all possible child SimpleXMLElement
      // are converted to arrays as well. Borrowed from
      // http://stackoverflow.com/questions/834875/recursive-cast-from-simplexmlobject-to-array
      $response = json_decode(json_encode($response), 1);
    }

    // At this moment we still have no idea whether we are dealing with US
    // or CA gateway, so we just try both response fields to find order_id.
    $order_no = (!empty($response['order_no'])) ? $response['order_no'] : $response['response_order_id'];
    list($order_id, $transaction_id) = explode('-', $order_no);
    if ($order = commerce_order_load($order_id)) {
      $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

      // Log received response in dblog.
      if (!empty($payment_method['settings']['log']['response'])) {
        watchdog('commerce_moneris_hpp', $callback_type . ': <pre>' . check_plain(print_r($response, TRUE)) . '</pre>', array(), WATCHDOG_DEBUG);
      }

      // Log received response in transaction payload.
      $transaction = commerce_payment_transaction_load($transaction_id);
      $transaction->payload[$callback_type] = $response;
      commerce_payment_transaction_save($transaction);

      // Return false if payment method instance was not found.
      if (!$payment_method || $payment_method['method_id'] != 'commerce_moneris_hpp') {
        $error = 'Unable to load payment method';
      }

      // For the response callback type (user returning to the site after
      // completing the payment process) we don't want to save the updated
      // transaction just yet. Instead we will move the order forward in the
      // checkout process (or backwards, if the payment transaction failed
      // for any reason) to take the user to the order completion page.
      if (commerce_moneris_hpp_process_response($response, $payment_method, $transaction)) {
        if ($callback_type == 'response') {
          commerce_payment_redirect_pane_next_page($order);
        }
      }

      // For the response callback type (user returning to the site after
      // completing the payment process) we don't want to save the updated
      // transaction just yet. We only want to do it only when we receive
      // the asyncronous validation callback from the gateway, regardless
      // of whether the transaction succeeded or failed.
      if ($callback_type == 'validate') {
        commerce_payment_transaction_save($transaction);
      }
      // In case of response callback we want to display an error
      // message to the user if the transaction failed.
      else {
        if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
          $error = 'We encountered an error processing your transaction. Please enter your information again or try a different card.';
        }
        elseif ($transaction->status == COMMERCE_PAYMENT_STATUS_MONERIS_CANCELLED) {
          $error = 'You have cancelled payment, but may resume the checkout process here when you are ready.';
        }
      }
    }
    // We were unable to load the original order.
    else {
      $error = 'Unable to load an order';
    }
  }
  else {
    $error = 'Unable to get response';
  }

  if (!empty($error)) {
    // Log the error message in the dblog, both in case of response
    // and validate gateway callbacks.
    watchdog('commerce_moneris_hpp', '@error. Gateway response: @response', array(
      '@error' => $error,
      '@response' => '<pre>' . var_export($response, TRUE) . '</pre>',
    ), WATCHDOG_ERROR);

    // In case of the response callback display the error message to the user
    // and move the order backwards in the checkout process.
    if (!empty($order) && $callback_type == 'response') {
      commerce_payment_redirect_pane_previous_page($order);
      drupal_set_message(t($error), 'error');
    }
  }

  // In case of the response callback, after we moved the order forward (or
  // backwards, if the transaction failed), we need to redirect the user to
  // the relevant page. No need to redirect for validation callback, as
  // no page is being displayed in this case.
  if (!empty($order) && $callback_type == 'response') {
    drupal_goto(commerce_checkout_order_uri($order));
  }
}

/**
 * Gets Moneris HPP feedback from GET/POST parameters.
 *
 * @return
 *   An associative array containing the Moneris feedback taken from the $_GET
 *   and $_POST superglobals, excluding 'q'.
 */
function commerce_moneris_hpp_get_response() {
  // Prepare the response values sent by Moneris for processing. We don't use
  // $_REQUEST since this includes the $_SESSION variables.
  $response = $_GET + $_POST;
  unset($response['q']);

  return $response;
}

/**
 * Processes response received from Moneris HPP and updates transaction object.
 *
 * @param $response
 * @param $payment_method
 * @param $transaction
 * @return bool
 */
function commerce_moneris_hpp_process_response($response, $payment_method, &$transaction) {
  if (empty($payment_method['settings']['gateway'])) {
    return FALSE;
  }

  $gateway = $payment_method['settings']['gateway'];
  $environment = $payment_method['settings']['server'];

  $txn_type_field = commerce_moneris_hpp_get_response_field_name('txn_type', $gateway);

  // Transaction was cancelled (US). There is no Enhanced Cancel support on US
  // gateway (as there is on CA), so we won't receive any transaction details
  // in the callback (like 'response_code' or anything else really).
  if (!empty($response['cancel'])) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_MONERIS_CANCELLED;
    $transaction->message = $response['cancel'];
    $return = FALSE;
  }
  // Transaction was cancelled (CA).
  // TODO: Check $response['result'] here as well?
  elseif ($response['response_code'] == '914') {
    $transaction->status = COMMERCE_PAYMENT_STATUS_MONERIS_CANCELLED;
    $transaction->message = $response['message'];
    $return = FALSE;
  }
  elseif (empty($response['result']) || $response['result'] != '1') {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = $response['message'];
    $return = FALSE;
  }
  else {
    // Response code will be returned as a string like '027', so we need
    // to convert it to a proper integer first before checking its value.
    $response_code = (int) $response['response_code'];

    // Transaction was approved.
    if ($response_code < 50) {
      $transaction->status = commerce_moneris_hpp_get_transaction_success_status($response[$txn_type_field]);
      $return = TRUE;
    }
    // Transaction was declined.
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $return = FALSE;
    }

    // Update commerce payment transaction.
    $transaction->remote_id = $response['txn_num'];

    // Build transaction message from main status message and all validators.
    $transaction->message = t('@txn_type: !message', array(
      '@txn_type' => commerce_moneris_hpp_get_transaction_type($response, $gateway),
      '!message' => $response['message'],
    ));
    // Add eFraud information if available.
    $cvd_field = commerce_moneris_hpp_get_response_field_name('cvd', $gateway);
    if (!empty($response[$cvd_field]) && $response[$cvd_field] != 'null') {
      $transaction->message .= '<br />' . t('CVD result: @result', array('@result' => commerce_moneris_get_cvd_response($response[$cvd_field])));
    }
    $avs_field = commerce_moneris_hpp_get_response_field_name('avs', $gateway);
    $card_type_field = commerce_moneris_hpp_get_response_field_name('card_type', $gateway);
    if (!empty($response[$avs_field]) && $response[$avs_field] != 'null') {
      $transaction->message .= '<br />' . t('AVS result: @result', array('@result' => commerce_moneris_get_avs_response($response[$avs_field], $response[$card_type_field], $gateway)));
    }
    $cavv_field = commerce_moneris_hpp_get_response_field_name('cavv', $gateway);
    if (!empty($response[$cavv_field]) && $response[$cavv_field] != 'null') {
      $transaction->message .= '<br />' . t('CAVV result: @result', array('@result' => commerce_moneris_get_cavv_response($response[$cavv_field])));
    }
  }

  // Store the type of transaction in the remote status.
  // For cancelled transaction we won't receive this in the response.
  if (!empty($response[$txn_type_field])) {
    $transaction->remote_status = $response[$txn_type_field];
  }

  return $return;
}

/**
 * Get the Moneris HPP server URL.
 */
function commerce_moneris_hpp_get_server_url($gateway, $environment) {
  $elements = array(
    'COMMERCE_MONERIS_HPP_URL',
    $gateway,
    $environment,
  );
  return constant(strtoupper(implode('_', $elements)));
}

/**
 * Returns Drupal-Commerce compatible transaction status for a transaction type.
 *
 * @param string $trans_type
 *   Moneris HPP transaction type.
 *
 * @return string
 *   Drupal Commerce-compatible transaction status for a given transaction type.
 */
function commerce_moneris_hpp_get_transaction_success_status($trans_type) {
  switch ($trans_type) {
    // Purchase. Use standard transaction success status, which means
    // these transactions will be included in order balance calculations.
    case COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_PURCHASE:
    case COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_CAVV_PURCHASE:
      return COMMERCE_PAYMENT_STATUS_SUCCESS;
    // PreAuth. We don't want these transactions to be included in order
    // balance calculations, so we'll use custom status for them.
    case COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_AUTH:
    case COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_CAVV_PREAUTH:
      return COMMERCE_PAYMENT_STATUS_MONERIS_AUTHORISED;
  }
}

/**
 * Returns Moneris response field name based on the used gateway.
 *
 * @param $field
 * @param $gateway
 * @return string
 */
function commerce_moneris_hpp_get_response_field_name($field, $gateway) {
  switch ($field) {
    case 'order_id': return ($gateway == COMMERCE_MONERIS_USA) ? 'order_no' : 'response_order_id';
    case 'txn_type': return ($gateway == COMMERCE_MONERIS_USA) ? 'txn_type' : 'trans_name';
    case 'amount': return ($gateway == COMMERCE_MONERIS_USA) ? 'amount' : 'charge_total';
    case 'card_type': return ($gateway == COMMERCE_MONERIS_USA) ? 'card_type' : 'Card';
    case 'cvd': return ($gateway == COMMERCE_MONERIS_USA) ? 'cvd_result' : 'cvd_response_code';
    case 'avs': return ($gateway == COMMERCE_MONERIS_USA) ? 'avs_result' : 'avs_response_code';
    case 'cavv': return ($gateway == COMMERCE_MONERIS_USA) ? 'cavv_result_code' : 'cavv_response_code';
  }
}

/**
 * Returns transaction type for specific TransType response code.
 *
 * @param string $trans_type
 *   TransType response code received in response from Moneris HPP.
 *
 * @return string
 *   Transaction type.
 */
function commerce_moneris_hpp_get_transaction_type($response, $gateway) {
  $txn_type_field = commerce_moneris_hpp_get_response_field_name('txn_type', $gateway);
  return $response[$txn_type_field];
}
