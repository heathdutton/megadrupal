<?php

/**
 * @file
 * Provides moneris payment method for Drupal Commerce.
 */

define('COMMERCE_MONERIS_CANADA', 'ca');
define('COMMERCE_MONERIS_USA', 'us');

define('COMMERCE_MONERIS_CURRENCY_US', 'USD');
define('COMMERCE_MONERIS_CURRENCY_CA', 'CAD');

define('COMMERCE_MONERIS_PRODUCTION', 'prod');
define('COMMERCE_MONERIS_TEST', 'test');

// These constants should really sit in hpp module, but they are also used
// by the API module, so they need to be somewhere available for both.
define('COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_PURCHASE', 'purchase');
define('COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_AUTH', 'preauth');
define('COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_ACHDEBIT', 'achdebit');
define('COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_CAVV_PURCHASE', 'cavv_purchase');
define('COMMERCE_MONERIS_HPP_TRANSACTION_TYPE_CAVV_PREAUTH', 'cavv_preauth');

/**
 * Implements hook_permission().
 */
function commerce_moneris_permission() {
  return array(
    'administer moneris' => array(
      'title' => t('Administer Moneris'),
      'description' => t('Perform administrative actions with Moneris.'),
    ),
  );
}

/**
 * Returns available Moneris environments.
 *
 * @param bool $translated
 *   A boolean indicating whether returned strings should be translated or not.
 *
 * @return array
 *   An array of available Moneris environments.
 */
function commerce_moneris_environments($translated = FALSE) {
  $environments = array(
    COMMERCE_MONERIS_TEST => 'Test',
    COMMERCE_MONERIS_PRODUCTION => 'Production',
  );

  if ($translated) {
    $environments = array_map('t', $environments);
  }

  return $environments;
}

/**
 * Returns available Moneris gateways (countries).
 *
 * @param bool $translated
 *   A boolean indicating whether returned strings should be translated or not.
 *
 * @return array
 *   An array of available Moneris gateways (countries).
 */
function commerce_moneris_gateways($translated = FALSE) {
  $gateways = array(
    COMMERCE_MONERIS_CANADA => t('Canada'),
    COMMERCE_MONERIS_USA => t('US'),
  );

  if ($translated) {
    $gateways = array_map('t', $gateways);
  }

  return $gateways;
}

/**
 * Returns currency code for the selected Moneris gateway.
 *
 * @param string $gateway
 *   String identifying current Moneris gateway.
 *
 * @return string
 *   Currency code for the current Moneris gateway.
 */
function commerce_moneris_currency($gateway) {
  return ($gateway == COMMERCE_MONERIS_USA) ? COMMERCE_MONERIS_CURRENCY_US : COMMERCE_MONERIS_CURRENCY_CA;
}

/**
 * Returns CVD indicator value description for specific CVD response code.
 *
 * @param string $cvd_response_code
 *   CVD response code received in response from Moneris API.
 *
 * @return string
 *   CVD indicator value description.
 */
function commerce_moneris_get_cvd_indicator($cvd_indicator) {
  switch ($cvd_indicator) {
    case '0': return t('CVD value is deliberately bypassed or is not provided by the merchant.');
    case '1': return t('CVD value is present.');
    case '2': return t('CVD value is on the card, but is illegible.');
    case '9': return t('Cardholder states that the card has no CVD imprint.');
  }
  return t('Unknown CVD indicator.');
}

/**
 * Returns description for specific CVD response code.
 *
 * @param $cvd_response_code
 *   CVD code received in response from Moneris API.
 *
 * @return string
 *   CVD response code description.
 */
function commerce_moneris_get_cvd_response($cvd_response_code) {
  switch ($cvd_response_code) {
    case 'M': return t('Match');
    case 'Y': return t('Match for AmEx/JCB');
    case 'N': return t('No Match');
    case 'P': return t('Not Processed');
    case 'S': return t('CVD should be on the card, but Merchant has indicated that CVD is not present');
    case 'R': return t('Retry for AmEx');
    case 'U': return t('Issuer is not a CVD participant');
    case 'D': return t('Invalid security code for AmEx/JCB');
  }
  return t('Invalid Response Code');
}

/**
 * Returns description for specific AVS response code.
 *
 * @param string $avs_response_code
 *   AVS code received in response from Moneris API.
 * @param string $card_type
 *   Card type code received in response from Moneris API.
 *
 * @return string
 *   AVS response code description.
 */
function commerce_moneris_get_avs_response($avs_response_code, $card_type, $gateway) {
  if ($gateway == COMMERCE_MONERIS_USA) {
    switch ($card_type) {
      // Visa, Discover and JCB.
      case 'V':
      case 'NO':
      case 'C1':
        switch ($avs_response_code) {
          case 'A': return t('Address matches, ZIP does not. Acquirer rights not implied.');
          case 'B': return t('Street addresses match. Zip code not verified due to incompatible formats. (Acquirer sent both street address and zip code.)');
          case 'C': return t('Street addresses not verified due to incompatible formats. (Acquirer sent both street address and zip code.)');
          case 'D': return t('Street addresses and zip codes match.');
          case 'F': return t('Street address and zip code match. Applies to U.K. only');
          case 'G': return t('Address information not verified for international transaction. Issuer is not an AVS participant, or AVS data was present in the request but issuer did not return an AVS result, or Visa performs AVS on behalf of the issuer and there was no address record on file for this account.');
          case 'I': return t('Address information not verified.');
          case 'M': return t('Street address and zip code match.');
          case 'N': return t('No match. Acquirer sent postal/ZIP code only, or street address only, or both zip code and street address. Also used when acquirer requests AVS but sends no AVS data.');
          case 'P': return t('Zip code match. Acquirer sent both zip code and street address but street address not verified due to incompatible formats.');
          case 'R': return t('Retry: system unavailable or timed out. Issuer ordinarily performs AVS but was unavailable. The code R is used by Visa when issuers are unavailable. Issuers should refrain from using this code.');
          case 'U': return t('Address not verified for domestic transaction. Issuer is not an AVS participant, or AVS data was present in the request but issuer did not return an AVS result, or Visa performs AVS on behalf of the issuer and there was no address record on file for this account.');
          case 'W': return t('Not applicable. If present, replaced with ‘Z’ by Visa. Available for U.S. issuers only.');
          case 'Y': return t('Street address and zip code match.');
          case 'Z': return t('Postal/Zip matches; street address does not match or street address not included in request.');
        }
      // MasterCard.
      case 'M':
        switch ($avs_response_code) {
          case 'A': return t('Address matches, zip code does not.');
          case 'N': return t('Neither address nor zip code matches.');
          case 'R': return t('Retry; system unable to process.');
          case 'S': return t('AVS currently not supported.');
          case 'U': return t('No data from Issuer/Authorisation system.');
          case 'W': return t('For U.S. Addresses, nine-digit zip code matches, address does not; for address outside the U.S. postal code matches, address does not.');
          case 'X': return t('For U.S. addresses, nine-digit zip code and addresses matches; for addresses outside the U.S., postal code and address match.');
          case 'Y': return t('For U.S. addresses, five-digit zip code and address matches.');
          case 'Z': return t('For U.S. addresses, five digit zip code matches, address does not.');
        }
      // American Express.
      case 'AX':
        switch ($avs_response_code) {
          case 'A': return t('Billing address matches, zip code does not');
          case 'D': return t('Customer name incorrect, zip code matches');
          case 'E': return t('Customer name incorrect, billing address and zip code match');
          case 'F': return t('Customer name incorrect, billing address matches');
          case 'K': return t('Customer name matches');
          case 'L': return t('Customer name and zip code match');
          case 'M': return t('Customer name, billing address, and zip code match');
          case 'N': return t('Billing address and zip code do not match');
          case 'O': return t('Customer name and billing address match');
          case 'R': return t('System unavailable; retry');
          case 'S': return t('AVS not currently supported');
          case 'U': return t('Information is unavailable');
          case 'W': return t('Customer name, billing address, and zip code are all incorrect');
          case 'Y': return t('Billing address and zip code both match');
          case 'Z': return t('Zip code matches, billing address does not');
        }
    }
  }
  // Canada.
  else {
    switch ($card_type) {
      // Visa, MasterCard.
      case 'V':
      case 'M':
        switch ($avs_response_code) {
          case 'A': return t('Street addresses match. The street address matches but the postal/ZIP codes do not, or the request does not include the postal/ZIP code.');
          case 'B': return t('Street addresses match. Postal code not verified due to incompatible formats.');
          case 'C': return t('Street address and postal code not verified due to incompatible formats.');
          case 'D': return t('Street addresses and postal codes match.');
          case 'G': return t('Address information not verified for international transaction.');
          case 'I': return t('Address information not verified.');
          case 'M': return t('Street address and postal code match.');
          case 'N': return t('No match.');
          case 'P': return t('Postal code match.');
          case 'R': return t('Retry: System unavailable or timed out.');
          case 'S': return t('Unable to verify address: no address information on record, card issuing bank is not an AVS participant, or no response from card issuing bank.');
          case 'U': return t('Unable to verify address: no address information on record, card issuing bank is not an AVS participant, or no response from card issuing bank.');
          case 'W': return t('Postal/ZIP matches; street address does not match or street address not included in request.');
          case 'X': return t('Street address and postal code match.');
          case 'Y': return t('Street address and postal code match.');
          case 'Z': return t('Postal/ZIP matches; street address does not match or street address not included in request.');
        }
      // Discover.
      case 'NO':
        switch ($avs_response_code) {
          case 'X': return t('All digits match, nine-digit zip code.');
          case 'A': return t('All digits match, five-digit zip code.');
          case 'Y': return t('Address matches, zip code does not match.');
          case 'T': return t('Nine-digit zip code matches, address does not match.');
          case 'Z': return t('Five-digit zip codes matches, address does not match.');
          case 'N': return t('Nothing matches.');
          case 'W': return t('No data from issuer/authorization system.');
          case 'U': return t('Retry, system unable to process.');
          case 'S': return t('AVS not supported at this time.');
        }
      // American Express, JCB.
      case 'AX':
      case 'C1':
        switch ($avs_response_code) {
          case 'A': return t('A Billing address matches, postal code does not');
          case 'D': return t('Customer name incorrect, postal code matches');
          case 'E': return t('Customer name incorrect, billing address and postal code match');
          case 'F': return t('Customer name incorrect, billing address matches');
          case 'K': return t('Customer name matches');
          case 'L': return t('Customer name and postal code match');
          case 'M': return t('Customer name, billing address, and postal code match');
          case 'N': return t('Billing address and postal code do not match');
          case 'O': return t('Customer name and billing address match');
          case 'R': return t('System unavailable; retry');
          case 'S': return t('AVS not currently supported');
          case 'U': return t('Information is unavailable');
          case 'W': return t('Customer name, billing address, and postal code are all correct');
          case 'Y': return t('Billing address and postal code both match');
          case 'Z': return t('Postal code matches, billing address does not');
        }
    }
  }
  return t('AVS check was not performed');
}

/**
 * Returns description for specific CAVV response code.
 *
 * @param $cavv_response_code
 *   CAVV code received in response from Moneris API.
 *
 * @return string
 *   CAVV response code description.
 */
function commerce_moneris_get_cavv_response($cavv_response_code) {
  switch ($cavv_response_code) {
    case '0': return t('CAVV authentication results invalid.');
    case '1': return t('CAVV failed validation; authentication');
    case '2': return t('CAVV passed validation; authentication');
    case '3': return t('CAVV passed validation; attempt');
    case '4': return t('CAVV failed validation; attempt');
    case '7': return t('CAVV failed validation; attempt (US issued cards only)');
    case '8': return t('CAVV passed validation; attempt (US issued cards only');
    case '9': return t('= CAVV failed validation; attempt (US issued cards only)');
    case 'A': return t('CAVV passed validation; attempt (US issued cards only)');
    case 'B': return t('CAVV passed validation; information only, no liability shift');
  }
  return t('CAVV code not recognised.');
}

/**
 * Returns merchant meaning for specific CAVV response code.
 *
 * @param $cavv_response_code
 *   CAVV code received in response from Moneris API.
 *
 * @return string
 *   CAVV response code merchant meaning.
 */
function commerce_moneris_get_cavv_meaning($cavv_response_code) {
  switch ($cavv_response_code) {
    case '0': return t('For this transaction you may not receive protection from chargebacks as a result of using VBV as the CAVV was considered invalid at the time the financial transaction was processed. Please check that you are following the VBV process correctly and passing the correct data in our transactions.');
    case '1': return t('Provided that you have implemented the VBV process correctly the liability for this transaction should remain with the Issuer for chargeback reason codes covered by Verified by Visa.');
    case '2': return t('The CAVV was confirmed as part of the financial transaction. This transaction is a fully authenticated VBV transaction (ECI 5)');
    case '3': return t('The CAVV was confirmed as part of the financial transaction. This transaction is an attempted VBV transaction (ECI 6)');
    case '4': return t('Provided that you have implemented the VBV process correctly the liability for this transaction should remain with the Issuer for chargeback reason codes covered by Verified by Visa.');
    case '7': return t('Please check that you are following the VBV process correctly and passing the correct data in our transactions. Provided that you have implemented the VBV process correctly the liability for this transaction should be the same as an attempted transaction (ECI 6)');
    case '8': return t('The CAVV was confirmed as part of the financial transaction. This transaction is an attempted VBV transaction (ECI 6)');
    case '9': return t('Please check that you are following the VBV process correctly and passing the correct data in our transactions. Provided that you have implemented the VBV process correctly the liability for this transaction should be the same as an attempted transaction (ECI 6)');
    case 'A': return t('The CAVV was confirmed as part of the financial transaction. This transaction is an attempted VBV transaction (ECI 6)');
    case 'B': return t('The CAVV was confirmed as part of the financial transaction. However, this transaction does qualify for the liability shift. Treat this transaction the same as an ECI 7.');
  }
  return t('CAVV code not recognised.');
}

/**
 * Returns all payment method instances for a given payment method id
 *
 * @param $method_id
 *   A payment method id
 * @param $include_disabled
 *   Return enabled and disabled instances
 *
 * @return
 *   An array of all loaded payment method instances keyed by instance_id
 */
function commerce_moneris_payment_method_instances($method_id, $include_disabled = FALSE) {
  $cached_ids = &drupal_static(__FUNCTION__, array());
  $include_disabled = !empty($include_disabled);

  if (!array_key_exists($method_id, $cached_ids)) {
    $cached_ids[$method_id] = array();

    // load all rules ... no easier way
    $rules_configs = rules_config_load_multiple(FALSE);

    // find all rules with an action to enable this method
    foreach ($rules_configs as $rule_name => $rule) {
      // Only rules and sub-types have actions.
      if (!($rule instanceof Rule)) {
        continue;
      }

      // fast skip if rule does not depend on commerce_payment
      if (!isset($rule->dependencies) || !in_array('commerce_payment', $rule->dependencies)) {
        continue;
      }

      foreach ($rule->actions() as $action) {
        // skip any actions that are not simple rules actions, ie loops
        if (!($action instanceof RulesAction)) {
          continue;
        }

        if ($action->getElementName() == 'commerce_payment_enable_' . $method_id) {
          $instance_id = commerce_payment_method_instance_id($method_id, $rule);
          $cached_ids[$method_id][$instance_id] = $rule->active;
          continue 2; // skip to next rule
        }
      }
    }
  }

  // load instances
  $instances = array();
  if (!empty($cached_ids[$method_id])) {
    foreach ($cached_ids[$method_id] as $instance_id => $instance_active) {
      if ($instance_active || $include_disabled) {
        $instances[$instance_id] = commerce_payment_method_instance_load($instance_id);
      }
    }
  }

  return $instances;
}
