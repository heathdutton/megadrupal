<?php

/**
 * @file
 * Main module file to create and read mini_blocks.
 */

/**
 * Implements hook_menu().
 */
function mini_blocks_menu() {
  $items = array();

  $items['admin/structure/mini-blocks'] = array(
    'title'             => 'Mini Blocks',
    'description'       => 'For shorter titles that may not work as a typical block',
    'page callback'     => 'mini_blocks_overview',
    'access arguments'  => array('administer mini blocks'),
    'file'              => 'mini_blocks_forms.inc',
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/mini-blocks/list'] = array(
    'title'             => 'List Mini Blocks',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -10,
  );

  $items['admin/structure/mini-blocks/add'] = array(
    'title'             => 'Add Mini Block',
    'description'       => 'Add Mini Block Page',
    'page callback'     => 'drupal_get_form',
    'file'              => 'mini_blocks_forms.inc',
    'page arguments'    => array('mini_blocks_admin_add_form', 3),
    'access arguments'  => array('administer mini blocks'),
    'type'              => MENU_LOCAL_TASK,
  );

  $items['admin/structure/mini-blocks/edit/%mini_blocks'] = array(
    'title'             => 'Edit Mini Block',
    'description'       => 'Edit Mini Block Page',
    'page callback'     => 'drupal_get_form',
    'file'              => 'mini_blocks_forms.inc',
    'page arguments'    => array('mini_blocks_admin_add_form', 3, 4),
    'access arguments'  => array('administer mini blocks'),
    'type'              => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mini_blocks_permission() {
  return array(
    'administer mini blocks' => array(
      'title' => t('Administer Mini Blocks'),
      'description' => t('Add and edit Mini Blocks'),
    ),
  );
}


/**
 * Get a specific mini block.
 *
 * @param string $block
 *   The key name of your block. The mb_id in mini_blocks table.
 */
function mini_blocks_load($block) {
  $mb = db_query('SELECT * FROM {mini_blocks} mb WHERE mb.mb_id = :mb_id', array(':mb_id' => $block))->fetchObject();
  return $mb;
}


/**
 * Get a specific mini block value.
 *
 * @param string $block
 *   The key name of your block. The mb_id in mini_blocks table.
 */
function mini_blocks_get_value($block) {
  $block = mini_blocks_load($block);
  return (isset($block->mb_value)) ? $block->mb_value : NULL;
}


/**
 * Convert to machine readable.
 *
 * @param string $mb_name
 *   The key name of your block. The mb_id in mini_blocks table.
 */
function mini_blocks_sanitize($mb_name) {
  return preg_replace("/[^a-zA-Z0-9_]/", "", $mb_name);
}


/**
 * Validate the key does not exist.
 */
function mini_blocks_key_exists($key) {
  return (mini_blocks_load($key));
}
