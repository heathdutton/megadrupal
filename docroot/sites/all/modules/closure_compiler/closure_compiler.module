<?php

/**
 * @file
 * Closure Compiler primary module file.
 *
 * Contains the bare minimum of module functions - only hooks.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Used to display the module settings under the standard performance settings.
 */
function closure_compiler_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  // Add our form elements.
  module_load_include('inc', 'closure_compiler', 'closure_compiler.forms');
  _closure_compiler_form_system_performance_settings_alter($form);
}

/**
 * Handles submission of the system_performance_settings form.
 *
 * This ensures the closure compiler service is disabled if JS aggregation
 * has been turned off.
 */
function closure_compiler_form_system_performance_settings_submit($form, &$form_state) {
  if (0 == $form_state['values']['preprocess_js']) {
    variable_set('closure_compiler_js_optimization', 0);
  }
}

/**
 * Implements hook_cron().
 */
function closure_compiler_cron() {
  if (variable_get('closure_compiler_js_optimization', 0)) {
    $services = variable_get('closure_compiler_service', array());
    if (!empty($services)) {
      module_load_include('inc', 'closure_compiler', 'closure_compiler.compile');
      closure_compiler_compile();
    }
  }
}

/**
 * Implements hook_menu().
 */
function closure_compiler_menu() {
  $items['admin/reports/closure_compiler'] = array(
    'title' => 'Closure Compiler',
    'description' => "Get a more in-depth report about the status of JS optimization using Google's Closure Compiler.",
    'page callback' => 'closure_compiler_status',
    'access arguments' => array('administer site configuration'),
    'file' => 'closure_compiler.status.inc',
  );

  return $items;
}
