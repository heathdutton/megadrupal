<?php
/**
 * @file
 * Element module hooks.
 */

/**
 * Implements hook_menu().
 */
function element_menu() {
  $items = array();
  $items['element/%element/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => 'element_revision_overview',
    'page arguments' => array(1),
    'access arguments' => array('view all elements'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'element.pages.inc',
  );

  $items['element/%element/%'] = array(
    'title' => 'Element revision',
    'load arguments' => array(2),
    'page callback' => 'element_view_revision',
    'page arguments' => array(1),
    'access arguments' => array('view all elements'),
    'file' => 'element.pages.inc',
  );

  // Add a Devel debugging tab.
  if (module_exists('devel')) {
    $items['element/%element/devel'] = array(
      'title' => 'Devel',
      'file' => 'element.pages.inc',
      'page callback' => 'element_devel',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('access devel information'),
      'weight' => 100,
    );
  }

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function element_entity_info() {
  $return = array(
    'element_type' => array(
      'label' => t('Element Type'),
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'element_type',
      'uri callback' => 'entity_class_uri',
      'entity keys' => array(
        'id' => 'type',
        'label' => 'name',
        'name' => 'type',
      ),
      'entity class' => 'ElementType',
      'bundle of' => 'element',
      'module' => 'element',
      'exportable' => TRUE,
      'admin ui' => array(
      	'path' => 'admin/structure/element-types',
      	'file' => 'element.admin.inc',
      ),
      'access callback' => 'element_type_access',
    ),
    'element' => array(
      'label' => t('Element'),
      'controller class' => 'EntityAPIController',
      'base table' => 'element',
      'revision table' => 'element_revision',
      'uri callback' => 'entity_class_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'revision' => 'vid',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'entity class' => 'Element',
      'module' => 'element',
      'admin ui' => array(
      	'path' => 'element',
      	'controller class' => 'ElementUIController',
      	'file' => 'element.admin.inc',
      ),
      'access callback' => 'element_access',
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => TRUE,
        ),
        'summary' => array(
          'label' => t('Summary'),
          'custom settings' => TRUE,
        ),
      ),
    )
  );

  $types = element_types();
  foreach ($types as $type => $name) {
    $return['element']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
      	'path' => 'admin/structure/element-types/manage/%element_type',
      	'bundle argument' => 4,
        'real path' => 'admin/structure/element-types/manage/' . str_replace('_', '-', $type),
      ),
    );
  }

  return $return;
}

/**
 * Load an element by ID.
 *
 * @see element_menu().
 */
function element_load($element_id, $revision_id = NULL) {
  if (is_numeric($revision_id)) {
    $element = entity_revision_load('element', $revision_id);
    return $element;
  }
  $element = entity_load('element', array($element_id));
  return isset($element[$element_id]) ? $element[$element_id] : FALSE;
}

/**
 * Menu argument loader: loads an element type by string.
 *
 * @param $name
 *   The machine-readable name of an element type to load, where '_' is replaced
 *   with '-'.
 *
 * @return
 *   An element type name.
 */
function element_type_load($name) {
  return strtr($name, array('-' => '_'));
}

/**
 * Implements hook_permission().
 */
function element_permission() {
  $perms = array(
    'administer elements' => array(
      'title' => t('Administer elements and element types'),
      'restrict access' => TRUE,
    ),
    'view all elements' => array(
      'title' => t('View all element entities'),
      'restrict access' => TRUE,
    ),
  );
  // Generate standard element permissions for all applicable element types.
  foreach (element_types() as $type => $name) {
    $perms += array(
	    "create $type element" => array(
	      'title' => t('%type_name: Create new element', array('%type_name' => $name)),
	    ),
	    "view $type element" => array(
	      'title' => t('%type_name: View elements', array('%type_name' => $name)),
	    ),
	    "edit own $type element" => array(
	      'title' => t('%type_name: Edit own element', array('%type_name' => $name)),
	    ),
	    "edit $type element" => array(
	      'title' => t('%type_name: Edit any element', array('%type_name' => $name)),
	    ),
	    "delete own $type element" => array(
	      'title' => t('%type_name: Delete own element', array('%type_name' => $name)),
	    ),
	    "delete $type element" => array(
	      'title' => t('%type_name: Delete any element', array('%type_name' => $name)),
	    ),
      "view $type element revisions" => array(
        'title' => t('%type_name: View revisions', array('%type_name' => $name)),
      ),
	  );
  }

  return $perms;
}

/**
 * Implements_hook_entity_property_info().
 */
function element_entity_property_info() {
  $info = array();
 // Add meta-data about the basic element type properties.
  $props = &$info['element_type']['properties'];
  $props['type'] = array(
    'label' => t('Machine Name'),
    'description' => t('The unique machine name of the element type.'),
    'type' => 'text',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer element types',
    'required' => TRUE,
    'schema field' => 'type',
  );
  $props['name'] = array(
    'label' => t('Name'),
    'description' => t('The human readable name of the element type.'),
    'type' => 'text',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer element types',
    'required' => TRUE,
    'schema field' => 'name',
  );
  $props['description'] = array(
    'label' => t('Description'),
    'description' => t('A human readable description of what the element type does.'),
    'type' => 'text',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer element types',
    'required' => TRUE,
    'schema field' => 'description',
  );

  // Add meta-data about the basic element properties.
  $properties = &$info['element']['properties'];
  $properties['id'] = array(
    'label' => t('Element ID'),
    'type' => 'integer',
    'description' => t('The unique ID of the element.'),
    'schema field' => 'id',
  );
  $properties['type'] = array(
    'label' => t('Element type'),
    'type' => 'token',
    'description' => t('The type of the element.'),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer elements',
    'options list' => 'element_types',
    'required' => TRUE,
    'schema field' => 'type',
  );
  $properties['title'] = array(
    'label' => t('Title'),
    'description' => t('The title of the element.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'title',
    'required' => TRUE,
  );
  $properties['language'] = array(
    'label' => t('Language'),
    'type' => 'token',
    'description' => t('The language the element is written in.'),
    'setter callback' => 'entity_property_verbatim_set',
    'options list' => 'entity_metadata_language_list',
    'schema field' => 'language',
    'setter permission' => 'administer elements',
  );
  $properties['status'] = array(
    'label' => t("Status"),
    'description' => t('A programmatic status to apply to the element.'),
    'type' => 'integer',
    'options list' => 'entity_metadata_status_options_list',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer elements',
    'schema field' => 'status',
  );
  $properties['created'] = array(
    'label' => t('Date created'),
    'type' => 'date',
    'description' => t('The date the element was created.'),
    'setter callback' => 'entity_property_verbatim_set',
    'getter callback' => 'entity_property_verbatim_date_get',
    'setter permission' => 'administer elements',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t('Date changed'),
    'type' => 'date',
    'description' => t('The date the element was most recently updated.'),
    'setter callback' => 'entity_property_verbatim_set',
    'getter callback' => 'entity_property_verbatim_date_get',
    'schema field' => 'changed',
  );
  $properties['author'] = array(
    'label' => t('Author'),
    'type' => 'user',
    'description' => t('The author of the element.'),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer elements',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['is_new'] = array(
    'label' => t("Is new"),
    'type' => 'boolean',
    'description' => t("Whether the element is new and not saved to the database yet."),
    'setter callback' => 'entity_property_verbatim_set',
    'getter callback' => 'entity_property_verbatim_get',
  );
  return $info;
}

/**
 * Implements hook_field_extra_fields().
 * Add title as an extra field.
 */
function element_field_extra_fields() {
  $extra = array();

  foreach (element_types() as $type => $type_label) {
    $extra['element'][$type] = array(
      'form' => array(
        'title' => array(
          'label' => 'Title',
          'description' => t('Element module element'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_preprocess_page().
 *
 * Add in a content list link to the structure page.
 */
function element_preprocess_page(&$vars) {
  $element_entity = entity_get_info('element_type');
  if ($element_entity['admin ui']['path'] != current_path()) {
    return;
  }

  $vars['action_links'][] = array(
    '#theme' => 'link',
    '#text' => t('Element Content List'),
    '#path' => 'admin/content/element',
    '#options' => array(
      'attributes' => array('class' => array()),
      'html' => FALSE,
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function element_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'element') . '/views',
  );
}

/**
 *	Helper function to retrieve a list of available element types.
 *
 *	@return array
 *		An array of the available element types, keyed by machine name.
 */
function element_types()	{
  $types = db_select('element_type', 'et')
    ->fields('et', array('type', 'name'))
    ->execute()
    ->fetchAllKeyed();
	return $types;
}

/**
 * Determines whether the given user can perform actions on an element type.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param mixed $entity
 * 	 The entity in question. Can be NULL.
 * @param mixed $account
 * 	 The account to check against. In the case of the entity API, this is always
 *   NULL.
 * @param string $element_type
 *   The element type of the element to check for.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function element_type_access($op, $entity = NULL, $account = NULL, $entity_type) {
  return user_access('administer elements');
}

/**
 * Determines whether the given user can perform actions on an element.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param mixed $bundle
 * 	 The entity bundle in question. Can be NULL, a string with the bundle name
 *   or a full blown entity object.
 * @param mixed $account
 * 	 The account to check against. In the case of the entity API, this is always
 *   NULL.
 * @param string $element_type
 *   The element type of the element to check for.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function element_access($op, $bundle, $account = NULL, $entity_type) {
	global $user;
  // The entity reference module checks for update instead of edit.
  if ($op == 'update') {
    $op = 'edit';
  }
  // Bundle can be a string bundlename, or a full entity. That's why we check
  // for the any properties before we use them.
  $is_uid = isset($bundle->uid) && $bundle->uid == $user->uid;
  $bundle = isset($bundle->type) ? $bundle->type : $bundle;
  return ($is_uid && user_access("$op own $bundle $entity_type", $account)) ||
  				user_access("$op $bundle $entity_type", $account);
}

/**
 * Returns a list of all the existing revision numbers.
 *
 * @param $element
 *   The element object.
 *
 * @return
 *   An associative array keyed by element revision number.
 */
function element_revision_list($element) {
  $query = db_select('element_revision', 'er');
  $query->leftjoin('node', 'n', 'n.vid = er.vid');
  $query->join('users', 'u', 'u.uid = er.uid');
  $query->condition('er.id', $element->id);
  $query->orderBy('er.vid', 'DESC');
  $query->addField('n', 'vid', 'current_vid');
  $query->addField('u', 'name');
  $query->fields('er');
  $revisions = $query->execute()->fetchAllAssoc('vid');
  return $revisions;
}
