<?php
/**
 * @file
 * Test suites for the Lagotto Server service access module.
 *
 * @package lagotto_services
 */

/**
 * Unit test suite for the lagotto_services module.
 *
 * @package lagotto_services
 */
class LagottoServicesUnitTestCase extends DrupalUnitTestCase {

  /**
   * Return information related to the test suite.
   *
   * @return array
   *   Information about test
   */
  public static function getInfo() {
    return array(
      'name' => t('Lagotto Services module unit tests'),
      'description' => t('Executes test suite for the Lagotto Server service access module'),
      'group' => t('Lagotto'),
    );
  }

  /**
   * Enable module.
   */
  public function setUp() {
    parent::setUp('lagotto_services');
  }

  /**
   * Check for the DOI sanitisation functions.
   */
  public function testDoiValidation() {
    $doi = 'i.org/10.755';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertFalse($clean_doi, t('The input string is not a DOI so should get empty return.'));

    $doi = '10.vooiw2/408fncsodfu8';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertFalse($clean_doi, t('The input string is not a DOI so should get empty return.'));

    $doi = 'http://dx.doi.org/10.7554/eLife.01086';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertEqual($clean_doi, '10.7554/eLife.01086', t('"http://dx.doi.org/" should be removed from the beginning of the DOI string.'));

    $doi = 'http://dx.doi.org/10.7554/eLife.01086.003';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertEqual($clean_doi, '10.7554/eLife.01086.003', t('"http://dx.doi.org/" should be removed from the beginning of the DOI string.'));

    $doi = 'https://dx.doi.org/10.7554/eLife.01086.003';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertEqual($clean_doi, '10.7554/eLife.01086.003', t('"https://dx.doi.org/" should be removed from the beginning of the DOI string.'));

    $doi = '10.7554/eLife.01086';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertEqual($doi, $clean_doi, t('DOI not prefixed by http://dx.doi.org or doi: should be the same after sanitisation.'));

    $doi = '10.734897/298375028302129375620';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertEqual($doi, $clean_doi, t('DOI not prefixed by http://dx.doi.org or doi: should be the same after sanitisation.'));

    $doi = '10.78/s.kdubhvakdbfrvaieoituvhebjubfh';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertEqual($doi, $clean_doi, t('DOI not prefixed by http://dx.doi.org or doi: should be the same after sanitisation.'));

    $doi = 'doi:10.7554/eLife.01086-4';
    $clean_doi = lagotto_services_validate_doi($doi);
    $this->assertEqual($clean_doi, '10.7554/eLife.01086-4', t('"doi:" should be removed from the beginning of the DOI string.'));

    $doi = '10.7554/eLife.01087';
    $clean_dois = lagotto_services_validate_doi_cache($doi);
    $this->assertEqual(count($clean_dois), 10, 'DOI cached count should be 10.');
    $this->assertNotNull($clean_dois['http://dx.doi.org/10.7554/eLife.01086'], t('Result for http://dx.doi.org/10.7554/eLife.01086 is still in cache.'));
  }

  /**
   * Check for the PMCID sanitisation functions.
   */
  public function testPMCIDValidation() {
    $pmcid = '';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertFalse($clean_pmcid, t('The input string is empty so should get False return.'));

    $pmcid = '8';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertFalse($clean_pmcid, t('The input string is too short to be a PMCID so should get False return.'));

    $pmcid = 'PMC81';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertFalse($clean_pmcid, t('The input string is too short to be a PMCID so should get False return.'));

    $pmcid = '000';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertFalse($clean_pmcid, t('The input string is not PMCID so should get False return.'));

    $pmcid = 'sidgv';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertFalse($clean_pmcid, t('The input string is not PMCID so should get False return.'));

    $pmcid = '297fbc';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertFalse($clean_pmcid, t('The input string is not PMCID so should get False return.'));

    $pmcid = '1234567890123';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertFalse($clean_pmcid, t('The input string is too long to be a PMCID so should get False return.'));

    $pmcid = 'PMC1086';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertEqual($clean_pmcid, 'PMC1086', t('"PMC1086" is a valid format PubMed ID.'));

    $pmcid = '1086';
    $clean_pmcid = lagotto_services_validate_pmcid($pmcid);
    $this->assertEqual($clean_pmcid, '1086', t('"1086" is a valid format PubMed ID.'));
  }

  /**
   * Check for the PMID sanitisation functions.
   */
  public function testPMIDValidation() {
    $pmid = '';
    $clean_pmid = lagotto_services_validate_pmid($pmid);
    $this->assertFalse($clean_pmid, t('The input string is empty so should get False return.'));

    $pmid = '8';
    $clean_pmid = lagotto_services_validate_pmid($pmid);
    $this->assertFalse($clean_pmid, t('The input string is too short to be a pmid so should get False return.'));

    $pmid = '0101';
    $clean_pmid = lagotto_services_validate_pmid($pmid);
    $this->assertFalse($clean_pmid, t('The input string is not pmid so should get False return.'));

    $pmid = 'sidgv';
    $clean_pmid = lagotto_services_validate_pmid($pmid);
    $this->assertFalse($clean_pmid, t('The input string is not pmid so should get False return.'));

    $pmid = '297fbc';
    $clean_pmid = lagotto_services_validate_pmid($pmid);
    $this->assertFalse($clean_pmid, t('The input string is not pmid so should get False return.'));

    $pmid = '123456789012345';
    $clean_pmid = lagotto_services_validate_pmid($pmid);
    $this->assertFalse($clean_pmid, t('The input string is too long to be a pmid so should get False return.'));

    $pmid = '10286';
    $clean_pmid = lagotto_services_validate_pmid($pmid);
    $this->assertEqual($clean_pmid, '10286', t('"10286" is a valid format PubMed ID.'));
  }

  /**
   * Check for the service url function.
   */
  public function testServiceUrl() {
    $service_server = variable_get('lagotto_services_url', LAGOTTO_SERVICES_DEFAULT_DOMAIN);

    $service_url = lagotto_services_service_url();
    $this->assertTrue(strpos($service_url, $service_server) === 0, 'Service url should be prefixed by ' . $service_server . '.');
    $this->assertEqual($service_url, $service_server . '/api/v5/articles', t('Default service url should be /api/v5/articles.'));

    $service_url = lagotto_services_service_url(4);
    $this->assertEqual($service_url, $service_server . '/api/v4/articles', t('Service url should be amended to reflect the API version requested.'));

    $service_url = lagotto_services_service_url(99);
    $this->assertEqual($service_url, $service_server . '/api/v5/articles', t('When a valid API version is not provided /api/v5/articles should be returned.'));
  }

  /**
   * Check for the issue date function.
   */
  public function testIssueDate() {
    $base_record = array(
      'doi' => '10.7554/eLife.01086',
      'title' => 'Essential yet limited',
      'pmcid' => 3821,
    );

    // Lagotto-style
    $record = $base_record;
    $record['issued'] = array(
      'date-parts' => array(0 => array(2013, 11, 12)),
    );
    $date = lagotto_services_issue_date($record);
    $this->assertEqual($date, 1384214400, t('Lagotto-style date did not match.'));

    // Lagotto-style, multiple.
    $record = $base_record;
    $record['issued'] = array(
      'date-parts' => array(0 => array(2013, 11, 12), 1 => array(2014, 1, 18)),
    );
    $date = lagotto_services_issue_date($record);
    $this->assertEqual($date, 1384214400, t('Lagotto-style multiple date did not match.'));

    // ALM style.
    $record = $base_record;
    $record['issued'] = array(
      'date_parts' => array(2013, 11, 12),
    );
    $date = lagotto_services_issue_date($record);
    $this->assertEqual($date, 1384214400, t('ALM-style date did not match.'));

    // Invalid.
    $record = $base_record;
    $date = lagotto_services_issue_date($record);
    $this->assertNull($date, 0, t('Missing date not rejected (1).'));

    // Invalid.
    $record = $base_record;
    $record['issued'] = array();
    $date = lagotto_services_issue_date($record);
    print $date . "\n";
    $this->assertNull($date, 0, t('Invalid date not rejected (2).'));

    // Invalid.
    $record = $base_record;
    $record['issued'] = array(
      'date-parts' => array(2013),
    );
    $date = lagotto_services_issue_date($record);
    $this->assertNull($date, 0, t('Invalid date not rejected (2).'));
  }

  /**
   * Check for the make url function when provided with a doi string.
   */
  public function testMakeFetchUrlDOI() {
    $service_server = variable_get('lagotto_services_url', LAGOTTO_SERVICES_DEFAULT_DOMAIN);
    $key = lagotto_services_service_key();
    $doi = '10.7554/eLife.01087';
    $expected_doi = '10.7554/eLife.01087';

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $expected_doi . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($doi);
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $expected_doi . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($doi, array('include_detail' => FALSE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $expected_doi . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($doi, array('include_detail' => TRUE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Detail query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $doi = '1054';
    $fetch_url = lagotto_services_make_fetch_url($doi, array('include_detail' => TRUE));
    $this->assertNull($fetch_url,
      t('Not-a-DOI test: Got @url, rather than fail', array('url' => $fetch_url)));

    $doi = '10.7554/eLife.01087';
    $expected_doi = '10.7554/eLife.01087';
    $service_server = 'http://alm.plos.org';
    $options = array(
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $expected_doi . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($doi, $options);
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'http://alm.plos.org';
    $options = array(
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $expected_doi . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($doi, $options);
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'plos.org';
    $options = array(
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $fetch_url = lagotto_services_make_fetch_url($doi, $options);
    $this->assertNull($fetch_url,
      t('Set bad URL: Got @url, rather than expected url', array('url' => $fetch_url)));
  }

  /**
   * Check for the make url function when provided with a pmid string.
   */
  public function testMakeFetchUrlPMID() {

    $service_server = variable_get('lagotto_services_url', LAGOTTO_SERVICES_DEFAULT_DOMAIN);
    $key = lagotto_services_service_key();
    $pmid = '21087';
    $expected_pmid = '21087';

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmid&ids=' . $expected_pmid . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($pmid, array('id_type' => 'pmid'));
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmid&ids=' . $expected_pmid . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($pmid, array('id_type' => 'pmid', 'include_detail' => FALSE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmid&ids=' . $expected_pmid . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($pmid, array('id_type' => 'pmid', 'include_detail' => TRUE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Detail query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $pmid = '1aaa4';
    $fetch_url = lagotto_services_make_fetch_url($pmid, array('id_type' => 'pmid', 'include_detail' => TRUE));
    $this->assertNull($fetch_url,
      t('Not-a-PMID test: Got @url, rather than fail', array('url' => $fetch_url)));

    $pmid = '21087';
    $expected_pmid = '21087';
    $service_server = 'http://alm.plos.org';
    $options = array(
      'id_type' => 'pmid',
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmid&ids=' . $expected_pmid . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($pmid, $options);
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'http://alm.plos.org';
    $options = array(
      'id_type' => 'pmid',
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmid&ids=' . $expected_pmid . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($pmid, $options);
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'plos.org';
    $options = array(
      'id_type' => 'pmid',
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $fetch_url = lagotto_services_make_fetch_url($pmid, $options);
    $this->assertNull($fetch_url,
      t('Set bad URL: Got @url, rather than expected url', array('url' => $fetch_url)));
  }

  /**
   * Check for the make url function when provided with a pmcid string.
   */
  public function testMakeFetchUrlPMCID() {

    $service_server = variable_get('lagotto_services_url', LAGOTTO_SERVICES_DEFAULT_DOMAIN);
    $key = lagotto_services_service_key();

    $pmcid = '21087';
    $expected_pmcid = '21087';
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmcid&ids=' . $expected_pmcid . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($pmcid, array('id_type' => 'pmcid'));
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $pmcid = 'pmc21087';
    $expected_pmcid = 'pmc21087';
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmcid&ids=' . $expected_pmcid . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($pmcid, array('id_type' => 'pmcid'));
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmcid&ids=' . $expected_pmcid . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($pmcid, array('id_type' => 'pmcid', 'include_detail' => FALSE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmcid&ids=' . $expected_pmcid . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($pmcid, array('id_type' => 'pmcid', 'include_detail' => TRUE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Detail query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $pmcid = '1aaa4';
    $fetch_url = lagotto_services_make_fetch_url($pmcid, array('id_type' => 'pmcid', 'include_detail' => TRUE));
    $this->assertNull($fetch_url,
      t('Not-a-PMCID test: Got @url, rather than fail', array('url' => $fetch_url)));

    $pmcid = '21087';
    $expected_pmcid = '21087';
    $service_server = 'http://alm.plos.org';
    $options = array(
      'id_type' => 'pmcid',
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmcid&ids=' . $expected_pmcid . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($pmcid, $options);
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'http://alm.plos.org';
    $options = array(
      'id_type' => 'pmcid',
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=pmcid&ids=' . $expected_pmcid . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($pmcid, $options);
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'plos.org';
    $options = array(
      'id_type' => 'pmcid',
      'include_detail' => TRUE,
      'service_url' => $service_server . '/api/v5/articles',
    );
    $fetch_url = lagotto_services_make_fetch_url($pmcid, $options);
    $this->assertNull($fetch_url,
      t('Set bad URL: Got @url, rather than expected url', array('url' => $fetch_url)));
  }

  /**
   * Check the make fetch url function when provided with a doi array.
   */
  public function testMakeFetchUrlArray() {
    $service_server = variable_get('lagotto_services_url', LAGOTTO_SERVICES_DEFAULT_DOMAIN);
    $key = lagotto_services_service_key();
    $doi = array(
      '10.7554/eLife.01087',
      '1054',
      'doi:10.361/sbifyus',
      NULL,
      'https://dx.doi.org/10.7554/eLife.01086.003',
    );

    $expected_dois = '10.7554/eLife.01087%2C10.361/sbifyus%2C10.7554/eLife.01086.003';
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $expected_dois . '&info=summary';
    $fetch_url = lagotto_services_make_fetch_url($doi);
    $this->assertEqual($fetch_url, $expected_url,
      t('Summary query test: Got @url, rather than expected url', array('url' => $fetch_url)));

    $fetch_url = lagotto_services_make_fetch_url(array());
    $this->assertNull($fetch_url,
      t('Set bad URL array: Got @url, rather than expected null', array('url' => $fetch_url)));
  }

  /**
   * Test the lagotto_services_records() function.
   */
  public function testRecords() {
    // Test with NULL.
    $record = NULL;
    $expected = array(
      'error' => 2000,
      'message' => 'API Request returned NULL',
    );
    $result = lagotto_services_records($record, 0);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return error status for error input (1).'));

    // Test with empty object.
    $record = new stdClass();
    $expected = array(
      'error' => 2000,
      'message' => 'API Request returned no data: unknown error',
    );
    $result = lagotto_services_records($record, 0);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return error status for error input (2).'));

    // Test with no data.
    $record = new stdClass();
    $record->code = 0;
    $record->data = NULL;
    $record->error = 'test';
    $expected = array(
      'error' => 2000,
      'message' => 'API Request returned no data: test',
    );
    $result = lagotto_services_records($record);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return error status for error input (3).'));

    // Test with no JSON.
    $record->code = 200;
    $record->data = '';
    $result = lagotto_services_records($record, 200);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return error status for error input (4).'));

    // Test with empty JSON array.
    $record->code = 200;
    $record->data = '[]';
    $result = lagotto_services_records($record, 200);
    $expected = array(
      'error' => 3000,
      'message' => 'API Request returned empty result',
    );
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return empty array for error input (5).'));

    // Test with a sensible approximation of a good result.
    $record = new stdClass();
    $record->request = 'GET /api/v5/articles?ids=10.7554/eLife.01086&info=summary HTTP/1.0';
    $record->code = 200;
    $record->headers = array(
      'content-type' => 'application/json; charset=utf-8',
      'status' => '200 OK',
    );
    $record->protocol = 'HTTP/1.1';
    $record->status_message = 'OK';
    $record->data = <<<__EOD__
{
  "total": 1,
  "page": 1,
  "error": null,
  "data": [
    {
      "doi": "10.7554\/eLife.01086",
      "title": "Essential yet limited",
      "issued": {
        "date-parts": [
          [
            2013,
            11,
            12
          ]
        ]
      },
      "pmid": "24220507",
      "pmcid": "3820971"
    }
  ]
}
__EOD__;
    $expected = array(
      'error' => 0,
      'message' => 'OK',
      'result' => array(
        0 => array(
          'doi' => '10.7554/eLife.01086',
          'title' => 'Essential yet limited',
          'issued' => array(
            'date-parts' => array(0 => array(2013, 11, 12)),
          ),
          'pmid' => 24220507,
          'pmcid' => 3820971,
        ),
      ),
    );
    $result = lagotto_services_records($record, 200);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return expected array for good input (1).'));

    // Test that the default success code is 200 (pass if previous passes).
    $result = lagotto_services_records($record);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() default code should be 200 (2).'));

    // Test that setting a non-default success code works.
    $record->code = 201;
    $result = lagotto_services_records($record, 201);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return expected array for good input (2).'));

    // Another way to test a bad return.
    $record->code = 404;
    $record->error = 'Not found';
    $record->data = <<<__EOD__
{
  "total": 1,
  "page": 1,
  "error": "Not found",
  "data": null
}
__EOD__;
    $expected = array(
      'error' => 1404,
      'message' => 'HTTP request was not successful: Not found',
    );
    $result = lagotto_services_records($record, 201);
    $this->assertEqual($result, $expected,
      t('lagotto_services_records() should return empty array for failed input.'));
  }

}

/**
 * Functional test suite for the lagotto_services module.
 *
 * @package lagotto_services
 */
class LagottoServicesWebTestCase extends DrupalWebTestCase {

  /**
   * Representation of administrative user.
   *
   * @access protected
   *
   * @var object
   */
  protected $adminUser;

  /**
   * Representation of web user.
   *
   * @access protected
   *
   * @var object
   */
  protected $webUser;

  /**
   * Return information related to the test suite.
   *
   * @return array
   *   Information about test
   */
  public static function getInfo() {
    return array(
      'name' => t('Lagotto Services module web tests'),
      'description' => t('Executes test suite for Lagotto Server service access module'),
      'group' => t('Lagotto'),
    );
  }

  /**
   * Enable module and create user with specific permissions.
   */
  public function setUp() {
    parent::setUp('lagotto_services');

    $admin_permissions = array(
      'access content',
      'administer nodes',
      LAGOTTO_SERVICES_PERM_CONFIG,
      LAGOTTO_SERVICES_PERM_REQUEST,
    );

    $web_permissions = array(
      'access content',
      LAGOTTO_SERVICES_PERM_REQUEST,
    );

    $this->adminUser = $this->drupalCreateUser($admin_permissions);
    $this->webUser = $this->drupalCreateUser($web_permissions);

    //
    // CHANGE ME!
    variable_set('lagotto_services_url', 'http://alm.svr.elifesciences.org');
    variable_set('lagotto_services_apikey', 'EUD4r7RXzagtjiD1AR6L');
    // END OF CHANGE ME.
    //
    // Leave this:
    if (variable_get('lagotto_services_url') == 'put_your_server_url_here') {
      $this->fail("You must set up the server URL and API key to run Lagotto Web Tests");
      $this->tearDown();
      $this->setup = FALSE;
    }
    else {
      $this->setup = TRUE;
    }
  }

  /**
   * Check for the make url function.
   */
  public function testMakeFetchUrl() {
    $key = lagotto_services_service_key();

    $doi = '1054';
    $fetch_url = lagotto_services_make_fetch_url($doi, array('include_detail' => TRUE));
    $this->assertNull($fetch_url,
      t('Not-a-DOI test: Got @url, rather than expected fail', array('url' => $fetch_url)));

    $doi = '10.7554/eLife.01087';
    $service_server = 'http://alm.plos.org';
    variable_set('lagotto_services_url', $service_server);
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $doi . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($doi, array('include_detail' => TRUE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'http://alm.plos.org';
    variable_set('lagotto_services_url', $service_server);
    $expected_url = $service_server . '/api/v5/articles?api_key=' . $key . '&type=doi&ids=' . $doi . '&info=detail';
    $fetch_url = lagotto_services_make_fetch_url($doi, array('include_detail' => TRUE));
    $this->assertEqual($fetch_url, $expected_url,
      t('Set good URL: Got @url, rather than expected url', array('url' => $fetch_url)));

    $service_server = 'plos.org';
    variable_set('lagotto_services_url', $service_server);
    $fetch_url = lagotto_services_make_fetch_url($doi, array('include_detail' => TRUE));
    $this->assertNull($fetch_url,
      t('Set bad URL: Got @url, rather than expected url', array('url' => $fetch_url)));
  }

  /**
   * Check for DOI GET api method.
   */
  public function testFetchDoi() {
    $service_url = lagotto_services_service_url();
    $service_url_structure = $service_url . '?api_key=[API_KEY]&type=doi&ids=[DOI]&info=[INCLUDE_DETAIL]';

    $article_doi = '10.7554/eLife.01086';
    $article_title = 'Essential yet limited role for CCR2+ inflammatory monocytes during Mycobacterium tuberculosis-specific T cell priming';
    $article_date = strtotime('2013-11-12');
    $api_key = lagotto_services_service_key();
    $fetch_url = lagotto_services_make_fetch_url($article_doi);
    $fetch_url_check = $service_url . '?api_key=' . $api_key . '&type=doi&ids=' . str_replace('%2F', '/', rawurlencode($article_doi)) . '&info=summary';

    $this->assertTrue(strpos($fetch_url, $service_url) === 0,
      t('Fetch URL: should be prefixed by service URL: @service_url',
        array('@service_url' => $service_url)));
    $this->assertEqual($fetch_url, $fetch_url_check,
      t('Fetch URL: @fetch_url should have the structure: @service_url',
        array(
          '@service_url' => $service_url_structure,
          '@fetch_url' => $fetch_url,
        )
      )
    );

    $result = lagotto_services_fetch_work($article_doi,
      array(
        'include_detail' => TRUE,
        'quiet' => TRUE,
      ));
    $this->assertNotNull($result,
      t('Fetch DOI: Expect a response from the Lagotto server.'));
    $this->assertEqual($result->code, 200,
      t('Fetch DOI: Status code should be 200 from the Lagotto server. Got [@resp]',
        array('@resp' => $result->code)));
    $record_doi = lagotto_services_record($result, 0);
    $this->assertNotNull($record_doi,
      t('lagotto_services_record() returned null for fetch.'));
    $this->assertFalse(!empty($record_doi['error']) && ($record_doi['error'] > 0),
      t('lagotto_services_record() error set in result.'));

    $this->assertEqual(
      $record_doi['doi'],
      $article_doi,
      t('JSON Decode Fetch: DOI [@doi] returned from query should be same as requested.',
        array('@doi' => $record_doi['doi'])));
    $this->assertEqual(
      $record_doi['title'],
      $article_title,
      t('JSON Decode Fetch: Title [@title] returned should be same as on Drupal site.',
        array('@title' => $record_doi['title'])));
    $d1 = date('Y-m-d', lagotto_services_issue_date($record_doi));
    $d2 = date('Y-m-d', $article_date);
    $this->assertEqual($d1, $d2,
      t('JSON Decode Fetch: Publication date on the Lagotto server @d1 should match that submitted on DOI update @d2.',
        array('@d1' => $d1, '@d2' => $d2))
    );
    $this->assertTrue(($record_doi['viewed'] >= 10),
      t('JSON Decode Fetch: Expect to see at least 10 views for this DOI.'));
    $this->assertTrue(($record_doi['canonical_url'] >= ""),
      t('JSON Decode Fetch: Expect to see a canonical url for this DOI.'));
    $this->assertTrue((count($record_doi['sources']) >= 4),
      t('JSON Decode Fetch: Expect to see at least 4 sources listed.'));
  }

}
