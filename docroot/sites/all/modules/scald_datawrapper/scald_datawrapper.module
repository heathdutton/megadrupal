<?php
/**
 * @file
 * Defines a chart provider for Scald.
 */

define('SCALD_DATAWRAPPER_ID_REGEXP', '/^[a-zA-Z0-9\-_]+$/');
define('SCALD_DATAWRAPPER_WEB_REGEXP', '#http://charts\.datawrapper\.de/([a-zA-Z0-9\-_]+)/index\.html#');
define('SCALD_DATAWRAPPER_WEB_TEST_REGEXP', 'http://charts.datawrapper.de/');
define('SCALD_DATAWRAPPER_WEB_THUMB_REGEXP', 'http://charts.datawrapper.de/');

/**
 * Implements hook_scald_atom_providers().
 */
function scald_datawrapper_scald_atom_providers() {
  return array(
    'chart' => 'Embed Datawrapper chart',
  );
}

/**
 * Implements hook_scald_add_form().
 */
function scald_datawrapper_scald_add_form(&$form, &$form_state) {
  $form['id'] = array(
    '#type' => 'textfield',
    '#title' => t('Datawrapper chart visualisation id or url'),
    '#element_validate' => array('scald_datawrapper_validate_id'),
  );
}

/**
 * Form element validation handler for Datawrapper chart visualisation url.
 */
function scald_datawrapper_validate_id($element, &$form_state) {
  $id = scald_datawrapper_parse_id($form_state['values']['id'], TRUE);
  if (!$id) {
    form_error($element, t('Invalid Datawrapper chart visualisation url.'));
  }
  elseif (scald_datawrapper_already_imported($id)) {
    form_error($element, t('Datawrapper chart already imported.'));
  }
}

/**
 * Parse a Datawrapper id and check validity.
 */
function scald_datawrapper_parse_id($string, $check) {
  $id = NULL;
  $string = trim($string);
  if (!preg_match(SCALD_DATAWRAPPER_ID_REGEXP, $string)) {
    // The string ID is not easy to parse, let's try to analyze it.
    if (preg_match(SCALD_DATAWRAPPER_WEB_REGEXP, $string, $m)) {
      // This string is a full Datawrapper URL.
      $id = $m[1];
    }
  }
  else {
    $id = $string;
  }

  if ($id && $check) {
    // Last check to confirm this chart really exists on Datawrapper.
    if (!scald_datawrapper_test_id($id)) {
      $id = FALSE;
    }
  }
  return $id;
}

/**
 * Check if the url with id is correct.
 */
function scald_datawrapper_test_id($id) {
  $url = SCALD_DATAWRAPPER_WEB_TEST_REGEXP . $id . '/index.html';
  $response = drupal_http_request($url);
  if ($response->code >= 200 && $response->code < 400 && !empty($response->data)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks if a chart has already been imported, based on its chart id.
 *
 * @param string $id
 *   The chart identifier
 *
 * @return mixed
 *   FALSE if the chart was never imported, the scald identifier of
 *   the chart otherwise.
 */
function scald_datawrapper_already_imported($id) {
  $query = array('provider' => 'scald_datawrapper', 'base_id' => $id);
  return scald_search($query, FALSE, TRUE);
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_datawrapper_scald_add_form_fill(&$atoms, $form, $form_state) {
  $atom = is_array($atoms) ? reset($atoms) : $atoms;

  // Get the identifier.
  $identifier = scald_datawrapper_parse_id($form_state['values']['id'], TRUE);
  $atom->base_id = $identifier;

  $atom->scald_width[LANGUAGE_NONE][0]['value'] = 500;
  $atom->scald_height[LANGUAGE_NONE][0]['value'] = 400;

  // Download a copy of the video thumbnail. This makes it possible,
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request(SCALD_DATAWRAPPER_WEB_THUMB_REGEXP . $identifier . '/m.png');
  $dir = 'public://datawrapper';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $identifier . '.png';
    $file = file_save_data($thumb->data, $dest);

    if ($file) {
      // Set the file status to temporary.
      $query = db_update('file_managed')
        ->condition('fid', $file->fid)
        ->fields(array('status' => 0))
        ->execute();

      $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array) $file;
    }
  }
}

/**
 * Implements hook_scald_fetch().
 */
function scald_datawrapper_scald_fetch($atom, $type) {
  $file = $atom->scald_thumbnail[LANGUAGE_NONE][0]['uri'];
  if (file_exists($file)) {
    $atom->file_source = $atom->thumbnail_source = $file;
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_datawrapper_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    $url = SCALD_DATAWRAPPER_WEB_TEST_REGEXP . $atom->base_id . '/index.html';
    $atom->rendered->player = theme('scald_datawrapper_object',
      array(
        'vars' =>
        array(
          'chart_url'      => $url,
          'chart_width'   => ($atom->scald_width[LANGUAGE_NONE][0]['value'] ? intval($atom->scald_width[LANGUAGE_NONE][0]['value']) : 500),
          'chart_height'  => ($atom->scald_height[LANGUAGE_NONE][0]['value'] ? intval($atom->scald_height[LANGUAGE_NONE][0]['value']) : 400),
          'thumbnail'     => $atom->thumbnail_source,
        ),
      )
    );
  }
}

/**
 * Implements hook_theme().
 */
function scald_datawrapper_theme() {
  return array(
    'scald_datawrapper_object' => array(
      'variables' => array('vars' => NULL),
      'template' => 'scald_datawrapper_object',
    ),
  );
}

/**
 * Implements hook_library().
 */
function scald_datawrapper_library() {
  $path = drupal_get_path('module', 'scald_datawrapper');
  $libraries = array(
    'datawrapper' => array(
      'title' => 'Scald Datawrapper',
      'version' => '1.x',
      'css' => array(
        $path . '/scald_datawrapper.css' => array(),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_library_alter().
 */
function scald_datawrapper_library_alter(&$libraries, $module) {
  // Used to include css file only if dnd library is loaded.
  if ($module == 'dnd') {
    $libraries['library']['dependencies'][] = array('scald_datawrapper', 'datawrapper');
  }
}
