<?php

/**
 * @file
 * Settings for term name at Field level are defined in
 * term_name_validation_form_alter().
 * All the validations for creating term names (including the Auto-complete
 * widget type in term_name_validation_field_attach_validate())
 * are validated in this file.
 */

/**
 * Implements hook_help().
 */
function term_name_validation_help($section) {
  $output = '';
  switch ($section) {
    case 'admin/help#term_name_validation':
      $output = '<p>' . t('This module helps to validate term name with min/max characters, min/max word count, blacklist special characters, significant words and unique node titles .') . '</p>';
      $output .= '<p>' . t('Validate the Term Name By:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Special Character & blacklisted words.') . '</li>';
      $output .= '<li>' . t('Length (optionally specify min and/or max characters.)') . '</li>';
      $output .= '<li>' . t('Word Count (optionally specify min and/or max words.)') . '</li>';
      $output .= '<li>' . t('Unique term name (for specific taxonomy term.)') . '</li>';
      $output .= '</ul>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function term_name_validation_menu() {
  $items = array();
  $items['admin/config/taxonomy/term-name-validation'] = array(
    'title' => 'Term name validation',
    'description' => 'Validating term names',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_name_validation_admin_form'),
    'access arguments' => array('term name validation admin control'),
    'file' => 'term_name_validation.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function term_name_validation_permission() {
  return array(
    'term name validation admin control' => array(
      'title' => t('Term Name validation admin control'),
      'description' => t('Perform administration tasks for Term Name validation module.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function term_name_validation_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form' && $form["#field"]["type"] == "taxonomy_term_reference" && ($form["#instance"]['widget']['type'] == 'taxonomy_autocomplete' || $form["#instance"]['widget']['type'] = 'autocomplete_deluxe_taxonomy')) {

    // Get configuration value.
    $term_name_validation_config = variable_get('term_name_validation_for_field_instances', array());
    $term_name_validation_config_for_field = $term_name_validation_config[$form['#instance']['bundle'] . '_' . $form['#field']['field_name']];
    $type = taxonomy_vocabulary_machine_name_load($form['#field']['settings']['allowed_values'][0]['vocabulary']);

    // Generate fieldset for each vocabulary along with exclude, min,
    // max and unique form elements.
    // Display First fieldset collapsed open.
    $form[$type->machine_name] = array(
      '#type' => 'fieldset',
      '#title' => check_plain($type->name . ' Term name settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form[$type->machine_name]['exclude-' . $type->machine_name] = array(
      '#type' => 'textarea',
      '#default_value' => isset($term_name_validation_config_for_field['exclude-' . $type->machine_name]) ? $term_name_validation_config_for_field['exclude-' . $type->machine_name] : '',
      '#title' => t('Blacklist Characters/Words'),
      '#description' => '<p>' . t("Comma separated characters or words to avoided while saving term names. Ex: !,@,#,$,%,^,&,*,(,),1,2,3,4,5,6,7,8,9,0,have,has,were,aren't.") . '</p>' . '<p>' . t('If any of the blacklisted characters/words found in term name,would return validation error on term save.') . '</p>',
    );

    $form[$type->machine_name]['min-' . $type->machine_name] = array(
      '#type' => 'textfield',
      '#title' => t("Minimum length"),
      '#required' => TRUE,
      '#description' => t("Minimum number of characters term name should contain"),
      '#size' => 12,
      '#maxlength' => 3,
      '#default_value' => isset($term_name_validation_config_for_field['min-' . $type->machine_name]) ? $term_name_validation_config_for_field['min-' . $type->machine_name] : 1,
    );

    $form[$type->machine_name]['max-' . $type->machine_name] = array(
      '#type' => 'textfield',
      '#title' => t("Maximum length"),
      '#required' => TRUE,
      '#description' => t("Maximum number of characters term name should contain"),
      '#size' => 12,
      '#maxlength' => 3,
      '#default_value' => isset($term_name_validation_config_for_field['max-' . $type->machine_name]) ? $term_name_validation_config_for_field['max-' . $type->machine_name] : 255,
    );

    $form[$type->machine_name]['min-wc-' . $type->machine_name] = array(
      '#type' => 'textfield',
      '#title' => t("Minimum Word Count"),
      '#required' => TRUE,
      '#description' => t("Minimum number of words Term name should contain"),
      '#size' => 12,
      '#maxlength' => 3,
      '#default_value' => isset($term_name_validation_config_for_field['min-wc-' . $type->machine_name]) ? $term_name_validation_config_for_field['min-wc-' . $type->machine_name] : 1,
    );

    $form[$type->machine_name]['max-wc-' . $type->machine_name] = array(
      '#type' => 'textfield',
      '#title' => t("Maximum Word Count"),
      '#description' => t("Maximum number of words Term name should contain"),
      '#size' => 12,
      '#maxlength' => 3,
      '#default_value' => isset($term_name_validation_config_for_field['max-wc-' . $type->machine_name]) ? $term_name_validation_config_for_field['max-wc-' . $type->machine_name] : 25,
    );

    $form[$type->machine_name]['dont-allow-create-new-' . $type->machine_name] = array(
      '#type' => 'checkbox',
      '#title' => t("Restrict creating new terms."),
      '#description' => t("Check this for not allowing creation of new terms."),
      '#size' => 12,
      '#maxlength' => 3,
      '#default_value' => isset($term_name_validation_config_for_field['dont-allow-create-new-' . $type->machine_name]) ? $term_name_validation_config_for_field['dont-allow-create-new-' . $type->machine_name] : 0,
    );

    $form['#validate'][] = 'term_name_validation_validate_field_settings';
    $form['#submit'][] = 'term_name_validation_submit_field_settings';
    return $form;
  }
}

/**
 * Validate Function for Field Settings Edit Form(field_ui_field_edit_form).
 */
function term_name_validation_validate_field_settings($form, &$form_state) {

  $type = taxonomy_vocabulary_machine_name_load($form['#field']['settings']['allowed_values'][0]['vocabulary']);
  $max = $form_state['values']['max-' . $type->machine_name];

  // Validate field is numerical.
  if (!is_numeric($max)) {
    form_set_error('max-' . $type->machine_name, t("These value should be Numerical"));
  }

  // Term name length should be in between 0 and 256.
  if ($max <= 0 || $max > 255) {
    form_set_error('max-' . $type->machine_name, t("Value should be in between 0 and 256"));
  }

  $min = $form_state['values']['min-' . $type->machine_name];

  // Validate field is numerical.
  if (!is_numeric($min)) {
    form_set_error('min-' . $type->machine_name, t("These value should be Numerical"));
  }

  // Validate field is greater than 1.
  if ($min < 1) {
    form_set_error('min-' . $type->machine_name, t("These value should be more than 1"));
  }

  // Validate min is less than max value.
  if ($min > $max) {
    form_set_error('min-' . $type->machine_name, t("Minimum length should not be more than Max length"));
  }
  // Validate field is numerical.
  $min_wc = $form_state['values']['min-wc-' . $type->machine_name];
  if (!empty($min_wc) && !is_numeric($min_wc)) {
    form_set_error('min-wc-' . $type->machine_name, t("Value should be Numerical"));
  }
  $max_wc = $form_state['values']['max-wc-' . $type->machine_name];
  if (!empty($max_wc) && !is_numeric($max_wc)) {
    form_set_error('max-wc-' . $type->machine_name, t("Value should be Numerical"));
  }

  // Validate min is less than max value.
  if (!empty($min_wc) && !empty($max_wc) && $min_wc > $max_wc) {
    form_set_error('min-wc-' . $type->machine_name, t("Minimum word count of Term Name should not be more than Maximum word count"));
  }
}

/**
 * Submit Function for Field Settings Edit Form(field_ui_field_edit_form).
 */
function term_name_validation_submit_field_settings($form, &$form_state) {
  $values = variable_get('term_name_validation_for_field_instances', array());
  $type = taxonomy_vocabulary_machine_name_load($form['#field']['settings']['allowed_values'][0]['vocabulary']);
  $values[$form['#instance']['bundle'] . '_' . $form['#field']['field_name']]['exclude-' . $type->machine_name] = $form_state['values']['exclude-' . $type->machine_name];
  $values[$form['#instance']['bundle'] . '_' . $form['#field']['field_name']]['min-' . $type->machine_name] = $form_state['values']['min-' . $type->machine_name];
  $values[$form['#instance']['bundle'] . '_' . $form['#field']['field_name']]['max-' . $type->machine_name] = $form_state['values']['max-' . $type->machine_name];
  $values[$form['#instance']['bundle'] . '_' . $form['#field']['field_name']]['min-wc-' . $type->machine_name] = $form_state['values']['min-wc-' . $type->machine_name];
  $values[$form['#instance']['bundle'] . '_' . $form['#field']['field_name']]['max-wc-' . $type->machine_name] = $form_state['values']['max-wc-' . $type->machine_name];
  $values[$form['#instance']['bundle'] . '_' . $form['#field']['field_name']]['dont-allow-create-new-' . $type->machine_name] = $form_state['values']['dont-allow-create-new-' . $type->machine_name];
  // Save into the variable.
  variable_set('term_name_validation_for_field_instances', $values);
}

/**
 * Implements hook_field_attach_validate().
 */
function term_name_validation_field_attach_validate($entity_type, $entity, &$errors) {
  $fields = array();
  if (!empty($entity->type)) {
    $fields = field_info_instances($entity_type, $entity->type);

    // Checking if the field widget is taxonomy_autocomplete,
    //   autocomplete_deluxe_taxonomy.
    foreach ($fields as $field_key => $field_info) {
      if ((!empty($field_info['widget'])) && ($field_info['widget']['type'] == 'taxonomy_autocomplete' || $field_info['widget']['type'] == 'autocomplete_deluxe_taxonomy')) {
        $field_value = $entity->$field_key;

        foreach ($field_value[LANGUAGE_NONE] as $index => $value) {
          if (is_numeric($index)) {
            $term = !empty($value['name']) ? $value['name'] : '';
            $vocabulary_machine_name = !empty($value['vocabulary_machine_name']) ? $value['vocabulary_machine_name'] : '';
            $term_name_config_variable = variable_get('term_name_validation_for_field_instances', array());
            $term_name_config_variable_for_field = isset($term_name_config_variable[$entity->type . '_' . $field_key]) ? $term_name_config_variable[$entity->type . '_' . $field_key] : '';
            // Do this validation only if the term does not exist
            //   (tid == autocreate).
            if (!empty($term) && !empty($term_name_config_variable_for_field) && !empty($vocabulary_machine_name) && $value['tid'] == 'autocreate') {
              // Validating for the Existing Terms, if
              //   "Don't allow create new" is checked.
              $type_dont_allow_create_new = isset($term_name_config_variable_for_field['dont-allow-create-new-' . $vocabulary_machine_name]) ? $term_name_config_variable_for_field['dont-allow-create-new-' . $vocabulary_machine_name] : 0;
              if (!empty($type_dont_allow_create_new)) {
                // Check for Existence of the term.
                $term_exists = taxonomy_get_term_by_name($term, $vocabulary_machine_name);
                if (empty($term_exists)) {
                  form_set_error($field_key, t("Restricted to create new terms: @term", array('@term' => $term)));
                }
              }
              // Check the following, only if we can create new terms.
              else {
                // Get exclude values for current content type.
                $type_exclude = isset($term_name_config_variable_for_field['exclude-' . $vocabulary_machine_name]) ? $term_name_config_variable_for_field['exclude-' . $vocabulary_machine_name] : '';
                if (!empty($type_exclude)) {
                  // Replace \r\n with comma.
                  $type_exclude = str_replace("\r\n", ',', $type_exclude);
                  // Store into array.
                  $type_exclude = explode(',', $type_exclude);
                  // Find any exclude value found in node title.
                  $findings = _term_name_validation_search_excludes_in_title($term, $type_exclude);
                  if ($findings) {
                    form_set_error($field_key, t('The characters/words are not allowed to enter in the Taxonomy Reference field. - @findings', array('@findings' => implode(',', $findings))));
                  }
                }

                // Validating minimum characters in the node title.
                $type_min_chars = isset($term_name_config_variable_for_field['min-' . $vocabulary_machine_name]) ? $term_name_config_variable_for_field['min-' . $vocabulary_machine_name] : '';
                if (!empty($type_min_chars)) {
                  if (drupal_strlen($term) < $type_min_chars) {
                    form_set_error($field_key, t("Taxonomy Reference field should have minimum @num characters", array('@num' => $type_min_chars)));
                  }
                }

                // Validating maximum characters in the node title.
                $type_max_chars = isset($term_name_config_variable_for_field['max-' . $vocabulary_machine_name]) ? $term_name_config_variable_for_field['max-' . $vocabulary_machine_name] : '';
                if (!empty($type_max_chars)) {
                  if (drupal_strlen($term) > $type_max_chars) {
                    form_set_error($field_key, t("Taxonomy Reference field should not exceed @num characters", array('@num' => $type_max_chars)));
                  }
                }

                // Validating Minimum Word Count in the Term Name.
                $type_min_wc = isset($term_name_config_variable_for_field['min-wc-' . $vocabulary_machine_name]) ? $term_name_config_variable_for_field['min-wc-' . $vocabulary_machine_name] : '';
                if (!empty($type_min_wc)) {
                  if (str_word_count($term) < $type_min_wc) {
                    form_set_error($field_key, t("Term Name should have minimum word count of @num", array('@num' => $type_min_wc)));
                  }
                }

                // Validating Maximum Word Count in the Term Name.
                $type_max_wc = isset($term_name_config_variable_for_field['max-wc-' . $vocabulary_machine_name]) ? $term_name_config_variable_for_field['max-wc-' . $vocabulary_machine_name] : '';
                if (!empty($type_max_wc)) {
                  if (str_word_count($term) > $type_max_wc) {
                    form_set_error($field_key, t("Term Name should not exceed word count of @num", array('@num' => $type_max_wc)));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 */
function term_name_validation_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {

  if ((!isset($form_state['input']['op']) || $form_state['input']['op'] != 'Delete')) {
    $form['#validate'][] = 'term_name_validation_validate';
  }
}

/**
 * Implements _form_validate() for taxonomy_form_term().
 */
function term_name_validation_validate($form, &$form_state) {
  $term = $form_state['values']['name'];
  $vid = $form_state['values']['vid'];
  $tid = $form_state['values']['tid'];

  // Get configuration value.
  $term_name_validation_config = variable_get('term_name_validation_config', array());

  if ($term_name_validation_config) {

    // Validating Unique term names.
    if (term_name_validation_unique_term($term, $vid, $tid)) {
      form_set_error('name', t('The term %term already exists in this vocabulary!.', array('%term' => check_plain($term))));
    }

    $vocabulary = taxonomy_vocabulary_load($vid);

    // Get exclude values for current content type.
    $type_exclude = isset($term_name_validation_config['exclude-' . $vocabulary->machine_name]) ? $term_name_validation_config['exclude-' . $vocabulary->machine_name] : '';
    if (!empty($type_exclude)) {
      // Replace \r\n with comma.
      $type_exclude = str_replace("\r\n", ',', $type_exclude);
      // Store into array.
      $type_exclude = explode(',', $type_exclude);
      // Find any exclude value found in node title.
      $findings = _term_name_validation_search_excludes_in_title($term, $type_exclude);
      if ($findings) {
        form_set_error('title', t('The characters/words are not allowed to enter in the title. - @findings', array('@findings' => implode(',', $findings))));
      }
    }

    // Validating minimum characters in the node title.
    $type_min_chars = isset($term_name_validation_config['min-' . $vocabulary->machine_name]) ? $term_name_validation_config['min-' . $vocabulary->machine_name] : '';
    if (!empty($type_min_chars)) {
      if (drupal_strlen($term) < $type_min_chars) {
        form_set_error('title', t("Title should have minimum @num characters", array('@num' => $type_min_chars)));
      }
    }

    // Validating maximum characters in the node title.
    $type_max_chars = isset($term_name_validation_config['max-' . $vocabulary->machine_name]) ? $term_name_validation_config['max-' . $vocabulary->machine_name] : '';
    if (!empty($type_max_chars)) {
      if (drupal_strlen($term) > $type_max_chars) {
        form_set_error('title', t("Title should not exceed @num characters", array('@num' => $type_max_chars)));
      }
    }

    // Validating Minimum Word Count in the Term Name.
    $type_min_wc = isset($term_name_validation_config['min-wc-' . $vocabulary->machine_name]) ? $term_name_validation_config['min-wc-' . $vocabulary->machine_name] : '';
    if (!empty($type_min_wc)) {
      if (str_word_count($term) < $type_min_wc) {
        form_set_error('title', t("Term Name should have minimum word count of @num", array('@num' => $type_min_wc)));
      }
    }

    // Validating Maximum Word Count in the Term Name.
    $type_max_wc = isset($term_name_validation_config['max-wc-' . $vocabulary->machine_name]) ? $term_name_validation_config['max-wc-' . $vocabulary->machine_name] : '';
    if (!empty($type_max_wc)) {
      if (str_word_count($term) > $type_max_wc) {
        form_set_error('title', t("Term Name should not exceed word count of @num", array('@num' => $type_max_wc)));
      }
    }

  }
}

/**
 * Checks whether a term is already exist with same term name.
 *
 * @param $term
 *   Name of the new term to check
 * @param int $vid
 *   ID of the vocabulary the new term belongs to
 * @param int $tid
 *   Term ID of the new term (used when updating an existing term name)
 *
 * @return
 *   returns bool TRUE if the term already exists, FALSE if not.
 */
function term_name_validation_unique_term($term, $vid, $tid = 0) {
  // Tid null means new term else editing.
  $term_objects = taxonomy_get_term_by_name($term);

  // While adding new term check that any term already exists.
  if (empty($tid) || $tid == 0) {
    if (count($term_objects) >= 1) {
      return TRUE;
    }
  }

  // While editing check that any term already exists.
  if ($tid) {
    if (count($term_objects) > 1) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Helper function to find any exclude values in node title.
 */
function _term_name_validation_search_excludes_in_title($input, $find) {
  $findings = array();
  // Finding characters in the node title.
  foreach ($find as $char) {
    // Check for single character.
    if (drupal_strlen($char) == 1) {
      if (strpos($input, trim($char)) !== FALSE) {
        $findings[] = trim($char);
      }
    }
  }

  // Finding words in the node title.
  $words = str_word_count($input, 1);
  foreach ($words as $word) {
    if (in_array($word, $find)) {
      $findings[] = $word;
    }
  }

  return $findings;
}
