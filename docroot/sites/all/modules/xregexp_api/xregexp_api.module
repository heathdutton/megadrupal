<?php
/**
 * Implements hook_menu().
 */
function xregexp_api_menu() {
  $items = array();
  $items['admin/config/system/xregexp'] = array(
    'title' => 'XRegExp API Settings',
    'description' => 'Edit XRegExp settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xregexp_api_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'xregexp_api.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_requirements()
 */
function xregexp_api_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $t = get_t();
    $lib = libraries_info('xregexp');
    if ($lib) {
      $version = xregexp_api_get_version($lib);
      if ((!isset($lib['error']) || !$lib['error']) && !empty($version)) {
        $requirements['xregexp'] = array(
          'title' => $t('XRegExp'),
          'value' => $version,
          'severity' => REQUIREMENT_OK,
        );
        return $requirements;
      }
    }
    $requirements['xregexp'] = array(
      'title' => $t('XRegExp'),
      'description' => isset($lib['error message']) ? $t($lib['error message']) : t('XRegExp library was not found'),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Implements hook_libraries_info().
 */
function xregexp_api_libraries_info() {
  $stanza = array(  // static ?
    'files' => array(
      'js' => array(),
    ),
    'variant callback' => 'xregexp_check_variant',
    'variant arguments' => array('variant' => ''),
  );

  $libraries = array();
  $libraries['xregexp'] = array(
    'name' => 'XRegExp',
    'vendor url' => 'http://xregexp.com/',
    'download url' => 'http://xregexp.com/',
    'version callback' => 'xregexp_api_get_version',
    'versions' => array(),
    'callbacks' => array(
      'pre-load' => array(
        'xregexp_pre_load'
      ),
    ),
  );
  foreach(array('minified'=>'xregexp-min.js', 'all' => 'xregxexp-all.js', 'small' => 'xregexp.js') as $key => $lib) {
    // regular path (file downloaded from webpage)
    $v = xregexp_api_get_file_version($libraries, $lib); //fetch the version.
    if ($v) {
      // if no other default set it as default for the version.
      if (!isset($libraries['xregexp']['versions'][$v])) {
        $libraries['xregexp']['versions'][$v] = array('files' => array('js' => array($lib)));
      }
      else { // default allready set -> it's a variant
        if (!isset($libraries['xregexp']['versions'][$v]['variants'])) {
          $libraries['xregexp']['versions'][$v]['variants'] = array();
        }
        $libraries['xregexp']['versions'][$v]['variants'][$key] = $stanza;
        $libraries['xregexp']['versions'][$v]['variants'][$key]['files']['js'] = array($lib);
        $libraries['xregexp']['versions'][$v]['variants'][$key]['variant arguments']['variant'];
      }
    }
    // check /src (file downloaded from webpage) same as for flat
    $v = xregexp_api_get_file_version($libraries, "src/$lib"); //fetch the version.
    if (!$v) {
      continue;
    }
    // if no other default set it as default for the version.
    if (!isset($libraries['xregexp']['versions'][$v])) {
      $libraries['xregexp']['versions'][$v] = array('files' => array('js' => array('src/' . $lib)));
      continue;
    }
    // it s a variant
    if (!isset($libraries['xregexp']['versions'][$v]['variants'])) {
      $libraries['xregexp']['versions'][$v]['variants'] = array();
    }
    if (isset($libraries['xregexp']['versions'][$v]['variants'][$key])) {
      $key = 'src_' . $key; // this handles minor versions,  otherwise: we got that major already
    }
    $libraries['xregexp']['versions'][$v]['variants'][$key] = $stanza;
    $libraries['xregexp']['versions'][$v]['variants'][$key]['files']['js'] = array('src/' . $lib);
    $libraries['xregexp']['versions'][$v]['variants'][$key]['variant arguments']['variant'] = $key;
  }
  return $libraries;
}

/**
 * Get the version of XRegExp files.
 */
function xregexp_api_get_file_version($library, $file) {
  $path = $library['library path'] = isset($library['library path']) ? $library['library path'] : libraries_get_path('xregexp');
  if (!file_exists($path . '/' . $file)) {
      return FALSE;
  }
  $options = array(
    'file' => $file,
    'pattern' => '@XRegExp +v?([0-9a-zA-Z\.-]+)@',
    'lines' => 5,
    'cols' => 50,
  );
  return libraries_get_version($library, $options);
}

/**
 * Get the highest installed version of XRegExp.
 */
function xregexp_api_get_version($library) {
  $path = $library['library path'] = isset($library['library path']) ? $library['library path'] : libraries_get_path('xregexp');
  $version = FALSE;
  //handle default:
  foreach ($library['versions'] as $vers => $lib) {//this is small -> no sort.
    if (version_compare($vers, $version, '>')) {
      $version = $vers;
    }
  }
  return $version;
}

/**
 * Load files based on settings
 */
function xregexp_pre_load(&$library) {
  if (!variable_get('xregexp_api_include', 1)) {
    $plugins = array_keys(_xregexp_api_plugins());
    foreach ($library['files']['js'] as $key => $file) {
      if (!in_array($file, $plugins)) {
        unset($library['files']['js'][$key]);
      }
    }
  }
  $library['files']['js'] = array_merge($library['files']['js'], array_filter(variable_get('xregexp_api_plugins', array())));
}

/**
 * Check if a variant is present.
 * All variants are present or they didn't get listed so thats a litle redundant
 */
function xregexp_check_variant($library, $variant) {
  $path = DRUPAL_ROOT . '/' . $library['library path'];
  return is_file($path . '/' . implode(array_keys($library['variants'][$variant]['files']['js'])));
}

function _xregexp_api_plugins() {
  $path = libraries_get_path('xregexp');
  $files = file_scan_directory($path, '/.*\.js$/', array('nomask' => '/(\.\.?|CVS|tests)$/' ));
  $options = array();
  foreach ($files as $file) {
    if (!in_array($file->filename, array('xregexp.js', 'xregexp-all.js', 'xregexp-min.js'))) {
      $options[str_replace($path . '/', '', $file->uri)] = $file->filename;
    }
  }
  asort($options);
  return $options;
}
