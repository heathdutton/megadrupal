<?php

/**
 * @file
 * Used to create listing pages and blocks of popular books, DVDs, music, etc. with deep links to Amazon and the library catalog.
 */

require_once 'includes/booklists.inc';
if (module_exists('pac')) {
  module_load_include('inc', 'pac', 'classes/pac_polaris');
}

/**
 * Define constants.
 */
define('AMAZON_ASSOCIATES_ID', variable_get('booklists_amazon_associates_id'));
define('NYTIMES_API_KEY', variable_get('booklists_nytimes_api_key'));
if (!empty($conf['polaris_pac_link'])) {
  $catalog_url = $conf['polaris_pac_link'] . '/polaris/view.aspx';
}
else {
  $catalog_url = variable_get('booklists_catalog_url');
}
define('CATALOG_URL', $catalog_url);

/**
 * Implements hook_permission().
 */
function booklists_permission() {
  return array(
    'configure booklists' => array(
      'title' => t('Configure Booklists'),
      'description' => t('Allows users to make configuration changes for the booklists displayed on the site.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function booklists_init() {
  // These calls were previously in hook_block_view(), but the CSS and JS don't get loaded in w/ cached version of block. Moved to hook_init().
  drupal_add_js('//cdn.jsdelivr.net/cycle2/20130502/jquery.cycle2.min.js', array('type' => 'external'));
  drupal_add_js('//cdn.jsdelivr.net/cycle2/20130502/jquery.cycle2.carousel.min.js', array('type' => 'external'));
  drupal_add_js('//cdn.jsdelivr.net/cycle2/20130502/jquery.cycle2.swipe.min.js', array('type' => 'external'));
  drupal_add_js('//cdn.jsdelivr.net/jquery.customselect/0.4.1/jquery.customSelect.min.js', array('type' => 'external'));
  drupal_add_js('//cdn.jsdelivr.net/imagesloaded/2.1.0/jquery.imagesloaded.min.js', array('type' => 'external'));
  drupal_add_js(drupal_get_path('module', 'booklists') . '/booklists.min.js', 'file');
  drupal_add_css(drupal_get_path('module', 'booklists') . '/booklists.css');
}

/**
 * Implements hook_block_info().
 */
function booklists_block_info() {
  $blocks = array();

  // Dynamic list of blocks dynamic based on the config settings

  // AMAZON
  $booklists_amazon_block_title = '';
  $booklists_amazon_block_url = '';
  for ($x=1; $x <= 10; $x++) {
    $booklists_amazon_block_title = variable_get('booklists_amazon_block_' . $x . '_title');
    $booklists_amazon_block_url = variable_get('booklists_amazon_block_' . $x . '_url');
    if ($booklists_amazon_block_title && $booklists_amazon_block_url) {
      $blocks['booklists_amazon_block_' . $x] = array(
        'info' => 'Booklists: ' . $booklists_amazon_block_title
      );
    }
    unset($booklists_amazon_block_title, $booklists_amazon_block_url);
  }

  // NYTimes
  $booklists_nyt_block_list = '';
  for ($x=1; $x <= 10; $x++) {
    $booklists_nyt_block_list = variable_get('booklists_nyt_block_' . $x . '_list');
    if ($booklists_nyt_block_list) {
      $blocks['booklists_nyt_block_' . $x] = array(
        'info' => 'Booklists: New York Times ' . $booklists_nyt_block_list
      );
    }
    unset($booklists_nyt_block_list);
  }

  // Specific Formats/Lists for Polaris
  $blocks['booklists_polaris_switcher'] = array(
    'info' => t('Booklists Polaris Switcher'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['booklists_polaris_list_types'] = array(
    'info' => t('Booklists Polaris List Types'),
    'cache' => DRUPAL_NO_CACHE,
  );
  // Availability filter block
  $blocks['booklists_polaris_availability'] = array(
    'info' => t('Booklists Polaris Availability'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function booklists_block_view($delta = '') {
  $block = array();
  $delta_for_detail_page = str_replace('_', '-', str_replace('booklists_', '', $delta));

  // Dynamic list of blocks based on the config settings

  // AMAZON
  $booklists_amazon_block_title = '';
  $booklists_amazon_block_url = '';
  for ($x=1; $x <= 10; $x++) {
    $booklists_amazon_block_title = variable_get('booklists_amazon_block_' . $x . '_title');
    $booklists_amazon_block_url = variable_get('booklists_amazon_block_' . $x . '_url');
    if ($delta == 'booklists_amazon_block_' . $x && $booklists_amazon_block_title && $booklists_amazon_block_url) {
      $block['subject'] = $booklists_amazon_block_title;
      $block['content'] = _booklists_display_list_amazon_rss($booklists_amazon_block_title, $booklists_amazon_block_url, FALSE, $delta_for_detail_page); // Build the content w/ the reusable function.
    }
    unset($booklists_amazon_block_title, $booklists_amazon_block_url);
  }

  // NYTimes
  $booklists_nyt_block_list = '';
  for ($x=1; $x <= 10; $x++) {
    $booklists_nyt_block_list = variable_get('booklists_nyt_block_' . $x . '_list');
    if ($delta == 'booklists_nyt_block_' . $x && $booklists_nyt_block_list) {
      $block['subject'] = 'NYTimes Bestsellers - ' . str_replace('E Book', 'eBook', str_replace('-', ' ', $booklists_nyt_block_list));
      $block['content'] = _booklists_display_list_nytimes($booklists_nyt_block_list, FALSE, $delta_for_detail_page); // Build the content w/ the reusable function.
    }
    unset($booklists_nyt_block_list);
  }

  if ($delta == 'booklists_polaris_switcher') {
    $block['subject'] = 'List';
    $block['content'] = booklists_polaris_switcher();
  }
  if ($delta == 'booklists_polaris_list_types') {
    $block['subject'] = 'Show results for';
    $block['content'] = booklists_polaris_list_types();
  }
  if ($delta == 'booklists_polaris_availability') {
    $block['subject'] = 'Availability';
    $block['content'] = booklists_polaris_availability();
  }

  return $block;
}

/**
 * Implements hook_menu().
 */
function booklists_menu() {
  $items['admin/config/user-interface/booklists'] = array(
    'title' => t('Booklists'),
    'description' => t('Used to create listing pages and blocks of popular books, DVDs, music, etc. with deep links to Amazon and the library catalog.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('booklists_settings'),
    'file' => 'booklists.admin.inc',
    'access arguments' => array('configure booklists'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['booklists/%/%'] = array(
    'title' => t('Booklists Detail Page'),
    'title callback' => 'booklists_detail_page_title',
    'title arguments' => array(1, 2, 3, 4),
    'page callback' => 'booklists_detail',
    'page arguments' => array(1, 2, 3, 4),
    'file' => 'booklists.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['booklists/catalog/coming-soon'] = array(
    'title' => t('Coming Soon'),
    'page callback' => 'booklists_query_polaris',
    'page arguments' => array('coming_soon'),
    'file' => 'booklists.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['booklists/catalog/just-checked-in'] = array(
    'title' => t('Just Checked In'),
    'page callback' => 'booklists_query_polaris',
    'page arguments' => array('just_checked_in'),
    'file' => 'booklists.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['booklists/catalog/new-arrivals'] = array(
    'title' => t('New Arrivals'),
    'page callback' => 'booklists_query_polaris',
    'page arguments' => array('new_arrivals'),
    'file' => 'booklists.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['booklists/catalog/most-popular'] = array(
    'title' => t('Most Popular'),
    'page callback' => 'booklists_query_polaris',
    'page arguments' => array('most_popular'),
    'file' => 'booklists.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Display a list of titles from an Amazon RSS feed.
 */
function _booklists_display_list_amazon_rss($book_list_name, $url, $display_title = TRUE, $delta) {
  $sharing_link = 'http://' . $_SERVER['SERVER_NAME'] . request_uri();
  if (strstr($sharing_link, 'booklists.block.php')) {
    $sharing_link = $_SERVER['HTTP_REFERER'];
  }
  $output = '';
  $output .= '<div class="booklists-wrapper clearfix">
              <ul class="sharetools">
        			<li>Share:</li>
              <li class="email"><a href="mailto:?subject=' . $book_list_name . '&body=Check out this list of best sellers from the ' . variable_get('site_name') . ' website! ' . $sharing_link . '">Email This &gt;</a></li>
              <li class="facebook"><a href="https://www.facebook.com/share.php?u=' . $sharing_link . '">Facebook</a></li>
              <li class="twitter"><a href="http://twitter.com/share?text=' . urlencode($book_list_name) . '&url=' . $sharing_link . '">Twitter</a></li>
              </ul>
              ' . booklists_build_switcher() . '
              <div class="booklists-wrapper-inner">
              <a href=# id="prev"><i class="icon-chevron-left icon-2x"></i></a><div class="booklists-responsive" data-cycle-prev="#prev" data-cycle-next="#next" data-allow-wrap="false" data-cycle-fx="carousel" data-cycle-timeout="0" data-cycle-carousel-fluid="true">';
  $url = url($url, array('absolute' => TRUE));
  $counter = 1;
  try {
    foreach (qp($url, 'item') as $item) { // Use QueryPath parse the RSS feed.
      $title = $item->find('title')->text();
      $title = trim(preg_replace('/[\(\[].*[\)\]]/', '', preg_replace('/#[0-9]+:/', '', $title)));
      $link = $item->next('link')->text();
      $link = trim($link);
      // Figure out the ASIN from the link.
      preg_match('/\/dp\/(.*)\/ref/U', $link, $matches); // U makes it an ungreedy match.
      $asin = $matches[1];

      $description = $item->next('description')->text();
      preg_match('/<span class="riRssContributor">(.*)<br \/>/U', $description, $attr_matches); // U makes it an ungreedy match.
      $attribution = trim(str_replace('Format: DVD', '', str_replace('~', '', str_replace('|', '', str_replace('</span>', '', str_replace('<span class="byLinePipe">', '', $attr_matches[1]))))));
      $attribution = preg_replace('/<a[^>]*>/', '', $attribution);
      $attribution = str_replace('</a>', '', $attribution);
      $attribution = preg_replace('/ \(Author\), [^>]*/', '', $attribution);
      $attribution = str_replace(' (Author)', '', $attribution);
      $attribution = str_replace(', Author', '', $attribution);
      $attribution = str_replace(' (Reader)', '', $attribution);
      $attribution = str_replace(' (Author, Reader)', '', $attribution);
      preg_match('/<b>Platform:<\/b>(.*)<br \/>/U', $description, $platform_matches);
      if (count($platform_matches) > 0) {
        $platform = trim(str_replace(' style="padding-bottom:4px"', '', $platform_matches[1]));
      }
      preg_match('/(<img src=".*" \/>)/U', $description, $cover_matches);
      $cover_image = str_replace('/>', 'class="booklists_cover" onclick="window.location=\'/booklists/ASIN/' . $asin . '/' . $delta . '\'; return false;">', $cover_matches[1]);
      if (empty($attribution) || strstr($book_list_name, 'DVD')) {
        $cover_image = preg_replace('/alt="[^"]*"/', 'alt="' . $title . '"', $cover_image);
      }
      else {
        $cover_image = preg_replace('/alt="[^"]*"/', 'alt="' . $title . '" data-booklists-attribution=" by ' . $attribution . '"', $cover_image);
      }
      $output .= $cover_image . "\n";
      $counter++;
    }
  }
  catch (Exception $e) {
    //drupal_set_message($e->getMessage());
    drupal_set_message('The Booklists was unable to load the specified RSS feed (via Querypath).');
  }
  $output .= '</div><a href=# id="next">Next &gt;&gt;</a></div></div>';
  $output .= '<div id="booklists-alt-caption"></div>';

  return $output;
}

/**
 * Implements hook_js_alter().
 *
 * Gets rid of jQuery UI. Causes interference with display when logged-in.
 */
function booklists_js_alter(&$javascript) {
  if (!path_is_admin(current_path())) {
    unset($javascript['sites/all/modules/contrib/jquery_update/replace/ui/ui/minified/jquery.ui.core.min.js']);
    unset($javascript['sites/all/modules/contrib/jquery_update/replace/ui/ui/minified/jquery.ui.draggable.min.js']);
    unset($javascript['sites/all/modules/contrib/jquery_update/replace/ui/ui/minified/jquery.ui.resizable.min.js']);
  }
}

/**
 * Display a list of titles from the NYTimes API.
 */
function _booklists_display_list_nytimes($list_type, $display_title = TRUE, $delta) {
  $delta_numeric = str_replace('nyt-block-', '', $delta);
  $vertical = variable_get('booklists_nyt_block_' . $delta_numeric . '_list_vertical');

  $books = new NYTBooks(NYTIMES_API_KEY);
  $books = $books->format("json")
    ->listType($list_type);

  $book_list = $books->get_bestsellers();
  $book_list = json_decode($book_list);

  // List all available types of lists.
  //$list_types = json_decode($books->get_list_types());
  //dsm($list_types);

  $sharing_link = 'http://' . $_SERVER['SERVER_NAME'] . request_uri();
  if (strstr($sharing_link, 'booklists.block.php')) {
    $sharing_link = $_SERVER['HTTP_REFERER'];
  }
  $output = '';
  if (is_object($book_list)) {
    if ($vertical == FALSE) {
      $book_list_name = 'NYTimes Bestsellers - ' . str_replace('E-Book', 'eBook', $book_list->results[0]->list_name);
      if ($display_title) {
        $output .= '<h2>' . $book_list_name . '</h2>'; // Print the name of the book list at the top.
      }
      $output .= '<div class="booklists-wrapper clearfix">
                  <ul class="sharetools">
            			<li>Share:</li>
                  <li class="email"><a href="mailto:?subject=' . $book_list_name . '&body=Check out this list of best sellers from the ' . variable_get('site_name') . ' website! ' . $sharing_link . '">Email This &gt;</a></li>
                  <li class="facebook"><a href="https://www.facebook.com/share.php?u=' . $sharing_link . '">Facebook</a></li>
                  <li class="twitter"><a href="http://twitter.com/share?text=' . urlencode($book_list_name) . '&url=' . $sharing_link . '">Twitter</a></li>
                  </ul>
                  ' . booklists_build_switcher() . '
                <div class="booklists-wrapper-inner">
                  <a href=# id="prev">&lt;&lt; Prev</a><div class="booklists-responsive" data-cycle-prev="#prev" data-cycle-next="#next" data-allow-wrap="false" data-cycle-fx="carousel" data-cycle-timeout="0" data-cycle-carousel-fluid="true">';
    }
    foreach ($book_list->results as $book) {
      $isbn_list = array();
      $isbn = '';
      $selected_isbn = '';
      $amazon_selected_isbn = '';
      $amazon_selected_isbn_cache = '';
      $found_amazon_cover = FALSE;
      $ebooks_parameter = '';
      // List out the books. Start by creating a list of "primary" isbns that aren't set to "None".
      if (!empty($book->book_details[0]->primary_isbn10) && !in_array($book->book_details[0]->primary_isbn10, $isbn_list)) {
        $isbn_list[] = $book->book_details[0]->primary_isbn10;
      }
      if (!empty($book->book_details[0]->primary_isbn13) && !in_array($book->book_details[0]->primary_isbn13, $isbn_list)) {
        $isbn_list[] = $book->book_details[0]->primary_isbn13;
      }
      // Additionally, if you get a series of ISBN numbers back, loop through them and add any that haven't already been captured.
      foreach ($book->isbns as $key => $isbn) {
        if ($isbn->isbn10 != 'None' && !in_array($isbn->isbn10, $isbn_list)) {
          $isbn_list[] = $isbn->isbn10;
        }
        if ($isbn->isbn13 != 'None' && !in_array($isbn->isbn13, $isbn_list)) {
          $isbn_list[] = $isbn->isbn13;
        }
      }
      if (strstr($book_list->results[0]->list_name, 'E-Book')) {
        $ebooks_parameter = '/ebooks';
      }
      if (strstr($book_list->results[0]->list_name, 'E-Book')) {
        $selected_isbn = _booklists_check_catalog_isbn($isbn_list, $eBook = TRUE);
      }
      else {
        // Search the catalog to see if any of an array of ISBNs exist in the catalog.
        $selected_isbn = _booklists_check_catalog_isbn($isbn_list);
      }
      // We have to send an ISBN to the detail page. If we don't find one, let's default to the first one that was in the list.
      if ($selected_isbn == FALSE) {
        $selected_isbn = $isbn_list[0];
      }

      $cover_image_url_syndetics = 'https://secure.syndetics.com/index.php?isbn=' . $isbn_list[0] . '/mc.jpg&client=richlandcpubl';
      $backup_image_url = base_path() . drupal_get_path('module', 'booklists') . '/images/default_cover.png';
      $cover_image = '<img src="' . $cover_image_url_syndetics . '" class="booklists_cover booklists-syndetics" onclick="window.location=\'/booklists/ISBN/' . $selected_isbn . '/' . $delta . $ebooks_parameter . '\'; return false;" alt="' . _booklists_title_case($book->book_details[0]->title) . '" data-booklists-attribution=" by ' . $book->book_details[0]->author . '" width="132" height="200" onerror="this.src=\'' . $backup_image_url . '\'">' . "\n";

      if ($vertical == FALSE) {
        $output .= $cover_image;
      }
      else if ($vertical == TRUE) {
        // Display the vertical style list with descriptions.
        $output .= '<div class="amazon-item-wrapper">';
        $output .= '<div class="amazon-cover">' . $cover_image . '</div><br>';

        $output .= '<div class= "amazon-title"><a href="/booklists/ISBN/' . $selected_isbn . '/' . $delta . $ebooks_parameter . '">' . _booklists_title_case($book->book_details[0]->title) . '</a>';
        if ($book->book_details[0]->author) {
          $output .= ' <span class="amazon-author">by ' . $book->book_details[0]->author . '</span>';
        }
        $output .= '</div>';
        $review = $book->book_details[0]->description;
        $amazon_link = 'http://www.amazon.com/dp/' . $selected_isbn . '/ref=nosim?tag=' . AMAZON_ASSOCIATES_ID;
        if (!empty($review)) {
          if (strlen($review) > 175) {
            drupal_add_js(drupal_get_path('theme', 'rcpl') . '/js/amazon_descriptions.js');
            $output .= '<div class="more-less-container">';
            $output .= '<div class="amazon-trimmed-description"><strong> Amazon Says: </strong>'. strip_tags(_rcpl_close_amazon_tags(substr($review, 0, 175))) . ' <a class="amazon-more-link">more...</a></div>';
            $output .= '<div class="amazon-full-description"><strong> Amazon Says: </strong>' . strip_tags($review) . ' <a class="amazon-less-link">less...</a></div>';
            $output .= '<a href="' . $amazon_link . '" class="linkforamazon" rel="external" title="Read Amazon&apos;s Description and Reviews. If you choose to buy once you\'re there a portion will be donated to ' . variable_get('site_name') . '.">Amazon</a>';
            $output .= '</div>';
            $output .= '<br>';
          }
          else {
            $cleaned_short_description = strip_tags(_rcpl_close_amazon_tags($review));
            $output .= '<strong> Amazon Says: </strong>' . $cleaned_short_description . '<br>';
            $output .= '<a href="' . $amazon_link . '" class="linkforamazon" rel="external" title="Read Amazon&apos;s Description and Reviews. If you choose to buy once you\'re there a portion will be donated to ' . variable_get('site_name') . '.">Amazon</a>';
            $output .= '<br>';
          }
        }
        else {
          $output .= '<a href="' . $amazon_link . '" class="linkforamazon" rel="external" title="Read Amazon&apos;s Description and Reviews. If you choose to buy once you\'re there a portion will be donated to ' . variable_get('site_name') . '.">Amazon</a>';
          $output .= '<br>';
        }
        $output .= '</div>'; // Close amazon-item div.
      } // End looking for vertical display.
    }
    if ($vertical == FALSE) {
      $output .= '</div><a href=# id="next">Next &gt;&gt;</a></div></div>';
      $output .= '<div id="booklists-alt-caption"></div>';
    }
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function booklists_theme() {
  return array(
    'booklists_detail' => array(
      'arguments' => array('type' => NULL, 'code' => NULL, 'delta' => NULL, 'ebooks' => NULL),
      'template' => 'booklists-detail',
    ),
  );
}

/**
 * Preprocess function to sanitize variables for preparation for use in the booklists-detail.tpl.php file.
 */
function booklists_preprocess_booklists_detail(&$variables) {
  // Sanitizing what we get from the URL.
  $variables['type'] = check_plain($variables['type']);
  $type = $variables['type']; // Redeclare them with simplified names for use below.
  $variables['code'] = check_plain($variables['code']);
  $code = $variables['code'];
  $variables['delta'] = check_plain($variables['delta']);
  $delta = $variables['delta'];
  $variables['ebooks'] = check_plain($variables['ebooks']);
  $ebooks = $variables['ebooks'];

  // Create additional variables based on the above information that was passed into the theme function.
  $variables['image'] = '';
  $variables['action_links'] = array();
  $variables['site_name'] = variable_get('site_name');
  $variables['title'] = '';
  $variables['attribution'] = '';
  $variables['description'] = '';
  $variables['unavailability_notice'] = '';
  $variables['release_date'] = '';
  $variables['binding'] = '';
  $variables['publisher'] = '';
  $variables['carousel'] = '';

  // We need to build out all of the data here basically into variables.
  // Then the variables need to be printed out in the template file with the necessary HTML wrapped around them.

  if ($type == 'ASIN') {
    $amazon_info = amazon_item_lookup($code);
    $upc = booklists_get_amazon_upc($code);

    // Try a catalog search on the UPC.
    $found_in_catalog = _booklists_check_catalog_upc($upc); // Should return TRUE or FALSE.
    $variables['action_links'][] = booklists_build_catalog_link($found_in_catalog, 'UPC', $amazon_info[$code]['releasedate']);
    if ($amazon_info[$code]['binding'] == 'Audio CD') {
      $variables['action_links'][] = 'https://www.freegalmusic.com/users/sdlogin';
    }
    $variables['action_links'][] = $amazon_info[$code]['detailpageurl'] . '&tag=' . AMAZON_ASSOCIATES_ID;
  }
  else if ($type == 'ISBN' && empty($ebooks)) { // Printed books from NYTimes list
    if (strlen($code) == 13) {
      // We need to use an ASIN if it's a 13-digit ISBN.
      $isbn = amazon_ean_lookup($code);
      $catalog_isbn = $code;
    }
    else {
      $isbn = $code;
      $catalog_isbn = $code;
    }
    $amazon_info = amazon_item_lookup($isbn);
    $found_in_catalog = _booklists_check_catalog_isbn(array($catalog_isbn)); // Should return either an ISBN string or FALSE.
    $variables['action_links'][] = booklists_build_catalog_link($found_in_catalog);
    $variables['action_links'][] = $amazon_info[$code]['detailpageurl'] . '&tag=' . AMAZON_ASSOCIATES_ID;
  }

  if (empty($ebooks)) { // ASIN's and ISBN's for hardcovers
    // Image
    if ($amazon_info[$code]['imagesets']['largeimage']['url']) {
      $variables['image'] = '<img src="' . $amazon_info[$code]['imagesets']['largeimage']['url'] . '">';
    }
    $variables['title'] = $amazon_info[$code]['title'];
    $variables['title'] = trim(preg_replace('/\([^)]*\)/', '', $variables['title'])); // Take any extra stuff in the titles out if it's in between parentheses.
    if (!empty($amazon_info[$code]['author'][0])) {
      $variables['attribution'] = $amazon_info[$code]['author'][0];
    }
    if (!empty($amazon_info[$code]['artist'][0])) {
      $variables['attribution'] = $amazon_info[$code]['artist'][0];
    }

    $variables['description'] = $amazon_info[$code]['editorialreviews'][0]['content'];
    $variables['description'] = str_ireplace('<BR><BR>', '</p><p>', $variables['description']);
    $variables['description'] = str_ireplace('<DIV>', '<p>', $variables['description']);
    $variables['description'] = str_ireplace('</DIV>', '</p>', $variables['description']);
    $variables['description'] = htmlentities($variables['description'], ENT_QUOTES|"ENT_HTML401", "UTF-8", true); // Helps for things that come in as non-UTF8. Otherwise str_replace fails as does preg_replace.
    $variables['description'] = str_ireplace('&lt;', '<', $variables['description']);
    $variables['description'] = str_ireplace('&gt;', '>', $variables['description']);
    $variables['description'] = str_ireplace('<P>&nbsp;</P>', '', $variables['description']);
    if (!$found_in_catalog) {
      if ($amazon_info[$code]['binding'] == 'Audio CD') {
        $variables['unavailability_notice'] = 'This is not currently available for check out from any of our locations, but you may find it in our downloadable music catalog from <a href="https://www.freegalmusic.com/users/sdlogin">Freegal</a> or you may <a href="/request-purchase">request we purchase it</a>.';
      }
      // Else if amazon says it's in pre-order status, Don't show link to request purchase. Just show notice about it being a pre-order.
      else if (strtotime($amazon_info[$code]['releasedate']) > strtotime('now')) {
        $variables['unavailability_notice'] = 'This item doesn\'t appear to have been released yet, but should be released on ' . date('n-j-Y', strtotime($amazon_info[$code]['releasedate'])) . '.';
      }
      else if (empty($amazon_info[$code]['releasedate'])) {
        $variables['unavailability_notice'] = 'This item doesn\'t appear to have been released yet.';
      }
      else {
        $variables['unavailability_notice'] = 'This is not currently available for check out from any of our locations, but you may <a href="/request-purchase">request we purchase it</a>.';
      }
    }
    if (!empty($amazon_info[$code]['releasedate'])) {
      $variables['release_date'] = date('n-j-Y', strtotime($amazon_info[$code]['releasedate']));
    }
    if (!empty($amazon_info[$code]['binding'])) {
      $variables['binding'] = $amazon_info[$code]['binding'];
    }
    if (!empty($amazon_info[$code]['publisher'])) {
      $variables['publisher'] = $amazon_info[$code]['publisher'];
    }
  }
  else if ($type == 'ISBN' && !empty($ebooks)) {
    // The eBooks NYTimes list presents a number of problems. Let's do that one very differently. Let's call the NYTimes API again to pull in the info.
    $books = new NYTBooks(NYTIMES_API_KEY);
    $books = $books->format("json")
      ->listName('e-book-fiction')
      ->isbn($code);
    $book_details = $books->get_bestseller_by_isbn();
    $book_details = json_decode($book_details);
    $book_details_original = $book_details;
    $book_details = $book_details->results[0]->book_details[0];

    // Let's be more stringent about what we're looking for with eBooks.
    $client_key = variable_get('booklists_overdrive_client_key');
    if (strstr($ebooks, 'ebooks') && !empty($client_key)) {
      // Build the ISBN list from what the NYTimes gave us on this isbn.
      $isbn_list = array();
      // List out the books. Start by creating a list of "primary" isbns that aren't set to "None".
      if ($book_details->primary_isbn10 != 'None' && !in_array($book_details->primary_isbn10, $isbn_list)) {
        $isbn_list[] = $book_details->primary_isbn10;
      }
      if ($book_details->primary_isbn13 != 'None' && !in_array($book_details->primary_isbn13, $isbn_list)) {
        $isbn_list[] = $book_details->primary_isbn13;
      }
      // Additionally, if you get a series of ISBN numbers back, loop through them and add any that haven't already been captured.
      foreach ($book_details_original->results[0]->isbns as $key => $isbn) {
        if ($isbn->isbn10 != 'None' && !in_array($isbn->isbn10, $isbn_list)) {
          $isbn_list[] = $isbn->isbn10;
        }
        if ($isbn->isbn13 != 'None' && !in_array($isbn->isbn13, $isbn_list)) {
          $isbn_list[] = $isbn->isbn13;
        }
      }
      // Let's run the list for this title.
      $overdrive_link = _booklists_get_overdrive_html($isbn_list, _booklists_title_case($title)); // Use the overdrive API.
      if (!empty($overdrive_link)) {
        // We found it. Provide a link straight to Overdrive.
        $variables['action_links'][] = $overdrive_link; // Direct overdrive checkout link
      }
      else {
        // Not available in Overdrive. Explain why not.
        $variables['action_links'][] = '/' . drupal_get_path('module', 'booklists') . '/includes/booklists-ebooks.php?catalog-url=' . urlencode(CATALOG_URL . '?title=' . $book_details->title);
      }
    }
    $variables['action_links'][] = 'http://www.amazon.com/s/?url=search-alias%3Dstripbooks&field-keywords=' . urlencode($book_details->title) . '&tag=' . AMAZON_ASSOCIATES_ID;

    // Image
    $amazon_selected_isbn_cache = cache_get('booklists-title-amazon:' . _booklists_title_case($book_details->title), 'cache');
    if (!empty($amazon_selected_isbn_cache)) {
      $amazon_selected_isbn = $amazon_selected_isbn_cache->data;
      $found_amazon_cover = TRUE;
    }
    $cover_image_url_amazon = 'http://images.amazon.com/images/P/' . $amazon_selected_isbn . '.01.LZZZZZZZ.jpg'; // L = LARGE
    $cover_image_url_syndetics = 'http://www.syndetics.com/index.aspx?type=xw12&isbn=' . $code . '/LC.GIF';
    $backup_image_url = base_path() . drupal_get_path('module', 'booklists') . '/images/default_cover.png';
    if ($found_amazon_cover == TRUE) {
      $variables['image'] = '<img src="' . $cover_image_url_amazon . '" class="booklists_cover booklists-syndetics" alt="' . _booklists_title_case($book_details->title) . '"  onerror="this.src=\'' . $backup_image_url . '\'">' . "\n";
    }
    else {
      $variables['image'] = '<img src="' . $cover_image_url_syndetics . '" class="booklists_cover booklists-syndetics" alt="' . _booklists_title_case($book_details->title) . '" onerror="this.src=\'' . $backup_image_url . '\'">' . "\n";
    }

    // Details
    $variables['title'] = _booklists_title_case($book_details->title); // Switch to title case.
    $variables['attribution'] = $book_details->author;
    $variables['description'] = $book_details->description;
    if (empty($overdrive_link)) {
      $variables['unavailability_notice'] = 'This is not currently available for check out from any of our locations, but you may <a href="/request-purchase">request we purchase it</a>.';
    }
    if (!empty($book_details_original->results[0]->published_date)) {
      $variables['release_date'] = date('n-j-Y', strtotime($book_details_original->results[0]->published_date));
    }
    $variables['binding'] = 'eBook';
    $variables['publisher'] = $book_details->publisher;
  }
  // Show the originating carousel if it was passed in as a URL parameter
  if (!empty($delta)) {
    $block = block_load('booklists', 'booklists_' . str_replace('-', '_', $delta));
    $variables['carousel'] = drupal_render(_block_get_renderable_array(_block_render_blocks(array($block))));
  }
}

/**
 * Page Title callback function from hook_menu().
 * The URL will pass in parameters. The 1st should be the ISBN or ASIN. The 2nd should be whether it's an ISBN or ASIN.
 * The 3rd parameter is optional and will indicate if the details being asked for are from an eBooks list
 */
function booklists_detail_page_title($type, $code, $delta = NULL, $ebooks = NULL) {
  $output = '';
  if (empty($ebooks)) {
    if ($type == 'ISBN') {
      if (strlen($code) == 13) {
        // We need to use an ASIN if it's a 13-digit ISBN.
        $code = amazon_ean_lookup($code);
      }
    }
    $amazon_info = amazon_item_lookup($code);
    $title = $amazon_info[$code]['title'];
    $title = trim(preg_replace('/\([^)]*\)/', '', $title)); // Take any extra stuff in the titles out if it's in between parentheses.
    $output .= $title;
  }
  else {
    // The eBooks NYTimes list presents a number of problems. Let's do that one very differently. Let's call the NYTimes API again to pull in the info.
    $books = new NYTBooks(NYTIMES_API_KEY);
    $books = $books->format("json")
      ->listName('e-book-fiction')
      ->isbn($code);
    $book_details = $books->get_bestseller_by_isbn();
    $book_details = json_decode($book_details);
    $book_details = $book_details->results[0]->book_details[0];
    $title = _booklists_title_case($book_details->title);
    $output .= $title;
  }
  return $output;
}

/**
 * Function to search Overdrive API for a particular item and return details.
 *
 * Code copied and modified heavily from eBooks module version.
 */
function _booklists_get_overdrive_html($isbn_list, $title) {

  $site_name = variable_get('site_name', 'Drupal Site Using Booklists Module');
  $client_key = variable_get('booklists_overdrive_client_key');
  $client_secret = variable_get('booklists_overdrive_client_secret');
  $auth_key = base64_encode($client_key . ':' . $client_secret);
  $booklists_overdrive_account_id_number = variable_get('booklists_overdrive_account_id_number');
  $building_token_cache = TRUE;
  $building_full_cache = TRUE;
  $token_expiration = strtotime('+10 minutes'); // Tokens expire from Overdrive after 10 minutes?

  // Since repeatedly getting a token and the URL can take a long time, let's use Drupal's cache table.
  $cached_token = cache_get('booklists-token', 'cache');
  $cached_token_type = cache_get('booklists-token-type', 'cache');
  $cached_url = cache_get('booklists-url', 'cache');
  if ($cached_token && $cached_token_type && $cached_url && strtotime('now') <= $cached_token->expire) { // Make sure the cached info exists and the token hasn't expired.
    $building_full_cache = FALSE; // We're cached & have the latest info.
    $building_token_cache = FALSE; // Token hasn't expired.
    $booklists_token = $cached_token->data;
    $booklists_token_type = $cached_token_type->data;
    $product_search_url = $cached_url->data;
  }
  elseif ($cached_token && $cached_token_type && $cached_url && strtotime('now') > $cached_token->expire) { // We've got everything, but the token has expired.
    $building_full_cache = FALSE; // We're cached & have the latest info.
    $building_token_cache = TRUE; // Token has expired.
    $booklists_token = '';
    $booklists_token_type = $cached_token_type->data;
    $product_search_url = $cached_url->data;
  }

  // Only need the token if we don't already have it in cache.
  if ($building_token_cache == TRUE || $building_full_cache == TRUE) {
    // ! 1. Token
    /**
     * 1. Ask Overdrive for a token.
     */
    $header[] = 'Content-Type: application/x-www-form-urlencoded;charset=UTF-8';
    $header[] = 'Authorization: Basic ' . $auth_key;
    $curl = curl_init('https://oauth.overdrive.com/token');
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($curl, CURLOPT_POST, 1);
    curl_setopt($curl, CURLOPT_POSTFIELDS, 'grant_type=client_credentials');
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
    $curl_response = curl_exec($curl);
    curl_close($curl);
    $json = json_decode($curl_response);
    $booklists_token = $json->access_token;
    $booklists_token_type = $json->token_type;

    cache_set('booklists-token', $booklists_token, 'cache', $token_expiration);
  }
  if ($building_full_cache == TRUE) {
    cache_set('booklists-token-type', $booklists_token_type, 'cache');

    // ! 2. Product Search URL
    /**
     * 2. Find the URL for the library's product search.
     *
     * GET /v1/libraries/1225 HTTP/1.1
     * Host: api.overdrive.com
     * Authorization: Bearer 2YotnFZFEjr1zCsicMWpAA
     * User-Agent: Richland Library Browser
     * X-Forwarded-For: (Client IP Address)
     */
    unset($header, $curl, $curl_response); // Empty out earlier vars.
    $header[] = 'Authorization: ' . $booklists_token_type . ' ' . $booklists_token;
    $header[] = 'User-Agent: ' . $site_name . ' Browser';
    $header[] = 'X-Forwarded-For: ' . $_SERVER['REMOTE_ADDR'];
    $curl = curl_init('https://api.overdrive.com/v1/libraries/' . $booklists_overdrive_account_id_number);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
    $curl_response = curl_exec($curl);
    curl_close($curl);
    $json2 = json_decode($curl_response);
    $product_search_url = $json2->links->products->href;

    cache_set('booklists-url', $product_search_url, 'cache');
  }

  // Loop through the list of ISBNs for this eBook. Let's try to build a direct link to one.
  foreach ($isbn_list as $isbn) {
    if (!empty($isbn)) {
      // ! 3. Search
      /**
       * 3. Now run a search for a title at that URL.
       *
       * URL needs to have the query appended like this:
       * http://api.overdrive.com/v1/collections/L2B2gAAAKoBAAA1B/products?q=The%20Adventures%20of%20Sherlock%20Holmes
       */
      unset($header, $curl, $curl_response, $url); // Empty out earlier vars.
      $header[] = 'Authorization: ' . $booklists_token_type . ' ' . $booklists_token;
      $header[] = 'User-Agent: ' . $site_name . ' Browser';
      $header[] = 'X-Forwarded-For: ' . $_SERVER['REMOTE_ADDR'];
      $curl = curl_init($product_search_url . '?limit=1&q=' . urlencode($isbn));
      curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
      curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
      curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
      $curl_response = curl_exec($curl);
      curl_close($curl);
      $json3 = json_decode($curl_response);
      //dsm($json3);
      if (is_array($json3->products) && count($json3->products) > 0) { // Make sure we actually got a result from our search.
        foreach ($json3->products as $product) {
          return $product->contentDetails[0]->href;
        }
      }
    }
  }
  return '';
}

/**
 * Search the catalog to see if any of an array of ISBNs exist in the catalog.
 *
 * Returns a string $isbn.
 */
function _booklists_check_catalog_isbn($isbn_list, $eBook = FALSE) {
  foreach ($isbn_list as $isbn) {
    if (!empty($isbn)) {
      $format = '';
      if ($eBook == TRUE) {
        $format = '&limit=TOM=ebk';
      }
      $result = PolarisAPI::searchBibs('q=' . $isbn . $format, 'keyword/ISBN'); // Get bib number for Polaris.
      $bib_no = $result->BibSearchRows[0]->ControlNumber;
      if (!empty($bib_no)) {
        // If you find it, stop the loop and use that ISBN number to create a direct link to the catalog record.
        return $isbn;
      }
    }
  }
  return FALSE; // None of the available ISBNs were found in the catalog.
}

/**
 * Search the catalog to see if a UPC exists in the catalog.
 *
 * Returns TRUE/FALSE.
 */
function _booklists_check_catalog_upc($upc) {
  $result = PolarisAPI::searchBibs('q=UPC=' . $code, 'boolean'); // Get bib number for Polaris.
  $bib_no = $result->BibSearchRows[0]->ControlNumber;
  if (!empty($bib_no)) {
    // If you find it, stop the loop and use that UPC number to create a direct link to the catalog record.
    return $upc;
  }
  return FALSE; // The UPC was not found in the catalog.
}

/**
 * Check a URL to see if it contains any data.
 */
function _booklists_check_url($url) {
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_NOBODY, true);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_HEADER, true);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); //not necessary unless the file redirects (like the PHP example we're using here)
  $data = curl_exec($ch);
  curl_close($ch);
  if ($data === FALSE) {
    return 0;
  }
  $contentLength = 0;
  if (preg_match('/Content-Length: (\d+)/', $data, $matches)) {
    $contentLength = (int)$matches[1];
  }
  return $contentLength;
}

/**
 * Function to get the Amazon UPC from an ASIN.
 */
function booklists_get_amazon_upc($code) {
  $amazon_info = amazon_item_lookup($code);
  // Find the item info from Amazon.
  $params = array(
    'ItemId' => $code,
    'IdType' => $type,
    'ResponseGroup' => 'Medium'
  );
  $results = amazon_http_request('ItemLookup', $params);
  if ($results->Items->Item->ItemAttributes->UPCList->UPCListElement) { // Amazon returning multiple UPCs to check.
    $upcs = (array) $results->Items->Item->ItemAttributes->UPCList;
    if (is_array($upcs['UPCListElement'])) {
      foreach ($upcs['UPCListElement'] as $key => $upc) {
        $found_in_catalog = _booklists_check_catalog_upc($upc); // Should return TRUE or FALSE.
        if ($found_in_catalog != FALSE) {
          continue;
        }
      }
    }
    else { // Only one UPC in the array.
      $upc = $upcs['UPCListElement'];
    }
  }
  else { // Only one UPC to check.
    $upc = (string) $results->Items->Item->ItemAttributes->UPC;
  }
  return $upc;
}

/**
 * Function to get the Amazon EAN from an ASIN.
 */
function booklists_get_amazon_ean($code) {
  $amazon_info = amazon_item_lookup($code);
  // Find the item info from Amazon.
  $params = array(
    'ItemId' => $code,
    'IdType' => $type,
    'ResponseGroup' => 'Medium'
  );
  $results = amazon_http_request('ItemLookup', $params);
  if ($results->Items->Item->ItemAttributes->EANList->EANListElement) { // Amazon returning multiple EANs to check.
    $eans = (array) $results->Items->Item->ItemAttributes->EANList;
    if (is_array($eans['EANListElement'])) {
      foreach ($eans['EANListElement'] as $key => $ean) {
        $found_in_catalog = _booklists_check_catalog_ean($ean); // Should return TRUE or FALSE.
        if ($found_in_catalog != FALSE) {
          continue;
        }
      }
    }
    else { // Only one EAN in the array.
      $ean = $eans['EANListElement'];
    }
  }
  else { // Only one EAN to check.
    $ean = (string) $results->Items->Item->ItemAttributes->EAN;
  }
  return $ean;
}

/**
 * Function to get the Amazon ISBN from an ASIN.
 */
function booklists_get_amazon_isbn($code) {
  $amazon_info = amazon_item_lookup($code);
  // Find the item info from Amazon.
  $params = array(
    'ItemId' => $code,
    'IdType' => $type,
    'ResponseGroup' => 'Medium'
  );
  $results = amazon_http_request('ItemLookup', $params);
  // Build the catalog link based on the type of ID we received. ASIN we convert to UPC, ISBN is good to go.
  if ($results->Items->Item->ItemAttributes->ISBNList->ISBNListElement) { // Amazon returning multiple ISBNs to check.
    $isbns = (array) $results->Items->Item->ItemAttributes->ISBNList;
    if (is_array($isbns['ISBNListElement'])) {
      foreach ($isbns['ISBNListElement'] as $key => $isbn) {
        $found_in_catalog = _booklists_check_catalog_isbn(array($isbn)); // Should return TRUE or FALSE.
        if ($found_in_catalog != FALSE) {
          continue;
        }
      }
    }
    else { // Only one ISBN in the array.
      $isbn = $isbns['ISBNListElement'];
    }
  }
  else { // Only one ISBN to check.
    $isbn = (string) $results->Items->Item->ItemAttributes->ISBN;
  }
  return $isbn;
}

/**
 * Correct case on an all-caps title from NYTimes. Snippet from comments on PHP.net
 */
function _booklists_title_case($title) {
  $smallwordsarray = array('of','a','the','and','an','or','nor','but','is','if','then', 'else','when','at','from','by','on','off','for','in','out','over','to','into','with');

  $words = explode(' ', $title);
  foreach ($words as $key => $word) {
    $word = strtolower($word);
    if ($key == 0 or !in_array($word, $smallwordsarray)) {
      $words[$key] = ucwords($word);
    }
    else {
      $words[$key] = $word;
    }
  }

  $newtitle = implode(' ', $words);
  return $newtitle;
}

/**
 * Function to build a catalog link based on whether or not the item was found in the catalog.
 */
function booklists_build_catalog_link($found_in_catalog = FALSE, $index = 'ISBNEX', $amazon_release_date = '') {
  $output = '';
  if ($found_in_catalog != FALSE) {
    $output .= CATALOG_URL . '&index=' . $index . '&term=' . $found_in_catalog; // Default to a basic catalog search.
  }
  else if (empty($amazon_release_date) || strtotime($amazon_release_date) > strtotime('now')) {
    $output .= '';
  }
  else {
    $output .= '/request-purchase';
  }
  return $output;
}

/**
 * Build the switcher dropdown code.
 */
function booklists_build_switcher() {
  $options = array(
    'Books' => 'nyt-block-1',
    'eBooks' => 'nyt-block-2',
    'Movies' => 'amazon-block-1',
    'Music' => 'amazon-block-2',
    'Audiobooks' => 'amazon-block-3'
  );
  $switcher = '<div class="booklists-option">';
  if (is_array($options)) {
    $switcher .= '<select class="switcher">';
    foreach ($options as $name => $value) {
      $switcher .= '<option value="' . $value . '">' . $name . '</option>';
    }
    $switcher .= '</select>';
  }
  $switcher .= '</div>';

  return $switcher;
}

/**
 * Function to build a block in the "filters" sidebar of bento boxes on the polaris listing pages (New Arrivals, Coming Soon, etc.)
 */
function booklists_polaris_switcher() {
  $query_params = drupal_get_query_parameters();
  // Start at page 1 when the user switches to a different type.
  unset($query_params['page']);
  $links = array();
  $lists = array(
    'booklists/catalog/new-arrivals' => 'New Arrivals',
    'booklists/catalog/most-popular' => 'Most Popular',
    'booklists/catalog/coming-soon' => 'Coming Soon',
    'booklists/catalog/just-checked-in' => 'Just Checked In',
  );
  $current_path = current_path();
  foreach ($lists as $key => $list_name) {
    if ($key == $current_path) {
      $links[] = $list_name;
    }
    else {
      $class = str_replace('catalog/booklists/', '', $key);
      $options = array(
        'attributes' => array(
          'class' => array('bb-facet-inactive', $class),
        ),
        'query' => $query_params,
        'html' => TRUE,
      );

      $links[] = l($list_name, $key, $options);
    }
  }

  return theme('item_list', array('items' => $links));
}

/**
 * Function to build a block in the "filters" sidebar of bento boxes on the polaris listing pages (New Arrivals, Coming Soon, etc.)
 */
function booklists_polaris_list_types() {
  return drupal_get_form('booklists_polaris_list_types_form');
}

/**
 * Corresponding form function called above.
 */
function booklists_polaris_list_types_form($form, $form_state) {
  $query_params = drupal_get_query_parameters();
  $links = array();
  $types = array(
    'fiction' => 'Fiction',
    'nonfiction' => 'Non-fiction',
    'audiobooks' => 'Audiobooks',
    'audiobooks_cd' => 'On CD',
    'audiobooks_downloadable' => 'Downloadable',
    'audiobooks_playaway' => 'Playaway',
    'books' => 'Books',
    'large_print' => 'Large Print',
    'regular_print' => 'Regular Print',
    'ebooks' => 'eBooks',
    'movies' => 'Movies',
    'dvds' => 'DVDs',
    'blu_ray' => 'Blu-Ray',
    'music' => 'Music',
    'videogames' => 'Video Games',
    'adults' => 'Adults',
    'childrens' => 'Children\'s',
    'teens' => 'Teens',
  );

  $list_types_selected = $query_params['list_type'];
  $form = array();
  foreach ($types as $key => $type_name) {
    // Should the checkbox be checked initially? Did they already check the box?
    if (is_array($list_types_selected) && in_array($key, $list_types_selected)) {
      $default_value = 1;
    }
    else { // The box wasn't checked by the user previously.
      $default_value = 0;
    }

    $form['list_type'][$key] = array(
      '#type' => 'checkbox',
      '#default_value' => $default_value,
      '#title' => $type_name,
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#attributes' => array(
      'class' => array(
        'library_button',
      ),
      'style' => 'margin-top: 10px;',
    ),
  );
  return $form;
}

/**
 * Form submit function that handles the redirect based on selected filters.
 */
function booklists_polaris_list_types_form_submit($form, $form_state) {

  $page_to_link_to = current_path();
  $query_params = drupal_get_query_parameters();
  $list_types_selected = array();
  // Rebuild the list types based on form-submitted values and... Start at page 1 when the user switches to a different type.
  unset($query_params['list_type'], $query_params['page']);

  $unused_values = array('submit', 'form_build_id', 'form_build_id', 'form_token', 'form_id', 'op');
  $counter = 0;
  foreach($form_state['values'] as $list_type => $value) {
    if (!in_array($list_type, $unused_values) && $value == 1) {
      $query_params['list_type[' . $counter . ']'] = $list_type;
      $counter++;
      $list_types_selected[] = $list_type;
    }
  }

  // Auto-select sub-items onto primary items.
  foreach($form_state['values'] as $list_type => $value) {
    if ($list_type == 'audiobooks') { // AUDIOBOOKS
      if ($value == 1) { // Initially selected when page loads.
        if (!in_array('audiobooks_cd', $list_types_selected) && !in_array('audiobooks_downloadable', $list_types_selected) && !in_array('audiobooks_playaway', $list_types_selected)) {
          $query_params['list_type[' . $counter . ']'] = 'audiobooks_cd';
          $counter++;
          $query_params['list_type[' . $counter . ']'] = 'audiobooks_downloadable';
          $counter++;
          $query_params['list_type[' . $counter . ']'] = 'audiobooks_playaway';
          $counter++;
        }
      }
    }
    if ($list_type == 'books') { // BOOKS
      if ($value == 1) { // Initially selected when page loads.
        if (!in_array('large_print', $list_types_selected) && !in_array('regular_print', $list_types_selected)) {
          $query_params['list_type[' . $counter . ']'] = 'large_print';
          $counter++;
          $query_params['list_type[' . $counter . ']'] = 'regular_print';
          $counter++;
        }
      }
    }
    if ($list_type == 'movies') { // MOVIES
      if ($value == 1) { // Initially selected when page loads.
        if (!in_array('dvds', $list_types_selected) && !in_array('blu_ray', $list_types_selected)) {
          $query_params['list_type[' . $counter . ']'] = 'dvds';
          $counter++;
          $query_params['list_type[' . $counter . ']'] = 'blu_ray';
          $counter++;
        }
      }
    }
    // End looking for sub-items of Audiobooks, Books, and Movies
  }

  drupal_goto($page_to_link_to, array('query' => $query_params));
}

/**
 * Function to build a block in the "filters" sidebar of bento boxes on the polaris availability of items.
 */
function booklists_polaris_availability() {
  return drupal_get_form('booklists_polaris_availability_form');
}

/**
 * Corresponding form function called above.
 */
function booklists_polaris_availability_form($form, $form_state) {
  $query_params = drupal_get_query_parameters();
  $page_to_link_to = current_path();
  if (isset($query_params['available_only'])) {
    $default_value = 1;
    unset($query_params['available_only']);
  }
  else {
    $default_value = 0;
    $query_params['available_only'] = TRUE;
  }
  $link_for_form = l('Test', $page_to_link_to, array('query' => $query_params, 'html' => TRUE));
  preg_match('/href="([^"]*)/', $link_for_form, $matches);
  $stripped_link = str_replace('&amp;', '&', $matches[1]);
  $form = array();
  $form['available_only'] = array(
    '#type' => 'checkbox',
    '#attributes' => array('onClick' => "javascript:window.location.href='" . $stripped_link . "'"),
    '#default_value' => $default_value,
    '#title' => t('Available items only'),
    '#id' => 'available-only-checkbox',
  );
  return $form;
}
