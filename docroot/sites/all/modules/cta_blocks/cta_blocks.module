<?php

/**
 * @file
 * Call to Action Blocks module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function cta_blocks_ctools_plugin_api($owner, $api) {
  if ($owner == 'cta_blocks' && $api == 'default_cta_blocks') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function cta_blocks_menu() {
  $items = array();

  $items['admin/structure/block/cta-blocks'] = array(
    'title'            => 'CTA Blocks',
    'page callback'    => 'cta_blocks_admin_list',
    'access arguments' => array('administer blocks'),
    'type'             => MENU_LOCAL_ACTION,
    'file'             => 'cta_blocks.admin.inc',
  );

  $items['admin/structure/block/cta-blocks/add'] = array(
    'title'            => 'Add CTA Block',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('cta_blocks_admin_block'),
    'access arguments' => array('administer blocks'),
    'type'             => MENU_LOCAL_ACTION,
    'file'             => 'cta_blocks.admin.inc',
  );

  $items['admin/structure/block/cta-blocks/import'] = array(
    'title'            => 'Import CTA Block',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('cta_blocks_admin_block_import'),
    'access arguments' => array('administer blocks'),
    'type'             => MENU_LOCAL_ACTION,
    'file'             => 'cta_blocks.admin.inc',
  );

  $items['admin/structure/block/cta-blocks/edit/%cta_blocks_cta_block'] = array(
    'title'            => 'Edit CTA Block',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('cta_blocks_admin_block', 5),
    'access arguments' => array('administer blocks'),
    'type'             => MENU_CALLBACK,
    'file'             => 'cta_blocks.admin.inc',
  );

  $items['admin/structure/block/cta-blocks/delete/%cta_blocks_cta_block'] = array(
    'title'            => 'Delete CTA Block',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('cta_blocks_admin_block_delete', 5),
    'access arguments' => array('administer blocks'),
    'type'             => MENU_CALLBACK,
    'file'             => 'cta_blocks.admin.inc',
  );

  $items['admin/structure/block/cta-blocks/export/%cta_blocks_cta_block'] = array(
    'title'            => 'Export CTA Block',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('cta_blocks_admin_block_export', 5),
    'access arguments' => array('administer blocks'),
    'type'             => MENU_CALLBACK,
    'file'             => 'cta_blocks.admin.inc',
  );

  return $items;
}

/**
 * Load one CTA Block or all CTA Blocks.
 *
 * @param string $machine_name
 *   This cta_block's machine_name value. Optional.
 *
 * @return array
 *   If machine_name is specified, an array of configuration for that CTA block.
 *   If not, a nested array of config for all CTA blocks.
 */
function cta_blocks_cta_block_load($machine_name = NULL) {
  ctools_include('export');
  if ($machine_name) {
    $cta_blocks = ctools_export_load_object('cta_blocks', 'names', array($machine_name));
    return isset($cta_blocks[$machine_name]) ? $cta_blocks[$machine_name] : FALSE;
  }
  else {
    return ctools_export_load_object('cta_blocks');
  }
}

/**
 * Delete a CTA Block.
 *
 * @param mixed $cta_block
 *   A CTA Block object, or its machine name.
 */
function cta_blocks_cta_block_delete($cta_block) {
  $machine_name = is_object($cta_block) ? $cta_block->machine_name : $cta_block;

  db_delete('cta_blocks')
    ->condition('machine_name', $machine_name)
    ->execute();

  // If this is a 'normal' cta block, also remove it from the block table.
  if (is_object($cta_block) && $cta_block->export_type == 1) {
    db_delete('block')
      ->condition('delta', 'cta-' . $machine_name)
      ->execute();
  }

  ctools_include('export');
  ctools_export_load_object_reset('cta_blocks');
}

/**
 * Implements hook_theme().
 */
function cta_blocks_theme($existing, $type, $theme, $path) {
  return array(
    'cta_block' => array(
      'path'      => drupal_get_path('module', 'cta_blocks') . '/template',
      'template'  => 'cta-block',
      'variables' => array(
        'title'        => NULL,
        'subtitle'     => NULL,
        'link'         => NULL,
        'machine_name' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_cta_block().
 */
function cta_blocks_preprocess_cta_block(&$variables) {
  $variables['theme_hook_suggestions'][] = $variables['theme_hook_original'] . '__' . $variables['machine_name'];
}

/**
 * Implements hook_block_info().
 */
function cta_blocks_block_info() {
  $blocks = array();
  $cta_blocks = cta_blocks_cta_block_load();
  foreach ($cta_blocks as $key => $block) {
    $blocks['cta-' . $block->machine_name] = array(
      'info'  => t('CTA Block') . ': ' . check_plain($block->name),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cta_blocks_block_view($delta = '') {
  $block = array();
  $delta = explode('-', $delta);
  if ($cta_block = cta_blocks_cta_block_load($delta[1])) {
    $settings = block_load('cta_blocks', implode('-', $delta));

    $block['subject'] = isset($settings->title) ? $settings->title : '';
    $block['content'] = theme(
      'cta_block',
      array(
        'machine_name' => str_replace('_', '-', $cta_block->machine_name),
        'title'        => check_plain($cta_block->title),
        'subtitle'     => check_plain($cta_block->subtitle),
        'link'         => $cta_block->link,
      )
    );
  }

  return $block;
}
