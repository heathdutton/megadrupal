<?php

/**
 * @file
 * Hook implementations, and API functions for Nuke Drupal Frontend module.
 */

/**
 * Implements hook_menu_alter().
 */
function ndf_menu_alter(&$items) {
  // Separate with \n for drupal_match_path().
  $allowed_paths = implode(PHP_EOL, module_invoke_all('ndf_allowed_paths'));
  $disallowed_paths = implode(PHP_EOL, module_invoke_all('ndf_disallowed_paths'));

  // Match each menu item path.
  foreach (array_keys($items) as $path) {
    // Don't bother converting to lowercase, since we're comparing a white list
    // of internal path patterns to those set by hook_menu().
    if (!drupal_match_path($path, $allowed_paths) || drupal_match_path($path, $disallowed_paths)) {
      $items[$path]['access callback'] = FALSE;
    }
  }

  // Redirects from frontend entity to edit form. This is so we don't have to
  // modify every Drupal admin form that links to a frontend display - such as
  // node_admin_content() - and also so we don't need to explicitly white list
  // every entity path but their frontend URI callback paths.
  $entity_items = module_invoke_all('ndf_entity_remap');
  foreach ($entity_items as $entity_type => $item) {
    // Support Drupal's MENU_DEFAULT_LOCAL_TASK behavior.
    if (isset($item['tab_root'])) {
      // In this case we want to disable access to the entity view tab.
      $items[$item['path']]['access callback'] = FALSE;
      // We then want to redirect from the parent tab to the edit path.
      $items[$item['tab_root']]['page callback'] = 'ndf_entity_goto';
      $items[$item['tab_root']]['page arguments'] = array($item['position'], $entity_type, $item['redirect']);
    }
  }
}

/**
 * Implements hook_ndf_entity_remap().
 */
function ndf_ndf_entity_remap() {
  return array(
    'node' => array(
      'path' => 'node/%node/view',
      'tab_root' => 'node/%node',
      'position' => 1,
      'redirect' => 'node/%/edit',
    ),
    'file' => array(
      'path' => 'file/%file/view',
      'tab_root' => 'file/%file',
      'position' => 1,
      'redirect' => 'file/%/edit',
    ),
    'taxonomy_term' => array(
      'path' => 'taxonomy/term/%taxonomy_term/view',
      'tab_root' => 'taxonomy/term/%taxonomy_term',
      'position' => 2,
      'redirect' => 'taxonomy/term/%/edit',
    ),
  );
}

/**
 * Menu callback: Redirects an entity view page to another page.
 *
 * @param object $entity
 *   The loaded entity.
 * @param string $entity_type
 *   The entity type.
 * @param string $redirect_pattern
 *   A string representing the redirect path pattern. May include tokens:
 *   - %: The entity ID.
 *   The reason for this is in Drupal 7 there no generic edit uri, equivalent to
 *   the display 'uri callback' in hook_entity_info().
 */
function ndf_entity_goto($entity, $entity_type, $redirect_pattern) {
  list($id, $rid, $bundle) = entity_extract_ids($entity_type, $entity);
  $path = str_replace('%', $id, $redirect_pattern);

  if (!isset($path)) {
    $path = variable_get('site_frontpage');

    // Give admins a friendly message, explaining what happened. Anyone else
    // should 403 anyway.
    if (user_access('access administration pages')) {
      drupal_set_message(t('There is no support for viewing this entity.'));
    }
  }

  // Before redirecting, ensure this will not break cron.
  // See @link https://drupal.org/node/102138 Drupal.org issue. @endlink
  if (php_sapi_name() == 'cli' || preg_match('/\/cron.php$/', $_SERVER['SCRIPT_NAME']) || current_path() == 'admin/reports/status/run-cron') {
    return;
  }

  drupal_goto($path);
}

/**
 * Implements hook_boot().
 */
function ndf_boot() {
  // Change variables here rather than on hook_install(), hook_uninstall(),
  // hook_enable(), and hook_disable().
  global $conf;
  drupal_load('module', 'user');
  $conf['site_frontpage'] = user_access('access administration pages') ? 'admin' : 'user';
}

/**
 * Implements hook_page_delivery_callback_alter().
 *
 * Sets breadcrumb for entities to match their administrative parent.
 *
 * Note we aren't setting the parent menu item active trail because we want to
 * retain the entity tabs.
 *
 * @see menu_trail_by_path_page_delivery_callback_alter()
 */
function ndf_page_delivery_callback_alter() {
  // Include hook implementations on behalf of core entities.
  include_once('ndf.breadcrumb.inc');

  foreach(module_invoke_all('ndf_entity_remap') as $entity_type => $entity_remap) {
    if (isset($entity_remap['position']) && $entity = menu_get_object($entity_type, $entity_remap['position'])) {
      if ($breadcrumb_paths = module_invoke_all('ndf_' . $entity_type . '_breadcrumb_path', $entity)) {
        // We can only use one.
        // @todo convert this from hook to callback signature.
        $breadcrumb_path = reset($breadcrumb_paths);
      }
    }
  }

  // Only act if we have a defined parent path.
  if (!isset($breadcrumb_path)) {
    return;
  }

  $pieces = explode('/', $breadcrumb_path);
  $path = '';
  $parent_candidates = array();
  foreach ($pieces as $piece) {
    $path .= $piece . '/';
    $parent_candidates[] = drupal_get_normal_path(rtrim($path, '/'));
  }

  // Find link items matching the parent candidates in all menus.
  $matched_menus = array();
  $matched_link_titles = array();
  $results = db_select('menu_links','ml')
    ->fields('ml',array('menu_name','mlid','link_path','link_title','depth'))
    ->condition('link_path',$parent_candidates,'IN')
    ->execute();

  foreach ($results as $record) {
    // If there is more than one matched link in a menu, use the deepest.
    if (!isset($matched_menus[$record->menu_name]) || $record->depth > $matched_menus[$record->menu_name]['depth']) {
      $matched_menus[$record->menu_name]['link_path'] = $record->link_path;
      $matched_menus[$record->menu_name]['depth'] = $record->depth;
    }

    // Get the Link Title if it can be found in a menu item.
    if ($record->link_title && !isset($matched_link_titles[$record->link_path])) {
      $matched_link_titles[$record->link_path] = $record->link_title;
    }
  }

  // Set the active-trail for each menu containing one of the candidates.
  foreach ($matched_menus as $menu_name => $menu_link) {
    menu_tree_set_path($menu_name, $menu_link['link_path']);
  }

  // Also set breadcrumb according to path URL as well.
  if (variable_get('menu_trail_by_path_breadcrumb_handling', TRUE)) {
    // First breadcrumbs is always Home.
    $breadcrumbs[] = l(t('Home'),'<front>');

    foreach($parent_candidates as $link_path) {
      // If title of the page is found on a menu item, use it.
      if (isset($matched_link_titles[$link_path])) {
        $breadcrumbs[] = l($matched_link_titles[$link_path],$link_path);
      }
      // Otherwise, use slow method to find out the title of page.
      elseif ($menu_item = menu_get_item($link_path)) {
        $breadcrumbs[] = l($menu_item['title'],$link_path);
      }
    }
    drupal_set_breadcrumb($breadcrumbs);
  }
}

/**
 * Implements hook_ndf_allowed_paths().
 */
function ndf_ndf_allowed_paths() {
  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  return array(
    // Base core admin paths.
    'admin',
    'admin/compact',
    'admin/tasks',
    'admin/index',
    // Applicable core admin sections.
    'admin/content*',
    'admin/structure*',
    'admin/people*',
    'admin/modules*',
    'admin/config*',
    'admin/reports*',
    'user*',
    'system*',
    // Allow all JS paths for now.
    'js*',
    // For fun, support contrib admin_menu.module paths.
    'admin_menu*',

    // Entity paths.
    'node*',
    'taxonomy*',
    // File (core) and File entity contrib module.
    'file*',
    // Include public files directory path.
    $directory_path . '*',
  );
}

/**
 * Implements hook_ndf_disallowed_paths().
 */
function ndf_ndf_disallowed_paths() {
  return array(
    'admin/config/services/rss-publishing',
    'admin/config/content/formats',
  );
}

/**
 * Defines a default black list of frontend modules to be disabled on install.
 *
 * This can be overridden by the Drupal variable 'ndf_disable_module_list'.
 *
 * @return array
 *   A list of additional module names to be disabled.
 *
 * @see ndf_install()
 */
function ndf_disable_module_list() {
  // List core modules that are safe to disable.
  return array(
    'aggregator',
    'blog',
    'block',
    'color',
    'comment',
    'contact',
    'contextual',
    // Investigate why we can't disable this (apart from required = TRUE).
    //'filter',
    'forum',
    'help',
    'menu',
    'overlay',
    'path',
    // Just because it's evil.
    'php',
    'poll',
    'profile',
    'rdf',
    // The administrative use-case for this is handled by good admin screens.
    'search',
    'shortcut',
    'tracker',
  );
}
