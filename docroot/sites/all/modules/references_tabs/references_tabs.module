<?php

define('REFERENCES_TABS_TYPE_NONE', 0);
define('REFERENCES_TABS_TYPE_HORIZONTAL', 1);
define('REFERENCES_TABS_TYPE_VERTICAL', 2);

define('REFERENCES_TABS_TITLE_NODETITLE', 'node-title');

/**
 * Implementation of hook_views_api
 */
function references_tabs_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function references_tabs_field_formatter_info_alter(&$info) {
  // Add a setting to a formatter type.
  $info['node_reference_node']['settings'] += array(
    'references_tabs_type' => REFERENCES_TABS_TYPE_NONE,
    'references_tabs_title' => REFERENCES_TABS_TITLE_NODETITLE,
  );
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function references_tabs_field_formatter_settings_form_alter(array &$settings_form, array $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Only build this information for node_reference_node displays
  if ($display['type'] !== 'node_reference_node') {
    return NULL;
  }

  $type_options = array();
  $type_options[REFERENCES_TABS_TYPE_HORIZONTAL] = t('Horizontal');
  $type_options[REFERENCES_TABS_TYPE_VERTICAL] = t('Vertical');

  $settings_form['references_tabs_type'] = array(
    '#title'   => t('Tabs'),
    '#type'    => 'select',
    '#options' => $type_options,
    '#default_value' => $settings['references_tabs_type'],
    '#empty_value' => REFERENCES_TABS_TYPE_NONE,
  );

  $settings_form['references_tabs_title'] = array(
    '#title'   => t('Tab title'),
    '#type'    => 'select',
    '#options' => references_tabs_tab_title_options($context['field']['settings']['referenceable_types']),
    '#default_value' => $settings['references_tabs_title'],
  );
}

/**
 * Returns a list of fields that can be used for the tab title. The return
 * value contains the 'Node Title' and all fields which appear in at least
 * one of the given bundles.
 */
function references_tabs_tab_title_options($bundle_names) {
  $title_options = array();
  $title_options[REFERENCES_TABS_TITLE_NODETITLE] = t('Node: title');

  foreach ($bundle_names as $bundle) {
    $fields = field_info_instances('node', $bundle);
    foreach ($fields as $key => $field) {
      $title_options[$key] = t('Field: @field', array('@field' => $field['field_name']));
    }
  }
  return $title_options;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function references_tabs_field_formatter_settings_summary_alter(&$summary, array $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Only build this information for node_reference_node displays
  if ($display['type'] !== 'node_reference_node') {
    return NULL;
  }

  if (!empty($summary)) {
    $summary .= '<br />';
  }
  if (!empty($settings['references_tabs_type'])) {
    if ($settings['references_tabs_type'] == REFERENCES_TABS_TYPE_HORIZONTAL) {
      $summary .= t('Tabs: <em>Horizontal</em>');
    }
    elseif ($settings['references_tabs_type'] == REFERENCES_TABS_TYPE_VERTICAL) {
      $summary .= t('Tabs: <em>Vertical</em>');
    }
    if (!empty($settings['references_tabs_title'])) {
      $title_options = references_tabs_tab_title_options($context['field']['settings']['referenceable_types']);
      $summary .= '<br />';
      $summary .= t('Tab title: <em>@title</em>', array('@title' => $title_options[$settings['references_tabs_title']]));
    }
  }
  else {
    $summary .= t('Tabs: <em>None</em>');
  }
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Takes care of creating tabs for referenced nodes, if enabled.
 */
function references_tabs_field_attach_view_alter(&$output, $context) {

  foreach (element_children($output) as $field_name) {
    $element = $output[$field_name];
    $view_mode = $context['view_mode'];

    // Only work on node_reference fields with the node_reference_node formatter
    if ($element['#field_type'] == 'node_reference' && $element['#formatter'] == 'node_reference_node') {
      $type = FALSE;
      
      $field_info = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);

      // if view mode is not configured, fallback to default
      if (!isset($field_info['display'][$view_mode])) {
        $view_mode = 'default';
      }

      if (isset($field_info['display'][$view_mode])) {
        $formatter_settings = $field_info['display'][$view_mode]['settings'];
        $types_map = array(
          REFERENCES_TABS_TYPE_NONE => FALSE,
          REFERENCES_TABS_TYPE_VERTICAL => 'vertical_tabs',
          REFERENCES_TABS_TYPE_HORIZONTAL => 'horizontal_tabs',
        );
        $type = $types_map[$formatter_settings['references_tabs_type']];
      }

      // Don't create tabs if type has not been set.
      if (!$type) break;

      // Create tab container
      $tabs = array( '#type' => $type, '#weight' => $element['#weight'] );

      // Horizontal tabs require the drupal.form library, or tabs will not
      // be built properly because of javascript errors (undefined
      // callback $.fn.drupalGetSummary). This should probably be fixed in the
      // module providing horizontal_tabs (i.e. field_group or elements).
      $tabs['#attached']['library'][] = array('system', 'drupal.form');
      
      // Defaults for a tab fieldset
      $tabdefault = array(
        '#type' => 'fieldset',
        '#group' => $field_name,
        '#collapsed' => FALSE,
        '#collapsible' => TRUE,
      );

      // Build fieldsets (=tabs) for each referenced node
      foreach ($element['#items'] as $delta => $item) {
        // Only render nodes which the user is allowed to access.
        if ($item['access']) {

          // create fieldset
          $tab_id = 'references_tabs_' . $field_name . '_tab' . $delta;
          $tab = array('#id' => $tab_id) + $tabdefault;

          $tab_title_field = $formatter_settings['references_tabs_title'];
          if ($tab_title_field != REFERENCES_TABS_TITLE_NODETITLE) {
            $field = field_get_items('node', $item['node'], $tab_title_field);
            if ($field) {
              $field_value = field_view_value('node', $item['node'], $tab_title_field, $field[0]);
              $tab['#title'] = render($field_value);
            }
          }

          // use node title if tab title is not set yet
          if (empty($tab['#title'])) {
            $tab['#title'] = $item['node']->title;
          }

          // attach (rendered) node as tab child
          $tab[] = $element[$delta];

          // attach tab to tabs container
          $tabs[] = $tab;
        }
        else {
          // @todo: display inaccessible nodes as links (?)
        }
      }
      $output[$field_name] = $tabs;
    }
  }
}
