<?php

/**
 * @file
 * Defines a balance deposit line item.
 */

/**
 * Implements hook_menu().
 */
function commerce_account_balance_menu() {
  $items = array();

  // Note: "My transactions" page is defined by a default View that creates
  // a secondary tab at 'user/%user/balance/transactions'

  $items['user/%user/balance'] = array(
    'title' => 'My account balance',
    'description' => 'Consult account balance and deposit money',
    'page callback' => 'commerce_account_balance_deposit_form_wrapper',
    'page arguments' => array(1),
    'access arguments' => array('deposit to own account'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_account_balance.pages.inc',
  );

  $items['user/%user/balance/deposit'] = array(
    'title' => 'Deposit cash',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['purchase/%ctools_js/%/%/%/%/%'] = array(
    'title' => 'purchase',
    'page callback' => 'commerce_account_balance_purchase_confirmation',
    'page arguments' => array(1, 2, 3, 4, 5, 6),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_account_balance.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 *
 * Creates a transaction entity. This entity shows all the purchases
 * and deposits done on the website.
 */
function commerce_account_balance_entity_info() {
  $return = array(
    'commerce_account_balance_transaction' => array(
      'label' => t('Commerce Account Balance Transaction'),
      'label plural' => t('Account balance transactions'),
      'base table' => 'commerce_account_balance_transaction',
      'controller class' => 'EntityAPIController',
      'entity class' => 'Entity',
      'module' => 'commerce_account_balance',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'transaction_id',
      ),
      'static cache' => FALSE,
    ),
  );
  return $return;
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * We use the hook_entity_property_info_alter hook because the Entity API
 * already defines a lot of our properties and we just want to tweak them
 * a little bit.
 */
function commerce_account_balance_entity_property_info_alter(&$info) {
  $properties = array(
    'transaction_id' => array(
      'label' => t("Unique transaction ID"),
      'description' => t('Unique transaction ID.'),
      'schema feld' => 'transaction_id',
    ),
    'order_id' => array(
      'label' => t("Order ID"),
      'description' => t('The order ID this transaction belongs to.'),
      'type' => 'commerce_order',
      'setter callback' => 'entity_property_verbatim_set',
      'schema feld' => 'order_id',
    ),
    'action' => array(
      'label' => t("Transaction action"),
      'description' => t('Description of the action of the transaction.'),
      'setter callback' => 'entity_property_verbatim_set',
      'schema feld' => 'action',
    ),
    'amount' => array(
      'label' => t("Transaction amount"),
      'description' => t('Description of the action of the transaction.'),
      'setter callback' => 'entity_property_verbatim_set',
      'schema feld' => 'amount',
    ),
    'amount_formatted' => array(
      'label' => t('Transaction amount (formatted)'),
      'description' => t('Amount formatted with the right currency'),
      'computed' => TRUE,
      'entity views field' => TRUE,
      'getter callback' => '_commerce_account_balance_integer_to_amount',
    ),
    'type' => array(
      'label' => t("Transaction type"),
      'description' => t('Transaction type: deposit, purchase or redemption.'),
      'options list' => '_commerce_account_balance_transaction_type_list',
      'setter callback' => 'entity_property_verbatim_set',
      'schema feld' => 'type',
    ),
    'time' => array(
      'type' => 'date',
      'label' => t("Time"),
      'description' => t('Time of the transaction'),
      'setter callback' => 'entity_property_verbatim_set',
      'schema feld' => 'time',
    ),
    'uid' => array(
      'type' => 'user',
      'label' => t('User'),
      'description' => t('The user this transaction belongs to'),
      'setter callback' => 'entity_property_verbatim_set',
      'schema feld' => 'uid',
    ),
  );
  $info['commerce_account_balance_transaction']['properties'] = array_replace_recursive($info['commerce_account_balance_transaction']['properties'], $properties);

  // Add a computed property to the user that gives us the balance in Views.
  $info['user']['properties']['account_balance'] = array(
    'label' => t('Account balance'),
    'description' => t("The users' ccount balance"),
    'computed' => TRUE,
    'entity views field' => TRUE,
    'getter callback' => '_commerce_account_balance_get_balance',
  );

  // Add tokens through Entity API.

  $info['commerce_order']['properties']['balance_current'] = array(
    'label' => t('Current balance'),
    'description' => t("The users' account balance before completing the order"),
    'computed' => TRUE,
    'getter callback' => '_commerce_account_balance_order_current_balance',
  );
  $info['commerce_order']['properties']['balance_updated'] = array(
    'label' => t('Updated balance'),
    'description' => t("The users' account balance as it would be after depositing money."),
    'computed' => TRUE,
    'getter callback' => '_commerce_account_balance_order_updated_balance',
  );
  $info['commerce_order']['properties']['deposit'] = array(
    'label' => t('Deposit'),
    'description' => t("The deposit belonging to this order."),
    'computed' => TRUE,
    'getter callback' => '_commerce_account_balance_order_deposit',
  );
}

/**
 * Implements hook_permission().
 */
function commerce_account_balance_permission() {
  return array(
    'view own transactions' => array(
      'title' => t('View own transactions'),
      'description' => t('Acccess overview and details of transactions made'),
    ),
    'view all transactions' => array(
      'title' => t('View any transactions'),
    ),
    'deposit to own account' => array(
      'title' => t('Deposit to own account'),
      'description' => t('Deposit money to own user account'),
    ),
    'deposit to any account' => array(
      'title' => t('Deposit money to any user account'),
      'description' => t('Deposit money to any user account'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function commerce_account_balance_block_info() {
  $blocks['commerce_balance'] = array(
    'info' => t('Account Balance'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commerce_account_balance_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'commerce_balance':
      $account = $GLOBALS['user'];
      if ($account->uid != 0) {
        $balance = _commerce_account_balance_get_balance($account);
        $block['subject'] = t('My account balance');
        $block['content'] = l(t('@balance', array('@balance' => $balance)), 'user/' . $account->uid . '/balance', array('attributes' => array('title' => t('Check my transactions'))));
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_account_balance_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    case 'user/%/balance/transactions':
      $account = $GLOBALS['user'];
      $item = menu_get_item('user/' . $account->uid . '/balance/deposit');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

/**
 * Implements hook_field_info().
 */
function commerce_account_balance_field_info() {
  return array(
    'commerce_purchase' => array(
      'label' => t('Purchase'),
      'description' => t('This fields stores a purchase button to any entity.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'commerce_account_balance_purchase_widget',
      'default_formatter' => 'commerce_account_balance_purchase_formatter',
      'property_type' => 'commerce_purchase',
      'property_callbacks' => array('commerce_account_balance_property_info_callback'),
    ),
  );
}

/**
 * Callback to enable this field as a property for the entity wrapper.
 */
function commerce_account_balance_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);
  $property['property info'] = array(
    'amount' => array(
      'type' => 'integer',
      'label' => t('Amount'),
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'rules_config' => array(
      'type' => 'rules_config',
      'label' => t('Rules Config ID'),
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_account_balance_field_formatter_info() {
  return array(
    'commerce_account_balance_purchase_formatter' => array(
      'label' => t('Purchase button'),
      'field types' => array('commerce_purchase'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_account_balance_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'commerce_account_balance_purchase_formatter':
      foreach ($items as $delta => $item) {
        $currency = commerce_currency_load();
        $amount = commerce_currency_format($item['amount'], $currency['code']);
        $field_name = $instance['field_name'];
        $entity_type = $instance['entity_type'];
        $bundle = $instance['bundle'];
        $entity_id_array = entity_extract_ids($entity_type, $entity);
        $entity_id = array_shift($entity_id_array);

        ctools_include('ajax');
        ctools_include('modal');
        ctools_modal_add_js();

        $element[$delta] = array(
          '#theme' => 'link',
          '#path' => 'purchase/nojs/' . $field_name . '/' . $delta . '/' . $entity_type . '/' . $bundle . '/' . $entity_id,
          '#text' => t("Purchase for @amount", array('@amount' => $amount)),
          '#options' => array(
            'attributes' => array(
              'class' => array('use-ajax', 'ctools-use-modal'),
            ),
            'html' => TRUE,
          ),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_account_balance_field_widget_info() {
  return array(
    'commerce_account_balance_purchase_widget' => array(
      'label' => t('Purchase widget'),
      'field types' => array('commerce_purchase'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_account_balance_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $rules_config_entities = rules_config_load_multiple(FALSE);
  $elegible_rule_configs = array();
  $entity_type = $instance['entity_type'];

  foreach ($rules_config_entities as $rule) {

    // It doens't matter if the user or the entity
    // is the first or second parameter.
    $parameter_info = array_values($rule->parameterInfo());
    if ($parameter_info[0]['type'] == $entity_type && $parameter_info[1]['type'] == "user") {
      $elegible_rule_configs[$rule->id] = $rule->label;
    }
    if (isset($parameter_info[1]) && $parameter_info[1]['type'] == $entity_type && $parameter_info[0]['type'] == "user") {
      $elegible_rule_configs[$rule->id] = $rule->label;
    }
  }

  if (empty($elegible_rule_configs)) {
    drupal_set_message(t('There are no <em>Rules Action Sets</em> available
       for this entity type.<br /> Create a Action Set to be executed upon purchase
       and make sure it has the %entity_type and the
       <em>user</em> as parameters.', array('%entity_type' => $entity_type)));
  }
  $currency = commerce_currency_load();

  $form_state['currency_code'] = $currency['code'];
  $element += array(
    '#type' => 'fieldset',
    '#element_validate' => array('commerce_account_balance_purchase_widget_validate'),
    'amount' => array(
      '#type' => 'textfield',
      '#title' => t('Price in @currency', array('@currency' => $currency['code'])),
      '#default_value' => isset($items[$delta]['amount']) ? commerce_currency_amount_to_decimal($items[$delta]['amount'], $currency['code']) : '',
    ),
    'rules_config' => array(
      '#title' => t('Rules Action Set'),
      '#description' => t('A Rules Action Set to be executed upon purchase. The Action set has to hold two parameters: the current entity type and the user.'),
      '#type' => 'select',
      '#options' => $elegible_rule_configs,
      '#default_value' => isset($items[$delta]['rules_config']) ? $items[$delta]['rules_config'] : '',
    ),
  );
  return $element;
}

/**
 * Widget Validate callback.
 */
function commerce_account_balance_purchase_widget_validate($element, &$form_state) {
  if ($element['amount']['#value'] !== '') {
    // Ensure the price is numeric.
    if (!is_numeric($element['amount']['#value'])) {
      form_error($element['amount'], t('%title: you must enter a numeric value for the price amount.', array('%title' => $element['amount']['#title'])));
    }
    else {
      // Convert the decimal amount value
      // entered to an integer based amount value.
      form_set_value($element['amount'], commerce_currency_decimal_to_amount($element['amount']['#value'], $form_state['currency_code']), $form_state);
      form_set_value($element['rules_config'], $element['rules_config']['#value'], $form_state);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function commerce_account_balance_field_is_empty($item, $field) {
  if (empty($item['amount']) && (string) $item['amount'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function commerce_account_balance_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_account_balance') . '/includes/views',
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_account_balance_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['deposit'] = array(
    'type' => 'deposit',
    'name' => t('Deposit'),
    'description' => t('Line item to deposit money to the account'),
    'product' => FALSE,
    'add_form_submit_value' => t('Add deposit form'),
    'base' => 'commerce_account_balance_line_item',
  );
  return $line_item_types;
}

/**
 * Configuration callback for the deposit line item.
 */
function commerce_account_balance_line_item_configuration($line_item_type) {
  $type = $line_item_type['type'];
  $field_name = "commerce_deposit_amount";
  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_line_item', $field_name, $type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'number_float',
      'cardinality' => 1,
      'entity_types' => array('commerce_line_item'),
      'translatable' => FALSE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_line_item',
      'bundle' => $type,
      'label' => t('Deposit amount'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'select_or_other_buttons',
        'module' => 'select_or_other',
        'active' => TRUE,
        'settings' => array(
          'available_options' => "10\r\n20\r\n50",
          'other' => 'Other amount',
          'other_size' => 3,
        ),
      ),
      'settings' => array(
        'min' => 5,
        'max' => '',
        'prefix' => '$',
        'suffix' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'number_decimal',
          'settings' => array(
            'thousand_separator' => '',
            'decimal_separator' => '.',
            'scale' => 2,
            'prefix_suffix' => TRUE,
          ),
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_commerce_line_item_rebase_unit_price().
 */
function commerce_account_balance_commerce_line_item_rebase_unit_price(&$price, $old_components, $line_item) {
  $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $amount = $wrapper->commerce_deposit_amount->value();
  $price['amount'] = $amount * 100;
  $price['data']['components'][0]['price']['amount'] = $amount * 100;
}

/**
 * Implements hook_commerce_checkout_order_can_checkout().
 *
 * We checkout immediately after clicking 'deposit'.
 */
function commerce_account_balance_commerce_checkout_order_can_checkout($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // There is only one line item and it's a deposit line item.
  $line_items = $order_wrapper->commerce_line_items->value();
  if (count($line_items) == 1 && $line_items[0]->type == 'deposit') {
    return TRUE;
  }
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_account_balance_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['balance_deposit_summary'] = array(
    'title' => t('Balance and deposit information'),
    'base' => 'commerce_account_balance_checkout',
    'file' => 'includes/commerce_account_balance.checkout_pane.inc',
    'page' => 'checkout',
    'weight' => -10,
  );

  return $checkout_panes;
}

/**
 * Implements hook_commerce_payment_order_paid_in_full().
 *
 * Create a transaction entity of type 'deposit'
 */
function commerce_account_balance_commerce_payment_order_paid_in_full($order) {

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Set order status to complete.
  $order_wrapper->status = 'completed';
  $order_wrapper->save();

  // Create a transaction object by triggering a rule.
  $amount = $order_wrapper->commerce_order_total->amount->value();
  $amount_decimal = $amount / 100;
  $user = user_load($order_wrapper->uid->raw());

  $return = rules_invoke_component('commerce_account_balance_deposit_to_account', $user, $amount_decimal, $order);
  return $return;
}

/**
 * Helper function that returns an array of transaction types.
 *
 * @todo Implement redemption system
 *
 * @see commerce_account_balance_property_info_alter()
 */
function _commerce_account_balance_transaction_type_list() {
  return array(
    'deposit' => t('Deposit'),
    'purchase' => t('Purchase'),
    'redemption' => t('Redemption'),
  );
}

/**
 * Callback function for the computed property of the formatted amount.
 */
function _commerce_account_balance_integer_to_amount($data, $options, $name, $type, $info) {
  $amount = $data->amount;
  $currency = commerce_currency_load();
  return commerce_currency_format($amount, $currency['code']);
}

/**
 * Helper function to get the formatted value of the account balance of a user.
 *
 * @see _commerce_account_balance_get_balance_raw()
 */
function _commerce_account_balance_get_balance($account, $options = NULL, $name = NULL, $type = NULL, $info = NULL) {
  $balance = _commerce_account_balance_get_balance_raw($account);
  $currency = commerce_currency_load();
  return commerce_currency_format($balance, $currency['code']);
}

/**
 * Helper function to get the raw value of the account balance of a user.
 */
function _commerce_account_balance_get_balance_raw($account) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_account_balance_transaction')->propertyCondition('uid', $account->uid);
  $result = $query->execute();

  $balance = 0;
  if (isset($result['commerce_account_balance_transaction'])) {
    $transactions = array_keys($result['commerce_account_balance_transaction']);
    foreach ($transactions as $transaction_id) {
      $transaction = entity_load_single('commerce_account_balance_transaction', $transaction_id);
      $balance += $transaction->amount;
    }
  }

  return $balance;
}

/**
 * Property callback to show the current balance on the Commerce order.
 */
function _commerce_account_balance_order_current_balance($commerce_order) {
  $account = user_load($commerce_order->uid);
  return _commerce_account_balance_get_balance($account);
}

/**
 * Property callback to show the updated balance on the Commerce order.
 */
function _commerce_account_balance_order_updated_balance($commerce_order) {
  $commerce_order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
  $currency = commerce_currency_load();
  $deposit_raw = $commerce_order_wrapper->commerce_order_total->amount->value();

  $account = user_load($commerce_order->uid);
  $balance_current_raw = _commerce_account_balance_get_balance_raw($account);

  $balance_raw_updated = $balance_current_raw + $deposit_raw;

  return commerce_currency_format($balance_raw_updated, $currency['code']);
}

/**
 * Property callback to show the desposit to be made with this order.
 */
function _commerce_account_balance_order_deposit($commerce_order) {
  $commerce_order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
  $currency = commerce_currency_load();
  $deposit_raw = $commerce_order_wrapper->commerce_order_total->amount->value();
  return commerce_currency_format($deposit_raw, $currency['code']);
}
