<?php
/**
 * @file
 * Provide Facebook, Twitter and Instagram.
 */

/**
 * Implements hook_help().
 */
function socialfeed_help($path, $arg) {
  switch ($path) {
    case 'admin/help#socialfeed':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Social Feed module allows you to fetch feeds directly from Facebook, Twitter & Instagram by simply insatlling it with the dependent <a href="@url">Libraries</a> module.', array('@url' => 'http://www.drupal.org/project/libraries')) . '</p>';
      $output .= '<h4>' . t('Instagram') . '</h4>';
      $output .= '<p>' . t('To be able to use and search after hashimages on Instagram, you need a client ID. This simple guide will step by step tell you have to get one.') . '</p>';
      $output .= '<strong>' . t('* Note: You need to have a Instagram account to be able to get a client ID *') . '</strong>';
      $output .= '<p>' . t('Follow these simple steps to get your own key.') . '</p>';
      $output .= '<ol><li>' . t('Login if your not already.') . '</li><li>' . t('Go to the Instagram Developer page.') . '</li><li>' . t('Click on ”Register your application”.') . '</li><li>' . t('If you don’t already have a application registered, you will now see a form to register a new one. If you instead see a list of ”clients”, click the ”Register new client” at the top right.') . '</li><li>' . t('Set application name to your websites name') . '</li><li>' . t('Type in a description, something like ”Registering to get a client ID to use in the EP Hashimage wordpress plugin”') . '</li><li>' . t('Add the url of you site on the two last fields.') . '</li><li>' . t('Add contact email') . '</li><li>' . t('Hit register.') . '</li><li>' . t('Click ”Manage clients” in the top menu and you will now see you new client in the list and a client id, client secret and more.') . '</li>';

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function socialfeed_menu() {
  $items = array();
  $items['admin/config/services/socialfeed'] = array(
    'title' => 'Social Feed Settings',
    'description' => 'Configure to fit clients needs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialfeed_facebook_settings'),
    'access arguments' => array('administer modules'),
    'file' => 'socialfeed.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/socialfeed/facebook'] = array(
    'title' => 'Facebook',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/socialfeed/twitter'] = array(
    'title' => 'Twitter',
    'description' => 'Configure to fit clients needs',
    'page arguments' => array('socialfeed_twitter_settings'),
    'access arguments' => array('administer modules'),
    'file' => 'socialfeed.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/socialfeed/instagram'] = array(
    'title' => 'Instagram',
    'description' => 'Configure to fit clients needs',
    'page arguments' => array('socialfeed_instagram_settings'),
    'access arguments' => array('administer modules'),
    'file' => 'socialfeed.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function socialfeed_theme($existing, $type, $theme, $path) {
  return array(
    'socialfeed_facebook' => array(
      'variables' => array('facebook' => NULL),
      'template' => 'facebook',
      'path' => drupal_get_path('module', 'socialfeed') . '/templates',
    ),
    'socialfeed_twitter' => array(
      'variables' => array('twitter' => NULL),
      'template' => 'twitter',
      'path' => drupal_get_path('module', 'socialfeed') . '/templates',
    ),
    'socialfeed_instagram' => array(
      'variables' => array('instagram_images' => NULL),
      'template' => 'instagram',
      'path' => drupal_get_path('module', 'socialfeed') . '/templates',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function socialfeed_block_info() {
  $blocks = array();
  $blocks['facebook_latest_feed'] = array(
    'info' => t('Social Feed Facebook'),
  );
  $blocks['twitter_latest_feed'] = array(
    'info' => t('Social Feed Twitter'),
  );
  $blocks['instagram_latest_feed'] = array(
    'info' => t('Social Feed Instagram'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function socialfeed_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'facebook_latest_feed':
      $block['subject'] = '';
      $block['content'] = socialfeed_facebook_posts();
      break;

    case 'twitter_latest_feed':
      $block['subject'] = '';
      $block['content'] = socialfeed_twitter_posts();
      break;

    case 'instagram_latest_feed':
      $block['subject'] = '';
      $block['content'] = socialfeed_instagram_posts();
      break;
  }

  return $block;
}

/**
 * Returns HTML with feeds in required format.
 *
 * @param string $page_name
 *   Array with parameters for this action: depends on the trigger.
 */
function socialfeed_facebook_feeds($page_name = '') {
  global $user;
  $selected_type_value = $config = $message_feed = array();
  $display_time = $display_pic = $display_video = $selected_type = $selected_type_key = $fb_type = $selected_type_value = $url = $request = '';
  $config['app_id'] = variable_get('socialfeed_facebook_app_id');
  $config['secret'] = variable_get('socialfeed_facebook_secret_key');
  $config['page_name'] = variable_get('socialfeed_facebook_page_name');

  if (isset($config['app_id']) && !empty($config['app_id']) && isset($config['secret']) && !empty($config['secret'])) {

    $url = "https://graph.facebook.com/" . $config['page_name'] . "/feed?access_token=" . $config['app_id'] . "|" . $config['secret'];
    $request = drupal_http_request($url);

    if ($request->status_message == "OK") {
      $display_time = variable_get('socialfeed_facebook_time_stamp');
      $display_pic = variable_get('socialfeed_facebook_display_pic');
      $display_video = variable_get('socialfeed_facebook_display_video');
      $display_all_posts = variable_get('socialfeed_facebook_all_types');
      $teaser_text = variable_get('socialfeed_facebook_teaser_text');
      $facebook_hash_tag = variable_get('socialfeed_facebook_hashtag');
      $selected_type = variable_get('socialfeed_facebook_post_type');
      $selected_type_key = $selected_type;
      $fb_type = array('link', 'status', 'photo', 'video');
      if (isset($selected_type_key) && !empty($selected_type_key)) {
        $selected_type_value = $fb_type[$selected_type_key];
      }
      $i = 0;
      $post_type_filter = $next_post_type_filter = array();
      $json_response = drupal_json_decode($request->data);

      foreach ($json_response['data'] as $facebook_value) {
        // If specific post type is selected.
        if ($display_all_posts == 0 && $facebook_value['type'] == $selected_type_value) {
          $post_type_filter[$facebook_value['type']][] = $facebook_value;
        }
        // If all post type selected.
        elseif ($display_all_posts == 1) {
          $message_feed[] = socialfeed_facebook_data($i, $facebook_value, $display_all_posts, $display_time, $display_pic, $display_video, $teaser_text, $facebook_hash_tag);
          $i++;
          if ($i == variable_get('socialfeed_facebook_no_feeds')) {
            break;
          }
        }
      }
      // Showcase of array of specific post type feeds.
      if (array_key_exists($selected_type_value, $post_type_filter)) {
        foreach ($post_type_filter[$selected_type_value] as $facebook_entry) {
          $message_feed[] = socialfeed_facebook_data($i, $facebook_entry, $display_all_posts, $display_time, $display_pic, $display_video, $teaser_text, $facebook_hash_tag);
          $i++;
          if ($i == variable_get('socialfeed_facebook_no_feeds')) {
            break;
          }
        }
        $existing_feeds = count($post_type_filter[$selected_type_value]);
        $remaining = variable_get('socialfeed_facebook_no_feeds') - $existing_feeds;
        if ($existing_feeds < variable_get('socialfeed_facebook_no_feeds')) {
          $i = 0;
          $pager_next = $json_response['paging']->next;
          $next_page_json = file_get_contents($pager_next);
          $next_page = json_decode($next_page_json);
          foreach ($next_page->data as $next_facebook_value) {
            if ($display_all_posts == 0 && $next_facebook_value->type == $selected_type_value) {
              $next_post_type_filter[$next_facebook_value->type][] = $next_facebook_value;
            }
          }
          if (array_key_exists($selected_type_value, $next_post_type_filter)) {
            foreach ($next_post_type_filter[$selected_type_value] as $facebook_entry) {
              $message_feed[] = socialfeed_facebook_data($i, $facebook_entry, $display_all_posts, $display_time, $display_pic, $display_video, $teaser_text, $facebook_hash_tag);
              $i++;
              if ($i == $remaining) {
                break;
              }
            }
          }
        }
      }
      else {
        if (empty($message_feed)) {
          drupal_set_message(t('No related posts'), 'error');
        }
      }

      return theme('socialfeed_facebook', array('facebook' => $message_feed));
    }
    else {
      drupal_set_message(t('The access_token provided is invalid.'), 'error');
    }
  }
  else {
    if (in_array('administrator', array_values($user->roles))) {
      drupal_set_message(t('Please provide your credentials at the Facebook <a href="@facebook">here</a>.', array('@facebook' => url('admin/config/services/socialfeed'))), 'warning');
    }
    else {
      drupal_set_message(t('Please login to provide Facebook App values <a href="@facebook">here</a>.', array('@facebook' => url('user'))), 'error');
    }
  }
}

/**
 * Rendering values from the Facebook feed.
 */
function socialfeed_facebook_data($i, $facebook_entry, $display_all_posts, $display_time, $display_pic, $display_video, $teaser_text, $facebook_hash_tag) {
  if (array_key_exists('message', $facebook_entry)) {
    if ($facebook_entry['type'] == 'photo' || $display_all_posts == 0) {
      if ($display_pic == 1) {
        $message_feed['picture'] = $facebook_entry['picture'];
      }
    }
    if ($facebook_entry['type'] == 'video' || $display_all_posts == 0) {
      if ($display_video == 1) {
        $message_feed['video'] = $facebook_entry['source'];
      }
    }
    if (isset($facebook_entry['message'])) {
      $message_feed['message'] = substr($facebook_entry['message'], 0, variable_get('socialfeed_facebook_trim_length'));
    }
    if (isset($teaser_text) && !empty($teaser_text)) {
      $message_feed['full_feed_link'] = l(t('@teaser_text', array('@teaser_text' => $teaser_text)), $facebook_entry['link'], array('attributes' => array('target' => '_blank')));
    }

    if ($facebook_hash_tag == 1) {
      $message_feed['message'] = preg_replace_callback(
        '/#(\\w+)/',
        function ($hash) {
          return l($hash[0], 'https:facebook.com/hashtag/' . $hash[1], array('attributes' => array('target' => '_blank')));
        },
        $message_feed['message']
      );
    }
    if ($display_time == 1) {
      $formatted_date = new DateTime($facebook_entry['created_time']);
      $message_feed['created_stamp'] = $formatted_date->format(variable_get('socialfeed_facebook_time_format'));
    }
  }
  else {
    if ($facebook_entry['type'] == 'photo' || $display_all_posts == 0) {
      if ($display_pic == 1) {
        $message_feed['picture'] = $facebook_entry['picture'];
      }
    }
    if ($facebook_entry['type'] == 'video' || $display_all_posts == 0) {
      if ($display_video == 1) {
        $message_feed['video'] = $facebook_entry['source'];
      }
    }
    if (isset($facebook_entry['message']) && !empty($facebook_entry['message'])) {
      $message_feed['message'] = substr($facebook_entry['message'], 0, variable_get('socialfeed_facebook_trim_length'));
    }
    if (isset($teaser_text) && !empty($teaser_text)) {
      $message_feed['full_feed_link'] = l(t('@teaser_text', array('@teaser_text' => $teaser_text)), $facebook_entry['link'], array('attributes' => array('target' => '_blank')));
    }
  }

  return $message_feed;
}

/**
 * Uses socialfeed_facebook_posts() for fetching Facebook feeds.
 */
function socialfeed_facebook_posts() {
  $facebook_latest = socialfeed_facebook_feeds(variable_get('socialfeed_facebook_page_name'));

  return $facebook_latest;
}

/**
 * Uses socialfeed_twitter_posts() for fetching Twitter tweets.
 *
 * @var array $settings
 */
function socialfeed_twitter_posts() {
  $tweets_count = variable_get('socialfeed_twitter_tweets_count');
  $twitter_username = variable_get('socialfeed_twitter_username');
  $display_time = variable_get('socialfeed_twitter_time_stamp');
  $display_date_twitter_style = variable_get('socialfeed_twitter_time_ago');
  $twitter_hash_tag = variable_get('socialfeed_twitter_hashtag');
  $teaser_text = variable_get('socialfeed_twitter_teaser_text');
  $twitter_consumer_key = variable_get('socialfeed_twitter_consumer_key');
  $twitter_consumer_secrete = variable_get('socialfeed_twitter_consumer_secret');

  // Auth Parameters.
  $api_key = urlencode($twitter_consumer_key);
  $api_secret = urlencode($twitter_consumer_secrete);
  $auth_url = 'https://api.twitter.com/oauth2/token';

  // What we want?
  $data_username = $twitter_username;
  $data_count = $tweets_count;
  $data_url = 'https://api.twitter.com/1.1/statuses/user_timeline.json';

  // Get API Access Token.
  $api_credentials = base64_encode($api_key . ':' . $api_secret);
  $auth_headers = 'Authorization: Basic ' . $api_credentials . "\r\n" . 'Content-Type: application/x-www-form-urlencoded;charset=UTF-8' . "\r\n";
  $auth_context = stream_context_create(
    array(
      'http' => array(
        'header' => $auth_headers,
        'method' => 'POST',
        'content' => http_build_query(
          array(
            'grant_type' => 'client_credentials',
          )
        ),
      ),
    )
  );
  $auth_response = json_decode(file_get_contents($auth_url, 0, $auth_context), TRUE);
  $auth_token = $auth_response['access_token'];

  // Get Tweets.
  $data_context = stream_context_create(
    array(
      'http' => array(
        'header' => 'Authorization: Bearer ' . $auth_token . "\r\n",
      ),
    )
  );
  $twitter_values = json_decode(file_get_contents($data_url . '?count=' . $data_count . '&screen_name=' . urlencode($data_username), 0, $data_context), TRUE);

  // Results - Do what you want!
  foreach ($twitter_values as $key => $twitter_value) {
    $twitter_tweets[$key]['username'] = $twitter_value['user']['screen_name'];
    $twitter_tweets[$key]['full_username'] = 'http://twitter.com/' . $twitter_value['user']['screen_name'];
    preg_match_all('#\bhttps?://[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/))#', $twitter_value['text'], $extra_links);
    foreach ($extra_links[0] as $extra_link) {
      $twitter_tweets[$key]['extra_links'][] = $extra_link;
    }
    if (isset($twitter_value['text'])) {
      $twitter_tweets[$key]['tweet'] = substr(rtrim($twitter_value['text'], $extra_link), 0, variable_get('socialfeed_twitter_trim_length'));
    }
    if (isset($teaser_text) && !empty($teaser_text)) {
      if (array_key_exists('media', $twitter_value['entities'])) {
        $twitter_tweets[$key]['tweet_url'] = l(t('@teaser_text', array('@teaser_text' => $teaser_text)), $twitter_value['entities']['media'][0]['url'], array('attributes' => array('target' => '_blank')));
      }
    }
    if ($display_time == 1) {
      $formatted_twitter_date = new DateTime($twitter_value['created_at']);
      if ($display_date_twitter_style == 1) {
        $twitter_tweets[$key]['twitter_date'] = socialfeed_time_elapsed_string($formatted_twitter_date->format(variable_get('socialfeed_twitter_time_format')));
      }
      else {
        $twitter_tweets[$key]['twitter_date'] = $formatted_twitter_date->format(variable_get('socialfeed_twitter_time_format'));
      }
    }
    if ($twitter_hash_tag == 1) {
      $twitter_tweets[$key]['tweet'] = preg_replace_callback(
        '/#(\\w+)|@(\\w+)/',
        function ($hash) {
          if ($hash[0][0] == '#') {
            return l($hash[0], 'https:twitter.com/hashtag/' . $hash[1], array('attributes' => array('target' => '_blank')));
          }
          if ($hash[0][0] == '@') {
            return l($hash[0], 'https:twitter.com/' . $hash[2], array('attributes' => array('target' => '_blank')));
          }
        },
        $twitter_tweets[$key]['tweet']
      );
    }
  }
  return theme('socialfeed_twitter', array('twitter' => $twitter_tweets));
}

/**
 * Displays date in Twitter format.
 */
function socialfeed_time_elapsed_string($datetime, $full = FALSE) {
  $now = new DateTime();
  $ago = new DateTime($datetime);
  $diff = $now->diff($ago);

  $diff->w = floor($diff->d / 7);
  $diff->d -= $diff->w * 7;

  $string = array(
    'y' => 'year',
    'm' => 'month',
    'w' => 'week',
    'd' => 'day',
    'h' => 'hour',
    'i' => 'minute',
    's' => 'second',
  );
  foreach ($string as $k => &$v) {
    if ($diff->$k) {
      $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');
    }
    else {
      unset($string[$k]);
    }
  }

  if (!$full) {
    $string = array_slice($string, 0, 1);
  }
  return $string ? implode(', ', $string) . ' ago' : 'just now';
}
/**
 * Uses socialfeed_instagram_posts() for fetching instagram pictures.
 *
 * @var array $images
 */
function socialfeed_instagram_posts() {
  $i = 0;
  $images = $pic = array();
  $instagram_post_link = variable_get('socialfeed_instagram_post_link');
  $resolution = variable_get('socialfeed_instagram_picture_resolution');
  $access_token = variable_get('socialfeed_instagram_access_token');
  $url = "https://api.instagram.com/v1/users/self/media/recent/?access_token=" . variable_get('socialfeed_instagram_access_token') . '&count=' . variable_get('socialfeed_instagram_picture_count');
  $request = drupal_http_request($url);

  if (isset($access_token) && !empty($access_token)) {
    if ($request->status_message != 'BAD REQUEST') {
      $json_response = drupal_json_decode($request->data);
      foreach ($json_response['data'] as $key => $response_data) {
        if ($instagram_post_link == 1) {
          $images[$key]['post_url'] = $response_data['link'];
        }
        $pic[] = $response_data['images'];
        $i++;
        if ($i == variable_get('socialfeed_instagram_picture_count')) {
          break;
        }
      }

      foreach ($pic as $key => $image) {
        $images[$key]['image_url'] = $image[$resolution]['url'];
      }
      return theme('socialfeed_instagram', array('instagram_images' => $images));
    }
    else {
      drupal_set_message(t('The access_token provided is invalid.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Please fill in the required details <a href="@url">here</a>.'), array('@url' => 'admin/config/services/socialfeed/instagram'), 'warning');
  }
}
