<?php
/**
 * @file LiftIgniter, recommendation service integration.
 */

define('LIFTIGNITER_DEFAULT_WIDGET', 'default-widget');
define('LIFTIGNITER_LIST_PREFIX',    'li-recommendation-');
define('LIFTIGNITER_TPL_PREFIX',     'liftigniter-');
define('LIFTIGNITER_TPL_EXT',        '.mst');

/**
 * Implements hook_menu().
 */
function liftigniter_menu() {
  return array(
    'admin/config/services/liftigniter' => array(
      'title' => 'LiftIgniter',
      'description' => 'LiftIgniter, recommendation integration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('liftigniter_settings_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'liftigniter.admin.inc',
    ),
  );
}


/**
 * Implements hook_permission().
 */
function liftigniter_permission() {
  return array(
    'view liftigniter blocks' => array(
      'title' => t('View Lift Igniter Blocks'),
      'description' => t('View the recommendations provided in LiftIgniter blocks.'),
    ),
  );
}


/**
 * Implements hook_library().
 */
function liftigniter_library() {
  return array('liftigniter' => array(
    'title' => 'LiftIgniter JS API',
    'version' => '1.0.0',
    'js' => array(
      libraries_get_path('liftigniter') . '/liftigniter.js' => array(
        'type' => 'file',
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
      ),
    ),
  ));
}


/**
 * Implements hook_preproess_page().
 */
function liftigniter_preprocess_page(&$variables) {
  $properties = array(
    'language',
  );

  // Just piggy-back/simplify DataLayer entity data colleciton code.
  if (module_exists('datalayer') && variable_get('liftigniter_metadata', FALSE)) {

    $type = FALSE;
    $obj = _datalayer_menu_get_any_object($type);
    $output_data = array();

    if (is_object($obj) && $type) {
      $entity_info = entity_get_info($type);
      $bundle = FALSE;

      // Add basic entity details.
      $output_data['type'] = $type;
      if (isset($obj->{$entity_info['entity keys']['bundle']})) {
        // Find how bundles are accessed before looking.
        $bundle = $obj->{$entity_info['entity keys']['bundle']};
        // Use nice label.
        $output_data['bundle'] = $entity_info['bundles'][$bundle]['label'];
      }

      // Entity property addition via hook.
      foreach (module_implements('liftigniter_meta') as $module) {
        // Combine modules implementing hook_liftigniter_meta().
        $properties = array_merge($properties, module_invoke($module, 'liftigniter_meta'));
      }

      // Collect data.
      foreach ($properties as $p) {
        if (isset($obj->$p)) {
          $output_data[$p] = $obj->$p;
        }
      }
    }

    // Allow manual changes.
    drupal_alter('liftigniter_meta', $output_data, $type, $obj, $entity_info);

    // Put data on the page.
    drupal_add_html_head(array(
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => drupal_json_encode($output_data),
      '#attributes' => array(
        'type' => 'application/json',
        'id' => 'liftigniter-metadata',
      )), 'liftigniter_metadata'
    );

    // Add field list setting to the page.
    drupal_add_js(array('liftIgniter' => array(
      'fields' => array_merge($properties, array(
        'title',
        'thumbnail',
        'type',
        'bundle',
      )),
    )), 'setting');
  }

  // Add global settings to the page.
  drupal_add_js(array('liftIgniter' => array(
    'useLang' => variable_get('liftigniter_use_language', TRUE),
    'apiKey' => variable_get('liftigniter_api_key', ''),
    'useWaypoints' => variable_get('liftigniter_waypoints', FALSE),
    'forceSameProtocol' => variable_get('liftigniter_force_same_protocol', FALSE),
    'transformCallbacks' => array(),
  )),'setting');
}


/**
 * Implements hook_block_info().
 */
function liftigniter_block_info() {
  $blocks = array();
  $widgets = array_map('trim', explode(',',
    variable_get('liftigniter_widget_blocks', LIFTIGNITER_DEFAULT_WIDGET)
  ));

  // Create a block for each widget.
  foreach ($widgets as $delta) {
    $blocks['widget_' . $delta] = array(
      'info' => t('LiftIgniter: ' . $delta),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}


/**
 * Implements hook_block_configure().
 *
 * @param string $delta
 */
function liftigniter_block_configure($delta) {
  return array(
    'liftigniter_max_results' => array(
      '#type' => 'textfield',
      '#title' => t('Nuber of results'),
      '#size' => 10,
      '#description' => t('Max number of results to display.'),
      '#default_value' => variable_get('liftigniter_max_results-' . $delta, 5),
    )
  );
}


/**
 * Implements hook_block_save().
 *
 * @param string $delta
 * @param array $edit
 */
function liftigniter_block_save($delta, $edit) {
  variable_set('liftigniter_max_results-' . $delta, $edit['liftigniter_max_results']);
}


/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function liftigniter_block_view($delta = '') {
  if (!user_access('view liftigniter blocks')) {
    return false;
  }

  // Keep a running list of all widget blocks being output on the page.
  $widgets = &drupal_static(__FUNCTION__, array());
  $widget_id = preg_replace('/^widget_/', '', $delta);

  // Place mustache template in the head.
  $template_output = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => "\r\n" . _liftigniter_get_template($widget_id),
    '#attributes' => array(
      'type' => 'application/mustache',
      'id' => LIFTIGNITER_LIST_PREFIX . $widget_id,
    ),
  );
  drupal_add_html_head($template_output, 'liftigniter_template_' . $widget_id);

  // Update static variable.
  $widgets = array($widget_id => array(
    'max' => variable_get('liftigniter_max_results-' . $delta, 5),
  )) + $widgets;

  // Return block render array for DOM placeholder and inject global settings.
  $block = array(
    'subject' => t('Recommended'),
    'content' => array(
      '#markup' => '<div id="' . LIFTIGNITER_LIST_PREFIX . $widget_id . '"></div>',
      '#attached' => array(
        'js' => array(
          array('type' => 'setting', 'data' => array('liftIgniter' => array(
            'widgets' => $widgets,
          ))),
          // @todo Self-hosted script option.
          array('type' => 'inline', 'data' => _liftigniter_get_script()),
          drupal_get_path('module', 'liftigniter') . '/liftigniter.js',
        ),
      ),
    ),
  );

  // Delay front-end API requests. Allow different library names.
  $waypoints = FALSE;
  if (libraries_get_path('jquery-waypoints')) {
    $waypoints = 'jquery-waypoints';
  }
  if (libraries_get_path('waypoints')) {
    $waypoints = 'waypoints';
  }
  if ($waypoints) {
    $block['#attached']['library'][] = $waypoints;
  }

  return $block;
}


/**
 * Discover which template file to use.
 *
 * @return string
 *   Contents of template file.
 */
function _liftigniter_get_template($widget_id) {
  // Check static or cached version. NOTE: Assignment test.
  if ($template = &drupal_static(__FUNCTION__ . $widget_id, FALSE)) {
    return $template;
  }
  if ($cached = cache_get('liftigniter_template_' . $widget_id)) {
    $template = $cached->data;
    return $template;
  }

  // Find and open the template file.
  global $theme;
  $theme_path = drupal_get_path('theme', $theme) . '/';
  $locations = array(
    $theme_path . 'templates/' . $widget_id,
    $theme_path . 'templates/default-widget',
    $theme_path . $widget_id,
    $theme_path . 'default-widget',
    drupal_get_path('module', 'liftigniter') . '/' . $widget_id,
    drupal_get_path('module', 'liftigniter') . '/default-widget',
  );
  // Allow inserting candidate template locations.
  drupal_alter('liftigniter_templates', $locations);

  // Test until found.
  foreach (array_unique($locations) as $path) {
    if (is_file($path . LIFTIGNITER_TPL_EXT)) {
      // Get, stash and go.
      $template = file_get_contents($path . LIFTIGNITER_TPL_EXT);
      cache_set('liftigniter_template_' . $widget_id, $template);
      return $template;
    }
  }

  watchdog('liftigniter', 'LiftIgniter template file missing: @file', array('@file' => $widget_id), WATCHDOG_ERROR);
  return FALSE;
}


/**
 * Return the embed code with key inserted.
 * @return string
 */
function _liftigniter_get_script() {
  // Assignment test for key set.
  if ($key = variable_get('liftigniter_api_key', FALSE)) {

    // Note the need for parsing $key but not $p vars.
    return <<<EOD
(function(w,d,s,p,v,e,r) {w['\$petametrics_var']=v;w[v]=w[v]||function(){(w[v].q=w[v].q||[]).push(arguments)};w[v].l=1*new Date();e=d.createElement(s),r=d.getElementsByTagName(s)[0];e.async=1;e.src=p;r.parentNode.insertBefore(e,r)})(window,document,'script','//cdn.petametrics.com/p.js','\$p');
\$p('init', '$key');
\$p('send', 'pageview');
EOD;

  }
  return '';
}
