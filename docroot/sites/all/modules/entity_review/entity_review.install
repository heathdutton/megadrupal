<?php

/**
 * Implementation of hook_schema().
 */
function entity_review_uninstall() {
  db_delete('variable')
    ->condition('name', 'entity_review_%', 'LIKE')
    ->execute();

  //@TODO: Delete referenced fields on uninstall.
}

/**
 * Implements hook_schema().
 */
function entity_review_schema() {
  $schema = array();

  $schema['entity_review'] = array(
    'description' => t('Stores reviews and associated data.'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The primary ID of the review',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The current vid version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'eid' => array(
        'description' => 'The ID of the entity being reviewed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'node',
        'description' => 'The type of the entity being reviewed.',
      ),
      'uid' => array(
        'description' => 'The ID of the user authoring the review.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The published status of a review. (0 = Not Published, 1 = Published)',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the review was created.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'vid' => array('vid'),
    ),
    'foreign keys' => array(
      'review_revision' => array(
        'table' => 'entity_review_revision',
        'columns' => array('vid' => 'vid'),
      ),
      'review_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'indexes' => array(
      'created' => array('created'),
      'status' => array('status'),
    ),
  );

  $schema['entity_review_revision'] = array(
    'description' => t('Stores information about each saved version of reviews.'),
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'description' => 'The review this version belongs to.',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'A Unix timestamp indicating when this version was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vid'),
    'foreign keys' => array(
      'versioned_review' => array(
        'table' => 'entity_review',
        'columns' => array('id' => 'id'),
      ),
    ),
    'indexes' => array(
      'timestamp' => array('timestamp'),
      'id' => array('id'),
    ),
  );

  return $schema;
}

/**
 * Add 'vid' field to 'entity_review' table.
 */
function entity_review_update_7100() {
  db_add_field('entity_review', 'vid', array(
    'description' => 'The current vid version identifier.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => NULL,
  ));

  db_add_unique_key('entity_review', 'vid', array('vid'));
}

/**
 * Add table with revisions.
 */
function entity_review_update_7101() {
  $schema = entity_review_schema();
  db_create_table('entity_review_revision', $schema['entity_review_revision']);
}

/**
 * Fill in 'entity_review_revision' table with current reviews.
 */
function entity_review_update_7102() {
  $reviews = db_select('entity_review', 'r')
    ->fields('r', array('id', 'created'))
    ->execute();

  $query = db_insert('entity_review_revision')
    ->fields(array('id', 'timestamp'));

  foreach ($reviews as $review) {
    $query->values(array(
      'id' => $review->id,
      'timestamp' => $review->created
    ));
  }

  $query->execute();
}

/**
 * Match reviews with revisions.
 */
function entity_review_update_7103() {
  $revision = db_select('entity_review_revision', 'r')
    ->fields('r', array('id', 'vid'))
    ->execute()->fetchAllKeyed();

  foreach ($revision as $id => $vid) {
    db_update('entity_review')
      ->fields(array('vid' => $vid))
      ->condition('id', $id)
      ->execute();
  }
}

/**
 * Set default status to '0'.
 */
function entity_review_update_7104() {
  db_field_set_default('entity_review', 'status', 0);
}

/**
 * Remove eid_type_uid unique key from entity_review table.
 */
function entity_review_update_7105() {
  db_drop_unique_key('entity_review', 'eid_type_uid');
}
