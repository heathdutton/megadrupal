<?php

/**
 * Implements hook_views_api().
 */
function entity_review_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_entity_info_alter().
 */
function entity_review_entity_info_alter(&$entities) {
  foreach ($entities as $entity_type => $entity_info) {
    if ($entity_type != 'review') { // Skip itself.
      foreach ($entity_info['bundles'] as $bundle_name => $bundle) {
        $review_bundle_name = $entity_type . '__' . $bundle_name;

        $entities['review']['bundles'][$review_bundle_name] = array(
          'label' => t('@entity_type review', array('@entity_type' => $entity_info['label'])),
          'admin' => array(
            'path' => 'admin/structure/reviews/%',
            'real path' => "admin/structure/reviews/$review_bundle_name",
            'bundle argument' => 3,
            'access callback' => 'entity_review_administer_access',
            'access arguments' => array(3),
          )
        );
      }
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function entity_review_entity_info() {
  $info = array();

  $info['review'] = array(
    'label' => t('Review'),
    'plural label' => t('Reviews'),
    'description' => t('An entity type used by entity_review module.'),
    'entity class' => 'ReviewEntity',
    'controller class' => 'ReviewEntityController',
    'base table' => 'entity_review',
    'revision table' => 'entity_review_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'bundle',
      'revision' => 'vid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'entity_review',
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),

    'access callback' => 'entity_review_access',
  );

  return $info;
}

/**
 * Implements hook_theme().
 */
function entity_review_theme($existing, $type, $theme, $path) {
  return array(
    'review' => array(
      'render element' => 'elements',
      'path' => $path . '/templates',
      'template' => 'review',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entity_review_menu() {
  $items = array();

  $items['admin/content/reviews'] = array(
    'title' => 'Reviews',
    'description' => 'List site reviews and the review approval queue.',
    'page callback' => 'entity_review_content',
    'access arguments' => array('moderate entity_review'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'file' => 'entity_review.manage.inc',
  );
  // Tabs begin here.
  $items['admin/content/reviews/published'] = array(
    'title' => 'Published reviews',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/content/reviews/unapproved'] = array(
    'title' => 'Unapproved reviews',
    'page arguments' => array('approval'),
    'access arguments' => array('moderate entity_review'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/reviews'] = array(
    'title' => 'Entity reviews',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_review_manage_form'),
    'access arguments' => array('administer entity_review'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'entity_review.admin.inc',
  );

  $items['admin/structure/reviews/%/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_review_manage_settings_form', 3),
    'access callback' => 'entity_review_administer_access',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'entity_review.admin.inc',
  );

  $items['add-review/%/%'] = array(
    'title' => 'Add new review',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_review_add_form', 1, 2),
    'access callback' => 'entity_review_add_access',
    'access arguments' => array(1, 2),
    'file' => 'entity_review.admin.inc',
  );

  $items['review/%review_by_vid'] = array(
    'title callback' => 'entity_class_label',
    'title arguments' => array(1),
    'page callback' => 'entity_review_view_review',
    'page arguments' => array(1),
    'access callback' => 'entity_review_access',
    'access arguments' => array('view', 1),
    'file' => 'entity_review.admin.inc',
  );

  $items['review/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['review/%review_by_vid/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form', //@TODO: use entity_ui_get_form().
    'page arguments' => array('review_form', 1, 'edit'),
    'access callback' => 'entity_review_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'entity_review.admin.inc',
    'weight' => 0,
  );

  $items['review/%review_by_vid/publish'] = array(
    'title' => 'Publish',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_action_form', 1, 'publish'),
    'access callback' => 'entity_review_access',
    'access arguments' => array('publish', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'entity_review.admin.inc',
    'weight' => 0,
  );

  $items['review/%review_by_vid/unpublish'] = array(
    'title' => 'Unpublish',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_action_form', 1, 'unpublish'),
    'access callback' => 'entity_review_access',
    'access arguments' => array('unpublish', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'entity_review.admin.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function entity_review_permission() {
  $perms = array();

  $perms['administer entity_review'] = array(
    'title' => t('Administer Entity Review module'),
    'description' => t('Allows to administer Entity Review module.'),
  );

  $perms['moderate entity_review'] = array(
    'title' => t('Moderate Entity Review module'),
    'description' => t('Allows to moderate Entity Review module.'),
  );

  $perms["view any reviews"] = array(
    'title' => t('View any reviews'),
    'description' => t('Allows to view any reviews.'),
  );

  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_type != 'review') { // Skip itself.
      foreach ($entity_info['bundles'] as $bundle_name => $bundle) {
        $review_bundle = $entity_type . '__' . $bundle_name;

        $perms["create $review_bundle reviews"] = array(
          'title' => t('Create %entity: %bundle reviews', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
          'description' => t('Allows to create %entity: %bundle reviews.', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
        );

        $perms["view $review_bundle reviews"] = array(
          'title' => t('View %entity: %bundle reviews', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
          'description' => t('Allows to view %entity: %bundle reviews.', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
        );

        $perms["edit own $review_bundle reviews"] = array(
          'title' => t('Edit own %entity: %bundle reviews', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
          'description' => t('Allows to edit own %entity: %bundle reviews.', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
        );

        $perms["edit any $review_bundle reviews"] = array(
          'title' => t('Edit any %entity: %bundle reviews', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
          'description' => t('Allows to edit any %entity: %bundle reviews.', array(
            '%entity' => $entity_info['label'],
            '%bundle' => $bundle['label'],
          )),
        );
      }
    }
  }

  return $perms;
}

/**
 * Callback for hook_menu.
 *
 * @param string $bundle
 *
 * @return bool
 */
function entity_review_administer_access($bundle) {
  return !empty($bundle) && user_access("administer entity_review");
}

/**
 * Callback for hook_entity_info & hook_menu.
 *
 * @param string $op
 * @param object $review
 * @param object $account
 *
 * @return bool
 */
function entity_review_access($op, $review, $account = NULL) {
  if (is_numeric($review)) {
    $reviews = entity_load('review', array($review));
    $review = $reviews[$review];
  }

  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  switch ($op) {
    case 'edit':
      $is_owner = ($review->uid === $account->uid);

      return (user_access("edit any $review->bundle reviews", $account))
        || ($is_owner && user_access("edit own $review->bundle reviews", $account));

    case 'view':
      return $review
        ? user_access("view $review->bundle reviews", $account)
        : user_access("view any reviews");

    case 'publish':
      return user_access("moderate entity_review") && (!entity_revision_is_default('review', $review) || !(bool) $review->status);

    case 'unpublish':
      return user_access("moderate entity_review") && entity_revision_is_default('review', $review) && (bool) $review->status;

    default:
      return FALSE;
  }
}

function entity_review_add_access($type, $eid) {
  if (!empty($type) && !empty($eid)) {
    $entity_wrapper = entity_metadata_wrapper($type, $eid);
    $review_bundle = $type . '__' . $entity_wrapper->getBundle();

    $access = module_invoke_all('entity_review_add_access', $type, $eid);
    $access[] = variable_get('entity_review_' . $review_bundle . '_enable', FALSE);
    $access[] = user_access("create $review_bundle reviews");

    return !in_array(FALSE, $access);
  }
}

/**
 * Fetch an entity review object.
 *
 * @param $id
 *   Integer specifying the review id.
 *
 * @return
 *   A fully-loaded entity_review object or FALSE if it cannot be loaded.
 */
function review_load($id) {
  $reviews = entity_load('review', array($id));

  return reset($reviews);
}

/**
 * Fetch an entity review object.
 *
 * @param $vid
 *   Integer specifying the review vid.
 *
 * @return
 *   A fully-loaded entity_review object or FALSE if it cannot be loaded.
 */
function review_by_vid_load($vid) {
  return entity_revision_load('review', $vid);
}

/**
 * Implements hook_entity_view().
 *
 * Add links to add / view reviews.
 */
function entity_review_entity_view($entity, $type, $view_mode, $langcode) {
  $entity_wrapper = entity_metadata_wrapper($type, $entity);

  if (entity_review_add_access($type, $entity_wrapper->getIdentifier())) {
    if (!isset($entity->content['links'])) {
      $entity->content['links'] = array(
        '#theme' => 'links',
        '#pre_render' => array('drupal_pre_render_links'),
        '#attributes' => array(
          'class' => array('links', 'inline'),
        )
      );
    }

    $entity->content['links']['review'] = array(
      '#links' => array(
        'review-add' => array(
          'title' => t('Add new review'),
          'href' => "add-review/$type/" . $entity_wrapper->getIdentifier(),
        )
      ),
    );
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Remove reviews connected to removed entity.
 */
function entity_review_entity_delete($entity, $type) {
  $entity_wrapper = entity_metadata_wrapper($type, $entity);

  $query = db_select('entity_review', 'r')
    ->fields('r', array('id'))
    ->condition('r.eid', $entity_wrapper->getIdentifier())
    ->condition('r.type', $type);

  $review_ids = $query->execute()->fetchCol();

  if (!empty($review_ids)) {
    entity_delete_multiple('review', $review_ids);
  }
}

/**
 * Implements hook_term_merge().
 */
function entity_review_term_merge($term_trunk, $term_branch, $context) {
  // Get reviews for branch term.
  $query = db_select('entity_review', 'r')
    ->fields('r', array('id', 'uid'))
    ->condition('r.eid', $term_branch->tid)
    ->condition('r.type', 'taxonomy_term');
  $rids_branch = $query->execute()->fetchAllKeyed();

  if (!empty($rids_branch)) {
    // Get reviews for truck term from users of branch term reviews.
    $query = db_select('entity_review', 'r')
      ->fields('r', array('id', 'uid'))
      ->condition('r.uid', $rids_branch, 'IN')
      ->condition('r.eid', $term_trunk->tid)
      ->condition('r.type', 'taxonomy_term');
    $rids_trunk = $query->execute()->fetchAllKeyed();

    // Get reviews which need to be updated.
    $rids_update = array_diff($rids_branch, $rids_trunk);

    if (!empty($rids_update)) {
      // Update reviews from users who not reviewed trunk term yet.
      db_update('entity_review')
        ->fields(array('eid' => $term_trunk->tid))
        ->condition('id', array_keys($rids_update), 'IN')
        ->condition('type', 'taxonomy_term')
        ->execute();
    }

    // Get reviews which need to be removed.
    $rids_delete = array_intersect($rids_branch, $rids_trunk);

    if (!empty($rids_delete)) {
      // Remove reviews from users who already reviewed trunk term.
      entity_delete_multiple('review', array_keys($rids_delete));
    }
  }
}

/**
 * Implements hook_user_cancel().
 */
function entity_review_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish reviews.
      $ids = db_select('entity_review', 'r')
        ->fields('r', array('id'))
        ->condition('r.uid', $account->uid)
        ->execute()
        ->fetchCol();

      entity_review_mass_update($ids, array('status' => 0));
      break;

    case 'user_cancel_reassign':
      // Anonymize reviews.
      $ids = db_select('entity_review', 'r')
        ->fields('r', array('id'))
        ->condition('r.uid', $account->uid)
        ->execute()
        ->fetchCol();

      entity_review_mass_update($ids, array('uid' => 0));
      break;
  }
}

/**
 * Implements hook_user_delete().
 */
function entity_review_user_delete($account) {
  // Delete entity_reviews (current revisions).
  $ids = db_select('entity_review', 'r')
    ->fields('r', array('id'))
    ->condition('r.uid', $account->uid)
    ->execute()
    ->fetchCol();

  if (!empty($ids)) {
    entity_delete_multiple('review', $ids);
  }
}

/**
 * Make mass update of reviews, changing all reviews in the $reviews array
 * to update them with the field values in $updates.
 *
 * @param array $ids
 *   Array of entity_reviews ids to update.
 * @param array $updates
 *   Array of key/value pairs with reviews field names and the value to update that
 *   field to.
 */
function entity_review_mass_update($ids, $updates) {
  // We use batch processing to prevent timeout when updating a large number
  // of reviews.
  if (count($ids) > 10) {
    $batch = array(
      'operations' => array(
        array('_entity_review_mass_update_batch_process', array($ids, $updates))
      ),
      'finished' => '_entity_review_mass_update_batch_finished',
      'title' => t('Processing'),
      'error_message' => t('The update has encountered an error.'),
      'file' => drupal_get_path('module', 'entity_review') . '/entity_review.batch.inc',
    );

    batch_set($batch);
  }
  else {
    foreach (entity_load('review', $ids) as $review) {
      _entity_review_update($review, $updates);
    }

    drupal_set_message(t('The update has been performed.'));
  }
}

/**
 * Updates individual entity_reviews when fewer than 10 are queued.
 *
 * @param object $review
 *   An entity_review object to update.
 * @param $updates
 *   Associative array of updates.
 *
 * @return object
 *   An updated entity_review object.
 *   For entity types provided by the CRUD API, SAVED_NEW or SAVED_UPDATED is
 *   returned depending on the operation performed. If there is no information
 *   how to save the entity, FALSE is returned.
 *
 * @see entity_review_mass_update()
 */
function _entity_review_update($review, $updates) {
  // For efficiency manually save the original review before applying any changes.
  $review->original = clone $review;
  foreach ($updates as $name => $value) {
    $review->$name = $value;
  }

  return entity_save('review', $review);
}

/**
 * Implements hook_node_type_update().
 *
 * //@TODO: Update bundle:
 * field_attach_rename_bundle('review', 'review_' . $entity_name . '_' . $info->old_type, 'review_' . $entity_name . '_' . $info->type);
 */


/**
 * Implements hook_node_type_delete().
 *
 * //@TODO: Delete bundle.
 * field_attach_delete_bundle('review', 'review_' . $entity_name . '_' . $info->type);
 */
