<?php

/**
 * @file
 * Purge clears url's from CloudFlare cache by issuing HTTP POST requests.
 */

/**
 * Implements hook_menu().
 *
 * Set up admin settings callbacks, etc.
 */
function cfpurge_menu() {
  $items = array();
  $items['admin/config/development/performance/cfpurge'] = array(
    'title' => 'CloudFlare Purge settings',
    'description' => 'Configure CloudFlare cache purges.',
    'page callback' => 'drupal_get_form',
    'type'              => MENU_LOCAL_TASK,
    'page arguments' => array('cfpurge_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Menu callback for cfpurge admin settings.
 */
function cfpurge_admin_settings_form() {

  $form = array();
  $form['cfpurge_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('CloudFlare API URL'),
    '#default_value' => variable_get('cfpurge_api_url', 'https://www.cloudflare.com/api_json.html'),
    '#description' => t("Enter the URL for CloudFlare's API, clear the field to use the default URL."),
    '#required' => 1,
  );
  $form['cfpurge_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CloudFlare API Key'),
    '#default_value' => variable_get('cfpurge_api_key', ''),
    '#description' => t("Enter your key for CloudFlare's API service. You'll find this under Account"),
    '#required' => 1,
  );
  $form['cfpurge_parallel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send requests in parallel to API'),
    '#default_value' => variable_get('cfpurge_parallel', 0),
    '#description' => t('Will use curl_multi intead of single requests. Faster but uses more CPU.'),
  );
  $form['cfpurge_email'] = array(
    '#type' => 'textfield',
    '#title' => t('CloudFlare Email'),
    '#default_value' => variable_get('cfpurge_email', ''),
    '#description' => t('Enter the email address you use for CloudFlare.'),
    '#required' => 1,
  );
  $form['cfpurge_zone'] = array(
    '#type' => 'textfield',
    '#title' => t('CloudFlare Zone'),
    '#default_value' => variable_get('cfpurge_zone', ''),
    '#description' => t('Enter the Cloudflare zone assigned to this website, normally the domain.'),
    '#required' => 1,
  );
  $form['cfpurge_url_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Prefix'),
    '#default_value' => variable_get('cfpurge_url_prefix', url('', array('absolute' => TRUE))),
    '#description' => t('This converts the relative paths to absolute URLs using this prefix.'),
    '#required' => 1,
  );

  return system_settings_form($form);
}

/**
 * Validate the Purge settings.
 */
function cfpurge_admin_settings_form_validate($form, &$form_state) {

  // Check if API URL is valid.
  if (!valid_url($form_state['values']['cfpurge_api_url'], TRUE)) {
    form_set_error('cfpurge_api_url', t('This is not a valid URL: !url.', array('!url' => $form_state['values']['cfpurge_api_url'])));
  }

  // Check if path prefix is a valid URL.
  if (!valid_url($form_state['values']['cfpurge_url_prefix'], TRUE)) {
    form_set_error('cfpurge_api_url', t('This is not a valid URL: !url.', array('!url' => $form_state['values']['cfpurge_api_url'])));
  }
}

/**
 * Implements hook_exit().
 *
 * Add Cache-Control and Expires header,
 * to ensure external caching through CloudFlare.
 */
function cfpurge_exit() {
  $status = drupal_get_http_header("status");
  $is_error = preg_match('/^(4|5)/', $status);

  if (drupal_page_is_cacheable() &&
      !$is_error &&
      !variable_get('maintenance_mode', 0) &&
      !variable_get('cache', 0)) {

    $cache_lifetime = variable_get('cache_lifetime', 0);
    $maximum_age = variable_get('page_cache_maximum_age', 0);

    // Override core's expiration header.
    drupal_add_http_header('Cache-Control', 'public, max-age=' . $cache_lifetime);
    drupal_add_http_header('Expires', gmdate('D, d M Y H:i:s', time() + $maximum_age) . ' GMT');
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Alter the order of modules set off by the expire_cache hook. Moves this
 * module to the last place.
 */
function cfpurge_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'expire_cache') {
    // Move my_module_rdf_mapping() to the end of the list.
    $group = $implementations['cfpurge'];
    unset($implementations['cfpurge']);
    $implementations['cfpurge'] = $group;
  }
}

/**
 * Implements hook_expire_cache().
 *
 * Takes an array from expire.module and issues purge.
 */
function cfpurge_expire_cache($expire_urls) {
  module_load_include('inc', 'cfpurge');
  $results = cfpurge_urls($expire_urls);
  cfpurge_logging($results);
}
