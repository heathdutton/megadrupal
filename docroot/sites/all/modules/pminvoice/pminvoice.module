<?php

/**
 * @file
 * Main module file for the Project Management Invoice.
 */

/**
 * Implements hook_help().
 */
function pminvoice_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#pminvoice":
      $output = '<p>' . t("Provides integration of Project Management Drupal module with various invoicing contrib modules.") . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function pminvoice_menu() {
  $items = array();
  $items['admin/config/pm/pminvoice'] = array(
    'title' => 'PM Invoice',
    'description' => 'Configure default PM Invoice settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pminvoice_admin_settings'),
    'access arguments' => array('Project Management: access administration pages'),
  );
  return $items;
}

/**
 * Admin settings form for pminvoice module.
 */
function pminvoice_admin_settings() {
  $form = array();
  $connectors = array('pminvoice_invoice_connector');
  $form['pminvoice_enabled_connector'] = array(
    '#type' => 'select',
    '#title' => t('Default Invoice Connector'),
    '#options' => $connectors,
    '#default_value' => variable_get('pminvoice_enabled_connector', 0),
    '#description' => t('The default invoice connector.'),
    '#weight' => -30,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_action_info().
 */
function pminvoice_action_info() {
  return array(
    'pminvoice_add_to_invoice_update_action' => array(
      'type' => 'node',
      'label' => t('PM Invoice: Add to invoice'),
      'configurable' => FALSE,
    )
  );
}

/**
 * Action implementation of pminvoice_add_to_invoice_update_action.
 */
function pminvoice_add_to_invoice_update_action(&$node, $context) {
  $nid = $context['view_info']['arguments']['0'];
  $invoice = NULL;
  if($nid) {
    $invoice = node_load($nid);
  }

  try {
    $node_wrapper    = entity_metadata_wrapper('node', $node);
    $invoice_wrapper = entity_metadata_wrapper('node', $invoice);
    if ($node_wrapper->__isset('pm_billing_status')) {
      $pm_billing_status = $node_wrapper->pm_billing_status->value();
    }
    $line_item = pminvoice_get_billing_details($node);
  }
  catch (EntityMetadataWrapperException $exc) {
      watchdog(
        'pminvoice',
        'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
         NULL, WATCHDOG_ERROR
      );
  }



  module_invoke_all('pminvoice_connector_add_line_item', $invoice, $node, $line_item);
}

function pminvoice_get_billing_details($node) {
  try {
    $node_wrapper    = entity_metadata_wrapper('node', $node);
    if ($node_wrapper->__isset('pm_billing_status')) {
      $pm_billing_status = $node_wrapper->pm_billing_status->value();
    }
    $pm_amount = NULL;
    $quantity = 1;
    if ($node_wrapper->__isset('pm_amount')) {
      $pm_amount = $node_wrapper->pm_amount->value();
      # code...
    }

    if (empty($pm_amount)){
      $pricemode = $price = NULL;
      if ($node_wrapper->__isset('pm_pricemode')) {
        $pricemode = $node_wrapper->pm_pricemode->value();
      }
      if ($node_wrapper->__isset('pm_price')) {
        $price = $node_wrapper->pm_price->value();
      }
      if ($pricemode == 'fixed') {
        $pm_amount = $price;
      }
      else {
        if ($node_wrapper->__isset('pm_billing_duration')) {
          $duration = $node_wrapper->pm_billing_duration->value();
        }
        else if ($node_wrapper->__isset('pm_duration')) {
          $duration = $node_wrapper->pm_duration->value();
        }
        if ($node_wrapper->__isset('pm_durationunit')) {
          $duration_unit = $node_wrapper->pm_durationunit->value();
        }
        $quantity = pminvoice_helper_normalize_duration( $duration, $duration_unit);
        // @todo: figure out how to get rate from project.
        if ($pricemode) {
          $pm_amount = pminvoice_helper_normalize_price($price, $pricemode);
        }
        else {
          $pm_amount = pminvoice_helper_get_rate($node);
        }
      }
    }
    $line_item = array(
      "description" => $node_wrapper->label(),
      "quantity" => $quantity,
      "price_without_vat" => $pm_amount,
      "price_with_vat" => "",
    );
    return $line_item;
  }
  catch (EntityMetadataWrapperException $exc) {
      watchdog(
        'pminvoice',
        'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
         NULL, WATCHDOG_ERROR
      );
  }
  return FALSE;
}

function pminvoice_helper_normalize_duration( $duration, $duration_unit) {
  switch ($duration_unit) {
    case 'days':
      $multiplier = 8;
      break;
    case 'hour':
      $multiplier = 1;
      break;
    case 'minutes':
      $multiplier = 1/60;
    default:
      $multiplier = 1;
      break;
  }
  return $duration * $multiplier;
}

function pminvoice_helper_normalize_price( $price, $duration_unit) {
  switch ($duration_unit) {
    case 'days':
      $multiplier = 8;
      break;
    case 'hour':
      $multiplier = 1;
      break;
    case 'minutes':
      $multiplier = 1/60;
    default:
      $multiplier = 1;
      break;
  }
  return $price * $multiplier;
}

function pminvoice_helper_get_rate( $node ) {
  $nid = pm_get_parent($node, 'pmproject');
  if ($nid) {
    $project = node_load($nid);
    try {
      $wrapper    = entity_metadata_wrapper('node', $project);

      $duration_unit = $wrapper->pm_pricemode->value();
      $price    = $wrapper->pm_price->value();
      $rate = pminvoice_helper_normalize_price($price, $duration_unit);
      return $rate;
    }
    catch (EntityMetadataWrapperException $exc) {
        watchdog(
          'pminvoice',
          'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
           NULL, WATCHDOG_ERROR
        );
    }
  }
  return 0;
}


/**
 * Implements hook_pminvoice_connector_add_line_item().
 */
function pminvoice_pminvoice_connector_add_line_item($invoice, $node, $line_item) {
  if ($invoice AND $node AND $line_item) {
    try {
      $wrapper    = entity_metadata_wrapper('node', $node);
      if ($wrapper->__isset('pm_billing_status')) {
        $wrapper->pm_billing_status->set('Billed');
        $wrapper->save();
      }
    }
    catch (EntityMetadataWrapperException $exc) {
        watchdog(
          'pminvoice',
          'See '  . __FUNCTION__ . '() <pre>' .  $exc->getTraceAsString() . '</pre>',
           NULL, WATCHDOG_ERROR
        );
    }
  }
}


/**
 * Implements hook_views_api().
 */
function pminvoice_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pminvoice'),
  );
}
