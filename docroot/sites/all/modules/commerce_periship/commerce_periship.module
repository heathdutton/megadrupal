<?php

/**
 * @file
 * Handles main functionality for Commerce Periship module.
 */

require 'commerce_periship.xml.inc';

function commerce_periship_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/methods/periship/edit'] = array(
    'title' => 'Edit',
    'description' => 'Configure the Periship shipping method.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_periship_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'commerce_periship.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_periship_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['periship'] = array(
    'title' => t('Periship'),
    'description' => t('Quote rates from Periship'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_periship_commerce_shipping_service_info() {
  $shipping_services = array();

  $available_services = _commerce_periship_service_list();
  $selected_services = variable_get('commerce_periship_services', array());

  foreach ($selected_services as $id => $val) {
    if ($val != NULL) { // if you find a selected one...
      $service = $available_services[$id];
      $shipping_services[$service['slug']] = array(
        'title' => t($service['title']),
        'description' => t($service['description']),
        'display_title' => t($service['title']),
        'shipping_method' => 'periship',
        'price_component' => 'shipping',
        'callbacks' => array(
          'rate' => 'commerce_periship_service_rate_order',
        )
      );
    }
  }

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_periship_service_rate_order($shipping_service, $order) {
  // First attempt to recover cached shipping rates for the current order.
  $rates = commerce_shipping_rates_cache_get('periship', $order, variable_get('commerce_periship_rates_timeout', 0));
  // If no rates were recovered from the cache or the cached rates are over one minute old...
  if (!$rates) {
    $rates = array();

    // Build the rate request for the current order. This returns XML.
    $rate_request_xml = commerce_periship_build_rate_request($order);

    // If we got a valid rate request object back...
    if ($rate_request_xml) {
      // Submit the API request to Periship.
      $response = commerce_periship_api_request($rate_request_xml, t('Requesting shipping rates for Order @order_number', array('@order_number' => $order->order_number)));

      if (!empty($response)) {
        // Parse the response to cache all requested rates for the current order.
        foreach ($response->ServiceItem as $rate) {

          // Extract the service name and price information from the rate object.
          $service_name = commerce_periship_commerce_shipping_service_name((string) $rate->ServiceCode);
          $decimal = (string) $rate->TotalFee;
          $currency_code = 'USD';

          // Add an item to the rates array for the current service.
          $rates[$service_name] = array(
            'amount' => commerce_currency_decimal_to_amount($decimal, $currency_code),
            'currency_code' => $currency_code,
            'data' => array(),
          );
        }
        // Cache the calculated rates for subsequent requests.
        commerce_shipping_rates_cache_set('periship', $order, $rates);
      }
    }
  }

  // Return the rate for the requested service or FALSE if not found.
  return isset($rates[$shipping_service['name']]) ? $rates[$shipping_service['name']] : FALSE;
}

/**
 * hook_form_alter()
 */
function commerce_periship_form_alter(&$form, &$form_state, $form_id) {
  if ('commerce_checkout_form_shipping' == $form_id) {
    $image = drupal_get_path('module', 'commerce_periship') . '/images/fedex-logo.png';
    if (file_exists($image) && variable_get('commerce_periship_show_logo', FALSE)) {
      $form['commerce_shipping']['#title'] = $form['commerce_shipping']['#title'] . theme('image', array('path' => $image));
    }
  }
}


/**
 * Convenience function to get Periship codes for their services.
 */
function _commerce_periship_service_list() {
  $services =  array(
    // Domestic services
    '6' => array('title' => t('FedEx First Overnight'), 'description' => t('FedEx First Overnight Service - by 8:00 AM')),
    '1' => array('title' => t('FedEx Priority Overnight'), 'description' => t('FedEx Priority Overnight Service - by 10:30 AM')),
    '5' => array('title' => t('FedEx Standard Overnight'), 'description' => t('FedEx Standard Overnight Service - by 3:00 PM')),
    '3' => array('title' => t('FedEx 2Day'), 'description' => t('FedEx 2-Day Service - by 4:30 PM on 2nd business day')),
    '20' => array('title' => t('FedEx Express Saver'), 'description' => t('FedEx Express Saver Service - by 7:00 PM on 3rd business day')),
    '90' => array('title' => t('FedEx Home Delivery'), 'description' => t('FedEx Home Delivery Service')),
    '92' => array('title' => t('FedEx Ground'), 'description' => t('FedEx Ground Service')),
  );

  /* Make a unique ID to identify the service by */
  foreach ($services as $key => $service) {
    $service['slug'] = 'periship_' . str_replace(' ', '_', drupal_strtolower($service['title']));
    $services[$key] = $service;
  }
  return $services;
}

function commerce_periship_commerce_shipping_service_name($service_code) {
  $service_names = _commerce_periship_service_list();
  return $service_names[$service_code]['slug'];
}

/**
 * Encrypt a specified value.
 */
function commerce_periship_encrypt($value) {
  return aes_encrypt($value);
}

/**
 * Decrypt all api variables in one function call.
 */
function commerce_periship_decrypt_vars($include_password) {
  $user_vars = array();
  $encrypted = variable_get('commerce_periship_encrypt', FALSE) && function_exists('aes_decrypt');
  $user_vars['periship_accountid'] = variable_get('commerce_periship_account_id', '');
  if ($include_password) {
    $user_vars['periship_password'] = variable_get('commerce_periship_password', '');
  }
  if ($encrypted) {
    $user_vars['periship_accountid'] = aes_decrypt($user_vars['periship_accountid']);
    if ($include_password) {
      $user_vars['periship_password'] = aes_decrypt($user_vars['periship_password']);
    }
  }
  return $user_vars;
}

/**
 * Check whether encryption is available.
 */
function commerce_periship_encryption_available($options = array()) {
  $defaults = array(
    'check_config' => TRUE,
    'display_errors' => FALSE,
    'display_warnings' => FALSE,
    'display_all' => FALSE,
    'fail_threshold' => 'warnings',
  );
  $options = array_merge($defaults, $options);
  extract($options);
  $errors = array();
  $warnings = array();

  if (!module_exists('aes')) {
    $errors[] = 'AES Encryption module is not installed.';
  }
  elseif ($check_config) {
    if (!variable_get('aes_key_path', FALSE) || variable_get('aes_key_storage_method', FALSE) != 'File') {
      $warnings[] = 'AES Encryption is installed but not configured securely. Please go ' . l(t('configure AES Encryption to use file storage'), 'admin/settings/aes') . ' to enable encryption for Periship credentials.';
    }
  }

  if ($display_errors || $display_all) {
    foreach ($errors as $msg) {
      drupal_set_message(filter_xss(t($msg)), 'error', FALSE);
    }
  }

  if ($display_warnings || $display_all) {
    foreach ($warnings as $msg) {
      drupal_set_message(filter_xss(t($msg)), 'warning', FALSE);
    }
  }

  switch ($fail_threshold) {
    case 'errors':
      if (empty($errors)) {
        return TRUE;
      }
  case 'warnings':
    if (empty($errors) && empty($warnings)) {
      return TRUE;
    }
  }
}
