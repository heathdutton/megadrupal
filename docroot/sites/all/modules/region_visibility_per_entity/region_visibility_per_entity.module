<?php

/**
 * @file
 * Allows regions to be hidden per entity.
 */

/**
 * Implements hook_permission().
 */
function region_visibility_per_entity_permission() {
  return array(
    'set region visibility per node' => array(
       'title' => t('Set Region Visibility per Entity'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function region_visibility_per_entity_form_node_form_alter(&$form, &$form_state, $form_id) {
  $form['region_visibility_per_entity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Region Visibility Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#description' => t('Deselect regions (per theme) which should be hidden when this node is displayed.'),
    '#group' => 'additional_settings',
    '#access' => user_access('set region visibility per node'),
  );

  $themes = list_themes();
  foreach ($themes as $theme_name => $theme_info) {
    if ($theme_info->status == 1) {
      $form['region_visibility_per_entity'][$theme_name] = array(
        '#type' => 'fieldset',
        '#title' => check_plain($theme_info->info['name']) . ($theme_name == variable_get('default_theme', 'bartik') ? ' (' . t('Default theme') . ')' : ''),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
      );
      $default_regions = array_keys($theme_info->info['regions']);
      $form['region_visibility_per_entity'][$theme_name]['regions'] = array(
        '#type' => 'checkboxes',
        '#options' => $theme_info->info['regions'],
        '#title' => t('Regions'),
        '#default_value' => (isset($form['#node']->region_visibility_per_entity[$theme_name]['regions']) ? array_diff($default_regions, $form['#node']->region_visibility_per_entity[$theme_name]['regions']) : $default_regions),
      );
    }
  }
}

/**
 * Implements hook_page_build().
 */
function region_visibility_per_entity_page_alter(&$page) {
  global $theme;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = (int) arg(1);
    $node = node_load($nid);
    if (isset($node->region_visibility_per_entity[$theme]['regions'])) {
      foreach ($node->region_visibility_per_entity[$theme]['regions'] as $region) {
        // Prevent content region from being hidden on edit pages.
        if (!($region == 'content' && arg(2) == 'edit')) {
          unset($page[$region]);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function region_visibility_per_entity_entity_load($entities, $type) {
  $region_visibility_per_entity = region_visibility_per_entity_region_settings_load_multiple($type, array_keys($entities));
  foreach ($entities as $id => $entity) {
    $entities[$id]->region_visibility_per_entity = isset($region_visibility_per_entity[$id]) ? $region_visibility_per_entity[$id] : array();
  }
}

/**
 * Implements hook_entity_insert().
 */
function region_visibility_per_entity_entity_insert($entity, $entity_type) {
  _region_visibility_per_entity_entity_update_insert($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 */
function region_visibility_per_entity_entity_update($entity, $entity_type) {
  _region_visibility_per_entity_entity_update_insert($entity, $entity_type);
}

function _region_visibility_per_entity_entity_update_insert($entity, $entity_type) {
  if (isset($entity->region_visibility_per_entity)) {
    list($id) = entity_extract_ids($entity_type, $entity);
    $region_visibility_per_entity = _region_visibility_per_entity_array_process($entity->region_visibility_per_entity);
    region_visibility_per_entity_region_settings_save($entity_type, $id, $region_visibility_per_entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function region_visibility_per_entity_entity_delete($entity, $entity_type) {
  list($id) = entity_extract_ids($entity_type, $entity);
  region_visibility_per_entity_region_settings_delete($entity_type, $id);
}

/**
 * Load region display settings for an entity.
 *
 * @param string $type
 *   An entity type.
 * @param int $id
 *   An entity id.
 *
 * @return array
 *   An array of entity region visibility settings. Keyed by entity id.
 */
function region_visibility_per_entity_region_settings_load($type, $id) {
  $region_visibility_per_entity = region_visibility_per_entity_region_settings_load_multiple($type, array($id));
  return !empty($region_visibility_per_entity) ? reset($region_visibility_per_entity) : array();
}

/**
 * Load region display settings for mutiple entities.
 *
 * @param string $type
 *   An entity type.
 * @param array $ids
 *   An array of entity ids.
 *
 * @return array
 *   An array of entity region visibility settings. Keyed by entity id.
 */
function region_visibility_per_entity_region_settings_load_multiple($type, array $ids) {
  // Double check entity IDs are numeric.
  $ids = array_filter($ids, 'is_numeric');
  if (empty($ids)) {
    return array();
  }

  // Also need to check if the region_visibility_per_entity table exists since
  // this condition could fire before the table has been installed yet.
  static $db_table_exists;
  if(empty($db_table_exists)){
    $db_table_exists = db_table_exists('region_visibility_per_entity');
  }
  if (!$db_table_exists) {
    return array();
  }

  $region_visibility_per_entity = db_query("SELECT entity_id, data FROM {region_visibility_per_entity} WHERE entity_type = :type AND entity_id IN (:ids)", array(
    ':type' => $type,
    ':ids' => $ids,
  ))->fetchAllKeyed();
  $region_visibility_per_entity = array_map('unserialize', $region_visibility_per_entity);
  return $region_visibility_per_entity;
}

/**
 * Save region display settings for an entity.
 *
 * @param string $type
 *   An entity type.
 * @param int $id
 *   An entity id.
 * @param array $region_visibility_per_entity
 *   An array of region visibility settings.
 */
function region_visibility_per_entity_region_settings_save($type, $id, $region_visibility_per_entity) {
  // Check that $id is numeric because of Entity API and string IDs.
  if (!is_numeric($id)) {
    return;
  }

  // Allow other modules to alter the visibility settings prior to saving.
  foreach (module_implements('region_visibility_per_entity_presave') as $module) {
    $function = "{$module}_region_visibility_per_entity_presave";
    $function($region_visibility_per_entity, $type, $id);
  }

  if (empty($region_visibility_per_entity)) {
    // If the data array is empty, there is no data to actually save, so
    // just delete the record from the database.
    db_delete('region_visibility_per_entity')
      ->condition('entity_type', $type)
      ->condition('entity_id', $id)
      ->execute();
  }
  else {
    // Otherwise save the data for this entity.
    db_merge('region_visibility_per_entity')
      ->key(array(
        'entity_type' => $type,
        'entity_id' => $id,
      ))
      ->fields(array(
        'data' => serialize($region_visibility_per_entity),
      ))
      ->execute();
  }
}

/**
 * Delete region display settings for an entity.
 *
 * @param string $type
 *   An entity type.
 * @param int $id
 *   An entity id.
 */
function region_visibility_per_entity_region_settings_delete($type, $id) {
  return region_visibility_per_entity_region_settings_delete_multiple($type, array($id));
}

/**
 * Delete region display settings for multiple entities.
 *
 * @param string $type
 *   An entity type.
 * @param int $ids
 *   An array of entity ids.
 */
function region_visibility_per_entity_region_settings_delete_multiple($type, array $ids) {
  // Double check entity IDs are numeric.
  $ids = array_filter(array_keys($ids, 'is_numeric'));

  if ($region_visibility_per_entity = region_visibility_per_entity_region_settings_load_multiple($type, $ids)) {
    $transaction = db_transaction();
    try {
      db_delete('region_visibility_per_entity')
        ->condition('entity_type', $type)
        ->condition('entity_id', $ids, 'IN')
        ->execute();
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('region_visibility_per_entity', $e);
      throw $e;
    }
  }
}

/**
 * Convert form submission array into storage array.
 *
 * @param array $array
 *   Form submission array.
 */
function _region_visibility_per_entity_array_process($array) {
  foreach ($array as &$theme) {
    // Filter for unticked options.
    $theme['regions'] = array_filter($theme['regions'], 'is_int');
    $theme['regions'] = array_keys($theme['regions']);
  }
  return $array;
}
