<?php

/**
 * @file
 * Easy Blog module
 */


/**
 * Implements hook_init().
 */
function easy_blog_init() {
  $path = drupal_get_path("module", "easy_blog");
  drupal_add_css($path . "/css/easy_blog.css");
  drupal_add_js($path . "/js/easy_blog.js");
}


/**
 * Implements hook_menu().
 */
function easy_blog_menu() {
  // This is the minimum information you can provide for a menu item.
  $items['admin/config/easy_blog'] = array(
    'title' => 'Easy Blog',
    'description' => 'Adjust Easy Blog options.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/easy_blog/settings'] = array(
    'title' => 'Easy Blog Settings',
    'description' => 'Easy Blog settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('easy_blog_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'easy_blog.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_views_api().
 */
function easy_blog_views_api() {
  return array("version" => "3.0");
}

/**
 * Implements hook_node_info().
 */
function easy_blog_node_info() {
  $items = array(
    'blog_post' => array(
      'name' => t('Blog post'),
      'base' => 'node_content',
      'description' => 'An Easy Blog Post.',
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implements hook_image_default_styles().
 */
function easy_blog_image_default_styles() {
  $styles = array();

  // Exported image style: blog_post_image.
  $styles['blog_post_hero_image'] = array(
    'name' => 'blog_post_hero_image',
    'effects' => array(
      3 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '700',
          'height' => '394',
        ),
        'weight' => '1',
      ),
    ),
  );


  // Exported image style: blog_post_image.
  $styles['blog_post_image'] = array(
    'name' => 'blog_post_image',
    'effects' => array(
      3 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '301',
          'height' => '219',
        ),
        'weight' => '1',
      ),
    ),
  );

  // Exported image style: blog_teaser.
  $styles['blog_teaser'] = array(
    'name' => 'blog_teaser',
    'effects' => array(
      1 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => '300',
          'height' => '200',
        ),
        'weight' => '1',
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_theme().
 */
function easy_blog_theme() {
  $path = drupal_get_path('module', 'easy_blog');
  $hooks = array();
  $hooks['blog_post_by_month'] = array(
    'path' => $path . '/templates/blog',
    'variables' => array('archive' => NULL),
    'template' => 'blog_post_by_month',
  );

  return $hooks;
}

/**
 * Implements hook_block_info().
 */
function easy_blog_block_info() {
  $blocks = array();
  $blocks['easy_blog_archive'] = array('info' => t('Blog: Archive'));
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function easy_blog_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'easy_blog_archive':
      $block = easy_blog_get_blog_archive();
      break;
  }
  return $block;
}

/**
 * Get archive of blog posts.
 * @return string
 *   html
 */
function easy_blog_get_blog_archive() {
  $show_titles = variable_get('easy_blog_settings_nodes', 0);

  $query = db_select('field_data_field_blog_date', 'fdate');

  $query->addExpression("DATE_FORMAT(field_blog_date_value, '%M')", 'month');
  $query->addExpression("DATE_FORMAT(field_blog_date_value, '%m')", 'month_digits');
  $query->addExpression("DATE_FORMAT(field_blog_date_value, '%Y')", 'year');
  $query->addExpression("count(entity_id)", 'count');

  if ($show_titles) {
    $query->addExpression("group_concat(entity_id SEPARATOR '|')", "nids");
  }

  $query->leftJoin('node', 'n', 'n.vid = fdate.revision_id');
  $query->condition('n.status', 1);
  $query->condition('n.type', 'blog_post');

  $query->groupBy('year');
  $query->groupBy('month_digits');
  $query->orderBy('year', 'desc');
  $query->orderBy('month_digits', 'desc');

  drupal_alter('easy_blog_get_archive_query', $query);

  $rows = $query->execute()->fetchAll();

  $year_count = array();
  foreach ($rows as $row) {
    $year_count[$row->year] = (isset($year_count[$row->year])) ? $year_count[$row->year] + $row->count : $row->count;
  }

  $archive_data = array();
  foreach ($rows as $row) {
    $row->year_count = (isset($year_count[$row->year])) ? $year_count[$row->year] : 0;
    $archive_data[$row->year][$row->month] = $row;

    if ($show_titles) {
      $nids = explode("|", $row->nids);
      $subquery = db_select('node', 'n');
      $subquery->fields('n', array('nid', 'title'));
      $subquery->condition('n.nid', $nids, 'IN');
      $subquery->orderBy('created', "DESC");
      $limit = variable_get('easy_blog_settings_count_nodes', 10);
      if (!empty($limit)) {
        $subquery->range(0, $limit);
      }
      $archive_data[$row->year][$row->month]->nodes = $subquery->execute()->fetchAllKeyed(0);
    }
  }

  drupal_alter('easy_blog_get_archive_data', $archive_data);

  $block['subject'] = t('Browse by date');
  $block['content'] = theme('blog_post_by_month', array('archive' => $archive_data));
  return $block;
}

/**
 * Implements hook_easy_blog_get_archive_query().
 */
function easy_blog_easy_blog_get_archive_query_alter(&$query) {

}

/**
 * Implements hook_easy_blog_get_archive_data().
 */
function easy_blog_easy_blog_get_archive_data_alter(&$archive_data) {

}