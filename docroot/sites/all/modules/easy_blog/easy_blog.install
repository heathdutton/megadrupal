<?php

/**
 * @file
 * Install, update and uninstall functions for the easy blog module.
 */

/**
 * Implements hook_install().
 */
function easy_blog_install() {
  _easy_blog_create_taxonomies();
  _easy_blog_create_fields();

  module_load_include("inc", "easy_blog", "easy_blog.settings");

  $node_type = "blog_post"; // Made content type name generic

  _module_enable_set_node_submission_form_settings($node_type, 0);
  _module_enable_set_node_publishing_settings($node_type, array('status'));
  _module_enable_set_node_display_settings($node_type, 1);

  $comment_info = array(
    'comment' => array(
      'status' => 2,
      'default-mode' => 1,
      'anonymous' => 2,
      'default-per-page' => 30,
      'form-location' => 1,
      'preview' => 0,
      'subject-field' => 0,
    ),
  );
  _module_enable_set_node_comment_settings($node_type, $comment_info);

  $menu_info = array(
    'menu' => array(
      'options' => array(),
    ),
  );
  _module_enable_set_node_menu_settings($node_type, $menu_info);
}

/**
 * Implements hook_uninstall().
 */
function easy_blog_uninstall() {
  // Remove variables: Content type settings.
  $node_type = "blog_post"; // Made content type name generic
  $variables = array(
    'comment_default_mode_',
    'comment_default_per_page_',
    'comment_form_location_',
    'comment_',
    'comment_preview_',
    'comment_subject_field_',
    'entity_translation_comment_filter_',
    'entity_translation_node_metadata_',
    'language_content_type_',
    'menu_options_',
    'menu_parent_',
    'node_options_',
    'node_preview_',
    'node_submitted_',
    'additional_settings__active_tab_',
    'comment_anonymous_',
  );

  foreach ($variables as $variable) {
    $variable_name = $variable . $node_type;
    variable_del($variable_name);
  }

  variable_del("easy_blog_settings_nodes");

  // Gather all the content while the module was enabled.
  $q = db_select('node', 'n');
  $q->fields('n', array('nid', 'title'));
  $q->condition('n.type', 'blog_post');
  $result = $q->execute()->fetchAllKeyed();
  $nids = array_keys($result);

  // Delete all the nodes at once.
  node_delete_multiple($nids);

  // Delete any remaining field instances attached to this content type.
  $instances = field_info_instances('node', 'blog_post');
  foreach ($instances as $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type.
  node_type_delete('blog_post');

  // Purge all field information.
  field_purge_batch(1000);

  // Delete taxonomies.
  $machine_names = array('blog_category', 'blog_tags');
  foreach ($machine_names as $machine_name) {
    $taxonomy = taxonomy_vocabulary_machine_name_load($machine_name);
    taxonomy_vocabulary_delete($taxonomy->vid);
  }

  menu_cache_clear_all();
}


/**
 * Create fields for easy_blog content type.
 */
function _easy_blog_create_fields() {
  module_load_include('inc', 'easy_blog', 'includes/easy_blog.fields');
  $fields = _easy_blog_get_fields();

  field_info_cache_clear();

  // Load all the existing fields and instance up-front so that we don't.
  // have to rebuild the cache all the time.
  $existing_fields = field_info_fields();
  $existing_instances = field_info_instances();

  foreach ($fields as $field) {
    // Create or update field.
    $field_config = $field['field_config'];
    if (isset($existing_fields[$field_config['field_name']])) {
      $existing_field = $existing_fields[$field_config['field_name']];
      if ($field_config + $existing_field != $existing_field) {
        field_update_field($field_config);
      }
    }
    else {
      field_create_field($field_config);
      $existing_fields[$field_config['field_name']] = $field_config;
    }

    // Create or update field instance.
    $field_instance = $field['field_instance'];
    if (isset($existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']])) {
      $existing_instance = $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']];
      if ($field_instance + $existing_instance != $existing_instance) {
        field_update_instance($field_instance);
      }
    }
    else {
      field_create_instance($field_instance);
      $existing_instances[$field_instance['entity_type']][$field_instance['bundle']][$field_instance['field_name']] = $field_instance;
    }
  }
}

/**
 * Create vocabularies for blog.
 */
function _easy_blog_create_taxonomies() {
  module_load_include('inc', 'easy_blog', 'includes/easy_blog.taxonomy');
  $vocabularies = _easy_blog_get_taxonomy_vocabularies();

  $existing = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    $vocabulary = (object) $vocabulary;
    foreach ($existing as $existing_vocab) {
      if ($existing_vocab->machine_name === $vocabulary->machine_name) {
        $vocabulary->vid = $existing_vocab->vid;
      }
    }
    taxonomy_vocabulary_save($vocabulary);
  }
}
