<?php

/**
 * Internationalization 404
 *
 * If a variable such as the home page, 403 page, or 404 page is configured to
 * show a node, and that node has translations, the translations are used.
 */

/**
 * Implements hook_url_inbound_alter().
 *
 * Trick the system into thinking we actually are visiting the translated page.
 * This bypasses the need to implement hook_menu_get_item_alter(), which is
 * verily fraught with peril.
 */
function i18n_404_url_inbound_alter(&$path, $original_path, $path_language) {
  global $language;

  // Better statically cache this. Might get called a lot.
  $path_argument = $path; // Original argument, since it might change
  $altered_paths = &drupal_static(__FUNCTION__);

  if (!isset($altered_paths[$path][$original_path][$path_language])) {
    // Is this a 403 or 404 page that we should show in the proper language? IF:
    // - This is configured in one of the variables we care about
    // - We are not visiting the direct alias
    // - We are not visiting the direct system path
    // - This is an actual node, not a faked node path
    // ...then we should fix it up.

    // Wide strokes first.
    foreach(array('site_403', 'site_404', 'site_frontpage') as $variable) {
      $match = ($path == i18n_404_variable_get($variable));

      if ($match) {
        break;
      }
    }

    if ($match === FALSE) {
      $altered_paths[$path_argument][$original_path][$path_language] = $path;
      return;
    }

    $original_map = explode('/', $path);
    if (count($original_map) == 2 && $original_map[0] != 'node' || is_numeric($original_map[1]) === FALSE) {
      $altered_paths[$path_argument][$original_path][$path_language] = $path;
      return;
    }

    // Also leave things alone if we are visiting the 404 page directly. We
    // probably just want to edit it. This won't work when visiting its alias, but
    // the end result will be the same. If the 404 page doesn't exist in that
    // language, then it will 404 like a normal page and won't need special
    // handling.
    //
    // The point of the request_path() check here is not to bail if we're
    // visiting the front page. We should act upon that too.
    if (request_path() && $path == current_path()) {
      $altered_paths[$path_argument][$original_path][$path_language] = $path;
      return;
    }

    // Can we load 'er? If so, should be a node.
    if ($node = node_load($original_map[1])) {
      $path = i18n_404_get_translation_path($node, $language);
    }

    $altered_paths[$path_argument][$original_path][$path_language] = $path;
  }

  return $altered_paths[$path_argument][$original_path][$path_language];
}

// This is a wrapper around variable_get(). If i18n_variable is enabled and
// configured, it defers to that. If it's the same value, then it just returns
// the default language value.

// It's used above in checking if the requested path matches the one that
// should be shown.
function i18n_404_variable_get($variable, $language = NULL) {
  if (!isset($language)) {
    $language = language_default()->language;
  }

  $path = variable_get($variable);

  if (module_exists('i18n_variable')) {
    // Respect language-specific overrides. The user probably knows what they
    // are doing.
    if (i18n_variable_get($variable, $language) != variable_get($variable)) {
      $path = i18n_variable_get($variable, $language);
    }
  }

  return $path;
}

/**
 * Nothing special about this; just a wrapper for getting the path of
 * a translated node if one exists.
 */
function i18n_404_get_translation_path($node, $language) {
  // K, you have translations, bud?
  if (is_object($node) && isset($node->tnid) && $node->tnid) {
    $translations = translation_node_get_translations($node->tnid);

    // You have a translation in the user's current language?
    if ($translations[$language->language]) {
      // Awesome. Set the path to that instead. Oh, and don't loop
      // endlessly (don't use url()).
      return "node/{$translations[$language->language]->nid}";
    }
  }
  return "node/{$node->nid}";
}

