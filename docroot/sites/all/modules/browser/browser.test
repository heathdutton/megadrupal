<?php

/**
 * @file
 * Tests for the internal web browser.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Base browser test case that provides framework for testing both backends.
 */
class BrowserTestCase extends DrupalWebTestCase {

  /**
   * List of tests to run using both browser backends.
   *
   * @var array
   */
  protected $tests = array();

  public function setUp() {
    parent::setUp(array('browser', 'browser_test'));
  }

  /**
   * Cycle through each test and backend.
   */
  protected function testBrowser() {
    global $db_prefix;

    foreach ($this->tests as $test) {
      foreach (array('stream', 'curl') as $wrapper) {
        $this->pass('Using browser backend [' . $wrapper . '].');

        $browser = new Browser($wrapper == 'stream');
        $browser->setUserAgent(drupal_generate_test_ua($db_prefix));

        $this->$test($browser);
      }
    }
  }

  /**
   * Create an absolute URL given a path.
   *
   * @param $path
   *   Path to create an absoluite URL from.
   * @return
   *   Absolute URL.
   */
  protected function url($path) {
    return url($path, array('absolute' => TRUE));
  }
}

/**
 * Test browser meta and header refresh functionality.
 */
class BrowserRefreshTestCase extends BrowserTestCase {

  protected $tests = array('checkRefresh');

  public static function getInfo() {
    return array(
      'name' => 'Refresh',
      'description' => 'Test browser meta and header refresh functionality.',
      'group' => 'Browser',
    );
  }

  /**
   * Test browser meta and header refresh functionality.
   */
  protected function checkRefresh(Browser $browser) {
    // Check browser refresh, both meta tag and HTTP header.
    $request = $browser->get($this->url('browser_test/refresh/meta'));
    $this->assertEqual($request['content'], 'Refresh successful', 'Meta refresh successful ($request)');
    $this->assertEqual($browser->getContent(), 'Refresh successful', 'Meta refresh successful ($browser)');

    $request = $browser->get($this->url('browser_test/refresh/header'));
    $this->assertEqual($request['content'], 'Refresh successful', 'Meta refresh successful ($request)');
    $this->assertEqual($browser->getContent(), 'Refresh successful', 'Meta refresh successful ($browser)');
  }
}

/**
 * Test general execution of GET and POST requests.
 */
class BrowserRequestTestCase extends BrowserTestCase {

  protected $tests = array('checkRequests', 'checkHeaders');

  public static function getInfo() {
    return array(
      'name' => 'Request',
      'description' => 'Test general execution of GET and POST requests.',
      'group' => 'Browser',
    );
  }

  /**
   * Test general execution of GET and POST requests.
   */
  protected function checkRequests(Browser $browser) {
    $string = $this->randomName();
    $edit = array(
      'foo' => $string,
    );

    // Test GET method.
    $request = $browser->get(url('browser_test/print/get', array('absolute' => TRUE, 'query' => $edit)));
    $this->assertEqual($request['code'], 200, t('Response code of 200 found'));
    $this->assertEqual($string, $request['content'], t('String found during GET request ($request)'));
    $this->assertEqual($string, $browser->getContent(), t('String found during GET request ($browser)'));

    // Test POST method.
    $request = $browser->post($this->url('browser_test/print/post'), $edit, t('Submit'));
    $this->assertEqual($request['code'], 200, t('Response code of 200 found'));
    $this->assertEqual($string, $request['content'], t('String found during POST request ($request)'));
    $this->assertEqual($string, $browser->getContent(), t('String found during POST request ($browser)'));

    // Test HEAD method.
    $request = $browser->head(url('browser_test/request/headers', array('absolute' => TRUE)));
    $this->assertEqual($request['code'], 200, t('Response code of 200 found'));
    $this->assertTrue(!empty($request['headers']['x-foo']), t('Found [x-foo] header'));
    $this->assertFalse($request['content'], t('No content returned'));
  }

  /**
   * Ensure that browser handles request headers properly.
   */
  protected function checkHeaders(Browser $browser) {
    // Set headers using a combination of methods.
    $browser->setRequestHeaders(array(
      'foo' => 'bar',
      'bar' => 'foo',
      'drupal' => 'druplicon',
    ));
    $browser->setRequestHeader('bacon', 'cheese');
    $browser->setRequestHeader('leet', '1337');
    $browser->setRequestHeader('drupal', '17');

    // Ensure that request headers were merged properly.
    $headers = $browser->getRequestHeaders();
    $this->assertEqual($headers, array(
      'foo' => 'bar',
      'bar' => 'foo',
      'drupal' => '17',
      'bacon' => 'cheese',
      'leet' => '1337',
      'User-Agent' => $browser->getUserAgent(),
    ), 'Request headers built properly.');

    // Make a request and ensure that server receives headers properly.
    $browser->get($this->url('browser_test/print/headers'));

    // Evaluate the content since it should be a PHP array.
    eval('$server = ' . $browser->getContent() . ';');

    foreach ($headers as $key => $value) {
      $server_key = 'HTTP_' . str_replace('-', '_', strtoupper($key));
      $this->assertTrue(isset($server[$server_key]) && $server[$server_key] == $value, 'Found request header [' . $key . ']');
    }
  }
}

/**
 * Test browser page manipulation functionality.
 */
class BrowserPageTestCase extends BrowserTestCase {

  protected $tests = array('checkPageManipulation');

  public static function getInfo() {
    return array(
      'name' => 'Page',
      'description' => 'Test browser page manipulation functionality.',
      'group' => 'Browser',
    );
  }

  /**
   * Test browser page manipulation functionality.
   */
  protected function checkPageManipulation(Browser $browser) {
    $browser->get($this->url('browser_test/print/post'));
    $page = $browser->getPage();
    $input = $page->xpath('//input[@name="foo"]');
    $input = $input[0];
    $this->assertEqual('foo', $input['name'], t('Field "foo" found'));
  }
}

/**
 * Test page listener functionality.
 */
class BrowserListenerTestCase extends BrowserTestCase {

  protected $tests = array('checkListener');

  public static function getInfo() {
    return array(
      'name' => 'Listener',
      'description' => 'Test page listener functionality.',
      'group' => 'Browser',
    );
  }

  /**
   * Test page listener functionality.
   */
  protected function checkListener(Browser $browser) {
    $browser->setPageListener(array($this, 'listenerCallback'));

    $browser->get($this->url('browser_test/print/get'));
  }

  /**
   * Check the browser state to ensure it is correct.
   */
  public function listenerCallback(array $state) {
    $this->assertEqual($state['url'], $this->url('browser_test/print/get'), 'URL matches.');
    $this->assertTrue(!empty($state['headers']) && is_array($state['headers']), 'Headers found.');
    $this->assertEqual($state['content'], 'blank page - enjoy!', 'Content matches.');
  }
}
