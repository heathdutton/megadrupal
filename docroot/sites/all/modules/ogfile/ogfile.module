<?php

/**
 * @file
 * Provides Organic Group permissions for file entities.
 */

/**
 * Implements hook_og_permission().
 */
function ogfile_og_permission() {
  $perms = array();
  $file_info = entity_get_info('file');
  $bundles = array_keys($file_info['bundles']);

  // For each type of file, define a set of group-specific permissions.
  foreach ($bundles as $bundle) {
    $perms = array_merge($perms, ogfile_list_permissions($bundle));
  }

  return $perms;
}

/**
 * Helper function to generate standard file permission list for a given bundle.
 *
 * @param string $bundle
 *   The machine-readable name of the bundle.
 *
 * @return array
 *   An array of permission names and descriptions.
 *
 * @see og_list_permissions()
 */
function ogfile_list_permissions($bundle) {

  $file_info = entity_get_info('file');
  $info = $file_info['bundles'][$bundle];
  $perms = array();

  // Check type is of group content.
  if (og_is_group_content_type('file', $bundle)) {
    // Build standard list of permissions for this type.
    // We don't define "create file" permissions per bundle because we don't
    // know the file type until fairly late in the creation process.
    $perms += array(
      "view $bundle file" => array(
        'title' => t('View %type_name file', array('%type_name' => $info['label'])),
      ),
      "update $bundle file" => array(
        'title' => t('Edit %type_name file', array('%type_name' => $info['label'])),
      ),
      "delete $bundle file" => array(
        'title' => t('Delete %type_name file', array('%type_name' => $info['label'])),
      ),
    );

    // Add default permissions.
    foreach ($perms as $key => $value) {
      $perms[$key]['default role'] = array(OG_AUTHENTICATED_ROLE);
    }
  }
  return $perms;
}

/**
 * Implements hook_file_entity_access().
 */
function ogfile_file_entity_access($op, $file, $account) {
  if ($op == 'create') {
    return FILE_ENTITY_ACCESS_IGNORE;
  }

  $file_gids = array();
  $type = is_string($file) ? $file : $file->type;

  if (!og_is_group_content_type('file', $type)) {
    return FILE_ENTITY_ACCESS_IGNORE;
  }

  // Get all groups the file is part of.
  if ($file_entity_groups = og_get_entity_groups('file', $file)) {
    $file_gids = array_values($file_entity_groups['node']);
  }

  if (in_array($op, array('view', 'update', 'delete'))) {
    foreach ($file_gids as $gid) {
      if (og_user_access('node', $gid, "$op $type file")) {
        return FILE_ENTITY_ACCESS_ALLOW;
      }
    }
  }

  // Otherwise, don't affect file access.
  return FILE_ENTITY_ACCESS_IGNORE;
}

/**
 * Gets the group ids associated with a given file entity.
 *
 * @param obj $file
 *   The file entity for which to get groups.
 *
 * @return array
 *   A flat array the entity ids of associated groups.
 */
function ogfile_get_file_groups($file) {
  $file_gids = array();
  // Get all groups the file is part of.
  if ($file_entity_groups = og_get_entity_groups('file', $file)) {
    $file_gids = array_values($file_entity_groups['node']);
  }

  return $file_gids;
}
