<?php

/**
 * @file
 * Basic tests for File Compressor field module.
 */

/**
 * Basic tests for File Compressor field module.
 */
class CompressFieldTest extends FileFieldTestCase {

  public static function getInfo() {
    return array(
      'name' => 'File Compressor field basic tests',
      'description' => 'Test basic File Compressor field operations.',
      'group' => 'File Compressor field',
    );
  }

  function setUp() {
    parent::setUp('file_compressor_field', 'locale', 'entity_translation');
  }

  /**
   * Tests basic behavior.
   */
  function testBasicCompressField() {
    // Use article to reuse the image field.
    $type_name = 'article';
    $field_name = strtolower($this->randomName());
    $file_compressor_field_name = strtolower($this->randomName());
    $this->createFileField($field_name, $type_name, array('cardinality' => FIELD_CARDINALITY_UNLIMITED));
    $this->createCompressFileField($file_compressor_field_name, $type_name, array(), array(
        'compressed_fields' => drupal_map_assoc(array(
            $field_name,
            'field_image'
          ))
      ));
    $test_file = $this->getTestFile('text');
    $nid = $this->uploadNodeFile($test_file, $field_name, $type_name);
    $test_image = $this->getTestFile('image');
    $this->uploadNodeFile($test_image, 'field_image', $nid);
    $this->drupalGet('node/' . $nid);
    $node = node_load($nid, NULL, TRUE);
    list($id, $vid, $bundle) = entity_extract_ids('node', $node);
    $this->assertRaw("node-$id-$vid.zip");

    $this->assertCompressField($file_compressor_field_name, 'node', $node);
  }

  /**
   * Tests File Compressor field revision support.
   */
  function testCompressFieldRevisions() {
    $type_name = 'article';
    $field_name = strtolower($this->randomName());
    $file_compressor_field_name = strtolower($this->randomName());
    $this->createFileField($field_name, $type_name, array('cardinality' => FIELD_CARDINALITY_UNLIMITED));
    $this->createCompressFileField($file_compressor_field_name, $type_name, array(), array(
        'compressed_fields' => drupal_map_assoc(array(
            $field_name,
            'field_image'
          ))
      ));
    $test_file = $this->getTestFile('text');
    $nid = $this->uploadNodeFile($test_file, $field_name, $type_name);
    $test_image = $this->getTestFile('image');
    $this->uploadNodeFile($test_image, 'field_image', $nid);
    $this->drupalGet('node/' . $nid);
    $node = node_load($nid, NULL, TRUE);
    list($id, $vid, $bundle) = entity_extract_ids('node', $node);
    $this->assertRaw("node-$id-$vid.zip");

    $this->assertCompressField($file_compressor_field_name, 'node', $node);

    $this->removeNodeFile($nid);
    $test_file = $this->getTestFile('text');
    $this->uploadNodeFile($test_file, $field_name, $nid);
    $this->drupalGet('node/' . $nid);
    $node = node_load($nid, NULL, TRUE);
    list($id, $vid, $bundle) = entity_extract_ids('node', $node);
    $this->assertRaw("node-$id-$vid.zip");

    $this->assertCompressField($file_compressor_field_name, 'node', $node);
  }

  /**
   * Checks multilingual behavior for File Compressor field.
   */
  function testCompressFiledMultilingual() {
    $this->admin_user = $this->drupalCreateUser(array(
      'bypass node access',
      'administer nodes',
      'administer languages',
      'administer content types',
      'administer blocks',
      'access administration pages',
      'administer site configuration',
    ));
    $this->drupalLogin($this->admin_user);
    $this->addLanguage('en');
    $this->addLanguage('es');
    $type_name = 'article';
    $this->configureContentType($type_name);
    $field_name = strtolower($this->randomName());
    $file_compressor_field_name = strtolower($this->randomName());
    $this->createFileField($field_name, $type_name, array(
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ));
    $this->drupalGet('admin/structure/types/manage/article/fields/' . $field_name);
    $edit['field[translatable]'] = 1;
    $this->drupalPost(NULL, $edit, t('Save settings'));
    $this->drupalGet('admin/structure/types/manage/article/fields/' . $field_name);
    $this->createCompressFileField($file_compressor_field_name, $type_name, array('translatable' => 1), array(
      'compressed_fields' => drupal_map_assoc(array(
        $field_name,
        'field_image'
      ))
    ));
    $this->drupalGet('admin/structure/types/manage/article/fields/' . $file_compressor_field_name);
    $edit['field[translatable]'] = 1;
    $this->drupalPost(NULL, $edit, t('Save settings'));

    $test_file = $this->getTestFile('text');
    $extras['langcode'] = 'en';
    $extras['type'] = $type_name;
    $node = $this->drupalCreateNode($extras);
    $nid = $node->nid;
    $test_image = $this->getTestFile('image');
    $this->uploadNodeFile($test_image, 'field_image', $nid);
    // Attach a file to the node.
    $edit = array(
    'files[' . $field_name . '_und_0]' => drupal_realpath($test_file->uri),
    'language' => 'en',
  );
    $this->drupalPost("node/$nid/edit", $edit, t('Save'));
    $this->drupalGet('node/' . $nid);
    $node = node_load($nid, NULL, TRUE);
    list($id, $vid, $bundle) = entity_extract_ids('node', $node);
    $this->assertRaw("node-$id-$vid-en.zip");

    $this->assertCompressField($file_compressor_field_name, 'node', $node);

    // Create the translation.
    $this->drupalGet('node/' . $node->nid . '/edit/add/en/es');
    $test_file = $this->getTestFile('text');
    $edit = array();
    $edit['files[' . $field_name . '_es_1]'] = drupal_realpath($test_file->uri);
    $this->drupalPost(NULL, $edit, t('Save'));

    $node = node_load($nid, NULL, TRUE);
    $this->assertCompressField($file_compressor_field_name, 'node', $node);
  }

  /**
   * Creates a new File Compressor field.
   *
   * @param $name
   *   The name of the new field (all lowercase), exclude the "field_" prefix.
   * @param $type_name
   *   The node type that this field will be added to.
   * @param $field_settings
   *   A list of field settings that will be added to the defaults.
   * @param $instance_settings
   *   A list of instance settings that will be added to the instance defaults.
   * @param $widget_settings
   *   A list of widget settings that will be added to the widget defaults.
   */
  function createCompressFileField($name, $type_name, $field_settings = array(), $instance_settings = array(), $widget_settings = array()) {
    $field = array(
      'field_name' => $name,
      'type' => 'file_compressor',
      'settings' => array(),
      'cardinality' => 1,
    );
    $field['settings'] = array_merge($field['settings'], $field_settings);
    field_create_field($field);

    $this->attachCompressFileField($name, 'node', $type_name, $instance_settings, $widget_settings);
  }

  /**
   * Attaches a File Compressor field to an entity.
   *
   * @param $name
   *   The name of the new field (all lowercase), exclude the "field_" prefix.
   * @param $entity_type
   *   The entity type this field will be added to.
   * @param $bundle
   *   The bundle this field will be added to.
   * @param $instance_settings
   *   A list of instance settings that will be added to the instance defaults.
   * @param $widget_settings
   *   A list of widget settings that will be added to the widget defaults.
   */
  function attachCompressFileField($name, $entity_type, $bundle, $instance_settings = array(), $widget_settings = array()) {
    $instance = array(
      'field_name' => $name,
      'label' => $name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'required' => !empty($instance_settings['required']),
      'settings' => array(),
      'widget' => array(
        'type' => 'file_compressor_field',
        'settings' => array(),
      ),
    );
    $instance['settings'] = array_merge($instance['settings'], $instance_settings);
    $instance['widget']['settings'] = array_merge($instance['widget']['settings'], $widget_settings);
    field_create_instance($instance);
  }

  /**
   * Asserts if a File Compressor field contains the expected files.
   */
  function assertCompressField($file_compressor_field_name, $entity_type, $entity) {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $instance = field_info_instance($entity_type, $file_compressor_field_name, $bundle);
    $field = field_info_field($file_compressor_field_name);

    if (!empty($entity->{$file_compressor_field_name})) {
      $files = array();

      if ($field['translatable']) {
        foreach ($entity->{$file_compressor_field_name} as $langcode => $compressor_items) {
          $compressor_item = reset($compressor_items);
          $files = $this->filesInCompressor($entity_type, $entity, $instance, $langcode);
          $this->assertCompressedItemContent($compressor_item, $files);
        }
      }
      else {
        $compressor_items = field_get_items($entity_type, $entity, $file_compressor_field_name);
        $compressor_item = reset($compressor_items);
        $languages = language_list();
        foreach ($languages as $langcode => $language) {
          $files = array_merge($files, $this->filesInCompressor($entity_type, $entity, $instance, $langcode));
        }
        $this->assertCompressedItemContent($compressor_item, $files);
      }

    }
  }

  /**
   * Asserts if compressed file contains the expected files.
   */
  protected function assertCompressedItemContent($compressor_item, $files) {
    $files_in_compressor = array();
    if ($compressor_file = file_load($compressor_item['fid'])) {
      $zip = new ZipArchive();
      if ($zip->open(drupal_realpath($compressor_file->uri))) {
        for ($i = 0; $i < $zip->numFiles; $i++) {
          $files_in_compressor[] = $zip->getNameIndex($i);
        }
      }
    }
    if ($this->assertTrue(count($files_in_compressor) == count($files), 'The number of files in compressed file is right. ')) {
      foreach ($files as $file) {
        $pathinfo = pathinfo($file);
        $pattern = '/^' . $pathinfo['filename'] . '(_\d+)?\.' . $pathinfo['extension'] . '$/';
        $find = preg_grep($pattern, $files_in_compressor);
        $this->assertTrue(!empty($find), $file . ' was found in the compressed file');
      }
    }
  }

  /**
   * Determines which files should be in the compressed file given an entity.
   */
  protected function filesInCompressor($entity_type, $entity, $instance, $langcode) {
    drupal_static_reset('field_language');
    $supported_field_types = module_invoke_all('file_compressor_field_type_info');
    $files = array();
    foreach (array_filter($instance['settings']['compressed_fields']) as $field_name) {
      $items = field_get_items($entity_type, $entity, $field_name, $langcode);
      if (is_array($items)) {
        $field_info_field = field_info_field($field_name);
        $column = $supported_field_types[$field_info_field['type']]['column'];
        foreach ($items as $item) {
          $file = file_load($item[$column]);
          $files[$file->fid] = $file->filename;
        }
      }
    }
    return $files;
  }

  /**
   * Install a specified language if it has not been already, otherwise make sure that the language is enabled.
   *
   * @param $langcode
   *   The language code to check.
   */
  function addLanguage($langcode) {
    // Check to make sure that language has not already been installed.
    $this->drupalGet('admin/config/regional/language');

    if (strpos($this->drupalGetContent(), 'enabled[' . $langcode . ']') === FALSE) {
      // Doesn't have language installed so add it.
      $edit = array();
      $edit['langcode'] = $langcode;
      $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));

      // Make sure we are not using a stale list.
      drupal_static_reset('language_list');
      $languages = language_list('language');
      $this->assertTrue(array_key_exists($langcode, $languages), t('Language was installed successfully.'));

      if (array_key_exists($langcode, $languages)) {
        $this->assertRaw(t('The language %language has been created and can now be used. More information is available on the <a href="@locale-help">help screen</a>.', array(
              '%language' => $languages[$langcode]->name,
              '@locale-help' => url('admin/help/locale')
            )), t('Language has been created.'));
      }
    }
    elseif ($this->xpath('//input[@type="checkbox" and @name=:name and @checked="checked"]', array(':name' => 'enabled[' . $langcode . ']'))) {
      // It is installed and enabled. No need to do anything.
      $this->assertTrue(TRUE, 'Language [' . $langcode . '] already installed and enabled.');
    }
    else {
      // It is installed but not enabled. Enable it.
      $this->assertTrue(TRUE, 'Language [' . $langcode . '] already installed.');
      $this->drupalPost(NULL, array('enabled[' . $langcode . ']' => TRUE), t('Save configuration'));
      $this->assertRaw(t('Configuration saved.'), t('Language successfully enabled.'));
    }
  }

  /**
   * Configure a content type to support entity translation.
   */
  function configureContentType($content_type) {
    // Configure the "Basic page" content type to use multilingual support with
    // translation.
    $edit = array();
    $edit['language_content_type'] = ENTITY_TRANSLATION_ENABLED;
    $this->drupalPost('admin/structure/types/manage/' . $content_type, $edit, t('Save content type'));
  }
}
