<?php

/**
 * @file
 * Hook implementations and API functions for File Compressor field module.
 */

/**
 * Implements hook_help().
 */
function file_compressor_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#file_compressor_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides a "File Compressor" field type that allows to archive and compress attached files to an entity into a single file.') . '</p>';
      $output .= '<p>' . t('Given that this file is inside a new field on the entity, this module provides full integration with the entity system out of the box. Entity revisions and multilingual features work out of the box.') . '</p>';
      $output .= '<p>' . t('This field is totally hidden during the entity creation process, and makes use of default File field formatters to display the compressed file.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<p>' . t('Usage is straightforward. Add a "File Compressor" field to any entity and select the fields you want to include in the automatically generated compressed file from the list.') . '</p>';
      $output .= '<p>' . t('Configure the field visibility in the "Manage Display" tab.') . '</p>';
      $output .= '<p>' . t('If you made visible the File Compressor field, you will be able to download all the attachments to the entity in a single compressed file.') . '</p>';
      $output .= '<p>' . t('<strong>Note:</strong> By default, File Compressor field module only gives support for File and Image fields. Besides of that, provides hooks to extend it to other file based fields.') . '</p>';
      $output .= '<h3>' . t('Requirements') . '</h3>';
      $output .= '<p>' . t('This module provides by default two Compressor plugins, Zip and GZip. This list can be extended using hooks. Each zip provider requires a different PHP library:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Zip:</strong> php_zip extension. !link', array('!link' => l(t('PHP Zip Documentation'), 'http://php.net/manual/es/book.zip.php'))) . '</li>';
      $output .= '<li>' . t('<strong>GZip:</strong> Archive Tar PEAR package. !link', array('!link' => l(t('Archive Tar Documentation'), 'http://pear.php.net/package/Archive_Tar'))) . '</li>';
      $output .= '</ul>';
      return $output;
    case 'admin/config/media/file_compressor_field':
      $output = '<p>' . t('Select Fields you want to rebuild manually using File Compressor field.') . '</p>';
      $output .= '<p>' . t('This only should be necessary after creating compress field on existing entities or when modifying the fields to compress.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function file_compressor_field_menu() {
  $items['admin/config/media/file_compressor_field'] = array(
    'title' => 'File Compressor field',
    'description' => 'Rebuild manually File Compressor fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_compressor_field_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'file_compressor_field.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_field_info().
 */
function file_compressor_field_field_info() {
  return array(
    'file_compressor' => array(
      'label' => t('File Compressor'),
      'description' => t('This field stores the ID of a file as an integer value.'),
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
        'file_extension' => 'zip_built_in',
      ),
      'instance_settings' => array(
        'file_extensions' => 'zip',
        'file_directory' => '',
        'compressed_fields' => array(),
        'max_filesize' => '',
        'description_field' => 0,
      ),
      'default_widget' => 'file_compressor',
      'default_formatter' => 'file_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function file_compressor_field_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $scheme_options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $stream_wrapper) {
    $scheme_options[$scheme] = $stream_wrapper['name'];
  }
  $form['uri_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Upload destination'),
    '#options' => $scheme_options,
    '#default_value' => $settings['uri_scheme'],
    '#description' => t('Select where the final files should be stored. Private file storage has significantly more overhead than public files, but allows restricted access to files within this field.'),
    '#disabled' => $has_data,
  );

  $providers = file_compressor_field_load_provider_info();
  $options = array_map(function($item){
    return $item['name'];
  }, $providers);
  $form['file_extension'] = array(
    '#title' => t('File extension'),
    '#type' => 'radios',
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => $settings['file_extension'],
    '#disabled' => $has_data,
  );

  return $form;

}

/**
 * Implements hook_field_instance_settings_form().
 */
function file_compressor_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $valid_fields = array();

  // Use the file field instance settings form as a basis.
  $form = file_field_instance_settings_form($field, $instance);

  $entity_fields = field_info_instances($instance['entity_type'], $instance['bundle']);
  $all_fields = field_info_fields();
  $supported_field_types = module_invoke_all('file_compressor_field_type_info');

  // Get a list of all valid fields that we both support
  // and are part of this entity.
  foreach ($all_fields as $this_field) {
    if (array_key_exists($this_field['field_name'], $entity_fields)) {
      if (in_array($this_field['type'], array_keys($supported_field_types)) && ($this_field['field_name'] != $field['field_name'])) {
        $valid_fields[$this_field['field_name']] = $entity_fields[$this_field['field_name']]['label'];
      }
    }
  }

  $form['compressed_fields'] = array(
    '#title' => t('Fields to compress'),
    '#type' => 'checkboxes',
    '#options' => $valid_fields,
    '#default_value' => $settings['compressed_fields'],
  );

  $compressor = file_compressor_field_load_provider($field['settings']['file_extension']);

  $form['file_extensions']['#default_value'] = $compressor->getExtension();
  $form['file_extensions']['#access'] = FALSE;

  unset($form['description_field']);
  $form['max_filesize']['#access'] = FALSE;

  return $form;
}

/**
 * Implements hook_field_form_field_ui_field_edit_form_alter().
 */
function file_compressor_field_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'file_compressor_field') {
    // Hide the cardinality setting on the field settings for properties fields.
    $form['field']['cardinality']['#default_value'] = 1;
    $form['field']['cardinality']['#access'] = FALSE;

    // Set field to not required and hide the checkbox.
    $form['instance']['required']['#default_value'] = FALSE;
    $form['instance']['required']['#access'] = FALSE;
  }
}

/**
 * Implements hook_field_load().
 */
function file_compressor_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  file_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_presave().
 */
function file_compressor_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $supported_field_types = module_invoke_all('file_compressor_field_type_info');
  $langcodes = ($field['translatable']) ? array($langcode) : array_keys(language_list());
  foreach (array_filter($instance['settings']['compressed_fields']) as $field_to_compress) {
    foreach ($langcodes as $current_langcode) {
      $field_items = field_get_items($entity_type, $entity, $field_to_compress, $current_langcode);
      if (is_array($field_items)) {
        $field_info_field = field_info_field($field_to_compress);
        $column = $supported_field_types[$field_info_field['type']]['column'];
        foreach ($field_items as $field_item) {
          if (isset($field_item[$column]) && $field_item[$column] > 0 && !isset($files[$field_item[$column]])) {
            $current_file = file_load($field_item[$column]);
            $files[$current_file->fid] = $current_file->uri;
          }
        }
      }
    }
  }

  if (!empty($files) && $file = file_compressor_field_generate_compressed_file($entity_type, $entity, $field, $instance, $langcode, $items, $files)) {
    $items = array((array) $file);
    file_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_insert().
 */
function file_compressor_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function file_compressor_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function file_compressor_field_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function file_compressor_field_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_is_empty().
 */
function file_compressor_field_field_is_empty($item, $field) {
  return file_field_is_empty($item, $field);
}

/**
 * Generates compressed file when saving field.
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity's bundle.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   $entity->{$field['field_name']}[$langcode], or an empty array if unset.
 * @param $files
 *   Files to archive.
 *
 * @return bool|\stdClass
 *   Compressed file entity or FALSE if something fails.
 */
function file_compressor_field_generate_compressed_file($entity_type, $entity, $field, $instance, $langcode, $items = array(), $files = array()) {
  $compressor = file_compressor_field_load_provider($field['settings']['file_extension']);
  $create_compressed_file = empty($items) || !empty($entity->revision);
  if ($create_compressed_file) {
    $directory_uri = file_field_widget_uri($field, $instance);
    if (!file_prepare_directory($directory_uri, FILE_CREATE_DIRECTORY)) {
      drupal_set_message('The directory wasn\'t created or was not writable', 'error');
      return FALSE;
    }
    do {
      $file_uri = $compressor->generateCompressedFileUri($directory_uri . '/compressed_file_' . user_password(4));
      $exists = file_exists($file_uri);
    } while ($exists);
  }
  else {
    $compressed_field_components = $items['0'];
    $file_uri = $compressed_field_components['uri'];
  }

  if ($compressor->generateCompressedFile($file_uri, $files)) {
    global $user;
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = $file_uri;
    $file->uid = $user->uid;
    $file->filename = drupal_basename($file_uri);
    $file->status = FILE_STATUS_PERMANENT;
    // If we are replacing an existing file re-use its database record.
    if (!$create_compressed_file) {
      $file->fid = $compressed_field_components['fid'];
      $file->filename = $compressed_field_components['filename'];
    }
    $file = file_save($file);

    if ($create_compressed_file) {
      drupal_register_shutdown_function('file_compressor_field_store', $entity_type, $field, $instance, $langcode, $file);
    }
    return $file;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function file_compressor_field_field_widget_info() {
  return array(
    'file_compressor' => array(
      'label' => t('File Compressor'),
      'field types' => array('file_compressor'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function file_compressor_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $defaults = array(
    'fid' => 0,
    'display' => TRUE,
    'description' => '',
  );

  // Load the items for form rebuilds from the field state as they might not be
  // in $form_state['values'] because of validation limitations. Also, they are
  // only passed in as $items when editing existing entities.
  $field_state = field_form_get_state($element['#field_parents'], $field['field_name'], $langcode, $form_state);
  if (isset($field_state['items'])) {
    $items = $field_state['items'];
  }

  // Essentially we use the managed_file type, extended with some enhancements.
  $element += array(
    '#type' => 'hidden',
    '#access' => FALSE,
  );
  // Set the default value.
  $element['#default_value'] = !empty($items) ? $items[0] : $defaults;

  return array($element);
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function file_compressor_field_field_formatter_info_alter(&$info) {
  $info['file_default']['field types'][] = 'file_compressor';
  $info['file_table']['field types'][] = 'file_compressor';
  $info['file_url_plain']['field types'][] = 'file_compressor';
}

/**
 * Loads aggregated provider data.
 *
 * Modules can hook into this with hook_file_compressor_field_provider_info()
 * or hook_file_compressor_field_provider_info_alter().
 *
 * @param string $provider_id
 *   The provider id to load.
 *
 * @return array|bool
 *   The provider info array, or FALSE if it does not exist.
 */
function file_compressor_field_load_provider_info($provider_id = '') {
  $file_compressor_field_providers =& drupal_static(__FUNCTION__);

  if (empty($file_compressor_field_providers)) {
    $file_compressor_field_providers = module_invoke_all('file_compressor_field_provider_info');
    drupal_alter('file_compressor_field_provider_info', $file_compressor_field_providers);
  }

  if (empty($provider_id)) {
    return $file_compressor_field_providers;
  }
  elseif (!empty($file_compressor_field_providers[$provider_id])) {
    return $file_compressor_field_providers[$provider_id];
  }

  return FALSE;
}

/**
 * Implements hook_file_compressor_field_provider_info().
 */
function file_compressor_field_file_compressor_field_provider_info() {
  $providers = array(
    'zip_built_in' => array(
      'name' => t('Zip (Built in)'),
      'class' => 'CompressProviderZip',
      'path' => drupal_get_path('module', 'file_compressor_field') . '/includes',
    ),
    'gzip_zlib' => array(
      'name' => t('GZip (Zlib)'),
      'class' => 'CompressProviderGZip',
      'path' => drupal_get_path('module', 'file_compressor_field') . '/includes',
    ),
  );

  return $providers;
}

/**
 * Implements hook_file_compressor_field_field_type_info().
 */
function file_compressor_field_file_compressor_field_type_info() {
  return array(
    'image' => array(
      'column' => 'fid',
    ),
    'file' => array(
      'column' => 'fid',
    ),
  );
}

/**
 * Retrieves File Compressor field provider object.
 *
 * @param $provider_id
 *   The provider_id to load.
 *
 * @return CompressProviderInterface|bool
 *   The provider object, FALSE otherwise.
 */
function file_compressor_field_load_provider($provider_id) {
  $provider_info = file_compressor_field_load_provider_info($provider_id);
  if ($provider_info) {
    $class_name = $provider_info['class'];
    module_load_include('php', 'file_compressor_field', 'includes/CompressProviderInterface');
    include_once $provider_info['path'] . '/' . $provider_info['class'] . '.php';

    if (class_exists($class_name)) {
      $provider = new $class_name();
      if ($provider instanceof CompressProviderInterface) {
        return $provider;
      }
    }
  }

  return FALSE;
}

/**
 * Moves File Compressor field file to its definitive path.
 *
 * @param $entity_type
 *   The entity type name.
 * @param $field
 *   The field definition array.
 * @param $instance
 *   The instance definition array.
 * @param $langcode
 *   The specific langcode.
 * @param $file
 *   The file object to move.
 */
function file_compressor_field_store($entity_type, $field, $instance, $langcode, $file) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)
    ->fieldCondition($field['field_name'], 'fid', $file->fid);
  $result = $query->execute();

  if (!empty($result[$entity_type])) {
    $compressor = file_compressor_field_load_provider($field['settings']['file_extension']);
    $entity = entity_load($entity_type, array(key($result[$entity_type])));
    $directory_uri = file_field_widget_uri($field, $instance);
    list($id, $vid,) = entity_extract_ids($entity_type, reset($entity));
    $file_name_components = isset($vid) ? array($entity_type, $id, $vid) : array($entity_type, $id);
    if ($field['translatable']) {
      $file_name_components[] = $langcode;
    }
    $destination = $directory_uri . '/' . implode('-', $file_name_components);
    $destination = $compressor->generateCompressedFileUri($destination);
    if ($destination = file_unmanaged_move($file->uri, $destination, FILE_EXISTS_RENAME)) {
      $file->uri = $destination;
      $file->filename = drupal_basename($destination);
      file_save($file);
      cache_clear_all("field:$entity_type:$id", 'cache_field');
    }
  }
}
