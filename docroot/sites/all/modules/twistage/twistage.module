<?php

/**
 * Twistage Module -- a Drupal module to interact with the Twistage API
 * Copyright 2008 Matt Johnson, Observer Media Group
 * License: GPL V.2
 * Read the license here: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */
 
/**
 * Implementation of hook_menu
 */
function twistage_menu($may_cache) {
  $items = array();
  
  if (!$may_cache) {
    $items[] = array(
      'path' => 'admin/settings/twistage',
      'title' => t('Twistage settings'),
      'description' => t('Manage Twistage integration.'),
      'type' => MENU_NORMAL_ITEM,
      'callback' => 'twistage_settings_page',
      'access' => user_access('administer twistage'),
    );
    
    $items[] = array(
      'path' => 'admin/settings/twistage/profile',
      'title' => t('Twistage Profile'),
      'type' => MENU_CALLBACK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('twistage_profile_admin_form', arg(4)),
      'access' => user_access('administer twistage'),
    );
    
    $items[] = array(
      'path' => 'admin/settings/twistage/order',
      'title' => t('Twistage Play Order'),
      'type' => MENU_CALLBACK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('twistage_order_admin_form', arg(4)),
      'access' => user_access('administer twistage'),
    );
    
    $items[] = array(
      'path' => 'admin/settings/twistage/list',
      'title' => t('Manage profiles'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -5,
    );
    
    $items[] = array(
      'path' => 'admin/settings/twistage/global',
      'title' => t('Global settings'),
      'type' => MENU_LOCAL_TASK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('twistage_global_admin_form'),
      'weight' => -2,
    );
    
    // Workaround for problems with adding MENU_LOCAL_TASKs to this menu in an add-on module...
    if (module_exists('twistage_syndicate')) {
      $items[] = array(
        'path' => 'admin/settings/twistage/synconfig',
        'title' => t('Syndication settings'),
        'type' => MENU_LOCAL_TASK,
        'callback' => 'drupal_get_form',
        'callback arguments' => array('twistage_syndicate_admin_form'),
      );
    }

    $items[] = array(
      'path' => 'admin/settings/twistage/create',
      'title' => t('Create profile'),
      'type' => MENU_LOCAL_TASK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('twistage_profile_admin_form', 0),
      'access' => user_access('administer twistage'),
      'weight' => 5,
    );

    $items[] = array(
      'path' => 'admin/settings/twistage/sync',
      'title' => t('Sync Twistage videos'),
      'type' => MENU_CALLBACK,
      'callback' => 'twistage_sync_videos',
      'access' => user_access('administer twistage'),
    );
  
    $items[] = array(
      'path' => 'twistage/hook',
      'type' => MENU_CALLBACK_ITEM,
      'callback' => 'twistage_process_hook',
      'access' => user_access('access content'),
    );
    
    $items[] = array(
      'path' => 'twistage/preroll/hook',
      'type' => MENU_CALLBACK_ITEM,
      'callback' => 'twistage_preroll_hook',
      'access' => user_access('access content'),
    );
  }
  
  twistage_add_page_menu_items($items);
  
  return $items;
}

/**
 * Implementation of hook_perm
 */
function twistage_perm() {
  return array('administer twistage', 'view twistage pages');
}

/**
 * Implementation of hook_block
 */
function twistage_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
  case 'list':
    $blocks = array();
    $result = db_query("SELECT pid, name FROM {twistage_profiles} WHERE type='block'");
    while ($profile = db_fetch_object($result)) {
      $blocks[$profile->pid] = array('info' => 'Twistage: ' . $profile->name);
    }
    return $blocks;
  case 'view':
    $profile = twistage_get_profile($delta);
    return array('subject' => $profile->name, 'content' => theme('twistage_block', $delta));
  }
}

/**
 * Function to generate menu item arrays for page profiles.
 */
function twistage_add_page_menu_items(&$items) {
  $result = db_query("SELECT * FROM {twistage_profiles} WHERE type='page'");
  
  while ($profile = db_fetch_object($result)) {
    $items[] = array(
      'path' => $profile->path,
      'title' => $profile->description,
      'type' => MENU_CALLBACK,
      'callback' => 'twistage_profile_page',
      'callback arguments' => array($profile->name),
      'access' => user_access('view twistage pages'),
    );
  }
}

/**
 * Function to generate output for profiles with 'page' type.
 * Pipe through a theme function to let themers override this easily if they like.
 * In the New York Observer's use case, we need most pages to actually be nodes in order
 * to maintain block control, ads, etc, so it's useful to embed Twistage content by putting the following
 * into a php filter in the node body...
 * <?php print theme('twistage_page', 'profile_name'); ?>
 * ...rather than directing web users directly to $profile->path.
 */
function twistage_profile_page($name) {
  return theme('twistage_page', $name);
}

/**
 * Function to generate the admin form
 */
function twistage_profile_admin_form($pid) {
  $form = array();
  
  if (!is_numeric($pid)) {
    drupal_goto('admin/settings/twistage');
  }
  
  if ($pid) {
    $profile = twistage_get_profile($pid);
  } else {
    $profile = new stdClass; // will remain empty
  }
  
  $form['pid'] = array(
    '#type' => 'hidden',
    '#value' => $pid,
  );
  
  $form['profile'] = array(
    '#type' => 'fieldset',
    '#title' => t('Profile settings'),
  );
  
  $form['profile']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Profile name'),
    '#description' => t('An machine-readable Drupal identifier for this Twistage player.'),
    '#default_value' => $profile->name,
    '#required' => TRUE,
  );
  
  $form['profile']['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Profile description'),
    '#description' => t('A description of this profile (for public display).'),
    '#default_value' => $profile->description,
    '#required' => TRUE,
  );
    
  $form['profile']['company'] = array(
    '#type' => 'textfield',
    '#title' => t('Company ID'),
    '#description' => t('This can be found in the "Company Info" section of the "Accounts" tab in the Twistage admin area.'),
    '#default_value' => $profile->company,
    '#required' => TRUE,
   );
  
  $form['profile']['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Site name'),
    '#description' => t('The name of the Twistage site associated with this profile. This can be found in the "Sites" section of the "Settings" tab.'),
    '#default_value' => $profile->site_name,
    '#required' => TRUE,
  );
   
  $form['profile']['site_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Site license key'),
    '#description' => t('This can be also found in the "Sites" section of the "Settings" tab.'),
    '#default_value' => $profile->site_key,
    '#required' => TRUE,
  );
  
  $form['profile']['site_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Site publishing username'),
    '#description' => t('The username you use to log in to Twistage. Needed only for publishing videos through your Drupal site.'),
    '#default_value' => $profile->site_username,
  );
  
  $form['profile']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Show player as a'),
    '#options' => array('page' => t('Page'), 'block' => t('Block')),
    '#default_value' => $profile->type,
  );
  
  $form['profile']['page'] = array(
    '#type' => 'fieldset',
    '#title' => t('Page settings'),
  );
  
  $form['profile']['page']['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#description' => t('Only valid for page profiles'),
    '#default_value' => $profile->path,
    '#weight' => 1,
  );
  
  $form['profile']['page']['page_header'] = array(
    '#type' => 'textarea',
    '#title' => t('Page header'),
    '#default_value' => $profile->page_header,
    '#weight' => 2,
  );
  
  $form['profile']['page']['page_header_format'] = filter_form($profile->page_header_format, 3, array('page_header_format'));
  
  $form['profile']['page']['page_footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Page footer'),
    '#default_value' => $profile->page_footer,
    '#weight' => 4
  );
  
  $form['profile']['page']['page_footer_format'] = filter_form($profile->page_footer_format, 5, array('page_footer_format'));
  
  $form['profile']['page']['show_table'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show table of videos'),
    '#description' => t('Allow users to select other videos in the profile to view from a table on the page'),
    '#default_value' => $profile->show_table,
    '#weight' => 6,
  );
  
  if($profile->pid) {
    $form['profile']['sync'] = array(
      '#value' => t('<p>If you have set up your site to receive pings from Twistage, the local databse of videos will be updated continuously.</p>
                     <p>You can also <a href="/admin/settings/twistage/sync/' . $profile->pid . '">manually sync now</a>.</p>'),
    );
  }
   
  $form['player'] = array(
    '#type' => 'fieldset',
    '#title' => t('Player settings'),
  );
  
  $form['player']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Player width'),
    '#size' => 5,
    '#default_value' => $profile->width,
  );
  
  $form['player']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Player height'),
    '#size' => 5,
    '#default_value' => $profile->height,
  );
  
  $form['player']['autoplay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autoplay'),
    '#description' => t('Auto-start video playback once the page loads'),
    '#default_value' => $profile->autoplay,
  );
  
  $form['preroll'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pre-roll settings'),
  );
  
  $form['preroll']['info'] = array(
    '#value' => t('Some applications will want to show a mandatory "pre-roll" video before the actual payload video (generally for ads). To use pre-rolls, enter a company ID and site license key from which to draw pre-roll clips. Note that they may be the same as your primary company and key.'),
  );
  
  $form['preroll']['preroll_company'] = array(
    '#type' => 'textfield',
    '#title' => t('Pre-roll company ID'),
    '#default_value' => $profile->preroll_company,
  );
  
  $form['preroll']['preroll_site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Pre-roll site name'),
    '#default_value' => $profile->preroll_site_name,
  );
  
  $form['preroll']['preroll_site_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Pre-roll site license key'),
    '#default_value' => $profile->preroll_site_key,
  );
  
  $form['preroll']['preroll_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Pre-roll video link'),
    '#default_value' => $profile->preroll_url,
    '#maxlength' => 1024,
  );
  
  $form['hook'] = array(
    '#type' => 'fieldset',
    '#title' => t('Hook settings'),
  );
  
  $form['hook']['info'] = array(
    '#value' => t('<p>To receive "pings" from Twistage, you must create a username and password that Twistage will use to send data to your site.</p> 
                   <p>While it is technically possible to have a hook URL with no authentication, this module does not allow such a configuration for security reasons. If either of these fields are blank, pings will be acknowledged.</p>'),
  );
  
  
 if ($profile->username && $profile->password) {
    $form['hook']['url'] = array(
      '#value' => t('<p>You have entered a username and password. You should set the following as your Twistage hook URL:</p>
                     <p><i>http://' . $_SERVER['SERVER_NAME'] . '/twistage/hook/' . $profile->name. '/' . $profile->username . '/' . $profile->password . '</i></p>'),
    );
  } else {
    $form['hook']['url'] = array(
      '#value' => t('<p>You have not saved a username and password yet. A hook URL will be available when you have.</p>'),
    );
  }
    
  
  
  $form['hook']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => $profile->username,
  );
  
  $form['hook']['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('(will be shown in clear text)'),
    '#default_value' => $profile->password,
  );
   
  return system_settings_form($form);
}

/**
 * Function to validate the admin form
 */
function twistage_profile_admin_form_validate($form_id, $form_values) {
  if (preg_match('/[^a-zA-Z0-9_]/', $form_values['name'])) {
    form_set_error('name', 'Name may contain only alphanumeric characters and underscores.');
  }
  
  if (!is_numeric($form_values['width'])) {
    form_set_error('width', 'Non-numeric width entered.');
  }
  
  if (!is_numeric($form_values['height'])) {
    form_set_error('height', 'Non-numeric height entered.');
  }
}

/**
 * Function to process the admin form
 */
function twistage_profile_admin_form_submit($form_id, $form_values) {
  if ($form_values['pid']) {
    // Update
    db_query("UPDATE {twistage_profiles} SET name='%s', description='%s', type='%s', path='%s', company='%s', site_name='%s', site_key='%s', site_username='%s', width=%d, height=%d, show_table=%d, autoplay=%d, page_header='%s', page_header_format=%d, page_footer='%s', page_footer_format=%d, preroll_company='%s', preroll_site_name='%s', preroll_site_key='%s', preroll_url='%s', username='%s', password='%s' WHERE pid=%d",
             $form_values['name'],
             $form_values['description'],
             $form_values['type'],
             $form_values['path'],
             $form_values['company'],
             $form_values['site_name'],
             $form_values['site_key'],
             $form_values['site_username'],
             $form_values['width'],
             $form_values['height'],
             $form_values['show_table'],
             $form_values['autoplay'],
             $form_values['page_header'],
             $form_values['page_header_format'],
             $form_values['page_footer'],
             $form_values['page_footer_format'],
             $form_values['preroll_company'],
             $form_values['preroll_site_name'],
             $form_values['preroll_site_key'],
             $form_values['preroll_url'],
             $form_values['username'],
             $form_values['password'],
             $form_values['pid']);
    drupal_set_message('Updated profile "' . $form_values['name'] . '".');
    twistage_sync_videos($form_values['pid']);
  } else {
    // Insert
    $pid = db_next_id("{twistage_profiles}_pid");
    db_query("INSERT INTO {twistage_profiles} (pid, name, description, type, path, company, site_name, site_key, site_username, width, height, show_table, autoplay, page_header, page_header_format, page_footer, page_footer_format, preroll_company, preroll_site_name, preroll_site_key, preroll_url, username, password) 
              VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, %d, %d, %d, '%s', %d, '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s')",
             $pid,
             $form_values['name'],
             $form_values['description'],
             $form_values['type'],
             $form_values['path'],
             $form_values['company'],
             $form_values['site_name'],
             $form_values['site_key'],
             $form_values['site_username'],
             $form_values['width'],
             $form_values['height'],
             $form_values['show_table'],
             $form_values['autoplay'],
             $form_values['page_header'],
             $form_values['page_header_format'],
             $form_values['page_footer'],
             $form_values['page_footer_format'],
             $form_values['preroll_company'],
             $form_values['preroll_site_name'],
             $form_values['preroll_site_key'],
             $form_values['preroll_url'],
             $form_values['username'],
             $form_values['password']);
    drupal_set_message('Created profile "' . $form_values['name'] . '".');
    twistage_sync_videos($pid);
  }
  
  if ($form_values['type'] == 'page') {
    menu_rebuild();
  }
  
  return 'admin/settings/twistage';
}

/**
 * Generate the play order form
 */
function twistage_order_admin_form($pid = 0) {
  if (!$pid) {
    drupal_goto('admin/settings/twistage');
  }
  
  $profile = twistage_get_profile($pid);
  
  $form = array();
  
  $form['info'] = array(
    '#value' => t('Videos not assigned a play order will not be shown in the player.'),
  );
  
  $form['pid'] = array(
    '#type' => 'hidden',
    '#value' => $profile->pid,
  );
  
  $form['header'] = array(
    '#type' => 'value',
    '#value' => array(
      t('Order'),
      t('Video title'),
      t('Video ID'),
    ),
  );
  
  $result = db_query("SELECT vid, title, play_order, (play_order = 0) AS i FROM {twistage_videos} WHERE site_key='%s' AND pid=%d AND availability='available' ORDER BY i, play_order", $profile->site_key, $profile->pid);
  
  while ($row = db_fetch_object($result)) {
    $elem = "video_" . $row->vid;
    $form['data']['play_order'][$elem] = array(
      '#type' => 'textfield',
      '#size' => 1,
      '#default_value' => $row->play_order ? $row->play_order : "",
    );
    
    $form['data']['title'][$elem] = array(
      '#value' => $row->title,
    );
    
    $form['data']['vid'][$elem] = array(
      '#value' => $row->vid,
    );
  }
  
  // Preroll, if applicable
  if ($profile->preroll_company && $profile->preroll_site_name && $profile->preroll_site_key) {
    $result = db_query("SELECT vid, title, play_order FROM {twistage_videos} WHERE site_key='%s'", $profile->preroll_site_key);
    
    $prerolls = array(0 => 'None');
    $default = 0;
    while ($row = db_fetch_object($result)) {
      $prerolls[$row->vid] = $row->title . " (" . $row->vid . ")";
      if ($row->play_order == 1) {
        $default = $row->vid;
      }
    }
  
    $form['preroll'] = array(
      '#type' => 'radios',
      '#title' => t('Select pre-roll video'),
      '#options' => $prerolls,
      '#default_value' => $default,
    );
  }
    
  return system_settings_form($form);
}

/**
 * Theme function for play order form
 */
function theme_twistage_order_admin_form($form) {
  drupal_add_css(drupal_get_path('module', 'twistage') . '/twistage.css', 'module', 'all', FALSE);

  $rows = array();
  
  foreach (element_children($form['data']['play_order']) as $key) {
    $row = array();
    $row['data'][0] = array('data' => drupal_render($form['data']['play_order'][$key]), 'class' => 'twistage-order-td');
    $row['data'][1] = drupal_render($form['data']['title'][$key]);
    $row['data'][2] = drupal_render($form['data']['vid'][$key]);
    $rows[] = $row;
  }
  
  $output = theme('table', $form['header']['#value'], $rows, array('id' => 'twistage-order-table'));
  $output .= drupal_render($form);
  
  return $output;
}

/**
 * Valid play order form
 */
function twistage_order_admin_form_validate($form_id, $form_values) {
  foreach ($form_values as $key => $val) {
    if (substr($key, 0, 5) == "video" && $val && !is_numeric($val)) {
      form_set_error($key, 'Non-numeric order for video ' . substr($key, 6));
    }
  }
}

/**
 * Process play order form
 */
function twistage_order_admin_form_submit($form_id, $form_values) {
  $profile = twistage_get_profile($form_values['pid']);
  
  // Store old play orders to compare with new ones
  $orders = array();
  $result = db_query("SELECT vid, play_order FROM {twistage_videos} WHERE pid=%d AND site_key='%s'", $profile->pid, $profile->site_key);
  while ($video = db_fetch_object($result)) {
    $orders[$video->vid] = $video->play_order;
  }
  
  // First, wipe out all existing play orders
  db_query("UPDATE {twistage_videos} SET play_order=0 WHERE pid=%d AND site_key='%s'", $profile->pid, $profile->site_key);
  
  foreach ($form_values as $key => $val) {
    if (substr($key, 0, 5) == "video") {
      $vid = substr($key, 6);
      if ($val) {
        db_query("UPDATE {twistage_videos} SET play_order=%d WHERE vid='%s' AND pid=%d", $val, $vid, $profile->pid);
        if (!$orders[$vid]) {
          // Video was not previously in the play order, but it is now. Fire a "hook_twistage_order" to let other modules act
          foreach (module_implements('twistage_api') as $module) {
            $func = $module . '_twistage_api';
            $video = twistage_get_video($vid, $profile->pid);
            // TODO reenble when syn is working better
            $func('order add', $video);
          }
        }
      }
    }
  }
  
   // Reset play order on all prerolls
  db_query("UPDATE {twistage_videos} SET play_order=0 WHERE pid=%d AND site_key='%s'", $profile->pid, $profile->preroll_site_key);
  
  if ($form_values['preroll']) {
    // Set 1 on the chosen preroll if we have one
    db_query("UPDATE {twistage_videos} SET play_order=1 WHERE vid='%s' AND pid=%d", $form_values['preroll'], $profile->pid);
  }
  
  drupal_set_message('Play order updated successfully.');
  
  return 'admin/settings/twistage';
  
}
    
function twistage_global_admin_form() {
  $form = array();
  
  $form['info'] = array(
    '#value' => '<p>Because the preroll site is meant to be potentially shared among several profiles, a global hook URL is provided for it.<br />
                Enter a username and password for this hook URL, and it will update preroll videos in all profiles.</p>'
  );
  
  if (variable_get('twistage_preroll_hook_username', 0) && variable_get('twistage_preroll_hook_password', 0)) {
    $form['info2'] = array(
      '#value' => '<p>Your existing hook URL is: <i>http://' . $_SERVER['SERVER_NAME'] . '/twistage/preroll/hook/' . variable_get('twistage_preroll_hook_username', 0) . '/' . variable_get('twistage_preroll_hook_password', 0) . '</i>',
    );
  }
  
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('twistage_preroll_hook_username', ''),
  );
  
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('twistage_preroll_hook_password', ''),
    '#description' => t('Will be shown in clear text'),
  );  
  
  return system_settings_form($form);
}

function twistage_global_admin_form_submit($form_id, $form_values) {
  variable_set('twistage_preroll_hook_username', $form_values['username']);
  variable_set('twistage_preroll_hook_password', $form_values['password']);
  drupal_set_message('Preroll hook configuration saved.');
  return 'admin/settings/twistage';
}


/**
 * Generate the settings screen
 */
function twistage_settings_page($pid = 0) {
  if ($pid && is_numeric($pid)) {
    return drupal_get_form('twistage_profile_admin_form', $pid);
  } else {
    $result = db_query("SELECT pid, name, type, path FROM {twistage_profiles} WHERE 1");
    if (!db_num_rows($result)) {
      $content = '<p>No profiles found. <a href="/admin/settings/twistage/create">Create one now</a>.</p>';
      return $content;
    }
  
    $header = array(
      t('Name'),
      t('Type'),
      t('Path (if page)'),
      t('Operations'),
    );
    
    $rows = array();
    
    while ($profile = db_fetch_object($result)) {
      $rows[] = array(
        $profile->name,
        $profile->type,
        $profile->path,
        '<a href="/admin/settings/twistage/profile/' . $profile->pid . '">edit</a> &nbsp;&nbsp;&nbsp;' .
        '<a href="/admin/settings/twistage/order/' . $profile->pid . '">set play order</a> &nbsp;&nbsp;&nbsp;' .
        (module_exists('twistage_syndicate') ? '<a href="/admin/settings/twistage/syndication/' . $profile->pid . '">syndication</a>' : '') . "&nbsp;&nbsp;&nbsp;" .
        (module_exists('twistage_publish') ? '<a href="/admin/settings/twistage/publishing/' . $profile->pid . '">publishing</a>' : ''),
      );
    }
    
    return theme('table', $header, $rows);
  }
}

/**
 * Perform a sync of data from Twistage on all the videos associated with a certain profile.
 * @param pid
 *   profile ID to sync
 */
function twistage_sync_videos($pid = 0) {
  if (!$pid) {
    return;
  }
  
  $profile = twistage_get_profile($pid);
  
  if (!$profile) {
    return;
  }
  
  // Sync videos from the preroll site if one exists
  if ($profile->preroll_company && $profile->preroll_site_name && $profile->preroll_site_key) {
    $preroll = TRUE;
  }
  
  // Store play orders
  $result = db_query("SELECT * FROM {twistage_videos} WHERE pid=%d", $profile->pid);
  $order = array();
  while ($video = db_fetch_object($result)) {
    $order[$video->vid] = $video->play_order;
    $syn[$video->vid] = $video->syndicated;
  }
  
  // Get all videos (non-preroll)
  $main = twistage_fetch_videos($pid, false);
  // Sleep between API calls to satisfy the 1-req-per-second limit twistage imposes.
  usleep(1500000);
  // Get prerolls
  $prerolls = twistage_fetch_videos($pid, true);
  // Smash them together
  $videos = array_merge($main, $prerolls);
  if ($videos) {
    // Delete all existing data.
    db_query("DELETE FROM {twistage_videos} WHERE pid=%d", $pid);
  } else {
    // Bail out, and don't delete anything.
    drupal_set_message('Unable to sync. Please check the error log for more details.', 'error');
    drupal_goto('admin/settings/twistage');
  }

  foreach ($videos as $vdata) {
    $vdata = (array)$vdata; // To make accessing properties easier. PHP is not happy with object properties with dashes in them.
    
    $video = new stdClass;

    // Check to see if this video belongs to the main or preroll section
    if ($vdata['site-name'] == $profile->site_name) {
      $video->site_key = $profile->site_key;
    } else if ($preroll & ($vdata['site-name'] == $profile->preroll_site_name)) {
      $video->site_key = $profile->preroll_site_key;
    } else {
      // Skip video if no match on either site name
      continue;
    }
    
    $tags = array();
    foreach ($vdata['tags']->tag as $tag) {
      $tags[] = strval($tag->name);
    }
    
    $video->pid = $pid;
    $video->vid = $vdata['video-id'];
    $video->title = $vdata['title'];
    $video->description = $vdata['description'];
    $video->tags = $tags;
    $video->status = $vdata['status']; // different status codes are returned by "Search Videos" and "Video Metadata". For parity we use metadata.
    $video->availability = $vdata['availability'];
    $video->created = strtotime($vdata['created-at']);
    $video->publisher = $vdata['publisher-name'];
    
    twistage_save_video($video);
    
    if ($order[$video->vid]) {
      db_query("UPDATE {twistage_videos} SET play_order=%d WHERE vid='%s'", $order[$video->vid], $video->vid);
    } else {
      db_query("UPDATE {twistage_videos} SET play_order=0 WHERE vid='%s'", $video->vid);
    }
    
    if ($syn[$video->vid]) {
      db_query("UPDATE {twistage_videos} SET syndicated=%d WHERE vid='%s'", $syn[$video->vid], $video->vid);
    } else {
      db_query("UPDATE {twistage_videos} SET syndicated=0 WHERE vid='%s'", $video->vid);
    }
  }
  drupal_set_message('Video sync complete.');
  drupal_goto('admin/settings/twistage');
}

/**
 * Fetch an array of video objects from Twistage that are associated with the given profile. Note that they are returned in no particular order (just as Twistage provides them)
 * Calling this function when rendering any Drupal page will add notable latency, since it necessarily involves waiting for a reply from Twistage.
 * Therefore, this should only be called when syncing the local video DB with Twistage (i.e., upon installation or user request).
 * The form of the data returned is somewhat awkward for PHP (there are dashes in the object property names). For ease of use, when the objects are stored
 * locally in the databse, some of the properties are renamed. User-facing functions in this module use these local naming conventions, not what comes out of this function.
 * This function is a wrapper for the Twistage "Video Search API", although it returns an array of objects similar to what twistage_fetch_metadata returns,
 * since it requests the list of videos with a verbosity level of "high".
 * @param pid
 *   The profile for which to fetch videos
 * @param preroll
 *   Fetch videos associated with the preroll site for this profile, not the main site
 * @param start
 *   Optionally limit the search to videos posted after this timestamp
 * @param end
 *   Optionally limit the search to videos posted after this timestamp
 * @param limit
 *   Return only this many videos
 * @return
 *   array of video objects
 */
function twistage_fetch_videos($pid, $preroll = false, $start = 0, $end = 0, $limit = 0) {
  $profile = twistage_get_profile($pid);
  
  $signature = _twistage_authenticate($profile->site_key);
  
  if ($preroll) { 
    $url = "http://service.twistage.com/companies/" . urlencode($profile->preroll_company) . "/sites/" . urlencode($profile->preroll_site_name)  . "/videos.xml";
    $url .= "?verbosity=high&signature=" . urlencode($signature);
  } else {
    $url = "http://service.twistage.com/companies/" . urlencode($profile->company) . "/sites/" . urlencode($profile->site_name)  . "/videos.xml";
    $url .= "?verbosity=high&signature=" . urlencode($signature);
  }
  
  if ($start) {
    $s = getdate($start);
    $str = $s['year'] . '/' . $s['mon'] . '/' . $s['mday'];
    $url .= "&from=" . urlencode($str);
  }
  
  if ($end) {
    $s = getdate($end);
    $str = $s['year'] . '/' . $s['mon'] . '/' . $s['mday'];
    $url .= "&until=" . urlencode($str);
  }
  
  if ($limit) {
    $url .= "&limit=" . urlencode($limit);
  }
  
  $data = file_get_contents($url);
  
  if (!$data) {
    watchdog('twistage', 'Error obtaining video list from Twistage. Check your account settings.');
    return array();
  }
  
  $xml = simplexml_load_string($data);

  if ($xml) {
    foreach ($xml->video as $video) { 
      $videos[] = $video; 
    }
    return $videos;
  } else {
    watchdog('twistage', 'XML parse error in data fetched from Twistage');
    return array();
  }
}

/**
 * Fetch metadata for a video.
 * @param vid
 *   the video ID
 * @param pid
 *   profile ID from which to take authentication credentials
 * @return array
 *   an array of metadata
 */
function twistage_fetch_metadata($vid, $pid) {
  $profile = twistage_get_profile($pid);
  $signature = _twistage_authenticate($profile->site_key);
  $url = "http://console.twistage.com/videos/" . urlencode($vid) . ".xml?signature=" . urlencode($signature);
  $data = file_get_contents($url);
  if (!$data) {
    // No luck with the main site key, so try the preroll site key before failing
    $signature = _twistage_authenticate($profile->preroll_site_key);
    $url = "http://console.twistage.com/videos/" . urlencode($vid) . ".xml?signature=" . urlencode($signature);
    $data = file_get_contents($url);
    if (!$data) {
      watchdog('twistage', 'Could not fetch metadata for video ID ' . $vid, WATCHDOG_WARNING);
      return array();
    }
  }
  
  $xml = simplexml_load_string($data);
  return (array)$xml;
}
  


/**
 * Save a Twistage video object in the local database.
 * This doesn't work the same way as Drupal nodes, etc. The vid is determined by Twistage and we must use it since it's what must be passed to render a player.
 * This function does not touch play order or syndication data.
 * In no way does this function save anything to your Twistage account.
 * @param video
 *  Object representing the video to save. Must be a object following Drupal conventions (ie, renamed properties with dashes in them, timestamp instead of string for created time)
 */
function twistage_save_video($video) {
  if (!$video->vid || !$video->pid) {
    // Bail out if something is amiss.
    return;
  }

  $result = db_query("SELECT vid FROM {twistage_videos} WHERE vid='%s' AND pid=%d", $video->vid, $video->pid);
  if (db_num_rows($result)) {
    // Update
    db_query("UPDATE {twistage_videos} SET site_key='%s', title='%s', description='%s', tags='%s', status='%s', availability='%s', created=%d, publisher='%s' WHERE vid='%s' AND pid=%d",
      $video->site_key,
      $video->title,
      $video->description,
      serialize($video->tags),
      $video->status,
      $video->availability,
      $video->created,
      $video->publisher,
      $video->vid,
      $video->pid);
  } else {
    db_query("INSERT INTO {twistage_videos} (vid, pid, site_key, title, description, tags, status, availability, created, publisher) VALUES ('%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s')",
      $video->vid,
      $video->pid,
      $video->site_key,
      $video->title,
      $video->description,
      serialize($video->tags),
      $video->status,
      $video->availability,
      $video->created,
      $video->publisher);
  }
  
}

/**
 * Retrieve a Twistage video object from the local database. Retrieves all properties.
 * @param vid
 *   video ID
 * @return
 *   video object
 */
function twistage_get_video($vid, $pid) {
  $result = db_query("SELECT * FROM {twistage_videos} WHERE vid='%s' AND pid=%d", $vid, $pid);
  $video = db_fetch_object($result);
  // This was a particularly nasty bug which messed up a lot of things downstream that depended on $video being null if the vid didn't exist in the db
  // setting $video->tags to a blank array registers $video as non-null.
  if ($video) { 
    $video->tags = unserialize($video->tags);
  }
  return $video;
}

/**
 * Delete a Twistage video.
 * @param vid
 *  video ID
 */
function twistage_delete_video($vid) {
  $result = db_query("DELETE FROM {twistage_videos} WHERE vid='%s'", $vid);
}

/**
 * Return a Twistage profile object -- all properties.
 * @param pid
 *  profile ID
 * @return
 *  profile object
 */
function twistage_get_profile($pid) {
  return db_fetch_object(db_query("SELECT * FROM {twistage_profiles} WHERE pid=%d", $pid));
}

/**
 * Receives "pings" from Twistage and provide Drupal module hooks appropriately.
 * We expect the user will have entered a "Hook URL" in their Twistage account which includes a username and password as GET parameters. These must be entered in the admin form.
 * The actual Twistage hook data is passed as POST parameters.
 */
function twistage_process_hook($profile, $username, $password) {
  $profile = db_fetch_object(db_query("SELECT * FROM {twistage_profiles} WHERE name='%s'", $profile));

  // Check to see if we have a username/password. If not, we do not process the hook at all.
  if ($profile->username == '' || $profile->password == '') {
    return;
  }
  
  // Next, check to see if the username/password passed match these.
  if ($profile->username != $username || $profile->password != $password) {
    return;
  }

  // Now that we've passed those two tests, process the 
  switch ($_POST['action']) {
    case 'update':
    case 'create':
      // New video posted.
      $video = twistage_get_video($_POST['vid'], $profile->pid);
    
      if (!$video) {
        $video = new stdClass;
        $video->vid = $_POST['vid'];
        $video->pid = $profile->pid;
      }
      $video->title = $_POST['title'];
    
      $xml = twistage_fetch_metadata($video->vid, $video->pid);
    
      if($xml['site-name'] == $profile->preroll_site_name) {
        $video->site_key = $profile->preroll_site_key;
      } else {
        $video->site_key = $profile->site_key;
      }
      
      $tags = array();
      foreach ($xml['tags']->tag as $tag) {
        $tags[] = strval($tag->name);
      }
    
      $video->description = $xml['description'];
      $video->tags = $tags;
      $video->status = $xml['status'];
      $video->availability = $xml['availability'];
      $video->created = strtotime($xml['created-at']);
      $video->publisher = $xml['publisher-name'];
    
      // If we got a custom nid data field, include that in the video object so that hook implementations can see it
      if ($_POST['nid']) {
        $video->nid = $_POST['nid'];
      }
    
      twistage_save_video($video);
    
      // hook_twistage_api: Tell other modules about this if they're interested. In order to maintain consistenc, we do not pass the $video object by reference or act on any return value.
      foreach (module_implements('twistage_api') as $module) {
        $func = $module . '_twistage_api';
        $func($_POST['action'], $video);
      }
    
    break;

    case 'delete':
      $video = twistage_get_video($_POST['vid'], $profile->pid);
      foreach (module_implements('twistage_api') as $module) {
        $func = $module . '_twistage_api';
        $func('delete', $video);
      }
      twistage_delete_video($_POST['vid'], $profile->pid);
    break;  
  }

  // We don't actually want to render a page here, so stop code execution now.
  die();
}

function twistage_preroll_hook($username, $password) {
  // Basic security checks
  if (!variable_get('twistage_preroll_hook_username', 0) || !variable_get('twistage_preroll_hook_password', 0)) {
    return;
  }
  
  if ($username != variable_get('twistage_preroll_hook_username', '') || $password != variable_get('twistage_preroll_hook_password', '')) {
    return;
  }
  
  // Cycle through all profiles and check if the video exists there.
  $result = db_query("SELECT * FROM {twistage_profiles}");
  while ($profile = db_fetch_object($result)) {
    $video = twistage_get_video($_POST['vid'], $profile->pid);
    if ($video) {
      // We only act if the video is already in the profile; we're not adding videos to profiles that don't already have them.
      $xml = twistage_fetch_metadata($video->vid, $video->pid);
      $tags = array();
      foreach ($xml['tags']->tag as $tag) {
         $tags[] = strval($tag->name);
      }

      $video->description = $xml['description'];
      $video->tags = $tags;
      $video->status = $xml['status'];
      $video->availability = $xml['availability'];
      $video->created = strtotime($xml['created-at']);
      $video->publisher = $xml['publisher-name'];
       
      twistage_save_video($video);
      
      // Fire a hook_twistage_api for each profile/video combo.
      foreach (module_implements('twistage_api') as $module) {
        $func = $module . '_twistage_api';
        $func($_POST['action'], $video);
      }
    }
  }
}
      
function twistage_get_first_video($pid) {
  $profile = twistage_get_profile($pid);
  $video = db_fetch_object(db_query_range("SELECT * FROM {twistage_videos} WHERE pid=%d AND site_key='%s' AND play_order > 0 ORDER BY play_order", $pid, $profile->site_key, 0, 1));
  if ($video) {
    $video->tags = unserialize($video->tags);
  }
  return $video;
}

function twistage_get_preroll_video($pid) {
  $profile = twistage_get_profile($pid);
  $video = db_fetch_object(db_query_range("SELECT * FROM {twistage_videos} WHERE pid=%d AND site_key='%s' AND play_order > 0 ORDER BY play_order", $pid, $profile->preroll_site_key, 0, 1));
  if ($video) { 
    $video->tags = unserialize($video->tags);
  }
  return $video;
}


/**
 * Tool function to request a session signature from Twistage using the site license key.
 * @return
 *   string containing the session signature
 */
function _twistage_authenticate($key, $publishUser = '') {
  if ($publishUser) {
    $url = "http://service.twistage.com/api/publish_key";
    $url .= "?authKey=" . urlencode($key) . "&userID=" . urlencode($publishUser);
  } else {
    $url = "http://service.twistage.com/api/view_key";
    $url .= "?authKey=" . urlencode($key);    
  }
  
  $fp = fopen($url, "r");
  if ($fp) {
    $signature = fread($fp, 40);
    fclose($fp);
  } else {
    $signature = "";
  }
  
  return $signature;
}


/**
 * Theme function to return an HTML table with other videos.
 * I consider this the weakest link in this module, and future releases will hopefully
 * provide a more extensible means of listing other videos.
 */
function theme_twistage_table($pid, $exclude_vid, $getstr = 'vid', $page_path) {
  $profile = twistage_get_profile($pid);
  
  $result = db_query("SELECT * FROM {twistage_videos} WHERE pid=%d AND site_key='%s' AND play_order > 0 ORDER BY play_order", $pid, $profile->site_key);
  
  $header = array(array(
    'data' => t('<b>More videos from @name...</b>', array('@name' => $profile->description)), 
    'colspan' => 3,
  ));
  $rows = array();
  $row = array();
  while($video = db_fetch_object($result)) {
    if($video->vid != $exclude_vid) {
      $query = $getstr . '=' . $video->vid;
      $row[] = l('<img src="http://service.twistage.com/screenshots/' . $video->vid . '?width=150" class="twistage-thumb"><p style="padding:0px; text-align:center;">' . $video->title . '</p>', $page_path, NULL, $query, NULL, FALSE, TRUE);
    }
    if(count($row) == 3) {
      $rows[] = $row;
      $row = array();
    }
  }
  
  if($row) {
    $rows[] = $row;
  }
  
  if($rows) {
    return theme('table', $header, $rows, array('class' => 'twistage-table'));
  } else {
    return "";
  }
}

function theme_twistage_page($name, $width = 0, $height = 0) {
  // Bypass twistage_get_profile() here so that people can use theme('twistage_page', 'profile_name') in inline php without needing to remember a PID.
  $profile = db_fetch_object(db_query("SELECT * FROM {twistage_profiles} WHERE name='%s'", $name));
  
  if (!$width) {
    $width = $profile->width;
  }
  
  if (!$height) {
    $height = $profile->height;
  }
  
  // A bit of a workaround in case someone calls this from theme() on a profile without $profile->path set.
  if (!$profile->path) {
    // Pull out the request_uri before the query string
    preg_match('/^\/([^\?]*)(\??)(.*)$/', $_SERVER['REQUEST_URI'], $match);
    $path = $match[1];
  } else {
    $path = $profile->path;
  }
  
  $content = check_markup($profile->page_header, $profile->page_header_format);
  
  if ($_GET['vid']) {
    $video = twistage_get_video($_GET['vid'], $profile->pid);
  } else {
    $video = twistage_get_first_video($profile->pid);
  }
  
  $preroll = twistage_get_preroll_video($profile->pid);
  
  $content .= theme('twistage_video', $video, $preroll, $profile->preroll_url, $width, $height, $profile->autoplay);
  
  if ($profile->show_table) {
    $content .= theme('twistage_table', $profile->pid, $video->vid, 'vid', $path);
  }
  
  $content .= check_markup($profile->page_footer, $profile->page_footer_format);
  
  return $content;  
}

function theme_twistage_video($video, $preroll = NULL, $preroll_url = "", $width = 300, $height = 200, $autoplay = false) {
  // Return nothing if the video is not available. If we tried to render this, Twistage will return an error message anyway.
  if (!$video || $video->status != 'available' || $video->availability != 'available') {
    return '';
  }
  
  drupal_set_html_head('<script type="text/javascript" src="http://service.twistage.com/api/script"></script>');
  
  if ($autoplay) {
    $apstr = 'config: {autoplay: true},';
  } else {
    $apstr = '';
  }
  
  if(!$preroll) {
    $vid = $video->vid;
    $html = '
<script type="text/javascript">
  viewList([{ video_id: "'. $video->vid . '"}],
    {   ' . $apstr . '
        width: ' . $width . ',
        height: ' . $height . '
    }
  );
</script>';
  } else {
    $html = '
<script type="text/javascript">
  viewList([
  { video_id: "' . $preroll->vid . '",
    control_visibility: false,
    link: "' . urlencode($preroll_url) . '"},
  { video_id: "' . $video->vid . '" }  
  ], {
      ' . $apstr . '
      width: ' . $width . ',
      height: ' . $height . '
  });
</script>
';

 }
  
  return $html;
}

/**
 * Render the HTML for an embedded Twistage player. This could ultimately be combined functionality-wise with theme_twistage_video in a future version.
 *
 * @param videos
 *   An array of video objects as returned by twistage_fetch_videos.
 *   If the array contains one video, it will be rendered as such. If it contains multiple videos, they will be rendered in "playlist" mode.
 * @return 
 *   string containing the html to embed the player
 */
function theme_twistage_block($pid) {
  if (!$pid) {
    return "";
  }
  
  $profile = twistage_get_profile($pid);
  
  if (!$profile) {
    return "";
  }
  
  drupal_set_html_head('<script type="text/javascript" src="http://service.twistage.com/api/script"></script>');
  
  $videos = array();
  
  // Add pre-roll first, if applicable.
  $result = db_query("SELECT * FROM {twistage_videos} WHERE play_order > 0 AND pid=%d AND site_key='%s' AND availability='available'", $profile->pid, $profile->preroll_site_key);
  $preroll = db_fetch_object($result);
  if ($preroll) {
    $videos[] = array('data' => $preroll, 'controller' => 0);
  }
  
  // Probably need to remove LIMIT 1 from this when sprucing up this module for contrib
  $result = db_query_range("SELECT * FROM {twistage_videos} WHERE play_order > 0 AND pid=%d AND site_key='%s' AND availability='available' ORDER BY play_order", $profile->pid, $profile->site_key, 0, 1);
  while ($video = db_fetch_object($result)) {
    $videos[] = array('data' => $video, 'controller' => 1);
  }
  if (count($videos) == 1) {
    $video = array_shift($videos);
    $vid = $video['data']->vid;

    $html = '
      <script type="text/javascript">
        viewList([{ video_id: "'. $video['data']->vid . '"}],
          {   width: ' . $profile->width . ',
              height: ' . $profile->height . '
          });
      </script>';
  } else {
    foreach ($videos as $video) {
      if ($video['controller']) {
        $add[] = '{video_id:"' . $video['data']->vid . '"}';
      } else {
        $add[] = '{video_id:"' . $video['data']->vid . '", control_visibility: false, link: "' . urlencode($profile->preroll_url) . '"}';
      }
    }
    
    $vlist = implode(', ', $add);
    
    
    $html = '<script type="text/javascript">
        viewList([' . $vlist . '], {
          width: ' . $profile->width . ',
          height: ' . $profile->height . '
        });
      </script>';
  }
  
  return $html;
}