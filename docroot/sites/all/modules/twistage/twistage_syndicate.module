<?php

function twistage_syndicate_menu($may_cache) {
  $items = array();
  
  $items[] = array(
    'path' => 'twistage/syn/test',
    'type' => MENU_CALLBACK_ITEM,
    'callback' => 'twistage_syndicate_youtube',
    'access' => user_access('access content'),
  );
  
  $items[] = array(
    'path' => 'admin/settings/twistage/syndication',
    'type' => MENU_CALLBACK,
    'title' => t('Syndication status'),
    'callback' => 'twistage_syndicate_status',
    'callback arguments' => array(arg(4)),
    'access' => user_access('administer twistage'),
  );
  
  $items[] = array(
    'path' => 'admin/settings/twistage/synconfig',
    'type' => MENU_CALLBACK,
    'title' => t('Syndication settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'twistage_syndicate_admin_form',
    'access' => user_access('administer twistage'),
  );
  
  $items[] = array(
    'path' => 'admin/settings/twistage/syndication/force',
    'type' => MENU_CALLBACK,
    'callback' => 'twistage_syndicate_force_push',
    'callback arguments' => array(arg(5), arg(6)),
    'access' => user_access('administer twistage'),
  );
  
  $items[] = array(
    'path' => 'twistage/itunes',
    'type' => MENU_CALLBACK_ITEM,
    'callback' => 'twistage_syndicate_itunes_stream',
    'access' => user_access('access content'),
  );
  
  return $items;
}

/**
 * Implementation of hook_twistage_api
 */
function twistage_syndicate_twistage_api($op, $video) {
  /*if (!$video->syndicated) {
    twistage_syndicate_push_all($video->pid, $video->vid);
  }*/
  
  switch($op) {
    case 'order add':
      if (!$video->syndicated) {
        twistage_syndicate_push_all($video->pid, $video->vid);
      }
    break;
    
  }
}

function twistage_syndicate_admin_form() {
  $form = array();
  
  $form['youtube'] = array(
    '#type' => 'fieldset',
    '#title' => t('YouTube settings'),
  );
  
  $form['youtube']['yt_username'] = array(
    '#type' => 'textfield',
    '#title' => t('YouTube username'),
    '#description' => t('The username of the YouTube account which will own the syndicated videos'),
    '#default_value' => variable_get('twistage_syndicate_youtube_username', ''),
  );
  
  $form['youtube']['yt_password'] = array(
    '#type' => 'textfield',
    '#title' => t('YouTube password'),
    '#description' => t('The password to the YouTube account'),
    '#default_value' => variable_get('twistage_syndicate_youtube_password', ''),
  );
  
  $form['youtube']['yt_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('YouTube client ID'),
    '#description' => t('An identifier that you must obtain from the <a href="http://code.google.com/apis/youtube/dashboard">YouTube Developer Dashboard</a>'),
    '#default_value' => variable_get('twistage_syndicate_youtube_client_id', ''),
  );
  
  $form['youtube']['yt_developer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('YouTube developer key'),
    '#description' => t('An identifier that you must obtain from the <a href="http://code.google.com/apis/youtube/dashboard">YouTube Developer Dashboard</a>'),
    '#default_value' => variable_get('twistage_syndicate_youtube_developer_key', ''),
  );
  
  $form['blip'] = array(
    '#type' => 'fieldset',
    '#title' => t('Blip.tv settings'),
  );
  
  $form['blip']['blip_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Blip.tv username'),
    '#description' => t('The username of the Blip.tv account which will own the syndicated videos'),
    '#default_value' => variable_get('twistage_syndicate_blip_username', ''),
  );
  
  $form['blip']['blip_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Blip.tv password'),
    '#description' => t('The password of the Blip.tv account'),
    '#default_value' => variable_get('twistage_syndicate_blip_password', ''),
  );
  
  $form['itunes'] = array(
    '#type' => 'fieldset',
    '#title' => t('iTunes Podcast settings'),
  );
  
  $form['itunes']['info'] = array(
    '#value' => t('In order to generate an iTunes-compatible podcast, the videos in your Twistage 
                  profile must have an MP4 video asset associated with them. You can manually generate 
                  one for a given video by going to <i>http://service.twistage.com/videos/[video_id]/asset_summary</i>
                  and selecting "MP4 for Apple portable devices" (whichever size you prefer). You can also configure Twistage
                  to auto-generate this asset upon upload using the "Publish profiles" settings.'),
  );
  
  $form['itunes']['itunes_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Podcast title'),
    '#description' => t('The title of the podcast'),
    '#default_value' => variable_get('twistage_syndicate_itunes_title', ''),
  );
  
  $form['itunes']['itunes_summary'] = array(
    '#type' => 'textfield',
    '#title' => t('Podcast summary'),
    '#description' => t('Will be shown in iTunes in the "Description" column'),
    '#default_value' => variable_get('twistage_syndicate_itunes_summary', ''),
  );
  
  $form['itunes']['itunes_author'] = array(
    '#type' => 'textfield',
    '#title' => t('Podcast author'),
    '#description' => t('Will be shown in the Podcast preview page in iTunes'),
    '#default_value' => variable_get('twistage_syndicate_itunes_author',''),
  );
  
  $form['itunes']['itunes_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Podcast contact email'),
    "#description" => t('Email which Apple can use to contact you. Not shown publicly.'),
    '#default_value' => variable_get('twistage_syndicate_itunes_email',''),
  );
  
  $form['itunes']['itunes_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Podcast image URL'),
    "#description" => t('URL to an image which will be shown on the podcast preview page.'),
    '#default_value' => variable_get('twistage_syndicate_itunes_image',''),
  );
  
  $form['itunes']['itunes_category'] = array(
    '#type' => 'textfield',
    '#title' => t('Podcast category'),
    "#description" => t('A comma-separated list of categories.'),
    '#default_value' => variable_get('twistage_syndicate_itunes_category',''),
  );
  
  $form['itunes']['itunes_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Podcast link'),
    "#description" => t('A link to be associated with the podcast.'),
    '#default_value' => variable_get('twistage_syndicate_itunes_link',''),
  );
  
  
/*  
  $form['vimeo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vimeo settings'),
  );
  
  $form['vimeo']['vimeo_developer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Vimeo developer key'),
    '#description' => t('The developer key that Vimeo has provided to you at their <a href="http://www.vimeo.com/api">developer page</a>'),
    '#default_value' => variable_get('twistage_syndicate_vimeo_developer_key', ''),
  );
  
  $form['vimeo']['vimeo_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Vimeo secret key'),
    '#description' => t('The secret key that Vimeo has provided to you at their <a href="http://www.vimeo.com/api">developer page</a>'),
    '#default_value' => variable_get('twistage_syndicate_vimeo_secret_key', ''),
  );  
*/ 
  
  return system_settings_form($form);
}

function twistage_syndicate_admin_form_submit($form_id, $form_values) {
  variable_set('twistage_syndicate_youtube_username', $form_values['yt_username']);
  variable_set('twistage_syndicate_youtube_password', $form_values['yt_password']);
  variable_set('twistage_syndicate_youtube_client_id', $form_values['yt_client_id']);
  variable_set('twistage_syndicate_youtube_developer_key', $form_values['yt_developer_key']);
  
  variable_set('twistage_syndicate_blip_username', $form_values['blip_username']);
  variable_set('twistage_syndicate_blip_password', $form_values['blip_password']);
  
  variable_set('twistage_syndicate_vimeo_developer_key', $form_values['vimeo_developer_key']);
  variable_set('twistage_syndicate_vimeo_secret_key', $form_values['vimeo_secret_key']);
  
  variable_set('twistage_syndicate_itunes_summary', $form_values['itunes_summary']);
  variable_set('twistage_syndicate_itunes_author', $form_values['itunes_author']);
  variable_set('twistage_syndicate_itunes_email', $form_values['itunes_email']);
  variable_set('twistage_syndicate_itunes_image', $form_values['itunes_image']);
  variable_set('twistage_syndicate_itunes_category', $form_values['itunes_category']);
  variable_set('twistage_syndicate_itunes_link', $form_values['itunes_link']);
  variable_set('twistage_syndicate_itunes_title', $form_values['itunes_title']);
    
  drupal_set_message('Syndication settings saved.');
  
  return 'admin/settings/twistage';
}

function twistage_syndicate_force_push($pid, $vid) {
  twistage_syndicate_push_all($pid, $vid);
  $content = '<p>Syndication was completed. Please check the message queue for status.</p><p><a href="/admin/settings/twistage/syndication/'.$pid.'">Click here to return to syndication status listing</a>.</p>';
  return $content;
  //drupal_goto('admin/settings/twistage/syndication/' . $pid);
}

function twistage_syndicate_push_all($pid, $vid) {
  db_query("UPDATE {twistage_videos} SET syndicated=1 WHERE vid='%s' AND pid=%d", $vid, $pid);
  
  twistage_syndicate_blip_push($vid, $pid);
  twistage_syndicate_youtube_push($vid, $pid);
  //twistage_syndicate_vimeo_push($vid, $pid);
  
  drupal_set_message('Syndication complete for video ID ' . $vid . '.');
  return;
  //drupal_goto('admin/settings/twistage');
}

function twistage_syndicate_status($pid) {
  $profile = twistage_get_profile($pid);
  
  $header = array(
    'Video title',
    'Video ID',
    'Syndicated',
    'Operations',
  );
  
  $syn = array(0 => 'No', 1 => 'Yes');
  
  $result = db_query("SELECT * FROM {twistage_videos} WHERE pid=%d AND site_key='%s'", $profile->pid, $profile->site_key);
  
  $rows = array();
  while ($video = db_fetch_object($result)) {
    $rows[] = array(
      $video->title, 
      $video->vid, 
      $syn[$video->syndicated],
      '<a href="/admin/settings/twistage/syndication/force/' . $profile->pid . '/' . $video->vid . '">force syndicate now</a>',
    );
  }  
  
  return theme('table', $header, $rows);
}

// This functionality was discontinued when it became apparent the Vimeo API was too inscrutable (at least for me)
/*
function twistage_syndicate_vimeo_push($vid, $pid) {
  $api_key = variable_get('twistage_syndicate_vimeo_developer_key','');
  $secret_key = variable_get('twistage_syndicate_vimeo_secret_key','');
  $video = twistage_get_video($vid, $pid);
  if (!$api_key || !$secret_key) {
    // No keys entered, exit before doing anything
    return;
  }
  
  // First get Vimeo login key
  $postfields = array(
    'method' => 'vimeo.auth.getFrob',
    'api_key' => $api_key,
    'api_sig' => md5($secret_key . 'api_key' . $api_key . 'methodvimeo.auth.getFrob'),
  );
  
  $c = curl_init('http://www.vimeo.com/api/rest/');
  curl_setopt($c, CURLOPT_POST, TRUE);
  curl_setopt($c, CURLOPT_POSTFIELDS, $postfields);
  curl_setopt($c, CURLOPT_HEADER, FALSE);
  curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
  $data = curl_exec($c);
  $xml = (array)simplexml_load_string($data);

  if (!$xml['frob']) {
    drupal_set_message('Vimeo syndication failed for video "' . $video->title . '"');
    return;
  } else {
    $frob = $xml['frob']; 
  }
  
  $sig = md5($secret_key . 'api_key' . $api_key . 'frob' . $frob . 'permswrite');
  
  $c = curl_init('http://www.vimeo.com/services/auth/?api_key=' . $api_key . '&perms=write&frob=' . $frob . '&api_sig=' . $sig);
  curl_exec($c);
  
  $c = curl_init('http://www.vimeo.com/api/rest/');
  
  $postfields = array(
    'method' => 'vimeo.auth.getToken',
    'frob' => $frob,
    'api_key' => $api_key,
    'api_sig' => md5($secret_key . 'api_key' . $api_key . 'frob' . $frob . 'methodvimeo.auth.getToken'),
  );
  
  curl_setopt($c, CURLOPT_POST, TRUE);
  curl_setopt($c, CURLOPT_HEADER, FALSE);
  curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($c, CURLOPT_POSTFIELDS, $postfields);
  
  $data = curl_exec($c);
  //print $data;
  $xml = simplexml_load_string($data);
  print_r($xml);
  die();
  
  
  
  $meta = twistage_fetch_metadata($video->vid, $pid);
  $binary = file_get_contents($meta['main-asset-url']);
  $temp = file_directory_temp() . "/" . time() . ".flv";
  $fp = fopen($temp, "w+");
  fwrite($fp, $binary);
  fclose($fp);
  
  
}
*/

function twistage_syndicate_blip_push($vid, $pid) {
  $username = variable_get('twistage_syndicate_blip_username','');
  $password = variable_get('twistage_syndicate_blip_password','');
  
  if (!$username || !$password) {
    // No user/pass, exit
    return;
  }
  
  $video = twistage_get_video($vid, $pid);
  $meta = twistage_fetch_metadata($video->vid, $pid);
  
  // Blip does not require a two-step submissions or a login token, fortunately
  // However, it needs the upload as a multipart/form-data package, and curl will only take filess from the filesystem,
  // So we have a file to the temp. area
  $binary = file_get_contents($meta['main-asset-url']);
  $temp = file_directory_temp() . "/" . time() . ".flv";
  $fp = fopen($temp, "w+");
  fwrite($fp, $binary);
  fclose($fp);
  
  $postfields = array(
    'section' => 'file',
    'cmd' => 'post',
    'post' => 1,
    'userlogin' => $username,
    'password' => $password,
    'title' => $video->title,
    'file' => "@".$temp,
  );
  
  $c = curl_init("http://uploads.blip.tv?skin=api");
  curl_setopt($c, CURLOPT_POST, TRUE);
  curl_setopt($c, CURLOPT_HEADER, 0);
  curl_setopt($c, CURLOPT_POSTFIELDS, $postfields);
  curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
  $data = curl_exec($c);
  $xml = simplexml_load_string($data);
  unlink($temp);
  curl_close($c);
  
  if ($xml->status == "OK") {
    drupal_set_message('The video "' . $video->title . '" was successfully added to Blip.tv.');
  } else {
    drupal_set_message('Blip.tv syndication failed for the video "' . $video->title . '"');
  }
}

function twistage_syndicate_youtube_push($vid, $pid) {
  $username = variable_get('twistage_syndicate_youtube_username','');
  $password = variable_get('twistage_syndicate_youtube_password','');
  $client_id = variable_get('twistage_syndicate_youtube_client_id','');
  $developer_key = variable_get('twistage_syndicate_youtube_developer_key','');
  
  if (!$username || !$password || !$client_id || !$developer_key) {
    return;
  }

  $video = twistage_get_video($vid, $pid);
  $meta = twistage_fetch_metadata($video->vid, $pid);

  //print "Got video: \n"; print_r($video);
  //print "Got metadata: \n"; print_r($meta);
  
  $c = curl_init("https://www.google.com/youtube/accounts/ClientLogin");
  curl_setopt($c, CURLOPT_POST, TRUE);
  curl_setopt($c, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($c, CURLOPT_HEADER, 0);
  curl_setopt($c, CURLOPT_POSTFIELDS, "Email=" . urlencode($username) . "&Passwd=" . urlencode($password) . "&service=youtube&source=test");
  curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
  $data = curl_exec($c);
  curl_close($c);

  $parts = explode("\n", $data);
  $token = substr($parts[0], 5);
  
  //print "Got token: $token\n\n";
  
  $binary = file_get_contents($meta['main-asset-url']);
  
  //print "Got " . strlen($binary) . " bytes of binary video data.\n\n";
  
  //$cliptitle = str_replace(" ", "_", $video->title);
  $tags = array();
  foreach($meta['tags']->tag as $item) {
    $tags[] = str_replace(" ", "_", $item->name);
  }
  $keywords = implode(',', $tags);

  $content = <<<CONT
--f727dba9
Content-Type: application/atom+xml; charset=UTF-8

<?xml version="1.0"?>
<entry xmlns="http://www.w3.org/2005/Atom"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:yt="http://gdata.youtube.com/schemas/2007">
  <media:group>
    <media:title type="plain">{$video->title}</media:title>
    <media:description type="plain">
      {$video->description}
    </media:description>
    <media:category scheme="http://gdata.youtube.com/schemas/2007/categories.cat">People
    </media:category>
    <media:keywords>$keywords</media:keywords>
  </media:group>
</entry>
--f727dba9
Content-Type: video/flv
Content-Transfer-Encoding: binary

$binary
--f727dba9--
CONT;

  $len = strlen($content);
  $post = <<<POST
POST /feeds/api/users/$username/uploads HTTP/1.1
Host: uploads.gdata.youtube.com
Authorization: GoogleLogin auth=$token
X-GData-CLient: $client_id
X-GData-Key: key=$developer_key
Slug: {$video->title}
Content-Type: multipart/related; boundary="f727dba9"
Content-Length: $len
Connection: close

$content
POST;

  //print "Created post, length " . strlen($post) . "\n\n";

  $fp = fsockopen("uploads.gdata.youtube.com", 80);
  fwrite($fp, $post . "\r\n");
  
  //print "Wrote post.\n\n";

  $response = "";
  while (!feof($fp)) {
    $response .= fread($fp, 1024);
  } 

  fclose($fp);
  
  //print "Closed. Got response: \n"; print $response."\n\n";

  if (substr($response, 0, 20) == 'HTTP/1.1 201 Created') {
    drupal_set_message('The video "' . $video->title . '" was successfully added to YouTube.');
    //print "Set Drupal success message.\n";
  } else {
    drupal_set_message('YouTube syndication failed for the video "' . $video->title . '"');
    drupal_set_message('YouTube error: ' . $response);
    //print "Set Drupal error message.\n";
  }
//print $response."\n";
}

function twistage_syndicate_itunes_stream($pid) {
  if (substr($pid, -4) == ".xml") {
    $pid = intval(substr($pid, 0, -4));
  }
  
  if (!is_numeric($pid)) {
    return;
  }
  

  $profile = twistage_get_profile($pid);
  $result = db_query("SELECT * FROM {twistage_videos} WHERE pid=%d AND site_key='%s' AND availability='available' AND play_order>0 ORDER BY created DESC", $pid, $profile->site_key);
  
  $channelargs = array();
  $channelargs[] = array('key' => 'copyright', 'value' => '©' . date('Y') . ' ' . variable_get('twistage_syndicate_itunes_author',''));
  $channelargs[] = array('key' => 'itunes:subtitle', 'value' => variable_get('twistage_syndicate_itunes_summary',''));
  $channelargs[] = array('key' => 'itunes:author', 'value' => variable_get('twistage_syndicate_itunes_author',''));
  $channelargs[] = array('key' => 'itunes:summary', 'value' => variable_get('twistage_syndicate_itunes_summary',''));
  $channelargs[] = array('key' => 'itunes:owner', 'value' => array('itunes:name' => variable_get('twistage_syndicate_itunes_author',''), 'itunes:email' => variable_get('twistage_syndicate_itunes_email','')));
  $channelargs[] = array('key' => 'itunes:image', 'attributes' => array('href' => variable_get('twistage_syndicate_itunes_image','')));
  $channelargs[] = array('key' => 'itunes:category', 'attributes' => array('text' => variable_get('twistage_syndicate_itunes_category','')));
  
  $items = array();
  
  while ($video = db_fetch_object($result)) {
    $meta = twistage_fetch_metadata($video->vid, $pid);
    foreach ($meta['assets']->asset as $key => $val) {
      if ($val->acodec == 'mp4a' && $val->vcodec == 'mp4v') {
        $asset = (array)$val;
      }
    }
    if (!$asset) {
      continue; // omit this video from the feed since there's no iTunes-compatible asset
    }
    $durstr = floor($asset['duration'] / 60) . ":" . sprintf("%02d", round($asset['duration']) % 60);
    $args = array();
    $args[] = array('key' => 'itunes:author', 'value' => variable_get('twistage_syndicate_itunes_author',''));
    $args[] = array('key' => 'itunes:subtitle', 'value' => $video->description);
    $args[] = array('key' => 'itunes:summary', 'value' => $video->description);
    $args[] = array('key' => 'enclosure', 'attributes' => array('url' => $asset['download-url'], 'length' => $asset['size'], 'type' => 'video/mp4'));
    $args[] = array('key' => 'pubDate', 'value' => date('r', $video->created));
    $args[] = array('key' => 'itunes:duration', 'value' => $durstr);
    
    $items[] = format_rss_item($video->title, variable_get('twistage_syndicate_itunes_link',''), $video->description, $args);
  }
  
  $namespace = 'xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0"';
  $item_str = implode("\n", $items);
  
  $output = '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
  $output .= '<rss ' . $namespace . '>' . "\n";
  $output .= format_rss_channel(variable_get('twistage_syndicate_itunes_title',''), 
                                variable_get('twistage_syndicate_itunes_link',''), 
                                variable_get('twistage_syndicate_itunes_summary',''), 
                                $item_str, 
                                "en-US", 
                                $channelargs);
  $output .= "</rss>\n";
  
  print $output;
  
}


?>
