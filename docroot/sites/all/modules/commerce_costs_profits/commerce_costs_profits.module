<?php

/**
 * @file
 * Costs and Profits fields for Drupal Commerce.
 *
 * This file contains all the major functionality for providing a costs and
 * profits fields for the Drupal Commerce products, line items and orders.
 */

/**
 * Implements hook_permission().
 */
function commerce_costs_profits_permission() {
  $permissions = array();

  $permissions['commerce view product margins'] = array(
    'title' => t('View products costs and margins'),
    'description' => t('Allows users to view product costs and margins.'),
  );
  $permissions['commerce edit ordered line items costs'] = array(
    'title' => t('Edit line items costs on order edit page'),
  );
  $permissions['commerce edit ordered line items price'] = array(
    'title' => t('Edit line items unit prices on order edit page'),
  );
  $permissions['commerce edit ordered line items quantities'] = array(
    'title' => t('Edit line items unit quantities on order edit page'),
  );
  $permissions['commerce delete ordered line items'] = array(
    'title' => t('Delete line items on order edit page'),
  );
  $permissions['commerce configure costs products settings'] = array(
    'title' => t('Configure costs and profits module settings'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function commerce_costs_profits_menu() {
  $items = array();

  $items['admin/commerce/config/costs_profits'] = array(
    'title' => 'Costs and profits',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('commerce configure costs products settings'),
    'page arguments' => array('variable_group_form', 'commerce_costs_profits_main_settings'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 100,
  );

  return $items;
}

/**
 * Implements hook_modules_enabled().
 */
function commerce_costs_profits_modules_enabled($modules) {
  commerce_product_types_reset();
  commerce_costs_profits_configure_product_types();

  commerce_line_item_types_reset();
  commerce_costs_profits_configure_line_item_types();

  commerce_costs_profits_configure_order_types();
}

/**
 * Configure the product types defined by enabled modules.
 */
function commerce_costs_profits_configure_product_types() {
  foreach (commerce_product_types() as $product_type) {
    commerce_costs_profits_configure_product_type($product_type);
  }
}

/**
 * Ensures required fields are present on a product type bundle.
 */
function commerce_costs_profits_configure_product_type($type_info) {
  if (isset($type_info['disable costs profits']) && $type_info['disable costs profits']) {
    return;
  }
  commerce_price_create_instance('field_cost', 'commerce_product', $type_info['type'], t('Product cost'), 10);
}

/**
 * Configure all line item types defined by modules.
 */
function commerce_costs_profits_configure_line_item_types() {
  foreach (commerce_line_item_types() as $line_item_type) {
    commerce_costs_profits_configure_line_item_type($line_item_type);
  }
}

/**
 * Ensures required fields are present on a line item type bundle.
 */
function commerce_costs_profits_configure_line_item_type($type_info) {
  if (isset($type_info['disable costs profits']) && $type_info['disable costs profits']) {
    return;
  }
  commerce_price_create_instance('field_cost', 'commerce_line_item', $type_info['type'], t('Cost'), 10);
}

/**
 * Configure all order types defined by modules.
 */
function commerce_costs_profits_configure_order_types() {
  $entity = entity_get_info('commerce_order');
  foreach ($entity['bundles'] as $type_name => $type) {
    commerce_costs_profits_configure_order_type($type_name);
  }
}

/**
 * Ensures required fields are present on a order type bundle.
 */
function commerce_costs_profits_configure_order_type($type) {
  commerce_price_create_instance('field_expenses', 'commerce_order', $type, t('Order expenses'), 9);
  commerce_price_create_instance('field_profit', 'commerce_order', $type, t('Order profit'), 10);
}

/**
 * Returns if this line items editing enabled ny types settings.
 *
 * @param EntityMetadataWrapper $line_item
 *   Line item being checked.
 *
 * @return bool
 *   Result of the check
 */
function commerce_costs_profits_line_item_cost_editing_enabled(EntityMetadataWrapper $line_item) {
  $line_item_types = commerce_line_item_types();
  $line_item_type = $line_item_types[$line_item->type->value()];

  if (isset($line_item_type['disable costs profits']) && $line_item_type['disable costs profits']
    || isset($line_item_type['disable costs profits line item editing']) && $line_item_type['disable costs profits line item editing']) {

    return FALSE;
  }

  if (!isset($line_item_type['product']) || !$line_item_type['product']) {
    return TRUE;
  }

  $product_types = commerce_product_types();
  $product_type = $product_types[$line_item->commerce_product->type->value()];
  if (isset($product_type['disable costs profits']) && $product_type['disable costs profits']
    || isset($product_type['disable costs profits line item editing']) && $product_type['disable costs profits line item editing']) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_costs_profits_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['widget']['type'] != 'commerce_line_item_manager') {
    return;
  }

  $order_total = 0;
  $currency = '';

  $line_items = commerce_line_item_load_multiple(array_keys($element['line_items']));
  foreach ($line_items as $item_id => $line_item) {
    $li_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    if (empty($currency)) {
      $currency = commerce_currency_load($li_wrapper->commerce_unit_price->currency_code->value());
    }
    $cost = 0;
    $cost_string = '';
    $profit_string = '';
    $margin_value = '';
    if (isset($li_wrapper->field_cost) && $li_wrapper->field_cost->raw()) {
      $cost = $li_wrapper->field_cost->amount->value();
      $cost_string = commerce_currency_format($cost, $currency['code'], $line_item);
      $profit = ($li_wrapper->commerce_unit_price->amount->value() - $li_wrapper->field_cost->amount->value()) * $li_wrapper->quantity->value();
      $margin_value = round(($profit / ($li_wrapper->field_cost->amount->value() * $li_wrapper->quantity->value())) * 100);
      $profit_string = commerce_currency_format($profit, $currency['code'], $line_item);
    }

    $line_item_element = & $element['line_items'][$item_id];
    $line_item_element['margin']['#markup'] = $margin_value;
    if (!user_access('commerce edit ordered line items costs') || !commerce_costs_profits_line_item_cost_editing_enabled($li_wrapper)) {
      $line_item_element['field_cost']['#markup'] = $cost_string;
    }
    else {
      $line_item_element['field_cost'] = array(
        '#type' => 'textfield',
        '#default_value' => commerce_currency_amount_to_decimal($cost, $currency['code']),
        '#size' => 10,
        '#attributes' => array(
          'class' => array('field-widget-field-cost'),
        ),
      );
    }
    $line_item_element['profit']['#markup'] = $profit_string;
    $line_item_element['#line_item_type'] = $li_wrapper->type->value();
    if (!user_access('commerce edit ordered line items price')) {
      $line_item_element['commerce_unit_price'][$line_item_element['commerce_unit_price']['#language']][0]['amount']['#attributes'] = array('disabled' => 'disabled');
    }
    if (!user_access('commerce edit ordered line items quantities')) {
      $line_item_element['quantity']['#attributes'] = array('disabled' => 'disabled');
    }
    if (!user_access('commerce delete ordered line items')) {
      $line_item_element['remove']['#type'] = 'hidden';
    }

    $order_total += $li_wrapper->commerce_total->amount->value();
  }
  if (empty($currency)) {
    $currency = commerce_currency_load();
  }

  $order_total_string = commerce_currency_format($order_total, $currency['code']);
  $element['order_total']['#markup'] = "<div id='order-edit-order-total'><span id='order-edit-order-total-label'>" .
    t('Order total') . ":</span> <span class='value'>{$order_total_string}</span></div>";

  $element['#attached']['js'][] = drupal_get_path('module', 'commerce_costs_profits') .
    '/js/order_edit_form.js';

  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'currency_symbol' => array(
        'before' => $currency['symbol_placement'] == 'before' ? $currency['symbol'] : '',
        'after' => $currency['symbol_placement'] == 'after' ? $currency['symbol'] : '',
      ),
    ),
  );

  $element['#attached']['js'][] = drupal_get_path('module', 'commerce_costs_profits') .
    '/js/order_edit_form.js';

  if (user_access('commerce edit ordered line items costs')) {
    array_unshift($element['#element_validate'], 'commerce_costs_profits_commerce_line_item_manager_validate');
  }
}

/**
 * Validates costs values and stores them in line items if changed.
 *
 * @param array $element
 *   Element being validated.
 * @param array $form_state
 *   Form state being validated.
 * @param array $form
 *   Form being validated.
 */
function commerce_costs_profits_commerce_line_item_manager_validate(array $element, array &$form_state, array $form) {
  foreach (element_children($element['line_items']) as $line_item_id) {
    $line_item_row = $element['line_items'][$line_item_id];
    if (!isset($line_item_row['field_cost']['#value'])) {
      continue;
    }

    $cost = $line_item_row['field_cost']['#value'];

    if (!is_numeric($cost) || $cost < 0) {
      $element_name = implode('][', $line_item_row['quantity']['#parents']);
      form_set_error($element_name, t('You must specify a positive number for the cost'));
    }
    else {
      $cost *= 100;
      $line_item = entity_metadata_wrapper('commerce_line_item', $line_item_row['line_item']['#value']);
      if (isset($line_item->field_cost) && $line_item->field_cost->raw() && $line_item->field_cost->amount->value() != $cost) {
        $line_item->field_cost->amount = $cost;
        $line_item->save();
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Replaces standard commerce_line_item_manager widget with advanced one.
 */
function commerce_costs_profits_theme_registry_alter(&$theme_registry) {
  $theme_registry['commerce_line_item_manager']['function'] = 'commerce_costs_profits_commerce_line_item_manager';
}

/**
 * Implements hook_commerce_order_presave().
 *
 * Recalculates order profit when change after checkout stage.
 * Gives other modules a chance to alter order expenses before recalculation.
 */
function commerce_costs_profits_commerce_order_presave($order) {
  $cart_statuses = array_keys(commerce_order_statuses(array('cart' => TRUE)));
  if (array_search($order->status, $cart_statuses) === FALSE) {
    drupal_alter('order_expenses', $order);
  }
  commerce_costs_profits_calculate_order_profit($order);
}

/**
 * Themes the line item manager widget form element.
 *
 * Line item data can be altered before rendering using
 * hook_line_item_manager_item_info_alter(&$line_item_info)
 *
 * @param array $variables
 *   Data to be rendered.
 *
 * @return string
 *   Rendered line item manager widget.
 */
function commerce_costs_profits_commerce_line_item_manager(array $variables) {
  drupal_add_css(drupal_get_path('module', 'commerce_line_item') . '/theme/commerce_line_item.admin.css');
  drupal_add_css(drupal_get_path('module', 'commerce_costs_profits') . '/css/commerce_order_edit_profits.css');

  $form = $variables['form'];

  if (!user_access('commerce delete ordered line items')) {
    array_shift($form['#header']);
  }
  if (user_access('commerce view product margins')) {
    array_splice($form['#header'], 3, 0, array(
      t('Line Item Cost'),
      t('Margin %'),
      t('Profit'),
    ));
  }

  // Add each line item to the table.
  $rows = array();
  foreach (element_children($form['line_items']) as $line_item_id) {
    $line_item_info = $form['line_items'][$line_item_id];
    drupal_alter('line_item_manager_item_info', $line_item_info);

    $row = array();
    if (user_access('commerce delete ordered line items')) {
      $row[] = drupal_render($line_item_info['remove']);
    }
    $row[] = drupal_render($line_item_info['title']);
    $row[] = drupal_render($line_item_info['line_item_label']);
    if (user_access('commerce view product margins')) {
      $row[] = drupal_render($line_item_info['field_cost']);
      $row[] = drupal_render($line_item_info['margin']);
      $row[] = drupal_render($line_item_info['profit']);
    }
    $row[] = drupal_render($line_item_info['commerce_unit_price']);
    $row[] = drupal_render($line_item_info['quantity']);
    $row[] = drupal_render($line_item_info['commerce_total']);

    $rows[] = array(
      'data' => $row,
      'class' => array($line_item_info['#line_item_type']),
    );
  }
  if (!user_access('commerce delete ordered line items')) {
    $form['#header'][0] = '';
  }

  $output = theme('table', array(
    'caption' => check_plain($form['#title']),
    'header' => $form['#header'],
    'rows' => $rows,
    'empty' => $form['#empty'],
  ));
  $output .= drupal_render($form['order_total']);
  $output .= drupal_render($form['actions']);

  return '<div id="line-item-manager" class="clearfix">' . $output . '</div>';
}

/**
 * Implements hook_field_attach_presave().
 *
 * Initializes line item cost field with its' product cost field value.
 */
function commerce_costs_profits_field_attach_presave($entity_type, $entity) {
  if ($entity_type != 'commerce_line_item' || $entity->type != 'product'
    || isset($entity->field_cost)
  ) {
    return;
  }
  $line_item = entity_metadata_wrapper('commerce_line_item', $entity);
  $product = $line_item->commerce_product->value();
  if (isset($product->field_cost)) {
    $entity->field_cost = $product->field_cost;
  }
}

/**
 * Calculates product price from its' cost and given margin.
 *
 * @param EntityMetadataWrapper $product
 *   Product to be processed.
 * @param float $margin
 *   Product margin.
 */
function commerce_costs_profits_calculate_product_price(EntityMetadataWrapper $product, $margin) {
  $price = $product->field_cost->amount->value() * (1 + $margin / 100);
  $rounded_price = round($price / 100) * 100;

  $product->commerce_price->amount = $rounded_price;
}

/**
 * Implements hook_commerce_product_presave().
 *
 * Initializes product price recalculation if cost has changed.
 */
function commerce_costs_profits_commerce_product_presave($product) {
  if (!isset($product->original) || $product->field_cost == $product->original->field_cost
          || !variable_get_value('commerce_costs_profits_auto_price_recalculation')) {
    return;
  }

  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  $margin = variable_get('commerce_costs_profits_default_margin');
  drupal_alter('commerce_costs_profits_product_margin', $product_wrapper, $margin);
  
  commerce_costs_profits_calculate_product_price($product_wrapper, $margin);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_costs_profits_form_commerce_order_ui_order_form_alter(&$form, &$form_state, $form_id) {
  $profit_expenses = array();
  $profit_expenses['#prefix'] = '<div class="order-profit-expenses-wrapper">';
  $profit_expenses['#suffix'] = '</div>';

  $form['field_expenses'][$form['field_expenses']['#language']][0]['#disabled'] = TRUE;
  $form['field_expenses']['#weight'] = 1;
  $profit_expenses['field_expenses'] = $form['field_expenses'];
  unset($form['field_expenses']);

  $form['field_profit'][$form['field_profit']['#language']][0]['#disabled'] = TRUE;
  $form['field_profit']['#weight'] = 2;
  $profit_expenses['field_profit'] = $form['field_profit'];
  unset($form['field_profit']);

  $form['commerce_line_items'][$form['commerce_line_items']['#language']]['actions']['order_profit_expenses'] = $profit_expenses;
}

/**
 * Adds expenses component to order.
 *
 * @param EntityMetadataWrapper $order
 *   Order to be processed.
 * @param int $expenses
 *   Expenses amount.
 * @param string $component_name
 *   Price component name.
 */
function commerce_costs_profits_order_add_expenses(EntityMetadataWrapper &$order, $expenses, $component_name) {
  $expenses_data = array(
    'amount' => $expenses,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );
  $order->field_expenses->data = commerce_price_component_add($order->field_expenses->value(), $component_name, $expenses_data, FALSE);
}

/**
 * Calculates and updates order's expenses total amount.
 *
 * @param EntityMetadataWrapper $order
 *   Order to be processed.
 */
function commerce_costs_profits_order_update_expenses_total(EntityMetadataWrapper &$order) {
  $total = commerce_price_component_total($order->field_expenses->value());
  $order->field_expenses->amount = $total['amount'];
}

/**
 * Calculates order profit field value.
 *
 * @param object $order
 *   Order to be processed.
 * @param bool $save_order
 *   Do we need to save order after calculation.
 */
function commerce_costs_profits_calculate_order_profit($order, $save_order = FALSE) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if (empty($order_wrapper->commerce_line_items)) {
    return NULL;
  }

  $total_profit = commerce_costs_profits_get_order_base_profit($order_wrapper);

  if (!isset($order_wrapper->field_profit)) {
    $order_wrapper->field_profit = entity_metadata_wrapper('commerce_price');
  }
  else {
    $order_wrapper->field_profit->data = commerce_price_component_delete($order_wrapper->field_profit->value(), 'base_price');
  }
  $expenses = $order_wrapper->field_expenses->value() ? $order_wrapper->field_expenses->amount->value() : 0;
  $base_profit = array(
    'amount' => $total_profit - $expenses,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );
  $order_wrapper->field_profit->data = commerce_price_component_add($order_wrapper->field_profit->value(), 'base_price', $base_profit, TRUE);
  $total = commerce_price_component_total($order_wrapper->field_profit->value());
  $order_wrapper->field_profit->amount = $total['amount'];

  if ($save_order) {
    $order_wrapper->save();
  }
}

/**
 * Calculates base order profit as the sum af all line items profits.
 *
 * @param EntityMetadataWrapper $order_wrapper
 *   Order.
 *
 * @return int
 *   Base order profit value.
 */
function commerce_costs_profits_get_order_base_profit(EntityMetadataWrapper $order_wrapper) {
  $total_profit = 0;
  foreach ($order_wrapper->commerce_line_items as $line_item) {
    $total_profit += $line_item->commerce_total->amount->value();
    if (isset($line_item->field_cost) && $line_item->field_cost->raw()) {
      $total_profit -= $line_item->field_cost->amount->value() * $line_item->quantity->value();
    }
  }

  return $total_profit;
}

/**
 * Implements hook_views_api().
 */
function commerce_costs_profits_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'commerce_costs_profits') . '/views',
  );
}
