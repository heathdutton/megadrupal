<?php

/**
 * @file
 * Tests for the Commerce Costs Profits module.
 */

/**
 * Base class for all Commerse Costs Profits test cases.
 */
class CommerceCostsProfitsCase extends DrupalWebTestCase {

  /**
   * Products created while testing.
   *
   * @var array
   */
  protected $createdProductIds = array();

  /**
   * Order used while testing.
   *
   * @var EntityMetadataWrapper
   */
  protected $order;

  /**
   * Overrides DrupalWebTestCase::setUp().
   */
  public function setUp() {
    parent::setUp('variable', 'commerce_costs_profits');
    $this->order = entity_metadata_wrapper('commerce_order', commerce_order_new());
    $this->order->save();

    commerce_costs_profits_configure_product_type(commerce_product_type_load('product'));
  }

  /**
   * Overrides DrupalWebTestCase::tearDown().
   */
  public function tearDown() {
    $order_id = $this->order->order_id->value();
    commerce_order_delete($order_id);

    foreach ($this->createdProductIds as $product_id) {
      commerce_product_delete($product_id);
    }

    parent::tearDown();
  }

  /**
   * Creates product to be used in tests.
   *
   * @param string $sku
   *   Product SKU.
   * @param string $title
   *   Product title.
   * @param int $price
   *   Product price.
   * @param int $cost
   *   Product cost.
   *
   * @return EntityMetadataWrapper
   *   Created product wrapped in entity wrapper.
   */
  protected function createProduct($sku, $title, $price, $cost) {
    $product = entity_metadata_wrapper('commerce_product', commerce_product_new('product'));
    $product->sku = $sku;
    $product->title = $title;
    $product->uid = 1;
    $product->save();

    $product->commerce_price->amount = $price;
    $product->commerce_price->currency_code = 'BTC';
    $product->field_cost->amount = $cost;
    $product->field_cost->currency_code = 'BTC';
    $product->save();

    $this->createdProductIds[] = $product->product_id->value();

    return $product;
  }

  /**
   * Adds product to order creating line item.
   *
   * @param EntityMetadataWrapper $order
   *   Order to add product to.
   * @param EntityMetadataWrapper $product
   *   Product to be added.
   * @param int $quantity
   *   Number products to be added.
   */
  protected function addProductToOrder(EntityMetadataWrapper &$order, EntityMetadataWrapper $product, $quantity) {
    $line_item = commerce_product_line_item_new($product->value(), $quantity, $order->order_id->value());
    commerce_line_item_save($line_item);
    $order->commerce_line_items[] = $line_item;
  }

  /**
   * Returns test info.
   *
   * @return array
   *   Test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce Costs Profits',
      'description' => 'Tests Commerce Costs Profits calculation methods.',
      'group' => 'Commerce Costs Profits',
    );
  }

  /**
   * Test order base profit calculation.
   *
   * @covers commerce_costs_profits_get_order_base_profit()
   */
  public function testCommerceCostsProfitsGetOrderBaseProfit() {
    $this->addProductToOrder($this->order, $this->createProduct('SKU1', 'Product1', 300, 100), 1);
    $this->assertEqual(commerce_costs_profits_get_order_base_profit($this->order), 200, 'Order profit');

    $this->addProductToOrder($this->order, $this->createProduct('SKU2', 'Product2', 400, 200), 2);
    $this->assertEqual(commerce_costs_profits_get_order_base_profit($this->order), 600, 'Order profit');

    $this->addProductToOrder($this->order, $this->createProduct('SKU3', 'Product3', 500, 400), 3);
    $this->assertEqual(commerce_costs_profits_get_order_base_profit($this->order), 900, 'Order profit');
  }

  /**
   * Test order base profit calculation.
   *
   * @covers commerce_costs_profits_get_order_base_profit()
   */
  public function testCommerceCostsProfitsPriceRecalculationOnCostChange() {
    variable_set('commerce_costs_profits_auto_price_recalculation', 1);
    $product = $this->createProduct('SKU1', 'Product1', 120, 100);
    variable_set('commerce_costs_profits_default_margin', 50);
    $product->field_cost->amount = 200;
    $product->save();
    $this->assertEqual($product->commerce_price->amount->value(), 300, 'Product price recalculated');

    variable_set('commerce_costs_profits_auto_price_recalculation', 0);
    $product->field_cost->amount = 100;
    $product->save();
    $this->assertEqual($product->commerce_price->amount->value(), 300, 'Product price not recalculated');
  }
}
