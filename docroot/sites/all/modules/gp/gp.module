<?php

require_once('sites/all/libraries/google_places_php/googlePlaces.php');

/**
 * HELPERS
 */

/**
 *
 */
function gp_api_key() {
  return variable_get('gp_api_key', NULL);
}

/**
 *
 */
function gp_cache_expiration() {
  return variable_get('gp_cache_expiration', 0);
}

/**
 *
 */
function gp_cache_queue_worker_time() {
  return variable_get('gp_cache_queue_worker_time', 60);
}


/**
 * HOOKS
 */

/**
 * Implements hook_permission().
 */
function gp_permission() {
  return array(
    'administer google places' => array(
      'title' => t('Administer Google Places'),
      'description' => t('Perform administration tasks for Google Places.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function gp_menu() {
  $items = array();
  $items['admin/config/services/gp'] = array(
    'title' => 'Google Places',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gp_configuration_form'),
    'file' => 'gp.forms.inc',
    'access arguments' => array('administer google places')
  );
  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function gp_flush_caches() {
  return array('cache_gp');
}

/**
 * Implements hook_cron().
 */
function gp_cron() {
  
  $queue = DrupalQueue::get('gpCronQueue');
  
  //watchdog('gp', '<pre>' . print_r(field_info_instances(), true) . '</pre>');
  //watchdog('gp', '<pre>' . print_r(field_info_fields(), true) . '</pre>');
  
  // For each entity type and bundle that has a GP field on it, queue up each
  // entity that had its Place data expire.
  foreach (field_info_fields() as $field_name => $field_info) {
    if ($field_info['module'] != 'gp') { continue; }
    foreach ($field_info['bundles'] as $entity_type => $bundles) {
      // @TODO support other entity types.
      if ($entity_type != 'node') { continue; }
      $places = db_select($entity_type, 'n')
        ->fields('n', array('nid'))
        ->condition('n.type', $bundles, 'IN')
        ->condition('n.changed', time() - gp_cache_expiration(), '<')
        ->execute()
        ->fetchAll();
      foreach ($places as $place) {
        $queue->createItem($place);
      }
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function gp_cron_queue_info() {
  $queues = array();
  $queues['gpCronQueue'] = array(
    'worker callback' => 'gp_cron_queue_process_place',
    'time' => gp_cache_queue_worker_time(),
  );
  return $queues;
}

/**
 *
 */
function gp_cron_queue_process_place($place) {
  $node = node_load($place->nid);
  $node->changed = time();
  //watchdog('gp', "Expire {$node->title} from " . date('Y-m-d h:i:s', $node->changed) . " vs. " . date('Y-m-d h:i:s'));
  //watchdog('gp', '<pre>' . print_r($node, true) . '</pre>');
  //watchdog('gp', 'saving node');
  node_save($node);
  //watchdog('gp', 'done saving node');
}

/**
 * Implements hook_node_update().
 */
function gp_node_update($node) {
  
  //dpm($node);
  
  // Grab a list of all gp fields, then iterate over each, and all of their
  // items...
  $gp_fields = field_read_fields(array('type' => 'google_place'));
  if (empty($gp_fields)) { return; }
  foreach ($gp_fields as $field_name => $field_data) {
    if (!isset($node->$field_name)) { continue; }
    $field = $node->{$field_name};
    //dpm($field);
    foreach($field[$node->language] as $delta => $item) {
      //dpm($item);
      
    }
  }
}

/*function gp_form_alter(&$form, &$form_state, $form_id) {
  drupal_set_message($form_id);
  if ($form_id == 'place_node_form') {
    $form['#validate'][] = 'gp_node_form_validate';
  }
}

function gp_node_form_validate(&$form, &$form_state) {
  dpm($form_state['values']);
}*/

/**
 * Implements hook_field_info().
 */
function gp_field_info() {
  return array(
    'google_place' => array(
      'label' => t('Google Place'),
      'description' => t('This field stores a Google Place ID and data about it.'),
      'default_widget' => 'google_place_field',
      'default_formatter' => 'google_place_default',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function gp_field_schema($field) {
  return array(
    'columns' => array(
      'google_place_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
  );
}


/**
 * Implements hook_field_widget_info().
 */
function gp_field_widget_info() {
  return array(
    'google_place_field' => array(
      'label' => t('Google Place'),
      'field types' => array('google_place'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function gp_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  // Add your global settings fields here
  $form = array();
  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function gp_field_instance_settings_form($field, $instance) {

  //dpm($field);
  //dpm($instance);

  $settings = $instance['settings'];
  $form = array();
  
  // Load the fields for this content type.
  $fields = field_info_instances($instance['entity_type'], $instance['bundle']);
  //dpm($fields);
  
  // Locate the fields needed to power this field, warn the user if any are not
  // present.
  $addressfields = array();
  $geofields = array();
  $telephone_fields = array();
  $url_fields = array();
  $taxonomy_fields = array();
  $integer_fields = array();
  $text_fields = array();
  foreach ($fields as $field_name => $field) {
    $field_info = field_info_field($field['field_name']);
    if ($field_info['type'] == 'addressfield') {
      $addressfields[$field_name] = $field_info;
    }
    else if ($field_info['type'] == 'geofield') {
      $geofields[$field_name] = $field_info;
    }
    else if ($field_info['type'] == 'telephone') {
      $telephone_fields[$field_name] = $field_info;
    }
    else if ($field_info['type'] == 'url') {
      $url_fields[$field_name] = $field_info;
    }
    else if ($field_info['type'] == 'taxonomy_term_reference') {
      $taxonomy_fields[$field_name] = $field_info;
    }
    else if ($field_info['type'] == 'number_integer') {
      $integer_fields[$field_name] = $field_info;
    }
    else if ($field_info['type'] == 'text') {
      $text_fields[$field_name] = $field_info;
    }
  }
  $valid = TRUE;
  if (empty($addressfields)) {
    $valid = FALSE;
    drupal_set_message(t('You need to create an address field!'), 'warning');
  }
  if (empty($geofields)) {
    $valid = FALSE;
    drupal_set_message(t('You need to create a geo field!'), 'warning');
  }
  if (empty($telephone_fields)) {
    $valid = FALSE;
    drupal_set_message(t('You need to create a telephone field!'), 'warning');
  }
  if (empty($url_fields)) {
    $valid = FALSE;
    drupal_set_message(t('You need to create a url field!'), 'warning');
  }
  else if (sizeof($url_fields) < 3) {
    $valid = FALSE;
    drupal_set_message(t('You need to create at least 3 url fields!'), 'warning');
  }
  if (empty($taxonomy_fields)) {
    $valid = FALSE;
    drupal_set_message(t('You need to create a taxonomy term reference field!'), 'warning');
  }
  if (empty($integer_fields)) {
    $valid = FALSE;
    drupal_set_message(t('You need to create an integer field!'), 'warning');
  }
  if (empty($text_fields)) {
    $valid = FALSE;
    drupal_set_message(t('You need to create a text field!'), 'warning');
  }
  if (!$valid) {
    drupal_set_message(t('Come back to this form when you have created the required field(s) on this content type.'), 'warning');
    return $form;
  }
  
  // Build the select lists for each field so the user can specify which fields
  // to store the place data in.
  
  // Address Field.
  $options = array('' => t('- Select -'));
  foreach($addressfields as $field_name => $addressfield) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['addressfield'] = array(
    '#type' => 'select',
    '#title' => t('Address'),
    '#description' => t('Select an address field to store cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['addressfield']) ? $instance['settings']['addressfield'] : ''
  );
  
  // Geofield.
  $options = array('' => t('- Select -'));
  foreach($geofields as $field_name => $geofield) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['geofield'] = array(
    '#type' => 'select',
    '#title' => t('Geofield'),
    '#description' => t('Select a geo field to store cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['geofield']) ? $instance['settings']['geofield'] : ''
  );
  
  // Telephone
  $options = array('' => t('- Select -'));
  foreach($telephone_fields as $field_name => $telephone_field) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['telephone'] = array(
    '#type' => 'select',
    '#title' => t('Telephone'),
    '#description' => t('Select a telephone field to store cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['telephone']) ? $instance['settings']['telephone'] : ''
  );
  
  // URL.
  $options = array('' => t('- Select -'));
  foreach($url_fields as $field_name => $url_field) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['url'] = array(
    '#type' => 'select',
    '#title' => t('URL'),
    '#description' => t('Select a url field to store the Google Plus URL cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['url']) ? $instance['settings']['url'] : ''
  );
  
  // Website.
  $options = array('' => t('- Select -'));
  foreach($url_fields as $field_name => $url_field) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['website'] = array(
    '#type' => 'select',
    '#title' => t('Website'),
    '#description' => t('Select a url field to store the website URL cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['website']) ? $instance['settings']['website'] : ''
  );
  
  // Icon.
  $options = array('' => t('- Select -'));
  foreach($url_fields as $field_name => $url_field) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['icon'] = array(
    '#type' => 'select',
    '#title' => t('Icon'),
    '#description' => t('Select a url field to store the Google Maps icon URL cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['icon']) ? $instance['settings']['icon'] : ''
  );
  
  // Types
  $options = array('' => t('- Select -'));
  foreach($taxonomy_fields as $field_name => $taxonomy_field) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['types'] = array(
    '#type' => 'select',
    '#title' => t('Types'),
    '#description' => t('Select a taxonomy term reference field to store cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['types']) ? $instance['settings']['types'] : ''
  );
  
  // Price Level
  $options = array('' => t('- Select -'));
  foreach($integer_fields as $field_name => $integer_field) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['price_level'] = array(
    '#type' => 'select',
    '#title' => t('Price level'),
    '#description' => t('Select a integer field to store cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['price_level']) ? $instance['settings']['price_level'] : ''
  );
  
  // Photo(s).
  $options = array('' => t('- Select -'));
  foreach($text_fields as $field_name => $text_field) {
    $options[$field_name] = $fields[$field_name]['label'];
  }
  $form['photos'] = array(
    '#type' => 'select',
    '#title' => t('Photos'),
    '#description' => t('Select a text field to store the photo(s) cached data.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($instance['settings']['photos']) ? $instance['settings']['photos'] : ''
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function gp_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'google_place_field' :
      $element['google_place_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Google Place ID'),
        '#default_value' => isset($items[$delta]['google_place_id']) ? $items[$delta]['google_place_id'] : '',
        '#required' => $element['#required'],
        '#size' => 32,
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_presave().
 */
function gp_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  
  //watchdog('gp', 'gp_field_presave');
  //watchdog('gp', '<pre>' . print_r($items, true) . '</pre>');
  
  //dpm($entity);
  //dpm($field);
  //dpm($instance);

  foreach ($items as $delta => $item) {
    if (isset($item['google_place_id'])) {
      $place = NULL;
      $place_id = $item['google_place_id'];
      $items[$delta]['google_place_id'] = $place_id;
      // Look up this item's place details, log any errors to watchdog.
      if ($cache = cache_get($place_id, 'cache_gp')) {
        $place = $cache->data;
        //watchdog('gp', 'Place loaded from cache: ' . $place['name']);
      }
      else {
        $googlePlaces = isset($googlePlaces) ? $googlePlaces : new googlePlaces(gp_api_key());
        $googlePlaces->setPlaceId($item['google_place_id']);
        $details = $googlePlaces->details();
        if (!empty($details['errors'])) {
          foreach($details['errors'] as $error) { watchdog('gp', $error); }
          continue;
        }
        // @TODO this should be configurable, however all of these mentioned
        // here are required. The rest can be optional.
        $components_to_save = array(
          'address_components',
          'geometry',
          'icon',
          'international_phone_number',
          'name',
          'types',
          'url',
          'website',
          'price_level',
          'photos'
        );
        if (!isset($details) || !isset($details['result']) || empty($details['result'])) { continue; }
        foreach($details['result'] as $component => $value) {
          if (!in_array($component, $components_to_save)) {
            unset($details['result'][$component]);
          }
        }
        $place = $details['result'];
        //watchdog('gp', 'Loaded place from Google: ' . $place['name']);
        $cache = gp_cache_expiration();
        if ($cache) {
          //watchdog('gp', 'cached it: ' . $place['name']);
          cache_set($place_id, $place, 'cache_gp', time() + $cache);
        }
      }
      //dpm($place);
      //watchdog('gp', '<pre>' . print_r($place, true) . '</pre>');
      
      // Set the node title with the place name.
      $entity->title = $place['name'];

      // geofield
      if (isset($place['geometry'])) {
        $field_name = $instance['settings']['geofield'];
        $lat = $place['geometry']['location']['lat'];
        $lon = $place['geometry']['location']['lng'];
        $entity->{$field_name}[$entity->language] = array(
          array(
            'geom' => "POINT ($lon $lat)",
            'geo_type' => 'point',
            'lat' => $lat . "000000",
            'lon' => $lon . "000000",
            'left' => $lon . "000000",
            'top' => $lat . "000000",
            'right' => $lon . "000000",
            'bottom' => $lat . "000000"
          )
        );
      }

      // addressfield
      // @TODO - need to support more countries!
      // @TODO - move this to its own function, it is going to get huge. That's
      // what she said.
      if (isset($place['address_components'])) {
        // Locate the country code.
        $country_code = null;
        foreach ($place['address_components'] as $component) {
          foreach ($component['types'] as $type) {
            if ($type == 'country') {
              $country_code = $component['short_name'];
              break;
            }
          }
        }
        $field_name = $instance['settings']['addressfield'];
        $country = '';
        $thoroughfare = '';
        $premise = '';
        $locality = '';
        $administrative_area = '';
        $postal_code = '';
        foreach ($place['address_components'] as $component) {
          foreach ($component['types'] as $type) {
            switch ($type) {
              case 'street_number':
                if (!empty($thoroughfare)) {
                  $thoroughfare = $component['long_name'] . ' ' . $thoroughfare;
                }
                else { $thoroughfare = $component['long_name']; }
                break;
              case 'route':
                if (!empty($thoroughfare)) {
                  switch ($country_code) {
                    case 'AT': // Austria
                    case 'DE': // Germany
                      $thoroughfare = $component['long_name'] . ' ' . $thoroughfare;
                      break;
                    default:
                     $thoroughfare .= ' ' . $component['long_name'];
                      break;
                  }
                }
                else { $thoroughfare = $component['long_name']; }
                break;
              case 'locality':
                $locality = $component['long_name'];
                break;
              case 'administrative_area_level_1':
                $administrative_area = $component['short_name'];
                break;
              case 'country':
                $country = $component['short_name'];
                break;
              case 'postal_code':
                $postal_code = $component['long_name'];
                break;
            }
          }
        }
        $address = array(
          'country' => $country,
          'thoroughfare' => $thoroughfare,
          'premise' => $premise,
          'locality' => $locality,
          'administrative_area' => $administrative_area,
          'postal_code' => $postal_code
        );
        $entity->{$field_name}[$entity->language] = array($address);
      }
      
      // telephone
      if (isset($place['international_phone_number'])) {
        $field_name = $instance['settings']['telephone'];
        $entity->{$field_name}[$entity->language] = array(
          array('value' => $place['international_phone_number'])
        );
      }
      
      // website
      if (isset($place['website'])) {
        $field_name = $instance['settings']['website'];
        $entity->{$field_name}[$entity->language] = array(
          array('value' => $place['website'])
        );
      }
      
      // url (google plus)
      if (isset($place['url'])) {
        $field_name = $instance['settings']['url'];
        $entity->{$field_name}[$entity->language] = array(
          array('value' => $place['url'])
        );
      }
      
      // icon
      if (isset($place['icon'])) {
        $field_name = $instance['settings']['icon'];
        $entity->{$field_name}[$entity->language] = array(
          array('value' => $place['icon'])
        );
      }
      
      // types
      if (isset($place['types'])) {
        $field_name = $instance['settings']['types'];
        $taxonomy_field_instance = field_info_field($field_name);
        $vocabularies = taxonomy_vocabulary_get_names();
        $vocabulary_machine_name = $taxonomy_field_instance['settings']['allowed_values'][0]['vocabulary'];
        $vocabulary = $vocabularies[$vocabulary_machine_name];
        foreach ($place['types'] as $delta => $type) {
          $terms = taxonomy_get_term_by_name($type, $vocabulary_machine_name);
          $term = NULL;
          if (empty($terms)) {
            $term = new stdClass();
            $term->vid = $vocabulary->vid;
            $term->name = $type;
            taxonomy_term_save($term);
          }
          else {
            foreach ($terms as $tid => $term) {
              if ($term->name == $type) { break; }
            }
          }
          $entity->{$field_name}[$entity->language][$delta] = array('tid' => $term->tid);
        }
      }
      
      // price level
      if (isset($place['price_level'])) {
        $field_name = $instance['settings']['price_level'];
        $entity->{$field_name}[$entity->language] = array(
          array('value' => $place['price_level'])
        );
      }
      
      // photo(s)
      if (isset($place['photos'])) {
        $field_name = $instance['settings']['photos'];
        $photo_field_info = field_info_field($field_name);
        $photo_count = sizeof($place['photos']);
        if ($photo_field_info['cardinality'] == -1) { }
        else if ($photo_field_info['cardinality'] > $photo_count) { }
        else { $photo_count = $photo_field_info['cardinality']; }
        $entity->{$field_name}[$entity->language] = array();
        for ($i = 0; $i < $photo_count; $i++) {
          $entity->{$field_name}[$entity->language][$i] = array('value' => $place['photos'][$i]['photo_reference']);
        }
      }

    }
  }
  
  //dpm($entity);
  //dpm($items);
}

/**
 * Implements hook_field_is_empty().
 */
function gp_field_is_empty($item, $field) {
  if (empty($item['google_place_id'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function gp_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Loop through field items in the case of multiple values.
  foreach ($items as $delta => $item) {
    if (isset($item['google_place_id']) && $item['google_place_id'] != '') {
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function gp_field_formatter_info() {
  return array(
    'google_place_default' => array(
      'label' => t('Default'),
      'field types' => array('google_place'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gp_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    if (!isset($item['google_place_id'])) { continue; }
    switch ($display['type']) {
      case 'google_place_default':
        $element[$delta]['#markup'] = $item['google_place_id'];
        break;
    }
  }
  return $element;
}

