<?php

define('WATCHDOG_DEBUG_DEFAULT_ROW_LIMIT', 100);

/**
 * Implements hook_menu().
 */
function watchdog_debug_menu() {
  $items['admin/config/development/watchdog_debug'] = array(
    'title'             => 'Watchdog Debug',
    'description'       => 'Settings for debug information logging.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('watchdog_debug_admin_settings'),
    'access arguments'  => array('administer site configuration'),
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'watchdog_debug.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function watchdog_debug_menu_alter(&$items) {
  $items['admin/reports/event/%']['page callback'] = 'watchdog_debug_event';
  $items['admin/reports/event/%']['file'] = 'watchdog_debug.admin.inc';
  $items['admin/reports/event/%']['file path'] = drupal_get_path('module', 'watchdog_debug');
}

/**
 * Implements hook_theme().
 */
function watchdog_debug_theme() {
  return array(
    'watchdog_debug_admin_settings' => array(
      'render element' => 'form',
      'file' => 'watchdog_debug.admin.inc',
    ),
    'watchdog_debug_function' => array(
      'file' => 'watchdog_debug.theme.inc',
      'variables' => array(
        'trace' => array(),
        'arguments' => array(),
      ),
    ),
    'watchdog_debug_location' => array(
      'file' => 'watchdog_debug.theme.inc',
      'variables' => array(
        'trace' => array(),
      ),
    ),
    'dblog_message' => array(
      'file' => 'watchdog_debug.theme.inc',
      'function' => 'watchdog_debug_watchdog_message',
      'variables' => array('event' => NULL, 'link' => FALSE),
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Remove expired log stack traces.
 */
function watchdog_debug_cron() {
  // Cleanup the watchdog_debug table.
  $row_limit = variable_get('watchdog_debug_row_limit', WATCHDOG_DEBUG_DEFAULT_ROW_LIMIT);

  // For row limit n, get the wid of the nth row in descending wid order.
  // Counting the most recent n rows avoids issues with wid number sequences,
  // e.g. auto_increment value > 1 or rows deleted directly from the table.
  if ($row_limit > 0) {
    $min_row = db_select('watchdog_debug', 'w')
      ->fields('w', array('wid'))
      ->orderBy('wid', 'DESC')
      ->range($row_limit - 1, 1)
      ->execute()->fetchField();

    // Delete all table entries older than the nth row, if nth row was found.
    if ($min_row) {
      db_delete('watchdog_debug')
        ->condition('wid', $min_row, '<')
        ->execute();
    }
  }
}

/**
 * Implements hook_watchdog().
 */
function watchdog_debug_watchdog($log) {

  // Get last wid from watchdog table.
  $wid = db_query('SELECT MAX(wid) FROM {watchdog}')->fetchField();

  $record = new stdClass();

  $collect_settings = variable_get('watchdog_debug_collect');

  foreach (_watchdog_debug_callbacks() as $collect_info_key => $collect_info_callback) {
    if (isset($collect_settings[$log['severity']][$collect_info_key]) && $collect_settings[$log['severity']][$collect_info_key]) {
      if ($collect_info_key == 'backtrace') {
        $steps_to_hide = variable_get('watchdog_debug_backtrace_hide_steps', NULL);
        if (!empty($steps_to_hide)) {
          $collect_info_callback = 'array_slice(' . $collect_info_callback . ', ' . $steps_to_hide . ')';
        }
      }
      eval('$record->' . $collect_info_key . ' = serialize(' . $collect_info_callback . ');');
    }
  }

  // Write trace to "watchdog_debug" table.
  $record_as_array = (array) $record;
  if (!empty($record_as_array)) {
    $record->wid = $wid;
    drupal_write_record('watchdog_debug', $record);
  }

}

/**
 * Replaces backtrace argument values with their types.
 */
function _watchdog_debug_process_backtrace($backtrace) {
  foreach ($backtrace as $id => $trace) {

    if (!empty($trace['file'])) {
      $trace['file'] = trim(str_replace(realpath('.'), '', $trace['file']), '/');
    }

    $args = array();
    if (isset($trace['args']) && is_array($trace['args'])) {
      foreach ($trace['args'] as $key => $value) {
        $args[] = sprintf('%s(%s)', gettype($value), _watchdog_debug_get_variable_size($value));
      }
      $backtrace[$id]['args'] = implode(', ', $args);
    }
  }
  return $backtrace;
}

/**
 * Returns size of a variable.
 */
function _watchdog_debug_get_variable_size($variable) {
  switch (gettype($variable)) {
    case 'array':
    case 'object':
      return count((array)$variable);
    case 'integer':
    case 'int':
    case 'boolean':
    case 'bool':
    case 'float':
    case 'double':
    case 'real':
    case 'string':
      return strlen((string)$variable);
    default:
      return '?';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function watchdog_debug_form_dblog_clear_log_form_alter(&$form, &$form_state) {
  $form['dblog_clear']['clear']['#submit'][] = 'watchdog_debug_clear_log_submit';
}

/**
 * Submit callback: clear database with debug messages.
 */
function watchdog_debug_clear_log_submit() {
  db_delete('watchdog_debug')->execute();
  drupal_set_message(t('Database debug log cleared.'));
}

/**
 * Returns array of available additional debug information for email alerts.
 */
function _watchdog_debug_callbacks() {
  return array(
    'backtrace' => 'debug_backtrace()',
    'server'    => '$_SERVER',
    'env'       => '$_ENV',
    'request'   => '$_REQUEST',
    'cookie'    => '$_COOKIE',
    'get'       => '$_GET',
    'post'      => '$_POST',
    'session'   => '$_SESSION',
  );
}
