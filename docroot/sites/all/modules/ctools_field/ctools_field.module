<?php

/**
 * @file
 * Main file of Ctools Field module.
 */

/**
 * Implements hook_migrate_api().
 */
function ctools_field_migrate_api() {
  $api = array(
    'api' => 2,
    'field handlers' => array(
      'MigrateCtoolsFieldValueFieldHandler',
    ),
  );

  return $api;
}

/**
 * Implements hook_field_info().
 */
function ctools_field_field_info() {
  return array(
    'ctools_field' => array(
      'label' => t('Ctools field'),
      'description' => t('Stores ctools content.'),
      'settings' => array(),
      'default_widget' => 'ds_selector',
      'default_formatter' => 'ctools_field_formatter',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function ctools_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

//  Example for later implementation
//  $form['decimal_separator'] = array(
//    '#type' => 'select',
//    '#title' => t('Decimal marker'),
//    '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
//    '#default_value' => $settings['decimal_separator'],
//    '#description' => t('The character users will input to mark the decimal point in forms.'),
//  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function ctools_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();

//  Example for later implementation
//  $form['prefix'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Prefix'),
//    '#default_value' => $settings['prefix'],
//    '#size' => 60,
//    '#description' => t("Define a string that should be prefixed to the value, like '$ ' or '&euro; '. Leave blank for none. Separate singular and plural values with a pipe ('pound|pounds')."),
//  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 */
function ctools_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//  foreach ($items as $delta => $item) {
//    if ($item['value'] != '') {
//    }
//  }
}

/**
 * Implements hook_field_is_empty().
 */
function ctools_field_field_is_empty($item, $field) {
  // @todo: why is this ignored???
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function ctools_field_field_formatter_info() {
  return array(
    'ctools_field_formatter' => array(
      'label' => t('Default Formatter'),
      'field types' => array('ctools_field'),
      'settings' =>  array(
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ctools_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ctools_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function ctools_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  ctools_include('content');
  ctools_include('context');

  foreach ($items as $delta => $item) {
    // Get the field configuration.
    if (is_string($item['value'])) {
      $unserialized_value = unserialize($item['value']);
    }
    else {
      $unserialized_value = array();
    }

    // Check whether field has a configured content type.
    if (empty($unserialized_value['type']) || empty($unserialized_value['subtype']) || empty($unserialized_value['conf'])) {
      continue;
    }

    $show_title = isset($unserialized_value['field_conf']['show_title']) ? $unserialized_value['field_conf']['show_title'] : false;
    $title_wrapper = isset($unserialized_value['field_conf']['title_wrapper']) ? trim($unserialized_value['field_conf']['title_wrapper']) : 'h3';
    $type = $unserialized_value['type'];
    $subtype = $unserialized_value['subtype'];
    $conf = $unserialized_value['conf'];
    $keywords = $arguments = $contexts = array();
    $content = '';

    // Create the entity context.
    $context_arguments = array(array(
      'keyword' => $entity_type,
      'identifier' => drupal_ucfirst($entity_type) . ' being viewed',
      'id' => 1,
      'name' => 'entity_id:' . $entity_type,
      'settings' => array(),
    ));
    ctools_context_get_context_from_arguments($context_arguments, $contexts, array($entity));

    // Build the content.
    $data = ctools_content_render($type, $subtype, $conf, $keywords, $arguments, $contexts);

    // Render the content.
    if (!empty($data->content)) {
      $content = '';
      if ($show_title) {
        $content .= '<' . check_plain($title_wrapper) . '>' . t($data->title) . '</' . check_plain($title_wrapper) . '>';
      }
      if (is_array($data->content)) {
        $content .= drupal_render($data->content);
      }
      else {
        $content .= $data->content;
      }
    }

    $element[$delta] = array('#markup' => $content);
  }


  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function ctools_field_field_widget_info() {
  return array(
    'ds_selector' => array(
      'label' => t('DS ctools selector'),
      'field types' => array('ctools_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ctools_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : FALSE;

  if (is_string($items[$delta]['value'])) {
    $unserialized_value = unserialize($items[$delta]['value']);
  } else {
    $unserialized_value = array();
  }

  $show_title = isset($unserialized_value['field_conf']['show_title']) ? $unserialized_value['field_conf']['show_title'] : false;
  $title_wrapper = isset($unserialized_value['field_conf']['title_wrapper']) ? trim($unserialized_value['field_conf']['title_wrapper']) : 'h3';

  // Attach the DS css & js.
  if (!isset($element['#attached'])) {
    $element['#attached'] = array();
  }
  $element['#attached'] = array_merge_recursive($element['#attached'], array(
    'js' => array(drupal_get_path('module', 'ds') . '/js/ds.admin.js'),
    'css' => array(drupal_get_path('module', 'ds') . '/css/ds.admin.css')
  ));

  // Fake ds ctools/dynamic content field.
  $field = array(
    'entity_type' => $element['#entity_type'],
    'name' => $element['#field_name'],
    'properties' => array(
      'settings' => array(
        'ctools' => array(
          'type' => 'ctools',
        ),
      ),
    ),
  );

  if (!empty($value) && isset($unserialized_value['type'])) {
    $field['formatter_settings'] = array(
      'ctools' => $value,
    );
  }

  // Wrap our fields into a fieldset.
  $element['ctools_field'] = array(
    '#type' => 'fieldset',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
  );

  // Load content select/edit field.
  form_load_include($form_state, 'inc', 'ds', 'includes/ds.field_ui');
  $ds_field = ds_ds_field_settings_form($field);

  $element['ctools_field']['select'] = $ds_field['select'];

  // We need to change the parents so the ajax invoke can set the value.
  $hidden_field = $ds_field['ctools'];
  $hidden_field['#parents'] = array(
    'fields',
    $field['name'],
    'settings_edit_form',
    'settings',
    'ctools',
  );
  $element['hidden'] = $hidden_field;

  $element['ctools_field']['show_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show title'),
    '#default_value' => $show_title,
  );

  $element['ctools_field']['title_wrapper'] = array(
    '#type' => 'textfield',
    '#title' => t('Title wrapper'),
    '#description' => t('Enter the HTML wrapper for the title output.'),
    '#default_value' => $title_wrapper,
    '#states' => array(
      'invisible' => array(
        'input[name$="[ctools_field][show_title]"]' => array('checked' => FALSE),
      ),
    ),
  );

  // Add a custom validation to set the correct field value.
  $element['#element_validate'][] = 'ctools_field_widget_validate';

  return array('value' => $element);
}

/**
 * Widget validation to set the correct field value.
 */
function ctools_field_widget_validate($element, &$form_state) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  $show_title = $element['ctools_field']['show_title']['#value'];
  $title_wrapper = $element['ctools_field']['title_wrapper']['#value'];

  // Move the value from the hidden field to the field value.
  if (is_string($element['hidden']['#value'])) {
    $hidden_value = unserialize($element['hidden']['#value']);
  } else {
    $hidden_value = array();
  }

  $hidden_value['field_conf'] = array(
    'show_title' => $show_title,
    'title_wrapper' => $title_wrapper,
  );

  form_set_value($element, serialize($hidden_value), $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function ctools_field_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}
