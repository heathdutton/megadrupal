<?php
/**
 * @file
 * Allows to cache external files (like js or css) locally.
 */

/**
 * Implements hook_menu().
 */
function cache_external_files_menu() {
  $items = array();

  $items['admin/config/system/cache-external-files'] = array(
    'title' => 'Cache External Files',
    'description' => 'Manage the external files which should be cached.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cache_external_files_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'cache_external_files.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function cache_external_files_theme() {
  return array(
    'cache_external_files_admin' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Returns HTML for the administration page.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_cache_external_files_admin($variables) {
  $form = $variables['form'];
  $output = '';

  $header = array(
    t('Enabled?'),
    t('URL'),
    t('Path'),
    t('Cached'),
    t('Timeout'),
    t('Refresh'),
    t('Delete'),
  );
  $rows = array();

  if (isset($form['table']) && $form['table']) {
    foreach (element_children($form['table']) as $fid) {
      $row = array();
      $row[] = drupal_render($form['table'][$fid]['enabled_' . $fid]);
      $row[] = drupal_render($form['table'][$fid]['url_' . $fid]);
      $row[] = drupal_render($form['table'][$fid]['path_' . $fid]);
      $row[] = drupal_render($form['table'][$fid]['cached_' . $fid]);
      $row[] = drupal_render($form['table'][$fid]['timeout_' . $fid]);
      $row[] = drupal_render($form['table'][$fid]['refresh_' . $fid]);
      $row[] = drupal_render($form['table'][$fid]['delete_' . $fid]);
      $rows[] = array('data' => $row);
    }
  }
  $rows[] = array(
    'data' => array(
      render($form['add_new_enabled']),
      render($form['add_new_url']),
      '',
      '',
      render($form['add_new_timeout']),
      '',
      '',
    ),
  );

  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render($form['add_new_submit']);
  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Implements hook_cron().
 */
function cache_external_files_cron() {
  // 5 minutes in the future.
  $time = time() + 300;
  $result = db_query('SELECT * FROM {cache_external_files} WHERE enabled = 1');
  foreach ($result as $row) {
    if ($row->cached + $row->timeout < $time) {
      _cache_external_files_update_file($row->fid, $row->url);
    }
  }
}

/**
 * Implements hook_features_api().
 */
function cache_external_files_features_api() {
  return array(
    'cache_external_files' => array(
      'name' => 'Cache external files config',
      'default_hook' => 'cache_external_files_data_default',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'cache_external_files') . '/cache_external_files.features.inc',
    ),
  );
}

/**
 * Returns a string containing the local filesystem path to file.
 *
 * @param string $url
 *   A string containing the path to the external file.
 */
function _cache_external_files_url_to_path($url) {
  $parsed_url = parse_url($url);
  $path = 'public://cef/' . $parsed_url['host'] . $parsed_url['path'];
  return $path;
}

/**
 * Returns TRUE if the file is successfully updated or FALSE on failure.
 *
 * @param integer $fid
 *   The primary identifier for the file.
 * @param string $url
 *   A string containing the path to the external file.
 */
function _cache_external_files_update_file($fid, $url) {
  if (_cache_external_files_get_file($url)) {
    $file = array('fid' => $fid, 'cached' => time());
    if (!drupal_write_record('cache_external_files', $file, 'fid')) {
      return FALSE;
    }
    return TRUE;
  }
}

/**
 * Saves the external file to the local filesystem.
 *
 * @param string $url
 *   A string containing the path to the external file.
 */
function _cache_external_files_get_file($url) {
  $filepath = _cache_external_files_url_to_path($url);
  $dirname = dirname($filepath);
  if (!file_prepare_directory($dirname, FILE_CREATE_DIRECTORY)) {
    watchdog('cache_external_files', 'Failed to create cache_external_files directory: %dirpath', array('%dirpath' => $dirname), WATCHDOG_ERROR);
    return FALSE;
  }
  $data = drupal_http_request($url);
  if (isset($data->error)) {
    watchdog('cache_external_files', 'Failed to get file from url: %url with error: %error', array('%url' => $url, '%error' => $data->error), WATCHDOG_ERROR);
    return FALSE;
  }
  else {
    if ($file_saved = file_unmanaged_save_data($data->data, $filepath, FILE_EXISTS_REPLACE)) {
      watchdog('cache_external_files', 'Saved file from url: %url to file: %filename', array('%url' => $url, '%filename' => $file_saved));

      if (substr($url, -4) == '.css') {
        if ($count = preg_match_all('/url\(([^)]+)\)/i', $data->data, $matches, PREG_SET_ORDER)) {
          foreach ($matches as $match) {
            if (substr($match[1], 0, 7) != 'http://' && substr($match[1], 0, 8) != 'https://' && substr($match[1], 0, 2) != '//') {
              $css_url = dirname($url) . '/' . $match[1];
              $css_path = _cache_external_files_url_to_path($css_url);
              $css_dirname = dirname($css_path);
              if (!file_prepare_directory($css_dirname, FILE_CREATE_DIRECTORY)) {
                watchdog('cache_external_files', 'Failed to create cache_external_files directory: %dirpath', array('%dirpath' => $css_dirname), WATCHDOG_ERROR);
              }
              $css_data = drupal_http_request($css_url);
              if (isset($css_data->error)) {
                watchdog('cache_external_files', 'Failed to get file from url: %url with error: %error', array('%url' => $css_url, '%error' => $css_data->error), WATCHDOG_ERROR);
              }
              else {
                file_unmanaged_save_data($css_data->data, $css_path, FILE_EXISTS_REPLACE);
              }
            }
          }
        }
      }

      return TRUE;
    }
    else {
      watchdog('cache_external_files', 'Failed to save file from url: %url', array('%url' => $url), WATCHDOG_ERROR);
      return FALSE;
    }
  }
}
