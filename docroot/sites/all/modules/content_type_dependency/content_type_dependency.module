<?php
/**
 * @file
 * Module file for the content_type_dependency module.
 */

/**
 * Implements hook_help().
 */
function content_type_dependency_help($path, $arg) {
  switch ($path) {
    case 'admin/help#content_type_dependency':
      return '<p>' . t('The Content Type Dependency module allows admins to create rules. Each of these rules will prevent a user from adding one particular content type unless the user has finished adding a specified number of another content type. The number can be specified by the admin. <a href ="@ctd">administration page</a>', array('@ctd' => url('admin/config/content/content_type_dependency/list'))) . '</p>';
  }

}

/**
 * Implements hook_permission().
 */
function content_type_dependency_permission() {
  return array(
    'administer content type dependency' => array(
      'title' => t('Administer content type dependency'),
      'description' => t('Access content type dependency Configuration page and menu'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function content_type_dependency_menu() {
  $items['admin/config/content/content_type_dependency/list'] = array(
    'title' => 'Content Type Dependency',
    'description' => 'This will enforce restrictions for user to create certain content type before creating specific content type as per rules specified by admin.',
    'file' => 'content_type_dependency.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer content type dependency'),
    'page callback' => 'content_type_dependency_list',
  );
  $items['admin/config/content/content_type_dependency/list/modify'] = array(
    'title' => 'Add Content Type Dependency',
    'description' => 'Add Content Type Dependency',
    'file' => 'content_type_dependency.admin.inc',
    'access arguments' => array('administer content type dependency'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_type_dependency_modify'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/content/content_type_dependency/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_type_dependency_delete_confirm', 4),
    'access arguments' => array('administer content type dependency'),
    'file' => 'content_type_dependency.admin.inc',
  );
  $items['admin/config/content/content_type_dependency/%/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'content_type_dependency_enable',
    'page arguments' => array(4),
    'access arguments' => array('administer content type dependency'),
    'file' => 'content_type_dependency.admin.inc',
  );
  $items['admin/config/content/content_type_dependency/%/disable'] = array(
    'title' => 'Disable',
    'page callback' => 'content_type_dependency_disable',
    'page arguments' => array(4),
    'access arguments' => array('administer content type dependency'),
    'file' => 'content_type_dependency.admin.inc',
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_form_node_form_alter().
 */
function content_type_dependency_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Loading Content type enabled by rule &
  // which opened by current logged in user.
  $result = db_query('SELECT * FROM {content_type_dependency} WHERE to_create = :tc AND status = 1', array(':tc' => $form['#node']->type));
  if ($record = $result->fetchObject()) {
    // Checks for user number of nodes created.
    if (content_type_dependency_node_count($record->must_have) < $record->no_of) {
      // Sets destination for drupal_goto function.
      // Message showing after redirecting.
      $options = array('query' => array('destination' => 'node/add/' . $record->to_create));
      drupal_set_message(t('@msg', array('@msg' => $record->message)));
      // Redirecting if all coditions are satisfied.
      drupal_goto('node/add/' . $record->must_have, $options);
    }
  }
}

/**
 * Returns number of nodes created by user current logged in user 0 to n.
 *
 * @param string $c_t
 *   Machine name of the content type
 */
function content_type_dependency_node_count($c_t) {
  // Get Current logged in user id.
  $uid = $GLOBALS['user']->uid;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $c_t)
    ->propertyCondition('uid', $uid)
    ->count();
  return $query->execute();
}
