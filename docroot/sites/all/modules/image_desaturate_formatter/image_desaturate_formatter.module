<?php
/**
 * @file
 * Code for the Image Desaturate Formatter module.
 */

/**
 * Implements hook_theme().
 */
function image_desaturate_formatter_theme() {
  return array(
    'image_desaturate_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'image_style' => NULL,
        'path' => NULL,
        'default_style' => 'desaturate'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function image_desaturate_formatter_field_formatter_info() {
  return array(
    'imagefield_desaturate' => array(
      'label' => t('Image desaturate'),
      'field types' => array('image'),
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
        'default_style' => 'desaturate'),
    ),
  );
}

/**
 * Implements hook_fiel_formatter_settings().
 */
function image_desaturate_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  $element['default_style'] = array(
    '#title' => t('Default image style'),
    '#type' => 'select',
    '#options' => array(
      'desaturate' => t('Desaturate'),
      'default' => t('Default'),
    ),
    '#default_value' => $settings['default_style'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_summary().
 */
function image_desaturate_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  $default_style = array(
    'default' => t('Default image style'),
    'desaturate' => t('Desaturate image style'),
  );
  if (isset($default_style[$settings['default_style']])) {
    $summary[] = $default_style[$settings['default_style']];
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function image_desaturate_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'image_desaturate_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
      '#default_style' => $display['settings']['default_style'],
    );
  }

  return $element;
}

/**
 * Implements theme_image_desaturate
 */
function theme_image_desaturate_formatter($variables) {
  drupal_add_library('image_desaturate_formatter', 'image-desaturate-formatter');
  $variables['item']['attributes'] = array(
    'class' => array(
      $variables['default_style'] == 'desaturate' ? 'desaturate-formatter' : 'no-desaturate-formatter',
    ),
  );
  return theme('image_formatter', array(
    'item' => $variables['item'],
    'image_style' => $variables['image_style'],
    'path' => $variables['path'])
  );
}

/**
 * Implements hook_library().
 */
function image_desaturate_formatter_library() {
  $libraries['image-desaturate-formatter'] = array(
    'title' => 'Image desaturate Formatter',
    'version' => '1',
    'css' => array(
      drupal_get_path('module', 'image_desaturate_formatter') . '/library/image_desaturate_formatter.css' => array(),
    ),
  );

  return $libraries;
}
