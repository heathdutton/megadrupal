<?php
/**
 * @file
 * Main module file
 */

/**
 * Implements hook_views_api().
 */
function views_coscev_views_api() {
  return array(
    'api' => '3.0',
  );
}

/**
 * Implements hook_views_pre_view().
 *
 * If there are more than 1 views display
 * show the title
 * see drupal_static() line 111
 */
function views_coscev_views_pre_view(&$view) {
  if ($view->display_handler->default_display->display->display_options['style_plugin']=='views_coscev') {
    $views_coscev_displays = &drupal_static(__FUNCTION__);
    ++$views_coscev_displays;
  }
}

/**
 * Implements hook_process().
 */
function views_coscev_process_views_coscev_view(&$vars) {

  $view = $vars['view'];
  $options = $vars['options'];

  $path = drupal_get_path('module', 'views_coscev');
  drupal_add_js($path . '/views_coscev.js');
  drupal_add_css($path . '/views_coscev.css');

  // Add on page css from the plugin options.
  // Margins.
  $display_class = '.coscev-display-' . $view->current_display;
  $onpage_css = $display_class . ' .top-hor-left, ' . $display_class . ' .top-hor-right {top: ' . _views_coscev_px_or_percent($options['margins']['margin_top']) . ';}
   ' . $display_class . ' .bottom-hor-right, ' . $display_class . ' .bottom-hor-left {bottom: ' . _views_coscev_px_or_percent($options['margins']['margin_right']) . '}
   ' . $display_class . ' .top-vert-left, ' . $display_class . ' .bottom-vert-left {left: ' . _views_coscev_px_or_percent($options['margins']['margin_left']) . ';}
   ' . $display_class . ' .top-vert-right, ' . $display_class . ' .bottom-vert-right {right: ' . _views_coscev_px_or_percent($options['margins']['margin_right']) . ';}';
  // Title mode.
  if ($options['title']['title_mode'] == 'fixed') {
    $onpage_css .= $display_class . ' .coscev-inline-title {visibility:hidden; }';
    if ($options['title']['title_effect'] == 'fade') {
      $onpage_css .= $display_class . ' .coscev-title {opacity:0; }';
    }
    elseif ($options['title']['title_effect'] == 'popout') {
      $onpage_css .= $display_class . ' .coscev-title {visibility:hidden; }';
    }
    elseif ($options['title']['title_effect'] == 'rotate') {
      $onpage_css .= $display_class . ' .coscev-title {transform: rotate(90deg); visibility:hidden;}';
    }
  }
  else {
    $onpage_css .= $display_class . ' .coscev-title {visibility:hidden; }';
  }
  drupal_add_css($onpage_css, array('type' => 'inline'));

  // Directions with their clashes (when an item disapears in the area where
  // the next one appears).
  $directions_clashes = array(
    'top-hor-left' => 'top-hor-right',
    'bottom-hor-left' => 'bottom-hor-right',
    'top-vert-left' => 'bottom-vert-left',
    'top-vert-right' => 'bottom-vert-right',
  );
  // Construct the clashes_directions array.
  $clashes_dirs = array();
  foreach ($directions_clashes as $sdir => $dir) {
    $clashes_dirs[$sdir] = $dir;
    $clashes_dirs[$dir] = $sdir;
  }

  // Avoid the next item to move from the previous one direction
  // (from top, left, ...)
  $same_directions = array(
    'top-hor-left' => 'bottom-hor-left',
    'top-hor-right' => 'bottom-hor-right',
    'top-vert-left' => 'top-vert-right',
    'bottom-vert-left' => 'bottom-vert-right',
  );

  // Construct the same_directions array.
  $same_dirs = array();
  foreach ($same_directions as $sdir => $dir) {
    $same_dirs[$sdir] = $dir;
    $same_dirs[$dir] = $sdir;
  }

  $directions = array('top-hor-left', 'top-vert-left', 'top-vert-right',
    'top-hor-right', 'bottom-hor-left', 'bottom-vert-left',
    'bottom-vert-right', 'bottom-hor-right');

  // Check if manual direction.
  if ($options['direction_type'] == 'manual') {
    $manual_directions = explode('/',
    $options['manual']['manual_directions']);
  }

  // Add title to navigation bar
  $title = check_plain($view->get_title());
  if (!empty($options['title']['title_navigation'])) {
    $nav_bar = &drupal_static('navigation_bar');
    $nav_bar['view_name'] = $view->name;
    $nav_bar['items'][$view->current_display] = $title;
  }
  // Add title to rows except if we only have 1 single display or
  // title set to hidden.
  if (!empty($title) && drupal_static('views_coscev_views_pre_view') > 1 && $options['title']['title_mode'] != 'hidden') {
    array_unshift($vars['rows'], array('type' => 'title', 'content' => $title));
  }
  else {
    $title = FALSE;
  }

  $manual_dir_counter = 0;
  $total_rows = count($vars['rows']);
  static $last_direction = FALSE;

  // Loop view items result.
  for ($i = 0; $i < $total_rows; $i++) {
    $item_content = $vars['rows'][$i];
    if (!is_array($item_content)) {
      $vars['rows'][$i] = array(
        'type' => 'view_item',
        'content' => $item_content);
    }

    $new_directions = drupal_map_assoc($directions);

    // Random options.
    if (($options['manual']['manual_next'] == 'random' || $options['direction_type'] == 'random') && $last_direction) {
      // Remove same direction.
      if (!empty($options['random_options']['same_direction'])) {
        unset($new_directions[$last_direction]);
      }
      // Remove same way.
      if (!empty($options['random_options']['same_way'])) {
        $same_way = $same_dirs[$last_direction];
        unset($new_directions[$same_way]);
        // Remove the last direction as well event if the option is unchecked.
        if (!empty($new_directions[$last_direction])) {
          unset($new_directions[$last_direction]);
        }
      }
      // Remove clash.
      if (!empty($options['random_options']['clashes'])) {
        $clash = $clashes_dirs[$last_direction];
        unset($new_directions[$clash]);
      }
    }

    // Assign a direction.
    // manual
    if ($options['direction_type'] == 'manual') {
      if ($manual_dir_counter < count($manual_directions)) {
        // If title is fixed assign a direction and decrement counter.
        if ($vars['rows'][$i]['type'] == 'title' && $options['title']['title_mode'] == 'fixed') {
          $cur_dir = 'top-hor-left';
          $manual_dir_counter--;
        }
        else {
          $cur_dir = $directions[$manual_directions[$manual_dir_counter] - 1];
        }
      }
      elseif ($options['manual']['manual_next'] == 'random') {
        $cur_dir = array_rand($new_directions);
      }
      else {
        // Reset counter and get the first item.
        $manual_dir_counter = 0;
        $cur_dir = $directions[$manual_directions[$manual_dir_counter] - 1];
      }
      $manual_dir_counter++;
    }
    else {
      // Random.
      $cur_dir = array_rand($new_directions);
    }
    $last_direction = $cur_dir;

    $lines[$i] = array(
      'dir' => $cur_dir,
      'order' => $i,
      'type' => $vars['rows'][$i]['type'],
    );

    $all_items_direction[$view->current_display][$last_direction][] = $lines[$i];
  }

  $js_options = array(
    $view->current_display => array(
      'overlap' => $options['overlap'],
      'center' => $options['center'],
      'title' => $options['title'],
      'direction_type' => $options['direction_type'],
      'manual' => $options['manual'],
      'random_options' => $options['random_options'],
      'max_width' => $options['max_width'],
      'lines' => $lines,
    ),
  );
  drupal_add_js(array('views_coscev' => $js_options), 'setting');

  $vars['directions'] = $directions;
  $vars['all_items_direction'] = $all_items_direction;
  $vars['title'] = $title;
}

/**
 * Implements hook_page_alter().
 *
 * Adds the navigation bar to the main content.
 */
function views_coscev_page_alter(&$page) {
  if (is_array(drupal_static('navigation_bar'))) {
    $nav_bar = drupal_static('navigation_bar');
    // Need to get the position of the displays to order the titles.
    $cview = views_get_view($nav_bar['view_name']);
    $ordered_titles = array();
    foreach ($nav_bar['items'] as $display_name => $title) {
      $position = $cview->display[$display_name]->position;
      $ordered_titles[$position] = array(
          'display_name' => $display_name,
           'name' => $title
      );
    }
    ksort($ordered_titles);
    drupal_add_library('system', 'effects.bounce');
    $rendered_nav_bar = theme('views_coscev_nav_bar', $ordered_titles);
    $page['content']['system_main']['main']['#markup'] = $rendered_nav_bar . $page['content']['system_main']['main']['#markup'];
  }
}

/**
 * Implements hook_preprocess_page().
 */
function views_coscev_preprocess_page(&$vars) {

  // Use page_coscev.tpl.php to render the view.
  if (isset($vars['page']['#views_contextual_links_info']) && $vars['page']['#views_contextual_links_info']['views_ui']['view']->style_plugin->plugin_name == 'views_coscev') {
    $vars['theme_hook_suggestions'][] = 'page__coscev';
  }
}

/**
 * Implements hook_preprocess_views_ui_view_preview_section().
 */
function views_coscev_preprocess_views_ui_view_preview_section(&$vars) {
  // Disable preview.
  if ($vars['section'] == 'rows' && $vars['view']->plugin_name == 'views_coscev') {
    $vars['content'] = t('Preview is disabled for this plugin, you should uncheck the Auto preview box');
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function views_coscev_theme_registry_alter(&$theme_registry) {
  // Check if the custom page.tpl file is overriden in the template.
  $theme_path = drupal_get_path('theme', variable_get('theme_default', NULL));
  $tpl_files = file_scan_directory($theme_path, '#^page--coscev\.tpl\.php$#');

  if (count($tpl_files)) {
    $tpl_path = str_replace('/page--coscev.tpl.php', '', key($tpl_files));
  }
  else {
    // Use the module one.
    $tpl_path = drupal_get_path('module', 'views_coscev');
  }

  $theme_registry['page__coscev'] = array(
    'template' => $tpl_path . '/page--coscev',
    'type' => 'theme_engine',
    'theme path' => $tpl_path,
    'render element' => 'page',
  );
}

/**
 * Implements hook_theme().
 */
function views_coscev_theme() {
  return array(
    'views_coscev_nav_bar' => array(
    'variables' => NULL
    )
  );
}

/**
 * Theme the navigation bar.
 */
function theme_views_coscev_nav_bar($vars) {
  $ret = '<div id="coscev_navigation_bar"><ul>';
  $page_title = drupal_get_title();
  foreach ($vars as $title) {
    // Replace the page title by home.
    $title_name = $page_title == $title['name'] ? t('home') : $title['name'];
    $ret .= '<li><a href="#' . $title['display_name'] . '">' . $title_name . '</a></li>';
  }
  $ret .= '</ul></div>';

  return $ret;
}

/**
 * Private utility function to parse a pixel or percent plugin setting.
 *
 * @param string $val
 *   The pixel or percent value.
 *
 * @return string
 *   Parsed value of pixel or percent.
 */
function _views_coscev_px_or_percent($val) {
  $val = check_plain($val);
  if (substr($val, -1) == '%') {
    return $val;
  }
  return $val . 'px';
}
