<?php
/**
 * @file
 * Tests for Views Coscev module.
 */

class ViewsCoscevTestCase extends DrupalWebTestCase {

  protected $authUser;

  /**
   * Provides test info.
   */
  public static function getInfo() {
    return array(
      'name'  => 'Views COSCEV',
      'description'  => "Tests for this view display & plugin",
      'group' => 'Views COSCEV',
    );
  }
  /**
   * Setup function.
   */
  public function setUp() {
    parent::setUp('views', 'views_ui', 'views_coscev');
    $this->authUser = $this->drupalCreateUser(array('administer views'));
    $this->drupalLogin($this->authUser);
  }

  /**
   * Test plugin.
   */
  protected function testBase() {
    // Create a view through the ui.
    $this->drupalGet('admin/structure/views/add');
    $this->assertResponse(200);

    $edit = array(
      'name' => 'test_coscev',
      'human_name' => 'Test coscev',
      'page[title]' => 'Test coscev',
      'page[path]' => 'test_coscev',
      'page[style][style_plugin]' => 'views_coscev',
      'page[items_per_page]' => 3,
      'page[pager]' => FALSE,
    );
    $this->drupalPost('admin/structure/views/add', $edit, t('Save & exit'));

    // Check default options.
    $this->drupalGet('admin/structure/views/view/test_coscev');
    $this->assertResponse(200);

    $this->drupalGet('admin/structure/views/nojs/display/test_coscev/page/style_options');
    $this->assertResponse(200);

    // Check we have all setting fields and their default options.
    $this->assertFieldById('edit-style-options-margins-margin-top', '10%', 'The margin-top is set to 10%');
    $this->assertFieldById('edit-style-options-margins-margin-right', '10%', 'The margin-right is set to 10%');
    $this->assertFieldById('edit-style-options-margins-margin-bottom', '20%', 'The margin-bottom is set to 20%');
    $this->assertFieldById('edit-style-options-margins-margin-left', '20%', 'The margin-left is set to 20%');

    $this->assertFieldById('edit-style-options-title-title-space', '1', 'Title space is set to 1');
    $this->assertFieldChecked('edit-style-options-title-title-mode-fixed', 'title mode is fixed');
    $this->assertOptionSelected('edit-style-options-title-title-effect', 'fade', 'fade effect');

    $this->assertFieldById('edit-style-options-overlap', '0', 'overlap is set to 0');
    $this->assertFieldById('edit-style-options-max-width', '30%', 'Max width is set to 30%');

    $this->assertFieldChecked('edit-style-options-direction-type-random', 'direction is random');

    $this->assertFieldById('edit-style-options-manual-manual-directions', '', 'no manual direction');
    $this->assertFieldChecked('edit-style-options-manual-manual-next-random', 'manual next random');

    $this->assertFieldChecked('edit-style-options-random-options-same-direction', 'prevent same direction');
    $this->assertNoFieldChecked('edit-style-options-random-options-same-way', 'no prevent same way');
    $this->assertNoFieldChecked('edit-style-options-random-options-clashes', 'no prevent clashes');

    // Create a few page items.
    for ($i = 0; $i < 20; $i++) {
      $settings = array(
        'type' => 'page',
        'title' => 'Title ' . $i,
        'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomName()))),
      );
      $node[] = $this->drupalCreateNode($settings);
    }

    // Check the page display.
    $this->drupalGet('test_coscev');
    $this->assertResponse(200);

    // Check inline css
    // margin.
    $this->assertRaw('.coscev-display-page .top-hor-left,.coscev-display-page .top-hor-right{top:10%;}.coscev-display-page .bottom-hor-right,.coscev-display-page  .bottom-hor-left{bottom:10%}.coscev-display-page .top-vert-left,.coscev-display-page  .bottom-vert-left{left:20%;}.coscev-display-page .top-vert-right,.coscev-display-page  .bottom-vert-right{right:10%;}', 'default margins are set');
    // Default title.
    $this->assertRaw('.coscev-display-page .coscev-inline-title{visibility:hidden;}.coscev-display-page .coscev-title{opacity:0;}', 'default titles ok');

    // H3 title is not outputted.
    $this->assertNoRaw('<h3', 'h3 title is not displayed');

    // Create a new attachment attached before page, with title coscev attach.
    $this->drupalPost('admin/structure/views/view/test_coscev/edit', array(), t('Add Attachment'));
    $this->drupalPost('admin/structure/views/nojs/display/test_coscev/attachment_1/displays', array('displays[page]' => 'page'), t('Apply'));
    $this->drupalPost('admin/structure/views/nojs/display/test_coscev/attachment_1/attachment_position', array('attachment_position' => 'after'), t('Apply'));

    $this->drupalPost('admin/structure/views/nojs/display/test_coscev/attachment_1/title', array('title' => 'coscev attach', 'override[dropdown]' => 'attachment_1'), t('Apply'));

    $this->drupalPost('admin/structure/views/view/test_coscev/edit/attachment_1', array(), t('Save'));
    // Check both titles are displayed.
    $this->drupalGet('test_coscev');
    $this->assertRaw('<h3 class="coscev-title">Test coscev</h3>', 'h3 title Test coscev is there');
    $this->assertRaw('<h3 class="coscev-title">coscev attach</h3>', 'h3 title coscev attach is there');
    // Hide the first title.
    $this->drupalPost('admin/structure/views/nojs/display/test_coscev/page/style_options', array('style_options[title][title_mode]' => 'hidden', 'override[dropdown]' => 'page'), t('Apply'));
    $this->drupalPost('admin/structure/views/view/test_coscev/edit', array(), t('Save'));
    // Check result.
    $this->drupalGet('test_coscev');
    $this->assertNoRaw('<h3 class="coscev-title">Test coscev</h3>', 'h3 title Test coscev is NOT there/ hidden');
    $this->assertRaw('<h3 class="coscev-title">coscev attach</h3>', 'h3 title coscev attach is still there');
    // Set inline title.
    // @TODO
  }
}
