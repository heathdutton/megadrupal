<?php
/**
 * @file
 * The restore UI module.
 */

define('RESTORE_UI_PERM_IMPORT', 'import restore scripts');
define('RESTORE_UI_PERM_CREATE', 'create restore scripts');
define('RESTORE_UI_PERM_EDIT', 'edit restore scripts');
define('RESTORE_UI_PERM_DELETE', 'delete restore scripts');

/**
 * Implements hook_menu().
 */
function restore_ui_menu() {
  $items = array();

  $items[RESTORE_MENU_PATH . '/script/%restore/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit the current script.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restore_ui_script_edit', 5),
    'access callback' => 'restore_ui_script_access',
    'access arguments' => array('edit', 5),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'file' => 'ui/edit.ui.inc',
  );

  $items[RESTORE_MENU_PATH . '/script/%restore/delete'] = array(
    'title' => 'Delete',
    'title callback' => 'restore_ui_delete_title',
    'title arguments' => array(5),
    'description' => 'Delete the current script.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restore_ui_script_delete', 5),
    'access callback' => 'restore_ui_script_access',
    'access arguments' => array('delete', 5),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'ui/delete.ui.inc',
  );

  $items[RESTORE_MENU_PATH . '/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restore_ui_script_add'),
    'access arguments' => array(RESTORE_UI_PERM_CREATE),
    'file' => 'ui/add.ui.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items[RESTORE_MENU_PATH . '/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restore_ui_script_import'),
    'access arguments' => array(RESTORE_UI_PERM_IMPORT),
    'file' => 'ui/import.ui.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function restore_ui_permission() {
  $items = array();

  $items[RESTORE_UI_PERM_IMPORT] = array(
    'title' => RESTORE_UI_PERM_IMPORT,
    'description' => 'Allow importing restore scripts.',
  );

  $items[RESTORE_UI_PERM_CREATE] = array(
    'title' => RESTORE_UI_PERM_CREATE,
    'description' => 'Allow creating restore scripts.',
  );

  $items[RESTORE_UI_PERM_EDIT] = array(
    'title' => RESTORE_UI_PERM_EDIT,
    'description' => 'Allow editing restore scripts.',
  );

  $items[RESTORE_UI_PERM_DELETE] = array(
    'title' => RESTORE_UI_PERM_DELETE,
    'description' => 'Allow deleting restore scripts.',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function restore_ui_theme() {
  $items = array();

  $items['restore_ui_script_edit_operations'] = array(
    'render element' => 'element',
    'file' => 'ui/edit.ui.inc',
  );

  return $items;
}

/**
 * Delete menu item title callback.
 */
function restore_ui_delete_title($script) {
  return $script->module() ? t('Revert') : t('Delete');
}

/**
 * Menu access callback.
 */
function restore_ui_script_access($op, $script) {
  switch ($op) {
    case 'edit':
      return $script->locked() == FALSE && user_access(RESTORE_UI_PERM_EDIT);

    case 'delete':
      return $script->locked() == FALSE && $script->database() && user_access(RESTORE_UI_PERM_DELETE);

    default:
      return FALSE;
  }
}

/**
 * Implements hook_restore_scripts_alter().
 */
function restore_ui_restore_scripts_alter(&$scripts) {
  $dbq = db_select('restore_scripts', 'rs');
  $records = $dbq
    ->fields('rs', array('name'))
    ->execute()
    ->fetchAll();

  foreach ($records as $row) {
    $record = restore_ui_load_script($row->name);

    $record->group = $record->script_group;
    unset($record->script_group);

    $scripts[$record->name] = new RestoreScript($record->name, (array) $record);
  }
}

/**
 * Load a restore script from the database.
 *
 * @param string $name
 *   The machine name of the script to load.
 *
 * @return object|boolean
 *   Either the database record or FALSE.
 */
function restore_ui_load_script($name) {
  $dbq = db_select('restore_scripts', 'rs');
  $record = $dbq
    ->fields('rs', array())
    ->condition('name', $name)
    ->execute()
    ->fetch();

  if (!$record) {
    return FALSE;
  }

  if (is_string($record->operations)) {
    $record->operations = unserialize($record->operations);
  }

  $record->database = TRUE;

  return $record;
}

/**
 * Save the script details record.
 *
 * @param object $record
 *   The details record to save.
 */
function restore_ui_save($record) {
  return drupal_write_record('restore_scripts', $record, isset($record->id) ? 'id' : array());
}

/**
 * Save the restore script to the database.
 *
 * @param RestoreScript $script
 *   The restore script to save.
 */
function restore_ui_save_script(RestoreScript $script) {
  $record = restore_ui_load_script($script->name());
  if (!$record) {
    $record = (object) array();
  }

  $record->name = $script->name();
  $record->module = $script->module();
  $record->title = $script->title();
  $record->description = $script->description();
  $record->script_group = $script->group();
  $record->operations = array();

  foreach ($script as $operation) {
    $record->operations[] = array(
      'type' => $operation->type(),
      'items' => $operation->items(),
    );
  }

  return restore_ui_save($record);
}

/**
 * Determine if the machine name exists in the database.
 *
 * @param string $name
 *   The machine name to check.
 *
 * @return bool
 *   Returns TRUE or FALSE.
 */
function restore_ui_exists($name) {
  $scripts = restore_scripts();
  return isset($scripts[$name]);
}
