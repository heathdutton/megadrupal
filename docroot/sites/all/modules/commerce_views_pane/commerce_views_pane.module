<?php

/**
 * @file
 * Implements views as Commerce checkout panes.
 */

/**
 * Implements hook_views_api().
 */
function commerce_views_pane_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_views_pane') . '/includes/views',
  );
}

/**
 * Implements hook_theme().
 */
function commerce_views_pane_theme() {
  return array(
    'commerce_views_pane_content' => array(
      'variables' => array('title' => NULL, 'content' => NULL, 'order' => NULL),
      'path' => drupal_get_path('module', 'commerce_views_pane') . '/theme',
      'template' => 'commerce-views-pane-content',
    ),
  );
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_views_pane_commerce_checkout_pane_info() {
  // Try to avoid instantiating all the views just to get the blocks info.
  views_include('cache');
  $cache = views_cache_get('commerce_views_panes', TRUE);
  if (!empty($cache) && is_array($cache->data)) {
    return $cache->data;
  }

  $panes = array();
  $defaults = array(
    'title' => '',
    'base' => 'commerce_views_pane_checkout_pane',
    'file' => 'includes/commerce_views_pane.checkout_pane.inc',
    'page' => 'checkout',
    'review' => FALSE,
    'enabled' => FALSE,
    'weight' => -10,
  );

  $views = views_get_all_views();
  foreach ($views as $view) {
    // disabled views get nothing.
    if (!empty($view->disabled)) {
      continue;
    }

    $view->init_display();
    foreach ($view->display as $display_id => $display) {
      if (isset($display->handler) && !empty($display->handler->definition['uses hook commerce_checkout_pane_info'])) {
        $result = $display->handler->execute_hook_commerce_checkout_pane_info();
        if (!empty($result) && is_array($result)) {
          $pane_id = commerce_views_display_create_pane_id($view->name, $display_id);
          $panes[$pane_id] = $result + $defaults;
        }
      }
    }
  }

  // Save memory: Destroy those views.
  foreach ($views as $view) {
    $view->destroy();
  }

  // set cache
  views_cache_set('commerce_views_panes', $panes, TRUE);

  return $panes;
}

/**
 * Create a pane id based on view id and display id
 *
 * @param $view id
 *   The name of the view.
 * @param $display_id
 *   The display id
 *
 * @return
 *  A combined pane id
 */
function commerce_views_display_create_pane_id($view_id, $display_id) {
  return 'cvp-' . $view_id . '-' . $display_id;
}

/**
 * Parse pane id into it's parts
 *
 * @param $pane_id
 *  The checkout pane id
 *
 * @param
 *  An array keyed with module_prefix, view_id, display_id
 */
function commerce_views_display_parse_pane_id($pane_id) {
  $return = array();
  $keys = array('module_prefix', 'view_id', 'display_id');
  $parts = explode('-', $pane_id);
  if (!empty($parts)) {
    foreach ($parts as $i => $part) {
      $key = isset($keys[$i]) ? $keys[$i] : $i;
      $return[$key] = $part;
    }
  }

  return $return;
}

/**
 * Executes a View for display in some other element.
 *
 * @param $view_id
 *   The name of the view.
 * @param $display_id
 *   The view display id. If unsure, use 'default', as it will always be
 *   valid. But things like 'page' or 'block' should work here.
 * @param array $arguments
 *   An array of arguments to pass to the View.
 * @param string $override_url
 *   A url that overrides the url of the current view.
 *
 * @return array|bool|void
 *
 * @see views_block_view(), views_embed_view(),
 */
function commerce_views_pane_execute_display($view_id, $display_id, $arguments = array(), $override_url = '') {
  $output = array();

  // Load the specified View.
  $view = views_get_view($view_id);

  // Check access
  if (!$view || !$view->access($display_id)) {
    $view->destroy();
    return $output;
  }

  // Override the view url, if an override was provided.
  if (!empty($override_url)) {
    $view->override_url = $override_url;
  }

  // Initialize arguments
  $view_args = array();
  if (!empty($arguments)) {
    $view_args = $arguments;
  }

  // Return the rendered View.
  $result = $view->execute_display($display_id, $view_args);
  if ($result) {
    $output = $result;
  }

  $view->destroy();
  return $output;
}

/**
 * Creates an array of view arguments populated according the configuration of
 * the pane.
 *
 * @param array $view_info
 *  Array of view information: module prefix, view id, display_id
 * @param null $order
 *  The order to use for replacement patterns.
 *
 * @return array
 *   An array of arguments
 */
function _commerce_views_pane_view_build_order_arguments($view_info, $order = NULL) {
  $return = array();
  $view = views_get_view($view_info['view_id']);
  if (empty($view)) {
    return $return;
  }

  $args = $view->get_items('argument', $view_info['display_id']);
  if (!empty($args) && is_array($args)) {
    foreach ($args as $index => $arg_data) {
      if (isset($arg_data['field'])) {
        $var_name = implode('_', $view_info + array($index));
        $default_value = variable_get($var_name);
        $value = token_replace($default_value, array('commerce-order' => $order), array('clear' => TRUE));
        $return[] = empty($value) ? NULL : $value;
      }
      else {
        $return[] = NULL;
      }
    }
  }

  return $return;
}
