<?php
/**
 * @file
 * Hook implementations and helper functions for the uc_endicia module.
 * Integrates Grindflow Endicia Cloud with Ubercart's order shipments.
 */

/**
 * Implements hook_menu().
 */
function uc_endicia_menu() {
  $items['admin/store/orders/%uc_order/shipments/labels/endicia'] = array(
    'title' => 'Print Label',
    'page callback' => 'uc_endicia_label_image',
    'access arguments' => array('fulfill orders'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/orders/%uc_order/shipments/endicia'] = array(
    'title' => 'USPS shipment via Endicia',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_endicia_confirm_shipment', 3),
    'access arguments' => array('fulfill orders'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_endicia.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_uc_shipping_method().
 */
function uc_endicia_uc_shipping_method() {
  $methods = array();

  $enabled = variable_get('uc_quote_enabled', array());
  $types = uc_quote_get_shipping_types();
  $shapes = _endicia_pkg_types();
  foreach ($types as $id => $ship_type) {
    $weight = $types[$ship_type['id']]['weight'];
    $methods['endicia_' . $ship_type['id']] = array(
      'id' => 'endicia_' . $ship_type['id'],
      'module' => 'uc_endicia',
      'title' => t('Endicia (custom)', array('@ship_type' => $ship_type['title'])),
      'enabled' => isset($enabled['uc_endicia']) ? $enabled['uc_endicia'] : TRUE,
      'ship' => array(
        'type' => $ship_type['id'],
        'callback' => 'uc_endicia_fulfill_order',
        'file' => 'uc_endicia.admin.inc',
        'pkg_types' => $shapes,
      ),
      'weight' => $weight,
    );
  }
  foreach (endicia_label_preset_get_all() as $preset) {
    $weight = $types[$ship_type['id']]['weight'];
    $methods['endicia_preset_' . $preset['preset_id']] = array(
      'id' => 'endicia_preset_' . $preset['preset_id'],
      'module' => 'uc_endicia',
      'title' => t('Endicia (preset: @name)', array('@name' => $preset['name'])),
      'enabled' => isset($enabled['uc_endicia']) ? $enabled['uc_endicia'] : TRUE,
      'ship' => array(
        'type' => $preset['ship_type'],
        'callback' => 'uc_endicia_fulfill_order_preset',
        'file' => 'uc_endicia.admin.inc',
        'pkg_types' => $shapes,
      ),
      'weight' => $weight,
    );
  }
  return $methods;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uc_endicia_form_endicia_ui_label_preset_form_alter(&$form, &$form_state, $form_id) {
  $preset = array();
  if ($form['action']['#value'] == 'update' && $form['preset_id']['#value']) {
    $preset = endicia_label_preset_load($form['preset_id']['#value']);
  }
  $form['ship_type'] = array(
    '#type' => 'select',
    '#title' => t('Ubercart shipment package type'),
    '#description' => t('This preset will only be presented for Ubercart packages of this type.'),
    '#options' => uc_quote_shipping_type_options(),
    '#default_value' => isset($preset['ship_type']) ? $preset['ship_type'] : 0,
    '#required' => TRUE,
    '#weight' => 1,
  );
  $form['submit']['#weight'] = 5;
}

/**
 * Implements hook_endicia_label_preset_alter().
 */
function uc_endicia_endicia_label_preset_alter(&$preset, &$form_values) {
  $preset['ship_type'] = $form_values['ship_type'];
}

/**
 * Implements hook_theme().
 */
function uc_endicia_theme() {
  return array(
    'uc_endicia_fulfill_order' => array(
      'render element' => 'form',
      'file' => 'uc_endicia.admin.inc',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Takes the 'Ship Manually' option in the Shipping Methods select and puts it
 * last in the list.
 */
function uc_endicia_form_uc_shipping_new_shipment_alter(&$form, &$form_state) {
  if (isset($form['method'])) {
    $manually = array_shift($form['method']['#options']);
    array_push($form['method']['#options'], $manually);
  }

  $found = FALSE;
  foreach($form['method']['#options'] as $name => $value) {
    if (strpos($name, 'endicia_') === 0 && strpos($name, 'endicia_preset_') === FALSE) {
      if ($found) {
        // We have to declare Endicia options for each shipping type, but they
        // all go to the same place. We can eliminate the redundant entries if
        // an order has packages of more than one types.
        unset($form['method']['#options'][$name]);
      }
      $found = TRUE;
    }
  }
}

/**
 * Sums the price of products in the package and returns the total
 */
function uc_endicia_get_package_value($package) {
  // Sum product prices by their quantity for total declared value
  $total = 0.0;
  if (isset($package->products)) {
    foreach($package->products as $product) {
      $total += $product->price * $product->qty;
    }
  }
  return $total;
}

/**
 * Generates and submits a new request to the API server, returns its response.
 */
function uc_endicia_shipping_label_request($package, $origin, $destination, $mail_class) {
  global $user;
  $packages = $_SESSION['uc_endicia']['packages'];
  $is_international = ($destination->country != 'US');
  // Determine the package's weight
  $weight_unit_ratio = ($package->weight_units != 'oz' ? uc_weight_conversion($package->weight_units, 'oz') : 1);
  $weight = round($package->weight * $weight_unit_ratio, 1);

  $countries = _endicia_country_get_predefined_list();
  $data = array(
    'AccountID' => variable_get('endicia_account_id', ''),
    'Password' => variable_get('endicia_passphrase', ''),
    'Class' => $mail_class,
    'Packaging' => $package->pkg_type,
    'Weight' => $weight, // ounces
    'Description' => t('Shipment of products from your order #@order_id', array('@order_id' => $package->order_id)),
    'DeclaredValue' => $package->value, // also not needed?
    'CustomerID' => $user->uid,
    'TransactionID' => sprintf('o-%d-%d', $package->order_id, $package->package_id),
    'Recipient' => array(
      'Name' => $destination->first_name . ' ' . $destination->last_name,
      'Company' => $destination->company,
      'Address1' => $destination->street1,
      'Address2' => $destination->street2,
      'City' => $destination->city,
      'State' => $destination->zone,
      'CountryCode' => $destination->country,
      'Country' => $countries[$destination->country],
      // 'PostalCode' added later
      'Phone' => preg_replace("/[^0-9]/", "", $destination->phone),
      'Email' => $destination->email,
    ),
    'Sender' => array(
      'Name' => $origin->first_name . ' ' . $origin->last_name,
      'Address1' => $origin->street1,
      'Address2' => $origin->street2,
      'City' => $origin->city,
      'State' => $origin->zone,
      'PostalCode' => $origin->postal_code,
      'Phone' => preg_replace("/[^0-9]/", "", $origin->phone),
      'Email' => $origin->email,
    ),
    'Test' => _endicia_in_test_mode() ? 'YES' : 'NO',
    'CostCenter' => 0,
    'LabelFormat' => variable_get('endicia_label_image_format', 'PNG'),
    'Services' => array(),
  );
  // Figure out if we are using a ZIP5 or international postal code.
  if ($is_international || !preg_match('/\d+-\d+/', $destination->postal_code)) {
      $data['Recipient']['PostalCode'] = $destination->postal_code;
  }
  else {
    list($zip5, $zip4) = explode('-', $destination->postal_code, 2);
    $data['Recipient']['PostalCode'] = $zip5;
    $data['Recipient']['PostalCodeZip4'] = $zip4;
  }
  // Determine shipping options
  foreach($packages[$package->package_id]['options'] as $option => $value) {
    if ($value) {
      switch ($option) {
        case 'signature_confirmation':
          $data['Services']['SignatureConfirmation'] = 'ON';
          break;
        case 'delivery_confirmation':
          $data['Services']['DeliveryConfirmation'] = 'ON';
          break;
        case 'hold_for_pickup':
          $data['Services']['HoldForPickup'] = 'ON';
          break;
        case 'usps_form_2976':
          $data['CustomsInfo'] = array();
          break;
      }
    }
  }

  // These aren't even described in the API but they're in the examples.
  $data += array(
    'CustomsQuantity1' => 0, 'CustomsValue1' => 0, 'CustomsWeight1' => 0,
    'CustomsQuantity2' => 0, 'CustomsValue2' => 0, 'CustomsWeight2' => 0,
    'CustomsQuantity3' => 0, 'CustomsValue3' => 0, 'CustomsWeight3' => 0,
    'CustomsQuantity4' => 0, 'CustomsValue4' => 0, 'CustomsWeight4' => 0,
    'CustomsQuantity5' => 0, 'CustomsValue5' => 0, 'CustomsWeight5' => 0,
  );
  if (isset($data['CustomsInfo'])) {
    // Customs integrated forms, if applicable
    $customs_items = array();
    foreach ($package->products as $product) {
      $node = node_load($product->nid);
      $customs_items[] = array(
        'Description' => $product->title,
        'Quantity' => $product->qty,
        'Weight' => $product->weight * uc_weight_conversion($product->weight_units, 'oz'),
        'Value' => $product->price,
      );
    }
    $label_type = $is_international ? 'International' : 'Domestic';
    $form_type = 'Form2976';
    // This is ugly, but there isn't much we can do.
    $general_case = ( $label_type == 'International' && in_array($data['Class'], array('PriorityMailInternational', 'ExpressMailInternational')) );
    $exception_int_flenv_prio = $label_type == 'International' && $data['Packaging'] == 'FlatRateEnvelope' && $data['Class'] == 'PriorityMailInternational';
    if ($general_case && !$exception_int_flenv_prio) {
      $form_type .= 'A';
    }
    if (count($customs_items)) {
      if ($form_type == 'Form2976' && count($customs_items) > 5) {
        drupal_set_message(t('Only 5 item descriptors are supported on the USPS Form 2976 due to 4x6 label size constraints. Please package 5 or fewer products in package @packagenum and try again.', array('@packagenum' => $package->package_id)), 'error');
        return FALSE;
      }
      $data += array(
        'LabelType' => $label_type,
        'LabelSubtype' => 'Integrated',
        'IntegratedFormType' => $form_type,
      );
      $data['CustomsInfo'] += array(
        'ContentsType' => 'Merchandise',
        'CustomsItems' => $customs_items,
      );
    }
  }

  // Determine label size: Endicia uses a WxH notation, we want a 6x4 in all cases
  if ($is_international) {
    $data['LabelSize'] = '4x6c'; // this returns a 6x4 label
  }
  else {
    $data['LabelSize'] = '4x6';
    if (!in_array($data['LabelFormat'], array('EPL2', 'ZPLII'))) {
      $data['LabelRotation'] = 'Rotate90';
    }
  }

  $uri = _endicia_in_test_mode() ? ENDICIA_TEST_URI : ENDICIA_PRODUCTION_URI;
  $response_node = 'LabelRequestResponse';
  $response = endicia_api_request($uri, 'GetPostageLabel', $data, $response_node);
  // Check for failures
  if ($response === FALSE) {
    return FALSE;
  }
  // Check for errors
  if ($error = endicia_api_request_error_check($response, $response_node)) {
    $message = 'Could not create shipment for package #@packagenum. Error #@errornum: %errormsg (check the site log for additional details).';
    $variables = array(
      '@packagenum' => $package->package_id,
      '@errornum' => $error['status'],
      '%errormsg' => $error['message'],
    );
    drupal_set_message(t($message, $variables), 'error');
    return FALSE;
  }
  return $response;
}

/**
 * Extracts the address information from an order and returns the $type
 * address information as an object.
 */
function _uc_endicia_get_address($source, $type) {
  // TODO: Eventually, we should migrate to the proper names... We are
  // currently using UC-style address properties.
  $properties = array(
    'first_name',
    'last_name',
    'company',
    'street1',
    'street2',
    'city',
    'zone',
    'postal_code',
    'country',
    'phone',
  );

  $address = new stdClass();
  foreach($properties as $property) {
    if (is_array($source)) {
      $address->{$property} = $source[$type . '_' . $property];
    }
    else {
      $address->{$property} = $source->{$type . '_' . $property};
    }
  }
  return $address;
}

/**
 * Workaround for the annoying way Ubercart presents the file path in the URL.
 */
function uc_endicia_label_image() {
  $args = explode('/', $_GET['q'], 8);
  if (count($args) != 8) {
    return MENU_NOT_FOUND;
  }

  $image_path = file_stream_wrapper_uri_normalize($args[7]);
  drupal_goto('endicia/print/' . file_uri_target($image_path));
}
