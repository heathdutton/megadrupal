<?php

/**
 * @file
 * Main module file for Gitlab Accounts.
 */

/**
 * Implements hook_entity_info().
 */
function gitlab_accounts_entity_info() {
  $info = array();
  $info['gitlab_account'] = array(
    'label' => t('GitLab account'),
    'base table' => 'gitlab_accounts',
    'entity class' => 'GitLabAccountEntity',
    'controller class' => 'EntityAPIController',
    'module' => 'gitlab_accounts',
    'access callback' => 'gitlab_accounts_gitlab_account_access',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
  );
  return $info;
}

/**
 * Access callback for gitlab_account entities.
 *
 * @see gitlab_accounts_entity_info()
 */
function gitlab_accounts_gitlab_account_access($op, $entity, $account, $entity_type) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  switch ($op) {
    case'view':
      return user_access('view gitlab accounts', $account);

    default:
      return user_access('administer gitlab accounts', $account);
  }
}

/**
 * Implements hook_permission().
 */
function gitlab_accounts_permission() {
  return array(
    'view gitlab accounts' => array(
      'title' => t('View existing GitLab Accounts'),
      'description' => t('Allows a user to view the existing GitLab Accounts.'),
    ),
    'administer gitlab accounts' => array(
      'title' => t('Administer GitLab Accounts'),
      'description' => t('Allows a user to manage GitLab Accounts in the system.'),
    ),
  );
}


/**
 * Helper function to load a single account entity.
 *
 * @param string $id
 *   The unique id of the account entity or NULL, if conditions are used.
 * @param array $conditions
 *   An array of (AND) property conditions used by entity field query.
 *
 * @returns GitLabAccountEntity
 *   Returns an account entity object or NULL, if it was not any results.
 */
function gitlab_accounts_load_account($id = NULL, array $conditions = array()) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'gitlab_account');
  if ($id !== NULL) {
    $query->propertyCondition('id', $id);
  }
  if (!empty($conditions)) {
    foreach ($conditions as $prop_name => $prop_value) {
      $query->propertyCondition($prop_name, $prop_value);
    }
  }
  $query->range(0, 1);

  $result = $query->execute();
  if (!empty($result['gitlab_account'])) {
    $entity = array_shift($result['gitlab_account']);
    return entity_load_single('gitlab_account', $entity->id);
  }
  return NULL;
}

/**
 * Helper function to load account entities.
 *
 * @param array $ids
 *   The unique ids of the account entities or NULL, if conditions are used.
 * @param array $conditions
 *   An array of (AND) property conditions used by entity field query.
 *
 * @returns array
 *   Returns an array of account entity objects or an empty array, if there were
 *   no results.
 */
function gitlab_accounts_load_accounts(array $ids = NULL, array $conditions = array()) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'gitlab_account');
  if ($ids !== NULL) {
    $query->propertyCondition('id', $ids, 'IN');
  }
  if (!empty($conditions)) {
    foreach ($conditions as $prop_name => $prop_value) {
      $query->propertyCondition($prop_name, $prop_value);
    }
  }

  $result = $query->execute();
  if (!empty($result['gitlab_account'])) {
    $entity_ids = array_keys($result['gitlab_account']);
    return entity_load('gitlab_account', $entity_ids);
  }
  return array();
}
