<?php

/**
 * @file
 * This is the file description for Exports logs module.
 *
 * This module provides facility to export logs in different formats.
 */

/**
 * Implements hook_menu().
 */
function export_logs_menu() {
  $items['explog'] = array(
    'title' => 'Export logs',
    'page callback' => 'export_logs_page_details',
    'access callback' => 'export_logs_access',
    'access arguments' => array('access for export logs'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function export_logs_init() {
  if (user_access('access for export logs')) {
    $export_logs_enabled = isset($_GET['explog']) ? $_GET['explog'] : FALSE;
    if ($export_logs_enabled) {
      export_logs_exploration();
    }
  }
}


/**
 * Implements hook_permission().
 */
function export_logs_permission() {
  return array(
    'access for export logs' => array(
      'title' => t('Provide access for export logs'),
      'description' => t('Provide access for export logs'),
    ),
  );

}

/**
 * Implements hook_access().
 */
function export_logs_access($string, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * Processing to explore exportation of logs.
 */
function export_logs_exploration() {
  drupal_goto('explog');
}

/**
 * Preparing logs to export.
 */
function export_logs_page_details() {
  $how_many = isset($_REQUEST['fetch']) ? $_REQUEST['fetch'] : '';
  if (!empty($how_many)) {
    $how_many = check_plain($how_many);
    if (!is_numeric($how_many)) {
      drupal_set_message(t("Please pass numeric value in the parameter."), "error");
      return t("Something went wrong. Please try again.");
    }
    if ($how_many > 5000) {
      drupal_set_message(t("Maximum 5000 records can be fetched."), "error");
      return t("Something went wrong. Please try again.");
    }
  }
  else {
    $how_many = 100;
  }
  $file_name = "export_logs_" . date("Y_m_d#h_i_s") . ".txt";
  header("Content-type: text/plain");
  header("Content-Disposition: attachment; filename=$file_name");
  $records = db_select('watchdog', 'w')
            ->fields('w',
              array(
                'type',
                'message',
                'variables',
                'location',
                'referer',
                'hostname',
                'timestamp',
              ))
    ->orderBy('wid', 'DESC')
    ->range(0, $how_many)
    ->execute()
    ->fetchAll();
  $output = '';
  if (count($records) > 0) {
    foreach ($records as $log) {
      $location = $log->location;
      $referer = $log->referer;
      $type = $log->type;
      $hostname = $log->hostname;
      $message = $log->message;
      $variables = unserialize($log->variables);
      $variables_count = count($variables);
      $time = date('Y-m-d h:i:s', $log->timestamp);
      if ($variables_count > 0) {
        foreach ($variables as $key => $value) {
          $message = str_replace($key, $value, $message);
        }
      }
      $output .= "[" . $time . "] : " . wordwrap($message, 100, "\r\n", TRUE) . "\r\n";
      $output .= t('Location =') . $location . "\r\n";
      $output .= t('Referer =') . $referer . "\r\n";
      $output .= t('Host name =') . $hostname . "\r\n";
      $output .= t('Type =') . $type . "\r\n\r\n";
      print $output;
    }
  }

}
