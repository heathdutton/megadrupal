<?php

/**
 * @file
 * Spotify field for displaying artist, album and track information.
 */

/**
 * Implementation of hook_menu().
 */
function spotifyfield_menu() {
  $items = array();

  $items['admin/config/content/spotifyfield'] = array(
    'title' => 'Spotify Field',
    'description' => 'Settings for Spotify field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spotifyfield_settings'),
    'access arguments' => array('administer site settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['spotify'] = array(
    'title' => 'Spotify Autocomplete',
    'page callback' => 'spotifyfield_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function spotifyfield_theme($existing, $type, $theme, $path) {
  return array(
    'spotifyfield_formatter_default' => array(
      'variables' => array('element' => NULL),
    ),
    'spotifyfield_formatter_plain' => array(
      'variables' => array('element' => NULL),
    ),
    'spotifyfield_formatter_extended' => array(
      'variables' => array('element' => NULL),
    ),
		'spotifyfield_formatter_play_button' => array(
			'variables' => array('element' => NULL, 'settings' => NULL),
		),
    'spotify_album' => array(
      'variables' => array('data' => NULL),
    ),
    'spotify_artist' => array(
      'variables' => array('data' => NULL),
    ),
    'spotify_track' => array(
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function spotifyfield_field_info() {
  return array(
    'spotifyfield' => array(
      'label' => t('Spotifyfield'),
      'description' => t('Stores information on artists, albums and tracks.'),
      'default_widget' => 'spotifyfield_widget',
      'default_formatter' => 'spotifyfield_default',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function spotifyfield_field_formatter_info() {
  return array(
    'spotifyfield_default' => array(
      'label' => t('Default'),
      'field types' => array('spotifyfield'),
    ),
    'spotifyfield_plain' => array(
      'label' => t('Plain text'),
      'field types' => array('spotifyfield'),
    ),
    'spotifyfield_extended' => array(
      'label' => t('Extended'),
      'field types' => array('spotifyfield'),
    ),
		'spotifyfield_play_button' => array(
    	'label' => t('Spotify play button'),
    	'field types' => array('spotifyfield'),
			'settings' => array(
				'size' => 'large',
			),
  	),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function spotifyfield_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {	
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];
	
	$element = array();

  if ($display['type'] == 'spotifyfield_play_button') {
    $element['size'] = array(
      '#title' => t('Size'), 
      '#type' => 'select', 
      '#options' => array(
      	'large' => t('Large (250x330)'),
				'compact' => t('Compact (300x80)'),
      ),
      '#default_value' => $settings['size'], 
      '#required' => TRUE,
    );
	}
	
	return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function spotifyfield_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';
  if ($display['type'] == 'spotifyfield_play_button') {
    $summary = t('Size: @size', array('@size' => $settings['size']));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function spotifyfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    if ($item['spotifyfield']) {
      $value = _spotifyfield_format_value($item['spotifyfield']);
      switch ($display['type']) {
        case 'spotifyfield_default':
          $element[$delta]['#markup'] = theme('spotifyfield_formatter_default', array('element' => $value));
          break;

        case 'spotifyfield_plain':
          $element[$delta]['#markup'] = theme('spotifyfield_formatter_plain', array('element' => $value));
          break;

        case 'spotifyfield_extended':
          $element[$delta]['#markup'] = theme('spotifyfield_formatter_extended', array('element' => $value));
          break;

				case 'spotifyfield_play_button':
					$settings = $display['settings'];
					$element[$delta]['#markup'] = theme('spotifyfield_formatter_play_button', array('element' => $value, 'settings' => $settings));
					break;
      }
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function spotifyfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $reference_type = isset($instance['widget']['settings']['referenceable_type']) ? $instance['widget']['settings']['referenceable_type'] : NULL;
  $field_name = $field['field_name'];
  $field_type = $field['type'];
  $default_value = isset($items[$delta]) ? $items[$delta] : '';

  if (isset($form_state['input'][$field_name][$langcode][$field_type])) {
    $default_value = array(
      $field_type => $form_state['input'][$field_name][$langcode][$field_type],
    );
  }

  switch ($instance['widget']['type']) {
    case 'spotifyfield':
      $element['spotifyfield'] = array(
        '#type' => 'textfield',
        '#title' => $element['#title'],
        '#description' => $element['#description'],
        '#default_value' => $default_value,
        '#required' => $element['#required'],
        '#delta' => $delta,
        '#element_validate' => array('spotifyfieldValidate'),
        '#autocomplete_path' => 'spotify/' . $reference_type,
      );

      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function spotifyfield_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'spotifyfield_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function spotifyfield_field_is_empty($item, $field) {
  if (empty($item['spotifyfield'])) {
    return true;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function spotifyfield_field_widget_info() {
  return array(
    'spotifyfield' => array(
      'label' => t('Autocomplete text field'),
      'field types' => array('spotifyfield'),
      'behaviors' => array(
        'default value' => FIELD_BEHAVIOR_NONE,
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function spotifyfield_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();

  $default = isset($settings['referenceable_type']) ? $settings['referenceable_type'] : NULL;
  $form['referenceable_type'] = array(
    '#type' => 'radios',
    '#title' => t('Referenceable type'),
    '#description' => t('Check the type of information you want referenceable for this field.'),
    '#default_value' => $default,
    '#options' => array(
      'artist' => t('Artists'),
      'album' => t('Albums'),
      'track' => t('Tracks'),
    ),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Utility function which converts the 3 elements, month, day and year
 * in to a unix timestamp (number of seconds) 
 */
function spotifyfieldValidate($element, &$form_state) {
  if (isset($element['#value'])) {
    $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
//    if (is_array($item) && isset($item['_error_element'])) {
//      unset($item['_error_element']);
//    }
    $value = $element['#value'];
    $matches = array();
    preg_match('/(([^[]+)\[([^]]+))/i', $value, $matches);
    if (sizeof($matches) != 4) {
      form_set_error($error_element, t('%name: the value is not in a correct format, do not manually edit the returned value.', array('%name' => $element['#title'])));
    }
    else {
      form_set_value($element, array('spotifyfield' => $value), $form_state);
    }
  }
}

/**
 * Menu callback; Retrieve json formated string of matches.
 */
function spotifyfield_autocomplete($type, $query) {
  $matches = array();

  // Load API include file.
  module_load_include('inc', 'spotify', 'spotify.api');

  $function = "spotify_search_{$type}";
  if (function_exists($function)) {
    // Search.
    if ($results = $function(urlencode($query))) {
      // Load XML.
      if ($xml = simplexml_load_string($results->data)) {
        // Assemble matches.
        foreach ($xml->$type as $row) {
          switch ($type) {
            case 'album':
            case 'track':
              $matches[$row->name . " [{$row['href']}]"] = '<div class="reference-autocomplete">' . check_plain($row->name) . ' - ' . check_plain($row->artist->name) . '</div>';
              break;
            default:
              $matches[$row->name . " [{$row['href']}]"] = '<div class="reference-autocomplete">' . check_plain($row->name) . '</div>';
              break;
          }
        }
      }
    }

    // Output JSON.
    drupal_json_output($matches);
  }
}

/**
 * Theme function for 'default' spotifyfield field formatter.
 */
function theme_spotifyfield_formatter_default($variables) {
	$element = $variables['element'];
  $output = '';
  $output = '<a href="' . $element['link'] . '">' . $element['title'] . '</a>';
  return $output;
}

/**
 * Theme function for 'plain' spotifyfield field formatter.
 */
function theme_spotifyfield_formatter_plain($variables) {
	$element = $variables['element'];
  return $element['title'];
}

/**
 * Theme function for 'extended' spotifyfield field formatter.
 */
function theme_spotifyfield_formatter_extended($variables) {
	$element = $variables['element'];
	
  // Get title and uri and type; artist, album or track.
  $matches = array();
  preg_match('/(([^[]+)\[(spotify:([^:]+):[^]]+))/i', $element['safe'], $matches);
  list(,, $title, $uri, $type) = $matches;

  // Include Spotify API.
  module_load_include('inc', 'spotify', 'spotify.api');

  // Different type of extra information depending on type.
  $extras = NULL;
  switch ($type) {
    case 'album':
      $extras = 'track';
      break;

    case 'artist':
      $extras = 'albumdetail';
      break;

    case 'track':
      $extras = NULL;
      break;
  }

  // Try to fetch data from Spotify. On failure fall back on the default
  // formatter.
  if ($response = spotify_lookup($uri, $extras)) {
    // Call the correct theme function.
    switch ($type) {
      case 'album':
        return theme('spotify_album', array('data' => $response->data));
        break;

      case 'artist':
        return theme('spotify_artist', array('data' => $response->data));
        break;

      case 'track':
        return theme('spotify_track', array('data' => $response->data));
        break;

      default:
        return theme('spotifyfield_formatter_default', $element);
        break;
    }
  }
  else {
    return theme('spotifyfield_formatter_default', $element);
  }
}

/**
 * Theme function for 'play button' field formatter.
 */
function theme_spotifyfield_formatter_play_button($variables) {
	$element = $variables['element'];
	$settings = $variables['settings'];
	
	// Get title and uri and type; artist, album or track.
  $matches = array();
  preg_match('/(([^[]+)\[(spotify:([^:]+):[^]]+))/i', $element['safe'], $matches);
  list(,, $title, $uri, $type) = $matches;

	if ($type == 'artist') {
		return t('The field formatter <em>Spotify play button</em> is not supported for artists.');
	}
	
	if ($settings['size'] == 'large') {
		$width = 250;
		$height = 330;
	}
	else {
		$width = 300;
		$height = 80;
	}
	
	$markup = sprintf('<iframe src="https://embed.spotify.com/?uri=%s" width="%d" height="%d" frameborder="0" allowtransparency="true"></iframe>', $element['matches'][3], $width, $height);
	return $markup;
}

/**
 * Theme function for album.
 */
function theme_spotify_album($data) {
  // Load XML data.
  $doc = simplexml_load_string($data['data']);

  $album = $doc->name;
  $artist = $doc->artist->name;
  $year = $doc->released; 

  // Assemble output.
  $output = "<div class=\"spotify-album-information\">\n";
  $output .= "<h3>{$album} - {$artist} ({$year})</h3>\n";


  // Album cover.
  if (_spotify_check_amazon()) {
    $image = NULL;
    if (variable_get('spotifyfield_display_cover', 1)) {
      $image = spotifyfield_get_cover($doc->artist->name, $doc->name, $doc->released);
    }
    if (!is_null($image)) {
      $output .= "<img src=\"{$image['url']}\" width=\"{$image['width']}\" height=\"{$image['height']}\" class=\"spotify-album-cover\" alt=\"{$artist} - {$album} ({$year})\" />";
    }
  }

  $output .= "<ol>\n";

  foreach ($doc->tracks->track as $track) {
    $output .= "<li><a href=\"{$track['href']}\">{$track->name}</a></li>\n";
  }
  $output .= "</ol>\n</div>\n";

  return $output;
}

/**
 * Get album cover.
 */
function spotifyfield_get_cover($artist, $album, $year) {
  // Make sure Amazon module is installed.
  if (!_spotify_check_amazon()) {
    watchdog('spotify', t('In order for Spotify module to display album covers Amazon module must be installed and enabled.'));
    return NULL;
  }

  // Generate cache key.
  $key = md5($artist . $album . $year);
  $best_match = cache_get($key);

  // No cache hit, fetch image.
  if (!$best_match) {
    // Get matches from Amazon.
    $matches = spotifyfield_amazon_search($album);

    // Init variables.
    $highest_sim = 0;
    $best_match = NULL;

    // Loop results.
    foreach ($matches as &$match) {
      // Calculate similarity, result in percent.
      $artist_sim = similar_text($artist, $match['artist'][0]) / strlen($artist) * 100;
      $album_sim = similar_text($album, $match['title']) / strlen($album) * 100;
      $release_sim = similar_text($year, substr($match['releasedate'], 0, 4)) / strlen($year) * 100;
      $total_sim = ($artist_sim + $album_sim + $release_sim) / 300;

      // We have a perfect match.
      if ($total_sim == 1) {
        $best_match = $match;
        break;
      }

      // Check if this is the best match yey.
      if ($total_sim > $highest_sim) {
        $best_match = $match;
        $highest_sim = $total_sim;
      }
    }

    // Make sure we got a match.
    if (is_null($best_match)) {
      return NULL;
    }

    if (isset($best_match['imagesets'])) {
      $size = variable_get('spotifyfield_image_size', 'mediumimage');
      $image = $best_match['imagesets'][$size];
      cache_set($key, $image);
      return $image;
    }
    else {
      return NULL;
    }
  }
  else {
    return $best_match->data;
  }
}

/**
 * Search Amazon.
 */
function spotifyfield_amazon_search($album) {
  $parameters = array(
    'ResponseGroup' => 'ItemAttributes,Images',
    'SearchIndex' => 'Music',
  );
  $parameters['Keywords'] = urlencode($album);

  $items = array();
  $results = amazon_http_request('ItemSearch', $parameters);

  foreach ($results->Items->Item as $xml) {
    $item = amazon_item_clean_xml($xml);
    $items[$item['asin']] = $item;
  }

  return $items;
}

/**
 * Theme function for artist.
 */
function theme_spotify_artist($data) {
  $doc = simplexml_load_string($data['data']);
  $output = "<div class=\"spotify-artist-information\">\n";
  $output .= "<h3>{$doc->name}</h3>\n";
  $output .= "<ul>\n";
  foreach ($doc->albums->album as $album) {
    $output .= "<li><a href=\"{$album['href']}\">{$album->name}";
    $output .=!empty($album->released) ? " ({$album->released})" : '';
    $output .= "</a></li>\n";
  }
  $output .= "</ul>\n</div>\n";
  return $output;
}

/**
 * Theme function for track.
 */
function theme_spotify_track($data) {
  $doc = simplexml_load_string($data['data']);
  $output = "<div class=\"spotify-track-information\">\n";
  $output .= "<h3>{$doc->name}</h3>\n";
  $output .= "<ul>\n";
  foreach ($doc->album as $album) {
    $output .= "<li><a href=\"{$album['href']}\">{$album->name}";
    $output .=!empty($album->released) ? " ({$album->released})" : '';
    $output .= "</a></li>\n";
  }
  $output .= "</ul>\n</div>\n";
  return $output;
}

/**
 * Module settings.
 */
function spotifyfield_settings() {
  $form = array();

  // This settings is only valid if you are using this module with Amazon
  // integration.
  if (_spotify_check_amazon()) {
    $form['spotifyfield_display_cover'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display album cover'),
      '#description' => t('Display album cover when using the extended formatter.'),
      '#default_value' => variable_get('spotifyfield_display_cover', 1),
    );
    $form['spotifyfield_image_size'] = array(
      '#type' => 'select',
      '#title' => t('Cover image size'),
      '#description' => t('Select the size you want covers to be displayed in.'),
      '#default_value' => variable_get('spotifyfield_image_size', array('mediumimage')),
      '#options' => array(
        'smallimage' => t('Small (75x75)'),
        'mediumimage' => t('Medium (160x160)'),
        'largeimage' => t('Large (500x500)'),
      ),
    );
  }
  return system_settings_form($form);
}

/**
 * 
 *
 */
function _spotifyfield_format_value($data) {
  $output = array();
  $output['safe'] = check_plain($data);
  $output['matches'] = array();
  preg_match('/(([^[]+)\[([^]]+))/i', $output['safe'], $output['matches']);
  $output['title'] = $output['matches'][2];
  $output['link'] = $output['matches'][3];
  return $output;
}

/**
 * Checks if the Amazon module exists, is enabled and configured.
 * @return True or False.
 */
function _spotify_check_amazon() {
  if (module_exists('amazon')) {
    $access_key = variable_get('amazon_aws_access_key', '');
    $secret_access_key = variable_get('amazon_aws_secret_access_key', "");
    if ($access_key && $secret_access_key) {
      return TRUE;
    }
  }
  return FALSE;
}

