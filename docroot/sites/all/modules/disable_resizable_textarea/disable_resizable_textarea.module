<?php

/**
 * @file
 * Add ability to override the #resizable of textarea.
 */

/**
 * Implements hook_help().
 */
function disable_resizable_textarea_help($path, $arg) {
  switch ($path) {
    case 'admin/help#disable_resizable_textarea':
      $output = '<p>' . t('This is a simple module that add ability to override the default #resizable property of textarea fields. By default, all textareas are resizable. This module allows you to disable this feature on each field.') . '</p>';
      $output .= '<p>' . t('To use this feature, simply edit the textarea field you want then check the "Disable #resizable property of this field" option. So, this field instance will no longer be resizable in the form.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_element_info_alter().
 */
function disable_resizable_textarea_element_info_alter(&$type) {
  // Add process functions to textareas.
  $type['textarea']['#process'][] = 'disable_resizable_textarea_process_textarea';
}

/**
 * Custom callback process function to disable "grippies" of textareas.
 */
function disable_resizable_textarea_process_textarea($element) {
  // Set #resizable property FALSE when #disable_resizable_textarea is TRUE.
  if (isset($element['#disable_resizable_textarea']) && $element['#disable_resizable_textarea']) {
    $element['#resizable'] = FALSE;
  }

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function disable_resizable_textarea_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Add settings for textarea widgets.
  $fields = array('text_textarea_with_summary', 'text_textarea');
  if (in_array($form['#instance']['widget']['type'], $fields)) {
    $form['instance']['widget']['settings']['disable_resizable_textarea'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable #resizable property of this textarea'),
      '#default_value' => isset($form['#instance']['widget']['settings']['disable_resizable_textarea']) ? $form['#instance']['widget']['settings']['disable_resizable_textarea'] : FALSE,
      '#weight' => -9,
    );
  }
}

/**
 * Implements hook_field_attach_form().
 */
function disable_resizable_textarea_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $fields = field_info_instances($entity_type, $form['#bundle']);
  // Check if any of the fields has a 'disable_resizable_textarea' setting.
  foreach ($fields as $field_name => $value) {
    if (isset($value['widget']['settings']['disable_resizable_textarea'])) {
      $elements[$field_name] = $value;
    }
  }
  if (isset($elements)) {
    _disable_resizable_textarea_children($form, $elements);
  }
}

/**
 * Recursively add the #disable_resizable_textarea property to the elements of a form.
 *
 * @param array $element
 *   The form element to start looking for.
 * @param array $ms_elements
 *   An associative array of api field elements as returned by
 *   field_info_instances() that the #disable_resizable_textarea property
 *   should be set, with the field_name as a key and the field_data
 *   as the value.
 *
 * @todo: This function is currently only working for fieldapi fields.
 */
function _disable_resizable_textarea_children(array &$element, array $ms_elements) {
  $children = element_get_visible_children($element);
  foreach ($children as $child) {
    if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']]['widget']['settings']['disable_resizable_textarea'])) {
      $element[$child]['#disable_resizable_textarea'] = $ms_elements[$element[$child]['#field_name']]['widget']['settings']['disable_resizable_textarea'];
    }

    _disable_resizable_textarea_children($element[$child], $ms_elements);
  }
}
