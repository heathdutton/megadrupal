<?php

/**
 * @file
 * Main file for the Stock module that displays stock data provided by StockAPI
 *
 */

/**
 * Implements hook_help().
 */
function stock_help($path, $arg) {
  switch ($path) {
    case 'admin/config#stock':
      return t('This module provides stock quotes. It either displays a page format or a block format. Users can store their own stock symbols, and have a block that tells them how their portfolio is performing.');
    case 'admin/config/stock':
      return t('This module provides stock quotes. It either displays a page format or a block format. Users can store their own stock symbols, and have a block that tells them how their portfolio is performing.');
  }
}

/**
 * Implements hook_menu().
 * @return array
 */
function stock_menu() {
  $items = array();

  $items['stock'] = array(
    'title' => variable_get('stock_overview_title', 'Stocks'),
    'access arguments' => array('use stock'),
    'page callback' => 'stock_page',
  );

   $items['admin/config/services/stock'] = array(
    'title' => 'Stock settings',
    'description' => 'Configure displayed titles and description.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stock_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Admin settings form
 *
 */
function stock_admin_settings() {
  $form['stock_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => variable_get('stock_description', t('This is the stock quote page.')),
    '#description' => t('This text will be displayed at the top of the stock quote page'),
  );

  $form['stock_block_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Stock block title text'),
    '#default_value' => variable_get('stock_block_title', t('Stocks')),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t('If configured as a block, this text shows as the block title.'),
  );

  $form['stock_overview_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Navigation link text'),
    '#default_value' => variable_get('stock_overview_title', t('Stock quote')),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t('The text in the navigation link which points to the stock quote page.'),
  );

  $form['stock_block_default_symbols'] = array(
    '#type' => 'textfield',
    '#title' => t('Block default symbols'),
    '#default_value' => variable_get('stock_block_default_symbols', 'AAPL GOOG MSFT'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t('Default stock symbols to display in the block when the user has no stocks defined. Separate each stock symbol with a space.'),
  );

  $form['stock_block_items_list'] = array(
    '#type' => 'textfield',
    '#title' => t('Block stock items'),
    '#default_value' => variable_get('stock_block_items_list', 5),
    '#size' => 10,
    '#maxlength' => 3,
    '#description' => t('Total stock quotes to display in a block.'),
  );

  $form['stock_single_user_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Single-user mode'),
    '#default_value' => variable_get('stock_single_user_mode', TRUE),
    '#description' => t("Users are not allowed to select stock symbols. All users share a single block, confgured by the admin."),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 *
 */
function stock_permission() {
  return array(
    'use stock' => array(
      'title' => t('Use Stock'),
      'description' => t('Use the Stock Module'),
    )
  );
}

function stock_link($type, $node = 0, $main = 0) {
  $links = array();

  if ($type == 'page' && user_access('use stock')) {
    $links['stock_page_long'] = array(
      'title' => t("Stock"),
      'href' => "stock",
    );
  }
  return $links;
}

/**
 * Display the stock page
 *
 */
function stock_page() {
  drupal_add_css(drupal_get_path('module', 'stockapi') . '/stockapi.css');
  return stock_contents('page');
}

/**
 * Implements hook_block_info().
 *
 */
function stock_block_info() {
  $title = variable_get('stock_block_title', 'Stocks');
  $blocks = array();
  $blocks['stock_list']['info'] = t($title);
  $blocks['stock_list']['visibility'] = BLOCK_VISIBILITY_NOTLISTED;
  $blocks['stock_list']['pages'] = "stock\r\nstockapi";
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stock_block_view($delta = '') {
  $title = variable_get('stock_block_title', 'Stocks');
  $block = array();
  switch ($delta) {
    case 'stock_list':
      $block['subject'] = t($title);
      if (user_access('use stock')) {
        drupal_add_css(drupal_get_path('module', 'stockapi') . '/stockapi.css');
        $block['content'] = stock_contents('block');
        if (!empty($block['content'])) {
          $block['content'] .= "<div class='more-link'>" . l(t('Read more >>>'), 'stock', array('attributes' => array('title' => t('Read more - Stock Quotes')))) . "</div>";
        }
        else {
          $block['content'] = t('No stock quotes available');
        }
      }
      else {
        $block['content'] = '';
      }

      break;
  }
  return $block;
}

/**
 * Display the form for entering stock symbols to display
 *
 */
function stock_form($symbols) {
  return drupal_get_form('stock_form_definition', $symbols);
}

/**
 * User stock symbols form
 *
 * @global object $user
 * @param array $form
 * @param array $form_state
 * @param string $symbols
 * @return array
 */
function stock_form_definition($form, $form_state, $symbols) {
  global $user;

  $form['symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Stock Symbol(s)'),
    '#default_value' => $symbols,
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t('Enter one or more space separated stock symbols to receive quotes on.'),
  );

  $form['button_quote'] = array(
    '#type' => 'button',
    '#value' => t('Quote'),
  );

  // If user is logged in, then show him a Save button
  if ($user->uid) {
    $form['button_save'] = array(
      '#type' => 'button',
      '#value' => t('Save'),
    );
  }
  return $form;
}

/**
 * Get the saved symbols for the user
 *
 * @global object $user
 * @param boolean $block
 * @return array
 */
function stock_get_user_quotes($block = FALSE) {
  global $user;
  $query = db_select('stock', 's');
  $query->addField('s', 'symbols');
  $query->condition('s.uid', (variable_get('stock_single_user_mode', TRUE)) ? 1 : $user->uid);
  $symbols = $query->execute()->fetchField();

  if (!drupal_strlen($symbols) && !$block) {
    $symbols = variable_get('stock_block_default_symbols', 'AAPL GOOG MSFT');
  }

  if (drupal_strlen($symbols) && $block) {
    $symbol_list = stock_get_symbol_list($symbols);
    shuffle($symbol_list);
    $chunks = array_chunk($symbol_list, variable_get('stock_block_items_list', 5));
    $first_chunk = array_shift($chunks);
    $symbols = implode(' ', $first_chunk);
  }

  return $symbols;
}

/**
 * Save the symbols for the user
 *
 * @global object $user
 * @param string $symbols
 */
function stock_save_user_quotes($symbols) {
  global $user;
  // Delete the user's saved stocks
  db_delete('stock')
  ->condition('uid', $user->uid)
  ->execute();
  // Insert the new ones
  db_insert('stock')
      ->fields(array(
    'uid' => $user->uid,
    'symbols' => $symbols,
  ))
  ->execute();
}

/**
 * Generates the contents of the Stock block or page
 *
 * @param $format
 * The format of the content to be generated. Must be either 'block' or 'page' defaults to 'block'
 */
function stock_contents($format = 'block') {
  global $user;

  switch ($format) {
    case 'block':
      if ( $user->uid ) {
        // get the stored tickers
        $symbols = stock_get_user_quotes(TRUE);

        if (!isset($symbols) || drupal_strlen($symbols) == 0) {
          $symbols = variable_get('stock_block_default_symbols', 'AAPL GOOG MSFT');
        }

        // get the quotes
        $output = stock_do_quote($symbols, 'short', TRUE);
      }
      else {
        $symbols = variable_get('stock_block_default_symbols', 'AAPL GOOG MSFT');
        if (drupal_strlen($symbols) > 0) {
          $output = stock_do_quote($symbols, 'short', TRUE);
        }
        else {
          $output = l('Login', 'user/login') . ' or ' . l('register', 'user/register') . ' for portfolio.';
        }
      }
      break;

    case 'page':
      $op = isset($_POST['op']) ? $_POST['op'] : '';
      $symbols = isset($_POST['symbol']) ? drupal_strtoupper($_POST['symbol']) : '';
      $saved_symbols = '';
      $output = variable_get('stock_description', 'This is the default stock quote page.');

      if ($op == t('Save') && $user->uid) {
        // If the user pressed the Save button, and is logged in, save their preferences
        stock_save_user_quotes($symbols);
        drupal_set_message(t('Your portfolio has been saved.'));
      }
      elseif ($op == t('Quote') && $user->uid) {
        // If the user pressed the Quote button, and is logged in, show his saved portfolio also, if it exists.
        $saved_symbols = stock_get_user_quotes();
      }
      else {
        if (empty($symbols)) {
          // If nothing is entered, then get those saved, if any
          $symbols = stock_get_user_quotes();
        }
      }

      if (!empty($symbols)) {
        $output .= stock_do_quote($symbols, 'long');
      }

      if (!empty($saved_symbols)) {
        $output .= '<p>' . l(t('Your registered portfolio is'), 'stock') . ': ' . $saved_symbols . '</p>';
      }

      $single_user_mode = variable_get('stock_single_user_mode', TRUE);
      if (($single_user_mode && $user->uid == 1) || !$single_user_mode) {
        $output .= drupal_render(stock_form($symbols));
      }
      break;
  }
  return $output;
}

/**
 * Get and format stock quotes for display
 *
 * @param string $format - long or short
 * @param string $symbol_list
 */
function stock_do_quote($symbol_list, $format = 'long', $block = FALSE) {
  $limit = ($block) ? variable_get('stock_block_items_list', 5) : 20;
  $header = stock_get_headers($format);
  $query = db_select('stockapi', 's')->extend('PagerDefault')->extend('TableSort');
  $result = $query->fields('s', array('symbol', 'name', 'last_trade_price_only', 'chg', 'open', 'volume', 'last_trade_date', 'last_trade_time'))
      ->condition('symbol', stock_get_symbol_list($symbol_list), 'IN')
      ->limit($limit)
      ->orderByHeader($header)
      ->execute();

  $rows = array();

  while ($stock = $result->fetchAssoc()) {
    $rows[] = array('data' => stock_process_data($stock, $header));
  }
  $output = theme_table(array('header' => $header, 'rows' => $rows, 'attributes' => array('width' => '100%'), 'sticky' => FALSE, 'caption' => '', 'colgroups' => array(), 'empty' => t('No stock quotes available.')));
  $output .= (!$block) ? theme('pager') : '';

  return $output;
}

/**
 * Get stock headers we want to display depending on the format (short or long)
 * we want to display quotes in.
 *
 * @param string $format - long or short
 * @return array
 */
function stock_get_headers($format = 'long') {
  // keys in these arrays must match the column names in the stockapi table
  $stock_long_array = array(
    'symbol' => array('data' => t('Symbol'), 'field' => 's.symbol', 'class' => array('left')),
    'name' => array('data' => t('Name'), 'field' => 's.name', 'class' => array('left')),
    'last_trade_price_only' => array('data' => t('Last'), 'field' => 's.last_trade_price_only', 'class' => array('right')),
    'chg' => array('data' => t('Change'), 'field' => 's.chg', 'class' => array('right')),
    'open' => array('data' => t('Updated'), 'field' => 's.open', 'class' => array('right')),
    'volume' => array('data' => t('Volume'), 'field' => 's.volume', 'class' => array('right')),
    'last_trade_date' => array('data' => t('Date'), 'field' => 's.last_trade_date', 'class' => array('left')),
    'last_trade_time' => array('data' => t('Time'), 'field' => 's.last_trade_time', 'class' => array('left')),
  );

  $stock_short_array = array(
    'symbol' => array('data' => t('Symbol'), 'field' => 's.symbol', 'class' => array('left')),
    'last_trade_price_only' => array('data' => t('Last'), 'field' => 's.last_trade_price_only', 'class' => array('right')),
    'chg' => array('data' => t('Change'), 'field' => 's.chg', 'class' => array('right')),
  );

  $headers = $stock_long_array;
  if ($format == 'short') {
    $headers = $stock_short_array;
  }
  return $headers;
}

/**
 * Process stock data for display
 *
 * @param array $data
 * @param array $headers
 * @return array
 */
function stock_process_data($data, $header) {
  $columns = array();
  foreach ($header as $key => $value) {
    $field = (isset($data[$key])) ? $data[$key] : '';
    switch ($key) {
      case 'symbol':
        $columns[] = stockapi_format_symbol($field, $data['name']);
        break;
      case 'chg':
        $columns[] = stockapi_format_align(stockapi_format_change(stockapi_format_decimals($field)));
        break;
      case 'last_trade_price_only':
      case 'open':
      case 'highlimit':
      case 'lowlimit':
        $columns[] = stockapi_format_align(stockapi_format_decimals($field));
        break;
      case 'volume':
        $columns[] = stockapi_format_align($field);
        break;
      default:
        $columns[] = $field;
        break;
    }
  }
  return $columns;
}

/**
 * Helper function to convert symbols string to an array
 *
 * @param string $symbols
 * @return array
 */
function stock_get_symbol_list($symbols) {
  return preg_split("/[\s,]+/", $symbols);
}
