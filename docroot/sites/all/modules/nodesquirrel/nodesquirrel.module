<?php

/**
 * @file nodesquirrel.module
 * Adds support for the NodeSquirrel.com service to B&M.
 */
 
 
/**
 * Implementation of hook_menu().
 */
function nodesquirrel_menu() {
  $items = array();
  $items[nodesquirrel_settings_path() . '/nodesquirrel'] = array(
    'title' => 'NodeSquirrel',
    'description' => 'Set up NodeSquirrel backups.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodesquirrel_settings'),
    'access arguments' => array('administer backup and migrate'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_backup_migrate_destination_types().
 *
 * Get the NodeSquirrel Backup and Migrate destination type.
 */
function nodesquirrel_backup_migrate_destination_types() {
  $out = array(
    'nodesquirrel' => array(
      'description' => t('Save the backup files to the NodeSqurrel.com backup service.'),
      'file' => drupal_get_path('module', 'nodesquirrel') .'/destinations.nodesquirrel.inc',
      'class' => 'backup_migrate_destination_nodesquirrel',
      'type_name' => t('NodeSquirrel.com'),
      'can_create' => TRUE,
    ),
  );
  return $out;
}


/**
 * Implementation of hook_backup_migrate_destinations().
 *
 * Get the default NodeSquirrel destination.
 */

function nodesquirrel_backup_migrate_destinations() {
  if ($secret_key = variable_get('nodesquirrel_secret_key', '')) {
    $destination = backup_migrate_create_destination('nodesquirrel', array('destination_id' => 'nodesquirrel'));
    $destination->settings['secret_key'] = $secret_key;
    return array(
      'nodesquirrel' => $destination
    );
  }
}

/**
 * Implementation of hook_backup_migrate_destinations().
 *
 * Get the default NodeSquirrel destination.
 */
function nodesquirrel_backup_migrate_schedules() {
  $schedules = array();
  if (variable_get('nodesquirrel_schedule', 60*60*24) && variable_get('nodesquirrel_secret_key', FALSE) != FALSE) {
    $schedule = array(
      'schedule_id' => 'nodesquirrel',
      'name' => 'NodeSquirrel',
      'source_id' => 'db',
      'destination_id' => 'nodesquirrel',
      'profile_id' => 'default',
      'period' => variable_get('nodesquirrel_schedule', 60*60*24),
      'enabled' => variable_get('nodesquirrel_secret_key', FALSE) != FALSE,
    );
    $schedules['nodesquirrel'] = backup_migrate_crud_create_item('schedule', $schedule);
  }
  return $schedules;
}


/**
 * Implementation of hook_form_backup_migrate_ui_manual_quick_backup_form_alter().
 *
 * Add the convenience link to the quick backup page.
 */
function nodesquirrel_form_backup_migrate_ui_manual_quick_backup_form_alter(&$form, $form_state) {
  if (user_access('administer backup and migrate') && !variable_get('nodesquirrel_secret_key', '')) {
    $form['nodesquirrel'] = array(
      '#type' => 'markup',
      '#value' => '<p>'. t('Don\'t forget to set up your <a href="!url">NodeSquirrel account</a>.', array('!url' => url(nodesquirrel_settings_path() . '/nodesquirrel'))) . '</p>',
    );
  }
}

/**
 * NodeSquirrel settings form.
 */
function nodesquirrel_settings($form_state) {
  _backup_migrate_message_callback('_backup_migrate_message_browser');

  $form = array();

  $key = variable_get('nodesquirrel_secret_key', '');
  $destination = nodesquirrel_check_secret_key($key);


  $form['nodesquirrel_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('NodeSqurrel Status'),
  );
  $form['nodesquirrel_status']['status'] = array(
    '#type' => 'item',
    '#title' => t('NodeSqurrel Status'),
    '#markup' => t('Not Configured'),
  );

  // Warn the user if the key they entered is invalid.
  if ($key && empty($destination)) {
    $form['nodesquirrel_status']['status']['#value'] = t('Your secret key does not seem to be valid. Please check that you entered it correctly or visit !ns to generate a new key.', array('!ns' => nodesquirrel_get_activate_link()));
  }
  else if (!empty($destination)) {
    $form['nodesquirrel_status']['manage'] = array(
      '#type' => 'item',
      '#title' => t('Management Console'),
      '#markup' => nodesquirrel_get_manage_link($destination),
      '#description' => t('You can use the NodeSquirrel management console to add and edit your sites, reset your secret key, download and delete backups, and modify your NodeSquirrel account.'),
    );
    $form['nodesquirrel_status']['status']['#markup'] = t('Ready to Backup');
    if (user_access('perform backup')) {
      $form['nodesquirrel_status']['status']['#markup'] .= ' ' . l('(' . t('backup now') . ')', nodesquirrel_settings_path());
    }
  }

  $form['nodesquirrel_credentials'] = array(
    '#type' => 'fieldset',
    '#title' => t('NodeSqurrel Credentials'),
  );
  $form['nodesquirrel_credentials']['nodesquirrel_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#size' => 80,
    '#default_value' => variable_get('nodesquirrel_secret_key', ''),
  );
  if (empty($destination)) {
    $form['nodesquirrel_credentials']['secret_key_help'] = nodesquirrel_get_activate_help_text();
  }

  $schedule = variable_get('nodesquirrel_schedule', 60*60*24);
  $form['nodesquirrel_schedule'] = array(
    '#type' => 'select',
    '#title' => t('Automatic Backups'),
    '#options' => array(
      ''            => t('- None - '),
      (60*60)       => t('Hourly'),
      (60*60*24)    => t('Daily'),
      (60*60*24*7)  => t('Weekly'),
    ),
    '#default_value' => variable_get('nodesquirrel_schedule', 60*60*24),
    '#description' => t('Set up a schedule to back up to NodeSquirrel. You can customize this schedule in the !schedule. Not seeing your automatic backups? Make sure !cron is set to run at the same frequency or higher.', array('!schedule' => l(t('Schedules tab'), nodesquirrel_settings_path() . '/schedule'), '!cron' => l(t('cron'), 'http://drupal.org/cron'))),
  );

  // If the schedule has been overriden it must be edited in the schedule tab.
  backup_migrate_include('crud');
  $item = backup_migrate_crud_get_item('schedule', 'nodesquirrel');
  if ($item && $item->storage == BACKUP_MIGRATE_STORAGE_OVERRIDEN) {
    $form['nodesquirrel_schedule']['#options'] = array('' => t('- Overriden -'));
    $form['nodesquirrel_schedule']['#disabled'] = TRUE;
    $form['nodesquirrel_schedule']['#description'] = t('Your NodeSquirrel schedule has been overriden and must be edited in the !schedule.', array('!schedule' => l(t('Schedules tab'), nodesquirrel_settings_path() . '/schedule/list/edit/nodesquirrel')));
  }

  return system_settings_form($form);
}

/**
 * Check that a nodesquirel key is valid.
 */
function nodesquirrel_check_secret_key($secret_key) {
  if ($destination = nodesquirrel_get_destination($secret_key)) {
    if ($destination->confirm_destination()) {
      return $destination;
    }
  }
  return FALSE;
}

/**
 * Get the NS destination for the given key.
 */
function nodesquirrel_get_destination($secret_key) {
  if ($secret_key) {
    backup_migrate_include('destinations');
    $destination = backup_migrate_create_destination('nodesquirrel', array('destination_id' => 'nodesquirrel'));
    $destination->settings['secret_key'] = $secret_key;
    return $destination;
  }
  return NULL;
}

/**
 * Get a helper link to activate a site and create a tree.
 */
function nodesquirrel_get_activate_help_text() {
  $activate_link = nodesquirrel_get_activate_link();
  return array(
    '#type' => 'item',
    '#title' => t('Need a Secret Key?'),
    '#markup' => t('Visit !nodesquirrel.', array('!nodesquirrel' => $activate_link)),
    '#descriptoin' => t('Don\'t worry if you don\'t have an account yet. You can create one when you get there.'),
  );
}

/**
 * Get a helper link to activate a site and create a tree.
 */
function nodesquirrel_get_activate_link() {
  $activate_link = l('nodesquirrel.com/activate', variable_get('nodesquirrel_activate_url', 'http://manage.nodesquirrel.com/activate'), array('query' => array('url' => url('', array('absolute' => TRUE)), 'email' => variable_get('site_mail', ''), 'configure' => url($_GET['q'], array('absolute' => TRUE)))));
  return $activate_link;
}

/**
 * Get a helper link to activate a site and create a tree.
 */
function nodesquirrel_get_manage_link($destination) {
  $url = variable_get('nodesquirrel_manage_url', 'http://manage.nodesquirrel.com') . '/backups/' . $destination->_get_destination();
  return l($url, $url);
}

/**
 * Get the path to the nodesquirrel settings tab.
 */
function nodesquirrel_settings_path() {
  // Settings paths are slightly different for version 2 and version 3.
  return 'admin/config/system/backup_migrate';
}