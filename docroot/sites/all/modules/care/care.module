<?php

/**
 * @file
 * Utility functions to call CARE web services.
 */

/**
 * Implements hook_permission().
 */
function care_permission() {
  return array(
    'administer care module' => array(
      'title' => t('Administer CARE module'),
      'description' => t('Configure how this site connects to CARE.'),
      'restrict access' => TRUE));
}

/**
 * Implements hook_menu().
 */
function care_menu() {
  $items['admin/config/services/care'] = array(
    'title' => 'CARE settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'care_settings_form'),
    'file' => 'care_settings_form.inc',
    'access arguments' => array(
      'administer care module'),
    'type' => MENU_NORMAL_ITEM);
  $items['admin/config/services/care/settings'] = array(
    'title' => 'CARE settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'care_settings_form'),
    'file' => 'care_settings_form.inc',
    'access arguments' => array(
      'administer care module'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -1);
  $items['admin/config/services/care/call'] = array(
    'title' => 'Test CARE call',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'care_call_form'),
    'file' => 'care_call_form.inc',
    'access arguments' => array(
      'administer care module'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 90);
  return $items;
}

/**
 * Function to call CARE SOAP client with method name and associative array of data.
 *
 * This function handles and logs errors that occur at the SOAP level. It does not
 * handle or log any error conditions that are returned (without error) in the SOAP
 * call's result data.
 *
 * @param $methodname The
 *          name of the SOAP method to call, e.g. "AddContact"
 * @param $data A
 *          PHP associative array of parameter data, e.g. array('Title' => 'Mr', 'Forenames' => 'Fred')
 * @param $typedata An
 *          optional CARE type and name for the method, if needed, e.g. array('pSelectDataType' =>
 *          'xcdtContactMembershipDetails')
 * @return SimpleXMLElement containg the result, or an object with an ErrorMessage in the case of any failure.
 */
function care_call_method($methodname, $data = array(), $typedata = NULL) {
  // Store client object for later calls.
  static $client = NULL;
  // Don't wait for connection to time out again if it previously failed for this web request.
  static $connection_failed = FALSE;
  $resultxml = new SimpleXMLElement('<xml></xml>');
  if ($connection_failed) {
    watchdog('care', 'Error: skipped CARE call as a previous call failed to connect', array(), WATCHDOG_ERROR);
    $resultxml->ErrorMessage = t('Error: skipped CARE call as a previous call failed to connect');
    return $resultxml;
  }
  // Create a SOAP client object for CARE if not already done.
  if (!$client) {
    $service_address_url = variable_get('care_wsdl_url', 'http://127.0.0.1/careservices/dataaccess.asmx?WSDL');
    $soap_options = array(
      'wsdl_cache' => WSDL_CACHE_BOTH);
    if (variable_get('care_log_results')) {
      $soap_options += array(
        'trace' => TRUE);
    }
    try {
      $client = new SoapClient($service_address_url, $soap_options);
    }
    catch (Exception $e) {
      watchdog('care', 'Error: !message', array(
        '!message' => $e->getMessage()), WATCHDOG_ERROR);
      $connection_failed = TRUE;
      $resultxml->ErrorMessage = 'Failed to connect: ' . $e->getMessage();
      return $resultxml;
    }
  }
  // Create new SimpleXML element.
  $xml = new SimpleXMLElement("<Parameters></Parameters>");
  // Add parameters with values as XML child elements.
  foreach ($data as $parameter => $value) {
    if ($parameter) {
      $value = str_replace('&', '&amp;', $value); // addChild escapes "<" and ">" but not "&".
      $xml->addChild($parameter, $value);
    }
    else {
      watchdog('care', 'Missing parameter name (PHP array key) for parameter for !method call. Data array: !data', array(
        '!method' => $methodname,
        '!data' => print_r($data, TRUE)), WATCHDOG_WARNING);
    }
  }

  // Call the SOAP method.
  try {
    if (is_array($typedata)) {
      // Call typed care method, two arguments.
      $typetype = key($typedata);
      $typename = $typedata[$typetype];
      if (variable_get('care_log_calls')) {
        watchdog('care', '@method (type: @type) call: @params', array(
          '@method' => $methodname,
          '@type' => $typename,
          '@params' => _care_pretty_xml($xml)));
      }
      $result = $client->$methodname(array(
        $typetype => $typename,
        'pXMLParams' => $xml->asXML()));
      // Return the result as a new SimpleXML element.
      $resultname = $methodname . 'Result';
      $resultxml = new SimpleXMLElement($result->$resultname);
      if (variable_get('care_log_results')) {
        watchdog('care', '@method (type: @type) <h2>Headers</h2><pre>@headers</pre><h2>Request</h2><pre>@request</pre><h2>Result</h2><pre>@result</pre>', array(
          '@method' => $methodname,
          '@type' => $typename,
          '@headers' => $client->__getLastRequestHeaders(),
          '@request' => $client->__getLastRequest(),
          '@result' => _care_pretty_xml($resultxml)));
      }
    }
    else {
      // Call simple care method, one argument.
      if (variable_get('care_log_calls')) {
        watchdog('care', '@method call: @params', array(
          '@method' => $methodname,
          '@params' => _care_pretty_xml($xml)));
      }
      $result = $client->$methodname(array(
        'pXMLParams' => $xml->asXML()));
      // Return the result as a new SimpleXML element.
      $resultname = $methodname . 'Result';
      $resultxml = new SimpleXMLElement($result->$resultname);
      if (variable_get('care_log_results')) {
        watchdog('care', '@method result: @result', array(
          '@method' => $methodname,
          '@result' => _care_pretty_xml($resultxml)));
      }
    }
  }
  catch (Exception $e) {
    watchdog('care', 'CARE Error: !message', array(
      '!message' => $e->getMessage()), WATCHDOG_ERROR);
    $resultxml->ErrorMessage = $e->getMessage();
    return $resultxml;
  }

  // Log any CARE error results.
  if (isset($resultxml->ErrorMessage)) {
    watchdog('care', '@method Error: @message', array(
      '@method' => $methodname,
      '@message' => (string)$resultxml->ErrorMessage), WATCHDOG_ERROR);
  }

  return $resultxml;
}

/**
 * Private function to pretty-print XML from a SimpleXML object.
 */
function _care_pretty_xml($xml) {
  if (extension_loaded('dom')) {
    $doc = new DOMDocument('1.0');
    $doc->formatOutput = TRUE;
    $domnode = dom_import_simplexml($xml);
    $domnode = $doc->importNode($domnode, TRUE);
    $domnode = $doc->appendChild($domnode);
    $xml = $doc->saveXML();
    return $xml;
  }
  else {
    return $xml->asXML();
  }
}

/**
 * Utility function to convert ISO 3166-1 alpha-2 codes to CARE country codes.
 */
function care_iso3166_to_country($iso_code) {
  $iso_code = strtoupper($iso_code);
  module_load_include('inc', 'care', 'iso_country_mapping');
  $country_map = _care_country_map();
  if (array_key_exists($iso_code, $country_map) and $country_map[$iso_code]['care_code'] != '') {
    return $country_map[$iso_code]['care_code'];
  }
  else {
    return $iso_code;
  }
}

/**
 * Utility function to convert CARE country codes to ISO 3166-1 alpha-2 codes.
 */
function care_country_to_iso3166($country_code) {
  $country_code = strtoupper($country_code);
  module_load_include('inc', 'care', 'iso_country_mapping');
  $country_map = _care_country_map();
  foreach ($country_map as $iso_code => $data) {
    if ($data['care_code'] == $country_code) {
      return $iso_code;
    }
  }
  return $country_code;
}
