<?php

//Use module_load_include so we can separate our form functions and ensure
//drupal can still find the functions.
module_load_include('inc', 'user_notifications', 'includes/user_notifications.forms');

function user_notifications_form_alter($form, $form_state, $form_id) {
  //dpm($form);
  //dpm($form_state);
  //dpm($form_id);
}

/**
 * @file
 * Creates a Facebook style notifications system which is pluggable into the messaging module.
 *
 * @Inspiration
 * Lots of code inspiration taken from the privatemsg module, thank you!!
 *
 * TODO
 * - Create user settings page so users can turn different notifications off
 */ /**
 * Implements hook_entity_info().
 */
function user_notifications_entity_info() {
  $entities = array(
    'user_notifications' => array(
      'label' => t('User notification'),
      'plural' => t('User notifications'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'UserNotification',
      'metadata controller class' => 'UserNotificationsMetadataController',
      'base table' => 'user_notifications',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'user_notifications_id',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'access callback' => 'user_notifications_access',
      'bundle keys' => array(
        'bundle' => 'name',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full User Notification'),
          'custom settings' => FALSE,
        ),
      ),
      'uri callback' => 'entity_class_uri',
      'token type' => 'user_notifications',
      'module' => 'user_notifications',
      'label callback' => 'entity_class_label',
      'entity cache' => module_exists('entitycache'),
    ),
    'user_notifications_type' => array(
      'label' => t('User Notifications type'),
      'entity class' => 'UserNotificationsType',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'user_notifications_type',
      'fieldable' => FALSE,
      'bundle of' => 'user_notifications',
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'name',
        'label' => 'label',
      ),
      'access callback' => 'user_notifications_type_access',
      'module' => 'user_notifications',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/user-notifications/user-notifications-types',
        'file' => 'user_notifications_type.admin.inc',
        'file path' => drupal_get_path('module', 'user_notifications') . '/includes',
        'controller class' => 'UserNotificationsTypeUIController',
      ),
      'entity cache' => module_exists('entitycache'),
    ),
    'user_notifications_state' => array(
      'label' => t('User Notifications State'),
      'plural label' => t('User Notifications States'),
      'controller class' => 'UserNotificationsStateController',
      'entity class' => 'UserNotificationsState',
      'base table' => 'user_notifications_state',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'user_notifications_state_id',
        'label' => 'label',
        'name' => 'name',
      ),
      'bundles' => array(
        'user_notifications_state' => array(
          'label' => 'User Notifications States',
        ),
      ),
      'admin ui' => array(
        'path' => 'admin/structure/user-notifications/user-notifications-states',
        'file' => 'user_notifications.forms.inc',
        'file path' => drupal_get_path('module', 'user_notifications') . '/includes',
        'controller class' => 'UserNotificationsStatesUIController',
      ),
      'token type' => 'user_notifications_state',
      'module' => 'user_notifications',
      'access callback' => 'user_notifications_state_access',
      'exportable' => TRUE,
      'entity cache' => module_exists('entitycache'),
    ),
  );

  return $entities;
}

/**
 * Implements hook_entity_info_alter().
 */
function user_notifications_entity_info_alter(&$entity_info) {
  // @todo: we're testing to ensure the schema exists; needed because running gui
  // install profile was hitting this BEFORE the schema was installed.
  if (drupal_get_schema('user_notifications')) {
    // We are adding the info about the user notification types via a hook to avoid a
    // recursion issue as loading the model types requires the entity info as well.
    foreach (user_notifications_get_types() as $type => $info) {
      $entity_info['user_notifications']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
          'path' => 'admin/structure/user-notifications/user-notifications-types/manage/%user_notifications_type',
          'real path' => 'admin/structure/user-notifications/user-notifications-types/manage/' . $type,
          'bundle argument' => 5,
          'access arguments' => array('administer user notifications types'),
        ),
      );
    }
  }
}

/**
 * Return the default state for all UserNotification entities
 */
function user_notifications_get_default_state() {
  $states = user_notifications_states(array('default_state' => 1));
  return !empty($states) ? reset($states) : NULL;
}

/**
 * Return all registration field instances.
 *
 * @return array
 *   A list of field instances
 */
function user_notifications_get_user_notifications_instances($params = array()) {
  $user_notification_fields = field_read_fields(array('type' => 'user_notifications'));

  $user_notification_instances = array();
  if (!empty($user_notification_fields )) {
    $field_name = array(
      'field_name' => array_keys($user_notification_fields )
    );
    $params = array_merge($field_name, $params);
    $user_notification_instances = field_read_instances($params);
  }

  return $user_notification_instances ;
}

/**
 * Implements hook_permission().
 */
function user_notifications_permission() {
  return array(
    'view own user notifications' => array(
      'title' => t('See own notifications'),
      'description' => t('Allow a user to see their own notifications'),
    ),
    'administer own user notifications' => array(
      'title' => t('Administer own notifications'),
      'description' => t('Allow a user to administer their own notifications'),
    ),
    'create user notifications' => array(
      'title' => t('Create user notifications'),
      'description' => t('Allow a user to create user notifications'),
      'restrict access' => TRUE,
    ),
    'administer user notifications' => array(
      'title' => t('Administer user notifications'),
      'description' => t('Allow a user to administer notifications'),
      'restrict access' => TRUE,
      'warning' => t('Give to trusted users only.'),
    ),
    'administer user notifications types' => array(
      'title' => t('Administer user notifications types'),
      'description' => t('Allow a user to administer notification types'),
      'restrict access' => TRUE,
      'warning' => t('Give to trusted users only.'),
    ),
    'administer user notifications states' => array(
      'title' => t('Administer user notification states'),
      'description' => t('Manage user notification states, fields, and display settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback for viewing a notification.
 *
 * Check if user has access to view a notification.
 *
 * @param string $entity_type
 *   The host entity type.
 * @param object $entity
 *   The host entity.
 *
 * @return bool
 *   Whether a user can create a new registration for a host entity.
 *
 * @see registration_register_page()
 * @see registration_menu()
 */
function user_notifications_notification_access($user_notification, $perm) {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }

  if (user_access($perm)) {
    if ($user_notification->wrapper->user_notifications_recipient_uid->uid->value() == $user->uid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function user_notifications_menu() {

  $items['admin/structure/user-notifications'] = array(
    'title' => 'User Notifications Settings',
    'description' => 'Administer User Notification items, such as types, states, etc.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer user notifications'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/structure/user-notifications/settings'] = array(
    'title' => 'User Notifications Administration',
    'description' => "Admininister the User Notifications module.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_notifications_settings'),
    'access arguments' => array('administer user notifications'),
    'file' => 'includes/user_notifications.admin.inc',
  );
  $items['user-notifications/add'] = array(
    'title' => 'Add User Notifications',
    'page callback' => 'user_notifications_add_page',
    'file' => 'includes/user_notifications.pages.inc',
    'access arguments' => array('create user notifications')
  );
  $items['user-notifications/%user_notifications'] = array(
    'title' => 'View',
    'page callback' => 'user_notifications_view',
    'page arguments' => array(1),
    'access callback' => 'user_notifications_notification_access',
    'access arguments' => array(1, 'view own user notifications'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user-notifications/%user_notifications/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_notifications', 1),
    'access arguments' => array('administer user notifications'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user-notifications/%user_notifications/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_notifications_delete_confirm', 1),
    'access arguments' => array('administer user notifications'),
    'type' => MENU_CALLBACK,
  );

  foreach (user_notifications_get_types() as $type => $user_notifications_type) {
    $items['user-notifications/add/' . strtr($type, array('_' => '-'))] = array(
      'title' => 'Create !name',
      'title arguments' => array('!name' => $user_notifications_type->label),
      'description' => 'TODO',
      'page callback' => 'user_notifications_notify_form_wrapper',
      'page arguments' => array(user_notifications_new($type)),
      'access arguments' => array('create user notifications'),
      'file' => 'includes/user_notifications.forms.inc',
    );
  }

  if (module_exists('devel')) {
    $items['user-notifications/%user-notifications/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('node', 1),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file path' => drupal_get_path('module', 'devel'),
      'file' => 'devel.pages.inc',
      'weight' => 100,
    );
    $items['user-notifications/%user-notifications/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function user_notifications_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/content') {
    $item = menu_get_item('user-notifications/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function user_notifications_theme() {
  return array(
    'user_notifications_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'theme/user_notifications.theme.inc'
    ),
    'user_notifications_unread_count_link' => array(
      'variables' => array('link_text' => FALSE),
      'file' => 'theme/user_notifications.theme.inc'
    ),
    'user_notifications_date_header' => array(
      'variables' => array('date' => FALSE, 'format' => 'D, M d, Y'),
      'file' => 'theme/user_notifications.theme.inc'
    ),
    'user_notifications_notification_block' => array(
      'variables' => array('account' => FALSE),
      'file' => 'theme/user_notifications.theme.inc'
    ),
    'user_notifications_state_overview_form' => array(
      'file' => 'includes/user_notifications.forms.inc',
      'render element' => 'form',
    ),
  );
}

/**
 * Configure the user notification types defined by enabled modules.
 */
function user_notifications_configure_notification_types() {
  foreach (user_notifications_get_types() as $type => $notification_type) {
    user_notifications_configure_notification_type($notification_type);
  }
}

/**
 * Ensures a recipient uid field is present on a notification type bundle.
 */
function user_notifications_configure_notification_type($bundle, $weight = 0) {
  module_load_include('inc', 'user_notifications', 'includes/user_notifications.fields');
  user_notifications_create_target_id_field_instance('user_notifications', $bundle, 'Notification Recipient', $weight = 0);
}

/**
 * Implements hook_block_info().
 *
 * Provides 2 blocks showing link & unread notifications count
 * for logged in user.
 *
 * @TODO: Add small list view block
 */
function user_notifications_block_info() {
  $blocks = array();

  $blocks['user_notifications_link'] = array(
    'info' => t('User Notifications Link')
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function user_notifications_block_configure($delta) {
  $form = array();
  if ($delta == 'user_notifications_link') {
    $form['user_notifications_link'] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings'),
    );
    $form['user_notifications_link']['display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide empty'),
      '#description' => t('Hide the block if there are no new notifications'),
      '#default_value' => variable_get('user_notifications_block_hide_link', 0),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function user_notifications_block_save($delta = '', $edit = array()) {
  if ($delta == 'user_notifications_link') {
    variable_set('user_notifications_block_hide_link', $edit['display']);
  }
}

/**
 * Implements hook_block_view().
 */
function user_notifications_block_view($delta = '') {
  switch ($delta) {
    case 'user_notifications_link':
      if ($output = theme('user_notifications_unread_count_link')) {
        $block = array(
          'subject' => '',
          'content' => $output,
        );
      }
      break;
  }
  if (isset($block)) return $block;
}

/**
 * Implements hook_user_categories().
 */
function user_notifications_user_categories() {
  $data = array();

  $data[] = array(
    'name' => 'user_notifications',
    'title' => t('Notifications'),
    'weight' => 100,
    'access callback' => 'user_access',
    'access arguments' => array('administer own user notifications'),
  );

  return $data;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add user notification settings to the user profile form.
 */
function user_notifications_form_user_profile_form_alter($form, &$form_state) {
  if (user_access('administer own user notifications')) {
    $form['user_notifications'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notifications')
    );
    foreach (user_notifications_get_types() as $key => $info) {
      $form['user_notifications'][$key]['title'] = array(
        '#type' => 'markup',
        '#value' => $info->label,
      );
    }
  }
  return $form;
}

/**
 * Implements hook_cron().
 *
 * If the flush feature is enabled, delete stale notifications
 */
function user_notifications_cron() {
  if (variable_get('user_notifications_flush_enabled', FALSE)) {

		//get notifications older than $days
		$days = variable_get('user_notifications_flush_days', '30');
		$time = time() - $days * 86400;
    /**
     * TODO: UPDATE WITH NEW STRUCTURE
    $query = db_select('user_notifications_index', 'ni');
    $query->innerJoin('user_notifications_messages', 'nm', 'ni.nid = nm.nid');
    $query
      ->fields('ni', array('nid'))
      ->condition('ni.is_new', 0)
      ->condition('nm.timestamp', $time, '<');
    $results = $query->execute->fetchAll();

    $flushed = 0;
    foreach($results as $row) {
      if ($flushed < variable_get('user_notifications_flush_max', 200)) {
        //pass to API
        $message = user_notifications_notification_load($row->nid);
        module_invoke_all('user_notifications_notification_flush', $message);

        // Delete notifications
        db_delete('user_notifications_index')
          ->condition('mid', $row->nid)
          ->execute();
        db_delete('user_notifications_message')
          ->condition('mid', $row->nid)
          ->execute();
        $flushed++;
      }
    }
    watchdog('user_notifications', 'Flushed @num user notifications',
      array('@num' => $flushed), WATCHDOG_INFO);
  **/
  }
}

/**
 * checks if account should be notified
 */
function user_notifications_should_notify($type, $key, $account) {
  return $account->user_notifications[$type][$key];
}

/**
 * Returns an initialized user notification object.
 *
 * @param $type
 *   The machine-readable type of the notification.
 *
 * @return
 *   A user notification object with all default fields initialized.
 */
function user_notifications_new($type = '') {
  return entity_get_controller('user_notifications')->create(array('type' => $type));
}

/**
 * Display a user notification.
 *
 * @param object $user_notification
 *   A fully loaded user notification object.
 *
 * @return array
 *   Renderable elements.
 */
function user_notifications_view(UserNotification $user_notification, $view_mode = 'full') {
  return $user_notification->view($view_mode);
}

/**
 * Loads a user notification by ID.
 */
function user_notifications_load($user_notification_id) {
  if (empty($user_notification_id)) {
    return FALSE;
  }

  $user_notifications = user_notifications_load_multiple(array($user_notification_id), array());
  return $user_notifications ? reset($user_notifications) : FALSE;
}

/**
 * Loads multiple user notifications by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $user_notifications_ids
 * @param $conditions
 *   An array of conditions on the {user_notifications} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal user notification loading cache.
 *
 * @return
 *   An array of user notification objects indexed by user_notification_id.
 */
function user_notifications_load_multiple($user_notifications_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($user_notifications_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('user_notifications', $user_notifications_ids, $conditions, $reset);
}

/**
 * Deletes multiple user notifications by ID.
 *
 * @param $user_notifications_ids
 *   An array of user notification IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function user_notifications_delete_multiple($user_notifications_ids) {
  return entity_get_controller('user_notifications')->delete($user_notifications_ids);
}

/**
 * Saves a user notification
 *
 * @param $user_notification
 *   The full user notification object to save.
 *
 * @return
 *   If the record insert or update failed, returns FALSE. If it succeeded,
 *   returns SAVED_NEW or SAVED_UPDATED, depending on the operation performed.
 */
function user_notifications_save(UserNotification $user_notification) {
  return $user_notification->save();
}

/**
 * Returns all notification sending methods provided by the Messaging module.
 *
 * @return
 *  Array of messaging methods keyed by the messaging type and the value being
 *  the title of the messaging method. Returns an empty array if the messaging
 *  module does not exist (is not installed and enabled).
 *
 * @see messaging_method_list()
 */
function user_notifications_get_send_methods($account = NULL) {
  $method = array();
  if (module_exists('messaging')) {
    $messaging_methods = messaging_method_list($account);
    foreach ($messaging_methods as $name => $title) {
      //TODO: default doesn't seem to be declared?
      if ($default != $name) {
        $method[$name] = $title;
      }
    }
  }
  return $method;
}

/**
 * TODO: Looks like this hook is gone...
 */
function user_notifications_messaging_methods_alter(&$info) {
  $info['appbar']['destination'] = 'uid';
}

/**
 * Get the ids of a user's unseen notifications.
 *
 * @param $state
 *  Array of states to limit results to. All states will be return if an empty
 *  array is passed.
 *
 * @param $user
 *  User to load notifications for. If omitted, defaults to the global user.
 *
 * @return
 *  Array of entity ids keyed by the entity type, user_notifications.
 */
function user_notifications_get_user_notification_ids($states = array(), $user = NULL, $page = 0, $limit = 0) {
  global $user;

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'user_notifications')
    ->fieldCondition('user_notifications_recipient_uid', 'target_id', $user->uid);
  if (!empty($states)) {
    $query->propertyCondition('state', $states, 'IN');
  }
  if ($limit) {
    $min = $limit * $page;
    $max = $limit * $page + $limit - 1;
    $query->range($min, $max);
  }
  return $query->execute();
}

/**
 * Return number of unseen notifications for an account.
 *
 * @param $account
 *   Specifiy the user for which the unread count should be loaded.
 * @param $reset
 *   Reset the static $counts variable.
 *
 * @see user_notification_get_user_notification_ids().
 */
function user_notifications_unread_count($account = NULL, $reset = FALSE) {
  $results = user_notifications_get_user_notification_ids(array('unseen'));

  if (isset($results['user_notifications'])) {
    return count($results['user_notifications']);
  } else {
    return 0;
  }
}

/**
 * Menu title callback
 *
 * @param $account
 *  Account of the user object used to generate the title.
 *
 * @return
 *  String text indicating number of notifications are available for the
 *  account.
 */
function user_notifications_page_title() {
  global $user;
  $count = user_notifications_unread_count($user);

  if ($count > 0) {
    return format_plural($count, 'Notifications (1 new)', 'Notifications (@count new)');
  }

  return t('Notifications');
}

/**
 * Marks passed notifications as read
 *
 * @param $notification
 *   array notifications to mark as read
 */
function user_notifications_markasread($notifications) {
  /**
   * TODO: NEED TO UPDATE
  if (!is_array($notifications)) {
    $notifications[$notifications->nid] = $notifications;
  }
  if (!empty($notifications)) {
    foreach ($notifications as $notification) {
      db_update('user_notifications_index')
        ->fields(array('is_new' => 0))
        ->condition('nid', $notification->nid)
        ->execute();
    }
		module_invoke_all('user_notifications_notifications_markasread', $notifications);
  }
  **/
}

/**
 * Build a select query for displaying notifications
 *
 * @param $account
 *   The user account object
 * @param $page
 *   If TRUE it's a page display, else block/list display
 * @param $use_pager
 *   If TRUE will output pager_query
 * @param $limit
 *   If $use_pager is TRUE it will be the amount of items per page
 *   If $use_pager is FALSE will invoke a db_query_range for the $limit amount
 */
function user_notifications_display_query($account, $page = TRUE, $use_pager = TRUE, $limit = '') {
  /**
   * TODO: NEED TO UPDATE
  //default query
  $query = db_select('user_notifications_index', 'uni');

	if ($use_pager) {
    $limit = empty($limit) ? 20 : $limit;
    $query = $query->extend('PagerDefault')->limit($limit);
	}

  $query->join('user_notifications_messages', 'unm', 'unm.nid=uni.nid');
  $query
    ->fields('uni', array('nid', 'recipient', 'is_new'))
    ->fields('unm', array('body', 'subject', 'format', 'tag', 'timestamp'))
    ->condition('uni.recipient', $account->uid)
    ->orderBy('unm.timestamp', 'DESC');

	//allow query & params to be altered - any more alterations need should user custom menu
	//callback in hook_menu_alter
	drupal_alter('user_notifications_display_query', $query, $account, $page);

	if (!$use_pager && !empty($query['limit'])) {
    $query->range(0, $limit);
	}

  return $query->execute()->fetchAll();
  **/
  return array();
}

/**
 * Implements hook_views_api().
 */
function user_notifications_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'user_notifications') . '/views',
  );
}

/**
 * Implements hook_views_pre_render().
 *
 * If we are rendering user notifications in the default user notification view
 * accessible by users to see their notifications, we should update the
 * notification state.
 */
function user_notifications_views_pre_render(&$view) {
  if ($view->name == 'user_notifications') {
    foreach($view->result as $key => $user_notification_id) {
      $user_notification = entity_load_single('user_notifications', $user_notification_id->user_notifications_id);
      if ($user_notification->is_default_state()) {
        $user_notification->update_state('seen');
      }
    }
  }
}

/************************************** TYPES *********************************/

/**
 * Wrapper function for user access to get notification type access.
 */
function user_notifications_type_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  return user_access('administer user notification types', $account);
}

/**
 * Returns an initialized user notification state object.
 *
 * @param $type
 *   The machine-readable type of the notification state.
 *
 * @return
 *   A user notification object with all default fields initialized.
 */
function user_notifications_state_new($type = '') {
  return entity_get_controller('user_notifications_state')->create(array('type' => $type));
}

/**
 * Menu argument loader; Load a user notifications type by string.
 *
 * @param $type
 *   The machine-readable name of a user notification type to load.
 *
 * @return
 *   A registration type array or FALSE if $type does not exist.
 */
function user_notifications_type_load($type) {
  return user_notifications_get_types($type);
}

/**
 * Gets an array of all user notification types, keyed by the name.
 *
 * @param $name
 *   If set, the type with the given name is returned.
 */
function user_notifications_get_types($name = NULL) {
  $types = entity_load_multiple_by_name('user_notifications_type', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Gets an array of all user notification types, keyed by the name.
 *
 * @return array
 *   A list of all user notification types.
 */
function user_notifications_type_get_names($name = NULL) {
  $types = user_notifications_get_types();
  $data = array();
  foreach (array_keys($types) as $name) {
    $data[$name] = $name;
  }
  return $data;
}

/**
 * Saves a model type to the db.
 */
function user_notifications_type_save(UserNotificationsType $type) {
  $type->save();
}

/**
 * Deletes a model type from the db.
 */
function user_notifications_type_delete(UserNotificationsType $type) {
  $type->delete();
}

/************************************* STATES *********************************/

/**
 * Wrapper function for user access to get notification state access.
 */
function user_notifications_state_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  return user_access('administer user notifications states', $account);
}

/**
 * Return all user notification state entities.
 *
 * @param bool $active
 * @param bool $show_on_form
 *
 * @return array
 *   An array of user notification state entities.
 */
function user_notifications_states($conditions = array()) {
  $states = &drupal_static(__FUNCTION__ . serialize($conditions), array());
  if (!empty($states)) {
    return $states;
  }

  $entity_type = 'user_notifications_state';
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity_type)
    ->propertyOrderBy('weight', 'ASC');

  foreach ($conditions as $col => $val) {
    $query->propertyCondition($col, $val);
  }

  if ($results = $query->execute()) {
    $states = entity_load($entity_type, array_keys($results[$entity_type]));
  }

  return $states;

}

/**
 * Get an array of states structured as options for a form select elements
 *
 * @param array $conditions
 *
 * @return array
 */
function user_notifications_get_states_options($conditions = array()) {
  $options = array();

  // Rules likes to pass an object as the first param in an option list callback. Get rid of it.
  if (!is_array($conditions)) {
    $conditions = array();
  }

  $states = user_notifications_states($conditions);

  foreach ($states as $state) {
    $options[$state->identifier()] = t('@state', array('@state' => entity_label('user_notifications_state', $state)));
  }

  return $options;
}

/**
 * Gets an array of all user notification states, keyed by the name.
 *
 * @param $name
 *   If set, the type with the given name is returned.
 */
function user_notifications_get_states($name = NULL) {
  $types = entity_load_multiple_by_name('user_notifications_state', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Deletes a user notification state.
 */
function user_notifications_state_delete(UserNotificationsType $type) {
  $type->delete();
}
