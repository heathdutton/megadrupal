<?php

/**
 * @file
 * Install file for user_notifications module.
 */

/**
 * Implements hook_schema().
 */
function user_notifications_schema() {
  $schema['user_notifications'] = array(
    'description' => 'The base table for user notification module.',
    'fields' => array(
      'user_notifications_id' => array(
        'description' => 'The primary identifier for a user notification.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {user_notifications_type}.type of this user notification.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'author_uid' => array(
        'description' => 'The uid of the user who created this user notification.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'state' => array(
        'description' => 'The {user_notifications_state}.name of this user notification.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the user notification was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the user notification was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'user_notifications_type' => array(array('type', 4)),
      'user_notifications_state' => array('state'),
    ),
    'foreign keys' => array(
      'user_notifications_author' => array(
        'table' => 'users',
        'columns' => array('author_uid' => 'uid'),
      ),
      'user_notifications_user' => array(
        'table' => 'users',
        'columns' => array('user_uid' => 'uid'),
      ),
      'user_notifications_state' => array(
        'table' => 'user_notifications_state',
        'columns' => array('state' => 'name'),
      ),
    ),
    'primary key' => array('user_notifications_id'),
  );

  $schema['user_notifications_type'] = array(
    'description' => 'Stores information about all defined user notifications types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique user notifications type ID.',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this user notifications type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this user notifications type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this user notifications type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this entity_test type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['user_notifications_state'] = array(
    'description' => 'Stores user notifications states configuration.',
    'fields' => array(
      'user_notifications_state_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The user notifications state ID.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => 'The machine name of the user notifications state.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => 'The human readable name of the user notifications state.',
      ),
      'description' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'The description of the user notifications state.',
      ),
      'default_state' => array(
        'description' => 'A boolean indicating default user notifications state.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'active' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'A flag showing active user notifications states.',
      ),
      'show_on_form' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'A flag showing if this user notifications state should be shown on the form.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this user notifications state in the UI',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'user_notifications_state_name' => array('name'),
      'user_notifications_state_default_state' => array('default_state'),
    ),
    'primary key' => array('user_notifications_state_id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  // Create cache bins for Entity-cache module.
  $cache_schema = drupal_get_schema_unprocessed('system', 'cache');
  $types = array(
    'user_notifications',
    'user_notifications_type',
    'user_notifications_state',
  );

  foreach ($types as $type) {
    $schema["cache_entity_$type"] = $cache_schema;
    $schema["cache_entity_$type"]['description'] = "Cache table used to store $type entity records.";
  }

  return $schema;
}

/**
 * Implements hook_install().
 */
function user_notifications_install() {
  // Create default states.
  $states = array(
    'unseen' => array(
      'label' => 'Unseen',
      'description' => 'User notification has not been seen',
      'default_state' => 1,
      'active' => 1,
      'show_on_form' => 1,
      'weight' => 1,
    ),
    'seen' => array(
      'label' => 'Seen',
      'description' => 'User notification has been seen.',
      'default_state' => 0,
      'active' => 1,
      'show_on_form' => 1,
      'weight' => 1,
    ),
  );

  foreach ($states as $state_name => $state_label) {
    $user_notification_state = entity_create('user_notifications_state',
      array(
        'name' => $state_name,
        'label' => $state_label['label'],
        'description' => $state_label['description'],
        'default_state' => $state_label['default_state'],
        'active' => $state_label['active'],
        'show_on_form' => $state_label['show_on_form'],
        'weight' => $state_label['weight'],
      )
    );
    $user_notification_state->save();
  }

  $type = array(
    'name' =>  'basic_notification',
    'label' => 'Basic Notification',
    'locked' => FALSE,
  );

  $user_notification_type = entity_create('user_notifications_type', $type);
  $user_notification_type->save();

  module_load_include('inc', 'user_notifications', 'includes/user_notifications.fields');
  user_notifications_create_message_field_base();
  user_notifications_field_default_field_instances();
}

/**
 * Implements hook_uninstall().
 */
function user_notifications_uninstall() {
  variable_del('user_notifications_flush_enabled');
  variable_del('user_notifications_flush_days');
  variable_del('user_notifications_flush_max');
  variable_del('user_notifications_block_hide_link');
  // Remove default states.
  $default_states = array(
    'seen', 'unseen'
  );
  db_delete('user_notifications_state')
    ->condition('name', $default_states, 'IN')
    ->execute();

  // Remove default types.
  $default_type = array(
    'basic_notification'
  );
  db_delete('user_notifications_type')
    ->condition('name', $default_type, 'IN')
    ->execute();
}

//TODO: Need an update path for D6 to D7, including:
//1. Changing the column structure for formats to plain text allowing null
