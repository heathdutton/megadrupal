<?php

/**
 * @file
 *  Module file for user_notifications_services.
 *
 *  Module provides integration with services module to enable endpoints related
 *  to user notifications, including getting notifications and acknowledging
 *  notifications.
 */

/**
 * Implements hook_services_resources().
 */
function user_notifications_services_services_resources() {
  $un_resource = array(
    'user-notifications' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => t('Get a user notification entity by ID'),
          'file' => array('type' => 'inc', 'module' => 'user_notifications_services', 'name' => 'resources/user_notifications_services.resource'),
          'callback' => '_user_notifications_services_resource_retrieve',
          'args' => array(
            array(
              'name' => 'unid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The id of the user notification to get',
            ),
          ),
          'access callback' => '_user_notifications_services_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'index' => array(
          'help' => t('Get all user notifications for a user'),
          'file' => array('type' => 'inc', 'module' => 'user_notifications_services', 'name' => 'resources/user_notifications_services.resource'),
          'callback' => '_user_notifications_services_resource_index',
          'args' => array(
            array(
              'name' => 'state',
              'optional' => TRUE,
              'type' => 'string',
              'description' => 'The user notification state to limit results to. Must be an array.',
              'default value' => array(),
              'source' => array('param' => 'state'),
            ),
            array(
              'name' => 'page',
              'optional' => TRUE,
              'type' => 'int',
              'description' => 'The zero-based index of the page to get, defaults to 0.',
              'default value' => 0,
              'source' => array('param' => 'page'),
            ),
            array(
              'name' => 'limit',
              'optional' => TRUE,
              'type' => 'int',
              'description' => 'Number of records to get per page.',
              'default value' => variable_get('services_node_index_page_size', 20),
              'source' => array('param' => 'pagesize'),
            ),
          ),
          'access callback' => '_user_notifications_services_access',
          'access arguments' => array('index'),
        ),
      ),
      'targeted_actions' => array(
        'update-state' => array(
          'help' => 'Update the state of a user notification.',
          'file' => array('type' => 'inc', 'module' => 'user_notifications_services', 'name' => 'resources/user_notifications_services.resource'),
          'callback' => '_user_notifications_services_resource_update_state',
          'access callback' => '_user_notifications_services_access',
          'access arguments' => array('update_state'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'unid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The id of the user notification to get',
            ),
            array(
              'name' => 'state',
              'optional' => TRUE,
              'source' => array('data' => 'state'),
              'description' => 'The state machine_name to update the user notification to',
              'type' => 'string',
            ),
          ),
        ),
      ),
    ),
  );
  return $un_resource;
}

/**
 * Access callback to determine access to resources.
 */
function _user_notifications_services_access($op = 'view', $args = array()) {
  if(!empty($args)) {
    $unid = $args[0];
  }

  switch ($op) {
  case 'view':
  case 'update_state':
    $notification = user_notifications_load($unid);
    if (!$notification) services_error(t('Could not find user notification'), 404);
    $result = user_notifications_notification_access($notification, 'view own user notifications');
    break;
  case 'index':
    $result = user_access('view own user notifications');
  }

  return $result;

}
