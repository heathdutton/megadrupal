<?php


/**
 * @file
 * Implements general reporting functions for commerce_marketplace.
 * @todo Implement commerce_marketplace_paypal
 * @todo Fork commerce_ups and make it work with commerce_marketplace
 * @todo Implement hook_node_access for products in commerce_store_access module.
 *       Allow store members with sufficient permissions to edit products created by other members.
 * @todo Fork commerce_funds and make it work with commerce_marketplace? (commerce_marketplace_funds)
 * @todo Test the module.
 * @todo Write Documentation and comment the code.
 *
 * Add Per-Store confirmation links to each marketplace order, allow buyers to
 * confirm receiving the product(s) before their payment is released to the seller.
 */

/**
 * Implements hook_permission().
 */
function commerce_marketplace_permission() {
  return array(
    'view own stores' => array(
      'title' => 'View own stores',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_marketplace_menu() {
  $items['commerce_store/store/%commerce_store/sales'] = array(
    'title' => 'Sales',
    'page callback' => 'commerce_marketplace_sales',
    'page arguments' => array(2),
    'access callback' => 'commerce_store_access_user_access',
    'access arguments' => array('view store orders', 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['commerce_store/store/%commerce_store/sales/%commerce_order'] = array(
    'title callback' => 'commerce_marketplace_order_title',
    'title arguments' => array(4),
    'page callback' => 'commerce_marketplace_view_order',
    'page arguments' => array(4),
    'access callback' => 'commerce_marketplace_order_access',
    'access arguments' => array(2, 4, 'view store orders'),
  );
  $items['commerce_store/store/%commerce_store/sales/%commerce_order/edit'] = array(
    'title callback' => 'commerce_marketplace_order_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_order_form', 4),
    'access callback' => 'commerce_marketplace_order_access',
    'access arguments' => array(2, 4, 'edit store orders'),
    'file' => '/includes/commerce_order.forms.inc',
    'file path' => drupal_get_path('module', 'commerce_order'),
  );
  $items['commerce_store/store/%commerce_store/products'] = array(
    'title callback' => 'commerce_marketplace_store_products_page_title',
    'title arguments' => array(2),
    'page callback' => 'commerce_marketplace_store_products',
    'page arguments' => array(2),
    'access callback' => 'commerce_store_access_user_access',
    'access arguments' => array('view store page', 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['user/%user/stores'] = array(
    'title' => 'Stores',
    'page callback' => 'commerce_marketplace_user_stores',
    'page arguments' => array(1),
    'access callback' => 'commerce_marketplace_user_stores_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/orders/%commerce_order/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_order_form', 3),
    'access callback' => TRUE,
    'file' => '/includes/commerce_order.forms.inc',
    'file path' => drupal_get_path('module', 'commerce_order'),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Title callback for order view page.
 */
function commerce_marketplace_order_title($order) {
  return t('Order @id', array('@id' => $order->order_id));
}

/**
 * Title callback for store products page.
 */
function commerce_marketplace_store_products_page_title($store) {
  return t("@store's products", array('@store' => $store->title));
}

/**
 * Access callback for viewing the store orders.
 */
function commerce_marketplace_order_access($store, $order, $permission) {
  $cmp_store = field_get_items('commerce_order', $order, 'cmp_o_store');
  if (!$cmp_store) {
    return FALSE;
  }
  return $cmp_store[0]['target_id'] == $store->id && commerce_store_access_user_access($permission, $store);
}

/**
 * Access callback for viewing list of own stores.
 */
function commerce_marketplace_user_stores_access($account) {
  global $user;
  return user_access('view own stores', $account) && $account->uid === $user->uid;
}

/**
 * Page callback for showing own stores list.
 */
function commerce_marketplace_user_stores($user) {
  return commerce_embed_view('my_stores', 'default', array($user->uid));
}

/**
 * Page callback for showing store products list.
 */
function commerce_marketplace_store_products($store) {
  return commerce_embed_view('store_products', 'default', array($store->id));
}

/**
 * Page callback for showing store's orders.
 */
function commerce_marketplace_sales($store) {
  return commerce_embed_view('store_sales', 'default', array($store->id));
}

/**
 * Page callback for viewing one of the store orders.
 */
function commerce_marketplace_view_order($order) {
  return commerce_embed_view('store_order_view', 'default', array($order->order_id));
}

/**
 * Implements hook_views_api().
 */
function commerce_marketplace_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_query_alter().
 */
function commerce_marketplace_views_query_alter(&$view, &$query) {
  if ($view->name == 'my_stores' && $view->current_display == 'default') {
    $query->where[0]['type'] = 'OR';
  }
}

/**
 * Implements hook_node_access().
 */
function commerce_marketplace_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($op == 'update' || $op == 'delete') {
    // If the node type hasn't product field we just ignore this operation
    $is_product_display = FALSE;
    $instances = field_info_instances('node', $type);
    foreach ($instances as $instance_name => $instance) {
      $field = field_info_field($instance['field_name']);
      if ($field['type'] == 'commerce_product_reference') {
        $field_name = $instance_name;
        $is_product_display = TRUE;
        break;
      }
    }
    if ($is_product_display) {
      $node = node_load($node->nid);
      $product_field = field_get_items('node', $node, $field_name);
      if ($product_field) {
        $product_id = $node->{$field_name}[LANGUAGE_NONE][0]['product_id'];
        $product = commerce_product_load($product_id);
        if (!empty($product->cmp_store)) {
          $store_id = $product->cmp_store[LANGUAGE_NONE][0]['target_id'];
          $store = commerce_store_load($store_id);
          if (commerce_store_access_user_access('add products to the store', $store, $account)) {
            return NODE_ACCESS_ALLOW;
          }
          else {
            return NODE_ACCESS_DENY;
          }
        }
        else {
          return NODE_ACCESS_IGNORE;
        }
      }
      else {
        return NODE_ACCESS_IGNORE;
      }
    }
    else {
      return NODE_ACCESS_IGNORE;
    }
  }
}

/*
 * Implements hook_form_alter().
 */
function commerce_marketplace_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'commerce_order_order_form') {
    $path = explode('/', current_path());

    if ($path[0] == 'user' && is_numeric($path[1]) && $path[2] == 'orders' && is_numeric($path[3]) && $path[4] == 'edit') {
      $form['commerce_line_items']['#access'] = FALSE;
      $form['commerce_order_total']['#access'] = FALSE;
      $form['commerce_customer_billing']['#access'] = FALSE;
      $form['commerce_customer_shipping']['#access'] = FALSE;
      $form['cmp_o_store']['#access'] = FALSE;
      $form['cmp_order']['#access'] = FALSE;
      $form['user']['#access'] = FALSE;
      $form['order_history']['#access'] = FALSE;
      unset($form['order_status']['status']['#options']['Shopping cart']);
      unset($form['order_status']['status']['#options']['Checkout']);
    }
    if (($path[0] == 'commerce_store' && $path[1] == 'store' && is_numeric($path[2]) &&
      $path[3] == 'sales' && is_numeric($path[4]) && $path[5] == 'edit')) {
      $form['store_sales_embed'] = array(
        '#type' => 'item',
        '#markup' => commerce_embed_view('store_order_view', 'default', array($path[4])),
      );
      $form['commerce_line_items']['#access'] = FALSE;
      $form['commerce_order_total']['#access'] = FALSE;
      $form['commerce_customer_billing']['#access'] = FALSE;
      $form['commerce_customer_shipping']['#access'] = FALSE;
      $form['cmp_o_store']['#access'] = FALSE;
      $form['cmp_order']['#access'] = FALSE;
      $form['user']['#access'] = FALSE;
      $form['order_history']['#access'] = FALSE;
      unset($form['order_status']['status']['#options']['Shopping cart']);
      unset($form['order_status']['status']['#options']['Checkout']);
    }
  }
}
