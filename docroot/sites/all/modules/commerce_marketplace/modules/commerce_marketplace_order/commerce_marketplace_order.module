<?php

/**
 * @file
 * Includes commerce_store_order module functions.
 */


/**
 * Implements hook_entity_info_alter().
 */
function commerce_marketplace_order_entity_info_alter(&$info) {
  $info['commerce_order']['bundles']['commerce_marketplace_order'] = array('label' => t('Marketplace order'));
}


/**
 * Implements hook_commerce_cart_order_convert().
 */
function commerce_marketplace_order_commerce_cart_order_convert($order_wrapper, $account) {
  if ($order_wrapper->type->value() == 'commerce_marketplace_order') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_order')
      ->entityCondition('bundle', 'commerce_store_order')
      ->fieldCondition('cmp_order', 'target_id', $order_wrapper->order_id->value());
    $result = $query->execute();
    if (isset($result['commerce_order'])) {
      foreach ($result['commerce_order'] as $order_id => $obj) {
        $store_order = commerce_order_load($order_id);
        commerce_cart_order_convert($store_order, $account);
      }
    }
  }
}

/**
 * Implements hook_commerce_cart_order_id().
 */
function commerce_marketplace_order_commerce_cart_order_id($uid) {
  // This function creates a new cart order everytime the user logs in! (maybe a problem with switch user block?)
  // This check is a temporary hack to prevent it from creating extra orders.
  // @todo fix this, anonymous users should be able to create marketplace orders.
  $status_ids = array('pending', 'processing', 'completed', 'cancelled');
  if (!$uid) {
    if (commerce_cart_order_session_exists()) {
      // We can't trust a user's session to contain only their order IDs, as
      // they could've edited their session to try and gain access to someone
      // else's order data. Therefore, this query restricts its search to
      // orders assigned to anonymous users using the same IP address to try
      // and mitigate risk as much as possible.
      return db_query('SELECT order_id FROM {commerce_order} WHERE order_id IN (:order_ids) AND uid = 0 AND hostname = :hostname AND status NOT IN (:status_ids) ORDER BY order_id DESC',
        array(
          ':order_ids' => commerce_cart_order_session_order_ids(),
          ':hostname' => ip_address(),
          ':status_ids' => $status_ids
        ))->fetchField();
    }
    else {
      $order = commerce_order_new($uid, 'cart', 'commerce_marketplace_order');
      commerce_order_save($order);
      commerce_cart_order_session_save($order->order_id);
    }
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
    ->entityCondition('bundle', 'commerce_marketplace_order')
    ->propertyCondition('status', $status_ids, 'NOT IN')
    ->propertyCondition('uid', $uid);
  $result = $query->execute();
  if (isset($result['commerce_order'])) {
    $res = array_pop($result['commerce_order']);
    return intval($res->order_id);
  }
  else {
    $order = commerce_order_new($uid, 'cart', 'commerce_marketplace_order');
    commerce_order_save($order);
    return intval($order->order_id);
  }
}

/**
 * Implements hook_commerce_cart_product_add().
 */
function commerce_marketplace_order_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  if ($order->type == 'commerce_marketplace_order') {
    $store = field_get_items('commerce_product', $product, 'cmp_store');
    if ($store) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_order')
        ->entityCondition('bundle', 'commerce_store_order')
        ->propertyCondition('uid', $order->uid)
        ->fieldCondition('cmp_order', 'target_id', $order->order_id)
        ->fieldCondition('cmp_o_store', 'target_id', $store[0]['target_id']);
      $result = $query->execute();
      $store_order = NULL;
      if (isset($result['commerce_order'])) {
        $res = array_pop($result['commerce_order']);
        $store_order = commerce_order_load($res->order_id);
      }
      else {
        $store_order = commerce_order_new($order->uid, 'cart', 'commerce_store_order');
        $store_order->cmp_o_store[LANGUAGE_NONE][0]['target_id'] = $store[0]['target_id'];
        $store_order->cmp_order[LANGUAGE_NONE][0]['target_id'] = $order->order_id;
        commerce_order_save($store_order);
      }

      $order_wrapper = entity_metadata_wrapper('commerce_order', $store_order);
      $line_items = $order_wrapper->commerce_line_items->value();
      $add_line_item = TRUE;
      foreach ($line_items as $a_line_item) {
        if ($line_item->line_item_id == $a_line_item->line_item_id) {
          $add_line_item = FALSE;
          break;
        }
      }

      if ($add_line_item) {
        $new_line_item = clone($line_item);
        $new_line_item->line_item_id = '';
        $new_line_item->order_id = $store_order->order_id;
        $new_line_item->cmp_line_item[LANGUAGE_NONE][0]['target_id'] = $line_item->line_item_id;
        commerce_line_item_save($new_line_item);
        $order_wrapper->commerce_line_items[] = $new_line_item;
        $order_wrapper->save();
      }
    }
  }
}

/**
 * Implements hook_commerce_cart_product_remove().
 */
function commerce_marketplace_order_commerce_cart_product_remove($order, $product, $quantity, $line_item) {
  if ($order->type == 'commerce_marketplace_order') {
    $store = field_get_items('commerce_product', $product, 'cmp_store');
    if ($store) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_order')
        ->entityCondition('bundle', 'commerce_store_order')
        ->propertyCondition('uid', $order->uid)
        ->fieldCondition('cmp_order', 'target_id', $order->order_id)
        ->fieldCondition('cmp_o_store', 'target_id', $store[0]['target_id']);
      $result = $query->execute();
      $store_order = NULL;
      if ($result['commerce_order']) {
        $res = array_pop($result['commerce_order']);
        $store_order = commerce_order_load($res->order_id);
      }
      else {
        // Weird! why don't we already have the commerce_store_order?
        return;
      }
      $order_wrapper = entity_metadata_wrapper('commerce_order', $store_order);
      foreach ($order_wrapper->commerce_line_items as $index => $line_item_wrapper) {
        if (isset($line_item_wrapper->value()->cmp_line_item[LANGUAGE_NONE][0]['target_id']) && $line_item_wrapper->value()->cmp_line_item[LANGUAGE_NONE][0]['target_id'] == $line_item->line_item_id) {
          // Remove this line item!
          $order_wrapper->commerce_line_items->offsetUnset($index);
          break;
        }
      }
      $order_wrapper->save();
    }
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function commerce_marketplace_order_commerce_checkout_complete($order) {
  if ($order->type == 'commerce_marketplace_order') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_order')
      ->entityCondition('bundle', 'commerce_store_order')
      ->propertyCondition('uid', $order->uid)
      ->fieldCondition('cmp_order', 'target_id', $order->order_id)
      ->propertyCondition('status', array('pending', 'processing', 'completed', 'cancelled'), 'NOT IN');
    $result = $query->execute();
    if (isset($result['commerce_order'])) {
      foreach ($result['commerce_order'] as $res) {
        $store_order = commerce_order_load($res->order_id);
        if ($store_order) {
          // This sets the store order status to checkout_complete.
          $store_order->status = $order->status;
          if (isset($order->commerce_customer_billing)) {
            $store_order->commerce_customer_billing = $order->commerce_customer_billing;
          }

          commerce_order_save($store_order);
          $transaction_id = db_select('commerce_payment_transaction', 't')
            ->condition('order_id', $order->order_id)
            ->orderBy('created', 'DESC')
            ->range(0, 1)
            ->fields('t', array('transaction_id'))
            ->execute()->fetchField();
          $original_transaction = commerce_payment_transaction_load($transaction_id);
          $transaction = commerce_payment_transaction_new('commerce_marketplace', $store_order->order_id);
          $order_total = field_get_items('commerce_order', $store_order, 'commerce_order_total');
          $transaction->amount = $order_total[0]['amount'];
          $transaction->currency_code = $order_total[0]['currency_code'];
          $transaction->status = $original_transaction->status;
          commerce_payment_transaction_save($transaction);
        }
      }
    }
  }
}

/**
 * Implements hook_commerce_order_presave().
 * Updates commerce_store_order statuses when the original order status
 * is updated to pending.
 */
function commerce_marketplace_order_commerce_order_presave($order) {
  if (!$order->order_id) {
    // This is a new order. Nothing to do here.
    return;
  }

  $order_statues = commerce_order_statuses();
  // When 'commerce_marketplace_order' status is changed (not triggered by a 'commerce_store_order' status change) to 'pending' or of one statuses in one of states except 'pending' or 'completed' update 'commerce_store_order' status accordingly.
  if ($order->type == 'commerce_marketplace_order' && ($order->status == 'pending' || !in_array($order_statues[$order->status]['state'], array(
        'pending',
        'completed'
      )))
  ) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_order')
      ->entityCondition('bundle', 'commerce_store_order')
      ->propertyCondition('status', array_keys(commerce_order_statuses(array('state' => 'pending')) + commerce_order_statuses(array('state' => 'completed'))), 'NOT IN')
      ->fieldCondition('cmp_order', 'target_id', $order->order_id);
    $result = $query->execute();
    if (isset($result['commerce_order'])) {
      foreach ($result['commerce_order'] as $res) {
        $store_order = commerce_order_load($res->order_id);
        if ($store_order) {
          // This sets the store order status to checkout_complete.
          $store_order->status = $order->status;
          if (isset($order->commerce_customer_billing)) {
            $store_order->commerce_customer_billing = $order->commerce_customer_billing;
          }
          if (isset($order->commerce_customer_shipping)) {
            $store_order->commerce_customer_shipping = $order->commerce_customer_shipping;
          }
          commerce_order_save($store_order);
        }
      }
    }
  }
  elseif ($order->type == 'commerce_store_order') {

    // If `commerce_store_order` order status is changed (not triggered by a 'commerce_marketplace_order' status change) change `commerce_marketplace_order` status too.
    if (isset($order->original) && $order->original->status != $order->status && in_array($order_statues[$order->original->status]['state'], array(
        'pending',
        'completed'
      ))
    ) {
      /*
     * Find other `commerce_store_order` orders which reference the same `commerce_marketplace_order`
     * If there is any it means `commerce_marketplace_order` has products from different stores.
     */
      $market_place_order_id = $order->cmp_order[LANGUAGE_NONE][0]['target_id'];
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_order')
        ->entityCondition('bundle', 'commerce_store_order')
        ->propertyCondition('order_id', $order->order_id, '<>')
        ->fieldCondition('cmp_order', 'target_id', $market_place_order_id);
      $result = $query->execute();
      $flag = TRUE;
      if (!empty($result['commerce_order'])) {
        $store_orders = commerce_order_load_multiple(array_keys($result['commerce_order']));
        foreach ($store_orders as $store_order) {
          if ($store_order->status != $order->status) {
            $flag = FALSE;
            break;
          }
        }

      }
      /*
       * There is no other `commerce_store_order` order, or other `commerce_store_order` orders have same
       * status as current order so we proceed to change `commerce_marketplace_order` status.
       */
      if ($flag) {
        $market_place_order = commerce_order_load($market_place_order_id);
        if ($market_place_order->status != $order->status) {
          $market_place_order->status = $order->status;
          commerce_order_save($market_place_order);
        }
      }
    }
  }
}

/**
 * Implements hook_commerce_line_item_type_info_alter().
 */
function commerce_marketplace_order_commerce_line_item_type_info_alter(&$line_item_types) {
  $field_name = 'cmp_line_item';
  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'entityreference',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'commerce_line_item',
      ),
    );
    field_create_field($field);
  }

  foreach ($line_item_types as $line_item_name => $line_item_date) {
    $instance = field_info_instance('commerce_line_item', $field_name, $line_item_name);
    if (empty($instance)) {
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'commerce_line_item',
        'bundle' => $line_item_name,
        'label' => t('Original line item'),
        'settings' => array(),
      );
      field_create_instance($instance);
    }
  }
}
