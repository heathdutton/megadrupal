<?php

/**
 * @file
 * Defines an marketplace shipping method.
 */


/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_marketplace_shipping_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['commerce_marketplace_shipping_method'] = array(
    'title' => t('Marketplace shipping method'),
    'description' => t('Gathers shipping rates from Store orders and adds them to Marketplace order'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_marketplace_shipping_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['marketplace_shipping_service'] = array(
    'title' => t('Marketplace shipping service'),
    'display_title' => t('Calculated shipping rate based on store preferences'),
    'display_description' => t('Shipping rate is calculated based on the store-specific shipping methods and rates.'),
    'shipping_method' => 'commerce_marketplace_shipping_method',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'commerce_marketplace_shipping_service_rate',
      'details_form' => 'commerce_marketplace_shipping_service_details_form',
      'details_form_validate' => 'commerce_marketplace_shipping_service_details_form_validate',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_marketplace_shipping_service_rate($shipping_service, $order) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
    ->entityCondition('bundle', 'commerce_store_order')
    ->propertyCondition('uid', $order->uid)
    ->fieldCondition('cmp_order', 'target_id', $order->order_id)
    ->propertyCondition('status', array('pending', 'processing', 'completed'), 'NOT IN');
  $result = $query->execute();
  $amount = 0;
  if (isset($result['commerce_order'])) {
    foreach ($result['commerce_order'] as $res) {
      $store_order = commerce_order_load($res->order_id);
      if ($store_order) {
        if (isset($order->commerce_customer_shipping)) {
          $store_order->commerce_customer_shipping = $order->commerce_customer_shipping;
        }
        module_load_include('inc', 'commerce_shipping', 'commerce_shipping.rules');
        commerce_shipping_collect_rates($store_order);
        if (isset($order->data['shipping_service'])) {
          commerce_shipping_rate_apply($store_order, $order->data['shipping_service']);
        }
        else {
          commerce_shipping_collect_rates($store_order);
          $shipping_services = $store_order->shipping_rates;
          commerce_shipping_rate_apply($store_order, key($shipping_services));
        }
        commerce_order_save($store_order);
        $total = field_get_items('commerce_order', $store_order, 'commerce_order_total');
        foreach (commerce_shipping_services() as $shipping_service) {
          $shipping_services[] = $shipping_service['price_component'];
        }
        foreach ($total as $item) {
          foreach ($item['data']['components'] as $component) {
            if (in_array($component['name'], $shipping_services) && $component['name'] != 'marketplace_shipping_service') {
              $amount += $component['price']['amount'];
              //set the currency code to the currency code of the last store order!
              //Maybe this isn't the smartest way to handle the whole thing though
              $currency_code = $component['price']['currency_code'];
            }
          }
        }
      }
    }
  }
  return array(
    'amount' => $amount,
    'currency_code' => $currency_code,
    'data' => array(),
  );
}

/**
 * Shipping service callback: returns the example shipping service details form.
 */
function commerce_marketplace_shipping_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  // We need to collect shipping services from order but since we have disabled them on orders of marketplace type
  // We had to collect them from one order which is from store order type so we load one of store orders related to current marketplace order.
  $form = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
    ->entityCondition('bundle', 'commerce_store_order')
    ->propertyCondition('uid', $order->uid)
    ->fieldCondition('cmp_order', 'target_id', $order->order_id)
    ->range(0, 1);
  $result = $query->execute();
  $store_order = commerce_order_load(key($result['commerce_order']));
  commerce_shipping_collect_rates($store_order);
  $shipping_services = $store_order->shipping_rates;
  unset($shipping_services['marketplace_shipping_service']);
  $options = array();
  foreach ($shipping_services as $key => $shipping_service) {
    $options[$key] = $shipping_service->line_item_label;
  }
  // If we had already set shipping service type on marketplace order we set it as default shipping service(this happens when its a ajax form callback)
  // Otherwise(when viewing for the first time) we set first shipping service as the default.
  if (isset($order->data['shipping_service'])) {
    $default_value = $order->data['shipping_service'];
  }
  else {
    $default_value = key($options);
  }
  $form['shipping_services'] = array(
    '#type' => 'radios',
    '#title' => t('Shipping Services'),
    '#default_value' => $default_value,
    '#required' => TRUE,
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'commerce_marketplace_shipping_ajax',
      'wrapper' => 'commerce-shipping-service-ajax-wrapper'
    ),
  );
  return $form;
}

function commerce_marketplace_shipping_ajax($form, $form_state) {
  $order = commerce_order_load($form_state['order']->order_id);
  $order->data['shipping_service'] = $form_state['values']['commerce_shipping']['service_details']['shipping_services'];
  commerce_order_save($order);
  $commerce_shipping_service = commerce_shipping_service_load($form_state['values']['commerce_shipping']['shipping_service']);
  $shipping_price = commerce_marketplace_shipping_service_rate($commerce_shipping_service, $order);
  $form['commerce_shipping']['shipping_service']['marketplace_shipping_service']['#title'] = $form['commerce_shipping']['shipping_rates']['#value']['marketplace_shipping_service']->data['shipping_service']['display_title'] . ': ' . commerce_currency_format($shipping_price['amount'], $shipping_price['currency_code']);
  return render($form['commerce_shipping']);
}

/**
 * Shipping service callback: validates the example shipping service details.
 */
function commerce_marketplace_shipping_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
    ->entityCondition('bundle', 'commerce_store_order')
    ->propertyCondition('uid', $order->uid)
    ->fieldCondition('cmp_order', 'target_id', $order->order_id);
  $result = $query->execute();
  $store_order = commerce_order_load(key($result['commerce_order']));
  commerce_shipping_collect_rates($store_order);
  $shipping_services = $store_order->shipping_rates;
  if (!in_array($details_values['shipping_services'], array_keys($shipping_services))) {
    form_set_error(implode('][', array_merge($form_parents, array('shipping_services'))), t('You must enter a name two or more characters long.'));
    return FALSE;
  }
  else {
    $order->data['shipping_service'] = $details_values['shipping_services'];
    commerce_order_save($order);
    return TRUE;
  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_marketplace_shipping_commerce_price_component_type_info() {
  return array(
    'example_shipping_service_express' => array(
      'title' => t('Express delivery'),
      'weight' => 20,
    ),
  );
}

/**
 * Implements hook_default_rules_configuration_alter().
 */
function commerce_marketplace_shipping_default_rules_configuration_alter(&$rules) {
  foreach ($rules as $rule_name => $rule) {
    if (strpos($rule_name, 'commerce_shipping_method_') === 0) {
      if ($rule_name == 'commerce_shipping_method_commerce_marketplace_shipping_method') {
        $rules[$rule_name]->condition(rules_condition('data_is', array(
          'data:select' => 'commerce-order:type',
          'op' => '==',
          'value' => 'commerce_marketplace_order',
        )));
      }
      else {
        $rules[$rule_name]->condition(rules_condition('data_is', array(
          'data:select' => 'commerce-order:type',
          'op' => '==',
          'value' => 'commerce_marketplace_order',
        ))->negate());
      }
    }
  }
}
