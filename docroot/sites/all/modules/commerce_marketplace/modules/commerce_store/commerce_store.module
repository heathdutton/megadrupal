<?php

/**
 * @file
 * Commerce Store module functions.
 */


/**
 * Implements hook_entity_info_alter().
 */
function commerce_store_entity_info_alter(&$entity_info) {
  $entity_info['commerce_order']['bundles']['commerce_store_order'] = array(
    'label' => t('Store order'),
    'admin' => array(
      'path' => 'admin/commerce/config/commerce_store_order',
      'real path' => 'admin/commerce/config/commerce_store_order',
      'access arguments' => array('configure commerce store order settings'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function commerce_store_permission() {
  return array(
    'configure commerce store order settings' => array(
      'title' => t('Configure commerce store order settings'),
      'restrict' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_store_menu() {
  $items['admin/commerce/config/commerce_store_order'] = array(
    'title' => 'Commerce Store Order settings',
    'description' => 'Configure general store order settings, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_settings_form'),
    'access arguments' => array('configure commerce store order settings'),
    'file' => 'includes/commerce_order_ui.orders.inc',
    'file path' => drupal_get_path('module', 'commerce_order_ui'),
  );
  $items['admin/commerce/config/commerce_store_order/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

function commerce_store_entity_presave($entity, $type) {
  if ($type == 'commerce_store') {
    $members = array();
    if (isset($entity->cmp_m_store[LANGUAGE_NONE])) {
      foreach ($entity->cmp_m_store[LANGUAGE_NONE] as $item) {
        if (isset($item['target_id'])) {
          $members[] = $item['target_id'];
        }
      }
    }
    global $user;
    if (!in_array($user->uid, $members)) {
      $entity->cmp_m_store[LANGUAGE_NONE][]['target_id'] = $user->uid;
    }
  }
}

function commerce_store_load($id) {
  return entity_load_single('commerce_store', $id);
}

function commerce_store_save($store) {
  if (!$store) {
    return;
  }
  return entity_save('commerce_store', $store);
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_store_field_widget_info() {
  return array(
    'store_entityreference_hidden_widget' => array(
      'label' => t('Do not show a widget'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_store_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'store_entityreference_hidden_widget':
      return array();
      break;
  }
}