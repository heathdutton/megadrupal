Overview
========
Commerce Marketplace Funds is a multipurpose funds management system developed
for handling payments in Marketplace context.

Under the hoods
===============

Commerce Marketplace Funds has 3 primary entity types:

* **Commerce Marketplace Funds Account**

    This entity type is responsible for holding funds account balance. Funds
    accounts can be owned by any type of entity (not just users) - this is done
    by having to properties for handling owner information: "owner_id" and
    "owner_type".
    Here's the tricky part" the bundle key of Commerce Marketplace Funds Account
    entity type, is it's owner_type property. This means, that if you create a
    funds account bundle named 'node', the new funds account type will be owned
    by nodes you'll have funds account tabs on node pages.
    By default, there are two funds account bundles: user and commerce_store

* **Commerce Marketplace Funds Transaction**

    Funds transactions are what keep track of the account balance changes.
    Important properties of transactions are "form_account", "to_account",
    "order_id", "status" and "amount" (which is a commerce_price field).
    There are 4 bundles of this entity type by default:

    * **Deposit**: This bundle is responsible for keeping track of funds deposit
        transactions. Transactions of this bundle require  "order_id",
        "to_account" and "amount" values, while "from_account" is ignored.

    * **Transfer**: This bundle is responsible for keeping track of funds
        transfer transactions between funds accounts. Transactions of this
        bundle require "from_account", "to_account" and "amount" values, while
        "order_id" is ignored.

    * **Payment**: This bundle is responsible for keeping track of payments
        transactions. This is specially used for making payment transactions
        for marketplace orders to stores. It requires "order_id", "to_account"
        and "amount" values, while "from_account" property is ignored.

    * **Withdraw**: This bundle is responsible for handling withdraw
        transactions.
        To help understand how it works, consider any withdraw transaction with
        PENDING status is as a withdraw request, and when its status is changed
        to SUCCESSFUL or FAILURE, consider it as a processed withdraw
        transaction.
        This bundle has one extra field named "withdraw_method" which is
        an entity reference field used for referencing a withdraw method for
        processing the withdraw transaction (See the next entity type for more
        information on withdraw methods).
        It requires "from_account", "amount", and "withdraw_method" properties
        while "order_id" and "to_account" properties are ignored.

* **Commerce Marketplace Funds Withdraw Method**

    This entity type (called Withdraw Method from now on) is used to allow site
    administrators define different means for handling withdraw requests. To do
    that, the site admin needs to create new bundles of Withdraw Method entity
    type.
    For example, if you want to support wire transfer and bitcoin transfer
    withdraw method, all you have to do is to create two new withdraw method
    bundles and add the related fields to them. Once you've done that, the users
    will be able to "configure" their own withdraw methods by creating one
    instance of each withdraw method bundle per funds account (so, if you want
    to let your users have two wire transfer options, you'd have to create two
    withdraw methods bundles). When users create Withdraw transactions,
    "withdraw_method" entityreference field will select one of their withdraw
    methods as their preferred way for withdrawal.
    The Withdraw Method entity type is modeled after profile2 entity type (for
    more information on the entity structure, see
    http://drupal.org/project/model).

The module itself saves funds data in database, but it allows other modules to
change the entity api classes and take over the handling of funds data.
To do this, a module has to implement
hook_commerce_marketplace_funds_processor_info() and/or
hook_commerce_marketplace_funds_processor_info_alter() hooks. For more
information, see
commerce_marketplace_funds_commerce_marketplace_funds_processor_info() and
commerce_marketplace_funds_commerce_marketplace_funds_processor_info_alter()
and commerce_marketplace_mangopay module implementations.

