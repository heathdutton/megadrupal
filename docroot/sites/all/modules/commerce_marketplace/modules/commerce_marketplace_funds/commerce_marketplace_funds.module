<?php

/**
 * @file
 * module file for commerce_marketplace_funds.
 * @todo Implement EntityController classes.
 * @todo Views integration.
 * @todo Create a transaction bundle for marketplace fees?
 * @todo Add title to transaction entity?
 */

/**
 * Transaction statuses.
 */
define('FUNDS_TRANSACTION_PENDING', 'pending');
define('FUNDS_TRANSACTION_SUCCESS', 'success');
define('FUNDS_TRANSACTION_FAILURE', 'failure');

/**
 * Implements hook_enable().
 */
function commerce_marketplace_funds_enable() {
  $account_entity_info = entity_get_info('cmp_funds_account');
  foreach (array_keys($account_entity_info['bundles']) as $bundle) {
    commerce_marketplace_funds_configure_account_entity($bundle);
  }
  $transaction_entity_info = entity_get_info('cmp_funds_transaction');
  foreach (array_keys($transaction_entity_info['bundles']) as $bundle) {
    commerce_marketplace_funds_configure_transaction_entity($bundle);
  }
  commerce_order_configure_order_type('cmp_funds_deposit_order');
  commerce_product_configure_product_type('deposit');
}

/**
 * Implements hook_disable().
 */
function commerce_marketplace_funds_disable() {
  $balance_field = field_info_field('balance');
  if ($balance_field) {
    field_delete_field('balance');
  }
  $amount_field = field_info_field('amount');
  if ($amount_field) {
    field_delete_field('amount');
  }
  $notes_field = field_info_field('notes');
  if ($notes_field) {
    field_delete_field('notes');
  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_marketplace_funds_commerce_price_component_type_info() {
  return array(
    'cmp_funds_fee' => array(
      'title' => t('Commerce Marketplace Funds fee'),
      'weight' => 20,
    ),
  );
}

function commerce_marketplace_funds_transaction_statuses() {
  return array(
    FUNDS_TRANSACTION_PENDING => t('Pending'),
    FUNDS_TRANSACTION_SUCCESS => t('Successful'),
    FUNDS_TRANSACTION_FAILURE => t('Failed'),
  );
}

function commerce_marketplace_funds_transaction_types() {
  $info = entity_get_info('cmp_funds_transaction');
  $options = array();
  foreach ($info['bundles'] as $bundle_key => $bundle) {
    $options[$bundle_key] = $bundle['label'];
  }
  return $options;
}

/**
 * Returns an associated array of cmp_funds_account bundles,
 * each element is keyed by the bundle machine name and valued by the bundle label.
 */
function commerce_marketplace_funds_account_types() {
  $info = entity_get_info('cmp_funds_account');
  $options = array();
  foreach ($info['bundles'] as $bundle_key => $bundle) {
    $owner_info = entity_get_info($bundle_key);
    $options[$bundle_key] = $owner_info['label'];
  }
  return $options;
}

/**
 * Implements hook_commerce_product_type_info().
 */
function commerce_marketplace_funds_commerce_product_type_info() {
  return array(
    'deposit' => array(
      'type' => 'deposit',
      'name' => t('Funds Deposit'),
      'description' => t('Stores a Funds Deposit Operation'),
      'help' => '',
      'revision' => 1
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function commerce_marketplace_funds_entity_info() {
  $info = array();

  $info['cmp_funds_account'] = array(
    'label' => t('Funds account'),
    'plural label' => t('Funds accounts'),
    'controller class' => 'CommerceMarketplaceFundsAccountController',
    'entity class' => 'CommerceMarketplaceFundsAccount',
    'metadata controller class' => 'CommerceMarketplaceFundsAccountMetadataController',
    'base table' => 'commerce_marketplace_funds_account',
    'uri callback' => 'commerce_marketplace_funds_account_uri',
    'access callback' => 'commerce_marketplace_funds_account_access',
    'module' => 'commerce_marketplace_funds',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'account_id' ,
      'bundle' => 'owner_type',
    ),
    'bundle keys' => array(
      'bundle' => 'owner_type',
    ),

    'bundles' => array(
      /**
       * Bundle machine names are the same as the owner entity type. This helps with
       * handling the access controls and loading the owner.
       */
      'commerce_store' => array(
        'label' => t('Store funds account'),
        'admin' => array(
          'path' => 'admin/commerce/marketplace_funds/account/commerce_store/manage',
          'access arguments' => array('administer cmp_funds_account entities'),
        ),
      ),
      'user' => array(
        'label' => t('User funds account'),
        'admin' => array(
          'path' => 'admin/commerce/marketplace_funds/account/user/manage',
          'access arguments' => array('administer cmp_funds_account entities'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Account'),
        'custom settings' =>  TRUE,
      ),
    ),
  );

  $info['cmp_funds_transaction'] = array(
    'label' => t('Funds transaction'),
    'plural label' => t('Funds transactions'),
    'controller class' => 'CommerceMarketplaceFundsTransactionController',
    'entity class' => 'CommerceMarketplaceFundsTransaction',
    'metadata controller class' => 'CommerceMarketplaceFundsTransactionMetadataController',
    'base table' => 'commerce_marketplace_funds_transaction',
    'uri callback' => 'commerce_marketplace_funds_transaction_uri',
    'access callback' => 'commerce_marketplace_funds_transaction_access',
    'module' => 'commerce_marketplace_funds',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'transaction_id' ,
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),

    'bundles' => array(
      'deposit' => array(
        'label' => t('Deposit transaction'),
        'admin' => array(
          'path' => 'admin/commerce/marketplace_funds/transaction/deposit/manage',
          'real path' => 'admin/commerce/marketplace_funds/transaction/deposit/manage',
          'access arguments' => array('administer cmp_funds_transaction entities'),
        ),
      ),
      'transfer' => array(
        'label' => t('Funds transfer transaction'),
        'admin' => array(
          'path' => 'admin/commerce/marketplace_funds/transaction/transfer/manage',
          'access arguments' => array('administer cmp_funds_transaction entities'),
        ),
      ),
      'payment' => array(
        'label' => t('Payment transaction'),
        'admin' => array(
          'path' => 'admin/commerce/marketplace_funds/transaction/payment/manage',
          'access arguments' => array('administer cmp_funds_transaction entities'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Transaction'),
        'custom settings' =>  TRUE,
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_marketplace_funds_entity_info_alter(&$info) {
  $info['commerce_order']['bundles']['cmp_funds_deposit_order'] = array('label' => t('Funds deposit order'));
}


/**
 * Saves a funds account object into the database.
 */
function commerce_marketplace_funds_account_save($account) {
  if (!isset($account->created) || empty($account->created)) {
    $account->created = REQUEST_TIME;
  }
  if (!isset($account->changed) || empty($account->changed)) {
    $account->changed = REQUEST_TIME;
  }
  return entity_get_controller('cmp_funds_account')->save($account);
}

/**
 * Saves a funds transaction object into the database.
 */
function commerce_marketplace_funds_transaction_save($transaction) {
  if (!isset($transaction->created) || empty($transaction->created)) {
    $transaction->created = REQUEST_TIME;
  }
  if (!isset($transaction->changed) || empty($transaction->changed)) {
    $transaction->changed = REQUEST_TIME;
  }
  return entity_get_controller('cmp_funds_transaction')->save($transaction);
}

/**
 * Access callback for funds accounts.
 */
function commerce_marketplace_funds_account_access($op, $funds_account = NULL, $viewer = NULL, $entity_type = 'cmp_funds_account') {
  if (!$viewer) {
    global $user;
    $viewer = $user;
  }

  if ($op == 'view') {
    if (!$funds_account) {
      return user_access("view any cmp_funds_account of any type");
    }
    $owner = commerce_marketplace_funds_get_account_owner($funds_account);
    // Is the account owner entity owned by the logged in user?
    $view_own = ($owner->uid == $viewer->uid && user_access("view own $funds_account->owner_type funds accounts"));
    $view_any = user_access("view any $funds_account->owner_type funds account");
    if ($view_own || $view_any) {
      return TRUE;
    }

    // Now check the store permissions to see if the user has enough permission to view the account.
    if ($funds_account->owner_type == 'commerce_store') {
      // Lets see if the $user has permission to see the store funds account.
      // Don't get confused. Store is the $owner of the account. The user might be a member of the store.
      if (commerce_store_access_user_access('view store funds account', $owner, $viewer)) {
        return TRUE;
      }
    }
    return FALSE;
  }
  // We do not allow creating/updating/deleting accounts manually.
  elseif ($op == 'delete' || $op == 'update' || $op == 'create') {
    return FALSE;
  }
  return FALSE;
}

/**
 * Access callback for funds transactions.
 */
function commerce_marketplace_funds_transaction_access($op, $transaction = NULL, $viewer = NULL, $entity_type = 'cmp_funds_transaction', $funds_account = NULL) {
  if (!$viewer) {
    global $user;
    $viewer = $user;
  }

  if ($op == 'view') {
    if (!$transaction) {
      return user_access('view any cmp_funds_transaction of any type');
    }
    $to_account = $to_account_owner = $from_account = $from_account_owner = NULL;
    if ($transaction->from_account) {
      $from_account = commerce_marketplace_funds_account_load($transaction->from_account);
      $from_account_owner = commerce_marketplace_funds_get_account_owner($from_account);
    }
    if ($transaction->to_account) {
      $to_account = commerce_marketplace_funds_account_load($transaction->to_account);
      $to_account_owner = commerce_marketplace_funds_get_account_owner($to_account);
    }
    // Is the account owner entity owned by the logged in user?
    $view_incoming = $view_outgoing = FALSE;
    if (isset($to_account)) {
      $view_outgoing = $to_account_owner->uid == $viewer->uid && user_access("view own $to_account->owner_type funds account transactions");
    }
    if (isset($from_account)) {
      $view_incoming = $from_account_owner->uid == $viewer->uid && user_access("view own $from_account->owner_type funds account transactions");
    }
    $view_own = $view_incoming || $view_outgoing;
    $view_any = user_access("view any $from_account->owner_type funds account transactions") || user_access("view any $to_account->owner_type funds account transactions");
    if ($view_own || $view_any) {
      return TRUE;
    }
    // Now check the store permissions to see if the user has enough permission to view the transaction.
    if (isset($from_account) && $from_account->owner_type == 'commerce_store') {
      // Lets see if the $user has permission to see the store's funds transactions.
      // Don't get confused. Store is the $owner of the account. The user might be a member of the store.
      if (commerce_store_access_user_access('view store funds transactions', $from_account_owner, $viewer)) {
        return TRUE;
      }
    }
    if (isset($to_account) && $to_account->owner_type == 'commerce_store') {
      if (commerce_store_access_user_access('view store funds transactions', $to_account_owner, $viewer)) {
        return TRUE;
      }
    }

    return FALSE;
  }
  elseif ($op == 'update') {
    $edit_any = user_access('edit any transactions of any type');
    $edit_any_type = user_access("edit any $transaction->type transactions");
    return $edit_any || $edit_any_type;
  }
  elseif ($op == 'create') {
    if (!$funds_account) {
      return user_access("create new $transaction transaction from any account of any type");
    }
    $account_owner = commerce_marketplace_funds_get_account_owner($funds_account);
    $account_type = $funds_account->owner_type;
    $add_new_own = $account_owner->uid == $viewer->uid && user_access("create new $transaction transaction from own $account_type funds account");
    $add_new_any = user_access("create new $transaction transaction from any $account_type account");
    if ($add_new_any || $add_new_own) {
      return TRUE;
    }
    if ($funds_account->owner_type == 'commerce_store') {
      if (commerce_store_access_user_access("create $transaction transactions using store funds account", $account_owner, $viewer)) {
        return TRUE;
      }
    }
    return FALSE;
  }
  elseif ($op == 'delete') {
    return FALSE;
  }
  return FALSE;
}

/**
 * See if the account owner has permission to receive transactions on this account.
 */
function commerce_marketplace_funds_account_can_receive_transactions($account) {
  $owner_info = entity_get_info($account->owner_type);
  $owner = $owner_info['load hook']($account->owner_id);
  if (!$owner) {
    return FALSE;
  }
  $account_owner_user = user_load($owner->uid);
  if (!$account_owner_user) {
    return FALSE;
  }
  return user_access('view own ' . $account->owner_type . ' funds account', $account_owner_user) || user_access('view any ' . $account->owner_type . ' funds account', $account_owner_user);
}

/**
 * Implements hook_permission().
 */
function commerce_marketplace_funds_permission() {
  $perms = array(
    'administer cmp_funds_account entities' => array(
      'title' => t('Administer "Funds Account" entities'),
      'restrict' => TRUE,
    ),
    'administer cmp_funds_transaction entities' => array(
      'title' => t('Administer "Funds Transaction" entities'),
      'restrict' => TRUE,
    ),
    'access new transaction overview page' => array(
      'title' => t('Access new transaction overview page'),
    ),
    'view any cmp_funds_account of any type' => array(
      'title' => t('View any funds account of any type'),
      'restrict' => TRUE,
    ),
    'view any cmp_funds_transaction of any type' => array(
      'title' => t('View any funds transaction of any type'),
      'restrict' => TRUE,
    ),
  );

  $account_entity_info = entity_get_info('cmp_funds_account');
  foreach ($account_entity_info['bundles'] as $bundle => $bundle_info) {
    $perms['view own ' . $bundle . ' funds account'] = array(
      'title' => t('View own %bundle', array('%bundle' => $bundle_info['label'])),
    );
    $perms['view any ' . $bundle . ' funds account'] = array(
      'title' => t('View any %bundle', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
    );
    $perms['view own ' . $bundle . ' funds account transactions'] = array(
      'title' => t('View own %bundle transactions', array('%bundle' => $bundle_info['label'])),
    );
    $perms['view any ' . $bundle . ' funds account transactions'] = array(
      'title' => t('View any %bundle transactions', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
    );

  }
  $perms['edit any transactions of any type'] = array(
    'title' => t('Edit any withdraw transactions of any type'),
    'restrict' => TRUE,
  );
  $transaction_entity_info = entity_get_info('cmp_funds_transaction');
  foreach($transaction_entity_info['bundles'] as $transaction_bundle => $transaction_bundle_info) {
    // Only deposit and transfer transactions can be created manually.
    // It doesn't make sense to create payment transactions.
    // If other modules provide a new type of transaction that needs
    // to be created manually, they should provide the menu items themselves.
    if (in_array($transaction_bundle, array('deposit', 'transfer'))) {
      $perms["create new $transaction_bundle transaction from any account of any type"] = array(
        'title' => t('Create new %bundle from any account of any type', array('%bundle' => $transaction_bundle_info['label'])),
      );
      $perms["edit any $transaction_bundle transactions"] = array(
        'title' => t('Edit any %bundle withdraw transactions', array('%bundle' => $transaction_bundle)),
        'restrict' => TRUE,
      );

      foreach ($account_entity_info['bundles'] as $account_bundle => $account_bundle_info) {

        $perms["create new $transaction_bundle transaction from own $account_bundle funds account"] = array(
          'title' => t('Create new %bundle from own %type', array('%bundle' => $transaction_bundle_info['label'], '%type' => $account_bundle_info['label'])),
        );
        $perms["create new $transaction_bundle transaction from any $account_bundle funds account"] = array(
          'title' => t('Create new %bundle from any %type', array('%bundle' => $transaction_bundle_info['label'], '%type' => $account_bundle_info['label'])),
        );
      }
    }
  }

  return $perms;
}

/**
 * Implements hook_commerce_store_access_permission().
 */
function commerce_marketplace_funds_commerce_store_access_permission() {
  $perms = array(
    'view store funds account' => array(
      'title' => t('View store funds account'),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    ),
    'view store funds transactions' => array(
      'title' => t('View store funds transactions'),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    ),
  );
  $entity_info = entity_get_info('cmp_funds_transaction');
  foreach($entity_info['bundles'] as $bundle => $bundle_info) {
    $perms["create $bundle transactions using store funds account"] = array(
      'title' => t('Create new %bundle transaction using store\'s funds account', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function commerce_marketplace_funds_menu() {
  $items = array();

  $items['funds/account/autocomplete'] = array(
    'page callback' => 'commerce_marketplace_funds_account_autocomplete_callback',
    'file' =>'includes/commerce_marketplace_funds.pages.inc',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['admin/commerce/marketplace_funds'] = array(
    'title' => 'Commerce Marketplace Funds',
    'description' => 'Change Commerce Marketplace Funds settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/commerce/marketplace_funds/processor'] = array(
    'title' => 'Commerce Marketplace Funds Processor',
    'description' => 'Change Commerce Marketplace Funds Processor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_marketplace_funds_processor_config_form'),
    'access arguments' => array('access administration pages'),
  );
  // Account menu items.
  $items['admin/commerce/marketplace_funds/account'] = array(
    'title' => 'Administer Marketplace funds account entity types',
    'description' => 'Change funds accounts settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/commerce/marketplace_funds/account/commerce_store/manage'] = array(
    'title' => 'Administer Marketplace Store Funds Account entity type',
    'description' => 'Configure Store funds accounts.',
    'page callback' => 'commerce_marketplace_funds_list_accounts',
    'page arguments' => array(4),
    'access arguments' => array('administer cmp_funds_account entities'),
    'file' => 'includes/commerce_marketplace_funds.admin.inc',
  );
  $items['admin/commerce/marketplace_funds/account/user/manage'] = array(
    'title' => 'Administer Marketplace User Funds Account entity type',
    'page callback' => 'commerce_marketplace_funds_list_accounts',
    'description' => 'Configure User funds accounts.',
    'page arguments' => array(4),
    'access arguments' => array('administer cmp_funds_account entities'),
    'file' => 'includes/commerce_marketplace_funds.admin.inc',
  );


  $items['admin/commerce/marketplace_funds/account/commerce_store/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/commerce/marketplace_funds/account/user/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $transaction_types = array();
  $transaction_info = entity_get_info('cmp_funds_transaction');
  foreach ($transaction_info['bundles'] as $bundle_key => $bundle) {
    $transaction_types[$bundle_key] = $bundle['label'];
  }

  $account_info = entity_get_info('cmp_funds_account');

  foreach ($account_info['bundles'] as $bundle_key => $bundle) {
    $uris = commerce_marketplace_funds_get_account_uris($bundle_key);
    foreach ($uris as $uri) {
      // find the uri component that contains the owner ID
      $id_component = 1;
      foreach (explode('/', $uri) as $index => $component) {
        if (strpos($component, '%') === 0) {
          $id_component = $index;
        }
      }

      $items[$uri] = array(
        'title callback' => 'commerce_marketplace_funds_account_title',
        'title arguments' => array($bundle_key, $id_component),
        'page callback' => 'commerce_marketplace_funds_account_view',
        'page arguments' => array($bundle_key, $id_component),
        'access callback' => 'commerce_marketplace_funds_account_page_access',
        'access arguments' => array($bundle_key, $id_component),
        'file' => 'includes/commerce_marketplace_funds.pages.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
      );
      $items["$uri/view"] = array(
        'title' => 'Account',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -1,
      );
      $items["$uri/transaction"] = array(
        'title' => 'Account Transactions',
        'page callback' => 'commerce_marketplace_funds_account_transactions_list',
        'page arguments' => array($bundle_key, $id_component),
        'access callback' => 'commerce_marketplace_funds_account_transactions_page_access',
        'access arguments' => array($bundle_key, $id_component),
        'file' => 'includes/commerce_marketplace_funds.pages.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 1,
      );

      foreach ($transaction_types as $type => $label) {
        // Only deposit and transfer transactions can be created manually.
        // It doesn't make sense to create payment transactions.
        // If other modules provide a new type of transaction that needs
        // to be created manually, they should provide the menu items themselves.
        if (in_array($type, array('deposit', 'transfer'))) {
          $items["$uri/transaction/new/" . $type] = array(
            'title' => "Make a $label",
            'page callback' => 'commerce_marketplace_funds_new_' . $type . '_transaction_page',
            'page arguments' => array($bundle_key, $id_component, $type),
            'access callback' => 'commerce_marketplace_funds_new_transaction_page_access',
            'access arguments' => array($bundle_key, $id_component, $type),
            'file' => 'includes/commerce_marketplace_funds.admin.inc',
            'type' => MENU_LOCAL_ACTION,
          );
        }
      }
    }
  }

  // Transaction menu items.
  $items['admin/commerce/marketplace_funds/transaction'] = array(
    'title' => 'Administer Marketplace funds transaction entity types',
    'description' => 'Change funds transactions settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );


  foreach ($transaction_types as $type => $label) {
    $items["admin/commerce/marketplace_funds/transaction/$type/manage"] = array(
      'title' => "Administer marketplace funds $label entity type",
      'description' => "Configure $label transactions.",
      'page callback' => 'commerce_marketplace_funds_list_transactions',
      'page arguments' => array(4),
      'access arguments' => array('administer cmp_funds_transaction entities'),
      'file' => 'includes/commerce_marketplace_funds.admin.inc',
    );
    $items["admin/commerce/marketplace_funds/transaction/$type/manage/list"] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  }
  $items['funds/transaction/%commerce_marketplace_funds_transaction'] = array(
    'title callback' => 'commerce_marketplace_funds_transaction_title',
    'title arguments' => array(2),
    'page callback' => 'commerce_marketplace_funds_transaction_view',
    'page arguments' => array(2),
    'access callback' => 'commerce_marketplace_funds_transaction_page_access',
    'access arguments' => array(2),
    'file' => 'includes/commerce_marketplace_funds.pages.inc',
  );
  $items['funds/transaction/%commerce_marketplace_funds_transaction/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['funds/transaction/%commerce_marketplace_funds_transaction/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'commerce_marketplace_funds_transaction_edit',
    'page arguments' => array(2),
    'access callback' => 'commerce_marketplace_funds_transaction_access',
    'access arguments' => array('update', 2),
    'file' => 'includes/commerce_marketplace_funds.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );


  return $items;
}

/**
 * Funds processor configuration form callback.
 */
function commerce_marketplace_funds_processor_config_form($form, &$form_state) {
  $processors = module_invoke_all('commerce_marketplace_funds_processor_info');
  $options = array(
    '' => t('-No remote processor-'),
  );
  foreach ($processors as $processor => $info) {
    $options[$processor] = $info['name'];
  }
  $form['commerce_marketplace_funds_processor'] = array(
    '#type' => 'select',
    '#title' => t('Default Funds Processor'),
    '#description' => t('Only one funds processor can be used at a time. Changing it after going to production mode will have undesired results. Use with care.'),
    '#options' => $options,
    '#default_value' => variable_get('commerce_marketplace_funds_processor', ''),
  );
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'][] = 'commerce_marketplace_funds_processor_config_form_submit';
  // By default, render the form using theme_system_settings_form().
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }
  return $form;
}

function commerce_marketplace_funds_processor_config_form_submit($form, &$form_state) {
  $old_processor = variable_get('commerce_marketplace_funds_processor', '');

  $new_processor = $form_state['values']['commerce_marketplace_funds_processor'];
  variable_set('commerce_marketplace_funds_processor', $new_processor);

  $processors = module_invoke_all('commerce_marketplace_funds_processor_info');
  foreach (module_implements('commerce_marketplace_funds_processor_info_alter') as $module) {
    $func = $module . '_commerce_marketplace_funds_processor_info_alter';
    $func($processors);
  }
  if ($old_processor != $new_processor) {
    // Allow the old processor to clean up after itself.
    if ($old_processor && $processors[$old_processor]) {
      $disable_function = $processors[$old_processor]['disable callback'];
      if ($disable_function) {
        $disable_function();
      }
    }

    // Allow the new processor to setup funds entities for itself.
    if ($new_processor && $processors[$new_processor]) {
      $enable_function = $processors[$new_processor]['enable callback'];
      if ($enable_function) {
        $enable_function();
      }
    }
    drupal_flush_all_caches();
  }
}

/**
 * Builds and returns parametrized URIs for funds accounts of type $account_type.
 */
function commerce_marketplace_funds_get_account_uris($account_type) {
  // Remember that the funds account bundle machine names are the owner_type (which is an entity type).
  // So, we get the entity_info of the owner type and use it to generate the menu path structure.
  // Get the uri scheme of the account owner view page.
  $uris = array();
  $owner_info = entity_get_info($account_type);

  // create a dummy object that mimics the actual owner object.
  $obj = new CMPDummyEntity($account_type);
  // e.g. : $obj->uid = '%user' or $obj->store_id = '%commerce_store';
  $obj->{$owner_info['entity keys']['id']} = "%$account_type";

  // some entity uri callbacks need to know the bundle. commerce_store entity does.
  // @todo find a more elegant way for doing this.
  $owner_bundles = array_keys($owner_info['bundles']);

  foreach ($owner_bundles as $owner_bundle) {
    $obj->setBundle($owner_bundle);
    if (isset($owner_info['bundle keys']['bundle'])) {
      $obj->{$owner_info['bundle keys']['bundle']} = $owner_bundle;
    }
    $entity_uri = $owner_info['uri callback']($obj);
    // Now $uri will be something like user/%user or commerce_store/store/%commerce_store
    $uris[] = $entity_uri['path'] . '/account';
  }
  return $uris;
}

/**
 * Access callback for viewing account transactions.
 */
function commerce_marketplace_funds_account_transactions_page_access($owner_type, $owner) {
  $info = entity_get_info('cmp_funds_account');
  if (!in_array($owner_type, array_keys($info['bundles']))) {
    return FALSE;
  }
  $owner_info = entity_get_info($owner_type);
  $account = commerce_marketplace_funds_account_load_by_owner($owner_type, $owner->{$owner_info['entity keys']['id']});
  return commerce_marketplace_funds_account_access('view', $account);
}

/**
 * Access callback for creating new transaction.
 */
function commerce_marketplace_funds_new_transaction_page_access($owner_type, $owner, $transaction_type) {
  $info = entity_get_info('cmp_funds_account');
  if (!in_array($owner_type, array_keys($info['bundles']))) {
    return FALSE;
  }
  global $user;
  $owner_info = entity_get_info($owner_type);
  $account = commerce_marketplace_funds_account_load_by_owner($owner_type, $owner->{$owner_info['entity keys']['id']});
  return commerce_marketplace_funds_transaction_access('create', $transaction_type, $user, 'cmp_funds_transaction', $account);
}

/**
 * Access callback for viewing Funds Accounts.
 */
function commerce_marketplace_funds_account_page_access($owner_type, $owner) {
  $info = entity_get_info('cmp_funds_account');
  if (!in_array($owner_type, array_keys($info['bundles']))) {
    return FALSE;
  }
  $owner_info = entity_get_info($owner_type);
  $account = commerce_marketplace_funds_account_load_by_owner($owner_type, $owner->{$owner_info['entity keys']['id']});
  return commerce_marketplace_funds_account_access('view', $account);
}

/**
 * Returns the owner of the funds account. Based on the account type,
 * this can be either a user or a commerce_store entity.
 */
function commerce_marketplace_funds_get_account_owner($account) {
  // Account bundle machine name is the same as the owner's entity type and the entityreference field referencing the owner.
  $info = entity_get_info($account->owner_type);
  if (!$info) {
    return FALSE;
  }

  return entity_load_single($account->owner_type, $account->owner_id);
}

/**
 * Title callback for generating the title of the Funds Account page.
 */
function commerce_marketplace_funds_account_title($owner_type, $owner) {
  $info = entity_get_info($owner_type);
  $label = '';
  if (isset($info['entity keys']['label'])) {
    $label = check_plain($owner->{$info['entity keys']['label']});
  }
  elseif (isset($info['label callback'])) {
    $label = check_plain($info['label callback']($owner));
  }

  return t('@name\'s funds account', array('@name' => $label));
}

/**
 * Access callback for viewing Funds transactions.
 */
function commerce_marketplace_funds_transaction_page_access($transaction) {
  return commerce_marketplace_funds_transaction_access('view', $transaction);
}

/**
 * Title callback for generating the title of the Funds Transaction page.
 */
function commerce_marketplace_funds_transaction_title($transaction) {
  return t('Transaction @id', array('@id' => $transaction->transaction_id));
}

/**
 * URI callback for Marketplace Funds Account entities.
 */
function commerce_marketplace_funds_account_uri($account) {
  $owner_info = entity_get_info($account->owner_type);

  $owner = $owner_info['load hook']($account->owner_id);
  $entity_uri = $owner_info['uri callback']($owner);
  return array(
    'path' => $entity_uri['path'] . '/account',
  );
}

/**
 * URI callback for Marketplace Funds Transaction entities.
 */
function commerce_marketplace_funds_transaction_uri($transaction) {
  return array(
    'path' => 'funds/transaction/' . $transaction->transaction_id,
  );
}

/**
 * Fetch a Marketplace Funds Account entity.
 * @param int $account_id
 *   Integer specifying the account id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return stdClass or bool
 *   A fully-loaded $account object or FALSE if it cannot be loaded.
 */
function commerce_marketplace_funds_account_load($account_id = NULL, $reset = FALSE) {
  $account_ids = isset($account_id) ? array($account_id) : array();
  $account = commerce_marketplace_funds_account_load_multiple($account_ids, array(), $reset);
  return $account ? reset($account) : FALSE;
}

/**
 * Fetch a Marketplace Funds Account entity by its owner information.
 */
function commerce_marketplace_funds_account_load_by_owner($owner_type, $owner_id) {
  $account_id = db_select('commerce_marketplace_funds_account', 'a')
    ->condition('owner_type', $owner_type)->condition('owner_id', $owner_id)
    ->fields('a', array('account_id'))->execute()->fetchField();
  if ($account_id) {
    $account = commerce_marketplace_funds_account_load($account_id);
    return $account;
  }
  else {
    $account = new stdClass();
    $account->account_id = '';
    $account->owner_type = $owner_type;
    $account->owner_id = $owner_id;
    $account->created = $account->changed = REQUEST_TIME;
    $account->balance[LANGUAGE_NONE][0] = array(
      'amount' => 0,
      'currency_code' => commerce_default_currency(),
    );
    commerce_marketplace_funds_account_save($account);
    return $account;
  }
}


/**
 * Loads multiple Marketplace Funds Account entities.
 * @see commerce_marketplace_funds_account_load().
 */
function commerce_marketplace_funds_account_load_multiple($account_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('cmp_funds_account', $account_ids, $conditions, $reset);
}

/**
 * Fetch a Marketplace Funds Transaction entity.
 * @param int $transaction_id
 *   Integer specifying the transaction id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return stdClass or bool
 *   A fully-loaded $transaction object or FALSE if it cannot be loaded.
 */
function commerce_marketplace_funds_transaction_load($transaction_id = NULL, $reset = FALSE) {
  $transaction_ids = isset($transaction_id) ? array($transaction_id) : array();
  $transaction = commerce_marketplace_funds_transaction_load_multiple($transaction_ids, array(), $reset);
  return $transaction ? reset($transaction) : FALSE;
}

/**
 * Loads multiple Marketplace Funds Transaction entities.
 * @see commerce_marketplace_funds_account_load().
 */
function commerce_marketplace_funds_transaction_load_multiple($account_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('cmp_funds_transaction', $account_ids, $conditions, $reset);
}

/**
 * Implements hook_default_rules_configuration_alter().
 */
function commerce_marketplace_funds_default_rules_configuration_alter(&$rules) {
  foreach ($rules as $rule_name => $rule) {
    if (strpos($rule_name, 'commerce_shipping_method_') === 0) {
      if ($rule_name != 'commerce_shipping_method_commerce_marketplace_shipping_method') {
        $rules[$rule_name]->condition(rules_condition('data_is', array(
          'data:select' => 'commerce-order:type',
          'op' => '==',
          'value' => 'cmp_funds_deposit_order',
        ))->negate());
      }
    }
  }
}


/**
 * Adds required fields to the funds account entity bundles.
 */
function commerce_marketplace_funds_configure_account_entity($bundle) {
  $field = field_info_field('balance');
  if (!$field) {
    field_create_field(array(
      'field_name' => 'balance',
      'type' => 'commerce_price',
      'cardinality' => 1,
      'settings' => array(),
    ));
  }
  $instance = field_info_instance('cmp_funds_account', 'balance', $bundle);
  if (!$instance) {
    field_create_instance(array(
      'field_name' => 'balance',
      'entity_type' => 'cmp_funds_account',
      'bundle' => $bundle,
      'label' => t('Balance'),
      'widget' => array(
        'type' => 'commerce_price_full',
      ),
      'display' => array(
        'full' => array(
          'label' => 'above',
          'settings' => array(),
          'module' => 'commerce_price',
          'type' => 'commerce_price_formatted_amount',
          'weight' => 1,
        ),
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'module' => 'commerce_price',
          'type' => 'commerce_price_formatted_amount',
          'weight' => 1,
        ),
      ),
      'required' => TRUE,
    ));
  }
}

/**
 * Adds required fields to the funds transaction entity bundles.
 */
function commerce_marketplace_funds_configure_transaction_entity($bundle) {
  $field = field_info_field('amount');
  if (!$field) {
    field_create_field(array(
      'field_name' => 'amount',
      'type' => 'commerce_price',
      'cardinality' => 1,
      'settings' => array(),
    ));
  }
  $instance = field_info_instance('cmp_funds_transaction', 'amount', $bundle);
  if (!$instance) {
    field_create_instance(array(
      'field_name' => 'amount',
      'entity_type' => 'cmp_funds_transaction',
      'bundle' => $bundle,
      'label' => t('Amount'),
      'widget' => array(
        'type' => 'commerce_price_full',
      ),
      'display' => array(
        'full' => array(
          'label' => 'above',
          'settings' => array(),
          'weight' => 1,
          'module' => 'commerce_price',
          'type' => 'commerce_price_formatted_amount',
        ),
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'module' => 'commerce_price',
          'type' => 'commerce_price_formatted_amount',
          'weight' => 1,
        ),
      ),
      'required' => TRUE,
    ));
  }
  $field = field_info_field('notes');
  if (!$field) {
    field_create_field(array(
      'field_name' => 'notes',
      'type' => 'text_long',
      'cardinality' => 1,
      'settings' => array(),
    ));
  }
  $instance = field_info_instance('cmp_funds_transaction', 'notes', $bundle);
  if (!$instance) {
    field_create_instance(array(
      'bundle' => $bundle,
      'display' => array(
        'full' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'cmp_funds_transaction',
      'field_name' => 'notes',
      'label' => t('Notes'),
      'required' => FALSE,
      'settings' => array(),
      'widget' => array(
        'settings' => array(
          'rows' => 5,
        ),
        'type' => 'text_textarea',
      ),
    ));
  }
}

class CMPDummyEntity {
  public $entityType;
  public $bundle;

  public function __construct($entityType) {
    $this->entityType = $entityType;
  }
  public function entityType() {
    return $this->entityType;
  }

  public function setBundle($bundle) {
    $this->bundle = $bundle;
  }
  public function bundle() {
    return $this->bundle;
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_marketplace_funds_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Get the remote funds processor class name.
 */
function commerce_marketplace_funds_get_remote_processor() {
  $default_processor = variable_get('commerce_marketplace_funds_processor');
  if (!$default_processor) {
    return NULL;
  }
  $processors = &drupal_static(__FUNCTION__);
  if (empty($processors[$default_processor]['class'])) {
    $processors = module_invoke_all('commerce_marketplace_funds_processor_info');
    foreach (module_implements('commerce_marketplace_funds_processor_info_alter') as $module) {
      $func = $module . '_commerce_marketplace_funds_processor_info_alter';
      $func($processors);
    }
  }
  if (!empty($processors[$default_processor]['class'])) {
    if (file_exists($processors[$default_processor]['file'])) {
      require_once $processors[$default_processor]['file'];
      if (class_exists($processors[$default_processor]['class'])) {
        return $processors[$default_processor]['class'];
      }
    }
    return NULL;
  }
  return NULL;
}
