<?php

/**
 * @file
 *
 */

/**
 * Implements hook_entity_info().
 */
function commerce_marketplace_funds_withdraw_entity_info() {
  $info = array();

  $info['cmp_funds_withdraw_method'] = array(
    'label' => t('Withdraw Method'),
    'plural label' => t('Withdraw Methods'),
    'description' => t('Commerce Marketplace Funds Withdraw Methods.'),
    'entity class' => 'CommerceMarketplaceFundsWithdrawMethod',
    'controller class' => 'CommerceMarketplaceFundsWithdrawMethodController',
    'base table' => 'commerce_marketplace_funds_withdraw_method',
    'metadata controller class' => 'CommerceMarketplaceFundsWithdrawMethodMetadataController',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'commerce_marketplace_funds_withdraw_method_create',
    'access callback' => 'commerce_marketplace_funds_withdraw_method_access',
    'module' => 'commerce_marketplace_funds_withdraw',
    'load hook' => 'commerce_marketplace_funds_withdraw_method_load',
  );

  $info['cmp_funds_withdraw_method_type'] = array(
    'label' => t('Withdraw method type'),
    'plural label' => t('Withdraw method types'),
    'description' => t('Method types of Commerce Marketplace Withdraw Methods.'),
    'entity class' => 'CommerceMarketplaceFundsWithdrawMethodType',
    'controller class' => 'CommerceMarketplaceFundsWithdrawMethodTypeController',
    'base table' => 'commerce_marketplace_funds_withdraw_method_type',
    'fieldable' => FALSE,
    'bundle of' => 'cmp_funds_withdraw_method',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'commerce_marketplace_funds_withdraw_method_type_access',
    'module' => 'commerce_marketplace_funds_withdraw',
    'admin ui' => array(
      'path' => 'admin/commerce/marketplace_funds/withdraw',
      'file' => 'includes/commerce_marketplace_funds_withdraw.method_type.admin.inc',
      'controller class' => 'CommerceMarketplaceFundsWithdrawMethodTypeUIController',
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_marketplace_funds_withdraw_entity_info_alter(&$entity_info) {
  foreach (commerce_marketplace_funds_withdraw_get_types() as $type => $info) {
    $entity_info['cmp_funds_withdraw_method']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/commerce/marketplace_funds/withdraw/manage/%cmp_funds_withdraw_method_type',
        'real path' => 'admin/commerce/marketplace_funds/withdraw/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer cmp_funds_withdraw_method types'),
      ),
    );
  }

  $entity_info['cmp_funds_transaction']['bundles']['withdraw'] = array(
    'label' => t('Withdraw transaction'),
    'admin' => array(
      'path' => 'admin/commerce/marketplace_funds/transaction/withdraw/manage',
      'real path' => 'admin/commerce/marketplace_funds/transaction/withdraw/manage',
      'access arguments' => array('administer cmp_funds_transaction entities'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_marketplace_funds_withdraw_menu() {
  $items = array();
  $account_types = commerce_marketplace_funds_account_types();
  foreach ($account_types as $account_type => $account_label) {
    $account_uris = commerce_marketplace_funds_get_account_uris($account_type);
    foreach ($account_uris as $account_uri) {
      $owner_id_component = 1;
      foreach (explode('/', $account_uri) as $index => $component) {
        if (strpos($component, '%') === 0) {
          $owner_id_component = $index;
        }
      }
      $items[$account_uri . '/transaction/new/withdraw'] = array(
        'title' => 'Create withdraw request',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('commerce_marketplace_funds_new_withdraw_transaction_form', $account_type, $owner_id_component),
        'access callback' => 'commerce_marketplace_funds_new_transaction_page_access',
        'access arguments' => array($account_type, $owner_id_component, 'withdraw'),
        'file' => 'includes/commerce_marketplace_funds_withdraw.transaction.admin.inc',
        'type' => MENU_LOCAL_ACTION,
        'weight' => 1,
      );
    }
  }
  $wildcard = '%cmp_funds_withdraw_method';
  $items['withdraw_method/' . $wildcard] = array(
    'title callback' => 'commerce_marketplace_funds_withdraw_method_page_title',
    'title arguments' => array(1),
    'page callback' => 'commerce_marketplace_funds_withdraw_method_page_view',
    'page arguments' => array(1),
    'access callback' => 'commerce_marketplace_funds_withdraw_method_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  // Add menu items on for the funds account page.
  $account_types = commerce_marketplace_funds_account_types();
  foreach ($account_types as $account_type => $account_label) {
    // Get the account uri scheme = $account_uri.
    // Add these menu items:
    //   $account_uri/withdraw => withdraw methods (a table of available withdraw method types with add/edit links)
    //   $account_uri/withdraw/$type => configure/edit withdraw method of selected type for $account
    $account_uris = commerce_marketplace_funds_get_account_uris($account_type);
    foreach ($account_uris as $account_uri) {
      $owner_id_component = 1;
      foreach (explode('/', $account_uri) as $index => $component) {
        if (strpos($component, '%') === 0) {
          $owner_id_component = $index;
        }
      }
      $items[$account_uri . '/withdraw'] = array(
        'title' => 'Configure withdraw methods',
        'page callback' => 'commerce_marketplace_funds_withdraw_methods_overview_page',
        'page arguments' => array($account_type, $owner_id_component),
        'access callback' => 'commerce_marketplace_funds_account_withdraw_overview_access',
        'access arguments' => array($account_type, $owner_id_component),
        'type' => MENU_LOCAL_TASK,
        'file' => 'includes/commerce_marketplace_funds_withdraw.method.admin.inc',
        'file path' => drupal_get_path('module', 'commerce_marketplace_funds_withdraw'),
      );
      // node/%node/withdraw/%
      $withdraw_method_type_component = count(explode('/', $account_uri)) + 1;
      // % placeholder is the withdraw method type.
      $items[$account_uri . '/withdraw/%'] = array(
        'title callback' => 'commerce_marketplace_funds_withdraw_method_add_page_title',
        'title arguments' => array($withdraw_method_type_component),
        'page callback' => 'commerce_marketplace_funds_withdraw_method_form_wrapper',
        // @todo: send the account type as an argument.
        'page arguments' => array($withdraw_method_type_component, $account_type, $owner_id_component),
        'access callback' => 'commerce_marketplace_funds_withdraw_method_access',
        'access arguments' => array('edit', $withdraw_method_type_component, NULL, $account_type, $owner_id_component),
        'file' => 'includes/commerce_marketplace_funds_withdraw.method.admin.inc',
        'file path' => drupal_get_path('module', 'commerce_marketplace_funds_withdraw')
      );
    }
  }

  return $items;
}

/**
 * Implements hook_enable().
 */
function commerce_marketplace_funds_withdraw_enable() {
  commerce_marketplace_funds_configure_transaction_entity('withdraw');
  // Add entityreference field for selecting the withdraw method.
  $field = field_info_field('withdraw_method');
  if (!$field) {
    field_create_field(array(
      'field_name' => 'withdraw_method',
      'type' => 'entityreference',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'cmp_funds_withdraw_method',
      ),
    ));
  }
  $instance = field_info_instance('cmp_funds_transaction', 'withdraw_method', 'withdraw');
  if (!$instance) {
    field_create_instance(array(
      'field_name' => 'withdraw_method',
      'entity_type' => 'cmp_funds_transaction',
      'bundle' => 'withdraw',
      'label' => t('Withdraw method'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select',
      ),
    ));
  }
}

/**
 * Access callback for withdraw method overview page.
 */
function commerce_marketplace_funds_account_withdraw_overview_access($owner_type, $owner) {
  global $user;
  $owner_info = entity_get_info($owner_type);
  $account = commerce_marketplace_funds_account_load_by_owner($owner_type, $owner->{$owner_info['entity keys']['id']});
  if ($owner_type == 'commerce_store') {
    return commerce_store_access_user_access('access store withdraw methods overview page', $owner, $user);
  }

  return ($account->owner_id == $user->uid && user_access('view own account withdraw methods overview page'))
    || user_access('view any account withdraw methods overview page');
}

/**
 * Implements hook_permission().
 */
function commerce_marketplace_funds_withdraw_permission() {
  $perms = array(
    'administer cmp_funds_withdraw_method types' => array(
      'title' => t('Administer "Funds Account" entities'),
      'restrict' => TRUE,
    ),
    'view withdraw methods of any type' => array(
      'title' => t('View withdraw methods of any type'),
      'restrict' => TRUE,
    ),
    'create new withdraw methods of any type' => array(
      'title' => t('Create withdraw methods of any type'),
    ),
    'edit withdraw methods of any type' => array(
      'title' => t('Edit withdraw methods of any type'),
      'restrict' => TRUE,
    ),
    'delete withdraw methods of any type' => array(
      'title' => t('Delete withdraw methods of any type'),
      'restrict' => TRUE,
    ),
    'view own account withdraw methods overview page' => array(
      'title' => t('Access own account withdraw methods overview page'),
    ),
    'view any account withdraw methods overview page' => array(
      'title' => t('Access withdraw methods overview page of any account'),
    ),
  );

  $withdraw_method_entity_info = entity_get_info('cmp_funds_withdraw_method');
  foreach ($withdraw_method_entity_info['bundles'] as $bundle => $bundle_info) {
    $perms["view own $bundle withdraw methods"] = array(
      'title' => t('View own %bundle withdraw methods', array('%bundle' => $bundle_info['label'])),
    );
    $perms["view any $bundle withdraw method"] = array(
      'title' => t('View any %bundle withdraw method', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
    );
    $perms["create new $bundle withdraw methods"] = array(
      'title' => t('Create new %bundle withdraw methods', array('%bundle' => $bundle_info['label'])),
    );
    $perms["edit own $bundle withdraw methods"] = array(
      'title' => t('Edit own %bundle withdraw methods', array('%bundle' => $bundle_info['label'])),
    );
    $perms["edit any $bundle withdraw method"] = array(
      'title' => t('Edit any %bundle withdraw method', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
    );
    $perms["delete own $bundle withdraw methods"] = array(
      'title' => t('Delete own %bundle withdraw method', array('%bundle' => $bundle_info['label'])),
    );
    $perms["delete any $bundle withdraw method"] = array(
      'title' => t('Delete any %bundle withdraw method', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
    );
  }

  return $perms;
}

/**
 * Implements hook_commerce_store_access_permission().
 */
function commerce_marketplace_funds_withdraw_commerce_store_access_permission() {
  $perms = array(
    'edit store withdraw methods of any type' => array(
      'title' => t('Edit store withdraw methods of any type'),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    ),
    'delete store withdraw methods of any type' => array(
      'title' => t('Delete store withdraw methods of any type'),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    ),
    'access store withdraw methods overview page' => array(
      'title' => t('Access store\'s withdraw methods overview page'),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    ),
  );
  $entity_info = entity_get_info('cmp_funds_withdraw_method');
  foreach($entity_info['bundles'] as $bundle => $bundle_info) {
    $perms["view $bundle store withdraw method"] = array(
      'title' => t('View store\'s %bundle withdraw method', array('%bundle' => $bundle_info['label'])),
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE, COMMERCE_STORE_AUTHENTICATED_ROLE),
    );
    $perms["edit $bundle store withdraw method"] = array(
      'title' => t('Edit store\'s %bundle withdraw method', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    );
    $perms["delete $bundle store withdraw method"] = array(
      'title' => t('Edit store\'s %bundle withdraw method', array('%bundle' => $bundle_info['label'])),
      'restrict' => TRUE,
      'roles' => array(COMMERCE_STORE_ADMINISTRATOR_ROLE),
    );
  }
  return $perms;
}

function cmp_funds_withdraw_method_type_load($type) {
  return commerce_marketplace_funds_withdraw_method_type_load($type);
}

/**
 * Entity API access callback for withdraw method types.
 */
function commerce_marketplace_funds_withdraw_method_type_access($op, $type = NULL, $viewer = NULL) {
  return user_access('administer cmp_funds_withdraw_method types');
}

/**
 * Entity API access callback for withdraw methods.
 */
function commerce_marketplace_funds_withdraw_method_access($op, $method = NULL, $viewer = NULL, $owner_type = NULL, $owner = NULL) {
  if (!$viewer) {
    global $user;
    $viewer = $user;
  }
  $account = NULL;
  if ($method && !is_string($method)) {
    $account = $method->account_entity;
  }
  if (!$owner) {
    if ($account) {
      $owner = commerce_marketplace_funds_get_account_owner($account);
    }
  }

  if ($op == 'view') {
    // Is the account owner entity owned by the logged in user?
    if (!$method) {
      return user_access('view withdraw methods of any type');
    }
    $view_own = ($owner->uid == $viewer->uid && user_access("view own $method->type withdraw methods")) || ($owner->uid == $viewer->uid && user_access("view own $method->type withdraw methods"));
    $view_any = user_access("view any $method->type withdraw method") || user_access("view withdraw methods of any type");
    if ($view_own || $view_any) {
      return TRUE;
    }
    // Now check the store permissions to see if the user has enough permission to view the withdraw method.
    if ($owner_type == 'commerce_store') {
      // Does $user have permission to see the store's withdraw methods?
      if (commerce_store_access_user_access("view $method->type store withdraw method", $account, $viewer)) {
        return TRUE;
      }
    }
  }
  elseif ($op == 'update') {
    $update_own = $owner->uid == $viewer->uid && (user_access("edit own $method->type withdraw methods") || user_access('edit own withdraw methods of any type'));
    $update_any = user_access("edit any $method->type withdraw method") || user_access('edit withdraw methods of any type');
    if ($update_any || $update_own) {
      return TRUE;
    }

    if ($owner_type == 'commerce_store') {
      $update_type = commerce_store_access_user_access("edit $method->type store withdraw method", $account, $viewer);
      $update_any_type = commerce_store_access_user_access("edit store withdraw methods of any type", $account, $viewer);
      if ($update_any_type || $update_type) {
        return TRUE;
      }
    }
  }
  elseif ($op == 'create') {
    $add_new_type = user_access("create new $method withdraw methods");
    $add_new_any_type = user_access("create new withdraw methods of any type");
    if ($add_new_type || $add_new_any_type) {
      return TRUE;
    }
    if ($owner_type == 'commerce_store') {
      $update_type = commerce_store_access_user_access("edit $method store withdraw method", $account, $viewer);
      $update_any_type = commerce_store_access_user_access("edit store withdraw methods of any type", $account, $viewer);
      if ($update_any_type || $update_type) {
        return TRUE;
      }
    }
  }
  elseif ($op == 'delete') {
    $del_own = $owner->uid == $viewer->uid && user_access("delete own $method->type withdraw methods");
    $del_any = user_access("delete any $method->type withdraw method") || user_access("delete withdraw methods of any type");
    if ($del_own || $del_any) {
      return TRUE;
    }
    if ($owner_type == 'commerce_store') {
      $del_type = commerce_store_access_user_access("delete $method->type store withdraw method", $account, $viewer);
      $del_any_type = commerce_store_access_user_access("delete store withdraw methods of any type", $account, $viewer);
      if ($del_any_type || $del_type) {
        return TRUE;
      }
    }
  }
  elseif ($op == 'edit') {
    $type = is_string($method) ? $method : $method->type;
    $update_own = $owner->uid == $viewer->uid && (user_access("edit own $type withdraw methods") || user_access('edit own withdraw methods of any type'));
    $update_any = user_access("edit any $type withdraw method") || user_access('edit withdraw methods of any type');
    $add_new_type = user_access("create new $method withdraw methods");
    $add_new_any_type = user_access("create new withdraw methods of any type");
    if ($update_any || $update_own || $add_new_any_type || $add_new_type) {
      return TRUE;
    }

    if ($owner_type == 'commerce_store') {
      $update_type = commerce_store_access_user_access("edit $type store withdraw method", $account, $viewer);
      $update_any_type = commerce_store_access_user_access("edit store withdraw methods of any type", $account, $viewer);
      if ($update_any_type || $update_type) {
        return TRUE;
      }
    }
  }
  return FALSE;
}


/**
 * Gets an array of all withdraw method types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return CommerceMarketplaceFundsWithdrawMethodType[]
 *   Depending whether $type isset, an array of withdraw method types or a single one.
 */
function commerce_marketplace_funds_withdraw_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('cmp_funds_withdraw_method_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a withdraw method type by string.
 *
 * @param $type
 *   The machine-readable name of a withdraw method type to load.
 * @return
 *   A model type array or FALSE if $type does not exist.
 */
function commerce_marketplace_funds_withdraw_method_type_load($type) {
  return commerce_marketplace_funds_withdraw_get_types($type);
}

/**
 * Loads a single withdraw method object.
 */
function commerce_marketplace_funds_withdraw_method_load($method_id, $reset = FALSE) {
  $methods = commerce_marketplace_funds_withdraw_method_load_multiple(array($method_id), array(), $reset);
  return reset($methods);
}

/**
 * Load multiple withdraw methods.
 */
function commerce_marketplace_funds_withdraw_method_load_multiple($method_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('cmp_funds_withdraw_method', $method_ids, $conditions, $reset);
}

/**
 * Deletes a withdraw method.
 */
function commerce_marketplace_funds_withdraw_method_delete(CommerceMarketplaceFundsWithdrawMethod $method) {
  $method->delete();
}

/**
 * Delete multiple withdraw methods.
 *
 * @param $method_ids
 *   An array of model IDs.
 */
function commerce_marketplace_funds_withdraw_method_delete_multiple(array $method_ids) {
  entity_get_controller('cmp_funds_withdraw_method')->delete($method_ids);
}


/**
 * Create a withdraw method object.
 */
function commerce_marketplace_funds_withdraw_method_create($values = array()) {
  return entity_get_controller('cmp_funds_withdraw_method')->create($values);
}

/**
 * Saves a withdraw method to the database.
 *
 * @param $method
 *   The withdraw method object.
 */
function commerce_marketplace_funds_withdraw_method_save(CommerceMarketplaceFundsWithdrawMethod $method) {
  return $method->save();
}

/**
 * Saves a withdraw method type to the db.
 */
function commerce_marketplace_funds_withdraw_method_type_save(CommerceMarketplaceFundsWithdrawMethodType $type) {
  $type->save();
}

/**
 * Deletes a withdraw method type from the db.
 */
function commerce_marketplace_funds_withdraw_method_type_delete(CommerceMarketplaceFundsWithdrawMethodType $type) {
  $type->delete();
}

/**
 * URI callback for withdraw methods.
 */
function commerce_marketplace_funds_withdraw_method_uri(CommerceMarketplaceFundsWithdrawMethod $method){;
  $owner_info = entity_get_info($method->account->value()->owner_type);
  $owner = commerce_marketplace_funds_get_account_owner($method->account->value());
  $entity_uri = $owner_info['uri callback']($owner);

  return array('path' => $entity_uri['path'] . '/withdraw/methods/' . $method->id);
}


/**
 * Menu title callback for showing individual entities.
 */
function commerce_marketplace_funds_withdraw_method_page_title(CommerceMarketplaceFundsWithdrawMethod $method){
  return t('Withdraw method @id', array('@id' => $method->id));
}


/**
 * Sets up content to show an individual withdraw method.
 */
function commerce_marketplace_funds_withdraw_method_page_view($method, $view_mode = 'full') {
  $controller = entity_get_controller('cmp_funds_withdraw_method');
  $content = $controller->view(array($method->id => $method));
  return $content;
}

/**
 * Implement hook_theme().
 */
function commerce_marketplace_funds_withdraw_theme() {
  return array(
    'cmp_funds_withdraw_method_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/commerce_marketplace_funds_withdraw.method.admin.inc',
    ),
    'cmp_funds_withdraw_method' => array(
      'render element' => 'elements',
      'template' => 'cmp_funds_withdraw_method',
    ),
  );
}

/**
 * Withdraw method configuration page title callback.
 */
function commerce_marketplace_funds_withdraw_method_add_page_title($type) {
  $method_type = commerce_marketplace_funds_withdraw_get_types($type);
  return t('Configure @type withdraw method', array('@type' => $method_type->label));
}

/**
 * Implements hook_form_alter().
 */
function commerce_marketplace_funds_withdraw_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'commerce_marketplace_funds_new_withdraw_transaction_form') {
    if (!isset($form['from_account']['#value'])) {
      return;
    }
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'cmp_funds_withdraw_method')
      ->propertyCondition('account_id', $form['from_account']['#value'])->execute();
    $options = array();
    if (empty($results['cmp_funds_withdraw_method'])) {
      $options['_none'] = t('Please configure withdraw methods.');
    }
    else {
      foreach ($results['cmp_funds_withdraw_method'] as $id => $obj) {
        $type = commerce_marketplace_funds_withdraw_get_types($obj->type);
        $options[$id] = $type->label;
      }
    }
    $language_code = $form['withdraw_method']['#language'];
    $form['withdraw_method'][$language_code]['#options'] = $options;
  }
}
