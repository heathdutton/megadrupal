<?php
/**
 * @file
 * The ACK node module.
 */

/**
 * Implements hook_access_info().
 */
function ack_node_access_info() {
  // Declare support for controlling access to nodes.
  $info['node'] = array(
    'label' => t('Content'),
    'handlers' => array(),
    'permissions' => array(),
  );

  // Handlers for node properties.
  $info['node']['handlers']['ACKNodeAuthor'] = array(
    'label' => t('is author'),
    'realm types' => array('user'),
  );
  $info['node']['handlers']['ACKNodeSticky'] = array(
    'label' => t('is sticky'),
    'realm types' => array('boolean'),
  );

  // Handlers for list fields.
  if (module_exists('list')) {
    $info['node']['handlers']['ACKNodeList'] = array(
      'label' => t('the list field'),
      'realm types' => array('list_integer', 'list_float', 'list_text'),
    );
  }

  // Handlers for taxonomy.
  if (module_exists('taxonomy')) {
    $info['node']['handlers']['ACKNodeTaxonomyIndex'] = array(
      'label' => t('term association'),
      'realm types' => array('taxonomy_term'),
    );
    $info['node']['handlers']['ACKNodeTaxonomyTermReference'] = array(
      'label' => t('a term reference field'),
      'realm types' => array('taxonomy_term'),
    );
  }

  // List the permissions for which we are providing ACK compatibility.
  foreach (node_permissions_get_configured_types() as $type) {
    $perms = node_list_permissions($type);
    foreach ($perms as $perm => $description) {
      $info['node']['permissions'][$perm] = TRUE;
    }
  }

  return $info;
}

/**
 * Implements hook_node_access().
 */
function ack_node_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // ACK handler modules typically operate by denying access when the user lacks
  // global or realm permission to an object. If the user does have permission,
  // we simply ignore the access check and allow the normal controls to prevail.
  if (in_array($type, node_permissions_get_configured_types())) {
    switch ($op) {
      case 'create':
        // Ignore "create", which is handled by ack_node_form_node_form_alter()
        // because the node doesn't have realm memberships until it is saved.
        return NODE_ACCESS_IGNORE;

      case 'view':
        // We also ignore "view", which is handled by the node_access table.
        return NODE_ACCESS_IGNORE;

      case 'update':
        if (access_user_object_access("edit any $type content", 'node', $node, $account) || (access_user_object_access("edit own $type content", 'node', $node, $account) && ($account->uid == $node->uid))) {
          return NODE_ACCESS_IGNORE;
        }
        break;

      case 'delete':
        if (access_user_object_access("delete any $type content", 'node', $node, $account) || (access_user_object_access("delete own $type content", 'node', $node, $account) && ($account->uid == $node->uid))) {
          return NODE_ACCESS_IGNORE;
        }
        break;
    }
    // If we're still here, the user failed the access checks above, so deny.
    return NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ack_node_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $node = $form['#node'];
  $create = NULL;
  $delete = NULL;

  // Setting a value in a field used by a realm handler is essentially creating
  // a node in that realm.  Thus, we need to limit such form fields' options to
  // only those realms where the user has "create" permission, unless the user
  // has global create access, in which case they can create in any realm.
  if (!access_user_permission_global("create $node->type content")) {
    $create = access_user_permission_realms("create $node->type content");
  }
  if (isset($node->nid)) {
    // Unsetting a realm value on an existing node is essentially deleting the
    // node from the realm, so we need to know where the user has "delete".
    if (!access_user_permission_global("delete any $node->type content") && !(access_user_permission_global("delete own $node->type content") && ($user->uid == $node->uid))) {
      $delete = access_user_permission_realms("delete any $node->type content");
      if ($user->uid == $node->uid) {
        // Merge in the "delete own" realms.  Can't use array_merge_recursive(),
        // because it would destroy numeric keys, so do it with a loop.
        foreach (access_user_permission_realms("delete own $node->type content") as $scheme => $assigned) {
          foreach ($assigned as $key => $value) {
            $delete[$scheme][$key] = $value;
          }
        }
      }
    }
  }

  if (isset($create) || isset($delete)) {
    // Give each access scheme with a node handler the chance to alter the form.
    foreach (access_scheme_get_schemes() as $scheme) {
      if (isset($scheme->handlers['node'])) {
        if (isset($create)) {
          // The user doesn't have global create access, so if there isn't an
          // entry for a scheme, they have no access by that scheme, indicated
          // by an empty array.
          $scheme_create = isset($create[$scheme->scheme]) ? $create[$scheme->scheme] : array();
        }
        else {
          // The user does have global create, which we indicate with NULL.
          $scheme_create = NULL;
        }

        if (isset($delete)) {
          // As above, an empty array indicates no delete access in the scheme.
          $scheme_delete = isset($delete[$scheme->scheme]) ? $delete[$scheme->scheme] : array();
        }
        else {
          // NULL indicates global delete access.
          $scheme_delete = NULL;
        }

        $scheme->handlers['node']->formAlter($form, $form_state, $form_id, $scheme_create, $scheme_delete);
      }
    }
  }
}
