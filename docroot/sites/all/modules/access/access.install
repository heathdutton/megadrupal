<?php
/**
 * @file
 * Install, update, and uninstall functions for the access control kit module.
 */

/**
 * Implements hook_schema().
 */
function access_schema() {
  // The access grant (entity) table.
  $schema['access_grant'] = array(
    'description' => 'The base table for access grants. Each combination of uid, rid, and scheme must be unique.',
    'fields' => array(
      'gid' => array(
        'description' => 'The primary identifier for an access grant.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the user granted access.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'The {role}.rid of the role assigned by this grant.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'scheme' => array(
        'description' => 'The {access_scheme}.scheme of this grant.',
        'type' => 'varchar',
        'length' => 28,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('gid'),
    'unique keys' => array(
      'uid_rid_scheme' => array('uid', 'rid', 'scheme'),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'scheme' => array(array('scheme', 4)),
    ),
    'foreign keys' => array(
      'grant_user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'grant_role' => array(
        'table' => 'role',
        'columns' => array('rid' => 'rid'),
      ),
      'grant_scheme' => array(
        'table' => 'access_scheme',
        'columns' => array('scheme' => 'scheme'),
      ),
    ),
  );

  // The access scheme (bundle) table.
  $schema['access_scheme'] = array(
    'description' => 'Stores information about all defined {access_grant} schemes.',
    'fields' => array(
      'scheme' => array(
        'description' => 'The machine-readable name of this scheme.',
        'type' => 'varchar',
        'length' => 28,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this scheme.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'realm_type' => array(
        'description' => 'The realm type used in this scheme.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this access scheme.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('scheme'),
  );

  // The access handler table.
  $schema['access_handler'] = array(
    'description' => 'Attaches object access handlers to {access_scheme} schemes.',
    'fields' => array(
      'scheme' => array(
        'description' => 'The {access_scheme}.scheme to which this handler is attached.',
        'type' => 'varchar',
        'length' => 28,
        'not null' => TRUE,
        'default' => '',
      ),
      'object_type' => array(
        'description' => 'The type of Drupal object (e.g. node, taxonomy_term, etc.) that this handler manages. Only one handler is permitted per object type per scheme.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'handler' => array(
        'description' => 'The name of the access handler class.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'module' => array(
        'description' => 'The module that implements the handler.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'settings' => array(
        'description' => 'Serialized data containing the handler settings, as defined by the implementing module.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('scheme', 'object_type'),
    'foreign keys' => array(
      'handler_scheme' => array(
        'table' => 'access_scheme',
        'columns' => array('scheme' => 'scheme'),
      ),
    ),
    'indexes' => array(
      'scheme' => array(array('scheme', 4)),
    ),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 *
 * @see list_field_schema()
 */
function access_field_schema($field) {
  // This is basically the same as list_field_schema() from core's list module,
  // but with the type strings changed.  Unfortunately, we can't reuse list's
  // definitions because we need 'no_ui' and custom 'settings' on our fields.
  switch ($field['type']) {
    case 'access_text':
      $columns = array(
        'value' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      );
      break;
    case 'access_float':
      $columns = array(
        'value' => array(
          'type' => 'float',
          'not null' => FALSE,
        ),
      );
      break;
    case 'access_integer':
    case 'access_boolean':
      $columns = array(
        'value' => array(
          'type' => 'int',
          'not null' => FALSE,
        ),
      );
      break;
  }
  return array(
    'columns' => $columns,
    'indexes' => array(
      'value' => array('value'),
    ),
  );
}
