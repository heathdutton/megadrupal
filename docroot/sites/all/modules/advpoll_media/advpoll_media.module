<?php

/**
 * @file
 * Contains the main functions of Advanced Poll Media module.
 */

/*
 * - This module is based on : https://www.drupal.org/sandbox/xandeadx/1871070.
 */

/**
 * Implements hook_entity_info_alter().
 */
function advpoll_media_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes'] = array(
    'poll_choice_view' => array(
      'label' => t('Poll Choice Form'),
      'custom settings' => TRUE,
    ),
    'poll_results_view' => array(
      'label' => t('Poll Results'),
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function advpoll_media_field_widget_advpoll_write_in_form_alter(&$element, &$form_state, $context) {
  $default_value = advpoll_media_load($element['choice_id']['#default_value']);
  $element['file'] = array(
    '#type' => 'media',
    '#title' => t('Media'),
    '#default_value' => $default_value,
    '#upload_location' => 'public://advpoll/advpoll-media',
  );
}

/**
 * Implements hook_theme().
 */
function advpoll_media_theme($existing, $type, $theme, $path) {
  return array(
    // Theme image output.
    'advpoll_media' => array(
      'variables' => array(
        'fid' => NULL,
        'choice_text' => NULL,
      ),
    ),
    // Override / Add suggestion for advpoll choice form template.
    'advpoll_choice_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'advpoll_media') . '/templates',
      'template' => 'advpoll-choice-form',
    ),
    // Override / Add suggestion for advpoll bar template.
    'advpoll_bar' => array(
      'variables' => array(
        'votes' => 0,
        'voted' => 0,
        'file' => '',
        'nid' => NULL,
      ),
      'path' => drupal_get_path('module', 'advpoll_media') . '/templates',
      'template' => 'advpoll-bar',
    ),
    'advpoll_results' => array(
      'variables' => array(
        'bars' => NULL,
        'labels' => NULL,
        'rows' => NULL,
        'total' => 0,
        'voted' => NULL,
        'nid' => NULL,
        'cancel_form' => NULL,
      ),
      'path' => drupal_get_path('module', 'advpoll_media') . '/templates',
      'template' => 'advpoll-results',
    ),
  );
}

/**
 * Return image html.
 * 
 * @param variables
 *  theme variables
 *
 * @return file view (rendered)
 */
function theme_advpoll_media($variables) {

  if (!$variables['fid']) {
    return '';
  }
  else {
    $file = file_load($variables['fid']);
    $view = file_view_file($file, $variables['view']);
    return render($view);
  }
}

/**
 * Implements hook_node_update().
 */
function advpoll_media_node_update($node) {

  if ($node->type == 'advpoll') {
    advpoll_media_choices_save($node);
  }
}

/**
 * Implements hook_node_insert().
 */
function advpoll_media_node_insert($node) {

  if ($node->type == 'advpoll') {
    advpoll_media_choices_save($node);
  }
}

/**
 * Saves choices media file.
 * @param $node
 *  the node object
 */
function advpoll_media_choices_save($node) {
  $lang = advpoll_media_get_choices_lang($node);
  $new = array();

  foreach ($node->advpoll_choice[$lang] as $choice) {

    if ($choice['file']) {
      $new[$choice['choice_id']] = $choice['file'];
    }
  }
  $old = array();

  if (isset($node->original)) {

    foreach ($node->original->advpoll_choice[$lang] as $choice) {

      if ($choice['file']) {
        $old[$choice['choice_id']] = $choice['file'];
      }
    }
  }
  // Delete files that existed in the old node but do not exist in the new node.
  foreach ($old as $choice_id => $file) {

    if (!isset($new[$choice_id])) {
      advpoll_media_delete($choice_id);
    }
  }

  foreach ($new as $choice_id => $file) {
    // Delete files, that has changed in the new node.
    if (isset($old[$choice_id]) && $old[$choice_id] != $file) {
      advpoll_media_delete($choice_id);
    }
    // Add files, which were not in the old node.
    if (!isset($old[$choice_id])) {
      advpoll_media_add($node->nid, $choice_id, $file);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function advpoll_media_node_delete($node) {

  if ($node->type == 'advpoll') {
    $lang = advpoll_media_get_choices_lang($node);

    foreach ($node->advpoll_choice[$lang] as $choice) {
      advpoll_media_delete($choice['choice_id']);
    }
  }
}

/**
 * Implements hook_field_attach_load().
 */
function advpoll_media_field_attach_load($entity_type, $entities, $age, $options) {

  if ($entity_type == 'node') {
    // Find choice ids.
    $choice_ids = array();

    foreach ($entities as $node) {

      if ($node->type == 'advpoll') {
        $lang = advpoll_media_get_choices_lang($node);

        foreach ($node->advpoll_choice[$lang] as $choice) {
          $choice_ids[] = $choice['choice_id'];
        }
      }
    }
    // Add data to nodes.
    if ($choice_ids) {
      $images = advpoll_media_load_multiple($choice_ids);

      foreach ($entities as & $node) {

        if ($node->type == 'advpoll') {
          $lang = advpoll_media_get_choices_lang($node);

          foreach ($node->advpoll_choice[$lang] as & $choice) {
            $choice['file'] = isset($images[$choice['choice_id']]) ? $images[$choice['choice_id']] : 0;
          }
        }
      }
    }
  }
}

/**
 * Return choices language.
 * 
 * @param $node
 *  Node object
 * 
 * @return language code
 */
function advpoll_media_get_choices_lang($node) {
  $lang = $node->language;

  if (!isset($node->advpoll_choice[$lang])) {
    $lang = 'und';
  }
  return $lang;
}

/**
 * Return image fid by choice id.
 */
function advpoll_media_load($choice_id) {
  return db_select('advpoll_choice_media', 'aci')->fields('aci', array(
      'fid',
    ))->condition('choice_id', $choice_id)->execute()->fetchField();
}

/**
 * Return the text of choice id.
 * 
 * @param $choice_id
 *  The id of current choice
 * 
 * @return array of aci results
 * 
 */
function advpoll_media_choice_text($choice_id) {
  return db_select('field_data_advpoll_choice', 'aci')->fields('aci', array(
      'advpoll_choice_choice',
    ))->condition('advpoll_choice_choice_id', $choice_id)->execute()->fetchField();
}

/**
 * Retrieves the fid for the corresponding choice text.
 * 
 * @param $text
 *  string with vote label
 *
 * @return file id
 */
function advpoll_media_choice_fid($text) {
  return db_select('advpoll_choice_media', 'fid')->fields('fid', array(
      'fid',
    ))->condition('choice_text', $text)->execute()->fetchField();
}

/**
 * Retrieves multiple fids from database.
 * 
 * @param $choice_ids
 *  choice ids
 * @return array of database records
 */
function advpoll_media_load_multiple($choice_ids) {
  return db_select('advpoll_choice_media', 'aci')->fields('aci', array(
      'choice_id',
      'fid',
    ))->condition('choice_id', $choice_ids, 'IN')->execute()->fetchAllKeyed();
}

/**
 * Delete image file and relation by choice id.
 * 
 * @param $choice_id
 *  The choice's id
 */
function advpoll_media_delete($choice_id) {
  $image = advpoll_media_load($choice_id);

  if ($image) {
    // Delete file.
    $file = file_load($image);
    file_usage_delete($file, 'advpoll_media');
    file_delete($file);
    // Delete relation.
    db_delete('advpoll_choice_media')->condition('choice_id', $choice_id)->execute();
  }
}

/**
 * Change file status and add relation.
 * 
 * @param $nid
 *  Node id
 * 
 * @param $choice_id
 *  The choice's id
 * 
 * @param $media
 *  media id (file id)
 */
function advpoll_media_add($nid, $choice_id, $media) {

  if (!$media || !$choice_id) {
    return FALSE;
  }
  $choice_text = advpoll_media_choice_text($choice_id);
  db_insert('advpoll_choice_media')->fields(array(
      'choice_id' => $choice_id,
      'choice_text' => $choice_text,
      'fid' => $media,
    ))->execute();
  $file = file_load($media);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  file_usage_add($file, 'advpoll_media', 'node', $nid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advpoll_media_form_advpoll_choice_form_alter(&$form, &$form_state, $form_id) {
  // Add choice images to form, designed to be accessed and themed.
  // Image keys correspond to choice keys.
  // Get images for this poll.
  $node = $form_state['build_info']['args'][0];
  $lang = advpoll_media_get_choices_lang($node);
  $media = array();

  foreach ($node->advpoll_choice[$lang] as $choice) {

    if ($choice['file']) {
      $media[$choice['choice']] = $choice['file'];
    }
  }
  // Return if we don't have any images set.
  if (empty($media)) {
    return;
  }
  // Alter form.
  foreach (element_children($form) as $key) {

    if ($form[$key]['#type'] == 'radios' || $form[$key]['#type'] == 'checkboxes') {

      foreach ($form[$key]['#options'] as $option_value => & $option_text) {

        if (isset($media[$option_value])) {

          if ($option_value != 'write-in') {
            $form['media'][$option_value]['#markup'] = theme('advpoll_media', array(
                'fid' => $media[$option_value],
                'view' => 'poll_results_view',
              ));
          }
        }
      }
    }
  }
  return $form;
}

/**
 * Assign the elements of the form to variables.
 */
function template_preprocess_advpoll_choice_form(&$variables) {
  $hidden = array();
  // Provide variables named after form keys so themers can print
  // each element independently.
  foreach (element_children($variables['form']) as $key) {
    $type = isset($variables['form'][$key]['#type']) ? $variables['form'][$key]['#type'] : '';
    $new_key = $key;

    if ($type == 'radios' || $type == 'checkboxes') {
      $new_key = 'choices';
    }

    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form'][$key]);
    }
    elseif (element_children($variables['form'][$key])) {

      foreach (element_children($variables['form'][$key]) as $child_key) {
        $variables[$new_key][$child_key] = drupal_render($variables['form'][$key][$child_key]);
      }
    }
    else {
      $variables[$new_key] = drupal_render($variables['form'][$key]);
    }
  }
  // Hidden form elements have no value to themers. No need for separation.
  $variables['hidden'] = implode($hidden);
}

/**
 * Preprocess function for advpoll-bar.tpl.php.
 */
function advpoll_media_preprocess_advpoll_bar(&$vars) {
  $fid = advpoll_media_choice_fid($vars['title']);
  $vars['media'] = theme('advpoll_media', array(
      'fid' => $fid,
      'view' => 'poll_results_view',
    ));
}
