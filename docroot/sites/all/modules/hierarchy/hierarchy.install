<?php

/**
 * @file
 * Install, update, and uninstall functions for the hierarchy module.
 */

/**
 * Implements hook_uninstall().
 */
function hierarchy_uninstall() {
  // Bypass entity_load() as we cannot use it here.
  foreach (db_select('hierarchy_type', 'ht')->fields('ht')->execute()->fetchAllAssoc('type') as $name => $type) {
    field_attach_delete_bundle('hierarchy', $name);
  }
}

/**
 * Implements hook_schema().
 */
function hierarchy_schema() {
  $schema['hierarchy_type'] = array(
    'description' => 'Stores information about hierarchy types.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for the hierarchy type.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The machine-readable name of of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Description of this type.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'uuid' => array(
        'type' => 'char',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Universally Unique Identifier.',
      ),
      'entity_type' => array(
        'description' => 'The entity type of hierarchy items (NULL for multiple types).',
        'type' => 'varchar',
        'length' => 32,
      ),
      'is_unique' => array(
        'description' => 'Hierarchy uniqueness (singular or multiple).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'is_ordered' => array(
        'description' => 'Hierarchy ordering (hierarchy items are weighted).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'data' => array(
        'description' => 'Serialized array with general data.',
        'type' => 'text',
        'serialize' => TRUE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
      'uuid' => array('uuid'),
    ),
  );

  $schema['hierarchy'] = array(
    'description' => 'The base table for hierarchies.',
    'fields' => array(
      'hid' => array(
        'description' => 'The Unique ID of the hierarchy.',
        'type' => 'serial',
        'unsigned' => TRUE,
      ),
      'type' => array(
        'description' => 'Hierarchy type (reference to {hierarchy_type}.type).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the hierarchy.',
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'default' => '',
      ),
      'uuid' => array(
        'type' => 'char',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Universally Unique Identifier.',
      ),
      'uid' => array(
        'description' => 'The user that created the hierarchy.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp when the hierarchy was created.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'data' => array(
        'description' => 'Serialized array with general data.',
        'type' => 'text',
        'serialize' => TRUE,
        'size' => 'big',
      ),
    ),
    'foreign keys' => array(
      'hierarchy_type' => array(
        'table' => 'hierarchy_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('hid'),
    'indexes' => array(
      'type' => array('type'),
      'uuid' => array('uuid'),
    ),
  );

  $schema['hierarchy_relation'] = array(
    'description' => 'The base table for hierarchy relations.',
    'fields' => array(
      'rid' => array(
        'description' => 'The Unique ID of the hierarchy relation.',
        'type' => 'serial',
        'unsigned' => TRUE,
      ),
      'field_name' => array(
        'description' => 'The name of the hierarchy position field on the host entity.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'default',
      ),
      'weight' => array(
        'description' => 'The weight of item among its siblings.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('rid'),
  );

  $schema['hierarchy_reachable'] = array(
    'description' => 'Stores reachable pairs of the hierarchy graph.',
    'fields' => array(
      'hid' => array(
        'description' => 'The ID of the hierarchy.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language' => array(
        'description' => 'The {languages}.language of this directed path.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'ancestor_entity_type' => array(
        'description' => 'The entity type of ancestor vertex.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'ancestor_entity_id' => array(
        'description' => 'The entity ID of ancestor vertex.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ancestor_is_source' => array(
        'description' => 'Ancestor vertex is the source of the directed path.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'descendant_entity_type' => array(
        'description' => 'The entity type of descendant vertex.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'descendant_entity_id' => array(
        'description' => 'The entity ID of descendant vertex.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'descendant_is_sink' => array(
        'description' => 'Descendant vertex is the sink of the directed path.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'descendant_weight' => array(
        'description' => 'Weight of descendant vertex among its siblings.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'distance' => array(
        'description' => 'The distance between ancestor and descendant.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'hierarchy' => array(
        'table' => 'hierarchy',
        'columns' => array('hid' => 'hid'),
      ),
    ),
    'primary key' => array(
      'hid',
      'language',
      'ancestor_entity_type',
      'ancestor_entity_id',
      'descendant_entity_type',
      'descendant_entity_id',
    ),
    'indexes' => array(
      'ancestor' => array(
        'hid',
        'ancestor_entity_type',
        'ancestor_entity_id',
      ),
      'descendant' => array(
        'hid',
        'descendant_entity_type',
        'descendant_entity_id',
      ),
      // @todo Add more indexes.
    ),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function hierarchy_field_schema($field) {
  $schema = array();

  switch ($field['type']) {
    case 'hierarchy_position':
      $schema = array(
        'columns' => array(
          'hid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
          ),
          'parent_type' => array(
            'type' => 'varchar',
            'length' => 32,
          ),
          'parent_id' => array(
            'type' => 'int',
            'unsigned' => TRUE,
          ),
          'relation_id' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
          ),
        ),
        'indexes' => array(
          'parent' => array('hid', 'parent_type', 'parent_id'),
          'relation' => array('relation_id'),
        ),
        'foreign keys' => array(
          'hid' => array(
            'table' => 'hierarchy',
            'columns' => array('hid' => 'hid'),
          ),
        ),
      );
      break;
  }

  return $schema;
}
