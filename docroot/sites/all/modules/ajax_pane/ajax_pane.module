<?php

/**
 * @file
 * ajax_pane.module
 */

/**
 * CTools api version.
 */
define('AJAX_PANE_PANELS_REQUIRED_CTOOLS_API', '1.7.2');

/**
 * Implements hook_menu().
 */
function ajax_pane_menu() {
  return array(
    'ajax-pane/get-pane/%/%' => array(
      'title' => 'AJAX pane handler',
      'page callback' => 'ajax_pane_panels_pane_handler',
      'page arguments' => array(2, 3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ajax_pane_ctools_plugin_directory($module, $plugin) {
  // Safety: go away if CTools is not at an appropriate version.
  if (!module_invoke('ctools', 'api_version', AJAX_PANE_PANELS_REQUIRED_CTOOLS_API)) {
    return;
  }

  if ($module == 'page_manager' || $module == 'panels' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Menu handler to serve individual panel-panes via AJAX.
 *
 * If the pane uses context, the task_name, context_string and q variables will
 * be set.
 */
function ajax_pane_panels_pane_handler($display_id, $pane_id, $task_name = NULL, $context_string = NULL, $request_q = '', $display_args) {

  ctools_include('plugins', 'panels');
  ctools_include('content');

  $context_args = array();
  if (!empty($request_q)) {
    $context_args = ajax_pane_decode_query($request_q);
  }

  $display = panels_load_display($display_id);
  // This is display arguments, that must be passed to the view.
  $args = ajax_pane_decode_query($display_args);
  if (!is_null($task_name)) {
    // Get the context for this pane.
    list($args, $contexts) = ajax_pane_panels_get_task_context($task_name, $args);

    $display->context = $contexts;
    $display->args = $args;
  }

  $pane = $display->content[$pane_id];

  // Set flag so that we don't rewrite content.
  $pane->ajax_rendering = TRUE;
  $renderer = panels_get_renderer_handler($display->renderer, $display);

  $variables = array(
    'content' => $renderer->render_pane_content($pane),
    'pane' => $pane,
    'display' => $display,
  );

  echo theme('panels_pane', $variables);

  die();
}

/**
 * Decodes a serialized query string.
 *
 * Also sets $_GET and $_REQUEST variables.
 *
 * @param string $query
 *   A query string that is serialized encoded and base64 encoded.
 *
 * @return array
 *   The decoded query array.
 */
function ajax_pane_decode_query($query) {
  $query = unserialize(base64_decode($query));
  if ($query) {
    foreach ($query as $name => $value) {
      $_GET[$name] = $value;
      $_REQUEST[$name] = $value;
    }
  }
  return $query;
}


/**
 * Implements hook_panels_pane_content_alter().
 */
function ajax_pane_panels_pane_content_alter($content, $pane, $args, $context) {
  // Bail out if it's not handled by AJAX Pane.
  if (empty($pane->cache) || $pane->cache['method'] != 'ajax_pane') {
    return;
  }

  // Don't rewrite content. This is the ajax call.
  if (!empty($pane->ajax_rendering)) {
    return;
  }

  $display = panels_get_current_page_display();
  $display_args = $display->args;

  // The cache-key variable is set by the panel-context render function.
  list($context, $task_name, $handler_name) = explode(':', $display->cache_key);

  // Build the esi tag.
  $url = "ajax-pane/get-pane/{$pane->did}/{$pane->pid}";
  if (array_key_exists('context', $pane->configuration)) {
    // Add the page-manager task name.
    $url .= '/' . $task_name;
    // Add the name of the context which is supplied to this pane.
    $url .= '/' . $pane->configuration['context'];
  }
  else {
    // Add dummy strings so I keep the same order in the parser.
    // Add the page-manager task name.
    $url .= '/n';
    // Add the name of the context which is supplied to this pane.
    $url .= '/n';
  }

  $query_key = base64_encode(serialize($_GET));
  if (!empty($query_key)) {
    $url .= '/' . $query_key;
  }
  else {
    $url .= '/n';
  }

  $args_key = base64_encode(serialize($display_args));
  if (!empty($args_key)) {
    $url .= '/' . $args_key;
  }

  $url = url($url, array('query' => array('destination' => url($_GET['q']), 'redirect' => url($_GET['q']))));
  $id = uniqid('ajax-pane-' . $pane->pid . '-');

  drupal_add_js(drupal_get_path('module', 'ajax_pane') . '/js/ajax_pane.js');

  unset($content->title);

  $content->content = '<div id="' . $id . '" class="ajax-pane" src="' . $url . '">&nbsp;</div>';

  $content->use_ajax_render = TRUE;
}

/**
 * Looks up the menu handler for a URL, and provides the correct contexts.
 *
 * Each of the panel task plugins provides a default context based on the menu
 * path.
 */
function ajax_pane_panels_get_task_context($task_name, $args) {
  $task_id = page_manager_get_task_id($task_name);
  $task = page_manager_get_task($task_id[0]);

  if (is_array($task)) {
    $subtask = page_manager_page_subtask($task[0], $task_id[1]);
  }
  else {
    $subtask = page_manager_page_subtask($task, $task_id[1]);
  }

  // Invoke the module's hook_esi_get_context_arguments to get the context
  // provided by that task.
  $context_arguments = module_invoke($task['module'], 'ajax_pane_get_context_arguments', $task['name']);
  $context_arguments = array_merge((array)$context_arguments,$args);

  // Parse the arguments into context objects.
  ctools_include('context');
  ctools_include('context-task-handler');
  $contexts = ctools_context_handler_get_task_contexts($task, $subtask, $context_arguments);

  return array($context_arguments, $contexts);
}

/**
 * Implements hook_ajax_pane_get_context_arguments().
 *
 * On behalf implementation of Ajax panes api for page_manager.module.
 */
function page_manager_ajax_pane_get_context_arguments($task_name) {
  switch ($task_name) {
    // The blog, poll, and contact_site tasks don't provide default context.
    case 'blog':
    case 'poll':
    case 'contact_site':
      return array();

    // The blog_user, and contact_user tasks provide a user-object.
    case 'blog_user':
    case 'contact_user':
      $uid = arg(1);
      $account = user_load($uid);
      return array($account);

    // The comment_reply task provide a node object and a comment CID.
    case 'comment_reply':
      // Path is comment/reply/%node
      $nid = arg(2);
      $pid = arg(3);
      $node = node_load($nid);
      return array($node, $pid);

    // The node_edit and node_view tasks provide a node object.
    case 'node_edit':
    case 'node_view':
      $nid = arg(1);
      $node = node_load($nid);
      return array($nid);

    case 'search':
      // @todo return array($keys);
    case 'term_view':
      // @todo return array($terms, $depth);
  }
}
