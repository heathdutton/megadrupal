<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_libraries_info()
 */
function google_checkout_libraries_info() {
  return array(
    'google_checkout' => array(
      'title' => 'Google checkout PHP',
      'vendor url' => 'http://code.google.com/apis/checkout/developer',
      'download url' => 'http://code.google.com/p/google-checkout-php-sample-code/downloads/list',
      'path' => 'library',
      'version arguments' => array(
        'file' => 'CHANGELOG',
        'pattern' => '/^v([\d.]+)/m',
      ),
    ),
  );
}

/**
 * Implements hook_requirements()
 */
function google_checkout_requirements() {
  $t = get_t();
  $requirements = array();

  $info = libraries_load('google_checkout');
  if (!$info['installed']) {
    $requirements['google_checkout'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('Google checkout PHP'),
      'value' => $t('Failed to load the Google checkout PHP'),
      'description' => $t('Please make sure the Google checkout PHP library is installed in the libraries directory. Use the drush make file for easy installation.'),
    );
  }
  else {
    $requirements['google_checkout'] = array(
      'severity' => REQUIREMENT_INFO,
      'title' => $t('Google checkout PHP'),
      'value' => $info['version'],
    );
  }

  return $requirements;
}

/**
 * Implements hook_menu()
 */
function google_checkout_menu() {
  $items = array();
  $items['google_checkout/%'] = array(
    'page callback' => 'google_checkout_request',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Handle incoming request from Google Checkout.
 *
 * @param $module
 *   The name of the module the incoming request should be mapped to.
 */
function google_checkout_request($module) {
  if (module_exists($module) && function_exists($module . '_google_checkout_request')) {
    // Load up request XML and parse using SimpleXML.
    $root = simplexml_load_string(file_get_contents("php://input"));
    $serial_number = (string) $root['serial-number'];

    // Allow module to handle request.
    module_invoke($module, 'google_checkout_request', $root->getName(), $root, $serial_number);

    // Send acknowledgement response.
    google_checkout_response_init()->SendAck($serial_number, FALSE);
  }
  else {
    watchdog('google_checkout', 'Ignored Google Checkout response due to invalid module @module.', array('@module' => $module), WATCHDOG_ERROR);
  }
  exit; // Ensure Drupal does not generate a page.
}

/**
 * Load a google checkout library file.
 *
 * For example, loading the googlecart.php library file would look as such.
 * @code
 *   google_checkout_load_include('cart');
 * @endcode
 *
 * @param $include
 *   The name of a library file to include, without the .php suffix.
 * @param $prefix
 *   (Optional) A prefix to append to the $include parameter.
 */
function google_checkout_load_include($include, $prefix = 'google') {
  if ($prefix) $include = $prefix . $include;
  require_once libraries_get_path('google_checkout') . "/library/$include.php";
}

/**
 * Initialize a GoogleCart object using Drupal variables.
 *
 * @param $currency
 *   (Optional) Override the currency variable.
 * @return
 *   An initialized GoogleCart object.
 */
function google_checkout_cart_init($currency = NULL) {
  google_checkout_load_include('cart');
  return new GoogleCart(variable_get('google_checkout_merchant_id', ''),
    variable_get('google_checkout_merchant_key', ''),
    variable_get('google_checkout_server_type', 'production'),
    $currency ? $currency : variable_get('google_checkout_currency', 'USD'));
}

/**
 * Invoke CheckoutServer2Server() on a cart and log errors.
 *
 * @param $cart
 *   A GoogleCart object.
 */
function google_checkout_cart_redirect(GoogleCart $cart) {
  list($status, $error) = @$cart->CheckoutServer2Server();

  // If the code reaches this point then an error has occured.
  drupal_set_message(t('An error has occured, the site administrators have been notified.'), 'error');
  watchdog('conduit_subscription', 'Failed to communicate with Google Checkout server: [@status] @error.', array('@status' => $status, '@error' => $error), WATCHDOG_CRITICAL);
}

/**
 * Initialize a GoogleResponse object using Drupal variables.
 *
 * @return
 *   An initialized GoogleResponse object.
 */
function google_checkout_response_init() {
  google_checkout_load_include('response');
  return new GoogleResponse(variable_get('google_checkout_merchant_id', ''), variable_get('google_checkout_merchant_key', ''));
}

/**
 * Initialize a GoogleRequest object using Drupal variables.
 *
 * @param $currency
 *   (Optional) Override the currency variable.
 * @return
 *   An initialized GoogleRequest object.
 */
function google_checkout_request_init($currency = NULL) {
  google_checkout_load_include('request');
  return new GoogleRequest(variable_get('google_checkout_merchant_id', ''),
    variable_get('google_checkout_merchant_key', ''),
    variable_get('google_checkout_server_type', 'production'),
    $currency ? $currency : variable_get('google_checkout_currency', 'USD'));
}
