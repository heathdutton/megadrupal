<?php

/**
 * @file
 * Simpletests for the cd_civicrm module.
 */

class cdCiviCRMWebTestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo() for information
   */
  public static function getInfo() {
    return array(
      'name' => t('CiviCRM Congressional Districts tests'),
      'description' => t('Test queuing, dequeing, and data fetching.'),
      'group' => 'CiviCRM Congressional Districts',
    );
  }

  /**
   * SimpleTest core method: code run before each and every test method.
   */
  function setUp() {

    // This is a PITA.  We need to install the required cd_sunlight module,
    // but if we try to do the same with CiviCRM we get bizzaro errors with block queries.
    // We need to install ourself, but doing so will invoke the dependencies (CiviCRM).
    // So we need to manually install.
    parent::setUp(array('cd_sunlight'));
    module_enable(array('cd_civicrm'), FALSE);

    // Turn CiviCRM geocoding off so that this doesn't fire when we process the queue.
    variable_set('cd_civicrm_geocoding_off', TRUE);
    _cd_civicrm_geocode_set();

    // Copy the other required variables.  Don't prefix so that we opperate on the original table.
    $this->_variable_orginal_set('cd_sunlight_api_key');
    $this->_variable_orginal_set('cd_civicrm_cd');
    $this->_variable_orginal_set('cd_civicrm_cd_override');

  }

  /**
   * Create new contact, it should be queued for lookup.
   * Dequeue and test.
   * Edit the contact, it should be queued for lookup.
   * Process the queue, it should have the correct CD retrieved.
   */
  function testCDCiviCRM() {

    // Setup CiviCRM
    if (!function_exists('civicrm_initialize') || !civicrm_initialize()) {
      $this->fail('CiviCRM does not appear to be setup correctly.');
      return;
    }
    $include_result = include('api/api.php');
    if ($include_result === FALSE) {
      $this->fail('The CiviCRM Contact API could not be included.');
      return;
    }

    // Create the contact.
    $contact_parameters = array(
      'version' => '3',
      'check_permissions' => FALSE,
      'dupe_check' => FALSE,
      'first_name' => 'Simpletest test',
      'last_name' => 'Simpletest test',
      'email' => 'simpletest@example.org',
      'contact_type' => 'Individual',
      'address' => array(
        1 => array(
          'location_type_id' => 1,
          'is_primary' => TRUE,
          'postal_code' => '00501',
          'country_id' => CD_CIVICRM_US_COUNTRY_ID,
        ),
      ),
    );
    $result = civicrm_api('Contact', 'create', $contact_parameters);
    if ($result['is_error']) {
      $this->fail('A CiviCRM contact could not be created.  This might happen if you ' .
        'have non-standard required fields or other restrictions on contacts.' .
        $this->_var_export($contact_parameters, TRUE) . $this->_var_export($contact, TRUE));
      return;
    }

    // Test that it was created correctly.
    $contact_search = array(
      'version' => '3',
      'contact_id' => $result['id'],
      'id' => $result['id'],
      'return' => 'postal_code,country,contact_type,' . CD_CIVICRM_CD,
    );
    $contact = _cd_civicrm_contact_get($contact_search);
    $this->assertEqual($contact['postal_code'], '00501', 'A CiviCRM contact simpletest@example.org was created.');
    $this->verbose(
      '$contact_parameters: ' . $this->_var_export($contact_parameters, TRUE) .
      '$contact: ' . $this->_var_export($contact, TRUE)
    );

    // Test that it was enqueued.
    $this->assertTrue($this->_checkQueue($contact['contact_id']), 'Contact enqueued when created.');

    // Process and test.
    $this->_processQueue();
    $this->assertFalse($this->_checkQueue($contact['contact_id']), 'Contact dequeued when queue processed.');
    $contact = _cd_civicrm_contact_get($contact_search);
    $this->assertEqual($contact[CD_CIVICRM_CD], 'NY1', 'Contact CD is ' . $contact[CD_CIVICRM_CD]);
    $this->verbose($this->_var_export($contact_search, TRUE) . $this->_var_export($contact, TRUE));

    // Edit the contact.
    $contact_modified_parameters = array(
      'version' => '3',
      'check_permissions' => FALSE,
      'dupe_check' => FALSE,
      'contact_id' => $contact['contact_id'],
      'id' => $contact['contact_id'],
      'contact_type' => 'Individual',
      'address' => array(
        1 => array(
          'location_type_id' => 1,
          'is_primary' => TRUE,
          'postal_code' => '12345',
        ),
      ),
    );
    $result = civicrm_api('Contact', 'update', $contact_modified_parameters);
    if ($result['is_error']) {
      $this->fail('The CiviCRM contact could not be edited: ' .
        $this->_var_export($contact_modified_parameters, TRUE) .
        $this->_var_export($result, TRUE));
      return;
    }

    // We should have the new postal code.
    $contact = _cd_civicrm_contact_get($contact_search);
    $this->assertEqual($contact['postal_code'], '12345', 'CiviCRM contact simpletest@example.org was edited.');
    $this->verbose(
      '$contact_search: ' . $this->_var_export($contact_search, TRUE) .
      '$contact: ' . $this->_var_export($contact, TRUE) .
      '$contact_modified_parameters: ' . $this->_var_export($contact_modified_parameters, TRUE) .
      '$result: ' . $this->_var_export($result, TRUE));

    // Editing the postal code should re-enqueue the contact.
    $this->assertTrue($this->_checkQueue($contact['contact_id']), 'Contact enqueued when edited');

    // Process the queue, our contact should be processed.
    $this->_processQueue();
    $this->assertFalse($this->_checkQueue($contact['contact_id']), 'Contact dequeued when queue processed.');
    $contact = _cd_civicrm_contact_get($contact_search);
    $this->assertEqual($contact[CD_CIVICRM_CD], 'NY21', 'Contact CD is ' . $contact[CD_CIVICRM_CD]);
    $this->verbose(
      '$contact_search: ' . $this->_var_export($contact_search, TRUE) .
      '$contact: ' . $this->_var_export($contact, TRUE));

    // Give the contact a bogus Zip code.
    $contact_modified_parameters = array(
      'version' => '3',
      'check_permissions' => FALSE,
      'dupe_check' => FALSE,
      'contact_id' => $contact['contact_id'],
      'id' => $contact['contact_id'],
      'contact_type' => 'Individual',
      'address' => array(
        1 => array(
          'location_type_id' => 1,
          'is_primary' => TRUE,
          'postal_code' => '00000',
        ),
      ),
    );
    $result = civicrm_api('Contact', 'update', $contact_modified_parameters);
    if ($result['is_error']) {
      $this->fail('The CiviCRM contact could not be edited: ' .
        $this->_var_export($contact_modified_parameters, TRUE) .
        $this->_var_export($result, TRUE));
      return;
    }

    // We should have the new postal code.
    $contact = _cd_civicrm_contact_get($contact_search);
    $this->assertEqual($contact['postal_code'], '00000', 'CiviCRM contact simpletest@example.org was edited.');
    $this->verbose(
      '$contact_search: ' . $this->_var_export($contact_search, TRUE) .
      '$contact: ' . $this->_var_export($contact, TRUE) .
      '$contact_modified_parameters: ' . $this->_var_export($contact_modified_parameters, TRUE) .
      '$contact_modified: ' . $this->_var_export($result, TRUE));

    // Editing the postal code should re-enqueue the contact.
    $this->assertTrue($this->_checkQueue($contact['contact_id']), 'Contact enqueued when edited');

    // Process the queue, our contact should be processed.
    $this->_processQueue();
    $this->assertFalse($this->_checkQueue($contact['contact_id']), 'Contact dequeued when queue processed.');
    $contact = _cd_civicrm_contact_get($contact_search);
    // The old CD should remain in place.
    $this->assertEqual($contact[CD_CIVICRM_CD], 'NY21', 'Contact CD is ' . $contact[CD_CIVICRM_CD]);
    $this->verbose(
      '$contact_search: ' . $this->_var_export($contact_search, TRUE) .
      '$contact: ' . $this->_var_export($contact, TRUE));

    // Give the contact a bogus Zip code and remove the old CD.
    $contact_modified_parameters = array(
      'version' => '3',
      'check_permissions' => FALSE,
      'dupe_check' => FALSE,
      'contact_id' => $contact['contact_id'],
      'id' => $contact['contact_id'],
      'contact_type' => 'Individual',
      CD_CIVICRM_CD => '',
      'address' => array(
        1 => array(
          'location_type_id' => 1,
          'is_primary' => TRUE,
          'postal_code' => '00001',
        ),
      ),
    );
    $result = civicrm_api('Contact', 'update', $contact_modified_parameters);
    if ($result['is_error']) {
      $this->fail('The CiviCRM contact could not be edited: ' .
        $this->_var_export($contact_modified_parameters, TRUE) .
        $this->_var_export($result, TRUE));
      return;
    }

    // We should have the new postal code and the CD should be gone.
    $contact = _cd_civicrm_contact_get($contact_search);
    $this->assertEqual($contact['postal_code'], '00001', 'CiviCRM contact simpletest@example.org was edited.');
    $this->assertEqual($contact[CD_CIVICRM_CD], '', 'CiviCRM contact simpletest@example.org CD was removed.');
    $this->verbose(
      '$contact_search: ' . $this->_var_export($contact_search, TRUE) .
      '$contact: ' . $this->_var_export($contact, TRUE) .
      '$contact_modified_parameters: ' . $this->_var_export($contact_modified_parameters, TRUE) .
      '$contact_modified: ' . $this->_var_export($result, TRUE));

    // Editing the postal code should re-enqueue the contact.
    $this->assertTrue($this->_checkQueue($contact['contact_id']), 'Contact enqueued when edited');

    // Process the queue, our contact should be processed.
    $this->_processQueue();
    $this->assertFalse($this->_checkQueue($contact['contact_id']), 'Contact dequeued when queue processed.');
    $contact = _cd_civicrm_contact_get($contact_search);
    // The old CD should remain in place.
    $this->assertEqual($contact[CD_CIVICRM_CD], 'not found', 'Contact CD is ' . $contact[CD_CIVICRM_CD]);
    $this->verbose(
      '$contact_search: ' . $this->_var_export($contact_search, TRUE) .
      '$contact: ' . $this->_var_export($contact, TRUE));

    // Cleanup. Delete the contact.
    $result = civicrm_api('Contact', 'delete', $contact_search);
    if ($result['is_error']) {
      $this->fail("The test CiviCRM contact 'Simpletest test' could not be deleted.");
    }

  }

  /**
   * Is the contact ID in the cron queue?
   *
   * @param int $contact_id
   */
  protected function _checkQueue($contact_id) {
    return db_query('SELECT 1 FROM {cd_sunlight_cron} WHERE contact_id = :contact_id AND storage_system = :storage_system AND processed = :processed', array(':contact_id' => $contact_id, ':storage_system' => "civicrm", ':processed' => 0))->fetchField();
  }

  /**
   * Print out a variable for HTML display.
   *
   * @param mixed $variable
   * @return string
   */
  protected function _var_export($variable) {
    return '<pre>' . var_export($variable, TRUE) . '</pre>';
  }

  /**
   * Set the given variable using the value from the base installation.
   *
   * @param string $name
   *
   * @return mixed
   *  The value.
   *
   */
  protected function _variable_orginal_set($name) {
    $value = unserialize(db_query('SELECT value FROM variable WHERE name = :name', array(':name' => $name))->fetchField());
    $this->verbose("$name: " . $this->_var_export($value));
    variable_set($name, $value);
    return $value;
  }

  /**
   * Process the CD lookup queue.
   */
  protected function _processQueue() {
    variable_set('cd_civicrm_geocoding_off', FALSE);
    _cd_civicrm_process_queue();
    variable_set('cd_civicrm_geocoding_off', TRUE);
  }

}
