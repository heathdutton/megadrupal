<?php

/**
 * @file
 * Implements CoinPayments payment services for use with Drupal Commerce.
 */

define('COMMERCE_MOOLAH_PAYMENT_ENDPOINT', 'https://moolah.io/api/pay');

/**
 * Implements hook_payment_method_info().
 */
function commerce_moolah_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['moolah'] = array(
    'base' => 'commerce_moolah',
    'title' => t('Moolah.io payment systement'),
    'short_title' => t('Moolah'),
    'display_title' => t('Crypto currencies - Moolah.io'),
    'description' => t('Allow payment in various crypto currencies, you will need a merchant account from Moolah.io.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_moolah_menu() {
  $items = array();

  // Define an always accessible path to receive IPNs.
  $items['commerce_moolah/ipn'] = array(
    'page callback' => 'commerce_moolah_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns the default settings for the DogecoinAPI payment method.
 */
function commerce_moolah_default_settings() {
  foreach (_commerce_moolah_get_currencies() as $value) {
    $settings['guid'][$value . '_guid'] = '';
  }
  $settings['api_key'] = '';
  $settings['ipn_secret'] = '';

  return $settings;
}

/**
 * Payment method callback: settings form.
 */
function commerce_moolah_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_moolah_default_settings();

  $form['guid'] = array(
    '#type' => 'fieldset',
    '#title' => t('Currencies guid'),
  );

  // Add all currencies settings.
  foreach (_commerce_moolah_get_currencies() as $key => $value) {
    $form['guid'][$value . '_guid'] = array(
      '#type' => 'textfield',
      '#title' => $key . ' guid',
      '#description' => t(
        "Your @currency guid from !url, leave blank if you don't want to use this currency.",
        array(
          '@currency' => $key,
          '!url' => l(t('this page'), 'https://moolah.io/merchant'),
        )
      ),
      '#default_value' => $settings[$value . '_guid'],
    );
  }

  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => 'API key',
    '#description' => t('Your API key from Moolah.io merchant account.'),
    '#default_value' => $settings['api_key'],
    '#required' => TRUE,
  );

  $form['ipn_secret'] = array(
    '#type' => 'textfield',
    '#title' => 'IPN secret',
    '#description' => t('Your IPN key from Moolah.io merchant account.'),
    '#default_value' => $settings['ipn_secret'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method select form submit.
 *
 * Let the user select the currency and the corresponding guid.
 */
function commerce_moolah_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  foreach ($payment_method['settings']['guid'] as $guid_type => $guid) {
    if (empty($guid)) {
      continue;
    }
    // Crafting available currencies select list.
    $currency = explode('_', $guid_type);
    $options[$guid] = array_search($currency[0], _commerce_moolah_get_currencies());
  }

  $form['guid'] = array(
    '#type' => 'select',
    '#title' => t('Payment currency'),
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'commerce_moolah_ajax_submit',
    ),
  );

  return $form;
}

/**
 * Payment method callback: submit form submission.
 *
 * Processes payment as necessary using data inputted via the payment details
 * form elements on the form, resulting in the creation of a payment
 * transaction.
 * See : https://moopay.freshdesk.com/support/solutions/articles/1000047513-how-do-i-create-a
 */
function commerce_moolah_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Get order to wrapper.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Generate a payment redirect key.
  $order->data['payment_redirect_key'] = drupal_hash_base64(REQUEST_TIME);

  // Set order currency code.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  // Set amount.
  $amount = $wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($amount, $currency_code);
  // Get store name.
  $store_name = variable_get('site_name', url('<front>', array('absolute' => TRUE)));
  // Set data for request.
  $data = array(
    'currency' => $currency_code,
    'amount'   => $amount,
    'product'  => t('Drupal Commerce order @id at @store', array(
        '@id' => $order->order_number,
        '@store' => $store_name,
      )
    ),
    'return'   => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'guid'     => $pane_values['guid'],
    'ipn'      => url('commerce_moolah/ipn', array('absolute' => TRUE)),
  );

  // Add security hash.
  $params_to_hash = $data;
  $params_to_hash['ipn_secret'] = $payment_method['settings']['ipn_secret'];
  $hash = hash('sha256', http_build_query($params_to_hash));
  $data['hash'] = $hash;

  // Request payment form URL from API.
  $url = url(COMMERCE_MOOLAH_PAYMENT_ENDPOINT, array('query' => $data));
  $response = drupal_http_request($url);
  // Check response is 200.
  if ($response->code != 200) {
    watchdog('commerce_moolah', 'Request to Moolah API failed', array(), WATCHDOG_WARNING);
    return;
  }

  $response_data = json_decode($response->data);
  $payment_form_url = $response_data->url;
  // Storing payment form URL in the order.
  $order->data['moolah'] = $payment_form_url;
  $tx_id = $response_data->tx;

  commerce_moolah_transaction($payment_method, $order, $charge, $tx_id);
}


/**
 * Payment method callback: redirect form.
 */
function commerce_moolah_redirect_form($form, &$form_state, $order, $payment_method) {
  $form['#action'] = $order->data['moolah'];

  return $form;
}

/**
 * Creates a payment transaction for the specified charge amount.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_moolah_transaction(array $payment_method, $order, array $charge, $tx_id) {
  $transaction = commerce_payment_transaction_new('moolah', $order->order_id);
  // Expected value: moolah|commerce_payment_moolah.
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $tx_id;
  // An order amount of $1.00 probably shows here as simply 100.
  $transaction->amount = $charge['amount'];
  // Default Commerce currency code value: USD.
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = 'Initialized transaction';
  $transaction->message_variables = array();

  commerce_payment_transaction_save($transaction);
}

/**
 * Retrieve the commerce transaction associated with a remote transaction id.
 *
 * @param string $tx
 *   The remote transaction id.
 *
 * @return object
 *   A Commerce transaction.
 */
function commerce_moolah_get_transaction_from_remote($tx) {
  $request = db_select('commerce_payment_transaction', 'cpt')
    ->fields('cpt', array('transaction_id'))
    ->condition('cpt.remote_id', $tx)
    ->execute()
    ->fetchAssoc();

  return commerce_payment_transaction_load($request['transaction_id']);
}

/**
 * Processes an incoming IPN.
 *
 * @return bool
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 */
function commerce_moolah_process_ipn() {
  // Retrieve the IPN from $_GET if the caller did not supply an IPN array.
  // Note that Drupal has already run stripslashes() on the contents of the
  // $_GET array at this point, so we don't need to worry about them.
  $ipn = $_GET;

  // Exit if IPN parameters are no set.
  if (!isset($ipn['ipn_secret']) || !isset($ipn['status']) || !isset($ipn['tx'])) {
    watchdog('commerce_moolah', 'Missing IPN parameter', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  // Exit if the given IPN secret is incorrect.
  $payment_method = commerce_payment_method_instance_load('moolah|commerce_payment_moolah');
  $ipn_secret = $payment_method['settings']['ipn_secret'];
  if ($ipn['ipn_secret'] != $ipn_secret) {
    watchdog('commerce_moolah', 'Incorrect IPN parameter', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  // Loading commerce transaction.
  $transaction = commerce_moolah_get_transaction_from_remote($ipn['tx']);
  $order = commerce_order_load($transaction->order_id);
  // Exit if we could not find matching transaction/order.
  if (!$order) {
    watchdog('commerce_moolah', 'Could not find a matching transaction/order', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  // Update order according to IPN status.
  switch ($ipn['status']) {
    case 'cancelled':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      break;

    case 'complete':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      break;

    default:
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  watchdog('commerce_moolah', 'IPN processed OK for Order @order_number with remote ID @txn_id.', array('@txn_id' => $ipn['tx'], '@order_number' => $order->order_number), WATCHDOG_INFO);

  return TRUE;
}

/**
 * Get all available currencies.
 *
 * @return array
 *   Available crypty currencies list.
 */
function _commerce_moolah_get_currencies() {
  $currencies = array(
    'Bitcoin' => 'bitcoin',
    'Litecoin' => 'litecoin',
    'Dogecoin' => 'dogecoin',
    'Vertcoin' => 'vertcoin',
    'Auroracoin' => 'auroracoin',
    'Mintcoin' => 'mintcoin',
    'Darkcoin' => 'darkcoin',
    'Maxcoin' => 'maxcoin',
  );

  return $currencies;
}
