<?php

/**
 * @file
 * Drupal Integration for Adobe Test&Target.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function testandtarget_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'panels' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_help().
 */
function testandtarget_help($path, $arg) {
  switch ($path) {
    case 'admin/help#testandtarget':
      return t("Settings for Test&Target MVT.");
  }
}

/**
 * Implements hook_theme().
 */
function testandtarget_theme() {
  return array(
    'testandtarget_mbox' => array(
      'variables' => array('mbox_name' => NULL, 'default_content' => NULL),
    ),
    'testandtarget_block' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Theme callback for rendering an mbox.
 * @param $variables
 */
function theme_testandtarget_mbox($variables) {
  $name = $variables['mbox_name'];
  $content = $variables['default_content'];

  $output = '<div class="mboxDefault">';
  $output .= $content;
  $output .= '</div>';

  // Add script.
  $output .= '<script type="text/javascript">';
  $output .= "mboxCreate('{$name}');";
  $output .= '</script>';

  return $output;
}

/**
 * Implements hook_permission().
 */
function testandtarget_permission() {
  return array(
    'access testandtarget information' => array(
      'description' => t('View developer output in debug mode.'),
      'title' => t('Access testandtarget information'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * for block_admin_configure
 *   Add Test&Target mbox config options to the block-config pages.
 */
function testandtarget_form_block_admin_configure_alter(&$form, $form_state) {
  $module = $form['module']['#value'];
  $delta  = $form['delta']['#value'];
  $block = block_load($module, $delta);

  $form['testandtarget'] = array(
    '#title'        => t('Test&Target settings'),
    '#type'         => 'fieldset',
    '#description'  => t('Determine whether this block is a Test&Target mbox.'),
    '#collapsible'  => TRUE,
    // Only open if the block has an mbox enabled.
    '#collapsed'    => ($block->mbox_enabled == FALSE) ? TRUE : FALSE,
  );
  $form['testandtarget']['mbox_enabled'] = array(
    '#title' => t('Enable mbox'),
    '#type' => 'checkbox',
    '#default_value' => $block->mbox_enabled,
  );
  $form['testandtarget']['mbox_name'] = array(
    '#title' => t('Mbox name'),
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#default_value' => isset($block->mbox_name) ? $block->mbox_name : '',
    '#description' => t('The name of the mbox. This will appear in the Test&Target Web UI.'),
  );

  array_unshift($form['#validate'], 'testandtarget_form_block_admin_configure_validate');

  // The form only saves particular fields. Add a submit handler to save the
  // Test&Target data.
  array_unshift($form['#submit'], 'testandtarget_form_block_admin_configure_submit');
}

/**
 * Validate function for block_admin_configure form.
 */
function testandtarget_form_block_admin_configure_validate($form, &$form_state) {
  if ($form_state['values']['mbox_enabled'] && empty($form_state['values']['mbox_name'])) {
    form_set_error('mbox_name', 'Please enter a name for this mbox');
  }
}

/**
 * Submit handler for the block_admin_configure form.
 */
function testandtarget_form_block_admin_configure_submit($form, &$form_state) {
  // The regular block-configuration form only saves particular fields. This
  // submit handler stores the Test&Target-specific data.
  _testandtarget_block_save_settings($form_state['values']['module'], $form_state['values']['delta'], (bool) $form_state['values']['mbox_enabled'], (string) $form_state['values']['mbox_name']);
}

/**
 * Configure the Test&Target settings for a particular block.
 *
 * @param String $module
 * Module implementing the block.
 * @param String $delta
 * The block's delta.
 * @param Boolean $mbox_enabled
 * Set to TRUE if this block should be wrapped in an mbox.
 * @param Int $mbox_name
 * The name of the mbox
 */
function _testandtarget_block_save_settings($module, $delta, $mbox_enabled, $mbox_name) {
  $transaction = db_transaction();
  try {
    db_update('block')
      ->fields(array(
      'mbox_enabled' => (int) $mbox_enabled,
      'mbox_name'     => (string) $mbox_name,
    ))
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('Test&Target block', $e);
    throw $e;
  }
}

/**
 * Theme wrapper function for test and target blocks.
 * This wraps block.tpl.php in an mbox
 *
 * The $variables array contains the following arguments:
 * - $block
 *
 * @see block.tpl.php
 */
function theme_testandtarget_block(&$variables) {
  return theme('testandtarget_mbox', array('mbox_name' => $variables['elements']['#block']->mbox_name, 'default_content' => $variables['elements']['#children']));
}

/**
 * Implements hook_page_alter().
 */
function testandtarget_page_alter(&$page) {

  // Get the mbox.js path,
  // which should be in sites/all/libraries/testandtarget/mbox.js
  $mbox_path = testandtarget_get_mbox_js_path();
  if ($mbox_path === FALSE) {
    return FALSE;
  }

  // Like drupal_add_js, add a query string to the end of the js file location.
  $query_string = '?' . variable_get('css_js_query_string', '0');
  $mbox_js = $mbox_path . '/mbox.js';

  // Create script tag and add to the page.
  $script = "<script type=\"text/javascript\" language=\"JavaScript\" src=\"/";
  $script .= $mbox_js . $query_string;
  $script .= "\"></script>\n";
  $page['page_top']['testandtarget'] =  array(
    'header'=> array(
      '#type' => 'markup',
      '#markup' => $script,
    ),
  );

  // - Add the 'testandtarget_block' theme wrapper for any blocks that have mboxes enabled.
  // We do this in hook_page_alter() so that it gets added last after the block theme wrapper.
  foreach (element_children($page) as $region_key) {
    foreach (element_children($page[$region_key]) as $block_key) {
      if (isset($page[$region_key][$block_key]['#block']) && is_object($page[$region_key][$block_key]['#block']) && !empty($page[$region_key][$block_key]['#block']->mbox_enabled)) {
        $page[$region_key][$block_key]['#theme_wrappers'][] = 'testandtarget_block';
      }
    }
  }

  // Add debug info if user has access to view that.
  if (user_access('access testandtarget information')) {
    $page['page_bottom']['testandtarget'] = array(
      '#type' => 'markup',
      '#markup' => '<div style="clear:both;">' . l('Test&Target Debug info', current_path(), array('query' => array('mboxDebug' => '1'))) . '</div>',
    );
  }
}

/**
 * Returns the path to the Test&Target mbox.js file or FALSE if not found.
 */
function testandtarget_get_mbox_js_path() {
  static $path;

  if (isset($path)) {
    return $path;
  }
  $path = FALSE;

  // Libraries API integration.
  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path('testandtarget');

    // Libraries API 1.x returns a default path; 2.x returns FALSE.
    if ($path !== FALSE && !file_exists($path)) {
      $path = FALSE;
    }
  }
  // Manually check sites/all/libraries in case Libraries API is not available.
  elseif (file_exists('./sites/all/libraries/testandtarget')) {
    $path = 'sites/all/libraries/testandtarget';
  }

  return $path;
}

