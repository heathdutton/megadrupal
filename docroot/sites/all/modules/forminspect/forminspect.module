<?php
/**
 * @file
 * Forminspect primary module file.
 */

/**
 * Implements hook_permissions()
 */
function forminspect_permission() {
  return array(
    'administer forminspect' => array(
      'title' => t('Administer forminspect'),
      'description' => t('Access to forminspect settings.'),
      'restrict access' => TRUE,
    ),
    'view forminspect' => array(
      'title' => t('View forminspect arrays'),
      'description' => t('View forminspect array dumps.'),
    ),
  );
}

/**
 * Implements hook_help()
 */
function forminspect_help($path, $arg) {
  $help = NULL;
  switch ($path) {
    case 'admin/help#forminspect':
      $help = t('<p>Labels forms with their formin and provides a dump of the corresponding form array.</p><p>The forminspect module shows the form elements and the form state as used in the FAPI during the form generation. By default the information is displayed in a array dump, but other display outputs are pluggable.</p>');
      break;
    case 'admin/config/development/forminspect':
      $help = t('<p>Labels forms with their formin and provides a dump of the corresponding form array.</p>');
      break;
  }
  return $help;
}

/**
 * Implements hook_menu().
 */
function forminspect_menu() {
  $items = array();
  $items['admin/config/development/forminspect'] = array(
    'title' => 'Form inspect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forminspect_settings'),
    'access arguments' => array('administer forminspect'),
    'type' => MENU_NORMAL_ITEM,
    'description' => t('Ignore certain forms.'),
  );
  return $items;
}

/**
 * Form inspect settings form
 */
function forminspect_settings($form, &$form_state) {
  $form['forminspect_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display form information'),
    '#default_value' => variable_get('forminspect_enabled', FALSE),
  );
  $form['forminspect_ignore'] = array(
    '#type' => 'textarea',
    '#title' => t('Ignore forms with the following ids'),
    '#description' => t('Enter one form id per line. The * character is a wildcard. Example form ids are <em>forminspect_settings</em> for this settings form or <em>*_node_form</em> for every node submission form. '),
    '#default_value' => variable_get('forminspect_ignore', ''),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 */
function forminspect_form_alter(&$form, $form_state, $form_id) {
  static $regexp;

  if (variable_get('forminspect_enabled', FALSE)) {
    if (!isset($regexp) && ($ignore_forms = variable_get('forminspect_ignore', ''))) {
      $regexp = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/'), array('|', '.*'), preg_quote($ignore_forms, '/')) . ')$/';
    }

    if (isset($regexp) && preg_match($regexp, $form_id)) {
      return;
    }
    elseif (user_access('view forminspect') && variable_get('forminspect_display_form_dump', TRUE)) {
      drupal_add_css(drupal_get_path('module', 'forminspect') . '/forminspect.css');

      if (module_exists('devel') && has_krumo()) {
        $form['#suffix'] = '<br /><strong>' . check_plain($form_id) . krumo_ob($form) . t('@form_id form state', array('@form_id' => $form_id)) . krumo_ob($form_state) . '</strong>';
      }
      else {
        $form['form_inspect_dump'] = array(
          '#type' => 'fieldset',
          '#title' => t('@form_id information', array('@form_id' => $form_id)),
          '#weight' => 1000,
          'form_inspect_form' => array(
            '#type' => 'fieldset',
            '#title' => t('Form array'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            'form_inspect_form_contents' => array(
              '#value' => '<div class="forminspect-dump forminspect-dump-' . $zebra . '"><pre>' . check_plain(print_r($form, TRUE)) . '</pre></div>',
            ),
          ),
          'form_inspect_form_state' => array(
            '#type' => 'fieldset',
            '#title' => t('Form state'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            'form_inspect_form_contents' => array(
              '#value' => '<div class="forminspect-dump forminspect-dump-' . $zebra . '"><pre>' . check_plain(print_r($form_state, TRUE)) . '</pre></div>',
            ),
          ),
        );
      }
    }
  }
}
