<?php
/**
 * @file
 * Suite CRM integration.
 */

/**
 * Implements hook_schema().
 */
function clients_suitecrm_schema() {
  $schema['cache_suitecrm'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_suitecrm']['description'] = 'Cache table used to store suitecrm specific data.';

  // Inject the schema configuration of sugar crm remote entities. This is
  // pretty low level, thus no entity API functions can be called.
  if (db_table_exists('clients_resource') && function_exists('clients_suitecrm_crm_to_entity_schema')) {
    $connection_entity_resources = variable_get('clients_suitecrm_enabled_entity_resources', array());
    foreach ($connection_entity_resources as $connection_name => $entity_resources) {
      // Handle only production connections. The substitution will be made on
      // demand.
      if (clients_suitecrm_connection_is_for_environment($connection_name, 'production')) {
        foreach ($entity_resources as $entity_resource) {
          $data = db_select('clients_resource')
            ->fields('clients_resource')
            ->condition('name', $entity_resource)
            ->condition('connection', $connection_name)
            ->execute()
            ->fetch();
          if (!empty($data->configuration)) {
            $data->configuration = unserialize($data->configuration);
            if (!empty($data->configuration['entity info']['base table'])) {
              $table = $data->configuration['entity info']['base table'];
              $schema[$table] = clients_suitecrm_crm_to_entity_schema($data);
            }
          }
        }
      }
    }
  }

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function clients_suitecrm_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'runtime') {
    // Show information about soft dependencies in the status report.
    $message = NULL;
    if (!module_exists('data')) {
      $message .= $t('To handle schema changes gracefully it is recommended to install the <a href="https://www.drupal.org/project/data">Data</a> module.');
    }
    if (!empty($message)) {
      $requirements['suitecrm_integration'] = array(
        'title' => $t('SuiteCRM Integraion'),
        'value' => $message,
        'severity' => REQUIREMENT_INFO,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function clients_suitecrm_uninstall() {
  // Remove variables.
  variable_del('clients_suitecrm_connection_resources_fields');
  variable_del('clients_suitecrm_connection_resources');
  variable_del('clients_suitecrm_enabled_entity_resources');
  variable_del('clients_suitecrm_default_insert_callback');
  variable_del('clients_suitecrm_default_update_callback');
}

/**
 * Updates schema if necessary, only takes care of adding fields for now.
 */
function clients_suitecrm_update_schema() {
  $connection_entity_resources = variable_get('clients_suitecrm_enabled_entity_resources', array());
  foreach ($connection_entity_resources as $connection_name => $entity_resources) {
    // Handle only production connections. The substitution will be made on
    // demand.
    if (clients_suitecrm_connection_is_for_environment($connection_name, 'production')) {
      foreach ($entity_resources as $entity_resource) {
        $data = db_select('clients_resource')
          ->fields('clients_resource')
          ->condition('name', $entity_resource)
          ->condition('connection', $connection_name)
          ->execute()
          ->fetch();
        if (!empty($data->configuration)) {
          $data->configuration = unserialize($data->configuration);
          if (!empty($data->configuration['entity info']['base table'])) {
            $table = $data->configuration['entity info']['base table'];
            if (db_table_exists($table)) {
              $schema = clients_suitecrm_crm_to_entity_schema($data);
              foreach ($schema['fields'] as $field => $field_schema) {
                if (!db_field_exists($table, $field)) {
                  db_add_field($table, $field, $field_schema);
                  drupal_set_message(t('Added field !field to table !table', array('field' => $field, 'table' => $table)), 'status');
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Update schema if necessary to add enum fields.
 */
function clients_suitecrm_update_7000() {
  clients_suitecrm_update_schema();
}

/**
 * Update configuration options for timeout settings.
 */
function clients_suitecrm_update_7001() {
  $suitecrm_connections = clients_connection_load_all(array('suitecrm'));
  foreach ($suitecrm_connections as $suitecrm_connection) {
    if (isset($suitecrm_connection->configuration['connection_timeout'])) {
      $suitecrm_connection->configuration['connect_timeout'] = $suitecrm_connection->configuration['connection_timeout'];
      unset($suitecrm_connection->configuration['connection_timeout']);
      $suitecrm_connection->save();
    }
  }
}
