<?php
/**
 * @file
 * Code for the OpenAtrium Folders revisions module.
 */


/**
 * Implementation of hook_folder_toolbox()
 */
function oa_folders_zip_folder_toolbox() {
  $items = array();
  $items[] = array(
    'op' => 'download',
    'type' => 'folder',
    'title' => t('Download'),
    'description' => t('Download the folder as zip.'),
    'glyphicon' => 'glyphicon-download-alt icon-download-alt',
    'form callback' => 'oa_folders_zip_download_form',
    'node access' => 'view',
    'attributes' => array(),
  );
  return $items;
}
/**
 * Implements hook_menu_local_tasks_alter().
 */
function oa_folders_zip_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($router_item['page_arguments']) && isset($router_item['page_arguments'][0])) {
    $node = $router_item['page_arguments'][0];
    if (isset($node->type) && $node->type == 'oa_folder') {
      // Download zip.
      if (node_access('view', $node)) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Download zip'),
            'href' => 'oa_folders/toolbox/download/' . $node->nid . '/0/nojs/',
            'localized_options' => array(
              'attributes' => array(
                'title' => t('Download all files and sub folders as a zip archive'),
              ),
            ),
          ),
        );
      }

    }
  }

}

/**
 * Zip download form callback.
 */
function oa_folders_zip_download_form($form, $form_state) {

  $nid = $form_state['build_info']['args'][1];
  $node = node_load($nid);

  $folders = oa_folders_get_folders_tree('view', NULL, TRUE);

  // Only take the folder we are interested in (and its sub folders.)
  $files = oa_folders_zip_get_files_recursively($nid, $folders[$nid]);

  $form['message'] = array(
    '#type' => 'markup',
    '#markup' => t('You are about to download %title as a zip archive<br />It contains %count files.<br />', array('%title' => $node->title, '%count' => count($files))),
  );

  $form['zip_name'] = array(
    '#type' => 'hidden',
    '#value' => oa_folders_zip_transliteration_clean_filename($node->title) . '.zip',
  );
  $form['zip_files'] = array(
    '#type' => 'hidden',
    '#value' => serialize($files),
  );

  if (!isset($_SESSION['oa_folders_zip_formredirect'])) {
    $_SESSION['oa_folders_zip_formredirect'] = $_SERVER['HTTP_REFERER'];
  }
  $form['http_referer'] = array(
    '#type' => 'hidden',
    '#value' => $_SESSION['oa_folders_zip_formredirect'],
  );
  $form['parent_nid'] = array(
    '#type' => 'hidden',
    '#value' => $folders[$nid]['parent'],
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Download'));

  return $form;
}

/**
 * Zip download form submit callback.
 */
function oa_folders_zip_download_form_submit($form, &$form_state) {
  unset($_SESSION['oa_folders_zip_formredirect']);
  $arguments = array(
    'nid' => $form_state['build_info']['args'][1],
    'parent_nid' => $form_state['values']['parent_nid'],
    'filename' => $form_state['values']['zip_name'],
    'http_referer' => $form_state['values']['http_referer'],
  );

  $batch = array(
    'title' => t('Download zip archive'),
    'operations' => array(
      array('oa_folders_zip_batch_prepare', array($arguments)),
      array('oa_folders_zip_batch_add_file', array(unserialize($form_state['values']['zip_files']))),
    ),
    'finished' => 'oa_folders_zip_batch_finish',
    'file' => drupal_get_path('module', 'oa_folders_zip').'/oa_folders_zip.batch.inc',
  );
  batch_set($batch);
}

/**
 * Get all files and subfolders of a folder to later zip them.
 */
function oa_folders_zip_get_files_recursively($nid, $folder, $sub_path = '') {
  $files = array();
  foreach(views_get_view_result('oa_folders', 'content_pane', $nid) as $file) {
    $title = $file->file_managed_field_data_field_oa_media_filename;
    $uri = $file->file_managed_field_data_field_oa_media_uri;
    $fid = $file->file_managed_field_data_field_oa_media_fid;
    $filesize = $file->file_managed_field_data_field_oa_media_filesize;
    $path = $sub_path . oa_folders_zip_transliteration_clean_filename($title);
    if (in_array(file_uri_scheme($uri), array('private', 'public'))) {
      // Add the file to the list if it is local.
      $files[] = array('name' => $title, 'uri' => drupal_realpath($uri), 'path' => $path, 'filesize' => $filesize);
    }
  }
  if ($folder['subfolders']) {
    foreach ($folder['subfolders'] as $subnid => $subfolder) {
      $path = $sub_path . oa_folders_zip_transliteration_clean_filename($subfolder['title']) . '/';
      $files = array_merge($files, oa_folders_zip_get_files_recursively($subnid, $subfolder, $path));
    }
  }
  return $files;
}


/**
 * Transliterate file names
 */
function oa_folders_zip_transliteration_clean_filename($filename, $source_langcode = NULL) {
  if (function_exists('transliteration_clean_filename')) {
    // Prefer the actual transliteration function.
    return transliteration_clean_filename($filename, $source_langcode);
  }
  else {
    if (is_array($filename)) {
      foreach ($filename as $key => $value) {
        $filename[$key] = oa_folders_zip_transliteration_clean_filename($value, $source_langcode);
      }
      return $filename;
    }
    // Replace whitespace.
    $filename = str_replace(' ', '_', $filename);
    // Remove remaining unsafe characters.
    $filename = preg_replace('![^0-9A-Za-z_.-]!', '', $filename);
    // Remove multiple consecutive non-alphabetical characters.
    $filename = preg_replace('/(_)_+|(\.)\.+|(-)-+/', '\\1\\2\\3', $filename);
    // Force lowercase.
    $filename = strtolower($filename);

    return $filename;
  }
}
