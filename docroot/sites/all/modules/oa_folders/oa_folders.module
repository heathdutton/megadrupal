<?php
/**
 * @file
 * Code for the OpenAtrium Folders feature.
 */

include_once 'oa_folders.features.inc';

define('OA_FOLDERS_ALL_OPEN', -1);

function oa_folders_init() {

}

/**
 * Implements hook_menu().
 */
function oa_folders_menu() {
  $items = array();
  $items['oa_folders/toolbox/%/%/%/%ctools_js'] = array(
    'page callback' => 'oa_folders_toolbox_page_callback',
    'page arguments' => array(2, 3, 4, 5), // op, nid, fid, ajax
    'access callback' => 'oa_folders_toolbox_page_access',
    'access arguments' => array(2, 3, 4),
    'file' => 'oa_folders.toolbox.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Toolbox page access
 */
function oa_folders_toolbox_page_access($op, $nid, $fid) {
  $type = ($fid ? 'file' : 'folder');
  $actions = oa_folders_toolbox_actions();
  $tool = $actions[$op . '-' . $type];
  $node_access = (isset($tool['node access']) ? $tool['node access'] : 'update');
  $node = node_load($nid);
  if ($node && $node->type == 'oa_folder' && node_access($node_access, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function oa_folders_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($router_item['page_arguments']) && isset($router_item['page_arguments'][0])) {
    $node = $router_item['page_arguments'][0];
    if (isset($node->type) && $node->type == 'oa_folder') {
      $node_wrapper = entity_metadata_wrapper('node', $node);

      if (node_access('update', $node)) {
        // Create Subfolder.
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Create Subfolder'),
            'href' => 'node/add/oa-folder',
            'localized_options' => array(
              'attributes' => array(
                'title' => t('Create Subfolder'),
              ),
              'query' => array(
                'field_oa_folder_parent' => $node->nid,
                'oa_section_ref' => $node_wrapper->oa_section_ref->getIdentifier(),
              ),
            ),
          ),
        );
        // Add Files.
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Add Files'),
            'href' => 'node/' . $node->nid . '/edit',
            'localized_options' => array(
              'attributes' => array(
                'title' => t('Add new content'),
              ),
              'fragment' => 'edit-field-oa-media',
            ),
          ),
        );
      }
    }
    if (isset($node->type) && $node->type == 'oa_section') {
      $node_wrapper = entity_metadata_wrapper('node', $node);
      if (drupal_valid_path('node/add/oa-folder') && in_array('oa_folder', $node_wrapper->field_oa_node_types->value())) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Create Folder'),
            'href' => 'node/add/oa-folder',
            'localized_options' => array(
              'attributes' => array(
                'title' => t('Download all files and sub folders as a zip archive'),
              ),
              'query' => array(
                'oa_section_ref' => $node->nid,
              ),
            ),
          ),
        );
      }
    }
  }

}

/**
 * Implementation of hook_folder_toolbox()
 */
function oa_folders_folder_toolbox() {
  $items = array();
  $items[] = array(
    'op' => 'move',
    'type' => 'file',
    'title' => t('Move'),
    'description' => t('Move the file to another folder.'),
    'glyphicon' => 'glyphicon-share icon-share',
    'form callback' => 'oa_folders_toolbox_move_form',
    'ajax callback' => 'oa_folders_toolbox_move_ajax_callback',
  );
  $items[] = array(
    'op' => 'delete',
    'type' => 'file',
    'title' => t('Delete'),
    'description' => t('Delete the file.'),
    'glyphicon' => 'glyphicon-trash icon-trash',
    'form callback' => 'oa_folders_toolbox_delete_form',
    'ajax callback' => 'oa_folders_toolbox_delete_ajax_callback',
  );
  $items[] = array(
    'op' => 'edit',
    'type' => 'file',
    'title' => t('Edit'),
    'description' => t('Edit the file informations.'),
    'glyphicon' => 'glyphicon-edit icon-edit',
    'path' => 'media/!fid/edit/nojs',
  );
  $items[] = array(
    'op' => 'edit',
    'type' => 'folder',
    'title' => t('Edit'),
    'description' => t('Edit the file informations.'),
    'glyphicon' => 'glyphicon-edit icon-edit',
    'path' => 'node/!nid/edit',
    'attributes' => array(),
  );
  $items[] = array(
    'op' => 'download',
    'type' => 'file',
    'title' => t('Download'),
    'description' => t('Download the file.'),
    'glyphicon' => 'glyphicon-download-alt icon-download-alt',
    'form callback' => 'oa_folders_toolbox_download_form',
    'access callback' => 'oa_folders_toolbox_download_access',
    'node access' => 'view',
    'attributes' => array(),
  );
  return $items;
}

/**
 * Returns all implementations hook_folder_toolbox in a convenient form.
 */
function oa_folders_toolbox_actions() {
  $items = &drupal_static(__FUNCTION__);
  if (!isset($items)) {
    foreach (module_invoke_all('folder_toolbox') as $item) {
      // save the operation and type as keys for easy retrieval.
      $items[$item['op'].'-'.$item['type']] = $item;
    }
  }
  return $items;
}

/**
 * Moves an attached file from one node to another.
 */
function oa_folders_move_file($fid, $from_nid, $to_nid) {
  $file = NULL;
  $file_key = NULL;

  $from_node = node_load($from_nid);
  foreach ($from_node->field_oa_media[LANGUAGE_NONE] as $key => $attachment) {
    // Find the relevant file
    if ($attachment['fid'] == $fid) {
      $file = $attachment;
      $file_key = $key;
      continue;
    }
  }
  if ($file) {
    // Add the file to the new folder.
    $to_node = node_load($to_nid);
    $to_node->field_oa_media[LANGUAGE_NONE][] = $file;
    node_save($to_node);

    // TODO: make sure the file is saved on the new node before removing it from the original.

    // Remove the file from the old folder.
    $file_list = $from_node->field_oa_media[LANGUAGE_NONE];
    unset($file_list[$file_key]);
    $from_node->field_oa_media[LANGUAGE_NONE] = array_values($file_list);
    node_save($from_node);

    return TRUE;
  }

  return FALSE;
}

/**
 * Returns a tree of all accessible folders.
 */
function oa_folders_get_folders_tree($op, $section_id = NULL, $return_flat = FALSE) {
  $top_folders = &drupal_static(__FUNCTION__);
  if (!isset($top_folders)) {
    $folders = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'oa_folder')
      ->propertyCondition('status', NODE_PUBLISHED);
    $query->addTag('node_access');
    // $query->addMetaData('op', $op);
    if ($section_id) {
      $query->fieldCondition('oa_section_ref', 'target_id', $section_id, '=');
    }
    $result = $query->execute();
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      foreach(node_load_multiple($nids) as $node) {
        if ($op != 'view' && !node_access($op, $node)) {
          // Unfortunately $query->addMetaData('op', $op); does not work
          // with OG and OA, so we do a check here if its not viewing the node.
          continue;
        }
        $parent = NULL;
        if (isset($node->field_oa_folder_parent[LANGUAGE_NONE])) {
          $parent = $node->field_oa_folder_parent[LANGUAGE_NONE][0]['target_id'];
        }
        $folders[$node->nid] = array(
          'title' => $node->title,
          'subfolders' => array(),
          'parent' => $parent,
        );
      }
    }
    $top_folders = array();
    foreach ($folders as $nid => $folder) {
      if ($folder['parent'] && array_key_exists($folder['parent'], $folders)) {
        // If the folder has a parent and the parent is part of the list,
        // we link the folder as a sub folder.
        $folders[$folder['parent']]['subfolders'][$nid] = &$folders[$nid];
      }
      else {
        $top_folders[$nid] = &$folders[$nid];
      }
    }

    if ($return_flat) {
      return $top_folders = $folders;
    }
  }
  return $top_folders;
}

/**
 * Returns a tree of all accessible folders.
 */
function oa_folders_all_folders_tree_recursive_options($tree, $indent = '--', $depth = 0, $show_nid = FALSE) {
  $options = array();
  foreach ($tree as $nid => $folder) {
    $options[$nid] = str_repeat($indent, $depth) . ' ' . $folder['title'] . ($show_nid ? ' (' .$nid . ')' : '');
    if ($folder['subfolders']) {
      $options = $options + oa_folders_all_folders_tree_recursive_options($folder['subfolders'], $indent, $depth + 1, $show_nid);
    }
  }
  return $options;
}

/**
 * Render the tree recursively
 */
function oa_folders_render_folder_tree($folders, $current_nid = NULL, $trail = array(), $options = array()) {
  // Sort the folders alphabetically.
  uasort($folders, function($a, $b){
    if ($a['title'] == $b['title']) {
      return 0;
    }
    elseif ($a['title'] > $b['title']) {
      return 1;
    }
    else {
      return -1;
    }
  });
  $items = array();
  $open_icon = '<i class="glyphicon glyphicon-folder-open icon-folder-open"></i> ';
  $closed_icon = '<i class="glyphicon glyphicon-folder-close icon-folder-close"></i> ';
  $file_icon = '<i class="glyphicon glyphicon-file icon-file"></i> ';
  $collapsible = (isset($options['collapsible']) && $options['collapsible']);

  foreach ($folders as $nid => $folder) {
    // use the open folder icon if the folder is in the trail or the active one.
    $icon = (($nid == $current_nid || in_array($nid, $trail) || $current_nid == OA_FOLDERS_ALL_OPEN) ? $open_icon : $closed_icon);
    if ($collapsible) {
      // Hijack the usual items array.
      $collapsible_items = $items;
      $items = array();
    }
    else {
      $items[] = l($icon . $folder['title'], 'node/' . $nid, array('html' => TRUE));
    }
    if (!isset($options['display_files']) || $options['display_files']) {
      // Attach files from view if desired.
      $files = array();
      foreach(views_get_view_result('oa_folders', 'content_pane', $nid) as $file) {
        $title = $file->file_managed_field_data_field_oa_media_filename;
        $link = file_create_url($file->file_managed_field_data_field_oa_media_uri);
        $files[] = l($file_icon . $title, $link, array('html' => TRUE));
      }
      if ($files) {
        $items[] = theme('item_list', array('items' => $files, 'type' => 'ul'));
      }
    }

    if (!empty($folder['subfolders'])) {
      // Use the function recursively or use AJAX
      if (!isset($options['recurse']) || $options['recurse']) {
        $items[] = oa_folders_render_folder_tree($folder['subfolders'], $current_nid, $trail, $options);
      }
      else {
        $subitems = array();
        foreach ($folder['subfolders'] as $subnid => $subfolder) {
          // TODO: make the AJAX work :)
          $subitems[] = $closed_icon . $subfolder['title'] . ' + some ajax for: ' . $subnid;
        }
        $items[] = theme('item_list', array('items' => $subitems, 'type' => 'ul'));
      }
    }
    if ($collapsible) {
      // use ctools collapsible and list sub folders first
      $content = l('Open Folder', 'node/' . $nid . '/edit', array('attributes' => array('class' => 'muted text-muted folder-muted')));
      $content .= theme('item_list', array('items' => array_reverse($items), 'type' => 'ul'));
      $collapsible_items[] = theme('ctools_collapsible', array(
        'handle' => $folder['title'],
        'content' => $content,
        // collapse by default if it is not the current node.
        'collapsed' => ($nid != $current_nid),
      ));
      $items = $collapsible_items;
    }
  }
  return theme('item_list', array('items' => $items, 'type' => 'ul'));
}

/**
 * Access callback for download toolbox button.
 */
function oa_folders_toolbox_download_access($toolbox, $node, $fid) {
  // Allow the button to display if the file exists and is local.
  if (!$fid || !($file = file_load($fid))) {
    return FALSE;
  }
  if (in_array(file_uri_scheme($file->uri), array('private', 'public'))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function oa_folders_block_info() {
  $default = array(
    'folders_section' => 'undefined',
    'root' => '',
  );
  $blocks_number = variable_get('oa_folders_blocks', 2);
  $blocks = array();
  for($i = 1; $i <= $blocks_number; $i+=1) {
    $config = variable_get('oa_folders_block_' . $i, $default);
    $name = $i;
    if ($config['root']) {
      $node = node_load($config['root']);
      if ($node) {
        $name = $node->title;
      }
    }
    $blocks['oa_folders_block_' . $i] = array(
      'info' => t('OA Folders: ') . $config['folders_section'] . ': ' . $name,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function oa_folders_block_configure($delta = '') {
  $form = array();
  $block_id = str_replace('oa_folders_block_', '', $delta);
  $default = array(
    'folders_section' => '',
    'root' => '',
    'files' => 1,
    'collapsible' => 0,
  );

  // Select all oa_sections and use them as options.
  $section_options = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'oa_section')
    ->propertyCondition('status', NODE_PUBLISHED);
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    foreach(node_load_multiple($nids) as $node) {
      $section_options[$node->nid] = $node->title;
    }
  }
  $default = variable_get('oa_folders_block_' . $block_id, $default);

  // Get all folders as options in a folder structure.
  $folder_options = oa_folders_all_folders_tree_recursive_options(oa_folders_get_folders_tree('view'), '--');
  $description = t('Select the root folder of which all sub-folders will be displayed.');

  $form['oa_folders_folders_sections'] = array(
    '#type' => 'select',
    '#title' => t('List Folders or Sections'),
    '#options' => array(
      'folder' => t('Folders'),
      'section' => t('Section'),
    ),
    '#default_value' => $default['folders_section'],
    '#description' => t('Display the files of the folders or all folders in a section?'),
    '#required' => TRUE,
  );
  $form['oa_folders_root_folder'] = array(
    '#type' => 'select',
    '#title' => t('Root Folder'),
    '#options' => $folder_options,
    '#default_value' => $default['root'],
    '#description' => t('Select the root folder of which all sub-folders will be displayed.'),
    '#states' => array(
      'visible' => array(
        ':input[name="oa_folders_folders_sections"]' => array('value' => 'folder'),
      ),
    ),
  );
  $form['oa_folders_root_section'] = array(
    '#type' => 'select',
    '#title' => t('Root Section'),
    '#options' => $section_options,
    '#default_value' => $default['root'],
    '#description' => t('Select the section of which all folders will be displayed.'),
    '#states' => array(
      'visible' => array(
        ':input[name="oa_folders_folders_sections"]' => array('value' => 'section'),
      ),
    ),
  );

  $form['oa_folders_files'] = array(
    '#type' => 'select',
    '#title' => t('Files'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#default_value' => $default['files'],
    '#description' => t('Display the files of the folders?'),
    '#required' => TRUE,
  );
  $form['oa_folders_collapsible'] = array(
    '#type' => 'select',
    '#title' => t('Collapsible'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#default_value' => $default['collapsible'],
    '#description' => t('Display the folders in a collapsible way?'),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function oa_folders_block_save($delta = '', $edit = array()) {
  $block_id = str_replace('oa_folders_block_', '', $delta);
  $value = array(
    'folders_section' => $edit['oa_folders_folders_sections'],
    'root' => ($edit['oa_folders_folders_sections'] == 'folder' ? $edit['oa_folders_root_folder'] : $edit['oa_folders_root_section']),
    'files' => $edit['oa_folders_files'],
    'collapsible' => $edit['oa_folders_collapsible'],
  );
  if (is_numeric($block_id)) {
    variable_set('oa_folders_block_' . $block_id, $value);
  }
}

/**
 * Implements hook_block_view().
 */
function oa_folders_block_view($delta = '') {
  $block_id = str_replace('oa_folders_block_', '', $delta);

  $default = array(
    'folders_section' => '',
    'root' => '',
    'files' => 1,
    'collapsible' => 0,
  );
  $block = array();

  if (is_numeric($block_id)) {
    $settings = variable_get('oa_folders_block_' . $block_id, $default);
    if (!$settings['root']) {
      return $block;
    }
    if ($settings['folders_section'] == 'folder') {
      $folders = oa_folders_get_folders_tree('view', NULL, TRUE);
      // Only take the folder we are interested in (and its sub folders.)
      if (!isset($folders[$settings['root']])) {
        return $block;
      }
      $folders = array($settings['root'] => $folders[$settings['root']]);
    }
    else {
      $folders = oa_folders_get_folders_tree('view', $settings['root']);
    }
    // Get the folders in the selected section.
    if (!$folders) {
      return $block;
    }

    $options = array('recurse' => TRUE, 'collapsible' => $settings['collapsible'], 'display_files' => $settings['files']);
    // if it is collapsible we pass the node id, otherwise all folders are open.
    $nid = ($settings['collapsible'] ? $settings['root'] : OA_FOLDERS_ALL_OPEN);
    $block['content'] = oa_folders_render_folder_tree($folders, $nid, array(), $options);
  }
  return $block;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function oa_folders_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Implements hook_pre_features_rebuild().
 *
 * @see http://drupal.org/node/1549608
 */
function oa_folders_pre_features_rebuild($component) {
  if ($component == 'user_permission') {
    drupal_static_reset('panelizer_entity_plugin_get_handler');
  }
}

/**
 * Implements hook_node_prepare().
 */
function oa_folders_node_prepare($node) {
  if (empty($node->nid) && $node->type == 'oa_folder' && module_exists('og_menu_single') && (function_exists('oa_core_get_section_context') && ($section = oa_core_get_section_context())) && ($plid = og_menu_single_get_link_mlid('node', $section))) {
    global $conf;
    // No good way to set default for parent.
    // @see menu_form_node_form_alter().
    $conf['menu_parent_oa_folder'] = OG_MENU_SINGLE_MENU_NAME . ':' . $plid;
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function oa_folders_strongarm_alter(&$items) {
  // If workbench_moderation is enabled when oa_folders is enabled, then we enable
  // moderation for oa_folders.
  if (module_exists('workbench_moderation')) {
    $node_options_name = "node_options_oa_folder";
    if (isset($items[$node_options_name])) {
      $items[$node_options_name]->value[] = 'moderation';
      sort($items[$node_options_name]->value);
    }
  }
}

/**
 * Implements hook_modules_implements_alter().
 */
function oa_folders_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'strongarm_alter') {
    // Move oa_folders's implementation to the first one any other modules can
    // override our default easily if they don't want workbenech enabled.
    $group = $implementations['oa_folders'];
    unset($implementations['oa_folders']);
    $implementations = array_merge(array('oa_folders' => $group), $implementations);
  }
}

/**
 * Implements hook_modules_installed().
 */
function oa_folders_modules_installed($modules) {
  // If workbench_moderation gets enabled later, then we set the variable
  // manually so the user doesn't have to worry about reverting the feature.
  if (in_array('workbench_moderation', $modules)) {
    $node_options_name = "node_options_oa_folder";
    $node_options = variable_get($node_options_name, array());
    $node_options[] = 'moderation';
    sort($node_options);
    variable_set($node_options_name, $node_options);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_folders_form_oa_folder_node_form_alter(&$form, &$form_state) {
  _oa_core_hide_comment_settings($form);
}

/**
 * Checks access to a file, inspired by file_file_download.
 */
function oa_folders_check_file_access($file, $node, $field_name) {
 // Try to load $entity and $field.
  $entity = $node;
  $entity_type = 'node';
  $field = field_info_field($field_name);
  $allowed = TRUE;
  $uri = $file->uri;

  // Load the field item that references the file.
  $field_item = NULL;
  if ($entity) {
    // Load all field items for that entity.
    $field_items = field_get_items($entity_type, $entity, $field_name);
    // Find the field item with the matching URI.
    foreach ($field_items as $item) {
      if ($item['uri'] == $uri) {
        $field_item = $item;
        break;
      }
    }
  }

  // Check that $entity, $field and $field_item were loaded successfully
  // and check if access to that field is not disallowed. If any of these
  // checks fail, stop checking access for this reference.
  if (empty($entity) || empty($field) || empty($field_item) || !field_access('view', $field, $entity_type, $entity)) {
    $allowed = FALSE;
    return $allowed;
  }

  // Invoke hook and collect grants/denies for download access.
  // Default to FALSE and let entities overrule this ruling.
  $grants = array('system' => FALSE);
  foreach (module_implements('file_download_access') as $module) {
    $grants = array_merge($grants, array($module => module_invoke($module, 'file_download_access', $field_item, $entity_type, $entity)));
  }
  // Allow other modules to alter the returned grants/denies.
  drupal_alter('file_download_access', $grants, $field_item, $entity_type, $entity);

  if (in_array(TRUE, $grants)) {
    // If TRUE is returned, access is granted and no further checks are
    // necessary.
    $allowed = TRUE;
    return $allowed;
  }

  if (in_array(FALSE, $grants)) {
    // If an implementation returns FALSE, access to this entity is denied
    // but the file could belong to another entity to which the user might
    // have access. Continue with these.
    $allowed = FALSE;
    return $allowed;
  }
  return $allowed;
}

