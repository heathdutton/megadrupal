<?php
/**
 * @file
 *   Field Secret module.
 *
 * @author Khaled Zaidan
 */

/**
 * Implements hook_field_info().
 */
function field_secret_field_info() {
  return array(
    'field_secret' => array(
      'label'             => t('Secret'),
      'description'       => t('This field stores passwords and confidential data.'),
      'default_widget'    => 'field_secret_plain',
      'default_formatter' => 'field_secret_concealed',
      'settings'          => array('max_length' => 255),
      'instance_settings' => array('encrypt' => FALSE, 'copy_button' => TRUE),
      'property_type'     => 'text',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function field_secret_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  $form['max_length'] = array(
    '#type'             => 'textfield',
    '#title'            => t('Maximum length'),
    '#default_value'    => $settings['max_length'],
    '#required'         => FALSE,
    '#element_validate' => array('element_validate_integer_positive'),
    '#description'      => t('The maximum length of the field in characters. Leave blank for an unlimited size.'),
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function field_secret_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form = array();

  $form['encrypt'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Encrypt the value in the database (Recommended)'),
    '#default_value' => $settings['encrypt'],
    '#description'   => t('Requires an implementation of an encryption method (Look at readme.txt).'),
  );

  $form['copy_button'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Add "Copy" button'),
    '#default_value' => $settings['copy_button'],
    '#description'   => t('Provide a "Copy" button next to the secret field.'),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function field_secret_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
      $message = t('%name: the text may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));

      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error'   => 'text_value_length',
        'message' => $message,
      );
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function field_secret_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as &$item) {
    if ($instance['settings']['encrypt']) {
      $item['value'] = aes_encrypt($item['value']);
      $item['encryption'] = 'aes_encrypt';
    }
    else {
      $item['encryption'] = 0;
    }
  }
}

/**
 * Implements hook_field_load().
 */
function field_secret_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if ($item['encryption']) {
        $items[$id][$delta]['value'] = aes_decrypt($item['value']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function field_secret_field_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function field_secret_field_formatter_info() {
  return array(
    'field_secret_concealed' => array(
      'label'       => t('Concealed'),
      'descrpition' => t('The text is not immediately displayed on screen, but only displayed as asterisks with the possiblity to unveil and copy it.'),
      'field types' => array('field_secret'),
      'settings'    =>  array(
        'copy_button' => TRUE,
      ),
    ),
    'field_secret_unformatted' => array(
      'label'       => t('Unformatted'),
      'field types' => array('field_secret'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_secret_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'field_secret_concealed') {
    $element['copy_button'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('Copy Button'),
      '#default_value' => $settings['copy_button'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_secret_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'field_secret_concealed') {
    if ($settings['copy_button']) {
      $summary[] = t('With "Copy" button');
    }
    else {
      $summary[] = t('Without "Copy" button');
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function field_secret_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'field_secret_concealed':
      foreach ($items as $delta => $item) {
        drupal_add_js(drupal_get_path('module', 'field_secret') . '/field_secret.js');
        drupal_add_css(drupal_get_path('module', 'field_secret') . '/field_secret.css');

        $unique_id = $instance['field_name'] . '-' . $instance['id'] . '--' . $delta;

        $output = '';
        $output .= '<div id="field-secret-text-wrapper--' . $unique_id . '" class="field-secret-text-wrapper">';
        $output .=   '<div class="field-secret-text-asterisks">**********</div>';
        $output .=   '<div class="field-secret-text-displayed" style="display:none;">' . $item['value'] . '</div>';
        $output .= '</div>';

        $element[$delta]['value'] = array('#markup' => $output);
        $element[$delta]['hide-and-display'] = array(
          '#type'          => 'checkbox',
          '#title'         => t('Display Text'),
          '#attributes'    => array('title' => t('Display Text'),
                                    'class' => array('field-secret-display-toggle'),
                                    'rel'   => $unique_id),
        );

        if ($settings['copy_button'] && _field_secret_include_zeroclipboard_library()) {
          $element[$delta]['copy-button'] = array(
            '#type'        => 'button',
            '#value'       => t('Copy'),
            '#attributes'  => array('class' => array('field-secret-copy-text')),
          );
        }
      }
      break;

    case 'field_secret_unformatted':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['value']);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function field_secret_field_widget_info() {
  return array(
    'field_secret_plain' => array(
      'label'       => t('Text field'),
      'field types' => array('field_secret'),
    ),
    'field_secret_fancy' => array(
      'label'       => t('Secret Field'),
      'field types' => array('field_secret'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_secret_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  $element += array(
    '#type'           => 'textfield',
    '#default_value'  => $value,
    // We don't the field to be too long
    '#size'           => min(50, $field['settings']['max_length']),
    '#maxlength'      => $field['settings']['max_length'],
    '#prefix'         => '<div class="form-field-secret-concealed">',
    '#suffix'         => '</div>',
    '#attached'       => array('js'  => array(drupal_get_path('module', 'field_secret') . '/field_secret.js'),
                               'css' => array(drupal_get_path('module', 'field_secret') . '/field_secret.css')),
  );

  if ($instance['widget']['type'] == 'field_secret_fancy') {
    // Identical to the original element, only disabled and with asterisks
    $dummy_elements['dummy_pass'] = array(
      '#type'           => 'password',
      '#title'          => $element['#title'],
      '#required'       => $element['#required'],
      // We don't want the field to be too long
      '#size'           => min(50, $field['settings']['max_length']),
      '#maxlength'      => $field['settings']['max_length'],
      '#attributes'     => array('autocomplete' => 'off'),
    );

    // Add the display/hide checkbox and the copy button
    $dummy_elements['hide-and-display'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('Display Text'),
      '#weight'        => 5,
      '#attributes'    => array(
        'title' => t('Display Text'),
        'class' => array('form-field-secret-display-toggle'),
        'rel'   => 'delta-' . $delta),
    );
  }

  if ($instance['settings']['copy_button'] && _field_secret_include_zeroclipboard_library()) {
    $dummy_elements['copy-button'] = array(
      '#type'        => 'button',
      '#value'       => t('Copy'),
      '#weight'        => 10,
      '#attributes'  => array(
        'class' => array('form-field-secret-copy-text'),
        'rel'   => 'delta-' . $delta),
    );
  }

  return array('value' => $element) + $dummy_elements;
}

/**
 * Implements hook_field_widget_error().
 */
function field_secret_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

/**
 * Include the ZeroClipboard library if available, otherwise return false
 */
function _field_secret_include_zeroclipboard_library() {
  $zeroclipboard_path = '';
  if (module_exists('libraries') && is_dir($zeroclipboard_path = libraries_get_path('zeroclipboard'))) {
    // Nothing To Do
    // Special thanks to the libraries module
  }
  elseif (is_dir($zeroclipboard_path = drupal_get_path('module', 'field_secret') . '/zeroclipboard')) {
    // Nothing To Do
  }
  else {
    return FALSE;
  }

  drupal_add_js($zeroclipboard_path . '/ZeroClipboard.js');
  drupal_add_js(array('fieldSecret' => array('ZeroClipboardPath' => $zeroclipboard_path)), 'setting');
  return TRUE;
}
