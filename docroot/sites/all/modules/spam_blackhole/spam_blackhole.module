<?php

/* @file
 * The spam_blackhole module file
 */

/**
 * Implements hook_menu().
 */
function spam_blackhole_menu() {
  $items = array();

  $items['admin/config/content/spam-blackhole'] = array(
    'title' => 'Spam Blackhole',
    'description' => 'Configure spam blackhole settings form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spam_blackhole_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function spam_blackhole_init() {
  global $base_url;
  global $user;
  // Don't do anything if this is an authenticated user
  if ($user->uid != 0) {
    return;
  }
  $base_domain = drupal_substr($base_url, 0, strpos($base_url, '/', 8));
  drupal_add_js(
    array('spam_blackhole' => array(
      'base_url' => $base_domain,
      'dummy_url' => variable_get('spam_blackhole_dummy_base_url', 'http://www.example.com'),
    )),
    'setting'
  );
  drupal_add_js(drupal_get_path('module', 'spam_blackhole') . '/spam_blackhole.js');
}

/**
 * Implements hook_form_alter().
 */
function spam_blackhole_form_alter(&$form, $form_state, $form_id) {
  global $user;
  // Don't do anything if this is an authenticated user
  if ($user->uid != 0) {
    return;
  }

  static $form_id_regexp;
  static $forms = array();
  static $num_forms = 0;
  static $domain;

  // Clean up the form filter and save statically as this maybe called for
  // multiple forms.
  if (!isset($form_id_regexp)) {
    $form_id_regexp = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/'), array('|', '.*'), preg_quote(variable_get('spam_blackhole_filter_forms', ''), '/')) . ')$/';
  }

  $is_form_excluded = FALSE;

  // Check form level filtering
  $filter_by_form = variable_get('spam_blackhole_filter_by_form', 0);
  if ($filter_by_form > 0) {
    $form_match = preg_match($form_id_regexp, $form_id);
    // If $filter_by_form is 1 then listed forms are excluded from any filtering
    // and if 2 then filtering is applied only on listed forms.
    if ($filter_by_form == 1) {
      $is_form_excluded = $form_match;
    }
    else {
      $is_form_excluded = !$form_match;
    }
  }

  // If form is not excluded then apply spam blackhole
  if (!$is_form_excluded) {
    $forms[$num_forms] = $form_id;
    // Add form_ids to be sent to javascript
    drupal_add_js(
      array('spam_blackhole' => array(
        'forms' => $forms,
      )),
      'setting'
    );
    // Do this only if the form action was not modified by somebody else.
    if (drupal_substr($form['#action'], 0, 1) == '/') {
      $form['#action'] = variable_get('spam_blackhole_dummy_base_url', 'http://www.example.com') . $form['#action'];
    }
    $num_forms++;
  }
}

/**
 * Spam blackhole admin settings form
 */
function spam_blackhole_settings_form() {
  $form = array();
  $form['spam_blackhole_domain'] = array(
    '#type' => 'fieldset',
    '#title' => t('Domain configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['spam_blackhole_domain']['spam_blackhole_dummy_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Dummy base URL for form submissions'),
    '#size' => 40,
    '#default_value' => variable_get('spam_blackhole_dummy_base_url', 'http://www.example.com'),
    '#description' => t('The URL to be prepended to the relative URL in form action. Remember to use the protocol as part of the URL eg: http://www.example.com. Do not need a forward slash (/) in the end'),
  );
  $form['spam_blackhole_filter_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Form level filtering options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options = array(
    t('Apply on all forms.'),
    t('Apply on every form except the listed forms.'),
    t('Apply only on the listed forms.')
  );
  $description = t("Enter one form_id per line. You can use * as a wild character.");
  $form['spam_blackhole_filter_options']['spam_blackhole_filter_by_form'] = array(
    '#type' => 'radios',
    '#title' => t('Apply filters by form'),
    '#options' => $options,
    '#default_value' => variable_get('spam_blackhole_filter_by_form', 2),
  );
  $form['spam_blackhole_filter_options']['spam_blackhole_filter_forms'] = array(
    '#type' => 'textarea',
    '#title' => t('Forms'),
    '#default_value' => variable_get('spam_blackhole_filter_forms', ''),
    '#description' => $description,
  );
  $form['spam_blackhole_debug'] = array(
    '#type' => 'fieldset',
    '#title' => t('Debug options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['spam_blackhole_debug']['spam_blackhole_enable_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debug mode'),
    '#default_value' => variable_get('spam_blackhole_enable_debug', '0'),
    '#description' => t('Check this to enable debug information.'),
  );
  return system_settings_form($form);
}
