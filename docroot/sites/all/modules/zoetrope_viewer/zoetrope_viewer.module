<?php

/**
 * @file
 * Zoetrope Ltd. 2014.
 *
 * Adds a UUID field type and field formatters to display zoetrope
 * engage&trade; images in a drupal site.
 */

/**
 * This constant is the zoetrope CDN url, there's a settings page to override it.
 */
define('ZOETROPE_VIEWER_CDN', '//d34tuy4jppw3dn.cloudfront.net');

/**
 * Implements hook_permission().
 */
function zoetrope_viewer_permission() {
  return array(
    'administer zoetrope viewer' => array(
      'title' => t('Administer Zoetrope Viewer Settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_help().
 *
 * @todo Add more help.
 */
function zoetrope_viewer_help($path, $arg){
  switch($path){
    case 'admin/help#zoetrope_viewer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Zoetrope Viewer module defines a Zoetrope field types for the Field module, as well as field display formatters to display Zoetrope 3D images in web pages.  See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function zoetrope_viewer_menu() {
  $menu['admin/config/media/zoetrope_viewer'] = array(
    'title' => 'Zoetrope Viewer Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zoetrope_viewer_settings_form'),
    'access arguments' => array('administer zoetrope viewer'),
    'file' => 'zoetrope_viewer.admin.inc',
  );
  return $menu;
}

/**
 * Validate zoetrope_viewer_settings_form submissions.
 */
function zoetrope_viewer_settings_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['zoetrope_viewer_cdn_enable']) {
    if (!valid_url($values['zoetrope_viewer_cdn'])) {
      form_set_error('zoetrope_viewer_cdn', t('The CDN url does not appear to be a valid url.'));
    }
  }
}

/**
 * Implements hook_field_info().
 */
function zoetrope_viewer_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'zoetrope_uuid_field' => array(
      'label' => t('Zoetrope ID'),
      'description' => t('Add a Zoetrope Engage&trade; image to an entity'),
      'default_widget' => 'zoetrope_uuid_field_text_widget',
      'default_formatter' => 'zoetrope_engage_image',
      'property_type' => 'zoetrope_uuid_field',
      'property_callbacks' => array('zoetrope_viewer_uuid_field_property_info_callback'),
    ),
  );
}

/**
 * Callback to alter the property info of Zoetrope UUID fields.
 *
 * @see zoetrope_viewer_field_info()
 */
function zoetrope_viewer_uuid_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<zoetrope_uuid_field>' : 'zoetrope_uuid_field';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['auto creation'] = 'zoetrope_viewer_uuid_field_field_data_auto_creation';
  $property['property info'] = zoetrope_viewer_uuid_field_field_data_property_info();

  unset($property['query callback']);
}

/**
 * Create an empty field instance.
 *
 * Returns the default array structure for a Dimensions field for use when
 * creating new data arrays through an entity metadata wrapper.
 *
 * @see zoetrope_viewer_uuid_field_property_info_callback()
 */
function zoetrope_viewer_uuid_field_field_data_auto_creation() {
  return array(
    'zoetrope_uuid' => '',
    'start_position' => 0,
    'gallery_image_positions' => array(),
  );
}

/**
 * Defines info for the properties of the Dimensions field data structure.
 *
 * @see zoetrope_viewer_uuid_field_property_info_callback()
 */
function zoetrope_viewer_uuid_field_field_data_property_info($name = NULL) {
  return array(
    // Real, stored data tokens.
    'zoetrope_uuid' => array(
      'label' => t('Zoetrope ID'),
      'description' => t('The Zoetrope ID for the image.'),
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback ' => 'entity_property_verbatim_set',
    ),
    'start_position' => array(
      'label' => t('Starting Position'),
      'description' => t('The index of the initial view.'),
      'type' => 'integer',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'gallery_image_positions' => array(
      'label' => t('Gallery Image Positions'),
      'description' => t('Holds information about the positions and priorities of images to be used for 2D gallery scenarios.'),
      'type' => 'list<struct>',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'property info' => array(
        // These properties are not being correctly exposed as tokens.
        'weight' => array(
          'label' => t('Gallery image position weight'),
          'description' => t('the priority/weight of this gallery image position'),
          'type' => 'int',
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'position' => array(
          'label' => t('Gallery image position'),
          'description' => t("the position of this gallery image, in the style of 'start_position'"),
          'type' => 'int',
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'gallery_preview_url' => array(
          'label' => t('Preview Image URI'),
          'description' => t('URI to preview image.'),
          'type' => 'uri',
          'getter callback' => 'entity_metadata_zoetrope_viewer_get_properties',
        ),
      ),
    ),

    // Dynamic properties.
    'preview_url' => array(
      'label' => t('Preview Image URI'),
      'description' => t('URI to preview image.'),
      'type' => 'uri',
      'getter callback' => 'zoetrope_viewer_entity_metadata_get_properties',
    ),
  );
}

/**
 * Callback to get entity dynamic entity properties.
 *
 * @todo Add gallery_preview_url tokens.
 *
 * @see zoetrope_viewer_uuid_field_field_data_property_info()
 */
function zoetrope_viewer_entity_metadata_get_properties($data, array $options, $name, $entity_type) {
  if ($name == 'preview_url') {
    return _zoetrope_viewer_image_url($data['zoetrope_uuid'], 1000, $data['start_position']);
  }
}

/**
 * Implements hook_field_presave().
 *
 * Gallery_image_positions needs to be serialized here.
 */
function zoetrope_viewer_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as & $item) {
    if (isset($item['gallery_image_positions']) && is_array($item['gallery_image_positions'])) {
      $item['gallery_image_positions'] = serialize($item['gallery_image_positions']);
    }
  }
}

/**
 * Implements hook_field_load().
 */
function zoetrope_viewer_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($items as & $entity) {
    foreach ($entity as & $item) {
      if (isset($item['gallery_image_positions']) && is_string($item['gallery_image_positions'])) {
        $item['gallery_image_positions'] = unserialize($item['gallery_image_positions']);
      }
    }
  }
}

/**
 * Implements hook_field_validate().
 *
 * @todo Add validation of gallery_image_positions.
 */
function zoetrope_viewer_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['zoetrope_uuid'])) {
      // Test for valid UUID (mongo ObjectID style UUID).
      if (!preg_match('/^[0-9a-fA-F]{24}$/', $item['zoetrope_uuid'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'zoetrope_uuid_field_uuid_invalid',
          'message' => t('Zoetrope ID field must be a valid UUID.'),
        );
      }

      if (!empty($item['start_position'])) {
        $value = $item['start_position'];
        if (!is_numeric($value) || intval($value) != $value || (intval($value) < 0) || (intval($value) > 107)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'zoetrope_uuid_field_start_position_invalid',
            'message' => t('The starting position needs to be an integer between 0-107.'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 *
 * Only widget is a text input box.
 */
function zoetrope_viewer_field_widget_info() {
  return array(
    'zoetrope_uuid_field_text_widget' => array(
      'label' => t('Zoetrope text field'),
      'field types' => array('zoetrope_uuid_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * This implements our input box as defined in hook_field_widget_info().
 */
function zoetrope_viewer_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $uuid = isset($items[$delta]['zoetrope_uuid']) ? $items[$delta]['zoetrope_uuid'] : '';

  $start_position = isset($items[$delta]['start_position']) ? $items[$delta]['start_position'] : '0';

  $widget = &$element;
  $widget['#delta'] = $delta;
  switch ($instance['widget']['type']) {
    case 'zoetrope_uuid_field_text_widget':
      $widget += array(
        '#type' => 'fieldset',
        '#title' => t('Zoetrope Image'),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'zoetrope_viewer') . '/css/zoetrope_viewer_admin.css'),
        ),
      );

      $widget['zoetrope_uuid'] = array(
        '#title' => t('Zoetrope ID'),
        '#type' => 'textfield',
        '#default_value' => $uuid,
        '#size' => 40,
        '#maxlength' => 40,
        '#attributes' => array(
          'class' => array('zoetrope-uuid-field-zoetrope-id'),
        ),
      );
      $widget['start_position'] = array(
        '#title' => t('Start position'),
        '#type' => 'textfield',
        '#default_value' => $start_position,
        '#size' => 3,
        '#maxlength' => 3,
        '#attributes' => array(
          'class' => array('zoetrope-uuid-field-starting-position'),
        ),
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function zoetrope_viewer_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'zoetrope_uuid_field_uuid_invalid':
      form_error($element['zoetrope_uuid'], $error['message']);
      break;

    case 'zoetrope_uuid_field_start_position_invalid':
      form_error($element['start_position'], $error['message']);
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function zoetrope_viewer_field_is_empty($item, $field) {
  return empty($item['zoetrope_uuid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function zoetrope_viewer_field_formatter_info() {
  $info = array(
    'zoetrope_engage_image' => array(
      'label' => t('Zoetrope Reel viewer'),
      'field types' => array('zoetrope_uuid_field', 'text'),
      'description' => t('Embeds the zoetrope viewer.'),
      'settings' => array(
        'inline_image' => FALSE,
        'force_mini' => FALSE,
        'trigger_image' => '',
        '2d_version' => FALSE,
        'image_style' => '',
        'loadspin' => FALSE,
        'idle-animate' => FALSE,
        'autoload' => FALSE,
        'preload' => FALSE,
        'show-cta' => TRUE,
      ),
    ),
    'zoetrope_image_gallery' => array(
      'label' => t('Image + Zoetrope Images'),
      'field types' => array('image'),
      'description' => t('Image formatter which includes zoetrope images.'),
      'settings' => array(
        'zoetrope_uuid_field_name' => '',
        'position' => 'first',
        'image_style' => '',
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function zoetrope_viewer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($instance['display'][$view_mode]['type']) {
    case 'zoetrope_engage_image':

      $states_non_2d = array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][2d_version]"]' => array('checked' => FALSE),
        ),
      );

      $element['2d_version'] = array(
        '#type' => 'checkbox',
        '#title' => t('2D version'),
        '#description' => t('Forces the viewer to just show a 2D image.'),
        '#default_value' => $settings['2d_version'],
      );

      $element['inline_image'] = array(
        '#type' => 'checkbox',
        '#title' => t('Inline Engage image'),
        '#description' => t('Inline images appear in the page content, whereas normal engage images open in a responsive lightbox overlay.'),
        '#default_value' => $settings['inline_image'],
        '#states' => $states_non_2d,
      );

      $element['force_mini'] = array(
        '#type' => 'checkbox',
        '#title' => t('Force Mini (Non inline only)'),
        '#description' => t('Forces the viewer to display a mini zoetrope viewer, rather than the responsive one in the interest of bandwidth.'),
        '#default_value' => $settings['force_mini'],
        '#states' => $states_non_2d,
      );

      $element['loadspin'] = array(
        '#type' => 'checkbox',
        '#title' => t('Spin once on load'),
        '#description' => t('Spins one time when loaded.'),
        '#default_value' => $settings['autospin'],
        '#states' => $states_non_2d,
      );

      $element['idle-animate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Spin when Idle'),
        '#description' => t('Spins when not being dragged by the user.'),
        '#default_value' => $settings['idle-animate'],
        '#states' => $states_non_2d,
      );

      $element['show-cta'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show call to action'),
        '#description' => t('Hides the labels which indcate the viewer is interactive.'),
        '#default_value' => $settings['show-cta'],
        '#states' => $states_non_2d,
      );

      $element['autoload'] = array(
        '#type' => 'checkbox',
        '#title' => t('Instant load'),
        '#description' => t('autoload on pageload.'),
        '#default_value' => $settings['autoload'],
        '#states' => $states_non_2d,
      );

      $element['preload'] = array(
        '#type' => 'checkbox',
        '#title' => t('Preload'),
        '#description' => t('Preload for extra responsiveness at the cost of server bandwidth'),
        '#default_value' => $settings['preload'],
        '#states' => $states_non_2d,
      );
      $element['preload']['#states']['visible'][':input[name="autoload"]'] = array('value' => FALSE);

      $fields_info = field_info_instances($instance['entity_type'], $instance['bundle']);
      $options = array();
      foreach ($fields_info as $field_name => $field_instance) {
        $field_info = field_info_field($field_name);
        if ($field_info['type'] == 'image') {
          $options[$field_name] = $field_instance['label'];
        }
      }

      $element['trigger_image'] = array(
        '#title' => t('Trigger Image Override field'),
        '#type' => 'select',
        '#description' => t('Select an image field to use as the trigger image if present.'),
        '#default_value' => $settings['trigger_image'],
        '#options' => $options,
        '#empty_option' => t('None, (Use initial Engage view).'),
      );

      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;

    case 'zoetrope_image_gallery':

      $fields_info = field_info_instances($instance['entity_type'], $instance['bundle']);
      $options = array('' => 'None');
      foreach ($fields_info as $field_name => $field_instance) {
        $field_info = field_info_field($field_name);
        if ($field_info['type'] == 'zoetrope_uuid_field') {
          $options[$field_name] = $field_instance['label'];
        }
      }

      $element['zoetrope_uuid_field_name'] = array(
        '#type' => 'select',
        '#title' => t('Zoetrope ID field to combine'),
        '#description' => t('The field on this entity to combine for display. You probably want to hide the zoetrope_uuid_field which you use here.'),
        '#default_value' => $settings['zoetrope_uuid_field_name'],
        '#options' => $options,
      );

      $element['position'] = array(
        '#type' => 'select',
        '#title' => t('Zoetrope positions'),
        '#description' => t('Where should the zoetrope images be placed'),
        '#default_value' => $settings['position'],
        '#options' => array(
          'start' => t('Start'),
          'end' => t('End'),
        ),
      );

      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function zoetrope_viewer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  switch ($display['type']) {
    case 'zoetrope_engage_image':
      $summary[] = $settings['inline_image'] ? t('Inline (no overlay)') : t('Show in Overlay');
      $summary[] = $settings['force_mini'] ? t('Mini Viewer') : t('Responsive Viewer');
      $summary[] = $settings['trigger_image'] ? t('Using field `@field` for the trigger image',
        array('@field' => $settings['trigger_image'])
      ) : t('Zoetrope trigger image.');
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }
      break;

    case 'zoetrope_image_gallery':
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }
      if (empty($settings['zoetrope_uuid_field_name'])) {
        $summary[] = t('Engage Image configured');
      }
      else {
        $summary[] = t('Using field `@name` at the @pos of list.',
          array('@name' => $settings['zoetrope_uuid_field_name'], '@pos' => $settings['position'])
        );
      }
      break;
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function zoetrope_viewer_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {

  foreach ($entities as $id => $entity) {
    $display = $displays[$id];
    // If it's a zoetrope_image_gallery display.
    if ($display['type'] == 'zoetrope_image_gallery' && !empty($display['settings']['zoetrope_uuid_field_name'])) {
      // Add the zoetrope engage images if we can.
      if (isset($entity->{$display['settings']['zoetrope_uuid_field_name']})) {
        $zoetrope_uuid_field = $entity->{$display['settings']['zoetrope_uuid_field_name']}[$langcode];
        $e_items = &$items[$id];
        foreach ($zoetrope_uuid_field as $value) {
          if ($display['settings']['position'] == 'end') {
            array_push($e_items, $value);
          }
          else {
            array_unshift($e_items, $value);
          }
        }
      }
    }
    elseif ($display['type'] == 'zoetrope_engage_image' && !empty($display['settings']['trigger_image'])) {
      if (isset($entity->{$display['settings']['trigger_image']})) {
        $image_field = $entity->{$display['settings']['trigger_image']}[$langcode];
        $e_items = &$items[$id];
        // Match up image field deltas with zoetrope image deltas.
        foreach ($e_items as $delta => & $value) {
          if (!empty($image_field[$delta])) {
            $value['trigger_image'] = $image_field[$delta];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function zoetrope_viewer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];

  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'zoetrope_engage_image':
        $element[$delta] = _zoetrope_viewer_engage_image_field_view($item, $settings, $instance['id']);
        break;

      case 'zoetrope_image_gallery':

        if (isset($item['zoetrope_uuid_field'])) {
          $element[$delta] = _zoetrope_viewer_engage_image_field_view($item, $settings);
        }
        else {
          $element[$delta] = array(
            '#theme' => 'image_formatter',
            '#item' => $item,
            '#image_style' => $display['settings']['image_style'],
            '#path' => '',
          );
        }
        break;
    }
  }
  return $element;
}

/**
 * Helper to make a renderable array.
 *
 * @param array $item
 *   The item being rendered.
 * @param array $settings
 *   The field settings.
 * @param mixed $rel
 *   A grouping variable for multiple Zoetropes.
 *
 * @return array
 *   A renderable array.
 */
function _zoetrope_viewer_engage_image_field_view($item, $settings, $rel = FALSE) {
  global $language;

  $img_uuid = empty($item['zoetrope_uuid']) ? $item['value'] : $item['zoetrope_uuid'];
  $start_position = isset($item['start_position']) ? $item['start_position'] : 0;

  $site_uuid = variable_get('zoetrope_viewer_site_uuid', '');

  // Override sites default CDN (done by modules sometimes).
  $cdn = !empty($settings['cdn']) ? $settings['cdn'] : FALSE;
  $cdn = !empty($item['cdn']) ? $item['cdn'] : $cdn;

  $preview_path = _zoetrope_viewer_image_url($img_uuid, 500, $start_position, $cdn);

  $e = array(
    '#theme' => 'image',
    '#path' => $preview_path,
    '#attributes' => array(
      'data-zoe-image' => $img_uuid,
      'data-zoe-site' => $site_uuid,
      'data-zoe-rel' => $rel,
      'data-zoe-start-position' => $start_position,
      'data-zoe-lang' => $language->language,
    ),
  );

  // Force the size of the trigger image (depreciated).
  if (isset($settings['trigger_size']) && intval($settings['trigger_size']) != 0) {
    $e['#attributes']['width'] = $settings['trigger_size'];
    $e['#attributes']['height'] = $settings['trigger_size'];
  }

  // Use the sizes from an image style for the trigger.
  if (!empty($settings['image_style'])) {
    $dimensions = array('width' => 500, 'height' => 500);
    image_style_transform_dimensions($settings['image_style'], $dimensions);
    $e['#attributes']['width'] = $dimensions['width'];
    $e['#attributes']['height'] = $dimensions['height'];
  }

  if (!isset($settings['2d_version']) || $settings['2d_version'] == FALSE) {
    $e['#attributes']['class'] = array('zoe-engage-image');
  }
  else {
    // Keep the markup cleaner with attributes which wont be used.
    return $e;
  }

  // Add the JS and CSS, always from the Zoetrope CDN.
  $e['#attached'] = array(
    'js' => array(
      ZOETROPE_VIEWER_CDN . '/v3/js/zoetrope.jquery.js' => array(
        'type' => 'external',
        'group' => JS_THEME,
        'weight' => 1000000,
      )
    ),
    'css' => array(
      ZOETROPE_VIEWER_CDN . '/v3/css/zoetrope.jquery.min.css' => array(
        'type' => 'external',
      )
    )
  );

  if ($cdn) {
    $e['#attributes']['data-zoe-cdn'] = $cdn;
  }

  // Alternate trigger image.
  if (isset($settings['trigger_image']) && !empty($item['trigger_image'])) {
    $e['#path'] = $item['trigger_image'];
    $e['#path'] = $item['trigger_image']['uri'];

    if (!empty($settings['image_style'])) {
      $e['#theme'] = 'image_style';
      $e['#style_name'] = $settings['image_style'];
    }
  }

  // Force the mini viewer.
  if (isset($settings['force_mini']) && $settings['force_mini']) {
    $e['#attributes']['class'][] = 'zoe-mini';
  }

  // Inline the viewer.
  if (isset($settings['inline_image']) && !$settings['inline_image']) {
    $e['#attributes']['data-zoe-inline'] = 'false';
  }

  // Spin once on load.
  if (!empty($settings['loadspin']) && $settings['loadspin']) {
    $e['#attributes']['data-zoe-loadspin'] = 'true';
  }

  // Animate.
  if (!empty($settings['auto-animate']) && $settings['auto-animate']) {
    $e['#attributes']['data-zoe-auto-animate'] = 'true';
  }

  // Hide CTA.
  if (!empty($settings['show-cta']) && $settings['show-cta']) {
    $e['#attributes']['data-zoe-show-cta'] = 'true';
  }

  // Autoload.
  if (!empty($settings['autoload']) && $settings['autoload']) {
    $e['#attributes']['data-zoe-autoload'] = 'true';
  }

  // Preload.
  if (isset($settings['preload']) && !$settings['preload']) {
    $e['#attributes']['data-zoe-preload'] = 'false';
  }

  return $e;
}

/**
 * Returns a CDN base URL, in the right format
 *
 * @param string $cdn
 *   CDN override, defaults false to use global setting
 *   in `zoetrope_viewer_cdn`.
 *
 * @return string Base URL for the CDN.
 */
function _zoetrope_viewer_cdn_url($cdn = ""){
  $mode = !empty($_SERVER['HTTPS']) ? 'https:' : 'http:';
  $cdn_enable = variable_get('zoetrope_viewer_cdn_enable');
  if ($cdn == "" && $cdn_enable) {
    $cdn = variable_get('zoetrope_viewer_cdn', ZOETROPE_VIEWER_CDN);
  }
  else{
    $cdn = ZOETROPE_VIEWER_CDN;
  }
  return $mode . $cdn;
}

/**
 * Returns a preview image URL from the CDN.
 *
 * @param string $uuid
 *   The Zoetrope image UUID.
 * @param int $size
 *   The image size, can be either 250,500,1000.
 * @param int $position
 *   The position between 0-107.
 * @param string $cdn
 *   The base CDN, if not using the site default CDN.
 *
 * @return string
 *   A fully formed image URL.
 */
function _zoetrope_viewer_image_url($uuid, $size = 500, $position = 0, $cdn = "") {
  $cdn = _zoetrope_viewer_cdn_url($cdn);
  if (!in_array($size, array(250, 500, 1000))) {
    watchdog('Zoetrope Viewer', 'Invalid image size `@size` selected for preview, should have been 250,500 or 1000.',
      array('@size' => $size), WATCHDOG_ERROR
    );
  }
  return $cdn . '/' . $uuid . '/' . $size . '/' . $position . '.jpg';
}

/**
 * Shortcut for `_zoetrope_viewer_image_url($uuid, 500, $start_position, $cdn)`.
 *
 * @param object $field
 *   The zoetrope field to retrieve an image for.
 * @param string $cdn
 *   String CDN override.
 *
 * @return string
 *   A fully formed image URL.
 *
 * @see _zoetrope_viewer_image_url()
 */
function zoetrope_viewer_preview_image_url($field, $cdn = "") {
  return _zoetrope_viewer_image_url($field['zoetrope_uuid'], 500, $field['start_position'], $cdn);
}

/**
 * Shortcut for `_zoetrope_viewer_image_url($uuid, 1000, $start_position, $cdn)`.
 *
 * @param object $field
 *   The zoetrope field to retrieve an image for.
 * @param string $cdn
 *   String CDN override.
 *
 * @return string
 *   A fully formed image URL.
 *
 * @see _zoetrope_viewer_image_url()
 */
function zoetrope_viewer_large_image_url($field, $cdn = "") {
  return _zoetrope_viewer_image_url($field['zoetrope_uuid'], 1000, $field['start_position'], $cdn);
}
