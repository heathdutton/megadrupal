<?php

/**
 * @file
 * Drupal hooks.
 */

/* Permissions */
define('FB_POST_PERM_POST', 'post to facebook');
define('FB_POST_PERM_ADMIN', 'administer fb_post');

/* Facebook permissions */
define('FB_POST_FB_PERM_PUBLISH_ACTIONS', 'publish_actions');
define('FB_POST_FB_PERM_MANAGE_PAGES', 'manage_pages');

/**
 * Implements hook_menu().
 */
function fb_post_menu() {
  $items['admin/config/services/fb-post'] = array(
    'title' => 'Facebook Post App Settings',
    'description' => 'FB Post administration page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fb_post_app_settings_form'),
    'access arguments' => array(FB_POST_PERM_ADMIN),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fb_post.admin.inc',
  );
  $items['user/%user/edit/fb-post'] = array(
    'title' => 'Facebook Account Connection',
    'page callback' => 'fb_post_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array(FB_POST_PERM_POST),
    'type' => MENU_LOCAL_TASK,
    'file' => 'fb_post.admin.inc',
  );
  $items['user/%user/edit/fb-post/redirect-code'] = array(
    'title' => 'Facebook Account Connection',
    'page callback' => 'fb_post_redirect_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array(FB_POST_PERM_POST),
    'type' => MENU_CALLBACK,
    'file' => 'fb_post.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fb_post_permission() {
  return array(
    FB_POST_PERM_POST => array(
      'title' => t('Post to Facebook'),
      'description' => t('Allow users to make posts to their Facebook account feeds'),
    ),
    FB_POST_PERM_ADMIN => array(
      'title' => t('Administer Facebook Post'),
      'description' => t('Allow users to perform administrative tasks'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function fb_post_theme($existing, $type, $theme, $path) {
  return array(
    'fb_post_connect' => array(
      'variables' => array('connection_path' => NULL),
      'file' => 'fb_post.theme.inc',
    ),
    'fb_post_user_info' => array(
      'variables' => array(
        'user_info' => NULL,
        'remove_connection_button' => NULL,
      ),
      'file' => 'fb_post.theme.inc',
    ),
    'fb_post_request_app_settings' => array(
      'variables' => array(
        'account' => NULL,
      ),
      'file' => 'fb_post.theme.inc',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fb_post_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'fb_post', 'fb_post.admin');

  $node_type = $form['#node_type']->type;
  $enabled_for_content = variable_get('fb_post_enabled_for_content', array());
  $enabled_for_comments = variable_get('fb_post_enabled_for_comments', array());
  $enabled_by_default = variable_get('fb_post_enabled_by_default', array());

  $form['fb_post'] = array(
    '#type' => 'fieldset',
    '#title' => t('Facebook Post'),
    '#tree' => TRUE,
    '#group' => 'additional_settings',
  );
  $form['fb_post']['enabled_for_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable for this content type'),
    '#default_value' => ($enabled_for_content && in_array($node_type, $enabled_for_content)) ? 1 : 0,
  );

  if (module_exists('comment')) {
    $form['fb_post']['enabled_for_comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable on the comment form of this content type (commenting must be enabled for this content type)'),
      '#default_value' => ($enabled_for_comments && in_array($node_type, $enabled_for_comments)) ? 1 : 0,
    );
  }

  $form['fb_post']['enabled_by_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable reposting by default'),
    '#description' => t('"Repost to Facebook" checkbox will be checked on by default.'),
    '#default_value' => ($enabled_by_default && in_array($node_type, $enabled_by_default)) ? 1 : 0,
  );
  $form['#submit'][] = 'fb_post_node_type_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fb_post_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (user_access(FB_POST_PERM_POST) && !empty($form['#entity_type'])) {
    module_load_include('inc', 'fb_post');
    global $user;

    if (fb_post_connected($user)) {
      if ($form['#entity_type'] == 'node' && empty($form['#node']->nid)) {
        $node_type = $form['#node']->type;
        $enabled_for_content = variable_get('fb_post_enabled_for_content', array());
        $enabled_by_default = variable_get('fb_post_enabled_by_default', array());

        if (in_array($node_type, $enabled_for_content)) {
          $form['fb_post'] = array(
            '#type' => 'fieldset',
            '#title' => t('Facebook Post'),
            '#collapsible' => TRUE,
            '#tree' => TRUE,
          );
          $form['fb_post']['send'] = array(
            '#type' => 'checkbox',
            '#title' => t('Repost to Facebook'),
            '#default_value' => ($enabled_by_default && in_array($node_type, $enabled_by_default)) ? 1 : 0,
          );
          $form['fb_post']['message'] = array(
            '#type' => 'textfield',
            '#title' => t('Message'),
            '#description' => t('Leave empty to use the entered title as the message.'),
          );
          $form['fb_post']['description'] = array(
            '#type' => 'textfield',
            '#title' => t('Description'),
            '#description' => t('Optional description for your message.'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fb_post_form_comment_form_alter(&$form, &$form_state, $form_id) {
  if (user_access(FB_POST_PERM_POST) && !empty($form['#entity_type'])) {
    module_load_include('inc', 'fb_post');
    global $user;

    if (fb_post_connected($user)) {
      if ($form['#entity_type'] == 'comment' && empty($form['cid']['#value'])) {
        $node_type = $form['#node']->type;
        $enabled_for_comments = variable_get('fb_post_enabled_for_comments', array());

        if (in_array($node_type, $enabled_for_comments)) {
          $form['fb_post_send'] = array(
            '#type' => 'checkbox',
            '#title' => t('Repost to Facebook'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function fb_post_node_insert($node) {
  module_load_include('inc', 'fb_post');
  global $user;

  $fb_connected = fb_post_connected($user);
  if (!empty($node->fb_post['send']) && $fb_connected) {
    $message = (!empty($node->fb_post['message'])) ? $node->fb_post['message'] : $node->title;
    $description = (!empty($node->fb_post['description'])) ? $node->fb_post['description'] : '';
    $link = url('node/' . $node->nid, array('absolute' => TRUE));
    $fb_post = array(
      'message' => $message,
      'description' => $description,
      'link' => $link,
    );

    fb_post_make_post($fb_connected, $fb_post, $node);
  }
}

/**
 * Implements of hook_comment_insert().
 */
function fb_post_comment_insert($comment) {
  module_load_include('inc', 'fb_post');
  global $user;

  $node = node_load($comment->nid);
  $comment_body = field_get_items('comment', $comment, 'comment_body');
  $message = strip_tags(filter_xss($comment_body[0]['value']));
  $link = url('node/' . $node->nid, array('absolute' => TRUE, 'fragment' => 'comment-' . $comment->cid));

  $fb_connected = fb_post_connected($user);
  if (!empty($comment->fb_post_send) && $fb_connected) {
    $fb_post = array(
      'message' => $message,
      'link' => $link,
    );

    fb_post_make_post($fb_connected, $fb_post, $comment);
  }
}
