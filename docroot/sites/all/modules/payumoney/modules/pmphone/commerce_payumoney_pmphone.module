<?php
/**
 * @file
 * Creates a Phone field for PayUMoney at Billing Address.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_payumoney_pmphone_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_attach_presave().
 */
function commerce_payumoney_pmphone_field_attach_presave($entity_type, $entity) {
  // Store additional address fields serialized in addressfield data column.
  $addressfields = commerce_payumoney_pmphone_addressfield_types();
  foreach ($addressfields as $field_name) {
    if (isset($entity->$field_name)) {
      $field = field_info_field('commerce_customer_address');
      $instance = field_info_instance('commerce_customer_profile', 'commerce_customer_address', $field_name);
      $default_fields = array_keys(addressfield_default_values($field, $instance));
      $default_fields[] = 'element_key';
      foreach ($entity->$field_name as $lang_code => $fields) {
        foreach ($fields as $delta => $fieldset) {
          $data = array();
          foreach ($fieldset as $field_key => $field_value) {
            // Compare fields with addressfield default fields and store any
            // additional fields in data.
            if (!in_array($field_key, $default_fields)) {
              // Store additional field value.
              $data[$field_key] = $field_value;
            }
          }
          if (!empty($data)) {
            $entity->{$field_name}[$lang_code][$delta]['data'] = serialize($data);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_load().
 *
 * Load and set additional addressfield field values from serialized data
 * column.
 */
function commerce_payumoney_pmphone_field_attach_load($entity_type, $entities, $age, $options) {
  $addressfields = commerce_payumoney_pmphone_addressfield_types();
  $phone_elements = drupal_map_assoc(array(
    'pm_phone',
  ));

  foreach ($entities as $entity) {
    foreach ($addressfields as $field_name) {
      if (empty($entity->{$field_name})) {
        continue;
      }
      foreach ($entity->$field_name as $lang_code => $fields) {
        foreach ($fields as $delta => $fieldset) {
          // Fill default values for pre-pm_phone addresses to keep
          // Commerce Order from duplicating address.
          if (empty($fieldset['data'])) {
            $fieldset['data'] = serialize(array_fill_keys($phone_elements, ''));
          }

          // Unserialize data, else skip if string
          if (($data = unserialize($fieldset['data'])) && is_array($data)) {
            // Store unserialized data values in additional fields
            $phone_data = array_intersect_key($data, $phone_elements);
            $entity->{$field_name}[$lang_code][$delta] = array_merge($fieldset, $phone_data);
          }
        }
      }
    }
  }
}

/**
 * Returns an array of the field names of any addressfields.
 */
function commerce_payumoney_pmphone_addressfield_types() {
  static $addressfields;
  if (!isset($addressfields)) {
    $result = db_query("SELECT field_name FROM {field_config} WHERE type = 'addressfield'");
    $addressfields = array();
    foreach ($result as $row) {
      $addressfields[] = $row->field_name;
    }
  }
  return $addressfields;
}

/**
 * Renders Phone Field.
 */
function _commerce_payumoney_pmphone_render_address($format) {
  $format['pmphone_block'] = array(
    '#title' => t('Phone'),
    '#type' => 'addressfield_container',
    '#required' => TRUE,
    'pm_phone' => array(
      '#title' => t('Phone'),
      '#size' => 15,
      '#attributes' => array('class' => array('pm-phone')),
      '#tag' => 'span',
    ),
  );
  return $format;
}
