<?php

/**
 * @file
 * PayUMoney module for Drupal Commerce.
 */

/**
 * Administration forms form payment method.
 */
function commerce_payumoney_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'key' => '',
    'salt' => '',
    'url' => '',
  );
  $form['key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Key'),
    '#default_value' => $settings['key'],
  );
  $form['salt'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Salt'),
    '#default_value' => $settings['salt'],
  );
  $url = array(0 => t('Test'),1 => t('Production'));
  $form['url'] = array(
    '#type' => 'radios',
    '#title' => t('Base URI'),
    '#options' => $url,
    '#default_value' => $settings['url'],
  );
  return $form;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payumoney_commerce_payment_method_info() {
  $icon = _commerce_payumoney_icons();
  $display_title = t('PayUMoney <br/>!logo', array('!logo' => $icon));
  $payment_methods = array();
  $payment_methods['commerce_payumoney'] = array(
    'title' => t("PayUMoney"),
    'display_title' => $display_title,
    'short_title' => 'PayUMoney Payment Gateway',
    'description' => t("PayUMoney Payment Gateway"),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Implements hook_redirect_form().
 */
function commerce_payumoney_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();

  // Set all data in array.
  $data = array(
    'key' => $payment_method['settings']['key'],
    'txnid' => substr(hash('sha256', mt_rand() . microtime()), 0, 20),
    'amount' => $wrapper->commerce_order_total->amount->value() / 100,
    'productinfo' => 'Product order ID:' . $order->order_id,
    'firstname' => $billing_address['name_line'],
    'email' => $order->mail,
    'phone' => $billing_address['pm_phone'],
    'furl' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'surl' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'service_provider' => 'payu_paisa',
    'salt' => $payment_method['settings']['salt'],
    'udf1' => '',
    'udf2' => '',
    'udf3' => '',
    'udf4' => '',
    'udf5' => '',
    'udf6' => '',
    'udf7' => '',
    'udf8' => '',
    'udf9' => '',
    'udf10' => '',
  );
  // Peform phone verification if its all digits otherwise go back.
  if (!preg_match('/^\d{10}$/', $data['phone'])) {
    drupal_set_message(t('Phone number should be 10 digit number.'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    return '';
  }
  // Check if all data are available else generate hash.
  if (!isset($data['key'])
       || !isset($data['txnid'])
       || !isset($data['amount'])
       || !isset($data['firstname'])
       || !isset($data['email'])
       || !isset($data['phone'])
       || !isset($data['productinfo'])
       || !isset($data['surl'])
       || !isset($data['furl'])
       || empty($data['service_provider'])) {
    drupal_set_message(t('Required Information are not available. Please Try again...'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    return '';
  }
  else {
    $hash_sequence = "key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10";
    $hash_vars_seq = explode('|', $hash_sequence);
    $hash_string = '';
    foreach ($hash_vars_seq as $hash_var) {
      if (($hash_var == 'phone')
          || ($hash_var == 'salt')
          || ($hash_var == 'service_provider')) {
        continue;
      }
      $hash_string .= isset($data[$hash_var]) ? $data[$hash_var] : '';
      $hash_string .= '|';
    }
    $hash_string .= $data['salt'];
    $hash = strtolower(hash('sha512', $hash_string));
  }
  // Push $hash to last position in array $data[].
  $data['hash'] = $hash;
  // Redirect URI.
  if (($payment_method['settings']['url']) == 1) {
    $url = url('https://secure.payu.in/_payment');
  }
  else {
    $url = url('https://test.payu.in/_payment');
  }
  // Form elements for submission.
  foreach ($data as $key => $value) {
    if ($key == 'udf1'
       || $key == 'udf2'
       || $key == 'udf3'
       || $key == 'udf4'
       || $key == 'udf5'
       || $key == 'udf6'
       || $key == 'udf7'
       || $key == 'udf8'
       || $key == 'udf9'
       || $key == 'udf10'
       || $key == 'salt') {
      continue;
    }
    $form[$key] = array(
      '#type'  => 'hidden',
      '#value' => $value,
    );
  }
  if (isset($hash)) {
    $form['#action'] = $url;
  }
  else {
    drupal_set_message(t('Critical Information not generated. Please Try again.'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    return '';
  }
  return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_payumoney_redirect_form_validate($order, $payment_method) {
  $message = t('Security error ip Address was: @ip', array('@ip' => ip_address()));
  $payload['status'] = $_REQUEST["status"];
  $payload['firstname'] = $_REQUEST["firstname"];
  $payload['amount'] = $_REQUEST["amount"];
  $payload['txnid'] = $_REQUEST["txnid"];
  $payload['hash'] = $_REQUEST["hash"];
  $payload['key'] = $_REQUEST["key"];
  $payload['productinfo'] = $_REQUEST["productinfo"];
  $payload['email'] = $_REQUEST["email"];
  $payload['salt'] = $payment_method['settings']['salt'];

  if (isset($_REQUEST["additionalCharges"])) {
    $additional_charges = $_REQUEST["additionalCharges"];
    $ret_hash_seq = $additional_charges . '|' . $payload['salt'] . '|' . $payload['status'] . '|||||||||||' . $payload['email'];
    $ret_hash_seq .= '|' . $payload['firstname'] . '|' . $payload['productinfo'] . '|' . $payload['amount'];
    $ret_hash_seq .= '|' . $payload['txnid'] . '|' . $payload['key'];
  }
  else {
    $ret_hash_seq = $payload['salt'] . '|' . $payload['status'] . '|||||||||||' . $payload['email'] . '|';
    $ret_hash_seq .= $payload['firstname'] . '|' . $payload['productinfo'] . '|' . $payload['amount'] . '|';
    $ret_hash_seq .= $payload['txnid'] . '|' . $payload['key'];
  }
  $hash = hash("sha512", $ret_hash_seq);
  if ($hash != $payload['hash']) {
    watchdog('commerce_payumoney', $message, NULL, WATCHDOG_ERROR);
    return drupal_set_message(t('Security Error. Illegal access detected. We will store your IP address.'), ERROR);
  }
  else {
    // Here you need to put in the routines for a successful.
    // Transaction such as sending an email to customer.
    // Setting database status, informing logistics etc etc.
    commerce_payumoney_transaction($order, $payment_method, $payload['status'], $payload['txnid'], $payload);
    return drupal_set_message(t('Thank you for shopping with us. Your account has been charged and your transaction is successful.'));
  }
}

/**
 * PayUMoney finish transaction.
 */
function commerce_payumoney_transaction($order, $payment_method, $status, $txnid, $payload) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  $transaction = commerce_payment_transaction_new('commerce_payumoney', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  $transaction->remote_id = $txnid;
  $transaction->payload = $payload;
  $instance = explode('|', $payment_method['instance_id']);
  $transaction->payment_method = $instance[0];
  $transaction->message = '';
  $transaction->message_variables = '';

  // Succeessful.
  if ($status == "success") {
    $transaction->remote_status = t('Success');
    $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  elseif ($status == "pending") {
    // Batch process - Pending orders.
    $transaction->remote_status = t('Pending');
    $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment pending at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }
  elseif ($status == "faliure") {
    // Failed transaction.
    $transaction->remote_status = t('Failure');
    $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment failed at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
}
/**
 * Returns PayUMoney icon image location.
 */
function _commerce_payumoney_icons() {
  $variable = array(
    'path' => drupal_get_path('module', 'commerce_payumoney') . '/images/' . 'PayUMoney_logo.png',
    'title' => 'PayUMoney',
    'alt' => 'PayUMoney',
    'attributes' => array(
      'class' => array('commerce-payumoney-icon'),
    ),
  );
  return theme('image', $variable);
}
