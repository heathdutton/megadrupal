<?php
/**
 * @file
 *
 * This file contains the main module codebase
 */

/**
 * Implements hook_views_api
 */
function quickbase_query_views_api() {
  return array(
    'version' => '3.0',
  );
}

/**
 * Implements hook_views_plugins().
 */
function quickbase_query_views_plugins() {
  $plugins = array(
    'module' => 'quickbase_query',
    'query' => array(
      'quickbase_query' => array(
        'title' => t('QuickBase API Query'),
        'help' => t('Query will be run using the QuickBase API.'),
        'handler' => 'quickbase_query_views_plugin_query',
        'parent' => 'views_plugin_query',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_views_data
 */
function quickbase_query_views_data() {
  $tables = array();

  // Load our available table-level DBIDs
  $qbtables = array();
  $qb = quickbase();
  if ($qb) {
    $resp = $qb->GrantedDBs(array('excludeparents' => 1));
    if ($resp && !empty($resp->databases->dbinfo)) {
      $qbtables = $resp->databases->dbinfo;
    }
  }

  // Iterate over all available tables, provide definitions to Views
  foreach ($qbtables as $qbtable) {
    $dbname = (string) $qbtable->dbname;
    $dbid = (string) $qbtable->dbid;

    // Retrieve table schema
    $resp = $qb->GetSchema($dbid);
    if ($resp && !empty($resp->table->fields)) {
      $table_name = (string) $resp->table->name;

      // Define basic table info
      $tables[$dbid] = array();
      $table = &$tables[$dbid];
      $table['table'] = array(
        'group' => $dbname,
        'title' => $table_name,
        'help' => "Field in {$table_name}",
      );

      // Stub out the base table information (key field will be extracted below)
      $table['table']['base'] = array(
        'title' => "QuickBase: {$dbname}",
        'help' => (string) $resp->table->desc,
        'query class' => 'quickbase_query',
      );

      // Add fields to table
      foreach ($resp->table->fields->field as $qbfield) {
        $arfield = _quickbase_query_field_to_array($qbfield);
        $fid = $arfield['#attributes']['id'];
        $field_type = $arfield['#attributes']['field_type'] . (!empty($arfield['choices']) ? '_choices' : '');
        $field_label = $arfield['label'];

        $handlers = _quickbase_query_handlers($field_type);
        $table[$fid] = array_merge_recursive(
          $handlers,
          array(
            'title' => $field_label,
            'help' => t('Field of type %field_type in table %dbname', array('%field_type' => $field_type, '%dbname' => $dbname)),
            'field' => array(
              'title' => $field_label,
              'qbfield' => $arfield,
            ),
            'filter' => array(
              'qbfield' => $arfield,
            ),
            'sort' => array(
              'qbfield' => $arfield,
            ),
            'argument' => array(
              'qbfield' => $arfield,
            ),
            'relationship' => array(
              'qbfield' => $arfield,
            ),
          )
        );

        // Check to see if this is the recordid field
        if (isset($arfield['#attributes']['role']) && 'recordid' == $arfield['#attributes']['role']) {
          $table['table']['base']['field'] = $fid;
          $table['table']['base']['defaults'] = array(
            'field' => $fid,
          );
        }
      }
    }
  }

  return $tables;
}

/**
 * Reduce QB field definition to an array
 */
function _quickbase_query_field_to_array($qbfield) {
  $field = array();

  // Extract all top-level children
  foreach ($qbfield as $name => $val) {
    $field[$name] = (string) $val;
  }

  // Extract all attributes
  foreach ($qbfield->attributes() as $name => $val) {
    $field['#attributes'][$name] = (string) $val;
  }

  // Extract choices if they exist
  if (!empty($qbfield->choices)) {
    $choices = (array) $qbfield->choices[0];
    $field['choices'] = $choices['choice'];
  }

  return $field;
}

/**
 * Generates a watchdog log entry during debugging and tried to call dpm from
 * the devel module; when debugging is disabled, nothing happens.
 *
 * Set the config variable quickbase_query_debug = TRUE to generate log output
 */
function _quickbase_query_dbg($msg, $vars = array(), $link = NULL) {
  if (variable_get('quickbase_query_debug', FALSE)) {
    watchdog('quickbase_query', (is_array($msg) || is_object($msg)) ? '<pre>' . print_r($msg, TRUE) . '</pre>' : $msg, $vars, WATCHDOG_DEBUG, $link);
    if (function_exists('dpm')) {
      dpm((is_array($msg) || is_object($msg)) ? $msg : t($msg, $vars));
    }
  }
}

/**
 * Generates a watchdog log entry during execution of module
 */
function _quickbase_query_log($msg, $vars = array(), $severity = WATCHDOG_INFO, $link = NULL) {
  // Catch passed-in objects or arrays and dump them accordingly
  if (is_array($msg) || is_object($msg)) {
    $msg = print_r($msg, TRUE);
  }
  watchdog('quickbase_query', $msg, $vars, $severity, $link);
}

/**
 * Util function to map field handlers to QuickBase field types
 */
function _quickbase_query_handlers($type) {
  // Default handlers we start off with; should work for any generic text field
  $handlers = array(
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'quickbase_query_filter_text',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(),
    'relationship' => array(),
  );

  // Now override based on field type:
  switch($type) {
    case 'checkbox': // CheckBox
      $handlers['field']['handler'] = 'views_handler_field_boolean';
      $handlers['filter']['handler'] = 'views_handler_filter_boolean_operator';
      break;

    case 'float': // Numeric
    case 'currency': // Numeric-Currency
    case 'rating': // Numeric-Rating
    case 'recordid': // Row ID
      $handlers['field']['handler'] = 'views_handler_field_numeric';
      $handlers['filter']['handler'] = 'quickbase_query_filter_numeric';
      break;

    case 'url': // URL-Link
      $handlers['field']['handler'] = 'views_handler_field_url';
      break;

    case 'text_choices': // Text field with option list
      $handlers['filter']['handler'] = 'quickbase_query_filter_text_choices';
      break;

    case 'date': // Date
    case 'timestamp': // Timestamp
    case 'timeofday': // Time Of Day
      $handlers['field']['handler'] = 'quickbase_query_field_date';
      $handlers['filter']['handler'] = 'quickbase_query_filter_date';
      $handlers['sort']['handler'] = 'views_handler_sort_date';
      break;

    // TODO - Column types that we're taking the defaults with for now, might need to revisit
    case 'dblink': // Database Link
    case 'duration': // Duration
    case 'email': // Email Address
    case 'file': // File Attachment
    case 'phone': // Phone Number
    case 'text': // Text
      break;
  }

  return $handlers;
}
