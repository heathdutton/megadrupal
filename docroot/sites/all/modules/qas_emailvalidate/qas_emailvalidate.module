<?php
// How many retries to make before giving up on QAS EmailValidate to have
// the response ready.
define('QAS_EMAILVALIDATE_RETRIES', 5);

/**
 * @file
 * The main module file.
 */

/**
 * Implements hook_permission().
 */
function qas_emailvalidate_permission() {
  return array(
    'administer qas emailvalidate' => array(
      'title' => t('Administer QAS EmailValidate'),
      'description' => t('Allow users to change the settings of the QAS EmailValidate module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function qas_emailvalidate_menu() {
  $items['admin/config/people/qas_emailvalidate'] = array(
    'title' => 'QAS EmailValidate',
    'description' => 'Configure QAS EmailValidate service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qas_emailvalidate_admin_settings_form'),
    'access arguments' => array('administer qas emailvalidate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'qas_emailvalidate.admin.inc',
  );

  return $items;
}


/**
 * Unconditionally attach AJAX validation to a given element
 */
function qas_emailvalidate_attach_validation_to_element(&$element) {
  if (isset ($element)) {
    // A theme function needs to insert this div somewhere
    $element['#qas'] = '<div id="qas-email-validation-error"></div>';
    $element['#ajax'] = array (
      'event' => 'blur',
      'wrapper' => 'qas-email-validation-error',
      'callback' => 'qas_emailvalidate_ajax',
      'progress' => array (
        'type' => 'throbber',
        'message' => '',
      ),
    );
  }
}


function qas_emailvalidate_attach_validation_to_form(&$form, $email_key, &$element) {
  // Non AJAX validation
  $form['#validate'][] = 'qas_emailvalidate_user_register_form_validate';
  // Which value has the email address?
  $form['#qas']['name'] = $email_key;
  qas_emailvalidate_attach_validation_to_element ($element);
}


/**
 * Implements theme_textfield().
 */
function qas_emailvalidate_textfield ($variables) {
  $output = theme_textfield ($variables);
  if (isset ($variables['element']['#qas'])) {
    $output .= $variables['element']['#qas'];
  }
  return $output;
}


/**
 * Implements hook_theme_registry_alter().
 */
function qas_emailvalidate_theme_registry_alter (&$theme_registry) {
  // Use our textfield theme function to make our AJAX output visible,
  // but only if no other module has implemented its own theme
  // override.
  if ($theme_registry['textfield']['function'] == 'theme_textfield') {
    $theme_registry['textfield']['function'] = 'qas_emailvalidate_textfield';
  }
}



/**
 * Drupal User/Contact module integration.
 * --------------------------------
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qas_emailvalidate_form_contact_personal_form_alter(&$form, $form_state) {
  if (variable_get('qas_emailvalidate_user_contact_form', 1)) {
    $form['#validate'][] = 'qas_emailvalidate_user_register_form_validate';
    // TODO: attach AJAX validation
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qas_emailvalidate_form_contact_site_form_alter(&$form, $form_state) {
  if (variable_get('qas_emailvalidate_site_contact_form', 1)) {
    $form['#validate'][] = 'qas_emailvalidate_user_register_form_validate';
    // TODO: attach AJAX validation
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qas_emailvalidate_form_user_register_form_alter(&$form, $form_state) {
  if (variable_get('qas_emailvalidate_user_registration_form', 1)) {
    if (isset ($form['account']['mail'])) {
      qas_emailvalidate_attach_validation_to_form($form, 'mail', $form['account']['mail']);
    }
  }
}

/**
 * Validation callback for the user registration form.
 */
function qas_emailvalidate_user_register_form_validate($form, $form_state) {
  if (!qas_emailvalidate_validate_email($form_state['values']['mail'])) {
    form_set_error('mail', t('The email address you used is not valid. Please choose another email address.'));
  }
}

/**
 * Email field module integration.
 * -------------------------------
 */
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function qas_emailvalidate_field_widget_email_textfield_form_alter(&$element, &$form_state, $context) {
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  if ($instance['settings']['qas_emailvalidate_skip'] == 0) {
    $element['email']['#element_validate'][] = '_qas_emailvalidate_field_widget_validate';
  }
}

/**
 * Implements hook_field_info_alter().
 */
function qas_emailvalidate_field_info_alter(&$info) {
  foreach ($info as $field_type => $field_type_info) {
    if ($field_type == 'email') {
      $info[$field_type]['instance_settings'] += array(
        'qas_emailvalidate_skip' => 0,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qas_emailvalidate_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $widget_type = $form_state['build_info']['args'][0]['widget']['type'];
  if ($widget_type == 'email_textfield') {
    $form['instance']['settings']['qas_emailvalidate_skip'] = array(
      '#type' => 'checkbox',
      '#title' => t('Skip email validation'),
      '#description' => t('Skip email validation using the QAS EmailValidate service.'),
      '#default_value' => $form['#instance']['settings']['qas_emailvalidate_skip'],
    );
  }
}

/**
 * Validation callback for email field widget.
 */
function _qas_emailvalidate_field_widget_validate($element, &$form_state, $form) {
  $errors = form_get_errors();
  if ($errors) {
    // Form alreay has errors. Not wasting requests.
    return;
  }
  form_set_error('submit', 'test');
  if (!empty($element['#value'])) {
    if (!qas_emailvalidate_validate_email($element['#value'])) {
      form_set_error($element['#field_name'], t('The email address you used is not valid. Please choose another email address.'));
    }
  }
}

/**
 * Webform module integration.
 * ---------------------------
 */
/**
 * Implements hook_form_alter().
 * Only used for webform integration.
 */
function qas_emailvalidate_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') === 0) {
    _qas_emailvalidate_webform_client_form_alter($form, $form);
  }
}

/**
 * Parses all the elements of a webform to identity all webform_email fields
 * and add extra validation if required.
 * @see qas_emailvalidate_form_alter()
 */
function _qas_emailvalidate_webform_client_form_alter(&$form, &$elements) {
  $children = element_children($elements);
  foreach ($children as $child) {
    $subchildren = element_children($elements[$child]);
    if ($subchildren) {
      _qas_emailvalidate_webform_client_form_alter($form, $elements[$child]);
    }
    elseif ($elements[$child]['#type'] == 'webform_email' && $elements[$child]['#webform_component']['extra']['qas_emailvalidate_skip'] == 0) {
      $elements[$child]['#element_validate'][] = '_qas_emailvalidate_webform_email_validate';
      $elements[$child]['#type'] = 'textfield';
      $form['#qas']['name'] = $child;
      qas_emailvalidate_attach_validation_to_element ($elements[$child]);
    }
  }
}

/**
 * Validation callback for email field widget.
 */
function _qas_emailvalidate_webform_email_validate($element, &$form_state, $form) {
  $errors = form_get_errors();
  if ($errors) {
    // Form alreay has errors. Not wasting requests.
    return;
  }

  if (!empty($element['#value'])) {
    if (!qas_emailvalidate_validate_email($element['#value'])) {
      form_set_error($element['#name'], t('The email address you used is not valid. Please choose another email address.'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function qas_emailvalidate_form_webform_component_edit_form_alter(&$form, $form_state) {
  $form['validation']['qas_emailvalidate_skip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip email validation'),
    '#description' => t('Skip email validation using the QAS EmailValidate service.'),
    '#default_value' => isset($form_state['build_info']['args'][1]['extra']['qas_emailvalidate_skip']) ? $form_state['build_info']['args'][1]['extra']['qas_emailvalidate_skip'] : 0,
  );

  // Make sure our callback is executed first.
  array_unshift($form['#submit'], '_qas_emailvalidate_form_webform_component_edit_submit');
}

/**
 * Validation callback.
 * @see qas_emailvalidate_form_webform_component_edit_form_alter()
 */
function _qas_emailvalidate_form_webform_component_edit_submit($form, &$form_state) {
  // Copy our settings to the extra array.
  // Function webform_component_edit_form_submit() will do the rest.
  $form_state['values']['extra']['qas_emailvalidate_skip'] = $form_state['values']['validation']['qas_emailvalidate_skip'];
}


/**
 * General functions below.
 * ------------------------
 */

/**
 * Do the actual QAS validation.
 */
function qas_emailvalidate_check ($email) {
  // If we have already checked this email, don't check it again
  if (isset ($_SESSION['qas'])) {
    $qas = $_SESSION['qas'];
    if ($qas['mail'] == $email) {
      return $qas['data'];
    }
    else
      unset ($_SESSION['qas']);
  }
  $token = variable_get('qas_emailvalidate_apikey');
  $post = array ('Email' => $email);
  $json = drupal_json_encode ($post);
  $url = 'https://api.experianmarketingservices.com/query/EmailValidate/1.0/';
  $options = array(
    'method' => 'POST',
    'data' => $json,
    'timeout' => 5,
    'headers' => array (
      'Auth-Token' => $token,
      'Content-Type' => 'application/json'),
  );
  $request = drupal_http_request($url, $options);
  if ($request->code == 204) {
    $url = $request->headers['content-location'];
    $options = array(
      'method' => 'GET',
      'timeout' => 5,
      'headers' => array (
        'Auth-Token' => $token,
        'Content-Type' => 'application/json'),
    );
    // QAS needs some time to check things
    // An improvement would be to sleep shorter, and if data is not yet
    // available, and when the verification is called again, redo the GET.
    for ($i = 0; $i < QAS_EMAILVALIDATE_RETRIES; $i++) {
      $request = drupal_http_request($url, $options);
      if ($request->code == 409) {
        sleep (1);
      }
      break;
    }
  }
  if ($request->data) {
    $data = drupal_json_decode($request->data);
    $data['code'] = $request->code;

    if ($request->code == 200) {
      $_SESSION['qas'] = array (
        'mail' => $email,
        'url' => $url,
        'data' => $data,
      );
    }
  }
  else {
    $data['Email'] = $email;
    $data['Certainty'] = 'Unknown';
    $data['Message'] = $request->error;
    $data['code'] = 503;
  }
  return $data;
}

/**
 * Main callback to validate one email address.
 */
function qas_emailvalidate_validate_email($email, $tries = NULL) {
  $data = qas_emailvalidate_check($email);
  if ($data['code'] >= 500) {
    watchdog('qas_emailvalidate', 'Email %email couldn\'t get validated because of the following status message: %status', array('%email' => $email, '%status' => $data['Message']), WATCHDOG_ERROR);

    if (variable_get('qas_emailvalidate_halt', 2) == 0) {
      // If service is unavailable.
      return TRUE;
    }

    if (variable_get('qas_emailvalidate_halt', 2) == 2) {
      // Use Drupal validation
      return valid_email_address($email);
    }

    return FALSE;
  }
  return !isset($data['Certainty']) || strtolower ($data['Certainty']) != 'undeliverable';
}


/**
 * AJAX callback.
 */
function qas_emailvalidate_ajax ($form, $form_state) {
  if (isset ($form_state['values']['submitted']))
    $values = $form_state['values']['submitted'];
  elseif (isset ($form_state['values']))
    $values = $form_state['values'];
  else
    $values = NULL;
  $message = '';
  if ($values) {
    $email_field = $form['#qas']['name'];
    $email = $values[$email_field];
    if ($email) {
      if (qas_emailvalidate_email_exists ($email)) {
        $message = t ('Email already exists, <a href="!login">please login</a>.', array ('!login' => url ('user/login')));
      }
      else {
        $message = qas_emailvalidate_ajax_qas_check ($email);
      }
    }
  }
  return '<div id="qas-email-validation-error">' . $message . '</div>';
}

function qas_emailvalidate_email_exists ($email) {
	$uid = db_select ('users', 'u')
    ->fields ('u', array ('uid'))
    ->condition ('mail', $email)
    ->execute ()
    ->fetchField ();
  return !empty ($uid);
}

function qas_emailvalidate_ajax_qas_check ($email) {
  $data = qas_emailvalidate_check ($email);
  $certainty = strtolower ($data['Certainty']);
  switch ($certainty) {
    case 'verified':
      $message = '';
      break;
    case 'undeliverable':
      $message = t ('The email address you used is not valid. Please choose another email address.');
      break;
    case 'unreachable':
      $message = t ('Your email address does not appear to be valid.');
      break;
    default:
      $message = '';
  }
  return $message;
}