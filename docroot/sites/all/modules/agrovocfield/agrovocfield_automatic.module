<?php

function agrovocfield_automatic_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add a css class to widget form elements for all fields of type mytype.
  //anto update for new version
  //if ($context['field']['type'] == 'taxonomy_term_reference' && $context['instance']['widget']['settings']['agrovocfield']['automatic']['agrovocfield_automatic']['automatic_enable'] == 1) {
	if ($context['field']['type'] == 'taxonomy_term_reference')
	{ if (isset($context['instance']['widget']['settings']['agrovocfield']))
	{ if (isset($context['instance']['widget']['settings']['agrovocfield']['automatic']))
	{if ($context['instance']['widget']['settings']['agrovocfield']['automatic']['agrovocfield_automatic']['automatic_enable'] == 1) {
  	//end
    // Be sure not to overwrite existing attributes.
    $element['#element_validate'] = array('agrovocfield_automatic_field_widget_form_validate');
  }
	}
}
}
}
/**
 * Form element validate handler for taxonomy term autocomplete element.
 */
function agrovocfield_automatic_field_widget_form_validate($element, &$form_state) {
  global $language;
  // Autocomplete widgets do not send their tids in the form, so we must detect
  // them here and process them independently.
  // @todo should work for another entities different from "node" entity
  $field = field_info_field($element['#field_name']);
  $field = field_info_instance('node', $element['#field_name'], $field['bundles']['node'][0]);
  $value = array();
  $values = '';

  $http_request = drupal_http_request($field['widget']['settings']['agrovocfield']['automatic']['agrovocfield_automatic']['agrotagger_url']);
  $field_for_indexing = $field['widget']['settings']['agrovocfield']['automatic']['agrovocfield_automatic']['field_for_indexing'];
  //anto patch for fields in multiple group
   if (isset($form_state['values'][$field_for_indexing])){
      $fieldcheck=$form_state['values'][$field_for_indexing];}
  else{
  	$group_names=array_keys($form_state['field_group_multiple']);
  	$i=0;
    foreach($form_state['field_group_multiple'] as $group){
      $groupname=$group_names[$i];	
      $groupchildren=array_keys($group['children']);
  	  foreach($groupchildren as $fieldmultiple){
  	  	   if ($fieldmultiple==$field_for_indexing){
  		       $fieldcheck=$form_state['values'][$groupname]['fields']['items'][0][$field_for_indexing]['value'];
  		       break;
  	  	       }
  	  }
  	  $i++;
    }
  }
  
  // Automatic Indexing only works if default language of text or file is english :(
  //if ($language->language == 'en' && in_array($http_request->code, array(200, 405)) && isset($form_state['values'][$field_for_indexing])) {
  if ($language->language == 'en' && in_array($http_request->code, array(200, 405)) && isset($fieldcheck)) {
 // if ($language->language == 'en' && isset($form_state['values'][$field_for_indexing])) {
 if (isset($form_state['values'][$field_for_indexing]['und'][0])){
         $value=$form_state['values'][$field_for_indexing]['und'][0]; }
   else {$value=$fieldcheck;}
    $values = agrovocfield_automatic_text2file(
      // @todo should be work for more than one field (only works for first value if you are using multiple values)
      $field_for_indexing,
      
      //$form_state['values'][$field_for_indexing]['und'][0],
      //$fieldcheck,
      $value,
      $field['widget']['settings']['agrovocfield']['automatic']['agrovocfield_automatic']['agrotagger_url'],
      $field['widget']['settings']['agrovocfield']['automatic']['agrovocfield_automatic']['voc_type'],
      $field['widget']['settings']['agrovocfield']['automatic']['agrovocfield_automatic']['tags_no']);
  }

  if ($tags = $values) {
    // Collect candidate vocabularies.
    $field = field_widget_field($element, $form_state);
    $vocabularies = array();
    foreach ($field['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
          $vocabularies[$vocabulary->vid] = $vocabulary;
      }
    }

    // Translate term names into actual terms.
    //update the string to remove <h4>Agrotags:..
    $tags=strip_tags(substr($tags,19));
    $typed_terms = drupal_explode_tags($tags);
    $vocabulary->field_agrovoc=$field['field_name'];
    foreach ($typed_terms as $typed_term) {
      // See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, create a new 'autocreate' term for insert/update.
      if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($typed_term), 'vid' => array_keys($vocabularies)))) {
          $term = array_pop($possibilities);
      }
      else {
        $vocabulary = reset($vocabularies);
        $term = array(
          'tid' => 'autocreate',
          'vid' => $vocabulary->vid,
          'name' => $typed_term,
          'vocabulary_machine_name' => $vocabulary->machine_name,
        );
      }
      $value[] = (array)$term;
    }
  }
  form_set_value($element, $value, $form_state);
}


function agrovocfield_automatic_text2file($field_for_indexing, $value, $agrotagger_url, $voc_type, $tags_no) {
  $field = field_info_field($field_for_indexing);
  $values = array();
  // @todo support for more than 3 field types (only works for 3 field types (text_long, text_with_summary and file))
	if (in_array($field['type'], array('text_long', 'text_with_summary'))) {
    // This function is identical to file_save_data() except the file will not be saved to the {file_managed} table and none of the file_* hooks will be called.
	  $file = file_unmanaged_save_data($value, file_directory_temp() . '/data.txt');
	  $parameters = array(
        'file_url' => $file,
        'url' => $agrotagger_url,
        'voc_type' => $voc_type,
        'outputtype' => 'text/plain',
        'tags_no' => $tags_no,
	  );
	  $values[] = agrovocfield_automatic_http_request($parameters);
	}
  elseif ($field['type'] == 'file') {
  		if (is_numeric($value['fid']) && $value['fid'] !== 0 ) {
        $file = file_load($value['fid']);
        $parameters = array(
          # @todo This function drupal_realpath is deprecated, and should be removed wherever possible.
          # http://drupal.org/node/1201024
          'file_url' => drupal_realpath($file->uri),
          'url' => $agrotagger_url,
          'voc_type' => $voc_type,
          'outputtype' => 'text/plain',
          'tags_no' => 10,
        );
      $values[] = agrovocfield_automatic_http_request($parameters);
  		}
  }
  return implode(',', $values);
}


/**
 * Enter description here ...
 * @param unknown_type $file
 * @return mixed
 */
function agrovocfield_automatic_http_request($parameters){
	global $base_url;
	
	$file = $parameters['file_url'];
	// array $data must have only 4 values
	//$data['file_url'] = $base_url."/".$file;
	$data['file_url'] = "@$file";
  // agrotag or agrovoc
  $data['voctype'] = $parameters['voc_type'];
  // xml/rdf, application/JSON, text/plain
  $data['outputtype'] = $parameters['outputtype'];
  // 10, 15, 20 ...
  $data['tags_no'] = $parameters['tags_no'];
	$ch = curl_init();
  $result=curl_setopt($ch, CURLOPT_URL, $parameters['url']);
  $result=curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $result=curl_setopt($ch, CURLOPT_POST, 1 );
  $result=curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  $http_result = curl_exec($ch);
  //return $http_result;
  // fix for agrotagger
  //return substr($http_result, 19,-4);
  return $http_result;
}

