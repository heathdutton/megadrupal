<?php
/**
 * @file
 * Git repository test.
 */

/**
 * Git URL field tests.
 */
class PHRepositoryGitFieldTest extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Git URL field',
      'description' => 'Test the Git URL field, formatter, and widget.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_repository_git');
  }

  /**
   * Returns a list of valid Git URL strings.
   */
  protected function getGitURLs() {
    return array(
      'ssh://user@host.xz:12345/path/to/repo.git/',
      'ssh://user@host.xz/path/to/repo.git/',
      'ssh://host.xz:12345/path/to/repo.git/',
      'ssh://host.xz/path/to/repo.git/',
      'ssh://user@host.xz/path/to/repo.git/',
      'ssh://host.xz/path/to/repo.git/',
      'ssh://user@host.xz/~user/path/to/repo.git/',
      'ssh://host.xz/~user/path/to/repo.git/',
      'ssh://user@host.xz/~/path/to/repo.git',
      'ssh://host.xz/~/path/to/repo.git',
      'user@host.xz:/path/to/repo.git/',
      'host.xz:/path/to/repo.git/',
      'user@host.xz:~user/path/to/repo.git/',
      'host.xz:~user/path/to/repo.git/',
      'user@host.xz:path/to/repo.git',
      'host.xz:path/to/repo.git',
      'rsync://host.xz/path/to/repo.git/',
      'git://host.xz/path/to/repo.git/',
      'git://host.xz/~user/path/to/repo.git/',
      'http://host.xz/path/to/repo.git/',
      'https://host.xz/path/to/repo.git/',
      'file:///path/to/repo.git/',
      'file://~/path/to/repo.git/',
    );
  }

  /**
   * Tests field validation.
   */
  public function testFieldValidate() {
    // Validate URLs.
    $pass = TRUE;
    foreach ($this->getGitURLs() as $url) {
      if (!ph_repository_git_valid_url($url)) {
        $this->fail('Failed to validate url: ' . $url);
        $pass = FALSE;
      }
    }
    if ($pass) {
      $this->pass('Git URLs are validated.');
    }
  }

  /**
   * Tests field widget.
   */
  public function testFieldWidget() {
    // Validate field and widget.
    $this->drupalCreateContentType(array(
      'name' => 'Repository',
      'type' => 'repository',
    ));
    field_create_field(array(
      'field_name' => 'field_git_url',
      'type' => 'ph_repository_git_url',
    ));
    field_create_instance(array(
      'field_name' => 'field_git_url',
      'entity_type' => 'node',
      'bundle' => 'repository',
    ));
    $user = $this->drupalCreateUser(array('create repository content'));
    $this->drupalLogin($user);
    $this->drupalGet('node/add/repository');

    // Test invalid Git URL.
    $edit = array(
      'title' => 'test',
      'field_git_url[und][0][value]' => 'invalid-url',
    );
    $this->drupalPost('node/add/repository', $edit, t('Save'));
    $this->assertUrl('node/add/repository', array(), 'Field does not save invalid Git URL.');

    // Test saving valid URL.
    $edit = array(
      'field_git_url[und][0][value]' => 'host.xz:path/to/repo.git',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertUrl('node/1', array(), 'Valid Git URL is saved.');
  }

  /**
   * Tests field formatter.
   */
  public function testFieldFormatter() {
    $this->drupalCreateContentType(array(
      'name' => 'Repository',
      'type' => 'repository',
    ));
    field_create_field(array(
      'field_name' => 'field_git_url',
      'type' => 'ph_repository_git_url',
    ));
    field_create_instance(array(
      'field_name' => 'field_git_url',
      'entity_type' => 'node',
      'bundle' => 'repository',
    ));
    $node = $this->drupalCreateNode(array(
      'type' => 'repository',
      'field_git_url' => array(LANGUAGE_NONE => array(
        array(
          'value' => 'host.xz:path/to/repo.git',
        ),
      )),
    ));
    $element = field_view_field('node', $node, 'field_git_url');
    $expected = 'host.xz:path/to/repo.git';
    $this->assertEqual($expected, $element[0]['#markup'], 'Field is formatted and plain Git URL.');
  }
}

/**
 * Git backend tests.
 */
class PHRepositoryGitBackendTest extends DrupalWebTestCase {
  protected $gitBin;
  protected $directory;
  protected $repoDirectory;

  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Git backend',
      'description' => 'Test the Git repository backend.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_repository_git');

    $extensions = array('', '.exe', '.bat', '.cmd', '.com');
    foreach (explode(PATH_SEPARATOR, getenv('PATH')) as $path) {
      foreach ($extensions as $extension) {
        $bin = realpath($path . '/git' . $extension);
        if (file_exists($bin) && is_executable($bin)) {
          $this->gitBin = $bin;
          variable_set('ph_repository_git_path', realpath($bin));
        }
      }
    }

    if (!isset($this->gitBin)) {
      $this->pass('Git is not available on this test system. Please make Git available in PATH to test Git functionality.');
    }
    else {
      while (file_exists($directory = drupal_realpath('temporary://' . uniqid())));
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
      $this->directory = $directory;

      while (file_exists($repoDirectory = drupal_realpath('temporary://' . uniqid())));
      file_prepare_directory($repoDirectory, FILE_CREATE_DIRECTORY);
      $this->repoDirectory = $repoDirectory;
    }
  }

  /**
   * Executes a Git command.
   */
  protected function git($command) {
    if ($this->gitBin) {
      exec($this->gitBin . ' ' . $command, $results);
      return implode("\n", $results);
    }
  }

  /**
   * Prepares testing repository.
   */
  protected function prepareRepo($directory) {
    chdir($directory);
    $this->git('init');
    file_put_contents($directory . '/test.txt', 'test 1');
    $this->git('add .');
    $this->git('commit -m "Test commit"');
    $this->git('branch -m 7.x-1.x');
    $this->git('tag 7.x-1.0');
    file_put_contents($directory . '/test.txt', 'test 2');
    $this->git('add .');
    $this->git('commit -m "Test commit 2"');
    $this->git('tag 7.x-1.1');
  }

  /**
   * Tests the Git delegate.
   */
  public function testDelegate() {
    if (isset($this->directory) && isset($this->repoDirectory)) {
      $this->prepareRepo($this->repoDirectory);
      $delegate = new PHRepositoryGitDelegate($this->directory, $this->repoDirectory);

      // Test updating.
      $delegate->update();
      chdir($this->directory);
      $ref = $this->git('show-ref origin/7.x-1.x');
      $this->assertFalse(empty($ref), 'Git delegate checks out an updated repository.');

      // Test listing versions.
      $refs = $delegate->listRefs();
      sort($refs);
      $expected = array('7.x-1.0', '7.x-1.1', '7.x-1.x');
      $this->assertEqual($expected, $refs, 'Git delegate lists exportable heads and tags.');

      // Test exporting version.
      file_prepare_directory($tmpDir = 'temporary://export', FILE_CREATE_DIRECTORY);
      $tmpDir = drupal_realpath($tmpDir);
      $delegate->export($tmpDir, ph_version_extract_info('7.x-1.0'));
      $this->assertTrue(file_exists($tmpDir . '/test.txt'), 'Git delegate exports a version from a repository.');
      $version = $delegate->export($tmpDir, ph_version_extract_info('7.x-1.x'), ph_version_extract_info('7.x-1.0'));
      $this->assertEqual('7.x-1.0+1-dev', ph_version_format($version), 'Git delegate returns a version with commit increment from version since.');
      $version = $delegate->export($tmpDir, ph_version_extract_info('7.x-1.x'), ph_version_extract_info('7.x-1.1'));
      $this->assertEqual('7.x-1.1+0-dev', ph_version_format($version), 'Git delegate returns a version with zero commit increment for branch at version since.');
    }
  }
}
