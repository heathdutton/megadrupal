<?php
/**
 * @file
 * Tests for the field and various related information.
 */

/**
 * Version field test.
 */
class PHVersionFieldTest extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Version field',
      'description' => 'Test the basic version field.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_version');
  }

  /**
   * Returns a map of version strings to expected info structures.
   */
  protected function getVersionStrings() {
    return array(
      '7.0' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => NULL,
        'patch' => 0,
        'extra' => NULL,
        'increment' => NULL,
      ),
      '7.x-dev' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => NULL,
        'patch' => NULL,
        'extra' => NULL,
        'increment' => NULL,
      ),
      '7.0-alpha1' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => NULL,
        'patch' => 0,
        'extra' => 'alpha1',
        'increment' => NULL,
      ),
      '7.0-alpha1+3-dev' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => NULL,
        'patch' => 0,
        'extra' => 'alpha1',
        'increment' => 3,
      ),
      '7.0-dev' => FALSE,
      '7.x-1.0' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => 1,
        'patch' => 0,
        'extra' => NULL,
        'increment' => NULL,
      ),
      '4.7.x-1.0' => array(
        'core' => 4,
        'core_minor' => 7,
        'major' => 1,
        'patch' => 0,
        'extra' => NULL,
        'increment' => NULL,
      ),
      '4.7.x-1.0-alpha1' => array(
        'core' => 4,
        'core_minor' => 7,
        'major' => 1,
        'patch' => 0,
        'extra' => 'alpha1',
        'increment' => NULL,
      ),
      '7.x-1.0-alpha1' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => 1,
        'patch' => 0,
        'extra' => 'alpha1',
        'increment' => NULL,
      ),
      '7.x-1.x-dev' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => 1,
        'patch' => NULL,
        'extra' => NULL,
        'increment' => NULL,
      ),
      '7.x-1.0-dev' => FALSE,
      '7.x-1.0-alpha1+24-dev' => array(
        'core' => 7,
        'core_minor' => NULL,
        'major' => 1,
        'patch' => 0,
        'extra' => 'alpha1',
        'increment' => 24,
      ),
      '7.x-1.0-alpha1-dev' => FALSE,
    );
  }

  /**
   * Tests parsing version strings.
   */
  public function testExtractInfo() {
    $failed = array();
    foreach ($this->getVersionStrings() as $version => $expected) {
      $info = ph_version_extract_info($version);
      if ($info != $expected) {
        $failed[] = $version;
      }
    }

    if (!$failed) {
      $this->pass('Version information is correctly extracted from version strings.');
    }
    else {
      foreach ($failed as $fail) {
        $this->fail(sprintf('Failed to extract version information from "%s".', $fail));
      }
    }

    $expected = array(
      'core' => 7,
      'core_minor' => NULL,
      'major' => NULL,
      'patch' => NULL,
      'extra' => NULL,
      'increment' => NULL,
    );
    $info = ph_version_extract_info('7.x');
    $this->assertIdentical($expected, $info, 'Core version information is extracted from version tag.');

    $expected = array(
      'core' => 7,
      'core_minor' => NULL,
      'major' => 1,
      'patch' => NULL,
      'extra' => NULL,
      'increment' => NULL,
    );
    $info = ph_version_extract_info('7.x-1.x');
    $this->assertIdentical($expected, $info, 'Contribution version information is extracted from version tag.');
  }

  /**
   * Tests formatting version strings.
   */
  public function testFormat() {
    $failed = array();
    foreach ($this->getVersionStrings() as $expected => $info) {
      if (is_array($info)) {
        $version = ph_version_format($info, 'full');
        if ($version != $expected) {
          $failed[] = $info;
        }
      }
    }

    if (!$failed) {
      $this->pass('Full version strings are correctly formatted.');
    }
    else {
      foreach ($failed as $fail) {
        $this->fail(sprintf('Failed to format version string <pre>%s</pre>.', print_r($fail, TRUE)));
      }
    }

    $info = array(
      'core' => 7,
      'major' => 1,
      'patch' => 0,
      'increment' => 5,
    );
    $version = ph_version_format($info, 'standard');
    $this->assertEqual('7.x-1.x-dev', $version, 'Detailed version info is formatted in standard format.');
    $version = ph_version_format($info, 'tag');
    $this->assertEqual('7.x-1.x', $version, 'Detailed version info is formatted as tag.');
    $version = ph_version_format($info, 'full', 'core');
    $this->assertEqual('7.0+5-dev', $version, 'Contribution version info is formatted as core version.');
    $version = ph_version_format($info, 'core_api');
    $this->assertEqual('7.x', $version, 'Version info is formatted as core API version.');
    $version = ph_version_format(ph_version_standardize($info), 'full');
    $this->assertEqual('7.x-1.x-dev', $version, 'Detailed version info is standardized.');
    $version = ph_version_format(ph_version_standardize(array('increment' => NULL) + $info), 'full');
    $this->assertEqual('7.x-1.0', $version, 'Standard version info is not changed when standardized.');

    $info = array(
      'core' => 7,
      'major' => 1,
    );
    $version = ph_version_format($info, 'full');
    $this->assertEqual('7.x-1.x-dev', $version, 'Non-full version info is formatted in standard format even when full format is requested.');
  }

  /**
   * Tests format validator.
   */
  public function testValidFormat() {
    $result = ph_version_valid_format('7.x-1.0-dev', 'full');
    $this->assertFalse($result, 'Invalid version string is validated as not matching a format.');

    $valid = array(
      array('7.x-1.0-beta1+3-dev', 'full'),
      array('7.x-1.x-dev', 'full'),
      array('7.x-1.x-dev', 'standard'),
      array('7.x-1.0-beta1', 'standard'),
      array('7.x-1.0-beta1', 'tag'),
      array('7.x-1.x', 'tag'),
      array('7.x', 'tag'),
      array('7.x', 'core_api'),
    );

    $failed = array();
    foreach ($valid as $check) {
      if (!ph_version_valid_format($check[0], $check[1])) {
        $failed[] = $check;
      }
    }
    if (!$failed) {
      $this->pass('Versions are validated as their formats.');
    }
    else {
      foreach ($failed as $fail) {
        $this->fail(sprintf('Failed to validate version "%s" as format "%s".', $fail[0], $fail[1]));
      }
    }

    $invalid = array(
      array('7.x-1.0-beta1+3-dev', 'standard'),
      array('7.x-1.x-dev', 'tag'),
      array('7.x-1.x-dev', 'core_api'),
      array('7.x-1.0-beta1', 'core_api'),
      array('7.x-1.x', 'standard'),
      array('7.x-1.x', 'full'),
      array('7.x', 'standard'),
      array('7.x', 'full'),
    );

    $failed = array();
    foreach ($invalid as $check) {
      if (ph_version_valid_format($check[0], $check[1])) {
        $failed[] = $check;
      }
    }
    if (!$failed) {
      $this->pass('Invalid versions are invalidated.');
    }
    else {
      foreach ($failed as $fail) {
        $this->fail(sprintf('Failed to invalidate version "%s" as format "%s".', $fail[0], $fail[1]));
      }
    }
  }

  /**
   * Tests the field formatter.
   */
  public function testFieldFormatter() {
    // Prepare content type and field.
    $this->drupalCreateContentType(array(
      'type' => 'release',
    ));
    $field_name = 'field_version';
    field_create_field(array(
      'field_name' => $field_name,
      'type' => 'ph_version',
    ));
    field_create_instance(array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'release',
    ));

    // Create test node.
    $delta = 0;
    $version = array(
      'core' => 4,
      'core_minor' => 7,
      'major' => 1,
      'patch' => 0,
      'extra' => 'rc1',
      'increment' => 2,
    );
    $node = $this->drupalCreateNode(array(
      'type' => 'release',
      'language' => LANGUAGE_NONE,
      'field_version' => array(LANGUAGE_NONE => array(
        $delta => $version,
      )),
    ));

    // Test standard format.
    $display['type'] = 'ph_version_standard';
    $markup = $this->getVersionMarkup('node', $node, $field_name, $display, $delta);
    $this->assertEqual('4.7.x-1.x-dev', $markup, 'Version field value is formatted using Standard format.');

    // Test full format.
    $display['type'] = 'ph_version_full';
    $markup = $this->getVersionMarkup('node', $node, $field_name, $display, $delta);
    $this->assertEqual('4.7.x-1.0-rc1+2-dev', $markup, 'Version field value is formatted using Full format.');

    // Test tag format.
    $display['type'] = 'ph_version_tag';
    $markup = $this->getVersionMarkup('node', $node, $field_name, $display, $delta);
    $this->assertEqual('4.7.x-1.x', $markup, 'Version field value is formatted using Tag format.');

    // Test component format.
    $display['type'] = 'ph_version_component';
    $labels = ph_version_component_options();
    $component_markup = array('core_api' => '4.7.x') + array_map('strval', $version);
    foreach ($component_markup as $component => $expected) {
      $display['settings']['component'] = $component;
      $markup = $this->getVersionMarkup('node', $node, $field_name, $display, $delta);
      $this->assertEqual($expected, $markup, format_string('Version field value is formatted as component "@component".', array('@component' => $labels[$component])));
    }

    // Test missing parts.
    $node->field_version[$node->language][$delta] = $version = array(
      'core' => 7,
    );
    node_save($node);
    $display['settings']['component'] = 'major';
    $markup = $this->getVersionMarkup('node', $node, $field_name, $display);
    $this->assertIdentical(array(), $markup, 'Missing component is not formatted.');
  }

  /**
   * Retrieves field output element.
   */
  protected function getVersionMarkup($entity_type, $entity, $field_name, $display, $delta = NULL) {
    $element = field_view_field($entity_type, $entity, $field_name, $display);
    $children = array_intersect_key($element, array_flip(element_children($element)));
    if (isset($delta)) {
      return isset($children[$delta]) ? reset($children[$delta]) : NULL;
    }
    else {
      return array_map('reset', $children);
    }
  }
}

/**
 * Version field widget tests.
 */
class PHVersionFieldWidgetTest extends DrupalWebTestCase {
  protected $field;
  protected $instance;
  protected $field_multiple;
  protected $instance_multiple;

  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Version widget',
      'description' => 'Test the version widget.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_version');

    // Create content type.
    $this->drupalCreateContentType(array(
      'type' => 'release',
      'name' => 'Release',
    ));
    $this->field = field_create_field(array(
      'field_name' => 'field_version',
      'type' => 'ph_version',
    ));
    $this->instance = field_create_instance(array(
      'field_name' => 'field_version',
      'entity_type' => 'node',
      'bundle' => 'release',
      'widget' => array(
        'type' => 'ph_version_text',
      ),
    ));
    $this->field_multiple = field_create_field(array(
      'field_name' => 'field_version_multiple',
      'type' => 'ph_version',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ));
    $this->instance_multiple = field_create_instance(array(
      'field_name' => 'field_version_multiple',
      'entity_type' => 'node',
      'bundle' => 'release',
      'widget' => array(
        'type' => 'ph_version_text',
      ),
    ));

    // Create privileged user.
    $user = $this->drupalCreateUser(array('access content', 'create release content', 'edit any release content'));
    $this->drupalLogin($user);
  }

  /**
   * Tests text widget.
   */
  public function testWidgetText() {
    // Create content via UI.
    $this->drupalGet('node/add/release');
    $field_widget_name = 'field_version[und][0][value]';
    $this->assertFieldByName($field_widget_name, '', 'Text widget is displayed in edit form.');

    $edit = array(
      'title' => 'test release',
      $field_widget_name => '7.x-1.0',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $nid = NULL;
    $this->assertUrlNode(NULL, 'A version string input is saved.', $nid);

    $node = node_load($nid);
    $node_url = 'node/' . $nid;
    $node_edit_url = 'node/' . $nid . '/edit';

    $expected = ph_version_make(array(
      'core' => 7,
      'major' => 1,
      'patch' => 0,
    ));
    $value = $node ? $node->field_version[$node->language][0] : NULL;
    $this->assertEqual($expected, $value, 'Version values are extracted when saved.');

    // Try to submit invalid value.
    $edit = array(
      $field_widget_name => '7.x-1.',
    );
    $this->drupalPost($node_edit_url, $edit, t('Save'));
    $this->assertUrl($node_edit_url, array(), 'Invalid version string is not saved.');

    // Check widget formats default value properly.
    $this->instance['settings']['version_type'] = 'core';
    field_update_instance($this->instance);
    $this->drupalGet($node_edit_url);
    $this->assertFieldByName($field_widget_name, '7.0', 'Version input provides default value based on field instance version type setting.');

    // Try to submit invalid type.
    $edit = array(
      $field_widget_name => '7.x-1.0',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertUrl($node_edit_url, array(), 'Invalid version type is not saved.');
    $edit = array(
      $field_widget_name => '7.0',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertUrl($node_url, array(), 'Valid core version is saved.');

    // Test with contribution as type.
    $this->instance['settings']['version_type'] = 'contrib';
    field_update_instance($this->instance);
    $this->drupalGet($node_edit_url);
    $this->assertFieldByName($field_widget_name, '7.0', 'Version input provides default value based on available data.');
    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertUrl($node_edit_url, array(), 'Default invalid version type is not saved.');
    $edit = array(
      $field_widget_name => '7.x-1.0',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertUrl($node_url, array(), 'Valid contribution version is saved.');

    // Try to submit an invalid format.
    $this->instance['widget']['settings']['format'] = 'standard';
    field_update_instance($this->instance);
    $edit = array(
      $field_widget_name => '7.x-1.0+3-dev',
    );
    $this->drupalPost($node_edit_url, $edit, t('Save'));
    $this->assertUrl($node_edit_url, array(), 'Full version format is not saved for a standard field instance.');
    $edit = array(
      $field_widget_name => '7.x-1.x-dev',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertUrl($node_url, array(), 'Standard version format is saved.');

    $this->instance['widget']['settings']['format'] = 'tag';
    field_update_instance($this->instance);
    $edit = array(
      $field_widget_name => '7.x-1.x-dev',
    );
    $this->drupalPost($node_edit_url, $edit, t('Save'));
    $this->assertUrl($node_edit_url, array(), 'Standard version format is not saved for a tag field instance.');
    $edit = array(
      $field_widget_name => '7.x-1.x',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertUrl($node_url, array(), 'Tag version format is saved.');

    // Test submitting multiple values.
    $this->drupalGet($node_edit_url);
    $this->drupalPost(NULL, array(), t('Add another item'));
    $this->drupalPost(NULL, array(), t('Add another item'));
    $edit = array(
      'field_version_multiple[und][0][value]' => '7.x-dev',
      'field_version_multiple[und][1][value]' => '7.x-1.0',
      'field_version_multiple[und][2][value]' => '7.x-1.0+2-dev',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $expected = array(
      ph_version_make(array(
        'core' => 7,
      )),
      ph_version_make(array(
        'core' => 7,
        'major' => 1,
        'patch' => 0,
      )),
      ph_version_make(array(
        'core' => 7,
        'major' => 1,
        'patch' => 0,
        'increment' => 2,
      )),
    );
    $node = node_load($nid, NULL, TRUE);
    $values = $node ? $node->field_version_multiple[$node->language] : NULL;
    $this->assertEqual($expected, $values, 'Multiple input values are saved.');
  }

  /**
   * Asserts the URL is for a node.
   */
  protected function assertUrlNode($nid, $message = '', &$nid_out = NULL) {
    if (!$message) {
      if ($nid) {
        $message = t('Current URL is a node with ID @nid.', array('@nid' => $nid));
      }
      else {
        $message = t('Current URL is a node.');
      }
    }

    $nodeBaseUrl = url('node', array('absolute' => TRUE));
    $url = $this->getUrl();
    if (strpos($this->getUrl(), $nodeBaseUrl) === 0) {
      $param = substr($url, strlen($nodeBaseUrl) + 1);
      if ($param == (int) $param) {
        $nid_out = $param = (int) $param;
        if ($param > 0) {
          if ($nid) {
            $this->assertEqual($nid, $param, $message);
          }
          else {
            $this->pass($message);
          }
          return;
        }
      }
    }

    $this->fail($message);
  }
}

/**
 * Version entity property tests.
 */
class PHVersionEntityPropertyTest extends DrupalWebTestCase {
  protected $field;
  protected $instance;

  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Version entity property',
      'description' => 'Test the Entity API extensions for version data properties.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_version_test');

    // Create content type.
    $this->drupalCreateContentType(array(
      'type' => 'release',
      'name' => 'Release',
    ));
    $this->field = field_create_field(array(
      'field_name' => 'field_version',
      'type' => 'ph_version',
    ));
    $this->instance = field_create_instance(array(
      'field_name' => 'field_version',
      'entity_type' => 'node',
      'bundle' => 'release',
      'widget' => array(
        'type' => 'ph_version_text',
      ),
    ));
  }

  /**
   * Tests Entity API properties.
   */
  public function testProperties() {
    // Create node.
    $delta = 0;
    $version = array(
      'core' => 4,
      'core_minor' => 7,
      'major' => 1,
      'patch' => 0,
      'extra' => 'rc1',
      'increment' => 2,
    );
    $node = $this->drupalCreateNode(array(
      'type' => 'release',
      'language' => LANGUAGE_NONE,
      'field_version' => array(LANGUAGE_NONE => array(
        $delta => $version,
      )),
    ));

    // Wrap data.
    $wrapper = entity_metadata_wrapper('node', $node);
    /** @var $version_wrapper EntityStructureWrapper */
    $version_wrapper = $wrapper->field_version;

    // Test formatted version strings.
    $this->assertEqual('4.7.x-1.0-rc1+2-dev', $version_wrapper->version_full->value(), 'Full version format is a field property.');
    $this->assertEqual('4.7.x-1.x-dev', $version_wrapper->version_standard->value(), 'Standard version format is a field property.');
    $this->assertEqual('4.7.x-1.x', $version_wrapper->version_tag->value(), 'Tag version format is a field property.');
    $this->assertEqual('4.7.x', $version_wrapper->core_api->value(), 'Core API version is a field property.');

    // Test version components.
    $labels = ph_version_component_options();
    foreach ($version as $component => $expected) {
      $value = $version_wrapper->{$component}->value();
      $this->assertEqual($expected, $value, format_string('"@component" is a field property.', array('@component' => $labels[$component])));
    }

    // Test derived properties.
    $this->assertFalse($version_wrapper->is_core->value(), 'Boolean value of "version is for Drupal core" is a property.');
    $this->assertTrue($version_wrapper->is_dev->value(), 'Boolean value of "version is development snapshot" is a property.');
    $node->field_version[$node->language][0] = ph_version_make(array(
      'core' => 7,
      'patch' => 0,
    ));
    $wrapper = entity_metadata_wrapper('node', $node);
    $version_wrapper = $wrapper->field_version;
    $this->assertTrue($version_wrapper->is_core->value(), 'Boolean value of "version is for Drupal core" is correctly derived.');
    $this->assertFalse($version_wrapper->is_dev->value(), 'Boolean value of "version is development snapshot" is correctly derived.');

    // Test suffix.
    $node->field_version[$node->language][0] = ph_version_make(array(
      'core' => 7,
      'patch' => 0,
      'extra' => 'beta1',
    ));
    $this->assertEqual('beta1', entity_metadata_wrapper('node', $node)->field_version->suffix->value(), 'Defined extra identifier is derived as the suffix.');
    $node->field_version[$node->language][0] = ph_version_make(array(
      'core' => 7,
    ));
    $this->assertEqual('dev', entity_metadata_wrapper('node', $node)->field_version->suffix->value(), 'Missing identifier is derived as development suffix.');
    $node->field_version[$node->language][0] = ph_version_make(array(
      'core' => 7,
      'patch' => 0,
      'increment' => 1,
    ));
    $this->assertEqual('dev', entity_metadata_wrapper('node', $node)->field_version->suffix->value(), 'Existence of a commit increment is derived as development suffix.');
    $expected = ph_version_make(array(
      'core' => 7,
    ));
    $this->assertEqual($expected, entity_metadata_wrapper('node', $node)->field_version->standardized->value(), 'Standardized version is returned as nested version property.');
  }

  /**
   * Tests property setters.
   */
  public function testSetters() {
    $node = $this->drupalCreateNode(array(
      'type' => 'release',
      'language' => LANGUAGE_NONE,
    ));

    // Wrap data.
    $wrapper = entity_metadata_wrapper('node', $node);
    /** @var $version_wrapper EntityStructureWrapper */
    $version_wrapper = $wrapper->field_version;

    $version_wrapper->version_full->set('7.x-1.0+3-dev');
    $expected = ph_version_make(array(
      'core' => 7,
      'major' => 1,
      'patch' => 0,
      'increment' => 3,
    ));
    $this->assertEqual($expected, $version_wrapper->value(), 'Full version is set as a property.');

    $version_wrapper->version_standard->set('7.x-1.0');
    $expected = ph_version_make(array(
      'core' => 7,
      'major' => 1,
      'patch' => 0,
    ));
    $this->assertEqual($expected, $version_wrapper->value(), 'Standard version is set as a property.');

    $version_wrapper->version_tag->set('7.x-1.x');
    $expected = ph_version_make(array(
      'core' => 7,
      'major' => 1,
    ));
    $this->assertEqual($expected, $version_wrapper->value(), 'Tag version is set as a property.');
  }
}
