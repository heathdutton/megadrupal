<?php
/**
 * @file
 * Repository module testing.
 */

/**
 * Implements hook_menu().
 */
function ph_repository_test_menu() {
  $items['test-repository'] = array(
    'title' => 'View test repository',
    'page callback' => 'ph_repository_test_view',
    'access callback' => 'ph_repository_test_access',
    'access arguments' => array('view'),
  );
  $items['test-repository/create'] = array(
    'title' => 'Create test repository',
    'page callback' => 'ph_repository_test_create',
    'access callback' => 'ph_repository_test_access',
    'access arguments' => array('create'),
  );
  $items['test-repository/update'] = array(
    'title' => 'Update test repository',
    'page callback' => 'ph_repository_test_update',
    'access callback' => 'ph_repository_test_access',
    'access arguments' => array('update'),
  );
  $items['test-repository/delete'] = array(
    'title' => 'Delete test repository',
    'page callback' => 'ph_repository_test_delete',
    'access callback' => 'ph_repository_test_access',
    'access arguments' => array('delete'),
  );

  return $items;
}

/**
 * Loads the registered repository entity.
 */
function ph_repository_test_get_repository() {
  $rid = variable_get('ph_repository_test_rid');
  return $rid ? ph_repository_load($rid) : NULL;
}

/**
 * Checks testing access.
 */
function ph_repository_test_access($op, $repository = NULL) {
  switch ($op) {
    case 'view':
    case 'update':
    case 'delete':
      // Load registered repository.
      if (!isset($repository)) {
        $repository = ph_repository_test_get_repository();
      }
      if (!$repository) {
        return FALSE;
      }
      break;
  }
  // Check entity access.
  return entity_access($op, 'ph_repository', $repository);
}

/**
 * Views the registered repository entity.
 */
function ph_repository_test_view() {
  if ($repository = ph_repository_test_get_repository()) {
    $wrapper = entity_metadata_wrapper('ph_repository', $repository);
    return array(
      '#markup' => sprintf('[rid:%d,test:%s]', $repository->rid, $wrapper->repository_key->value()),
    );
  }
}

/**
 * Creates a new repository entity.
 */
function ph_repository_test_create() {
  $repository = entity_create('ph_repository', array('type' => 'test'));
  return entity_form('ph_repository', $repository);
}

/**
 * Updates the registered repository entity.
 */
function ph_repository_test_update() {
  if ($repository = ph_repository_test_get_repository()) {
    return entity_form('ph_repository', $repository);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for ph_repository_form.
 */
function ph_repository_test_form_ph_repository_form_alter(&$form, &$form_state) {
  $repository = reset($form_state['build_info']['args']);
  if (!empty($repository->is_new)) {
    // Register entity after creation.
    $form['#submit'][] = 'ph_repository_test_register';
  }
}

/**
 * Registers a newly created repository entity.
 */
function ph_repository_test_register($form, &$form_state) {
  /** @var $repository PHRepository */
  $repository = reset($form_state['build_info']['args']);
  variable_set('ph_repository_test_rid', $repository->rid);
}

/**
 * Deletes a repository entity.
 */
function ph_repository_test_delete() {
  if (!$repository = ph_repository_test_get_repository()) {
    return MENU_NOT_FOUND;
  }

  $repository->delete();
  variable_del('ph_repository_test_rid');
  drupal_goto('test-repository');
}
