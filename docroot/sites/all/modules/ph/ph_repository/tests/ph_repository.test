<?php
/**
 * @file
 * Repository tests.
 */

/**
 * Repository entity tests.
 */
class PHRepositoryEntityTest extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Repository entity',
      'description' => 'Test the repository entity and basic integration with Entity API.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_repository_test');
  }

  /**
   * Tests entity and repository type info.
   */
  public function testInfo() {
    // Test repository info.
    $types = ph_repository_get_types();
    $this->assertTrue(isset($types['test']), 'Repository type is declared.');
    $this->assertEqual('ph_repository_test', $types['test']['module'], 'Module name is automatically filled.');
    $this->assertEqual('ph_repository', $types['test']['field_instance'][0]['entity_type'], 'Field instance entity type is automatically filled.');
    $this->assertEqual('test', $types['test']['field_instance'][0]['bundle'], 'Field instance bundle name is automatically filled.');

    // Test entity info.
    $info = entity_get_info('ph_repository');
    $this->assertTrue(!empty($info['bundles']['test']), 'Repository type is provided as a bundle.');
  }

  /**
   * Tests repository field setup.
   */
  public function testField() {
    $field = field_info_field('repository_key');
    $this->assertTrue(!empty($field), 'Field is created when enabling repository provider.');

    $instance = field_info_instance('ph_repository', 'repository_key', 'test');
    $this->assertTrue(!empty($instance), 'Field instance is created when enabling repository provider.');

    $fields = ph_repository_get_ensured_fields(array('ph_repository_test'));
    $this->assertTrue(count($fields) == 1 && $fields[0]['field_name'] == 'repository_key', 'Field declared by the repository provider is ensured.');

    $instances = ph_repository_get_ensured_instances(array('ph_repository_test'));
    $this->assertTrue(count($instances) == 1 && $fields[0]['field_name'] == 'repository_key', 'Field instance declared by the repository provider is ensured.');

    field_delete_instance($instance);
    ph_repository_ensure_fields(array('ph_repository_test'));
    $field = field_info_field('repository_key');
    $instance = field_info_instance('ph_repository', 'repository_key', 'test');
    $this->assertTrue(!empty($field) && !empty($instance), 'Deleted field and instance are recreated when ensuring repository fields.');
  }
}

/**
 * Repository operation tests.
 */
class PHRepositoryOperationTest extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Repository operations',
      'description' => 'Test CRUD operations on the repository entity.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_repository_test');
  }

  /**
   * Tests access to repositories.
   */
  public function testAccess() {
    // Create dummy repository.
    /** @var $entity PHRepository */
    $entity = entity_create('ph_repository', array('type' => 'test'));
    $entity->save();

    // Check empty permissions.
    $account = $this->drupalCreateUser();
    foreach (array('view', 'update', 'create', 'delete') as $op) {
      $access = entity_access($op, 'ph_repository', $entity, $account);
      $this->assertFalse($access, format_string('User with no permission may not @op repository.', array('@op' => $op)));
    }

    // Check administer permission.
    $account = $this->drupalCreateUser(array('administer project repository'));
    foreach (array('view', 'update', 'create', 'delete') as $op) {
      $access = entity_access($op, 'ph_repository', $entity, $account);
      $this->assertTrue($access, format_string('User with permission "administer project repository" may @op repository.', array('@op' => $op)));
    }

    // Check access to individual CRUD operation.
    foreach (array('view', 'update', 'create', 'delete') as $op) {
      $permission = "$op project repository";
      $account = $this->drupalCreateUser(array($permission));
      $access = entity_access($op, 'ph_repository', $entity, $account);
      $this->assertTrue($access, format_string('User with permission "@op project repository" may @op repository.', array('@op' => $op)));
    }
  }

  /**
   * Tests operations on a repository.
   */
  public function testOperations() {
    $user = $this->drupalCreateUser(array('administer project repository'));
    $this->drupalLogin($user);

    // Test creation form.
    $edit = array(
      'repository_key[und][0][value]' => 'value1',
    );
    $this->drupalPost('test-repository/create', $edit, t('Save'));
    $repository = ph_repository_test_get_repository();
    $this->assertTrue(!empty($repository), 'A repository is created using the entity form.');

    // Test viewing.
    $rid = $repository ? $repository->rid : 0;
    $this->drupalGet('test-repository');
    $this->assertText(sprintf('[rid:%d,test:value1]', $rid), 'Created repository contains submitted values.');

    // Test updating.
    $edit = array(
      'repository_key[und][0][value]' => 'value2',
    );
    $this->drupalPost('test-repository/update', $edit, t('Save'));
    $this->drupalGet('test-repository');
    $this->assertText(sprintf('[rid:%d,test:value2]', $rid), 'Repository details are updated using the entity form.');

    // Test deletion.
    $this->drupalGet('test-repository/delete');
    $repository = ph_repository_test_get_repository();
    $this->assertTrue(empty($repository), 'The repository is deleted.');
  }

  /**
   * Tests working directory.
   */
  public function testWorkingDirectory() {
    // Test on non-existent directory.
    $writable = ph_repository_prepare_working_directory('temporary://nonexistent');
    $this->assertTrue($writable, 'Non-existing working directory is created.');

    // Test on existing read-only directory.
    mkdir($readonly = 'temporary://readonly', 0555);
    $writable = ph_repository_prepare_working_directory($readonly);
    $this->assertTrue($writable, 'Existing read-only working directory is made writable.');

    // Test working folder deletion.
    /** @var $entity PHRepository */
    $entity = entity_create('ph_repository', array('type' => 'test'));
    $entity->save();
    $repositoryDirectory = 'temporary://ph_repository/test/' . $entity->rid;
    mkdir($repositoryDirectory, 0777, TRUE);
    $entity->delete();
    $this->assertFalse(file_exists($repositoryDirectory), 'Repository working directory is deleted on repository entity deletion.');
  }
}

/**
 * Repository backend tests.
 */
class PHRepositoryBackendTest extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Repository backend',
      'description' => 'Test repository backend operations.',
      'group' => 'Project Hosting',
    );
  }

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp('ph_repository_test');
  }

  /**
   * Tests delegated backend functionality.
   */
  public function testBackend() {
    /** @var $repository PHRepository */
    $repository = entity_create('ph_repository', array('type' => 'test'));
    $repository->save();

    // Switch off auto-sync.
    variable_set('ph_repository_sync_auto', 0);

    // Test backend object.
    $backend = $repository->backend();
    $this->assertTrue(is_object($backend) && $backend instanceof PHRepositoryBackendInterface, 'A repository provides a backend for operations.');

    // Test listing versions.
    $versions = array_values($backend->listVersions());
    $versionStrings = array_map('ph_version_format', $versions);
    $expected = array(
      '6.x-1.x-dev',
      '7.x-1.x-dev',
    );
    $this->assertEqual($expected, $versionStrings, 'Repository backend lists versions that can be exported.');

    // Test utility functions.
    $message = 'Utility function for repository backend synchronizes repository.';
    try {
      ph_repository_synchronize($repository);
      $this->fail($message);
    }
    catch (Exception $ex) {
      $this->assertEqual('PHRepositoryTestBackend::synchronize test', $ex->getMessage(), $message);
    }
    $versions = ph_repository_list_versions($repository);
    $versionStrings = array_map('ph_version_format', $versions);
    $this->assertEqual($expected, $versionStrings, 'Utility function for repository backend lists versions that can be exported.');

    // Prepare for export.
    $repositoryPath = 'temporary://repository/test';
    $fileInfoPath = $repositoryPath . '/test.info';
    $fileModulePath = $repositoryPath . '/test.module';
    file_prepare_directory($repositoryPath, FILE_CREATE_DIRECTORY);

    // Test first export.
    $version = $backend->export($repositoryPath, $versions[0]);
    $this->assertTrue(file_exists($fileInfoPath), 'First listed version exports an info file.');
    $this->assertTrue(file_exists($fileModulePath), 'First listed version exports a module file.');
    $this->assertEqual('6.x-1.0+1-dev', ph_version_format($version), 'First listed version returns the detailed version.');

    // Test utility function for first export.
    file_unmanaged_delete_recursive($repositoryPath);
    file_prepare_directory($repositoryPath, FILE_CREATE_DIRECTORY);
    $version = ph_repository_export($repository, $repositoryPath, $versions[0]);
    $this->assertEqual('6.x-1.0+1-dev', ph_version_format($version), 'Utility function for repository backend exports the first listed version.');

    // Test second export.
    file_unmanaged_delete_recursive($repositoryPath);
    file_prepare_directory($repositoryPath, FILE_CREATE_DIRECTORY);
    $version = $backend->export($repositoryPath, $versions[1]);
    $this->assertTrue(file_exists($fileInfoPath), 'Second listed version exports an info file.');
    $this->assertTrue(file_exists($fileModulePath), 'Second listed version exports a module file.');
    $this->assertEqual('7.x-1.0+1-dev', ph_version_format($version), 'Second listed version returns the detailed version.');

    // Test auto-sync.
    variable_set('ph_repository_sync_auto', 1);
    $message = 'Repository is automatically synchronized when listing versions.';
    try {
      ph_repository_list_versions($repository);
      $this->fail($message);
    }
    catch (Exception $ex) {
      $this->assertEqual('PHRepositoryTestBackend::synchronize test', $ex->getMessage(), $message);
    }
    $message = 'Repository is automatically synchronized when exporting.';
    try {
      ph_repository_export($repository, 'temporary://test', $versions[0]);
      $this->fail($message);
    }
    catch (Exception $ex) {
      $this->assertEqual('PHRepositoryTestBackend::synchronize test', $ex->getMessage(), $message);
    }
  }
}
