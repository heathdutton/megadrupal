<?php
/**
 * @file
 * Repository schema.
 */

/**
 * Implements hook_schema().
 */
function ph_repository_schema() {
  $schema['ph_repository'] = array(
    'description' => 'Source repository entity base table.',
    'fields' => array(
      'rid' => array(
        'type' => 'serial',
        'description' => 'Repository serial identifier.',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'description' => 'Type of repository, with a matching controller.',
        'length' => 128,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('rid'),
    'indexes' => array(
      'type' => array('type')
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function ph_repository_install() {
  $default_directory = 'temporary://ph_repository';
  variable_set('ph_repository_working_directory', $default_directory);
  file_prepare_directory($default_directory, FILE_CREATE_DIRECTORY);

  variable_set('ph_repository_sync_auto', 1);
}

/**
 * Implements hook_uninstall().
 */
function ph_repository_uninstall() {
  variable_del('ph_repository_working_directory');
  $default_directory = 'temporary://ph_repository';
  if (file_exists($default_directory)) {
    file_unmanaged_delete_recursive($default_directory);
  }

  variable_del('ph_repository_sync_auto');
}

/**
 * Implements hook_requirements().
 */
function ph_repository_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    $working_directory = ph_repository_working_directory();
    $error_value = ph_repository_install_check_directory($working_directory);
    if ($error_value) {
      $requirements['ph_repository_working_directory'] = array(
        'title' => $t('Project repository working directory'),
        'description' => $t('The configured working directory is invalid. Change the directory in !project-repository.', array(
          '!project-repository' => user_access('administer project repository') ? l(t('project repository settings'), 'admin/config/system/ph-repository') : t('project repository settings'),
        )),
        'value' => $error_value,
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}

/**
 * Checks the status of a working directory.
 */
function ph_repository_install_check_directory($directory, $create = TRUE) {
  if ($create) {
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  }

  $t = get_t();
  if (!file_exists($directory)) {
    $error_value = $t('Does not exist');
  }
  elseif (!is_dir($directory)) {
    $error_value = $t('Not a directory');
  }
  elseif (!is_writable($directory)) {
    $error_value = $t('Not writable');
  }

  return !empty($error_value) ? $error_value : FALSE;
}
