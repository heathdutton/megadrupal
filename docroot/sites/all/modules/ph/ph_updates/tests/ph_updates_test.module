<?php
/**
 * @file
 * Test update feed implementations.
 */

/**
 * Test value callback.
 */
function ph_updates_test_custom_value_callback(EntityMetadataWrapper $property) {
  return array('container' => $property->value());
}

/**
 * Implements hook_rules_data_info().
 */
function ph_updates_test_rules_data_info() {
  return array(
    'ph_test_composite' => array(
      'label' => t('composite type'),
      'property info' => ph_updates_test_composite_property_info(),
    ),
  );
}

/**
 * Builds testing info.
 */
function ph_updates_test_build_project_info(PHUpdatesInfoWrapper $info) {
  // Populate data.
  $data = array(
    'value' => 'value',
    'struct' => array('value' => 'struct'),
    'composite' => array('value' => 'composite'),
    'custom' => 'custom',
    'list' => array('list item'),
    'list_nested' => array('list_nested item'),
    'list_composite' => array(array('value' => 'list_composite item')),
    'list_custom' => array('list_custom item'),
    'list_custom_nested' => array('list_custom_nested item'),
  );
  foreach ($data as $key => $value) {
    $info->get($key)->set($value);
  }

  // Populate nested data.
  $info->subinfo = ph_updates_data_create('info', 'test', array(
    'composite' => array('value' => 'subinfo'),
    'subtree' => array('value' => 'deep_tree'),
  ));
  $info->select('subinfo:struct')->value = 'deep_struct';
  $subtree = ph_updates_data_create('info', 'test', array(
    'value' => 'subtree',
  ))->extractTree();
  $info->subtree = ph_updates_data_create('info', 'test', array(
    'composite' => array('value' => 'subtree'),
    'subtree' => $subtree,
  ))->extractTree();
}

/**
 * Returns the property info for the test composite type.
 */
function ph_updates_test_composite_property_info() {
  return array(
    'value' => array(
      'type' => 'text',
      'label' => t('Value'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );
}

/**
 * Test formatter.
 */
class PHUpdatesTestFormat implements PHUpdatesFormatInterface {
  /**
   * Formats a tree.
   *
   * @param PHUpdatesTreeWrapper $tree
   *   Tree wrapper object.
   * @return string|array
   *   String formatted output or render array.
   */
  public function format($tree) {
    return serialize($tree->value());
  }

  /**
   * Formats an error.
   *
   * @param PHUpdatesInfoError $error
   *   Update info error to format.
   * @return string|array
   *   String formatted output or render array.
   */
  public function formatError($error) {
    return $error->getMessage();
  }
}
