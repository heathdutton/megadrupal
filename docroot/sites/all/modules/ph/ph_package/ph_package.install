<?php
/**
 * @file
 * Packaging install file.
 */

/**
 * Implements hook_schema().
 */
function ph_package_schema() {
  $schema['cache_ph_package'] = drupal_get_schema_unprocessed('system', 'cache');
  return $schema;
}

/**
 * Implements hook_install().
 */
function ph_package_install() {
  $default_directory = 'temporary://ph_package';
  variable_set('ph_package_working_directory', $default_directory);
  file_prepare_directory($default_directory, FILE_CREATE_DIRECTORY);

  variable_set('ph_package_archive_directory', 'public://');
  variable_set('ph_package_archive_replace', FILE_EXISTS_REPLACE);
  variable_set('ph_package_stamp', 'default');
  variable_set('ph_package_stamp_header', '');
}

/**
 * Implements hook_uninstall().
 */
function ph_package_uninstall() {
  variable_del('ph_package_working_directory');
  $default_directory = 'temporary://ph_package';
  if (file_exists($default_directory)) {
    file_unmanaged_delete_recursive($default_directory);
  }

  variable_del('ph_package_archive_directory');
  variable_del('ph_package_archive_replace');
  variable_del('ph_package_stamp');
  variable_del('ph_package_stamp_header');
}

/**
 * Implements hook_requirements().
 */
function ph_package_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    module_load_install('ph_package');
    $working_directory = ph_package_working_directory();
    $error_value = ph_repository_install_check_directory($working_directory);
    if ($error_value) {
      $requirements['ph_package_working_directory'] = array(
        'title' => $t('Packaging working directory'),
        'description' => $t('The configured working directory is invalid. Change the directory in !project-package.', array(
          '!project-package' => user_access('administer project repository') ? l(t('project packaging settings'), 'admin/config/system/ph-repository/package') : t('project packaging settings'),
        )),
        'value' => $error_value,
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}
