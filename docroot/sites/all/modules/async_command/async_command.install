<?php

/**
 * @file
 *   External Command installation file.
 */

/**
 * Implements hook_schema().
 */
function async_command_schema() {
  $schema = array();
  $schema['async_command'] = array(
    'description' => 'Stores external async commands.',
    'fields' => array(
      // core fields
      'id'          => array('type' => 'serial', 'not null' => TRUE, 'description' => 'Unique auto increment async_command id',),
      'app'         => array('type' => 'varchar', 'not null' => TRUE, 'length' => 50, 'description' => 'Application that generates/executes a set of commands',),
      'command'     => array('type' => 'varchar', 'not null' => TRUE, 'length' => 50, 'description' => 'Command to be executed, no parameters',),
      'description' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 200, 'description' => 'Human readable text to explain the command to users',),
      'uid'         => array('type' => 'int', 'not null' => FALSE, 'unsigned' => TRUE, 'description' => "FK User's {users}.uid.",),
      'eid'         => array('type' => 'int', 'not null' => FALSE, 'unsigned' => TRUE, 'description' => "Related entity_id for this command, if any. If no entity_id, set it to null"),
      'created'     => array('type' => 'int', 'not null' => TRUE, 'unsigned' => TRUE, 'default' => 0, 'description' => 'Unix timestamp this command is created',),

      // parameters and results
      'input'   => array('type' => 'blob', 'not null' => FALSE, 'description' => 'Input parameters for this command',),
      'output'  => array('type' => 'blob', 'not null' => FALSE, 'description' => 'Return results for this command',),
      'id1'     => array('type' => 'int', 'not null' => FALSE, 'description' => "Optional ID, suggested for input",),
      'id2'     => array('type' => 'int', 'not null' => FALSE, 'description' => "Optional ID, suggested for output",),
      'id3'     => array('type' => 'int', 'not null' => FALSE, 'description' => "Optional ID, suggested for input",),
      'id4'     => array('type' => 'int', 'not null' => FALSE, 'description' => "Optional ID, suggested for output",),
      'number1' => array('type' => 'float', 'not null' => FALSE, 'description' => "Optional number, suggested for input",),
      'number2' => array('type' => 'float', 'not null' => FALSE, 'description' => "Optional number, suggested for output",),
      'number3' => array('type' => 'float', 'not null' => FALSE, 'description' => "Optional number, suggested for input",),
      'number4' => array('type' => 'float', 'not null' => FALSE, 'description' => "Optional number, suggested for output",),
      'string1' => array('type' => 'varchar', 'length' => 1000, 'not null' => FALSE, 'description' => "Optional string, suggested for input",),
      'string2' => array('type' => 'varchar', 'length' => 1000, 'not null' => FALSE, 'description' => "Optional string, suggested for output",),
      'string3' => array('type' => 'varchar', 'length' => 1000, 'not null' => FALSE, 'description' => "Optional string, suggested for input",),
      'string4' => array('type' => 'varchar', 'length' => 1000, 'not null' => FALSE, 'description' => "Optional string, suggested for output",),
      //'dependency'  => array('type' => 'int', 'not null' => FALSE, 'unsigned' => TRUE, 'description' => 'For serialized execution sequence, this links to the id of dependent command',),
      // session => array() session id, not implemented yet.

      // running status, message, control, misc
      'status'      => array('type' => 'char', 'length' => 4, 'not null' => FALSE, 'description' => 'Status code of the command, see code in Java',),
      'control'     => array('type' => 'char', 'length' => 4, 'not null' => FALSE, 'description' => 'Control signal to send to the running command, see code in Java',),
      'message'     => array('type' => 'text', 'not null' => FALSE, 'description' => 'Human readable message for users about the execution results',),
      'weight'      => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'unsigned' => FALSE, 'description' => 'Similar to the module weight, 0 is normal, small number has higher priority',),
      'start'       => array('type' => 'int', 'not null' => FALSE, 'unsigned' => TRUE, 'description' => 'Timestamp when the command is executed, perhaps has timezone difference from created',),
      'end'         => array('type' => 'int', 'not null' => FALSE, 'unsigned' => TRUE, 'description' => 'Timestamp when the command is done',),
      'checkpoint'  => array('type' => 'int', 'not null' => FALSE, 'unsigned' => TRUE, 'description' => 'Signal timestamp, used to show how much time is spent running up to the checkpoint',),
      'progress'    => array('type' => 'float', 'not null' => FALSE, 'unsigned' => TRUE, 'description' => '(0,1) float number to show the progress of the command',),
    ),

    'primary key' => array('id'),
    'indexes' => array(
      'app_index'       => array('app'),
      'priority_index'  => array('weight', 'created'),
    ),
    'foreign keys' => array(
      'user_uid'    => array('table' => 'users', 'columns' => array('uid' => 'uid'),),
      'dependency'  => array('table' => 'async_command', 'columns' => array('dependency' => 'id')),
    ),
  );
  return $schema;
}

/**
 * Implements hook_update_N().
 * Reinstall async_command schema.
 */
function async_command_update_7201() {
  db_drop_table('async_command');
  drupal_install_schema('async_command');
}

/**
 * Implements hook_update_N().
 * Remove 'dependency' field.
 */
function async_command_update_7202() {
  db_drop_field('async_command', 'dependency');
}

/**
 * Add id3, id4; and string3, string4
 */
function async_command_update_7203() {
  $schema = async_command_schema();
  $fields = $schema['async_command']['fields'];
  db_add_field('async_command', 'id3', $fields['id3']);
  db_add_field('async_command', 'id4', $fields['id4']);
  db_add_field('async_command', 'string3', $fields['string3']);
  db_add_field('async_command', 'string4', $fields['string4']);
}