<?php

/**
 * This module provides a simple way to create commands for external programs/scripts to execute.
 * This module doesn't require Views. But if you install views, you'll find the default view at /async-command-default
 *
 * @author Daniel Zhou <http://drupal.org/user/112233>
 */


/**
 * Implements hook_menu().
 */
function async_command_menu() {
  $items['admin/reports/async_command'] = array(
    'title' => 'Async command log',
    'description' => 'Display the list of async commands execution logs.',
    // TODO: could display some information about how to change the info to display in views.
    'page callback' => 'views_embed_view',
    'page arguments' => array('async_command_default'),
    'access arguments' => array('access site reports'),
    //'position' => 'left',
    //'weight' => 0,
  );
  return $items;
}


/**
 * Creates a command and save to the {async_command} queue. Duplicate command would not get saved twice.
 * To force saving a duplicate command, mannually set the 'created' field or any input field with different value in $options.
 *
 * @param $app
 * @param $command
 * @param $description
 * @param $options
 * @return the ID of the newly created async command.
 */
function async_command_create_command($app, $command, $description = NULL, $options = array()) {
  $schema = drupal_get_schema('async_command');
  $valid_field = array_keys($schema['fields']);

  // attention: this could be set after setting other fields in $options in order to override.
  $command_fields = array(
    'app' => $app,
    'command' => $command,
    'description' => $description,
  );

  // set default uid value.
  if (isset($options['uid'])) {
    $command_fields['uid'] = $options['uid'];
  }
  else {
    global $user;
    if ($user->uid != 0) {
      $command_fields['uid'] = $user->uid;
    }
  }

  // set other value
  if (!empty($options)) {
    foreach ($options as $field => $value) {
      if (in_array($field, $valid_field)) {
        $command_fields[$field] = $value;
      }
    }
  }
  //var_dump($command_fields);

  $select = db_select('async_command', 'c');
  $select->fields('c', array('id'));
  $select->condition('status', NULL);
  $select->orderBy('created', 'DESC');
  foreach ($command_fields as $field => $value) {
    $select->condition($field, $value);
  }
  $select_result = $select->execute();
  //var_dump($select->__toString());

  // FIXME: very strange that if you set number*=1.0 it works but number*=1.6 then it doesn't work. So you can't compare 2 float numbers that doesn't have exact matching in SQL?
  if ($select_result->rowCount() > 0) {
    $id = $select_result->fetchField();
    // if duplicate exists, then just return.
    watchdog('async_command', 'Duplicate command "!command" for application "!app". Duplicate ID: !id', array('!command'=>$command, '!app'=>$app, '!id'=>$id));
    return $id;
  }

  // now we do insert.
  if (!isset($command_fields['created'])) {
    // could be set already.
    $command_fields['created'] = time();
  }
  $insert = db_insert('async_command');
  $insert->fields($command_fields);
  $id = $insert->execute();
  //var_dump($insert->__toString());
  return $id;
}


/**
 * Update fields of the command record.
 *
 * @param $id ID of the command.
 * @param $fields array Make sure all fields are valid, otherwise would throw errors.
 * @return the number of updated record. 0 means not successful.
 */
function async_command_update_command($id, $fields) {
  $num_updated = db_update('async_command')
    ->fields($fields)
    ->condition('id', $id)
    ->execute();
  return $num_updated;
}

/**
 * Load the command record object.
 *
 * @param $id
 * @return null
 */
function async_command_load_command($id) {
  $command = db_query("SELECT * FROM {async_command} WHERE id = :id", array(':id' => $id))->fetchObject();
  if ($command) {
    return $command;
  }
  else {
    return NULL; // return NULL rather than FALSE.
  }
}



/////////////// code below this point would be refactored ///////////////////

function _async_command_table_fields() {
  return array(
    'id' => t('ID'),
    'app' => t('App'),
    'uid' => t('User'),
    'eid' => t('Entity ID'),
    'command' => t('Command'),
    'created' => t('Created'),
    'end' => t('Updated'),
    'status' => t('Status'),
    'message' => t('Message'),
  );
}

/**
 * Retrieve a list of commands given the conditions, in an array list.
 */
function async_command_retrieve_command_list($app=NULL, $uid=NULL, $eid=NULL, $limit = 10) {
  $query = db_select('async_command', NULL, array('fetch' => PDO::FETCH_ASSOC));
  $query->fields('async_command', array_keys(_async_command_table_fields()));

  if ($app != NULL) {
    if (is_array($app)) {
      $query->condition('app', $app, 'IN');
    } else {
      $query->condition('app', $app, '=');
    }
  }
  if ($uid != NULL) {
    $query->condition('uid', $uid);
  }
  if ($eid != NULL) {
    $query->condition('eid', $eid);
  }
  $query->orderBy('created', 'DESC');
  $query->range(0, $limit);
  return $query->execute();
}


function async_command_theme($existing, $type, $theme, $path) {
  return array(
    'async_command_list' => array(
      'variables' => array(
        'title' => t('Recent command list'),
        'command_list' => NULL,
        'cols' => array_keys(_async_command_table_fields()),
      ),
    ),
    'async_command_operations' => array(
      'variables' => array(
        'title' => t('Operations'),
        'operations' => NULL,
      ),
    ),
  );
}

/**
 * @param  $variables a list of command, returned by async_command_retrieve_command_list
 * @return themed HTML string for the recent command list
 */
function theme_async_command_list($variables) {
  $table_fields = _async_command_table_fields();
  $cols = $variables['cols'];
  $command_list = $variables['command_list'];

  $header = array();
  foreach ($cols as $col) {
    $header[] = $table_fields[$col];
  }

  $rows = array();
  foreach ($command_list as $command) {
    // pre-process the command
    $command['command'] = check_plain($command['command']);
    $command['uid'] = $command['uid'] == 0 ? t('Anonymous') : user_load($command['uid'])->name;
    $command['created'] = format_date($command['created'], 'short');
    $command['end'] = format_date($command['end'], 'short');
    $command['status'] = isset($command['status']) ? ( $command['status'] == 1 ? t('success') : '<em>'. t('failure') .'</em>') : '&lt;'. t('pending...') .'&gt;';
    $command['message'] = check_plain($command['message']);

    $row = array();
    foreach ($cols as $col) {
      $row[] = $command[$col];
    }
    $rows[] = $row;
  }

  $table = array(
    'header' => $header,
    'rows' => $rows,
    //'caption' => t('Recent Commands List'),
    'empty' => t('No commands.')
  );
  $table_content = theme('table', $table);
  $title = check_plain($variables['title']);

  return "<div id='async-command-list'><h2 class='title'>$title</h2>{$table_content}</div>";

}

// This is deprecated. Dependent module should implement their own operations function.
function theme_async_command_operations($variables) {
  $operations = $variables['operations'];
  $items = array();
  foreach ($operations as $path => $operation) {
    // note: in hook_menu, 'title' is untranslated, so we need to translate here.
    // attention: need to make it look better (description should have smaller font)
    $item = l(t($operation['title']), $path);
    if (isset($operation['description'])) {
      $item .= " (". t($operation['description']) .")";
    }
    $items[] = $item;
  }
  $items_content = theme('item_list', array('items' => $items, 'type' => 'ul'));
  $title = $variables['title'];
  return "<div id='async-command-operations'><h2 class='title'>$title</h2>{$items_content}</div>";
}


//TODO: Need to add list/add command interface for users who have permissions.

/**
 * Implements hook_trigger_info().
 */
function async_command_trigger_info() {
  return array(
    'async_command' => array(
      'command_executed' => array(
        'label' => t('After the command was executed'),
      ),
      'command_failed' => array(
        'label' => t('After the command was executed, but failed'),
      ),
    ),
  );
}

/**
 * This trigger would be triggered in CRON for now.
 */
function async_command_fire_trigger($trigger_name, $command) {
  // trigger is optional
  if (!module_exists('trigger')) {
    return;
  }
  // Ask the trigger module for all actions enqueued for the 'triggersomething' trigger.
  $aids = trigger_get_assigned_actions($trigger_name);
  $context = array(
    'group' => 'async_command',
    'hook' => 'fire_trigger',
  );

  if ($command->uid != 0) {
    $context['user'] = user_load($command->uid);
  }
  if ($command->eid != 0) {
    // TODO: we use eid (for entity), but here used node_load(). should use entity_load() at some point
    $context['node'] = node_load($command->eid);
  }

  actions_do(array_keys($aids), NULL, $context);
}

/**
 * Implements hook_cron().
 */
function async_command_cron() {
  $cron_last = variable_get('cron_last', 0);
  // search all commands finished from the last cron
  $result = db_query("SELECT * FROM {async_command} WHERE status IS NOT NULL AND created>=?", array($cron_last));

  foreach ($result as $record) {
    // fire the 'command_executed trigger for sure.
    async_command_fire_trigger('command_executed', $record);
    // fire 'command_failed' only when status=0
    if ($record->status == 0) {
      async_command_fire_trigger('command_failed', $record);
    }
  }
}


/**
 * Implements hook_views_api().
 */
function async_command_views_api() {
  return array(
    'api' => 3,
  );
}