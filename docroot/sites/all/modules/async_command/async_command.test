<?php

class AsyncCommandTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Async Command basic test'),
      'description' => t('Test functions of the Async Command module.'),
      'group' => t('Async Command'),
    );
  }

  public function setUp() {
    //drupal_load('module', 'async_command');
    parent::setUp('async_command');
  }

  public function testCreateUpdateCommand() {
    // note: number3=1.5 will work.
    $id1 = async_command_create_command('default', 'PingMe', 'Test PingMe', array('string1' => 'Hello', 'id2' => 100, 'number3' => 1.5));
    $id2 = async_command_create_command('default', 'PingMe', 'Test PingMe', array('string1' => 'Hello', 'id2' => 100, 'number3' => 1.5));
    // duplicate command should not be created twice.
    $this->assertEqual($id1, $id2);

    // note: number3=1.6 will not be treated as duplicate. could be float precision problem in SQL.
    $id3 = async_command_create_command('default', 'PingMe', 'Test PingMe', array('string1' => 'Hello', 'id2' => 100, 'number3' => 1.6));
    $id4 = async_command_create_command('default', 'PingMe', 'Test PingMe', array('string1' => 'Hello', 'id2' => 100, 'number3' => 1.6));
    $this->assertNotEqual($id3, $id4);

    $record = async_command_load_command($id1);
    $this->assertEqual($record->description, 'Test PingMe');
    $this->assertEqual($record->number3, 1.5);
    $this->assertEqual($record->id2, 100);
    $this->assertTrue($record->created > 0);

    async_command_update_command($id1, array('id2' => 200));
    $record = async_command_load_command($id1);
    $this->assertEqual($record->id2, 200);
  }

}