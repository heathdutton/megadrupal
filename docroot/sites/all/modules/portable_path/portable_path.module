<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

/**
 * Implements hook_help().
 */
function portable_path_help($path, $arg) {
  module_load_include('inc', 'portable_path', 'includes/info');
  return _portable_path_help($path, $arg);
}

/**
 * Implements hook_menu().
 */
function portable_path_menu() {
  module_load_include('inc', 'portable_path', 'includes/info');
  return _portable_path_menu();
}

/**
 * Implements hook_field_attach_load().
 */
function portable_path_field_attach_load($entity_type, $queried_entities, $age, $options) {
/*
  // @todo If caches are being cleared, calling menu_get_item() from here
  // results in an infinite loop?
  // Try to avoid filter processing except on entity edit.
  $item = menu_get_item();
  if (in_array($item['path'], array('user/%', 'node/%'))) {
    // Filters have already been processed on view of user or node.
    // @todo How to identify the viewing of other entities?
    return;
  }
*/
  module_load_include('inc', 'portable_path', 'includes/edit');
  _portable_path_field_attach_load($entity_type, $queried_entities, $age, $options);
}

/**
 * Implements hook_field_attach_presave().
 */
function portable_path_field_attach_presave($entity_type, $entity) {
  module_load_include('inc', 'portable_path', 'includes/save');
  _portable_path_field_attach_presave($entity_type, $entity);
}

/**
 * Implements hook_filter_info().
 */
function portable_path_filter_info() {
  module_load_include('inc', 'portable_path', 'includes/info');
  return _portable_path_filter_info();
}

/**
 * Filter process callback.
 *
 * @todo
 * These filter callback routines could be omitted if filter module included a
 * path in hook_filter_info().
 */
function portable_path_file_id_process($text, $filter, $format) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_file_id_process($text, $filter, $format);
}

/**
 * Filter settings callback.
 */
function portable_path_file_id_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_file_id_settings($form, $form_state, $filter, $format, $defaults, $filters);
}

/**
 * Filter tips callback.
 */
function portable_path_file_id_tips($filter, $format, $long = FALSE) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_file_id_tips($filter, $format, $long);
}

/**
 * Filter process callback.
 */
function portable_path_stream_wrapper_process($text, $filter, $format) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_stream_wrapper_process($text, $filter, $format);
}

/**
 * Filter settings callback.
 */
function portable_path_stream_wrapper_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  return portable_path_file_id_settings($form, $form_state, $filter, $format, $defaults, $filters);
}

/**
 * Filter tips callback.
 */
function portable_path_stream_wrapper_tips($filter, $format, $long = FALSE) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_stream_wrapper_tips($filter, $format, $long);
}

/**
 * Filter process callback.
 */
function portable_path_remote_file_id_process($text, $filter, $format) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_remote_file_id_process($text, $filter, $format);
}

/**
 * Filter settings callback.
 */
function portable_path_remote_file_id_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_remote_file_id_settings($form, $form_state, $filter, $format, $defaults, $filters);
}

/**
 * Filter tips callback.
 */
function portable_path_remote_file_id_tips($filter, $format, $long = FALSE) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_remote_file_id_tips($filter, $format, $long);
}

/**
 * Filter process callback.
 */
function portable_path_remote_stream_wrapper_process($text, $filter, $format) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_remote_stream_wrapper_process($text, $filter, $format);
}

/**
 * Filter settings callback.
 */
function portable_path_remote_stream_wrapper_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  return portable_path_remote_file_id_settings($form, $form_state, $filter, $format, $defaults, $filters);
}

/**
 * Filter tips callback.
 */
function portable_path_remote_stream_wrapper_tips($filter, $format, $long = FALSE) {
  module_load_include('inc', 'portable_path', 'includes/filter');
  return _portable_path_remote_stream_wrapper_tips($filter, $format, $long);
}

/**
 * Returns the path configuration settings.
 *
 * @return array
 *   An associative array of configuration settings.
 */
function portable_path_config() {
  // Add defaults.
  $defaults = array(
    'stream_wrappers' => array('public', 'private'),
    'field_types' => array('text_long', 'text_with_summary'),
    'field_names' => array('body'),
    // This granularity is not implemented.
//     'entity_types' => array('node'),
//     'bundles' => array(),
  );
  foreach ($defaults as $name => $default) {
    $config[$name] = array_filter(variable_get('portable_path_' . $name, drupal_map_assoc($default)));
  }
  return $config;
}

/**
 * Callback for array_filter within _portable_path_field_attach_presave().
 *
 * @return boolean
 *   TRUE if filter is defined by this module and is active; FALSE otherwise.
 */
function portable_path_array_filter($item) {
  return $item->status && !empty($item->module) && $item->module == 'portable_path';
}
