<?php

/**
 * Implements hook_permission().
 */
function google_weather_permission() {
  return array(
    'google_weather_settings' => array(
      'title' => t("Administer Google weather settings"),
    ),
    'google_weather_user_configure' => array(
      'title' => t("Configure own user weather location settings."),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function google_weather_menu() {
  // Base path for admin pages.
  $path = 'admin/config/services/google_weather';

  $items[$path] = array(
    'title' => "Google weather",
    'description' => "Google weather configuration and settings",
    'access arguments' => array('google_weather_settings'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[$path . '/locations'] = array(
    'title' => "Google weather block configuration",
    'description' => "Add or remove different locations that will be available as blocks.",
    'access arguments' => array('google_weather_settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_weather_location_admin_form'),
    'file' => 'google_weather.admin.inc',
  );
  $items[$path . '/locations/add'] = array(
    'title' => "Add new location",
    'description' => "Each location added can be made available as a block.",
    'access arguments' => array('google_weather_settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_weather_add_location_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'google_weather.admin.inc'
  );
  $items[$path . '/locations/%google_weather_location/edit'] = array(
    'title' => "Edit location information",
    'access arguments' => array('google_weather_settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_weather_edit_location_form', 5),
    'file' => 'google_weather.admin.inc'
  );
  $items[$path . '/locations/%google_weather_location/remove'] = array(
    'title' => "Remove location",
    'description' => "Callback used for AJAX request to remove location.",
    'access arguments' => array('google_weather_settings'),
    'page callback' => 'google_weather_remove_location',
    'page arguments' => array(5),
  );
  $items[$path . '/settings'] = array(
    'title' => "Google weather settings",
    'description' => "Global settings for Google weather module.",
    'access arguments' => array('google_weather_settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_weather_settings_admin_form'),
    'file' => 'google_weather.admin.inc',
  );

  return $items;
}

/**
 * magic _load function called by %location in hook_menu().
 */
function google_weather_location_load($bid) {
  $location = db_select('google_weather_blocks', 'gwb')
    ->fields('gwb', array('bid', 'location', 'days', 'block'))
    ->condition('bid', $bid)
    ->execute()
    ->fetchObject();

  return $location;
}

/**
 * Implements hook_block_info().
 */
function google_weather_block_info() {

  // Create a block for each global location search entered. Only if create block checkbox is TRUE.
  foreach (_google_weather_get_all_locations() as $location) {
    if ($location->block == TRUE) {
      $blocks["google_weather_block_$location->bid"] = array(
        'info' => t("Google weather: @title", array('@title' => $location->location)),
        'description' => t("Google weather block for @title", array('@title' => $location->location)),
        'cache' => DRUPAL_NO_CACHE, // Caching done in weather_show. May change this to DRUPAL_CACHE_GLOBAL.
      );
    }
  }

  $blocks['google_weather_user_block'] = array(
    'info' => t("Google weather: Current user block"),
    'description' => t("Shows the current user a weather block based on settings from their account."),
      'cache' => DRUPAL_CACHE_PER_USER,
      'cache lifetime' => variable_get('google_weather_block_cache', 300),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function google_weather_block_view($delta = '') {
  $block = NULL;

  if (strpos($delta, "google_weather_block_") !== FALSE) {
    $parts = explode("_", $delta);
    $bid = $parts[3];
    $location = google_weather_location_load($bid);
    $block['content'] = google_weather_show($location);
  }

  if ($delta == 'google_weather_user_block') {
    global $user;
    $user_location = _google_weather_get_user_location($user->uid);
    if ($user_location) {
      $block['content'] = google_weather_show($user_location);
    }
  }

  return $block;
}

/**
 * Main function to make call to google weather service.
 *
 * @param $location
 * 	Location object.
 *
 * @return
 *  Themed weather data, ready for output.
 *
 */
function google_weather_show($location) {
  global $language;

  $weather = new googleWeather($location, $language);
  $data = google_weather_render($weather->get_weather_data());

  return $data;
}

/**
 * Wrapper function to return empty message or themed template of weather data.
 * Empty data will then not be passed to our theme function.
 *
 * @param $data
 *  Full contents returned from googleWeather::$data
 *
 * @return
 *  Output to display.
 *
 */
function google_weather_render($data) {
  // Return message if no data present to pass to theme template.
  if (empty($data)) {
    return filter_xss_admin(variable_get('google_weather_no_service', 
      t("Data could not be requested from google weather service.")));
  }
  // Render data into template.
  else {
    return theme('google_weather_block', $data);
  }
}

/**
 * Get all locations stored in google_weather_blocks table.
 *
 * @return
 *  array of gw location objects.
 *
 */
function _google_weather_get_all_locations() {
  $rows = array();

  $results = db_select('google_weather_blocks', 'dwb')
    ->fields('dwb', array('bid', 'location', 'days', 'block'))
    ->execute();

  foreach ($results as $result) {
    $rows[] = $result;
  }

  return $rows;
}

/**
 * Get user location details based on their user ID.
 *
 * @param $uid
 *
 * @return
 *  Single user location object for matched uid.
 *
 */
function _google_weather_get_user_location($uid) {
  $user_location = db_select('google_weather_user_block', 'dwub')
    ->fields('dwub', array('uid', 'location', 'days'))
    ->condition('uid', $uid)
    ->execute()
    ->fetchObject();

  return $user_location;
}

/**
 * Implements hook_theme().
 */
function google_weather_theme() {
  return array(
    'google_weather_block' => array(
      'template' => 'google_weather_block',
    ),
  );
}

/**
 * Implements hook_preprocess_hook.
 */
function google_weather_preprocess_google_weather_block(&$vars) {
  if (isset($vars['google_weather_info']['location'])) {
    $vars['classes_array'][] = drupal_html_class($vars['google_weather_info']['location']);
  }
  $vars['classes'] = implode(' ', $vars['classes_array']);
}

/**
 * Implements hook_user_categories().
 */
function google_weather_user_categories() {
 return array(array(
      'name' => 'google_weather',
      'title' => t('Google weather'),
      'weight' => 1,
      // access callback? ('google_weather_user_configure')
    ));
}

/**
 * Alter user profile form to include our elements for user category 'google_weather'.
 *
 * TODO: Show User location settings based on module setting or permission.
 *
 */
function google_weather_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'google_weather' && user_access('google_weather_user_configure')) {
    // Get current users location settings.
    $defaults = _google_weather_get_user_location($form['#user']->uid);

    $form['google_weather']['google_weather_user_location'] = array(
      '#type' => 'textfield',
      '#title' => t('Location'),
      '#description' => t("Please enter the name of the location you wish to show weather for."),
      '#default_value' => isset($defaults->location) ? $defaults->location : '',
    );
    $form['google_weather']['google_weather_user_days'] = array(
      '#type' => 'select',
      '#title' => t("Number of days"),
      '#description' => t("Choose 'now only' if you want the current weather.
      	Otherwise choose the amount of days you wish to show a forecast for (1 day will show current day)."),
      '#options' => array(
        '1' => t("Now only"),
        '2' => 1,
        '3' => 2,
        '4' => 3,
        '5' => 4,
      ),
      '#default_value' => isset($defaults->days) ? $defaults->days : 2,
    );

    $form['#submit'][] = 'google_weather_user_profile_form_submit';
  }
}

function google_weather_user_profile_form_submit($form, $form_state) {
  $values = $form_state['values'];

  db_merge('google_weather_user_block')
    ->key(array('uid' => $values['uid']))
    ->fields(array(
      'uid' => $values['uid'],
      'location' => $values['google_weather_user_location'],
      'days' => $values['google_weather_user_days'],
    ))
    ->execute();

  // Clear all caches when new block is added.
  cache_clear_all();
}

/**
 * AJAX callback to remove location from location settings page.
 */
function google_weather_remove_location($location, $type = 'ajax') {
  $token_check = drupal_valid_token($_GET['token'], 'google_weather_remove_location');

  if (!$token_check) {
    return;
  }

  if ($type == 'ajax') {
    _google_weather_remove_block($location->bid);

    $commands = array();

    $html = '<div id="google-weather-ajax-message" class="messages status" style="margin: 0 5px;"><p>';
    $html .= t("Location: %location removed", array('%location' => $location->location));
    $html .= '</p></div>';

    $commands[] = ajax_command_remove("#google-weather-row-$location->bid");
    $commands[] = ajax_command_prepend("#edit-Google-weather", $html);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = t("Location: @location removed.", array('@location' => $location->location));
    return $output;
  }
}

/**
 * Remove block data from {google_weather_blocks} and core {block} table.
 */
function _google_weather_remove_block($bid) {
  if (is_numeric($bid)) {
    db_delete('google_weather_blocks')
      ->condition('bid', $bid)
      ->execute();
    db_delete('block')
      ->condition('delta', "google_weather_block_$bid")
      ->execute();

    return TRUE;
  }
  return FALSE;
}

/**
 * Small helper function so I don't have to keep writing html tags!
 */
function html_tag($data, $tag) {
  $html = "<$tag>$data</$tag>";
  return $html;
}
