<?php
/**
 * @file
 * Tests for different parts of the odir module.
 */

/**
 * Testing some central functions of odir module.
 */
class OdirUnitTests extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Odir Unit Tests',
      'description' => 'Odir Unit Tests',
      'group' => 'Odir',
    );
  }
  /**
   * Helper function testing odir_encode().
   */
  protected function testEncode($encoded, $decoded) {
    $this->assertEqual(odir_encode($decoded), $encoded, "Path correctly decoded to " . $encoded);
  }

  /**
   * Helper function testing odir_decode().
   */
  protected function testDecode($encoded, $decoded) {
    $this->assertEqual(odir_decode($encoded), $decoded, "Path correctly decoded to " . $decoded);
  }

  /**
   * Testing odir_encode() and odir_decode().
   */
  public function testEncodeDecode() {
    $encoded = "test1" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test2" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test3" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test4";
    $decoded = "test1" . ODIR_DIRECTORY_SEPARATOR . "test2" . ODIR_DIRECTORY_SEPARATOR . "test3" . ODIR_DIRECTORY_SEPARATOR . "test4";
    $this->testEncode($encoded, $decoded);
    $this->testDecode($encoded, $decoded);

    $encoded = "";
    $decoded = "";
    $this->testEncode($encoded, $decoded);
    $this->testDecode($encoded, $decoded);

    $encoded = ODIR_DIRECTORY_SEPARATOR_ENCODED;
    $decoded = "";
    $this->testDecode($encoded, $decoded);

    $encoded = "";
    $decoded = ODIR_DIRECTORY_SEPARATOR;
    $this->testEncode($encoded, $decoded);

    $encoded = "test1" . ODIR_DIRECTORY_SEPARATOR_ENCODED . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test3" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test4";
    $decoded = "test1" . ODIR_DIRECTORY_SEPARATOR . "test3" . ODIR_DIRECTORY_SEPARATOR . "test4";
    $this->testDecode($encoded, $decoded);

    $encoded = "test1" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test3" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test4";
    $decoded = "test1" . ODIR_DIRECTORY_SEPARATOR . ODIR_DIRECTORY_SEPARATOR . "test3" . ODIR_DIRECTORY_SEPARATOR . "test4";
    $this->testEncode($encoded, $decoded);

    $encoded = "somesheme://test1" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test2" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test3" . ODIR_DIRECTORY_SEPARATOR_ENCODED . "test4";
    $decoded = "somesheme://test1" . ODIR_DIRECTORY_SEPARATOR . "test2" . ODIR_DIRECTORY_SEPARATOR . "test3" . ODIR_DIRECTORY_SEPARATOR . "test4";
    $this->testDecode($encoded, $decoded);
  }

  /**
   * Testing odir_get_parent($path).
   */
  public function testGetParent() {
    $path1 = ODIR_DIRECTORY_SEPARATOR . "test1" . ODIR_DIRECTORY_SEPARATOR . "test2";
    $path2 = $path1 . ODIR_DIRECTORY_SEPARATOR . "test3";
    $this->assertEqual(odir_get_parent($path2), $path1, "odir_get_parent(" . $path2 . ") = " . odir_get_parent($path2) . " <==> $path1 ");


    $path1 = ODIR_DIRECTORY_SEPARATOR . "test1" . ODIR_DIRECTORY_SEPARATOR . "test2";
    $path2 = $path1 . ODIR_DIRECTORY_SEPARATOR . "test3" . ODIR_DIRECTORY_SEPARATOR;
    $this->assertEqual(odir_get_parent($path2), $path1, "odir_get_parent(" . $path2 . ") = " . odir_get_parent($path2) . " <==> $path1 ");
  }

  /**
   * Testing odir_split_path_array().
   */
  public function testSplitPathArray() {
    $p1 = "level1";
    $p2 = "level2";

    $path1 = ODIR_DIRECTORY_SEPARATOR . $p1 . ODIR_DIRECTORY_SEPARATOR . $p2;
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[0], $p1, "odir_split_path_array($path1) - l1 : " . $p1 . " => " . $array[0] . " - test1");
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[1], $p2, "A odir_split_path_array($path1) - l2 : " . $p2 . " => " . $array[1] . " - test1");

    $path1 = $p1 . ODIR_DIRECTORY_SEPARATOR . $p2;
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[0], $p1, "odir_split_path_array($path1) - l1 : " . $p1 . " => " . $array[0] . " - test2");
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[1], $p2, "odir_split_path_array($path1) - l2 : " . $p2 . " => " . $array[1] . " - test2");

    $path1 = $p1 . ODIR_DIRECTORY_SEPARATOR . $p2 . ODIR_DIRECTORY_SEPARATOR;
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[0], $p1, "odir_split_path_array($path1) - l1 : " . $p1 . " => " . $array[0] . " - test3");
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[1], $p2, "odir_split_path_array($path1) - l2 : " . $p2 . " => " . $array[1] . " - test3");

    $path1 = ODIR_DIRECTORY_SEPARATOR_ENCODED . $p1 . ODIR_DIRECTORY_SEPARATOR_ENCODED . $p2;
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[0], $p1, "odir_split_path_array($path1) - l1 : " . $p1 . " => " . $array[0] . " - test4");
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[1], $p2, "A odir_split_path_array($path1) - l2 : " . $p2 . " => " . $array[1] . " - test4");

    $path1 = $p1 . ODIR_DIRECTORY_SEPARATOR_ENCODED . $p2;
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[0], $p1, "odir_split_path_array($path1) - l1 : " . $p1 . " => " . $array[0] . " - test5");
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[1], $p2, "odir_split_path_array($path1) - l2 : " . $p2 . " => " . $array[1] . " - test5");

    $path1 = $p1 . ODIR_DIRECTORY_SEPARATOR_ENCODED . $p2 . ODIR_DIRECTORY_SEPARATOR_ENCODED;
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[0], $p1, "odir_split_path_array($path1) - l1 : " . $p1 . " => " . $array[0] . " - test6");
    $array = odir_split_path_array($path1);
    $this->assertEqual($array[1], $p2, "odir_split_path_array($path1) - l2 : " . $p2 . " => " . $array[1] . " - test6");
  }

  /**
   * Testing odir_short_filename().
   */
  function testOdirShortFilename() {
    $path1 = ODIR_DIRECTORY_SEPARATOR . "test1" . ODIR_DIRECTORY_SEPARATOR . "test2" . ODIR_DIRECTORY_SEPARATOR . "test3";
    $path2 = "test3";
    $this->assertEqual(odir_short_filename($path1), $path2, "odir_short_filename(" . $path1 . ") = " . odir_short_filename($path1) . " <==> $path2 ");

    $path1 = ODIR_DIRECTORY_SEPARATOR . "test1" . ODIR_DIRECTORY_SEPARATOR . "test2" . ODIR_DIRECTORY_SEPARATOR . "test3" . ODIR_DIRECTORY_SEPARATOR;
    $path2 = "test3";
    $this->assertEqual(odir_short_filename($path1), $path2, "odir_short_filename(" . $path1 . ") = " . odir_short_filename($path1) . " <==> $path2 ");
  }
}
