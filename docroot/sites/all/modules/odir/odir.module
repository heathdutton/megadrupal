<?php
/**
 * @file
 * Main file of odir module
 */

/*
 * Default values for editable variables.
 */
define('ODIR_SYSTEM_BASE', "/tmp/odir_files");
define('ODIR_IMG_FILTER_REGEX', '/\.jpe?g$/i');
define('ODIR_IGNORE_FILTER_REGEX', '/\.ORF$/i');

define('ODIR_DIRECTORY_SEPARATOR', '/');
define('ODIR_DIRECTORY_SEPARATOR_ENCODED', '||');

/**
 * Does an endecoding of a directory path. (Replaces / by ||)
 * (This function has nothing to do with drupal_encode_path().)
 *
 * @param string $path
 *   A non-coded odir path
 */
function odir_encode($path) {
  $path = trim($path, ' \|./');
  if (preg_match('/\//', $path)) {
    $path = preg_replace("/\/+/", ODIR_DIRECTORY_SEPARATOR_ENCODED, $path);
  }
  return $path;
}

/**
 * Does a decoding of a directory path. (Replaces || by /)
 * (This function has nothing to do with drupal_encode_path().)
 *
 * @param string $path
 *   A coded odir path
 */
function odir_decode($path = '') {
  if ($sheme = file_uri_scheme($path)) {
    $target = odir_decode(file_uri_target($path));
    $path = $sheme . '://' . $target;
  }
  elseif (preg_match('/\|/', $path)) {
    $path = trim($path, ' \|./');
    $path = preg_replace('/\|+/', '/', $path);
    $path = preg_replace('/\/+/', '/', $path);
  }
  return $path;
}

/**
 * Returns the physical location of $path
 */
function odir_system_path($path = "") {
  if ($path == "") {
    return variable_get('odir_system_base', ODIR_SYSTEM_BASE);
  }
  else {
    return variable_get('odir_system_base', ODIR_SYSTEM_BASE) . DIRECTORY_SEPARATOR . $path;
  }
}

/**
 * Implements the odir:// stream wrapper class.
 *
 * Provides support for storing publicly accessible files with the Drupal file
 * interface.
 */
class OdirStreamWrapper extends DrupalLocalStreamWrapper {
  /**
   * Implements abstract public function getDirectoryPath().
   */
  public function getDirectoryPath() {
    return odir_system_path();
  }

  /**
   * Implements abstract public function getLocalPath().
   */
  protected function getLocalPath($uri = NULL) {
    if (isset($uri)) {
      $uri = odir_decode($uri);
    }
    return parent::getLocalPath($uri);
  }

  /**
   * Implements abstract public function getTarget().
   */
  protected function getTarget($uri = NULL) {
    if (isset($uri)) {
      $uri = odir_decode($uri);
    }
    return parent::getTarget($uri);
  }

  /**
   * Implements abstract public function setUri().
   */
  function setUri($uri) {
    if (isset($uri)) {
      $uri = odir_decode($uri);
    }
    parent::setUri($uri);
  }

  /**
   * Implements abstract public function getPublicLocalPath().
   */
  public function getPublicLocalPath($uri) {
    return parent::getLocalPath($uri);
  }

  /**
   * Overrides getExternalUrl().
   *
   * Return the HTML URI of a directory based file.
   */
  function getExternalUrl() {
    $path = odir_encode($this->getTarget());
    return 'odir/download/' . drupal_encode_path($path);
  }
}

/**
 * Implements hook_stream_wrappers().
 */
function odir_stream_wrappers() {
  return array(
    'odir' => array(
      'name' => t('Odir files'),
      'class' => 'OdirStreamWrapper',
      'description' => t('Organisational directory based files.'),
      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
  );
}

/**
 * Invokes hook_odir_accessrules.
 *
 * Returns an array with access control definitions.
 * The key will be used as it's name, and may be used by other modules.
 * 'label' : a label for using in forms
 * 'shortname' : a shortname of the permission, wil be used in database tables
 * 'default_weight' : will be used in ordering of form elements
 *
 * @TODO may be cached in later version
 */
function odir_accessrules() {
  $rules = &drupal_static(__FUNCTION__);
  $rules_short = &drupal_static(__FUNCTION__ . '_short');
  if (!isset($rules)) {
    $rules = module_invoke_all('odir_accessrules');
    $rules_short = array();
    foreach ($rules as $rule => $r) {
      $r['title'] = $rule;
      if (array_key_exists($r['shortname'], $rules_short)) {
        drupal_set_message(
          t('Shortname @shortname defined multiple times: @name1, @name2 !',
            array(
              '@shortname' => $r['shortname'],
              '@name1' => $r['title'],
              '@name2' => $rules_short[$r['shortname']],
            )),
            'error');
      }
      else {
        $rules_short[$r['shortname']] = $r;
      }
    }
  }
  return $rules;
}

/**
 * Implements hook_odir_accessrules().
 */
function odir_odir_accessrules() {
  return array(
    'view_files' => array(
      'title' => t('view files'),
      'shortname' => t('VF'),
      'default_weight' => 100,
    ),
    'add_files' => array(
      'title' => t('add files'),
      'shortname' => t('AF'),
      'default_weight' => 100,
    ),
    'edit_files' => array(
      'title' => t('edit files'),
      'shortname' => t('EF'),
      'default_weight' => 100,
    ),
    'move_files' => array(
      'title' => t('move files'),
      'shortname' => t('MF'),
      'default_weight' => 100,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function odir_permission() {
  return odir_accessrules();
}

/**
 * Gets the fid of an odir-uri.
 */
function odir_get_fid($uri) {
    $data = db_query("SELECT fid FROM {file_managed}
                        WHERE uri = :uri",
                        array(':uri' => $uri)
                      )->fetchAll();
  if (isset($data[0])) {
    return $data[0]->fid;
  }
  else {
    return NULL;
  }
}

/**
 * Gets children of odir-uri.
 */
function odir_get_children($uri) {
    $data = db_query("SELECT fid, uri FROM {file_managed}
                        WHERE uri LIKE :uri",
                        array(':uri' => $uri . "%")
                      )->fetchAll();
  return $data;
}

/**
 * Adds file to file_managed
 */
function odir_save_new_file_record($destination_folder, $file_name) {
  global $user;
  $uri = $destination_folder . '/' . $file_name;
  if ($file = odir_load_file($uri)) {
    if ($file->status <> FILE_STATUS_PERMANENT) {
      $file->status   = FILE_STATUS_PERMANENT;
      drupal_set_message(t("@file has been added (b).", array('@file' => $file_name)), 'status');
      return file_save($file);
    }
    return $file;
  }
  else {
    $file = new stdClass();
    $file->uid      = $user->uid;
    $file->status   = FILE_STATUS_PERMANENT;
    $file->filename = $file_name;
    $file->uri      = $destination_folder . '/' . $file_name;
    $file->filemime = file_get_mimetype($file->filename);
    drupal_set_message(t("@file has been added.", array('@file' => $file_name)), 'status');
    return file_save($file);
  }
}

/**
 * Loads a file object by it's odir-uri.
 */
function odir_load_file($uri) {
  $fid = odir_get_fid($uri);
  if ($fid) {
    return file_load($fid);
  }
  else {
    return NULL;
  }
}

/**
 * Recursively move old directory to new directory
 *
 * Important note: Unmanged files will be deleted!
 * @todo needs testing!
 * @todo it could be wise doing a complete scan of the directory before moving
 */
function odir_move($directory_old_uri, $directory_new_uri) {
  $childs_to_move = odir_get_children($directory_old_uri);
  foreach ($childs_to_move as $child) {
    $fid = $child->fid;
    $uri = $child->uri;

    $pattern = $directory_old_uri . "(.*?)";
    preg_match("/$pattern/", $uri, $matches);
    $rel_file_name = $matches[1];
    $new_file_path = $directory_new_uri . '/' . $rel_file_name;
    file_prepare_directory($new_file_path, FILE_CREATE_DIRECTORY);
    file_move(file_load($fid), $directory_new_uri . '/' . $rel_file_name);
  }
  file_unmanaged_delete_recursive($directory_old_uri);
}

/**
 * Implements hook_file_download().
 */
function odir_file_download($uri) {
  $uri = odir_decode($uri);
  if (file_uri_scheme($uri) != "odir") {
    return;
  }
  if (odir_control("view_files", file_uri_target($uri))) {
    $headers = file_get_content_headers($uri);
    return $headers;
  }
  else {
    drupal_set_message(t("You don't have the required permissions for accessing @uri", array('@uri' => $uri)), 'error');
    return -1;
  }
}

/**
 * Implemets hook_help().
 */
function odir_help($path, $arg) {
  if ($path == 'admin/help#odir') {
    return '<p>' . t("A module for viewing and managing directories.") . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function odir_theme() {
  return array(
    'odir_folder_list_directory_listing_item' => array(
      'template' => 'templates/odir-folder-list-directory-listing-item',
      'variables' => array(
        "path" => "",
        "filename" => "",
        "mayenter" => FALSE,
        "maymove" => FALSE,
        "filecounter" => "",
        "href" => "",
      )),

    'odir_filelist_header' => array(
      'template' => 'templates/odir-filelist-header',
      'variables' => array(
        'splitted_path' => "",
      )),

    'odir_image_files' => array(
      'template' => 'templates/odir-image-files',
    ),

    'odir_non_image_files' => array(
      'template' => 'templates/odir-non-image-files',
    ),

    'odir_create_directory_form_rendered' => array(
      'template' => 'templates/odir-create-directory-form-rendered',
    ),

    'odir_trashcan' => array(
      'template' => 'templates/odir-trashcan',
    ),

    'odir_upload_mask' => array(
      'template' => 'templates/odir-upload-mask',
    ),
    'odir_uploading' => array(
      'template' => 'templates/odir-uploading',
    ),
  );
}

/**
 * Invokes hook_odir_control.
 *
 * @return boolean
 *   FALSE if access denied (if at least one implementation is negative.
 *   TRUE if access granted (at least one implementation is postive
 *                           and none is negative.)
 */
function odir_control($rule, $odir_path = "") {
  $result = module_invoke_all("odir_control", $rule, $odir_path);
  if (count($result) == 0) {
    return user_access($rule);
  }
  else {
    $count_allow = 0;
    foreach ($result as $r) {
      if ($r == FALSE) {
        return FALSE;
      }
      if ($r == TRUE) {
        $count_allow++;
      }
    }

    if ($count_allow > 0) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Implements hook_menu().
 */
function odir_menu() {

  $items['admin/config/odir'] = array(
    'title' => 'Organisational directory settings',
    'page callback'  => 'system_admin_menu_block_page',
    'weight' => -5,
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/odir/settings'] = array(
    'title' => 'Directory settings',
    'description' => 'Change paths of organisational direcory module',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('odir_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'odir.admin.inc',
  );

  $items['odir/upload_files_in_iframe'] = array(
    'title' => 'Upload files in iframe',
    'page callback' => 'odir_upload_files_in_iframe',
    'page arguments' => array(),
    'access callback' => 'odir_control',
    'access arguments' => array('add_files', 1),
    'type' => MENU_CALLBACK,
    'file' => 'odir.inc',
  );

  $items['odir/upload_files_ajax'] = array(
    'title' => 'Upload files with ajax',
    'page callback' => 'odir_upload_files_ajax',
    'page arguments' => array(),
    'access callback' => 'odir_control',
    'access arguments' => array('add_files', 1),
    'type' => MENU_CALLBACK,
    'file' => 'odir.inc',
  );

  $items['odir/ajax/check_file_info'] = array(
    'title' => 'Create directory',
    'page callback' => 'odir_ajax_check_file_info',
    'page arguments' => array(),
    'access callback' => 'odir_control',
    'access arguments' => array('view_files', 1),
    'type' => MENU_CALLBACK,
    'file' => 'odir.inc',
  );

  $items['odir/ajax/create_directory'] = array(
    'title' => 'Create directory',
    'page callback' => 'odir_ajax_create_directory',
    'access callback' => 'odir_control',
    'access arguments' => array('add_files', 1),
    'type' => MENU_CALLBACK,
    'file' => 'odir.inc',
  );

  $items['odir/ajax/file_removal'] = array(
    'title' => 'Remove file (ajax)',
    'page callback' => 'odir_ajax_file_removal',
    'access callback' => 'odir_control',
    'access arguments' => array('delete_files', 1),
    'type' => MENU_CALLBACK,
    'file' => 'odir.inc',
  );

  $items['odir/ajax/directory_removal'] = array(
    'title' => 'Remove directory (ajax)',
    'page callback' => 'odir_ajax_directory_removal',
    'access callback' => 'odir_control',
    'access arguments' => array('delete_files', 1),
    'type' => MENU_CALLBACK,
    'file' => 'odir.inc',
  );

  $items['dir'] = array(
    'title' => 'Directories',
    'page callback' => 'odir_filelist',
    'page arguments' => array(),
    'access callback' => 'odir_control',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'odir.inc',
  );

  $items['odir'] = array(
    'title' => 'Directories',
    'page callback' => 'odir_filelist',
    'page arguments' => array(),
    'access callback' => 'odir_control',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'odir.inc',
  );

  $items['odir/download'] = array(
    'title' => 'Organisational file download',
    'page callback' => 'file_download',
    'page arguments' => array('odir'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'file' => 'odir.inc',
  );

  return $items;
}

/**
 * Implements hook_odir_show_file_list_item().
 */
function odir_odir_show_file_list_item($file, $link, $delta) {
  $content['content'] = "";
  $content['weight'] = 20;
  $content['file'] = $file;
  $content['link'] = odir_encode($link);
  return array($content);
}

/**
 * Inovkes hook odir_directory_pre_processing().
 * Allow modules to do some preprocessing on directory load.
 */
function odir_directory_pre_processing($dir) {
  static $run = FALSE;
  $system_dir = odir_system_path() . "/" . $dir;
  if (is_dir($system_dir)) {
    if (!$run) {
      module_invoke_all('odir_directory_pre_processing', $dir);
    }
  }
  $run = TRUE;
}

/**
 * Implements hook_init().
 */
function odir_init() {
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
}

/**
 * Implements hook_page_build().
 *
 * Does some preprocessing and defines Javascript settings.
 */
function odir_page_build() {
  odir_directory_pre_processing(odir_current());

  $opts = array('absolute' => TRUE);
  $json_url_dir_creation = url('odir/ajax/create_directory', $opts);
  $json_url_fileUpload = url('odir/upload_files_ajax', $opts);
  $json_url_fileUpload_iframe = url('odir/upload_files_in_iframe', $opts);

  drupal_add_js(array('odir' => array("json_url_dir_creation" => $json_url_dir_creation)), 'setting');

  $opts = array('absolute' => TRUE);
  $ajax_url = url('odir/ajax/get_directories', $opts);
  drupal_add_js(
    array('odir' => array("ajax_directories_url" => $ajax_url)),
    'setting'
  );

  $ajax_url = url('odir/ajax/get_files', $opts);
  drupal_add_js(array('odir' => array("ajax_images_url" => $ajax_url)), 'setting');

  $ajax_url = url('odir/ajax/check_file_info', $opts);
  drupal_add_js(array('odir' => array("ajax_check_file_info" => $ajax_url)), 'setting');

  $ajax_url = url('odir/ajax/file_removal', $opts);
  drupal_add_js(array('odir' => array("file_removal" => $ajax_url)), 'setting');

  $ajax_url = url('odir/ajax/directory_removal', $opts);
  drupal_add_js(array('odir' => array("directory_removal" => $ajax_url)), 'setting');

  drupal_add_js(array('odir' => array("odir_current" => odir_current())), 'setting');

  drupal_add_js(array('odir' => array("odir_current_encoded" => odir_current_encoded())), 'setting');
  drupal_add_js(array('odir' => array("upload_files_ajax" => url("odir/upload_files_ajax"))), 'setting');
  drupal_add_js(array('odir' => array("upload_files_in_iframe" => url("odir/upload_files_in_iframe"))), 'setting');
}

/**
 * Loads or saves the current decoded path in the session.
 *
 * @param string $value
 *   If  given, the sessions variable will be overwritten.
 * @param boolean $readsession
 *   If  FALSE, the session variable will not be read.
 * @param boolean $deletion
 *   TODO may be used for future enhancments
 */
function odir_current($value = NULL, $readsession = FALSE, $deletion = FALSE) {
  $path = &drupal_static(__FUNCTION__);
  $path_encoded = &drupal_static('odir_current_encoded');
  if ($value !== NULL) {
    $path_encoded = $value;
    $path = odir_decode($value);
  }
  return $path;
}

/**
 * Searches for path in field, otherwise in session.
 */
function _odir_get_current_path_encoded_from_field_or_from_sesssion($field_identifier) {
  $current_path = "";
  if (module_exists('odir_field')) {
    $selected_field_id = variable_get($field_identifier);
    $current_path = _odir_get_field_value($selected_field_id);
  }
  if (!$current_path) {
    $current_path = odir_current_encoded();
  }
  else {
    odir_current_encoded($current_path);
  }
  if ($current_path == "") {
    return ODIR_DIRECTORY_SEPARATOR_ENCODED;
  }
  else {
    return $current_path;
  }
}

/**
 * Loads or saves the current coded odir-path in the session.
 *
 * @param string $value
 *   If  given, the sessions variable will be overwritten.
 * @param boolean $readsession
 *   If  FALSE, the session variable will not be read.
 * @param boolean $deletion
 *   TODO  may be used for future enhancments
 */
function odir_current_encoded($value = NULL, $readsession = FALSE, $deletion = FALSE) {
  $path_encoded = &drupal_static('odir_current_encoded');
  odir_current($value, $readsession, $deletion);
  return $path_encoded;
}

/**
 * Implements hook_block_info().
 */
function odir_block_info() {
  $blocks['folder list']['info'] = t('Subdirectories');
  $blocks['folder operations']['info'] = t('Directory operations');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * Invokes hook_odir_block_configure().
 * Actually required by odir_field(), for adding a selection block.
 */
function odir_block_configure($delta = '') {
  return module_invoke_all("odir_block_configure", $delta);
}

/**
 * Implements hook_block_save().
 *
 * Invokes hook_odir_block_save().
 * Actually required by odir_field(), for adding a selection block.
 */
function odir_block_save($delta = '', $edit = array()) {
  module_invoke_all("odir_block_save", $delta, $edit);
}

/**
 * Returns a number which can be added to divids.
 * It's incremented by $add_amount.
 */
function odir_folder_filecounter($add_amount = 0) {
  $filecounter = &drupal_static("odir_folder_filecounter");
  if (!isset($filecounter)) {
    $filecounter = 0;
  }
  $filecounter += $add_amount;
  return $filecounter;
}

/**
 * Sets the filecounter to $amount.
 * Useful with ajax-page-requests.
 */
function odir_folder_filecounter_set($amount = 0) {
  $filecounter = &drupal_static("odir_folder_filecounter");
  $filecounter = $amount;
  return $filecounter;
}

/**
 * Prepares the block "folder list"
 */
function odir_block_view_folder_list($base_div_id, $current_path_encoded, $current_path) {
  $content = "";
  $dir_info = odir_read_dir($current_path_encoded);
  odir_set_breadcrumb($current_path_encoded);
  if ($dir_info->current_path != "") {
    $link = $dir_info->parent;
    $mayenter = TRUE;
    $content .= theme(
      'odir_folder_list_directory_listing_item',
      array(
        "path" => odir_encode(check_url($link)),
        "filename" => '-- ' . t('Up') . ' --',
        "mayenter" => $mayenter,
        "maymove" => FALSE,
        "filecounter" => odir_folder_filecounter(1),
        "href" => url("dir/" . odir_encode($link)),
      )
    );
  }
  foreach ($dir_info->dirs as $file) {
    // The styles folder contains resampled images of image_cache.
    if ($file != "styles") {
      $mayenter = odir_control("view_files", $dir_info->current_path . '/' . $file);
      $maymove = odir_control("delete_files", $dir_info->current_path . '/' . $file);
      $link = $dir_info->current_path . '/' . $file;
      $content .= theme(
        'odir_folder_list_directory_listing_item',
        array(
          "path" => odir_encode(check_url($link)),
          "filename" => check_plain($file),
          "mayenter" => $mayenter,
          "maymove" => $maymove,
          "filecounter" => odir_folder_filecounter(1),
          "href" => url("dir/" . odir_encode($link)),
        )
      );
    }
  }
  $mayadd = odir_control("add_files", $dir_info->current_path);

  if ($mayadd) {
    $form = drupal_render(drupal_get_form("odir_create_directory_form"));
    $content .= theme('odir_create_directory_form_rendered', array('form' => $form));
  }
  return $content;
}

/**
 * Prepares the block "folder operations"
 */
function odir_block_view_folder_operations($base_div_id, $current_path_encoded, $current_path) {
  $content = theme('odir_trashcan');
  $upload_form = drupal_render(drupal_get_form("odir_multiple_file_upload_form"));
  $content .= theme("odir_upload_mask", array('form' => $upload_form));
  $content .= theme("odir_uploading");
  drupal_add_js('(function ($) {
                 Drupal.behaviors.odir_assign_file_dropper_events = {
                   attach: function (context, settings) {
                     odir_assign_file_dropper_events("block-odir-folder-operations", "' . odir_encode($current_path) . '");
                   }
                 };
                })(jQuery);',
                'inline');
  $content .= _odir_show_non_image_files($current_path);
  return $content;
}

/**
 * Implements hook_block_view().
 */
function odir_block_view($delta = '') {
  $dir = odir_system_path();
  $current_path_encoded = _odir_get_current_path_encoded_from_field_or_from_sesssion('odir_block_fieldname');
  $current_path = odir_decode($current_path_encoded);
  $blocks = array();
  $base_div_id = "";
  switch ($delta) {
    case 'folder list':
      $blocks['subject'] = t('Navigation');
      $blocks['content'] = odir_block_view_folder_list($base_div_id, $current_path_encoded, $current_path);
      break;

    case 'folder operations':
      if ($current_path <> "") {
        $blocks['subject'] = t('Operations');
        $blocks['content'] = odir_block_view_folder_operations($base_div_id, $current_path_encoded, $current_path);
      }
      break;
  }
  return $blocks;
}

/**
 * If fields module is enabled, return value of given field.
 * Only returns a value if field has been loaded by hook_field_formatter_view
 */
function _odir_get_field_value($field_name) {
  if (module_exists("odir_field")) {
    $field_values = &drupal_static('odir_field_field_formatter_view');

    if (is_array($field_values) && isset($field_values[$field_name])) {
      return $field_values[$field_name][0];
    }
  }
  return "";
}

/**
 * Returns the parent directory of a file or directory.
 *
 * @param string $file
 *   A file or directory path
 */
function odir_get_parent($file) {
  if (!$file) {
    return;
  }
  $file = rtrim($file, ODIR_DIRECTORY_SEPARATOR);
  if ($file == '/' || $file == '') {
    $parent = '/';
  }
  else {
    if (preg_match('/(.*)\/(.*)$/', $file, $matches)) {
      $parent = $matches[1];
    }
    else {
      return '/';
    }
  }
  if ($parent == '') {
    $parent = '/';
  }
  return $parent;
}

/**
 * Implements a form for directory creation.
 *
 * @return array
 *   A form array for creating subdirectories.
 */
function odir_create_directory_form($form_id, $form_state) {
  $form['odir_new_dir'] = array(
    '#type' => 'textfield',
    '#attributes' => array('id' => 'odir_new_dir'),
    '#name' => 'odir_new_dir',
    '#size' => 25,
  );
  $form['odir_parent'] = array(
    '#type' => 'hidden',
    '#id' => 'odir_parent',
    '#name' => 'odir_parent',
    '#value' => odir_current_encoded(),
  );
  $form['#action'] = url('odir/ajax/create_directory/' . odir_current_encoded());
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create directory'),
    '#style' => 'display:none;',
  );
  return $form;
}

/**
 * Creates a form for uploading files.
 *
 * @return array
 *   A form array with a multiple-file upload form.
 */
function odir_multiple_file_upload_form($form_id, $form_state) {
  $form['files'] = array(
    '#multiple' => 'yes',
    '#type' => 'file',
    '#name' => 'files[]',
    '#size' => 5,
  );
  $form['#action'] = url('odir/upload_files_in_iframe/' . odir_current_encoded());
  $form['#attributes'] = array(
    'enctype' => "multipart/form-data",
    'target' => "odir_upload_target",
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Upload'));
  return $form;
}

/**
 * Modifies drupal breadcrumb for reflecting directory path.
 */
function odir_set_breadcrumb($path) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), NULL);
  $temp_path = "";
  if ($path == ODIR_DIRECTORY_SEPARATOR_ENCODED) {
    $path_elements = array();
    $text = "{" . t("root") . "}";
    $temp_path .= "odir/";
    $breadcrumb[] = l($text, $temp_path);
  }
  else {
    $path_elements = odir_split_path($path);
    $breadcrumb = array_merge($breadcrumb, $path_elements);
  }
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Splits an encoded or non-encoded path into an array.
 */
function odir_split_path_array($path) {
  $path = trim($path, ODIR_DIRECTORY_SEPARATOR);
  $path = trim($path, ODIR_DIRECTORY_SEPARATOR_ENCODED);
  return preg_split("/(\|\|)|(\/)/", $path);
}

/**
 * Returns the filename of the given path.
 */
function odir_short_filename($path) {
  return array_pop(odir_split_path_array($path));
}

/**
 * Splits a path and adds HTML-Links to each element.
 */
function odir_split_path($path) {
  $path_elements = odir_split_path_array($path);

  $path_array = array();
  $link_path = "";
  foreach ($path_elements as $p) {
    if ($p) {
      $path_array[$p] = l($p, "dir/" . $link_path . $p, array());
      $link_path = $link_path . $p . ODIR_DIRECTORY_SEPARATOR_ENCODED;
    }
  }
  return $path_array;
}

/**
 * Helper function used primarly by odir and odir_field module
 * for displaying the content of $dir, or when an image is supplied
 * it will be returned as image tag.
 */
function _odir_render_file_output($dir = "") {
  static $filecounter;
  if ($dir == "") {
    $dir = odir_current();
  }
  $content = "";

  if (preg_match(variable_get('odir_img_filter_regex', ODIR_IMG_FILTER_REGEX), $dir)) {
    // One file is returned.
    $link = odir_current();
    $content .= theme('odir_image_show_image',
                        array(
                          'htmllink_image_cache_preset' => check_url($link),
                          'image_cache_preset' => "",
                          'path' => check_url($link),
                          'url_link' => '',
                        )
                      );
  }
  else {
    // Directory listing.
    $filelist = _odir_filelist_details($dir, "main", $filecounter);

    $content .= theme('odir_image_files', array('dir' => $dir, 'filelist' => $filelist));
  }
  return $content;
}

/**
 * Returns a div with a link to a non-image file.
 */
function _odir_show_non_image_files($dir = "") {
  static $filecounter;
  if ($dir == "") {
    $dir = odir_current();
  }
  $content = "";
  if (preg_match(variable_get('odir_img_filter_regex', ODIR_IMG_FILTER_REGEX), $dir)) {
  }
  elseif (preg_match(variable_get('odir_ignore_filter_regex', ODIR_IGNORE_FILTER_REGEX), $dir)) {
  }
  else {
    $filelist = _odir_filelist_details($dir, "block", $filecounter);
    $content .= theme('odir_non_image_files', array('dir' => $dir, 'filelist' => $filelist));
  }
  return $content;
}

/**
 * Implemens hook_odir_file_list_noimages_item().
 *
 * Returns a content array with links for downloading files.
 */
function odir_odir_file_list_noimages_item($file, $link, $delta) {
  static $i = 0;
  static $max_cols = 4;
  if (!preg_match(variable_get('odir_img_filter_regex', ODIR_IMG_FILTER_REGEX), $file)
    && !preg_match(variable_get('odir_ignore_filter_regex', ODIR_IGNORE_FILTER_REGEX), $file)) {
    $content['content'] = "";
    if ($i++ >= $max_cols) {
      $i = 1;
    }
    $link = odir_encode($link);
    $content['content'] .= l($file, "odir/download/" . $link, array());
    $content['weight'] = 1;
    $content['file'] = $file;
    $content['link'] = $link;
    return array($content);
  }
  return NULL;
}


/**
 * Reads directory content, adds files to file_managed and returns lists.
 *
 * TODO check caching possibilities
 */
function odir_read_dir($current_path_encoded) {
  $directories = &drupal_static(__FUNCTION__);
  if (!is_array($directories)) {
    $directories = array();
  }
  if (array_key_exists($current_path_encoded, $directories)) {
    $dir = $directories[$current_path_encoded];
  }
  if (!isset($dir)) {
    $dir = new stdClass();
    $dir->dirs = array();
    $dir->nonimagefiles = array();
    $dir->imagefiles = array();

    $dir->current_path_encoded = $current_path_encoded;
    $dir->current_path = odir_decode($dir->current_path_encoded);
    $dir->parent = odir_get_parent($dir->current_path);
    if ($dir->parent == "") {
      $dir->parent = "/";
    }

    /* TODO caching
     if ($cache = cache_get('my_module_data')) {
    $my_data = $cache->data;
    }
    cache_set('odir_read_dir', $my_data, 'cache'); */
    $physical_dir = odir_system_path() . '/' . $dir->current_path;
    $files = odir_listdir($physical_dir, true, true);
    sort($files, SORT_LOCALE_STRING);
    //print_r($files);die($physical_dir);
    foreach ($files as $file) {
      if ($file != '.' && $file != '..') {
        $physical_file = $physical_dir . '/' . $file;
        $link = $dir->current_path . '/' . $file;
        $file_type = filetype($physical_file);
        if ($file_type == "dir") {
          $dir->dirs[] = $file;
        }
        else {
          $file_record = odir_save_new_file_record('odir://' . $dir->current_path, $file);
          if (preg_match(variable_get('odir_img_filter_regex', ODIR_IMG_FILTER_REGEX), $file)) {
            $dir->imagefiles[] = $file;
          }
          else {
            $dir->nonimagefiles[] = $file;
          }
        }
      }
    }

    if (is_dir($physical_dir)) {
      if ($dh = opendir($physical_dir)) {
        while (($file = readdir($dh)) !== FALSE) {
        }
      }
    }
  }
  $directories[$current_path_encoded] = $dir;
  return $dir;
}

/**
 * Returns the files or directories of the specified path.
 * see http://php.net/manual/en/function.readdir.php
 */
function odir_listdir($dir, $get_directories, $get_files) {
  if (!is_dir($dir)) {
    return false;
  }
   
  $files = array();
  $handle = opendir($dir);
  while (($file = readdir($handle)) !== false) {
    if ($file == '.' || $file == '..') {
      continue;
    }
    $filepath = $dir == '.' ? $file : $dir . '/' . $file;
    if ($get_files && is_file($filepath)) {
      $files[] = $file;
    }
    else if ($get_directories && is_dir($filepath)) {
      $files[] = $file;
    }
  }
  closedir($handle);
  return $files;
}

/**
 * Returns HTML code for displaying file lists.
 * @todo check comment
 *
 * @param string $dir
 *   The  directory to show.
 * @param string $mode
 *   If  "main" we are in the main content, otherwise "block"
 * @param int $filecounter
 *   Counts the files found in the directory.
 */
function _odir_filelist_details($dir, $mode = "main", $filecounter = 0) {
  $i = 0;
  $content = " ";
  $dir_info = odir_read_dir($dir);
  if ($mode == "main") {
    $file_array = &$dir_info->imagefiles;
  }
  else {
    $file_array = &$dir_info->nonimagefiles;
  }

  foreach ($file_array as $file) {
    $content .= _odir_filelist_details_file($mode, $dir_info->current_path, $file);
  }
  return $content;
}

/**
 * Returns a draggable div or span representing a file.
 */
function _odir_filelist_details_file($mode, $path, $file) {
  $link = $path . '/' . $file;
  if ($mode == "block") {
    $content_from_hooks = module_invoke_all(
      'odir_file_list_noimages_item',
      $file,
      $link,
      1
    );
  }
  else {
    $content_from_hooks = module_invoke_all(
      'odir_show_file_list_item',
      $file,
      $link,
      1
    );
  }
  $c = array();
  $weight = array();
  foreach ($content_from_hooks as $key => $row) {
    $c[$key] = $row['content'];
    $weight[$key] = $row['weight'];
  }
  array_multisort($weight, SORT_ASC, $c, SORT_ASC, $content_from_hooks);

  $content = "";
  foreach ($content_from_hooks as $hook) {
    if ($hook['content'] != "") {
      $filecounter = odir_folder_filecounter(1);
      if ($mode == "main") {
        $divspan = "span";
      }
      else {
        $divspan = "div";
      }
      $content .= "<$divspan id=\"_odir_filelist_details_" . $mode . "_" . $filecounter . "\" class=\"draggable_file\" file=\"" . $hook['link'] . "\">" . $hook['content'] . "</$divspan>";
    }
  }
  return $content;
}
