<?php
/**
 * @file
 * Main file of odir_image module
 */

/**
 * Implemets hook_help().
 */
function odir_image_help($path, $arg) {
  if ($path == 'admin/help#odir') {
    return '<p>' . t("A module for directory based image viewing") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function odir_image_permission() {
  return array(
    'allow custom sizes' => array(
      'title' => t('Allow the selection of custom sized images'),
      'description' => t('Allows the selection of image formats not already developed.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function odir_image_node_access($node, $op, $account) {
  switch ($op) {
    case 'create':
      return user_access('allow custom sizes', $account);
    case 'update':
      return user_access('allow custom sizes', $account);
    case 'delete':
      return FALSE;
    case 'resize':
      return user_access('allow custom sizes', $account);
  };
}

/**
 * Implements hook_menu().
 */
function odir_image_menu() {

  $items['admin/config/odir/settings_odir_image'] = array(
    'title' => 'Images and Slideshow',
    'description' => 'Select a slideshow module',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('odir_image_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'odir_image.admin.inc',
  );

  $items['odir/image/html/%/%'] = array(
    'title' => 'Show image in layout',
    'page callback' => 'odir_image_html',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'odir_image.inc',
  );
  $items['odir/image/jpeg'] = array(
    'title' => 'Show JPEG image',
    'page callback' => 'odir_image_jpeg',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'odir_image.inc',
  );
  $items['odir/image/jpeg/%/%'] = array(
    'title' => 'Show JPEG image (resized)',
    'page callback' => 'odir_image_deliver_style',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'odir_image.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function odir_image_theme() {
  return array(
    'odir_image_show_image'
    => array(
      'template' => 'templates/odir-image-show-image',
      'arguments' => array(
        'htmllink_image_cache_preset' => NULL,
        'image_cache_preset' => NULL,
        'path' => NULL,
        'rel_attribute' => NULL,
        'url_image' => NULL,
        'url_link' => NULL,
        'alt' => NULL,
      ),
    ),
  );
}

/**
 * Returns the actual slideshow mode.
 */
function odir_image_get_slideshow_mode() {
  return variable_get('odir_image_selected_slideshow_module', 'none');
}

/**
 * Checks if slideshow mode is the selected one.
 */
function odir_image_check_slideshow_mode($mode) {
  return (odir_image_get_slideshow_mode() == $mode);
}


/**
 * Implements hook_odir_image_supported_slideshow_modes().
 */
function odir_image_odir_image_supported_slideshow_modes() {
  return array('none' => 'None');
}

/**
* Prepares and returns rendered html of theme_odir_image_show_image.
* Invokes odir_image_show_image().
*/
function _odir_image_show_image($image_cache_preset, $htmllink_image_cache_preset, $path) {
  static $odir_image_js_loaded = FALSE;
  if (!$odir_image_js_loaded) {
    $odir_image_js_loaded = TRUE;
  }
  $path = odir_encode($path);
  $path_decoded = odir_decode($path);
  $token_query = array(IMAGE_DERIVATIVE_TOKEN => image_style_path_token($image_cache_preset, 'odir:///' . file_stream_wrapper_uri_normalize($path_decoded)));
 
  if ($htmllink_image_cache_preset) {
    // Generally only one module will actually return a non-empty array.
    $p = module_invoke_all('odir_image_show_image', $image_cache_preset, $htmllink_image_cache_preset, $path);
    if (empty($p)) {
      $p['rel_attribute'] = "";
      $p['url_link'] = url("odir/image/html/" . $htmllink_image_cache_preset . '/' . $path, array('absolute' => TRUE));
    }
  }
  $p['url_image'] = url("odir/image/jpeg/" . $image_cache_preset . '/' . $path, array('absolute' => TRUE, 'query' => $token_query));
  $p['alt'] = $path;
  $p['htmllink_image_cache_preset'] = $htmllink_image_cache_preset;
  $p['image_cache_preset'] = $image_cache_preset;
  $p['path'] = $path;
  $p['no_sliedeshow_module'] = odir_image_check_slideshow_mode('none');
  return theme('odir_image_show_image', $p);
}

/**
 * Implements hook_odir_show_file_list_item().
 */
function odir_image_odir_show_file_list_item($file, $link, $delta) {
  static $i = 0;
  static $max_cols = 4;
  if (preg_match(variable_get('odir_img_filter_regex', ODIR_IMG_FILTER_REGEX), $file)) {
    if ($i++ >= $max_cols) {
      $i = 1;
    }

    // TODO the parameters should become configurable.
    $content['content'] = _odir_image_show_image("odir_thumbnail_200", "odir_preview_1000", $link);
    $content['weight'] = 1;
    $content['file'] = $file;
    $content['link'] = $link;
    return array($content);
  }
  return NULL;
}

/**
 * Implements hook_image_default_styles().
 */
function odir_image_image_default_styles() {
  $presets = array();
  $presets['odir_thumbnail_100'] = _odir_image_loadPreview_preset(100, 1);
  $presets['odir_thumbnail_200'] = _odir_image_loadPreview_preset(200, 1);
  $presets['odir_thumbnail_300'] = _odir_image_loadPreview_preset(300, 1);
  $presets['odir_thumbnail_400'] = _odir_image_loadPreview_preset(400, 1);
  $presets['odir_preview_600'] = _odir_image_loadPreview_preset(600, 0);
  $presets['odir_preview_800'] = _odir_image_loadPreview_preset(800, 0);
  $presets['odir_preview_1000'] = _odir_image_loadPreview_preset(1000, 0);
  $presets['odir_preview_1200'] = _odir_image_loadPreview_preset(1200, 0);
  $presets['odir_preview_1400'] = _odir_image_loadPreview_preset(1400, 0);
  $presets['odir_preview_1600'] = _odir_image_loadPreview_preset(1600, 0);
  return $presets;
}

/**
 * Returns an array with imagecache presets for images.
 */
function _odir_image_loadPreview_preset($size, $upscale) {
  return array(
    'effects' => array(
      array(
        'name' => 'imagecache_autorotate',
        'data' => array(),
        'weight' => 0,
      ),
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => NULL,
          'height' => $size,
          'upscale' => $upscale,
        ),
        'weight' => 1,
      ),
    ),
  );
}
