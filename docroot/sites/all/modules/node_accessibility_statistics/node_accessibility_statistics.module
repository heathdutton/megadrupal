<?php

/**
 * @file
 * Module file for the node accessibility statistics project.
 */

/**
 * Implements hook_help().
 */
function node_accessibility_statistics_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#node_accessibility_statistics":
      $output .= '<p>' . t("This module provides statistics from accessibilty validation reports produced by the node accessibility module.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function node_accessibility_statistics_permission() {
  $permissions = array();

  $permissions['node accessibility statistics page access'] = array(
    'title' => t("Access Node Accessibility Statistics Page"),
    'description' => t("Grants permissions to access the node accessibility statistics pages."),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function node_accessibility_statistics_menu() {
  $items = array();

  $items['admin/content/accessibility/node_statistics'] = array(
    'title' => "Node Accessibility Statistics",
    'description' => "Statistical information derived from node accessibility validation results for live content.",
    'page callback' => 'node_accessibility_statistics_page',
    'page arguments' => array('live'),
    'file' => 'node_accessibility_statistics_page.inc',
    'file path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
    'access callback' => 'user_access',
    'access arguments' => array('node accessibility statistics page access'),
    'tab_parent' => 'admin/content/accessibility',
    'tab_root' => 'admin/content/accessibility',
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );

  $items['admin/content/accessibility/node_statistics/published'] = array(
    'title' => "Published Content",
    'description' => "Statistical information derived from node accessibility validation results for published content.",
    'page callback' => 'node_accessibility_statistics_page',
    'page arguments' => array('published'),
    'file' => 'node_accessibility_statistics_page.inc',
    'file path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
    'access callback' => 'user_access',
    'access arguments' => array('node accessibility statistics page access'),
    'tab_parent' => 'admin/content/accessibility',
    'tab_root' => 'admin/content/accessibility',
    'type' => MENU_LOCAL_TASK,
    'weight' => 12,
  );

  $items['admin/content/accessibility/node_statistics/unpublished'] = array(
    'title' => "Unpublished Content",
    'description' => "Statistical information derived from node accessibility validation results for unpublished content.",
    'page callback' => 'node_accessibility_statistics_page',
    'page arguments' => array('unpublished'),
    'file' => 'node_accessibility_statistics_page.inc',
    'file path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
    'access callback' => 'user_access',
    'access arguments' => array('node accessibility statistics page access'),
    'tab_parent' => 'admin/content/accessibility',
    'tab_root' => 'admin/content/accessibility',
    'type' => MENU_LOCAL_TASK,
    'weight' => 13,
  );

  $items['admin/content/accessibility/node_statistics/problem/%'] = array(
    'title' => "Node Accessibility Problem",
    'description' => "Statistical information derived from node accessibility validation results for an individual problem.",
    'page callback' => 'node_accessibility_statistics_page_problem',
    'page arguments' => array(5),
    'file' => 'node_accessibility_statistics_page.inc',
    'file path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
    'access callback' => 'user_access',
    'access arguments' => array('node accessibility statistics page access'),
  );

  $items['admin/content/accessibility/node_statistics/problem/%/live'] = array(
    'title' => "Node Accessibility Problem",
    'description' => "Statistical information derived from node accessibility validation results for an individual problem for live content.",
    'page callback' => 'node_accessibility_statistics_page_problem',
    'page arguments' => array(5, 'live'),
    'file' => 'node_accessibility_statistics_page.inc',
    'file path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
    'access callback' => 'user_access',
    'access arguments' => array('node accessibility statistics page access'),
  );


  $items['admin/content/accessibility/node_statistics/problem/%/published'] = array(
    'title' => "Node Accessibility Problem",
    'description' => "Statistical information derived from node accessibility validation results for an individual problem for published content.",
    'page callback' => 'node_accessibility_statistics_page_problem',
    'page arguments' => array(5, 'published'),
    'file' => 'node_accessibility_statistics_page.inc',
    'file path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
    'access callback' => 'user_access',
    'access arguments' => array('node accessibility statistics page access'),
  );

  $items['admin/content/accessibility/node_statistics/problem/%/unpublished'] = array(
    'title' => "Node Accessibility Problem",
    'description' => "Statistical information derived from node accessibility validation results for an individual problem for unpublished content.",
    'page callback' => 'node_accessibility_statistics_page_problem',
    'page arguments' => array(5, 'unpublished'),
    'file' => 'node_accessibility_statistics_page.inc',
    'file path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
    'access callback' => 'user_access',
    'access arguments' => array('node accessibility statistics page access'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function node_accessibility_statistics_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['node_accessibility_statistics_plot'] = array(
    'template' => 'node_accessibility_statistics_plot',
    'variables' => array(
      'plot_machine_name' => '',
      'plot_human_name' => '',
      'image_url' => '',
      'plot_rows' => array(),
      'total_human_name' => '',
      'total_value' => '',
      'title_block' => 'h3',
      'list_block' => 'ul',
    ),
    'path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
  );

  $themes['node_accessibility_statistics_problem_details'] = array(
    'template' => 'node_accessibility_statistics_problem_details',
    'variables' => array(
      'problem_machine_name' => '',
      'problem_human_name' => '',
      'severity_human_name' => '',
      'total' => 0,
      'explanation' => '',
      'title_block' => 'h3',
      'listing_link' => TRUE,
      'statistics_type_path' => '',
    ),
    'path' => drupal_get_path('module', 'node_accessibility_statistics') . '/includes',
  );

  return $themes;
}

/**
 * Template preprocess function for node_accessibility_statistics_plot.tpl.php.
 */
function template_preprocess_node_accessibility_statistics_plot(&$variables) {
  drupal_add_css(drupal_get_path('module', 'node_accessibility_statistics') . '/includes/node_accessibility_statistics.css');

  $root_class_name = 'node_accessibility_statistics-plot';
  $variables['base_class'] = $root_class_name;
  $variables['specific_class'] = $root_class_name . '-unknown';

  if (is_string($variables['plot_machine_name'])) {
    $variables['specific_class'] = $root_class_name . '-' . $variables['plot_machine_name'];
  }

  if (!is_string($variables['plot_human_name'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('plot_human_name');
    }

    $variables['plot_human_name'] = t("Plot");
  }

  if (!is_string($variables['image_url'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('image_url');
    }

    $variables['image_url'] = '';
  }

  if (!is_array($variables['plot_rows'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('plot_rows');
    }

    $variables['plot_rows'] = array();
  }

  if (!is_string($variables['total_human_name'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('total_human_name');
    }

    $variables['total_human_name'] = '';
  }

  if (!is_string($variables['total_value'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('total_value');
    }

    $variables['total_value'] = '';
  }

  // limit title_block to a specific list of html tags
  if (!is_string($variables['title_block']) || !in_array($variables['title_block'], array('h2', 'h3', 'h4', 'h5', 'h6', 'div', 'span'))) {
    $variables['title_block'] = 'h3';
  }

  // limit title_block to a specific list of html tags
  if (!is_string($variables['list_block']) || !in_array($variables['list_block'], array('ul', 'ol'))) {
    $variables['list_block'] = 'ul';
  }
}

/**
 * Template preprocess function for node_accessibility_statistics_plot.tpl.php.
 */
function template_preprocess_node_accessibility_statistics_problem_details(&$variables) {
  drupal_add_css(drupal_get_path('module', 'node_accessibility_statistics') . '/includes/node_accessibility_statistics.css');

  $root_class_name = 'node_accessibility_statistics-problem_details';
  $variables['base_class'] = $root_class_name;
  $variables['specific_class'] = $root_class_name . '-unknown';

  if (is_string($variables['problem_machine_name'])) {
    $variables['specific_class'] = $root_class_name . '-' . $variables['problem_machine_name'];
    $variables['id'] = 'accessibility_problem-' . $variables['problem_machine_name'];
  }

  if (!is_string($variables['problem_human_name'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('problem_human_name');
    }

    $variables['problem_human_name'] = t("Unknown Problem");
  }

  if (!is_string($variables['severity_human_name'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('severity_human_name');
    }

    $variables['severity_human_name'] = '';
  }

  if (!is_numeric($variables['total'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('total');
    }

    $variables['total'] = array();
  }

  if (!is_string($variables['explanation'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('explanation');
    }

    $variables['explanation'] = '';
  }

  // limit title_block to a specific list of html tags
  if (!is_string($variables['title_block']) || !in_array($variables['title_block'], array('h2', 'h3', 'h4', 'h5', 'h6', 'div', 'span'))) {
    $variables['title_block'] = 'h3';
  }

  if (!is_bool($variables['listing_link'])) {
    $variables['listing_link'] = TRUE;
  }

  if (!is_string($variables['statistics_type_path'])) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('statistics_type_path');
    }

    $variables['statistics_type_path'] = '';
  }
}

/**
 * Implements hook_file_delete().
 */
function node_accessibility_statistics_file_delete($file) {
  if (!is_object($file)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_object('file');
    }

    return;
  }

  try {
    $query = db_select('node_accessibility_statistics_plots', 'nasp');
    $query->fields('nasp');
    $query->condition('fid', $file->fid, '=');

    $executed = $query->execute();
    $records = $executed->fetchAll();

    foreach ($records as $record) {
      if (!is_object($record)) continue;

      db_delete('node_accessibility_statistics_plot_nodes')
        ->condition('pid', $record->id, '=')
        ->execute();
    }

    db_delete('node_accessibility_statistics_plots')
      ->condition('fid', $file->fid, '=')
      ->execute();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the node type form.
 *
 * @see node_accessibility_form_node_type_form_alter()
 */
function node_accessibility_statistics_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $default_enabled = array('');
  $statistic_options = array();
  $statistic_options['problem_distribution'] = t("Problem Distribution");
  $statistic_options['severity_distribution'] = t("Severity Distribution");
  $statistic_options['major_problems'] = t("Major Problems");
  $statistic_options['minor_problems'] = t("Minor Problems");
  $statistic_options['suggestions'] = t("Suggestions");

  if (!empty($form['#node_type']->type)) {
    $node_type_settings_objects = node_accessibility_statistics_load_node_type_settings(array($form['#node_type']->type), NULL);

    if (!empty($node_type_settings_objects)) {
      $node_type_settings_object = array_pop($node_type_settings_objects);

      $default_enabled = unserialize($node_type_settings_object->statistics_options);
    }
  }

  $form['node_accessibility_validation']['statistics_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Validation Statistics"),
    '#default_value' => $default_enabled,
    '#options' => $statistic_options,
    '#description' => t("Choose whether or not to enable a given type of accessibility validation statistics."),
    '#dependency' => array('edit-node-accessibility-validation-quail-enabled' => array('optional', 'required')),
  );

  $form['#submit'][] = 'node_accessibility_statistics_node_type_form_submit';
}

/**
 * Handles submitting the node accessibility statistics.
 *
 * @param array $form
 *   A form array.
 * @param array $form_state
 *   A form state.
 */
function node_accessibility_statistics_node_type_form_submit($form, &$form_state) {
  if (cf_is_empty_or_non_string('form_state[values][type]', $form_state['values']['type'])) {
    return;
  }

  $node_type_settings_objects = node_accessibility_statistics_load_node_type_settings(array($form_state['values']['type']));
  $node_type_settings_object = FALSE;

  if (!empty($node_type_settings_objects)) {
    $node_type_settings_object = array_pop($node_type_settings_objects);
  }

  $columns = array('statistics_options');
  $record = array();
  $record['type'] = $form_state['values']['type'];

  if (isset($form_state['values']['node_accessibility_validation']['statistics_options'])) {
    $record['statistics_options'] = $form_state['values']['node_accessibility_validation']['statistics_options'];
  }

  if (is_object($node_type_settings_object)) {
    $primary_keys = array('type');
    $results = drupal_write_record('node_accessibility_statistics_types', $record, $primary_keys);
  }
  else {
    $results = drupal_write_record('node_accessibility_statistics_types', $record);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the node_accessibility_accessibility_tab_page form.
 *
 * @see node_accessibility_accessibility_tab_page()
 */
function node_accessibility_statistics_form_node_accessibility_accessibility_tab_page_alter(&$form, &$form_state, $form_id) {
  if (!user_access('node accessibility statistics page access')) {
    return;
  }

  $node = &$form['variables']['node']['#value'];
  $existing_plots = node_accessibility_statistics_load_plots(array('nid' => $node->nid, 'vid' => $node->vid), 'type');

  // @todo handle the case when there is an error loading the node type settings
  $results = node_accessibility_statistics_load_node_type_settings(array($node->type), NULL);
  $results = array_pop($results);
  $type_settings = is_object($results) ? unserialize($results->statistics_options) : array();
  unset($results);

  if (isset($form_state['perform_validation'])) {
    node_accessibility_statistics_delete_plots(array(array('nid' => $node->nid, 'vid' => $node->vid)), NULL);
  }

  $form['about_this_node']['node_statistics'] = array(
    '#type' => 'fieldset',
    '#title' =>  t("Accessibility Statistics"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $no_statistics = TRUE;
  $display_levels = quail_api_get_display_levels(NULL);

  foreach (array('severity_distribution', 'problem_distribution') as $type_name) {
    if (isset($type_settings[$type_name]) && $type_settings[$type_name]) {
      $plot = new phplot_api_plot('pie');
      $data = array();
      $total = 0;
      $theme_settings = array();
      $theme_settings['plot_rows'] = array();

      switch ($type_name) {
        case 'severity_distribution':
          $theme_settings['plot_human_name'] = t("Severity Distribution");
          break;

        case 'problem_distribution':
          $theme_settings['plot_human_name'] = t("Problem Distribution");
          break;
      }

      if (is_array($form['variables']['results']['#value'])) {
        foreach ($form['variables']['results']['#value'] as $display_level => &$value) {
           if ($type_name == 'problem_distribution') {
             if ($display_levels[$display_level]['machine_name'] == 'quail_test_suggestion') {
               continue;
             }
           }

          $data_row = array($display_levels[$display_level]['human_name'], $value['total']);
          $data[] = $data_row;
          $total += $value['total'];
          $plot->set_data('legend', implode(': ', $data_row));

          $theme_setting = array();
          $theme_setting['machine_name'] = $display_levels[$display_level]['machine_name'];
          $theme_setting['human_name'] = $display_levels[$display_level]['human_name'];
          $theme_setting['show_human_name'] = TRUE;
          $theme_setting['link'] = '#edit-' . drupal_clean_css_identifier($display_levels[$display_level]['machine_name']);
          $theme_setting['value'] = $data_row[1];
          $theme_settings['plot_rows'][] = $theme_setting;
        }
      }

      if ($total > 0) {
        $no_statistics = FALSE;
        $theme_settings['total_human_name'] = t("Total");
        $theme_settings['total_value'] = '' . $total;

        if (array_key_exists($type_name, $existing_plots)) {
          $plot_file_uri = $existing_plots[$type_name]->uri;
          $plot_file_path = preg_replace('`^' . $GLOBALS['base_url'] . '`i', '', file_create_url($plot_file_uri));

          if (file_exists(drupal_realpath($plot_file_uri))) {
            $theme_settings['image_url'] = $plot_file_path;
          }
          else {
            node_accessibility_statistics_delete_plots(array(array('fid' => $existing_plots[$type_name]->fid)), NULL);
          }
        }

        if (empty($theme_settings['image_url'])) {
          $plot->set_data('width', 225);
          $plot->set_data('height', 275);

          // Define the data range. PHPlot can do this automatically, but not as well.
          $plot->set_data('plot_area_world', array(NULL, NULL, 200, 150));
          $plot->set_data('margins_pixels', array(NULL, NULL, 10));

          // Select the data array representation and store the data:
          $plot->set_data('data_type', 'text-data-single');
          $plot->set_data('data_values', $data);

          // Select an overall image background color and another color under the plot:
          $plot->set_data('background_color', '#ffffff');
          $plot->set_data('plot_area_background_draw', FALSE);
          $plot->set_data('plot_background_color', '#ffffff');

          // Do not use decimal places
          $plot->set_data('precision_y', FALSE);

          // Make the pie chart flat
          $plot->set_data('shading', 0);
          $plot->set_data('label_scale_position', 0.2);

          $plot->build();

          $plot->create_image();

          $plot_file_uri = $plot->create_file();
          $plot_file_path = preg_replace('`^' . $GLOBALS['base_url'] . '`i', '', file_create_url($plot_file_uri));

          $theme_settings['image_url'] = $plot_file_path;
          $file = $plot->get_file();

          if (is_object($file) && $file->fid > 0) {
            $plot_settings = array();
            $plot_settings['nid'] = $node->nid;
            $plot_settings['vid'] = $node->vid;
            $plot_settings['fid'] = $file->fid;
            $plot_settings['type'] = $type_name;
            node_accessibility_statistics_save_plots(array($plot_settings));
          }
        }

        foreach ($theme_settings['plot_rows'] as $key => &$row) {
          $row['value'] = $row['value'] . ' (' . round((($row['value']) / $total) * 100) . '%)';
        }

        $form['about_this_node']['node_statistics'][$type_name] = array(
          '#type' => 'markup',
          '#markup' => theme('node_accessibility_statistics_plot', $theme_settings),
        );
      }
      else {
        node_accessibility_statistics_delete_plots(array(array('nid' => $node->nid, 'vid' => $node->vid, 'type' => $type_name)), NULL);
      }
    }
  }

  foreach (array('major_problems', 'minor_problems', 'suggestions') as $type_name) {
    if (isset($type_settings[$type_name]) && $type_settings[$type_name]) {
      $plot = new phplot_api_plot('bars');
      $data = array();
      $total = 0;
      $display_level = 0;
      $theme_settings = array();
      $count = 0;
      $available_colors = array('DarkGreen', 'DimGrey', 'SkyBlue', 'SlateBlue', 'YellowGreen', 'brown', 'gold', 'maroon', 'orange', 'tan', 'yellow', 'navy');
      $total_available_colors = count($available_colors);
      $data_colors = array();

      $theme_settings['plot_rows'] = array();

      switch ($type_name) {
        case 'major_problems':
          $theme_settings['plot_human_name'] = t("Major Problems");
          $display_level = 1;
          break;

        case 'minor_problems':
          $theme_settings['plot_human_name'] = t("Minor Problems");
          $display_level = 2;
          break;

        case 'suggestions':
          $theme_settings['plot_human_name'] = t("Suggestions");
          $display_level = 3;
          break;
      }

      if (!empty($form['variables']['results']['#value'][$display_level])) {
        foreach ($form['variables']['results']['#value'][$display_level] as $problem => &$value) {
          if ($problem == 'total') continue;

          $count++;
          $problem_total = count($value['problems']);
          $data_colors[] = $available_colors[$count % $total_available_colors];
          $data_row = array($count, $problem_total);
          $data[] = $data_row;
          $total += $problem_total;

          $theme_setting = array();
          $theme_setting['machine_name'] = $problem;
          $theme_setting['human_name'] = $problem;
          $theme_setting['show_human_name'] = FALSE;
          $theme_setting['link'] = '#quail_api-test-' . strtolower($problem);
          $theme_setting['value'] = $data_row[1];
          $theme_settings['list_block'] = 'ol';
          $theme_settings['plot_rows'][] = $theme_setting;
        }
      }

      if ($total > 0) {
        $no_statistics = FALSE;
        $theme_settings['total_human_name'] = t("Total");
        $theme_settings['total_value'] = '' . $total;

        if (array_key_exists($type_name, $existing_plots)) {
          $plot_file_uri = $existing_plots[$type_name]->uri;
          $plot_file_path = preg_replace('`^' . $GLOBALS['base_url'] . '`i', '', file_create_url($plot_file_uri));

          if (file_exists(drupal_realpath($plot_file_uri))) {
            $theme_settings['image_url'] = $plot_file_path;
          }
          else {
            node_accessibility_statistics_delete_plots(array(array('fid' => $existing_plots[$type_name]->fid)), NULL);
          }
        }

        if (empty($theme_settings['image_url'])) {
          $width = 350;
          $height = 100 + $count * 10;

          if ($height < 275) $height = 275;
          if ($height > 550) $height = 550;

          $plot->set_data('width', $width);
          $plot->set_data('height', $height);

          // Define the data range. PHPlot can do this automatically, but not as well.
          $plot->set_data('plot_area_world', array(0));

          // Select the data array representation and store the data:
          $plot->set_data('data_type', 'text-data-yx');
          $plot->set_data('data_values', array_reverse($data));

          // Select an overall image background color and another color under the plot:
          $plot->set_data('background_color', '#ffffff');
          $plot->set_data('plot_area_background_draw', FALSE);
          $plot->set_data('plot_background_color', '#ffffff');

          // Do not use decimal places
          $plot->set_data('precision_x', FALSE);

          // Turn off Y tick labels and ticks because they don't apply here:
          $plot->set_data('tick_label_position_y', 'none');
          $plot->set_data('tick_position_y', 'none');

          // Turn on X data labels:
          $plot->set_data('data_label_position_x', 'plotin');

          // With X data labels, we don't need Y ticks or their labels, so turn them off.
          $plot->set_data('tick_label_position_x', 'none');
          $plot->set_data('tick_position_x', 'none');

          // draw x ticks every 20 units for large plots
          if ($total > 100) {
            $plot->set_data('tick_increment_x', 20);
          }

          // Make the pie chart flat
          $plot->set_data('shading', 0);

          // manually set the data colors
          $plot->set_data('data_colors', array_reverse(array($data_colors)));

          $plot->build();

          $plot->create_image();

          $plot_file_uri = $plot->create_file();
          $plot_file_path = preg_replace('`^' . $GLOBALS['base_url'] . '`i', '', file_create_url($plot_file_uri));

          $theme_settings['image_url'] = $plot_file_path;
          $file = $plot->get_file();

          if (is_object($file) && $file->fid > 0) {
            $plot_settings = array();
            $plot_settings['nid'] = $node->nid;
            $plot_settings['vid'] = $node->vid;
            $plot_settings['fid'] = $file->fid;
            $plot_settings['type'] = $type_name;
            node_accessibility_statistics_save_plots(array($plot_settings));
          }
        }

        $form['about_this_node']['node_statistics'][$type_name] = array(
          '#type' => 'markup',
          '#markup' => theme('node_accessibility_statistics_plot', $theme_settings),
        );
      }
      else {
        node_accessibility_statistics_delete_plots(array(array('nid' => $node->nid, 'vid' => $node->vid, 'type' => $type_name)), NULL);
      }
    }
  }

  if ($no_statistics) {
    $form['about_this_node']['node_statistics']['#description'] = t("There are no accessibility statistics available for this node.");
  }
}

/**
 * Loads node accessibility statistics plots for a given node.
 *
 * @param array $parameters
 *   (optional) An array of values to load the node(s) by.
 *   They can be any of the following:
 *   - id: The plot id.
 *   - nid: The node id.
 *   - vid: The node version id.
 *   - fid: The file id.
 *   - type: The type of the plot.
 * @param string|null $keyed
 *   (optional) A string matching one of the following: 'id', 'nid', 'vid',
 *   'fid', 'type'
 *   When this is NULL, the default behavior is to return the array exactly as
 *   it was returned by the database call.
 *   When this is a valid string, the key names of the returned array will use
 *   the specified key name.
 *
 * @return array
 *   An array of all images associated with the node, if any.
 */
function node_accessibility_statistics_load_plots(array $parameters = array(), $keyed = NULL) {
  if (!is_null($keyed) && !is_string($keyed)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('keyed');
    }

    return array();
  }

  $query = db_select('node_accessibility_statistics_plots', 'nasp');

  $query->leftjoin('file_managed', 'fm', 'nasp.fid = fm.fid');
  $query->leftjoin('node_accessibility_statistics_plot_nodes', 'naspn', 'nasp.id = naspn.pid');

  $query->Fields('nasp');
  $query->Fields('fm');
  $query->Fields('naspn');
  $query->orderBy('nasp.id', 'ASC');

  $and = NULL;

  if (array_key_exists('id', $parameters)) {
    if (!is_numeric($parameters['id'])) {
      if (class_exists('cf_error')) {
        cf_error::invalid_numeric('parameters[id]');
      }

      return FALSE;
    }

    if (is_null($and)) $and = db_and();

    $and->condition('id', $parameters['id'], '=');
  }

  if (array_key_exists('nid', $parameters)) {
    if (!is_numeric($parameters['nid'])) {
      if (class_exists('cf_error')) {
        cf_error::invalid_numeric('parameters[nid]');
      }

      return FALSE;
    }

    if (is_null($and)) $and = db_and();

    $and->condition('nid', $parameters['nid'], '=');
  }

  if (array_key_exists('vid', $parameters)) {
    if (!is_numeric($parameters['vid'])) {
      if (class_exists('cf_error')) {
        cf_error::invalid_numeric('parameters[vid]');
      }

      return FALSE;
    }

    if (is_null($and)) $and = db_and();

    $and->condition('vid', $parameters['vid'], '=');
  }

  if (array_key_exists('fid', $parameters)) {
    if (!is_numeric($parameters['fid'])) {
      if (class_exists('cf_error')) {
        cf_error::invalid_numeric('parameters[fid]');
      }

      return FALSE;
    }

    if (is_null($and)) $and = db_and();

    $and->condition('nasp.fid', $parameters['fid'], '=');
  }

  if (array_key_exists('type', $parameters)) {
    if (!is_string($parameters['type'])) {
      if (class_exists('cf_error')) {
        cf_error::invalid_string('parameters[type]');
      }

      return FALSE;
    }

    if (is_null($and)) $and = db_and();

    $and->condition('nasp.type', $parameters['type'], '=');
  }

  if (!is_null($and)) {
    $query->condition($and);
  }

  if (in_array($keyed, array('id', 'nid', 'vid', 'fid', 'type'))) {
    $results = array();

    try {
      $records = $query->execute();
    }
    catch (Exception $e) {
      if (class_exists('cf_error')) {
        cf_error::on_query_execution($e);
      }

      return array();
    }

    foreach ($records as $record) {
      if (!is_object($record)) continue;

      $results[$record->$keyed] = $record;
    }

    return $results;
  }

  try {
    return $query->execute()->fetchAll();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  return array();
}

/**
 * Loads the node type settings table data for the given node type.
 *
 * @todo add caching support to the results of this check.
 *
 * @param array $node_types
 *   An array of node type strings or node objects.
 * @param string|null $keyed
 *   (optional) A string matching one of the following: 'type'.
 *   When this is NULL, the default behavior is to return the array exactly as
 *   it was returned by the database call.
 *   When this is a valid string, the key names of the returned array will use
 *   the specified key name.
 *
 * @return object
 *   A prepared statement object, already executed.
 */
function node_accessibility_statistics_load_node_type_settings(array $node_types, $keyed = NULL) {
  if (count($node_types) == 0) {
    return array();
  }

  $query = db_select('node_accessibility_statistics_types', 'nast');

  $query->fields('nast');
  $query->orderBy('nast.type', 'ASC');

  $or = db_or();

  foreach ($node_types as $node_type) {
    if (is_object($node_type)) {
      $or->condition('type', $node_type->type, '=');
    }
    else {
      $or->condition('type', $node_type, '=');
    }
  }

  $query->condition($or);

  if ($keyed === 'type') {
    $results = array();

    try {
      $records = $query->execute();
    }
    catch (Exception $e) {
      if (class_exists('cf_error')) {
        cf_error::on_query_execution($e);
      }

      return array();
    }

    foreach ($records as $record) {
      if (!is_object($record)) continue;

      $results[$record->$keyed] = $record;
    }

    return $results;
  }

  try {
    return $query->execute()->fetchAll();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  return array();
}

/**
 * Handles submitting the node accessibility statistics.
 *
 * @param array $plots
 *   An array of plot arrays, whose arrays contain the following fields:
 *   - fid: The file id.
 *   - nid: The node id.
 *   - vid: The version id.
 *   - type: A machine-friendly name for the type of the plot.
 *
 * @return int|false
 *  If the record insert or update failed, returns FALSE.
 *  If it succeeded, returns SAVED_NEW or SAVED_UPDATED, depending on the
 *  operation performed.
 */
function node_accessibility_statistics_save_plots(array $plots) {
  $transaction = db_transaction();

  try {
    foreach ($plots as $key => &$record) {
      $record_plot = array();

      $record_plot['fid'] = &$record['fid'];
      $record_plot['type'] = &$record['type'];

      if (array_key_exists('id', $record)) {
        $record_plot['id'] = $record['id'];
        $results = drupal_write_record('node_accessibility_statistics_plots', $record_plot, array('id'));
      }
      else {
        $existing_plots = node_accessibility_statistics_load_plots(array('fid' => $record['fid']), 'fid');

        if (array_key_exists($record['fid'], $existing_plots)) {
          $record_plot['id'] = $existing_plots[$record['fid']]->id;
          $results = drupal_write_record('node_accessibility_statistics_plots', $record_plot, array('id'));
        }
        else {
          $results = drupal_write_record('node_accessibility_statistics_plots', $record);
        }
      }

      if ($results && array_key_exists('nid', $record) && array_key_exists('vid', $record) && array_key_exists('id', $record)) {
        $existing_plots = node_accessibility_statistics_load_plots(array('pid' => $record['id']), 'pid');

        $record_node = array();
        $record_node['pid'] = &$record['id'];
        $record_node['nid'] = &$record['nid'];
        $record_node['vid'] = &$record['vid'];

        if (array_key_exists('pid', $existing_plots)) {
          $results = drupal_write_record('node_accessibility_statistics_plot_nodes', $record_node, array('pid'));
        }
        else {
          $results = drupal_write_record('node_accessibility_statistics_plot_nodes', $record_node);
        }
      }
    }

    // force transaction to execute
    unset($transaction);
  }
  catch (Exception $e) {
    $transaction->rollback();

    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    return FALSE;
  }

  return $results;
}

/**
 * Deletes node accessibility statistics plots from the database.
 *
 * @param array $plots
 *   An array of values to load the node(s) by.
 *   They can be any of the following:
 *   - id: The plot id.
 *   - nid: The node id.
 *   - vid: The node version id.
 *   - fid: The file id.
 *   - type: The type of the plot.
 * @param string|null $keyed
 *   (optional) A string matching one of the following: 'id', 'nid', 'vid',
 *   'fid', 'type'.
 *   When this is NULL, the default behavior is to return the array exactly as
 *   it was returned by the database call.
 *   When this is a valid string, the key names of the returned array will use
 *   the specified key name.
 *
 * @return bool
 *   TRUE if nothing went wrong, FALSE otherwise.
 */
function node_accessibility_statistics_delete_plots(array $plots, $keyed = NULL) {
  foreach ($plots as $key => &$plot) {
    $existing_plots = node_accessibility_statistics_load_plots($plot, $keyed);

    foreach ($existing_plots as $existing_key => &$existing) {
      if (!empty($existing->fid)) {
        $file = file_load($existing->fid);

        if (is_object($file)) file_delete($file);
      }
    }
  }

  return TRUE;
}

/**
 * Resets all static caches provided by this module.
 */
function node_accessibility_statistics_reset_cache() {
  drupal_static_reset('node_accessibility_statistics_page');
}
