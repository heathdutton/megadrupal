<?php

/**
 * @file
 * Schema definition, install, uninstall, and requirements check.
 */

/**
 * Implements hook_schema().
 */
function imap_auth_schema() {
  $schema['imap_auth_servers'] = array(
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 4,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
      ),
      'address' => array(
        'type' => 'varchar',
        'length' => 128,
      ),
      'port' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'mbox_name' => array(
        'type' => 'varchar',
        'length' => 64,
      ),
      'usessl' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
      ),
      'enabled' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('sid'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function imap_auth_uninstall() {
  variable_del('imap_auth_enabled');
  variable_del('imap_auth_allow_all');
}

/**
 * Implements hook_requirements().
 */
function imap_auth_requirements($phase) {
  $t = get_t();

  if (function_exists('imap_open')) {
    $value = $t('PHP IMAP support enabled.');
    $description = '';
    $severity = REQUIREMENT_OK;
  }
  else {
    $value = $t('PHP IMAP support not enabled.');
    $description = $t('IMAP Auth requires the PHP IMAP extension to be enabled.');
    $severity = REQUIREMENT_ERROR;
  }

  $requirements['imap'] = array(
    'title' => $t('PHP IMAP'),
    'value' => $value,
    'description' => $description,
    'severity' => $severity,
  );

  return $requirements;
}

/**
 * Implements hook_update_N().
 */
function imap_auth_update_7000() {
  // create return array
  $ret = array();

  // check if the schema has been installed
  if (!db_table_exists('imap_auth_servers')) {
    drupal_install_schema('imap_auth');
    $ret[] = array(
      'success' => TRUE,
      'query' => 'The database table imap_auth_servers has been installed.',
    );
  }

  // check if the imap_auth_services variable exists
  $servers = variable_get('imap_auth_services', NULL);
  if (!$servers) {
    return $ret;
  }

  // parse the server strings into their individual peices, and insert in to the database
  $servers = explode("\n", $servers);
  $error = FALSE;
  foreach ($servers as $server) {
    $options = explode('/', drupal_substr($server, strpos($server, ':')));
    $num = count($options);
    $tmp = drupal_substr($options[$num - 1], strpos($options[$num - 1], '}'));
    $options[] = trim($tmp, '}');
    $options[$num - 1] = drupal_substr($options[$num - 1], 0, strpos($options[$num - 1], '}'));
    $num = count($options);
    $record = array(
      'type' => $options[1],
      'name' => drupal_substr($server, 0, strpos($server, ',')),
      'address' => drupal_substr($server, strpos($server, '{') + 1, (strpos($server, ':') -1) - strpos($server, '{')),
      'port' => trim($options[0], ':'),
      'mbox_name' => $options[$num - 1],
      'enabled' => 1,
    );
    foreach ($options as $option) {
      if ($option == 'ssl') {
        $record['usessl'] = 1;
      }
    }

    $nid = db_insert('imap_auth_servers')
      ->fields(array(
        'type' => $record['type'],
        'name' => $record['name'],
        'address' => $record['address'],
        'port' => $record['port'],
        'mbox_name' => $record['mbox_name'],
        'usessl' => $record['usessl'],
        'enabled' => $record['enabled'],
      ))
      ->execute();
    if (!$nid) {
      $error = TRUE;
    }
  }

  if ($error) {
    $ret['#abort'] = array(
      'success' => FALSE,
      'query' => 'There was an error converting the imap_auth_services variable into the database.',
    );
  }
  else {
    variable_del('imap_auth_services');
    $ret[] = array(
      'success' => TRUE,
      'query' => 'The imap_auth_services variable has been converted into the database and deleted.',
    );
  }

  return $ret;
}
