<?php

/**
 * @file
 * Allow users to login using an external email account.
 *
 * Users can login to the site using an IMAP/POP/NNTP server. If the email
 * address is associated with a Drupal user, that user is logged in. If not,
 * a new user is created.
 */

/**
 * Implements hook_menu().
 */
function imap_auth_menu() {
  $items['admin/config/people/imap_auth'] = array(
    'title' => 'IMAP Auth',
    'description' => 'Administer IMAP Auth settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imap_auth_settings_form'),
    'access arguments' => array('administer users'),
    'file' => 'imap_auth.admin.inc',
  );

  $items['admin/config/people/imap_auth/overview'] = array(
    'title' => 'Settings',
    'description' => 'Administer IMAP Auth settings.',
    'access arguments' => array('administer users'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/people/imap_auth/server/add'] = array(
    'title' => 'Add Server',
    'description' => 'Add another IMAP Auth server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imap_auth_server_form', 'add'),
    'access arguments' => array('administer users'),
    'file' => 'imap_auth.admin.inc',
  );

  $items['admin/config/people/imap_auth/server/%/edit'] = array(
    'title' => 'Edit Server',
    'description' => 'Edit IMAP Auth server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imap_auth_server_form', 'edit', 5),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
    'file' => 'imap_auth.admin.inc',
  );

  $items['admin/config/people/imap_auth/server/%/delete'] = array(
    'title' => 'Delete Server',
    'description' => 'Delete IMAP Auth server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imap_auth_delete_server', 5),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
    'file' => 'imap_auth.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function imap_auth_theme() {
  return array(
    'imap_auth_settings_form' => array(
      'render element' => 'form',
      'file' => 'imap_auth.admin.inc',
    ),
  );
}


/**
 * Implements hook_form_alter().
 */
function imap_auth_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    if (isset($form_state['input']['name']) && strrpos($form_state['input']['name'], '@')) {
      $key = array_search('user_login_authenticate_validate', $form['#validate']);
      $form['#validate'][$key] = 'imap_auth_authenticate';
    }
  }
}

/**
 * Authenticates the user.
 */
function imap_auth_authenticate($form, &$form_state) {
  if (!variable_get('imap_auth_enabled', 0)) {
    form_set_error('name', t('Email authentication is not enabled.'));
    return;
  }
  //dpm($form_state['values']);
  $email = $form_state['values']['name'];

  $server_name = drupal_substr($email, strrpos($email, '@') + 1);
  $server = _imap_auth_valid_server($server_name);
  if ($server) {
    $mailbox = _imap_auth_mailbox_str($server);
    $login = @imap_open($mailbox, $email, $form_state['values']['pass'], OP_HALFOPEN);
    if ($login) {
      _imap_auth_login_register($email);
      $username = drupal_substr($email, 0, strrpos($email, '@'));
      $account = user_external_load($username);
      $form_state['uid'] = $account->uid;
    }
    else {
      form_set_error('name', t('Error authenticating: %error', array('%error' => imap_last_error())));
    }
  }
  else {
    form_set_error('name', t('%server is not a valid login server.', array('%server' => $server_name)));
  }
}

/**
 * Returns an object of server information.
 *
 * @param $sid
 *   sid of the server to oad from the database.
 *
 * @return
 *   An object containing the information for the loaded server.
 */
function imap_auth_server_load($sid) {
  $result = db_query("SELECT * FROM {imap_auth_servers} WHERE sid = :sid", array(':sid' => $sid));
  $server = new stdClass();
  $row = $result->fetchObject();
  $server->sid = $row->sid;
  $server->type = $row->type;
  $server->name = $row->name;
  $server->address = $row->address;
  $server->port = $row->port;
  $server->mbox_name = $row->mbox_name;
  $server->usessl = $row->usessl;
  $server->enabled = $row->enabled;

  return $server;
}

/**
 * Gets a list of all servers from the database.
 *
 * @return
 *   An array of all servers.
 */
function _imap_auth_get_servers() {
  $servers = array();

  $result = db_query("SELECT * FROM {imap_auth_servers}");
  foreach ($result as $server) {
    $servers[$server->sid] = $server;
  }

  return $servers;
}

/**
 * Creates the mailbox string.
 *
 * @param $server
 *   The server to create the mailbox string for.
 *
 * @return
 *   The mailbox string for the imap_open function.
 */
function _imap_auth_mailbox_str($server) {
  $mailbox = '{' . $server->address . ':' . $server->port . '/imap';
  $mailbox = '{' . $server->address;
  if ($server->port) {
    $mailbox .= ':' . $server->port;
  }
  $mailbox .= '/' . $server->type;
  if ($server->usessl) {
    $mailbox .= '/ssl/novalidate-cert';
  }
  $mailbox .= '}' . $server->mbox_name;

  return $mailbox;
}

/**
 * Checks if the server is allowed for authentication.
 *
 * @param $server
 *   The server to check
 *
 * @return
 *   A server object object if the server is enabled, FALSE if not.
 */
function _imap_auth_valid_server($server) {
  $result = db_query("SELECT * FROM {imap_auth_servers} WHERE name = :name", array(':name' => $server));
  foreach ($result as $row) {
    if ($row->enabled == 1 || variable_get('imap_auth_allow_all', 0)) {
      return $row;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Log in the user, registering if the user doesn't exist yet.
 *
 * @param $name
 *   The name of the user to log in or register.
 */
function _imap_auth_login_register($name) {
  // username is the part of the email address before the @
  $username = drupal_substr($name, 0, strrpos($name, '@'));
  $account = user_external_load($username);

  if (!$account) {
    // username is the part of the email address before the @
    //$username = drupal_substr($name, 0, strrpos($name, '@'));
    $num = 1;
    // if the username already exists, add a number to the end of it
    while (_imap_auth_user_exists($username)) {
      $username .= $num;
      $num++;
    }

    $userinfo = array(
      'name' => $username,
      'pass' => user_password(),
      'mail' => $name,
      'init' => $name,
      'status' => 1,
      'roles' => variable_get('imap_auth_roles', array()),
      'access' => REQUEST_TIME,
    );
    $account = user_save(drupal_anonymous_user(), $userinfo);

    // set an error if the account creation failed
    if (!$account) {
      drupal_set_message(t('Error saving user account.'), 'error');
      return;
    }
    user_set_authmaps($account, array('authname_imap_auth' => $username));
  }

  // log the user in
  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
}

/**
 * Checks if a username already exists.
 *
 * @param $name
 *   The username to check
 *
 * @return
 *   TRUE if the username already exists, FALSE if it doesn't.
 */
function _imap_auth_user_exists($name) {
  if (db_query_range('SELECT 1 FROM {users} WHERE name = :name', 0, 1, array(':name' => $name))->fetchField()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
