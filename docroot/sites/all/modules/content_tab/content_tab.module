<?php
/**
 * @file
 * Allows administrator and users to view their content.
 *
 * Create a menu item "Content Tab" on the user page with content types as
 * subtabs which list all the content written by the user of that particular
 * content type.
 */

/**
 * Implements hook_permission().
 */
function content_tab_permission() {
  return array(
    'view content tab' => array(
      'title' => t('View content tab'),
      'description' => t('Permission to view the content tab on user page.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function content_tab_menu() {
  $items['admin/config/content-tab'] = array(
    'title' => 'Content tab',
    'description' => 'Adjust content tab options.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/content-tab/settings'] = array(
    'title' => 'Content tab settings',
    'description' => 'Configure the content tab parameters.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_tab_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'content_tab.admin.inc',
  );
  $items['user/%user/content'] = array(
    'title' => 'Content',
    'access callback' => 'user_access',
    'access arguments' => array('view content tab'),
    'page callback' => 'content_tab_get_content_list',
    'page arguments' => array(1),
    'weight' => variable_get('content_tab_weight', 10),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/content/all'] = array(
    'title' => 'All',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['user/%user/content/' . $type_url_str] = array(
      'title' => $type->name,
      'access callback' => 'user_access',
      'access arguments' => array('create ' . $type->type . ' content', 1),
      'page callback' => 'content_tab_get_content_list',
      'page arguments' => array(1, $type->type),
      'type' => MENU_LOCAL_TASK,
    );
  }
  return $items;
}

/**
 * Helper function to generate the query for the users content listing.
 *
 * @return SelectQueryInterface
 *   The called object.
 */
function _content_tab_content_query($account, $view_unpublished, $type = NULL) {
  $db_select = db_select('node', 'n')
    ->condition('uid', $account->uid)
    ->addTag('content_tab')
    ->addTag('node_access')
    ->fields('n')
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->limit(variable_get('content_tab_pager', 10));
  if (!$view_unpublished) {
    $db_select->condition('status', '1');
  }
  if (!empty($type)) {
    $db_select->condition('type', $type);
  }
  return $db_select;
}

/**
 * Function to get the list of content by a user of particular content type.
 */
function content_tab_get_content_list($account, $node_type = NULL) {
  global $user;
  $noyes = array(t('No'), t('Yes'));

  // Check to see whether only allowed users are able to see unpublished nodes.
  $view_unpublished = user_access('bypass node access')
    || ($account->uid == $user->uid && user_access('view own unpublished content'));

  $header = array(
    array('data' => t('Title'), 'field' => 'title', 'sort' => 'asc'),
    array('data' => t('Created'), 'field' => 'created'),
    array('data' => t('Changed'), 'field' => 'changed'),
    array('data' => t('Published'), 'field' => 'status'),
    array('data' => t('Sticky'), 'field' => 'sticky'),
    array('data' => t('Promoted to front page'), 'field' => 'promote'),
    array('data' => t('Operations')),
  );
  content_tab_unset_column($header);

  // The logic being used is that the user needs to be able to create content
  // or to have content within the tab. Menu controls the first bit, the user
  // ID completes these restrictions.
  $db_select = _content_tab_content_query($account, $view_unpublished, $node_type);
  $result = $db_select->orderByHeader($header)->execute();
  $rows = array();
  foreach ($result as $data) {
    $row = array(
      l($data->title, "node/$data->nid"),
      format_date($data->created),
      format_date($data->changed),
      $noyes[$data->status],
      $noyes[$data->sticky],
      $noyes[$data->promote],
      content_tab_operations_permission($data),
    );
    content_tab_unset_column($row);
    $rows[] = $row;
  }
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No content written by %name yet.', array('%name' => format_username($account))),
  ));
  $output .= theme('pager');
  return $output;
}

/**
 * Function to unset the columns.
 */
function content_tab_unset_column(&$column) {
  $content_tab_columns = variable_get('content_tab_page_columns');
  if (isset($content_tab_columns)) {
    foreach ($content_tab_columns as $key => $value) {
      switch ($key) {
        case 'created':
          if (!$value) {
            unset($column[1]);
          }
          break;

        case 'changed':
          if (!$value) {
            unset($column[2]);
          }
          break;

        case 'published':
          if (!$value) {
            unset($column[3]);
          }
          break;

        case 'sticky':
          if (!$value) {
            unset($column[4]);
          }
          break;

        case 'promoted':
          if (!$value) {
            unset($column[5]);
          }
          break;

        case 'operations':
          if (!$value) {
            unset($column[6]);
          }
          break;

      }
    }
  }
}

/**
 * Permission access for operations column.
 */
function content_tab_operations_permission($data) {

  global $user;
  $edit_own_content = user_access('edit own ' . $data->type . ' content', $user);
  $delete_own_content = user_access('delete own ' . $data->type . ' content', $user);
  $administer_content = user_access('administer content', $user);

  if (($edit_own_content && $delete_own_content) || $administer_content) {
    return l(t('edit'), "node/$data->nid/edit") . " " . l(t('delete'), "node/$data->nid/delete");
  }
  elseif ($edit_own_content || $administer_content) {
    return l(t('edit'), "node/$data->nid/edit");
  }
  elseif ($delete_own_content || $administer_content) {
    return l(t('delete'), "node/$data->nid/delete");
  }
  else {
    return t('No operations allowed.');
  }
}
