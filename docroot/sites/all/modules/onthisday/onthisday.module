<?php
// $Id: onthisday.module,v 1.1.2.2.2.6.2.13 2010/12/07 02:12:51 richard Exp $

/** @file
 * On This Day module for Drupal 7
 *
 * Shows a block and a page of nodes created on this day for past years.
 * Also shows a block for nodes posted on the same day as the current node viewed
 * Administrators can set how many years back to display nodes.
 * @see http://drupal.org/project/onthisday
 */
 
/**
 * Implements hook_init().
 *
 * If the link to /onthisday has a query string, likely the result
 * of a link to the individual day in the RSS feed, redirect to
 * its equivalent without the query string.
 */
function onthisday_init() {
  if (preg_match("/^" . drupal_get_path_alias('onthisday') . "/i", $_GET['q'])) {
    $onthisday_keys = array_keys($_GET);
    foreach ($onthisday_keys as $onthisday_key) {
      if (preg_match("/^[0-9]{8,}/i", $onthisday_key)) {
        drupal_goto($_GET['q']);
      }
    }
  }
}

/** 
 * Implements hook_menu().
 *
 * Callbacks for the feed and the page.
 */
function onthisday_menu() {
  $items['onthisday/feed'] = array(
    'title' => "On This Day",
    'page callback' => 'onthisday_feed', 
    'access arguments' => array('access onthisday feed'),
    'type' => MENU_CALLBACK
  );
  $items['onthisday'] = array(
    'title' => "On This Day",
    'page callback' => 'onthisday_page',
    'page arguments' => array(variable_get('onthisday_years', -1)),
    'access arguments' => array('access onthisday page'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function onthisday_permission() {
  return array(
    'access onthisday feed' => array(
      'title' => t("Access the On This Day RSS feed"),
    ),
    'access onthisday page' => array(
      'title' => t("Access the On This Day HTML page"),
    ),
  );
}

/**
 * Grab a list of nodes that were a year ago today, or the date specified.
 * 
 * @param $offset
 *   Integer offset, which is to say years ago from the current year.
 * @param $month
 *   (optional) Integer of the month, e.g. 1 for January, 2 for February...
 * @param $day
 *   (optional) Integer of the day of the month.
 * @return
 *   An array of items with the year as the key and the nid as the value.
 */
function onthisday_list($offset, $month = NULL, $day = NULL) {
  global $base_url;
  $items = array();
  $year = format_date(REQUEST_TIME, 'custom', 'Y');
  if (empty($month)) {
    $month = format_date(REQUEST_TIME, 'custom', 'n');
    $day = format_date(REQUEST_TIME, 'custom', 'j');
  }
  while ($offset > 0) {
    $year_ago = mktime(0, 0, 0, $month, $day, $year - $offset);
    $year_ago_plus = $year_ago + 86400;
    $query = db_select('node');
    $query->addField('node', 'nid');
    $query->condition('created', $year_ago, '>=');
    $query->condition('created', $year_ago_plus, '<');
    $result = $query->execute();
    while ($node = $result->fetchObject()) {
      $items[$year-$offset][] = $node->nid;
    } 
    $offset--; 
  }
  return $items;
}

/**
 * Generate HTML suitable for a block.
 *
 * @param $offset
 *   Integer offset, which is to say years ago from the current year.
 * @param $month
 *   (optional) Integer of the month, e.g. 1 for January, 2 for February...
 * @param $day
 *   (optional) Integer of the day of the month.
 * @return
 *   A themed block, with headers for the years and unordered
 *   lists below the header for links to nodes from that year.
 */
function onthisday_block_list($offset, $month = NULL, $day = NULL) {
  $output = '';
  if ($offset == -1) {
    $offset = onthisday_maxyears();
  }
  foreach (onthisday_list($offset, $month, $day) as $year => $nids) {
    $output .= '<h4>' . $year . '</h4>';
    $items = array();
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      $item_link_attributes = array();
      $item_link_attributes['rel'] = 'bookmark';
      $items[] = l($node->title, 'node/' . $node->nid, $item_link_attributes);
    }
    $output .= theme('item_list', array('items' => $items, 'type' => 'ul', ));
  }
  return $output;
}

function onthisday_earliest_year() {
  $query = db_select('node');
  $query->addExpression('MIN(created)');
  $earliest_year = $query->execute()->fetchCol();
  return format_date($earliest_year[0], 'custom', 'Y');
}

/** 
 * Get the maximum number of years to go back, based on the year of
 * the earliest published node.
 */
function onthisday_maxyears() {
  return format_date(REQUEST_TIME, 'custom', 'Y') - onthisday_earliest_year();
}

/**
 * Implements hook_block_info().
 */
function onthisday_block_info() {
  $blocks['onthisday'] = array(
     'info' => t('On This Day'),
  );
  $blocks['also_onthisday'] = array(
    'info' => t("Also Posted This Day in History"),
  );
  return $blocks;
}

/**
 * Implements hook_block_configuration.
 */
function onthisday_block_configure($delta = '') {
  $earliest_year = onthisday_earliest_year();
  $latest_year = format_date(REQUEST_TIME, 'custom', 'Y');
  $offsets = array(-1 => t('all previous years'));
  for ($x = $earliest_year; $x < $latest_year; $x++) {
    $offsets[$latest_year - $x] = $latest_year - $x;
  }
  $form['onthisday_years'] = array(
    '#type' => 'select',
    '#title' => t('Number of years ago'),
    '#default_value' => variable_get('onthisday_years', -1),
    '#options' => $offsets
  );
  $form['onthisday_more_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add "more" link at bottom of block'),
    '#default_value' => variable_get('onthisday_more_link', 0),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function onthisday_block_save($delta, $edit) {
  variable_set('onthisday_years', $edit['onthisday_years']);
  variable_set('onthisday_more_link', $edit['onthisday_more_link']);
}

function onthisday_more_link($month, $day) {
  if (variable_get('onthisday_more_link', 0)) {
    $more_link = array(
      'url' => 'onthisday/' . $month . '/' . $day,
      'title' => '',
    );
    return theme_more_link($more_link);
  }
}

/**
 * Implements hook_block_view().
 */
function onthisday_block_view($delta = '') {
  $offset = variable_get('onthisday_years', -1);
  switch ($delta) {
    case 'onthisday':
      $block['subject'] = t("On This Day");
      $block['content'] = onthisday_block_list($offset);
      $month = format_date(REQUEST_TIME, 'custom', 'n');
      $day = format_date(REQUEST_TIME, 'custom', 'j');
      $block['content'] .= onthisday_more_link($month, $day);
      return $block;
    break;
    case 'also_onthisday':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $month = format_date($node->created, 'custom', 'n');
        $day = format_date($node->created, 'custom', 'j');
        $block['subject'] = t("Also Posted This Day in History");
        $block['content'] = onthisday_block_list($offset, $month, $day);
        $block['content'] .= onthisday_more_link($month, $day);
        return $block;
      }
    break;
  }
}

/**
 * Generate HTML suitable for a page.
 *
 * @param $offset
 *   Integer offset, which is to say years ago from the current year.
 * @return
 *   A themed page with full content of each node from years past.
 */
function onthisday_page($offset) {
  $thisday = '';
  $output = '';
  if ($offset == -1) {
    $offset = onthisday_maxyears();
  }
  if (is_numeric(arg(1)) && is_numeric(arg(2))) {
    $nid_years = onthisday_list($offset, arg(1), arg(2));
    $thisday = ' - ' . format_date(mktime(0, 0, 0, arg(1), arg(2)), 'custom', 'F jS');
  }
  else {
    $nid_years = onthisday_list($offset); 
  }
  if (!empty($nid_years)) {
    foreach ($nid_years as $nids) {
      $nodes = node_load_multiple($nids);
      $build = node_view_multiple($nodes); 
      $output .= drupal_render($build);
    }
  }
  drupal_set_title(t('On This Day' . $thisday));
  if (user_access('access onthisday feed')) { 
    drupal_add_feed('onthisday/feed', 'On This Day RSS Feed');
  }
  return $output;
}

/**
 * Generate an RSS feed with a single item
 *
 * The single item contains essentially the same content as the
 * "On This Day" block, with the link of the item pointing to
 * the page of the "On This Day" nodes, with a query string
 * appended to make the URL unique every single day (so that
 * aggregators don't assume, a year later, that you've already
 * viewed the item. Some code borrowed from node_feed().
 */
function onthisday_feed() {
  global $base_url, $language_content;
  $namespaces = array('xmlns:dc' => 'http://purl.org/dc/elements/1.1/');
  $output = onthisday_block_list(variable_get('onthisday_years', -1));
  drupal_add_http_header('Content-Type', 'text/xml; charset=utf-8');
  $item = array();
  $item['title'] = t("On This Day") . ' ' . t("for") . ' ' . format_date(REQUEST_TIME, 'custom', 'F jS, Y');
  $item_url  = $base_url . url("onthisday") . "/" . format_date(REQUEST_TIME, 'custom', 'm') . "/" . format_date(REQUEST_TIME, 'custom', 'd') . "?" . format_date(REQUEST_TIME, 'custom', 'Ymd');
  $item['link'] = $item_url;
  $item['extra'] = array('guid' => $item_url);
  $item['description'] =  $output;
  $rss_item = format_rss_item($item['title'], $item['link'], $item['description'], $item['extra']);

  $channel = array(
    'version'     => '2.0',
    'title'       => t('On This Day') . ' at ' . variable_get('site_name', 'Drupal'),
    'link'        => $base_url . '/' . url('onthisday'),
    'description' => variable_get('site_mission', ''),
    'language'    => $language_content->language
  );
  drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');
  print "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
  print "<rss version=\"" . $channel["version"] . "\" xml:base=\"" . $base_url . "\" " . drupal_attributes($namespaces) . ">\n";
  print format_rss_channel($channel['title'], $channel['link'], $channel['description'], $rss_item, $channel['language']);
  print "</rss>";
}
