<?php
/**
 * @file
 * Base module file for temperature
 *
 * @defgroup temperature Temperature Field
 * @{
 */

/**
 * @var TEMPERATURE_DEFAULT_PRECISION
 * Default precision for the field.
 */
define('TEMPERATURE_DEFAULT_PRECISION', 6);

/**
 * @var TEMPERATURE_DEFAULT_SCALE
 * Default scale (decimal digits) for the field.
 */
define('TEMPERATURE_DEFAULT_SCALE', 1);

/**
 * @var TEMPERATURE_DEFAULT_UNITS
 * Default temperature unit for the field.
 */
define('TEMPERATURE_DEFAULT_UNITS', 'c');

/**
 * Returns the temperature units supported by this module
 *
 * @return array
 * - Keys are the the machine name; values are an array
 *  - title: the human title
 *  - suffix: the suffix to apply to the output
 *  - formulas: array
 *    -keys should be one for every unit except self
 *    - value should be the php expression on how to convert from current unit
 *    to target unit, where $value is used
 */
function temperature_units() {
  $units = array(
    'f' => array(
      'title' => 'Fahrenheit',
      'suffix' => html_entity_decode('&#176; F', ENT_NOQUOTES, 'UTF-8'),
      'formulas' => array(
        'c' => '_temperature_convert_f_c',
        'k' => '_temperature_convert_f_k',
      ),
    ),
    'c' => array(
      'title' => 'Celsius',
      'suffix' => html_entity_decode('&#176; C', ENT_NOQUOTES, 'UTF-8'),
      'formulas' => array(
        'f' => '_temperature_convert_c_f',
        'k' => '_temperature_convert_c_k',
      ),
    ),
    'k' => array(
      'title' => 'Kelvin',
      'suffix' => html_entity_decode('&#176; K', ENT_NOQUOTES, 'UTF-8'),
      'formulas' => array(
        'c' => '_temperature_convert_k_c',
        'f' => '_temperature_convert_k_f',
      ),
    ),
  );
  drupal_alter('temperature_units', $units);
  return $units;
}

/**
 * Format a float number as a temperature with optional conversion
 *
 * @param float $temperature
 *   The raw temperature value.
 * @param string $units
 *   The current units for $temperature.
 * @param int $scale
 *   Optional. Add this and the temperature will be formatted to this many
     decimal digits.
 * @param string $target_units
 *   Optional. Set this to a different unit from $units and $temperature will be
     converted.
 *   @see temperature_units()
 *
 * @return string
 *   The formatted temperature, converted if necessary with units suffix
 */
function temperature_format($temperature, $units, $scale = NULL, $target_units = NULL) {
  $test = array($units, $target_units);
  $supported = temperature_units();
  if (!array_intersect($test, array_keys($supported))) {

    // The units or target units are not supported
    return '';
  }

  // Convert?
  if ($target_units && $target_units != $units && ($convert = temperature_convert($temperature, $units, $target_units))) {
    $temperature = $convert;
    $units = $target_units;  
  }

  if ($scale !== NULL) {
    $temperature = number_format($temperature, $scale);
  }

  $output = '';
  $output .= $temperature . (isset($supported[$units]['suffix']) ? $supported[$units]['suffix'] : '');

  return $output;
}

/**
 * Convert between two temperature units
 *
 * @param float $value
 *   The raw temperature value.
 * @param $current_unit
 *   The current units.
 * @param $desired_unit
 *   The desired units to convert to.
 *   @see temperature_units()
 *
 * @return float
 *   If there unit combo doesn't yield a function, then FALSE is returned and
     you know that conversion failed.
 */
function temperature_convert($value, $current_unit, $desired_unit) {
  $unit_data = temperature_units();
  if ($current_unit == $desired_unit || empty($unit_data[$current_unit]) || empty($unit_data[$current_unit]['formulas'][$desired_unit])) {
    return FALSE;
  }
  $function = $unit_data[$current_unit]['formulas'][$desired_unit];
  return function_exists($function) ? $function($value) : FALSE;
}

/**
 * Convert f to c
 *
 * @param float $value
 *   The starting value of the temperature.
 *
 * @return float
 *   The converted value in the new temp units.
 */
function _temperature_convert_f_c($value) {
  return (5/9) * ((float)$value - 32);
}

/**
 * Convert f to k
 *
 * @param float $value
 *   The starting value of the temperature.
 *
 * @return float
 *   The converted value in the new temp units.
 */
function _temperature_convert_f_k($value) {
  return (5/9 * ((float)$value - 32) + 273);
}

/**
 * Convert c to f
 *
 * @param float $value
 *   The starting value of the temperature.
 *
 * @return float
 *   The converted value in the new temp units.
 */
function _temperature_convert_c_f($value) {
  return (9/5) * (float)$value + 32;
}

/**
 * Convert c to k
 *
 * @param float $value
 *   The starting value of the temperature.
 *
 * @return float
 *   The converted value in the new temp units.
 */
function _temperature_convert_c_k($value) {
  return (float)$value + 273;
}

/**
 * Convert k to c
 *
 * @param float $value
 *   The starting value of the temperature.
 *
 * @return float
 *   The converted value in the new temp units.
 */
function _temperature_convert_k_c($value) {
  return (float)$value - 273;
}

/**
 * Convert k to f
 *
 * @param float $value
 *   The starting value of the temperature.
 *
 * @return float
 *   The converted value in the new temp units.
 */
function _temperature_convert_k_f($value) {
  return (((float)$value - 273) * 1.8 ) + 32;
}

/**
 * Get the temperature units preference for a uid
 *
 * @param object or int $account
 *   - Can be either uid or full object
 *
 * @return string or NULL
 *   This will correspond to a key in temperature units.
 *
 * @see temperature_units()
 */
function temperature_units_by_user($account) {
  if (is_numeric($account)) {
    $account = user_load($account);
  }
  elseif (isset($account->uid) && !isset($account->temperature_units)) {
    // Force a reload of the user to try and get the temp units
    $account = user_load($account->uid);
  }
  return empty($account->temperature_units) ? NULL : $account->temperature_units;
}

/**
 * Implements hook_help().
 *
 * http://api.drupal.org/api/function/hook_help
 *
 * @param string $path
 *   The router menu path, as defined in hook_menu(), for the help that is
 *   being requested; e.g., 'admin/node' or 'user/edit'. If the router path
 *   includes a % wildcard, then this will appear in $path; for example, node
 *   pages would have $path equal to 'node/%' or 'node/%/view'. Your hook
 *   implementation may also be called with special descriptors after a "#" sign.
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for
 *   modules that want to provide help that is specific to certain values of
 *   wildcards in $path. For example, you could provide help for the path
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array
 *   should always be used rather than directly invoking arg(), because your
 *   hook implementation may be called for other purposes besides building the
 *   current page's help. Note that depending on which module is invoking
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to
 *   $arg[11] will always be set.
 */
function temperature_help($path, $arg) {
  switch ($path) {
    case 'admin/help#temperature':
      $units = array();
      foreach (temperature_units() as $value) {
        $units[] = $value['title'];
      }
      $last = array_pop($units);
      $units[] = 'and ' . $last;

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Temperature module defines a temperature field for the Field module. Temperature can be entered and displayed in the following: %units. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'), '%units' => implode(', ', $units))) . '</p>';
      $output .= '<h3>Read Me</h3>' . "\n";
      $output .= check_markup(file_get_contents(drupal_get_path('module', 'temperature') . '/README.txt'), 'plain_text');
      return $output;
  }
}

/**
 * Implements hook_field_info().
 *
 * @return array()
 */
function temperature_field_info() {
  $info = array(
    'temperature' => array(
      'label' => t('Temperature'),
      'description' => t('This field stores a temperature in the database.'),
      'settings' => array(
        'precision' => TEMPERATURE_DEFAULT_PRECISION,
        'scale' => TEMPERATURE_DEFAULT_SCALE,
        'min' => '',
        'max' => '',
        'units' => TEMPERATURE_DEFAULT_UNITS,
      ),
      'instance_settings' => array(),
      'default_widget' => 'temperature_select',
      'default_formatter' => 'temperature_user',
    ),
  );
  foreach (array_keys(temperature_units()) as $key) {
    $info['temperature']['settings']['step'][$key] = .1;
  }
  return $info;
}

/**
 * Implements hook_field_is_empty().
 *
 * @return boolean
 */
function temperature_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_instance_settings_form().
 *
 * @param array $field
 *   The field structure being configured.
 * @param array $instance
 *   $instance The instance structure being configured.
 *
 * @return array
 */
function temperature_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $options = array();
  foreach (temperature_units() as $key => $value) {
    $options[$key] = $value['title'];
  }

  $form['precision'] = array(
    '#type' => 'textfield',
    '#description' => t('The total number of digits, including those to the right of the decimal point.'),
    '#title' => t('Precision'),
    '#default_value' => $settings['precision'],
    '#required' => TRUE,
    '#size' => 8,
  );

  $form['scale'] = array(
    '#type' => 'textfield',
    '#description' => t('The total number of digits to the right of the decimal point.'),
    '#title' => t('Scale'),
    '#default_value' => $settings['scale'],
    '#required' => TRUE,
    '#size' => 8,
  );

  $form['units'] = array(
    '#type' => 'select',
    '#title' => t('Default Units'),
    '#description' => t('This will be used when the user default is not set. Supply the minimum and maximum values in this unit.'),
    '#default_value' => $settings['units'],
    '#options' => $options,
  );
  $form['min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Value'),
    '#default_value' => $settings['min'],
    '#description' => t('The lowest value of the select list in the default units.'),
    '#element_validate' => array('_element_validate_number'),
    '#required' => TRUE,
  );
  $form['max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum Value'),
    '#default_value' => $settings['max'],
    '#description' => t('The highest value of the select list in the default units.'),
    '#element_validate' => array('_element_validate_number'),
    '#required' => TRUE,
  );

  $form['step'] = array(
    '#type' => 'fieldset',
    '#title' => t('Increments'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (temperature_units() as $key => $value) {
    $form['step'][$key] = array(
      '#type' => 'textfield',
      '#title' => t('@title Step', array('@title' => $value['title'])),
      '#default_value' => $settings['step'][$key],
      '#description' => t('@title options should increment by this value. e.g. 1 or .1.', array('@title' => $value['title'])),
      '#element_validate' => array('_element_validate_number'),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_field_presave().
 */
function temperature_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $settings = $field['settings'];
  // Let PHP round the value to ensure consistent behavior across storage
  // backends.
  foreach ($items as $delta => $item) {
    if (isset($item['value'])) {
      $items[$delta]['value'] = round($item['value'], $settings['scale']);
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function temperature_field_widget_info() {
  return array(
    'temperature_select' => array(
      'label' => t('Select list'),
      'field types' => array('temperature'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function temperature_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $field['settings'];
  $required = $element['#required'];
  $has_value = isset($items[0]['value']);

  // $db_units: what is stored; $ui_units: what the editing user sees
  $db_units = $ui_units = isset($items[$delta]['units']) ? $items[$delta]['units'] : $settings['units'];
  if (!empty($form['uid']['#value']) && ($user_units = temperature_units_by_user($form['uid']['#value']))) {
    $ui_units = $user_units;
  }

  // If the node id is not yet set, then we haven't stored anything and so we're
  // going to let the $db_units switch to the $ui_units. This will allow us a
  // little bit better stepping if the stepping and conversions don't quite line
  // up. ON THE OTHER HAND, if the nid is already set then we're only going to
  // translate the UI, so we don't loose precision in the conversion process
  // over time due to scale.
  $new_node = FALSE;
  if (empty($form['nid']['#value'])) {
    $db_units = $ui_units;
    $new_node = TRUE;
  }

  $scale = $settings['scale'];
  $default_value = isset($items[$delta]['value']) ? (float) $items[$delta]['value'] : NULL;
  if (!($convert = temperature_convert($settings['min'], $settings['units'], $db_units))) {
    
    //conversion failed so we need to move the original units to the converted
    //units, so that the new value does not receive a false unit suffix
    $convert = $settings['min'];
    $db_units = $settings['units'];
  }
  $min = round($convert, $scale);

  if (!($convert = temperature_convert($settings['max'], $settings['units'], $db_units))) {
    
    //conversion failed so we need to move the original units to the converted
    //units, so that the new value does not receive a false unit suffix
    $convert = $settings['max'];
    $db_units = $settings['units'];
  }
  $max = round($convert, $scale);

  $step = $settings['step'][$db_units];

  // Something goes wrong with a non integar steps and floating number precision
  // http://www.php.net/manual/en/function.range.php#56023
  // http://php.net/manual/en/language.types.float.php
  $keys = array();
  for ($i = $min; $i <= $max; $i = number_format($i + $step, $scale)) {
    $keys[] = round($i, $scale);
  }

  $values = array();
  foreach ($keys as $key) {
    $values[] = temperature_format($key, $db_units, $scale, $ui_units);
  }
  $options = array_combine($keys, $values);
  $properties['empty_option'] = NULL;
  if (!$required) {
    $properties['empty_option'] = 'option_none';
    $empty_label = t('- None -');
  }
  elseif (!$has_value) {
    $properties['empty_option'] = 'option_select';
    $empty_label = t('- Select a value -');
  }
  // To reuse the options theme function for better integration...
  if (module_exists('options')) {
    $spoof['widget']['type'] = 'options_select';
    $empty_label = theme('options_none', array('instance' => $spoof, 'option' => $properties['empty_option']));
  }

  // If the default value is not in our $keys or the stored units don't match
  // the $ui_units then we know we're dealing with a translated or localized
  // temperature so we need to do a converstion and pick the closest option as
  // the default value; this should only happen if the value HAS NEVER BEEN
  // stored.
  if (!empty($default_value) && !in_array($default_value, array_keys($options))) {
    $default_value = _temperature_get_closest_option($default_value, $keys);

    if (!$new_node) {
      watchdog('temperature', 'Possible corruption (due to conversion math) of field data in node: %nid, field: %field. Stored value was %original, new value is: %new.', array(
        '%nid' => $form['nid']['#value'],
        '%field' => $field['field_name'],
        '%original' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
        '%new' => $default_value,
      ), WATCHDOG_WARNING, l(t('node'), 'node/' . $form['nid']['#value']));
    }
  }

  $return = array(
    'value' => $element + array(
      '#type' => 'select',
      '#default_value' => $default_value,
      '#empty_option' => $empty_label,
      '#options' => $options,
    ),
    'units' => $element + array('#type' => 'value', '#value' => $db_units),
  );
  return $return;
}

/**
 * Choose the closes value in an array
 *
 * @param float $temperature
 *   The temperature to match to a value in $options
 * @param array $options
 * - This array should contain float numbers AS VALUES, which are temp measurements
 *
 * @return float
 * - The closest option in the array which is > than $temperature
 */
function _temperature_get_closest_option($temperature, $options) {
  if (in_array($temperature, $options)) {
    return $temperature;
  }
  while ($option = current($options)) {
    if ($option >= $temperature) {
      return $option;
    }
    next($options);
  }
  // It will be the last option if nothing else
  return $option;
}

/**
 * FAPI validation of an individual number element.
 */
function temperature_field_widget_validate($element, &$form_state) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);
  $value = $element['#value'];
  if (!empty($value)) {
    $regexp = '@[^-0-9.]@';
    $message = t('Only numbers are allowed in %field.', array('%field' => t($instance['label'])));
    if ($value != preg_replace($regexp, '', $value)) {
      form_error($element, $message);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function temperature_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function temperature_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function temperature_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if (in_array($display['type'], array('temperature_author', 'temperature_user'))) {
    global $user;
    $target_units = temperature_units_by_user($user->uid);
  }
  else {
    $target_units = str_replace('temperature_', '', $display['type']);
  }
  $summary[] = temperature_format(98.6, 'f', $field['settings']['scale'], $target_units);

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_info().
 */
function temperature_field_formatter_info() {
  $formatters = array(
    'temperature_raw' => array(
      'label' => t('Unformatted'),
      'field types' => array('temperature'),
    ),
    'temperature_author' => array(
      'label' => t('Author Units'),
      'field types' => array('temperature'),
    ),
    'temperature_user' => array(
      'label' => t('Viewer Units'),
      'field types' => array('temperature'),
    ),
  );
  foreach (temperature_units() as $key => $data) {
    $formatters['temperature_' . $key] = array(
      'label' => t('Always in @units', array('@units' => $data['title'])),
      'field types' => array('temperature'),
    );
  }
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function temperature_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  foreach ($items as $delta => $item) {
    $current_unit = $item['units'];
    $target_unit = NULL;
    foreach (temperature_units() as $key => $data) {
      if ($display['type'] == "temperature_$key") {
        $target_unit = $key;
      }
    }

    if (empty($target_unit)) {
      global $user;
      $user_units = temperature_units_by_user($user->uid);
      switch ($display['type']) {
        case 'temperature_user':
        case 'temperature_author':
          $target_unit = $user_units !== NULL ? $user_units : $field['settings']['units'];
          break;

      }
    }

    $value = $item['value'];
    if ($target_unit !== NULL) {
      $value = temperature_format($item['value'], $current_unit, $field['settings']['scale'], $target_unit);
    }
    $element[$delta] = array('#markup' => $value);
  }
  return $element;
}
