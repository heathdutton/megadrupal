<?php

/**
 * Implements hook_permission().
 */
function livereload_permission() {
  return array(
    'use livereload' => array(
      'title' => t('Use LiveReload'),
      'description' => t('Adds the livereload.js if it is enabled.'),
    ),
  );
}

/**
 * Implements hook_js_alter().
 *
 * Add the livereload.js script to the site.
 */
function livereload_js_alter(&$javascript) {
  if (user_access('use livereload') && variable_get('livereload_js', 1)) {
    // Prepare the path, we suggest the livereload script to be.
    $http_host = explode(':', $_SERVER['HTTP_HOST']);
    $path = 'http://' . reset($http_host) . ':35729/livereload.js?snipver=1';

    // Checking whether the file exists before including it. Because it can be
    // external, we have to use @fopen instead of file_exists().
    if (@fopen($path, "r")) {
      drupal_add_js($path, 'external');
    }
    else {
      drupal_set_message(t('Livereload.js could not be included.'), 'warning');
    }
  }
}

/**
 * Implements hook_css_alter().
 *
 * Force CSS to be added with link tags, rather than @import.
 */
function livereload_css_alter(&$css) {
  if (user_access('use livereload') && variable_get('livereload_css', 0)) {
    foreach ($css as $key => $value) {
      $css[$key]['preprocess'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_formID_alter().
 *
 * Add the possibility to en- and disable the livereload.js.
 */
function livereload_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  $form['livereload'] = array(
    '#type' => 'fieldset',
    '#title' => 'LiveReload',
  );
  $form['livereload']['livereload_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add livereload.js. <em>Note: this will only work if css aggregation is disabled.</em>'),
    '#default_value' => variable_get('livereload_js', 1),
    '#disabled' => FALSE,
  );
  $form['livereload']['livereload_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force CSS to be added with link tags, rather than @import. <em>Note: if this option is enabled, the "%aggregate_css" functionallity of Drupal will not work.</em>', array('%aggregate_css' => t('Aggregate and compress CSS files.'))),
    '#default_value' => variable_get('livereload_css', 0),
    '#disabled' => FALSE,
  );
}
