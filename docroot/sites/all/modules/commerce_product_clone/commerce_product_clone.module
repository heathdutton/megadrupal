<?php

/**
 * @file
 * Allows users to clone an existing commerce product.
 */

/**
 * Implements hook_help().
 */
function commerce_product_clone_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_product_clone':
      $output = '<p>' . t('Using this module users can quickly clone a product, make a few changes, and save the new product. The authorship is set to the current user and the words "Clone of" are inserted into the title to remind you that you are not editing the original product.') . '</p>';
      $output .= '<p>' . t('Users with the "clone product" permission can utilize this functionality. A new "Clone" tab will appear on product pages where cloning is allowed. Also, a "clone" link will appear in the "Operations" field wherever this shows (by default, once place it shows is at <em>/admin/commerce/products/list</em>).') . '</p>';
      return $output;

    case 'admin/commerce/products/%/clone':
      return t('This product clone will not be saved until you submit this form.');
  }
}

/**
 * Implements hook_menu().
 */
function commerce_product_clone_menu() {
  $items = array();

  $items['admin/commerce/config/commerce-product-clone'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_clone_settings'),
    'title' => 'Clone settings',
    'file' => 'commerce_product_clone.pages.inc',
    'description' => 'Choose which product types can be cloned.',
  );

  // Add a tab on product pages to Clone the product.
  // Link will automatically appear in default view at admin/commerce/products/list.
  $items['admin/commerce/products/%commerce_product/clone'] = array(
    'access callback' => 'commerce_product_clone_access_cloning',
    'access arguments' => array(3),
    'page callback' => 'commerce_product_clone_cloneform',
    'page arguments' => array(3),
    'title' => 'Clone',
    'weight' => 5,
    'file' => 'commerce_product_clone.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_product_clone_permission() {
  return array(
    'clone product' => array('title' => t('Clone any product')),
    'clone own products' => array('title' => t('Clone own products')),
  );
}

/**
 * Access callback for the "Clone product" menu item.
 *
 * @param object $product
 *   A commerce product
 *
 * @return bool
 *   TRUE if the user has access to clone this product
 */
function commerce_product_clone_access_cloning($product) {
  global $user;
  // Check basic permissions first.
  $access = user_access('clone product') || ($user->uid && ($product->uid === $user->uid) && user_access('clone own products'));

  // Make sure this is a permitted product type.
  $access = $access && commerce_product_clone_is_permitted($product->type);

  // Make sure the user can view the original product content, and create a new one.
  $access = $access && commerce_entity_access('view', $product, NULL, 'commerce_product') && commerce_entity_access('create', $product, NULL, 'commerce_product');

  // Let other modules alter this.
  drupal_alter('commerce_product_clone_access', $access, $product);
  return $access;
}

/**
 * Check if a product type is OK to clone based on the module's coniguration settings.
 *
 * @param string $product_type
 *   The machine name of the product type
 *
 * @return bool
 *   TRUE if product of this type can be cloned
 */
function commerce_product_clone_is_permitted($product_type) {
  $omitted = variable_get('commerce_product_clone_omitted', array());
  return empty($omitted[$product_type]);
}
