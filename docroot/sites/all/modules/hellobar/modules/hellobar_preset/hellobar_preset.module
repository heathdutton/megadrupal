<?php
/**
 * @file
 * Presets for HelloBar.
 */

/**
 * Implements hook_menu().
 */
function hellobar_preset_menu() {
  $items = array();

  $items['admin/config/media/hellobar'] = array(
    'title' => 'HelloBar',
    'description' => 'Configure presets that can be used for HelloBar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hellobar_preset_list_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'hellobar_preset.admin.inc',
  );

  foreach (array('basic', 'more', 'advanced') as $key => $type) {
    $items["admin/config/media/hellobar/add/$type"] = array(
      'title' => "Add $type",
      'page callback' => 'drupal_get_form',
      'page arguments' => array("hellobar_preset_edit_form", $type),
      'access arguments' => array('administer site configuration'),
      'file' => 'hellobar_preset.admin.inc',
      'type' => MENU_LOCAL_ACTION,
      'weight' => $key,
    );
  }

  $items['admin/config/media/hellobar/%/%hellobar_preset/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'load arguments' => array(4),
    'page arguments' => array("hellobar_preset_edit_form", 4, 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'hellobar_preset.admin.inc',
  );

  $items['admin/config/media/hellobar/%/%hellobar_preset/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'load arguments' => array(4),
    'page arguments' => array('hellobar_preset_delete_confirm', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'hellobar_preset.admin.inc',
  );

  return $items;
}

/**
 * Load preset.
 *
 * @param string $name
 *   A preset's name.
 * @param string $type
 *   A preset's type.
 *
 * @return array
 *   A preset.
 */
function hellobar_preset_load($name, $type) {
  $output = db_select('hellobar_preset', 'h')
    ->fields("h", array())
    ->condition('h.name', check_plain($name))
    ->condition('h.type', check_plain($type))
    ->execute()
    ->fetchAssoc();

  if ($output) {
    $output += unserialize($output['data']);
    unset($output['data']);
    return $output;
  }

  return array();
}

/**
 * Load all presets.
 *
 * @param string $type
 *   A preset's type.
 *
 * @return array
 *   An associative array containing:
 *   - element: a preset array.
 */
function hellobar_preset_load_list($type = NULL) {
  $query = db_select('hellobar_preset', 'h')
    ->fields('h');

  if ($type) {
    $query->condition('h.type', $type);
  }

  $output = $query
    ->execute()
    ->fetchAllAssoc('pid');

  return $output;
}

/**
 * Save preset.
 *
 * @param array $preset
 *   A preset array.
 *
 * @return bool|int
 *   A preset or FALSE.
 */
function hellobar_preset_save($preset) {
  $record = array(
    'name' => $preset['name'],
    'title' => $preset['title'],
    'type' => $preset['type'],
  );

  // Unset used fields.
  foreach ($record as $key => $data) {
    unset($preset[$key]);
  }

  $record['data'] = $preset;

  // @TODO: use db_merge() here.
  if (isset($preset['pid'])) {
    $record['pid'] = $preset['pid'];
    return drupal_write_record('hellobar_preset', $record, 'pid');
  }
  else {
    return drupal_write_record('hellobar_preset', $record);
  }
}

/**
 * Delete preset.
 *
 * @param integer $pid
 *   A preset's ID.
 *
 * @return DeleteQuery
 *   A new DeleteQuery object for this connection.
 */
function hellobar_preset_delete($pid) {
  return db_delete('hellobar_preset')
    ->condition('pid', $pid)
    ->execute();
}

/**
 * Implements hook_field_extra_fields().
 */
function hellobar_preset_field_extra_fields() {
  $extras = array();

  $extras['node']['hello_message']['form'] = array(
    'hellobar_preset_basic' => array(
      'label' => t('Basic Preset'),
      'weight' => 3,
    ),
    'hellobar_preset_more' => array(
      'label' => t('More Preset'),
      'weight' => 4,
    ),
    'hellobar_preset_advanced' => array(
      'label' => t('Advanced Preset'),
      'weight' => 5,
    ),
  );

  return $extras;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hellobar_preset_form_hello_message_node_form_alter(&$form, &$form_state) {
  $node = $form_state['node'];

  $form['hellobar_preset_basic'] = array(
    '#type' => 'select',
    '#title' => t('Basic Preset'),
    '#default_value' => isset($node->hellobar_preset_basic) ? $node->hellobar_preset_basic : NULL,
    '#options' => _hellobar_preset_select_options('basic'),
  );

  $form['hellobar_preset_more'] = array(
    '#type' => 'select',
    '#title' => t('More Preset'),
    '#default_value' => isset($node->hellobar_preset_more) ? $node->hellobar_preset_more : NULL,
    '#options' => _hellobar_preset_select_options('more'),
  );

  $form['hellobar_preset_advanced'] = array(
    '#type' => 'select',
    '#title' => t('advanced Preset'),
    '#default_value' => isset($node->hellobar_preset_advanced) ? $node->hellobar_preset_advanced : NULL,
    '#options' => _hellobar_preset_select_options('advanced'),
  );
}

/**
 * Implements hook_node_load().
 */
function hellobar_preset_node_load($nodes, $types) {
  if (!in_array('hello_message', $types)) {
    return;
  }

  $output = db_select('hellobar_preset_reference', 'p')
    ->fields("p", array())
    ->condition('p.nid', array_keys($nodes))
    ->execute();

  foreach ($output as $record) {
    $nodes[$record->nid]->hellobar_preset_basic = $record->basic;
    $nodes[$record->nid]->hellobar_preset_more = $record->more;
    $nodes[$record->nid]->hellobar_preset_advanced = $record->advanced;
  }
}

/**
 * Implements hook_node_insert().
 */
function hellobar_preset_node_insert($node) {
  if ($node->type == 'hello_message') {
    db_insert('hellobar_preset_reference')
      ->fields(array(
        'nid' => $node->nid,
        'basic' => $node->hellobar_preset_basic,
        'more' => $node->hellobar_preset_more,
        'advanced' => $node->hellobar_preset_advanced,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function hellobar_preset_node_update($node) {
  if ($node->type == 'hello_message') {
    db_merge('hellobar_preset_reference')
      ->fields(array(
        'basic' => $node->hellobar_preset_basic,
        'more' => $node->hellobar_preset_more,
        'advanced' => $node->hellobar_preset_advanced,
      ))
      ->key(array('nid' => $node->nid))
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function hellobar_preset_node_delete($node) {
  if ($node->type == 'hello_message') {
    db_delete('hellobar_preset_reference')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_hellobar_content_message_alter().
 */
function hellobar_preset_hellobar_content_message_alter(&$message, $node) {
  $options = _hellobar_preset_get_options($node);
  _hellobar_preset_format_fix($options);

  $message['options'] += $options;
}

/**
 * Get preset's options.
 *
 * @param object $node
 *   A node.
 *
 * @return array
 *   A Preset's options.
 */
function _hellobar_preset_get_options($node) {
  $options = array();

  foreach (array('basic', 'more', 'advanced') as $type) {
    if (isset($node->{'hellobar_preset_' . $type})) {
      $options += hellobar_preset_load($node->{'hellobar_preset_' . $type}, $type);
    }
  }

  // Unset unused fields.
  unset($options['pid'], $options['name'], $options['title'], $options['type']);

  return $options;
}

/**
 * Options for select list.
 *
 * @param string $type
 *   A preset's type.
 *
 * @return array
 *   An options.
 */
function _hellobar_preset_select_options($type) {
  $output = array();

  foreach (hellobar_preset_load_list($type) as $preset) {
    $output[$preset->name] = $preset->title;
  }

  return $output;
}

/**
 * Just list with fields, grouped by format.
 *
 * @param string $format
 *   A preset's format.
 *
 * @return array
 *   Field list.
 */
function _hellobar_preset_formats($format) {
  $formats = array(
    'boolean' => array(
      'helloBarLogo',
      'shadow',
      'forgetful',
    ),
    'numeric' => array(
      'borderSize',
      'height',
      'showWait',
      'hideAfter',
      'wiggleWait',
      'speed',
    ),
    'color' => array(
      'barColor',
      'textColor',
      'linkColor',
      'borderColor',
    ),
  );

  return isset($formats[$format]) ? $formats[$format] : array();
}

/**
 * Fix values format for HelloBar JS.
 *
 * @param array $preset
 *   A preset.
 */
function _hellobar_preset_format_fix(&$preset) {
  foreach ($preset as $key => $value) {
    // If field is empty - unset it.
    if (!is_bool($value) && trim($value) === '') {
      unset($preset[$key]);
    }
    // Set booleans.
    elseif (in_array($key, _hellobar_preset_formats('boolean'))) {
      $preset[$key] = (boolean) $value;
    }
    // Set numeric.
    elseif (in_array($key, _hellobar_preset_formats('numeric'))) {
      $preset[$key] = (int) $value;
    }
    // Colorpicker returns values without # So it's just easy fix.
    elseif (in_array($key, _hellobar_preset_formats('color'))) {
      $preset[$key] = "#$value";
    }
  }
}
