<?php
/**
 * @file
 * Logging the usage of files by bassets clients.
 */

/**
 * The file is not stored as file entity at the bassets client.
 */
define('BASSETS_FILE_IS_NOT_IN_USE', 1);

/**
 * The file is stored as file entity at the bassets client.
 */
define('BASSETS_FILE_IS_IN_USE', 2);

/**
 * The file can not used anymore by a bassets client.
 */
define('BASSETS_FILE_IS_LOCKED', 3);

/**
 * Implements hook_menu().
 */
function bassets_file_usage_menu() {
  $items = array();
  $items['file/%file/clients'] = array(
    'title'            => 'Bassets Clients',
    'access arguments' => array('access_bassets_file_usage_page'),
    'page callback'    => 'bassets_file_usage_page',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
  );
  $items['file/%file/clients/%'] = array(
    'title'            => 'Bassets Clients',
    'access arguments' => array('access_bassets_file_usage_page'),
    'page callback'    => 'bassets_file_usage_page_details',
    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bassets_file_usage_permission() {
  $perms = array();
  $perms['access_bassets_file_usage_page'] = array(
    'title' => t('Access to client file usage page.'),
  );
  $perms['deploy_file_to_client'] = array(
    'title' => t('Deploy file to client.'),
  );
  return $perms;
}

/**
 * Page callback to show the usage of a file on the clients.
 */
function bassets_file_usage_page($file) {
  $output = '';
  $output['form'] = drupal_get_form('bassets_file_usage_form', $file);
  return $output;
}

/**
 * Page callback to show the usage of a file on the clients.
 */
function bassets_file_usage_form($form, $form_state, $file) {
  $header = array(
    'clientname' => t('Client'),
    'status' => t('Status'),
    'last_update' => t('Updated'),
    'details' => t('Details'),
  );
  $options = array();
  $clients = _bassets_scc_connections_load('client');
  if (!empty($clients)) {
    $results = bassets_file_usage_load_by_file($file->fid);
    $items = array();
    if (!empty($results)) {
      foreach ($results as $item) {
        $items[$item->client_name] = $item;
      }
    }
    unset($results);
    $access = user_access('administer services client connection');
    foreach ($clients as $client_name => $conf) {
      if ($access) {
        $title = l($conf->admin_title, 'admin/structure/services_client/connection/list/' . $client_name . '/edit', array('query' => drupal_get_destination()));
      }
      else {
        $title = check_plain($conf->admin_title);
      }
      $option['clientname'] = $title;
      $client_status = isset($items[$client_name]) ? $items[$client_name]->status : BASSETS_FILE_IS_NOT_IN_USE;
      if ($client_status == BASSETS_FILE_IS_NOT_IN_USE) {
        $locked_name = variable_get('bassets_server_locked_fieldname', '');
        if (!empty($locked_name)) {
          if (isset($file->{$locked_name}[LANGUAGE_NONE][0]) && $client_status == BASSETS_FILE_IS_NOT_IN_USE) {
            $client_status = BASSETS_FILE_IS_LOCKED;
          }
        }
      }
      $option['status'] = _bassets_file_usage_format_status($client_status);
      $option['last_update'] = isset($items[$client_name]) ? format_date($items[$client_name]->last_update, 'short') : '';
      $option['details'] = '';
      if ($client_status == BASSETS_FILE_IS_IN_USE) {
        $option['details'] = l(t('Details'), 'file/' . $file->fid . '/clients/' . $client_name);
      }
      $options[$client_name] = $option;
    }
  }
  $form['#file'] = $file;
  $actions = array();
  $deployment_type = variable_get('bassets_server_deployment', 'manual');

  if (user_access('deploy_file_to_client') && $deployment_type == 'manual') {
    $actions['update_all_used'] = t('Update (In Use)');
    $actions['update_all'] = t('Update');
  }
  if (!empty($actions)) {
    $desc = t('Update (In Use) - this action updates the file at the selected clients. <em>(Only on clients which use the file)</em>');
    $desc .= '<br />' . t('Update - this action updates the file at the selected clients. <em>(Also on clients which do no use the file)</em>');
    $form['action'] = array(
      '#type' => 'select',
      '#title' => t('Action'),
      '#options' => $actions,
      '#description' => $desc,
    );
  }
  if ($deployment_type == 'manual' && !empty($actions)) {
    $form['clients'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No usage available.'),
      '#multiple' => TRUE,
      '#attributes' => array(
        'class' => array('tableheader-processed'),
      ),
    );
  }
  else {
    $form['clients'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $options,
      '#empty' => t('No usage available.'),
      '#attributes' => array(
        'class' => array('tableheader-processed'),
      ),
    );
  }
  if (!empty($options) && !empty($actions)) {
    $form['actions'] = array(
      '#type' => 'actions',
      '#attributes' => array('class' => array('container-inline')),
    );
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }
  return $form;
}

/**
 * Submit-handler for bassets_file_usage_form().
 */
function bassets_file_usage_form_submit($form, $form_state) {
  $clients = array_filter($form_state['values']['clients']);
  $operations = array();
  foreach ($clients as $client) {
    switch ($form_state['values']['action']) {
      case 'update_all_used':
        $usage = bassets_file_usage_load_by_client($form['#file']->fid, $client);
        if (!empty($usage) && $usage->status == BASSETS_FILE_IS_IN_USE) {
          $operations[] = array(
            'bassets_file_usage_push_file',
            array($form['#file'], $client),
          );
        }
        break;

      case 'update_all':
        $operations[] = array(
          'bassets_file_usage_push_file',
          array($form['#file'], $client),
        );

      default:
        break;
    }
  }
  if (!empty($operations)) {
    $batch = array(
      'operations'    => $operations,
      'title'         => t('Update'),
      'init_message'  => t('Beginning'),
      'error_message' => t('Error while updating.'),
    );
    batch_set($batch);
  }
}

/**
 * Page callback for the detail view of the file usage by a bassets client.
 *
 * @param object $file
 *   The file entity.
 * @param string $client_name
 *   The internal client name of the stored connection.
 *
 * @return string
 *   The output of file usage page.
 */
function bassets_file_usage_page_details($file, $client_name) {
  drupal_set_title(t('File usage of %filename on the client %client', array(
    '%filename' => $file->filename,
    '%client' => $client_name,)), PASS_THROUGH);
  $usage_table = '';
  try{
    $client = services_client_connection_get($client_name);
    $data = array(
      'uuid' => $file->uuid,
    );
    $client->action(BASSETS_CLIENT_RESOURCE, 'fileusage', $data);
    $response = $client->getResponse();
    if (isset($response->data['usage'])) {
      $usage_table = $response->data['usage'];
    }
  }
  catch (Exception $e) {
    watchdog_exception('bassets_file_usage', $e);
  }
  return $usage_table;
}

/**
 * Wrapper function to push a file.
 */
function bassets_file_usage_push_file($file, $client) {
  _bassets_server_push_file($file, array($client));
}

/**
 * Stores the usage of a file for multiple connections.
 *
 * @param object $file
 *   The file entity.
 * @param array $connections_names
 *   An array of connection names.
 * @param string $status
 *   A constant in which state the file is for the connections.
 */
function bassets_file_usage_save_multiple($file, array $connections_names, $status = BASSETS_FILE_IS_IN_USE) {
  foreach ($connections_names as $connections_name) {
    db_merge('bassets_file_usage')
      ->key(array('client_name' => $connections_name, 'fid' => $file->fid))
      ->fields(array(
        'status' => $status,
        'last_update' => REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 * Implements hook_bassets_pre_push_alter().
 */
function bassets_file_usage_bassets_pre_push_alter($file, &$clients) {
  $deployment_type = variable_get('bassets_server_deployment', 'manual');
  // Do not filtering, when deployment-type is manual.
  if ($deployment_type == 'manual') {
    return;
  }
  foreach ($clients as $key => $client_name) {
    $usage = bassets_file_usage_load_by_client($file->fid, $client_name);
    if (empty($usage) || (int) $usage->status !== BASSETS_FILE_IS_IN_USE) {
      unset($clients[$key]);
    }
  }
}

/**
 * Implements hook_bassets_pushed().
 */
function bassets_file_usage_bassets_pushed($file, $client_names = array()) {
  if (!empty($client_names)) {
    bassets_file_usage_save_multiple($file, $client_names, BASSETS_FILE_IS_IN_USE);
  }
}

/**
 * Implements hook_bassets_fetched().
 */
function bassets_file_usage_bassets_fetched($file, $client_names = array()) {
  if (!empty($client_names)) {
    bassets_file_usage_save_multiple($file, $client_names, BASSETS_FILE_IS_IN_USE);
  }
}

/**
 * Implements hook_bassets_deleted().
 */
function bassets_file_usage_bassets_deleted($file, $client_name) {
  $query = db_delete('bassets_file_usage')
    ->condition('client_name', $client_name)
    ->condition('fid', $file->fid);
  $query->execute();
}

/**
 * Loads the usage of a file for all clients.
 */
function bassets_file_usage_load_by_file($fid) {
  $query = db_select('bassets_file_usage', 't');
  $query->fields('t');
  $query->condition('fid', $fid);
  $query->orderBy('last_update', 'DESC');
  return $query->execute();
}

/**
 * Loads the usage of a file for a client.
 */
function bassets_file_usage_load_by_client($fid, $client_name) {
  $query = db_select('bassets_file_usage', 't');
  $query->fields('t');
  $query->condition('fid', $fid);
  $query->condition('client_name', $client_name);
  return $query->execute()->fetchObject();
}

/**
 * Implements hook_file_delete().
 */
function bassets_file_usage_file_delete($file) {
  $query = db_delete('bassets_file_usage');
  $query->condition('fid', $file->fid);
  return $query->execute();
}

/**
 * Returns the human-readable string of the status.
 *
 * @param int $status
 *   The usage status of the file for a client.
 *
 * @return string
 *   The output of the file.
 */
function _bassets_file_usage_format_status($status) {
  switch ($status) {
    case BASSETS_FILE_IS_NOT_IN_USE:

      return t('Not in use');

    case BASSETS_FILE_IS_IN_USE:

      return t('In use');

    case BASSETS_FILE_IS_LOCKED:

      return t('File is locked for client.');

    default:
      return '';
  }
}
