<?php
/**
 * @file
 * Simple validation of ClickBank online purchases for file download access.
 *
 * This file is organized into 4 broad sections:
 * (1) Basic module configuration (hook_menu/_help/_permission, admin form)
 * (2) Node type creation
 * (3) Presentation layer (block, field formatters, theme functions)
 * (4) Access logic
 *
 * @author Bryce Fisher-fleig (bryce@fisher-fleig.org)
 */

/**
 * Implements hook_help().
 *
 * Provides setup instructions for site builders on module configuration page.
 */
function clickbank_download_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/clickbank':
      // Urls for admin pages needed to get up and running.
      $help_urls = array(
        '@goods' => url('admin/structure/taxonomy/clickbank_download_files/add'),
        '@images' => url('admin/structure/taxonomy/clickbank_download_images/add'),
        '@products' => url('node/add/clickbank-download-product'),
        '@block' => url('admin/structure/block/manage/clickbank_download/clickbank_download_block/configure'),
        '@project' => url('http://drupal.org/project/clickbank_download'),
      );
      $output = "<h3>Getting Started</h3>\n";
			$output .= "<ol>\n";
			$output .= "<li>" . t('Login to your ClickBank account, then go to Settings > My Site >') . "\n";
			$output .= t('Advanced Tools. Type in a "Secret Key" there using random numbers and letters. Save.') . "</li>\n";
			$output .= "<li>" . t('Copy and paste your "Secret Key" onto this page. Save') . "</li>\n";
			$output .= "<li>" . t('Upload <a href="@goods" target="_BLANK">digital goods</a>', $help_urls) . "</li>\n";
			$output .= "<li>" . t('Upload <a href="@images" target="_BLANK">product images</a>', $help_urls) . "</li>\n";
			$output .= "<li>" . t('Create <a href="@products" target="_BLANK">products</a>', $help_urls) . "</li>\n";
			$output .= "<li>" . t('Display the <a href="@block" target="_BLANK">download links</a>', $help_urls) . ".\n";
			$output .= t('I recommend setting this first in the "Content" Region.') . "</li>\n";
			$output .= "<li>" . t('After testing, set your Thank You pages inside ClickBank to point to this website.') . "</li>\n";
			$output .= "<li>" . t('Be sure to uncheck "Debug Mode" before going live.') . "</li>\n";
			$output .= "</ol>\n";
			$output .= "<p>For more information and optional steps, checkout the \n";
			$output .= t('<a href="@project" target="_BLANK">ClickBank Download project page</a>', $help_urls);
			$output .= ".</p>\n";
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function clickbank_download_menu() {
  // Registers the download callback at a url.
  $items['download-purchase/%'] = array(
    'page callback' => 'clickbank_download_download_file',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Registers an admin page for this module.
  $items['admin/config/media/clickbank'] = array(
    'title' => 'ClickBank Download Configuration',
    'description' => 'Configuration for the ClickBank Download module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clickbank_download_admin_form'),
    'access arguments' => array('administer clickbank downloads'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function clickbank_download_permission() {
  return array(
    'administer clickbank downloads' => array(
      'title' => 'Administer ClickBank Downloads',
      'description' => 'Security and interface config. Only for admins.',
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Form constructor for module's configuration.
 *
 * @ingroup forms
 */
function clickbank_download_admin_form($form, &$form_state) {
  $form['clickbank_download_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('ClickBank Secret Key'),
    '#description' => t('MUST match "Secret Key" inside ClickBank. You must use a "Secret Key" unless you are in "Debug Mode."'),
    '#size' => 40,
    '#element_validate' => array('_clickbank_download_settings_secret_key'),
    '#default_value' => variable_get('clickbank_download_secret_key', ''),
  );
  $form['clickbank_download_error_message'] = array(
    '#type' => 'textarea',
    '#rows' => 10,
    '#columns' => 40,
    '#title' => t('Download Error Message'),
    '#description' => t('Shown to a user if there is a problem downloading.'),
    '#default_value' => variable_get('clickbank_download_error_message', ''),
  );
  $form['clickbank_download_cookie_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie Name'),
    '#description' => t('Security: controls the cookie name used to secure downloads'),
    '#size' => 40,
    '#maxlength' => 75,
    '#required' => TRUE,
    '#default_value' => variable_get('clickbank_download_cookie_name',
      'clickbank_download_access'),
  );
  $form['clickbank_download_cookie_expiration'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie Expiration'),
    '#description' => t('Seconds that a user can download after reaching site.'),
    '#size' => 40,
    '#maxlength' => 75,
    '#required' => TRUE,
    '#default_value' => variable_get('clickbank_download_cookie_expiration',
      60 * 60 * 24),
  );
  $form['clickbank_download_file_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Download Prefix'),
    '#description' => t('These letters will go in front of the download file name.'),
    '#size' => 40,
    '#maxlength' => 75,
    '#default_value' => variable_get('clickbank_download_file_prefix', ''),
  );
  $form['clickbank_download_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug Mode'),
    '#description' => t('Disables security checks -- do NOT use on live site.'),
    '#default_value' => variable_get('clickbank_download_debug_mode', TRUE),
  );

  return system_settings_form($form);
}

/**
 * Form validation handler for clickbank_download_admin_form().
 *
 * Makes clickbank_download_secret_key setting required when NOT in debug mode.
 */
function _clickbank_download_settings_secret_key($element, &$form_state) {
  if ($form_state['values']['clickbank_download_debug_mode'] == TRUE) {
    if (!isset($element['#value'])) {
      form_error($element, t('You must set a "Secret Key," or enable "Debug Mode."'));
    }
  }
}

/**
 * Implements hook_form().
 */
function clickbank_download_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_info().
 *
 * Creates a custom content type for storing product information
 */
function clickbank_download_node_info() {
  return array(
    'clickbank_download_product' => array(
      'name' => t('Clickbank Product'),
      'base' => 'node_content',
      'description' => t('Stores product images, files, and download instructions for specific ClickBank Product IDs.'),
      'has_title' => TRUE,
      'title_label' => 'Product Name',
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_type_insert().
 *
 * Much like hook_node_insert() lets us know that a node is being
 * inserted into the database, hook_node_type_insert() lets us know
 * that a new content type has been inserted.
 *
 * Since Drupal will at some point insert our new content type,
 * this gives us a chance to add the fields we want.
 *
 * It is called for all inserts to the content type database, so
 * we have to make sure we're only modifying the type we're
 * concerned with.
 */
function clickbank_download_node_type_insert($content_type) {
  if ($content_type->type == 'clickbank_download_product') {
    // Create all the fields we are adding to our content type.
    foreach (_clickbank_download_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_clickbank_download_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = $content_type->type;
      field_create_instance($instance);
    }
  }
}

/**
 * Define the fields for our content type.
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 */
function _clickbank_download_installed_fields() {
  return array(
    'clickbank_download_product_id' => array(
      'field_name'   => 'clickbank_download_product_id',
      'type'         => 'text',
      'settings'     => array(
        'max_length' => 10,
      ),
    ),
  );
}

/**
 * Define the field instances for our content type.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function _clickbank_download_installed_instances() {
  return array(
    'field_clickbank_download_product_id' => array(
      'field_name'  => 'clickbank_download_product_id',
      'label'       => t('Product ID'),
      'description' => t('Numeric ID inside Clickbank for this product.'),
      'required'    => TRUE,
      'widget'      => array(
        'type'        => 'text_textfield',
        'weight'      => -4,
      ),
      'display'     => array(
        'full'        => array('type' => 'hidden'),
        'teaser'      => array('type' => 'hidden'),
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function clickbank_download_theme() {
  return array(
    'clickbank_download_block' => array(
      // Use clickbank-download-block.tpl.php for template.
      'template' => 'clickbank-download-block',
      'variables' => array(
        'products' => NULL,
        'errors' => NULL,
      ),
    ),
  );
}

/**
 * Render API callback: Creates download links for verified users.
 */
function template_preprocess_clickbank_download_block(&$vars) {
  // Sanitize error message (if any).
  $vars['error'] = check_markup($vars['error']);

  $products = is_array($vars['products']) ? $vars['products'] : array();
  $vars['products'] = array();
  foreach ($products as $node) {
    // Santize product title.
    $content['title'] = check_plain($node->title);

    // Get the cover image using custom formatter.
    $product_image_display = array(
      'label' => 'hidden',
      'type' => 'clickbank_download_term_reference_image',
    );
    $product_image = field_view_field('node', $node,
      'clickbank_download_images_ref', $product_image_display);
    if ($product_image) {
      $content['product-image'] = $product_image;
    }

    // Get Download Links using custom formatter.
    $downloads_display = array(
      'label' => 'hidden',
      'type' => 'clickbank_download_term_reference_download_link',
    );
    $downloads = field_view_field('node', $node,
      'clickbank_download_files_ref', $downloads_display);
    if ($downloads) {
      $content['downloads'] = $downloads;
    }

    // Send back all the render array content.
    $vars['products'][$node->nid] = $content;
  }
}

/**
 * Implements hook_block_info().
 *
 * Creates a custom block to provide download links.
 *
 * Note: This block must be added to the "Thank You page" url specified in 
 * ClickBank, or the product download links will not be displayed.
 */
function clickbank_download_block_info() {
  // Returns a list of blocks from this module.
  return array(
    'clickbank_download_block' => array(
      'info' => 'ClickBank Download Block',
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Used to display product download information including cover image, download 
 * links, and help text.
 */
function clickbank_download_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'clickbank_download_block':
      $block['subject'] = NULL;
      // Performs access checks and returns product nids on success.
      $nids = clickbank_download_validate_product_access();
      if (is_array($nids) && count($nids)) {
        $products = node_load_multiple($nids);
        $error = NULL;
      }
      else {
        // User can not access this product due to invalid purchase or.
        // the product is not in Drupal.
        $error = variable_get('clickbank_download_error_message', '');
        $products = NULL;
      }
      // Invokes the theme preprocessor function and template.
      $block['content'] = theme('clickbank_download_block', array(
        'products' => $products,
        'error' => $error,
        )
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_field_formatter_info().
 */
function clickbank_download_field_formatter_info() {
  return array(
    'clickbank_download_term_reference_image' => array(
      'label' => t('Cover Image'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'clickbank_download_term_reference_download_link' => array(
      'label' => t('Download Link'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implemenents hook_field_formatter_prepare_view().
 *
 * Basically, this preloads the taxonomy_term for the field formatters.
 */
function clickbank_download_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $tids = array();

  // Collect every possible term attached to any of the fieldable entities.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Force the array key to prevent duplicates.
      if ($item['tid'] != 'autocreate') {
        $tids[$item['tid']] = $item['tid'];
      }
    }
  }
  if ($tids) {
    $terms = taxonomy_term_load_multiple($tids);

    // Iterate through the fieldable entities again to attach the term data.
    foreach ($entities as $id => $entity) {
      $rekey = FALSE;

      foreach ($items[$id] as $delta => $item) {
        // Check whether taxonomy term field instance value could be loaded.
        if (isset($terms[$item['tid']])) {
          // Replace the instance value with the term data.
          $items[$id][$delta]['taxonomy_term'] = $terms[$item['tid']];
        }
        // Terms to be created are not in $terms, but are still legitimate.
        elseif ($item['tid'] == 'autocreate') {
          // Leave the item in place.
        }
        // Otherwise, unset the instance value, since the term does not exist.
        else {
          unset($items[$id][$delta]);
          $rekey = TRUE;
        }
      }

      if ($rekey) {
        // Rekey the items array.
        $items[$id] = array_values($items[$id]);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 *
 * This function prepares render arrays that actually show
 * up to the end user. It shows the product images or download links stored
 * in taxonomy terms that are referenced by a given node.
 */
function clickbank_download_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Terms whose tid is 'autocreate' do not exist.
  // yet and $item['taxonomy_term'] is not set. Theme such terms as.
  // just their name.
  switch ($display['type']) {
    case 'clickbank_download_term_reference_image':
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array('#markup' => check_plain($item['name']));
        }
        else {
          $term = $item['taxonomy_term'];
          $image_display = array('label' => 'hidden');
          $element[$delta] = field_view_field('taxonomy_term', $term,
            'field_clickbank_download_images', $image_display);
        }
      }
      break;

    case 'clickbank_download_term_reference_download_link':
      $allowed_fids = array();
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array('#markup' => check_plain($item['name']));
        }
        else {
          // Gather the file data.
          $term = $item['taxonomy_term'];
          $download_field = field_get_items('taxonomy_term', $term,
            'field_clickbank_download_files');
          $download = field_view_value('taxonomy_term', $term,
            'field_clickbank_download_files', $download_field[0]);

          // Check for a file field and access permissions.
          if (isset($download['#file']->fid) && clickbank_download_validate_product_access()) {
            $fid = $download['#file']->fid;
            // @todo provide site admin with options for formatting
            $filesize = round(($download['#file']->filesize) / (1024));
            $timestamp = $download['#file']->timestamp;
            $download_url = 'download-purchase/' . $fid;

            $allowed_fids[] = $fid;

            // Format for display.
            $element[$delta] = array(
              '#type' => 'link',
              '#title' => check_plain($term->name),
              '#href' => $download_url,
              '#attributes' => array('rel' => 'nofollow'),
              '#suffix' => " ($filesize KB)",
            );

          }
          // Handle situations that occur when no file is uploaded to the term
          // or no access.
          else {
            if (!isset($download['#file']->fid)) {
              $msg = 'There is no download file in taxonomy term %tid';
              watchdog('clickbank_download', $msg, array('%tid' => $term->tid),
                WATCHDOG_ALERT);
            }
            $element[$delta] = array('#markup' => '');
          }
        }
      }
      // Grant download access to specific files via a cookie.
      clickbank_download_grant_download_access($allowed_fids);
      break;
  }

  return $element;
}

/**
 * Validate and cache access to the digital goods.
 *
 * There are two failure conditions: (1) there is no product node with a
 * product id matching $_POST['item'], or (2) the purchase did not validate.
 *
 * $key is the 'Secret Key' set inside ClickBank > Settings > My Site > 
 * Advanced Tools. It must match the 'Secret Key' on the module configuration
 * page, or customers will be unable to download products.
 *
 * The result is cached for duration of the page request, but not subsequent 
 * page requests.
 *
 * @return FALSE|array
 *   FALSE on failure, array of nids on success.
 */
function clickbank_download_validate_product_access() {
  // Use static caching to persist results throughout this page load.
  $access = &drupal_static(__FUNCTION__);
  if (!isset($access)) {

    // Clickbank purchase validation algorithm.
    $request_params = array('cbreceipt', 'time', 'item', 'cbpop');
    foreach ($request_params as $param) {
      $$param = (isset($_REQUEST[$param])) ? $_REQUEST[$param] : '';
    }
    $key = variable_get('clickbank_download_secret_key', '');
    $xxpop = sha1("$key|$cbreceipt|$time|$item");
    $xxpop = strtoupper(substr($xxpop, 0, 8));

    // Skip access checks for debugging purposes.
    $debug_mode = variable_get('clickbank_download_debug_mode', TRUE);
    if ($debug_mode == FALSE) {
      if ($cbpop != $xxpop) {
        $access = FALSE;
        return $access;
      }
    }

    // Lookup node with a product id that matches $item and send back node ids.
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'clickbank_download_product')
      ->fieldCondition('clickbank_download_product_id', 'value', $item, '=')
      ->execute();
    if (!isset($results['node']) || !count($results['node'])) {
      $msg = "Someone tried to purchase product id %item, but it wasn't found in Drupal.";
      watchdog('clickbank_download', $msg, array('%item' => $item), WATCHDOG_ALERT);
      $access = FALSE;
    }
    else {
      $access = array_keys($results['node']);
    }
  }
  return $access;
}

/**
 * Adds access cookie that permits user to download resources for product node.
 *
 * @param array $fids
 *   array of file ids that user may download
 */
function clickbank_download_grant_download_access($fids) {
  $cookie_key = variable_get('clickbank_download_cookie_name',
    'clickbank_download_access');
  $granted_fids = implode('|', $fids);
  $expires = time() + variable_get('clickbank_download_cookie_expiration',
    60 * 60 * 24);
  setcookie($cookie_key, $granted_fids, $expires);
}

/**
 * Verify that the current user has access to this file using cookies.
 *
 * @see clickbank_download_grant_download_access()
 *
 * @param int $fid
 *   drupal file id
 *
 * @return bool
 *   Returns true when user is authorized for that file, false otherwise.
 */
function clickbank_download_check_download_access($fid) {
  $cookie_name = variable_get('clickbank_download_cookie_name',
    'clickbank_download_access');
  if (isset($_COOKIE[$cookie_name])) {
    $allowed_fids = explode('|', $_COOKIE[$cookie_name]);
    return in_array($fid, $allowed_fids);
  }
  return FALSE;
}

/**
 * Page callback: initiates digital good download.
 *
 * @param int $fid
 *   drupal file id to be downloaded. Ideally, stored privately, above root.
 */
function clickbank_download_download_file($fid = NULL) {
  $fid = (int) $fid;
  if ($fid > 0 && clickbank_download_check_download_access($fid)) {
    $file = file_load($fid);
    $prefix = variable_get('clickbank_download_file_prefix', '');
    file_transfer($file->uri, array(
      'Content-disposition' => 'attachment;filename=' . $prefix . $file->filename,
    ));
  }
  else {
    return drupal_access_denied();
  }
}
