<?php
/**
 * @file
 * Module functions for the collapser module.
 */

define('COLLAPSER_AJAX_CALLBACK', 'js/collapser/state');

/**
 * Implements hook_form_alter().
 */
function collapser_form_alter(&$form, &$form_state, $form_id) {

  // Manipulating _every_ form is a venture and might result in site
  // unfunctionality. So in case there is a problem with our table,
  // not even an uninstall would work.
  static $table_exists;
  if (!isset($table_exists)) {
    $table_exists = db_table_exists('collapser_cuid');
  }
  if ($table_exists) {
    static $js_added;
    $add_js = _collapser_process_form($form, $form_id);

    // Add JS only if necessary and if not already added.
    if ($add_js && !$js_added) {
      global $user;
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_js(
        drupal_get_path('module', 'collapser') . '/collapser.js',
        array('type' => 'file', 'weight' => 19, 'scope' => 'footer')
      );
      // Tell the JS to allow server side savings
      // (not primarily a security measure but might save some AJAX requests)
    $settings['collapser']['remoteSave'] = user_access('save form states per user') == TRUE;
      if ($settings['collapser']['remoteSave']) {
        $settings['collapser']['ajaxPath'] = url(COLLAPSER_AJAX_CALLBACK);
      }
      drupal_add_js(
        $settings,
        'setting'
      );
      // Remember that we have already added our JS in case
      // another form comes along.
      $js_added = TRUE;
    }
  }
} // collapser_form_alter

/**
 * Helper function recurses forms/elements and adds unique fieldset ids.
 *
 * @param &$form_element
 *   The form or element to be recursed.
 *
 * @param $form_id
 *   The form ID.
 *
 * @return bool
 *   Indicates whether there were any fieldsets in the crawled elements.
 */
function _collapser_process_form(&$form_element, $form_id) {
  // Initially load existing cuids statically to save db calls.
  static $cuids;
  if (!isset($cuids)) {
    if (
      $res = db_select('collapser_cuid', 'c')
        ->fields('c', array('element_id', 'cuid'))

    ) {
      $rows = $res->execute()->fetchAll();
      foreach ($rows as $row) {
        $cuids[$row->element_id] = $row->cuid;
      }
    }
  }
  global $user;
  $ret = FALSE;
  foreach ($form_element as $n => $e) {
    $add_class = FALSE;
    if (is_array($e)) {
      if (isset($e['#type']) && $e['#type'] == 'fieldset') {
        $ret = TRUE;
        $add_class = TRUE;
        if (
          isset($e['#collapsible'])
          &&
          $e['#collapsible']
          &&
          isset($cuids["$form_id.$n"])
          &&
          isset($user->data['collapser_status'][$cuids["$form_id.$n"]])
        ) {
          $form_element[$n]['#collapsed'] = $user->data['collapser_status'][$cuids["$form_id.$n"]];
        }
      }
      $ret = _collapser_process_form($form_element[$n], $form_id) || $ret;
      // This must happen after we recursed the array because otherwise
      // we would deadlock the recursion by adding an array.
      if ($add_class) {
        if (!isset($cuids["$form_id.$n"])) {
          _collapser_create_cuid($cuids, $form_id, $n);
        }
        $form_element[$n]['#attributes']['class'][] = 'collapser-uid-' . $cuids["$form_id.$n"];
        $form_element[$n]['#attributes']['class'][] = 'collapser-processible';
      }
    }
  }
  return $ret;
} // _collapser_process_form

/**
 * Create a new cuid for a yet "unknown" form/element combination.
 *
 * Insert the form/element ID combination into the DBtable. If this fails,
 * set the cuid of this fieldset to -1 for this session, otherwise to the
 * newly generated DB id.
 *
 * @param &$cuids
 *   The existing cuids (by reference).
 * @param $form_id
 *   The form ID.
 * @param $element_id
 *   The fieldset's ID.
 */
function _collapser_create_cuid(&$cuids, $form_id, $element_id) {
  $element_id = "$form_id.$element_id";
  $cuids[$element_id] = (
    $execute = db_insert('collapser_cuid')
      ->fields(array('element_id' => $element_id))
      ->execute()
  ) ? $execute : -1;
} // _collapser_create_cuid

/**
 * Implements hook_js().
 *
 * @see js_callback.module
 */
function collapser_js() {
  return array(
    'state' => array(
      'callback' => 'collapser_state_callback',
      'dependencies' => array('field'),
      'bootstrap' => DRUPAL_BOOTSTRAP_LANGUAGE,
    ),
  );
} // collapser_js

/**
 * Implements hook_menu().
 */
function collapser_menu() {
  return array(
    COLLAPSER_AJAX_CALLBACK => array(
      'access callback' => TRUE,
      'page callback' => 'collapser_state_callback',
      'type' => MENU_CALLBACK,
    ),
  );
} // collapser_menu

/**
 * Implements hook_permission().
 */
function collapser_permission() {
  return array(
    'save form states per user' => array(
      'title' => t('Remember collapsible fieldset states on per-user base.'),
      'restrict access' => TRUE,
      'warning' => t('Note that granting this permission to anonymous users will have no effect.'),
    ),
  );
} // collapser_permission

/**
 * Ajax menu callback for saving altered user data.
 */
function collapser_state_callback() {
  global $user;
  if (user_access('save form states per user') && $user->uid) {
    if (isset($_POST['cuid']) && isset($_POST['status'])) {
      if (isset($user->data['collapser_status'])) {
        $cs = $user->data['collapser_status'];
      }
      else {
        $cs = array();
      }
      $cs[$_POST['cuid']] = (bool) ($_POST['status'] == 1);
      user_save($user, array('data' => array('collapser_status' => $cs)));
      drupal_json_output(TRUE);
    }
  }
} // collapser_state_callback
