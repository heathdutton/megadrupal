<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_module_implements_alter().
 */
function l10n_update_bundled_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'l10n_update_projects_alter') {
    unset($implementations['l10n_update_bundled']);
    $implementations['l10n_update_bundled'] = FALSE;
  }
  elseif ($hook == 'init' && _l10n_update_bundled_enabled()) {
    // Disable our hook_init() implementation as soon as the base url has
    // been configured.
    unset($implementations['l10n_update_bundled']);
  }
}

/**
 * Implements hook_init().
 */
function l10n_update_bundled_init() {
  global $base_url;

  if (!_l10n_update_bundled_enabled() && !drupal_is_cli()) {
    variable_set('l10n_update_bundled_base_url', $base_url);
  }
}

/**
 * Implements hook_menu().
 */
function l10n_update_bundled_menu() {
  $items = array();

  $items['system/l10n/%/server.xml'] = array(
    'title' => 'Localization server XML',
    'description' => 'Serves the Localization server XML.',
    'page callback' => 'l10n_update_bundled_server',
    'access callback' => 'l10n_update_bundled_access',
    'access arguments' => array(2),
    'file' => 'includes/l10n_update_bundled.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['system/l10n/%/po/%/%'] = array(
    'title' => 'Localization po file',
    'description' => 'Serves a bundled po file.',
    'page callback' => 'l10n_update_bundled_po',
    'page arguments' => array(4, 5),
    'access callback' => 'l10n_update_bundled_access',
    'access arguments' => array(2, 4),
    'file' => 'includes/l10n_update_bundled.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_site_status_alter().
 */
function l10n_update_bundled_menu_site_status_alter(&$menu_site_status, $path) {
  if ($menu_site_status == MENU_SITE_OFFLINE && user_is_anonymous() && _l10n_update_bundled_enabled()) {
    if (strpos($path, 'system/l10n/' . variable_get('l10n_update_bundled_key', '0') . '/') === 0) {
      $menu_site_status = MENU_SITE_ONLINE;
    }
  }
}

/**
 * Implements hook_l10n_servers().
 */
function l10n_update_bundled_l10n_servers() {
  $servers = array();

  if (_l10n_update_bundled_enabled()) {
    $servers['localhost'] = array(
      'name' => 'localhost',
      'server_url' => _l10n_update_bundle_url('system/l10n/%key/server.xml'),
      'update_url' => _l10n_update_bundle_url('system/l10n/%key/po/%project/%language'),
    );
  }

  return $servers;
}

/**
 * Implements hook_l10n_update_projects_alter().
 */
function l10n_update_bundled_l10n_update_projects_alter(&$projects) {
  if (_l10n_update_bundled_enabled()) {
    // Get the server URL.
    $l10n_url = _l10n_update_bundle_url('system/l10n/%key/server.xml');

    // Get a regex of po files we're looking for.
    $po_regex = implode('|', array_keys(language_list()));
    $po_regex = '# (' . $po_regex . ')\.po #';

    // Create an array of the projects with a none-empty datestamp. This is
    // needed for compatibility with e.a. Features, because Localization update
    // automatically uses localize.drupal.org if the project property is set.
    $contrib_projects = array();
    foreach ($projects as $name => $l10n_info) {
      if (!empty($l10n_info['datestamp'])) {
        $contrib_projects[$name] = $l10n_info;
      }
    }

    foreach (array('module', 'theme') as $type) {
      // Get the list of $type projects and filter out all contrib projects.
      $list = _l10n_update_bundled_system_info($type);
      $list = array_diff_key($list, $contrib_projects);

      if ($list) {
        // When dealing with themes, make sure their base theme is added as well.
        if ($type == 'theme') {
          $info = reset($list);

          do {
            if (isset($info['base theme'])) {
              $name = $info['base theme'];

              if (!isset($list[$name]) && $info = _l10n_update_bundled_system_info($type, TRUE, $name)) {
                $list[$name] = $info;
              }
            }
          } while ($info = next($list));
        }

        foreach ($list as $name => $info) {
          if (isset($info['package']) && $info['package'] == 'Core') {
            // Skip projects that belong to core.
            continue;
          }

          // Check that the project contains at least one of the searched po file.
          $path = drupal_get_path($type, $name) . '/translations';
          if (!is_dir($path)) {
            continue;
          }
          else {
            $files = array_diff(scandir($path), array('.', '..'));
            $files = ' ' . implode(' ', $files) . ' ';

            if (!preg_match($po_regex, $files)) {
              continue;
            }
          }

          // Add the server info.
          $info += array(
            'l10n server' => 'localhost',
            'l10n url' => $l10n_url,
          );

          // Add the project.
          $projects[$name] = array(
            'project_type' => 'module',
            'name' => $name,
            'includes' => array(
              $name => $info['name'],
            ),
            'info' => $info,
          );
        }
      }
    }
  }
}

/**
 * Implements hook_batch_alter().
 */
function l10n_update_bundled_batch_alter(&$batch) {
  foreach ($batch['sets'] as &$set) {
    if (!empty($set['operations'])) {
      $first = reset($set['operations']);

      // Add an extra operation when dealing with an l10n update.
      if ($first[0] == '_l10n_update_batch_download') {
        $set['operations'][] = array('l10n_update_bundled_batch_operation', array());
        $set['total']++;
        $set['count']++;
      }
    }
  }
}

/**
 * Batch operation; Update the file timestamp of all bundled translation files.
 */
function l10n_update_bundled_batch_operation(&$context) {
  foreach ($context['results'] as $result) {
    if (isset($result['file']) && empty($result['fail'])) {
      $file = $result['file'];

      // Only updated bundled translation files.
      if ($file->l10n_server == 'localhost') {
        // Get the path to the po file.
        $path = drupal_get_path($file->project_type, $file->project) . '/translations/' . $file->language . '.po';

        // Get the modification time and save it.
        if ($timestamp = _l10n_update_bundled_po_timestamp($path)) {
          db_update('l10n_update_file')
            ->fields(array('timestamp' => $timestamp))
            ->condition('project', $file->project)
            ->condition('language', $file->language)
            ->execute();
        }
      }
    }
  }
}

/**
 * Access callback for the server and po menu items.
 *
 * @param $key
 *   Key used to access the requested resource.
 * @param $name
 *   When trying to access a po file, the name of the module or theme
 *   it belongs to.
 *
 * @return
 *   TRUE if access is allowed, FALSE otherwise.
 */
function l10n_update_bundled_access($key, $name = NULL) {
  // No sessions allowed + check the key.
  if ($key && $key == variable_get('l10n_update_bundled_key', '')) {
    return (!isset($name) || _l10n_update_bundled_path($name));
  }

  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function l10n_update_bundled_form_l10n_update_admin_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['l10n_update_bundled_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('Site base URL, used to download and import bundled translations.'),
    '#default_value' => variable_get('l10n_update_bundled_base_url'),
    '#required' => TRUE,
    '#access' => user_access('administer site configuration'),
  );

  $form['#validate'][] = 'l10n_update_bundled_admin_settings_form_validate';
}

/**
 * Form validation handler; Validates the Localization update bundle base URL.
 */
function l10n_update_bundled_admin_settings_form_validate($form, &$form_state) {
  $url = trim($form_state['values']['l10n_update_bundled_base_url']);

  if (valid_url($url, TRUE)) {
    form_set_value($form['l10n_update_bundled_base_url'], rtrim($url, '/'), $form_state);
  }
  else {
    form_set_error('l10n_update_bundled_base_url', t('The provided base URL is not valid.'));
  }
}

/**
 * Checks if the module has been configured.
 *
 * @return
 *   TRUE if the module has been configured.
 */
function _l10n_update_bundled_enabled() {
  return (bool) variable_get('l10n_update_bundled_base_url');
}

/**
 * Get the info of all or one specific module or theme.
 *
 * @param $type
 *   The project type, module or theme.
 * @param $disabled
 *   Set to TRUE to include disabled modules or themes. Leave NULL to use the
 *   value of the "Check for updates of disabled modules and themes" variable.
 * @param $name
 *   The module or theme name.
 *
 * @return
 *   An associative array of module or theme information keyed by name, or only
 *   information for $name, if given. If no records are available, an empty
 *   array is returned.
 */
function _l10n_update_bundled_system_info($type, $disabled = NULL, $name = NULL) {
  if (!isset($disabled)) {
    $disabled = variable_get('l10n_update_check_disabled', FALSE);
  }

  if ($disabled) {
    $list = system_list($type);

    if (isset($name)) {
      $list = (isset($list[$name]) ? $list[$name]->info : array());
    }
    else {
      foreach ($list as $name => $item) {
        $list[$name] = $item->info;
      }
    }
  }
  else {
    $list = system_get_info($type, $name);
  }

  return $list;
}

/**
 * Builds a local translation server URL.
 *
 * @param $path
 *   The URL path, %key will be replaced with the access key.
 *
 * @return
 *   The absolute URL.
 */
function _l10n_update_bundle_url($path = '') {
  $url = url($path, array(
    'absolute' => TRUE,
    'alias' => TRUE,
    'base_url' => variable_get('l10n_update_bundled_base_url'),
  ));

  $url = strtr($url, array(
    '%25key' => variable_get('l10n_update_bundled_key', '0'),
    '%25project' => '%project',
    '%25language' => '%language',
  ));

  return $url;
}

/**
 * Get the path to a module or theme with the specified name.
 *
 * @param $name
 *   The module or theme name.
 *
 * @return
 *   Path to the specified module or theme.
 */
function _l10n_update_bundled_path($name) {
  foreach (array('module', 'theme') as $type) {
    if ($path = drupal_get_path($type, $name)) {
      return $path;
    }
  }
}

/**
 * Get the timestamp a po file was last updated.
 *
 * @param $file
 *   Full path to the po file.
 * @param $fp
 *   An existing file pointer to reuse.
 *
 * @return
 *   UNIX timestamp the file was last modified.
 */
function _l10n_update_bundled_po_timestamp($file, $fp = NULL) {
  $close_fp = !isset($fp);

  if ($close_fp && (!is_file($file) || !$fp = fopen($file, 'rb'))) {
    return 0;
  }

  $modified = array();

  // Read the po file headers to find the modification date.
  while ($line = fgets($fp, 10 * 1024)) {
    // Ignore comments.
    if (strncmp('#', $line, 1)) {
      if ($line == '') {
        // Leave after the headers.
        break;
      }

      if (preg_match('#^"(POT?\-(?:Creation|Revision)\-Date): (\d{4}-\d{2}-\d{2} \d{2}:\d{2}(?:\+\d{4}))?\\\n"#', $line, $matches)) {
        if (isset($matches[2])) {
          // Parse the found date to a timestamp and keep the most one.
          $modified[] = strtotime($matches[2]);
        }

        if (($modified && $matches[1] == 'PO-Revision-Date') || count($modified) == 2) {
          // Leave as soon as we found what we're looking for.
          break;
        }
      }
    }
  }

  // Close or rewind the file pointer.
  if ($close_fp) {
    fclose($fp);
  }
  else {
    rewind($fp);
  }

  // Use the latest date or file modification time as fallback.
  if ($modified) {
    $modified = max($modified);
  }
  else {
    $modified = filemtime($file);
  }

  return $modified;
}
