<?php

/**
 * @file
 * Provide a Views filter that compares one field to another.
 */

/**
 * Implements hook_views_api().
 */
function numeric_field_filter_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'numeric_field_filter') . '/views',
  );
}

/**
 * Provide an array of field types that can work with Numeric Field Filter.
 *
 * @return array
 *   Values of the return array are the supported field types
 */
function _numeric_field_filter_field_types() {
  $field_types = array_keys(numeric_field_filter_converter_info());
  return $field_types;
}

/**
 * Invoke a method on a converter of a Field API field type.
 *
 * Invoke a particular method on a converter of a particular Field API field
 * type. Function automatically looks up the converter class and invokes the
 * requested method.
 *
 * @param array $field
 *   Field API field definition array for which the element should be
 *   generated
 * @param string $method
 *   Method name to be invoked
 * @param ...
 *   Arguments to pass to the requested method
 *
 * @return mixed
 *   Function returns whatever the requested method has returned
 */
function numeric_field_filter_converter_method_invoke($field, $method) {
  $args = func_get_args();
  // Getting rid of $field argument.
  array_shift($args);
  // Getting rid of $method argument.
  array_shift($args);
  $converter_class = numeric_field_filter_converter_info($field['type']);
  return call_user_func_array($converter_class . '::' . $method, $args);
}

/**
 * Implements hook_numeric_field_filter_converter_info().
 */
function numeric_field_filter_numeric_field_filter_converter_info() {
  return array('NumericFieldFilterConverterNumber');
}

/**
 * Get mapping Field API field type to converter class to convert it into SQL.
 *
 * Retrieve information about mapping each of supported Field API field type to
 * a subclass of interface NumericFieldFilterConvertableInterface, i.e. such
 * that can be converted in SQL expression.
 *
 * @param string $field_type
 *   If you want to retrieve a converter for just a particular Field API field
 *   type, supply it here
 * @param bool $reset
 *   Whether to reset cache
 *
 * @return array|string
 *   Normally returns an array which maps Field API field type to name of a
 *   class that extends interface NumericFieldFilterConvertableInterface and is
 *   responsible for converting fields of that Field API field type into a SQL
 *   expression, however, if you provided $field_type only a single entry from
 *   this array will be returned - class name of converter for this particular
 *   Field API field type
 */
function numeric_field_filter_converter_info($field_type = NULL, $reset = FALSE) {
  $cache = &drupal_static(__FUNCTION__);

  if (!is_array($cache) || $reset) {
    $cache = array();
    // Collecting data about available converter classes from modules.
    foreach (module_invoke_all('numeric_field_filter_converter_info') as $converter_class) {
      if (in_array('NumericFieldFilterConvertableInterface', class_implements($converter_class))) {
        foreach (call_user_func($converter_class . '::supportedFieldTypes') as $supported_field_type) {
          $cache[$supported_field_type] = $converter_class;
        }
      }
    }
    // After doing initial mapping, we let others to alter data if they find it
    // necessary.
    drupal_alter('numeric_field_converter_info', $cache);
  }

  if (!is_null($field_type) && isset($cache[$field_type])) {
    return $cache[$field_type];
  }

  return $cache;
}

/**
 * FAPI element validate callback.
 *
 * Should be called to validate all formula textifelds of Numeric Field Filter
 * value form. Asserts the submitted value contains a correct and valid formula
 * and may be safely placed into a SQL query.
 */
function _numeric_field_filter_formula_element_validate($element, &$form_state) {
  // @todo: check if this function may be shifted to
  // numeric_field_filter.views.inc file to load as few code as possible on each
  // page load.
  $formula = $element['#value'];
  $sanitized_formula = _numeric_field_filter_sanitize_formula($formula);
  if ($formula != $sanitized_formula) {
    form_error($element, t('Entered into %title formula is not valid.', array(
      '%title' => $element['#title'],
    )));
  }
}

/**
 * Supportive function.
 *
 * Sanitize value entered in any formula textfield of Numeric Field Filter
 * handler. Since input of any of those textfields goes directly into a SQL
 * query through $this->query->add_where_expression(), it's a good idea to
 * sanitize user's input.
 *
 * @param string $value
 *   User input
 *
 * @return string
 *   Sanitized input parameter $value
 */
function _numeric_field_filter_sanitize_formula($value) {
  // @todo: check if this function may be shifted to
  // numeric_field_filter.views.inc file to load as few code as possible on each
  // page load.
  // Our gameplan for sanitizing is the following. We do not allow any chars,
  // no freaky symbols, the only chars allowed is the placeholder [field].
  // Additionally we allow digits, supported math operators, parenthesis.
  $tmp = explode(NUMERIC_FIELD_FILTER_VIEWS_FIELD_TOKEN, $value);
  foreach ($tmp as $k => $v) {
    $v = preg_replace('#[^\d\s()+\-/*.]#', '', $v);
    $tmp[$k] = $v;
  }
  return implode(NUMERIC_FIELD_FILTER_VIEWS_FIELD_TOKEN, $tmp);
}
