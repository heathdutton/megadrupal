<?php
// Describe associated Javascript libraries
require_once(realpath( dirname( __FILE__ )) . '/pazpar2-js.info.inc' );

// Module metainfo
/**
 * Implements hook_node_info().
 */
function mkdru_node_info() {
  return array(
    'mkdru' => array(
      'name'        => t("Pazpar2 metasearch interface"),
      'base'        => 'mkdru',
      'description' => t("Metasearch interface for Z39.50/SRU and other targets via a Pazpar2/Service Proxy backend"),
    )
  );
}

/**
 * Implements hook_permission().
 */
function mkdru_permission() {
  return array(
    'administer metasearch interfaces' => array(
      'title' => t('Administer Pazpar2 metasearch integration'),
    ),
    'create metasearch interface' => array(
      'title' => t('Create metasearch interface'),
    ),
    'edit any metasearch interface' => array(
      'title' => t('Edit any metasearch interface'),
    ),
    'edit own metasearch interface' => array(
      'title' => t('Edit own metasearch interface'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function mkdru_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ($type == 'mkdru') {
    if ($op == 'create') {
      // Only users with permission to do so may create this node type.
      return user_access('create metasearch interface', $account);
    }

    // Users who create a node may edit or delete it later, assuming they have the
    // necessary permissions.
    if ($op == 'update' || $op == 'delete') {
      if (user_access('edit own metasearch interface', $account) && ($account->uid == $node->uid)) {
        return NODE_ACCESS_ALLOW;
      }
      elseif (user_access('edit any metasearch interface', $account)) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function mkdru_menu() {
  $items['admin/config/search/mkdru'] = array(
    'title' => 'Configure Pazpar2 metasearch integration',
    'description' => 'Settings for mkdru.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mkdru_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mkdru.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function mkdru_init() {
  // Applies our module specific CSS to all pages. This works best because
  // all CSS is aggregated and cached so we reduce the number of HTTP
  // requests and the size is negligible.
  drupal_add_css(drupal_get_path('module', 'mkdru') . '/mkdru.css');
}



// Config form common to node and settings
function mkdru_settings_form($form, &$form_state) {
  require(realpath( dirname( __FILE__ )) . '/defaults.inc' );
  if (isset($form_state['values']['settings'])) {
    $container = $form_state['values'];
  }
  elseif (isset($form_state['build_info']['args']['settings'])) {
    $container = $form_state['build_info']['args'];
  }
  else {
    $container = $mkdru_defaults;
  }

  $settings = array_replace_recursive($mkdru_defaults['settings'], $container['settings']);
  $sp_user = $container['sp_user'];
  $sp_pass = $container['sp_pass'];
  $sp_server_auth = $container['sp_server_auth'];
  $pz2_path = $container['pz2_path'];

  $form['pz2_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Pazpar2/Service Proxy URL or path'),
    '#description' => t('URL that takes Pazpar2 commands via HTTP, can be a relative path eg. for httpd proxying'),
    '#required' => TRUE,
    '#default_value' => $pz2_path,
    '#element_validate' => array('mkdru_validate_url'),
  );

  $form['sp']  = array(
    '#type' => 'fieldset',
    '#title' => t('Service Proxy specific settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['sp']['sp_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Proxy username'),
    '#description' => t('Service Proxy username'),
    '#required' => FALSE,
    '#default_value' => $sp_user,
    '#element_validate' => array('mkdru_validate_alphanumdascore'),
  );
  $form['sp']['sp_pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Proxy password'),
    '#description' => t('Service Proxy password'),
    '#required' => FALSE,
    '#default_value' => $sp_pass,
  );
  $form['sp']['sp_server_auth'] = array(
    '#title' => t('Authenticate on server'),
    '#description' => t('Performs Service Proxy authentication on the server and passes only the session id to client code'),
    '#type' => 'checkbox',
    '#default_value' => $sp_server_auth,
    '#element_validate' => array('mkdru_validate_boolean'),
  );

  $form['settings'] = array(
    '#tree' => TRUE,
  );
  $form['settings']['is_service_proxy'] = array(
    '#title' => t('Service Proxy'),
    '#description' => t('Is above path/URL a Service Proxy instance?'),
    '#type' => 'checkbox',
    '#default_value' => $settings['is_service_proxy'],
    '#element_validate' => array('mkdru_validate_boolean'),
  );
  $form['settings']['autocomplete']  = array(
    '#type' => 'fieldset',
    '#title' => t('Autocomplete'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['settings']['autocomplete']['use_autocomplete'] = array(
    '#title' => t('Use autocomplete?'),
    '#type' => 'checkbox',
    '#default_value' => $settings['autocomplete']['use_autocomplete'],
    '#element_validate' => array('mkdru_validate_boolean'),
  );
  $form['settings']['autocomplete']['alt_url'] = array(
    '#title' => t('Alternate URL'),
    '#description' => t('An alternate URL to use for ?command=autocomplete instead of the Service Proxy URL.'),
    '#type' => 'textfield',
    '#default_value' => $settings['autocomplete']['alt_url'],
    '#element_validate' => array('mkdru_validate_url'),
  );
  $form['settings']['mergekey'] = array(
    '#type' => 'textfield',
    '#title' => t('Mergekey override'),
    '#description' => t('Comma separated list of fields that, if identical, indicate the records refer to the same resource'),
    '#required' => FALSE,
    '#default_value' => $settings['mergekey'],
    '#element_validate' => array('mkdru_validate_noangle'),
  );
  $form['settings']['rank'] = array(
    '#type' => 'textfield',
    '#title' => t('Ranking weight override'),
    '#description' => t('ex. parameter=4,otherparam=2'),
    '#required' => FALSE,
    '#default_value' => $settings['rank'],
    '#element_validate' => array('mkdru_validate_noangle'),
  );
  $form['settings']['disable_ranking'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable sorting/ranking'),
    '#description' => t('Instructs remote webservice not to reorder results'),
    '#default_value' => $settings['disable_ranking'],
    '#element_validate' => array('mkdru_validate_boolean'),
  );

  $form['settings']['facets']  = array(
    '#type' => 'fieldset',
    '#title' => t('Facets'),
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
    '#prefix' => '<div id="mkdru-facets-form-wrapper">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  foreach (array_keys($settings['facets']) as $facet) {
    $form['settings']['facets'][$facet]  = array(
      '#type' => 'fieldset',
      '#title' => t('@facet facet', array('@facet' => $facet)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE
    );
    $form['settings']['facets'][$facet]['displayName'] = array(
      '#type' => 'textfield',
      '#title' => t('Facet name to display in UI'),
      '#required' => TRUE,
      '#default_value' => $settings['facets'][$facet]['displayName'],
      '#element_validate' => array('mkdru_validate_noangle'),
    );
    $form['settings']['facets'][$facet]['pz2Name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of termlist in Pazpar2'),
      '#required' => TRUE,
      '#default_value' => $settings['facets'][$facet]['pz2Name'],
      '#element_validate' => array('mkdru_validate_alphanumdascore'),
    );
    $form['settings']['facets'][$facet]['multiLimit'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow multiple limits?'),
      '#default_value' => $settings['facets'][$facet]['multiLimit'],
      '#element_validate' => array('mkdru_validate_boolean'),
    );
    $form['settings']['facets'][$facet]['max'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of terms to display'),
      '#required' => TRUE,
      '#default_value' => $settings['facets'][$facet]['max'],
      '#size' => 3,
      '#maxlength' => 3,
      '#element_validate' => array('element_validate_integer_positive'),
    );
    $form['settings']['facets'][$facet]['orderWeight'] = array(
      '#type' => 'textfield',
      '#title' => t('Facet weight'),
      '#default_value' => $settings['facets'][$facet]['orderWeight'],
      '#size' => 3,
      '#maxlength' => 3,
      '#element_validate' => array('element_validate_integer_positive'),
    );
    $form['settings']['facets'][$facet]['remove'] = array(
      '#type' => 'submit',
      '#value' => t('Remove') . ' ' . $facet . ' ' . t('facet'),
      '#mkdru facet' => $facet,
      '#submit' => array('mkdru_remove_facet'),
      '#ajax' => array(
        'callback' => 'mkdru_ajax_facet_callback',
        'wrapper' => 'mkdru-facets-form-wrapper',
      ),
    );
  }

  $form['new_facet']  = array(
    '#type' => 'fieldset',
    '#title' => t('Add new facet...'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['new_facet']['canonical'] = array(
    '#type' => 'textfield',
    '#title' => t('Canonical name of new facet'),
    '#element_validate' => array('mkdru_validate_alphanumdascore'),
  );
  $form['new_facet']['button'] = array(
    '#type' => 'submit',
    '#value' => t('Add facet'),
    '#description' => t('Configure additional facets based on Pazpar2/SP termlists'),
    '#weight' => 1,
    '#submit' => array('mkdru_add_facet_form'),
    '#ajax' => array(
      'callback' => 'mkdru_ajax_facet_callback',
      'wrapper' => 'mkdru-facets-form-wrapper',
    ),
  );
  return $form;
}

function mkdru_add_facet_form($form, &$form_state) {
  $newfacet = $form_state['values']['new_facet']['canonical'];
  $form_state['values']['settings']['facets'][$newfacet] = NULL;
  $form_state['rebuild'] = TRUE;
}

function mkdru_remove_facet($form, &$form_state) {
  $delfacet = $form_state['clicked_button']['#mkdru facet'];
  if ($delfacet)
    unset($form_state['values']['settings']['facets'][$delfacet]);
  // Block table is not rebuilt like in D6 so we need to remove blocks explicitly
  // This is a bit preemptive but the block still reappears in block_list if you
  // decide not to save the facet deletion.
  // Only applies if the search is a node.
  if ($form_state['values']['nid']) {
    db_delete('block')->condition(db_and()
      ->condition('module', 'mkdru')
      ->condition('delta', 'mkdru_facet_' . $delfacet . '_' . $form_state['values']['nid'])
      )->execute();
  }
  $form_state['rebuild'] = TRUE;
}

function mkdru_ajax_facet_callback($form, &$form_state) {
  return $form['settings']['facets'];
}

/**
 * Input validation for the settings form
 */
function mkdru_validate_alphanumdascore($element, &$form_state) {
  $value = $element['#value'];
  if (!preg_match('/^[A-Za-z0-9_-]*$/', $value)) {
    form_error($element, t('%name must only contain letters, numbers, dashes and underscores.', array('%name' => $element['#title'])));  
  }
}
function mkdru_validate_boolean($element, &$form_state) {
  $value = $element['#value'];
  if (($value != 0) && ($value != 1)) {
    form_error($element, t('%name must be 0 or 1.', array('%name' => $element['#title'])));  
  }
}
function mkdru_validate_noangle($element, &$form_state) {
  $value = $element['#value'];
  if (preg_match('/[<>]/', $value)) {
    form_error($element, t('%name must not contain "&lt;" or "&gt;", consider using HTML entities "&amp;lt;" and "&amp;gt;" instead.', array('%name' => $element['#title'])));  
  }
}
function mkdru_validate_url($element, &$form_state) {
  $value = $element['#value'];
  if (!valid_url($value) && ($value !== '')) {
    form_error($element, t('%name is not a valid path or URL.', array('%name' => $element['#title'])));  
  }
}

// Node config
/**
 * Implements hook_form().
 */
function mkdru_form(&$node, &$form_state) {
  if (isset($node->mkdru['settings'])) {
    $form_state['build_info']['args'] = $node->mkdru;
    // Second decode parameter indicates associative array
    $form_state['build_info']['args']['settings'] = json_decode($node->mkdru['settings'], TRUE);
  }
  $form = drupal_retrieve_form('mkdru_settings_form', $form_state);
  $type = node_type_get_type($node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  return $form;
}

/**
 * Implements hook_node_submit().
 */
function mkdru_node_submit($node, $form, &$form_state) {
  if ($node->type === "mkdru") {
    // include the path in the client settings; we need it there too
    $settings = $node->settings;
    // server auth doesn't work with pazpar2
    $sp_server_auth = $settings['is_service_proxy'] ? $node->sp_server_auth : 0;
    $settings['sp_server_auth'] = $sp_server_auth;
    // client auth means the client needs credentials
    if ($sp_server_auth === 0) {
      $settings['sp_user'] = $node->sp_user;
      $settings['sp_pass'] = $node->sp_pass;
    }
    $settings['pz2_path'] = $node->pz2_path;
    $node->mkdru = array(
      'settings' => json_encode($settings),
      'pz2_path' => $node->pz2_path,
      'sp_user' => $node->sp_user,
      'sp_pass' => $node->sp_pass,
      'sp_server_auth' => $sp_server_auth,
    );
  }
}

/**
 * Implements hook_insert().
 */
function mkdru_insert($node) {
  $fields = $node->mkdru;
  $fields['nid'] = $node->nid;
  $fields['vid'] = $node->vid;
  db_insert('mkdru')->fields($fields)->execute();
}

/**
 * Implements hook_update().
 */
function mkdru_update($node) {
  if ($node->revision) {
    // New revision; treat it as a new record.
    mkdru_insert($node);
  }
  else {
    $node->mkdru['nid'] = $node->nid;
    $node->mkdru['vid'] = $node->vid;
    db_update('mkdru')
      ->condition('vid', $node->vid)
      ->fields($node->mkdru)
      ->execute();
    block_flush_caches();
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function mkdru_node_revision_delete($node) {
  db_delete('mkdru')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_delete().
 */
function mkdru_delete($node) {
  // Deleting by nid covers all revisions.
  db_delete('mkdru')
    ->condition('nid', $node->nid)
    ->execute();
  // Block table is not rebuilt like in D6 so we need to remove blocks explicitly
  db_delete('block')->condition(db_and()
    ->condition('module', 'mkdru')
    ->condition('delta', '%\_' . $node->nid, 'like')
    )->execute();
}



// Node rendering
/**
 * Implements hook_load().
 */
function mkdru_load($nodes) {
  $result = db_query('SELECT * FROM {mkdru} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  while ($record = $result->fetchAssoc()) {
    $nodes[$record['nid']]->mkdru = $record;
  }
}

/**
 * Implements hook_theme().
 */
function mkdru_theme() {
  return array(
    'mkdru_form' => array(
      'template' => 'mkdru-form',
      'variables' => array(),
    ),
    'mkdru_results' => array(
      'template' => 'mkdru-results',
      'variables' => array(),
    ),
    'mkdru_js' => array(
      'variables' => array('setting' => NULL),
    ),
    'mkdru_block_search' => array(
      'template' => 'mkdru-block-search',
      'variables' => array('nid' => NULL, 'path' => NULL),
    ),
    'mkdru_block_facet' => array(
      'template' => 'mkdru-block-facet',
      'variables' => array('class' => NULL)
    )
  );
}

/**
 * Theme function to include Javascript search client and deps.
 */
function theme_mkdru_js(&$variables) {
  $path = drupal_get_path('module', 'mkdru');
  $libinfo = libraries_detect('pazpar2-js');
  if (isset($libinfo['version'])) {
    // Pazpar2 client library via Libraries API
    drupal_add_library('mkdru', 'pz2');
  }
  else {
    drupal_add_js(variable_get('pz2_js_path'), array('type' => 'external',
                  'scope' => 'footer', 'defer' => FALSE, 'preprocess' => TRUE));
  }
  // jQuery plugin for query string/history manipulation.
  drupal_add_library('system', 'jquery.bbq');
  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_js($path . '/mkdru.theme.js', array(
    'type' => 'file', 'scope' => 'footer', 'defer' => FALSE, 'preprocess' => TRUE));
  drupal_add_js($path . '/mkdru.client.js', array(
    'type' => 'file', 'scope' => 'footer', 'defer' => FALSE, 'preprocess' => TRUE));
  drupal_add_js($path . '/mkdru.form.js', array(
    'type' => 'file', 'scope' => 'footer', 'defer' => FALSE, 'preprocess' => TRUE));
  drupal_add_js($variables['setting'], 'setting');
}

/**
 * Authenticates to configured Service Proxy and returns JSESSIONID
 */
function mkdru_get_sp_session($nid) {
  $node = node_load($nid);
  $url = $node->mkdru['pz2_path'] . '?command=auth&action=login&username='
         . $node->mkdru['sp_user'] . '&password=' . $node->mkdru['sp_pass'];
  if ((strpos($url, 'http://') !== 0) && (strpos($url, 'http://')) !== 0) {
    global $base_url;
    $url = $base_url . $url;
  }
  $fp = fopen($url, "r");
  $meta = stream_get_meta_data($fp);
  for ($j = 0; isset($meta['wrapper_data'][$j]); $j++) {
    $line = $meta['wrapper_data'][$j];
    @list($header, $parameters) = explode(";", $line, 2);
    @list($attr, $value) = explode(":", $header, 2);
    if (strtolower(trim($attr)) == "set-cookie") {
      $cookie = trim($value);
      break;
    }
  }
  fclose($fp);
  if (preg_match('/JSESSIONID=(.*)/', $cookie, $matches)) {
    return $matches[1];
  }
}

/**
 * Implements hook_view().
 */
function mkdru_view($node, $view_mode) {
  if ($view_mode == 'full') {
    $client_data['settings'] = $node->mkdru['settings'];
    $client_data['nid'] = $node->nid;
    $client_data['pz2_path'] = $node->mkdru['pz2_path'];
    if ($node->mkdru['sp_server_auth'])  {
      $client_data['jsessionid'] = mkdru_get_sp_session($node->nid);
    }
    $node->content['mkdru_js'] = array(
      '#markup' => theme('mkdru_js', array('setting' => array('mkdru' => $client_data))),
      '#weight' => 0,
    );
    $node->content['mkdru_form'] = array(
      '#markup' => theme('mkdru_form'),
      '#weight' => 1,
    );
    $node->content['mkdru_results'] = array(
      '#markup' => theme('mkdru_results'),
      '#weight' => 2,
    );
  }
  return $node;
}



// Blocks
/**
 * Implements hook_block_info().
 */
function mkdru_block_info() {
  $blocks = array();
  $result = db_query("SELECT title, {mkdru}.nid as nid, settings FROM {node},{mkdru} WHERE {mkdru}.nid = {node}.nid;");
  foreach ($result as $node) {
    // search blocks
    $blocks['mkdru_search_' . $node->nid]['info'] = t('mkdru - search box for "@title"', array('@title' => $node->title));
    $blocks['mkdru_search_' . $node->nid]['cache'] = DRUPAL_NO_CACHE;
    // facet blocks
    $settings = json_decode($node->settings, TRUE);
    foreach ($settings['facets'] as $facet_name => $facet) {
      $key = 'mkdru_facet_' . $facet_name . '_' . $node->nid;
      $blocks[$key]['info'] = t('mkdru - @facet facet for @title', array('@facet' => $facet_name, '@title' => $node->title));
      $blocks[$key]['visibility'] = 1;
      $blocks[$key]['pages'] = 'node/' . $node->nid;
      $blocks[$key]['cache'] = DRUPAL_CACHE_GLOBAL;
    }
  };
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mkdru_block_view($delta) {
  if (substr($delta, 0, 13) == 'mkdru_search_') {
    $nid = substr($delta, 13);
    $block['content'] = theme('mkdru_block_search',
      array('nid' => $nid, 'path' => '/node/' . $nid));
    return $block;
  }
  elseif (preg_match('/^mkdru_facet_(.*)_(\d+)$/', $delta, $matches) > 0) {
    $facet = $matches[1];
    $nid = $matches[2];
    $result = db_query("SELECT settings FROM {mkdru} WHERE nid = :nid;", array(':nid' => $nid));
    $settingsjson = $result->fetchObject()->settings;
    $settings = json_decode($settingsjson, TRUE);
    if (isset($settings['facets'][$facet]['displayName'])) {
      $block['subject'] = check_plain($settings['facets'][$facet]['displayName']);
    }
    $block['content'] = theme('mkdru_block_facet', array('class' => 'mkdru-facet-' . $facet));
    return $block;
  }
}
