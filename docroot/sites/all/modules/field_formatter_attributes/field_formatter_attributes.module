<?php

/**
 * @file
 * Provide for custom classes on field formatters in the display.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_formatter_attributes_field_formatter_info_alter(&$info) {
  // added to ALL formatters...
  foreach ($info as &$formatter) {
    $formatter['settings']['field_formatter_attributes'] = array();
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_attributes_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if (!empty($summary)) {
    $summary .= '<br />';
  }

  if (!empty($settings['field_formatter_attributes'])) {
    $summary .= t('Additional attributes:');
    $summary .= '<ul><li>' . field_formatter_attributes_drupal_attributes($settings['field_formatter_attributes'], '</li><li>') . '</li></ul>';
  }
  else {
    $summary .= t('No additional attributes');
  }
}

/**
 * Same as drupal_attributes, but with configurable separator.
 *
 * @param array $attributes
 * @param string $seperator
 * @return string
 */
function field_formatter_attributes_drupal_attributes(array $attributes = array(), $seperator = ' ') {
  foreach ($attributes as $attribute => &$data) {
    $data = implode(' ', (array) $data);
    $data = $attribute . '="' . check_plain($data) . '"';
  }
  return $attributes ? ' ' . implode($seperator, $attributes) : '';
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_formatter_attributes_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $settings_form['field_formatter_attributes'] = array(
    '#type' => 'options',
    '#title' => t('Field formatter attributes'),
    '#description' => 'Specify any additional attributes here',
    '#optgroups' => FALSE,
    '#multiple' => FALSE,
    '#key_type' => 'custom',
    '#key_type_toggle' => FALSE,
    '#key_type_toggled' => TRUE,
    '#default_value_allowed' => FALSE,
    '#options' => isset($settings['field_formatter_attributes']) ? $settings['field_formatter_attributes'] : array(),
    '#element_validate' => array('form_options_validate', 'field_formatter_attributes_clean_options_element_value', 'field_formatter_attributes_validate_no_class'),
    '#default_value' => NULL,
  );
}

/**
 * Element validate callback to convert our options element values to what we
 * need. I.e. Input suitable for drupal_attributes.
 */
function field_formatter_attributes_clean_options_element_value(&$element, &$form_state) {
  $value = NULL;
  if (isset($element['#value'])) {
    $value = $element['#value'];
  }
  if (!isset($value)) {
    $value = drupal_array_get_nested_value($form_state['parents'], $element['#parents']);
  }
  if (isset($value) && isset($value['options'])) {
    $value = $value['options'];
    $element['#value'] = $value;
    drupal_array_set_nested_value($form_state['values'], $element['#parents'], $value);
  }
}

/**
 * Element validate callback to ensure there are no 'class' items here.
 *
 * We don't support these because they don't go in the 'attributes_array'
 * variable in preprocess_field and there's a perfectly good module which does
 * these: field_formatter_class.
 *
 * @param $element
 * @param $form_state
 */
function field_formatter_attributes_validate_no_class($element, &$form_state) {
  if (!empty($element['#value'])) {
    if (isset($element['#value']['class'])) {
      form_error($element, t('The "class" attribute is not supported. Please use the <a href="http://drupal.org/project/field_formatter_class">Field Formatter Class</a> module if you want to add classes.'));
    }
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * Adds a custom field class to the field's classes_array
 * according to the field formatter settings.
 */
function field_formatter_attributes_preprocess_field(&$variables, $hook) {
  $entity_type = $variables['element']['#entity_type'];
  $field_name  = $variables['element']['#field_name'];
  $bundle      = $variables['element']['#bundle'];
  $view_mode   = $variables['element']['#view_mode'];

  $formatter_info = field_formatter_settings_get_instance_display_settings($entity_type, $field_name, $bundle, $view_mode);

  // Merge in our additional attributes.
  if (!empty($formatter_info['field_formatter_attributes'])) {
    $variables += array('attributes_array' => array());
    $variables['attributes_array'] = drupal_array_merge_deep($variables['attributes_array'], $formatter_info['field_formatter_attributes']);
  }
}
