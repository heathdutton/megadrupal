<?php
/**
 * @file
 * Main section for the Watchdog Notifier module.
 *
 * This module will scan the watchdog logs for any configured type of error
 * and then fire off an email to the correspondingly configured email addresses.
 */

require_once('watchdog_notifier.logic.inc');

/**
 * Implements hook_help().
 */
function watchdog_notifier_help($path, $arg) {
  if ($path == 'admin/help#watchdog_notifier') {
    return t('The Watchdog Notifier module allows for the configuration of automatic email notifications when certain log messages of the specified severities appear in the watchdog log.  The scanning of the log and subsequent notifications can be managed with a Unix-style cron configuration.');
  }
}


/**
 * Implements hook_menu().
 */
function watchdog_notifier_menu() {
  $items['admin/config/system/watchdog_notifier'] = array(
    'title'            => 'Watchdog Notifier',
    'description'      => t('Configure watchlist for specific watchdog log messages.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('watchdog_notifier_form'),
    'access arguments' => array('administer watchdog notifications'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function watchdog_notifier_permission() {
  return array(
    'administer watchdog notifications' => array(
      'title' => t('Administer the watchlists and frequency of scans for the watchdog notifier.'),
    ),
  );
}


/**
 * Implements hook_cron().
 */
function watchdog_notifier_cron() {
  $watchdog_notifier_scheduling = variable_get('watchdog_notifier_use_cron');

  if ($watchdog_notifier_scheduling == 'run_with_cron') {
    watchdog_notifier_do_that_thing();
  }
}


/**
 * Implements hook_cron_job_scheduler_info().
 */
function watchdog_notifier_cron_job_scheduler_info() {
  $info = array();
  $info['watchdog_notifier_do_that_thing'] = array(
    'worker callback' => 'watchdog_notifier_do_that_thing',
  );
  return $info;
}

/**
 * Implements hook_watchdog().
 */
function watchdog_notifier_watchdog(array $log_entry) {
  if (variable_get('watchdog_notifier_use_cron') == 'run_with_hook_watchdog') {
    $watchlist = watchdog_notifier_get_watchlist();

    // If no watchlist values have been defined, just exit.
    if (empty($watchlist)) {
      return;
    }

    // If this message's type & severity have been selected, send an email.
    foreach ($watchlist as $wl_entry) {
      if ($wl_entry->type == $log_entry['type'] && ($wl_entry->severity == -1 || $wl_entry->severity == $log_entry['severity'])) {
        watchdog_notifier_send_message($log_entry, $wl_entry->email);
      }
    }
  }
}

/**
 * Form builder.  Create and display the Watchdog Nofitier config settings form.
 */
function watchdog_notifier_form($form, &$form_state) {
  // ---------------------------------------------------------------------------
  // Watchlist Configuration

  // Gather up all the watchdog log types.
  $type_array;
  $query = db_select('watchdog','w')->fields('w', array('type'))->distinct()->orderBy('type', 'ASC');
  $result = $query->execute();
  foreach ($result as $res) {
    $type_array[$res->type] = $res->type;
  }
  $form_state['types'] = $type_array;

  // Set severity level options.
  $severity_array = array(
    '-1' => t('All messages'),
    '0' => t('Only') . ': ' . t('Emergency'),
    '1' => t('Only') . ': ' . t('Alert'),
    '2' => t('Only') . ': ' . t('Critical'),
    '3' => t('Only') . ': ' . t('Error'),
    '4' => t('Only') . ': ' . t('Warning'),
    '5' => t('Only') . ': ' . t('Notice'),
    '6' => t('Only') . ': ' . t('Informational'),
    '7' => t('Only') . ': ' . t('Debug'),
  );
  $form_state['severities'] = $severity_array;

  $form['watchlist'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Watchlist'),
    '#description' => t('To add an entry to the watchlist, enter the recipient\'s email address and select the type and severity of the watchdog message, then click \'Add to Watchlist.\''),
    '#collapsible' => FALSE,
    '#collapsed'   => FALSE,
  );

  $form['watchlist']['add']['email'] = array(
    '#type'        => 'textfield',
    '#title'       => t('Email Address'),
    '#description' => t('Enter the email address of the recipient for this watchdog notification'),
    '#size'        => 30,
    '#maxlength'   => 60,
  );

  $form['watchlist']['add']['type'] = array(
    '#type'        => 'select',
    '#title'       => t('Watchdog Log Type'),
    '#description' => t('Select the watchdog log type to monitor.'),
    "#options"     => $type_array,
    '#default'     => 0,
  );
  $form['watchlist']['add']['severity'] = array(
    '#type'        => 'select',
    '#title'       => t('Watchdog Log Severity'),
    '#description' => t('Select the watchdog log severity to monitor.'),
    "#options"     => $severity_array,
    '#default'     => 0,
  );

  $form['watchlist']['add']['submit'] = array(
    '#type'  => 'submit',
    '#value' => 'Add To Watchlist',
  );

  // ---------------------------------------------------------------------------
  // Current Watchlist Table
  $form['watchlist']['list'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Current list'),
    '#description' => t('To remove an entry from the watchlist, click the checkbox in the \'Delete\' column, and then click \'Delete From Watchlist\'.'),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );

  $form['watchlist']['list']['entries'] = array(
    '#prefix' => '<div id="watchlist_entries">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => array(t('Email Address'), t('Type'), t('Severity'), t('Added'), t('Delete')),
    '#rows' => array(),
  );

  $watchlist;
  $query = db_select('watchdog_notifier','wn')
    ->fields('wn', array(
        'wn_id',
        'email',
        'type',
        'severity',
        'created',
      )
    )
    ->orderBy('created', 'ASC');
  $result = $query->execute();
  foreach ($result as $res) {
    $watchlist[] = array(
      'wn_id'    => $res->wn_id,
      'email'    => $res->email,
      'type'     => $res->type,
      'severity' => watchdog_notifier_get_severity($res->severity),
      'added'    => format_date($res->created),
    );
  }

  $wl_count = 0;
  if (isset($watchlist)) {
    $wl_count = count($watchlist);
  }

  for ($i = 0; $i < $wl_count; $i++) {
    $wl_email = array(
      '#id'          => 'watchlist-' . $watchlist[$i]['wn_id'] . '-email',
      '#type'        => 'item',
      '#description' => $watchlist[$i]['email'],
    );
    $wl_type = array(
      '#id'          => 'watchlist-' . $watchlist[$i]['wn_id'] . '-type',
      '#type'        => 'item',
      '#description' => $watchlist[$i]['type'],
    );
    $wl_severity = array(
      '#id'          => 'watchlist-' . $watchlist[$i]['wn_id'] . '-severity',
      '#type'        => 'item',
      '#description' => $watchlist[$i]['severity'],
    );
    $wl_added = array(
      '#id'          => 'watchlist-' . $watchlist[$i]['wn_id'] . '-added',
      '#type'        => 'item',
      '#description' => $watchlist[$i]['added'],
    );
    $wl_delete = array(
      '#id'          => $watchlist[$i]['wn_id'],
      '#type'        => 'checkboxes',
      '#options'     => array($watchlist[$i]['wn_id'] => t('')),
    );

    $form['watchlist']['list']['entries'][] = array(
      'email'    => &$wl_email,
      'type'     => &$wl_type,
      'severity' => &$wl_severity,
      'added'    => &$wl_added,
      'delete'   => &$wl_delete,
    );

    $form['watchlist']['list']['entries']['#rows'][] = array(
      array('data' => &$wl_email),
      array('data' => &$wl_type),
      array('data' => &$wl_severity),
      array('data' => &$wl_added),
      array('data' => &$wl_delete),
    );

    unset($wl_email);
    unset($wl_type);
    unset($wl_severity);
    unset($wl_added);
    unset($wl_delete);
  }

  $form['watchlist']['list']['delete'] = array(
    '#type'  => 'submit',
    '#value' => 'Delete From Watchlist',
  );


  // ---------------------------------------------------------------------------
  // Scheduling Configuration
  $watchdog_notifier_scheduling = variable_get('watchdog_notifier_use_cron');

  $form['scheduling'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Scheduling'),
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE,
  );

  $form['scheduling']['use_cron'] = array(
    '#title'    => t('Schedule watchdog notification using...'),
    '#type'     => 'radios',
    '#required' => TRUE,
    '#options'  => array(
      'run_with_hook_watchdog'  => t('Send immediately, no queuing'),
      'run_with_cron'           => t('Drupal Cron'),
      'run_with_scheduler'      => t('Unix-style Cron'),
    ),
    '#default_value' => $watchdog_notifier_scheduling,
  );

  $form['scheduling']['unix_cron'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Unix-style Cron Configuration'),
    '#description' => t('Use standard Unix-style cron to configure when and how
      often the watchdog log is scanned.  These settings take effect only if
      "Unix-style cron" is selected above.  This feature relies on the Job
      Scheduler module, and, in turn, the Job Scheduler module relies on
      Drupal\'s cron.  This means that the minimum time interval available to
      this module is dictated by the time interval configured for this
      installation\'s cron.'),
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE,
  );

  // Next comes a long section where we pull the defaults for the unix-style
  // crontab settings and then fill in the appropriate fields.
  $watchdog_notifier_unix_cron_min       = variable_get('watchdog_notifier_unix_cron_min');
  $watchdog_notifier_unix_cron_hour      = variable_get('watchdog_notifier_unix_cron_hour');
  $watchdog_notifier_unix_cron_day_month = variable_get('watchdog_notifier_unix_cron_day_month');
  $watchdog_notifier_unix_cron_month     = variable_get('watchdog_notifier_unix_cron_month');
  $watchdog_notifier_unix_cron_day_week  = variable_get('watchdog_notifier_unix_cron_day_week');

  $form['scheduling']['unix_cron']['min'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Minutes'),
    '#description'   => t('Enter a specific minute between 0 and 60 or comma
      separate multiple minutes (e.g. "0,15,30,45" for every 15 minutes).'),
    '#size'          => 20,
    '#maxlength'     => 20,
    '#default_value' => $watchdog_notifier_unix_cron_min,
  );

  $form['scheduling']['unix_cron']['hour'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Hour'),
    '#description'   => t('Enter a specific hour between 0 and 23, "*" for every
      hour, or comma separate multiple hours (e.g. "0,6,12,18" for every 6
      hours).'),
    '#size'          => 20,
    '#maxlength'     => 20,
    '#default_value' => $watchdog_notifier_unix_cron_hour,
  );

  $form['scheduling']['unix_cron']['day_month'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Day of the Month'),
    '#description'   => t('Enter a specific day between 1 and 31, "*" for every
      day of the month, or comma separate multiple days of the month (e.g.
      "1,10,20" for the 1st, 10th, and 20th day of the month).'),
    '#size'          => 20,
    '#maxlength'     => 20,
    '#default_value' => $watchdog_notifier_unix_cron_day_month,
  );

  $form['scheduling']['unix_cron']['month'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Month'),
    '#description'   => t('Enter a specific month between 1 and 12, "*" for
      every month, or comma separate multiple months (e.g. "1,6,11" for January,
      June, and November).'),
    '#size'          => 20,
    '#maxlength'     => 20,
    '#default_value' => $watchdog_notifier_unix_cron_month,
  );

  $form['scheduling']['unix_cron']['day_week'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Day of the week'),
    '#description'   => t('Enter a specific day of the week between 0 and 6, "*"
      for every day of the week, or comma/dash separate multiple days (e.g.
      "1-5" for Monday through Friday).'),
    '#size'          => 20,
    '#maxlength'     => 20,
    '#default_value' => $watchdog_notifier_unix_cron_day_week,
  );

  $form['scheduling']['submit'] = array(
    '#type'  => 'submit',
    '#value' => 'Save Scheduling Configuration',
  );

  $watchdog_notifier_last_run   = variable_get('watchdog_notifier_last_run');
  $form['last_run']['description'] = array(
    '#type' => 'item',
    '#description' => t('Last run completed: @time',
      array(
        '@time' => format_date($watchdog_notifier_last_run),
      )
    ),
  );

  $form['run_now'] = array(
    '#type' => 'submit',
    '#value' => t('Scan Watchdog Log Now'),
    '#submit' => array('watchdog_notifier_run_now_submit'),
  );

  return $form;
}


/**
 * Form builder.  Validate the configuration changes.
 *
 * TODO: validate those scheduling variables!
 */
function watchdog_notifier_form_validate($form, &$form_state) {

  // scheduling options
  if ('Save Scheduling Configuration' === $form_state['clicked_button']['#value']) {
    if (empty($form_state['values']['use_cron'])) {
      form_set_error('use_cron', 'A scheduler must be selected.');
    } elseif ('run_with_scheduler' === $form_state['values']['use_cron']) {
      $asterisk = preg_quote('*');
      $cron_times = array(
        'min'       => $form_state['values']['min'],
        'hour'      => $form_state['values']['hour'],
        'day_month' => $form_state['values']['day_month'],
        'month'     => $form_state['values']['month'],
        'day_week'  => $form_state['values']['day_week'],
      );
      foreach ($cron_times as $key => $value) {
        if (preg_match("/$asterisk/", $value)) {
          // Field has an asterisk. Everything's cool.
        } else {
          // 1. Explode on commas
          // 2. Cycle through each element, exploding on dashes.
          // 3. Cycle through each subelement, convert string to number.
          // 4. Make sure number is between a certain value for each field.

          $comma_pieces = explode(',', $value);
          foreach ($comma_pieces as $comma_piece) {
            $dash_pieces = explode('-', $comma_piece);
            foreach ($dash_pieces as $dash_piece) {
              $num = (int) $dash_piece;

              if ('min' === $key && $num > 60) {
                form_set_error($key, 'Invalid value for minutes.');
              }
              if ('hour' === $key && $num > 23) {
                form_set_error($key, 'Invalid value for hours.');
              }
              if ('day_month' === $key && (0 == $num || $num > 31)) {
                form_set_error($key, 'Invalid value for days of the month.');
              }
              if ('month' === $key && (0 == $num || $num > 12)) {
                form_set_error($key, 'Invalid value for months.');
              }
              if ('day_week' === $key && $num > 6) {
                form_set_error($key, 'Invalid value for days of the week.');
              }
            }
          }
        }
      }
    }

  // watchlist options
  } elseif ('Add To Watchlist' === $form_state['clicked_button']['#value']) {
    $last_severity = key( array_slice( $form_state['severities'], -1, 1, TRUE ) );

    // If the email address isn't set, then we're not going to add any new
    // entries.  Thus, we don't need to validate anything else here.
    if (isset($form_state['values']['email'])) {
      if (!valid_email_address($form_state['values']['email'])) {
        form_set_error('email', 'Invalid email address.');
      }
      if (empty($form_state['values']['type'])) {
        form_set_error('type', 'Invalid Watchdog Log Type.');
      }
      if ($form_state['values']['severity'] < -1 || $last_severity < $form_state['values']['severity']) {
        form_set_error('severity', 'Invalid watchdog severity.');
      }
    }
  }
}


/**
 * Form builder.  Save the configuration changes.
 */
function watchdog_notifier_form_submit($form, &$form_state) {
  $config = array();

// dpm($form_state, 'FORM_STATE');

  // ---------------------------------------------------------------------------
  // Scheduling Configuration
  if ('Save Scheduling Configuration' === $form_state['clicked_button']['#value']) {
    variable_set('watchdog_notifier_use_cron', $form_state['values']['use_cron']);

    variable_set('watchdog_notifier_unix_cron_min', $form_state['values']['min']);
    variable_set('watchdog_notifier_unix_cron_hour', $form_state['values']['hour']);
    variable_set('watchdog_notifier_unix_cron_day_month', $form_state['values']['day_month']);
    variable_set('watchdog_notifier_unix_cron_month', $form_state['values']['month']);
    variable_set('watchdog_notifier_unix_cron_day_week', $form_state['values']['day_week']);

    // Create the job data structure to either schedule or delete the job.
    $crontab = $form_state['values']['min'] . ' ' . $form_state['values']['hour'] . ' ' .
      $form_state['values']['day_month'] . ' ' . $form_state['values']['month'] . ' ' .
      $form_state['values']['day_week'];

    $job = array(
      'type'     => 'watchdog_notifier',
      'id'       => variable_get('watchdog_notifier_unix_cron_job_id'),
      'periodic' => TRUE,
      'crontab'  => $crontab,
    );

    // This is where we schedule a new job.
    if ($form_state['values']['use_cron'] == 'run_with_scheduler') {
      JobScheduler::get('watchdog_notifier_do_that_thing')->set($job);

    // This is where we remove from an old job from the scheduler.
    } elseif ($form_state['values']['use_cron'] == 'run_with_cron') {
      JobScheduler::get('watchdog_notifier_do_that_thing')->remove($job);
    }

    drupal_set_message(t('The scheduling configuration has been saved.'));

  // ---------------------------------------------------------------------------
  // Watchlist Configuration
  } elseif ('Add To Watchlist' === $form_state['clicked_button']['#value']) {

    if (isset($form_state['values']['email'])) {
      $record = array(
        'email'    => $form_state['values']['email'],
        'type'     => $form_state['values']['type'],
        'severity' => $form_state['values']['severity'],
        'created'  => REQUEST_TIME,
      );
      drupal_write_record('watchdog_notifier', $record);
      drupal_set_message(t('New entry has been inserted into the watchlist.'));
      $config['added_watchlist_entry'] = $record;
    }

  } elseif ('Delete From Watchlist' === $form_state['clicked_button']['#value']) {
    $num_deleted = 0;
    foreach ($form_state['values']['entries'] as $entry) {
      $key = key($entry['delete']);
      if ($entry['delete'][$key] == $key) {
        // First log what entry is being deleted.
        $query = db_select('watchdog_notifier','wn')
          ->fields('wn', array(
              'email',
              'type',
              'severity',
              'created',
            )
          )
          ->condition('wn_id', $key,'=');
        $result = $query->execute();
        foreach ($result as $res) {
          $config['deleted_watchlist_entries'][] = array(
            'wn_id'    => $key,
            'email'    => $res->email,
            'type'     => $form_state['types'][$res->type],
            'severity' => watchdog_notifier_get_severity($res->severity),
            'added'    => format_date($res->created),
          );
        }
        // Then delete the entry.
        $num_deleted += db_delete('watchdog_notifier')
          ->condition('wn_id', $key)
          ->execute();
      }
    }
    if ($num_deleted > 0) {
      $config['number_of_deleted_entries'] = $num_deleted;

      $entry = 'entry has';
      if ($num_deleted > 1) {
        $entry = 'entries have';
      }

      drupal_set_message(t('@num @entry_has been deleted from the watchlist.', array(
        '@num'       => $num_deleted,
        '@entry_has' => $entry,
      )));
    }
  }

  // ---------------------------------------------------------------------------
  // Print Configuration Changes To Watchdog Log
  $config['clicked_button']             = $form_state['clicked_button']['#value'];
  $config['watchdog_notifier_last_run'] = variable_get('watchdog_notifier_last_run');
  $config['scheduling']                 = $form_state['values']['use_cron'];

  if ($form_state['values']['use_cron'] == 'run_with_scheduler') {
    $config['job_scheduler_settings'] = $job;
    $config['unix_cron_settings']     = array(
      'min'       => $form_state['values']['min'],
      'hour'      => $form_state['values']['hour'],
      'day_month' => $form_state['values']['day_month'],
      'month'     => $form_state['values']['month'],
      'day_week'  => $form_state['values']['day_week'],
    );
  }

  watchdog(
    'watchdog_notifier',
    'Configuration has been updated: <pre>@config</pre>',
    array(
      '@config'  => print_r($config, TRUE),
    ),
    WATCHDOG_INFO
  );
}
