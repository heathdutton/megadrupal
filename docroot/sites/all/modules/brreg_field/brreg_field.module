<?php

/*
 * Implements hook_field_info().
 */
function brreg_field_field_info() {
    return array(
        'brreg_orgno' => array(
            'label' => t('Organization number'),
            'description' => t('This field stores an organization number in the database.'),
            'settings' => array('max_length' => 9),
            'instance_settings' => array(
                'text_processing' => 0,
            ),
            'default_widget' => 'brreg_field',
            'default_formatter' => 'text_default',
            'property_type' => 'brreg_data',
            'property_callbacks' => array('brreg_field_data_property_info_callback'),
        ),
    );
}

/**
 * Implements hook_field_widget_info().
 */
function brreg_field_field_widget_info() {
  return array(
      'brreg_field' => array(
          'label' => t('Text field'),
          'field types' => array('brreg_orgno'),
          'settings' => array('size' => 9),
      ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function brreg_field_field_widget_settings_form($field, $instance) {
    $widget = $instance['widget'];
    $settings = $widget['settings'];

    $form = array();


    return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function brreg_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

    $textfield = $element + array(
        '#type' => 'textfield',
        '#title' => t('Org.no.'),
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => $field['settings']['max_length'],
        '#attributes' => array('class' => array('text-full')),
    );

    if ($instance['settings']['populate']) {
        $mapping = array();
        foreach ($instance['settings']['mapping'] as $key => $map_settings) {
            if ($map_settings['field_name']) {
                $mapping[$key] = $map_settings['field_name'];
            }
        }

        if ($instance['settings']['populate_method'] == 'ajax') {
            $textfield['#ajax'] = array(
                'callback' => 'brreg_field_ajax_callback',
            );
            $textfield['#attached']['js'][] = drupal_get_path('module', 'brreg_field') . '/brreg_field.ajax.js';
        }
        $textfield['#element_validate'][] = '_brreg_field_validate';
        $textfield['#brreg_settings'] = $instance['settings'];
    }
    $element['value'] = $textfield;
    $element['data'] = array(
        '#type' => 'value',
        '#value' => array(),
    );

    return $element;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Will alter any fields which is mapped to a brreg_orgno instance.
 */
function brreg_field_field_widget_form_alter(&$element, &$form_state, $context) {
    if (!isset($element['#entity_type'])) {
        return;
    }

    $brreg_fields = field_read_fields(array('type' => 'brreg_orgno'));
    foreach (field_read_fields(array('type' => 'brreg_orgno')) as $field_config) {
        $instance = field_info_instance($element['#entity_type'], $field_config['field_name'], $element['#bundle']);
        if ($instance) {
            $field_instance = $instance;
            break;
        }
    }
    if (isset($field_instance)) {
        $settings = $field_instance['settings'];
        if (!$settings['populate']) {
            return;
        }
        foreach ($settings['mapping'] as $key => $map_config) {
            $field_name = $map_config['field_name'];
            if ($field_name == $element['#field_name']) {
                if ($settings['populate_method'] == 'silent') {
                    $element['#access'] = FALSE;
                } else {
                    $element['value']['#attributes']['data-brregkey'] = $key;
                }
                if ($map_config['disabled']) {
                    $element['value']['#attributes']['disabled'] = 'disabled';
                }
                break;
            }
        }
    }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function brreg_field_field_instance_settings_form($field, $instance) {
    $settings = $instance['settings'];

    $form['populate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Automatically populate fields based on org.no'),
        '#default_value' => isset($settings['populate']),
    );
    $form['populate_method'] = array(
        '#type' => 'select',
        '#title' => t('Field populate method'),
        '#options' => array(
            'ajax' => t('AJAX'),
            'silent' => t('Silent (hides the mapped fields)'),
        ),
        '#default_value' => isset($settings['populate_method']) ? $settings['populate_method'] : 'ajax',
        '#states' => array(
            'visible' => array(
                ':input[name="instance[settings][populate]"]' => array('checked' => TRUE),
            ),
        ),
    );

    $bundle_fields = field_info_instances($instance['entity_type'], $instance['bundle']);

    // Build option array for the select widget.
    $mappable_fields = array();
    $mappable_fields[] = '(' . t('Unmapped') . ')';
    foreach ($bundle_fields as $field_name => $definition) {
        $mappable_fields[$field_name] = $definition['label'] . ' (' . $definition['widget']['type'] . ')';
    }

    $form['mapping'] = array(
        '#type' => 'fieldset',
        '#title' => t('Field mappings'),
        '#tree' => TRUE,
        '#states' => array(
            'visible' => array(
                ':input[name="instance[settings][populate]"]' => array('checked' => TRUE),
            ),
        ),
    );

    $brreg_fields = _brreg_field_definition();
    foreach ($brreg_fields as $delta => $definition) {
        $field_code = $definition['shortName'];

        $default_values = array(
            'field_name' => 0,
            'disabled' => false,
        );
        if (isset($settings['mapping'][$field_code])) {
            $default_values = $settings['mapping'][$field_code];
        }
        $form['mapping'][$field_code] = array(
            '#type' => 'fieldset',
            '#title' => $definition['name'],
            'field_name' => array(
                '#type' => 'select',
                '#title' => t('Map to field'),
                '#options' => $mappable_fields,
                '#default_value' => $default_values['field_name'],
            ),
            'disabled' => array(
                '#type' => 'checkbox',
                '#title' => t('Disable field editing'),
                '#default_value' => $default_values['disabled'],
                '#states' => array(
                    'invisible' => array(
                        ':input[name="instance[settings][mapping][' . $field_code . '][field_name]"]' => array('value' => 0),
                    ),
                ),
            ),
        );
        if (isset($definition['description']) && !empty($definition['description'])) {
            $form['mapping'][$field_code]['#description'] = t('Field description: %description', array(
                '%description' => $definition['description'],
            ));
        }
    }

    return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - TODO
 */
function brreg_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
      if ($item['value']) {
          // TODO: mod11 check
          if (!is_numeric($item['value']) || strlen($item['value']) !== 9) {
              $errors[$field['field_name']][$langcode][$delta][] = array(
                  'error' => 'brreg_invalid',
                  'message' => t('Invalid organization number'),
              );
          }
      }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function brreg_field_field_is_empty($item, $field) {
  return !isset($item['value']) || $item['value'] === '';
}

/**
 * Implements hook_field_presave().
 */
function brreg_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
    foreach ($items as $delta => $item) {
        if (empty($items[$delta]['data'])) {
            $items[$delta]['data'] = array();
        }
        if (!is_string($items[$delta]['data'])) {
            $items[$delta]['data'] = serialize($items[$delta]['data']);
        }
    }
}

/**
 * Element validation callback.
 *
 * Validates organization number and set values on any mapped fields.
 */
function _brreg_field_validate($element, &$form_state, $form) {
    if (!empty($element['#value'])) {
        $orgno = $element['#value'];

        $value['value'] = $orgno;
        $value['data'] = array();

        if (strlen($orgno) == 9) {
            $response = _brreg_perform_query(array('orgnr' => $orgno));
            if ($response) {
                $value['data'] = array_pop($response);
            } else {
                form_set_error('', t('No data retrieved from brreg. Please check the organization number.'));
            }
        }
        form_set_value($element, $orgno, $form_state);

        foreach ($element['#brreg_settings']['mapping'] as $key => $key_config) {
            if (!$key_config['field_name']) continue;

            // Set field value by force
            if ($key_config['disabled'] || $element['#brreg_settings']['populate_method'] == 'silent') {

                $set_value = array(LANGUAGE_NONE => array(0 => array(
                    'value' => isset($value['data'][$key]) ? $value['data'][$key] : '',
                )));
                form_set_value($form[$key_config['field_name']], $set_value, $form_state);
            }
        }
    }
}

/**
 * AJAX callback for organization number field.
 */
function brreg_field_ajax_callback($form, &$form_state) {
    $value = $form_state['triggering_element']['#value'];
    $brreg_data = array();

    if (is_numeric($value) && strlen($value) == 9) {
        $response = _brreg_perform_query(array(
            'orgnr' => $value,
        ));
        if ($response) {
            $brreg_data = array_shift($response);
        } else {
            $error = t('No data retrieved from brreg. Please check the organization number.');
        }
    } else {
        $error = t('Invalid organization number');
    }

    if (!$brreg_data) {
        // Clear all fields and display error message.
        foreach(_brreg_field_definition() as $definition) {
            $brreg_data[$definition['shortName']] = '';
        }
    }
    $commands[] = array(
        'command' => 'brreg_populate',
        'data' => $brreg_data,
        'error' => $error,
    );
    return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Makes a request to remote webservice.
 *
 * @param array $query
 * @param int $page
 * @return array
 */
function _brreg_perform_query($query = array(), $page = 1) {
    $url = 'http://hotell.difi.no/api/json/brreg/enhetsregisteret?';
    $url .= drupal_http_build_query($query);

    $response = drupal_http_request($url);
    if ($response->code !== '200') {
        // Throw exception?
        return array();
    }
    $json = json_decode($response->data, true);

    return $json['entries'];
}

/**
 * Returns definition for all available fields.
 *
 * @param bool $force_reload
 * @return mixed|null
 */
function _brreg_field_definition($force_reload = FALSE) {
    $field_definition = variable_get('brreg_field_definition', array());

    if (empty($field_definition) || $force_reload) {
        $url = 'http://hotell.difi.no/api/json/brreg/enhetsregisteret/fields';
        $response = drupal_http_request($url);
        $field_definition = json_decode($response->data, true);

        variable_set('brreg_field_definition', $field_definition);
    }
    return $field_definition;
}

/**
 *
 */
function brreg_field_data_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
    $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

    unset($property['query callback']);
    $property['property info']['value'] = array(
        'type' => 'text',
        'label' => t('Organization number'),
        'setter callback' => 'entity_property_verbatim_set',
        'getter callback' => 'entity_property_verbatim_get',
    );
}
