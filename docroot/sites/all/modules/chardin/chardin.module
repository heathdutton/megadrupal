<?php

/**
 * @file
 * General functions and hook implementations.
 *
 * @see http://heelhook.github.io/chardin.js/
 */

/**
 * Implements hook_init().
 */
function chardin_init() {
	if(module_exists('context')){
		$plugin = context_get_plugin('reaction', 'chardin_add');
  	if($plugin) $plugin->execute();
	} else {
		libraries_load('chardin');
		drupal_add_js(drupal_get_path('module', 'chardin') . '/js/chardin.drupal.js',
			array('type' => 'file', 'scope' => 'footer', 'weight' => JS_DEFAULT)
		);
	}
}

/**
 * Implements hook_theme().
 * Register a module (or theme's) theme implementations.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_theme/7
 */
function chardin_theme($existing, $type, $theme, $path) {
  return array(
    'chardin_demo' => array(
      'variables' => array(),
      'template' => 'templates/chardin-demo',
    ),
		'chardin_link' => array(
      'variables' => array('link_title' => NULL, 'options' => array()),
      'template' => 'templates/chardin-link',
      'file' => 'chardin.theme.inc',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function chardin_libraries_info() {
  $libraries['chardin'] = array(
    'name' => 'Chardin',
    'vendor url' => 'http://heelhook.github.io/chardin.js/',
    'download url' => 'https://github.com/heelhook/chardin.js.git',
    'version' => '',
    'files' => array(
      'js' => array(
        'chardinjs.min.js',
      ),
      'css' => array(
        'chardinjs.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'chardinjs.min.js',
          ),
          'css' => array(
            'chardinjs.css',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'chardinjs.js',
          ),
          'css' => array(
            'chardinjs.css',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_context_plugins().
 * Let context know about plugin implementations.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_context_plugins/7
 */
function chardin_context_plugins() {
  $plugins = array();

  $plugins['chardin_context_reaction_add'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'chardin') . '/plugins/context',
      'file' => 'chardin_context_reaction_add.inc',
      'class' => 'chardin_context_reaction_add',
      'parent' => 'context_reaction',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_context_registry().
 * Registry hook for conditions & reactions.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_context_registry/7
 */
function chardin_context_registry() {
  return array(
    'reactions' => array(
      'chardin_add' => array(
        'title' => t('Chardin.js'),
        'description' => t('Add Chardin code to the page.'),
        'plugin' => 'chardin_context_reaction_add',
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 * Tell CTools about our module.
 *
 */
function chardin_ctools_plugin_api($module, $api) {
  if($module !== 'context') return FALSE;

  switch($api) {
    case 'context':
      return array('version' => 3);
    case 'plugins':
      return array('version' => 3, 'path' => drupal_get_path('module', 'chardin') . '/plugins/context');
    default:
      return FALSE;
  }
}

/**
 * Implements hook_context_default_contexts().
 * Provide default module's contexts.
 *
 * @return array
 */
function chardin_context_default_contexts() {
  $export = array();

  $context = new stdClass();
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->api_version = 3;
  $context->name = 'chardin_demo_default';
  $context->description = '';
  $context->tag = 'chardin';
  $context->conditions = array(
    'path' => array(
      'values' => array(
        'admin/config/user-interface/chardin' => 'admin/config/user-interface/chardin',
        'admin/config/user-interface/chardin/default' => 'admin/config/user-interface/chardin/default',
      ),
    ),
  );
  $context->reactions = array(
    'chardin_add' => array(
			'auto_start' => 0,
			'elements' => array(
				array(
					'toggle' => 1,
					'element' => '#chardin-toggle',
					'position' => 'none',
					'intro' => '',
				),
				array(
					'toggle' => 1,
					'element' => '#opentour',
					'position' => 'none',
					'intro' => '',
				),
				array(
					'toggle' => 0,
					'element' => '.jumbotron h1',
					'position' => 'right',
					'intro' => 'Project title',
				),
				array(
					'toggle' => 0,
					'element' => 'img.chardin',
					'position' => 'right',
					'intro' => 'An awesome 18th-century painter, who found beauty in everyday, common things.',
				),
				array(
					'toggle' => 0,
					'element' => '.jumbotron a.primary',
					'position' => 'left',
					'intro' => 'This button toggles the overlay, you can click it, even when the overlay is visible',
				),
				array(
					'toggle' => 0,
					'element' => '.jumbotron .credits',
					'position' => 'right',
					'intro' => 'Author of this plugin, aka Pablo Fernandez',
				),
				array(
					'toggle' => 0,
					'element' => '.jumbotron .links',
					'position' => 'bottom',
					'intro' => 'Links to Github, Twitter, etc.',
				),
			),
		),
  );
  $context->condition_mode = 0;

	// Translatables
	// Included for use with string extractors like potx.
  t('chardin');

  $export[$context->name] = $context;
	return $export;
}

/**
 * Implements hook_context_page_reaction().
 */
function chardin_context_page_reaction(){
  if ($plugin = context_get_plugin('reaction', 'chardin_add')) {
    $plugin->execute();
  }
}

/**
 * Implements hook_enable().
 * Perform necessary actions after module is enabled.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_enable/7
 */
function chardin_enable() {
  // We need this to make context detect new reaction handler
  drupal_flush_all_caches();
}

/**
 * Implements hook_menu().
 *
 * @see
 */
function chardin_menu() {
  $items = array();

  $items['admin/config/user-interface/chardin'] = array(
    'title' => 'Chardin Demo',
    'page callback' => 'theme',
    'page arguments' => array('chardin_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/user-interface/chardin/default'] = array(
    'title' => 'Chardin Demo (Start chardin automatically)',
    'page callback' => 'theme',
    'page arguments' => array('chardin_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Perform necessary actions after module is enabled.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_form_FORM_ID_alter/7
 */
function chardin_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state, $form_id) {
	//Just to make sure we are on the ctools right form
	if($form_id == 'ctools_export_ui_edit_item_form'){
		//grab elements from form_state
		$values = $form_state['item']->reactions['chardin_add'];
		
		$form['reactions']['plugins']['chardin_add']['#tree'] = TRUE;
		$form['reactions']['plugins']['chardin_add']['elements'] = array(
			'#type' => 'fieldset',
			'#title' => t('Elements'),
			'#collapsible' => FALSE, 
			'#collapsed' => FALSE,
			'#prefix' => '<div id="elements-wrapper">',
			'#suffix' => '</div>',
			'#weight'=> 1,
		);
		
		$form['reactions']['plugins']['chardin_add']['auto_start'] = array(
			'#type' => 'checkbox',
			'#title' => t('Toggle Element'),
			'#default_value' => $values['auto_start'],
		);
		
		// Build the fieldset with the proper number of names. We'll use
		// $form_state['num_elements'] to determine the number of elements to build.
		if (empty($form_state['num_elements'])) {
			if(empty($values['elements'])){
				$form_state['num_elements'] = 1;
				$values['elements'][0] = array('element' => '','position' => '','intro' => '',);
			} else {
				//we don't need these to set values;
				unset($values['elements']['add_element']);
				unset($values['elements']['remove_element']);
				
				//count elements;
				$form_state['num_elements'] = count($values['elements']);
			}
		}
		
		for ($i = 0; $i < $form_state['num_elements']; $i++) {
			$form['reactions']['plugins']['chardin_add']['elements'][$i] = array(
				'#type' => 'fieldset',
				'#collapsible' => FALSE, 
				'#collapsed' => FALSE,
				'#prefix' => '<div id="element-'.$i.'-wrapper">',
				'#suffix' => '</div>',
				'#weight'=> $i,
			);
			
			$form['reactions']['plugins']['chardin_add']['elements'][$i]['toggle'] = array(
				'#type' => 'checkbox',
				'#title' => t('Toggler'),
				'#default_value' => $values['elements'][$i]['toggle'],
				'#description' => 'This element toggles Chardin.js',
			);
			
			$form['reactions']['plugins']['chardin_add']['elements'][$i]['element'] = array(
				'#type' => 'textfield',
				'#title' => t('Element'),
				'#default_value' => $values['elements'][$i]['element'],
			);
			
			$form['reactions']['plugins']['chardin_add']['elements'][$i]['position'] = array(
				'#type' => 'select',
				'#title' => t('Position'),
				'#default_value' => $values['elements'][$i]['position'],
				'#options' => array(
					'none' => '<none>',
					'top' => 'Top',
					'right' => 'Right',
					'bottom' => 'Bottom',
					'left' => 'Left',
				),
			);
			
			$form['reactions']['plugins']['chardin_add']['elements'][$i]['intro'] = array(
				'#type' => 'textarea',
				'#title' => t('Intro'),
				'#default_value' => $values['elements'][$i]['intro'],
			);
		}
		// this needs work, it would be ideal to remove specific elements instead of the last one.
		if ($form_state['num_elements'] > 1) {
			$form['reactions']['plugins']['chardin_add']['elements']['remove_element'] = array(
				'#type' => 'submit',
				'#value' => t('Remove last one'),
				'#weight' => 99,
				'#submit' => array('chardin_context_reaction_element_remove'),
				'#ajax' => array(
					'callback' => 'chardin_context_reaction_element_callback',
					'wrapper' => 'elements-wrapper',
				),
			);
		}
		
		$form['reactions']['plugins']['chardin_add']['elements']['add_element'] = array(
			'#type' => 'submit',
			'#value' => t('Add one more'),
			'#submit' => array('chardin_context_reaction_element_add'),
			'#weight' => 100,
			'#ajax' => array(
				'callback' => 'chardin_context_reaction_element_callback',
				'wrapper' => 'elements-wrapper',
			),
		);
		
		return $form;
	}
}

/**
 * Implements callback for chardin context reaction form.
 *
 * @see
 */
function chardin_context_reaction_element_callback($form, $form_state) {
  return $form['reactions']['plugins']['chardin_add']['elements'];
}

/**
 * Implements #submit for chardin context reaction form to add element.
 *
 * @see
 */
function chardin_context_reaction_element_add($form, &$form_state) {
  $form_state['num_elements']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements #submit for chardin context reaction form to remove element.
 *
 * @see
 */
function chardin_context_reaction_element_remove($form, &$form_state) {
  if ($form_state['num_elements'] > 1) {
    $form_state['num_elements']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_block_info().
 * Define all blocks provided by the module.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_block_info/7
 */
function chardin_block_info() {
  $blocks['chardin_link'] = array(
    'info' => t('Chardin Toggle Link'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * Return a rendered or renderable view of a block.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_block_view/7
 */
function chardin_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'chardin_link':
      $block['subject'] = '<none>';
      $block['content'] = array(
        '#theme' => 'chardin_link',
      );

      break;
  }
  return $block;
}