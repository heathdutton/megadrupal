<?php
/**
 * @file
 * Provides install and requirements routines.
 */

/**
 * Implements hook_requirements().
 */
function ghpages_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $t = get_t();
    $library = libraries_detect('Git.php');

    if (empty($library['installed'])) {
      $requirements['gitphp_library'] = array(
        'title' => $t('Git.php library'),
        'value' => $t(
          'At least @a',
          array('@a' => GHPAGES_GITPHP_MIN_PLUGIN_VERSION)
        ),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('You need to download !gitphp, extract the archive and place the Git.php directory in the %path directory on your server.',
          array(
            '!gitphp' => l($t('Git.php library'), $library['download url']), '%path' => 'sites/all/libraries')
        ),
      );
    }
    elseif (version_compare($library['version'], GHPAGES_GITPHP_MIN_PLUGIN_VERSION, '>=')) {
      $requirements['gitphp_library'] = array(
        'title' => $t('Git.php library'),
        'severity' => REQUIREMENT_OK,
        'value' => $library['version'],
      );
    }
    else {
      $requirements['gitphp_library'] = array(
        'title' => $t('Git.php library'),
        'value' => $t(
          'At least @a',
          array('@a' => GHPAGES_GITPHP_MIN_PLUGIN_VERSION)
        ),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('You need to download a later version of !gitphp and replace the old version located in the %path directory on your server.',
          array(
            '!gitphp' => l($t('Git.php library'), $library['download url']), '%path' => $library['library path'])
        ),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function ghpages_uninstall() {
  // Clear variables.
  $name = 'ghpages_';
  db_delete('variable')
        ->condition('name', db_like($name) . '%', 'LIKE')
            ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}
