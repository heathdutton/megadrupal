<?php
/**
 * @file
 * Core functions for the BitTorrent Sync fields module.
 */

/**
 * Include additional files.
 */
$dirname = dirname(__FILE__) . '/includes';
$includes = file_scan_directory($dirname, '/.inc$/');
foreach (module_list() as $module) {
  $file = "{$dirname}/{$module}.inc";
  if (isset($includes[$file])) {
    require_once $file;
  }
}

/**
 * Implements hook_cron().
 */
function btsync_fields_cron() {
  $fields = db_select('btsync_fields', 'b')
    ->fields('b')
    ->execute()
    ->fetchAll();
  foreach ($fields as $field) {
    extract((array) $field);
    $files = btsync_fields_get_files($secret);

    // Only process entity if files have changed.
    if ($md5 != md5(serialize($files))) {
      $entities = entity_load($entity_type, array($entity_id));
      $entity = reset($entities);
      $btsync_field = btsync_fields_get_field($entity, $entity_type, $field_name);

      $function = "btsync_fields_{$btsync_field['widget']}_presave";
      if (function_exists($function)) {
        $function($entity->{$field_name}, $btsync_field);
      }
      btsync_fields_entity_update($entity, $entity_type);
      field_attach_update($entity_type, $entity);
    }
  }
}

/**
 * Implements hook_element_info().
 */
function btsync_fields_element_info() {
  $types['btsync_field'] = array(
    '#input' => TRUE,
    '#process' => array('btsync_fields_element_process'),
  );
  return $types;
}

/**
 * Implements hook_field_widget_info().
 */
function btsync_fields_field_widget_info() {
  $items = module_invoke_all('btsync_fields_field_widget_info');
  drupal_alter('btsync_fields_field_widget_info', $items);
  return $items;
}

/**
 * Implements hook_field_widget_form().
 */
function btsync_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $function = "btsync_fields_{$instance['widget']['type']}_field_widget_form";
  if (function_exists($function)) {
    return $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  }
  return $element;
}

/**
 * Implements hook_field_attach_submit().
 *
 * Ensures that the BTSync key is attached to the entity for processing.
 */
function btsync_fields_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  $btsync_fields = btsync_fields_get_fields($entity, $entity_type);
  foreach ($btsync_fields as $field_name => $btsync_field) {
    if (isset($form_state['values'][$field_name][$btsync_field['langcode']][0]['btsync_field']['secret'])) {
      $secret = $form_state['values'][$field_name][$btsync_field['langcode']][0]['btsync_field']['secret'];
      $entity->{$field_name}['#secret'] = $secret;
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function btsync_fields_entity_load($entities, $entity_type) {
  $results = db_select('btsync_fields', 'b')
    ->fields('b')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', array_keys($entities))
    ->execute()
    ->fetchAll();
  foreach ($results as $result) {
    $entities[$result->entity_id]->{$result->field_name}['#secret'] = $result->secret;
  }
}

/**
 * Implements hook_entity_presave().
 */
function btsync_fields_entity_presave($entity, $entity_type) {
  $btsync_fields = btsync_fields_get_fields($entity, $entity_type, TRUE);
  foreach ($btsync_fields as $field_name => $btsync_field) {
    if (btsync_fields_prepare_folder($btsync_field['secret'])) {
      $function = "btsync_fields_{$btsync_field['widget']}_presave";
      if (function_exists($function)) {
        $function($entity->{$field_name}, $btsync_field);
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function btsync_fields_entity_insert($entity, $entity_type) {
  $btsync_fields = btsync_fields_get_fields($entity, $entity_type);
  foreach ($btsync_fields as $field_name => $btsync_field) {
    $files = btsync_fields_get_files($btsync_field['secret']);
    $record = array(
      'entity_type' => $btsync_field['entity_type'],
      'bundle_name' => $btsync_field['bundle_name'],
      'entity_id' => $btsync_field['entity_id'],
      'field_name' => $field_name,
      'secret' => $btsync_field['secret'],
      'md5' => md5(serialize($files)),
    );
    drupal_write_record('btsync_fields', $record);
  }
}

/**
 * Implements hook_entity_update().
 */
function btsync_fields_entity_update($entity, $entity_type) {
  $btsync_fields = btsync_fields_get_fields($entity, $entity_type);
  foreach ($btsync_fields as $field_name => $btsync_field) {
    db_delete('btsync_fields')
      ->condition('entity_type', $btsync_field['entity_type'])
      ->condition('entity_id', $btsync_field['entity_id'])
      ->condition('field_name', $field_name)
      ->execute();
  }
  btsync_fields_entity_insert($entity, $entity_type);
}

/**
 * Process callback for 'btsync_field' element.
 */
function btsync_fields_element_process($element, &$form_state, $form) {
  $wrapper = 'edit-' . str_replace('_', '-', $element['#parents'][0]) . '-btsync-key-wrapper';
  $element['#type'] = 'container';
  $element['#prefix'] = "<div id='{$wrapper}'>";
  $element['#suffix'] = '</div>';

  $element['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#default_value' => $element['#default_value'],
  );

  $element['generate'] = array(
    '#type' => 'submit',
    '#value' => t('Generate secret'),
    '#submit' => array('btsync_fields_element_submit'),
    '#ajax' => array(
      'callback' => 'btsync_fields_element_ajax',
      'wrapper' => $wrapper,
    ),
  );

  return $element;
}

/**
 * Submit callback for 'btsync_field' element.
 */
function btsync_fields_element_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;

  list($field_name, $langcode, $delta, $key) = $form_state['triggering_element']['#array_parents'];

  $secrets = btsync_method_callback('get_secrets');
  $form_state['values'][$field_name][$langcode][$delta][$key]['secret'] = $secrets->read_write;
}

/**
 * Ajax callback for 'btsync_field' element.
 */
function btsync_fields_element_ajax($form, &$form_state) {
  list($field_name, $langcode, $delta, $key) = $form_state['triggering_element']['#array_parents'];
  $form[$field_name][$langcode][$delta][$key]['secret']['#value'] = $form_state['values'][$field_name][$langcode][$delta][$key]['secret'];
  return $form[$field_name][$langcode][$delta][$key];
}

/**
 * Returns the stored BTSync key for the supplied field instance.
 */
function btsync_fields_get_secret($entity, $entity_type, $field_name, $reset = FALSE) {
  $secret = &drupal_static(__FUNCTION__, array());

  $ids = entity_extract_ids($entity_type, $entity);
  list($entity_id, $vid, $bundle_name) = $ids;

  array_unshift($ids, $entity_type);
  $id = serialize($ids);

  if (!isset($secret[$id]) || empty($secret[$id]) || $reset) {
    $secret[$id] = db_select('btsync_fields', 'b')
      ->fields('b', array('secret'))
      ->condition('entity_type', $entity_type)
      ->condition('entity_id', $entity_id)
      ->condition('field_name', $field_name)
      ->execute()
      ->fetchField(0);
  }

  return $secret[$id];
}

/**
 * Return single BTSync field.
 */
function btsync_fields_get_field($entity, $entity_type, $field_name) {
  $fields = btsync_fields_get_fields($entity, $entity_type);
  return isset($fields[$field_name]) ? $fields[$field_name] : array();
}

/**
 * Return all BTSync fields.
 */
function btsync_fields_get_fields($entity, $entity_type, $reset = FALSE) {
  $fields = &drupal_static(__FUNCTION__, array());

  $ids = entity_extract_ids($entity_type, $entity);
  list($entity_id, $vid, $bundle_name) = $ids;

  array_unshift($ids, $entity_type);
  $id = serialize($ids);

  if (!isset($fields[$id]) || empty($fields[$id]) || $reset) {
    $return = array();

    $instances = field_info_instances($entity_type, $bundle_name);
    foreach ($instances as $field_name => $instance) {
      if (strpos($instance['widget']['type'], 'btsync_fields_') === 0) {
        $langcode = field_language($entity_type, $entity, $field_name);
        $fields[$id][$field_name] = array(
          'bundle_name' => $bundle_name,
          'entity_id' => $entity_id,
          'entity_type' => $entity_type,
          'field_name' => $field_name,
          'langcode' => $langcode,
          'instance' => field_info_instance($entity_type, $field_name, $bundle_name),
          'widget' => $instance['widget']['type'],
        );
        if (isset($entity->{$field_name}['#secret'])) {
          $fields[$id][$field_name]['secret'] = $entity->{$field_name}['#secret'];
        }
        $return[$field_name] = $fields[$id][$field_name];

        if (!isset($fields[$id][$field_name]['secret'])) {
          unset($fields[$id][$field_name]);
        }
      }
    }
  }
  else {
    $return = isset($fields[$id]) ? $fields[$id] : array();
  }

  return $return;
}

/**
 * Return files from BTSync key.
 */
function btsync_fields_get_files($secret, $reset = FALSE) {
  $files = &drupal_static(__FUNCTION__, array());
  if (!isset($files[$secret]) || empty($files[$secret]) || $reset) {
    $files[$secret] = btsync_method_callback('get_files', array('secret' => $secret));
  }
  return $files[$secret];
}

/**
 * Return files from BTSync key.
 */
function btsync_fields_get_folder($secret, $reset = FALSE) {
  $folders = &drupal_static(__FUNCTION__, array());
  if (!isset($folders[$secret]) || empty($folders[$secret]) || $reset) {
    $folders[$secret] = btsync_method_callback('get_folders', array('secret' => $secret));
    if (!empty($folders[$secret])) {
      $folders[$secret] = reset($folders[$secret]);
    }
  }
  return $folders[$secret];
}

/**
 * Prepare folder and set BTSync key.
 */
function btsync_fields_prepare_folder($secret) {
  $folder = btsync_fields_get_folder($secret);

  if (empty($folder)) {
    $destination = "private://btsync_fields/{$secret}";

    if (file_prepare_directory($destination, FILE_MODIFY_PERMISSIONS | FILE_CREATE_DIRECTORY)) {
      $response = btsync_method_callback('add_folder', array(
        'dir' => drupal_realpath($destination),
        'secret' => $secret,
      ));
      return $destination;
    }

    return FALSE;
  }

  return $folder->dir;
}
