<?php

/**
 * @file
 * Tests for Drupal Queue. Run with Simpletest module.
 * http://drupal.org/project/simpletest
 */

/**
 * Test the basic queue functionality.
 * Test script logic gratefully adapted from beanstalkd module.
 */
class StompTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Stomp Queue',
      'description' => 'Queues and dequeues a set of items to check the basic queue functionality.',
      'group' => 'Drupal Queue',
    );
  }
  
  public function setUp() {
    parent::setUp('stomp');
  }
  
  
  /**
   * Queues and dequeues a set of items to check the basic queue functionality.
   */
  function testQueue() {
    // Set random queues to use STOMP
    $name1 = $this->randomName();
    $name2 = $this->randomName();
    variable_set('queue_class_' . $name1, 'StompQueue');
    variable_set('queue_class_' . $name2, 'StompQueue');
    
    $name1_settings = array(
      'headers' => array(
        // Set queues to be non persistent so that we don't clutter up AMQ.
        'persistent' => 'false',
        'priority' => '5',
      ),
    );
    
    $name2_settings = array(
      'headers' => array(
        // Set queues to be non persistent so that we don't clutter up AMQ.
        'persistent' => 'false',
        'priority' => '5',
      ),
    );
    
    variable_set('stomp_queue_' . $name1, $name1_settings);
    variable_set('stomp_queue_' . $name2, $name2_settings);

    $queue1 = DrupalQueue::get($name1);
    $queue1->createQueue();
    $queue2 = DrupalQueue::get($name2);
    $queue2->createQueue();
    
    // Create four items.
    $data = array();
    for ($i = 0; $i < 4; $i++) {
      $data[] = array($this->randomName() => $this->randomName());
    }

    // Queue items 1 and 2 in the queue1.
    $this->assertTrue($queue1->createItem($data[0]), t('Adding 1st item to Queue 1'));
    $this->assertTrue($queue1->createItem($data[1]), t('Adding 2nd item to Queue 1'));
    
    // Retrieve two items from queue1.
    $items = array();
    $new_items = array();

    $items[] = $item = $queue1->claimItem();
    $new_items[] = $item->data;
    
    $items[] = $item = $queue1->claimItem();
    $new_items[] = $item->data;
    
    // First two dequeued items should match the first two items we queued.
    $score = $this->queueScore($data, $new_items);
    $this->assertEqual($score, 2, t('Two items matched - score of @score', array('@score' => $score)));

    // There should be no duplicate items.
    $this->assertEqual($this->queueScore($new_items, $new_items), 2, t('Two items matched - no duplicates claimed'));

    // Delete all items from queue1.
    foreach ($items as $item) {
      $queue1->deleteItem($item);
    }
    
    // @TODO: Verify that no items can be claimed from the queue.
    // This following assertion will always "pass" as the StompQueue cannot 
    // determine the number of items on the queue.
    
    // Check that both queues are empty.
    $this->assertFalse($queue1->numberOfItems(), t('Queue 1 is empty'));
    $this->assertFalse($queue2->numberOfItems(), t('Queue 2 is empty'));
  }
  
  /**
   * This function returns the number of equal items in two arrays.
   */
  function queueScore($items, $new_items) {
    $score = 0;
    foreach ($items as $item) {
      foreach ($new_items as $new_item) {
        if ($item === $new_item) {
          $score++;
        }
      }
    }
    return $score;
  }
  
}