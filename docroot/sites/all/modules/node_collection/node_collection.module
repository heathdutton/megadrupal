<?php
/**
 * @file
 * Node Collection
 * =================
 * Node Collection is a module that acts as a collector for node_types. It can
 * be used as a micro site creator which has couple of simple pages.
 */

// Defines.
define('NODE_COLLECTION_SETTINGS_PATH', 'admin/config/content/node_collection_settings');
define('NODE_COLLECTION_CREATE_PATH', NODE_COLLECTION_SETTINGS_PATH . '/create');
define('NODE_COLLECTION_EDIT_DELETE_PATH', NODE_COLLECTION_SETTINGS_PATH . '/list');
define('NODE_COLLECTION_EDIT_DELETE_PATH_ACTION', NODE_COLLECTION_SETTINGS_PATH . '/action');
define('NODE_COLLECTION_EDIT_DELETE_RELATIONSHIP_INSTANCES_PATH', NODE_COLLECTION_SETTINGS_PATH . '/relationship-instances');
define('PARENT_ID_QUERY_STRING', 'parent_node_id');

// Add the required API function file.
require_once 'api/node_collection.api.inc';

/**
 * Implements hook_menu().
 */
function node_collection_menu() {
  // Define the empty array for the items.
  $items = array();
  // Get the module path so that we can use it with the file path.
  $module_path = drupal_get_path('module', 'node_collection');

  $items[NODE_COLLECTION_CREATE_PATH] = array(
    'title' => 'Define a Parent > Child relationship',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_collection_admin_settings_form'),
    'access arguments' => array('administer node collections'),
    'description' => 'Allow the administrator to create the node collections.',
    'file' => 'node_collection.admin.inc',
    'file path' => "$module_path/admin",
  );

  $items[NODE_COLLECTION_EDIT_DELETE_PATH] = array(
    'title' => 'Edit or Delete relationship',
    'page callback' => 'node_collection_admin_settings_saved_node_types',
    'access arguments' => array('administer node collections'),
    'description' => 'Allow the administrator to edit or delete the node collections.',
    'file' => 'node_collection.admin.inc',
    'file path' => "$module_path/admin",
  );

  $items[NODE_COLLECTION_EDIT_DELETE_PATH_ACTION . '/%/%'] = array(
    'title' => 'Edit or Delete relationship',
    'page callback' => 'node_collection_perform_action',
    'page arguments' => array(5, 6),
    'access arguments' => array('administer node collections'),
    'description' => 'Edit or delete the node collections.',
    'type' => MENU_CALLBACK,
    'file' => 'node_collection.admin.inc',
    'file path' => "$module_path/admin",
  );

  $items[NODE_COLLECTION_EDIT_DELETE_RELATIONSHIP_INSTANCES_PATH . '/add/%node'] = array(
    'title' => 'Add Node Relationship Instance',
    'page callback' => '_node_collection_create_children',
    'page arguments' => array(6),
    'access arguments' => array('administer node content'),
    'description' => 'Add child relationship instances.',
    'type' => MENU_LOCAL_ACTION,
    'file' => 'node_collection_node_forms.admin.helper.inc',
    'file path' => "$module_path/admin",
  );

  $items[NODE_COLLECTION_EDIT_DELETE_RELATIONSHIP_INSTANCES_PATH . '/edit/%node/%node'] = array(
    'title' => 'Edit Node Relationship Instances',
    'page callback' => '_node_collection_get_children_edit_links',
    'page arguments' => array(6, 7),
    'access arguments' => array('administer node content'),
    'description' => 'Add child relationship instances.',
    'type' => MENU_LOCAL_ACTION,
    'file' => 'node_collection_node_forms.admin.helper.inc',
    'file path' => "$module_path/admin",
  );

  $items[NODE_COLLECTION_SETTINGS_PATH . '/administer_menu_links/%'] = array(
    'title' => 'Administer Associated Menu Links',
    'page callback' => '_node_collection_administer_associated_menu_links',
    'page arguments' => array(5),
    'access arguments' => array('administer menu'),
    'description' => 'Navigate the user to the associated menu edit page.',
    'type' => MENU_LOCAL_ACTION,
    'file' => 'node_collection_node_forms.admin.helper.inc',
    'file path' => "$module_path/admin",
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function node_collection_permission() {
  return array(
    'administer node collections' => array(
      'title' => t('Administer Node Collections'),
      'description' => t('Administer node collection so that you can create, edit or delete parent child relationships'),
    ),
    'administer node content' => array(
      'title' => t('Administer Node Contents'),
      'description' => t('Add/Edit/Delete node contents for the relationships already defined'),
    ),
  );
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function node_collection_pathauto_alias_alter(&$alias, array &$context) {
  // Get the helper function file.
  require_once 'admin/node_collection_node_forms.admin.helper.inc';

  // Get the node object.
  $node_object = isset($context['data']['node']) ? $context['data']['node'] : NULL;
  $node_object = isset($node_object->nid) ? $node_object : NULL;

  if ($node_object) {
    try {
      $parent_nid = node_collection_api_is_child_instance($node_object->nid);

      // Update the path aliases.
      if ($parent_nid) {
        $alias = _node_collection_get_child_path_alias($parent_nid, $alias);
      }
    }
    catch (Exception $alias_update_exception) {
      watchdog_exception('node_collection', $alias_update_exception);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function node_collection_node_presave($node) {
  // Get the helper function file.
  require_once 'admin/node_collection_node_forms.admin.helper.inc';

  // We change the path alias if a user has entered a custom path alias
  // and have not appended the parent path.
  if (isset($node->nid) && is_numeric($node->nid)) {
    try {
      $parent_nid = node_collection_api_is_child_instance($node->nid);

      // Get the path alias.
      if ($parent_nid && isset($node->path['alias']) && empty($node->path['alias']) == FALSE) {
        $node->path['alias'] = _node_collection_get_child_path_alias($parent_nid, $node->path['alias']);
      }
    }
    catch (Exception $alias_update_exception) {
      watchdog_exception('node_collection', $alias_update_exception);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function node_collection_node_insert($node) {
  // Require the helper functions file.
  require_once 'admin/node_collection_node_forms.admin.helper.inc';

  // See if we have a query param with the parent node id in it.
  $parent_id = isset($_GET[PARENT_ID_QUERY_STRING]) ? trim($_GET[PARENT_ID_QUERY_STRING]) : NULL;
  $parent_node_object = (isset($parent_id) && is_numeric($parent_id)) ? node_load($parent_id) : NULL;

  // See if this is actually a proper node id.
  if (isset($parent_node_object)) {
    try {
      node_collection_api_add_relationship_instance($parent_node_object, $node);
      // Load include the helper file.
      node_collection_add_menu_link_item_to_parent($parent_node_object, $node);
    }
    catch (Exception $relationship_create_exception) {
      drupal_set_message(t('Error occurred while trying to save the parent > child relationship instance'), 'error', TRUE);
      watchdog_exception('node_collection', $relationship_create_exception);
      // Delete the child node.
      node_delete($node->nid);
    }
  }

  // Add a menu item to the parent.
  try {
    // Is parent node.
    $is_parent = node_collection_api_is_parent_instance($node->nid);

    // Check if parent.
    if ($is_parent) {
      $menu = array(
        'menu_name' => "nc-$node->nid",
        'title' => $node->title,
        'description' => "Menu for the '$node->title' node collection",
      );

      // Add the menu.
      menu_save($menu);

      // Add the menu link to the main page/overview page.
      node_collection_add_menu_link_item_to_parent($node, $node);
    }
  }
  catch (Exception $exp) {
    watchdog_exception('node_collection', $exp);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * This will add the local tabs to create and edit the child node items.
 */
function node_collection_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Check if the root path is leading to a node edit.
  if ($root_path == "node/%/edit") {
    $node_object = NULL;
    $page_arguments = isset($router_item['page_arguments']) ? $router_item['page_arguments'] : NULL;

    // Get the node object in the argument.
    if ($page_arguments && empty($page_arguments) == FALSE) {
      foreach ($page_arguments as $page_argument) {
        if (is_object($page_argument) && isset($page_argument->nid) && is_numeric($page_argument->nid)) {
          $node_object = $page_argument;
          break;
        }
      }
    }
    // Now set the MENU_LOCAL_ACTION.
    if ($node_object) {
      // See if the node type is a parent type.
      if (node_collection_api_is_parent_type($node_object->type)) {
        // Get the menu path to add the children.
        $item_local_action_add = menu_get_item(NODE_COLLECTION_EDIT_DELETE_RELATIONSHIP_INSTANCES_PATH . '/add/' . $node_object->nid);
        $item_local_action_edit = menu_get_item(NODE_COLLECTION_EDIT_DELETE_RELATIONSHIP_INSTANCES_PATH . '/edit/' . $node_object->nid . '/' . $node_object->nid);
        $item_local_action_edit_menu = menu_get_item(NODE_COLLECTION_SETTINGS_PATH . "/administer_menu_links/$node_object->nid/$node_object->nid");
      }
      else {
        try {
          // Pull out the parent node id.
          $parent_id = node_collection_api_is_child_instance($node_object->nid);

          // Check if we have a numeric value for the parent ID.
          if ($parent_id && is_numeric($parent_id)) {
            $parent_node_object = node_load($parent_id);

            if ($parent_node_object) {
              // Get the menu path to add the children.
              $item_local_action_add = menu_get_item(NODE_COLLECTION_EDIT_DELETE_RELATIONSHIP_INSTANCES_PATH . '/add/' . $parent_node_object->nid);
              $item_local_action_edit = menu_get_item(NODE_COLLECTION_EDIT_DELETE_RELATIONSHIP_INSTANCES_PATH . '/edit/' . $parent_node_object->nid . '/' . $node_object->nid);
              $item_local_action_edit_menu = menu_get_item(NODE_COLLECTION_SETTINGS_PATH . "/administer_menu_links/$parent_node_object->nid/$node_object->nid");
            }
          }
        }
        catch (Exception $parent_load_exception) {
          watchdog_exception('node_collection', $parent_load_exception);
        }
      }

      // Add it to the actions.
      if (isset($item_local_action_edit)) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item_local_action_edit,
        );
      }
      if (isset($item_local_action_add)) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item_local_action_add,
        );
      }
      if (isset($item_local_action_edit_menu)) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item_local_action_edit_menu,
        );
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function node_collection_node_delete($node) {
  try {
    // See if the node is any child instance.
    $is_child = node_collection_api_is_child_instance($node->nid);
    // If the given node is a child instance remove the mapping of the
    // relationship.
    if ($is_child) {
      node_collection_api_delete_associated_child_instance($node->nid);
      // Delete the link to the menu.
      menu_link_delete(NULL, "node/$node->nid");
    }
    else {
      // We check this because a parent cannot be a child itself.
      $is_parent = node_collection_api_is_parent_instance($node->nid);
      // If the node is a parent delete the relationship.
      if ($is_parent) {
        // We have to split out the fully populated menu array even for delete.
        // Check API docs.
        $menu = menu_load("nc-$node->nid");
        // Delete the menu and all the child links.
        menu_delete($menu);

        // Delete the relationships.
        node_collection_api_delete_relationship_instance($node->nid);
      }
    }
  }
  catch (Exception $exception) {
    watchdog_exception('node_collection', $exception);
  }
}

/**
 * Implements hook_process().
 */
function node_collection_process(&$variables, $hook) {
  if ($hook == 'node') {
    // First we get the node id of the node which is about to view.
    $is_parent = FALSE;
    $node_object = isset($variables['elements']['#node']) ? $variables['elements']['#node'] : NULL;

    if (isset($node_object) && isset($node_object->nid)) {
      $node_id = $node_object->nid;
    }
    else {
      $node_id = NULL;
    }

    if ($node_id && isset($variables['theme_hook_suggestions']) && is_array($variables['theme_hook_suggestions'])) {
      try {
        // Check if the node is a child instance.
        $parent_id = node_collection_api_is_child_instance($node_id);
        // If not a child type see if the node is a parent type.
        if ($parent_id == FALSE) {
          $parent_id = node_collection_api_is_parent_instance($node_id);

          // Set a flag if the node is a parent instance.
          if ($parent_id) {
            $is_parent = TRUE;
          }
        }

        // If a child add the template suggestion.
        if ($parent_id) {
          $parent_node_type = NULL;
          $child_node_type = ($variables['type']) ? $variables['type'] : NULL;

          // Load the parent node.
          if ($is_parent == FALSE) {
            $parent_node = node_load($parent_id);
            $parent_node_type = $parent_node->type;
          }
          else {
            $parent_node_type = $child_node_type;
            $parent_node = $node_object;
          }

          if ($child_node_type && $parent_node_type) {
            // Add the suggestion
            // The suggestion will be
            // node--<parent_node_type>-<child_node_type>.tpl.php.
            $template_suggestion_string = 'node__' . $parent_node_type . '_' . $child_node_type;
            $variables['theme_hook_suggestions'][] = $template_suggestion_string;

            // Add extra classes for styling.
            if ($is_parent) {
              $variables['classes'] .= " parent parent_$parent_node_type parent_$parent_node_type-$parent_id";
            }
            else {
              $variables['classes'] .= " child child_$child_node_type child_$child_node_type-$node_id";
            }

            // Add the extra variables to the $variables.
            $variables['is_node_collection'] = TRUE;
            $variables['is_node_parent'] = ($is_parent) ? TRUE : FALSE;
            $variables['node_collection_parent_node_id'] = $parent_id;
            // Add the parent node to the parent template pre process hook.
            $variables['parent_node_object'] = $parent_node;

            // Add CSS.
            drupal_add_css(drupal_get_path('module', 'node_collection') . '/theme/css/node_collection.css');
          }
        }
      }
      catch (Exception $child_exception) {
        watchdog_exception('node_collection', $child_exception);
      }
    }
  }
  elseif ($hook == 'page') {
    // See if the containing node is set.
    $container_node = isset($variables['node']) ? $variables['node'] : FALSE;

    if ($container_node && isset($container_node->nid)) {
      try {
        // See if the instance is a child or a parent.
        $super_parent_id = NULL;
        $super_parent_tree_data = NULL;
        $parent_id = node_collection_api_is_parent_instance($container_node->nid);
        $rendered_menus = '';

        if ($parent_id == FALSE) {
          $parent_id = node_collection_api_is_child_instance($container_node->nid);
        }

        $super_parent_id_collection = node_collection_api_get_grand_parents($container_node->nid);

        // If a parent just render the menu on title_prefix.
        if ($parent_id) {
          if (empty($super_parent_id_collection) == FALSE) {
            foreach ($super_parent_id_collection as $super_parent) {
              $super_parent_tree_data = menu_tree_page_data("nc-$super_parent");
              $variables['node_collection_menu_tree_output'][$super_parent] = menu_tree_output($super_parent_tree_data);
            }
          }

          $parent_node = node_load($parent_id);
          $tree_data = menu_tree_page_data("nc-$parent_id");
          // Add the rendered menu.
          $variables['node_collection_menu_tree_output'][$parent_id] = menu_tree_output($tree_data);

          if ($parent_node) {
            // Load the super parent node object.
            if (empty($super_parent_id_collection) == FALSE) {
              $variables['grand_parent_node_objects'] = node_load_multiple($super_parent_id_collection);
            }

            // Add the parent node to the parent template pre process hook.
            $variables['parent_node_object'] = $parent_node;
            $variables['classes'] .= " node_container  node_container_$parent_node->type node_container_$parent_node->nid";
            $variables['is_node_collection_container'] = TRUE;

            if (empty($variables['node_collection_menu_tree_output']) == FALSE) {
              // Remove the duplicates.
              $menu_level_index = 1;

              foreach ($variables['node_collection_menu_tree_output'] as $menu_parent_key => $nc_menu) {
                // Remove the parent element from the child menu.
                if ($menu_level_index > 1) {
                  foreach ($nc_menu as $inidividual_menu_item_key => $inidividual_menu_item) {
                    if (
                      isset($inidividual_menu_item['#original_link']['link_path']) &&
                      $inidividual_menu_item['#original_link']['link_path'] == "node/$menu_parent_key"
                    ) {
                      unset($nc_menu[$inidividual_menu_item_key]);
                    }
                  }
                  // Assign back the removed manu item.
                  $variables['node_collection_menu_tree_output'][$menu_parent_key] = $nc_menu;
                }

                $rendered_menus .= '<div class="node-collection-menu-level-' . $menu_level_index . '">' . render($nc_menu) . '</div>';
                $menu_level_index++;
              }
            }

            // Add the menu items to the title prefix.
            $variables['title_prefix'] = '<div class="node-collection-navigation-wrapper">' . $rendered_menus . '</div>';

            // Add the suggestion
            // The suggestion will be
            // page__node_container_<parent_node_type>.tpl.php and
            // the default will be page__node_container_default.
            if (empty($variables['grand_parent_node_objects']) == FALSE) {
              foreach ($variables['grand_parent_node_objects'] as $grand_parent_object) {
                $template_page_suggestion_strings[] = 'page__node_container_' . $grand_parent_object->type;
              }
            }

            $template_page_suggestion_strings[] = 'page__node_container_' . $parent_node->type;
            $template_page_suggestion_strings = array_unique(array_values(array_reverse($template_page_suggestion_strings)), SORT_STRING);
            $theme_hook_suggestions_page = $variables['theme_hook_suggestions'];

            // This is just a work around because you simply cant do
            // array_unshift($template_suggestion_string,
            // $variables['theme_hook_suggestion']);
            // in PHP and you will end up getting
            // 'PHP Fatal error:  Only variables can be passed by reference'.
            foreach ($template_page_suggestion_strings as $template_page_suggestion_string) {
              array_unshift($theme_hook_suggestions_page, $template_page_suggestion_string);
            }
            // Add the default.
            $theme_hook_suggestions_page[] = 'page__node_container_default';
            $variables['theme_hook_suggestions'] = $theme_hook_suggestions_page;

            // Add the css.
            drupal_add_css(drupal_get_path('module', 'node_collection') . '/theme/css/node_collection.css');
          }
        }
      }
      catch (Exception $parent_search_exception) {
        watchdog_exception('node_collection', $parent_search_exception);
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function node_collection_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  foreach (element_children($form) as $mlid) {
    $element = isset($form[$mlid]) ? $form[$mlid] : NULL;

    if (isset($element['#item']['menu_name']) && preg_match('/^nc-\d*$/', $element['#item']['menu_name'])) {
      $matches = array();
      preg_match('/^nc-\d*$/', $element['#item']['menu_name'], $matches);

      if (empty($matches) == FALSE) {
        $node_link = $matches[0];
        $parent_node_id = (int) str_replace('nc-', '', $node_link);
        $collection_parent_object = node_load($parent_node_id);

        if ($collection_parent_object) {
          $form['actions']['node_collection_link'] = array(
            '#markup' => l(t('Go to Node Collection : @title', array('@title' => $collection_parent_object->title)), "node/$parent_node_id/edit"),
          );
        }
      }
    }
  }
}
