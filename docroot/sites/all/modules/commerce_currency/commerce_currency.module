<?php

/**
 * @file
 * Defines the Currency field with widgets and formatters used to add Commerce currency to various entities.
 */

/**
 * Implements hook_field_info().
 */
function commerce_currency_field_info() {
  return array(
    'commerce_currency' => array(
      'label' => t('Currency'),
      'description' => t('This field stores currencies.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'commerce_currency',
      'default_formatter' => 'commerce_currency_formatted',
    ),
  );
}

/**
 * Implements of hook_field_is_empty().
 */
function commerce_currency_field_is_empty($item, $field) {
  return !isset($item['currency_code']) || (string) $item['currency_code'] == "_none" || (string) $item['currency_code'] == "";
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_currency_field_formatter_info() {
  return array(
    'commerce_currency_raw' => array(
      'label' => t('Raw amount'),
      'field types' => array('commerce_currency'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
    'commerce_currency_formatted' => array(
      'label' => t('Formatted amount'),
      'field types' => array('commerce_currency'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_currency_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'commerce_currency_raw':
        $element[$delta] = array(
          '#markup' => $item['currency_code'],
        );
        break;

      case 'commerce_currency_formatted':
        $currency = commerce_currency_load($item['currency_code']);
        $element[$delta] = array(
          '#markup' => _commerce_currency_format_currency($currency)
        );
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_currency_field_widget_info() {
  return array(
    'commerce_currency' => array(
      'label' => t('Currency'),
      'field types' => array('commerce_currency'),
      'settings' => array(
        'currency_code' => 'default',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_currency_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'commerce_currency':
      // Build a currency options list from all enabled currencies.
      $options = array("_none" => t("- Select value -"));

      foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
        $options[$currency_code] = _commerce_currency_format_currency($currency);
      }

      $element['currency_code'] = array(
        '#type' => 'select',
        '#title' => $element['#title'],
        '#description' => $element['#description'],
        '#options' => $options,
        '#default_value' => isset($items[$delta]['currency_code']) ? $items[$delta]['currency_code'] : "_none",
      );
      break;
  }

  return $element;
}

/**
 * Returns the default array structure for a Price field for use when creating
 *   new data arrays through an entity metadata wrapper.
 */
function commerce_currency_field_data_auto_creation() {
  return array('currency_code' => commerce_default_currency());
}

/**
 * Returns formatted currency
 *
 * @param $currency
 * @return null|string
 */
function _commerce_currency_format_currency($currency) {
  $format = t('@code - !name', array('@code' => $currency['code'], '!name' => $currency['name']));
  if (!empty($currency['symbol'])) {
    $format .= ' - ' . check_plain($currency['symbol']);
  }

  return $format;
}