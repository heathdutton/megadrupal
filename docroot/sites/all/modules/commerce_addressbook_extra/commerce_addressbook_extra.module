<?php

/**
 * Implements hook_permission().
 */
function commerce_addressbook_extra_permission() {
  return array(    
    'configure addressbook extra settings' =>  array(
      'title' => t('Configure Addressbook Extra settings'),
      'description' => t('Allow administers to setup customer profiles 
        that should be shown on Register form and allows user to setup 
        customer profiles like Billing, Shipping or custom ones from Register
        form.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_addressbook_extra_menu() {
  $items['admin/commerce/customer-profiles/addressbook-extra'] = array(
    'title' => 'Addressbook Extra',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ae_settings_form'),
    'access arguments' => array('configure addressbook extra settings'),
    'type' => MENU_LOCAL_TASK,  
    'weight' => 6,
  );
  
  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_addressbook_extra_theme($existing, $type, $theme, $path) {  
  return array(    
    'ae_settings_form' => array(
      'render element' => 'form',
      'template' => 'ae-settings-form',
    ),
  );
}

/**
 * Implements hook_entity_insert().
 */
function commerce_addressbook_extra_entity_insert($user, $entity_type) {  
  if ($entity_type == 'user') {
    foreach (commerce_ae_active_profiles() as $type => $name) {
      $field_name = commerce_ae_get_register_fn($type);
      // update owner id of selected customer profiles that 
      // were created after user register
      $user_wrapper = entity_metadata_wrapper('user', $user);    
      $profile_id = $user_wrapper
                      ->{$field_name}
                      ->profile_id
                      ->value();  
      $profile = entity_load_single('commerce_customer_profile', $profile_id);
      $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);
      $profile_wrapper->uid->set($user->uid);
      $profile_wrapper->save();
      commerce_addressbook_set_default_profile($profile);
    }
  }
}

/**
 * Implements hook_form_user_profile_form_alter().
 */
function commerce_addressbook_extra_form_user_profile_form_alter(&$form, &$form_state) {
  // if approprite box is checked on settings page - 
  // hide customer profile fields on Profile form  
  foreach (commerce_ae_active_profiles() as $type => $name) {
    $field_name = commerce_ae_get_register_fn($type);
    $is_show_varname = commerce_ae_get_profile_show_fn($type);    
    $is_show = variable_get($is_show_varname, FALSE);    
    $form[$field_name]['#access'] = $is_show;
  }  
}

/**
 * Implements hook_commerce_addressbook_labels_alter().
 */
function commerce_addressbook_extra_commerce_addressbook_labels_alter(&$options, &$profiles) {  
  foreach ($profiles as $profile_id => $profile) {
    $wrapper_profile = entity_metadata_wrapper('commerce_customer_profile', $profile);
    $variable_name = commerce_ae_get_default_field_fn($profile->type);
    $field_name = variable_get($variable_name, '');
    $parts = explode('*', $field_name);    
    $value = '';
    if (sizeof($parts) == 1 && isset($wrapper_profile->{$field_name})) {      
      $value = $wrapper_profile->{$field_name}->value();      
    } elseif (sizeof($parts) == 2 && 
      isset($wrapper_profile->{$parts[0]}) &&
      isset($wrapper_profile->{$parts[0]}->{$parts[1]})) {      
      $value = $wrapper_profile->{$parts[0]}->{$parts[1]}->value();
    }
    $options[$profile_id] = $value;
  }
}

/**
 * Form callback: Settings form.
 */
function commerce_ae_settings_form($form, &$form_state) {    
  $instance = field_info_instance('user', 'field_billing_register', 'user');    
  //dsm($instance);

  $form = array();
  $options = array();
  $default_value = array();
  $customer_profiles = commerce_customer_profile_types();  
  foreach ($customer_profiles as $cp) {
    $type = $cp['type'];
    $field_name = commerce_ae_get_register_fn($type);
    // check if exists register field
    $instance = field_info_instance('user', $field_name, 'user');    
    if (is_array($instance)) {
      $default_value[] = $type;
    }    
    $options[$type] = $cp['name'];
  }

  $form['customer_profiles'] = array(
    '#type' => 'checkboxes',
    '#default_value' => $default_value,
    '#title' => '',    
    '#options' => $options,
    '#description' => ''
  );
  $form['customer_profiles_data'] = array(
    '#type' => 'value',
    '#value' => $customer_profiles,
  );

  foreach ($options as $type => $name) {
    $fields = commerce_ae_get_profile_fields($type);  
    $address_book_enabled = commerce_ae_get_addrbook_enable_fn($type);
    $default_field_name = commerce_ae_get_default_field_fn($type);
    $profile_show_varname = commerce_ae_get_profile_show_fn($type);
    $form[$default_field_name] = array(
      '#type' => 'select',
      '#options' => $fields,
      '#default_value' => variable_get($default_field_name, ''),
    );
    $form[$address_book_enabled] = array(
      '#type' => 'checkbox',
      '#title' => '', // Enable the Address Book
      '#default_value' => variable_get($address_book_enabled, FALSE),
    );
    $form[$profile_show_varname] = array(
      '#type' => 'checkbox',
      '#title' => '', // Is show on Profile
      '#default_value' => variable_get($profile_show_varname, FALSE),
    );
  }

  $form['#theme'] = 'ae_settings_form';
  $form['#submit'][] = 'commerce_ae_settings_form_submit';

  return system_settings_form($form);
}

/**
 * Submit callback for commerce_pc_field_settings_form().
 */
function commerce_ae_settings_form_submit($form, &$form_state) { 
  $customer_profiles_data = $form_state['values']['customer_profiles_data'];
  $clicked_button = $form_state['clicked_button']['#parents'][0];  
  if ($clicked_button == 'submit') {
    $customer_profiles = $form_state['values']['customer_profiles'];

    foreach ($customer_profiles as $type => $checked) { 
      $profile = $customer_profiles_data[$type];
      $field_name = commerce_ae_get_register_fn($type);     
      $instance = field_info_instance('user', 
                                    $field_name, 
                                    'user');      
      if ($type === $checked) {        
        if (!is_array($instance)) {                    
          commerce_ae_create_field($profile);
          commerce_ae_create_field_instance($profile);
         
          drupal_set_message(
            t('%profile_name has been added on Register form', 
            array('%profile_name' => $profile['name']))
          );
        } 
      } else {
        if (is_array($instance)) {                                  
          field_delete_instance($instance, FALSE);
          field_delete_field($field_name);
          //rules_config_delete(array $ids);
          drupal_set_message(
            t('%profile_name has been removed from Register form', 
            array('%profile_name' => $profile['name']))
          );        

        } 
      }
    }    
  }
}	

/**
 * Create field for User entity depending 
 * on customer profile (pass as parameter)
 */
function commerce_ae_create_field($customer_profile) {
  $type = $customer_profile['type'];
  $field_name = commerce_ae_get_register_fn($type);
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name, 
      'type' => 'commerce_customer_profile_reference',      
      'translatable' => FALSE,
      'settings' => array(
        'profile_type' => $type,

      ),
    );
    field_create_field($field); 
  }
}

/**
 * Create field instance for User entity depending 
 * on customer profile (pass as parameter)
 */
function commerce_ae_create_field_instance($customer_profile) {  
  $field_name = commerce_ae_get_register_fn($customer_profile['type']);
  $instance = array(    
    'field_name' => $field_name, 
    'entity_type' => 'user',
    'bundle' => 'user',
    'label' => $customer_profile['name'],
    'required' => TRUE,    
    'widget' => array(
      'type' => 'commerce_customer_profile_manager',
      'weight' => 8,      
    ),
    'settings' => array(
      'user_register_form' => TRUE,
    ),
  );

  return field_create_instance($instance);  
}

/**
 * Get 'Register' field name by customer profile type
 */
function commerce_ae_get_register_fn($customer_profile_type) {    
  return 'field_'.$customer_profile_type . '_register';
}

/**
 * Get 'Addressbook enable' field name by customer profile type
 */
function commerce_ae_get_addrbook_enable_fn($customer_profile_type) {      
  return 'commerce_customer_profile_' . $customer_profile_type . '_addressbook';
}

/**
 * Get variable name by customer profile type 
 * that contains 'Default field' field name 
 */
function commerce_ae_get_default_field_fn($customer_profile_type) {      
  return 'commerce_ae_default_field_' . $customer_profile_type;
}

/**
 * Get variable name by customer profile type 
 * that contains boolean value if customer profile 
 * field should be shown on Profile edit form
 */
function commerce_ae_get_profile_show_fn($customer_profile_type) {      
  return 'commerce_ae_profile_show_' . $customer_profile_type;
}

/**
 * Get a list of picked customer profiles that should be 
 * shown on Register page
 */
function commerce_ae_active_profiles() {
  $default_values = array();
  $customer_profiles = commerce_customer_profile_types();
  foreach ($customer_profiles as $cp) {
    $type = $cp['type'];
    $field_name = commerce_ae_get_register_fn($type);
    // check if field exists for current Product type (bundle)
    $instance = field_info_instance('user', $field_name, 'user');    
    if (is_array($instance)) {
      $default_values[$type] = $cp['name'];
    }
  }

  return $default_values;
}

/**
 * Get a list of 'Customer profile' fields to pick
 * default field that will be shown as a title of 
 * select-list on Checkout page
 */
function commerce_ae_get_profile_fields($customer_profile_type) {
  $allowed_fields = array();
  $field_instances = field_info_instances('commerce_customer_profile', $customer_profile_type);    
  foreach ($field_instances as $field) {    
    switch ($field['widget']['type']) {
      case 'addressfield_standard':
        $formats = array_filter($field['widget']['settings']['format_handlers']);
        $field_prefix = $field['field_name'].'*';
        if (in_array('address', $formats)) {
          $allowed_fields[$field_prefix.'country']      = t('Country');
          $allowed_fields[$field_prefix.'locality']     = t('City');
          $allowed_fields[$field_prefix.'thoroughfare'] = t('Address 1');
          $allowed_fields[$field_prefix.'premise']      = t('Address 2'); 
          $allowed_fields[$field_prefix.'postal_code']  = t('Postal code'); 
        }
        if (in_array('organisation', $formats)) {
          $allowed_fields[$field_prefix.'organisation_name'] = t('Organisation');
        }
        
        if (in_array('name-full', $formats)) {
          $allowed_fields[$field_prefix.'first_name'] = t('First name');
          $allowed_fields[$field_prefix.'last_name'] = t('Last name');
        } else if (in_array('name-oneline', $formats)) {
          $allowed_fields[$field_prefix.'name_line'] = t('Name');
        }          
        break;
      case 'text_textfield':        
        $allowed_fields[$field['field_name']] = $field['label'];
        break;        
    }
  }
  return $allowed_fields;
}

/**
 * Implements hook_preprocess_ae_settings_form().
 */
function commerce_addressbook_extra_preprocess_ae_settings_form(&$variables) {     
  $module_path = drupal_get_path('module', 'commerce_addressbook_extra');
  drupal_add_js($module_path . '/commerce_addressbook_extra.js'); 
  $form = &$variables['form'];
  $customer_profiles = $form['customer_profiles_data']['#value'];    
  foreach ($customer_profiles as $type => $profile) {
    $variables['customer_profiles'][$type] = $profile['name'];        
    $variables['addr_book_enable_fn'][$type] = commerce_ae_get_addrbook_enable_fn($type);
    $variables['default_field_fn'][$type] = commerce_ae_get_default_field_fn($type);
    $variables['show_profile_fn'][$type] = commerce_ae_get_profile_show_fn($type);
    unset($form['customer_profiles'][$type]['#title']);
  }
}