<?php

/**
 * @file
 * Provides a token which represents a term's hierarchical taxonomy position,
 * just like a breadcrumb would.
 */

/**
 * Implements hook_token_info_alter().
 */
function token_taxonomy_breadcrumb_token_info_alter(&$info) {
  $info['tokens']['term']['breadcrumb'] = array(
    'name' => t('Breadcrumb'),
    'description' => t('The term preceded by its parents in hierarchical order.'),
    'type' => 'array',
  );
  $info['tokens']['term']['breadcrumb-reverse'] = array(
    'name' => t('Reverse breadcrumb'),
    'description' => t('The term followed by its parents in hierarchical order.'),
    'type' => 'array',
  );
}

/**
 * Implements hook_tokens().
 */
function token_taxonomy_breadcrumb_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $language_code = isset($options['language']) ? $options['language']->language : NULL;
  $sanitize = !empty($options['sanitize']);
  if ($type == 'term' && !empty($data['term'])) {
    $term = $data['term'];
    foreach ($tokens as $name => $original) {
      if ($name == 'breadcrumb' || $name == 'breadcrumb-reverse') {
        $breadcrumb = token_taxonomy_breadcrumb_load_breadcrumb($term->tid, $name == 'breadcrumb-reverse');
        $replacements[$original] = token_render_array($breadcrumb, $options);
      }
    }
    // [term:breadcrumb:*] chained tokens.
    if ($breadcrumb_tokens = token_find_with_prefix($tokens, 'breadcrumb')) {
      $breadcrumb = token_taxonomy_breadcrumb_load_breadcrumb($term->tid);
      $replacements += token_generate('array', $breadcrumb_tokens, array('array' => $breadcrumb), $options);
    }
    // [term:breadcrumb-reverse:*] chained tokens.
    if ($breadcrumb_tokens = token_find_with_prefix($tokens, 'breadcrumb-reverse')) {
      $breadcrumb = token_taxonomy_breadcrumb_load_breadcrumb($term->tid, TRUE);
      $replacements += token_generate('array', $breadcrumb_tokens, array('array' => $breadcrumb), $options);
    }
  }
  return $replacements;
}

/**
 * Transforms and caches the breadcrumb as an indexed array.
 *
 * @param int $tid
 *   The term's ID.
 * @param bool $reverse
 *   (Optional) If TRUE, the term will be the first array element.
 *   Otherwise it will be the last. Defaults to FALSE.
 *
 * @return array
 *   An array containing all breadcrumb elements related to and including
 *   the term identified by $tid, ordered top to bottom or vice-versa
 *   (depending on $reverse).
 */
function token_taxonomy_breadcrumb_load_breadcrumb($tid, $reverse = FALSE) {
  $cache = &drupal_static(__FUNCTION__, array());

  if (!is_numeric($tid)) {
    return array();
  }

  if (!isset($cache[$tid])) {
    $cache[$tid] = array();
    $parents = taxonomy_get_parents_all($tid);

    foreach ($parents as $term) {
      $cache[$tid][$term->tid] = entity_label('taxonomy_term', $term);
    }
  }

  // This may look confusing. However, taxonomy_get_parents_all() returns
  // the actual term as the first array element, which is why we actually have
  // to reverse the array in case we want it to look "forward".
  return $reverse ? $cache[$tid] : array_reverse($cache[$tid]);
}
