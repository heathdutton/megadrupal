<?php

/**
 * @file
 * Provides the ability to override views entities in Page manager.
 */


/**
 * Implements hook_ctools_plugin_directory().
 */
function eck_pm_ctools_plugin_directory($owner, $plugin_type) {
  $plugins = array(
    'ctools' => array('content_types', 'contexts'),
    'page_manager' => array('tasks'),
  );

  if (isset($plugins[$owner]) && in_array($plugin_type, $plugins[$owner])) {
    return 'plugins/' . $plugin_type;
  }
}


/**
 * Gets the possible views of entities.
 *
 * @param mixed $task_id
 *   The task ID.
 *
 * @return array
 *   An array with pages and their settings.
 */
function eck_pm_get_eck_pages($task_id = NULL) {
  $entity_types = EntityType::loadAll();

  $pages = array();
  module_load_include('inc', 'eck', 'eck.entity');
  foreach ($entity_types as $info) {
    $entity_type = $info->name;
    $data = new stdClass();
    $data->name = $entity_type . '_view';
    $data->label = t('!entity_type Template', array('!entity_type' => $info->label));
    $data->context = 'entity|' . $entity_type . '|id';
    $data->entity_type = $entity_type;
    $data->paths = array();
    foreach (Bundle::loadByEntityType($info) as $bundle) {
      $crud_info = get_bundle_crud_info($info->name, $bundle->name);
      $data->paths[] = $crud_info['view']['path'];
    }
    $data->type = 'Normal';

    $pages[$entity_type . '_view'] = $data;
  }

  if ($task_id) {
    return $pages[$task_id];
  }

  return $pages;
}


/**
 * Gets the possible add/edit form of entities created with eck.
 *
 * @param mixed $task_id
 *   The task ID.
 *
 * @return array
 *   An array with pages and their settings.
 */
function eck_pm_get_eck_form($task_id = NULL) {
  $entity_types = EntityType::loadAll();

  $pages = array();
  module_load_include('inc', 'eck', 'eck.entity');
  foreach ($entity_types as $info) {
    $entity_type = $info->name;
    $data = new stdClass();
    $data->name = $entity_type . '_edit';
    $data->label = t('!entity_type add/edit form', array('!entity_type' => $info->label));
    $data->context = 'entity|' . $entity_type . '|id';
    $data->entity_type = $entity_type;
    $data->paths = array();
    foreach (Bundle::loadByEntityType($info) as $bundle) {
      $crud_info = get_bundle_crud_info($info->name, $bundle->name);
      $data->paths[] = $crud_info['add']['path'];
      $data->paths_type['add'][] = $crud_info['add']['path'];
      $data->paths[] = $crud_info['edit']['path'];
      $data->paths_type['edit'][] = $crud_info['edit']['path'];
      $data->paths[] = $crud_info['view']['path'] . '/edit';
      $data->paths_type['edit'][] = $crud_info['view']['path'] . '/edit';
    }
    $data->type = 'Normal';

    $pages[$entity_type . '_edit'] = $data;
  }

  if ($task_id) {
    return $pages[$task_id];
  }

  return $pages;
}


/**
 * Implements hook_features_pipe_COMPONENT_alter().
 *
 * By default the Features does not detect the module.
 */
function eck_pm_features_pipe_page_manager_handlers_alter(&$pipe, $data, $export) {
  foreach ($data as $page) {
    if (strpos($page, 'eck_pm_') === 0) {
      $pipe['dependencies']['eck_pm'] = 'eck_pm';
    }
  }
}


/**
 * Get an array options of bundles by an entity type.
 *
 * @param EntityType $entity_type
 *   The entity type object by eck.
 *
 * @return array
 */
function eck_pm_bundle_options(EntityType $entity_type) {
  $options = array();
  $bundles = Bundle::loadByEntityType($entity_type);
  foreach ($bundles as $bundle) {
    $options[$entity_type->name . ':' . $bundle->name] = $entity_type->label . ' : ' . $bundle->label;
  }

  return $options;
}

/**
 * Get an array options of bundles grouped by entity types.
 */
function eck_pm_entity_type_options() {
  $entity_types = EntityType::loadAll();
  $options = array();

  foreach ($entity_types as $info) {
    $options[$info->label . ' (' . $info->name . ')'] = eck_pm_bundle_options($info);
  }


  return $options;
}

