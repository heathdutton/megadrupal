<?php

/**
 * Implements hook_libraries_info().
 */
function gopushapi_service_libraries_info() {
  $libraries = array();

  $libraries['phpseclib'] = array(
    'name' => 'phpseclib',
    'vendor url' => 'http://phpseclib.sourceforge.net',
    'download url' => 'http://sourceforge.net/projects/phpseclib/files/phpseclib0.3.0.zip/download',
    'version' => '0.3.0',
    'files' => array(
      'php' => array(
        'Crypt/AES.php',
        'Crypt/DES.php',
        'Crypt/Hash.php',
        'Crypt/Random.php',
        'Crypt/RC4.php',
        'Crypt/Rijndael.php',
        'Crypt/RSA.php',
        'Crypt/TripleDES.php',
        'File/ANSI.php',
        'File/ASN1.php',
        'File/X509.php',
        'Math/BigInteger.php',
        'Net/SFTP.php',
        'Net/SSH1.php',
        'Net/SSH2.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_permission().
 */
function gopushapi_permission() {
  return array(
    'administer gopushapi service' => array(
      'title' => t('Administer GoPush API'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function gopushapi_service_menu() {
  $items = array();

  $items['admin/config/services/gopushapi'] = array(
    'title' => 'GoPush API Service',
    'access arguments' => array('administer gopushapi service'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gopushapi_service_admin_form'),
  );

  return $items;
}

/**
 * Returns a preconfigured GoPushAPI service object.
 *
 * @return GoPushAPI
 */
function gopushapi_service_get_service() {
  $service = &drupal_static(__FUNCTION__, NULL);

  if (!$service) {
    _gopushapi_service_init_service();

    $service = new GoPushAPI(
      variable_get('gopushapi_server'),
      variable_get('gopushapi_mail'),
      variable_get('gopushapi_private_key')
    );
  }

  return $service;
}

/**
 * Initializes the service object.
 */
function _gopushapi_service_init_service() {
  GoPushAPI::init(realpath('./' . libraries_get_path('phpseclib')));
}

/**
 * Page callback for 'admin/config/services/gopushapi'.
 */
function gopushapi_service_admin_form() {
  $form = array();

  $form['gopushapi_server'] = array(
    '#title' => t('Server address'),
    '#type' => 'textfield',
    '#default_value' => variable_get('gopushapi_server'),
    '#required' => TRUE,
  );

  $form['gopushapi_mail'] = array(
    '#title' => t('Mail address'),
    '#type' => 'textfield',
    '#default_value' => variable_get('gopushapi_mail'),
    '#required' => TRUE,
  );

  $form['gopushapi_private_key'] = array(
    '#title' => t('Private key'),
    '#type' => 'textarea',
    '#default_value' => variable_get('gopushapi_private_key'),
    '#description' => t('PEM encoded PKCSv1 format RSA private key (1024 bits recommended).'),
    '#required' => TRUE,
  );

  $form = system_settings_form($form);

  $form['#validate'][] = 'gopushapi_service_admin_form_validate';

  return $form;
}

/**
 * Validation callback for 'gopushapi_service_admin_form'.
 */
function gopushapi_service_admin_form_validate($form, &$form_state) {
  $values = &$form_state['values'];
  _gopushapi_service_init_service();
  try {
    $svc = new GoPushAPI($values['gopushapi_server'], $values['gopushapi_mail'], $values['gopushapi_private_key']);
    $msg = sha1('Hello Drupal at ' . time() . ' :: ' . mt_rand());
    $response = $svc->test($msg);
    if ($response !== $msg) {
      form_set_error('gopushapi_server', t('Invalid server.'));
    }
    unset($svc);
  } catch (GoPushAPIKeyLoadingException $ex) {
    form_set_error('gopushapi_private_key', t('Invalid private key'));
  } catch (GoPushAPICurlException $ex) {
    form_set_error('gopushapi_server', t('Connecting to server is failed. Error: %error', array(
      '%error' => $ex->getMessage(),
    )));
  } catch (GoPushAPIHTTPException $ex) {
    switch ($ex->getCode()) {
      case 401:
        form_set_error('gopushapi_mail', t('Invalid account or private key'));
        break;
      case 404:
        form_set_error('gopushapi_server', t('Invalid server.'));
        break;
      default:
        form_set_error('', t('Unknown HTTP error occoured: %code, %message', array(
          '%code' => $ex->getCode(),
          '%message' => $ex->getMessage(),
        )));
    }
  }
}
