<?php

/**
 * @file
 * Defines a theme reference field type.
 */

/**
 * Implements hook_field_info().
 */
function theme_reference_field_info() {
  return array(
    'theme_reference' => array(
      'label' => t('Theme Reference'),
      'description' => t('A theme reference field'),
      'default_widget' => 'options_select',
      'default_formatter' => 'field_reference_default',
      'instance_settings' => array('active_only' => FALSE),
      'settings' => array('active_only' => FALSE),
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function theme_reference_field_schema($field) {
  $columns = array(
    'name' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array('name' => array('name')),
    'foreign keys' => array(
      'name' => array(
        'table' => 'system',
        'columns' => array('name' => 'name'),
      ),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function theme_reference_field_settings_form($field, $instance) {
  $settings = $field['settings'];
  $form = array();

  $form['active_only'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show active themes only.'),
    '#default_value' => $settings['active_only'],
    '#weight' => -1,
  );

  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function theme_reference_field_is_empty($item, $field) {
  return empty($item['name']);
}

/**
 * Implements hook_field_widget_info_alter().
 */
function theme_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'theme_reference';
}

/**
 * Implements hook_options_list().
 */
function theme_reference_options_list($field, $instance, $entity_type, $entity) {
  $settings = $field['settings'];
  $themes = list_themes();

  $options = array();
  foreach ($themes as $name => $theme) {
    // Filter active themes only if active_only is set.
    if ($settings['active_only'] && !$theme->status) {
      continue;
    }
    $options[$name] = $theme->info['name'];
  }

  return $options;
}

/**
 * Implements hook_field_formatter_info().
 */
function theme_reference_field_formatter_info() {
  return array(
    'theme_reference_default' => array(
      'label'       => t('Default'),
      'description' => t('Displays the name of the theme.'),
      'field types' => array('theme_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function theme_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $themes = list_themes();

  $element = array();
  switch ($display['type']) {
    case 'theme_reference_default':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = $themes[$item['name']]->info['name'];
      }
      break;
  }

  return $element;
}
