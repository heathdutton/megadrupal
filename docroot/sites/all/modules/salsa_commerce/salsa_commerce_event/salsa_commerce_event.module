<?php

/**
 * @file
 * Event related functions for the Commerce Salsa module..
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function salsa_commerce_event_form_salsa_event_form_alter(&$form, $form_state, $form_id) {
  // If this event doesn't cost money, don't do anything.
  if (!isset($form['payment'])) {
    return;
  }

  unset($form['#action']);

  // Hide credit card form elements.
  foreach (element_children($form['payment']) as $key) {
    if ($key != 'event_fee_KEY0') {
      $form['payment'][$key]['#access'] = FALSE;
    }
  }

  $form['payment']['commerce_payment'] = salsa_commerce_payment_form($form, $form_state);
  $form['payment']['commerce_payment']['#prefix'] = '<div id="salsa-commerce-payment-form">';
  $form['payment']['commerce_payment']['#suffix'] = '</div>';

  unset($form['actions']['donate']['#suffix']);
  $form['#submit'] = array('salsa_commerce_event_order_create');
}

/**
 * Creates an order object based on an event form.
 */
function salsa_commerce_event_create_event_order($form, &$form_state) {
  // Support both creation from default values and on submit.
  if (empty($form_state['values'])) {
    $values = array(
      'event_fee_KEY0' => 0,
    );
  }
  else {
    $values = $form_state['values'];
  }

  // Calculate the order total.
  $guest_fees_total = 0;
  if (!empty($values['guest_container'])) {
    // Calculate the total amount of all guest fees.
    foreach ($form_state['values']['guest_container'] as $guest_values) {
      $guest_fees_total += $form_state['event_fees'][$guest_values['fee']]->amount;
    }
  }
  $order_total = $form_state['event_fees'][$values['event_fee_KEY0']]->amount + $guest_fees_total;
  // Check if only free fees were selected.
  if ($order_total == 0) {
    return FALSE;
  }

  // Create a new order.
  if (!isset($form_state['order'])) {
    $order = commerce_order_new($GLOBALS['user']->uid);
    commerce_order_save($order);
    $form_state['order'] = $order;
  }
  else {
    $order = $form_state['order'];
  }

  // Add redirect link of the event.
  if (variable_get('salsa_commerce_event_redirect', FALSE) && !empty($form_state['salsa_object']->redirect_path)) {
    $order->data['redirect_path'] = url($form_state['salsa_object']->redirect_path, array('absolute' => TRUE));
  }

  // Allow other modules to alter the used values.
  drupal_alter('salsa_commerce_event_order_values', $values, $form, $form_state);

  // Do not create a line item if we have no selected fee.
  if (empty($values['event_fee_KEY0'])) {
    return $order;
  }

  // Create a line item.
  $line_item_type = 'event_fee';
  $line_item = commerce_line_item_new($line_item_type, $order->order_id);
  $line_item->salsa_event_fee[LANGUAGE_NONE][0]['target_id'] = $form_state['event_fees'][$values['event_fee_KEY0']]->event_fee_KEY;

  // Add guest data to the line item.
  if (!empty($values['guest_container'])) {
    $line_item->data['event_guests'] = $values['guest_container'];
  }

  // Add the line item price including guest fees.
  $line_item->commerce_unit_price = array(
    LANGUAGE_NONE => array(
      '0' => array(
        'amount' => commerce_currency_decimal_to_amount($order_total, commerce_default_currency()),
        'currency_code' => commerce_default_currency(),
      ),
    ),
  );
  $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  if (($value = $wrapper->commerce_unit_price->value()) !== NULL) {
    // Add the base price to the components array.
    if (!commerce_price_component_load($value, 'base_price')) {
      $wrapper->commerce_unit_price->data = commerce_price_component_add($value, 'base_price', $value, TRUE);
    }
  }

  // Add the groups to the data property of the $line_item.
  if (isset($form_state['values']['optionally_add_to_groups_KEYS'])) {
    $submitted_groups_KEYS = array_filter($form_state['values']['optionally_add_to_groups_KEYS']);
    if (!empty($submitted_groups_KEYS)) {
      foreach ($submitted_groups_KEYS as $key) {
        $line_item->data['salsa_optional_groups'][] = $key;
      }
    }
  }
  commerce_line_item_save($line_item);
  // Add the line item to the cart order of the user.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;

  drupal_alter('salsa_commerce_event_order', $order, $form_state, $values);
  return $order;
}

/**
 * Submit handler for salsa events.
 */
function salsa_commerce_event_order_create($form, &$form_state) {
  // Create the order.
  $order = salsa_commerce_event_create_event_order($form, $form_state);
  if (empty($order)) {
    // We don't need the payment process in this case.
    salsa_event_form_submit($form, $form_state);
    return;
  }
  // Set flag that prevents sending of emails for now.
  $form_state['delay_mail_triggers'] = TRUE;
  // Create/update the supporter.
  salsa_entity_supporter_fieldset_submit($form, $form_state);

  // Add a billing profile based on supporter values.
  salsa_commerce_supporter_billing_profile($form_state['supporter'], $order);

  $order->mail = $form_state['supporter']->Email;
  // Necessary to load supporter on payment completion requests of some
  // payment providers because there is no session on those requests.
  $order->data['supporter_KEY'] = $form_state['supporter']->supporter_KEY;

  // Add this order to completed cart orders to fake this being a cart order
  // without showing it as a cart on the site.
  if (empty($_SESSION['commerce_cart_completed_orders'])) {
    $_SESSION['commerce_cart_completed_orders'] = array();
  }

  if (!in_array($order->order_id, $_SESSION['commerce_cart_completed_orders'])) {
    $_SESSION['commerce_cart_completed_orders'][] = $order->order_id;
  }

  salsa_commerce_event_process_payment($order, $form, $form_state);
  // Save the order.
  commerce_order_save($order);
  $form_state['redirect'] = commerce_checkout_order_uri($order);
}

/**
 * Process the payment selection of a donation.
 */
function salsa_commerce_event_process_payment($order, $form, &$form_state) {
  // Make sure the order is in the correct state, set and call the selected
  // payment method.
  $order->status = 'checkout_payment';
  $order->data['payment_method'] = $form_state['values']['commerce_payment']['payment_method'];
  $order->data['payment_redirect_key'] = drupal_hash_base64(time() . uniqid());
  // Allows other modules to add something to the order data.
  if (isset($form_state['salsa_commerce'])) {
    $order->data['salsa_commerce'] = $form_state['salsa_commerce'];
  }

  // Process the payment method.
  // If we can calculate a single order total for the order...
  if ($balance = commerce_payment_order_balance($order)) {
    // Delegate submit to the payment method callback.
    $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

    if ($callback = commerce_payment_method_callback($payment_method, 'submit_form_submit')) {
      // If payment fails, rebuild the checkout form without progressing.
      if ($callback($payment_method, $form['payment']['commerce_payment']['payment_details'], $form_state['values']['commerce_payment']['payment_details'], $order, $balance) === FALSE) {
        $form_state['rebuild'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function salsa_commerce_event_commerce_checkout_complete($order) {

  // Extract all event related line items from the order..
  $commerce_line_items = field_get_items('commerce_order', $order, 'commerce_line_items');
  $event_line_items = array();
  if ($commerce_line_items) {
    foreach ($commerce_line_items as $commerce_line_item) {
      // @todo: Load multiple, maybe use wrapper.
      $line_item = commerce_line_item_load($commerce_line_item['line_item_id']);
      if ($line_item->type == 'event_fee') {
        $event_line_items[] = $line_item;
      }
    }
  }
  // Create a donation for the supporter sign up including costs for guests.
  foreach ($event_line_items as $event_line_item) {
    salsa_commerce_event_save_event_subscription($order, $event_line_item);
  }
}

/**
 * Makes a signup for an event.
 *
 * The event is loaded from the passed event fee line item and
 * stores the payment in a donation.
 *
 * @param object $order
 *   The commerce order object.
 * @param $donation_line_item
 *   The commerce line item.
 */
function salsa_commerce_event_save_event_subscription($order, $event_line_item) {

  // Load the corresponding event object.
  $items = field_get_items('commerce_line_item', $event_line_item, 'salsa_event_fee');
  // If the creation of the donation failed, log it with a link to the order and stop further execution..
  if (empty($items)) {
    $text = 'The salsa donation entity will not be created due to a missing salsa_event_fee property in the line item with ID @lid';
    $args = array(
      '@lid' => $event_line_item->line_item_id
    );
    watchdog('salsa_commerce', $text, $args, WATCHDOG_ERROR, l('Commerce order', 'admin/commerce/orders/' . $order->order_id, array('absolute' => TRUE)));
    return;
  }

  $supporter = entity_load_single('salsa_supporter', $order->data['supporter_KEY']);

  // Create the donation to save the payment on salsa side.
  $donation_entity = entity_create('salsa_donation', array());
  if ($salsa_event_fee = entity_load_single('salsa_event_fee', $items[0]['target_id'])) {
    // Load the event.
    if (!empty($salsa_event_fee->event_KEY)) {
      $donation_entity->event_KEY = $salsa_event_fee->event_KEY;
      $event = entity_load_single('salsa_event', $salsa_event_fee->event_KEY);
      // Create a donation object to save the payment in it.
      salsa_commerce_set_donation_values($order, $event_line_item, $donation_entity, $event, $supporter);
      // Update transaction type and status.
      $donation_entity->Transaction_Type = 'Event Fee';
      $donation_entity->Status = 'Event Fee';
    }
  }

  // Add the tracking code of the event to the donation.
  $donation_entity->Donation_Tracking_Code = $event->Default_Tracking_Code;
  // Allow other modules to alter the donation.
  drupal_alter('salsa_commerce_event_donation', $donation_entity, $event_line_item, $order);
  $donation_entity->save();

  // Add email trigger keys.
  $supporter->additional['email_trigger_KEYS'] = implode(',', salsa_event_get_email_trigger_key($event));
  $supporter->additional['amount'] = $donation_entity->amount;
  $supporter->additional['Currency_Code'] = $donation_entity->Currency_Code;
  $supporter->additional['Transaction_Date'] = format_date(REQUEST_TIME, 'salsa_entity_token_date');
  $supporter->additional['Fee_Reference_Name'] = $salsa_event_fee->Reference_Name;

  // Add further event data like guest count, guest names, event name, etc.
  if (!empty($event_line_item->data['event_guests'])) {
    // Add additional trigger tokens with guest data.
    salsa_event_add_token_data($supporter->additional, $event, $event_line_item->data['event_guests']);
  }
  else {
    // Don't consider guest data for trigger tokens.
    salsa_event_add_token_data($supporter->additional, $event);
  }

  // Get the required groups keys in separate request because they are not
  // available in the XML based queries.
  $key = 'required$groups_KEYS';
  $response = json_decode(salsa_api()->query('/api/getObjects.sjs', 'json&object=event&condition=event_KEY=' . $event->event_KEY . '&include=' . urlencode($key)));
  $required_groups_info = (array)$response[0];
  if (!empty($required_groups_info[$key])) {
    // Assign supporter to the groups if there are any.
    $groups_keys = salsa_entity_string_explode($required_groups_info[$key]);
    if (!empty($groups_keys)) {
      salsa_entity_add_supporter_groups($supporter, $groups_keys);
    }
  }

  $supporter->save();

  // Add supporter to optional groups he chose on the sign up form.
  if (!empty($event_line_item->data['salsa_optional_groups'])) {
    salsa_entity_add_supporter_groups($supporter, $event_line_item->data['salsa_optional_groups']);
  }

  $supporter_invites = array();
  // Save the guests that the supporter signed up.
  if (!empty($event_line_item->data['event_guests'])) {
    foreach($event_line_item->data['event_guests'] as $guest_values) {
      if (salsa_event_guest_info_isset($guest_values)) {
        // Add relevant values, that are not populated with defaults by salsa.
        $entity_values = array(
          'supporter_KEY' => $supporter->supporter_KEY,
          'event_KEY' => $event->event_KEY,
          'event_fee_KEY' => $guest_values['fee'],
          'Email' => $guest_values['mail'],
          'First_Name' => $guest_values['first_name'],
          'Last_Name' => $guest_values['last_name'],
        );
        $supporter_invite = entity_create('salsa_supporter_invite', $entity_values);
        // Add tags to supporter invite if there are any assigned on the event.
        if ($tags = $event->getTags()) {
          $supporter_invite->additional['tag'] = implode(',', $tags);
        }
        $supporter_invites[] = $supporter_invite;
      }
    }
  }

  // @todo similar code is used in the event module already, create a separate function for that.
  // Create the actual supporter subscription.
  $values = array(
    'supporter_KEY' => $supporter->supporter_KEY,
    'event_KEY' => $event->event_KEY,
    'donation_KEY' => $donation_entity->donation_KEY,
    'event_fee_KEY' => $salsa_event_fee->event_fee_KEY,
    '_Type' => 'Supporter',
    '_Status' => SALSA_EVENT_SIGNED_UP,
  );
  $supporter_event = entity_create('salsa_supporter_event', $values);
  // Add number of additional attendees if any guests were signed up.
  if (!empty($supporter_invites)) {
    $supporter_event->Additional_Attendees = count($supporter_invites);
  }
  // Add tags to supporter event if there are any assigned on the event.
  if ($tags = $event->getTags()) {
    $supporter_event->additional['tag'] = implode(',', $tags);
  }
  $supporter_event->save();

  if (!empty($supporter_invites)) {
    // Loop through the guests, set the supporter event key and save.
    foreach ($supporter_invites as $supporter_invite) {
      $supporter_invite->supporter_event_KEY = $supporter_event->supporter_event_KEY;
      $supporter_invite->save();
    }
  }
}

/**
 * Load the supporter event from which this guest got invited.
 *
 * @param $supporter
 *   The salsa supporter object.
 * @param $event
 *   The salsa event object.
 *
 * @return object
 *   The salsa supporter event object.
 */
function salsa_commerce_event_get_supporter_event($supporter, $event) {
  $cache = &drupal_static(__FUNCTION__);
  if (empty($cache)) {
    $conditions = array(
      'supporter_KEY' => $supporter->supporter_KEY,
      'event_KEY' => $event->event_KEY,
    );
    $entities = entity_load('salsa_supporter_event', FALSE, $conditions);
    $supporter_event = reset($entities);
    $cache = $supporter_event;
  }
  return $cache;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function salsa_commerce_event_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['event_fee'] = array(
    'name' => t('Event Fee'),
    'description' => '',
    'product' => TRUE,
    'add_form_submit_value' => t('Add Event fee'),
    'base' => 'salsa_commerce_event_fee',
  );
  return $line_item_types;
}

/**
 * Implements hook_commerce_cart_line_item_refresh().
 */
function salsa_commerce_event_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  // Do not recalculate event fee line items. Relies on the patch in
  // https://drupal.org/comment/8171553#comment-8171553.
  if ($line_item->type == 'event_fee') {
    return FALSE;
  }
}

/**
 * Title callback: Return the title of an event fee line item.
 */
function salsa_commerce_event_fee_title($line_item) {
  if ($items = field_get_items('commerce_line_item', $line_item, 'salsa_event_fee')) {
    if ($event_fee = entity_load_single('salsa_event_fee', $items[0]['target_id'])) {
      if ($event = entity_load_single('salsa_event', $event_fee->event_KEY)) {
        $replacements = array(
          '@event_name' => $event->label(),
          '@fee_name' => $event_fee->label(),
        );
        return t('Event fee @fee_name for @event_name', $replacements);
      }
    }
  }
  return t('Event fee');
}

/**
 * Configuration callback when line item is created.
 */
function salsa_commerce_event_fee_configuration($line_item_type) {
  $type = $line_item_type['type'];
  if (!field_info_field('salsa_event_fee')) {
    $field = array(
      'field_name' => 'salsa_event_fee',
      'type' => 'entityreference',
      'cardinality' => 1,
      'entity_types' => array('commerce_line_item'),
      'translatable' => FALSE,
      'settings' => array(
        'target_type' => 'salsa_event_fee',
        'handler' => 'salsa',
        'handler_submit' => 'Change handler',
        'handler_settings' => array(
          'sort' => array(
            'type' => 'property',
            'property' => 'weight',
            'direction' => 'ASC',
          ),
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 1,
            ),
          ),
        ),
      ),
    );
    $field = field_create_field($field);
  }
  if (!field_info_instance('commerce_line_item', 'salsa_event_fee', $type)) {
    $instance = array(
      'label' => t('Salsa Event Fee'),
      'field_name' => 'salsa_event_fee',
      'bundle' => $type,
      'entity_type' => 'commerce_line_item',
      'required' => FALSE,
      'default_value' => array(array()),
      'widget' => array(
        'type' => 'autocomplete',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_commerce_checkout_order_can_checkout().
 *
 * @see https://drupal.org/node/1458766
 */
function salsa_commerce_event_commerce_checkout_order_can_checkout($order) {
  // Allow orders with salsa commerce event line items to proceed to checkout.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  if (commerce_line_items_quantity($wrapper->commerce_line_items, array('event_fee')) > 0) {
    return TRUE;
  }
}
