<?php

/**
 * @file
 * Salsa commerce integration tests.
 */

class SalsaCommerceEventTestCase extends SalsaEntityBaseTestCase {

  protected $salsaAPIClass = 'SalsaAPIMockCommerceEvent';

  public function setUp() {
    parent::setUp(array('salsa_commerce_event', 'commerce_payment_example'));
    // Allow anonymous user role to access on salsa event page.
    user_role_change_permissions(DRUPAL_ANONYMOUS_RID, array(
      'view salsa_event' => TRUE,
      'access checkout' => TRUE,
    ));
  }

  public static function getInfo() {
    return array(
      'name' => 'Salsa Commerce Event',
      'description' => 'Tests paid events using Commerce',
      'group' => 'Salsa API',
    );
  }

  /**
   * Check the registration for paid events.
   */
  public function testPaidEvent() {
    $this->pass('Testing paid event registration.');
    $this->drupalGet('salsa/event/1');

    // Add a guest twice, but only fill out the first one.
    $this->drupalPost(NULL, array(), t('Add Guest'));
    $this->drupalPost(NULL, array(), t('Add Guest'));

    // Submit the form.
    $edit = array(
      'First_Name' => $this->randomName(),
      'Last_Name' => $this->randomName(),
      'Email' => $this->randomName() . '@example.org',
      'event_fee_KEY0' => 1,
      'commerce_payment[payment_details][name]' => $this->randomName(),
      // Add a guest.
      'guest_container[0][first_name]' => $this->randomName(),
      'guest_container[0][last_name]' => $this->randomName(),
      'guest_container[0][mail]' => $this->randomName() . '@example.org',
      'guest_container[0][fee]' => 2,
    );
    $this->drupalPost(NULL, $edit, t('Register'));

    $saved = variable_get('salsa_entity_mock_saved', array());
    $supporter = $saved['supporter'][999];
    $this->assertEqual($supporter['First_Name'], $edit['First_Name']);
    $this->assertEqual($supporter['Last_Name'], $edit['Last_Name']);
    $this->assertEqual($supporter['Email'], $edit['Email']);

    $donation = $saved['donation'][999];
    $this->assertEqual($donation['supporter_KEY'], 999);
    $this->assertEqual($donation['amount'], 150);
    $this->assertEqual($donation['Currency_Code'], 'USD');
    $this->assertEqual($donation['Transaction_Type'], 'Event Fee');
    $this->assertEqual($donation['Status'], 'Event Fee');
    $this->assertEqual($donation['Donation_Tracking_Code'], 'TEST');

    $supporter_event = $saved['supporter_event'][999];
    $this->assertEqual($supporter_event['supporter_KEY'], 999);
    $this->assertEqual($supporter_event['event_KEY'], 1);
    $this->assertEqual($supporter_event['donation_KEY'], 999);
    $this->assertEqual($supporter_event['event_fee_KEY'], 1);
    $this->assertEqual($supporter_event['_Type'], 'Supporter');
    $this->assertEqual($supporter_event['_Status'], 'Signed Up');

    $supporter_invite = $saved['supporter_invite'][999];
    $this->assertEqual($supporter_invite['supporter_KEY'], 999);
    $this->assertEqual($supporter_invite['supporter_event_KEY'], 999);
    $this->assertEqual($supporter_invite['event_KEY'], 1);
    $this->assertEqual($supporter_invite['event_fee_KEY'], 2);
    $this->assertEqual($supporter_invite['Email'], $edit['guest_container[0][mail]']);
    $this->assertEqual($supporter_invite['First_Name'], $edit['guest_container[0][first_name]']);
    $this->assertEqual($supporter_invite['Last_Name'], $edit['guest_container[0][last_name]']);
  }

  /**
   * Checks the billing profile creation.
   */
  function testBillingProfile() {
    $this->pass('Testing the creation of the billing profile');

    $edit = array(
      'First_Name' => $this->randomName(),
      'Last_Name' => $this->randomName(),
      'Email' => $this->randomName() . '@example.org',
      'event_fee_KEY0' => 1,
      'commerce_payment[payment_details][name]' => $this->randomName(),
    );

    $this->drupalGet('salsa/event/1');
    // Register for the event.
    $address_edit = $edit + array(
        'Street' => $this->randomName(),
        'City' => $this->randomName(),
        'Zip' => rand(1,9) * 1000,
        'Country' => 'DE',
      );
    $this->drupalPost(NULL,  $address_edit, t('Register'));

    preg_match('|checkout/(\d+)|', $this->getUrl(), $matches);

    $order = commerce_order_load($matches[1]);
    $profile = commerce_customer_profile_load(1);

    // Commerce is keeping a transaction open when orders are loaded, that
    // breaks page requests that try to e.g. save entities or set variables.
    // Reset controllers to destruct the transaction and force it to write.
    drupal_static_reset('entity_get_controller');

    // Check if the billing profile exists on the order.
    $this->assertEqual(!empty($order->commerce_customer_billing), TRUE, 'Customer profile exists on the order.');
    $this->assertEqual(property_exists($order, 'commerce_customer_billing'), TRUE, '');

    // Check basic address values on the billing profile.
    $address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
    $this->assertEqual($address['name_line'], $edit['First_Name'] . ' ' . $edit['Last_Name']);
    $this->assertEqual($address['first_name'], $edit['First_Name']);
    $this->assertEqual($address['last_name'], $edit['Last_Name']);
    $this->assertEqual($address['country'], $address_edit['Country']);
    $this->assertEqual($address['postal_code'], $address_edit['Zip']);
    $this->assertEqual($address['thoroughfare'], $address_edit['Street']);
    $this->assertEqual($address['locality'], $address_edit['City']);

    // Remove the addressfield instance from customer profiles.
    field_delete_instance(field_info_instance('commerce_customer_profile', 'commerce_customer_address', 'billing'), FALSE);
    // Get a new Session.
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    $this->drupalLogout();

    $this->drupalGet('salsa/event/1');
    // Register for the event.
    $this->drupalPost(NULL, $edit, t('Register'));

    $profile = commerce_customer_profile_load(2);
    $this->assertEqual(empty($profile->commerce_customer_address), TRUE, 'Customer address not set on the profile order after deleting the field instance on the profile.');

    // Remove the billing profile field instance from orders.
    field_delete_instance(field_info_instance('commerce_order', 'commerce_billing_profile', 'commerce_order'), FALSE);
    // Get a new Session.
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    $this->drupalLogout();

    $this->drupalGet('salsa/event/1');
    // Register for the event.
    $this->drupalPost(NULL, $edit, t('Register'));

    preg_match('|checkout/(\d+)|', $this->getUrl(), $matches);
    $order = commerce_order_load($matches[1]);

    // Check if the billing profile exists on the order.
    $this->assertEqual(empty($order->commerce_customer_billing), TRUE, "Customer profile doesn't exists on the order after deleting the field instance on the order.");
  }

  /**
   * Test for mail tokens on the supporter.
   */
  public function testMailTokens() {
    $this->drupalGet('salsa/event/1');
    // Submit the form.

    $edit = array(
      'First_Name' => $this->randomName(),
      'Last_Name' => $this->randomName(),
      'Email' => $this->randomName() . '@example.org',
      'event_fee_KEY0' => 1,
      'commerce_payment[payment_details][name]' => $this->randomName(),
    );

    $this->drupalPost(NULL, $edit, t('Register'));

    // Load the entities to compare the values.
    $saved = variable_get('salsa_entity_mock_saved', array());
    $supporter = $saved['supporter'][999];
    $donation = $saved['donation'][999];
    $event = entity_load_single('salsa_event', 1);
    $event_fee = entity_load_single('salsa_event_fee', 1);

    // Compare the saved values with the supporter properties.
    $this->pass('Checking additional mail token data.');
    $this->assertEqual($supporter['amount'], $donation['amount']);
    $this->assertEqual($supporter['Currency_Code'], $donation['Currency_Code']);
    $this->assertNotNull($supporter['Transaction_Date']);
    $this->assertEqual($supporter['Event_Name'], $event->Event_Name);
    $this->assertEqual($supporter['Fee_Reference_Name'], $event_fee->Reference_Name);

    // Check the values of the saved supporter group (required groups).
    $this->pass('Checking required groups.');
    $this->assertEqual($saved['supporter_groups'][999]['supporter_KEY'], 999, 'Supporter groups with reference to the supporter created.');
    $this->assertEqual($saved['supporter_groups'][999]['groups_KEY'], 1, 'Supporter groups has the right groups key.');
  }
}
