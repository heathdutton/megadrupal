<?php

/**
 * Field revision cache module.
 */

/**
 * Implements hook_module_implements_alter().
 */
function field_revision_cache_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'field_storage_pre_load':
      // We want our implementation to be first.
      if (isset($implementations['field_revision_cache'])) {
        $group = $implementations['field_revision_cache'];
        unset($implementations['field_revision_cache']);
        $implementations = array('field_revision_cache' => $group) + $implementations;
      }
      break;

    case 'field_attach_load':
      // We want our implementation to be last.
      if (isset($implementations['field_revision_cache'])) {
        $group = $implementations['field_revision_cache'];
        unset($implementations['field_revision_cache']);
        $implementations['field_revision_cache'] = $group;
      }
      break;
  }
}

/**
 * Implements hook_field_storage_pre_load().
 */
function field_revision_cache_field_storage_pre_load($entity_type, &$queried_entities, $age, &$skip_fields, $options) {
  $load_current = $age == FIELD_LOAD_CURRENT;

  $entities = $queried_entities;
  // Try to load as many of the entities as possible.
  $info = entity_get_info($entity_type);
  $cache_read = !$load_current && $info['field cache'] && empty($options['deleted']);

  if ($cache_read) {
    // Build the list of cache entries to retrieve.
    $cids = array();
    foreach ($entities as $id => $entity) {
      list($id, $vid) = entity_extract_ids($entity_type, $entity);
      $cids[] = "field:$entity_type:$id:$vid";
    }
    $cache = cache_get_multiple($cids, 'cache_field');
    // Put the cached field values back into the entities and remove them from
    // the list of entities to query.
    foreach ($entities as $id => $entity) {
      list($id, $vid) = entity_extract_ids($entity_type, $entity);
      $cid = "field:$entity_type:$id:$vid";
      if (isset($cache[$cid])) {
        unset($queried_entities[$id]);
        foreach ($cache[$cid]->data as $field_name => $values) {
          $entity->$field_name = $values;
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_load().
 */
function field_revision_cache_field_attach_load($entity_type, $entities, $age, $options) {
  $load_current = $age == FIELD_LOAD_CURRENT;

  // Try to load as many of the entities as possible.
  $info = entity_get_info($entity_type);
  $cache_read = !$load_current && $info['field cache'] && empty($options['deleted']);

  $cache_write = $cache_read && !isset($options['field_id']);

  // A little check to see if we're calling ourselves.
  if ($cache_write) {
    foreach ($entities as $id => $entity) {
      $data = array();
      list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
      $instances = field_info_instances($entity_type, $bundle);
      foreach ($instances as $instance) {
        $data[$instance['field_name']] = $entities[$id]->{$instance['field_name']};
      }
      $cid = "field:$entity_type:$id:$vid";
      cache_set($cid, $data, 'cache_field');
    }
  }
}

/**
 * Implements hook_field_attach_update().
 */
function field_revision_cache_field_attach_update($entity_type, $entity) {
  list($id) = entity_extract_ids($entity_type, $entity);

  $entity_info = entity_get_info($entity_type);
  if ($entity_info['field cache']) {
    cache_clear_all("field:$entity_type:$id", 'cache_field', TRUE);
  }
}

/**
 * Implements hook_field_attach_delete().
 */
function field_revision_cache_field_attach_delete($entity_type, $entity) {
  list($id) = entity_extract_ids($entity_type, $entity);

  $entity_info = entity_get_info($entity_type);
  if ($entity_info['field cache']) {
    cache_clear_all("field:$entity_type:$id", 'cache_field', TRUE);
  }
}

/**
 * Implements hook_field_attach_delete_revision().
 */
function field_revision_cache_field_attach_delete_revision($entity_type, $entity) {
  list($id, $vid) = entity_extract_ids($entity_type, $entity);

  $entity_info = entity_get_info($entity_type);
  if ($entity_info['field cache']) {
    cache_clear_all("field:$entity_type:$id:$vid", 'cache_field');
  }
}