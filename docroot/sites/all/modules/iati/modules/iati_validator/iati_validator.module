<?php
/**
 * @file.
 * This module validates Iati xml files.
 */

/**
 * Implement hook_menu().
 */
/* function iati_validator_menu() {
  $items["admin/content/Iati_validator"] = array(
    'title' => "Iati Validator",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iati_validator_form'),
    'access callback' => TRUE,
  );
  return  $items;
} */
function iati_validator_form($form, &$form_submit) {
  $form['fileurl'] = array(
    '#title' => drupal_get_path("module", "iati_validator"),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );
  return $form;
 }
/**
 * Implement a hook_submit().
 */
function iati_validator_form_submit($form, $fom_state) {
  $fileurl = $fom_state['values']['fileurl'];

  $result  = iati_validator_filevalidator($fileurl);
  $validity = $result["validity"];
  $errors = $result["errors"];
  if ($validity == "valid") {
    drupal_set_message(t("Valid File. This file meets the IATI standards"));
  }
  else {
    drupal_set_message(t("Invalid File. This file doesnot meets the IATI standards"));
  }
}

/**
 * @file.
 * @param  $fileurl. Url of the xml to validate
 * @return $result; an array with two elements; validity:-valid/invalid and an array of errors
 * for the invalid file
 */

function iati_validator_filevalidator($fileurl) {
  $dir = $fileurl;
  $good_files = $invalid_files = array();
  $result = array();
  if ($dir) {
    // Enable user error handling
    libxml_use_internal_errors(true);
    $xml = new DOMDocument();
    $xml->load ($dir);
    $version = "";
    // Get the version of the Activity file
    $versionnodeactivities = $xml->getElementsByTagName("iati-activities");
    foreach ($versionnodeactivities as $versionnode) {
      $version = $versionnode->getAttribute("version");
    }
    // Get the version of the Organization file
    $versionnodeorganization = $xml->getElementsByTagName("iati-organisations");
    foreach ($versionnodeorganization as $versionnode) {
      $version = $versionnode->getAttribute("version");
    }

    if ($xml->getElementsByTagName("iati_organisation")->length == 0) {
      $doctype = 'iati-activities';
    }
    else {
      $doctype = 'iati-organisations';
    }

    // Based on the version, load the corresponding schema
    if ($version <= 1.01) { // version 1.00 /1.01
      if ($doctype == 'iati-activities') {
        $xsd = dirname( __FILE__ ) . "/schemas/schemas1_01/iati-activities-schema.xsd";
      }
      else {
        $xsd = dirname( __FILE__ ) . "/schemas/schemas1_01/iati-organisations-schema.xsd";
      }
    }
    elseif ($version == 1.02) { //Version 1.02
      if ($doctype == 'iati-activities') {
        $xsd = dirname( __FILE__ ) . "/schemas/schemas1_02/iati-activities-schema.xsd";
      }
      else {
        $xsd = dirname( __FILE__ ) . "/schemas/schemas1_02/iati-organisations-schema.xsd";
      }
    }
    else { // Version 1.03
      if ($doctype == 'iati-activities') {
        $xsd = dirname( __FILE__ ) . "/schemas/schemas1_03/iati-activities-schema.xsd";
      }
      else {
        $xsd = dirname( __FILE__ ) . "/schemas/schemas1_03/iati-organisations-schema.xsd";
      }
    }
    if ($xml->schemaValidate($xsd)) {
      $result["validity"] = "valid";
      $result['errors'] = array("");
      $result['doctype'] = $doctype;
    }
    else {
      // $errors = _iati_validator_libxml_display_errors();
      //  print($errors);
      // drupal_set_message('<pre>'. print_r($errors, TRUE) .'</pre>');
      // drupal_set_message("Bad file");
      $result["validity"] = "invalid";
      $result['errors'] = _iati_validator_libxml_display_errors();
    }
  }
  else {
    // No file has been loaded.
  }
  return $result;
}
/**
 * Checks which type of error has occured and return an array
 * with the error type, error and the line on which it exists
 * @param unknown $error
 * @return multitype:string NULL
 */

function _iati_validator_libxml_createerrorarray($error) {
  $return = "\n";
  $errobag = array();
  switch ($error->level) {
    case LIBXML_ERR_WARNING:
      $return .= "\n Warning $error->code : ";
      break;
    case LIBXML_ERR_ERROR:
      $return .= "\n Error $error->code : ";
      break;
    case LIBXML_ERR_FATAL:
      $return .= "\n Fatal Error $error->code : ";
      break;
  }
  $errobag['ERROR_CODE'] = $return;
  $errobag['ERROR_MESSAGE'] = trim($error->message);
  $errobag['ERROR_LINE'] = $error->line;
  return $errobag;
}

/**
 * This will print each error type, with corresponding error and the lines on which it exists
 * @return $arrayoerrors. An array of errors
 */
function _iati_validator_libxml_display_errors() {
  $errors = libxml_get_errors();
  $arrayoerrors = array();
  foreach ($errors as $error) {
    $errorset = _iati_validator_libxml_createerrorarray($error);
    $code = $errorset["ERROR_CODE"];
    $message = $errorset["ERROR_MESSAGE"];
    $line = $errorset["ERROR_LINE"];
    $arrayoerrors[$code]['title'] = $message;
    $arrayoerrors[$code]['lines'][] = $line;
  }
  libxml_clear_errors();
  return $arrayoerrors;
}

