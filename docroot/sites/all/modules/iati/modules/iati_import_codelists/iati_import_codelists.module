<?php
/**
 * @file.
 * Function to call class for the code lists to be imported.
 */
function iati_import_codelists_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'OrganisationRole' => array('class_name' => 'OrganisationRole'),
      'ActivityStatus' => array('class_name' => 'ActivityStatus'),
      'Language' => array('class_name' => 'Language'),
      'Organisationtype' => array('class_name' => 'Organisationtype'),
      'ActivityFlowType' => array('class_name' => 'ActivityFlowType'),
      'CollaborationType' => array('class_name' => 'CollaborationType'),
      'FinancialTypeLevel0' => array('class_name' => 'FinancialTypeLevel0'),
      'FinancialTypeLevel1' => array('class_name' => 'FinancialTypeLevel1'),
      'AidTypeLevel0' => array('class_name' => 'AidTypeLevel0'),
      'AidTypeLevel1' => array('class_name' => 'AidTypeLevel1'),
      'SectorLevel0' => array('class_name' => 'SectorLevel0'),
      'SectorLevel1' => array('class_name' => 'SectorLevel1'),
      'BudgetType' => array('class_name' => 'BudgetType'),
      'DefaultTiedStatus' => array('class_name' => 'DefaultTiedStatus'),
      'RecipientCountry' => array('class_name' => 'RecipientCountry'),
      'RecipientRegion' => array('class_name' => 'RecipientRegion'),
      'ActivityScope' => array('class_name' => 'ActivityScope'),
      'DefaultCurrency' => array('class_name' => 'DefaultCurrency'),
      'TransactionType' => array('class_name' => 'TransactionType'),
      'BudgetIdentifier' => array('class_name' => 'BudgetIdentifier'),
      'Locationtype' => array('class_name' => 'Locationtype'),
      'LocationLevel0' => array('class_name' => 'LocationLevel0'),
      'LocationLevel1' => array('class_name' => 'LocationLevel1'),
      'ContCountRelation' => array('class_name' => 'ContCountRelation'),
      'BudgetIdentifierVocabulary' => array('class_name' => 'BudgetIdentifierVocabulary'),
      'ConditionType' => array('class_name' => 'ConditionType'),
      'CountryCodes' => array('class_name' => 'CountryCodes'),
      'DescriptionType' => array('class_name' => 'DescriptionType'),
      'DisbursementChannel' => array('class_name' => 'DisbursementChannel'),
      'DocumentCategory' => array('class_name' => 'DocumentCategory'),
      'FileFormat' => array('class_name' => 'FileFormat'),
      'GazeteerAgency' => array('class_name' => 'GazeteerAgency'),
      'GeographicalPrecision' => array('class_name' => 'GeographicalPrecision'),
      'IndicatorMeasure' => array('class_name' => 'IndicatorMeasure'),
      'LoanRepaymentPeriod' => array('class_name' => 'LoanRepaymentPeriod'),
      'LoanRepaymentType' => array('class_name' => 'LoanRepaymentType'),
      'OrganizationIdentifiers' => array('class_name' => 'OrganizationIdentifiers'),
      'PolicyMarker' => array('class_name' => 'PolicyMarker'),
      'Policysignificance' => array('class_name' => 'Policysignificance'),
      'PublisherType' => array('class_name' => 'PublisherType'),
      'RegioncodeLists' => array('class_name' => 'RegioncodeLists'),
      'RegionVocabulary' => array('class_name' => 'RegionVocabulary'),
      'RelatedActivityType' => array('class_name' => 'RelatedActivityType'),
      'ResultType' => array('class_name' => 'ResultType'),
      'SectorCodeLists' => array('class_name' => 'SectorCodeLists'),
      'VerificationStatus' => array('class_name' => 'VerificationStatus'),
      'Vocabulary' => array('class_name' => 'Vocabulary'),
      'DateTypes' => array('class_name' => 'DateTypes'),
      'ContactType' => array('class_name' => 'ContactType'),
      'AidTypeFlag' => array('class_name' => 'AidTypeFlag'),
    ),
  );
  return $api;
}
/**
 * Implement hook_menu().
 */
 function iati_import_codelists_menu(){
 	 $items['admin/config/admin/codelists'] = array(
	    'title' => 'Import Codelists',
	    'description' => t('Import Code Lists'),
	    'page callback' => 'iati_import_codelists_import_terms',
	    'access callback' => TRUE,
 	 );
 	 $items['admin/config/codelists1'] = array(
 	     'title' => 'Importation Done',
 	     'description' => t('Import iati code lists Importation Completed'),
 	     'page callback' => 'iati_import_Complete',
 	     'access callback' => TRUE,
 	 );
 	 return $items;

 	
 }
 
  function iati_import_complete() {
   return "Import complete";
 } 
 
 function iati_import_codelists_import_terms()
 {

   $batch = iati_import_codelists_batch();
   batch_set($batch); 
  
   batch_process('admin/config/codelists1');
   
 }

 
 function iati_import_codelists_batch($operation="import") {
   //$operation = 'import';
   $limit = array(
       'value' => 0,
       'unit' => 'items',
   );
   
   $update = 0;
   $force = 0;
   
   migrate_migrations();

   $machine_names = array("OrganisationRole","ActivityStatus","Language","Organisationtype","ActivityFlowType","CollaborationType",
    		"FinancialTypeLevel0","FinancialTypeLevel1","AidTypeLevel0","AidTypeLevel1","SectorLevel0","SectorLevel1",
    		"BudgetType","LocationLevel0","LocationLevel1","CountryOutlines","ContCountRelation","DefaultTiedStatus","RecipientCountry",
            "RecipientRegion","ActivityScope","DefaultCurrency","TransactionType","BudgetIdentifier",
            "BudgetIdentifierVocabulary","ConditionType","CountryCodes","DescriptionType",
            "DisbursementChannel","DocumentCategory","FileFormat","GazeteerAgency","GeographicalPrecision",
            "IndicatorMeasure","LoanRepaymentPeriod","LoanRepaymentType","PolicyMarker","Policysignificance",
            "PublisherType","RegioncodeLists","RegionVocabulary","RelatedActivityType","ResultType","SectorCodeLists",
            "VerificationStatus","Vocabulary","OrganizationIdentifiers","DateTypes","ContactType","AidTypeFlag");
    
   $operations = array();
   
   // Rollback in reverse order.
   if (in_array($operation, array('rollback', 'rollback_and_import'))) {
     $machine_names = array_reverse($machine_names);
     foreach ($machine_names as $machine_name) {
       $operations[] = array('migrate_ui_batch', array('rollback', $machine_name, $limit, $force));
     }
     // Reset order of machines names in preparation for final operation.
     $machine_names = array_reverse($machine_names);
     $operation = ($operation == 'rollback_and_import') ? 'import' : NULL;
   }
   
   // Perform non-rollback operation, if one exists.
  /* if ($operation) {
     foreach ($machine_names as $machine_name) {
       $migration = Migration::getInstance($machine_name);
       switch ($operation) {
         case 'import':
           // Update (if necessary) once, before starting
           if ($update && method_exists($migration, 'prepareUpdate')) {
             $migration->prepareUpdate();
           }
           $operations[] = array('migrate_ui_batch', array($operation, $machine_name, $limit, $force));
           break;
         case 'stop':
           $migration->stopProcess();
           break;
         case 'reset':
           $migration->resetStatus();
           break;
       }
     }
   }*/
   
   // Only rollback and import operations will need to go through Batch API.
   if (count($operations) > 0) {
     $batch = array(
         'operations' => $operations,
         'title' => t('Migration processing'),
         'file' => drupal_get_path('module', 'migrate_ui') . '/migrate_ui.pages.inc',
         'init_message' => t('Starting migration process'),
         'progress_message' => t(''),
         'error_message' => t('An error occurred. Some or all of the migrate processing has failed.'),
         'finished' => 'migrate_ui_batch_finish',
     );
     return ($batch);
   }
   return FALSE;
 }

/**
 * 
 * @return boolean
 */ 
function iati_import_codelists_imported() {
   //$groups =  iati_import_codelists_migrate_api();
   $machine_names = array("OrganisationRole","ActivityStatus","Language","Organisationtype","ActivityFlowType","CollaborationType",
       "FinancialTypeLevel0","FinancialTypeLevel1","AidTypeLevel0","AidTypeLevel1","SectorLevel0","SectorLevel1",
       "BudgetType","LocationLevel0","LocationLevel1","CountryOutlines","ContCountRelation","DefaultTiedStatus","RecipientCountry",
       "RecipientRegion","ActivityScope","DefaultCurrency","TransactionType","BudgetIdentifier",
       "BudgetIdentifierVocabulary","CountryCodes","ConditionType","DescriptionType",
       "DisbursementChannel","DocumentCategory","FileFormat","GazeteerAgency","GeographicalPrecision","IndicatorMeasure",
       "LoanRepaymentPeriod","LoanRepaymentType","PolicyMarker","Policysignificance","PublisherType",
       "RegioncodeLists","RegionVocabulary","RelatedActivityType","ResultType","SectorCodeLists","VerificationStatus","Vocabulary",
       "OrganizationIdentifiers","DateTypes","ContactType","AidTypeFlag");
   $machine_names = array("OrganisationRole");
 
   try {
     foreach ($machine_names as $machine_name) {
       $migration = Migration::getInstance($machine_name);
       // $has_counts = TRUE;
       if (method_exists($migration, 'sourceCount') && method_exists($migration, 'importedCount')) {
         $total = $migration->sourceCount("");
         $imported = $migration->importedCount();
         if($total == $imported) {
           return TRUE;
         }
       }
     }
     return FALSE;
   }
   catch (MigrateException $e) {
     drupal_set_message($e->getMessage());
     return FALSE;
   }
}