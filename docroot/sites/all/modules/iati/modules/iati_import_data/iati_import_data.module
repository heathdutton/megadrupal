<?php
/**
 * @file.
 * Function to call class for the code lists to be imported.
 */
function iati_import_data_migrate_api() {
  $api = array(
    'api' => 2,
    'groups' => array(
          'data_import' => array(
              'title' => t('Data Import'),
              'default_format' => 'filtered_html',
          ),
      ),
    'migrations' => array(
        'DataOrganisation' => array('class_name' => 'DataOrganisation', 'group_name' => 'data_import'),
        'DataActivity' => array('class_name' => 'DataActivity', 'group_name' => 'data_import'),

      ),
  );
  return $api;
}

function iati_import_data_get_activity_term($xmlcode, $datatable, $classname, $mapping) {
  $sourcemaptable = str_replace($datatable, $classname, $mapping);
  $sources = db_select($sourcemaptable, 'mt')
    ->fields('mt', array('sourceid1', 'destid1'))
    ->condition('sourceid1', $xmlcode)
    ->execute()
    ->fetchAssoc();
  return taxonomy_term_load($sources ['destid1'])->name;
}

/**
 * Implement the hook_menu().
 */
function iati_import_data_menu() {
  $items['admin/config/iati/settings/import_activity'] = array(
    'title' => t ('Import IATI Data from URL'),
  	'description' => t ('link to activity file or organisation file'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iati_import_data_form'),
    'access arguments' => array('administer iati_import_data'),
    //'access callback' => TRUE,
    'access arguments' => array('administer iati'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/**
 * Implementing iati_import_data_activity_form().
 */
function iati_import_data_form() {
  $form['file_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL of the file' ),
    '#required' => TRUE,
    '#description' => t('Please provide the url of the file containing activity data or orgainisation data for importing.'),
  );
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Import Data'),
  );
  return $form;
}
/**
 * Implements hook_form_submit().
 */
function iati_import_data_form_submit($form, &$form_state) {

	$migrations = array();
	switch($form_state['doctype']) {
	  case "iati-activities":
	  	$migrations = array(
		  	'DataActivity', 'DataActivityBudget', 'LatLongLocationData',
		  	'DataParticipateOrg','DataReportOrg','RelationOrgRoleFunding',
		  	'RelationOrgRoleExtending','RelationOrgRoleImplementing',
		  	'RelationOrgRoleAccountable'
	  	);
	  	break;
	  case "iati-organisations":
	  	$migrations = array(
		  	'DataOrganisation', 'DataTotalBudget', 'DataRecipientBudget',
		  	'DataCountryBudget'
	  	);
	  	break;
	  default:
	    //Do something general
	}

	$batch = iati_import_data_import_url($form_state['values']['file_url'], $migrations);
	batch_set($batch);


}
/**
 * Implements hook_form_validate().
 */
function iati_import_data_form_validate($form, &$form_state) {
	// Run the migrations.
	$url = $form_state ['values'] ['file_url'];
	$form_state ['doctype'] = "";
	$result = iati_validator_filevalidator($url);
  if(empty($result['validity']) && !empty($result['errors'])) {
		foreach($result['errors'] as $errorcat) {
			form_set_error('file_url', "Invalid File" . $errorcat['title'] . " On lines:" . implode(", ", $errorcat['lines']));
		}
	} elseif (!empty($result['validity'])) {
		 $form_state ['doctype'] = $result['doctype'];
	}

}




/**
* Implementing iati_import_data_organisation_form().
*/
function iati_import_data_organisation_form() {
  $form ['file_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of the file'),
    '#required' => TRUE,
    '#description' => t ('Please enter the url of the file containing data that you are importing.')
  );
  $form ['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Import Data')
  );
  return $form;
}

/**
* Implements hook_form_submit().
*/
function iati_import_data_organisation_form_submit($form, &$form_state) {
  // Run the migrations.
  $url = $form_state ['values'] ['file_url'];
  $migrations = array('DataOrganisation', 'DataTotalBudget', 'DataRecipientBudget', 'DataCountryBudget');
  iati_import_data_import_url($url, $migrations);
}

function iati_import_data_import_url2($url, $migrations) {
  // Make sure some required code is available.
  // module_load_include('inc', 'migrate_ui', 'migrate_ui.pages');

  foreach($migrations as $migration){
   // $machine_name = $migration . str_replace('-', '', drupal_strtolower(pathinfo($url, PATHINFO_FILENAME)));
    //$machine_names[] = $machine_name;
    //Migration::registerMigration($migration, $machine_name, array('source_file' => $url));
    $machine_names[] = $migration;
  }

  // Doing the actual data import.
  foreach ($machine_names as $machine_name) {
    $migration = Migration::getInstance($machine_name, $machine_name, array('source_file' => $url));
    // Import the data. 100 items per batch.
    // $result = $migration->processImport(array('limit' => array('unit' => 'items', 'value' => 0), 'force' => FALSE));
  }

}


function iati_import_data_import_url($url, $migrations) {
  $operation = 'import';
  $limit = array(
      'value' => 0,
      'unit' => 'items',
  );

  $update = 0;
  $force = 0;

  foreach($migrations as $migration){
    $machine_names[] = $migration;
  }

    $operations = array();

    if ($operation) {
      foreach ($machine_names as $machine_name) {
        $operations[] = array('iati_import_data_batch', array($operation, $machine_name, $limit, $force,$url));
      }
    }

    // Only rollback and import operations will need to go through Batch API.
    if (count($operations) > 0) {
      $batch = array(
          'operations' => $operations,
          'title' => t('Migration processing'),
          'file' => drupal_get_path('module', 'migrate_ui') . '/migrate_ui.pages.inc',
          'init_message' => t('Starting migration process'),
          'progress_message' => t(''),
          'error_message' => t('An error occurred. Some or all of the migrate processing has failed.'),
          'finished' => 'migrate_ui_batch_finish',
      );
      return ($batch);
    }
    return FALSE;
}

function iati_import_data_batch($operation, $machine_name, $limit, $force = FALSE, $url='', &$context) {
  // If we got a stop message, skip everything else
  if (isset($context['results']['stopped'])) {
    $context['finished'] = 1;
    return;
  }

  //$migration = Migration::getInstance($machine_name);
  $migration = Migration::getInstance($machine_name, $machine_name, array('source_file' => $url));

    // Messages generated by migration processes will be captured in this global
  global $_migrate_messages;
  $_migrate_messages = array();
  Migration::setDisplayFunction('migrate_ui_capture_message');

  // Perform the requested operation
  $result = $migration->processImport(array('limit' => $limit, 'force' => $force));


  switch ($result) {
    case Migration::RESULT_INCOMPLETE:
      // Default to half-done, in case we can't get a more precise fix
      $context['finished'] = .5;
      if (method_exists($migration, 'sourceCount')) {
        $total = $migration->sourceCount();
        if ($total > 0 && method_exists($migration, 'importedCount')) {
          $processed = $migration->processedCount();

          $to_update = $migration->updateCount();
          $context['finished'] = ($processed-$to_update)/$total;
        }
      }
      break;
    case MigrationBase::RESULT_SKIPPED:
      $_migrate_messages[] = t("Skipped !name due to unfulfilled dependencies: !depends",
      array(
      '!name' => $machine_name,
      '!depends' => implode(", ", $migration->incompleteDependencies()),
      ));
      $context['finished'] = 1;
      break;
    case MigrationBase::RESULT_STOPPED:
      $context['finished'] = 1;
      // Skip any further operations
      $context['results']['stopped'] = TRUE;
      break;
    default:
      $context['finished'] = 1;
    break;
  }

  // Add any messages generated in this batch to the cumulative list
  foreach ($_migrate_messages as $message) {
    $context['results'][] = $message;
  }

  // While in progress, show the cumulative list of messages
  $full_message = '';
  foreach ($context['results'] as $message) {
    $full_message .= $message . '<br />';
  }
  $context['message'] = $full_message;
}
