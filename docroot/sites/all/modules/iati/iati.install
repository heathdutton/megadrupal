<?php
/**
 * @file
 * Install, update and uninstall functions for the iati module.
 */

/**
 * Implements hook_schema().
 */
function iati_schema() {
  $schema = array();

  $schema['iati_budget'] = array(
    'title' => 'IATI Budget',
    'description' => "This element represents the organisation's total planning budget for a calendar period (typically, but not necessarily, a year). This element may be repeated for each period described (normally, periods should be consecutive).",
    'fields' => array(
      'bid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Id of the budget.',
      ),
      'created' => array(
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Datetime the budget was inserted in the database.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
        'description' => 'Date the budget was changed.',
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
        'description' => 'User created the budget.',
      ),
      'period_start' => array(
        'type' => 'int',
        'length' => 255,
        'not null' => FALSE,
        'unsigned' => TRUE,
        'description' => 'The starting date for the budget period, in ISO 860 format (e.g. 2010-04-01 for 1 April 2010).  This element must be present.',
      ),
      'period_start_text' => array(
        'description' => 'Start period Text',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'period_end' => array(
        'type' => 'int',
        'length' => 255,
        'not null' => FALSE,
        'unsigned' => TRUE,
        'description' => 'The ending date for the budget period, in ISO 8601 format (e.g. 2011-03-31 for 31 March 2011). This element must be present.',
      ),
      'period_end_text' => array(
        'description' => 'End period Text',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'value_amount' => array(
        'type' => 'int',
        'size' => 'big',
        'default' => 0,
        'unsigned' => FALSE,
        'not null' => TRUE,
        'description' => "The total value of the organisation's aid budget for this period. This element is required.",
      ),
      'value_date' => array(
        'type' => 'int',
        'length' => 255,
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => "The date the amount was disbursed, which will be used to calculate the exchange rates on that date",
      ),
    ),
    'primary key' => array('bid'),
  );

  $schema['iati_location'] = array(
    'title' => 'location',
    'fields' => array(
      'lid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Id of the location.',
      ),
      'created' => array(
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Datetime the budget was inserted in the database.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Date the budget was changed.',
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
        'description' => 'User created the budget.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Name of location',
        'default' => '',
      ),
      'description' => array(
        'description' => 'Description of location',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
    ),
    'primary key' => array('lid'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function iati_install() {
  $field = array(
    'field_name' => 'field_iati_geofield',
    'type' => 'geofield',
    'module' => 'geofield',
    'entity_types' => array('iati_location'),
    'translatable' => FALSE,
  );
  field_create_field($field);

  $instance = array(
    'entity_type' => 'iati_location',
    'field_name' => 'field_iati_geofield',
    'bundle' => 'iati_location',
    'label' => 'Iati Location',
    'description' => "A geographical location.  <a class class='iatidoc' href='http://iatistandard.org/activities-standard/location/'>Read More</a>",
    'widget' => array(
      'type' => 'geofield_openlayers',
    ),
    'settings' => array('display_summary' => TRUE),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'geofield_wkt',
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'hidden',
      ),
    ),
  );
  field_create_instance($instance);

  $vocabulary = taxonomy_vocabulary_machine_name_load('iati_admin_boundaries');
  /*
   * The field definition is already in the feature, we do not have to define a
   * second time.
   * It also means the feature should be enabled before the module!
   */
  $instance = array(
    'field_name' => $vocabulary->machine_name,
    'entity_type' => 'iati_location',
    'label' => $vocabulary->name,
    'bundle' => 'iati_location',
    'description' => $vocabulary->description,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);

  $field = array(
    'field_name' => 'field_iati_activity_ref',
    'type' => 'entityreference',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('iati_activity')),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_iati_activity_ref',
    'entity_type' => 'iati_location',
    'bundle' => 'iati_location',
    'label' => 'Activity',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('iati_activity')),
    ),
  );
  field_create_instance($instance);

  $instance = array(
    'field_name' => 'field_iati_activity_ref',
    'entity_type' => 'iati_budget',
    'bundle' => 'iati_budget',
    'label' => 'Activity',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('iati_activity')),
    ),
  );
  field_create_instance($instance);

  $field = array(
    'field_name' => 'field_iati_org_ref',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('iati_organisation')),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_iati_org_ref',
    'entity_type' => 'iati_budget',
    'bundle' => 'iati_budget',
    'label' => 'Organisation',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('iati_organisation')),
    ),
  );
  field_create_instance($instance);

  $vocabulary = taxonomy_vocabulary_machine_name_load('budget_type');
  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'iati_budget',
    'label' => $vocabulary->name,
    'bundle' => 'iati_budget',
    'description' => $vocabulary->description,
    'widget' => array(
      'type' => 'options_select',
      'weight' => 8,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);

  $field = array(
    'field_name' => 'field_recipient_org',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('iati_organisation')),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_recipient_org',
    'entity_type' => 'iati_budget',
    'bundle' => 'iati_budget',
    'label' => 'Recipient Organisation',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
      'weight' => 9,
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('iati_organisation')),
    ),
  );
  field_create_instance($instance);

  $vocabulary = taxonomy_vocabulary_machine_name_load('iati_admin_boundaries');
  $field = array(
    'field_name' => 'field_recipient_country',
    'type' => 'taxonomy_term_reference',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_recipient_country',
    'entity_type' => 'iati_budget',
    'label' => 'Recipient Country',
    'bundle' => 'iati_budget',
    'description' => $vocabulary->description,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => 10,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);
}
/**
 * Function to uninstall the module.
 */
function iati_uninstall() {
  db_drop_table('iati_budget');
  db_drop_table('iati_location');

  db_drop_table('field_data_field_iati_geofield');
  db_drop_table('field_revision_field_iati_geofield');
  db_query("delete from {field_config} where field_name='field_iati_geofield'");
  db_query("delete from {field_config_instance} where field_name='field_iati_geofield'");

  db_drop_table('field_data_iati_admin_boundaries');
  db_drop_table('field_revision_iati_admin_boundaries');
  db_query("delete from {field_config_instance} where field_name='iati_admin_boundaries'");

  db_drop_table('field_data_field_iati_activity_ref');
  db_drop_table('field_revision_field_iati_activity_ref');
  db_query("delete from {field_config} where field_name='field_iati_activity_ref'");
  db_query("delete from {field_config_instance} where field_name='field_iati_activity_ref'");

  db_drop_table('field_data_field_iati_org_ref');
  db_drop_table('field_revision_field_iati_org_ref');
  db_query("delete from {field_config} where field_name='field_iati_org_ref'");
  db_query("delete from {field_config_instance} where field_name='field_iati_org_ref'");

  db_drop_table('field_data_field_budget_type');
  db_drop_table('field_revision_field_budget_type');
  db_query("delete from {field_config} where field_name='field_budget_type'");
  db_query("delete from {field_config_instance} where field_name='field_budget_type'");

  db_drop_table('field_data_field_recipient_org');
  db_drop_table('field_revision_field_recipient_org');
  db_query("delete from {field_config} where field_name='field_recipient_org'");
  db_query("delete from {field_config_instance} where field_name='field_recipient_org'");

  db_drop_table('field_data_field_recipient_country');
  db_drop_table('field_revision_field_recipient_country');
  db_query("delete from {field_config} where field_name='field_recipient_country'");
  db_query("delete from {field_config_instance} where field_name='field_recipient_country'");
}

function iati_requirements($phase) {
	$requirements = array();
	// Ensure translations don't break during installation.
	$t = get_t();
	
  switch ($phase) {
  	case 'runtime':
		 	// Check that the OCI8 extension is loaded

		 	//if (!iati_import_codelists_imported()) {
		 	  //$requirements['iati_codelists'] = array('title' => $t('Oracle extension'));		 		
		 		$requirements['iati_codelist'] = array('title' => $t('IATI Codelists.'));
		  	$requirements['iati_codelist']['description'] = $t('Codelists not imported.
		  		Follow the link to @link.',
		  	  array(
		  	  		'@link' => l('import code lists', 'http://us.php.net/manual/en/book.oci8.php')
		  	  )
		  	);
	  		$requirements['iati_codelist']['severity'] = REQUIREMENT_INFO;
	  		$requirements['iati_codelist']['value'] = "40";
	  		break;
		  //}
		  

		  
		  
	}	  			
	
	return $requirements;
}

