<?php
/**
 * @file
 * Tests for iati.module.
 */

/**
 * Provides common helper methods for Iati module tests.
 */
class IatiWebTestCase extends DrupalWebTestCase {
  protected $user;
  protected $authenticateduser;

  /**
   * Function that creates an admin user.
   */
  public function drupalCreateAdminUser(array $permissions = array()) {
    $roles = user_roles();
    $index = array_search('administrator', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'administrator';
    return user_save($user);
  }
  /**
   * Function that creates an authenticated user.
   */
  public function drupalCreateAuthUser(array $permissions = array()) {
    $roles = user_roles();
    $index = array_search('authenticated user', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'authenticated user';
    return user_save($user);
  }
  /**
   * Function that creates a location.
   */
  public function addLocation() {
    //$this->drupalGet('node/add/iati-activity');
    $this->drupalPostAJAX(NULL, NULL, array('ief-4e363cd5981238879925c605fe520b248f047dd6-add' => t('Add new entity')));
    $location['field_iati_location[und][form][name]'] = 'Rakai';
    $location['field_iati_location[und][form][description]'] = 'A rural district in the north of Uganda';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lat]'] = '2.030170';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lon]'] = '33.642753';
    $this->drupalPostAJAX(NULL, $location, array('ief-add-submit-4e363cd5981238879925c605fe520b248f047dd6' => t('Create entity')));
  }
  /**
   * Function that creates a country budget item.
   */
  public function addCountryBudgetItem() {
    $create['field_country_budget_items[und][0][field_budget_vocabulary][und]'] = '199';
    $create['field_country_budget_items[und][0][field_budget_budget_item][und][0][field_budget_code][und]'] = '55';
    $create['field_country_budget_items[und][0][field_budget_budget_item][und][0][field_percentage][und][0][value]'] = 100;
    return $create;
  }
  /**
   * Function that creates a planned disbursement.
   */
  public function addPlannedDisbursement() {
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_disbursement_amount][und][0][value]'] = 10000;
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_date][und][0][value][date]'] = '2014-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_iso_value_date_format][und][0][value][date]'] = '2014-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_free_value_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_iso_value_date_format][und][0][value][date]'] = '2014-10-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_free_ds_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_currency][und]'] = '520';
    $create['field_pland_disbursement[und][0][field_disbursement_updated][und][0][value][date]'] = '2014-09-11';
    return $create;
  }
  /**
   * Function that creates a transaction.
   */
  public function addTransaction() {
    $create['field_iati_acitivity_transaction[und][0][field_transaction_ref][und][0][value]'] = 'T01';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_aid_type][und]'] = '37';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_description][und][0][value]'] = 'Travel';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_d_channel][und]'] = '645';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_finance_type][und]'] = '686';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_flow_type][und]'] = '3';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_organisation_ref][und]'] = '_none';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_provider_activity_id][und][0][value]'] = '2';
    $create['field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_reciever_organisation][und]'] = '_none';
    $create['field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_provider_activity_id][und][0][value]'] = '2';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_tied_status][und]'] = '637';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_date][und][0][value][date]'] = '2013-12-31';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_type][und]'] = '1504';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_value][und][0][value]'] = 1729;
    return $create;
  }
  /**
   * Function that creates a condition.
   */
  public function addCondition() {
    $create['field_iati_activity_conditions[und][0][field_condition_attached][und]'] = '1';
    $create['field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_type][und]'] = '211';
    $create['field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_free_text][und][0][value]'] = 'use open aid map';
    return $create;
  }
  /**
   * Function that creates a result.
   */
  public function addResult() {
    $create['field_iati_activity_result[und][0][field_result_type][und]'] = '1270';
    $create['field_iati_activity_result[und][0][field_aggregation_status][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_ascending][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_d_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_indicator_d_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_peiod_start_date][und][0][value][date]'] = '2012-10-12';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_period_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_date][und][0][value][date]'] = '2012-12-31';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_value][und][0][value]'] = 200;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_value][und][0][value]'] = 100;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_year][und][0][value][date]'] = '2016';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_value][und][0][value]'] = 150;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_measure][und]'] = '743';
    return $create;
   }
  /**
   * Function that creates a CRS entity.
   */
  public function addCRS() {
    $create['field_iati_activity_crs_add[und][0][field_crs_add_aid_type_flag][und]'] = '19';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_c_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_first_date][und][0][value][date]'] = '2014-01-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_final_date][und][0][value][date]'] = '2020-12-31';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_repayment_plan][und]'] ='927';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_repayment_type][und]'] = '929';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_1][und][0][value]'] = '10';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_2][und][0][value]'] = '20';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_received][und][0][value]'] = '200000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_outstanding][und][0][value]'] = '1500000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_currency][und]'] = '520';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_value_date][und][0][value][date]'] = '2014-01-01';
    return $create;
  }
  /**
   * Function that adds FSS to an Activity.
   */
  public function addFSS() {
    $create['field_iati_activity_fss[und][0][field_extraction_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_fss[und][0][field_extraction_priority][und]'] = '1';
    $create['field_iati_activity_fss[und][0][field_phase_out_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_forecast_value][und][0][value]'] = 20130;
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_forecast_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_currency][und]'] = '520';
    return $create;
  }
  /**
   * Function that creates a Contact Info entity with the ideal values.
   */
  public function addContact() {
    $create['field_iati_activity_contact[und][0][field_contact_person_name][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_organisation][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_telephone][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_email][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_mailing_address][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_website][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_type][und]'] = '214';
    return $create;
    }
  /**
   * Function that creates a budget.
   */
  public function addBudget() {
    //$this->drupalGet('node/add/iati-activity');
    $this->drupalPost(NULL, NULL, t('Add New Budget'));
    $budget['field_iati_activity_budget[und][form][value_amount]'] = '308975';
    $budget['field_iati_activity_budget[und][form][value_date][date]'] = '2014-02-11';
    $budget['field_iati_activity_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_iati_activity_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_iati_activity_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_iati_activity_budget[und][form][period_end_text]'] = $this->randomName(16);
    $budget['field_iati_activity_budget[und][form][field_budget_type][und]'] = '200';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Function that creates an annual total budget.
   */
  public function addAnnualTotalBudget() {
    // Import budget type codelist.
    // $this->drupalGet('admin/content/migrate');
    // $checkboxes['dashboard[BudgetType]'] = 'TRUE';
    // $checkboxes['operation'] = 'import';
    // $this->drupalPost(NULL, $checkboxes, t('Execute'));
    // $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-568889966aa65ab9e4df198cb20771298407993b-add', 'Add new annual total budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Annual Total Budget'));
    $budget['field_total_budget[und][form][value_amount]'] = '308975';
    $budget['field_total_budget[und][form][value_date][date]'] = '2014-02-11';
    $budget['field_total_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_total_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_total_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_total_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_total_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Function that creates a recipient organisation budget.
   */
  public function addReceipientOrganisationBudget() {
    // Import budget type codelist.
    // $this->drupalGet('admin/content/migrate');
    // $checkboxes['dashboard[BudgetType]'] = 'TRUE';
    // $checkboxes['operation'] = 'import';
    // $this->drupalPost(NULL, $checkboxes, t('Execute'));
    // $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-886ec23459461c8a365b581297bb24b56e25bc4e-add', 'Add Receipient Organisation Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_org_budget[und][form][value_amount]'] = '308975';
    $budget['field_recipient_org_budget[und][form][value_date][date]'] = '2014-02-11';
    $budget['field_recipient_org_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_recipient_org_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_recipient_org_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_org_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Function that creates a recepient countries budget.
   */
  public function addReceipientCountriesBudget() {
    // Import budget type codelist.
    // $this->drupalGet('admin/content/migrate');
    // $checkboxes['dashboard[BudgetType]'] = 'TRUE';
    // $checkboxes['operation'] = 'import';
    // $this->drupalPost(NULL, $checkboxes, t('Execute'));
    // $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-3e50ce2aaaf62b8c77775e32734ddd684abecb3c-add', 'Add Receipient Countries Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_country_budget[und][form][value_amount]'] = '308975';
    $budget['field_recipient_country_budget[und][form][value_date][date]'] = '2014-02-11';
    $budget['field_recipient_country_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_recipient_country_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_country_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_recipient_country_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_country_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Function that creates an organisation with only the required values.
   */
  public function createOrganisation($name) {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-organisation');
    $orgsub['title'] = $name;
    $orgsub['field_iati_identifier[und][0][value]'] = 'GB-CHC-283302';
    $this->drupalPost(NULL, $orgsub, ('Save'));
    $this->assertText('IATI Organisation ' . $name . ' has been created.', 'Organisation successfully created.');
  }
  /**
   * Function that creates an activity with only the required values. 
   */
  public function createActivity($name) {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = $name;
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $this->drupalPost(NULL, $create, t('Save'));
    $this->assertText('IATI Activity ' . $name . ' has been created.', 'Activity successfully created.');
  }
  /**
   * Function that imports the necessary codelists.
   */
  public function importCodelists() {
    // $this->drupalGet('admin/modules');
    // $modules['modules[Development][migrate_ui][enable]'] = 'TRUE';
    // $this->drupalPost(NULL, $modules, t('Save configuration'));
    $this->drupalGet('admin/content/migrate');
    $checkboxes['dashboard[ActivityFlowType]'] = 'TRUE';
    $checkboxes['dashboard[ActivityScope]'] = 'TRUE';
    $checkboxes['dashboard[ActivityStatus]'] = 'TRUE';
    $checkboxes['dashboard[AidTypeFlag]'] = 'TRUE';
    $checkboxes['dashboard[AidTypeLevel0]'] = 'TRUE';
    $checkboxes['dashboard[AidTypeLevel1]'] = 'TRUE';
    $checkboxes['dashboard[BudgetIdentifier]'] = 'TRUE';
    $checkboxes['dashboard[BudgetIdentifierVocabulary]'] = 'TRUE';
    $checkboxes['dashboard[BudgetType]'] = 'TRUE';
    $checkboxes['dashboard[CollaborationType]'] = 'TRUE';
    $checkboxes['dashboard[ContactType]'] = 'TRUE';
    $checkboxes['dashboard[ConditionType]'] = 'TRUE';
    $checkboxes['dashboard[CountryCodes]'] = 'TRUE';
    $checkboxes['dashboard[DataActivity]'] = 'TRUE';
    $checkboxes['dashboard[DataOrganisation]'] = 'TRUE';
    $checkboxes['dashboard[DateTypes]'] = 'TRUE';
    $checkboxes['dashboard[DefaultCurrency]'] = 'TRUE';
    $checkboxes['dashboard[DefaultTiedStatus]'] = 'TRUE';
    $checkboxes['dashboard[DescriptionType]'] = 'TRUE';
    $checkboxes['dashboard[DisbursementChannel]'] = 'TRUE';
    $checkboxes['dashboard[DocumentCategory]'] = 'TRUE';
    $checkboxes['dashboard[FileFormat]'] = 'TRUE';
    $checkboxes['dashboard[FinancialTypeLevel0]'] = 'TRUE';
    $checkboxes['dashboard[FinancialTypeLevel1]'] = 'TRUE';
    $checkboxes['dashboard[GazeteerAgency]'] = 'TRUE';
    $checkboxes['dashboard[GeographicalPrecision]'] = 'TRUE';
    $checkboxes['dashboard[IndicatorMeasure]'] = 'TRUE';
    $checkboxes['dashboard[Language]'] = 'TRUE';
    $checkboxes['dashboard[LatLongLocationData]'] = 'TRUE';
    $checkboxes['dashboard[LoanRepaymentPeriod]'] = 'TRUE';
    $checkboxes['dashboard[LoanRepaymentType]'] = 'TRUE';
    $checkboxes['dashboard[LocationLevel0]'] = 'TRUE';
    $checkboxes['dashboard[Locationtype]'] = 'TRUE';
    $checkboxes['dashboard[OrganisationRole]'] = 'TRUE';
    $checkboxes['dashboard[Organisationtype]'] = 'TRUE';
    $checkboxes['dashboard[PolicyMarker]'] = 'TRUE';
    $checkboxes['dashboard[Policysignificance]'] = 'TRUE';
    $checkboxes['dashboard[PublisherType]'] = 'TRUE';
    $checkboxes['dashboard[RecipientCountry]'] = 'TRUE';
    $checkboxes['dashboard[RecipientRegion]'] = 'TRUE';
    $checkboxes['dashboard[RegioncodeLists]'] = 'TRUE';
    $checkboxes['dashboard[RegionVocabulary]'] = 'TRUE';
    $checkboxes['dashboard[RelatedActivityType]'] = 'TRUE';
    $checkboxes['dashboard[RelationMigrateEntityReference]'] = 'TRUE';
    $checkboxes['dashboard[RelationMigrateNodeReference]'] = 'TRUE';
    $checkboxes['dashboard[RelationMigrateTermReference]'] = 'TRUE';
    $checkboxes['dashboard[RelationMigrateUserReference]'] = 'TRUE';
    $checkboxes['dashboard[RelationOrgRoleAccountable]'] = 'TRUE';
    $checkboxes['dashboard[RelationOrgRoleExtending]'] = 'TRUE';
    $checkboxes['dashboard[RelationOrgRoleFunding]'] = 'TRUE';
    $checkboxes['dashboard[RelationOrgRoleImplementing]'] = 'TRUE';
    $checkboxes['dashboard[ResultType]'] = 'TRUE';
    $checkboxes['dashboard[SectorCodeLists]'] = 'TRUE';
    $checkboxes['dashboard[SectorLevel0]'] = 'TRUE';
    $checkboxes['dashboard[TransactionType]'] = 'TRUE';
    $checkboxes['dashboard[VerificationStatus]'] = 'TRUE';
    $checkboxes['dashboard[Vocabulary]'] = 'TRUE';
    $checkboxes['dashboard[SectorLevel1]'] = 'TRUE';
    $checkboxes['dashboard[LocationLevel1]'] = 'TRUE';
    $checkboxes['dashboard[ContCountRelation]'] = 'TRUE';
    $checkboxes['dashboard[CountryOutlines]'] = 'TRUE';
    $checkboxes['operation'] = 'import';
    $this->drupalPost(NULL, $checkboxes, t('Execute'));
    $this->drupalGet('');
  }
}
/**
 * This class loads the structure page of each vocabulary or content type 
 * that is created by the iati module and checks that it has the right fields.
 */
class IatiStructureTestCase extends IatiWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => 'IATI Structure',
      'description' => 'Test the whether the iati vocabularies and content types have the proper structure.',
      'group' => 'Iati');
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('iati'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }
  /**
   * Test that all the iati vocabularies are listed on the taxonomy page.
   * Then check that they have the correct number of fields.
   */
  public function testIatiVocabularyList() {
    // Navigate to the Taxonomy page.
    $this->drupalGet("admin/structure/taxonomy");
    // Assert that each vocabulary is displayed on the page.
    $this->assertText('Activity  Legacy Data', 'Activity Legacy Data vocabulary is present');
    $this->assertText('Activity Aid Type', 'Activity Aid Type vocabulary is present');
    $this->assertText('Activity Aid Type Flag', 'Activity Aid Type Flag vocabulary is present');
    $this->assertText('Activity Capital Spend', 'Activity Capital Spend vocabulary is present');
    $this->assertText('Activity Collaboration Type', 'Activity Collaboration Type vocabulary is present');
    $this->assertText('Activity Date Type', 'Activity Date Type vocabulary is present');
    $this->assertText('Activity Finance Type', 'Activity Finance Type vocabulary is present');
    $this->assertText('Activity FlowType', 'Activity FlowType vocabulary is present');
    $this->assertText('Activity Recipient Country', 'Activity Recipient Country vocabulary is present');
    $this->assertText('Activity Recipient Region', 'Activity Recipient Region vocabulary is present');
    $this->assertText('Activity Scope', 'Activity Scope vocabulary is present');
    $this->assertText('Activity Status', 'Activity Status vocabulary is present');
    $this->assertText('Activity Tied Status', 'Activity Tied Status vocabulary is present');
    $this->assertText('Budget Identifier', 'Budget Identifier vocabulary is present');
    $this->assertText('Budget Identifier Vocabulary', 'Budget Identifier Vocabulary vocabulary is present');
    $this->assertText('Budget Type', 'Budget Type vocabulary is present');
    $this->assertText('Condition Type', 'Condition Type vocabulary is present');
    $this->assertText('Country', 'Country vocabulary is present');
    $this->assertText('Default Currency', 'Default Currency vocabulary is present');
    $this->assertText('Description Type', 'Description Type vocabulary is present');
    $this->assertText('Disbursement Channel', 'Disbursement Channel vocabulary is present');
    $this->assertText('Document Category', 'Document Category vocabulary is present');
    $this->assertText('File Format', 'File Format vocabulary is present');
    $this->assertText('Gazetteer Agency', 'Gazetteer Agency vocabulary is present');
    $this->assertText('Geographical Precision', 'Geographical Precision vocabulary is present');
    $this->assertText('IATI Activity Sector', 'IATI Activity Sector vocabulary is present');
    $this->assertText('IATI Admin Boundaries', 'IATI Admin Boundaries vocabulary is present');
    $this->assertText('IATI Organisation Roles', 'IATI Organisation Roles vocabulary is present');
    $this->assertText('IATI Organisation Type', 'IATI Organisation Type vocabulary is present');
    $this->assertText('Indicator Measure', 'Indicator Measure vocabulary is present');
    $this->assertText('Languages', 'Languages vocabulary is present');
    $this->assertText('Loan Repayment Period', 'Loan Repayment Period vocabulary is present');
    $this->assertText('Loan Repayment Type', 'Loan Repayment Type vocabulary is present');
    $this->assertText('Location Type', 'Location Type vocabulary is present');
    $this->assertText('Organisation Identifiers', 'Organisation Identifiers vocabulary is present');
    $this->assertText('Policy Marker', 'Policy Marker vocabulary is present');
    $this->assertText('Policy Significance', 'Policy Significance vocabulary is present');
    $this->assertText('Publisher Type', 'Publisher Type vocabulary is present');
    $this->assertText('Region', 'Region vocabulary is present');
    $this->assertText('Region Vocabulary', 'Region Vocabulary vocabulary is present');
    $this->assertText('Related Activity Type', 'Related Activity Type vocabulary is present');
    $this->assertText('Result Type', 'Result Type vocabulary is present');
    $this->assertText('Sector', 'Sector vocabulary is present');
    $this->assertText('Transaction Type', 'Transaction Type vocabulary is present');
    $this->assertText('Verification Status', 'Verification Status vocabulary is present');
    $this->assertText('Vocabulary', 'Vocabulary vocabulary is present');
    // Navigate to each vocabulary edit page.
    // And assert that it has the right fields.
    $vocab1 = 'activity_aid_type';
    $vocab2 = 'activity_collaboration_type';
    $vocab3 = 'activity_finance_type';
    $vocab4 = 'activity_flowtype';
    $vocab5 = 'activity_status';
    $vocab6 = 'budget_type';
    $vocab7 = 'iati_activity_sector';
    $vocab8 = 'iati_admin_boundaries';
    $vocab9 = 'iati_roles';
    $vocab10 = 'iati_organisation_type';
    $vocab11 = 'languages';
    $vocab12 = 'location_type';
    $vocab13 = 'activity_recipient_country';
    $vocab14 = 'recipient_region';
    $vocab15 = 'activity_scope';
    $vocab16 = 'tied_status';
    $vocab17 = 'default_currency';
    $vocab18 = 'activity_legacy_data';
    $vocab19 = 'activity_capital_spend';
    $vocab20 = 'budget_identifier';
    $vocab21 = 'budget_identifier_vocabulary';
    $vocab22 = 'condition_type';
    $vocab23 = 'country';
    $vocab24 = 'description_type';
    $vocab25 = 'disbursement_channel';
    $vocab26 = 'document_category';
    $vocab27 = 'file_format';
    $vocab28 = 'gazetteer_agency';
    $vocab29 = 'geographical_precision';
    $vocab30 = 'indicator_measure';
    $vocab31 = 'loan_repayment_period';
    $vocab32 = 'loan_repayment_type';
    $vocab33 = 'organisation_identifiers';
    $vocab34 = 'policy_marker';
    $vocab35 = 'policy_significance';
    $vocab36 = 'publisher_type';
    $vocab37 = 'region';
    $vocab38 = 'region_vocabulary';
    $vocab39 = 'related_activity_type';
    $vocab40 = 'result_type';
    $vocab41 = 'sector';
    $vocab42 = 'transaction_type';
    $vocab43 = 'verification_status';
    $vocab44 = 'vocabulary';
    $vocab45 = 'activity_date_type';
    $vocab46 = 'activity_aid_type_flag';
    // Activity Aid Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab1 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Collaboration Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab2 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_langauge', 'field_langauge field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Finance Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab3 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity FlowType.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab4 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Status.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab5 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_langauge', 'field_langauge field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Budget Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab6 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // IATI Activity Sector.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab7 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // IATI Admin Boundaries.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab8 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    $this->assertText('field_level', 'field_level field was created.');
    $this->assertText('field_boundaries', 'field_boundaries field was created.');
    $this->assertText('field_location_type', 'field_location_type field was created.');
    // IATI Organisation Roles.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab9 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // IATI Organisation Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab10 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Languages.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab11 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Location Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab12 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    // Recepient Country.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab13 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Recepient Region.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab14 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Scope.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab15 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Tied Status.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab16 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Default Currency.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab17 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_langauge', 'field_langauge field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Legacy Data.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab18 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    // Activity Capital Spend.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab19 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    // Budget Identifier.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab20 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    $this->assertText('iati_activity_sector', 'iati_activity_sector field was created.');
    $this->assertText('field_category', 'field_category field was created.');
    // Budget Identifier Vocabulary.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab21 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Condition Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab22 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_langauge', 'field_langauge field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Country.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab23 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    $this->assertText('field_langauge', 'field_langauge field was created.');
    // Description Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab24 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Disbursement Channel.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab25 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Document Category.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab26 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    $this->assertText('field_category', 'field_category field was created.');
    $this->assertText('field_category_name', 'field_category_name field was created.');
    // File Format.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab27 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Gazetteer Agency.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab28 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Geographical Precision.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab29. '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Indicator Measure.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab30 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    // Loan Repayment Period.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab31 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Loan Repayment Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab32 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Organisation Identifiers.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab33 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    $this->assertText('field_abbreviation', 'field_abbreviation field was created.');
    // Policy Marker.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab34 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Policy Significance.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab35 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Publisher Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab36 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    // Region.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab37 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Region Vocabulary.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab38 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Related Activity Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab39 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Result Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab40 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Sector.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab41 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    $this->assertText('field_category', 'field_category field was created.');
    $this->assertText('field_category_name', 'field_category_name field was created.');
    $this->assertText('field_category_description', 'field_category_description field was created.');
    // Transaction Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab42 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Verification Status.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab43 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Vocabulary.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab44 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Date Type.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab45 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
    // Activity Aid Type Flag.
    $this->drupalGet('admin/structure/taxonomy/' . $vocab46 . '/fields');
    $this->assertText('name', 'name field was created.');
    $this->assertText('description', 'description field was created.');
    $this->assertText('field_iati_code', 'field_iati_code field was created.');
  }
  /**
   * Test that all the iati content types are listed on the content types page.
   * Then check that they have the correct number of fields.
   */
  public function testIatiContentTypeList() {
    // Navigate to the Content Type page.
    $this->drupalGet("admin/structure/types");
    // Assert that each iati content type is displayed on the page.
    $this->assertText('IATI Activity', 'IATI Activity content type is present');
    $this->assertText('IATI Organisation', 'IATI Organisation content type is present');
    // Navigate to each vocabulary edit page and assert that it has the right fields.
    $ctype1 = 'iati_activity';
    $ctype2 = 'iati_organisation';
    // IATI Activity.
    $this->drupalGet('admin/structure/types/manage/' . $ctype1 . '/fields');
    $this->assertText('title', 'title field was created.');
    $this->assertText('field_iati_identifier', 'field_iati_identifier field was created.');
    $this->assertText('field_other_identifier', 'field_other_identifier field was created.');
    // $this->assertText('field_field_iati_activity_logo', 'field_field_iati_activity_logo field was created.');
    //$this->assertText('iati_admin_boundaries', 'iati_admin_boundaries field was created.');
    $this->assertText('language', 'language field was created.');
    $this->assertText('field_iati_activity_description', 'field_iati_activity_description field was created.');
    $this->assertText('iati_activity_sector', 'iati_activity_sector field was created.');
    $this->assertText('field_iati_activity_date', 'field_iati_activity_date field was created.');
    $this->assertText('field_iati_default_currency', 'field_iati_default_currency field was created.');
    $this->assertText('field_iati_activity_status', 'field_iati_activity_status field was created.');
    $this->assertText('field_iati_activity_website', 'field_iati_activity_website field was created.');
    $this->assertText('field_iati_activity_collabo_type', 'field_iati_activity_collabo_type field was created.');
    $this->assertText('field_iati_activity_aid_type', 'field_iati_activity_aid_type field was created.');
    $this->assertText('field_iati_activity_finance_type', 'field_iati_activity_finance_type field was created.');
    $this->assertText('field_iati_activity_flow_type', 'field_iati_activity_flow_type field was created.');
    $this->assertText('field_iati_activity_budget', 'field_iati_activity_budget field was created.');
    $this->assertText('field_iati_location', 'field_iati_location field was created.');
    // $this->assertText('field_field_iati_activity_doc', 'field_field_iati_activity_doc field was created.');
    // Required for IATI activity standard 1.03.
    // $this->assertText('field_iati_activities', 'field_iati_activities field was created.');
    // $this->assertText('field_iati_activity', 'field_iati_activity field was created.');
    // $this->assertText('field_reporting_organisation', 'field_reporting_organisation field was created.');
    $this->assertText('field_iati_activity_contact', 'field_iati_activity_contact field was created.');
    // $this->assertText('field_participating_organisation', 'field_participating_organisation field was created.');
    $this->assertText('field_activity_scope', 'field_activity_scope field was created.');
    $this->assertText('field_activity_recipient_country', 'field_activity_recipient_country field was created.');
    $this->assertText('field_activity_recipient_region', 'field_activity_recipient_region field was created.');
    $this->assertText('field_country_budget_items', 'field_country_budget_items field was created.');
    $this->assertText('field_policy_marker', 'field_policy_marker field was created.');
    $this->assertText('field_default_tied_status', 'field_default_tied_status field was created.');
    $this->assertText('field_pland_disbursement', 'field_planned_disbursement field was created.');
    $this->assertText('field_capital_spend', 'field_capital_spend field was created.');
    $this->assertText('field_iati_acitivity_transaction', 'field_iati_acitivity_transaction field was created.');
    $this->assertText('field_iati_activity_conditions', 'field_iati_activity_conditions field was created.');
    $this->assertText('field_iati_activity_result', 'field_iati_activity_result field was created.');
    $this->assertText('field__activity_legacy_data', 'field_legacy_data field was created.');
    $this->assertText('field_iati_activity_crs_add', 'field_iati_activity_crs_add field was created.');
    $this->assertText('field_iati_activity_fss', 'field_iati_activity_fss field was created.');
    // IATI Organisation.
    $this->drupalGet('admin/structure/types/manage/' . $ctype2 . '/fields');
    $this->assertText('title', 'title field was created.');
    $this->assertText('field_iati_identifier', 'field_iati_identifier field was created.');
    $this->assertText('field_iati_org_type', 'field_iati_org_type field was created.');
    $this->assertText('language', 'language field was created.');
    $this->assertText('field_iati_org_url', 'field_iati_org_url field was created.');
    $this->assertText('field_org_logo', 'field_org_logo field was created.');
    $this->assertText('field_langauge', 'field_langauge field was created.');
    $this->assertText('field_iati_default_currency', 'field_iati_default_currency field was created.');
    $this->assertText('field_total_budget', 'field_total_budget field was created.');
    $this->assertText('field_recipient_org_budget', 'field_recipient_org_budget field was created.');
    $this->assertText('field_recipient_country_budget', 'field_recipient_country_budget field was created.');
    // Required for IATI organisation standard 1.03.
    // $this->assertText('field_file_header', 'field_file_header field was created.');
    // $this->assertText('field_record_header', 'field_record_header field was created.');
    $this->assertText('field_organisation_documents', 'field_organisation_documents field was created.');
    $this->assertText('field_reporting_organisation', 'field_reporting_organisation field was created.');
  }
  /**
   * Function to test if all term reference fields have the correct vocabulary.
   */
  public function testTermReferenceFields() {
    // Sector
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/iati_activity_sector');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'iati_activity_sector', 'Correct vocabulary is chosen for Sector term reference field.');
    // Activity Status
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/field_iati_activity_status');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_status', 'Correct vocabulary is chosen for Activity Status term reference field.');
    // Default Currency
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/field_default_currency');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'default_currency', 'Correct vocabulary is chosen for Default Currency term reference field.');
    // Collaboration Type
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/field_iati_activity_collabo_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_collaboration_type', 'Correct vocabulary is chosen for Collaboration Type term reference field.');
    // Aid Type
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/field_iati_activity_aid_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_aid_type', 'Correct vocabulary is chosen for Aid Type term reference field.');
    // Finance Type
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/field_iati_activity_finance_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_finance_type', 'Correct vocabulary is chosen for Finance Type term reference field.');
    // Flow Type
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/field_iati_activity_flow_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_flowtype', 'Correct vocabulary is chosen for Flow Type term reference field.');
    // Default Tied Status
    $this->drupalGet('admin/structure/types/manage/iati-activity/fields/field_default_tied_status');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'tied_status', 'Correct vocabulary is chosen for Default Tied Status term reference field.');
    // Loan Status Currency
    $this->drupalGet('admin/structure/field-collections/field-crs-add-loan-status/fields/field_loan_status_currency');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'default_currency', 'Correct vocabulary is chosen for Loan Status Currency term reference field.');
    // Loan Repayment Type
    $this->drupalGet('admin/structure/field-collections/field-crs-add-loan-terms/fields/field_loan_repayment_plan');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'loan_repayment_period', 'Correct vocabulary is chosen for Loan Terms Repayment Plan term reference field.');
    // Loan Repayment Plan
    $this->drupalGet('admin/structure/field-collections/field-crs-add-loan-terms/fields/field_loan_terms_repayment_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'loan_repayment_type', 'Correct vocabulary is chosen for Loan Terms Repayment Type term reference field.');
    // Transaction Aid Type
    $this->drupalGet('admin/structure/field-collections/field-iati-acitivity-transaction/fields/field_transaction_aid_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_aid_type', 'Correct vocabulary is chosen for Transaction Aid Type term reference field.');
    // Transaction Disbursement Channel
    $this->drupalGet('admin/structure/field-collections/field-iati-acitivity-transaction/fields/field_transaction_d_channel/');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'disbursement_channel', 'Correct vocabulary is chosen for Transaction Disbursement Channel term reference field.');
    // Transaction Finance Type
    $this->drupalGet('admin/structure/field-collections/field-iati-acitivity-transaction/fields/field_transaction_finance_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_finance_type', 'Correct vocabulary is chosen for Transaction Finance Type term reference field.');
    // Transaction Flow Type
    $this->drupalGet('admin/structure/field-collections/field-iati-acitivity-transaction/fields/field_transaction_flow_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'activity_flowtype', 'Correct vocabulary is chosen for Transaction Flow Type term reference field.');
    // Transaction Tied Status
    $this->drupalGet('admin/structure/field-collections/field-iati-acitivity-transaction/fields/field_transaction_tied_status');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'tied_status', 'Correct vocabulary is chosen for Transaction Tied Status term reference field.');
    // Transaction Type
    $this->drupalGet('admin/structure/field-collections/field-iati-acitivity-transaction/fields/field_transaction_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'transaction_type', 'Correct vocabulary is chosen for Transaction Type term reference field.');
    // Condition Type
    $this->drupalGet('admin/structure/field-collections/field-condition-condition/fields');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'condition_type', 'Correct vocabulary is chosen for Condition Type term reference field.');
    // FSS Currency
    $this->drupalGet('admin/structure/field-collections/field-fss-forecast/fields/field_value_currency');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'default_currency', 'Correct vocabulary is chosen for FSS currency term reference field.');
    // Policy Marker Code
    $this->drupalGet('admin/structure/field-collections/field-policy-marker/fields/field_code');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'policy_marker', 'Correct vocabulary is chosen for Policy Marker Code term reference field.');
    // Policy Marker Vocabulary
    $this->drupalGet('admin/structure/field-collections/field-policy-marker/fields/field_vocabulary');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'vocabulary', 'Correct vocabulary is chosen for Policy Marker Vocabulary term reference field.');
    // Policy Marker Significance
    $this->drupalGet('admin/structure/field-collections/field-policy-marker/fields/field_significance');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'policy_significance', 'Correct vocabulary is chosen for Policy Marker Significance term reference field.');
    // Policy Marker Language
    $this->drupalGet('admin/structure/field-collections/field-policy-marker/fields/field_language');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'languages', 'Correct vocabulary is chosen for Policy Marker Language term reference field.');
    // Organisation Name Language
    $this->drupalGet('admin/structure/field-collections/field-reporting-organisation/fields/field_langauge');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'languages', 'Correct vocabulary is chosen for Organisation Name Language term reference field.');
    // Organisation Type
    $this->drupalGet('admin/structure/field-collections/field-reporting-organisation/fields/field_iati_org_type');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'iati_organisation_type', 'Correct vocabulary is chosen for Organisation Type term reference field.');
    // CRS Add Flag Code
    $this->drupalGet('admin/structure/field-collections/field-iati-activity-crs-add/fields/field_crs_add_flag_code');
    $this->assertOptionSelected('edit-field-settings-allowed-values-0-vocabulary', 'aid_type_flag', 'Correct vocabulary is chosen for Aid Type Flag term reference field.');
  }
}

/**
 * Tests whether iati component pages can be accessed successfully.
 */
class IatiAccessibiltyTestCase extends IatiWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => 'IATI Accessibilty',
      'description' => 'Test the whether iati component pages can be accessed successfully.',
      'group' => 'Iati');
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('iati'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   * Test that an administrator can access the iati settings.
   */
  public function testIatiSettingsAccessiilty() {
    // Navigate to the Iati Settings page.
    $this->drupalGet("admin/config/iati/settings");
    // Assert that there are settings for the user to configure.
    //$this->assertNoText("There are no iati settings yet.", "There are settings for the user to configure.");
  }

  /**
   * Test whether an administrator can access the Iati Budgets page.
   */
  public function testIatiBudgetAccessibility() {
    // Assert that an administrator can access the budgets page.
    $this->drupalGet('admin/content/iati_budget');
    $this->assertResponse(200, 'The administrator can access the IATI Budgets page.');
  }

  /**
   * Test whether an administrator can access the Iati Locations page.
   */
  public function testIatiLocationAccessibility() {
    // Assert that an administrator can access the locations page.
    $this->drupalGet('admin/content/iati_location');
    $this->assertResponse(200, 'The administrator can access the IATI Locations page.');
  }

  /**
   * Test whether an administrator can access the Import Activity page.
   */
  public function testImportActivityAccessibility() {
    // Assert that an administrator can access the import activity page.
    $this->drupalGet('admin/config/iati/settings/import_activity');
    $this->assertResponse(200, 'The administrator can access the Import Activity page.');
    $this->assertFieldByName('file_url', NULL, 'The file url field is present on the page.');
  }

  /**
   * Test whether an administrator can access the Import Organisation page.
   */
  public function testImportOrganisationAccessibility() {
    // Assert that an administrator can access the import organisation page.
    $this->drupalGet('admin/config/iati/settings/import_organisation');
    $this->assertResponse(200, 'The administrator can access the Import Organisation page.');
    $this->assertFieldByName('file_url', NULL, 'The file url field is present on the page.');
  }

  /**
   * Test that a user without the right permission can't access iati settings.
   */
  public function testImportOrganisatiAccessiiltyAuthUser() {
    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser();
    $this->drupalLogin($user);
    // Navigate to the Iati Settings page.
    $this->drupalGet("admin/config/iati/settings");
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the iati settings page");
  }

  /**
   * Test that a user without the right permission can't access the Budgets
   */
  public function testIatiBudgetAccessibilityAuthUser() {
    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser();
    $this->drupalLogin($user);
    // Navigate to the Iati Budgets page.
    $this->drupalGet('admin/content/iati_budget');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the iati budgets page");
  }

  /**
   * Test that a user without the right permission can't access Locations.
   */
  public function testIatiLocationAccessibilityAuthUser() {
    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser();
    $this->drupalLogin($user);
    // Navigate to the Iati Locations page.
    $this->drupalGet('admin/content/iati_location');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the iati locations page");
  }

  /**
   * Test that a user without the right permission can't access Import Activity.
   */
  public function testImportActivityAccessibilityAuthUser() {
    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser();
    $this->drupalLogin($user);
    // Navigate to the Iati Import Activity page.
    $this->drupalGet('admin/config/iati/settings/import_activity');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the import activity page");
  }

  /**
   * Test that a user without the right permission can't access Import Org page.
   */
  public function testImportOrganisationAccessibilityAuthUser() {
    $this->drupalLogout();
    $user = $this->drupalCreateAuthUser();
    $this->drupalLogin($user);
    // Navigate to the Iati Import Organisation page.
    $this->drupalGet('admin/config/iati/settings/import_organisation');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the import organisation page");
  }

  /**
   * Test that an anonymous user can not access the iati settings.
   */
  public function testIatiSettingsAccessibiltyAnonymous() {
    $this->drupalLogout();
    // Navigate to the Iati Settings page.
    $this->drupalGet("admin/config/iati/settings");
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An anonymous user can not acces the iati settings page");
  }

  /**
   * Test that an anonymous user can not access the Iati Budgets page.
   */
  public function testIatiBudgetAccessibilityAnonymous() {
    $this->drupalLogout();
    // Navigate to the Iati Budget page.
    $this->drupalGet('admin/content/iati_budget');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An anonymous user can not acces the iati budgets page");
  }

  /**
   * Test that an anonymous user can not access the Iati Locations page.
   */
  public function testIatiLocationAccessibilityAnonymous() {
    $this->drupalLogout();
    // Navigate to the Iati Locations page.
    $this->drupalGet('admin/content/iati_location');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An anonymous user can not acces the iati locations page");
  }

  /**
   * Test that an anonymous user can not access the Import Activity page.
   */
  public function testImportActivityAccessibilityAnonymous() {
    $this->drupalLogout();
    // Navigate to the Iati Import Activity page.
    $this->drupalGet('admin/config/iati/settings/import_activity');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the import activity page");
  }

  /**
   * Test that an authenticated user can not access the Import Organisation page.
   */
  public function testImportOrganisationAccessibilityAnonymous() {
    $this->drupalLogout();
    // Navigate to the Iati Import Organisation page.
    $this->drupalGet('admin/config/iati/settings/import_organisation');
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the import organisation page");
  }

  /**
   * Test that a user with adequate permissions can access iati configurations.
   */
  public function testIatiSettingsAccessibiltyToAuthUserWithPermission() {
    $user = $this->drupalCreateAuthUser(array('administer iati'));
    $this->drupalLogin($user);
    // Navigate to the Iati Settings page.
    $this->drupalGet("admin/config/iati/settings");
    // Assert that the user cannot access the page.
    $this->assertResponse(200, "An authenticated user with adequate permissions can acces the configuration page");
  }
}

/**
 * This tests the different scenarios that can possibly
 * happen when a user is adding an IATI Activity to the site.
 */
class IatiActivityTestCase extends IatiWebTestCase {
  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Add IATI Activity tests',
      'description' => 'Testing the different Iati Add Activity Features, Cases and scenerios',
      'group' => 'Iati',
    );
  }

  /**
   * The setup() function sets conditions for a given test case scenario.
   *
   * In this case,this creates a user with the administrator role.
   * And then the user is logged into the site.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('iati', 'migrate_ui'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }
  /**
   *
   * This loads the IATI Activity authoring page and ascertains if 
   * the administrator can view the page by
   * asserting that a number of text strings are being rendered on the
   * current page, and then echoes that the "Create IATI Activity"
   * page has been found.
   */
  public function testNodeAddIatiActivityAccess() {
    $this->drupalGet('node/add/iati-activity');
    $this->clickLink('Add content', 0, t('Add content is clicked'));
    $this->assertResponse(200, 'node add iati-activity resource is found by the server');
    $this->assertNoText(t('Create IATI Acivity'), t('User access the note to add iati activity'));
    $this->assertNoRaw('<title>' . 'Create IATI Acivity title is found' . '</tite>');
  }
  /**
   *
   * This loads the IATI Activity authoring page and ascertains that
   * a number of fields are a part of the page by asserting that fields
   * with given names are present on the page.
   *
   * The fields are; 
   * Title, IATI identifier, Other Identifier, IATI Activity Description, IATI
   * Activity Sector, IATI Activity Planned Start Date, IATI Activity Planned
   * End Date, IATI Activity Actual Start Date, IATI Activity Actual End Date,
   * Default Currency, IATI Activity Status, Activity Website, Collaboration
   * Type, Aid Type, Finance Type, Flow Type, Owner Reference, Owner Name, IATI
   * Activity Document, IATI Activity Budget, IATI Location, IATI Budget, IATI  
   * Activity Documents, Reporting Organisation, Participating Organisation,
   * Activity Scope, Recepient Country, Recepient Region, Country Budget Items,
   * Policy Marker, Default Tied Status, Planned Disbursement, Capital Spend,
   * Transaction, Conditions, Result, Legacy Data, CRS-Add, FSS
   */
  public function testCreateIatiActivityFieldsPresence() {
    $this->drupalGet('node/add/iati-activity');
    $this->assertResponse(200, 'node add iati-activity resource is found by the server');
    $this->assertFieldByName('title', NULL, t('Activity title is found on add iati acivity page'));
    // $this->assertFieldByName('title_add_more', NULL, t('tite add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_identifier[und][0][value]', NULL, 'Iati identifier field is found on add iati activity page');
    // $this->assertFieldByName('field_iati_identifier_add_more', NULL, t('Iati identifier add more field is found on add iati activity page'));
    $this->assertFieldByName('field_other_identifier[und][0][field_owner_ref][und]', NULL, 'Other identifier owner reference field is found on add iati activity page');
    $this->assertFieldByName('field_other_identifier[und][0][field_owner_name][und][0][value]', NULL, 'Other identifier owner name field is found on add iati activity page');
    $this->assertFieldByName('field_other_identifier[und][0][field_identifier_identifier][und][0][value]', NULL, 'Other identifier field is found on add iati activity page');
    // $this->assertFieldByName('field_other_identifier_add_more', NULL, t('Other identifier add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_description[und][0][field_description][und][0][value]', NULL, t('Activity description is found on the activity page'));
    $this->assertFieldByName('field_iati_activity_description[und][0][field_description_type][und]', NULL, t('Activity description type is found on the activity page'));
    $this->assertFieldByName('field_iati_activity_description[und][0][field_language][und]', NULL, t('Activity description language is found on the activity page'));
    // $this->assertFieldByName('field_iati_activity_description_add_more', NULL, t('Activity description add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_sector[und][0][field_code][und]', NULL, t('Sector code field is found on the add iati activity page'));
    $this->assertFieldByName('field_iati_activity_sector[und][0][field_sector_vocabulary][und]', NULL, t('Sector vocabulary field is found on the add iati activity page'));
    $this->assertFieldByName('field_iati_activity_sector[und][0][field_percentage][und][0][value]', NULL, t('Sector percentage field is found on the add iati activity page'));
    // $this->assertFieldByName('field_iati_activity_sector_add_more', NULL, t('Activity sector add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_date[und][0][field_activity_iso_date][und][0][value][date]', NULL, t('Activity ISO Date field is found on th add iati activity page'));
    $this->assertFieldByName('field_iati_activity_date[und][0][field_date_text][und][0][value]', NULL, t('Activity Date text field is found on th add iati activity page'));
    $this->assertFieldByName('field_iati_activity_date[und][0][field_activity_date_type][und]', NULL, t('Activity Date type field is found on th add iati activity page'));
    $this->assertFieldByName('field_iati_activity_date_add_more', NULL, t('Activity Date add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_date_und_0_remove_button', NULL, t('Activity Date remove field is found on add iati activity page'));
    $this->assertFieldByName('field_default_currency[und]', NULL, t('Default currency field is showing on add iati activity page'));
    // $this->assertFieldByName('field_iati_default_currency_add_more', NULL, t('Activity default currency add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_status[und]', NULL, t('Activity status field is found on add iati acitivity page'));
    // $this->assertFieldByName('field_iati_activity_status_add_more', NULL, t('Activity status add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_website[und][0][url]', NULL, t('Activity website field is found on add iati activity page'));
    // $this->assertFieldByName('field_iati_activity_website_add_more', NULL, t('Activity website add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_collabo_type[und]', NULL, t('Collaboration type of an activity field is found on add iati activity page'));
    // $this->assertFieldByName('field_iati_activity_collabo_type_add_more', NULL, t('Activity collaboration type add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_aid_type[und]', NULL, t('Aid type of an activity is found on add iati activity page'));
    // $this->assertFieldByName('field_iati_activity_aid_type_add_more', NULL, t('Activity aid type add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_finance_type[und]', NULL, t('Financial type of an activity field is found on add iati activity page'));
    // $this->assertFieldByName('field_iati_activity_finance_type_add_more', NULL, t('Activity finance type add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_flow_type[und]', NULL, t('Activity flow type field is found on iati activity page'));
    // $this->assertFieldByName('field_iati_activity_flow_type_add_more', NULL, t('Activity flow type add more field is found on add iati activity page'));
    // $this->assertFieldByName('files[field_field_iati_activity_doc_und_0]', NULL, t('Activity add document field is found on add iati activity page'));
    $this->assertFieldById('edit-field-iati-location-und-actions-ief-add', NULL, t('Button for adding a location is found on add iati activity page'));
    $this->assertFieldByName('field_related_activity[und][0][field_related_activity_type][und]', NULL, t('Related activty type field is found on iati activity page'));
    $this->assertFieldByName('field_related_activity[und][0][field_related_activity_reference][und][0][value]', NULL, t('Related activty reference field is found on iati activity page'));
    $this->assertFieldByName('field_related_activity[und][0][field_language][und]', NULL, t('Related activty tlanguage field is found on iati activity page'));
    $this->assertFieldById('edit-field-iati-activity-budget-und-actions-ief-add', NULL, t('Button for adding a budget is found on add iati activity page'));
    // Required for IATI activity standard 1.03.
    // $this->assertFieldByName('field_reporting_organisation[und][0][value]', NULL, t('Reporting organisation field is found on add iati activity page'));
    // $this->assertFieldByName('field_reporting_organisation_add_more', NULL, t('Reporting organisation add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_contact[und][0][field_contact_person_name][und][0][value]', NULL, t('Contact person name field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_contact[und][0][field_contact_organisation][und][0][value]', NULL, t('Contact organisation field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_contact[und][0][field_contact_telephone][und][0][value]', NULL, t('Contact telephone field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_contact[und][0][field_contact_email][und][0][value]', NULL, t('Contact email name field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_contact[und][0][field_contact_mailing_address][und][0][value]', NULL, t('Contact mailing address field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_contact[und][0][field_contact_mailing_address2][und][0][value]', NULL, t('Contact 2nd mailing address field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_contact[und][0][field_contact_website][und][0][value]', NULL, t('Contact website field is found on add iati activity page'));
    // $this->assertFieldByName('field_contact_info_add_more', NULL, t('Contact information add more field is found on add iati activity page'));
    // $this->assertFieldByName('field_participating_organisation[und][0][value]', NULL, t('Participating organisation field is found on add iati activity page'));
    // $this->assertFieldByName('field_participating_organisation_add_more', NULL, t('Participating organisation add more field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_scope[und]', NULL, t('Activity Scope field is found on add iati activity page'));
    // $this->assertFieldByName('field_activity_scope_name_add_more', NULL, t('Activity Scope add more field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_recipient_country[und][0][field_country_code][und]', NULL, t('Recepient country code field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_recipient_country[und][0][field_percentage][und][0][value]', NULL, t('Recepient country percentage field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_recipient_country[und][0][field_language][und]', NULL, t('Recepient country language field is found on add iati activity page'));
    // $this->assertFieldByName('field_recepient_country_add_more', NULL, t('Recepient country add more field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_recipient_region[und][0][field_region_code][und]', NULL, t('Recepient region coode field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_recipient_region[und][0][field_vocabulary][und]', NULL, t('Recepient region vocabulary field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_recipient_region[und][0][field_percentage][und][0][value]', NULL, t('Recepient region percentage field is found on add iati activity page'));
    $this->assertFieldByName('field_activity_recipient_region[und][0][field_language][und]', NULL, t('Recepient region language field is found on add iati activity page'));
    // $this->assertFieldByName('field_recepient_region_add_more', NULL, t('Recepient region add more field is found on add iati activity page'));
    $this->assertFieldByName('field_country_budget_items[und][0][field_budget_vocabulary][und]', NULL, t('Country budget items vocabulary field is found on add iati activity page'));
    $this->assertFieldByName('field_country_budget_items[und][0][field_budget_budget_item][und][0][field_budget_code][und]', NULL, t('Country budget items budget code field is found on add iati activity page'));
    $this->assertFieldByName('field_country_budget_items[und][0][field_budget_budget_item][und][0][field_percentage][und][0][value]', NULL, t('Country budget items budget percentage field is found on add iati activity page'));
    // $this->assertFieldByName('field_country_budget_items_add_more', NULL, t('Country budget items add more field is found on add iati activity page'));
    $this->assertFieldByName('field_policy_marker[und][0][field_code][und]', NULL, t('Policy Marker code field is found on add iati activity page'));
    $this->assertFieldByName('field_policy_marker[und][0][field_vocabulary][und]', NULL, t('Policy Marker vocabulary field is found on add iati activity page'));
    $this->assertFieldByName('field_policy_marker[und][0][field_significance][und]', NULL, t('Policy Marker significance field is found on add iati activity page'));
    $this->assertFieldByName('field_policy_marker[und][0][field_language][und]', NULL, t('Policy Marker language field is found on add iati activity page'));
    // $this->assertFieldByName('field_policy_marker_add_more', NULL, t('Policy Marker add more field is found on add iati activity page'));
    $this->assertFieldByName('field_default_tied_status[und]', NULL, t('Default tied status field is found on add iati activity page'));
    // $this->assertFieldByName('field_default_tied_status_add_more', NULL, t('Default tied status add more field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_disbursement_updated][und][0][value][date]', NULL, t('Planned disbursement updated field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_iso_value_date_format][und][0][value][date]', NULL, t('Planned disbursement period start date field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_free_value_text_format][und][0][value]', NULL, t('Planned disbursement period start text field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_iso_value_date_format][und][0][value][date]', NULL, t('Planned disbursement period end date field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_free_ds_text_format][und][0][value]', NULL, t('Planned disbursement period end text field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_currency][und]', NULL, t('Planned disbursement value currecncy field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_date][und][0][value][date]', NULL, t('Planned disbursement value date field is found on add iati activity page'));
    $this->assertFieldByName('field_pland_disbursement[und][0][field_disbursement_updated][und][0][value][date]', NULL, t('Planned disbursement valuue amount field is found on add iati activity page'));
    // $this->assertFieldByName('field_planned_disbursement_add_more', NULL, t('Planned disbursement add more field is found on add iati activity page'));
    $this->assertFieldByName('field_capital_spend[und][0][value]', NULL, t('Capital spend field is found on add iati activity page'));
    // $this->assertFieldByName('field_capital_spend_add_more', NULL, t('Capital spend add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_type][und]', NULL, t('Condition type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_free_text][und][0][value]', NULL, t('Condition free text field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_conditions[und][0][field_condition_attached][und]', NULL, t('Condition attached field is found on add iati activity page'));
    // $this->assertFieldByName('field_conditions_add_more', NULL, t('Conditions add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_title][und][0][value]', NULL, t('Result title field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_description][und][0][field_description_description][und][0][value]', NULL, t('Result description field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_description][und][0][field_description_type][und]', NULL, t('Result description type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_description][und][0][field_description_language][und]', NULL, t('Result description language field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_title][und][0][value]', NULL, t('Result indicator title field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_d_description][und][0][value]', NULL, t('Result indicator description field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_type][und]', NULL, t('Result indicator description type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_indicator_d_language][und]', NULL, t('Result indicator description language field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_peiod_start_date][und][0][value][date]', NULL, t('Result indicator period start date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_period_text][und][0][value]', NULL, t('Result indicator period start date text field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_date][und][0][value][date]', NULL, t('Result indicator period end date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_text][und][0][value]', NULL, t('Result indicator period end date text field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_value][und][0][value]', NULL, t('Result indicator period target value field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_comment][und][0][value]', NULL, t('Result indicator period target comment field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_value][und][0][value]', NULL, t('Result indicator period actual value field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_comment][und][0][value]', NULL, t('Result indicator period actual comment field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_year][und][0][value][date]', NULL, t('Result indicator baseline year field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_value][und][0][value]', NULL, t('Result indicator baseline value field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_comment][und][0][value]', NULL, t('Result indicator baseline comment field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_measure][und]', NULL, t('Result indicator Measure field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_ascending][und]', NULL, t('Result indicator Ascending field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_result_type][und]', NULL, t('Result result type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_result[und][0][field_aggregation_status][und]', NULL, t('Result aggregation status field is found on add iati activity page'));
    // $this->assertFieldByName('field_result_add_more', NULL, t('Result add more field is found on add iati activity page'));
    // $this->assertFieldByName('field_legacy_data[und][0][value]', NULL, t('Legacy data field is found on add iati activity page'));
    // $this->assertFieldByName('field_legacy_data_add_more', NULL, t('Legacy data add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_fss[und][0][field_extraction_date][und][0][value][date]', NULL, t('FSS extraction date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_fss[und][0][field_extraction_priority][und]', NULL, t('FSS priority field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_fss[und][0][field_phase_out_year][und][0][value][date]', NULL, t('FSS phaseout year field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_forecast_year][und][0][value][date]', NULL, t('FSS forecast year field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_date][und][0][value][date]', NULL, t('FSS date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_currency][und]', NULL, t('FSS forecast currency field is found on add iati activity page'));
    // $this->assertFieldByName('field_fss_forecast_add_more', NULL, t('FSS add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_aid_type][und]', NULL, t('Transaction aid type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_description][und][0][value]', NULL, t('Transaction description field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_d_channel][und]', NULL, t('Transaction disbursement channel field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_finance_type][und]', NULL, t('Transaction finance type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_flow_type][und]', NULL, t('Transaction flow type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_tied_status][und]', NULL, t('Transaction tied status field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_date][und][0][value][date]', NULL, t('Transaction date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_type][und]', NULL, t('Transaction transaction type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_value][und][0][value]', NULL, t('Transaction value field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_ref][und][0][value]', NULL, t('Transaction reference field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_organisation_ref][und]', NULL, t('Transaction provider organisation reference field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_provider_activity_id][und][0][value]', NULL, t('Transaction provider activity Id field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_reciever_organisation][und]', NULL, t('Transaction receiver organisation reference field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_provider_activity_id][und][0][value]', NULL, t('Transaction receiver activity Id field is found on add iati activity page'));
    // $this->assertFieldByName('field_transaction_add_more', NULL, t('Transaction add more field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_c_date][und][0][value][date]', NULL, t('CRS-ADD commitment date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_final_date][und][0][value][date]', NULL, t('CRS-ADD repayment final date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_repayment_plan][und]', NULL, t('CRS-ADD repayment plan field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_repayment_type][und]', NULL, t('CRS-ADD repayment type field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_1][und][0][value]', NULL, t('CRS-ADD rate 1 field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_2][und][0][value]', NULL, t('CRS-ADD rate 2 field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_arrears][und][0][value]', NULL, t('CRS-ADD interest arrears field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_received][und][0][value]', NULL, t('CRS-ADD interest received field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_outstanding][und][0][value]', NULL, t('CRS-ADD principal outstanding field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_arrears][und][0][value]', NULL, t('CRS-ADD principal arrears field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_year][und][0][value][date]', NULL, t('CRS-ADD year field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_currency][und]', NULL, t('CRS-ADD currency field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_value_date][und][0][value][date]', NULL, t('CRS-ADD value_date field is found on add iati activity page'));
    $this->assertFieldByName('field_iati_activity_crs_add[und][0][field_crs_add_aid_type_flag][und]', NULL, t('CRS-ADD aid-type flag field is found on add iati activity page'));
    // $this->assertFieldByName('field_crs_add_add_more', NULL, t('CRS-ADD add more field is found on add iati activity page'));
    $this->assertText('Relation Add', 'Relation add section present on page.');
    $this->assertText("No entity found, can't create a relation!", 'Text indicating that there are no entities to form a relation with is present on the page.');
    // $this->assertNoField('ief-5-add', NULL, 'Activity budget field is not found on iati activity add page');
    // $this->assertNoField('field_iati_location[und][0][target_id]', NULL, 'Activity location field is nolonger found on the iati activity add page');
    // $this->assertNoField('ief-15-add', NULL, 'Field to add iati location is not found on activity iati page');
  }
  /**
   * 
   * This loads the IATI Activity authoring page and ascertains that all
   * the fields on the IATI Activity form have a description.
   * 
   * For every field with a description, a message confirming that the 
   * field has a description is output.
   * 
   */
  public  function testIatiActivityFieldDescriptions() {
    $this->drupalGet('node/add/iati-activity');
    $this->assertText(t('Please consult the Organisational Identifiers Guidance to identify the appropriate codes to use in your data.'), t('Description about Organisational identifier Found'));
    $this->assertText(t('An alternative, non-IATI identifier for the activity. This identifier is not guaranteed to be unique or persistent (it depends on the owner organisation'), t('Description about iati Identifier Found'));
    $this->assertText(t('A longer, human-readable description. May be repeated for different languages'), t('Description about activity description  Found'));
    $this->assertText(t('The current status of the project'), t('Description about current status of the project Found'));
    $this->assertText(t('The type of collaboration involved'), t('Description about type of collaboration Found'));
    $this->assertText(t('Optional element to override the top-level default-aid-type element (debt relief, etc.) on a transaction-by-transaction basis if needed'), t('Description about aid type Found'));
    $this->assertText(t('The type of finance (e.g. debt relief). The types will be defined by IATI'), t('Description about type of finance Found'));
    $this->assertText(t('The type of assistance provided, e.g. Official Development Assistance (ODA). Type types will be defined by IATI'), t('Description about type of assistance Found'));
    $this->assertText(t("The value of the aid activity's budget for each financial year as in the original project document."), t("Description about value of aid activity's budget is present on add activity page"));
    $this->assertText(t('A geographical location'), t('Description about geographical location is present activity page'));
  }
  /**
   * Asserting that the read more link for individual fields is active.
   */
  public function testFieldDefinitionLinks() {
    $this->drupalGet('node/add/iati-activity');
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/iati-identifier/', 0, t('Read More link for the Iati identifier is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/other-activity-identifiers/', 0, t('Read More link for other Identifiers is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/description/', 0, t('Read More link for description is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/sector/', 0, t('Read More link for sector is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/activity-dates/', 0, t('Read More link for planned date is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/activity-dates/', 0, t('Read More link for actual date is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/activity-status/', 0, t('Read More link for status is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/activity-website/', 0, t('Read More link for website is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/collaboration-type/', 0, t('Read More link for collaboration type is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/transaction/aid-type/', 0, t('Read More link for aid type is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/default-finance-type/', 0, t('Read More link for finance type is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/default-flow-type/', 0, t('Read More link for flow type is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/location/', 0, t('Read More link for location is found on iati add activity page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/budget/', 0, t('Read More link for budget is found on iati add activity page'));
  }

  // Elements for which an entity must be added.
  // Location.
  /**
   * Test whether a user can create a location entity with the ideal values.
   * From the Add Iati activity page
   *
  public function testActivityAddLocation() {
    $this->drupalGet('node/add/iati-activity');
    $this->assertField('ief-4e363cd5981238879925c605fe520b248f047dd6-add', 'Add new Location button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add new Location'));
    $location['field_iati_location[und][form][name]'] = 'Rakai';
    $location['field_iati_location[und][form][description]'] = 'A rural district in the north of Uganda';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lat]'] = '2.030170';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lon]'] = '33.642753';
    $this->drupalPost(NULL, $location, t('Create entity'));
  }
  /**
   * Test whether a user can create a location entity with the invalid values
   * From the Add Iati activity page
   *
  public function testActivityAddLocationInvalidValues() {
    $this->drupalGet('node/add/iati-activity');
    $this->assertField('ief-4e363cd5981238879925c605fe520b248f047dd6-add', 'Add new Location button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add new Location'));
    $location['field_iati_location[und][form][name]'] = 'Rakai';
    $location['field_iati_location[und][form][description]'] = 'A rural district in the north of Uganda';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lat]'] = '2000.030170';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lon]'] = '330.642753';
    $this->drupalPost(NULL, $location, t('Create entity'));
    // Assert that the user can not save the location.
    $this->assertText("Latitude field is incorrect.", "An error is reported when a user tries to save a location with an invalid latitude.");
    $this->assertText("Longitude field is incorrect.", "An error is reported when a user tries to save a location with an invalid longitude.");
  }
  /**
   * Test whether a user can create a location entity with no values
   * From the Add Iati activity page
   *
  public function testActivityAddLocationNullValues() {
    $this->drupalGet('node/add/iati-activity');
    $this->assertField('ief-4e363cd5981238879925c605fe520b248f047dd6-add', 'Add new Location button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add new Location'));
    $location['field_iati_location[und][form][name]'] = '';
    $location['field_iati_location[und][form][description]'] = '';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lat]'] = '';
    $location['field_iati_location[und][form][field_iati_geofield][und][0][geom][lon]'] = '';
    $this->drupalPost(NULL, $location, t('Create entity'));
    // Assert that the user can not save the location.
    //$this->assertText("Name field is required.", "An error is reported when a user tries to save a location with no name.");
    //$this->assertText("Description field is required.", "An error is reported when a user tries to save a location with no description.");
    $this->assertText("Latitude field is required.", "An error is reported when a user tries to save a location with no latitude.");
    $this->assertText("Longitudefield is required.", "An error is reported when a user tries to save a location with no longitude.");
  }
  // Budget.
  /**
   * Test whether a user can create a budget entity with the ideal values
   * From the Add Iati activity page
   *
  public function testActivityAddBudget() {
    // // Import budget type codelist.
    // $this->drupalGet('admin/content/migrate');
    // $checkboxes['dashboard[BudgetType]'] = 'TRUE';
    // $checkboxes['operation'] = 'import';
    // $this->drupalPost(NULL, $checkboxes, t('Execute'));
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    // Create a budget.
    $this->assertField('ief-1a4d8d1ccd5d6501dab113653eae1d97373aaedb-add', 'Add new budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add New Budget'));
    $budget['field_iati_activity_budget[und][form][value_amount]'] = 308975;
    $budget['field_iati_activity_budget[und][form][value_date][date]'] = '2014-02-11';
    $budget['field_iati_activity_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_iati_activity_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_iati_activity_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_iati_activity_budget[und][form][period_end_text]'] = $this->randomName(16);
    $budget['field_iati_activity_budget[und][form][field_budget_type][und]'] = '200';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Test whether a user can create a budget entity with a value amount
   * In the wrong format
   *
  public function testActivityAddBudgetWrongValueFormat() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    // Create a budget.
    $this->assertField('ief-1a4d8d1ccd5d6501dab113653eae1d97373aaedb-add', 'Add new budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add New Budget'));
    $budget['field_iati_activity_budget[und][form][value_amount]'] = '308975';
    $budget['field_iati_activity_budget[und][form][value_date][date]'] = '2014-02-11';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("Amount has to be a numeric value", "An error is reported when a user tries to save a budget with a value amount in the wrong format.");
  }
  /**
   * Test if creation of a budget with the start date later than the end date is possible.
   *
  public function testActivityAddBudgetInvalidDates() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    // Create a budget.
    $this->assertField('ief-1a4d8d1ccd5d6501dab113653eae1d97373aaedb-add', 'Add new budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add New Budget'));
    $budget['field_iati_activity_budget[und][form][value_amount]'] = 308975;
    $budget['field_iati_activity_budget[und][form][value_date][date]'] = '2014-02-11';
    $budget['field_iati_activity_budget[und][form][period_start][date]'] = '2014-12-11';
    $budget['field_iati_activity_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_iati_activity_budget[und][form][period_end][date]'] = '2014-06-11';
    $budget['field_iati_activity_budget[und][form][period_end_text]'] = $this->randomName(16);
    $budget['field_iati_activity_budget[und][form][field_budget_type][und]'] = '200';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("The End date must be greater than the Start date.", "An error is reported when a user tries to save a budget with an end date that is earlier than the start date.");
  }
  /**
   * Test whether a user can create a budget entity with no values.
   *
  public function testActivityAddBudgetNullValues() {
    $this->drupalGet('node/add/iati-activity');
    // Create a budget.
    $this->assertField('ief-1a4d8d1ccd5d6501dab113653eae1d97373aaedb-add', 'Add new budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add New Budget'));
    $budget['field_iati_activity_budget[und][form][value_amount]'] = '';
    $budget['field_iati_activity_budget[und][form][value_date][date]'] = '';
    $budget['field_iati_activity_budget[und][form][period_start][date]'] = '';
    $budget['field_iati_activity_budget[und][form][period_start_text]'] = '';
    $budget['field_iati_activity_budget[und][form][period_end][date]'] = '';
    $budget['field_iati_activity_budget[und][form][period_end_text]'] = '';
    $budget['field_iati_activity_budget[und][form][field_budget_type][und]'] = '_none';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("Value Amount field is required.", "An error is reported when a user tries to save a budget with no value amount.");
    $this->assertText("A valid date is required for Value Date.", "An error is reported when a user tries to save a budget with no value date.");
    //$this->assertText("Period start date field is required.", "An error is reported when a user tries to save a budget with no period start date.");
    //$this->assertText("Period start text field is required.", "An error is reported when a user tries to save a budget with no period start text.");
    //$this->assertText("Period end date field is required.", "An error is reported when a user tries to save a budget with no period end date.");
    //$this->assertText("Period end text field is required.", "An error is reported when a user tries to save a budget with no period end text.");
    //$this->assertText("Budget type field is required.", "An error is reported when a user tries to save a budget with no budget type selected.")
  }
  // Country Budget Items.
  /**
   * Test if a user can create a country budget item entity with ideal values.
   */
  public function testActivityAddCountryBudgetItem() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_country_budget_items[und][0][field_budget_vocabulary][und]'] = '199';
    $create['field_country_budget_items[und][0][field_budget_budget_item][und][0][field_budget_code][und]'] = '55';
    $create['field_country_budget_items[und][0][field_budget_budget_item][und][0][field_percentage][und][0][value]'] = 100;
    $this->drupalPost(NULL, $create, t('Save'));
  }
  // Planned Disbursement.
  /**
   * Test if a user can create a planned disbursement entity with ideal values.
   */
  public function testActivityAddPlannedDisbursement() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_disbursement_amount][und][0][value]'] = 10000;
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_date][und][0][value][date]'] = '2014-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_iso_value_date_format][und][0][value][date]'] = '2014-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_free_value_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_iso_value_date_format][und][0][value][date]'] = '2014-10-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_free_ds_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_currency][und]'] = '520';
    $create['field_pland_disbursement[und][0][field_disbursement_updated][und][0][value][date]'] = '2014-09-11';
    $this->drupalPost(NULL, $create, t('Save'));
  }
  /**
   * Test if a user can create a planned disbursement entity with the start date
   * later than the end date.
   */
  public function testActivityAddPlannedDisbursementInvalidDates() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_disbursement_amount][und][0][value]'] = 10000;
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_date][und][0][value][date]'] = '2014-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_iso_value_date_format][und][0][value][date]'] = '2016-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_free_value_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_iso_value_date_format][und][0][value][date]'] = '2014-10-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_free_ds_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_currency][und]'] = '520';
    $create['field_pland_disbursement[und][0][field_disbursement_updated][und][0][value][date]'] = '2014-09-11';
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the planned disbursement.
    $this->assertText("End date cannot be earlier than the start date.", "An error is reported when a user tries to save a planned disbursement with an end date that is earlier than the start date.");
  }
  /**
   * Test if a user can create a planned disbursement entity with the vale amount
   * in the wrong format.
   */
  public function testActivityAddPlannedDisbursementWrongValueFormat() {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_disbursement_amount][und][0][value]'] = '10000';
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_date][und][0][value][date]'] = '2014-08-11';
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the planned disbursement.
    $this->assertText("Amount has to be a numeric value", "An error is reported when a user tries to save a planned disbursement with a value amount in the wrong format.");
  }
  // Transaction.
  /**
   * Test if a user can create a transaction entity with the ideal values.
   */
  public function testActivityAddTransaction() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_ref][und][0][value]'] = 'T01';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_aid_type][und]'] = '37';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_description][und][0][value]'] = 'Travel';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_d_channel][und]'] = '645';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_finance_type][und]'] = '686';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_flow_type][und]'] = '3';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_organisation_ref][und]'] = '_none';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_provider_activity_id][und][0][value]'] = '2';
    $create['field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_reciever_organisation][und]'] = '_none';
    $create['field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_provider_activity_id][und][0][value]'] = '2';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_tied_status][und]'] = '637';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_date][und][0][value][date]'] = '2013-12-31';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_type][und]'] = '1504';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_value][und][0][value]'] = 1729;
    $this->drupalPost(NULL, $create, t('Save'));
  }
  /**
   * Test if a user can create a transaction entity with the with a value
   * amount in the wrong format.
   */
  public function testActivityAddTransactionWrongValueFormat() {
    $this->drupalGet('node/add/iati-activity');
    $transaction['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $transaction['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $transaction['field_iati_acitivity_transaction[und][0][field_transaction_value][und][0][value]'] = '1729';
    $this->drupalPost(NULL, $transaction, t('Save'));
    // Assert that the user can not save the transaction.
    $this->assertText("Amount has to be a numeric value", "An error is reported when a user tries to save a transaction with a value amount in the wrong format.");
  }
  // Conditions.
  /**
   * Test if a user can create a condition entity with the ideal values.
   */
  public function testActivityAddCondition() {
    $this->importCodelists();
    // $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_conditions[und][0][field_condition_attached][und]'] = '1';
    $create['field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_type][und]'] = '211';
    $create['field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_free_text][und][0][value]'] = 'use open aid map';
    $this->drupalPost('node/add/iati-activity', $create, t('Save'));
  }
  // Result.
  /**
   * Test if a user can create a result entity with the ideal values.
   */
  public function testActivityAddResult() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_result[und][0][field_result_type][und]'] = '1270';
    $create['field_iati_activity_result[und][0][field_aggregation_status][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_ascending][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_d_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_indicator_d_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_peiod_start_date][und][0][value][date]'] = '2012-10-12';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_period_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_date][und][0][value][date]'] = '2012-12-31';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_value][und][0][value]'] = 200;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_value][und][0][value]'] = 100;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_year][und][0][value][date]'] = '2016';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_value][und][0][value]'] = 150;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_measure][und]'] = '743';
    $this->drupalPost('node/add/iati-activity', $create, t('Save'));
  }
  /**
   * Test if a user can create a result entity with invalid dates.
   */
  public function testActivityAddResultInvalidDates() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_result[und][0][field_result_type][und]'] = '1270';
    $create['field_iati_activity_result[und][0][field_aggregation_status][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_ascending][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_d_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_indicator_d_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_peiod_start_date][und][0][value][date]'] = '2016-10-12';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_period_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_date][und][0][value][date]'] = '2012-12-31';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_value][und][0][value]'] = 200;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_value][und][0][value]'] = 100;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_year][und][0][value][date]'] = '2016';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_value][und][0][value]'] = 150;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_measure][und]'] = '743';
    $this->drupalPost('node/add/iati-activity', $create, t('Save'));
    // Assert that the user can not save the result.
    $this->assertText("End date cannot be earlier than the start date.", "An error is reported when a user tries to save a result with an end date that is earlier than the start date.");
  }
  // CRS-Add.
  /**
   * Test if a user can create a crs-add entity with the ideal values.
   */
  public function testActivityAddCRS() {
    $this->importCodelists();
    // $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_aid_type_flag][und]'] = '19';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_c_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_first_date][und][0][value][date]'] = '2014-01-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_final_date][und][0][value][date]'] = '2020-12-31';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_repayment_plan][und]'] ='927';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_repayment_type][und]'] = '929';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_1][und][0][value]'] = '10';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_2][und][0][value]'] = '20';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_received][und][0][value]'] = '200000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_outstanding][und][0][value]'] = '1500000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_currency][und]'] = '520';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_value_date][und][0][value][date]'] = '2014-01-01';
    $this->drupalPost('node/add/iati-activity', $create, t('Save'));
  }
  /**
   * Test if a user can create a crs-add entity with the invalid repayment dates.
   */
  public function testActivityAddCRSInvalidDates() {
    $this->importCodelists();
    // $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_aid_type_flag][und]'] = '19';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_c_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_first_date][und][0][value][date]'] = '2024-01-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_final_date][und][0][value][date]'] = '2020-12-31';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_repayment_plan][und]'] ='927';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_repayment_type][und]'] = '929';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_1][und][0][value]'] = '10';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_2][und][0][value]'] = '20';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_received][und][0][value]'] = '200000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_outstanding][und][0][value]'] = '1500000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_currency][und]'] = '520';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_value_date][und][0][value][date]'] = '2014-01-01';
    $this->drupalPost('node/add/iati-activity', $create, t('Save'));
    // Assert that the user can not save the CRS-Add element.
    $this->assertText("Repayment final date cannot be earlier than the repayment first date.", "An error is reported when a user tries to save a CRS-Add element with a final date that is earlier than the first date.");
    }  
  // FSS.
  /**
   * Test if a user can create an FSS entity with the ideal values.
   */
  public function testActivityAddFSS() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $fss['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $fss['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $fss['field_iati_activity_fss[und][0][field_extraction_date][und][0][value][date]'] = '2013-09-01';
    $fss['field_iati_activity_fss[und][0][field_extraction_priority][und]'] = '1';
    $fss['field_iati_activity_fss[und][0][field_phase_out_year][und][0][value][date]'] = '2013';
    $fss['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_forecast_value][und][0][value]'] = 20130;
    $fss['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_forecast_year][und][0][value][date]'] = '2013';
    $fss['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_date][und][0][value][date]'] = '2013-09-01';
    $fss['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_currency][und]'] = '520';
    $this->drupalPost(NULL, $fss, t('Save'));
    }
  // Contact.
  /**
   * Test if a user can create an Contact entity with the ideal values.
   */
  public function testActivityAddContact() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_contact[und][0][field_contact_person_name][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_organisation][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_telephone][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_email][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_mailing_address][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_website][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_type][und]'] = '214';
    $this->drupalPost(NULL, $create, t('Save'));
    }
  // Elements whose values fit in a single field.
  /**
   * Test whether a user can save an activity with the ideal values.
   */
  public function testActivitySaveIdealValues() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    //$this->addLocation();
    // $this->addBudget();
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    // Other Identifier
    $create['field_other_identifier[und][0][field_identifier_identifier][und][0][value]'] = '';
    $create['field_other_identifier[und][0][field_owner_ref][und]'] = '_none';
    $create['field_other_identifier[und][0][field_owner_name][und][0][value]'] = '';
    // Description
    $create['field_iati_activity_description[und][0][field_description][und][0][value]'] = 'The people of Amuria district in Northern Uganda are recovering from prolonged conflict and insecurity.  The project will support 6,960 vulnerable smallholder families, particularly those affected by HIV/AIDS to reduce the chronic poverty within their communities. It will do this by providing inputs and training to improve the productivity of their farms, incomes and access to effective HIV/AIDS services';
    $create['field_iati_activity_description[und][0][field_description_type][und]'] = '639';
    $create['field_iati_activity_description[und][0][field_language][und]'] = '780';
    // Sector
    $create['field_iati_activity_sector[und][0][field_sector_code][und]'] = '1375';
    $create['field_iati_activity_sector[und][0][field_sector_vocabulary][und]'] = '1514';
    $create['field_iati_activity_sector[und][0][field_percentage][und][0][value]'] = '100';
    // Activity date
    $create['field_iati_activity_date[und][0][field_activity_iso_date][und][0][value][date]'] = '2014-02-11';
    $create['field_iati_activity_date[und][0][field_activity_date_type][und]'] = '469';
    $create['field_iati_activity_date[und][0][field_date_text][und][0][value]'] = $this->randomName(16);
    $this->drupalPostAJAX(NULL, $create, array('field_iati_activity_date_add_more'=>t('Add another item')));
    $create['field_iati_activity_date[und][1][field_activity_iso_date][und][0][value][date]'] = '2014-04-11';
    $create['field_iati_activity_date[und][1][field_activity_date_type][und]'] = '467';
    $create['field_iati_activity_date[und][1][field_date_text][und][0][value]'] = $this->randomName(16);
    $this->drupalPostAJAX(NULL, $create, array('field_iati_activity_date_add_more'=>t('Add another item')));  
    $create['field_iati_activity_date[und][2][field_activity_iso_date][und][0][value][date]'] = '2014-04-11';
    $create['field_iati_activity_date[und][2][field_activity_date_type][und]'] = '468';
    $create['field_iati_activity_date[und][2][field_date_text][und][0][value]'] = $this->randomName(16);
    $this->drupalPostAJAX(NULL, $create, array('field_iati_activity_date_add_more'=>t('Add another item')));  
    $create['field_iati_activity_date[und][3][field_activity_iso_date][und][0][value][date]'] = '2014-06-11';
    $create['field_iati_activity_date[und][3][field_activity_date_type][und]'] = '466';
    $create['field_iati_activity_date[und][3][field_date_text][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_status[und]'] = '15';
    $create['field_iati_activity_website[und][0][url]'] = 'http://www.aptenterprise.org.uk/';
    $create['field_iati_activity_collabo_type[und]'] = '205';
    $create['field_iati_activity_aid_type[und]'] = '25';
    $create['field_iati_activity_finance_type[und]'] = '686';
    $create['field_iati_activity_flow_type[und]'] = '3';
    // $create['files[field_field_iati_activity_doc_und_0]'] = 'http://www.aptenterprise.org.uk/blog/wp-content/uploads/2013/01/Proposal.doc';
    // Additional required fields for IATI activity standard 1.03.
    // $create['field_iati_activities[und][0][value]'] = '';
    // $create['field_iati_activity[und][0][value]'] = '';
    // $create['field_reporting_organisation[und][0][value]'] = 'APT Action on Poverty';
    // Country Budget Items
    $create['field_country_budget_items[und][0][field_budget_vocabulary][und]'] = '199';
    $create['field_country_budget_items[und][0][field_budget_budget_item][und][0][field_budget_code][und]'] = '55';
    $create['field_country_budget_items[und][0][field_budget_budget_item][und][0][field_percentage][und][0][value]'] = 100;
    // Planned Disbursement
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_disbursement_amount][und][0][value]'] = 10000;
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_date][und][0][value][date]'] = '2014-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_iso_value_date_format][und][0][value][date]'] = '2014-08-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_start][und][0][field_free_value_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_iso_value_date_format][und][0][value][date]'] = '2014-10-11';
    $create['field_pland_disbursement[und][0][field_period_disbursement_end][und][0][field_free_ds_text_format][und][0][value]'] = $this->randomName(16);
    $create['field_pland_disbursement[und][0][field_disbursement_value][und][0][field_value_currency][und]'] = '520';
    $create['field_pland_disbursement[und][0][field_disbursement_updated][und][0][value][date]'] = '2014-09-11';
    // Transaction
    $create['field_iati_acitivity_transaction[und][0][field_transaction_ref][und][0][value]'] = 'T01';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_aid_type][und]'] = '37';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_description][und][0][value]'] = 'Travel';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_d_channel][und]'] = '645';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_finance_type][und]'] = '686';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_flow_type][und]'] = '3';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_organisation_ref][und]'] = '_none';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_provider_org][und][0][field_provider_activity_id][und][0][value]'] = '2';
    $create['field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_reciever_organisation][und]'] = '_none';
    $create['field_iati_acitivity_transaction[und][0][field__t_reciever_organisation][und][0][field_provider_activity_id][und][0][value]'] = '2';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_tied_status][und]'] = '637';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_date][und][0][value][date]'] = '2013-12-31';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_type][und]'] = '1504';
    $create['field_iati_acitivity_transaction[und][0][field_transaction_value][und][0][value]'] = 1729;
    // // Conditions
    $create['field_iati_activity_conditions[und][0][field_condition_attached][und]'] = '1';
    $create['field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_type][und]'] = '211';
    $create['field_iati_activity_conditions[und][0][field_condition_condition][und][0][field_condition_free_text][und][0][value]'] = 'use open aid map';
    // Result
    $create['field_iati_activity_result[und][0][field_result_type][und]'] = '1270';
    $create['field_iati_activity_result[und][0][field_aggregation_status][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_description][und][0][field_description_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_ascending][und]'] = '1';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_title][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_d_description][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_indicator_d_language][und]'] = '780';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_description][und][0][field_type][und]'] = '639';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_peiod_start_date][und][0][value][date]'] = '2012-10-12';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_start][und][0][field_indicator_period_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_date][und][0][value][date]'] = '2012-12-31';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_end][und][0][field_period_end_text][und][0][value]'] = $this->randomName(128);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_value][und][0][value]'] = 200;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indi_period_targettarget][und][0][field_target_target_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_value][und][0][value]'] = 100;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_period][und][0][field_indicator_period_actual][und][0][field_indicator_actual_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_year][und][0][value][date]'] = '2016';
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_value][und][0][value]'] = 150;
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_baseline][und][0][field_indicator_baseline_comment][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_result[und][0][field_result_indicator][und][0][field_indicator_measure][und]'] = '743';
    // CRS-ADD
    $create['field_iati_activity_crs_add[und][0][field_crs_add_aid_type_flag][und]'] = '19';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_c_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_first_date][und][0][value][date]'] = '2014-01-01';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_r_final_date][und][0][value][date]'] = '2020-12-31';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_repayment_plan][und]'] ='927';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_repayment_type][und]'] = '929';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_1][und][0][value]'] = '10';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_terms][und][0][field_loan_terms_rate_2][und][0][value]'] = '20';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_i_received][und][0][value]'] = '200000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_outstanding][und][0][value]'] = '1500000';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_p_arrears][und][0][value]'] = '0';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_currency][und]'] = '520';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_crs_add[und][0][field_crs_add_loan_status][und][0][field_loan_status_value_date][und][0][value][date]'] = '2014-01-01';
    // FSS
    $create['field_iati_activity_fss[und][0][field_extraction_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_fss[und][0][field_extraction_priority][und]'] = '1';
    $create['field_iati_activity_fss[und][0][field_phase_out_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_forecast_value][und][0][value]'] = 20130;
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_forecast_year][und][0][value][date]'] = '2013';
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_date][und][0][value][date]'] = '2013-09-01';
    $create['field_iati_activity_fss[und][0][field_fss_forecast][und][0][field_value_currency][und]'] = '520';
    // Contact
    $create['field_iati_activity_contact[und][0][field_contact_person_name][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_organisation][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_telephone][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_email][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_mailing_address][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_website][und][0][value]'] = $this->randomName(16);
    $create['field_iati_activity_contact[und][0][field_contact_type][und]'] = '214';
    // $create['field_participating_organisation[und][0][value]'] = 'DFID';
    $create['field_activity_scope[und]'] = '7';
    // Recepient country
    $create['field_activity_recipient_country[und][0][field_country_code][und]'] = '1212';
    $create['field_activity_recipient_country[und][0][field_percentage][und][0][value]'] = 100;
    $create['field_activity_recipient_country[und][0][field_language][und]'] = '780';
    // Recepient region
    $create['field_activity_recipient_region[und][0][field_region_code][und]'] = '1233';
    $create['field_activity_recipient_region[und][0][field_vocabulary][und]'] = '1262';
    $create['field_activity_recipient_region[und][0][field_percentage][und][0][value]'] = 100;
    $create['field_activity_recipient_region[und][0][field_language][und]'] = '780';
    // Related Activity
    $create['field_related_activity[und][0][field_related_activity_title][und][0][value]'] = '';
    $create['field_related_activity[und][0][field_related_activity_type][und]'] = '_none';
    $create['field_related_activity[und][0][field_related_activity_reference][und][0][value]'] = '';
    $create['field_related_activity[und][0][field_language][und]'] = '_none';
    $create['field_default_tied_status[und]'] = '638';
    $create['field_default_currency[und]'] = '520';
    $create['field_capital_spend[und][0][value]'] = '88.8';
    // Legacy Data
    $create['field__activity_legacy_data[und][0][field_legacy_name][und][0][value]'] = $this->randomName(16);
    $create['field__activity_legacy_data[und][0][field_legacy_value][und][0][value]'] = $this->randomName(16);
    $create['field__activity_legacy_data[und][0][field_iati_equivalent][und][0][value]'] = $this->randomName(16);
    // Policy Marker
    $create['field_policy_marker[und][0][field_policy_marker_code][und]'] = '969';
    $create['field_policy_marker[und][0][field_policy_marker_vocabulary][und]'] = '1514';
    $create['field_policy_marker[und][0][field_significance][und]'] = '975';
    $create['field_policy_marker[und][0][field_language][und]'] = '780';
    $this->drupalPost(NULL, $create, t('Save'));
  }
  /**
   * Test whether a user can save when the required fields are not filled in.
   */
  public function testActivitySaveNullRequiredValues() {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = '';
    $create['field_iati_identifier[und][0][value]'] = '';
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("Title field is required.", "An error is reported when a user tries to save an activty when one of the required fields is not set.");
    $this->assertText("IATI Identifier field is required.", "An error is reported when a user tries to save an activty when one of the required fields is not set.");
  }
  /**
   * Test whether a user can save an activity with the wrong Iati Identifier.
   */
  public function testActivitySaveWrongIatiIdentifier() {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = $this->randomName(20);
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("IATI Identifier is incorrect.", "An error is reported when a user tries to save an activty when one of the required fields is incorrect.");
  }
  /**
   * Test whether a user can save an activity with an Invalid Website Url.
   */
  public function testActivitySaveInvalidWebsiteUrl() {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_website[und][0][url]'] = $this->randomName(32);
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("The value provided for Website is not a valid URL.", "An error is reported when a user tries to save an activty with an invalid website url.");
  }
  /**
   * Test whether a user can save an activity with a planned end date
   * that is earlier than the planned start date
   */
  public function testActivitySaveInvalidPlannedDates() {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_date[und][0][field_activity_iso_date][und][0][value][date]'] = '2014-04-11';
    $create['field_iati_activity_date[und][0][field_activity_date_type][und]'] = '469';
    $create['field_iati_activity_date[und][0][field_date_text][und][0][value]'] = $this->randomName(16);
    $this->drupalPostAJAX(NULL, NULL, array('field_iati_activity_date_add_more'=>t('Add another item')));
    $create['field_iati_activity_date[und][1][field_activity_iso_date][und][0][value][date]'] = '2014-02-11';
    $create['field_iati_activity_date[und][1][field_activity_date_type][und]'] = '467';
    $create['field_iati_activity_date[und][1][field_date_text][und][0][value]'] = $this->randomName(16);
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("There are errors in Planned Date value #1:", "An error is reported when a user tries to save an activty with a planned end date that is earlier than the planned start date.");
  }
  /**
   * Test whether a user can save an activity with a actual end date
   * that is earlier than the actual start date
   */
  public function testActivitySaveInvalidActualDates() {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_date[und][0][field_activity_iso_date][und][0][value][date]'] = '2014-08-11';
    $create['field_iati_activity_date[und][0][field_activity_date_type][und]'] = '468';
    $create['field_iati_activity_date[und][0][field_date_text][und][0][value]'] = $this->randomName(16);
    $this->drupalPostAJAX(NULL, NULL, array('field_iati_activity_date_add_more'=>t('Add another item')));
    $create['field_iati_activity_date[und][1][field_activity_iso_date][und][0][value][date]'] = '2014-04-11';
    $create['field_iati_activity_date[und][1][field_activity_date_type][und]'] = '466';
    $create['field_iati_activity_date[und][1][field_date_text][und][0][value]'] = $this->randomName(16);
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("There are errors in Actual Date value #1:", "An error is reported when a user tries to save an activty with an actual end date that is earlier than the actual start date.");
  }
  /**
   * Test if a user can save an activity with an implementation activity status with no actual start date.
   */
  public function testActivitySaveImplementationStatusNoActualStartDate() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_status[und]'] = '15';
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("The Actual Start Date is required.", "An error is reported when a user tries to save an activty with an implementation activity status with no actual start date.");
  }
  /**
   * Test if a user can save an activity with a completion activity status with no actual end date.
   */
  public function testActivitySaveCompletionStatusNoActualEndDate() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families in Amuria District, Uganda';
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $create['field_iati_activity_status[und]'] = '16';
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("The Actual End Date is required.", "An error is reported when a user tries to save an activty with a completion activity status with no actual end date.");
  }
  /**
   * Test whether a user can save an activity with a title with less than 50 characters.
   */
  public function testActivitySaveShortTitle() {
    $this->drupalGet('node/add/iati-activity');
    $create['title'] = $this->randomName(16);
    $create['field_iati_identifier[und][0][value]'] = 'GB-CHC-290836-IMP061';
    $this->drupalPost(NULL, $create, t('Save'));
    // Assert that the user can not save the activity.
    $this->assertText("Title needs to have at least 50 characters", "An error is reported when a user tries to save an activty with a title with less than 50 characters.");
  }

}

/**
 * This tests the different scenarios that can possibly
 * happen when a user is adding an IATI Organisation to the site.
 */
class IatiOrganisationTestCase extends IatiWebTestCase {
  
  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Add IATI Organisation tests',
      'description' => 'Testing the different Iati Add Organisation Features, Cases and scenerios',
      'group' => 'Iati',
    );
  }

  /**
   * The setup() function sets conditions for a given test case scenario.
   *
   * In this case,this creates a user with the administrator role.
   * And then the user is logged into the site.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('iati', 'migrate_ui'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
  }

  /**
   *
   * This loads the IATI Organisation authoring page and ascertains if 
   * the current user, can view the page by
   * asserting that a number of text strings are being rendered on the
   * current page, and then echoes that the "Create IATI Organisation"
   * page has been found.
   */
  public function testAccessOrganisation() {
    $this->drupalGet('node/add/iati-organisation');
    $this->assertText('Create IATI Organisation', t('page Create IATI Organisation is found'));
  }
  /**
   * This loads the IATI Organisation authoring page and ascertains that 
   * a number of fields are a part of the page by asserting that a field 
   * with a given name or ID is present on the page.
   * 
   * The fields include: Organisation Identifier, Reporting Organisation, Organisation
   * Documents, Language, Default Currency, Annual Total Budgets,
   * Annual Recepient, Organisation Budgets, Annual Recepient Countries Budget.
   */
  public function testCreateOrganisationFieldsPresence() {
    $this->drupalGet('node/add/iati-organisation');
    $this->assertField('title', t('title field on create organisation page is found'));
    $this->assertField('field_iati_identifier[und][0][value]', t('iati organisation Identifier field is found'));
    $this->assertField('field_iati_org_type[und]', t('Iati organisation type field is found'));
    $this->assertField('field_iati_org_url[und][0][title]', t('Link title field for organistion'));
    $this->assertField('field_iati_org_url[und][0][url]', t('field for the organisation website is found'));
    $this->assertField('files[field_org_logo_und_0]', t('Organisation logo field is found'));
    $this->assertField('field_langauge[und]', t('Default language field is found on the add iati organisation'));
    $this->assertField('field_iati_default_currency[und][0][value]', t('Default currency field is found on iati add organisation page'));
    $this->assertField('edit-field-total-budget-und-actions-ief-add', t('Button for adding a budget is found on iati add organisation page '));
    $this->assertField('edit-field-recipient-org-budget-und-actions-ief-add', t('Button for adding a budget for the recepient organisation is found on iati add organisation page'));
    $this->assertField('edit-field-recipient-country-budget-und-actions-ief-add', t('Button for adding the budget for a recepient country is found on iati add organisation page'));
    // $this->assertField('field_reporting_orgaisation[und][0][value]', t('Reporting organisation field is found on iati add organisation page'));
    $this->assertLink('Read More', 0,  t('Link to read more about iati organisation add is found'));
    $this->assertField('field_organisation_documents[und][0][field_document_title][und][0][value]', t('Organisation document title field is found on the iati add organisation page'));
    $this->assertField('field_organisation_documents[und][0][field_document_title_language][und]', t('Organisation document title language field is found on the iati add organisation page'));
    $this->assertField('field_organisation_documents[und][0][field_org_format][und][0][value]', t('Organisation document document format field is found on the iati add organisation page'));
    $this->assertField('field_organisation_documents[und][0][field_iati_org_url][und][0][title]', t('Organisation document url title field is found on the iati add organisation page'));
    $this->assertField('field_organisation_documents[und][0][field_iati_org_url][und][0][url]', t('Organisation document url field is found on the iati add organisation page'));
    $this->assertField('field_organisation_documents[und][0][field_langauge][und]', t('Organisation document language field is found on the iati add organisation page'));
    $this->assertField('field_organisation_documents[und][0][field_iati_code][und][0][value]', t('Organisation document category code field is found on the iati add organisation page'));
    $this->assertField('field_organisation_documents[und][0][field_category_description_langu][und]', t('Organisation document category code language field is found on the iati add organisation page'));
  }
  /**
   * Assert that certain 'Read More' fields are present on the page by
   * searching for their href values.
   */
  public function testCreateOrganisationReadMoreLinkPresence() {
    $this->drupalGet('node/add/iati-organisation');
    $this->assertLinkByHref('http://iatistandard.org/codelists/organisation/', 0, t('Read More link for Identifier field is found on the page'));
    $this->assertLinkByHref('http://iatistandard.org/codelists/organisation_type/', 0, t('Read More link for Organisation Type field is found on the page'));
    $this->assertLinkByHref('http://iatistandard.org/activities-standard/document-link/language/', 0, t('Read More link for Default Language field is found on the page'));
    $this->assertLinkByHref('http://iatistandard.org/codelists/currency/', 0, t('Read More link for Default Currency field is found on the page'));
    // $this->assertLinkByHref('http://iatistandard.org/organisation-standard/documents/', 0, t('Read More link for Organisation Documents field is found on the page'));
  }
  /**
   * Test if a user can create an annual total budget entity with the ideal values.
   */
  public function testOrganisationAddAnnualTotalBudget() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-568889966aa65ab9e4df198cb20771298407993b-add', 'Add new annual total budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Annual Total Budget'));
    $budget['field_total_budget[und][form][value_amount]'] = 308975;
    $budget['field_total_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_total_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_total_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_total_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_total_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_total_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Test if a user can create an annual total budget entity with a value amount in the wrong format.
   */
  public function testOrganisationAddAnnualTotalBudgetWrongValueFormat() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-568889966aa65ab9e4df198cb20771298407993b-add', 'Add new annual total budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Annual Total Budget'));
    $budget['field_total_budget[und][form][value_amount]'] = '308975';
    $budget['field_total_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_total_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_total_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_total_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_total_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_total_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("Amount has to be a numeric value", "An error is reported when a user tries to save a budget with a value in the incorrect format.");
  }
  /**
   * Test if a user can create an annual total budget entity with the null values for required fields.
   */
  public function testOrganisationAddAnnualTotalBudgetNullReqValues() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-568889966aa65ab9e4df198cb20771298407993b-add', 'Add new annual total budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Annual Total Budget'));
    $budget['field_total_budget[und][form][value_amount]'] = '';
    $budget['field_total_budget[und][form][value_date][date]'] = '';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    $this->assertText("Value Amount field is required.", "An error is reported when a user tries to save a budget with no value amount.");
    $this->assertText("A valid date is required for Value Date.", "An error is reported when a user tries to save a budget with no value date.");
  }
  /**
   * Test if a user can create an annual total budget entity with invalid date formats.
   */
  public function testOrganisationAddAnnualTotalBudgetInvalidDateFormats() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-568889966aa65ab9e4df198cb20771298407993b-add', 'Add new annual total budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Annual Total Budget'));
    $budget['field_total_budget[und][form][value_amount]'] = 308975;
    $budget['field_total_budget[und][form][value_date][date]'] = '20140211'; 
    $budget['field_total_budget[und][form][period_start][date]'] = '2014/06/11';
    $budget['field_total_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_total_budget[und][form][period_end][date]'] = '11-12-2014';
    $budget['field_total_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_total_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("The value input for field Value Date is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
    $this->assertText("The value input for field Period Start is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
    $this->assertText("The value input for field Period End is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
  }
  /**
   * Test if a user can create an annual total budget entity with invalid dates.
   */
  public function testOrganisationAddAnnualTotalBudgetInvalidDates() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-568889966aa65ab9e4df198cb20771298407993b-add', 'Add new annual total budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Annual Total Budget'));
    $budget['field_total_budget[und][form][value_amount]'] = 308975;
    $budget['field_total_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_total_budget[und][form][period_start][date]'] = '2014-12-11';
    $budget['field_total_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_total_budget[und][form][period_end][date]'] = '2014-06-11';
    $budget['field_total_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_total_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("Start date can not be after end date", "An error is reported when the user tries to save a budget with a start date later then the corresponding end date.");
  }
  /**
   * Test if a user can create an annual total budget entity with negative value.
   */
  public function testOrganisationAddAnnualTotalBudgetNegativeValue() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-568889966aa65ab9e4df198cb20771298407993b-add', 'Add new annual total budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Annual Total Budget'));
    $budget['field_total_budget[und][form][value_amount]'] = -308975;
    $budget['field_total_budget[und][form][value_date][date]'] = '2014-02-11';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("Amount cant be a negative number", "An error is reported when the user tries to save a budget with a negative amount value.");
  }
  /**
   * Test if a user can create a recepient organisation budget entity with the ideal values.
   */
  public function testOrganisationAddReceipientOrganisationBudget() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-886ec23459461c8a365b581297bb24b56e25bc4e-add', 'Add Receipient Organisation Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_org_budget[und][form][value_amount]'] = 308975;
    $budget['field_recipient_org_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_recipient_org_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_recipient_org_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_recipient_org_budget[und][form][period_end_text]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][field_iati_org_ref][und][0][target_id]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][field_recipient_org][und][0][target_id]'] = $this->randomName(16);
    // $budget['field_recipient_org_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Test if a user can create a recepient organisation budget entity with the value amount in the wrong format.
   */
  public function testOrganisationAddReceipientOrganisationBudgetWrongValueFormat() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-886ec23459461c8a365b581297bb24b56e25bc4e-add', 'Add Receipient Organisation Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_org_budget[und][form][value_amount]'] = 308975;
    $budget['field_recipient_org_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_recipient_org_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_recipient_org_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_recipient_org_budget[und][form][period_end_text]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][field_iati_org_ref][und][0][target_id]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][field_recipient_org][und][0][target_id]'] = $this->randomName(16);
    // $budget['field_recipient_org_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("Amount has to be a numeric value", "An error is reported when a user tries to save a budget with a value in the incorrect format.");
  }

  /**
   * Test if a user can create a recepient organisation budget entity with null values.
   */
  public function testOrganisationAddReceipientOrganisationBudgetNullReqValues() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-886ec23459461c8a365b581297bb24b56e25bc4e-add', 'Add Receipient Organisation Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_org_budget[und][form][value_amount]'] = '';
    $budget['field_recipient_org_budget[und][form][value_date][date]'] = '';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    $this->assertText("Value Amount field is required.", "An error is reported when a user tries to save a budget with no value amount.");
    $this->assertText("A valid date is required for Value Date.", "An error is reported when a user tries to save a budget with no value date.");
  }
  /**
   * Test if a user can create a recepient organisation budget entity with dates in invalid formats.
   */
  public function testOrganisationAddReceipientOrganisationBudgetInvalidDateFormats() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-886ec23459461c8a365b581297bb24b56e25bc4e-add', 'Add Receipient Organisation Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_org_budget[und][form][value_amount]'] = 308975;
    $budget['field_recipient_org_budget[und][form][value_date][date]'] = '20140211'; 
    $budget['field_recipient_org_budget[und][form][period_start][date]'] = '2014/06/11';
    $budget['field_recipient_org_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][period_end][date]'] = '11-12-2014';
    $budget['field_recipient_org_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_org_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("The value input for field Value Date is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
    $this->assertText("The value input for field Period Start is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
    $this->assertText("The value input for field Period End is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
  }
  /**
   * Test if a user can create a recepient organisation budget entity with the invalid dates.
   */
  public function testOrganisationAddReceipientOrganisationBudgetInvalidDates() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-886ec23459461c8a365b581297bb24b56e25bc4e-add', 'Add Receipient Organisation Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_org_budget[und][form][value_amount]'] = 308975;
    $budget['field_recipient_org_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_recipient_org_budget[und][form][period_start][date]'] = '2014-12-11';
    $budget['field_recipient_org_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_org_budget[und][form][period_end][date]'] = '2014-06-11';
    $budget['field_recipient_org_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_org_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("The End date must be greater than the Start date.", "An error is reported when the user tries to save a budget with a start date later then the corresponding end date.");
  }
  /**
   * Test if a user can create a recepient organisation budget entity with negative value.
   */
  public function testOrganisationAddReceipientOrganisationBudgetNegativeValue() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-886ec23459461c8a365b581297bb24b56e25bc4e-add', 'Add Receipient Organisation Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Organisation Budget'));
    $budget['field_recipient_org_budget[und][form][value_amount]'] = -308975;
    $budget['field_recipient_org_budget[und][form][value_date][date]'] = '2014-02-11';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    $this->assertText("Value Amount cannot be negative value.", "An error is reported when a user tries to save a budget with a negative value amount.");
  }
  /**
   * Test if a user can create a recepient country budget entity with the ideal values.
   */
  public function testOrganisationAddReceipientCountriesBudget() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-3e50ce2aaaf62b8c77775e32734ddd684abecb3c-add', 'Add Receipient Countries Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Countries Budget'));
    $budget['field_recipient_country_budget[und][form][value_amount]'] = 308975;
    $budget['field_recipient_country_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_recipient_country_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_recipient_country_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_country_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_recipient_country_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_country_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
  }
  /**
   * Test if a user can create a recepient country budget entity with the value amount in the wrong format.
   */
  public function testOrganisationAddReceipientCountriesBudgetWrongValueFormat() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-3e50ce2aaaf62b8c77775e32734ddd684abecb3c-add', 'Add Receipient Countries Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Countries Budget'));
    $budget['field_recipient_country_budget[und][form][value_amount]'] = '308975';
    $budget['field_recipient_country_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_recipient_country_budget[und][form][period_start][date]'] = '2014-06-11';
    $budget['field_recipient_country_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_country_budget[und][form][period_end][date]'] = '2014-12-11';
    $budget['field_recipient_country_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_country_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("Amount has to be a numeric value", "An error is reported when a user tries to save a budget with a value in the incorrect format.");
  }
  /**
   * Test if a user can create a recepient country budget entity with null values.
   */
  public function testOrganisationAddReceipientCountriesBudgetNullReqValues() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-3e50ce2aaaf62b8c77775e32734ddd684abecb3c-add', 'Add Receipient Countries Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Countries Budget'));
    $budget['field_recipient_country_budget[und][form][value_amount]'] = '';
    $budget['field_recipient_country_budget[und][form][value_date][date]'] = '';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    $this->assertText("Value Amount field is required.", "An error is reported when a user tries to save a budget with no value amount.");
    $this->assertText("A valid date is required for Value Date.", "An error is reported when a user tries to save a budget with no value date.");
  }
  /**
   * Test if a user can create a recepient country budget entity with dates in invalid formats.
   */
  public function testOrganisationAddReceipientCountriesBudgetInvalidDateFormats() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-3e50ce2aaaf62b8c77775e32734ddd684abecb3c-add', 'Add Receipient Countries Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Countries Budget'));
    $budget['field_recipient_country_budget[und][form][value_amount]'] = 308975;
    $budget['field_recipient_country_budget[und][form][value_date][date]'] = '20140211'; 
    $budget['field_recipient_country_budget[und][form][period_start][date]'] = '2014/06/11';
    $budget['field_recipient_country_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_country_budget[und][form][period_end][date]'] = '11-12-2014';
    $budget['field_recipient_country_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_country_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("The value input for field Value Date is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
    $this->assertText("The value input for field Period Start is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
    $this->assertText("The value input for field Period End is invalid:", "An error is reported when a user tries to save a budget with a date in the incorrect format.");
  }
  /**
   * Test if a user can create an annual total budget entity with invalid dates.
   */
  public function testOrganisationAddReceipientCountriesBudgetInvalidDates() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-3e50ce2aaaf62b8c77775e32734ddd684abecb3c-add', 'Add Receipient Countries Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Countries Budget'));
    $budget['field_recipient_country_budget[und][form][value_amount]'] = 308975;
    $budget['field_recipient_country_budget[und][form][value_date][date]'] = '2014-02-11'; 
    $budget['field_recipient_country_budget[und][form][period_start][date]'] = '2014-12-11';
    $budget['field_recipient_country_budget[und][form][period_start_text]'] = $this->randomName(16);
    $budget['field_recipient_country_budget[und][form][period_end][date]'] = '2014-06-11';
    $budget['field_recipient_country_budget[und][form][period_end_text]'] = $this->randomName(16);
    // $budget['field_recipient_country_budget[und][form][field_budget_type][und]'] = '2';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    // Assert that the user can not save the budget.
    $this->assertText("The End date must be greater than the Start date.", "An error is reported when the user tries to save a budget with a start date later then the corresponding end date.");
  }
  /**
   * Test if a user can create a recepient country budget entity with negative value.
   */
  public function testOrganisationAddReceipientCountriesBudgetNegativeValue() {
    $this->drupalGet('node/add/iati-organisation');
    // Create a budget.
    $this->assertField('ief-3e50ce2aaaf62b8c77775e32734ddd684abecb3c-add', 'Add Receipient Countries Budget button exists on the page');
    $this->drupalPost(NULL, NULL, t('Add Receipient Countries Budget'));
    $budget['field_recipient_country_budget[und][form][value_amount]'] = -308975;
    $budget['field_recipient_country_budget[und][form][value_date][date]'] = '2014-02-11';
    $this->drupalPost(NULL, $budget, t('Create entity'));
    $this->assertText("Value Amount cannot be negative value.", "An error is reported when a user tries to save a budget with negative value amount.");
  }
  /**
   * Test whether a user can save an organisation with the Ideal Values.
   */
  public function testSaveOrganisationValuesIdeal() {
    $this->importCodelists();
    $this->drupalGet('node/add/iati-organisation');
    $orgsub['title'] = 'Agency for Cooperation and Research in Development';
    $orgsub['field_iati_identifier[und][0][value]'] = 'GB-CHC-283302';
    $orgsub['field_iati_org_type[und]'] = '957';
    $orgsub['language'] = 'en';
    $orgsub['field_iati_org_url[und][0][url]'] = '';
    $orgsub['field_langauge[und]'] = '780';
    $orgsub['field_iati_default_currency[und][0][value]'] = '';
    $orgsub['field_reporting_orgaisation[und][0][value]'] = 'ACORD';
    $orgsub['field_organisation_documents[und][0][field_document_title][und][0][value]'] = 'ACORD';
    $orgsub['field_organisation_documents[und][0][field_document_title_language][und]'] = '780';
    $orgsub['field_organisation_documents[und][0][field_org_format][und][0][value]'] = 'text/html';
    $orgsub['field_organisation_documents[und][0][field_iati_org_url][und][0][title]'] = 'Organisation Documents';
    $orgsub['field_organisation_documents[und][0][field_iati_org_url][und][0][url]'] = 'http://iatistandard.org/organisation-standard/documents/';
    $orgsub['field_organisation_documents[und][0][field_langauge][und]'] = '780';
    $orgsub['field_organisation_documents[und][0][field_org_document_category_code][und]'] = '658';
    $orgsub['field_organisation_documents[und][0][field_category_description_langu][und]'] = '780';
    $orgsub['field_reporting_organisation[und][0][field_organisation_name][und][0][value]'] = 'ACORD';
    $orgsub['field_reporting_organisation[und][0][field_langauge][und]'] = '780';
    $orgsub['field_reporting_organisation[und][0][field_iati_org_type][und]'] = '957';
    $orgsub['field_reporting_organisation[und][0][field_organisation_reference][und][0][value]'] = 'GB-CHC-283302';
    $this->drupalPost(NULL, $orgsub, ('Save'));
  }
  /**
   * Test whether a user can save an organisation with Null Values
   * for all the required fields.
   */
  public function testSaveOrganisationValuesNull() {
    $this->drupalGet('node/add/iati-organisation');
    $orgsub['title'] = '';
    $orgsub['field_iati_identifier[und][0][value]'] = '';
    $this->drupalPost(NULL, $orgsub, ('Save'));
    // Assert that the user can not save the organisation.
    $this->assertText("Organisation Name field is required.", "An error is reported when a user tries to save an organisation when one of the required fields is not set.");
    $this->assertText("Identifier field is required.", "An error is reported when a user tries to save an organisation when one of the required fields is not set.");
  }
}
/**
 * This tests the different scenarios that can possibly
 * happen when a user is adding an IATI Relation to the site.
 */
class IatiRelationTestCase extends IatiWebTestCase {
  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Add IATI Relation tests',
      'description' => 'Testing the different scenerios that can occur when adding a  relation to an IATI activity',
      'group' => 'Iati',
    );
  }

  /**
   * The setup() function sets conditions for a given test case scenario.
   *
   * In this case,this creates a user with the administrator role.
   * And then the user is logged into the site.
   *
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('iati', 'migrate_ui'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
    $this->importCodelists();
  }

  /**
   * Test if user can add an accountable organisation role relation to an activity.
   */
  public function testAddAccountableOrganisationRole() {
    $orgname = $this->randomName(52);
    $this->createOrganisation($orgname);
    $title = $this->randomName(52);
    $this->createActivity($title);
    $this->drupalGet("node/4/edit");
    $this->assertFieldByName("current_entity", $title . " [node:4]", "Correct value is chosen for current entity field.");
    $this->assertField('relation_type', 'Relation type field is present.');
    // Set the relation type.
    $options['relation_type'] = 'iati_organisation_role';
    $this->drupalPostAJAX(NULL, $options, 'relation_type');
    // Set the endpoint and the role.
    $options['target_2'] = $orgname . " [node:3]";
    $options['field_organisation_role[und]'] = '951';
    // Save the relation.
    $this->drupalPost(NULL, $options, t('Create relation'));
    $this->assertNoText('Relation not created.', 'Relation was created successfully.');
  }
  /**
   * Test if user can add an extending organisation role relation to an activity.
   */
  public function testAddExtendingOrganisationRole(){
    $orgname = $this->randomName(52);
    $this->createOrganisation($orgname);
    $title = $this->randomName(52);
    $this->createActivity($title);
    $this->drupalGet("node/4/edit");
    $this->assertFieldByName("current_entity", $title . " [node:4]", "Correct value is chosen for current entity field.");
    $this->assertField('relation_type', 'Relation type field is present.');
    // Set the relation type.
    $options['relation_type'] = 'iati_organisation_role';
    $this->drupalPostAJAX(NULL, $options, 'relation_type');
    // Set the endpoint and the role.
    $options['target_2'] = $orgname . " [node:3]";
    $options['field_organisation_role[und]'] = '952';
    // Save the relation.
    $this->drupalPost(NULL, $options, t('Create relation'));
    $this->assertNoText('Relation not created.', 'Relation was created successfully.');
  }
  /**
   * Test if user can add a funding organisation role relation to an activity.
   */
  public function testAddFundingOrganisationRole(){
    $orgname = $this->randomName(52);
    $this->createOrganisation($orgname);
    $title = $this->randomName(52);
    $this->createActivity($title);
    $this->drupalGet("node/4/edit");
    $this->assertFieldByName("current_entity", $title . " [node:4]", "Correct value is chosen for current entity field.");
    $this->assertField('relation_type', 'Relation type field is present.');
    // Set the relation type.
    $options['relation_type'] = 'iati_organisation_role';
    $this->drupalPostAJAX(NULL, $options, 'relation_type');
    // Set the endpoint and the role.
    $options['target_2'] = $orgname . " [node:3]";
    $options['field_organisation_role[und]'] = '953';
    // Save the relation.
    $this->drupalPost(NULL, $options, t('Create relation'));
    $this->assertNoText('Relation not created.', 'Relation was created successfully.');
  }
  /**
   * Test if user can add an implementing organisation role relation to an activity.
   */
  public function testAddImplementingOrganisationRole(){
    $orgname = $this->randomName(52);
    $this->createOrganisation($orgname);
    $title = $this->randomName(52);
    $this->createActivity($title);
    $this->drupalGet("node/4/edit");
    $this->assertFieldByName("current_entity", $title . " [node:4]", "Correct value is chosen for current entity field.");
    $this->assertField('relation_type', 'Relation type field is present.');
    // Set the relation type.
    $options['relation_type'] = 'iati_organisation_role';
    $this->drupalPostAJAX(NULL, $options, 'relation_type');
    // Set the endpoint and the role.
    $options['target_2'] = $orgname . " [node:3]";
    $options['field_organisation_role[und]'] = '954';
    // Save the relation.
    $this->drupalPost(NULL, $options, t('Create relation'));
    $this->assertNoText('Relation not created.', 'Relation was created successfully.');
  }
  /**
   * Test if user can add an IATI parent activity relation to an activity.
   */
  public function testAddIATIParentActivity(){
    $title1 = $this->randomName(52);
    $this->createActivity($title1);
    $title2 = $this->randomName(52);
    $this->createActivity($title2);
    $this->drupalGet("node/4/edit");
    $this->assertFieldByName("current_entity", $title2 . " [node:4]", "Correct value is chosen for current entity field.");
    $this->assertField('relation_type', 'Relation type field is present.');
    // Set the relation type.
    $options['relation_type'] = 'iati_parent_activity';
    $this->drupalPostAJAX(NULL, $options, 'relation_type');
    // Set the endpoint and the role.
    $options['target_2'] = $title1 . " [node:3]";
    // Save the relation.
    $this->drupalPost(NULL, $options, t('Create relation'));
    $this->assertNoText('Relation not created.', 'Relation was created successfully.');
  }
  /**
   * Test if user can add an IATI reverse parent activity relation to an activity.
   */
  public function testAddIATIParentActivityReverse(){
    $title1 = 'Integrated community livelihood support and care systems for 6,960 vulnerable rural families';
    $this->createActivity($title1);
    $title2 = 'Integrated community livelihood support and care systems for 9,690 vulnerable rural families';
    $this->createActivity($title2);
    $this->drupalGet("node/4/edit");
    $this->assertFieldByName("current_entity", $title2 . " [node:4]", "Correct value is chosen for current entity field.");
    $this->assertField('relation_type', 'Relation type field is present.');
    // Set the relation type.
    $options['relation_type'] = 'iati_parent_activity:reverse';
    $this->drupalPostAJAX(NULL, $options, 'relation_type');
    // Set the endpoint and the role.
    $options['target_2'] = $title1 . " [node:3]";
    // Save the relation.
    $this->drupalPost(NULL, $options, t('Create relation'));
    $this->assertNoText('Relation not created.', 'Relation was created successfully.');
  }
}
