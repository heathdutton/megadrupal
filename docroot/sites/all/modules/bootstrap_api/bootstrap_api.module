<?php
/**
 * @file
 *
 * @author Dennis BrÃ¼cke (blackice2999) | TWD - team:Werbedesign UG
 * @see http://drupal.org/user/413429
 * @see http://team-wd.de
 */

define ('BOOTSTRAP_LIBRARY_PATH', 'sites/all/libraries/bootstrap');
define ('BOOTSTRAP_VERSION_MIN', '2.1.1');

/**
 * Implements hook_library();
 * - provides bootstrap_api own js implementations
 * - provides bootstrap  js
 *
 * @return mixed
 */
function bootstrap_api_library() {

  $bootstrap_api_path = drupal_get_path('module', 'bootstrap_api');
  $bootstrap_library_path = bootstrap_api_get_path();

  /**
   * Drupal: Bootstrap API Library support
   */
  $libraries['bootstrap-api.modal'] = array(
    'title' => 'Bootstrap API: Modal',
    'website' => 'http://twitter.github.com/bootstrap/index.html',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_api_path . '/js/bootstrap_api.modal.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
      array('bootstrap_api', 'bootstrap-modal'),
    ),
  );

  $libraries['bootstrap-api.popover'] = array(
    'title' => 'Bootstrap API: Popover',
    'website' => 'http://twitter.github.com/bootstrap/index.html',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_api_path . '/js/bootstrap_api.popover.js' => array(),
    ),
    'dependencies' => array(
      array('bootstrap_api', 'bootstrap-popover'),
    ),
  );

  $libraries['bootstrap-api.collapse'] = array(
    'title' => 'Bootstrap API: Collapse',
    'website' => 'http://twitter.github.com/bootstrap/index.html',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_api_path . '/js/bootstrap_api.collapse.js' => array(),
    ),
    'dependencies' => array(
      array('bootstrap_api', 'bootstrap-collapse'),
    ),
  );

  $libraries['bootstrap-api.drupal.contextual-links'] = array(
    'title' => 'Replace Drupal Contextual with Bootstrap Dropdown',
    'description' => 'replace the drupal core contextual javascript with bootstrap javascript',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_api_path . '/js/bootstrap_api.contextual.js' => array(),
    ),
    'css' => array(
      $bootstrap_api_path . '/css/bootstrap_api.contextual.css' => array(),
    ),
    'dependencies' => array(
      array('bootstrap_api', 'bootstrap-dropdown'),
    ),
  );

  $libraries['bootstrap-api.dropdown'] = array(
    'title' => 'Bootstrap API: Dropdown',
    'website' => 'http://twitter.github.com/bootstrap/index.html',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_api_path . '/js/bootstrap_api.dropdown.js' => array(),
    ),
    'dependencies' => array(
      array('bootstrap_api', 'bootstrap-dropdown'),
    ),
  );

  $libraries['bootstrap-api.alert'] = array(
    'title' => 'Bootstrap API: Alert',
    'website' => '',
    'version' => '',
    'js' => array(
      $bootstrap_api_path . '/js/bootstrap_api.alert.js' => array(),
    ),
    'dependencies' => array(
      array('bootstrap_api', 'bootstrap-alert'),
    ),
  );

  /**
   * Bootstrap API
   */
  $libraries['bootstrap-affix'] = array(
    'title' => 'Bootstrap Affix',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#affix',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-affix.js' => array(),
    ),
  );

  $libraries['bootstrap-alert'] = array(
    'title' => 'Bootstrap Alert',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#alerts',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-alert.js' => array(),
    ),
  );

  $libraries['bootstrap-button'] = array(
    'title' => 'Bootstrap Button',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#buttons',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-button.js' => array(),
    ),
  );

  $libraries['bootstrap-carousel'] = array(
    'title' => 'Bootstrap Carousel',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#carousel',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-carousel.js' => array(),
    ),
  );

  $libraries['bootstrap-dropdown'] = array(
    'title' => 'Bootstrap Dropdown',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#dropdowns',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-dropdown.js' => array(),
    ),
  );

  $libraries['bootstrap-popover'] = array(
    'title' => 'Bootstrap Popover',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#popovers',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-popover.js' => array(),
    ),
    'dependencies' => array(
      array('bootstrap_api', 'bootstrap-tooltip'),
    ),
  );

  $libraries['bootstrap-scrollspy'] = array(
    'title' => 'Bootstrap Modal',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#scrollspy',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-scrollspy.js' => array(),
    ),
  );

  $libraries['bootstrap-tab'] = array(
    'title' => 'Bootstrap Modal',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#tabs',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-tab.js' => array(),
    ),
  );

  $libraries['bootstrap-tooltip'] = array(
    'title' => 'Bootstrap Tooltip',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#tooltips',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-tooltip.js' => array(),
    ),
  );

  $libraries['bootstrap-typeahead'] = array(
    'title' => 'Bootstrap Typeahead',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#typeahead',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-typeahead.js' => array(),
    ),
  );

  $libraries['bootstrap-modal'] = array(
    'title' => 'Bootstrap Modal',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#modals',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-modal.js' => array(),
    ),
  );

  $libraries['bootstrap-collapse'] = array(
    'title' => 'Bootstrap Collapse',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#collapse',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-collapse.js' => array(),
    ),
  );

  $libraries['bootstrap-transition'] = array(
    'title' => 'Bootstrap Transition',
    'website' => 'http://twitter.github.com/bootstrap/javascript.html#transitions',
    'version' => '2.1.1',
    'js' => array(
      $bootstrap_library_path . '/js/bootstrap-transition.js' => array(),
    ),
  );

  /**
   * Include all js files by using dependencies
   */
  $libraries['bootstrap-api.all'] = array(
    'title' => 'Bootstrap API: All Bootstrap files',
    'website' => 'http://twitter.github.com/bootstrap/index.html',
    'version' => '2.1.1',
    'dependencies' => array(
      array('bootstrap_api', 'bootstrap-affix'),
      array('bootstrap_api', 'bootstrap-alert'),
      array('bootstrap_api', 'bootstrap-button'),
      array('bootstrap_api', 'bootstrap-carousel'),
      array('bootstrap_api', 'bootstrap-collapse'),
      array('bootstrap_api', 'bootstrap-dropdown'),
      array('bootstrap_api', 'bootstrap-modal'),
      array('bootstrap_api', 'bootstrap-popover'),
      array('bootstrap_api', 'bootstrap-scrollspy'),
      array('bootstrap_api', 'bootstrap-tab'),
      array('bootstrap_api', 'bootstrap-tooltip'),
      array('bootstrap_api', 'bootstrap-transition'),
      array('bootstrap_api', 'bootstrap-typeahead'),
    ),
  );

  return $libraries;
}

function bootstrap_api_modal_get_form($form_id, &$form_state) {
  // This won't override settings already in.
  $form_state += array(
    're_render' => FALSE,
    'no_redirect' => !empty($form_state['ajax']),
  );

  $output = drupal_build_form($form_id, $form_state);
  if (!empty($form_state['ajax']) && (!$form_state['executed'] || $form_state['rebuild'])) {
    return ctools_modal_form_render($form_state, $output);
  }

  return $output;
}

function bootstrap_api_generic_ajax_callback(&$form, &$form_state) {
  ctools_include('ajax');

  if (form_get_errors()) {
    return $form;
  }

  $commands = array();
  $commands[] = bootstrap_api_command_modal('hide');
  $commands[] = ctools_ajax_command_reload();
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Provides an way of representing the current page context as a dialog.
 * This can be also be used to detect if we aree in a modal dialog... for example
 * you want in a form alter and want to detect if the current form is in a modal dialog
 * so use this method without params...
 *
 * @param $options
 * @todo specify possible optiosn for modal dialogs... i think its will be a good idea
 * to present it in the same way like jquery ui dialog does it...
 *
 * @return
 *   FALSE if the page is not to become a dialog box. Otherwise, will be an
 *   array of options that were previously set through the call to
 *   dialog_display. These options define how the resulting dialog box should
 *   be displayed.
 */
function bootstrap_api_modal_display($options = NULL) {
  $dialog = & drupal_static(__FUNCTION__, FALSE);
  if (isset($options)) {
    $dialog = is_array($options) ? $options : array(
      'bootstrap_api_modal_class' => drupal_html_class($_GET['q']),
      'title' => drupal_get_title(),
    );
  }

  return $dialog;
}

/**
 * Ajax Command: Show or Hide a modal Dialog (bootstrapModal)
 *
 * @param $op "show || hide"
 * @param $content
 * @param array $options
 * @return array
 */
function bootstrap_api_command_modal($op, $content = array(), $options = array()) {
  switch ($op) {
    case 'hide':
      $command = array(
        'command' => 'bootstrap_api_modal_hide',
      );
      break;

    case 'show':
    default:
      $command = array(
        'command' => 'bootstrap_api_modal_show',
        'content' => render($content),
        'options' => $options,
      );

      break;
  }

  return $command;
}

/**
 * Implements hook_js_alter()
 * - remove Bootstrap library from bootstrap theme to prevent js collisions.
 *
 * @param $js
 */
function bootstrap_api_js_alter(&$js) {
  $excludes = array();

  // Remove loaded bootstrap.js from old twitter theme
  if (isset($js[drupal_get_path('theme', 'twitter_bootstrap') . '/bootstrap/js/bootstrap.js'])) {
    $excludes[drupal_get_path('theme', 'twitter_bootstrap') . '/bootstrap/js/bootstrap.js'] = array();
  }

  // Remove loaded bootstrap.js from new twitter theme
  if (isset($js[drupal_get_path('theme', 'bootstrap') . '/bootstrap/js/bootstrap.js'])) {
    $excludes[drupal_get_path('theme', 'bootstrap') . '/bootstrap/js/bootstrap.js'] = array();
  }

  $js = array_diff_key($js, $excludes);
}

/**
 * Implements hook_requirements()
 * - check for right downloaded library
 *
 * @param $phase
 * @return mixed
 */
function bootstrap_api_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {

    $bootstrap_library_path = bootstrap_api_get_path();
    // Check for compatible jquery update version
    $version = variable_get('jquery_update_jquery_version', '1.5');
    if (version_compare($version, '1.7', '<')) {
      $requirements['bootstrap_api.jquery'] = array(
        'title' => $t('Bootstrap - jQuery Version'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('Bootstrap needs a newer jQuery Version. Please change the configuration in your jQuery Update Module', array('@configure' => '@todo')),
        'value' => $version,
      );
    }

    // Check for wrong downloaded package...
    if (file_exists($bootstrap_library_path . '/js/bootstrap.js')) {
      $requirements['bootstrap_api'] = array(
        'title' => $t('Bootstrap - Library'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('You have downloaded the wrong bootstrap js library. Dont use the download from bootstrap page instead use the download from github.'),
      );
    }
    else {
      $bootstrap_libs = drupal_get_library('bootstrap_api');
      $missing = array();
      // Check for missing library parts
      foreach ($bootstrap_libs as $library_name => $values) {
        if (!empty($values['js']) && !file_exists(array_shift(array_keys($values['js'])))) {
          $missing[$library_name] = TRUE;
        }
      }

      // Something goes wrong... there is missing a bootstrap script part...
      if (!empty($missing)) {
        $requirements['bootstrap_api'] = array(
          'title' => $t('Bootstrap - Library'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('You need to download the bootstrap js library from github. please read the documentation. Missing: @bootstrap_missing', array('@bootstrap_missing' => join(', ', array_keys($missing)))),
        );
      }
      // All good....
      else {
        $requirements['bootstrap_api'] = array(
          'title' => $t('Bootstrap - Library'),
          'severity' => REQUIREMENT_OK,
          'value' => $t('Exists'),
        );
      }
    }
  }

  return $requirements;
}

/**
 * Helper function returns the path to bootstrap js src library
 *
 * @return string
 * returns the path to the bootstrap framework
 */
function bootstrap_api_get_path() {
  $bootstrap_library_path_cached = & drupal_static(__FUNCTION__);

  if (isset($bootstrap_library_path)) {
    return $bootstrap_library_path_cached;
  }

  if (!module_exists('libraries')) {
    $bootstrap_library_path_cached = BOOTSTRAP_LIBRARY_PATH;
  }
  else {
    $bootstrap_library_path_cached = libraries_get_path('bootstrap');
  }

  return $bootstrap_library_path_cached;
}

/**
 * Implements hook_element_info_alter
 * - replace the attached contextual library with own.
 * - INFO: This dont work at the moment, because some modules dont use the core element api and creates the code manualy
 * -       so we need to replace the js files in hook_library_alter...
 *
 * - added popover support to textfields
 *
 * @param $elements
 */
function bootstrap_api_element_info_alter(&$types) {
  // @todo fix if other modules has better contextual support
  if (variable_get('bootstrap_api_contextual_mode', FALSE) && isset($types['contextual_links'])) {
    //$elements['contextual_links']['#attached']['library'][0] = array('bootstrap_api', 'bootstrap-api.drupal.contextual-links');
  }

  if (variable_get('bootstrap_api_element_popover', TRUE)) {
    foreach (array_keys($types) as $element_type) {
      $types[$element_type]['#process'][] = 'bootstrap_api_process_element_popover';
    }
  }
}

/**
 * Form Builder: #process handling for elements that uses #bootstrap_api_popover
 *
 * @param $element
 * @return mixed
 */
function bootstrap_api_process_element_popover($element) {
  if (isset($element['#bootstrap_api_popover'])) {
    $settings = $element['#bootstrap_api_popover'];

    // remove trigger if we want defaults
    if (isset($settings['trigger']) && $settings['trigger'] == 'use default') {
      unset($settings['trigger']);
    }

    // remove placement if we want defaults
    if (isset($settings['placement']) && $settings['placement'] == 'use default') {
      unset($settings['placement']);
    }

    // Attribute: use_description
    if (isset($settings['use_description']) && !isset($settings['#use_description'])) {
      $settings['#use_description'] = $settings['use_description'];
      unset($settings['use_description']);
    }

    if (isset($settings['#use_description']) && isset($element['#description']) && !(isset($settings['content']) && !empty($settings['content']))) {
      $settings['content'] = $element['#description'];
      if ($settings['#use_description'] === 'clean') {
        $element['#description'] = '';
      }

      if ($settings['#use_description'] === 'hide') {
        $element['#description'] = '<span class="element-invisible">' . $element['#description'] . '</span>';
      }

      unset($settings['#use_description']);
    }

    // Assign default settings.
    $settings += array(
      'trigger' => 'focus',
      'title' => '',
      'content' => '',
    );

    $element['#attached']['library'][] = array('bootstrap_api', 'bootstrap-api.popover');
    $element['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('bootstrap_api_popover' => array($element['#id'] => $settings)),
    );
  }

  return $element;
}

/**
 * Implements hook_library_alter()
 * - replaces the original contextual js file with bootstrap dropdown
 *
 * Notice:
 * this is currently a workaround until all contrib module fixes issues like: http://drupal.org/node/1867846
 *
 * @see http://drupal.org/node/1867846
 * @see bootstrap_api_element_info_alter();
 *
 * @param $libraries
 * @param $module
 */
function bootstrap_api_library_alter(&$libraries, $module) {
  if ($module === 'contextual' && variable_get('bootstrap_api_contextual_mode', FALSE)) {
    $libraries['contextual-links']['dependencies'][] = array('bootstrap_api', 'bootstrap-api.drupal.contextual-links');
    unset($libraries['contextual-links']['js']);
    unset($libraries['contextual-links']['css']);
  }
}

/**
 * Helper: check for trigger default based upon type
 * - by default we use focus on input elements but on some elements this make no sense (like checkbox or radio)
 * - so we map this types here and returns the right fallback trigger
 *
 * @param $type string
 *
 * @return string
 * returns the trigger default based upon element type
 */
function bootstrap_api_get_element_type_trigger_map($type) {

  static $trigger_cached;
  if (!isset($trigger_cached)) {
    $trigger_cached = & drupal_static(__FUNCTION__);
  }

  if (isset($trigger_cached[$type])) {
    return $trigger_cached[$type];
  }

  switch ($type) {
    case 'select':
    case 'radio':
      $trigger[$type] = 'hover';
      break;

    default:
      $trigger[$type] = 'focus';
  }

  return $trigger_cached[$type];
}

/**
 * Implements hook_theme()
 * return a icon element
 *
 * @return array
 */
function bootstrap_api_theme() {
  return array(
    'bootstrap_api_icon' => array(
      'variables' => array(
        'icon' => NULL,
        'content' => NULL,
        'type' => NULL,
      ),
      'file' => 'bootstrap_api.theme.inc',
    ),
  );
}

