<?php

/**
 * @file
 * nodejs_chat module.
 * Simple chat block using NodeJS on the backend.
 */

/* Constant for the 'drupal' message transmission option. */
define('NODEJS_CHAT_MESSAGE_TRANSMISSION_DRUPAL', 'drupal');

/* Constant for the 'nodejs server extension' message transmission option. */
define('NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION', 'nodejs server extension');

/**
 * Implements hook_menu().
 */
function nodejs_chat_menu() {
  $items['nodejs-chat/message/post/%'] = array(
    'page callback' => 'nodejs_chat_chatwindow_post',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function nodejs_chat_help($path, $arg) {
  $help_text = '';
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#nodejs_chat':
      $help_text .= t('This page contains some information and details regarding
        the usage of the Node JS Chat module for drupal.<br> At the moment, the information
        available here is about the different configuration settings for the chat block.');
      $help_text .= '<h1>Node JS Chat Block settings:</h1>';
      $help_text .= '<p>' . t('<b>Message Transmission:</b> This refers to how the
        messages will be transmitted between the chat users.') . '</p>';
      $help_text .= '<p>' . t('Choosing <em><b>"Drupal"</b></em>, messages will be sent
        to the current drupal site, which will pass them to the Node JS server,<br>
        that will finally send them to the rest of users connected to the Chat.<br>') .'</p>';
      $help_text .= '<p style="margin-left: 150px;"><b>Browser ==> Drupal ==> Node JS Server ==> Users</b></p>';
      $help_text .= '<p>' . t('When using <em><b>"Nodejs Server Extension"</b></em>, messages will go straight to the Node JS server,
        and then passed on <br> to the rest of users connected to the Chat. For this option to work,
        make sure the "nodejs_chat.module.js" server <br> extension is installed, as described in the
        README.txt file.') . '</p>';
      $help_text .= '<p style="margin-left: 150px;"><b>Browser ==> Node JS Server ==> Users</b></p>';
  }
  return $help_text;
}

/**
 * Implements hook_block_info().
 */
function nodejs_chat_block_info() {
  $blocks['nodejs_chat'] = array(
    'info' => 'Node JS Chat Block',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function nodejs_chat_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'nodejs_chat':
      $form['nodejs_chat_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Chat Title'),
        '#description' => t('The title for the Chat Window.'),
        '#default_value' => variable_get('nodejs_chat_title', 'Node JS Chat'),
      );
      // Let users choose the transmission method for messages.
      $form['nodejs_chat_message_transmission'] = array(
        '#type' => 'select',
        '#title' => t('Message Transmission'),
        '#description' => t('See the ' . l('Node JS Chat help page', 'admin/help/nodejs_chat', array('attributes' => array('target' => '_blank')))
          . ' for information about the Message Transmission options.'),
        '#default_value' => variable_get('nodejs_chat_message_transmission', NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION),
        '#options' => drupal_map_assoc(array(NODEJS_CHAT_MESSAGE_TRANSMISSION_DRUPAL, NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION), 'ucwords'),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function nodejs_chat_block_save($delta = '', $edit = array()) {
  // Save the message transmission method.
  if ($delta == 'nodejs_chat') {
    variable_set('nodejs_chat_message_transmission', $edit['nodejs_chat_message_transmission']);
    variable_set('nodejs_chat_title', $edit['nodejs_chat_title']);
  }
}

/**
 * Implements hook_block_view().
 */
function nodejs_chat_block_view($delta = '') {
  switch ($delta) {
    case 'nodejs_chat':
      global $user;
      if (!$user->uid) return;
      $path = current_path();
      $chat_title = variable_get('nodejs_chat_title', 'Node JS Chat');
      $message_transmission = variable_get('nodejs_chat_message_transmission', NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION);
      $chat = new Chat($path, $chat_title, array('messageTransmission' => $message_transmission));

      $block['subject'] = t('Chat');
      $block['content'] = $chat->render();
    break;
  }
  return $block;
}

/**
 * Posts a message to a socket.io channel (chatwindow)
 */
function nodejs_chat_chatwindow_post($chatwindow) {
  // No message, no party
  if (!isset($_POST['message'])) {
    drupal_json_output(array('data' => array('accessDenied' => 'invalid')));
    drupal_exit();
  }

  global $user;
  $message = (object) array(
    'channel' => $chatwindow,
    'callback' => 'nodejsChatMessageHandler',
    'data' => array(
      'uid' => $user->uid,
      'name' => $user->name,
      'msg' => $_POST['message'],
    ),
  );
  nodejs_send_content_channel_message($message);
  drupal_json_output(array('data' => array('accessGranted' => 'Message ok')));
  drupal_exit();
}

/**
 * Implements hook_theme().
 */
function nodejs_chat_theme() {
  return array(
    'nodejs_chat_users' => array(
      'variables' => array('user_ids' => array()),
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'nodejs_chat') . '/theme',
    ),
  );
}
