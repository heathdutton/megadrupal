<?php

/**
 * @file
 * Provide a field that displays a MaPS Flipbook.
 */

/**
 * Defines the supported Flash minimum version.
 *
 * As this value is passed to the jquery.swfembed.js script that does not
 * take care of type casting, it should be a string and never a number.
 */
define('MAPS_FLIPBOOK_FLASH_MINIMUM_VERSION', '8');

/**
 * @defgroup Drupal hooks
 * @{
 */

/**
 * Implements hook_element_info().
 */
function maps_flipbook_element_info() {
  $elements = array();

  $elements['maps_flipbook'] = array(
    '#input' => TRUE,
    '#process' => array('maps_flipbook_field_process'),
    '#theme' => 'maps_flipbook_field',
    '#theme_wrappers' => array('form_element'),
  );

  return $elements;
}

/**
 * Implements hook_field_info().
 */
function maps_flipbook_field_info() {
  return array(
    'maps_flipbook' => array(
      'label' => t('MaPS Flipbook'),
      'description' => t('Display a MaPS Flipbook.'),
      'default_widget' => 'maps_flipbook',
      'default_formatter' => 'maps_flipbook_swf',
      'settings' => array(
        'width' => '',
        'height' => '',
        'no_flash' => '',
      ),
      // Entity API
      //'property_type' => 'field_item_maps_flipbook',
      //'property_callbacks' => array('maps_flipbook_field_property_info'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Ensure the given image path exists.
 *
 * @see maps_flipbook_field_widget_error()
 */
function maps_flipbook_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['path'])) {
      foreach (array('path', 'config_file') as $key) {
        $item[$key] = trim($item[$key], '/\\');
      }//end foreach

      $item['path'] = maps_flipbook_build_uri($item['path']);
      $config_file = maps_flipbook_config_path($item);
      $t_args = array('%dir' => $item['path'], '%file' => $item['config_file']);
      $error_message = NULL;

      if (!is_dir($item['path'])) {
        $error_message = t('The directory %dir does not exist.', $t_args);
      }
      elseif (!is_readable($item['path'])) {
        $error_message = t('The directory %dir is not readable.', $t_args);
      }
      elseif (!is_file($config_file)) {
        $error_message = t('The configuration file %file is missing.', $t_args);
      }
      elseif (!is_readable($config_file)) {
        $error_message = t('The configuration file %file is not readable.', $t_args);
      }

      if ($error_message) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'maps_flipbook_invalid_path',
          'message' => $error_message,
        );
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 *
 * It is necessary to set the correct path to the images folder inside the
 * XML configuration file.
 */
function maps_flipbook_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $attributes = array(
    'pagesFolder' => 'pages/medium/',
    'tnFolder' => 'pages/small/',
    'hdFolder' => 'pages/large/',
    'printFolder' => 'pages/print/',
  );

  foreach ($items as $delta => $item) {
    $error = FALSE;

    if ($config_file = maps_flipbook_config_path($item)) {
      $xml = new DOMDocument();
      $w_args = array('%path' => $config_file);

      if ($xml->load($config_file)) {
        $xpath = new DOMXPath($xml);
        $elements = $xpath->query('//content');

        if ($elements->length) {
          $base = file_create_url(maps_flipbook_build_uri($item['path'])) . '/';

          foreach ($attributes as $name => $path) {
            $elements->item(0)->setAttribute($name, $base . $path);
          }//end foreach

          file_put_contents($config_file, $xml->saveXML());
        }
        else {
          watchdog('maps_flipbook', 'The configuration file %path has not the expected structure.', $w_args, WATCHDOG_ERROR);
        }
      }
      else {
        watchdog('maps_flipbook', 'An error occurred while loading the XML file %path to a DOM document.', $w_args, WATCHDOG_ERROR);
      }
    }
  }
}


/**
 * Implements hook_field_is_empty().
 */
function maps_flipbook_field_is_empty($item, $field) {
  return empty($item['path']) || empty($item['config_file']);
}

/**
 * Implements hook_field_settings_form().
 */
function maps_flipbook_field_settings_form($field, $instance, $has_data) {
  return maps_flipbook_field_settings_part_form($field['settings']);
}

/**
 * Implements hook_field_formatter_info().
 */
function maps_flipbook_field_formatter_info() {
  return array(
    'maps_flipbook_swf' => array(
      'label' => t('Flash object'),
      'field types' => array('maps_flipbook'),
      'settings' => array(
        'override_default' => 0,
        'width' => '',
        'height' => '',
        'no_flash' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function maps_flipbook_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $settings = $instance['display'][$view_mode]['settings'];

  $element['override_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override default settings'),
    '#default_value' => !empty($settings['override_default']),
  );

  $settings_form = maps_flipbook_field_settings_part_form($settings);

  // @todo use a prerender function instead.
  $parents = array($field['field_name'], 'settings_edit_form', 'settings', 'override_default');
  $name = 'fields[' . implode('][', $parents) . ']';

  foreach (element_children($settings_form) as $key) {
    $settings_form[$key]['#states'] = array(
      'invisible' => array(
        ":input[name='$name']" => array('checked' => FALSE),
      ),
    );
  }//end foreach

  return array_merge($element, $settings_form);
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function maps_flipbook_field_formatter_settings_summary($field, $instance, $view_mode) {
  $settings = $instance['display'][$view_mode]['settings'];

  if ($settings['override_default']) {
    // @todo display overriden width and height.
    return t('Width: @width; height: @height', array('@width' => $settings['width'], '@height' => $settings['height']));
  }
  else {
    return t('Use default settings');
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function maps_flipbook_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $library = libraries_load('maps_flipbook');
  $element = array();

  if ($library['installed']) {
    $settings = $display['settings'];

    if (empty($settings['override_default'])) {
      $settings = $field['settings'];
    }
    switch ($display['type']) {

      case 'maps_flipbook_swf':
        foreach ($items as $delta => $item) {
          if ($config = maps_flipbook_config_url($item)) {
            $flipbook = new SWFObject(base_path() . $library['library path'] . '/maps_flipbook.swf');
            $flipbook
              ->noFlash($settings['no_flash'])
              ->minimumVersion(MAPS_FLIPBOOK_FLASH_MINIMUM_VERSION)
              ->param('allowFullScreen', 'true')
              ->flashVar('config', $config)
              ->height($settings['height'])
              ->width($settings['width']);

            $element[$delta] = array(
              '#theme' => 'swfembed_embed',
              '#swf_object' => $flipbook,
            );
          }
        }
        break;

    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function maps_flipbook_field_widget_info() {
  return array(
    'maps_flipbook' => array(
      'label' => t('MaPS Flipbok'),
      'field types' => array('maps_flipbook'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function maps_flipbook_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : array('path' => '', 'config_file' => ''),
    '#settings' => $field['settings'],
  );

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function maps_flipbook_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'maps_flipbook_invalid_path':
      form_error($element['path'], $error['message']);
      break;
  }
}

/**
 * @} End of "defgroup Drupal hooks".
 *
 * @defgroup Libraries hooks
 * @{
 */

/**
 * Implements hook_libraries_info().
 */
function maps_flipbook_libraries_info() {
  $libraries['maps_flipbook'] = array(
    'name' => 'MaPS Flipbook',
    'vendor url' => 'http://www.maps-system.com/',
    'version' => 'undefined',
    'callbacks' => array(
      'post-detect' => array('maps_flipbook_libraries_post_detect'),
    ),
  );

  return $libraries;
}

/**
 * Libraries post-detect callback.
 *
 * Ensure required files are present.
 */
function maps_flipbook_libraries_post_detect(&$library) {
  if (!file_exists($library['library path'] . '/maps_flipbook.swf')) {
    $library['installed'] = FALSE;
    $library['error'] = 'missing file';
    $library['error message'] = t('The file %name is missing from the %library.', array(
      '%library' => $library['name'],
      '%name' => 'maps_flipbook.swf',
    ));
  }
}

/**
 * @} End of "defgroup Libraries hooks".
 */

/**
 * Process the MaPS Filpbook element.
 */
function maps_flipbook_field_process($element, $form_state, $complete_form) {
  $element['path'] = array(
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#title' => t('Images path'),
    '#description' => t('You can precise the URI scheme, otherwise the path is relative to Drupal default files directory.'),
    '#required' => ($element['#delta'] == 0 && $element['#required']),
    '#default_value' => $element['#value']['path'],
  );

  $element['config_file'] = array(
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#title' => t('Configuration file path'),
    '#description' => t('The path to the XML configuration file is relative to the path specified above.'),
    '#required' => ($element['#delta'] == 0 && $element['#required']),
    '#default_value' => $element['#value']['config_file'],
  );

  $element['#required'] = FALSE;
  return $element;
}

/**
 * Add the Drupal default scheme if none exist in the given path.
 */
function maps_flipbook_build_uri($path) {
  return !file_valid_uri($path) ? file_build_uri($path) : $path;
}

/**
 * Build the configuration file path.
 */
function maps_flipbook_config_path($item) {
  return maps_flipbook_build_uri($item['path']) . '/'. $item['config_file'];
}

/**
 * Build URL for the configuration file.
 */
function maps_flipbook_config_url($item) {
  $path = maps_flipbook_config_path($item);
  return file_exists($path) ? file_create_url($path) . '?' . hash('crc32', $path) : FALSE;
}

/**
 * Partial form for the field/field instance settings.
 */
function maps_flipbook_field_settings_part_form($settings) {
  $settings += array('width' => '', 'height' => '', 'no_flash' => '');
  $form = array();

  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#required' => TRUE,
    '#default_value' => $settings['width'],
  );

  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#required' => TRUE,
    '#default_value' => $settings['height'],
  );

  $form['no_flash'] = array(
    '#type' => 'textfield',
    '#title' => t('Text to display if Flash plugin is missing'),
    '#default_value' => $settings['no_flash'],
  );

  return $form;
}
