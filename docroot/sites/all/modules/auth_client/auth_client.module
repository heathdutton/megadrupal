<?php
/**
 * Check the requirements for this module
 */
function auth_client_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $serverurl = variable_get('auth_server', '');
    $requirements['auth_client'] = array(
        'title' => 'Cross domain authentication server',
        'description' => 'This is the URL used for cross domain authentication. Please check the URL on the <a href="/admin/config/people/authclient" target="_blank">settings page</a> ',
    );
    if($serverurl == '') {
      $requirements['auth_client']['value'] = 'not set';
      $requirements['auth_client']['severity'] = REQUIREMENT_ERROR;
    } else {
      $res = drupal_http_request($serverurl);
      if($res->code == 200) { //this is not active yet...
        //$requirements['auth_client']['value'] = 'ok';
        //$requirements['auth_client']['severity'] = REQUIREMENT_OK;
      } else {
        $requirements['auth_client']['value'] = 'HTTP code: ' . $res->code;
        $requirements['auth_client']['severity'] = REQUIREMENT_OK;
      }
    }
  }
  return $requirements;
}
/**
 * Alter the user login block form
 */
function auth_client_form_user_login_block_alter(&$form, &$form_state) {
  _auth_client_user_login_form_alter($form, $form_state);
}

/**
 * Alter the user login page
 */
function auth_client_form_user_login_alter(&$form, &$form_state) {
  _auth_client_user_login_form_alter($form, $form_state);
}

/**
 * Change the validate callback
 */
function _auth_client_user_login_form_alter(&$form, &$form_state) {
  $k = array_search('user_login_authenticate_validate', $form['#validate']);
  $form['#validate'][$k] = 'auth_client_authenticate_validate';
}


/**
 * Custom validation
 */
function auth_client_authenticate_validate($form, &$form_state) {

  // try normal validation first
  user_login_authenticate_validate($form, $form_state);

  if ($form_state['uid'] !== FALSE)
    return;

  // still here? Try to find the user in the other domain
  $name = $form_state['values']['name'];
  $pass = $form_state['values']['pass'];

  $header = array(
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8'),
    'method' => 'POST',
    'data' => '&username='.$name.'&password='.$pass.'',
  );

  $serverurl = variable_get('auth_server', '');
 
  $res = drupal_http_request($serverurl, $header);
  $data = json_decode($res->data);

  if(isset($data->user->uid)) { //success - we have the user object
    // based on Drupal's user_external_login_register (that function doesn't set the email address)
    $account = user_external_load($name);
    if (!$account) {

      $userinfo = array(
        'name' => $name,
        'mail' => $data->user->mail,
        'pass' => user_password(),
        'init' => $name,
        'status' => 1,
        'access' => REQUEST_TIME,
      );

      try {
        $account = user_save(drupal_anonymous_user(), $userinfo);
      } catch(Exception $e) {
        drupal_set_message('Possible username conflict. Please contact the administrator', 'error');
        return;
      }

      if (!$account) {
        drupal_set_message(t("Error saving external account."), 'error');
        $form_state['uid'] = FALSE;
        return;
      }
      user_set_authmaps($account, array("authname_auth_client" => $name));
    }

    watchdog('external auth', $name);
    $form_state['uid'] = $account->uid;

    //TODO: map external uid to internal uid
  }
}

function auth_client_menu() {
  $items['admin/config/people/authclient'] = array(
    'page callback' => 'drupal_get_form',
    'title' => 'Cross install authentication server',
    'description' => 'Allow people to login with usernames from a different Drupal installation',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer users'),
    'page arguments' => array('_auth_client_form'),
  );
  return $items;
}

function _auth_client_form($form, &$form_state) {
  $form['auth_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Authentication server URL'),
    '#default_value' => variable_get('auth_server', ''),
    '#description' => t('Please check the documentation to find out how to setup the server and obtain the authentication server URL'),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}
