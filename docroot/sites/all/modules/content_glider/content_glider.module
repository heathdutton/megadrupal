<?php
/**
 * @file
 * Display content and image in Slide show mode using jQuery.
 */

/**
* Implements hook_entity_info_alter().
*/
function content_glider_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['content_glider'] = array(
    'label' => t('Content glider'),
    'custom settings' => TRUE,
  );
} 

/**
 * Implementation hook_library().
 */
function content_glider_library() {
  $libraries['featuredcontentglider'] = array(
    'title' => 'featured content glider',
    'website' => 'http://www.dynamicdrive.com',
    'version' => '1',
    'js' => array(drupal_get_path('module', 'content_glider') . '/featuredcontentglider/featuredcontentglider.js' => array()),
    'css' => array(drupal_get_path('module', 'content_glider') . '/featuredcontentglider/featuredcontentglider.css'),
  );
  return $libraries;
}



/**
 * Implementation hook_help().
 */
function content_glider_help($section) {
  switch ($section) {
    case 'admin/help#content_glider':
      $output = "The content_glider module: Display content and image in Slide show mode using jQuery.";
  return $output;
    case 'admin/modules#description':
      return 'The content_glider module: Display content and image in Slide show mode using jQuery.';
  }
}



/**
 * Implementation hook_theme().
 */
function content_glider_theme() {
  return array(
    'content_glider_template' => array(
      'variables' => array('glider_id' => NULL, 'glider_items' => NULL ,
                      'height' => NULL , 'height_unit' => NULL    ),
      'template' => 'content_glider',
    ),
    'content_glider_node_template' => array(
      'variables' => array('node' => NULL),
      'template' => 'content_glider_node',
    ),
  );
}



/**
 * Implementation hook_perm()
 */
function content_glider_perm() {
  return array('public in glider' , 'access content_glider', 'administer content_glider');
}


/**
 * Implementation hook_menu()
 */
function content_glider_menu() {

  $items = array();
  
  $items['admin/structure/content_glider'] = array(
      'title' => 'Content Glider',
      'description' => 'Setting Content Glider.',
      'access arguments' => array('administer content_glider'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('content_glider_admin_settings'),
      'type' => MENU_NORMAL_ITEM);
  
  return $items;
}
/**
 * Implementation hook_block_configure()
 */
function content_glider_block_configure($delta = '') {
 
  //get node types
  $node_types = array();
  foreach (node_type_get_types() as $nt){
    $node_types[$nt -> type] = $nt ->  name;
  }

  // get default values

  $content_type = variable_get("{$delta}_source", array('page'));
  $height = variable_get("{$delta}_height", '350');
  $height_unit = variable_get("{$delta}_height_unit",'px');

 // set form 
 
  $form = array();
  $form["content_glider_settings"] = array(
    '#type' => 'fieldset',
    '#weight' => 2 ,
    '#title' => t('Basic settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t("Setings for this block")
  );  
  $form['content_glider_settings']["{$delta}_source"] = array(
        '#type' => 'checkboxes', 
        '#title' => t('Content type for Glider') ,
        '#default_value' => $content_type,
        '#options' => $node_types,

   );
    $form["content_glider_settings"]["{$delta}_height"] = array(
        '#type' => 'textfield',
        '#title' => t('Height for Glider') ,
        '#default_value' => $height,
    );
    $form["content_glider_settings"]["{$delta}_height_unit"] = array(
        '#type' => 'select', 
        '#title' => t('Height unit type for Glider') ,
        '#default_value' => $height_unit,
        '#options' => array('%' => '%' , 'px' => 'px' ,'em' => 'em' ),
    );

    $form['content_glider_settings']["{$delta}_auto"] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto rotate slideshow'),
    '#default_value' => variable_get("{$delta}_auto", 1),
    '#description' => t("Display content without mouse click."),
    '#maxlength' => '1', '#size' => '1');

  
  $form['content_glider_settings']["{$delta}_speed"] = array(
    '#type' => 'textfield',
    '#title' => t('Slideshow speed (in milliseconds)'),
    '#default_value' => variable_get("{$delta}_speed", 1000),
  );
  $form['content_glider_settings']["{$delta}_delay"] = array(
    '#type' => 'textfield',
    '#title' => t('Delay between slideshow (in milliseconds)'),
    '#default_value' => variable_get("{$delta}_delay", 3000),
  );
  $form['content_glider_settings']["{$delta}_repeat"] = array(
    '#type' => 'textfield',
    '#title' => t('Repeat slideshow (0=Continuos)'),
    '#default_value' => variable_get("{$delta}_repeat", 0),
  );
  $form['content_glider_settings']["{$delta}_direction"] = array(
    '#type' => 'select',
    '#title' => t('Set direction of slideshow'),
    '#default_value' => variable_get("{$delta}_direction", 3),
    '#options' => array('up to down', 'down to up', 'left to right', 'right to left'),
    '#description' => 'Select the animation direction'
  );
  $form['content_glider_settings']["{$delta}_count"] = array(
    '#type' => 'textfield',
    '#title' => t('Number of contents to glide/slide'),
    '#default_value' => variable_get("{$delta}_count", 5),
  );
  
  $form['content_glider_settings']["{$delta}_order_type"] = array(
    '#type' => 'select',
    '#title' => t('Order Type'),
    '#default_value' => variable_get("{$delta}_order_type", 1),
    '#options' => array('ASC', 'DESC')
  );


   return $form;
}
/**
 * Implementation hook_block_save()
 */
function content_glider_block_save($delta = '', $edit = array()) {

  $content_types=array();

  foreach ( $edit["{$delta}_source"] as $types  => $value){
      if($value) $content_types[] = $types;
  }
  variable_set("{$delta}_source", $content_types);

  variable_set("{$delta}_height", $edit["{$delta}_height"]);
  variable_set("{$delta}_height_unit", $edit["{$delta}_height_unit"]);

  variable_set("{$delta}_auto", $edit["{$delta}_auto"]);
  variable_set("{$delta}_delay", $edit["{$delta}_delay"]);
  variable_set("{$delta}_speed", $edit["{$delta}_speed"]);
  variable_set("{$delta}_repeat", $edit["{$delta}_repeat"]);
  variable_set("{$delta}_direction", $edit["{$delta}_direction"]);
  variable_set("{$delta}_count", $edit["{$delta}_count"]);

}

/**
 * Page callback for admin/settings/content_glider
 */
function content_glider_admin_settings() {

  $count_blocks = variable_get('content_glider_count_blocks', 3);

  $form['content_glider_count_blocks'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of blocks'),
    '#default_value' => $count_blocks,
  );
  

          
  return system_settings_form($form);
}


/*
 * to-do  
 * create a content_glider_admin_settings_validate
 * validating de content-types
 */
 
/**
* Implements hook_block_view().
*/
function content_glider_block_view($delta = '') {

  $block = array();
  $block['content'] = content_glider_generate_block($delta);  
  return $block;
}
/**
* Implements hook_block_info().
*/
function content_glider_block_info() {
  $blocks = array();
  $count_blocks = variable_get('content_glider_count_blocks', 3);

  for ($delta_block = 0 ; $count_blocks > $delta_block ;$delta_block ++) {
      $blocks["content_glider_$delta_block"]['info'] = "Content Glider  " . ($delta_block + 1);
  }
  return $blocks;
}


function content_glider_generate_block($delta) {

  global $base_url;    
  $ajax_base_path = $base_url;
  
  $efects = array('updown', 'downup', 'leftright', 'rightleft');
    
  $height = variable_get("{$delta}_height", '350');
  $height_unit = variable_get("{$delta}_height_unit",'px');



  $content_glider_auto  = variable_get("{$delta}_auto", 1);  
  $content_glider_speed = variable_get("{$delta}_speed", 1000); 
  $content_glider_delay = variable_get("{$delta}_delay", 1000);
  $content_glider_repeat = variable_get("{$delta}_repeat", 1000);
   
  $content_glider_count = variable_get("{$delta}_count", 5);
  
  $content_glider_direction = variable_get("{$delta}_direction", 3); 
  $content_glider_direction_value  = $efects[$content_glider_direction];
  
  //$content_glider_link      = variable_get("content_glider_link", 1);
  $content_glider_order_type= variable_get("{$delta}_order_type", 1);
  $content_glider_order_type_val= $content_glider_order_type ? "DESC" : "ASC";
    
 
    
    $content_type = variable_get("{$delta}_source" , array("page")); 
    
        $query = db_select('node', 'n');
        $query
          ->fields('n', array('nid'))
          ->condition('type', $content_type,'IN')
          ->range(0, $content_glider_count)
          ->orderBy('n.created' , $content_glider_order_type_val) ;
        $result = $query->execute();

    if (!$query->countQuery()) {
      return;
    }
    

      drupal_add_library('content_glider', 'featuredcontentglider');
    
    //Text  
    $output_head  =''."\n";  
    $output_head .= '/***********************************************'."\n";
    $output_head .= '* Featured Content Glider script- (c) Dynamic Drive DHTML code library (www.dynamicdrive.com)'."\n";
    $output_head .= '* Visit http://www.dynamicDrive.com for hundreds of DHTML scripts'."\n";
    $output_head .= '* This notice must stay intact for legal use'."\n";
    $output_head .= '***********************************************/'."\n";
  
    $glider_id = $delta;    
      
     $output_head  =  "\n";
      $output_head .=  'jQuery(document).ready(function () {';
      $output_head .=  'featuredcontentglider.init({'."\n";
      $output_head .=  'gliderid: "Glider' . $glider_id . '", //ID of main glider container'."\n";
      $output_head .=  'contentclass: "glidecontent", //Shared CSS class name of each glider content'."\n";
      $output_head .=  'togglerid: "p-select", //ID of toggler container'."\n";
      $output_head .=  'remotecontent: "", //Get gliding contents from external file on server? "filename" or "" to disable'."\n";
      $output_head .=  'selected: 0, //Default selected content index (0=1st)'."\n";
      $output_head .=  'persiststate: false, //Remember last content shown within browser session (true/false)?'."\n";
      $output_head .=  'speed: ' . $content_glider_speed . ', //Glide animation duration (in milliseconds)'."\n";
      $output_head .=  'direction: "' . $content_glider_direction_value . '", //set direction of glide: "updown", "downup", "leftright", or "rightleft"' . "\n";
      if ($content_glider_auto) { 
        $auto="true"; 
      } 
      else { 
        $auto="false";
      }
      $output_head .=  'autorotate: ' . $auto . ', //Auto rotate contents (true/false)?' . "\n";
      $output_head .=  'autorotateconfig: [' . $content_glider_delay . ', ' . $content_glider_repeat . '] //if auto rotate enabled, set [milliseconds_btw_rotations, cycles_before_stopping]'."\n";
      $output_head .=  '})'."\n";

      $output_head .=  '});';

      drupal_add_js($output_head, 'inline');  
  
    $glider_items="";
      foreach ($result as $data) {
        $node= node_load($data->nid);
        if(node_access('view', $node)) {
          $glider_items .=theme('content_glider_node_template', array('node' => node_view($node)));
        }
      }
      

   $output_body = theme('content_glider_template', array('glider_id' => $glider_id ,  'glider_items' => $glider_items ,'height' => $height , 'height_unit' => $height_unit));

  return $output_body;
}
