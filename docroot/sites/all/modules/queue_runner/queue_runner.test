<?php
/**
 * @file
 * Tests for queue_runner.module.
 */

class QueueRunnerNestedCollectorHelper extends DrupalWebTestCase {
  protected static $done = array();
  protected $expected = array();

  function setUp($modules = array()) {
    parent::setUp(array_merge(array('queue_runner'), $modules));
    // Set the file log path to the public files directory so it gets cleaned up
    // during tearDown.
    $temporary_directory = variable_get('file_public_path', conf_path() . '/files') . '/tmp/queue_runner';
    variable_set('queue_runner_log_path', $temporary_directory);

    $this->admin = $this->drupalCreateUser(array('access queue runner log', 'administer queue runner'));
  }

  protected function nestedCollectorCreationHelper($num_nested, $num_tasks, $collector_type = 'parallel', $subtask_data = NULL) {
    $this->expected = array();
    // Nest multiple collectors and check that the top-most one gets
    // all the results.
    $nested_worker =  array(
      'callback' => "queue_runner_create_{$collector_type}_collector",
      'finalize' => 'queue_runner_finalize_collector_creation',
      'collector_passback' => "queue_runner_{$collector_type}_subtask_finalize",
    );
    $data = array();
    // For test purposes, aggregate the top-level collector into the database.
    $data['collector']['store_results'] = TRUE;
    $data['title'] = 'TOP LEVEL COLLECTOR';
    $data['subtasks'] = array();
    $num = 1;
    for ($i = 1; $i <= $num_nested; $i++) {
      $nested_collector = array();
      $nested_collector['data']['title'] = "NESTED COLLECTOR $i";
      $nested_collector['data']['subtasks'] = array();
      $nested_collector['data']['worker'] = $nested_worker;
      for ($j = 1; $j <= $num_tasks; $j++) {
        $task['data'] = array('id' => $num);
        if (empty($subtask_data)) {
          // Make use of a static function as the worker callable.
          $task['data']['worker']['callback'] = array(__CLASS__, 'work');
        }
        else {
          $task['data'] += $subtask_data;
        }
        $nested_collector['data']['subtasks'][] = $task;
        // Keep track of the IDs we expect to see in the worker function.
        $this->expected[$num] = $num;
        $num++;
      }
      $data['subtasks'][] = $nested_collector;
    }
    $item_id = queue_runner_add($data, $collector_type . '_collector');
    $queue = queue_runner_queue();
    $this->assertEqual(1, $queue->numberOfItems(), 'only the collector task in the queue');
    return $item_id;
  }

  public static function work($data) {
    self::$done[$data['id']] = TRUE;
    return $data['id'];
  }
}

/**
 * Tests for default collectors.
 */
 class QueueRunnerNestedCollectorTestCase extends QueueRunnerNestedCollectorHelper {

  public static function getInfo() {
    return array(
      'name' => 'Collector nested items',
      'description' => 'Test collecting the nested output of multiple sub-tasks.',
      'group' => 'Queue Runner',
    );
  }

  function testNestedParallel() {
    $num_nested = 4;
    $num_tasks = 3;
    $item_id = $this->nestedCollectorCreationHelper($num_nested, $num_tasks, 'parallel');

    $queue = queue_runner_queue();
    // Do the parent collector.
    queue_runner_do(1);
    $this->assertEqual($num_nested, $queue->numberOfItems(), 'only the nested collector tasks in the queue');
    // Do all the rest.
    $num_remaining = ($num_nested) * ($num_tasks) + ($num_nested);
    $processed = queue_runner_do($num_remaining);
    $this->assertEqual(0, $queue->numberOfItems(), 'no tasks in the queue');
    foreach ($this->expected as $num) {
      $this->assertTrue(!empty(self::$done[$num]), "$num was done");
    }
    // The top-level collector should be in the database.
    $record = queue_runner_collector_load($item_id);
    $this->assertEqual($num_nested, count($record->result), "Every nested collector passed back a result");
    foreach ($record->result as $coll_id => $result) {
      $this->assertEqual($num_tasks, count($result), "Every nested collector got back results");
      $this->assertFalse(queue_runner_collector_exists($coll_id), "nested collector was not found in the database");
      try {
        $r = queue_runner_collector_load($coll_id);
        $this->fail("should not have loaded a collector");
      }
      catch (Exception $e) {
        $this->assertEqual(get_class($e), 'QueueRunnerException', "nested collector was not found in the database");
      }
    }
    $count = db_query('SELECT COUNT(*) FROM {queue_runner_failures}')->FetchField();
    $this->assertEqual(0, $count, "No failures recorded");
  }

  function testNestedSerial() {
    $num_nested = 4;
    $num_tasks = 3;
    $item_id = $this->nestedCollectorCreationHelper($num_nested, $num_tasks, 'serial');
    // Do the parent collector.
    queue_runner_do(1);
    $queue = queue_runner_queue();
    $this->assertEqual(1, $queue->numberOfItems(), 'only 1 nested collector task in the queue');
    // Do all the rest.
    $num_remaining = ($num_nested) * ($num_tasks) + ($num_nested);
    $processed = queue_runner_do($num_remaining);
    $this->assertEqual($num_remaining, $processed, 'all tasks in the queue were claimed');
    $this->assertEqual(0, $queue->numberOfItems(), 'no tasks in the queue');
    foreach ($this->expected as $num) {
      $this->assertTrue(!empty(self::$done[$num]), "$num was done");
    }
    // The top-level collector should be in the database.
    $record = queue_runner_collector_load($item_id);
    $this->assertEqual($num_nested, count($record->result), "Every nested collector passed back a result");
    foreach ($record->result as $coll_id => $result) {
      $this->assertEqual($num_tasks, count($result), "Every nested collector got back results");
      $this->assertFalse(queue_runner_collector_exists($coll_id), "nested collector was not found in the database");
      try {
        $r = queue_runner_collector_load($coll_id);
        $this->fail("should not have loaded a collector");
      }
      catch (Exception $e) {
        $this->assertEqual(get_class($e), 'QueueRunnerException', "nested collector was not found in the database");
      }
    }
    $count = db_query('SELECT COUNT(*) FROM {queue_runner_failures}')->FetchField();
    $this->assertEqual(0, $count, "No failures recorded");
  }

  function testNestedSerialSoftFail() {
    $num_nested = 4;
    $num_tasks = 3;
    $data['worker']['callback'] = array(__CLASS__, 'work_fails');
    $data['retries'] = 2;
    $item_id = $this->nestedCollectorCreationHelper($num_nested, $num_tasks, 'serial', $data);
    // Do the parent collector.
    queue_runner_do(1);
    $queue = queue_runner_queue();
    $this->assertEqual(1, $queue->numberOfItems(), 'only 1 nested collector task in the queue');
    // Do all the rest, allowing for 2 retries in each nested collector
    $num_remaining = ($num_nested) * ($num_tasks + 2) + ($num_nested);
    $processed = queue_runner_do($num_remaining);
    $this->assertEqual($num_remaining, $processed);//, 'all tasks in the queue were claimed');
    $this->assertEqual(0, $queue->numberOfItems(), 'no tasks in the queue');
    foreach ($this->expected as $num) {
      $this->assertTrue(!empty(self::$done[$num]), "$num was done");
    }
    // The top-level collector should be in the database.
    $record = queue_runner_collector_load($item_id);
    $this->assertEqual($num_nested, count($record->result), "Every nested collector passed back a result");
    foreach ($record->result as $coll_id => $result) {
      $this->assertEqual($num_tasks, count($result), "Every nested collector got back results");
      $first_result = array_shift($result);
      $this->assertTrue(strpos($first_result, 'subtask failed') !== FALSE, 'First subtask failed');
      // Check the rest
      foreach ($result as $msg) {
        $this->assertTrue(strpos($msg, 'Skipped due to prior failure') !== FALSE, 'Other subtask skipped');
      }
      $this->assertFalse(queue_runner_collector_exists($coll_id), "nested collector was not found in the database");
      try {
        $r = queue_runner_collector_load($coll_id);
        $this->fail("should not have loaded a collector");
      }
      catch (Exception $e) {
        $this->assertEqual(get_class($e), 'QueueRunnerException', "nested collector was not found in the database");
      }
    }
    $count = db_query('SELECT COUNT(*) FROM {queue_runner_failures}')->FetchField();
    $this->assertEqual(0, $count, "No failures recorded");
  }

  public static function work_fails($data) {
    // Check for prior soft fail.
    $messages = queue_runner_collector_messages($data['coll_id']);
    self::$done[$data['id']] = TRUE;
    if (in_array('failure', $messages)) {
      return "Skipped due to prior failure";
    }
    // Otherwise we always fake a fail.
    $failure = TRUE;
    if ($failure) {
      // This will throw an excpetion to force a retry unless
      // retrues are exhausted.
      return queue_runner_subtask_failure($data, 'subtask failed');
    }
    return $data['id'];
  }

  function testCancel() {
    $num_nested = 4;
    $num_tasks = 3;
    $top_coll_id = $this->nestedCollectorCreationHelper($num_nested, $num_tasks, 'parallel');

    // Create the parent collector, plus the nested collectors
    queue_runner_do(1 + $num_nested);

    $ids = db_query('SELECT coll_id FROM {queue_runner_collector} WHERE status = :status', array(':status' => 'started'))->fetchCol();
    $this->assertEqual(count($ids), $num_nested + 1, 'All collectors are started');

    $this->drupalLogin($this->admin);

    // Test directly attempting to cancel results in access denied for all nested
    // collectors.
    foreach ($ids as $coll_id) {
      if ($coll_id != $top_coll_id) {
        $this->drupalGet("admin/config/system/queue-runner/collector/cancel/{$coll_id}");
        $this->assertResponse(403, 'Access denied canceling a nested collector');
      }
    }

    // Do a handful of subtasks and recheck the status.
    $processed = queue_runner_do(rand(2, 9));
    $completed_collectors = floor($processed / $num_tasks);

    // Only check those collectors that are not finished
    $remaining_ids = db_query('SELECT coll_id FROM {queue_runner_collector} WHERE status = :status1 OR status = :status2', array(':status1' => 'started', ':status2' => 'working'))->fetchCol();
    $this->assertEqual($completed_collectors, 1 + $num_nested - count($remaining_ids), 'Expected number of nested collectors completed');

    foreach ($remaining_ids as $coll_id) {
      if ($coll_id != $top_coll_id) {
        $this->drupalGet("admin/config/system/queue-runner/collector/cancel/{$coll_id}");
        $this->assertResponse(403, 'Access denied canceling a nested collector');
      }
    }

    // Cancel the parent collector
    $this->drupalPost("admin/config/system/queue-runner/collector/cancel/{$top_coll_id}", array(), t('Confirm'));

    // Assert this time that all remaining statuses are "canceled".
    $canceled_ids = db_query('SELECT coll_id FROM {queue_runner_collector} WHERE status = :status', array(':status' => 'canceled'))->fetchCol();
    $this->assertEqual(count($remaining_ids), count($canceled_ids), 'As many collectors as remained were canceled');
    foreach($canceled_ids as $coll_id) {
      $this->assertTrue(in_array($coll_id, $remaining_ids), "Status of collector $coll_id is 'canceled'");
    }
  }
}

/**
 * Tests for views integration.
 */
class QueueRunnerViewsTestCase extends QueueRunnerNestedCollectorHelper {

  public static function getInfo() {
    return array(
      'name' => 'Views integration',
      'description' => 'Test views integration.',
      'group' => 'Queue Runner',
      'dependencies' => array('views'),
    );
  }

  function setUp() {
    parent::setUp(array('views'));
  }

  function testCancelLinks() {
    $num_nested = 4;
    $num_tasks = 3;
    $top_coll_id = $this->nestedCollectorCreationHelper($num_nested, $num_tasks, 'parallel');
    $queue = queue_runner_queue();

    // Create the parent collector, plus the nested collectors
    queue_runner_do(1 + $num_nested);

    $this->drupalLogin($this->admin);
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/collectors');
    $this->assertText('TOP LEVEL COLLECTOR');
    for ($k = 1; $k <= $num_nested; $k++) {
      $this->assertText("NESTED COLLECTOR $k");
    }
    // Assert statuses of all collectors and nested collectors are started.
    $result = $this->xpath('//div[contains(@class, "view-queue-runner-collectors")]/div/table[contains(@class, "views-table")]/tbody/tr/td[2]');
    foreach($result as $key => $status) {
      $this->assertEqual(trim($status), t('started'), "Status of collector $key is 'started'");
    }
    $ids = db_query('SELECT coll_id FROM {queue_runner_collector} WHERE status = :status', array(':status' => 'started'))->fetchCol();
    // Test that a cancel link exists for the top level collector.
    $this->assertLinkByHref("admin/config/system/queue-runner/collector/cancel/{$top_coll_id}");

    // Do a handful of subtasks and recheck the links.
    $processed = queue_runner_do(rand(2, 9));
    $completed_collectors = floor($processed / 3);
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/collectors');
    $this->assertLinkByHref("admin/config/system/queue-runner/collector/cancel/{$top_coll_id}");
    // Only check those collectors that remain in the view, not the ones that
    // were processed and removed.
    $remaining_ids = db_query('SELECT coll_id FROM {queue_runner_collector} WHERE status = :status1 OR status = :status2', array(':status1' => 'started', ':status2' => 'working'))->fetchCol();
    $completed_ids = array_diff($ids, $remaining_ids);
    foreach ($completed_ids as $coll_id) {
      $this->assertNoLinkByHref("admin/config/system/queue-runner/collector/cancel/{$coll_id}");
    }
    // Go back to the collectors view, click cancel, click confirm.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/collectors');
    $this->clickLink('Cancel');
    $this->drupalPost(NULL, array(), t('Confirm'));

    // Assert this time that all remaining statuses are "canceled".
    foreach ($remaining_ids as $coll_id) {
      $this->assertNoLinkByHref("admin/config/system/queue-runner/collector/cancel/{$coll_id}");
    }
    $result = $this->xpath('//div[contains(@class, "view-queue-runner-collectors")]/div/table[contains(@class, "views-table")]/tbody/tr/td[2]');
    $this->assertEqual(count($remaining_ids), count($result), 'As many collectors as remained were canceled');
    foreach($result as $key => $status) {
      $this->assertEqual(trim($status), t('canceled'), "Status of collector $key is 'canceled'");
    }
  }
}

/**
 * Tests for default collectors.
 */
class QueueRunnerCollectorTestCase extends DrupalWebTestCase {
  protected static $done = array();

  public static function getInfo() {
    return array(
      'name' => 'Collector queue items',
      'description' => 'Test collecting the output of multiple sub-tasks.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner');
    // Set the file log path to the public files directory so it gets cleaned up
    // during tearDown.
    $temporary_directory = variable_get('file_public_path', conf_path() . '/files') . '/tmp/queue_runner';
    variable_set('queue_runner_log_path', $temporary_directory);
  }

  function testCollector() {
    self::$done = array();
    $ids = array(6 => '0', 7 => '0', 8 => '0');
    foreach ($ids as $num => $item_id) {
      $task['data'] = array('id' => $num);
      // Make use of a static function as the worker callable.
      $task['data']['worker']['callback'] = array(__CLASS__, 'work');
      $data['subtasks'][] = $task;
    }
    $item_id = queue_runner_add($data, 'parallel_collector');
    $queue = queue_runner_queue();
    $this->assertEqual(1, $queue->numberOfItems(), 'only the collector task in the queue');
    queue_runner_do(1);
    $this->assertEqual(count($ids), $queue->numberOfItems(), 'sub-tasks are in the queue');
    queue_runner_do(count($ids));
    foreach ($ids as $num => $item_id) {
      $this->assertTrue(!empty(self::$done[$num]), "$num was done");
    }
    // Test serial collector.
    self::$done = array();
    $data = array();
    $this->assertEqual(0, $queue->numberOfItems(), 'no items are in the queue');
    $ids = array(6 => '0', 7 => '0', 8 => '0');
    foreach ($ids as $num => $item_id) {
      $task['data'] = array('id' => $num);
      // Make use of a static function as the worker callable.
      $task['data']['worker']['callback'] = array(__CLASS__, 'work');
      $data['subtasks'][] = $task;
    }
    $item_id = queue_runner_add($data, 'serial_collector');
    $this->assertEqual(1, $queue->numberOfItems(), 'only the collector task in the queue');
    queue_runner_do(1);
    // item_id and coll_id should be the same.
    $coll_id = db_query('SELECT coll_id FROM {queue_runner_collector} WHERE coll_id = :item_id', array(':item_id' => $item_id))->fetchField();
    $this->assertTrue($coll_id > 0, "Found coll_id $coll_id");
    $this->assertEqual(1, $queue->numberOfItems(), '1 sub-task is in the queue');
    $data = array('id' => 999);
    // Make use of a static function as the worker callback.
    $data['worker']['callback'] = array(__CLASS__, 'work');
    $id = queue_runner_add($data);
    $this->assertEqual(2, $queue->numberOfItems(), '2 items in the queue');
    $this->assertEqual(1, _queue_runner_collector_remaining($coll_id), '1 item in the queue related to the collector');
    queue_runner_do(1);
    // The 1st serial subtask should complete, and the next got added.
    $this->assertEqual(2, $queue->numberOfItems(), '2 items in the queue');
    $this->assertEqual(1, _queue_runner_collector_remaining($coll_id), '1 item in the queue related to the collector');
    // Do the rest.
    queue_runner_do(1);
    $this->assertTrue(!empty(self::$done[999]), "other task was done");
    $this->assertEqual(1, $queue->numberOfItems(), '1 item in the queue');
    queue_runner_do(count($ids) - 1);
    $this->assertEqual(0, $queue->numberOfItems());
    $processed = queue_runner_do(2);
    $this->assertEqual(0, $processed, 'Nothing left to be claimed');
    foreach ($ids as $num => $item_id) {
      $this->assertTrue(!empty(self::$done[$num]), "$num was done");
    }
    $count = db_query('SELECT COUNT(*) FROM {queue_runner_failures}')->FetchField();
    $this->assertEqual(0, $count, "No failures recorded");
  }

  public static function work($data) {
    self::$done[$data['id']] = TRUE;
    return $data['id'];
  }
}

/**
 * Tests for queuing tasks with related entities.
 */
class QueueRunnerEntityTestCase extends DrupalWebTestCase {
  protected static $done = array();

  public static function getInfo() {
    return array(
      'name' => 'Entity queue items',
      'description' => 'Test processing of entity queue items.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner');
    // Set the file log path to the public files directory so it gets cleaned up
    // during tearDown.
    $temporary_directory = variable_get('file_public_path', conf_path() . '/files') . '/tmp/queue_runner';
    variable_set('queue_runner_log_path', $temporary_directory);
  }

  function testNode() {
    $queue = queue_runner_queue();
    $this->assertTrue(in_array('DrupalReliableQueueInterface', class_implements($queue)), "We got expected DrupalReliableQueueInterface object");
    // Basic test of queue processing.
    self::$done = array();
    $ids = array(6, 7, 8);
    foreach ($ids as $num) {
      $data = array('id' => $num);
      // Make use of a static function as the worker callable.
      $data['worker']['callback'] = array('QueueRunnerEntityTestCase', 'work');
      queue_runner_add($data);
    }
    queue_runner_do(count($ids));
    $res = db_query('SELECT message, variables FROM {queue_runner_dblog}');
    $log_msgs = array();
    foreach ($res as $row) {
      $vars = unserialize($row->variables);
      $log_msgs[] = t($row->message, $vars);
    }
    foreach ($ids as $num) {
      $this->assertTrue(!empty(self::$done[$num]), "$num was done");
      $msg = "RESULT: $num";
      $this->assertTrue(in_array($msg, $log_msgs), "log message contains expected ID");
    }
    // Test that node entities get loaded and passed to the worker.
    self::$done = array();
    $n = array();
    $n[] = $this->drupalCreateNode(array('type' => 'article', 'promote' => 1));
    $n[] = $this->drupalCreateNode(array('type' => 'article', 'promote' => 0));
    $n[] = $this->drupalCreateNode(array('type' => 'page', 'promote' => 0));
    foreach ($n as $node) {
      $data = array('entity_type' => 'node', 'entity_id' => $node->nid);
      $data['worker']['callback'] = array('QueueRunnerEntityTestCase', 'nodework');
      queue_runner_add($data);
    }
    queue_runner_do(count($n));
    foreach ($n as $node) {
      $this->assertTrue(!empty(self::$done[$node->nid]) && self::$done[$node->nid] === $node->title, "Node {$node->nid} was done");
    }
    $count = db_query('SELECT COUNT(*) FROM {queue_runner_failures}')->FetchField();
    $this->assertEqual(0, $count, "No failures recorded");
  }

  public static function work($data) {
    self::$done[$data['id']] = TRUE;
    return $data['id'];
  }

  public static function nodework($data) {
    if (isset($data['entity'])) {
      self::$done[$data['entity']->nid] = $data['entity']->title;
    }
    return $data['entity']->title;
  }
}

/**
 * Unit tests for query object methods.
 */
class QueueRunnerFLockTests extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'QueueRunnerFLock Unit tests',
      'description' => 'Unit Tests for file locks.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp();
    require_once dirname(__FILE__) . '/queue_runner.lock.inc';
  }

  /**
   * Test basic lock functionality.
   */
  function testLock() {
    // Use the tmp dir as the folder where we save our lock file.
    $tmp_dir = sys_get_temp_dir();
    $lock = QueueRunnerFLock::create(__METHOD__, $tmp_dir, 0);
    $caught = FALSE;
    try {
      $lock2 = QueueRunnerFLock::create(__METHOD__, $tmp_dir, 0);
    }
    catch (QueueRunnerFLockException $e) {
      $caught = TRUE;
    }
    $this->assertTrue($caught, 'Could not create duplicate lock');
    $lock->release();
    $caught = FALSE;
    try {
      $lock2 = QueueRunnerFLock::create(__METHOD__, $tmp_dir, 0);
    }
    catch (QueueRunnerFLockException $e) {
      $caught = TRUE;
    }
    $this->assertFalse($caught, 'Could create new lock');
    $lock2->release();
    $start = microtime(TRUE);
    $lock = QueueRunnerFLock::create(__METHOD__, $tmp_dir, 0);
    $caught = FALSE;
    try {
      $lock2 = QueueRunnerFLock::create(__METHOD__, $tmp_dir, 1.0);
    }
    catch (QueueRunnerFLockException $e) {
      $caught = TRUE;
    }
    $elapsed = microtime(TRUE) - $start;
    $this->assertTrue($caught, 'Could not create duplicate lock');
    $this->assertTrue($elapsed >= 1.0, "Waited {$elapsed} for the timout value of 1.0");
  }
}

/**
 * Tests for health/stats reporting.
 */
class QueueRunnerHealthStatsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Health stats tests',
      'description' => 'Tests the health stats overview functionality.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner', 'queue_testrun');

  }

  /**
   * Tests the recording of averages for the current hour.
   */
  function testRunningAverages() {
    $current_hour = _queue_runner_get_current_hour();
    // Confirm that we have the correct number of pre-created rows for all hours
    // between now and the next cron run.
    $result = db_query("SELECT COUNT(hour_ts) FROM {queue_runner_overview} WHERE hour_ts >= :hour", array(':hour' => $current_hour))->fetchField();
    $num_hours = QUEUERUNNER_PRECREATE_STATS_ROWS;
    $this->assertEqual($result, $num_hours, "We have {$num_hours} pre-created hourly rows in the database after the initial cron run");

    // Make sure the current hour has everything at 0.
    $update = db_update('queue_runner_overview')
      ->condition('hour_ts', $current_hour, '>=')
      ->fields(array(
        'completed_tasks' => 0,
        'max_duration' => 0,
        'av_duration' => 0,
        'max_retries' => 0,
        'num_failures' => 0,
        'period_seconds' => 3600
      ));
      $update->execute();
    // Add some tasks to the queue.
    $queue = queue_runner_queue();
    $ids = array(6, 7, 8);
    foreach ($ids as $num) {
      $data = array('id' => $num);
      // Make use of a static function as the worker callback.
      $data['worker']['callback'] = array('QueueRunnerEntityTestCase', 'work');
      queue_runner_add($data);
    }
    queue_runner_do(count($ids));
    // It's possible we spanned an hour so count up the completed tasks since
    // the original current hour to make sure they are represented in the table.
    $result = db_query('SELECT SUM(completed_tasks) FROM {queue_runner_overview} WHERE hour_ts >= :hour', array(':hour' => $current_hour))->fetchField();
    $this->assertEqual($result, count($ids), 'The tasks we ran are all represented as completed tasks in the overview');

    // Reset the rows again.
    $update->execute();

    // Now test directly calling the function that updates the rows in the
    // database so we can pass it exact data and test its averaging
    // functionality.

    $time_now = time();
    $test_data = array(
      array(
        'created' => $time_now - 200, // A task that took 200 seconds.
        'retries' => 3,
      ),
      array(
        'created' => $time_now - 100, // A task that took 100 seconds.
        'retries' => 0,
      ),
    );
    foreach ($test_data as $progress) {
      _queue_runner_update_stats_row(QUEUERUNNER_STATE_DONE, (object) $progress, $time_now, $current_hour);
    }
    $result = db_query('SELECT * FROM {queue_runner_overview} WHERE hour_ts = :hour', array(':hour' => $current_hour))->fetchAssoc();
    $expected = array(
      'completed_tasks' => 2,
      'max_duration' => 200,
      'av_duration' => 150,
      'max_retries' => 3,
      'num_failures' => 0,
    );
    foreach ($expected as $key => $value) {
      $this->assertEqual($result[$key], $value, 'Expected value found for ' . $key);
    }
    // Now add a failed task.
    $progress = array(
      'created' => $time_now - 200,
      'retries' => 4,
    );
    _queue_runner_update_stats_row(QUEUERUNNER_STATE_FAILED, (object) $progress, $time_now, $current_hour);
    $result = db_query('SELECT * FROM {queue_runner_overview} WHERE hour_ts = :hour', array(':hour' => $current_hour))->fetchAssoc();
    // Update the expected results with the extra failed task.
    $expected['num_failures'] = 1;
    foreach ($expected as $key => $value) {
      $this->assertEqual($result[$key], $value, 'Expected value found for ' . $key);
    }

    // Test the re-averaging functionality by generating 1.5 day's worth of
    // stats and passing them to the _queue_runner_reaverage_daily() function.
    $records = array();
    // Pick a random but reasonable number of hours to generate.
    $num_hours = rand(12, 100);
    $starting_ts = $current_hour - ($num_hours * 3600);
    $fields = array(
      'hour_ts',
      'completed_tasks',
      'max_duration',
      'av_duration',
      'max_retries',
      'num_failures',
    );
    for ($i = 0; $i < $num_hours; $i++) {
      $hour = array();
      // For simplicity, just make all values correspond to the index. This way
      // it's easy to calculate the expected average/sum/max.
      foreach($fields as $field) {
        $hour[$field] = $i + 1;
      }
      // But the timestamp's value does matter.
      $hour['hour_ts'] = $starting_ts + ($i * 3600);
      $records[] = $hour;
    }

    $rows = _queue_runner_reaverage_daily($records);
    $this->assertEqual(count($rows), ceil($num_hours/24), 'The correct number of day records was returned');
    $averages = array('av_duration');
    $maxes = array('max_retries', 'max_duration');
    $sums = array('completed_tasks', 'num_failures');
    foreach ($rows as $i => $row) {
      $start = ($i * 24) + 1;
      $end = ($start + 23) <= $num_hours ? ($start + 23) : $num_hours;
      $sum = $this->calculateSequenceSum($start, $end);
      $average = round($sum / (($end - $start) + 1));
      $day_num = $i + 1;
      $msg = "The correct number was returned for %s for day %d";
      foreach ($sums as $field) {
        $this->assertEqual($row[$field], $sum, sprintf($msg, $field, $day_num));
      }
      foreach ($averages as $field) {
        $this->assertEqual($row[$field], $average, sprintf($msg, $field, $day_num));
      }
      foreach ($maxes as $field) {
        $this->assertEqual($row[$field], $end, sprintf($msg, $field, $day_num));
      }
    }
    queue_runner_add_ping_task();
    queue_runner_do(1);
    $time = queue_runner_last_check_timestamp();
    $this->assertEqual(queue_runner_check_health_thresholds($time), 'ok', 'Ping task ran');
  }

  /**
   * Helper function to calculate the sum of a sequence of numbers.
   */
  function calculateSequenceSum($start, $end) {
    $ret = 0;
    for ($i = $start; $i <= $end; $i++) {
      $ret += $i;
    }
    return $ret;
  }

  /**
   * Tests the pruning behavior that happens on cron.
   */
  function testStatsPruning() {
    $current_hour = _queue_runner_get_current_hour();
    $oldest = $current_hour - variable_get('queue_runner_reports_oldest', 1209600);
    $oldest = $oldest - ($oldest % 86400);
    // Confirm there are no records older than the set cut-off period.
    $result = db_query("SELECT COUNT(hour_ts) FROM {queue_runner_overview} WHERE hour_ts < :hour", array(':hour' => $oldest))->fetchField();
    $this->assertEqual($result, 0, "Stats table has been pruned on cron.");
  }
}

/**
 * Tests that file logging works as expected.
 */
class QueueRunnerFileLogTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'File logging',
      'description' => 'Tests that file logging works as expected.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner');

    // Set the file log path to the public files directory so it gets cleaned up
    // during tearDown.
    $temporary_directory = variable_get('file_public_path', conf_path() . '/files') . '/tmp/queue_runner';
    variable_set('queue_runner_log_path', $temporary_directory);

    // Create a user with the required permissions.
    $user = $this->drupalCreateUser(array('access queue runner log'));
    $this->drupalLogin($user);
  }

  /**
   * Tests basic file logging pages.
   */
  function testBasicLogging() {
    $date_today = queue_runner_file_log_date_get();

    // Check that the recent main log shows the correct empty message.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/recent');
    $this->assertText('There are no entries in the main log file so far today.', 'The correct empty message is displayed for the recent main log page.');

    // Check that the recent error log shows the correct empty message.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/recent/error');
    $this->assertText('There are no entries in the error log file so far today.', 'The correct empty message is displayed for the recent error log page.');

    // Check that the paged main log shows the correct empty message.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/paged');
    $this->assertText("There is no main log file for $date_today.", 'The correct empty message is displayed for the paged main log page.');

    // Check that the paged error log shows the correct empty message.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . "/file-log/paged/$date_today/error");
    $this->assertText("There is no error log file for $date_today.", 'The correct empty message is displayed for the paged error log page.');

    // Check that the paged main log shows the correct empty message.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/collector/1');
    $this->assertText('There is no main log file for this collector.', "The correct empty message is displayed for the collector's main log page.");

    // Check that the paged main log shows the correct empty message.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/collector/1/error');
    $this->assertText('There is no error log file for this collector.', "The correct empty message is displayed for the collector's error log page.");

    // Create a single task and process it.
    self::createTask('single task');
    queue_runner_do();

    // Check that the recent log shows the completed task.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/recent');
    $this->assertText('RESULT: single task', 'Task appears in the recent file log');

    // Check that the paged log shows the completed task.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/paged');
    $this->assertText('RESULT: single task', 'Task appears in the paged file log');

    // Create a collector with 10 items and process it, adding 2 iterations for
    // the collector creation and completion tasks.
    $coll_id = self::createCollector();
    queue_runner_do(12);

    // Check that the collector logs exist and that a link to the collector's
    // individual log page exists.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/collector/' . $coll_id);
    $this->assertText('RESULT: subtask 10', "Tasks appear on the individual collector's log page");
    $this->assertLinkByHref(QUEUE_RUNNER_ADMIN_PATH . '/file-log/collector/' . $coll_id, 0, "A link to the collector's individual log page exists.");
  }

  /**
   * Tests the paging functionality.
   */
  function testPaging() {
    // Create 100 tasks and process them.
    $count = 100;
    for ($id = 1; $id <= $count; $id++) {
      self::createTask("task $id");
    }
    queue_runner_do($count);

    // Check that the first page of 20 items shows the correct log entries.
    $this->drupalPost(QUEUE_RUNNER_ADMIN_PATH . '/file-log/paged', array('page' => 1, 'items' => 20), 'Go');
    $this->assertText('RESULT: task 1', 'Task 1 appears on the first page');
    $this->assertText('RESULT: task 20', 'Task 20 appears on the first page');
    $this->assertNoText('RESULT: task 21', 'Task 21 does not appear on the first page');

    // Check that the second page of 20 items shows the correct log entries.
    $this->drupalPost(QUEUE_RUNNER_ADMIN_PATH . '/file-log/paged', array('page' => 2, 'items' => 20), 'Go');
    $this->assertText('RESULT: task 21', 'Task 21 appears on the second page');
    $this->assertText('RESULT: task 40', 'Task 40 appears on the second page');
    $this->assertNoText('RESULT: task 41', 'Task 41 does not appear on the second page');

    // Ensure that the previous link goes to the correct page of results.
    $this->clickLink('‹ Previous');
    $this->assertText('RESULT: task 1', 'Task 1 appears on the first page (using the previous link)');
    $this->assertText('RESULT: task 20', 'Task 20 appears on the first page (using the previous link)');
    $this->assertNoText('RESULT: task 21', 'Task 21 does not appear on the first page (using the previous link)');

    // Ensure that the next link goes to the correct page of results.
    $this->clickLink('Next ›');
    $this->assertText('RESULT: task 21', 'Task 21 appears on the second page (using the next link)');
    $this->assertText('RESULT: task 40', 'Task 40 appears on the second page (using the next link)');
    $this->assertNoText('RESULT: task 41', 'Task 41 does not appear on the second page (using the next link)');
  }

  /**
   * Tests that error logs work.
   */
  function testErrorLog() {
    // Create 2 tasks (one successful and one failed) and process them.
    self::createTask('successful task');
    self::createTask('failed task', 'failed');
    queue_runner_do(2);

    // Load the main log and check that both successful and failed tasks are
    // displayed.
    $this->drupalGet(QUEUE_RUNNER_ADMIN_PATH . '/file-log/recent');
    $this->assertText('RESULT: successful task', 'Successful task appears in the main log');
    $this->assertText("exception 'Exception' with message 'Failing item: failed task'", 'Failed task appears in the main log');

    // Load the error log and check that only the failed item is displayed.
    $this->drupalPost(QUEUE_RUNNER_ADMIN_PATH . '/file-log/recent', array('type' => 'error'), 'Submit');
    $this->assertNoText('RESULT: successful task', 'Successful task does not appear in the error log');
    $this->assertText("exception 'Exception' with message 'Failing item: failed task'", 'Failed task appears in the error log');
  }

  /**
   * Creates a single task.
   *
   * @param string $title
   *   The title of the task to create.
   * @param string $state
   *   The desired task completion state; Can be either "success" or "failed".
   */
  public function createTask($title = 'task', $state = 'success') {
    $data = array(
      'title' => $title,
      'worker' => array(
        'callback' => 'queue_runner_test_worker',
      ),
      'state' => $state,
    );

    return queue_runner_add($data);
  }

  /**
   * Creates a collector with a specified number of sub-tasks.
   *
   * @param int $count
   *   The number of sub-tasks to create.
   * @param string $type
   *   The type of collector to create.
   */
  public function createCollector($count = 10, $type = 'parallel_collector') {
    $data = array();

    for ($id = 1; $id <= $count; $id++) {
      $task = array(
        'data' => array(
          'title' => "subtask $id",
          'worker' => array(
            'callback' => 'queue_runner_test_worker',
          ),
        ),
      );
      $data['subtasks'][] = $task;
    }

    return queue_runner_add($data, $type);
  }
}

/**
 * Tests for miscellaneous task behavior.
 */
class QueueRunnerTaskTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'General task tests',
      'description' => 'Tests general functionality of queue runner tasks.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner');
  }

  /**
   * Tests that a task with non-zero retries is retried before failing.
   */
  function testRetries() {
    $retries = rand(2, 8);
    $this->assertTrue(TRUE, "Retries set to $retries");
    $task = array(
      'retries' => $retries,
      'worker' => array('callback' => array('QueueRunnerTaskTestCase', 'workFail'))
    );
    queue_runner_add($task);
    $count = db_query('SELECT COUNT(*) FROM {queue}')->fetchField(0);
    $this->assertEqual($count, 1, 'One item in the queue');

    for ($i = $retries; $i > 0; --$i) {
      queue_runner_do(1);
      $count = db_query('SELECT COUNT(*) FROM {queue}')->fetchField(0);
      $this->assertEqual($count, 1, 'One item in the queue');
    }

    queue_runner_do(1);
    $count = db_query('SELECT COUNT(*) FROM {queue}')->fetchField(0);
    $this->assertEqual($count, 0, 'No items left in the queue');
  }

  public static function workFail($data) {
    throw new Exception('Test fail.');
  }
}
