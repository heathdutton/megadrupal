<?php
/**
 * @file
 * Install, update, and uninstall functions for the Queue Runner module.
 */

/**
 * Implements hook_requirements().
 *
 * @param string $phase
 *   'runtime' or 'install'
 *
 * @return array
 *   An array of requirements data.
 */
function queue_runner_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    // We assume the module will be loaded at runtime, whereas it might not be
    // during install.
    $timestamp = queue_runner_last_check_timestamp();
    $status = queue_runner_check_health_thresholds($timestamp);

    $details = array(
      'ok' => array(
        'severity' => REQUIREMENT_OK,
        'description' => $t('The queue has recently processed test items and is functioning normally.'),
      ),
      'warning' => array(
        'severity' => REQUIREMENT_WARNING,
        'description' => $t('A queue test item has not been processed within %sec seconds.  This may indicate that it is not working correctly.',
          array('%sec' => variable_get('queue_runner_queue_ok_threshold', 300))),
      ),
      'error' => array(
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('No queue test items have processed within the last %sec seconds and may indicate the task server has stopped working.  Check that your system cron is configured to run the appropriate check ("drush queue-runner-add-ping-task") and check that the queue is running ("drush queue-runner-process-queue [qr-pq]").', 
          array('%sec' => variable_get('queue_runner_queue_warning_threshold', 600))),
      ),
    );

    $requirements['queue_runner_server_status'] = array(
      'title' => $t('Queue runner server status'),
      'description' => $details[$status]['description'],
      'severity' => $details[$status]['severity'],
      'value' => $t('Last successful queue test run: %date', array('%date' => date('r', $timestamp))),
    );
  }

  return $requirements;
}

/**
 * Implements hook_enable().
 */
function queue_runner_enable() {
  _queue_runner_precreate_rows();
}

/**
 * Implements hook_disable().
 */
function queue_runner_disable() {
  variable_del('queue_class_queue_runner');
}

/**
 * Implements hook_uninstall().
 */
function queue_runner_uninstall() {
  // Remove our items from the queue.
  $queue = DrupalQueue::get('queue_runner', TRUE);
  $queue->deleteQueue();
}

/**
 * Implements hook_schema().
 */
function queue_runner_schema() {
  $schema['queue_runner_failures'] = array(
    'description' => 'Stores filed items from queues.',
    'fields' => array(
      'item_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'A queue item_id',
      ),
      'coll_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'A {queue_runner_collector}.coll_id',
      ),
      'nid' => array(
        'description' => 'The {node} related to this queue item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'The arbitrary data for the item.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 400,
        'not null' => TRUE,
        'description' => 'The title of this item.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the item was created.',
      ),
    ),
    'primary key' => array('item_id'),
  );

  $schema['queue_runner_in_progress'] = array(
    'description' => 'Stores relationship of items in the queue.',
    'fields' => array(
      'item_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'A unique queue item item_id',
      ),
      'coll_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'A {queue_runner_collector}.coll_id',
      ),
      'state' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 100, //QUEUERUNNER_STATE_WAITING
        'description' => 'Indicates whether the item is claimed, or is retrying.',
      ),
      'nid' => array(
        'description' => 'The {node} related to this queue item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'retries' => array(
        'description' => 'The number of retries this has had.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the item was created.',
      ),
    ),
    'primary key' => array('item_id'),
  );
  $schema['queue_runner_collector'] = array(
    'description' => 'Colelcts results of queue sub-tasks.',
    'fields' => array(
      'coll_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'A queue collector ID',
      ),
      'nid' => array(
        'description' => 'The {node} related to this collector.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 400,
        'not null' => TRUE,
        'description' => 'The title of this item.',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'The arbitrary data for the item.',
      ),
      'total' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The total number of subtasks to be created.',
      ),
      'queued' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The number of subtasks in the queue.',
      ),
      'remaining' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The number of remaining subtasks.',
      ),
      'result' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'The arbitrary result for the collector',
      ),
      'status' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => 'queued',
        'length' => 255,
        'description' => 'Indicates whether the item has been claimed or is retrying.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the item was created.',
      ),
    ),
    'primary key' => array('coll_id'),
    'indexes' => array(
      'queue' => array('created', 'status'),
      'status_nid' => array('status', 'nid'),
    ),
  );

  $schema['queue_runner_rel_collector'] = array(
    'description' => 'Stores relationship of sub-tasks in the queue to a collector.',
    'fields' => array(
      'item_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
        'description' => 'A queue item_id',
      ),
      'coll_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'A {queue_runner_collector}.coll_id',
      ),
    ),
    'primary key' => array('coll_id', 'item_id'),
  );
  $schema['queue_runner_collector_messages'] = array(
    'description' => 'Stores message for items in the queue.',
    'fields' => array(
      'mid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'A unique id',
      ),
      'coll_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'A {queue_runner_collector}.coll_id',
      ),
      'message' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The arbitrary message text.',
      ),
    ),
    'primary key' => array('mid'),
    'indexes' => array(
      'coll_id' => array('coll_id'),
    ),
  );
  $schema['queue_runner_dblog'] = array(
    'description' => 'Log of recent queues task outcomes.',
    'fields' => array(
      'wid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique log event ID.',
      ),
      'item_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
        'description' => 'A queue item_id',
      ),
      'coll_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
        'description' => 'A {queue_runner_collector}.coll_id',
      ),
      'nid' => array(
        'description' => 'The {node} related to this log message.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'message' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Text of log message to be passed into the t() function.',
      ),
      'variables' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
      ),
      'severity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Link to view the result of the event.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Hostname of the server that triggered the event.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when event occurred.',
      ),
    ),
    'primary key' => array('wid'),
    'indexes' => array(
      'item_id' => array('item_id'),
      'severity' => array('severity'),
      'nid' => array('nid'),
    ),
  );
  $schema['queue_runner_overview'] = array(
    'description' => 'Stores hourly averages and stats for processed tasks.',
    'fields' => array(
      'hour_ts' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp for a particular hour.',
      ),
      'completed_tasks' => array(
        'description' => 'The total number of completed tasks in the given hour.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_duration' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Longest time taken in the given hour for a single task.',
      ),
      'av_duration' => array(
        'description' => 'The average duration of a process in the given hour.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_retries' => array(
        'description' => 'The maximum number of retries for a process in the given hour.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'num_failures' => array(
        'description' => 'The total number of failures in the given hour.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'period_seconds' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 3600,
        'description' => 'The number of seconds in the time period this row represents.',
      ),
      'last_timestamp' => array(
        'description' => 'The timestamp of the last completed task in this hour.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('hour_ts'),
  );
  return $schema;
}

/**
 * Create Queue Runner tables if they don't already exist.
 */
function queue_runner_update_7001() {
  $schema = queue_runner_schema();
  // Use what's already defined in queue_runner schema in order to be consistent.
  if (!db_table_exists('queue_runner_failures')) {
    db_create_table('queue_runner_failures', $schema['queue_runner_failures']);
  }
  if (!db_table_exists('queue_runner_in_progress')) {
    db_create_table('queue_runner_in_progress', $schema['queue_runner_in_progress']);
  }
  if (!db_table_exists('queue_runner_collector')) {
    db_create_table('queue_runner_collector', $schema['queue_runner_collector']);
  }
  if (!db_table_exists('queue_runner_rel_collector')) {
    db_create_table('queue_runner_rel_collector', $schema['queue_runner_rel_collector']);
  }
  if (!db_table_exists('queue_runner_dblog')) {
    db_create_table('queue_runner_dblog', $schema['queue_runner_dblog']);
  }
  if (!db_table_exists('queue_runner_overview')) {
    db_create_table('queue_runner_overview', $schema['queue_runner_overview']);
  }
}

/**
 * Create Queue Runner queue_runner_overview table if it doesn't already exist.
 */
function queue_runner_update_7002() {
  $schema = queue_runner_schema();
  // Use what's already defined in queue_runner schema in order to be consistent.
  if (!db_table_exists('queue_runner_overview')) {
    db_create_table('queue_runner_overview', $schema['queue_runner_overview']);
  }
}

/**
 * Add the created field to the queue_runner_in_progress table.
 */
function queue_runner_update_7003() {
  $spec['created'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Timestamp when the item was created.',
   );
  db_add_field('queue_runner_in_progress', 'created', $spec['created']);
}

/**
 * Create Queue Runner queue_runner_collector_messages table if it doesn't already exist.
 */
function queue_runner_update_7004() {
  $schema = queue_runner_schema();
  // Use what's already defined in queue_runner schema in order to be consistent.
  if (!db_table_exists('queue_runner_collector_messages')) {
    db_create_table('queue_runner_collector_messages', $schema['queue_runner_collector_messages']);
  }
}

/**
 * Add the created field to the queue_runner_in_progress table.
 */
function queue_runner_update_7005() {
  $spec['last_timestamp'] = array(
    'description' => 'The timestamp of the last completed task in this hour.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('queue_runner_overview', 'last_timestamp', $spec['last_timestamp']);
}
