<?php
/**
 * @file
 * Executes items in the Queue Runner queue.
 *
 * The main goal of the Queue Runner is that it runs for x time and executes as
 * many items as possible within the given timeframe, with a specific interval
 * between tasks). It waits until the last item has finished and starts the
 * whole queue processing code again for another minute. This is effectively a
 * sort of daemon that continiously executes tasks in the queue.
 */

/**
 * Include the common code file for logic shared between Drupal 6 and 7.
 */
require_once dirname(__FILE__) . '/queue_runner.common.inc';

/**
 * Status flags for items in the queue.
 */
define('QUEUERUNNER_STATE_WAITING', 100);
define('QUEUERUNNER_STATE_CLAIMED', 201);
define('QUEUERUNNER_STATE_RETRYING', 101);
define('QUEUERUNNER_STATE_DONE', 300);
define('QUEUERUNNER_STATE_CANCELED', 301);
define('QUEUERUNNER_STATE_COLLECTING', 400);
define('QUEUERUNNER_STATE_FAILED', 500);

define('QUEUERUNNER_LOCK_MAX_RETRIES', 10);

/**
 * Defines the default number of results to display per page in the file log UI.
 */
define('QUEUE_RUNNER_FILE_LOG_DEFAULT_RESULTS_PER_PAGE', 20);

/**
 * Defines the base admin path for the file log UI.
 */
define('QUEUE_RUNNER_ADMIN_PATH', 'admin/reports/queue-runner');

/**
 * Defines the estimated maximum line length of log messages.
 */
define('QUEUE_RUNNER_FILE_LOG_MAX_LINE_LENGTH', 1024);

/**
 * Defines the CSV delimiter for file logs.
 */
define('QUEUE_RUNNER_FILE_LOG_CSV_DELIMITER', "\t");

/**
 * No. of stats rows to precreate in advance for updating the running averages.
 */
define('QUEUERUNNER_PRECREATE_STATS_ROWS', 48);

/**
 * Implements hook_menu().
 */
function queue_runner_menu() {
  $items = array();
  $items['admin/config/system/queue-runner'] = array(
    'title' => 'Queue Runner',
    'description' => 'Configure defaults for the Queue Runner.',
    'access arguments' => array('administer queue runner'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue_runner_settings'),
    'file' => 'queue_runner.admin.inc',
  );
  $items['admin/config/system/queue-runner/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/queue-runner/debug'] = array(
    'title' => 'Debug',
    'access arguments' => array('administer queue runner'),
    'page callback' => 'queue_runner_debug',
    'file' => 'queue_runner.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/queue-runner-event/%queue_runner_event']  = array(
    'title' => 'Details',
    'access arguments' => array('access queue runner log'),
    'page callback' => 'queue_runner_event',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'queue_runner.admin.inc',
  );
  $items['admin/config/system/queue-runner/%queue_runner_operation/%queue_runner_failure'] = array(
    'access callback' => 'queue_runner_failure_operation_allowed',
    'access arguments' => array(4, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue_runner_task_action_confirm_form', 4, 5),
    'file' => 'queue_runner.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/system/queue-runner/collector/cancel/%queue_runner_collector'] = array(
    'access callback' => 'queue_runner_collector_cancel_allowed',
    'access arguments' => array(6),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue_runner_collector_cancel_confirm_form', 6),
    'file' => 'queue_runner.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/queue-runner'] = array(
    'title' => 'Queue Runner Status',
    'description' => 'Status pages for the Queue Runner.',
    'access arguments' => array('access queue runner log'),
    'page callback' => 'queue_runner_overview_report',
    'file' => 'queue_runner.admin.inc',
  );
  $items['admin/reports/queue-runner/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items[QUEUE_RUNNER_ADMIN_PATH . '/file-log/recent'] = array(
    'title' => 'Recent File Log',
    'description' => 'View log files generated by Queue Runner module.',
    'access arguments' => array('access queue runner log'),
    'page callback' => 'queue_runner_file_log_most_recent_page',
    'file' => 'queue_runner.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items[QUEUE_RUNNER_ADMIN_PATH . '/file-log/paged'] = array(
    'title' => 'Paged File Log',
    'access arguments' => array('access queue runner log'),
    'page callback' => 'queue_runner_file_log_paged_page',
    'file' => 'queue_runner.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  $items[QUEUE_RUNNER_ADMIN_PATH . '/file-log/collector/%'] = array(
    'access arguments' => array('access queue runner log'),
    'title callback' => 'queue_runner_file_log_collector_title',
    'title arguments' => array(5),
    'page callback' => 'queue_runner_file_log_collectors',
    'page arguments' => array(5),
    'file' => 'queue_runner.admin.inc',
  );
  $items[QUEUE_RUNNER_ADMIN_PATH . '/file-log-download/collector/%'] = array(
    'access arguments' => array('access queue runner log'),
    'page callback' => 'queue_runner_file_log_collectors_download',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'file' => 'queue_runner.admin.inc',
  );
  return $items;
}

/**
 * Gets a queue instance.
 *
 * This is a helper function to simplify backporting and refactoring.
 */
function queue_runner_queue() {
  $queue = DrupalQueue::get('queue_runner', TRUE);
  // Creates the queue if it does not exist yet.
  $queue->createQueue();
  return $queue;
}

/**
 * Title callback: Generates the title for a given collector's log page.
 */
function queue_runner_file_log_collector_title($collector_id) {
  return t('Logs for collector @collector_id', array('@collector_id' => $collector_id));
}

/**
 * Access callback: determine if the access to the failure is allowed.
 */
function queue_runner_failure_operation_allowed($operation, $failure) {
  if (!user_access('administer queue runner')) {
    return FALSE;
  }
  if (!empty($failure->coll_id) && $operation == 'cancel') {
    // Don't need to unserialize the data.
    $collector = reset(_queue_runner_collector_load(array($failure->coll_id)));
    if (!empty($collector) && $collector->status != 'canceled' && $collector->status != 'finished') {
      // Collector is still running, so don't allow cancel.
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Access callback: Determines whether a collector can be canceled.
 *
 * @param object $collector
 *   The collector object to cancel.
 */
function queue_runner_collector_cancel_allowed($collector) {
  if (!user_access('administer queue runner')) {
    return FALSE;
  }

  if (empty($collector) || !in_array($collector->status, array('created', 'started', 'working'))) {
    return FALSE;
  }

  // Don't allow cancellation of a collector which has a parent when that parent
  // has not been canceled.
  if (!empty($collector->data['coll_id']) && ($parent = queue_runner_collector_load($collector->data['coll_id'])) && !in_array($parent->status, array('canceled', 'finished'))) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Load function to validate the operation.
 */
function queue_runner_operation_load($operation) {
  // Only allow certain actions.
  if (!in_array($operation, array('cancel', 'retry'))) {
    return FALSE;
  }
  return $operation;
}

/**
 * Retrieves a queue log event from the database.
 *
 * @param integer $wid
 *   The ID of the event to retrieve.
 *
 * @return object
 *   The event object.
 */
function queue_runner_event_load($wid) {
  $dblog = db_query('SELECT * FROM {queue_runner_dblog} WHERE wid = :id', array(':id' => $wid))->fetchObject();
  if (!empty($dblog->variables)) {
    $dblog->variables = unserialize($dblog->variables);
  }
  return $dblog;
}

/**
 * Retrieves a failed task item from the database.
 *
 * @param integer $item_id
 *   The ID of the item to retrieve.
 *
 * @return object
 *   The item object.
 */
function queue_runner_failure_load($item_id) {
  $item = db_query('SELECT * FROM {queue_runner_failures} WHERE item_id = :item_id', array(':item_id' => $item_id))->fetchObject();

  if (!empty($item->data)) {
    $item->data = unserialize($item->data);
  }

  return $item;
}

/**
 * Implements hook_theme().
 */
function queue_runner_theme() {
  return array(
    'queue_runner_event' => array(
      'variables' => array(
        'event' => NULL,
      )
    )
  );
}

/**
 * Returns HTML for a log message.
 *
 * @param array $variables
 *   An associative array containing:
 *   - event: The event object for the log message.
 *     - message: The message to log.
 *     - variables: Any additonal variables to pass to t().
 *
 * @ingroup themeable
 */
function theme_queue_runner_event($variables) {
  $output = '';
  $event = $variables['event'];
  // Check for required properties.
  if (isset($event->message)) {
    // Messages without variables or user specified text.
    if (empty($event->variables)) {
      $output = $event->message;
    }
    // Message to translate with injected variables.
    else {
      $output = t($event->message, $event->variables);
    }
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function queue_runner_permission() {
  return array(
    'administer queue runner' => array(
      'title' => t('Administer Queue Runner'),
      'description' => t('Perform administration tasks for the Queue Runner.'),
    ),
    'access queue runner log' => array(
      'title' => t('Access Queue Runner Log'),
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Controls the size of the log table, paring it to 'queue_runner_dblog_limit'
 * messages.
 */
function queue_runner_cron() {
  // Cleanup the watchdog table.
  $row_limit = variable_get('queue_runner_dblog_limit', 1000);

  // For row limit n, get the wid of the nth row in descending item_id order.
  // Counting the most recent n rows avoids issues with item_id number
  // sequences e.g., auto_increment value > 1 or rows deleted directly from the
  // table.
  if ($row_limit > 0) {
    $min_row = db_select('queue_runner_dblog', 'w')
      ->fields('w', array('wid'))
      ->orderBy('wid', 'DESC')
      ->range($row_limit - 1, 1)
      ->execute()->fetchField();

    // Delete all table entries older than the nth row, if nth row was found.
    if ($min_row) {
      db_delete('queue_runner_dblog')
        ->condition('wid', $min_row, '<')
        ->execute();
    }
  }
  $current_hour = _queue_runner_get_current_hour();
  // Prune the overview table.
  $oldest = $current_hour - variable_get('queue_runner_reports_oldest', 1209600);
  $oldest = $oldest - ($oldest % 86400);
  // Delete everthing older than the oldest desired record.
  db_delete('queue_runner_overview')
    ->condition('hour_ts', $oldest, '<')
    ->execute();
  _queue_runner_precreate_rows();
}

function queue_runner_collector_canceled($coll_id) {
  $status = db_query('SELECT status FROM {queue_runner_collector} WHERE coll_id = :coll_id', array(':coll_id' => $coll_id))->fetchField();
  return empty($status) || $status == 'canceled';
}

/**
 * Implements hook_views_api().
 */
function queue_runner_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'queue_runner') . '/views',
  );
}

/**
 * Takes appropriate action for an in-progress item.
 *
 * Actions taken:
 *
 * - retrying: increments the retries field in the database.
 * - collecting: updates the state in the database and logs some stats.
 * - failed/done: deletes the item from the database and logs stats if the
 *   previous state was not "collecting".
 *
 * @param int $state
 *   A status flag indicating the current state.
 * @param object $progress
 *   The progress object for a given task.
 */
function queue_runner_update_progress($state, $progress) {
  $item_id = $progress->item_id;
  switch ($state) {
    case QUEUERUNNER_STATE_RETRYING:
      db_update('queue_runner_in_progress')
        ->fields(array('state' => $state))
        ->expression('retries', 'retries + 1')
        ->condition('item_id', $item_id)
        ->execute();
      break;
    case QUEUERUNNER_STATE_COLLECTING:
      // Once the collector starts, we don't want to count further time.
      _queue_runner_update_stats_row($state, $progress);

      db_update('queue_runner_in_progress')
        ->fields(array('state' => $state))
        ->condition('item_id', $item_id)
        ->execute();
      break;
    case QUEUERUNNER_STATE_FAILED:
      // Fall through.
    case QUEUERUNNER_STATE_CANCELED:
      // Fall through.
    case QUEUERUNNER_STATE_DONE:
      // Only update stats if the prior state was not "collecting".
      if ($progress->state != QUEUERUNNER_STATE_COLLECTING) {
        _queue_runner_update_stats_row($state, $progress);
      }

      db_delete('queue_runner_in_progress')
        ->condition('item_id', $item_id)
        ->execute();
      db_delete('queue_runner_rel_collector')
        ->condition('item_id', $item_id)
        ->execute();
      break;
  }
}

function _queue_runner_collector_delete($coll_id) {
  db_delete('queue_runner_collector')
    ->condition('coll_id', $coll_id)
    ->execute();
  db_delete('queue_runner_rel_collector')
    ->condition('coll_id', $coll_id)
    ->execute();
  db_delete('queue_runner_collector_messages')
    ->condition('coll_id', $coll_id)
    ->execute();
}

/**
 * Save an inter-task message related to a collector.
 *
 * @param int $coll_id
 *   The collector ID.
 * @param string $message
 *   A message up to 255 characters.
 */
function queue_runner_collector_message_add($coll_id, $message) {
  $query = db_insert('queue_runner_collector_messages')
    ->fields(array(
      'coll_id' => $coll_id,
      'message' => $message,
   ));
  return $query->execute();
}

/**
 * Load all inter-task messages related to a collector.
 *
 * @param $coll_id
 *
 * @return
 *   Array of messages.
 */
function queue_runner_collector_messages($coll_id) {
  return db_query('SELECT message FROM {queue_runner_collector_messages} WHERE coll_id = :coll_id', array(':coll_id' => $coll_id))->fetchCol();
}

/**
 * Helper function: relate an item and a collector.
 *
 * @param $coll_id
 * @param $item_id
 */
function _queue_runner_collector_relate($coll_id, $item_id) {
  $query = db_insert('queue_runner_rel_collector')
    ->fields(array(
      'coll_id' => $coll_id,
      'item_id' => $item_id,
   ));
  return $query->execute();
}


/**
 * Helper function: count items in the queue related to a collector.
 *
 * @param $coll_id
 * @param $item_id
 *   Optional. Exclude this item from the total.
 */
function _queue_runner_collector_remaining($coll_id, $item_id = NULL) {
  $sql = 'SELECT COUNT(item_id) FROM {queue_runner_rel_collector} WHERE coll_id = :coll_id';
  $args = array(':coll_id' => $coll_id);

  if ($item_id) {
    $sql .= ' AND item_id <> :item_id';
    $args[':item_id'] = $item_id;
  }
  return db_query($sql, $args)->fetchField();
}

/**
 * Helper function: load an in-progress item from the DB.
 *
 * @param $item_id
 */
function queue_runner_in_progress_load($item_id) {
  return db_query('SELECT * FROM {queue_runner_in_progress} WHERE item_id = :item_id', array(':item_id' => $item_id))->fetchObject();
}

/**
 * Helper function: load collectors from the DB.
 *
 * @param $coll_ids
 */
function _queue_runner_collector_load($coll_ids) {
  if ($coll_ids) {
    return db_query('SELECT * FROM {queue_runner_collector} WHERE coll_id IN (:coll_id)', array(':coll_id' => $coll_ids))->fetchAllAssoc('coll_id');
  }
  else {
    return array();
  }
}

/**
 * Attempts to load an entity to append to a queue job data array.
 *
 * @param $data
 *   Reference to a queue job data array.
 */
function _queue_runner_entity_load($data) {
  $entities = entity_load($data['entity_type'], array($data['entity_id']));
  return end($entities);
}

/**
 * Updates the row for the current hour's stats with info from a processed task.
 *
 * @param $state
 *  A queue job progress state.
 * @param $progress
 *  A queue job progress object.
 */
function _queue_runner_update_stats_row($state, $progress, $timestamp = NULL, $hour_ts = NULL) {
  if (empty($timestamp)) {
    $timestamp = time();
  }
  if (empty($hour_ts)) {
    $hour_ts = _queue_runner_get_current_hour();
  }

  // Prepare data to update this hour's row in the overview table.
  $update = db_update('queue_runner_overview')
    ->fields(array('last_timestamp' => $timestamp));
  if ($state == QUEUERUNNER_STATE_FAILED) {
    $update
      ->expression('num_failures', 'num_failures + 1');
  }
  else {
    $time_taken = $timestamp - $progress->created;
    // @todo The GREATEST() operator is MySQL only - figure out a cross-
    //   platform way to do this.
    $update
      ->expression('max_duration', 'GREATEST(max_duration, :duration)', array(':duration' => $time_taken));
    $update
      ->expression('max_retries', 'GREATEST(max_retries, :retries)', array(':retries' => $progress->retries));
    $update
      ->expression('av_duration', '((av_duration * completed_tasks) + :duration) / (completed_tasks + 1)', array(':duration' => $time_taken));
    $update
      ->expression('completed_tasks', 'completed_tasks + 1');
  }
  $update
    ->condition('hour_ts', $hour_ts)
    ->execute();
}

/**
 * Ensures there are rows created in advance for the hourly stats.
 */
function _queue_runner_precreate_rows() {
  $current_hour = _queue_runner_get_current_hour();
  // Precreate rows in the overview table so that when updating the current hour
  // we do not need to check whether there's already a row for that hour.
  for ($i = 0; $i < QUEUERUNNER_PRECREATE_STATS_ROWS; $i++) {
    $query = db_insert('queue_runner_overview')
      ->fields(array(
        'hour_ts' => $current_hour + ($i * 3600),
     ));
    try {
      $query->execute();
    }
    catch(Exception $e) {
      // The row already exists, that's ok.
    }
  }
}

/**
 * Obtains titles from an array of nids.
 *
 * @param array $nids
 *
 * @return array
 *   Array of node titles, keyed by nid.
 */
function _queue_runner_node_titles($nids) {
  return db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('nid', array_unique(array_values($nids)), 'IN')
    ->execute()
    ->fetchAllKeyed();
}

/**
 * Clears all the tracking tables and queue.
 *
 * This is useful for testing or for starting from scratch. It does not have any
 * effect on the log tables.
 *
 * @return boolean
 *   TRUE when succesful, otherwise FALSE.
 */
function queue_runner_clear_all() {
  $success = TRUE;
  // Saves our original queue class variable.
  $configured_queue_class = variable_get('queue_default_class', 'SystemQueue');

  // Deletes the Drupal queue using the default class (mysql tables).
  variable_del('queue_default_class');
  $queue = queue_runner_queue();
  $queue->deleteQueue();
  if ($queue->numberOfItems() != 0) {
    $success = FALSE;
  }

  // If the configured queue class was different from default, also delete that
  // specific queue.
  if ($configured_queue_class != 'SystemQueue') {
    // Sets the queue back to its original value.
    variable_set('queue_default_class', $configured_queue_class);
    // Gets the queue.
    $queue = queue_runner_queue();
    // Deletes the queue.
    $queue->deleteQueue();
    // Checks if the queue emptied succesfully.
    if ($queue->numberOfItems() !== 0) {
      $success = FALSE;
    }
  }

  // Removes any tracking data.
  db_truncate('queue_runner_collector')->execute();
  db_truncate('queue_runner_rel_collector')->execute();
  db_truncate('queue_runner_in_progress')->execute();

  return $success;
}

/**
 * Load all nested (child) collectors of a collector.
 *
 * @param $collector
 *   Parent collector object.
 * @return array
 *   An array of collector objects, keyed by coll_id.
 */
function queue_runner_load_collector_children($collector) {
  $coll_ids = db_query('SELECT item_id FROM {queue_runner_rel_collector} r
    INNER JOIN {queue_runner_collector} c ON (r.item_id = c.coll_id)
    WHERE r.coll_id = :coll_id', array(':coll_id' => $collector->coll_id))->fetchCol();
  return empty($coll_ids) ? array() : queue_runner_collector_load_multiple($coll_ids);
}

/**
 * Remove (cancel) failure records associated with a given collector.
 *
 * @param int $coll_id
 *   A collection ID to remove failure records for.
 */
function _queue_runner_failures_delete($coll_id) {
  db_delete('queue_runner_failures')
    ->condition('coll_id', $coll_id)
    ->execute();
}

/**
 * Retrieves the name of the file used for monitoring the queue.
 *
 * @return string
 *   The filename.
 */
function _queue_runner_queue_monitor_file() {
  return drupal_realpath(file_default_scheme() . '://QUEUE-RUNNER-HEALTH-CHECK');
  // Same as file_directory_path() in Drupal 6.
}
