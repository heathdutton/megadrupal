<?php

/**
 * Implements hook_menu().
 */
function queue_runner_fsm_menu() {
  $items = array();
  $items['admin/config/system/queue-runner/qr-fsm'] = array(
    'title' => 'FSM test',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue_runner_fsm_test_form'),
    'access arguments' => array('administer queue runner'),
    'weight' => 100,
  );
  return $items;
}

/**
 * Form for testing putting the QueueRunnerFSMExample fsm into the queue.
 */
function queue_runner_fsm_test_form($form, &$form_state) {
  $form = array();
  $form['info'] = array(
    '#markup' => "<p>Add one QueueRunnerFSMExample collector to the queue</p>",
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  return $form;
}

/**
 * Form submit for queue_runner_fsm_test_form().
 */
function queue_runner_fsm_test_form_submit($form, &$form_state) {
  $data = array(
    'class' => 'QueueRunnerFSMExample',
    'worker' => array(
      'includes' => queue_runner_fsm_includes('QueueRunnerFSMExample'),
      'callback' => 'queue_runner_fsm_create_collector',
      'finalize' => 'queue_runner_finalize_collector_creation',
    ),
  );
  queue_runner_add($data);
  drupal_set_message(t('Added an FSM to the queue'));
}

/**
 * This is a work-around for the lack of an autoloader in Drupal 6 so we have common code.
 */
function queue_runner_fsm_includes($class) {
  static $needed = array();

  if (!isset($needed[$class])) {
    // We always need the base class.
    $needed[$class] = array();
    $include['file_extension'] = 'inc';
    $include['module'] = 'queue_runner_fsm';
    $include['file'] = 'QueueRunnerFSMBase';
    $needed[$class][] = $include;
    $needed[$class] = array_merge($needed[$class], module_invoke_all('queue_runner_fsm_includes', $class));
  }

  return $needed[$class];
}

/**
 * Implements hook_queue_runner_fsm_includes().
 */
function queue_runner_fsm_queue_runner_fsm_includes($class) {
  $includes = array(
    'QueueRunnerFSMExample' => array(
      array(
        'file_extension' => 'inc',
        'module' => 'queue_runner_fsm',
        'file' => 'QueueRunnerFSMExample',
      ),
    ),
    'QueueRunnerFSMTest' => array(
      array(
        'file_extension' => 'inc',
        'module' => 'queue_runner_fsm',
        'file' => 'tests/QueueRunnerFSMTest',
      ),
    ),
    'QueueRunnerLoopyFSMTest'  => array(
      array(
        'file_extension' => 'inc',
        'module' => 'queue_runner_fsm',
        'file' => 'tests/QueueRunnerLoopyFSMTest',
      ),
    ),
  );
  if (isset($includes[$class])) {
    return $includes[$class];
  }
}

function queue_runner_fsm_load_includes($class) {
  foreach (queue_runner_fsm_includes($class) as $include) {
    module_load_include($include['file_extension'], $include['module'], $include['file']);
  }
}

/**
 * Creates collector that uses a finite state machine.
 *
 * @param array $data
 *   The collector data array.
 *
 * @throws
 *   QueueRunnerException
 *
 * @return int
 *   The collector ID.
 */
function queue_runner_fsm_create_collector($data) {
  // Set some defaults.
  $data += array(
    'args' => array(),
  );
  // The reflection class allows passing arguments to the constructor.
  // The values in the array are mapped to constructor arguments positionally,
  // not by name, so it's like call_user_func_array().
  queue_runner_fsm_load_includes($data['class']);
  $reflection = new \ReflectionClass($data['class']);
  $data['collector']['fsm'] = $reflection->newInstanceArgs($data['args']);

  $title = isset($data['title']) ? $data['title'] : 'fsm collector ' . gmdate('c');

  $record = queue_runner_collector_create($title, $data);
  $record->queued = $record->total = $record->total = 1;
  $task = array(
    'data' => array(
      'worker' => array(
        'callback' => 'queue_runner_fsm_task_null_callback',
        'finalize' => 'queue_runner_fsm_task_finalize',
        'includes' => $data['worker']['includes'],
      )
    )
  );
  $record->data['task'] = $task;
  _queue_runner_fsm_task_create($task, $record);

  $record->status = 'started';
  $record->data['collector_finalize'] = 'queue_runner_collector_finalize';
  queue_runner_collector_update($record);
}

/**
 * Populates the task array and immediately adds it to the queue.
 *
 * @param array $task
 *   The task array to populate.
 * @param object $record
 *   The database record object for the collector.
 *
 * @return int
 *   The item ID of the task.
 */
function _queue_runner_fsm_task_create(&$task, $record) {
  $task['data']['coll_id'] = $record->coll_id;

  // Immediately enqueue this task.
  $item_id = queue_runner_add($task['data']);
  _queue_runner_collector_relate($record->coll_id, $item_id);

  return $item_id;
}

function queue_runner_fsm_task_null_callback($data) {
  return '';
}

/**
 * Handles a FSM collector task.
 *
 * When a FSM task is processed from the queue it calls this function
 * after its own worker callback has completed. This function then adds another
 * task to the queue. This loop continues until the FSM is done.
 *
 * @param array $data
 *   The data array for the sub-task.
 * @param string $result
 *   The result message of the sub-task.
 *
 * @throws
 *   QueueRunnerException
 *
 * @return int
 *   The status flag indicating that this sub-task was "done".
 */
function queue_runner_fsm_task_finalize($data, $result) {
  // Lock the collector to avoid multiple processes updating the same collector.
  $lock = 'queue_runner_collector:' . $data['coll_id'];
  _queue_runner_lock_acquire($lock, 'Failed to acquire collector lock.', $data);

  $record = queue_runner_collector_load($data['coll_id']);
  $fsm = $record->data['collector']['fsm'];
  $more_work = $fsm->transition();
  if (!empty($record->data['collector']['store_results'])) {
    // By default nested collectors store their results and pass them back.
    $output = $fsm->getTransitionOutput();
    if ($output) {
      $record->result[$data['item_id']] = $output;
    }
  }
  else {
    // Keep track of the states visited by the collector.
    $record->result[$data['item_id']] = $fsm->getCurrentState();
    // Flatten and log all results we received.
    $flattened = queue_runner_result_flatten($fsm->getTransitionOutput());
    foreach ($flattened as $row) {
      queue_runner_log($data['item_id'], $record->coll_id, $data['nid'], 'RESULT: @result', array('@result' => $row), WATCHDOG_INFO);
    }
  }

  if ($more_work) {
    $record->status = 'working';
    // We only add a single sub-task to the queue for every one completed;
    // Make a copy of it since it's passed by reference.
    $task = $record->data['task'];
    _queue_runner_fsm_task_create($task, $record);
  }
  else {
    // If there are no sub-tasks remaining, mark this collector as finished.
    $record->status = 'finished';
    $record->queued = 0;
  }

  queue_runner_collector_update($record);

  // This sub-task is now completed, so invoke the post-completion callback to
  // roll-up any results that may need to be passed back, update the progress,
  // and potentially delete any nested collectors that have fully completed.
  if (!$more_work) {
    queue_runner_collector_finalize($record);
  }

  lock_release($lock);

  return QUEUERUNNER_STATE_DONE;
}