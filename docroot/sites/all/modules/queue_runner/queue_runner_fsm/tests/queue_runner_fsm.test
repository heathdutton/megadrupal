<?php
/**
 * @file
 * Tests for queue_runner_fsm.module.
 */

class QueueRunnerFSMTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Queue Runner FSM unit tests',
      'description' => 'Tests the base functionality of the finite state machine used in queue_runner_fsm module.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner', 'queue_runner_fsm');
    queue_runner_fsm_load_includes('QueueRunnerFSMTest');
  }

  function testFSM() {
    $fsm = new QueueRunnerFSMTest();
    $fsm->transition();
    $this->assertEqual('taskTwo', $fsm->getCurrentState());
    $fsm->transition();
    $this->assertEqual('waitForTaskTwo', $fsm->getCurrentState(), 'Waiting for tastTwo to complete');
    sleep(1);
    // Do a random number of transitions, the state should remain unchanged.
    $num = rand(5, 20);
    for ($i = 0; $i <= $num; $i++) {
      $fsm->transition();
    }
    $this->assertEqual('waitForTaskTwo', $fsm->getCurrentState(), 'Still waiting for tastTwo to complete after ' . $num . ' transitions');
    sleep(1);
    // Simulate
    $fsm->simulateTaskSuccess();
    $fsm->transition();
    $this->assertEqual('taskThree', $fsm->getCurrentState());
    $more_work = $fsm->transition();
    $this->assertFalse($more_work, 'FSM is finished');
  }

  function testFSMWithFailure() {
    $fsm = new QueueRunnerFSMTest();
    $fsm->transition();
    $this->assertEqual('taskTwo', $fsm->getCurrentState());
    $fsm->transition();
    $this->assertEqual('waitForTaskTwo', $fsm->getCurrentState(), 'Waiting for tastTwo to complete');
    sleep(1);
    $fsm->simulateTaskFailure();
    $fsm->transition();
    $this->assertEqual('taskTwo', $fsm->getCurrentState(), 'Back to taskTwo after failure');
    for ($i = 0; $i < 4; $i++) {
      $fsm->transition();
      sleep(1);
    }
    $this->assertEqual('waitForTaskTwo', $fsm->getCurrentState(), 'Waiting for tastTwo to complete');
    try {
      $fsm->transition();
      $this->fail('Failed to throw an exception when maximum attempts for transition reached');
    }
    catch (Exception $e) {
      $this->pass('Threw exception when maximum transition attempts reached');
    }
  }
}

/**
 * Tests for default collectors.
 */
class QueueRunnerFSMCollectorTestCase extends DrupalWebTestCase {
  protected static $done = array();

  public static function getInfo() {
    return array(
      'name' => 'FSM Collector queue items',
      'description' => 'Test collecting the output of multiple FSM sub-tasks.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner', 'queue_runner_fsm');
    // Set the file log path to the public files directory so it gets cleaned up
    // during tearDown.
    $temporary_directory = variable_get('file_public_path', conf_path() . '/files') . '/tmp/queue_runner';
    variable_set('queue_runner_log_path', $temporary_directory);
  }

  function testFSMCollector() {
    $data = array(
      'class' => 'QueueRunnerFSMTest',
      'args' => array('done'),
      'worker' => array(
        'includes' => queue_runner_fsm_includes('QueueRunnerFSMTest'),
        'callback' => 'queue_runner_fsm_create_collector',
        'finalize' => 'queue_runner_finalize_collector_creation',
      ),
    );
    $item_id = queue_runner_add($data);
    $queue = queue_runner_queue();
    $this->assertEqual(1, $queue->numberOfItems(), 'only the collector task in the queue');
    queue_runner_do(1);
    $this->assertEqual(1, $queue->numberOfItems(), '1 sub-task in the queue');
    $this->assertTrue(queue_runner_collector_exists($item_id), 'A colelctor with the expected ID was created');
    $coll_id = $item_id;
    $record = queue_runner_collector_load($coll_id);
    $fsm = $record->data['collector']['fsm'];
    $this->assertEqual('start', $fsm->getCurrentState());
    $states = array('taskTwo' => 0, 'waitForTaskTwo' => 1, 'taskThree' => 0, 'finish' => 0);
    foreach ($states as $name => $wait) {
     // We go directly to taskTwo without seeing taskOne since
     // that's the real entry point (frist state) and we get there
     // immediately from 'start' without doing a loop through the queue.
     queue_runner_do(1);
      if ($wait) {
        sleep($wait);
      }
    }
    $record = queue_runner_collector_load($coll_id);
    $fsm = $record->data['collector']['fsm'];
    $more_work = $fsm->transition();
    $this->assertFalse($more_work, 'FSM is finished');
    $this->assertEqual(count($states), count($record->result));
    foreach ($record->result as $visited_state) {
      $this->assertTrue(isset($states[$visited_state]));
    }
  }
}

/**
 * Tests for default collectors.
 */
class QueueRunnerNestedFSMCollectorTestCase extends DrupalWebTestCase {
  protected static $done = array();

  public static function getInfo() {
    return array(
      'name' => 'Nested FSM Collector queue items',
      'description' => 'Test collecting the output of multiple FSM sub-tasks.',
      'group' => 'Queue Runner',
    );
  }

  function setUp() {
    parent::setUp('queue_runner', 'queue_runner_fsm');
    // Set the file log path to the public files directory so it gets cleaned up
    // during tearDown.
    $temporary_directory = variable_get('file_public_path', conf_path() . '/files') . '/tmp/queue_runner';
    variable_set('queue_runner_log_path', $temporary_directory);
  }

  function testParallelNestedtFSMCollector() {
    $num_nested = 4;
    $item_id = $this->nestedFSMCollectorCreationHelper($num_nested);
    $queue = queue_runner_queue();
    // Do the parent collector.
    queue_runner_do(1);
    $this->assertEqual($num_nested, $queue->numberOfItems(), 'only the nested collector tasks in the queue');
    do {
      $processed = queue_runner_do(1);
    } while ($processed);
    // The top-level collector should be in the database.
    $record = queue_runner_collector_load($item_id);
    $this->assertEqual($num_nested, count($record->result), "Every nested collector passed back a result");
  }

  function testParallelLoopyFSMCollector() {
    $num_nested = 2;
    $desired_value = rand(0, 10);
    $item_id = $this->nestedFSMCollectorCreationHelper($num_nested, 'parallel', 'QueueRunnerLoopyFSMTest', array($desired_value));
    $queue = queue_runner_queue();
    // Do the parent collector.
    queue_runner_do(1);
    $this->assertEqual($num_nested, $queue->numberOfItems(), 'only the nested collector tasks in the queue');
    do {
      $processed = queue_runner_do(1);
    } while ($processed);
    // The top-level collector should be in the database.
    $record = queue_runner_collector_load($item_id);
    $this->assertEqual($num_nested, count($record->result));//, "Every nested collector passed back a result"
    $first_nested_result = $flattened = queue_runner_result_flatten(current($record->result));
    // We shoudl have visited 2 states plus 2* the desired value.
    $expected = 2 + 2 * $desired_value;
    $this->assertEqual(count($first_nested_result), $expected, "Found $expected results");
  }

  protected function nestedFSMCollectorCreationHelper($num_nested, $collector_type = 'parallel', $class = 'QueueRunnerFSMTest', $args = array('done')) {
    // Nest multiple collectors and check that the top-most one gets
    // all the results.
    $nested_collector_data = array(
      'class' => $class,
      'args' => $args,
      'worker' => array(
        'includes' => queue_runner_fsm_includes($class),
        'callback' => 'queue_runner_fsm_create_collector',
        'finalize' => 'queue_runner_finalize_collector_creation',
        'collector_passback' => "queue_runner_{$collector_type}_subtask_finalize",
      ),
    );
    $data = array();
    // For test purposes, aggregate the top-level collector into the database.
    $data['collector']['store_results'] = TRUE;
    $data['title'] = 'TOP LEVEL COLLECTOR';
    $data['subtasks'] = array();
    $num = 1;
    for ($i = 1; $i <= $num_nested; $i++) {
      $nested_collector = array();
      $nested_collector['data'] = $nested_collector_data;
      $nested_collector['data']['title'] = "NESTED FSM COLLECTOR $i";
      $data['subtasks'][] = $nested_collector;
    }
    $item_id = queue_runner_add($data, $collector_type . '_collector');
    $queue = queue_runner_queue();
    $this->assertEqual(1, $queue->numberOfItems(), 'only the collector task in the queue');
    return $item_id;
  }
}