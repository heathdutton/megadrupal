<?php
/**
 * @file
 * save_redirect.module file.
 */

/**
 * Implements hook_help().
 */
function save_redirect_on_delete_help($path, $arg) {
  switch ($path) {
    case 'admin/help#save_redirect':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a mechanism to automatically generate
        redirects after url alias deletion') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function save_redirect_on_delete_permission() {
  return array(
    'administer save_redirect_on_delete module' => array(
      'title' => t('Administer save_redirect module'),
      'description' => t('Administration tasks for save_redirect module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function save_redirect_on_delete_menu() {
  $items = array();
  $items['admin/config/search/redirect/delete-patterns'] = array(
    'title' => 'Redirect pattern after URL delete',
    'description' => 'Redirect users from deleted URL to another.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('save_redirect_on_delete_pattern'),
    'access arguments' => array('administer save_redirect_on_delete'),
    'file' => 'save_redirect_on_delete.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Gives path value for the deleted entity.
 *
 * @param array $path
 *   Path whose redirect pattern to be fetched.
 *
 * @return string
 *   Redirect Pattern.
 */
function save_redirect_on_delete_path_pattern($path) {
  $entity = explode('/', $path['source']);
  $entity_type = $entity[0];
  $full_entity  = new stdClass();
  switch ($entity_type) {
    case 'node':
      $entity_id = $entity[1];
      $full_entity = node_load($entity_id);
      $variable = 'redirect_' . $entity_type . '_' . $full_entity->type . '_delete_pattern';
      break;

    case 'taxonomy':
      $entity_id = $entity[2];
      $entity_type = 'taxonomy_term';
      $full_entity = taxonomy_term_load($entity_id);
      $variable = 'redirect_taxonomy_term_' . $full_entity->vocabulary_machine_name . '_delete_pattern';
      break;

    case 'user':
      $variable = 'redirect_user_delete_pattern';
      break;

  }
  $path_token = variable_get($variable);
  if (empty($path_token)) {
    $variable = 'redirect_' . $entity_type . '_delete_pattern';
    $path_token = variable_get($variable);
  }
  $path_value = token_replace($path_token, array($entity_type => $full_entity));
  return $path_value;
}

/**
 * Get Soruce and destination for a redirect.
 *
 * @param array $path
 *   Path of Entity going to delete.
 */
function save_redirect_on_delete_save_entity_redirect($path) {
  // Get alias for entity.
  $alias = save_redirect_on_delete_give_alias($path);
  // If Alias is empty then return.
  if (empty($alias)) {
    return;
  }

  // Get the Destination for the deleted url.
  $dest_value = save_redirect_on_delete_path_pattern($path);

  // Save Redirect.
  save_redirect_on_delete_save_redirect($alias, $dest_value);
}

/**
 * Give the destination path of deleted url.
 *
 * @param unknown $path
 *   Path of Entity going to delete.
 *
 * @return string
 *   Return URL alias.
 */
function save_redirect_on_delete_give_alias($path) {
  $alias = drupal_lookup_path('alias', $path['source']);
  if (empty($alias)) {
    $alias = $path['alias'];
  }
  return $alias;
}

/**
 * Saving redirect.
 *
 * @param unknown $source
 *   Source URL.
 * @param unknown $dest
 *   Destination URL.
 */
function save_redirect_on_delete_save_redirect($source, $dest) {
  // If redirect already exists then do not create a redirect.
  $is_redirect_exists = redirect_load_by_source($source);
  if (!empty($is_redirect_exists)) {
    return;
  }
  // If Destination is empty then return.
  if (empty($dest)) {
    return;
  }
  $arg = array(
    'source' => $source,
    'source_options' => array(),
    'redirect' => $dest,
    'redirect_options' => array(),
    'language' => LANGUAGE_NONE,
  );
  $redirect = new stdClass();
  module_invoke('redirect', 'object_prepare', $redirect, $arg);
  module_invoke('redirect', 'save', $redirect);
}

/**
 * If url alias has a redirect, then delete the redirect.
 *
 * Implements hook_node_insert().
 */
function save_redirect_on_delete_pathauto_alias_alter(&$alias) {
  // Checks Wheather redirect exists.
  $redirect = save_redirect_on_delete_is_redirect_exists($alias);
  if (!empty($redirect)) {
    // Deleting Redirect.
    redirect_delete_multiple(array($redirect->rid));
  }
}

/**
 * Checks wheather redirect exists or not, if exists return loaded redirect.
 *
 * @param unknown $alias
 *   Alias for which redirect is to be checked.
 *
 * @return string
 *   Loaded redirect.
 */
function save_redirect_on_delete_is_redirect_exists($alias) {
  if (!empty($alias)) {
    $redirect = redirect_load_by_source($alias);
    if (!empty($redirect)) {
      return $redirect;
    }
  }
}

/**
 * When an entity is deleted, save its redirect.
 *
 * Implements hook_path_delete().
 */
function save_redirect_on_delete_path_delete($path) {
  save_redirect_on_delete_save_entity_redirect($path);
}
