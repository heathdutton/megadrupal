<?php

/**
 * @file
 * Implementaion for hooks and functions for
 * the civicrm_reference_fields module.
 */

/**
 * Implements hook_menu().
 */
function civicrm_reference_fields_menu() {
  $items = array();
  $items['civicrm_reference_fields/autocomplete/%/%/%/%'] = array(
    'page callback' => 'civicrm_reference_fields_autocomplete_value',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => 'civicrm_reference_fields_autocomplete_access',
    'access arguments' => array(2, 3, 4, 5),
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function civicrm_reference_fields_field_info() {
  return array(
    'civicrm_reference_fields_contribution' => array(
      'label' => t('CiviCRM Contribution Pages'),
      'description' => t('Reference a CiviCRM Contribution Pages.'),
      'default_widget' => 'options_select',
      'default_formatter' => 'civicrm_reference_fields_link',
    ),
    'civicrm_reference_fields_event' => array(
      'label' => t('CiviCRM Event Info Pages'),
      'description' => t('Reference a CiviCRM Event Info Pages.'),
      'default_widget' => 'options_select',
      'default_formatter' => 'civicrm_reference_fields_link',
    ),
    'civicrm_reference_fields_pcp' => array(
      'label' => t('CiviCRM Personal Campaign Pages'),
      'description' => t('Reference a CiviCRM Personal Campaign Pages.'),
      'default_widget' => 'options_select',
      'default_formatter' => 'civicrm_reference_fields_link',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function civicrm_reference_fields_field_widget_info() {
  return array(
    'civicrm_reference_fields_autocomplete_contribution' => array(
      'label' => t('Autocomplete text field'),
      'field types' => array('civicrm_reference_fields_contribution'),
      'settings' => array(
        'size' => 100,
        'autocomplete_path' => 'civicrm_reference_fields/autocomplete/contribution',
      ),
    ),
    'civicrm_reference_fields_autocomplete_event' => array(
      'label' => t('Autocomplete text field'),
      'field types' => array('civicrm_reference_fields_event'),
      'settings' => array(
        'size' => 100,
        'autocomplete_path' => 'civicrm_reference_fields/autocomplete/event',
      ),
    ),
    'civicrm_reference_fields_autocomplete_pcp' => array(
      'label' => t('Autocomplete text field'),
      'field types' => array('civicrm_reference_fields_pcp'),
      'settings' => array(
        'size' => 100,
        'autocomplete_path' => 'civicrm_reference_fields/autocomplete/pcp',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function civicrm_reference_fields_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'civicrm_reference_fields_contribution';
  $info['options_select']['field types'][] = 'civicrm_reference_fields_event';
  $info['options_select']['field types'][] = 'civicrm_reference_fields_pcp';
  $info['options_buttons']['field types'][] = 'civicrm_reference_fields_contribution';
  $info['options_buttons']['field types'][] = 'civicrm_reference_fields_event';
  $info['options_buttons']['field types'][] = 'civicrm_reference_fields_pcp';
}

/**
 * Implements hook_options_list().
 */
function civicrm_reference_fields_options_list($field) {
  $function = !empty($field['settings']['options_list_callback']) ? $field['settings']['options_list_callback'] : 'civicrm_reference_fields_allowed_values';
  return $function($field);
}

/**
 * Implements hook_field_is_empty().
 */
function civicrm_reference_fields_field_is_empty($item, $field) {
  return empty($item['civicrm_reference_id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function civicrm_reference_fields_field_formatter_info() {
  return array(
    'civicrm_reference_fields_link' => array(
      'label' => t('Title (link)'),
      'field types' => array(
        'civicrm_reference_fields_contribution',
        'civicrm_reference_fields_event',
        'civicrm_reference_fields_pcp',
      ),
    ),
    'civicrm_reference_fields_plain' => array(
      'label' => t('Title (plain)'),
      'field types' => array(
        'civicrm_reference_fields_contribution',
        'civicrm_reference_fields_event',
        'civicrm_reference_fields_pcp',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function civicrm_reference_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if (!($values = _civicrm_reference_fields_get_details($items, $field))) {
    return $element;
  }
  $field_type = _civicrm_reference_fields_get_type($field);
  $field_id   = 'civicrm_reference_id';

  switch ($display['type']) {
    case 'civicrm_reference_fields_link':
      $path = '';
      if ($field_type == 'contribution') {
        $path = 'civicrm/contribute/transact';
      }
      elseif ($field_type == 'event') {
        $path = 'civicrm/event/info';
      }
      elseif ($field_type == 'pcp') {
        $path = "civicrm/contribute/pcp/info";
      }
      foreach ($items as $delta => $item) {
        if (!empty($item[$field_id]) &&  isset($values[$item[$field_id]])) {
          $item_details = $values[$item[$field_id]];
          $query_args = array(
            'query' => array(
              'reset' => 1,
              'id' => $item_details['id'],
            ),
          );
          $element[$delta] = array(
            '#markup' => l($item_details['title'], $path, $query_args),
          );
        }
      }
      break;

    case 'civicrm_reference_fields_plain':
      foreach ($items as $delta => $item) {
        if (!empty($item[$field_id]) && isset($values[$item[$field_id]])) {
          $element[$delta] = array(
            '#markup' => $values[$item[$field_id]]['title'],
          );
        }
      }
      break;

  }
  return $element;
}

/**
 * Returns the set of allowed values for the field.
 *
 * @param array $field
 *   The field definition.
 *
 * @return array
 *   The array of valid field values,
 *   Contribution/Event/PCP pages.
 */
function civicrm_reference_fields_allowed_values($field) {
  $type = _civicrm_reference_fields_get_type($field);
  $where  = array();
  $date_filters = array('allowed_start_date' => 'start_date', 'allowed_end_date' => 'end_date');

  foreach ($date_filters as $filter => $column) {
    if (!isset($field['settings'][$filter])) {
      continue;
    }
    if ($field['settings'][$filter] == 'before') {
      $where[$column] = array(
        'value' => date('Ymd') . '000000',
        'type' => 'String',
        'op' => '<',
        'isnull' => TRUE,
      );
    }
    elseif ($field['settings'][$filter] == 'after') {
      $where[$column] = array(
        'value' => date('Ymd') . '000000',
        'type' => 'String',
        'op' => '>=',
        'isnull' => TRUE,
      );
    }
  }

  $function = '_civicrm_reference_fields_get_values_' . $type;
  $references = $function(NULL, NULL, $where);

  $options = array();
  foreach ($references as $key => $value) {
    $options[$key] = html_entity_decode(strip_tags($value['title']));
  }
  return $options;
}

/**
 * Helper function to return CiviCRM contribution pages.
 *
 * This function builds a query that will retrieve the data
 * related to contribution pages from external DAO source
 * (CiviCRM Database).
 *
 * @param array $ids
 *   Contribution page ids
 * @param string $title
 *   Contribution page title
 * @param array $extra_where
 *   Extra where conditions to filter contribution pages
 * @param int $limit
 *   Number of contribution pages to be return at once
 *
 * @return array
 *   Array of contribution pages.
 *
 * @see _civicrm_reference_fields_get_details()
 * @see _civicrm_reference_fields_find_references()
 * @see _civicrm_reference_fields_allowed_values()
 */
function _civicrm_reference_fields_get_values_contribution($ids = array(), $title = '', $extra_where = array(), $limit = 25) {
  $references = array();
  if (!civicrm_initialize()) {
    return $references;
  }

  $params = array();
  $query = "SELECT id, title FROM civicrm_contribution_page WHERE is_active = 1 ";
  if (!empty($ids)) {
    $query .= "AND id IN (" . implode(',', $ids) . ')';
  }
  if ($title) {
    $query .= "AND title LIKE %1";
    $params[1] = array($title, 'String');
  }

  $where = array();
  _civicrm_reference_fields_build_extra_where($extra_where, $where, $params);

  if (!empty($where)) {
    $query .= ' AND ' . implode(' AND ', $where);
  }
  $query .= " ORDER BY start_date, title";
  if ($limit) {
    $query .= " LIMIT 0, $limit";
  }

  $pages = CRM_Core_DAO::executeQuery($query, $params);
  while ($pages->fetch()) {
    $references[$pages->id] = array(
      'id' => $pages->id,
      'title' => $pages->title,
      'rendered' => $pages->title . ' [id:' . $pages->id . ']',
    );
  }
  return $references;
}

/**
 * Helper function to return CiviCRM event pages.
 *
 * This function builds a query that will retrieve the data
 * related to event pages from external DAO source
 * (CiviCRM Database).
 *
 * @param array $ids
 *   Event page ids
 * @param string $title
 *   Event page title
 * @param array $extra_where
 *   Extra where conditions to filter event pages
 * @param int $limit
 *   Number of event pages to be return at once
 *
 * @return array
 *   Array of event pages.
 *
 * @see _civicrm_reference_fields_get_details()
 * @see _civicrm_reference_fields_find_references()
 * @see _civicrm_reference_fields_allowed_values()
 */
function _civicrm_reference_fields_get_values_event($ids = array(), $title = '', $extra_where = array(), $limit = 25) {
  $references = array();
  if (!civicrm_initialize()) {
    return $references;
  }

  $params = array();
  $query = "SELECT id, title FROM civicrm_event WHERE ( civicrm_event.is_template IS NULL OR civicrm_event.is_template = 0 ) AND is_active = 1 ";

  if (!empty($ids)) {
    $query .= "AND id IN (" . implode(',', $ids) . ')';
  }

  if ($title) {
    $query .= "AND title LIKE %1";
    $params[1] = array($title, 'String');
  }

  $where = array();
  _civicrm_reference_fields_build_extra_where($extra_where, $where, $params);

  if (!empty($where)) {
    $query .= ' AND ' . implode(' AND ', $where);
  }

  if ($limit) {
    $query .= " LIMIT 0, $limit";
  }

  $pages = CRM_Core_DAO::executeQuery($query, $params);
  while ($pages->fetch()) {
    $references[$pages->id] = array(
      'id' => $pages->id,
      'title' => $pages->title,
      'rendered' => $pages->title . ' [id:' . $pages->id . ']',
    );
  }
  return $references;
}

/**
 * Helper function to return CiviCRM pcp pages.
 *
 * This function builds a query that will retrieve the data
 * related to pcp pages from external DAO source
 * (CiviCRM Database).
 *
 * @param array $ids
 *   PCP page ids
 * @param string $title
 *   PCP page title
 * @param array $extra_where
 *   Extra where conditions to filter pcp pages
 * @param int $limit
 *   Number of pcp pages to be return at once
 *
 * @return array
 *   Array of pcp pages
 *
 * @see _civicrm_reference_fields_get_details()
 * @see _civicrm_reference_fields_find_references()
 * @see _civicrm_reference_fields_allowed_values()
 */
function _civicrm_reference_fields_get_values_pcp($ids = array(), $title = '', $extra_where = array(), $limit = 25) {
  $references = array();
  if (!civicrm_initialize()) {
    return $references;
  }

  $params = array();
  $query = "SELECT id, title FROM civicrm_pcp WHERE is_active = 1 ";
  if (!empty($ids)) {
    $query .= "AND id IN (" . implode(',', $ids) . ')';
  }

  if ($title) {
    $query .= "AND title LIKE %1";
    $params[1] = array($title, 'String');
  }

  $where = array();
  _civicrm_reference_fields_build_extra_where($extra_where, $where, $params);

  if (!empty($where)) {
    $query .= ' AND ' . implode(' AND ', $where);
  }

  $query .= " ORDER BY title";
  if ($limit) {
    $query .= " LIMIT 0, $limit";
  }

  $pages = CRM_Core_DAO::executeQuery($query, $params);
  while ($pages->fetch()) {
    $references[$pages->id] = array(
      'id'  => $pages->id,
      'title' => $pages->title,
      'rendered' => $pages->title . ' [id:' . $pages->id . ']',
    );
  }
  return $references;
}

/**
 * Returns the type of the field, eg Event/Contribution/PCP.
 *
 * @param array $field
 *   The field definition.
 *
 * @return string
 *   Type of the field
 */
function _civicrm_reference_fields_get_type($field) {
  return drupal_substr($field['type'], 25);
}

/**
 * Implements hook_field_widget_form().
 */
function civicrm_reference_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  static $default_values;

  $field_name = $field['field_name'];
  if (is_null($default_values) || !isset($default_values[$field_name])) {
    $default_values[$field_name] = _civicrm_reference_fields_get_details($items, $field);
  }

  $default_value = NULL;
  if (!empty($items[$delta]['civicrm_reference_id']) && ($ref_id = $items[$delta]['civicrm_reference_id']) && isset($default_values[$field_name][$ref_id])) {
    $default_value = $default_values[$field_name][$ref_id]['rendered'];
  }

  $element += array(
    '#type' => 'textfield',
    '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . $field['field_name'],
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => 1024,
    '#default_value' => $default_value,
    '#element_validate' => array('civicrm_reference_fields_autocomplete_validate'),
  );

  return array('civicrm_reference_id' => $element);
}

/**
 * Implements hook_field_widget_error().
 */
function civicrm_reference_fields_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_settings_form().
 */
function civicrm_reference_fields_field_settings_form($field, $instance, $has_data) {
  $type = _civicrm_reference_fields_get_type($field);
  $form = array();

  if (!in_array($type, array('event', 'contribution'))) {
    return $form;
  }

  $settings = $field['settings'];

  $options = array(
    '' => t('none'),
    'before' => t('Prior to current date'),
    'after' => t('current date or later than current date'),
  );
  $form['allowed_start_date'] = array(
    '#type' => 'radios',
    '#title' => ($type == 'event') ? t('CiviCRM Event Start date is') : t('CiviCRM Contribution Start date is'),
    '#default_value' => isset($settings['allowed_start_date']) ? $settings['allowed_start_date'] : '',
    '#options' => $options,
    '#weight' => 1,
  );
  $form['allowed_end_date'] = array(
    '#type' => 'radios',
    '#title' => ($type == 'event') ? t('CiviCRM Event End date is') : t('CiviCRM Contribution End date is'),
    '#default_value' => isset($settings['allowed_end_date']) ? $settings['allowed_end_date'] : '',
    '#options' => $options,
    '#weight' => 2,
  );

  return $form;
}

/**
 * Form element validate handler for autocomplete element.
 *
 * @param array $element
 *   The field element
 * @param array $form_state
 *   Form values
 */
function civicrm_reference_fields_autocomplete_validate($element, &$form_state) {
  $field = field_info_field($element['#field_name']);
  $type  = _civicrm_reference_fields_get_type($field);
  $value = $element['#value'];

  $id = NULL;
  if (!empty($value)) {
    preg_match('/^(?:\s*|(.*) )?\[\s*id\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit [cid:n].
      $id = $matches[2];
    }
    else {
      // No explicit cid.
      $ids = _civicrm_reference_fields_find_references($type, $field, $value, TRUE);
      if (empty($ids)) {
        form_error($element, t('%name: found no valid post with that title.', array('%name' => $element['#title'])));
      }
      else {
        $id = array_shift(array_keys($ids));
      }
    }
  }
  form_set_value($element, $id, $form_state);
}

/**
 * Function to provide values for autocomplete element.
 *
 * @param string $type
 *   Reference field type.
 * @param string $entity_type
 *   Type the entity.
 * @param string $bundle
 *   Entity bundle.
 * @param string $field_name
 *   The name of the field.
 * @param string $string
 *   Entered string.
 *
 * @return array
 *   Values for autocomplete element.
 */
function civicrm_reference_fields_autocomplete_value($type, $entity_type, $bundle, $field_name, $string = '') {
  if (!civicrm_initialize()) {
    return;
  }

  $field   = field_info_field($field_name);
  $matches = array();

  $references = _civicrm_reference_fields_find_references(arg(2), $field, $string);
  foreach ($references as $id => $row) {
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['rendered']] = '<div class="civicrm_reference-fields-autocomplete">' . $row['title'] . '</div>';
  }
  drupal_json_output($matches);
}

/**
 * Provide the details for the field item values.
 *
 * @param array $items
 *   Array of field items
 * @param array $field
 *   Definition of the field
 *
 * @return array
 *   Details for the item values
 *
 * @see civicrm_reference_fields_field_formatter_view()
 * @see civicrm_reference_fields_field_widget_form()
 */
function _civicrm_reference_fields_get_details($items, $field) {
  if (empty($items)) {
    return NULL;
  }

  $field_type = _civicrm_reference_fields_get_type($field);
  $field_id = 'civicrm_reference_id';
  $ids = array();
  foreach ($items as $delta => $item) {
    if (isset($item[$field_id]) && is_numeric($item[$field_id])) {
      $ids[] = $item[$field_id];
    }
  }
  if (empty($ids)) {
    return NULL;
  }

  $function = '_civicrm_reference_fields_get_values_' . $field_type;
  $values = $function($ids, NULL);

  if (empty($values)) {
    return NULL;
  }

  return $values;
}

/**
 * Helper function to search values for autocomplete element.
 *
 * @param string $type
 *   Type of the field
 * @param array $field
 *   Definition of the field
 * @param array $string
 *   String to be search
 * @param boolean $match_exact
 *   Find exact match of the string?
 * @param int $limit
 *   Max number of values to be return
 *
 * @return array
 *   Searched values
 *
 * @see civicrm_reference_fields_autocomplete_value()
 */
function _civicrm_reference_fields_find_references($type, $field, $string, $match_exact = FALSE, $limit = 10) {
  $references = array();
  $ref_types  = _civicrm_reference_fields_available_types();

  if (!in_array($type, array_keys($ref_types))) {
    return $references;
  }

  $string = trim($string);
  if (!$match_exact) {
    $string = "%{$string}%";
  }

  $where        = array();
  $date_filters = array('allowed_start_date' => 'start_date', 'allowed_end_date' => 'end_date');
  foreach ($date_filters as $filter => $column) {
    if (!isset($field['settings'][$filter])) {
      continue;
    }
    if ($field['settings'][$filter] == 'before') {
      $where[$column] = array(
        'value' => date('Ymd') . '000000',
        'type' => 'String',
        'op' => '<',
        'isnull' => TRUE,
      );
    }
    elseif ($field['settings'][$filter] == 'after') {
      $where[$column] = array(
        'value' => date('Ymd') . '000000',
        'type' => 'String',
        'op' => '>=',
        'isnull' => TRUE,
      );
    }
  }

  $function = '_civicrm_reference_fields_get_values_' . $type;
  return $function(NULL, trim($string), $where, $limit);
}

/**
 * Helper to provide supported field type.
 */
function _civicrm_reference_fields_available_types() {
  return array(
    'event' => t('CiviCRM Event Page(s)'),
    'contribution' => t('CiviCRM Contribution Page(s)'),
    'pcp' => t('CiviCRM Personal Campaign Page(s)'),
  );
}

/**
 * Helper function to build where conditions to search values for the element.
 *
 * @param array $extra_where
 *   Array of where conditions
 * @param array $where
 *   Container element to strore where clauses
 * @param array $params
 *   Container element to store parameter values
 *   required for queries.
 *
 * @see _civicrm_reference_fields_get_values_pcp()
 * @see _civicrm_reference_fields_get_values_event()
 * @see _civicrm_reference_fields_get_values_contribution()
 */
function _civicrm_reference_fields_build_extra_where($extra_where, &$where, &$params) {
  if (empty($extra_where)) {
    return;
  }
  $count = 2;
  foreach ($extra_where as $field => $details) {
    if (empty($details) || empty($details['value'])) {
      continue;
    }
    $type = empty($details['type']) ? 'String' : $details['type'];
    $op = empty($details['op']) ? '=' : $details['op'];
    $where[$count] = "{$field} {$op} %{$count}";
    $params[$count] = array($details['value'], $type);
    if (isset($details['isnull']) && $details['isnull']) {
      $where[$count] = "(" . $where[$count] . " OR {$field} IS NULL)";
    }
    $count++;
  }
}

/**
 * Menu access callback for reference autocomplete paths.
 *
 * Check for both 'edit' and 'view' access in the unlikely event
 * a user has edit but not view access.
 */
function civicrm_reference_fields_autocomplete_access($type, $entity_type, $bundle, $field_name) {
  return user_access('access content')
    && ($field = field_info_field($field_name))
    && field_info_instance($entity_type, $field_name, $bundle)
    && field_access('view', $field, $entity_type)
    && field_access('edit', $field, $entity_type);
}
