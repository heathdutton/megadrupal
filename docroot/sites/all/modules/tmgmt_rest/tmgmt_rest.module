<?php

/**
 * @file
 * Module file of the translation management REST module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_rest_tmgmt_translator_plugin_info() {
  return array(
    'rest' => array(
      'label' => t('REST translator'),
      'description' => t('REST service translator that exports and imports XLIFF data.'),
      'plugin controller class' => 'TMGMTRestTranslatorPluginController',
      'ui controller class' => 'TMGMTRestTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_rest_menu() {
  $items = array();
  $items['translation/api/rest'] = array(
    'page callback' => 'tmgmt_rest_rest_api',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Helper function: Handle REST api requests.
 */
function tmgmt_rest_rest_api() {
  // Authenticate the job first.
  $job = (isset($_POST['jobid']) && !empty($_POST['jobid'])) ? tmgmt_job_load($_POST['jobid']) : FALSE;
  if (!$job) {
    header('HTTP/1.1 401 Not Authorized');
    drupal_exit();
  }

  // Set defaults for neccesary post data.
  $_POST['timestamp'] = (isset($_POST['timestamp'])) ? $_POST['timestamp'] : FALSE;
  $_POST['xlf'] = (isset($_POST['xlf'])) ? $_POST['xlf'] : FALSE;

  // Fetch Authorization header.
  $external_signature = (isset($_SERVER['HTTP_AUTHORIZATION']) && !empty($_SERVER['HTTP_AUTHORIZATION'])) ? $_SERVER['HTTP_AUTHORIZATION'] : FALSE;

  // Calculate the internal signature.
  $auth_string = $_POST['timestamp'] . '|' . $job->tjid . '|' . $_POST['xlf'];
  $internal_signature = base64_encode(hash_hmac('sha256', (string) $auth_string, (string) $job->getSetting('app_secret'), TRUE));

  drupal_alter('tmgmt_rest_api_request', $_POST, $internal_signature, $job);

  // Authenticate the signature.
  if ($internal_signature != $external_signature) {
    header('HTTP/1.1 401 Not Authorized');
    drupal_exit();
  }
  // Validate the request is a post.
  if ($_SERVER['REQUEST_METHOD'] != 'POST') {
    header('HTTP/1.1 405 Method Not Allowed');
    drupal_exit();
  }
  // Request timestamp is only valid for 5 minutes.
  if ($_POST['timestamp'] && $_POST['timestamp'] < (time() - 300)) {
    header('HTTP/1.1 408 Request Timeout');
    drupal_exit();
  }

  // Set user to job user.
  global $user;
  $user = user_load($job->uid);

  // Ensure we have the file uploaded (needed for validateImport).
  $tmp_filepath = 'temporary://tmgmt_job_' . $job->tjid . '.xlf';
  if ($filepath = file_unmanaged_save_data($_POST['xlf'], $tmp_filepath)) {
    $controller = tmgmt_file_format_controller($job->getSetting('export_format'));
    if ($controller) {
      // Validate the file.
      $validated_job = $controller->validateImport($filepath);
      if (!$validated_job) {
        $job->addMessage('Failed to validate file, import aborted.', array(), 'error');
        // Delete tmp file.
        file_unmanaged_delete($filepath);
        // Return HTTP response code.
        header('HTTP/1.1 400 Bad Request');
        drupal_exit();
      }
      elseif ($validated_job->tjid != $job->tjid) {
        $uri = $validated_job->uri();
        $label = $validated_job->label();
        $job->addMessage('Import file is from job <a href="@url">@label</a>, import aborted.', array('@url' => url($uri['path']), '@label' => $label));
        // Delete tmp file.
        file_unmanaged_delete($filepath);
        // Return HTTP response code.
        header('HTTP/1.1 400 Bad Request');
        drupal_exit();
      }
      else {
        try {
          // Validation successful, start import.
          $job->addTranslatedData($controller->import($filepath));
          $job->addMessage('Successfully imported file.');
          // Delete tmp file.
          file_unmanaged_delete($filepath);
          // Return HTTP response code.
          header('HTTP/1.1 200 OK');
          drupal_exit();
        }
        catch (Exception $e) {
          $job->addMessage('File import failed with the following message: @message', array('@message' => $e->getMessage()), 'error');
          // Delete tmp file.
          file_unmanaged_delete($filepath);
          // Return HTTP response code.
          header('HTTP/1.1 500 Internal error');
          drupal_exit();
        }
      }
    }
  }
}
