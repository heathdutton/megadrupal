<?php
/**
 * @file
 * Hook implementations for the Menu Language Filter module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_language_filter_form_menu_overview_form_alter(&$form, &$form_state) {
  $form = menu_language_filter_filter_form($form, $form_state);
}

/**
 * Implements hook_theme_registry_alter().
 */
function menu_language_filter_theme_registry_alter(&$theme_registry) {

  // Override 'menu_overview_form' theme.
  $theme_registry['menu_overview_form']['file']       = basename(__FILE__);
  $theme_registry['menu_overview_form']['theme path'] = drupal_get_path('module', 'menu_language_filter');
  $theme_registry['menu_overview_form']['function']   = 'theme_menu_language_filter_menu_overview_form';
  $theme_registry['menu_overview_form']['includes']   = array();
}

/**
 * Returns HTML for the menu overview form into a table.
 *
 * Taken directly from modules/menu.admin.inc:theme_menu_overview_form().
 */
function theme_menu_language_filter_menu_overview_form($variables) {
  $languages = language_list();

  $form = $variables['form'];

  drupal_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE, MENU_MAX_DEPTH - 1);
  drupal_add_tabledrag('menu-overview', 'order', 'sibling', 'menu-weight');

  $header = array(
    t('Menu link'),
    array('data' => t('Enabled'), 'class' => array('checkbox')),
    t('Weight'),
    t('Language'),
    array('data' => t('Operations'), 'colspan' => '3'),
  );

  $rows = array();
  foreach (element_children($form) as $mlid) {
    if (isset($form[$mlid]['hidden'])) {
      $element = &$form[$mlid];
      // Build a list of operations.
      $operations = array();
      foreach (element_children($element['operations']) as $op) {
        $operations[] = array('data' => drupal_render($element['operations'][$op]), 'class' => array('menu-operations'));
      }
      while (count($operations) < 2) {
        $operations[] = '';
      }

      // Add special classes to be used for tabledrag.js.
      $element['plid']['#attributes']['class'] = array('menu-plid');
      $element['mlid']['#attributes']['class'] = array('menu-mlid');
      $element['weight']['#attributes']['class'] = array('menu-weight');

      // Change the parent field to a hidden. This allows any value but hides
      // the field.
      $element['plid']['#type'] = 'hidden';

      // Hide rows that do not match the language we are filtering on.
      if (isset($_SESSION['menu_language_filter']['filtered_language']) && isset($element['#item']['language'])) {
        if ($element['#item']['language'] != LANGUAGE_NONE && $element['#item']['language'] != $_SESSION['menu_language_filter']['filtered_language']) {
          $element['#attributes']['class'][] = 'menu_filter_hidden';
        }
      }

      // If the parent item is hidden, hide all children.
      if (isset($element['plid']['#default_value']) && !empty($element['plid']['#default_value'])) {
        if (in_array('menu_filter_hidden', $form['mlid:' . $element['plid']['#default_value']]['#attributes']['class'])) {
          $element['#attributes']['class'][] = 'menu_filter_hidden';
        }
      }

      $row = array();
      $row[] = theme('indentation', array('size' => $element['#item']['depth'] - 1)) . drupal_render($element['title']);
      $row[] = array(
        'data'  => drupal_render($element['hidden']),
        'class' => array('checkbox', 'menu-enabled'),
      );
      $row[] = drupal_render($element['weight']) . drupal_render($element['plid']) . drupal_render($element['mlid']);
      $row[] = ($element['#item']['language'] == LANGUAGE_NONE) ? t('Language Neutral') : $languages[$element['#item']['language']]->name;
      $row = array_merge($row, $operations);

      $row = array_merge(array('data' => $row), $element['#attributes']);
      $row['class'][] = 'draggable';

      $rows[] = $row;
    }
  }
  $output = '';
  if (empty($rows)) {
    $rows[] = array(array('data' => $form['#empty_text'], 'colspan' => '7'));
  }

  // Language filter goes at the top.
  $output .= drupal_render($form['filter']);
  unset($form['filter']);

  $output .= theme(
    'table',
    array(
      'header'     => $header,
      'rows'       => $rows,
      'attributes' => array('id' => 'menu-overview'),
    )
  );
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Declaration of filter form.
 */
function menu_language_filter_filter_form($form, &$form_state) {
  $languages = array('0' => 'All Languages');
  foreach (language_list() as $code => $language) {
    $languages[$code] = $language->name;
  }

  $filter_language = 0;
  if (isset($_SESSION['menu_language_filter']['filtered_language'])) {
    $filter_language = $_SESSION['menu_language_filter']['filtered_language'];
  }

  $form['filter'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Filter by Language'),
    '#collapsible'   => TRUE,
    '#collapsed'     => ($filter_language) ? FALSE : TRUE,
    '#weight'        => -100,
  );

  $form['filter']['language'] = array(
    '#type'          => 'select',
    '#title'         => t('Language'),
    '#options'       => $languages,
    '#default_value' => $filter_language,
    '#description'   => t('Language Neutral always shows, regardless of selected language.'),
  );

  $form['filter']['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Apply Filter'),
  );

  if ($filter_language) {
    $form['filter']['reset'] = array(
      '#type'        => 'submit',
      '#value'       => t('Reset Filter'),
    );
  }

  array_unshift($form['#submit'], 'menu_language_filter_filter_form_submit');

  return $form;
}

/**
 * Submit function for filter form.
 */
function menu_language_filter_filter_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Apply Filter')) {
    $_SESSION['menu_language_filter']['filtered_language'] = $form_state['values']['filter']['language'];
  }
  if ($form_state['values']['op'] == t('Reset Filter')) {
    unset($_SESSION['menu_language_filter']['filtered_language']);
  }
}
