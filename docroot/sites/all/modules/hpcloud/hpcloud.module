<?php
/**
 * @file
 * The hpcloud module.
 */

/**
 * Implements hook_help().
 */
function hpcloud_help($path, $arg) {
  switch ($path) {
    case 'admin/help#hpcloud':
      return '<p>' . t('HPCloud services integration.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function hpcloud_permission() {
  return array(
    'Administer hpcloud' =>  array(
      'title' => t('Administer HPCloud'),
      'description' => t('Configure account and connection info.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function hpcloud_menu() {
  // IDENTITY SERVICES
  $items['admin/config/services/hpcloud'] = array(
    'title' => t('HP Cloud Identity Service'),
    'description' => t('Configure HPCloud accounts and services.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpcloud_admin_settings'),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'hpcloud.admin.inc',
    'weight' => -3,
  );

  $items['admin/config/services/hpcloud/accounts'] = array(
    'title' => t('Accounts'),
    'description' => t('Configure HP Cloud accounts.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpcloud_admin_settings'),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'hpcloud.admin.inc',
    'weight' => -5,
  );

  $items['admin/config/services/hpcloud/catalog'] = array(
    'title' => 'Service Catalog',
    'page callback' => 'hpcloud_admin_service_catalog_page',
    'page arguments' => array(),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hpcloud.admin.inc',
    'weight' => 1,
  );

  $items['admin/config/services/hpcloud/test'] = array(
    'title' => t('Test Authentication'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpcloud_admin_test_form'),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hpcloud.admin.inc',
    'weight' => 2,
  );

  // OBJECT STORAGE
  $items['admin/config/services/hpcloud-object'] = array(
    'title' => 'HP Cloud Object Storage',
    'description' => t('Mangae Object Storage and CDN services'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpcloud_admin_wrapper_form'),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'hpcloud.admin.inc',
    'weight' => -2,
  );

  $items['admin/config/services/hpcloud-object/wrappers'] = array(
    'title' => 'Stream Wrappers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hpcloud_admin_wrapper_form'),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'hpcloud.admin.inc',
    'weight' => -3,
  );


  $items['admin/config/services/hpcloud-object/containers'] = array(
    'title' => 'Object Storage Containers',
    'page callback' => 'hpcloud_admin_service_details_page',
    'page arguments' => array(),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hpcloud.admin.inc',
    'weight' => 0,
  );

  $items['admin/config/services/hpcloud-object/container/%'] = array(
    'title' => 'Container Details',
    'page callback' => 'hpcloud_admin_container_details_page',
    'page arguments' => array(5),
    'access arguments' => array('Administer hpcloud'),
    'type' => MENU_CALLBACK,
    'file' => 'hpcloud.admin.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_stream_wrappers().
 */
function hpcloud_stream_wrappers() {
  $ready = _hpcloud_bootstrap();

  if (!$ready) {
    return;
  }

  return array(
    'hpcloud' => array(
      'name' => t('HPCloud'),
      'class' => 'HPCloudDrupalStreamWrapper',
      'description' => t('Store files as objects on HPClouds object storage.'),
    ),
  );
}

/**
 * Implements hook_stream_wrappers_alter().
 */
function hpcloud_stream_wrappers_alter(&$wrappers) {
  $schemes = variable_get('hpcloud_enabled_schemes');

  if (empty($schemes)) {
    return;
  }

  foreach ($schemes as $scheme => $container) {
    if (isset($wrappers[$scheme])) {
      //drupal_set_message('Replacing ' . $scheme, 'status');
      $wrappers[$scheme]['class'] = 'HPCloudDrupalStreamWrapper';
      // Turn of the LOCAL bit if it is set.
      $wrappers[$scheme]['type'] &= ~STREAM_WRAPPERS_LOCAL;
    }
  }
}

/*
 * Invokes hook_image_style_flush().
 */
/*
function hpcloud_image_style_flush($style) {

}
 */

/**
 * Implements hook_element_info_alter().
 *
 * Switch in our own CSS aggregator, which fixes the
 * url() links to be fully qualified, instead of relative.
 */
function hpcloud_element_info_alter(&$type) {
  $schemes = variable_get('hpcloud_enabled_schemes');
  if (!empty($schemes['public'])) {
    module_load_include('inc', 'hpcloud', 'hpcloud.css');
    $type['styles']['#aggregate_callback'] = '_hpcloud_aggregate_css';
  }
}

/**
 * Implements hook_file_formatter_info_alter().
 *
 * This swaps out the default image formatter for one that does not require
 * local assets ONLY IF the public:// or private:// streams are attached to
 * HP Cloud Object Storage.
 */
function hpcloud_file_formatter_info_alter(&$info) {
  $schemes = variable_get('hpcloud_enabled_schemes');

  // We only override the default if HPCloud is being used
  // for storing public/private files. Note that this has the
  // big downside of not providing default formatters for the
  // hpcloud:// scheme, but we make this trade-off here because
  // we can't get data on what stream the formatter is to be
  // used for.
  if (empty($schemes['public']) && empty($schemes['private'])) {
    return;
  }

  if (isset($info['file_image'])) {
    $info['file_image']['view callback'] = 'hpcloud_file_formatter_file_image_view';
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 *
 * Returns a drupal_render() array to display an image of the chosen style.
 *
 * This removes the constraint that a file must be local. Otherwise it is
 * identical to file_entity_file_formatter_file_image_view().
 */
function hpcloud_file_formatter_file_image_view($file, $display, $langcode) {
  // Prevent PHP notices when trying to read empty files.
  // @see http://drupal.org/node/681042
  if (!$file->filesize) {
    return;
  }

  // Do not bother proceeding if this file does not have an image mime type.
  if (strpos($file->filemime, 'image/') !== 0) {
    return;
  }

  if (isset($file->image_dimensions)) {
    if (!empty($display['settings']['image_style'])) {
      $element = array(
        '#theme' => 'image_style',
        '#style_name' => $display['settings']['image_style'],
        '#path' => $file->uri,
        '#width' => $file->image_dimensions['width'],
        '#height' => $file->image_dimensions['height'],
      );
    }
    else {
      $element = array(
        '#theme' => 'image',
        '#path' => $file->uri,
        '#width' => $file->image_dimensions['width'],
        '#height' => $file->image_dimensions['height'],
      );
    }
    return $element;
  }
}
/**
 * Get the path to the HPCloud-PHP library.
 *
 * This tries the following locations:
 *
 * - The include path (PEAR install)
 * - vendor/HPcloud (Composer/Packagist)
 * - The module's directory (manual install)
 * - libraries_get_path() (the Libraries API module)
 *
 * The preferred methods of installation are Composer
 * and PEAR. Using Libraries API is discouraged, as it
 * can allow installing multiple versions of the same
 * library, which will cause instability.
 *
 * @return
 *   The path, or FALSE if no path was found. The empty
 *   path ('') indicates that the files are already on
 *   the include path. This is not the same as FALSE, which
 *   indicates that the files aren't found.
 */
function _hpcloud_library_path() {
  // Check composer next.
  $composer_package = __DIR__ . '/vendor/hpcloud/hpcloud-php/src';
  if (file_exists($composer_package)) {
    return $composer_package;
  }

  // Next, check to see if it was dumped right here:
  $local_package = __DIR__ . '/HPCloud-PHP/src/HPCloud/Bootstrap.php';
  if (file_exists($local_package)) {
    return __DIR__ . '/HPCloud-PHP/src';
  }

  // Check if this is already in the include path.
  // This works with PEAR-based installs.
  $f = @fopen('HPCloud/Bootstrap.php', 'r', TRUE);
  if ($f !== FALSE) {
    fclose($f);
    return '';
  }

  // See if Library is installed.
  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path('HPCloud-PHP', TRUE);
    if ($path !== FALSE) {
      return $path . '/src';
    }
  }

  return FALSE;
}

/**
 * Load and configure the HPCloud libraries.
 *
 * This should be done no more than once per request.
 *
 * @return
 *   TRUE if bootstrapping succeeded, FALSE otherwise. FALSE indicates
 *   that no HPCloud functionality can be expected.
 */
function _hpcloud_bootstrap() {
  if (class_exists('\HPCloud\Bootstrap')) {
    // FIXME: Should we run additional checks here? Like checking
    // to see if the endpoint is set?
    return TRUE;
  }
  // First, we need the library.
  $path = _hpcloud_library_path();
  if ($path === FALSE) {
    drupal_set_message('The HPCloud library is missing. HPCloud will not function without it.', 'error');
    return FALSE;
  };

  // Empty path needs to be resolved against the include path.
  if (empty($path)) {
    require_once 'HPCloud/Bootstrap.php';
  }
  else {
    require_once $path . '/HPCloud/Bootstrap.php';
  }

  // We don't know what autoloaders Drupal is using, but the defaults are not
  // namespace aware, so we should just use our own.
  \HPCloud\Bootstrap::useAutoloader();
  \HPCloud\Bootstrap::useStreamWrappers();

  // Build up the configuration.
  $config = array();
  $properties = array('account', 'secret', 'tenantid', 'tenantname', 'endpoint', 'username', 'password');
  foreach ($properties as $property) {
    $config[$property] = variable_get('hpcloud_account_' . $property, '');
  }

  // FIXME: This is rather inflexible.
  $trans = variable_get('hpcloud_transport_class', 'phpstream');
  if ($trans == 'phpstream') {
    $config['transport'] = '\HPCloud\Transport\PHPStreamTransport';
  }
  else {
    $config['transport'] = '\HPCloud\Transport\CURLTransport';
  }

  // Enable this ONLY for serious HTTP debugging.
  //$config['transport.debug'] = TRUE;

  // See if we have a valid token. If we do, we can skip a trip to identity services.
  if (($ident = _hpcloud_get_cached_identity()) !== FALSE) {
    $config['token'] = $ident->token();
  }

  if (empty($config['account']) && empty($config['username'])) {
    drupal_set_message('No account information was supplied for HPCloud.', 'error');
  }

  // Enable ssl cert checking for the curl transport layer. For newer versions
  // of curl this is the default. For the php transport layer the current
  // bindings do not check the ssl cert.
  $config['transport.ssl.verify'] = TRUE;

  \HPCloud\Bootstrap::setConfiguration($config);

  // XXX: This MUST be done after the autoloader is enabled.
  require_once __DIR__ . '/hpcloud.classes.inc';

  return TRUE;
}

/**
 * Cache an IdentityServices object.
 */
function _hpcloud_cache_identity($identity) {
  $data = $identity->tokenDetails();
  if (empty($data['expires'])) {
    return FALSE;
  }

  $ts = strtotime($data['expires']);
  cache_set('hpcloud_identity', $identity, 'cache', $ts);
  return TRUE;
}

/**
 * Get a cached IdentityServices object.
 *
 * You should use _hpcloud_login() if possible. This is mainly
 * intended for early bootstrap when we don't want to log in yet.
 */
function _hpcloud_get_cached_identity() {
  $cached = cache_get('hpcloud_identity', 'cache');

  if (empty($cached)) {
    return FALSE;
  }

  // Drupal does not guarantee that it will not return stale
  // cache objects.
  if ($cached->expire < REQUEST_TIME) {
    watchdog('hpcloud', __FUNCTION__ . ': Cached object has expired.');
    return FALSE;
  }
  return $cached->data;
}

/**
 * Get a list of all containers.
 *
 * @return array
 *   An associative array of container info.
 */
function _hpcloud_list_containers() {
  try {
    $store = _hpcloud_object_storage();
  }
  catch (\HPCloud\Exception $e) {
    watchdog_exception('HP Cloud', $e);
    drupal_set_message('Object storage is not activated for the project.', 'error');
    drupal_goto('admin/config/services');
  }

  return $store->containers();
}
/**
 * Get an instance of object storage.
 */
function _hpcloud_object_storage() {
  $id = _hpcloud_login();
  $token = $id->token();
  //$catalog = $id->serviceCatalog();
  if (empty($catalog)) {
    $id = _hpcloud_login(TRUE);
    if (empty($id)) {
      drupal_set_message('Could not authenticate to HP Cloud Object Storage.', 'status');
      return array();
    }
    //$catalog = $id->serviceCatalog();
  }
  //$store = \HPCloud\Storage\ObjectStorage::newFromServiceCatalog($catalog, $token);
  $store = \HPCloud\Storage\ObjectStorage::newFromIdentity($id);

  if ($store === FALSE) {
    throw new \HPCloud\Exception("HP Cloud Object Storage is not activated for the given project.");
  }

  return $store;
}

/**
 * Authenticate to HPCloud.
 *
 * Log in and get IdentityServices object.
 *
 * If $reuse_token is set to TRUE and a valid token exists, that
 * token will be used and no actual remote auth is done. This is
 * the default behavior.
 *
 * @return object
 *   An \HPCloud\Services\IdentityServices object with authentication
 *   information set, or FALSE if this could not log in.
 */
function _hpcloud_login($reuse_token = TRUE) {
  // See if we have a valid cached version.
  $ident = _hpcloud_get_cached_identity();
  if ($reuse_token && !empty($ident)) {
    return $ident;
  }

  //
  $endpoint = variable_get('hpcloud_account_endpoint');
  //$tenantid = variable_get('hpcloud_account_tenantid');
  $tenantid = \HPCloud\Bootstrap::config('tenantid');
  if (empty($endpoint) || empty($tenantid)) {
    drupal_set_message('HPCloud cannot connect without an endpoint, a tenant ID, and account credentials.', 'error');
    return FALSE;
  }

  try {
    $ident = \HPCloud\Bootstrap::identity();
    $token = $ident->token();
  }
  catch (\HPCloud\Exception $e) {
    watchdog('hpcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
    drupal_set_message(t('HPCloud login failed. %msg', array('%msg' => $e->getMessage())), 'error');
    return FALSE;
  }

  if (empty($token)) {
    drupal_set_message('Authentication to HPCloud failed.', 'error');
    return FALSE;
  }

  _hpcloud_cache_identity($ident);

  return $ident;
}
