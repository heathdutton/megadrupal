<?php

/**
 * Implements hook_menu().
 */
function trusted_modules_menu() {
    $items = array();
    $items['admin/reports/trusted'] = array(
        'type' => MENU_NORMAL_ITEM,
        'title' => t('Trusted Modules'),
        'description' => t('View trusted modules.'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('trusted_modules_admin'),
        'access arguments' => array('administer trusted modules'),
        'file' => 'trusted_modules.admin.inc',
    );
    $items['admin/reports/trusted/list'] = array(
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'title' => t('List'),
        'description' => t('View trusted modules.'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('trusted_modules_admin'),
        'access arguments' => array('administer trusted modules'),
        'file' => 'trusted_modules.admin.inc',
        'weight' => 0,
    );
    $items['admin/reports/trusted/settings'] = array(
        'type' => MENU_LOCAL_TASK,
        'title' => t('Settings'),
        'description' => t('Settings for trusted modules.'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('trusted_modules_admin_settings'),
        'access arguments' => array('administer trusted modules'),
        'file' => 'trusted_modules.admin.inc',
        'weight' => 1,
    );
    $items['admin/reports/trusted/certificates'] = array(
        'type' => MENU_LOCAL_TASK,
        'title' => t('Certificates'),
        'description' => t('Certificates for trusted modules.'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('trusted_modules_admin_certificates'),
        'access arguments' => array('administer trusted modules'),
        'file' => 'trusted_modules.admin.inc',
        'weight' => 2,
    );
    return $items;
}

/**
 * Implements hook_permission().
 */
function trusted_modules_permission() {
    return array(
        'administer trusted modules' => array(
            'title' => t('Administer trusted modules'),
            'restrict access' => true,
        ),
    );
}

/**
 * Implements hook_modules_enabled().
 */
function trusted_modules_modules_enabled($modules) {
    $disable_on_install = variable_get('trusted_modules_disable_on_install', 'nothing');
    if ($disable_on_install == 'nothing') {
        return;
    }

    $disable_modules = array();
    foreach ($modules as $module) {
        if (!trusted_modules_is_trusted($module)) {
            $status = trusted_modules_get_status($module);
            $message = $status['name'] . ' module is not trusted: ' . $status['error'];
            drupal_set_message($message, 'error');

            $watchdog_level = variable_get('trusted_modules_watchdog_level', WATCHDOG_ALERT);
            watchdog('Trusted Modules', $message, array(), $watchdog_level);

            // Check if we should automatically disable this module.
            if ($disable_on_install == 'disable') {
                $disable_modules[] = $module;
                drupal_set_message(t('Untrusted module automatically disabled'), 'error');
            }
        }
    }

    if (!empty($disable_modules)) {
        module_disable($disable_modules);
    }
}

function trusted_modules_is_trusted($name) {
    $status = trusted_modules_get_status($name);
    return $status['trusted'] === true;
}

function trusted_modules_get_status($name = '', $reset = false) {
    static $status = array();
    if (empty($status) || $reset) {
        module_load_include('inc', 'trusted_modules', 'trusted_modules.verify');
        module_load_include('php', 'trusted_modules', 'lib/vendor/autoload');

        $modules = system_list('module_enabled');
        if (empty($modules)) {
            throw new Exception("Trusted modules can't find any enabled modules.");
        }

        ksort($modules);
        $output = '<table><tr><th>Enabled Module</th><th>Status</th></tr>';

        foreach ($modules as $module_name => $module) {
            $output .= '<tr>';
            $status[$module_name]['name'] = $module->info['name'];

            try {
                $module = new VerifyModule(dirname(realpath($module->filename)));
                $module->verify();
                $status[$module_name]['trusted'] = true;
            } catch (Exception $e) {
                $status[$module_name]['trusted'] = false;
                $status[$module_name]['error'] = $e->getMessage();
            }
        }
    }

    if (!empty($name)) {
        return isset($status[$name]) ? $status[$name] : NULL;
    }

    return $status;
}

function trusted_modules_fetch_drupal_certificate() {
    // TODO: Find a cross-platform way of doing this.
    exec('openssl s_client -connect drupal.org:443 </dev/null', $output);
    if (empty($output)) {
        drupal_set_message('Could not connect to Drupal.org', 'error');
        return;
    }

    $certificate = '';
    $record = false;
    foreach ($output as $line) {
        $line = trim($line);
        if ($line == '-----BEGIN CERTIFICATE-----') {
            $record = true;
            $certificate .= $line . "\n";
            continue;
        } else if ($line == '-----END CERTIFICATE-----') {
            $certificate .= $line . "\n";
            break;
        } else if ($record) {
            $certificate .= $line . "\n";
        }
    }

    if (empty($certificate)) {
        drupal_set_message('Could not find Drupal.org certificate.', 'error');
        return;
    }

    return check_plain($certificate);
}
