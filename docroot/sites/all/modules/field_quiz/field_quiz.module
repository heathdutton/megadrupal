<?php
/**
 * @file
 * An field for creating a single multiple choice question with answers in a node
 */


/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function field_quiz_field_info() {

  return array(
    // We name our field as the associative name of the array.
    'field_quiz' => array(
      'label' => t('Quiz field'),
      'description' => t('Field to integrate a multiple choice question in a single node.'),
      'default_widget' => 'field_quiz_widget_quiz',
      'default_formatter' => 'field_quiz_formatter_quiz',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 */
function field_quiz_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_empty() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function field_quiz_field_is_empty($item, $field) {
  return empty($item['answer']);
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function field_quiz_field_formatter_info() {
  return array(
    // This formatter just displays the link field
    'field_quiz_formatter_quiz' => array(
      'label' => t('Quiz formatter'),
      'field types' => array('field_quiz'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function field_quiz_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'field_quiz_formatter_quiz':

      // Build the answers form
      $form = drupal_get_form('field_quiz_answer_form', $entity, $items, $instance);
      $element[] = array(
        '#markup' => drupal_render($form),
      );

      $element['#attached']['css'][] = drupal_get_path('module', 'field_quiz') . '/field_quiz.css';

      break;

  }

  return $element;
}



/**
 * Implements hook_theme().
 */
function field_quiz_theme() {
  return array(
    'field_quiz_page_wrong_answer' => array(
      'variables' => array('nid' => ''),
      'file' => 'field_quiz.theme.inc',
    ),
    'field_quiz_page_correct_answer' => array(
      'variables' => array('nid' => ''),
      'file' => 'field_quiz.theme.inc',
    ),
  );
}


/**
 * Implements hook_menu().
 * @return array $items
 */
function field_quiz_menu() {
  $items['quiz/sorry'] = array(
    'title' => 'Sorry, wrong answer',
    'page arguments' => array(2),
    'page callback' => 'field_quiz_page_wrong_answer',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['quiz/success'] = array(
    'title' => 'Success, correct answer',
    'page callback' => 'field_quiz_page_correct_answer',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/user-interface/field_quiz'] = array(
    'title' => 'Field Quiz admin settings',
    'description' => 'Administer the field settings for the quiz field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_quiz_admin_settings_form'),
    'access arguments' => array('administer content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'field_quiz.admin.inc',
  );
  return $items;
}


/**
 * Processes the link type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function field_quiz_field_process($element, $form_state, $complete_form) {

  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['settings'];
  $element['answer'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1024,
    '#title' => t('Quiz answer'),
    '#description' => t('Enter your possible answer'),
    '#required' => ($element['#delta'] == 0 && $settings['answer'] !== 'optional') ? $element['#required'] : FALSE,
    '#default_value' => isset($element['#value']['answer']) ? $element['#value']['answer'] : NULL,
  );

  $element['correct'] = array(
    '#type' => 'checkbox',
    '#title' => t('correct answer?'),
    '#description' => t('Set this checkbox active, if this answer is correct'),
    '#required' => ($element['#delta'] == 0 && $settings['correct'] !== 'optional') ? $element['#required'] : FALSE,
    '#default_value' => isset($element['#value']['correct']) ? $element['#value']['correct'] : NULL,
  );

  return $element;
}



/**
 * Implements hook_field_widget_info().
 *
 */
function field_quiz_field_widget_info() {
  return array(
    'field_quiz_widget_quiz' => array(
      'label' => t('Field quiz'),
      'field types' => array('field_quiz'),
    ),
  );
}


/**
 * Implements hook_field_widget_form().
 *
 */
function field_quiz_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value = isset($items[$delta]['answer']) ? $items[$delta]['answer'] : '';
  $correct = isset($items[$delta]['correct']) ? $items[$delta]['correct'] : '';

  $widget_answer = $element;
  $widget_correct = $element;
  $widget_answer['#delta'] = $delta;
  $widget_correct['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'field_quiz_widget_quiz':

      $widget_answer += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#suffix' => '<div class="field-field-quiz"></div>',
        '#attributes' => array('class' => array('edit-field-field-quiz')),
      );

      $widget_correct += array(
        '#type' => 'checkbox',
        '#default_value' => $correct,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#suffix' => '<div class="field-field_quiz"></div>',
        '#attributes' => array('class' => array('edit-field-field-quiz')),
      );

  }

  $element['answer'] = $widget_answer;
  $element['correct'] = $widget_correct;
  return $element;
}


/**
 * Validate the individual fields.
 */
function field_quiz_widget_quiz_validate($element, &$form_state) {

  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];

  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['answer'])) {

    // add validation

  }
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see field_example_field_validate()
 * @see form_error()
 */
function field_quiz_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_quiz_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Sort an array by random (shuffle) but preserve the keys
 * @param $array
 * @return array
 */
function _field_quiz_shuffle_assoc( &$array ) {
  $keys = array_keys($array);
  shuffle($keys);
  foreach($keys as $key) {
    $new[$key] = $array[$key];
  }
  $array = $new;
  return true;
}


/**
 * Generate the answers form for the quiz on the node page
 * @param array $form
 * @param array $form_state
 * @param object $entity
 * @param array $items
 * @param $instance
 * @return array $form
 */
function field_quiz_answer_form($form, $form_state, $entity, $items, $instance) {

  $form = array();

  // provide the node nid
  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  // provide the field name
  $form['field_name'] = array(
    '#type' => 'value',
    '#value' => $instance['field_name'],
  );

  if (!empty($items)) {

    // fieldset wrapper to concentrate the answers in the $form_state['values'] array
    $form['answers'] = array(
      '#type' => 'fieldset',
      '#title' => '',
      '#tree' => TRUE,
      '#collapsible' => FALSE,
    );

    if (variable_get('field_quiz_shuffle_answers', FALSE)) {
      // sort the answers each time by random
      _field_quiz_shuffle_assoc($items);
    }

    foreach ($items as $delta => $item) {

      // provide each answer together with the checkbox
      $form['answers']['item_' . $delta] = array(
        '#type' => 'checkbox',
        '#default_value' => 0,
        '#title' => $item['answer'],
      );

    }
  }

  // submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  // validation function
  $form['#validate'][] = 'field_quiz_answer_form_validate';
  // submit function
  $form['#submit'][] = 'field_quiz_answer_form_submit';

  return $form;
}


/**
 * Validation of the answers form
 * @param array $form
 * @param array $form_state
 */
function field_quiz_answer_form_validate($form, $form_state) {

  if (!empty($form_state['values'])) {

    // validation

  }

}


/**
 * Submission of the answers form
 * @param array $form
 * @param array $form_state
 */
function field_quiz_answer_form_submit($form, &$form_state) {

  if (!empty($form_state['values'])) {

    $error = FALSE;

    // get the correct answers
    $items = field_get_items('node', $form_state['values']['entity'], $form_state['values']['field_name']);
    if (!empty($items)) {

      foreach ($items as $delta => $item) {

        // compare the submitted answers with the correct answers
        // all correct answers should be answered correct - there are no differences between correct and given answers allowed

        // if the answer is available
        if (isset($form_state['values']['answers']['item_' . $delta])) {

          // if the answer is different with the correct one
          if ($form_state['values']['answers']['item_' . $delta] != $item['correct']) {
            $error = TRUE;
          }
        }
        else {
          // no answer available for this delta - but should be there - error in the system
          $error = TRUE;
        }

      }

    }

    // if user answered wrong
    if ($error) {
      // redirect the user to the sorry page
      $form_state['redirect'] = 'quiz/sorry/' . $form_state['values']['entity']->nid;
    }
    else {
      // redirect the user to the success page
      $form_state['redirect'] = 'quiz/success/' . $form_state['values']['entity']->nid;
    }
  }

}


/**
 * Sorry, wrong answer page
 * - can be access by everyone
 */
function field_quiz_page_wrong_answer($nid) {

  // caching has to be disabled if the shuffling of ansers is enabled
  if (variable_get('field_quiz_shuffle_answers', FALSE)) {
    drupal_page_is_cacheable(FALSE);
  }

  $content = '';
  // theme the wrong answer page
  $content .= theme('field_quiz_page_wrong_answer', array(
    'nid' => $nid,
  ));
  return $content;
}


/**
 * Correct answer page.
 */
function field_quiz_page_correct_answer($nid) {

  // caching has to be disabled if the shuffling of ansers is enabled
  if (variable_get('field_quiz_shuffle_answers', FALSE)) {
    drupal_page_is_cacheable(FALSE);
  }

  $content = '';
  // theme the correct answer page
  // theme the wrong answer page
  $content .= theme('field_quiz_page_correct_answer', array(
    'nid' => $nid,
  ));
  return $content;
}