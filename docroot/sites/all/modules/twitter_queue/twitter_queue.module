<?php

/**
 * @file
 * Main file, drupal hooks and main functions.
 */

/**
 * Implements hook_libraries_info().
 */
function twitter_queue_libraries_info() {
  $libraries = array();

  $libraries['tmhOAuth'] = array(
    'name' => 'tmhOAuth OAuth library',
    'vendor url' => 'https://github.com/themattharris/tmhOAuth',
    'download url' => 'https://github.com/themattharris/tmhOAuth',
    'version arguments' => array(
      'file'    => 'tmhOAuth.php',
      'pattern' => '~const VERSION = (.*);~',
      'lines'   => 17,
    ),
    'files' => array(
      'php' => array('tmhOAuth.php',),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_help().
 */
function twitter_queue_help($path, $arg) {
  switch ($path) {
    // Main module help.
    case 'admin/help#twitter-queue':
      return '<p>' . t('todo: documentation') . '</p>';

    // Help for another path.
    case 'admin/content/twitter-queue':
      return '<p>' . t('Easy access to your') . ' ' . l(t('twitter account'), variable_get('twitter_queue_twitter_account', 'https://twitter.com/#!/example')) . '</p>';

  }
}

/**
 * Implements hook_menu().
 */
function twitter_queue_menu() {
  $item = array();

  // Twitter queue list.
  $queue_list = array(
    'access arguments'  => array('moderator twitter queue list'),
  );

  $item['admin/structure/twitter-queue'] = $queue_list + array(
    'title'         => 'Twitter queue',
    'description'   => 'Twitter list',
    'page callback' => 'twitter_queue_list',
  );

  // Admin zone.
  $admin_queye = array(
    'access arguments' => array('access administration twitter queue'),
    'file'             => 'twitter_queue.admin.inc',
  );

  $item['admin/config/services/twitter-queue'] = $admin_queye + array(
    'title'          => 'Twitter queue settings',
    'description'    => 'Twitter queue settings',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('twitter_queue_settings'),
  );

  $item['admin/config/services/twitter-queue/overview'] = $admin_queye + array(
    'title'          => 'Overview',
    'description'    => 'Twitter queue settings',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('twitter_queue_overview'),
    'type'           => MENU_DEFAULT_LOCAL_TASK,
    'weight'         => -10,
  );

  $item['admin/config/services/twitter-queue/content-types'] = $admin_queye + array(
    'title'          => 'Content types',
    'description'    => 'Select the content type you want.',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('twitter_queue_types'),
    'type'           => MENU_LOCAL_TASK,
  );

  // Callbacks.
  $item['admin/send_twitter/%'] = $queue_list + array(
    'title'            => '',
    'page callback'    => 'twitter_queue_send',
    'page arguments'   => array(2),
    'access arguments' => array('idn access list twitter'),
    'type'             => MENU_CALLBACK,
    'menu_name'        => 'twitter-queue',
    'file'             => 'twitter_queue.inc',
  );

  $item['admin/send_twitter/%/bypass'] = $queue_list + array(
    'title'            => '',
    'page callback'    => 'twitter_queue_send',
    'page arguments'   => array(2),
    'access arguments' => array('idn access list twitter'),
    'type'             => MENU_CALLBACK,
    'menu_name'        => 'twitter-queue',
    'file'             => 'twitter_queue.inc',
  );

  return $item;
}

/**
 * Implements hook_permission().
 */
function twitter_queue_permission() {
  return array(
    'access administration twitter queue' => array(
      'title'       => t('Access Administration Twitter Queue'),
      'description' => t('Perform administration tasks for Twitter Queue'),
    ),
    'moderator twitter queue list' => array(
      'title'       => t('Moderator Twitter Queue list'),
      'description' => t('Allow users to moderate the Twitter Queue list.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function twitter_queue_theme() {
  return array(
    'twitter_queue_overview' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Delivery form to send.
 *
 * @ingroup forms
 * @see twitter_queue_overview_validate()
 * @see twitter_queue_overview_submit()
 * @see theme_twitter_queue_overview()
 */
function twitter_queue_overview() {
  $form = array();

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'twitter_queue') . '/twitter_queue.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'twitter_queue') . '/twitter_queue.css'
  );

  $lastrun = variable_get('twitter_queue_microtime', time());
  $timer = variable_get('twitter_queue_schedule', 20);

  $next_run = $lastrun + (($timer * 60) * 2);

  if (date('YmdHi', time() + 60) > date('YmdHi', $next_run)) {
    $time = 5;
  }
  else {
    $time = date('i', $lastrun + ($timer * 60)) - date('i', time());
  }

  $form['options'] = array(
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );
  $form['options']['main_text'] = array(
    '#markup' => t('Points') . '<span style="color: green; font-weight: bold; font-size: 1.8em;"> • </span>' .  t('will be active for automatic sending.') . ' ' . t('Points') . '<span style="color: red; font-weight: bold; font-size: 1.8em;"> • </span>' . t('are disabled for automatic sending.'),
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );
  $form['options']['between'] = array(
    '#markup' => t('delivery time between tweets') . ' ' . '<strong>' . variable_get('twitter_queue_schedule', 20) . '</strong>',
    '#prefix' => '<div class="timer-between">',
    '#suffix' => '</div>',
  );
  $form['options']['submit'] = array(
    '#type'     => 'submit',
    '#validate' => array('twitter_queue_overview_validate'),
    '#submit'   => array('twitter_queue_overview_submit'),
    '#value'    => t('Save Order and Remove Selected'),
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );


  $header = array(
    'weight'      => array('data' => '', 'field' => 'weight', 'sort' => 'asc'),
    'text_status' => array('data' => t('Status'), 'field' => 'text_status'),
    'char_count'  => array('data' => t('Char Count')),
    'edit'        => array('data' => t('Edit')),
    'live_action' => array('data' => t('Live Action')),
    'time'        => array('data' => t('Created'), 'field' => 'created'),
    'empty'       => array('data' => ''),
  );

  $select = db_select('twitter_queue', 'twt_q')
  ->extend('TableSort');
  $select->leftJoin('node', 'n', 'twt_q.nid = n.nid');

  $result = $select
    ->fields('twt_q', array('text_status', 'node_status', 'nid', 'weight'))
    ->fields('n', array('created'))
    ->orderByHeader($header);

  $form['items'] = array();
  $form['items']['#tree'] = TRUE;

  foreach ($result->execute() as $row) {

    $title = '<span class="text">' . $row->text_status . '</span>';

    $semaforo = $row->node_status ? '<span style="color: green; font-weight: bold; font-size: 1.8em;">&#8226;</span> ' : '<span style="color: red; font-weight: bold; font-size: 1.8em;">&#8226;</span> ';
    $view_node = !preg_match('/f/', $row->nid) ? l(t('view'), 'node/' . $row->nid) : '';

    $bypass = preg_match('/f/', $row->nid) ? '/bypass' : '';

    // Form builder.
    $send_twitter[$row->nid] = '';
    $form['items'][$row->nid]['title'] = array(
      '#markup' => $semaforo . $title . ' ' . $view_node,
    );
    $form['items'][$row->nid]['count'] = array(
      '#markup' => drupal_strlen($title),
    );
    if (!preg_match('~f~', $row->nid)) {
      $form['items'][$row->nid]['edit'] = array(
        '#markup' => l(t('edit'), 'node/' . $row->nid . '/edit', array('query' => array('destination' => 'admin/structure/twitter-queue'))),
      );
    }
    else {
      $form['items'][$row->nid]['edit'] = array(
        '#markup' => '-',
      );
    }
    $form['items'][$row->nid]['send'] = array(
      '#markup' => l(t('push to twitter'), 'admin/send_twitter/' . $row->nid . $bypass),
    );
    $form['items'][$row->nid]['created'] = array(
      '#markup' => $row->created ? format_date($row->created, 'small') : '',
    );
    $form['items'][$row->nid]['weight'] = array(
      '#type'          => 'weight',
      '#default_value' => $row->weight,
      '#delta'         => 20,
    );
  }

  $form['send_twitter'] = array(
    '#type'    => 'checkboxes',
    '#options' => isset($send_twitter) ? $send_twitter : array(),
  );

  $form['submit'] = array(
    '#type'     => 'submit',
    '#validate' => array('twitter_queue_overview_validate'),
    '#submit'   => array('twitter_queue_overview_submit'),
    '#value'    => t('Save Order and Remove Selected'),
  );

  return $form;
}

/**
 * Validation.
 * @see twitter_queue_overview()
 * @todo make a better validation.
 */
function twitter_queue_overview_validate($form, &$form_state) {

}

/**
 * Submit form.
 * @see twitter_queue_overview()
 * @todo see the flow and correct it.
 */
function twitter_queue_overview_submit($form, &$form_state) {

  $nids = array();
  $dont = array();
  $rnids = array();

  foreach ($form_state['values']['send_twitter'] as $key => $value) {
    // Making an array to be more handly.
    if ($value !== 0) {
      // We do this because I dont use the regular printf in this case.
      $nids[] = $value;
      $dont[] = $value;

      // Clear the default options to add a node into the queue.
      if (is_numeric($value)) {
        $rnids[] = $value;
      }
    }
  }

  $delete = db_delete('twitter_queue')
    ->condition('nid', $nids, 'IN');

  if (!empty($nids)) {
    $delete->execute();
  }

  // If we delete a real node from the list, we need update also the default add
  // queue.
  if (!empty($rnids)) {

    db_update('twitter_queue_status')
      ->fields(array(
        'status' => 0,
      ))
      ->condition('nid', $rnids, 'IN')
      ->execute();
  }

  if (!is_array($form_state['values']['items'])) {
    foreach ($form_state['values']['items'] as $key => $value) {
      if (!in_array($key, $dont)) {

        db_merge('twitter_queue')
          ->key(array('nid' => $key))
          ->fields(array(
            'weight' => $value['weight'],
          ))
          ->execute();
      }
    }
    drupal_set_message(t('The update has been performed.'));
  }
  else {
    drupal_set_message(t('None update could be performed.'));
  }

}

/**
 * Subject to the management of shipping on twitter.
 *
 * @ingroup themeable
 */
function theme_twitter_queue_overview($variables) {
  $form = $variables['form'];

  $output = '';
  $rows = array();

  $header = array(
    array(
      'data'    => '',
      'colspan' => 2,
      'class'   => array('field-label'),
    ),
    array(
      'data'  => '',
      'class' => array('select-all'),
    ),
    t('Tweet Status'),
    t('Num Char'),
    t('Edit'),
    t('Send'),
    t('Created'),
  );

  $output .= drupal_render($form['options']);

  foreach (element_children($form['items']) as $key) {

    if (isset($form['items'][$key]['title'])) {
      $form['items'][$key]['weight']['#attributes']['class'] = array('weight-group');

      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
        array(
          'data'  => drupal_render($form['items'][$key]['weight']),
          'class' => array('weight-group'),
        ),
        drupal_render($form['send_twitter'][$key]),
        array(
          'data'  => drupal_render($form['items'][$key]['title']),
          'id'    => $key,
          'class' => array("queue-status"),
        ),
        drupal_render($form['items'][$key]['count']),
        drupal_render($form['items'][$key]['edit']),
        drupal_render($form['items'][$key]['send']),
        drupal_render($form['items'][$key]['created']),
      );

      $rows[] = array(
        'data' => $cells,
        'class' => array('draggable'),
      );
    }
  }

  $output .= theme('table', array(
    'header'     => $header,
    'rows'       => $rows,
    'empty'      => t('No tweets queued.'),
    'attributes' => array(
      'id'    => 'draggable-table',
      'class' => array('field-multiple-table'),
    ),
  ));

  drupal_add_tabledrag('draggable-table', 'order', 'sibling', 'weight-group');

  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Function that creates the header to send tweets.
 */
function twitter_queue_livesend($form, &$form_state) {
  $form = array();

  $form['box'] = array(
    '#type'        => 'fieldset',
    '#title'       => 'live tweets',
    '#description' => '',
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE,
    '#attributes'  => array(
      'style' => array('position: relative;'),
    ),
  );
  $form['box']['info'] = array(
    '#value'  => '140',
    '#prefix' => '<div id="totalchar">',
    '#suffix' => '</div>',
  );

  $form['box']['textarea'] = array(
    '#type'          => 'textarea',
    '#default_value' => t("What's happening?"),
    '#rows'          => '2',
    '#attributes'    => array(
      'class' => array('textOff'),
    ),
  );

  $form['box']['check'] = array(
    '#type'          => 'checkbox',
    '#description'   => 'queue tweet',
    '#default_value' => 1,
  );

  $form['box']['submit'] = array(
    '#type'     => 'submit',
    '#validate' => array('twitter_queue_livesend_validate'),
    '#submit'   => array('twitter_queue_livesend_submit'),
    '#value'    => 'send',
  );

  return $form;
}

/**
 * Validation.
 * @todo works on the validation forms. I really need them?
 */
function twitter_queue_livesend_validate($form, &$form_state) {
}

/**
 * Submit.
 *
 * @see twitter_queue_livesend()
 */
function twitter_queue_livesend_submit($form, &$form_state) {
  // Automatic sending via twitter OAuth.
  if (!$form_state['values']['check']) {
    module_load_include('inc', 'twitter_queue');
    twitter_queue_send_live($form_state['values']['textarea']);
  }

  $fake_nid = db_select('twitter_queue', 'tq')
  ->fields('tq', array('nid'))
  ->condition('nid', 'f%', 'LIKE')
  ->orderBy('tq.nid', 'DESC')
  ->execute()
  ->fetchField();

  $fake_nid = preg_match('/f/', $fake_nid) ? 'f' . (preg_replace('/f/', '', $fake_nid) + 1) : 'f1';

  $table = "twitter_queue";

  $record = new stdClass();
  $record->weight = -20;
  $record->nid = $fake_nid;
  $record->node_status = 1;
  $record->text_status = $form_state['values']['textarea'];

  drupal_write_record($table, $record);

  drupal_set_message(t('tweet added to the sending queue.'));
}

/**
 * View of the panel.
 */
function twitter_queue_list() {
  $output = '';

  $live_form = drupal_get_form('twitter_queue_livesend');
  $output .= drupal_render($live_form);

  $queue_overview = drupal_get_form('twitter_queue_overview');
  $output .= drupal_render($queue_overview);

  return $output;
}

/**
 * Implements hook_node_insert().
 */
function twitter_queue_node_insert($node) {
  module_load_include('inc', 'twitter_queue');
  _twitter_queue_ins_upd($node);
}

/**
 * Implements hook_node_update().
 */
function twitter_queue_node_update($node) {
  module_load_include('inc', 'twitter_queue');
  _twitter_queue_ins_upd($node);
}

/**
 * Implements hook_form_alter().
 */
function twitter_queue_form_alter(&$form, &$form_state, $form_id) {
  $tq_status = array();
  // Retrieve the content type settings.
  $types = variable_get('twitter_queue_types', array());

  // Get the machine name content type.
  $type = preg_replace('@_node_form@', '', $form_id);

  if (!empty($types[$type])) {
    if ($form['nid']['#value'] > 0) {

      $tq_status = db_select('twitter_queue_status', 'tq')
      ->fields('tq', array('status'))
      ->condition('nid', $form['nid']['#value'])
      ->execute()
      ->fetchAssoc();
    }

    if (empty($tq_status)) {
      $tq_status['status'] = in_array('twitter_queue_' . $type . '_status', variable_get('node_options_' . $type, ''));
    }

    $form['options']['twitter_queue_' . $type . '_status'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('Add Twitter Queue'),
      '#default_value' => $tq_status['status'],
    );
  }

  // Override the manage content type form. get the machine name content type.
  if (!empty($form['#node_type']->type)) {
    $type = $form['#node_type']->type;

    // Edition the content type to preset the default action.
    if (!empty($types[$type])) {
      $form['workflow']['node_options']['#options'] = $form['workflow']['node_options']['#options'] + array('twitter_queue_' . $type . '_status' => 'Add Twitter Queue');
    }
  }
}

/**
 * Implements hook_cron().
 */
function twitter_queue_cron() {
  module_load_include('inc', 'twitter_queue');
  $lastrun = variable_get('twitter_queue_lastrun', mktime(0, 0, 0, 1, 1, 1900));
  $timer   = variable_get('twitter_queue_schedule', 10);
  $report  = FALSE;

  $result = db_select('twitter_queue', 'tq')
  ->fields('tq', array('nid'))
  ->condition('node_status', 1)
  ->orderBy('weight', 'ASC')
  ->execute()
  ->fetchField();

  // Next tweet to send as the last run.
  $next_run = $lastrun + ($timer * 60);
  $now = time() + 60;

  // Time is added to 60 seconds more to avoid problems with inaccurate minutes.
  if ($result && date('YmdHi', $now) >= date('YmdHi', $next_run)) {
    $report = twitter_queue_send($result, FALSE);
  }

  if ($report) {
    // Updating the time when the tweet was sent.
    variable_set('twitter_queue_lastrun', time());

    watchdog('twitter_queue', 'Cron executed: ' . PHP_EOL . 'hour: @date', array('@date' => date('d/m/Y G:i:s')));
  }
}

/**
 * Implements elysia's hook_cronapi().
 */
function twitter_queue_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array('twitter_queue_cron' => 'Standard cron process');

    case 'rule':
      return '*/' . variable_get('twitter_queue_schedule', 10) . ' * * * *';
  }
}
