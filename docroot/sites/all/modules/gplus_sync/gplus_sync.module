<?php

require_once 'gplus_sync.constants.inc';

/**
 * Implements hook_gplus_fields().
 */
function gplus_sync_gplus_fields() {
  return array(
 // technical fields
    'gplus_sync_is_external_user' => array(
      'type'                  => 'hidden',
      'title'                 => t('Is external user'),
      'view_field_handler'    => 'views_handler_field_boolean',
      'view_filter_handler'   => 'views_handler_filter_boolean_operator',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_token' => array(
      'type'                  => 'hidden',
      'title'                 => t('Token'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
 // visible fields
    'gplus_sync_id' => array(
      'type'                  => 'text',
      'title'                 => t('ID'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_url_picture' => array(
      'type'                  => 'url_to_image',
      'title'                 => t('Picture'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_url_profile' => array(
      'type'                  => 'url',
      'title'                 => t('Profile URL'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_given_name' => array(
      'type'                  => 'text',
      'title'                 => t('Given name'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_family_name' => array(
      'type'                  => 'text',
      'title'                 => t('Family name'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_name' => array(
      'type'                  => 'text',
      'title'                 => t('Name'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_gender' => array(
      'type'                  => 'text',
      'title'                 => t('Gender'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_locale' => array(
      'type'                  => 'text',
      'title'                 => t('Locale'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_language' => array(
      'type'                  => 'text',
      'title'                 => t('Language'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
    'gplus_sync_birthday' => array(
      'type'                  => 'date',
      'title'                 => t('Birthday'),
      'view_field_handler'    => 'views_handler_field_date',
      'view_filter_handler'   => 'views_handler_filter_date',
      'view_sort_handler'     => 'views_handler_sort_date',
    ),
    'gplus_sync_current_location' => array(
      'type'                  => 'text',
      'title'                 => t('Current location'),
      'view_field_handler'    => 'views_handler_field',
      'view_argument_handler' => 'views_handler_argument_string',
      'view_filter_handler'   => 'views_handler_filter_string',
      'view_sort_handler'     => 'views_handler_sort',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function gplus_sync_menu() {
  $items[GPLUS_SYNC_URL_USER_PAGE] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'View Google+ info',
    'page callback' => 'gplus_sync_user_page',
    'page arguments' => array(1),
    'access callback' => 'gplus_sync_user_page_check_acces',
    'access arguments' => array(1),
    'file' => 'gplus_sync.user.inc',
    'weight' => -5,
  );
  $items[GPLUS_SYNC_URL_SETTINGS_PAGE] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Google+ Sync settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gplus_sync_settings_form'),
    'access arguments' => array('administer gplus sync settings'),
    'description' => t('Synchronize user data between Google+ and Drupal.'),
    'file' => 'gplus_sync.admin.inc',
  );
  $items[GPLUS_SYNC_URL_SIGN_ON] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'gplus_sync_sing_on',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Access callbacks.
 */
function gplus_sync_user_page_check_acces($account) {
  if($account->gplus_sync_id) {
    global $user;
  // grant access for users with specified permission
    if (user_access('view gplus profile', $user)) {
      return TRUE;
    }
  // grant access for account owner
    if (isset($user->uid) && isset($account->uid) && $user->uid == $account->uid) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_theme().
 */
function gplus_sync_permission() {
  return array(
    'view gplus profile' => array(
      'title' => t('View GPlus profile'),
    ),
    'administer gplus sync settings' => array(
      'title' => t('Administer GPlus Sync settings'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function gplus_sync_theme() {
  return array(
    'gplus_sync_sing_in_button' => array(
      'variables' => array('client_id' => NULL),
      'template' => 'templates/sing_in_button',
    ),
  );
}


/**
 * Implements hook_help().
 */
function gplus_sync_help($path, $arg) {
  switch ($path) {
    case 'admin/config/people/gplus_sync':
      return theme('item_list', array('title' => t('For working with Google Plus Sync you need:'), 'type' => 'ol', 'items' => array(
               array('data' => t('Going to page Google Developers Console (!link) and login with your GMail account.', array('!link' => l(t('link'), 'https://console.developers.google.com', array('attributes' => array('target' => '_new')))))),
               array('data' => t('If you haven\'t any exist projects then create new one:'), 'children' => array(
                 array('type' => 'a', 'data' => t('in Google Developers Console push the button "Create Project";')),
                 array('type' => 'a', 'data' => t('in popup "New Project" insert custom project name and project ID;')),
                 array('type' => 'a', 'data' => t('push the button "Create".')))),
               array('data' => t('Select the new or exist project.')),
               array('data' => t('On the project page going to "APIs & auth" -> "APIs".')),
               array('data' => t('On the "APIs" page enable "Google+ API".')),
               array('data' => t('On the project page going to "APIs & auth" -> "Credentials".')),
               array('data' => t('If you create new project:'), 'children' => array(
                 array('type' => 'a', 'data' => t('push the button "Create new Client ID";')),
                 array('type' => 'a', 'data' => t('in popup "Create Client ID" in selector "Application type" select "Web application";')),
                 array('type' => 'a', 'data' => t('in popup "Create Client ID" in field "Authorized javascript origins" input domain name of site where this module is working (examples: "http://example.com", "https://example.com");', array('!redirect_path' => GPLUS_SYNC_URL_SIGN_ON))),
                 array('type' => 'a', 'data' => t('in popup "Create Client ID" in field "Authorized redirect uris" input redirect url (examples: "http://example.com/!redirect_path", "https://example.com/!redirect_path");', array('!redirect_path' => GPLUS_SYNC_URL_SIGN_ON))),
                 array('type' => 'a', 'data' => t('in popup "Create Client ID" push the button "Create Client ID".')))),
               array('data' => t('On "Credentials" page make a copy of value "Client ID".')),
               array('data' => t('Insert copied value into field "Client ID" on this page.')),
               array('data' => t('On "Credentials" page make a copy of value "Client Secret".')),
               array('data' => t('Insert copied value into field "Client Secret" on this page.')),
               array('data' => t('On this page press the button "Save".')),
               array('data' => t('Going to page "Blocks" (!link) and enable block "Google+ sign in button".', array('!link' => l(t('link'), 'admin/structure/block', array('attributes' => array('target' => '_new')))))),
               array('data' => t('Logout and check "Google+ sign in button".')))
             ));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gplus_sync_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#user_category'] == 'account' &&
      $form['#user']->gplus_sync_is_external_user == 1) {
 // remove current password field
    unset($form['account']['current_pass']);
 // remove password validation
    foreach ($form['#validate'] as $id => $c_validate) {
      if ($c_validate == 'user_validate_current_pass') {
        unset($form['#validate'][$id]);
        break;
      }
    }
  }
}

/**
 * Implements hook_block_info().
 * Implements hook_block_configure().
 * Implements hook_block_save().
 * Implements hook_block_view().
 */
function gplus_sync_block_info() {
  $blocks = array();
  $blocks[GPLUS_SYNC_BLOCK_ID_SIGN_IN_BUTTON]['cache'] = DRUPAL_NO_CACHE;
  $blocks[GPLUS_SYNC_BLOCK_ID_SIGN_IN_BUTTON]['info'] = t('Google+ sign in button (for anonymous users only)');
  return $blocks;
}

function gplus_sync_block_configure($bid) {
  switch ($bid) {
    case GPLUS_SYNC_BLOCK_ID_SIGN_IN_BUTTON:
      $form['gplus_sync_block_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Google+ sign in button block settings'),
      );
      $form['gplus_sync_block_settings']['gplus_sync_is_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Is enabled'),
        '#default_value' => variable_get('gplus_sync_is_enabled', TRUE),
      );
      return $form;
  }
}

function gplus_sync_block_save($bid, $edit) {
  switch ($bid) {
    case GPLUS_SYNC_BLOCK_ID_SIGN_IN_BUTTON:
      variable_set('gplus_sync_is_enabled', $edit['gplus_sync_is_enabled']);
      break;
  }
}

function gplus_sync_block_view($bid) {
  switch ($bid) {
    case GPLUS_SYNC_BLOCK_ID_SIGN_IN_BUTTON:
      if ($GLOBALS['user']->uid == 0 && variable_get('gplus_sync_is_enabled', TRUE)) {
        $client_id = variable_get('gplus_sync_client_id');
        if ($client_id) {
          drupal_add_js(GPLUS_SYNC_MODULE_PATH.'/gplus_sync.js');
          drupal_add_js(GPLUS_SYNC_URL_GPLUS_JS_CLIENT);
          $block['content'] = theme('gplus_sync_sing_in_button', array('client_id' => $client_id));
        } else {
          $block['content'] = t('The Google+ Client ID and others parameters is not set!');
        }
        return $block;
      }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function gplus_sync_field_extra_fields() {
  $gplus_fields = module_invoke('gplus_sync', 'gplus_fields');
  foreach ($gplus_fields as $field_id => $field_info) {
    if ($field_info['type'] != 'hidden') {
      $return['user']['user']['display'][$field_id]['label'] = $field_info['title'];
    }
  }
  return $return;
}

/**
 * Implements hook_query_alter().
 */
function gplus_sync_query_alter(QueryAlterableInterface $query) {
  $gplus_fields = module_invoke('gplus_sync', 'gplus_fields');
  $tables = &$query->getTables();
  $fields = &$query->getFields();
  if (isset($tables['base']['table']) &&
            $tables['base']['table'] == 'users') {
    foreach ($gplus_fields as $field_id => $field_info) {
      $fields[$field_id] = array(
        'field' => $field_id,
        'alias' => $field_id,
        'table' => 'base',
      );
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function gplus_sync_views_data_alter(&$data) {
  $gplus_fields = module_invoke('gplus_sync', 'gplus_fields');
  foreach ($gplus_fields as $field_id => $field_info) {
    $data['users'][$field_id]['title']  = t('Google+ !title', array('!title' => $field_info['title']));
    $data['users'][$field_id]['help']   = t('Field: users.!field_name', array('!field_name' => $field_id));
    $data['users'][$field_id]['field']  = array('handler' => $field_info['view_field_handler'], 'click sortable' => TRUE);
    $data['users'][$field_id]['filter'] = array('handler' => $field_info['view_filter_handler']);
    $data['users'][$field_id]['sort']   = array('handler' => $field_info['view_sort_handler']);
    if (isset($data['users'][$field_id]['argument'])) {
      $data['users'][$field_id]['argument'] = array('handler' => $field_info['view_argument_handler']);
    }
  }
}

/**
 * gplus_sync_sing_on().
 */
function gplus_sync_sing_on() {
  $client_id = variable_get('gplus_sync_client_id');
  $client_secret = variable_get('gplus_sync_client_secret');
  if ($GLOBALS['user']->uid == 0 && isset($_POST['code']) && $client_id && $client_secret) {
    set_include_path(get_include_path().PATH_SEPARATOR.GPLUS_SYNC_MODULE_PATH.'/vendor/google/apiclient/src/');
    require_once 'Google/Client.php';
    $client = new Google_Client();
    $client->setClientId($client_id);
    $client->setClientSecret($client_secret);
    $client->setRedirectUri('postmessage');                   
    $client->authenticate($_POST['code']);
    $token = json_decode($client->getAccessToken());
    $service_auth = new Google_Service_Oauth2($client);
    $service_plus = new Google_Service_Plus($client);
    $user_info = $service_auth->userinfo->get();
    $user_info_plus = $service_plus->people->get('me');
    if (isset($user_info['email']) && isset($user_info['name'])) {
   /* check domain name of user email with available domain names */
      $domains = variable_get('gplus_sync_available_domains', '');
      if ($domains) {
        $domains_parsed = explode("\r\n", $domains);
        $email_domain = substr(strrchr($user_info['email'], '@'), 1);
        $domain_is_available = FALSE;
        foreach ($domains_parsed as $c_domain) {
          if ($c_domain == $email_domain) {
            $domain_is_available = TRUE;
            break;
          }
        }
        if (!$domain_is_available) {
          drupal_set_message(t('The domain name from your email address is not available on this site!'), 'error');
          print json_encode(array(
            'status' => 'error',
            'uid' => 0,
            'redirect' => '/',
            'error_code' => 2,
            'error_text' => 'The domain name from your email address is not available on this site!',
          ));
          return;
        }
      }
   /* filter user name */
      $user_info['filteredName'] = gplus_sync_prepare_user_name($user_info['name']);
   /* load user account */
      $user = user_load_by_mail($user_info['email']);
   /* check for ability to login with loaded user account */
      if ($user && $user->status == 0) {
        drupal_set_message(t('This user is blocked!'), 'error');
        print json_encode(array(
          'status' => 'error',
          'uid' => $user->uid,
          'redirect' => '/',
          'error_code' => 4,
          'error_text' => 'This user is blocked!',
        ));
        return;
      }
   /* check for ability to create new user account */
      $is_create_new_user = variable_get('gplus_sync_is_create_new_user', TRUE);
      if (!$user && !$is_create_new_user) {
        drupal_set_message(t('Registration of new users via Google+ button is disabled! Only users with exist profile can login.'), 'error');
        print json_encode(array(
          'status' => 'error',
          'uid' => 0,
          'redirect' => '/',
          'error_code' => 3,
          'error_text' => 'Registration of new users via Google+ button is disabled! Only users with exist profile can login.',
        ));
        return;
      }
   /* create new user if not exist */
      if (!$user && $user_info['filteredName']) {
        $pass = user_password();
        $user = array(
          'name'     => $user_info['filteredName'],
          'pass'     => user_password(),
          'status'   => 1,
          'timezone' => NULL,
          'mail'     => $user_info['email'],
          'init'     => $user_info['email'],
        );
        $user = user_save(NULL, $user);
        if (isset($user->uid)) {
          db_update('users')->fields(array('gplus_sync_is_external_user' => 1))->condition('uid', $user->uid)->execute();
          drupal_set_message(t('New user was created. UID = %uid, name = %name, email = %email', array('%uid' => $user->uid, '%name' => $user_info['filteredName'], '%email' => $user_info['email'])));
          watchdog('gplus_sync', 'New user was created. UID = %uid, name = %name, email = %email', array('%uid' => $user->uid, '%name' => $user_info['filteredName'], '%email' => $user_info['email']));
        }
      }
   /* login to user profile */
      if (isset($user->uid)) {
        $GLOBALS['user'] = $user;
        user_login_finalize();
        print json_encode(array(
          'status' => 'login',
          'uid' => $user->uid,
          'redirect' => url('user/'.$user->uid),
          'error_code' => 0,
          'error_text' => '',
        ));
      }
   /* save and log google data */
      if ($user->uid) {
        db_update('users')->fields(array(
           'gplus_sync_token'            => $token->id_token,
           'gplus_sync_id'               => $user_info['id'],
           'gplus_sync_given_name'       => $user_info['givenName'],
           'gplus_sync_family_name'      => $user_info['familyName'],
           'gplus_sync_name'             => $user_info['name'],
           'gplus_sync_gender'           => $user_info['gender'],
           'gplus_sync_url_profile'      => $user_info['link'],
           'gplus_sync_url_picture'      => $user_info['picture'],
           'gplus_sync_locale'           => $user_info['locale'],
           'gplus_sync_language'         => isset($user_info_plus['language'])        ? $user_info_plus['language']            : NULL,
           'gplus_sync_birthday'         => isset($user_info_plus['birthday'])        ? strtotime($user_info_plus['birthday']) : NULL,
           'gplus_sync_current_location' => isset($user_info_plus['currentLocation']) ? $user_info_plus['currentLocation']     : NULL,
        ))->condition('uid', $user->uid)->execute();
        watchdog('gplus_sync', 'Drupal sign on.'.GPLUS_SYNC_HTML_BR.
                               'Drupal uid = !drupalUid'.GPLUS_SYNC_HTML_BR.
                               'Drupal filteredName = !filteredName'.GPLUS_SYNC_HTML_BR.
                               'Google input code = !code'.GPLUS_SYNC_HTML_BR.
                               'Google token = !token'.GPLUS_SYNC_HTML_BR.
                               'Google id = !id'.GPLUS_SYNC_HTML_BR.
                               'Google email = !email'.GPLUS_SYNC_HTML_BR.
                               'Google givenName = !givenName'.GPLUS_SYNC_HTML_BR.
                               'Google familyName = !familyName'.GPLUS_SYNC_HTML_BR.
                               'Google name = !name'.GPLUS_SYNC_HTML_BR.
                               'Google gender = !gender'.GPLUS_SYNC_HTML_BR.
                               'Google link = !link'.GPLUS_SYNC_HTML_BR.
                               'Google picture = !picture'.GPLUS_SYNC_HTML_BR.
                               'Google locale = !locale'.GPLUS_SYNC_HTML_BR.
                               'Google language = !language'.GPLUS_SYNC_HTML_BR.
                               'Google birthday = !birthday'.GPLUS_SYNC_HTML_BR.
                               'Google currentLocation = !currentLocation', array(
          '!drupalUid'       => $user->uid,
          '!filteredName'    => $user_info['filteredName'],
          '!code'            => $_POST['code'],
          '!token'           => truncate_utf8($token->id_token, 50, FALSE, TRUE),
          '!id'              => $user_info['id'],
          '!email'           => $user_info['email'],
          '!givenName'       => $user_info['givenName'],
          '!familyName'      => $user_info['familyName'],
          '!name'            => $user_info['name'],
          '!gender'          => $user_info['gender'],
          '!link'            => $user_info['link'],
          '!picture'         => $user_info['picture'],
          '!locale'          => $user_info['locale'],
          '!language'        => isset($user_info_plus['language'])        ? $user_info_plus['language']        : t(GPLUS_SYNC_HTML_NA),
          '!birthday'        => isset($user_info_plus['birthday'])        ? $user_info_plus['birthday']        : t(GPLUS_SYNC_HTML_NA),
          '!currentLocation' => isset($user_info_plus['currentLocation']) ? $user_info_plus['currentLocation'] : t(GPLUS_SYNC_HTML_NA),
        ));
        return;
      }
    }
  }
  print json_encode(array(
    'status' => 'error',
    'uid' => 0,
    'redirect' => '',
    'error_code' => 1,
    'error_text' => 'Request code or client ID or client secret is invalid!',
  ));
  return;
}

/**
 * gplus_sync_prepare_user_name().
 */
function gplus_sync_prepare_user_name($orig_name) {
  $name = '';
  if ($orig_name) {
 /* filter characters (look at user_validate_name) */
    preg_match_all("/[\x{80}-\x{F7} a-z0-9@_.'-]/i", $orig_name, $f_result);
    if (isset($f_result[0]) && count($f_result[0])) {
      $name = implode('', $f_result[0]);
   /* remove multiple spaces and trim the name */
      $name = trim($name);
      $name = preg_replace('/[ ]+/', ' ', $name);
      if ($name) {
     /* check length (reserve 3 characters for number in next step) */
        $name = substr($name, 0, USERNAME_MAX_LENGTH - 3);
     /* check if the name is unique */
        $i = 0;
        do {
          $query = db_select('users', 'u');
          $query->addExpression('count(*)', 'matches');
          $query->condition('u.name', (++$i) == 1 ? $name : $name.$i);
          $matches = $query->execute()->fetchField();
        } while ($matches);
        if ($i > 1) {
          $name.= $i;
        }
      }      
    }
  }
  return $name;
}
