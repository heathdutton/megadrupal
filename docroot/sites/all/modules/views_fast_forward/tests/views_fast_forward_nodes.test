<?php

/**
 * @file
 * Unit and Web testcases for Nodes using Fields and Content displays.
 */

require_once 'views_fast_forward_test_case.php';

/**
 * @class
 *
 * This suite tests the forward behavior for the Node entity.
 */
class ViewsFastForwardNodes extends ViewsFastForwardTestCase {
  private $nids;
  private $view;

  static public function getInfo() {
    return array(
      'name' => 'Views Fast Forward Unit Tests - Nodes',
      'description' => 'Unit Tests for the Nodes entity in Views Fast Forward',
      'group' => 'Views Fast Forward',
    );
  }

  /**
   * Setup function
   *
   * Create some nodes and a view based upon those nodes.
   */
  public function setUp($modules = array()) {
    parent::setUp();

    // Create 4 nodes
    $this->nids = $this->create_nodes(4);

    // Create a view based on nodes and page bundle
    $this->view = $this->create_node_view();
  }

  /**
   * Teardown
   *
   * Cleanup our mess.
   */
  function tearDown() {
    parent::tearDown();
    $this->remove_nodes($this->nids);
    $this->view->delete();
  }

  /**
   * Begin tests for the "fields" display style.
   */

  /**
   * Test for fields display using automatic path detection.
   */
  public function testAutomaticPathFields() {
    // Load the basic View to be altered.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View and enable Views Fast Forward (automatic).
    $handler = $this->create_page_display_fields($view);
    $this->enable_views_fast_forward($handler);
    views_save_view($view);

    // Insert search query which returns only one result.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abcd')));

    // Assert one redirect happened
    $this->assertEqual($this->redirect_count, 1, 'One (and only one) redirection took place, good!');

    // Assert that we are on the node 1 page
    $this->assertEqual($this->url, url('node/1', array('absolute' => TRUE)));
  }

  /**
   * Test for fields display using a manually given path.
   */
  public function testManualPathFields() {
    // Load the basic View to be altered.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View and enable Views Fast Forward (manual).
    $handler = $this->create_page_display_fields($view);
    $this->enable_views_fast_forward($handler, TRUE, FALSE, 'some/random/path');
    views_save_view($view);

    // Insert search query which returns only one result.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abcd')));

    // Assert one redirect happened
    $this->assertEqual($this->redirect_count, 1, 'One (and only one) redirection took place, good!');

    // Assert that we are on the manually given path
    $this->assertEqual($this->url, url('some/random/path', array('absolute' => TRUE)));
  }

  /**
   * Test for fields display using a manually given path with token replacement.
   */
  public function testManualPathWithTokensFields() {
    // Load the basic View to be altered.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View and enable Views Fast Forward (automatic with tokens).
    $handler = $this->create_page_display_fields($view);
    $this->enable_views_fast_forward($handler, TRUE, TRUE, 'some/[title]/path');
    views_save_view($view);

    // Disable the title field to link to its node.
    // Otherwise it would try and output a full anchor instead of the title text.
    $handler->display->display_options['fields']['title']['link_to_node'] = FALSE;
    views_save_view($view);

    // Insert search query which returns only one result.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abcd')));

    // Assert one redirect happened.
    $this->assertEqual($this->redirect_count, 1, 'One (and only one) redirection took place, good!');

    // Assert that we are on the manually given path with "title" replaced.
    $this->assertEqual($this->url, url('some/abcd/path', array('absolute' => TRUE)));
  }

  /**
   * End tests for the "fields" display style.
   *
   * --
   *
   * Start tests for the "content" display style.
   */

  /**
   * Test for content display using automatic path detection.
   */
  public function testAutomaticPathContent() {
    // Load the basic View to be altered.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View and enable Views Fast Forward (automatic).
    $handler = $this->create_page_display_content($view);
    $this->enable_views_fast_forward($handler);
    views_save_view($view);

    // Insert search query which returns only one result.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abcd')));

    // Assert one redirect happened
    $this->assertEqual($this->redirect_count, 1, 'One (and only one) redirection took place, good!');

    // Assert that we are on the node 1 page
    $this->assertEqual($this->url, url('node/1', array('absolute' => TRUE)));
  }

  /**
   * Test for content display using a manually given path.
   */
  public function testManualPathContent() {
    // Load the basic View to be altered.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View and enable Views Fast Forward (manual).
    $handler = $this->create_page_display_content($view);
    $this->enable_views_fast_forward($handler, TRUE, FALSE, 'some/random/path');
    views_save_view($view);

    // Insert search query which returns only one result.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abcd')));

    // Assert one redirect happened
    $this->assertEqual($this->redirect_count, 1, 'One (and only one) redirection took place, good!');

    // Assert that we are on the manually given path
    $this->assertEqual($this->url, url('some/random/path', array('absolute' => TRUE)));
  }

  /**
   * Test for content display using a manually given path with token replacement.
   */

  // No test for token replacement with content since there are no usable tokens available.

  /**
   * End tests for the "content" display style.
   */
}