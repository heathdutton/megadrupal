<?php

/**
 * @file
 * Unit and Web testcases for generic behavior and bugs.
 */

require_once 'views_fast_forward_test_case.php';

/**
 * @class
 *
 * This suite tests the generic forward behavior (using nodes and fields)
 * and contains the regression tests for known and reported bugs.
 */
class ViewsFastForwardGenericAndBugs extends ViewsFastForwardTestCase {
  private $nids;
  private $view;

  static public function getInfo() {
    return array(
      'name' => 'Views Fast Forward Unit Tests - Generic & Bugs',
      'description' => 'Unit Tests for the generic items and regression testing for known and reported bugs in Views Fast Forward',
      'group' => 'Views Fast Forward',
    );
  }

  /**
   * Setup function
   *
   * Create some nodes and a view based upon those nodes.
   */
  public function setUp ($modules = array()) {
    parent::setUp();

    // Create 4 nodes
    $this->nids = $this->create_nodes(4);

    // Create a view based on nodes and page bundle
    $this->view = $this->create_node_view();
  }

  /**
   * Teardown
   *
   * Cleanup our mess.
   */
  function tearDown() {
    parent::tearDown();
    $this->remove_nodes($this->nids);
    $this->view->delete();
  }

  // Generic tests below.

  /**
   * Test that no redirect happens when more then one
   * result is returned (exploiting Node entity or this test).
   */
  public function testNoRedirectOnMultipleResults () {
    // Load the basic View to be altered.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View.
    $handler = $this->create_page_display_fields($view);
    views_save_view($view);

    // First visit the View page.
    $this->drupalGet('nodes/');

    // And check if our four test nodes are displayed.
    $this->assertRaw('<a href="/node/4">a</a>', 'Node 4 is present.');
    $this->assertRaw('<a href="/node/3">ab</a>', 'Node 3 is present.');
    $this->assertRaw('<a href="/node/2">abc</a>', 'Node 2 is present.');
    $this->assertRaw('<a href="/node/1">abcd</a>', 'Node 1 is present.');

    // Insert search query which returnes two results.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abc')));

    // Assert no redirect happened
    $this->assertEqual($this->redirect_count, 0, 'No redirection took place, good!');

    // Assert that we are on the results page and only two results come back.
    $this->assertNoRaw('<a href="/node/4">a</a>', 'Node 4 is filtered out.');
    $this->assertNoRaw('<a href="/node/3">ab</a>', 'Node 3 is fitlered out.');
    $this->assertRaw('<a href="/node/2">abc</a>', 'Node 2 is still present.');
    $this->assertRaw('<a href="/node/1">abcd</a>', 'Node 1 is still present.');

    // Now enable View Fast Forward and see if the behavior is the same.
    $this->enable_views_fast_forward($handler);
    views_save_view($view);

    // Insert search query which returnes two results.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abc')));

    // Assert no redirect happened
    $this->assertEqual($this->redirect_count, 0, 'No redirection took place, good!');

    // Assert that we are on the results page and only two results come back.
    $this->assertNoRaw('<a href="/node/4">a</a>', 'Node 4 is filtered out.');
    $this->assertNoRaw('<a href="/node/3">ab</a>', 'Node 3 is fitlered out.');
    $this->assertRaw('<a href="/node/2">abc</a>', 'Node 2 is still present.');
    $this->assertRaw('<a href="/node/1">abcd</a>', 'Node 1 is still present.');
  }

  // Bug regression tests below.

  /**
   * Test for bug #2445595: Redirects on no result view
   */
  public function testNoRedirectOnEmptyResults() {
    // Load the basic View to be altered.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View.
    $handler = $this->create_page_display_fields($view);
    views_save_view($view);

    // Insert search query which returnes no results.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abcde')));

    // Assert no redirect happened
    $this->assertEqual($this->redirect_count, 0);

    // Assert we get the "No results" text
    $this->assertText('The View did not return any results.');

    // Now enable View Fast Forward and see if the behavior is the same.
    $this->enable_views_fast_forward($handler);
    views_save_view($view);

    // Insert search query which returnes no results.
    $this->drupalGet('nodes/', array('query' => array('title' => 'abcde')));

    // Assert no redirect happened
    $this->assertEqual($this->redirect_count, 0, 'No redirection took place, good!');

    // Assert we get the "No results" text
    $this->assertText('The View did not return any results.');
  }

    /**
   * Test for bug #2456137: Options not available during export
   */
  public function testOptionsNotAvailableDuringExport() {
    // Load the basic View to be exported.
    $view = views_get_view('auto-view', TRUE);

    // Add preset page display to the View and enable Views Fast Forward.
    $handler = $this->create_page_display_fields($view);
    $this->enable_views_fast_forward($handler);
    views_save_view($view);

    // Now login as Admin.
    $user = $this->drupalCreateUser(array('administer views'));
    $this->drupalLogin($user);

    // And export the View.
    $this->drupalGet('admin/structure/views/view/auto-view/export');

    // Assert we see the set options in export output.
    // @TODO: Figure out if there is no better way to assert contents of a field.
    $this->assertRaw("\$handler-&gt;display-&gt;display_options[&#039;ff_enabled&#039;] = TRUE;");
    $this->assertRaw("\$handler-&gt;display-&gt;display_options[&#039;ff_manual&#039;] = FALSE;");
    $this->assertRaw("\$handler-&gt;display-&gt;display_options[&#039;ff_tokenize&#039;] = FALSE;");

    // Now change the settings a bit.
    $this->enable_views_fast_forward($handler, TRUE, TRUE, '/a/test/path');
    views_save_view($view);

    // And export the View again.
    $this->drupalGet('admin/structure/views/view/auto-view/export');

    // Assert we see the set options in export output.
    // @TODO: Figure out if there is no better way to assert contents of a field.
    $this->assertRaw("\$handler-&gt;display-&gt;display_options[&#039;ff_enabled&#039;] = TRUE;");
    $this->assertRaw("\$handler-&gt;display-&gt;display_options[&#039;ff_manual&#039;] = TRUE;");
    $this->assertRaw("\$handler-&gt;display-&gt;display_options[&#039;ff_tokenize&#039;] = TRUE;");
    $this->assertRaw("\$handler-&gt;display-&gt;display_options[&#039;ff_path&#039;] = &#039;/a/test/path&#039;");
  }
}