<?php

/**
 * Implements hook_hook_info().
 */
function entity_is_public_hook_info() {
  return array_fill_keys(array(
    'entity_is_public',
    'entity_is_public_alter',
  ), array('group' => 'entity'));
}

/**
 * Determine if an entity is publicly visible.
 *
 * @param string $entity_type
 *   An entity type of $entity.
 * @param object $entity
 *   The entity object.
 * @param array $options
 *   An optional array of options to use when determining publicity.
 * @param array $data
 *   An optional array of additional data to use when determining publicity.
 *
 * @return bool
 *   TRUE if the entity is publicly visible, or FALSE otherwise.
 */
function entity_is_public($entity_type, $entity, array $options = array(), array $data = array()) {
  $data += array(
    'entity_type' => $entity_type,
    'entity' => $entity,
    'uri' => entity_uri($entity_type, $entity),
  );

  $is_public = FALSE;

  foreach (module_implements('entity_is_public') as $module) {
    $result = module_invoke($module, 'entity_is_public', $entity_type, $entity, $options, $data);
    if (isset($result)) {
      $is_public = $result;
      if (!$is_public) {
        // Do not bother checking the rest of the implementations if something
        // returned FALSE.
        break;
      }
    }
  }

  // Allow any modules to alter the result before returning it.
  drupal_alter('entity_is_public', $is_public, $data, $options);
  return $is_public;
}

/**
 * Implements hook_entity_is_public() on behalf of system.module.
 */
function system_entity_is_public($entity_type, $entity, array $options, array $data) {
  if (empty($data['uri']['path'])) {
    // Entity must have a URI.
    return FALSE;
  }
  if ($data['uri']['path'] == variable_get('site_frontpage', 'node')) {
    // If the entity is the front page, it should be visible.
    return TRUE;
  }
  elseif (path_is_admin($data['uri']['path'])) {
    // Entity must not have an administrative path.
    return FALSE;
  }
}

/**
 * Implements hook_entity_is_public() on behalf of path.module.
 */
function path_entity_is_public($entity_type, $entity, array $options, array $data) {
  if (!empty($options['alias required']) && !empty($data['uri']['path'])) {
    return (bool) drupal_lookup_path('alias', $data['uri']['path'], NULL);
  }
}

/**
 * Implements hook_entity_is_public() on behalf of entity.module.
 */
function entity_entity_is_public($entity_type, $entity, array $options, array $data) {
  return entity_access('view', $entity_type, $entity, drupal_anonymous_user());
}

/**
 * Implements hook_entity_is_public() on behalf of rabbit_hole.module.
 */
function rabbit_hole_entity_is_public($entity_type, $entity, array $options, array $data) {
  return rabbit_hole_get_action($entity_type, $entity) == RABBIT_HOLE_DISPLAY_CONTENT;
}

/**
 * Implements hook_entity_is_public() on behalf of page_manager.module.
 *
 * Checks if there is a page manager task that returns
 */
function page_manager_entity_is_public($entity_type, $entity, array $options, array $data) {
  $return = $task = NULL;

  switch ($entity_type) {
    case 'taxonomy_term':
      $task = page_manager_get_task('term_view');
      break;
    default:
      $task = page_manager_get_task($entity_type . '_view');
      break;
  }

  if (!empty($task) && !$task['disabled']) {
    ctools_include('context');
    ctools_include('context-task-handler');
    $args = array($entity);
    $contexts = ctools_context_handler_get_task_contexts($task, '', $args);
    $subtask = '';
    $handlers = page_manager_load_sorted_handlers($task, $subtask, TRUE);

    // Switch user to anonymous.
    global $user;
    $original_user = $user;
    $old_state = drupal_save_session();
    drupal_save_session(FALSE);
    $user = drupal_anonymous_user();

    if ($id = ctools_context_handler_get_render_handler($task, $subtask, $handlers, $contexts, $args)) {
      $info = ctools_context_handler_render_handler($task, $subtask, $handlers[$id], $contexts, $args, FALSE);
      if (!empty($info['response code']) && $info['response code'] != 200) {
        $return = FALSE;
      }
    }

    $user = $original_user;
    drupal_save_session($old_state);
  }

  return $return;
}
