<?php

/**
 * @file
 * Show/Hide Menu based on User.
 */

/**
 * Implements hook_translated_menu_link_alter().
 */
function menu_per_user_translated_menu_link_alter(&$item, $map) {
  global $user;
  if (!empty($item['access'])) {
    // Administrator will access all menu's.
    if (strpos(current_path(), 'admin/structure/menu/manage/' . $item['menu_name']) === 0 && user_access('administer menu')) {
      return;
    }
    $item['menu_visibility'] = menu_per_user_check($item['mlid']);
    // Check count of user's in menu.
    if (count($item['menu_visibility']['users']) > 0) {
      foreach ($item['menu_visibility']['users'] as $uid) {
        // If userid is equal to menu user id.
        if ($uid == $user->uid) {
          $access = 'UNBLOCK';
          break;
        }
        elseif ($uid == 0) {
          $access = 'BLOCK';
          break;
        }
        // Block menu.
        else {
          $access = 'BLOCK';
        }
      }
      // Access FALSE if Menu not for USER.
      if ($access == 'BLOCK') {
        $item['access'] = FALSE;
      }
    }
  }
}

/**
 * Fetch User(s) using menuID.
 */
function menu_per_user_check($menu_id) {
  $visibility = array();
  if (!empty($menu_id)) {
    $visibility['users'] = db_query("SELECT user_id FROM {user_menu_visibility} WHERE menu_id = :menu_id", array(':menu_id' => $menu_id))->fetchCol();
    module_invoke_all('menu_per_user', $visibility, $menu_id);
  }
  return $visibility;
}

/**
 * Implements hook_menu_link_insert().
 */
function menu_per_user_menu_link_insert($link) {
  // If checkbox.
  if (!empty($link['users'])) {
    if ($link['active'] == 0) {
      $users = array_filter($link['users']);
      $query = db_insert('user_menu_visibility');
      $query->fields(array('menu_id', 'user_id'));
      foreach ($users as $user_id) {
        $query->values(array('menu_id' => $link['mlid'], 'user_id' => $user_id));
      }
      $query->execute();
      menu_cache_clear_all();
    }
  }
  // If Autocomplete.

  if (!empty($link['user_select'])) {
    if ($link['active'] == 1) {
      $users = explode(',', $link['user_select']);
      $uid = '';
      foreach ($users as $user_name) {
        $uid = _menu_per_user_name(trim($user_name, " "));
        $query = db_insert('user_menu_visibility');
        $query->fields(array('menu_id', 'user_id'));
        $query->values(array('menu_id' => $link['mlid'], 'user_id' => $uid));
        $query->execute();
      }
      menu_cache_clear_all();
    }
  }
  // If User Anonymous.
  if (!empty($link['anonymous'])) {
    if (strlen($link['anonymous']['anonymous_user']) > 1) {
      $query = db_insert('user_menu_visibility');
      $query->fields(array('menu_id', 'user_id'));
      $query->values(array('menu_id' => $link['mlid'], 'user_id' => 0));
      $query->execute();
    }
  }
}

/**
 * Load all User visibility data for a menu link in checkbox.
 */
function menu_per_user_load($menu_id) {
  $visibility = array();
  if (!empty($menu_id)) {
    $visibility['users'] = db_query("SELECT user_id FROM {user_menu_visibility} WHERE menu_id = :menu_id", array(':menu_id' => $menu_id))->fetchCol();
    foreach ($visibility['users'] as $users) {
      $users_array['users'][$users] = $users;
    }
  }
  if (!empty($users_array)) {
    return $users_array;
  }
  else {
    return '';
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function menu_per_user_menu_link_alter(&$item) {
  $item['options']['alter'] = TRUE;
  if (!empty($item['mlid'])) {
    _menu_per_user_menu_link_update($item);
  }
}

/**
 * Implements hook_menu_link_update().
 */
function _menu_per_user_menu_link_update($link) {
  db_delete('user_menu_visibility')
      ->condition('menu_id', $link['mlid'])
      ->execute();
  menu_per_user_menu_link_insert($link);
}

/**
 * Load all User visibility data for a menu link in autocomplete.
 */
function menu_per_user_autocomplete_load($menu_id) {
  $visibility = array();
  $users_array = '';
  if (!empty($menu_id)) {
    $visibility['users'] = db_query("SELECT user_id FROM {user_menu_visibility} WHERE menu_id = :menu_id", array(':menu_id' => $menu_id))->fetchCol();
    foreach ($visibility['users'] as $users) {
      $name = _menu_per_user_id($users);
      $users_array .= $name . ', ';
    }
  }
  return rtrim($users_array, ", ");
}

/**
 * Implements hook_menu_link_delete().
 */
function menu_per_user_menu_link_delete($link) {
  db_delete('user_menu_visibility')
      ->condition('menu_id', $link['mlid'])
      ->execute();
  menu_cache_clear_all();
}

/**
 * Implements hook_user_role_delete().
 */
function menu_per_user_user_role_delete($role) {
  // Fetch All user(s) related to Deleted Role.
  $user_select = db_select('users_roles', 'ur');
  $user_select->fields('ur', array('uid'));
  $user_select->condition('rid', $role->rid, '=');
  $user_select_result = $user_select->execute()->fetchAll();
  if (!empty($user_select_result)) {
    // Delete uid from table "user_menu_visibility".
    foreach ($user_select_result as $uid) {
      db_delete('user_menu_visibility')
          ->condition('user_id', $uid)
          ->execute();
    }
    menu_cache_clear_all();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_per_user_form_menu_edit_item_alter(&$form, &$form_state) {
  // Menu Visibility settings.
  $form['user_menu_visibility'] = array(
    '#type' => 'item',
    '#title' => t('Menu Visibility settings'),
  );
  $form['menu_visibility'] = array(
    '#type' => 'vertical_tabs',
    '#attached' => array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'menu_per_user') . '/menu_per_user.js',
      ),
    ),
  );
  // Default Values for checkbox.
  $user_menu_visibility = menu_per_user_load($form['mlid']['#value']);
  // Default Values for autocomplete.
  $user_menu_autocomplete_visibility = menu_per_user_autocomplete_load($form['mlid']['#value']);
  $form['menu_visibility']['user'] = array(
    '#type' => 'fieldset',
    '#title' => t('User(s)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'menu_visibility',
    '#weight' => 10,
  );
  // Fetch User Names.
  $users = _menu_per_user_fetch_names();
  $active = array(0 => t('Checkbox'), 1 => t('AutoComplete'));
  $form['menu_visibility']['user']['active'] = array(
    '#type' => 'radios',
    '#title' => t('Select Type.'),
    '#options' => $active,
  );
  if (isset($user_menu_visibility['users'][0])) {
    $default_value = array('anonymous_user');
  }
  $form['menu_visibility']['user']['anonymous'] = array(
    '#type' => 'checkboxes',
    '#options' => array_map('check_plain', array('anonymous_user' => 'Anonymous User.')),
    '#default_value' => isset($default_value) ? $default_value : array(),
  );
  $form['menu_visibility']['user']['users'] = array(
    '#prefix' => '<div class="users-checkbox">',
    '#type' => 'checkboxes',
    '#default_value' => isset($user_menu_visibility['users']) ? $user_menu_visibility['users'] : array(),
    '#options' => array_map('check_plain', $users),
    '#suffix' => '</div>',
  );
  $form['menu_visibility']['user']['user_select'] = array(
    '#prefix' => '<div class="users-autocomplete">',
    '#type' => 'textfield',
    '#title' => t('Type UserName.'),
    '#default_value' => isset($user_menu_autocomplete_visibility) ? $user_menu_autocomplete_visibility : array(),
    '#autocomplete_path' => 'users/autocomplete',
    '#suffix' => '</div>',
  );
  $form['menu_visibility']['user']['markup'] = array(
    '#markup' => t('Show/hide this menu link only for the selected user(s). If you select no user, the menu link will be shown to all user(s).'),
  );
}

/**
 * Autocomplete with comma(,) separated.
 */
function _menu_per_user_autosearch($string) {
  $matches = array();
  if ($string) {
    $items = array_map('trim', explode(',', $string));
    $last_item = array_pop($items);
    $prefix = implode(', ', $items);
    $result = db_select('users')->fields('users', array('uid', 'name'))->condition('name', '%' . db_like($last_item) . '%', 'LIKE')->range(0, 10)->execute();
    foreach ($result as $user) {
      if (!in_array($user->name, $items)) {
        $value = !empty($prefix) ? $prefix . ', ' . $user->name : $user->name;
        $matches[$value] = check_plain($value);
      }
    }
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_menu().
 */
function menu_per_user_menu() {
  $items['users/autocomplete'] = array(
    'page callback' => '_menu_per_user_autosearch',
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Fecth Ussernames with ID's for Checkbox.
 */
function _menu_per_user_fetch_names() {
  $user_query = db_select('users', 'u');
  $user_query->fields('u', array('uid', 'name'));
  $user_result = $user_query->execute()->fetchAll();
  $users = array();
  foreach ($user_result as $user_array) {
    if (!empty($user_array->name)) {
      $users[$user_array->uid] = $user_array->name;
    }
  }
  return $users;
}

/**
 * Fetch User ID by username.
 */
function _menu_per_user_name($user_name) {
  $uid_query = db_select('users', 'u');
  $uid_query->fields('u', array('uid'));
  $uid_query->condition('name', $user_name, '=');
  $uid_query_result = $uid_query->execute()->fetchField();
  return $uid_query_result;
}

/**
 * Fetch Username by uid.
 */
function _menu_per_user_id($uid) {
  $uid_query = db_select('users', 'u');
  $uid_query->fields('u', array('name'));
  $uid_query->condition('uid', $uid, '=');
  $uid_query_result = $uid_query->execute()->fetchField();
  return $uid_query_result;
}
