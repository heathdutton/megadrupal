<?php

/**
 * @file
 * Provides an action for creating a concatenated archive of selected files.
 * An entry in the {file_managed} table is created for the newly created archive,
 * and it is marked as permanent or temporary based on the operation settings.
 */

/**
 * Implements hook_action_info().
 */
function concat_action_info() {
  $actions = array();
  $actions['concat_action'] = array(
    'type' => 'file',
    'label' => t('Create a concatenated archive of selected files'),
    // This action only works when invoked through VBO. That's why it's
    // declared as non-configurable to prevent it from being shown in the
    // "Create an advanced action" dropdown on admin/config/system/actions.
    'configurable' => FALSE,
    'vbo_configurable' => TRUE,
    'behavior' => array('views_property'),
    'triggers' => array('any'),
  );
  return $actions;
}

/**
 * Callback to append each file to the archive.
 */
function concat_action($file, $context) {
  global $user;
  static $archive_contents = array();
  if (is_readable($file->uri)) {
    $destination = $context['destination'];
    // These files should be small so read into memory.
    file_put_contents(drupal_realpath($destination), file_get_contents(drupal_realpath($file->uri)), FILE_APPEND);
  }
  // The operation is complete, create a file entity and provide a download
  // link to the user.
  if ($context['progress']['current'] == $context['progress']['total']) {
    $archive_file = new stdClass();
    $archive_file->uri      = $destination;
    $archive_file->filename = basename($destination);
    $archive_file->filemime = file_get_mimetype($destination);
    $archive_file->uid      = $user->uid;
    $archive_file->status   = $context['settings']['temporary'] ? FALSE : FILE_STATUS_PERMANENT;
    file_save($archive_file);
    $url = file_create_url($archive_file->uri);
    $url = l($url, $url, array('absolute' => TRUE));
    _views_bulk_operations_log(t('An archive has been created and can be downloaded from: !url', array('!url' => $url)));
  }
}

/**
 * Configuration form shown to the user before the action gets executed.
 */
function concat_action_form($context) {
  // Pass the scheme as a value, so that the submit callback can access it.
  $form['scheme'] = array(
    '#type' => 'value',
    '#value' => $context['settings']['scheme'],
  );
  $form['filename'] = array(
    '#type' => 'textfield',
    '#title' => t('Filename'),
    '#default_value' => 'vbo_archive_' . date('Ymd'),
    '#field_suffix' => '.txt',
    '#description' => t('The name of the archive file.'),
  );
  return $form;
}

/**
 * Assembles a sanitized and unique URI for the archive, and returns it for
 * usage by the action callback (concat_action).
 */
function concat_action_submit($form, $form_state) {
  // Validate the scheme, fallback to public if it's somehow invalid.
  $scheme = $form_state['values']['scheme'];
  if (!file_stream_wrapper_valid_scheme($scheme)) {
    $scheme = 'public';
  }
  $destination = $scheme . '://' . basename($form_state['values']['filename']) . '.txt';
  // If the chosen filename already exists, file_destination() will append
  // an integer to it in order to make it unique.
  $destination = file_destination($destination, FILE_EXISTS_RENAME);
  return array(
    'destination' => $destination,
  );
}

/**
 * Settings form (embedded into the VBO field settings in the Views UI).
 */
function concat_action_views_bulk_operations_form($options) {
  $scheme_options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL_NORMAL) as $scheme => $stream_wrapper) {
    $scheme_options[$scheme] = $stream_wrapper['name'];
  }
  if (count($scheme_options) > 1) {
    $form['scheme'] = array(
      '#type' => 'radios',
      '#title' => t('Storage'),
      '#options' => $scheme_options,
      '#default_value' => !empty($options['scheme']) ? $options['scheme'] : variable_get('file_default_scheme', 'public'),
      '#description' => t('Select where the archive should be stored. Private file storage has significantly more overhead than public files, but allows restricted access.'),
    );
  }
  else {
    $scheme_option_keys = array_keys($scheme_options);
    $form['scheme'] = array(
      '#type' => 'value',
      '#value' => reset($scheme_option_keys),
    );
  }
  $form['temporary'] = array(
    '#type' => 'checkbox',
    '#title' => t('Temporary'),
    '#default_value' => isset($options['temporary']) ? $options['temporary'] : TRUE,
    '#description' => t('Temporary files older than 6 hours are removed when cron runs.'),
  );
  return $form;
}
