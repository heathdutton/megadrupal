<?php
/**
 * @file
 * Code for the at_slider feature.
 */

include_once 'at_slider.features.inc';

/**
 * Implements hook_entity_view_alter()
 */
function at_slider_entity_view_alter(&$build, $entity_type) {
    if (('bean' === $entity_type) && 'slider' === $build['#bundle']) {
        at_slider_attach_js($build);
    }
}

/**
 * Attach JS files & configuration for slider block.
 */
function at_slider_attach_js(&$build) {
    $lib = substr(at_library('jquery.cycle'), strlen(DRUPAL_ROOT) + 1);

    $build['#attributes']['class'][] = "slider-{$build['#entity']->delta}";
    $build['#prefix'] = '<div class="at-slider" data-delta="slider-'. $build['#entity']->delta .'"';
    if (!empty($build['slider_image_wrapper'][0])) {
        $build['slider_image_wrapper']['#access'] = FALSE;
        $build['#prefix'] .= sprintf(
          ' style="background-image: url(\'%s\'); background-position: 50% 50%;"',
          preg_replace(
            '/.+src="([^"]+)".+/',
            '$1',
            theme('image_formatter', $build['slider_image_wrapper'][0])
          )
        );
    }
    $build['#prefix'] .= '>';
    $build['#suffix'] = '</div>';

    // Build options
    $options = at_slider_get_js_options($build['#entity']);

    if (1 < count(element_children($build['slider_item']))) {
        $build['#attached']['js'] = array(
          $lib . '/jquery.cycle.all.min.js',
          drupal_get_path('module', 'at_slider') . '/misc/js/slider.js',
          array('type' => 'setting', 'data' => array('at_slider' => array(
            $build['#entity']->delta => $options,
          ))),
        );
    }


    $build['slider_item'] = array(
      '#markup' => at_slider_render_field_collection($build['slider_item'], $options),
    );
}

/**
 * Build Javascript options for bean-slider.
 *
 * Options:
 *
 * - %delta: {}
 * - default: {}
 *
 * Sample options can be found at: http://jquery.malsup.com/cycle2/api/#options
 */
function at_slider_get_js_options($bean) {
    $config = at_container('helper.config_fetcher')->getItems('at_slider', 'slider_options', 'options');
    if (isset($config[$bean->delta])) {
        return $config[$bean->delta];
    }

    if (isset($config['default'])) {
        return $config['default'];
    }

    return array('speed' => 600);
}

function at_slider_render_field_collection($build, &$options) {
    // Append data
    if (!empty($options['wrapper-after'])) {
        $build['#suffix'] = isset($build['#suffix']) ? $build['#suffix'] : '';
        $build['#suffix'] = at_container('helper.content_render')->render($options['wrapper-after']). $build['#suffix'];
        unset($options['wrapper-after']);
    }

    // Use custom template to render field collection item
    if (!empty($options['item-template'])) {
        $twig = at_container('twig');
        foreach (element_children($build) as $i) {
            $build[$i] = array(
                '#markup' => $twig->render($options['item-template'], $build[$i])
            );
        }
        unset($options['item-template']);
    }

    $return = render($build);

    // Add data attributes
    if (!empty($options['wrapper-attributes'])) {
        $find = '/<(div[^>]*class="field__items"[^>]*)>/';
        $replace = '<$1 ' .drupal_attributes($options['wrapper-attributes']) . '>';
        unset($options['wrapper-attributes']);
        $return = preg_replace($find, $replace, $return, 1);
    }

    return $return;
}
