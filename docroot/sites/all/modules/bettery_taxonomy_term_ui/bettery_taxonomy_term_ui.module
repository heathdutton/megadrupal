<?php

/**
 * @file
 * module file
 *
 */

function bettery_taxonomy_term_ui_form_nodeorder_admin_display_form_alter(&$form, &$form_state) {
  $form['#theme'][0] = 'better_nodeorder_admin_display_form';

  //Get all node bundles that have a field using the vocabulary of this term
  $vocab_name = $form['#term']->vocabulary_machine_name;
  $bundle_fields_data = field_info_instances("node");
  $filtered_bundle_array = array();
  foreach ($bundle_fields_data as $bundle_name => $bundle_array) {
    foreach ($bundle_array as $field_name => $field_array) {
      if(isset($field_array['widget']['module']) && $field_array['widget']['module'] == "taxonomy"){
        // Get the field info
        $info = field_info_field($field_name);
        if($info['settings']['allowed_values'][0]['vocabulary'] == $vocab_name){
          $filtered_bundle_array[] = $bundle_name;
          break;
        }
      }
    }
  }

  if(!empty($filtered_bundle_array)){
    $form['add_content'] = array(
      '#type' => 'fieldset',
      '#weight' => 0,
      '#title' => t('Add content'),
      '#attributes' => array('class' => array('container-inline')),
    );

    //http://cgit.drupalcode.org/entityreference_autocomplete/tree/README.txt
    $form['add_content']['add_reference'] = array(
      '#type' => 'entityreference',
      '#weight' => -10,
      '#size'=> 120,
      '#title' => t(''),
      '#era_entity_type' => 'node',  // Mandatory.
      '#era_bundles' => $filtered_bundle_array, // Optional (Any bundle by default).
      '#era_cardinality' => 1,       // Optional (1 By default).
      '#era_query_settings' => array(
        'limit' => 15, // Default is 50.
        'property_conditions' => array(
          // 'entity property', 'filter value', 'operator'.
          array('status', 1 , '='),
        ),
        'field_conditions' => array(
          // 'field name', 'column', 'value', 'op', 'delta', 'language'.
        ),
      ),
    );
    $form['add_content']['add_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
      '#access' => TRUE,
      '#submit' => array('bettery_taxonomy_term_ui_add_entity_submit'),
      '#weight' => 10,
    );
  }
}

/**
 * Implements hook_theme().
 */
function bettery_taxonomy_term_ui_theme() {
  return array(
    'better_nodeorder_admin_display_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bettery_taxonomy_term_ui_menu() {
  $items['nodeorder/remove/%/%'] = array(
    'page callback' => 'drupal_get_form',
	'page arguments' => array('bettery_taxonomy_term_ui_remove_entity_form', 2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function bettery_taxonomy_term_ui_remove_entity_form($form, &$form_state, $term_id, $entity_id) {
  $form['term_id'] = array(
    '#type' => 'value',
    '#value' => $term_id,
  );
  $form['entity_id'] = array(
    '#type' => 'value',
    '#value' => $entity_id,
  );
  $node = node_load($entity_id);
  $term = taxonomy_term_load($term_id);
  return confirm_form($form, t('Are you sure?'), "taxonomy/term/$term_id/order", t('Are you sure you want to remove %entity_title from %term_title? This action cannot be undone.', array('%term_title' => $term->name, '%entity_title' => $node->title)), t('Remove'), t('Cancel'));
}

function bettery_taxonomy_term_ui_add_entity_submit($form, &$form_state) {
  $term_id = $form['#term']->tid;
  $vocab_name = $form['#term']->vocabulary_machine_name;
  $entity_id = $form_state['values']['add_content']['add_reference']['entity_id'];
  $node = node_load($entity_id);
  $save_node = FALSE;
  $field_data = field_info_instances("node",$node->type);
  foreach ($field_data as $field_name => $field_array) {
    if(isset($field_array['widget']['module']) && $field_array['widget']['module'] == "taxonomy"){
      // Get the field info
      $info = field_info_field($field_name);
      if($info['settings']['allowed_values'][0]['vocabulary'] == $vocab_name){
        $node->{$field_name}[LANGUAGE_NONE][] = array('tid' => $term_id);
        $save_node = TRUE;
      }
    }
  }
  if($save_node){
    node_save($node);
  }
}

function bettery_taxonomy_term_ui_remove_entity_form_submit($form, &$form_state) {
  $term_id = $form['term_id']['#value'];
  $entity_id = $form['entity_id']['#value'];
  $node = node_load($entity_id);
  $save_node = FALSE;
  $field_data = field_info_instances("node",$node->type);
  foreach ($field_data as $field_name => $field_array) {
    if(isset($field_array['widget']['module']) && $field_array['widget']['module'] == "taxonomy"){
      foreach ($node->{$field_name}[LANGUAGE_NONE] as $key => $tids_arr) {
        if($tids_arr['tid'] == $term_id){
          //remove this term from node
          unset($node->{$field_name}[LANGUAGE_NONE][$key]);
          $save_node = TRUE;
        }
      }
      if($save_node && empty($node->{$field_name}[LANGUAGE_NONE])){
        unset($node->{$field_name}[LANGUAGE_NONE]);
      }
    }
  }
  if($save_node){
    node_save($node);
  }
  drupal_goto("taxonomy/term/$term_id/order");
}

/**
 * Returns HTML for the vocabulary overview form as a sortable list of vocabularies.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @see taxonomy_overview_vocabularies()
 * @ingroup themeable
 */
function theme_better_nodeorder_admin_display_form($variables) {
  $form = $variables['form'];
  $tid = $form['#term']->tid;

  drupal_add_tabledrag('nodeorder', 'order', 'sibling', 'node-weight');

  $errors = form_get_errors() != FALSE ? form_get_errors() : array();
  $rows = array();
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['#node'])) {
      $node = &$form[$key];

      $row = array();
      $row[] = drupal_render($node['title']);
      //dsm($form[$key]['#node']);
      $nid = $form[$key]['#node']->nid;
      $row[] = l(t('remove'), "nodeorder/remove/$tid/$nid");
      $node['weight']['#attributes']['class'] = array('node-weight');
      $row[] = drupal_render($node['weight']);
      $row = array('data' => $row);
      $rows[$key] = $row;
    }
  }

  // Add necessary classes to rows.
  $row_position = 0;
  foreach ($rows as $key => $row) {
    $rows[$key]['class'] = array();
    $rows[$key]['class'][] = 'draggable';

    // Add an error class if this row contains a form error.
    foreach ($errors as $error_key => $error) {
      if (strpos($error_key, $key) === 0) {
        $rows[$key]['class'][] = 'error';
      }
    }
    $row_position++;
  }

  if (empty($rows)) {
    $rows[] = array(array('data' => t('There are no nodes for this term.'), 'colspan' => '3'));
  }

  $header = array(t('Title'), t('Operations'), t('Weight'), );
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'nodeorder')));
  $output .= drupal_render_children($form);

  return $output;
}

// EOF
