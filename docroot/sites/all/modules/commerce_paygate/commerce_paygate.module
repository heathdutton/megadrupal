<?php

/**
 * @file
 * Implements PayGate PayWeb website payments in Drupal Commerce checkout.
 */

define('COMMERCE_PAYGATE_DEBUG', TRUE);

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paygate_commerce_payment_method_info() {
  $payment_methods = array();

  $icons = commerce_paygate_icons();
  $display_title = t('Secure credit card payment using PayGate', array('!logo' => $icons['paygate']));
  $display_title .= '<div class="commerce-paygate-icons">' . implode(' ', $icons) . '</div>';

  $payment_methods['paygate'] = array(
    'base' => 'commerce_paygate',
    'title' => t('PayGate'),
    'display_title' => $display_title,
    'short_title' => t('PayGate'),
    'description' => t('South African online payment gateway.'),
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'terminal' => FALSE, // Do not allow backend payments
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_paygate_settings_form($settings = NULL) {
  $form = array();

  $default_currency = variable_get('commerce_default_currency', 'ZAR');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'paygate_id' => '',
    'checksum_key' => '',
    'paygate_id_test' => '10011013800',
    'checksum_key_test' => 'secret',
    'transaction_mode' => 'test',
    'currency_code' => in_array($default_currency, array_keys(commerce_paygate_currencies())) ? $default_currency : 'ZAR',
  );

  $form['transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('Transaction mode used for processing orders. Use <em>Test</em> for testing.'),
    '#options' => array(
      'test' => t('Test'),
      'live' => t('Live'),
    ),
    '#default_value' => $settings['transaction_mode'],
  );
  $form['paygate_id'] = array(
    '#type' => 'textfield',
    '#title' => t('PayGate ID'),
    '#description' => t('Your PayGateID â€“ assigned by PayGate.'),
    '#default_value' => $settings['paygate_id'],
  );
  $form['paygate_id']['#element_validate'][] = '_commerce_paygate_paygateid_validate';
  $form['checksum_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Checksum key'),
    '#description' => t('The checksum key is only known by the merchant and PayGate.'),
    '#default_value' => $settings['checksum_key'],
  );
  $form['paygate_id_test'] = array(
    '#type' => 'textfield',
    '#title' => t('Test PayGate ID'),
    '#description' => t('PayGateID for testing. Default: <em>10011013800</em>'),
    '#default_value' => $settings['paygate_id_test'],
  );
  $form['paygate_id_test']['#element_validate'][] = '_commerce_paygate_paygateid_validate';
  $form['checksum_key_test'] = array(
    '#type' => 'textfield',
    '#title' => t('Test Checksum key'),
    '#description' => t('PayGate checksum key for testing. Default: <em>secret</em>'),
    '#default_value' => $settings['checksum_key_test'],
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#description' => t('Currency to send payments in.'),
    '#options' => commerce_paygate_currencies(),
    '#default_value' => variable_get('paygate_transaction_mode', 'test'),
  );

  return $form;
}

/**
 * Validation for settings form.
 */
function _commerce_paygate_paygateid_validate($element, &$form_state, $form) {
  if (!empty($element['#value']) && !is_numeric($element['#value'])) {
    form_error($element, t('%name must be numeric.', array('%name' => $element['#title'])));
  }
}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_paygate_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['paygate_information'] = array(
    '#markup' => '<span class="commerce-paygate-info">' . t('(Continue with checkout to complete payment via PayGate.)') . '</span>',
  );

  return $form;
}

/**
 * Payment method callback: redirect form.
 *
 * A wrapper around the module's general use function for building a redirect form.
 */
function commerce_paygate_redirect_form($form, &$form_state, $order, $payment_method) {
  // Merge default settings into the stored settings array.
  $default_currency = variable_get('commerce_default_currency', 'ZAR');
  $payment_method['settings'] += array(
    'paygate_id' => '',
    'checksum_key' => '',
    'paygate_id_test' => '10011013800',
    'checksum_key_test' => 'secret',
    'transaction_mode' => 'test',
    'currency_code' => in_array($default_currency, array_keys(commerce_paygate_currencies())) ? $default_currency : 'ZAR',
  );


  if (!isset($payment_method['settings']['transaction_mode'])) {
    drupal_set_message(t('PayGate transaction mode not set.'), 'error');
    return array();
  }
  else {
    if ($payment_method['settings']['transaction_mode'] == 'test') {
      drupal_set_message(t('PayGate test mode is active.'));
      if ($payment_method['settings']['paygate_id_test'] == '' || $payment_method['settings']['checksum_key_test'] == '') {
        drupal_set_message(t('PayGate test mode settings are incomplete.'), 'error');
        return array();
      }
    }
    elseif ($payment_method['settings']['transaction_mode'] == 'live') {
      if ($payment_method['settings']['paygate_id'] == '' || $payment_method['settings']['checksum_key'] == '') {
        drupal_set_message(t('PayGate live mode settings are incomplete.'), 'error');
        return array();
      }
    }
    else {
      drupal_set_message(t('Unknown PayGate transaction mode.'), 'error');
      return array();
    }

    $settings = array(
      // Return to the previous page when payment is canceled
      'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
      // Return to the payment redirect page for processing successful payments
      'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
      // Specify the current payment method instance ID in the notify_url
      'payment_method' => $payment_method['instance_id'],
    );

    return commerce_paygate_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
  }
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_paygate_redirect_form_validate($order, $payment_method) {
  // Merge default settings into the stored settings array.
  $default_currency = variable_get('commerce_default_currency', 'ZAR');
  $payment_method['settings'] += array(
    'paygate_id' => '',
    'checksum_key' => '',
    'paygate_id_test' => '10011013800',
    'checksum_key_test' => 'secret',
    'transaction_mode' => 'test',
    'currency_code' => in_array($default_currency, array_keys(commerce_paygate_currencies())) ? $default_currency : 'ZAR',
  );

  if ($payment_method['settings']['transaction_mode'] == 'live') {
    $paygate_id = $payment_method['settings']['paygate_id'];
    $checksum_key = $payment_method['settings']['checksum_key'];
  }
  else {
    $paygate_id = $payment_method['settings']['paygate_id_test'];
    $checksum_key = $payment_method['settings']['checksum_key_test'];
  }

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $charge = array(
    'amount' => $amount,
    'currency_code' => in_array($currency_code, array_keys(commerce_paygate_currencies())) ? $currency_code : $payment_method['settings']['currency_code'],
  );

  // This ensures all fields are present
  $checksum = commerce_paygate_generate_response_checksum($_POST, $checksum_key);

  // If checksum is empty, then data is invalid
  if ($checksum == '') {
    drupal_set_message(t('PayGate response is invalid.'), 'error');
    watchdog(
      'commerce_paygate',
        'PayGate response could not be decoded for order @order_id: <pre>' . check_plain(print_r($_POST, TRUE)) . '</pre>',
      array(
        '@order_id' => $order->order_id,
      ),
      WATCHDOG_NOTICE
    );
    commerce_paygate_transaction($payment_method, $order, $charge, COMMERCE_PAYMENT_STATUS_FAILURE, $_POST);
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
  }

  $compare_fields = array(
   'PAYGATE_ID' => $paygate_id,
   'REFERENCE' => $order->order_id,
   'AMOUNT' => $amount,
   'CHECKSUM' => $checksum,
  );

  // Determine if data has been tampered with
  foreach ($compare_fields as $field => $value) {
    if (!isset($_POST[$field]) || $_POST[$field] != $value) {
      drupal_set_message(t('PayGate response could not be authorised.'), 'error');
      watchdog(
        'commerce_paygate',
        'PayGate response could not be unauthorised for order @order_id.',
        array(
          '@order_id' => $order->order_id,
        ),
        WATCHDOG_NOTICE
      );
      return FALSE;
    }
  }

  // Response can now be parsed
  switch ($_POST['TRANSACTION_STATUS']) {
    case 0:
      // Error
      drupal_set_message(t('Your transaction could not be completed due to an error.<br/>Reason: @result_desc (@result_code)',
        array(
          '@result_desc' => $_POST['RESULT_DESC'],
          '@result_code' => $_POST['RESULT_CODE'],
          '@order_id' => $order->order_id,
          '@site_mail' => variable_get('site_mail', ''),
        )
      ), 'error');
      commerce_paygate_transaction($payment_method, $order, $charge, COMMERCE_PAYMENT_STATUS_FAILURE, $_POST);
      return FALSE;
    case 1:
      // Approved
      drupal_set_message(t('Your transaction was completed successfully.'), 'status');
      commerce_paygate_transaction($payment_method, $order, $charge, COMMERCE_PAYMENT_STATUS_SUCCESS, $_POST);
      break;
    case 2:
      // Declined
      drupal_set_message(t('Your transaction was declined.<br/>Reason: @result_desc (@result_code)',
        array(
          '@result_desc' => $_POST['RESULT_DESC'],
          '@result_code' => $_POST['RESULT_CODE'],
        )
      ), 'warning');
      commerce_paygate_transaction($payment_method, $order, $charge, COMMERCE_PAYMENT_STATUS_FAILURE, $_POST);
      return FALSE;
    default:
      return FALSE;

  }

  commerce_payment_redirect_pane_next_page($order);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_paygate_redirect_form_submit($order, $payment_method) {
}

/**
 * Creates the payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_paygate_transaction($payment_method, $order, $charge, $status, $data) {
  $transaction = commerce_payment_transaction_new('paygate', $order->order_id);

  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = is_null($data['TRANSACTION_ID']) ? '-1' : $data['TRANSACTION_ID'];
  $transaction->remote_status = is_null($data['RESULT_CODE']) ? '-1' : $data['RESULT_CODE'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $data;

  $transaction->status = $status;
  $transaction->message = $data['RESULT_DESC'];

  commerce_payment_transaction_save($transaction);
}


/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *
 * @return
 *   A renderable form array.
 */
function commerce_paygate_order_form($form, &$form_state, $order, $settings) {
  if ($settings['transaction_mode'] == 'live') {
    $paygate_id = $settings['paygate_id'];
    $checksum_key = $settings['checksum_key'];
  }
  else {
    $paygate_id = $settings['paygate_id_test'];
    $checksum_key = $settings['checksum_key_test'];
  }

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  $data = array(
    'PAYGATE_ID' => $paygate_id,
    'REFERENCE' => $order->order_id,
    'AMOUNT' => $amount,
    'CURRENCY' => in_array($currency_code, array_keys(commerce_paygate_currencies())) ? $currency_code : $settings['currency_code'],
    'RETURN_URL' => $settings['return'],
    'TRANSACTION_DATE' => format_date(time(), 'custom', 'Y-m-d h:i:s', 'Etc/UTC'),
    'EMAIL' => $order->mail,
  );

  $data['CHECKSUM'] = commerce_paygate_generate_request_checksum($data, $checksum_key);

  $form['#action'] = commerce_paygate_server_url($settings['transaction_mode']);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PayGate'),
    '#weight' => 1,
  );

  return $form;
}


/**
 * Returns a checksum for sending data.
 *
 * @return
 *   An md5 string of all data fields concatenated.
 */
function commerce_paygate_generate_request_checksum($data, $checksum_key) {
  $required_values = array(
    'PAYGATE_ID', 'REFERENCE', 'AMOUNT', 'CURRENCY', 'RETURN_URL', 'TRANSACTION_DATE',
  );
  $checksum_string = '';

  foreach ($required_values as $required) {
    if (!isset($data[$required]) || is_null($data[$required]) || $data[$required] == '') {
      drupal_set_message(t('Could not compute checksum. @field missing or invalid', array('@field' => $required)), 'error');
      return '';
    }
    else {
      $checksum_string .= $data[$required] . '|';
    }
  }

  if (!isset($data['EMAIL']) || is_null($data['EMAIL']) || $data['EMAIL'] == '') {
    // Skip optional email
  }
  else {
    $checksum_string .= $data['EMAIL'] . '|';
  }

  $checksum_string .= $checksum_key;

  return md5($checksum_string);
}

/**
 * Returns a checksum for receiving data.
 *
 * @return
 *   An md5 string of all data fields concatenated.
 */
function commerce_paygate_generate_response_checksum($data, $checksum_key) {
  $required_values = array(
    'PAYGATE_ID', 'REFERENCE', 'TRANSACTION_STATUS', 'RESULT_CODE', 'AUTH_CODE', 'AMOUNT', 'RESULT_DESC', 'TRANSACTION_ID', 'RISK_INDICATOR',
  );
  $checksum_string = '';

  foreach ($required_values as $required) {
    if (!isset($data[$required]) || is_null($data[$required])) {
      drupal_set_message(t('Could not compute checksum. @field missing or invalid', array('@field' => $required), 'error'));
      return '';
    }
    else {
      $checksum_string .= $data[$required] . '|';
    }
  }

  $checksum_string .= $checksum_key;

  return md5($checksum_string);
}


/**
 * Returns the correct URL based on Transaction Mode.
 */
function commerce_paygate_server_url($transaction_mode) {
  switch ($transaction_mode) {
    case 'live':
    case 'test':
    default:
      return 'https://www.paygate.co.za/PayWebv2/process.trans';
  }
}

/**
 * Returns an array of PayGate payment method icon img elements.
 *
 * @return
 *   The array of themed payment method icons keyed by name: visa, mastercard,
 *   amex, discover, echeck, paypal
 */
function commerce_paygate_icons() {
  $icons = array();

  $payment_methods = array(
    'paygate' => t('PayGate'),
    'visa' => t('Visa'),
    'mastercard' => t('Mastercard'),
  );

  foreach ($payment_methods as $name => $title) {
    $variables = array(
      'path' => drupal_get_path('module', 'commerce_paygate') . '/images/' . $name . '.gif',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('commerce-paygate-icon'),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }

  return $icons;
}

/**
 * Returns an array of all possible currency codes accepted by PayGate.
 */
function commerce_paygate_currencies() {
  return drupal_map_assoc(array('ZAR'), 'commerce_paygate_currency_names');
}

/**
 * Returns a currency name from currency code.
 */
function commerce_paygate_currency_names($code) {
  $currencies = commerce_currencies();
  if (isset($currencies[$code])) {
    return $currencies[$code]['name'];
  }
  return $code . ': Undefined';
}
