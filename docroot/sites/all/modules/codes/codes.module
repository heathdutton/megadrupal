<?php

/**
 * @file
 * Codes functions.
 */

// Load all Field module hooks for Codes.
module_load_include('field.inc', 'codes');

/**
 * Translate given codes.
 */
function codes_translate_codes($codes, $module, $codeset, $langcode = NULL) {
  foreach ($codes as $code => $display_value) {
    $codes[$code] = t($display_value, array(), array('langcode' => $langcode, 'context' => 'codes'));
  }

  return $codes;
}

/**
 * Translate given codesets.
 */
function codes_translate_codesets($codesets, $module, $langcode = NULL) {
  foreach ($codesets as $codeset => $codeset_tile) {
    $codesets[$codeset] = t($codeset_tile, array(), array('langcode' => $langcode, 'context' => 'codes'));
  }

  return $codesets;
}

/**
 * Get all codes for given codeset.
 */
function codes_get_all($module = NULL, $codeset = NULL, $subset = array(), $langcode = NULL) {
  $cache = &drupal_static(__FUNCTION__, array());

  $codes = array();
  if (!isset($module) || !isset($codeset)) {
    return $codes;
  }

  if (isset($cache[$module][$codeset])) {
    $codes = $cache[$module][$codeset];
  }
  else {
    if (!codes_module_include($module, "codes.inc")) {
      return $codes;
    }
    $codes_function = "{$module}_get_{$codeset}_codes";
    if (!function_exists($codes_function)) {
      return $codes;
    }

    $codes = call_user_func($codes_function);
    $codes = codes_translate_codes($codes, $module, $codeset, $langcode);
    drupal_alter('codes', $codes);
    $cache[$module][$codeset] = $codes;
  }

  // Filter on given subset.
  if (!empty($subset)) {
    $codes_subset = array();
    foreach ($subset as $code) {
      $codes_subset[$code] = isset($codes[$code]) ? $codes[$code] : $code;
    }
    $codes = $codes_subset;
  }

  return $codes;
}

/**
 * Get the display value of given code.
 */
function codes_get($module = NULL, $codeset = NULL, $code = NULL) {
  $codes = codes_get_all($module, $codeset);
  if (isset($codes[$code])) {
    return $codes[$code];
  }
  return $code;
}

/**
 * Get all codesets defined in given module.
 */
function codes_get_codesets($module = NULL, $langcode = NULL) {
  $codesets = array();

  if (!isset($module)) {
    return $codesets;
  }
  if (!codes_module_include($module, 'codes.inc')) {
    return $codesets;
  }
  $codeset_function = "{$module}_get_codesets";
  if (!function_exists($codeset_function)) {
    return $codesets;
  }
  $codesets = call_user_func($codeset_function);
  $codesets = codes_translate_codesets($codesets, $module, $langcode);

  return $codesets;
}

/**
 * Load codes files on behalf of modules.
 */
function codes_module_include($module = NULL, $file) {
  if (!isset($file)) {
    return FALSE;
  }

  $modules = codes_get_module_apis();
  if (!isset($module)) {
    // Include all.
    foreach ($modules as $module => $info) {
      if (file_exists("./$info[path]/$module.$file")) {
        require_once "./$info[path]/$module.$file";
        return TRUE;
      }
    }
  }
  else {
    if (!isset($modules[$module])) {
      // The given module does not implement or does not support the current API.
      return FALSE;
    }
    $info = $modules[$module];
    if (file_exists("./$info[path]/$module.$file")) {
      require_once "./$info[path]/$module.$file";
      return TRUE;
    }
  }

  // The given file does not exist.
  return FALSE;
}

/**
 * Get a list of modules that support the current codes API.
 */
function codes_get_module_apis() {
  $cache = &drupal_static(__FUNCTION__, NULL);

  if (!isset($cache)) {
    $cache = array();
    foreach (module_implements('codes_api') as $module) {
      $function = "{$module}_codes_api";
      $info = $function();
      if (isset($info['api']) && $info['api'] == 1.000) {
        if (!isset($info['path'])) {
          $info['path'] = drupal_get_path('module', $module);
        }
        $cache[$module] = $info;
      }
    }
  }

  return $cache;
}

/**
 * Implements hook_views_api().
 */
function codes_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'codes') . '/views',
  );
}
