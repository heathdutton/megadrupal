<?php

/**
 * Implements hook_graphapi_formats().
 */
function graphviz_graphapi_formats() {
  return array(
    'graphviz' => 'Graphviz',
  );
}

/**
 * Implements hook_graphapi_settings_form().
 */
function graphviz_graphapi_settings_form($values) {
  $engine = 'graphviz';
  $values += graphviz_default_settings();

  $form[$engine] = array(
    '#title' => t('Graphviz settings'),
    '#type' => 'fieldset',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form[$engine]['type'] = array(
    '#title' => 'What graph type to render',
    '#description' => t("See !url for more documentation", array('!url' => l('Graphviz.org', 'http://www.graphviz.org/'))),
    '#type' => 'select',
    '#options' => _graphviz_types(),
  );
  $form[$engine]['output'] = array(
    '#title' => 'What output you want to generate?',
    '#description' => t("See !url for more documentation", array('!url' => l('Graphviz.org', 'http://www.graphviz.org/'))),
    '#type' => 'select',
    '#options' => _graphviz_output(),
  );

  foreach (_graphviz_attr_types() as $id => $values) {
    $key = $values['id'];
    $form[$engine][$key] = array(
      '#title' => $values['title'],
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
    );
    $form[$engine][$key] += _graphviz_subform($id);
  }
  return $form;
}

function _graphviz_types() {
  return array(
    // TODO: this is tricky: do we provide dot or the combo : graph | digraph?
    'graph' => 'Graph',
    'digraph' => 'Directed Graph',
    'neato' => 'Neato',
  );
}

function _graphviz_output() {
  return array(
    'png' => 'PNG',
    'text' => 'Text',
  );
}

/**
 * Define the Graphviz elements.
 *
 * Here we define the internal types and their form id and title
 *
 * @return array
 */
function _graphviz_attr_types() {
  return array(
    'G' => array(
      'id' => 'graph',
      'title' => 'Graph specific default settings.',
    ),
    'C' => array(
      'id' => 'cluster',
      'title' => 'Cluster',
    ),
    'N' => array(
      'id' => 'node',
      'title' => 'Node',
    ),
    'E' => array(
      'id' => 'edge',
      'title' => 'edge',
    ),
  );
}

/**
 * Maps attributes to diffent parts
 *
 * Maps an attribute to
 *
 * - types: Graph Edge Node Compound
 * - engines (dot, neato, etc) to show exceptions
 * - output format
 *
 * @return type
 */
function _graphviz_attributes($type = NULL) {
  $attr = array(
    'damping' => array(
      'types' => 'G',
      'engines' => array('neato'),
      'default' => 0.99,
      // Drupal field definitions
      '#type' => 'textfield',
      '#title' => 'Damping',
      '#description' => _graphviz_reference('Damping', 'attrs#dDamping'),
    ),
    'area' => array(
      'types' => 'NC',
      'default' => 1.0,
      // Drupal field definitions
      '#type' => 'textfield',
      '#title' => 'Area',
      '#description' => _graphviz_reference('area', 'attrs#darea'),
    ),
    'compound' => array(
      'types' => 'G',
      'default' => FALSE,
      // Drupal field definitions
      '#type' => 'checkbox',
      '#title' => 'Compound',
      '#description' => _graphviz_reference('compound', 'attrs#dcompound'),
    ),
    'color' => array(
      'types' => 'ENC',
      'default' => 'black',
      // Drupal field definitions
      '#type' => 'textfield',
      '#title' => 'Color',
      '#description' => _graphviz_reference('color', 'attrs#dcolor'),
    ),
    'arrowhead' => array(
      'types' => 'E',
      'default' => 'normal',
      'values' => array(
        "normal", "inv", "dot", "invdot", "odot", "invodot",
        "none", "tee", "empty", "invempty", "diamond", "odiamond",
        "ediamond", "crow", "box", "obox", "open", "halfopen", "vee",
      ),
      // Drupal field definitions
      '#type' => 'select',
      '#title' => 'Arrowhead',
      '#description' => _graphviz_reference('arrowhead', 'attrs#darrowhead'),
    ),
    'URL' => array(
      'types' => 'ENGC',
      'output' => array('svg', 'map', 'postscript'),
      'default' => '',
      // Drupal field definitions
      '#type' => 'textfield',
      '#title' => 'URL',
      '#description' => _graphviz_reference('URL', 'attrs#dURL'),
    ),
    'fillcolor' => array(
      'types' => 'ENC',
      'default' => array('E' => 'lightgrey', 'N' => 'lightgrey', 'C' => 'black'),
      // Drupal field definitions
      '#type' => 'textfield',
      '#title' => 'Fill color',
      '#description' => _graphviz_reference('Color', 'attrs#dfillcolor'),
    ),
    'style' => array(
      'types' => 'ENC',
      'default' => array('E' => 'lightgrey', 'N' => 'lightgrey', 'C' => 'black'),
      'values' => array(
        'E' => array('solid', 'dashed', 'dotted', 'bold'),
        'N' => array('solid', 'dashed', 'dotted', 'bold', 'rounded', 'diagonals', 'filled', 'striped', 'wedged'),
        'C' => array('solid', 'dashed', 'dotted', 'bold', 'rounded', 'diagonals', 'filled', 'striped', 'wedged'),
      ),
      // Drupal field definitions
      '#type' => 'select',
      '#title' => 'Style',
      '#description' => _graphviz_reference('Color', 'attrs#dstyle'),
    ),
  );

  if (is_null($type)) {
    return $attr;
  }
  $result = array();
  foreach ($attr as $key => $values) {
    if (FALSE !== strpos($values['types'], $type)) {
      $result[$key] = $values;
    }
  }
  return $result;
}

function _graphviz_reference($label, $path) {
  return t("See !url for more documentation", array('!url' => l($label, 'http://www.graphviz.org/content/' . $path)));
}

/**
 * Provide the sub form elements.
 *
 * @param type $type
 * @return array
 *   form elements belonging to the given $type
 */
function _graphviz_subform($type) {
  $attr = _graphviz_attributes($type);
  $fields = _graphviz_fields($attr, $type);
  return $fields;
}

/**
 * Calculate the fields for the given $attributes.
 *
 * Here we define all fields defined on the attribute page of grpahviz.org
 *
 * @param array $attr
 * @param type $type
 * @return array
 *   Intersection of the defined fields and needed.
 */
function _graphviz_fields(array $attr, $type) {
  $fields = array();
  foreach ($attr as $field_id => $values) {
    $fields[$field_id] = array();
    foreach ($values as $key => $value) {
      if (strpos($key, '#') === 0) {
        $fields[$field_id][$key] = $value;
      }
    }
    $element_type = $fields[$field_id]['#type'];
    if (in_array($element_type, array('radios', 'select'))) {
      $options = _graphviz_values_by_type($type, $attr[$field_id]['values']);
      $fields[$field_id]['#options'] = array_combine($options, $options);
    }
    $fields[$field_id]['#default_value'] = _graphviz_default_by_type($type, $values['default']);
    ;
  }
  return $fields;
}

/**
 * Return values for type.
 *
 * If the values array is nested is has type specific values.
 *
 * @param type $type
 * @param type $values
 * @return array
 *
 * @see _graphviz_attributes()
 */
function _graphviz_values_by_type($type, array $values) {
  reset($values);
  if (is_array(current($values))) {
    return $values[$type];
  }
  return $values;
}

function _graphviz_default_by_type($type, $values) {
  $default = $values;
  if (is_array($default)) {
    $default = $default[$type];
  }
  return $default;
}

function graphviz_default_settings() {
  $defaults = array();

  $defaults['type'] = 'digraph';
  // Add default 'text' as that always works
  $defaults['output'] = 'text';
  foreach (_graphviz_attr_types() as $type => $element) {
    $attr = _graphviz_attributes($type);
    foreach ($attr as $key => $values) {
      $defaults[$element['id']][$key] = _graphviz_default_by_type($type, $values['default']);
    }
  }
  return $defaults;
}

/**
 * Implementations of theme_ENGINE_graphapi
 */
function theme_graphviz_graphapi($vars) {
  return theme('graphviz_container', $vars);
}

/**
 * Implements hook_graphapi_default_settings().
 *
 * @see graphviz_default_settings()
 * @see views_object::option_definition()
 */
function graphviz_graphapi_default_settings() {
  $engine = 'graphviz';
  $values = graphviz_default_settings(FALSE);
  return graphapi_settings_to_views($engine, $values);
}

function graphviz_theme() {
  return array(
    'graphviz_graphapi' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
    'graphviz_container' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
    'graphviz_text' => array(
      'variables' => array(
        'dot',
      ),
    ),
    'graphviz_png' => array(
      'variables' => array(
        'dot',
      ),
    ),
  );
}

/**
 * Implements theme_ENGINE_graphapi().
 */
function theme_graphapi_graphviz_graphapi($vars) {
  $config = $vars['config'];
  return '<xmp>' . graphviz_to_dot($vars['graph']) . '</xmp>';
}

/**
 * Generate a .dot file structure.
 *
 * @param type $graph
 * @return type
 *
 * TODO: We should generate subgraphs first in topological sorted order.
 *       This results in a TSL which we can process.
 *       Current implementation has only one level of subgraphs.
 *       This should be deliverd by function graphapi_get_graph_tree()
 */
function graphviz_to_dot($graph, $config) {
  $type = $config['type'];
  if ($type != 'digraph') {
    $type = 'graph';
  }

  if ($type == 'graph') {
    $link = '--';
  }
  else {
    $link = ' -> ';
  }

  $dot = array();
  $dot[] = "$type {";

  _graphviz_dot_defaults($dot, $config['graph'], 'graph');
  // TODO: what should we do with cluster defaults?
  //_graphviz_dot_defaults($dot, $config['cluster'], 'cluster');
  _graphviz_dot_defaults($dot, $config['node'], 'node');
  _graphviz_dot_defaults($dot, $config['edge'], 'edge');

  // TODO: make a proper result
  //$tree = graphapi_get_graph_tree();
  foreach ($graph as $id => $node) {
    if (isset($node['_subgraph'])) {
      $dot[] = '  subgraph cluster_' . $id . ' {';
      foreach ($node['_subgraph'] as $sub_id) {
        $dot[] = '    ' . 'node_' . $sub_id;
      }
    }
    else {
      $dot[] = '  ' . 'node_' . $id . ' [';
    }

    $dot[] = '    label = "' . $node['data']['title'] . '"';

    if (isset($node['_subgraph'])) {
      $dot[] = '  }';
    }
    else {
      $dot[] = '  ]';
    }
  }

  foreach ($graph as $id => $node) {
    foreach ($node['edges'] as $eid => $edge) {
      $dot[] = "  node_$id -> node_$eid";
      if (!empty($edge)) {
        $dot[] ='  [';
        if (isset($edge['title'])) {
          $dot[] = '    label = "' . $edge['title'] . '"';
          unset($edge['title']);
        }
        foreach ($edge['data'] as $key => $value) {
          $dot[] = '    ' . $key . ' = "' . $value . '"';
        }
        $dot[] ='  ]';
      }
    }
  }
  $dot[] = '}';

  return join("\n", $dot);
}

// TODO rename this function
function _graphviz_dot_defaults(&$dot, $values, $type) {
  if (!empty($values)) {
    $dot[] = "  $type [";
    foreach ($values as $key => $value) {
      // TODO 1: FALSE is empty too which is bad
      // TODO 2: when a value has the default we could skip it.
      if (!empty($value)) {
        if (is_numeric($value)) {
          $dot[] = "    $key = $value";
        }
        else {
          $dot[] = "    " . $key . '= "' . $value . '"';
        }
      }
    }
    $dot[] = "  ]";
  }
}

/**
 * Theme implementation, returns graphviz container as HTML.
 */
function theme_graphviz_container($vars) {
  $graph = $vars['graph'];
  $config = $vars['config'] + graphviz_default_settings();
  $dot = graphviz_to_dot($graph, $config);

  $output = $config['output'];
  return theme('graphviz_' . $output, array('dot' => $dot));
}

function theme_graphviz_text($vars) {
  $dot = $vars['dot'];
  // TODO: this fails on graphapi_filters
//  if (module_exists('ctools')) {
//    ctools_include('export');
//    $export_form = drupal_get_form('ctools_export_form', $dot, t('Place this in .dot file'));
//    return drupal_render($export_form);
//  }
  return '<xmp>' . $dot . '</xmp>';
}

function theme_graphviz_png($vars) {
  $dot = $vars['dot'];
  // TODO: here we could call graphviz_filter code
  return '<xmp>Call graphviz_filter here?' . $dot . '</xmp>';
}

function graphviz_graphapi_node_properties() {
  return array(
    'background-color' => 'Background Color',
    'shape' => 'Shape',
    'rank' => 'Rank',
  );
}

function graphviz_graphapi_link_properties() {
  return array(
    'title' => 'Title',
    'color' => 'Color',
  );
}
