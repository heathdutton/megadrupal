<?php

/**
 * @file
 * This is the file description for Bulk author update module.
 *
 * Helps to update authors for almost every content.
 */

/**
 * Implements hook_menu().
 */
function bulk_author_update_menu() {
  $items['bulkauthorupdate/user'] = array(
    'page callback' => 'bulk_author_update_suggest_user',
    'access callback' => 'bulk_author_update_access',
    'access arguments' => array('access for bulk author update user'),
    'type' => MENU_CALLBACK,
  );
  $items['bulkauthorupdate/all'] = array(
    'page callback' => 'bulk_author_update_update_all',
    'access callback' => 'bulk_author_update_access',
    'access arguments' => array('access for bulk author update all'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/bulkauthorupdate'] = array(
    'title' => 'Bulk Author Update',
    'description' => "Update authors for content",
    'page callback' => 'bulk_author_update_admin_overview',
    'access callback' => 'bulk_author_update_access',
    'access arguments' => array('access for bulk author update'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'bulk_author_update_admin_overview.inc',
  );
  $items['admin/content/bulkauthorupdate/dashboard'] = array(
    'title' => 'Bulk Author Update Dashboard',
    'description' => "Bulk Author Update Dashboard",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/content/bulkauthorupdate/config'] = array(
    'title' => 'Bulk Author Update Configuration',
    'description' => "Bulk Author Update configuration",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_author_update_admin_config_form'),
    'access callback' => 'bulk_author_update_access',
    'access arguments' => array('access for bulk author update configurations'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'file' => 'bulk_author_update.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_access().
 */
function bulk_author_update_access($string, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * Implements hook_permission().
 */
function bulk_author_update_permission() {

  return array(
    'access for bulk author update' => array(
      'title' => t('Provide access for bulk author update'),
      'description' => t('Provide access for bulk author update'),
    ),
    'access for bulk author update configurations' => array(
      'title' => t('Provide access for bulk author update configurations'),
      'description' => t('Provide access for bulk author update configurations'),
    ),
    'access for bulk author update user' => array(
      'title' => t('Provide access for bulk author update user'),
      'description' => t('Provide access for bulk author update user'),
    ),
    'access for bulk author update all' => array(
      'title' => t('Provide access for bulk author update all'),
      'description' => t('Provide access for bulk author update all'),
    ),
  );

}

/**
 * Auto complete function for users.
 */
function bulk_author_update_suggest_user() {
  $user_name = isset($_REQUEST['user_name']) ? $_REQUEST['user_name'] : '';
  $user_id = isset($_REQUEST['user_id']) ? $_REQUEST['user_id'] : '';
  $collect_data = isset($_REQUEST['selected_data']) ? $_REQUEST['selected_data'] : '';

  if ($user_name) {
    $query = db_select("users", "u");
    $query->fields('u', array('uid', 'name'))->condition('name', '%' . db_like($user_name) . '%', 'LIKE');
    $result = $query->execute();
    $output = '';
    while ($data = $result->fetchObject()) {
      $output .= "<li class='uname' id='" . bulk_author_update_encrypt_string($data->uid) . "'>" . $data->name . "</li>";
    }
  }

  if ($user_id) {
    $user_id = bulk_author_update_decrypt_string($user_id);
    $user_fields = user_load($user_id);
    $created_user_name = $user_fields->name;
    if (is_object($user_fields->picture)) {
      $picture_user = image_style_url("thumbnail", $user_fields->picture->uri);
      $user_url = url('user/' . $user_id);
    }
    else {
      $user_default_image = base_path() . drupal_get_path('module', 'bulk_author_update') . '/images/user.png';
      $picture_user = $user_default_image;
      if ($user_id == 0) {
        $user_url = "javascript:void(0)";
      }
      else {
        $user_url = url('user/' . $user_id);
      }
    }

    $uid = $user_fields->uid;
    $mail = $user_fields->mail;
    $name = $user_fields->name;
    $link_update = url('bulkauthorupdate/all', array('query' => array('user' => $uid)));
    $created = date("d-M-Y H:i:s", $user_fields->created);
    $accessed = date("d-M-Y H:i:s", $user_fields->access);
    $login = date("d-M-Y H:i:s", $user_fields->login);
    if ($user_fields->status == 1) {
      $status = t("Active");
    }
    else {
      $status = t("Blocked");
    }
    $output = '';
    $output .= "<div class='col10' id='profile_view' style='border:1px dotted silver;margin-bottom:20px'>
                  <div class='col1' style='padding-top: 20px;'>
                    <div class='col10 txtc'>
                       <a href='$user_url' title='View user profile.'><img src='$picture_user' /></a>
                    </div>
                    <div class='col10 txtc'><a href='$user_url' title='View user profile'>$created_user_name</a></div>
                  </div>
                  <div class='col8' style='border-left:1px solid silver;padding-left:20px;'>
                   <div class='col10'>
                     <div class='col3'><p><b>User Id</b></p>$uid</div>
                     <div class='col3'><p><b>Mail</b></p>$mail</div>
                     <div class='col3'><p><b>Created</b></p>$created</div>
                   </div>
                   <div class='col10'>
                     <div class='col3'><p><b>Last access</b></p>$accessed</div>
                     <div class='col3'><p><b>Last Login</b></p>$login</div>
                     <div class='col3'><p><b>Status</b></p>$status</div>
                   </div>
                  </div>
                  <input type='hidden' id='selected_user' value='$uid'>
                  <input type='hidden' id='selected_user_name' value='$name'>
                  <input type='hidden' id='link_update' value='$link_update'>
                </div>";
  }

  if ($collect_data) {
    $selected_user = $_REQUEST['selected_user'];
    $node_lists = explode(',', $collect_data);
    db_update("node")
      ->fields(array('uid' => $selected_user))
      ->condition('nid', $node_lists, 'IN')
      ->execute();
    db_update("node_revision")
      ->fields(array('uid' => $selected_user))
      ->condition('nid', $node_lists, 'IN')
      ->execute();
    $output = t("Author details have been updated successfully.");
    drupal_set_message(check_plain($output));
  }

  print json_encode($output);
  exit;
}

/**
 * Applying author update for selected content types.
 */
function bulk_author_update_update_all() {
  $content_type = array();
  $contypes_arr = array();
  $ctypes = node_type_get_types();
  if (count($ctypes) > 0) {
    foreach ($ctypes as $ct) {
      $selected_content_type = variable_get("bulk_author_update_" . $ct->type);
      if ($selected_content_type) {
        $content_type[] = $ct->type;
        $contypes_arr[] = "'" . $ct->type . "'";
      }
    }
  }
  if (count($content_type) == 0) {
    foreach ($ctypes as $ct) {
      $content_type[] = $ct->type;
      $contypes_arr[] = "'" . $ct->type . "'";
    }
  }
  $contypes_csv = implode(',', $contypes_arr);
  $selected_user = isset($_GET['user']) ? $_GET['user'] : '';
  if (!empty($selected_user) && is_numeric($selected_user)) {
    db_update("node")
      ->fields(array('uid' => $selected_user))
      ->condition('type', $content_type, 'IN')
      ->execute();
    db_query("UPDATE node_revision r LEFT JOIN node n ON n.nid = r.nid SET r.uid = $selected_user WHERE n.type IN ($contypes_csv)");
    drupal_set_message(t("Author details have been updated successfully."));
  }
  else {
    drupal_set_message(t("User details required."), 'error');
  }
  drupal_goto("admin/content/bulkauthorupdate");
}

/**
 * Encryption function.
 */
function bulk_author_update_encrypt_string($id) {
  $key = md5('crypto key...', TRUE);
  $id = base_convert($id, 10, 36);
  $data = mcrypt_encrypt(MCRYPT_BLOWFISH, $key, $id, 'ecb');
  $data = bin2hex($data);
  return $data;
}

/**
 * Decryption function.
 */
function bulk_author_update_decrypt_string($encrypted_id) {
  $key = md5('crypto key...', TRUE);
  $data = pack('H*', $encrypted_id);
  $data = mcrypt_decrypt(MCRYPT_BLOWFISH, $key, $data, 'ecb');
  $data = base_convert($data, 36, 10);
  return $data;
}
