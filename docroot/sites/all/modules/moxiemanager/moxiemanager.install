<?php

/**
 * @file
 *
 * Deletes Moxiemanager variables
 */

/**
 * Implements hook_uninstall().
 */
function moxiemanager_uninstall() {
  db_delete('variable')
  ->condition('name', 'moxiemanager_%', 'LIKE')
  ->execute();
}

/**
 * Implements hook_requirements().
 */
function moxiemanager_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time
  $t = get_t();
  $requirements = array();

  if ($phase == 'runtime') {
    $library_path = _moxiemanager_library_directory();

    // Only proceed if the libraries directory exists.
    if ($library_path) {
      variable_set('moxiemanager_status_ok', FALSE);

      $config = variable_get('moxiemanager_config_options', moxiemanager_config_defaults());

      // Define the replacements for the t() function.
      $replacements = array(
        '!name' => 'Moxiemanager',
        '!admin_url' => l(t('administration page'), 'admin/config/media/moxiemanager'),
      );

      // Check if Moxicode's McImagemanager is present in this module's directory
      if (!is_dir($library_path)) {
        $requirements['moxiemanager_directory'] = array(
          'title' => $t('!name Directory', $replacements),
          'value' => $t('!library is missing', array('!library' => l($t('!name library', $replacements), 'http://moxiemanager.com', array('attributes' => array('target' => '_blank'))))),
          'description' => $t('The Moxiemanager library is not present in the libraries directory.', $replacements),
          'severity' => REQUIREMENT_WARNING,
        );
      }
      elseif (!file_exists($library_path . '/config.php') || (!$moxiemanager_plugin_config = moxiemanager_plugin_config())) {
        $requirements['moxiemanager_config'] = array(
          'title' => $t('!name Config', $replacements),
          'value' => $t('!name\'s config file could not be loaded.', $replacements),
          'description' => $t('!name\'s config could not be loaded! Navigate to the !admin_url to set the plugins configuration which creates the plugin\'s config file.', $replacements),
          'severity' => REQUIREMENT_WARNING,
        );
      }
      else {
        // The library is present
        // Check if the authenticator is set to drupal
        if ($moxiemanager_plugin_config['authenticator'] !== 'DrupalMMAuthenticator') {
          $requirements['moxiemanager_config_authenticator'] = array(
            'title' => $t('!name Authenticator', $replacements),
            'value' => $t('config.php is not properly configured!'),
            'description' => $t('The authenticator set in !name\'s config.php should be \'DrupalMMAuthenticator\'.', $replacements),
            'severity' => REQUIREMENT_ERROR,
          );
        }
        // Check if the authenticator is set to drupal
        if (!preg_match('/^([0-9A-Z]{4}\-){7}[0-9A-Z]{4}$/', $moxiemanager_plugin_config['general.license'])) {
          $requirements['moxiemanager_config_licence'] = array(
            'title' => $t('!name Licence', $replacements),
            'value' => $t('config.php is not properly configured!'),
            'description' => $t('The licence set in !name\'s config.php is not valid.', $replacements),
            'severity' => REQUIREMENT_ERROR,
          );
        }
      }

      if (empty($requirements)) {
        // Save the status to the DB, so we do not have to check this on each page load
        variable_set('moxiemanager_status_ok', TRUE);

        // No errors. Notify the user
        $requirements['moxiemanager_ok'] = array(
          'title' => 'Moxiemanager',
          'value' => $t('!name is properly installed', $replacements),
          'severity' => REQUIREMENT_OK,
        );
      }
      else {
        $keys = array_keys($requirements);
        $requirements[array_shift($keys)]['description'] .= ' ' . $t('Refer to !name\'s !help section for installation instructions.', array('!help' => l(t('help'), 'admin/help/moxiemanager')) + $replacements);
      }
    }
    else {
      $requirements['moxiemanager_libraries'] = array(
        'title' => $t('Javascript libraries directory'),
        'value' => $t('Not present'),
        'severity' => $library_exists ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}