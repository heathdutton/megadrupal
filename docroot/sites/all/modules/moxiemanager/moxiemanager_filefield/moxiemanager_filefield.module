<?php

/**
 * @file
 *
 * Integration of Moxiecode's MoxieManager into Fielfield module
 */

/**
 * Implements hook_field_info_alter().
 */
function moxiemanager_filefield_field_info_alter(&$info) {
  // Add a setting to all field types.
  foreach ($info as $field_type => $field_type_info) {
    if (in_array($field_type, array('file', 'image'))) {
      $info[$field_type]['instance_settings'] += array(
        'moxiemanager_filefield' => 0,
      );
    }
  }
}

/**
 *
 */
function moxiemanager_filefield_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node']) && $form_id == $form['#node']->type . '_node_form') {
    // Moxicode needs a form name attribute.
    $form['#attributes']['name'] = str_replace('-', '_', $form['#id']);
  }
  if ($form_id == 'field_ui_field_edit_form'
    && isset($form['#instance']['settings']['moxiemanager_filefield'])) {
    $form['instance']['settings']['moxiemanager_filefield'] = array(
      '#type' => 'checkbox',
      '#title' => t('Moxiecode filebrowser'),
      '#description' => t('Enable a file browser in order to allow users to re-use already uploaded files by navigation trough the filesystem using Moxiecode\'s file browsers.'),
      '#default_value' => $form['#instance']['settings']['moxiemanager_filefield'],
      '#access' => user_access('administer moxiemanager'),
      '#weight' => 9,
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function moxiemanager_filefield_field_widget_form_alter(&$element, &$form_state, $context) {
  if (!empty($context['instance']['settings']['moxiemanager_filefield'])) {
    $field = $context['field'];
    // if ($field['cardinality'] == 1) {
    //   $element['#process'][] = 'moxiemanager_filefield_widget_process';
    // }
    // else {
      foreach (element_children($element) as $delta) {
        $element[$delta]['#process'][] = 'moxiemanager_filefield_widget_process';
      }
    // }
  }
}

/**
 * Implements hook_widget_process().
 */
function moxiemanager_filefield_widget_process($element, &$form_state, $form) {
  $entity_type = $element['#entity_type'];
  $bundle_name = $element['#bundle'];
  $field_name = $element['#field_name'];
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  $field_uri = file_field_widget_uri($field, $instance);
  $item = $element['#value'];
  $uri_scheme = $field['settings']['uri_scheme'];
  $wrappers = file_get_stream_wrappers();
  $file_system = $wrappers[$uri_scheme]['name'];

  $file_system_rootpath = rtrim('/' . $file_system . '/' . $instance['settings']['file_directory'], '/');

  $element['filemanager'] = array(
    '#type' => 'container',
    '#access' => (empty($item['fid'])),
  );

  setcookie("mm_filesystem", $file_system, REQUEST_TIME + 86400, '/');

  $element['filemanager']['path'] = array(
    '#title' => t('File/URL'),
    '#type' => 'textfield',
    '#default_value' => '',
    '#attributes' => array('class' => array('filemanager-path')),
  );

  $element['filemanager']['select'] = array(
    '#type' => 'submit',
    '#value' => 'Select',
    '#field_name' => $element['#field_name'],
    '#name' => implode('_', $element['#parents']) . '_select_button',
    '#weight' => 101,
    '#attributes' => array('class' => array('filefield-filemanager-opener')),
    '#validate' => array(),
    '#submit' => array('moxiemanager_filemanager_select'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => array(
      'path' => $element['upload_button']['#ajax']['path'],
      'wrapper' => $element['upload_button']['#ajax']['wrapper'],
      'effect' => 'fade',
      'progress' => $element['upload_button']['#ajax']['progress'],
    ),
  );

  $element['filemanager']['file_system_rootpath'] = array(
    '#type' => 'hidden',
    '#value' => $file_system_rootpath,
  );

  $element['filemanager']['filefield_opener_active_tab'] = array(
    '#type' => 'hidden',
    '#default_value' => 0,
  );

  $module_path = drupal_get_path('module', 'moxiemanager');
  $library_path = _moxiemanager_library_directory();
  $base_url = url($library_path);

  // @todo fix bug when editing on /FR/node/24/edit

  $element['filemanager']['#attached'] = array(
    'css' => array(
      $module_path . '/moxiemanager_filefield/moxiemanager_filefield.css',
    ),
    'js' => array(
      $module_path . '/moxiemanager_filefield/moxiemanager_filefield.js' => array(
        'preprocess' => FALSE,
      ),
      $library_path . '/js/moxman.loader.min.js' => array(
        'preprocess' => FALSE,
      ),
    ),
  );
  return $element;
}


/**
 *
 */
function moxiemanager_filemanager_select($form, &$form_state) {
  $parents = array_slice($form_state['triggering_element']['#array_parents'], 0, -3);
  $element = drupal_array_get_nested_value($form, $parents);
  $field_name = $element['#field_name'];
  $field = field_info_field($field_name);
  $langcode = $element['#language'];

  $field_state = field_form_get_state($element['#field_parents'], $field_name, $langcode, $form_state);
  $field_values = drupal_array_get_nested_value($form_state['values'], $parents);

  // Get the old values.
  $old_values = drupal_array_get_nested_value($form_state['input'], $parents);
  $field_values = array_replace($old_values, $field_values);

  if (isset($field_values) && isset($field_state['items'])) {
    $field_values += $field_state['items'];
  }
  elseif (isset($field_state['items'])) {
    $field_values = $field_state['items'];
  }

  if (isset($field_values)) {
    // Update sort order according to weight. Note that this is always stored in
    // form state. Sort does not work using regular upload, but that is a core
    // bug.
    usort($field_values, '_field_sort_items_helper');

    foreach ($field_values as $key => &$field_value) {
      if (!$field_value['fid']) {
        if (!empty($field_value['filemanager']['path'])) {
          $filename = $field_value['filemanager']['path'];
          $uri_scheme = $field['settings']['uri_scheme'];
          $file_stream_wrapper = file_stream_wrapper_get_instance_by_scheme($uri_scheme);
          $stream_wrapper_uri = $file_stream_wrapper->getUri();
          $directory_path = $file_stream_wrapper->getDirectoryPath();
          if (strpos($filename, $directory_path) === 0) {
            $file_uri = $stream_wrapper_uri . substr($filename, strlen($directory_path) + 1);
            if ($files = file_load_multiple(array(), array('uri' => $file_uri))) {
              $file = reset($files);
            }
            else {
              $pathinfo = pathinfo($file_uri);
              $file = new stdClass();
              $file->uid = $GLOBALS['user']->uid;
              $file->status = 1;
              $file->filename = $pathinfo['basename'];
              $file->uri = $file_uri;
              file_save($file);
              file_usage_add($file, 'filefield_filemanager', 'file', $file->fid);
            }
            $field_value['fid'] = $file->fid;
          }
        }
        elseif (!empty($field_value['filemanager']['new-fid'])) {
          $file = file_load($field_value['filemanager']['new-fid']);
          $field_value['fid'] = $file->fid;
        }
      }
    }

    // Update form_state values.
    drupal_array_set_nested_value($form_state['values'], $parents, $field_values);

    // Update items.
    $field_state['items'] = $field_values;
    field_form_set_state($element['#field_parents'], $field_name, $langcode, $form_state, $field_state);
  }

  // Clear out input as it will need to be rebuildt.
  drupal_array_set_nested_value($form_state['input'], $element['#parents'], NULL);
  $form_state['rebuild'] = TRUE;
}
