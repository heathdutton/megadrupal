<?php
/**
 * @file
 *  Rules module hook implementations
 */

/**
 * Implements hook_rules_data_info().
 */
function sshid_rules_data_info() {
  $info = array();

  $info['ssh_key_pair'] = array(
    'label' => t('SSH Private Key'),
    'wrap' => TRUE,
    'group' => t('SSH'),
    'property info' => array(
      'private_key' => array(
        'type' => 'text',
        'label' => t('The absolute path to the private key file.'),
      ),
      'public_key' => array(
        'type' => 'text',
        'label' => t('The absolute path to the public key file.'),
      ),
      'fingerprint' => array(
        'type' => 'text',
        'label' => t('The private key fingerprint.'),
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_rules_event_info().
 */
function sshid_rules_event_info() {
  $events = array();

  $defaults = array(
    'group' => t('SSH'),
    'module' => 'sshid',
    'access arguments' => array('administer ssh'),
  );

  $events['generate_ssh_key_pair'] = $defaults + array(
    'label' => t('After generating a new ssh private key for a user'),
    'variables' => array(
      'ssh_key_pair' => array('type' => 'ssh_key_pair', 'label' => t('Generated SSH private key')),
      'user' => array('type' => 'user', 'label' => t('User the key was generated by')),
    ),
  );

  return $events;
}


/**
 * Implements hook_rules_action_info().
 */
function sshid_rules_action_info() {
  $actions = array();

  $defaults = array(
    'group' => t('SSH'),
    'access arguments' => array('administer ssh'),
    'named parameter' => TRUE,
  );

  $actions['sshid_add_user_ssh_public_key'] = $defaults + array(
    'label' => t('Add an SSH Public Key for a user'),
    'base' => 'sshid_add_user_ssh_public_key',
    'parameter' => array(
      'user' => array(
        'type' => 'user',
        'label' => t('User'),
        'save' => FALSE,
      ),
      'keypair' => array(
        'type' => 'ssh_key_pair',
        'label' => t('SSH Key Pair'),
        'save' => FALSE,
      ),
    ),
  );

  return $actions;
}

/**
 * Adds a public sshkey for the given user based on a provided keypar
 */
function sshid_add_user_ssh_public_key($variables) {
  $user = $variables['user'];
  $keypair = $variables['keypair'];

  $key = new stdClass();
  $key->entity_type = 'user';
  $key->entity_id = $user->uid;
  $key->value = file_get_contents($keypair['public_key']);

  sshkey_save($key);
  drupal_set_message(t('Public key saved'));
}
