<?php
/**
 * @file
 *  SSH Module
 */

/**
 * Implements hook_menu().
 */
function sshid_menu() {
  $items = array();

  $items['admin/config/development/sshid'] = array(
    'title' => 'SSH',
    'description' => 'Export SSH Configuration',
    'page callback' => 'sshid_settings_page',
    'access arguments' => array('administer ssh'),
    'file' => 'sshid.admin.inc',
  );

  $items['admin/config/development/sshid/config'] = array(
    'title' => 'Download SSH config file',
    'page callback' => 'sshid_config_file_download',
    'access arguments' => array('administer ssh'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'sshid.admin.inc',
  );

  $items['user/%user/ssh-private-keys'] = array(
    'title' => 'SSH Private Key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sshid_private_key_form', 1),
    'access arguments' => array('upload private ssh key'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'sshid.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function sshid_menu_alter(&$items) {
  if (isset($items['user/%/ssh-keys'])) {
    $items['user/%/ssh-keys']['title'] = t('SSH Public Keys');
  }
}

/**
 * Implements hook_permission().
 */
function sshid_permission() {
  $perms = array();

  $perms['use ssh'] = array(
    'title' => t('Use SSH'),
  );

  $perms['administer ssh'] = array(
    'title' => t('Administer SSH'),
  );

  $perms['upload private ssh key'] = array(
    'title' => t('Upload private SSH key'),
  );

  return $perms;
}

/**
 * Implements hook_theme().
 */
function sshid_theme() {
  $hooks = array();

  $hooks['sshid_config'] = array(
    'file' => 'sshid.theme.inc',
    'function' => 'theme_sshid_config',
    'variables' => array('hosts' => array()),
  );

  $hooks['sshid_host'] = array(
    'file' => 'sshid.theme.inc',
    'function' => 'theme_sshid_host',
    'variables' => array('host' => NULL, 'config' => array()),
  );

  return $hooks;
}

/**
 * Provides the contents of the ssh config file.
 *
 * @return string
 */
function sshid_config_file_contents() {
  return theme('sshid_config', array('hosts' => sshid_config()));
}

/**
 * Provides the SSH config.
 *
 * @return array
 */
function sshid_config() {
  $users = sshid_users();

  $config = array();
  foreach (sshid_aliases() as $slug => $host) {
    foreach ($users as $user) {
      $alias = t($slug, array('@uid' => $user->uid));
      $config[$alias] = array(
        'IdentityFile' => "~/.ssh/" . sshid_key_filename($user),
        'IdentitiesOnly' => 'yes',
      ) + $host;
    }
  }

  drupal_alter('sshid_config', $config);
  return $config;
}

/**
 * Provides the name of a keyfile for $user
 *
 * @param object $user
 */
function sshid_key_filename($user) {
  return t('id_rsa.uid-@uid', array('@uid' => $user->uid));
}

/**
 * Provides the SSH aliases.
 *
 * @return array
 */
function sshid_aliases() {
  $hosts = module_invoke_all('sshid_aliases');
  drupal_alter('sshid_aliases', $hosts);
  return $hosts;
}

/**
 * Provides all users with the 'use ssh' permission.
 *
 * @return array
 */
function sshid_users() {
  return entity_load('user', sshid_user_ids());
}

/**
 * Provides ids of all users with the 'use ssh' permission.
 */
function sshid_user_ids() {
  $query = db_query('SELECT DISTINCT u.uid
    FROM {users} u, {users_roles} ur, {role_permission} rp
    WHERE u.uid = ur.uid
    AND ur.rid = rp.rid
    AND rp.permission = :permission',
    array(':permission' => 'use ssh')
  );
  return $query->fetchCol();
}
