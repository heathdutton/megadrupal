<?php

function commerce_discount_quantity_inline_conditions_info() {
  // Products and quantity: line item
  $conditions['commerce_discount_quantity_line_item_has_quantity'] = array(
    'label' => t('Product has quantity'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'commerce_discount_quantity_line_item_has_specific_quantity_configure',
      'build' => 'commerce_discount_quantity_line_item_has_specific_quantity_build',
    ),
  );


  return $conditions;
}

function commerce_discount_quantity_line_item_has_specific_quantity_configure($settings) {
  $form = array();
  $form['operator'] = array(
    '#type' => 'select',
    '#title' => t('Operator'),
    '#title_display' => 'invisible',
    '#options' => array(
      '<' => t('quantity lower than'),
      '==' => t('quantity equals'),
      '>' => t('quantity greater than'),
    ),
    '#default_value' => !empty($settings['operator']) ? $settings['operator'] : '==',
  );

  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#title_display' => 'invisible',
    '#default_value' => !empty($settings['quantity']) ? $settings['quantity'] : '',
    '#size' => 5,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer'),
    '#suffix' => '<div class="condition-instructions">' . t("The discount is active if the order's product(s) match the condition above.") . '</div>',
  );

  return $form;
}

/**
 * Inline conditions build callback: evaluate product quantity conditions
 */
function commerce_discount_quantity_line_item_has_specific_quantity_build($line_item_wrapper, $products, $operator, $quantity) {
  $products_sku = explode(', ', (string) $products);

  // specified in the rule settings.
  foreach ($line_item_wrapper->order->commerce_line_items as $wrapper_line_item) {
    $sku = $wrapper_line_item->commerce_product->sku->value();
    // At this point, we are sure that the current product is in the order.
    // If this product line item doesn't meet the quantity comparison, the
    // condition will return false.
    switch ($operator) {
      case '<':
        if ($wrapper_line_item->quantity->value() < $quantity) {
          unset($products_sku[$sku]);
        }
        else {
          return FALSE;
        }
        break;

      case '==':
        if ($wrapper_line_item->quantity->value() == $quantity) {
          unset($products_sku[$sku]);
        }
        else {
          return FALSE;
        }
        break;

      case '>':
        if ($wrapper_line_item->quantity->value() > $quantity) {
          unset($products_sku[$sku]);
        }
        else {
          return FALSE;
        }
        break;
    }
  }
  return empty($products_sku);
}
