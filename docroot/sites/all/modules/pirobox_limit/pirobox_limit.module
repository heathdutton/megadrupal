<?php
/**
 * @file
 * Provides limiting and access functions for the Pirobox module.
 */

/**
 * Implements hook_permission().
 */
function pirobox_limit_permission() {
  return array(
    'view pirobox limited galleries' => array(
      'title' => t('View Pirobox limited galleries'),
      'description' => t('Users are allowed to see limited images in Pirobox limited galleries.')
    ),
    'administer pirobox limit' => array(
      'title' => t('Administer Pirobox Limit')
    )
  );
}

/**
 * Implements hook_menu().
 */
function pirobox_limit_menu() {
  $items = array();

  $items['admin/config/media/pirobox/pirobox-limit'] = array(
    'title' => 'Pirobox Limit settings',
    'description' => 'Adjust the Pirobox Limit module settings.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' =>  array('pirobox_limit_general_settings_form'),
    'access arguments' =>  array('administer pirobox limit'),
    'file' => 'includes/pirobox_limit.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Insert JS files needed by formatter settings form.
 */
function pirobox_limit_form_alter(&$form, &$form_state, $form_id) {
  // Views UI config item forms can't load JS files.
  // We use the parent form to make the files available.
  if ($form_id == 'field_ui_display_overview_form' || $form_id == 'views_ui_preview_form' || $form_id == 'views_ui_config_item_form') {
    $module_path = drupal_get_path('module', 'pirobox_limit');
    // Attach to form element(s)
    // in hook_field_formatter_settings_form() not work.
    switch (variable_get('pirobox_module_compression_type', 'min')) {
      case 'min':
        drupal_add_js($module_path . '/js/pirobox_limit.formatter.module.min.js', array('scope' => 'footer'));
        break;
      case 'none':
        drupal_add_js($module_path . '/js/pirobox_limit.formatter.module.js', array('scope' => 'footer'));
        break;
    }
  }
}

/**
 * Implements hook_pirobox_field_formatter_settings_form_get_element_alter().
 *
 * Extends the Pirobox image field settings form with the form elements:
 *   - Gallery limitation
 *   - Gallery limitation bypass
 *
 * @param $element
 *   The associative array contains the settings form elements to alter.
 * @param $vars
 *   The associative array contains various parameters to help to alter.
 */
function pirobox_limit_pirobox_field_formatter_settings_form_get_element_alter(&$element, $vars) {
  // Entity type taxonomy_term not supported.
  if ($vars['entity_type'] == FALSE || $vars['entity_type'] == 'taxonomy_term') {
    return;
  }

  $settings = $vars['display']['settings'];

  $limited_images = variable_get('pirobox_limit_limited_images', 1);
  $limit_extra_style = variable_get('pirobox_limit_extra_style', 0);

  // Different image styles are not used in global settings.
  if ($limit_extra_style == 0) {
    $limited_images = 0;
  }

  $description = t('The number of images that are displayed without limitation.');
  $description .= '<br />' . t('The number of limited images is a global setting, configurable at !global-setting.', array('!global-setting' => l(t('Pirobox Limit settings'), 'admin/config/media/pirobox/pirobox-limit')));
  $description .= ' '. t('Currently configured limited images: !limited', array('!limited' => $limited_images));
  $description .= '<br />' . t('Please choose the number of free displayed images.');
  $element['pirobox_gallery_limit'] = array(
    '#type' => 'select',
    '#title' => t('Gallery limitation'),
    '#description' => $description,
    '#default_value' => $settings['pirobox_gallery_limit'],
    '#options' => _pirobox_limit_gallery_limit_options(),
    '#weight' => -1,
    '#attributes' => array(
      'class' => array('pirobox-gallery-limit')
    ),
    '#prefix' => '<div id="pirobox-limit-random-warning" class="messages warning" style="display: none;">' . t('<em>Gallery limitation</em> and <em>Gallery image random</em> at the same time is not possible.') . '</div>'
  );
  $element['pirobox_gallery_limit_bypass'] = array(
    '#type' => 'select',
    '#title' => t('Gallery limitation bypass'),
    '#description' => t('Allow the content owner to see full gallery.'),
    '#default_value' => $settings['pirobox_gallery_limit_bypass'],
    '#options' => _pirobox_limit_gallery_limit_bypass_options(),
    '#weight' => -0.5,
    '#attributes' => array(
      'class' => array('pirobox-gallery-limit-bypass')
    )
  );
}

/**
 * Implements hook_pirobox_field_formatter_settings_summary_get_summary_alter().
 *
 * @param $summary
 *   The associative array contains the settings HTML content to alter.
 * @param $vars
 *   The associative array contains various parameters to help to alter.
 */
function pirobox_limit_pirobox_field_formatter_settings_summary_get_summary_alter(&$summary, $vars) {
  $settings = $vars['settings'];

  if (isset($settings['pirobox_gallery_limit'])) {
    $summary[] = t('Pirobox gallery limitation: !type', array('!type' => _pirobox_limit_gallery_limitation_summary($settings['pirobox_gallery_limit'])));
  }
  if (isset($settings['pirobox_gallery_limit_bypass'])) {
    $gallery_limit_bypass_options = _pirobox_limit_gallery_limit_bypass_options();

    $summary[] = t('Pirobox gallery limitation bypass: @type', array('@type' => $gallery_limit_bypass_options[$settings['pirobox_gallery_limit_bypass']]));
  }
}

/**
 * Implements hook_pirobox_field_formatter_view_alter().
 *
 * Alter number of existing items to realize image limitation settings.
 *
 * @param $items
 *   The associative array contains the items to alter.
 * @param $vars
 *   The associative array contains various parameters to help to alter.
 */
function pirobox_limit_pirobox_field_formatter_view_alter(&$items, $vars) {
  // Entity type taxonomy_term not supported.
  if ($vars['entity_type'] == FALSE || $vars['entity_type'] == 'taxonomy_term') {
    return;
  }

  global $user;

  $settings = $vars['display']['settings'];
  $entity = $vars['entity'];
  $owner_access = FALSE;

  if ($user->uid == $entity->uid && (bool) $settings['pirobox_gallery_limit_bypass']) {
    $owner_access = TRUE;
  }

  if ($settings['pirobox_gallery_limit'] == 0 || $owner_access) {
    return;
  }
  if (user_access('view pirobox limited galleries', $user)) {
    return;
  }

  switch (variable_get('pirobox_limit_extra_style', FALSE)) {
    case 0:
      if (count($items)) {
        array_splice($items, $settings['pirobox_gallery_limit']);
      }
      break;

    case 1:
      if (count($items)) {
        array_splice($items, $settings['pirobox_gallery_limit'] + variable_get('pirobox_limit_limited_images', 1));
      }
      break;
  }
}

/**
 * Implements hook_pirobox_field_formatter_view_element_alter().
 *
 * Alter image styles for limited images and provide a additional style value
 * to inform the function pirobox_limit_pirobox_formatter_caption_alter()
 * whether it is necessary to change the caption.
 *
 * @param $element
 *   The associative array contains elements to alter.
 * @param $vars
 *   The associative array contains various parameters to help to alter.
 */
function pirobox_limit_pirobox_field_formatter_view_element_alter(&$element, $vars) {
  // Entity type taxonomy_term not supported.
  if ($vars['entity_type'] == FALSE || $vars['entity_type'] == 'taxonomy_term') {
    return;
  }

  global $user;

  $settings = $vars['display']['settings'];
  $items = $vars['items'];
  $entity = $vars['entity'];
  $owner_access = FALSE;

  if ($user->uid == $entity->uid && (bool) $settings['pirobox_gallery_limit_bypass']) {
    $owner_access = TRUE;
  }

  if ($settings['pirobox_gallery_limit'] == 0 || $owner_access) {
    return;
  }
  if (user_access('view pirobox limited galleries', $user)) {
    return;
  }

  $count = count($items);
  $pirobox_limit_entity_style = variable_get('pirobox_limit_entity_style', 'none');
  $pirobox_limit_image_style = variable_get('pirobox_limit_image_style', 'none');

  switch (variable_get('pirobox_limit_limited_images', 1)) {
    case 1:
      if ($count == $settings['pirobox_gallery_limit'] + 1) {
        if ($pirobox_limit_entity_style != 'none') {
          // Change entity image style for the limited content image.
          $element[$count -1]['#display_settings']['pirobox_entity_style'] = $pirobox_limit_entity_style;
        }

        if ($pirobox_limit_image_style != 'none') {
          // Change image style for the limited Pirobox image.
          $element[$count -1]['#display_settings']['pirobox_image_style'] = $pirobox_limit_image_style;
          // Initiate to change caption text for the last image.
          $element[$count -1]['#image_style_extra'] = TRUE;
        }
      }
      break;
    case 2:
      if ($count == $settings['pirobox_gallery_limit'] + 1) {
        if ($pirobox_limit_entity_style != 'none') {
          // Change entity image style for the last content image.
          $element[$count -1]['#display_settings']['pirobox_entity_style'] = $pirobox_limit_entity_style;
        }

        if ($pirobox_limit_image_style != 'none') {
          // Change image style for the last Pirobox image.
          $element[$count -1]['#display_settings']['pirobox_image_style'] = $pirobox_limit_image_style;
          // Initiate to change caption text for the last image.
          $element[$count -1]['#image_style_extra'] = TRUE;
        }
      }
      if ($count == $settings['pirobox_gallery_limit'] + 2) {
        if ($pirobox_limit_entity_style != 'none') {
        // Change entity image style for the limited content images.
          $element[$count -1]['#display_settings']['pirobox_entity_style'] = $element[$count -2]['#display_settings']['pirobox_entity_style'] = $pirobox_limit_entity_style;
        }

        if ($pirobox_limit_image_style != 'none') {
          // Change image style for the limited Pirobox images.
          $element[$count -1]['#display_settings']['pirobox_image_style'] = $element[$count -2]['#display_settings']['pirobox_image_style'] = $pirobox_limit_image_style;
          // Initiate to change caption text for the last image.
          $element[$count -1]['#image_style_extra'] = $element[$count -2]['#image_style_extra'] = TRUE;
        }
      }
      break;

    case 3:
      if ($count == $settings['pirobox_gallery_limit'] + 1) {
        if ($pirobox_limit_entity_style != 'none') {
          // Change entity image style for the last content image.
          $element[$count -1]['#display_settings']['pirobox_entity_style'] = $pirobox_limit_entity_style;
        }

        if ($pirobox_limit_image_style != 'none') {
          // Change image style for the last Pirobox image.
          $element[$count -1]['#display_settings']['pirobox_image_style'] = $pirobox_limit_image_style;
          // Initiate to change caption text for the last image.
          $element[$count -1]['#image_style_extra'] = TRUE;
        }
      }
      if ($count == $settings['pirobox_gallery_limit'] + 2) {
        if ($pirobox_limit_entity_style != 'none') {
        // Change entity image style for the limited content images.
          $element[$count -1]['#display_settings']['pirobox_entity_style'] = $element[$count -2]['#display_settings']['pirobox_entity_style'] = $pirobox_limit_entity_style;
        }

        if ($pirobox_limit_image_style != 'none') {
          // Change image style for the limited Pirobox images.
          $element[$count -1]['#display_settings']['pirobox_image_style'] = $element[$count -2]['#display_settings']['pirobox_image_style'] = $pirobox_limit_image_style;
          // Initiate to change caption text for the last image.
          $element[$count -1]['#image_style_extra'] = $element[$count -2]['#image_style_extra'] = TRUE;
        }
      }
      if ($count == $settings['pirobox_gallery_limit'] + 3) {
        if ($pirobox_limit_entity_style != 'none') {
        // Change entity image style for the limited content images.
          $element[$count -1]['#display_settings']['pirobox_entity_style'] = $element[$count -2]['#display_settings']['pirobox_entity_style'] = $element[$count -3]['#display_settings']['pirobox_entity_style'] = $pirobox_limit_entity_style;
        }

        if ($pirobox_limit_image_style != 'none') {
          // Change image style for the limited Pirobox images.
          $element[$count -1]['#display_settings']['pirobox_image_style'] = $element[$count -2]['#display_settings']['pirobox_image_style'] = $element[$count -3]['#display_settings']['pirobox_image_style'] = $pirobox_limit_image_style;
          // Initiate to change caption text for the last image.
          $element[$count -1]['#image_style_extra'] = $element[$count -2]['#image_style_extra'] = $element[$count -3]['#image_style_extra'] = TRUE;
        }
      }
      break;
  }
}

/**
 * Implements hook_pirobox_field_formatter_get_settings_alter().
 *
 * Extends the Pirobox field formatter settings and insert a gallery limit
 * and a gallery limit bypass value.
 *
 * @param $settings
 *   The associative array contains the formatter settings to alter.
 */
function pirobox_limit_pirobox_field_formatter_get_settings_alter(&$settings) {
  $settings['pirobox_gallery_limit'] = FALSE;
  // Allow full gallery view access for the content owner.
  $settings['pirobox_gallery_limit_bypass'] = FALSE;
}

/**
 * Implements hook_pirobox_formatter_caption_alter().
 *
 * Provides the additional caption for limited images.
 *
 * @param $caption
 *   HTML caption text to alter.
 * @param $variables
 *   The associative array contains the formatter settings to alter.
 */
function pirobox_limit_pirobox_formatter_caption_alter(&$caption, $variables) {
  global $user;

  $pirobox_limit_extra_caption = variable_get('pirobox_limit_extra_caption', array('value' => '', 'format' => NULL));

  if (empty($pirobox_limit_extra_caption['value'])) {
    return;
  }

  // Only a limited gallery image uses the extra caption text.
  // The Pirobox jQuery plugin JS needs the caption text
  // without p tag on begin and end.
  if ($variables['image_style_extra'] == TRUE) {
    $caption = preg_replace("/^<p>|<\/p>$/", '', $pirobox_limit_extra_caption['value']);
  }
}

/**
 * Implements hook_pirobox_imagefield_widget_process_alter().
 *
 * Returns informations if image limitation active. The information are
 * displayed on Pirobox image fields on content edit forms.
 *
 * @param $element
 *   The associative array contains elements to alter.
 * @param $vars
 *   The associative array contains the form elements to alter.
 */
function pirobox_limit_pirobox_imagefield_widget_process_alter(&$element, $vars) {
  $instance = $vars['instance'];
  $displays = array();

  $gallery_limit = FALSE;
  foreach (element_children($instance['display']) as $display) {
    if (isset($instance['display'][$display]['settings']['pirobox_gallery_limit'])) {
      $gallery_limit = TRUE;
      $displays[$display] = $instance['display'][$display]['settings']['pirobox_gallery_limit'];
    }
  }

  if ($gallery_limit == TRUE && isset($element['filename'])) {
    $filename = $element['filename']['#markup'];

    $message = t('Pirobox <em>image limitation</em> is active. Not all images displayed for all visitors.');
    $message .= _pirobox_limit_get_limit_info($displays);
    $message .= t('The number of used images is counted from the first image in this list.');

    $element['filename']['#markup'] = '<div class="description pirobox-limit-description">' . $message . '</div>' . $filename;
  }
}

/**
 * Returns the Pirobox Limit module supported entity types.
 *
 * @return
 *   The associative array is keyed with type machine name. Value is the
 *   translatable human name.
 */
function pirobox_limit_supported_entity_types() {
  $types = pirobox_supported_entity_types();
  unset($types['taxonomy_term']);

  return $types;
}

/**
 * Returns informations about used images per content display.
 *
 * @param $displays
 *   An associative array contains display informations
 * @return
 *   An HTML formatted item list.
 *
 * @see pirobox_limit_pirobox_imagefield_widget_process_alter()
 */
function _pirobox_limit_get_limit_info($displays) {
  $items = array();
  $limited_images = variable_get('pirobox_limit_limited_images', 1);
  $limit_extra_style = variable_get('pirobox_limit_extra_style', 0);

  // Different image styles are not used in global settings.
  if ($limit_extra_style == 0) {
    $limited_images = 0;
  }

  foreach ($displays as $display => $free) {
    $items[] = t('Display %display uses !limited limited and !free free images.', array('%display' => $display, '!limited' => $limited_images, '!free' => $free));
  }

  $variables['type'] = 'ul';
  $variables['items'] = $items;

  return theme('item_list', $variables);
}

/**
 * Returns the Pirobox gallery limitation options.
 *
 * @return
 *   The array contains the gallery limitation options.
 *
 * @see pirobox_limit_pirobox_field_formatter_settings_form_get_element_alter()
 * @see pirobox_limit_pirobox_field_formatter_settings_summary_get_summary_alter()
 */
function _pirobox_limit_gallery_limit_options() {
  return array(
    FALSE => t('Do not use'),
    3 => 3,
    4 => 4,
    5 => 5,
    6 => 6,
    7 => 7,
    8 => 8,
    9 => 9,
    10 => 10,
    11 => 11,
    12 => 12,
    13 => 13,
    14 => 14,
    15 => 15
  );
}

/**
 * Returns gallery limitation summary.
 *
 * @param $free_images
 *   A integer value of free images to use.
 *
 * @return
 *   An string contains the gallery limitation information.
 *
 * @see pirobox_limit_pirobox_field_formatter_settings_summary_get_summary_alter()
 */
function _pirobox_limit_gallery_limitation_summary($free_images) {
  $limited_images = variable_get('pirobox_limit_limited_images', 1);
  $gallery_limit_options = _pirobox_limit_gallery_limit_options();
  $limit_extra_style = variable_get('pirobox_limit_extra_style', 0);

  // Different image styles are not used in global settings.
  if ($limit_extra_style == 0) {
    $limited_images = 0;
  }

  if ((bool) $free_images) {
    return t('!limited limited and !free free images', array( '!limited' => $limited_images, '!free' => $free_images));
  }
  else {
    return $gallery_limit_options[$free_images];
  }
}

/**
 * Returns the Pirobox gallery limitation bypass options.
 *
 * @return
 *   FALSE or TRUE.
 *
 * @see pirobox_limit_pirobox_field_formatter_settings_form_get_element_alter()
 * @see pirobox_limit_pirobox_field_formatter_settings_summary_get_summary_alter()
 */
function _pirobox_limit_gallery_limit_bypass_options() {
  return array(
    FALSE => t('No'),
    TRUE => t('Yes')
  );
}
