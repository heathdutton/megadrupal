<?php
/**
 * @file
 *   Hooks definitions for the JStats module.
 */

/**
 * Implements hook_init.
 */
function jstats_init() {
  $params = array('path' => $_GET['q']);
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == '') {
    $params['nid'] = arg(1);
  }
  $json = drupal_json_encode($params);

  $js = <<<EOJ
jQuery.post(Drupal.settings.basePath + 'jstats.php', $json);
EOJ;
  $options = array('type' => 'inline', 'scope' => 'footer');
  drupal_add_js($js, $options);
}

/**
 * Implementation of hook_menu().
 */
function jstats_menu() {
  // Make it possible to use jstats.php even if the file wasn't placed at
  // the webroot. This is pretty much a compatibility layer for partial
  // installation, at it means Drupal will do a full bootstrap.
  $items['jstats.php'] = array(
    'page callback' => 'jstats_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'jstats.inc'
  );
  $items['admin/config/system/jstats'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jstats_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'jstats.admin.inc',
    'title' => 'JStats'
  );
  return $items;
}

/**
 * Implementation of hook_cron().
 */
function jstats_cron() {
  $now = time();
  // Get the last time our cron job was executed.
  $last = variable_get('jstats_cron_last', 0);

  // How often we want to recompute the node access statistics.
  $period = variable_get('jstats_cron_period', 900);

  // How long access logs should be kept.
  $keep = variable_get('jstats_flush_accesslogs_after', 604800);


  // If our last cron job if more than $period seconds ago, then it's time
  // to recalculate our statistics.
  if ($now - $last > $period) {
    // Flush old log entries
    if ($keep) {
      db_delete('jstats_accesslog')
        ->condition('timestamp', ($now - $keep), '<')
        ->execute();
    }

    // Calculate our stats
    jstats_aggregate($now);

    // Flag that we've updated the statistics count
    variable_set('jstats_cron_last', $now);
  }
}

/**
 * Aggregates access statistics.
 */
function jstats_aggregate($now) {
  // How long an access is considerered "recent".
  $recent = variable_get('jstats_cron_recent', 172800);

  // Start a transaction
  $transaction = db_transaction();

  try {
    // Define the subquery
    $query = db_select('jstats_accesslog', 'ja')
      ->condition('timestamp', $now - $recent, '>')
      ->condition('nid', 0, '>')
      ->groupBy('nid');
    $query->addField('ja', 'nid');
    $query->addExpression('COUNT(aid)', 'recentcount');

    // Truncate the old table
    db_truncate('jstats_node')->execute();

    // Insert the result of the subquery into our new table
    db_insert('jstats_node')
      ->from($query)
      ->execute();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog('jStats', $e);
    throw $e;
  }
}

/**
 * Implementation of hook_views_data().
 */
function jstats_views_data() {
  $data = array();
  $data['jstats_node'] = array(
    'table' => array(
      'group' => t('Node statistics'),
      'join' => array(
        'node' => array(
          'field' => 'nid',
          'left_field' => 'nid'
        )
      )
    ),
    'recentcount' => array(
      'title' => t('Recent count'),
      'help' => t('Number of time this node has been viewed recently'),
      'field' => array(
        'handler' => 'views_handler_field_numeric',
        'click sortable' => TRUE,
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
        'handler' => 'views_handler_sort'
      )
    )
  );

  return $data;
}

