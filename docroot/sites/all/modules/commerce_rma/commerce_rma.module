<?php

/**
 * Implements hook_enable().
 *
 * Set permissions accordingly.
 */
function commerce_rma_enable() {
  // Administrator is, as always, all mighty and deserves all permissions for
  // this module
  $admin_role = user_role_load_by_name('administrator');
  // Check that the user role administrator is already created.
  if ($admin_role) {
    user_role_change_permissions(
      $admin_role->rid, array(
        'administer commerce_return entities' => TRUE,
        'create commerce_return entities' => TRUE,
        'edit own commerce_return entities' => TRUE,
        'edit any commerce_return entity' => TRUE,
        'view own commerce_return entities' => TRUE,
        'view any commerce_return entity' => TRUE,
        'create commerce_return entities of bundle commerce_return' => TRUE,
        'edit own commerce_return entities of bundle commerce_return' => TRUE,
        'edit any commerce_return entity of bundle commerce_return' => TRUE,
        'view own commerce_return entities of bundle commerce_return' => TRUE,
        'view any commerce_return entity of bundle commerce_return' => TRUE,
        'configure return settings' => TRUE,
        'access return of goods' => TRUE,
      )
    );
  }

  // By default, authenticated user is only granted to return their goods.
  $customer_role = user_role_load_by_name('authenticated user');
  // Check that the user role authenticated user is already created.
  if ($customer_role) {
    user_role_change_permissions(
      $customer_role->rid, array(
        'view own commerce_return entities of bundle commerce_return' => TRUE,
        'access return of goods' => TRUE,
      )
    );
  }
}

/**
 * Implements hook_menu().
 */
function commerce_rma_menu() {
  $items = array();

  $items['user/%user/orders/%commerce_order/return/add'] = array(
    'title' => 'Create a new return',
    'page callback' => 'commerce_rma_new_return_router',
    'page arguments' => array(3, 1, 'default'),
    'access callback' => 'commerce_rma_access',
    'access arguments' => array('create', NULL, 1, 3),
    'file' => 'includes/commerce_rma.forms.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['user/%user/orders/%commerce_order/return/review'] = array(
    'title callback' => 'commerce_rma_return_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_rma_new_return_router',
    'page arguments' => array(3, 1, 'review'),
    'access callback' => 'commerce_rma_access',
    'access arguments' => array('create', NULL, 1, 3),
    'file' => 'includes/commerce_rma.forms.inc',
  );

  $items['user/%user/returns/%commerce_return'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('commerce_return', 3),
    'page callback' => 'commerce_rma_return_view',
    'page arguments' => array(3, 'customer'),
    'access callback' => 'commerce_rma_access',
    'access arguments' => array('view', 3, 1),
  );

  return $items;
}

/**
 * Implements hook_commerce_return_reason_info().
 */
function commerce_rma_commerce_return_reason_info() {
  $return_reasons = array();

  $return_reasons['wrong_product_received'] = array(
    'name' => 'wrong_product_received',
    'title' => t('Wrong product received'),
    'description' => t('The received product was not the one expected'),
    'group' => t('product'),
    'weight' => -50,
  );

  $return_reasons['poor_product_description'] = array(
    'name' => 'poor_product_description',
    'title' => t('Poor product description'),
    'description' => t("Product doesn't match online product description"),
    'group' => t('product'),
    'weight' => -49,
  );

  $return_reasons['do_not_like_product'] = array(
    'name' => 'do_not_like_product',
    'title' => t("Don't like the product"),
    'description' => t("Customer doesn't like the product"),
    'group' => t('product'),
    'weight' => -48,
  );

  $return_reasons['defective_product'] = array(
    'name' => 'defective_product',
    'title' => t('Defective product'),
    'description' => t('The product is damaged'),
    'group' => t('product'),
    'weight' => -47,
  );

  $return_reasons['product_damaged_during_transport'] = array(
    'name' => 'product_damaged_during_transport',
    'title' => t('Product damaged during transport'),
    'description' => t('Product was damaged during its transport'),
    'group' => t('carrier'),
    'weight' => -44,
  );

  return $return_reasons;
}

/**
 * Menu callback: Returns the title for a new return in customer level.
 *
 * @param object $order
 *   A fully loaded commerce_order object.
 *
 * @return string
 *   The title to be displayed.
 */
function commerce_rma_return_title($order) {
  return t('Return of goods for order number @number', array('@number' => $order->order_number));
}

/**
 * Menu callback: Returns the correct form regarding the sped passed into this
 * function
 *
 * @param stdClass $order
 *   A fully loaded commerce_order object.
 * @param object $account
 *   A fully loaded user account.
 * @param string $step
 *   A return workflow step. Two values are accepted: "default" and "review".
 *
 * @return array
 *   The return creation form for customers.
 */
function commerce_rma_new_return_router(stdClass $order, $account, $step) {
  switch ($step) {
    case "default":
      // No page title is defined since the menu entry is an action callback.
      drupal_set_title(commerce_rma_return_title($order));

      return drupal_get_form('commerce_rma_return_form', commerce_return_new($order, $account->uid));
      break;
    case "review":
      // Try to load the cached CommerceReturn object using ctools libraries.
      ctools_include('object-cache');
      $return = ctools_object_cache_get('CommerceReturn', 'rma');

      if (is_null($return)) {
        drupal_fast_404();
      }

      return drupal_get_form('commerce_rma_return_review_form', $return);
      break;
    default:
      drupal_fast_404();
      break;
  }
}


/**
 * Check user access for CommerceReturn entity type.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param CommerceReturn $return
 *   Optionally a CommerceReturn entity to check access for. If no entity is
 *   given, it will be determined whether access is allowed for all entities of
 *   CommerceReturn type.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @param object $order
 *   Sometimes we need to perform specific checks on related order.
 *
 * @return bool
 *   True if operation is authorized otherwise returns False.
 */
function commerce_rma_access($op, CommerceReturn $return = NULL, $account = NULL, $order = NULL) {
  switch ($op) {
    case 'view':
    case 'update':
    case 'delete':
      return commerce_return_access($op, $return, $account);
      break;
    case 'create':
      return (
        commerce_return_access($op, $return, $account)
        ||
        user_access('access return of goods', $account)
      )
      &&
      ((bool) variable_get('return_is_activated', TRUE))
      &&
      commerce_rma_new_return_is_possible($order);
      break;
  }

  return FALSE;
}

/**
 * Check two items before granting user access to return of their goods:
 *   - Ensure there is at least one product that can be returned.
 *   - Check the return period.
 *
 * @param stdClass $order
 *   A fully loaded order object.
 *
 * @return bool
 *   True if a new return can be created from the given order otherwise returns
 *   false.
 */
function commerce_rma_new_return_is_possible(stdClass $order) {
  // Ensure there is at least one product that can be returned.
  $diff = array();
  // Loop over order line items and build an array storing quantity keyed by
  // product ID.
  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $line_item_wrapper) {
    if (!in_array('commerce_product', array_keys($line_item_wrapper->getPropertyInfo()))) {
      continue;
    }

    if (!isset($diff[$line_item_wrapper->commerce_product->product_id->value()])) {
      $diff[$line_item_wrapper->commerce_product->product_id->value()] = array(
        'quantity' => (int) $line_item_wrapper->quantity->value(),
      );
    }
    else {
      $diff[$line_item_wrapper->commerce_product->product_id->value()]['quantity'] += $line_item_wrapper->quantity->value();
    }
  }
  // Loop over returns and calculate the product than can be returned.
  // Keyed by product Id.
  foreach (commerce_return_get_order_returns($order) as $return) {
    foreach (entity_metadata_wrapper('commerce_return', $return)->commerce_return_line_items as $line_item_wrapper) {
      if (isset($diff[$line_item_wrapper->commerce_product->product_id->value()])) {
        $diff[$line_item_wrapper->commerce_product->product_id->value()]['quantity'] -= $line_item_wrapper->quantity->value();

        if ($diff[$line_item_wrapper->commerce_product->product_id->value()]['quantity'] <= 0) {
          unset($diff[$line_item_wrapper->commerce_product->product_id->value()]);
        }
      }
    }
  }
  // Check the order status.
  if ($order->status != variable_get('return_order_status', 'completed')) {
    return FALSE;
  }


  // Check the return period.
  $return_period = array(
    'unit' => variable_get('return_period_unit', 0),
    'granularity' => variable_get('return_period_granularity', 'D'),
  );

  if (!empty($return_period['unit'])) {
    // Seek for the time where the order was updated for the first time and with
    // the same status as the one defined in return settings.
    $query = db_select('commerce_order_revision', 'cor')
      ->fields('cor', array('revision_timestamp'))
      ->condition('order_id', $order->order_id)
      ->condition('status', variable_get('return_order_status', 'completed'))
      ->orderBy('revision_timestamp', 'ASC');
    $timestamp = $query->execute()->fetchAssoc();

    // If no timestamp found, that means order has never reached the status
    // configured in return settings to proceed to the return workflow.
    if (empty($timestamp)) {
      return FALSE;
    }
    $timestamp = new DateTime("@" . reset($timestamp));

    return !empty($diff) && ($timestamp->add(new DateInterval('P' . $return_period['unit'] . $return_period['granularity'])) >= new DateTime());
  } else {
    // Since no return period has been set, we just need to check if at least
    // one product can be returned.
    return !empty($diff);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Extends the CommerceReturn settings to expose the configuration needed by
 * this module.
 */
function commerce_rma_form_commerce_return_settings_alter(&$form, &$form_state, $form_id) {
  // Attach the default module CSS file to the form.
  $form['#attached']['css'][] = drupal_get_path('module', 'commerce_rma') . '/theme/commerce_rma.theme.css';

  // Expose the order status and return period.
  $form['order'] = array(
    '#type' => 'fieldset',
    '#title' => t('Order settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => user_access('configure return settings'),
    '#group' => 'return_settings',
    '#weight' => 1,
  );
  $form['order']['return_order_status'] = array(
    '#type' => 'select',
    '#options' => commerce_order_status_options_list(),
    '#title' => t('Order status'),
    '#description' => t('Select the order status which allows a customer to proceed returning their goods.'),
    '#default_value' => variable_get('return_order_status', 'completed'),
  );
  $form['order']['return_period_unit'] = array(
    '#title' => t('Return period'),
    '#type' => 'textfield',
    '#element_validate' => array('element_validate_integer'),
    '#size' => 3,
    '#default_value' => variable_get('return_period_unit', 0),
  );
  $form['order']['return_period_granularity'] = array(
    '#type' => 'select',
    '#options' => array(
      'D' => t('days'),
      'M' => t('months'),
      'Y' => t('years')
    ),
    '#default_value' => variable_get('return_period_granularity', 'D'),
    '#description' => t('Define the return period where the customer is allowed to return their goods. Leave 0 if you don\'t need to configure a return period.'),
  );
}

/**
 * Display the return received in that function
 *
 * @param CommerceReturn $return
 *   A fully loaded return object.
 * @param string $view_mode
 *   The view mode for displaying the order, 'administrator' or 'customer'.
 *
 * @return string
 *   HTML to render.
 */
function commerce_rma_return_view(CommerceReturn $return, $view_mode = 'administrator') {
  $entity = entity_view('commerce_return', array($return), $view_mode);
  $entity['#attached']['css'] = array(
    drupal_get_path('module', 'commerce_return') . '/theme/commerce_return.theme.css'
  );


  return drupal_render($entity);
}

/**
 * Implements hook_views_api().
 */
function commerce_rma_views_api($module, $api) {
  if ($module == 'views') {
    return array(
      'version' => 3,
      'path' => drupal_get_path('module', 'commerce_rma') . '/includes/views',
    );
  }
}
