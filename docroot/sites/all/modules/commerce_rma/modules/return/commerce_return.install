<?php

/**
 * Implements hook_schema().
 */
function commerce_return_schema() {
  $schema = array();

  $schema['commerce_return'] = array(
    'description' => 'The base table for returns.',
    'fields' => array(
      'return_id' => array(
        'description' => 'The primary identifier for a return.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'return_number' => array(
        'description' => 'The return number displayed to the customer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'revision_id' => array(
        'description' => 'The current {commerce_return_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The type of this return.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this return.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mail' => array(
        'description' => 'The e-mail address associated with the return.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The status name of this return.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the return was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the return was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hostname' => array(
        'description' => 'The IP address that created this return.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('return_id'),
    'unique keys' => array(
      'return_number' => array('return_number'),
      'revision_id' => array('revision_id'),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'commerce_return_revision',
        'columns' => array('revision_id' => 'revision_id'),
      ),
      'owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['commerce_return_revision'] = array(
    'description' => 'Saves information about each saved revision of a {commerce_return}.',
    'fields' => array(
      'return_id' => array(
        'description' => 'The {commerce_return}.return_id of the return this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'return_number' => array(
        'description' => 'The return number displayed to the customer for this revision.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_uid' => array(
        'description' => 'The {users}.uid that owns the return at this revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mail' => array(
        'description' => 'The e-mail address associated with the return at this revision.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The status name of this revision.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'revision_hostname' => array(
        'description' => 'The IP address that created this return.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'return_id' => array('return_id'),
    ),
    'foreign keys' => array(
      'return' => array(
        'table' => 'commerce_return',
        'columns' => array('return_id' => 'return_id'),
      ),
      'owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['commerce_return_reason'] = array(
    'description' => 'The base table for return reasons.',
    'fields' => array(
      'return_reason_id' => array(
        'description' => 'The primary identifier for a return reason.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine name for a return reason.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human name for a return reason.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of the return reason.',
        'type' => 'text',
        'size' => 'small',
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The type of this return reason.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data. This column is storing whether products reference or product types reference.',
      ),
    ),
    'primary key' => array('return_reason_id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function commerce_return_uninstall() {
  module_load_include('module', 'commerce');

  // Delete any field instance attached to a commerce_return type.
  commerce_delete_instances('commerce_return', 'commerce_return');
  field_attach_delete_bundle('commerce_return', 'commerce_return');

  // Delete fields related to commerce_return entity type.
  commerce_delete_field('commerce_return_line_items');
  commerce_delete_field('commerce_return_total');
  commerce_delete_field('commerce_order_reference');
  commerce_delete_field('commerce_customer_rma');

  // Delete any field instance attached to a commerce_return_reason type.
  commerce_delete_instances('commerce_return_reason', 'commerce_return_reason');
  field_attach_delete_bundle('commerce_return_reason', 'commerce_return_reason');

  // Delete fields related to commerce_return_reason entity type.
  commerce_delete_field('return_reason_taxonomy_term');
  commerce_delete_field('return_reason_product');
  commerce_delete_field('return_reason_product_type');

  // Delete the "return_reason" taxonomy vocabulary.
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('return_reason')) {
    taxonomy_vocabulary_delete($vocabulary->vid);
  }

  // Delete the global variable storing all the rma settings.
  variable_del('return_is_activated');
}

/**
 * Ensures the line item field is present on the default return bundle.
 */
function commerce_return_configure_return_type($type = 'commerce_return') {
  $fields = field_info_fields();
  $instances = field_info_instances();
  $field_types = field_info_field_types();

  // Clear the field cache if the entityreference type field is not found.
  if (!$field_types['entityreference']) {
    field_cache_clear();
  }

  $field = array(
    'field_name' => 'commerce_return_line_items',
    'type' => 'commerce_line_item_reference',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'entity_types' => array('commerce_return'),
    'translatable' => FALSE,
    'locked' => TRUE,
  );

  if (empty($fields['commerce_return_line_items'])) {
    field_create_field($field);
  }
  else {
    field_update_field($field);
  }

  $instance = array(
    'field_name' => 'commerce_return_line_items',
    'entity_type' => 'commerce_return',
    'bundle' => $type,
    'label' => t('Line items'),
    'settings' => array(),
    'widget' => array(
      'type' => 'commerce_return_line_item_manager',
      'weight' => -10,
    ),
    'display' => array(),
  );

  // Set the default display formatters for various view modes.
  foreach (array('default', 'customer', 'administrator') as $view_mode) {
    $instance['display'][$view_mode] = array(
      'label' => 'hidden',
      'type' => 'commerce_line_item_reference_view',
      'settings' => array(
        'view' => 'commerce_line_item_table|return',
      ),
      'weight' => -10,
    );
  }
  if (empty($instances['commerce_return'][$type]['commerce_return_line_items'])) {
    field_create_instance($instance);
  }
  else {
    field_update_instance($instance);
  }

  // Add the order total price field.
  commerce_price_create_instance('commerce_return_total', 'commerce_return', $type, t('Total to refund'), -9, FALSE, array('type' => 'commerce_price_formatted_components'));

  // Attach the default rma customer profile.
  commerce_return_configure_customer_profile_type('rma', t('Return information'), $type);


  // Create a commerce_order_reference field in order to do a relationship
  // between a return and its order.
  $field = array(
    'entity_types' => array('commerce_return'),
    'settings' => array(
      'handler' => 'base',
      'target_type' => 'commerce_order',
    ),
    'field_name' => 'commerce_order_reference',
    'type' => 'entityreference',
    'locked' => TRUE,
    'cardinality' => 1,
  );

  if (empty($fields['commerce_order_reference'])) {
    field_create_field($field);
  }
  else {
    field_update_field($field);
  }

  $instance = array(
    'field_name' => 'commerce_order_reference',
    'entity_type' => 'commerce_return',
    'bundle' => $type,
    'label' => t('Order Reference'),
    'description' => t('Attach a return to an order.'),
    'display' => array(
      'default' => array(
        'module' => 'entityreference',
        'settings' => array(
          // Help the administrator to easily find the linked order.
          'link' => 1,
        ),
        'type' => 'entityreference_label',
      ),
    ),
  );

  if (empty($instances['commerce_return'][$type]['commerce_order_reference'])) {
    field_create_instance($instance);
  }
  else {
    field_update_instance($instance);
  }
}

/**
 * Configure the Commerce Return Reason bundle passed as parameter of this
 * function. Attach the fields exposed by default by the Commerce Return Reason
 * entity type.
 */
function commerce_return_reason_configure_return_reason_types() {
  $fields = field_info_fields();
  $instances = field_info_instances();
  $field_types = field_info_field_types();

  // First, initialize the return reason taxonomy vocabulary.
  $vocabulary = new stdClass();
  $vocabulary->name = t('Return reason');
  $vocabulary->machine_name = 'return_reason';
  $vocabulary->description = t('This taxonomy vocabulary is used by the commerce_return module to expose return reason to customers.');
  $vocabulary->hierarchy = 0;
  $vocabulary->module = 'commerce_return';

  $return_reason = taxonomy_vocabulary_machine_name_load($vocabulary->machine_name);

  // Save the vocabulary if not saved yet.
  if (empty($return_reason)) {
    taxonomy_vocabulary_save($vocabulary);
  }

  // Now add a simple text field called "group" and attach it on the previously
  // created taxonomy vocabulary.
  $field = array(
    'active' => TRUE,
    'cardinality' => 1,
    'entity_types' => array('taxonomy_term'),
    'field_name' => 'commerce_return_reason_group',
    'locked' => FALSE,
    'module' => 'text',
    'settings' => array(
      'max_length' => '128',
    ),
    'translatable' => TRUE,
    'type' => 'text',
  );


  if (!isset($fields['commerce_return_reason_group'])) {
    field_create_field($field);
  }
  else {
    field_update_field($field);
  }

  $instance = array(
    'bundle' => $vocabulary->machine_name,
    'default_value' => array(
      0 => array(
        'value' => 'product',
      ),
    ),
    'description' => t('This field is used for sort the return reasons by group name.'),
    'entity_type' => 'taxonomy_term',
    'field_name' => 'commerce_return_reason_group',
    'label' => t('Group'),
    'required' => TRUE,
    'widget' => array(
      'active' => TRUE,
      'module' => 'text',
      'settings' => array(
        'size' => '60',
      ),
      'type' => 'text_textfield',
    ),
  );

  if (!isset($instances['taxonomy_term'][$vocabulary->machine_name]['commerce_return_reason_group'])) {
    field_create_instance($instance);
  }
  else {
    field_update_instance($instance);
  }

  // Clearing the return reason vocabulary cache in order to save properly
  // fields values.
  taxonomy_vocabulary_static_reset(array($vocabulary->vid));

  // Adding default taxonomy terms for return reason vocabulary.
  foreach (array(
             'Wrong product received' => 'product',
             'Poor product description' => 'product',
             "Don't like the product" => 'product',
             'Defective product' => 'product',
             'Product damaged during transport' => 'carrier'
           ) as $term_name => $term_group_name) {
    $term = new stdClass();
    $term->name = $term_name;
    $term->commerce_return_reason_group = array(
      LANGUAGE_NONE =>
        array(
          0 => array(
            'value' => $term_group_name,
            'safe_value' => $term_group_name,
          ),
        ),
    );
    $term->vid = $vocabulary->vid;

    taxonomy_term_save($term);
  }

  // Clear the field cache if the commerce_product_reference field type is not
  // found.
  if (!$field_types['commerce_product_reference']) {
    field_cache_clear();
  }

  $field = array(
    'active' => TRUE,
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'entity_types' => array('commerce_return_reason'),
    'field_name' => 'return_reason_product',
    'locked' => TRUE,
    'translatable' => FALSE,
    'type' => 'commerce_product_reference',
  );

  if (!isset($fields['return_reason_product'])) {
    field_create_field($field);
  }
  else {
    field_update_field($field);
  }

  $instance = array(
    'bundle' => 'product',
    'default_value' => NULL,
    'description' => t('Select the products where you want to apply the customer reason on.'),
    'entity_type' => 'commerce_return_reason',
    'field_name' => 'return_reason_product',
    'label' => t('Products'),
    'required' => FALSE,
    'settings' => array(
      'field_injection' => TRUE,
      'referenceable_types' => array(),
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => TRUE,
      'module' => 'commerce_product_reference',
      'settings' => array(
        'autocomplete_match' => 'contains',
        'autocomplete_path' => 'commerce_product/autocomplete',
        'size' => '60',
      ),
      'type' => 'commerce_product_reference_autocomplete',
    ),
  );

  if (empty($instances['commerce_return_reason']['product']['return_reason_product'])) {
    field_create_instance($instance);
  }
  else {
    field_update_instance($instance);
  }

  // Create a multiple options field to allow the granted user to pick up
  // product types as point of reference for customer reasons.
  $field = array(
    'active' => TRUE,
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'entity_types' => array('commerce_return_reason'),
    'field_name' => 'return_reason_product_type',
    'locked' => TRUE,
    'translatable' => FALSE,
    'type' => 'list_text',
  );

  if (!isset($fields['return_reason_product_type'])) {
    field_create_field($field);
  }
  else {
    field_update_field($field);
  }

  $instance = array(
    'bundle' => 'product_type',
    'default_value' => NULL,
    'description' => 'Select product types where you want to apply customer reasons on.',
    'entity_type' => 'commerce_return_reason',
    'field_name' => 'return_reason_product_type',
    'label' => ('Product types'),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => TRUE,
      'module' => 'options',
      'type' => 'options_select',
    ),
  );

  if (empty($instances['commerce_return_reason']['product_type']['return_reason_product_type'])) {
    field_create_instance($instance);
  }
  else {
    field_update_instance($instance);
  }

  // Create a term reference field in order to store the return reason on
  // taxonomy level.
  $field = array(
    'translatable' => TRUE,
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'entity_types' => array('commerce_return_reason'),
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
    'field_name' => 'return_reason_taxonomy_term',
    'type' => 'taxonomy_term_reference',
  );

  if (empty($fields['return_reason_taxonomy_term'])) {
    field_create_field($field);
  }
  else {
    field_update_field($field);
  }

  $instance = array(
    'field_name' => 'return_reason_taxonomy_term',
    'bundle' => 'product',
    'entity_type' => 'commerce_return_reason',
    'label' => t('Return reasons'),
    'description' => t('Pick up the customer reason to be displayed regarding the selected conditions above.'),
  );

  if (empty($instances['commerce_return_reason']['product']['field_taxonomy_term'])) {
    field_create_instance($instance);
  }
  else {
    field_update_instance($instance);
  }

  $instance = array(
    'field_name' => 'return_reason_taxonomy_term',
    'bundle' => 'product_type',
    'entity_type' => 'commerce_return_reason',
    'label' => t('Return reasons'),
    'description' => t('Pick up the customer reason to be displayed regarding the selected conditions above.'),
  );

  if (empty($instances['commerce_return_reason']['product_type']['field_taxonomy_term'])) {
    field_create_instance($instance);
  }
  else {
    field_update_instance($instance);
  }
}
