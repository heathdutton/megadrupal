<?php

/**
 * @file user_entities.module
 */

/**
 * Implements hook_menu().
 */
function user_entities_menu() {
  $items = array();
  $items['admin/config/people/user-entities'] = array(
    'title' => t('User Entities'),
    'description' => t('The settings page for configuring ther user_entities module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_entities_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer user entities settings'),
    'file' => 'user_entities.admin.inc',
    'file path' => drupal_get_path('module', 'user_entities'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user-entities/associate/%/%'] = array(
    'title' => t('Associate User Entity'),
    'description' => t('The act of associating an entity with a user.'),
    'page callback' => 'user_entities_associate_with_user',
    'page arguments' => array(2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('user entities associate'),
    'type' => MENU_CALLBACK,
  );
  $items['user-entities/disassociate/%/%'] = array(
    'title' => t('Associate User Entity'),
    'description' => t('The act of associating an entity with a user.'),
    'page callback' => 'user_entities_disassociate_with_user',
    'page arguments' => array(2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('user entities associate'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%/content'] = array(
    'title' => t('Saved Content'),
    'page callback' => 'user_entities_link_tab',
    'page arguments' => array(1),
    'access callback' => 'user_entities_owner_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Access callback for user page tab
 */
function user_entities_owner_access($arg_user) {
  global $user;
  if ($user->uid != $arg_user) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Implements hook_permission().
 */
function user_entities_permission() {
  return array(
    'administer user entities settings' => array(
      'title' => t('Administer User-Entities Settings'),
      'description' => t('Perform administrative actions and access settings for user_entities.'),
    ),
    'user entities associate' => array(
      'title' => t('Associate/Disassociate Entities'),
      'description' => t('Allow users to add and remove entities from their account.'),
    ),
  );
}


/**
 * Implements hook_entity_view_alter().
 */
function user_entities_entity_view_alter(&$build, $type) {
  // We can only do this if this option is turned on
  $user_entities_view_on = variable_get('user_entities_enable_content_type_links', 0);
  if (!isset($user_entities_view_on) || empty($user_entities_view_on)) {
    return;
  }
  // Additionally, we can only do this if the user is already logged in
  global $user;
  if (!empty($user->uid)) {
    // Determine if this is one of the entities we are configured to use.
    $configured_entities = variable_get('user_entities_entity_options', array());
    if (in_array($type, $configured_entities)) {
      // If we have a specific bundle, then assign it here for the purposes of allowing
      // bundle specific associating.
      $bundle = (!empty($build['#bundle'])) ? $build['#bundle'] : NULL;

      // If we have a type and that type has a bundle, we need to determine if this entity
      // is of that type and that bundle.
      $bundles = variable_get('user_entities_' . $type . '_bundles', array());
      if (in_array($bundle, $bundles)) {
        switch ($type) {
          case 'node':
            $eid = $build['#node']->nid;
            break;
          case 'taxonomy_term':
            $eid = $build['#term']->tid;
            break;
          case 'comment':
          default:
            break;
        }

        if ($build['#entity_type'] == 'user') {
          $eid = $build['#account']->uid;
        }

        $is_content = user_entities_is_content($type, $eid);
        if (!empty($is_content)) {
          // If the user is already associated with this entity, then we need to display
          // a disassociate link, otherwise display an associate link.
          $already_associated = user_entities_is_associated_with_entity($user->uid, $eid, $type);
          if (!empty($already_associated)) {
            // Display the disassociate link.
            $disassociate = variable_get('user_entities_content_link_disassociate', 'Associate');
            if ($type == 'user' && $user->uid != $eid) {
              $build['summary']['associate']['#type'] = 'user_profile_item';
              $build['summary']['associate']['#title'] = $disassociate;
              $build['summary']['associate']['#markup'] = l($disassociate, 'user-entities/disassociate/' . $type . '/' . $eid);
            }
            else {
              $build['links']['user_entities']['#links'] = array(
                'user_entity_association' => array(
                  'title' => $disassociate,
                  'query' => array(),
                  'href' => 'user-entities/disassociate/' . $type . '/' . $eid,
                ),
              );
            }
          }
          else {
            // Display the associate link.
            $associate = variable_get('user_entities_content_link_associate', 'Associate');
            if ($type == 'user' && $user->uid != $eid) {
              $build['summary']['associate']['#type'] = 'user_profile_item';
              $build['summary']['associate']['#title'] = $associate;
              $build['summary']['associate']['#markup'] = l($associate, 'user-entities/associate/user/' . $type . '/' . $eid);
            }
            else {
              $build['links']['user_entities']['#links'] = array(
                'user_entity_association' => array(
                  'title' => $associate,
                  'query' => array(),
                  'href' => 'user-entities/associate/' . $type . '/' . $eid,
                ),
              );
            }
          }

          //foreach (module_implements('user_entities_associate_interface') as $module) {
          //  $function = $module . '_user_entities_associate_interface';
          //  $function($eid, $type, $bundle);
          //}
        }
        else {
          // Unauthenticated action goes here. This may be as simple as a link to login or
          // register an account.
        }
      }
      else {
      // Unauthenticated action goes here. This may be as simple as a link to login or
      // register an account.
      }
    }
    else {
      // Unauthenticated action goes here. This may be as simple as a link to login or
      // register an account.
    }
  }
}

/**
 * Save the entity reference to the user's record.
 *
 * Associate the eid and entity type of the requested record with the user requesting it.
 *
 * @param int $uid
 *   The user_id of the user for which this data is to be associated
 * @param int $eid
 *   The entity_id of the content being associated. This will be a node id, user id, or
 *   other entity identifier.
 * @param string $entity_type
 *   The machine name of the type of entity to which the entity id belongs.
 *
 * @return bool $success
 *   Returns TRUE if successful or FALSE if not successful.
 */
function user_entities_associate_with_user($entity_type, $eid) {
  global $user;
  $uid = $user->uid;

  // Sanity check
  if (user_entities_is_associated_with_entity($uid, $eid, $entity_type) == FALSE) {
    $data = array(
      'uid' => $uid,
      'eid' => $eid,
      'entity_type' => $entity_type,
    );
    $success = drupal_write_record('user_entities', $data);
    if (!empty($success)) {
      drupal_set_message('You have successfully associated this content with your account.');
    }
    else {
      drupal_set_message('This content could not be associated with your account at this time.', 'error');
    }
  }
  else {
    drupal_set_message('This content is already associated with your account.');
  }

  // Go back to where we came from
  // First step in doing this is get the drupal real path back to the content
  $real_path = user_entities_get_entity_path($entity_type, $eid);
  // Then go to it! The system should convert this to the nice path if pathauto
  // is enabled.
  drupal_goto(drupal_get_path_alias($real_path));
}

/**
 * Remove the entity reference from the user's record.
 *
 * Delete a reference from the user.
 *
 * @param int $aid
 *   The association id - the reference to the association data.
 */
function user_entities_disassociate_with_user($entity_type, $entity_id) {
  global $user;
  $uid = $user->uid;

  // We need to query first so we can tell where to return the user once the association
  // has been deleted
  $result = db_select('user_entities', 'u')
    ->fields('u')
    ->condition('u.eid', $entity_id)
    ->condition('u.entity_type', $entity_type)
    ->condition('u.uid', $uid)
    ->execute();
  $edata = $result->fetchObject();

  // Remove the association to the entity
  db_delete('user_entities')
    ->condition('eid', $entity_id)
    ->condition('entity_type', $entity_type)
    ->execute();

  // Set our message output to the user.
  drupal_set_message('You have successfully removed this content from your account.');

  // Go back to where we came from
  // First step in doing this is get the drupal real path back to the content
  $real_path = user_entities_get_entity_path($edata->entity_type, $edata->eid);
  // Then go to it! The system should convert this to the nice path if pathauto
  // is enabled.
  drupal_goto(drupal_get_path_alias($real_path));
}

/**
 * Query the associations to see if the current entity is associated.
 *
 * @param int $eid
 *   The entity_id of the content being checked.
 * @param string $entity_type
 *   The machine name of the type of entity to which the entity id belongs.
 * @return bool $success
 *   Returns TRUE if successful or FALSE if not successful.
 */
function user_entities_is_associated_with_entity($uid, $eid, $entity_type) {
  $result = db_select('user_entities', 'u')
    ->fields('u')
    ->condition('u.uid', $uid)
    ->condition('u.eid', $eid)
    ->condition('u.entity_type', $entity_type)
    ->execute();
  if ($result->rowCount() > 0) {
    $edata = $result->fetchObject();
    return $edata->aid;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function to determine the path to the content being acted on.
 *
 * @param int $eid
 *   The entity_id of the content being checked.
 * @param string $entity_type
 *   The machine name of the type of entity to which the entity id belongs.
 * @return string $path
 *   The Drupal real path for this piece of content.
 */
function user_entities_get_entity_path($entity_type, $eid) {
  switch ($entity_type) {
    case 'taxonomy_term':
      $path = 'taxonomy/term/' . $eid;
      break;
    default:
      $path = $entity_type . '/' . $eid;
      break;
  }
  return $path;
}

/**
 * Implements hook_user_view().
 */
function user_entities_link_tab($uid) {
  // Initialize our HTML output
  $html = NULL;

  // Get the bundles
  $info = entity_get_info();
  foreach ($info as $entity_type => $entity_data) {
    foreach ($entity_data['bundles'] as $bundle_type => $bundle_data) {
      $bundle[$entity_type][$bundle_type] = $bundle_data['label'];
    }
  }

  // Get all the relationships between entities and this user.
  $result = db_select('user_entities', 'u')
    ->fields('u')
    ->condition('u.uid', $uid)
    ->orderBy('u.entity_type', 'ASC')
    ->execute();
  if ($result->rowCount() > 0) {
    $user_entities = array();
    while($edata = $result->fetchObject()) {
      // Flag this entity type as present so we can label it.
      $entities_present[$edata->entity_type] = TRUE;

      // Retrieve the aliased path to this piece of content
      $path = user_entities_get_entity_path($edata->entity_type, $edata->eid);

      // Get the entity information so we can get the details we need to display.
      $entity = entity_load($edata->entity_type, array($edata->eid));

      // Depending on the type of association, we need to get our data from different.
      // places.
      switch ($edata->entity_type) {
        case 'user':
          $display_title = $entity[$edata->eid]->name;
          $user_entities[$edata->entity_type]['Users'][$edata->eid] =
            '<a href="/' . drupal_get_path_alias($path) . '">' . $display_title . '</a>';
          break;
        case 'node':
        default:
          $display_title = $entity[$edata->eid]->title;
          $user_entities[$edata->entity_type][ $bundle[$edata->entity_type][$entity[$edata->eid]->type] ][$edata->eid] =
            '<a href="/' . drupal_get_path_alias($path) . '">' . $display_title . '</a>';
          break;
      }

      // Taxonomy terms are a different animal and must be handled accordingly.
      if (!empty($entity[$edata->eid]->vocabulary_machine_name)) {
        $edata->entity_type = 'taxonomy_term';
        $display_title = $entity[$edata->eid]->name;
        $user_entities[$edata->entity_type][$bundle[$edata->entity_type][$entity[$edata->eid]->vocabulary_machine_name]][$edata->eid] =
          '<a href="/' . drupal_get_path_alias($path) . '">' . $display_title . '</a>';
      }
    }

    if (!empty($user_entities)) {
      ksort($user_entities);
      $display = array();
      foreach($entities_present as $type => $value) {
        asort($user_entities[$type]);
        $display[$type] = $user_entities[$type];
      }

      $html = NULL;
      foreach($display as $key => $bundle_entity) {
        foreach($bundle_entity as $label => $e) {
          $html .= '<ul><li>' . $label . '</li><ul>';
          foreach($e as $item) {
            $html .= '<li>' . $item . '</li>';
          }
          $html .= '</ul></ul>';
        }
        $html .= '</ul>';
      }
    }
  }
  return $html;
}

/**
 * Implements hook_block_info().
 */
function user_entities_block_info() {
  $blocks = array();
  $blocks['user_entities_link'] = array(
    'info' => t('User Entities Associate/Disassociate Link'),
  );
  return $blocks;
}

/**
 * Implemements hook_block_configure().
 */
function user_entities_block_configure($delta) {
  $form = array();
  if ($delta == 'user_entities_link') {
    $form['user_entities_link_associate'] = array(
      '#type' => 'textfield',
      '#title' => 'Text For Associate Link',
      '#default_value' => variable_get('user_entities_link_associate', 'Associate'),
      '#size' => 50,
      '#required' => TRUE,
    );
    $form['user_entities_link_disassociate'] = array(
      '#type' => 'textfield',
      '#title' => 'Text For Associate Link',
      '#default_value' => variable_get('user_entities_link_disassociate', 'Disassociate'),
      '#size' => 50,
      '#required' => TRUE,
    );
    $form['user_entities_link_class'] = array(
      '#type' => 'textfield',
      '#title' => 'Class Name For Link',
      '#size' => 30,
      '#default_value' => variable_get('user_entities_link_class', NULL),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function user_entities_block_save($delta, $edit) {
  if ($delta == 'user_entities_link') {
    variable_set('user_entities_link_associate', $edit['user_entities_link_associate']);
    variable_set('user_entities_link_disassociate', $edit['user_entities_link_disassociate']);
    variable_set('user_entities_link_class', $edit['user_entities_link_class']);
  }
}

/**
 * Implements hook_block_view().
 */

function user_entities_block_view($delta) {
  $block = array();
  if ($delta == 'user_entities_link') {
    $block['subject'] = NULL;
    $block['content'] = array(
      '#markup' => user_entities_block_draw(),
    );
  }
  return $block;
}

/**
 * Draw the link with our configured options
 */
function user_entities_block_draw() {
  global $user;
  if (!empty($user->uid)) {
    $html = NULL;
    $associate = variable_get('user_entities_link_associate', 'Associate');
    $disassociate = variable_get('user_entities_link_disassociate', 'Disassociate');
    $class = variable_get('user_entities_link_class', NULL);

    $path = arg();
    $entity_id = array_pop($path);
    $entity_url_base = join('/', $path);

    switch ($entity_url_base) {
      case 'node':
        $entity_type = 'node';
        // Need to load the node to get the bundle. There must be a better way.
        $node = node_load($entity_id);
        break;
      case 'taxonomy/term':
        $entity_type = 'taxonomy_term';
        break;
      case 'user':
        $entity_type = 'user';
        break;
      default:
        $entity_type = NULL;
        break;
    }

    if (user_entities_is_content($entity_type, $entity_id) == TRUE) {
      if (!empty($entity_type)) {
        $html .=  '<div class="user-entities-link-block">';
        $options = (!empty($class)) ? $options = array('class' => $class) : $options = array();
        if (empty(user_entities_is_associated_with_entity($user->uid, $entity_id, $entity_type))) {
          // Associate
          $html .= l($associate, 'user-entities/associate/' . $entity_type . '/' . $entity_id, $options);
        }
        else {
          // Disassociate
          $html .= l($disassociate, 'user-entities/disassociate/' . $entity_type . '/' . $entity_id, $options);
        }
        $html .= '</div>';
        return $html;
      }
    }
    else {
      return NULL;
    }
  }
  else {
    return NULL;
  }
}

/**
 * Check Entity Type and Entity ID to see if they're in our allowed list.
 *
 * @param string $entity_type
 *   The machine name of our entity type.
 *
 * @param int $entity_id
 *   The integer id of the entity being checked.
 *
 * @return book $association
 *   Whether or not we should present an associate/disassociate link.
 */
function user_entities_is_content($entity_type, $entity_id) {
  // Determine if this is one of the entities we are configured to use.
  $configured_entities = variable_get('user_entities_entity_options', array());
  if (in_array($entity_type, $configured_entities) && !empty($configured_entities[$entity_type])) {
    $entity = entity_load($entity_type, array($entity_id));
    $entity = $entity[$entity_id];

    // Get the bundle from the entity type where applicable. Currently, comment is missing
    // since I do not yet have an example of that.
    switch ($entity_type) {
      case 'taxonomy_term':
        $bundle = $entity->vocabulary_machine_name;
        break;
      case 'user':
        $bundle = 'user';
        break;
      case 'node':
      default:
        $bundle = $entity->type;
        break;
    }

    // If we have a type and that type has a bundle, we need to determine if this entity
    // is of that type and that bundle.
    $bundles = variable_get('user_entities_' . $entity_type . '_bundles', array());
    if (in_array($bundle, $bundles)) {
      return TRUE;
    }
  }
  return FALSE;
}