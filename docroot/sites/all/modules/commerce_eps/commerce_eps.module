<?php
/**
 * @file
 * Implements EPS/Giropay Website Payments Standard in Drupal Commerce checkout.
 */

define('COMMERCE_EPS_CURRENCY_CODE_DEFAULT', 'EUR');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_eps_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_eps'] = array(
    'base' => 'commerce_eps',
    'title' => t('EPS'),
    'short_title' => t('EPS'),
    'description' => t('E-Payment Standard for Online bank transfer'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,

    // Because the order form generation code does not have access to a payment
    // method info array, we set the bn directly there instead of making use of
    // this buttonsource variable. It's here for consistency with other payment
    // methods in this package.
    'buttonsource' => 'images/eps_gp_logo.gif',
  );

  return $payment_methods;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prepends the EPS icon to the payment method in the checkout form.
 */
function commerce_eps_form_commerce_checkout_form_alter(&$form, &$form_state) {

  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {

    // Loop over its options array looking for an EPS option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find EPS payment, prepend logo
      if ($method_id == 'commerce_eps') {
        // find out if Giropay is supported as well
        $eps_mode = $form_state['order']->payment_methods[$key]['settings']['eps_mode'] ?
          $form_state['order']->payment_methods[$key]['settings']['eps_mode'] : 'eps';

        $variables = array(
          'path' => drupal_get_path('module', 'commerce_eps') . '/images/' . $eps_mode . '-logo.gif',
          'title' => t('EPS'),
          'alt' => t('EPS'),
          'attributes' => array(
            'class' => array('commerce-eps-icon'),
            'height' => '40px',
          ),
        );
        $icon = theme('image', $variables);
        $value = t('!logo EPS/Giropay - Online bank transfer', array('!logo' => $icon));

        // Add the CSS.
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_eps') . '/commerce_eps.css';
        break;
      }
    }
  }
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 * use function for building a EPS form.
 */
function commerce_eps_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['eps_mode']) ||
      empty($payment_method['settings']['so_server']) ||
      empty($payment_method['settings']['bfi_bic_id']) ||
      empty($payment_method['settings']['ben_name_address']) ||
      empty($payment_method['settings']['ben_account_id']) ||
      empty($payment_method['settings']['user_id']) ||
      empty($payment_method['settings']['pin'])) {
    drupal_set_message(t('EPS/Giropay is not configured for use. Check your payment method settings.'), 'error');
    return array();
  }

  // render XML request for payment initiation to SO
  $variables = array('order' => $order, 'settings' => $payment_method['settings']);
  $init_pay_xml = theme('commerce_eps_transfer_initiator_details', $variables);

  // send XML request to SO and get BankResponseDetails XML
  $so_url = commerce_eps_server_url($payment_method['settings']['so_server']);
  $bank_response_xml = commerce_eps_send_xml_request($so_url, $init_pay_xml);

  // get redirect URL and error code from XML response
  $handler = new EPSXMLHandler($bank_response_xml);
  if ($handler->validate() &&
      $handler->getElementValue('epsp:ErrorCode') === '000' &&
      valid_url($redirect_url = $handler->getElementValue('epsp:ClientRedirectUrl'))) {

    // parse query parameter for form usage
    $url_query = parse_url($redirect_url, PHP_URL_QUERY);
    parse_str($url_query, $params);

    // cut query from form action path
    $form['#action'] = substr($redirect_url, 0, strpos($redirect_url, $url_query)-1);
    $form['#method'] = 'get'; // SO accepts only GET requests

    // add URL parameter to form
    foreach ($params as $name => $value) {
      if (!empty($value)) {
        $form[$name] = array('#type' => 'hidden', '#value' => $value);
      }
    }
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Proceed to EPS Online Payment'),
    );
  }
  else { // redirect to error page
    $form['#action'] = url('commerce_eps/error');
    $form['#method'] = 'get';
    $form['epserrorcode'] = array('#type' => 'hidden', '#value' => 'error2');
  }
  return $form;
}

/**
 * Formats a price amount into a decimal value as expected by EPS.
 *
 * Copied from commerce_paypal_price_amount().
 *
 * @param $amount
 *   An integer price amount.
 * @param $currency_code
 *   The currency code of the price.
 *
 * @return
 *   The decimal price amount as expected by PayPal API servers.
 */
function commerce_eps_price_amount($amount, $currency_code) {
  $rounded_amount = commerce_currency_round($amount, commerce_currency_load($currency_code));
  return number_format(commerce_currency_amount_to_decimal($rounded_amount, $currency_code), 2, '.', '');
}

/**
 * Implementation of hook_theme().
 *
 * XML requests initiated by the handler are built by using theme functions.
 *
 */
function commerce_eps_theme() {
  $base = array(
    'path' => drupal_get_path('module', 'commerce_eps') .'/theme',
  );
  return array(
    'commerce_eps_transfer_initiator_details' => $base + array(
      'template' => 'TransferInitiatorDetails',
      'file' => 'theme.inc',
    ),
    'commerce_eps_shop_response_details_validated' => $base + array(
      'template' => 'ShopResponseDetailsValidated',
    ),
    'commerce_eps_shop_response_details_not_validated' => $base + array(
      'template' => 'ShopResponseDetailsNotValidated',
    ),
    'commerce_eps_landing_page' => $base + array(
      'template' => 'LandingPage',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function commerce_eps_menu() {
  $base = array(
    'file' => 'callbacks.inc',
    'file path' => drupal_get_path('module', 'commerce_eps') .'/includes',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return array(
    // confirmation URL for vitality checks and confirming payment
    'commerce_eps/confirm/%' => $base + array(
      'page callback' => 'commerce_eps_confirm',
      'page arguments' => array(2),
    ),
    // user page displaying successful transaction (transaction_ok_url)
    'commerce_eps/success' => $base + array(
      'page callback' => 'commerce_eps_success',
     ),
    // user page displaying failed transaction (transaction_nok_url)
    'commerce_eps/error' => $base + array(
      'page callback' => 'commerce_eps_error',
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function commerce_eps_init() {
  module_load_include('inc', 'commerce_eps', 'includes/admin');
  module_load_include('inc', 'commerce_eps', 'includes/xml');
}