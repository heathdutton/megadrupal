<?php

/**
 * @file
 * Provides an field formatter for the carouFredSel jQuery slider,
 * more information on http://caroufredsel.dev7studios.com
 */

/**
 * Implements hook_field_formatter_info().
 *
 * Returns settings for the field formatter.
 * ['settings']['formatter'] contains internal settings for the formatter.
 * ['settings']['config'] mirrors the config from the js library.
 */
function caroufredsel_slider_field_formatter_info() {
  return array(
    'caroufredsel_slider' => array(
      'label' => t('carouFredSel Slider'),
      'field types' => array('image'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'settings' => array(
        'formatter' => array(
          'image_method' => 'image_style',
          'image_style' => 'medium',
          'picture' => NULL,
        ),
        'config' => array(
          'circular' => TRUE,
          'infinite' => TRUE,
          'responsive' => FALSE,
          'direction' => 'left',
          'width' => 'variable',
          'height' => 'variable',
          'cookie' => FALSE,
          'items' => array(
            'visible' => 1,
            'minimum' => 1,
          ),
          'scroll' => array(
            'fx' => 'scroll',
            'easing' => 'swing',
            'duration' => 500,
            'pauseOnHover' => FALSE,
          ),
          'auto' => array(
            'play' => TRUE,
            'progress' => FALSE,
          ),
          'swipe' => FALSE,
          'pagination' => array(
            '__status' => FALSE,
            'keys' => FALSE,
          ),
          'prev' => array(
            '__status' => FALSE,
            'easing' => 'swing',
            'duration' => 500,
          ),
          'next' => array(
            '__status' => FALSE,
            'easing' => 'swing',
            'duration' => 500,
          ),
        ),
        'plugin' => array(
          'debug' => FALSE,
          'transition' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function caroufredsel_slider_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $settings = $instance['display'][$view_mode]['settings'];
  $image_methods = caroufredsel_slider_image_method_options();
  $picture_support = array_key_exists('picture', $image_methods);

  // Formatter specific settings.
  $element['formatter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display settings'),
  );
  if ($picture_support) {
    $element['formatter']['image_method'] = array(
      '#type' => 'select',
      '#title' => t('Image method'),
      '#description' => t('Image style to display the images.'),
      '#default_value' => $settings['formatter']['image_method'],
      '#options' => array(
        'image_style' => t('Image style'),
        'picture' => t('Picture'),
      ),
    );
  }
  $element['formatter']['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image style'),
    '#description' => t('Image style to display the images.'),
    '#default_value' => $settings['formatter']['image_style'],
    '#options' => image_style_options(FALSE),
  );
  if ($picture_support) {
    $element['formatter']['image_style']['#states']['visible'] = array(
      ':input[name$="[formatter][image_method]"]' => array('value' => 'image_style'),
    );
    $element['formatter']['picture'] = array(
      '#type' => 'select',
      '#title' => t('Picture'),
      '#description' => t('Picture mapping to display the images.'),
      '#default_value' => $settings['formatter']['picture'],
      '#options' => picture_get_mapping_options(),
      '#states' => array(
        'visible' => array(
          ':input[name$="[formatter][image_method]"]' => array('value' => 'picture'),
        ),
      ),
    );
  }

  // JS specific settings, matching the options from
  // http://caroufredsel.dev7studios.com/configuration.php.
  $element['config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Widget configuration'),
  );
  $element['config']['direction'] = array(
    '#type' => 'select',
    '#title' => t('Direction'),
    '#description' => t('The direction to scroll the carousel, determines whether the carousel scrolls horizontal or vertical and -when the carousel scrolls automatically- in what direction.'),
    '#default_value' => $settings['config']['direction'],
    '#options' => array(
      'right' => t('Right'),
      'left' => t('Left'),
      'up' => t('Up'),
      'down' => t('Down'),
    ),
  );
  $element['config']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#description' => t('Enter "variable" to automatically resize the carousel when scrolling items with variable widths, "auto" to measure the widest item, a fixed value like "100px", or a relative value like "50%".'),
    '#default_value' => $settings['config']['width'],
    '#size' => 10,
  );
  $element['config']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#description' => t('Enter "variable" to automatically resize the carousel when scrolling items with variable heights, "auto" to measure the highest item, a fixed value like "100px", or a relative value like "50%".'),
    '#default_value' => $settings['config']['height'],
    '#size' => 10,
  );
  $element['config']['circular'] = array(
    '#type' => 'checkbox',
    '#title' => t('Circular'),
    '#description' => t('Determines whether the carousel should be circular.'),
    '#default_value' => $settings['config']['circular'],
  );
  $element['config']['infinite'] = array(
    '#type' => 'checkbox',
    '#title' => t('Infinite'),
    '#description' => t('Determines whether the carousel should be infinite.'),
    '#default_value' => $settings['config']['infinite'],
  );
  $element['config']['responsive'] = array(
    '#type' => 'checkbox',
    '#title' => t('Responsive'),
    '#description' => t('Determines whether the carousel should be responsive. If enabled, the items will be resized to fill the carousel.'),
    '#default_value' => $settings['config']['responsive'],
  );
  $element['config']['cookie'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cookie'),
    '#description' => t('Determines whether the carousel should start at its last viewed position.'),
    '#default_value' => $settings['config']['cookie'],
  );
  $element['config']['auto'] = array(
    '#type' => 'fieldset',
    '#title' => t('Auto'),
  );
  $element['config']['auto']['play'] = array(
    '#type' => 'checkbox',
    '#title' => t('Play'),
    '#description' => t('Determines whether the carousel should scroll automatically or not.'),
    '#default_value' => $settings['config']['auto']['play'],
  );
  $element['config']['auto']['progress'] = array(
    '#type' => 'checkbox',
    '#title' => t('Progress'),
    '#description' => t('Show progress bar.'),
    '#default_value' => $settings['config']['auto']['progress'],
  );
  $element['config']['swipe'] = array(
    '#type' => 'checkbox',
    '#title' => t('Swipe'),
    '#description' => t('Determines whether the carousel should scroll via swiping gestures (on touch-devices only).'),
    '#default_value' => $settings['config']['swipe'],
  );
  $element['config']['scroll'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scroll'),
  );
  $element['config']['scroll']['fx'] = array(
    '#type' => 'select',
    '#title' => t('Fx'),
    '#description' => t('Indicates which effect to use for the transition.'),
    '#default_value' => $settings['config']['scroll']['fx'],
    '#options' => _caroufredsel_slider_formatter_options('fx'),
  );
  $element['config']['scroll']['easing'] = array(
    '#type' => 'select',
    '#title' => t('Easing'),
    '#description' => t('Indicates which easing function to use for the transition.'),
    '#default_value' => $settings['config']['scroll']['easing'],
    '#options' => _caroufredsel_slider_formatter_options('easing'),
    '#states' => array(
      'invisible' => array(
        ':input[name$="[config][scroll][fx]"]' => array('value' => 'none'),
      ),
    ),
  );
  $element['config']['scroll']['duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#description' => t('Determines the duration of the transition in milliseconds.'),
    '#default_value' => $settings['config']['scroll']['duration'],
    '#options' => _caroufredsel_slider_formatter_options('duration'),
    '#states' => array(
      'invisible' => array(
        ':input[name$="[config][scroll][fx]"]' => array('value' => 'none'),
      ),
    ),
  );
  $element['config']['scroll']['pauseOnHover'] = array(
    '#type' => 'checkbox',
    '#title' => t('Pause on hover'),
    '#description' => t('Determines whether the timeout between transitions should be paused.'),
    '#default_value' => $settings['config']['scroll']['pauseOnHover'],
  );
  $element['config']['items'] = array(
    '#type' => 'fieldset',
    '#title' => t('Items'),
  );
  $element['config']['items']['visible'] = array(
    '#type' => 'textfield',
    '#title' => t('Visible'),
    '#description' => t('The number of visible items.'),
    '#default_value' => $settings['config']['items']['visible'],
    '#size' => 10,
  );
  $element['config']['items']['minimum'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum'),
    '#description' => t('The minimum number of items needed to create a carousel.'),
    '#default_value' => $settings['config']['items']['minimum'],
    '#size' => 10,
  );
  $element['config']['pagination'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pagination'),
  );
  $element['config']['pagination']['__status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable pagination'),
    '#description' => t('Enable pagination elements for the slider.'),
    '#default_value' => $settings['config']['pagination']['__status'],
  );
  $element['config']['pagination']['keys'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use keys'),
    '#description' => t('Use keys for pagination.'),
    '#default_value' => $settings['config']['pagination']['keys'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][pagination][__status]"]' => array('checked' => TRUE),
      ),
    ),
  );
  /*
  $element['config']['pagination']['fx'] = array(
    '#type' => 'select',
    '#title' => t('Fx'),
    '#description' => t('Indicates which effect to use for the transition.'),
    '#default_value' => $settings['config']['pagination']['fx'],
    '#options' => _caroufredsel_slider_formatter_options('fx'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][pagination][__status]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $element['config']['pagination']['easing'] = array(
    '#type' => 'select',
    '#title' => t('Easing'),
    '#description' => t('Choose type of easing.'),
    '#default_value' => $settings['config']['pagination']['easing'],
    '#options' => _caroufredsel_slider_formatter_options('easing'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][pagination][__status]"]' => array('checked' => TRUE),
        ':input[name$="[config][pagination][fx]"]' => array('!value' => 'none'),
      ),
    ),
  );
  $element['config']['pagination']['duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#description' => t('Indicates duration.'),
    '#default_value' => $settings['config']['pagination']['duration'],
    '#options' => _caroufredsel_slider_formatter_options('duration'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][pagination][__status]"]' => array('checked' => TRUE),
        ':input[name$="[config][pagination][fx]"]' => array('!value' => 'none'),
      ),
    ),
  );
  $element['config']['pagination']['pauseOnHover'] = array(
    '#type' => 'checkbox',
    '#title' => t('Pause on hover'),
    '#description' => t('Determines whether the timeout between transitions should be paused.'),
    '#default_value' => $settings['config']['pagination']['pauseOnHover'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][pagination][__status]"]' => array('checked' => TRUE),
      ),
    ),
  );
  */
  $element['config']['prev'] = array(
    '#type' => 'fieldset',
    '#title' => t('Button "Previous"'),
  );
  $element['config']['prev']['__status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable prev button'),
    '#description' => t('Enable prev button for the slider.'),
    '#default_value' => $settings['config']['prev']['__status'],
  );
  $element['config']['prev']['easing'] = array(
    '#type' => 'select',
    '#title' => t('Easing'),
    '#description' => t('Choose type of easing.'),
    '#default_value' => $settings['config']['prev']['easing'],
    '#options' => _caroufredsel_slider_formatter_options('easing'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][prev][__status]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $element['config']['prev']['duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#description' => t('Indicates duration.'),
    '#default_value' => $settings['config']['prev']['duration'],
    '#options' => _caroufredsel_slider_formatter_options('duration'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][prev][__status]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $element['config']['next'] = array(
    '#type' => 'fieldset',
    '#title' => t('Button "Next"'),
  );
  $element['config']['next']['__status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable next button'),
    '#description' => t('Enable next button for the slider.'),
    '#default_value' => $settings['config']['next']['__status'],
  );
  $element['config']['next']['easing'] = array(
    '#type' => 'select',
    '#title' => t('Easing'),
    '#description' => t('Choose type of easing.'),
    '#default_value' => $settings['config']['next']['easing'],
    '#options' => _caroufredsel_slider_formatter_options('easing'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][next][__status]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $element['config']['next']['duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#description' => t('Indicates duration.'),
    '#default_value' => $settings['config']['next']['duration'],
    '#options' => _caroufredsel_slider_formatter_options('duration'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[config][next][__status]"]' => array('checked' => TRUE),
      ),
    ),
  );

  // JS specific settings, matching the options from
  // http://caroufredsel.dev7studios.com/configuration.php.
  $element['plugin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Plugin configuration'),
  );
  $element['plugin']['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug'),
    '#description' => t('Determines whether to log debugging information to the console.'),
    '#default_value' => $settings['plugin']['debug'],
  );
  $element['plugin']['transition'] = array(
    '#type' => 'checkbox',
    '#title' => t('Transition'),
    '#description' => t('Determines whether to use CSS3 transitions instead of javascript animations.'),
    '#default_value' => $settings['plugin']['transition'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function _caroufredsel_slider_formatter_options($optionset) {
  $options = array();
  
  switch ($optionset) {
    case 'duration':
      $options = array(
        100  => '100',
        300 => '300',
        500  => '500',
        800  => '800',
        1000  => '1000',
      );
      break;
    case 'easing':
      $options = array(
        'linear' => t('Linear'),
        'swing' => t('Swing'),
        'quadratic' => t('Quadratic'),
        'cubic' => t('Cubic'),
        'elastic' => t('Elastic'),
      );
      break;
    case 'fx':
      $options = array(
        'none' => t('None'),
        'scroll' => t('Scroll'),
        'directscroll' => t('Directscroll'),
        'fade' => t('Fade'),
        'crossfade' => t('Crossfade'),
        'cover' => t('Cover'),
        'cover-fade' => t('Cover-fade'),
        'uncover' => t('Uncover'),
        'uncover-fade' => t('Uncover-fade'),
      );
      break;
  }

  return $options;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function caroufredsel_slider_field_formatter_settings_summary($field, $instance, $view_mode) {
  $settings = $instance['display'][$view_mode]['settings'];
  $image_methods = caroufredsel_slider_image_method_options(TRUE);

  // Render summary for the formatter, including image style and basic settings.
  $summary = t('@image_method: @image_method_display, Circular: @circular, Infinite: @infinite, Responsive: @responsive, Direction: @direction', array(
    '@image_method' => $image_methods[$settings['formatter']['image_method']],
    '@image_method_display' => $settings['formatter'][$settings['formatter']['image_method']],
    '@circular' => $settings['config']['circular'],
    '@infinite' => $settings['config']['infinite'],
    '@responsive' => $settings['config']['responsive'],
    '@direction' => $settings['config']['direction'],
  ));

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function caroufredsel_slider_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $module_path = drupal_get_path('module', 'caroufredsel_slider');

  $settings['config'] = caroufredsel_slider_settings_convert_values($settings['config']);

  // Load carouFredSel js library.
  $library = libraries_load('caroufredsel');
  libraries_load_files($library);

  // Add the JavaScript file containing the Drupal.behavior.
  $element['#attached']['js'][] = $module_path . '/caroufredsel_slider.js';

  // Add the basic styles for the slider.
  $element['#attached']['css'][] = $module_path . '/caroufredsel_slider.css';

  if ($settings['config']['swipe']) {
    // Swipe is enabled by config, so include additional js.
    $element['#attached']['js'][] = $library['library path'] . '/helper-plugins/jquery.touchSwipe.min.js';
  }
  else {
    // Swipe is disabled, so remove value from config.
    unset($settings['config']['swipe']);
  }

  if ($settings['plugin']['transition']) {
    // CSS3 transitions are enabled by config, so include additional js.
    $element['#attached']['js'][] = $library['library path'] . '/helper-plugins/jquery.transit.min.js';
  }

  // Create unique identifier to apply js settings only for this element.
  $html_id = drupal_html_id('caroufredsel_slider');

  // Pagination
  $pagination = '';
  if ($settings['config']['pagination']['__status']) {
    $pagination = '<div class="pagination"></div>';
    $settings['config']['pagination']['container'] = '#' . $html_id . ' .pagination';
    unset($settings['config']['pagination']['__status']);
  }
  else {
    unset($settings['config']['pagination']);
  }

  // Prev / Next
  $prevnext = '';
  if ($settings['config']['prev']['__status']) {
    $prevnext .= '<div class="prev">' . t('Previous') . '</div>';
    $settings['config']['prev']['button'] = '#' . $html_id . ' .prev';
    unset($settings['config']['prev']['__status']);
  }
  else {
    unset($settings['config']['prev']);
  }

  if ($settings['config']['next']['__status']) {
    $prevnext .= '<div class="next">' . t('Next') . '</div>';
    $settings['config']['next']['button'] = '#' . $html_id . ' .next';
    unset($settings['config']['next']['__status']);
  }
  else {
    unset($settings['config']['next']);
  }

  // Progress bar
  $progress = '';
  if ($settings['config']['auto']['progress']) {
    $progress .= '<div class="progress"><div class="bar"></div></div>';
    $settings['config']['auto']['progress'] = '#' . $html_id . ' .progress .bar';
  }
  else {
    unset($settings['config']['auto']['progress']);
  }

  // Add the js configuration for the current slider.
  $element['#attached']['js'][] = array(
    'data' => array(
      'caroufredsel_slider' => array(
        $html_id => array(
          'config' => $settings['config'],
          'plugin' => $settings['plugin'],
        ),
      ),
    ),
    'type' => 'setting',
  );

  // Add picture library
  if ($settings['formatter']['image_method'] == 'picture') {
    $element['#attached']['library'] = array(
      array('picture', 'matchmedia'),
      array('picture', 'picturefill'),
      array('picture', 'picture.ajax'),
    );
  }

  // Collect output of each item, render image with given image style.
  $slider_elements = '';
  foreach ($items as $delta => $item) {
    if ($settings['formatter']['image_method'] == 'picture') {
      // Get the breakpoints based on the mapping
      $breakpoint_styles = array();
      $mappings = picture_mapping_load($settings['formatter']['picture']);
      if ($mappings) {
        foreach ($mappings->mapping as $breakpoint_name => $multipliers) {
          if (!empty($multipliers)) {
            foreach ($multipliers as $multiplier => $image_style) {
              if (!empty($image_style)) {
                if (!isset($breakpoint_styles[$breakpoint_name])) {
                  $breakpoint_styles[$breakpoint_name] = array();
                }
                $breakpoint_styles[$breakpoint_name][$multiplier] = $image_style;
              }
            }
          }
        }
      }

      $picture_options = array(
        'style_name' => $settings['formatter']['image_style'],
        'uri' => $item['uri'],
        'height' => $item['height'],
        'width' => $item['width'],
        'alt' => $item['alt'],
        'title' => $item['title'],
        'breakpoints' => $breakpoint_styles,
      );

      $image = theme('picture', $picture_options);
    }
    else {
      $image_style_options = array(
        'style_name' => $settings['formatter']['image_style'],
        'path' => $item['uri'],
        'height' => $item['height'],
        'width' => $item['width'],
        'alt' => $item['alt'],
        'title' => $item['title'],
      );

      $image = theme('image_style', $image_style_options);
    }

    $slider_elements .= theme('caroufredsel_slider_item', array(
      'image' => $image,
      'title' => $item['title'],
    ));
  }

  // Attributes for the themed element.
  $attributes = array(
    'id' => $html_id,
    'class' => 'caroufredsel_slider',
  );

  // Return a themed item list with the pepared images inside.
  $element[0]['#markup'] = theme('caroufredsel_slider', array(
    'items' => $slider_elements,
    'attributes_array' => $attributes,
    'progress' => $progress,
    'prevnext' => $prevnext,
    'pagination' => $pagination,
  ));

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function caroufredsel_slider_image_method_options($show_inactive = FALSE) {
  $options = array(
    'image_style' => t('Image style'),
  );

  if ($show_inactive || module_exists('picture')) {
    $options['picture'] = t('Picture');
  }

  return $options;
}

/**
 * Convert setting values to valid values for the js library.
 * Converts 1/0 to TRUE/FALSE.
 * Converts 'null' to NULL.
 */
function caroufredsel_slider_settings_convert_values($settings) {
  foreach ($settings as $key => $value) {
    if ($value === 1) {
      $settings[$key] = TRUE;
    }
    elseif ($value === 0) {
      $settings[$key] = FALSE;
    }
    elseif ($value === 'null') {
      $settings[$key] = NULL;
    }
    elseif (is_numeric($value)) {
      $settings[$key] = intval($value);
    }
    elseif (is_array($value)) {
      $settings[$key] = caroufredsel_slider_settings_convert_values($value);
    }
  }

  return $settings;
}

/**
 * Implements hook_libraries_info().
 */
function caroufredsel_slider_libraries_info() {
  $libraries['caroufredsel'] = array(
    'name' => 'carouFredSel jQuery plugin',
    'vendor url' => 'http://caroufredsel.dev7studios.com',
    'download url' => 'http://caroufredsel.dev7studios.com/download.php',
    'version arguments' => array(
      'file' => 'index.html',
      'pattern' => '/jquery.carouFredSel-([0-9\.]*)-packed.js/',
    ),
    'callbacks' => array(
      'post-detect' => array(
        'caroufredsel_slider_libraries_postload_callback',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function caroufredsel_slider_theme($existing, $type, $theme, $path) {
  return array(
    'caroufredsel_slider' => array(
      'template' => 'caroufredsel-slider',
      'variables' => array(
        'attributes' => NULL,
        'items' => NULL,
        'progress' => NULL,
        'prevnext' => NULL,
        'pagination' => NULL,
      ),
    ),
    'caroufredsel_slider_item' => array(
      'template' => 'caroufredsel-slider-item',
      'variables' => array(
        'image' => NULL,
        'title' => NULL,
      ),
    ),
  );
}

/**
 * Callback for libraries post-detect in caroufredsel_slider_libraries_info().
 * Sets the libraries filename based on version string from downloaded package.
 */
function caroufredsel_slider_libraries_postload_callback(&$library, $version, $variant) {
  $library['files']['js'][] = 'jquery.carouFredSel-' . $library['version'] . '-packed.js';
}
