<?php
/**
 * @file
 * Defines code for showing field collection editing pages in modals
 */

/**
 * Implements hook_menu().
 */
function field_collection_modals_menu() {
  $items = array();
  // Node -- this is flexible to incorporate all field collections as defined
  // through the Administrative UI.  This has been modeled on the field
  // collection hook menu.
  foreach (field_info_fields() as $field) {
    if ($field['type'] == 'field_collection') {
      // Make sure field collection module is loaded.
      module_load_include('module', 'field_collection');
      $path = field_collection_field_get_path($field);
      $pathitems = explode('/', $path);
      $count = count($pathitems);
      // Add path items.
      $apathitems = $pathitems;
      $apathitems[0] = 'fc';
      $apath = implode('/', $apathitems);
      // Edit / delete path items.
      $edpathitems = $pathitems;
      $edpathitems[0] = 'fc/%node';
      $edpath = implode('/', $edpathitems);

      // Add field collection.
      $items[$apath . '/add/%/%/%ctools_js/go'] = array(
        'page callback' => 'field_collection_modals_item_add',
        // Fieldname / node / nodeid / js.
        'page arguments' =>
        array($count - 1, $count + 1, $count + 2, $count + 3),
        // Access callback is determined by access assigned to the node
        // type to which the field collection is attached; therefore no
        // access callback check is needed; display of links to add, edit
        // or delete content are determined based on node callback rules.
        'access callback' => TRUE,
      );

      // Edit / delete field collection.
      $items[$edpath . '/%field_collection_item/%/%ctools_js/go'] = array(
        'page callback' => 'field_collection_modals_operator_callback',
        // %node / fieldname / %field_collection_item / action / js.
        'page arguments' =>
        array($count - 1, $count, $count + 1, $count + 2, $count + 3),
        // See note above.
        'access callback' => TRUE,
      );
    }
  }

  return $items;
}

/**
 * Add a new field collection item via ctools modal.
 *
 * @param string $field_name
 *   A string field collection name as defined on the entity.
 * @param string $entity_type
 *   A string type of entity (node, etc.).
 * @param integer $entity_id
 *   An integer.
 * @param boolean $js
 *   Boolean indicates ajax usage.
 * @param integer $revision_id
 *   (optional) An integer revision id TBA later.
 * @param mixed $langcode
 *   (optional) A mixed variable language code TBA later
 *
 * @return mixed
 *   (optional) ctools modal or the field collection item form.
 *
 * @todo: Support optionally passing in the revision_id and langcode parameters.
 */
function field_collection_modals_item_add($field_name, $entity_type, $entity_id, $js = FALSE, $revision_id = NULL, $langcode = NULL) {
  // Making sure certain functions for field_collection and field are available.
  module_load_include('pages.inc', 'field_collection');
  module_load_include('inc', 'field', 'field.info');

  // Check if js is enabled, this parameter will be loaded by ctools.
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add Data'),
    );

    // Loading arguments for ctools modal.
    $arg = field_collection_modals_field_collection_item_add(
          str_replace('-', '_', $field_name), $entity_type, $entity_id);

    if ($arg == MENU_NOT_FOUND || $arg == MENU_ACCESS_DENIED) {
      drupal_access_denied();
      drupal_exit();
    }
    $form_state['build_info']['args'][] = $arg;

    $output = ctools_modal_form_wrapper('field_collection_item_form',
                                        $form_state);

    // If the form is executed will need to dismiss the form and reload
    // the page.
    if ($form_state['executed']) {
      $commands = array();

      // Load the new output.
      $node = node_load($entity_id, NULL, FALSE);
      // Render the newly saved field collection set.
      $field_to_render = field_view_field('node',
                                          $node,
                                          str_replace('-', '_', $field_name),
                                          'full');

      // Remove the prefix and suffix, which contain unneeded div's and
      // actions links.
      unset($field_to_render['#prefix']);
      unset($field_to_render['#suffix']);

      $output = render($field_to_render);

      // Replacing the field collection with updated output.
      $commands[] = ajax_command_replace('#modal-content',
                                         theme('status_messages'));
      $commands[] = ajax_command_invoke('NULL', 'delay', array('10000'));
      // Close the modal.
      $commands[] = ctools_ajax_command_reload();

      $output = $commands;
    }
    // Render the output.
    // Note:  using ajax_render here, using drupal_json_render here caused
    // html 500 error
    print ajax_render($output);
    drupal_exit();
  }
  else {
    // No js found lets go to the default page.
    return drupal_get_form('field_collection_item_form',
                           field_collection_item_load($entity_id));
  }
}

/**
 * Add a new field-collection item.
 *
 * This is almost verbatim from field_collection::field_connection_item_add()
 * Modifications include changes for this module's parameters, and
 * returning a field collection item instead of a form
 * Perhaps field collection should be refactored to make code more usable?
 *
 * @param string $field_name
 *   A string field collection name as defined on the entity.
 * @param string $entity_type
 *   A string type of entity (node, etc.).
 * @param integer $entity_id
 *   An integer with the entity id.
 *
 * @return mixed
 *   A field_collection_item object or error message code
 */
function field_collection_modals_field_collection_item_add(
  $field_name, $entity_type, $entity_id /**, $revision_id = NULL,
  $langcode = NULL**/) {

  $info = entity_get_info();
  if (!isset($info[$entity_type])) {
    return MENU_NOT_FOUND;
  }
  $result = entity_load($entity_type, array($entity_id));

  $entity = reset($result);
  if (!$entity) {
    return MENU_NOT_FOUND;
  }
  // Ensure the given entity is of a bundle that has an instance of the field.
  list($id, $rev_id, $bundle) = entity_extract_ids($entity_type, $entity);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (!$instance) {
    return MENU_NOT_FOUND;
  }

  // Check field cardinality.
  $field = field_info_field($field_name);

  $langcode = LANGUAGE_NONE;
  if (!($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED ||
        !isset($entity->{$field_name}[$langcode]) ||
        count($entity->{$field_name}[$langcode]) < $field['cardinality'])) {
    drupal_set_message(t('Too many items.'), 'error');
    return '';
  }

  $field_collection_item = entity_create('field_collection_item',
                                         array('field_name' => $field_name));
  // Do not link the field-collection item with the host entity at this point,
  // as during the form-workflow we have multiple field-collection item entity
  // instances, which we don't want link all with the host.
  // That way the link is going to be created when the item is saved.
  $field_collection_item->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);

  $title = ($field['cardinality'] == 1) ? $instance['label'] :
    t('Add new !instance_label',
      array('!instance_label' => drupal_strtolower($instance['label'])));
  drupal_set_title($title);

  // Make sure the current user has access to create a field collection item.
  if (!field_collection_item_access('create', $field_collection_item)) {
    return MENU_ACCESS_DENIED;
  }
  return $field_collection_item;

}

/**
 * Edit / Delete modal callback.
 *
 * @param object $node
 *   An object Entity node to which field collection is attached.
 * @param string $fieldname
 *   A string field collection name as defined on the entity.
 * @param object $field_collection_item
 *   An object FieldCollectionItemEntity.
 * @param string $action
 *   A string "edit" or "delete".
 * @param boolean $js
 *   Indicates ajax usage.
 * @param integer $revision_id
 *   Revision id TBA later.
 * @param mixed $langcode
 *   Language code TBA later.
 *
 * @return mixed
 *   (optional) ctools modal or the field collection item form.
 *
 * @todo:  Support optionally passing revision ID and and langcode parameters
 */
function field_collection_modals_operator_callback($node, $fieldname,
                                                   $field_collection_item,
                                                   $action, $js = FALSE,
                                                   $revision_id = NULL,
                                                   $langcode = NULL) {
  // Make sure field_collection module is loaded.
  module_load_include('pages.inc', 'field_collection');

  // Access checks to make sure the user has access to the field collections.
  $field = field_collection_item_load($field_collection_item->item_id);
  // Entities use "update", not "edit".
  if ($action == "edit") {
    $action = "update";
  }
  if (!field_collection_item_access($action, $field)) {
    // If no access, display drupal access denied.
    drupal_access_denied();
    drupal_exit();
  }

  if ($js) {
    // Include ctools ajax and modal, dont forget to set ajax TRUE.
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => ($action == 'edit' ? t('Modify Data') : t('Delete Data')),
    );

    $form_state['build_info']['args'][] = $field;

    if ($action == 'update') {
      $output = ctools_modal_form_wrapper('field_collection_item_form',
                                          $form_state);
    }
    elseif ($action == 'delete') {
      $output = ctools_modal_form_wrapper('field_collection_item_delete_confirm',
                                          $form_state);
    }
    else {
      // The only actions allowed are edit and delete.
      // Invalid url used to access, display drupal access denied.
      drupal_access_denied();
      drupal_exit();
    }

    if ($form_state['executed']) {
      $commands = array();

      // Load the new output.
      $node = node_load($node->nid, NULL, FALSE);
      $field_to_render = field_view_field('node',
                                          $node,
                                          str_replace('-', '_', $fieldname),
                                          'full');

      unset($field_to_render['#prefix']);
      unset($field_to_render['#suffix']);

      $output = render($field_to_render);

      // Insert updated field in underlying page.
      $commands[] = ajax_command_html('.field-name-' . $fieldname, $output);


      // Replace modal content with status messages.
      if ($action == "delete") {
        $commands[] = ajax_command_replace('#modal-content',
                                           theme('status_messages'));
        $commands[] = ctools_ajax_command_reload();
      }
      else {
        $commands[] = ajax_command_replace('#modal-content',
                                           theme('status_messages'));
      }
      $output = $commands;
    }

    // Note:  using drupal_json_output here, but using this in the "add"
    // function caused html 500 error
    drupal_json_output($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('field_collection_item_form',
                           field_collection_item_load($field_collection_item->item_id));
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function field_collection_modals_field_attach_view_alter(&$output, $context) {
  global $user;

  if ($context['entity_type'] != 'node') {
    return;
  }

  $field_collection_present = FALSE;
  $field_name = array();
  foreach ($output as $key => $value) {
    if ($key != '#pre_render' && is_array($value)) {
      if ($value['#field_type'] == 'field_collection') {
        $field_collection_present = TRUE;
        $field_name[] = $value['#field_name'];
      }
    }
  }
  if (!$field_collection_present) {
    return;
  }

  $account = user_load($user->uid);
  foreach ($field_name as $field) {
    $fname = str_replace('-', '_', $field);
    $fieldinfo = field_info_field($fname);

    $edit_access = FALSE;
    if (($user->uid == $output[$field]['#object']->uid) &&
      user_access('edit own ' . $context['entity']->type . ' content', $account)) {
      $edit_access = TRUE;
    }

    if (($user->uid != $output[$field]['#object']->uid) &&
      user_access('edit any ' . $context['entity']->type . ' content', $account)) {
      $edit_access = TRUE;
    }
    // If any of the access flags are false, exit.
    if (!$edit_access) {
      continue;
    }

    if ($output[$field]) {
      ctools_include('modal');
      ctools_modal_add_js();
      // If number of fields is unlimited, or there are is no field collection
      // data in the node, or the number of field collections is less than the
      // allowed number, include an "add" link on the page.
      if ($fieldinfo['cardinality'] == FIELD_CARDINALITY_UNLIMITED ||
          !isset($context['entity']->{$fname}[$context['entity']->language]) ||
            count($context['entity']->{$fname}[$context['entity']->language]) < $fieldinfo['cardinality']) {
        $output[$field]['#suffix']
          = '<div class="description field-collection-description"></div>
              <ul class="action-links action-links-field-collection-add">
                <li>'
                  . l(t('Add'), 'fc/' . str_replace('_', '-', $field) . '/add/' .
                      $context['entity_type'] . '/' . $context['entity']->nid .
                      '/nojs/go',
                      array('attributes' => array('class' => 'ctools-use-modal'))) .
                '</li>
              </ul>
            </div>';
      }
      // Edit & delete.
      foreach ($output[$field] as $key => $value) {
        if (is_numeric($key)) {
          // If Edit access, insert "edit" & "delete" links.
          if ($edit_access) {
            if (count($output[$field]['#items'][$key]) == 1) {

              $output[$field][$key]['links']['#links']['edit']['href'] = 'fc/' .
              $context['entity']->nid . '/' . str_replace('_', '-', $field) . '/'
              . $output[$field]['#items'][$key]['value'] . '/edit/nojs/go';
            }
            $output[$field][$key]['links']['#links']['edit']['title'] = t('Edit');
            $output[$field][$key]['links']['#links']['edit']['attributes']
              = array('class' => 'ctools-use-modal');

            if (count($output[$field]['#items'][$key]) == 1) {
              $output[$field][$key]['links']['#links']['delete']['href'] = 'fc/' .
              $context['entity']->nid . '/' . str_replace('_', '-', $field) . '/'
              . $output[$field]['#items'][$key]['value'] . '/delete/nojs/go';
            }
            $output[$field][$key]['links']['#links']['delete']['title'] = t('Delete');
            $output[$field][$key]['links']['#links']['delete']['attributes']
              = array('class' => 'ctools-use-modal');
          }
        }
      }
    }
  }
  // Just exit if no fields match criteria.
}
