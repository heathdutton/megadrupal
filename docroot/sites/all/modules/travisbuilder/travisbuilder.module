<?php
/**
 * @file travisbuilder.module
 * Trigger CI builds within Drupal.
 */

use Travis\Client;

define('TRAVISBUILDER_URL', 'https://travis-ci.org');
define('TRAVISBUILDER_URL_PRIVATE', 'https://magnum.travis-ci.com');

/**
 * Implements hook_menu().
 */
function travisbuilder_menu() {
  $path = 'admin/config/system/travisbuilder';

  $items[$path] = array(
    'title' => 'Travis Builder',
    'description' => 'Configure Travis settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('travisbuilder_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'travisbuilder.admin.inc',
  );
  $items[$path . '/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items[$path . '/build'] = array(
    'title' => 'Trigger Build',
    'description' => 'Trigger a Travis build via a URL.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('travisbuilder_build_confirm_form'),
    'access arguments' => array('trigger travis builds'),
    'file' => 'travisbuilder.admin.inc',
  );

  $items[$path . '/history'] = array(
    'title' => 'History',
    'description' => 'Recent Travis builds.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('travisbuilder_build_list_page'),
    'weight' => 10,
    'access arguments' => array('administer site configuration'),
    'file' => 'travisbuilder.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_admin_paths().
 */
function travisbuilder_admin_paths() {
  $paths = array(
    'admin/system/travis-builder' => TRUE,
  );
  return $paths;
}


/**
 * Impements hook_permission().
 */
function travisbuilder_permission() {
  return array(
    'trigger travis builds' => array(
      'title' => t('Restart Travis builds'),
      'description' => t('Manually trigger a Travis build restart.'),
    ),
  );
}


/**
 * Mix param(s) and global settings.
 *
 * @return array
 */
function _travisbuilder_configs() {
  // @todo With multiple repos, will need update.
  $configs = array();
  $defaults = array(
    'private' => 0,
    'repo' => '',
    'branch' => 'master',
    'access_token' => '',
    'schedule' => 10800,
    'last' => 0,
  );
  foreach ($defaults as $key => $default) {
    $configs[$key] = variable_get('travisbuilder_' . $key, $default);
  }

  return $configs;
}


/**
 * Wrapper to return a Travis client.
 *
 * @param string $repository
 *   Name of repository.
 *
 * @return \Travis\Client|null
 *   If the module is successfully configured, a fully configured Elomentary
 *   client will be returned. Otherwise, NULL will be returned.
 */
function travisbuilder_client() {
  $client = &drupal_static(__FUNCTION__, NULL);

  // Only instantiate a new client if one hasn't already been.
  if (!$client) {
    // @todo With multiple repos, will need update.
    $configs = _travisbuilder_configs();
    $token = ($configs['access_token']) ? $configs['access_token'] : FALSE;

    // Instantiate Travis client via library.
    try {
      $client = new Client(NULL, 'Buzz\Client\Curl', $token);
    }
    catch (FieldException $e) {
      throw new DrupalException("Error using Travis client with message: " . $e->getMessage());
    }

    if ($configs['private']) {
      $client->setApiUrlPrivate();
    }
    // Allow other modules to alter the client before it is used / returned.
    drupal_alter('travisbuilder_client', $client);
  }

  return $client;
}


/**
 * Trigger a Travis build to occur on the globally configured repo.
 *
 * @todo Enable reaching farther back (pagination) to always find a build for a branch.
 * Requires use of after_number API element.
 *
 * Resources:
 *   http://docs.travis-ci.com/api/#jobs
 *
 * @param string $branch
 *   Name of branch to act on.
 *
 * @return array
 *   Result of build attempt, includes: status (boolean) message (string) vars (array).
 */
function _travisbuilder_trigger_build($branch = FALSE, $ignore_lifetime = FALSE) {
  $configs = _travisbuilder_configs();
  $branch = $branch ?: $configs['branch'];
  $time_since_last = REQUEST_TIME - $configs['last'];

  // Reporting defaults.
  $watchdog_link = l(t('Travis builder settings'), 'admin/config/system/travisbuilder');
  $url = ($configs['private']) ? TRAVISBUILDER_URL_PRIVATE : TRAVISBUILDER_URL;
  $result = array(
    'status' => FALSE,
    'message' => 'No message set',
    'vars' => array(),
  );

  // Honor minimum lifetime.
  if ($ignore_lifetime || ($time_since_last > $configs['schedule'])) {
    // Get the right build.
    $client = travisbuilder_client($configs['repo']);
    $repo_client = $client->fetchRepository($configs['repo']);
    // Find the right build.
    // @todo Search deeper to ensure a build is found.
    $builds = $repo_client->getBuilds()->findBy(array('branch' => $branch));
    $build = $builds->first();

    if ($build) {
      // Attempt to trigger.
      // @todo This syntax may change depending pull request.
      // https://github.com/l3l0/php-travis-client/pull/8
      $response = $client->restartBuild($build, $configs['access_token']);

      // Interpret the response.
      reset($response['flash'][0]);
      $result['status'] = (key($response['flash'][0]) === 'error') ? FALSE : TRUE;
      $result['message'] = '@message (Branch: @branch. Build ID: @build)';
      $result['vars'] = array(
        '@message' => current($response['flash'][0]),
        '@branch' => $branch,
        '@build' => $build->getId(),
      );
      $build_url = format_string($url . '/!repo/builds/!id', array(
        '!repo' => $configs['repo'],
        '!id' => $build->getId(),
      ));
      $watchdog_link = l(t('Visit Travis build #') . $build->getNumber(), $build_url);

      // Timer for next time.
      variable_set('travisbuilder_last', REQUEST_TIME);
    }
    else {
      $result['message'] = 'No build can be found for the current configurations. (Branch: @branch)';
      $result['vars'] = array('@branch' => $branch);
    }
  }
  else {
    $result['message'] = 'Build restart failed due to minimum time limit. (Branch: @branch)';
    $result['vars'] = array('@branch' => $branch);
  }

  $severity = ($result['status']) ? WATCHDOG_NOTICE : WATCHDOG_ERROR;
  watchdog('travisbuilder', $result['message'], $result['vars'], $severity, $watchdog_link);

  return $result;
}
