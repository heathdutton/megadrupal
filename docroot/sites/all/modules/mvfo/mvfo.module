<?php
/**
 * @file
 * Main module file, adds setting form to fields with multiple values.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mvfo_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['cardinality'] > 1 || $form['#field']['cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $form['instance']['settings']['mvfo'] = array(
      '#type' => 'fieldset',
      '#title' => t('Multi value overrides'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    $form['instance']['settings']['mvfo']['nodrag'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable Draggable'),
      '#default_value' => isset($form['#instance']['settings']['mvfo']['nodrag']) ? $form['#instance']['settings']['mvfo']['nodrag'] : 0,
    );

    $form['instance']['settings']['mvfo']['noheader'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable Header'),
      '#default_value' => isset($form['#instance']['settings']['mvfo']['noheader']) ? $form['#instance']['settings']['mvfo']['noheader'] : 0,
    );

    $form['instance']['settings']['mvfo']['noaddmore'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable Add More button'),
      '#default_value' => isset($form['#instance']['settings']['mvfo']['noaddmore']) ? $form['#instance']['settings']['mvfo']['noaddmore'] : 0,
    );

    $form['instance']['settings']['mvfo']['allow_empty'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide empty items when editing'),
      '#default_value' => isset($form['#instance']['settings']['mvfo']['allow_empty']) ? $form['#instance']['settings']['mvfo']['allow_empty'] : 0,
      '#states' => array(
        'visible' => array(
          ':input[name="instance[settings][mvfo][noaddmore]"]' => array('checked' => TRUE),
        ),
      ),
    );

    // Integrate with "Multiple Fields Remove Button" module.
    if (module_exists('multiple_fields_remove_button')) {
      $form['instance']['settings']['mvfo']['hide_remove'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hide Remove button'),
        '#default_value' => isset($form['#instance']['settings']['mvfo']['hide_remove']) ? $form['#instance']['settings']['mvfo']['hide_remove'] : 0,
      );
    }
    else {
      $form['instance']['settings']['mvfo']['hide_remove'] = array(
        '#type' => 'value',
        '#value' => 0,
      );
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function mvfo_theme_registry_alter(&$theme_registry) {
  // Change the function that handles multi value fields to ours.
  if (isset($theme_registry['field_multiple_value_form'])) {
    $theme_registry['field_multiple_value_form']['type'] = 'module';
    $theme_registry['field_multiple_value_form']['theme path'] = drupal_get_path('module', 'mvfo');
    $theme_registry['field_multiple_value_form']['function'] = 'mvfo_theme_field_multiple_value_form';
  }
}

/**
 * Theme function override to include custom settings.
 *
 * @see theme_field_multiple_value_form()
 */
function mvfo_theme_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';

  if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    // Load the field instance settings.
    $settings = field_info_instance($element[0]['#entity_type'], $element[0]['#field_name'], $element[0]['#bundle']);
    $settings = $settings['settings'];

    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    // Default MVFO values -- all disabled. Anti-"Undefined index"
    $defaults = array(
      'nodrag'      => 0,
      'noheader'    => 0,
      'noaddmore'   => 0,
      'allow_empty' => 0,
      'hide_remove' => 0,
    );
    $settings['mvfo'] = array_merge($defaults, $settings['mvfo']);

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'class' => array('field-label'),
      ),
    );
    // Add drag columns when the user has not selected the override.
    if ($settings['mvfo']['nodrag'] != 1) {
      $header[0]['colspan'] = 2;
      $header[] = t('Order');
    }
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation).
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    foreach ($items as $key => $item) {
      // Hide empty items if add more is not allowed.
      if ($settings['mvfo']['noaddmore'] == 1 && $settings['mvfo']['allow_empty'] == 1 && $key == $element['#max_delta'] && empty($item['#default_value'])) {
        continue;
      }

      // Apply rule for integration with Multiple Fields Remove button.
      if ($settings['mvfo']['hide_remove'] == 1 && isset($item['remove_button'])) {
        $item['remove_button']['#access'] = FALSE;
      }

      // Depending on whether draggable behavior is desired, rows should have
      // different cells.
      if ($settings['mvfo']['nodrag'] == 1) {
        // Get rid of weight column, only render content.
        unset($item['_weight']);
        // Only cell here is the actual item.
        $cells = array(
          drupal_render($item),
        );
        $rows[] = array(
          'data' => $cells,
        );
      }
      else {
        // Normal behavior; draggable handle and weight columns added.
        $item['_weight']['#attributes']['class'] = array($order_class);
        $delta_element = drupal_render($item['_weight']);
        $cells = array(
          array(
            'data' => '',
            'class' => array('field-multiple-drag'),
          ),
          drupal_render($item),
          array(
            'data' => $delta_element,
            'class' => array('delta-order'),
          ),
        );

        $rows[] = array(
          'data' => $cells,
          'class' => array('draggable'),
        );
      }
    }
    // Get rid of the header if so desired.
    if ($settings['mvfo']['noheader'] == 1) {
      $header = NULL;
    }

    $output = '<div class="form-item">';
    $output .= theme('table', array(
      'header'     => $header,
      'rows'       => $rows,
      'attributes' => array(
        'id' => $table_id,
        'class' => array('field-multiple-table'),
      ),
    ));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    // Do not render the add more button if not desired.
    if ($settings['mvfo']['noaddmore'] != 1) {
      $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    }
    $output .= '</div>';
    // Do not even initialize tabledrag if not required.
    if ($settings['mvfo']['nodrag'] != 1) {
      drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
    }
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }

  return $output;
}
