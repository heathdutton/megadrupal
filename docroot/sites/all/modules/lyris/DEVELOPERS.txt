Lyris MLM Integration Module - Developers Notes
================================================================================
Version 2.x-dev
Author, Chris Albrecht (chris@162unlimited.com)

+ Lyris/Drupal Object Structure
********************************************************************************
Lyris API servers data back and forth via a SOAP engine in multidimentional
arrays called Structs.  For example, Lists are ListStructs and Content are
ContentStructs.  When updating or selecting data to or from Lyris, this is the
data you send and receive.

Drupal handles some structs as entities and some just as manually managed data.
Lists are not entities but Content are.  This relationship is very similar to
Drupal nodes.  Lyris Content is the entity type (node), Lists are the bundles
(node type) and each piece of Lyris Content is an object of a List.

Inside the module are a number of OOP Classes to handle Lyris connectiivity,
API calls and to manage the object data between Lyris and Drupal.  The basic
properties of these objects should match what is in the Drupal database in
addition to other properties.  Each object will also have an array property
called 'struct' to facilitate transmitting data to Lyris.

Here's an example of the data flow:
1. The New List form is submitted to create a new list.
2. The submit handler populates the $list object will all the default data
   from the provided struct file and the overrides we stored into the database.
3. The $list object then overrides the default data with the data submitted from
   the form, resulting in an object with all the Lyris ListStruct settings
   needed to create a list.  This is now ready to be saved into the Drupal DB,
   but not sent to Lyris.
4. The $list->struct array is populated with the values from our $list object
   properties.  It is now ready to be transmitted to Lyris.

The $obj->struct array should only contain data representing what will be sent
to Lyris, and thus should always match a Lyris Struct structure.

[Code Example]
// Primary properties match Drupal DB fields.
$list->lyris__DefaultFrom = 'john.doe@example.com';
$lc->lyris__DocParts__Body = "My mailing list content.";

// Struct properties match Lyris Struct fields.
$list->struct['DefaultFrom'] = 'john.doe@example.com';
$lc->struct['DocParts']['Body'] = "My mailing list content.";

+ Struct Data Mapping
********************************************************************************
Lyris objects such as lists and content are transported via the API in forms
referred to as Structs.  These structs are also stored locally in case Lyris is
unavailable and to save processing when local objects need to be populated with
the proper data.

The struct data is stored in files named module.structs.inc.  They contain all
the necessary fields and metadata to populate the local database, the struct
array to be transported to Lyris, the default values form and the data entry
form.

1. The structure first defines the standard FAPI element for collecting data.
2. Overrides can be made for different forms using the parameter: form_TYPE
3. #REQUIRED fields will require a default value in the Defaults form
   that may then be overriden in the data collection form using the field
   permissions settings.
4. #API defines the Lyris API version that this struct field appears in.
5. #SCHEMA represents a database schema.  If supplied, a field will be added to
   a database table that references this struct.  Certain values already present
   in the field definition will be used to assist in the creation of the DB field.
6. #FORM_DEFAULTS is a sublevel array that will override standard field settings
   when the Defaults form is rendered.
   - #DEFAULTABLE is a boolean indicator as to whether a field should or should
     not accept a default value. (Ex. "Date Created" or "ContentID" should not
     have preset defaults.) Defaults to TRUE.
   - #HIDDEN is a boolean indicator as to whether a given struct field should
     appear on the defaults form at all. Defaults to FALSE.
7. #LOCAL_VAL is a boolean indicator to prevent a value from being added to the
   standard local values for a struct. Defaults to TRUE.
8. #STRUCT_VAL is a boolean indicator to prevent a value from being added to the
   struct array used to communicate with Lyris.
9. #STRUCT indicates that this struct field is actually a reference to another
   standard struct. (Ex. We need to know that ContentStruct has a DocParts field
   consisting of an array of DocPart structs.  However, the Drupal Body field
   will supply the data for that, so we don't need a separate collection field.
   We will, though, need default values for the metadata such as Encoding.)
-  #PERMANENT fields are always incorporated in the forms, regardless of
   struct field permission.
-  #HIDDEN fields are always incorporated in the forms but are not visible,
   regardless of struct field permission.

$struct['StructName'] = array(
  'StructNameField' => array(
    '#type'          => 'field_type',
    '#title'         => t('Field Title'),
    '#description'   => t('Field Description'),
    '#maxlength'     => 64,
    '#required'      => TRUE,
    '#default_value' => 'default',
    '#group'         => 'grouping',
    '#weight'        => 0,
    '#api'           => array(10, 11),
    '#permanent'     => FALSE,
    '#hidden'        => FALSE,
    '#struct'        => array(
      '#name'          => 'EmbeddedStructName',
      '#multiple'      => TRUE,
    ),
    '#schema'        => array(
      'type'           => 'varchar',
      'length'         => 64,
    ),
    '#overrides      => array(
      'form_defaults'  => array(
        '#title'         => t('Different Field Title'),
        '#description'   => t('Different from data collection form.'),
        '#defaultable'   => TRUE,
        '#hidden'        => FALSE,
      ),
    ),
    '#local_val      => TRUE,
    '#struct_val     => TRUE,
  ),
);

Lyris Struct Naming and MySQL Collisions
--------------------------------------------------------------------------------
MySQL has a number of keywords or reserverd words that cannot be used as column
names.  Some of them are lyris
