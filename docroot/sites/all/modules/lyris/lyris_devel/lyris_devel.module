<?php
/**
 * @file
 * Adds development control for the Lyris module.
 */

define('LYRIS_DEVEL_ERROR_HANDLER_NORMAL',    0);
define('LYRIS_DEVEL_ERROR_HANDLER_BACKTRACE', 1);

/**
 * Implements hook_exit().
 */
function lyris_devel_exit() {
  // Render the API Log
  $apilog = lyris_devel_get_logs('api call');

  // Clean up the API Log output
  $apilog_clean = array();
  foreach ($apilog as $i => $call) {
    $key = ++$i . ': ' . $call[0];
    $apilog_clean[$key] = $call[1];
  }
  lyris_devel_print_log($apilog_clean, 'api call');

  // Get the remaining logs
  $logs = lyris_devel_get_logs();
  foreach ($logs as $key => $log) {
    lyris_devel_print_log($log, $key);
  }
}

/**
 * Implements hook_menu().
 */
function lyris_devel_menu() {
  $items['admin/config/development/lyris'] = array(
    'title' => 'Lyris Settings',
    'description' => 'Manage Lyris development and logging settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lyris_devel_settings'),
    'access arguments' => array('administer lyris'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function lyris_devel_permission() {
  return array(
    'view lyris devel info' => array(
      'title' => t('View Lyris Devel Information'),
    ),
  );
}

/**
 * Settings form.
 */
function lyris_devel_settings($form, &$form_state) {
  $form['lyris_devel_error_handler'] = array(
    '#type' => 'radios',
    '#title' => t('Error handler'),
    '#options' => array(
      LYRIS_DEVEL_ERROR_HANDLER_NORMAL => t('Normal'),
      LYRIS_DEVEL_ERROR_HANDLER_BACKTRACE => t('Backtrace'),
    ),
    '#default_value' => variable_get('lyris_devel_error_handler', LYRIS_DEVEL_ERROR_HANDLER_NORMAL),
  );

  $form['lyris_devel_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Debugging Statements'),
    '#description' => t('Print the Lyris Debugging string after applicable errors.'),
    '#default_value' => variable_get('lyris_devel_debug'),
  );
  $form['lyris_devel_log_api'] = array(
    '#type' => 'checkbox',
    '#title' => t('Print API Requests'),
    '#description' => t('Print a list of all API calls per request and the user invoking the call.'),
    '#default_value' => variable_get('lyris_devel_log_api'),
  );
  $form['lyris_devel_show_queries'] = array(
    '#type' => 'checkbox',
    '#title' => t('Print SQL Queries'),
    '#description' => t('Print Lyris SQL queries through Drupal messages.'),
    '#default_value' => variable_get('lyris_devel_show_queries'),
  );
  $form['lyris_devel_show_line'] = array(
    '#type' => 'checkbox',
    '#title' => t('Print Line and File'),
    '#description' => t('Append the line number and file throwing the error to the message.'),
    '#default_value' => variable_get('lyris_devel_show_line'),
  );
  $form['lyris_devel_show_server'] = array(
    '#type' => 'checkbox',
    '#title' => t('Print Server'),
    '#description' => t('Append the Lyris server name to the message.'),
    '#default_value' => variable_get('lyris_devel_show_server'),
  );

  // Borrowed directly from Devel to save clicking between admin forms.
  $form['devel_redirect_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display redirection page'),
    '#default_value' => variable_get('devel_redirect_page', 0),
    '#description' => t('When a module executes drupal_goto(), the query log and other developer information is lost. Enabling this setting presents an intermediate page to developers so that the log can be examined before continuing to the destination page.'),
  );

  $form['lyris_devel_show_form_weights'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Form Field Weights'),
    '#description' => t('Show the weight assigned to each form field on the struct settings.'),
    '#default_value' => variable_get('lyris_devel_show_form_weights', 0),
  );

  return system_settings_form($form);
}


/**
 * Log data to be shown at the end of the page request.
 *
 * @param $msg
 *   The message to log.
 * @param $key
 *   The array key to log the message under.
 */
function lyris_devel_log($msg, $key) {
  $_SESSION['lyris_devel_log'][$key][] = $msg;
}

/**
 * Return any stored logs.
 */
function lyris_devel_get_logs($key = NULL) {
  $logs = array();

  if ($key && isset($_SESSION['lyris_devel_log'][$key])) {
    $logs = $_SESSION['lyris_devel_log'][$key];
    unset($_SESSION['lyris_devel_log'][$key]);
  }
  elseif (isset($_SESSION['lyris_devel_log'])) {
    $logs = $_SESSION['lyris_devel_log'];
    unset($_SESSION['lyris_devel_log']);
  }

  return $logs;
}

/**
 * Print a log.
 */
function lyris_devel_print_log($log, $name) {
  if (!empty($log)) {
    kpr("Lyris Log '$name':");
    kpr($log, FALSE);
  }
}
