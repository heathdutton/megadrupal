<?php
/**
 * @file
 * A Lyris Member is an association between an email address and a list.  It
 * contains metadata about the permissions of that email on that list and the
 * subscription status to that list.
 */

// Database table
define('LYRIS_MEMBER_TABLE', 'lyris_member');

// Unsubscribe statuses
define('LYRIS_MEMBER_UNSUB_ERROR',    0);
define('LYRIS_MEMBER_UNSUB_NOLIST',   1);
define('LYRIS_MEMBER_UNSUB_NOMEMBER', 2);
define('LYRIS_MEMBER_UNSUB_SUCCESS',  3);

// Default messages
define('LYRIS_MEMBER_UNSUB_ERROR_MSG',    "There was an error unsubscribing [lyris_member:email-masked] from the mailing list [lyris_list:name].\n\nPlease contact an administrator at [site:mail] for assistance.");
define('LYRIS_MEMBER_UNSUB_NOLIST_MSG',   "We were unable to process your request.\n\nPlease contact an administrator at [site:mail].");
define('LYRIS_MEMBER_UNSUB_NOMEMBER_MSG', "We were unable to locate your subscription to [lyris_list:name].\n\nPlease contact an administrator at [site:mail] if you feel this is incorrect.");
define('LYRIS_MEMBER_UNSUB_SUCCESS_MSG',  "Sorry to see you go, [lyris_member:firstname].\n\n[lyris_member:email-masked] has been removed from the mailing list [lyris_list:name].");

/**
 * Implements hook_block_info().
 */
function lyris_member_block_info() {
  return array(
    'lyris_member_list_opt_form' => array(
      'info' => t('Lyris Member List Opt Form'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function lyris_member_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'lyris_member_list_opt_form':
      lyris_include('forms', 'lyris_member');
      $open_lists = lyris_member_get_open_lists();

      // Load the lists
      foreach ($open_lists as $open_list) {
        $lists[$open_list[llf('ListName')]] = lyris_list_load($open_list[llf('ListName')]);
      }

      $block['subject'] = t('My Subscriptions');
      $block['content'] = (!empty($lists) && !user_is_anonymous() ? drupal_get_form('lyris_member_block_list_opt_form', $lists) : '');
      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function lyris_member_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'lyris_member_list_opt_form':
      $form['lyris_data']['#tree'] = TRUE;
      $form['lyris_data']['lyris_member_list_opt_form_show_descriptions'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display List Descriptions'),
        '#default_value' => variable_get('lyris_member_list_opt_form_show_descriptions', 0),
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function lyris_member_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'lyris_member_list_opt_form':
      foreach ($edit['lyris_data'] as $field => $value) {
        variable_set($field, $value);
      }
      break;
  }
}

/**
 * Implements hook_entity_info().
 */
function lyris_member_entity_info() {
  $entities['lyris_member'] = array(
    'label' => t('Lyris List Member'),
    'base table' => 'lyris_member',
    'uri callback' => 'lyris_member_uri',
    'fieldable' => FALSE,
    'label callback' => 'lyris_member_label',
    'module' => 'lyris_member',
    'entity class' => 'LyrisMember',
    'controller class' => 'LyrisEntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'entity keys' => array(
      'id' => 'eid',
      'lyris_id' => 'MemberID',
    ),
    'bundles' => array(
      'lyris_member' => array(
        'label' => t('Lyris List Member'),
        'admin' => array(
          'path' => 'admin/config/people/lyris',
          'access arguments' => array('administer users'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Subscription'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $entities;
}

/**
 * Implements hook_field_extra_fields().
 */
function lyris_member_field_extra_fields() {
  $extra = array();

  $extra['user']['user'] = array(
    'form' => array(
      'lyris_member_lists' => array(
        'label' => t('Subscribe to Mailing Lists'),
        'description' => t('Lyris mailing list opt-in form.'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function lyris_member_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    // USER ADMINISTRATION SETTINGS
    case 'user_admin_settings':
      $lists = lyris_member_get_open_lists();
      foreach ($lists as $ListName => $list) {
        $list = lyris_list_load($list[llf('ListName')]);
        $ops[$ListName] = $list->getDisplayName();
      }

      $form['lyris_member'] = array(
        '#type' => 'fieldset',
        '#title' => t('Lyris'),
        'lyris_member_reg_subscribe' => array(
          '#type' => 'checkbox',
          '#title' => t('Show mailing list subscription form during registration.'),
          '#default_value' => variable_get('lyris_member_reg_subscribe', 1),
        ),
        'lyris_member_reg_subscribe_title' => array(
          '#type' => 'textfield',
          '#title' => t('Field Title'),
          '#default_value' => variable_get('lyris_member_reg_subscribe_title', t('Subscribe')),
        ),
        'lyris_member_reg_subscribe_defaults' => array(
          '#type' => 'checkboxes',
          '#title' => t('Default Settings'),
          '#description' => t('Choose the default state for each subscribable list.'),
          '#options' => $ops,
          '#default_value' => variable_get('lyris_member_reg_subscribe_defaults', array()),
        ),
      );

      // Reweight fields
      $weight = 0;
      foreach (element_children($form) as $child) {
        if (!isset($form[$child]['#weight'])) {
          $weight += 5;
          $form[$child]['#weight'] = $weight;
        }
      }
      $form['lyris_member']['#weight'] = $form['email_title']['#weight'] - 1;
      break;

    // NEW USER REGISTRATION
    case 'user_register_form':
      if (variable_get('lyris_member_reg_subscribe', 1)) {
        $form['#submit'][] = 'lyris_member_user_registration_submit';
        $lists = lyris_member_get_open_lists();
        foreach ($lists as $ListName => $list) {
          $list = lyris_list_load($list[llf('ListName')]);
          $ops[$ListName] = $list->getDisplayName();
        }

        $form['lyris_member_lists'] = array(
          '#type' => 'checkboxes',
          '#title' =>  variable_get('lyris_member_reg_subscribe_title', t('Subscribe')),
          '#options' => $ops,
          '#default_value' => variable_get('lyris_member_reg_subscribe_defaults', array()),
        );
      }
      break;
  }
}

/**
 * Implements hook_menu().
 */
function lyris_member_menu() {
  $items['admin/config/services/lyris/unsub'] = array(
    'title' => 'Unsubscribe Messages',
    'description' => 'Define messages to display to members when they land on the site from an unsubscribe link.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lyris_member_unsubscribe_messages_form'),
    'access arguments' => array('administer lyris subscriptions'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'includes/lyris_member.admin.inc',
  );

  // Subscription form for user accounts.
  $items['user/%user/mailing-lists'] = array(
    'title' => 'Subscriptions',
    'page callback' => 'lyris_member_user_page',
    'page arguments' => array(1),
    'access callback' => 'lyris_member_user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/lyris_member.pages.inc',
    'weight' => 3,
  );

  // Callback to sync list members.
  $items['lyris/sync/%lyris_list'] = array(
    'title' => 'Sync List Members',
    'page callback' => 'lyris_member_sync_list',
    'page arguments' => array(2),
    'access arguments' => array('administer lyris subscriptions'),
    'type' => MENU_CALLBACK,
  );

  // Callback to unsubscribe a member from a list
  $items['unsubscribe/%'] = array(
    'title' => 'Unsubscribe',
    'page callback' => 'lyris_member_unsubscribe_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/lyris_member.pages.inc',
  );

  // Ensure the following is not executed until field_bundles is working and
  // tables are updated. Needed to avoid errors on initial installation.
  if (defined('MAINTENANCE_MODE')) {
    return $items;
  }

  // Subscription Management Tab for Lists
  foreach (lyris_get_lists() as $name => $info) {
    $items['admin/structure/lyris/lists/%lyris_list/members'] = array(
      'title' => 'List Members',
      'description' => 'Manage list members.',
      'page callback' => 'lyris_member_list_member_overview_page',
      'page arguments' => array(4),
      'access callback' => 'lyris_list_access',
      'access arguments' => array('manage members', 4),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/lyris_member.pages.inc',
    );
    $items['admin/structure/lyris/lists/%lyris_list/members/manage'] = array(
      'title' => 'Manage List Members',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
    );
    $items['admin/structure/lyris/lists/%lyris_list/members/overview'] = array(
      'title' => 'Detailed List',
      'description' => 'View list members.',
      'page callback' => 'lyris_member_list_member_list_page',
      'page arguments' => array(4),
      'access callback' => 'lyris_list_access',
      'access arguments' => array('manage members', 4),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/lyris_member.pages.inc',
      'weight' => 2,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function lyris_member_permission() {
  $perms = array(
    'administer lyris subscriptions' => array(
      'title' => t('Administer Subscription/Member Settings'),
      'description' => t('Users can set default values and manager members\' subscriptions to lists.'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_preprocess().
 */
function lyris_member_preprocess(&$vars, $hook) {
  switch ($hook) {
    case 'lyris_member_unsubscribe_page':
      switch ($vars['status']) {
        case LYRIS_MEMBER_UNSUB_SUCCESS:
          $var = variable_get('lyris_member_unsub_success_message', array());
          $message = (isset($var['value']) ? $var['value'] : LYRIS_MEMBER_UNSUB_SUCCESS_MSG);
          break;
        case LYRIS_MEMBER_UNSUB_NOLIST:
          $var = variable_get('lyris_member_unsub_nolist_message', array());
          $message = (isset($var['value']) ? $var['value'] : LYRIS_MEMBER_UNSUB_NOLIST_MSG);
          break;
        case LYRIS_MEMBER_UNSUB_NOMEMBER:
          $var = variable_get('lyris_member_unsub_nomember_message', array());
          $message = (isset($var['value']) ? $var['value'] : LYRIS_MEMBER_UNSUB_NOMEMBER_MSG);
          break;
        case LYRIS_MEMBER_UNSUB_ERROR:
          $var = variable_get('lyris_member_unsub_error_message', array());
          $message = (isset($var['value']) ? $var['value'] : LYRIS_MEMBER_UNSUB_ERROR_MSG);
          break;

        default:
          $message = '';
          $var['format'] = filter_default_format();
          break;
      }

      $content = token_replace($message, array('lyris_member' => $vars['member'], 'lyris_list' => $vars['list']));
      $format = (isset($var['format']) ? $var['format'] : filter_default_format());
      $vars['content'] = check_markup($content, $format);
      break;
  }
}

/**
 * Implements hook_theme().
 */
function lyris_member_theme($existing, $type, $theme, $path) {
  return array(
    'lyris_member_unsubscribe_page' => array(
      'variables' => array('status' => NULL, 'list' => NULL, 'member' => NULL),
      'template' => 'lyris-member-unsubscribe-page',
      'path' => "$path/templates",
    ),
  );
}

/**
 * Implements hook_token_info().
 */
function lyris_member_token_info() {
  $types = array(
    'lyris_member' => array(
      'name' => t('Lyris Member'),
      'description' => t('Substitute values for Lyris members.  These should not be used in mailings as they will be translated before reaching Lyris.'),
      'needs-data' => 'lyris_member',
      'entity-token' => FALSE,
    ),
  );

  $member['email'] = array(
    'name' => t('Member\'s E-mail'),
    'description' => t('The member\'s e-mail address.'),
  );
  $member['email-masked'] = array(
    'name' => t('Member\'s Masked E-mail'),
    'description' => t('The member\'s e-mail address with the majority of the name portion replaced with (*) for security.'),
  );
  $member['firstname'] = array(
    'name' => t('Member\'s First Name'),
    'description' => t('The member\'s first name (the first component of their full name). If the member does not have a full name, their email address is used instead. If a member only has a single component to their name, that component is used.'),
  );
  $member['fullname'] = array(
    'name' => t('Member\'s Full Name'),
    'description' => t('The member\'s full name. If the member does not have a full name, their email address is used instead.'),
  );
  $member['memberid'] = array(
    'name' => t('Member\'s Lyris ID'),
    'description' => t('The member\'s unique Member ID. This is useful for exactly identifying the user.'),
  );
  $member['entityid'] = array(
    'name' => t('Member\'s Entity ID'),
    'description' => t('The member\'s unique Drupal entity id.'),
  );

  $lyris['unsubscribe-link-cap'] = array(
    'name' => t('Capitalized Unsubscribe Link'),
    'description' => t('Full unsubscribe link, capitalized.  Useful in a list of links.'),
  );
  $lyris['unsubscribe-link-lower'] = array(
    'name' => t('Lowercase Unsubscribe Link'),
    'description' => t('Full unsubscribe link, lowercase.  Useful for mid-sentence substitutions.'),
  );
  $lyris['unsubscribe-url'] = array(
    'name' => t('Unsubscribe Link URL'),
    'description' => t('The absolute URL for the unsubscribe link by itself, beginning with \'http://\'.  Useful to generate unsubscribe links with custom text.'),
  );
  $lyris['unsubscribe-path'] = array(
    'name' => t('Unsubscribe Link Path'),
    'description' => t('The relative path for the unsubscribe link by itself for internal page use, not for newsletter links.'),
  );

  return array(
    'types' => $types,
    'tokens' => array('lyris_member' => $member, 'lyris' => $lyris),
  );
}
/**
 * Attempted fix for token - entity_token conflicts?
 */
/*function lyris_member_token_info_alter(&$data) {
  foreach ($data['tokens'] as $type => $tokens) {
    if ($data['types'][$type]['entity-token'] === FALSE) {
      foreach ($tokens as $name => $params) {
        if ($params['entity-token']) {
          unset($data['tokens'][$type][$name]);
        }
      }
    }
  }
}*/

/**
 * Implements hook_tokens().
 */
function lyris_member_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  switch ($type) {
    case 'lyris_member':
      foreach ($tokens as $name => $original) {
        $member = $data['lyris_member'];
        $fullname = $member->localVal('FullName');
        $fullname = ($fullname ? $fullname : $member->localVal('EmailAddress'));

        switch ($name) {
          case 'email':
            $replacements[$original] = $member->localVal('EmailAddress');
            break;

          case 'email-masked':
            list($mailname, $domain) = explode('@', $member->localVal('EmailAddress'));
            $fullnum = strlen($mailname);
            $masknum = floor($fullnum * .75);
            $cutname = substr($mailname, $masknum);
            $newname = str_pad($cutname, $fullnum, '*', STR_PAD_LEFT) . '@' . $domain;

            $replacements[$original] = $newname;
            break;

          case 'firstname':
            $names = explode(' ', $fullname);
            $replacements[$original] = $names[0];
            break;

          case 'fullname':
            $replacements[$original] = $member->localVal('FullName');
            break;

          case 'memberid':
            $replacements[$original] = $member->localVal('MemberID');
            break;

          case 'entityid':
            $replacements[$original] = $member->eid;
            break;
        }
      }
      break;

    case 'lyris':
      $list = $data['lyris_list'];
      $hash = md5($list->eid . $list->localVal('ListName'));
      $path = 'unsubscribe/' . $hash;
      $url  = url('unsubscribe/' . $hash, array('absolute' => TRUE, 'html' => TRUE)) . '%%merge recip.memberid%%';

      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'unsubscribe-link-cap':
            $replacements[$original] = '<a href="' . $url . '">' . t('Unsubscribe') . '</a>';
            break;
          case 'unsubscribe-link-lower':
            $replacements[$original] = '<a href="' . $url . '">' . t('unsubscribe') . '</a>';
            break;
          case 'unsubscribe-url':
            $replacements[$original] = $url;
            break;
          case 'unsubscribe-path':
            $replacements[$original] = $path . '%%merge recip.memberid%%';
            break;
        }
      }
      break;
  }

  return $replacements;
}

/**
 * Implements hook_user_delete().
 */
function lyris_member_user_delete($account) {
  // Remove any local subscription records. Important data is stored in Lyris.
  lyris_member_delete_members($account->mail);
}

/**
 * Implements hook_user_login().
 */
function lyris_member_user_login(&$edit, $account) {
  lyris_member_sync_memberships($account->mail);
}

/**
 * Implements hook_user_presave().
 */
function lyris_member_user_presave(&$edit, $account, $category) {
  // Check for an email or name change, then update this user's memberships
  $token_name = variable_get('lyris_member_name_pattern', '[user:name]');
  $data = array();

  $old_name = token_replace($token_name, array('user' => $account));
  $new_name = token_replace($token_name, array('user' => (object) $edit));
  $old_mail = $account->mail;
  $new_mail = $edit['mail'];

  // Ensure a new name was set.
  if (!$new_name) {
    $new_name = LyrisMember::namifyEmail($edit['mail']);
  }

  if ($new_mail && ($old_mail != $new_mail)) {
    $data['EmailAddress'] = $new_mail;
  }
  if ($new_name && ($old_name != $new_name)) {
    $data['FullName'] = $new_name;
  }

  if (!empty($data)) {
    lyris_include('entities', 'lyris_member');
    $members = lyris_member_load_entities(array(llf('EmailAddress') => $old_mail));

    foreach ($members as $member) {
      $member->mergeObjectData($data);
      $status = $member->save();

      if ($status && lyris_threshold_allow()) {
        $member->pushToLyris();
      }
    }
  }
}

/**
 * Implements hook_lyris_include().
 */
function lyris_member_lyris_include($arg) {
  switch ($arg) {
    case 'entities':
      module_load_include('inc', 'lyris_member', 'entities/lyris_member');
      break;

    case 'structs':
      module_load_include('inc', 'lyris_member', 'includes/lyris_member.structs');
      break;
  }
}

/**
 * Delete all lyris_member entities tied to an email address from the local
 * database.
 */
function lyris_member_delete_members($mail) {
  // We don't need to load full entities if we just want the eid.  More
  // efficient to manually query the DB.
  $select = db_select(LYRIS_MEMBER_TABLE, 'lm')->condition(llf('EmailAddress'), $mail)->fields('lm', array('eid'))->execute()->fetchAllAssoc('eid');
  $eids = array_keys($select);

  return (empty($eids) ? TRUE : entity_delete_multiple('lyris_member', $eids));
}

/**
 * Access callback to allow editing of a given user's subscriptions.
 */
function lyris_member_user_edit_access($account) {
  return (($GLOBALS['user']->uid == $account->uid) || user_access('administer lyris subscriptions')) && $account->uid > 0;
}

/**
 * Callback for the tab titles on List Subscriptions tabs.
 */
function lyris_member_list_title_callback($list) {
  return t('List Members of !title', array($list['title']));
}

/**
 * Import a user's subscriptions from Lyris for the given lists if they do not
 * already exist.
 *
 * @param $mail
 *   A user's e-mail address.
 * @param $lists
 *   An array of ListNames to check.
 *
 * @return
 *   An array of the user's memberships keyed on ListName with a value of the
 *   membership status.
 */
function lyris_member_check_membership($mail, $lists) {
  $local = array();

  // Load the member's local membership records.
  $local_memberships = lyris_member_local_lists($mail);
  foreach ($local_memberships as $ListName => $lm) {
    $local[$ListName] = $lm[llf('MemberStatus')];
  }

  // Cross reference with the lists we are looking for.
  $check_lyris = array_diff($lists, array_keys($local));

  // If there are any lists that we need that for this member for which they do
  // not already have a local record, check for a membership in Lyris.
  if (!empty($check_lyris)) {
    foreach ($check_lyris as $ListName) {
      $membership = lyris_member_import_membership($ListName, array('EmailAddress' => $mail));

      // If the membership returns false, the list cannot be loaded and may have
      // been deleted.  Remove the option from the returned value.
      if (is_object($membership)) {
        $local[$ListName] = $membership->localVal('MemberStatus');
      }
      elseif ($membership === FALSE) {
        unset($local[$ListName]);
      }
    }
  }

  return $local;
}

/**
 * Unlike lyris_member_check_membership(), this function will check the sync
 * status of any imported memberships and either pull or push them accordingly
 * to ensure the current user is up-to-date.
 */
function lyris_member_sync_memberships($mail) {
  lyris_include('entities', 'lyris_member');

  $all_lists = lyris_get_lists();
  $memberships = lyris_member_local_lists($mail);

  // For each local list, check to see if the current user has a membership
  foreach ($all_lists as $ListName => $list) {
    if (isset($memberships[$ListName])) {
      $member = lyris_member_load($memberships[$ListName]['eid']);

      // Check sync status.
      if ($member->hasChanges()) {
        $member->pushToLyris();
      }
      else {
        if ($member->loadMembership()) {
          $member->mergeObjectData($member->struct);
          if ($member->save()) {
            $member->setSynced(SAVED_UPDATED);
          }
        }
      }
    }
    else {
      // Try to import a membership if one exists.
      lyris_member_import_membership($ListName, array('EmailAddress' => $mail));
    }
  }
}

/**
 * Run a sync request for members of a given list.
 */
function lyris_member_sync_list($list) {
  lyris_include('entities', 'lyris_member');

  $batch = variable_get('lyris_sync_cron_batch_count', 100);
  $filter = array(
    'entity_type' => 'lyris_member',
    llf('ListName') => $list->localVal('ListName'),
  );

  foreach (lyris_get_unsynced($filter, $batch) as $record) {
    $member = lyris_member_load($record['eid']);
    $member->populateStruct();
    $member->pushToLyris();
  }

  drupal_goto(drupal_get_destination());
}

/**
 * Return a list of Lyris Lists that are open for users to subscribe to.
 */
function lyris_member_get_open_lists() {
  $server = variable_get('lyris_mode', LYRIS_MODE_DEFAULT);

  $sel = db_select(LYRIS_LIST_TABLE, 'll')
        ->condition('ll.server', $server)
        ->condition('ll.' . llf('NewSubscriberSecurity'), array('open', 'private'), 'IN')
        ->fields('ll', array(llf('ListName'), llf('ListID'), 'title'))
        ->execute();

  $ret = array();
  while ($res = $sel->fetchAssoc()) {
    $ret[$res[llf('ListName')]] = $res;
  }

  return $ret;
}

/**
 * Import memberships from Lyris.
 */
function lyris_member_import_membership($ListName, $filters = array()) {
  lyris_include('entities', 'lyris_member');
  $lyris = lyris('admin');

  if ($members = $lyris->loadListMembers($ListName, array(), $filters)) {
    $new_records = array();
    foreach ($members as $member) {
      $LyrisMember = lyris_member();
      $LyrisMember->mergeObjectData($member);
      $LyrisMember->save();
      $LyrisMember->setSynced(SAVED_NEW);
      $new_records[] = $LyrisMember;
    }
    return $new_records;
  }
  else {
    return FALSE;
  }
}

/**
 * Get a list of local lists an email belongs to.
 */
function lyris_member_local_lists($mail) {
  $server = variable_get('lyris_mode', LYRIS_MODE_DEFAULT);

  $sel = db_select(LYRIS_MEMBER_TABLE, 'lm');
  $sel->join(LYRIS_LIST_TABLE, 'll', 'lm.' . llf('ListName') . ' = ll.' . llf('ListName'));

  $sel->condition('ll.server', $server)
      ->condition('lm.' . llf('EmailAddress'), $mail)
      ->fields('lm', array('eid', llf('ListName'), llf('MemberStatus')));
  $res = $sel->execute();

  $ret = array();
  while ($row = $res->fetchAssoc()) {
    $ret[$row[llf('ListName')]] = $row;
  }

  return $ret;
}

/**
 * Get a list of local members for a list.
 *
 * We're not loading full entities here to keep the processing to a minimum as
 * the full entity data will usually be necessary for large groups of members
 * like this.
 */
function lyris_member_local_members($ListName) {
  $sel = db_select(LYRIS_MEMBER_TABLE, 'lm')
         ->condition(llf('ListName'), $ListName)
         ->fields('lm', array('eid', llf('EmailAddress'), llf('MemberStatus')))
         ->execute();

  $ret = array();
  while ($res = $sel->fetchAssoc()) {
    $ret[strtolower($res[llf('EmailAddress')])] = $res;
  }

  return $ret;
}

/**
 * Get the local membership statuses for a given listname.
 */
function lyris_member_local_status($ListName) {
  $sql = db_select(LYRIS_MEMBER_TABLE, 'lm')->condition(llf('ListName'), $ListName);
  $sql->addField('lm', llf('MemberStatus'), 'MemberStatus');
  $sql->addField('lm', llf('EmailAddress'), 'EmailAddress');
  $sql->addField('lm', llf('MemberID'), 'MemberID');
  $sql->addField('lm', llf('FullName'), 'FullName');
  return $sql->execute()->fetchAllAssoc('EmailAddress');
}

/**
 * Clear out fields marked as changed.  The equivalent of cancelling a change.
 */
function lyris_member_set_field_synced($mail, $ListName, $field) {
  $member = lyris_member_load_entity(array('EmailAddress' => $mail, 'ListName' => $ListName));
  $member->changedFieldClear($field);
}

/**
 * Wrapper function to subscribe a user to a Lyris List.  Using this function
 * incorporates three steps:
 *   1. Check list security to make sure the user is allowed to subscribe.
 *   2. Allow the batch manager to control the data push to Lyris if enabled.
 *   3. Store the subscription data to Drupal.
 *
 * @param $mail
 *   The email address.
 * @param $ListName
 *   The Lyris ListName.
 * @param $force
 *   Boolean value whether to check for list permissions before attempting to
 *   subscribe the member.  If the function is being called by a public request
 *   this should be FALSE.  If you are an administrator populating a list, set
 *   this to TRUE to bypass list security checks.
 *
 * @return
 *   Boolean value whether or not the user was succesfully subscribed.
 */
function lyris_member_subscribe($mail, $ListName, $force = FALSE) {
  // Attempt to get a membership record first locally, then from Lyris if no
  // local record is available.
  $membership = lyris_member_check_membership($mail, array($ListName));

  // If this is a new membership, create a new member in the local DB to be
  // synced to Lyris.
  if (!isset($membership[$ListName])) {
    $member = lyris_member();
    $member->setLocalVal('ListName', $ListName);
    $member->setLocalVal('EmailAddress', $mail);
    $member->setLocalVal('MemberStatus', 'normal');
    $member->createMemberName();
    $member->save();
  }

  return lyris_member_update_status($mail, $ListName, 'normal');
}

/**
 * Wrapper function to unsubscribe a user from a Lyris List.
 *
 * @param $mail
 *   The email address.
 * @param $ListName
 *   The Lyris ListName.
 *
 * @return
 *   Boolean value whether or not the user was succesfully unsubscribed.
 */
function lyris_member_unsubscribe($mail, $ListName) {
  // Attempt to get a membership record first locally, then from Lyris if no
  // local record is available.
  $membership = lyris_member_check_membership($mail, array($ListName));
  return lyris_member_update_status($mail, $ListName, 'unsub');
}

/**
 * Change the membership status for a given list member.
 */
function lyris_member_update_status($mail, $ListName, $status) {
  lyris_include('entities', 'lyris_member');

  // Get the member entity
  if (is_object($mail)) {
    $member = $mail;
  }
  else {
    $member = lyris_member_load_entity(array('EmailAddress' => $mail, 'ListName' => $ListName));
  }

  // Update the status
  return $member->updateStatus($status);
}

/**
 * Custom submit handler for the user registration form.
 */
function lyris_member_user_registration_submit($form, &$form_state) {
  $lists = $form_state['values']['lyris_member_lists'];

  foreach ($lists as $list) {
    if ($list) {
      lyris_member_subscribe($form_state['user']->mail, $list);
    }
  }
}
