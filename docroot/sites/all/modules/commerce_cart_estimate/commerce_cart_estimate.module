<?php
/**
 * @file
 * Defines a form in a block for estimating items like taxes and shipping rates
 * on the cart form.
 */

/**
 * Implements hook_block_info().
 */
function commerce_cart_estimate_block_info() {
  $blocks = array();

  $blocks['cart_estimate_form'] = array(
    'info' => t('Cart estimate form'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'cart',
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function commerce_cart_estimate_block_configure($delta = '') {
  $form = array();

  if ($delta == 'cart_estimate_form') {
    $options = array();

    if (module_exists('commerce_shipping')) {
      $options['shipping'] = t('Shipping rates');
    }

    if (!empty($options)) {
      $form['commerce_cart_estimate_items'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Items to estimate through this form'),
        '#options' => array(
          'shipping' => t('Shipping'),
        ),
        '#default_value' => variable_get('commerce_cart_estimate_items', array()),
      );
    }
    else {
      $form['commerce_cart_estimate_items'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="messages warning">' . t('There are no module enabled providing items to estimate.') . '</div>',
      );
    }

    $form['commerce_cart_estimate_countries'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Countries to include in the State / Province select list'),
      '#options' => array(
        'US' => t('United States'),
        'CA' => t('Canada'),
      ),
      '#default_value' => variable_get('commerce_cart_estimate_countries', array('US' => 'US')),
    );

    $form['commerce_cart_estimate_form_orientation'] = array(
      '#type' => 'radios',
      '#title' => t('Estimate form orientation'),
      '#options' => array(
        'horizontal' => t('Horizontal'),
        'vertical' => t('Vertical'),
      ),
      '#default_value' => commerce_cart_estimate_get_form_orientation(),
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function commerce_cart_estimate_block_save($delta = '', $edit = array()) {
  if ($delta == 'cart_estimate_form') {
    variable_set('commerce_cart_estimate_items', $edit['commerce_cart_estimate_items']);
    variable_set('commerce_cart_estimate_countries', $edit['commerce_cart_estimate_countries']);
    variable_set('commerce_cart_estimate_form_orientation', $edit['commerce_cart_estimate_form_orientation']);
  }
}

/**
 * Implements hook_block_view().
 */
function commerce_cart_estimate_block_view($delta = '') {
  if ($delta == 'cart_estimate_form') {
    // Check to ensure the form is configured to estimate items.
    if (commerce_cart_estimate_get_estimate_items() != array()) {
      global $user;

      // Load the current cart order.
      $order = commerce_cart_order_load($user->uid);

      // Do not render the block if the customer does not have a cart.
      if (empty($order)) {
        return;
      }

      // Do not render the block if the cart is empty.
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $quantity = commerce_line_items_quantity($order_wrapper->commerce_line_items, commerce_product_line_item_types());

      if ($quantity == 0) {
        return;
      }

      $block['subject'] = commerce_cart_estimate_block_subject();
      $block['content'] = drupal_get_form('commerce_cart_estimate_form', $order);

      return $block;
    }
  }
}

/**
 * Form callback: builds the cart estimate form.
 *
 * @param $form
 *   The initialized form array.
 * @param $form_state
 *   The form state array.
 * @param $order
 *   The order object that should have items estimated.
 */
function commerce_cart_estimate_form($form, &$form_state, $order) {
  // Add the module's CSS if the form should be horizontally aligned.
  if (commerce_cart_estimate_get_form_orientation() == 'horizontal') {
    $form['#attached']['css'][] = drupal_get_path('module', 'commerce_cart_estimate') . '/theme/commerce_cart_estimate.theme.css';
  }

  $form['#attributes']['class'][] = 'commerce-cart-estimate-form';

  $form['order_id'] = array(
    '#type' => 'value',
    '#value' => $order->order_id,
  );

  // Build an options list of the appropriate administrative areas.
  module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
  $countries = variable_get('commerce_cart_estimate_countries', array('US' => 'US'));
  $options = array();

  // Add the U.S. if enabled.
  if ($countries['US'] === 'US') {
    $options[t('United States')] = addressfield_get_administrative_areas('US');
  }

  // Add Canada if enabled.
  if ($countries['CA'] === 'CA') {
    $options[t('Canada')] = addressfield_get_administrative_areas('CA');
  }

  if (count($options) == 1) {
    $options = $options[key($options)];
  }

  $form['administrative_area'] = array(
    '#title' => t('State / Province'),
    '#type' => 'select',
    '#options' => $options,
    '#empty_option' => t('- Select one -'),
    '#ajax' => array(
      'callback' => 'commerce_cart_estimate_onchange_refresh',
      'wrapper' => 'cart-estimate-display',
    ),
  );

  $form['postal_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Postal code'),
    '#size' => 16,
    '#ajax' => array(
      'callback' => 'commerce_cart_estimate_onchange_refresh',
      'wrapper' => 'cart-estimate-display',
    ),
  );

  // If the order has a shipping address, set default values for the elements.
  if (!empty($order->commerce_customer_shipping)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    try {
      $form['administrative_area']['#default_value'] = $order_wrapper->commerce_customer_shipping->commerce_customer_address->administrative_area->value();
      $form['postal_code']['#default_value'] = $order_wrapper->commerce_customer_shipping->commerce_customer_address->postal_code->value();
    }
    catch (Exception $e) {
      // Catch any exceptions related to missing properties.
    }
  }

  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Estimate shipping'),
    '#ajax' => array(
      'callback' => 'commerce_cart_estimate_refresh',
      'wrapper' => 'cart-estimate-display',
    ),
  );

  // Prepare the output for the cart estimate display field.
  $items = array();
  $output = '';

  if (!empty($form_state['values'])) {
    // First ensure we have the necessary address components.
    if (empty($form_state['values']['administrative_area'])) {
      $items[] = t('You must select a state / province.');
    }
    if (empty($form_state['values']['postal_code'])) {
      $items[] = t('You must enter a postal code.');
    }

    // If we didn't get any error messages...
    if (empty($items)) {
      $estimate_items = commerce_cart_estimate_get_estimate_items();
      $output = '';

      // Build the item list for the estimated shipping rates if enabled.
      if (in_array('shipping', $estimate_items)) {
        $items = commerce_cart_estimate_rates($order, $form_state['values']['administrative_area'], $form_state['values']['postal_code']);

        if (empty($items)) {
          $output .= theme('item_list', array(
            'items' => array(t('No rates could not be estimated at this time.')),
            'title' => t('Estimated shipping rates:')
          ));
        }
        else {
          $output .= theme('item_list', array(
            'items' => $items,
            'title' => format_plural(count($items), 'Estimated shipping rate:', 'Estimated shipping rates:'),
          ));
        }
      }
    }
    else {
      // Otherwise just theme the error messages.
      $output = theme('item_list', array(
        'items' => $items,
        'title' => format_plural(count($items), 'There was an error estimating shipping:', 'There were errors estimating shipping:'),
      ));
    }
  }

  $form['cart_estimate_display'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="cart-estimate-display" class="cart-estimate-display">',
    '#markup' => $output,
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Form callback: refreshes the cart estimate form.
 */
function commerce_cart_estimate_refresh($form, &$form_state) {
  return $form['cart_estimate_display'];
}

/**
 * Form callback: refreshes the cart estimate via onchange events.
 */
function commerce_cart_estimate_onchange_refresh($form, &$form_state) {
  // Only return the onchange refresh value if we have all required fields.
  if (!empty($form_state['values']['administrative_area']) && !empty($form_state['values']['postal_code'])) {
    return $form['cart_estimate_display'];
  }
}

/**
 * Returns an array of items to be estimated in the cart estimate form.
 */
function commerce_cart_estimate_get_estimate_items() {
  $estimate_items = array();

  foreach (variable_get('commerce_cart_estimate_items', array()) as $key => $value) {
    if (!empty($key) && $key === $value) {
      $estimate_items[] = $key;
    }
  }

  return $estimate_items;
}

/**
 * Returns the orientation of the cart estimate form.
 */
function commerce_cart_estimate_get_form_orientation() {
  return variable_get('commerce_cart_estimate_form_orientation', 'horizontal');
}

/**
 * Returns the subject to use for the cart estimate block based on the enabled
 * estimate items.
 */
function commerce_cart_estimate_block_subject() {
  $estimate_items = commerce_cart_estimate_get_estimate_items();

  if (in_array('shipping', $estimate_items)) {
    $subject = t('Estimate your shipping');
  }

  return $subject;
}

/**
 * Returns an array of estimated shipping rates for presentation in a themed
 * item list.
 *
 * @param $order
 *   The order to estimate shipping rates for.
 * @param $administrative_area
 *   The administrative area to set on the order.
 * @param $postal_code
 *   The postal code to set on the order.
 *
 * @return string[]
 *   An array of strings designed to be themed as an item list.
 */
function commerce_cart_estimate_rates($order, $administrative_area, $postal_code) {
  // Determine the country the administrative area is for.
  module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
  $country_code = '';

  foreach (array('US', 'CA') as $test_country_code) {
    if (in_array($administrative_area, array_keys(addressfield_get_administrative_areas($test_country_code)))) {
      $country_code = $test_country_code;
      break;
    }
  }

  // If the country couldn't be determined, return an error message.
  if (empty($country_code)) {
    return array();
  }

  // Retain a local clone of the order.
  $previous_order = clone($order);

  // Create temporary billing and shipping customer profiles.
  $billing_profile = commerce_customer_profile_new('billing', $order->uid);
  $shipping_profile = commerce_customer_profile_new('shipping', $order->uid);

  $address_stub = array(
    'country' => $country_code,
    'administrative_area' => $administrative_area,
    'postal_code' => $postal_code,
  );

  $billing_profile->commerce_customer_address = array(LANGUAGE_NONE => array(0 => $address_stub));
  $shipping_profile->commerce_customer_address = array(LANGUAGE_NONE => array(0 => $address_stub));

  commerce_customer_profile_save($billing_profile);
  commerce_customer_profile_save($shipping_profile);

  // Temporarily set the shipping and billing profiles on the order object.
  $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'] = $billing_profile->profile_id;
  $order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id'] = $shipping_profile->profile_id;
  commerce_order_save($order);

  // Collect shipping rates for the order.
  try {
    commerce_shipping_collect_rates($order);
    $form_state = array();

    $shipping_options = commerce_shipping_service_rate_options($order, $form_state);
  }
  catch (Exception $e) {
    // Catch any exceptions related to missing properties.
  }

  // Return the order to its previous state and delete the customer profiles.
  commerce_order_save($previous_order);

  commerce_customer_profile_delete($billing_profile->profile_id);
  commerce_customer_profile_delete($shipping_profile->profile_id);

  return !empty($shipping_options) ? $shipping_options : array();
}
