<?php
/**
 * @file
 * Functions for Hide Filepath module.
 */

/**
 * Implements hook_permission().
 */
function hide_filepath_permission() {
  return array(
    'edit filepath settings' => array(
      'title' => t('Administer filepath settings'),
      'description' => t('Modify the Hide Filepath configuration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function hide_filepath_menu() {
  $items = array();
  $items['admin/config/media/hide_filepath/settings'] = array(
    'title' => 'Hide Filepath Settings',
    'description' => 'Options to control whether filepaths are visible to, and/or accessible by, anonymous and authenticated users. ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hide_filepath_settings'),
    'access arguments' => array('edit filepath settings'),
    'file' => 'hide_filepath_settings.inc',
    'weight' => 1,
  );
  // Checking for node filepaths.
  $items['node/%/%/%'] = array(
    'page callback' => 'hide_filepath_validate_config',
    'page arguments' => array(1,2,3),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hide_filepath_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $instance = $form['#instance'];
  // @TODO: Dynamically load supported widgets. And don't hardcode
  $supported_widgets = array("image_image", "file_generic", "video_upload");

  if (in_array($instance['widget']['type'], $supported_widgets)) {
    $field = $form['#field'];
    if (empty($form['instance']['settings'])) {
      $form['instance']['settings'] = array();
    }
    $form['instance']['settings'] += hide_filepath_field_widget_settings_form($field, $instance);
  }
}

/**
 * Configuration form for editing hide_filepath settings for a field instance.
 */
function hide_filepath_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  // Setting hide_path to 0 if it's not set to avoid unset notice.
  if (!isset($settings['hide_path'])) {
    $settings['hide_path'] = '0';
  }

  $form['hide_filepath'] = array(
    '#type' => 'fieldset',
    '#title' => t('Hide Filepath'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('Option to hide the filepath from pagesource'),
    '#weight' => 20,
    '#parents' => array('instance', 'widget', 'settings'),
  );

  $form['hide_filepath']['hide_path'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#default_value' => $settings['hide_path'],
    '#description' => t('Hide the filepath for this widget.'),
    '#weight' => -10,
  );

  return $form;
}

/**
 * Custom function to process what should happen with file paths.
 */
function hide_filepath_validate_config($nid, $field_id, $download_index) {
  // Ensure the rest of the code only is called in the correct circumstance.
  if (isset($nid) && $nid > 0 && isset($download_index)) {
    foreach (module_implements('hide_filepath_pre_validation') as $module) {
      $function = $module . '_hide_filepath_pre_validation';
      $result = $function();
      if ($result === FALSE) {
        // Implemented module wants to block this.
        return;
      }
    }
    global $user;
    // Check that user is logged in.
    if ($user->uid == 0) {
      $what_to_do = variable_get('hide_filepath_anonymous', 0);
      switch ($what_to_do) {
        case '403':
          drupal_access_denied();

        case '404':
          drupal_not_found();

        case 'login':
          $path = $_GET['q'];
          $query = array(array());
          $query['query']['destination'] = $path;
          drupal_goto("user/login", $query);

        case 'custom':
          foreach (module_implements('hide_filepath_anonymous_user') as $module) {
            $function = $module . '_hide_filepath_anonymous_user';
            $result = $function();
            if ($result === FALSE) {
              // Implemented module wants to block this.
              return;
            }
          }
          break;

        case 'bypass':
          $node = node_load($nid);
          $node_fields = get_object_vars($node);
          foreach ($node_fields as $field_index => $field_name) {
            if (isset($node->$field_index)) {
              $field = $node->$field_index;
              if (is_array($field) && isset($field[LANGUAGE_NONE])) {
                if (isset($field[LANGUAGE_NONE][$download_index])) {
                  $fid = $field[LANGUAGE_NONE][$download_index]['fid'];
                }
                $field_info = field_info_instance('node', $field_index, $node->type);
                if (isset($fid) && $fid > 0 && $field_id == $field_info['field_id']) {
                  $file = file_load($fid);
                  $file_path = file_create_url($file->uri);
                  drupal_goto($file_path);
                }
              }
            }
          }

        default:
          break;

      }
    }
    elseif ($user->uid != 0) {
      $what_to_do = variable_get('hide_filepath_authenticated', 0);
      switch ($what_to_do) {
        case '403':
          drupal_access_denied();

        case '404':
          drupal_not_found();

        case 'custom':
          foreach (module_implements('hide_filepath_insufficient_access') as $module) {
            $function = $module . '_hide_filepath_insufficient_access';
            $result = $function();
            if ($result === FALSE) {
              // Implemented module wants to block this.
              return;
            }
          }
          break;

        case 'bypass':
          $node = node_load($nid);
          $node_fields = get_object_vars($node);
          foreach ($node_fields as $field_index => $field_name) {
            if (isset($node->$field_index)) {
              $field = $node->$field_index;
              if (is_array($field) && isset($field[LANGUAGE_NONE])) {
                if (isset($field[LANGUAGE_NONE][$download_index]['fid'])) {
                  $fid = $field[LANGUAGE_NONE][$download_index]['fid'];
                }
                $field_info = field_info_instance('node', $field_index, $node->type);
                if (isset($fid) && $fid > 0 && $field_id == $field_info['field_id']) {
                  $file = file_load($fid);
                  $file_path = file_create_url($file->uri);
                  drupal_goto($file_path);
                }
              }
            }
          }
          drupal_set_message(t('No file could be found.'), 'error');

        default:
          drupal_access_denied();

      }

    }
    else {
      $node = node_load($nid);
      $node_fields = get_object_vars($node);
      foreach ($node_fields as $field_index => $field_name) {
        if (isset($node->$field_index)) {
          $field = $node->$field_index;
          if (is_array($field) && isset($field[LANGUAGE_NONE])) {
            if (isset($field[LANGUAGE_NONE][$download_index]['fid'])) {
              $fid = $field[LANGUAGE_NONE][$download_index]['fid'];
            }
            $field_info = field_info_instance('node', $field_index, $node->type);
            if (isset($fid) && $fid > 0 && $field_id == $field_info['field_id']) {
              $file = file_load($fid);
              $file_path = file_create_url($file->uri);
              drupal_goto($file_path);
            }
          }
        }
      }
      drupal_set_message(t('No file could be found.'), 'error');
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function hide_filepath_module_implements_alter(&$implementations, $hook) {
  // We must make sure hide_filepath is loaded after all filefields.
  if ($hook == 'hide_filepath_preprocess_field') {
    $group = $implementations['hide_filepath'];
    unset($implementations['hide_filepath']);
    $implementations['hide_filepath'] = $group;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function hide_filepath_preprocess_field(&$variables) {
  global $base_url;
  // File field type.
  if ($variables['element']['#field_type'] == 'file') {
    $element = $variables['element'];
    $info = field_info_instance('node', $element['#field_name'], $element['#bundle']);
    $uses_hidden_path = $info['widget']['settings']['hide_path'];
    if ($uses_hidden_path == 1) {
      foreach ($variables['items'] as $index => $item) {
        $field_id = $info['field_id'];
        // Keep the real uri around.
        $item['#file']->real_uri = $item['#file']->uri;
        // Obfuscate the uri being used.
        $item['#file']->uri = 'node/' . $variables['element']['#object']->nid . '/' . $field_id . '/' . $index;
      }
    }
  }
  // Image field type.
  elseif ($variables['element']['#field_type'] == 'image') {
    $element = $variables['element'];
    $info = field_info_instance('node', $element['#field_name'], $element['#bundle']);
    $uses_hidden_path = $info['widget']['settings']['hide_path'];
    if ($uses_hidden_path == 1) {
      foreach ($variables['items'] as $index => & $item) {
        $field_id = $info['field_id'];
        // For images we just obfuscate the path.
        $item['#path']['path'] = 'node/' . $variables['element']['#object']->nid . '/' . $field_id . '/' . $index;
      }
    }
  }
}


/**
 * Implements hook_node_view_alter().
 */
function hide_filepath_node_view_alter(&$build) {
  $index = 0;
  $nid = 0;
  if (!empty($build['#node'])) {
    $nid = $build['#node']->nid;
  }
  if ($nid != 0) {
    $node = node_load($nid);
    foreach ($build as &$field) {
      if (is_array($field)) {
        if (isset($field['#field_type']) && $field['#field_type'] == 'video') {
          $info = field_info_instance('node', $field['#field_name'], $node->type);
          $uses_hidden_path = $info['widget']['settings']['hide_path'];
          if ($uses_hidden_path == 1) {
            $field_id = $info['field_id'];
            $field[0]['#item']['uri'] = "node/$nid/$field_id/$index";
            $extension = video_utility::getExtension($field[0]['#item']['playablefiles'][0]->uri);
            $newname = $index . "." . $extension;
            $field[0]['#item']['playablefiles'][0]->uri = "node/$nid/$field_id/$newname";
          }
        }
      }
    }
  }
  elseif ($variables['element']['#field_type'] == 'image') {
    $element = $variables['element'];
    $info = field_info_instance('node', $element['#field_name'], $element['#bundle']);
    $uses_hidden_path = $info['widget']['settings']['hide_path'];
    if ($uses_hidden_path == 1) {
      foreach ($variables['items'] as $index => &$item) {
        $item['#path']['path'] = $base_url . '/' . 'node/' . $variables['element']['#object']->nid . '/download/' . $index;
      }
    }
  }
}
