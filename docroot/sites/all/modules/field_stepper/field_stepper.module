<?php
/**
 * @file
 * Defines field_stepper field types.
 */

define('FIELD_STEPPER_FILE_NAME_JS', 'field_stepper.js');
define('FIELD_STEPPER_FILE_NAME_CSS', 'field_stepper.theme.css');
define('FIELD_STEPPER_PLUGIN_FILE_NAME_JS', 'ui.spinner.min.js');

/**
 * Implements hook_field_widget_info().
 */
function field_stepper_field_widget_info() {
  return array(
    'field_stepper' => array(
      'label' => t('Stepper'),
      'field types' => array('number_integer'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_stepper_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  $element_id = 'edit-' . str_replace('_', '-', $element['#field_name']) . '-' . $langcode . '-' . $delta . '-value';

  // Settings
  $field_settings = array(
    'increment' => 1,
    'mouseWheel' => FALSE,
    'upIconClass' => 'ui-icon-circle-plus',
    'downIconClass' => 'ui-icon-circle-minus',
    'allowNull' => !$instance['required'],
  );

  // Maximum
  if (!empty($instance['settings']['max'])) {
    $field_settings['max'] = (int) $instance['settings']['max'];
  }

  // Minimum
  if (!empty($instance['settings']['min'])) {
    $field_settings['min'] = (int) $instance['settings']['min'];
  }

  $element += array(
    '#type' => 'textfield',
    '#default_value' => $value,
    '#size' => 12,
    '#maxlength' => 10,
    '#attached' => array(
      'library' => array(
        array('system', 'ui.widget'), // Adds the Jquery.ui core
      ),
      'css' => array(
        drupal_get_path('module', 'field_stepper') . '/' . FIELD_STEPPER_FILE_NAME_CSS,
      ),
      'js' => array(
        libraries_get_path('jquery.ui.spinner') . '/' . FIELD_STEPPER_PLUGIN_FILE_NAME_JS,
        drupal_get_path('module', 'field_stepper') . '/' . FIELD_STEPPER_FILE_NAME_JS,
        array(
          'type' => 'setting',
          'data' => array(
            'fieldStepper' => array($element_id => $field_settings),
          ),
        ),
      ),
    ),
  );

  // Add prefix and suffix.
  if (!empty($instance['settings']['prefix'])) {
    $prefixes = explode('|', $instance['settings']['prefix']);
    $element['#field_prefix'] = field_filter_xss(array_pop($prefixes));
  }
  if (!empty($instance['settings']['suffix'])) {
    $suffixes = explode('|', $instance['settings']['suffix']);
    $element['#field_suffix'] = field_filter_xss(array_pop($suffixes));
  }

  $element['#element_validate'][] = 'field_stepper_field_widget_validate';

  return array('value' => $element);
}

/**
 * FAPI validation of an individual number element.
 */
function field_stepper_field_widget_validate($element, &$form_state) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  $value = $element['#value'];

  // Reject invalid characters.
  if (!empty($value)) {
    $regexp = '@[^-0-9]@';
    $message = t('Only numbers are allowed in %field.', array('%field' => $instance['label']));

    if ($value != preg_replace($regexp, '', $value)) {
      form_error($element, $message);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function field_stepper_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}
