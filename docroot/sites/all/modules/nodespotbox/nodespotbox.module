<?php

/**
 * @file
 * Creates spotboxes based on node types and display them using views.
 *
 */

/**
 * Utility function to determined if spotbox is enabled for a given node type.
 *
 * @param string/node object $type
 * @return boolean/array
 */
function nodespotbox_is_enabled($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  $settings = variable_get('nodespotbox_' . $type, FALSE);
  if ($settings && isset($settings['enable']) && $settings['enable']) {
    return $settings;
  }
  return FALSE;
}

/**
 * Implements hook_permission()
 */
function nodespotbox_permission() {
  return array(
    'access nodespotbox options' => array(
      'title' => t('Access nodespotbox options'),
      'description' => t('Display nodespotbox options on node edit form of enabled content types.'),
    ),
  );
}

/**
 * Add node spotbox settings to the edit content type form.
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function nodespotbox_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  // Load view information.
  $views = _nodespotbox_load_all_views_info();

  // Set default view names.
  $view_names = array('none' => 'None');
  $display_names = array('none' => 'None');

  // Add found views information.
  foreach (array_keys($views) as $name) {
    $view_names[$name] = t($name);
    // Create array with all possible choices, to prevent form security problems
    // on submit. The displays not need when selecting a given view, is filter
    // out in javascript.
    $display_names = array_merge($display_names, $views[$name]['displays']);
  }

  // Build js settings array, with views information.
  $settings = array(
    'nodespotbox' => $views,
  );

  // Load default configuration values
  $default = variable_get('nodespotbox_' . $form['#node_type']->type, array());

  // Build settings form.
  $form['nodespotbox'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node spotbox settings'),
    '#group' => 'additional_settings',
    '#attributes' => array('class' => array('nodespotbox-view-settings')),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  // Enable node spotbox for the current content type.
  $form['nodespotbox']['enable'] = array(
    '#type' => 'radios',
    '#title' => t('Enable spotbox'),
    '#default_value' => isset($default['enable']) ? $default['enable'] : 0,
    '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
    '#description' => t('Should these nodes be made available as spotboxes?'),
  );

  // Should the default behaviour be to create spotboxes for all nodes of this
  // content type.
  $form['nodespotbox']['always'] = array(
    '#type' => 'radios',
    '#title' => t('Always create spotbox'),
    '#default_value' => isset($default['always']) ? $default['always'] : 1,
    '#options' => array(1 => t('Enabled'), 0 => t('Disabled')),
    '#description' => t('Should these nodes always be made available as spotboxes? If not users can select if a node of this type should be a spotbox.'),
  );

  // Select view name.
  $form['nodespotbox']['views']['name'] = array(
    '#type' => 'select',
    '#title' => t('View name'),
    '#description' => t('The name of the view used to display these nodes?'),
    '#options' => $view_names,
    '#attributes' => array('class' => array('nodespotbox-views-names')),
    '#default_value' => isset($default['views']['name']) ? $default['views']['name'] : 'none',
  );

  // Select view display id from the view selected above.
  $form['nodespotbox']['views']['display_id'] = array(
    '#type' => 'select',
    '#title' => t('View display id'),
    '#description' => t('The view aboves display. If selected that users can choose, this will be the default display.'),
    '#options' => $display_names,
    '#attributes' => array('class' => array('nodespotbox-views-displays')),
    '#default_value' => isset($default['views']['display_id']) ? $default['views']['display_id'] : 'none',
  );

  // Should users be able to select which display id to use.
  $form['nodespotbox']['views']['user'] = array(
    '#type' => 'radios',
    '#title' => t('Should user select display ID ?'),
    '#description' => t('Determind if the user should be able to select the view display.'),
    '#options' => array('1' => t('Yes'), '0' => t('No')),
    '#default_value' => isset($default['views']['user']) ? $default['views']['user'] : 0,
  );

  // Add submit function to save nested configuration options.
  $form['#submit'][] = 'nodespotbox_form_node_type_form_submit';
  $form['#validate'][] = 'nodespotbox_form_node_type_form_validate';

  // Add front-end js support (to update view displays based on view names).
  drupal_add_js($settings, 'setting');
  drupal_add_js(drupal_get_path('module', 'nodespotbox') . '/js/nodespotbox.js', 'file');
}

/**
 * Validation of node spotbox settings on edit content type form.
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function nodespotbox_form_node_type_form_validate($form, &$form_state) {
  if ($form_state['values']['nodespotbox']['enable']) {
    if ($form_state['values']['nodespotbox']['views']['name'] == 'none') {
      form_set_error('display_id', t('You have to select a view when node spotbox is enabled.'));
    }
    else {
      if ($form_state['values']['nodespotbox']['views']['display_id'] == 'none') {
        form_set_error('display_id', t('You have to select a view display when node spotbox is enabled.'));
      }
    }
  }
}

/**
 * Save nodespotbox settings.
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function nodespotbox_form_node_type_form_submit($form, $form_state) {
  variable_set('nodespotbox_' . $form_state['values']['type'], $form_state['values']['nodespotbox']);
  unset($form_state['values']['nodespotbox']);
}

/**
 * Implements hook_form_alter() to change node type edit/add form.
 *
 */
function nodespotbox_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    // Get the current node.
    $node = $form['#node'];

    // Check if node spotbox is enabled for the current node type.
    $settings = nodespotbox_is_enabled($node->type);
    if ($settings && user_access('access nodespotbox options')) {
      // Only display the fieldset, if options are avaliable and user has access.
      if (!$settings['always'] || $settings['views']['user']) {
        $form['nodespotbox'] = array(
          '#type' => 'fieldset',
          '#title' => t('Spotbox options'),
          '#group' => 'additional_settings',
          '#tree' => TRUE,
        );
      }

      // If node spotbox always enabled, do not give the user the option to
      // disable the spotbox.
      if (!$settings['always']) {
        $form['nodespotbox']['enable'] = array(
          '#type' => 'radios',
          '#title' => t('Enable spotbox'),
          '#default_value' => isset($node->nodespotbox['enable']) ? $node->nodespotbox['enable'] : 0,
          '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
          '#description' => t('Should this node be made available as a spotbox?'),
        );
      }
      else {
        // Make sure that the enabled variable gets set on the node form.
        $form['nodespotbox']['enable'] = array(
          '#type' => 'hidden',
          '#default_value' => 1,
        );
      }

      // View display id may be selected by the user.
      if ($settings['views']['user']) {
        $form['nodespotbox']['display_id'] = array(
          '#type' => 'select',
          '#title' => t('View display id'),
          '#default_value' => isset($node->nodespotbox['display_id']) ? $node->nodespotbox['display_id'] : $settings['views']['display_id'],
          '#description' => t('The view aboves display. If selected that users can choose, this will be the default display.'),
          '#options' => _nodespotbox_load_avaliable_displays($node->type, $settings['views']['name']),
        );
      }
    }
  }
}

/**
 * Add node spotbox settings to nodes when thay are loaded.
 *
 * @param <type> $nodes
 * @return <type>
 */
function nodespotbox_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $settings = nodespotbox_is_enabled($node);
    if ($settings) {
      // Default values.
      $enable = 0;
      $display_id = FALSE;

      // Load spotbox settings this node values.
      $result = db_select('nodespotbox', 'spot')
                ->fields('spot', array('nid', 'display_id'))
                ->condition('nid', $node->nid)
                ->execute()
                ->fetchAssoc();

      // Check if it's optional to create spotboxes for this content type.
      if (!$settings['always'] && !empty($result)) {
        $enable = 1;
      }

      // Should users be able to select view display.
      if ($settings['views']['user']) {
        $display_id = $result['display_id'];
      }

      // Return values found.
      $nodes[$node->nid]->nodespotbox = array('enable' => $enable, 'display_id' => $display_id);
    }
  }
}

/**
 * Save node spotbox settings, when related node is inserted.
 *
 * @param object $node
 */
function nodespotbox_node_insert($node) {
  nodespotbox_save($node);
}

/**
 * Save node spotbox settings, when related node is updated.
 *
 * @param object $node
 */
function nodespotbox_node_update($node) {
  nodespotbox_save($node);
}

/**
 * Remove node spotbox settings, when related node is deleted.
 *
 * @param <type> $node
 */
function nodespotbox_node_delete($node) {
  $settings = nodespotbox_is_enabled($node);
  if ($settings) {
    db_delete('nodespotbox')->condition('nid', $node->nid)->execute();
    nodespotbox_flush_caches();
  }
}

/**
 * Utility function that saves node spotbox settings for a given node.
 *
 * @param <type> $node
 */
function nodespotbox_save($node) {
  $settings = nodespotbox_is_enabled($node);
  if ($settings) {
    // Save spotbox avalibility, if not set to aways provide spotbox in settings.
    if (isset($node->nodespotbox) && $node->nodespotbox['enable']) {
      $display_id = $settings['views']['display_id'];
      if ($settings['views']['user']) {
        $display_id = $node->nodespotbox['display_id'];
      }

      // Check if record exists, if it do... update the record else insert
      // new record.
      $result = db_select('nodespotbox', 'spot')
                ->fields('spot', array('nid'))
                ->condition('nid', $node->nid)
                ->execute()
                ->fetchField();
      if ($result) {
        db_update('nodespotbox')
          ->fields(array('display_id' => $display_id))
          ->condition('nid', $node->nid)
          ->execute();
      }
      else {
        db_insert('nodespotbox')
        ->fields(array('nid' => $node->nid,
                       'type' => $node->type,
                       'display_id' => $display_id))
        ->execute();
      }
    }
    else {
      // Spotbox disabled, so remove it form the database.
      db_delete('nodespotbox')
        ->condition('nid', $node->nid)
        ->execute();
    }

    // Flush caches
    nodespotbox_flush_caches();
  }
}

/**
 * Implements hook_block_info().
 *
 * @return array
 */
function nodespotbox_block_info() {
  $blocks =  array();
  foreach (node_type_get_types() as $type) {
    // Load spotbox settings, if enabled for this content type.
    $settings = nodespotbox_is_enabled($type->type);
    if ($settings) {
      if ($settings['always']) {
        // As spotbox setting, says that all nodes of this type should be spotboxes.. load all.
        $query = db_select('node', 'n')
                 ->fields('n', array('nid', 'title'))
                 ->condition('type', $type->type)
                 ->condition(db_or()
                             ->condition('nid', 'tid')
                             ->condition('tnid', 0))
                 ->execute();
        while ($row = $query->fetchObject()) {
          $blocks[$row->nid] = array(
            'info' => $row->title . ' (Node spotbox)'
          );
        }
      }
      else {
        // Load spotbox information for the ones selected by users.
        $sub_query = db_select('nodespotbox', 'spot')
                     ->fields('spot', array('nid'))
                     ->condition('type', $type->type)
                     ->condition(db_or()
                                ->condition('nid', 'tid')
                                ->condition('tnid', 0));
        $query = db_select('node', 'n')
                 ->fields('n', array('nid', 'title'))
                 ->condition('type', $type->type)
                 ->condition('nid', $sub_query, 'in')
                 ->execute();

        while ($row = $query->fetchObject()) {
          $blocks[$row->nid] = array(
            'info' => $row->title . ' (Node spotbox)'
          );
        }
      }
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * @param string $delta
 * @return array
 */
function nodespotbox_block_configure($delta) {
  // Get spotbox settings for a given content type.
  $type = db_select('node', 'n')
          ->fields('n', array('type'))
          ->condition('nid', $delta)
          ->execute()
          ->fetchField();
  $settings = nodespotbox_is_enabled($type);

  // Get settings for the current node spotbox.
  $display_id = db_select('nodespotbox', 'spot')
                ->fields('spot', array('display_id'))
                ->condition('nid', $delta)
                ->execute()
                ->fetchField();

  // Create view display settings form (don't should option to create block, it will not make sens).
  $form = array();
  if ($settings['views']['user']) {
    $form['nodespotbox'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node spotbox settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    $form['nodespotbox']['display_id'] = array(
      '#type' => 'select',
      '#title' => t('View display id'),
      '#default_value' => isset($display_id) ? $display_id : $settings['views']['display_id'],
      '#description' => t('The view aboves display. If selected that users can choose, this will be the default display.'),
      '#options' =>  _nodespotbox_load_views_info($settings['views']['name']),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * @param string $delta
 * @param array $edit
 */
function nodespotbox_block_save($delta = '', $edit = array()) {
  if (isset($edit['display_id'])) {
    db_update('nodespotbox')
    ->fields(array('display_id' => $edit['display_id']))
    ->condition('nid', $delta)
    ->execute();
  }
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return array
 */
function nodespotbox_block_view($delta) {
  // Get the current users language.
  global $language;

  $block = array();

  // Get the node type based on the delta (nid) and get spotbox settings.
  $node_info = db_select('node', 'n')
               ->fields('n', array('tnid', 'title', 'type', 'language'))
               ->condition('nid', $delta)
               ->execute()
               ->fetchObject();

  // Check that basic information was found, it may not alway be the case.
  if (isset($node_info->type)) {
    // Get spotbox settings.
    $settings = nodespotbox_is_enabled($node_info->type);
    if ($settings) {
      // Set the node id to the current node.
      $settings['nid'] = $delta;

      // Translation support: Try find the tranlationed nodes nid, if not
      // already the correct language.
      if (function_exists('translation_supported_type') && translation_supported_type($node_info->type)) {
        // Translation is active and supported for this node type.
        if (isset($node_info->language) && $node_info->language != $language->language) {
          // Find the translated node nid for the current language.
          $translations = translation_node_get_translations($node_info->tnid);
          $settings['nid'] = isset($translations[$language->language]) ? $translations[$language->language]->nid : NULL;
        }
      }

      // Build output based on selected view.
      if (isset($settings['nid'])) {
        $block['content'] = _nodespotbox_render_view($settings);
      }
    }
  }
  else {
    // The node that represents this block have not been found.
    $block['content'] = t('This block is empty, due to missing node');
  }

  // @TODO Set drupal message, if the view used have been disabled or removed.
  return $block;
}

/**
 * Flush context cache, if available, and re-hash block table.
 *
 */
function nodespotbox_flush_caches() {
  // Clear context block cache (or it will not be available in the drop down).
  if (function_exists('context_cache_get')) {
    context_cache_set('block_info', array());
  }

  // Rebuild blocks provied by modules (for the default theme)
  _block_rehash(variable_get('theme_default', 'bartik'));
}

/**
 * Utility function that, based on the settings array, renders the output of
 * the selected view.
 *
 * @param array $settings
 * @return string rendered view output
 */
function _nodespotbox_render_view($settings) {
  // Check if the user, has supplied a another display to use.
  if ($settings['views']['user']) {
    $display_id = db_select('nodespotbox', 'spot')
                  ->fields('spot', array('display_id'))
                  ->condition('nid', $settings['nid'])
                  ->execute()
                  ->fetchField();
    $settings['views']['display_id'] = $display_id ? $display_id :$settings['views']['display_id'];
  }

  // Build view based on selected view and display.
  return array('#markup' => views_embed_view($settings['views']['name'], $settings['views']['display_id'], $settings['nid']));
}

/**
 * Utility function to load views name and displays.
 *
 * @return string array
 */
function _nodespotbox_load_all_views_info() {
  // Load all views.
  $views = views_get_all_views();

  // Get the information that we need from views.
  $result = array();
  foreach ($views as $view) {

    // If disabled, don't collect information.
    if (isset($view->disabled) && $view->disabled) {
      continue;
    }

    // Add index for current view.
    $view_info = array();

    // Find all displayes.
    $displays = array();
    foreach (array_keys($view->display) as $id) {
      // Find display name.
      $display_name = check_plain($view->display[$id]->display_title);
      if (!isset($display_name) || $display_name == '') {
        $display_name = $id;
      }
      $displays[$id] = $display_name;
    }
    $view_info['displays'] = $displays;

    // Save the information.
    $result[check_plain($view->name)] = $view_info;
  }
  return $result;
}

/**
 * Utility function to help load a views displays based on a view name.
 *
 * @param string $name
 * @return string array
 */
function _nodespotbox_load_views_info($name) {
  $view = views_get_view($name);
  $displays = array();
  foreach (array_keys($view->display) as $id) {
    $display_name = check_plain($view->display[$id]->display_title);
    if (!isset($display_name) || $display_name == '') {
      $display_name = $id;
    }
    $displays[$id] = $display_name;
  }
  return $displays;
}

/**
 * Helper function that findes the views displays that are made avaliable by
 * the site administrator for the content type (spotbox type) as parameter. This
 * is can be selected by using nodespotbox filter.
 *
 * @param string $type
 *    The content type that should be filter on.
 * @param string $name
 *    The name of the view that the displays should belong to.
 * @return array
 */
function _nodespotbox_load_avaliable_displays($type, $name) {
  $avaliable = _nodespotbox_load_views_info($name);
  $settings = variable_get('nodespotbox_' . $type . '_filter', FALSE);
  if ($settings) {
    foreach ($settings as $id => $conf) {
      $avaliable[$id] = $conf['name'];
      if (!$conf['enabled']) {
        unset($avaliable[$id]);
      }
    }
  }

  return $avaliable;
}