<?php

/**
 * @file
 * Tests for the conditional text UI.
 */

/**
 * Test class for the UI.
 */
class ConditionalTextUITest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Conditional Text UI test',
      'description' => '',
      'group' => 'Conditional Text'
    );
  }

  public function setUp() {
    parent::setUp(array('conditional_text'));

    $filtered_html_format = filter_format_load('filtered_html');
    $full_html_format = filter_format_load('full_html');
    $this->admin_user = $this->drupalCreateUser(array(
      'administer filters',
      filter_permission_name($filtered_html_format),
      filter_permission_name($full_html_format),
    ));

    $this->web_user = $this->drupalCreateUser(array(
      'create page content',
      'edit own page content',
    ));
  }

  protected function makeNode($format, $text) {
    $this->drupalLogout();
    $this->drupalLogin($this->web_user);

    $this->drupalGet('node/add/page');
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $this->randomName();
    $edit["body[$langcode][0][value]"] = $text;
    $edit["body[$langcode][0][format]"] = $format;
    $this->drupalPost('node/add/page', $edit, t('Save'));
    $this->assertRaw(t('Basic page %title has been created.', array(
      '%title' => $edit["title"])),
      t('Filtered node created.'));

    $node = $this->drupalGetNodeByTitle($edit["title"]);
    $this->assertTrue($node, t('Node found in database.'));

    return $node;
  }

  protected function createFormat() {
    $this->drupalLogout();
    $this->drupalLogin($this->admin_user);

    // Add text format.
    $this->drupalGet('admin/config/content/formats');
    $this->clickLink('Add text format');
    $format_id = drupal_strtolower($this->randomName());
    $name = $this->randomName();
    $edit = array(
      'format' => $format_id,
      'name' => $name,
      'filters[conditional_text][status]' => 1,
      'roles[2]' => TRUE,
      'filters[conditional_text][settings][display]' => 'filter',
    );
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    $this->drupalGet('admin/config/content/formats');
    $this->assertLinkByHref('admin/config/content/formats/' . $format_id);
    $this->drupalGet('admin/config/content/formats/' . $format_id);

    return $format_id;
  }

  protected function createNode($format) {
    $text = <<<MARKUP
Text before the conditions.
[condition enabled conditional_text] VISIBLE_TEXT [/condition]
[condition enabled not_existing_module] HIDDEN_TEXT [/condition]
Text after the conditions.
MARKUP;


    return $this->makeNode($format, $text);
  }

  protected function verifyNodeOutput($node) {
    $this->drupalLogout();
    $this->drupalLogin($this->web_user);
    $this->drupalGet("node/{$node->nid}");
    $this->assertRaw('VISIBLE_TEXT', t('Visible text is not filtered out.'));
    $this->assertNoRaw('HIDDEN_TEXT', t('Hidden text is filtered out.'));
  }

  public function testBasicFunctionality() {
    $format = $this->createFormat();
    $node = $this->createNode($format);
    $this->verifyNodeOutput($node);
  }

  protected function addEnabledModules($format) {
    $this->drupalLogout();
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/content/formats/' . $format);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Add more'));
    $this->drupalPost(NULL, $edit, t('Add more'));

    $edit = array(
      'filters[conditional_text][settings][enabled][modules][data][0][module]'
        => 'foo-7.x-1.0',
      'filters[conditional_text][settings][enabled][modules][data][1][module]'
        => 'bar-7.x-2.0',
    );

    $this->drupalPost(NULL, $edit, t('Save configuration'));
  }

  protected function addCustomValues($format) {
    $this->drupalLogout();
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/content/formats/' . $format);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Add type'));

    $edit = array(
      'filters[conditional_text][settings][custom][types][0][identifier_token]'
        => 'Test Group',
      'filters[conditional_text][settings][custom][types][0][identifier_token_mn]'
        => 'test_group',
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name]'
        => 'Foo',
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name_mn]'
        => 'foo',
      'filters[conditional_text][settings][custom][types][0][options][0][values][anonymous user]'
        => 1,
    );

    $this->drupalPost(NULL, $edit, t('Save configuration'));

    $this->drupalGet('admin/config/content/formats/' . $format);
    $this->drupalPost(NULL, $edit, t('Add option'));
    $edit = array(
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name_mn]'
        => 'foo',
      'filters[conditional_text][settings][custom][types][0][options][1][option_name][name]'
        => 'Bar',
      'filters[conditional_text][settings][custom][types][0][options][1][option_name][name_mn]'
        => 'bar',
      'filters[conditional_text][settings][custom][types][0][options][1][values][authenticated user]'
        => 1,
    );
    $this->drupalPost(NULL, $edit, t('Save configuration'));
  }

  protected function createAdvancedNode($format) {
    $text = <<<MARKUP
[condition enabled foo] VISIBLE_TEXT [/condition]
[condition enabled bar < 7.x-1.0] HIDDEN_TEXT [/condition]
[condition custom test_group foo] ANONYMOUS_TEXT [/condition]
[condition custom test_group bar] AUTHENTICATED_TEXT [/condition]
MARKUP;

    return $this->makeNode($format, $text);
  }

  protected function verifyAdvancedNodeOutput($node) {
    $this->drupalLogout();
    $this->drupalGet("node/{$node->nid}");
    $this->assertRaw('ANONYMOUS_TEXT',
      t('Content for anonymous is visible for anonymous.'));
    $this->assertNoRaw('AUTHENTICATED_TEXT',
      t('Content for authenticated user is hidden for anonymous.'));

    $this->drupalLogin($this->web_user);
    $this->drupalGet("node/{$node->nid}");
    $this->assertNoRaw('ANONYMOUS_TEXT',
      t('Content for anonymous user is hidden for authenticated user.'));
    $this->assertRaw('AUTHENTICATED_TEXT',
      t('Content for authenticated user is visible for authenticated user.'));

    $this->assertRaw('VISIBLE_TEXT', t('Visible text is visible.'));
    $this->assertNoRaw('HIDDEN_TEXT', t('Hidden text is hidden.'));
  }

  protected function removeEnabledModule($format) {
    $this->drupalLogout();
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/content/formats/' . $format);

    $edit = array(
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name_mn]'
        => 'foo',
      'filters[conditional_text][settings][custom][types][0][options][1][option_name][name_mn]'
        => 'bar',
    );

    $this->drupalPost(NULL, $edit, t('Remove last'));
    $this->drupalPost(NULL, $edit, t('Save configuration'));
  }

  protected function removeCustomValue($format) {
    $this->drupalLogout();
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/content/formats/' . $format);

    $edit = array(
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name_mn]'
        => 'foo',
      'filters[conditional_text][settings][custom][types][0][options][1][option_name][name_mn]'
        => 'bar',
    );

    $this->drupalPost(NULL, $edit, t('Remove last option'));

    $edit = array(
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name_mn]'
        => 'foo',
    );

    $this->drupalPost(NULL, $edit, t('Save configuration'));
  }

  protected function editEnabledModule($format) {
    $this->drupalLogout();
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/content/formats/' . $format);

    $edit = array(
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name_mn]'
        => 'foo',
      'filters[conditional_text][settings][enabled][modules][data][0][module]'
        => 'baz-7.x-3.0',
    );

    $this->drupalPost(NULL, $edit, t('Save configuration'));
  }

  protected function editCustomValue($format) {
    $this->drupalLogout();
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/content/formats/' . $format);

    $edit = array(
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name]'
        => 'Baz',
      'filters[conditional_text][settings][custom][types][0][options][0][option_name][name_mn]'
        => 'baz',
      'filters[conditional_text][settings][custom][types][0][options][0][values][authenticated user]'
        => 1,
    );

    $this->drupalPost(NULL, $edit, t('Save configuration'));
  }

  protected function createAdvancedNode2($format) {
    $text = <<<MARKUP
[condition enabled baz] VISIBLE_TEXT_0 [/condition]
[condition enabled foo] HIDDEN_TEXT_0 [/condition]
[condition enabled bar] HIDDEN_TEXT_1 [/condition]
[condition custom test_group baz] VISIBLE_TEXT_1 [/condition]
MARKUP;

    return $this->makeNode($format, $text);
  }

  protected function verifyAdvancedNodeOutput2($node) {
    $this->drupalLogout();
    $this->drupalLogin($this->web_user);

    $this->drupalGet("node/{$node->nid}");

    $this->assertRaw('VISIBLE_TEXT_0',
      t('Edited module name hidden.'));
    $this->assertNoRaw('HIDDEN_TEXT_0',
      t('Edited module old name hidden.'));
    $this->assertNoRaw('HIDDEN_TEXT_1',
      t('Removed module name hidden.'));
    $this->assertRaw('VISIBLE_TEXT_1',
      t('Edited group text visible.'));
  }

  public function testAdvancedFunctionality() {
    $format = $this->createFormat();
    $this->addEnabledModules($format);
    $this->addCustomValues($format);
    $node = $this->createAdvancedNode($format);
    $this->verifyAdvancedNodeOutput($node);
    $this->removeEnabledModule($format);
    $this->removeCustomValue($format);
    $this->editEnabledModule($format);
    $this->editCustomValue($format);
    $node2 = $this->createAdvancedNode2($format);
    $this->verifyAdvancedNodeOutput2($node2);
  }
}
