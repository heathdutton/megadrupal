<?php
/**
 * @file
 * Debug Tools Module.
 */

/**
 * Implements hook_help().
 */
function debug_tools_help($path, $arg) {
  switch ($path) {
    case 'admin/help#debug_tools':
      $path = dirname(__FILE__) . '/README.md';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      else {
        $path = dirname(__FILE__) . '/README.txt';
        if (file_exists($path)) {
          $readme = file_get_contents($path);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function debug_tools_permission() {
  return array(
    'administer debug tools settings' => array(
      'title' => t('Administer Debug Tools Settings'),
      'description' => t('Perform administration tasks for the debug tools project.'),
    ),
    'create debug report' => array(
      'title' => t('Create Debug Report'),
      'description' => t('Create Debug Report.'),
    ),
    'view debug tools report' => array(
      'title' => t('View Debug Tools Report'),
      'description' => t('Gives report information in a drupal set message, be careful who you give this permission to as it exposes system information.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function debug_tools_menu() {
  $items['admin/config/development/debug_tools'] = array(
    'title' => 'Debug Tools Settings',
    'description' => 'Collection of editable settings for the debug tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('debug_tools_admin'),
    'access arguments' => array('administer debug tools settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/debug_tools'] = array(
    'title' => 'Debug Report',
    'description' => 'Create Debug Report',
    'page callback' => 'debug_tools_page',
    'page arguments' => array('debug_tools_create'),
    'access arguments' => array('create debug report'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Build settings form.
 */
function debug_tools_admin() {
  $form = array();
  $form['debug_tools'] = array(
    '#type' => 'fieldset',
    '#title' => t('debug tools Settings'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['debug_tools']['markup'] = array(
    '#type' => 'item',
    '#title' => t('Report Settings'),
    '#markup' => t('<p>The settings below will allow you to control what options users will have to create a debug tools.</p>'),
  );
  $form['debug_tools']['server_markup'] = array(
    '#type' => 'item',
    '#title' => t('Server Settings'),
  );
  $form['debug_tools']['debug_tools_server'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on debug tools Server Info'),
    '#default_value' => variable_get('debug_tools_server', 1),
    '#description' => t("Adds server information to the report."),
  );
  $form['debug_tools']['user_markup'] = array(
    '#type' => 'item',
    '#title' => t('User Settings'),
  );
  $form['debug_tools']['debug_tools_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on debug tools User Info'),
    '#default_value' => variable_get('debug_tools_user', 1),
    '#description' => t("Adds user information to the report."),
  );
  $form['debug_tools']['block_markup'] = array(
    '#type' => 'item',
    '#title' => t('Block Settings'),
  );
  $form['debug_tools']['debug_tools_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on debug tools Block'),
    '#default_value' => variable_get('debug_tools_block', 0),
    '#description' => t("Turn on debug tools Block."),
  );
  $form['debug_tools']['js_markup'] = array(
    '#type' => 'item',
    '#title' => t('JS Settings'),
  );
  $form['debug_tools']['debug_tools_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on debug tools JS'),
    '#default_value' => variable_get('debug_tools_js', 1),
    '#description' => t("Adds viewport sizes to the report."),
  );
  // Browscap Feature.
  if (!ini_get("browscap")) {
    $browscap_disabled = TRUE;
    $browscap_desc = t('To get advanced user browser information enable browsecap in your php.ini file.');
  }
  else {
    $browscap_disabled = FALSE;
    $browscap_desc = '';
  }
  $form['debug_tools']['browscap_markup'] = array(
    '#type' => 'item',
    '#title' => t('Browscap Settings'),
    '#markup' => $browscap_desc,
  );
  $form['debug_tools']['debug_tools_browscap'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on debug tools Browscap'),
    '#default_value' => variable_get('debug_tools_browscap', 1),
    '#description' => t("Adds browscap information to the report."),
    '#disabled' => $browscap_disabled,
  );
  // End Browscap Feature.
  $form['debug_tools']['watchdog_markup'] = array(
    '#type' => 'item',
    '#title' => t('Watchdog Settings'),
  );
  $form['debug_tools']['debug_tools_watchdog'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on debug tools Watchdog'),
    '#default_value' => variable_get('debug_tools_watchdog', 1),
    '#description' => t("Adds watchdog information to the report."),
  );
  return system_settings_form($form);
}

/**
 * Creates and displays debug tools.
 */
function debug_tools_create() {
  $message = t('<h1>Report Information:</h1>') . ' ';
  // Start Server Info.
  $server_on = variable_get('debug_tools_server', 1);
  if ($server_on == 1) {
    $today = date("F j, Y, g:i a");
    $time = time();
    $server_ip = $_SERVER['SERVER_ADDR'];
    $protocol = stripos($_SERVER['SERVER_PROTOCOL'], 'https') === TRUE ? 'https://' : 'http://';
    $refer = $_SERVER['HTTP_REFERER'];
    $url_text = ($refer != '' ? $refer : t('Debug Tools Admin Page'));
    $url = l($url_text, $refer);
    $doc_root = $_SERVER["DOCUMENT_ROOT"];
    $message .= '</br><h2>' . t('Server Information') . ':</h2> ';
    $message .= t('Server Url') . ' = ' . $url . '</br>' .
                t('Server Date') . ' = ' . $today . '</br>' .
                t('Server Timestamp') . ' = ' . $time . '</br>' .
                t('Server IP') . ' = ' . $server_ip . '</br>' .
                t('Server Protocol') . ' = ' . $protocol . '</br>' .
                t('Site Doc Root') . ' = ' . $doc_root . '</br>';
  }
  // End Server Info.
  // Start Drupal Info.
  $drupal_on = variable_get('debug_tools_drupal', 1);
  if ($drupal_on == 1) {
    $cache = variable_get('cache', 0);
    $cache_block = variable_get('block_cache', 0);
    $cache_max = variable_get('page_cache_maximum_age', 0);
    $cache_lifetime = variable_get('cache_lifetime', 0);
    $cache_css = variable_get('preprocess_css', 0);
    $cache_js = variable_get('preprocess_js', 0);
    $cron = variable_get('cron_last', 0);
    // Globals.
    global $base_path;
    global $base_root;
    global $base_url;
    global $cookie_domain;
    global $theme_key;
    global $theme_path;
    $message .= '</br><h2>' . t('Drupal Information') . ':</h2> ';
    $message .= t('Base Path') . ' = ' . $base_path . '</br>' .
                t('Base Root') . ' = ' . $base_root . '</br>' .
                t('Base Url') . ' = ' . $base_url . '</br>' .
                t('Cookie Domain') . ' = ' . $cookie_domain . '</br>' .
                t('Theme Key') . ' = ' . $theme_key . '</br>' .
                t('Theme Path') . ' = ' . $theme_path . '</br>' .
                t('Cache') . ' = ' . $cache . '</br>' .
                t('Cache Block') . ' = ' . $cache_block . '</br>' .
                t('Cache Lifetime') . ' = ' . $cache_lifetime . '</br>' .
                t('Cache Expire') . ' = ' . $cache_max . '</br>' .
                t('Cache CSS') . ' = ' . $cache_css . '</br>' .
                t('Cache JS') . ' = ' . $cache_js . '</br>' .
                t('Cron Last Run') . ' = ' . $cron . '</br>';
  }
  // End Drupal Info.
  // Start PHP Info.
  $php_on = variable_get('debug_tools_php', 1);
  if ($php_on == 1) {
    $php_version = phpversion();
    $php_uname = php_uname();
    $php_os = PHP_OS;
    $display_errors = ini_get('display_errors');
    $display_errors = ($display_errors != '' ? $display_errors : 'Not Set');
    $register_globals = ini_get('register_globals');
    $post_max_size = ini_get('post_max_size');
    $upload_max_filesize = ini_get('upload_max_filesize');
    $memory_limit = ini_get('memory_limit');
    $max_execution_time = ini_get('max_execution_time');
    $message .= '</br><h2>' . t('PHP Information') . ':</h2> ';
    $message .= t('PHP Version') . ' = ' . $php_version . '</br>' .
                t('PHP Uname') . ' = ' . $php_uname . '</br>' .
                t('PHP OS') . ' = ' . $php_os . '</br>' .
                t('Display Errors') . ' = ' . $display_errors . '</br>' .
                t('Register Globals') . ' = ' . $register_globals . '</br>' .
                t('Post Max Size') . ' = ' . $post_max_size . '</br>' .
                t('Upload Max File Size') . ' = ' . $upload_max_filesize . '</br>' .
                t('Memory Limit') . ' = ' . $memory_limit . '</br>' .
                t('Max Execution Time') . ' = ' . $max_execution_time . '</br>';
  }
  // End PHP Info.
  // Start User Info.
  global $user;
  $user_on = variable_get('debug_tools_user', 1);
  if ($user_on == 1) {
    $user_agent = $_SERVER['HTTP_USER_AGENT'];
    $roles = $user->roles;
    $user_roles = '<h2>' . t('User Roles') . ': </h2>';
    foreach ($roles as $rid => $role) {
      $user_roles .= $role . ' ' . l(t('Manage Role Permissions'), 'admin/people/permissions/' . $rid, array('attributes' => array('target' => '_blank'))) . '<br />';
    }
    $user_ip = ip_address();
    $message .= '</br><h2>' . t('User Information') . ':</h2> ';
    $message .= t('User IP') . ' = ' . $user_ip . '</br>' .
                t('User Name') . ' = ' . $user->name . '</br>' .
                t('User Mail') . ' = ' . $user->mail . '</br>' .
                t('User ID') . ' = ' . $user->uid . '</br>' .
                t('User Agent') . ' = ' . $user_agent . '</br>
                </br> ' . $user_roles . '';
  }
  // End User Info.
  // Start Browscap Info.
  $browscap_on = variable_get('debug_tools_browscap', 1);
  if (ini_get("browscap") && $browscap_on == 1) {
    $browser = get_browser();
    if ($browser) {
      $message .= '</br><h2>' . t('Browscap Info') . ':</h2>	' .
                  t('Browscap Parent') . ': ' . $browser->parent . '</br>' .
                  t('Browscap Bits') . ': ' . $browser->browser_bits . '</br>' .
                  t('Browscap Platform') . ': ' . $browser->platform . '</br>' .
                  t('Browscap Platform Version') . ': ' . $browser->platform_version . '</br>' .
                  t('Browscap Platform Description') . ': ' . $browser->platform_description . '</br>' .
                  t('Browscap Platform Bits') . ': ' . $browser->platform_bits . '</br>' .
                  t('Browscap Platform Maker') . ': ' . $browser->platform_maker . '</br>' .
                  t('Browscap Device Name') . ': ' . $browser->device_name . '</br>' .
                  t('Browscap Platform Maker') . ': ' . $browser->device_maker . '</br>' .
                  t('Browscap Platform Code Name') . ': ' . $browser->device_code_name . '</br>' .
                  t('Browscap Platform Brand Name') . ': ' . $browser->device_brand_name . '</br>' .
                  t('Browscap Comment') . ': ' . $browser->comment . '</br>' .
                  t('Browscap Browser') . ': ' . $browser->browser . '</br>' .
                  t('Browscap Browser Type') . ': ' . $browser->browser_type . '</br>' .
                  t('Browscap Browser Maker') . ': ' . $browser->browser_maker . '</br>' .
                  t('Browscap Browser Version') . ': ' . $browser->version . '</br>' .
                  t('Browscap Browser Major Version') . ': ' . $browser->majorver . '</br>' .
                  t('Browscap Browser Frames') . ': ' . $browser->frames . '</br>' .
                  t('Browscap Browser iFrames') . ': ' . $browser->iframes . '</br>' .
                  t('Browscap Browser Tables') . ': ' . $browser->tables . '</br>' .
                  t('Browscap Cookies') . ': ' . $browser->cookies . '</br>' .
                  t('Browscap Javascript') . ': ' . $browser->javascript . '</br>' .
                  t('Browscap Java Applets') . ': ' . $browser->javaapplets . '</br>' .
                  t('Browscap CSS Version') . ': ' . $browser->cssversion . '</br>' .
                  t('Browscap Device Type') . ': ' . $browser->device_type . '</br>' .
                  t('Browscap Device Pointer') . ': ' . $browser->device_pointing_method . '</br>' .
                  t('Browscap Rendering Engine Name') . ': ' . $browser->renderingengine_name . '</br>' .
                  t('Browscap Rendering Engine Description') . ': ' . $browser->renderingengine_description . '</br>' .
                  t('Browscap Rendering Engine Maker') . ': ' . $browser->renderingengine_maker . '</br>';
    }
  }
  // End Browscap Info.
  // Start JS Info.
  $js_on = variable_get('debug_tools_js', 1);
  if ($js_on == 1) {
    drupal_add_js(drupal_get_path('module', 'debug_tools') . '/debug_tools.js');
    $viewport_height = (!empty($_COOKIE['debug_tools_vp_height']) ? $_COOKIE['debug_tools_vp_height'] : 'Not Set ') . 'px';
    $viewport_width = (!empty($_COOKIE['debug_tools_vp_width']) ? $_COOKIE['debug_tools_vp_width'] : 'Not Set ') . 'px';
    $message .= '</br><h2>' . t('JS Information') . ':</h2> ';
    $message .= t('Viewport Height') . ': ' . $viewport_height . '</br>' .
                t('Viewport Width') . ': ' . $viewport_width . '</br>';
  }
  // End JS Info.
  // Start Watchdog Info.
  $watchdog_on = variable_get('debug_tools_watchdog', 1);
  if ($watchdog_on == 1) {
    $logtime = time() - 60;
    $query = db_select('watchdog', 'w');
    $query->fields('w', array(
      'wid',
      'type',
      'timestamp',
      'message',
    ))
      ->condition('uid', $user->uid, '=')->condition('referer', $refer, '=')->condition('type', 'debug tools', '!=')->condition('timestamp', $logtime, '>=')->orderBy('wid', 'DESC');
    $logs = $query->execute();
    if (is_object($logs)) {
      $num_of_logs = $logs->rowCount();
    }
    else {
      $num_of_logs = '0';
    }
    $message .= '</br><h2>' . t('Related Watchdog Logs') . ':</h2> ';
    $message .= '' . t('Number of Logs') . ' ' . $num_of_logs;
    foreach ($logs as $log) {
      $log_link = $protocol . $_SERVER['SERVER_NAME'] . '/admin/reports/event/' . $log->wid;
      $log_message_text = $log->message;
      $link_text = t('Type:')  . ' ' . $log->type . ' - ' . t('Message:') . ' ' . '<pre>' . $log_message_text . '</pre>';
      $message .= '</br>' . l($link_text, $log_link, array('html' => TRUE, 'attributes' => array('target' => '_blank')));
    }
    $message .= '</br>';
    watchdog('debug tools', $message);
  }
  if (user_access('view debug tools report')) {
    drupal_set_message($message, 'warning');
  }
}

/**
 * Implements creates report page.
 */
function debug_tools_page() {
  debug_tools_create();
  $protocol = stripos($_SERVER['SERVER_PROTOCOL'], 'https') === TRUE ? 'https://' : 'http://';
  global $user;
  $db_link = db_select('watchdog', 'wid')->fields('wid')->condition('type', 'debug tools', '=')->condition('uid', $user->uid, '=')
    ->orderBy('wid', 'DESC')->range(0, 1)->execute()->fetchAssoc();
  $actual_link = $_SERVER['HTTP_REFERER'];
  $drupal_url = l($actual_link, $actual_link);
  $message = '<h2>Drupal Url</h2>' . $drupal_url . '</br>';
  $instructions = '<h2>' . t('Report Link') . '</h2>';
  $link = $protocol . $_SERVER['SERVER_NAME'] . '/admin/reports/event/' . $db_link['wid'];
  $message .= $instructions . l($link, $link, array('attributes' => array('target' => '_blank')));
  return $message;
}

/**
 * Implements hook_block_info().
 */
function debug_tools_block_info() {
  $blocks['debug_tools'] = array(
    'info' => t('Debug Tools Block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function debug_tools_block_view($delta = '') {
  switch ($delta) {
    case 'debug_tools':
      // Create debug tools block.
      $block['subject'] = t('Debug Report');
      $block['content'] = drupal_get_form('debug_tools_email_report_form');
      break;
  }
  return $block;
}

/**
 * Define the form to be returned.
 */
function debug_tools_email_report_form() {
  $form['report_email'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t("Email address to send report to"),
    '#description' => t('Must be a valid email address'),
  );
  $form['report_message'] = array(
    '#type' => 'textarea',
    '#required' => TRUE,
    '#title' => t("Notes"),
    '#description' => t('Please add any additional information to help debug this issue.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Debug Report'),
  );
  return $form;
}

/**
 * Define a validation function.
 */
function debug_tools_email_report_form_validate($form, &$form_state) {
  $email = $form_state['values']['report_email'];
  // If it's not a valid email, set an error.
  if (valid_email_address($email) == 0) {
    form_set_error('report_email', t('Not a valid email address'));
  }
}

/**
 * Submit funciton automatically called on submit.
 */
function debug_tools_email_report_form_submit($form, &$form_state) {
  $to = $form_state['values']['report_email'];
  $report_message = $form_state['values']['report_message'];
  debug_tools_create();
  $protocol = stripos($_SERVER['SERVER_PROTOCOL'], 'https') === TRUE ? 'https://' : 'http://';
  global $user;
  $db_link = db_select('watchdog', 'wid')->fields('wid')->condition('type', 'debug tools', '=')->condition('uid', $user->uid, '=')
    ->orderBy('wid', 'DESC')->range(0, 1)->execute()->fetchAssoc();
  $actual_link = $protocol . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
  $drupal_url = l($actual_link, $actual_link);
  $message = "\nDrupal Url:" . $drupal_url;
  $message .= "\nUser Notes:" . $report_message;
  $instructions = "\n" . t('Report Link') . ":";
  $link = $protocol . $_SERVER['SERVER_NAME'] . '/admin/reports/event/' . $db_link['wid'];
  $message .= $instructions . l($link, $link, array('attributes' => array('target' => '_blank')));
  $from = variable_get('site_mail', 'Debug Tools <debug_tools@drupal.org');
  $sent = _debug_tools_mail_send($from, $to, 'Debug Tools Report', $message);
  if ($sent) {
    drupal_set_message(t('Thank you for helping us improve!'));
    drupal_set_message(t('Report URL:') . ' ' . l($link, $link, array('attributes' => array('target' => '_blank'))));
  }
  else {
    drupal_set_message(t('There was a problem sending your message'), 'error');
  }
}

/**
 * Implements hook_mail().
 */
function debug_tools_mail($key, &$message, $params) {
  switch ($key) {
    case 'feedback_send':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['headers']['Content-Type'] = 'text/plain';
      break;
  }
}

/**
 * Send the email.
 */
function _debug_tools_mail_send($from, $to, $subject, $message) {
  $params = array(
    'body' => $message,
    'subject' => $subject,
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
      'Content-Type' => 'text/plain',
    ),
  );

  $message = drupal_mail(
    'debug_tools',
    'feedback_send',
    $to,
    language_default(),
    $params,
    $from
  );

  if (isset($message['result'])) {
    return $message['result'];
  }
}
