<?php

/**
 * @file
 * This file serves as a stub file for the many Examples modules in the
 * @link http://drupal.org/project/examples Examples for Developers Project @endlink
 * which you can download and experiment with.
 *
 * One might say that examples.module is an example of documentation. However,
 * note that the example submodules define many doxygen groups, which may or
 * may not be a good strategy for other modules.
 */

/**
 * Implements hook_entity_insert()
 *
 * Automatically saves any data attached to entity as $entity->entity_data
 * via entity_data_entity_save()
 *
 */
function entity_data_entity_insert($entity, $type) {
  entity_data_entity_save($entity, $type);
}

/**
 * Implements hook_entity_update()
 *
 * Automatically saves any data attached to entity as $entity->entity_data
 * via entity_data_entity_save()
 */
function entity_data_entity_update($entity, $type) {
  entity_data_entity_save($entity, $type);
}

/**
 * Automatically saves any data attached to entity as $entity->entity_data.
 *
 * @param $entity
 *   The entity with the attached data
 * @param $entity_type
 *   The entity type of the $entity argument. E.g. node, user.
 */
function entity_data_entity_save($entity, $entity_type) {
  // check if entity_data is set
  if (!isset($entity->entity_data) || !is_array($entity->entity_data)) {
    return;
  }
  $entity_info = entity_get_info($entity_type);
  if (!isset($entity->entity_data)
    || !is_array($entity->entity_data)
    || !isset($entity_info['entity keys']['id'])) {
    return;
  }
  $language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
  $entity_id = $revision_id = $entity->{$entity_info['entity keys']['id']};
  if (isset($entity_info['entity keys']['revision'])
    && isset($entity->{$entity_info['entity keys']['revision']})) {
    $revision_id = $entity->{$entity_info['entity keys']['revision']};
  }
  foreach ($entity->entity_data AS $name => $value) {
    entity_data_set($entity_type, $entity_id, $name, $value, $revision_id, $language);
  }
}

/**
 * Implements hook_entity_delete()
 *
 * Deletes variables for the given entity.
 *
 * @param $entity
 * @param $type
 */
function entity_data_entity_delete($entity, $type) {
  $entity_info = entity_get_info($type);
  if (!isset($entity->entity_data)
    || !is_array($entity->entity_data)
    || !isset($entity_info['entity keys']['id'])) {
    return;
  }
  entity_data_del_all($type, $entity->{$entity_info['entity keys']['id']});
}

/**
 * Implements hook_node_revision_delete
 *
 * TODO: need some equivalent for all entities, i.e. hook_entity_revision_delete
 * @param $node
 */
function entity_data_node_revision_delete($node) {
  entity_data_del_all('node', $node->nid, $node->vid);
}

/**
 * Implements hook_entity_load()
 *
 * Binds variable data to $entity->entity_data
 *
 */
function entity_data_entity_load(&$entities, $type) {
  foreach ($entities AS $i => $entity) {
    $entity_info = entity_get_info($entity->entity_type);
    if (!isset($entity_info['entity keys']['id'])) {
      return;
    }
    $vars = entity_data_get_all($entity->entity_type, $entity->{$entity_info['entity keys']['id']}, array());
    if (count($vars)) {
      $entities[$i]->entity_data = $vars;
    }
  }
}

/**
 * Sets a persistent variable on an entity.
 *
 * Case-sensitivity of the variable_* functions depends on the database
 * collation used. To avoid problems, always use lower case for persistent
 * variable names.
 *
 * @param $entity_type
 *   The entity_type of the entity you want to attach the data. E.g. node, user.
 * @param $entity_id
 *   The entity_id of the entity you want to attach the data.
 * @param $name
 *   The name of the variable to set.
 * @param $value
 *   The value to set. This can be any PHP data type. Data is serialized.
 * @param int $revision_id
 *   (optional) The revision_id you want the data attached.
 * @param string $language
 *   (optional) The language you want the data attached.
 *
 * @see entity_data_del()
 * @see entity_data_get()
 */
function entity_data_set($entity_type, $entity_id, $name, $value, $revision_id = 0, $language = LANGUAGE_NONE) {
  // serialize if not string
  if (!is_string($value)) {
    $value = serialize($value);
  }
  if (!$revision_id) {
    $revision_id = $entity_id;
  }
  $key = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'revision_id' => $revision_id,
    'language' => $language,
    'name' => $name,
  );
  $fields = array(
    'value' => $value,
  );
  $query = db_merge('entity_data')
    ->key($key)
    ->fields($fields);

  $query->execute();
}

/**
 * Returns a persistent variable for a specified entity.
 *
 * Case-sensitivity of the variable_* functions depends on the database
 * collation used. To avoid problems, always use lower case for persistent
 * variable names.
 *
 * @param $entity_type
 *   The entity_type of the entity from which you want the data returned.
 *   E.g. node, user.
 * @param $entity_id
 *   The entity_id of the entity from which you want the data returned.
 * @param $name
 *   The name of the variable to return.
 * @param $default
 *   The value to return if this variable has not be set.
 * @param int $revision_id
 *   (optional) The revision_id from which you want the data returned.
 * @param string $language
 *   (optional) The language from which you want the data returned.
 * @return
 *   The value of the variable. Data is unserialized.
 *
 * @see entity_data_del()
 * @see entity_data_set()
 *
 */
function entity_data_get($entity_type, $entity_id, $name, $default = null, $revision_id = 0, $language = LANGUAGE_NONE) {
  if (!$revision_id) {
    $revision_id = $entity_id;
  }
  $query = db_select('entity_data', 'v')
    ->fields('v', array('value'))
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->condition('revision_id', $revision_id)
    ->condition('language', $language)
    ->condition('name', $name);
  $values = $query->execute()->fetchCol();

  if (count($values)) {
    return unserialize($values[0]);
  }

  return $default;
}

/**
 * Returns all persistent variables for a given set of parameters.
 *
 * @param $entity_type
 *   (optional) The entity_type of the entity from which you want the data returned.
 *   E.g. node, user.
 * @param $entity_id
 *   (optional) The entity_id of the entity from which you want the data returned.
 * @param $name
 *   (optional) The name of the variable to return.
 * @param $revision_id
 *   (optional) The revision_id from which you want the data returned.
 * @param $language
 *   (optional) The language from which you want the data returned.
 * @param $key_by
 *   (optional) Specifies a column to us for keying the returned array. If not
 *   specified, a standard array will be returned.
 * @return
 *   array of values containing all database columns. The value of the variable
 *   can be found using the "value" hash.
 *
 * @see entity_data_get()
 */
function entity_data_get_multi($entity_type = null, $entity_id = null, $name = null, $revision_id = null, $language = null, $key_by = '') {
  $query = db_select('entity_data', 'v')
    ->fields('v');
  if (isset($entity_type)) {
    $query->condition('entity_type', $entity_type);
  }
  if (isset($entity_id)) {
    $query->condition('entity_id', $entity_id);
  }
  if (isset($revision_id)) {
    $query->condition('revision_id', $revision_id);
  }
  if (isset($language)) {
    $query->condition('language', $language);
  }
  if (isset($name)) {
    $query->condition('name', $name);
  }
  $data = array();
  $result = $query->execute();
  while ($row = $result->fetchAssoc()) {
    $row['value'] = unserialize($row['value']);
    if ($key_by) {
      $data[$row[$key_by]] = $row;
    }
    else {
      $data[] = $row;
    }

  }
  return $data;
}

/**
 * Returns all the persistent variable for a specified entity.
 *
 * @param $entity_type
 *   The entity_type of the entity from which you want the data returned.
 *   E.g. node, user.
 * @param $entity_id
 *   The entity_id of the entity from which you want the data returned.
 * @param $revision_id
 *   (optional) The revision_id from which you want the data returned.
 *   If no value is given, revision_id = entity_id is assumed.
 * @param $language
 *   (optional) The language from which you want the data returned.
 *   If no value is given, language = LANGUAGE_NONE is assumed.
 * @return
 *   array of values keyed by name.
 */
function entity_data_get_all($entity_type, $entity_id, $revision_id = 0, $language = LANGUAGE_NONE) {
  $vars = &drupal_static(__FUNCTION__, array());

  if (!$revision_id) {
    $revision_id = $entity_id;
  }

  if (isset($vars[$entity_type][$entity_id][$revision_id][$language])) {
    return $vars[$entity_type][$entity_id][$revision_id][$language];
  }

  // build static cache array
  if (!isset($vars[$entity_type])) {
    $vars[$entity_type] = array();
  }
  if (!isset($vars[$entity_type][$entity_id])) {
    $vars[$entity_type][$entity_id] = array();
  }
  if (!isset($vars[$entity_type][$entity_id][$revision_id])) {
    $vars[$entity_type][$entity_id][$revision_id] = array();
  }
  if (!isset($vars[$entity_type][$entity_id][$revision_id][$language])) {
    $vars[$entity_type][$entity_id][$revision_id][$language] = array();
  }

  $data = entity_data_get_multi($entity_type, $entity_id, null, $revision_id, $language, 'name');

  if (is_array($data)) {
    foreach ($data as $name => $row) {
      if (isset($row['value'])) {
        $vars[$entity_type][$entity_id][$revision_id][$language][$name] = $row['value'];
      }
    }
  }


  return $vars[$entity_type][$entity_id][$revision_id][$language];
}

/**
 * Deletes persistent variable for an entity.
 *
 * @param $entity_type
 *   The entity_type of the entity from which you want to delete variables.
 *   E.g. node, user.
 * @param $entity_id
 *   The entity_id of the entity from which you want to delete variables.
 * @param $revision_id
 *   (optional) The revision_id from which you want to delete variables.
 *   If no value is given, revision_id = $entity_id is assumed.
 * @param $language
 *   (optional) The language from which you want the data returned.
 *   If no value is given, LANGUAGE_NONE is assumed.
 */
function entity_data_del($entity_type, $entity_id, $name, $revision_id = 0, $language = LANGUAGE_NONE) {
  if (!$revision_id) {
    $revision_id = $entity_id;
  }
  $query = db_delete('entity_data')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->condition('revision_id', $revision_id)
    ->condition('language', $language)
    ->condition('name', $name);

  return $query->execute();
}

/**
 * Deletes all persistent variables for a given set of parameters.
 *
 * WARNING: Do not call this function with no parameters unless you want to
 * delete all values site wide.
 *
 * @param $entity_type
 *   (optional) The entity_type of the entity from which you want to delete data.
 *   E.g. node, user.
 * @param $entity_id
 *   (optional) The entity_id of the entity from which you want to delete data.
 * @param $name
 *   (optional) The name of the variable to delete.
 * @param $revision_id
 *   (optional) The revision_id from which you want  to delete data.
 * @param $language
 *   (optional) The language from which you want  to delete data.
 * @return
 *   value of the db_delete()->execute() result.
 *
 * @see entity_data_del()
 */
function entity_data_del_multi($entity_type = null, $entity_id = null, $name = null, $revision_id = null, $language = null) {
  $query = db_delete('entity_data', 'v')
    ->fields('v');
  if (isset($entity_type)) {
    $query->condition('entity_type', $entity_type);
  }
  if (isset($entity_id)) {
    $query->condition('entity_id', $entity_id);
  }
  if (isset($revision_id)) {
    $query->condition('revision_id', $revision_id);
  }
  if (isset($language)) {
    $query->condition('language', $language);
  }
  if (isset($name)) {
    $query->condition('name', $name);
  }

  return $query->execute();
}

/**
 * Deletes all the persistent variable for a specified entity.
 *
 * If no revision_id or language is provided in the arguments, all variables
 * linked to the entity will be deleted across all revisions and languages.
 *
 * @param $entity_type
 *   The entity_type of the entity from which you want to delete variables.
 *   E.g. node, user.
 * @param $entity_id
 *   The entity_id of the entity from which you want to delete variables.
 * @param $revision_id
 *   (optional) The revision_id from which you want to delete variables.
 *   If no value is given, all revisions are assumed.
 * @param $language
 *   (optional) The language from which you want the data returned.
 *   If no value is given, all languages are assumed.
 * @return
 *   value of the db_delete()->execute() result.
 */
function entity_data_del_all($entity_type, $entity_id, $revision_id = null, $language = null) {
  return entity_data_del_multi($entity_type, $entity_id, null, $revision_id, $language);
}

function entity_data_uuid_entities_features_export_entity_alter(&$entity, $entity_type) {
  $entity_info = entity_get_info($entity_type);

  if (isset($entity_info['entity keys']['uuid'])) {
    $uuid = $entity->{$entity_info['entity keys']['uuid']};
    $ids = entity_get_id_by_uuid($entity_type, array($uuid));
    $id = $ids[$entity->uuid];
  }
  else {
    $id = $entity->{$entity_info['entity keys']['id']};
  }

  $vars = entity_data_get_all($entity_type, $id);
  if (count($vars)) {
    $entity->entity_data = $vars;
  }
}