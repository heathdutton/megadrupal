<?php

/**
 * @file
 * This module allows admins to configure rules for user roles to have to pay userpoints to vote on a poll.
 */
 
include_once('userpoints_poll_action.inc');

/**
 * Implementation of hook_help().
 */ 
function userpoints_poll_action_help($path, $arg) {
  if ($path == 'admin/config/people/userpoints_poll_action' ) {
    return (t('This module allows admins to configure rules for user roles to have to pay !points to vote on polls.', userpoints_translation()));
  }
}

/**
 * Implementation of hook_menu().
 */
function userpoints_poll_action_menu() {
  $items = array();
  $items['admin/config/people/userpoints_poll_action'] = array(
    'title' => t('!Points Poll Action', userpoints_translation()),
    'description' => t('Settings for the !points cost of voting on polls.', userpoints_translation()),
    'page callback' => 'userpoints_poll_action_admin',
    'access arguments' => array('administer userpoints'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin menu
 */
function userpoints_poll_action_admin() {
  $op = arg(4);
  $rid = arg(5);
  // Arguments to delete something
  if (!empty($op) && !empty($rid) && $op == 'delete' && is_numeric($rid)) {
    userpoints_poll_action_admin_delete_rule($rid);
  }
  include_once('userpoints_poll_action.inc');
  $admin_form = drupal_get_form('userpoints_poll_action_admin_add_form');
  $message_form = drupal_get_form('userpoints_poll_action_admin_message_form');
  $modify_form = drupal_get_form('userpoints_poll_action_admin_modify_form');
  $output = drupal_render($admin_form) . drupal_render($message_form) . drupal_render($modify_form);
  return $output;
}

function userpoints_poll_action_theme() {
  $themes = array(
    'userpoints_poll_action_admin_modify_form' => array(
      'render element' => 'form',
      'function' => 'theme_userpoints_poll_action_admin_modify_form',
    ),
  );
  return $themes;
}

/**
 * Function for deleting a rule
 */
function userpoints_poll_action_admin_delete_rule($id) {
  $q = "DELETE FROM {userpoints_poll_action} WHERE id = %d";
  db_delete('userpoints_poll_action')
  ->condition('id', $id)
  ->execute();
  drupal_set_message(t('Rule deleted succesfully'));
  drupal_goto('admin/config/people/userpoints_poll_action');
}

/**
 * Validate the points field form for the forms
 */
function userpoints_poll_action_validate_points($item) {
  $num = $item['#value'];
  if (!is_numeric($num) || intval($num) <= 0 || ($num != intval($num))) {
    form_set_error($item['#name'], t('!Points must be a non-negative integer greater than 0', userpoints_translation()));
  }
}

/**
 * Validate the form for new rules (see if the rule already exists)
 */
function userpoints_poll_action_admin_add_form_validate($form, $form_state) {
  
  $result = db_query("SELECT COUNT(*) AS 'count' FROM {userpoints_poll_action} WHERE role_id = :role_id AND action = :action AND category = :category", array(':role_id' => $form_state['values']['role'], ':action' => $form_state['values']['action'], ':category' => $form_state['values']['category']))->fetchField();
  if (intval($result) > 0) {
    form_set_error('title', t('This rule already exists. If you want to change the amount of !points, edit it using the modify form instead of creating a new one', userpoints_translation()));
  }
}

/**
 * Saving the form for new rules
 */
function userpoints_poll_action_admin_add_form_submit($form, $form_state) {
  $q = "INSERT INTO {userpoints_poll_action} (role_id , action, category, points) VALUES ('%d', '%d', '%d', '%d')";
  $id = db_insert('userpoints_poll_action')
  ->fields(array(
    'role_id ' => $form_state['values']['role'],
    'action' => $form_state['values']['action'],
    'category' => $form_state['values']['category'],
    'points' => $form_state['values']['points'],
  ))
  ->execute();
  drupal_set_message(t('Rule saved succesfully'));
}

/**
 * Saving the message form
 */
function userpoints_poll_action_admin_message_form_submit($form, $form_state) {
  variable_set('userpoints_poll_action_display_custom_message', $form_state['values']['displayMessages']);
  variable_set('userpoints_poll_action_custom_message', $form_state['values']['customMessage']);
  drupal_set_message(t('Message options saved successfully'));
}

/**
 * Saving the modifications on existant rules
 */
function userpoints_poll_action_admin_modify_form_submit($form, $form_state) {
  $rows = $form_state['values']['modify'];
  foreach ($rows as $row) {
    $q = "SELECT COUNT(*) AS 'count' FROM {userpoints_poll_action} WHERE role_id = %d AND action = %d AND category = %d AND id <> %d";
    $count = db_query("SELECT COUNT(*) AS 'count' FROM {userpoints_poll_action} WHERE role_id = :role_id AND action = :action AND category = :category AND id <> :id", array(':role_id' => $row['role'], ':action' => $row['action'], ':category' => $row['category'], ':id' => $row['id']))->fetchField();
    if ($count > 0) {
      drupal_set_message(t('A change was not saved because there were duplicates found: duplicate rules can result in less predictable behavior, delete a rule and make a new one if necessary'));
    }
    else {
      $q = "UPDATE {userpoints_poll_action} SET role_id = %d, action = %d, category = %d, points = %d WHERE id = %d";
      // TODO Please review the conversion of this statement to the D7 database API syntax.
      /* db_query($q, $row['role'], $row['action'], $row['category'], $row['points'], $row['id']) */
      db_update('userpoints_poll_action')
  ->fields(array(
        'role_id' => $row['role'],
        'action' => $row['action'],
        'category' => $row['category'],
        'points' => $row['points'],
      ))
  ->condition('id', $row['id'])
  ->execute();
    }
  }
  drupal_set_message(t('Rules updated.'));
}

/**
 * Actually perform the points deduction when validating a poll vote
 */
function userpoints_poll_action_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "poll_view_voting") {
    $form['#validate'][] = "_userpoints_poll_action_poll_validate";
    // Attempt to call our submit handler first
    if (empty($form['vote']['#submit'])) {
      //$form['#submit'] = array();
    }
    //array_unshift($form['vote']['#submit'], "_userpoints_poll_action_poll_submit");
    $form['vote']['#submit'][] =  "_userpoints_poll_action_poll_submit";
  }
}

function _userpoints_poll_action_poll_validate($form, $form_state) {
  include_once('userpoints_poll_action.inc');
  $totalCost = array();
  $status = _get_userpoints_poll_action_status(USERPOINTS_POLL_ACTION_VOTE, $totalCost);
  if (!empty($status)) {
    form_set_error('vote');
    // Display the custom message if it is set
    $custom_message = userpoints_poll_action_translate_message(variable_get('userpoints_poll_action_custom_message', ''));
    if ($custom_message != '') {
      form_set_error('options_custom_message', $custom_message);
    }
    $default_display = variable_get('userpoints_poll_action_display_messages', true);
    foreach ($status as $k => $s) {
      // A little odd, but we want to uniquely make sure each error gets set, even if we don't have an element to set it against
      // Is there a better way to do this?
      form_set_error('vote' . $s, $s);
    }
    // Invoke the failure hook for rules
    global $user;
    $poll = $form['#node'];
    _userpoints_poll_action_invoke_rule('failure', $user, $poll);
  }
}

function _userpoints_poll_action_poll_submit($form, $form_state) {
  include_once('userpoints_poll_action.inc');
  global $user;
  $totalCost = array();
  $poll = $form['#node'];
  $result = _userpoints_poll_action_payment($poll, USERPOINTS_POLL_ACTION_VOTE);
  // They should have enough points by now, but we can't really do anything if they don't...
  if (!empty($result)) {
    // Invoke the success-yet-failure-on-our-part hook for rules
    _userpoints_poll_action_invoke_rule('semi-success', $user, $poll); 
  }
  else {
    // If there was no error, don't do anything except fire the success rule off
    _userpoints_poll_action_invoke_rule('success', $user, $poll); 
  }
}
