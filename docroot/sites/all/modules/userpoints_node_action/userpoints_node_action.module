<?php

/**
 * @file
 * This module allows admins to configure rules for user roles to have to pay userpoints to change the status options of certain node types.
 * Example: All users with a given role such as "advertiser" could have to pay 10 userpoints to publish their ad, and an additional 20 to make it sticky.
 */
 
include_once('userpoints_node_action.inc');

/**
 * Implementation of hook_help().
 */ 
function userpoints_node_action_help($path, $arg) {
  if ($path == 'admin/config/people/userpoints_node_action' ) {
    return (t('This module allows admins to configure rules for user roles to have to pay !points to change the status options of certain node types.<br/>Example: All users with a given role such as "advertiser" could have to pay 10 !points to publish their ad, and an additional 20 to make it sticky. It does not cost users to unset these actions though (seems like a very unnecessary use case), so it\'s free to unpublish or unsticky a node. Nodes that are published with another user as the author will use the author\'s points for costing.', userpoints_translation()));
  }
}

/**
 * Implementation of hook_menu().
 */
function userpoints_node_action_menu() {
  $items = array();
  $items['admin/config/people/userpoints_node_action'] = array(
    'title' => t('!Points Node Action', userpoints_translation()),
    'description' => t('Settings for the !points cost of performing certain node actions per role.', userpoints_translation()),
    'page callback' => 'userpoints_node_action_admin',
    'access arguments' => array('administer userpoints'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin menu
 */
function userpoints_node_action_admin() {
  $op = arg(4);
  $rid = arg(5);
  // Arguments to delete something
  if (!empty($op) && !empty($rid) && $op == 'delete' && is_numeric($rid)) {
    userpoints_node_action_admin_delete_rule($rid);
  }
  include_once('userpoints_node_action.inc');
  $admin_form = drupal_get_form('userpoints_node_action_admin_add_form');
  $message_form = drupal_get_form('userpoints_node_action_admin_message_form');
  $modify_form = drupal_get_form('userpoints_node_action_admin_modify_form');
  $output = drupal_render($admin_form) . drupal_render($message_form) . drupal_render($modify_form);
  return $output;
}

/**
 * Implementation for hook theme
 */
function userpoints_node_action_theme() {
  $themes = array(
    'userpoints_node_action_admin_modify_form' => array(
      'render element' => 'form',
      'function' => 'theme_userpoints_node_action_admin_modify_form',
    ),
  );
  return $themes;
}

/**
 * Function for deleting a rule
 */
function userpoints_node_action_admin_delete_rule($id) {
  $q = "DELETE FROM {userpoints_node_action} WHERE id = %d";
  db_delete('userpoints_node_action')
  ->condition('id', $id)
  ->execute();
  drupal_set_message(t('Rule deleted succesfully'));
  drupal_goto('admin/config/people/userpoints_node_action');
}

/**
 * Validate the points field form for the forms
 */
function userpoints_node_action_validate_points($item) {
  $num = $item['#value'];
  if (!is_numeric($num) || intval($num) <= 0 || ($num != intval($num))) {
    form_set_error($item['#name'], t('!Points must be a non-negative integer greater than 0', userpoints_translation()));
  }
}

/**
 * Validate the form for new rules (see if the rule already exists)
 */
function userpoints_node_action_admin_add_form_validate($form, $form_state) {
  /*
  $q = "SELECT COUNT(*) AS 'count' FROM {userpoints_node_action} WHERE role_id = '%d' AND action = '%s' AND pubtype = '%s' AND category = %d";
  $result = db_query("SELECT COUNT(*) AS 'count' FROM {userpoints_node_action} WHERE role_id = :role_id AND action = :action AND pubtype = :pubtype AND category = :category", array(':role_id' => $form_state['values']['role'], ':action' => $form_state['values']['action'], ':pubtype' => $form_state['values']['pubtype'], ':category' => $form_state['values']['category']))->fetchField();
  if (intval($result) > 0) {
    form_set_error('title', t('This rule already exists. If you want to change the amount of !points, edit it using the modify form instead of creating a new one', userpoints_translation()));
  }
  */
}

/**
 * Saving the form for new rules
 */
function userpoints_node_action_admin_add_form_submit($form, $form_state) {
  $q = "INSERT INTO {userpoints_node_action} (role_id , action, pubtype, category, points) VALUES ('%s', '%s', '%s', '%d', '%d')";
  $id = db_insert('userpoints_node_action')
  ->fields(array(
    'role_id ' => _userpoints_node_action_generate_delimited_data($form_state['values']['role']),
    'action' => $form_state['values']['action'],
    'pubtype' => _userpoints_node_action_generate_delimited_data($form_state['values']['pubtype']),
    'category' => $form_state['values']['category'],
    'points' => $form_state['values']['points'],
  ))
  ->execute();
  drupal_set_message(t('Rule saved successfully'));
}

/**
 * Saving the message form
 */
function userpoints_node_action_admin_message_form_submit($form, $form_state) {
  variable_set('userpoints_node_action_display_custom_message', $form_state['values']['displayMessages']);
  variable_set('userpoints_node_action_custom_message', $form_state['values']['customMessage']);
  drupal_set_message(t('Message options saved successfully'));
}

/**
 * Implementation of hook_node_type_delete
 * Delete all rules related to the node type being deleted
 */
function userpoints_node_action_node_type_delete($info) {
  $properType = _userpoints_node_action_generate_delimited_data(array($info->type));
  $counter = db_query("SELECT COUNT(*) AS count FROM {userpoints_node_action} WHERE pubtype LIKE :pubtype", array(':pubtype' => "%" . $properType . "%"))->fetchField();
  if ($counter > 0) {
    //$q = "DELETE FROM {userpoints_node_action} WHERE pubtype = '%s'";
    $result = db_delete('userpoints_node_action')
    ->condition('pubtype', $properType)
    ->execute();
    $rules = userpoints_node_action_get_all();
    if (!empty($rules)) {
      foreach ($rules as $rule) {
        if (strpos($rule['str_pubtype'], $properType) !== false) {
          db_update('userpoints_node_action')
          ->fields(array(
            'pubtype' => str_replace($properType, USERPOINTS_NODE_ACTION_DELIMITER, $rule['str_pubtype']),
          ))
          ->condition('id', $rule['id'])
          ->execute();
        }
      }
    }
    drupal_set_message(sprintf(t('%d "!points node action" rules deleted or modified.', userpoints_translation()), $counter));
  }
}

/**
 * Saving the modifications on existant rules
 */
function userpoints_node_action_admin_modify_form_submit($form, $form_state) {
  $rows = $form_state['values']['modify'];
  foreach ($rows as $row) {
    //$q = "UPDATE {userpoints_node_action} SET role_id = '%s', pubtype = '%s', action = '%s', category = %d, points = %d WHERE id = %d";
    db_update('userpoints_node_action')
    ->fields(array(
      'role_id' => _userpoints_node_action_generate_delimited_data($row['role']),
      'pubtype' => _userpoints_node_action_generate_delimited_data($row['pubtype']),
      'action' => $row['action'],
      'category' => $row['category'],
      'points' => $row['points'],
    ))
    ->condition('id', $row['id'])
    ->execute();
  }
  drupal_set_message(t('Rules updated.'));
}


/**
 * Implements hook_node_validate().
 */
function userpoints_node_action_node_validate($node, $form, &$form_state) {
  global $user;
  if (empty($node->nid)) {
    $account = $user;
  }
  else {
    $account = user_load($node->uid);
  }
  
  // Must aggregate cost, if they can't do all, don't do any
  $totalCost = array();
  $options = _userpoints_node_action_get_actions();
  foreach ($options as $actionID => $actionName) {
    if ((!empty($node->$actionID) && $node->$actionID == 1) || ($actionID == USERPOINTS_NODE_ACTION_CREATE)) {
      // Users shouldn't have to pay again if they're just editing the node, and didn't change the action.
      if (empty($node->nid) || _userpoints_node_action_has_status_changed($node->nid, $actionID)) {
        $status = _userpoints_node_action_get_status($account, $node->type, $actionID, $totalCost);
        if (!empty($status)) {
          form_set_error('options');
          // Display the custom message if it is set
          $custom_message = userpoints_node_action_translate_message(variable_get('userpoints_node_action_custom_message', ''));
          if ($custom_message != '') {
            form_set_error('options_custom_message', $custom_message);
          }
          foreach ($status as $k => $s) {
            // A little odd, but we want to uniquely make sure each error gets set, even if we don't have an element to set it against
            // Is there a better way to do this?
            form_set_error('options' . $s, $s);
          }
          // Invoke the failure hook for rules
          _userpoints_node_action_invoke_rule('failure', $account, $node); 
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function userpoints_node_action_node_presave($node) {
  global $user;
  if (empty($node->nid)) {
    $account = $user;
  }
  else {
    $account = user_load($node->uid);
  }
  
  $options = _userpoints_node_action_get_actions();
  foreach ($options as $actionID => $actionName) {
    if ((!empty($node->$actionID) && $node->$actionID == 1) || ($actionID == USERPOINTS_NODE_ACTION_CREATE)) {
      // But again, users shouldn't pay again if they're just editing the node, and didn't change the action.
      if (empty($node->nid) || _userpoints_node_action_has_status_changed($node->nid, $actionID)) {
        $result = _userpoints_node_action_payment($account, $node, $actionID);
        // They should have enough points by now, but we can undo settings if it doesn't work.
        if (!empty($result)) {
          foreach ($result as $r) {
            if ($r['status'] == false) {
              $node->$actionID = 0;
            }
          }
          // Invoke the failure hook for rules
          _userpoints_node_action_invoke_rule('failure', $account, $node); 
        }
        else {
          // If there was no error, don't do anything except fire the success rule off
          _userpoints_node_action_invoke_rule('success', $account, $node); 
        }
      }
    }
  }
}

/**
 * Custom function to allow developers to manually check conditions before form execution
 * $account => A standard Drupal user object
 * $node_type => A node type to check against
 * $actions => An array of actions (machine name) that needs to be checked against
 * Returns 0 on an error, an empty array if everything is fine, and an array of invalid messages otherwise
 */
function userpoints_node_action_check_conditions($account, $node_type, $actions) {
  if (empty($account) || empty($node_type) || empty($actions) || !is_array($actions)) {
    return 0;
  }
  $totalCost = array();
  $messages = array();
  $options = _userpoints_node_action_get_actions();
  
  foreach ($actions as $action) {
    if (!empty($options[$action])) {
      $status = _userpoints_node_action_get_status($account, $node_type, $action, $totalCost);
      if (!empty($status)) {
        $messages[] = $status;
      }
    }
  }
  
  return $messages;
}
