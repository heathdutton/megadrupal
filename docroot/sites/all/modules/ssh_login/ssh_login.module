<?php
/**
 * @file
 * This module overrides the authentification and attempts to use SSH to
 * authentificate.
 */

@include_once 'Net/SSH2.php';

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function ssh_login_help($path, $arg) {
  switch ($path) {
    case "admin/help#ssh_login":
      return '<p>' . t("Enables to authentificate via SSH") . '</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function ssh_login_menu() {
  $items = array();

  $items['admin/config/people/ssh'] = array(
    'title' => 'SSH login',
    'description' => 'Configure SSH login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ssh_login_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/people/ssh/config'] = array(
    'title' => 'SSH login',
    'description' => 'Configure SSH login',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/people/ssh/test'] = array(
    'title' => 'Test',
    'description' => 'Test SSH connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ssh_login_test_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_config_form().
 *
 * called by drupal_get_form in hook_menu.
 */
function ssh_login_config_form($form, &$form_state) {
  $form['ssh_login_server'] = array(
    '#type' => 'textfield',
    '#title' => t('SSH server'),
    '#default_value' => variable_get('ssh_login_server', 'localhost'),
    '#description' => t('IP address or hostname of the SSH server'),
    '#required' => TRUE,
  );

  $form['ssh_login_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#default_value' => variable_get('ssh_login_port', 22),
    '#description' => t('The Port on which the SSH server is listening'),
    '#required' => TRUE,
    '#size' => 3,
    '#maxlength' => 5,
  );

  $options = array();
  $default_option = 0;

  $ssh_library_installed =  ssh_login_test_libraries();

  if ( $ssh_library_installed[0] ) {
    $options[0] = 'php_ssh2';
  }

  if ( $ssh_library_installed[1] ) {
    $options[1] = 'phpseclib';
    // If phpseclib exists, use it by default.
    $default_option = 1;
  }

  if ( !empty( $options ) ) {
    $form['ssh_library'] = array(
      '#type' => 'radios',
      '#title' => t('SSH library'),
      '#default_value' => variable_get('ssh_library', 0),
      '#description' => t('Which SSH library to use'),
      '#required' => TRUE,
      '#options' => $options,
    );
  }
  else {
    drupal_set_message( t( 'At least one SSH library must be installed.') , 'error');
  }

  return system_settings_form($form);
}

/**
 * Implements ssh_login_test_libraries()
 */
function ssh_login_test_libraries() {
  $ssh_library_installed = array( 0 => FALSE, 1 => FALSE );

  // Check for php_ssh2
  if ( function_exists( "ssh2_connect" ) ) {
    $ssh_library_installed[0] = TRUE;
  }


  // Check for phpseclib
  if ( class_exists( "Net_SSH2" ) ) {
    $ssh_library_installed[1] = TRUE;
  }

  return $ssh_library_installed;
}


/**
 * Implements hook_test_form().
 *
 * called by drupal_get_form in hook_menu.
 */
function ssh_login_test_form($form, &$form_state) {
  $form['ssh_login_test_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#required' => TRUE,
  );
  $form['ssh_login_test_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#required' => TRUE,
  );
  $form['ssh_login_test_submit'] = array(
    '#type' => 'submit',
    '#value' => 'save',
  );
  return $form;
}

/**
 * Implements hook_test_form_submit().
 */
function ssh_login_test_form_submit( $form, &$form_state ) {
  $username = $form_state['values']['ssh_login_test_username'];
  $password = $form_state['values']['ssh_login_test_password'];
  ssh_login_verify_user( $username, $password, TRUE );
}

/**
 * Implements ssh_login_verify_user()
 */
function ssh_login_verify_user( $username, $password, $test=FALSE ) {
  // Check for a SSH Library
  $ssh_library_installed = ssh_login_test_libraries();

  if ( !($ssh_library_installed[0] or  $ssh_library_installed[1] ) ) {
    drupal_set_message( t('SSH login needs an installed SSH library.'), 'error' );
    return FALSE;
  }

  $server = variable_get('ssh_login_server', 'localhost');
  $port =  (int)variable_get('ssh_login_port', 22);

  $library = (int)variable_get('ssh_library', -1); // -1 is not used as a library.

  switch ( $library ) {
    case 0: // php_ssh2
      return ssh_login_php_ssh2_validate($username, $password, $server, $port, $test);
      break;
    case 1: // phpseclib
      return ssh_login_phpseclib_validate($username, $password, $server, $port, $test);
      break;
  }
}

/**
 * Implements ssh_login_php_ssh2_validate().
 *
 * Uses php_ssh2 to validate the user.
 */
function ssh_login_php_ssh2_validate($username, $password, $server, $port, $test = FALSE) {
  if ( !( $connection = @ssh2_connect( $server, $port ) ) ) {
    drupal_set_message(t('Could not connect to @server on port @portl', array('@server' => $server, '@port' => $port)), 'error');
    return FALSE;
  }
  else {
    if ($test) drupal_set_message(t('Successfully connected to @server on port @port.', array('@server' => $server, '@port' => $port)), 'status');
    if (!@ssh2_auth_password($connection, $username, $password)) {
      if ($test) drupal_set_message(t('Failed to authenticate.'), 'error');
      return FALSE;
    }
    else {
      if ($test) drupal_set_message(t('Sucessfully authenticated username @username', array('@username' => $username)), 'status');
      return TRUE;
    }
  }
}


/**
 * Implements ssh_login_phpseclib_validate().
 *
 * Uses phpseclib to validate the user.
 */

function ssh_login_phpseclib_validate( $username, $password, $server, $port, $test = FALSE ) {
  $ssh = new Net_SSH2( $server . ':' . $port);
  if ( !$ssh->login( $username, $password ) ) {
    if ($test) drupal_set_message(t('Failed to authenticate.'), 'error');
    return FALSE;
  }
  else {
    if ($test) drupal_set_message( t('Sucessfully authenticated username @username', array('@username' => $username)), 'status' );
    return TRUE;
  }
}



/**
 * Implements hook_form_alter().
 *
 * change validation behavior.
 */
function ssh_login_form_alter( &$form, $form_state, $form_id ) {
  if ( $form_id == 'user_login_block' )
    $form['#validate'] = array(  'user_login_name_validate', 'user_login_authenticate_validate', 'ssh_login_login_validate', 'user_login_final_validate');
}

/**
 * Implements hook_login_validate().
 */
function ssh_login_login_validate( $form, &$form_state ) {
  $username = $form_state['values']['name'];
  $password = $form_state['values']['pass'];

  if ( ssh_login_verify_user( $username, $password ) ) {
    user_external_login_register( $username, 'ssh_login' );
    $account = user_external_load($username);
    $form_state['uid'] = $account->uid;
  }
}

