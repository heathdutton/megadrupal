<?php
/**
 * @file
 * Keep track of access to specific content for specific users.
 */


/**
 * Implements hook_menu().
 */
function premium_access_menu() {
  $items = array();
  $items['admin/config/people/premium_access'] = array(
    'title'             => t('Premium Content Access'),
    'description'       => t('Keep track of access to specific content for specific users.'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('premium_access_admin_settings'),
    'access arguments'  => array('access administration pages'),
    'file'              => 'premium_access.admin.inc',
  );
  return $items;
}


/**
 * Register access to content when eloqua form submits.
 */
function premium_access_button_form_submit($form, &$form_state) {
  // Premium forms can appear on non-node pages.
  if (isset($form_state['input']['premium_access_nid'])) {

    // Denote access to specific piece of content in user session.
    $premium_nid = $form_state['input']['premium_access_nid'];
    _premium_access_setflag($premium_nid);

    if (module_exists('rules')) {
      global $user;
      $profile = profile2_load_by_user($user, 'about_you');
      $node = node_load($premium_nid);
      rules_invoke_event_by_args('premium_access_granted', array(
        'user' => $user,
        'profile' => $profile,
        'node' => $node,
      ));
    }
  }
}


/**
 * Register access to content when eloqua form submits.
 */
function premium_access_button_anon_form_submit($form, &$form_state) {
  // Premium forms can appear on non-node pages.
  if (isset($form_state['input']['premium_access_nid'])) {

    // Denote access to specific piece of content in user session.
    $premium_nid = $form_state['input']['premium_access_nid'];
    _premium_access_setflag($premium_nid);
  }

  // Use flood control to avoid client-side abuse. Three per 24 hours.
  $flood_window = variable_get('premium_access_reg_delay_flood_window', 1440) * 60;
  flood_register_event('premium_access_anon', $flood_window, session_id());
}


/**
 * Implements hook_block_info().
 *
 * Block to present stand-alone single-button Eloqua form, which registers
 * having access to this node.
 */
function premium_access_block_info() {
  $blocks['premium_button'] = array(
    'info' => t('Premium Content Access Form Button: Authenticated'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * Show the single-button Eloqua form block.
 */
function premium_access_block_view($delta = '') {
  $node = menu_get_object();
  $block = array();

  switch ($delta) {
    case 'premium_button':
      $block['subject'] = NULL;
      if (_premium_access_block_visibility($delta)) {
        $block['content'] = drupal_get_form('premium_access_button_form', $node);
      }
      else {
        $block['content'] = FALSE;
      }
      break;
  }

  return $block;
}


/**
 * Premium Access form for authenticated users.
 *
 * Should have CRM fields added.
 */
function premium_access_button_form($form, &$form_state, $node = FALSE) {
  $node_id = (is_object($node) && is_numeric($node->nid)) ? $node->nid : '';

  // Store the node in the session.
  // Can be called on non-nodes for contact/sheer_id.
  if (!empty($node_id)) {
    $form['premium_access_nid'] = array(
      '#type' => 'hidden',
      '#value' => $node_id,
    );
  }

  return $form;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function premium_access_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $node = $node = tableau_load_node_on_form($form_state, $form_id);

  // Place premium indicator in form.
  if (isset($node->nid)) {
    $form['premium_access_nid'] = array(
      '#type' => 'hidden',
      '#value' => $node->nid,
    );
  }
}


/**
 * Should the block be showing?
 *
 * @param {string} $delta
 *   Block delta name.
 */
function _premium_access_block_visibility($delta) {
  global $user;
  // Do not show premium button to anonymous users.
  if (!$user->uid == 0) {
    // @ toto Check for previous submission and remove.
    // Currently done via content plugin.
    return TRUE;
  }
}


/**
* Implements hook_context_plugins().
*/
function premium_access_context_plugins() {
  $plugins = array();
  $plugins['premium_access_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'premium_access'),
      'file' => 'premium_access_condition.context.inc',
      'class' => 'premium_access_condition',
      'parent' => 'context_condition',
    ),
  );

  return $plugins;
}

/**
* Implements hook_context_registry().
*/
function premium_access_context_registry() {
  return array(
    'conditions' => array(
      'premium_access_allowed' => array(
        'title' => t('Premium Access Submitted'),
        'plugin' => 'premium_access_condition',
      ),
    ),
  );
}


/*
 * Trigger testing on node view.
 */
function premium_access_node_view($node, $view_mode, $langcode) {
  // Note the "and" NOT an &&
  if ($plugin = context_get_plugin('condition', 'premium_access_allowed') and $node == menu_get_object()) {
    // @todo May need view mode here for teasers someday.
    $plugin->execute($node);
  }
}


/**
 * Set the user/node flag.
 */
function _premium_access_setflag($nid, $uid = NULL) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  $_SESSION['premium_access'][$nid] = time();
}


/**
 * Find the status of the user/node flag.
 */
function _premium_access_getflag($nid) {
  $time_allowed = variable_get('premium_access_time', FALSE);
  // Maybe set.
  if (isset($_SESSION['premium_access'][$nid])) {
    // If this feature is being used check for time.
    if ($time_allowed) {
      $elapsed = time() - $_SESSION['premium_access'][$nid];
      if ($elapsed < ($time_allowed * 60)) {
        return 1;
      }
      else {
        return 0;
      }
    }
    else {
      return 1;
    }
  }
  else {
    return 0;
  }
}
