<?php

use Drupal\quizz_text\ShortAnswerQuestion;

/**
 * Test class for short answer.
 */
class ShortAnswerTestCase extends QuizTestCase {

  protected $questionHandlers = array('short_answer');
  protected $extraModules = array('quizz_text');
  protected $extraAdminPermissions = array('score any quiz');

  public static function getInfo() {
    return array(
        'name'        => t('Short answer'),
        'description' => t('Test cases for Short answers question type.'),
        'group'       => 'Quiz question',
    );
  }

  /**
   * Test adding and taking a truefalse question.
   */
  private function createQuizQuestion($settings = NULL) {
    return $this->drupalCreateQuestion($settings + array(
          'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_INSENSITIVE_MATCH,
          'correct_answer'            => 'SA 1 correct answer.',
          'type'                      => 'short_answer',
          'title'                     => 'SA 1 title',
          'body'                      => 'SA 1 body text.',
    ));
  }

  public function testWrapper() {
    $this->checkGradeAnswerInsensitive();
    $this->checkGradeAnswerManualFeedback();
    $this->checkGradeAnswerRegex();
    $this->checkGradeAnswerSensitive();

    // Just make sure there's no warnings
    $this->drupalLogin($this->admin);
    $this->drupalGet('admin/quizz/reports/score-short-answer');
    $this->assertText('Score short answer questions');
  }

  /**
   * Test case insensitive graded questions.
   */
  private function checkGradeAnswerInsensitive() {
    $question = $this->createQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_INSENSITIVE_MATCH,
        'correct_answer'            => 'the Zero One Infinity rule',
    ));

    $quiz = $this->linkQuestionToQuiz($question);

    // Login as our privileged user.
    $this->drupalLogin($this->user);

    // Test incorrect.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer]" => 'This is an incorrect answer.'), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer]" => 'the Zero One Infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer]" => 'the zero one Infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test case sensitive graded questions.
   */
  private function checkGradeAnswerSensitive() {
    $quiz = $this->drupalCreateQuiz(array(
        'review_options' => array('end' => array('score' => 'score')),
    ));

    $question = $this->createQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MATCH,
        'correct_answer'            => 'the Zero One Infinity rule',
    ));
    $this->linkQuestionToQuiz($question, $quiz);

    // Login as non-admin
    $this->drupalLogin($this->user);

    // Test incorrect.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer]" => 'the zero one Infinity rule'), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer]" => 'the Zero One Infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test regex graded questions.
   */
  private function checkGradeAnswerRegex() {
    $quiz = $this->drupalCreateQuiz();

    $question = $this->createQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_REGEX,
        'correct_answer'            => '/Zero One Infinity/i',
    ));
    $this->linkQuestionToQuiz($question, $quiz);

    // Test incorrect.
    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer]" => 'um some rule, I forget'), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer]" => 'the answer is the zero one infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test manually graded questions.
   *
   * Note: we use two questions here to make sure the grading form is handled
   * correctly.
   */
  private function checkGradeAnswerManualFeedback() {
    $quiz = $this->drupalCreateQuiz();

    $question_1 = $this->createQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MANUAL,
        'correct_answer'            => 'the Zero One Infinity rule',
    ));
    $this->linkQuestionToQuiz($question_1, $quiz);

    $question_2 = $this->createQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MANUAL,
        'correct_answer'            => 'The number two is ridiculous and cannot exist',
    ));
    $this->linkQuestionToQuiz($question_2, $quiz);

    // Test correct.
    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question_1->qid][answer]" => 'the answer is the zero one infinity rule'), t('Next'));
    $this->drupalPost(NULL, array("question[$question_2->qid][answer]" => 'the number two really is ridiculous'), t('Finish'));
    $this->assertText('Your score: 0%');
    // Strange behavior - extra spaces in HTML.
    //$this->assertText('Score ? of 10');
    $this->assertText('This answer has not yet been scored.');
    $this->assertNoFieldByName('0[score]');
    $this->assertNoFieldByName('1[score]');
    $this->assertNoFieldByName('0[answer_feedback][value]');
    $this->assertNoFieldByName('1[answer_feedback][value]');
    $this->assertNoRaw(t('Save score'));
    $result_url = $this->getUrl();

    // Test grading the question, provide feedback.
    $this->drupalLogin($this->admin);
    $this->drupalGet($result_url);
    $this->assertFieldByName('0[score]');
    $this->assertFieldByName('1[score]');
    $this->drupalPost(NULL, array(
        "0[score]"                   => 2,
        "1[score]"                   => 3,
        "0[answer_feedback][value]"  => 'Feedback for answer 1.',
        "1[answer_feedback][value]"  => 'Feedback for answer 2.',
        "0[answer_feedback][format]" => 'filtered_html',
        "1[answer_feedback][format]" => 'filtered_html',
      ), t('Save score'));
    $this->assertText('The scoring data you provided has been saved.');

    // Test the score is visible to the user.
    $this->drupalLogin($this->user);
    $this->drupalGet($result_url);
    $this->assertText('You got 5 of 10 possible points.');
    $this->assertText('Your score: 50%');
    $this->assertText('Feedback for answer 1.');
    $this->assertText('Feedback for answer 2.');
  }

}
