<?php

/**
 * @file
 * A text filter for easy interlinking to nodes.
 */

/**
 * Implements hook_filter_info().
 */
function interlink_filter_info() {
  $return = array();
  $return['interlink_node'] = array(
    'title' => t('Interlink to nodes'),
    'settings callback' => 'interlink_filter_node_settings',
    'tips callback' => 'interlink_filter_node_tips',
    'process callback' => 'interlink_filter_node_process',
    'default settings' => array(
      'node_types' => array(),
    ),
  );
  return $return;
}

/**
 * Settings callback for interlink_node filter.
 */
function interlink_filter_node_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $elements = array();
  $options = array();
  foreach (node_type_get_types() as $node_type) {
    // TODO: I18n support.
    $options[$node_type->type] = check_plain($node_type->name);
  }

  $elements['node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types allowed for interlinking'),
    '#options' => $options,
    '#default_value' => $filter->settings['node_types'],
    '#description' => t('Interlink will be available for all node types if none is selected.'),
  );

  // TODO: Multiple and configurable prefixes/suffixes.

  return $elements;
}

/**
 * Tips callback for interlink_node filter.
 */
function interlink_filter_node_tips($filter, $format, $long) {
  if ($long) {
    // TODO: May be appended with the list of enabled node types.
    return t('References like %example will be replaced to links like !link.', array('%example' => '[#123]', '!link' => l('#123', 'node/123')));
  }
  else {
    return t('References like %example will be replaced to links like !link.', array('%example' => '[#123]', '!link' => l('#123', 'node/123')));
  }
}

/**
 * Process callback for interlink_node filter.
 */
function interlink_filter_node_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $cache = &drupal_static(__FUNCTION__);
  // Replace [#123/456] type deeplinks to comments first.
  if (preg_match_all('/\[#[0-9]+\/[0-9]+\]/', $text, $matches)) {
    $node_types = array_filter($filter->settings['node_types']);
    $search = $replacement = array();
    foreach ($matches[0] as $match) {
      list($nid, $count) = explode('/', substr($match, 2, -1));
      $node = node_load($nid);
      // Do not replace the interlink to link if there's no such node.
      if (!$node) {
        continue;
      }
      // Do not replace the interlink to link if node type filtering is on and
      // the node's type is not enabled.
      if ($node_types && !isset($node_types[$node->type])) {
        continue;
      }
      $search["$nid/$count"] = "[#$nid/$count]";
      // Look up the comment IDs for this node, but only once.
      if (!isset($cache[$nid])) {
        $cache[$nid] = array();
        $result = db_select('comment', 'c')
          ->fields('c', array('cid'))
          ->condition('nid', $nid)
          ->orderBy('thread')
          ->execute();
        foreach ($result as $cid) {
          $cache[$nid][] = $cid->cid;
        }
      }
      // Not adding the node title to the link to avoid information disclosure,
      // which may happen in the following case:
      // 1. The site is equipped with node access like Organic Groups.
      // 2. The attacker has access to only one node and a text format which
      // has this filter turned on.
      // 3. The attacker submits a node/comment/whatever with the text format
      // with this filter in it, and puts some hundreds of possible node IDs
      // to it.
      // 4. The filter cannot check node access since its results are cached, so
      // it returns all the node titles the user does NOT have access to.
      // The other solution would be disabling caching for this filter, but this
      // would have serious performance issues.
      $replacement[$nid] = l("#$nid/$count", 'node/' . $nid, array('fragment' => 'comment-' . $cache[$nid][$count - 1]));
    }
    if ($search) {
      $text = str_replace($search, $replacement, $text);
    }
  }
  // Replace [#123] type deeplinks to nodes second.
  if (preg_match_all('/\[#[0-9]+\]/', $text, $matches)) {
    $node_types = array_filter($filter->settings['node_types']);
    $search = $replacement = array();
    foreach ($matches[0] as $match) {
      $nid = substr($match, 2, -1);
      $node = node_load($nid);
      // Do not replace the interlink to link if there's no such node.
      if (!$node) {
        continue;
      }
      // Do not replace the interlink to link if node type filtering is on and
      // the node's type is not enabled.
      if ($node_types && !isset($node_types[$node->type])) {
        continue;
      }
      $search[$nid] = '[#' . $nid . ']';
      // Not adding the node title to the link to avoid information disclosure,
      // see above.
      $replacement[$nid] = l('#' . $nid, 'node/' . $nid);
    }
    if ($search) {
      $text = str_replace($search, $replacement, $text);
    }
  }
  return $text;
}

/**
 * Implements hook_preprocess_comment().
 *
 * @see http://drupal.stackexchange.com/a/4776
 */
function interlink_preprocess_comment(&$vars) {
  $show_subjects = &drupal_static(__FUNCTION__);
  if (!isset($show_subjects[$vars['node']->type])) {
    $show_subjects[$vars['node']->type] = variable_get('comment_subject_field_' . $vars['node']->type, 0);
  }
  $posts_per_page = variable_get('comment_default_per_page_' . $vars['node']->type, 50);

  $page_number = !empty($_GET['page']) ? $_GET['page'] : 0;
  if (!$page_number) {
    $page_number = 0;
  }

  $linktext = '#' . (($page_number * $posts_per_page) + $vars['id']);
  if ($show_subjects[$vars['node']->type]) {
    $linktext .= ': ' . check_plain($vars['comment']->subject);
  }

  $options = array(
    'attributes' => array(
      'class' => array(
        'permalink',
      ),
      'rel' => 'bookmark',
    ),
    'fragment' => 'comment-' . $vars['comment']->cid,
    'language' => (object) array(
      'language' => 'interlink-nonexistent-language-to-prevent-active-class',
    ),
  );
  $vars['title'] = l($linktext, 'node/' . $vars['comment']->nid, $options);
}
