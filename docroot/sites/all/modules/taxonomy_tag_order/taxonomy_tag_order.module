<?php

/**
 * @file
 * Orderable Tags widget in a taxonomy term reference field using drag-n-drop
 * multi textfield.
 */

/**
 * Implements hook_menu().
 */
function taxonomy_tag_order_menu() {
  $items['taxonomy_tag_order/autocomplete'] = array(
    'title' => 'Autocomplete Taxonomy Term',
    'page callback' => 'taxonomy_tag_order_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function taxonomy_tag_order_field_widget_info() {
  return array(
    'taxonomy_tag_order_autocomplete' => array(
      'label' => t('Orderable tags (autocomplete)'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'size' => 60,
        'autocomplete_path' => 'taxonomy_tag_order/autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function taxonomy_tag_order_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $taxonomy_term = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $field['field_name'],
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => 255,
  );

  if (isset($items[$delta])) {
    $term = isset($items[$delta]['taxonomy_term']) ? $items[$delta]['taxonomy_term'] : taxonomy_term_load($items[$delta]['tid']);
    $taxonomy_term['#default_value'] = $term->name;
  }

  $element['taxonomy_term'] = $taxonomy_term;
  $element['#element_validate'] = array('taxonomy_tag_order_autocomplete_validate');

  return $element;
}

/**
 * Form element validate handler for taxonomy term autocomplete element.
 */
function taxonomy_tag_order_autocomplete_validate($element, &$form_state) {

  // Collect candidate vocabularies.
  $field = field_widget_field($element, $form_state);

  $vocabularies = array();
  foreach ($field['settings']['allowed_values'] as $tree) {
    if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
      $vocabularies[$vocabulary->vid] = $vocabulary;
    }
  }

  $term = $element['taxonomy_term']['#value'];
  if ($term) {
    // See if the term exists in the chosen vocabulary and return the tid;
    // otherwise, create a new 'autocreate' term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($term), 'vid' => array_keys($vocabularies)))) {
      $term = (array) array_pop($possibilities);
    }
    else {
      $vocabulary = reset($vocabularies);
      $term = array(
        'tid' => 'autocreate',
        'vid' => $vocabulary->vid,
        'name' => $term,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
    }
    $term['_weight'] = $element['_weight']['#value'];
  }

  form_set_value($element, $term, $form_state);
}

/**
 * Autocompletion callback.
 */
function taxonomy_tag_order_autocomplete($field_name, $search = '') {
  $field = field_info_field($field_name);

  $matches = array();

  if ($search != '') {
    // Part of the criteria for the query come from the field's own settings.
    $vids = array();
    $vocabularies = taxonomy_vocabulary_get_names();
    foreach ($field['settings']['allowed_values'] as $tree) {
      $vids[] = $vocabularies[$tree['vocabulary']]->vid;
    }

    $query = db_select('taxonomy_term_data', 't');
    $query->addTag('translatable');
    $query->addTag('term_access');

    // Select rows that match by term name.
    $term_matches = $query
            ->fields('t', array('tid', 'name'))
            ->condition('t.vid', $vids)
            ->condition('t.name', '%' . db_like(drupal_strtolower($search)) . '%', 'LIKE')
            ->range(0, 10)
            ->execute()
            ->fetchAllKeyed();

    foreach ($term_matches as $term_name) {
      $matches[$term_name] = check_plain($term_name);
    }
  }

  drupal_json_output($matches);
}
