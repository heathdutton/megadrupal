<?php

define('WHOIS_CID_PREFIX', 'whois-');

/**
 * Implements hook_permission().
 */
function whois_permission() {
  return array(
    'access whois' => array(
      'title' => t('access whois'),
      'description' => t('Access whois information'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function whois_theme() {
  return array(
    'whois_domain_status' => array(
      'template' => 'whois_domain_status',
      'arguments' => array(
        'address' => NULL,      // The address that was looked up
        'registered' => NULL,   // Boolean, weather the domain is already registered
        'result_data' => NULL,  // Full result data, optionally used in template to further customise the output
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function whois_menu() {
  $items = array();

  $items['whois'] = array(
    'title' => 'Whois lookup',
    'page callback' => 'whois_whois_page',
    'access arguments' => array('access whois'),
    'file' => 'whois.pages.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['admin/config/system/whois'] = array(
    'title' => 'Whois lookup',
    'description' => 'Configure Whois lookup output style, dynamic(AJAX) results, hourly threshold, and more.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('whois_settings'),
    'file' => 'whois.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 *
 * When using the status only output method combined with AJAX the result is shown inside the block, otherwise a new page is loaded.
 */
function whois_block_info() {
  $blocks['whois_mini'] = array(
    'info' => t('Whois mini form'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'whois
whois/*',
  );
  return $blocks;
} // end whois_block_info


/**
 * Implements hook_block_view().
 */
function whois_block_view($delta = '') {

  switch ($delta) {
    case 'whois_mini':
      $block['subject'] = 'Whois';
      $block['content'] = drupal_get_form('whois_whois_mini_form');
      break;
  }
  return $block;

} // end whois_block_view

/**
 * Implements hook_form().
 *
 * Produce a form for the mini_form block
 */
function whois_whois_mini_form() {
  $form = array();

  $form['whois_address'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#required' => TRUE,
  );
  $form['whois_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Lookup'),
  );

  // If it's set to Ajax lookup.
  if (variable_get('whois_enable_ajax', 1) && variable_get('whois_output_method', 'basic') == 'html_status') {
    // Append AHAH parameters.
    $form['whois_submit']['#ajax'] = array(
      'callback' => 'whois_ajax',
      'wrapper' => 'live-whois-preview',
      'event' => 'click'
    );
    // And also the wrapper element.
    $form['whois_results'] = array(
      '#markup'  => '<div id="live-whois-preview" class="whois-preview"></div>',
    );
  }

  return $form;
}

/*
 *  Wrapper around whois_whois_form_submit
 */
function whois_whois_mini_form_submit($form, &$form_state) {
  module_load_include('inc', 'whois', 'whois.pages');
  whois_whois_form_submit($form, $form_state);
  return;
}

function whois_ajax() {
  if (!user_access('access whois')) {
    return;
  }

  $output = '';
  $address = !empty($_POST['whois_address']) ? $_POST['whois_address'] : arg(1);

  if (isset($address)) {
    // Check for hourly threshold.
    if (flood_is_allowed('whois', variable_get('whois_hourly_threshold', 13))) {
      $output .= whois_display_whois($address);
    }
    else {
      $output .= t("You cannot do more than %number whois lookups per hour. Please try again later.", array('%number' => variable_get('whois_hourly_threshold', 13)));
    }
    $output = '<div id="live-whois-preview" class="whois-preview">' . $output . '</div>';

    // Avoid debug information(devel.module) from being added to the preview.
    $GLOBALS['devel_shutdown'] = FALSE;
    // Stop further processing and output requested data.
    //drupal_json_output(array('status' => TRUE, 'data' => $output));
  }
  return $output;
}

function whois_display_whois($address) {
  $data = '';
  $result = whois_get_whois($address);
  $allowed_tags = array('a', 'b', 'i', 'br');
  if ($result) {
    switch (variable_get('whois_output_method', 'html')) {
      case 'html':
        $data .= '<h3>' . t('Whois lookup for %address:', array('%address' => $address)) . '</h3>';
        if (!empty($result['whois_cached_on'])) {
          $data .= "<p id='whois_cached_on'>" . t('Cached on:') . ' ' . format_date($result['whois_cached_on'], 'large') . "</p>";
        }
        if (!empty($result['rawdata'])) {
          _whois_load_phpwhois();
          $utils = new utils;
          $data .= filter_xss(_whois_utf8_encode($utils->showHTML($result), $address), $allowed_tags);
        }
        else {
          $data .= _whois_handle_error($result, $address);
        }
        break;

      case 'html_status':
        if (!empty($result['rawdata'])) {
          $data .= theme('whois_domain_status', array(
            'address' => $address, // The address that was looked up
            'registered' => $result['regrinfo']['registered'] != 'no', // Boolean, weather the domain is already registered
            'result_data' => $result));
        }
        else {
          $data .= _whois_handle_error($result, $address);
        }
        break;

      case 'object':
        $data .= '<h3>' . t('Whois lookup for %address:', array('%address' => $address)) . '</h3>';
        if (!empty($result['rawdata'])) {
          _whois_load_phpwhois();
          $utils = new utils;
          $data .= '<pre>' . filter_xss(_whois_utf8_encode($utils->showObject($result), $address), $allowed_tags) . '</pre>';
        }
        else {
          $data .= _whois_handle_error($result, $address);
        }
        break;

      case 'basic': // 'basic' is the default
      default:
        $data .= '<h3>' . t('Whois lookup for %address:', array('%address' => $address)) . '</h3>';
        if (!empty($result['rawdata'])) {
          $data .= '<pre>' . check_plain(_whois_utf8_encode(implode("\n", $result['rawdata']), $address)) . '</pre>';
        }
        else {
          $data .= _whois_handle_error($result, $address);
        }
        break;
    }
  }

  return $data;
}

/**
 * Return the whois information for a given host.
 *
 * @param $address
 *   The address of the host to look up.
 *
 * @return
 *   An object describing the Whois result.
 */
function whois_get_whois($address) {
  $data = '';

  if ($address != '') {
    $result = _whois_cleanup_address($address);
    $address = $result['prepared_address'];

    // check cache first
    $cid = WHOIS_CID_PREFIX . $address;

    if (!empty($result['error_query']['errstr'])) {
      return $result;
    }
    elseif (variable_get('whois_cache_enable', 1) && ($cache = cache_get($cid)) && !empty($cache->data)) {
      if (variable_get('whois_log_watchdog', 1) && variable_get('whois_log_watchdog_cached', 0) ) {
        // Watchdog entry for lookup request if logging cached lookup also.
        watchdog('whois',
          'Whois lookup for: @address',
          array('@address' => $address),
          WATCHDOG_NOTICE, l('View', "whois/$address") . ' · ' . l('Address', "http://$address/"));
      }
      $cache->data['whois_cached_on'] = $cache->created;
      return $cache->data;
    }
    elseif (!_whois_library_available()) {
      drupal_set_message(t('There are problems with <em>Whois lookup</em> setup. Report to the website administrators promptly!', array('@status' => url('admin/reports/status'))), 'error');
    }
    else {
      _whois_load_phpwhois();
      $whois = new Whois();
      if (variable_get('whois_log_watchdog', 1)) {
        // Watchdog entry for lookup request.
        watchdog('whois',
          'Whois lookup for: %address',
          array('%address' => $address),
          WATCHDOG_NOTICE, l('View', "whois/$address") . ' · ' . l('Address', "http://$address/"));
      }
      $result = $whois->Lookup($address);

      if (empty($result) || empty($result['rawdata'])) {
        $result['error_query'] = $whois->Query;
      }
      elseif (variable_get('whois_cache_enable', 1)) {
        // cache results
        cache_set($cid, $result, "cache", variable_get("whois_cache_time", 86400));
      }

      return $result;
    }
  }
  return FALSE;
}

/**
 * Parse the user input to remove some obvious mistakes.
 * Elements like http:// are removed
 *
 * @param $address
 *   The user input
 *
 * @return
 *   The cleaned up domain or IP to look up
 */
function _whois_cleanup_address($address) {

  $r  = "^(?:(?P<scheme>\w+)://)?";             // e.g. http://
  $r .= "(?:(?P<login>\w+):(?P<pass>\w+)@)?";   // e.g. username:password@

  $r .= "(?:(?P<host>www\.(?=.*\..*)))?";    // e.g. www. the (?= is a lookahead to avoid removing www.com

  // The interresting part we would like to preserve
  // Matching very broad to avoid excluding things like IDN
  $r .= "(?P<domain>.+\.(?P<extension>.+))";  // e.g. www and example.com

  $r .= "(?::(?P<port>\d+))?";                  // e.g. :80
  $r .= "(?P<path>/[\w/]*(?P<file>\w+(?:\.\w+)?)?)?";   // e.g. /foo/bar/baz.html
  $r .= "(?:\?(?P<arg>[\w=&]+))?";              // e.g. ?foo=1&bar=2
  $r .= "(?:#(?P<anchor>\w+))?";                // e.g. #anchor42
  $r = "!$r!";                                  // Delimiters

  $result = array();
  preg_match($r, $address, $result);

  if (!empty($address) && empty($result['domain'])) {
    $result['error_query']['errstr'] = t("Invalid address received.");
    $result['prepared_address'] = '';
  }
  elseif ($address != $result['domain']) {
    drupal_set_message(t("Reduced '%address' to '%new.'", array('%address' => $address, '%new' => $result['domain'])));
    $result['prepared_address'] = $result['domain'];
  }
  else {
    $result['prepared_address'] = $address;
  }

  return $result;
}

/**
 * Detect the text encoding and encode it to UTF-8 when needed
 *
 * @param $str
 *   The text to encode
 *
 * @param $address
 *   The address being looked up
 *
 * @return
 *   The text encoded as UTF-8
 */
function _whois_utf8_encode(&$str, $address) {
  $encoding = mb_detect_encoding($str);

  // When a non-utf-8 encoding is detected, force an encoding.
  if ($encoding != 'UTF-8') {
    $str = utf8_encode($str);
  }
  return $str;
}

/**
 * Format and check the error data returned from the phpwhois library
 *
 * @param &$result
 *   The result array
 *
 * @param $address
 *   The address being looked up
 *
 * @return
 *   The error text encoded as UTF-8
 */
function _whois_handle_error(&$result, $address) {
  $str = '';

  if (isset($result['error_query']['errstr']) && is_array($result['error_query']['errstr'])) {
    $str .= implode("\n<br />", $result['error_query']['errstr']);
  }
  elseif (!empty($result['error_query']['errstr'])) {
    $str .= $result['error_query']['errstr'];
  }
  else {
    $str .= t("No data was retreived from whois server");
  }
  $str = check_plain(_whois_utf8_encode($str, $address));
  return $str;
}


function _whois_load_phpwhois() {
  $mod_path = _whois_library_available();
  if (!empty($mod_path)) {
    include_once($mod_path . '/whois.main.php');
    include_once($mod_path . '/whois.utils.php');
  }
  else {
    return FALSE;
  }
}

function _whois_library_available() {

  // First try the libraries API
  if (function_exists("libraries_get_path")) {
    $path = libraries_get_path('phpwhois');

    if (file_exists($path . '/whois.main.php')) {
      return $path;
    }
  }

  // Try to find phpwhois in the module folder 
  $path = drupal_get_path('module', 'whois') . '/phpwhois/';
  if (file_exists($path . 'whois.main.php')) {
    return $path;
  }
  return FALSE;
}


/**
 * Implements hook_libraries_info().
 */
function whois_libraries_info() {
  $libraries['phpwhois'] = array(
    'title' => 'phpWhois',
    'vendor url' => 'http://sourceforge.net/projects/phpwhois/',
    'download url' => 'http://sourceforge.net/projects/phpwhois/files/latest',
    'version arguments' => array(
      'file' => 'whois.client.php',
      // Best practice: Document the actual version strings for later reference.
      // 1.x: Version 1.0
      'pattern' => '/var $CODE_VERSION = \'(\d+)\.(\d+)\'/',
      'lines' => 100,
    ),
    'files' => array(
      'php' => array(
        'whois.main.php',
        'whois.utils.php',
      ),
    ),
  );
  return $libraries;
}

/*
 * Implements hook_boost_is_cacheable().
 *
 * Prevent the Boost module from caching whois result pages.
 * Since this module already has it's own caching assing that of the Boost module could be confusing.
 */
function whois_boost_is_cacheable($parts) {

  if (!empty($parts['normal_path']) && preg_match('!^whois!', $parts['normal_path'])) {
    $parts['is_cacheable'] = FALSE;
  }

  return $parts;
}

