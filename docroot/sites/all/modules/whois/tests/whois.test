<?php

/**
 * @file
 * Set of simpletests for the whois lookup module.
 */

class WhoisLookupTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Whois test',
      'description' => 'Ensure that the whois module functions properly.',
      'group' => 'Whois',
    );
  }

  public function setUp() {
    parent::setUp('whois');  // Enable any modules required for the test

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'access whois',
    ));
    $this->drupalLogin($this->privileged_user);
  }

  public function testWhoisOpen() {

    $this->drupalGet("whois");

    $this->assertText(t('Whois lookup'), 'Found page title');
  }

  /**
   * Test the whois page callback for the 'basic' output method
   */
  public function testWhoisLookupBasic() {

    $domain = 'drupal.org';
    $this->prefillCacheTable($domain);

    // Set the output method to basic
    // the default method 'html' requires the phpwhois library to be present for it's rendering functions.
    variable_set('whois_output_method', 'basic');

    // Address missing a TLD
    $this->drupalGet("whois/asdfjkaLSDKJFASDKjf");
    $this->assertText(t("Invalid address received."));

    // Lookup cached drupal.org
    $this->drupalGet("whois/$domain");
    $this->assertText("Dries Buytaert", 'Found Dries as owner of ' . $domain);
  }

  /**
   * Test the whois page callback for the 'html_status' output method
   */
  public function testWhoisLookupHtmlStatus() {

    $domain = 'drupal.org';
    $this->prefillCacheTable($domain);

    // Set the output method to html_status
    // the default method 'html' requires the phpwhois library to be present for it's rendering functions.
    variable_set('whois_output_method', 'html_status');

    // Address missing a TLD
    $this->drupalGet("whois/asdfjkaLSDKJFASDKjf");
    $this->assertText(t("Invalid address received."));

    // Lookup cached drupal.org
    $this->drupalGet("whois/$domain");
    $this->assertText("The domain $domain is registered", "Status message indicates $domain is registred");
  }

  /**
   * Load some static whois results from the filesystem to pre populate the cache table
   *
   * Reasons for using this cache:
   *  - It removes the dependance on remote systems, and thus removes an unpredictable element.
   *  - When tests are run repeatedly it saves resources
   */
  private function prefillCacheTable($domain) {
    $cid = WHOIS_CID_PREFIX . $domain;
    $data = file_get_contents(drupal_get_path('module', 'whois') . "/tests/whois-$domain.txt");
    $array = unserialize($data);
    cache_set($cid, $array);
  }
}

class WhoisBlockTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Block availability',
      'description' => 'Check if the whois block is available.',
      'group' => 'Whois',
    );
  }

  function setUp() {
    parent::setUp('whois');

    // Create and login user
    $admin_user = $this->drupalCreateUser(array('administer blocks', 'access whois'));
    $this->drupalLogin($admin_user);
  }

  function testWhoisBlock() {
    // Set block title to confirm that the interface is availble.
    //$this->drupalPost('admin/structure/block/manage/whois/navigation/configure', array('title' => $this->randomName(8)), t('Save block'));
    //$this->assertText(t('The block configuration has been saved.'), t('Block configuration set.'));

    // Set the block to a region to confirm block is availble.
    $edit = array();
    $edit['blocks[whois_whois_mini][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertText(t('The block settings have been updated.'), t('Block successfully move to Sidebar first region.'));

    $this->drupalGet('');
    $this->assertFieldByXPath("//div[@id='sidebar-first']//div[@id='block-whois-whois-mini']//input[@value='" . t('Lookup') . "']", '', 'Submit button found in the Sidebar first block');

    // @todo test posting from the block
  }
}


