<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_embedded_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {

	if ($form['#field']['type'] == 'text' || $form['#field']['type'] == 'text_with_summary' || $form['#field']['type'] == 'text_long') {

		$form['#media_embedded_key'] = 'media_embedded' .'__'. $form['#instance']['entity_type'] .'__'. $form['#instance']['bundle'] .'__'. $form['#instance']['field_name'];
		$media_embedded_options = array('media_embedded_default' => t('None'));

		foreach (field_read_instances(array('bundle' => $form['#instance']['bundle'], 'entity_type' => $form['#instance']['entity_type'])) as $field_instance) {
			$field = field_read_field($field_instance['field_name']);
			if ($field['type'] == 'media') {
				$media_embedded_options[$field['field_name']] = $field_instance['label'];
			}
		}

		$form['media_embedded'] = array(
			'#title' => t("Media Embedded"),
			'#type' => 'fieldset',
		);

		$form['media_embedded']['media_embedded_association'] = array(
			'#title' => t("Media Field Association"),
			'#description' => t('Media field to use to save the converted links. To deactivate, choose option "None".'),
			'#type' => 'select',
			'#default_value' => variable_get($form['#media_embedded_key'], ''),
			'#options' => $media_embedded_options,
			'#required' => FALSE,
		);

		$form['#submit'][] = 'media_embedded_settings_sumbit';

	}

}

/**
 * Submit function for media_embedded settings.
 */
function media_embedded_settings_sumbit($form, &$form_state) {

	if ($form_state['values']['media_embedded_association'] == 'media_embedded_default') {
		if(variable_get($form['#media_embedded_key'])) {
			variable_del($form['#media_embedded_key']);
		}
	}
	else {
		variable_set($form['#media_embedded_key'], $form_state['values']['media_embedded_association']);
	}
}

/**
 * Implements hook_form_alter().
 */
function media_embedded_form_alter(&$form, &$form_state, $form_id) {

	if (isset($form['#entity_type'])) {
		$entity_type = $form['#entity_type'];
		$entity_property_info = entity_get_property_info($entity_type);
		$entity_info = entity_get_info($entity_type);
		$entity_key_name = $entity_info['entity keys']['id'];

		if (isset($form[$entity_key_name])) {

			$entity_key_value = $form[$entity_key_name]['#value'];
			$media_field;
			$media_fields;

			$is_set_validate = FALSE;

			foreach($entity_property_info['bundles'][$form['#bundle']]['properties'] as $text_field => $property) {
				$variable_name = 'media_embedded' .'__'. $entity_type .'__'. $form['#bundle'] .'__'. $text_field;

				if (variable_get($variable_name)) {
					$media_field = variable_get($variable_name);
					$form['#media_embedded_text_field'][$text_field] =  array( 'media_field' => $media_field);

					if(!$is_set_validate) {
						$validate[] = 'media_embedded_entity_form_validate';
						foreach ($form['#validate'] as $validate_entry) {
							$validate[] = $validate_entry;
						}
						$submit[] = 'media_embedded_entity_form_submit';
						foreach ($form['#submit'] as $submit_entry) {
							$submit[] = $submit_entry;
						}
						$form['#validate'] = $validate;
						$form['#submit'] = $submit;
						$is_set_validate = TRUE;

						$media_fields[$media_field] = $form[$media_field]['#language'];

						if(isset($entity_key_value) && !empty($entity_key_value)) {
							if(empty($form['#'.$entity_type])) {
								$form['#'.$entity_type] = reset(entity_load($entity_type, array($entity_key_value)));
							}

							$media_items = field_get_items($entity_type, $form['#'.$entity_type], $media_field);
							$counter = 1;
							if(!empty($media_items)) {
								foreach($media_items as $media) {
									if(isset($media['data']) && !empty($media['data'])) {
										$data = unserialize($media['data']);
										if(isset($data->ID) && !empty($data->ID)) {
											$form['#media_embedded_data_id']['old'] = $data->ID;

											do {
												$new_data_id = mt_rand();
											} while ($new_data_id == $data->ID);

											$form['#media_embedded_data_id']['new'] = $new_data_id;
											continue;
										}
										elseif ($counter == sizeof($media_items)) {
											$form['#media_embedded_data_id']['new'] = mt_rand();
										}
									}
									$counter++;
								}
							}
							else {
								$form['#media_embedded_data_id']['new'] = mt_rand();
							}
						}
						else {
							$form['#media_embedded_data_id']['new'] = mt_rand();
						}
					}
				}
			}
			if($is_set_validate) {
				$form['#media_embedded_media_fields'] = $media_fields;
			}

		}

	}
}

/**
 * Validate function for media_embedded entity entries.
 */
function media_embedded_entity_form_validate(&$form, &$form_state) {

	if (isset($form['#media_embedded_text_field'])) {

		$weight_counter = 0;
		$data_id = $form['#media_embedded_data_id']['new'];
		$entity_type = $form['#entity_type'];
		$entity_info = entity_get_info($entity_type);
		$entity_key_name = $entity_info['entity keys']['id'];
		$entity_key_value = $form[$entity_key_name]['#value'];

		if (isset($entity_key_value) && !empty($entity_key_value)) {
			$entity = $form['#'.$entity_type];
			$entity_is_new = FALSE;
		}
		else {
			$entity_is_new = TRUE;
		}
			

		foreach($form['#media_embedded_text_field'] as $text_field => $information) {

			$urls_to_scan = array();
			$data = new stdClass();
			$data->media_embedded = TRUE;
			$data->ID = $data_id;
				
			if (isset($entity_key_value) && !empty($entity_key_value)) {
				$text_field_language = field_language($entity_type, $entity, $text_field);
				$media_field_language = field_language($entity_type, $entity, $information['media_field']);
			}
			else {
				$text_field_language = $form[$text_field]['#language'];
				$media_field_language = $form[$information['media_field']]['#language'];;
			}

				

			foreach($form_state['values']{$text_field}[$text_field_language] as $text_to_scan) {
				$matches = media_embedded_filter_url($text_to_scan['value']);

				if(!empty($matches)) {
					$urls_to_scan = array_merge($matches, $urls_to_scan);
				}
			}

			//Now try to link the new urls, update the references and order
			foreach ($urls_to_scan as $url) {
				$weight_counter++;
				$data->URL = $url;
				try {
					$provider = media_internet_get_provider($url);
					$provider->validate();
				} catch (MediaInternetNoHandlerException $e) {
					$weight_counter--;
					continue;
				} catch (MediaInternetValidationException $e) {
					//Probably the media already exists in the library!
					$uri = $provider->parse($url);
					$data->URI = $uri;
					$existing_file = file_load_multiple(array(), array('uri' => $uri));

					if(isset($existing_file)) {
						$is_mediaexistent = FALSE;
						$index_for_existing_media_file;
						list ($existing_file_id, $existing_file_value) = each($existing_file);

						if (!$entity_is_new) {
							$media_items = field_get_items($entity_type, $entity, $information['media_field']);
							if(!empty($media_items)) {

								foreach ($media_items as $index => $media) {
									if ($media['fid'] == $existing_file_value->fid) {
										//File is already linked to the media field
										$is_mediaexistent = TRUE;
										if(isset($form_state['values'][$information['media_field']][$media_field_language][$index]) && $form_state['values'][$information['media_field']][$media_field_language][$index]['fid'] == $existing_file_value->fid) {
											$index_for_existing_media_file = $index;
										}
										else {
											unset($index_for_existing_media_file);
										}
									}
								}
							}
						}

						if (!$is_mediaexistent) {
							//File not linked, but exists in library
							$form_state['values'][$information['media_field']][$media_field_language][] = array(
								'fid' => $existing_file_value->fid,
								'_weight' => 100 + $weight_counter,
								'data' => serialize($data),
							);
						}
						else {

							if(isset($index_for_existing_media_file) && isset($form_state['values'][$information['media_field']][$media_field_language][$index_for_existing_media_file]['data'])) {
								$data_old = $form_state['values'][$information['media_field']][$media_field_language][$index_for_existing_media_file]['data'];
							}
							else {
								$data_old = new stdClass();
							}
							if(is_string($data_old)) {
								$data_old = unserialize($data_old);
							}
							$data_old->media_embedded = TRUE;
							$data_old->URI = $uri;
							$data_old->URL = $url;
							$data_old->ID = $data_id;

							if(isset($index_for_existing_media_file)) {
								$form_state['values'][$information['media_field']][$media_field_language][$index_for_existing_media_file] = array(
								'fid' => $existing_file_value->fid,
								'_weight' => 100 + $weight_counter,
								'data' => serialize($data_old),
								);
							}
							else {
								$form_state['values'][$information['media_field']][$media_field_language][] = array(
								'fid' => $existing_file_value->fid,
								'_weight' => 100 + $weight_counter,
								'data' => serialize($data_old),
								);
							}
						}
					}
					continue;
				}
				$file = $provider->getFileObject();
				$file = $provider->save();
				$data->URI = $provider->parse($url);

				if($entity_is_new) {
					$media_field_language = $form[$information['media_field']]['#language'];
				}
				$form_state['values'][$information['media_field']][$media_field_language][] = array(
					'fid' => $file->fid,
					'_weight' => 100 + $weight_counter,
					'data' => serialize($data),
				);
			}
		}
		
		//Find the media files we need to unlink
		if (!$entity_is_new) {
			foreach($form['#media_embedded_text_field'] as $text_field => $information) {
				$media_items = field_get_items($entity_type, $entity, $information['media_field']);
				$media_field_language = field_language($entity_type, $entity, $information['media_field']);

				if(!empty($media_items)) {
					foreach ($media_items  as $media_index => $media_to_check) {

						if (isset($media_to_check['data']) && !empty($media_to_check['data'])) {

							$media_to_check_data = unserialize($media_to_check['data']);
							if (isset($media_to_check_data->media_embedded) && $media_to_check_data->media_embedded == TRUE) {
								//This media file comes from us, check if we need to delete it
								$media_to_check_data_form_state = $form_state['values'][$information['media_field']][$media_field_language];
								if (isset($media_to_check_data_form_state[$media_index]['data']) && !empty($media_to_check_data_form_state[$media_index]['data'])) {
									$media_to_check_data_form_state = unserialize($media_to_check_data_form_state[$media_index]['data']);
									if (isset($form['#media_embedded_data_id']['old']) && $media_to_check_data_form_state->ID == $form['#media_embedded_data_id']['old']) {
										unset($form_state['values'][$information['media_field']][$media_field_language][$media_index]);
									}
								}
								elseif (isset($form['#media_embedded_data_id']['old']) && $media_to_check_data->ID == $form['#media_embedded_data_id']['old']) {
									unset($form_state['values'][$information['media_field']][$media_field_language][$media_index]);
								}
							}
						}
					}
				}
			}
		}
	}
}


/**
 * Submit function for media_embedded entity entries.
 */
function media_embedded_entity_form_submit(&$form, &$form_state) {
	$media_fields = $form['#media_embedded_media_fields'];

	foreach ($media_fields as $media_field_name => $media_field_language) {
		$counter = 0;
		foreach ($form_state['values'][$media_field_name][$media_field_language] as $delta => &$item) {
			if ($item != t('Add another item')) {
				if(isset($item['data']) && !empty($item['data'])) {
					$data = unserialize($item['data']);
				}
				else {
					$data = new stdClass();
					$file = file_load($item['fid']);
					if(empty($file)) {
						continue;
					}
					$data->URI = $file->uri;
				}
				
				$counter++;
				$data->media_embedded_counter = $counter;
				$file_mime = file_get_mimetype($data->URI);

				if ($file_mime == 'video/youtube') {
					$data->media_embedded_href = "http://www.youtube.com/v/". str_replace('youtube://v/', '', $data->URI );
					$data->media_embedded_rel = "width=600;height=400;player=swf;";
				}
				elseif ($file_mime == 'video/vimeo') {
					$data->media_embedded_href = "http://vimeo.com/moogaloop.swf?clip_id=". str_replace('vimeo://v/', '', $data->URI ) . "&server=vimeo.com&show_title=1&show_byline=1&autoplay=0";
					$data->media_embedded_rel = "width=600;height=400;player=swf;";
				}
				elseif ($file_mime == 'video/youku') {
					$data->media_embedded_href = "http://player.youku.com/player.php/sid/". str_replace('youku://v/', '', $data->URI ) . "/v.swf";
					$data->media_embedded_rel = "width=600;height=400;player=swf;";
				}
				elseif (stristr($file_mime, 'image')) {
					$data->media_embedded_href = file_create_url($data->URI);
					$data->media_embedded_rel = "";
				}
				else {
					$data->media_embedded_href = file_create_url($data->URI);
					$data->media_embedded_rel = "";
				}

				$item['data'] = serialize($data);
			}
		}
	}
}


/**
 * function to filter all URL from a text.
 * Modified from filter.module _filter_url().
 */
function media_embedded_filter_url($text) {

	if(empty($text)) {
		return array();
	}

	// Tags to skip and not recurse into.
	$ignore_tags = 'a|script|style|code|pre';

	// Create an array which contains the regexps for each type of link.
	// The key to the regexp is the name of a function that is used as
	// callback function to process matches of the regexp. The callback function
	// is to return the replacement for the match. The array is used and
	// matching/replacement done below inside some loops.
	$tasks = array();
	$match_entries = array();
	$return = array();


	// Prepare protocols pattern for absolute URLs.
	// check_url() will replace any bad protocols with HTTP, so we need to support
	// the identical list. While '//' is technically optional for MAILTO only,
	// we cannot cleanly differ between protocols here without hard-coding MAILTO,
	// so '//' is optional for all protocols.
	// @see filter_xss_bad_protocol()
	$protocols = variable_get('filter_allowed_protocols', array('http', 'https'));
	$protocols = implode(':(?://)?|', $protocols) . ':(?://)?';

	// Prepare domain name pattern.
	// The ICANN seems to be on track towards accepting more diverse top level
	// domains, so this pattern has been "future-proofed" to allow for TLDs
	// of length 2-64.
	$domain = '(?:[A-Za-z0-9._+-]+\.)?[A-Za-z]{2,64}\b';
	$ip = '(?:[0-9]{1,3}\.){3}[0-9]{1,3}';
	$auth = '[a-zA-Z0-9:%_+*~#?&=.,/;-]+@';
	$trail = '[a-zA-Z0-9:%_+*~#&\[\]=/;?!\.,-]*[a-zA-Z0-9:%_+*~#&\[\]=/;-]';

	// Prepare pattern for optional trailing punctuation.
	// Even these characters could have a valid meaning for the URL, such usage is
	// rare compared to using a URL at the end of or within a sentence, so these
	// trailing characters are optionally excluded.
	$punctuation = '[\.,?!]*?';

	// Match absolute URLs.
	$url_pattern = "(?:$auth)?(?:$domain|$ip)/?(?:$trail)?";
	$pattern = "`((?:$protocols)(?:$url_pattern))($punctuation)`";
	$tasks['_filter_url_parse_full_links'] = $pattern;

	// Match www domains.
	$url_pattern = "www\.(?:$domain)/?(?:$trail)?";
	$pattern = "`($url_pattern)($punctuation)`";
	$tasks['_filter_url_parse_partial_links'] = $pattern;

	// Each type of URL needs to be processed separately. The text is joined and
	// re-split after each task, since all injected HTML tags must be correctly
	// protected before the next task.
	foreach ($tasks as $task => $pattern) {
		// HTML comments need to be handled separately, as they may contain HTML
		// markup, especially a '>'. Therefore, remove all comment contents and add
		// them back later.
		_filter_url_escape_comments('', TRUE);
		$text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);

		// Split at all tags; ensures that no tags or attributes are processed.
		$chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
		// PHP ensures that the array consists of alternating delimiters and
		// literals, and begins and ends with a literal (inserting NULL as
		// required). Therefore, the first chunk is always text:
		$chunk_type = 'text';
		// If a tag of $ignore_tags is found, it is stored in $open_tag and only
		// removed when the closing tag is found. Until the closing tag is found,
		// no replacements are made.
		$open_tag = '';

		for ($i = 0; $i < count($chunks); $i++) {

			if ($chunk_type == 'text') {
				// Only process this text if there are no unclosed $ignore_tags.
				if ($open_tag == '' && !empty($chunks[$i])) {
					// If there is a match, inject a link into this chunk via the callback
					// function contained in $task.
					$match = array();
					preg_match_all($pattern, $chunks[$i], $match, PREG_OFFSET_CAPTURE);

					if (isset($match)) {
						$match_entries[] = $match;
						unset($match);
					}

				}
				// Text chunk is done, so next chunk must be a tag.
				$chunk_type = 'tag';
			}
			else {
				// Only process this tag if there are no unclosed $ignore_tags.
				if ($open_tag == '') {
					// Check whether this tag is contained in $ignore_tags.
					if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
						$open_tag = $matches[1];
					}
				}
				// Otherwise, check whether this is the closing tag for $open_tag.
				else {
					if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
						$open_tag = '';
					}
				}
				// Tag chunk is done, so next chunk must be text.
				$chunk_type = 'text';
			}
		}

		$text = implode($chunks);
		// Revert back to the original comment contents
		_filter_url_escape_comments('', FALSE);
		$text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);
	}


	foreach ($match_entries as $matches) {

		foreach ($matches[1] as $definitive_match) {

			if(isset($definitive_match[0]) && !empty($definitive_match[0])) {
				$trimmed_url = str_replace(array("http://", "https://"), '', $definitive_match[0]);
				$return[$trimmed_url] =  $trimmed_url;
			}
		}

	}

	return $return;
}
