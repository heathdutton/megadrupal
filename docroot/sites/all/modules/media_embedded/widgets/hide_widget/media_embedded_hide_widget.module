<?php

/**
 * Implement hook_field_widget_info().
 */
function media_embedded_hide_widget_field_widget_info() {
  return array(
    'media_embedded_hide_widget' => array(
      'label' => t('Hide media embedded'),
      'field types' => array('media', 'file', 'image'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'allowed_types' => array('image'),
        'allowed_schemes' => array('public', 'private'),
  		'allow_edit_media_embedded' => array('allow'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implement hook_field_widget_settings_form().
 */
function media_embedded_hide_widget_field_widget_settings_form($field, $instance) {

  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();

  // Setup type selection form
  $types = media_type_get_types();
  $options = array();
  foreach ($types as $key => $definition) {
    $options[$key] = $definition->label;
  }

  $form['allowed_types'] = array (
    '#type' => 'checkboxes',
    '#title' => t('Allowed media types'),
    '#options' => $options,
    '#default_value' => $settings['allowed_types'],
    '#description' => t('Media types which are allowed for this field'),
    '#weight' => 1,
  );

  $streams = file_get_stream_wrappers();
  $options = array();
  unset($streams['temporary']);
  foreach ($streams as $scheme => $data) {
    $options[$scheme] = t('@scheme (@name)', array('@scheme' => $scheme . '://', '@name' => $data['name']));
  }
  
  $form['allowed_schemes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed URI schemes'),
    '#options' => $options,
    '#default_value' => $settings['allowed_schemes'],
    '#description' => t('URI schemes include public:// and private:// which are the Drupal files directories, and may also refer to remote sites.'),
    '#weight' => 2,
  );
  
  $form['allow_edit_media_embedded'] = array (
    '#type' => 'checkboxes',
    '#title' => t('Media Embedded Links'),
  	'#options' => array(
  		'allow' => t('Allow editing'),
  	),
    '#default_value' => $settings['allow_edit_media_embedded'],
    '#description' => t('Allow the user to see and edit the media fields that are detected by Media Embedded Links (only for testing and debugging purposes).'),
    '#weight' => 1,
  );
  
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function media_embedded_hide_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget_settings = $instance['widget']['settings'];
  $show_element = TRUE;

  $permission = user_access('edit media');
  if (!$permission) {
    // @todo: show the default file upload field.
    return;
  }

  // @todo The Field API supports automatic serialization / unserialization, so
  //   this should no longer be needed. After verifying with a module that uses
  //   the 'data' column, remove this.
  // @see media_field_widget_value()
  $current_value = array();

  if (isset($items[$delta])) {
    $current_value = $items[$delta];
    // @todo $items[$delta] is sometimes a loaded media entity (an object)
    //   rather than an array. This conflicts with Field API expectations (for
    //   example, it results in fatal errors when previewing a node with a
    //   multi-valued media field), so should be fixed. In the meantime, don't
    //   assume that $current_value is an array.
    if (is_array($current_value) && isset($current_value['data']) && is_string($current_value['data'])) {
      $current_value['data'] = unserialize($current_value['data']);
      if(isset($current_value['data']->media_embedded)) {
		$show_element = FALSE;
      }
    }
  }

  if($show_element || $widget_settings['allow_edit_media_embedded']['allow']) {
	  $element += array(
	    '#type' => 'media', // Would like to make this a fieldset, but throws some weird warning about element_children... not sure what it is about yet.
	    '#collapsed' => TRUE,
	    '#default_value' => $current_value,
	    '#required' => $instance['required'],
	    //'#media_file_extensions' => $instance['settings']['file_extensions'],
	    // @TODO: Not implemented yet.
	    '#media_options' => array(
	      'global' => array(
	        'types' => array_filter($instance['widget']['settings']['allowed_types']),
	        // @todo: Not implemented
	        'schemes' => $instance['widget']['settings']['allowed_schemes'],
	      ),
	    ),
	  );
	  if ($field['type'] == 'file') {
	    $element['display'] = array(
	      '#type' => 'value',
	      '#value' => 1,
	    );
  	  }
  	  return $element;
  }
  else {
  	return;
  }

}
