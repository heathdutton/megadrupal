<?php

/**
 * Implements hook_field_formatter_info().
 */
function media_embedded_text_formatter_field_formatter_info() {
	$formatters = array(
	    'media_embedded_text_formatter' => array(
	      'label' => t('Replace Media URLs'),
	      'field types' => array('text', 'text_long', 'text_with_summary'),
	      'settings' => array('media_embedded_text_settings' => 'default'),
	),
	);

	return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function media_embedded_text_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];

	$element = array();

	//	dpm($form);
	//	dpm($instance);

	if ($display['type'] == 'media_embedded_text_formatter') {
		$options = array('default' => t('Default'));

		$element['media_embedded_text_settings'] = array(
	      '#title' => t('Media embedded text settings'),
	      '#type' => 'select',
	      '#default_value' => $settings['media_embedded_text_settings'],
	      '#options' => $options,
		);
	}

	return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function media_embedded_text_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];

	$summary = '';

	if ($display['type'] == 'media_embedded_text_formatter') {
		$summary = t('Settings') . ': ' . $settings['media_embedded_text_settings'];
	}

	return $summary;
}


/**
 * Implement hook_field_formatter_view().
 */
function media_embedded_text_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

	$element = array();

	$media_embedded_key = 'media_embedded' .'__'. $entity_type .'__'. $instance['bundle'] .'__'. $instance['field_name'];
	$media_field_name = variable_get($media_embedded_key);

	switch ($display['settings']['media_embedded_text_settings']) {
		case 'default':

			foreach ($items as $delta => $item) {
				$output = media_embedded_text_formatter_filter_url($item['safe_value'], $delta, $entity, $entity_type, $media_field_name, $instance['field_name'], $langcode);
				$element[$delta] = array('#markup' => $output);
			}
			break;

	}

	return $element;
}

/**
 * Implements hook_filter_format_update().
 */
function media_embedded_text_formatter_format_update($format) {
	field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function media_embedded_text_formatter_format_disable($format) {
	field_cache_clear();
}

function media_embedded_text_formatter_filter_url($text, $delta, $entity, $entity_type, $media_field_name, $text_field_name, $langcode) {

	if(isset($entity->{$media_field_name}[field_language($entity_type, $entity, $media_field_name)])) {
		
		$media_files = $entity->{$media_field_name}[field_language($entity_type, $entity, $media_field_name)];
		
		if(isset($entity->{$text_field_name}[$langcode][$delta]['format'])) {
			$format = filter_list_format($entity->{$text_field_name}[$langcode][$delta]['format']);
		}

		global $media_embedded_variable;
		$media_embedded_variable = array(
		'entity' => $entity,
		'media_field_name' => $media_field_name,
		'langcode' => field_language($entity_type, $entity, $media_field_name),
		'html_escape' => FALSE,
		);

		if ((isset($format) && $format['filter_html_escape']->status)) {
			$text = html_entity_decode($text);
			$media_embedded_variable['html_escape'] = TRUE;
		}

		foreach ($media_files as $key => $media_file) {
			if(isset($media_file['data']) && !empty($media_file['data'])) {
				$data = unserialize($media_file['data']);

				if(!empty($data->URL)) {
					$pattern_front = preg_quote('<a href="');
					$pattern_middle = preg_quote('">');
					$pattern_end = preg_quote('</a>');
					$pattern_regex_middle = '[^<]*';
					$media_embedded_variable['key'] = $key;
						
					if(isset($format) && $format['filter_url']->status) {
						$url_escaped = preg_quote($data->URL);
						$url_escaped_html = preg_quote(htmlentities($data->URL));
						$text = preg_replace_callback('=('. $pattern_front .'(http\:\/\/|https\:\/\/)?(' . $url_escaped .'|' .$url_escaped_html. '){1}' . $pattern_middle .''.$pattern_regex_middle.''. $pattern_end .')=si', 'media_embedded_text_formatter_filter_url_callback', $text);
					}
					else {
						$url_escaped = preg_quote($data->URL);
						$url_escaped_html = preg_quote(htmlentities($data->URL));
						$text = preg_replace_callback('=((http\:\/\/|https\:\/\/)?(' . $url_escaped .'|' .$url_escaped_html. '))=si', 'media_embedded_text_formatter_filter_url_callback', $text);
					}
				}
			}
		}

		if($media_embedded_variable['html_escape']) {
			$text = htmlentities($text);
		}
	}

	return $text;
}

/**
 * preg_replace callback to make links out of absolute URLs.
 */
function media_embedded_text_formatter_filter_url_callback($match) {

	global $media_embedded_variable;
	$media_field_name = $media_embedded_variable['media_field_name'];
	$langcode = $media_embedded_variable['langcode'];
	$media_files = $media_embedded_variable['entity']->{$media_field_name}[$langcode];
	$data = unserialize($media_files[$media_embedded_variable['key']]['data']);

	if($media_embedded_variable['html_escape']) {
		return "[see " . $data->media_embedded_counter . "]";
	}
	else {
		return "<b>[see " . $data->media_embedded_counter . "]</b>";
	}

}

