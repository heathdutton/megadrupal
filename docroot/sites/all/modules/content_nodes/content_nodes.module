<?php

/**
 * @file
 * Module file for the content nodes module.
 *
 * Content Nodes module uses entity references to add other content
 * elements, in this case other nodes.
 *
 * @todo Use entitiy reference with all possible entity types. At the moment
 * only nodes are supported.
 */

/**
 * Implements hook_menu().
 */
function content_nodes_menu() {
  $items = array();
  // Listing the content nodes.
  $items['node/%node/content-nodes'] = array(
    'title' => 'Edit content',
    'page callback' => 'content_nodes_node_list',
    'page arguments' => array(1),
    'access callback' => 'content_nodes_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -5,
  );
  // Content nodes admin configuration.
  $items['admin/config/content/content_nodes'] = array(
    'title' => 'Content Nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_nodes_settings_form'),
    'description' => 'Content Nodes settings and field configuration.',
    'access arguments' => array('administer content types'),
    'file' => 'content_nodes.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  // Enable the default tab.
  $items['admin/config/content/content_nodes/settings'] = array(
    'title' => 'Settings',
    'description' => 'Setup content nodes',
    'access arguments' => array('administer content types'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'content_nodes.admin.inc',
  );
  // Content nodes admin configuration.
  $items['admin/config/content/content_nodes/nodes'] = array(
    'title' => 'Nodes configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_nodes_nodes_form'),
    'description' => 'Configure Content Nodes.',
    'access arguments' => array('administer content types'),
    'file' => 'content_nodes.admin.inc',
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Alter the main node edit tab, so the user can see, that the orginal edit tab
 * is only for the base content.
 *
 * @todo Check for a better wording.
 */
function content_nodes_menu_alter(&$items) {
  if (variable_get('content_nodes_alter_edit_link_title', TRUE)) {
    $items['node/%node/edit']['title callback'] = 'content_nodes_menu_view_task_alter';
    $items['node/%node/edit']['title arguments'] = array(1);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * When the node edit form called from content nodes form, instead of the view
 * task, we want to return to content nodes form.
 */
function content_nodes_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Now we check the destination parameter.
  $destination = drupal_get_destination();
  if (isset($_GET['destination']) && preg_match('/node\/\d+\/content\-nodes$/i', $destination['destination'])) {
    if (isset($data['tabs'][0]['output'])) {
      $urlparts = drupal_parse_url($destination['destination']);
      foreach ($data['tabs'][0]['output'] as &$item) {
        // Search the node/%/view|edit|content-nodes path and override.
        if ($item['#link']['path'] == 'node/%/view') {
          $item['#link']['href'] = $urlparts['path'];
          if (isset($urlparts['query']) && count($urlparts['query']) > 0) {
            $item['#link']['localized_options']['query'] = $urlparts['query'];
          }
          $item['#link']['title'] = 'Cancel';
        }

        if ($item['#link']['path'] == 'node/%/edit' || $item['#link']['path'] == 'node/%/content-nodes') {
          $item['#link']['localized_options']['query'] = $destination;
        }
      }
    }
  }
}
/**
 * Alter the node edit title.
 *
 * @see content_nodes_menu_alter()
 */
function content_nodes_menu_view_task_alter($node) {
  if (_content_nodes_is_content_node($node)) {

    return t('Edit base');
  }
  else {

    return t('Edit');
  }
}

/**
 * Implements hook_admin_paths().
 */
function content_nodes_admin_paths() {
  $paths = array(
    'node/*/content-nodes' => TRUE,
    'node/*/content-nodes/*' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_permission().
 */
function content_nodes_permission() {
  $perms = array(
    'content nodes view node edit form' => array(
      'title' => t('Access Content Nodes in node edit form'),
      'description' => t('Can view and edit content nodes field in the node edit form'),
    ),
  );

  return $perms;
}

/**
 * The "Edit content" page.
 *
 * @see content_nodes_menu()
 */
function content_nodes_node_list($node) {
  $type_name = node_type_get_name($node);
  drupal_set_title(t('<em>Edit @type content</em> @title', array('@type' => $type_name, '@title' => $node->title)), PASS_THROUGH);
  $output = drupal_get_form('content_nodes_node_list_form', $node);

  return $output;
}

/**
 * Render form with content nodes of the given $node.
 *
 * @param array $form
 *   The formular array.
 * @param array $form_state
 *   The state formular array.
 * @param object $node
 *   The node object.
 *
 * @return array
 *   The modified form array.
 */
function content_nodes_node_list_form($form, &$form_state, $node) {
  $form_state['node'] = $node;

  if (!_content_nodes_is_content_node($node)) {
    drupal_set_message(t('No Content Nodes fields are defined for this content type. Please go to admin configure section!'), 'error');

    return $form;
  }

  $form['#tree'] = TRUE;

  // Changed must be sent to the client, for later overwrite error checking.
  $form['changed'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->changed) ? $node->changed : NULL,
  );

  $counter = 0;

  // Loop through the assigned content node fields, see in config section
  // admin/config/content_nodes.
  foreach (_content_nodes_find_fields($node) as $content_node_field) {

    $content_node_field_instance_info = field_info_instance('node', $content_node_field, $node->type);
    $form['section'][$counter] = array(
      '#type' => 'fieldset',
      '#content_node_field' => $content_node_field,
      '#title' => check_plain($content_node_field_instance_info['label']),
      '#theme' => 'content_nodes_node_list_form_section',
      '#weight' => $content_node_field_instance_info['widget']['weight']
    );

    // Set the allowed node types, which are allowed to add to the field.
    $types = _content_nodes_get_allowed_types($content_node_field);
    foreach ($types as $type_key => $type_name) {
      $form['section'][$counter]['action_links'][] = array(
        '#type' => 'link',
        '#href' => 'node/add/' . str_replace('_', '-', $type_key),
        '#options' => array(
          'query' => array(
            'content_node' => $node->nid,
            'content_node_field' => $content_node_field,
            'destination' => 'node/' . $node->nid . '/content-nodes',
          ),
        ),
        '#title' => check_plain($type_name),
        '#theme' => 'content_nodes_node_list_form_section_action_links',
        '#node_type' => $type_key,
      );
    }

    $drupal_destination = drupal_get_destination();
    // Reset destination if no destination was requested.
    $destination = 'node/' . $node->nid . '/content-nodes';
    if (isset($_GET['destination'])) {
      $destination .= '?destination=' . $drupal_destination['destination'];
    }

    // Add the relational data items now.
    $items = field_get_items('node', $node, $content_node_field);
    if ($items) {
      $nids = array();
      foreach ($items as $item) {
        $nids[$item['target_id']] = $item['target_id'];
      }
      $content_nodes = node_load_multiple($nids);

      // Assign a weight, better for saving correct ordered data later in submit
      // function, otherwise maybe the data will not ordered correctly.
      $weight = 0;

      // Define the formular elements now for each relational item.
      foreach ($items as $item) {
        $nid = $item['target_id'];

        $form['section'][$counter]['content_nodes'][$weight]['nid'] = array(
          '#type' => 'hidden',
          '#value' => $nid,
        );
        $form['section'][$counter]['content_nodes'][$weight]['#node'] = $content_nodes[$nid];

        // Display other edit link, when the node has content nodes too.
        if (_content_nodes_is_content_node($content_nodes[$nid])) {
          $editlink = 'node/' . $nid . '/content-nodes';
        }
        else {
          $editlink = 'node/' . $nid . '/edit';
        }

        $form['section'][$counter]['content_nodes'][$weight]['edit'] = array(
          '#type' => 'link',
          '#title' => t('edit'),
          '#href' => $editlink,
          '#options' => array('query' => array('destination' => $destination)),
          '#access' => node_access('update', $content_nodes[$nid]),
        );
        $form['section'][$counter]['content_nodes'][$weight]['delete'] = array(
          '#type' => 'link',
          '#title' => t('delete'),
          '#href' => 'node/' . $nid . '/delete',
          '#options' => array('query' => array('destination' => $destination)),
          '#access' => node_access('delete', $content_nodes[$nid]),
        );
        $form['section'][$counter]['content_nodes'][$weight]['status'] = array(
          '#type' => 'checkbox',
          '#title' => t('Published'),
          '#title_display' => 'invisible',
          '#default_value' => $content_nodes[$nid]->status,
          '#access' => node_access('update', $content_nodes[$nid]),
        );
        $form['section'][$counter]['content_nodes'][$weight]['weight'] = array(
          '#type' => 'textfield',
          '#title' => t('Weight for @title', array('@title' => $content_nodes[$nid]->title)),
          '#title_display' => 'invisible',
          '#default_value' => $weight,
          '#size' => 3,
        );

        $weight++;
      }
    }
    $counter++;
  }
  // End foreach ($content_node_fields as $content_node_field).
  $form['#validate'][] = 'content_nodes_node_list_form_validate';
  $form['#submit'][] = 'content_nodes_node_list_form_submit';

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Form validation handler for content_nodes_node_list_form().
 *
 * @todo Differences between base node changes and content node fields, so that
 * saving is enabled when more than one user edit the content nodes. Find a
 * solution to save the selected order, but consider new or deleted nodes.
 */
function content_nodes_node_list_form_validate($form, &$form_state) {
  $node = $form_state['node'];
  if (isset($node->nid) && (node_last_changed($node->nid) > $form_state['values']['changed'])) {
    form_set_error('changed', t('The content on this page has either been modified by another user, or you have already submitted modifications using this form. As a result, your changes cannot be saved.'));
  }
}

/**
 * Form submission handler for content_nodes_node_list_form().
 */
function content_nodes_node_list_form_submit($form, &$form_state) {
  $sections = $form_state['values']['section'];
  $node = $form_state['node'];

  // Save every section.
  // TODO: Saving empty sections have to test.
  foreach ($sections as $section_key => $section) {
    $content_nodes = $section['content_nodes'];

    // Sort form values.
    uasort($content_nodes, '_content_nodes_sort_array_by_weight');

    // Now we save the status for the child nodes. Here we reload the child
    // nodes an remove them, if they are no more exists.
    $save_nodes = array();
    foreach ($content_nodes as $data) {
      $content_node = node_load($data['nid']);
      if ($content_node) {
        if (isset($data['status'])) {
          // Publish or unplublish the node.
          $content_node->status = $data['status'];
          node_save($content_node);
        }
        $save_nodes[] = array('target_id' => $data['nid']);
      }
    }
    // Set ordered node to node.
    $fieldname = $form['section'][$section_key]['#content_node_field'];
    // Thx to tibezh for the hint to find the correct field language.
    $lang = field_language('node', $node, $fieldname);
    $node->{$fieldname}[$lang] = $save_nodes;
  }
  node_save($node);
  drupal_set_message(t('Your settings have been saved.'));
}

/**
 * Controll the access to Content Nodes list.
 *
 * @see content_nodes_menu()
 */
function content_nodes_access($node) {

  if (!node_access('update', $node)) {

    return FALSE;
  }

  // Check of existing field.
  return _content_nodes_is_content_node($node);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_nodes_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Disable some settings.
  if (isset($form['field']) && isset($form['field']['settings']) && isset($form['field']['settings']['#field'])) {
    if (strpos($form['field']['settings']['#field']['field_name'], 'content_nodes_') === 0) {
      $form['field']['cardinality']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function content_nodes_form_node_form_alter(&$form, &$form_state) {

  // Find content nodes fields and hide them if user haven't access.
  if (!user_access('content nodes view node edit form')) {
    $fields = _content_nodes_find_fields($form);

    foreach ($fields as $field) {
      $form[$field]['#access'] = FALSE;
    }
  }

  // Add content node informations to node.
  // See content_nodes_entity_insert() where this content is needed.
  // Add only on new nodes.
  if ($form['nid']['#value'] === NULL) {
    // Check and validate the request params.
    if (isset($_GET['content_node']) && isset($_GET['content_node_field'])) {
      $content_node_nid = intval(trim($_GET['content_node']));
      $content_node_field = trim($_GET['content_node_field']);
      $content_node = node_load($content_node_nid);
      if ($content_node && isset($content_node->{$content_node_field})) {
        // Add the content node and field to our node in formular, so we can
        // use them in our own submit handler.
        $form['#node']->content_nodes = array(
          'nid' => $content_node->nid,
          'field' => $content_node_field,
        );
        $form['#validate'][] = 'content_nodes_node_add_form_validate';
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alter the admin/content form, to add the edit content link and alter the edit
 * link text.
 */
function content_nodes_form_node_admin_content_alter(&$form, &$form_state) {
  if (variable_get('content_nodes_alter_content_admin_form', TRUE) && isset($form['admin']['nodes']) && isset($form['admin']['nodes']['#options'])) {
    // Alter all entries, no options could found to alter link generation in
    // node.admin.inc function node_admin_nodes().
    foreach ($form['admin']['nodes']['#options'] as $nid => &$option) {
      // Only alter if edit link found, so no access check is needed.
      if (isset($option['operations']['data']) && isset($option['operations']['data']['#links']['edit'])) {
        // We need to load the node, because the form doesn't contains the node
        // type. But we need this, to add only the edit link of node types
        // which have content_node fields.
        $node = node_load($nid);
        if ($node && _content_nodes_is_content_node($node)) {
          // Alter edit link title first.
          $option['operations']['data']['#links']['edit']['title'] = t('edit base');
          // Insert edit content link at first element.
          $content_node_edit = array(
            'edit_content_nodes' => array(
              'title' => t('edit content'),
              'href' => sprintf('node/%d/content-nodes', $nid),
              'query' => $option['operations']['data']['#links']['edit']['query'],
            ),
          );
          $option['operations']['data']['#links'] = array_merge($content_node_edit, $option['operations']['data']['#links']);
        }
      }
    }
  }

}

/**
 * Validate handler for new nodes.
 *
 * Add the new node to the called node an field.
 *
 * @see content_nodes_form_node_form_alter()
 */
function content_nodes_node_add_form_validate($form, &$form_state) {
  if (isset($form['#node']->content_nodes) && isset($form['#node']->content_nodes['nid'])) {
    $content_node = node_load($form['#node']->content_nodes['nid']);
    if (!node_access('update', $content_node) || !isset($content_node->{$form['#node']->content_nodes['field']})) {
      form_set_error('content_node', t('Adding to selected content node is not allowed'));
    }
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Adds an entity reference to our content node, if given.
 *
 * @todo Make other entities possible, maybe search a function that return the
 * ID key by type, atm which is sufficient for us.
 */
function content_nodes_entity_insert($entity, $type) {
  if (isset($entity->content_nodes) && isset($entity->content_nodes['nid']) && isset($entity->content_nodes['field'])) {
    $content_node = node_load($entity->content_nodes['nid'], NULL, TRUE);
    if ($content_node && isset($content_node->{$entity->content_nodes['field']})) {
      $lang = entity_language('node', $content_node);
      switch ($type) {
        case 'node':
          $target_id = $entity->nid;
          break;

        default:
          $target_id = NULL;
          break;
      }

      // Add the new id at the end of the list to the reference field.
      if ($target_id > 0) {
        // TODO: Needs tests with translations, so atm its unsupportet.
        $lang = field_language('node', $content_node, $entity->content_nodes['field']);
        $content_node->{$entity->content_nodes['field']}[$lang][] = array('target_id' => $target_id);
        node_save($content_node);
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * We have to remove our entity relations, because entity reference module
 * doesn't cascade on delete.
 *
 * @todo
 *   Maybe entity reference module add this functionality, we can remove
 *   this. Alternative is Entity Reference Cascade Delete module, but it
 *   has extra to configured, so cascade is needed for our fields.
 */
function content_nodes_entity_delete($entity, $type) {
  $delete_id = NULL;
  switch ($type) {
    case 'node':
      $delete_id = $entity->nid;
      break;
  }
  if ($delete_id > 0) {
    // Delete nid from all Content nodes field.
    $fields = _content_nodes_find_fields(field_info_fields());
    foreach ($fields as $field_name) {

      $database_table = db_escape_table('field_data_' . $field_name);
      $database_field = db_escape_field($field_name . "_target_id");
      if (db_table_exists($database_table) && db_field_exists($database_table, $database_field)) {
        // Select the node first.
        $result = db_select($database_table)
                ->fields($database_table, array('entity_type', 'entity_id'))
                ->condition($database_field, $delete_id)
                ->execute();
        foreach ($result as $entity) {
          switch ($entity->entity_type) {
            case 'node':
              $parent_entity = node_load($entity->entity_id);
              if ($parent_entity) {
                _content_nodes_remove_reference_from_entity($parent_entity, $field_name, $delete_id);
                node_save($parent_entity);
              }
              break;
          }
        }
      }
    }
  }
  // Endif $delete_id > 0.
}

/**
 * Removes refenced id from a field.
 *
 * @see content_nodes_entity_delete()
 */
function _content_nodes_remove_reference_from_entity($entity, $field_name, $remove_entity_id) {
  // Todo: Supports only node types, make it also works for entities.
  $lang = field_language('node', $entity, $field_name);
  if (isset($entity->{$field_name}) && isset($entity->{$field_name}[$lang])) {
    // See content_nodes_entity_insert() for the same issue.
    foreach ($entity->{$field_name}[$lang] as $delta => $value) {
      if (isset($value['target_id']) && $value['target_id'] == $remove_entity_id) {
        unset($entity->{$field_name}[$lang][$delta]);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function content_nodes_theme() {

  return array(
    'content_nodes_node_list_form' => array(
      'render element' => 'form',
    ),
    'content_nodes_node_list_form_section' => array(
      'render element' => 'section',
    ),
    'content_nodes_node_list_form_section_action_links' => array(
      'render element' => 'link',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function content_nodes_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['content_nodes'] = array(
    'label' => t('Content Nodes view'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 */
function content_nodes_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'content_nodes') {
    $vars['theme_hook_suggestions'][] = 'node__content_nodes';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__content_nodes';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['nid'] . '__content_nodes';
  }
}

/**
 * Theming the action links the sections.
 *
 * @see content_nodes_node_list_form()
 */
function theme_content_nodes_node_list_form_section_action_links($variables) {
  $link = $variables['link'];
  $link_text = $link['#title'];
  $node_type = $link['#node_type'];
  return '<li class="add-type-' . $node_type . '">' . l($link_text, $link['#href'], $link['#options']) . "</li>\n";
}

/**
 * Theming the section sections.
 *
 * @see content_nodes_node_list_form()
 */
function theme_content_nodes_node_list_form_section($variables) {
  $section = $variables['section'];
  $output = '<ul class="action-links content-nodes-add-actions">' . drupal_render($section['action_links']) . '</ul>';
  $rows = array();

  // Load alles types, to display the name instead the machine name.
  $node_types = node_type_get_types();

  if (isset($section['content_nodes'])) {
    foreach (element_children($section['content_nodes']) as $id) {
      $node = $section['content_nodes'][$id]['#node'];
      $section['content_nodes'][$id]['weight']['#attributes']['class'] = array($section['#id'] . '-text-content-nodes-order-weight');
      $rows[] = array(
        'data' => array(
          $node->title,
          $node_types[$node->type]->name,
          drupal_render($section['content_nodes'][$id]['weight']),
          drupal_render($section['content_nodes'][$id]['status']),
          format_date($node->changed),
          drupal_render($section['content_nodes'][$id]['edit']),
          drupal_render($section['content_nodes'][$id]['delete']),
        ),
        'class' => array('draggable'),
      );
    }
    $header = array(
      t('Name'),
      array('data' => t('Type'), 'width' => '10%'),
      t('Weight'),
      array('data' => t('Published'), 'width' => '10%'),
      array('data' => t('Last updated'), 'width' => '10%'),
      array('data' => t('Operations'), 'colspan' => 2, 'width' => '20%'),
    );
    $output .= theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(
        'id' => $section['#id'] . '-text-content-nodes-order',
      ),
    ));
  }
  else {
    $output .= '<div class="section-message-no-entries">' . t('No entries found.') . '</div>';
  }
  $output .= drupal_render_children($section);
  drupal_add_tabledrag($section['#id'] . '-text-content-nodes-order', 'order', 'sibling', $section['#id'] . '-text-content-nodes-order-weight');

  return $output;
}

/**
 * Theming the form.
 *
 * @see content_nodes_node_list_form()
 */
function theme_content_nodes_node_list_form($variables) {
  $form = $variables['form'];

  return drupal_render_children($form);
}

/**
 * Get the allowed entity types for a defined field.
 *
 * @todo Only tested for entity renference fields.
 * @see content_nodes_node_list_form()
 */
function _content_nodes_get_allowed_types($fieldname) {
  $fieldinfo = field_info_field($fieldname);
  $result = array();
  if ($fieldinfo && $fieldinfo['settings']['handler_settings']['target_bundles']) {
    if ($fieldinfo['settings']['target_type'] == 'node') {
      foreach ($fieldinfo['settings']['handler_settings']['target_bundles'] as $type) {
        $nodeinfo = entity_get_info('node');
        $result[$type] = $nodeinfo['bundles'][$type]['label'];
      }
    }
  }

  return $result;
}

/**
 * Check whether the node is a content nodes type.
 *
 * @param object $node
 *   The node object.
 *
 * @return bool
 *   TRUE if the node has a content_node_field, otherwise FALSE.
 */
function _content_nodes_is_content_node($node) {
  return count(_content_nodes_find_fields($node)) > 0;
}

/**
 * Loop through a array or object an search for 'content_nodes_' keys.
 *
 * Search in the keys or attributes of the given array/object.
 * Found entries are added to the return array as value.
 *
 * @param mixed $array
 *   Array with keys, to search.
 *
 * @return array
 *   Result of entries that are found.
 */
function _content_nodes_find_fields($array) {
  $fields = array();
  foreach ($array as $key => $value) {
    if (strpos($key, 'content_nodes_') === 0) {
      $fields[] = $key;
    }
  }

  return $fields;
}

/**
 * Helper function to sort a node list by name with usort/uasort.
 */
function _content_nodes_sort_nodes_by_name($a, $b) {
  if (strtolower($a->name) == strtolower($b->name)) {

    return 0;
  }

  return (strtolower($a->name) < strtolower($b->name)) ? -1 : 1;
}

/**
 * Helper function to sort a array by weight with usort/uasort.
 */
function _content_nodes_sort_array_by_weight($a, $b) {
  if ($a['weight'] == $b['weight']) {

    return 0;
  }

  return ($a['weight'] < $b['weight']) ? -1 : 1;
}
