<?php

/**
 * @file
 * Module file of First time login module.
 */

/**
 * Implements hook_help().
 */
function first_time_login_help($path, $arg) {
  switch ($path) {
    case 'admin/help#first_time_login':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p><strong>' . t('Super user (user with UID = 1), will not be
        prompted for profile update.') . '</strong></p>';
      $output .= '<p><strong>* </strong>' . t('The First time login module prompts user to reset their profile, when they login to their account for the first time (once profile is updated it will not prompt form next login onwards). After creating a user account with basic details, user can be intimated to log on to their profile and ask them to update it.') . '</p>';
      $output .= '<p><strong>* </strong>' . t('You can configure the threshold number of days after which user will be again prompted to update their profile.') . '</p>';
      $output .= '<p><strong>* </strong>' . t('Timestamp for the existing users will be updated to their last profile access time.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_user_insert().
 */
function first_time_login_user_insert(&$edit, $account, $category) {
  if ($account->is_new == TRUE) {
    db_insert('user_first_login')
      ->fields(array(
         'uid' => $account->uid,
         'first_time_login' => 1,
         'updated_date' => $account->access,
         ))
      ->execute();
  }
}

/**
 * Implements hook_user_update().
 *
 * Force user to resset account and turn the flag off and updated the timestamp.
 */
function first_time_login_user_update(&$edit, $account, $category) {
  global $user;
  if ($account->is_new != TRUE && ($user->uid == $account->uid)) {
    db_update('user_first_login')
      ->fields(array(
        'first_time_login' => 0,
        'updated_date' => REQUEST_TIME,
        ))
      ->condition('uid', $account->uid, '=')
      ->execute();
  }
}

/**
 * Implements hook_user_login().
 *
 * When user logins check the flag and last updated profile and act accordingly.
 */
function first_time_login_user_login(&$edit, $account) {
  if ($account->uid == 1) {
    return;
  }
  $details = db_select('user_first_login', 'n')
          ->fields('n', array('first_time_login', 'updated_date'))
          ->condition('uid', $account->uid, '=')
          ->condition('uid', 1, '!=')
          ->execute()
          ->fetchObject();
  $updated_date = $details->updated_date;
  $current_time = REQUEST_TIME;
  if ($updated_date == 0) {
    $days_diff = 0;
  }
  else {
    $days_diff = ($current_time - $updated_date) / (60 * 60 * 24);
  }
  $needsupdate = ($days_diff > variable_get('first_time_login_config_days'));
  if (is_object($details)) {
    if ($details->first_time_login == 1 || $needsupdate) {
      $path = url('user/' . $account->uid . '/edit', array('absolute' => TRUE));
      $_GET['destination'] = $path;
      $edit['redirect'] = $edit['redirect'] . '/edit';
      $account_created = format_date($account->created, 'custom', 'd-M-Y');
      $last_updated_date = format_date($updated_date, 'custom', 'd-M-Y');
      if ($needsupdate == FALSE) {
        drupal_set_message(t("Welcome @user to @site_name your account was
        created on '@created_date'. Please update your account's details.", array(
          '@user' => $account->name,
          '@site_name' => variable_get('site_name'),
          '@created_date' => $account_created,
        )));
      }
      elseif ($details->first_time_login == 0) {
        drupal_set_message(t("Welcome @user to @site_name your account was updated
          on '@updated_date'. Please update your account's details.", array(
            '@user' => $account->name,
            '@site_name' => variable_get('site_name'),
            '@updated_date' => $last_updated_date,
          ))
        );
      }
    }
  }
}

/**
 * Implements hook_user_delete().
 *
 * When user account is deleted delete its corresponding flag.
 */
function first_time_login_user_delete($account) {
  $uid = $account->uid;
  db_delete('user_first_login')
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Implements hook_menu().
 */
function first_time_login_menu() {
  $items = array();
  $items['admin/config/first-time-login'] = array(
    'title' => 'First Time Login',
    'description' => 'Prompt user to update their account whose account is not updated since a long time.',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('first_time_login_form'),
    'file' => 'first_time_login.admin.inc',
  );
  return $items;
}
