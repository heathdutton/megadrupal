<?php

/**
 * @file
 * YellowCube integration module for Drupal Commerce.
 */
define('YELLOWCUBE_SHIPPING_ADD_NEW', 'add_new');
define('YELLOWCUBE_SHIPPING_USE_EXISTING', 'use_existing');

/**
 * Implements hook_menu().
 */
function yellowcube_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/services/yellowcube/add'] = array(
    'title' => 'Add a YellowCube shipping service',
    'description' => 'Create a new YellowCube shipping service, including a title and base shipping rate.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellowcube_shipping_service_form', yellowcube_commerce_shipping_service_new()),
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'includes/yellowcube_shipping_service.admin.inc',
  );

  foreach (commerce_shipping_services('yellowcube') as $name => $shipping_service) {
    // Convert underscores to hyphens for the menu item argument.
    $service_name_arg = 'yellowcube-' . strtr($name, '_', '-');

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/edit'] = array(
      'title' => 'Edit',
      'description' => 'Edit the YellowCube shipping service.',
      'page callback' => 'yellowcube_shipping_service_edit_page',
      'page arguments' => array($name),
      'access arguments' => array('administer shipping'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 0,
      'file' => 'includes/yellowcube_shipping_service.admin.inc',
    );

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/delete'] = array(
      'title' => 'Delete',
      'description' => 'Delete the YellowCube shipping service.',
      'page callback' => 'yellowcube_shipping_service_delete_page',
      'page arguments' => array($name),
      'access arguments' => array('administer shipping'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 10,
      'file' => 'includes/yellowcube_shipping_service.admin.inc',
    );
  }

  $items['admin/commerce/config/shipping/yellowcube'] = array(
    'title' => 'YellowCube',
    'description' => 'Configure YellowCube integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellowcube_admin_settings_form'),
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    'file' => 'includes/yellowcube.admin.inc',
  );

  $items['admin/commerce/config/yellowcube_stock'] = array(
    'title' => 'YellowCube stock management',
    'description' => 'YellowCube stock management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellowcube_inventory_form'),
    'access arguments' => array('administer commerce_product entities'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    'file' => 'includes/yellowcube.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function yellowcube_commerce_shipping_method_info() {
  return array(
    'yellowcube' => array(
      'title' => t('YellowCube'),
      'description' => t('Configure shipping through YellowCube'),
    ),
  );
}

/**
 * Returns all or one YellowCube products.
 *
 * @param string $name Optional product name to get only one result.
 *
 * @return array
 */
function yellowcube_commerce_products($name = null) {
  $products = array(
    'postpac_eco' => array(
      'title' => t('PostPac Economy'),
      'basic' => 'ECO',
      'additional' => ''
    ),
    'postpac_eco_signature'=> array(
      'title' => t('PostPac Economy mit Unterschrift (SI)'),
      'basic' => 'ECO',
      'additional' => 'SI'
    ),
    'postpac_prio'=> array(
      'title' => t('PostPac Priority'),
      'basic' => 'PRI',
      'additional' => ''
    ),
    'postpac_prio_signature'=> array(
      'title' => t('PostPac Priority mit Unterschrift (SI)'),
      'basic' => 'PRI',
      'additional' => 'SI'
    ),
    'postpac_prio_signature_evening'=> array(
      'title' => t('PostPac Priority SI Abendzustellung'),
      'basic' => 'PRI',
      'additional' => 'SI;AZ'
    ),
    'postpac_prio_signature_saturday'=> array(
      'title' => t('PostPac Priority SI Samstagszustellung'),
      'basic' => 'PRI',
      'additional' => ''
    ),
    'pickup_apost'=> array(
      'title' => t('Abholung A-Post'),
      'basic' => 'PICKUP',
      'additional' => 'APOST'
    ),
    'pickup_international_prio_gr'=> array(
      'title' => t('Abholung International Priority Gross'),
      'basic' => 'PICKUP',
      'additional' => 'INTPRI;GR'
    ),
    'pickup_international_prio_mx'=> array(
      'title' => t('Abholung International Priority Maxi'),
      'basic' => 'PICKUP',
      'additional' => 'INTPRI;MX'
    ),
    'pickup_international_eco_gr'=> array(
      'title' => t('Abholung International Economy Gross'),
      'basic' => 'PICKUP',
      'additional' => 'INTECO;GR'
    ),
    'pickup_international_eco_mx'=> array(
      'title' => t('Abholung International Economy Maxi'),
      'basic' => 'PICKUP',
      'additional' => 'INTECO;GR'
    ),
    'pickup_oftringen'=> array(
      'title' => t('Abholung in Oftringen'),
      'basic' => 'PICKUP',
      'additional' => ''
    ),
  );

  if (!empty($name)) {
    return $products[$name];
  }

  return $products;
}

/**
 * Returns a list of all product titles keyed by their name.
 *
 * @return array
 */
function yellowcube_shipping_service_product_titles() {
  $options = array();
  foreach (yellowcube_commerce_products() as $key => $product) {
    $options[$key] = $product['title'];
  }

  return $options;
}

/**
 * Returns an initialized yellowcube shipping service array for forms.
 */
function yellowcube_commerce_shipping_service_new() {
  return array(
    'name' => '',
    'title' => '',
    'display_title' => '',
    'product' => '',
    'base_rate' => array(
      'amount' => 0,
      'currency_code' => commerce_default_currency(),
      'data' => array(),
    ),
    'data' => array(),
    'is_new' => TRUE,
  );
}

/**
 * Returns a YellowCube product for given shipping service.
 *
 * @param $shipping_service
 * @return array
 */
function yellowcube_commerce_product_for_shipping_service($shipping_service) {
  if (!empty($shipping_service['product'])) {
    return yellowcube_commerce_products($shipping_service['product']);
  }

  $service = db_query(
    'SELECT * FROM {yellowcube_shipping_service} WHERE existing_machine_name = :name',
    array('name' => $shipping_service['name'])
  )->fetchAssoc();

  if (empty($service)) {
    return array();
  }

  return yellowcube_commerce_products($service['product']);
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function yellowcube_commerce_shipping_service_info() {
  $services = array();

  // Look for shipping ervices currently defined in the database.
  $result = db_query('SELECT * FROM {yellowcube_shipping_service}')->fetchAllAssoc('name', PDO::FETCH_ASSOC);

  if (!empty($result)) {
    foreach ($result as $name => $service) {
      // Create a base rate price array for the service
      $base_rate = array(
        'amount' => $service['amount'],
        'currency_code' => $service['currency_code'],
        'data' => array(
        ),
      );

      // Unserialize the data array for the service.
      $data = !empty($service['data']) ? unserialize($service['data']) : array();

      $price_component_type = 'yellowcube_' . $name;

      // If the data array specifies an included tax, include it now.
      if (module_exists('commerce_tax') && !empty($data['include_tax']) && $tax_rate = commerce_tax_rate_load($data['include_tax'])) {
        // Reverse apply the tax.
        $tax_amount = $base_rate['amount'] - ($base_rate['amount'] / (1 + $tax_rate['rate']));
        $tax_amount = commerce_tax_rate_round_amount($tax_rate, $tax_amount);

        // Add a base price to the data array.
        $component = array(
          'amount' => $base_rate['amount'] - $tax_amount,
          'currency_code' => $base_rate['currency_code'],
          'data' => array(),
        );

        $base_rate['data'] = commerce_price_component_add($base_rate, $price_component_type, $component, TRUE, FALSE);

        // Add the tax to the data array.
        $component['amount'] = $tax_amount;
        $component['data']['tax_rate'] = $tax_rate;

        $base_rate['data'] = commerce_price_component_add($base_rate, $tax_rate['price_component'], $component, TRUE);
      }

      // Add the full service array to our return value.
      $services[$name] = array(
        'title' => $service['title'],
        'display_title' => !empty($service['display_title']) ? $service['display_title'] : $service['title'],
        'shipping_method' => 'yellowcube',
        'price_component' => $price_component_type,
        'callbacks' => array(
          'rate' => 'yellowcube_service_rate_order',
        ),
        'base_rate' => $base_rate,
        'method' => $service['method'],
        'product' => $service['product'],
        'existing_machine_name' => $service['existing_machine_name'],
        'data' => $data,
      );
    }
  }

  return $services;
}

/**
 * Saves or updates a shipping service.
 *
 * @param $shipping_service
 * @param bool $skip_reset
 * @return bool|int
 */
function yellowcube_shipping_service_save($shipping_service, $skip_reset = FALSE) {
  // Move the amount and currency code up a level in the service array.
  if (!empty($shipping_service['base_rate'])) {
    $shipping_service['amount'] = $shipping_service['base_rate']['amount'];
    $shipping_service['currency_code'] = $shipping_service['base_rate']['currency_code'];
  }

  $op = drupal_write_record('yellowcube_shipping_service', $shipping_service, empty($shipping_service['is_new']) ? 'name' : array());

  // Clear the necessary caches and rebuild the menu items.
  if (!$skip_reset) {
    commerce_shipping_services_reset();
    entity_defaults_rebuild();
    rules_clear_cache(TRUE);
    menu_rebuild();
  }

  return $op;
}

/**
 * Deletes a flat rate service.
 *
 * @param $name
 *   The machine-name of the flat rate service.
 * @param $skip_reset
 *   Boolean indicating whether or not this delete should result in shipping
 *   services being reset and the menu being rebuilt; defaults to FALSE. This is
 *   useful when you intend to perform many deletions at once, as menu
 *   rebuilding is very costly in terms of performance.
 */
function yellowcube_shipping_service_delete($name, $skip_reset = FALSE) {
  $shipping_service = commerce_shipping_service_load($name);

  db_delete('yellowcube_shipping_service')
    ->condition('name', $name)
    ->execute();

  rules_config_delete(array('commerce_shipping_service_' . $name));

  // Clear the necessary caches and rebuild the menu items.
  if (!$skip_reset) {
    commerce_shipping_services_reset();
    entity_defaults_rebuild();
    rules_clear_cache(TRUE);
    menu_rebuild();
  }

  // Notify other modules that this flat rate service has been deleted.
  module_invoke_all('yellowcube_shipping_service_delete', $shipping_service, $skip_reset);
}

/**
 * Implements hook_cron().
 */
function yellowcube_cron() {
  module_load_include('jobs.inc', 'yellowcube');

  yellowcube_job_submit_new_orders();
  yellowcube_jobs_fetch_order_updates();
}

/**
 * Implements hook_commerce_order_state_info().
 */
function yellowcube_commerce_order_state_info() {
  $order_states = array();

  $order_states['yellowcube'] = array(
    'name' => 'yellowcube',
    'title' => t('YellowCube'),
    'description' => t('Orders in this state are somewhere in the process of being handled by YellowCube.'),
    'weight' => 7,
    'default_status' => 'yellowcube_send',
  );

  return $order_states;
}

/**
 * Implements hook_commerce_order_state_info().
 */
function yellowcube_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['yellowcube_send'] = array(
    'name' => 'yellowcube_send',
    'title' => variable_get('yellowcube_status_label_sending', 'YellowCube: send to YellowCube'),
    'state' => 'yellowcube',
  );

  $order_statuses['yellowcube_received'] = array(
    'name' => 'yellowcube_received',
    'title' => variable_get('yellowcube_status_label_received', 'YellowCube: received by YellowCube'),
    'state' => 'yellowcube',
  );

  $order_statuses['yellowcube_send_failed'] = array(
    'name' => 'yellowcube_send_failed',
    'title' => variable_get('yellowcube_status_label_failed', 'YellowCube: sending to YellowCube failed'),
    'state' => 'yellowcube',
  );

  return $order_statuses;
}

/**
 * Shipping service callback: returns the base rate for a flat rate service.
 */
function yellowcube_service_rate_order($shipping_service, $order) {
  if ($shipping_service['method'] === YELLOWCUBE_SHIPPING_USE_EXISTING) {
    return array();
  }

  return $shipping_service['base_rate'];
}

/**
 * Product data transmission batch definition: ART
 */
function yellowcube_batch_send_data() {

  $product_count = db_query("SELECT COUNT(DISTINCT product_id) FROM {commerce_product} WHERE (type = 'yellowcube_demo_product')")->fetchField();

  $products = db_select('commerce_product', 'cp')
    ->fields('cp', array('product_id', 'sku'))
    ->orderBy('cp.product_id', 'ASC')
    ->where('type = :type', array(':type' => 'yellowcube_demo_product'))
    ->execute();

  // Give helpful information about how many products are being operated on.
  drupal_set_message(
    t('There are @product_count products to be transferred.',
      array(
        '@product_count' => $product_count,
      )
    )
  );

  $operations = array();
  foreach($products as $product) {
    $operations[] = array(
      'yellowcube_batch_operation_send_product', array($product),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'yellowcube_batch_send_data_finished',
    'title' => t('Processing product data submission'),
    'init_message' => t('Product submission started.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Product submission has encountered an error.'),
    'file' => 'includes/yellowcube.admin.inc',
  );
  return $batch;
}

/**
 *  Batch operation for sending data ART
 */
function yellowcube_batch_operation_send_product($current_product, &$context) {
  module_load_include('client.inc', 'yellowcube');

  //load the product and send it to yellowcube
  $product = commerce_product_load($current_product->product_id, NULL, TRUE);
  yellowcube_client_update_product($product->sku);
  $context['results'][] = $product->sku . ' : ' . check_plain($product->title);
  $context['message'] = t('Now processing %product: %sku', array('%product' => check_plain($product->title), '%sku' => $product->sku));
}

/**
 * Batch 'finished' callback used for sending data
 */
function yellowcube_batch_send_data_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The product data submission to YellowCube was successfully completed'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

/**
 * Product data transmission batch definition: ART
 */
function yellowcube_batch_fetch_inventory_data() {
  $service = yellowcube_client_get_service();

  //Get all stock items from yellowcube
  $stock_items = $service->getInventory();

  $product_count = count($stock_items);

  // Give helpful information about how many products are being operated on.
  drupal_set_message(
    t('YellowCube reports @product_count products with a stock level.',
      array(
        '@product_count' => $product_count,
      )
    )
  );

  $operations = array();
  foreach($stock_items as $product){
    $operations[] = array(
      'yellowcube_batch_operation_update_stock', array(
        array('art-no' => $product->getArticleNo(), 'qty' => $product->getQuantityUOM()->get())),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'yellowcube_batch_fetch_inventory_finished',
    'title' => t('Processing product data submission'),
    'init_message' => t('Product submission started.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Product submission has encountered an error.'),
    'file' => 'includes/yellowcube.admin.inc',
  );
  return $batch;
}

/**
 *  Batch operation for sending data ART
 */
function yellowcube_batch_operation_update_stock($stock_item, &$context) {
  module_load_include('jobs.inc', 'yellowcube');
  $article_no = $stock_item['art-no'];

  //unfortunately, not all stock items have an article number
  if (!empty($article_no)) {

    //We try to find the according product in our shop
    $product = commerce_product_load_by_sku($article_no);

    if ($product) {
      //Check pending stock items and subtract them, because yellowcube is not yet up-to-date.
      $pending_stock = yellowcube_jobs_get_pending_stock($product);
      yellowcube_stock_adjust($product, $stock_item['qty'] - $pending_stock);
    }
  }

}

/**
 * Set a particular product SKU to a fixed stock value.
 */
function yellowcube_stock_adjust($product, $new_stock) {
  if (!commerce_ss_product_type_enabled($product->type)) {
    return;
  }

  //only update stock and display a message if the stock level differs
  $old_stock = $product->commerce_stock['und'][0]['value'];
  if($old_stock != $new_stock) {

    $wrapper = entity_metadata_wrapper('commerce_product', $product);
    $wrapper->commerce_stock->set($new_stock);
    $result = $wrapper->save();

    if ($result) {
      watchdog('commerce_stock', 'Modified stock level of product %sku from %fromamount to %amount.', array(
        '%sku' => $product->sku,
        '%fromamount' => $old_stock,
        '%amount' => $new_stock,
        ));

      drupal_set_message(
        t(
          'Modified stock level of product %sku from %fromamount to %amount.',
          array(
            '%sku' => $product->sku,
            '%fromamount' => $old_stock,
            '%amount' => $new_stock,
          )
        )
      );

    }
  }
}


/**
 * Batch 'finished' callback used for sending data
 */
function yellowcube_batch_fetch_inventory_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The stock update was successful'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}
