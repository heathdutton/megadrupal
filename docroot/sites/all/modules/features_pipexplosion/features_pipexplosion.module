<?php

/**
 * Implements hook_menu().
 */
function features_pipexplosion_menu() {
  $items = array();

  $items['admin/structure/features/pipexplosion'] = array(
    'title' => 'Pipexplosion settings',
    'description' => 'Configure the pipexplosion settings for features.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('features_pipexplosion_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer features'),
    'type' => MENU_LOCAL_TASK,
    'file' => "features_pipexplosion.admin.inc",
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_features_pipe_node_alter().
 */
function features_pipexplosion_features_pipe_node_alter(&$more, $data, $export) {
  foreach ($data as $node_type) {
    // Add the node permissions.
    if (variable_get('features_pipexplosion_node_user_permission', 1)) {
      foreach (node_list_permissions($node_type) as $permission => $info) {
        _features_pipexplosion_add_item($more, $permission, 'user_permission', $export);
      }
    }

    // Try and detect any variables that haven't been added via structure.
    if (module_exists('og') && variable_get('features_pipexplosion_node_og_permission', 1)) {
      $group_types = array();
      foreach (array_keys(node_type_get_names()) as $type) {
        if (og_is_group_type('node', $type)) {
          $group_types[] = $type;
        }
      }
      foreach (og_list_permissions($node_type) as $permission => $info) {
        foreach ($group_types as $type) {
          _features_pipexplosion_add_item($more, 'node:' . $type . ':' . $permission, 'og_features_permission', $export);
        }
      }
    }

    // Try and detect any variables that haven't been added via structure.
    if (module_exists('strongarm') && variable_get('features_pipexplosion_node_variable', 1)) {
      global $conf;
      foreach ($conf as $name => $value) {
        if (substr_compare($name, $node_type, -strlen($node_type),
          strlen($node_type)) === 0) {
          _features_pipexplosion_add_item($more, $name, 'variable', $export);
        }
      }
    }

    // Adds the comment field for this node type.
    if (module_exists('comment') && variable_get('features_pipexplosion_node_comment_field', 1)) {
      if ($info = field_info_instances('comment', 'comment_node_' . $node_type)) {
        foreach ($info as $field_name => $field_info) {
          _features_pipexplosion_add_item($more, "comment-comment_node_{$node_type}-{$field_name}", 'field', $export);
        }
      }
    }

    // Add any views that are filtered by this view.
    if (module_exists('views') && variable_get('features_pipexplosion_node_views_view', 0)) {
      foreach (views_get_all_views() as $view_name => $view)  {
        foreach ($view->display as $display_name => $display) {
          if (!empty($display->display_options['filters'])) {
            foreach ($display->display_options['filters'] as $field_info) {
              if ($field_info['table'] == 'node' && $field_info['field'] == 'type' && !empty($field_info['value']) && in_array($node_type, $field_info['value'])) {
                _features_pipexplosion_add_item($more, $view_name, 'views_view', $export);
              }
            }
          }
        }
      }
    }

    // Add any contextes specially on thise node type.
    if (module_exists('context') && variable_get('features_pipexplosion_node_context', 1) && ($contexts = context_load())) {
      foreach ($contexts as $context_name => $context_info) {
        if (!empty($context_info->conditions['Content Types']['values'][$node_type])) {
          _features_pipexplosion_add_item($more, $context_name, 'context', $export);
        }
      }
    }
  }
}

/**
 * Implements hook_features_pipe_node_alter().
 */
function features_pipexplosion_features_pipe_user_role_alter(&$more, $data, $export) {
  module_load_include('inc', 'features', 'includes/features.user');
  $roles = _user_features_get_roles();
  foreach ($data as $role_name) {
    // Add the node permissions.
    if (variable_get('features_pipexplosion_user_role_user_permission', 1)) {
      if ($rid = array_search($role_name, $roles)) {
        $permissions = user_role_permissions(array($rid => $role_name));
        foreach (array_filter($permissions[$rid]) as $permission => $enabled) {
          _features_pipexplosion_add_item($more, $permission, 'user_permission', $export);
        }
      }
    }
  }
}

/**
 * Adds the key to more array if hasn't been added anywhere else.
 */
function _features_pipexplosion_add_item(&$more, $key, $component, $export) {
  $more[$component] = isset($more[$component]) ? $more[$component] : array();
  if ((!isset($export['features_exclude'][$component]) || !in_array($key, $export['features_exclude'][$component]))
    && (!isset($export['features'][$component]) || !in_array($key, $export['features'][$component]))
    && (!in_array($key, $more[$component]))) {
    $more[$component][] = $key;
  }
}
