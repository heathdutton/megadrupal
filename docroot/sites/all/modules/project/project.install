<?php
/**
 * @file
 * Install, update, and uninstall functions for the Project module.
 */

/**
 * Implements hook_install().
 */
function project_install() {
  require_once(dirname(__FILE__) . '/includes/project_node_type.inc');
  $t = get_t();

  /**
   * Set up project-specific field for project type.
   */
  $project_type = array(
    'entity_types' => array('node'),
    'type' => 'list_text',
    'field_name' => 'field_project_type',
    'label' => $t('Project type'),
    'settings' => array(
      'allowed_values' => array(
        'full' => $t('Full project'),
        'sandbox' => $t('Sandbox project'),
      ),
      'allowed_values_function' => '',
    ),
    'cardinality' => 1,
  );
  field_create_field($project_type);

  project_install_default_project_node_type();
}

/**
 * Implements hook_uninstall().
 */
function project_uninstall() {
  // TODO: should we delete these fields as part of uninstall, or not?
  // This kills the field and all of the field data.
  // Also, should we delete the project_node_type node type?
  if (!field_has_data('field_project_type')) {
    require_once(dirname(__FILE__) . '/includes/project_node_type.inc');
    project_uninstall_default_project_node_type();
    field_delete_field('field_project_type');
    watchdog('project', 'Deleted the :field_name field from all content type instances.', array(':field_name' => 'field_project_type'));
  }

  // Delete the project_behavior settings for all node types.
  foreach (node_type_get_types() as $type) {
    variable_del('project_behavior_' . $type->type);
  }
  // Remove other project variables.
  variable_del('project_require_lowercase_machinename');
}

/**
 * Implements hook_schema().
 */
function project_schema() {
  return array(
    'project_maintainer' => array(
      'description' => t('Users who have various per-project maintainer permissions.'),
      'fields' => array(
        'nid' => array(
          'description' => t('Foreign key: node.nid of the project.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'uid' => array(
          'description' => t('Foreign key: {users}.uid of a user with any project maintainer permissions.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'update_project' => array(
          'description' => t('Can this user update(edit) the given project and modify its settings.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'administer_maintainers' => array(
          'description' => t('Can this user manipulate the maintainers for the given project.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'primary key' => array('nid', 'uid'),
    ),
  );
}

/**
 * Implements hook_update_dependencies().
 */
function project_update_dependencies() {
  $dependencies = array();
  $dependencies['project'][7000] = array(
    'profile' => 7001,  // @todo Figure out how to make this conditional...
    'system' => 7052,
  );
  return $dependencies;
}

/**
 * Ensure project node type is properly set up.
 */
function project_update_7000() {
  require_once(dirname(__FILE__) . '/includes/project_node_type.inc');
  $t = get_t();

  // Enable new dependencies.
  module_enable(array('machine_name', 'list'));
  drupal_flush_all_caches();

  /**
   * Set up project-specific field for project type.
   */
  if (!field_info_field('field_project_type')) {
    $project_type = array(
      'entity_types' => array('node'),
      'type' => 'list_text',
      'field_name' => 'field_project_type',
      'label' => $t('Project type'),
      'settings' => array(
        'allowed_values' => array(
          'full' => $t('Full project'),
          'sandbox' => $t('Sandbox project'),
        ),
        'allowed_values_function' => '',
      ),
      'cardinality' => 1,
    );
    field_create_field($project_type);
  }

  project_install_default_project_node_type();
  node_types_rebuild();
}

/**
 * Rename edit_project to update_project in {project_maintainer}.
 */
function project_update_7001() {
  if (db_field_exists('project_maintainer', 'edit_project')) {
    db_add_field('project_maintainer', 'update_project', array(
      'description' => t('Can this user update(edit) the given project and modify its settings.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));
    db_update('project_maintainer')
      ->expression('update_project', 'edit_project')
      ->execute();
    db_drop_field('project_maintainer', 'edit_project');
  }
}

/**
 * Finish renaming 'project_project' node type to 'project', move some {project_projects} data into fields.
 */
function project_update_7002() {
  $t = get_t();
  // Check if we need to run.
  if (!db_table_exists('project_projects')) {
    return $t('No legacy data detected, skipping this update.');
  }

  // Update the node type in the database.
  db_update('node')
    ->condition('type', 'project_project')
    ->fields(array('type' => 'project'))
    ->execute();

  // We are using bare queries here for speed reasons.

  // Bulk convert uri -> field_project_machine_name.
  $query = db_select('project_projects', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'uri', 'field_project_machine_name_value');

  db_insert('field_data_field_project_machine_name')
    ->from($query)
    ->execute();

  $query = db_select('project_projects', 'p');
  $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'uri', 'field_project_machine_name_value');

  db_insert('field_revision_field_project_machine_name')
    ->from($query)
    ->execute();

  // Bulk convert sandbox -> project_type
  $query = db_select('project_projects', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addExpression('CASE WHEN p.sandbox = 0 THEN :full ELSE :sandbox END', 'field_project_type_value', array(':sandbox' => 'sandbox', ':full' => 'full'));

  db_insert('field_data_field_project_type')
    ->from($query)
    ->execute();

  $query = db_select('project_projects', 'p');
  $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addExpression('CASE WHEN p.sandbox = 0 THEN :full ELSE :sandbox END', 'field_project_type_value', array(':sandbox' => 'sandbox', ':full' => 'full'));

  db_insert('field_revision_field_project_type')
    ->from($query)
    ->execute();

  // Since we have manually injected data, we need to explicitly clear the field cache.
  field_cache_clear();

  // Also ensure the node types cache is rebuilt.
  node_types_rebuild();
}

/**
 * Ensure the views are reverted to code.
 */
function project_update_7003() {
  ctools_include('object-cache');
  foreach (array('project_index', 'project_overview', 'project_types') as $viewname) {
    $view = views_get_view($viewname);
    if ($view->type == t('Overridden')) {
      // Revert the view.
      $view->delete();
      // Clear its cache.
      ctools_object_cache_clear('view', $view->name);
    }
  }
}

/**
 * Clean up more fallout from the node type rename.
 */
function project_update_7004() {
  $result = db_query('SELECT field_name FROM {field_config_instance} WHERE entity_type = :entity_type AND bundle = :bundle', array(':entity_type' => 'node', ':bundle' => 'project_project'))->fetchCol();
  foreach ($result as $field) {
    // @todo field name security check?
    db_query("UPDATE {field_data_" . $field . "} SET bundle = :newbundle WHERE bundle = :oldbundle", array(':newbundle' => 'project', ':oldbundle' => 'project_project'));
    db_query("UPDATE {field_revision_" . $field . "} SET bundle = :newbundle WHERE bundle = :oldbundle", array(':newbundle' => 'project', ':oldbundle' => 'project_project'));
    if ($field != 'body') {
      // Update the instance config.
      db_query("UPDATE {field_config_instance} SET bundle = :newbundle WHERE field_name = :name AND entity_type = :type AND bundle = :oldbundle", array(':newbundle' => 'project', ':name' => $field, ':type' => 'node', ':oldbundle' => 'project_project'));
    }
  }
  field_cache_clear();
}

/**
 * Migrate misc. data from D6.
 */
function project_update_7005() {
  $t = get_t();
  // Check if we need to run.
  if (!db_table_exists('project_projects')) {
    return $t('No legacy data detected, skipping this update.');
  }

  if (!module_enable(array('link'))) {
    // Link module was missing but we have data to migrate.
    throw new DrupalUpdateException(t('Project requires the Link module during data migration. Please install it and rerun updates.'));
  }

  foreach (array('homepage', 'changelog', 'demo', 'documentation', 'screenshots', 'license') as $field_name) {
    $field = array(
      'translatable' => '0',
      'settings' => array(
        'attributes' => array(
          'target' => 'default',
          'class' => '',
          'rel' => 'nofollow',
        ),
        'url' => 0,
        'title' => 'none',
        'title_value' => '',
        'title_maxlength' => 128,
        'enable_tokens' => 1,
        'display' => array(
          'url_cutoff' => 80,
        ),
      ),
      'field_name' => 'field_project_' . $field_name,
      'type' => 'link_field',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
    );
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }

    foreach (project_project_node_types() as $type) {
      $instance = array(
        'label' => ucfirst($field_name),
        'widget' => array(
          'weight' => '5',
          'type' => 'link_field',
          'active' => 0,
          'settings' => array(),
        ),
        'settings' => array(
          'validate_url' => 1,
          'url' => 0,
          'title' => 'none',
          'title_value' => '',
          'title_maxlength' => '128',
          'enable_tokens' => 1,
          'display' => array(
            'url_cutoff' => '80',
          ),
          'attributes' => array(
            'target' => 'default',
            'rel' => 'nofollow',
            'class' => '',
            'configurable_title' => 0,
            'title' => '',
          ),
          'rel_remove' => 'default',
          'user_register_form' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'link_default',
            'settings' => array(),
            'weight' => 12,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
          'issuemetadata' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
        'required' => 0,
        'description' => 'Link to project ' . $field_name . '.',
        'default_value' => NULL,
        'field_name' => 'field_project_' . $field_name,
        'entity_type' => 'node',
        'bundle' => $type,
      );
      if (!field_info_instance('node', $instance['field_name'], $instance['bundle'])) {
        field_create_instance($instance);
      }
    }

    // Bulk convert sandbox -> project_type
    $query = db_select('project_projects', 'p');
    $query->innerJoin('node', 'n', 'p.nid = n.nid');
    $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
    $query->addField('n', 'type', 'bundle');
    $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
    $query->addField('p', 'nid', 'entity_id');
    $query->addField('n', 'vid', 'revision_id');
    $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
    $query->addExpression(':delta', 'delta', array(':delta' => 0));
    $query->addField('p', $field_name, 'field_project_' . $field_name . '_url');
    $query->addExpression(':title', 'field_project_' . $field_name . '_title', array(':title' => ''));
    $query->addExpression(':data', 'field_project_' . $field_name . '_attributes', array(':data' => serialize(array())));

    db_insert('field_data_field_project_' . $field_name)
      ->from($query)
      ->execute();

    $query = db_select('project_projects', 'p');
    $query->innerJoin('node', 'nn', 'p.nid = nn.nid');
    $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
    $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
    $query->addField('nn', 'type', 'bundle');
    $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
    $query->addField('p', 'nid', 'entity_id');
    $query->addField('n', 'vid', 'revision_id');
    $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
    $query->addExpression(':delta', 'delta', array(':delta' => 0));
    $query->addField('p', $field_name, 'field_project_' . $field_name . '_url');
    $query->addExpression(':title', 'field_project_' . $field_name . '_title', array(':title' => ''));
    $query->addExpression(':data', 'field_project_' . $field_name . '_attributes', array(':data' => serialize(array())));

    db_insert('field_revision_field_project_' . $field_name)
      ->from($query)
      ->execute();
  }

  // Since we have manually injected data, we need to explicitly clear the field cache.
  field_cache_clear();
}

/**
 * If present, make sure pathauto is enabled, and set default patterns for projects.
 */
function project_update_7006() {
  if (variable_get('project_enable_alias', TRUE) && module_enable(array('pathauto'))) {
    _project_set_pathauto_defaults();
  }
  variable_del('project_enable_alias');
}

/**
 * Convert project shortname to lowercase.
 */
function project_update_7007() {
  // @todo Maybe this only work on mysql, make sure LOWER/BINARY works on pg and sqlite?
  if (variable_get('project_require_lowercase_machinename', FALSE)) {
    db_update('field_data_field_project_machine_name')
      ->fields(array('field_project_machine_name_value' => 'field_project_machine_name_value'))
      ->expression('field_project_machine_name_value', 'LOWER(field_project_machine_name_value)')
      ->condition('entity_type', 'node', '=')
      ->where('(BINARY field_project_machine_name_value <> LOWER(field_project_machine_name_value))')
      ->execute();
  }
}
