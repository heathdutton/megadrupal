<?php
/**
 * @file
 * Install and update routines for project_release.
 */

/**
 * Implements hook_install().
 */
function project_release_install() {
  // Load the code to define the default project_release node type and run it.
  require_once dirname(__FILE__)  . '/includes/project_release_node_type.inc';
  _project_release_create_release_node_type();
}

/**
 * Implements hook_uninstall().
 */
function project_release_uninstall() {

  // Load the code to define the default project_release node type and run it.
  require_once dirname(__FILE__)  . '/includes/project_release_node_type.inc';
  require_once dirname(__FILE__)  . '/project_release.module';
  _project_release_delete_release_node_type();

  $variables = array(
    'project_release_api_vocabulary',
    'project_release_directory',
    'project_release_overview',
    'project_release_unmoderate',
    'project_release_file_extensions',
    'project_release_version_extra_weights',
  );
  foreach (project_release_release_node_types() as $node_type) {
    $variables[] = 'project_release_download_base_' . $node_type;
    $variables[] = 'project_release_version_format_' . $node_type;
    $variables[] = 'node_permissions_' . $node_type;
  }
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implements hook_schema().
 */
function project_release_schema() {
  $schema['project_release_supported_versions'] = array(
    'description' => 'Table used to store information about which major versions of a project are supported and/or recommended.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {project_projects}.nid of the project_project node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'Primary Key: The {term_data}.tid of the API compatability version associated with a major version of a project.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'major' => array(
        'description' => 'Primary Key: The field_release_version_major of a release node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'supported' => array(
        'description' => 'A flag to indicate whether or not a given major version of a project is supported.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'recommended' => array(
        'description' => 'A flag to indicate whether or not a given major version of a project is recommended.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'snapshot' => array(
        'description' => 'A flag to indicate whether or not snapshot releases of a major version of a project should be shown in the release download table.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'recommended_release' => array(
        'description' => 'The release node ID of the recommended release node for this API tid and major version (the latest release without any "extra" version info such as "alpha1").',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'latest_release' => array(
        'description' => 'The release node ID of the latest release node for this API tid and major version (even if it has "extra" version info such as "alpha1").',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'latest_security_release' => array(
        'description' => 'The release node ID of the latest release node marked as a "security update" for this API tid and major version.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'tid', 'major'),
  );

  $schema['project_release_package_errors'] = array(
    'description' => 'Table used to store error messages generated by the scripts that package project_release nodes into tarballs.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {node}.nid of the project_release node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'messages' => array(
        'description' => 'The text of any error messages created by the packaging scripts.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['project_release_project_maintainer'] = array(
    'description' => t('Users who have various per-project maintainer permissions.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Foreign key: {project_projects}.nid of the project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => t('Foreign key: {users}.uid of a user with any project maintainer permissions.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'administer_releases' => array(
        'description' => t('Can this user create and administer releases for the given project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
  );

  $schema['project_release_node_rebuild_metadata'] = array(
    'description' => t('Tracks metadata about releases that are periodically rebuilt.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Foreign key: {project_release_node}.nid of the project release.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rebuild_version' => array(
        'description' => t('The current version string for this release based on the last time it was rebuilt.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid'),
  );

  $system_schema = system_schema();
  $schema['cache_project_release_download_table'] = $system_schema['cache'];
  $schema['cache_project_release_download_table']['description'] = 'Cache table for project release downloads.';

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function project_release_update_last_removed() {
  return 6014;
}

/**
 * Implements hook_update_dependencies().
 */
function project_release_update_dependencies() {
  $dependencies['project_release'][7000] = array(
    'system' => 7052,
    'project' => 7004,
  );

  return $dependencies;
}

/**
 * Ensure project release node type is properly set up.
 */
function project_release_update_7000() {
  // Enable new dependencies.
  module_enable(array('file', 'entity', 'entityreference', 'field_collection'));
  drupal_flush_all_caches();

  $t = get_t();

  $type = array(
    'type' => 'project_release',
    'name' => $t('Release'),
    'base' => 'node_content',
    'description' => $t('A release of a project with a specific version number.'),
    'has_title' => '1',
    'title_label' => $t('Title'),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'help' => '',
  );

  $type = node_type_set_defaults($type);
  node_type_save($type);
  $instance = node_add_body_field($type, 'Release notes');
  $instance['description'] = 'Enter a description of this release, such as a list of the major changes or updates.';
  field_update_instance($instance);

  // Define node workflow and comment settings.
  variable_set('node_options_project_release', array('status', 'revision'));
  variable_set('comment_project_release', COMMENT_NODE_CLOSED);

  // Set the project behavior setting for this node type say it's a release.
  variable_set('project_behavior_project_release', 'project_release');

  // Define default fields and field instances.

  // Project
  field_create_field(array(
    'entity_types' => array(),
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'base',
      'handler_submit' => 'Change handler',
      'handler_settings' => array(
        'target_bundles' => array(
          'project' => 'project',
        ),
      ),
    ),
    'field_name' => 'field_release_project',
    'type' => 'entityreference',
    'module' => 'entityreference',
    'cardinality' => '1',
    'columns' => array(
      'target_id' => array(
        'description' => $t('The id of the target entity'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
  ));
  field_create_instance(array(
    'entity_types' => array(),
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'base',
      'handler_submit' => 'Change handler',
      'handler_settings' => array(
        'target_bundles' => array(
          'project' => 'project',
        ),
        'sort' => array(
          'type' => 'none',
          'property' => 'nid',
          'field' => 'body:value',
          'direction' => 'ASC',
        ),
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
      ),
      'user_register_form' => FALSE,
    ),
    'required' => 1,
    'description' => '',
    'default_value' => NULL,
    'label' => $t('Project'),
    'type' => 'entityreference',
    'module' => 'entityreference',
    'widget' => array(
      'weight' => '-1',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'path' => '',
      ),
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '7',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'field_name' => 'field_release_project',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Full version number.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_version',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Version'),
    'widget' => array(
      'weight' => '0',
      'type' => 'text_textfield',
      'active' => 1,
      'settings' => array(
        'size' => '60',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '4',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 1,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Major component of version number.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_major',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Version major'),
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '8',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_major',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // The minor version number of a release.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_minor',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Version minor'),
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '9',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_minor',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // The patch level version number of a release.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_patch',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Version patch'),
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '14',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_patch',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // A text string that can be used to provide additional information about a
  // release. Ex: BETA
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_version_extra',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Version extra'),
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '12',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_extra',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Numeric code for ordering releases that define "version_extra".
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_ext_weight',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Version extra weight'),
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_ext_weight',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // The first span of digits found in version_extra. This is needed because we
  // cannot natural sort natively without a stored procedure.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_ext_delta',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Version extra delta'),
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '11',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_ext_delta',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Version control system label, a tag or branch name.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_vcs_label',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('VCS Label'),
    'widget' => array(
      'weight' => '1',
      'type' => 'text_textfield',
      'active' => 1,
      'settings' => array(
        'size' => '60',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'inline',
        'type' => 'text_plain',
        'weight' => '1',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => $t('The label (branch or tag) in a version control system that represents this release.'),
    'default_value' => NULL,
    'field_name' => 'field_release_vcs_label',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Build type: static, built once from a tag; dynamic, built multiple times
  // from a branch.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'allowed_values' => array(
        'static' => $t('Static'),
        'dynamic' => $t('Dynamic'),
      ),
      'allowed_values_function' => '',
    ),
    'field_name' => 'field_release_build_type',
    'type' => 'list_text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Release type'),
    'widget' => array(
      'weight' => '2',
      'type' => 'options_select',
      'active' => 1,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '5',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 1,
    'description' => $t('How is this release built? Can be either \'Static\' if the files associated with it are built once and remain unchanged (e.g. an official release from a tag), or \'Dynamic\' if the files are regularly rebuilt and updated (e.g. a development snapshot rebuilt from the end of a branch).'),
    'default_value' => array(
      0 => array(
        'value' => 'static',
      ),
    ),
    'field_name' => 'field_release_build_type',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Flag to record the update status for this release. Allowed values:
  // PROJECT_RELEASE_UPDATE_STATUS_CURRENT (0),
  // PROJECT_RELEASE_UPDATE_STATUS_NOT_CURRENT (1),
  // PROJECT_RELEASE_UPDATE_STATUS_NOT_SECURE (2)
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_update_status',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Update status'),
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '10',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_update_status',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Field collection for release files.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'path' => '',
    ),
    'field_name' => 'field_release_files',
    'type' => 'field_collection',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '-1',
  ));
  field_create_instance(array(
    'label' => $t('Release files'),
    'widget' => array(
      'weight' => '5',
      'type' => 'field_collection_embed',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'field_collection_fields',
        'weight' => '0',
        'settings' => array(
          'view_mode' => 'full',
        ),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'field_name' => 'field_release_files',
    'entity_type' => 'node',
    'bundle' => 'project_release',
    'default_value' => NULL,
  ));

  // Stores information about files attached to release nodes.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'display_field' => 0,
      'display_default' => 1,
      'uri_scheme' => 'public',
    ),
    'field_name' => 'field_release_file',
    'type' => 'file',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Release file'),
    'widget' => array(
      'weight' => '1',
      'type' => 'file_generic',
      'active' => 1,
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
    ),
    'settings' => array(
      'file_directory' => 'project',
      'file_extensions' => 'zip gz tar bz2 rar tgz tar.gz dmg rpm deb',
      'max_filesize' => '',
      'description_field' => 0,
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'file_default',
        'weight' => '0',
        'settings' => array(),
      ),
    ),
    'required' => 0,
    'description' => '',
    'field_name' => 'field_release_file',
    'entity_type' => 'field_collection_item',
    'bundle' => 'field_release_files',
  ));

  // An MD5 hash of the file.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '32',
    ),
    'field_name' => 'field_release_file_hash',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Release file hash'),
    'widget' => array(
      'weight' => '2',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'text_default',
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'weight' => '1',
        'settings' => array(),
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_file_hash',
    'entity_type' => 'field_collection_item',
    'bundle' => 'field_release_files',
  ));

  // Number of times this file has been downloaded. This value is updated by
  // site specific means.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_file_downloads',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => $t('Release file downloads'),
    'widget' => array(
      'weight' => '3',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => ',',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '0',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'number_integer',
        'weight' => '2',
        'settings' => array(
          'thousand_separator' => ',',
          'prefix_suffix' => 1,
          'decimal_separator' => '.',
          'scale' => 0,
        ),
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_file_downloads',
    'entity_type' => 'field_collection_item',
    'bundle' => 'field_release_files',
  ));

  // Field to mark if a project has releases.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'allowed_values' => array(
        '0' => '',
        '1' => '',
      ),
      'allowed_values_function' => '',
    ),
    'field_name' => 'field_project_has_releases',
    'type' => 'list_boolean',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'bundle' => 'project',
    'description' => $t(''),
    'entity_type' => 'node',
    'field_name' => 'field_project_has_releases',
    'label' => $t('Has project releases'),
    'widget' => array(
      'weight' => '-1',
      'type' => 'options_onoff',
      'module' => 'options',
      'settings' => array(
        'display_label' => TRUE,
      ),
    ),
    'default_value' => array(
      0 => array(
        'value' => '1',
      ),
    ),
  ));

  // Per-project custom version format string.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_version_format',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'bundle' => 'project',
    'entity_type' => 'node',
    'field_name' => 'field_release_version_format',
    'label' => $t('Custom version format string'),
    'widget' => array(
      'weight' => '0',
      'type' => 'text_textfield',
      'active' => 1,
      'settings' => array(
        'size' => '50',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
    ),
  ));

  // Add a recommended toggle to the API taxonomy, if there is one.
  $api_vocabulary = taxonomy_vocabulary_load(variable_get('project_release_api_vocabulary', 0));
  if ($api_vocabulary !== FALSE) {
    field_create_field(array(
      'translatable' => '0',
      'settings' => array(
        'allowed_values' => array(
          0 => '',
          1 => $t('Recommended for project releases'),
        ),
        'allowed_values_function' => '',
      ),
      'field_name' => 'field_release_recommended',
      'type' => 'list_boolean',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
    ));
    field_create_instance(array(
      'label' => $t('Recommended'),
      'widget' => array(
        'weight' => '1',
        'type' => 'options_onoff',
        'active' => 1,
        'settings' => array(
          'display_label' => 0,
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'weight' => '0',
          'settings' => array(),
        ),
      ),
      'required' => 0,
      'description' => '',
      'default_value' => array(
        0 => array(
          'value' => 1,
        ),
      ),
      'field_name' => 'field_release_recommended',
      'entity_type' => 'taxonomy_term',
      'bundle' => $api_vocabulary->machine_name,
    ));
  }
}

/**
 * project_release_download_base is now per-node-type.
 */
function project_release_update_7001() {
  $download_base = variable_get('project_release_download_base', '');
  foreach (project_release_release_node_types() as $node_type) {
    variable_set('project_release_download_base_' . $node_type, $download_base);
  }
  variable_del('project_release_download_base');
}

/**
 * Remove the project_release_browse_versions setting, which no longer exists.
 */
function project_release_update_7002() {
  variable_del('project_release_browse_versions');
}

/**
 * project_release_default_version_format is now per-node-type.
 */
function project_release_update_7003() {
  $version_format = variable_get('project_release_default_version_format', '');
  foreach (project_release_release_node_types() as $node_type) {
    variable_set('project_release_version_format_' . $node_type, $version_format);
  }
  variable_del('project_release_default_version_format');
}

/**
 * Migrate project node release fields.
 */
function project_release_update_7004() {
  $t = get_t();

  if (!db_table_exists('project_release_projects')) {
    return $t('No legacy data detected. Skipping this update.');
  }

  // Bulk convert {project_release_projects}.releases -> field_project_has_releases
  $query = db_select('project_release_projects', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'releases', 'field_project_has_releases_value');

  db_insert('field_data_field_project_has_releases')
    ->from($query)
    ->execute();

  $query = db_select('project_release_projects', 'p');
  $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'releases', 'field_project_has_releases_value');

  db_insert('field_revision_field_project_has_releases')
    ->from($query)
    ->execute();

  // Bulk convert {project_release_projects}.version_format -> field_release_version_format
  $query = db_select('project_release_projects', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'version_format', 'field_release_version_format_value');
  $query->addExpression(':format', 'field_release_version_format_format', array(':format' => NULL));
  $query->condition('p.version_format', '', '<>');

  db_insert('field_data_field_release_version_format')
    ->from($query)
    ->execute();

  $query = db_select('project_release_projects', 'p');
  $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'version_format', 'field_release_version_format_value');
  $query->addExpression(':format', 'field_release_version_format_format', array(':format' => NULL));
  $query->condition('p.version_format', '', '<>');

  db_insert('field_revision_field_release_version_format')
    ->from($query)
    ->execute();
}

/**
 * Add a column to {project_release_file} to store the file delta.
 */
function project_release_update_7005() {
  $t = get_t();

  if (!db_table_exists('project_release_file')) {
    return $t('No legacy data detected. Skipping this update.');
  }

  db_add_field('project_release_file', 'delta',
  array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Migrate release files to D7 file api.
 */
function project_release_update_7006(&$sandbox) {
  $t = get_t();

  if (!db_table_exists('project_release_file')) {
    return $t('No legacy data detected. Skipping this update.');
  }

  if (!isset($sandbox['progress'])) {
    // Initialize batch update information.
    $sandbox['progress'] = 0;
    $sandbox['last_nid_processed'] = -1;
    $sandbox['max'] = db_query("SELECT COUNT(DISTINCT r.nid) FROM {project_release_nodes} r INNER JOIN {node} n ON r.nid = n.nid INNER JOIN {node} nn ON r.pid = nn.nid")->fetchField();
  }

  $limit = variable_get('upload_update_batch_size', 100);
  $basename = variable_get('file_directory_path', conf_path() . '/files');
  $scheme = file_default_scheme() . '://';

  // Determine releases to process this batch.
  // We will process all files on these releases.
  $result = db_query_range("SELECT r.* FROM {project_release_nodes} r INNER JOIN {node} n ON r.nid = n.nid INNER JOIN {node} nn ON r.pid = nn.nid WHERE r.nid > :lastnid ORDER BY r.nid", 0, $limit, array(':lastnid' => $sandbox['last_nid_processed']));

  foreach ($result as $release) {

    $delta = 0;
    $files = db_query('SELECT f.*, r.filehash, r.downloads FROM {project_release_file} r INNER JOIN {files} f ON r.fid = f.fid WHERE r.nid = :nid ORDER BY r.weight ASC, r.fid ASC', array(':nid' => $release->nid));
    foreach ($files as $file) {
      // Migrate the file record at this point.
      // We will convert filepaths to uri using the default scheme
      // and stripping off the existing file directory path.
      $file->uri = $scheme . preg_replace('#' . preg_quote($basename, '#') . '#', '', $file->filepath, 1);
      $file->uri = file_stream_wrapper_uri_normalize($file->uri);
      // Insert into the file_managed table.
      db_merge('file_managed')
        ->key(array(
          'fid' => $file->fid,
        ))
        ->fields(array(
          'uid' => $file->uid,
          'filename' => $file->filename,
          'uri' => $file->uri,
          'filemime' => $file->filemime,
          'filesize' => $file->filesize,
          'status' => $file->status,
          'timestamp' => $file->timestamp,
        ))
        ->execute();
      db_merge('project_release_file')
        ->key(array(
          'fid' => $file->fid,
        ))
        ->fields(array(
          'delta' => $delta,
        ))
        ->execute();
      $delta++;
    }
    // Keep the sandbox count up to date.
    $sandbox['progress'] += 1;
    $sandbox['last_nid_processed'] = $release->nid;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Quickly generate field collection items to hold release files and metadata.
 */
function project_release_update_7007() {
  // Don't try this at home.

  $t = get_t();

  if (!db_table_exists('project_release_file')) {
    return $t('No legacy data detected. Skipping this update.');
  }

  // Create entities 1:1 with project release files.
  // The clever bit is that we're temporarily using the revision_id to store our fid.
  // This means we can do everything in the aggregate.
  db_query("INSERT INTO {field_collection_item} (revision_id, field_name, archived) (SELECT f.fid, 'field_release_files', 0 FROM {project_release_file} f INNER JOIN {files} ff ON f.fid = ff.fid INNER JOIN {project_release_nodes} r ON f.nid = r.nid INNER JOIN {node} n ON r.nid = n.nid INNER JOIN {node} n_p ON r.pid = n_p.nid)");
  // Generate revisions 1:1 with the freshly created entities.
  db_query("INSERT INTO {field_collection_item_revision} (item_id) (SELECT item_id FROM {field_collection_item} WHERE field_name = 'field_release_files')");

  // Inject the forward references into the host.
  $query = db_select('field_collection_item', 'i');
  $query->innerJoin('field_collection_item_revision', 'r', 'i.item_id = r.item_id');
  $query->innerJoin('project_release_file', 'f', 'i.revision_id = f.fid'); // i.revision_id = temp fid storage.
  $query->innerJoin('node', 'n', 'f.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('n', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addField('f', 'delta', 'delta');
  $query->addField('i', 'item_id', 'field_release_files_value');
  $query->addField('r', 'revision_id', 'field_release_files_revision_id');
  $query->distinct();

  db_insert("field_data_field_release_files")
    ->from($query)
    ->execute();

  $query = db_select('field_collection_item', 'i');
  $query->innerJoin('field_collection_item_revision', 'r', 'i.item_id = r.item_id');
  $query->innerJoin('project_release_file', 'f', 'i.revision_id = f.fid'); // i.revision_id = temp fid storage.
  $query->innerJoin('node_revision', 'n', 'f.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('n', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addField('f', 'delta', 'delta');
  $query->addField('i', 'item_id', 'field_release_files_value');
  $query->addField('r', 'revision_id', 'field_release_files_revision_id');

  db_insert("field_revision_field_release_files")
    ->from($query)
    ->execute();

  // Now that the host -> collection references are in place, we can repair the
  // field_collection_item entities.
  db_query("UPDATE {field_collection_item} fci, {field_collection_item_revision} fcir SET fci.revision_id = fcir.revision_id WHERE fci.item_id = fcir.item_id AND fci.field_name = 'field_release_files'");

  // Temporarily create a reverse index so we can join backwards through the forward index.
  db_add_index('field_data_field_release_files', 'tmp_rev_idx', array('field_release_files_value'));

  // Now that the entities are repaired, we can save the fields.

  // field_release_file
  $query = db_select('field_collection_item', 'i');
  $query->innerJoin('field_data_field_release_files', 'r', 'i.item_id = r.field_release_files_value');
  $query->innerJoin('project_release_file', 'f', 'r.entity_id = f.nid AND r.delta = f.delta'); // Use the delta to select the correct file for each.
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'field_collection_item'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'field_release_files'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('i', 'item_id', 'entity_id');
  $query->addField('i', 'revision_id', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('f', 'fid', 'field_release_file_fid');
  $query->addExpression(':frf_display', 'field_release_file_display', array(':frf_display' => 1));
  $query->addExpression(':frf_desc', 'field_release_file_description', array(':frf_desc' => ''));
  $query_c = clone($query);

  db_insert('field_data_field_release_file')
    ->from($query)
    ->execute();
  // Revisions are 1:1 during import because we created the entities oursleves.
  db_insert('field_revision_field_release_file')
    ->from($query_c)
    ->execute();

  // field_release_file_hash
  $query = db_select('field_collection_item', 'i');
  $query->innerJoin('field_data_field_release_files', 'r', 'i.item_id = r.field_release_files_value');
  $query->innerJoin('project_release_file', 'f', 'r.entity_id = f.nid AND r.delta = f.delta'); // Use the delta to select the correct file for each.
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'field_collection_item'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'field_release_files'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('i', 'item_id', 'entity_id');
  $query->addField('i', 'revision_id', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('f', 'filehash', 'field_release_file_hash_value');
  $query->addExpression(':frh_format', 'field_release_file_hash_format', array(':frh_format' => NULL));
  $query_c = clone($query);

  db_insert('field_data_field_release_file_hash')
    ->from($query)
    ->execute();
  // Revisions are 1:1 during import because we created the entities oursleves.
  db_insert('field_revision_field_release_file_hash')
    ->from($query_c)
    ->execute();

  // field_release_file_downloads
  $query = db_select('field_collection_item', 'i');
  $query->innerJoin('field_data_field_release_files', 'r', 'i.item_id = r.field_release_files_value');
  $query->innerJoin('project_release_file', 'f', 'r.entity_id = f.nid AND r.delta = f.delta'); // Use the delta to select the correct file for each.
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'field_collection_item'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'field_release_files'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('i', 'item_id', 'entity_id');
  $query->addField('i', 'revision_id', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('f', 'downloads', 'field_release_file_downloads_value');
  $query_c = clone($query);

  db_insert('field_data_field_release_file_downloads')
    ->from($query)
    ->execute();
  // Revisions are 1:1 during import because we created the entities oursleves.
  db_insert('field_revision_field_release_file_downloads')
    ->from($query_c)
    ->execute();

  // Add the file usage.
  // Note that during import, the usage is always 1 because we have a single field collection entity and revision per file.
  db_query("INSERT INTO {file_usage} (fid, module, type, id, count) (SELECT field_release_file_fid, 'file', 'field_collection_item', entity_id, 1 FROM {field_data_field_release_file})");
  //db_query("INSERT INTO {file_usage} (fid, module, type, id, count) (SELECT field_release_file_fid, 'file', 'field_collection_item', entity_id, COUNT(*) FROM {field_revision_field_release_file} GROUP BY field_release_file_fid, entity_id)");

  // Remove our temporary index.
  db_drop_index('field_data_field_release_files', 'tmp_rev_idx');
}

/**
 * Migrate data from {project_release_nodes} to Drupal 7.
 */
function project_release_update_7008() {
  $t = get_t();

  if (!db_table_exists('project_release_nodes')) {
    return $t('No legacy data detected. Skipping this update.');
  }

  // This code only supports the sql backend, as it plays fast and loose with
  // the update. On a site like drupal.org, this is helpful to reduce the
  // migration downtime.

  $fields = array(
    'version' => 'version',
    'version_major' => 'version_major',
    'version_minor' => 'version_minor',
    'version_patch' => 'version_patch',
    'version_extra' => 'version_extra',
    'version_ext_weight' => 'version_extra_weight',
    'version_ext_delta' => 'version_extra_delta',
    'vcs_label' => 'tag',
    'update_status' => 'update_status',
  );
  foreach ($fields as $tgt => $src) {
    // Handle an entire field with two queries to dramatically speed up the
    // migration process.

    $query = db_select('project_release_nodes', 'p');
    $query->innerJoin('node', 'n', 'p.nid = n.nid');
    $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
    $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
    $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
    $query->addField('p', 'nid', 'entity_id');
    $query->addField('n', 'vid', 'revision_id');
    $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
    $query->addExpression(':delta', 'delta', array(':delta' => 0));
    $query->addField('p', $src, "field_release_{$tgt}_value");
    if ($tgt == 'version_extra' || $tgt == 'vcs_label') {
      $query->addExpression(':format', "field_release_{$tgt}_format", array(':format' => NULL));
    }

    db_insert("field_data_field_release_$tgt")
      ->from($query)
      ->execute();

    $query = db_select('project_release_nodes', 'p');
    $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
    $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
    $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
    $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
    $query->addField('p', 'nid', 'entity_id');
    $query->addField('n', 'vid', 'revision_id');
    $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
    $query->addExpression(':delta', 'delta', array(':delta' => 0));
    $query->addField('p', $src, "field_release_{$tgt}_value");
    if ($tgt == 'version_extra' || $tgt == 'vcs_label') {
      $query->addExpression(':format', "field_release_{$tgt}_format", array(':format' => NULL));
    }

    db_insert("field_revision_field_release_$tgt")
      ->from($query)
      ->execute();
  }

  // Fill in field_release_build_type field.
  $query = db_select('project_release_nodes', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addExpression("IF(p.rebuild = 1, 'dynamic', 'static')", 'field_release_build_type_value');

  db_insert("field_data_field_release_build_type")
    ->from($query)
    ->execute();

  $query = db_select('project_release_nodes', 'p');
  $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addExpression("IF(p.rebuild = 1, 'dynamic', 'static')", 'field_release_build_type_value');

  db_insert("field_revision_field_release_build_type")
    ->from($query)
    ->execute();

  // Fill in field_release_project.
  $query = db_select('project_release_nodes', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'pid', "field_release_project_target_id");

  db_insert("field_data_field_release_project")
    ->from($query)
    ->execute();

  $query = db_select('project_release_nodes', 'p');
  $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_release'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'pid', "field_release_project_target_id");

  db_insert("field_revision_field_release_project")
    ->from($query)
    ->execute();

  // Since we have manually injected data, we need to explicitly clear the field cache.
  field_cache_clear();
}

/**
 * Move active API compatability terms to a field.
 */
function project_release_update_7009() {
  $t = get_t();

  if (!field_info_field('field_release_recommended')) {
    // Add a recommended toggle to the API taxonomy, if there is one.
    $api_vocabulary = taxonomy_vocabulary_load(variable_get('project_release_api_vocabulary', 0));
    if ($api_vocabulary !== FALSE) {
      field_create_field(array(
        'translatable' => '0',
        'settings' => array(
          'allowed_values' => array(
            0 => '',
            1 => $t('Recommended for project releases'),
          ),
          'allowed_values_function' => '',
        ),
        'field_name' => 'field_release_recommended',
        'type' => 'list_boolean',
        'active' => '1',
        'locked' => '0',
        'cardinality' => '1',
      ));
      field_create_instance(array(
        'label' => $t('Recommended'),
        'widget' => array(
          'weight' => '1',
          'type' => 'options_onoff',
          'active' => 1,
          'settings' => array(
            'display_label' => 0,
          ),
        ),
        'settings' => array(
          'user_register_form' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'hidden',
            'weight' => '0',
            'settings' => array(),
          ),
        ),
        'required' => 0,
        'description' => '',
        'default_value' => array(
          0 => array(
            'value' => 1,
          ),
        ),
        'field_name' => 'field_release_recommended',
        'entity_type' => 'taxonomy_term',
        'bundle' => $api_vocabulary->machine_name,
      ));
    }
  }


  foreach (array_filter(array_map('taxonomy_term_load', variable_get('project_release_active_compatibility_tids', array()))) as $term) {
    $term->field_release_recommended[LANGUAGE_NONE][0]['value'] = TRUE;
    taxonomy_term_save($term);
  }
  variable_del('project_release_active_compatibility_tids');
}

/**
 * Remove project release cache.
 */
function project_release_update_7010() {
  db_drop_table('cache_project_release');
}

/**
 * Re-add the missing version field.
 */
function project_release_update_7011() {
  if (function_exists('project_issue_issue_node_types')) {
    // Resave the issue node types to pick up changes.
    foreach (project_issue_issue_node_types() as $node_type) {
      $type = node_type_load($node_type);
      node_type_save($type);
    }
  }
}

/**
 * Update release body field name.
 */
function project_release_update_7012() {
  foreach (project_release_release_node_types() as $node_type) {
    $instance = field_read_instance('node', 'body', 'project_release');
    $instance['label'] = 'Release notes';
    field_update_instance($instance);
  }
}

/**
 * Access to releases is handled project-by-project. See project_node_access().
 */
function project_release_update_7013() {
  variable_set('node_permissions_project_release', FALSE);
}

/**
 * Create a cache table for project release downloads
 */
function project_release_update_7014() {
  $system_schema = system_schema();
  db_create_table('cache_project_release_download_table', array_merge($system_schema['cache'], array('description' => 'Cache table for project release downloads.')));
}

/**
 * Increase size of {project_release_package_errors}.messages.
 */
function project_release_update_7015() {
  db_change_field('project_release_package_errors', 'messages', 'messages', array(
    'description' => 'The text of any error messages created by the packaging scripts.',
    'type' => 'text',
    'size' => 'medium',
    'not null' => FALSE,
  ));
}
