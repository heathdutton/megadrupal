<?php

/**
 * @file project_package.module
 * Provides packages made up of releases of other projects.
 */

/**
 * Implement hook_views_api().
 */
function project_package_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'project_package') . '/views',
  );
}

/**
 * Implementation of hook_preprocess_views_view_table()
 *
 * Add dynamic css classes to project package tables.
 */
function project_package_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  if ($view->name == 'project_package_local_items') {
    foreach ($view->result as $num => $result) {
      if (isset($result->field_field_release_update_status [0]['raw']['value'])) {
        // View of Content
        $variables['row_classes'][$num][] = 'release-update-status-' . drupal_clean_css_identifier(drupal_strtolower($result->field_field_release_update_status[0]['raw']['value']));
      }
    }
    $variables['classes_array'][] = 'project-release';
  }
}

/**
 * Implement hook_project_release_update_status_alter().
 */
function project_package_project_release_update_status_alter(&$update_status, $release) {
  if (isset($release->project_package)) {
    // Set the update_status for a package based on its included items.
    foreach (node_load_multiple(db_query("SELECT item_nid FROM {project_package_local_release_item} WHERE package_nid = :nid", array(':nid' => $release->nid))->fetchCol()) as $item) {
      $update_status = max($update_status, $item->field_release_update_status[LANGUAGE_NONE][0]['value']);
    }
  }
}

function project_package_node_load($nodes) {
  foreach ($nodes as $node) {
    if (project_release_node_is_release($node)) {
      $count = db_query("SELECT COUNT(*) FROM {project_package_local_release_item} WHERE package_nid = :nid", array(':nid' => $node->nid))->fetchField();
      if (!empty($count)) {
        $node->project_package['count'] = $count;
      }
    }
  }
}

function project_package_node_view($node, $view_mode, $langcode) {
  if (project_release_node_is_release($node)) {
    // If this release has any packaged local items, embed the view of those.
    if (!empty($node->project_package['count'])) {
      $view_info = variable_get('project_package_release_items_view', 'project_package_local_items:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_items'] = array(
        '#prefix' => '<h3>' . t('In this package') . '</h3>',
        '#markup' => '<div class="project-release-package-items">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 2,
      );
    }

    // Embed a view into the release node output for local patches.
    $has_local_patches = db_query("SELECT 1 FROM {project_package_local_patch} WHERE package_nid = :nid LIMIT 1", array(':nid' => $node->nid))->fetchField();
    if (!empty($has_local_patches)) {
      $view_info = variable_get('project_package_local_patches_view', 'project_package_local_patches:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_local_patches'] = array(
        '#prefix' => '<h3>' . t('Patches applied in this package') . '</h3>',
        '#markup' => '<div class="project-release-package-local-patches">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 3,
      );
    }

    // Embed a view into the release node output for remote items.
    $has_remote_items = db_query("SELECT 1 FROM {project_package_remote_item} WHERE package_nid = :nid LIMIT 1", array(':nid' => $node->nid))->fetchField();
    if (!empty($has_remote_items)) {
      $view_info = variable_get('project_package_remote_items_view', 'project_package_remote_items:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_remote_items'] = array(
        '#prefix' => '<h3>' . t('External code in this package') . '</h3>',
        '#markup' => '<div class="project-release-package-remote-items">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 4,
      );
    }

    // Embed a view into the release node output for remote patches.
    $has_remote_patches = db_query("SELECT 1 FROM {project_package_remote_patch} WHERE package_nid = :nid LIMIT 1", array(':nid' => $node->nid))->fetchField();
    if (!empty($has_remote_patches)) {
      $view_info = variable_get('project_package_remote_patches_view', 'project_package_remote_patches:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_remote_patches'] = array(
        '#prefix' => '<h3>' . t('Patches applied to external code in this package') . '</h3>',
        '#markup' => '<div class="project-release-package-remote-patches">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 5,
      );
    }
  }
}

/**
 * Fix the update status whenever the status changes on items.
 */
function project_package_check_update_status($item_nids) {
  foreach (node_load_multiple(db_query("SELECT package_nid FROM {project_package_local_release_item} WHERE item_nid IN (:nids) GROUP BY package_nid", array(':nids' => $item_nids))->fetchCol()) as $package) {
    if ($package->field_release_update_status[LANGUAGE_NONE][0]['value'] !== PROJECT_RELEASE_UPDATE_STATUS_NOT_SECURE) {
      $package->field_release_update_status[LANGUAGE_NONE][0]['value'] = PROJECT_RELEASE_UPDATE_STATUS_NOT_SECURE;
      field_attach_update('node', $package);
    }
  }
}

/**
 * Record a set of local items included in a given packaged release.
 *
 * @param integer $package_nid
 *   The release node ID of the package to record the remote item for.
 * @param array $local_item_nids
 *   An array of node IDs for the local item(s).
 */
function project_package_record_local_items($package_nid, $local_item_nids) {
  db_query('DELETE FROM {project_package_local_release_item} WHERE package_nid = :package_nid', array(':package_nid' => $package_nid));
  foreach ($local_item_nids as $item_nid) {
    db_query("INSERT INTO {project_package_local_release_item} (package_nid, item_nid) VALUES (:package_nid, :item)", array(':package_nid' => $package_nid, ':item' => (int) $item_nid));
  }
}

/**
 * Record a remote item (or library) included in a given release.
 *
 * @param integer $package_nid
 *   The release node ID of the package to record the remote item for.
 *
 * @param string $item_url
 *   The fully qualified URL where the remote item lives.
 *
 * @param string $name
 *   A human readable name to be associated with the item.
 */
function project_package_record_remote_item($package_nid, $item_url, $name) {
  // Try to update an existing record, if any.
  $record = (object) array(
    'package_nid' => $package_nid,
    'url' => $item_url,
    'name' => $name,
  );

  $id = db_query("SELECT id FROM {project_package_remote_item} WHERE package_nid = :nid AND url = :url", array(':nid' => $record->package_nid, ':url' => $record->url))->fetchField();
  if ($id) {
    $record->id = $id;
    $update = array('id');
  }
  else {
    $update = array();
  }

  drupal_write_record('project_package_remote_item', $record, $update);

  return $record->id;
}

/**
 * Record a patch file included in a given release package.
 *
 * @param integer $package_nid
 *   The release node ID of the package to record the patch information for.
 *
 * @param string $patch_url
 *   The fully qualified URL where the patch file lives.
 *
 * @param integer $item_id
 *   The local release item ID, or remote item ID to which the patch applies.
 *
 *   This id references either {project_package_local_release_item}.item_nid or
 *   {project_package_remote_item}.id.
 *
 * @param string $item_type
 *   The type of item to which the patch is applied. Either 'local' or 'remote'.
 *
 *   Items marked 'local', correspond to items recorded in
 *   {project_package_local_release_item} and items marked as 'remote'
 *   correspond with items recorded in {project_package_remote_item}.
 */
function project_package_record_patch($package_nid, $patch_url, $item_id, $item_type) {
  $patch_issue = array(
    'package_nid' => $package_nid,
    'patch_file_url' => $patch_url,
    ($item_type == 'local' ? 'item_nid' : 'remote_id') => (int) $item_id,
  );

  // See if the patch URL is a local patch.
  $url = parse_url($patch_url);
  $local_url = parse_url(file_create_url('public://'));
  if ($url['host'] === $local_url['host'] && strpos($url['path'], $local_url['path']) === 0) {
    // If it is local, see if the patch is attached to a node or comment.
    $uri = 'public://' . substr($url['path'], strlen($local_url['path']));

    // Check if the file is attached to an issue.
    $issue = db_query_range("SELECT n.nid, n.title FROM {file_managed} fm INNER JOIN {field_data_field_issue_files} fdfif ON fdfif.field_issue_files_fid = fm.fid INNER JOIN {node} n ON n.nid = fdfif.entity_id WHERE fm.uri = :uri", 0, 1, array(':uri' => $uri))->fetchObject();
    if ($issue) {
      $patch_issue['patch_nid'] = $issue->nid;
      $patch_issue['patch_description_url'] = $issue->title;

      // todo when [#1549280] lands, record comment ID in $patch_issue['patch_comment_id'].
    }
  }

  // Finally, save a record into {project_package_(remote|local)_patch}.
  $table = 'project_package_' . $item_type . '_patch';
  $rows = db_select($table, 'pp')
    ->condition('package_nid', $package_nid)
    ->condition('patch_file_url', $patch_url)
    ->countQuery()->execute()->fetchField();
  if ($rows > 0) {
    $query = db_update($table)
      ->condition('package_nid', $package_nid)
      ->condition('patch_file_url', $patch_url);
  }
  else {
    $query = db_insert($table);
  }
  $query->fields($patch_issue)->execute();
}

/**
 * Remove all records containing package contents for a release node.
 */
function project_package_node_delete($node) {
  db_query("DELETE FROM {project_package_local_release_item} WHERE package_nid = :nid", array(':nid' => $node->nid));
  db_query("DELETE FROM {project_package_remote_item} WHERE package_nid = :nid", array(':nid' => $node->nid));
  db_query("DELETE FROM {project_package_local_patch} WHERE package_nid = :nid", array(':nid' => $node->nid));
  db_query("DELETE FROM {project_package_remote_patch} WHERE package_nid = :nid", array(':nid' => $node->nid));
}
