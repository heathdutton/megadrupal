<?php

class ProjectInstallTestCase extends ProjectWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Project installation functionality',
      'description' => 'Test Project module functionality.',
      'group' => 'Project'
    );
  }

  /**
   * Test that project node type is create properly.
   */
  function testProjectInstallation() {
    $this->assert(array_key_exists('project', node_type_get_names()), 'Project node type is created properly.');
    $this->assert(project_node_type_is_project('project'), 'Project node type is considered a project.');
    $project = $this->createProject(array('type' => 'project'));
    $page = $this->drupalCreateNode(array('type' => 'page'));
    $this->assert(project_node_is_project($project), 'Project node is considered a project.');
    $this->assertFalse(project_node_is_project($page), 'Non-project node is NOT considered a project.');

    $loaded_project_node = project_load($project->nid);
    $this->assertEqual($project->title, $loaded_project_node->title, 'Project node loading by nid works correctly.');
    $loaded_project_node = project_load($project->field_project_machine_name[LANGUAGE_NONE][0]['value']);
    $this->assertEqual($project->title, $loaded_project_node->title, 'Project node loading by machine name works correctly.');
    $this->assertFalse(project_load($page->nid), 'Project node loading works correctly.');

    $expected = array(
      'body',
      'field_project_type',
      'field_project_machine_name',
    );
    $fields = field_info_instances('node', 'project');
    $this->assertEqual(count(array_diff($expected, array_keys($fields))), 0, 'Project specific fields are installed.');

  }
}
