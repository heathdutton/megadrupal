<?php

class ProjectMaintainersTestCase extends ProjectWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Project maintainers functionality',
      'description' => 'Test Project module maintainers access control system.',
      'group' => 'Project'
    );
  }


  protected function setUp() {
    parent::setUp();

    $perms = array('create project content', 'edit own project content', 'delete own project content', 'access user profiles');

    $this->owner = $this->drupalCreateUser($perms);
    $this->drupalLogin($this->owner);

    $this->maintainer = $this->drupalCreateUser($perms);
  }

  /**
   * Test maintainer permissions.
   */
  function testProjectMaintainerPermissions() {
    // Create project, make sure Maintainers link is shown
    $project = $this->createProject(array('uid' => $this->owner->uid));

    // Check that owner can access
    $this->drupalGet("node/$project->nid");
    $this->assertResponse(200, 'Project owner can view project');
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(200, 'Project owner can edit project.');

    // Check the maintainers tab is shown and owner is included correctly
    $this->drupalGet("node/$project->nid");
    $this->assertLink(t('Maintainers'), 0, ('Maintainers tab is shown.'));
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertLink($this->owner->name, 0, ('Project owner is displayed on form.'));
    $this->assertFieldDisabled("maintainers[{$this->owner->uid}][permissions][update project]", 'Checkbox is disabled for project owner');
    $this->assertFieldDisabled("maintainers[{$this->owner->uid}][permissions][administer maintainers]", 'Checkbox is disabled for project owner');
    $this->assertFieldCheckedByName("maintainers[{$this->owner->uid}][permissions][update project]", 'Owners permissions are automatically granted');
    $this->assertFieldCheckedByName("maintainers[{$this->owner->uid}][permissions][administer maintainers]", 'Owners permissions are automatically granted');
    $this->assertNoRaw("node/$project->nid/maintainers/delete/{$this->owner->uid}", 'No delete link is displayed for the project owner.');

    // Try to delete the owner anyway and make sure it fails.
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->owner->uid}");
    $this->assertText("You can not delete the project owner ({$this->owner->name}) as a maintainer.", 'Project owner can not be deleted as a maintainer.');

    // Verify that other users do not have access
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(403, 'Project edit form is protected.');
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(403, 'Project maintainers form is protected.');
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->maintainer->uid}");
    $this->assertResponse(403, 'Project delete maintainer form is protected.');

    // Add a new user and verify that they are added:
    // Login as owner
    $this->drupalLogin($this->owner);
    // Add new user
    $edit = array();
    $edit['new_maintainer[user]'] = $this->maintainer->name;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertLink($this->maintainer->name, 0, 'New user is displayed on form correctly.');
    $this->assertNoFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][update project]", 'Permissions not explicitly granted.');
    $this->assertNoFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][administer maintainers]", 'Permissions not explicitly granted.');

    // Test validation for adding a duplicate maintainer
    $edit = array();
    $edit['new_maintainer[user]'] = $this->maintainer->name;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertText("{$this->maintainer->name} is already a maintainer of this project.", 'Duplicate maintainers are not permitted.');

    // Add permissions to user
    $edit = array();
    $edit["maintainers[{$this->maintainer->uid}][permissions][update project]"] = TRUE;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][update project]", 'Permissions are displayed correctly on maintainers form.');
    // Login as maintainer and check access
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(200, 'User is correctly granted access to project edit form.');
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(403, 'Project maintainers form is protected.');
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->maintainer->uid}");
    $this->assertResponse(403, 'Project delete maintainer form is protected.');

    // Have owner grant administer maintainers permission
    $this->drupalLogin($this->owner);
    // Add permissions to user
    $edit = array();
    $edit["maintainers[{$this->maintainer->uid}][permissions][administer maintainers]"] = TRUE;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][administer maintainers]", 'Permissions are displayed correctly on maintainers form.');
    // Login as maintainer and check access
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(200, 'User is correctly granted access to project edit form.');

    // Remove the user from the project
    $this->drupalLogin($this->owner);
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->maintainer->uid}");
    $this->assertText("Are you sure you want to delete {$this->maintainer->name} as a maintainer of {$project->title}?", 'Deletion page is displayed properly.');
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertText("Removed {$this->maintainer->name} as a maintainer.", 'Project maintainer successfully deleted.');
    // Verify that access has been removed
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(403, 'Project edit form is protected.');
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(403, 'Project maintainers form is protected.');
  }
}
