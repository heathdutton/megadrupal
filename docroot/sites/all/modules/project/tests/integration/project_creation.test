<?php

class ProjectTestCase extends ProjectWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Project creation functionality',
      'description' => 'Test Project module functionality.',
      'group' => 'Project'
    );
  }

  /**
   * Test that project node type is create properly.
   */
  function testProjectNodeType() {

  }

//  /**
//   * Test the creation of projects and the display of project properties.
//   */
//  function testProjectCreation() {
//    // Test project node form fields.
//    $this->drupalGet('node/add/project-project');
//    $this->assertText(t('Create Project'));
//
//    // Create a project and verify that all fields are shown.
//    $edit = array();
//    $edit['title'] = $this->randomName();
//    $edit['project[uri]'] = $this->randomName(8);
//    $edit['body'] = $this->randomName(128);
//    $edit['project[homepage]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[documentation]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[license]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[screenshots]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[changelog]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[demo]'] = 'http://example.com/' . $this->randomName();
//    $this->createProject($edit);
//
//    // Check that all links show up properly.
//    $this->drupalGet('project/'. $edit['project[uri]']);
//    $this->assertText($edit['title'], t('Project found using project URI.'));
//    $this->assertLink(t('Home page'));
//    $this->assertRaw($edit['project[homepage]'], t('Project homepage displayed properly.'));
//    $this->assertLink(t('Read documentation'));
//    $this->assertRaw($edit['project[documentation]'], t('Project documentation displayed properly.'));
//    $this->assertLink(t('Read license'));
//    $this->assertRaw($edit['project[license]'], t('Project license displayed properly.'));
//    $this->assertLink(t('Look at screenshots'));
//    $this->assertRaw($edit['project[screenshots]'], t('Project screenshots displayed properly.'));
//    $this->assertLink(t('Read complete log of changes'));
//    $this->assertRaw($edit['project[changelog]'], t('Project changelog displayed properly.'));
//    $this->assertLink(t('Try out a demonstration'));
//    $this->assertRaw($edit['project[demo]'], t('Project changelog displayed properly.'));
//    $this->assertText($edit['body'], t('Project description found.'));
//  }
//
//  function testProjectEdit() {
//    $project = $this->createProject();
//
//    // Check the the URI is properly hidden when updates are not allowed
//    $this->drupalGet('node/'. $project->nid .'/edit');
//    $this->assertFieldByName('project[uri]', '', 'Shortname field displayed correctly');
//
//    variable_set('project_allow_uri_update', FALSE);
//    $this->drupalGet('node/'. $project->nid .'/edit');
//    $this->assertNoFieldByName('project[uri]', '', 'Shortname field locked from editing');
//  }
}
