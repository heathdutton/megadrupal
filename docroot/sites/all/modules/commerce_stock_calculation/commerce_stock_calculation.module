<?php
/**
 * @file
 * Module file
 */

define('STOCK_CALCULATION_DEFAULT_METHOD', 'field_value');

/**
 * Implements hook_menu().
 */
function commerce_stock_calculation_menu() {

  $items = array();

  ctools_include('plugins');

  $options = array();
  $plugins = ctools_get_plugins('commerce_stock_calculation', 'stock_calculation');

  // Show only if thereÂ´s more plugins than the default one.
  if (count($plugins) > 1) {

    $items['admin/commerce/config/stock/calculation-method-default'] = array(
      'title' => 'Stock default calculation method',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_stock_calculation_default_method'),
      'access arguments' => array('administer stock settings'),
      'file' => 'commerce_stock_calculation.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );

    $items['admin/commerce/products/%commerce_product/stock'] = array(
      'title' => 'Stock control',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_stock_calculation_settings', 3),
      'access callback' => 'commerce_stock_calculation_access',
      'access arguments' => array('administer', 3),
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'commerce_stock_calculation.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_stock_calculation_permission() {

  $permissions = array(
    'administer stock settings' => array(
      'title' => t('Administer stock settings'),
      'description' => t('Allows users to configure stock settings per product.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Checks stock access for various operations.
 */
function commerce_stock_calculation_access($op, $product = NULL, $account = NULL) {

  $product_access = commerce_entity_access($op, $product, $account, 'commerce_product');
  $administer_stock_access = user_access('administer stock settings');

  return $product_access && $administer_stock_access;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function commerce_stock_calculation_ctools_plugin_type() {
  return array(
    'stock_calculation' => array(
      'use hooks' => FALSE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_stock_calculation_ctools_plugin_directory($owner, $plugin_type) {

  if ($owner == 'commerce_stock_calculation' && $plugin_type == 'stock_calculation') {
    return 'plugins/stock_calculation';
  }

}

/**
 * Helper function to get a stock_calculation plugin instance.
 */
function commerce_stock_calculation_get_plugin_instance($id, $contexts) {

  $instances = &drupal_static(__FUNCTION__);

  if (!isset($instances[$id])) {

    ctools_include('plugins');

    $plugin = commerce_stock_calculation_get_plugin($id);
    $class = ctools_plugin_get_class($plugin, 'handler');

    $product = $contexts['product'];
    $contexts['settings'] = commerce_stock_calculation_get_active_plugin_settings($product);

    // Allows to developers to add extra information to $contexts.
    drupal_alter('stock_calculation', $id, $contexts);

    $instances[$id] = new $class($contexts);
  }

  return $instances[$id];
}

/**
 * Helper function to get the plugins as options.
 */
function commerce_stock_calculation_get_plugins_as_options($plugin_type) {

  ctools_include('plugins');

  $options = array();
  $plugins = ctools_get_plugins('commerce_stock_calculation', $plugin_type);

  foreach ($plugins as $id => $plugin) {
    $options[$id] = $plugin['label'];
  }

  return $options;
}

/**
 * Helper function to get the active plugin for a given product.
 */
function commerce_stock_calculation_get_active_plugin($product) {

  $plugin = STOCK_CALCULATION_DEFAULT_METHOD;

  $plugin_id = "stock_calculation:" . $product->product_id;

  if ($config = commerce_stock_calculation_load($plugin_id)) {
    $plugin = $config->plugin;
  }

  return $plugin;
}

/**
 * Helper function to get the active plugin for a given product.
 */
function commerce_stock_calculation_get_active_plugin_settings($product) {

  $settings = STOCK_CALCULATION_DEFAULT_METHOD;

  $plugin_id = "stock_calculation:" . $product->product_id;

  if ($config = commerce_stock_calculation_load($plugin_id)) {
    $settings = $config->settings;
  }

  return $settings;
}

/**
 * Implements hook_stock_calculation_alter().
 *
 * Useful to add extra contextual information to new plugins.
 */
function commerce_stock_calculation_stock_calculation_alter($plugin_type, &$contexts) {

  if ($plugin_type == 'field_value') {

    $product = $contexts['product'];
    $instance = field_info_instance('commerce_product', 'commerce_stock', $product->type);

    $contexts['field_instance'] = $instance;

  }

}

/**
 * Create callback for creating a new stcock calculation.
 *
 * This ensures we get proper defaults from the plugin for its settings.
 */
function commerce_stock_calculation_new($type, $set_defaults = TRUE) {

  ctools_include('export');
  $item = ctools_export_new_object('commerce_stock_calculation', $set_defaults);

  $plugin = commerce_stock_calculation_get_plugin($type);
  $item->settings = commerce_stock_calculation_get_defaults($plugin, array());

  return $item;
}

/**
 * Save a single exportable object.
 */
function commerce_stock_calculation_save($item) {

  ctools_include('export');
  return ctools_export_crud_save('commerce_stock_calculation', $item);
}

/**
 * Load a single exportable object.
 */
function commerce_stock_calculation_load($id) {

  ctools_include('export');
  return ctools_export_crud_load('commerce_stock_calculation', $id);
}

/**
 * Save a whole configuration for a product.
 */
function commerce_stock_calculation_save_config($plugin_id, $plugin_name, $plugin_settings) {

  if (!$config = commerce_stock_calculation_load($plugin_id)) {
    $config = commerce_stock_calculation_new($plugin_name);
    $config->name = $plugin_id;
  }

  $config->plugin = $plugin_name;
  $config->settings = $plugin_settings;

  // Save the calculation plugin.
  return commerce_stock_calculation_save($config);

}

/**
 * Fetch metadata on a specific content_type plugin.
 *
 * @return array
 *   An array with information about the requested plugin.
 */
function commerce_stock_calculation_get_plugin($id) {
  ctools_include('plugins');
  return ctools_get_plugins('commerce_stock_calculation', 'stock_calculation', $id);
}

/**
 * Set up the default $conf for a new instance of a plugin.
 */
function commerce_stock_calculation_get_defaults($plugin, $subtype) {

  $defaults = array();

  if (isset($plugin['defaults'])) {
    $defaults = $plugin['defaults'];
  }

  return $defaults;
}
