<?php

/**
 * @file
 * Provides a user interface for configuring the tabbed browsing widget.
 */

/**
 * Implements hook_flush_caches().
 */
function commons_bw_ui_flush_caches() {
  return array('cache_commons_bw_ui');
}

/**
 * Implements hook_permission().
 */
function commons_bw_ui_permission() {
  return array(
    'administer commons bw ui' => array(
      'title' => t('Administer Commons Browsing Widget User Interface'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function commons_bw_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/config/user-interface/commons-browsing-widget-user-interface':
      return '<p>' . t('Configure the tabs displayed in the tabbed browsing widget.') . '</p>';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function commons_bw_ui_ctools_plugin_api($module, $api) {
  if ($module == 'commons_bw_ui' && $api == 'commons_bw_ui') {
    return array(
      'version' => 1,
    );
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function commons_bw_ui_ctools_plugin_directory($module, $plugin) {
  if ($plugin =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function commons_bw_ui_module_implements_alter(&$implementations, $hook) {
  // Browsing widget.
  if ($hook == 'commons_bw_group_widget') {
    // Set Commons Browsing Widget User Interface as the sole implementation.
    $implementations = array(
      'commons_bw_ui' => FALSE,
    );
  }

  // Create all widget.
  if ($hook == 'commons_bw_create_all_widget') {
    // Set Commons Browsing Widget User Interface as the sole implementation.
    $implementations = array(
      'commons_bw_ui' => FALSE,
    );
  }

  // Entity integration.
  if ($hook == 'commons_entity_integration') {
    // Set Commons Browsing Widget User Interface as the sole implementation.
    $implementations = array(
      'commons_bw_ui' => FALSE,
    );
  }

  // An array containing the list of Commons content type modules.
  $modules = array('commons_groups', 'commons_posts', 'commons_q_a', 'commons_documents', 'commons_wikis', 'commons_polls');

  // Remove existing Commons content type hook implementations for hooks that
  // are implemented by Commons Browsing Widget User Interface.
  foreach ($modules as $module) {
    switch ($hook) {
      case 'views_default_views_alter':
      case 'views_pre_render':
        if (isset($implementations[$module])) {
          unset($implementations[$module]);
        }
        break;
    }
  }
}

/**
 * Implements hook_commons_bw_group_widget().
 */
function commons_bw_ui_commons_bw_group_widget() {
  ctools_include('export');

  $tabs = array();

  foreach (ctools_export_crud_load_all('commons_bw_ui', TRUE) as $tab) {
    // Only register enabled tabs.
    if (!empty($tab->disabled)) {
      continue;
    }

    $tabs[$tab->name] = array(
      'title' => $tab->title,
      'type' => $tab->type,
      'vid' => $tab->name,
      'display' => $tab->display,
      'weight' => $tab->weight,
      'default' => $tab->front,
      'bundle' => $tab->bundle,
    );
  }

  return $tabs;
}

/**
 * Implements hook_commons_bw_create_all_widget().
 */
function commons_bw_ui_commons_bw_create_all_widget($group) {
  ctools_include('export');

  foreach (ctools_export_crud_load_all('commons_bw_ui', TRUE) as $tab) {
    // Only register enabled tabs.
    if (!empty($tab->disabled)) {
      continue;
    }

    if (og_user_access('node', $group->nid, "create {$tab->bundle} content")) {
      $link = l(t('Create a @type', array('@type' => $tab->title)), "node/add/{$tab->bundle}",
        array('attributes' => array('class' => "commons-{$tab->bundle}-create"), 'query' => array('og_group_ref' => $group->nid))
      );

      return array(
        $tab->name => array(
          'link' => $link,
          'text' => t('Post a new @type', array('@type' => $tab->title)),
          '#weight' => $tab->weight,
        ),
      );
    }
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function commons_bw_ui_views_default_views_alter(&$views) {
  ctools_include('export');

  if (!empty($views['commons_bw_all'])) {
    foreach (ctools_export_crud_load_all('commons_bw_ui', TRUE) as $tab) {
      // Only register enabled tabs.
      if (!empty($tab->disabled)) {
        continue;
      }

      $views['commons_bw_all']->display['default']->display_options['filters']['type']['value'][$tab->bundle] = $tab->bundle;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function commons_bw_ui_views_pre_render(&$view) {
  ctools_include('export');

  if (empty($view->args[0])) {
    foreach (ctools_export_crud_load_all('commons_bw_ui', TRUE) as $tab) {
      // Only register enabled tabs.
      if (!empty($tab->disabled)) {
        continue;
      }

      if ($view->name == $tab->name) {
        $view->display_handler->handlers['empty']['area']->options['content'] = t('No @type have been created.', array('@type' => $tab->title));
      }
    }
  }
}

/**
 * Implements hook_commons_entity_integration.
 */
function commons_bw_ui_commons_entity_integration() {
  ctools_include('export');

  $tabs = array(
    'node' => array(),
  );

  foreach (ctools_export_crud_load_all('commons_bw_ui', TRUE) as $tab) {
    // Only register enabled tabs.
    if (!empty($tab->disabled)) {
      continue;
    }

    $tabs['node'][$tab->bundle] = array();
  }

  return $tabs;
}

/**
 * Implements hook_strongarm_alter().
 */
function commons_bw_ui_strongarm_alter(&$items) {
  ctools_include('export');

  foreach (ctools_export_crud_load_all('commons_bw_ui', TRUE) as $tab) {
    // Only register enabled tabs.
    if (!empty($tab->disabled)) {
      continue;
    }

    // Expose the content type for 'liking' via the Commons Like module by
    // altering the configuration for the Rate module widget that it provides.
    if (!empty($items['rate_widgets']->value)) {
      foreach($items['rate_widgets']->value as $key => $widget) {
        if ($widget->name == 'commons_like') {
          if (!in_array($tab->bundle, $items['rate_widgets']->value[$key]->node_types)) {
            $items['rate_widgets']->value[$key]->node_types[] = $tab->bundle;
          }
          if (!in_array($tab->bundle, $items['rate_widgets']->value[$key]->comment_types)) {
            $items['rate_widgets']->value[$key]->comment_types[] = $tab->bundle;
          }
        }
      }
    }
    // Expose the content type for integration with Commons Radioactivity and
    // Commons Groups.
    foreach (array('commons_radioactivity_entity_types', 'commons_groups_entity_types') as $key) {
      if (isset($items[$key])) {
        $items[$key]->value['node'][$tab->bundle] = 1;
      }
    }
  }
}

/**
 * Implements hook_form_FROM_ID_alter().
 */
function commons_bw_ui_form_commons_bw_partial_node_form_alter(&$form, &$form_state) {
  ctools_include('export');

  foreach (ctools_export_crud_load_all('commons_bw_ui', TRUE) as $tab) {
    // Only register enabled tabs.
    if (!empty($tab->disabled)) {
      continue;
    }

    if (empty($form['#entity']) || $form['#entity']->type != $tab->bundle) {
      return;
    }

    if (isset($form['title_field'])) {
      $language = $form['title_field']['#language'];
      $form['title_field'][$language][0]['value']['#title_display'] = 'invisible';
      $form['title_field'][$language][0]['value']['#placeholder'] = t('Enter a @type title.', array('@type' => $tab->title));

      // Set fields as hideable so the forms can be compacted.
      $form['title_field']['#attributes']['class'][] = 'trigger-field';
      foreach (array('body', 'og_group_ref', 'actions') as $field) {
        if (isset($form[$field])) {
          $form[$field]['#attributes']['class'][] = 'hideable-field';
        }
      }
    }

    if (isset($form['body'])) {
      $language = $form['body']['#language'];
      $form['body'][$language][0]['#title_display'] = 'invisible';
      $form['body'][$language][0]['#resizable'] = FALSE;

      $form['#pre_render'][] = 'commons_bw_ui_form_commons_bw_partial_node_form_after_build';
    }

    $form['actions']['submit']['#value'] = t('Create');
  }
}

/**
 * After build callback for commons_bw_ui_form_commons_bw_partial_node_form_alter().
 */
function commons_bw_ui_form_commons_bw_partial_node_form_after_build($form) {
  $language = $form['body']['#language'];
  $form['body'][$language][0]['format']['#access'] = FALSE;
  $form['body'][$language][0]['value']['#rows'] = 10;

  return $form;
}

/**
 * Helper function to get a list of view names.
 *
 * @return array
 *   An array of human readable view names, keyed by the view name.
 */
function _commons_bw_ui_get_view_name_options() {
  $enabled_views = array();
  $views = views_get_all_views();

  foreach ($views as $view) {
    // Skip disabled views.
    if (!empty($views[$view->name]->disabled)) {
      continue;
    }
    $enabled_views[$view->name] = ($view->human_name) ? $view->human_name : $view->name;
  }

  return $enabled_views;
}

/**
 * Helper function to get a list of view displays.
 *
 * @param $name
 *   The name of the view to get displays for.
 *
 * @return array
 *   An array of human readable display names, keyed by the display ID.
 */
function _commons_bw_ui_get_view_display_options($name = '') {
  $enabled_displays = array();

  if (!empty($name)) {
    $view = views_get_view($name);

    foreach ($view->display as $display) {
      // Skip disabled displays.
      if (!empty($display->enabled)) {
        continue;
      }
      $enabled_displays[$display->id] = $display->display_title;
    }
  }

  return $enabled_displays;
}
