<?php
/**
 * @file
 * Install, update and uninstall functions for the openid_provider_sso module.
 *
 */

/**
 * Implements hook_schema().
 */
function openid_sso_provider_schema() {
  $schema = array();
  $schema['openid_sso_provider_rps'] = array(
    'description' => 'The base table for relying party entities.',
    'fields' => array(
      'rpsid' => array(
        'description' => 'The primary identifier for the entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine-readable name of the relying party.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of the relying party type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'realm' => array(
        'description' => 'The realm URL of the relying party.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'trusted' => array(
        'description' => 'Boolean indicating whether a relying party is generally trustworthy.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => '0',
      ),
      'enabled' => array(
        'description' => 'Boolean indicating whether a relying party is active.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('rpsid'),
    'unique keys' => array(
      'type' => array('machine_name'),
    ),
  );
  return $schema;
}


/**
 * Migrate old schema to entities
 */
function openid_sso_provider_update_7100(&$sandbox) {
  // Placeholder
}


/**
 * Removing initialized but never used entries in the openid_provider_relying_party table.
 */
function openid_sso_provider_update_7101(&$sandbox) {
  $num_deleted = db_delete('openid_provider_relying_party')
    ->condition('last_time', 0)
    ->execute();
  error_log('Deleted ' . $num_deleted . ' rows in openid_provider_relying_party table');
}
