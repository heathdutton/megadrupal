<?php


/**
 * Implements hook_ctools_plugin_directory().
 *
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * where all our own plugins are.
 */
function openid_sso_provider_selection_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}


/**
 *  CONTEXT INTEGRATION: Condition
 */

/**
 * Implementation of hook_init().
 *
 * Provides the trigger for realm with Context integration
 */
function openid_sso_provider_selection_init() {

  // Allow context integration
  if (module_exists('context')) {
    if ($plugin = context_get_plugin('condition', 'realm')) {
      $plugin->execute();
    }
  }
}


/**
 * Implements hook_context_plugins()
 */
function openid_sso_provider_selection_context_plugins() {
  $plugins = array();
  $plugins['openid_sso_provider_selection_context_condition_realm'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'openid_sso_provider_selection') .'/plugins/context',
      'file' => 'openid_sso_provider_selection_context_condition_realm.inc',
      'class' => 'openid_sso_provider_selection_context_condition_realm',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}


/**
 * Implements hook_context_registry()
 */
function openid_sso_provider_selection_context_registry() {
  return array(
    'conditions' => array(
      'realm' => array(
         'title' => t('OpenID: Relying parties'),
         'plugin' => 'openid_sso_provider_selection_context_condition_realm',
      ),
    ),
  );
}



/**
*  CONTEXT INTEGRATION: Context
*/
function openid_sso_provider_selection_ctools_plugin_pre_alter(&$plugin, &$info) {

  // Redirect the entity context creation process to include complexer logic for relying party entities.
  if ($plugin['name'] == 'entity') {
    $plugin['context'] = 'openid_sso_provider_selection_context_entity_create';
  }
}


function openid_sso_provider_selection_context_entity_create($empty, $data = NULL, $conf = FALSE, $plugin) {
  // Obtain context information about relying parties from session.
  if ($data['keyword'] == 'openid_sso_provider_rps' && $data['entity_id'] == NULL) {
    // Obtain realm
    $realm = openid_sso_provider_get_realm();
    // Obtain whole relying party object
    $rp = openid_sso_provider_rps_load_by_realm($realm);
    if ($rp) {
      $data['entity_id'] = $rp->rpsid;
      // Go through regular ctools_context_creation.
      $context_rp  = ctools_context_create_entity($empty, $data, $conf, $plugin);
      return $context_rp;
    }
  }
  else {
    return ctools_context_create_entity($empty, $data, $conf, $plugin);
  }
}

function openid_sso_provider_selection_form_ctools_context_entity_settings_form_alter(&$form, &$form_state) {

  ctools_include('dependent');
  $form['type'] = array(
    '#title' => t('Enter the context type'),
    '#type' => 'radios',
    '#options' => array(
      'auto' => t('Autmatic detection of relying party by session realm'),
      'select' => t('Select a relying party'),
    ),
    '#default_value' => (is_numeric($form_state['conf']['entity_id']) ? 'select' : 'auto'),
    '#required' => TRUE,
  );

  $form['entity']['#dependency'] = array('radio:type' => array('select'));
  $form['entity']['#weight'] = 10;
  $form['#validate'][0] =  'openid_sso_provider_selection_ctools_context_entity_settings_form_validate';

}


function openid_sso_provider_selection_ctools_context_entity_settings_form_validate($form, &$form_state) {

  if ($form_state['values']['type'] == 'select') {
    // Validate the autocomplete
    if (empty($form_state['values']['entity_id']) && empty($form_state['values']['entity'])) {
      form_error($form['entity'], t('You must select an entity.'));
      return;
    }

    if (empty($form_state['values']['entity'])) {
      return;
    }

    $id = $form_state['values']['entity'];
    $preg_matches = array();
    $match = preg_match('/\[id: (\d+)\]/', $id, $preg_matches);
    if (!$match) {
      $match = preg_match('/^id: (\d+)/', $id, $preg_matches);
    }

    if ($match) {
      $id = $preg_matches[1];
    }
    if (is_numeric($id)) {
      $entity = entity_load($form_state['values']['entity_type'], array($id));
      $entity = $entity[$id];
    }
    else {
      $entity_info = entity_get_info($form_state['values']['entity_type']);
      $field = $entity_info['entity keys']['label'];
      $entity = entity_load($form_state['values']['entity_type'], FALSE, array($field => $id));
    }

    // Do not allow unpublished relying parties to be selected by unprivileged users
    // || (empty($node->status) && !(user_access('administer nodes'))) need a new sanity check at some point.
    if (!$entity) {
      form_error($form['entity'], t('Invalid entity selected.'));
    }
    else {
      $entity_id = entity_extract_ids($form_state['values']['entity_type'], $entity);
      form_set_value($form['entity_id'], $entity_id[0], $form_state);
    }
  }
  else if ($form_state['values']['type'] == 'auto') {
    unset($form_state['values']['entity_id']);
    return;
  }
}
