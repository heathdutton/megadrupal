<?php

/**
 * @file
 * Drupal hooks for OpenID Provider SSO.
 */

include_once('openid_sso_provider.inc');
include_once('openid_sso_provider.relying_parties.inc');


/**
 * Implements hook_help().
 */
function openid_sso_provider_help($path) {
  switch ($path) {
    case 'admin/config/people/openid-sso-provider':
      return t('This is a list of Relying Parties that are authorized to use this Drupal site as OpenID Simple Sign-On Provider. Users signing in to these sites will be able to use this OpenID Provider with a simplified workflow.');
    case 'admin/config/people/openid-sso-provider/add':
      return t('Add a Relying Party with OpenID Simple Sign-On support - a Drupal site with OpenID and OpenID SSO module installed and configured.');
    case 'admin/config/people/openid-sso-provider/edit':
      return t('Modify a Relying Party with OpenID Simple Sign-On support - a Drupal site with OpenID and OpenID SSO module installed and configured.');
  }
}

/**
 * Implements hook_menu().
 */
function openid_sso_provider_menu() {
  $items = array();
  $items['sso/trusted-sites'] = array(
    'page callback' => 'openid_sso_provider_relying_parties_opml',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['sso/logout'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_sso_provider_logout_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['sso/logout/redirect'] = array(
    'page callback' => 'openid_sso_provider_logout_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter() - don't allow common users to see the
 * OpenID sites page.
 */
function openid_sso_provider_menu_alter(&$items) {
  $items['user/%user/openid']['access callback'] = 'user_access';
  $items['user/%user/openid']['access arguments'] = array('administer users');
}


/**
 * Implements hook_permission().
 */
function openid_sso_provider_permission() {
  $permissions = array(
    'administer openid_sso_provider_rps' => array(
      'title' => t('Administer relying parties'),
      'description' => t('Allows users to configure relying parties and their fields.'),
      'restrict access' => TRUE,
    ),
    'view openid_sso_provider_rps entities' => array(
      'title' => t('View relying partys'),
      'description' => t('Allows users to view relying parties and their fields.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function openid_sso_provider_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'openid_sso_provider') . '/views',
  );
}


/**
 * Implements hook_ctools_plugin_directory(). @TODO: Check if used!
 */
function openid_sso_provider_ctools_plugin_directory($module, $plugin) {
  if ($plugin == 'tasks') {
    return "plugins/$plugin";
  }
  /* TODO: Check if necessary (Beta)
  elseif ($module == 'views_ui' && !empty($plugin)) {
    return "views/plugins/views_wizard";
  }
  */
}


/**
 * Implements hook_openid_provider().
 */
function openid_sso_provider_openid_provider($op = 'response', $response = NULL, $request = NULL) {

  switch ($op) {
    case 'response':
      $rp = openid_sso_provider_rps_load_by_realm($request['openid.realm']);
      if ($rp->trusted) {
        return array('openid.mode' => 'checkid_immediate');
      }
  }
}


