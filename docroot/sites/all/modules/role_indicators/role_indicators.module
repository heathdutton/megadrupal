<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function role_indicators_form_user_admin_role_alter(&$form, &$form_state) {
  // Add a URL field for each role.
  $rid = $form['rid']['#value'];
  $role_urls = variable_get('role_indicators_urls', array());
  $form['role_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('URL with more information about this role. May be used for an upsell page (for premium roles).'),
    '#default_value' => empty($role_urls[$rid]) ? '' : $role_urls[$rid],
  );
  $form['#submit'][] = 'role_indicators_user_admin_role_submit';
  $form['#validate'][] = 'role_indicators_user_admin_role_validate';
}

/**
 * Validates that a role's associated URL is valid.
 */
function role_indicators_user_admin_role_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['role_url']) && !valid_url($form_state['values']['role_url'])) {
    form_set_error('role_url', t('The role URL must be a valid URL.'));
  }
}

/**
 * Submit handler for the role edit form; saves the redirect URL.
 */
function role_indicators_user_admin_role_submit(&$form, &$form_state) {
  $role_urls = variable_get('role_indicators_urls', array());
  $rid = $form_state['values']['rid'];
  $url = $form_state['values']['role_url'];
  $role_urls[$rid] = $url;
  variable_set('role_indicators_urls', $role_urls);
  // Change the "The role has been renamed" status message to be more generic.
  foreach ($_SESSION['messages']['status'] as &$message) {
    if ($message == t('The role has been renamed.')) {
      $message = t('The configuration options have been saved.');
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function role_indicators_field_formatter_info() {
  return array(
    'role_indicators_indicator' => array(
      'label' => t('Role indicator'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function role_indicators_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    if ($item['tid'] == 'autocreate') {
      $element[$delta] = array(
        '#markup' => check_plain($item['name']),
      );
    }
    else {
      $term = $item['taxonomy_term'];
      $uri = role_indicators_get_uri($term);
      $element[$delta] = array(
        '#type' => 'link',
        '#title' => '',
        '#href' => $uri['path'],
        '#options' => $uri['options'],
      );
      // Still apply the general CSS class if this is a tac term, but has no view
      // grants.
      if (isset($term->grant_view_rids)) {
        $element[$delta]['#attributes']['class'] = role_indicators_get_classes($term->grant_view_rids);
      }
    }
  }

  return $element;

}

/**
 * Retrieves the correct URI information for a taxonomy term.
 * 
 * If the tac_redirect_403 module is enabled, and the term has a redirect URL
 * assigned, and the current user doesn't have view access to the term, this
 * function retrieves information for the redirect URL. Otherwise, it returns
 * information for the regular taxonomy term URL.
 *
 * @param $term
 *   A taxonomy term.
 *
 * @return
 *   An array suitable for url(), containing path and options keys.
 */
function role_indicators_get_uri($term) {
  if (!empty($term->tac_redirect_403[LANGUAGE_NONE][0]['url']) && !role_indicators_access($term)) {
    $uri = array('path' => $term->tac_redirect_403[LANGUAGE_NONE][0]['url'], 'options' => array());
  }
  else {
    $uri = entity_uri('taxonomy_term', $term);
  }
  return $uri;
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * Copied from taxonomy.module to make sure we have taxonomy_term available in
 * hook_field_formatter_view. Logic has been added to add those role IDs to the term
 * object that have permission to view nodes with that term.
 */
function role_indicators_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $tids = array();

  $tac_vocabs = array_flip(role_indicators_get_tac_vocabs());

  // Collect every possible term attached to any of the fieldable entities.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Force the array key to prevent duplicates.
      if ($item['tid'] != 'autocreate') {
        $tids[$item['tid']] = $item['tid'];
      }
    }
  }
  if ($tids) {
    $terms = taxonomy_term_load_multiple($tids);

    // Add an array of rids to the term corresponding to roles that have permission
    // to view content under that term.
    foreach($terms as $tid => &$term) {
      if (isset($tac_vocabs[$term->vocabulary_machine_name])) {
        $term->grant_view_rids = role_indicators_grant_view_rids($tid);
      }
    }

    // Iterate through the fieldable entities again to attach the loaded term data.
    foreach ($entities as $id => $entity) {
      $rekey = FALSE;

      foreach ($items[$id] as $delta => $item) {
        // Check whether the taxonomy term field instance value could be loaded.
        if (isset($terms[$item['tid']])) {
          // Replace the instance value with the term data.
          $items[$id][$delta]['taxonomy_term'] = $terms[$item['tid']];
        }
        // Terms to be created are not in $terms, but are still legitimate.
        else if ($item['tid'] == 'autocreate') {
          // Leave the item in place.
        }
        // Otherwise, unset the instance value, since the term does not exist.
        else {
          unset($items[$id][$delta]);
          $rekey = TRUE;
        }
      }

      if ($rekey) {
        // Rekey the items array.
        $items[$id] = array_values($items[$id]);
      }
    }
  }
}

/**
 * Determine if the current user has access to content with a given term.
 *
 * @param $term
 *   Full term object, containing the added array of rids that have view access as $term->grant_view_rids.
 * @return
 *   TRUE if access is granted, otherwise FALSE.
 */
function role_indicators_access($term) {
  return (boolean) array_intersect_key($GLOBALS['user']->roles, array_flip($term->grant_view_rids));
}

/**
 * Returns a list of vocabularies that are TAC-enabled.
 *
 * Copied from tac_alt_ui to avoid an unnecessary dependency.
 *
 * @return
 *   An array of vocabulary machine names.
 */
function role_indicators_get_tac_vocabs() {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache)) {
    $cache = db_query("SELECT DISTINCT tv.machine_name
    FROM {taxonomy_access_default} tad
    INNER JOIN {taxonomy_vocabulary} tv ON tad.vid = tv.vid
    WHERE tad.vid > 0;")->fetchCol();
  }

  return $cache;
}

/**
 * Fetch an array of rids that have permission to view content tagged with a term.
 *
 * @param $tid
 * @return
 *   Array of role rids.
 */
function role_indicators_grant_view_rids($tid) {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache[$tid])) {
    $grants = db_query('SELECT rid, grant_view FROM {taxonomy_access_term} WHERE tid = :tid', array(':tid' => $tid))->fetchAllAssoc('rid', PDO::FETCH_ASSOC);
    $cache[$tid] = array_keys(array_filter($grants, '_role_indicators_filter_view'));
  }

  return $cache[$tid];
}

/**
 * array_filter() callback - preserve those items that have a grant_view that allows viewing the node
 */
function _role_indicators_filter_view($a) {
  return $a['grant_view'] & TAXONOMY_ACCESS_NODE_ALLOW;
}

/**
 * array_map() callback - returns a role-indicator CSS class name for a role.
 */
function _role_indicators_class($a) {
  return "role-indicator-$a";
}

/**
 * Implements hook_views_api().
 */
function role_indicators_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Preprocess function for user-picture.tpl.php.
 */
function role_indicators_preprocess_user_picture(&$variables) {
  if (!empty($variables['user_picture'])) {
    $account = $variables['account'];
    if (empty($account->roles)) {
      $account = user_load($account->uid);
    }
    // Add markup indicating the user's roles, and a link to their role URL
    // if any.
    $classes = role_indicators_get_classes(array_keys($account->roles));
    $destination = role_indicators_get_role_url($account);
    if ($destination) {
      $markup = l('', $destination, array('attributes' => array('class' => $classes)));
    }
    else {
      $markup = "<span class='" . implode(' ', $classes) . "'></span>";
    }
    $variables['user_picture'] = "<div class='role-indicators-user-picture'>" . $variables['user_picture'] . $markup . '</div>';
  }
}

/**
 * Returns the correct role URL for a given user account.
 *
 * An account may have several roles, each with an associated URL. This function
 * returns the URL for the highest-weighted role with a URL associated.
 *
 * @param $account 
 *   A user account.
 * 
 * @return string
 *   The highest-weighted URL for this user's roles, or an empty string if none.
 */
function role_indicators_get_role_url($account) {
  // Retrieve a list of roles ordered by weight.
  $roles = &drupal_static(__FUNCTION__);
  if (!isset($roles)) {
    $roles = user_roles();
  }
  $role_urls = variable_get('role_indicators_urls', array());

  foreach ($roles as $rid => $name) {
    if (!empty($account->roles[$rid]) && !empty($role_urls[$rid])) {
      return $role_urls[$rid];
    }
  }
  return '';
}

/**
 * Retrieves a list of classes to be used as role indicators.
 *
 * @param array $rids
 *   The role IDs for which to output classes.
 *
 * @return array
 *   An array of role-indicator-n classes.
 */
function role_indicators_get_classes($rids) {
  $classes = array_map('_role_indicators_class', $rids);
  $classes[] = 'role-indicator';
  return $classes;
}
