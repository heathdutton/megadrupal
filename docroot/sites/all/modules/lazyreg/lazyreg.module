<?php

function lazyreg_help($section) {
  switch ($section) {
    case 'admin/help#lazyreg':
      $output = t('<p><strong>Help for lazy registration.</strong></p>
                <p>This modules offers lazy registration capabilities. More to come in this section.</p>
                  ');
      break;
    
    case 'admin/modules#description':
      $output = t('Offers lazy registration support.');
      break;
  }
  
  return $output;
}

function lazyreg_block($op = 'list', $delta = 0) {
  global $user;
  
  if ($op == 'list') {
     $blocks[0]['info'] = t('Temporary user');
     return $blocks;
  }
  else if ($op == 'view') {
    $block = array();

    switch ($delta) {
      case 0:
        $block['subject'] = t('Temporary user');
        if ($user->uid) {
          $res = db_query('SELECT * from {lazyreg} where uid = %d', $user->uid);
          if (db_num_rows($res) > 0) {
            $block['content'] = t('You are using a temporary account. To keep this account, please go to <a href="%url">your account</a> and edit your info.', array('%url' => url('user/'.$user->uid)));
          }
        }
        break;
    }
    return $block;
  }
}

function lazyreg_perm() {
  return array('administer lazy registration');
}

function lazyreg_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'lazyreg',
      'access' => TRUE,
      'callback' => 'lazyreg_denied',
      'title' => t('access denied'),
      'type' => MENU_CALLBACK,
      );      
    $items[] = array(
      'path' => 'lazyreg/resend',
      'access' => TRUE,
      'callback' => 'lazyreg_resend',
      'title' => t('resend confirmation email'),
      'type' => MENU_CALLBACK,
      );      
    $items[] = array(
      'path' => 'lazyreg/new',
      'access' => TRUE,
      'callback' => 'lazyreg_new',
      'title' => 'title',
      'type' => MENU_CALLBACK,
      );
    $items[] = array(
      'path' => 'lazyreg/confirm',
      'access' => TRUE,
      'callback' => 'lazyreg_confirm',
      'title' => t('confirm account'),
      'type' => MENU_CALLBACK,
      );      
    $items[] = array(
      'path' => 'admin/settings/lazyreg',
      'title' => t('lazy registration'),
      'access' => node_access('administer lazy registration'),
      'callback' => 'lazyreg_admin');
  }
  return $items;
}

function lazyreg_admin() {
  $adhandler = variable_get('site_403', '');
  if ($adhandler == 'lazyreg') {
    $lren = 1;
  }
  else {
    $lren = 0;
  }
  
  $form['lazyreg_enabled'] = array('#type' => 'checkbox',
      '#title' => t('Enable lazy registration'),
      '#default_value' => $lren,
      '#description' => t("Select this if you'd like to use lazy registration. This will replace the 403 error handler with lazyreg's one."),
  );
    
  $form['lazyreg_skipl'] = array('#type' => 'checkbox',
      '#title' => t('Skip login screen'),
      '#default_value' => variable_get('lazyreg_skipl', 0),
      '#description' => t("This option makes Lazyreg create the temporary account automatically, instead of asking the user if he/she wants to login or to continue with a temporary account."),
  );
    
  $form['lazyreg_askemail'] = array('#type' => 'checkbox',
      '#title' => t('Ask for email at the beginning?'),
      '#default_value' => variable_get('lazyreg_askemail', 0),
      '#description' => t("To simplify account confirmation, the module can ask for the email adress before the automatic account creation. Also, an email will be sent there with the confirmation link, if that option is set."),
  );
    
  $form['lazyreg_simple'] = array('#type' => 'checkbox',
      '#title' => t('Simple confirmation'),
      '#default_value' => variable_get('lazyreg_simple', 1),
      '#description' => t("If simple confirmation is selected, the account will become a full one when a modification is made to it. Otherwise, an extra checkbox will appear on the edit account page."),
  );
    
  $form['lazyreg_confirm'] = array('#type' => 'checkbox',
      '#title' => t('Require email confirmation'),
      '#default_value' => variable_get('lazyreg_confirm', 1),
      '#description' => t("Require the user to enter a valid email address where a confirmation link will be sent to activate the account."),
  );
    
  $form['lazyreg_purge'] = array('#type' => 'textfield',
      '#title' => t('Purge accounts after how many days of inactivity?'),
      '#default_value' => variable_get('lazyreg_purge', 2),
      '#description' => t("Temporary accounts which have been inactive for this number of days will be deleted. Requires cron."),
  );
    
  $roles = user_roles(1);
  $form['lazyreg_role'] = array('#type' => 'select',
    '#title' => t('Temporary user role'),
    '#options' => $roles,
    '#default_value' => variable_get('lazyreg_role', 2),
    '#description' => t('The temporary accounts created by the module will be assigned this role. Make sure the role has the "change own username" permission. Add new roles <a href="%url">here</a>.', array('%url' => url('admin/access/roles'))),
    );
    
  $form['lazyreg_ptemplate'] = array(
    '#title' => t('Email template with password'),
    '#type' => t('textarea'),
    '#default_value' => variable_get('lazyreg_ptemplate', t("Hello %user,

    We created a temporary account for you at %site with the name %user and password %password. If you want to continue using it, please go to this link to activate it:
    %confirmation_link
    If you're not interested in using the account anymore, ignore this email. The account will be automatically deleted.

    Thank you,
    %site administrators")),
    '#description' => t('This template will be used when email confirmation is required and a password will be sent to the user. You can use the following variables which will be replaced: %user, %confirmation_link, %site, %password.'),
    );

  $form['lazyreg_template'] = array(
    '#title' => t('Email template'),
    '#type' => t('textarea'),
    '#default_value' => variable_get('lazyreg_template', t("Hello %user,

    We created a temporary account for you at %site with the username %user. If you want to continue using it, please go to this link to activate it:
    %confirmation_link
    If you're not interested in using the account anymore, ignore this email. The account will be automatically deleted.

    Thank you,
    %site administrators")),
    '#description' => t('This template will be used when email confirmation is required and no password will be sent to the user. You can use the following variables which will be replaced: %user, %confirmation_link, %site.'),
    );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save options'));
  
  return drupal_get_form('lazyreg_form_options', $form);
}

function lazyreg_form_options_submit($form_id, $form_values) {
  if ($form_values['lazyreg_enabled']) {
    variable_set('site_403', 'lazyreg');
  }
  else {
    variable_set('site_403', '');
  }
  variable_set('lazyreg_role', $form_values['lazyreg_role']);
  variable_set('lazyreg_skipl', $form_values['lazyreg_skipl']);
  variable_set('lazyreg_askemail', $form_values['lazyreg_askemail']);
  variable_set('lazyreg_simple', $form_values['lazyreg_simple']);
  variable_set('lazyreg_confirm', $form_values['lazyreg_confirm']);
  variable_set('lazyreg_purge', $form_values['lazyreg_purge']);
  variable_set('lazyreg_template', $form_values['lazyreg_template']);
  variable_set('lazyreg_ptemplate', $form_values['lazyreg_ptemplate']);
  drupal_set_message(t('The options have been saved.'));
  
  return 'admin/settings/lazyreg';
}

function lazyreg_new($email = NULL) {
  global $user;
  
  if (variable_get('lazyreg_askemail', 0)) {
    $form['lazyreg_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Your email adress'),
      '#default_value' => '',
      '#description' => t('You can enter your email adress here. It is not mandatory. If you\'d rather not, leave this field empty.'),
      );
      
    $form['submit'] = array('#type' => 'hidden', '#title' => 'lazyreg_dest', '#value' => $_GET['destination']);
    $form['submit'] = array('#type' => 'submit', '#value' => t('Continue'));
    
    return drupal_get_form('lazyreg_form_naccount', $form);
  }
  else {
    lazyreg_newacc($_GET['destination']);
  }
}

function lazyreg_form_naccount_submit($form_id, $form_values) {
  if (valid_email_address($form_values['lazyreg_email'])) {
    $email = $form_values['lazyreg_email'];
  }
  else {
    $email = NULL;
  }
  
  lazyreg_newacc($form_values['lazyreg_dest'], $email);
}

function lazyreg_check($name, $type) {
  if ($type == "user") {
    $res = db_query('select uid from {users} where name = "%s"', $name);
  }
  else {
    $res = db_query('select uid from {lazyreg} where confirm = "%s"', $name);
  }
  
  if (db_num_rows($res) == 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function lazyreg_newacc($dest, $email = NULL) {
  //we'll create a new user account and log it in
  $values[] = array();
  $values['name'] = "user".rand();
  while (!lazyreg_check($values['name'], "user")) {
    $values['name'] = "user".rand();
  }
  $values['mail'] = ($email == NULL)?$values['name']."@example.com":$email;
  $values['pass'] = user_password();
  $values['init'] = $values['mail'];
  $values['status'] = 1;
  $values['created'] = time();
  $values['uid'] = db_next_id('{users}_uid');
  
  db_query('INSERT INTO {users} (name, mail, pass, init, status, created, uid) VALUES ("%s", "%s", "%s", "%s", "%d", "%s", "%d")', $values['name'], $values['mail'], md5($values['pass']), $values['init'], $values['status'], $values['created'], $values['uid']);
  db_query("INSERT INTO {lazyreg} (uid) VALUES (%d)", $values['uid']);
  db_query('insert into {users_roles} (uid, rid) values (%d, %d)', $values['uid'], variable_get('lazyreg_role', 2));        

  $user = user_authenticate($values['name'], $values['pass']);
  
  if (!$user->uid) {
    form_set_error('login', t('Sorry. Unrecognized username or password.') .' '. l(t('Have you forgotten your password?'), 'user/password'));
    watchdog('user', t('Login attempt failed for %user: %error.', array('%user' => theme('placeholder', $form_values['name']), '%error' => theme('placeholder', $error))));
    drupal_goto('user/login');
  }
  else {
    if ($email) {
      lazyreg_sendemail($user->uid, $email, TRUE, $values['pass']);
    }
    drupal_goto($dest);
  }
}

function lazyreg_denied() {
  global $user;
  if ($user->uid == 0) {
    if (variable_get('lazyreg_skipl', 0)) {
      lazyreg_newacc(lazyreg_destination());
    }
    else {
      drupal_set_title(t('Access Denied / User Login'));
      drupal_set_message(t('You need to authentificate to continue. If you have a user account, you can login here. Or you can continue with a temporary account we\'ll automatically create for you to enjoy the website.'), 'error');
    
      menu_set_active_item('user');
      $return = menu_execute_active_handler();

      $return .= t('or<br /> <a href="%url">click here</a> to continue with a temporary account we\'ll create for you.', array('%url' => url('lazyreg/new', 'destination='.lazyreg_destination())));
    }
  }
  else {
    drupal_set_title(t('Access Denied'));
    $return = theme('lz_access_denied');
  }
  return $return;
}

function theme_lz_access_denied() {
  return t('You are not authorized to access this page.');
}

function lazyreg_destination() {
  // Drupal has reset $_GET[q], so we need a workaround. Start with home page,
  // then try to determine the correct destination.
  $destination = variable_get('site_frontpage', 'node');
  if ($internal_path = substr(request_uri(), strlen(base_path()))) {
    $uriarray = explode('/', $internal_path);
    if (!variable_get('clean_url', 0)) {
      $uriarray[0] = str_replace('?q=', '', $uriarray[0]);
    }
    $destination = implode('/', $uriarray);
  }
  return $destination;
}

function lazyreg_user($type, &$edit, &$user, $category = NULL) {
  $res = db_query('select * from {lazyreg} where uid = %d', $user->uid);
  if (db_num_rows($res) > 0) {
    $tmp_acc = 1;
    $obj = db_fetch_object($res);
    $csent = ($obj->confirm == "0")?0:1;
  }
  else {
    $tmp_acc = 0;
    $csent = 0;
  }
  
  $lrsimple = variable_get('lazyreg_simple', 1);
  $cemail = variable_get('lazyreg_confirm', 0);
  $lrole = variable_get('lazyreg_role', 2);
  
  switch ($type) {
    case 'load':
    case 'save':
    case 'register':
    case 'insert':
      break;
    case 'update':
      if ($tmp_acc && !$cemail) {
        if ($lrsimple) {
          db_query('delete from {lazyreg} where uid = %d', $user->uid);
          if ($lrole != 2) {
            db_query("delete from {users_roles} where uid = %d and rid = %d", $user->uid, variable_get('lazyreg_role', 2));
          }
        }
        else {
          if ($edit['lazyreg']) {
            db_query('delete from {lazyreg} where uid = %d', $user->uid);
            if ($lrole != 2) {
              db_query("delete from {users_roles} where uid = %d and rid = %d", $user->uid, variable_get('lazyreg_role', 2));
            }
          }
        }
      }
      else if ($tmp_acc) {
        // do we need email confirmation?
        if (!$csent) {
          if ($lrsimple) {
            lazyreg_sendemail($user->uid, $edit['mail']);
          }
          else {
            if ($edit['lazyreg']) {
              lazyreg_sendemail($user->uid, $edit['mail']);
            }
          }
          drupal_set_message("Sending mail to: ".$edit['mail']);
        }
      }
      break;  
    case 'delete':
      if ($tmp_acc) {
        db_query('delete from {lazyreg} where uid = %d', $user->uid);
      }
      break;
    case 'form':
      if ($tmp_acc) {
        if ($csent) {
          drupal_set_message(t('A confirmation email has been sent to the email address you specified. To activate your account please follow the link in the email. '));
          drupal_set_message(t('Would you like to <a href="%link">resend the confirmation email</a>?', array('%link' => url('lazyreg/resend'))));
        }
        else {
          if ($lrsimple) {
            drupal_set_message(t('This is a temporary account. To continue using it please change the username, email address and password.'), 'error');
          }
          else {
            drupal_set_message(t('This is a temporary account. If you want to keep it select the "Keep this account" option and change your information, such as email address and password.'), 'error');
            $form['lazyreg'] = array(
              '#type' => 'checkbox',
              '#title' => t('Keep this account'),
              '#value' => isset($edit['lazyreg'])?$edit['lazyreg']:0,              
            );
            return $form;
          }
        }
      }
      break;
    case 'validate':
      break;
    case 'view':
      if ($tmp_acc) {
        if ($cemail && $csent) {
          $fields[t('Temporary user')] = array();
          $fields[t('Temporary user')][] = array('title' => '', 'value' => t('This is a temporary account. To keep it you need to click the link in the confirmation email you received. You can also <a href="%link">resend the confirmation email</a>.', array('%link' => url('lazyreg/resend'))));
        }
        else {
          $fields[t('Temporary user')] = array();
          $fields[t('Temporary user')][] = array('title' => '', 'value' => t('This is a temporary account. If you wish to keep it please go to the edit page.'));
        }
        return $fields;
      }
      break;
  }
}

function lazyreg_sendemail($uid, $email, $send_pass = NULL, $pass = NULL) {
  global $base_url;
  
  if (!valid_email_address($email)) {
    return;
  }
  
  $user = user_load(array('uid' => $uid));

  $site_name = variable_get('site_name', 'drupal');
  $site_url = $base_url;
  $ccode = user_password(16);
  while (!lazyreg_check($ccode, "ccode")) {
    $ccode = user_password(16);
  }
  
  if ($send_pass != NULL) {
    $body = variable_get('lazyreg_ptemplate', '');
    $pass = user_password();
    db_query('update {users} set pass="%s" where uid=%d', md5($pass), $uid);
  }
  else {
    $body = variable_get('lazyreg_template', '');
  }
  db_query('update {lazyreg} set confirm="%s" where uid=%d', $ccode, $uid);
  $body = str_replace('%user', $user->name, $body);
  if ($send_pass) {
    $body = str_replace('%password', $pass, $body);
  }
  $body = str_replace('%site', $site_name, $body);
  $body = str_replace('%confirmation_link', url('lazyreg/confirm/'.$ccode, NULL, NULL, TRUE), $body);
  
  user_mail($email, t('Account information for %site%', array('%site%' => $site_name)), $body, NULL);
  drupal_set_message(t('The confirmation email has been sent.'));
}

function lazyreg_resend() {
  global $user;
  if ($user->uid) {
    lazyreg_sendemail($user->uid, $user->mail);
    drupal_goto('user/'.$user->uid.'/edit');
  }
  else {
    return t('You need to be logged in to resend your confirmation email.');
  }
}

function lazyreg_confirm($ccode = NULL) {
  global $user;
  
  if ($ccode == NULL) {
    return t('You need a confirmation code to enable your account.');
  }
  else {
    $res = db_query('select * from {lazyreg} where confirm="%s"', $ccode);
    if (db_num_rows($res) == 0) {
      return t('The confirmation code is not a valid one.');
    }
    else {
      $tuser = db_fetch_object($res);
      $tuid = $tuser->uid;
      
      db_query('delete from {lazyreg} where confirm="%s"', $ccode);
      
      if ($user->uid == $tuid) {
        drupal_set_message(t("Your account has been activated. You can change your password and other settings here."));
        drupal_goto("user/".$tuid."/edit");
      }
      
      return t("The account has been activated. If you haven't changed the password, request a new one <a href='%url'>here</a>.", array('%url' => url('user/password')));
    }
  }
}

function lazyreg_cron() {
  $purge_delay = variable_get('lazyreg_purge', 0);
  if ($purge_delay > 0) {
    $now = time();
    $delay = $purge_delay * 24 * 60 * 60;
    
    $uids = array();
    $res = db_query('select u.uid from {users} u, {lazyreg} r where %d - access > %d and u.uid = r.uid', $now, $delay);
    while ($o = db_fetch_object($res)) {
      $uids[] = $o->uid;
    }
    
    foreach ($uids as $uid) {
      db_query('DELETE FROM {users} WHERE uid = %d', $uid);
      db_query('DELETE FROM {sessions} WHERE uid = %d', $uid);
      db_query('DELETE FROM {users_roles} WHERE uid = %d', $uid);
      db_query('DELETE FROM {authmap} WHERE uid = %d', $uid);
      db_query('DELETE FROM {lazyreg} WHERE uid = %d', $uid);
    }

    watchdog('lazyreg', t('Deleted %num inactive users.', array('%num' => count($uids))), WATCHDOG_NOTICE);
  }
}