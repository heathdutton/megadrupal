<?php

/**
 * @file
 * Dynamic view modes per entity.
 *
 * @todo:
 *   Support other entity types, not only nodes
 *   Permissions
 */

/**
 * Set the dynamic view mode for an entity.
 *
 * @param string $entity_id
 *   The id of the entity
 *
 * @param string $entity_type
 *   The entity type of the entity
 *
 * @param string $view_mode
 *   The name of the view mode
 *
 * @return string
 *   The name of the view mode, or empty string
 */
function dynamic_view_mode_set_view_mode($entity_id, $entity_type, $view_mode) {

  if ($entity_id && $entity_type && $view_mode) {

    db_merge('dynamic_view_mode')
      ->key(array(
        'entity_id'   => $entity_id,
        'entity_type' => $entity_type,
      ))
      ->fields(array(
        'view_mode' => $view_mode,
      ))
      ->execute();
  }
}

/**
 * Returns the name of the dynamic view mode of an entity.
 *
 * @param string $entity_id
 *   The id of the entity
 *
 * @param string $entity_type
 *   The entity type of the entity
 *
 * @return string
 *   The name of the view mode, or empty string
 */
function dynamic_view_mode_get_view_mode($entity_id, $entity_type) {

  if ($entity_id && $entity_type) {

    $view_mode = db_query("SELECT view_mode FROM {dynamic_view_mode} WHERE entity_id = :id AND entity_type = :type", array(
      ':id' => $entity_id,
      ':type' => $entity_type,
    ))->fetchField();

    if ($view_mode) {
      return $view_mode;
    }
  }

  return '';
}

/**
 * Returns the name of the default dynamic view mode of an entity.
 *
 * @param string $bundle
 *   The content type of the node
 *
 * @return string
 *   The name of the view mode, or empty string
 */
function dynamic_view_mode_get_view_mode_default($bundle) {

  return variable_get('dynamic_view_mode_view_default_' . $bundle, '');
}

/**
 * Get the view modes of an entity type.
 *
 * Borrowed from ds_entity_view_modes().
 */
function dynamic_view_mode_entity_view_modes($entity_type = NULL) {

  if ($entity_type) {
    switch ($entity_type) {

      // For taxonomy terms the base table and the entity type are different.
      case 'taxonomy_term_data':
        $entity_info = entity_get_info('taxonomy_term');
        break;

      default:
        $entity_info = entity_get_info($entity_type);
        break;
    }
    return $entity_info['view modes'];
  }
}

/**
 * Get whether an entity type and bundle has the view mode field enabled.
 *
 * @param string $entity_type
 *   The entity type
 *
 * @param string $bundle
 *   The bundle
 *
 * @return bool
 *   TRUE if it is enabled, FALSE otherwise
 *
 * @todo Support other entity types
 */
function dynamic_view_mode_has_dynamic_view_mode($entity_type, $bundle) {

  if ($entity_type == 'node' && variable_get('dynamic_view_mode_enabled_' . $bundle, 0)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_entity_view_mode_alter.
 *
 * Replace the view mode.
 */
function dynamic_view_mode_entity_view_mode_alter(&$view_mode, $context) {

  if ($view_mode == 'dynamic_view_mode') {
    $ids = entity_extract_ids($context['entity_type'], $context['entity']);
    $id = current($ids);
    $dynamic = dynamic_view_mode_get_view_mode($id, $context['entity_type']);
    if ($dynamic) {
      $view_mode = $dynamic;
    }
    else {
      $dynamic = dynamic_view_mode_get_view_mode_default($context['entity']->type);
      if ($dynamic) {
        $view_mode = $dynamic;
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function dynamic_view_mode_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['dynamic_view_mode'] = array(
    'label' => t('Dynamic'),
    'custom settings' => FALSE,
  );

}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Add the view mode selector to the node edit form.
 *
 * @todo Support other entity types
 */
function dynamic_view_mode_form_node_form_alter(&$form, $form_state) {

  $enabled = variable_get('dynamic_view_mode_enabled_' . $form['type']['#value'], 0);
  if ($enabled) {

    $view_mode = dynamic_view_mode_get_view_mode_default($form['#node']->type);
    if (!empty($form['#node']->nid)) {
      $existing = dynamic_view_mode_get_view_mode($form['#node']->nid, 'node');
      if ($existing) {
        $view_mode = $existing;
      }
    }
    $limit_view_modes = variable_get('dynamic_view_mode_view_modes_' . $form['#node']->type, array());
    $options = array();
    $view_mode_settings = field_view_mode_settings('node', $form['#node']->type);
    $modes = dynamic_view_mode_entity_view_modes('node');
    foreach ($modes as $key => $item) {

      $overriden = !empty($view_mode_settings[$key]['custom_settings']);
      if ($overriden && $key != 'dynamic_view_mode') {
        if (!$limit_view_modes || in_array($key, $limit_view_modes)) {
          $options[$key] = $item['label'];
        }
      }
    }

    if ($options) {
      $form['dynamic_view_mode'] = array(
        '#type' => 'select',
        '#title' => t('Dynamic view mode'),
        '#description' => t('Specify a view mode for this entity.'),
        '#options' => $options,
        '#default_value' => $view_mode,
        '#weight' => -1,
      );

      $form['#submit'][] = 'dynamic_view_mode_submit_handler';
    }
  }
}

/**
 * Submit handler for storing the view mode field.
 */
function dynamic_view_mode_submit_handler(&$form, $form_state) {

  if (!empty($form['dynamic_view_mode']) && isset($form['dynamic_view_mode']['#value'])) {

    dynamic_view_mode_set_view_mode($form['nid']['#value'], $form['#entity_type'], $form['dynamic_view_mode']['#value']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Allow enabling the view mode field for specific content types.
 *
 * @todo Support other entity types
 */
function dynamic_view_mode_form_node_type_form_alter(&$form, $form_state) {

  $form['display']['dynamic_view_mode_enabled'] = array(
    '#title' => t('Enable Dynamic View Mode'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('dynamic_view_mode_enabled_' . $form['#node_type']->type, 0),
    '#description' => t('Adds an extra field to allow selecting a view mode.'),
    '#attributes' => array(
      'class' => array(
        'dynamic-view-mode-enabled',
      ),
    ),
  );

  $modes = dynamic_view_mode_entity_view_modes('node');
  $view_mode_settings = field_view_mode_settings('node', $form['#node_type']->type);
  foreach ($modes as $key => $item) {

    $overriden = !empty($view_mode_settings[$key]['custom_settings']);
    if ($overriden && $key != 'dynamic_view_mode') {
      $options[$key] = $item['label'];
    }
  }

  if ($options) {
    $form['display']['dynamic_view_mode'] = array(
      '#type' => 'fieldset',
      '#title' => t('Dynamic View Mode'),
      '#tree' => FALSE,
      '#states' => array(
        'visible' => array(
          '.dynamic-view-mode-enabled' => array(
            'checked' => TRUE,
          ),
        ),
      ),
    );

    $form['display']['dynamic_view_mode']['dynamic_view_mode_view_modes'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Available view modes'),
      '#description' => t('Allow only a subset of view modes. Leave empty to allow any.'),
      '#options' => $options,
      '#default_value' => variable_get('dynamic_view_mode_view_modes_' . $form['#node_type']->type, array()),
    );

    $form['display']['dynamic_view_mode']['dynamic_view_mode_view_default'] = array(
      '#type' => 'select',
      '#title' => t('Default view mode'),
      '#description' => t('View mode to use by default.'),
      '#options' => $options,
      '#default_value' => variable_get('dynamic_view_mode_view_default_' . $form['#node_type']->type, ''),
    );
  }

}

/**
 * Implements hook_node_delete().
 *
 * Delete stored view mode when the node is deleted.
 *
 * @todo Support other entity types
 */
function dynamic_view_mode_node_delete($node) {

  db_delete('dynamic_view_mode')
    ->condition('entity_id', $node->nid)
    ->condition('entity_type', 'node')
    ->execute();

}

/**
 * Implements hook_node_type_update().
 *
 * Update content type data when the type is renamed.
 */
function dynamic_view_mode_node_type_update($info) {
  if (!empty($info->old_type) && $info->type != $info->old_type) {

    $view_mode = variable_get('dynamic_view_mode_view_default_' . $info->old_type, '');
    $limit     = variable_get('dynamic_view_mode_view_modes_' . $info->old_type, array());
    $enabled   = variable_get('dynamic_view_mode_enabled_' . $info->old_type, 0);

    if ($view_mode) {
      variable_set('dynamic_view_mode_view_default_' . $info->type, $view_mode);
    }
    if ($limit) {
      variable_set('dynamic_view_mode_view_modes_' . $info->type, $limit);
    }
    if ($enabled) {
      variable_set('dynamic_view_mode_enabled_' . $info->type, $enabled);
    }

    variable_del('dynamic_view_mode_view_default_' . $info->old_type);
    variable_del('dynamic_view_mode_view_modes_' . $info->old_type);
    variable_del('dynamic_view_mode_enabled_' . $info->old_type);
  }
}

/**
 * Implements hook_node_type_delete().
 *
 * Delete content type data when the type is deleted.
 */
function dynamic_view_mode_node_type_delete($info) {

  variable_del('dynamic_view_mode_view_default_' . $info->type);
  variable_del('dynamic_view_mode_view_modes_' . $info->type);
  variable_del('dynamic_view_mode_enabled_' . $info->type);
}

/**
 * Implements hook_field_extra_fields().
 */
function dynamic_view_mode_field_extra_fields() {

  $info = array();
  $entity_info = entity_get_info();
  foreach (array_keys($entity_info) as $entity_type) {

    foreach (array_keys($entity_info[$entity_type]['bundles']) as $bundle) {

      if (dynamic_view_mode_has_dynamic_view_mode($entity_type, $bundle)) {
        $info[$entity_type][$bundle]['form']['dynamic_view_mode'] = array(
          'label' => t('View mode field'),
          'description' => t('View mode per node'),
          'weight' => -35,
        );
      }
    }
  }
  return $info;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide view mode in the manage display settings.
 */
function dynamic_view_mode_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['modes'])
      && isset($form['modes']['view_modes_custom'])
      && isset($form['modes']['view_modes_custom']['#options'])
      && isset($form['modes']['view_modes_custom']['#options']['dynamic_view_mode'])) {

    unset($form['modes']['view_modes_custom']['#options']['dynamic_view_mode']);
  }
}
