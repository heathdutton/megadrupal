<?php

/**
 * @file
 * Module for the Invites
 */  

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function invites_entity_info() {
  $return['invites'] = array(
    'label' => t('Invites'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Invites',
    'controller class' => 'InvitesController',
    'base table' => 'invites',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'invites_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the invites types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'invites_create',
    'access callback' => 'invites_access',
    'module' => 'invites',
    // The information below is used by the InvitesUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/invites',
      'file' => 'invites.admin.inc',
      'controller class' => 'InvitesUIController',
      'menu wildcard' => '%invites',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['invites_type'] = array(
    'label' => t('Invites Type'),
    'entity class' => 'InvitesType',
    'controller class' => 'InvitesTypeController',
    'base table' => 'invites_type',
    'fieldable' => FALSE,
    'bundle of' => 'invites',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'invites_type_access',
    'module' => 'invites',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/invites_types',
      'file' => 'invites_type.admin.inc',
      'controller class' => 'InvitesTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the invites types via a hook to avoid a recursion
 * issue as loading the invites types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function invites_entity_info_alter(&$entity_info) {
  foreach (invites_get_types() as $type => $info) {
    $entity_info['invites']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/invites_types/manage/%invites_type',
        'real path' => 'admin/structure/invites_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer invites types'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 */
function invites_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer invites types' => array(
      'title' => t('Administer invites types'),
      'description' => t('Create and delete fields for invites types, and set their permissions.'),
    ),
    'administer invites' => array(
      'title' => t('Administer invites'),
      'description' => t('Edit and delete all invites'),
    ),  
  );
  
  //Generate permissions per invites 
  foreach (invites_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name invites" => array(
        'title' => t('%type_name: Edit any invites', array('%type_name' => $type->label)),
      ),
      "edit own $type_name invites" => array(
        'title' => t('%type_name: Edit own invites', array('%type_name' => $type->label)),
      ),
      "view any $type_name invites" => array(
        'title' => t('%type_name: View any invites', array('%type_name' => $type->label)),
      ),
      "view own $type_name invites" => array(
        'title' => t('%type_name: View own invites', array('%type_name' => $type->label)),
      ),
      "create $type_name invites" => array(
        'title' => t('%type_name: Create invites', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a invites.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $invites
 *   Optionally aמ invites or aמ invites type to check access for. If nothing is
 *   given, access for all invites is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function invites_access($op, $invites = NULL, $account = NULL, $invites_type = NULL) {
  global $user;
  // Return true for administer invites.
  if (user_access('administer invites', $account)) {
    return TRUE;
  }
  // If no account was passed, use the global user  as account.
  if (!isset($account)) {
    $account = $user;
  }
  // If both Invites & Invites-type is missing, return false.
  if (empty($invites) && empty($invites_type)) {
    return FALSE;
  }
  // If we suspect what was passed is an Invites ID, we'll rty to load the Invites.
  if (!empty($invites) && !is_object($invites) && is_numeric($invites)) {
    $invites = invites_load($invites);
  }
  // If the Invites-type is missing we'll try to take the type from the Invites.
  if (empty($invites_type)) {
    $invites_type = $invites->type;
  }
  
  switch ($op) {
    case 'create':
      return user_access("create $invites_type invites", $account);
    case 'view':
      return user_access("view any $invites_type invites", $account)
          || (user_access("view own $invites_type invites", $account) && (!empty($invites) && $invites->inviter == $account->uid));
    case 'edit':
      return user_access("edit any $invites_type invites")
          || (user_access("view own $invites_type invites") && (!empty($invites) && $invites->inviter == $account->uid));
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function invites_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer invites types', $account);
}


/**
 * Gets an array of all invites types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return InvitesType[]
 *   Depending whether $type isset, an array of invites types or a single one.
 */
function invites_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our invites entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('invites_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a invites type by string.
 *
 * @param $type
 *   The machine-readable name of a invites type to load.
 * @return
 *   A invites type array or FALSE if $type does not exist.
 */
function invites_type_load($type) {
  return invites_get_types($type);
}


/**
 * Fetch a invites object. Make sure that the wildcard you choose 
 * in the invites entity definition fits the function name here.
 *
 * @param $invites_id
 *   Integer specifying the invites id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $invites object or FALSE if it cannot be loaded.
 *
 * @see invites_load_multiple()
 */
function invites_load($invites_id, $reset = FALSE) {
  $invites = invites_load_multiple(array($invites_id), array(), $reset);
  return reset($invites);
}


/**
 * Load multiple invites based on certain conditions.
 *
 * @param $invites_ids
 *   An array of invites IDs.
 * @param $conditions
 *   An array of conditions to match against the {invites} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of invites objects, indexed by invites_id.
 *
 * @see entity_load()
 * @see invites_load()
 */
function invites_load_multiple($invites_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('invites', $invites_ids, $conditions, $reset);
}


/**
 * Deletes a invites.
 */
function invites_delete(Invites $invites) {
  $invites->delete();
}


/**
 * Delete multiple invites.
 *
 * @param $invites_ids
 *   An array of invites IDs.
 */
function invites_delete_multiple(array $invites_ids) {
  entity_get_controller('invites')->delete($invites_ids);
}


/**
 * Create a invites object.
 */
function invites_create($values = array()) {
  return entity_get_controller('invites')->create($values);
}


/**
 * Saves a invites to the database.
 *
 * @param $invites
 *   The invites object.
 */
function invites_save(Invites $invites) {
  return $invites->save();
}


/**
 * Saves a invites type to the db.
 */
function invites_type_save(InvitesType $type) {
  $type->save();
}


/**
 * Deletes a invites type from the db.
 */
function invites_type_delete(InvitesType $type) {
  $type->delete();
}


/**
 * URI callback for invites
 */
function invites_uri(Invites $invites){
  return array(
    'path' => 'invites/' . $invites->invites_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function invites_page_title(Invites $invites){
  return $invites->mail;
}


/**
 * Sets up content to show an individual invites
 * @todo - get rid of drupal_set_title();
 */
function invites_page_view($invites, $view_mode = 'full') {    
  $controller = entity_get_controller('invites');  
  $content = $controller->view(array($invites->invites_id => $invites));
  drupal_set_title($invites->mail);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function invites_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'invites') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function invites_theme() {
  $path = drupal_get_path('module', 'invites') . '/theme';
  
  return array(
    'invites_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'invites.admin.inc',
    ),
    'invites' => array(
      'render element' => 'elements',
      'template' => 'invites',
      'path' => $path,
    ),
   'invites_sample_data' => array(
      'variables' => array('invites_sample_data', 'invites' => NULL),
      'template' => 'invites-sample-data',
      'path' => $path,
    ),
  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function invites_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/invites/add' on 'admin/structure/invites'.
  if ($root_path == 'admin/content/invites') {
    $item = menu_get_item('admin/content/invites/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for invites entities
 */
class Invites extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'invites');
  }

  protected function defaultLabel() {
    return $this->mail;
  }

  protected function defaultUri() {
    return array('path' => 'invites/' . $this->invites_id);
  }
  
  

}

/**
 * The class used for invites type entities
 */
class InvitesType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'invites_type');
  }
  
}


/**
 * The Controller for Invites entities
 */
class InvitesController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a invites - we first set up the values that are specific
   * to our invites schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the invites.
   *
   * @return
   *   A invites object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Invites
    $values += array( 
      'invites_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $invites = parent::create($values);
    return $invites;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $invites_sample_data = !empty($entity->data['sample_data']) ? check_plain($entity->data['sample_data']) : "";
    $content['invites_sample_data'] =  array(
      '#markup' => theme('invites_sample_data', array('invites_sample_data' => $invites_sample_data, 'invites' => $entity)),
    );

    return $content;
  }
  
}


/**
 * The Controller for Invites entities
 */
class InvitesTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a invites type - we first set up the values that are specific
   * to our invites type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the invites.
   *
   * @return
   *   A invites type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Invites
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $invites_type = parent::create($values);
    return $invites_type;
  }

}

/**
 * Implements hook_menu().
 */
function invites_menu() {
  $items = array();
  $items['invitation'] = array(
    'title' => 'Invitation',
    'page callback' => '_invites_approval',
    'access callback' => TRUE,
  ); 
  return $items;
}

/**
 * Page callback: Receiver for the Invites invitation mail link.
 */
function _invites_approval($token) {
  global $user;
  // Check that we have a token.
  if (empty($token)) {
    return drupal_access_denied();
  }
  // Check that we have an invites ID.
  $invites_id = _invites_get_id_by_token($token);
  if (empty($invites_id)) {
    return drupal_access_denied();
  }  
  // Check that the invitation is still valuable.
  $invites = invites_load($invites_id);
  if (empty($invites->status)) {
    return drupal_access_denied();
  }
  
  // There NO invitee - It's means there where no user
  // with that email in the time the invetation was created.
  if (empty($invites->invitee)) {
    return drupal_get_form("user_register_form", $invites->invites_token);
//    drupal_goto("user/register", array('query' => array('token' =>  $invites->invites_token, drupal_get_destination())));
  }
  // The invitee is a user in the site but The user is logged out.
  else if (empty($user->uid)) {
    // After the user login it will return to this page CB.
    // The second time there a login user 
    // and it will be passed to the else sentence.
    drupal_goto("user/login", array('query' => drupal_get_destination()));
  }
  // There a mismatch between user email and invitee email.
  else if ($user->uid != $invites->invitee) {
    drupal_set_message(t("Oops, It's seems the invitation was created for user with different email address. 
      You might want to ask for new invitation, or login with different user."), 'warning');
    drupal_goto('user');
  }
  // The user is logged in and he/she have the same email as in the invitation.
  else {
    // Let other module interfere in the Invites process.
    if (module_exists('rules')) {
      rules_invoke_event('invites_approval', $invites);
    }

    //Gets operations from other modules.
    //By using hook_invites_approval().
    module_invoke_all("invites_approval", $invites);

    // Set invites status to zero, for knowing it's have been used.
    $invites->status = 0;
    invites_save($invites);

    // Print welcome message and redirect to user page.
    $account = user_load($invites->invitee);
    drupal_set_message(t("Welcome, @name.", array('@name' => $account->name)));
    drupal_goto('user');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function invites_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $token = !empty($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : NULL;
//  $token = !empty($_GET['token']) ? $_GET['token'] : NULL;
  if (!empty($token)) {
    // Parameters.
    $invites_id = _invites_get_id_by_token($token);  
    $invites = invites_load($invites_id);

    if (!isset($form['account']['pass'])) {
      $form['account']['pass'] = array(
        '#type' => 'password_confirm',
        '#size' => 25,
        '#description' => t('Provide a password for the new account in both fields.'),
        '#required' => TRUE,
      );
    }
    
    // Form overrides.
    // Fill in the mail fron invitation & read-only the mail element.
    $form['account']['mail']['#default_value'] = $invites->mail;
    $form['account']['mail']['#attributes']['readonly'] = 'readonly';
    
    // Ensure a valid submit array.
    $form['#submit'] = is_array($form['#submit']) ? $form['#submit'] : array();

    // Replace core's registration function.
    $key = array_search('user_register_submit', $form['#submit']);
    if ($key !== FALSE) {
      // Remove core rgistartion submit fonction.
      unset($form['#submit'][$key]);
    }
    // Set our registration submit function as first.
    array_unshift($form['#submit'],'_invites_user_register_submit');
  }
}

/**
 * Submit handler for the invites user registration form.
 * @see invites_form_user_register_form_alter()
 */
function _invites_user_register_submit($form, &$form_state) {
  $token = $form_state['build_info']['args'][0];
//  $token = $_GET['token'];
  
  _invites_overrides_user_register_form_submit($form, $form_state);
  
  $invites_id = _invites_get_id_by_token($token);
  $invites = invites_load($invites_id);
  
  $invites->invitee = $form_state['values']['uid'];
  $invites->joined = time();
  invites_save($invites);
  $form_state['redirect'] = "invitation/$invites->invites_token";
}

/**
 * Helper: Set of operations for submiting new user.
 * Overrides of the system user_register_form_submit(). 
 */
function _invites_overrides_user_register_form_submit(&$form, &$form_state) {
  $admin = $form_state['values']['administer_users'];
  $notify = !empty($form_state['values']['notify']);

  // Remove unneeded values.
  form_state_values_clean($form_state);
  
  $form_state['values']['init'] = $form_state['values']['mail'];
  
  $account = $form['#user'];
  
  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Populate $edit with the properties of $account, which have been edited on
  // this form by taking over all values, which appear in the form values too.
  $edit = array_intersect_key((array) $account, $form_state['values']);
  $account = user_save($account, $edit);

  // Terminate if an error occurred during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    $form_state['redirect'] = '';
    return;
  }
  $form_state['user'] = $account;
  $form_state['values']['uid'] = $account->uid;

  watchdog('user', 'New user: %name (%email).', array('%name' => $form_state['values']['name'], '%email' => $form_state['values']['mail']), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));

  _user_mail_notify('register_no_approval_required', $account);
  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
  drupal_set_message(t('Registration successful. You are now logged in.'));
}

/**
 * Helper: Find the Invites ID by its token number.
 * @param type $token
 * @return Invites ID
 */
function _invites_get_id_by_token($token) {
  return db_query("SELECT invites_id FROM {invites} WHERE invites_token = :token", array(':token' => $token))->fetchField();
}

/**
 * Implements hook_block_info().
 */
function invites_block_info() {
  foreach (invites_get_types() as $type => $info) {
    $blocks['invites_' . $type] = array(
      'info' => t('Invites ') . $info->label,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function invites_block_view($delta = '') {
  module_load_include('inc', 'invites', 'invites.admin');
  
  $block = array();

  foreach (invites_get_types() as $type => $info) {
    if(invites_access('create', NULL, NULL, $type)) {
      if($delta == 'invites_' . $type) {
        $block['subject'] = '';
        $block['content'] = drupal_get_form('invites_edit_form', invites_create(array('type' => $type)));
        return $block;
      }
    }
  }
}
