<?php

/**
 * @file
 * Installation file for the UserName Policy module.
 */

/**
 * Implements hook_help().
 */
function username_policy_help($path, $arg) {
  switch ($path) {
    case 'admin/help#username_policy':
      $output = '';
      $output .= '<p>' . t('This module will provides a way to specify a rules to create username based on token of profile fields.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function username_policy_permission() {
  return array(
    'access username policy control' => array(
      'title' => t('Access User Policy Menu'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function username_policy_menu() {
  $items = array();
  $items['admin/config/people/username_policy'] = array(
    'title' => 'User Name Policy',
    'description' => 'User Name Policy desc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('username_policy_admin_form'),
    'access arguments' => array('access username policy control'),
    'file' => 'username_policy.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function username_policy_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    unset($form['account']['name']);
    $form['#validate'][] = 'username_policy_form_validate';
    $form['actions']['submit']['#submit'][] = 'username_policy_form_submit';
  }
}

/**
 * Implements hook_form_validate().
 */
function username_policy_form_validate($form, $form_state) {

}

/**
 * Implements hook_form_submit().
 */
function username_policy_form_submit($form, $form_state) {
  $form_state['values'] = generate_username_for_pattern($form_state['values']);
  user_register_submit($form, $form_state);
}

/**
 * Generate username according to the given pattern.
 */
function generate_username_for_pattern($form_state_values) {
  // Add caching for getting username policy pattern.
  $pattern = '';
  $cache_id = "cache:variable_get:username_policy_pattern";
  $pattern_obj = cache_get($cache_id, 'cache');
  if (empty($pattern_obj->data)) {
    $pattern = variable_get('username_policy_pattern');
    cache_set($cache_id, $pattern, 'cache', CACHE_PERMANENT);
  }
  else {
    $pattern = $pattern_obj->data;
  }
  // Generate pattern username.
  if (strlen($pattern)) {
    $offset = 0;
    $num_of_patterns = substr_count($pattern, '[');
    $generated_pattern = '';
    $for_display_array = array();
    $for_query_array = array();
    for ($itr = 0; $itr <= $num_of_patterns - 1; $itr++) {
      $str1 = strpos($pattern, '[', $offset);
      $str2 = strpos($pattern, ']', $str1);
      $length = ($str2 - $str1) - 1;
      $offset = $str2;
      $for_query = substr($pattern, ($str1 + 1), $length);
      // Process if pattern contains mandatory fields from user main profile.
      if (isset($form_state_values[$for_query]['und'][0]['value']) || isset($form_state_values[$for_query]['und'][0]['tid'])) {
        if (isset($form_state_values[$for_query]['und'][0]['value'])) {
          $string1 = $form_state_values[$for_query]['und'][0]['value'];
        }
        elseif (isset($form_state_values[$for_query]['und'][0]['tid'])) {
          $string1 = taxonomy_term_load(intval($form_state_values[$for_query]['und'][0]['tid']))->name;
        }
        $str_store = preg_replace('/\s+/', '_', $string1);
        $for_query_array[] = $str_store;
      }
      // Process if pattern contains mandatory fields from other user profiles.
      else {
        foreach ($form_state_values as $key => $val) {
          if (preg_match('/^profile_/', $key)) {
            if (isset($form_state_values[$key][$for_query]['und'][0]['value'])) {
              $string1 = $form_state_values[$key][$for_query]['und'][0]['value'];
              $str_store = preg_replace('/\s+/', '_', $string1);
              $for_query_array[] = $str_store;
            }
          }
        }
      }
      $for_display = '[' . substr($pattern, ($str1 + 1), $length) . ']';
      $for_display_array[] = $for_display;
    }
    // Generate username pattern.
    $generated_pattern = str_replace($for_display_array, $for_query_array, $pattern);
    // If username exist add incremental value.
    $result = db_query('SELECT * FROM {users} WHERE name LIKE :pattern', array(':pattern' => db_like($generated_pattern) . '%'));
    $user_name_count = $result->rowCount();

    $form_state_values['name'] = $generated_pattern;
    if ($user_name_count) {
      $form_state_values['name'] = $generated_pattern . '_' . ($user_name_count);
    }
    $form_state_values['name'] = strtolower($form_state_values['name']);
  }
  else {
    // If pattern not setted by admin, save username with email address.
    $form_state_values['name'] = $form_state_values['mail'];
  }
  return $form_state_values;
}

/**
 * Implements hook_theme().
 */
function username_policy_theme() {
  return array(
    'username_policy_pattern_elements' => array(
      'render element' => 'pattern',
    ),
  );
}

/**
 * Implement theme for username_policy_pattern_elements.
 */
function theme_username_policy_pattern_elements($vars) {
  $element = $vars['pattern'];
  $rows = array();
  foreach (element_children($element) as $key) {
    $rows[] = array(
      array('data' => render($element[$key])),
    );
  }
  $header = array(t('Pattern elements'));
  return theme('table', array('header' => $header, 'rows' => $rows));
}
