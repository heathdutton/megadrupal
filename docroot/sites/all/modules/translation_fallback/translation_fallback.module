<?php

/**
 * Implements hook_i18n_object_info_alter().
 *
 * Swap the translation class for some objects.
 */
function translation_fallback_i18n_object_info_alter(&$info) {
  if (module_exists('i18n_field')) {
    $info['field']['class'] = 'translation_fallback__i18n_field';
    $info['field_instance']['class'] = 'translation_fallback__i18n_field_instance';
  }
  if (module_exists('i18n_panels')) {
    $info['display_configuration']['class'] = 'translation_fallback__i18n_string_object_wrapper';
    $info['pane_configuration']['class'] = 'translation_fallback__i18n_string_object_wrapper';
  }
}

/**
 * Implements hook_i18n_string_info_alter().
 *
 * Swap the textgroup class for some objects.
 */
function translation_fallback_i18n_string_info_alter(&$info) {
  if (module_exists('i18n_field')) {
    $info['field']['class'] = 'translation_fallback__i18n_string_textgroup_cached';
  }
  if (module_exists('i18n_block')) {
    $info['blocks']['class'] = 'translation_fallback__i18n_string_textgroup_default';
  }
  if (module_exists('i18n_menu')) {
    $info['menu']['class'] = 'translation_fallback__i18n_string_textgroup_default';
  }
  if (module_exists('i18n_taxonomy')) {
    $info['taxonomy']['class'] = 'translation_fallback__i18n_string_textgroup_default';
  }
  if (module_exists('i18nviews')) {
    $info['views']['class'] = 'translation_fallback__i18n_string_textgroup_default';
  }
}

/**
 * Obtain the translation for the given string.
 */
function translation_fallback_localize($string, $langcode, $context = NULL) {
  // @todo extract useful part from t() and locale().
  $t = t($string, array(), array('langcode' => $langcode));
  return ($t == $string) ? FALSE : $t;
}

/**
 * @defgroup translation_fallback_wrappers Wrappers for i18n classes.
 * @{
 */

/**
 * Get fallback translation for untranslated strings of the given object.
 *
 * In php 5.4 this function could be a method in a trait.
 */
function translation_fallback_translate_object_strings($object, $langcode) {
  if ($strings = $object->get_strings()) {
    foreach ($strings as $i18nstring) {
      $i18nstring->get_translation($langcode);
      if (empty($i18nstring->translations[$langcode])) {
        if ($t = translation_fallback_localize($i18nstring->get_string(), $langcode)) {
          $i18nstring->translations[$langcode] = $t;
        }
      }
    }
  }
}

/**
 * @} End of "defgroup translation_fallback_wrappers".
 */
