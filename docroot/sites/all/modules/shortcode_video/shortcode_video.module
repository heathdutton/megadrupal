<?php
/**
 * @file
 * ShortCode for embedding videos.
 */

/**
 * Implements hook_shortcode_info().
 */
function shortcode_video_shortcode_info() {
  $shortcodes['video'] = array(
    'title' => t('Video macro'),
    'description' => t('Inserts embedded video code.'),
    'process callback' => 'shortcode_video_macro_process',
    'attributes callback' => "shortcode_video_attributes",
    'tips callback' => 'shortcode_video_tip',
  );
  return $shortcodes;
}

/**
 * Implements hook_theme().
 */
function shortcode_video_theme() {
  return array(
    'shortcode_video_embed_error' => array(
      'variables' => array(
        'video_url' => '',
        'class' => 'video-embedding-error',
      ),
    ),
    'shortcode_video_embed_no_provider' => array(
      'variables' => array(
        'video_url' => '',
        'class' => 'video-embedding-no-provider',
      ),
    ),
    'shortcode_video_embed_youtube' => array(
      'variables' => array(
        'video_url' => '',
        'attributes' => array(),
      ),
    ),
    'shortcode_video_embed_vimeo' => array(
      'variables' => array(
        'video_id' => '',
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * Attributes form element for video ShortCode.
 *
 * Used by ShortCode_wysiwyg module to add form elements for attributes.
 */
function shortcode_video_attributes($form, &$form_state) {
  $form['video-height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'video'),
      ),
    ),
  );
  $form['video-width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'video'),
      ),
    ),
  );
  $form['video-class'] = array(
    '#title' => t('class'),
    '#type' => 'textfield',
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'video'),
      ),
    ),
  );
}

/**
 * Provides Youtube video embedding ShortCode macro.
 *
 * <iframe width="420" height="315"
 * src="http://www.youtube.com/embed/EJu8ihVdygY?rel=0"
 * frameborder="0" allowfullscreen></iframe>
 */
function shortcode_video_macro_process($attrs, $text) {
  $attrs = shortcode_attrs(array(
      'class' => '',
      'width' => '',
      'height' => '',
      'showlink' => FALSE,
      'sub' => '',
      'forcesub' => FALSE,
    ),
    $attrs
  );

  $text = decode_entities($text);
  $url = drupal_parse_url($text);
  // Get provider.
  $m = array();
  preg_match('!^.*\:\/\/(www\.)?([^\.]*?)\.([^\.]*?)[\/|\?](.*?)$!', $text, $m);
  $provider = strtolower($m[2]);
  $output = '';
  switch ($provider) {
    case 'youtu':
      $url['query']['v'] = $m[4];
    case 'youtube':
      $embed_url = 'http://www.youtube.com/embed/';
      if (!empty($url['query']['v'])) {
        $params = $url['query'];
        $params['video_id'] = $url['query']['v'];
        unset($params['v']);
        unset($url['query']['v']);
        $params['attributes'] = $attrs;
      }
      else {
        $params = _shortcode_video_get_youtube_videoid($m);
        $params['attributes'] = $attrs;
      }
      if (!empty($params['video_id'])) {
        if ($attrs['sub']) {
          $url['query']['hl'] = $attrs['sub'];
        }
        if ($attrs['forcesub']) {
          $url['query']['fs'] = 1;
        }
        $params['video_url'] = url($embed_url . $params['video_id'], $url);
        $output = theme('shortcode_video_embed_youtube', $params);
      }
      break;

    case 'vimeo':
      $params = _shortcode_video_get_vimeo_videoid($m);
      if (!empty($params['video_id'])) {
        $params['attributes'] = $attrs;
        $output = theme('shortcode_video_embed_vimeo', $params);
      }
      break;

    default:
      $output = theme('shortcode_video_embed_no_provider',
        array('video_url' => $text)
      );
      break;
  }

  return $output;
}

/**
 * Provides tip callback for tip ShortCode.
 */
function shortcode_video_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>' . t('[video]video url[/video]') . '</strong> ';
  if ($long) {
    $output[] = t('Embeds the video into the text.') . '</p>';
  }
  else {
    $output[] = t('Embeds video into the content text. With the <em>width</em> and <em>height</em> parameter you can specify the video size.') . '</p>';
    $output[] = '<p>' . t('For YouTube videos you can specify the width with 420, 480, 640, 960 as the default videos sizes, then the height of the video will be added according to the default embed sizes. The default video size is 480x360px.') . '</p>';
  }

  return implode('', $output);
}

/**
 * Provides helper for get Youtube videoid.
 *
 * Gets the Youtube video id from the url part
 *
 * @param string $m
 *   - exploded give video text
 *   $m[0] contains the full url of the video
 *
 * @return array
 *   - the video parameters
 * @codingStandardsIgnoreStart
 * Url versions
 * 1; simple Youtube link
 * http://www.youtube.com/watch?v=EJu8ihVdygY&feature=g-vrec&context=G25615bbRVAAAAAAAAAg
 *
 * 2; embed link
 * <iframe width="420" height="315" src="http://www.youtube.com/embed/EJu8ihVdygY?rel=0" frameborder="0" allowfullscreen></iframe>
 *
 * 3; embed url
 * http://www.youtube.com/embed/EJu8ihVdygY?rel=0
 *
 * 4; shortened
 * https://youtu.be/kGYACultjCY
 *
 * @codingStandardsIgnoreEnd
 */
function _shortcode_video_get_youtube_videoid($m) {
  $params = array();
  // $m[4] contains the video url from the end of the provider url to the end of
  // the given text. Maybe it contains HTML (</iframe> tag).
  $nm = array();
  preg_match('!^([^\/]*).?([^\/\?\&]*)!', $m[4], $nm);
  switch($nm[1]) {
    case 'v':
      $params['video_id'] = $nm[2];
      break;

    case 'watch':
      $mm = array();
      preg_match('!\?v=([^\&]*?)$!', $m[4], $mm);
      if (!empty($mm[1])) {
        $params['video_id'] = $mm[1];
      }
      break;

    case 'embed':
      $mm = array();
      preg_match('!^embed\/(.*?)\?!', $m[4], $mm);
      if (!empty($mm[1])) {
        $params['video_id'] = $mm[1];
      }
      break;

    default:
      $params['video_id'] = '';
      break;
  }

  return $params;
}

/**
 * Provides helper for get Vimeo videoid.
 *
 * Gets the Vimeo video id from the url part
 *
 * @param string $m
 *   - exploded give video text
 *   $m[0] contains the full url of the video
 *
 * @return array
 *   - the video parameters
 * @codingStandardsIgnoreStart
 * Url versions
 * 1; simple Vimeo link
 * https://vimeo.com/679410
 * @codingStandardsIgnoreEnd
 */
function _shortcode_video_get_vimeo_videoid($m) {
  $params = array();
  // $m[4] contains the video id.
  $params['video_id'] = '';

  if (is_numeric($m[4])) {
    $params['video_id'] = $m[4];
  }

  return $params;
}

/*
 * Theme functions
 */

/**
 * Provides video embed error theme function.
 */
function theme_shortcode_video_embed_error($variables) {
  return '<span class="' . $variables['class'] . '">' . check_plain($variables['video_url']) . '</span>';
}

/**
 * Provides video no provider theme function.
 */
function theme_shortcode_video_embed_no_provider($variables) {
  return '<span class="' . $variables['class'] . '">' . check_plain($variables['video_url']) . '</span>';
}

/**
 * Provides YouTube video embed theme function.
 */
function theme_shortcode_video_embed_youtube($variables) {
  $attrs = $variables['attributes'];

  $height = empty($attrs['height']) ? 0 : intval($attrs['height']);
  $width = empty($attrs['width']) ? 0 : intval($attrs['width']);

  // Set defaults.
  if (empty($width) && empty($height)) {
    $width = 480;
    $height = 360;
  }
  elseif ($width && empty($height)) {
    switch ($width) {
      case 450:
        $height = 315;
        break;

      case 480:
        $height = 360;
        break;

      case 640:
        $height = 480;
        break;

      case 960:
        $height = 720;
        break;

      default:
        $height = intval($width * 0.75);
        break;

    }
  }
  else {
    $width = intval($height * 1.33);
  }

  $width = $width ? ' width="' . $width . '"' : '';
  $height = $height ? ' height="' . $height . '"' : '';
  $out = '<div class="video-container">';
  $out .= '<iframe' . $width . $height . ' src="' . $variables['video_url'] . '" frameborder="0" allowfullscreen></iframe>';
  $out .= '</div>';

  return $out;
}

/**
 * Provides Vimeo video embed theme function.
 */
function theme_shortcode_video_embed_vimeo($variables) {
  $attrs = $variables['attributes'];

  $height = empty($attrs['height']) ? 500 : intval($attrs['height']);
  $width = empty($attrs['width']) ? 281 : intval($attrs['width']);

  // Set defaults.
  if (empty($width) && empty($height)) {
    $width = 500;
    $height = 281;
  }
  elseif ($width && empty($height)) {
    $height = intval($width * 0.75);
  }
  else {
    $width = intval($height * 1.33);
  }

  $width = $width ? ' width="' . $width . '"' : '';
  $height = $height ? ' height="' . $height . '"' : '';

  $out = '<div class="video-container">';
  $out .= '<iframe src="https://player.vimeo.com/video/' . $variables['video_id'] . '" ' . $width . $height . ' frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
  $out .= '</div>';

  return $out;
}
