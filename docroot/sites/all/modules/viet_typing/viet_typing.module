<?php

/**
 * @file
 * Allows typing in Vietnamese.
 */

/**
 * Implements hook_help().
 */
function viet_typing_help($path, $arg) {
  switch ($path) {
    case 'admin/help#viet_typing':
      return t('Allows Vietnamese-character writing using the AVIM method.  Go to <a href="!url">block administration</a> to make sure that the Vietnamese Typing block has been enabled.', array('!url' => url('q=admin/block')));
  }
}

/**
 * Implements hook_permission().
 */
function viet_typing_permission() {
  return array(
    'administer viet_typing' => array(
      'title' => t('administer viet_typing'),
      'description' => t('Configure side-wide default VIE/VIM settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function viet_typing_menu() {
  $items = array();

  $items['admin/config/user-interface/viet_typing'] = array(
    'title' => 'Viet Typing',
    'description' => 'Allows the user to configure the viet_typing settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('viet_typing_general_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer viet_typing'),
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function viet_typing_init() {
  global $user;
  drupal_add_css(drupal_get_path('module', 'viet_typing') . '/viet_typing.css');

  if (!empty($user->data['viet_typing_vie'])) {
    $settings = array(
      'vie' => $user->data['viet_typing_vie'],
      'vim' => $user->data['viet_typing_vim'],
    );
  }
  else {
    $settings = array(
      'vie' => variable_get('viet_typing_vie', 'avim'),
      'vim' => variable_get('viet_typing_vim', 'auto'),
    );
  }
  if (! in_array($settings['vie'], array('avim', 'mudim'))) {
    $settings['vie'] = 'avim';
  }

  $path = $settings['vie'] . '/' . $settings['vie'] . '.js';
  $vie_handler = drupal_get_path('module', 'viet_typing') . '/viet_typing.' . $settings['vie'] . '.js';
  $vie_javascript = 'sites/all/libraries/' . $path;
  if (file_exists($vie_javascript)) {
    $vie_type = 'file';
  }
  else {
    $vie_javascript = 'http://f.vtcdn.com/tools/' . $path;
    $vie_type = 'external';
  }

  drupal_add_js($vie_javascript, $vie_type);
  drupal_add_js($vie_handler);
  drupal_add_js(drupal_get_path('module', 'viet_typing') . '/viet_typing.js');
  drupal_add_js(array('viet_typing' => $settings), array('type' => 'setting', 'scope' => JS_DEFAULT));
}

/**
 * Implements hook_user_presave().
 */
function viet_typing_user_presave(&$edit, $account, $category) {
  if (isset($edit['viet_typing_vie'])) {
    $edit['data']['viet_typing_vie'] = $edit['viet_typing_vie'];
    $edit['data']['viet_typing_vim'] = $edit['viet_typing_vim'];
  }
}

/**
 * Implements hook_user_insert().
 */
function viet_typing_user_insert(&$edit, $account, $category) {
  return isset($edit['viet_typing_vie']) ? array('viet_typing_vie' => $edit['viet_typing_vie'], 'viet_typing_vim' => $edit['viet_typing_vim']) : array();
}

/**
 * Implements hook_block_info().
 */
function viet_typing_block_info() {
  $block['control'] = array(
    'info' => t('Viet Typing'),
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function viet_typing_block_view($delta) {
  $block['subject'] = t('Viet Typing');
  $block['content'] = '<div id="viet_typing-holder-auto"><input id="vim-auto" type="radio" name="vim-method" /><label for="vim-auto">Auto</label></div>' .
    '<div id="viet_typing-holder-telex"><input id="vim-telex" type="radio" name="vim-method" /><label for="vim-telex">Telex</label></div>' .
    '<div id="viet_typing-holder-vni"><input id="vim-vni" type="radio" name="vim-method" /><label for="vim-vni">VNI</label></div>' .
    '<div id="viet_typing-holder-viqr"><input id="vim-viqr" type="radio" name="vim-method" /><label for="vim-viqr">VIQR</label></div>' .
    '<div id="viet_typing-holder-off"><input id="vim-off" type="radio" name="vim-method" /><label for="vim-off">' . t('Off') . '</label></div>' .
    '<div id="viet_typing-holder-oldrules"><input id="vim-oldrules" type="checkbox" /><label for="vim-oldrules">' . t('Old accent rules') . '</label></div>';
  return $block;
}

/**
 * Implementation of settings form.
 */
function viet_typing_general_settings_form($form, &$form_state) {
  return system_settings_form(viet_typing_controls($form, $form_state, variable_get('viet_typing_vie', 'avim'), variable_get('viet_typing_vim', 'auto')));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function viet_typing_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    viet_typing_controls(
      $form,
      $form_state,
      isset($account->data['viet_typing_vie']) ? $account->data['viet_typing_vie'] : variable_get('viet_typing_vie', 'avim'),
      isset($account->data['viet_typing_vim']) ? $account->data['viet_typing_vim'] : variable_get('viet_typing_vim', 'auto'),
      TRUE
    );
  }
}

/**
 * Control form.
 */
function viet_typing_controls(&$form, &$form_state, $vie, $vim, $collapsed = FALSE) {
  $form['viet_typing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Viet typing'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['viet_typing']['viet_typing_vie']  = array(
    '#type' => 'radios',
    '#title' => t('Default Vietnamese Input Engine'),
    '#description' => t('Select the default VIE you want to use.'),
    '#options' => array(
      'avim' => 'AVIM',
      'mudim' => 'Mudim',
    ),
    '#default_value' => $vie,
  );

  $form['viet_typing']['viet_typing_vim']  = array(
    '#type' => 'radios',
    '#title' => t('Your preferred Input Method'),
    '#description' => t('Select your preferred Input Method.'),
    '#options' => array(
      'auto' => 'Auto',
      'Telex' => 'Telex',
      'VNI' => 'VNI',
      'VIQR' => 'VIQR',
      'off' => 'Off',
    ),
    '#default_value' => $vim,
  );

  return $form;
}

