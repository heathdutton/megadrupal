<?php
/**
 * @file
 * Keeps track of who has seen a piece of content.
 *
 * @copyright Copyright(c) 2013 Previous Next Pty Ltd
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Chris Skene chris at previousnext dot com dot au
 */

/**
 * Define a permission for viewing seen results.
 */
const SEEN_PERM_VIEW = 'seen_perm_view';

/**
 * Define a permission for administering Seen.
 */
const SEEN_PERM_ADMIN = 'seen_perm_admin';

/**
 * Default row count.
 */
const SEEN_DEFAULT_LIST_COUNT = 25;

/**
 * Implements hook_permission().
 */
function seen_permission() {
  return array(
    SEEN_PERM_VIEW => array(
      'title' => t('View page view results'),
    ),
    SEEN_PERM_ADMIN => array(
      'title' => t('Administer Seen'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function seen_menu() {
  $items['node/%/seen'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Seen',
    'description' => 'Track page views',
    'page callback' => 'seen_page_listing',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array(SEEN_PERM_VIEW),
    'file' => 'inc/seen.pages.inc',
  );
  $items['admin/config/content/seen'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Seen',
    'description' => 'Settings for the seen module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seen_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array(SEEN_PERM_VIEW),
    'file' => 'inc/seen.admin.inc',
  );

  return $items;
}

/**
 * API function to return node views by user, sorted by timestamp.
 *
 * @param string $nid
 *   The ID to return views for.
 *
 * @return array
 *   An array, containing all access records, sorted by timestamp.
 */
function seen_get_sorted_views($nid) {

  $views = seen_get_views($nid);
  $users = seen_get_all_users();

  if (empty($views)) {
    return array();
  }

  // Sort views by user.
  $sorted_views = array();
  foreach (array_keys($users) as $user) {
    $sorted_views[$user] = array();
  }

  foreach ($views as $view) {
    $sorted_views[$view->uid][$view->timestamp] = $view;
  }

  foreach ($sorted_views as $index => $view) {
    ksort($sorted_views[$index]);
  }

  ksort($sorted_views);

  // Calls hook_seen_views_alter().
  drupal_alter('seen_sorted_views', $sorted_views, $nid);

  return $sorted_views;
}

/**
 * API function to return access records for a given node ID.
 *
 * @param string $nid
 *   The ID to return views for.
 *
 * @return array
 *   An array, containing all access records.
 */
function seen_get_views($nid) {

  $node = node_load($nid);

  if (empty($node)) {
    return FALSE;
  }

  $records = & drupal_static(__FUNCTION__);

  if (!isset($records[$nid]) || empty($records[$nid])) {
    $query = db_select('accesslog', 'a', array('target' => 'slave'));
    $query->join('users', 'u', 'a.uid = u.uid');
    $query->fields('a', array('aid', 'timestamp', 'uid'))
      ->fields('u', array('name'))
      ->condition('a.path', 'node/' . $nid);

    $records[$nid] = $query->execute()->fetchAll();
  }

  $result = $records[$nid];

  // Calls hook_seen_views_alter().
  drupal_alter('seen_views', $result, $node);

  return $result;
}

/**
 * Get all users.
 *
 * @return array
 *   An array of user records.
 */
function seen_get_all_users() {
  $users = &drupal_static(__FUNCTION__);

  if (!isset($users) || empty($users)) {
    $query = db_select('users', 'u', array('target' => 'slave'));
    $query->extend('TableSort');;
    $query->fields('u', array('uid'));

    $users = $query->execute()->fetchAllAssoc('uid');
  }

  return $users;
}

/**
 * Render an access table.
 *
 * This is similar to that provided by the core statistics module.
 *
 * @param string $nid
 *   Node ID to load.
 *
 * @return string
 *   The rendered table.
 */
function seen_render_access_table($nid) {

  $node = node_load($nid);

  if (empty($node)) {
    return FALSE;
  }

  $header = array(
    array('data' => t('Time'), 'field' => 'a.timestamp', 'sort' => 'desc'),
    array('data' => t('User'), 'field' => 'u.name'),
    array('data' => t('Operations')),
  );

  $query = db_select('accesslog', 'a', array('target' => 'slave'))
    ->extend('PagerDefault')
    ->extend('TableSort');
  $query->join('users', 'u', 'a.uid = u.uid');

  $query->fields('a', array('aid', 'timestamp', 'uid'))
    ->fields('u', array('name'))
    ->condition(db_or()
      ->condition('a.path', 'node/' . $node->nid)
      ->condition('a.path', 'node/' . $node->nid . '/%', 'LIKE'))
    ->limit(30)
    ->orderByHeader($header);

  $result = $query->execute();

  $rows = array();
  foreach ($result as $log) {
    $rows[] = array(
      array(
        'data' => format_date($log->timestamp, 'short'),
        'class' => array('nowrap'),
      ),
      theme('username', array('account' => $log)),
      l(t('details'), "admin/reports/access/$log->aid"),
    );
  }

  drupal_set_title($node->title);
  $build['statistics_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No statistics available.'),
  );
  $build['statistics_pager'] = array('#theme' => 'pager');

  return render($build);
}

/**
 * An generic array pager for Drupal.
 *
 * @see https://drupal.org/node/1441958
 * @todo fix superglobal usage
 */
function seen_pager_array_splice($data, $limit = NULL, $element = 0) {

  if (is_null($limit)) {
    $limit = seen_get_listing_row_limit();
  }

  global $pager_page_array, $pager_total, $pager_total_items;
  $page = check_plain(isset($_GET['page']) ? $_GET['page'] : '');

  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);

  // We calculate the total of pages as ceil(items / limit).
  $pager_total_items[$element] = count($data);
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int) $pager_page_array[$element], ((int) $pager_total[$element]) - 1));

  return array_slice($data, $pager_page_array[$element] * $limit, $limit, TRUE);
}

/**
 * Get the number of rows to show on the seen page.
 *
 * @return int
 *   The number of rows.
 */
function seen_get_listing_row_limit() {

  variable_get('seen_list_limit', SEEN_DEFAULT_LIST_COUNT);
}

/**
 * Default date format for individual rows.
 *
 * @return string
 *   A PHP date format string.
 */
function seen_default_date_format() {

  return 'l jS \of F Y h:i:s A';
}
