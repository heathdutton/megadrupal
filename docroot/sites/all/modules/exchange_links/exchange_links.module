<?php

/**
 * Implements hook_help().
 */
function exchange_links_help($path, $arg) {
  if ($path == 'admin/help#exchange_links') {
    if (current_path() != 'admin/help/exchange_links') {
      // Because system_modules() executes hook_help() for each module to 'test'
      // if they will return anything, but not actually display it, we want to
      // return a TRUE value if this is not actually the help page.
      return TRUE;
    }
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('It will allow users to share their links with the site administrator.') . '</p>';
    $output .= '<h3>' . t('Settings') . '</h3>';
    $output .= '<dl>';
    $output .= '<dt>' . t('<strong>Rules:</strong>') . '</dt>';
    $output .= '<dd>' . t('Write your own linking rules.<br/><b>Example:</b> Mysite.com related websites only! (Other none Mysite.com related websites will be removed) We are constantly looking for new perm Mysite.com link exchanges.') . '</dd>';
    $output .= '<dt>' . t('<strong>Linkback:</strong>') . '</dt>';
    $output .= '<dd>' . t('Write your own linking rules.') . '</dd>';
    $output .= '<dt>' . t('<strong>Min PageRank&trade;:</strong>') . '</dt>';
    $output .= '<dd>' . t('Min PageRank&trade; value of link which can be added to you site.<br/><b>Example:</b> 5') . '</dd>';
    $output .= '<dt>' . t('<strong>URL:</strong>') . '</dt>';
    $output .= '<dd>' . t('URL of your site.<br/><b>Example:</b> http://wwww.yoursite.com') . '</dd>';
    $output .= '<dt>' . t('<strong>Site Title:</strong>') . '</dt>';
    $output .= '<dd>' . t('Title of your site.<br/><b>Example:</b> Video Sharing site') . '</dd>';
    $output .= '<dt>' . t('<strong>Site Description:</strong>') . '</dt>';
    $output .= '<dd>' . t('Description of your site.<br/><b>Example:</b> This a video sharing platform where users can share videos.') . '</dd>';
    $output .= '<dt>' . t('<strong>HTML Code:</strong>') . '</dt>';
    $output .= '<dd>' . t('HTML code of your site link.<br/><b>Example:</b> &lt;a href="http://www.yoursite.com" title="Site Title"&gt;Site Title&lt;/a&gt;') . '</dd>';
    $output .= '</dl>';
    return $output;
  }
}

/**
 * Implements hook_permission().
 */
function exchange_links_permission() {
  return array(
    'administer exchange links' => array(
      'title' => t('Administer exchange links'),
      'description' => t('Allows a user to configure and administrate exchange links.'),
    ),
    'use exchange links' => array(
      'title' => t('Use exchange links'),
      'description' => t('Allows user to use exchange links.'),
    ),
  );
}

/**
 * Implements of hook_menu()
 */
function exchange_links_menu() {
  $items['exchange-links'] = array(
    'title' => 'Exchange Links',
    'description' => 'Exchange Links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exchange_links_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'exchange_links.pages.inc',
  );
  $items['admin/config/search/exchange-links/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exchange_links_settings_form'),
    'access arguments' => array('administer exchange links'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'exchange_links.admin.inc',
  );
  $items['admin/config/search/exchange-links/add'] = array(
    'title' => 'Add links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_links_form'),
    'access arguments' => array('administer exchange links'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'file' => 'exchange_links.admin.inc',
  );
  $items['admin/config/search/exchange-links/list'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exchange_links_overview'),
    'access arguments' => array('administer exchange links'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'file' => 'exchange_links.admin.inc',
  );
  $items['admin/config/exchange-links/%/view'] = array(
    'title' => 'View link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('view_links_form'),
    'access arguments' => array('administer exchange links'),
    'file' => 'exchange_links.admin.inc',
  );
  $items['admin/config/exchange-links/%/delete'] = array(
    'title' => 'Delete link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('confirm_link_delete', 4),
    'access arguments' => array('administer exchange links'),
    'file' => 'exchange_links.admin.inc',
  );
  return $items;
}
 
/**
 * Implements of hook_exchange_links_operations().
 */
function exchange_links_exchange_links_operations($form = array(), $form_state = array()) {
  $operations = array(
    'publish' => array(
      'label' => t('Publish the selected links'),
      'callback' => 'exchange_links_exchange_links_operations_publish',
    ),
    'unpublish' => array(
      'label' => t('Unpublish the selected links'),
      'callback' => 'exchange_links_exchange_links_operations_unpublish',
    ),
    'delete' => array(
      'label' => t('Delete the selected links'),
      'callback' => 'exchange_links_exchange_links_operations_delete',
    ),
  );
  return $operations;
}

/**
 * Callback function for admin mass publishing links.
 */
function exchange_links_exchange_links_operations_publish($links) {
  db_update('exchange_links')
  ->fields(
    array(
      'status' => 1,
    )
  )
  ->condition('id', $links, 'IN')
  ->execute();
}
/**
 * Callback function for admin mass unpublishing links.
 */
function exchange_links_exchange_links_operations_unpublish($links) {
  db_update('exchange_links')
  ->fields(
    array(
      'status' => 0,
    )
  )
  ->condition('id', $links, 'IN')
  ->execute();
}
/**
 * Callback function for admin mass deleting links.
 */
function exchange_links_exchange_links_operations_delete($links) {
  db_delete('exchange_links')
  ->condition('id', $links, 'IN')
  ->execute();
  drupal_set_message(t('The links has been deleted.'));
}
/**
 * Implementation of taxonomy_get_term_by_tid($tid)
 */
function taxonomy_get_term_by_tid($tid) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('exchange_links');
  $vid = $vocabulary->vid;
  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('name'));
  $query->condition('t.vid', $vid, '=');
  $query->condition('t.tid', $tid, '=');
  $term = $query->execute()->fetchCol();
  $term = ($term[0])?$term[0]:'Uncategories';
  return $term;
}
