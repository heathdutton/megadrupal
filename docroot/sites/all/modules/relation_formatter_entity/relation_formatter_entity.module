<?php
/**
 * Implements hook_field_formatter_info().
 */
function relation_formatter_entity_field_formatter_info() {
  $formatter_info = array(
    'relation_rendered' => array(
      'label' => t('Rendered endpoints'),
      'field types' => array(
        'relation',
        'relation_add',
        'relation_select',
      ),
      'settings' => array('view_mode' => 'default', 'respect_directional' => 0),
    ),
  );
  $info = entity_get_info();
  foreach ($info as $entity_type => $entity_info) {
    reset($entity_info['view modes']);
    $formatter_info['relation_rendered']['settings'][$entity_type]['view_mode'] = key($entity_info['view modes']);
  }
  return $formatter_info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function relation_formatter_entity_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];
  $default_view_mode = $settings['view_mode'];
  $respect_directional = $settings['respect_directional'];
  $element['#tree'] = TRUE;
  $related_entity_types = relation_formatter_entity_get_related_entity_types($instance);

  foreach ($related_entity_types as $entity_type) {
    $options = array();
    $element[$entity_type] = array(
      '#type' => 'container',
    );
    $entity_info = entity_get_info($entity_type);
    foreach ($entity_info['view modes'] as $entity_view_mode => $data) {
      $options[$entity_view_mode] = $data['label'];
    }
    $element[$entity_type]['view_mode'] = array(
      '#title' => t('!entity_type view mode', array('!entity_type' => $entity_info['label'])),
      '#description' => t('The view mode in which to render the entity'),
      '#type' => 'select',
      '#default_value' => isset($settings[$entity_type]['view_mode']) ? $settings[$entity_type]['view_mode'] : $default_view_mode,
      '#options' => $options,
    );
  }

  $element['respect_directional'] = array(
    '#title' => t('Respect directional relations'),
    '#description' => t('If checked, only the relations where this entity is the source (not the target) will be displayed'),
    '#type' => 'checkbox',
    '#default_value' => $respect_directional,
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function relation_formatter_entity_field_formatter_settings_summary($field, $instance, $view_mode) {
  $related_entity_types = relation_formatter_entity_get_related_entity_types($instance);
  $settings = $instance['display'][$view_mode]['settings'];
  $default_view_mode = $settings['view_mode'];
  $respect_directional = $settings['respect_directional'];
  $summary = array();
  $summary['view_modes'] = array(
    '#type' => 'item',
    '#title' => t('View modes'),
  );
  foreach ($related_entity_types as $entity_type) {
    if ($info = entity_get_info($entity_type)) {
      $selected_view_mode = isset($settings[$entity_type]['view_mode']) ? $settings[$entity_type]['view_mode'] : $default_view_mode;
      $summary[$entity_type] = array(
        '#type' => 'item',
        '#title' => t('!entity_type view mode', array('!entity_type' => $info['label'])),
        '#markup' => isset($info['view modes'][$selected_view_mode]['label']) ? $info['view modes'][$selected_view_mode]['label'] : $selected_view_mode,
      );
    }
  }
  $summary['respect_directional'] = array(
    '#type' => 'item',
    '#title' => t('Respect directional'),
    '#markup' => $respect_directional ? t('Yes') : t('No')
  );

  return drupal_render($summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function relation_formatter_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if (empty ($items)) {
    return array();
  }
  $entities = array();
  $respect_directional = (isset($display['settings']['respect_directional']) && $display['settings']['respect_directional']);
  //prevent infinite loops by deleting the endpoint referencing the entity being viewed.
  foreach ($items as $delta => $relation) {
    $relation = (object)$relation;
    $relation_type = relation_type_load($relation->relation_type);
    $entities[$delta] = array();
    foreach ($relation->endpoints as $lang => $endpoints) {
      foreach ($endpoints as $endpointdelta => $endpoint) {
        $entity_info = entity_get_info($entity_type);
        // This relation is directional and starts from an other endpoint.
        $skip_delta = $relation_type->directional && $respect_directional && $endpointdelta != 0;
        if ($entity->{$entity_info['entity keys']['id']} === $endpoint['entity_id'] && $skip_delta) {
          $entities[$delta] = FALSE;
        }
        // Do not render this entity as part of the relationship. It will result in an infinite loop.
        elseif ($entity->{$entity_info['entity keys']['id']} !== $endpoint['entity_id'] && $entities[$delta] !== FALSE) {
          $entities[$delta][$endpoint['entity_type']][] = $endpoint['entity_id'];
        }
      }
    }
  }
  // filter out bad values.
  $entities = array_filter($entities);
  switch ($display['type']) {
    case 'relation_rendered':
      foreach ($entities as $delta => $delta_entities) {
        $element[$delta] = array(
          '#type' => 'container',
          '#attributes' => array(),
        );
        foreach ($delta_entities as $entity_type => $ids) {
          $entity_view_mode = isset($display['settings'][$entity_type]['view_mode']) ? $display['settings'][$entity_type]['view_mode'] : $display['settings']['view_mode'];
          $element[$delta][$entity_type] = array(
            '#type' => 'container',
            '#attributes' => array(),
          ) + entity_view($entity_type, entity_load($entity_type, $ids), $entity_view_mode);
        }
      }
      break;
  }
  return $element;
}

function relation_formatter_entity_get_related_entity_types($instance) {
  $related_entity_types = array();
  $relation_types = is_array($instance['settings']['relation_type']) ? $instance['settings']['relation_type'] : array($instance['settings']['relation_type']);
  foreach ($relation_types as $relation_type_name) {
    $relation_type = relation_type_load($relation_type_name);
    foreach($relation_type->source_bundles as $source) {
      $source_info = explode(':', $source);
      $related_entity_types[$source_info[0]] = $source_info[0];
    }
  }
  foreach ($relation_types as $relation_type_name) {
    $relation_type = relation_type_load($relation_type_name);
    foreach($relation_type->target_bundles as $source) {
      $source_info = explode(':', $source);
      $related_entity_types[$source_info[0]] = $source_info[0];
    }
  }
  return $related_entity_types;
}