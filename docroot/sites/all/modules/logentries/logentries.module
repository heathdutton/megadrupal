<?php
/**
 * @file
 * Provides alternative logging mechanism for Drupal using logentries.
 *
 * This module uses hook_watchdog in order to send logged messages to
 * logentries and can be used in conjunction with or as a replacement to the
 * default database logging (dblog) module.
 * More information on logentries can be found at https://logentries.com/
 */

/**
 * Implements hook_help().
 */
function logentries_help($path, $arg) {
  switch ($path) {
    case 'admin/help#logentries':
      $output = '<h2>' . t('About the Logentries Module') . '</h2>';
      $output .= '<p>' . t('The logentries module allows Drupal to send watchdog messages to <a href="@url">logentries</a>, it can be used in conjunction with or as a replacement for the database logging provided with Drupal.', array(
        '@url' => url('https://logentries.com/'),
      )) . '</p>';
      $output .= '<h2>' . t('Installation') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('This module requires the library provided by logentries, which can be found at: <a href="@url">@url</a>', array(
        '@url' => url('https://github.com/logentries/le_php'),
      )) . '</li>';
      $output .= '<li>' . t('Once downloaded extract all files into !path1, making sure that the !file file can be found at !path2', array(
        '!path1' => 'sites/default/libraries/logentries',
        '!file' => 'LeLogger.php',
        '!path2' => 'sites/default/libraries/logentries/LeLogger.php',
      )) . '</li>';
      $output .= '<li>' . t('Once the library is available enable this module, if you have already enabled this module you may need to clear the caches for the library to become available.') . '</li>';
      $output .= '</ul>';
      $output .= '<h2>' . t('Configuration') . '</h2>';
      $output .= '<p>' . t('This module can be configured by going to Configuration->Development->Logging and errors (admin/config/development/logging) in Drupal, here you can enter the token provided by logentries; whether to use SSL to send log messages and the minimum level of messages to send. If you want to use different tokens under different circumstances e.g. one for a development environment and a different one for a live environment, then you can define the tokens in your settings.php file. An example of this is given below.') . '</p>';
      $output .= '<pre>if ($_SERVER[\'SERVER_ADDR\'] == \'127.0.0.1\') {
  // Local token.
  $conf[\'logentries_token\'] = \'LOGENTRIES_LOCAL_TOKEN\';
}
else {
  // Another different token.
  $conf[\'logentries_token\'] = \'LOGENTRIES_ANOTHER_TOKEN\';
}</pre>';

      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 */
function logentries_libraries_info() {
  $libraries = array();

  $libraries['logentries'] = array(
    'name' => 'Logentries',
    'vendor url' => 'https://logentries.com/',
    'download url' => 'https://github.com/logentries/le_php',
    'version arguments' => array(
      'file' => 'LeLogger.php',
      'pattern' => '/@version\s+(\d+(\.\d+)?)/i',
      'lines' => 20,
    ),
    'files' => array(
      'php' => array('LeLogger.php'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_watchdog().
 */
function logentries_watchdog($log_entry) {
  global $_logentries_log;

  // Initialise the log class.
  logentries_init_log();

  // Don't do anything if log class hasn't been loaded.
  if (is_null($_logentries_log)) {
    return;
  }

  // Browser info should remain static for the entire request so no point
  // getting it again on subsequent calls to this function.
  static $browser;

  // Get browser information for log.
  if (is_null($browser)) {
    $browser = array();

    if (isset($_SERVER['HTTP_USER_AGENT'])) {
      $browser['agent'] = $_SERVER['HTTP_USER_AGENT'];

      // Extract more specific browser info if possible.
      if (ini_get('browscap')) {
        $info = get_browser();

        $browser['user_agent'] = $info->parent;
        $browser['os'] = $info->platform;
      }
    }
  }

  if (!isset($log_entry['variables']) || !is_array($log_entry['variables'])) {
    $log_entry['variables'] = array();
  }

  // Prepare the entry to be sent to logentries.
  $prepped_log = array(
    'type' => $log_entry['type'],
    'uid' => isset($log_entry['uid']) ? $log_entry['uid'] : 0,
    'request_uri' => $log_entry['request_uri'],
    'referer' => $log_entry['referer'],
    'message' => t($log_entry['message'], $log_entry['variables']),
    'host' => variable_get('servername', $_SERVER['HTTP_HOST']),
  ) + $browser;

  // Convert prepared entry into a string.
  $string_log = '';
  foreach ($prepped_log as $key => $value) {
    $string_log .= $key . '="' . addslashes($value) . '" ';
  }

  // Get LeLogger method based on severity.
  $method = logentries_map_level_to_method($log_entry['severity']);
  $_logentries_log->{$method}($string_log);
}

/**
 * Initialise the log class with token.
 */
function logentries_init_log() {
  global $_logentries_log;

  // Initialise the log class if it hasn't been already.
  if (is_null($_logentries_log)) {
    // Get the token required to send messages to logentries.
    $token = variable_get('logentries_token', NULL);

    if ($token) {
      // Load the libraries module if it has not yet been loaded.
      if (!function_exists('libraries_load')) {
        drupal_load('module', 'libraries');
      }

      // Load the logentries library.
      $library = libraries_load('logentries');

      // Check the library has been loaded.
      if ($library && !empty($library['loaded'])) {
        // Initialise class with configurable options.
        $persistent = TRUE;
        $ssl = variable_get('logentries_ssl', FALSE);
        $severity = variable_get('logentries_severity', WATCHDOG_DEBUG);

        if (logentries_count_getlogger_params() > 4) {
          $_logentries_log = LeLogger::getLogger($token, $persistent, $ssl, $severity, FALSE, '', 10000, '', '', FALSE);
        }
        else {
          $_logentries_log = LeLogger::getLogger($token, $persistent, $ssl, $severity);
        }
      }
    }
  }
}

/**
 * Maps a BSD error level constant to a LeLogger method name.
 *
 * @param int $level
 *   The log message severity level.
 *
 * @return string
 *   The LeLogger method corresponding to the provided severity.
 */
function logentries_map_level_to_method($level) {
  $map = array(
    WATCHDOG_EMERGENCY => 'Emergency',
    WATCHDOG_ALERT => 'Alert',
    WATCHDOG_CRITICAL => 'Critical',
    WATCHDOG_ERROR => 'Error',
    WATCHDOG_WARNING => 'Warning',
    WATCHDOG_NOTICE => 'Notice',
    WATCHDOG_INFO => 'Info',
    WATCHDOG_DEBUG => 'Debug',
  );

  if (isset($map[$level])) {
    return $map[$level];
  }

  return $map[WATCHDOG_NOTICE];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function logentries_form_system_logging_settings_alter(&$form, &$form_state, $form_id) {
  // Add configuration settings to the system logging form.
  $form['logentries'] = array(
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#title' => t('Logentries'),
    '#type' => 'fieldset',
  );

  // Check for the logentries library.
  $library = libraries_detect('logentries');

  if ($library && isset($library['installed']) && $library['installed']) {
    $form['logentries']['logentries_token'] = array(
      '#default_value' => variable_get('logentries_token', ''),
      '#description' => t('If you only wish to use one token enter it here, otherwise tokens can be specified in the settings.php file see the README for details.'),
      '#title' => t('Token'),
      '#type' => 'textfield',
    );
    $form['logentries']['logentries_ssl'] = array(
      '#default_value' => variable_get('logentries_ssl', FALSE),
      '#description' => t('Use SSL to send log messages to Logentries.'),
      '#title' => t('SSL'),
      '#type' => 'checkbox',
    );
    $form['logentries']['logentries_severity'] = array(
      '#default_value' => variable_get('logentries_severity', LOG_DEBUG),
      '#description' => t('Choose the minimum severity level of messages to send to Logentries.'),
      '#options' => array(
        WATCHDOG_EMERGENCY => t('Emergency'),
        WATCHDOG_ALERT => t('Alert'),
        WATCHDOG_CRITICAL => t('Critical'),
        WATCHDOG_ERROR => t('Error'),
        WATCHDOG_WARNING => t('Warning'),
        WATCHDOG_NOTICE => t('Notice'),
        WATCHDOG_INFO => t('Info'),
        WATCHDOG_DEBUG => t('Debug'),
      ),
      '#title' => t('Severity'),
      '#type' => 'select',
    );
    $form['logentries']['logentries_test'] = array(
      '#submit' => array('logentries_form_system_logging_settings_alter_test_submit'),
      '#type' => 'submit',
      '#value' => t('Send Test Message'),
    );
  }
  else {
    $form['logentries']['logentries_error'] = array(
      '#markup' => t('Could not find the Logentries library, refer to the README.TXT for installation instructions.'),
    );
  }
}

/**
 * Send a test message to logentries.
 */
function logentries_form_system_logging_settings_alter_test_submit($form, &$form_state) {
  // Get the token required to send messages to logentries.
  $token = $form_state['values']['logentries_token'];

  if ($token) {
    // Load the logentries library.
    $library = libraries_load('logentries');

    // Check the library has been loaded.
    if ($library && !empty($library['loaded'])) {
      // Initialise class with configurable options.
      $persistent = TRUE;
      $ssl = $form_state['values']['logentries_ssl'];
      $severity = $form_state['values']['logentries_severity'];

      if (logentries_count_getlogger_params() > 4) {
        $log = LeLogger::getLogger($token, $persistent, $ssl, $severity, FALSE, '', 10000, '', '', FALSE);
      }
      else {
        $log = LeLogger::getLogger($token, $persistent, $ssl, $severity);
      }

      // Get LeLogger method based on severity.
      $method = logentries_map_level_to_method($severity);

      try {
        // Send test message.
        $message = t('Test message from @site.', array('@site' => variable_get('site_name', 'unknown (no site name defined)')));
        $log->{$method}($message);

        drupal_set_message(t('Test message sent'));
      }
      catch (Exception $e) {
        drupal_set_message(t('Failed to send test message, check your configuration settings.'), 'error');
      }
    }
  }
}

/**
 * Check the number of parameters expected by the getLogger method.
 *
 * This is to check which version of the getLogger method is being used, to
 * allow support for the dev branch of the LeLogger module which is still
 * marked as v1.6 at the moment.
 *
 * @return int
 *   The number of parameters.
 */
function logentries_count_getlogger_params() {
  static $args;

  if (empty($args)) {
    $rf = new ReflectionMethod('LeLogger', 'getLogger');
    $args = $rf->getNumberOfParameters();
  }

  return $args;
}
