<?php

/**
 * @file
 * Installation file for the Commerce Coinbase module.
 */

/**
 * Implements hook_requirements().
 *
 * Verifies the cURL PHP library is available.
 */
function commerce_coinbase_requirements($phase) {
  $t = get_t();
  $requirements = array();

  // Coinbase's provided API code requires cURL.
  if (!function_exists('curl_version')) {
    $requirements['commerce_coinbase_curl'] = array(
      'title' => $t('cURL'),
      'value' => $t('Not found'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('Commerce Coinbase requires the PHP <a href="@curl_url">cURL</a> library.', array('@curl_url' => 'http://www.php.net/manual/en/book.curl.php')),
    );
  }

  if ($phase == 'runtime') {
    if (request_path() == 'admin/reports/status') {
      $coinbase_currencies = commerce_coinbase_currencies();

      // This if statement will fail if coinbase.com is down.
      if ($coinbase_currencies !== FALSE && is_array($coinbase_currencies)) {
        $commerce_currencies = commerce_currencies(TRUE);
        $commerce_default_currency = commerce_default_currency();

        foreach ($commerce_currencies as $symbol => $details) {
          if (!in_array($symbol, $coinbase_currencies) && $symbol != 'BTC') {
            $unsupported_currency[] = $symbol;
          }
        }
        if (!empty($unsupported_currency)) {
          $requirements['commerce_coinbase_supported_currencies'] = array(
            'title' => $t('Coinbase currency support'),
            'value' => $t('Unsupported: @list', array('@list' => implode(', ', $unsupported_currency))),
            'severity' => REQUIREMENT_WARNING,
            'description' => $t('<a href="https://coinbase.com/api/v1/currencies">Coinbase supports a limited subset of currencies.</a>'),

          );
        }

        if (in_array($commerce_default_currency, $coinbase_currencies)) {
          $coinbase_spot_rate = commerce_coinbase_spot_rate($commerce_default_currency);
          $conversion_rate = $t('1 BTC = @d @code', array('@d' => $coinbase_spot_rate['amount'], '@code' => $coinbase_spot_rate['currency']));
          $requirements['commerce_coinbase_spot_rate'] = array(
            'title' => $t('Coinbase Bitcoin spot rate'),
            'value' => isset($conversion_rate) ? $conversion_rate : $t('Supported'),
            'severity' => REQUIREMENT_INFO,
          );
        }
      }
    }

    // Error if the Coinbase library isn't installed.
    // This would be better outside the runtime check, but needs Libraries API.
    $library = libraries_detect('coinbase-php');
    if (empty($library['installed'])) {
      $requirements['commerce_coinbase_library'] = array(
        'title' => $t('Coinbase PHP Client Library'),
        'value' => $t('Not found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('Commerce Coinbase requires copying the entire <a href="@support_url">Coinbase PHP Client Library</a> to the libraries directory on the web server: e.g. sites/all/libraries/coinbase-php/lib/Coinbase.php or sites/{domain}/libraries/coinbase-php/lib/Coinbase.php.', array('@support_url' => 'https://github.com/coinbase/coinbase-php')),
      );
    }

    // Check to see if the Rule has been setup yet.
    $result = db_select('rules_config', 'r')
      ->condition('r.data', '%api_key%', 'LIKE')
      ->condition('r.data', '%coinbase%', 'LIKE')
      ->condition('r.module', 'commerce_payment')
      ->condition('r.plugin', 'reaction rule')
      ->addTag('commerce_coinbase_apikey_requirements')
      ->countQuery()
      ->execute()
      ->fetchField();
    if (!$result) {
      $requirements['commerce_coinbase_apikey'] = array(
        'title' => $t('Coinbase configuration'),
        'value' => $t('!link', array('!link' => l($t('API key missing'), 'admin/commerce/config/payment-methods'))),
        'severity' => REQUIREMENT_WARNING,
        'description' => $t('Sign up for an account with <a href="@url">Coinbase</a> to generate an API key.', array('@url' => 'https://coinbase.com/?r=5242664f8fec8d2e4b000007&utm_campaign=user-referral&src=referral-link')),
      );
    }
  }

  return $requirements;
}
