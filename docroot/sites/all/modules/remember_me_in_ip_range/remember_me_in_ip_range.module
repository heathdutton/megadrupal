<?php

/**
 * @file
 * Contains module logic for remember_me_in_ip_range.
 */

/**
 * Implements hook_form_alter().
 */
function remember_me_in_ip_range_form_alter(&$form, $form_state, $form_id) {
  // Only make changes to these forms. its just checking the ip does exists in
  // given range or not. I exist then changes the remember value 1 and make it
  // hidden.
  // so on those who have the ip in given ip range they will be remembered.
  if (in_array($form_id, array('user_login', 'user_login_block'))) {
    $remember = 0;
    // Initial value to 0, if not updated within follwing checking
    // it will remain 0 as it shouldn't be remeber.
    // Getting ip from config and checking with current clients ip.
    if (variable_get('remember_me_in_ip_range', FALSE)) {
      $ip_range_arr = array();
      $ip = remember_me_in_ip_range_get_client_ip();
      if ($ip) {
        $ip_range = variable_get('remember_me_in_ip_range_ip_range', 1);
        $ip_range_arr = explode(",", $ip_range);

        foreach ($ip_range_arr as $ip_in_range) {
          if (remember_me_in_ip_range_ip_match($ip_in_range, $ip)) {
            $remember = 1;
            break;
          }
        }
      }
    }

    // Configuration for the remember me checkbox. We made it a value type field
    // so that it doesn't show in the form.
    $cbox['remember_me'] = array(
      '#type' => 'value',
      '#value' => $remember,
    );
    $form = $cbox + $form;
  }
}

/**
 * Implements hook_theme().
 */
function remember_me_in_ip_range_theme() {
  return array(
    'remember_me_in_ip_range_settings_display' => array(
      'variables' => array('vars' => array()),
      'file' => 'remember_me_in_ip_range.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function remember_me_in_ip_range_menu() {
  $items = array();
  $items['admin/config/system/remember_in_ip_range'] = array(
    'title' => 'Remember Me in IP Range settings',
    'description' => 'Configure settings like IP range for Remember Me in IP Range module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('remember_me_in_ip_range_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'remember_me_in_ip_range.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function remember_me_in_ip_range_help($path, $arg) {

  switch ($path) {
    case 'admin/help#remember_me_in_ip_range':
      $intro = t("This module allows this site to remember users within a given IP Range.") . '<br />';
      $help = remember_me_in_ip_range_help_ranges($intro);
      return $help;
  }
}

/**
 * Provides help about accepted values of IP ranges etc.
 */
function remember_me_in_ip_range_help_ranges($intro = '') {
  $help = '<p id="ip_login">' . $intro . ' ' . t('Accepted IP Range format are:') . '</p>';
  $help .= '<ul><li>';
  $help .= t("Single IP matches like <code>123.123.123.123</code>");
  $help .= '</li><li>';
  $help .= t("Wildcards using an asterisk (<code>*</code>) in any quadrant except the first one, for example <code>123.123.123.*</code> or <code>100.*.*.*</code> etc.");
  $help .= '</li><li>';
  $help .= t("Ranges using a hyphen (<code>-</code>) in any quadrant except the first one, for example <code>123.123.123.100-200</code> etc.");
  $help .= '</li><li>';
  $help .= t("Any number of comma-separated IP addresses or ranges like <code>10.11.12.13, 123.123.123.100-200, 123.123.124-125.*</code> etc.");
  $help .= '</li></ul>';
  return $help;
}

/**
 * Matching an IP with IP ranges.
 */
function remember_me_in_ip_range_ip_match($network, $ip) {
  $network = trim($network);

  $ip = trim($ip);
  if ($ip == "" || $network == "") {
    return FALSE;
  }
  if ($ip == $network) {
    return TRUE;
  }
  $network = str_replace(' ', '', $network);
  if (strpos($network, '*') !== FALSE) {
    if (strpos($network, '/') !== FALSE) {
      $as_parts = explode('/', $network);
      $network = @ $as_parts[0];
    }

    $n_count = substr_count($network, '*');
    $network = str_replace('*', '0', $network);

    if ($n_count == 1) {
      $network .= '/24';
    }
    elseif ($n_count == 2) {
      $network .= '/16';
    }
    elseif ($n_count == 3) {
      $network .= '/8';
    }
    elseif ($n_count > 3) {
      // If *.*.*.*, then all, so matched.
      return TRUE;
    }
  }

  $d = strpos($network, '-');
  if ($d === FALSE) {
    $ip_arr = explode('/', $network);
    if (!preg_match("@\d*\.\d*\.\d*\.\d*@", $ip_arr[0], $matches)) {
      // Alternate form 194.1.4/24.
      $ip_arr[0] .= ".0";
    }
    $network_long = ip2long($ip_arr[0]);
    if (!isset($ip_arr[1])) {
      $ip_arr[1] = 8;
    }
    $x = ip2long($ip_arr[1]);
    $mask = long2ip($x) == $ip_arr[1] ? $x : (0xffffffff << (32 - $ip_arr[1]));
    $ip_long = ip2long($ip);
    return ($ip_long & $mask) == ($network_long & $mask);
  }
  else {
    $from = trim(ip2long(substr($network, 0, $d)));
    $to = trim(ip2long(substr($network, $d + 1)));
    $ip = ip2long($ip);
    return ($ip >= $from and $ip <= $to);
  }
}

/**
 * Retriving cleint IP.
 */
function remember_me_in_ip_range_get_client_ip() {
  // Find the IP of the visitor.
  $ip = ip_address();
  $ip = explode(",", $ip);
  // Display the IP of the Visitor.
  return is_array($ip) ? $ip[0] : $ip;
}
