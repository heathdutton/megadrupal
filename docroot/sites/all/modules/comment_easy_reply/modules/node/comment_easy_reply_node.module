<?php

/**
 * @file
 * Comment Easy Reply Node: allows to reply to node authors.
 */
define('COMMENT_EASY_REPLY_NODE_DEFAULT_REPLY_NODE_LINK_TEXT', 'Reply to node');
define('COMMENT_EASY_REPLY_NODE_DEFAULT_FIRST_REPLY_SUBJECT', 'RE: [node:title]');
define('COMMENT_EASY_REPLY_NODE_DEFAULT_REPLY_NODE_LINK_ACTIVATED', 1);
define('COMMENT_EASY_REPLY_NODE_DEFAULT_ACTIVE_DISPLAY', 'full');

/**
 * Implements hook_menu().
 */
function comment_easy_reply_node_menu() {
  $items = array();
  $items['admin/config/content/comment-easy-reply/node'] = array(
    'title' => 'Node',
    'description' => 'Configure Comment Easy Reply module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_easy_reply_node_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'comment_easy_reply_node.admin.inc',
    'weight' => 2,
  );
  $items['ajax/comment-easy-reply/node/%/first-reply'] = array(
    'title' => '',
    'description' => '',
    'page callback' => '_comment_easy_reply_node_get_first_reply_text',
    'page arguments' => array(3),
    'access callback' => '_comment_easy_reply_node_first_reply_ajax_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function comment_easy_reply_node_node_view($node, $view_mode, $langcode) {
  if (_comment_easy_reply_node_is_node_type_display_active($node->type, $view_mode)) {
    $links['reply_node'] = array(
      'title' => 'Reply to node',
      'href' => 'comment/reply/' . $node->nid,
      'attributes' => array('class' => array('comment-easy-reply-node-first-reply', 'comment-easy-reply-node-node-' . $node->nid)),
      'query' => array('comment-easy-reply-node' => 'node-reply'),
    );
    $node->content['links']['comment_easy_reply'] = array();
    $node->content['links']['comment_easy_reply']['#links'] = $links;
    drupal_add_js(drupal_get_path('module', 'comment_easy_reply_node') . '/js/comment_easy_reply_node.js');
  }
}

/**
 * Implements hook_comment_view().
 */
function comment_easy_reply_node_comment_view($comment, $view_mode, $langcode) {
  if (!_comment_easy_reply_comment_node_type_is_allowed($comment)) {
    return;
  }  
  if (!_comment_easy_reply_node_is_comment_node_type_active($comment)) {
    return;
  }
  $comment = _comment_easy_reply_node_comment_replace($comment);
}

/**
 * Implements hook_preprocess_comment_easy_reply_comment_referrer_link().
 */
function comment_easy_reply_node_preprocess_comment_easy_reply_comment_referrer_tips(&$variables) {
  $comment = $variables['comment'];
  $comment_nid = $comment->nid;
  $variables['tips'] = _comment_easy_reply_node_comment_body_replace($variables['tips'], $comment_nid);
}

function _comment_easy_reply_node_comment_body_replace($comment_body, $comment_nid) {
  $matches = _comment_easy_reply_node_get_matches($comment_body);
  if (!empty($matches)) {
    $node = node_load($comment_nid);
    $account = user_load($node->uid);
    $tag = '@' . format_username($account);
    $comment_body = str_replace('@#0', '<a href="#">' . $tag . '</a>', $comment_body);
  }
  return $comment_body;
}

/**
 * Implements hook_views_api().
 */
function comment_easy_reply_node_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'comment_easy_reply_node') . '/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function comment_easy_reply_node_form_alter(&$form, &$form_state, $form_id) {
  $comment_form_id = 'comment-form';
  if (substr($form['#id'], 0, strlen($comment_form_id)) == $comment_form_id && $form['#node'] && _comment_easy_reply_is_node_type_active($form['#node']->type)) {
    $nid = $form['#node']->nid;
    $cid = NULL;
    if (isset($form['pid']['#value'])) {
      $cid = $form['pid']['#value'];
    }
    if (!$cid && $nid && arg(0) == 'comment' && arg(1) == 'reply' && isset($_GET['comment-easy-reply-node'])
    && $_GET['comment-easy-reply-node'] == 'node-reply') {
      $language = $form['comment_body']['#language'];
      if (array_key_exists('#default_value', $form['comment_body'][$language][0])) {
        $form['comment_body'][$language][0]['#default_value'] = '@#0 ' . $form['comment_body'][$language][0]['#default_value'];
      }
      else {
        $form['comment_body'][$language][0]['value']['#default_value'] = '@#0 ' . $form['comment_body'][$language][0]['value']['#default_value'];
      }
      if (isset($form['subject'])) {
        $node = node_load($nid);
        $form['subject']['#default_value'] = _comment_easy_reply_get_settings_value('comment_easy_reply_node_reply_subject', $node->type);
        $form['subject']['#default_value'] = token_replace($form['subject']['#default_value'], array('node' => $node));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_easy_reply_node_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node_type'])) {
    return;
  }
  $node_type = $form['#node_type']->type;
  module_load_include('inc', 'comment_easy_reply_node', 'comment_easy_reply_node.admin');
  $form['comment']['comment_easy_reply']['override']['active'] += _comment_easy_reply_node_settings_form($form_state, $node_type);
  $form['#submit'][] = 'node_type_form_comments_easy_reply_node_submit';
  $form['#validate'][] = 'node_type_form_comments_easy_reply_node_validate';
}

/**
 * Check if reply link is active for current comment node type.
 *
 * @param object $comment
 *   The comment to be checked.
 *
 * @return bool
 *   TRUE if is active, FALSE otherwise.
 */
function _comment_easy_reply_node_is_comment_node_type_active($comment) {
  $node_type = _comment_easy_reply_get_comment_node_type($comment);
  return _comment_easy_reply_get_settings_value('comment_easy_reply_node_reply_node_link_activated', $node_type);
}

function _comment_easy_reply_node_is_node_type_display_active($node_type, $display) {
  $active_displays = _comment_easy_reply_get_settings_value('comment_easy_reply_node_node_display', $node_type);
  if (_comment_easy_reply_get_settings_value('comment_easy_reply_node_reply_node_link_activated', $node_type)
    && in_array($display, $active_displays)) {
      return TRUE;
  }
  return FALSE;  
}


/**
 * Replace references in a comment.
 *
 * @param object $comment
 *   The comment with a comment reference in its body.
 *
 * @return object
 *   The comment with references replaced.
 */
function _comment_easy_reply_node_comment_replace($comment) {
  $comment_body = '';
  if (isset($comment->content['comment_body'][0]['#markup'])) {
    $comment_body = &$comment->content['comment_body'][0]['#markup'];
  }
  else {
    $items = field_get_items('comment', $comment, 'comment_body');
    if (!empty($items)) {
      $value = array_shift($items);
      $comment_body = &$value['safe_value'];
    }
  }
  if (!empty($comment_body)) {
    $comment_nid = $comment->nid;
    $matches = _comment_easy_reply_node_get_matches($comment_body . $comment->subject);
    if (!empty($matches)) {
      $node = node_load($comment_nid);
      $account = user_load($node->uid);
      foreach ($matches as $num) {
        $tag = '@' . format_username($account);
        $comment_body = str_replace('@#0', '<a href="#">' . $tag . '</a>', $comment_body);
        $comment->subject = str_replace('@#0', $tag, $comment->subject);
      }
    }
    $comment->content['comment_body'][0]['#markup'] = $comment_body;
  }
  return $comment;
}

/**
 * Find @#NUM occurences inside a given string.
 *
 * @param string $text
 *   The string to parse.
 *
 * @return array
 *   A array of occurrences. If no occurrence is found, the array will be
 *   empty.
 */
function _comment_easy_reply_node_get_matches($text) {
  $result = array();
  $matches = array();
  preg_match_all('/(@#0)+\s/i', $text, $matches);
  if (isset($matches[1]) && !empty($matches[1])) {
    rsort($matches[1]);
    foreach ($matches[1] as $num) {
      if (substr($num, -1) == ' ') {
        $num = substr($num, 0, -1);
      }
      $result[$num] = $num;
    }
  }
  return $result;
}

/**
 * The callback for hook_comment_easy_reply_settings().
 *
 * @param string $name
 *   The name of the setting.
 * @param string $node_type
 *   The node type.
 *
 * @return mixed
 *   The setting value.
 */
function _comment_easy_reply_node_settings_value_callback($name, $node_type) { 
  switch ($name) {
    case 'comment_easy_reply_node_reply_node_link_activated':
      if (_comment_easy_reply_is_node_type_override_active($node_type)) {
        return variable_get('comment_easy_reply_node_reply_node_link_activated_' . $node_type, COMMENT_EASY_REPLY_NODE_DEFAULT_REPLY_NODE_LINK_ACTIVATED);
      }
      return variable_get('comment_easy_reply_node_reply_node_link_activated', COMMENT_EASY_REPLY_NODE_DEFAULT_REPLY_NODE_LINK_ACTIVATED);
      break;

    case 'comment_easy_reply_node_reply_node_link':
      if (_comment_easy_reply_is_node_type_override_active($node_type)) {
        return variable_get('comment_easy_reply_node_reply_node_link_' . $node_type, COMMENT_EASY_REPLY_NODE_DEFAULT_REPLY_NODE_LINK_TEXT);
      }
      return variable_get('comment_easy_reply_node_reply_node_link', COMMENT_EASY_REPLY_NODE_DEFAULT_REPLY_NODE_LINK_TEXT);
      break;

    case 'comment_easy_reply_node_reply_subject':
      if (_comment_easy_reply_is_node_type_override_active($node_type)) {
        return variable_get('comment_easy_reply_node_reply_subject_' . $node_type, COMMENT_EASY_REPLY_NODE_DEFAULT_FIRST_REPLY_SUBJECT);
      }
      return variable_get('comment_easy_reply_node_reply_subject', COMMENT_EASY_REPLY_NODE_DEFAULT_FIRST_REPLY_SUBJECT);
      break;

    case 'comment_easy_reply_node_node_display':
      if (_comment_easy_reply_is_node_type_override_active($node_type)) {
        $displays = variable_get('comment_easy_reply_node_node_display_' . $node_type, COMMENT_EASY_REPLY_NODE_DEFAULT_ACTIVE_DISPLAY);
        if (!is_array($displays)) {
          $displays = array($displays);
        }
        return $displays;
      }
      $displays = variable_get('comment_easy_reply_node_node_display', COMMENT_EASY_REPLY_NODE_DEFAULT_ACTIVE_DISPLAY);
      if (!is_array($displays)) {
        $displays = array($displays);
      }
      return $displays;
      break;
  }
  return FALSE;
}

/**
 * Get the data for node first comment reply.
 *
 * @param int $nid
 *   the node nid.
 *
 * @return string
 *   The json output for the ajax call.
 */
function _comment_easy_reply_node_get_first_reply_text($nid) {
  $data = _comment_easy_reply_node_get_first_reply_data($nid);
  return drupal_json_output(array('comment' => $data));
}

/**
 * Get the text for node first comment reply.
 *
 * @param int $nid
 *   the node nid.
 *
 * @return array
 *   The array for the json ajax call.
 */
function _comment_easy_reply_node_get_first_reply_data($nid) {
  $data = array();
  $node = node_load($nid);
  $data['subject'] = _comment_easy_reply_get_settings_value('comment_easy_reply_node_reply_subject', $node->type);
  $data['subject'] = token_replace($data['subject'], array('node' => $node));
  $data['body'] = '@#0';
  return $data;
}

/**
 * Check if current user can access to node reply ajax call.
 *
 * @param int $nid
 *   the node nid.
 *
 * @return bool
 *   TRUE if user can access, FALSE otherwise.
 */
function _comment_easy_reply_node_first_reply_ajax_access($nid) {
  if (user_access('post comments')) {
    $node = node_load($nid);
    if ($node && $node->comment == COMMENT_NODE_OPEN) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Validate callback for the node type settings form.
 */
function node_type_form_comments_easy_reply_node_validate($form, &$form_state) {
  $values = $form_state['values'];
  $node_type = $values['type'];
  $link_active = $values['comment_easy_reply_node_reply_node_link_activated_' . $node_type];
  if ($link_active) {
    $text = $values['comment_easy_reply_node_reply_node_link_' . $node_type];
    if (empty($text)) {
      form_set_error('comment_easy_reply_node_reply_node_link_' . $node_type, t('Node reply link text cannot be empty if activated.'));
    }
    $text = $values['comment_easy_reply_node_reply_subject_' . $node_type];
    $error = FALSE;
    $messages = _comment_easy_reply_node_validate_node_first_reply_text($text, $error);
    if ($error) {
      foreach ($messages as $msg) {
        form_set_error('comment_easy_reply_node_reply_subject_' . $node_type, $msg);
      }
    }
  }
}

/**
 * Submit callback for the node type settings form.
 */
function node_type_form_comments_easy_reply_node_submit($form, &$form_state) {
  $values = $form_state['values'];
  $node_type = $values['type'];
  variable_set('comment_easy_reply_node_reply_node_link_activated_' . $node_type, $values['comment_easy_reply_node_reply_node_link_activated_' . $node_type]);
  variable_set('comment_easy_reply_node_reply_node_link_' . $node_type, $values['comment_easy_reply_node_reply_node_link_' . $node_type]);
  variable_set('comment_easy_reply_node_reply_subject_' . $node_type, $values['comment_easy_reply_node_reply_subject_' . $node_type]);
  variable_set('comment_easy_reply_node_node_display_' . $node_type, $values['comment_easy_reply_node_node_display_' . $node_type]);
  cache_clear_all('field:node:', 'cache_field', TRUE);
}

/**
 * hook_comment_easy_reply_settings() report status value callback.
 *
 * @param string $name
 *   The setting name.
 * @param string $value
 *   The setting value to be parsed.
 *
 * @return mixed
 *   The return parsed value.
 */
function _comment_easy_reply_node_status_report_callback($name, $value = '') {
  switch ($name) {
      case 'comment_easy_reply_node_reply_node_link_activated':
        if ($value) {
          $value = t('enabled');
        }
        else {
          $value = t('disabled');
        }
        break;

      case 'comment_easy_reply_node_node_display':
        if (empty($value)) {
          return '';
        }
        if (!is_array($value)) {
          $value = array($value);
        }
        $value = implode(', ', array_filter($value));
        break;
    }
    return $value;
}
