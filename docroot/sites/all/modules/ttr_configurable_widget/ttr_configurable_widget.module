<?php
/**
 * @file
 * TTR Configurable Widget module file.
 *
 * This file contains implementations of the hooks required to generate 
 * the widget aswell as hook implementations for the two default 
 * `display options`.
 */

/**
 * Implements hook_field_widget_info().
 */
function ttr_configurable_widget_field_widget_info() {
  return array(
    'ttr_config' => array(
      'label' => t('TTR Configurable Widget'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ttr_configurable_widget_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();

  if ($widget['type'] == 'ttr_config') {

    $form['fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('TTR Configuration settings'),
      '#description' => t('Configure this taxonomy term reference field.'),
    );

    $form['fieldset']['#attached']['css'] = array(
      drupal_get_path('module', 'ttr_configurable_widget') . '/css/ttrcw.css',
    );

    // Number of displayed options.
    $form['fieldset']['display_settings'] = array(
      '#type' => 'radios',
      '#title' => t('Display settings:'),
      '#options' => array(
        'all' => t('Display all options'),
        'specific' => t('Specify number of options to display'),
      ),
      '#required' => TRUE,
    );
    // -- default val.
    $form['fieldset']['display_settings']['#default_value'] = isset($settings['fieldset']['display_settings']) ? $settings['fieldset']['display_settings'] : 'all';
    $form['fieldset']['additional_settings'] = array(
      '#type' => 'container',
      '#title' => '',
      '#states' => array(
        // Hide the this field when the "Display all options" radio is selected.
        'invisible' => array(
          ':input[name="instance[widget][settings][fieldset][display_settings]"]' => array('value' => 'all'),
        ),
      ),
    );

    $form['fieldset']['additional_settings']['number_to_display'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of terms to display'),
      '#description' => t('Number of options to display/provide in-form.'),
      '#states' => array(
        // Hide the this field when the "Display all options" radio is selected.
        'visible' => array(
          ':input[name="display_settings"]' => array('value' => 'specific'),
        ),
      ),
    );
    // -- default val.
    $form['fieldset']['number_to_display']['#default_value'] = (isset($settings['fieldset']['number_to_display']) && is_numeric($settings['fieldset']['number_to_display'])) ? $settings['fieldset']['number_to_display'] : 3;

    // Order by.
    $form['fieldset']['order_by'] = array(
      '#type' => 'select',
      '#title' => t('Order by'),
      '#options' => array(
        'alpha_asc' => t('Alphabetical order (ASC)'),
        'alpha_desc' => t('Alphabetical order (DESC)'),
        'by_tid' => t('Order by term ID'),
        'daily_rand' => t('Daily randomiser'),
        'rand' => t('Random'),
      ),
      '#default_value' => 'by_tid',
      '#required' => TRUE,
    );
    // -- default val.
    if (isset($settings['fieldset']['order_by'])) {
      $form['fieldset']['order_by']['#default_value'] = $settings['fieldset']['order_by'];
    }

    // View type.
    // --  Get available view types.
    $view_options = array();
    foreach (module_implements('ttrcw_view_info') as $module) {
      $function = $module . '_ttrcw_view_info';
      $modules_view_types = $function();
      foreach ($modules_view_types as $view_name => $data) {
        $view_options[$module . '|' . $view_name] = $data['title'];
      }
    }

    $form['fieldset']['view_type'] = array(
      '#type' => 'select',
      '#title' => t('View type'),
      '#options' => $view_options,
      '#required' => TRUE,
    );
    // -- default val.
    if (isset($settings['fieldset']['view_type'])) {
      $form['fieldset']['view_type']['#default_value'] = $settings['fieldset']['view_type'];
    }
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function ttr_configurable_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $element;
  $widget['#delta'] = $delta;
  $form['#type'] = 'hidden';

  switch ($instance['widget']['type']) {
    case 'ttr_config':
      if (isset($form['#node_edit_form']) && $form['#node_edit_form']) {
        // Get taxonomy term options as per the field instance settings.
        // -- get vocabulary used & all options.
        $vocabulary_machine_name = $field['settings']['allowed_values'][0]['vocabulary'];
        $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
        $terms = taxonomy_get_tree($vocabulary->vid);
        // Format term list.
        $all_options = array();
        foreach ($terms as $term_object) {
          $all_options[$term_object->tid] = $term_object->name;
        }

        // -- number of options to show.
        if ((isset($instance['widget']['settings']['fieldset']['display_settings'])) && ($instance['widget']['settings']['fieldset']['display_settings'] == 'specific') && isset($instance['widget']['settings']['fieldset']['number_to_display']) && is_numeric($instance['widget']['settings']['fieldset']['number_to_display']) && $instance['widget']['settings']['fieldset']['number_to_display'] > 0) {
          $limited_number_to_display = $instance['widget']['settings']['fieldset']['number_to_display'];
        }
        else {
          $limited_number_to_display = FALSE;
        }

        // -- term ordering.
        $order_by = isset($instance['widget']['settings']['fieldset']) ? $instance['widget']['settings']['fieldset']['order_by'] : NULL;
        switch ($order_by) {
          case 'alpha_asc':
            asort($all_options);
            break;

          case 'alpha_desc':
            arsort($all_options);
            break;

          case 'by_tid':
            ksort($all_options);
            break;

          case 'daily_rand':
            // Check if today's options have already been set.
            $today = date('Ymd');
            if (($saved_options = variable_get('daily_random_options_for_' . $instance['id'] . '_' . $vocabulary_machine_name)) && ($saved_options['date'] == $today)) {
              $options = $saved_options['options'];
            }
            else {
              $todays_options = array('date' => $today);
              ttr_configurable_widget_shuffle_order_assoc($all_options);
              $todays_options['options'] = $all_options;
              variable_set('ttr_configurable_widget_daily_random_options_for_' . $instance['id'] . '_' . $vocabulary_machine_name, $todays_options);
            }
            break;

          default:
            ttr_configurable_widget_shuffle_order_assoc($all_options);
        }

        if ($limited_number_to_display) {
          // Trim array.
          $i = 0;
          foreach ($all_options as $tid => $label) {
            if ($i < $limited_number_to_display) {
              $options[$tid] = $label;
              $i++;
            }
            else {
              continue;
            }
          }
        }
        else {
          $options = $all_options;
        }

        // Widget view type.
        if (isset($instance['widget']['settings']['fieldset'])) {
          $view_details = $instance['widget']['settings']['fieldset']['view_type'];
          $view_details_arr = explode('|', $view_details);
          $view_module_name = $view_details_arr[0];
          $view_name = $view_details_arr[1];
        }
        else {
          $view_module_name = 'ttr_configurable_widget';
          $view_name = 'select';
        }

        $function = $view_module_name . '_ttrcw_' . $view_name . '_view_form';
        if (!function_exists($function)) {
          watchdog('ttr_configurable_widget', 'TTR Config Widget: Could not find !function ', array('!function' => $function), WATCHDOG_ERROR);
          return FALSE;
        }

        // Get selected tids.
        $selected_items = array();
        if (is_array($items)) {
          foreach ($items as $term_data) {
            if (isset($term_data['tid'])) {
              $selected_items[] = $term_data['tid'];
            }
          }
        }

        $widget_view_form = $function($options, $field, $instance, $selected_items);
        $widget += $widget_view_form += array(
          '#value_key' => 'tid',
          '#element_validate' => array(
            0 => 'options_field_widget_validate',
          ),
          '#properties' => array(
            'strip_tags' => 1,
            'optgroups' => 1,
            'empty_option' => 'option_none',
            'filter_xss' => '',
          ),
        );
      }
      break;
  }

  $element = $widget;
  $element['#tree'] = TRUE;

  return $element;
}

/**
 * Associatively shuffles the order of elements within an array.
 */
function ttr_configurable_widget_shuffle_order_assoc(&$list) {
  if (!is_array($list)) {
    return $list;
  }

  $keys = array_keys($list);

  shuffle($keys);
  $random = array();
  foreach ($keys as $key) {
    $random[$key] = $list[$key];
  }

  $list = $random;
}


/*******************
 * Default views
 */

/**
 * Implements hook_ttrcw_view_info().
 */
function ttr_configurable_widget_ttrcw_view_info() {
  return array(
    'select' => array('title' => t('Select list')),
    'checkboxes' => array('title' => t('Check boxes/radio buttons')),
  );
}

/**
 * Implements hook_ttrcw_VIEW_ID_view_form().
 */
function ttr_configurable_widget_ttrcw_select_view_form($options, $field, $instance, $selected_items) {
  $form_element = array(
    '#type' => 'select',
    '#title' => check_plain($instance['label']),
    '#options' => $options,
    '#default_value' => $selected_items,
  );
  return $form_element;
}

/**
 * Implements hook_ttrcw_VIEW_ID_view_form().
 */
function ttr_configurable_widget_ttrcw_checkboxes_view_form($options, $field, $instance, $selected_items) {
  $element_type = 'checkboxes';
  if ($field['cardinality'] == 1) {
    $element_type = 'radios';
    $selected_items = $selected_items[0];
  }

  $form_element = array(
    '#type' => $element_type,
    '#title' => check_plain($instance['label']),
    '#options' => $options,
    '#default_value' => $selected_items,
  );
  return $form_element;
}
