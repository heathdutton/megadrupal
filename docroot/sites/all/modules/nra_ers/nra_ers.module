<?php
/**
 * implements hook_node_revision_operations()
 */
function nra_ers_node_revision_operations() {
  $operations["ers_schedule"] = array(
    'label' => t('Schedule (un)Publish'),
    'callback' => 'nra_ers_schedule_operation',
    'callback arguments' => array(),
  );
  return $operations;

}

/*
 * The callback used on the ers_schedule node revision operation
 */
function nra_ers_schedule_operation($nodes) {
  $key = 'nra_ers_schedule_operation';
  $_SESSION[$key]= $nodes;

  drupal_goto("admin/content/content-revision/ers_schedule/$key", array('query'=> drupal_get_destination()));
}
/**
 * call back page for admin/content/content-revision/ers_schedule/%
 *
 * @param $key
 *   the session key to look up on which revisions to operate
 */
function nra_ers_schedule_operation_form_page($key) {
  $nodes = $_SESSION[$key];
  return drupal_get_form('nra_ers_schedule_operation_form', $nodes);
}

/**
 * The form used on the admin/content/content-revision/ers_schedule/% page
 *
 * basic scheduling form used for setting the time and if it should be published or 
 * unpublished
 */
function nra_ers_schedule_operation_form($form, $form_state) {
  $form = array();
  $form['ers']['ers_schedule_selector'] = array(
    '#type' => 'radios',
    '#options' => array(
      'publish' => t('Publish'),
      'unpublish' => t('Unpublish'),
    ),
    '#default_value' => 'publish',
  );
  $form['ers']['ers_schedule_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Schedule Time'),
    '#maxlength' => 25,
    '#description' => t('Format: %time. The date format is YYYY-MM-DD and %timezone is the time zone offset from UTC.', array('%time' => format_date(time(), 'custom', 'Y-m-d H:i:s O'), '%timezone' => format_date(time(), 'custom', 'O'))),
  );
  if (module_exists('date_popup')) {
    $form['ers']['ers_schedule_time']['#type'] = 'date_popup';
    $form['ers']['ers_schedule_time']['#description'] = '';
    unset($form['ers']['ers_schedule_time']['#maxlength']);
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Schedule'),
  );
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'cancel',
  );

  return $form;
  
}

/**
 * validateor for nra_ers_schedule_operation_form()
 *
 * check for cancel as well as validate that we have a date with which we
 * can work
 */
function nra_ers_schedule_operation_form_validate($form, $form_state) {
  if ($form_state['triggering_element']['#name'] == 'cancel') {
    drupal_goto();
  }
  if (!module_exists('date_popup')) {
    $date = strtotime($form_state['values']['ers_schedule_time']);
    if(!$date) {
      form_set_error('ers_scedule_time', t('Date not formatted correctly. The date format is YYYY-MM-DD (%time) and %timezone is the time zone offset from UTC.', array('%time' => format_date(time(), 'custom', 'Y-m-d H:i:s O'), '%timezone' => format_date(time(), 'custom', 'O'))));
    }
  }
}

/**
 * submit for nra_ers_schedule_operation_form
 *  
 *  for each node (comes from the build args) we want to set the schedule time
 *  if we are doing a unpublish we use a vid of 0 (note this means that 
 *  if any revision is set to unpublish, the current revision will be set to
 *  be unpublished
 */
function nra_ers_schedule_operation_form_submit($form, $form_state) {
  $nodes = $form_state['build_info']['args'][0];
  $handler = ers_entity_plugin_get_handler('node');
  $date = $form_state['values']['ers_schedule_time'];
  $publish = $form_state['values']['ers_schedule_selector'] == 'publish';
  $schedule_time = strtotime($date);

  foreach($nodes as $node) {
    $entity = node_load($node['nid']);
    $new_vid = $publish ? $node['vid'] : 0;
    $handler->update_entity_schedule($entity, $schedule_time, $new_vid);
  }
}

/**
 * implements hook_node_revision_status()
 *
 * pull the status that is used on the revisions page
 */
function nra_ers_node_revision_status($node) {
  $vid = $node->vid;
  $handler = ers_entity_plugin_get_handler('node');
  $schedules = $handler->get_schedule($node);
  
  if($node->published_revision_id == $vid) {
    $schedule[] = drupal_placeholder(t('published revision'));
  }
  elseif($node->draft_revision_id == $vid) {
    $schedule[] = drupal_placeholder(t('draft'));
  }
  if (!empty($schedules[$vid])) {
    $date = format_date($schedules[$vid]->publish_date, 'short');
    if ($schedules[$vid]->completed) {
      $schedule[] = t('Publish: %date (completed)', array('%date' => $date));
    }
    else {
      $schedule[] = t('Publish: %date (waiting)', array('%date' => $date));
    }
  }
  else {
    $schedule[] = t('Publish: no schedule');
  }

  // Add info about unpublishing schedule.
  if (!empty($schedules[0]) && $vid > 0 && !empty($node->status)) {
    $date = format_date($schedules[0]->publish_date, 'short');
    if ($schedules[0]->completed) {
      $schedule[] = t('Unpublish: %date (completed)', array('%date' => $date));
    }
    else {
      $schedule[] = t('Unpublish: %date (waiting)', array('%date' => $date));
    }
  }

  return implode('<br />', $schedule);



}


/**
 * implements hook_node_revision_filters()
 *
 * offer up two filtes on for ers state (draft vs current) and one for schedule
 * which list all scedule dates, as well as a not schedule option
 */
function nra_ers_node_revision_filters() {
  $filters['ers_state'] = array(
    'form' => array(
      '#type' => 'select',
      '#title' => t('State'),
      '#options' => array(0=>'Any', 'draft' => t('Draft'), 'current'=>t('Current')),
    ),
  );
  $query = db_select('ers_schedule', 's');
  $query->fields('s', array('publish_date'));
  $query->condition('s.completed', 0);
  $query->groupBy('s.publish_date');
  $query->orderBy('s.publish_date');
  $result = $query->execute();
  $options = array(
    'none' => 'Not Scheduled',
  );
  foreach($result as $row) {
    $options[$row->publish_date] = format_date($row->publish_date, 'short');
  }

  $filters['ers_schedule'] = array(
    'form' => array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#title' => t('Schedule Date'),
      '#options' => $options
    ),
  );
  return $filters;
}

/**
 * implements hook_query_node_revision_alter()
 *
 * look to see if there was a ers_schedule or ers_state filter set and if so
 * add the correct filter
 */
function nra_ers_query_node_revision_alter(QueryAlterableInterface $query) {

  $filters = $query->getMetaData('filters');
  if (isset($filters['ers_state'])  && $filters['ers_state']) {

    $revision_field = $filters['ers_state'] == 'draft' ? 'draft_revision_id' : 'published_revision_id' ;
    $query->join('ers_entity_state', 'ers_state', "ers_state.entity_type = 'node' AND nr.nid = ers_state.entity_id AND nr.vid = ers_state.$revision_field");
  }
  if (isset($filters['ers_schedule'])  && !empty($filters['ers_schedule'])) {
    $date = $filters['ers_schedule'];
    $or = db_or();
    $query->leftJoin('ers_schedule', 'ers_schedule', "ers_schedule.entity_type = 'node' AND nr.nid = ers_schedule.entity_id AND nr.vid = ers_schedule.revision_id AND ers_schedule.completed = 0");
    if(isset($date['none'])) {
      $or->isNull('ers_schedule.publish_date');
    }

    $or->condition("ers_schedule.publish_date", $date,  'IN');
    $query->condition($or);
      
  }
}

/**
 * implements hook_menu()
 */
function nra_ers_menu() {
  return array(
    'admin/content/content-revision/ers_schedule/%' => array(
      'page callback' => 'nra_ers_schedule_operation_form_page',
      'access arguments' => array('administer content revisions'),
      'page arguments' => array(4),
    )
  );
}


