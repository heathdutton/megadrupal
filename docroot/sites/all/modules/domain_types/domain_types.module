<?php

/**
 * @file
 * Main hooks & api for Domain Types.
 */

require __DIR__ . '/domain_types.context.inc';

/**
 * Implements hook_views_api().
 */
function domain_types_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Retrieve domain type names from cache.
 */
function _domain_types_names() {
  return domain_types('name');
}

/**
 * Retrieves domain types from other modules' hooks.
 */
function domain_types($field = NULL) {
  $types = &drupal_static(__FUNCTION__);

  // Not cached yet.
  if (!$types) {
    // Default types.
    $defaults = array(
      'default' => array('name' => t('Default')),
    );

    // Custom types.
    $hook = 'domain_types';
    $types = $defaults;
    foreach (module_implements($hook) as $module) {
      $callback = $module . '_' . $hook;
      $types = array_merge($types, $callback());
    }
    drupal_alter($hook, $types);
  }

  // Return 2D array with 1 field per domain type.
  if ($field) {
    foreach ($types as &$type) {
      // Use @ because NULL is fine.
      $type = @$type[$field];
      unset($type);
    }
  }

  return $types;
}

/**
 * Implements hook_form_FORM_ID_alter() for domain_form().
 */
function domain_types_form_domain_form_alter(&$form, &$form_state, $form_id = 'domain_form') {
  $domain = $form['#domain'];

  $options = _domain_types_names();

  $form['x_type'] = array(
    '#type' => 'select',
    '#title' => t('Domain type'),
    '#options' => $options,
    '#default_value' => $domain['x_type'],
    '#required' => TRUE,
  );

  $form['subdomain']['#weight'] = -4;
  $form['machine_name']['#weight'] = -3;
  $form['sitename']['#weight'] = -2;
  $form['x_type']['#weight'] = -1;

  $form['#submit'][] = 'domain_types_domain_form_submit';
}

/**
 * Submit handler for domain_types_form_domain_form_alter().
 */
function domain_types_domain_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/structure/domain';
}

/**
 * Implements hook_domain_update().
 */
function domain_types_domain_update($domain, $form_state) {
  $values = $form_state['values'];

  if (isset($values['x_type'])) {
    $type = $values['x_type'];

    domain_types_set_domain_type($domain, $type);
  }
}

/**
 * Implements hook_domain_insert().
 */
function domain_types_domain_insert($domain, $form_state) {
  domain_types_domain_update($domain, $form_state);
}

/**
 * Update the type of a given domain().
 */
function domain_types_set_domain_type($domain, $type) {
  $domain = (object) $domain;

  db_update('domain')
    ->fields(array('x_type' => $type))
    ->condition('subdomain', $domain->subdomain)
    ->execute();
}

/**
 * Implements hook_domain_load().
 */
function domain_types_domain_load(&$domain) {
  $type = db_query('SELECT x_type FROM {domain} WHERE domain_id = ?', array($domain['domain_id']))->fetchField();

  $types = domain_types();
  if (!isset($types[$type])) {
    $type = 'default';
  }

  $domain['x_type'] = $type;
}

/**
 * Implements hook_form_FORM_ID_alter() for domain_overview_form().
 */
function domain_types_form_domain_overview_form_alter(&$form, &$form_state, $form_id = 'domain_overview_form') {
  // Add table column in header.
  $column = array('data' => t('Type'));
  array_splice($form['header']['#value'], 6, 0, array($column));

  $types = domain_types();

  // Add table columns to domain rows.
  foreach (element_children($form['domain']) as $domain_id) {
    // Form element.
    $domain_element = &$form['domain'][$domain_id];

    // Domain record.
    $domain = $domain_element['values']['#value'];

    // Add to form element.
    $type_name = $types[$domain['x_type']]['name'];
    $domain_element['x_type'] = array(
      '#type' => 'markup',
      '#markup' => $type_name,
    );
  }
}

/**
 * Implements hook_schema_alter().
 */
function domain_types_schema_alter(&$schema) {
  // Add field to schema.
  $schema['domain']['fields']['x_type'] = array(
    'type' => 'varchar',
    'length' => '40',
    'not null' => TRUE,
    'default' => 'default',
    'description' => 'The type of this domain',
  );
}
