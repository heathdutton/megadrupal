<?php

/**
 * @file
 * Implements YellowPay Payment Method in Drupal Commerce checkout
 * Compatible with ShopBuilder.me eCommerce platform
 * Author Eweev S.A.R.L (www.eweev.com)
 * Sponsor YellowPay (www.yellowpay.co)
 */

define("COMMERCE_YELLOWPAY_RETURN_URL", "yellowpay-response");
define("COMMERCE_YELLOWPAY_BASE_CONFIG_PATH", "admin/settings/payment/payment_methods");
define("COMMERCE_YELLOWPAY_API_URL", "https://api.yellowpay.co/v1/");

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_yellowpay_commerce_payment_method_info() {
  $payment_methods = array();

  $display_title = '<div class="commerce-yellowpay-logo">' .
      theme('image', array(
        'path' => drupal_get_path('module', 'commerce_yellowpay') . '/images/bitcoin.png',
        'title' => t('Bitcoin Payment with Yellow'),
        'alt' => t('YellowPay Bitcoin payments'),
        'attributes' => array(
          'class' => array('commerce-yellowpay-logo'),
        ),
      )) . ' ' . t('Powered by <a href="@yellow" target="_blank">Yellow</a> (<a href="@url" target="_blank">What is Bitcoin?</a>)', array('@yellow' => url('http://www.yellowpay.co'), '@url' => url('http://www.shubitcoin.com'))) .
      '</div>';

  $payment_methods['yellowpay'] = array(
    'base' => 'commerce_yellowpay',
    'title' => t('YellowPay'),
    'short_title' => t('YellowPay'),
    'display_title' => $display_title,
    'description' => t('YellowPay Bitcoin Payments'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'file' => 'yellowPay.payment.inc',
  );

  return $payment_methods;
}

function commerce_yellowpay_permission() {
  return array(
    'manage yellowpay configuration' => array(
      'title' => t('Manage YellowPay configuration'),
      'description' => t('Manage YellowPay Bitcoin Payments configuration.'),
  ));
}

/**
 * Implements hook_menu().
 */
function commerce_yellowpay_menu() {
  $items = array();

  $items[COMMERCE_YELLOWPAY_RETURN_URL] = array(
    'page callback' => 'commerce_yellowpay_response_process',
    'page arguments' => array(1),
    'access callback' => 'commerce_yellowpay_response_validate',
    'access arguments' => array(1),
    'file' => 'yellowPay.menu.inc',
    'type' => MENU_CALLBACK,
  );

  $items[COMMERCE_YELLOWPAY_BASE_CONFIG_PATH . '/yellowpay'] = array(
    'title' => 'YellowPay',
    'page callback' => array('commerce_yellowpay_callbackconfig'),
    'access arguments' => array('manage yellowpay configuration'),
    'file' => 'yellowPay.menu.inc',
  );

  return $items;
}

/**
 * Returns all request headers.
 * @return array headers
 * And array with all request headers
 */
function _commerce_yellowpay_parse_request_headers() {
  $headers = array();
  foreach ($_SERVER as $key => $value) {
    $length = 5;
    if (substr($key, 0, $length) <> 'HTTP_') {
      continue;
    }
    $header = _commerce_yellowpay_fix_header_key($key, $length);
    $headers[$header] = $value;
  }
  return $headers;
}

/**
 * Fixes request headers to match what PHP gives us.
 * @return string header_key
 *   a string with the correct syntax for a header value.
 */
function _commerce_yellowpay_fix_header_key($key, $length = 0) {
  return str_replace(' ', '-', ucwords(str_replace('_', ' ', strtolower(substr($key, $length)))));
}

/**
 * Validation Callback triggered by an IPN call from YellowPay server
 */
function commerce_yellowpay_response_validate() {
  $settings = commerce_yellowpay_get_settings();
  $headers = _commerce_yellowpay_parse_request_headers();
  $signature = $headers['Api-Sign'];
  $nonce = $headers['Api-Nonce'];
  $url = url(request_path(), array('absolute' => TRUE));

  $body = file_get_contents("php://input");
  $secret = $settings['apisecret'];

  // Build the message to be signed (this is required).
  $message = $nonce . $url . $body;
  // Sign the message using a sha256 HMAC hash (this is required).
  $sign = hash_hmac("sha256", $message, $secret, FALSE);

  if (!empty($settings['watchdog'])) {
    // Log full transaction data.
    watchdog('commerce_yellowpay', 'YellowPay IPN validation with headers = @headers signature = @signature and test signature = @sign with comparison = @test', array(
      '@headers' => print_r($headers, TRUE),
      '@signature' => $signature,
      '@sign' => $sign,
      '@test' => ($signature == $sign),
    ));
  }

  if ($signature == $sign) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_drupal_goto_alter().
 * For ShopBuilder platform
 */
function commerce_yellowpay_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if (module_exists("eweev_basic_ecommerce")) {
    // We redirect the user to ShopBuilder main payment methods page.
    if ($path == "admin/config/manage/commerce_payment_yellowpay") {
      if (user_access("manage yellowpay configuration")) {
        $path = COMMERCE_YELLOWPAY_BASE_CONFIG_PATH;
      }
    }
  }
}

/**
 * Returns the settings for this payment processor.
 *
 * @return array
 *   Settings for this payment processor
 */
function commerce_yellowpay_get_settings() {
  $settings = &drupal_static(__FUNCTION__);
  if (empty($settings)) {
    $instance = commerce_payment_method_instance_load(commerce_yellowpay_get_method_instance_id());
    if (!empty($instance['settings'])) {
      $settings = $instance['settings'];
    }
  }
  return $settings;
}

/**
 * @return element id for rule action commerce_payment_enable_yellowpay,
 * on failure return false
 */
function commerce_yellowpay_get_element_Id_action($rules_config) {

  foreach ($rules_config->actions() as $action) {
    if ($action->getElementName() == 'commerce_payment_enable_yellowpay') {
      return $action->elementId();
    }
  }
}

/**
 * Returns the method instance ID of the payment processor.
 *
 * @return null|string
 *   Method Instance ID of the payment processor
 */
function commerce_yellowpay_get_method_instance_id() {

  $event = rules_get_cache('event_commerce_payment_methods');

  // Only build the options array if payment method Rules are enabled.
  if (!empty($event)) {
    foreach (commerce_payment_methods() as $method_id => $payment_method) {
      // Look for a Rule enabling this payment method.
      foreach ($event->getIterator() as $rule) {
        foreach ($rule->actions() as $action) {
          // If an action is found, get the settings for it.
          if ($method_id == 'yellowpay' && $action->getElementName() == 'commerce_payment_enable_' . $method_id) {
            return commerce_payment_method_instance_id($method_id, $rule);
          }
        }
      }
    }
  }
  return NULL;
}

/**
 * Implements hook_eweev_payment_config_methods().
 * For ShopBuilder integration
 */
function commerce_yellowpay_eweev_payment_config_methods() {
  $methods = array();
  $image_path = drupal_get_path('module', 'commerce_yellowpay') . '/images/bitcoin.png';
  $methods['commerce_payment_yellowpay'] = array(
    'title' => 'YellowPay',
    'delayed_authorization' => TRUE,
    'payment_logo' => $image_path,
    'setup_fee' => 0,
    'discounted_setup_fee' => 0,
    'monthly_fee' => 0,
    'discounted_monthly_fee' => NULL,
    'transaction_fee' => 0,
    'discounted_transaction_fee' => NULL,
    'discount_rate' => 0,
    'discounted_discount_rate' => NULL,
    'path_edit' => BANKAUDI_BASE_CONFIG_PATH . '/yellowpay',
  );
  return $methods;
}
