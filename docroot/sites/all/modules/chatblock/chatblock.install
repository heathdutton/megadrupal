<?php

/**
 * @file
 * Install and uninstall routines for chatblock module.
 */

/**
 * Implements hook_schema().
 */
function chatblock_schema() {
  return array(
    'chatblock' => array(
      'description' => 'Chat messages for the on site chat block.',
      'fields' => array(
        'messageid' => array(
          'type' => 'serial',
          'size' => 'big',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'Internal message ID.',
        ),
        'uid' => array(
          'type' => 'int',
          'size' => 'normal',
          'not null' => FALSE,
          'description' => 'Drupal user ID.',
        ),
        'username' => array(
          'type' => 'varchar',
          'length' => 60,
          'description' => 'User name at message time.',
        ),
        'message' => array(
          'description' => 'Chat message content.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
        'timestamp' => array(
          'type' => 'int',
          'size' => 'big',
          'unsigned' => TRUE,
          'description' => 'Message timestamp.',
        ),
      ),
      'primary key' => array('messageid'),
    ),
  );
}

/**
 * Implements hook_install().
 */
function chatblock_install() {
  $t = get_t();
  global $base_path;

  $module_path = dirname(__FILE__);
  $cache_path = $module_path . '/cache/tmp';

  // Create tmp directory for cache files unless existing.
  if (!is_dir($cache_path)) {
    if (!mkdir($cache_path)) {
      drupal_set_message(
        $t('Unable to create <em>[module_dir]/chatblock/cache/tmp</em> directory. Please create one and make sure to make it writeable for Drupal.'),
        'error'
      );
    }
  }

  // Try to copy callback handler to root directory.
  if (!file_exists($_SERVER['DOCUMENT_ROOT'] . $base_path . 'chatblock.php')) {
    if (copy($module_path . '/chatblock.php', $_SERVER['DOCUMENT_ROOT'] . $base_path . 'chatblock.php')) {
      drupal_set_message($t('Successfully copied the callback handler "chatblock.php" to your Drupal root directory.'));
    }
    else {
      drupal_set_message(
        $t('Failed to copy the callback handler "chatblock.php" to your Drupal root. You should do this manually right now.'),
        'error'
      );
    }
  }
  else {
    drupal_set_message(
      $t('Did not attempt to copy the callback handler "chatblock.php" to your Drupal root as there already is a file with the same name. Make sure this is the right file, otherwise copy the file manually from the chatblock module folder to your Drupal root.'),
      'error'
    );
  }

  // Insert an initial welcome message into the database.
  // Its primary purpose is not being nice (which is known to be important)
  // but triggering the post installation poll rate to be the shortest
  // possible. This is desired so impatient site builders, when testing,
  // do not get confused if they type a test message in one browser
  // which does not appear within a few seconds in the other one.
  // TL;DR: This is a psychological message :-)
  db_insert('chatblock')
    ->fields(array(
      'timestamp' => REQUEST_TIME,
      'message' => $t('Welcome to the on site chat!'),
    ))
    ->execute();

  // As there may be more than one Drupal site sharing this module in a multisite
  // setup, we will use the "site name" variable as the most unique
  // available default id. This is done to at least somehow prevent APC
  // from accidentaly sharing one site's cache with another.

  _chatblock_install_cache_id();
}

/**
 * Helper function to initialize the APC cache id.
 *
 * @return string
 *   The just generated cache ID.
 */
function _chatblock_install_cache_id() {
  $cache_id = variable_get('chatblock_cache_id', NULL);
  if ($cache_id === NULL) {
    $cache_id = preg_replace(
      '/[^a-zA-Z0-9]/',
      '',
      $_SERVER['HTTP_HOST']
    );
    if ($cache_id == '') {
      $cache_id = 'site' . rand(100, 999);
    }

    // Just for protection. You knever know.
    if  (strlen($cache_id) > 256) {
      $cache_id = substr($cache_id, 0, 256);
    }

    variable_set('chatblock_cache_id', $cache_id);
  }
  return $cache_id;
}

/**
 * Implements hook_requirements().
 */
function chatblock_requirements($phase) {
  global $base_path;

  $requirements = array();
  if ($phase == 'runtime') {
    $drupal_root = $_SERVER['DOCUMENT_ROOT'] . base_path();
    $module_dir = $drupal_root . drupal_get_path('module', 'chatblock');

    $callback_info = array();
    $performance_faults = 0;
    $severity = REQUIREMENT_OK;

    // Check performance requirements and evaluate them.
    // 1a. Is chatblock.php in the Drupal root?
    if (!file_exists($drupal_root . '/chatblock.php')) {
      $callback_info[] = '<li>' . t(
        'copy the <em>chatblock.php</em> file from %module_dir to %drupal_root.',
        array('%module_dir' => $module_dir, '%drupal_root' => $drupal_root)
      ) . '</li>';
      $performance_faults++;
    }
    // 1b. Do chatblock.php versions match?
    elseif (
      file_get_contents($module_dir . '/chatblock.php')
      !=
      file_get_contents($drupal_root . '/chatblock.php')
    ) {
      $callback_info[] = '<li>' . t(
        'make sure that <em>chatblock.php</em> file versions in %module_dir and %drupal_root are equal.',
        array('%module_dir' => $module_dir, '%drupal_root' => $drupal_root)
      ) . '</li>';
      $performance_faults++;
    }
    // 2. Is a JS callback handler present?
    if (!module_exists('js') && !module_exists('js_callback')) {
      $callback_info[] = '<li>' . t(
        'have <a href="@js_module_url">js.module</a> or <a href="@js_callback_url">js_callback.module</a> installed and enabled.',
        array('@js_module_url' => "http://drupal.org/project/js", '@js_callback_url' => "http://drupal.org/project/js_callback")
      ) . '</li>';
      $performance_faults++;
    }
    // 3. Is APC available?
    if (!function_exists('apc_fetch')) {
      $callback_info[] = '<li>' . t(
        'install the <a href="@apc_url">PHP APC extension</a>.',
        array('@apc_url' => "http://pecl.php.net/apc")
      ) . '</li>';
      $performance_faults += 2;

      // 3a. Is cache/tmp existing and writeable?
      $tmpdir = $module_dir . '/cache/tmp';
      if (
        !is_dir($tmpdir)
        ||
        !@is_writable($tmpdir)
      ) {
        $callback_info[] = '<li>' . t(
          'make sure that the directory %directory exists and is writeable by Drupal. At least one of these is not the case at the moment.',
          array('%directory' => $tmpdir)
        ) . '</li>';
        $performance_faults += 5;
      }
    }
    if (!empty($callback_info)) {
      if ($performance_faults >= 5) {
        $severity = REQUIREMENT_ERROR;
        $warning_intro = t('Your system configuration is very likely to run into performance issues and chatblock will probably not even work at all.');
      }
      elseif ($performance_faults > 2) {
        $severity = REQUIREMENT_ERROR;
        $warning_intro = t('Your system configuration is likely to run into performance issues.');
      }
      else {
        $severity = REQUIREMENT_WARNING;
        $warning_intro = t('Your system is not optimally configured.');
      }
      $result = $warning_intro . ' ' . t(
        'For optimal chatblock performance you should: <ul>!actions</ul>',
        array('!actions' => implode('', $callback_info))
      );
    }
    else {
      $result = t('It looks like you have done everything right to have your chatblock as performant as possible!');
    }
    $requirements['chatblock_callbacks'] = array(
      'title' => t('Chatblock'),
      'severity' => $severity,
      'value' => $result,
    );
  }
  return $requirements;
}

/*
 * Implements hook_uninstall().
 */
function chatblock_uninstall() {

  // Conditionally remove persistant APC variables.
  require_once(dirname(__FILE__) . '/cache/apc.inc');
  if (CHATBLOCK_IS_APC) {
    if ($cache_data = apc_cache_info('user')) {
      foreach ($cache_data['cache_list'] as $item) {
        if (strpos($item['info'], 'chatblock_' . CHATBLOCK_CACHE_ID . '_') === 0) {
          apc_delete($item['info']);
        }
      }
    }
  }

  // Clear drupal variables.
  foreach (array(
    'chatblock_add_smileys',
    'chatblock_autodelete_unit',
    'chatblock_autodelete_value',
    'chatblock_cache_id',
    'chatblock_chat_height',
    'chatblock_default_title',
    'chatblock_detect_urls',
    'chatblock_get_url',
    'chatblock_guest_prefix',
    'chatblock_infopage_custom_content',
    'chatblock_input_label',
    'chatblock_link_users',
    'chatblock_log_messages_per_page',
    'chatblock_minimize_input_form',
    'chatblock_maximum_retrospect',
    'chatblock_number_messages',
    'chatblock_permission_hint',
    'chatblock_poll_rate_default',
    'chatblock_poll_rate_max',
    'chatblock_show_function_links',
    'chatblock_show_logins',
    'chatblock_show_logouts',
    'chatblock_show_timestamps',
    'chatblock_smart_poll_stepwidth',
    'chatblock_timestamp_format',
    'chatblock_timestamp_format_logs',
    'chatblock_timestamp_tooltip',
  ) as $varname) {
    variable_del($varname);
  }


  // Delete callback handler from root directory.
  if (file_exists($_SERVER['DOCUMENT_ROOT'] . base_path() . 'chatblock.php')) {
    if (
      file_get_contents($_SERVER['DOCUMENT_ROOT'] . base_path() . 'chatblock.php')
      ==
      file_get_contents(dirname(__FILE__) . '/chatblock.php')
    ) {
      // Only delete the callback handler if it has not been changed.
      if (unlink($_SERVER['DOCUMENT_ROOT'] . base_path() . 'chatblock.php')) {
        drupal_set_message(t('Successfully removed the callback handler from your Drupal root directory.'));
      }
      else {
        drupal_set_message(
          ('Failed to remove the callback handler ("chatblock.php") from your Drupal root directory.'),
          'error'
        );
      }
    }
    else {
      drupal_set_message(
        t('The callback handler ("chatblock.php") has not been removed from your Drupal root directory as it appears to have been edited.'),
        'warning'
      );
    }
  }
}

/**
 * Add database comments to most columns.
 */
function chatblock_update_7101() {

  /**
   * @todo: Move the following command to a later update as soon as
   *        https://api.drupal.org/comment/51693#comment-51693
   *        has any useful updates.
   *
   * db_change_field('chatblock', 'messageid', 'messageid', array(
   *   'type' => 'serial',
   *   'size' => 'big',
   *   'not null' => TRUE,
   *   'unsigned' => TRUE,
   *   'description' => 'Internal message ID.',
   * ));
  */

  db_change_field('chatblock', 'uid', 'uid', array(
    'type' => 'int',
    'size' => 'normal',
    'not null' => FALSE,
    'description' => 'Drupal user ID.',
  ));
  db_change_field('chatblock', 'username', 'username', array(
    'type' => 'varchar',
    'length' => 60,
    'description' => 'User name at message time.',
  ));
  db_change_field('chatblock', 'timestamp', 'timestamp', array(
    'type' => 'int',
    'size' => 'big',
    'unsigned' => TRUE,
    'description' => 'Message timestamp.',
  ));
}
