<?php
/**
 * @file
 * Date single day module.
 */


/**
 * Implements hook_field_widget_info_alter().
 */
function date_single_day_field_widget_info_alter(&$info) {
  // Add single day setting to date_popup widget.
  $info['date_popup']['settings'] += array(
    'date_single_day' => array(),
  );
}

/**
 * Implements hook_date_field_widget_settings_form_alter().
 */
function date_single_day_date_field_widget_settings_form_alter(&$form, $context) {

  $field = $context['field'];
  $instance = $context['instance'];
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'date_popup' && !empty($field['settings']['todate'])) {
    // Add this module's widget settings.
    $form['date_single_day'] = array(
      '#type' => 'fieldset',
      '#title' => t('Date single day'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 8,
      '#fieldset' => 'date_format',
    );

    $form['date_single_day']['date_single_day'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show single day'),
      '#default_value' => !empty($settings['date_single_day']['date_single_day']),
      '#description' => t('Show only the time portion of the "To" field. Use this for dates which will only ever span a single day.'),
    );

    $form['date_single_day']['end_after_midnight'] = array(
      '#type' => 'checkbox',
      '#title' => t('End after midnight'),
      '#default_value' => !empty($settings['date_single_day']['end_after_midnight']),
      '#description' => t('Allow users to enter end time values that are less than the start time. The end date will be saved as start date + 1 day.'),
      '#states' => array(
        'visible' => array(
          ':input[name="instance[widget][settings][date_single_day][date_single_day]"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_element_info_alter().
 */
function date_single_day_element_info_alter(&$type) {
  // Additional #pre_render callback to date_combo field.
  // Removes second date field, adds end time field.
  if (empty($type['date_combo']['#pre_render'])) {
    $type['date_combo']['#pre_render'] = array();
  }
  $type['date_combo']['#pre_render'][] = 'date_single_day_date_combo_pre_render';

  // Additional #process callback to date_combo field.
  // Recreates data removed in #pre_render callback.
  if (empty($type['date_combo']['#process'])) {
    $type['date_combo']['#process'] = array();
  }
  array_unshift($type['date_combo']['#process'], 'date_single_day_date_combo_element_process');

  // Additional #process callback to date_popup field.
  // Adds dummy end date to pass validation.
  if (empty($type['date_popup']['#process'])) {
    $type['date_popup']['#process'] = array();
  }
  array_unshift($type['date_popup']['#process'], 'date_single_day_date_popup_process');
}

/**
 * Pre_render callback for date_combo elements.
 */
function date_single_day_date_combo_pre_render(&$element) {
  $instance = $element['value']['#instance'];
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if (!empty($settings['date_single_day']['date_single_day'])) {
    // Add end time to start date, remove end date.
    $element['value']['endtime'] = $element['value2']['time'];

    $element['value']['time']['#title'] = t('Start Time');
    $element['value']['endtime']['#title'] = t('End Time');

    if (!empty($element['value2']['#states'])) {
      $element['value']['endtime']['#states'] = $element['value2']['#states'];
    }
    unset($element['value2']);
  }
  return $element;
}

/**
 * Process callback for date_combo elements.
 */
function date_single_day_date_combo_element_process($element, &$form_state, $form) {
  // Form state indexes.
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $delta = $element['#delta'];

  $field_parents = $element['#field_parents'];
  $field_state = field_form_get_state($field_parents, $field_name, $langcode, $form_state);
  $instance = $field_state['instance'];
  $settings = $instance['widget']['settings'];

  if (!empty($settings['date_single_day']['date_single_day'])) {
    $datetime_format = $instance['widget']['settings']['input_format'];
    $date_format = date_part_format('date', $datetime_format);

    if (isset($element['#value']['value']['date'])) {
      // Add start date as end date to element.
      $end_date = $element['#value']['value']['date'];
      // Respect "End after midnight" setting.
      if (!empty($settings['date_single_day']['end_after_midnight'])) {
        $start_time = $element['#value']['value']['time'];
        $end_time = $element['#value']['value2']['time'];
        if ($end_time < $start_time) {
          // Add one day to end date.
          $end_date = date($date_format, strtotime($end_date . ' + 1 day'));
        }
      }
      // Add end date to element.
      $element['#value']['value2']['date'] = $end_date;

      // Add end date to form_state and form_input.
      $form_state_base = drupal_array_get_nested_value($form_state['values'], $field_parents);
      if (isset($form_state_base[$field_name][$langcode][$delta])) {
        // Set end date same as start date.
        $field = array(
          '#parents' => array_merge($field_parents, array($field_name, $langcode, $delta, 'value2', 'date')),
        );
        form_set_value($field, $end_date, $form_state);

        // We need to set form_state input also, as the date module
        // does validation against it.
        $form_input_base = &drupal_array_get_nested_value($form_state['input'], $field_parents);
        $input = &$form_input_base[$field_name][$langcode][$delta];
        $input['value2']['date'] = $end_date;
      }
    }
  }
  return $element;
}

/**
 * Process callback for date_popup elements.
 */
function date_single_day_date_popup_process(&$element, &$form_state, $form) {
  if (isset($element['#instance']['widget']['settings'])) {
    $settings = $element['#instance']['widget']['settings'];

    if (!empty($settings['date_single_day']['date_single_day']) && end($element['#parents']) == 'value2') {
      // Add default date to field in order to pass date popup processing.
      $default_dates = date_popup_element_value_callback($element, FALSE, $form_state);
      $element['#value']['date'] = $default_dates['date'];
    }
  }
  return $element;
}
