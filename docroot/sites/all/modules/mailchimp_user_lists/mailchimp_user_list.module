<?php
/**
 * @file
 * Mailchimp user list module.
 */

/**
 * Implements hook_permission().
 */
function mailchimp_user_list_permission() {
  return array(
    'administer mailchimp user lists' => array(
      'title' => t('Administer MailChimp User List'),
      'description' => t('Administer mailchimp user list.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mailchimp_user_list_menu() {
  // Admin  menu item.
  $items['admin/config/services/mailchimp/user_lists'] = array(
    'title' => 'User Lists',
    'description' => 'Manage MailChimp User Lists.',
    'page callback' => 'mailchimp_user_list_all_users_table',
    'file' => 'includes/mailchimp_user_list.admin.inc',
    'access arguments' => array(
      'administer mailchimp user lists',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  // User Navivation Menu Item.
  $items['admin/mailchimp/user_lists'] = array(
    'title' => 'My Mailing Lists',
    'page callback' => array(
      'mailchimp_user_list_user_table',
    ),
    'access callback' => 'mailchimp_user_list_menu_access',
    'file' => 'includes/mailchimp_user_list.my_mailing_lists.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );
  // Callback to get list of campaigns based on list id.
  $items['admin/mailchimp/user_lists/%/campaigns'] = array(
    'description' => 'Campaigns assigned to user mailing list.',
    'title callback' => 'mailchimp_user_list_list_title',
    'title arguments' => array(3),
    'page callback' => 'mailchimp_user_list_campaign_table_make_page',
    'page arguments' => array(3),
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3),
    'file' => 'includes/mailchimp_user_list.campaign_lists.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );
  // Callback to create a new campaign.
  $items['admin/mailchimp/user_lists/%/edit_campaign'] = array(
    'title' => 'New Campaign',
    'file' => 'includes/mailchimp_user_list.edit_campaign.inc',
    'page callback' => 'mailchimp_user_list_edit_campaign',
    'page arguments' => array(3, FALSE),
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3),
    'type' => MENU_NORMAL_ITEM,
  );
  // Callback to edit a specific campaign.
  $items['admin/mailchimp/user_lists/%/edit_campaign/%'] = array(
    'title callback' => 'mailchimp_user_list_campaign_title',
    'title arguments' => array(5),
    'file' => 'includes/mailchimp_user_list.edit_campaign.inc',
    'page callback' => 'mailchimp_user_list_edit_campaign',
    'page arguments' => array(3, 5),
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3, 5),
    'type' => MENU_NORMAL_ITEM,
  );
  // Callback to delete a specific campaign.
  $items['admin/mailchimp/user_lists/%/delete_campaign/%'] = array(
    'title callback' => 'mailchimp_user_list_campaign_title',
    'title arguments' => array(5),
    'file' => 'includes/mailchimp_user_list.delete_campaign.inc',
    'page callback' => 'mailchimp_user_list_delete_campaign',
    'page arguments' => array(3, 5),
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3, 5),
    'type' => MENU_NORMAL_ITEM,
  );
  // Callback to test send a specific campaign.
  $items['admin/mailchimp/user_lists/%/test_send_campaign/%'] = array(
    'page callback' => 'mailchimp_user_list_mailing_form_test_send',
    'page arguments' => array(3, 5),
    'file' => 'includes/mailchimp_user_list.send_campaign.inc',
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3, 5),
    'type' => MENU_NORMAL_ITEM,
  );
  // Callback to send a specific campaign.
  $items['admin/mailchimp/user_lists/%/send_campaign/%'] = array(
    'title callback' => 'mailchimp_user_list_campaign_title',
    'title arguments' => array(5),
    'file' => 'includes/mailchimp_user_list.send_campaign.inc',
    'page callback' => 'mailchimp_user_list_send_campaign_page',
    'page arguments' => array(3, 5),
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3, 5),
    'type' => MENU_CALLBACK,
  );
  // Callback to view a lists members on a list.
  $items['admin/mailchimp/user_lists/%/members'] = array(
    'title callback' => 'mailchimp_user_list_list_title',
    'title arguments' => array(3),
    'file' => 'includes/mailchimp_user_list.list_members.inc',
    'page callback' => 'mailchimp_user_list_list_members_page',
    'page arguments' => array(3),
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3),
    'type' => MENU_NORMAL_ITEM,
  );
  // Callback to view a campaigns stats.
  $items['admin/mailchimp/user_lists/%/campaign_stats/%'] = array(
    'title callback' => 'mailchimp_user_list_campaign_title',
    'title arguments' => array(5),
    'file' => 'includes/mailchimp_user_list.campaign_stats.inc',
    'page callback' => 'mailchimp_user_list_campaign_stats',
    'page arguments' => array(3, 5),
    'access callback' => 'mailchimp_user_list_access',
    'access arguments' => array(3, 5),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * User form alter.
 *
 * @param array $form
 *   form array
 */
function mailchimp_user_list_form_user_profile_form_alter(&$form, $form_state) {
  global $user;
  if (variable_get('mailchimp_api_key')) {
    if (user_access('administer mailchimp user lists') || $user->uid == 1) {
      $form['mailchimp_form'] = array(
        '#title' => t('Mailchimp access'),
        '#type' => 'fieldset',
      );
      $results = mailchimp_user_list_query($form['#user']->uid);
      $current_lists = array();
      $current_templates = array();
      foreach ($results as $record) {
        $current_lists = explode('|', $record->list_ids);
        $current_templates = explode('|', $record->template_ids);
      }
      $all_lists = mailchimp_user_list_retrieve_all_lists();
      $lists = array();
      foreach ($all_lists['data'] as $list) {
        $lists[$list['id']] = $list['name'];
      }
      $form['mailchimp_form']['mailchimp_available_lists'] = array(
        '#title' => t('Mailchimp Available Lists'),
        '#type' => 'checkboxes',
        '#options' => $lists,
        '#required' => FALSE,
      );
      $template_options = array();
      $templates = mailchimp_user_list_retrieve_all_templates();
      foreach ($templates['user'] as $template) {
        $template_options[$template['id']] = $template['name'];
      }
      $form['mailchimp_form']['mailchimp_available_templates'] = array(
        '#title' => t('Mailchimp Available templates'),
        '#type' => 'checkboxes',
        '#required' => FALSE,
        '#options' => $template_options,
        '#default_value' => $current_templates,
      );
      $form['#submit'] = array(
        'mailchimp_user_list_save_user',
        'user_profile_form_submit',
      );
      if (count($current_lists) != 0) {
        $form['mailchimp_form']['mailchimp_available_lists']['#default_value'] = $current_lists;
      }
      if (count($current_templates) != 0) {
        $form['mailchimp_form']['mailchimp_available_templates']['#default_value'] = $current_templates;
      }
    }
  }
}

/**
 * Wrapper to save user lists into database.
 *
 * @param array $form
 *   form array
 */
function mailchimp_user_list_save_user($form, &$form_state) {
  $user_lists_a = array();
  $user_templates_a = array();
  foreach ($form_state['values']['mailchimp_available_lists'] as $value) {
    if ($value) {
      $user_lists_a[] = $value;
    }
  }
  foreach ($form_state['values']['mailchimp_available_templates'] as $value) {
    if ($value) {
      $user_templates_a[] = $value;
    }
  }
  $user_lists = implode('|', $user_lists_a);
  $user_templates = implode('|', $user_templates_a);
  mailchimp_user_list_save_user_to_db($form['#user']->uid, $user_lists, $user_templates);
}

/**
 * Save user into database.
 *
 * @param int $uid
 *   user id
 * @param sring $user_lists
 *   pipe delimited list of mailchimp lists
 */
function mailchimp_user_list_save_user_to_db($uid, $user_lists = NULL, $user_templates = NULL) {
  db_delete('mailchimp_user_list')->condition('uid', $uid)->execute();
  if ($user_lists) {
    db_insert('mailchimp_user_list')->fields(array(
      'list_ids' => $user_lists,
      'uid' => $uid,
      'template_ids' => $user_templates,
    ))->execute();
  }
}

/**
 * Retrieve all templates.
 *
 * @return array
 *   array of template details.
 */
function mailchimp_user_list_retrieve_all_templates() {
  $q = mailchimp_get_api_object();
  $results = $q->templates();
  if ($q->errorCode) {
    global $user;
    drupal_set_message(t('There was a problem retrieving avaible templates.'));
    watchdog('mailchimp', 'Could not retrieve available templates for @user error: @error', array(
      '@user' => $user->name,
      '@error' => $q->errorMessage,
    ), WATCHDOG_ERROR);
  }
  else {
    return $results;
  }
}

/**
 * Retrieve content from a campaign based on template.
 *
 * @return string
 *   html from the std_content00 area.
 */
function mailchimp_user_list_retrieve_campaign_template_content($cid) {
  $q = mailchimp_get_api_object();
  $results = $q->campaignTemplateContent($cid);
  return $results['std_content00'];
}

/**
 * Retrieve list title.
 *
 * @return string
 *   title of list.
 */
function mailchimp_user_list_list_title($lid) {
  $results = mailchimp_user_list_retrieve_all_lists(array(
    'list_id' => $lid,
  ));
  return $results['data'][0]['name'];
}


/**
 * Retrieve campaign title.
 *
 * @return string
 *   title of list.
 */
function mailchimp_user_list_campaign_title($cid) {
  if ($cid) {
    global $user;
    $q = mailchimp_get_api_object();
    $filters['campaign_id'] = $cid;
    $results = $q->campaigns($filters);
    if ($q->errorCode) {
      drupal_set_message(t('There was a problem retrieving information on your campaign.'));
      watchdog('mailchimp', 'Could not retrieve campaign title for user @user on campaign ID number @campaign_id error @error', array(
        '@user' => $user->name,
        '@campaign_id' => $cid,
        '@error' => $q->errorMessage,
      ), WATCHDOG_ERROR);
    }
    else {
      return $results['data'][0]['title'];
    }
  }
  else {
    return 'New Campaign';
  }
}


/**
 * Query Users lists.
 *
 * @param int $id
 *   optional user id
 *
 * @return array
 *   An array of user ids and their lists.
 */
function mailchimp_user_list_query($id = NULL) {
  if (!$id) {
    $results = db_query('SELECT * FROM {mailchimp_user_list}');
  }
  else {
    $results = db_query('SELECT * FROM {mailchimp_user_list} WHERE uid = :uid', array(
      ':uid' => $id,
    ));
  }
  return $results;
}

/**
 * Retrieve all mailing lists.
 *
 * @param string $lists
 *   optional pipe delimited lists of mailchimp lists
 *
 * @return array
 *   An array of user lists.
 */
function mailchimp_user_list_retrieve_all_lists($lists = NULL) {
  $q = mailchimp_get_api_object();
  $result = $q->lists($lists);
  if ($q->errorCode && $q->errorCode != 200) {
    global $user;
    if ($lists) {
      $message = 'list id(s) ' . $lists;
    }
    else {
      $message = 'all lists';
    }
    drupal_set_message(t('There was a problem retrieving information from mailchimp, please contact system administrator.'));
    watchdog('mailchimp', 'Could not retrieve mailchimp @lists for user @user error: @error', array(
      '@lists' => $message,
      '@user' => $user->name,
      '@error' => $q->errorMessage,
    ), WATCHDOG_ERROR);
  }
  else {
    return $result;
  }
}

/**
 * Retrieve lists for current user.
 *
 * @return array
 *   An array of lists availale to the user.
 */
function mailchimp_user_list_retrieve_users_lists() {
  global $user;
  $results = mailchimp_user_list_query($user->uid);
  foreach ($results as $record) {
    $user_lists_ids = $record->list_ids;
    $user_template_ids = $record->template_ids;
  }
  $user_lists_ids = str_replace('|', ', ', $user_lists_ids);
  $user_lists_ids = mailchimp_user_list_verify_lists(array(
    'list_id' => $user_lists_ids,
  ), $user->uid, $user_template_ids);
  if ($user_lists_ids) {
    $user_lists_details = mailchimp_user_list_retrieve_all_lists($user_lists_ids);
    return $user_lists_details;
  }
  return NULL;
}

/**
 * Retrieve groups for current list.
 *
 * @return array
 *   An array of groups availale to the list.
 */
function mailchimp_user_list_retrieve_list_groups($listid) {
  $q = mailchimp_get_api_object();
  $groups = $q->listInterestGroupings($listid);
  $return = array();
  if ($groups != '') {
    foreach ($groups as $interestgroup) {
      foreach ($interestgroup['groups'] as $group) {
        $return[$interestgroup['id'] . '|' . $group['bit']] = $interestgroup['name'] . ' - ' . $group['name'];
      }
    }
    return $return;
  }
  else {
    return FALSE;
  }
}

/**
 * Retrieve groups that were chosen already.
 *
 * @return array
 *   An array of groups that were chosen for this list.
 */
function mailchimp_user_list_retrieve_list_group_names($segment_opts) {
  $return = array();
  foreach ($segment_opts['conditions'] as $condition) {
    $title = explode('-', $condition['field']);
    if ($title[0] == 'interests') {
      foreach ($condition['value'] as $value) {
        $return[] = $title[1] . '|' . $value;
      }
    }
  }
  return $return;
}

/**
 * Retrieve list merge vars.
 *
 * @return array
 *   An array of merge vars.
 */
function mailchimp_user_list_listemergevars($id) {
  $q = mailchimp_get_api_object();
  $mergevars = $q->listMergeVars($id);

  $return = '';
  foreach ($mergevars as $mergevar) {
    $return .= '<br/><strong>' . $mergevar['name'] . '</strong> <em>*|' . $mergevar['tag'] . '|*</em>';
  }
  return $return;
}

/**
 * Retrieve lists for users templates for select box.
 *
 * @return array
 *   An array of templates.
 */
function mailchimp_user_list_retrieve_users_templates() {
  global $user;
  $results = mailchimp_user_list_query($user->uid);
  foreach ($results as $record) {
    $user_templates = $record->template_ids;
  }
  $user_templates = explode('|', $user_templates);
  $all_lists = mailchimp_user_list_retrieve_all_templates();
  $return = array();
  foreach ($all_lists['user'] as $list_id) {
    if (in_array($list_id['id'], $user_templates)) {
      $return[$list_id['id']] = $list_id['name'];
    }
  }
  return $return;
}

/**
 * Verify lists.
 *
 * If a user has attempted to view a list that has been deleted
 * then the API call returns nothing, even if the user's other
 * lists are valid.  This function will verify the user's list is
 * active and if not will uodate the user's record.
 *
 * @param string $lists
 *   comma delimited list of mailchimp lists
 * @param int $uid
 *   user id
 *
 * @return array
 *   An array of valid lists available to the user.
 */
function mailchimp_user_list_verify_lists($lists, $uid, $user_template_ids) {
  $active_lists_m = mailchimp_user_list_retrieve_all_lists();
  $user_lists = explode(', ', $lists['list_id']);
  $active_lists = array();
  foreach ($active_lists_m['data'] as $list) {
    $active_lists[] = $list['id'];
  }
  $diff = array_diff($user_lists, $active_lists);
  foreach ($diff as $key => $value) {
    unset($user_lists[$key]);
  }
  if (count($user_lists) == 0) {
    mailchimp_user_list_save_user_to_db($uid);
    return FALSE;
  }
  else {
    $user_lists = implode('|', $user_lists);
    $lists['list_id'] = str_replace('|', ',', $user_lists);
    mailchimp_user_list_save_user_to_db($uid, $user_lists, $user_template_ids);
    return $lists;
  }
}

/**
 * Determine if a user can view a list for menu access.
 *
 * @return bool
 *   True or False
 */
function mailchimp_user_list_menu_access() {
  global $user;
  if ($user->uid != 0) {
    $results = mailchimp_user_list_query($user->uid);
    foreach ($results as $record) {
      if ($record->list_ids) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Determine if a user can create new campaigns.
 *
 * Needs template assigned to create new campaign.
 *
 * @return bool
 *   True or False
 */
function mailchimp_user_list_new_campaign_access() {
  global $user;
  if ($user->uid != 0) {
    $results = mailchimp_user_list_query($user->uid);
    foreach ($results as $record) {
      if ($record->template_ids) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Determine is user can view list determined by url.
 *
 * @return bool
 *   True of False
 */
function mailchimp_user_list_access($lid, $cid = FALSE) {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  $results = mailchimp_user_list_query($user->uid);
  $user_lists = array();
  foreach ($results as $record) {
    $user_lists = explode('|', $record->list_ids);
  }
  if (!in_array($lid, $user_lists)) {
    return FALSE;
  }
  if (!$cid) {
    return TRUE;
  }
  else {
    // Check for campaign access.
    $q = mailchimp_get_api_object();
    $filters['list_id'] = $lid;
    $filters['campaign_id'] = $cid;
    $results = $q->campaigns($filters);
    if ($results['data'][0]['id'] != $cid) {
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
}

/**
 * Wrapper to send people back to their mailing list page.
 */
function mailchimp_user_list_return_to_list($lid) {
  drupal_goto('admin/mailchimp/user_lists/' . $lid . '/campaigns');
}

/**
 * Wrapper for Test Send from edit form.
 */
function mailchimp_user_list_test_send_wrapper($form, &$form_state) {
  $cid = $form_state['values']['mailchimp_cid'];
  $lid = $form_state['values']['mailchimp_list'];
  drupal_goto('admin/mailchimp/user_lists/test_send_campaign/' . $lid . '/' . $cid);
}

/**
 * Return campaign details.
 *
 * @param string $cid
 *   campaign id
 *
 * @return array
 *   campaign details.
 */
function mailchimp_user_list_retrieve_campaigns($cid) {
  global $user;
  $q = mailchimp_get_api_object();
  $filters['campaign_id'] = $cid;
  $results = $q->campaigns($filters);
  $content = $q->campaignContent($cid);
  if ($q->errorCode) {
    drupal_set_message(t('There was a problem retrieving information on your campaign.'));
    watchdog('mailchimp', 'Could not retrieve campaign content for user @user on campaign ID number @campaign_id error @error', array(
      '@user' => $user->name,
      '@campaign_id' => $cid,
      '@error' => $q->errorMessage,
    ), WATCHDOG_ERROR);
  }
  else {
    $results['content'] = $content;
    return $results;
  }
}
