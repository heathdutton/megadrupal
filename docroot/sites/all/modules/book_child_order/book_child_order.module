<?php

/**
 * @file book_child_order.module
 * Provides a tab on book nodes to order the child nodes.
 */

/**
 * Implements hook_menu().
 */
function book_child_order_menu() {
  $items['node/%node/child-ordering'] = array(
    'title' => 'Child order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('book_child_order_form', 1),
    'access callback' => '_book_child_order_access',
    'access arguments' => array(1),
    'file' => 'book_child_order.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Page access callback for the child page ordering node tab.
 */
function _book_child_order_access($node) {
  global $user;

  // No access if the node is not part of a book.
  // We have to use empty() rather than isset() because book_outline_form()
  // pollutes nodes that are not in a book.
  $is_book_node = !empty($node->book['bid']);
  if (!$is_book_node) {
    return FALSE;
  }

  // User may access the tab if they have both the permission and access to
  // edit the node.
  return user_access('access order child nodes tab') && node_access('update', $node);
}

/**
 * Implements hook_permission().
 */
function book_child_order_permission() {
  return array(
    'access order child nodes tab' =>  array(
      'title' => t('Access tab on book nodes to order child nodes'),
      'description' => t('Access to the ordering tab also requires edit access to the book node.'),
    ),
  );
}
