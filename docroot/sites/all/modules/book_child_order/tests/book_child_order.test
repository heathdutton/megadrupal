<?php

/**
 * @file
 * Contains tests for the Book child order module.
 */

/**
 * Test case for book child order module.
 */
class BookChildOrderTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Book Child Order tests'),
      'description' => t('Test the UI for ordering child nodes.'),
      'group' => t('Book Child Order'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('book_child_order'));

    $this->book_author = $this->drupalCreateUser(array(
      'create new books',
      'create book content',
      'edit own book content',
      'add content to books',
    ));
  }

  /**
   * Creates a new book with a page hierarchy.
   */
  function createBook() {
    // Create new book.
    $this->drupalLogin($this->book_author);

    $this->book = $this->createBookNode('new');
    $book = $this->book;

    /*
     * Add page hierarchy to book.
     * Book
     *  |- Node 0
     *   |- Node 1
     *   |- Node 2
     *  |- Node 3
     *  |- Node 4
     */
    $nodes = array();
    $nodes[] = $this->createBookNode($book->nid); // Node 0.
    $nodes[] = $this->createBookNode($book->nid, $nodes[0]->book['mlid']); // Node 1.
    $nodes[] = $this->createBookNode($book->nid, $nodes[0]->book['mlid']); // Node 2.
    $nodes[] = $this->createBookNode($book->nid); // Node 3.
    $nodes[] = $this->createBookNode($book->nid); // Node 4.

    $this->drupalLogout();

    return $nodes;
  }

  /**
   * Creates a book node.
   *
   * @param $book_nid
   *   A book node ID or set to 'new' to create a new book.
   * @param $parent
   *   (optional) Parent book reference ID. Defaults to NULL.
   */
  function createBookNode($book_nid, $parent = NULL) {
    // $number does not use drupal_static as it should not be reset
    // since it uniquely identifies each call to createBookNode().
    static $number = 0; // Used to ensure that when sorted nodes stay in same order.

    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $number . ' - SimpleTest test node ' . $this->randomName(10);
    $edit["body[$langcode][0][value]"] = 'SimpleTest test body ' . $this->randomName(32) . ' ' . $this->randomName(32);
    $edit['book[bid]'] = $book_nid;

    if ($parent !== NULL) {
      $this->drupalPost('node/add/book', $edit, t('Change book (update list of parents)'));

      $edit['book[plid]'] = $parent;
      $this->drupalPost(NULL, $edit, t('Save'));
    }
    else {
      $this->drupalPost('node/add/book', $edit, t('Save'));
    }

    // Check to make sure the book node was created.
    $node = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertNotNull(($node === FALSE ? NULL : $node), 'Book node found in database.');
    $number++;

    return $node;
  }

  /**
   * Test the module's functionality.
   */
  function testOrderTabAccess() {
    $nodes = $this->createBook();

    $this->non_editor_user = $this->drupalCreateUser(array(
      'access content',
    ));
    $this->drupalLogin($this->non_editor_user);

    // Check the user can't see the tab.

    $this->drupalGet('node/' . $nodes[0]->nid);
    $this->assertNoText(t('Child order'), "The ordering tab is not shown.");

    $this->drupalGet('node/' . $nodes[0]->nid . '/child-ordering');
    $this->assertText(t('Access denied'), "Access is denied to the ordering tab.");

    // Create and log in our approver user.
    $this->editor_user = $this->drupalCreateUser(array(
      'access content',
      'edit any book content',
    ));
    $this->drupalLogin($this->editor_user);

    $this->drupalGet('node/' . $nodes[0]->nid);
    $this->assertNoText(t('Child order'), "The ordering tab is not shown.");

    $this->drupalGet('node/' . $nodes[0]->nid . '/child-ordering');
    $this->assertText(t('Access denied'), "Access is denied to the ordering tab.");

    $this->orderer_user = $this->drupalCreateUser(array(
      'access content',
      'edit any book content',
      'access order child nodes tab',
    ));
    $this->drupalLogin($this->orderer_user);

    $this->drupalGet('node/' . $nodes[0]->nid);
    $this->assertText(t('Child order'), "The ordering tab is shown.");

    $this->drupalGet('node/' . $nodes[0]->nid . '/child-ordering');
    $this->assertNoText(t('Access denied'), "Access is granted to the ordering tab.");

    $this->assertText($nodes[0]->title, "The ordering tab shows the node title.");
    // Check child node titles.
    $this->assertText($nodes[1]->title, "The ordering tab shows the title of a child node.");
    $this->assertText($nodes[2]->title, "The ordering tab shows the title of a child node.");
  }

}
