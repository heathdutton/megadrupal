<?php

/**
 * @file
 * Primarily Drupal hooks to manipulate Simple word link.
 *
 * This is the main module file for Simple word link.
 */

/**
 * Implements hook_help().
 */
function simple_word_link_help($path, $arg) {
  switch ($path) {
    case 'admin/help#simple_word_link':
      $output = file_get_contents(drupal_get_path('module', 'simple_word_link') . '/README.txt');
      return nl2br($output);
  }

  return NULL;
}

/**
 * Implements hook_permission().
 */
function simple_word_link_permission() {
  $permissions['administer words'] = array(
    'title' => t('Administer words list'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function simple_word_link_menu() {
  $items['admin/config/search/words'] = array(
    'title' => 'Words list',
    'description' => 'Search of words in the text and adding links.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_word_link_list_form'),
    'access arguments' => array('administer words'),
  );

  $items['admin/config/search/words/add'] = array(
    'title' => 'Add word',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_word_link_edit_form'),
    'access callback' => 'simple_word_link_access',
    'access arguments' => array('create', 'redirect'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/search/words/edit/%simple_word_link_id'] = array(
    'title' => 'Edit word',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_word_link_edit_form', 5),
    'access callback' => 'simple_word_link_access',
    'access arguments' => array('update', 5),
  );

  $items['admin/config/search/words/delete/%simple_word_link_id'] = array(
    'title' => 'Delete word',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_word_link_delete_form', 5),
    'access callback' => 'simple_word_link_access',
    'access arguments' => array('delete', 5),
  );

  return $items;
}

/**
 * Return a set of words by identifier.
 */
function simple_word_link_id_load($id) {
  $set = simple_word_link_set_load($id);
  return !empty($set['id']) ? $set : FALSE;
}

/**
 * Determine whether the current user may perform the given operation.
 *
 * @param $op
 *   The operation to be performed. Possible values are:
 *   - "create"
 *   - "update"
 *   - "delete"
 * @param $id
 *   The set object on which the operation is to be performed.
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function simple_word_link_access($op, $set, $account = NULL) {
  global $user;

  $rights = & drupal_static(__FUNCTION__, array());

  if (!$set || !in_array($op, array('create', 'update', 'delete'), TRUE)) {
    // If there was no redirect to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $user;
  }

  $id = isset($set['id']) ? $set['id'] : $set;

  // Return cached value if access already checked for this redirect, user and op.
  if (isset($rights[$account->uid][$id][$op])) {
    return $rights[$account->uid][$id][$op];
  }

  // Administrators can access all redirects.
  if (user_access('administer words', $account)) {
    $rights[$account->uid][$id][$op] = TRUE;
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_filter_info().
 */
function simple_word_link_filter_info() {
  $filters = array();

  $filters['simple_word_link_filter'] = array(
    'title' => t('Convert words into links'),
    'process callback' => 'simple_word_link_filter_process',
  );

  return $filters;
}

/**
 * Implements callback_filter_process().
 */
function simple_word_link_filter_process($text) {
  $sets = simple_word_link_sets_load();

  foreach ($sets as $set) {
    if ($set['status']) {
      $set['words'] = array_map('trim', $set['words']);
      $text = preg_replace('/(^|["\'\s.,;!?«»])(' . implode('|', $set['words']) . ')(["\'\s.,;!?]|$)/iu', '$1' . l('$2', $set['url']) . '$3', $text);
    }
  }

  return $text;
}

/**
 * Implements hook_theme().
 */
function simple_word_link_theme() {
  return array(
    'simple_word_link_form_table' => array(
      // The renderable element is the form.
      'render element' => 'form',
    ),
  );
}

/**
 * Form builder to view list words.
 */
function simple_word_link_list_form($form = NULL, &$form_state = NULL) {
  $form = array();

  $form['table'] = array(
    // Theme this part of the form as a table.
    '#theme' => 'simple_word_link_form_table',
    '#header' => array(t('Enabled'), t('Words'), t('URL'), t('Actions')),
    'rows' => array(),
    '#empty' => t('No words available.'),
  );

  // Load all a sets
  $sets = simple_word_link_sets_load();

  // View result
  if (!empty($sets)) {
    foreach ($sets as $set) {
      $form['table']['rows'][$set['id']]['status_' . $set['id']] = array(
        '#type' => 'checkbox',
        '#default_value' => check_plain($set['status']),
      );

      foreach ($set['words'] as $word) {
        $form['table']['rows'][$set['id']]['words'][] = array(
          '#markup' => check_plain($word),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
        );
      }

      $form['table']['rows'][$set['id']]['url'] = array(
        '#markup' => l($set['url'], $set['url'], array('attributes' => array('class' => 'url'))),
      );

      $form['table']['rows'][$set['id']]['actions'][] = array(
        '#markup' => l(t('Edit'), 'admin/config/search/words/edit/' . $set['id'], array('attributes' => array('class' => array('edit-link')))),
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      );

      $form['table']['rows'][$set['id']]['actions'][] = array(
        '#markup' => l(t('Delete'), 'admin/config/search/words/delete/' . $set['id'], array('attributes' => array('class' => array('delete-link')))),
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      );
    }

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save settings'),
    );
  }

  return $form;
}

/**
 * Handler submit form for simple_word_link_list_form().
 */
function simple_word_link_list_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);

  foreach ($form_state['values'] as $key => $value) {
    preg_match('|\d+|', $key, $matches);

    if (isset($matches[0])) {
      $set = array(
        'id' => $matches[0],
        'status' => $value,
      );

      drupal_write_record('simple_word_link', $set, array('id'));
    }
  }

  // Reset caches.
  simple_word_link_cache_clear();
  drupal_set_message(t('The settings has been saved.'));
}

/**
 * Theme callback for the form table.
 */
function theme_simple_word_link_form_table(&$variables) {
  // Get the useful values.
  $form = $variables['form'];
  $rows = $form['rows'];
  $header = $form['#header'];
  $empty = $form['#empty'];

  // Setup the structure to be rendered and returned.
  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    'rows' => array(),
    '#empty' => $empty,
  );

  // Traverse each row.
  foreach (element_children($rows) as $row_index) {
    $row = array();
    // Traverse each column in the row.
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element.
      $row[] = drupal_render($rows[$row_index][$col_index]);
    }
    // Add the row to the table.
    $content['#rows'][] = $row;
  }

  // Render the table and return.
  return drupal_render($content);
}

/**
 * Load all a set of words from database.
 */
function simple_word_link_sets_load() {
  $query = db_select('simple_word_link', 'kw');
  $query->fields('kw', array('id', 'words', 'url', 'status'));
  $result = $query->execute();

  $sets = array();

  // Filling a set of values
  if (!empty($result)) {
    while ($item = $result->fetchAssoc()) {
      $sets[] = array(
        'id' => $item['id'],
        'words' => unserialize($item['words']),
        'url' => $item['url'],
        'status' => $item['status'],
      );
    }
  }

  return $sets;
}

/**
 * Load a set of words by identifier from database.
 */
function simple_word_link_set_load($id = NULL) {
  $query = db_select('simple_word_link', 'kw');
  $query->fields('kw', array('id', 'words', 'url', 'status'));
  $query->condition('kw.id', $id, '=');
  $result = $query->execute();

  // Structure for a set
  $set = array(
    'id' => NULL,
    'url' => NULL,
    'status' => NULL,
    'words' => array(),
  );

  // Filling a set of values
  if (!empty($result)) {
    while ($item = $result->fetchAssoc()) {
      $set = array(
        'id' => $item['id'],
        'words' => unserialize($item['words']),
        'url' => $item['url'],
        'status' => $item['status'],
      );
    }
  }

  return $set;
}

/**
 * Form builder to add or edit a word.
 */
function simple_word_link_edit_form($form = NULL, &$form_state = NULL, $set = NULL) {
  $form = array();

  // Number of words
  if (!isset($form_state['storage']['number'])) {
    $form_state['storage']['number'] = !empty($set['words']) ? count($set['words']) - 1 : 0;
  }

  $form['id'] = array(
    '#type' => 'value',
    '#value' => isset($set['id']) ? $set['id'] : NULL,
  );

  $form['url'] = array(
    '#title' => t('Url'),
    '#type' => 'textfield',
    '#description' => t('Enter an internal Drupal path, path alias, or complete external URL (like http://example.com/) to redirect to. Use %front to redirect to the front page.', array('%front' => '<front>')),
    '#required' => TRUE,
    '#default_value' => isset($set['url']) ? $set['url'] : '',
  );

  $form['fieldset'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#description' => t('Enter the words that will be converted into links.'),
  );

  $form['fieldset']['items'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="words">',
    '#suffix' => '</div>',
  );

  for ($i = 0; $i <= $form_state['storage']['number']; $i++) {
    $form['fieldset']['items'][$i]['name'] = array(
      '#title' => t('Word'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => isset($set['words'][$i]) ? $set['words'][$i] : '',
    );
  }

  $form['fieldset']['items']['add_item'] = array(
    '#type' => 'submit',
    '#value' => t('Add a item'),
    '#submit' => array('simple_word_link_edit_form_add_item'),
    '#limit_validation_errors' => array(array('fieldset', 'items')),
    '#ajax' => array(
      'callback' => 'simple_word_link_edit_form_callback',
      'wrapper' => 'words',
    ),
  );

  if ($form_state['storage']['number'] > 0) {
    $form['fieldset']['items']['remove_item'] = array(
      '#type' => 'submit',
      '#value' => t('Remove a item'),
      '#submit' => array('simple_word_link_edit_form_remove_item'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'simple_word_link_edit_form_callback',
        'wrapper' => 'words',
      ),
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => isset($_GET['destination']) ? $_GET['destination'] : 'admin/config/search/words',
  );

  return $form;
}

/**
 * Callback for both ajax-enabled buttons.
 */
function simple_word_link_edit_form_callback($form, &$form_state) {
  return $form['fieldset']['items'];
}

/**
 * Submit handler for the "add_item" button.
 */
function simple_word_link_edit_form_add_item($form, &$form_state) {
  $form_state['storage']['number']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove_item" button.
 */
function simple_word_link_edit_form_remove_item($form, &$form_state) {
  $form_state['storage']['number']--;
  $form_state['rebuild'] = TRUE;
}

/**
 * Handler validate form for simple_word_link_edit_form().
 */
function simple_word_link_edit_form_validate($form, &$form_state) {
  form_state_values_clean($form_state);
  $url = $form_state['values']['url'];

  // Check that the source path contains no URL fragment.
  if (strpos($url, '#') !== FALSE) {
    form_error($form['url'], t('The source path cannot contain an URL fragment anchor.'));
  }

  // Check that the source path is a valid.
  if (!drupal_valid_path($url)) {
    form_error($form['url'], t('The source path is not a valid.'));
  }

  // Load all a existing words.
  $query = db_select('simple_word_link', 'kw');
  $query->fields('kw', array('words'));
  if (!empty($form_state['values']['id'])) {
    $query->condition('id', $form_state['values']['id'], '!=');
  }
  $result = $query->execute()->fetchAll();

  $exists_words = array();

  // Preparation of existing words.
  if (!empty($result)) {
    foreach ($result as $item => $value) {
      $exists_words = array_merge(unserialize($value->words), $exists_words);
    }
  }

  // Check that the source word not is exists.
  foreach ($form_state['values']['fieldset']['items'] as $key => $value) {
    $word = trim($value['name']);

    if (in_array($word, $exists_words)) {
      form_error($form['fieldset']['items'][$key], t('The word already is exists.'));
    }
  }


}

/**
 * Handler submit form for simple_word_link_edit_form().
 */
function simple_word_link_edit_form_submit($form, &$form_state) {
  simple_word_link_save($form_state['values']);
  drupal_set_message(t('The words has been saved.'));
  $form_state['redirect'] = 'admin/config/search/words';
}

/**
 * Save a words.
 */
function simple_word_link_save($values) {
  $word = array();

  foreach ($values['fieldset']['items'] as $value) {
    if (in_array($value['name'], $word)) {
      drupal_set_message(t('The duplicate words were been deleted.'), 'warning');
      continue;
    }

    $word[] = $value['name'];
  };

  $set = array(
    'id' => $values['id'],
    'url' => $values['url'],
    'words' => $word,
  );

  // Save the words to the database.
  // Add new a set
  if (empty($set['id'])) {
    drupal_write_record('simple_word_link', $set);
  }
  // Edit a set
  else {
    drupal_write_record('simple_word_link', $set, array('id'));
  }

  // Reset caches.
  simple_word_link_cache_clear();
}

/**
 * Form builder to delete a word.
 */
function simple_word_link_delete_form($form = NULL, &$form_state = NULL, $set = NULL) {
  $form = array();

  $form['id'] = array(
    '#type' => 'value',
    '#value' => isset($set['id']) ? $set['id'] : NULL,
  );

  return confirm_form($form, t('Are you sure you want to delete the Words link to %redirect?', array('%redirect' => $set['url'])), 'admin/config/search/redirect');
}

/**
 * Handler submit form for simple_word_link_delete_form().
 */
function simple_word_link_delete_form_submit($form, &$form_state) {
  db_delete('simple_word_link')
    ->condition('id', $form_state['values']['id'], '=')
    ->execute();

  // Reset caches.
  simple_word_link_cache_clear();
  drupal_set_message(t('The Words has been deleted.'));
  $form_state['redirect'] = 'admin/config/search/words';
}

/**
 * Reset the caches for apply changes.
 */
function simple_word_link_cache_clear() {
  cache_clear_all('*', 'cache_field', TRUE);
  cache_clear_all();
}
