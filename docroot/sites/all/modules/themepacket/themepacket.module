<?php
// $Id: themepacket.module,v 1.1.4.1 2011/01/06 05:42:38 heliorcolorado Exp $

/**
 * @file
 * Automatically discovers theme functions and templates found within
 * the 'theme' folder of your modules/themes and automatically
 * generates the array of theme hooks returned in your hook_theme().
 *
 * Also registers any assets found within the same directory as your
 * theme implementation. And includes them when the theme is in the
 * context of being rendered.
 */


/**
 * Implementation of hook_menu().
 */
function themepacket_menu() {
  $items['admin/config/themepacket'] = array(
    'title' => 'Theme Packet',
    'description' => 'Configure how themepackets will behave.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('themepacket_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'themepacket.admin.inc',
  );
  
  return $items;
}


/**
 * Implementation of hook_theme_registry_alter().
 */
function themepacket_theme_registry_alter(&$theme_registry) {   
   /*** General Discovered Themes ***/
   foreach ($theme_registry as $key => $info) {
     if (isset($info['include assets'])) {
       array_unshift($theme_registry[$key]['preprocess functions'], '_themepacket_preprocess');
       $assets[$key] = _themepacket_build_assets($info, array('type' => 'discovered'));
     }
   }
   
   //Save registry
   global $theme;
   cache_set('asset_registry:'. $theme, $assets);
}


/**
 * Auto discover theme implementations.
 * 
 * @see hook_theme().
 *  
 * @param $existing
 *  An array of existing implementations
 * 
 * @param $type
 *  What "type" is being processed.
 * 
 * @param $theme
 *  The actual name of theme that is being being checked.
 * 
 * @param $path
 *  The directory path of the theme or module, so that it doesn't need to be looked up.
 * 
 * @return
 *  an array of theme implementations
 * 
 *  @see hook_theme().
 */
function themepacket_discover($existing, $type, $theme, $path) {
  // Get theme path
  $theme_dir = ($theme == 'themepacket') ? 'theme' : variable_get('themepacket_theme_dir', 'theme');
  $hooks = array();
  
  // Scan for templates and include files.
  $theme_dir_ignore = explode(', ', variable_get('themepacket_theme_dir_ignore', 'views'));
  $ignore = $theme_dir_ignore += array('.', '..', 'CVS');
  $files = _themepacket_discover_theme($path . '/' . $theme_dir, $ignore);
  foreach ($files as $file => $info) {
    // Check if theme is overridding existing theme functions/templates so we can provide all the necessary overrides.
    if ($type == 'theme' && isset($existing[$file])) {
      $existing[$file]['include assets'] = TRUE;  // Enable includding assets
      $existing[$file]['override preprocess functions'] = TRUE; // Prevent duplicate preprocessors
      if (!isset($existing[$file]['template'])) {
        unset($existing[$file]['include files']); // Preventing inclusion of old include files
      }
      
      $hooks[$file] = array_merge($existing[$file], $info);  // Merge basic info (path and file)
      continue;
    }

    $key = $theme .'_' . $file;
    
    $hooks[$key]['include assets'] = TRUE;  // Enable includding assets
    $hooks[$key] += $info;  // Add basic info to hook.  
  }
  return $hooks;
}


/**
 * Recursive function to scan for templates and include files. This
 * function also builds basic info for hook_theme
 * 
 * @todo write D7 version of this using file_stream_wrappers
 * 
 * @param $dir
 *  The directory to begin scanning.
 * 
 * @param $skip
 *  File names to not include in the recursive search.
 */
function _themepacket_discover_theme($dir, $skip = array('.', '..', 'CVS')) {
  $hooks = array();

  if (is_dir($dir) && $handle = opendir($dir)) {
    while (FALSE !== ($file = readdir($handle))) {
      if (!in_array($file, $skip) && $file[0] != '.') {
        if (is_dir("$dir/$file")) {
          $hooks = array_merge(_themepacket_discover_theme("$dir/$file", $skip), $hooks);
        }
        elseif (preg_match('/^([a-zA-z0-9\-.])+(.inc|.tpl.php)$/', $file)) {
          
          // Get just the file name
          $filename = basename($file);
          
          // Determine type (file or template)
          $type = (preg_match('/(.tpl.php)$/', $filename)) ? 'template' : 'file';

          // Strip extension and transform name to a safe hook name.
          $hook = str_replace('-', '_', str_replace(array('.tpl.php', '.inc'), '', $filename));
          
          // Determine if there is a render element stashed in the filename
          $prefix_position = strpos($hook, '.');
          if ($prefix_position !== FALSE) {
            $render_element = substr($hook, 0, $prefix_position);
            
            // Adjust offset of $prefix_position
            $prefix_position++;
          }
          
          // Remove prefix 
          $hook = substr($hook, $prefix_position);
          
          
          // Basic hook info
          $hooks[$hook]['path'] = $dir;
          $hooks[$hook][$type] = ($type == 'file') ? $filename : str_replace('.tpl.php', '', $filename);
          if (isset($render_element)) {
            $hooks[$hook]['render element'] = $render_element;
          }
          else {
            $hooks[$hook]['variables'] = array();
          }
        }
      }
    }
    closedir($handle);
  }
  return $hooks;
}


/**
 * Custom preprocessor used by both templates and theme functions.
 */
function _themepacket_preprocess(&$vars, $hook) {
  global $theme;
  $assets = assets_get_registry();
  if (!empty($assets->data) && isset($assets->data[$hook])) {
    
    $item = $assets->data[$hook];
    if (!empty($item['js'])) {
      foreach ($item['js'] as $js) {
        $options = array();
        if (isset($js->alias)) { $options['weight'] = -1; }
        drupal_add_js($js->uri, $options);
      }
    }
    
    if (!empty($item['css'])) {
      foreach ($item['css'] as $css) {
        drupal_add_css($css->uri);
      }
    }
    
  }
}


/**
 * Scan a directory to discover css and javascript files.
 * 
 * @param $path
 *   The path that will be scanned.
 * 
 * @return
 *   An array of assets found.
 */
function themepacket_discover_assets($path = '') {
  if (!empty($path)) {
    $assets = array('js' => array(), 'css' => array());
    $files = file_scan_directory($path, '/[0-9A-Za-z.\-_]+(.js|.css)$/');
    foreach ($files as $file) {
      //seperate js and css files
      $extensions = array('js', 'css');
      foreach ($extensions as $ext) {
        if (preg_match('/.' . $ext . '$/', $file->uri)) {
          
          /**
           * Symbolic links are added to the beginning of
           * the array since they are usually dependencies.
           * @fixme multiple symlink files are added to the array in
           * the reverse order that the filesystem stores its files.
           */
          if (_themepacket_symlink_info($file)) {
            array_unshift($assets[$ext], $file);
          }
          elseif ($file) {
            $assets[$ext][] = $file;
          }
        }
      }
    }
   return $assets; 
  }
}


/**
 * Builds a single asset registry component.
 * 
 * @param $info
 *   An array of information from a theme hook.
 * 
 * @param $options
 *   An array of extra parameters
 *   - "type": The type of asset registry component.
 * 
 * @return An array representation of fully built asset registry component.
 */
function _themepacket_build_assets($info, $options = array()) {
  $assets = array();
  
  // Build basic info
  $assets['base path'] = $info['path'];
  $assets['type'] = (isset($options['type'])) ? $options['type'] : 'discovered';
  
  // Build asset files
  $files = themepacket_discover_assets($info['path']);
  $assets['js'] = $files['js'];
  $assets['css'] = $files['css'];
  
  return $assets;
}


/**
 * Determines if file is a symbolic link. If symbolic link, the file
 * object is modified to contain reference to the original file and
 * also track the location of the alias.
 * 
 * @see file_scan_directory().
 * 
 * @param $file
 *   A file object.
 * 
 * @return
 *   Returns false if file is not a symbolic link. returns true
 *   if symbolic link target exists, otherwise the file object is
 *   destroyed.
 */
function _themepacket_symlink_info(&$file = NULL) {
  if ($file) {
    if (isset($file->uri) && !is_link($file->uri)) {
      return;
    }

    // Parse out original filename from symlink content and send it to asset registry.
    $orig = variable_get('themepacket_library_path', 'sites/all/libraries') .'/'. end(explode('/', readlink($file->uri)));
    
    if (file_exists($orig)) {
      $file->alias = $file->uri;
      $file->uri = $orig;
      return TRUE;
    }
    else {
      // Original file does not exist, prevent it from trying to add itself to the asset registry.
      drupal_set_message(t('Alias @alias references the file @orig which does not exist.', array('@alias' => $file->filename, '@orig' => $orig)), 'warning');
      $file = NULL;
    }
  }
}


/**
 * Retrive the assets registry and store it in static variable.
 */
function assets_get_registry($theme = NULL) {
  if (empty($theme)) {
    global $theme;
  }
  
  static $assets;
  $assets = NULL;
  if (!isset($assets)) {
    $assets = cache_get('asset_registry:'. $theme);
  }
  return $assets;
}
