<?php
/**
 * @file
 * SWTOR - Star Wars The Old Republic - Server Status Advanced block module.
 */

define('SWTOR_SERVER_STATUS_INFO', 'SWTOR - Star Wars The Old Republic - Server Status');
define('SWTOR_COM', 'http://www.swtor.com/');

 /**
  * Implements hook_block_info().
  * 
  * Info standard hook.
  */
function swtor_server_status_block_info() {

  $blocks = array();

  $blocks['swtor_server_status'] = array(
    'info' => SWTOR_SERVER_STATUS_INFO,
  );

  return $blocks;
}

 /**
  * Returns the actual server status data.
  *
  * @param string $mode 
  *   Mode: one or all servers.
  */
function swtor_server_status_getdata($mode = '') {

  // Try getting data from cache.
  if ($cached = cache_get('swtor_server_status_data', 'cache')) {

    $swtor_server_status = $cached->data;

    // Control the caching time, if expired unset the value to force a
    // refresh of data.
    if (time() > $swtor_server_status['ts_cached'] + 60 * intval(variable_get('swtor_server_status_data_cache_time', '1'))) {
      unset($swtor_server_status);
    }
  }

  // Get data from swtor.com.
  if (empty($swtor_server_status)) {

    // Parsing the site and getting the data.
    $local = variable_get('swtor_server_status_local', '');
    $swtor_status = SWTOR_COM . $local . (($local != '') ? '/' : '') . 'server-status';
    $_data = drupal_http_request($swtor_status);
    $data = str_replace(array("\n"), array(""), $_data->data);
    preg_match('/serverListUS(.*)<div class="spacer/i', $data, $matches);
    $result = '<swtor><div id="serverListUS' . $matches[1] . '</swtor>';
    $result = str_replace(
      array('&ouml;', '&Ouml;', '&auml;', '&Auml;', '&uuml;', '&Uuml;', "</h3>"),
      array('&#246;', '&#214;', '&#228;', '&#196;', '&#252;', '&#220;', "</h2>"),
      $result
    );

    $swtor_xml = new SimpleXMLElement($result);

    $swtor_server_status = array();

    foreach ($swtor_xml->div as $serverlist) {
      foreach ($serverlist as $server) {
        if ((string) substr($server['class'], 0, 10) == 'serverBody' &&
           (string) substr($server['class'], 11) != 'serverMenu') {

          foreach ($server->div as $property) {
            if ((string) substr($property['class'], 0, 10) == 'population') {
              $population_readable = (string) $property;
            }
            if ((string) $property['class'] == 'name') {
              $name_readable = (string) $property;
            }
          }
          $swtor_server_status['data'][] = array(
            'type' => (string) $server['data-type'],
            'timezone' => (string) $server['data-timezone'],
            'population' => (string) $server['data-population'],
            'population_readable' => $population_readable,
            'name' => (string) $server['data-name'],
            'name_readable' => $name_readable,
            'status' => (string) $server['data-status'],
            'servergroup' => (string) $serverlist['id'],
            'servergroup_readable' => (string) $serverlist->h2,
          );
          $swtor_server_status['ts_cached'] = time();
        }
      }
    }

    // Saving data to cache.
    cache_set('swtor_server_status_data', $swtor_server_status, 'cache');
  }

  if ($mode == 'all') {
    return $swtor_server_status;
  }

  if (empty($mode)) {

    // Get the desired server.
    $server_name_compare = variable_get('swtor_server_status_server', 't3-m4');
    foreach ($swtor_server_status['data'] as $k => $item) {
      if ($server_name_compare == $item['name']) {
        $swtor_server_status['data'] = array(0 => $item);
        break;
      }
    }
    return $swtor_server_status;
  }

  return array();
}

 /**
  * Returns a list of swtor servers.
  */
function swtor_server_status_getservers() {

  $_data = swtor_server_status_getdata($mode = 'all');

  $data = array();
  foreach ($_data['data'] as $d) {
    $data[$d['name']] = filter_xss($d['name_readable']);
  }

  return $data;
}

 /**
  * Implements hook_block_view().
  */
function swtor_server_status_block_view($delta = '') {

  $block = array(
    'subject' => '',
    'content' => '',
  );

  if ($delta == 'swtor_server_status') {

    if (variable_get('swtor_server_status_show_title', '0') == '1') {
      $block['subject'] = variable_get('swtor_server_status_title', 'SWTOR Server Status');
    }

    if (user_access('access content')) {

      // Whitelisting of elements to show.
      $opts = array(
        'name_readable' => t('Server'),
        'status' => t('Status'),
        'population_readable' => t('Population'),
        'type' => t('Type'),
      );
      $show_label = variable_get('swtor_server_status_data_show_label', '0');
      $wrapper_tags = variable_get('swtor_server_status_data_wrapper', '0');

      $data = swtor_server_status_getdata();

      $_data = array();
      foreach ($opts as $k => $v) {
        if (!empty($data['data'][0][$k])) {
          $_data[$k] = $data['data'][0][$k];
        }
      }

      // Build the output for block content.
      $items = array();
      foreach ($_data as $k => $server_property) {

        if (($show_label == '1' && empty($opts[$k])) ||
            ($show_label == '0' && !in_array($k, array_keys($opts)))) {
          continue;
        }

        if (!empty($server_property)) {

          $server_property = check_plain($server_property);

          if ($wrapper_tags == '1') {

            // Prepare classes for the data-item wrapper elements.
            $classes_data_item = array('swtor-server-status-data-item-' . $k, 'swtor-server-status-data-item');
            if ($k == 'status' && strtolower($server_property) == 'up') {
              $classes_data_item[] = 'status_up';
            }

            // Add wrapper elements.
            $inner_label = array(
              'data' => array(
                '#theme' => 'html_tag',
                '#tag' => 'span',
                '#attributes' => array(
                  'class' => array('swtor-server-status-data-label-' . $k, 'swtor-server-status-data-label'),
                ),
                '#value' => $opts[$k],
              ),
            );
            $inner_data = array(
              'data' => array(
                '#theme' => 'html_tag',
                '#tag' => 'span',
                '#attributes' => array(
                  'class' => $classes_data_item,
                ),
                '#value' => $server_property,
              ),
            );
            $tmp = ($show_label == '1') ? ((!empty($opts[$k])) ? drupal_render($inner_label) . drupal_render($inner_data) : '') : ((!empty($server_property)) ? drupal_render($inner_data) : '');

          }
          else {
            $tmp = ($show_label == '1') ? ((!empty($opts[$k])) ? $opts[$k] . ': ' . $server_property : '') : ((!empty($server_property)) ? $server_property : '');
          }

          $items[] = array(
            'data' => array(
              '#theme' => 'html_tag',
              '#tag' => 'div',
              '#attributes' => array(
                'class' => array('swtor-server-status-data-' . $k),
              ),
              '#value' => $tmp,
            ),
          );
        }
      }

      $block['content']['swtor_server_status'] = array(
        '#theme' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => array(
          'class' => 'swtor-server-status',
        ),
        '#value' => $items,
        '#pre_render' => array('swtor_server_status_html_tag_child_render'),
      );

      if (variable_get('swtor_server_status_guild_show', '0') == '1') {

        $block['content']['swtor_guild_link'] = array(
          '#theme' => 'html_tag',
          '#tag' => 'a',
          '#attributes' => array(
            'class' => 'swtor-guild-link',
            'href' => variable_get('swtor_server_status_guild_link', '#'),
          ),
          '#value' => variable_get('swtor_server_status_guild', 'MyGuild'),
        );
      }
      $block['content']['#attached']['css'][] = drupal_get_path('module', 'swtor_server_status') . '/swtor_server_status.css';
    }
  }

  return $block;
}

 /**
  * Prerender function for the data.
  *
  * @param array $elements 
  *   The element array to manipulate.
  */
function swtor_server_status_html_tag_child_render($elements) {

  $html = '';
  foreach (array_keys($elements['#value']) as $key) {
    if (is_array($elements['#value'][$key]['data'])) {
      $html .= drupal_render($elements['#value'][$key]['data']);
    }
  }
  $elements['#value'] = $html;
  return $elements;
}

 /**
  * Implements hook_menu().
  */
function swtor_server_status_menu() {

  $items['admin/config/services/swtor_server_status'] = array(
    'title' => SWTOR_SERVER_STATUS_INFO,
    'description' => SWTOR_SERVER_STATUS_INFO . ' Configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('swtor_server_status_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

 /**
  * Implements hook_form().
  */
function swtor_server_status_form($form, &$form_state) {

  $form['swtor_server_status_server'] = array(
    '#type' => 'select',
    '#title' => t('Server'),
    '#options' => swtor_server_status_getservers(),
    '#default_value' => variable_get('swtor_server_status_server', 't3-m4'),
    '#description' => t('Select SWTOR server.'),
    '#required' => TRUE,
  );
  $form['swtor_server_status_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Define the title of the block.'),
    '#default_value' => variable_get('swtor_server_status_title', 'SWTOR Server Status'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $form['swtor_server_status_show_title'] = array(
    '#type' => 'select',
    '#title' => t('Display title'),
    '#options' => array('1' => t('On'), '0' => t('Off')),
    '#default_value' => variable_get('swtor_server_status_show_title', '0'),
    '#description' => t('Enable or disable display of the title of the block defined above.'),
  );
  $form['swtor_server_status_data_show_label'] = array(
    '#type' => 'select',
    '#title' => t('Display labels for the data'),
    '#options' => array('1' => t('On'), '0' => t('Off')),
    '#default_value' => variable_get('swtor_server_status_data_show_label', '0'),
    '#description' => t('Enable or disable data labeling.'),
  );
  $form['swtor_server_status_local'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => array(
      '' => t('English'),
      'de' => t('German'),
      'fr' => t('French')),
    '#default_value' => variable_get('swtor_server_status_local', ''),
    '#description' => t('Language display setting.'),
  );
  $form['swtor_server_status_group_game'] = array(
    '#type' => 'fieldset',
    '#title' => t('Game settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['swtor_server_status_group_game']['swtor_server_status_guild'] = array(
    '#type' => 'textfield',
    '#title' => t('Guild name'),
    '#description' => t('Name of the guild displayed in widget.'),
    '#default_value' => variable_get('swtor_server_status_guild', 'MyGuild'),
    '#size' => 40,
    '#maxlength' => 120,
  );
  $form['swtor_server_status_group_game']['swtor_server_status_guild_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Guild link'),
    '#description' => t('Link to the guild-website (example: http://www.example.org).'),
    '#default_value' => variable_get('swtor_server_status_guild_link', '#'),
    '#size' => 40,
    '#maxlength' => 120,
  );
  $form['swtor_server_status_group_game']['swtor_server_status_guild_show'] = array(
    '#type' => 'select',
    '#title' => t('Display guild link'),
    '#options' => array('1' => t('On'), '0' => t('Off')),
    '#default_value' => variable_get('swtor_server_status_guild_show', '0'),
    '#description' => t('Enable or disable the guild link in last line of the widget'),
    '#required' => TRUE,
  );
  $form['swtor_server_status_group_system'] = array(
    '#type' => 'fieldset',
    '#title' => t('System settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['swtor_server_status_group_system']['swtor_server_status_data_cache_time'] = array(
    '#type' => 'select',
    '#title' => t('Cache Interval'),
    '#options' => array(
      '1'   => t('1 Minute'),
      '2'   => t('2 Minutes'),
      '3'   => t('3 Minutes'),
      '4'   => t('4 Minutes'),
      '5'   => t('5 Minutes'),
      '10'  => t('10 Minutes'),
      '20'  => t('20 Minutes'),
      '30'  => t('30 Minutes'),
      '60'  => t('60 Minutes'),
      '90'  => t('90 Minutes'),
      '120' => t('120 Minutes'),
      '180' => t('180 Minutes'),
      '240' => t('240 Minutes'),
    ),
    '#default_value' => variable_get('swtor_server_status_data_cache_time', '10'),
    '#description' => t('Select after which time the SWTOR Server Status data must be refreshed.'),
    '#required' => TRUE,
  );
  $form['swtor_server_status_group_system']['swtor_server_status_data_wrapper'] = array(
    '#type' => 'select',
    '#title' => t('Wrapper tags'),
    '#options' => array('1' => t('On'), '0' => t('Off')),
    '#default_value' => variable_get('swtor_server_status_data_wrapper', '0'),
    '#description' => t('Render wrapper tags for labels and data values.'),
  );
  return system_settings_form($form);
}

 /**
  * Implements hook_help().
  */
function swtor_server_status_help($path, $arg) {

  switch ($path) {
    case 'admin/help#swtor_server_status':
      return '<h3>' . t('About') . '</h3>' .
      t("The SWTOR - Star Wars The Old Republic - Server Status module provides a block displaying server status informations for SWTOR game servers.") . '<br/>' .
      t('You can change the behaviour of this module on the "SWTOR Server Status administration pages"') . '<br/>' .
      t('To add the block to a region go to <a href="@blocks">block configuration page</a>.', array('@blocks' => url('admin/structure/block'))) .
      '<h3>' . t('Layout') . '</h3>' .
      t("The css for this module is kept very simple, it only controls the LTR/RTL behaviour of the block.") . '<br/>' .
      t("You have to create your own css styles to get a customized layout that matches to your website.") . '<br/>' .
      t("Toggle the wrapper element or labeling option to change the rendered html structure with corresponding classes.");
  }
}
