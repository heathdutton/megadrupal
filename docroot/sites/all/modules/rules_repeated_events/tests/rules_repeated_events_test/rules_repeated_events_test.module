<?php

/**
 * @file Rules Repeated Events test module.
 */

/**
 * Implements hook_fluxservice_plugin_directory().
 */
function rules_repeated_events_test_fluxservice_plugin_directory() {
  return 'lib/Drupal/rules_repeated_events_test/Plugin';
}

/**
 * Implements hook_rules_event_info().
 */
function rules_repeated_events_test_rules_event_info() {
  return array('daily_events' => array(
    'name' => 'daily_events',
    'label' => t('Daily event'),
    'class' => 'Drupal\rules_repeated_events\Plugin\Rules\Event\DailyEventHandler',
    'category' => 'repeated_events',
    'access callback' => array('rules_repeated_events_test_access_callback'),
    'variables' => array(),
    'module' => 'rules_repeated_events',
  ));
}

  /**
 * Rules plugin access callback.
 */
function rules_repeated_events_test_access_callback($type, $name) {
  return fluxservice_access_by_plugin('rules_repeated_events');
}

/**
 * Implements hook_rules_action_info().
 */
function rules_repeated_events_test_rules_action_info() {
  $items['repeated_events_mail_action'] = array(
    'name' => 'repeated_events_mail_action',
    'label' => t('Repeated events mail action'),
    'class' => 'Drupal\rules_repeated_events_test\Plugin\Rules\Action\RepeatedEventsMailAction',
    'category' => 'repeated_events',
    'access callback' => array('rules_repeated_events_test_access_callback'),
    'parameter' => array(),
    'group' => 'Rules',
    'module' => 'rules_repeated_events_test'
  );
  return $items;
}

function rules_repeated_events_test_mail($key, &$message, $params) {
  switch ($key) {
    case 'test':
      // Set headers etc
      $message['to'] = 'foo@bar.com';
      $message['subject'] = t('Hello');
      $message['body'][] = t('Hello');
      break;
  }
}

/**
 * Instead of mock time(), we modify all entries in rules_scheduler
 * in the oposite direction.
 */
function rules_repeated_events_test_fake_time($modifier) {
  $modifier = time() - strtotime($modifier);

  db_update('rules_scheduler')
    ->expression('date', 'date + :modifier', array(':modifier' => $modifier))
    ->execute();
}
