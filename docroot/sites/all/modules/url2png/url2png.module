<?php

/**
 * Implementation of hook_menu().
 */
function url2png_menu() {

  $items['admin/settings/url2png'] = array('title' => 'Url2png settings', 'description' => 'Configure url2png', 'page callback' => 'drupal_get_form', 'page arguments' => array('url2png_admin_settings'), 'access arguments' => array('administer site configuration'), 'type' => MENU_NORMAL_ITEM, 'file' => 'url2png.admin.inc', );

  return $items;
}


function url2png_cron() {

  if (variable_get('url2png_cron_start', '') == 'start') {

    $last_nid = variable_get('url2png_cron_nid_progress', 0);
    $limit = variable_get('url2png_number_cron_items', 10);

    $url2png_content_type = variable_get('url2png_content_type', array());

    if (count($url2png_content_type) > 0) {
      foreach ($url2png_content_type as $key => $value) {
        $new_url2png_content_type[] = $key;
      }
      $placeholders = db_placeholders($new_url2png_content_type, 'text');
      $content_type = implode(",", $new_url2png_content_type);
      $result = db_query("SELECT nid FROM {node} WHERE type IN (" . $placeholders . ")  AND nid > $last_nid ORDER BY nid ASC LIMIT $limit", $new_url2png_content_type);
      while ($row = db_fetch_object($result)) {
        $node = node_load($row->nid);

        url2png_update_screenshot($node);
        variable_set('url2png_cron_nid_progress', $row->nid);

      }
    }


  }


}

function url2png_update_screenshot(&$node) {


  if (!empty($node->field_url[0]['value'])) {
    $screenshot_url = url2png_generate_url($node->field_url[0]['value'], $url2png_options);

    $file = url2png_write_image_info($screenshot_url, time());

    if ($file) {

      $file = (array )$file;
      if (!empty($node->field_image[0]['fid'])) {
        $node->field_image[0] = array_merge($node->field_image[0], $file);
      } else {
        $node->field_image[0] = $file;
        $node->field_image[0]['data'] = array('description' => $node->field_url[0]['value'], 'alt' => $node->field_url[0]['value']);
      }

      $node_link = l(t('view'), 'node/' . $node->nid);
      $watchdog_args = array('@type' => $node->type, '%title' => $node->title);

      watchdog('content', 'Screenshot updated for %title', $watchdog_args, WATCHDOG_NOTICE, $node_link);
      node_save($node);
    }

  }

}

function url2png_nodeapi(&$node, $op, $a3 = null, $a4 = null) {
  switch ($op) {

    case 'presave':
      $url2png_content_type = variable_get('url2png_content_type', array());

      if (count($url2png_content_type) > 0) {
        foreach ($url2png_content_type as $key => $value) {
          $new_url2png_content_type[] = $key;
        }
        if (!in_array($node->type, $new_url2png_content_type)) return;
        if (!empty($node->field_url[0]['value']) && empty($node->field_image[0]['fid'])) {


          $screenshot_url = url2png_generate_url($node->field_url[0]['value']);

          $file = url2png_write_image_info($screenshot_url, time());

          if ($file) {

            $file = (array )$file;
            if (!empty($node->field_image[0]['fid'])) {
              $node->field_image[0] = array_merge($node->field_image[0], $file);
            } else {
              $node->field_image[0] = $file;
              $node->field_image[0]['data'] = array('description' => $node->field_url[0]['value'], 'alt' => $node->field_url[0]['value']);
            }


          }

        }
        break;

      }
  }
}

// Write image to drupal site
function url2png_write_image_info($remote_image_path, $name_image) {
  // Save image file to drupal

  $image_name = $name_image . ".png";

  $local_image_path = file_directory_path() . '/' . $image_name;


  $result = drupal_http_request($remote_image_path);

  if ($result->code != 200) {
    drupal_set_message(t('HTTP error @errorcode occurred when trying to fetch @remote.', array('@errorcode' => $result->code, '@remote' => $url)), 'error');
    return false;
  }

  $local_image_path = file_save_data($result->data, $local_image_path);


  if (file_exists($local_image_path)) {

    $image_info = image_get_info($local_image_path);
    // Begin building file object.
    $file = new stdClass();
    $file->filename = $name_image;
    $file->filepath = $local_image_path;
    $file->filemime = $image_info['mime_type'];
    $file->filesize = $image_info['file_size'];
    $file->status = 1;
    $file->uid = 1;
    $file->timestamp = time();

    drupal_write_record('files', $file);

    return $file;
  }


}


function url2png_generate_url($url) {

  # Get your apikey from http://url2png.com/plans
  $URL2PNG_APIKEY = variable_get('url2png_api_key', '');
  $URL2PNG_SECRET = variable_get('url2png_secret_key', '');

  if (variable_get('url2png_fullpage', 0)) {
    $options['fullpage'] = 'true';
  } else  $options['fullpage'] = 'false';

  $options['force'] = 'false';

  $thumbnail_max_width = variable_get('url2png_thumbnail_max_width', '');
  if (!empty($thumbnail_max_width)) {
    $options['thumbnail_max_width'] = $thumbnail_max_width;
  } else  $options['thumbnail_max_width'] = 'false';

  $options['viewport'] = variable_get('url2png_viewport', '1280x1024');

  # urlencode request target
  $options['url'] = urlencode($url);


  # create the query string based on the options
  foreach ($options as $key => $value) {
    $_parts[] = "$key=$value";
  }

  # create a token from the ENTIRE query string
  $query_string = implode("&", $_parts);
  $TOKEN = md5($query_string . $URL2PNG_SECRET);

  return "http://beta.url2png.com/v6/$URL2PNG_APIKEY/$TOKEN/png/?$query_string";

}
