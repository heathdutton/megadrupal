<?php
/**
 * @file
 * Adds SimplyHired's Job-a-matic integration with Drupal.
 *
 * Integrates Job-a-matic job search with your Drupal site using the
 * Job-a-matic web service.
 */

/**
 * Implements hook_theme().
 */
/*
function simplyhired_theme() {
  return array(
    'simplyhired_jobs' => array(
      'template' => 'simplyhired_jobs',
      'variables' => array('results' => NULL),
    ),
    'simplyhired_job' => array(
      'template' => 'simplyhired_job',
      'variables' => array('job' => NULL),
    ),
  );
}
*/
 /**
  * Implements hook_menu().
  */
function simplyhired_menu() {
  $items = array();

  $items['admin/config/simplyhired'] = array(
    'title' => 'SimplyHired',
    'description' => 'SimplyHired API settings.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'page arguments' => array('simplyhired_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/simplyhired/settings'] = array(
    'title' => 'SimplyHired API Settings',
    'description' => 'Enter your SimplyHired API settings for this site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplyhired_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'simplyhired.admin.inc',
  );
	
  return $items;
}

function simplyhired_libraries_info() {
  return array(
		'simplyhired' => array(
			'name' => 'SimplyHired',
			'vendor url' => 'https://github.com/r0nn1ef/simplyhired/tree/2.x',
			'download url' => 'https://github.com/r0nn1ef/simplyhired/tree/2.x',
			'version arguments' => array(
				'file' => 'SimplyHiredAPI.class.php',
				'pattern' => '/Version (\d+)/',
				'lines' => 6,
			),
			'files' => array(
				'php' => array('SimplyHiredAPI.class.php'),
			),
		),
	);
}

/**
 * Executes the SimplyHired job search.
 * 
 * @param string $query
 * @param bool $frag
 * @param array $options associative array with the following possible keys
 *         - location: City/State or zip code to search within.
 *         - miles: radius from the location to search
 *         - sort: how to sort the results
 *         - type: all or job board only
 *         - size: number of results per page
 *         - page: page number in the search results
 *         - source: country for which to search jobs
 *         - post_date: date posted
 *         - job_type: what type of job to search for (i.e. contract, full-time, seasonal, etc)
 *         - employer_type: type of employer (i.e. recruiter or direct hire)
 *         - special: special filters (i.e. age, dog, green friendly)
 *         - education: education level
 */
function simplyhired_search($query, $frag = TRUE, $options=array()) {
  // Clean up our parameters since most are optional.
	if (!isset($options['source'])) {
    $options['source'] = variable_get('simplyhired_source', 'us');
	}
	$results = array();
	
	$pshid = variable_get('simplyhired_pshid', '');
	$api_key = variable_get('simplyhired_auth', '');
	
	if (empty($pshid) || empty($api_key)) {
		drupal_set_message(t('SimplyHired requires a publisher ID and API key before searches can be executed.'), 'error');
		watchdog('simplyhired', t('Missing SimplyHired publisher ID or API key'), NULL, WATCHDOG_ERROR);
		return $results;
	}
	
	// Load the SimplyHired library.
	if ( ($library = libraries_load('simplyhired')) && !empty($library['loaded']) ) {
		$api = new SimplyHiredAPI($pshid, $api_key, 'xml', $options['source']);
    // We'll use a serialized version of the options for a cache id so save a copy.
    $options_copy = serialize($options);
    unset($options['source']);
	} else {
		drupal_set_message(t('SimplyHired library could not be loaded.'), 'error');
		watchdog('simplyhired', t('SimplyHired library could not be loaded.'), NULL, WATCHDOG_ERROR);
		return $results;
	}
	
	if ( sizeof( module_implements('simplyhired_search_query_alter') ) > 0 ) {
		$query = module_invoke_all('simplyhired_search_query_alter', $query);
	}

  // Remove any options that are empty.
  foreach ( $options as $key => $value ) {
    if ( empty($options[$key]) && $key != 'page' ) {
      unset($options[$key]);
    }
  }

    // Create a cache key from the parameters being sent.
    $cid = trim($query) . ($frag === TRUE ? 1 : 0) . $options_copy;
    $cid = 'simplyhired_' . md5($cid);
    $results = cache_get($cid, 'cache_simplyhired');

    if (!$results) {
      $results = $api->search($query, $frag, $options);
      // Set an expiration on the cached data.
      $cache_timeout = variable_get('simplyhired_cache_lifetime', 300);
      if ($cache_timeout > 0) {
        $expires = time() + $cache_timeout;
        cache_set($cid, $results, 'cache_simplyhired', $expires);
      }
    } else {
      $results = $results->data;
    }

	if ( sizeof( module_implements('simplyhired_search_results_alter') ) > 0 ) {
		$results = module_invoke_all('simplyhired_search_results_alter', $results);
	}
	
	return $results;
}

/**
 * Implements hook_flush_caches().
 *
 * @return array
 */
function simplyhired_flush_caches() {
  return array('cache_simplyhired');
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Adds a max cache lifetime value for SimplyHired API data.
 * @param array $form
 * @param array $form_state
 */
function simplyhired_form_system_performance_settings_alter(&$form, &$form_state) {
  $seconds = array(60, 300, 600);
  $opts = array(0 => '<none>');
  foreach ($seconds as $row) {
    $opts[$row] = format_interval($row, 2);
    if ($row == 300) {
      $opts[$row] = $opts[$row] . ' ' . t('(default)');
    }
  }
  $form['caching']['simplyhired_cache_lifetime'] = array(
    '#type' => 'select',
    '#title' => t('SimplyHired cache lifetime'),
    '#default_value' => variable_get('simplyhired_cache_lifetime', 300),
    '#options' => $opts,
    '#description' => t('Maximum amount of time to store SimplyHired API data for each unique search query.')
  );
}

/**
 * Returns a list of available API endpoints.
 */
function _simplyhired_get_endpoints($show_country_name=FALSE) {
	return array(
		'ar' => ($show_country_name ? t('Argentina') : 'api.simplyhired.com.ar'),
		'au' => ($show_country_name ? t('Australia') : 'api.simplyhired.com.au'),
		'at' => ($show_country_name ? t('Austria') : 'api.simplyhired.com.at'),
		'be' => ($show_country_name ? t('Belgium') : 'api.simplyhired.com.be'),
		'br' => ($show_country_name ? t('Brazil') : 'api.simplyhired.com.br'),
		'ca' => ($show_country_name ? t('Canada') : 'api.simplyhired.ca'),
		'cn' => ($show_country_name ? t('China') : 'api.simplyhired.cn'),
		'fr' => ($show_country_name ? t('France') : 'api.simplyhired.fr'),
		'de' => ($show_country_name ? t('Germany') : 'api.simplyhired.de'),
		'in' => ($show_country_name ? t('India') : 'api.simplyhired.co.in'),
		'ie' => ($show_country_name ? t('Ireland') : 'api.simplyhired.ie'),
		'it' => ($show_country_name ? t('Italy') : 'api.simplyhired.it'),
		'jp' => ($show_country_name ? t('Japan') : 'api.simplyhired.jp'),
		'kr' => ($show_country_name ? t('South Korea') : 'api.simplyhired.kr'),
		'mx' => ($show_country_name ? t('Mexico') : 'api.simplyhired.mx'),
		'nl' => ($show_country_name ? t('Netherlands') : 'api.simplyhired.nl'),
		'pt' => ($show_country_name ? t('Portugal') : 'api.simplyhired.pt'),
		'ru' => ($show_country_name ? t('Russia') : 'api.simplyhired.ru'),
		'za' => ($show_country_name ? t('South Africa') : 'api.za.simplyhired.com'),
		'es' => ($show_country_name ? t('Spain') : 'api.simplyhired.es'),
		'se' => ($show_country_name ? t('Sweden') : 'api.simplyhired.se'),
		'ch' => ($show_country_name ? t('Switzerland') : 'api.simplyhired.ch'),
		'gb' => ($show_country_name ? t('United Kingdom') : 'api.simplyhired.co.uk'),
		'us' => ($show_country_name ? t('United States') : 'api.simplyhired.com'),
	);
}

function _simplyhired_get_sort_options() {
	return array(
    'rd' => 'relevance descending (default)',
    'ra' => 'relevance ascending',
    'dd' => 'last seen date descending',
    'da' => 'last seen date ascending',
    'td' => 'title descending',
    'ta' => 'title ascending',
    'cd' => 'company descending',
    'ca' => 'company ascending',
    'ld' => 'location descending',
    'la' => 'location ascending',
  );
}

function _simplyhired_get_date_posted_options() {
  return array(
    '' => t('All'),
    'lv' => t('last visited'),
    '1' => t('last 24 hours'),
    '7' => t('last 7 days'),
    '14' => t('last 14 days'),
    '30' => t('last 30 days'),
  );
}

function _simplyhired_get_job_type_options() {
  return array(
    '' => t('Any'),
    'contract' => t('Contract'),
    'full-time' => t('Full time'),
    'internship' => t('Internship'),
    'part-time' => t('Part time'),
    'permanent' => t('Permanent'),
    'seasonal' => t('Seasonal'),
    'telecommute' => t('Telecommute'),
    'temporary' => t('Temporary'),
    'volunteer' => t('Volunteer'),
  );
}

function _simplyhired_get_employer_type_options() {
  return array(
    '' => t('Any'),
    'employer' => t('Direct employers'),
    'recruiter' => t('Recruiter'),
  );
}

function _simplyhired_get_special_options() {
  return array(
    '' => t('Any'),
    'agefriendly' => t('Age 50+ Friendly'),
    'diversity50' => t('Diversity Friendly'),
    'dogfriendly' => t('Dog Friendly'),
    'fortune500companies' => t('Fortune 500'),
    'glbt' => t('GLBT Friendly'),
    'green' => t('Green'),
    'newgrad' => t('New Graduate'),
    'nonprofit' => t('Non-Profit'),
    'sociallyresponsible' => t('Socially Responsible'),
    'vetfriendly' => t('Veteran Friendly'),
    'workingmother100' => t('Mom Friendly'),
  );
}

function _simplyhired_get_education_options() {
  return array(
    0 => t('Any'),
    1 => t('Some High School'),
    2 => t('High School'),
    5 => t('Some College'),
    6 => t('Associate\'s Degree'),
    7 => t('Bachelor\'s Degree'),
    8 => t('Master\'s Degree'),
    9 => t('Doctorate'),
    10 => t('Professional'),
  );
}
