<?php
/**
 * @file
 * features_overridden_notify.module
 *
 * Notify the user if there are overridden Features.
 */

/**
 * Implements hook_menu().
 */
function features_overridden_notify_menu() {
  $items = array();

  $items['admin/structure/features/overridden-notify'] = array(
    'title' => 'Overridden Notify',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('features_overridden_notify_admin_form'),
    'access arguments' => array('administer features'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'features_overridden_notify.admin.inc',
    'weight' => 12,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function features_overridden_notify_permission() {
  return array(
    'view features overridden notification' => array(
      'title' => t('View Features Overridden notification'),
      'description' => t('View Features Overridden notification.'),
    ),
  );
}

/**
 * Implements hook_init().
 *
 * Display a message to the user if there are any known overridden Features.
 */
function features_overridden_notify_init() {
  if (variable_get('features_overridden_notify_status_message', TRUE) && user_access('view features overridden notification')) {

    $overridden_features = variable_get('features_overridden_notify_overridden_features', array());
    if (!empty($overridden_features)) {
      $message = format_plural(count($overridden_features),
          'There is a Feature currently overridden.  Go to the !features_admin_page to review.',
          'There are @count features that are currently overridden. Go to the !features_admin_page to review.',
          array('!features_admin_page' => l(t('Features admin page'), 'admin/structure/features'))
      );
      drupal_set_message($message, 'warning', FALSE);
    }
  }
}

/**
 * Implements hook_cron().
 */
function features_overridden_notify_cron() {
  features_overridden_notify_check_features();
}

/**
 * Implements hook_features_post_restore().
 *
 * Perform another check for overridden features,
 * as feature states may have changed.
 */
function features_overridden_notify_features_post_restore($op, $items) {
  // Only check features if there are any items actually being changed.
  if (!empty($items)) {
    // As feature states have only just been updated.
    // we need to clear a couple of static variables first.
    drupal_static_reset('features_get_component_states');
    drupal_static_reset('features_get_normal');
    features_overridden_notify_check_features();
  }
}

/**
 * Check for overridden features.
 */
function features_overridden_notify_check_features() {
  module_load_include('inc', 'features', 'features.export');
  $features = features_get_features();
  $overridden_features = array();
  foreach ($features as $feature) {
    // Only check enabled features.
    // We consider any feature that isn't default to be overridden.
    if ($feature->status && features_get_storage($feature->name) != FEATURES_DEFAULT) {
      $overridden_features[$feature->name] = features_get_feature_title($feature);
    }
  }

  // Only do a variable_set if the value has changed.
  if ($overridden_features != variable_get('features_overridden_notify_overridden_features', array())) {
    variable_set('features_overridden_notify_overridden_features', $overridden_features);

    if (module_exists('rules')) {
      rules_invoke_event('features_overridden_notify_features_overridden');
    }
  }
}
