<?php

/**
 * Implements hook_field_widget_info().
 */
function term_hierarchy_field_widget_info() {
  return array(
    'term_hierarchy' => array(
      'label' => t('Term Hierarchy'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'term_hierarchy' => array(
          'level' => 1,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function term_hierarchy_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  // Add new settings for term_hierarchy widget.
  $form = array();
  $form['term_hierarchy'] = array(
    '#type' => 'fieldset',
    '#title' => 'Term Hierarchy settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );
  $form['term_hierarchy']['level'] = array(
    '#type' => 'select',
    '#options' => drupal_map_assoc(range(1, 10)),
    '#title' => t('Select Hierarchy Depth Level'),
    '#default_value' => empty($settings['term_hierarchy']['level']) ? FALSE : $settings['term_hierarchy']['level'],
  );
  $form['term_hierarchy']['child_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Add Child hierarchy labels'),
    '#default_value' => empty($settings['term_hierarchy']['child_label']) ? t('Child 1') : t($settings['term_hierarchy']['child_label']),
    '#description' => t('Child labels should be separated by comma e.g Model, Version etc. ')
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function term_hierarchy_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $level = $settings['term_hierarchy']['level'];
  $labels = @explode(',', $settings['term_hierarchy']['child_label']);
  $field_name = $field['field_name'];
  // Get value.
  $element_value = NULL;
  if (!empty($items[$delta]['tid'])) {
    // Use saved value from database or cache.
    $element_value = $items[$delta]['tid'];
  }
  elseif (!empty($form_state['values'][$element['#field_name']][$element['#language']][$delta]['tid'])) {
    // Use value from form_state (for example for fields with cardinality = -1).
    $element_value = $form_state['values'][$element['#field_name']][$element['#language']][$delta]['tid'];
  }
  // Get vocabulary.
  $allowed_values = reset($field['settings']['allowed_values']);
  if (empty($allowed_values['vocabulary']) || ($vocabulary = taxonomy_vocabulary_machine_name_load($allowed_values['vocabulary'])) === FALSE) {
    // No vocabulary selected yet or vocabulary not found.
    return array();
  }
  // Check if term exists (may be deleted).
  if ($element_value && (($term = taxonomy_term_load($element_value)) === FALSE)) {
    $element_value = 0;
  }


  if ($element_value) {
    $a_options = term_hierarchy_get_each_levels_terms($vocabulary->vid, $element_value);
    $p_options = $a_options[0]['options'];
    $p_default = $a_options[0]['default_value'];
  }
  else {
    $a_options = array();
    $p_options = term_hierarchy_term_get_children($vocabulary->vid, 0);
    $p_default = '';
  }
  // Wrapper for the field.

  $element += array(
    '#type' => 'hidden',
    '#default_value' => empty($element_value) ? NULL : $element_value,
    '#element_validate' => array('term_hierarchy_field_vali')
  );
  $select = array();
  $select['parent'] = array(
    '#type' => 'select',
    '#options' => array('' => '-Select-') + $p_options,
    '#default_value' => $p_default,
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#ajax' => array(
      'wrapper' => 'term_hierarchy_' . $field_name . '_' . $delta . '_child_wrapper',
      'callback' => 'term_hierarchy_update_child',
      'progress' => array(
        'message' => NULL,
      )
    )
  );

  // Childs wrapper.
  $select['childs'] = array(
    '#prefix' => '<div id="term_hierarchy_' . $field_name . '_' . $delta . '_child_wrapper">',
    '#suffix' => "</div>",
  );

  // $options = term_hierarchy_term_get_children($vocabulary->vid, $element_value);
  //drupal_set_message($level);
  for ($i = 1; $i <= $level; $i++) {
    if (isset($a_options[$i])) {
      $c_options = $a_options[$i]['options'];
      $c_default_value = $a_options[$i]['default_value'];
    }
    else {
      $c_options = array();
      $c_default_value = '';
    }
    $select['childs']['th_child_' . $i] = array(
      '#type' => 'select',
      '#options' => array('' => '-Select-') + $c_options,
      '#default_value' => $c_default_value,
      '#prefix' => '<div id="term_hierarchy_' . $field_name . '_' . $delta . '_child_wrapper_' . ($i - 1) . '">',
      '#suffix' => "</div>",
      '#required' => ($element['#required']) ? TRUE : FALSE,
      '#element_validate' => array('term_hierarchy_field_childs_vali'),
      '#title' => t(empty($labels[$i - 1]) ? 'Child ' . $i : $labels[$i - 1]),
    );
    if ($i != $level) {
      $select['childs']['th_child_' . $i]['#ajax'] = array(
        'wrapper' => 'term_hierarchy_' . $field_name . '_' . $delta . '_child_wrapper',
        'callback' => 'term_hierarchy_update_child',
        'progress' => array(
          'message' => NULL,
        )
      );
    }

    // Update the child values on ajax.
    if (isset($form_state['values'])) {

      $values = $form_state['input'];

      $a_parent = array($field_name, 'und');
      $parent_tids = drupal_array_get_nested_value($values, $a_parent);
      if ($i == 1) {
        $parent_tid = $parent_tids[$delta]['parent'];
        $end = 'parent'; //end($form_state['triggering_element']['#parents']);
      }
      else {
        $parent_tid = $parent_tids[$delta]['childs']['th_child_' . ($i - 1)];
        $end = 'th_child_' . ($i - 1);
      }
      $step = str_replace('th_child_', '', $end) != 'parent' ? str_replace('th_child_', '', $end) : 0;
      if ('th_child_' . $i != $end && $i <= ($step + 1)) {
        if ($i == ($step + 1)) {
          $c_options = term_hierarchy_term_get_children($vocabulary->vid, $parent_tid);
        }
        $select['childs']['th_child_' . $i]['#options'] = array('' => t('-Select-')) + $c_options;
        $select['childs']['th_child_' . $i]['#required'] = ($c_options) ? $element['#required'] : FALSE;
      }
      elseif ('th_child_' . $i != $end && $i > ($step + 1)) {

        $select['childs']['th_child_' . $i]['#options'] = array('' => t('-Select-'));
      }
      else {
        if (!($parent_tid)) {
          if ($a_parent[count($a_parent) - 1] == 'th_child_1') {
            unset($a_parent[count($a_parent) - 1]);
            $a_parent[count($a_parent) - 1] = 'parent';
          }
          elseif ($step > 1) {
            $a_parent[count($a_parent) - 1] = 'th_child_' . ($step - 1);
          }
          $p_seld_tid = drupal_array_get_nested_value($values, $a_parent);

          $p_options = term_hierarchy_term_get_children($vocabulary->vid, $p_seld_tid);
        }
        else {

          $p_term = taxonomy_get_parents($parent_tid);
          $p_options = term_hierarchy_term_get_children($vocabulary->vid, key($p_term));
        }
        $select['childs']['th_child_' . $i]['#options'] = array('' => t('-Select-')) + $p_options;
        $select['childs']['th_child_' . $i]['#required'] = ($p_options) ? $element['#required'] : FALSE;
      }
    }
  }
  unset($element['#required']);
  return array('tid' => $element, 'parent' => $select['parent'], 'childs' => $select['childs']);
}

/**
 * Validate the form field.
 * 
 * @param array $element
 *  Form field array on which validation implemented.
 * @param array $form_state
 *  Form submitted values.
 * @param array $form
 *  Complete Drupal form.
 */
function term_hierarchy_field_vali($element, &$form_state, &$form) {
  $values = &$form_state['values'];
  $a_parent = $element['#parents'];

  $deepest_tid = term_hierarchy_find_value_during_vali($a_parent, $values);
  // drupal_set_message('<pre>'.print_r( $instance['widget']['settings']['term_hierarchy'], true).'</pre>');
  // Sent parent tid
  $a_parent[count($a_parent) - 1] = 'parent';
  // $parent_tid = drupal_array_get_nested_value($values, $a_parent);
  form_set_value($element, $deepest_tid, $form_state);
}

/**
 * Validate the form field.
 * 
 * @param array $element
 *  Form field array on which validation implemented.
 * @param array $form_state
 *  Form submitted values.
 * @param array $form
 *  Complete Drupal form.
 */
function term_hierarchy_field_childs_vali($element, &$form_state, &$form) {
  /** $values = &$form_state['values'];
    $a_parent = $element['#parents'];
    $parent_level = drupal_array_get_nested_value($values, $a_parent);
    if (!$parent_level) {
    $name = implode('][', $a_parent);
    form_set_error($name, t('Select the value in @ field.', array('@' => $element['#title'])));
    }
   * */
}

/*
 * Find the deepest term tid.
 * 
 * @param array $parent
 *  Parent keys of the field.
 * @param array $values
 *  Sumitted values of the form.
 * 
 * @return integer
 *  Return the deepect term tid.
 * 
 * @see term_hierarchy_field_vali
 */

function term_hierarchy_find_value_during_vali($parent, $values) {
  // Delete the last tid value we don't want this.
  unset($parent[count($parent) - 1]);
  $parent_level = drupal_array_get_nested_value($values, $parent);
  foreach (array_reverse($parent_level['childs'], TRUE) as $key => $val) {
    if (!empty($val)) {
      return $val;
    }
  }
  return $parent_level['parent'];
}

/**
 * Get the child terms of the parent term.
 *
 * @param int $vid
 *   Pass the vocubalery vid of the parent term.
 * @param int $parent
 *   Pernt tid of the term.
 * @param boolean $reset
 *   Rebuild the cache or update the cache value.
 *
 * @return array
 *   List of child terms keyed by term id.
 */
function term_hierarchy_term_get_children($vid, $parent = 0, $reset = FALSE) {
  $terms = &drupal_static(__FUNCTION__, array());
  if ($reset || ($vid && empty($terms[$vid][$parent]))) {
    // Initials the array for term storing.
    $terms[$vid][$parent] = array(
      0 => array(),
      1 => array(),
    );
    // Store the terms on vid base.
    $cache_key = "term_hierarchy:{$vid}";
    // Get the data from cache if stored already.
    $cache = cache_get($cache_key);
    if ($reset || !$cache || ($cache->expire && time() > $cache->expire) || empty($cache->data[$parent])) {
      // Cache is empty or data has become outdated or the parent is not cached.
      if ($cache) {
        // Cache exists and is not yet expired but $parent is missing.
        $terms[$vid] = $cache->data;
      }
      if ($reset) {
        $terms[$vid][$parent] = array(
          0 => array(),
          1 => array(),
        );
      }
      // Get term children (only first level).
      $tree = taxonomy_get_tree($vid, $parent, 1);
      foreach ($tree as $term) {
        $terms[$vid][$parent][0][$term->tid] = $term->name;
      }
      // Set cached data.
      cache_set($cache_key, $terms[$vid], 'cache', CACHE_PERMANENT);
    }
    else {
      // Use cached data.
      $terms[$vid] = $cache->data;
    }
  }

  return empty($terms[$vid][$parent][FALSE]) ? array() : $terms[$vid][$parent][0];
}

/**
 * 
 * @param array $form
 *  Completed drupal form.
 * @param type $form_state
 *  Form submitted values.
 * @return type
 *  Return the port of the ajax which want to update seemlessly.
 * 
 * @see term_hierarchy_field_widget_form
 */
function term_hierarchy_update_child(&$form, &$form_state) {
  $values = $form_state['values'];
  $a_parent = $form_state['triggering_element']['#array_parents'];
  if ($a_parent[count($a_parent) - 1] == 'parent') {
    $a_parent[count($a_parent) - 1] = 'childs';
  }
  else {
    unset($a_parent[count($a_parent) - 1]);
  }
  $update_form = drupal_array_get_nested_value($form, $a_parent);
  return $update_form;
}

/**
 * 
 * @param integer $vid
 *  Vocabulary vid.
 * @param integer  $sel_tid
 *  Selected term tid.
 * @param array $options
 *  Siblings terms.
 * @param integer $i
 *  Index id.
 *  
 * @return array
 *  Return all options of the term.
 */
function term_hierarchy_get_each_levels_terms($vid, $sel_tid, $options = array(), $i = 0) {
  $parent = taxonomy_get_parents($sel_tid);
  $pid = key($parent)? : 0;
  $terms = taxonomy_get_children($pid);
  foreach ($terms as $tid => $tobj) {
    $options[$i]['options'][$tid] = $tobj->name;
  }
  if ($pid) {
    $options[$i]['default_value'] = $sel_tid;
    return term_hierarchy_get_each_levels_terms($vid, $pid, $options, ++$i);
  }
  else {
    $options[$i]['options'] = term_hierarchy_term_get_children($vid, 0);
    $options[$i]['default_value'] = $sel_tid;
  }

  return array_reverse($options);
}
