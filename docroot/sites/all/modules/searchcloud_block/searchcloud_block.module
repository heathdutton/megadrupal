<?php

/**
 * @file
 * The module file
 */

/**
 * Implements hook_menu().
 */
function searchcloud_block_menu() {
  $items = array();
  $items['admin/config/search/searchcloud_block'] = array(
    'title' => 'Searchcloud block',
    'description' => 'Configure the search cloud block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchcloud_block_admin'),
    'access arguments' => array('administer searchcloud'),
    'file' => 'searchcloud_block.admin.inc',
  );
  $items['admin/config/search/searchcloud_block/add'] = array(
    'title' => 'Add term',
    'description' => 'Add a term to the search cloud.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchcloud_block_admin_add'),
    'access arguments' => array('administer searchcloud'),
    'file' => 'searchcloud_block.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/search/searchcloud_block/edit'] = array(
    'title' => 'Edit term',
    'description' => 'Add a term to the search cloud.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('searchcloud_block_admin_edit'),
    'access arguments' => array('administer searchcloud'),
    'file' => 'searchcloud_block.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/search/searchcloud_block/reset'] = array(
    'title' => 'Searchcloud block reset',
    'page callback' => 'searchcloud_block_admin_reset',
    'access arguments' => array('searchcloud reset'),
    'file' => 'searchcloud_block.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/search/searchcloud_block/truncate'] = array(
    'title' => 'Searchcloud block truncate',
    'page callback' => 'searchcloud_block_admin_truncate',
    'access arguments' => array('searchcloud truncate'),
    'file' => 'searchcloud_block.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/search/searchcloud_block/hide'] = array(
    'title' => 'Searchcloud block hide',
    'page callback' => 'searchcloud_block_admin_hide',
    'access arguments' => array('administer searchcloud'),
    'file' => 'searchcloud_block.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function searchcloud_block_theme() {
  return array(
    'searchcloud_block' => array(
      'variables' => array(
        'items' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function searchcloud_block_hook_info() {
  $hooks = array(
    'searchcloud_block_get_result_alter',
    'searchcloud_block_check_keys_execute',
  );

  return array_fill_keys($hooks, array('group' => 'searchcloud_block'));
}

/**
 * Implements hook_permission().
 */
function searchcloud_block_permission() {
  return array(
    'administer searchcloud' => array(
      'title' => t('Administer searchcloud'),
      'description' => t('Administer this module.'),
    ),
    'searchcloud truncate' => array(
      'title' => t('Searchcloud truncate'),
      'description' => t('Truncate the complete searchcloud table.'),
    ),
    'searchcloud reset' => array(
      'title' => t('Searchcloud reset'),
      'description' => t('Reset the searchcloud table, this resets all counts to 0 (zero).'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function searchcloud_block_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'search_block_form':
    case 'search_form':
      $form['#submit'][] = 'searchcloud_block_submit_handler';
      break;
  }
}

/**
 * Added a custom submit handler.
 */
function searchcloud_block_submit_handler($form, $form_values) {
  switch ($form['#form_id']) {
    case 'search_block_form':
      $keys = $form_values['values']['search_block_form'];
      break;

    default:
      $keys = $form_values['values']['keys'];
  }
  if (!empty($keys)) {
    searchcloud_block_check_keys($keys);
  }
}

/**
 * Check for the searched keys and add or update them in our table.
 */
function searchcloud_block_check_keys($key) {
  $result = searchcloud_block_get_result(TRUE, $key);
  $rowcount = $result->rowCount();

  if (!empty($rowcount)) {
    foreach ($result as $record) {
      db_update('searchcloud_block_count')
      ->fields(array('count' => $record->count + 1))
      ->condition('keyword', $key)
      ->execute();
    }
  }
  else {
    db_insert('searchcloud_block_count')
    ->fields(array(
      'keyword' => $key,
      'count' => 1,
    ))
    ->execute();
  }

  $usepaths = variable_get('searchcloud_block_usepaths', 0);
  $paths = variable_get('searchcloud_block_usepaths_pathlist', '');
  if (!empty($usepaths) && !empty($paths)) {
    $paths = searchcloud_block_sanitize_paths($paths);
    global $base_url;
    $ref = str_replace($base_url . '/', '', $_SERVER['HTTP_REFERER']);

    if (in_array($ref, $paths)) {
      searchcloud_block_set_path_result($key, $ref);
    }
  }

  // Save parameters.
  $_key = $key;
  if (isset($record)) {
    $_count = $record->count + 1;
  }
  else {
    $_count = 1;
  }

  // Execute hook.
  module_invoke_all('searchcloud_block_check_keys_execute', $_key, $_count);
}

/**
 * Get the results from the DB.
 */
function searchcloud_block_get_result($all = FALSE, $key = FALSE, $nr = FALSE, $order = FALSE) {

  if (empty($order) || $order == 'RAND') {
    $order = FALSE;
  }

  try {
    $query = db_select('searchcloud_block_count', 'sbc');
    $query->fields('sbc', array('keyword', 'count', 'hide'));

    if ($key) {
      $query->condition('sbc.keyword', $key);
    }

    if (!$all) {
      $query->condition('sbc.hide', 1, '<>');
    }

    if ($nr) {
      $query->range(0, $nr);
    }

    if (!empty($order)) {
      $query->orderBy('count', $order);
    }

    $usepaths = variable_get('searchcloud_block_usepaths', 0);
    $paths = variable_get('searchcloud_block_usepaths_pathlist', '');
    if (!empty($usepaths) && !empty($paths)) {
      $paths = searchcloud_block_sanitize_paths($paths);
      if (in_array($_GET['q'], $paths)) {
        $query->join('searchcloud_block_paths', 'sbp', 'sbc.keyword = sbp.keyword AND sbp.path = :path', array(':path' => $_GET['q']));
      }
    }

    module_invoke_all('searchcloud_block_get_result_alter', $query);

    $result = $query->execute();
  }
  catch(Exception $e) {
    watchdog('searchcloud_block', $e);
  }

  return $result;
}

/**
 * Implements hook_block_info().
 */
function searchcloud_block_block_info() {
  $blocks = array();
  $blocks['searchcloud_block']['info'] = 'Searchcloud block';
  $blocks['searchcloud_block']['cache'] = DRUPAL_CACHE_GLOBAL;
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function searchcloud_block_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'searchcloud_block':
      $content = searchcloud_block_get_keys();
      if ($content) {
        $block['subject'] = t('Searchcloud');
        $block['content'] = searchcloud_block_get_keys();
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function searchcloud_block_block_configure($delta = '') {
  $form = array();
  if ($delta == 'searchcloud_block') {
    $form['searchcloud_block_sort_order'] = array(
      '#type' => 'select',
      '#title' => t('Sort order of the search terms in this block'),
      '#default_value' => variable_get('searchcloud_block_sort_order', 'RAND'),
      '#options' => array(
        'RAND' => t('Random'),
        'DESC' => t('Descending'),
        'ASC' => t('Ascending'),
      ),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function searchcloud_block_block_save($delta = '', $edit = array()) {
  if ($delta == 'searchcloud_block') {
    variable_set('searchcloud_block_sort_order', $edit['searchcloud_block_sort_order']);
  }
}

/**
 * Get the keys.
 */
function searchcloud_block_get_keys() {
  drupal_add_css(drupal_get_path('module', 'searchcloud_block') . '/css/searchcloud_block.css');
  $sort = variable_get('searchcloud_block_sort_order', 'RAND');
  $nr = variable_get('searchcloud_block_count', 10);
  $stylecount = variable_get('searchcloud_block_stylecount', 5);
  $default_search = search_get_default_module_info();

  $override_search = variable_get('searchcloud_block_overridepath');
  if (!empty($override_search)) {
    $root_search_path = $override_search;
  }
  else {
    $root_search_path = rtrim('search/' . $default_search['path'], '/');
  }

  $result = searchcloud_block_get_result(FALSE, FALSE, $nr, $sort);
  $items = array();

  $max = 0;
  $min = 9999;
  $rows = array();
  foreach ($result as $row) {
    $rows[] = $row;
    if ($row->count > $max) {
      $max = $row->count;
    }
    if (!isset($min) || $row->count < $min) {
      $min = $row->count;
    }
  }
  if (!empty($rows)) {
    $stepsize = 1;
    if (count($rows) > 1) {
      $stepsize = ceil(($max - $min) / $stylecount);
      if ($sort == 'RAND') {
        shuffle($rows);
      }
    }
    if ($stepsize < 1) {
      $stepsize = 1;
    }

    foreach ($rows as $row) {
      $ratio = $row->count / $stepsize;
      $ratio = ceil($ratio);
      $items[] = (object) array(
        'param' => $row->keyword,
        'ratio' => $ratio,
        'row' => $row,
        'path' => rtrim($root_search_path, '/'),
      );
    }

    return theme('searchcloud_block', array('items' => $items));
  }
  else {
    return FALSE;
  }
}

/**
 * Generate the searchcloud block.
 */
function theme_searchcloud_block(&$variables) {
  $useparam = variable_get('searchcloud_block_useparam', 0);
  $param = variable_get('searchcloud_block_paramname', '');
  $html = '<ul class="searchcloud">';

  foreach ($variables['items'] as $item) {
    $query = array();
    if ($useparam) {
      $path = $item->path;
      $query[$param] = $item->param;
    }
    else {
      $path = $item->path . '/' . $item->param;
    }
    $html .= '<li class="cloud-' . $item->ratio . '">' . l($item->row->keyword, $path, array('query' => $query)) . '</li>';
  }

  return $html . '</ul>';
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function searchcloud_block_apachesolr_query_alter(SolrBaseQuery $query) {
  $params = $query->getParams();

  // Search query is at $params['q'].
  searchcloud_block_check_keys($params['q']);

}

/**
 * Implements hook_search_api_query_alter().
 */
function searchcloud_block_search_api_query_alter(SearchApiQueryInterface $query) {
  $keys = $query->getKeys();

  if (empty($keys['#conjunction'])) {
    return;
  }

  if (strtoupper($keys['#conjunction']) != 'AND') {
    watchdog('searchcloud_block', 'At searchcloud_block_search_api_query_alter:
      unknown #conjunction parameter. Please create an issue at our project page
      at drupal.org. The unknown parameter is [' . $keys['#conjunction'] . ']');
  }

  unset($keys['#conjunction']);
  $key = trim(implode(' ', array_values($keys)));

  // Update the database.
  searchcloud_block_check_keys($key);
}

/**
 * Sanitize paths.
 */
function searchcloud_block_sanitize_paths($paths) {
  $paths = explode(',', $paths);
  foreach ($paths as $key => $val) {
    $paths[$key] = trim($val);
  }
  return $paths;
}

/**
 * Ser path results.
 */
function searchcloud_block_set_path_result($key, $ref) {
  $query = db_select('searchcloud_block_paths', 'sbp');
  $query->fields('sbp', array('keyword', 'path'));
  $query->condition('sbp.keyword', $key);
  $query->condition('sbp.path', $ref);

  $result = $query->execute();
  $rows = $result->fetchAll();

  if (empty($rows)) {
    db_insert('searchcloud_block_paths')
    ->fields(array(
      'keyword' => $key,
      'path' => $ref,
    ))
    ->execute();
  }
}
