<?php

/**
 * @file
 * Module file.
 */

// Establish that this module does not affect to the form.
define('WEBFORM_FTP_NOT_UPLOAD', -1);
// Text string to encrypt password.
define('WEBFORM_FTP_HASH_KEY', drupal_get_private_key());
// Encryption method.
define('WEBFORM_FTP_ENCRYPTIONMETHOD', 'AES-256-CBC');

module_load_include('inc', 'webform_ftp', 'webform_ftp.admin');

/**
 * Implements hook_permission().
 */
function webform_ftp_permission() {
  return array(
    'set webform_ftp times' => array(
      'title' => t('Set Webform FTP submission storage periods'),
      'description' => '',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webform_ftp_menu() {
  $items = array();
  $items['admin/config/content/webform_ftp'] = array(
    'title' => 'Webform FTP',
    'description' => 'Set up default Webform FTP submission storage.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_ftp_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'webform_ftp.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_node_delete().
 */
function webform_ftp_node_delete($node) {
  db_delete('webform_ftp')->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_form_alter().
 *
 * Configuration form for the individual webforms.
 */
function webform_ftp_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'webform_configure_form':
      $ftp_time = db_query("SELECT ftp_time FROM {webform_ftp} WHERE nid = :nid", array(':nid' => $form['nid']['#value']))->fetchField();
      if ($ftp_time === FALSE) {
        $default = variable_get('webform_ftp_default_time', WEBFORM_FTP_NOT_UPLOAD);
      }
      else {
        $default = $ftp_time;
      }
      $form['#submit'][] = 'webform_ftp_configure_save';
      $options = _webform_ftp_get_ftp_time_options();
      $form['submission']['ftp_time'] = array(
        '#type' => 'select',
        '#title' => t('Webform submission upload to ftp period'),
        '#description' => '',
        '#options' => $options,
        '#default_value' => $default,
      );
      if (!user_access('set webform_ftp times')) {
        $form['submission']['ftp_time']['#disabled'] = TRUE;
        $form['submission']['ftp_time']['#value'] = $default;
      }
      break;

    case strstr($form_id, 'webform_client_form'):
      $form['#submit'][] = 'webform_ftp_delete_result';
      break;
  }
}

/**
 * Delete module configuration before save new information.
 */
function webform_ftp_delete_result($form, &$form_state) {
  $nid = $form_state['values']['details']['nid'];

  $ftp = db_query("SELECT ftp_time FROM {webform_ftp} WHERE nid = :nid", array(':nid' => $nid))->fetchField();

  if ($ftp === FALSE) {
    $ftp = variable_get('webform_ftp_default_time', WEBFORM_FTP_NOT_UPLOAD);
  }

  watchdog('webform_ftp', 'WEBFORM FTP: save configuration');
}

/**
 * Implements hook_cron().
 */
function webform_ftp_cron() {
  $submissions = db_query("SELECT w.nid, w.submitted, w.sid, wc.ftp_time FROM {webform_submissions} w INNER JOIN {webform_ftp} wc ON wc.nid = w.nid GROUP BY wc.nid ORDER BY w.submitted ASC ");

  foreach ($submissions as $submission) {
    if ($submission->ftp_time == WEBFORM_FTP_NOT_UPLOAD) {
      continue;
    }

    $delete_on = $submission->submitted + $submission->ftp_time;
    $time = webform_ftp_current_time();
    if ($time > $delete_on) {
      webform_ftp_export_and_upload($submission->nid);
    }
  }
}

/**
 * Export and upload CSV to server.
 *
 * Export all submissions into CSV file and upload
 * this file to a folder on a configured server.
 *
 * The name of upload file: form-[nid]-[timestamp].csv
 *
 * @param int $nid
 *   The number of webform node.
 */
function webform_ftp_export_and_upload($nid) {
  $webform_ftp_ftp_host = variable_get('webform_ftp_ftp_host');
  $webform_ftp_ftp_user = variable_get('webform_ftp_ftp_user');
  $webform_ftp_ftp_pass = variable_get('webform_ftp_ftp_pass');
  $webform_ftp_ftp_path = variable_get('webform_ftp_ftp_path');
  $webform_ftp_ftp_port = variable_get('webform_ftp_ftp_port');

  list($encrypted, $iv) = explode(':', $webform_ftp_ftp_pass);
  $webform_ftp_ftp_pass = openssl_decrypt($encrypted, WEBFORM_FTP_ENCRYPTIONMETHOD, WEBFORM_FTP_HASH_KEY, 0, $iv);

  module_load_include('inc', 'webform', 'includes/webform.submissions');
  module_load_include('inc', 'webform', 'includes/webform.report');

  $node = node_load($nid);
  $csv = webform_results_export($node);
  $file = $csv['file_name'];

  $ftp_conn = ftp_connect($webform_ftp_ftp_host, $webform_ftp_ftp_port);
  ftp_login($ftp_conn, $webform_ftp_ftp_user, $webform_ftp_ftp_pass);
  ftp_pasv($ftp_conn, TRUE);
  if (ftp_chdir($ftp_conn, $webform_ftp_ftp_path)) {
    if (ftp_put($ftp_conn, "form-" . $nid . "-" . time() . ".csv", $file, FTP_ASCII)) {
      webform_ftp_delete($node);
      watchdog('webform_ftp', 'WEBFORM FTP: upload all submissions to server');
    }
    else {
      watchdog('webform_ftp', 'WEBFORM FTP: Error on upload all submissions to server');
    }
  }
  ftp_close($ftp_conn);
}

/**
 * Gets the current time.
 *
 * If an argument is passed, the defined time will be added to the current time
 * in subsequent calls to this function. This functionality is only used in
 * automated tests, normally this function equals time().
 *
 * @param int $add_time
 *   The number of seconds to add to the current time.
 *
 * @return int
 *   The current timestamp.
 */
function webform_ftp_current_time($add_time = NULL) {
  static $saved_add_time = 0;
  if (isset($add_time)) {
    $saved_add_time = (int) $add_time;
  }
  return time() + $saved_add_time;
}

/**
 * Delete submissions.
 *
 * @param object $node
 *   The webform node object.
 */
function webform_ftp_delete($node) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submissions = webform_get_submissions($node->nid);

  foreach ($submissions as $sub) {
    webform_submission_delete($node, $sub);
  }

  watchdog('webform_ftp', 'WEBFORM FTP: delete all submissions');
}
