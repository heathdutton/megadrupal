<?php
/**
 * @file
 * The CommonMark module file.
 */

use Drupal\CommonMark\Converter;
use Drupal\CommonMark\Environment;

include_once 'commonmark.filter.inc';

/******************************************************************************
 * Hooks.
 *****************************************************************************/

/**
 * Implements hook_hook_info().
 */
function commonmark_hook_info() {
  $group = ['group' => 'commonmark'];
  $hooks['commonmark_extension_info'] = $group;
  $hooks['commonmark_extension_settings'] = $group;
  $hooks['commonmark_extension_tips'] = $group;
  return $hooks;
}

/**
 * Implements hook_menu().
 */
function commonmark_menu() {
  $items['admin/config/content/commonmark'] = [
    'title' => 'CommonMark',
    'description' => 'Settings related to CommonMark Markdown parsing.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['commonmark_admin_form'],
    'access arguments' => ['administer site configuration'],
  ];
  return $items;
}

/**
 * Implements hook_registry_autoload_registry_alter().
 */
function commonmark_registry_autoload_registry_alter(array &$registry) {
  if (($library_path = commonmark_get_library_path('thephpleague', 'commonmark', FALSE)) && file_exists("$library_path/src")) {
    $autoload_searcher = new RegistryAutoloadSearcher(registry_get_parsed_files());
    $module = (object) db_select('system', 's')->fields('s')->condition('name', 'commonmark')->execute()->fetchAssoc();
    $class_files = $autoload_searcher->findClassFiles("$library_path/src", 'PSR-4/absolute');
    $registry = array_merge($registry, $autoload_searcher->processFiles($class_files, $module));
  }
}

/**
 * Implements hook_xautoload().
 */
function commonmark_xautoload($adapter) {
  /** @var \Drupal\xautoload\Adapter\LocalDirectoryAdapter $adapter */
  $adapter->composerJson('composer.json');

  if (($library_path = commonmark_get_library_path('thephpleague', 'commonmark')) && file_exists("$library_path/composer.json")) {
    $adapter->absolute()->composerJson("$library_path/composer.json");
  }
}

/******************************************************************************
 * Callbacks.
 *****************************************************************************/

/**
 * Menu callback for "admin/config/content/commonmark".
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function commonmark_admin_form(array $form, array &$form_state) {
  $build = commonmark_extension_settings_form($form, $form_state, $form);
  return array_merge($build, system_settings_form($form));
}

/**
 * Retrieves the settings form for extensions.
 *
 * @param array $element
 *   An element that the extensions should be added to.
 * @param array $form_state
 *   The form state array, passed by reference.
 * @param array $form
 *   The entire form array, passed by reference.
 *
 * @return array
 *   The modified element array.
 */
function commonmark_extension_settings_form(array $element, array &$form_state, array &$form) {
  $filter = isset($form_state['#filter']) ? $form_state['#filter'] : NULL;

  $element['commonmark_extensions'] = [
    '#type' => 'fieldset',
    '#title' => t('CommonMark Extensions'),
    '#description' => t('Visit the Drupal <a href="!url" target="_blank">CommonMark</a> module project page to see a full list of supported extensions.', [
      '!url' => 'https://www.drupal.org/project/commonmark',
    ]),
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  ];

  $element['commonmark_extensions']['enabled'] = [
    '#type' => 'tableselect',
    '#empty' => t('No CommonMark extensions available.'),
    '#js_select' => FALSE,
    '#header' => [
      'title' => t('Title'),
      'description' => t('Description'),
      'type' => t('Type')
    ],
  ];

  $options = [];
  $default_value = isset($form_state['values']['enabled']) ? $form_state['values']['enabled'] : [];
  foreach (commonmark_get_extensions($filter, $form_state, FALSE) as $extension) {
    // Construct the tableselect option.
    $options[$extension['name']] = [
      'title' => !empty($extension['url']) ? l($extension['title'], $extension['url'], ['attributes' => ['target' => '_blank']]) : $extension['title'],
      'description' => !empty($extension['description']) ? $extension['description'] : '',
      'type' => $extension['type'],
    ];

    if (!isset($default_value[$extension['name']])) {
      $default_value[$extension['name']] = (int) $extension['enabled'];
    }

    if (module_hook($extension['module'], 'commonmark_extension_settings')) {
      $element['commonmark_extensions']['settings'][$extension['name']] = [
        '#type' => 'fieldset',
        '#title' => t('@extension Settings', array(
          '@extension' => $extension['title'],
        )),
        '#collapsible' => TRUE,
        '#states' => [
          'visible' => [
            _commonmark_get_states_selector($filter, $extension, NULL, 'enabled') => ['checked' => TRUE],
          ],
        ],
      ];
      $extension_settings = &$element['commonmark_extensions']['settings'][$extension['name']];
      if (!empty($extension['description'])) {
        $extension_settings['#description'] = $extension['description'];
      }
      $function = $extension['module'] . '_commonmark_extension_settings';
      $extension_settings = $function($extension, $extension_settings, $form_state, $form);
    }
  }
  $element['commonmark_extensions']['enabled']['#options'] = $options;
  $element['commonmark_extensions']['enabled']['#default_value'] = $default_value;

  $form['#submit'][] = 'commonmark_extension_settings_form_submit';

  return $element;
}

/**
 * Submit callback for commonmark_admin_form().
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function commonmark_extension_settings_form_submit(array $form, array &$form_state) {
  // Remove unnecessary values.
  form_state_values_clean($form_state);

  // Reference the values.
  $values = &$form_state['values'];

  // Clear existing extensions cache so it can be rebuilt the next time it's
  // requested with the correct enabled status and setting values for each
  // extension.
  cache_clear_all('commonmark:extensions', 'cache');

  // Handle filter specific settings.
  $filter = isset($form_state['#filter']) ? $form_state['#filter'] : NULL;
  if (isset($filter)) {
    // Forcefully disable incompatible filters (for disabled JS).
    if (!!intval($values['filters']['commonmark']['status'])) {
      $disabled = [];
      foreach (_commonmark_incompatible_filters() as $name) {
        if (isset($values['filters'][$name]) && intval($values['filters'][$name]['status'])) {
          $disabled[] = isset($form['#filters'][$name]) ? $form['#filters'][$name]->title : $name;
          $values['filters'][$name]['status'] = 0;
        }
      }
      if ($disabled) {
        drupal_set_message(t('The following filters are incompatible with or is functionality already provided by the CommonMark filter and will be forcefully disabled. To re-enable any of these filters, you must first disable the CommonMark filter. !filters', [
          '!filters' => theme('item_list', ['items' => $disabled]),
        ]), 'warning');
      }
    }
  }

  // Handle extension specific settings.
  $values = &drupal_array_get_nested_value($form_state['values'], _commonmark_get_form_parents($filter), $exists);
  if ($exists) {
    // Convert extension enabled statuses to integers.
    if (!empty($values['enabled'])) {
      foreach ($values['enabled'] as $name => $value) {
        $values['enabled'][$name] = (int) !empty($value);
      }
    }

    // Convert settings to the appropriate type.
    if (!empty($values['settings'])) {
      foreach ($values['settings'] as $name => $settings) {
        if ($extension = commonmark_get_extension($name)) {
          foreach ($settings as $key => $value) {
            // Get the type of the exist value (if any).
            if (isset($extension['default settings'][$key]) && ($type = gettype($extension['default settings'][$key]))) {
              $original_value = is_object($value) ? clone $value : $value;
              if (!settype($value, $type)) {
                $value = $original_value;
              }
              $values['settings'][$name][$key] = $value;
            }
          }
        }
      }
    }
  }
}

/******************************************************************************
 * Public functions.
 *****************************************************************************/

/**
 * Parses a string with the CommonMark PHP library.
 *
 * @param string $string
 *   The string to parse.
 * @param bool|object $reset
 *   Toggle determining whether or not reload the CommonMark environment.
 *   If an object is passed, representing a filter, then it automatically
 *   act as if the filter is reset and pass along the filter.
 *
 * @return string
 *   The parsed string.
 */
function commonmark_convert_to_html($string, $reset = FALSE) {
  $converter = commonmark_get_converter($reset);
  return $converter->convertToHtml($string);
}


/**
 * Retrieves a the info for installed CommonMark extensions.
 *
 * This function should not be called directly as this only provides default
 * extension information provided directly from the defined hook information.
 * Use commonmark_get_extensions() instead.
 *
 * @return array
 *   An associative array of installed extensions defined by
 *   hook_commonmark_extension_info(), keyed by the extension's machine name.
 *
 * @see commonmark_get_extensions()
 * @see _commonmark_discover_extensions()
 */
function commonmark_extension_info() {
  // Use the advanced drupal_static() pattern.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['extensions'] = &drupal_static(__FUNCTION__);
  }
  $extensions = &$drupal_static_fast['extensions'];

  // Retrieve installed extensions.
  if (!isset($extensions)) {
    $cid = 'commonmark:extensions';

    // Attempt to load cached extensions data.
    if (($cache = cache_get($cid)) && isset($cache->data)) {
      $extensions = $cache->data;
    }
    // Otherwise, discover all installed CommonMark extensions.
    else {
      $extensions = _commonmark_discover_extensions();
      cache_set($cid, $extensions);
    }
  }

  return $extensions;
}

/**
 * Retrieves a CommonMark converter.
 *
 * @param bool|object $reset
 *   Toggle determining whether or not reload the CommonMark environment.
 *   If an object is passed, representing a filter, then it automatically
 *   act as if the filter is reset and pass along the filter.
 *
 * @return Drupal\CommonMark\Converter
 *   A Drupal\CommonMark\Converter instance.
 */
function commonmark_get_converter($reset = FALSE) {
  // Use the advanced drupal_static() pattern.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['converter'] = &drupal_static(__FUNCTION__);
  }
  $converter = &$drupal_static_fast['converter'];
  if ($reset || !isset($converter)) {
    // If $reset is an object, treat it as a filter.
    if (is_object($reset) && isset($reset->format) && !empty($reset->status)) {
      return new Converter(NULL, NULL, $reset);
    }
    $converter = new Converter();
  }
  return $converter;
}

/**
 * Get an extension by name.
 *
 * @param string $name
 *   The machine name of the extension to load.
 * @param object $filter
 *   An object representing an active filter to override extension information.
 * @param array $form_state
 *   The form state array, if any.
 * @param bool $enabled_only
 *   Flag that ensures only enabled extensions are returned.
 *
 * @return array|FALSE
 *   If $name is specified and it exists, it will return the specific extension
 *   information array. If $name is specified and does not exist, FALSE will
 *   be returned. If $name is not specified, all available extensions will be
 *   returned.
 */
function commonmark_get_extension($name, $filter = NULL, array $form_state = array(), $enabled_only = TRUE) {
  $extensions = commonmark_get_extensions($filter, $form_state, $enabled_only);
  return isset($extensions[$name]) ? $extensions[$name] : FALSE;
}

/**
 * Retrieves active extensions based on filtered criteria and populated values.
 *
 * @param object $filter
 *   An object representing an active filter to override extension information.
 * @param array $form_state
 *   The form state array, if any.
 * @param bool $enabled_only
 *   Flag that ensures only enabled extensions are returned.
 *
 * @return array
 *   The active and populated extensions based on passed parameters.
 */
function commonmark_get_extensions($filter = NULL, array $form_state = array(), $enabled_only = TRUE) {
  $extensions = commonmark_extension_info();

  // Restore saved global settings.
  $global = variable_get('commonmark_extensions', []);
  foreach (array_keys($extensions) as $name) {
    if (isset($global['enabled'][$name])) {
      $extensions[$name]['enabled'] = !!$global['enabled'][$name];
    }
    if (isset($global['settings'][$name])) {
      $extensions[$name]['settings'] = drupal_array_merge_deep($extensions[$name]['settings'], $global['settings'][$name]);
    }
  }

  // Merge in an active filter that overrides global settings.
  if (is_object($filter) && isset($filter->format) && !empty($filter->status) && empty($filter->settings['use_global_settings']) && isset($filter->settings['commonmark_extensions'])) {
    foreach ($extensions as &$extension) {
      $extension['enabled'] = !!$filter->settings['commonmark_extensions']['enabled'][$extension['name']];
      $extension['original settings'] = $extension['settings'];
      $extension['settings'] = drupal_array_merge_deep($extension['settings'], $filter->settings['commonmark_extensions']['settings'][$extension['name']]);
    }
  }

  // Merge in form state values.
  if (!empty($form_state['values'])) {
    $values = &drupal_array_get_nested_value($form_state['values'], _commonmark_get_form_parents($filter), $exists);
    if (!empty($values['enabled'])) {
      foreach ($values['enabled'] as $name => $value) {
        if (isset($extensions[$name])) {
          $extensions[$name]['enabled'] = !empty($value);
        }
      }
    }
    if (!empty($values['settings'])) {
      foreach ($values['settings'] as $name => $settings) {
        if (isset($extensions[$name])) {
          $extensions[$name]['settings'] = drupal_array_merge_deep($extensions[$name]['settings'], $settings);
        }
      }
    }
  }

  // Finally, filter out disabled extensions.
  if ($enabled_only) {
    $extensions = array_filter($extensions, function ($extension) {
      return $extension['enabled'];
    });
  }

  return $extensions;
}

/**
 * Retrieves the path to a vendor/package based library from Packagist.
 *
 * @param string $vendor
 *   The vendor name.
 * @param string $package
 *   The package name.
 * @param bool $absolute
 *   Toggle determining whether or not to return an absolute path.
 *
 * @return string|FALSE
 *   The path to the commonmark library or FALSE if not found.
 */
function commonmark_get_library_path($vendor, $package, $absolute = TRUE) {
  $path = FALSE;

  // Search directories (similar to libraries_get_libraries() implementation).
  $directories = [
    conf_path() . '/libraries',
    drupal_get_path('profile', drupal_get_profile()) . '/libraries',
    'sites/all/libraries',
    'libraries',
  ];

  // Variant sub-directories based on the vendor or package names.
  $variants = [
    "$vendor/$package",
    "$vendor-$package",
    $vendor . '_' . $package,
    $package,
  ];

  // Iterate over each search directory and variant.
  foreach ($directories as $key => $directory) {
    if (!is_dir($directory)) {
      unset($directories[$key]);
      continue;
    }
    foreach ($variants as $variant) {
      if (file_exists("$directory/$variant")) {
        $path = "$directory/$variant";
        break 2;
      }
    }
  }

  // Return the path, absolute if necessary.
  return $path && $absolute ? DRUPAL_ROOT . base_path() . $path : $path;
}

/******************************************************************************
 * Private utility functions.
 *****************************************************************************/

/**
 * Discovers all installed CommonMark extensions.
 *
 * This function is expensive and should only be called when building the list
 * of extensions to cache. Use instead commonmark_get_extension().
 *
 * @return array
 *   An associative array of installed extensions defined by
 *   hook_commonmark_extension_info(), keyed by the extension's machine name.
 *
 * @see commonmark_get_extensions()
 * @see commonmark_get_extension_info()
 */
function _commonmark_discover_extensions() {
  $extensions = [];

  // Map the CommonMark interfaces with the appropriate environment
  // methods that should be invoked.
  $extension_types = [
    'League\CommonMark\Block\Parser\BlockParserInterface' => 'addBlockParser',
    'League\CommonMark\Block\Renderer\BlockRendererInterface' => 'addBlockRenderer',
    'League\CommonMark\Extension\ExtensionInterface' => 'addExtension',
    'League\CommonMark\Inline\Parser\InlineParserInterface' => 'addInlineParser',
    'League\CommonMark\Inline\Processor\InlineProcessorInterface' => 'addInlineProcessor',
    'League\CommonMark\Inline\Renderer\InlineRendererInterface' => 'addInlineRenderer',
  ];

  $hook = 'commonmark_extension_info';
  foreach (module_implements($hook) as $module) {
    $results = module_invoke($module, $hook);
    // Iterate over each hook info definition and verify that it contains
    // a valid CommonMark extension.
    foreach ($results as $name => $info) {
      // Provide defaults.
      $info += [
        'class' => [],
        'class arguments' => [],
        'class arguments callback' => FALSE,
        'description' => NULL,
        'method' => NULL,
        'method arguments' => [Environment::EXTENSION_INSTANCE_PLACEHOLDER],
        'title' => $name,
        'settings' => [],
        'url' => NULL,
      ];

      // Explicitly set (override) values.
      $info['module'] = $module;
      $info['name'] = $name;
      $info['default settings'] = $info['settings'];
      if (!isset($info['enabled'])) {
        $info['enabled'] = TRUE;
      }

      if (!empty($info['class'])) {
        if (!is_array($info['class'])) {
          $info['class'] = [$info['class']];
        }
        foreach ($info['class'] as $index => $class) {
          // Find the first available and valid CommonMark extension class.
          if (class_exists($class) && ($implementations = class_implements($class))) {
            foreach ($extension_types as $interface => $method) {
              if (in_array($interface, $implementations)) {
                $info['class'] = $class;
                $info['method'] = $method;
                $info['type'] = preg_replace('/^add/', '', $method);
                break;
              }

              // Otherwise remove this class from the list.
              unset($info['class'][$index]);
            }
          }
        }
      }

      // Only add the extension it has a valid class and environment method
      // to invoke.
      if (!empty($info['class']) && !empty($info['method'])) {
        $extensions[$name] = $info;
      }
    }
  }

  // Allow modules to alter the extensions.
  drupal_alter($hook, $extensions);

  return $extensions;
}

/**
 * Retrieves the ancestry of the extension in a form/render array.
 *
 * @param object $filter
 *   An object representing an active filter.
 * @param array $extension
 *   The extension information array (from a hook_commonmark_extension_info()
 *   definition).
 * @param string $container
 *   The container name. Can be either "enabled" or "settings". Defaults to
 *   "enabled".
 *
 * @return string
 *   The selector path of the extension.
 */
function _commonmark_get_form_parents($filter = NULL, array $extension = NULL, $container = 'enabled') {
  $parents = [];
  if (isset($filter)) {
    $parents = ['filters', 'commonmark', 'settings'];
  }
  $parents[] = 'commonmark_extensions';
  if (isset($container)) {
    $parents[] = $container;
  }
  if (isset($extension)) {
    $parents[] = $extension['name'];
  }
  return $parents;
}

/**
 * Retrieves a states selector to use based on the form/render array parents.
 *
 * This is really only useful if using the States API (or something similar)
 *
 * @param object $filter
 *   An object representing an active filter.
 * @param array $extension
 *   The extension information array (from a hook_commonmark_extension_info()
 *   definition).
 * @param string $name
 *   (Optional) The setting name to append to the selector.
 * @param string $container
 *   The container name. Can be either "enabled" or "settings". Defaults to
 *   "settings".
 *
 * @return string
 *   The selector path of the extension.
 */
function _commonmark_get_states_selector($filter = NULL, array $extension = NULL, $name = NULL, $container = 'settings') {
  $parents = _commonmark_get_form_parents($filter, $extension, $container);
  if (isset($name)) {
    $parents[] = $name;
  }
  $first = array_shift($parents);
  return ':input[name="' . $first . '[' . implode('][', $parents) . ']"]';
}
