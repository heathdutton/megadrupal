<?php
/**
 * @file
 *  Defines the various fields and instances controlled by the media_nivo_slider module.
 */

/**
 * Implements hook_install().
 */
function media_nivo_slider_install() {
  foreach (_media_nivo_slider_controlled_fields() as $field) {
    field_create_field($field);
  }
  
  foreach (_media_nivo_slider_controlled_instances() as $instance) {
    field_create_instance($instance);
  }
  
  // Set the module weight to be heavier than media_gallery
  $result = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', 'media_gallery')
    ->execute();
  $weight = $result->fetch()->weight;

  db_update('system')
    ->fields(array('weight' => $weight + 1))
    ->condition('name', 'media_nivo_slider')
    ->execute();
  
  
  // Create default config.
  $default = array(
    'name' => 'default',
    'settings' => array(
      'transition' => 'random',
      'transition_speed' => 500,
      'pause_length' => 3000,
      'slices' => 15,
      'box_columns' => 8,
      'box_rows' => 4,
      'start_slide' => 0,
      'random_start' => 0,
      'pause_slideshow' => 0,
      'image_style' => '_none',
      'slider_theme' => 'default',
      'ribbon' => 0,
      'caption_opacity' => 0.8,
      'direction_nav' => 1,
      'direction_nav_hide' => 1,
      'direction_nav_prev_txt' => 'Prev',
      'direction_nav_next_txt' => 'Next',
      'control_nav' => 1,
      'control_nav_thumbs' => 0,
      'control_nav_rel' => 0,
      'control_nav_search' => '.jpg',
      'control_nav_replace' => '_thumb.jpg',
      'keyboard_nav' => 1,
      'manual_advance' => 0,
      'before_change' => '',
      'after_change' => '',
      'slideshow_end' => '',
      'last_slide' => '',
      'after_load' => '',
    ),
  );
  
  // Save the DB record.
  drupal_write_record('media_nivo_slider', $default);
}

/**
 * Implements hook_uninstall().
 */
function media_nivo_slider_uninstall() {

  // Remove the media_nivo_slider controlled fields
  foreach (array_keys(_media_nivo_slider_controlled_fields()) as $field) {
    field_delete_field($field);
  }

  // Remove the media_nivo_slider controlled instances
  $instances = _media_nivo_slider_controlled_instances();
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }
}

/**
 * Implements hook_schema().
 */
function media_nivo_slider_schema() {
  $schema['media_nivo_slider'] = array(
    'description' => 'Stores Media Nivo Slider configurations.', 
    'fields' => array(
      'cid' => array(
        'description' => 'The primary identifier for a configuraiton.', 
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The name of this configuration.', 
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE, 
        'default' => '',
      ),
      'settings' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized configuration parameters.',
      ),
    ),
    'primary key' => array('cid'),
  );
  return $schema;
}

function _media_nivo_slider_controlled_fields() {
  $fields = array(
    // Media Gallery fields
    'media_nivo_slider_block' => array(
      'field_name' => 'media_nivo_slider_block',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_boolean',
      'settings' => array(
        'allowed_values_function' => '_media_nivo_slider_get_block_values',
      ),
    ),
    'media_nivo_slider_config' => array(
      'field_name' => 'media_nivo_slider_config',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_text',
      'settings' => array(
        'allowed_values_function' => '_media_nivo_slider_get_configs',
      ),
    ),
    
    // Image fields
    'media_nivo_slider_image_caption' => array(
      'field_name' => 'media_nivo_slider_image_caption',
      'translatable' => TRUE,
      'locked' => TRUE,
      'type' => 'text_long'
    ),
    'media_nivo_slider_image_link' => array(
      'field_name' => 'media_nivo_slider_image_link',
      'translatable' => TRUE,
      'locked' => TRUE,
      'type' => 'text'
    ),
);

  return $fields;
}

function _media_nivo_slider_controlled_instances() {
  $t = get_t();
  $instances = array(
    // Media Gallery instances
    'media_nivo_slider_block' => array(
      'field_name' => 'media_nivo_slider_block',
      'label' => $t('Create a Nivo Slider block for this gallery'),
      'default_value' => array(array('value' => 0)),
      'widget' => array(
        'type' => 'options_onoff',
      ),
      'entity_type' => 'node',
      'bundle' => 'media_gallery',
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    'media_nivo_slider_config' => array(
      'field_name' => 'media_nivo_slider_config',
      'label' => $t('Nivo Slider Preset'),
      'description' => $t('The Nivo Slider preset to use for this slider.'),
      'widget' => array(
        'type' => 'options_select',
      ),
      'required' => FALSE,
      'entity_type' => 'node',
      'bundle' => 'media_gallery',
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),

    // Image instances
    'media_nivo_slider_image_caption' => array(
      'field_name' => 'media_nivo_slider_image_caption',
      'label' => $t('Nivo Slider Caption'),
      'required' => FALSE,
      'entity_type' => 'file',
      'bundle' => 'image',
      'widget' => array(
        'type' => 'text_textarea',
        'settings' => array('rows' => 4),
      ),
      'settings' => array(
        'text_processing' => 1,
      ),
      'description' => $t('Set a caption to be displayed on this image when used in a Nivo Slider block.'),
      'display' => array(
        'default' => array('type' => 'hidden'),
        'media_gallery_thumbnail' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_lightbox' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_detail' => array('type' => 'text_default', 'label' => 'hidden'),
      ),
    ),
    
    'media_nivo_slider_image_link' => array(
      'field_name' => 'media_nivo_slider_image_link',
      'label' => $t('Nivo Slider Link'),
      'required' => FALSE,
      'entity_type' => 'file',
      'bundle' => 'image',
      'description' => $t('Set a link that will wrap this image when used in a Nivo Slider block.'),
      'display' => array(
        'default' => array('type' => 'hidden'),
        'media_gallery_thumbnail' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_lightbox' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_detail' => array('type' => 'text_default', 'label' => 'hidden'),
      ),
    ),
  );
  
  return $instances;
}

/**
 * Migrate from v1 of Media Nivo Slider.
 */
function media_nivo_slider_update_7200(&$sandbox) {
  // Check if we already have the new schema style installed.
  if (!db_table_exists('media_nivo_slider')) {
    // Check the system table for the schema version of the installed module.
    // This way we can better accomodate users upgrading from older releases of v1.
    $result = db_select('system', 's')
      ->fields('s', array('schema_version'))
      ->condition('name', 'media_nivo_slider')
      ->execute();
    $schema = $result->fetch()->weight;

    // If we don't have the new schema install it.
    drupal_install_schema('media_nivo_slider');

    // Create the new config preset field and instance.
    $fields = _media_nivo_slider_controlled_fields();
    $instances = _media_nivo_slider_controlled_instances();
    field_create_field($fields['media_nivo_slider_config']);
    field_create_instance($instances['media_nivo_slider_config']);

    // Create default config.
    $default_settings = array(
      'transition' => 'random',
      'transition_speed' => 500,
      'pause_length' => 3000,
      'slices' => 15,
      'box_columns' => 8,
      'box_rows' => 4,
      'start_slide' => 0,
      'random_start' => 0,
      'pause_slideshow' => 0,
      'image_style' => '_none',
      'slider_theme' => 'default',
      'ribbon' => 0,
      'caption_opacity' => 0.8,
      'direction_nav' => 1,
      'direction_nav_hide' => 1,
      'direction_nav_prev_txt' => 'Prev',
      'direction_nav_next_txt' => 'Next',
      'control_nav' => 1,
      'control_nav_thumbs' => 0,
      'control_nav_rel' => 0,
      'control_nav_search' => '.jpg',
      'control_nav_replace' => '_thumb.jpg',
      'keyboard_nav' => 1,
      'manual_advance' => 0,
      'before_change' => '',
      'after_change' => '',
      'slideshow_end' => '',
      'last_slide' => '',
      'after_load' => '',
    );

    $default = array(
      'name' => 'default',
      'settings' => $default_settings,
    );
    
    // Save the DB record.
    drupal_write_record('media_nivo_slider', $default);

    // Get all the media nivo slider enabled content.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'media_gallery');
    $query->fieldCondition('media_nivo_slider_block', 'value', 1);
    $result = $query->execute();
    
    // If there are nodes with nivo slider enabled load them and create a preset for each block.
    if (!empty($result['node'])) {
      $nodes = node_load_multiple(array_keys($result['node']));

      // Iterate through the nodes and build presets for each, then assign preset to the node.
      foreach ($nodes as $n) {
        $new_config = array(
          'name' => $n->title,
          'settings' => $default_settings,
        );

        // Use the node slider settings to create the preset settings.
        $new_config['settings']['transition'] = $n->media_nivo_slider_effect[LANGUAGE_NONE][0]['value'];
        $new_config['settings']['transition_speed'] = $n->media_nivo_slider_speed[LANGUAGE_NONE][0]['value'];
        $new_config['settings']['pause_length'] = $n->media_nivo_slider_pause_time[LANGUAGE_NONE][0]['value'];
        $new_config['settings']['slices'] = $n->media_nivo_slider_slices[LANGUAGE_NONE][0]['value'];
        $new_config['settings']['pause_slideshow'] = $n->media_nivo_slider_hover_pause[LANGUAGE_NONE][0]['value'];
        $new_config['settings']['caption_opacity'] = $n->media_nivo_slider_cap_opacity[LANGUAGE_NONE][0]['value'];
        $new_config['settings']['control_nav'] = FALSE;

        if ($schema >= 7100) {
          $new_config['settings']['box_columns'] = $n->media_nivo_slider_box_cols[LANGUAGE_NONE][0]['value'];
          $new_config['settings']['box_rows'] = $n->media_nivo_slider_box_rows[LANGUAGE_NONE][0]['value'];
        }

        if ($schema >= 7101) {
          $new_config['settings']['ribbon'] = $n->media_nivo_slider_ribbon[LANGUAGE_NONE][0]['value'];
          $new_config['settings']['slider_theme'] = $n->media_nivo_slider_theme[LANGUAGE_NONE][0]['value'];
        }

        // Save the configuration.
        drupal_write_record('media_nivo_slider', $new_config);

        // Update the node to use the new preset.
        $n->media_nivo_slider_config[LANGUAGE_NONE][0]['value'] = $new_config['cid'];
        node_save($n);
      }
    }
    
    // Delete the v1.x fields that are no longer needed.
    $deprec_fields = array(
      'media_nivo_slider_image_style',
      'media_nivo_slider_effect',
      'media_nivo_slider_speed',
      'media_nivo_slider_pause_time',
      'media_nivo_slider_slices',
      'media_nivo_slider_hover_pause',
      'media_nivo_slider_cap_opacity',
    );

    if ($schema >= 7100) {
      $deprec_fields[] = 'media_nivo_slider_box_cols';
      $deprec_fields[] = 'media_nivo_slider_box_rows';
    }

    if ($schema >= 7101) {
      $deprec_fields[] = 'media_nivo_slider_theme';
      $deprec_fields[] = 'media_nivo_slider_ribbon';
    }

    foreach ($deprec_fields as $field_name) {
      field_delete_field($field_name);
    }
  }
}

/**
 * Create the image field instances if they don't exist.
 */
function media_nivo_slider_update_7201(&$sandbox) {
  // Get the list of instances controlled by Media Nivo Slider.
  $instances = _media_nivo_slider_controlled_instances();

  // Check for the image caption instance and create it if it doesn't exist.
  $query = 'SELECT COUNT(*) FROM {field_config_instance} i WHERE i.deleted = :deleted AND i.entity_type = :entity_type AND i.bundle = :bundle AND i.field_name = :field_name';
  $result = db_query($query, array(':deleted' => 0, ':entity_type' => 'file', ':bundle' => 'image', ':field_name' => 'media_nivo_slider_image_caption'));

  if (!$result->fetchField()) {
    // Create the image link instance.
    field_create_instance($instances['media_nivo_slider_image_caption']);
  }

  // Check for the image link instance and create it if it doesn't exist.
  $query = 'SELECT COUNT(*) FROM {field_config_instance} i WHERE i.deleted = :deleted AND i.entity_type = :entity_type AND i.bundle = :bundle AND i.field_name = :field_name';
  $result = db_query($query, array(':deleted' => 0, ':entity_type' => 'file', ':bundle' => 'image', ':field_name' => 'media_nivo_slider_image_link'));

  if (!$result->fetchField()) {
    // Create the image link instance.
    field_create_instance($instances['media_nivo_slider_image_link']);
  }
}
