<?php

/**
 * @file
 * It has the functions to test the conection between the commerce site and
 * Webpay.
 */


/**
 * Amount of the order in the test.
 */
define('WEBPAY_TEST_AMOUNT', 10000.55);


/**
 * Implements hook_permission().
 */
function webpay_test_permission() {
  return array(
    'access to test webpay' => array(
      'title' => t('Access to test webpay'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function webpay_test_menu() {
  $items = array();

  $items['webpay-test'] = array(
    'title' => 'Webpay Test',
    'description' => 'Test a Webpay transaction',
    'page callback' => 'webpay_test_page',
    'access arguments' => array('access to test webpay'),
  );

  $items['webpay-test/%'] = array(
    'title callback' => 'webpay_test_title_callback',
    'title arguments' => array(1),
    'description' => 'Test a Webpay transaction for CLP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webpay_test_form', 1),
    'access arguments' => array(1),
    'access callback' => 'webpay_test_access_callback',
  );

  return $items;
}


/**
 * Access callback for the request webpay-test/%.
 * @see webpay_test_menu()
 *
 * @param string $currency
 *   Currency code: USD or CLP
 *
 * @return bool
 *   TRUE if the user has access and the currency is available. FALSE otherwise.
 */
function webpay_test_access_callback($currency) {
  if (!user_access('access to test webpay')) {
    return FALSE;
  }
  return webpay_validate_currency($currency);
}


/**
 * Title callback for the request webpay-test/%.
 * @see webpay_test_menu()
 *
 * @param string $currency
 *   Currency code: USD or CLP.
 *
 * @return string
 *   Returns page title.
 */
function webpay_test_title_callback($currency) {
  return t('Webpay Test !currency', array('!currency' => $currency));
}


/**
 * Builds the page to test Webpay.
 *
 * @return string
 *   themed test page.
 */
function webpay_test_page() {
  $webpay_settings = webpay_get_settings_kcc();
  foreach ($webpay_settings as $currency => $setting) {
    $item = t('Test on !currency', array('!currency' => $currency));
    if ($setting['webpay_ROOT_CGI'] == '') {
      $items[] = $item . ' ' . t('Disabled');
    }
    else {
      $items[] = l($item, 'webpay-test/' . $currency);
    }
  }

  return theme('item_list', array('items' => $items));
}


/**
 * Form information to test Webpay.
 *
 * @param mixed $form
 *   form element
 * @param mixed $form_state
 *   current form state
 * @param string $currency
 *   currency code.
 *
 * @return array
 *   form element
 */
function webpay_test_form($form, $form_state, $currency) {
  global $base_url;

  $amount = WEBPAY_TEST_AMOUNT;
  $order_number = 1;
  $session = 1;
  $commerce = 'webpay_commerce_test';

  $params = webpay_get_params(array(
    'amount'       => $amount,
    'currency'     => $currency,
    'order_number' => $order_number,
    'session'      => $session,
    'commerce'     => $commerce,
  ));

  $form = webpay_redirect_form($form, $form_state, $params, t('Go to Webpay'), $currency);
  $args = array(
    '!amount' => webpay_amount(WEBPAY_TEST_AMOUNT, $currency, TRUE),
    '!currency' => $currency,
  );

  $help = t('With this form you can test the conection between your server and Webpay. The amount is !currency$ !amount and the order_id will be always 1.', $args);
  $help .= t('You will see a list with the parameters required by Webpay');

  $form['information'] = array(
    '#markup' => $help,
  );

  $rows = array();
  $rows[] = array(t('Currency'), $currency);
  foreach ($params as $name => $value) {
    $rows[] = array($name, $value);
  }

  $form['params'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(t('Parameter'), t('Value')),
  );

  $form['submit']['#weight'] = 30;

  /*
   * We call the function with the currency to test the request to Webpay with
   * AJAX.
   */
  webpay_redirect_js($currency);
  $form['submit_ajax'] = array(
    '#weight' => 31,
    '#type' => 'submit',
    '#value' => t('Go to Webpay with Ajax'),
    '#ajax' => array(
      'callback' => 'webpay_test_ajax_submit',
    ),
  );

  return $form;
}


/**
 * Ajax Callback.
 *
 * Invokes webpayRedirect sending form values as parameters.
 *
 * @param array $form
 *   form element
 * @param array $form_state
 *   current form state
 *
 * @return array
 *   ajax command
 */
function webpay_test_ajax_submit($form, $form_state) {

  $vals = array($form_state['values']);
  /* waiting message */
  $msg = t('Redirecting to Webpay, Please wait...');
  $html = '<div class="messages status">' . $msg . '</div>';
  $commands[] = ajax_command_prepend('#webpay-test-form', $html);
  $commands[] = ajax_command_invoke(NULL, 'webpayRedirect', $vals);

  return array('#type' => 'ajax', '#commands' => $commands);
}


/**
 * Implements hook_webpay_commerce_system().
 */
function webpay_test_webpay_commerce_system() {
  $info = array();
  $params = array('!url' => url('webpay-test'));
  $t = t('You can test your conection with Webpay <a href="!url">here</a>', $params);
  $info['webpay_commerce_test'] = array(
    'title'              => 'Webpay Test',
    'description'        => $t,
    'success'            => 'webpay_test_success_default',
    'failure'            => 'webpay_test_failure_default',
    'close validate'     => 'webpay_test_validate_close_default',
    'order load'         => 'webpay_test_order_load_default',
    'accept transaction' => 'webpay_test_accept_transaction',
    'save transaction'   => 'webpay_test_save_transaction',
  );
  return $info;
}


/**
 * Callback for failure case.
 *
 * @param int $order_id
 *   order identifier
 * @param mixed $transaction
 *   Transaction object as Webpay response to commerce request.
 *
 * @return string
 *   themed failure page
 */
function webpay_test_failure_default($order_id, $transaction) {
  $variables = array(
    'order_id'          => $order_id,
    'redirection'       => 'webpay-test',
    'title_redirection' => t('Try again'),
  );

  return theme('webpay_failure', $variables);
}


/**
 * Callback for success case.
 *
 * @param int $order_id
 *   order identifier
 *
 * @return string
 *   themed success page
 */
function webpay_test_success_default($order_id) {
  global $user;

  $params = array('!order_number' => $order_id);
  $output = t('Payment successful for the order !order_number', $params);

  $wpay_trans = webpay_get_transaction_by_order($order_id, 'webpay_commerce_test');
  $voucher = webpay_prepare_for_voucher(array(
    'order_id'           => $order_id,
    'webpay_transaction' => $wpay_trans,
    'client_name'        => isset($user->name) ? $user->name : t('Anonymous'),
  ));

  $output .= theme('webpay_voucher', $voucher);
  $output .= '<p>' . l(t('Test webpay again'), 'webpay-test') . '</p>';

  return $output;
}


/**
 * Callback from commerce info default for order load.
 *
 * The WEBPAY_TEST_AMOUNT is loaded in the order as the order total.
 *
 * @param array $order
 *   Generic Webpay's order.
 */
function webpay_test_order_load_default(&$order) {
  $order['order_total'] = WEBPAY_TEST_AMOUNT;
}


/**
 * Callback from close validate.
 *
 * Validates the order if it was closed or it is still open.
 * On this test case, we always simulate an open order.
 *
 * @param array $order
 *   Generic Webpay's order.
 *
 * @return bool
 *   It is true in order to use
 */
function webpay_test_validate_close_default($order) {
  return TRUE;
}


/**
 * Callback from accept transaction.
 *
 * This function will be executed right after all validations. It is useful
 * to execute tasks like send an email or change the order state.
 * Because this module test does not have any orders, it is not used.
 *
 * @param array $order
 *   Generic Webpay's order.
 */
function webpay_test_accept_transaction($order) {

}


/**
 * Callback from save transaction.
 *
 * This function is executed before webpay_test_accept_transaction() and before
 * Webpay module has saved the data sended by Transbank.
 * It can be used in similar ways than the previous. Just actions, because
 * this function does not change the transaction nor return some value.
 * webpay_test_accept_transaction().
 *
 * @param array $transaction
 *   Transaction object as Webpay response to commerce request.
 */
function webpay_test_save_transaction($transaction) {

}
