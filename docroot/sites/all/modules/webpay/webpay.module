<?php

/**
 * @file
 * Webpay primary module file.
 */


/**
 * Transaction accepted by Transbank's Webpay
 */
define("WEBPAY_ACCEPTED", "ACEPTADO");


/**
 * Transaction with necessary information for Transbank's Webpay
 */
define("WEBPAY_CORRECT", "CORRECTO");


/**
 * Transaction rejected by Transbank's Webpay
 */
define("WEBPAY_REJECTED", "RECHAZADO");


/**
 * Implements of hook_permission().
 */
function webpay_permission() {
  return array(
    'webpay administer' => array(
      'title' => t('Webpay Administer'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements of hook_menu().
 */
function webpay_menu() {
  $items['webpay/close'] = array(
    'title' => 'Close',
    'access callback' => 'webpay_close_access',
    'page callback' => 'webpay_close',
    'type' => MENU_CALLBACK,
    'file' => 'webpay.pages.inc',
  );
  // Target of a successful transaction.
  $items['webpay/success'] = array(
    'title' => 'Order successful',
    'page callback' => 'webpay_success',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'webpay.pages.inc',
  );
  // Target of a failed transaction.
  $items['webpay/failure'] = array(
    'title' => 'Order failed',
    'page callback' => 'webpay_failure',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'webpay.pages.inc',
  );
  $items['admin/config/webpay'] = array(
    'title' => 'Webpay',
    'description' => 'Settings related to payment method Webpay.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('webpay administer'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/webpay/configure-basic'] = array(
    'title' => 'Basic Settings',
    'description' => 'Basics Configuration of Webpay',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webpay_configuration'),
    'access arguments' => array('webpay administer'),
    'file' => 'webpay.admin.inc',
  );

  $items['admin/config/webpay/configure-kcc'] = array(
    'title' => 'KCC Settings',
    'description' => 'Settings parameter for KCC',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webpay_configuration_kcc'),
    'access arguments' => array('webpay administer'),
    'file' => 'webpay.admin.inc',
  );
  // Log.
  $items['admin/reports/webpay'] = array(
    'title' => 'Webpay Log',
    'description' => 'Shows transactions made by Transbank',
    'page callback' => 'webpay_admin_log',
    'access arguments' => array('webpay administer'),
    'file' => 'webpay.admin.inc',
  );

  $items['admin/reports/webpay/transactions'] = array(
    'title' => 'Webpay',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/reports/webpay/debug'] = array(
    'title' => 'Webpay Debug',
    'description' => 'Debug de Webpay',
    'page callback' => 'webpay_admin_debug',
    'access arguments' => array('webpay administer'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'webpay.admin.inc',
  );

  return $items;
}


/**
 * Checks if the user has access to the closing page.
 *
 * When is redirected back from Webpay - tbk_bp_resultado.cgi.
 *
 * @return bool
 *   True if webpays access is not enabled or the same server makes the request,
 *   false otherwise.
 */
function webpay_close_access() {
  if (!variable_get('webpay_active_access', FALSE)) {
    return TRUE;
  }
  return ip_address() == $_SERVER['SERVER_ADDR'];
}


/**
 * Helper function to add javascripts.
 *
 * @param string $currency
 *   currency code to use on redirection to Webpay
 */
function webpay_redirect_js($currency) {
  $path = drupal_get_path('module', 'webpay');
  $webpay = array('actionForm' => webpay_get_action_form($currency));

  drupal_add_js($path . '/js/webpay.js');
  drupal_add_js(array('webpay' => $webpay), 'setting');
}


/**
 * Contains basic information to perform the redirection to Webpay.
 *
 * @param array $params
 *   Array of parameters that Webpay needs
 * @param string $submit_value
 *   Value for the button that triggers the request
 * @param string $currency
 *   String code for the currencies allowed by Webpay
 *    - CLP
 *    - USD
 *
 * @return array
 *   Form data
 */
function webpay_redirect_form($form, $form_state, $params, $submit_value, $currency = 'CLP') {
  $currencies = webpay_allowed_currencies();
  if (!in_array($currency, $currencies)) {
    $args = array(
      '@currency' => $currency,
    );
    drupal_set_message(t('The @currency currency is not permitted', $args));
    return $form;
  }
  $form['#action'] = webpay_get_action_form($currency);

  $form['#method'] = 'POST';
  foreach ($params as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $submit_value,
  );

  return $form;
}


/**
 * Gives the url to the script tbk_bp_pago.cgi for the choosen currency.
 *
 * @param string $currency
 *   String code for the currencies allowed by Webpay
 *    - CLP
 *    - USD
 *
 * @return string
 *   String url
 */
function webpay_get_action_form($currency) {
  $webpay_settings = webpay_get_settings_kcc();
  global $base_path;
  return $base_path . $webpay_settings[$currency]['webpay_ROOT_CGI'] . '/tbk_bp_pago.cgi';
}


/**
 * Prepares data for the form to redirect to webpay.
 *
 * @param array $params
 *   Array of parameters
 *   - amount: Amount of money to pay
 *   - order_number: order number
 *   - currency: currency of amount
 *   - commerce: Which commerce is been used
 *   - session: user's session assigned by the system
 *
 * @return array
 *   Array of parameters ready for Webpay's KCC scripts.
 */
function webpay_get_params($params) {
  $success = url('webpay/success', array('absolute' => TRUE));
  $failure = url('webpay/failure', array('absolute' => TRUE));
  $amount = webpay_amount($params['amount'], $params['currency']);
  return array(
    'TBK_TIPO_TRANSACCION' => 'TR_NORMAL',
    'TBK_MONTO'            => $amount,
    'TBK_ORDEN_COMPRA'     => $params['order_number'],
    'TBK_ID_SESION'        => $params['commerce'] . ':' . $params['session'],
    'TBK_URL_EXITO'        => $success,
    'TBK_URL_FRACASO'      => $failure,
  );
}


/**
 * Prepares data required by transbank on success page and success email.
 *
 * @param array $order
 *   It has the following keys:
 *     - order_id: order id
 *     - client_name: client name
 *     - webpay_transaction: webpay transaction id
 *     - products (optional): themed product list
 */
function webpay_prepare_for_voucher($order) {
  $webpay = $order['webpay_transaction'];

  $payment_type = webpay_payment_type($webpay->tbk_tipo_pago);
  $quota_type = $payment_type['quota_type'];
  $number_quotas = $webpay->tbk_nro_cuotas ? $webpay->tbk_nro_cuotas : '00';
  // USD currency has no quota system.
  if ($webpay->currency == 'USD') {
    $quota_type = $number_quotas = NULL;
  }

  $voucher = array(
    'order_id' => $order['order_id'],
    'client_name' => $order['client_name'],
    'commerce_url' => url('<front>', array('absolute' => TRUE)),
    'card_number' => 'XXXX-XXXX-XXXX-' . $webpay->tbk_nro_final_tarjeta,
    'authorization_code' => $webpay->tbk_cod_autorizacion,
    'transaction_type' => t('Sales'),
    'payment_type' => $payment_type['payment_type'],
    'quota_type' => $quota_type,
    'number_of_quotas' => $number_quotas,
    'transaction_date' => format_date($webpay->timestamp_transaction, 'short'),
  );
  if (isset($order['products'])) {
    $voucher['products'] = $order['products'];
  }


  return $voucher;
}


/**
 * Format the aount with 2 decimal, with no commas nor dots.
 *
 * @param numeric $amount
 *   Real amount of the order. It can be float or integer.
 *
 * @param bool $with_format
 *   Defines if the amount is returned with dots and commas or not. False by
 *   default
 *
 * @return string
 *   formated amount
 */
function webpay_amount($amount, $currency, $with_format = FALSE) {
  $amount_with_format = number_format($amount, 2);
  $new_amount = str_replace(",", "", $amount_with_format);

  if ($currency == 'CLP') {
    /*
     * CLP currency does not allow decimals, however it is requiered to add 2
     * digits to the amount. If it had the decimals, the amount shall be rounded
     * because Webpay will do it later.
     */
    $new_amount = round($new_amount);
    $amount_with_format = number_format($new_amount, 2);
    $new_amount = str_replace(",", "", $amount_with_format);
  }

  if ($with_format) {
    return number_format($new_amount, 2);
  }

  return str_replace(".", "", $new_amount);
}


/**
 * Themes a title and a table with the necessary information.
 *
 * This is a standards from Webpay
 *
 * @param array $vars
 *   variables for theme
 *
 * @return string
 *   themed voucher
 */
function theme_webpay_voucher($vars) {
  $rows = array();

  $labels = array(
    'client_name'        => t("Customer Name"),
    'commerce_url'       => t("Commerce's Url"),
    'card_number'        => t("Card Number"),
    'authorization_code' => t("Authorization Code"),
    'order_id'           => t("Order"),
    'transaction_type'   => t("Transaction Type"),
    'number_of_quotas'   => t("Number of Quotas"),
    'payment_type'       => t("Payment Type"),
    'quota_type'         => t("Type of quotas"),
    'transaction_date'   => t("Transaction date"),
    'products'           => t("Products"),
  );

  foreach ($labels as $id => $label) {
    if (isset($vars[$id])) {
      $rows[] = array(webpay_prepare_voucher_label($label), $vars[$id]);
    }
  }

  $output  = '<h2 class="title">' . t("Payment receipt") . '</h2>';
  $output .= theme('table', array('rows' => $rows));
  $refund = variable_get('webpay_devolucion_url', '');
  if ($refund != '') {
    $output .= '<div class="adicional">';
    $link_attr = array('attributes' => array('target' => '_blank'));
    $params = array('!here' => l(t("click here"), $refund, $link_attr));
    $output .= t("More information about refund !here", $params);
    $output .= '</div>';
  }

  return $output;
}


/**
 * Makes a cell for theme_table.
 *
 * @see theme_table()
 *
 * @param string $label
 *   name of the voucher field.
 *
 * @return array
 *   Structure for one cell.
 */
function webpay_prepare_voucher_label($label) {
  return array(
    'data' => $label,
    'class' => array('webpay-voucher-label'),
  );
}


/**
 * Implements hook_theme().
 */
function webpay_theme($existing, $type, $theme, $path) {
  return array(
    'webpay_voucher' => array(
      'variables' => array(
        'order_id'            => NULL,
        'client_name'         => NULL,
        'products'            => NULL,
        'commerce_url'        => NULL,
        'credit_card'         => NULL,
        'authorization_code'  => NULL,
        'transaction_type'    => t('Sales'),
        'number_of_quotas'    => NULL,
        'payment_type'        => NULL,
        'quota_type'          => NULL,
      ),
    ),
    'webpay_failure' => array(
      'variables' => array(
        'order_id'          => NULL,
        'redirection'       => '<front>',
        'title_redirection' => t('Go to home page'),
      ),
      'template' => 'webpay-failure',
      'path' => $path . '/templates',
    ),
  );
}


/**
 * Gets the absolute path to the document root.
 *
 * @return string
 *   path to document root.
 */
function webpay_document_root() {
  $absolute_dir = dirname(__FILE__);
  $relative_dir = drupal_get_path('module', 'webpay');

  $root_path = str_replace('\\', '/', substr($absolute_dir, 0, -1 * (1 + strlen($relative_dir))));
  return $root_path;
}


/**
 * Gets the settings for different currencies (those allowed).
 *
 * The allowed values are: CLP and USD.
 *
 * @return array
 *   Configuration array for each currency on KCC.
 */
function webpay_get_settings_kcc() {
  $settings = array();
  foreach (array('CLP', 'USD') as $currency) {
    $settings[$currency]['webpay_ROOT_CGI'] = variable_get('webpay_ROOT_CGI_' . $currency, '');
  }

  return $settings;
}


/**
 * Lists Webpay's enviroments.
 *
 * @return array
 *   List of Webpay's service enviroments.
 */
function webpay_get_environment() {
  return array(
    0 => array(
      'name' => t('Certification'),
      'servertra' => 'https://certificacion.webpay.cl',
      'porttra' => '6443',
    ),
    1 => array(
      'name' => t('Production'),
      'servertra' => 'https://webpay.transbank.cl',
      'porttra' => '443',
    ),
  );
}


/**
 * Given an order id, returns the transaction made.
 *
 * @param int $order_id
 *   order identifier
 * @param string $commerce
 *   The commerce system
 *
 * @return mixed
 *   If a Transaction exists for the order then returns an object with the
 *   Transaction data. Otherwise it returns boolean false.
 */
function webpay_get_transaction_by_order($order_id, $commerce) {
  $tbk_orden_compra = $order_id;
  return db_select('webpay', 'w')
    ->fields('w')
    ->condition('tbk_orden_compra', $tbk_orden_compra)
    ->condition('tbk_id_session', $commerce . ':%', 'LIKE')
    ->orderBy('wid', 'DESC')
    ->execute()
    ->fetchObject();
}


/**
 * Given an wid, returns the transaction.
 *
 * @param int $wid
 *   A transaction identifier in webpay
 *
 * @return mixed
 *   Retorna un Objeto si existe la transacción o Falso.
 */
function webpay_get_transaction($wid) {
  return db_select('webpay', 'w')
    ->fields('w')
    ->condition('wid', $wid)
    ->execute()
    ->fetchObject();
}


/**
 * Returns all transactions made.
 *
 * @param bool $pager
 *   TRUE if a pager will be used. False otherwise.
 *
 * @return array
 *   an array of Transactions.
 */
function webpay_get_all_webpay_transaction($pager = FALSE) {
  $query = db_select('webpay', 'w')
    ->fields('w')
    ->orderBy('wid', 'DESC');
  if ($pager) {
    $query = $query->extend('PagerDefault')->limit(10);
  }
  $results = $query->execute();
  $transactions = array();
  while ($result = $results->fetchObject()) {
    $transactions[] = (array) $result;
  }

  return $transactions;
}


/**
 * Fetch all KCC's log data.
 *
 * @return string
 *   HTML table
 */
function webpay_get_log() {
  $query = db_select('webpay_log', 'w')
    ->fields('w')
    ->orderBy('wlogid', 'DESC')
    ->extend('PagerDefault')->limit(10);
  $results = $query->execute();
  $rows = array();
  while ($result = $results->fetchObject()) {
    $rows[] = array(
      $result->message,
      format_date($result->time),
    );
  }
  $output = theme('table', array('rows' => $rows));
  $output .= theme('pager', array());

  return $output;
}


/**
 * Given a payment code returns the string that represents that code.
 *
 * @param string $payment_type_code
 *   payment type code, used by Webpay.
 * @param array $options
 *   An associative array of additional options, with the following elements:
 *   - 'langcode' (defaults to the current language): The language code to
 *     translate to a language other than what is used to display the page.
 *   - 'context' (defaults to the empty context): The context the source string
 *     belongs to.
 *
 * @return string
 *   Returns the equivalent text string.
 */
function webpay_payment_type($payment_type_code, array $options = array()) {
  $credit = t("Credit", array(), $options);
  switch ($payment_type_code) {
    case 'VN':
      return array(
        'payment_type' => $credit,
        'quota_type' => t("Without quotas", array(), $options),
      );
    case 'VC':
      return array(
        'payment_type' => $credit,
        'quota_type' => t("Quota normal", array(), $options),
      );
    case 'SI':
      return array(
        'payment_type' => $credit,
        'quota_type' => t("No Interest", array(), $options),
      );
    case 'S2':
      return array(
        'payment_type' => $credit,
        'quota_type' => t("No Interest", array(), $options),
      );
    case 'CI':
      return array(
        'payment_type' => $credit,
        'quota_type' => t("Commerce Quotas", array(), $options),
      );
    case 'VD':
      return array(
        'payment_type' => t("RedCompra", array(), $options),
        'quota_type' => t("Debit", array(), $options),
      );
  }
}


/**
 * Given an answer code, it returns the string that represents that code.
 *
 * @param int $cod
 *   Webpay response code.
 *
 * @return string
 *   Human readable name for the code.
 */
function webpay_tbk_answer_definition($cod) {
  switch ($cod) {
    case '0':
      return t('Transaction approved');

    case '-1':
      return t('Refusal of transaction');

    case '-2':
      return t('Retry the transaction');

    case '-3':
      return t('Error in transaction');

    case '-4':
      return t('Refusal of transaction');

    case '-5':
      return 'Rechazo por error de tasa';

    case '-6':
      return t('Exceeds maximum monthly quota');

    case '-7':
      return t('Exceeds daily limit per transaction.');

    case '-8':
      return t('Unauthorized item');

  }
}


/**
 * Registers on the watchdog the transaction made on closing page.
 *
 * @param array $items
 *   an array with text strings.
 */
function webpay_save_log($items) {
  if (!empty($items)) {
    $log = theme('item_list', array('items' => $items));
  }
  else {
    $log = t('Error');
  }
  $values = array(
    'message' => $log,
    'time' => time(),
  );
  db_insert('webpay_log')
    ->fields($values)
    ->execute();
}


/**
 * Helper function for allowed currencies.
 *
 * @return array
 *   Array of allowed currencies
 */
function webpay_allowed_currencies() {
  return array(
    'CLP',
    'USD',
  );
}


/**
 * Debug function that retrieves all $_SERVER variables.
 *
 * This information is stored in the watchdog.
 */
function webpay_debug_watchdog_server_variable() {
  $items = array();
  foreach ($_SERVER as $key => $value) {
    $items[] = $key . '=' . $value;
  }
  $items[] = 'Request Uri=' . request_uri();
  watchdog('WEBPAY', theme('item_list', array('items' => $items)));
}


/**
 * Validates if the currency is allowed.
 *
 * @param string $currency
 *   Currency code
 *
 * @return bool
 *   TRUE if it is allowed, FALSE otherwise
 */
function webpay_validate_currency($currency) {
  $webpay_settings = webpay_get_settings_kcc();

  $curr_undef = !isset($webpay_settings[$currency]['webpay_ROOT_CGI']);
  $curr_empty = TRUE;
  if (!$curr_undef) {
    $curr_empty = $webpay_settings[$currency]['webpay_ROOT_CGI'] == '';
  }

  if ($curr_undef || $curr_empty) {
    return FALSE;
  }

  return TRUE;
}
