<?php
/**
 * @file
 * league_lineup.module
 */

/**
 * Implements hook_menu.
 */

function league_lineup_menu() {
  $items=array();
  $items['league_game/%/lineup'] = array(
    'title' => t('Teams lineup'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_lineup_lineup_form', 1),
    'access arguments' => array('edit league_lineup'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 15,
  );
  $items['league_game/%/substitutions'] = array(
    'title' => t('Substitutions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_lineup_substitution_form', 1),
    'access arguments' => array('edit league_lineup'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 16,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function league_lineup_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'edit league_lineup' => array(
      'title' => t('Edit league lineup'),
      'description' => t('Create players initial lineup and substitutions for games.'),
    ),
  );
  return $permissions;  
 
}

/**
 * Callback function for admin setting.
 */
function league_lineup_lineup_form($form, &$form_state, $game_id) {
  $settings = variable_get('league_event_settings');
  $league_game = league_game_load($game_id);
  $team_a = isset($league_game->team_a) ? league_get_node_title($league_game->team_a) : 'A';
  $team_b = isset($league_game->team_b) ? league_get_node_title($league_game->team_b) : 'B';
  drupal_set_title(isset($league_game->name) ? $league_game->name : t('Edit result'));
  // Add the default field elements.
  $form = array();
  $form['#tree'] = TRUE;
  $form['team_a_id'] = array(
    '#type' => 'hidden',
    '#value' => $league_game->team_a
  );
  $form['team_b_id'] = array(
    '#type' => 'hidden',
    '#value' => $league_game->team_b
  );

  $form['group'] = array(
    '#type' => 'vertical_tabs',
  );
  $form['team_a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Team: %team', array('%team' => $team_a)),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'group',
  );
  $form['team_a']['start'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Start players %team', array('%team' => $team_a)),
    '#options' => _league_lineup_available_players($league_game->team_a),
    '#default_value' => _league_lineup_selected_players($league_game->team_a, $settings['event']['start']),
    '#multiple' => TRUE,
    '#size' => 11,
    '#required' => FALSE,
    '#empty_value' => 0,
  );
  $form['team_a']['bench'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Substitution players %team', array('%team' => $team_a)),
    '#options' => _league_lineup_available_players($league_game->team_a),
    '#default_value' => _league_lineup_selected_players($league_game->team_a, $settings['event']['bench']),
    '#multiple' => TRUE,
    '#size' => 11,
    '#required' => FALSE,
    '#empty_value' => 0,
  );
  $form['team_b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Team: %team', array('%team' => $team_b)),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'group',
  );
  $form['team_b']['start'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Start players %team', array('%team' => $team_b)),
    '#options' => _league_lineup_available_players($league_game->team_b),
    '#default_value' => _league_lineup_selected_players($league_game->team_b, $settings['event']['start']),
    '#multiple' => TRUE,
    '#size' => 11,
    '#required' => FALSE,
    '#empty_value' => 0,
  );
  $form['team_b']['bench'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Substitution players %team', array('%team' => $team_b)),
    '#options' => _league_lineup_available_players($league_game->team_b),
    '#default_value' => _league_lineup_selected_players($league_game->team_b, $settings['event']['bench']),
    '#multiple' => TRUE,
    '#size' => 11,
    '#required' => FALSE,
    '#empty_value' => 0,
  );

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save lineups'),
    '#submit' => $submit + array('league_lineup_lineup_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'league_lineup_lineup_form_validate';
  return $form;
}

/**
 * Form submit league_lineup_lineup_form
 */
function league_lineup_lineup_form_submit($form, &$form_state) {
  $settings = variable_get('league_event_settings');
  $game_id = arg(1);
  $lineups = $form_state['values'];
  league_lineup_save_lineup($game_id, $lineups['team_a_id'], $lineups['team_a']['start'], $settings['event']['start']);
  league_lineup_save_lineup($game_id, $lineups['team_a_id'], $lineups['team_a']['bench'], $settings['event']['bench']);
  league_lineup_save_lineup($game_id, $lineups['team_b_id'], $lineups['team_b']['start'], $settings['event']['start']);
  league_lineup_save_lineup($game_id, $lineups['team_b_id'], $lineups['team_b']['bench'], $settings['event']['bench']);
  drupal_set_message(t('Lineups successfully saved'));
}

/**
 * Saves lineup
 *
 * If player is already saved skip
 * If player is is not in new list delete
 */
function league_lineup_save_lineup($game_id, $team_id, $players, $type) {
  $players_in_list = _league_lineup_selected_players($team_id, $type);
  // check for players alredy saved but also in list and delete those
  $players_intersect = array_intersect($players_in_list, $players);
  league_lineup_delete_items_array($players, $players_intersect);
  league_lineup_delete_items_array($players_in_list, $players_intersect);
  // Save players not prevouosly saved
  foreach($players as $player) {
    $event = array(
      'game_id' => $game_id,
      'type' => $type,
      'team_id' => $team_id,
      'person_id' => $player,
      'points' => 1,
      'minute' => 0,
      'comment'=>''
    );
    league_event_save($event);
  }
  // Delete those players not in list anymore, good news we have the ID
  foreach($players_in_list as $id => $player) {
    league_event_delete($id);
  }
}

/**
 * Clean matches from an array
 *
 */
function league_lineup_delete_items_array(&$array1, $matches) {
  foreach($matches as $match) {
    if(($key = array_search($match, $array1)) !== false) {
      unset($array1[$key]);
    }
  }
}

/**
 * Form validations
 *
 */
function league_lineup_lineup_form_validate($form, &$form_state) {
  $lineups = $form_state['values'];
  if ($intercect = array_intersect($lineups['team_a']['start'], $lineups['team_a']['bench'])) {
    form_set_error('team_a', t('%number players appear in both start and substitution.', array('%number' => count($intercect))));
  }
  if ($intercect = array_intersect($lineups['team_b']['start'], $lineups['team_b']['bench'])) {
    form_set_error('team_b', t('%number players appear in both start and substitution.', array('%number' => count($intercect))));
  }
}

/**
 * Get list of available players, should take out selected ones
 *
 * Should take out start from bench an viceverse
 */
function _league_lineup_available_players($team_id) {
  $settings = variable_get('league_person_settings');

  $players = league_person_load_persons('all', $team_id, $settings['advanced']['player_bundle']);
  $results = array();
  foreach($players as $player) {
    $results[$player->league_person_id] = $player->name;
  }
  return $results;
}

/**
 * Get list of players selected by type
 *
 */
function _league_lineup_selected_players($team_id, $type) {
  $game_id = arg(1);
  $events = league_event_get_events(array($game_id), $team_id, $type);
  $players = array();
  foreach ($events as $event) {
    $players[$event->id] = $event->person_id;
  }
  return $players;
}

/**
 * Callback function for admin setting.
 */
function league_lineup_substitution_form($form, &$form_state, $game_id) {
  $settings = variable_get('league_event_settings');
  $league_game = league_game_load($game_id);
  $team_a = isset($league_game->team_a) ? league_get_node_title($league_game->team_a) : 'A';
  $team_b = isset($league_game->team_b) ? league_get_node_title($league_game->team_b) : 'B';
  drupal_set_title(isset($league_game->name) ? $league_game->name : t('Edit result'));
  // Add the default field elements.
  $form = array();
  $form['#tree'] = TRUE;

  $form['team'] = array(
    '#type' => 'select',
    '#title' => t('Team for substitution'),
    '#options' => array($league_game->team_a => $team_a, $league_game->team_b => $team_b),
    '#default_value' => $league_game->team_a,
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'league_lineup_substitution_callback',
      'wrapper' => 'league_player_substitution',
      'effect' => 'fade',
    ),
  );
  $selected = isset($form_state['values']['team']) ? $form_state['values']['team'] : $league_game->team_a;
  $form['player'] = array(
    '#type' => 'fieldset',
    '#title' => t('Player information'),
    '#description' => t('Only players registered on start up and bench will be available for substitutions'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="league_player_substitution">',
    '#suffix' => '</div>',
  );
  $form['player']['out'] = array(
    '#type' => 'select',
    '#title' => t('Player out'),
    '#options' => _league_lineup_players_by_status($selected, $game_id),
    '#default_value' => 0,
    '#required' => FALSE,
    '#empty_value' => 0,
    '#required' => TRUE,
  );
  $form['player']['in'] = array(
    '#type' => 'select',
    '#title' => t('Player in'),
    '#options' => _league_lineup_players_by_status($selected, $game_id, FALSE),
    '#default_value' => 0,
    '#required' => FALSE,
    '#empty_value' => 0,
    '#required' => TRUE,
  );
  $form['minute'] = array(
    '#type' => 'textfield',
    '#title' => t('Minute of the subtitution'),
    '#default_value' => 0,
    '#size' => 6,
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save substitution'),
    '#submit' => $submit + array('league_lineup_substitution_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'league_lineup_substitution_form_validate';
  return $form;
}

function league_lineup_substitution_callback($form, $form_state) {
  return  $form['player'];
}

/**
 * Form validations
 *
 */
function league_lineup_substitution_form_validate($form, &$form_state) {
  $lineups = $form_state['values'];
  if (!is_numeric ($lineups['minute'])) {
    form_set_error('minute', t('Minute must be a positive numeric value.'));
  }
  elseif (!($lineups['minute']>0)) {
    form_set_error('minute', t('Minute must be a positive numeric value.'));
  }
}


/**
 * Form submit league_lineup_substitution_form
 */
function league_lineup_substitution_form_submit($form, &$form_state) {
  $settings = variable_get('league_event_settings');
  $game_id = arg(1);
  $substitutions = $form_state['values'];
  $event = array(
    'game_id' => $game_id,
    'type' => $settings['event']['in'],
    'team_id' => $substitutions['team'],
    'person_id' => $substitutions['player']['in'],
    'points' => 1,
    'minute' => $substitutions['minute'],
    'comment'=>''
  );
  league_event_save($event);
  $event = array(
    'game_id' => $game_id,
    'type' => $settings['event']['out'],
    'team_id' => $substitutions['team'],
    'person_id' => $substitutions['player']['out'],
    'points' => 1,
    'minute' => $substitutions['minute'],
    'comment'=>''
  );
  league_event_save($event);
  drupal_set_message(t('Substitution successfully saved'));
}

/**
 * Get list of available players, should take out selected ones
 *
 * Should take out start from bench an viceverse
 */
function _league_lineup_players_by_status($team_id, $gid, $in_field = TRUE) {
  $in_game_players = league_event_players_on_field($gid);
  $players = league_person_load_multiple(array_keys($in_game_players));
  $results = array();
  foreach($in_game_players as $key => $in_game_player) {
    if ($in_game_player['team_id'] == $team_id) {
      if ($in_field) {
        if ($in_game_player['is_in']) {
          $results[$key] = $players[$key]->name;
        }
      }
      else {
        if (!$in_game_player['is_in']) {
          // Substituted player cannot reenter
          if (!$in_game_player['out']) {
            $results[$key] = $players[$key]->name;
          }
        }
      }
    }
  }
  return $results;
}

/**
 * Return an array of players on field
 *
 * [player_id] = array(
 *     'team_id' => $id, 
 *     'initial' => TRUE/FALSE, 
 *     'is_in' = TRUE/FALSE
 *   );
 */
function league_event_players_on_field($gid) {
  $settings = variable_get('league_event_settings');
  $types = array($settings['event']['start'], $settings['event']['bench'], $settings['event']['in'], $settings['event']['out']);
  $events = db_select('league_event', 'e')
      ->fields('e', array('person_id', 'team_id', 'minute', 'type'))
      ->condition('e.game_id', $gid, '=')
      ->condition('e.type', $types, 'IN')
      ->orderBy('e.minute')
      ->execute()
      ->fetchAll();
  $i = 0;
  $result = array();
  foreach ($events as $event) {
    unset($is_in);
    unset($initial);
    unset($out);
    if (isset($result[$event->person_id])) {
      $initial = $result[$event->person_id]['initial'];
      $is_in = $result[$event->person_id]['is_in'];
      $out = $result[$event->person_id]['out'];
    }
    switch ($event->type) {
      case $settings['event']['start']:
        $initial = TRUE;
        $is_in = isset($is_in) ? $is_in : TRUE;
        break;
      case $settings['event']['bench']:
        $initial = FALSE;
        break;
      case $settings['event']['in']:
        $is_in = TRUE;
        break;
      case $settings['event']['out']:
        $is_in = FALSE;
        $out = TRUE;
        break;
    }
    $result[$event->person_id] = array(
      'team_id' => $event->team_id,
      'initial' => isset($initial) ? $initial : TRUE,
      'is_in' => isset($is_in) ? $is_in : FALSE,
      'out' => isset($out) ? $out : FALSE,
    );
  }
  return $result;
}