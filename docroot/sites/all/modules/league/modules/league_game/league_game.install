<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */

/**
 * Default settings storage.
 */
function _league_game_defaults() {
  return array(
    'general' => array(
      'activate_path' => 1,
      'path_alias' => 'game',
    ),
    'ajax' => array(
      'active' => 0,
      'interval' => 60000,
      'cache' => 20000,
    ),
    'advanced' => array(
      'game_bundle' => 'match',
      'stadium_bundle' => 'stadium',
      'matchday_bundle' => 'matchday',
    ),
  );
}

/**
 * Implementation of hook_install().
 * This will create our system variable defaults.
 * The benefit is that we do not need to pass defaults
 * to variable_get(), which allows centralization of defaults.
 */
function league_game_install() {
  variable_set('league_game_settings', _league_game_defaults());
}

/**
 * Implementation of hook_uninstall().
 * Only clears our variables, so a fresh installation can repopulate them.
 */
function league_game_uninstall() {
  // Settings.
  variable_del('league_game_settings');
}

/**
 * Implements hook_schema().
 */
function league_game_schema() {
  $schema = array();

  $schema['league_game'] = array(
    'description' => 'The base table for league_game entities.',
    'fields' => array(
      'league_game_id' => array(
        'description' => 'Primary Key: Identifier for a league_game.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user that creates the league_game.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The {league_game_type}.type of this league_game.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The language of the league_game.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the league_game - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'matchday' => array(
        'description' => 'The matchday the game belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'match_winner' => array(
        'description' => 'The winner team match destination.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'match_winner_pos' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The position A/B of winner on next match.',
        'default' => 0,
      ),
      'match_losser' => array(
        'description' => 'The looser team match destination.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'match_looser_pos' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The position A/B of looser on next match.',
        'default' => 0,
      ),
      'stadium' => array(
        'description' => 'The stadium where the match will be held.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'date' => array(
        'description' => 'The Unix time for the league_game.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'team_a' => array(
        'description' => 'Team A.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'team_b' => array(
        'description' => 'Team B.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'score_a' => array(
        'description' => 'Score Team A.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'score_b' => array(
        'description' => 'Score Team B.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'partial_score_a' => array(
        'description' => 'Score per period Team A.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
      'partial_score_b' => array(
        'description' => 'Score per period Team B.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
      'points_a' => array(
        'description' => 'Points Team A.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'points_b' => array(
        'description' => 'Points Team B.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'body' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Description of the game.',
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The {filter_format}.format of the body.',
      ),
      'attendance' => array(
        'description' => 'Attendance to stadium.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'override' => array(
        'description' => 'Override game score.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'override_score_a' => array(
        'description' => 'Override score Team A.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'override_score_b' => array(
        'description' => 'Override score Team B.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'override_points_a' => array(
        'description' => 'Override points Team A.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'override_points_b' => array(
        'description' => 'Override points Team B.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'override_reason' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Description of the override.',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the league_game was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the league_game was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
      'status' => array(
        'description' => 'If the game is pending, live or closed.',
        'type' => 'int',
        'default' => 0,
        'not null' => FALSE,
      )
    ),
    'primary key' => array('league_game_id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['league_game_type'] = array(
    'description' => 'Stores information about defined league_game types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique league_game type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this league_game type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this league_game type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this league_game type in relation to others.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Rename destination field, drop series field 
 * change score per1 a field.
 */
function league_game_update_7007() {

  db_change_field('league_game', 'matchday_origin_a', 'match_winner', array(
      'description' => 'The winner team match destination.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    )
  );
  db_change_field('league_game', 'matchday_origin_b', 'match_losser', array(
      'description' => 'The looser team match destination.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    )
  );
  db_change_field('league_game', 'score_per1_a', 'partial_score_a', array(
      'description' => 'Score per period Team A.',
      'type' => 'blob',
      'not null' => FALSE,
    )
  );
  db_change_field('league_game', 'score_per1_b', 'partial_score_b', array(
      'description' => 'Score per period Team B.',
      'type' => 'blob',
      'not null' => FALSE,
    )
  );
   db_drop_field('league_game', 'series');
}

/**
 * Change body field for league_game
 */
function league_game_update_7008() {
  db_change_field('league_game', 'body', 'body', array(
      'type' => 'text',
      'not null' => FALSE,
      'size' => 'big',
      'description' => 'Description of the game.',
    )
  );
}

/**
 * Add format field for league_game
 */
function league_game_update_7020() {
  db_add_field('league_game', 'format', array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'description' => 'The {filter_format}.format of the body.',
    )
  );
}

/**
 * Add game destination fields for league_game
 */
function league_game_update_7021() {
  db_add_field('league_game', 'match_winner_pos', array(
      'type' => 'int',
      'not null' => FALSE,
      'description' => 'The position A/B of winner on next match.',
      'default' => 0,
    )
  );
  db_add_field('league_game', 'match_looser_pos', array(
      'type' => 'int',
      'not null' => FALSE,
      'description' => 'The position A/B of looser on next match.',
      'default' => 0,
    )
  );
}
