<?php

/**
 * @file
 * Module for the LeagueGame Entity - a starting point to create your own Entity
 * and associated administration interface
 */  

/**
 * Implements hook_init().
 */

function league_game_init() {
  $settings = variable_get('league_game_settings');
  $module_path = drupal_get_path('module', 'league_game');
  drupal_add_css($module_path . '/league_game.css');
  drupal_add_js(array(
    'league_game' => array('interval' => $settings['ajax']['interval'], 'cache' => $settings['ajax']['cache'])
  ), 'setting');
  drupal_add_js($module_path . '/league_game.js');
}

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function league_game_entity_info() {
  $return['league_game'] = array(
    'label' => t('League Game'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'LeagueGame',
    'controller class' => 'LeagueGameController',
    'base table' => 'league_game',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'league_game_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the league_game types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'league_game_create',
    'access callback' => 'league_game_access',
    'module' => 'league_game',
    // The information below is used by the LeagueGameUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/league_games',
      'file' => 'league_game.admin.inc',
      'controller class' => 'LeagueGameUIController',
      'menu wildcard' => '%league_game',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['league_game_type'] = array(
    'label' => t('League Game Type'),
    'entity class' => 'LeagueGameType',
    'controller class' => 'LeagueGameTypeController',
    'base table' => 'league_game_type',
    'fieldable' => FALSE,
    'bundle of' => 'league_game',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'league_game_type_access',
    'module' => 'league_game',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/league_game_types',
      'file' => 'league_game_type.admin.inc',
      'controller class' => 'LeagueGameTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the league_game types via a hook to avoid a recursion
 * issue as loading the league_game types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function league_game_entity_info_alter(&$entity_info) {
  foreach (league_game_get_types() as $type => $info) {
    $entity_info['league_game']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/league_game_types/manage/%league_game_type',
        'real path' => 'admin/structure/league_game_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer league_game types'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 */
function league_game_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer league_game types' => array(
      'title' => t('Administer league_game types'),
      'description' => t('Create and delete fields for league_game types, and set their permissions.'),
    ),
    'administer league_games' => array(
      'title' => t('Administer league_games'),
      'description' => t('Edit and delete all league_games'),
    ),  
    'access league_game overview page' => array(
      'title' => t('Access league_games overview page'),
      'description' => t('Grant access to view all games in content'),
    ),  
  );
  
  //Generate permissions per league_game 
  foreach (league_game_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "create any $type_name league_game" => array(
        'title' => t('%type_name: Create league_game', array('%type_name' => $type->label)),
      ),
      "edit any $type_name league_game" => array(
        'title' => t('%type_name: Edit any league_game', array('%type_name' => $type->label)),
      ),
      "delete any $type_name league_game" => array(
        'title' => t('%type_name: Delete any league_game', array('%type_name' => $type->label)),
      ),
      "view any $type_name league_game" => array(
        'title' => t('%type_name: View any league_game', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a league_game.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $league_game
 *   Optionally a league_game or a league_game type to check access for. If nothing is
 *   given, access for all league_games is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function league_game_access($op, $league_game = NULL, $account = NULL) {
  if (user_access('administer league_games', $account)) {
    return TRUE;
  }

  // Allow modules to grant / deny access.
  $access = module_invoke_all('league_game_access', $op, $league_game, $account);

  // Only grant access if at least one module granted access and no one denied
  // access.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_league_game_access().
 */
function league_game_league_game_access($op, $league_game = NULL, $account = NULL) {
  $access = FALSE;
  if (isset($league_game)) {
    switch ($op) {
      case 'create':
        $type_name = $league_game;
        $access = user_access("$op any $type_name league_game", $account);
        break;
      case 'view':
        $type_name = $league_game->type;
        $access = user_access("$op any $type_name league_game", $account);
        break;
      case 'edit':
        $type_name = $league_game->type;
        $access = user_access("$op any $type_name league_game", $account);
        break;
      case 'edit result':
        $type_name = $league_game->type;
        $access = user_access("$op any $type_name league_game", $account);
        break;
      case 'delete':
        $type_name = $league_game->type;
        $access = user_access("$op any $type_name league_game", $account);
        break;
    }
    if ($access) {return $access;}
  } 
  // Check if permission to create any type of league_game
  elseif ($op == 'create') {
    foreach (league_game_get_types() as $type) {
      $type_name = check_plain($type->type);
      $access = user_access("$op any $type_name league_game", $account);
      if ($access) {return $access;}
    }
  }
  // Do not explicitly deny access so others may still grant access.
}

/**
 * Access callback for the entity API.
 */
function league_game_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer league_game types', $account);
}


/**
 * Gets an array of all league_game types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return LeagueGameType[]
 *   Depending whether $type isset, an array of league_game types or a single one.
 */
function league_game_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our league_game entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('league_game_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a league_game type by string.
 *
 * @param $type
 *   The machine-readable name of a league_game type to load.
 * @return
 *   A league_game type array or FALSE if $type does not exist.
 */
function league_game_type_load($type) {
  return league_game_get_types($type);
}


/**
 * Fetch a league_game object. Make sure that the wildcard you choose 
 * in the league_game entity definition fits the function name here.
 *
 * @param $league_game_id
 *   Integer specifying the league_game id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $league_game object or FALSE if it cannot be loaded.
 *
 * @see league_game_load_multiple()
 */
function league_game_load($league_game_id, $reset = FALSE) {
  $league_games = league_game_load_multiple(array($league_game_id), array(), $reset);
  return reset($league_games);
}


/**
 * Load multiple league_games based on certain conditions.
 *
 * @param $league_game_ids
 *   An array of league_game IDs.
 * @param $conditions
 *   An array of conditions to match against the {league_game} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of league_game objects, indexed by league_game_id.
 *
 * @see entity_load()
 * @see league_game_load()
 */
function league_game_load_multiple($league_game_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('league_game', $league_game_ids, $conditions, $reset);
}


/**
 * Deletes a league_game.
 */
function league_game_delete(LeagueGame $league_game) {
  $uri = league_game_uri($league_game);
  path_delete($uri['path']);
  drupal_alter('league_game_delete', $league_game);
  $league_game->delete();
}


/**
 * Delete multiple league_games.
 *
 * @param $league_game_ids
 *   An array of league_game IDs.
 */
function league_game_delete_multiple(array $league_game_ids) {
  entity_get_controller('league_game')->delete($league_game_ids);
}


/**
 * Create a league_game object.
 */
function league_game_create($values = array()) {
  return entity_get_controller('league_game')->create($values);
}


/**
 * Saves a league_game to the database.
 *
 * @param $league_game
 *   The league_game object.
 */
function league_game_save(LeagueGame $league_game) {
  drupal_alter('league_game_save', $league_game);
  if($league_game->save()) {
    drupal_alter('league_game_saved', $league_game);
    return TRUE;
  }
  return FALSE;
}

/**
 * Saves a league_game type to the db.
 */
function league_game_type_save(LeagueGameType $type) {
  $type->save();
}


/**
 * Deletes a league_game type from the db.
 */
function league_game_type_delete(LeagueGameType $type) {
  $type->delete();
}


/**
 * URI callback for league_games
 */
function league_game_uri(LeagueGame $league_game){
  return array(
    'path' => 'league_game/' . $league_game->league_game_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function league_game_page_title(LeagueGame $league_game){
  return $league_game->name;
}


/**
 * Sets up content to show an individual league_game
 * @todo - get rid of drupal_set_title();
 */
function league_game_page_view($league_game, $view_mode = 'full') {    
  $controller = entity_get_controller('league_game');  
  $content = $controller->view(array($league_game->league_game_id => $league_game));
  drupal_set_title($league_game->name);
  return $content;
}

/**
 * Implements hook_rdf_mapping().
 */
function league_game_rdf_mapping() {
  return array(
    array(
      'type' => 'league_game',
      'bundle' => RDF_DEFAULT_BUNDLE,
      'mapping' => array(
        'rdftype' => array('sioc:Item', 'foaf:Document'),
        'name' => array(
          'predicates' => array('dc:title'),
        ),
        'created' => array(
          'predicates' => array('dc:date', 'dc:created'),
          'datatype' => 'xsd:dateTime',
          'callback' => 'date_iso8601',
        ),
        'changed' => array(
          'predicates' => array('dc:modified'),
          'datatype' => 'xsd:dateTime',
          'callback' => 'date_iso8601',
        ),
        'body' => array(
          'predicates' => array('content:encoded'),
        ),
        'uid' => array(
          'predicates' => array('sioc:has_creator'),
          'type' => 'rel',
        ),
      ),
    ),
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function league_game_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/league_games/add' on 'admin/structure/league_games'.
  if ($root_path == 'admin/content/league_games') {
    $item = menu_get_item('admin/content/league_games/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for league_game entities
 */
class LeagueGame extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'league_game');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'league_game/' . $this->league_game_id);
  }
  
  
}


/**
 * The class used for league_game type entities
 */
class LeagueGameType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'league_game_type');
  }
  
}


/**
 * The Controller for LeagueGame entities
 */
class LeagueGameController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a league_game - we first set up the values that are specific
   * to our league_game schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the league_game.
   *
   * @return
   *   A league_game object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our LeagueGame
    global $user;
    $values += array( 
      'league_game_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'uid' => $user->uid,
      'date' => strtotime('2014-06-01 00:00:00'),
      'series' => '',
      'stadium' => '',
      'team_a' => '',
      'team_b' => '',
    );
    
    $league_game = parent::create($values);
    return $league_game;
  }
  
  /**
   * Overriding the buildContent function to add entity specific fields
   * This fields are shown on View Mode interface
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    if (!isset($langcode)) {
      $langcode = $GLOBALS['language_content']->language;
    }
    $content['date'] = array(
      '#theme' => 'field',
      '#weight' => 0,
      '#title' =>t('Fecha'),
      '#access' => TRUE,
      '#label_display' => 'inline',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'date',
      '#field_type' => 'date',
      '#entity_type' => 'league_game',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => format_date($entity->date))),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain(format_date($entity->date)))
    );
    $content['stadium'] = array(
      '#theme' => 'field',
      '#weight' => 0,
      '#title' =>t('Stadium'),
      '#access' => TRUE,
      '#label_display' => 'inline',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'stadium',
      '#field_type' => 'text',
      '#entity_type' => 'league_game',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => league_get_node_ref($entity->stadium))),
      '#formatter' => 'text_default',
      0 => array('#markup' => league_get_node_ref($entity->stadium))
    );
    $content['matchday'] = array(
      '#theme' => 'field',
      '#weight' => 0,
      '#title' =>t('Matchday'),
      '#access' => TRUE,
      '#label_display' => 'inline',
      '#view_mode' => $view_mode,
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'matchday',
      '#field_type' => 'text',
      '#entity_type' => 'league_game',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => check_plain(league_get_node_title($entity->matchday)))),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain(league_get_node_title($entity->matchday)))
    );
    $content['body'] =array(
      '#markup' => check_markup($entity->body, $entity->format, '', TRUE),
      '#weight' => 1,
      '#prefix' => '<div class="league-game-description">',
      '#suffix' => '</div>',
    );
    
    $content['league_game_data'] = array(
      '#markup' => theme('league_game_data', array('view_mode' => $view_mode, 'league_game' => $entity)),
    );
    
    // Allow modules to modify the structured league_game.
    $content['#game_id'] = (arg(0) == 'league_game') ? arg(1) : 0;

    drupal_alter('league_game_view', $content);
    
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $content;
  }
  
}

/**
 * Implements hook_field_extra_fields().
 */
function league_game_field_extra_fields() {
  $extra = array();

  foreach (league_game_get_types() as $type => $league_game_type) {
    $extra['league_game'][$type] = array(
      'form' => array(
      ),
      'display' => array(
        'date' => array(
          'label' => t('Date'),
          'description' => t('Date of the game'),
          'weight' => -5,
        ),
        'matchday' => array(
          'label' => t('Matchday'),
          'description' => t('Matchday of the game'),
          'weight' => -3,
        ),
        'staduim' => array(
          'label' => t('Stadium'),
          'description' => t('The stadium the game will take place'),
          'weight' => 0,
        ),
        'league_game_data' => array(
          'label' => t('Content'),
          'description' => t('Full league_game content'),
          'weight' => 10,
        ),
        'body' => array(
          'label' => t('Description'),
          'description' => t('Description of the game'),
          'weight' => 15,
        ),

      ),
    );
  }

  return $extra;
}

/**
 * Implement hook_theme().
 */
function league_game_theme() {
  return array(
    'league_game_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'league_game.admin.inc',
    ),
    'league_game' => array(
      'render element' => 'elements',
      'template' => 'league_game',
    ),
   'league_game_data' => array(
      'variables' => array('league_game' => NULL, 'view_mode' => 'full'),
      'template' => 'league_game_data',
    ),

  );
}  

/**
 * Implements hook_preprocess_THEME(&$variables).
 */
function league_game_preprocess_league_game_data(&$variables) {
  // ToDo rewrite calls to teams to resume into a single call to db
  $variables['gid'] = $variables['league_game']->league_game_id;
  $variables['status'] = $variables['league_game']->status;
  $variables['team_a'] = league_get_node_ref($variables['league_game']->team_a);
  $variables['team_b'] = league_get_node_ref($variables['league_game']->team_b);
  $variables['nid_a'] = $variables['league_game']->team_a;
  $variables['nid_b'] = $variables['league_game']->team_b;
  $score_a = $variables['league_game']->score_a;
  $score_b = $variables['league_game']->score_b;
  $variables['score_a'] = $score_a;
  $variables['score_b'] = $score_b;
  $emblem_a = league_get_emblem($variables['league_game']->team_a);
  $emblem_b = league_get_emblem($variables['league_game']->team_b);
  $variables['emblem_a'] = $emblem_a;
  $variables['emblem_b'] = $emblem_b;
  $settings = variable_get('league_game_settings');
  if ($variables['status'] == 1 && $settings['ajax']['active']) {
    drupal_add_js(array(
      'league_game' => array('result' => array($variables['gid']))
    ), 'setting');
  }
}

/**
 * Implements hook_views_api().
 */
function league_game_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'league_game') . '/views',
  );
}

/**
 * The Controller for LeagueGame entities
 */
class LeagueGameTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a league_game type - we first set up the values that are specific
   * to our league_game type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the league_game.
   *
   * @return
   *   A league_game type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our LeagueGame
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
    );
    $league_game_type = parent::create($values);
    return $league_game_type;
  }

}

/**
 * Gathers a listing of links to league_games.
 *
 * @param $result
 *   A database result object from a query to fetch league_game entities.
 * @param $title
 *   A heading for the resulting list.
 *
 * @return
 *   A renderable array containing a list of linked node titles fetched from
 *   $result, or FALSE if there are no rows in $result.
 */
function league_game_title_list($result, $title = NULL) {
  $items = array();
  $num_rows = FALSE;
  foreach ($result as $league_game) {
    $items[] = l($league_game->name, 'league_game/' . $league_game->league_game_id);
    $num_rows = TRUE;
  }

  return $num_rows ? array('#theme' => 'item_list__node', '#items' => $items, '#title' => $title) : FALSE;
}


/**
 * Implements hook_entity_property_info_alter().
 *
 * Declare schema fields as Drupal fields
 */

function league_game_entity_property_info_alter(&$info) {
  $settings = variable_get('league_settings');
  $game_settings = variable_get('league_game_settings');
  $properties = &$info['league_game']['properties'];
  $properties['date'] = array(
    'label' => t("Date of the game"),
    'type' => 'date',
    'description' => t("The date the league_game will take place."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'schema field' => 'date',
  );
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the league_game was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the league_game was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the task."),
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['matchday'] = array(
    'label' => t("Matchday"),
    'type' => 'node',
    'bundle' => $game_settings['advanced']['matchday_bundle'],
    'description' => t("The matchday of the game."),
    'options list' => 'league_get_matchday_names', 
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'required' => TRUE,
    'schema field' => 'matchday',
  );
  $properties['stadium'] = array(
    'label' => t("Stadium"),
    'type' => 'node',
    'bundle' => $game_settings['advanced']['stadium_bundle'],
    'description' => t("The stadium for the game."),
    'options list' => 'league_get_stadium_names', 
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'required' => TRUE,
    'schema field' => 'stadium',
  );
  $properties['team_a'] = array(
    'label' => t("Team A"),
    'type' => 'node',
    'bundle' => $settings['advanced']['team_bundle'],
    'description' => t("The team A of the game."),
    'options list' => 'league_get_team_names', 
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'required' => TRUE,
    'schema field' => 'team_a',
  );
  $properties['team_b'] = array(
    'label' => t("Team B"),
    'type' => 'node',
    'description' => t("The team B of the game."),
    'options list' => 'league_get_team_names', 
    'bundle' => $settings['advanced']['team_bundle'],
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'required' => TRUE,
    'schema field' => 'team_b',
  );
  $properties['status'] = array(
    'label' => t("Status"),
    'description' => t("The status of the game."),
    'options list' => 'league_game_get_status_type', 
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer league_games',
    'required' => TRUE,
    'schema field' => 'status',
  );
}

/*
 * Auxiliary functions
 */

/*
 * Gets league game team a or b id
 */

function league_game_get_team($gid, $team_a_b) {
  if ($game = league_game_load($gid)) {
    return $team_a_b == 'a' ? $game->team_a : $game->team_b;
  }
  else {
    return '';
  }
}

/*
 * Returns league game teams
 */

function league_game_get_teams($gid) {
  $game = league_game_load($gid);
  $node = node_load($game->team_a);
  $team[$game->team_a] = $node->title;
  $node = node_load($game->team_b);
  $team[$game->team_b] = $node->title;
  return $team;
}

/*
 * Returns league game title
 */

function league_game_get_title($gid) {
  $game = league_game_load($gid);
  return $game->name;
}

/*
 * Returns league game titles
 */

function league_game_get_titles($league_game_ids = array(), $conditions = array(), $reset = FALSE) {
  $games = league_game_load_multiple($league_game_ids, $conditions, $reset);
  $results = array();
  foreach ($games as $game) {
    $results[$game->league_game_id] = $game->name;
  }
  return $results;
}

/*
 * Returns league game titles
 */
function league_game_get_all_titles() {
  $query = db_select('league_game','g');
  $query->fields('g',array('league_game_id', 'name'));
  $games = $query->execute();
  $results = array();
  foreach ($games as $game) {
    $results[$game->league_game_id] = $game->name;
  }
  return $results;
}

/**
 * Get the list of nodes types.
 */
function league_game_get_league_game_types() {
  $game_types = league_game_get_types();
  $results = array();
  foreach($game_types as $game_type) {
    $results[$game_type->type] = $game_type->label;
  }
  return $results;
}

/**
 * Get the list of status options.
 */
function league_game_get_status_type() {
  $results = array(
      0 => t('Pending'),
      1 => t('Live'),
      2 => t('Finished'),
    );
  return $results;
}
