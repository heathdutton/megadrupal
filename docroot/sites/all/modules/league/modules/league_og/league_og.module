<?php

/**
 * @file
 * League og integration module.
 */

/**
 * Implements hook_og_permission().
 */
function league_og_og_permission() {
  $permissions = array();
  //Generate permissions per league_game 
  foreach (league_game_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name league_game" => array(
        'title' => t('%type_name: Edit any league_game', array('%type_name' => $type->label)),
      ),
      "delete any $type_name league_game" => array(
        'title' => t('%type_name: Delete any league_game', array('%type_name' => $type->label)),
      ),
      "view any $type_name league_game" => array(
        'title' => t('%type_name: View any league_game', array('%type_name' => $type->label)),
      ),
    );
  }
  //Generate permissions per league_person 
  foreach (league_person_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name league_person" => array(
        'title' => t('%type_name: Edit any league_person', array('%type_name' => $type->label)),
      ),
      "delete any $type_name league_person" => array(
        'title' => t('%type_name: Delete any league_person', array('%type_name' => $type->label)),
      ),
      "view any $type_name league_person" => array(
        'title' => t('%type_name: View any league_person', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_league_game_access().
 *
 * @see league_game_league_game_access()
 */
function league_og_league_game_access($op, $league_game = NULL, $account = NULL) {
  if (isset($league_game)) {
    switch ($op) {
      case 'view':
        $type_name = $league_game->type;
        return (og_user_access_entity("$op any $type_name league_game", 'league_game', $league_game, $account));
      case 'edit':
        $type_name = $league_game->type;
        return (og_user_access_entity("$op any $type_name league_game", 'league_game', $league_game, $account));
      case 'edit result':
        $type_name = $league_game->type;
        return (og_user_access_entity("$op any $type_name league_game", 'league_game', $league_game, $account));
      case 'delete':
        $type_name = $league_game->type;
        return (og_user_access_entity("$op any $type_name league_game", 'league_game', $league_game, $account));
    }
  }
  // Do not explicitly deny access so others may still grant access.
}

/**
 * Implements hook_league_person_access().
 *
 * @see league_person_league_person_access()
 */
function league_og_league_person_access($op, $league_person = NULL, $account = NULL) {
  if (isset($league_person)) {
    switch ($op) {
      case 'view':
        $type_name = $league_person->type;
        return (og_user_access_entity("$op any $type_name league_person", 'league_person', $league_person, $account));
      case 'edit':
        $type_name = $league_person->type;
        return (og_user_access_entity("$op any $type_name league_person", 'league_person', $league_person, $account));
      case 'edit result':
        $type_name = $league_person->type;
        return (og_user_access_entity("$op any $type_name league_person", 'league_person', $league_person, $account));
      case 'delete':
        $type_name = $league_person->type;
        return (og_user_access_entity("$op any $type_name league_person", 'league_person', $league_person, $account));
    }
  }
  // Do not explicitly deny access so others may still grant access.
}

function league_og_get_og_entities($entity, $bundle, $id) {
  og_get_all_group_content_bundle();
  og_get_all_group_content_entity();
}

/**
 * Inserts OG Field to Game and Person FORMs.
 *
 * Code is taken form OG_UI module, lines 889 and beyond
 */

/**
 * Implement hook_form_FORM_ID_alter().
 */
function league_og_form_league_game_type_form_alter(&$form, &$form_state) {
  $league_game_type = $form['type']['#default_value'];
  $form['og'] = array(
    '#type' => 'fieldset',
    '#title' => t('Organic groups'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#description' => t('Specify how OG should treat content of this type. Content may behave as a group, as group content, or may not participate in OG at all.'),
  );

  // Group settings.
  $url = array('!url' => l(t('Manage fields'), 'admin/structure/league_game_types/manage/' . str_replace('_', '-', $league_game_type) . '/fields'));
  $is_group = og_is_group_type('league_game', $league_game_type);

  $description = t('Set the content type to be a group, that content will be associated with, and will have group members.');
  if ($is_group) {
    $description .= '<br/>' . t('To unset the group definition you should delete the "Group type" field via !url.', $url);
  }


  $form['og']['og_group_type'] = array(
    '#type' => 'checkbox',
    '#title' => t('Group'),
    '#default_value' => $is_group,
    '#description' => $description,
    '#disabled' => $is_group,
  );

  // Group content settings.
  $is_group_content = og_is_group_content_type('league_game', $league_game_type);

  $description = t('Set the content type to be a group content, that can be associated with groups.');
  if ($is_group_content) {
    $description .= '<br/>' . t('To unset the group content definition or change the settings you should delete the "Groups audience" field via !url.', $url);
  }
  $group_content_options = og_get_all_group_entity();
  if (!$group_content_options) {
    $description .= '<br/>' . t('There are no group bundles defined.');
  }

  $form['og']['og_group_content_type'] = array(
    '#type' => 'checkbox',
    '#title' => t('Group content'),
    '#default_value' =>  $is_group_content,
    '#description' => $description,
    '#disabled' => !$group_content_options || $is_group_content,
  );

  if ($group_content_options) {
    // Don't show the settings, as there might be multiple OG audience fields
    // in the same bundle.
    $form['og']['target_type'] = array(
      '#type' => 'select',
      '#title' => t('Target type'),
      '#options' => $group_content_options,
      '#default_value' => key($group_content_options),
      '#description' => t('The entity type that can be referenced thru this field.'),
      '#ajax' => array(
        'callback' => 'og_node_type_form_settings',
        'wrapper' => 'og-settings-wrapper',
      ),
      '#states' => array(
        'visible' => array(
          ':input[name="og_group_content_type"]' => array('checked' => TRUE),
        ),
      ),
    );

    $target_type = !empty($form_state['values']['target_type']) ? $form_state['values']['target_type'] : key($group_content_options);
    $entity_info = entity_get_info($target_type);
    $bundles = array();
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      if (og_is_group_type($target_type, $bundle_name)) {
        $bundles[$bundle_name] = $bundle_info['label'];
      }
    }

    // Get the bundles that are acting as group.
    $form['og']['target_bundles'] = array(
      '#prefix' => '<div id="og-settings-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'select',
      '#title' => t('Target bundles'),
      '#options' => $bundles,
      '#default_value' => array(),
      '#size' => 6,
      '#multiple' => TRUE,
      '#description' => t('The bundles of the entity type that can be referenced. Optional, leave empty for all bundles.'),
      '#states' => array(
        'visible' => array(
          ':input[name="og_group_content_type"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * AJAX callback to attach the message type fields to the form.
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 */
function league_game_type_form_settings(array $form, array &$form_state) {
  return $form['og']['target_bundles'];
}

/**
 * hook_league_game_type_form_save_alter()
 *
 * Add group and group content fields to new content types.
 *
 * @param $league_game_type
 *   The content type entity.
 */

function league_og_league_game_type_form_save_alter($league_game_type) {

  $bundle_name = $league_game_type->type;
  if ($league_game_type->og_group_type) {
    og_create_field(OG_GROUP_FIELD, 'league_game', $bundle_name);
  }

  if ($league_game_type->og_group_content_type && !og_is_group_content_type('league_game', $bundle_name)) {
    $og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['field']['target_type'] = $league_game_type->target_type;
    $og_field['field']['settings']['handler_settings']['target_bundles'] = $league_game_type->target_bundles;
    og_create_field(OG_AUDIENCE_FIELD, 'league_game', $bundle_name, $og_field);
  }
}

/**
 * Implement hook_form_FORM_ID_alter().
 */
function league_og_form_league_person_type_form_alter(&$form, &$form_state) {
  $league_person_type = $form['type']['#default_value'];
  $form['og'] = array(
    '#type' => 'fieldset',
    '#title' => t('Organic groups'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#description' => t('Specify how OG should treat content of this type. Content may behave as a group, as group content, or may not participate in OG at all.'),
  );

  // Group settings.
  $url = array('!url' => l(t('Manage fields'), 'admin/structure/league_person_types/manage/' . str_replace('_', '-', $league_person_type) . '/fields'));
  $is_group = og_is_group_type('league_person', $league_person_type);

  $description = t('Set the content type to be a group, that content will be associated with, and will have group members.');
  if ($is_group) {
    $description .= '<br/>' . t('To unset the group definition you should delete the "Group type" field via !url.', $url);
  }


  $form['og']['og_group_type'] = array(
    '#type' => 'checkbox',
    '#title' => t('Group'),
    '#default_value' => $is_group,
    '#description' => $description,
    '#disabled' => $is_group,
  );

  // Group content settings.
  $is_group_content = og_is_group_content_type('league_person', $league_person_type);

  $description = t('Set the content type to be a group content, that can be associated with groups.');
  if ($is_group_content) {
    $description .= '<br/>' . t('To unset the group content definition or change the settings you should delete the "Groups audience" field via !url.', $url);
  }
  $group_content_options = og_get_all_group_entity();
  if (!$group_content_options) {
    $description .= '<br/>' . t('There are no group bundles defined.');
  }

  $form['og']['og_group_content_type'] = array(
    '#type' => 'checkbox',
    '#title' => t('Group content'),
    '#default_value' =>  $is_group_content,
    '#description' => $description,
    '#disabled' => !$group_content_options || $is_group_content,
  );

  if ($group_content_options) {
    // Don't show the settings, as there might be multiple OG audience fields
    // in the same bundle.
    $form['og']['target_type'] = array(
      '#type' => 'select',
      '#title' => t('Target type'),
      '#options' => $group_content_options,
      '#default_value' => key($group_content_options),
      '#description' => t('The entity type that can be referenced thru this field.'),
      '#ajax' => array(
        'callback' => 'og_node_type_form_settings',
        'wrapper' => 'og-settings-wrapper',
      ),
      '#states' => array(
        'visible' => array(
          ':input[name="og_group_content_type"]' => array('checked' => TRUE),
        ),
      ),
    );

    $target_type = !empty($form_state['values']['target_type']) ? $form_state['values']['target_type'] : key($group_content_options);
    $entity_info = entity_get_info($target_type);
    $bundles = array();
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      if (og_is_group_type($target_type, $bundle_name)) {
        $bundles[$bundle_name] = $bundle_info['label'];
      }
    }

    // Get the bundles that are acting as group.
    $form['og']['target_bundles'] = array(
      '#prefix' => '<div id="og-settings-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'select',
      '#title' => t('Target bundles'),
      '#options' => $bundles,
      '#default_value' => array(),
      '#size' => 6,
      '#multiple' => TRUE,
      '#description' => t('The bundles of the entity type that can be referenced. Optional, leave empty for all bundles.'),
      '#states' => array(
        'visible' => array(
          ':input[name="og_group_content_type"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * AJAX callback to attach the message type fields to the form.
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 */
function league_person_type_form_settings(array $form, array &$form_state) {
  return $form['og']['target_bundles'];
}

/**
 * hook_league_person_type_form_save_alter()
 *
 * Add group and group content fields to new content types.
 *
 * @param $league_person_type
 *   The content type entity.
 */

function league_og_league_person_type_form_save_alter($league_person_type) {

  $bundle_name = $league_person_type->type;
  if ($league_person_type->og_group_type) {
    og_create_field(OG_GROUP_FIELD, 'league_person', $bundle_name);
  }

  if ($league_person_type->og_group_content_type && !og_is_group_content_type('league_person', $bundle_name)) {
    $og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['field']['target_type'] = $league_person_type->target_type;
    $og_field['field']['settings']['handler_settings']['target_bundles'] = $league_person_type->target_bundles;
    og_create_field(OG_AUDIENCE_FIELD, 'league_person', $bundle_name, $og_field);
  }
}
