<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */

/**
 * Default settings storage.
 */
function _league_person_defaults() {
  return array(
    'general' => array(
      'activate_path' => 1,
      'path_alias' => 'player',
    ),
    'advanced' => array(
      'player_bundle' => 'player',
      'referee_bundle' => 'referee',
      'coach_bundle' => 'coach',
    ),
  );
}

/**
 * Implementation of hook_install().
 * This will create our system variable defaults.
 * The benefit is that we do not need to pass defaults
 * to variable_get(), which allows centralization of defaults.
 */
function league_person_install() {
  variable_set('league_person_settings', _league_person_defaults());
}

/**
 * Implementation of hook_uninstall().
 * Only clears our variables, so a fresh installation can repopulate them.
 */
function league_person_uninstall() {
  // Settings.
  variable_del('league_person_settings');
}

/**
 * Implements hook_schema().
 */
function league_person_schema() {
  $schema = array();

  $schema['league_person'] = array(
    'description' => 'The base table for league_person entities.',
    'fields' => array(
      'league_person_id' => array(
        'description' => 'Primary Key: Identifier for a league_person.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user that creates the league_person.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The {league_person_type}.type of this league_person.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The language of the league_person.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the league_person - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'first_name' => array(
        'description' => 'The first name of the league_person - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'given_name' => array(
        'description' => 'The given name of the league_person - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'team' => array(
        'description' => 'Team',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'owner_uid' => array(
        'description' => 'The user that owns the league_person.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'body' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Description of the Person.',
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The {filter_format}.format of the body.',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the league_person was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the league_person was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('league_person_id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['league_person_type'] = array(
    'description' => 'Stores information about defined league_person types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique league_person type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this league_person type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this league_person type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this league_person type in relation to others.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

function league_person_update_7016() {
  db_drop_field('league_person', 'is_new');
}

/**
 * Change body field for league_person
 */
function league_person_update_7017() {
  db_change_field('league_person', 'body', 'body', array(
      'type' => 'text',
      'not null' => FALSE,
      'size' => 'big',
      'description' => 'Description of the person.',
    )
  );
}
/**
 * Add format field for league_person
 */
function league_person_update_7018() {
  db_add_field('league_person', 'format', array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
      'description' => 'The {filter_format}.format of the body.',
    )
  );
}
