<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

function league_table_menu() {
  $items=array();
  $items['admin/league/settings/league_table']=array(
    'title' => t('Tables'),
    'description' => t('Enable support for per game tables and statistics'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_table_admin'),
    'access arguments' => array('administer league_table'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Callback function for admin setting.
 */
function league_table_admin($form, &$form_state) {
  $settings = variable_get('league_table_settings');

  // General options
  $options['table'] = array(
    '#type' => 'fieldset',
    '#title' => t('Table mappings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // Define mapping for table columns vs tables
  $options['table']['general'] = array(
    '#type' => 'checkbox',
    '#title' => t('Just to test'),
    '#default_value' => $settings['table']['general'],
    '#description' => t('Easily modify, scale, crop and apply various effects to slider images using <a href="@image-styles">Image styles</a>.', array('@image-styles' => '/admin/config/media/image-styles')),
  );

  $options['#tree'] = TRUE;
  $form['league_table_settings'] = $options;

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function league_table_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'view league_table' => array(
      'title' => t('View league table'),
      'description' => t('View any League Table.'),
    ),
    'administer league_table' => array(
      'title' => t('Administer league table settingss'),
      'description' => t('Administer League Table general settings.'),
    ),
  );
  return $permissions;  
}

/**
 * Implements hook_views_api().
 */
function league_table_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'league_table') . '/views',
  );
}

/**
 * Save new league_table.
 */
function league_table_save($table) {
  $table['changed'] = time();
  drupal_write_record ('league_table', $table);
  $result = $table ['id'];
  return $result;
}

/**
 * Update league_table.
 */
function league_table_update($table) {
  $table['changed'] = time();
  return drupal_write_record ('league_table', $table, 'id');
}

/**
 * Delete league_table.
 */
function league_table_delete($id) {
  db_delete('league_table')
    ->condition('id', $id)
    ->execute();
}

/**
 * Delete league_table by teams.
 * Will delete all statisics for matches where team appears
 */
function league_table_delete_by_teams($teams = array()) {
  $records = db_select('league_table','m')
    ->fields('m', array('id', 'game_id'))
    ->condition('m.team_id', $teams, 'IN')
    ->execute();
  $games = array();
  foreach ($records as $record) {
    $games[$record->id] = $record->game_id;
  }
  league_table_delete_by_games($games);
}

/**
 * Delete league_table by team.
 */
function league_table_delete_by_games($games = array()) {
  db_delete('league_table')
    ->condition('game_id', $games, 'IN')
    ->execute();
}

/**
 * Load league_table.
 */
function league_table_load_by_game($game_id) {
  $records = db_select('league_table','m')
    ->fields('m', array('id', 'team_id'))
    ->condition('m.game_id', $game_id, '=')
    ->execute();
  $tables = array();
  foreach ($records as $record) {
    $tables[$record->team_id] = $record->id;
  }
  return $tables;
}

/**
 * hook_league_game_saved().
 *
 * Create/update game statistics
 */
function league_table_league_game_saved_alter($league_game) {
  league_table_tables_save($league_game);
}

function league_table_league_game_result_form_pre_save_alter(&$league_game) {
  league_table_tables_save($league_game);
}

/**
 * Create/update game statistics
 */
function league_table_tables_save(&$league_game) {
  $settings = variable_get('league_settings');
  $win_p = $settings['points']['win'];
  $tie_p = $settings['points']['tie'];
  $loose_p = $settings['points']['loose'];
  $diff = $league_game->score_a - $league_game->score_b;
  if ($diff > 0) {
    $league_game->points_a = $win_p;
    $league_game->points_b = $loose_p;
  }
  else if ($diff < 0) {
    $league_game->points_a = $loose_p;
    $league_game->points_b = $win_p;
  }
  else {
    $league_game->points_a = $tie_p;
    $league_game->points_b = $tie_p;
  }
  $statistics = league_table_game_statistics($league_game);
  foreach ($statistics as $game_id => $statistic) {
    $tables = league_table_load_by_game($game_id);
    foreach ($statistic as $team_id => $statistic_data) {
      if ($statistic_data['played']) {
        $table = array(
          'game_id' => $game_id,
          'team_id' => $team_id,
          'played' => $statistic_data['played'],
          'win' => $statistic_data['win'],
          'tie' => $statistic_data['tie'],
          'loose' => $statistic_data['loose'],
          'goals' => $statistic_data['goals_own'] - $statistic_data['goals_against'],
          'favor' => $statistic_data['goals_own'],
          'against' => $statistic_data['goals_against'],
          'points' => is_int($statistic_data['points']) ? ($statistic_data['win'] * $win_p + $statistic_data['tie'] * $tie_p + $statistic_data['loose'] * $loose_p) : $statistic_data['points'],
        );
      }
      else {
        $table = array(
          'game_id' => $game_id,
          'team_id' => $team_id,
          'played' => 0,
          'win' => 0,
          'tie' => 0,
          'loose' => 0,
          'goals' => 0,
          'favor' => 0,
          'against' => 0,
          'points' => 0,
        );
      }
      if (empty($tables) > 0) {
        league_table_save($table);
      }
      else {
        $table['id'] = $tables[$team_id];
        league_table_update($table);
      }
    }
  }
}

/**
 * Return game statistics per team
 */
function league_table_game_statistics($league_game) {
  $game_id = $league_game->league_game_id;
  $played = $league_game->status == 2 ? 1 : 0;
  $team_a = $league_game->team_a;
  $team_b = $league_game->team_b;
  $score_a = $league_game->override ? $league_game->override_score_a : $league_game->score_a;
  $score_b = $league_game->override ? $league_game->override_score_b : $league_game->score_b;
  $points_a = $league_game->override ? $league_game->override_points_a : $league_game->points_a;
  $points_b = $league_game->override ? $league_game->override_points_b : $league_game->points_b;

  $statistics = array(
    $game_id => array(
      $team_a => array(
        'played' => $played,
        'goals_own' => $score_a,
        'goals_against' => $score_b,
        'win' => $score_a > $score_b ? 1 : 0,
        'tie' => $score_a == $score_b ? 1 : 0,
        'loose' => $score_a < $score_b ? 1 : 0,
        'points' => $points_a,
      ),
      $team_b => array(
        'played' => $played,
        'goals_own' => $score_b,
        'goals_against' => $score_a,
        'win' => $score_b > $score_a ? 1 : 0,
        'tie' => $score_b == $score_a ? 1 : 0,
        'loose' => $score_b < $score_a ? 1 : 0,
        'points' => $points_b,
      ),
    ),
  );
  // hook_league_table_game_statistics_alter
  drupal_alter('league_table_game_statistics', $statistics);
  return $statistics;
}

/**
 * hook_league_game_delete_alter().
 *
 * Delete game statistics
 */

function league_table_league_game_delete_alter($league_game) {
  league_table_delete_by_games(array($league_game->league_game_id));
}