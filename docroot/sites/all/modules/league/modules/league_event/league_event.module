<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

function league_event_menu() {
  $items=array();
  $items['admin/league/settings/league_event']=array(
    'title' => t('Events'),
    'description' => t('Enable support for per game events and statistics'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_event_admin'),
    'access arguments' => array('administer league_event'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['league_game/%/events'] = array(
    'title' => t('Admin events'),
    'page callback' => 'league_event_admin_list',
    'page arguments' => array(1),
    'access arguments' => array('edit league_event'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 10,
  );
  $items['league_game/%/events/edit/%'] = array(
    'title' => 'Edit events',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_event_event_admin','edit',1,4),
    'access arguments' => array('edit league_event'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 10,
  );
  $items['league_game/%/events/add'] = array(
    'title' => 'Add events',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_event_event_admin','add',1),
    'access arguments' => array('edit league_event'),
    'weight' => 10,
  );
  $items['league_game/%/events/delete/%'] = array(
    'title' => 'Delete League event',
    'page callback' => 'league_event_delete_page',
    'page arguments' => array(4),
    'access arguments' => array('administer league_event'),
   );
  $items['admin/league/settings/league_event_type']=array(
    'title' => t('Event types'),
    'description' => t('Administer league event types'),
    'page callback' => 'league_event_type_admin_list',
    'access arguments' => array('administer league_event types'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/league/settings/league_event_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 40,
  );
  $items['admin/league/settings/league_event_type/add']=array(
    'title' => t('Add event types'),
    'description' => t('Add league event types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_event_types_form_edit','add'),
    'access arguments' => array('administer league_event types'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/league/settings/league_event_type/edit/%']=array(
    'title' => t('Edit event types'),
    'description' => t('Edit league event types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_event_types_form_edit','edit',5),
    'access arguments' => array('administer league_event types'),
  );
  $items['admin/league/settings/league_event_type/delete/%'] = array(
    'title' => 'Delete League event type',
    'page callback' => 'league_event_types_delete_page',
    'page arguments' => array(5),
    'access arguments' => array('administer league_event types'),
   );
  return $items;
}

/**
 * Implements hook_permission().
 */
function league_event_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'view league_event' => array(
      'title' => t('View league event'),
      'description' => t('View any League Event.'),
    ),
    'administer league_event' => array(
      'title' => t('Administer league event settingss'),
      'description' => t('Administer League Event general settings.'),
    ),
    'administer league_event types' => array(
      'title' => t('Administer league event types'),
      'description' => t('Administer League Event Types.'),
    ),
    'edit league_event' => array(
      'title' => t('Add/edit league events'),
      'description' => t('Add and edit League Events.'),
    ),
  );
  return $permissions;
}

/**
 * Callback function for admin setting.
 */
function league_event_admin($form, &$form_state) {
  $settings = variable_get('league_event_settings');

  // General options
  $options['event'] = array(
    '#type' => 'fieldset',
    '#title' => t('Event settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options['event']['start'] = array(
    '#type' => 'select',
    '#title' => t('Start event type'),
    '#options' => league_event_get_event_types('all'),
    '#default_value' => $settings['event']['start'],
    '#description' => t('Event type used for start lineup players'),
  );
  $options['event']['bench'] = array(
    '#type' => 'select',
    '#title' => t('Bench event type'),
    '#options' => league_event_get_event_types('all'),
    '#default_value' => $settings['event']['bench'],
    '#description' => t('Event type used for bench lineup players'),
  );
  $options['event']['in'] = array(
    '#type' => 'select',
    '#title' => t('Substitution in event type'),
    '#options' => league_event_get_event_types(),
    '#default_value' => $settings['event']['in'],
    '#description' => t('Event type used for substitution in players'),
  );
  $options['event']['out'] = array(
    '#type' => 'select',
    '#title' => t('Substitution out event type'),
    '#options' => league_event_get_event_types(),
    '#default_value' => $settings['event']['out'],
    '#description' => t('Event type used for substitution out players'),
  );

  $options['#tree'] = TRUE;
  $form['league_event_settings'] = $options;

  return system_settings_form($form);
}

/**
 * Callback function for add/edit league_events.
 */
function league_event_event_admin($form, &$form_state, $type, $gid = 0, $id_event = 0) {
  $form = array();
  $league_event = $id_event > 0 ? league_event_load_events($id_event) : '';
  // General options
  $form['id'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($league_event->id) ? $league_event->id :'',
  );
  $form['game_id'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($league_event->game_id) ? $league_event->game_id : $gid,
  );
  $form['event'] = array(
    '#type' => 'fieldset',
    '#title' => t('Event'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['event']['type'] = array(
    '#type' => 'select',
    '#title' => t('Type of event'),
    '#options' => league_event_get_event_types(),
    '#default_value' => isset($league_event->type) ? $league_event->type : 0,
    '#weight' => -40,
  );
  $form['event']['team_id'] = array(
    '#type' => 'select',
    '#title' => t('Team'),
    '#options' => league_game_get_teams($gid),
    '#default_value' => isset($league_event->team_id) ? $league_event->team_id : 0,
    '#weight' => -20,
    '#ajax' => array(
      'callback' => 'league_event_team_person_callback',
      'wrapper' => 'load_person_team',
      'effect' => 'fade',
    ),
  );
  $selected = isset($form_state['values']['team_id']) ? $form_state['values']['team_id'] : ($type=='edit'?$league_event->team_id:key(league_game_get_teams($gid)));
  $form['event']['person_id'] = array(
    '#type' => 'select',
    '#title' => t('Player'),
    // The entire enclosing div created here gets replaced when team_id
    // is changed.
    '#prefix' => '<div id="load_person_team">',
    '#suffix' => '</div>',
    '#options' => league_person_get_persons($selected),
    '#default_value' => isset($league_event->person_id) ? $league_event->person_id : 0,
    '#weight' => -10,
  );
  $form['event']['minute'] = array(
    '#type' => 'textfield',
    '#title' => t('Minute'),
    '#default_value' => isset($league_event->minute) ? $league_event->minute : '0',
    '#maxlength' => 255,
    '#required' => FALSE,
    '#weight' => -5,
  );
  $form['event']['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#default_value' => isset($league_event->points) ? $league_event->points : '1',
    '#maxlength' => 255,
    '#required' => FALSE,
    '#weight' => -5,
  );
  $form['event']['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments'),
    '#default_value' => isset($league_event->comment) ? $league_event->comment : '',
    '#weight' => -3,
  ); 
  $form['actions']=array(
    '#type'=>'actions',
  );
  $form['actions']['submit']=array(
    '#type'=>'submit',
    '#value'=>'Save',
   ); 
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#access' => $type == 'edit',
    '#submit' => array('league_event_delete_submit'),
   );
  return $form;
}

/**
 * Submit function  for add/edit league_event types.
 */
function league_event_event_admin_submit($form, &$form_state) {
  $events = $form_state['values']; 
  league_record($events, 'league_event', 'id');
  $nid=arg(1);
  drupal_set_message(t('Your configuration has been saved.'));
  $path = 'league_game/'.$nid.'/events/';
  $form_state['redirect'] = $path; 
}

function league_event_team_person_callback($form, $form_state) {
  return  $form['event']['person_id'];
}
/**
 * Callback function form add/edit league_event_type types.
 *  @type is add/edit
 *  @id is id of league type event
 */
function league_event_types_form_edit($form, $form_state, $type, $id = 0) {
  $form = array();
  $event_type = $id > 0 ? league_event_type_load_event_type($id) : '';
  $form['id'] = array(
    '#type' => 'hidden',
    '#title' => t('id'),
    '#default_value' => isset($event_type->id) ? $event_type->id : '',
  ); 
  $form['event_type'] = array(
    '#type' => 'fieldset',
    '#title' => t('Event type'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['event_type']['type'] = array(
    '#type' => 'machine_name',
    '#title' => t('Type'),
    '#description' => t('Machine name for the event type, only allowed characters and underscores, no spaces.'),
    '#default_value' => isset($event_type->type) ? $event_type->type : '',
    '#maxlength' => 255,
    '#required' => TRUE,
    '#weight' => -15,
    '#machine_name' => array(
      'exists' => 'league_event_type_name_exists',
    ),
  );
  $form['event_type']['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => isset($event_type->label) ? $event_type->label : '',
    '#maxlength' => 255,
    '#required' => TRUE,
    '#weight' => -10,
  );
  $form['event_type']['class_icon'] = array(
    '#type' => 'machine_name',
    '#title' => t('Class icon'),
    '#default_value' => isset($event_type->class_icon) ? $event_type->class_icon : '',
    '#description' => t('CSS class for icon of the event type, only allowed characters and underscores, no spaces.'),
    '#maxlength' => 255,
    '#machine_name' => array(
      'exists' => 'league_event_type_class_exists',
     ),
    '#required' => TRUE,
    '#weight' => -5,
  );
  $form['event_type']['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#default_value' => isset($event_type->points) ? $event_type->points : '1',
    '#maxlength' => 255,
    '#required' => FALSE,
    '#weight' => -2,
  );
  $form['event_type']['is_locked'] = array(
    '#type' => 'checkbox',
    '#title' => t('Locked'),
    '#default_value' => isset($event_type->is_locked) ? $event_type->is_locked : '1',
    '#description' => t('Protect the key event types for accidentally being deleted or edited.'),
    '#weight' => 20,
  );
  $form['event_type']['public'] = array(
    '#type' => 'checkbox',
    '#title' => t('Public'),
    '#default_value' => isset($event_type->public) ? $event_type->public : '1',
    '#description' => t('Type event public or private. Private events are used by the system, should not be printed or available.'),
    '#weight' => 1,
  );
  $form['event_type']['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => isset($event_type->active) ? $event_type->active : '1',
    '#description' => t('Type event active or inactive. Inctive event will not be shown on administrative pages'),
    '#weight' => 5,
  );
  $form['event_type']['published'] = array(
    '#type' => 'checkbox',
    '#title' => t('Published'),
    '#default_value' => isset($event_type->published) ? $event_type->published : '1',
    '#description' => t('Type event published. This is for custon usage.'),
    '#weight' => 10,
  );
  $form['event_type']['other_team'] = array(
    '#type' => 'checkbox',
    '#title' => t('Other Team'),
    '#default_value' => isset($event_type->other_team) ? $event_type->other_team : '0',
    '#description' => t('Events that apply to other team like Own Goals.'),
    '#weight' => 15,
  );
  $form['event_type']['weight'] = array(
    '#type' => 'select',
    '#title' => t('Weight'),
    '#options' => array(-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),
    '#default_value' => isset($event_type->weight) ? $event_type->weight : '0',
    '#description' => t('Weight for events listings, the lower goes first.'),
    '#weight' => 50,
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
   ); 
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#access' => $type == 'edit',
    '#submit' => array('league_event_types_delete_submit'),
    '#validate' => array('league_event_types_delete_validate'),
   );   
  return $form;
}

/**
 * Returns an array of event .
 *
 */
function league_event_type_load_event_type($event_type = 'all') {
  $query = db_select('league_event_type','m');
  $query->fields('m',array('id','type', 'label', 'class_icon', 'points', 'is_locked', 'public', 'active', 'published', 'other_team', 'weight'));
  if ($event_type != 'all') $query->condition('m.id', $event_type, '=');
  $events_types = $query->execute();
  return $events_types->fetchObject();
}

/**
 * Submit function  for add/edit league_event types.
 */
function league_event_types_form_edit_submit($form, &$form_state) {
  $type = $form_state['values']; 
  league_record($type, 'league_event_type','id');
  drupal_set_message(t('Your configuration has been saved.'));
  $path = 'admin/league/settings/league_event_type';
  $form_state['redirect'] = $path; 
}

/**
 * Submit function for the 'Delete' button on the menu editing form.
 */
function league_event_delete_submit($form, &$form_state) {
  $nid = arg(1);
  $form_state['redirect'] = 'league_game/'.$nid.'/events/delete/' . $form_state['values']['id'];
}

/**
 * Menu callback; check access and get a confirm form for deletion of a league_event.
 */
function league_event_delete_page($event) {
  return drupal_get_form('league_event_delete_confirm', $event);
}

/**
 * Build a confirm form for deletion of a league_event_types
 */
function league_event_delete_confirm($form, &$form_state, $id) {
  $event = array(
    'id'=>$id,
    'label' => league_event_field_table('league_event', 'id', $id, 'id')
  );
  $form['#events'] = $event;
  $caption = '<p>' . t('This action cannot be undone.') . '</p>';
  return confirm_form($form, t('Are you sure you want to delete the league event type %label?', array('%label' => $event['id'])), 'league_game/'.arg(1).'/events/', $caption, t('Delete'));
}

/**
 * Delete a league_event_types.
 */
function league_event_delete_confirm_submit($form, &$form_state) {
  $events = $form['#events'];
  $form_state['redirect'] = 'league_game/'.arg(1).'/events';
  league_event_delete($events['id']);
  $t_args = array('%label' => $events['id']);
  drupal_set_message(t('The league event type %label has been deleted.', $t_args));
  watchdog('league_event', 'Deleted league event type %label.', $t_args, WATCHDOG_NOTICE);
}

/**
 * Validation function for the 'Delete' button on the menu editing form.
 */
function league_event_types_delete_validate($form, &$form_state) {
  if ($form_state['values']['is_locked'] == 1) {
    form_set_error('is_locked', t('You must unlock event type before deleting, this action will not be undone and could crash your site.'));
  }}

/**
 * Submit function for the 'Delete' button on the menu editing form.
 */
function league_event_types_delete_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/league/settings/league_event_type/delete/' . $form_state['values']['id'];
}

/**
 * Menu callback; check access and get a confirm form for deletion of a league_event_types.
 */
function league_event_types_delete_page($type) {  
  return drupal_get_form('league_event_types_delete_confirm', $type);
}

/**
 * Build a confirm form for deletion of a league_event_types
 */
function league_event_types_delete_confirm($form, &$form_state, $id) {
  $type = array(
    'id' => $id,
    'label' => league_event_type_field($id, 'label')
  );
  $form['#types'] = $type;
  $caption = '<p>' . t('This action cannot be undone.') . '</p>';
  return confirm_form($form, t('Are you sure you want to delete the league event type %label?', array('%label' => $type['label'])), 'admin/league/settings/league_event_type/edit/' . $type['id'], $caption, t('Delete'));
}

/**
 * Delete a league_event_types.
 */
function league_event_types_delete_confirm_submit($form, &$form_state) {
  $type = $form['#types'];
  $form_state['redirect'] = 'admin/league/settings/league_event_type';
  league_event_types_delete($type);
  $t_args = array('%label' => $type['label']);
  drupal_set_message(t('The league event type %label has been deleted.', $t_args));
  watchdog('league_event', 'Deleted league event type %label.', $t_args, WATCHDOG_NOTICE);
}

/**
 * Implements hook_views_api().
 */
function league_event_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'league_event') . '/views',
  );
}

/**
 * Implements hook_field_extra_fields().
 *
 * Create extra fields for use in league_game view_modes
 */
function league_event_field_extra_fields() {
  $items = array();

  $game_types = array_keys(league_game_get_types());
  foreach ($game_types as $type) {
    $items['league_game'][$type]['display'] = array(
      'league_event_goal_A'  => array(
        'label'       => t('Goals A'),
        'description' => t('Goals Team A'),
        'weight'      => 10,
      ),
      'league_event_goal_B'  => array(
        'label'       => t('Goals B'),
        'description' => t('Goals Team B'),
        'weight'      => 11,
      ),
    );
  }
  return $items;
}

/**
 * Implements hook_league_game_view_alter().
 *
 * Insert new fields in league_game view_mode.
 *
 */
function league_event_league_game_view_alter(&$content) {
  $content['league_event_goal_A'] = array('#markup' => theme('league_event', array(
    'game' => $content['#game_id'],
    'label' => t('Goals A'),
    'type' => array('goal', 'own_goal'),
    'team' => 'a'
  )));
  $content['league_event_goal_B'] = array('#markup' => theme('league_event', array(
    'game' => $content['#game_id'],
    'label' => t('Goals B'),
    'type' => array('goal', 'own_goal'),
    'team' => 'b'
  )));
}

/**
* Implements hook_theme().
*/
function league_event_theme() {
  return array(
    'league_event' => array(
      'template' => 'league_event',
      'variables' => array(
        'game' => 0,
        'team' => 'a',
        'type' => NULL,
        'label' => NULL,
      ),
    ),
    'league_event_data' => array(
      'template' => 'league_event_data',
      'variables' => array(
        'icon' => NULL,
        'minute' => 0,
        'player' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_THEME(&$variables).
 */
function league_event_preprocess_league_event(&$variables) {
  $team = league_game_get_team($variables['game'], $variables['team']);
  $variables['items'] = league_event_html($variables['game'], $team, $variables['type']);
  $variables['label'] = league_get_node_ref($team);
}

/**
 * Generates HTML output.
 *
 * @gid: Is the id of the referenced game
 */
function league_event_html($gid = 0, $team = 0, $types = array('goal')) {
  $module_path = drupal_get_path('module', 'league_event');
  drupal_add_css($module_path . '/league_event.css');
  $query = db_select('league_event', 'e');
  $query->join('league_event_type', 't', 'e.type = t.type');
  $query->fields('e', array('comment', 'game_id', 'minute', 'person_id', 'type', 'team_id'))
    ->fields('t', array('class_icon', 'other_team'))
    ->condition('e.game_id', $gid, '=')
    ->condition('e.type', $types, 'IN')
    ->orderBy('minute', 'ASC');
  $result = $query->execute();
  $events = $result->fetchAll();
  $render_array = array();
  foreach ($events as $event) {
    if ( ($event->team_id == $team && !$event->other_team) || ($event->team_id != $team && $event->other_team)) {
      $render_array[] = theme('league_event_data', array(
        'icon' => $event->class_icon,
        'minute' => $event->minute,
        'player' => league_person_get_name($event->person_id),
      ));
    }
  }

  return $render_array;
}

/**
 * Generates admin list output.
 *
 * @gid: Is the id of the referenced game
 */
function league_event_admin_list($game_id) {
  return league_event_list(array($game_id));
}

/**
 * Generates league_event table list output.
 *
 * @gid: Is the id of the referenced game
 */
function league_event_list(array $games = array(), $team = 'all', $type = 'all', $player = 'all') {
  $events = league_event_get_public_events($games);
  $header = array(t('Event'), t('Minute'), t('Team'), t('Person'), t('Edit'), t('Delete'));
  $rows = array();
  foreach ($events as $event) {
    $node = node_load($event->team_id);//load node of type pais
    $rows[] = array(
      league_event_field_table('league_event_type', 'type',$event->type, 'label'),
      $event->minute,
      $node->title,
      league_person_get_name($event->person_id),
      l('Edit', 'league_game/' . $event->game_id . '/events/edit/' . $event->id),
      l('Delete', 'league_game/' . $event->game_id . '/events/delete/' . $event->id),
    );
  }
  return '<div>' . l('Add new event to this game', 'league_game/' . $games[0] . '/events/add') . '</div>' . theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('class' => array('league-event-admin-list'))
  ));
}

/**
 * Generates admin list output.
 * @gid: Is the id of the referenced game
 */
function league_event_type_admin_list() {
  $event_types = league_event_load_event_types('all');
  $header = array(t('ID'), t('Type'), t('Label'), t('Points'), t('Icon'), t('Weight'), t('Edit'));
  $rows = array();
  foreach ($event_types as $event_type) {
    $rows[] = array(
      $event_type->id,
      $event_type->type,
      t($event_type->label),
      $event_type->points,
      $event_type->class_icon,
      $event_type->weight,
      l('Edit', 'admin/league/settings/league_event_type/edit/' . $event_type->id
    ));
  }
  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('class' => array('league-event-type-admin-list'))
  ));
}

/**
 * Returns an array of events under conditions.
 *
 * @gid: Array of gids of the referenced game
 * @team: Is the id of the referenced game
 * @type: Is the id of the referenced game
 * @player: Is the id of the referenced game
 */
function league_event_get_events(array $gid = array(), $team = 'all', $type = 'all', $player = 'all') {
  $query = db_select('league_event','m');
  $query->fields('m',array('id', 'comment', 'game_id', 'minute', 'person_id', 'team_id', 'type'));
  if (count($gid) > 0) $query->condition('m.game_id', $gid, 'IN');
  if ($team != 'all') $query->condition('m.team_id', $team, '=');
  if ($type != 'all') $query->condition('m.type', $type, '=');
  if ($player != 'all') $query->condition('m.person_id', $player, '=');
  $events = $query->execute();
  return $events;
}

/**
 * Returns an array of public events under conditions.
 *
 * @gid: Array of gids of the referenced game
 * @team: Is the id of the referenced game
 * @type: Is the id of the referenced game
 * @player: Is the id of the referenced game
 */
function league_event_get_public_events(array $gid = array(), $team = 'all', $player = 'all') {
  $query = db_select('league_event','m');
  $query->fields('m',array('id', 'comment', 'game_id', 'minute', 'person_id', 'team_id', 'type'));
  $query->join('league_event_type', 't', 'm.type = t.type');
  $query->condition('t.active', 1, '=');
  $query->condition('t.public', 1, '=');
  if (count($gid) > 0) $query->condition('m.game_id', $gid, 'IN');
  if ($team != 'all') $query->condition('m.team_id', $team, '=');
  if ($player != 'all') $query->condition('m.person_id', $player, '=');
  $events = $query->execute();
  return $events;
}

/**
 * Returns an array of event .
 *
 */
function league_event_load_events($event = 'all') {
  $query = db_select('league_event','m');
  $query->fields('m',array('id', 'comment', 'game_id', 'minute', 'person_id', 'team_id', 'type'));
  if ($event != 'all') $query->condition('m.id',$event,'=');
  $events = $query->execute();
  return $events->fetchObject();
}

/**
 * Returns an array of event types.
 *
 * @gid: Array of gids of the referenced game
 * @team: Is the id of the referenced game
 * @type: Is the id of the referenced game
 * @player: Is the id of the referenced game
 */
function league_event_load_event_types($type = 'all', $active = 'all', $public = 'all', $published = 'all') {
  $query = db_select('league_event_type','m');
  $query->fields('m', array('id', 'label', 'points', 'class_icon', 'type', 'weight'));
  if ($type != 'all') $query->condition('m.type', $type, '=');
  if ($active != 'all') $query->condition('m.active', $active, '=');
  if ($public != 'all') $query->condition('m.public', $public, '=');
  if ($published != 'all') $query->condition('m.published', $published, '=');
  $query->orderBy('weight', 'ASC');
  $event_types = $query->execute();
  return $event_types->fetchAll();
}

/**
 * Get the list of league_event types.
 */
function league_event_get_event_types($public = 1) {
  $types =  league_event_load_event_types('all', 1, $public);
  foreach($types as $type) {
    $results[$type->type] = t($type->label);
  }
  return $results;
}

function league_event_type_name_exists($type = NULL) {
  $types = db_query_range('SELECT 1 FROM {league_event_type} WHERE type = :type', 0, 1, array(':type' => $type))->fetchField();
  return $types;
}

function league_event_type_class_exists($value) {
  return FALSE;
}

/**
 * Save new league_event.
 */
function league_event_save($event) {
  drupal_write_record ('league_event', $event);
  $result = $event ['id'];
  return $result;
}

/**
 * Update league_event.
 */
function league_event_update($table,$id) {
  drupal_write_record ('league_event', $table, $id);
  $result = $table ['id'];
  return $result;
}

/**
 * Delete league_event.
 */
function league_event_delete($id) {
  db_delete('league_event')
  ->condition('id', $id)
  ->execute();
}

/**
 * return field of legue_event_type table
 */
function league_event_type_field($id, $field) {
  $sql = db_select('league_event_type', 'l')
    ->condition('l.id', $id, '=')
    ->fields('l',array($field))
    ->execute()
    ->fetchObject();
  $sql = $sql->$field;
  return $sql;
}

/**
 * Function delete type league_event_type
 */
function league_event_types_delete($type) {
  db_delete('league_event_type')
  ->condition('id', $type['id'])
  ->execute();
}

/*
 * return field of table general
 */
function  league_event_field_table($table, $key_primary, $id, $field){
  $sql=db_select($table, 'l')
    ->condition('l.'. $key_primary, $id,'=')
    ->fields('l',array($field))
    ->execute()
    ->fetchObject();
  $row = $sql->$field;
  return $row;
}

/*
 * return event type icon
 */
function league_event_get_event_type_icon ( $event ) {
  $types = league_event_load_event_types($event->type);
  return $types[0]->class_icon;
}
