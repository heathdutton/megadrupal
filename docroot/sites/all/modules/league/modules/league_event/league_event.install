<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */

/**
 * Default settings storage.
 */
function _league_event_defaults() {
  return array(
    'event' => array(
      'start' => 'start',
      'bench' => 'bench',
      'in' => 'in',
      'out' => 'out',
    ),
  );
}

/*
 + implements hook_install
 *
 */
function league_event_install() {
  variable_set('league_event_settings', _league_event_defaults());
  // Add a default entries.
  $fields = array(
    'type' => 'goal',
    'label' => 'Goal',
    'class_icon' => 'goal',
    'points' => 1,
    'is_locked' => 1,
  );
  db_insert('league_event_type')->fields($fields)->execute();

  $fields = array(
    'type' => 'own_goal',
    'label' => 'Own Goal',
    'class_icon' => 'own_goal',
    'points' => 1,
    'is_locked' => 1,
  );
  db_insert('league_event_type')->fields($fields)->execute();

  $fields = array(
    'type' => 'yellow',
    'label' => 'Yellow Card',
    'class_icon' => 'yellow_card',
    'points' => 1,
    'is_locked' => 1,
  );
  db_insert('league_event_type')->fields($fields)->execute();

  $fields = array(
    'type' => 'red',
    'label' => 'Red Card',
    'class_icon' => 'red_card',
    'points' => 1,
    'is_locked' => 1,
  );
  db_insert('league_event_type')->fields($fields)->execute();

  $fields = array(
    'type' => 'in',
    'label' => 'Substitution In',
    'class_icon' => 'substitution_in',
    'points' => 1,
    'is_locked' => 1,
  );
  db_insert('league_event_type')->fields($fields)->execute();

  $fields = array(
    'type' => 'out',
    'label' => 'Substitution Out',
    'class_icon' => 'substitution_out',
    'points' => 1,
    'is_locked' => 1,
  );
  db_insert('league_event_type')->fields($fields)->execute();

    $fields = array(
    'type' => 'start',
    'label' => 'Start player',
    'class_icon' => 'start',
    'points' => 1,
    'is_locked' => 1,
    'public' => 0,
  );
  db_insert('league_event_type')->fields($fields)->execute();

  $fields = array(
    'type' => 'bench',
    'label' => 'Bench player',
    'class_icon' => 'bench',
    'points' => 1,
    'is_locked' => 1,
    'public' => 0,
  );
  db_insert('league_event_type')->fields($fields)->execute();

}

/**
 * Implements hook_schema().
 */
function league_event_schema() {
  $schema = array();

  $schema['league_event'] = array(
    'description' => 'The base table for league_event entries.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique league_event type identifier.',
      ),
      'game_id' => array(
        'description' => 'ID of the game',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The machine-readable name of this league_event type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'team_id' => array(
        'description' => 'ID of the team',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'minute' => array(
        'description' => 'Minute',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'Number of points for this league_event',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'person_id' => array(
        'description' => 'ID of the person',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'comment' => array(
        'description' => 'Comment for the event',
        'type' => 'varchar', 
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),     
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'type' => array('type'),
      'game_id' => array('game_id'),
      'team_id' => array('team_id'),
      'person_id' => array('person_id'),
    ),
  );

  $schema['league_event_type'] = array(
    'description' => 'The types of league_events.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique league_event type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this league_event type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this league_event type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'class_icon' => array(
        'description' => 'Class the icons.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'points' => array(
        'description' => 'Default number of points for this league_event',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'is_locked' => array(
        'description' => 'Prevent key events for being deleted',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'public' => array(
        'description' => 'public or private type event',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'active' => array(
        'description' => 'active type event',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'published' => array(
        'description' => 'published type event',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'other_team' => array(
        'description' => 'Event for other team like Own Goal',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'Weight to allow order in lists',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );
  return $schema;

}

/**
 * Implementation of hook_uninstall().
 * Only clears our variables, so a fresh installation can repopulate them.
 */
function league_event_uninstall() {
  // Settings.
  variable_del('league_event_settings');
}

/**
 * Add weight field for league_event
 */
function league_event_update_7001() {
  db_add_field('league_event_type', 'weight', array(
      'description' => 'Weight to allow order in lists',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    )
  );
}

/**
 * Add other team field for league_event
 */
function league_event_update_7002() {
  db_add_field('league_event_type', 'other_team', array(
      'description' => 'Inverse team event like Own Goal',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    )
  );
}
