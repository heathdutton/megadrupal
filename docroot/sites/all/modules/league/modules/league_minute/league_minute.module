<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

function league_minute_menu() {
  $items=array();
  $items['admin/league/settings/league_minute']=array(
    'title' => t('Minute to minute'),
    'description' => t('Shows minute to minute report for League Game'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_minute_admin'),
    'access arguments' => array('administer league_minute'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['league_game/%/minutes'] = array(
    'title' => t('Admin minute by minute'),
    'page callback' => 'league_minute_list',
    'page arguments' => array(1),
    'access arguments' => array('edit league_minute'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 10,
  );
  $items['league_game/%/minutes/edit/%'] = array(
    'title' => t('Edit minute by minute'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_minute_minute_admin','edit',1,4),
    'access arguments' => array('edit league_minute'),
    'weight' => 10,
  );
  $items['league_game/%/minutes/add'] = array(
    'title' => t('Add minute by minute'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_minute_minute_admin','add',1),
    'access arguments' => array('edit league_minute'),
    'weight' => 10,
  );
  $items['league_game/%/minutes/delete/%'] = array(
    'title' => t('Delete minute by minute'),
    'page callback' => 'league_minute_delete_page',
    'page arguments' => array(4),
    'access arguments' => array('edit league_minute'),
  );
  $items['league_minute/ajax/%'] = array(
    'page callback' => 'league_minute_ajax_callback',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'league_minute_delivery_callback',
  );
  $items['admin/league/settings/league_minute_type']=array(
    'title' => t('Minute to minute types'),
    'description' => t('Administer league minute types'),
    'page callback' => 'league_minute_type_admin_list',
    'access arguments' => array('administer league_minute types'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/league/settings/league_minute_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 41,
  );
  $items['admin/league/settings/league_minute_type/add']=array(
    'title' => t('Add minute types'),
    'description' => t('Add league minute types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_minute_types_form_edit','add'),
    'access arguments' => array('administer league_minute types'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/league/settings/league_minute_type/edit/%']=array(
    'title' => t('Edit minute types'),
    'description' => t('Edit league minute types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_minute_types_form_edit', 'edit', 5),
    'access arguments' => array('administer league_minute types'),
  );
  $items['admin/league/settings/league_minute_type/delete/%'] = array(
    'title' => 'Delete League minute type',
    'page callback' => 'league_minute_types_delete_page',
    'page arguments' => array(5),
    'access arguments' => array('administer league_minute types'),
   );
  return $items;
}

/**
 * Callback function for admin setting.
 */
function league_minute_admin($form, &$form_state) {
  $settings = variable_get('league_minute_settings');

  // General options
  $options['minute'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options['minute']['filter_format'] = array(
    '#type' => 'select',
    '#title' => t('Filter Format'),
    '#options' => league_get_filter_formats(),
    '#default_value' => $settings['minute']['filter_format'],
    '#description' => t('Define a default filter format to use for minute input'),
    '#weight' => 0,
  );
  $options['ajax'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ajax Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options['ajax']['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate ajax refresh for minute by minute feed'),
    '#default_value' => isset($settings['ajax']['active']) ? $settings['ajax']['active'] : 0,
    '#description' => t('Activate the ajax  refresh over live games. It will only be activated if game is set as LIVE.'),
  );
  $options['ajax']['interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Ajax refresh interval'),
    '#default_value' => isset($settings['ajax']['interval']) ? $settings['ajax']['interval'] : 60000,
    '#description' => t('The time in ms for AJAX refresh'),
    '#states' => array(
      'visible' => array(
        ':input[name="league_minute_settings[ajax][active]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $options['ajax']['cache'] = array(
    '#type' => 'textfield',
    '#title' => t('Ajax page refresh time'),
    '#default_value' => isset($settings['ajax']['cache']) ? $settings['ajax']['cache'] : 20000,
    '#description' => t('The time in ms before the return call is regenetared'),
    '#states' => array(
      'visible' => array(
        ':input[name="league_minute_settings[ajax][active]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $options['#tree'] = TRUE;
  $form['league_minute_settings'] = $options;

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function league_minute_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer league_minute' => array(
      'title' => t('Administer league minute settingss'),
      'description' => t('Administer League Minute general settings.'),
    ),
    'administer league_minute types' => array(
      'title' => t('Administer league minute types'),
      'description' => t('Administer League Minute Types.'),
    ),
    'view league_minute page' => array(
      'title' => t('View league minute page'),
      'description' => t('View League Minute page inside game context.'),
    ),
    'edit league_minute' => array(
      'title' => t('Add/edit league minute'),
      'description' => t('Add, edit and delete League Minutes.'),
    ),
  );
  return $permissions;  
}

/**
 * Implementation of hook_block_info();
 */
function league_minute_block_info(){
  $blocks['league_minute_block'] = array(
    'info' => t('League minute to minute'),
    'cache' => DRUPAL_NO_CACHE,
  );   
  return $blocks;  
}

/**
 * Implementation of hook_block_view();
*/
function league_minute_block_view($delta = '') {
  $block = array();  
  switch ($delta) {
    case 'league_minute_block':
      if (arg(0) == 'league_game') {
        $gid = arg(1);
        $block['content'] = theme('league_minute', array('game' => $gid, 'label' => t('Minute by minute')));
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_field_extra_fields().
 */
function league_minute_field_extra_fields() {
  $items = array();

  $game_types = array_keys(league_game_get_types());

  foreach ($game_types as $type) {
    $items['league_game'][$type]['display'] = array(
      'league_minute'  => array(
        'label'       => t('League Minute'),
        'description' => t('League minute to minute details'),
        'weight'      => 10,
      ),
    );
  }

  return $items;
}

/**
 * Implements hook_league_game_view_alter().
 *
 */
function league_minute_league_game_view_alter(&$content) {
  $settings = variable_get('league_minute_settings');
  $game = league_game_load($content['#game_id']);
  if ($game) {
    $content['league_minute']['#markup'] = theme(
      'league_minute', array(
        'game' => $content['#game_id'],
        'label' => t('Minute by minute'),
      )
    );
    if($settings['ajax']['active'] && $game->status == 1) {
      $content['league_minute']['#attached'] = array(
        'js' => array(
          array(
            'data' => array(
              'league_minute' => array(
                'interval' => $settings['ajax']['interval'],
                'cache' => $settings['ajax']['cache'],
                'game' => $content['#game_id']
              )
            ),
            'type' => 'setting'
          ),
          drupal_get_path('module', 'league_minute') . '/league_minute_ajax.js'
        ),
      );
    }
  }
}

/**
* Implements hook_field_formatter_info().
*/
function league_minute_field_formatter_info() {
  $info = array(
    'league_minute' => array(
      'label' => t('List of minute to minute'),
      'field types' => array('league_minute'),
      'description' => t('Displays minute to minute information for current game.'),
    ),
  );
  return $info;
}

/**
* Implements hook_field_formatter_view().
*/
function league_minute_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'league_minute':
      foreach ($items as $delta => $item) {
        $element[$delta] = theme('league_minute', array('game' => $gid, 'label' => t('Minute by minute')));
      }
    break;
  }
  return $element;
}

/**
* Implements hook_theme().
*/
function league_minute_theme() {
  return array(
    'league_minute' => array(
      'template' => 'league_minute',
      'variables' => array(
        'game' => 0,
        'label' => NULL,
      ),
    ),
    'league_minute_ajax' => array(
      'template' => 'league_minute_ajax',
      'variables' => array(
        'game' => 0,
        'label' => NULL,
      ),
    ),
    'league_minute_data' => array(
      'template' => 'league_minute_data',
      'variables' => array(
        'icon' => NULL,
        'minute' => 0,
        'comment' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_THEME(&$variables).
 */
function league_minute_preprocess_league_minute(&$variables) {
  $variables['items'] = league_minute_html($variables['game']);
  $variables['empty'] = count($variables['items']) > 0 ? FALSE : TRUE;
}

/**
 * Generates HTML output.
 *
 * @gid: Is the id of the referenced game
 */
function league_minute_html($gid) {
  $module_path = drupal_get_path('module', 'league_minute');
  drupal_add_css($module_path . '/league_minute.css');
  $minutes = db_select('league_minute','m')
    ->fields('m',array('comment', 'class_icon', 'game_id', 'minute', 'format'))  
    ->condition('m.game_id', $gid,'=')
    ->orderBy('minute', 'DESC')
    ->execute()
    ->fetchAll();
  $render_array = array();

  foreach ($minutes as $minute) {
    $render_str = check_markup($minute->comment, $minute->format, '', TRUE);
    $render_array[] = theme('league_minute_data', array(
      'icon' => $minute->class_icon,
      'minute' => $minute->minute,
      'comment' => render($render_str),
    ));
  }

  return $render_array;
}

/**
 * Implements hook_preprocess_THEME(&$variables).
 */
function league_minute_preprocess_league_minute_ajax(&$variables) {
  $variables['items'] = league_minute_html_ajax($variables['game']);
}

/**
 * Generates HTML output.
 *
 * @gid: Is the id of the referenced game
 */
function league_minute_html_ajax($gid) {
  $minutes = db_select('league_minute','m')
    ->fields('m',array('comment', 'class_icon', 'game_id', 'minute', 'format'))  
    ->condition('m.game_id', $gid,'=')
    ->orderBy('minute', 'DESC')
    ->execute()
    ->fetchAll();
  $render_array = array();

  foreach ($minutes as $minute) {
    $render_str = check_markup($minute->comment, $minute->format, '', TRUE);
    $render_array[] = theme('league_minute_data', array(
      'icon' => $minute->class_icon,
      'minute' => $minute->minute,
      'comment' => render($render_str),
    ));
  }

  return $render_array;
}

/**
 * Generates league_minute table list output.
 *
 * @gid: Is the id of the referenced game
 */
function league_minute_list($game_id) {
  $game = league_game_load($game_id);
  $edit = user_access('edit league_minute');
  if ($game->status != 1) $edit = FALSE;
  $minutes = league_minute_get_minutes($game_id);
  $header = $edit ? array(t('Minute'), t('Icon'), t('Comment'), t('Edit')) : array(t('Minute'), t('Icon'), t('Comment'));
  $rows = array();
  foreach ($minutes as $minute) {
    $comment = check_markup($minute->comment, $minute->format, '', TRUE);
    if ($edit) {
      $rows[] = array(
        $minute->minute,
        $minute->class_icon,
        render($comment),
        l('Edit', 'league_game/' . $minute->game_id . '/minutes/edit/' . $minute->id)
      );
    } 
    else {
      $rows[] = array(
        $minute->minute,
        $minute->class_icon,
        render($comment),
      );
    }
  }
  $status_form = drupal_get_form('league_minute_game_status_form', $game);
  $add_link = $edit ? '<div class="minutes-add">' . l("Add new minute", 'league_game/' . arg(1) . '/minutes/add') . '</div>' : '<p class="minutes-add">' . t('To Add/Edit minutes, game status must be set to LIVE.') . '</p>';
  return drupal_render($status_form) . $add_link . theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('class' => array('league-minute-admin-list'))
  ));
}

/**
 * Callback function for add/edit league_minute.
 */
function league_minute_minute_admin($form, &$form_state, $type, $gid=0, $id_minute=0) {
  $form = array();
  $league_minute = $id_minute>0 ? league_minute_load_minutes($id_minute) : '';
  // General options
  $form['id'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($league_minute->id) ? $league_minute->id : '',
  );
  $form['game_id'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($league_minute->game_id) ? $league_minute->game_id:$gid,
  );
  $form['minute'] = array(
    '#type' => 'fieldset',
    '#title' => t('Minute to minute'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['minute']['minute'] = array(
    '#type' => 'textfield',
    '#title' => t('Minute'),
    '#default_value' => isset($league_minute->minute) ? $league_minute->minute : 0,
    '#weight' => -20,
  );
  $form['minute']['class_icon'] = array(
    '#type' => 'select',
    '#title' => t('Icons'),
    '#options' => league_minute_get_minute_icons(),
    '#default_value' => isset($league_minute->class_icon) ? $league_minute->class_icon :0,
    '#weight' => -10,
  );
  $settings = variable_get('league_minute_settings');
  $form['minute']['comment'] = array(
    '#type' => 'text_format',
    '#title' => t('Comment'),
    '#default_value' => isset($league_minute->comment) ? $league_minute->comment : '',
    '#format' => isset($league_minute->format) ? $league_minute->format : $settings['minute']['filter_format'],
    '#maxlength' => 255,
    '#required' => FALSE,
    '#weight' => -5,
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
   ); 
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#access' => $type == 'edit',
    '#submit' => array('league_minute_delete_submit'),
   );

  return $form;
}

/**
 * Submit function for the 'Delete' button on the league_minute editing form.
 */
function league_minute_delete_submit($form, &$form_state) {
  $form_state['redirect'] = 'league_game/'. arg(1). '/minutes/delete/' . $form_state['values']['id'];
}

/**
 * Menu callback; check access and get a confirm form for deletion of a league_minute_types.
 */
function league_minute_delete_page($minutes) {
  return drupal_get_form('league_minute_delete_confirm', $minutes);
}

/**
 * Build a confirm form for deletion of a league_minute
 */
function league_minute_delete_confirm($form, &$form_state, $id) {
  $minute = array(
    'id' => $id,
    'minute' => league_event_field_table('league_minute','id',$id,'minute'),
  );
  $form['#minutes'] = $minute;
  $caption = '<p>' . t('This action cannot be undone.') . '</p>';
  return confirm_form($form, t('Are you sure you want to delete the league the minute %minute?', array('%minute' => $minute['minute'])), 'league_game/'. arg(1) . '/minutes/' . $minute['id'], $caption, t('Delete'));
}

/**
 * Delete a league_minute.
 */
function league_minute_delete_confirm_submit($form, &$form_state) {
  $minute = $form['#minutes'];
  $form_state['redirect'] = 'league_game/'. arg(1).'/minutes';
  league_delete('league_minute', 'id', $minute['id']);
  $t_args = array('%minute' => $minute['minute']);
  drupal_set_message(t('The minute %label has been deleted.', $t_args));
  watchdog('league_minute', 'Deleted league minute %minute.', $t_args, WATCHDOG_NOTICE);
}

/**
 * Callback function submit add/edit league_minute.
 */
function league_minute_minute_admin_submit($form, &$form_state) {
  $minutes = $form_state['values'];
  $minutes['format'] = $form_state['values']['comment']['format'];
  $minutes['comment'] = $form_state['values']['comment']['value'];
  league_record($minutes, 'league_minute', 'id');
  $nid = arg(1);
  drupal_set_message( t('Your configuration has been saved.') );
  $path ='league_game/' . $nid . '/minutes';
  $form_state['redirect'] = $path; 
}

/**
 * Returns an array of minute .
 *
 */
function league_minute_load_minutes($minute = 'all') {
  $query = db_select('league_minute','m');
  $query->fields('m',array('id','game_id', 'minute', 'comment', 'class_icon'));
  if ($minute != 'all') $query->condition('m.id',$minute,'=');
  $minutes = $query->execute();
  return $minutes->fetchObject();
}

function league_minute_get_minutes($game_id) {
  $minutes = db_select('league_minute','m')
    ->fields('m',array('id', 'comment', 'class_icon', 'game_id', 'minute', 'format'))  
    ->condition('m.game_id',$game_id,'=')
    ->orderBy('minute','DESC')
    ->execute()
    ->fetchAll();
  return $minutes;
}

/**
 * Generates admin list output.
 *
 * @gid: Is the id of the referenced game
 */
function league_minute_type_admin_list() {
  $minute_types = league_minute_load_minute_types('all');
  $header = array(t('ID'), t('Label'), t('Icon'), t('Active'), t('Edit'));
  $rows = array();
  foreach ($minute_types as $minute_type) {
    $rows[] = array(
      $minute_type->id,
      $minute_type->label,
      $minute_type->class_icon,
      $minute_type->active ? t('Yes') : t('No'),
      l('Edit', 'admin/league/settings/league_minute_type/edit/' . $minute_type->id
    ));
  }
  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('class' => array('league-event-type-admin-list'))
  ));
}

/**
 * Returns an array of minute types.
 *
 * @id: The id of the minute type
 */
function league_minute_load_minute_types($id = 'all', $active = 'all') {
  $query = db_select('league_minute_type','m');
  $query->fields('m',array('id', 'label', 'class_icon', 'active'));
  if ($id != 'all') $query->condition('m.id', $id, '=');
  if ($active != 'all') $query->condition('m.active', $active, '=');
  $minute_types = $query->execute();

  return $minute_types;
}

/**
 * Get the list of league_minute_types.
 */
function league_minute_get_minute_types() {
  $types =  league_minute_load_minute_types('all', TRUE);
  $results[0] = t('- Select -');
  foreach($types as $type) {
    $results[$type->type] = $type->label;
  }
  return $results;
}

/**
 * Get the list of league_minute types.
 */
function league_minute_get_minute_icons() {
  $types =  league_minute_load_minute_types('all', TRUE);
  $results[0] = t('- Select -');
  foreach($types as $type) {
    $results[$type->class_icon] = $type->label;
  }
  return $results;
}
/**
 * Callback function form add/edit league_minute_type types.
 *  @type is add/edit
 *  @id is id of league type minute
 */
function league_minute_types_form_edit($form, &$form_state, $type, $id = 0) {
  $form = array();
  $minute_type = $id > 0 ? league_minute_type_load_minute_type($id) : '';
  $form['id'] = array(
    '#type' => 'hidden',
    '#title' => t('id'),
    '#default_value' => isset($minute_type->id) ? $minute_type->id : NULL,
  ); 
  $form['minute_type'] = array(
    '#type' => 'fieldset',
    '#title' => t('Minute type'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['minute_type']['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => isset($minute_type->label) ? $minute_type->label : '',
    '#maxlength' => 255,
    '#required' => TRUE,
    '#weight' => -10,
  );
  $form['minute_type']['class_icon'] = array(
    '#type' => 'textfield',
    '#title' => t('Class icon'),
    '#default_value' => isset($minute_type->class_icon) ? $minute_type->class_icon : '',
    '#description' => t('CSS class for icon of the event type, only allowed lowercase characters.'),
    '#maxlength' => 15,
    '#required' => TRUE,
    '#weight' => -5,
  );
  $form['minute_type']['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => isset($minute_type->active) ? $minute_type->active : '1',
    '#weight' => -2,
  );
  $form['actions']=array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
   );
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#access' => $type == 'edit',
    '#submit' => array('league_minute_types_delete_submit'),
   );
  return $form;
}

/**
 * Submit function validation league_minute types.
 */
function league_minute_types_form_edit_validate($form, &$form_state) {
  $type = $form_state['values']; 
  if (!ctype_lower ($type['class_icon'])) {
    form_set_error('class_icon', t('Only lower case characters allowed'));
  }
}

/**
 * Returns an array of types minute .
 *
 */
function league_minute_type_load_minute_type($minute_type = 'all') {
  $query = db_select('league_minute_type','m');
  $query->fields('m',array('id', 'label', 'class_icon', 'active'));
  if ($minute_type != 'all') $query->condition('m.id', $minute_type, '=');
  $minute_types = $query->execute();
  return $minute_types->fetchObject();
}

/**
 * Submit function  for add/edit league_minute types.
 */
function league_minute_types_form_edit_submit($form, &$form_state) {
 $type = $form_state['values']; 
 league_record($type, 'league_minute_type', 'id');
 drupal_set_message(t('Your configuration has been saved.'));
 $path = 'admin/league/settings/league_minute_type';
 $form_state['redirect'] = $path; 
}

/**
 * Submit function for the 'Delete' button on the menu editing form.
 */
function league_minute_types_delete_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/league/settings/league_minute_type/delete/' . $form_state['values']['id'];
}

/**
 * Menu callback; check access and get a confirm form for deletion of a league_minute_types.
 */
function league_minute_types_delete_page($type) {
  return drupal_get_form('league_minute_types_delete_confirm', $type);
}

/**
 * Build a confirm form for deletion of a league_minute_types
 */
function league_minute_types_delete_confirm($form, &$form_state, $id) {
  $type = array(
    'id' => $id,
    'label' => league_event_field_table('league_minute_type','id',$id,'label'),
  );
  $form['#types'] = $type;
  $caption = '<p>' . t('This action cannot be undone.') . '</p>';
  return confirm_form($form, t('Are you sure you want to delete the league minute type %label?', array('%label' => $type['label'])), 'admin/league/settings/league_minute_type/edit/' . $type['id'], $caption, t('Delete'));
}

/**
 * Delete a league_minute_types.
 */
function league_minute_types_delete_confirm_submit($form, &$form_state) {
  $type = $form['#types'];
  $form_state['redirect'] = 'admin/league/settings/league_minute';
  league_delete('league_minute_type', 'id', $type['id']);
  $t_args = array('%label' => $type['label']);
  drupal_set_message(t('The league minute type %label has been deleted.', $t_args));
  watchdog('league_minute', 'Deleted league minute type %label.', $t_args, WATCHDOG_NOTICE);
}

/**
 * Save new league_minute.
 */
function league_minute_save($minute) {
  drupal_write_record ('league_minute', $minute);
  $result = $minute ['id'];
  return $result;
}

/**
 * Update league_minute.
 */
function league_minute_update($table,$id) {
  drupal_write_record ('league_minute', $table, $id);
  $result = $table ['id'];
  return $result;
}

/**
 * Delete league_minute.
 */
function league_minute_delete($id) {
  db_delete('league_minute')
  ->condition('id', $id)
  ->execute();
}

/**
 * Returns only content part of the page for HTML AJAX return.
 */
function league_minute_delivery_callback($page_callback_result) {
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    // @todo: Break these up into separate functions?
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        drupal_add_http_header('Status', '404 Not Found');

        print t("Page not found");
        break;

      case MENU_ACCESS_DENIED:
        drupal_add_http_header('Status', '403 Forbidden');

        print t("Access denied");
        break;

      case MENU_SITE_OFFLINE:
        print t('Site under maintenance');
        break;

      default:
        print t('Unknown error');
        break;
    }
  }
  elseif (isset($page_callback_result)) {
    $html = is_string($page_callback_result) ? $page_callback_result : drupal_render($page_callback_result);
    print $html;
    drupal_page_footer();
  }
}

/**
 * Builds render array using minute theme.
 *
 */
function league_minute_ajax_callback($gid) {
  return array('#markup' => theme('league_minute_ajax', array(
    'game' => $gid,
    'label' => t("Minute by minute"),
  )));
}

/**
 * Form callback: create or edit a league_game.
 *
 * @param $league_game
 *   The league_game object to edit or for a create form an empty league_game object
 *     with only a league_game type defined.
 */
function league_minute_game_status_form($form, &$form_state, $league_game) {
  drupal_set_title(isset($league_game->name) ? $league_game->name : t('Edit result'));
  // Add the default field elements.
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Game Status'),
    '#options' => league_game_get_status_type(),
    '#default_value' => isset($league_game->status) ? $league_game->status : 0,
    '#weight' => 10,
  );

  // Add the field related form elements.
  $form_state['league_game'] = $league_game;
//  field_attach_form('league_game', $league_game, $form, $form_state);

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save game status'),
    '#submit' => $submit + array('league_minute_game_status_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  return $form;
}

/**
 * Form API submit callback for the league_game result form.
 * 
 * @todo remove hard-coded link
 */
function league_minute_game_status_form_submit(&$form, &$form_state) {

  $league_game = entity_ui_controller('league_game')->entityFormSubmitBuildEntity($form, $form_state);
  // Save the league_game and go back to the list of league_games
  
  $league_game->changed = time();
  
  if ($league_game->save()) {
    drupal_alter('league_game_form_save', $league_game);
  }

}
