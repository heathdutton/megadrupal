<?php
/**
* @file
* Main Drupal League Module.
*
*/

/**
 * Implements hook_init().
 */

function league_init() {
  $module_path = drupal_get_path('module', 'league');
//  drupal_add_js($module_path . '/league.js');
}

/**
* Implementation of hook_menu().
*/
function league_menu() {
  // Admin settings.
  $items['admin/league/settings'] = array(
    'title' => t('League'),
    'description' => t('Build a Drupal based League'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('league_admin'),
    'access arguments' => array('administer league configuration'),
  );
  // Only to generate a TAB
  $items['admin/league/settings/config'] = array(
    'title' => 'Drupal League',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/league/settings/callbacks/node_autocomplete_callback'] = array(
    'page callback' => 'league_node_autocomplete_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Callback function for admin setting.
 */
function league_admin($form, &$form_state) {
  $settings = variable_get('league_settings');

  // General options
  $options['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options['general']['emblem_image_style'] = array(
    '#type' => 'select',
    '#title' => t('Score emblem image style'),
    '#options' => league_get_image_styles(),
    '#default_value' => $settings['general']['emblem_image_style'],
    '#description' => t('Emblem image style for score display'),
  );

  $options['points'] = array(
    '#type' => 'fieldset',
    '#title' => t('Points for matches'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options['points']['win'] = array(
    '#type' => 'textfield',
    '#title' => t('Winner points'),
    '#default_value' => $settings['points']['win'],
    '#description' => t('Points for winner'),
    '#size' => 3,
    '#maxlength' => 1,
  );
  $options['points']['tie'] = array(
    '#type' => 'textfield',
    '#title' => t('Tie points'),
    '#default_value' => $settings['points']['tie'],
    '#description' => t('Points for tie'),
    '#size' => 3,
    '#maxlength' => 1,
  );
  $options['points']['loose'] = array(
    '#type' => 'textfield',
    '#title' => t('Looser points'),
    '#default_value' => $settings['points']['loose'],
    '#description' => t('Points for looser'),
    '#size' => 3,
    '#maxlength' => 1,
  );
  $options['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['advanced']['team_bundle'] = array(
    '#type' => 'select',
    '#title' => t('Team bundle'),
    '#options' => league_get_nodes_types(),
    '#default_value' => $settings['advanced']['team_bundle'],
    '#description' => t('Bundle holding team information'),
  );

  $options['#tree'] = TRUE;
  $form['league_settings'] = $options;

  return system_settings_form($form);
}

/**
 * Form API validate callback for the league_admin form
 */
function league_admin_validate(&$form, &$form_state) {
  $values = $form_state['values']['league_settings'];
  if (!is_numeric($values['points']['win'])) {
    form_set_error('league_settings][points][win', t('Win points must be an integer value'));
  } elseif (intval($values['points']['win']) < 0) {
    form_set_error('league_settings][points][win', t('Win points must be positive value'));
  }
  if (!is_numeric($values['points']['tie'])) {
    form_set_error('league_settings][points][tie', t('Tie points must be an integer value'));
  } elseif (intval($values['points']['loose']) < 0) {
    form_set_error('league_settings][points][tie', t('Tie points must be positive value'));
  }
  if (!is_numeric($values['points']['loose'])) {
    form_set_error('league_settings][points][loose', t('Loose points must be an integer value'));
  } elseif (intval($values['points']['loose']) < 0) {
    form_set_error('league_settings][points][loose', t('Loose points must be positive value'));
  }
}

/**
 * Implements hook_admin_paths().
 */
function league_admin_paths() {
  // If admin them for editing content
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'league_person/*/edit' => TRUE,
      'league_person/*/delete' => TRUE,
      'league_game/*/edit' => TRUE,
      'league_game/*/delete' => TRUE,
      'league_game/*/edit_result' => TRUE,
      'league_game/*/events' => TRUE,
      'league_game/*/events/*' => TRUE,
      'league_game/*/lineup' => TRUE,
      'league_game/*/substitutions' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_permission().
 */
function league_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer league configuration' => array(
      'title' => t('Administer league settingss'),
      'description' => t('Administer League general settings.'),
    ),
  );
  return $permissions;  
}

/**
 * Utility functions
 */
function league_get_node_ref($nid) {
  if ($node = node_load($nid)) {
    return l($node->title, drupal_get_path_alias('node/' . $node->nid));
  } 
  else {
    return '';
  }
}

function league_get_node_title($nid) {
  if ($node = node_load($nid)) {
    return $node->title;
  }
  else {
    return '';
  }
}

/**
 * Clear string for classes or URL.
 */
function league_cleanstring($string, $clean_settings = array(
    'clean slash' => TRUE, 
    'ignore words' => array(), 
    'separator' => '_', 
    'replacements' => array(), 
    'transliterate' => TRUE, 
    'reduce ascii' => TRUE, 
    'max length' => FALSE, 
    'lower case' => TRUE,
  )) {

  if (!function_exists('ctools_cleanstring')) {
    module_load_include('inc', 'ctools', 'includes/cleanstring');
  }

  return ctools_cleanstring($string, $clean_settings);
}

/**
 * Get the list of nodes of type $type.
 */
function league_get_team_names() {
  $settings = variable_get('league_settings');
  return league_get_nodes($settings['advanced']['team_bundle'], TRUE, FALSE);
}

/**
 * Get the list of nodes of type $type.
 */
function league_get_stadium_names() {
  $settings = variable_get('league_game_settings');
  return league_get_nodes($settings['advanced']['stadium_bundle'], TRUE, FALSE);
}

/**
 * Get the list of nodes of type $type.
 */
function league_get_matchday_names() {
  $settings = variable_get('league_game_settings');
  return league_get_nodes($settings['advanced']['matchday_bundle'], TRUE, FALSE);
}
/**
 * Get the list of nodes of type $type.
 */
function league_get_nodes($type, $order = TRUE, $select = TRUE) {
  $nodes =  entity_load('node', array(), array('type' => $type));
  $results = array();
  if ($select) $results[0] = t('- Select -');
  foreach($nodes as $node) {
    $results[$node->nid] = $node->title;
  }
  if ($order && count($results) > 1) {
    asort($results);
  }
  return $results;
}

/**
 * Get the list of nodes types.
 */
function league_get_nodes_types() {
  $node_types = node_type_get_types();
  $results = array();
  foreach($node_types as $node_type) {
    if (!$node_type->disabled) $results[$node_type->type] = $node_type->name;
  }
  return $results;
}

/**
 * Get the list of image styles.
 */
function league_get_image_styles() {
  $image_styles = image_styles();
  $results = array();
  foreach($image_styles as $image_style) {
    $results[$image_style['name']] = $image_style['label'];
  }
  return $results;
}

/**
 * Get the list of filter formats.
 */
function league_get_filter_formats() {
  $filter_formats = filter_formats();
  $results = array();
  foreach($filter_formats as $filter_format) {
    $results[$filter_format->format] = $filter_format->name;
  }
  return $results;
}

/**
 * Get the list of nodes of type $type.
 */
function league_get_emblem($nid) {
  $settings = variable_get('league_settings');
  $node = node_load($nid);
  if (isset($node->field_emblem['und'])) {
    $image_uri = $node->field_emblem['und'][0]['uri'];
    $img = theme('image_style', array(
        'path' => $image_uri,
        'style_name' => $settings['general']['emblem_image_style'],
        'alt' => $node->title,
        'title' => $node->title,
      )
    );
    return $img;
  }
  else {
    return '';
  }
}

/**
  * Function delete for league
  */
function league_delete($table, $id_key, $id) {
  db_delete($table)
  ->condition($id_key, $id)
  ->execute();
}

/**
 * Function save data of league_event_type
 * @type submit league_event_types_form_edit  
 * @table name of table
 * @id_key primary key of table
 */
function league_record($array, $table, $id_key) {
  if ($array[$id_key]!=null) {
    drupal_write_record($table, $array, $id_key);
  }
  else {
   drupal_write_record($table, $array);
  }
}

/**
 * Autocomplete callback for nodes by title.
 *
 * Searches for a node by title, but then identifies it by nid, so the actual returned value can be used later by
 * the form.
 *
 * The returned $matches array has
 * * key: The title, with the identifying nid in brackets, like "Some node title [3325]"
 * * value: the title which will is displayed in the autocomplete pulldown.
 *
 * Note that we must use a key style that can be parsed successfully and unambiguously. For example, if we might
 * have node titles that could have [3325] in them, then we'd have to use a more restrictive token.
 *
 * @param $string
 *   The string that will be searched.
 */
function league_node_autocomplete_callback($string = "") {
  $matches = array();
  if ($string) {
    $result = db_select('node')
      ->fields('node', array('nid', 'title'))
      ->condition('title', db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();
    foreach ($result as $node) {
      $matches[$node->title . " [$node->nid]"] = check_plain($node->title);
    }
  }

  drupal_json_output($matches);
}
