<?php

/**
 * @file
 * Processes payments using MerchantOne gateway.
 *
 * Development sponsored by KoreMedia Productions - http://www.koremedia.net
 */
define('UC_MERCHANTONE_LIVE_GATEWAY_URL', 'https://secure.merchantonegateway.com/api/transact.php');

/**
 * Implements hook_menu().
 */
function uc_merchantone_menu() {
  $items = array();


  return $items;
}

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_merchantone_uc_payment_gateway() {
  $gateways['merchantone'] = array(
      'title' => t('Merchant One'),
      'description' => t('Process credit card payments using the HTTP-based API service of Merchant One.'),
      'settings' => 'uc_merchantone_settings_form',
      'credit' => 'uc_merchantone_charge',
      'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function uc_merchantone_settings_form($form, &$form_state) {

  // Allow admin to set duplicate window.
  $form['uc_merchantone_dup_seconds'] = array(
      '#type' => 'select',
      '#title' => t('Duplicate window'),
      '#description' => t('Blocks submission of duplicate transactions within the specified window.  Defaults to 120 seconds.'),
      '#default_value' => variable_get('uc_merchantone_dup_seconds', 120),
      '#options' => drupal_map_assoc(array(0, 15, 30, 45, 60, 75, 90, 105, 120)),
  );

  $form['uc_merchantone_response_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Log full API response messages from Merchant One for debugging.'),
      '#default_value' => variable_get('uc_merchantone_response_debug', FALSE),
  );

  $form['api_id_key'] = array(
      '#type' => 'fieldset',
      '#title' => t('API Credentials'),
      '#description' => t('This information is required for Ubercart to interact with your payment gateway account.'),
  );
  $form['api_id_key']['uc_merchantone_api_username'] = array(
      '#type' => 'textfield',
      '#title' => t('API Username'),
      '#default_value' => variable_get('uc_merchantone_api_username', ''),
  );
  $form['api_id_key']['uc_merchantone_api_password'] = array(
      '#type' => 'textfield',
      '#title' => t('API Password'),
      '#default_value' => variable_get('uc_merchantone_api_password', ''),
  );
  $form['api_id_key']['uc_merchantone_transaction_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Merchant One Transaction POST URL'),
      '#default_value' => variable_get('uc_merchantone_transaction_url', UC_MERCHANTONE_LIVE_GATEWAY_URL),
  );

  return $form;
}

/**
 * Main handler for processing credit card transactions.
 */
function uc_merchantone_charge($order_id, $amount, $data) {
  // Load the order.
  $order = uc_order_load($order_id);

  return _uc_merchantone_charge($order, $amount, $data);
}

/**
 * Handles authorizations and captures through Merchant One
 */
function _uc_merchantone_charge($order, $amount, $data) {
  global $user;

  // Build a description of the order for logging in Auth.Net.
  $description = array();
  foreach ((array) $order->products as $product) {
    $description[] = $product->qty . 'x ' . $product->model;
  }

  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));

  $expiration = str_pad($order->payment_details['cc_exp_month'], 2, '0', STR_PAD_LEFT) . substr($order->payment_details['cc_exp_year'], 2);
  
  // Build the POST data for the transaction.
  $submit_data = array(
      'payment' => 'creditcard',
      'username' => trim(variable_get('uc_merchantone_api_username', '')),
      'password' => trim(variable_get('uc_merchantone_api_password', '')),
      'type' => _uc_merchantone_txn_map($data['txn_type']),
      'amount' => uc_currency_format($amount, FALSE, FALSE, '.'),
      'ccnumber' => $order->payment_details['cc_number'],
      'ccexp' => $expiration,
      'cvv' => $order->payment_details['cc_cvv'],
      'dup_seconds' => variable_get('uc_merchantone_dup_seconds', 120),
      'orderid' => $order->order_id,
      'orderdescription' => substr(implode(', ', $description), 0, 255),
      'firstname' => substr($order->billing_first_name, 0, 50),
      'lastname' => substr($order->billing_last_name, 0, 50),
      'company' => substr($order->billing_company, 0, 50),
      'address1' => substr($order->billing_street1, 0, 60),
      'city' => substr($order->billing_city, 0, 40),
      'state' => substr(uc_get_zone_code($order->billing_zone), 0, 40),
      'zip' => substr($order->billing_postal_code, 0, 20),
      'country' => !$billing_country ? '' : $billing_country[0]['country_iso_code_2'],
      'phone' => substr($order->billing_phone, 0, 25),
      'email' => substr($order->primary_email, 0, 255),
      'ipaddress' => substr(ip_address(), 0, 15),
      'shipping_firstname' => substr($order->delivery_first_name, 0, 50),
      'shipping_lastname' => substr($order->delivery_last_name, 0, 50),
      'shipping_company' => substr($order->delivery_company, 0, 50),
      'shipping_address1' => substr($order->delivery_street1, 0, 60),
      'shipping_city' => substr($order->delivery_city, 0, 40),
      'shipping_state' => substr(uc_get_zone_code($order->delivery_zone), 0, 40),
      'shipping_zip' => substr($order->delivery_postal_code, 0, 20),
      'shipping_country' => !$delivery_country ? '' : $delivery_country[0]['country_iso_code_2'],
  );

  if ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE) {
    $submit_data['transactionid'] = $data['auth_id'];
  }

  $post_url = variable_get('uc_merchantone_transaction_url', UC_MERCHANTONE_LIVE_GATEWAY_URL);

  // Translate the data array into a string we can POST.
  $post_fields = array();
  foreach ($submit_data as $key => $value) {
    $post_fields[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $post_fields));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('uc_merchantone', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return array('success' => FALSE);
  }
  curl_close($ch);

  $response = MerchantOneResponse::Parse($result);

  if (variable_get('uc_merchantone_response_debug', FALSE)) {
    $response->log();
  }

  // If we didn't get an approval response code...
  if (!$response->isApproved()) {
    // Fail the charge with the reason text in the decline message.
    $result = array(
        'success' => FALSE,
        'message' => t('Credit card payment declined: @message', array('@message' => $response->responsetext)),
        'uid' => $user->uid,
    );
  }
  else {
    // Build a message for display and comments in the payments table.
    $message = t('Transaction ID: @id<br />Auth Code: @code', array('@code' => $response->authcode, '@id' => $response->transactionid));
    $result = array(
        'success' => TRUE,
        'comment' => $message,
        'message' => $message,
        'data' => array(
            'module' => 'uc_merchantone',
            'txn_type' => _uc_merchantone_txn_map($data['txn_type']),
            'txn_id' => $response->transactionid,
            'txn_authcode' => $response->authcode,
        ),
        'uid' => $user->uid,
    );

    // If this was an authorization only transaction...
    if ($data['txn_type'] == UC_CREDIT_AUTH_ONLY) {
      // Log the authorization to the order.
      uc_credit_log_authorization($order->order_id, $response->transactionid, $amount);
    }
    elseif ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE) {
      uc_credit_log_prior_auth_capture($order->order_id, $data['auth_id']);
    }
  }

  // Don't log this as a payment money wasn't actually captured.
  if (in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY))) {
    $result['log_payment'] = FALSE;
  }

  // Build an admin order comment.
  $comment = t('<b>@type</b><br /><b>@status:</b> @message<br />Amount: @amount<br />AVS response: @avs', array(
      '@type' => _uc_merchantone_txn_map($data['txn_type']),
      '@status' => $result['success'] ? t('ACCEPTED') : t('REJECTED'),
      '@message' => $response->responsetext,
      '@amount' => uc_currency_format($amount),
      '@avs' => _uc_merchantone_avs($response->avsresponse),
          )
  );

  // Add the CVV response if enabled.
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $comment .= '<br />' . t('CVV match: @cvv', array('@cvv' => _uc_merchantone_cvv($response->cvvresponse)));
  }

  // Save the comment to the order.
  uc_order_comment_save($order->order_id, $user->uid, $comment, 'admin');

  return $result;
}

/**
 * Returns the message text for an AVS response code.
 */
function _uc_merchantone_avs($code) {
  $text = $code . ' - ';

  switch ($code) {
    case 'A':
      $text .= t('Address (Street) matches, ZIP does not');
      break;
    case 'B':
      $text .= t('Address information not provided for AVS check');
      break;
    case 'E':
      $text .= t('AVS error');
      break;
    case 'G':
      $text .= t('Non-U.S. Card Issuing Bank');
      break;
    case 'N':
      $text .= t('No Match on Address (Street) or ZIP');
      break;
    case 'P':
      $text .= t('AVS not applicable for this transaction');
      break;
    case 'R':
      $text .= t('Retry â€“ System unavailable or timed out');
      break;
    case 'S':
      $text .= t('Service not supported by issuer');
      break;
    case 'U':
      $text .= t('Address information is unavailable');
      break;
    case 'W':
      $text .= t('Nine digit ZIP matches, Address (Street) does not');
      break;
    case 'X':
      $text .= t('Address (Street) and nine digit ZIP match');
      break;
    case 'Y':
      $text .= t('Address (Street) and five digit ZIP match');
      break;
    case 'Z':
      $text .= t('Five digit ZIP matches, Address (Street) does not');
      break;
  }

  return $text;
}

/**
 * Returns the message text for a CVV match.
 */
function _uc_merchantone_cvv($code) {
  $text = $code . ' - ';

  switch ($code) {
    case 'M':
      $text .= t('Match');
      break;
    case 'N':
      $text .= t('No Match');
      break;
    case 'P':
      $text .= t('Not Processed');
      break;
    case 'S':
      $text .= t('Should have been present');
      break;
    case 'U':
      $text .= t('Issuer unable to process request');
      break;
  }

  return $text;
}

/**
 * Returns the title of the transaction type.
 */
function _uc_merchantone_txn_type($type) {
  switch (strtoupper($type)) {
    case 'sale':
      return t('Sale');
    case 'auth':
      return t('Auth');
    case 'capture':
      return t('Capture');
    case 'credit':
      return t('Credit');
    case 'void':
      return t('Void');
  }
}

/**
 * Returns the Merchant One transaction type corresponding to a UC type.
 */
function _uc_merchantone_txn_map($type) {
  switch ($type) {
    case UC_CREDIT_AUTH_ONLY:
      return 'auth';
    case UC_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'capture';
    case UC_CREDIT_AUTH_CAPTURE:
      return 'sale';
    case UC_CREDIT_CREDIT:
      return 'credit';
    case UC_CREDIT_VOID:
      return 'void';
  }
}

