<?php

/**
 * @file
 * Provide menus based on relation between node and term.
 */

/**
 * TODO list:
 * - Add locale support.
 * - Add test for this module.
 */

module_load_include('inc', 'term_menus', 'term_menus.pathauto');

/**
 * Implements hook_menu().
 */
function term_menus_menu() {
  $items = array();
  $items['term_menus/%term_menus_menu/%term_menus_tid'] = array(
    'title' => 'Term',
    'title callback' => 'taxonomy_term_title',
    'title arguments' => array(2),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'term_menus_term_custom_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'file' => 'term_menus.page.inc',
  );
  $items['admin/structure/term_menus'] = array(
    'title' => 'Term menus list',
    'description' => 'Administration of term menu lists.',
    'page callback' => 'term_menus_overview_page',
    'access arguments' => array('administer content types'),
    'file' => 'term_menus.page.inc',
  );

  return $items;
}

/**
 * Term menu load menu function.
 *
 * @param string $menu_name
 *   Load term menu object from database, by menu name.
 *
 * @return object
 *   Term menu object, or FALSE.
 */
function term_menus_menu_load($menu_name) {
  $menu = _term_menus_get_menus(NULL, NULL, $menu_name);
  if (!empty($menu)) {
    return $menu;
  }
  return FALSE;
}

/**
 * Load term obejct for tid.
 *
 * This load function is mainly used to make sure the custom term path should
 * exist for one term.
 *
 * @param int $tid
 *   Term's tid, which will be used to load term object.
 *
 * @return object
 *   A term object.
 */
function term_menus_tid_load($tid) {
  if ($term = taxonomy_term_load($tid)) {
    // Ideally, it needs to detect whether this term menu has enabled
    // custom term page. If this term menu doesn't use our own term page,
    // we return false to tell users this page is illegal.
    // The challenge is we need to show custom term page links inside menu.
    // Consequently, we can't decide which term menu context it could be.
    // So, simply return $term here.
    return $term;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * We need to alter taxonomy field for nodes.
 */
function term_menus_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Only work eith nodes.
  if ($form['#instance']['entity_type'] == 'node' && $form['#field']['type'] == 'taxonomy_term_reference') {
    $field = $form['#field'];
    $field_name = $field['field_name'];

    // Get term menu object for this field.
    $term_menu = _term_menus_get_menus(NULL, $field_name);
    $form['menu_object'] = array(
      '#type' => 'value',
      '#value' => $term_menu,
    );

    $form['term_menus'] = array(
      '#type' => 'fieldset',
      '#title' => t('Term menus setting'),
    );

    $form['term_menus']['menu_flag'] = array(
      '#title' => t('Enable term menu for this field'),
      '#type' => 'checkbox',
      '#default_value' => isset($term_menu->menu_name) ? 1 : 0,
      '#description' => t('You have to add data for this field <b>FIRSTLY</b>. Then this setting could be enabled.<br />If term menu is enabled for this field, it can be managed at default menu UI "admin/structure/menu" too.<br /> NOTE: This setting is field sensitive. If this setting has been updated from checked to unchecked, term menu for this field name will all be deleted!'),
      '#disabled' => field_has_data($field_name) ? FALSE : TRUE,
    );
    // Add a checkbox when user tries to delete term menu for this field.
    if ((isset($form_state['delete_term_menu']))) {
      $form['term_menus']['menu_flag']['#value'] = 0;
      $form['term_menus']['menu_flag']['#disabled'] = TRUE;
      $form['term_menus']['delete_menu_flag'] = array(
        '#type' => 'checkbox',
        '#title' => t('I REALLY want to delete term menu for this field!'),
        '#states' => array(
          'visible' => array(
            ':input[name="menu_flag"]' => array('checked' => FALSE),
          ),
        ),
      );
    }
    module_load_include('inc', 'menu', 'menu.admin');
    $suggested_machine_name = preg_replace('/_/', '-', $field_name);
    $suggested_machine_name = substr($suggested_machine_name, 0, MENU_MAX_MENU_NAME_LENGTH_UI);
    $form['term_menus']['menu_machine_name'] = array(
      '#title' => t('Machine name for this term menu'),
      '#type' => 'machine_name',
      '#required' => FALSE,
      '#field_prefix' => isset($term_menu->menu_name) ? '' : 'menu-',
      '#default_value' => isset($term_menu->menu_name) ? $term_menu->menu_name : $suggested_machine_name,
      '#maxlength' => MENU_MAX_MENU_NAME_LENGTH_UI,
      '#size' => 30,
      '#description' => t('A unique name to construct the URL for term menu.
        It must only contain lowercase letters, numbers and hyphens.'),
      '#machine_name' => array(
        'exists' => 'menu_edit_menu_name_exists',
        'source' => array('title'),
        'replace_pattern' => '[^a-z0-9-]+',
        'replace' => '-',
      ),
      '#disabled' => isset($term_menu->menu_name),
      '#states' => array(
        'visible' => array(
          ':input[name="menu_flag"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['term_menus']['configs'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configuration for this term menu.'),
      '#states' => array(
        'visible' => array(
          ':input[name="menu_flag"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['term_menus']['configs']['custom_page'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($term_menu->custom_page) ? $term_menu->custom_page : 0,
      '#title' => t('Enable custom term page for this term menu.'),
      '#disabled' => isset($term_menu->menu_name),
    );
    $form['term_menus']['configs']['child_node'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($term_menu->child_node) ? $term_menu->child_node : 0,
      '#title' => t("Add child nodes for custom term page."),
      '#states' => array(
        'visible' => array(
          ':input[name="custom_page"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['term_menus']['configs']['url_alias'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($term_menu->url_alias) ? $term_menu->url_alias : 0,
      '#title' => t("Enable url alias/pathauto integration with this term menu."),
      '#disabled' => isset($term_menu->menu_name),
      '#states' => array(
        'visible' => array(
          ':input[name="custom_page"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['term_menus']['configs']['sync_node'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($term_menu->sync_node) ? $term_menu->sync_node : 0,
      '#title' => t("Synchronize term menu when a node is updated."),
      '#disabled' => isset($term_menu->menu_name),
    );
    $form['term_menus']['configs']['sync_term'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($term_menu->sync_term) ? $term_menu->sync_term : 0,
      '#title' => t("Synchronize term menu when a term is updated."),
      '#disabled' => isset($term_menu->menu_name),
    );

    $link = l(t('README.txt'), drupal_get_path('module', 'term_menus') . "/README.txt");
    $form['term_menus']['configs']['help'] = array(
      '#markup' => t("Ideally, they should be checked all. For details of these configurations, see ") . $link,
    );
    if (isset($term_menu->menu_name)) {
      $form['term_menus']['rebuild'] = array(
        '#type' => 'fieldset',
        '#title' => t('Rebuild this term menu'),
        '#states' => array(
          'visible' => array(
            ':input[name="menu_flag"]' => array('checked' => TRUE),
          ),
        ),
      );
      $form['term_menus']['rebuild']['rebuild_button'] = array(
        '#type' => 'submit',
        '#value' => t('Rebuild'),
        '#submit' => array('term_menus_rebuild_term_links'),
      );
      $form['term_menus']['rebuild']['reset_button'] = array(
        '#type' => 'submit',
        '#value' => t('Reset'),
        '#submit' => array('term_menus_reset_term_links'),
      );
      $form['term_menus']['rebuild']['rebuild_des'] = array(
        '#prefix' => '<div>',
        '#markup' => t("<div>When clicks 'Rebuild' button, term menu for this field will disable(Note: not delete) term links which don't have any child node links. It will recursively check child terms too. <br /> Do this when everything is ready and you want to hide those term links from users, or you are experiencing term links enable/disable issues. You can manually do this at default menu ui too.</div> <div>When clicks 'Reset' button, all term links will be enabled.</div>"),
        '#suffix' => '</div>',
        '#states' => array(
          'visible' => array(
            ':input[name="menu_flag"]' => array('checked' => TRUE),
          ),
        ),
      );
    }

    $form['#submit'][] = 'term_menus_field_menu_submit';
    $form['#validate'][] = 'term_menus_field_menu_validate';
  }
}

/**
 * Submit handler to rebuild term menu.
 *
 * Disable term links from term menu, when this term and its child terms don't
 * have any nodes connected.
 */
function term_menus_rebuild_term_links($form, $form_state) {
  $term_menu = $form_state['values']['menu_object'];
  if (!isset($term_menu->menu_name)) {
    drupal_set_message(t("Sorry, there's no term menu associated with this field."));
    return NULL;
  }
  $transaction = db_transaction();
  try {
    // Override default value.
    $term_menu->child_node = 1;
    $terms = taxonomy_get_tree($term_menu->vid);
    foreach ($terms as $term) {
      $nids = term_menus_get_term_all_nodes($term, $term_menu);
      // Disable this term link from term menu.
      if (empty($nids)) {
        _term_menus_disable_term_link($term, $term_menu);
      }
      else {
        _term_menus_enable_term_link($term, $term_menu);
      }
    }
    drupal_set_message(t('Term menus have been rebuilt sucessfully!'));
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('term_menus', $e);
    throw $e;
  }
}

/**
 * Submit handler to reset term menu.
 *
 * Enable term links from term menu, EVEN this term and its child terms don't
 * have any nodes connected.
 */
function term_menus_reset_term_links($form, $form_state) {
  $term_menu = $form_state['values']['menu_object'];
  if (!isset($term_menu->menu_name)) {
    drupal_set_message(t("Sorry, there's no term menu associated with this field."));
    return NULL;
  }
  $transaction = db_transaction();
  try {
    // Override default value.
    $term_menu->child_node = 1;
    $terms = taxonomy_get_tree($term_menu->vid);
    foreach ($terms as $term) {
      _term_menus_enable_term_link($term, $term_menu);
    }
    drupal_set_message(t('Term menus have been reset sucessfully!'));
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('term_menus', $e);
    throw $e;
  }
}

/**
 * Validate handler for taxonomy field ui form.
 */
function term_menus_field_menu_validate(&$form, &$form_state) {
  $term_menu = $form_state['values']['menu_object'];
  $menu_flag = $form_state['values']['menu_flag'];
  if (!$menu_flag && isset($term_menu->menu_name)) {
    if (isset($form_state['values']['delete_menu_flag']) && $form_state['values']['delete_menu_flag']) {
      // If user is sure to delete term menu for this field, do nothing.
    }
    else {
      $form_state['rebuild'] = TRUE;
      $form_state['delete_term_menu'] = 1;
      drupal_set_message(t("Do you really want to delete term menu for this field? If so, please confirm in the last checkbox."), 'warning');
    }
  }
}

/**
 * Submit handler for taxonomy field ui form.
 *
 * There're three ui for user to manage term menu, i.e, field edit ui, term
 * edit ui, default menu ui. Here's the back-end handling for field ui.
 */
function term_menus_field_menu_submit($form, &$form_state) {
  $term_menu = $form_state['values']['menu_object'];
  $field_name = $form['#field']['field_name'];
  $field = $form['#field'];

  $menu_flag = $form_state['values']['menu_flag'];
  $menu['title'] = 'Term menu for ' . $field_name;
  $menu['description'] = 'Term menu for ' . $field_name;
  $path = 'admin/structure/menu/manage/';

  $transaction = db_transaction();
  try {
    // Add a new term menu when this field didn't have one.
    if ($menu_flag && !isset($term_menu->menu_name)) {
      // Add 'menu-' to the menu name to help avoid name-space conflicts.
      $menu['menu_name'] = 'menu-' . $form_state['values']['menu_machine_name'];

      // Add all terms links to this new menu.
      // I think there's only one vocabulary allowed here?
      $vocabulary_name = $form['#field']['settings']['allowed_values'][0]['vocabulary'];
      $vocabulary_ob = taxonomy_vocabulary_machine_name_load($vocabulary_name);

      // Manually rebuild a new term_menu object.
      $term_menu = array(
        'field_name' => $field_name,
        'vid' => $vocabulary_ob->vid,
        'menu_name' => $menu['menu_name'],
        'custom_page' => $form_state['values']['custom_page'],
        'child_node' => $form_state['values']['child_node'],
        'sync_node' => $form_state['values']['sync_node'],
        'sync_term' => $form_state['values']['sync_term'],
        'node_type' => arg(4),
        'url_alias' => $form_state['values']['url_alias'],
      );
      $term_menu = (object) $term_menu;
      // Add record to {term_menu}.
      _term_menus_insert_menu($term_menu);

      // Now save menu and links.
      $link['link_title'] = $menu['title'];
      $link['link_path'] = $path . $menu['menu_name'];
      $link['router_path'] = $path . '%';
      $link['module'] = 'term_menus';
      $link['plid'] = db_query("SELECT mlid FROM {menu_links} WHERE link_path = :link AND module = :module", array(
        ':link' => 'admin/structure/menu',
        ':module' => 'system',
      ))->fetchField();

      menu_link_save($link);
      menu_save($menu);

      // Add batch support for this handling.
      $batch = array(
        'title' => t('Initialize term menu for field @field', array('@field' => $field_name)),
        'operations' => array(
          array('term_menus_initialize_term_menu', array($term_menu)),
        ),
      );
      batch_set($batch);

      drupal_set_message(t('Term menu for field @field has been created sucessfully.', array('@field' => $field_name)));
      watchdog('Term menu', 'Term menu for field @field has been created sucessfully.', array('@field' => $field_name));
    }
    elseif ($menu_flag && isset($term_menu->menu_name)) {
      // Update this term menu.
      $term_menu->child_node = $form_state['values']['child_node'] ? 1 : 0;
      _term_menus_update_term_menu($term_menu);
    }
    elseif (!$menu_flag && isset($term_menu->menu_name)) {
      _term_menus_delete_menu($term_menu);

      drupal_set_message(t('Term menu for field @field has been deleted sucessfully.', array('@field' => $field_name)));
      watchdog('Term menu', 'Term menu for field @field has been deleted sucessfully.', array('@field' => $field_name));
    }
  }
  catch(Exception $e) {
    $transaction->rollback();
    watchdog_exception('term_menu', $e);
    throw $e;
  }
}

/**
 * Initialize term menu for a taxonomy field.
 *
 * @param object $term_menu
 *   This term_menu object is manually created in code according to user's
 *   input from field edit ui. As there's a db transaction going, it's not
 *   possible to get $term_menu object from db before the whole initializing
 *   process is over.
 */
function term_menus_initialize_term_menu($term_menu, &$context) {
  // At this scenario, we need to reset $term_menu's sync_term property.
  $term_menu->sync_term = 1;
  $terms = taxonomy_get_tree($term_menu->vid);
  $tids = array();
  if (!empty($terms)) {
    $count = count($terms);
    $context['sandbox']['progress'] = 0;
    // Add every term link, including associated nodes into {menu_links}.
    foreach ($terms as $term) {
      if (!isset($tids[$term->tid])) {
        $tids[$term->tid] = 1;
      }
      // If this term has already been inserted, we continue;
      else {
        continue;
      }
      $term_mlid = _term_menus_insert_term_link($term, $term_menu);
      // If this term menu doesn't sync nodes, we continue;
      if (!$term_menu->sync_node) {
        continue;
      }
      $nids = _term_menus_get_term_field_nodes($term->tid, $term_menu->field_name);
      foreach ($nids as $nid) {
        // Add node link to {menu_links}.
        $title = _term_menus_get_node_title($nid);
        $node_link = array(
          'link_path' => 'node/' . $nid,
          'link_title' => $title,
          'menu_name' => $term_menu->menu_name,
          'plid' => $term_mlid,
          'router_path' => 'node/%',
          'module' => 'term_menus',
        );
        menu_link_save($node_link);
      }
      $context['sandbox']['progress']++;
      $context['sandbox']['finished'] = $context['sandbox']['progress'] / $count;
    }
    watchdog('Term menus', 'Term menu for field :field_name has been created.', array(':field_name' => $term_menu->field_name));
    menu_cache_clear($term_menu->menu_name);
  }
  $context['results'][] = 'Well done!';
  $context['message'] = 'Sucessfully initialized';
}

/**
 * Get term's all nodes, including possible child term's node.
 *
 * @param object $top_term
 *   This is the term object we need to process. The reason to call it
 *   'top_term', is because it could have child terms, and we need to get
 *   those child terms' nodes as well when $term_menu has specified chile_node
 *   property.
 *
 * @param object $term_menu
 *   The term menu object this term is working on. One notable thing is its
 *   child_node property will decide whether this functions collects child
 *   terms' nodes for $top_term.
 *
 * @return array
 *   An array nids associated to this $top_term via $term_menu. Or an empty
 *   array if no nid is found.
 */
function term_menus_get_term_all_nodes($top_term, $term_menu) {
  // Get nids connected to this term inside the menu.
  $nids = _term_menus_get_term_field_nodes($top_term->tid, $term_menu->field_name);

  // We need to add child term's nodes, if this term menu requires it.
  if ($term_menu->child_node) {
    $tids = array($top_term->tid);
    while ($tids) {
      $next_generations = array();
      foreach ($tids as $tid) {
        $children = taxonomy_get_children($tid, $term_menu->vid);
        foreach ($children as $child) {
          $child_nids = _term_menus_get_term_field_nodes($child->tid, $term_menu->field_name);
          $nids = array_merge($nids, $child_nids);
          $next_generations[] = $child->tid;
        }
      }
      $tids = $next_generations;
    }
  }
  return $nids;
}

/**
 * Implements hook_node_insert().
 *
 * Add this node into term menu, if condition is met.
 */
function term_menus_node_insert($node) {
  _term_menus_insert_node_link($node);
}

/**
 * Implements hook_node_update().
 *
 * Delete this node link from term menu and generate it again.
 */
function term_menus_node_update($node) {
  // A better way is to detect whether ths node's taxonomy field has changed
  // firstly. If changed, we do delete and insert actions. However, considering
  // this node link could be updated at default menu UI, it makes no sense to
  // compare this node itself at all.
  // Here we simply ignore the compare process. It also means any changes about
  // this node link made through default menu UI will be reset to the newest
  // node taxonomy field status.
  _term_menus_delete_node_link($node);
  _term_menus_insert_node_link($node);
}

/**
 * Implements hook_node_delete().
 *
 * Delete this node from term menu, if condition is met.
 */
function term_menus_node_delete($node) {
  _term_menus_delete_node_link($node);
}

/**
 * Implements hook_node_type_delete().
 *
 * Delete term menus with this node type, if condition is met.
 */
function term_menus_node_type_delete($info) {
  $term_menus = _term_menus_get_menus();
  $fields = field_info_field_map();
  foreach ($term_menus as $term_menu) {
    if (isset($fields[$term_menu->field_name])) {
      $bundles = $fields[$term_menu->field_name]['bundles'];
      if (!isset($bundles['node'])) {
        continue;
      }
      $bundles = $bundles['node'];
      // If this deleted type is the only bundle for term menu's field,
      // delete this term menu too.
      if (count($bundles) > 1) {
        // If term menu has used this type as token, we need to delete it.
        // Assign another random available node type for this term menu.
        if ($term_menu->node_type == $info->type) {
          foreach ($bundles as $bundle) {
            if ($term_menu->node_type != $bundle) {
              // Update node_type property.
              $term_menu->node_type = $bundle;
              _term_menus_update_term_menu($term_menu);
              // We don't handle url alias update here. This is the basic
              // design of pathauto. Admin could use bulk update for url
              // alias change.
              break;
            }
          }
        }
        continue;
      }
      if(in_array($info->type, $bundles)) {
        _term_menus_delete_menu($term_menu);
      }
    }
  }
}

/**
 * Implements hook_field_delete_field().
 *
 * Delete term menu for this term field, if this field has a term menu.
 */
function term_menus_field_delete_field($field) {
  if ($field['type'] == 'taxonomy_term_reference') {
    // Get term menu machine name, if there's one.
    $term_menu = _term_menus_get_menus(NULL, $field['field_name']);
    if ($term_menu) {
      // Need to delete this field's term menu.
      _term_menus_delete_menu($term_menu);
    }
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 *
 * Delete term menu for this term field, if condition is met.
 */
function term_menus_taxonomy_term_delete($term) {
  $term_menus = _term_menus_get_menus($term->vid);
  // Get one mlid, and decide whether need to delete its path alias.
  foreach ($term_menus as $term_menu) {
    if (!$term_menu->sync_term) {
      continue;
    }
    term_menus_delete_term_path_alias($term, $term_menu);
    $mlid = _term_menus_get_term_mlid($term->tid, $term_menu);
    menu_link_delete($mlid);
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 *
 * Insert term menu for this term field, if condition is met.
 */
function term_menus_taxonomy_term_insert($term) {
  $term_menus = _term_menus_get_menus($term->vid);

  foreach ($term_menus as $term_menu) {
    _term_menus_insert_term_link($term, $term_menu);
  }
}

/**
 * Implements hook_taxonomy_term_update().
 *
 * Update each term menu for this term, if condition is met.
 * What we care here is term name and term relation. Term name is going to
 * be used as link title, and term parent is going to decide its parent link.
 *
 * TODO: Needs to consider its parent link, which is probably not
 * a term link.
 */
function term_menus_taxonomy_term_update($term) {
  _term_menus_taxonomy_term_update($term);
  drupal_set_message(t('Updated @term for its term menu(s).', array('@term' => $term->name)));
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 *
 * Delete term menu for this vocabulary, if condition is met.
 */
function term_menus_taxonomy_vocabulary_delete($vocabulary) {
  $term_menus = _term_menus_get_menus($vocabulary->vid);
  foreach ($term_menus as $term_menu) {
    // If this term menu has set to not sync term, we continue.
    if (!$term_menu->sync_term) {
      continue;
    }
    _term_menus_delete_menu($term_menu);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_overview_terms().
 *
 * Delete term menu for this term field, if condition is met.
 */
function term_menus_form_taxonomy_overview_terms_alter(&$form, &$form_state) {
  $form['#submit'][] = 'term_menus_term_overview_submit';
}

/**
 * Submit handler, reacting on form ID: taxonomy_overview_terms.
 */
function term_menus_term_overview_submit(&$form, &$form_state) {

  // Credits: Following condition code comes from taxonomy_menu module at d.g.
  // See https://drupal.org/project/taxonomy_menu.
  // This form has the following flow of buttons:
  // 1. [Save] --> rebuild taxonomy_menu
  // 2. [Reset to alphabetical] --> no rebuild yet
  // 3. [Reset to alphabetical][Reset to alphabetical] --> rebuild
  // 4. [Reset to alphabetical][Cancel] --> no rebuild
  // The code below avoids rebuilding after situation 2.
  if ($form_state['rebuild'] == FALSE && isset($form['#vocabulary']->vid)) {
    // Try to catch the 'Save' button.
    $vid = $form['#vocabulary']->vid;
  }
  elseif ($form_state['rebuild'] == TRUE && isset($form['#vocabulary']->vid)) {
    // Try to catch the 'Reset to alphabetical' button.
    $vid = NULL;
  }
  elseif ($form_state['rebuild'] == FALSE && isset($form['vid']['#value'])) {
    // Try to catch the second (confirming) 'Reset to alphabetical' button.
    $vid = $form['vid']['#value'];
  }
  else {
    // The button [Reset to alphabetical] [Cancel] does not call this page.
    $vid = NULL;
  }

  if (isset($vid)) {
    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $term) {
      // Update each term.
      _term_menus_taxonomy_term_update($term);
    }
    drupal_set_message(t('Updated @vob for its term menu(s).', array('@vob' => arg(3))));
  }
}

/**
 * Get term's FIRST parent's mlid.
 *
 * This parent exists in {menu_links} before this child term has been
 * inserted into {menu_links}.
 *
 * Anyway, multiple parents could lead to unpredicted results here. User
 * should avoid multiple term parents for this module.
 *
 * @param object $term
 *   Term object we are processing.
 *
 * @param object $term_menu
 *   Term menu object associated with this term, mainly used to provide
 *   term menu's menu_name.
 *
 * @return int
 *   This term's parent term's mlid in {menu_links}, or NULL if none was
 */
function term_menus_get_term_parent_mlid($term, $term_menu) {
  // $term object may or may not contain its parents information, we use
  // following function to get its parents.
  $parents = taxonomy_get_parents($term->tid);
  $ptids = array_keys($parents);
  foreach ($ptids as $ptid) {
    $plid = _term_menus_get_term_mlid($ptid, $term_menu);
    if ($plid) {
      break;
    }
  }
  return isset($plid) ? $plid : NULL;
}

/**
 * Insert a term link into {menu_links}.
 */
function _term_menus_insert_term_link($term, $term_menu) {
  // If this menu has been set to not sync term, we break.
  if (!$term_menu->sync_term) {
    return NULL;
  }
  $plid = term_menus_get_term_parent_mlid($term, $term_menu);
  // Insert this term's link for each term menu.
  $link = array(
    'link_path' => 'taxonomy/term/' . $term->tid,
    'link_title' => $term->name,
    'menu_name' => $term_menu->menu_name,
    'weight' => $term->weight,
    'plid' => (!empty($plid)) ? $plid : 0,
    'router_path' => 'taxonomy/term/%',
    'module' => 'term_menus',
  );
  if ($term_menu->custom_page) {
    $link['link_path'] = 'term_menus/' . $term_menu->menu_name . '/' . $term->tid;
    $link['router_path'] = 'term_menus/%/%';
  }
  $term_mlid = menu_link_save($link);

  // Add path alias for this term.
  term_menus_insert_term_path_alias($term, $term_menu);
  return $term_mlid;
}

/**
 * Insert one node link into term menu.
 *
 * @param object $node
 *   Node object we are processing.
 */
function _term_menus_insert_node_link($node) {
  $term_menus = _term_menus_get_menus();
  foreach ($term_menus as $term_menu) {
    // If this menu has set to not sync node, we continue.
    if (!$term_menu->sync_node) {
      continue;
    }
    $field_name = $term_menu->field_name;
    $menu_name = $term_menu->menu_name;

    if (isset($node->{$field_name})) {
      foreach ($node->{$field_name}['und'] as $delta => $value) {
        $plid = _term_menus_get_term_mlid($value['tid'], $term_menu);
        $link = array(
          'link_path' => 'node/' . $node->nid,
          'link_title' => $node->title,
          'menu_name' => $menu_name,
          'plid' => $plid,
          'router_path' => 'node/%',
          'module' => 'term_menus',
        );
        menu_link_save($link);
      }
    }
  }
}

/**
 * Delete one node's links from term menu.
 *
 * @param object $node
 *   Node object we are processing.
 */
function _term_menus_delete_node_link($node) {
  $term_menus = _term_menus_get_menus();
  $menus = array();
  if ($term_menus) {
    foreach ($term_menus as $menu) {
      // If this menu has set to not sync node, we continue.
      if (!$menu->sync_node) {
        continue;
      }
      $menus[] = $menu->menu_name;
    }

    $query = db_select('menu_links', 'ml');
    $query->condition('ml.menu_name', $menus, 'IN')
      ->condition('ml.link_path', 'node/' . $node->nid)
      ->fields('ml', array('mlid'));
    $mlids = $query->execute()->fetchCol();

    foreach ($mlids as $mlid) {
      menu_link_delete($mlid);
    }
  }
}

/**
 * Update individual term link.
 *
 * @param object $term
 *   Term object we are processing.
 */
function _term_menus_taxonomy_term_update($term) {
  $transaction = db_transaction();
  try {
    $term_menus = _term_menus_get_menus($term->vid);
    // Iterate each term menu.
    foreach ($term_menus as $term_menu) {
      // If this menu has set to not sync term, we continue.
      if (!$term_menu->sync_term) {
        continue;
      }
      $mlid = _term_menus_get_term_mlid($term->tid, $term_menu);
      if ($mlid) {
        $item = menu_link_load($mlid);
        // Update this term's link title, weight and its plid.
        $item['link_title'] = $term->name;
        $item['weight'] = $term->weight;
        $plid = term_menus_get_term_parent_mlid($term, $term_menu);
        // Override its parent link. If admin has added custom link as parent
        // link for this term in menu ui, it will be reset here. It's admin's
        // responsibility to take care of these custom parent links.
        // Only child links of term links will be un-reset.
        $item['plid'] = $plid;
        $mlid = menu_link_save($item);
      }
      term_menus_update_term_path_alias($term, $term_menu);
      menu_cache_clear($term_menu->menu_name);
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('term_menu', $e);
    throw $e;
  }
}

/**
 * Disable term menu links.
 *
 * @param object $term
 *   Disable this term's menu link in term menus.
 *
 * @param object $term_menu
 *   Disable term's menu link for this term menu.
 */
function _term_menus_disable_term_link($term, $term_menu) {
  $path = 'taxonomy/term/' . $term->tid;
  if ($term_menu->custom_page) {
    $path = 'term_menus/' . $term_menu->menu_name . '/' . $term->tid;
  }
  db_update('menu_links')
    ->fields(array('hidden' => 1))
    ->condition('menu_name', $term_menu->menu_name)
    ->condition('link_path', $path)
    ->execute();
}

/**
 * Enable term menu links.
 *
 * @param object $term
 *   Enable this term's menu link in term menus.
 *
 * @param object $term_menu
 *   Enable term's menu link for this term menu.
 */
function _term_menus_enable_term_link($term, $term_menu) {
  $path = 'taxonomy/term/' . $term->tid;
  if ($term_menu->custom_page) {
    $path = 'term_menus/' . $term_menu->menu_name . '/' . $term->tid;
  }
  db_update('menu_links')
    ->fields(array('hidden' => 0))
    ->condition('menu_name', $term_menu->menu_name)
    ->condition('link_path', $path)
    ->execute();
}

/**
 * Delete one term menu.
 *
 * @param object $term_menu
 *   This Term menu object we are processing.
 */
function _term_menus_delete_menu($term_menu) {
  $menu['menu_name'] = $term_menu->menu_name;
  // System-defined menus may not be deleted - only menus defined by this
  // module.
  $system_menus = menu_list_system_menus();
  if (isset($system_menus[$menu['menu_name']]) || !(db_query("SELECT 1 FROM {menu_custom} WHERE menu_name = :menu", array(':menu' => $menu['menu_name']))->fetchField())) {
    return;
  }

  // Reset all the menu links defined by the system via hook_menu().
  $result = db_query("SELECT * FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.menu_name = :menu AND ml.module = 'system' ORDER BY m.number_parts ASC", array(':menu' => $menu['menu_name']), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $link) {
    menu_reset_item($link);
  }

  // Delete all links to the overview page for this menu.
  $result = db_query("SELECT mlid FROM {menu_links} ml WHERE ml.link_path = :link", array(':link' => 'admin/structure/menu/manage/' . $menu['menu_name']), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $link) {
    menu_link_delete($link['mlid']);
  }

  // We need to delete path alias for this term menu, if this term menu has
  // used custom term page.
  term_menus_delete_terms_path_alias($term_menu);

  menu_delete($menu);
  _term_menus_delete($menu);
  menu_cache_clear($menu['menu_name']);

}

/**
 * Get node(s) which has a tid value of term reference field.
 *
 * @param int $tid
 *   Term's tid. This is the term we need to get its direct associated nodes.
 *   To get term's child term nodes, see term_menus_get_term_all_nodes().
 *
 * @param string $field_name
 *   The taxonomy field with this term.
 *
 * @return array
 *   An array of nids. Or an emtpy array if no nid is found.
 *
 * @see term_menus_get_term_all_nodes()
 */
function _term_menus_get_term_field_nodes($tid, $field_name) {
  $nids = &drupal_static(__FUNCTION__, array());

  if (!isset($nids[$tid][$field_name])) {
    $field_table = 'field_data_' . $field_name;
    $query = db_select($field_table, 'f');
    // Only inlcude nodes published.
    $query->join('node', 'n', 'n.nid = f.entity_id');
    $query->condition('f.' . $field_name . '_tid', $tid);
    $query->condition('f.entity_type', 'node')
      ->condition('f.deleted', '0')
      ->condition('n.status', 1)
      ->fields('f', array('entity_id'));
    $nids[$tid][$field_name] = $query->execute()->fetchCol();
  }

  return $nids[$tid][$field_name];
}

/**
 * Get node title according to nid.
 *
 * This is a lightwieght function to get node title according to nid. The
 * popular way is to use node_load(), which will load the full node object
 * in memory, not necessary for our case.
 *
 * @param int $nid
 *   Node's nid.
 *
 * @return string
 *   Node's title.
 */
function _term_menus_get_node_title($nid) {
  $titles = &drupal_static(__FUNCTION__, array());
  if (!isset($titles[$nid])) {
    $query = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.status', 1)
      ->condition('n.nid', $nid);
    $title = $query->execute()->fetchCol();
    $titles[$nid] = $title[0];
  }

  return $titles[$nid];
}

/**
 * Delete term menu record from {term_menu}.
 *
 * @param array $menu
 *   This array contains only key -- 'menu_name'. Because menu_name is unique
 *   in table, we could use it to specificaly delete one term menu entry.
 */
function _term_menus_delete($menu) {
  db_delete('term_menus')
    ->condition('menu_name', $menu['menu_name'])
    ->execute();
}

/**
 * Insert new term menu to {term_menu}.
 *
 * @param object $term_menu
 *   This term_menu object we need to save into database.
 */
function _term_menus_insert_menu($term_menu) {
  db_insert('term_menus')
    ->fields(array(
        'field_name'  => $term_menu->field_name,
        'menu_name'   => $term_menu->menu_name,
        'vid'         => $term_menu->vid,
        'custom_page' => $term_menu->custom_page,
        'child_node'  => $term_menu->child_node,
        'sync_node'   => $term_menu->sync_node,
        'sync_term'   => $term_menu->sync_term,
        'node_type'   => $term_menu->node_type,
        'url_alias'   => $term_menu->url_alias,
      ))
    ->execute();
}

/**
 * Get term menus from {term_menus}.
 *
 * This function provides three parameters to get term menu object(s).
 * According to the parameter order, once the previous parameter is provded,
 * next parameter(s) will ignored. If no parameters are provided, it will
 * return an array of all term_menus in this site.
 *
 * Because field_name and menu_name are unique keys inside {term_menus}, they
 * will get one term_menu object, while vid could get multiple term_menus
 * assocaited.
 *
 * @param int $vid
 *   Vocabulary vid. One vocabulary could have many term menus. If this
 *   parameter is provided, $field_name and $menu_name will be ignored.
 *
 * @param string $field_name
 *   Taxonomy field name. This parameter will be checked only when $vid is
 *   NULL. If this parameter is provided, $menu_name will be ignored.
 *
 * @param string $menu_name
 *   Term menu's menu name. This parameter will be checked only when previous
 *   two parameters are NULL.
 *
 * @return object
 *   It will depend on the parameters to return one term_menu obejct(or NULL)
 *   or an array of term menu objects(or empty array).
 */
function _term_menus_get_menus($vid = NULL, $field_name = NULL, $menu_name = NULL) {
  $menus = &drupal_static(__FUNCTION__);
  $vid_menus = &drupal_static(__FUNCTION__ . 'vid', array());
  $field_menu = &drupal_static(__FUNCTION__ . 'field', array());
  $menu_menu = &drupal_static(__FUNCTION__ . 'menu', array());

  $query = db_select('term_menus', 'tm')->fields('tm');

  if (empty($vid) && empty($field_name) && empty($menu_name)) {
    if (!isset($menus)) {
      $menus = $query->execute()->fetchAll();
    }
  }
  elseif (!empty($vid)) {
    if (!isset($vid_menus[$vid])) {
      $query->condition('tm.vid', $vid);
      $vid_menus[$vid] = $query->execute()->fetchAll();
    }
  }
  elseif (!empty($field_name)) {
    if (!isset($field_menu[$field_name])) {
      $query->condition('tm.field_name', $field_name);
      $field_menu[$field_name] = $query->execute()->fetchAll();
    }
  }
  elseif (!empty($menu_name)) {
    if (!isset($menu_menu[$menu_name])) {
      $query->condition('tm.menu_name', $menu_name);
      $menu_menu[$menu_name] = $query->execute()->fetchAll();
    }
  }

  if (empty($vid) && empty($field_name) && empty($menu_name)) {
    return $menus;
  }
  elseif (!empty($vid)) {
    return $vid_menus[$vid];
  }
  elseif (!empty($field_name)) {
    return reset($field_menu[$field_name]);
  }
  elseif (!empty($menu_name)) {
    return reset($menu_menu[$menu_name]);
  }

}

/**
 * Get term's mlid from {menu_links} with specific term menu.
 *
 * @param int $tid
 *   Term's tid.
 *
 * @param object $term_menu
 *   Term menu object associated with this term.
 */
function _term_menus_get_term_mlid($tid, $term_menu) {
  $mlids = &drupal_static(__FUNCTION__, array());
  if (!isset($mlids[$term_menu->menu_name][$tid])) {
    $query = db_select('menu_links', 'ml');
    $query->condition('ml.menu_name', $term_menu->menu_name)
      ->fields('ml', array('mlid'));

    // Add link path and router path check according to custom_page config.
    if ($term_menu->custom_page) {
      $query->condition('ml.link_path', 'term_menus/' . $term_menu->menu_name . '/' . $tid)
        ->condition('ml.router_path', 'term_menus/%/%');
    }
    else {
      $query->condition('ml.link_path', 'taxonomy/term/' . $tid)
        ->condition('ml.router_path', 'taxonomy/term/%');
    }
    $result = $query->execute()->fetchField();
    $mlids[$term_menu->menu_name][$tid] = $result;
  }
  return $mlids[$term_menu->menu_name][$tid];
}

/**
 * Update a term menu into database.
 *
 * @param object $term_menu
 *   Term menu object we are updating.
 */
function  _term_menus_update_term_menu($term_menu) {
  db_update('term_menus')
    ->condition('field_name', $term_menu->field_name)
    ->fields(array(
      'node_type' => $term_menu->node_type,
      'child_node' => $term_menu->child_node))
    ->execute();
}
