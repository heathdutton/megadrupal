<?php
/**
 * @file fcontrolpanel.module
 */

//--------------------------------//
// core Drupal hooks              //
//--------------------------------//

/**
 * Implements hook_help().
 */
function fcontrolpanel_help($path, $arg) {
  if ($path == 'admin/help#fcontrolpanel') {
    $txt = 'Features Control Panel';
    $output = t($txt);
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function fcontrolpanel_menu() {
  $items['admin/structure/fcontrolpanel/%/export'] = array(
    'title' => 'export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fcontrolpanel_export_fcontrol', 3),
    'access arguments' => array('fcontrolpanel export'),
    'type' => MENU_CALLBACK,
  );
  $site_name = variable_get('site_name', NULL);
  $items['admin/fcontrolpanel'] = array(
    'title' => t('Control Panel'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fcontrolpanel_page'),
    'access arguments' => array('access features control panel'),
    'file' => 'fcontrolpanel.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fcontrolpanel_permission() {
  return array(
    'access features control panel' => array(
      'title' => t('access features control panel'),
      'description' => t('Grant access to Control Panel.'),
    ),
    'fcontrolpanel export' => array(
      'title' => t('fcontrolpanel export'),
      'description' => t('Permission to export Control Panel controls.'),
    ),
    'administer fcontrolpanel' => array(
      'title' => t('administer fcontrolpanel'),
      'description' => t('Create new control panel controls.'),
    ),
  );
}

/**
 * Implements hook_modules_enabled().
 *
 * Check for fcontrol objects. If there are any, and Admin Toolbar
 * is installed, add them to the Admin Toolbar.
 */
function fcontrolpanel_modules_enabled($modules) {
  foreach ($modules as $module) {
    $path = drupal_get_path('module', $module) . "/$module.info";
    $info = drupal_parse_info_file($path);
    if ($fcontrols = $info['features']['fcontrolpanel_fcontrol']) {
      if (module_exists('admin') && variable_get('fcontrolpanel_admin', TRUE)) {
        $admin_toolbar = admin_get_settings();
        foreach ($fcontrols as $fcontrol_name) {
          $fcontrol = fcontrolpanel_fcontrol_load($fcontrol_name);
          $name = fcontrolpanel_package_name($fcontrol->package);
          // Check if block is already on admin toolbar.
          $block_name = 'fcontrolpanel-' . $name;
          if (!$result = array_key_exists($block_name, $admin_toolbar['blocks'])) {
            // Add block to Admin Toolbar.
            $admin_toolbar['blocks'][$block_name] = 1;
          }
        }
        variable_set('admin_toolbar', $admin_toolbar);
      }
    }
  }
}

/**
 * Implements hook_modules_disabled().
 *
 * Check for fcontrol objects. If there are any, remove them
 * from the Admin Toolbar.
 */
function fcontrolpanel_modules_disabled($modules) {
  // Figure out if disabled module has fcontrols.
  foreach ($modules as $module) {
    $path = drupal_get_path('module', $module) . "/$module.info";
    $info = drupal_parse_info_file($path);
    if ($fcontrols = $info['features']['fcontrolpanel_fcontrol']) {
      if (module_exists('admin')) {
        foreach ($fcontrols as $fcontrol_name) {

          // Identify any orphaned fcontrolpanel blocks in Admin Toolbar to remove.
          $packages = fcontrolpanel_get_packages();
          $package_names = array();
          foreach ($packages as $package) {
            $package_names[] = $package['package_name'];
          }
          $admin_toolbar = variable_get('admin_toolbar', NULL);
          $remove = array();
          foreach ($admin_toolbar['blocks'] as $block_name => $value) {
            foreach ($admin_toolbar['blocks'] as $block_name => $value) {
              if (substr($block_name, 0, 14) == 'fcontrolpanel-') {
                $name = substr($block_name, 14);
                if (!in_array($name, $package_names)) { // It's an orphan.
                  $remove[] = $block_name;
                }
              }
            }
          }

          // Remove orphans.
          if ($remove) {
            foreach ($remove as $orphan) {
              unset($admin_toolbar['blocks'][$orphan]);
            }
            variable_set('admin_toolbar', $admin_toolbar);
          }

        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function fcontrolpanel_form_alter(&$form, &$form_state, $form_id) {
  // @todo goto doesn't work on user_login_block
  //if ($form_id == 'user_login' || $form_id == 'user_login_block') {
  if ($form_id == 'user_login') {
    // Access control and $form_state['#redirect'] = 'admin/fcontrolpanel' doesn't work
    // here because the user's status changes from anonymous to [role]
    // after they successfully log in.
    $form['#submit'][] = 'fcontrolpanel_goto_fcontrolpanel';
  }
}
// */

/**
 * Implements hook_theme().
 */
function fcontrolpanel_theme() {
  return array(
    'fcontrolpanel_fcontrol' => array(
      'render element' => 'element',
    ),
    'fcontrolpanel_admin_block' => array(
      'variables' => array('package' => NULL),
    ),
    'fcontrolpanel_admin_tabs' => array(
      'variables' => array('count' => NULL),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function fcontrolpanel_block_info() {
  $packages = fcontrolpanel_get_packages();
  theme('fcontrolpanel_admin_tabs', array('count' => count($packages))); //todo temp, handle additional tabs
  foreach ($packages as $n => $package) {
    $title = check_plain($package['package_title']);
    $name = check_plain($package['package_name']);
    $blocks[$name]['info'] = ($package['disabled']) ? $title . t(' DISABLED') : $title;
    $blocks[$name]['admin'] = ($package['disabled']) ? NULL : TRUE;
    $blocks[$name]['cache'] = DRUPAL_CACHE_PER_ROLE;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function fcontrolpanel_block_view($delta) {
  $packages = fcontrolpanel_get_packages();
  if ($packages[$delta] && !$packages[$delta]['disabled']) {
    $package = $packages[$delta];
    $block['subject'] = t(check_plain($package['package_title']));
    $block['content'] = theme('fcontrolpanel_admin_block', array('package' => $package));
    return $block;
  }
}

/**
 * Implement theme_fcontrolpanel_admin_tabs().
 *
 * Make Admin Toolbar taller when tabs don't fit
 * horizontal toolbar.
 *
 * 996px fixed width
 * 9 tabs = 1 row, 30px
 * +9 tabs =  2rows, 50px
 *
 * @todo This would be better handled inside admin module.
 *      Write and submit a patch to help admin module
 *      handle additional horizontal tabs.
 */
function theme_fcontrolpanel_admin_tabs($variables) {
  $count = $variables['count'];
  if ($count > 9) {
    $admin_toolbar = variable_get('admin_toolbar', NULL);
    if ($admin_toolbar['layout'] == 'horizontal') {
      $path = drupal_get_path('module', 'fcontrolpanel');
      drupal_add_css("$path/fcontrolpanel.admin.css");
    }
  }
}

/**
 * Implement theme_fcontrolpanel_admin_block.
 *
 * Each package (feature set) gets a corresponding block
 * for the admin module's admin toolbar.
 *
 * @param $variables
 *  - $variables['package'] is an array. It includes all the fcontrol objects
 *    in the package.
 *
 * @return $output
 *  string, HTML for block content.
 *
 * @todo: Consider making packages into real menus.
 */
function theme_fcontrolpanel_admin_block($variables) {
  $package = $variables['package'];
  $output = '';
  $output .= '<ul class="menu">';

  // Build array of list items, but don't
  // add to $output before sorting by weight.
  $lis = array();
  foreach ($package['fcontrols'] as $fcontrol) {
    // Info for building list items:
    $txt = t($fcontrol->title);
    $path = $fcontrol->path;
    $query = _fcontrolpanel_query($fcontrol);
    $perm = (property_exists($fcontrol, 'permission') && $fcontrol->permission != NULL) ? $fcontrol->permission : 'access features control panel';
    // Info for sorting list items:
    $weight = (property_exists($fcontrol, 'weight') && $fcontrol->weight != NULL) ? $fcontrol->weight : 0;
    $name = $fcontrol->name;
    $key = $weight . '-' . $name;
    if (user_access($perm)) {
      $link = ($query) ? l($txt, $path, array('query' => $query)) : l($txt, $path);
      $lis[$key] = '<li class="leaf">' . $link . '</li>';
    }
  }
  // Sort by $key.
  ksort($lis);
  // Add <li>'s to output
  foreach ($lis as $li) {
    $output .= $li;
  }

  $output .= '</ul>';

  return $output;
}

//----------------------------------------------//
// fcontrolpanel                                //
//----------------------------------------------//

/**
 * Turn a simple query string into an array.
 *
 * @param $fcontrol
 *  object, fcontrol
 *
 * @return $query
 *  array, $query = array( 'x' => 'y', 'a' => 'b' )
 */
function _fcontrolpanel_query($fcontrol) {
  if ($query = $fcontrol->query) {
    // Process query string, break key/value pairs like this, 'x=y&a=b'
    // into an array like this, $query = array( 'x' => 'y', 'a' => 'b' )
    $query = array();
    $pairs = explode('&', $fcontrol->query);
    foreach ($pairs as $pair) {
      $q = explode('=', $pair);
      $key = check_plain($q[0]);
      $value = check_plain($q[1]);
      $query[$key] = $value;
    }
    return $query;
  }
  else {
    return FALSE;
  }
}

/**
 * @param $package_title
 *  string, package name
 *
 * @return $name
 *  string, machine name
 */
function fcontrolpanel_package_name($package_title) {
  $package = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $package_title));
  $package = check_plain($package);
  return $package;
}

/**
 * @return $packages
 *  array, fcontrols organized by package
 *
 * $packages[$package_name]['package_name'] = package name
 * $packages[$package_name]['package_title'] = $package_title;
 * $packages[$package_name]['fcontrols'][$fcontrol]
 */
function fcontrolpanel_get_packages() {
  ctools_include('export');
  $fcontrols = ctools_export_load_object('fcontrolpanel_fcontrol');
  // Make a unique list of packages;
  foreach ($fcontrols as $fcontrol) {
    $package_title = check_plain($fcontrol->package);
    $package = fcontrolpanel_package_name($package_title);
    $list[$package] = $package_title;
  }
  // Sort package list in alphabetical order by $package_title.
  // This is particularly important for making hook_block $delta
  // values correspond with aphabetical order for Admin Toolbar.
  asort($list);
  // Number packages.
  $packages = array();
  foreach ($list as $package => $package_title) {
    $packages[$package]['package_name'] = $package;
    $packages[$package]['package_title'] = $package_title;
    $packages[$package]['disabled'] = TRUE;
    // Organize fcontrols by package.
    foreach ($fcontrols as $fcontrol) {
      if ($fcontrol->package == $package_title) {
        $packages[$package]['fcontrols'][] = $fcontrol;
        // At least one control per package needs to be
        // enabled (not disabled) for the package to be
        // enabled (not disabled).
        if (!property_exists($fcontrol, 'disabled')) {
          // This property is created and set by Ctools.
          // If the control is stored in database and is enabled, the property
          // doesn't exist and throws an error.
          $packages[$package]['disabled'] = FALSE;
        }
        else { // $fcontrol->disabled does exist
          if (!$fcontrol->disabled) {
            $packages[$package]['disabled'] = FALSE;
          }
        }
      }
    }
    // default, sort alphabetical (handle sort by weight elsewhere)
    sort($packages[$package]['fcontrols']);
  }

  return $packages;
}

/**
 * @param $status
 *  string, 'enable' or 'disable'
 *
 * This function is responsible for updating the admin module's
 * administrative toolbar to include fcontrolpanel blocks.
 *
 * Features Control Panel features modules should call this
 * function on hook_enable() and hook_disable().
 *
 * If Admin module is enabled, all fcontrolpanel blocks
 * should be automatically added to the toolbar when Features Control Panel
 * features are enabled.
 *
 * Admin keeps track of blocks in a variable in the variable table
 * called admin_toolbar. Each enabled block is stored like this:
 * $admin_toolbar['blocks']['fcontrolpanel-delta'] = n;
 *
 * Remove then re-add all fcontrolpanel blocks. This way, old stuff
 * doesn't hang around if a bunch of features get disabled.
 */
function fcontrolpanel_admin_toolbar($status) {
  if (module_exists('admin') && ($status == 'enable' || $status == 'disable')) {
    $admin_toolbar = variable_get('admin_toolbar', NULL);
    // Check for existing FCP blocks on admin toolbar.
    if (!empty($admin_toolbar['blocks'])) {
      foreach ($admin_toolbar['blocks'] as $key => $value) {
        $x = substr($key, 0, 13);
        // Remove fcontrolpanel blocks.
        if ($x == 'fcontrolpanel') {
          unset($admin_toolbar['blocks'][$key]);
        }
      }
    }
    // Re-count fcontrolpanel blocks (deltas).
    // There is one block per package (feature set).
    $packages = fcontrolpanel_get_packages();
    $count = count($packages);
    if ($status == 'enable') {
      for ($i = 0; $i < $count; $i++) {
        $key = 'fcontrolpanel-' . $i;
        $admin_toolbar['blocks'][$key] = 1;
      }
    }
    else if ($status == 'disable') {
      // Module being disables is still included in the
      // delta count. Subtract one, otherwise Admin Toolbar
      // keeps an extra, empty, block.
      $count = $count - 1;
      for ($i = 0; $i < $count; $i++) {
        $key = 'fcontrolpanel-' . $i;
        $admin_toolbar['blocks'][$key] = 1;
      }
    }
    variable_set('admin_toolbar', $admin_toolbar);
  }
}

/**
 * Redirect users to path: admin/fcontrolpanel.
 *
 * This function is called after successful login.
 */
function fcontrolpanel_goto_fcontrolpanel() {
  if (user_access('access features control panel')) {
    drupal_goto('admin/fcontrolpanel');
  }
}

//--------------------------------------------------/
// Ctools plugin                                    /
//--------------------------------------------------/
/**
 * Implmenentation of hook_ctools_plugin_directory.
 */
function fcontrolpanel_ctools_plugin_directory($module, $plugin) {
  if ($plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function fcontrolpanel_ctools_plugin_api($owner, $api) {
  if ($owner == 'fcontrolpanel' && $api == 'default_fcontrolpanel_fcontrol') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_default_mymodule_myobj().
 *
 * Provide a couple of default presets.
 *
 * Note: This function name is defined in .install file,
 *   'default hook' => 'default_mymodule_myobj',  // Function hook name.
 */
function fcontrolpanel_default_fcontrolpanel_fcontrol() {
  $export = array();

  $export = array();
  $fcontrol = new stdClass;
  $fcontrol->disabled = TRUE; /* Edit this to true to make a default fcontrol disabled initially */
  $fcontrol->api_version = 1;
  $fcontrol->package = 'example';
  $fcontrol->title = 'This is an example';
  $fcontrol->name = 'example';
  $fcontrol->path = 'admin/example';
  $fcontrol->query = 'x=y&a=b';
  $fcontrol->description = 'This is an example control for the features control panel.';
  $fcontrol->video_title = 'Instructional Video';
  $fcontrol->video = '<embed>YouTube video here.</embed>';
  $fcontrol->instructions_title = '3 Steps to Blah De Blah';
  $fcontrol->instructions = 'Step 1. blee. Step 2. Blah. Step 3. Blo.';

  $export['example'] = $fcontrol;
  return $export;
}


//--------------------------------------------------/
// Ctools export hooks                              /
//--------------------------------------------------/

/**
 * Export a myobj and display it in a form.
 *
 * @param $name
 *  string, unique id for object
 */
function fcontrolpanel_export_fcontrol($form, &$form_state, $name) {
  ctools_include('export');
  $obj = fcontrolpanel_fcontrol_load($name);
  $title = $obj->description;
  drupal_set_title($title);
  $code = fcontrolpanel_fcontrol_export($obj);
  $lines = substr_count($code, "\n");

  $form['export'] = array(
    '#title' => t('Export data'),
    '#type' => 'textarea',
    '#value' => $code,
    '#rows' => $lines,
    '#description' => t('Copy the export text and paste it into another myobj using the import function.'),
  );
  return $form;
}

/**
 * Load a single myobj.
 */
function fcontrolpanel_fcontrol_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('fcontrolpanel_fcontrol', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Export a myobj.
 */
function fcontrolpanel_fcontrol_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('fcontrolpanel_fcontrol', $obj, $indent);
  return $output;
}

/**
 * Save a single myobj.
 */
function fcontrolpanel_fcontrol_save(&$myobj) {
  $update = (isset($myobj->fcid) && is_numeric($myobj->fcid)) ? array('fcid') : array();
  return drupal_write_record('fcontrolpanel_fcontrol', $myobj, $update);
}
