<?php

/**
 * Implements hook_menu().
 */
function identification_menu() {
  $items = array();
  $items['admin/config/people/identification'] = array(
    'title' => 'Identification',
    'description' => 'Configuration for the Identification module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('identification_configuration_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;  
}

/**
 * Configuration form builder.
 */
function identification_configuration_form($form, &$form_state) {
  
  $form['identification_field_name'] = array(
    '#type' => 'select',
    '#title' => t('Identification field'),
    '#field_suffix' => l(t('Create new field'), 'admin/config/people/accounts/fields'),
    '#default_value' => variable_get('identification_field_name', ''),
    '#description' => t('Select the field to use for the user identification number (or string).'),
    '#required' => FALSE
  );
  
  // We'll allow the following field types to be used as an identifier.
  $field_types = array(
    'number_decimal',
    'number_float',
    'number_integer',
    'text'
  );
  
  // Grab list of eligible field names and place them as options on the form.
  $options = array('' => '- None -');
  $query = db_select('field_config_instance', 'fci')
    ->fields('fci', array('field_name', 'data'))
    ->fields('fc', array('type'))
    ->condition('fci.entity_type', 'user')
    ->condition('fci.deleted', 0)
    ->condition('fc.type', $field_types, 'IN');
  $query->join('field_config', 'fc', 'fci.field_name = fc.field_name');
  $fields = $query->execute()->fetchAll();
  foreach($fields as $field) {
    $data = unserialize($field->data);
    $options[$field->field_name] = $data['label'] . " ({$field->field_name})";
  }
  $form['identification_field_name']['#options'] = $options;
  
  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function identification_form_user_login_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['#validate'], 'identification_user_login_validate');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function identification_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['#validate'], 'identification_user_login_validate');
}

/**
 *
 */
function identification_user_login_validate($form, &$form_state) {
  $field_name = variable_get('identification_field_name', '');
  if (empty($field_name)) { return; }
  $name = $form_state['values']['name'];
  $query = db_select('users', 'u')
    ->fields('u', array('name'))
    ->condition("fd.{$field_name}_value", $name);
  $query->join("field_data_$field_name", 'fd', 'u.uid = fd.entity_id');
  $result = $query->execute()->fetchObject();
  if (isset($result->name)) {
    $form_state['values']['name'] = $result->name;
  }
}

