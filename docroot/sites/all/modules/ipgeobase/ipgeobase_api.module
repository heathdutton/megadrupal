<?php

/**
 * @file
 * API for using IpGeoBase database - ipgeobase.ru - source of precise data for binding
 * ips to geo locations (Russia only).
 * More info on this:
 * http://info.nic.ru/st/2/out_1555.shtml
 *
 * Similar modules:
 * http://drupal.org/project/geoip - uses maxmind.com database
 * http://drupal.org/node/45806 - ip2country
 *
 * TODO
 * - add readme for using the module
 * - block for displaying current user geo info using Yandex maps (separate module)
 * - block for displaying current user geo info using Google maps (separate module)
 * - lookups using local binary file.
 * - ability to switch between local binary file and remote service
 * - notify user when local binary file is outdated (?)
 * - ...
 * - PROFIT
 */

const IPGEOBASE_API_URL = 'http://ipgeobase.ru:7020/geo?ip=';

/**
 * Implements hook_menu().
 */
function ipgeobase_api_menu() {
  $items = array();

  $items['admin/config/system/ipgeobase_api'] = array(
    'title' => 'IpGeoBase settings',
    'description' =>  'Provides API for interaction with ipgeobase.ru service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ipgeobase_api_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Ipgeobase settings form.
 */
function ipgeobase_api_admin_settings() {
  $form['ipgeobase_general_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
  );

  $form['ipgeobase_general_settings']['ipgeobase_cache_ttl'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache entry TTL (seconds)'),
    '#description' => t('TTL is used to determine when cached geolocation entry is considered old enough for being refreshed.'),
    '#default_value' => variable_get('ipgeobase_cache_ttl', 86400),
  );

  $form['ipgeobase_general_settings']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration')
  );
  $form['ipgeobase_general_settings']['buttons']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset to defaults')
  );

  $form['ipgeobase_cache_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['ipgeobase_cache_settings']['info'] = array(
    '#value' => '<p>' . t('Clear cached geolocation data. All geolocation lookups which use remote service are being cached in the Drupal database. Pressing this button will remove these entries. Usually you would not need to fresh cache manually. Use it if you believe that geolocation data was being saved in the cache incorrectly.') . '</p>',
  );
  $form['ipgeobase_cache_settings']['buttons']['clear'] = array(
    '#type' => 'submit',
    '#value' => t('Clear cache')
  );

  return $form;
}

/**
 * Ipgeobase settings form submit handler.
 */
function ipgeobase_api_admin_settings_submit($form, &$form_state) {
  $values = $form_state['values'];

  switch ($values['op']) {
    case t('Clear cache'):
      db_query('DELETE FROM {ipgeobase_api}');
      drupal_set_message(t('Cache has been cleared.'));
      break;
    case t('Save configuration'):
      variable_set('ipgeobase_cache_ttl', $values['ipgeobase_cache_ttl']);
      drupal_set_message(t('Configration has been saved successfully.'));
      break;
    case t('Reset to defaults'):
      variable_del('ipgeobase_cache_ttl');
      drupal_set_message(t('Configuration was reset to defaults.'));
      break;
  }
}

/**
 * Get geolocation by ip.
 *
 * @param string $ip IP address.
 * @return stdClass|bool Geolocation object or FALSE if nothing was found.
 */
function ipgeobase_api_get_geolocation($ip) {
  // Check if ip is in cache
  $geolocation = _ipgeobase_api_load_geolocation($ip);

  if (FALSE === $geolocation) {
    $geolocation = ipgeobase_api_request_service($ip);

    if (FALSE === $geolocation) {
      return FALSE;
    }

    // Save into persistent storage
    _ipgeobase_api_save_geolocation($geolocation);
  }

  return $geolocation;
}

/**
 * Make request to the IpGeoBase service. It makes one request per IP address
 * and saves results in the static cache.
 *
 * @param string $ip Ip address
 * @return stdClass|bool Geolocation object or false if geolocation was not found
 */
function ipgeobase_api_request_service($ip) {
  static $cache = array();

  // Check static cache first
  if (isset($cache[$ip])) {
    return $cache[$ip];
  }

  $url = variable_get('ipgeobase_service_url', IPGEOBASE_API_URL);
  $service_response = drupal_http_request($url . $ip);
  
  if (isset($service_response->error)) {
    watchdog('ipgeobase_api', $service_response->error, WATCHDOG_ERROR);
    return FALSE;
  }

  $geolocation_xml = $service_response->data;

  $xml = simplexml_load_string($geolocation_xml);

  if ($xml->ip->message == 'Not found') {
    return FALSE;
  }

  $geolocation = new stdClass();
  $geolocation->ip = $ip;
  $geolocation->city = (string)$xml->ip->city;
  $geolocation->lng = (string)$xml->ip->lng;
  $geolocation->lat = (string)$xml->ip->lat;
  $geolocation->region = (string)$xml->ip->region;
  $geolocation->district = (string)$xml->ip->district;

  // Save into cache
  $cache[$ip] = $geolocation;

  return $geolocation;
}

/**
 * Save geolocation object in the database cache.
 *
 * @param stdClass $geolocation
 */
function _ipgeobase_api_save_geolocation($geolocation) {
  $fields = array(
    'ip' => $geolocation->ip,
    'city' => $geolocation->city,
    'lng' => (float)$geolocation->lng,
    'lat' => (float)$geolocation->lat,
    'region' => $geolocation->region,
    'district' => $geolocation->district,
    '`created`' => (int)REQUEST_TIME
  );
  db_insert('ipgeobase_api')->fields($fields)->execute();
}

function _ipgeobase_api_load_geolocation($ip) {
  $geoloc = db_query("SELECT * FROM {ipgeobase_api} WHERE ip = :ip", array(':ip' => $ip))->fetchObject();
  return $geoloc;
}

/**
 * Implements hook_cron().
 */
function ipgeobase_api_cron() {
  $ttl = variable_get('ipgeobase_cache_ttl', 86400);
  db_query('DELETE FROM {ipgeobase_api} WHERE created < (UNIX_TIMESTAMP() - :ttl)', array(':ttl' => $ttl));
}