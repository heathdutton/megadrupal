<?php

/**
 * Implements hook_install().
 */
function civicrm_multiday_event_types_install() {
	//create taxonomy vocab 'civicrm_multiday_event_type'
	civicrm_multiday_event_types_add_vocab();
	
	//create field 'field_civicrm_multidayevent_type'
	civicrm_multiday_event_types_add_fields();
}

function civicrm_multiday_event_types_add_fields() {
	// Create the 'field_airing_channel' field if it doesn't already exist.
  if (!field_info_field('field_civicrm_multidayevent_type')) {
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_civicrm_multidayevent_type',
      'foreign keys' => array(
        'tid' => array(
          'columns' => array(
            'tid' => 'tid',
          ),
          'table' => 'taxonomy_term_data',
        ),
      ),
      'indexes' => array(
        'tid' => array(
          0 => 'tid',
        ),
      ),
      'module' => 'taxonomy',
      'settings' => array(
        'allowed_values' => array(
          0 => array(
            'parent' => '0',
            'vocabulary' => 'civicrm_multiday_event_type',
          ),
        ),
        'field_permissions' => array(
          'create' => 0,
          'edit' => 0,
          'edit own' => 0,
          'view' => 0,
          'view own' => 0,
        ),
        'profile2_private' => FALSE,
      ),
      'translatable' => '0',
      'type' => 'taxonomy_term_reference',
    );

    field_create_field($field);

    // Create the instance on the bundle.
    $instance = array(
      'bundle' => 'civicrm_multiday_event',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'taxonomy',
          'settings' => array(),
          'type' => 'taxonomy_term_reference_link',
          'weight' => 14,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_civicrm_multidayevent_type',
      'label' => 'Event Type',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => '12',
      ),
    );

    field_create_instance($instance);
	}
}

function civicrm_multiday_event_types_add_vocab() {
  //check for existing event_type vocabulary
  $vocabularies = taxonomy_get_vocabularies();
  foreach($vocabularies as $vocab) {
    if($vocab->machine_name == 'civicrm_multiday_event_type') {
      variable_set('civicrm_multiday_event_types_vid', $vocab->vid);
    }
  }
    
  // Create the channel vocabulary if it does not exist.
  $vocabulary = taxonomy_vocabulary_load(variable_get('civicrm_multiday_event_types_vid', 0));
  if (!$vocabulary) {
    $edit = array(
      'name' => t('Event Type'),
      'machine_name' => 'civicrm_multiday_event_type',
      'description' => t(''),
      'hierarchy' => 1,
      'module' => 'civicrm_multiday_event_types',
      'weight' => -10,
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
    variable_set('civicrm_multiday_event_types_vid', $vocabulary->vid);
	}
}

/**
 * Implements hook_uninstall().
 */
function civicrm_multiday_event_types_uninstall() {
	//delete vocab
	taxonomy_vocabulary_delete(variable_get('civicrm_multiday_event_types_vid', 0));
	
	// delete variables
	variable_del('civicrm_multiday_event_types_vid');
	
	// delete field instances for 'civicrm_multiday_event_types' field
	$params = array(
		'field_name' => 'field_civicrm_multidayevent_type',
	);
	foreach(field_read_instances($params) as $instance) {
		field_delete_instance($instance);
	}
}

