<?php
/**
 * @file
 * Code for the CiviCRM Multiday Event
 */

/**
 * Implements hook_init().
 */
function civicrm_multiday_event_init() {
  drupal_add_css(drupal_get_path('module', 'civicrm_multiday_event') . '/civicrm_multiday_event.css');
}


/**
 * Implementation of hook_menu().
 */
function civicrm_multiday_event_menu() {

  // use existing CiviCRM Permissions
  // edit event participants
  // edit all events

  $items['admin/config/civicrm/civicrm-multiday-event'] = array(
    'title' => 'CiviCRM Multiday Event Configuration',
    'description' => 'Configuration options for CiviCRM Multiday Event.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_multiday_event_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/civicrm-event-view-link'] = array(
    'access callback' => 'civicrm_multiday_event_view_access',
    'access arguments' => array(1),
    'page callback' => 'civicrm_multiday_event_view_link',
    'page arguments' => array(1),
    'title' => 'View CiviCRM Event',
    'weight' => 4,
    'type' => MENU_LOCAL_ACTION,
  );

  $items['node/%node/civicrm-event-edit-link'] = array(
    'access callback' => 'civicrm_multiday_event_edit_access',
    'access arguments' => array(1),
    'page callback' => 'civicrm_multiday_event_edit_link',
    'page arguments' => array(1),
    'title' => 'Edit Event in CiviCRM',
    'weight' => 5,
    'type' => MENU_LOCAL_ACTION,
  );

  $items['node/%node/civicrm-event-register-participant-link'] = array(
    'access callback' => 'civicrm_multiday_event_manage_participant_access',
    'access arguments' => array(1),
    'page callback' => 'civicrm_multiday_event_register_participant_link',
    'page arguments' => array(1),
    'title' => 'Register Participant in CiviCRM',
    'weight' => 6,
    'type' => MENU_LOCAL_ACTION,
  );

  $items['node/%node/civicrm-event-participants-link'] = array(
    'access callback' => 'civicrm_multiday_event_manage_participant_access',
    'access arguments' => array(1),
    'page callback' => 'civicrm_multiday_event_participants_link',
    'page arguments' => array(1),
    'title' => 'Manage Participants in CiviCRM',
    'weight' => 7,
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Builds the cm_project admininstration settings form.
 */
function civicrm_multiday_event_admin_settings($form, &$form_state) {
  $form = array();
  $form['civicrm_multiday_event_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('CiviCRM Multiday Event Settings'),
    '#collapsible' => TRUE,
    '#collapse' => FALSE,
    '#weight' => 1,
  );
  $form['civicrm_multiday_event_settings']['civicrm_multiday_event_delete_civievent'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete CiviCRM Event When Node is Deleted'),
    '#default_value' => variable_get('civicrm_multiday_event_delete_civievent', 0),
    '#description' => t('If this is unchecked, deleting the node will leave the CiviCRM Event untouched.  NOTE: Deleting the CiviCRM Event in CiviCRM will leave an orphaned Drupal node.'),
  );
  $form['civicrm_multiday_event_settings']['civicrm_multiday_event_allow_title_override'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Custom Titles'),
    '#default_value' => variable_get('civicrm_multiday_event_allow_title_override', 0),
    '#description' => t('If this is checked, users with the edit all events permission can add a title or leave it blank.  Blank titles will be autopopulated with [event type] - [startdate] to [enddate] pattern. This allows overriding titles with a custom title.  If unchecked, the title field will be hidden and it will always be updated to the pattern.  The date pattern can be customized in the Date and Time settings. Custom titles will NOT be updated when altering dates using Full Calendar.'),
  );
  $form['civicrm_multiday_event_publishing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Publishing Settings'),
    '#collapsible' => TRUE,
    '#collapse' => FALSE,
    '#weight' => 2,
  );
  $form['civicrm_multiday_event_publishing']['civicrm_multiday_event_unpublish_civievent'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make CiviCRM Event not public When Node is unpublished'),
    '#default_value' => variable_get('civicrm_multiday_event_unpublish_civievent', 0),
    '#description' => t('If this is unchecked, unpublishing the node will leave the CiviCRM Event untouched.'),
  );
  $form['civicrm_multiday_event_publishing']['civicrm_multiday_event_inactive_civievent'] = array(
    '#type' => 'checkbox',
    '#title' => t('Also make CiviCRM Event not active When Node is un published'),
    '#default_value' => variable_get('civicrm_multiday_event_inactive_civievent', 1),
    '#description' => t('If this is unchecked, un-publishing the node will leave the CiviCRM Event untouched.'),
    '#states' => array(
      // Only show this field when the 'civicrm_multiday_event_unpublish_civievent' checkbox is enabled.
      'visible' => array(
        ':input[name="civicrm_multiday_event_unpublish_civievent"]' => array('checked' => TRUE),
      ),
      'enabled' => array(
        ':input[name="civicrm_multiday_event_unpublish_civievent"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['civicrm_multiday_event_register_link'] = array(
    '#type' => 'fieldset',
    '#title' => t('Register Link Display Settings'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['civicrm_multiday_event_register_link']['civicrm_multiday_event_match_permission'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the permission "CiviEvent: register for events" to show or hide the Register link'),
    '#default_value' => variable_get('civicrm_multiday_event_match_permission', 0),
    '#description' => t('If this option is checked, the Register link will use the CiviCRM permission for controling the display of the Registration link. If this is left unchecked, there is no check to see if the user is allowed to register using the existing CiviCRM permission: <strong>register for events</strong> which can cause confusion if your site is configured to prevent anonymous users from registering.'),
  );

  $form['civicrm_multiday_event_register_link']['civicrm_multiday_event_first_session_restriction'] = array(
    '#type' => 'checkbox',
    '#title' => t('Prevent the Register link from appearing if the event has started.'),
    '#default_value' => variable_get('civicrm_multiday_event_first_session_restriction', 0),
    '#description' => t('If this option is checked, the Register link will not appear on the node if the <strong>first session</strong> date has passed. If not checked, the Register link is shown even if the event has started.'),
  );
  $form['civicrm_multiday_event_register_link']['civicrm_multiday_event_registration_dates_restriction'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use CiviEvent Registration Dates to control the display of the Register link.'),
    '#default_value' => variable_get('civicrm_multiday_event_registration_dates_restriction', 0),
    '#description' => t('If this option is checked, the Register link will not appear if the current date is outside of the Registration Start and End Dates from the CiviEvent. If you leave this unchecked, the registration dates defined in the CiviEvent will have no affect on the Register link.'),
  );

  return system_settings_form($form);
}

/**
 * Access function called by hook_menu().
 */
function civicrm_multiday_event_view_access($node) {
  if ($node->type == 'civicrm_multiday_event' && user_access('view event info')) {
    return TRUE;
  }
}

/**
 * Access function called by hook_menu().
 */
function civicrm_multiday_event_edit_access($node) {
  if ($node->type == 'civicrm_multiday_event' && user_access('edit all events')) {
    return TRUE;
  }
}

/**
 * Access function called by hook_menu().
 */
function civicrm_multiday_event_manage_participant_access($node) {
  if ($node->type == 'civicrm_multiday_event' && user_access('edit event participants')) {
    return TRUE;
  }
}

/**
 * Because CiviCRM uses query string, we use drupal_goto to redirect
 * the action links
 */
function civicrm_multiday_event_view_link($node) {
  drupal_goto('civicrm/event/info', array('query'=>array(
  'reset'=>'1',
  'id'=>$node->field_civievent_id[LANGUAGE_NONE][0]['value'],
  'destination'=> 'node/' . $node->nid
  )));
}

function civicrm_multiday_event_edit_link($node) {
  drupal_goto('civicrm/event/manage/settings',array('query'=>array(
  'reset'=>'1',
  'action'=>'update',
  'id'=>$node->field_civievent_id[LANGUAGE_NONE][0]['value'],
  'destination'=> 'node/' . $node->nid,
  )));
}

function civicrm_multiday_event_register_participant_link($node) {
  drupal_goto('civicrm/participant/add', array('query'=>array(
  'reset'=>'1',
  'action'=>'add',
  'context'=>'standalone',
  'eid'=>$node->field_civievent_id[LANGUAGE_NONE][0]['value'],
  'destination'=> 'node/' . $node->nid
  )));
}

function civicrm_multiday_event_participants_link($node) {
  drupal_goto('civicrm/event/search', array('query'=>array(
  'reset'=>'1',
  'force'=>'1',
  'status'=>'true',
  'event'=>$node->field_civievent_id[LANGUAGE_NONE][0]['value'],
  'destination'=> 'node/' . $node->nid
  )));
}


// use hook_node_info and hook_form to prevent uninstall issue caused by Features
// http://drupal.org/node/1055460

/**
 * Implements hook_node_info().
 */
function civicrm_multiday_event_node_info() {
  return array(
    'civicrm_multiday_event' => array(
      'name' => t('Event (CiviCRM Multiday)'),
      'base' => 'civicrm_multiday_event',
      'description' => t('This content type creates a node with multiple dates in Drupal that in mirrored by a CiviCRM Event with start and end date that spans all the Drupal dates.'),
      'has_title' => TRUE,
      'title_label' => 'Title',
      'has_body' => TRUE,
    ),
  );
}


/**
 * Implement hook_form() with the standard default form.
 */
function civicrm_multiday_event_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function civicrm_multiday_event_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'civicrm_multiday_event_node_form') {
    if (!civicrm_initialize()) {
      drupal_set_message(t('Failed to initialize CiviCRM'));
      return;
    }

    if (user_access('edit all events')) {
	  $form['field_civievent_id'][LANGUAGE_NONE][0]['value']['#description'] = 'This field is only visible to users with permission to edit all CiviCRM events.  Adding an ID of and existing CiviCRM Event will link the Drupal node to CiviCRM event.  Leave blank to create a new CiviCRM Event.';
    } else {
	  $form['field_civievent_id'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';
    }

    if (user_access('edit all events') && variable_get('civicrm_multiday_event_allow_title_override', 0)) {
      $form['title']['#required'] = FALSE;
      $form['title']['#description'] = 'This field is only visible to users with permission to edit all CiviCRM events. Leave it blank to auto-populate using this pattern [event type] - [startdate] to [enddate]';
    } else {
      $form['title']['#type'] = 'hidden';
      $form['title']['#required'] = FALSE;
    }

    $form['field_date_of_first_session']['#type'] = 'hidden';
    $form['field_date_of_first_session'][LANGUAGE_NONE][0]['#type'] = 'hidden';

    $templates = array();
    $templates['_none'] = '- None -';

    // Use API call in versions > 4.2
    // http://issues.civicrm.org/jira/browse/CRM-10540
    $version = CRM_Utils_VersionCheck::singleton()->localVersion;

    if ($version < "4.4") {
      $result = db_query('SELECT id, template_title FROM {civicrm_event} WHERE is_template = 1 ORDER BY template_title');

      foreach ($result as $record) {
        $templates[$record->id] = $record->template_title;
      }
    } else {
			$params = array(
				'version' => 3,
				 'sequential' => 1,
				 'is_template' => 1,
				 'option.limit' => 9999,
				 'options' => array(
				 'sort' => 'template_title'),
			);
      $result = civicrm_api('Event', 'get', $params);

      foreach ($result['values'] as $key => $record) {
        $templates[$record['id']] = $record['template_title'];
      }
    }

    $form['field_civievent_template'][LANGUAGE_NONE]['#options'] = $templates;

    //set defaults for edit
    if (isset($form['nid']['#value'])) {

      $node = node_load($form['nid']['#value']);
      $form['field_civievent_template'][LANGUAGE_NONE]['#default_value'] = $node->field_civievent_template[LANGUAGE_NONE][0]['value'];
    }
  }
}


// @TODO - Find solution for FullCalendar bypassing hooks
// when using field_attach_presave() and field_attach_update()
// http://drupal.org/node/1778070

/**
 * Implements hook_field_attach_presave().
 */
function civicrm_multiday_event_field_attach_presave($entity_type, $entity) {

  if ($entity_type != 'field_collection_item') {
	  return;
  }

  if ($entity->field_name != 'field_civicrm_multiday_session') {
	  return;
  }

	if (!$entity->item_id) {
	  return;
	}

  $nid = db_query("SELECT entity_id FROM {field_data_field_civicrm_multiday_session} WHERE field_civicrm_multiday_session_value = :fid", array('fid' => $entity->item_id))->fetchField();
  $node = node_load($nid, NULL, TRUE); 
  node_save($node);
}


/**
 * Implements hook_node_presave().
 */
function civicrm_multiday_event_node_presave($node) {

  if ($node->type == 'civicrm_multiday_event') {

    if (!empty($node->field_civicrm_multiday_session[LANGUAGE_NONE][0]['value'])) {
      $start_eid = $node->field_civicrm_multiday_session[LANGUAGE_NONE][0]['value'];
      $start_eid_key = end($node->field_civicrm_multiday_session[LANGUAGE_NONE]);
      $end_eid = $start_eid_key['value'];
      $start_entity = field_collection_item_load($start_eid);
      $end_entity = field_collection_item_load($end_eid);
    }
    elseif ($node->field_civicrm_multiday_session[LANGUAGE_NONE][0]['field_session_date']) {
      $start_entity = $node->field_civicrm_multiday_session[LANGUAGE_NONE][0]['entity'];
      $end_entity = end($node->field_civicrm_multiday_session[LANGUAGE_NONE]);
      $end_entity = $end_entity['entity'];
    }

    //once the node is linked to an event, it no longer uses the event template to prepopulate fields
    if (isset($node->field_civievent_id[LANGUAGE_NONE][0]['value']) && $node->field_civievent_id[LANGUAGE_NONE][0]['value']) {
      $event_id = $node->field_civievent_id[LANGUAGE_NONE][0]['value'];
      $params = civicrm_multiday_event_lookup($event_id);
    } else {
      $event_id = $node->field_civievent_template[LANGUAGE_NONE][0]['value'];
      $params = civicrm_multiday_event_lookup($event_id, 1);
      $params['id'] = NULL;
    }

    //set up array to create new event or update existing event
    $params['id'] = isset($node->field_civievent_id[LANGUAGE_NONE][0]['value']) ? $node->field_civievent_id[LANGUAGE_NONE][0]['value'] : NULL;

    //we have to remove the timezone offset because CiviCRM will re-add it
    $timezone = variable_get('date_default_timezone', 0);
    $offset = civicrm_multiday_event_get_timezone_offset($timezone, 'UTC');

    $starttime = strtotime($start_entity->field_session_date[LANGUAGE_NONE][0]['value']);
    $start = $starttime - $offset;
    $endtime = strtotime($end_entity->field_session_date[LANGUAGE_NONE][0]['value2']);
    $end = $endtime - $offset;

    // DST Check
    $now_dst = localtime(time(), TRUE);

    $mod_start_date_dst = localtime($start, TRUE);
    $mod_end_date_dst = localtime($end, TRUE);

    if ($now_dst['tm_isdst'] < $mod_start_date_dst['tm_isdst']) {
      $start = $start + 3600;
    }

    if ($now_dst['tm_isdst'] > $mod_start_date_dst['tm_isdst']) {
      $start = $start - 3600;
    }

    if ($now_dst['tm_isdst'] < $mod_end_date_dst['tm_isdst']) {
      $end = $end  + 3600;
    }

    if ($now_dst['tm_isdst'] > $mod_end_date_dst['tm_isdst']) {
      $end = $end  - 3600;
    }

    $params['start_date'] = format_date($start, 'custom', 'Y-m-d H:i:s');
    $title_start = format_date($start, 'civicrm_multiday_event_date_format');

    $params['end_date'] = format_date($end, 'custom', 'Y-m-d H:i:s');
    $title_end = format_date($end, 'civicrm_multiday_event_date_format');

    // this field is hidden.  Always set to start_date to help with sorting in Views
    $node->field_date_of_first_session[LANGUAGE_NONE][0]['value'] = $params['start_date'];

    // Only update the title and body from template or event when form field is
    // empty.  This allows admins to override the default.

    if (isset($node->body[LANGUAGE_NONE][0]['summary']) && isset($params['summary'])) {
      $node->body[LANGUAGE_NONE][0]['summary'] = str_replace("[civicrm-template-event-summary]", $params['summary'], $node->body[LANGUAGE_NONE][0]['summary']);
      //$node->body[LANGUAGE_NONE][0]['summary'] = isset($params['summary']) ? $params['summary'] : NULL;
    }

    if (isset($node->body[LANGUAGE_NONE][0]['value']) && isset($params['description'])) {
      $node->body[LANGUAGE_NONE][0]['value'] = str_replace("[civicrm-template-complete-description]", $params['description'], $node->body[LANGUAGE_NONE][0]['value']);
      //$node->body[LANGUAGE_NONE][0]['value'] = isset($params['description']) ? $params['description'] : NULL;
    }

    if (!$node->title || !variable_get('civicrm_multiday_event_allow_title_override', 0)) {
      //reset title to pattern... need template
      $template_event_id = $node->field_civievent_template[LANGUAGE_NONE][0]['value'];
      $template_params = civicrm_multiday_event_lookup($template_event_id, 1);

      if ($title_start != $title_end) {
        $date = ' - ' . $title_start . ' to ' . $title_end;
      } else {
        if (isset($title_start)) {
          $date = ' - ' . $title_start;
        } else {
          $date = ' - ' . t('MISSING START DATE');
        }
      }

      // templates don't have to include a title so use the
      // template title if there is no title
      if (isset($template_params['title'])) {
        $node->title = $template_params['title'] . $date;
      } else {
        $node->title = $template_params['template_title'] . $date;
        $params['title'] = $template_params['template_title'] . $date;
      }

    } else {
	    $params['title'] = $node->title;
    }
    
    // SET PUBLIC AND ACTIVE STATUS BASED ON NODE PUBLISHED SETTING
    if (variable_get('civicrm_multiday_event_unpublish_civievent', 1)) {
      $params['is_public'] = ($node->status) ? 1 : 0;
    } else {
      $params['is_public'] = 1;
    }
    
    if (variable_get('civicrm_multiday_event_inactive_civievent', 1)) {
      $active = ($node->status) ? 1 : 0;
    } else {
      $active = 1;
    }
    
    if (civicrm_initialize()) {
      $params['version'] = 3;
      //we never want new events to be templates
      $params['is_template'] = 0;
      $result = civicrm_api('event', 'create', $params);

      if ($result['is_error']) {
        drupal_set_message($result['error_message'], 'warning');
      } else {

        // Fix for issue 1896876
        $profiles = civicrm_api('UFJoin', 'get', array(
          'entity_id' => $node->field_civievent_template[LANGUAGE_NONE][0]['value'],
          'entity_table' => 'civicrm_event',
          'is_active' => $active,
          'version'  => 3,
        ));

        if (!$profiles['is_error'] && $profiles['count']) {
          foreach ($profiles['values'] as $p) {
            civicrm_api('UFJoin', 'create', array(
              'entity_id' => $result['id'],
              'entity_table' => $p['entity_table'],
              'is_active' => $p['is_active'],
              'module' => $p['module'],
              'uf_group_id' => $p['uf_group_id'],
              'version'  => 3,
              'weight' => $p['weight'],
            ));
          }
        }

        if (!$node->nid) {
          $node->field_civievent_id[LANGUAGE_NONE][0]['value'] = $result['id'];
        }

        // manually insert the priceset, but only on new events
        // this is still required for CiviCRM 4.4
        if ($params['price_set_id'] && $result['id'] != $event_id) {
          db_insert('civicrm_price_set_entity')
            ->fields(array(
            'entity_table' => 'civicrm_event',
            'entity_id ' => $result['id'],
            'price_set_id ' => $params['price_set_id'],
          ))->execute();
        }
      }
    }

  }
}

/**
 * Implements hook_node_view().
 */
function civicrm_multiday_event_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'civicrm_multiday_event') {
    $params = isset($node->field_civievent_id[LANGUAGE_NONE][0]['value']) ? civicrm_multiday_event_lookup($node->field_civievent_id[LANGUAGE_NONE][0]['value']) : NULL;
    $register = array(); //this array holds the boolean values that determine if the register link should be shown.
    // check if CiviEvent online registration is enabled
    $register[] = ($params['is_online_registration'] ? true : false);
    // check if CiviEvent is public
    $register[] = ($params['is_public'] ? true : false);
    // check if CiviEvent is active
    $register[] = ($params['is_online_registration'] ? true : false);
    // #1901378: Restrict registration link
    if (variable_get('civicrm_multiday_event_match_permission', 0)){
      // permission for registering are now respecting the civicrm permission: CiviEvent: register for events
      $register[] = (user_access('register for events') ? true : false );
    }
    //check the admin option that prevents registration links from displaying if the event has begun
    if (variable_get('civicrm_multiday_event_first_session_restriction', 0)) {
      // check to see if the event has started
      if (isset($node->field_date_of_first_session[LANGUAGE_NONE][0]['value'])) {
        $first_session = strtotime($node->field_date_of_first_session[LANGUAGE_NONE][0]['value']);
        $now = time();
        $register[] = ( $now <= $first_session ? true : false );
      }
    }

    //check the admin option that determines if we have to adhere to the CiviEvent registration From and To dates to control the nodes register link
    if (variable_get('civicrm_multiday_event_registration_dates_restriction', 0)) {

      if (isset($params['registration_start_date'])) {
        $reg_start_date = strtotime($params['registration_start_date']);
        $now = time();
        $register[] = ($now < $reg_start_date ? false : true );
      }
      if (isset($params['registration_end_date'])) {
        $reg_end_date = strtotime($params['registration_end_date']);
        $now = time();
        $register[] = ($now > $reg_end_date ? false : true );
      }
    }
    // check if all the rules are true
    if (!in_array(FALSE, $register)) {
      // display the link
      global $base_path;

      //this can be removed when the API returns templates
      $registration_link_text = isset($params['registration_link_text']) ? $params['registration_link_text'] : 'Register Now';

      $body_link = '<a href="' . $base_path . 'civicrm/event/register?id=' . $node->field_civievent_id[LANGUAGE_NONE][0]['value'] . '" class="civicrm-multiday-event-register-button">' . $registration_link_text . '</a>';

      //$node->content['body'][0]['#markup'] = '<span class="node-links register_link action-link section register_link-section" style="float: right">' . $body_link . '</span> ' . $node->body[LANGUAGE_NONE][0]['value'];

      $node->content['additional-text'] = array(
        '#markup' => $body_link,
        '#weight' => -10, // Set as lower as to bring this markup upper
      );

      $links['civicrm_event_register'] = array(
        'title' => $body_link,
        'html' => True,
        'attributes' => array('class' => 'register_link action-link section register_link-section'),
      );

      if ($view_mode == 'full') {
        $node->content['links']['civicrm_event_register'] = array(
          '#links' => $links,
        );
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function civicrm_multiday_event_node_delete($node) {
  if ($node->type == 'civicrm_multiday_event' && variable_get('civicrm_multiday_event_delete_civievent', 0) && $node->field_civievent_id[LANGUAGE_NONE][0]['value']) {
    if (!civicrm_initialize()) {
      drupal_set_message(t('Failed to initialize CiviCRM'));
      return;
    }

    $params = array();
    $params['version'] = 3;
    $params['sequential'] = 1;
    $params['id'] = $node->field_civievent_id[LANGUAGE_NONE][0]['value'];

    $result = civicrm_api('event', 'delete', $params);

    if ($result['is_error']) {
      drupal_set_message($result['error_message'], 'warning');
    }
  }
}

/**
 * Implements hook_node_update()
 */
function civicrm_multiday_event_node_update($node) {
  if ($node->type == 'civicrm_multiday_event') {
    if ($node->status == 0 && $node->original->status == 1 && $node->field_civievent_id[LANGUAGE_NONE][0]['value'] && variable_get('civicrm_multiday_event_unpublish_civievent', 0)) {
      // make the civicrm event not public
      if (!civicrm_initialize()) {
        drupal_set_message(t('Failed to initialize CiviCRM'));
        return;
      }
      $params = array();
      $params['version'] = 3;
      $params['sequential'] = 1;
      $params['id'] = $node->field_civievent_id[LANGUAGE_NONE][0]['value'];

      $event = civicrm_api('event', 'getsingle', $params);
      
      // SET PUBLIC AND ACTIVE STATUS BASED ON NODE PUBLISHED SETTING
			if (variable_get('civicrm_multiday_event_unpublish_civievent', 1)) {
				$event['is_public'] = ($node->status) ? 1 : 0;
			} else {
				$event['is_public'] = 1;
			}
		
			if (variable_get('civicrm_multiday_event_inactive_civievent', 1)) {
				$event['is_active'] = ($node->status) ? 1 : 0;
			} else {
				$event['is_active'] = 1;
			}
    
      $result = civicrm_api('event', 'update', array_merge($event, $params));
      if ($result['is_error']) {
        drupal_set_message($result['error_message'], 'warning');
      }
    }
  }
}

/**
 * Kept for legacy support
 */
function civicrm_multiday_event_template_lookup($id) {
  return civicrm_multiday_event_lookup($id);
}

/**
 * Lookup CiviCRM Event by ID.
 */
function civicrm_multiday_event_lookup($id, $is_template = NULL) {
  // API DOES NOT RETURN TEMPLATES in 4.1 W/O http://issues.civicrm.org/jira/browse/CRM-10540
  // We attempt to load template using the API, if that doesn't work we use a custom
  // function, but that doesn't not return everything the API does

  if (!civicrm_initialize()) {
    drupal_set_message(t('Failed to initialize CiviCRM'));
    return;
  }

  $params = array();

  $params['version'] = 3;
  $params['sequential'] = 1;
  $params['id'] = $id;
  $params['is_template'] = $is_template;
  $result = civicrm_api("Event", "get", $params);

  if ($result['is_error'] || !$result['count']) {
    // this will load templates if is_template doesn't work
    $params = db_query('SELECT * FROM {civicrm_event} WHERE id = :id', array(':id' => $id))->fetchAssoc();
  } else {
    $params = $result['values'][0];
  }

  $version = CRM_Utils_VersionCheck::singleton()->localVersion;

  if ($version < "4.4") {
    // priceset_id is not returned by the API nor will the API added it, so we are manually
    // inserting the priceset after the event. Need to get this fixed in 4.2

    require_once 'CRM/Price/BAO/Set.php';
    $params['price_set_id'] = CRM_Price_BAO_Set::getFor( 'civicrm_event', $id );
  } else {
    require_once 'CRM/Price/BAO/PriceSet.php';
    $params['price_set_id'] = CRM_Price_BAO_PriceSet::getFor( 'civicrm_event', $id );
  }

  return $params;
}

function civicrm_multiday_event_get_timezone_offset($remote_tz, $origin_tz = null) {
    if ($origin_tz === null) {
      if (!is_string($origin_tz = date_default_timezone_get())) {
        return false; // A UTC timestamp was returned -- bail out!
      }
    }
    $origin_dtz = new DateTimeZone($origin_tz);
    $remote_dtz = new DateTimeZone($remote_tz);
    $origin_dt = new DateTime("now", $origin_dtz);
    $remote_dt = new DateTime("now", $remote_dtz);
    $offset = $origin_dtz->getOffset($origin_dt) - $remote_dtz->getOffset($remote_dt);
    return $offset;
}

/**
 * Implementation of hook_views_api().
 */
function civicrm_multiday_event_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("version" => 3.0);
  }
}
