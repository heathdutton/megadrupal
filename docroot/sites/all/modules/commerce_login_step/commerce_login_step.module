<?php

/**
 * @file
 * Adds a login page to checkout process.
 */

/**
 * Implements hook_commerce_checkout_pane_info()
 */
function commerce_login_step_commerce_checkout_page_info() {

  $checkout_pages['login'] = array(
    'name' => t('Customer Login'),
    'title' => t('Customer Login'),
    'weight' => -1,
    'status_cart' => FALSE,
    'buttons' => TRUE,
  );

  return $checkout_pages;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This module works by altering the checkout form to add an additional bit of
 * AJAX to the Account Information checkout pane via this hook.
 */
function commerce_login_step_form_commerce_checkout_form_alter(&$form, &$form_state) {
  global $user;

  // If the Account Information pane is on the current checkout page and the
  // user is not logged in.
  if (!$user->uid && !empty($form['account'])) {

    $form['account']['login']['choose'] = array(
      '#type' => 'radios',
      '#title' => t('Choose how you want to checkout.'),
      '#options' => array(
        'anonymous' => t('Continue without login'),
        'login' => t('Login with an existing account'),
      ),
      '#ajax' => array(
        'callback' => 'commerce_login_step_checkout_form_refresh',
        'wrapper' => 'account-login-container',
      ),
      '#weight' => -1,
    );

    // Decide which checkout path to take.
    // Wait for input, guest checkout or account login.
    if (!isset($form_state['values']['account']['login'])) {
      $form['account']['login']['mail']['#access'] = FALSE;
      $form['account']['login']['mail_confirm']['#access'] = FALSE;
    }
    elseif ($form_state['values']['account']['login']['choose'] == 'anonymous') {
      // Nothing to do.
    }
    elseif ($form_state['values']['account']['login']['choose'] == 'login') {

      $form['account']['login']['password'] = array(
        '#type' => 'password',
        '#title' => t('Password'),
        '#required' => TRUE,
      );
      $form['account']['login']['login_now'] = array(
        '#type' => 'submit',
        '#value' => t('Login now'),
        '#limit_validation_errors' => array(array('account')),
        '#validate' => array('commerce_login_step_checkout_form_validate'),
        '#submit' => array('commerce_login_step_checkout_form_submit'),
      );
    }
  }
}

/**
 * Ajax callback: returns the account information pane to an AJAX request.
 */
function commerce_login_step_checkout_form_refresh($form, $form_state) {
  return $form['account']['login'];
}

/**
 * Validate callback: Validate the user credentials.
 */
function commerce_login_step_checkout_form_validate($form, &$form_state) {
  $mail = $form_state['values']['account']['login']['mail'];
  if ($error = user_validate_mail($mail)) {
    form_set_error('account][login][mail', $error);
  }
  elseif ($account = user_load_by_mail($mail)) {
    // If the user account is blocked...
    if (user_is_blocked($account->name)) {
      // Display an appropriate error message.
      form_set_error('account][login][email', t('The username %name has not been activated or is blocked.', array('%name' => $account->name)));
    }
    elseif ($uid = user_authenticate($account->name, $form_state['values']['account']['login']['password'])) {
      // Otherwise, if the user authenticates based on the name of the loaded
      // account and the supplied password, retain the uid to login the user on
      // final submission.
      $form_state['commerce_login_step_uid'] = $uid;
    }
    else {
      // But indicate that we could not login the user if validation failed.
      form_set_error('account][login][password', t('Sorry, unrecognized E-Mail or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))));
    }
  }
  else {
    // If no user is found by the given E-Mail.
    form_set_error('account][login][password', t('Sorry, unrecognized E-Mail or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))));
  }
}


/**
 * Submit callback: Attempt a login of the user now and rebuild.
 */
function commerce_login_step_checkout_form_submit($form, &$form_state) {
  global $user;

  if (!empty($form_state['commerce_login_step_uid'])) {
    // Load the specified user into the global $user variable.
    $user = user_load($form_state['commerce_login_step_uid']);

    // "Finalize" the login by triggering the appropriate system messages, IP
    // address and login timestamp logging, and user login hook.
    user_login_finalize();

    // Convert the current cart order to an authenticated cart for the current
    // user and clear out our variable from the form state.
    commerce_cart_order_convert($form_state['order'], $user);
    unset($form_state['commerce_login_step_uid']);
  }
  // Just trigger a rebuild.
  $form_state['rebuild'] = TRUE;
}