<?php

/**
 * @file
 * Implements the ces_message functionality.
 */

/**
 * @defgroup ces_message Ces Message
 * @ingroup ices
 * @{
 * Management application notifications.
 */

include_once dirname(__FILE__) . '/includes/ces_message.templates.inc';
include_once dirname(__FILE__) . '/includes/ces_message.message.inc';
include_once dirname(__FILE__) . '/includes/ces_message.actions.inc';

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function ces_message_entity_info() {
  $info['ces_message'] = array(
    'label' => t('Message'),
    'module' => 'ces_message',
    'controller class' => 'CesMessageEntityController',
    'views controller class' => 'CesMessageViewsController',
    'base table' => 'ces_message',
    'static cache' => TRUE,
    'field cache' => TRUE,
    'load hook' => 'ces_message_load',
    'uri callback' => 'ces_message_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'mid',
      'bundle' => 'bundle_type',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),
    'bundles' => array(
      'default' => array(
        'label' => t('Default'),
        // 'admin' => array(
        // 'path' => 'ces/bank/account/message/manage',
        // 'access callback' => 'ces_bank_access',
        // 'access arguments' => array('admin', 'exchange',
        // ces_bank_get_current_exchange()),
        // ),
      ),
    ),
    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' => FALSE,
      ),
      'list' => array(
        'label' => t('In a message list'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $info['ces_message_template'] = array(
    // A human readable label to identify our entity.
    'label' => t('Message template'),

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'CesMessageTemplateController',

    // The table for this entity defined in hook_schema()
    'base table' => 'ces_message_template',

    // Returns the uri elements of an entity.
    'uri callback' => 'ces_message_template_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used for key
    // functions. It is not required if we don't have bundles or revisions.
    // Here we do not support a revision, so that entity key is omitted.
    'entity keys' => array(
      // The 'id' (template_id here) is the unique id.
      'id' => 'template_id' ,
      // Bundle will be determined by the 'bundle_type' field.
      'bundle' => 'bundle_type',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    'static cache' => TRUE,

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'ces_message_bundle' => array(
        'label' => 'Message bundle',
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        // 'admin' => array(
        // 'path' => 'admin/structure/ces_message_template/manage',
        // 'access callback' => 'ces_bank_access',
        // 'access arguments' => array('admin', 'exchange',
        // ces_bank_get_current_exchange()),
        // ),
      ),
    ),
    // View modes allow entities to be displayed differently based on context.
    // As a demonstration we'll support "Tweaky", but we could have and support
    // multiple display modes.
    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $info['ces_action'] = array(
    'label' => t('Action'),
    'controller class' => 'CesMessageActionEntityController',
    'base table' => 'ces_action',
    'static cache' => TRUE,
    'field cache' => TRUE,
    'load hook' => 'ces_message_action_load',
    'uri callback' => 'ces_message_action_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'bundle keys' => array(),
    'bundles' => array(
      'ces_action' => array(
        'label' => t('Action'),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full action'),
        'custom settings' => FALSE,
      ),
    ),
  );
  return $info;
}
/**
 * Access message.
 *
 * @param string $permission 
 *   Action, example: admin. 
 * @param object $message
 *   Message.
 */
function ces_message_access($permission, $message) {
  global $user;
  if (ces_bank_access('admin', 'exchange', ces_bank_get_current_exchange())) {
    return TRUE;
  }
  if ($user->uid == $message->user) {
    return TRUE;
  }
  return FALSE;
}
/**
 * Implements hook_menu().
 */
function ces_message_menu() {
  $items['ces/bank/account/message'] = array(
    'title' => 'Messages',
    'decription' => 'Messages',
    'page callback' => 'ces_message_list_page',
    'file' => 'includes/ces_message.message.inc',
    'file path' => drupal_get_path('module', 'ces_message'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['ces/bank/account/message/list'] = array(
    'title' => 'List',
    'decription' => 'List messages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['ces/bank/account/message/%ces_message/view'] = array(
    'title callback' => 'ces_message_title',
    'title arguments' => array(4),
    'page callback' => 'ces_message_view',
    'page arguments' => array(4),
    'access callback' => 'ces_message_access',
    'access arguments' => array('view', 4),
    'type' => MENU_LOCAL_TASK,
  );
  $items['ces/bank/account/message/all'] = array(
    'title' => 'List all',
    'page callback' => 'ces_message_list_page',
    'page arguments' => array('all'),
    'file' => 'includes/ces_message.message.inc',
    'file path' => drupal_get_path('module', 'ces_message'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
  );
  $items['ces/admin/message'] = array(
    'title' => 'Templates',
    'description' => 'Administer message templates',
    'page callback' => 'ces_message_template_info_page',
    'type' => MENU_NORMAL_ITEM,
    // 'expanded' => TRUE,
    'weight' => 10,
    'file' => 'includes/ces_message.templates.inc',
    'file path' => drupal_get_path('module', 'ces_message'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
  );
  $items['ces/admin/message/list'] = array(
    'title' => 'List',
    'description' => 'Administer message templates',
    'page callback' => 'ces_message_template_info_page',
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Add example entities.
  $items['ces/admin/message/add'] = array(
    'title' => 'Add',
    'description' => 'Add message templates',
    'page callback' => 'ces_message_template_add',
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
  );
  // Add example entities.
  // $items['ces/admin/message/test'] = array(
  //   'title' => 'Test',
  //   'page callback' => 'ces_message_template_test',
  //   'access callback' => 'ces_bank_access',
  //   'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
  //   'type' => MENU_LOCAL_TASK,
  // );
  // The page to view our entities - needs to follow what
  // is defined in template_uri and will use load_template to retrieve
  // the necessary entity info.
  $items['ces/admin/message/%ces_message_template/view'] = array(
    'title callback' => 'ces_message_template_title',
    'title arguments' => array(3),
    'page callback' => 'ces_message_template_view',
    'page arguments' => array(3),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Edit' tab for an individual entity page.
  $items['ces/admin/message/%ces_message_template/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_message_template_form', 3),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Get a template.
 *
 * Order search:
 *
 * We search the current exchange templates and 0 (default), with the language 
 * of the receiving user and the default (English).
 * Ordered by descending exchange first is to ensure that the current exchange.
 * We travel the result and the first group we find the language of the user to 
 * pick up.
 *
 * @param string $action
 *   Ces action.
 * @param string $language
 *   Language of the template
 * @param int $exchange_id
 *   Id of exchange
 */
function ces_message_get_template($action, $language, $exchange_id = FALSE) {

  $record = FALSE;

  // If there is not a definite exchange, collect the current user.
  if (!$exchange_id) {
    $exchange_actual = ces_bank_get_current_exchange();
    $exchange_id = $exchange_actual['id'];
  }

  // Get template.
  $query = db_select('ces_message_template', 'cmt');
  $query
    ->fields('cmt', array('subject', 'body', 'language'))
    ->join('ces_action', 'ca', 'ca.id = cmt.ces_action_id');

  $query->condition('ca.name', $action);

  $or = db_or()
        ->condition('exchange_id', $exchange_id, '=')
        ->condition('exchange_id', 0, '=');
  $query->condition($or);

  $or = db_or()
        ->condition('language', $language, '=')
        ->condition('language', 'en', '=');
  $query->condition($or);

  $query->orderBy('cmt.exchange_id', 'DESC');

  $records = $query->execute()->fetchAll();

  foreach ($records as $record) {
    if ($record->language == $language) {
      break;
    }
  }

  if (!$record) {
    drupal_set_message(t('Internal error') . '. ' . t('No template was found')
      . ' ' . t('for action') . ' [' . $action . '] ' . t('with language') . ' [' . $language . ']');
    return FALSE;
  }

  return $record;

}

/**
 * Send message from user.
 *
 * @param string $action
 *   Ces action.
 * @param array $params
 *   Array with the objects needed to process the template.
 * @param array $recipient
 *   User IDs to send the message.
 * @param int $sender_id
 *   Id of user send the email, default is the admin of exchange.
 * @param string $mail
 *   If want to send email or not TRUE/FALSE.
 */
function ces_message_send_notify($action, $params, $recipient = array(), $sender_id = FALSE, $mail = TRUE) {

  // If not contain exchange, we seek.
  if (!isset($params['exchange'])) {
    if (isset($params['account'])) {
      $params['exchange'] = ces_bank_get_exchange($params['account']['exchange']);
    }
    elseif (isset($params['transaction']['fromaccount'])) {
      $params['exchange'] = ces_bank_get_exchange_by_name(substr($params['transaction']['fromaccount'], 0, 4));
    }
    else {
      $params['exchange'] = ces_bank_get_current_exchange();
    }
  }

  if (!empty($params['exchange'])) {
    $exchange_id = $params['exchange']['id'];
  }
  else {
    trigger_error(t('Undefined exchange.'), E_USER_ERROR);
    return FALSE;
  }

  foreach ($recipient as $user_recipient_id) {
    $user_recipient = user_load($user_recipient_id);
    $language_recipient = user_preferred_language($user_recipient);
    $language      = $language_recipient->language;

    $template = ces_message_get_template($action, $language, $exchange_id);

    if (!$template) {
      drupal_set_message(t('No template from action'), 'error');
      return FALSE;
    }
    $subject  = token_replace($template->subject, $params);
    $body     = token_replace($template->body, $params);

    $ces_actions = ces_message_action_load_multiple(FALSE, array('name' => $action), TRUE);
    foreach ($ces_actions as $ces_action) {
      $ces_action_description = $ces_action->description;
    }
    // Save message in DB.
    $notify = entity_get_controller('ces_message')->create();
    $notify->type_message = $ces_action_description;
    $notify->user         = $user_recipient_id;
    $notify->exchange     = $exchange_id;
    $notify->subject      = $subject;
    $notify->body         = $body;
    ces_message_save($notify);

    if ($mail) {
      $sender    = user_load(1);
      drupal_mail('ces_message', 'ces_message' . ' ' . $action, $user_recipient->mail, $language, $params, $sender->mail, TRUE);
    }

  }
}

/**
 * Implements hook_mail().
 */
function ces_message_mail($key, &$message, $params) {
  list($module, $key) = explode(' ', $key, 2);

  $language = (isset($message['language']) && !empty($message['language'])) ?
    $message['language'] :
    language_default();

  $template = ces_message_get_template($key, $language);

  if (!$template) {
    drupal_set_message(t('Error processing message template.'));
    drupal_goto('');
  }

  $message['subject'] .= token_replace($template->subject, $params);
  $message['body'][] = token_replace($template->body, $params);

  // Reply-to user offer or want.
  if ( $message['key'] == 'ces_message send_offerwant_notify' ) {
    $replyto = token_replace('[notify:user:mail]', $params);
    if ( $replyto !== '[notify:user:mail]' ) {
      $message['Reply-to'] = $replyto;
      $message['headers']['Reply-To'] = $replyto;
    }
  }

}
/**
 * Provides a test. 
 */
function ces_message_template_test($action = 'account_activated', $recipient = 1) {
  $salida = '<h2>' . ('Test message') . '</h2>';

  // $action = 'account_debited';
  $bank = new CesBank();
  $accounts = $bank->getAllAccounts();
  if (!$accounts || empty($accounts)) {
    drupal_set_message(t('No accounts to test'));
    return FALSE;
  }
  foreach ($accounts as $account) {
    break;
  }
  $params = array('account' => $account);
  ces_message_send_notify($action, $params, array(1), TRUE);

  $salida .= '<p>';
  $salida .= t('Mail sent to user');
  $salida .= '<br/>';
  $salida .= t('Action') . ':' . $action;
  $salida .= '<br/>';
  $salida .= t('Account') . ':' . $account['name'];
  $salida .= '</p>';

  return $salida;
}
/**
 * Implements hook_views_api().
 */
function ces_message_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ces_message') . '/views',
  );
}
/**
 * Implements hook_views_pre_execute().
 *
 * @todo The message does not convince me, needs revision.
 */
function ces_message_views_pre_execute (&$view) {
  if ($view->name == 'ces_message_admin') {
    if (!ces_bank_access('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE)) {
      drupal_set_message('No access. Messages from your account are shown','warning');
      drupal_goto("ces/bank/account/message");
    }
  }
}

/**
 * Implements hook_cron().
 */

function ces_message_cron() {
  // $date_delete = time() - ( 60 * 60 * 24 * 30 ); // 1 mounth ago
  $date_delete = time() - ( 60 * 60 * 24 * 365 ); // 1 year ago
  $num_deleted=db_delete('ces_message')
    ->condition('created', $date_delete, '<')
    ->execute();
  if ( $num_deleted && $num_deleted > 0 ) {
    $msg = 'Delete '.$num_deleted.' old messages';
    watchdog('cron',$msg);
  }
}

/**
 * @} End of "defgroup ces_message".
 */
