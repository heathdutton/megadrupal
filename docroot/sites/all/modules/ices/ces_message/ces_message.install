<?php
/**
 * @file
 * Install for a ces message - need to create the base table for our entity.
 * and create the template templates
 */

/**
 * Implements hook_schema().
 *
 * @ingroup ces_message
 */
function ces_message_schema() {
  $schema = array();
  $schema['ces_message'] = array(
    'description' => 'ICES Message',
    'fields' => array(
      'mid' => array(
        'description' => 'Unique message id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'type_message' => array(
        'description' => 'Type of message, example account_activated',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'user' => array(
        'description' => 'UID of the owner user',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'exchange' => array(
        'description' => 'ID of exchange',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'subject' => array(
        'description' => 'Message subject',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'body' => array(
        'description' => 'Message body',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'state' => array(
        'description' => 'The state of the message. 0 = unread, 1 = read',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('mid'),
    'foreign keys' => array(
      'user' => array(
        'table' => 'user',
        'columns' => array('user' => 'uid'),
      ),
      'exchange' => array(
        'table' => 'ces_exchange',
        'columns' => array('exchange' => 'id'),
      ),
    ),
  );

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ces_message_template'] = array(
    'description' => 'Message templates.',
    'fields' => array(
      'template_id' => array(
        'description' => 'Message template identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'exchange_id' => array(
        'description' => 'Id of exchange',
        'type' => 'int',
        'unsigned' => TRUE,
        'notnull' => TRUE,
        'default' => 0,
      ),
      'ces_action_id' => array(
        'description' => 'The id of ces action',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'subject' => array(
        'description' => 'A subject of the message',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'template' => '',
        'translatable' => TRUE,
      ),
      'body' => array(
        'description' => 'A body of the message',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'template' => '',
        'translatable' => TRUE,
      ),
      'language' => array(
        'description' => 'The {languages}.language of this message.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'int',
        'not null' => TRUE,
        'template' => 0,
      ),
    ),
    'primary key' => array('template_id'),
    'unique keys' => array(
      'exchange_action_lang' => array(
        'exchange_id',
        'ces_action_id',
        'language'),
    ),
    'foreign keys' => array(
      'exchange_id' => array(
        'table' => 'ces_exchange',
        'columns' => array('exchange_id', 'id'),
      ),
      'ces_action_id' => array(
        'table' => 'ces_action',
        'columns' => array('ces_action_id', 'id'),
      ),
    ),
  );

  $schema['ces_action'] = array(
    'description' => 'Table for actions.',
    'fields' => array(
      'id' => array(
        'description' => 'Id of action',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name for the action',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Detailed description of this category',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}
/**
 * Implements hook_install().
 *
 * Concept definitions and body templates are saved in separate files for easy
 * management. Example:
 *
 * - includes/actions/en/new_exchange.inc
 * - includes/actions/en/account_activated.inc
 * - includes/actions/ca/new_exchange.inc
 */
function ces_message_install() {

  // Create ces actions.
  ces_message_install_action('new_exchange', 'New exchange');
  ces_message_install_action('exchange_activated', 'Exchange activated');
  ces_message_install_action('new_account', 'New account');
  ces_message_install_action('account_activated', 'Account activated');
  ces_message_install_action('account_debited', 'Account debited');
  ces_message_install_action('account_credited', 'Account credited');
  ces_message_install_action('send_offerwant_notify', 'Send offer or want notify');
  ces_message_install_action('account_credit_pending', 'Account credit pending');
  ces_message_install_action('account_debit_pending', 'Account debit pending');
  ces_message_install_action('account_debit_rejected', 'Account debit rejected');
  ces_message_install_action('account_credit_rejected', 'Account credit rejected');

  ces_message_install_default_templates();
}
/**
 * First update 18/06/2014.
 */
function ces_message_update_7100() {
  ces_message_install_action('account_credit_pending', 'Account credit pending');
  ces_message_install_action('account_debit_pending', 'Account debit pending');
  ces_message_install_action('account_debit_rejected', 'Account debit rejected');
  ces_message_install_action('account_credit_rejected', 'Account credit rejected');
}
/**
 * Second update 3/07/2014.
 */
function ces_message_update_7101() {
  ces_message_install_default_templates();
}
/**
 * Third update 8/07/2014.
 */
function ces_message_update_7102() {
  ces_message_install_default_templates();
}
/**
 * Quirt update 10/7/2014.
 */
function ces_message_update_7103() {
  ces_message_install_default_templates();
}
/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup ces_message
 */
function ces_message_uninstall() {
  field_attach_delete_bundle('ces_message_template', 'ces_message_bundle');
  field_attach_delete_bundle('ces_message', 'default');
}
/**
 * Installs or updates action.
 */
function ces_message_install_action($name, $description) {
  $actions = ces_message_action_load_multiple(NULL, array('name' => $name));
  if (empty($actions)) {
    $action = (object) array(
      'name' => $name,
      'description' => $description,
    );
  }
  else {
    $action = reset($actions);
    $action->description = $description;
  }
  ces_message_action_save($action);
}
/**
 * Installs or updates default templates.
 *
 * Should be called in every install or update process, after installing
 * actions.
 */
function ces_message_install_default_templates() {
  foreach (glob(dirname(__FILE__) . '/includes/actions/*') as $lang) {
    $language = basename($lang);
    foreach (glob($lang . '/*.inc') as $template) {
      $action = basename($template, '.inc');
      include $template;
      ces_message_install_default_template($action, $language, $subject, $body);
    }
  }
}
/**
 * Installs or updates template.
 */
function ces_message_install_default_template($action, $language, $subject, $body) {
  $actions = ces_message_action_load_multiple(NULL, array('name' => $action));
  if (!empty($actions)) {
    $action = reset($actions);
    $templates = ces_message_template_load_multiple(FALSE, array(
      'ces_action_id' => $action->id,
      'language' => $language,
      'exchange_id' => 0,
    ));
    if (empty($templates)) {
      $template = (object) array(
        'subject' => $subject,
        'body' => $body,
        'exchange_id' => 0,
        'ces_action_id' => $action->id,
        'language' => $language,
        'bundle_type' => 'ces_message_bundle',
      );
    }
    else {
      $template = reset($templates);
      $template->subject = $subject;
      $template->body = $body;
    }
    ces_message_template_save($template);
  }
  else {
    $msg = t('Action !action not found while installing template.',
      array('!action' => $action));
    trigger_error(check_plain($msg), E_USER_ERROR);
  }
}
