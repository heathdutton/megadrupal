<?php

/**
 * @file
 * Implements the drupal hooks for this module.
 */

/**
 * @defgroup ces_import4ces Ces Import
 * @ingroup ices
 * @{
 * Implements the drupal hooks for this module.
 */

/**
 * Set to 0 in production.
 */
define('CES_IMPORT4CES_ANONYMOUS', 0);
/**
 * Reset passwords or keep old CES passwords.
 */
define('CES_IMPORT4CES_RESET_PASSWORD', 0);
/**
 * Send welcome mails to all users.
 */
define('CES_IMPORT4CES_SEND_MAILS', 1);
/**
 * Where to save import CSV files.
 */
define('CES_IMPORT4CES_FILES_URI', 'public://ces_import');
/**
 * Implements hook_menu().
 */
function ces_import4ces_menu() {
  $menu['ces/admin/import'] = array(
    'title' => 'Import exchange',
    'decription' => 'Import CSV data from CES',
    'page callback' => 'ces_import4ces_admin_page',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
  );
  $menu['ces/admin/import/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/admin/import/new'] = array(
    'title' => 'New',
    'description' => 'Start a new exchange import from CES',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_import4ces_import_form'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_LOCAL_TASK,
  );
  $menu['ces/admin/import/%/continue'] = array(
    'title' => 'Continue',
    'description' => 'Continue the import from CES',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_import4ces_import_form', 3),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_CALLBACK,
  );
  $menu['ces/admin/import/%/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete the import from CES',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_import4ces_import_delete_form', 3),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Main page for this module where to administer the imports.
 */
function ces_import4ces_admin_page() {
  global $user;
  $page = array();

  $result = db_query('SELECT i.id, i.exchange_id, e.code, e.name, i.created,
  i.step, i.row, i.uid, i.observations
  FROM {ces_import4ces_exchange} i
  LEFT JOIN {ces_exchange} e ON i.exchange_id = e.id
  WHERE i.finished = 0 AND i.uid = :uid
  ORDER BY i.id DESC',
    array(':uid' => $user->uid));

  $titles_steps = _ces_import4ces_steps();
  $table = array(
    '#theme' => 'table',
    '#attributes' => array(
      'class' => array('ces-table'),
    ),
    '#header' => array(
      t('Date'),
      t('Exchange'),
      t('Step'),
      t('Row'),
      t('Actions'),
    ),
  );
  $rows = array();
  foreach ($result as $record) {
    $step = isset($record->step) ? $record->step : 'NULL';
    $id = isset($record->id) ? $record->id : 'NULL';

    $row = array();
    $row[] = format_date($record->created);
    $row[] = !empty($record->name) ? $record->name : '';
    $row[] = $step . ' / ' . count($titles_steps);
    $row[] = !empty($record->row) ? $record->row : '';

    $actions = '';
    if ($step < 8) {
      $actions .= l(t('Continue'), 'ces/admin/import/' . $id . '/continue');
      $actions .= ' ';
    }
    $actions .= l(t('Delete'), 'ces/admin/import/' . $id . '/delete');
    $row[] = $actions;
    $rows[] = $row;
  }
  $table['#rows'] = $rows;
  $page['table'] = $table;
  return $page;
}

/**
 * Main form for new import, contiue import and single import form.
 */
function ces_import4ces_import_form($form, &$form_state, $import_id = FALSE) {
  $form = array();
  $form['import_id'] = array('#type' => 'value', '#value' => $import_id);
  if (!empty($form_state['manual_row'])) {
    return ces_import4ces_row_form($form, $form_state);
  }
  if ($import_id === FALSE) {
    $imports = file_scan_directory(CES_IMPORT4CES_FILES_URI, '/.*/',
      array('recurse' => FALSE));
    $options = array();
    $options[0] = t('Upload new files');
    foreach ($imports as $uri => $file) {
      if (is_dir($uri)) {
        $files = file_scan_directory(CES_IMPORT4CES_FILES_URI . '/' .
        $file->name, '/.*csv/', array('recurse' => FALSE));
        if (count($files) >= 6) {
          $options[$file->name] = $file->name;
        }
      }
    }
    $form['files'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => 0,
      '#title' => t('Select a previously uploaded import file set or let "Upload new files".'),
    );
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => 'Import name',
      '#description' => t('A good name is the four letter code of the exchange to be imported.'),
    );
    $form['settings'] = array(
      '#type' => 'file',
      '#title' => 'settings.csv',
    );
    $form['users'] = array(
      '#type' => 'file',
      '#title' => 'users.csv',
    );
    $form['offers'] = array(
      '#type' => 'file',
      '#title' => 'offers.csv',
    );
    $form['wants'] = array(
      '#type' => 'file',
      '#title' => 'wants.csv',
    );
    $form['trades'] = array(
      '#type' => 'file',
      '#title' => 'trades.csv',
    );
    $form['announce'] = array(
      '#type' => 'file',
      '#title' => 'announce.csv',
    );

    return confirm_form($form, t('Do you really want to start a new import?'),
      'ces/admin/import',
      t('Either select an import set or upload a new set of files.'),
      t('New import'));
  }
  else {
    $import = ces_import4ces_import_load($import_id);
    $steps = _ces_import4ces_steps();
    if ($import->step < 7) {
      return confirm_form($form,
        t('Step @num. Import @type.', array(
          '@num' => $import->step,
          '@type' => $steps[$import->step],
        )), 'ces/admin/import',
        t('Importing step @step of exchange @exchange from row @row.', array(
          '@step' => $import->step,
          '@exchange' => $import->name,
          '@row' => $import->row,
        )), t('Import @type', array('@type' => $steps[$import->step])));
    }
    else {
      return confirm_form($form, t('All data has been imported'),
        'ces/admin/import', t('Click Finish to end the import process.'),
        t('Finish'));
    }
  }
}

/**
 * Import single row form.
 */
function ces_import4ces_row_form($form, &$form_state) {
  if (isset($form_state['row'])) {
    $heads = $form_state['row']['heads'];
    $cols = $form_state['row']['columns'];
    $count = 0;
    foreach ($heads as $head) {
      $value = $count < count($cols) ? $cols[$count] : '';
      $form_state['values'][$head] = $value;
      $count++;
    }
    $form_state['values']['row'] = $form_state['row']['row'];
  }
  $form['manual_row'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );
  $form['row'] = array(
    '#type' => 'value',
    '#value' => $form_state['values']['row'],
  );
  foreach ($heads as $head) {
    $form[$head] = array(
      '#type' => 'textfield',
      '#title' => check_plain($head),
      '#default_value' => $form_state['values'][$head],
      '#size' => 60,
      '#maxlength' => 4096,
      '#required' => FALSE,
    );
  }
  $form['import'] = array(
    '#type' => 'submit',
    '#value' => t('Import row'),
  );
  $form['skip'] = array(
    '#type' => 'submit',
    '#value' => t('Skip row'),
  );
  return $form;
}

/**
 * Import single row form submit.
 */
function ces_import4ces_row_form_submit($form, &$form_state) {
  $row = $form_state['values']['row'];
  if ($form_state['values']['op'] == t('Import row')) {
    $parse_function = $form_state['values']['parse_function'];
    $data = $form_state['values'];
    $context = array();
    if (isset($form_state['values']['import_id'])) {
      $import_id = $form_state['values']['import_id'];
      $parse_function($import_id, $data, $row, $context, FALSE);
      if (isset($_SESSION['ces_import4ces_row_error'])) {
        unset($_SESSION['ces_import4ces_row_error']);
      }
    }
    else {
      $parse_function($data, $row, $context);
    }
    if (empty($context['results']['error'])) {
      ces_import4ces_update_row($context['results']['import_id'], $row);
      $form_state['rebuild'] = TRUE;
      unset($form_state['manual_row']);
    }
    else {
      drupal_set_message($context['results']['error'], 'error');
    }
  }
  elseif ($form_state['values']['op'] == t('Skip row')) {
    if (isset($form_state['values']['import_id'])) {
      ces_import4ces_update_row($form_state['values']['import_id'], $row);
      $form_state['rebuild'] = TRUE;
      unset($form_state['manual_row']);
    }
  }
}

/**
 * Load an import object with static cache.
 */
function ces_import4ces_import_load($import_id) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$import_id])) {
    $result = db_query(
    'SELECT i.id, i.exchange_id, e.code, e.name, i.step, i.row, i.anonymous,
    i.files
    FROM {ces_import4ces_exchange} i
    LEFT JOIN {ces_exchange} e ON i.exchange_id = e.id
    WHERE i.id = :iid',
      array(':iid' => $import_id))
      ->fetch();
    $cache[$import_id] = empty($result) ? FALSE : $result;
  }
  return $cache[$import_id];
}

/**
 * Validates import form and saves upload csv files.
 */
function ces_import4ces_import_form_validate($form, &$form_state) {
  if (empty($form_state['values']['import_id'])) {
    $files = array('settings', 'users', 'offers', 'wants', 'trades',
      'announce');
    if (empty($form_state['values']['files'])) {
      $dir = $form_state['values']['name'];
      if (!preg_match('/[a-zA-Z0-9]+/', $dir)) {
        form_set_error('name', t('Invalid folder name.'));
      }
      $validators = array('file_validate_extensions' => array('csv'));
      foreach ($files as $file) {
        $dest = CES_IMPORT4CES_FILES_URI . '/' . $dir . '/';
        if (!is_dir($dest)) {
          mkdir($dest, 0777, TRUE);
        }
        if (($fileobj = file_save_upload($file, $validators, $dest,
          FILE_EXISTS_REPLACE))) {
          $form_state['values'][$file] = $fileobj->destination;
        }
        else {
          form_set_error($file, t('Could not copy file to %file',
            array('%file' => $dest)));
        }
      }
      $form_state['values']['files'] = $dir;
    }
  }
}

/**
 * Submit to confirm form to continue an import.
 */
function ces_import4ces_import_form_submit($form, &$form_state) {
  global $user;
  if (empty($form_state['values']['import_id'])) {
    $import_id = db_insert('ces_import4ces_exchange')->fields(array(
      'exchange_id' => 0,
      'created' => REQUEST_TIME,
      'step' => 1,
      'row' => 0,
      'anonymous' => CES_IMPORT4CES_ANONYMOUS,
      'uid' => $user->uid,
      'files' => $form_state['values']['files'],
    ))->execute();
    $record = db_select('ces_import4ces_exchange', 'i')->fields('i')
      ->condition('id', $import_id)->execute()->fetch();
    $record->name = 'Exchange';
  }
  else {
    // Continue an import.
    $import_id = $form_state['values']['import_id'];
    $record = ces_import4ces_import_load($import_id);
    if ($record === FALSE) {
      drupal_set_message(t('Invalid import identifier.'), 'error');
      $form_state['redirect'] = 'ces/bank/admin/import';
      return;
    }
  }
  switch ($record->step) {
    case '1':
      $file = 'imports/setting.php';
      $file_csv = 'settings.csv';
      $parse_function = 'ces_import4ces_parse_setting';
      break;

    case '2':
      $file = 'imports/users.php';
      $file_csv = 'users.csv';
      $parse_function = 'ces_import4ces_parse_users';
      break;

    case '3':
      $file = 'imports/offers.php';
      $file_csv = 'offers.csv';
      $parse_function = 'ces_import4ces_parse_offers';
      break;

    case '4':
      $file = 'imports/wants.php';
      $file_csv = 'wants.csv';
      $parse_function = 'ces_import4ces_parse_wants';
      break;

    case '5':
      $file = 'imports/trades.php';
      $file_csv = 'trades.csv';
      $parse_function = 'ces_import4ces_parse_trades';
      break;

    case '6':
      $file = 'imports/announce.php';
      $file_csv = 'announce.csv';
      $parse_function = 'ces_import4ces_parse_announce';
      break;

    case '7':
      drupal_set_message(t('Import finished successfully.'));
      $form_state['redirect'] = 'ces/admin/import';
      ces_import4ces_update_step($import_id, 8);
      return;

    default:
      drupal_set_message(t('Invalid import step.', 'error'));
      $form_state['redirect'] = 'ces/admin/import';
      return;
  }
  if (isset($parse_function)) {
    // Setup the absolute path of this csv file.
    $file_csv = CES_IMPORT4CES_FILES_URI . '/' . $record->files . '/' . $file_csv;
    if (!empty($form_state['values']['manual_row'])) {
      require_once drupal_get_path('module', 'ces_import4ces') . '/' . $file;
      $form_state['values']['parse_function'] = $parse_function;
      ces_import4ces_row_form_submit($form, $form_state);
    }
    else {
      // Do the process.
      _ces_import4ces_import_csv($file_csv, $file, $parse_function, $record);
    }
  }
}

/**
 * Imports a CSV file to the database.
 *
 * @param string $file_csv
 *   The absolute path of the CSV file.
 * @param string $file
 *   File where the parse function is, relative to this module.
 * @param string $parse_function
 *   The name of the function able to parse the file.
 * @param object $record
 *   Import record.
 *
 * @return array
 *   An associative array with information about the import process.
 */
function _ces_import4ces_import_csv($file_csv, $file, $parse_function, $record) {
  // Validate CSV file.
  if (!file_exists($file_csv)) {
    drupal_set_message(t('Import file @path not found.',
        array('@path' => $file_csv)), 'error');
    return FALSE;
  }

  $operations = array();

  // Read CSV.
  $row = $record->row;

  // If there was an error, first to produce the record.
  $reapir_row = (isset($_SESSION['ces_import4ces_row_error'])) ?
    $_SESSION['ces_import4ces_row_error']['row'] : FALSE;

  if (($gestor = fopen($file_csv, "r")) !== FALSE) {
    $heads = array();
    $fila = -1;
    while (($datos = fgetcsv($gestor, FALSE, ",")) !== FALSE) {
      $fila++;
      if ($fila != 0 && $fila <= $row) {
        continue;
      }
      $cols = array();
      foreach ($datos as $key => $val) {
        $datos[$key] = trim($datos[$key]);
        $datos[$key] = iconv('Windows-1252', 'UTF-8', $datos[$key]);
        if ($fila == 0) {
          $heads[] = $datos[$key];
        }
        else {
          $cols[] = $datos[$key];
        }
      }
      if ($fila !== 0) {
        // Automatic correction for field AapAddress.
        if ($parse_function == 'ces_import4ces_parse_setting') {
          $field = 36;
          $error_map = TRUE;
          $field_error = array();
          while ($error_map) {
            if (!empty($cols[$field]) &&
              (stripos($cols[$field], 'http') === FALSE &&
              stripos($cols[$field], 'www') === FALSE)) {
              $field_error[] = $field;
              $field++;
            }
            else {
              $error_map = FALSE;
            }
          }
          foreach ($field_error as $fe) {
            $cols[35] .= ',' . $cols[$fe];
            unset($cols[$fe]);
          }
        }
        $arguments = array();
        if (isset($record->id)) {
          $arguments[] = $record->id;
        }
        if (count($heads) == count($cols) && !$reapir_row) {
          $arguments[] = array_combine($heads, $cols);
          $arguments[] = $fila;
          $operations[] = array($parse_function, $arguments);
        }
        else {
          if (empty($arguments)) {
            $arguments[] = 0;
          }
          $arguments[] = $heads;
          $arguments[] = $cols;
          $arguments[] = $fila;
          // This row has an incorrect number of columns. Let the user the
          // opportunity to correct this row.
          $operations[] = array('ces_import4ces_batch_fail_row', $arguments);
          break;
        }
      }
    }

    fclose($gestor);
  }
  else {
    drupal_set_message(t('Could not open import file @path.',
        array('@path' => $file_csv), 'error'));
    return FALSE;
  }

  if (empty($operations)) {
    ces_import4ces_update_step($record->id, $record->step + 1);
    ces_import4ces_update_row($record->id, 0);
    drupal_set_message(t('There is no data to import in this step.'));
  }
  else {
    $batch = array(
      'operations' => $operations,
      'file' => drupal_get_path('module', 'ces_import4ces') . '/' . $file,
      'finished' => '_ces_import4ces_batch_import_csv_finished',
      'title' => t('Importing @exchange step @step',
        array('@exchange' => $record->name, '@step' => $record->step)),
      'init_message' => t('Import is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Error during import.'),
    );
    batch_set($batch);
  }
}

/**
 * Row fail batch operation.
 *
 * To be called from the batch process to stop it and let the user the
 * opportunity to change the row data manually.
 */
function ces_import4ces_batch_fail_row($import_id, $heads, $cols, $row,
  &$context) {
  if ($import_id) {
    $context['results']['import_id'] = $import_id;
  }
  $context['results']['row'] = array(
    'heads' => $heads,
    'columns' => $cols,
    'row' => $row,
  );
  $ma = (isset($context['results']['error'])) ?
    $context['results']['error'] :
    '';
  $context['results']['error'] = $ma . t('The row @row could not be parsed.',
    array('@row' => $row));
}

/**
 * Finish callback function for batch process.
 */
function _ces_import4ces_batch_import_csv_finished($success, $results,
  $operations) {
  $batch = &batch_get();

  if ($success && empty($results['error'])) {
    $batch['form_state']['redirect'] = 'ces/admin/import/'
      . $results['import_id'] . '/continue';
    $import = ces_import4ces_import_load($results['import_id']);
    ces_import4ces_update_step($import->id, $import->step + 1);
    ces_import4ces_update_row($import->id, 0);
    drupal_set_message(t('Step finished successfully.'));
  }
  elseif (!empty($results['error'])) {
    drupal_set_message($results['error'], 'error');
    // Save message to database, go to admin/reports/dblog to view.
    watchdog('ces_import4ces', $results['error'], array(), WATCHDOG_WARNING);
    if (!empty($results['row'])) {
      // Manually fix the row.
      $batch['form_state']['row'] = $results['row'];
      $batch['form_state']['manual_row'] = TRUE;
      $batch['form_state']['rebuild'] = TRUE;
      $batch['form_state']['build_info'] = array(
        'args' => array($results['import_id']),
      );
      $batch['form_state'] += form_state_defaults();
    }
    elseif (isset($_SESSION['ces_import4ces_row_error'])) {
      // Manually fix the row.
      $batch['form_state']['row']['row']
        = $_SESSION['ces_import4ces_row_error']['row'];
      $batch['form_state']['row']['heads']
        = array_keys($_SESSION['ces_import4ces_row_error']['data']);
      $batch['form_state']['row']['columns']
        = array_values($_SESSION['ces_import4ces_row_error']['data']);
      $batch['form_state']['manual_row'] = TRUE;
      $batch['form_state']['rebuild'] = TRUE;
      $batch['form_state']['build_info'] = array(
        'args' => array($results['import_id']),
      );
      $batch['form_state'] += form_state_defaults();
      unset($_SESSION['ces_import4ces_row_error']);
    }
    else {
      $batch['form_state']['redirect'] = 'ces/admin/import';
    }
  }
  else {
    $batch['form_state']['redirect'] = 'ces/admin/import';
    drupal_set_message(t('Unknown error.'), 'error');
  }
}

/**
 * Returns an array with the import steps.
 */
function _ces_import4ces_steps() {
  return array(
    0 => "New exchange",
    1 => "Exchange",
    2 => "Users",
    3 => "Offers",
    4 => "Wants",
    5 => "Trades",
    6 => "Announces",
    7 => "The end",
  );
}

/**
 * Confirm form for delete import.
 */
function ces_import4ces_import_delete_form($form, &$form_state, $import_id) {
  $import = ces_import4ces_import_load($import_id);
  if ($import !== FALSE) {
    $form = array();
    $form['import_id'] = array('#type' => 'value', '#value' => $import_id);
    return confirm_form($form,
      t('Are you sure you want to delete the exchange @name and all its data?',
        array('@name' => $import->name)), 'ces/admin/import');
  }
  else {
    drupal_set_message(t('Invaid import id.'), 'error');
  }
}

/**
 * Delete all import data.
 *
 * This function may need so many time to be cmpletely executed in some servers!
 */
function ces_import4ces_import_delete_form_submit($form, &$form_state) {
  $import_id = $form_state['values']['import_id'];
  $import = ces_import4ces_import_load($import_id);
  if ($import->exchange_id) {
    // Delete blog posts:
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'ces_blog')
      ->fieldCondition('ces_blog_exchange', 'value', $import->exchange_id);
    $result = $query->execute();
    if (isset($result['node']) && count($result['node']) > 0) {
      $nids = array_keys($result['node']);
      node_delete_multiple($nids);
    }

    // Delete trades.
    $bank = new CesBank();
    $exchange = $bank->getExchange($import->exchange_id);

    $transactions = ces_import4ces_get_object_ids($import->id, 'trades');
    foreach ($transactions as $id) {
      try {
        $bank->deleteTransaction($id);
      }
      catch (Exception $e) {
        // Most probably the transaction doesn't exist anymore.
        drupal_set_message($e->getMessage(), 'error');
      }
    }

    // Delete offers and wants.
    $offers = ces_import4ces_get_object_ids($import->id, 'offers');
    $offers = array_keys(ces_offerwant_load_multiple($offers));
    foreach ($offers as $id) {
      ces_offerwant_delete($id);
    }
    $wants = ces_import4ces_get_object_ids($import->id, 'wants');
    $wants = array_keys(ces_offerwant_load_multiple($wants));
    foreach ($wants as $id) {
      ces_offerwant_delete($id);
    }

    // Delete categories.
    $categories = ces_import4ces_get_object_ids($import->id, 'category');
    $categories = array_keys(ces_category_load_multiple($categories));
    foreach ($categories as $id) {
      ces_category_delete($id);
    }

    // Delete accounts.
    $accounts = $bank->getAllAccounts(array('exchange' => $import->exchange_id));
    foreach ($accounts as $account) {
      $bank->deleteAccount($account['id']);
    }
    $userids = ces_import4ces_get_object_ids($import->id, 'user');
    foreach ($userids as $uid) {
      if ($uid != 1) {
        user_delete($uid);
      }
    }

    // Delete exchange.
    $limitchains = $bank->getAllLimitChains($import->exchange_id);
    foreach ($limitchains as $chain) {
      $bank->deleteLimitChain($chain['id']);
    }
    $bank->deleteExchange($import->exchange_id);
  }
  // Delete import data.
  db_delete('ces_import4ces_objects')
    ->condition('import_id', $import->id)
    ->execute();
  db_delete('ces_import4ces_exchange')
    ->condition('id', $import->id)
    ->execute();

  // That's all.
  drupal_set_message(t('Import data has been deleted.'));
  $form_state['redirect'] = 'ces/admin/import';
}

/**
 * Get all the id's for a given import and a given object type.
 */
function ces_import4ces_get_object_ids($import_id, $type) {
  $result = db_query('SELECT object_id from {ces_import4ces_objects}
    WHERE object = :object AND import_id = :import',
    array(':object' => $type, ':import' => $import_id))->fetchCol(0);
  return $result;
}

/**
 * Get image from CES.
 */
function ces_import4ces_download_image($url_origen, $archivo_destino) {
  $mi_curl = curl_init($url_origen);
  $fs_archivo = fopen($archivo_destino, "w");
  curl_setopt($mi_curl, CURLOPT_FILE, $fs_archivo);
  curl_setopt($mi_curl, CURLOPT_HEADER, 0);
  curl_exec($mi_curl);
  curl_close($mi_curl);
  fclose($fs_archivo);
  return TRUE;
}

/**
 * Count step.
 */
function ces_import4ces_update_step($import_id, $step) {
  return db_update('ces_import4ces_exchange')->condition('id', $import_id)->fields(array(
      'step' => $step))->execute();
}

/**
 * Count row.
 */
function ces_import4ces_update_row($import_id, $row) {
  return db_update('ces_import4ces_exchange')->condition('id', $import_id)->fields(array(
      'row' => $row))->execute();
}

/**
 * Create o return category.
 *
 * @param string $title 
 *   Title of category.
 * @param class $import 
 *   Instance of Import.
 * @param int $context 
 *   Context of category. Whether this category is applicable to offers (1),
 *   wants (2), both (3) or none (0)
 */
function ces_import4ces_get_category($title, $import, $context = 1) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ces_category')
    ->propertyCondition('exchange', $import->exchange_id)
    ->propertyCondition('title', $title);

  $result = $query->execute();

  if (isset($result['ces_category'])) {
    return key($result['ces_category']);
  }
  else {
    $cat = array(
      'parent' => 0,
      'title' => $title,
      'description' => $title,
      'exchange' => $import->exchange_id,
      'context' => $context,
    );

    $category_object = ces_category_save($cat);
    $category_id = $category_object['id'];

    db_insert('ces_import4ces_objects')
      ->fields(array(
        'import_id' => $import->id,
        'object' => 'category',
        'object_id' => $category_id,
        'row' => $import->row,
        'data' => '',
      ))->execute();

    return $category_id;
  }
}
/**
 * Implements hook_mail_alter().
 */
function ces_import4ces_mail_alter(&$message) {
  if (!variable_get('ces_import4ces_mail', CES_IMPORT4CES_SEND_MAILS)) {
    $message['send'] = FALSE;
  }
}


/**
 * Get language code translation CES => ISO.
 */
function _ces_import4ces_get_language($ceslang) {
  $codes = array(
    'rus' => 'ru',
    'ukr' => 'uk',
    'bul' => 'bg',
    'cez' => 'cs',
    'amh' => 'am',
    'ell' => 'el',
    'afr' => 'af',
    'ara' => 'ar',
    'cat' => 'ca',
    'deu' => 'de',
    'est' => 'et',
    'eng' => 'en',
    'spa' => 'es',
    'fra' => 'fr',
    'ita' => 'it',
    'lav' => 'lv',
    'lit' => 'lt',
    'mol' => 'ro',
    'ron' => 'ro',
    'hun' => 'hu',
    'nld' => 'nl',
    'nor' => 'no',
    'pol' => 'pl',
    'por' => 'pt',
    'slv' => 'sl',
    'srp' => 'sr',
    'fin' => 'fi',
    'swe' => 'sv',
    'tur' => 'tr',
  );
  $language = language_default()->language;
  if (isset($codes[$ceslang])) {
    $isolang = $codes[$ceslang];
    $langs = language_list();
    if (isset($langs[$isolang])) {
      $language = $isolang;
    }
  }
  return $language;
}

/** @} */
