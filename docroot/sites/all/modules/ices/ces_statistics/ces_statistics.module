<?php
/**
 * @file
 * Implements the drupal hooks for this module.
 */

/**
 * @defgroup ces_statistics Ces Statistics
 * @ingroup ices
 * @{
 * Implements the drupal hooks for this module.
 */
/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function ces_statistics_libraries_info() {
  $libraries['jquery.jqplot'] = array(
    'name' => 'jquery.jqplot library',
    'vendor url' => 'https://bitbucket.org/cleonello/jqplot/downloads/',
    'download url' => 'https://bitbucket.org/cleonello/jqplot/downloads/jquery.jqplot.1.0.8r1250.zip',
    'version' => '1.0.8',
    'files' => array(
      'js' => array(
        'jquery.jqplot.min.js',
        'plugins/jqplot.dateAxisRenderer.min.js',
        'plugins/jqplot.barRenderer.min.js',
        'plugins/jqplot.canvasTextRenderer.min.js',
        'plugins/jqplot.canvasAxisTickRenderer.min.js',
        'plugins/jqplot.categoryAxisRenderer.min.js',
        'plugins/jqplot.pointLabels.min.js',
        'plugins/jqplot.pieRenderer.min.js',
      ),
      'css' => array(
        'jquery.jqplot.min.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function ces_statistics_menu() {
  $menu['ces/bank/exchange/statistics'] = array(
    'title' => 'Statistics',
    'description' => 'View exchange statistics.',
    'page callback' => 'ces_statistics_page',
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange details',
      CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 250,
  );
  return $menu;
}

/**
 * Implements hook_help().
 */
function ces_statistics_help($path, $arg) {
  if ($path == 'admin/help#ces_statistics') {
    if (current_path() != 'admin/help/ces_statistics') {
      // Because system_modules() executes hook_help() for each module to 'test'
      // if they will return anything, but not actually display it, we want to
      // return a TRUE value if this is not actually the help page.
      return TRUE;
    }
    $library = libraries_detect('jquery.jqplot');
    $output  = '<dl>';
    $output .= '<dt>' . t('Installation of') . ' ' . $library['name'] . '</dt>';
    $output .= '<dd>';
    $output .= l(t('Download the package with the necessary libraries'), $library['download url']);
    $output .= '</dd>';

    $output .= '<dd>';
    $output .= 'Unzip the file';
    $output .= '</dd>';

    $output .= '<dd>';
    $output .= 'And place to files in site/all/libraries/jqplot';

    /*
    foreach ($library['files']['js'] as $file => $o) {
    $output .= '<dd>';
    $output .= '- ' . $file;
    $output .= '</dd>';
    }

    foreach ($library['files']['css'] as $file => $o) {
    $output .= '<dd>';
    $output .= '- ' . $file;
    $output .= '</dd>';
    }
    */
    $output .= '<dd>';
    $output .= 'If there is no directory should be created.';
    $output .= '</dd>';
    $output .= '<dd>';
    $output .= "That's it.";
    $output .= '</dd>';

    $output .= '</dd>';
    $output .= '</dl>';
    return $output;
  }
}

/**
 * Page for exchange statistics.
 */
function ces_statistics_page() {
  global $user;
  $user = user_load($user->uid);
  require_once drupal_get_path('module', 'ces_bank') . '/ces_bank.module';
  $variables['account'] = ces_bank_get_current_account();
  if ($variables['account'] !== FALSE) {
    $exchange = ces_bank_get_current_exchange();

    // Js and css files.
    if (($library = libraries_load('jquery.jqplot')) && !empty($library['loaded'])) {
      drupal_add_js(drupal_get_path('module', 'ces_statistics') . '/js/chart.js');
    }
    else {
      $error_message = $library['error message'] . ' ' . l(t('Help'), 'admin/help/ces_statistics');
      drupal_set_message(filter_xss($error_message));
    }

    // Extract and format users data.
    $resultusers = db_query("
      SELECT COUNT(DATE_FORMAT(from_unixtime(created), '%Y-%m')) AS usersnumber,
      DATE_FORMAT(from_unixtime(created), '%Y-%m') as usersdate
      FROM {ces_account}
      WHERE exchange = :exchange
      GROUP BY DATE_FORMAT(from_unixtime(created), '%Y-%m')
      ORDER BY created ASC",
      array(
        ':exchange' => $exchange['id'],
      ));

    $totalusers = 0;
    $staticsusers = array();
    foreach ($resultusers as $record) {
      $totalusers += $record->usersnumber;
      $staticsusers[] = array(
        'usersdate' => $record->usersdate,
        'usersnumber' => (int) $totalusers,
      );
    };

    $longarray = count($staticsusers);
    $todaymonth = date("Y-m", time());
    // No data in present month.
    if ($staticsusers[$longarray - 1]['usersdate'] != $todaymonth) {
      $staticsusers[] = array(
        'usersdate' => $todaymonth,
        'usersnumber' => (int) $totalusers,
      );
    }

    // Unix time stamp last year ago.
    $lastyear = time() - 31536000;

    // Min length array $staticsusers: 1 year long.
    while (strtotime($staticsusers[0]['usersdate']) > $lastyear) {
      $monthbefore = date("Y-m", strtotime("-1 month", strtotime($staticsusers[0]['usersdate'])));
      array_unshift($staticsusers, array(
        'usersdate' => $monthbefore,
        'usersnumber' => (int) 0,
      ));
    }

    // Extract and format user's last year activity data.
    $resultactivity = db_query("
      SELECT COUNT(t.id) AS activitynumber,
      a.id AS activityaccount
      FROM {ces_account} a
      INNER JOIN {ces_transaction} t
      ON a.id = t.toaccount
      OR a.id = t.fromaccount
      WHERE a.exchange = :exchange
      AND t.created > :lastyear
      AND t.state = :state
      GROUP BY a.id
      ORDER BY COUNT(t.id)",
      array(
        ':exchange' => $exchange['id'],
        ':lastyear' => $lastyear,
        ':state' => 3,
      ));
    $labels = array(t('Total inactivity'), t('1-3 transactions'), t('4-6 transactions'),
      t('6-12 transactions'), t('+12 transactions'));
    $staticsactivity = array();
    // 0 to 4 levels of activity.
    for ($i = 0; $i <= 4; $i++) {
      $staticsactivity[$i]['activitylevel'] = $labels[$i];
      $staticsactivity[$i]['activitynumber'] = 0;
      $staticsactivity[$i]['activitypercent'] = 0;
    };
    $i = 0;
    $actn = 0;
    foreach ($resultactivity as $record) {
      $actn = $record->activitynumber;
      if ($actn > 0 && $actn <= 3) {
        $staticsactivity[1]['activitynumber']++;
      }
      if ($actn > 3 && $actn <= 6) {
        $staticsactivity[2]['activitynumber']++;
      }
      if ($actn > 6 && $actn <= 12) {
        $staticsactivity[3]['activitynumber']++;
      }
      if ($actn > 12) {
        $staticsactivity[4]['activitynumber']++;
      }
      $i++;
    };
    $staticsactivity[0]['activitynumber'] = $totalusers - $i;
    // 0 to 4 levels of activity.
    for ($i = 0; $i <= 4; $i++) {
      $staticsactivity[$i]['activitypercent'] = 100 * $staticsactivity[$i]['activitynumber'] / $totalusers;
    };

    // Extract and format transactions data.
    $resulttrans = db_query("
      SELECT SUM(t.amount) AS transamount,
      COUNT(t.amount) AS transnumber,
      DATE_FORMAT(from_unixtime(t.created), '%Y-%m') AS transdate
      FROM {ces_transaction} t
      INNER JOIN {ces_account} a
      ON t.fromaccount = a.id
      WHERE a.exchange = :exchange
      AND t.state = :state
      GROUP BY DATE_FORMAT(from_unixtime(created), '%Y-%m')
      ORDER BY t.created ASC",
      array(
        ':exchange' => $exchange['id'],
        ':state' => 3,
      ));

    $totalamount = 0;
    $totalnumber = 0;
    $staticstrans = array();
    foreach ($resulttrans as $record) {
      $totalamount += $record->transamount;
      $totalnumber += $record->transnumber;
      $staticstrans[] = array(
        'transdate' => $record->transdate,
        'transamount' => $record->transamount,
        'transnumber' => $record->transnumber,
      );
    };

    // Protect no transaction results.
    if (count($staticstrans) == 0) {
      $staticstrans[] = array(
        'transdate' => date("Y-m", time()),
        'transamount' => 0,
        'transnumber' => (int) 0,
      );
    }

    // Min length array $staticstrans: 1 year long.
    while (strtotime($staticstrans[0]['transdate']) > $lastyear) {
      $monthbefore = date("Y-m", strtotime("-1 month", strtotime($staticstrans[0]['transdate'])));
      array_unshift($staticstrans, array(
        'transdate' => $monthbefore,
        'transamount' => 0,
        'transnumber' => 0,
      ));
    }

    // Pass data to js:
    // -> Drupal.settings.ces_statistics.staticsusers
    // -> Drupal.settings.ces_statistics.staticstrans
    // -> Drupal.settings.ces_statistics.staticsactivity
    $charts = array(
      'staticsusers' => $staticsusers,
      'staticsactivity' => $staticsactivity,
      'staticstrans' => $staticstrans,
    );
    drupal_add_js(array('ces_statistics' => $charts), 'setting');

    // Protect warning division by zero.
    $averagetrans = 0;
    if ($totalnumber > 0) {
      $averagetrans = $totalamount / $totalnumber;
    }
    $markup = '<ul>
      <li>' . t('Number of accounts:') . ' ' . $totalusers . '</li>
      <li>' . t('Number of transactions:') . ' ' . $totalnumber . '</li>
      <li>' . t('Amount of transactions:') . ' ' . $totalamount . '</li>
      <li>' . t('Average transaction:') . ' ' . $averagetrans . '</li>
      </ul>
      <h3 style="text-align:center;margin-bottom:0;">' . t('Number of accounts') . '</h3>
      <div id="chartdiv1"></div><br/><br/>
      <h3 style="text-align:center;margin-bottom:0;">' . t('Last year accounts activity') . '</h3>
      <div id="chartdiv2"></div><br/><br/>
      <h3 style="text-align:center;margin-bottom:0;">' . t('Number of transactions') . '</h3>
      <div id="chartdiv3"></div><br/><br/>
      <h3 style="text-align:center;margin-bottom:0;">' . t('Amount of transactions in') . ' ' . $exchange['currenciesname'] . ' (' . $exchange['currencysymbol'] . ')</h3>
      <div id="chartdiv4"></div><br/><br/><br/><br/>';
    return array('#markup' => $markup);
  }
  else {
    return array(
      '#markup' => '<p>' . t('You need an account to see this.') . '</p>',
    );
  }
}
/** @} */
