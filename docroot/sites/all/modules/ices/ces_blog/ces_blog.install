<?php
/**
 * @file
 * Install, update and uninstall functions for the ces blog module.
 */

/**
 * @defgroup ces_blog_install Install Ces Blog
 * @ingroup ces_blog
 * @{
 * Install, update and uninstall functions for the ces blog module.
 */

/**
 * Implements hook_install().
 */
function ces_blog_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // We define the node type as an associative array.
  $blog = array(
    'type' => 'ces_blog',
    'name' => $t('Blog'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('CES Exchange blog post.'),
    'body_label' => $t('Content'),
    'title_label' => $t('Title Ces Blog'),
    'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($blog);
  node_add_body_field($content_type);

  // Save the content type.
  node_type_save($content_type);

  // Load the instance definition for our content type's body.
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance('node', 'body', 'ces_blog');

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);

  if (!field_info_field('ces_blog_exchange')) {
    field_create_field(array(
      'field_name' => 'ces_blog_exchange',
      'type' => 'number_integer',
      'cardinality' => 1,
    ));
    field_create_instance(array(
      'field_name' => 'ces_blog_exchange',
      'entity_type' => 'node',
      'bundle' => 'ces_blog',
      'label' => 'Exchange id',
      'description' => 'The id of the exchange the entry is associated to',
      'required' => TRUE,
      'widget' => array(
        'type' => 'ces_blog_exchange',
      ),
      'display' => array(
        'default' => array(
          'type' => 'ces_blog_exchange',
        ),
      ),
    ));
  }
}
/**
 * Implements hook_uninstall().
 *
 * @bug Al desinstalar 
 */
function ces_blog_uninstall() {
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'ces_blog'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  if (!empty($nids)) {
    // Delete all the nodes at once
    // http://api.drupal.org/api/function/node_delete_multiple/7
    node_delete_multiple($nids);

    // http://api.drupal.org/api/function/field_delete_field/7
    field_delete_field('ces_blog_exchange');

    // Loop over any remaining field instances attached to the node_example
    // content type (such as the body field) and delete them individually.
    // http://api.drupal.org/api/function/field_delete_field/7
    $instances = field_info_instances('node', 'ces_blog_exchange');
    if (!empty($instances)) {
      foreach ($instances as $instance_name => $instance) {
        field_delete_instance($instance);
      }
    }

    // Delete our content type
    // http://api.drupal.org/api/function/node_type_delete/7
    node_type_delete('ces_blog');

    // Purge all field infromation
    // http://api.drupal.org/api/function/field_purge_batch/7
    field_purge_batch(1000);
  }
}
/** @} */
