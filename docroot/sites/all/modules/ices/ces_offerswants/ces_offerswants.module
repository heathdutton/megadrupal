<?php
/**
 * @file
 * Implements the drupal hooks for this module.
 */

/**
 * @defgroup ces_offerswants Ces OffersWants
 * @ingroup ices
 * @{
 * Implements the drupal hooks for this module.
 */

/**
 * Implements hook_help().
 */
function ces_offerswants_help($path, $arg) {
  switch ($path) {
    case 'ces/bank/account/myoffers':
      return '<p>' . t('Administer your offers: add, update, hide or delete offers. Keep them attractive and updated.') . '</p>';

    case 'ces/bank/account/mywants':
      return '<p>' . t('Administer your wants: add, update, hide or delete wants. Keep them clear and updated.') . '</p>';

    case 'ces/bank/account/mywants/%/edit':
    case 'ces/bank/account/mywants/add':
      return '<p>' . t('Enter the details of your want.') . '</p>';

    case 'ces/bank/account/myoffers/%/edit':
    case 'ces/bank/account/myoffers/add':
      $exchange = ces_offerswants_get_an_exchange();
      return '<p>' . t('Enter the details of your offer. All offers that include national currency in the rate must include also %currenciesname. Filling the keywords field will improve the search of this offer. Remember to delete offers no longer available. The administrator may delete inappropriate ads.', array('%currenciesname' => $exchange['currenciesname'])) . '</p>';

    case 'ces/admin/categories':
      return '<p>' . t('Administer offers and wants categories.') . '</p>';

    case 'ces/admin/categories/add':
    case 'ces/admin/categories/%/edit':
      return '<p>' . t('Enter the category details.') . '</p>';

  }
}
/**
 * Implements hook_entity_info().
 */
function ces_offerswants_entity_info() {
  $info['ces_offerwant'] = array(
    'label' => t('Offer or want'),
    'controller class' => 'CesOffersWantsEntityController',
    'base table' => 'ces_offerwant',
    'static cache' => TRUE,
    'field cache' => TRUE,
    'load hook' => 'ces_offerwant_load',
    'uri callback' => 'ces_offerwant_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'offer' => array(
        'label' => t('Offer'),
        'admin' => array(
          'path' => 'admin/structure/offer',
          // TODO.
          'access arguments' => array('administer offerswants'),
        ),
      ),
      'want' => array(
        'label' => t('Want'),
        'admin' => array(
          'path' => 'admin/structure/want',
          // TODO.
          'access arguments' => array('administer offerswants'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full offer or want'),
        'custom settings' => FALSE,
      ),
      'list' => array(
        'label' => t('In an offers or wants list'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $info['ces_category'] = array(
    'label' => t('Category'),
    'controller class' => 'CesOffersWantsCategoryEntityController',
    'base table' => 'ces_category',
    'static cache' => TRUE,
    'field cache' => TRUE,
    'load hook' => 'ces_category_load',
    'uri callback' => 'ces_category_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
    ),
    'bundle keys' => array(),
    'bundles' => array(
      'ces_category' => array(
        'label' => t('Category'),
        'admin' => array(
          'path' => 'admin/structure/category',
          // TODO.
          'access arguments' => array('administer offerswants'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full category'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $info['ces_offercomment'] = array(
    'label' => t('Offer comment'),
    'controller class' => 'OfferCommentEntityController',
    'base table' => 'ces_offercomment',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'cid',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'offercomment' => array(
        'label' => 'Offer comment',
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full OfferComment'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * Entity uri callback.
 */
function ces_category_uri($category) {
  return array(
    'path' => 'ces/bank/exchange/offerswants/category/' . $category->id,
  );
}

/**
 * Entity uri callback.
 */
function ces_offerwant_uri($offer) {
  return array(
    'path' => 'ces/bank/exchange/offerswants/offerwant/' . $offer->id,
  );
}
/**
 * Implements hook_load().
 */
function ces_offerwant_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $conditions = array();
  $offerwant = ces_offerwant_load_multiple($ids, $conditions, $reset);
  return $offerwant ? reset($offerwant) : FALSE;
}
/**
 * Loads multiple offerwant entities.
 */
function ces_offerwant_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ces_offerwant', $ids, $conditions, $reset);
}
/**
 * Delete offerwant entity.
 */
function ces_offerwant_delete($id) {
  $controller = entity_get_controller('ces_offerwant');
  return $controller->delete($id);

}
/**
 * Implements hook_load().
 */
function ces_offercomment_load($cid = NULL, $reset = FALSE) {
  $cids = (isset($cid) ? array($cid) : array());
  $offercomment = ces_offercomment_load_multiple($cids, $reset);
  return $offercomment ? reset($offercomment) : FALSE;
}

/**
 * Loads multiple offercomment entities.
 */
function ces_offercomment_load_multiple($cids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ces_offercomment', $cids, $conditions, $reset);
}

/**
 * Delete offercomment entity.
 */
function ces_offercomment_delete($cid) {
  $controller = entity_get_controller('ces_offercomment');
  return $controller->delete($cid);
}

/**
 * Implements hook_menu().
 */
function ces_offerswants_menu() {
  $menu = array();
  $menu['ces/bank/exchange/offers'] = array(
    'title' => 'Offers',
    'description' => 'View available offers',
    'page callback' => 'ces_offerswants_list_page',
    'page arguments' => array('offer', 4, 5, 6, 7, 8),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange details',
      CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 220,
  );
  $menu['ces/bank/exchange/wants'] = array(
    'title' => 'Wants',
    'description' => 'View people\'s wants',
    'page callback' => 'ces_offerswants_list_page',
    'page arguments' => array('want', 4, 5, 6, 7, 8),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange details',
      CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 230,
  );
  $menu['ces/bank/account/myoffers'] = array(
    'title' => 'My offers',
    'description' => 'View my current offers',
    'page callback' => 'ces_offerswants_myoffers_page',
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('add'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 110,
  );
  $menu['ces/bank/account/myoffers/list'] = array(
    'title' => 'My offers',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/bank/account/myoffers/add'] = array(
    'title' => 'Add offer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_offerwant_form', 'offer'),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('add'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $menu['ces/bank/account/myoffers/%ces_offerwant/view'] = array(
    'title' => 'View offer',
    'page callback' => 'ces_offerwant_view',
    'page arguments' => array(4),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('view', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $menu['ces/bank/account/myoffers/%ces_offerwant/edit'] = array(
    'title' => 'Edit offer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_offerwant_form', NULL, 4),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('edit', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  $menu['ces/bank/account/myoffers/%ces_offerwant/delete'] = array(
    'title' => 'Delete offer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_offerwant_delete_form', 4),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('admin', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );
  $menu['ces/bank/account/myoffers/%ces_offerwant/send_notify'] = array(
    'title' => 'Send Notify',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_offerwant_send_notify_form', NULL, 4),
    'file' => 'includes/ces_offerswants_send_notify.inc',
    'file path' => drupal_get_path('module', 'ces_offerswants'),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('view', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $menu['ces/bank/account/mywants'] = array(
    'title' => 'My wants',
    'description' => 'View my current wants',
    'page callback' => 'ces_offerswants_mywants_page',
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('add'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 120,
  );
  $menu['ces/bank/account/mywants/list'] = array(
    'title' => 'My wants',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/bank/account/mywants/add'] = array(
    'title' => 'Add want',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_offerwant_form', 'want'),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('add'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $menu['ces/bank/account/mywants/%ces_offerwant/view'] = array(
    'title' => 'View offer',
    'page callback' => 'ces_offerwant_view',
    'page arguments' => array(4),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('view', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $menu['ces/bank/account/mywants/%ces_offerwant/edit'] = array(
    'title' => 'Edit offer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_offerwant_form', NULL, 4),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('edit', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  $menu['ces/bank/account/mywants/%ces_offerwant/delete'] = array(
    'title' => 'Delete offer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_offerwant_delete_form', 4),
    'access callback' => 'ces_offerwant_access',
    'access arguments' => array('admin', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );
  $menu['ces/admin/categories'] = array(
    'title' => 'Edit categories',
    'description' => 'View, edit and add categories for your exchange',
    'page callback' => 'ces_offerswants_admin_categories_page',
    'access callback' => 'ces_bank_access',
    'access arguments' => array('edit', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['ces/admin/categories/list'] = array(
    'title' => 'List categories',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/admin/categories/add'] = array(
    'title' => 'Add category',
    'description' => 'View, edit and add categories for your exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_category_form'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('edit', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $menu['ces/admin/categories/%ces_category/edit'] = array(
    'title' => 'Edit category',
    'description' => 'Edit category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_category_form', 3),
    'access callback' => 'ces_category_access',
    'access arguments' => array('edit', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 200,
  );
  $menu['ces/admin/categories/%ces_category/delete'] = array(
    'title' => 'Delete category',
    'description' => 'Delete category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_category_delete_form', 3),
    'access callback' => 'ces_category_access',
    'access arguments' => array('admin', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 300,
  );
  $menu['ces/bank/exchange/offercomment/%/view'] = array(
    'title' => 'Offer comments and ratings',
    'description' => 'View offer with comments and ratings',
    'page callback' => 'ces_offercomment_page',
    'page arguments' => array(4),
    'access callback' => TRUE,
    // 'access callback' => 'ces_offerwant_access',
    // 'access arguments' => array('edit', 4),
  );
  return $menu;
}
/**
 * Menu callback function.
 */
function ces_offerswants_myoffers_page() {
  drupal_add_css(drupal_get_path('module', 'ces_offerswants') . '/css/ces_offerswants.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  return _ces_offerswants_my_page('offer');
}
/**
 * Menu callback function.
 */
function ces_offerswants_mywants_page() {
  drupal_add_css(drupal_get_path('module', 'ces_offerswants') . '/css/ces_offerswants.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  return _ces_offerswants_my_page('want');
}
/**
 * Helper function for displayng 'my offers' or 'my wants' page.
 */
function _ces_offerswants_user_page($type, $uid, $view_mode) {
  $page = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ces_offerwant')
        ->entityCondition('bundle', $type)
        ->propertyCondition('user', $uid)
        ->propertyOrderBy('created', 'DESC');
  $result = $query->execute();
  if (isset($result['ces_offerwant']) && count($result['ces_offerwant']) > 0) {
    $offerids = array_keys($result['ces_offerwant']);
    $offers = ces_offerwant_load_multiple($offerids);
    $count = 1;
    foreach ($offers as $offer) {
      $odd = $count++ % 2;
      $myofferwant = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'ces_myofferwant_wrapper',
            $odd ? 'odd' : 'even',
          ),
        ),
      );
      $myofferwant[] = ces_offerwant_view($offer, $view_mode);
      $page[] = $myofferwant;
    }
  }
  return $page;
}
/**
 * Helper function for displayng 'my offers' or 'my wants' page.
 */
function _ces_offerswants_my_page($type) {
  global $user;
  $page = _ces_offerswants_user_page($type, $user->uid, 'full');
  if (empty($page)) {
    $text = array();
    if ($type == 'offer') {
      $text['#markup'] = t("You don't have any offer yet. You should publish your goods and skills so others can ask you for them.")
                       . ' ' . l(t('Add offer'), 'ces/bank/account/myoffers/add');
    }
    else {
      // Type == want.
      $text['#markup'] = t("You don't have any want yet. Publishing a want is useful not only for you but also for other members searching for valued goods and skills.")
                       . ' ' . l(t('Add want'), 'ces/bank/account/mywants/add');
    }
    $page[] = $text;
  }
  return $page;
}
/**
 * Implements hook_entity_view().
 */
function ces_offerwant_view($offerwant, $view_mode = 'full') {
  drupal_add_css(drupal_get_path('module', 'ces_offerswants') . '/css/ces_offerswants.css', array('group' => CSS_DEFAULT, 'type' => 'file'));

  // Populate $node->content with a render() array.
  ces_offerwant_build_content($offerwant, $view_mode);

  $build = $offerwant->content;
  // We don't need duplicate rendering info in $offerwant->content.
  unset($offerwant->content);

  $build += array(
    '#theme' => 'ces_offerwant',
    '#ces_offerwant' => $offerwant,
    '#view_mode' => $view_mode,
  );

  return $build;
}
/**
 * Implements hook_entity_save().
 */
function ces_offerwant_save(&$offerwant) {
  $controller = entity_get_controller('ces_offerwant');
  return $controller->save($offerwant);
}
/**
 * As node_build_content().
 */
function ces_offerwant_build_content($offerwant, $view_mode = 'full') {
  // Remove previously built content, if exists.
  $offerwant->content = array();
  // Build fields content.
  field_attach_prepare_view('ces_offerwant', array($offerwant->id => $offerwant), $view_mode);
  entity_prepare_view('ces_offerwant', array($offerwant->id => $offerwant));
  $offerwant->content += field_attach_view('ces_offerwant', $offerwant, $view_mode);
}
/**
 * Implements hook_field_formatter_info().
 */
function ces_offerswants_field_formatter_info() {
  return array(
    // Machine name of the formatter.
    'ces_offer_rate' => array(
      'label' => t('Rate'),
      // This will only be available to ces_offer_rate fields.
      'field types' => array('ces_offer_rate'),
    ),
  );
}
/**
 * Implements hook_field_formatter_view().
 */
function ces_offerswants_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Initialize the var.
  $element = array();
  foreach ($items as $delta => $item) {
    // Getting the actual value.
    $rate = $item['safe_value'];
  }
  if (isset($rate)) {
    if ($entity->category != 1 && is_numeric($rate)) {
      $category = ces_category_load($entity->category);
      $exchange = ces_offerswants_get_an_exchange($category->exchange);
      $rate = number_format($rate, $exchange['currencyscale'], '.', ' ');
      $rate .= $exchange['currencysymbol'];
    }
    $element = array(
      '#type' => 'container',
      '#attributes' => array('title' => array(t('Rate')), 'class' => 'ces-offer-rate'),
    );
    $element[0]['#markup'] = $rate;
  }
  $element['#label_display'] = 'hidden';
  return $element;
}
/**
 * Form for editing offerwant entities.
 */
function ces_offerwant_form($form, &$form_state, $offerwant_type = 'offer', $offerwant = NULL) {
  global $user;
  if ($offerwant == NULL) {
    $offerwant = (object) (array(
      'type' => $offerwant_type,
      'title' => '',
      'body' => '',
      'image' => '',
      'category' => 1,
      'keywords' => '',
      'state' => 1,
      'created' => REQUEST_TIME,
      'expire' => REQUEST_TIME + 3600 * 24 * 365,
    ));
  }

  if (!empty($form_state['values'])) {
    if (isset($form_state['values']['expire']) && is_array($form_state['values']['expire'])) {
      $form_state['values']['expire'] = mktime(24, 0, 0, $form_state['values']['expire']['month'], $form_state['values']['expire']['day'], $form_state['values']['expire']['year']);
    }
    $offerwant = (object) array_merge((array) $offerwant, $form_state['values']);
  }
  $values = array('id', 'type', 'created');
  foreach ($values as $key) {
    if (isset($offerwant->{$key})) {
      $form[$key] = array(
        '#type' => 'value',
        '#value' => $offerwant->{$key},
      );
    }
  }
  // Define form.
  $options = _ces_offerswants_get_categories_options($offerwant_type);
  if (!empty($options) && count($options) > 1) {
    $options = array('' => t('Select a category...')) + $options;
    $form['category'] = array(
      '#type' => 'select',
      '#title' => t('Category'),
      '#description' => t('Select the category that best matches your announcement.'),
      '#required' => TRUE,
      '#options' => $options,
      '#default_value' => $offerwant->category,
      '#weight' => 0,
    );
  }
  elseif (count($options) == 1) {
    foreach ($options as $category_id => $category_name);
    $form['category'] = array(
      '#type' => 'value',
      '#value' => $category_id,
    );
  }
  else {
    $category = !empty($options) ? reset(array_keys($options)) : 1;
    $form['category'] = array(
      '#type' => 'value',
      '#value' => $category,
    );
  }
  $form['user'] = array(
    '#type' => 'value',
    '#value' => isset($offerwant->user) ? $offerwant->user : $user->uid,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#description' => t('Enter here a short but descriptive title.'),
    '#title' => t('Title'),
    '#default_value' => $offerwant->title,
    '#size' => 40,
    '#maxlength' => 70,
    '#required' => TRUE,
    '#weight' => 1,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#description' => t('Enter here a detailed description.'),
    '#title' => t('Description'),
    '#default_value' => $offerwant->body,
    '#required' => TRUE,
    '#weight' => 2,
  );
  $form['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('keywords'),
    '#description' => t('Enter a comma-separated list of words to describe your content.'),
    '#default_value' => $offerwant->keywords,
    '#weight' => 20,
  );
  $form['image'] = array(
    '#type' => 'managed_file',
    '#title' => t('Image'),
    '#description' => t('Upload an image for your announce.'),
    '#default_value' => $offerwant->image,
    '#weight' => 21,
  );
  $form['expire'] = array(
    '#type' => 'date',
    '#title' => t('Valid until'),
    '#description' => t('The announce will be automatically hidden this date'),
    '#default_value' => array(
      'day' => date('j', $offerwant->expire),
      'month' => date('n', $offerwant->expire),
      'year' => date('Y', $offerwant->expire),
    ),
    '#weight' => 22,
  );
  $form['hide'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide'),
    '#description' => t("Check it if you don't want to publish the announcememnt."),
    '#default_value' => !$offerwant->state,
    '#weight' => 23,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  field_attach_form('ces_offerwant', $offerwant, $form, $form_state);
  $form['ces_offer_rate'][LANGUAGE_NONE][0]['value']['#title'] = t('Rate');
  $form['ces_offer_rate'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
  $exchange = ces_offerswants_get_an_exchange();
  $form['ces_offer_rate'][LANGUAGE_NONE][0]['value']['#description'] = t("Eg: '2.5' or '5.00%symbol and transport' or 'Contact me' or 'Free\'.", array('%symbol' => $exchange['currencysymbol']));

  return $form;
}
/**
 * Validate form function.
 */
function ces_offerwant_form_validate($form, &$form_state) {
  $expire = mktime(24, 0, 0, $form_state['values']['expire']['month'], $form_state['values']['expire']['day'], $form_state['values']['expire']['year']);
  if ($expire < REQUEST_TIME) {
    form_set_error('expire', t('Expire date must be in the future.'));
  }
  else {
    $form_state['values']['expire'] = $expire;
  }
  if ($form_state['values']['category'] == 0) {
    form_set_error('category', t('Select a category.'));
  }
}
/**
 * Form submit function.
 */
function ces_offerwant_form_submit($form, &$form_state) {
  $offerwant = (object) $form_state['values'];
  $offerwant->state = $form_state['values']['hide'] ? 0 : 1;
  $offerwant->expire = $form_state['values']['expire'];
  $offerwant->modified = REQUEST_TIME;
  field_attach_submit('ces_offerwant', $offerwant, $form, $form_state);
  // Load original $offerwant.
  if (!empty($offerwant->id)) {
    $original = entity_load_unchanged('ces_offerwant', $offerwant->id);
  }
  // Save entity to base table since we need the id from now.
  $offerwant = ces_offerwant_save($offerwant);
  // Process picture uploads.
  if (!empty($offerwant->image) && (empty($original) || empty($original->image) || $offerwant->image != $original->image)) {
    $file = file_load($offerwant->image);
    // If the picture is a temporary file move it to its final location and
    // make it permanent.
    if (!$file->status) {
      $info = image_get_info($file->uri);
      $directory = file_default_scheme() . '://' . variable_get('ces_offerswants_picture_path', 'ces_offerswants_pictures');
      // Prepare the pictures directory.
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
      $destination = file_stream_wrapper_uri_normalize($directory . '/picture-' . $offerwant->id . '-' . REQUEST_TIME . '.' . $info['extension']);
      // Move the temporary file into the final location.
      if (($file = file_move($file, $destination, FILE_EXISTS_RENAME)) !== FALSE) {
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        file_usage_add($file, 'ces_offerswants', 'ces_offerwant', $offerwant->id);
        $offerwant->image = $file->fid;
        // Re-save the entity with the new image file id.
        $offerwant = ces_offerwant_save($offerwant);
      }
    }
  }
  // Delete old images.
  if (!empty($original) && !empty($original->image) && $original->image != $offerwant->image) {
    $ofile = file_load($original->image);
    file_usage_delete($ofile, 'ces_offerswants', 'ces_offerwant', $offerwant->id);
    file_delete($ofile);
  }
  $form_state['redirect'] = 'ces/bank/account/my' . $offerwant->type . 's/' . $offerwant->id . '/view';
}
/**
 * Confirm form for deleting offerwant entities.
 */
function ces_offerwant_delete_form($form, &$form_state, $offerwant) {
  $form = array();
  $form['offerwant'] = array('#type' => 'value', '#value' => $offerwant->id);
  $form['offerwant_title'] = array('#type' => 'value', '#value' => $offerwant->title);
  $form['offerwant_type'] = array('#type' => 'value', '#value' => $offerwant->type);

  $message = '<p>';
  if ($offerwant->type == 'offer') {
    $message .= t('Are you sure you want to delete the offer %offer?', array('%offer' => $offerwant->title));
  }
  else {
    $message .= t('Are you sure you want to delete the want %want?', array('%want' => $offerwant->title));
  }
  $message .= '</p>';

  $caption = '';
  $caption .= '<p>' . t('You can simply hide the announcement so it becomes invisible to all other members but you can publish it later.') . '</p>';
  $caption .= '<p>' . t('This action cannot be undone.') . '</p>';
  $path = 'ces/bank/account/my' . $offerwant->type . 's';

  return confirm_form($form, filter_xss($message), $path, filter_xss($caption), t('Delete'));
}
/**
 * Submit form function.
 */
function ces_offerwant_delete_form_submit($form, &$form_state) {
  ces_offerwant_delete($form_state['values']['offerwant']);
  if ($form_state['values']['offerwant_type'] == 'offer') {
    $message = t('Offer %offer has been deleted.', array('%offer' => $form_state['values']['offerwant_title']));
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'ces_offercomment');
    $query->propertyCondition('oid', $form_state['values']['offerwant']);
    $result = $query->execute();
    if (isset($result['ces_offercomment']) && count($result['ces_offercomment']) > 0) {
      $offercommentids = array_keys($result['ces_offercomment']);
      foreach ($offercommentids as $ofcoid) {
        ces_offercomment_delete($ofcoid);
      }
      $message = $message . t('- All offer comments have been deleted too.');
    }
  }
  else {
    $message = t('Want %want has been deleted.', array('%want' => $form_state['values']['offerwant_title']));
  }
  drupal_set_message($message);
  $form_state['redirect'] = 'ces/bank/account/my' . $form_state['values']['offerwant_type'] . 's';
}
/**
 * Implements hook_theme().
 */
function ces_offerswants_theme() {
  return array(
    'ces_offerwant' => array(
      'render element' => 'element',
      'template' => 'ces_offerwant',
    ),
    'ces_offerswants_image' => array(
      'variables' => array('image' => NULL, 'title' => NULL),
    ),
  );
}

/**
 * Implements hook_file_download().
 */
function ces_offerswants_file_download($uri) {
  // TODO.
  return array('Content-type' => 'image/png');
}
/**
 * Impements theme hook for images.
 */
function theme_ces_offerswants_image($variables) {
  $image = $variables['image'];
  $title = $variables['title'];
  $img = theme('image_style', array(
    'style_name' => variable_get('ces_offerswants_image_style_name', 'ces_offerswants_image_style'),
    'path' => $image->uri,
    'alt' => '',
    'title' => '',
  ));
  $classes = array();
  if (module_exists('colorbox')) {
    $classes[] = 'colorbox';
  }
  $output = l($img, file_create_url($image->uri), array(
    'html' => TRUE,
    'attributes' => array(
      'title' => $title,
      'class' => $classes,
      'target' => '_blank',
      'rel' => 'ces_offerswants',
    ),
  ));
  return $output;
}
/**
 * Process variables for ces_offerwant.tpl.php.
 */
function template_preprocess_ces_offerwant(&$variables) {

  $offerwant = $variables['element']['#ces_offerwant'];
  $variables['view_mode'] = $variables['element']['#view_mode'];
  $variables['view_mode_full'] = $variables['element']['#view_mode'] == 'full';
  $variables['view_mode_list'] = $variables['element']['#view_mode'] == 'list';
  // Title.
  $variables['ces_offerwant_title'] = check_plain($offerwant->title);
  // Body.
  $variables['ces_offerwant_body'] = filter_xss($offerwant->body);
  // Image.
  $variables['ces_offerwant_image'] = '';
  if (!empty($offerwant->image)) {
    $image = file_load($offerwant->image);
    $variables['ces_offerwant_image'] = theme('ces_offerswants_image',
      array('image' => $image, 'title' => $variables['ces_offerwant_title']));
  }
  // Category.
  if (!empty($offerwant->category)) {
    $category = ces_category_load($offerwant->category);
    if ($category !== FALSE) {
      $variables['ces_offerwant_category'] = $category->title;
    }
  }
  // Status.
  $variables['ces_offerwant_state'] = $offerwant->state ? t('Visible') : t('Hidden');
  // Modified.
  $variables['ces_offerwant_modified'] = format_date($offerwant->modified);
  // Expire.
  $variables['ces_offerwant_expire'] = format_date($offerwant->expire);
  // Keywords.
  $variables['ces_offerwant_keywords'] = check_plain($offerwant->keywords);
  // Rate.
  if ($offerwant->type == 'offer') {
    $variables['ces_offer_rate'] = drupal_render($variables['element']['ces_offer_rate']);
  }
  // Actions.
  $prefix = 'ces/bank/account/my' . $offerwant->type . 's/' . $offerwant->id;
  $actions = array();
  if ($variables['view_mode_full'] == FALSE) {
    $actions[] = l(t('Details'), $prefix . '/view');
  }
  if (ces_offerwant_access('edit', $offerwant)) {
    $actions[] = l(t('Edit'), $prefix . '/edit');
    $actions[] = l(t('Delete'), $prefix . '/delete');
  }
  if ($offerwant->type == 'offer') {
    $countcomments = db_query("SELECT cid FROM {ces_offercomment} WHERE oid = :oid",
    array(':oid' => $offerwant->id));
    $numcomm = 0;
    foreach ($countcomments as $coucom) {
      $numcomm++;
    }
    $actions[] = l(t('Comments(') . $numcomm . ')', 'ces/bank/exchange/offercomment/' . $offerwant->id . '/view');
  }
  $variables['ces_offerwant_actions'] = implode(' ', $actions);
  $variables['ces_offerwant_send_notify_link'] = l(t('Send Notify'), 'ces/bank/account/myoffers/' . $offerwant->id . '/send_notify');
  // Seller info.
  $variables['ces_offerwant_seller_uid'] = $offerwant->user;
  $account = user_load($offerwant->user);
  $variables['ces_offerwant_seller_name'] = ces_user_get_name($account);
  $variables['ces_offerwant_seller_phone'] = ces_user_get_main_phone($account);
  $variables['ces_offerwant_seller_mail'] = $account->mail;
  $variables['ces_offerwant_seller_address'] = ces_user_get_full_address($account);

  // Seller exchange info
  $exchange_seller = ces_bank_get_current_exchange($account);
  $variables['ces_exchange_seller_name'] = $exchange_seller['name'];
  $variables['ces_exchange_seller_code'] = $exchange_seller['code'];


  // Check if this offer belongs to me.
  global $user;
  $variables['ces_offerwant_belongs_to_me'] = ($offerwant->user == $user->uid);
}
/**
 * Checks access to offerwant entity.
 *
 * @param string $operation
 *   One of 'view', 'use', 'edit', 'admin'.
 * @param object $offerwant
 *   The entity.
 * @param object $account
 *   The Drupal user.
 */
function ces_offerwant_access($operation, $offerwant = NULL, $account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }
  // Check is user integralces?
  if ($operation == 'add') {
    if (!ces_bank_get_current_account()) {
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
  if ($offerwant->user == $account->uid) {
    return TRUE;
  }
  if ($operation == 'view' && $offerwant->state == 1) {
    return TRUE;
  }
  $category = ces_category_load($offerwant->category);
  return ces_bank_access($operation, 'exchange accounts', $category->exchange);
}
/**
 * Edit category form.
 */
function ces_category_form($form, &$form_state, $category = NULL) {
  if ($category == NULL) {
    $exchangeid = ces_offerswants_get_current_exchage_id();
    if (!$exchangeid) {
      return array(
        'message' => array(
          '#markup' => '<p>' . ('Invalid exchange id.') . '</p>',
        ),
      );
    }
    $category = (object) array(
      'title' => '',
      'description' => '',
      'parent' => 0,
      'exchange' => ces_offerswants_get_current_exchage_id(),
      'context' => 1,
    );
  }
  $form = array();
  if (isset($category->id)) {
    $form['id'] = array('#type' => 'value', '#value' => $category->id);
  }
  $form['title'] = array(
    '#type' => 'textfield',
    '#description' => t('Enter here the name of the category'),
    '#title' => t('Title'),
    '#default_value' => $category->title,
    '#size' => 20,
    '#maxlength' => 40,
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#description' => t('Enter here a detailed description with examples.'),
    '#title' => t('Description'),
    '#default_value' => $category->description,
  );
  $form['exchange'] = array(
    '#type' => 'value',
    '#value' => $category->exchange,
  );

  $options = _ces_offerswants_get_categories_options();
  if (!empty($options)) {
    $options[0] = t('None');
    $form['parent'] = array(
      '#type' => 'select',
      '#title' => t('Parent category'),
      '#description' => t('Do not select enything if this is a root category. Otherwise, if you are editing a subcategory, choose the parent category.'),
      '#options' => $options,
      '#default_value' => $category->parent,
    );
  }
  else {
    $form['parent'] = array(
      '#type' => 'value',
      '#value' => $category->parent,
    );
  }

  $form['context'] = array(
    '#type' => 'radios',
    '#title' => t('Context'),
    '#options' => array(
      0 => t('None'),
      1 => t('Offers'),
      2 => t('Wants'),
      3 => t('Both'),
    ),
    '#description' => t('Choose whether this category is applicable to offers, wants or both.'),
    '#default_value' => $category->context,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  field_attach_form('ces_category', $category, $form, $form_state);
  return $form;
}
/**
 * Validate form category.
 */
function ces_category_form_validate($form, &$form_state) {
  $category = (object) $form_state['values'];
  if (!isset($category->title) || empty($category->title)) {
    form_set_error('title', t('A title from category is necessary.'));
  }
  if (!isset($category->description) || empty($category->description)) {
    form_set_error('description', t('A description from category is necessary.'));
  }
  if (!isset($category->exchange) || empty($category->exchange)) {
    form_set_error('exchange', t('A exchange from category is necessary.'));
  }
  if (!isset($category->context) || empty($category->context)) {
    form_set_error('context', t('A context from category is necessary.'));
  }
}
/**
 * Form submit.
 */
function ces_category_form_submit($form, &$form_state) {
  $category = (object) $form_state['values'];
  field_attach_submit('ces_category', $category, $form, $form_state);
  ces_category_save($category);
}
/**
 * Category confirm delete form.
 */
function ces_category_delete_form($form, &$form_state, $category) {
  $form = array();
  $form['category'] = array('#type' => 'value', '#value' => $category->id);
  $form['category_title'] = array('#type' => 'value', '#value' => $category->title);

  $message = '<p>' . t('Are you sure you want to delete the category %category?', array('%category' => $category->title)) . '</p>';
  $caption = '';
  $num_rows = db_query_range('SELECT count(id) FROM {ces_offerwant} WHERE category = :category', 0, 1, array(':category' => $category->id))->fetchField();
  if ($num_rows) {
    $caption .= '<p>' . t('%category is used by %count offers or wants. It is highly recommended that you change the category of these offers or wants before you delete it. If the category is deleted now they may become unusable or may not display correctly.', array('%category' => $category->title, '%count' => $num_rows)) . '</p>';
  }
  $caption .= '<p>' . t('This action cannot be undone.') . '</p>';

  return confirm_form($form, filter_xss($message), 'ces/admin/categories', filter_xss($caption), t('Delete'));
}
/**
 * Submit form delete category.
 */
function ces_category_delete_form_submit($form, &$form_state) {
  ces_category_delete($form_state['values']['category']);
  drupal_set_message(t('Category %category has been deleted.', array('%category' => $form_state['values']['category_title'])));
  $form_state['redirect'] = 'ces/admin/categories';
}
/**
 * Implements hook_entity_save().
 */
function ces_category_save($category) {
  $controller = entity_get_controller('ces_category');
  return $controller->save($category);
}
/**
 * Implements hook_entity_load().
 */
function ces_category_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $conditions = array();
  $category = ces_category_load_multiple($ids, $conditions, $reset);
  return $category ? reset($category) : FALSE;
}
/**
 * Laod multiple categories.
 */
function ces_category_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ces_category', $ids, $conditions, $reset);
}
/**
 * Delete category.
 */
function ces_category_delete($id) {
  $controller = entity_get_controller('ces_category');
  return $controller->delete($id);
}
/**
 * Access category.
 */
function ces_category_access($permission, $category) {
  return ces_bank_access($permission, 'exchange', $category->exchange);
}
/**
 * Returns current exchange id.
 *
 * This is a triky function in order to avoid explicit dependence on ces_bank
 * module. Form this module point of view, an exchange is an array having an
 * id field. Nothing more.
 */
function ces_offerswants_get_current_exchage_id($account = NULL) {
  // Invoke in fact ces_bank module, but we avoid explicit dependence.
  $result = ces_offerswants_get_an_exchange();
  if (isset($result['id'])) {
    return $result['id'];
  }
  return 0;
}
/**
 * Exchanges exposed by this module: nothing.
 */
function ces_offerswants_get_exchanges() {
  return array();
}
/**
 * Returns an exchange given its id, or the current one if NULL.
 */
function ces_offerswants_get_an_exchange($id = NULL) {
  // Invoke in fact ces_bank module, but we avoid explicit dependence.
  if ($id == NULL) {
    return module_invoke_all('get_current_exchange');
  }
  else {
    return module_invoke_all('get_exchange', $id);
  }
}
/**
 * Return all exchanges.
 *
 * Warning: indexs aren't ids.
 */
function ces_offerswants_get_all_exchanges() {
  // Invoke in fact ces_bank module, but we avoid explicit dependence.
  $result = module_invoke_all('get_exchanges');
  return $result;
}
/**
 * Helper function for filling select options field with the list of exchanges.
 */
function _ces_offerswants_get_all_exchanges_options() {
  $options = array();
  $exchanges = ces_offerswants_get_all_exchanges();
  foreach ($exchanges as $exchange) {
    $options[$exchange['id']] = $exchange['code'];
  }
  $options['all'] = t('All Internal exchanges');
  asort($options);
  return $options;
}
/**
 * Helper.
 *
 * @param string $offerwant_type
 *   'offer' or 'want'.
 * @param int $exchange
 *   Exchange identifier.
 */
function _ces_offerswants_get_categories_options($offerwant_type = NULL, $exchange = NULL) {
  $options = array();
  $categories = ces_offerswants_get_categories($offerwant_type, $exchange);
  foreach ($categories as $id => $cat) {
    $options[$id] = $cat->title;
  }
  return $options;
}
/**
 * Return the list of all category ids for given conditions.
 */
function ces_offerswants_get_categories_ids($offerwant_type = NULL, $exchange = NULL) {
  if ($exchange == NULL) {
    $exchange = ces_offerswants_get_current_exchage_id();
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ces_category')
        ->propertyCondition('exchange', $exchange)
        ->propertyOrderBy('title', 'ASC');
  if ($offerwant_type == 'offer') {
    $query->propertyCondition('context', array(1, 3), 'IN');
  }
  elseif ($offerwant_type == 'want') {
    $query->propertyCondition('context', array(2, 3), 'IN');
  }
  $result = $query->execute();
  if (isset($result['ces_category'])) {
    return array_keys($result['ces_category']);
  }
  return array();
}
/**
 * Get category entities.
 *
 * @param string $offerwant_type
 *   - NULL for all $offerwant type's categories.
 *   - 'offer' for offer's categories.
 *   - 'want' for want's categories.
 */
function ces_offerswants_get_categories($offerwant_type = NULL, $exchange = NULL) {
  $ids = ces_offerswants_get_categories_ids($offerwant_type, $exchange);
  return ces_category_load_multiple($ids);
}
/**
 * Page callback function.
 */
function ces_offerswants_admin_categories_page() {
  $categories = ces_offerswants_get_categories();
  $page = array();
  if (empty($categories)) {
    return array(
      '#markup' => t('Your exchange does not have any category yet. It is very recommended to divide the offers and/or wants into several categories. A good first approach is to create 10-15 categories for offers but a single category for wants.')
      . ' ' . l(t('Add category'), 'ces/admin/categories/add'),
    );
  }
  $page['table'] = array(
    '#theme' => 'table',
    '#attributes' => array(
      'class' => array('ces-table'),
    ),
    '#header' => array(
      array(
        'data' => '#',
      ),
      array(
        'data' => t('Title'),
      ),
      array(
        'data' => t('Description'),
      ),
      array(
        'data' => t('Context'),
      ),
      array(
        'data' => t('Offers'),
      ),
      array(
        'data' => t('Wants'),
      ),
      array(
        'data' => t('Actions'),
      ),
    ),
    '#rows' => array(),
  );
  $count = 1;
  foreach ($categories as $category) {
    $row = array();
    $row[] = $count++;
    $row[] = $category->title;
    $row[] = text_summary($category->description, 50);
    switch ($category->context) {
      case 0:
        $row[] = t('None');
        break;

      case 1:
        $row[] = t('Offers');
        break;

      case 2:
        $row[] = t('Wants');
        break;

      case 3:
        $row[] = t('Both');
        break;

    }
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'ces_offerwant')
          ->entityCondition('bundle', 'offer')
          ->propertyCondition('category', $category->id)
          ->count();
    $row[] = $query->execute();
    $query->entityCondition('entity_type', 'ces_offerwant')
          ->entityCondition('bundle', 'want')
          ->propertyCondition('category', $category->id)
          ->count();
    $row[] = $query->execute();
    $row[] = l(t('Edit'), 'ces/admin/categories/' . $category->id . '/edit')
     . ' ' . l(t('Delete'), 'ces/admin/categories/' . $category->id . '/delete');

    $page['table']['#rows'][] = $row;
  }
  return $page;
}
/**
 * Entity controller.
 */
class CesOffersWantsEntityController extends DrupalDefaultEntityController {
  /**
   * Save entity.
   */
  public function save($offerwant) {
    if (!isset($offerwant->id)) {
      // Insert.
      drupal_write_record('ces_offerwant', $offerwant);
      field_attach_insert('ces_offerwant', $offerwant);
      module_invoke_all('entity_insert', $offerwant, 'ces_offerwant');
    }
    else {
      // Update.
      drupal_write_record('ces_offerwant', $offerwant, 'id');
      field_attach_update('ces_offerwant', $offerwant);
      module_invoke_all('entity_update', $offerwant, 'ces_offerwant');
    }
    return $offerwant;
  }
  /**
   * Delete entity.
   */
  public function delete($id) {
    $offerwant = ces_offerwant_load($id);
    db_delete('ces_offerwant')->condition('id', $offerwant->id)->execute();
    field_attach_delete('ces_offerwant', $offerwant);
  }
}
/**
 * Entity controller.
 */
class CesOffersWantsCategoryEntityController extends DrupalDefaultEntityController {
  /**
   * Save entity.
   */
  public function save($category) {
    if (!isset($category->id)) {
      // Insert.
      drupal_write_record('ces_category', $category);
      field_attach_insert('ces_category', $category);
      module_invoke_all('entity_insert', $category, 'ces_category');
    }
    else {
      drupal_write_record('ces_category', $category, 'id');
      field_attach_update('ces_category', $category);
      module_invoke_all('entity_update', $category, 'ces_category');
    }
    return $category;
  }
  /**
   * Delete entity.
   */
  public function delete($id) {
    // Load full entity.
    $category = ces_category_load($id);
    // Change the parent of child categories.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'ces_category')
          ->propertyCondition('parent', $category->id);
    $result = $query->execute();
    if (isset($result['ces_category'])) {
      $ids = array_keys($result['ces_category']);
      $children = ces_category_load_multiple($ids);
      foreach ($children as $cat) {
        $cat->parent = $category->parent;
        $this->save($cat);
      }
    }
    // Change the category of offers and wants assigned to this category.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'ces_offerwant')
          ->propertyCondition('category', $category->id);
    $result = $query->execute();
    if (isset($result['ces_category'])) {
      $ids = array_keys($result['ces_category']);
      $offerwants = ces_offerwant_load_multiple($ids);
      foreach ($offerwants as $offerwant) {
        $offerwant->category = $category->parent;
        ces_offerwant_save($offerwant);
      }
    }
    // Finally delete category from database.
    db_delete('ces_category')->condition('id', $category->id)->execute();
    field_attach_delete('ces_category', $category);
  }
}

/**
 * Entity controller.
 */
class OfferCommentEntityController extends DrupalDefaultEntityController {
  /**
   * Save entity.
   */
  public function save($offercomment) {
    drupal_write_record('ces_offercomment', $offercomment);
    module_invoke_all('entity_insert', $offercomment, 'ces_offercomment');
    return $offercomment;
  }
  /**
   * Delete entity.
   */
  public function delete($cid) {
    $offercomment = ces_offercomment_load($cid);
    db_delete('ces_offercomment')->condition('cid', $offercomment->cid)->execute();
  }
}

/**
 * Implements hook_block_info().
 */
function ces_offerswants_block_info() {
  $block = array(
    'ces_offerswants' => array(
      'info' => t('CES offers and wants filter'),
      'cache' => DRUPAL_NO_CACHE,
      'region' => 'help',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'ces/bank/exchange/offers*' . "\n" . 'ces/bank/exchange/wants*' . "\n",
      'weight' => -1000,
      'status' => 1,
    ),
  );

  return $block;
}
/**
 * Implements hook_block_view().
 */
function ces_offerswants_block_view($delta = '') {
  // Format the render array.
  $block = array();
  $block['subject'] = t('Filter');
  $content = drupal_get_form('ces_offerswants_block_form', arg(3) == 'offers' ? 'offer' : 'want', arg(4), arg(5), arg(6), arg(7));
  $block['content'] = $content;
  return $block;
}
/**
 * Form for filtering offers or wants.
 */
function ces_offerswants_block_form($form, &$form_state, $offerwant_type = 'offer', $action = 'filter', $exchange = NULL, $category = NULL, $orderby = NULL) {
  $values = isset($form_state['values']) ? $form_state['values'] : array();
  if ($exchange == NULL) {
    $exchange = ces_offerswants_get_current_exchage_id();
  }
  if ($orderby == NULL) {
    $orderby = 'modified';
  }
  if ($action == 'filter') {
    $query = '';
    if ($category == NULL) {
      $category = 'all';
    }
  }
  else {
    $query = $category;
    $category = 'all';
  }
  $form = array();

  $form['basic'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('basic'),
    ),
  );
  // Offer or want.
  if (isset($values['offerwant_type'])) {
    $offerwant_type = $values['offerwant_type'];
  }
  $form['basic']['offerwant_type'] = array(
    '#type' => 'value',
    '#value' => $offerwant_type,
  );
  // Hidden submit button.
  $form['basic']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#attributes' => array('style' => array('display: none;')),
  );
  // Exchange.
  $exchanges = _ces_offerswants_get_all_exchanges_options();
  $form['basic']['exchange'] = array(
    '#type' => 'select',
    '#title' => t('Exchange'),
    '#options' => $exchanges,
    '#default_value' => $exchange,
    '#attributes' => array('onChange' => array('this.form.submit();')),
  );
  // Category.
  $categories = _ces_offerswants_get_categories_options($offerwant_type, $exchange);
  if (count($categories) > 1) {
    $categories = array('all' => t('All')) + $categories;
    $form['basic']['category'] = array(
      '#type' => 'select',
      '#title' => t('Category'),
      '#options' => $categories,
      '#default_value' => isset($values['category']) ? $values['category'] : $category,
      '#attributes' => array('onChange' => array('this.form.submit();')),
    );
  }
  else {
    $form['basic']['category'] = array(
      '#type' => 'value',
      '#value' => 'all',
    );
  }

  // Order by.
  $orderbies = array(
    'modified' => t('Update time'),
    'created' => t('Creation time'),
    'title' => t('Title'),
    'user' => t('User'),
  );
  $form['basic']['orderby'] = array(
    '#type' => 'select',
    '#title' => t('Order by'),
    '#options' => $orderbies,
    '#default_value' => isset($values['orderby']) ? $values['orderby'] : $orderby,
    '#attributes' => array('onChange' => array('this.form.submit();')),
  );
  $form['basic']['searchbox'] = array(
    '#type' => 'container',
  );
  $form['basic']['searchbox']['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#size' => '12',
    '#default_value' => isset($values['search']) ? $values['search'] : $query,
  );
  $form['basic']['searchbox']['searchsubmit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array(
      'class' => array('search-button'),
    ),
  );
  $form['advanced'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('advanced'),
    ),
  );
  return $form;
}
/**
 * Filter offers form submit.
 */
function ces_offerswants_block_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  if (isset($values['search']) && !empty($values['search'])) {
    $form_state['redirect'] = 'ces/bank/exchange/' . $values['offerwant_type'] .
      's/search/' . $values['exchange'] . '/' . $values['search'] . '/' .
      $values['orderby'];
  }
  elseif ($values['op'] == t('Filter')) {
    $form_state['redirect'] = 'ces/bank/exchange/' . $values['offerwant_type'] .
      's/filter/' . $values['exchange'] . '/' . $values['category'] . '/' .
      $values['orderby'];
  }
}
/**
 * If action is empty or is 'filter'.
 *
 * @param string $arg1
 *   Filter by exchange id (only used if arg2 is null or is 'all').
 * @param string $arg2
 *   Filter by category id.
 * @param string $arg3
 *   Order by property. Defaults to 'modified'.
 */
function ces_offerswants_list_page($offerwant_type = 'offer', $action = NULL, $arg1 = NULL, $arg2 = NULL, $arg3 = NULL) {
  drupal_add_css(drupal_get_path('module', 'ces_offerswants') . '/css/ces_offerswants.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  if (empty($action)) {
    $action = 'filter';
  }

  $page = array();

  if ($action == 'filter') {
    // Build entity query.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'ces_offerwant');
    $query->entityCondition('bundle', $offerwant_type);
    $query->propertyCondition('state', 1);

    if ($arg2 != NULL && $arg2 != 'all') {
      $query->propertyCondition('category', $arg2);
    }
    else {
      if ($arg1 == NULL) {
        $arg1 = ces_offerswants_get_current_exchage_id();
      }
      $categories = ces_offerswants_get_categories_ids($offerwant_type, $arg1);
      if (!empty($categories)) {
        $query->propertyCondition('category', $categories, 'IN');
      }
    }
    if ($arg3 == NULL) {
      $arg3 = 'modified';
    }
    $direction = _ces_offerswants_get_orderby_direction($arg3);
    $query->propertyOrderBy($arg3, $direction);
    // Get and render results with n results: pager(n).
    $query->pager(25);
    $result = $query->execute();
    if (isset($result['ces_offerwant']) && count($result['ces_offerwant']) > 0) {
      $offerids = array_keys($result['ces_offerwant']);
      $offers = ces_offerwant_load_multiple($offerids);
      $page += _ces_offerwants_render_list($offers);
    }
    else {
      $text = array(
        '#markup' => t('There are no results. Try broaden your search criteria in order to get some results.'),
      );
      $page[] = $text;
    }
  }
  elseif ($action == 'search') {
    $page += search_data($arg2, 'ces_offerswants',
      array(
        'exchange' => $arg1,
        'orderby' => $arg3,
        'state' => 1,
        'type' => $offerwant_type
      ));
  }
  else {
    drupal_set_message(t('Action not known'), 'error');
  }

  $build = array(
    'content' => $page,
    'pager' => array(
      '#markup' => theme('pager'),
      '#weight' => 10,
    ),
  );
  return $build;
}
/**
 * Helper.
 */
function _ces_offerswants_get_orderby_direction($field) {
  if ($field == 'modified' || $field == 'created') {
    $direction = 'DESC';
  }
  else {
    $direction = 'ASC';
  }
  return $direction;
}
/**
 * Render list of offers.
 */
function _ces_offerwants_render_list($offers) {
  $page = array();
  $count = 1;
  foreach ($offers as $offer) {
    $odd = $count++ % 2;
    $offerwant = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'ces_myofferwant_wrapper',
          $odd ? 'odd' : 'even',
        ),
      ),
    );
    $offerwant[] = ces_offerwant_view($offer, 'list');
    $page[] = $offerwant;
  }
  return $page;
}
/**
 * Implements hook_search_info().
 */
function ces_offerswants_search_info() {
  return array(
    'title' => t('Offers and wants'),
  );
}
/**
 * Implements hook_search_access().
 */
function ces_offerswants_search_access() {
  return TRUE;
}
/**
 * Implements hook_search_execute().
 */
function ces_offerswants_search_execute($keys = NULL, $conditions = NULL) {
  $find = array();
  // Replace wildcards with MySQL/PostgreSQL wildcards.
  $keys = preg_replace('!\*+!', '%', $keys);
  // Select database.
  $query = db_select('ces_offerwant');
  $query->fields('ces_offerwant', array('id'));
  $keys = explode(' ', $keys);
  foreach ($keys as $key) {
    $query->condition(db_or()
      ->condition('title', '%' . db_like($key) . '%', 'LIKE')
      ->condition('keywords', '%' . db_like($key) . '%', 'LIKE')
      ->condition('body', '%' . db_like($key) . '%', 'LIKE'));
  }
  foreach ($conditions as $field => $value) {
    if ($field == 'orderby') {
      $direction = _ces_offerswants_get_orderby_direction($value);
      $query->orderBy($value, $direction);
    }
    elseif ($field == 'exchange') {
      if ( $value != 'all' ) {
        $categories = array_keys(_ces_offerswants_get_categories_options(NULL, $value));
        $query->condition('category', $categories, 'IN');
      }
    }
    else {
      $query->condition($field, $value);
    }
  }
  $ids = $query->execute()->fetchCol();
  // Make results.
  $offerwants = ces_offerwant_load_multiple($ids);
  $results = array();
  foreach ($offerwants as $offerwant) {
    $result = array(
      'title' => $offerwant->title,
      'link' => entity_uri('ces_offerwant', $offerwant),
      'entity' => $offerwant,
    );
    $results[] = $result;
  }
  return $results;
}
/**
 * Page callback.
 */
function ces_offerswants_search_page($results) {
  $offers = array();
  foreach ($results as $result) {
    $offers[] = $result['entity'];
  }
  $page = _ces_offerwants_render_list($offers);
  return $page;
}
/**
 * Implements hook_user_view().
 */
function ces_offerswants_user_view($account, $view_mode, $langcode) {
  $offers = array(
    '#type' => 'container',
    '#attributes' => array(),
    '#weight' => 2,
  );
  $offers['title'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>',
    '#suffix' => '</h3>',
    '#markup' => t('Offers'),
  );
  $offers['list'] = _ces_offerswants_user_page('offer', $account->uid, 'list');
  if (empty($offers['list'])) {
    $offers['list']['#markup'] = t('No offers.');
  }
  $account->content['offers'] = $offers;

  $wants = array(
    '#type' => 'container',
    '#attributes' => array(),
    '#weight' => 3,
  );
  $wants['title'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>',
    '#suffix' => '</h3>',
    '#markup' => t('Wants'),
  );
  $wants['list'] = _ces_offerswants_user_page('want', $account->uid, 'list');
  if (empty($wants['list'])) {
    $wants['list']['#markup'] = t('No wants.');
  }
  $account->content['wants'] = $wants;
}
/**
 * Implements hook_form_alter().
 */
function ces_offerswants_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'ces_user_register_form') {
    if (!empty($form_state['page']) && ($form_state['page'] == 'offer' || $form_state['page'] == 'want')) {
      // 'offers' or 'wants'.
      $key = $form_state['page'] . 's';
      $index = $form_state['offerwant_index'];
      $offerform = array(
        '#tree' => TRUE,
        '#parents' => array($key, $index),
      );
      $form_state['values'] = (isset($form_state['values'][$key][$index])) ? $form_state['values'][$key][$index] : array();
      $form[$key][$index] = ces_offerwant_form($offerform, $form_state, $form_state['page']);
      $form['#tree'] = TRUE;
      unset($form[$key][$index]['submit']);
      // Unset #parents in order for tree property to take effect. #parents is
      // set by field_attach in offerwant form function. It will be
      // automatically recomputed later at form build.
      $form['actions']['previous'] = array(
        '#type' => 'submit',
        '#value' => t('<< Previous'),
        '#submit' => array('ces_offerswants_user_register_previous'),
        '#weight' => 0,
        '#limit_validation_errors' => array(),
      );
    }
    if (!empty($form_state['page']) && ($form_state['page'] == 'offer' || $form_state['page'] == 'want' || $form_state['page'] == 'bankaccount')) {
      $exchange = ces_bank_get_current_exchange();
      $minoffers = $exchange['data']['registration_offers'];
      $minwants = $exchange['data']['registration_wants'];
      $numoffers = isset($form_state['page_values']['offers']) ? count($form_state['page_values']['offers']) : 0;
      $numwants = isset($form_state['page_values']['wants']) ? count($form_state['page_values']['wants']) : 0;
      // Count the offer or want by this form.
      if ($form_state['page'] == 'offer' && $form_state['offerwant_index'] == $numoffers) {
        $numoffers++;
      }
      elseif ($form_state['page'] == 'want' && $form_state['offerwant_index'] == $numwants) {
        $numwants++;
      }

      $okoffers = ($numoffers >= $minoffers);
      $okwants = ($numwants >= $minwants);

      if ($form_state['page'] == 'bankaccount' || $form_state['page'] == 'offer') {
        $form['actions']['anotheroffer'] = array(
          '#type' => 'submit',
          '#value' => t('Add offer >>'),
          '#submit' => array(
            'ces_bank_user_register_save_values',
            'ces_offerswants_user_register_save_values',
            'ces_offerswants_user_register_add_another_offer',
          ),
          '#weight' => 20,
        );
      }
      if ($okoffers) {
        $form['actions']['anotherwant'] = array(
          '#type' => 'submit',
          '#value' => t('Add want >>'),
          '#submit' => array(
            'ces_bank_user_register_save_values',
            'ces_offerswants_user_register_save_values',
            'ces_offerswants_user_register_add_another_want',
          ),
          '#weight' => 30,
        );
      }
      $form['actions']['submit']['#access'] = $okoffers && $okwants;
      array_unshift($form['actions']['submit']['#submit'],
        'ces_offerswants_user_register_save_values');
      $form['actions']['submit']['#submit'][]
        = 'ces_offerswants_user_register_submit';
    }
  }
  elseif ($form_id == 'ces_bank_exchange_form') {
    $form['exchange']['users']['registration_offers'] = array(
      '#type' => 'select',
      '#title' => t('Minimum offers on register'),
      '#description' => t('The minimum number of offers that a member must fill in the registration form.'),
      '#options' => array(
        '0' => t('None'),
        '1' => t('1'),
        '2' => t('2'),
        '3' => t('3'),
        '4' => t('4'),
      ),
      '#default_value' => isset($form_state['values']['data']['registration_offers']) ?
      $form_state['values']['data']['registration_offers'] : '1',
    );
    $form['exchange']['users']['registration_wants'] = array(
      '#type' => 'select',
      '#title' => t('Minimum wants on register'),
      '#description' => t('The minimum number of wants that a member must fill in the registration form.'),
      '#options' => array(
        '0' => t('None'),
        '1' => t('1'),
        '2' => t('2'),
        '3' => t('3'),
        '4' => t('4'),
      ),
      '#default_value' => isset($form_state['values']['data']['registration_wants']) ?
      $form_state['values']['data']['registration_wants'] : '0',
    );
    array_unshift($form['#submit'], 'ces_offerswants_exchange_form_submit');
  }
}
/**
 * Form submit function for exchange creation form.
 */
function ces_offerswants_exchange_form_submit($form, &$form_state) {
  if (!isset($form_state['values']['data'])) {
    $form_state['values']['data'] = array();
  }
  $form_state['values']['data']['registration_offers']
    = $form_state['values']['registration_offers'];
  $form_state['values']['data']['registration_wants']
    = $form_state['values']['registration_wants'];
}
/**
 * Add another offer submit.
 */
function ces_offerswants_user_register_add_another_offer($form, &$form_state) {
  ces_offerswants_user_register_add_another($form, $form_state, 'offer');
}
/**
 * Add another want submit.
 */
function ces_offerswants_user_register_add_another_want($form, &$form_state) {
  ces_offerswants_user_register_add_another($form, $form_state, 'want');
}
/**
 * Helper function submit add offer or want in register form.
 */
function ces_offerswants_user_register_add_another($form, &$form_state, $type) {
  if ($type == $form_state['page']) {
    $form_state['offerwant_index']++;
  }
  else {
    $form_state['offerwant_index'] = 0;
  }
  // Setup new form.
  $form_state['page'] = $type;
  if (isset($form_state['page_values'][$type . 's'][$form_state['offerwant_index']])) {
    $form_state['values'][$type . 's'][$form_state['offerwant_index']]
      = $form_state['page_values'][$type . 's'][$form_state['offerwant_index']];
  }
  else {
    $form_state['values'] = array();
  }
  $form_state['rebuild'] = TRUE;
}
/**
 * Previous button submit.
 */
function ces_offerswants_user_register_previous($form, &$form_state) {
  $index = $form_state['offerwant_index'];
  $page = $form_state['page'];
  if ($form_state['page'] == 'offer') {
    if ($index == 0) {
      $form_state['page'] = 'bankaccount';
      $form_state['values'] = $form_state['page_values']['bankaccount'];
      unset($form_state['offerwant_index']);
    }
    else {
      $form_state['values']['offers'][$index - 1]
        = $form_state['page_values']['offers'][$index - 1];
      $form_state['offerwant_index'] = $index - 1;
    }
  }
  else {
    // Want.
    if ($index == 0) {
      if (empty($form_state['page_values']['offers'])) {
        $form_state['page'] = 'bankaccount';
        $form_state['values'] = $form_state['page_values']['bankaccount'];
        unset($form_state['offerwant_index']);
      }
      else {
        $form_state['page'] = 'offer';
        $newindex = count($form_state['page_values']['offers']) - 1;
        $form_state['values']['offers'][$newindex]
          = $form_state['page_values']['offers'][$newindex];
        $form_state['offerwant_index'] = $newindex;
      }
    }
    else {
      $form_state['values']['wants'][$index - 1]
        = $form_state['page_values']['wants'][$index - 1];
    }
  }
  $form_state['rebuild'] = TRUE;
}
/**
 * Helper for saving values within form pages.
 */
function ces_offerswants_user_register_save_values($form, &$form_state) {
  $page = $form_state['page'];
  if ($page == 'offer' || $page == 'want') {
    // Offers or wants.
    $type = $page . 's';
    $index = $form_state['offerwant_index'];
    if (!isset($form_state['page_values'][$type])) {
      $form_state['page_values'][$type] = array();
    }
    $form_state['page_values'][$type][$index] = $form_state['values'][$type][$index];
  }
}
/**
 * Submit user regiser form.
 */
function ces_offerswants_user_register_submit($form, &$form_state) {
  // Submit functions below override redirect but in register function we want
  // to keep the original one.
  $redirect = $form_state['redirect'];
  // Submit offers.
  if (!empty($form_state['page_values']['offers'])) {
    foreach ($form_state['page_values']['offers'] as $offer) {
      $form_state['values'] = $offer;
      $form_state['values']['user'] = $form_state['user']->uid;
      ces_offerwant_form_submit($form, $form_state);
    }
  }
  // Submit wants.
  if (!empty($form_state['page_values']['wants'])) {
    foreach ($form_state['page_values']['wants'] as $want) {
      $form_state['values'] = $want;
      $form_state['values']['user'] = $form_state['user']->uid;
      ces_offerwant_form_submit($form, $form_state);
    }
  }
  $form_state['redirect'] = $redirect;
}
/**
 * Implements hook_page().
 */
function ces_offercomment_page($offerid) {
  drupal_add_css(drupal_get_path('module', 'ces_offerswants') . '/css/ces_offerswants.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  $page = array();
  // Build entity query.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ces_offerwant');
  $query->entityCondition('bundle', 'offer');
  $query->propertyCondition('id', $offerid);
  $result = $query->execute();

  if (isset($result['ces_offerwant']) && count($result['ces_offerwant']) > 0) {
    $offerids = array_keys($result['ces_offerwant']);
    $offers = ces_offerwant_load_multiple($offerids);
    $page[] = _ces_offerwants_render_list($offers);

    $query2 = new EntityFieldQuery();
    $query2->entityCondition('entity_type', 'ces_offercomment');
    $query2->propertyCondition('oid', $offerid);
    $result2 = $query2->execute();
    if (isset($result2['ces_offercomment']) && count($result2['ces_offercomment']) > 0) {
      $offercommentids = array_keys($result2['ces_offercomment']);
      $offercomments = ces_offercomment_load_multiple($offercommentids);

      $buildoutput = array();
      $count = 1;
      foreach ($offercomments as $ofco) {
        $odd = $count++ % 2;
        $userauthor = user_load($ofco->uid);
        $buildoutput = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'ces_offercomment_wrapper',
              $odd ? 'odd' : 'even',
            ),
          ),
          'content' => array(
            '#type' => 'markup',
            '#markup' => '<div class="offercomment-body">' . $ofco->body . '</div>' .
            '<div class="offercomment-rated-author">Rated <strong>' . $ofco->rating . '/5</strong> by ' .
            l($userauthor->name, 'user/' . $userauthor->uid) . ' - ' . format_date($ofco->created, 'custom', 'd/m/y') . '</div>',
          ),
        );
        $page[] = $buildoutput;
      }
    }
    $page[] = drupal_get_form('ces_offercomment_add_form', $offerid);
  }
  else {
    $text = array(
      '#markup' => t('There is no offer with ' . $offerid . ' id number.'),
    );
    $page[] = $text;
  }
  return $page;
}
/**
 * Implements comment_add_form. CES Offer Comment add form.
 */
function ces_offercomment_add_form($form, &$form_state, $offerid) {
  $form['offercomment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new comment and rating to this offer.'),
  );

  $form['offercomment']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment'),
    '#rows' => 3,
    '#required' => TRUE,
  );

  $form['offercomment']['rating'] = array(
    '#type' => 'select',
    '#title' => t('Rating from 0 to 5'),
    '#options' => array(
      0 => '0',
      1 => '1',
      2 => '2',
      3 => '3',
      4 => '4',
      5 => '5',
    ),
    '#required' => TRUE,
  );

  $form['oid'] = array(
    '#type' => 'hidden',
    '#value' => $offerid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save comment'),
    '#prefix' => '<br>',
  );
  return $form;
}
/**
 * CES Offer Comment add form submit handler. Saves with uid, time created.
 */
function ces_offercomment_add_form_submit($form, &$form_state) {
  global $user;
  $form_state['values']['uid'] = $user->uid;
  $form_state['values']['created'] = REQUEST_TIME;
  $ces_offercomment_submission = (object) $form_state['values'];
  $offercomment = entity_get_controller('ces_offercomment')->save($ces_offercomment_submission);
  drupal_set_message(t('Your comment has been successfully saved.'));
  $form_state['redirect'] = "ces/bank/exchange/offercomment/$offercomment->oid/view";
}

/**
 * Implements hook_token_info().
 */
function ces_offerswants_token_info() {
  return array(
    'types' => array(
      'offer' => array(
        'name' => t('Offer'),
        'description' => t('Tokens for offer.'),
      ),
      'notify' => array(
        'name'  => t('Notify'),
        'description' => t('Tokens for user notify.'),
      ),
    ),
    'tokens' => array(
      'offer' => array(
        'id' => array(
          'name'   => t('Id of offer'),
          'description' => t('The id of offer.'),
        ),
        'title' => array(
          'name' => t('Title'),
          'description' => t('Title of offer.'),
        ),
      ),
      'notify' => array(
        'body' => array(
          'name' => t('Body of User notify'),
          'description' => t('Body of User notify.'),
        ),
        'user' => array(
          'name' => t('Account user'),
          'description' => t('Account user.'),
          'type' => 'user',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function ces_offerswants_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'offer' && !empty($data['offer'])) {
    $offer = $data['offer'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'title':
          $replacements[$original] = $sanitize ? check_plain($offer->title) : $offer->title;
          break;

        case 'id':
          $replacements[$original] = $sanitize ? check_plain($offer['id']) : $offer['id'];
          break;
      }
    }
  }
  if ($type == 'notify' && !empty($data['notify'])) {
    $notify = $data['notify'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'body':
          $replacements[$original] = $sanitize ? check_plain($notify['body']) : $notify['body'];
          break;

        case 'user':
          $replacements[$original] = $sanitize ? check_plain($notify['user']) : $notify['user'];
          break;
      }
    }
    if ($user_tokens = token_find_with_prefix($tokens, 'user')) {
      $uid = $notify['user'];
      $replacements += token_generate('user', $user_tokens, array('user' => user_load($uid)), $options);
    }
  }
  return $replacements;
}

/**
 * Implements hook_image_default_styles().
 */
function ces_offerswants_image_default_styles() {
  $styles = array();
  $styles['ces_offerswants_image_style'] = array();
  $styles['ces_offerswants_image_style']['effects'] = array(
    array(
      'name' => 'image_scale',
      'data' => array(
        'width' => 280,
        'upscale' => 0,
      ),
      'weight' => 0,
    ),
  );
  return $styles;
}
/**
 * Implements hook_image_style_save().
 *
 * Just in case the user changes the name of the image style provided.
 */
function ces_offerswants_image_style_save($style) {
  if (isset($style['old_name']) && $style['old_name'] == variable_get('ces_offerswants_image_style_name', 'ces_offerswants_image_style')) {
    variable_set('ces_offerswants_image_style_name', $style['name']);
  }
}
/**
 * Implements hook_image_style_delete().
 *
 * Just in case the user deletes image style provided.
 *
 * @see image_example_style_save()
 */
function ces_offerswants_image_style_delete($style) {
  if (isset($style['old_name']) && $style['old_name'] == variable_get('ces_offerswants_image_style_name', 'ces_offerswants_image_style')) {
    variable_set('ces_offerswants_image_style_name', $style['name']);
  }
}
/** @} */
