<?php
/**
 * @file
 * Tests the functionality offers and wants module.
 */

/**
 * @defgroup ces_import4ces_tests Tests from offerswants
 * @ingroup ces_offerswants
 * @{
 * Tests the functionality offers and wants module.
 */

/**
 * Implements DrupalWebTestCase.
 */
class CesOffersWantsTestCase extends DrupalWebTestCase {

  /**
   * @var user
   * The global administrator.
   */
  protected $globalAdminUser;

  /**
   * @var exchange
   * First exchange properties.
   */
  protected $exchange1;

  /**
   * @var $admin1
   * Administrator user for exchange 1.
   */
  protected $admin1;

  /**
   * @var $account11;
   * First account from exchange 1.
   */
  protected $account11;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'ICES offerswants',
      'description' => 'Test ICES Offers Wants main features.',
      'group' => 'ICES',
    );
  }

  /**
   * Setup CES modules, the admin user, configures blocks and user preferences.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array(
      'ces_bank',
      'ces_blog',
      'ces_message',
      'ces_offerswants',
      'ces_summaryblock',
      'ces_user',
    ));
    $bank = new CesBank();
    $this->globalAdminUser = $this->drupalCreateUser(array(
      'administer blocks',
      'access administration pages',
      'administer users',
    ));
    $this->drupalLogin($this->globalAdminUser);
    // Setup blocks.
    $edit = array();
    $edit['blocks[ces_user_ces_user_links][region]'] = 'footer';
    $edit['blocks[ces_user_ces_user_register][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    // Setup users.
    $edit = array();
    $edit['user_email_verification'] = FALSE;
    $this->drupalPost('admin/config/people/accounts', $edit,
      t('Save configuration'));
    $permission = array(
      'permission' => CesBankPermission::PERMISSION_ADMIN,
      'object' => 'global',
      'objectid' => 0,
      'scope' => 'user',
      'scopeid' => $this->globalAdminUser->uid,
    );
    $bank->createPermission($permission);
    $this->drupalLogout();
  }

  /**
   * This function performs all tests.
   *
   * Since we have to perform heavy operations (create and activate exchanges,
   * accounts, etc) before we can actually test critical features we join all in
   * one test function to save resources.
   */
  protected function testAll() {
    $this->createExchanges();
    $this->createAccounts();
    $this->crudOffersWants();
  }

  /**
   * Creates exchanges.
   */
  protected function createExchanges() {
    // Create first exchange.
    $this->admin1 = (object) array(
      'name' => 'testadmin',
      'mail' => 'test-ces@integralces.net',
      'pass_raw' => 'integralces',
      'firstname' => 'Admin',
      'surname' => 'Test Surname',
      'address' => 'Major square',
      'town' => 'Manresa',
      'postcode' => '08241',
      'phonemobile' => '7777777',
      'phonework' => '88888888',
      'phonehome' => '99999999',
      'website' => 'http://www.integralces.net',
    );
    $this->exchange1 = array(
      'code' => 'TEST',
      'shortname' => 'Test shortname',
      'fullname' => 'Test fullname',
      'website' => 'http://abonahora.wordpress.com',
      'country' => 'ES',
      'region' => 'Bages',
      'town' => 'Manresa',
      'map' => 'http://maps.google.com/?ll=41.723796,1.832142&spn=0.083663,0.145912&hnear=Manresa,+Province+of+Barcelona,+Catalonia,+Spain&t=m&z',
      'currencysymbol' => 'Â¿',
      'currencyname' => 'hora',
      'currenciesname' => 'hores',
      'currencyvalue' => '1.0',
      'currencyscale' => '2',
      'registration_offers' => '1',
      'registration_wants' => '1',
    );
    $this->createExchange(array_merge($this->exchange1,
        $this->accountRecord((array) $this->admin1)));
    $this->activateExchange($this->exchange1);
  }

  /**
   * Creates three accounts.
   */
  protected function createAccounts() {
    $this->account11 = array(
      'exchange' => $this->exchange1,
      'account' => array(
        'name' => 'account11',
        'mail' => 'account11@integralces.net',
        'pass_raw' => 'integralces',
        'firstname' => 'John',
        'surname' => 'Smith',
        'address' => 'Main street 68',
        'town' => 'Manresa',
        'postcode' => '08241',
        'phonemobile' => '123456789',
        'phonework' => '987654321',
        'phonehome' => '135792468',
        'website' => 'http://www.integralces.net',
      ),
      'bankaccount' => array(
        'kind' => '0',
      ),
      'offer' => array(
        array(
          'title' => 'First test offer',
          'body' => 'This is the first test offer from John Smith account.',
          'rate' => '0.35',
          'keywords' => 'test',
        ),
      ),
      'want' => array(
        array(
          'title' => 'First test want',
          'body' => 'This is the first test want from John Smith account.',
          'keywords' => 'test',
        ),
      ),
    );
    $this->createAccount($this->account11);
    $this->activateAccount($this->account11, $this->admin1, 1);
  }

  /**
   * Helper function.
   * @return array
   *   User account form array with proper keys.
   */
  protected function accountRecord($record) {
    $ret = array(
      'name' => $record['name'],
      'mail' => $record['mail'],
      'pass[pass1]' => $record['pass_raw'],
      'pass[pass2]' => $record['pass_raw'],
      'ces_firstname[und][0][value]' => $record['firstname'],
      'ces_surname[und][0][value]' => $record['surname'],
      'ces_address[und][0][value]' => $record['address'],
      'ces_town[und][0][value]' => $record['town'],
      'ces_postcode[und][0][value]' => $record['postcode'],
      'ces_phonemobile[und][0][value]' => $record['phonemobile'],
      'ces_phonework[und][0][value]' => $record['phonework'],
      'ces_phonehome[und][0][value]' => $record['phonehome'],
      'ces_website[und][0][value]' => $record['website'],
    );
    return $ret;
  }

  /**
   * Create a new exchange request.
   */
  protected function createExchange($record) {
    $this->drupalGet('');
    $this->clickLink(t('New exchange'));
    $this->assertText(t('General'));
    $this->assertText(t('Administrator'));
    $this->assertText(t('Location'));
    $this->assertText(t('Currency'));
    $this->assertText(t('Members'));
    $this->drupalPost(NULL, $record, t('Create exchange'));
    $this->assertRaw(t('Exchange %code successfully created.',
        array('%code' => $record['code'])));
  }

  /**
   * Activate created exchange.
   */
  protected function activateExchange($record) {
    $this->drupalLogin($this->globalAdminUser);
    $this->drupalGet('ces/admin/ces');
    $this->clickLink($record['code'] . ' - ' . $record['fullname']);
    $this->assertFieldByName('code', $record['code']);
    $this->assertFieldByName('fullname', $record['fullname']);
    $this->drupalPost(NULL, array(), t('Activate exchange'));
    $this->assertRaw(t('Exchange %code successfully activated.',
        array('%code' => $record['code'])));
    $this->assertText(t('Limits'));
    $this->drupalLogout();
  }

  /**
   * Activate a requested account.
   *
   * @param array $record
   *   The account record.
   * @param object $admin
   *   The exchange admin user.
   * @param int $index
   *   The index of this user in the ces/admin/account page, in order to click
   *   the proper 'Edit' link.
   */
  protected function activateAccount($record, $admin, $index) {
    // Login exchange admin.
    $this->drupalLogin($admin);
    // Go to accounts admin page.
    $this->drupalGet('ces/admin/account');
    $this->assertText(t('Hidden'));
    $this->clickLink(t('Edit'), $index);
    $this->drupalPost(NULL, array('state' => '1'), t('Save'));
    $this->drupalLogout();
  }

  /**
   * Create a new user request.
   *
   * @param array $record
   *   associative array with entries:
   *   - exchange: associative array with entries
   *     - country
   *     - fullname
   *   - account: associative array with entries:
   *     - name
   *     - mail
   *     - firstname
   *     - surname
   *     - address
   *     - town
   *     - postcode
   *     - phonemobile
   *     - phonework
   *     - phonehome
   *     - website
   *   - bankaccount: associative array with entries:
   *     - kind: type of account. Options are 0 (Individual), 1 (Shared),
   *             2 (Organization), 3 (Company), 4 (Public).
   *   - offer: array with zero or more entries. Each of them is an associative
   *   array with entries:
   *     - title
   *     - body
   *     - rate
   *     - keywords
   *   - want: array with zero or more entries. Each of them is an associative
   *   array with entries:
   *     - title
   *     - body
   *     - keywords
   */
  protected function createAccount($record) {
    // Choose country from first page.
    $this->drupalGet('');
    $country = array(
      'country' => $record['exchange']['country'],
    );
    $this->drupalPost(NULL, $country, t('Register'));
    // Choose exchange.
    $this->clickLink($record['exchange']['fullname']);
    // User account. Change field names.
    $account = $this->accountRecord($record['account']);
    $this->drupalPost(NULL, $account, t('Next >>'));
    // CesBank account, offers and wants.
    $offers = 0;
    $wants = 0;
    $edit = $record['bankaccount'];
    while ($edit !== FALSE) {
      if ($offers < count($record['offer'])) {
        $op = t('Add offer >>');
        $this->drupalPost(NULL, $edit, $op);
        // Offer.
        $offer = $record['offer'][$offers];
        $edit = array();
        $edit['offers[' . $offers . '][title]'] = $offer['title'];
        $edit['offers[' . $offers . '][body]'] = $offer['body'];
        $edit['offers[' . $offers . '][ces_offer_rate][und][0][value]'] = $offer['rate'];
        $edit['offers[' . $offers . '][keywords]'] = $offer['keywords'];
        $offers++;
      }
      elseif ($wants < count($record['want'])) {
        $op = t('Add want >>');
        $this->drupalPost(NULL, $edit, $op);
        // Want.
        $want = $record['want'][$wants];
        $edit = array();
        $edit['wants[' . $wants . '][title]'] = $want['title'];
        $edit['wants[' . $wants . '][body]'] = $want['body'];
        $edit['wants[' . $wants . '][keywords]'] = $want['keywords'];
        $wants++;
      }
      else {
        $op = t('Create new account');
        $this->drupalPost(NULL, $edit, $op);
        $edit = FALSE;
      }
    }
  }

  /**
   * Create, update and delete offers and wants.
   */
  protected function crudOffersWants() {
    $this->drupalLogin($this->admin1);
    $record_category = array(
      'title' => 'categoryTest Offers',
      'description' => 'Test Category Offer',
      'context' => '1',
    );
    $this->addCategory($record_category);
    $record_category = array(
      'title' => 'categoryTest Wants',
      'description' => 'Test Category Want',
      'context' => '2',
    );
    $this->addCategory($record_category);
    $record_category = array(
      'title' => 'categoryTest Both',
      'description' => 'Test Category Both',
      'context' => '3',
    );
    $this->addCategory($record_category);
    $this->addOffer();
    $this->modifyOffer();
    $this->deleteOffer();
    $this->addWant();
    $this->modifyWant();
    $this->deleteWant();
    $this->modifyCategory($record_category);
    $this->delCategory();
    $this->drupalLogout();
  }

  /**
   * Add category.
   */
  protected function addCategory($record_category) {
    $this->drupalGet('');
    $this->clickLink(t('Administration'));
    $this->clickLink(t('Edit categories'));
    $this->clickLink(t('Add category'));
    $this->drupalPost(NULL, $record_category, t('Save'));
    $this->clickLink(t('List categories'));
    $this->assertText($record_category['title']);
  }

  /**
   * Modify category.
   */
  protected function modifyCategory($record_category) {
    $this->drupalGet('');
    $this->clickLink(t('Administration'));
    $this->clickLink(t('Edit categories'));
    $this->clickLink(t('Edit'));
    $this->drupalPost(NULL, $record_category, t('Save'));
    $this->clickLink(t('List categories'));
    $this->assertText($record_category['title']);
  }

  /**
   * Delete category.
   */
  protected function delCategory() {
    $this->drupalGet('');
    $this->clickLink(t('Administration'));
    $this->clickLink(t('Edit categories'));
    $this->clickLink(t('Delete'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertText(t('has been deleted'));
  }

  /**
   * Check add offer.
   *
   * @todo Test image upload
   */
  protected function addOffer() {
    $rpath = realpath('sites/all/modules/ces/ces_testing/files/test.png');

    $record_offer = array(
      'title' => 'First test offer',
      'body' => 'This is the first test offer from John Smith account.',
      'ces_offer_rate[und][0][value]' => '1.50',
      'keywords' => 'test keyword',
      'category' => '2',
      'expire[day]' => date("d"),
      'expire[month]' => date("m"),
      'expire[year]' => (date("Y") + 1),
    );

    // Create an offer.
    $this->drupalGet('');
    $this->clickLink(t('My account'));
    $this->clickLink(t('My offers'));
    $this->clickLink(t('Add offer'));
    $this->assertText(t('My offers'));
    $this->assertText(t('Title'));
    $this->assertText(t('Description'));
    $this->assertText(t('keywords'));
    $this->assertText(t('Rate'));
    $this->assertText(t('Image'));
    $this->assertText(t('Valid until'));
    $this->assertText(t('Hide'));
    $this->drupalPost(NULL, $record_offer, t('Save'));
    $this->assertText($record_offer['title']);
    $this->assertText($record_offer['body']);
    $this->assertText($record_offer['ces_offer_rate[und][0][value]']);
    $this->assertText($record_offer['keywords']);
  }

  /**
   * Check modify offer.
   */
  protected function modifyOffer() {
    $record_offer = array(
      'title' => 'Test offer modify',
      'body' => 'This is the modify offer',
      'ces_offer_rate[und][0][value]' => '2.50',
      'keywords' => 'test keyword mod',
      'expire[day]' => date("d"),
      'expire[month]' => date("m"),
      'expire[year]' => (date("Y") + 1),
    );

    // Edit an offer.
    $this->drupalGet('');
    $this->clickLink(t('My account'));
    $this->clickLink(t('My offers'));
    $this->clickLink(t('Edit'));
    $this->assertText(t('My offers'));
    $this->assertText(t('Title'));
    $this->assertText(t('Description'));
    $this->assertText(t('keywords'));
    $this->assertText(t('Rate'));
    $this->assertText(t('Image'));
    $this->assertText(t('Valid until'));
    $this->assertText(t('Hide'));
    $this->drupalPost(NULL, $record_offer, t('Save'));
    $this->assertText($record_offer['title']);
    $this->assertText($record_offer['body']);
    $this->assertText($record_offer['ces_offer_rate[und][0][value]']);
    $this->assertText($record_offer['keywords']);
  }

  /**
   * Check delete offer.
   */
  protected function deleteOffer() {
    $this->drupalGet('');
    $this->clickLink(t('My account'));
    $this->clickLink(t('My offers'));
    $this->clickLink(t('Delete'));
    $this->assertText(t('Are you sure you want to delete the offer'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertText(t('has been deleted'));
  }

  /**
   * Check add want.
   */
  protected function addWant() {
    $rpath = realpath('sites/all/modules/ces/ces_testing/files/test.png');
    $record_want = array(
      'title' => 'First test want',
      'body' => 'This is the first test want from John Smith account.',
      'keywords' => 'test keyword',
      'category' => '3',
      'expire[day]' => date("d"),
      'expire[month]' => date("m"),
      'expire[year]' => (date("Y") + 1),
    );

    // Create a want.
    $this->drupalGet('');
    $this->clickLink(t('My account'));
    $this->clickLink(t('My wants'));
    $this->clickLink(t('Add want'));
    $this->assertText(t('My wants'));
    $this->assertText(t('Title'));
    $this->assertText(t('Description'));
    $this->assertText(t('keywords'));
    $this->assertText(t('Hide'));
    $this->drupalPost(NULL, $record_want, t('Save'));
    $this->assertText($record_want['title']);
    $this->assertText($record_want['body']);
    $this->assertText($record_want['keywords']);
  }

  /**
   * Check modify want.
   */
  protected function modifyWant() {
    $record_want = array(
      'title' => 'Test want modify',
      'body' => 'This is the modify want',
      'keywords' => 'test keyword mod',
      'expire[day]' => date("d"),
      'expire[month]' => date("m"),
      'expire[year]' => (date("Y") + 1),
    );

    $this->drupalGet('');
    $this->clickLink(t('My account'));
    $this->clickLink(t('My wants'));
    $this->clickLink(t('Edit'));
    $this->assertText(t('My wants'));
    $this->assertText(t('Title'));
    $this->assertText(t('Description'));
    $this->assertText(t('keywords'));
    $this->assertText(t('Valid until'));
    $this->assertText(t('Hide'));
    $this->drupalPost(NULL, $record_want, t('Save'));
    $this->assertText($record_want['title']);
    $this->assertText($record_want['body']);
    $this->assertText($record_want['keywords']);
  }

  /**
   * Check delete Want.
   */
  protected function deleteWant() {
    $this->drupalGet('');
    $this->clickLink(t('My account'));
    $this->clickLink(t('My wants'));
    $this->clickLink(t('Delete'));
    $this->assertText(t('Are you sure you want to delete the want'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertText(t('has been deleted'));
  }

}
/** @} */
