<?php
/**
 * @file
 * Drupal hooks for this module.
 */

define('CES_USER_NEW_EXCHANGE_URL', 'ces_user_new_exchange_url');
define('CES_USER_DOCUMENTATION_URL', 'ces_user_documentation_url');
define('CES_USER_DEVELOPERS_URL', 'ces_user_developers_url');
define('CES_USER_DONATE_URL', 'ces_user_donate_url');
define('CES_USER_TERMS_OF_SERVICE_URL', 'ces_user_terms_of_service_url');
define('CES_USER_ABOUT_URL', 'ces_user_about_url');

define('CES_USER_NEW_EXCHANGE_URL_DEF', 'ces/bank/exchange/new?lang=@langcode');
define('CES_USER_DOCUMENTATION_URL_DEF', 'http://docs.integrales.net');
define('CES_USER_DEVELOPERS_URL_DEF', 'https://www.drupal.org/project/ices');
define('CES_USER_DONATE_URL_DEF', 'https://www.coopfunding.net/campaigns/integralces');
define('CES_USER_TERMS_OF_SERVICE_URL_DEF', '');
define('CES_USER_ABOUT_URL_DEF', '');

/**
 * @defgroup ces_user Ces User
 * @ingroup ices
 * @{
 * Ces User module
 */

/**
 * Special permissions access callback for CES user. 
 * 
 * True for exhange and user admins.
 */
function ces_user_access($user_edit) {
  global $user;

  if (user_edit_access($user_edit)) {
    return TRUE;
  }

  // Check actual user is admin of actual exchange.
  if (!ces_bank_access('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE)) {
    return FALSE;
  }

  // Check user to edit is not admin of Drupal.
  if (user_access('administer users', $user_edit)) {
    return FALSE;
  }

  // Check user to edit is from actual exchange.
  $bank = new CesBank();
  $accounts = $bank->getUserAccounts($user_edit->uid);
  $exchange = ces_bank_get_current_exchange();
  $current_exchange = $exchange['id'];
  foreach ($accounts as $account) {
    if ($account['exchange'] == $current_exchange) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu(). 
 * 
 * Access to config/user-interface/ces_user for site config admins.
 */
function ces_user_menu() {
  $menu = array();
  $menu['ces'] = array(
    'title' => 'Welcome to Integral CES',
    'access callback' => TRUE,
    'page callback' => 'ces_user_main_page',
    'type' => MENU_CALLBACK,
  );
  $menu['ces/user/registered/%'] = array(
    'title' => 'Successfuly registered to Integral CES',
    'access callback' => TRUE,
    'page callback' => 'ces_user_registered',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $menu['admin/config/user-interface/ces_user'] = array(
    'title' => 'ICES user settings',
    'description' => 'Change global settings related to IntegralCES user module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_user_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $menu;
}
/**
 * Implements hook_menu_alter().
 */
function ces_user_menu_alter(&$menu) {
  // Gain control over registration page.
  $menu['user/register']['page arguments'] = array('ces_user_register_form');

  // Admin exchange can edit user profile.
  $menu['user/%user/edit']['access callback'] = 'ces_user_access';

}
/**
 * Returns the full name for given account, or the current one if NULL.
 */
function ces_user_get_name($account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = user_load($user->uid);
  }
  $items = field_get_items('user', $account, 'ces_firstname');
  $userfullname = '';
  if (!empty($items)) {
    $item = reset($items);
    $userfullname = $item['safe_value'] . ' ';
  }
  $items = field_get_items('user', $account, 'ces_surname');
  if (!empty($items)) {
    $item = reset($items);
    $userfullname .= $item['safe_value'];
  }
  if (empty($userfullname)) {
    $userfullname = $account->name;
  }
  return trim($userfullname);
}
/**
 * Returns the address for given account, or the current one if NULL.
 */
function ces_user_get_full_address($account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = user_load($user->uid);
  }
  $items = field_get_items('user', $account, 'ces_address');
  $address = '';
  if (!empty($items)) {
    $item = reset($items);
    $address = $item['safe_value'];
  }
  $items = field_get_items('user', $account, 'ces_postcode');
  if (!empty($items)) {
    $item = reset($items);
    if ($address != '') {
      $address .= ', ';
    }
    $address .= $item['safe_value'];
  }
  $items = field_get_items('user', $account, 'ces_town');
  if (!empty($items)) {
    $item = reset($items);
    if ($address != '') {
      $address .= ', ';
    }
    $address .= $item['safe_value'];
  }
  return $address;
}
/**
 * Returns the main phone number for given account, or the current one if NULL.
 */
function ces_user_get_main_phone($account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = user_load($user->uid);
  }
  $order = array('ces_phonemobile', 'ces_phonework', 'ces_phonehome');
  foreach ($order as $name) {
    $items = field_get_items('user', $account, $name);
    if (!empty($items)) {
      $item = reset($items);
      return $item['safe_value'];
    }
  }
  return '';
}
/**
 * Tweaked user register form.
 */
function ces_user_register_form($form, &$form_state) {
  if (empty($form_state['page']) || $form_state['page'] == 'account') {
    $form = user_register_form($form, $form_state);
  }
  else {
    $form = array();
    $form['actions'] = array(
      '#weight' => 10000,
    );
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Create new account'),
      '#weight' => 1000,
    );
  }
  $form['actions']['submit']['#submit'] = array('ces_user_register_save_values', 'ces_user_register_submit');
  return $form;
}
/**
 * Save values in user register form account page.
 */
function ces_user_register_save_values($form, &$form_state) {
  if (!isset($form_state['page']) || $form_state['page'] == 'account') {
    $form_state['page_values']['account'] = $form_state['values'];
  }
}
/**
 * Submit user register form.
 */
function ces_user_register_submit($form, &$form_state) {
  module_load_include('module', 'user');
  $form_state['values'] = $form_state['page_values']['account'];
  $form = user_register_form($form, $form_state);
  user_register_submit($form, $form_state);
  $form_state['redirect'] = 'ces/user/registered/' . $form_state['page_values']['bankaccount']['exchange'];
}
/**
 * Implements hook_form_alter().
 * 
 * Applies to ces_user_register_form & user_profile_form forms.
 */
function ces_user_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'ces_user_register_form' || $form_id == 'user_profile_form') {
    if (empty($form_state['page']) || $form_state['page'] == 'account') {
      // Move all ces fields to account fieldset.
      foreach ($form as $key => $field) {
        if (strlen($key) > 4 && substr($key, 0, 4) == 'ces_') {
          _ces_user_translate_field($field);
          $form['account'][$key] = $field;
          unset($form[$key]);
        }
      }
      $form['account']['picture'] = $form['picture'];
      unset($form['picture']);
      // Put default values in form elements (Drupal doesn't make it because we
      // are registering).
      if (isset($form_state['values'])) {
        _ces_user_set_form_values($form['account'], $form_state['values']);
      }
      // Set up weights.
      $form['account']['name']['#weight'] = -10;
      $form['account']['current_pass']['#weight'] = -5;
      $form['account']['pass']['#weight'] = 0;
      $form['account']['status']['#weight'] = 60;
      $form['account']['roles']['#weight'] = 65;
    }
  }
  elseif ($form_id == 'user_login_block') {
    // Override $form['links'].
    $items = array();
    $items[] = l(t('Forgot password?'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
    $form['actions']['#weight'] = 90;
    $form['links'] = array(
      '#markup' => theme('item_list', array('items' => $items)),
      '#weight' => 100,
    );
    $form['end'] = array(
      '#markup' => '<div class="clearfix"></div>',
      '#weight' => 200,
    );
  }
}
/**
 * Helper function. Translates label and description of attached fields.
 */
function _ces_user_translate_field(&$field) {
  // This function is a hack to translate the label and description of attached
  // fields to the user entity by this module. The "best practice" way to do it
  // would be to use the i18n_field module, but I think it isn't worth to depend
  // on i18n just to translate labels and descriptions of programmatically added
  // fields.
  if (isset($field['#title'])) {
    // Yes, I know that only string literals should be passed to t()...
    $field['#title'] = t($field['#title']);
  }
  if (isset($field['#description'])) {
    $field['#description'] = t($field['#description']);
  }
  $children = element_children($field);
  if (is_array($children)) {
    foreach ($children as $child) {
      _ces_user_translate_field($field[$child]);
    }
  }
}
/**
 * Helper function. Sets default values to form elements.
 */
function _ces_user_set_form_values(&$elements, $values) {
  foreach ($values as $key => $value) {
    if (isset($elements[$key]) && is_array($elements[$key])) {
      if (is_array($value)) {
        // Call recursively.
        _ces_user_set_form_values($elements[$key], $value);
      }
      else {
        $elements[$key]['#default_value'] = $value;
      }
    }
  }
}
/**
 * User view.
 */
function ces_user_user_view($account, $view_mode, $langcode) {
  // Set fields to be rendered with user profile item theme.
  $account->content['account'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'user-profile-account-items',
      ),
    ),
  );
  foreach ($account->content as $key => $item) {
    if (substr($key, 0, 4) == 'ces_') {
      $item['#theme'] = 'user_profile_item';
      if (isset($item[0])) {
        $item['#markup'] = $item[0]['#markup'];
      }
      _ces_user_translate_field($item);
      $account->content['account'][$key] = $item;
      unset($account->content[$key]);
    }
  }
  $account->content['account']['ces_fullname'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3 class="user-profile-ces-fullname">',
    '#suffix' => '</h3>',
    '#markup' => ces_user_get_name($account),
    'weight' => 0,
  );
  $account->content['account']['ces_fulladdress'] = array(
    '#theme' => 'user_profile_item',
    '#title' => t('Address'),
    '#markup' => ces_user_get_full_address($account),
    '#weight' => 15,
  );
  $account->content['account']['ces_email'] = array(
    '#theme' => 'user_profile_item',
    '#title' => t('Email'),
    '#markup' => $account->mail,
    '#weight' => 25,
  );
}
/**
 * Implements hook_block_info().
 */
function ces_user_block_info() {
  $block = array(
    'ces_user_register' => array(
      'info' => t('CES register'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
    ),
    'ces_user_links' => array(
      'info' => t('CES front links'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
    ),
  );
  return $block;
}
/**
 * Implements hook_block_view().
 */
function ces_user_block_view($delta = '') {
  global $user;
  $block = array();
  $block['subject'] = '';
  $content = array();
  if ($delta == 'ces_user_register') {
    if (!$user->uid) {
      $content = drupal_get_form('ces_user_register_block_form');
    }
  }
  elseif ($delta == 'ces_user_links') {
    if (!$user->uid) {
      $items = array();
      _ces_user_add_user_link($items, t('New exchange'), variable_get(CES_USER_NEW_EXCHANGE_URL, CES_USER_NEW_EXCHANGE_URL_DEF));
      _ces_user_add_user_link($items, t('Documentation'), variable_get(CES_USER_DOCUMENTATION_URL, CES_USER_DOCUMENTATION_URL_DEF));
      _ces_user_add_user_link($items, t('Developers'), variable_get(CES_USER_DEVELOPERS_URL, CES_USER_DEVELOPERS_URL_DEF));
      _ces_user_add_user_link($items, t('Donate'), variable_get(CES_USER_DONATE_URL, CES_USER_DONATE_URL_DEF));
      _ces_user_add_user_link($items, t('Terms of service'), variable_get(CES_USER_TERMS_OF_SERVICE_URL, CES_USER_TERMS_OF_SERVICE_URL_DEF));
      _ces_user_add_user_link($items, t('About'), variable_get(CES_USER_ABOUT_URL, CES_USER_ABOUT_URL_DEF));
      $content = array(
        '#theme' => 'item_list',
        '#attributes' => array('class' => array('front-links')),
        '#items' => $items,
      );
    }
  }
  $block['content'] = $content;
  return $block;
}
/**
 * Helper.
 */
function _ces_user_add_user_link(&$items, $text, $url) {
  if ($url) {
    global $language;
    $url = format_string($url, array('@langcode' => $language->language));
    $url = drupal_parse_url($url);
    $items[] = l($text, $url['path'], $url);
  }
}
/**
 * Form for choosing country on registering.
 */
function ces_user_register_block_form($form, &$form_state) {
  module_load_include('module', 'ces_bank');
  $options = ces_bank_country_get_list();
  array_unshift($options, t('Select country...'));
  $form = array(
    'text' => array(
      '#type' => 'container',
      'p1' => array(
        '#markup' => t('New to IntegralCES?'),
        '#prefix' => '<p><strong>',
        '#suffix' => '</strong></p>',
      ),
      'p2' => array(
        '#markup' => t('Find an exchange near you and start using social money:'),
      ),
      'country' => array(
        '#type' => 'select',
        '#options' => $options,
        '#attributes' => array('onChange' => array('this.form.submit()')),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Register'),
        '#attributes' => array('style' => array('display: none;')),
      ),
      '#attributes' => array(),
    ),
  );
  return $form;
}
/**
 * Submit function.
 */
function ces_user_register_block_form_submit($form, &$form_state) {
  drupal_goto('ces/bank/exchange/list/' . $form_state['values']['country']);
}
/**
 * Menu callback.
 */
function ces_user_main_page() {
  global $user;
  if ($user->uid) {
    drupal_goto('ces/bank/exchange/blog');
  }
  return array(
    'welcome' => array(
      '#prefix' => '<p class="front-welcome">',
      '#suffix' => '</p>',
      '#markup' => t('Welcome to <strong>Integral Community Exchange System</strong>,'),
    ),
    'intro' => array(
      '#prefix' => '<p class="front-intro">',
      '#suffix' => '</p>',
      '#markup' => t('an open source platform featuring social currencies management for communities.'),
    ),
    'features' => array(
      '#theme' => 'item_list',
      '#items' => array(
        'local' => t('Boost local economy, return it to human scale.'),
        'eco' => t('Help the environment, lower contamination.'),
        'speculation' => t('Gain the control over money, prevent speculation and abuse.'),
        'alternative' => t('Create a solid alternative to the current financial system.'),
        'community' => t('Empower your community. Have fun playing with social currency.'),
      ),
      '#attributes' => array('class' => array('front-list')),
    ),
  );
}
/**
 * Implements hook_token_info().
 */
function ces_user_token_info() {
  return array(
    'tokens' => array(
      'user' => array(
        'fullname' => array(
          'name' => t('Full user name'),
          'description' => t('The full real user name'),
        ),
        'mainphone' => array(
          'name' => t('Main user telephone'),
          'description' => t('The main user telephone'),
        ),
      ),
    ),
  );
}
/**
 * Implements hook_tokens().
 */
function ces_user_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if ($type == 'user' && !empty($data['user'])) {
    $user = $data['user'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'fullname':
          $fullname = ces_bank_get_full_username($user);
          $replacements[$original] = $sanitize ? check_plain($fullname) : $fullname;
          break;

        case 'mainphone':
          $mainphone = ces_user_get_main_phone($user);
          $replacements[$original] = $sanitize ? check_plain($mainphone) : $mainphone;
          break;
      }
    }
  }
  return $replacements;
}
/**
 * End of registration page callback.
 */
function ces_user_registered($exchange_id) {
  $exchange = ces_bank_get_exchange($exchange_id);
  $admin = user_load($exchange['admin']);
  return array(
    'success' => array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => t('You have successfully registered to the exchange %name in the Integral Community Exchange System.',
        array('%name' => $exchange['name'])),
    ),
    'message' => array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => t('Before you can start using the system, the administration of your exchange must authorize your account. You will receive an email when your account is activated with further instructions. If you have no news in these comming days, contact your exchange administration at %mail.',
        array('%mail' => $admin->mail)),
    ),
    'message2' => array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => t('See you soon!'),
    ),
  );
}

/**
 * Implements hook_admin().
 */
function ces_user_admin() {
  $form = array();
  $form[CES_USER_NEW_EXCHANGE_URL] = array(
    '#type' => 'textfield',
    '#title' => t('New exchange URL'),
    '#default_value' => variable_get(CES_USER_NEW_EXCHANGE_URL, CES_USER_NEW_EXCHANGE_URL_DEF),
    '#description' => t('The URL of the new exchange form or intermediate custom page. You can use the placeholder @langcode for the current language ISO code. If you let it empty the link will be hidden.'),
  );
  $form[CES_USER_DOCUMENTATION_URL] = array(
    '#type' => 'textfield',
    '#title' => t('Documentation URL'),
    '#default_value' => variable_get(CES_USER_DOCUMENTATION_URL, CES_USER_DOCUMENTATION_URL_DEF),
    '#description' => t('The url of the general documentation page.'),
  );
  $form[CES_USER_DEVELOPERS_URL] = array(
    '#type' => 'textfield',
    '#title' => t('Developers URL'),
    '#default_value' => variable_get(CES_USER_DEVELOPERS_URL, CES_USER_DEVELOPERS_URL_DEF),
    '#description' => t('The url of the IntegralCES develop site.'),
  );
  $form[CES_USER_DONATE_URL] = array(
    '#type' => 'textfield',
    '#title' => t('Donate URL'),
    '#default_value' => variable_get(CES_USER_DONATE_URL, CES_USER_DONATE_URL_DEF),
    '#description' => t('The url of the donations page.'),
  );
  $form[CES_USER_TERMS_OF_SERVICE_URL] = array(
    '#type' => 'textfield',
    '#title' => t('Terms of service URL'),
    '#default_value' => variable_get(CES_USER_TERMS_OF_SERVICE_URL, CES_USER_TERMS_OF_SERVICE_URL_DEF),
    '#description' => t('The terms of service page.'),
  );
  $form[CES_USER_ABOUT_URL] = array(
    '#type' => 'textfield',
    '#title' => t('About URL'),
    '#default_value' => variable_get(CES_USER_ABOUT_URL, CES_USER_ABOUT_URL_DEF),
    '#description' => t('The about page.'),
  );
  return system_settings_form($form);
}
/** @} */
