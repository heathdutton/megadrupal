<?php
/**
 * @file
 * Implements the drupal hooks for this module.
 */

/**
 * @defgroup ces_bank Ces Bank
 * @ingroup ices
 * @{
 * Ces bank hooks module
 */

define('CES_BANK_CURRENT_ACCOUNT', 'ces_current_account');
define('CES_BANK_CURRENT_EXCHANGE', 'ces_current_exchange');

/**
 * Implements hook_help().
 */
function ces_bank_help($path, $arg) {
  switch ($path) {
    case 'ces/bank/account/sell':
      $msg  = '<p>';
      $msg .= t('Charge a sale. Select the payer account, enter a short decription and the amount of the transaction. This amount will be trasferred to your account.');
      $msg .= '</p>';
      return $msg;

    case 'ces/bank/exchange/accounts':
      $msg  = '<p>';
      $msg .= t('All users and banking accounts of your exchange.');
      $msg .= '</p>';
      return $msg;

    case 'ces/bank/exchange/otherexchanges':
      $msg = '<p>';
      $msg .= t('Balance of trade and currency value of other exchanges.');
      $msg .= '</p>';
      return $msg;

    case 'ces/bank/account/transaction':
      $msg  = '<p>';
      $msg .= t('Showing your transactions. Set the "From" and "To" dates to see a specific time range.');
      $msg .= '</p>';

    case 'ces/register/%':
      return '<p>' . t('Click on the exchange you want to join.') . '</p>';

    case 'ces/admin/account/%/adduser':
      return '<p>' .
        t('You can add users to this account.') .
        '<br />' .
        t('If you give them privileges, they can manage the account in addition to making transactions.') .
        '</p>';

  }
}
/**
 * Implements hook_theme().
 */
function ces_bank_theme() {
  return array(
    'ces_bank_exchange_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
    'ces_bank_account_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
    'ces_bank_transaction_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
    'ces_bank_limitchain_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
  );
}
/**
 * Special permissions access callback for CES banking functions.
 */
function ces_bank_access($permission, $object, $objectid, $account = NULL) {
  global $user;
  $args = func_get_args();
  if (empty($args[3])) {
    $args[3] = $user->uid;
  }
  _ces_bank_replace_current_args($args);
  if ($objectid === FALSE) {
    return FALSE;
  }

  // Check account permissions.
  if (($permission == 'admin' && $object == 'account' && $objectid) ||
    ($permission == 'view' && $object == 'account transactions' && $objectid) ||
    ($permission == 'use' && $object == 'exchange accounts' && $objectid) ||
    ($permission == 'use' && $object == 'account seller' && $objectid)) {
    if (empty($account)) {
      $account = ces_bank_get_current_account();
      $account = $account['id'];
    }
    $sql = 'SELECT id FROM {ces_accountuser} WHERE user = :uid AND account = :account AND privilege = 0';
    $result = db_query($sql, array(':uid' => $user->uid, ':account' => $account));
    if ($result->rowCount() > 0) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

  $bank = new CesBank();
  return $bank->access($args[0], $args[1], $args[2], $args[3]);

}
/**
 * Menu hook for ces_bank. Includes most CES menu functions.
 */
function ces_bank_menu() {
  $menu['ces/admin/ces'] = array(
    'title' => 'Administer CES bank',
    'description' => 'Top administer interface for CES Bank',
    'page callback' => 'ces_bank_admin_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 990,
  );
  $menu['ces/admin/ces/%/edit'] = array(
    'title' => 'Edit exchange',
    'description' => 'Top administer interface for CES Bank - Edit exchange',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'edit', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_CALLBACK,
  );
  $menu['ces/admin/ces/%/delete'] = array(
    'title' => 'Delete exchange',
    'description' => 'Top administer interface for CES Bank - Delete exchange',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_exchange_delete_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_CALLBACK,
  );
  $menu['ces/admin/ces/%/accounts'] = array(
    'title' => 'Edit accounts',
    'description' => 'Top administer interface for CES Bank - Edit accounts',
    'page callback' => 'ces_bank_accounts_admin',
    'page arguments' => array(3),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_CALLBACK,
  );
  $menu['ces/admin/ces/%/transactions'] = array(
    'title' => 'Edit transactions',
    'description' => 'Top administer interface for CES Bank - Edit transactions',
    'page callback' => 'ces_bank_transactions_admin_page',
    'page arguments' => array(3),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_CALLBACK,
  );
  // Superglobal menu (before login). Creating new exchange.
  $menu['ces/bank/exchange/new'] = array(
    'title' => 'New exchange',
    'description' => 'Create a new exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'new'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'global exchangecreator', 0),
    'type' => MENU_NORMAL_ITEM,
  );
  // Administrative menu items for the exchange administrator.
  $menu['ces/admin'] = array(
    'title' => 'Administration',
    'decription' => 'Administration interfaces',
    'page callback' => 'ces_bank_exchange_admin',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 900,
    'expanded' => TRUE,
  );
  // Accounts administration.
  $menu['ces/admin/account'] = array(
    'title' => 'Accounts',
    'description' => 'Administer accounts',
    'page callback' => 'ces_bank_accounts_admin',
    'page arguments' => array(CES_BANK_CURRENT_EXCHANGE),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 905,
    'expanded' => TRUE,
  );
  $menu['ces/admin/account/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/admin/account/new'] = array(
    'title' => 'New',
    'description' => 'New account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_form'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 1,
  );
  $menu['ces/admin/account/%ces_account/view'] = array(
    'title' => 'View',
    'description' => 'View account',
    'page callback' => 'ces_bank_account_view',
    'page arguments' => array(3),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 2,
  );
  $menu['ces/admin/account/%ces_account/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 3,
  );
  $menu['ces/admin/account/%ces_account/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_delete_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 4,
  );
  $menu['ces/admin/transaction'] = array(
    'title' => 'Transactions',
    'description' => 'Administer transactions',
    'page callback' => 'ces_bank_transactions_admin_page',
    'page arguments' => array(CES_BANK_CURRENT_EXCHANGE),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 910,
    'expanded' => TRUE,
  );
  $menu['ces/admin/transaction/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/admin/transaction/new'] = array(
    'title' => 'New',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'description' => 'Do a transaction between two accounts.',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_transaction_form',
      'new',
      CES_BANK_CURRENT_EXCHANGE,
      NULL,
      NULL,
    ),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'exchange accounts',
      CES_BANK_CURRENT_EXCHANGE,
    ),
    'weight' => 10,
  );
  $menu['ces/bank/account/sell'] = array(
    'title' => 'Enter transaction',
    'description' => 'Charge a sale to an account.',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_transaction_form', 'new',
      CES_BANK_CURRENT_EXCHANGE, CES_BANK_CURRENT_ACCOUNT, NULL,
    ),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'account seller',
      CES_BANK_CURRENT_ACCOUNT,
    ),
    'weight' => 130,
  );
  $menu['ces/bank/account/sell/simple'] = array(
    'title' => 'One transaction',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/bank/account/sell/multiple'] = array(
    'title' => 'Multiple transactions',
    'description' => 'Charge many sales to many accounts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_multipletransactions_form'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'account seller',
      CES_BANK_CURRENT_ACCOUNT,
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $menu['ces/bank/account/sell/multiple/autocomplete'] = array(
    'title' => 'Autocomplete for multiple transactions',
    'description' => 'Autocomplete for multiple transactions.',
    'page callback' => 'ces_bank_multipletransactions_form_autocomplete_callback',
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'account seller',
      CES_BANK_CURRENT_ACCOUNT,
    ),
    'type' => MENU_CALLBACK,
  );
  $menu['ces/bank/account'] = array(
    'title' => 'My account',
    'description' => 'View account details.',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_account_statement_form',
      CES_BANK_CURRENT_ACCOUNT,
    ),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'account transactions',
      CES_BANK_CURRENT_ACCOUNT,
    ),
    'expanded' => TRUE,
    'weight' => 100,
  );
  // Managing Users Account.
  $menu['ces/bank/account/%ces_account/users'] = array(
    'title' => 'Account users',
    'description' => 'Admin account users',
    'page callback' => 'ces_bank_account_users_admin',
    'page arguments' => array(NULL, 3),
    'file' => 'ces_bank.pages.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'account', 3),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 990,
  );
  $menu['ces/bank/account/%ces_account/users/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/bank/account/%ces_account/users/add'] = array(
    'title' => 'Add account users',
    'description' => 'Add user in account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_user_form', NULL, 3),
    'file' => 'ces_bank.forms.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'account', 3),
    'weight' => 4,
  );
  $menu['ces/bank/account/%user/users_account/delete'] = array(
    'title' => 'Delete account user',
    'description' => 'Delete account user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_user_delete_form', 3),
    'file' => 'ces_bank.forms.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'account', 4),
    'weight' => 4,
  );
  $menu['ces/bank/account/%user/users_account/edit'] = array(
    'title' => 'Edit account user',
    'description' => 'Edit account user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_user_form', 3),
    'file' => 'ces_bank.forms.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'account', 4),
    'weight' => 4,
  );
  $menu['ces/bank/exchange'] = array(
    'title' => 'Exchange',
    'description' => 'View exchange details',
    'page callback' => 'ces_bank_exchange_view',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange details',
      CES_BANK_CURRENT_EXCHANGE,
    ),
    'expanded' => TRUE,
    'weight' => 200,
  );
  $menu['ces/bank/exchange/accounts'] = array(
    'title' => 'Accounts',
    'description' => 'View exchange accounts list',
    'page callback' => 'ces_bank_exchange_accounts_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange accounts',
      CES_BANK_CURRENT_EXCHANGE,
    ),
    'weight' => 240,
  );
  $menu['ces/bank/exchange/accounts/list'] = array(
    'title' => 'Accounts',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/bank/exchange/accounts/otherexchanges'] = array(
    'title' => 'Other exchanges',
    'description' => 'View trade balances with other exchanges',
    'page callback' => 'ces_bank_other_exchanges_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange accounts',
      CES_BANK_CURRENT_EXCHANGE,
    ),
    'weight' => 100,
  );
  $menu['ces/bank/exchange/list/%'] = array(
    'title' => 'Exchanges in your country',
    'description' => 'List of exchanges in your country',
    'page callback' => 'ces_bank_exchange_list_page',
    'page arguments' => array(4),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'global statistics', 0),
    'type' => MENU_CALLBACK,
  );

  $menu['ces/bank/user/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange accounts',
      CES_BANK_CURRENT_EXCHANGE,
    ),
    'page callback' => 'ces_bank_user_autocomplete',
  );
  $menu['ces/admin/exchange'] = array(
    'title' => 'Edit exchange',
    'description' => 'Edit exchange',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'edit',
      CES_BANK_CURRENT_EXCHANGE,
    ),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('edit', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 910,
  );
  /* Begin limit chains */
  $menu['ces/admin/limitchain'] = array(
    'title' => 'Limits',
    'description' => 'Types of debit and credit limits for accounts.',
    'page callback' => 'ces_bank_limitchain_list_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange limitchains',
      CES_BANK_CURRENT_EXCHANGE,
    ),
  );
  $menu['ces/admin/limitchain/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/admin/limitchain/new'] = array(
    'title' => 'New',
    'description' => 'Create a new account limit.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_limitchain_form'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $menu['ces/admin/limitchain/%ces_limitchain/view'] = array(
    'title' => 'View',
    'description' => 'View account limit details.',
    'page callback' => 'ces_bank_limitchain_view',
    'page arguments' => array(3),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange limitchains',
      CES_BANK_CURRENT_EXCHANGE,
    ),
    'weight' => 2,
  );
  $menu['ces/admin/limitchain/%ces_limitchain/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit account limit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_limitchain_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('edit', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 3,
  );
  $menu['ces/admin/limitchain/%ces_limitchain/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete account limit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_limitchain_delete_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 4,
  );
  /* Begin limit chains */
  $menu['ces/admin/ces'] = array(
    'title' => 'Administer CES bank',
    'description' => 'Top administer interface for CES Bank',
    'page callback' => 'ces_bank_admin_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 990,
  );
  $menu['ces/admin/exchange/%/activate'] = array(
    'title' => 'Activate exchange',
    'description' => 'Activate exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'activate', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
  );
  // Superglobal menu (before login).
  $menu['ces/bank/exchange/new'] = array(
    'title' => 'New exchange',
    'description' => 'Create a new exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'new'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'global exchangecreator', 0),
    'type' => MENU_CALLBACK,
  );
  $menu['ces/bank/account/transaction'] = array(
    'title' => 'Account statement' ,
    'description' => 'Last transactions with this account',
    'page callback' => 'ces_bank_account_statement_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'account transactions',
      CES_BANK_CURRENT_ACCOUNT,
    ),
    'weight' => 140,
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['ces/bank/account/transaction/list'] = array(
    'title' => 'Account statement',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/bank/account/transaction/%ces_transaction/view'] = array(
    'title' => 'View',
    'page callback' => 'ces_bank_transaction_view',
    'page arguments' => array(4),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_transaction_access',
    'access arguments' => array('view', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $menu['ces/bank/account/transaction/%ces_transaction/accept'] = array(
    'title' => 'Accept',
    'description' => 'Accept transaction.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_transaction_accept_form', 4),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_transaction_access',
    'access arguments' => array('accept', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
  );
  $menu['ces/bank/account/transaction/%ces_transaction/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit transaction.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_transaction_form', 'edit', 4),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_transaction_access',
    'access arguments' => array('edit', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $menu['ces/bank/account/transaction/%ces_transaction/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete transaction.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_transaction_delete_form', 4),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_transaction_access',
    'access arguments' => array('edit', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  // Managing Users Account from exchange administrator.
  $menu['ces/admin/account/%ces_account/listusers'] = array(
    'title' => 'List users',
    'description' => 'List account users',
    'page callback' => 'ces_bank_account_users_admin',
    'page arguments' => array('administrator', 3),
    'file' => 'ces_bank.pages.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $menu['ces/admin/account/%ces_account/adduser'] = array(
    'title' => 'Add account users',
    'description' => 'Add user in account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_user_form', NULL, 3, TRUE),
    'file' => 'ces_bank.forms.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 110,
  );
  $menu['ces/admin/account/users/%ces_account/users_account/%user/delete'] = array(
    'title' => 'Delete account user',
    'description' => 'Delete account user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_user_delete_form', 6, 4, TRUE),
    'file' => 'ces_bank.forms.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 150,
  );
  $menu['ces/admin/account/users/%ces_account/users_account/%/delete_not_user'] = array(
    'title' => 'Delete account user',
    'description' => 'Delete account user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_user_delete_form', 6, 4, TRUE),
    'file' => 'ces_bank.forms.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 150,
  );
  $menu['ces/admin/account/users/%ces_account/users_account/%user/edit'] = array(
    'title' => 'Edit account user',
    'description' => 'Edit account user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_user_form', 6, 4, TRUE),
    'file' => 'ces_bank.forms.account_users.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_BANK_CURRENT_EXCHANGE),
    'weight' => 140,
  );
  return $menu;
}
/**
 * Implements hook_load().
 */
function ces_transaction_load($id = NULL) {
  if (empty($id) || !is_numeric($id)) {
    return FALSE;
  }
  $bank = new CesBank();
  $transaction = $bank->getTransaction($id);
  return $transaction;
}
/**
 * Access transaction information or use.
 */
function ces_transaction_access($permission, $transaction, $account = NULL) {
  if ($permission == 'accept') {
    if ($transaction['state'] == CesBankTransactionInterface::STATE_TRIGGERED) {
      return ces_bank_access('use', 'account buyer', $transaction['fromaccount'], $account);
    }
    return FALSE;
  }
  elseif ($permission == 'edit') {
    if ($transaction['state'] == CesBankTransactionInterface::STATE_COMMITTED ||
      $transaction['state'] == CesBankTransactionInterface::STATE_DISCARDED ||
      $transaction['state'] == CesBankTransactionInterface::STATE_REJECTED) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return ces_bank_access($permission, 'account buyer', $transaction['fromaccount'], $account)
      || ces_bank_access($permission, 'account seller', $transaction['toaccount'], $account);
  }
}
/**
 * Implements hook_load().
 */
function ces_limitchain_load($id = NULL) {
  if (empty($id) || !is_numeric($id)) {
    return FALSE;
  }
  $bank = new CesBank();
  $limitchain = $bank->getLimitChain($id);
  return $limitchain;
}
/**
 * Implements hook_load().
 */
function ces_account_load($id = NULL) {
  if (empty($id) || !is_numeric($id)) {
    return FALSE;
  }
  $bank = new CesBank();
  $account = $bank->getAccount($id);
  return $account;
}
/**
 * Calls drupal_get_form() with appropriate parameters.
 *
 * Replaces some of its arguments by the default exchange or account of the
 * current user.
 */
function _ces_bank_get_form() {
  $args = func_get_args();
  _ces_bank_replace_current_args($args);
  return call_user_func_array('drupal_get_form', $args);
}
/**
 * Helper function for replacing menu callback arguments.
 */
function _ces_bank_replace_current_args(&$args) {
  foreach ($args as $i => $arg) {
    if ($arg === CES_BANK_CURRENT_ACCOUNT) {
      if (($account = ces_bank_get_current_account()) !== FALSE) {
        $args[$i] = $account['id'];
      }
      else {
        $args[$i] = FALSE;
      }
    }
    elseif ($arg === CES_BANK_CURRENT_EXCHANGE) {
      if (($account = ces_bank_get_current_account()) !== FALSE) {
        $args[$i] = $account['exchange'];
      }
      else {
        $args[$i] = FALSE;
      }
    }
  }
  return $args;
}
/**
 * Implements hook_account_limit_classes().
 */
function ces_bank_account_limit_classes() {
  return array(
    'CesBankAbsoluteCreditLimit' => t('Absolute credit limit'),
    'CesBankAbsoluteDebitLimit' => t('Absolute debit limit'),
  );
}

/**
 * Implements hook_decorated_transaction_classes().
 */
function ces_bank_decorated_transaction_classes() {
  return array('InterExchangeTransaction', 'CesBankLevyedTransaction');
}
/**
 * Implements hook_user_presave().
 */
function ces_bank_user_presave(&$edit, $account, $category) {
  if (isset($edit['ces_current_account'])) {
    $edit['data']['ces_current_account'] = $edit['ces_current_account'];
  }
}
/**
 * Implements hook_user_load().
 */
function ces_bank_user_load($users) {
  $bank = new CesBank();
  foreach ($users as $uid => $account) {
    if (ces_bank_get_current_account($account) === FALSE) {
      $bankaccounts = $bank->getUserAccounts($uid);
      if (!empty($bankaccounts)) {
        $firstbankaccount = reset($bankaccounts);
        $users[$uid]->data['ces_current_account'] = $firstbankaccount['id'];
      }
    }
  }
}
/**
 * Implements hook_token_info().
 */
function ces_bank_token_info() {
  return array(
    'types' => array(
      'exchange' => array(
        'name' => t('Exchange'),
        'description' => t('Tokens for bank exchanges.'),
      ),
      'account' => array(
        'name'  => t('Account'),
        'description' => t('Tokens for bank accounts.'),
      ),
      'transaction' => array(
        'name' => t('Transaction'),
        'description' => t('Tokens for bank transactions.'),
      ),
    ),
    'tokens' => array(
      'exchange' => array(
        'code' => array(
          'name'   => t('Exchange code'),
          'description' => t('The 4 letter exchange code.'),
        ),
        'shortname' => array(
          'name' => t('Exchange short name'),
          'description' => t('Exchange short name.'),
        ),
        'name' => array(
          'name' => t('Exchange full name'),
          'description' => t('Exchange full name.'),
        ),
        'country' => array(
          'name' => t('Exchange country'),
          'description' => t('Exchange country.'),
        ),
        'town' => array(
          'name' => t('Exchange town'),
          'description' => t('Exchange town.'),
        ),
        'region' => array(
          'name'   => t('Exchange region'),
          'description' => t('Exchange region within the country.'),
        ),
        'website' => array(
          'name' => t('Exchange website'),
          'description' => t('Exchange website.'),
        ),
        'currencysymbol' => array(
          'name' => t('Currency symbol'),
          'description' => t('Exchange currency symbol.'),
        ),
        'currencyname' => array(
          'name'   => t('Currency name'),
          'description' => t('Exchange currency name.'),
        ),
        'currenciesname' => array(
          'name'   => t('Currency name plural'),
          'description' => t('Exchange currency name in plural.'),
        ),
        'currencyvalue' => array(
          'name'   => t('Currency value'),
          'description' => t('Exchange currency value in hours of work.'),
        ),
        'admin' => array(
          'name'   => t('Exchange administrator'),
          'description' => t('Exchange administrator user.'),
          'type' => 'user',
        ),
      ),
      'account' => array(
        'name' => array(
          'name' => t('Account identifier'),
          'description' => t('4 letter exchange identifier plus 4 number account code.'),
        ),
        'kind' => array(
          'name' => t('Type'),
          'description' => t('Account type.'),
        ),
        'user' => array(
          'name' => t('Account user'),
          'description' => t('Account user.'),
          'type' => 'user',
        ),
        'exchange' => array(
          'name' => t('Exchange Account'),
          'description' => t('Exchange Account'),
          'type' => 'exchange',
        ),
      ),
      'transaction' => array(
        'id' => array(
          'name' => t('Identifier'),
          'description' => t('Transaction identifier'),
        ),
        'fromaccount' => array(
          'name' => t('Buyer account'),
          'description' => t('The buyer account object.'),
          'type' => 'account',
        ),
        'toaccount' => array(
          'name' => t('Seller account'),
          'description' => t('The seller account object.'),
          'type' => 'account',
        ),
        'amount' => array(
          'name' => t('Amount'),
          'description' => t('The transaction amount.'),
        ),
        'concept' => array(
          'name' => t('Description'),
          'description' => t('The concept of the transaction.'),
        ),
        'orderedby' => array(
          'name' => t('Ordered by'),
          'description' => t('The user who created the transaction.'),
          'type' => 'user',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function ces_bank_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'exchange' && !empty($data['exchange'])) {
    $exchange = $data['exchange'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'code':
          $replacements[$original] = $sanitize ? check_plain($exchange['code']) : $exchange['code'];
          break;

        case 'shortname':
          $replacements[$original] = $sanitize ? check_plain($exchange['shortname']) : $exchange['shortname'];
          break;

        case 'name':
          $replacements[$original] = $sanitize ? check_plain($exchange['name']) : $exchange['name'];
          break;

        case 'country':
          $replacements[$original] = $sanitize ? check_plain($exchange['country']) : $exchange['country'];
          break;

        case 'town':
          $replacements[$original] = $sanitize ? check_plain($exchange['town']) : $exchange['town'];
          break;

        case 'region':
          $replacements[$original] = $sanitize ? check_plain($exchange['region']) : $exchange['region'];
          break;

        case 'website':
          $replacements[$original] = $sanitize ? check_plain($exchange['website']) : $exchange['website'];
          break;

        case 'currencysymbol':
          $replacements[$original] = $sanitize ? check_plain($exchange['currencysymbol']) : $exchange['currencysymbol'];
          break;

        case 'currencyname':
          $replacements[$original] = $sanitize ? check_plain($exchange['currencyname']) : $exchange['currencyname'];
          break;

        case 'currenciesname':
          $replacements[$original] = $sanitize ? check_plain($exchange['currenciesname']) : $exchange['currenciesname'];
          break;

        case 'currencyvalue':
          $replacements[$original] = $sanitize ? check_plain($exchange['currencyvalue']) : $exchange['currencyvalue'];
          break;

      }
    }
    if ($admin_tokens = token_find_with_prefix($tokens, 'admin')) {
      $replacements += token_generate('user', $admin_tokens, array('user' => user_load($exchange['admin'])), $options);
    }
  }
  if ($type == 'account' && !empty($data['account'])) {
    $account = $data['account'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'name':
          $replacements[$original] = $sanitize ? check_plain($account['name']) : $account['name'];
          break;

        case 'kind':
          $replacements[$original] = $sanitize ? check_plain($account['kind']) : $account['kind'];
          break;
      }
    }
    if ($user_tokens = token_find_with_prefix($tokens, 'user')) {
      $account_user = reset($account['users']);
      $uid = $account_user['user'];
      $replacements += token_generate('user', $user_tokens, array('user' => user_load($uid)), $options);
    }
    // Exchange from account.
    if ($exchange_tokens = token_find_with_prefix($tokens, 'exchange')) {
      $exchange = $account['exchange'];
      $exchange_object = ces_bank_get_exchange($exchange);
      $replacements += token_generate('exchange', $exchange_tokens, array('exchange' => $exchange_object), $options);
    }
  }
  if ($type == 'transaction' && !empty($data['transaction'])) {
    $transaction = $data['transaction'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'amount':
          $replacements[$original] = $sanitize ? check_plain($transaction['amount']) : $transaction['amount'];
          break;

        case 'concept':
          $replacements[$original] = $sanitize ? check_plain($transaction['concept']) : $transaction['concept'];
          break;

        case 'id':
          $replacements[$original] = $transaction['id'];
          break;

      }
      if ($fromaccount_tokens = token_find_with_prefix($tokens, 'fromaccount')) {
        $bank = new CesBank();
        $replacements += token_generate('account', $fromaccount_tokens, array('account' => $bank->getAccountByName($transaction['fromaccount'])), $options);
      }
      if ($toaccount_tokens = token_find_with_prefix($tokens, 'toaccount')) {
        $bank = new CesBank();
        $replacements += token_generate('account', $toaccount_tokens, array('account' => $bank->getAccountByName($transaction['toaccount'])), $options);
      }
      if ($orderedby_tokens = token_find_with_prefix($tokens, 'orderedby')) {
        $replacements += token_generate('user', $orderedby_tokens, array('user' => user_load($transaction['user'])), $options);
      }
    }
  }
  return $replacements;
}
/**
 * Given a drupal account, returns its full username.
 *
 * @param object $account
 *   Drupal user object.
 */
function ces_bank_get_full_username($account) {
  $userfullname = '';
  if (($items = field_get_items('user', $account, 'ces_firstname')) !== FALSE) {
    $item = reset($items);
    $userfullname .= $item['safe_value'];
  }
  if (($items = field_get_items('user', $account, 'ces_surname')) !== FALSE) {
    $item = reset($items);
    if (!empty($userfullname)) {
      $userfullname .= ' ';
    }
    $userfullname .= $item['safe_value'];
  }
  if (empty($userfullname) && $account) {
    $userfullname = $account->name;
  }
  return $userfullname;
}
/**
 * Get current bank account.
 *
 * @return array
 *   The current user's account.
 */
function ces_bank_get_current_account($account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = user_load($user->uid);
  }
  include_once dirname(__FILE__) . '/ces_bank.logic.inc';
  $bank = new CesBank();
  if (isset($account->data['ces_current_account'])) {
    try {
      $bankaccount = $bank->getAccount($account->data['ces_current_account']);
    }
    catch (Exception $e) {
      $bankaccount = FALSE;
    }
  }
  else {
    $bankaccount = FALSE;
  }
  return $bankaccount;
}
/**
 * Get current exchange.
 *
 * @return array
 *   The current user's exchange
 */
function ces_bank_get_current_exchange($account = NULL) {
  $bankaccount = ces_bank_get_current_account($account);
  if ($bankaccount === FALSE) {
    $path = arg();
    if ($path[0] == 'user' && $path[1] == 'register' && isset($path[2])) {
      $exchange = ces_bank_get_exchange_by_name($path[2]);
    }
    else {
      $exchange = FALSE;
    }
  }
  else {
    $exchange = ces_bank_get_exchange($bankaccount['exchange']);
  }
  return $exchange;
}
/**
 * Returns exchange given its id.
 */
function ces_bank_get_exchange($id) {
  $bank = new CesBank();
  try {
    $exchange = $bank->getExchange($id);
    return $exchange;
  }
  catch (Exception $e) {
    return FALSE;
  }
}
/**
 * Returns exchange given its name.
 */
function ces_bank_get_exchange_by_name($name) {
  $bank = new CesBank();
  $exchange = $bank->getExchangeByName($name);
  return $exchange;
}
/**
 * Returns all exchanges.
 */
function ces_bank_get_exchanges($country = NULL) {
  $cachekey = 'ces_bank_all_exchanges' . ($country ? '_' . $country : '');
  if (($cache = cache_get($cachekey)) !== FALSE) {
    $exchanges = $cache->data;
  }
  else {
    $bank = new CesBank();
    $conditions = array('state' => 1);
    if ($country) {
      $conditions['country'] = $country;
    }
    $exchanges = $bank->getAllExchanges($conditions);
    cache_set($cachekey, $exchanges, 'cache', REQUEST_TIME + 60 * 60);
  }
  return $exchanges;
}
/**
 * Helper function.
 */
function ces_bank_not_yet_implemented() {
  return array(
    '#markup' => t('Not yet implemented. Sorry!'),
  );
}

/**
 * Implements hook_user_view().
 */
function ces_bank_user_view($user, $view_mode, $langcode) {
  $bank = new CesBank();
  $accounts = $bank->getUserAccounts($user->uid);
  foreach ($accounts as $account) {
    if (!ces_bank_access('view', 'exchange accounts', $account['exchange'])) {
      continue;
    }
    $exchange = $bank->getExchange($account['exchange']);
    $limitchain = $bank->getLimitChain($account['limitchain']);
    $admin = ces_bank_access('admin', 'exchange', $exchange['id']);
    $accounting = array(
      '#type' => 'container',
      '#attributes' => array(),
      '#weight' => 1,
    );
    $accounting['name'] = array(
      '#type' => 'markup',
      '#prefix' => '<h3>',
      '#suffix' => '</h3>',
      '#markup' => $account['name'],
      '#weight' => 0,
    );
    if ($admin || empty($exchange['data']['hide_balance'])) {
      $accounting['balance'] = array(
        '#theme' => 'user_profile_item',
        '#title' => t('Balance'),
        '#markup' => $bank->formatAmount($account['balance'], $exchange, TRUE, TRUE),
        '#weight' => 10,
      );
    }
    if ($admin || empty($exchange['data']['hide_sales'])) {
      $sales = $bank->getAccountHistoricSales($account['id'], 0);
      $accounting['sales'] = array(
        '#theme' => 'user_profile_item',
        '#title' => t('Sales'),
        '#markup' => $bank->formatAmount($sales, $exchange, TRUE, FALSE),
        '#weight' => 20,
      );
      $purchases = $bank->getAccountHistoricPurchases($account['id'], 0);
      $accounting['purchases'] = array(
        '#theme' => 'user_profile_item',
        '#title' => t('Purchases'),
        '#markup' => $bank->formatAmount($purchases, $exchange, TRUE, FALSE),
        '#weight' => 30,
      );
    }
    $accounting['limit'] = array(
      '#theme' => 'user_profile_item',
      '#title' => t('Limit'),
      '#markup' => $limitchain['name'],
      '#weight' => 40,
    );
    $user->content['account_' . $account['name']] = $accounting;
  }
}
/**
 * Implements hook_menu_alter().
 */
function ces_bank_menu_alter(&$items) {
  $items['user/%user']['access callback'] = 'ces_bank_user_access';
  $items['user/%user']['access arguments'] = array('view', 1);
}
/**
 * Checks access to bank account.
 */
function ces_bank_user_access($permission, $target, $account = NULL) {
  $bank = new CesBank();
  $accounts = $bank->getUserAccounts($target->uid);

  foreach ($accounts as $acc) {
    if (ces_bank_access($permission, 'exchange accounts', $acc['exchange'], $account)) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function ces_bank_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  $user_edit = $form_state['user']->uid;
  $bank = new CesBank();
  $accounts = $bank->getUserAccounts($user_edit);
  if (!empty($accounts)) {
    $form['ces_account'] = array(
      '#tree' => TRUE,
      '#weight' => 59,
    );
    foreach ($accounts as $account) {
      $fieldset = array(
        '#type' => 'fieldset',
        '#title' => t('Account @name', array('@name' => $account['name'])),
      );
      $fieldset['manual'] = array(
        '#type' => 'checkbox',
        '#title' => t('Accept payments manually'),
        '#description' => t('If cheked, all payments from all accounts but those in the whitelist will not be effective until you manually accept them. Otherwise all payments will automatically be done. If you check this item you must regularly check your messages to quickly accept your pending payments.'),
        '#default_value' => $account['data']['accept']['manual'],
      );
      $fieldset['whitelist'] = array(
        '#type' => 'textarea',
        '#title' => t('Accept payments whitelist'),
        '#description' => t('Write one account per line. The payments from these accounts will be automatically accepted.'),
        '#default_value' => implode("\n", $account['data']['accept']['whitelist']),
      );
      if (ces_bank_access('admin', 'account', $account)) {
        $fieldset['account_users'] = array(
          '#type' => 'item',
          '#markup' => l(t('Manage account users'), 'ces/bank/account/' . $account['id'] . '/users', array('attributes' => array('class' => array('button')))),
        );
      }
      $form['ces_account'][$account['id']] = $fieldset;
    }
    $form['#submit'][] = 'ces_bank_form_user_profile_submit';
    $form['#validate'][] = 'ces_bank_form_user_profile_validate';
  }
}

/**
 * Form validate function for ces_bank_form_user_profile_form_alter.
 */
function ces_bank_form_user_profile_validate($form, &$form_state) {
  $bank = new CesBank();
  $values = $form_state['values']['ces_account'];
  foreach ($values as $id => $account) {
    $whitelist = trim($account['whitelist']);
    if (!empty($whitelist)) {
      $whitelist = explode("\n", $whitelist);
      foreach ($whitelist as $name) {
        $name = trim($name);
        if (!$bank->getAccountByName($name)) {
          form_set_error('ces_account[' . $id . '][whitelist]',
            t('Could not find account @account.', array('@account' => $name)));
        }
      }
    }
  }
}
/**
 * Form submit function for ces_bank_form_user_profile_form_alter.
 */
function ces_bank_form_user_profile_submit($form, &$form_state) {
  global $user;
  $user_edit = $form_state['user']->uid;
  $bank = new CesBank();
  $accounts = $bank->getUserAccounts($user_edit);
  $values = $form_state['values']['ces_account'];
  foreach ($accounts as $account) {
    $value = $values[$account['id']];
    $account['data']['accept']['manual'] = $value['manual'];
    $whitelist = trim($value['whitelist']);
    if (!empty($whitelist)) {
      $whitelist = explode("\n", trim($value['whitelist']));
      foreach ($whitelist as $i => $item) {
        $whitelist[$i] = trim($item);
      }
    }
    else {
      $whitelist = array();
    }
    $account['data']['accept']['whitelist'] = $whitelist;
    $bank->updateAccount($account);
  }
}

/**
 * Returns the list of countries having at least one exchange.
 */
function ces_bank_country_get_list() {
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  $allcountries = country_get_list();
  $exchanges = ces_bank_get_exchanges();
  $countries = array();
  foreach ($exchanges as $exchange) {
    $countries[$exchange['country']] = $allcountries[$exchange['country']];
  }
  return $countries;
}
/**
 * Implements hook_form_alter().
 */
function ces_bank_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'ces_user_register_form') {
    if (empty($form_state['page']) || $form_state['page'] == 'account') {
      // Next button.
      $form['actions']['next'] = array(
        '#type' => 'submit',
        '#value' => t('Next >>'),
        '#submit' => array('ces_user_register_save_values', 'ces_bank_user_register_next'),
        '#weight' => 1000,
      );
      $form['actions']['submit']['#access'] = FALSE;
      // Add default exchange language for the new user.
      $exchange = ces_bank_get_current_exchange();
      $form['language'] = array(
        '#type' => 'value',
        '#value' => (isset($exchange['data']['default_lang'])) ? $exchange['data']['default_lang'] : FALSE,
      );
    }
    elseif ($form_state['page'] == 'bankaccount') {
      $name = arg(2);
      $bank = new CesBank();
      $exchange = $bank->getExchangeByName($name);
      if ($exchange !== FALSE && $bank->access('use', 'exchange accountcreator', $exchange['id'])) {
        module_load_include('inc', 'ces_bank', 'ces_bank.forms');
        $form += ces_bank_account_form($form, $form_state);
        unset($form['bankaccount']['submit']);
        $form['actions']['previous'] = array(
          '#type' => 'submit',
          '#value' => t('<< Previous'),
          '#submit' => array('ces_bank_user_register_save_values', 'ces_bank_user_register_previous'),
          '#weight' => 0,
          '#limit_validation_errors' => array(),
        );
      }
    }
    array_unshift($form['actions']['submit']['#submit'], 'ces_bank_user_register_save_values');
    $form['actions']['submit']['#submit'][] = 'ces_bank_user_register_submit';
    return $form;
  }
}
/**
 * Implements hook_form_submit().
 */
function ces_bank_user_register_previous($form, &$form_state) {
  $form_state['values'] = $form_state['page_values']['account'];
  $form_state['page'] = 'account';
  $form_state['rebuild'] = TRUE;
}
/**
 * Implements hook_form_submit().
 */
function ces_bank_user_register_next($form, &$form_state) {
  if (!empty($form_state['page_values']['bankaccount'])) {
    $form_state['values'] = $form_state['page_values']['bankaccount'];
  }
  else {
    $form_state['values'] = array();
  }

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page'] = 'bankaccount';
  $form_state['rebuild'] = TRUE;
}
/**
 * Helper for register form submit functions.
 */
function ces_bank_user_register_save_values($form, &$form_state) {
  if ($form_state['page'] == 'bankaccount') {
    $form_state['page_values']['bankaccount'] = $form_state['values'];
  }
}
/**
 * Implements hook_form_submit().
 */
function ces_bank_user_register_submit($form, &$form_state) {
  // The user is already created. Create the banking account.
  $form_state['values'] = $form_state['page_values']['bankaccount'];
  $form_state['values']['operation'] = 'new';
  $form_state['values']['users'][0]['user'] = $form_state['user']->uid;
  module_load_include('inc', 'ces_bank', 'ces_bank.forms');
  ces_bank_account_form_submit($form, $form_state);
}
/**
 * AJAX autocomplete callback.
 *
 * @param string $string
 *   Users in current exchange.
 */
function ces_bank_user_autocomplete($string) {
  $exchange = ces_bank_get_current_exchange();
  $bank = new CesBank();
  $accounts = $bank->getAllAccounts(array('exchange' => $exchange['id'], 'state' => 1));
  $userids = array();
  foreach ($accounts as $account) {
    foreach ($account['users'] as $accuser) {
      $userids[$accuser['user']] = $accuser['user'];
    }
  }
  $query = db_select('users', 'u');
  $matches = array();
  $return = $query
    ->fields('u', array('name'))
    ->condition('u.name', '%' . db_like($string) . '%', 'LIKE')
    ->condition('u.uid', array_values($userids), 'IN')
    ->range(0, 10)
    ->execute();
  foreach ($return as $row) {
    $matches[$row->name] = check_plain($row->name);
  }
  // Return for JS.
  drupal_json_output($matches);
}
/**
 * Implements hook_views_api().
 */
function ces_bank_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ces_bank') . '/views',
  );
}
/**
 * @}
 */
