<?php
/**
 * @file
 * Drupal hooks for this module.
 */

/**
 * @defgroup ces_summaryblock Ces SummaryBlock
 * @ingroup ices
 * @{
 * Summary Block from ICES
 */

/**
 * Implements hook_block_info().
 */
function ces_summaryblock_block_info() {
  $block = array();
  $block['ces_summary']['info'] = t('CES bank account summary');
  $block['ces_summary']['cache'] = DRUPAL_NO_CACHE;
  $block['ces_summary']['region'] = 'featured';
  $block['ces_summary']['status'] = 1;
  return $block;
}
/**
 * Implements hook_block_view(). 
 * 
 * Returns false if ces_bank_get_current_account is false.
 */
function ces_summaryblock_block_view($delta = '') {
  // Check is user integralces?
  if (!ces_bank_get_current_account()) {
    return FALSE;
  }
  // Minimal css format.
  drupal_add_css(drupal_get_path('module', 'ces_summaryblock') . '/css/ces_summaryblock.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  // Get the relevant data.
  global $user;
  $user = user_load($user->uid);
  $from = isset($user->data['ces_summaryblock_period_from']) ? $user->data['ces_summaryblock_period_from'] : 0;
  $to = isset($user->data['ces_summaryblock_period_to']) ? $user->data['ces_summaryblock_period_to'] : time();
  $account = ces_bank_get_current_account();
  if (!empty($account)) {
    $bank = new CesBank();
    $exchange = ces_bank_get_current_exchange();
    $sales = $bank->getAccountHistoricSales($account['id'], $from, $to);
    $sales = $bank->formatAmount($sales, $exchange);
    $purchases = $bank->getAccountHistoricPurchases($account['id'], $from, $to);
    $purchases = $bank->formatAmount($purchases, $exchange);
    $balance = $bank->formatAmount($account['balance'], $exchange);
    $currency = $exchange['currenciesname'];

    $transactions = $bank->getTransactions(array('limit' => 1, 'account' => $account['id']), 'created', 'DESC');
    if (!empty($transactions)) {
      $transaction = reset($transactions);
      $lasttradedesc = l(_ces_summaryblock_shorten_text($transaction['concept'], 25), 'ces/bank/account/transaction');
      if ($account['id'] == $transaction['fromaccount']) {
        $otheraccountid = $transaction['toaccount'];
      }
      else {
        $otheraccountid = $transaction['fromaccount'];
      }
      $otheraccount = $bank->getAccount($otheraccountid);
      $otheruser = reset($otheraccount['users']);
      $otheruid = $otheruser['user'];
      $otheracc = user_load($otheruid);
      $lasttradeuser = l(ces_bank_get_full_username($otheracc), 'user/' . $otheruid);
    }
  }
  else {
    $sales = '0';
    $purchases = '0';
    $balance = '0';
    $currency = '';
  }
  if (empty($lasttradedesc)) {
    $lasttradedesc = t("You haven't traded yet.");
    $lasttradeuser = '';
  }
  $offer = _ces_summaryblock_get_interesting_offer($user);
  if ($offer !== FALSE) {
    $interestingoffer = l(_ces_summaryblock_shorten_text($offer->title, 25), 'ces/bank/account/myoffers/' . $offer->id . '/view');
    $interestinguser = l(ces_bank_get_full_username(user_load($offer->user)), 'user/' . $offer->user);
  }
  else {
    $interestingoffer = t('No offers yet!');
    $interestinguser = '';
  }
  // Format the render array.
  $block = array();
  $block['subject'] = t('My account');
  $content = array(
    '#type' => 'container',
    '#attributes' => array(),
  );
  $content['controls'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('ces_summaryblock_controls')),
    'form' => array(
      drupal_get_form('ces_summaryblock_form'),
    ),
  );
  $content['sales'] = array(
    '#theme' => 'ces_summaryblock_value_box',
    '#title' => t('Sales'),
    '#value' => $sales,
    '#currency' => $currency,
  );
  $content['purchases'] = array(
    '#theme' => 'ces_summaryblock_value_box',
    '#title' => t('Purchases'),
    '#value' => $purchases,
    '#currency' => $currency,
  );
  $content['lasttrade'] = array(
    '#theme' => 'ces_summaryblock_user_box',
    '#title' => t('Last trade'),
    '#content' => $lasttradedesc,
    '#user' => $lasttradeuser,
  );
  $content['mayinterest'] = array(
    '#theme' => 'ces_summaryblock_user_box',
    '#title' => t('You may be interested'),
    '#content' => $interestingoffer,
    '#user' => $interestinguser,
  );
  $content['balance'] = array(
    '#theme' => 'ces_summaryblock_value_box',
    '#title' => t('Balance'),
    '#value' => $balance,
    '#currency' => $currency,
    '#color' => TRUE,
  );

  $block['content'] = $content;
  return $block;
}
/**
 * Shorten text helper function.
 */
function _ces_summaryblock_shorten_text($text, $size = 50) {
  if (drupal_strlen($text) <= $size) {
    return $text;
  }
  $text = drupal_substr($text, 0, $size - 3);
  $space = strrpos($text, ' ');
  if ($space !== FALSE && $space > (strlen($text) * 0.75)) {
    $text = substr($text, 0, $space);
  }
  return $text . '...';
}
/**
 * Computes an offer that may be interesting to given account.
 *
 * @return object
 *   A potentially interesting offer for given account.
 *   Current implementation is just random that changes every 5 minutes.
 */
function _ces_summaryblock_get_interesting_offer($account) {
  $id = FALSE;
  if (isset($account->data['ces_interesting_offer']) && $account->data['ces_interesting_offer']['time'] > REQUEST_TIME - 60 * 5) {
    $id = $account->data['ces_interesting_offer']['id'];
  }
  elseif ($account->uid) {
    $exchange = ces_bank_get_current_exchange($account);
    if ($exchange != FALSE) {
      $query = new EntityFieldQuery();
      $categories = ces_offerswants_get_categories_ids('offer', $exchange['id']);
      if (!empty($categories)) {
        $query->entityCondition('entity_type', 'ces_offerwant')
              ->entityCondition('bundle', 'offer')
              ->propertyCondition('category', $categories, 'IN')
              ->propertyCondition('user', $account->uid, '<>')
              ->addTag('random')
              ->range(0, 1);
        $result = $query->execute();
        if (isset($result['ces_offerwant']) && count($result['ces_offerwant']) > 0) {
          $keys = array_keys($result['ces_offerwant']);
          $id = reset($keys);
          $account->data['ces_interesting_offer'] = array(
            'time' => REQUEST_TIME,
            'id' => $id,
          );
          user_save($account);
        }
      }
    }
  }
  if ($id === FALSE) {
    return FALSE;
  }
  else {
    return ces_offerwant_load($id);
  }
}
/**
 * Implements hook_query_TAG_alter().
 */
function ces_summaryblock_query_random_alter($query) {
  $query->orderRandom();
}
/**
 * Form for changing user's current account and time.
 */
function ces_summaryblock_form($form, &$form_state) {
  global $user;
  $user = user_load($user->uid);
  $bank = new CesBank();
  $accounts = $bank->getUserAccounts($user->uid);
  $options = array();
  foreach ($accounts as $account) {
    $options[$account['id']] = $account['name'];
  }
  $default = reset($accounts);
  if (count($accounts) > 1) {
    $form['account'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => isset($user->data['ces_current_account']) ? $user->data['ces_current_account'] : $default['id'],
      '#attributes' => array(
        'onChange' => array('this.form.submit();'),
      ),
    );
  }
  else {
    $form['account'] = array(
      '#type' => 'markup',
      '#prefix' => '<h3>',
      '#suffix' => '</h3>',
      '#markup' => $default['name'],
    );
  }
  $form['period'] = array(
    '#type' => 'select',
    '#options' => array(
      'today' => t('Today'),
      'yesterday' => t('Yesterday'),
      'thisweek' => t('This week'),
      'lastweek' => t('Last week'),
      'last7days' => t('Last 7 days'),
      'last15days' => t('Last 15 days'),
      'last30days' => t('Last 30 days'),
      'thismonth' => t('This month'),
      'lastmonth' => t('Last month'),
      '182days' => t('182 days'),
      '365days' => t('365 days'),
      'thisyear' => t('This year'),
      'lastyear' => t('Last year'),
      'all' => t('All'),
    ),
    '#default_value' => isset($user->data['ces_summaryblock_period']) ? $user->data['ces_summaryblock_period'] : 'all',
    '#attributes' => array('onChange' => array('this.form.submit();')),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('style' => array('display: none;')),
  );
  return $form;
}
/**
 * Form submit.
 */
function ces_summaryblock_form_submit($form, &$form_state) {
  global $user;
  $user = user_load($user->uid);

  $time = time();
  $from = $time;
  $to = $time;
  $date = getdate($time);
  $month = $date['mon'];
  $day = $date['mday'];
  $year = $date['year'];

  switch ($form_state['values']['period']) {
    case 'today':
      $from = mktime(0, 0, 0, $month, $day, $year);
      break;

    case 'yesterday':
      $from = mktime(0, 0, 0, $month, $day - 1, $year);
      $to = mktime(0, 0, 0, $month, $day, $year);
      break;

    case 'thisweek':
      $from = mktime(0, 0, 0, $month, $day - $date['wday'], $year);
      break;

    case 'lastweek':
      $from = mktime(0, 0, 0, $month, $day - $date['wday'] - 7, $year);
      $to = mktime(0, 0, 0, $month, $day - $date['wday'], $year);
      break;

    case 'last7days':
      $from = mktime(0, 0, 0, $month, $day - 7, $year);
      break;

    case 'last15days':
      $from = mktime(0, 0, 0, $month, $day - 15, $year);
      break;

    case 'last30days':
      $from = mktime(0, 0, 0, $month, $day - 30, $year);
      break;

    case 'thismonth':
      $from = mktime(0, 0, 0, $month, 0, $year);
      break;

    case 'lastmonth':
      $from = mktime(0, 0, 0, $month - 1, 0, $year);
      $to = mktime(0, 0, 0, $month, 0, $year);
      break;

    case '182days':
      $from = $from = mktime(0, 0, 0, $month, $day - 182, $year);
      break;

    case '365days':
      $from = mktime(0, 0, 0, $month, $day, $year - 1);
      break;

    case 'thisyear':
      $from = mktime(0, 0, 0, 0, 0, $year);
      break;

    case 'lastyear':
      $from = mktime(0, 0, 0, 0, 0, $year - 1);
      $to = mktime(0, 0, 0, 0, 0, $year);
      break;

    case 'all':
    default:
      $from = 0;
      break;
  }
  $user->data['ces_summaryblock_period_from'] = $from;
  $user->data['ces_summaryblock_period_to'] = $to;
  $user->data['ces_summaryblock_period'] = $form_state['values']['period'];
  $user->data['ces_current_account'] = (isset($form_state['values']['account']))
  ? $form_state['values']['account']
  : FALSE;
  user_save($user);
}
/**
 * Implements hook_theme().
 */
function ces_summaryblock_theme() {
  $items = array(
    'ces_summaryblock_value_box' => array(
      'render element' => 'element',
    ),
    'ces_summaryblock_user_box' => array(
      'render element' => 'element',
    ),
  );
  return $items;
}
/**
 * A #theme function.
 */
function theme_ces_summaryblock_value_box($variables) {
  $output = '<div class="ces_summaryblock_box ces_summaryblock_number">';
  $output .= '<div class="ces_summaryblock_title">';
  $output .= $variables['element']['#title'];
  $output .= '</div>';
  $color = 'white';
  if (!empty($variables['element']['#color'])) {
    if ($variables['element']['#value'] > 0) {
      $color = 'green';
    }
    elseif ($variables['element']['#value'] < 0) {
      $color = 'red';
    }
  }
  $color = 'ces_summaryblock_' . $color;
  $output .= '<div class="ces_summaryblock_value ' . $color . '">';
  $output .= $variables['element']['#value'];
  $output .= '</div>';
  $output .= '<div class="ces_summaryblock_currency">';
  $output .= $variables['element']['#currency'];
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * A #theme function.
 */
function theme_ces_summaryblock_user_box($variables) {
  $output = '<div class="ces_summaryblock_box ces_summaryblock_trade">';
  $output .= '<div class="ces_summaryblock_title">';
  $output .= $variables['element']['#title'];
  $output .= '</div>';
  $output .= '<div class="ces_summaryblock_content">';
  $output .= $variables['element']['#content'];
  $output .= '</div>';
  $output .= '<div class="ces_summaryblock_user">';
  $output .= '<span class="ces_summaryblock_user_icon"></span>';
  $output .= $variables['element']['#user'];
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}
/** @} */
