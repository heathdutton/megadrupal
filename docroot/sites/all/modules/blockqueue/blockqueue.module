<?php

/**
 * @file
 * Block Queue Module File.
 */

require_once dirname(__FILE__) . '/blockqueue.theme.inc';
require_once dirname(__FILE__) . '/blockqueue.admin.inc';
require_once dirname(__FILE__) . '/blockqueue.ctools.inc';
require_once dirname(__FILE__) . '/blockqueue.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function blockqueue_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_menu().
 */
function blockqueue_menu() {
  $items['contextual/admin/structure/blockqueue/list/%blockqueue'] = array(
    'title'            => 'Configure blockqueue',
    'page callback'    => 'blockqueue_contextual_callback_edit',
    'page arguments'   => array(5),
    'access arguments' => array('administer blockqueue update'),
  );

  $items['contextual/admin/structure/blockqueue/list/%blockqueue/edit'] = array(
    'title'            => 'Configure blockqueue',
    'type'             => MENU_LOCAL_ACTION,
    'context'          => MENU_CONTEXT_INLINE,
    'page callback'    => 'blockqueue_contextual_callback_edit',
    'page arguments'   => array(5),
    'access arguments' => array('administer blockqueue update'),
  );

  return $items;
}

/**
 * Contextual menu callback.
 *
 * @param object $blockqueue
 *   Blockqueue.
 */
function blockqueue_contextual_callback_edit($blockqueue) {
  $path    = 'admin/structure/blockqueue/list/' . $blockqueue->name . '/edit';
  $options = array();

  // A destination in $_GET always overrides the function arguments.
  // We do not allow absolute URLs to be passed via $_GET, as this can be an attack vector.
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $options['query']['destination'] = $_GET['destination'];
  }

  // The 'Location' HTTP header must be absolute.
  $options['absolute'] = TRUE;

  $url = url($path, $options);

  header('Location: ' . $url, TRUE, 302);
  drupal_exit($url);
}

/**
 * Menu callback for argument check.
 *
 * @param string $name
 *   Name of the blockqueue.
 * @param string $token
 *   Token of the block.
 *
 * @return bool|object
 *   Blockqueue.
 */
function blockqueue_block_load($name, $token) {
  if ($blockqueue = blockqueue_load($name)) {
    if ($block = array_search($token, $blockqueue->blocks)) {
      return $blockqueue;
    }
  }

  return FALSE;
}

/**
 * Implements hook_permission().
 */
function blockqueue_permission() {
  return array(
    'administer blockqueue'        => array(
      'title'       => t('Administer block queues'),
      'description' => t(
        'Perform administration tasks on block queues. <em>Give to trusted roles only; this permission has security implications.</em>'
      ),
    ),
    'administer blockqueue create' => array(
      'title'       => t('Create block queues'),
      'description' => t('<em>Give to trusted roles only; this permission has security implications.</em>'),
    ),
    'administer blockqueue update' => array(
      'title'       => t('Update block queues'),
      'description' => t('<em>Give to trusted roles only; this permission has security implications.</em>'),
    ),
    'administer blockqueue delete' => array(
      'title'       => t('Delete / Revert block queues'),
      'description' => t('<em>Give to trusted roles only; this permission has security implications.</em>'),
    ),
    'administer blockqueue import' => array(
      'title'       => t('Import / Export block queues'),
      'description' => t('<em>Give to trusted roles only; this permission has security implications.</em>'),
    ),
    'administer blockqueue enable' => array(
      'title'       => t('Enable / Disable block queues'),
      'description' => t('<em>Give to trusted roles only; this permission has security implications.</em>'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function blockqueue_block_info() {
  $blocks = array();

  foreach (blockqueue_load_all() as $blockqueue) {
    $blocks[$blockqueue->name] = array(
      'info'  => t('Blockqueue: @name', array('@name' => $blockqueue->admin_title)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function blockqueue_block_view($delta = '') {
  if ($blockqueue = blockqueue_load($delta)) {
    if (isset($blockqueue->disabled) && $blockqueue->disabled) {
      return array();
    }

    drupal_add_css(drupal_get_path('module', 'blockqueue') . '/css/blockqueue.css');

    $variables = array('elements' => array('#blockqueue' => $blockqueue));
    $content   = theme('blockqueue', $variables);

    $block = array(
      'subject' => '',
      'content' => array(
        '#markup'           => $content,
        '#contextual_links' => array(
          'blockqueue' => array(
            'contextual/admin/structure/blockqueue/list',
            array($delta, 'edit'),
          ),
        ),
      ),
    );

    return $block;
  }

  return array();
}

/**
 * Loads blocks' information from the database.
 *
 * @param object $blockqueue
 *   Blockqueue used to load block.
 *
 * @return array
 *   An array of blocks grouped by region.
 */
function _blockqueue_load_blocks($blockqueue) {
  global $theme_key;

  $query  = db_select('block', 'b');
  $result = $query
    ->fields('b')
    ->condition('b.theme', $theme_key)
    ->orderBy('b.region')
    ->orderBy('b.weight')
    ->orderBy('b.module')
    ->addTag('block_load')
    ->addTag('translatable')
    ->execute();

  $block_info = $result->fetchAllAssoc('bid');
  // Allow modules to modify the block list.
  drupal_alter('blockqueue_block_list', $block_info, $blockqueue);

  $blocks_loaded = $blocks = array();

  foreach ($block_info as $block) {
    $token = $block->module . '|' . $block->delta;

    if (in_array($token, $blockqueue->blocks)) {
      $blocks_loaded[$token] = $block;
    }
  }

  // Sort blocks according to blockqueue.
  foreach ($blockqueue->blocks as $token) {
    $blocks[$token] = $blocks_loaded[$token];
  }

  return $blocks;
}

/**
 * Array sorting callback; sorts elements by 'info' key.
 *
 * @param array $a
 *   First element.
 *
 * @param array $b
 *   Second element.
 *
 * @return bool|int
 *   Sort flag.
 */
function blockqueue_sort_info($a, $b) {
  if ($a['info'] == $b['info']) {
    return 0;
  }
  else {
    return $a['info'] > $b['info'];
  }
}
