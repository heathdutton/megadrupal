<?php
// $Id: uc_taxes_floridasurtax.module,v 1.10 2010/04/15 01:21:32 setfree Exp $ 
/**
 * @file
 * Florida discretionary sales tax module
 * Adds Florida county discretionary sales tax to state sales tax.
 * Coded by Shawn Ostermann | Complete Computer Care 
*/

/**
 * Implementation of hook_menu().
 */

function uc_taxes_floridasurtax_menu() {
  $items = array();

  $items['admin/store/settings/taxes/flsurtax'] = array(
    'title' => 'FL Surtax',
    'description' => 'Configure settings for adding FL surtax to sales tax.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_taxes_floridasurtax_admin'),
    'access arguments' => array('configure taxes'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 15,
  );

  return $items;
}


function uc_taxes_floridasurtax_admin(){
  $form['uc_taxes_floridasurtax_state_tax'] = array(
    '#type' => 'textfield',
    '#title' => t('FL State Tax'),
    '#size' => 5,
    '#description' => t('Enter the current state tax rate % (do not include any surtax)'),
    '#default_value' => variable_get('uc_taxes_floridasurtax_state_tax',6),
  );
   $form['uc_taxes_floridasurtax_default_sutax'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Surtax'),
    '#size' => 5,
    '#description' => t('Enter a default surtax amount. This is a fallback in case no match is found. This should be the surtax for the county that the store resides in.'),
    '#default_value' => variable_get('uc_taxes_floridasurtax_default_sutax',0),
  );

  $options = uc_product_type_names();
  unset($options['product_kit']);
  $options['blank-line'] = t('"Blank line" product');
  $options['all-products'] = t('All Product Types');
  
  $form['uc_taxes_floridasurtax_taxed_product_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Taxed product types'),
    '#description' => t('Apply taxes to the specified product types/classes.'),
    '#options' => $options,
    '#default_value' => variable_get('uc_taxes_floridasurtax_taxed_product_types',array('all-products')),
  );

  // taxed line items
  $options = array();
  foreach (_uc_line_item_list() as $line_item) {
    //if (!in_array($line_item['id'], array('subtotal', 'tax_subtotal','total'))){    
    if (!in_array($line_item['id'], array('subtotal', 'tax_subtotal', 'total', 'tax', 'tax_display'))){ 
      $options[$line_item['id']] = $line_item['title'];
    }
  }
  
  $form['uc_taxes_floridasurtax_line_items'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Taxed line items'),
    '#description' => t('Line items to apply Florida state sales taxes to.' ),
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => variable_get( 'uc_taxes_floridasurtax_line_items', array() ),
  );

  $form['uc_taxes_floridasurtax_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax Line Item Title'),
    '#description' => t('The title that will displayed next to the tax line item.'),
    '#default_value' => variable_get('uc_taxes_floridasurtax_title', 'Florida Sales Tax'),
    '#required' => TRUE,
    '#size' => 35,
    '#multiple' => FALSE,  
  );  
  
    // Wholesale users - exclude users with these role from tax.

  $form['uc_taxes_floridasurtax_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Wholesale roles, to exclude from tax'),
    '#description' => t('Exclude tax from any user who has one of the checked roles'),
    '#multiple' => TRUE,
    '#options' => user_roles(TRUE),
    '#default_value' => variable_get('uc_taxes_floridasurtax_roles', array()),
  );
  return system_settings_form($form);
}

function uc_taxes_floridasurtax_uc_calculate_tax($order) {
global $user;

  $ret = array();

  if (is_numeric($order)) {
    $order = uc_order_load($order);
  }
  if (!is_object($order)) {
    return $ret;
  }

  $state = uc_get_zone_code($order->delivery_zone);

  // This module is only for Florida sales tax, if delivery state is not FL, then exit
  if ($state != 'FL' || empty($order->delivery_postal_code)) return array();
  
// Check to see if this is a wholesale order, in which case, no tax.
  $my_user = $order->uid ? user_load($order->uid) : $user;
  $wholesale_roles = variable_get('uc_taxes_floridasurtax_roles', array());
  // This variable comes from a checkbox array form element. So it
  // gives us an array like '3' => '3', '4' => 0, meaning role ID 3 is a
  // wholesale role.
  foreach ($wholesale_roles as $rid => $value) {
    if ($value && !empty($my_user->roles[$rid])) {
      return $ret;
    }
  }
  
  $state_tax_rate = variable_get('uc_taxes_floridasurtax_state_tax',6) * .01;


  // Set default tax rate to be used in case no match is found
  //   $default_surtax_rate = variable_get('uc_taxes_floridasurtax_default_sutax',0) * .01;
    
  // Find county surtax rate by delivery zipcode
  $surtax_rate = uc_taxes_floridasurtax_county_rate(trim($order->delivery_postal_code));
    
  $tax_rate = $state_tax_rate + $surtax_rate;

  $taxable_amount = 0;

  // Find taxable amount of products
  if (is_array($order->products)) {
    $uc_taxes_floridasurtax_taxable_types = variable_get('uc_taxes_floridasurtax_taxed_product_types', array('all-products'));
    $item_tax = variable_get('uc_taxes_floridasurtax_line_items', array() );
    
    foreach ($order->products as $item) {
      $node = node_load($item->nid);
      
      if (array_search($node->type, $uc_taxes_floridasurtax_taxable_types, TRUE) || !empty($uc_taxes_floridasurtax_taxable_types['all-products'])){
        $taxable_amount += $item->qty * $item->price;
      }
    }
  } 

  // calculate the taxable amount for line items
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $line_item) {          
      if (isset($item_tax[$line_item['type']]) && $item_tax[$line_item['type']]) {
        $taxable_amount += $line_item['amount'];
      }
      // Subtract any coupon discounts from total before calculating tax
      if ($line_item['type'] == 'coupon'){
        $taxable_amount -= $line_item['amount'];
      }
    }
  }
  // Calculate the amount of tax (Surtax only applies to first $5000)
  $state_tax_amount = uc_taxes_floridasurtax_calc($taxable_amount, $state_tax_rate);

  if ($taxable_amount > 5000) $taxable_amount = 5000;
  $surtax_tax_amount = uc_taxes_floridasurtax_calc($taxable_amount, $surtax_rate);

  $tax_to_charge = $state_tax_amount + $surtax_tax_amount;

  $tax = (object) array(
    'id' => uc_taxs_floridasurtax_get_safe_id(),
    'name' => t(variable_get('uc_taxes_floridasurtax_title', 'Florida Sales Tax')),
    'amount' => $tax_to_charge,
    'weight' => 0,
    'summed' => 1,
  );
  
  // For bookkeeping purposes
  $tax->data = array(
    'tax_id' => $tax->id,
    'county_tax_rate' => $surtax_rate / .01,
    'tax_rate' => $state_tax_rate + $surtax_rate / .01,
    'taxable_amount' => $taxable_amount,    
    'tax_jurisdiction' => $order->delivery_city . ' | ' . $order->delivery_postal_code,
  );  
  
  if (empty($tax_to_charge)){
    return array();
  }

  $ret = array();
  $ret[$tax->id] = $tax;
  
  return $tax;  
}
  
  
function uc_taxes_floridasurtax_county_rate($zip){
  if (strlen($zip) < 5) return $rate = FALSE;

  $zip = substr($zip,0,5);
  
  $result = db_query('SELECT d.county FROM {uc_taxes_floridasurtax_data} d WHERE d.zip = :zip', array(':zip' => $zip))->fetchField();    
  $delivery_county = $result;
    
  
  if ($delivery_county == "" || !$delivery_county) return variable_get('uc_taxes_floridasurtax_default_sutax',0) * .01;

  $result = db_query('SELECT rate FROM {uc_taxes_floridasurtax_rates} WHERE county = :county', array(':county' => $delivery_county))->fetchField();
  $rate = $result;
   
  if (!$rate) return FALSE;
  $rate = $rate * .01;

  
  return $rate;
}


/******************************
 * Function to calculate FL Sales Tax
 ******************************
 */
function uc_taxes_floridasurtax_calc($sale_amount, $tax_rate) {
  if  ($sale_amount != round($sale_amount)){
    // Sale Amount falls between whole dollar amounts, therefore we use the 'bracket system'
    $brackets = array(
      '0' => array(
        'low' => .01,
        'high' =>.09),
      '1' => array(
        'low' => .10,
        'high' =>.14),
      '2' => array(
        'low' => .15,
        'high' =>.28),
      '3' => array(
        'low' => .29,
        'high' =>.42),
      '4' => array(
        'low' => .43,
        'high' =>.57),
      '5' => array(
        'low' => .58,
        'high' =>.71),
      '6' => array(
        'low' => .72,
        'high' =>.85),
      '7' => array(
        'low' => .86,
        'high' =>.99),
     );
        
    // Find cents amount
    $sale_amount_cents = $sale_amount - floor($sale_amount);
  
    foreach ($brackets as $key => $bracket){
      if ($sale_amount_cents > ($bracket['low']-.01) && $sale_amount_cents < ($bracket['high'] + .01)) $bracket_num = $key;
    }

    $bracket_tax = round($brackets[$bracket_num]['high'] * $tax_rate, 2);      

    $fltax = (floor($sale_amount) * $tax_rate) + $bracket_tax;
  
  } else {
    // Sale amount is a whole dollar and no bracket system is needed
    $fltax = $sale_amount * $tax_rate;
  }
  
  return $fltax;
}


/**
 * Returns a safe ID number to use for tax (larger than any in the tax module).
 *
 * Have to have a numeric ID for some of the preview stuff to work. Trust me.
 * Comes from some stuff in uc_taxes.js, interacting with some stuff in
 * uc_payment.js. Specifically, set_line_item() takes a key, which the tax
 * module sets to "tax_" . id value. Then the serializeOrder function sets the
 * line item type to be the part of key up to the _, but only if the part after
 * the _ is numeric. And the line item type does need to be set to 'tax' for
 * the preview part to work, because that's how the line item code knows it
 * is a tax. Sigh.
 */
function uc_taxs_floridasurtax_get_safe_id() {
  $maxid = 1;
  $rates = uc_taxes_rate_load();
  foreach( $rates as $id => $info ) {
    if( $id >= $maxid ) {
      $maxid = $id;
    }
  }

  return $maxid + 99;
}