<?php

/**
 * @file
 *   Defines the test cases for flag cool notes module
 */

module_load_include('module', 'flag');
class FlagCoolNoteTestCase extends DrupalWebTestCase {
  var $_flag = FALSE;
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Flag Cool Note',
      'description' => 'Ensure that the flag cool note is working properly.',
      'group' => 'Flag',
    );
  }

  public function setUp() {
    // Enable all modules required for this test.
    parent::setUp(
      'flag',
      'webform',
      'flagcoolnote'
    );

    // Create and log in our privileged user.
    $privileged_user = $this->drupalCreateUser(array(
      'access administration pages',
      'administer flags',
      'manage flag maps',
      'create webform content',
      'edit own webform content',
      'create article content'
    ));
    $this->drupalLogin($privileged_user);
  }

  public function testFlagCoolNoteCreate() {
    $contents = array();
    // create an array containing content types which we need to create for testing.
    $node_to_create = array('article', 'webform');

    foreach ($node_to_create as $type) {
      // Assign value to title and body
      $langcode = LANGUAGE_NONE;
      $title_key = "title";
      $body_key = "body[$langcode][0][value]";
      // Create node to edit.
      $add = array();
      $add[$title_key] = $this->randomName(8);
      $add[$body_key] = $this->randomName(16);
      $this->drupalPost('node/add/' . $type, $add, t('Save'));

      // Check that the node exists in the database.
      $node = $this->drupalGetNodeByTitle($add[$title_key]);
      $this->assertTrue($node, t('Node ' . $node->title . ' of ' . $node->type . ' type found in database.'));

      // Store title and nid, to use ahead.
      $contents[$type]['nid'] = $node->nid;
      $contents[$type]['title'] = $node->title;
    }

    // Add a new flag using the UI.
    $edit = array(
      'name' => drupal_strtolower($this->randomName()),
      'title' => $this->randomName(),
      'flag_short'          => 'flag this node',
      'flag_long'           => 'flag this node',
      'flag_message'        => 'you flag this node',
      'unflag_short'        => 'unflag this node',
      'unflag_long'         => 'unflag this node',
      'unflag_message'      => 'you unflag this node',
      'roles[flag][2]' => TRUE,
      'roles[unflag][2]' => TRUE,
      'types[article]' => TRUE,
      'show_on_teaser' => TRUE,
      'show_on_page' => TRUE, // Remember this while debugging
      'show_on_form' => FALSE,
      'link_type' => 'confirm',
      'flag_confirmation' => $this->randomName(),
      'unflag_confirmation' => $this->randomName(),
    );
    $saved = $edit;
    $saved['roles'] = array('flag' => array(2), 'unflag' => array(2));
    $saved['types'] = array('article');
    unset($saved['roles[flag][2]'], $saved['roles[unflag][2]'], $saved['types[article]']);

    // Post to add flag form
    $this->drupalPost(FLAG_ADMIN_PATH . '/add/node/' . $edit['name'], $edit, t('Submit'));

    // Get flag using flag name. Not usefull because currently it doesn't return anything
    $flag = flag_get_flag($edit['name']);

    // assign flag name in contents Array
    $contents['flag']['name'] = $edit['name'];

    /**
     * Create an Array to submit to create flag map
     * @var Array $flag_cool_ad
     */
    $flagEdit = array(
      'flags' => $contents['flag']['name'],
      'flag_unflag' => 'flag',
      'webforms' => $contents['webform']['nid'],
    );
    // Post to flag cool note add form, and create one.
    $this->drupalPost('admin/structure/flagcoolnote/add', $flagEdit, t('Add Flag Cool Note'));
    $this->verbose(t('Flag Cool Note has been created.'));

    // Create an Array.
    $aEdit = array();
    // Flag node with new flag and flag cool note created.
    $this->drupalPost('flag/confirm/flag/' . $contents['flag']['name'] . '/' . $contents['article']['nid'], $aEdit, 'flag this node');
    // For debugging, we might output the node structure with $this->verbose()
    // $this->verbose('Node created: ' . var_export($node, TRUE));
    // It would only be output if the testing settings had 'verbose' set.
  }
}
