<?php

/**
 * @file
 *   FlagCoolNote module allow users to attached a note to flags by mapping webforms with flags
 * @todo:
 *   1. Create link status on Edit flag page.
 *   2. Allow ajax submission
 *   3. Remove unwanted code taken from webform (if any).
 */

// Define global variables
define('FLAG_COOL_NOTE', 'admin/structure/flagcoolnote');

$flag_path = drupal_get_path('module', 'flag') . '/flag.info';
$flag_info = drupal_parse_info_file($flag_path);
if (strstr($flag_info['version'], '7.x-3')) {
  define('FLAG_TABLE_NAME', 'flag');
  define('FLAGGED_NID', 'entity_id');
}
else {
  define('FLAG_TABLE_NAME', 'flags');
  define('FLAGGED_NID', 'content_id');
}

/******************************************************************************************
 * Drupal Core Hooks                                                                      *
 ******************************************************************************************/

/**
 * Implements of hook_menu().
 */
function flagcoolnote_menu() {
  $items = array();
  $items[FLAG_COOL_NOTE] = array(
    'title' => 'Flags Cool Notes',
    'description' => 'Manage flagcoolnote',
    'page callback' => 'flagcoolnote_show_all',
    'access callback' => 'user_access',
    'access arguments' => array('manage flag maps'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[FLAG_COOL_NOTE . '/add'] = array(
    'title' => 'Flags Cool Notes Add',
    'page callback' => 'flagcoolnote_add_form',
    'access callback' => 'user_access',
    'access arguments' => array('manage flag maps'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items[FLAG_COOL_NOTE . '/%flagcoolnote'] = array(
    'title' => 'Edit Flags Cool Note',
    'page callback' => 'flagcoolnote_edit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('manage flag maps'),
    'weight' => 1,
  );
  $items[FLAG_COOL_NOTE . '/%flagcoolnote/delete'] = array(
    'title' => 'Delete Flag Cool Note',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flagcoolnote_delete_confirm', 3),
    'access callback' => 'user_access',
    'access arguments' => array('manage flag maps'),
    'weight' => 2,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements of hook_perm().
 */
function flagcoolnote_permission() {
  return array(
    'manage flag maps' => array(
      'title' => t('manage flag maps'),
      'description' => t('Administers the flag cool notes mapping.'),
    ),
  );
}

/**
 * Implements of hook_form_alter().
 *
 * @param Array $form
 * @param Array $form_state
 * @param String $form_id
 */
function flagcoolnote_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'flag_confirm':
      $has_flag = array();
      module_load_include('inc', 'webform', 'includes/webform.components');
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $flag_name = (FLAG_TABLE_NAME == 'flags') ? $form['flag_name']['#value'] : $form['#flag']->name;
      $has_flag = load_flagcoolnotes_from_flag_name($flag_name, $form['action']['#value']);
      if (isset($has_flag['ffid'])) {
        $node = node_load($has_flag['webform_nid']);
        $form['fcl_flag_name'] = array(
          '#type' => 'hidden',
          '#value' => $flag_name
        );
        // If webform has fields defined then only load webform
        if (isset($node->webform['components']) && count($node->webform['components']) > 0) {

          // Start of loading webform
          $submission = array();
          $is_draft = FALSE;
          $filter = TRUE;
          // Attach necessary JavaScript and CSS.
          $form['#attached'] = array(
            'css' => array(drupal_get_path('module', 'webform') . '/css/webform.css'),
            'js' => array(drupal_get_path('module', 'webform') . '/js/webform.js'),
          );


          // If in a multi-step form, a submission ID may be specified in form state.
          // Load this submission. This allows anonymous users to use auto-save.
          if (empty($submission) && !empty($form_state['values']['details']['sid'])) {
            $submission = webform_get_submission($node->nid, $form_state['values']['details']['sid']);
            $is_draft = $submission->is_draft;
          }

          // Bind arguments to $form to make them available in theming and form_alter.
          $form['#node'] = $node;
          $form['#submission'] = $submission;
          $form['#is_draft'] = $is_draft;
          $form['#filter'] = $filter;

          // Add a theme function for this form.
          $form['#theme'] = array('webform_form_' . $node->nid, 'webform_form');

          // Add a css class for all client forms.
          $form['#attributes'] = array('class' => array('webform-client-form'));

          // Set the encoding type (necessary for file uploads).
          $form['#attributes']['enctype'] = 'multipart/form-data';

          if (is_array($node->webform['components']) && !empty($node->webform['components'])) {
            // Prepare a new form array.
            $form['submitted'] = array(
              '#tree' => TRUE
            );
            $form['details'] = array(
              '#tree' => TRUE,
            );

            // Put the components into a tree structure.
            if (!isset($form_state['storage']['component_tree'])) {
              $form_state['webform']['component_tree'] = array();
              $form_state['webform']['page_count'] = 1;
              $form_state['webform']['page_num'] = 1;
              _webform_components_tree_build($node->webform['components'], $form_state['webform']['component_tree'], 0, $form_state['webform']['page_count']);
            }
            else {
              $form_state['webform']['component_tree'] = $form_state['storage']['component_tree'];
              $form_state['webform']['page_count'] = $form_state['storage']['page_count'];
              $form_state['webform']['page_num'] = $form_state['storage']['page_num'];
            }

            // Shorten up our variable names.
            $component_tree = $form_state['webform']['component_tree'];
            $page_count = $form_state['webform']['page_count'];
            $page_num = $form_state['webform']['page_num'];

            if ($page_count > 1) {
              $next_page_labels = array();
              $prev_page_labels = array();
            }

            // Recursively add components to the form.
            // form (typically used in Form Builder), includes all components.
            foreach ($component_tree['children'] as $cid => $component) {
              $component_value = isset($form_state['values']['submitted'][$cid]) ? $form_state['values']['submitted'][$cid] : NULL;
              if ($filter == FALSE || _webform_client_form_rule_check($node, $component, $page_num, $form_state)) {
                if ($component['type'] == 'pagebreak') {
                  $next_page_labels[$component['page_num'] - 1] = !empty($component['extra']['next_page_label']) ? $component['extra']['next_page_label'] : t('Next Page >');
                  $prev_page_labels[$component['page_num']] = !empty($component['extra']['prev_page_label']) ? $component['extra']['prev_page_label'] : t('< Previous Page');
                }
                _webform_client_form_add_component($node, $component, $component_value, $form['submitted'], $form, $form_state, $submission, 'form', $page_num, $filter);
              }
            }

            // These form details help managing data upon submission.
            $form['details']['nid'] = array(
              '#type' => 'value',
              '#value' => $node->nid,
            );
            $form['details']['sid'] = array(
              '#type' => 'hidden',
              '#value' => isset($submission->sid) ? $submission->sid : '',
            );
            $form['details']['uid'] = array(
              '#type' => 'value',
              '#value' => isset($submission->uid) ? $submission->uid : $user->uid,
            );
            $form['details']['page_num'] = array(
              '#type'  => 'hidden',
              '#value' => $page_num,
            );
            $form['details']['page_count'] = array(
              '#type'  => 'hidden',
              '#value' => $page_count,
            );
            $form['details']['finished'] = array(
              '#type' => 'hidden',
              '#value' => isset($submission->is_draft) ? (!$submission->is_draft) : 0,
            );

            if ($page_count > 1) {
              if (count($form['#submit'])) {
                $form_submit = $form['#submit'];
                unset($form['#submit']);
              }
              // Add the submit button(s).
              if ($page_num > 1) {
                $form['actions']['previous'] = array(
                  '#type' => 'submit',
                  '#value' => $prev_page_labels[$page_num],
                  '#weight' => 5,
                  '#validate' => array(),
                  '#attributes' => array('formnovalidate' => 'formnovalidate'),
                );
              }
              if ($page_num == $page_count) {
                /* $form['actions']['submit'] = array(
                  '#type' => 'submit',
                  '#value' => empty($node->webform['submit_text']) ? t('Submit') : t($node->webform['submit_text']),
                  '#weight' => 10,
                ); */
                $form['#submit'] = array();
                $form['#call_submit'] = $form_submit;
                $form['#call_submit'][] = '_flagcoolnote_custom_flag_confirm_submit';
                $form['actions']['submit']['#weight'] = 10;

                $form['#validate'] = array('webform_client_form_validate');
                array_unshift($form['#submit'], '_flagcoolnote_custom_webform_confirm_submit');
              }
              elseif ($page_num < $page_count) {
                unset($form['actions']['submit']);
                $form['#submit'] = array('webform_client_form_pages', 'webform_client_form_submit');
                $form['#validate'] = array('webform_client_form_validate');
                $form['actions']['next'] = array(
                  '#type' => 'submit',
                  '#value' => $next_page_labels[$page_num],
                  '#weight' => 10,
                );
              }
            }
            else {
              // Add the submit button.
              $form['#validate'] = array('webform_client_form_validate');
              array_unshift($form['#submit'], '_flagcoolnote_custom_flag_confirm_submit');
            }
          }

          // End of loading webform
        }
      }
      break;
  }
}

/**
 * Implements hook_node_delete().
 *
 * Delete records when node is deleted
 */
function flagcoolnote_node_delete($node) {
  $query = db_select('flagcoolnote_submissions');
  $query->condition('nid', $node->nid, '=')
        ->fields('flagcoolnote_submissions', array('ffid'));
  $flag_record_found = $query->execute()->fetchField();

  // If a record for this node found in flagcoolnote_submissions table then delete all entries
  if (!empty($flag_record_found)) {
    _flagcoolnote_delete_submissions('nid', $node->nid);
  }
}

/**
 * Load a flagcoolnote array from the database.
 *
 * @param $ffid
 *   The flagcoolnote ID.
 *
 * @return
 *   A fully-populated flagcoolnote array, or FALSE if the flagcoolnote is not found.
 */
function flagcoolnote_load($ffid = NULL) {
  $ffids = (isset($ffid) ? $ffid : 0);
  if (isset($ffids)) {
    $flagcoolnote = load_flagcoolnotes($ffids);
  }
  else {
    $flagcoolnote = array();
  }
  return $flagcoolnote;
}

/******************************************************************************************
 * Flag Module hooks                                                                      *
 ******************************************************************************************/

// @TODO: When deleting flag delete flagcoolnote entries

/******************************************************************************************
 * Views Module hooks                                                                     *
 ******************************************************************************************/

/**
 * Implements hook_views_api().
 */
function flagcoolnote_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'flagcoolnote') . '/views',
  );
}

/******************************************************************************************
 * Webform Module hooks                                                                   *
 ******************************************************************************************/

/**
 * Implements hook_webform_component_delete().
 *
 * When deleting webform delete its submission entries from flagcoolnote_submissions,
 * because we will not found any submission data in hook_node_delete if weightage changes
 *
 * @param Array $component
 */
function flagcoolnote_webform_component_delete($component) {
  $query = db_select('webform_submissions');
  $query->condition('nid', $component['nid'], '=')
        ->fields('webform_submissions', array('sid'));
  $flag_record_found = $query->execute()->fetchAllKeyed(0, 0);

  // If record found then only delete submission entries.
  if (!empty($flag_record_found)) {
    db_delete('flagcoolnote_submissions')
      ->condition('sid', $flag_record_found, 'in')
      ->execute();
  }
}

/**
 * Implements hook_webform_submission_delete().
 *
 * Delete webform submission record
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that was just deleted from the database.
 */
function flagcoolnote_webform_submission_delete($node, $submission) {
  $query = db_select('flagcoolnote_submissions');
  $query->condition('sid', $submission->sid, '=')
        ->fields('flagcoolnote_submissions', array('ffid'));
  $flag_record_found = $query->execute()->fetchField();

  // Delete a record from a flagcoolnote_submissions table when a submission is deleted.
  if (!empty($flag_record_found)) {
    _flagcoolnote_delete_submissions('sid', $submission->sid);
  }
}

/******************************************************************************************
 * Modules functions                                                                      *
 ******************************************************************************************/

/**
 * Custom submit function to called when webform is multi-step.
 *
 * @param Array $form
 * @param Array $form_state
 */
function _flagcoolnote_custom_webform_confirm_submit($form, &$form_state) {
  webform_client_form_pages($form, $form_state);
  webform_client_form_submit($form, $form_state);

  module_load_include('inc', 'webform', 'includes/webform.submissions');
  module_load_include('inc', 'webform', 'includes/webform.components');

  // If submit button is not clicked then return from here.
  if (empty($form_state['save_draft']) && empty($form_state['webform_completed'])) {
    return;
  }

  foreach ($form['#call_submit'] AS $function) {
    $function($form, $form_state);
  }
}

/**
 * Custom submit function to call webform submit function.
 * @param Array $form
 * @param Array $form_state
 */
function _flagcoolnote_custom_flag_confirm_submit($form, &$form_state) {
  webform_client_form_pages($form, $form_state);
  webform_client_form_submit($form, $form_state);

  // get flagcoolnote id for this flag
  $has_flag = load_flagcoolnotes_from_flag_name($form_state['values']['fcl_flag_name'], $form_state['values']['action']);
  if (isset($has_flag['ffid'])) {
    if (isset($form_state['values']['details']['sid'])) {
      // Insert into db
      db_insert('flagcoolnote_submissions')
        ->fields(array(
          'ffid' => $has_flag['ffid'],
          'sid' => $form_state['values']['details']['sid'],
          'nid' => $form_state['values'][FLAGGED_NID],
          'uid' => $form_state['values']['details']['uid'],
        ))
        ->execute();
    }
    else {
      drupal_set_message(t('Unable to map this submission. Please contact site administrator'), 'error');
      watchdog('flagcoolnote', 'Unable to map this submission. Node ID: @nid, Webform ID: @wnid, User ID: @uid',
        array(
          '@nid' => $form_state['values'][FLAGGED_NID],
          '@wnid' => $form_state['values']['details']['nid'],
          '@uid' => $form_state['values']['details']['uid']
        ));
    }
  }
}

/**
 * Helper function to delete record from flagcoolnote_submissions
 * @param String $field
 *   Field name to match record with.
 *
 * @param Integer $id
 *   Id to match value with.
 */
function _flagcoolnote_delete_submissions($field, $id) {
  db_delete('flagcoolnote_submissions')
    ->condition($field, $id, '=')
    ->execute();
}

/**
 * Callback function for showing all flag mapping
 */
function flagcoolnote_show_all() {
  $header = array();
  $rows = array();
  drupal_set_title(t('Flag Cool Notes'));
  $header = array(
    t('Flag Name'),
    t('Flag Actions'),
    t('Webform Name'),
    array(
      'data' => t('Actions'),
      'colspan' => '2',
    ),
  );
  // Select all records from database
  $query = db_query('SELECT * FROM {flagcoolnote}');
  foreach ($query AS $result) {
    // Select related flag and webform title from database
    $query = db_select(FLAG_TABLE_NAME, 'f')
      ->condition('name', $result->flag_name)
      ->fields('f', array('title'));
    $flag_title = $query->execute()->fetchField();

    $webform_title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $result->webform_nid))->fetchField();
    $rows[] = array(
      $flag_title,
      $result->flag_unflag,
      $webform_title,
      l('Edit', FLAG_COOL_NOTE . '/' . $result->ffid),
      l('Delete', FLAG_COOL_NOTE . '/' . $result->ffid . '/delete'),
    );
  }
  // theme output in table format and return
  return theme(
    'table', array(
      'header' => $header,
      'rows' => $rows,
      'empty' => t('No Content found. ' . l('Add new', FLAG_COOL_NOTE . '/add'))
    )
  );
}

/**
 * Callback function for admin/build/flagcoolnote/add
 */
function flagcoolnote_add_form() {
  return drupal_get_form('flagcoolnote_display_form');
}

/**
 * Callback function for admin/build/flagcoolnote/%
 */
function flagcoolnote_edit_form($flagcoolnote) {
  return drupal_get_form('flagcoolnote_display_form', $flagcoolnote);
}

/**
 * Callback function for delete flagcoolnote
 * @param Array $form_state
 * @param Array $flagcoolnote
 *
 * @see flagcoolnote_delete_confirm_submit()
 */
function flagcoolnote_delete_confirm($form, &$form_state, $flags_fields = array()) {
  if (empty($flags_fields) && is_numeric(arg(3))) {
    $flags_fields = array(
      'ffid' => 0,
      'flag_name' => '',
      'flag_unflag' => '',
      'webform_nid' => 0,
    );
    $ffid = arg(3);
    $flags_fields = load_flagcoolnotes($ffid);
  }

  $form = array();
  $form['ffid'] = array(
    '#type' => 'hidden',
    '#value' => $flags_fields['ffid'],
  );
  return confirm_form($form,
    t('Are you sure you want to delete this flag mapping?'),
    !empty($_GET['destination']) ? $_GET['destination'] : FLAG_COOL_NOTE,
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')
  );
}

/**
 * Submit handler for delete flagcoolnote
 * @param Array $form_state
 * @param Array $flagcoolnote
 *
 * @see flagcoolnote_delete_confirm()
 */
function flagcoolnote_delete_confirm_submit($form, &$form_state) {
  db_delete('flagcoolnote')
    ->condition('ffid', $form_state['values']['ffid'])
    ->execute();

  // Delete all records related to this flagcoolnote id.
  _flagcoolnote_delete_submissions('ffid', $form_state['values']['ffid']);

  drupal_goto(FLAG_COOL_NOTE);
}

/**
 * Helper function to define form to render all flags and webforms
 *
 * @see flagcoolnote_display_form_validate()
 *      flagcoolnote_display_form_submit()
 */
function flagcoolnote_display_form($form, &$form_state, $flags_fields = array()) {
  $form = array();

  // If add flagcoolnote page
  if (empty($flags_fields) && !is_numeric(arg(3))) {
    drupal_set_title(t('Add Flag Fields Mapping'));

    // Define array to avoid warnings.
    $flags_fields = array(
      'ffid' => 0,
      'flag_name' => '',
      'flag_unflag' => '',
      'webform_nid' => 0,
    );
  }
  // If edit page then show more fields
  else {
    if (empty($flags_fields) && is_numeric(arg(3))) {
      $flags_fields = array(
        'ffid' => 0,
        'flag_name' => '',
        'flag_unflag' => '',
        'webform_nid' => 0,
      );
      $ffid = arg(3);
      $flags_fields = load_flagcoolnotes($ffid);
    }
    drupal_set_title(t('Edit Flag Fields Mapping'));

    $form['ffid'] = array(
      '#type' => 'hidden',
      '#value' => isset($flags_fields['ffid']) ? $flags_fields['ffid'] : arg(3),
      '#weight' => 1,
    );
    $form['cancel'] = array(
      '#type' => 'item',
      '#value' => l('Cancel', FLAG_COOL_NOTE),
      '#weight' => 7,
    );
  }

  // render all available options for flag and webform.
  $flags = render_all_flags($flags_fields['ffid']);
  $webforms = render_all_webforms($flags_fields['ffid']);

  // Create fields for creating flagcoolnote.
  $form['flags'] = array(
    '#type' => 'select',
    '#title' => t('Flags'),
    '#options' => $flags,
    '#default_value' => $flags_fields['flag_name'],
    '#required' => TRUE,
    '#description' => t('Select flag name. e.g. Bookmark, Archive.'),
    '#weight' => 3,
  );
  $form['flag_unflag'] = array(
    '#type' => 'select',
    '#title' => t('Flag Action'),
    '#default_value' => $flags_fields['flag_unflag'],
    '#options' => array(
      'flag' => 'Flag',
      'unflag' => 'Unflag',
    ),
    '#required' => TRUE,
    '#description' => t('Select flag action on which this flagcoolnote will be triggered. e.g. flag, unflag.'),
    '#weight' => 4,
  );
  $form['webforms'] = array(
    '#type' => 'select',
    '#title' => t('Webforms'),
    '#default_value' => $flags_fields['webform_nid'],
    '#options' => $webforms,
    '#required' => TRUE,
    '#description' => t('Select webform to show if above conditions matched.'),
    '#weight' => 5,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => !is_numeric(arg(3)) ? t('Add Flag Cool Note') : t('Save Flag Cool Note'),
    '#weight' => 6,
  );

  // return form
  return $form;
}

/**
 * Validate function for flagcoolnote_display_form_submit
 * @param Array $form
 * @param Array $form_state
 *
 * @see flagcoolnote_display_form()
 *      flagcoolnote_display_form_submit()
 */
function flagcoolnote_display_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['ffid'])) {
    $result = db_query("SELECT COUNT(*) FROM {flagcoolnote} WHERE flag_name = :flag_name AND flag_unflag = :flag_unflag",
      array(':flag_name' => $form_state['values']['flags'], ':flag_unflag' => $form_state['values']['flag_unflag']))->fetchField();
    if ($result) {
      form_set_error('flags', t('Selected Flag map already exists.'));
    }
  }
}

/**
 * Submit handler for flagcoolnote_display_form_submit
 * @param Array $form
 * @param Array $form_state
 *
 * @see flagcoolnote_display_form()
 *      flagcoolnote_display_form_validate()
 */
function flagcoolnote_display_form_submit($form, &$form_state) {
  if (isset($form_state['values']['ffid'])) {
    db_update('flagcoolnote')
      ->fields(array('flag_name' => $form_state['values']['flags'], 'flag_unflag' => $form_state['values']['flag_unflag'], 'webform_nid' => $form_state['values']['webforms']))
      ->condition('ffid', $form_state['values']['ffid'])
      ->execute();
    drupal_set_message(t('Record Updated successfully'));
  }
  else {
    db_query("INSERT INTO {flagcoolnote} (flag_name, flag_unflag, webform_nid) VALUES(:flag_name, :flag_unflag, :webform_nid)",
      array(
        ':flag_name' => $form_state['values']['flags'],
        ':flag_unflag' => $form_state['values']['flag_unflag'],
        ':webform_nid' => $form_state['values']['webforms']
      ));
    drupal_set_message(t('New Flag mapping created'));
  }
  drupal_goto(FLAG_COOL_NOTE);
}

/**
 * Helper function to load flagcoolnote details depending on ffid provided to it
 * @param Int $ffid
 *   Flag field id
 */
function load_flagcoolnotes($ffid) {
  $flagcoolnote = array();
  $flagcoolnote_query = db_query('SELECT * FROM {flagcoolnote} WHERE ffid = :ffid', array(':ffid' => $ffid));
  foreach ($flagcoolnote_query AS $flagcoolnote_result) {
    $flagcoolnote['ffid'] = $flagcoolnote_result->ffid;
    $flagcoolnote['flag_name'] = $flagcoolnote_result->flag_name;
    $flagcoolnote['flag_unflag'] = $flagcoolnote_result->flag_unflag;
    $flagcoolnote['webform_nid'] = $flagcoolnote_result->webform_nid;
  }
  return $flagcoolnote;
}

/**
 * Helper function to load flagcoolnote details depending on flag name and flag/unflag provided
 * @param String $flag_name
 *   Flag name
 * @param String $flag_unflag
 *   Flag/Unflag action
 */
function load_flagcoolnotes_from_flag_name($flag_name, $flag_unflag) {
  $flagcoolnote = array();
  $flagcoolnote_query = db_query('SELECT * FROM {flagcoolnote} WHERE flag_name = :flag_name AND flag_unflag = :flag_unflag', array(':flag_name' => $flag_name, ':flag_unflag' => $flag_unflag));
  foreach ($flagcoolnote_query AS $flagcoolnote_result) {
    $flagcoolnote['ffid'] = $flagcoolnote_result->ffid;
    $flagcoolnote['flag_name'] = $flagcoolnote_result->flag_name;
    $flagcoolnote['flag_unflag'] = $flagcoolnote_result->flag_unflag;
    $flagcoolnote['webform_nid'] = $flagcoolnote_result->webform_nid;
  }
  return $flagcoolnote;
}

/**
 * Helper function to render a list of all flags available.
 * @param Int $has_arg3
 *   arg(3) of current page (if available)
 */
function render_all_flags($has_arg3 = NULL) {
  // If not edit page then only show select none
  if (!is_numeric($has_arg3) || $has_arg3 <= 0) {
    $flags[''] = t('--Select None--');
  }
  $query = db_select(FLAG_TABLE_NAME, 'f')
    ->fields('f', array('name', 'title'));
  $result = $query->execute();
  while ($flags_result = $result->fetchAssoc()) {
    // If viewing edit page then return all value, else ignore flags which are already mapped for flag and unflag
    if (is_numeric($has_arg3) && $has_arg3 > 0) {
      $flags[$flags_result['name']] = t('@title', array('@title' => $flags_result['title']));
    }
    else {
      // If flag map count is 2 then do not show that flag name here.
      $flag_map_count = db_query('SELECT count(*) FROM {flagcoolnote} WHERE flag_name = :flag_name', array(':flag_name' => $flags_result['name']))->fetchField();
      if ($flag_map_count < 2) {
        $flags[$flags_result['name']] = t('@title', array('@title' => $flags_result['title']));
      }
    }
  }
  return $flags;
}

/**
 * Helper function to render list of webforms available in system
 *
 * @param Int $has_arg3
 *   arg(3) of current page (if available)
 */
function render_all_webforms($has_arg3 = NULL) {
  // If not edit page then only show select none
  if (!is_numeric($has_arg3) || $has_arg3 <= 0) {
    $webforms[''] = t('--Select None--');
  }
  // $webforms_query = db_query('SELECT nid, title FROM {node} WHERE type = :type', array(':type' => 'webform'))->fetchObject();
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'webform');
  $webforms_query = $query->execute();

  while ($webforms_result = $webforms_query->fetchAssoc()) {
    $webforms[$webforms_result['nid']] = t('@title', array('@title' => $webforms_result['title']));
  }
  return $webforms;
}