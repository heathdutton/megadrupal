<?php

/**
* @file merge_comments.module
* Automatically merges two consecutive comments made by the same user on the same node
*/

define('DEFAULT_FORMAT',
"@old_text

------- comment titled:'@new_subj' was added on @new_date -------

@new_text"
);

define('DEFAULT_DATE_FORMAT',
'@weekday, @mon/@mday/@year - @hours:@minutes'
);

 /**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function merge_comments_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#merge_comments":
      $output = '<p>'.  t("Automatically merges two consecutive comments made by the same user on the same node") .'</p>';
      break;
  }
  return $output;
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the test_module module
*/
function merge_comments_perm() {
    return array('administer merge_comments');
}


/**
 * Implementation of hook_menu().
 * Creating an Admin form for user customization
 */
function merge_comments_menu() { 

  $items = array();

  $items['admin/settings/merge_comments'] = array(
    'title' => 'Merge comments',
    'description' => 'Define when and how merge comments should work',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('merge_comments_admin'),
    'access arguments' => array('administer merge_comments'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}


/**
 * The page argument for the admin form
 */
function merge_comments_admin() {
  $form = array();

	// Only enable merge_comments for certain node types (default, all)
  $enabled_types = variable_get('comment_notify_node_types', FALSE);
  foreach (node_get_types('names') as $type => $name) 
	{
		$checkboxes[$type] = check_plain($name);
		$default[] = $type;
	}

  $form['merge_comments_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types on which merge comments is enabled'),
    '#default_value' => variable_get('merge_comments_node_types', $default),
    '#options' => $checkboxes,
    '#description' => t('Content types which are enabled here will utilize the merge comments module by default.'),
  );
	
  $form['merge_comments_maxchars'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of characters of the merged comment'),
    '#default_value' => variable_get('merge_comments_maxchars', 0),
    '#size' => 10,
    '#maxlength' => 9,
    '#description' => t("The maximum number of characters the merged comment can have, if it would have more than this number of characters, the two comments won't be merged. Leave 0 for no limit."),
    '#required' => TRUE,
  );
  
  $form['merge_comments_maxsecs'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum elapsed time between the two comments, in seconds - Simple form'),
    '#default_value' => variable_get('merge_comments_maxsecs', 0),
    '#size' => 10,
    '#maxlength' => 9,
    '#description' => t("The maximum number of seconds between the comment dates of the two comments to be merged. If a larger number of seconds has elapsed, the comments won't be merged. Leave 0 for no limit."),
    '#required' => TRUE,
  );
	
  $form['merge_comments_field'] = array(
		'#type' => 'fieldset',
		'#title' => t('Maximum elapsed time between the two comments - Advanced form'),
		'#description' => t('Use this for large time intervals, the previous field will be ignored'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
		'#tree' => FALSE,
	);
	
	$form['merge_comments_field']['merge_comments_adv_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the advanced form'),
    '#default_value' => variable_get('merge_comments_adv_form', 0),
    '#description' => t('Enable the advanced form and ignore the simple one')
	);
	
	$form['merge_comments_field']['merge_comments_adv_years'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of years between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_years', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Values between 0 and 99"),
    '#required' => TRUE,
  );
	
	$form['merge_comments_field']['merge_comments_adv_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of days between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_days', 0),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("Values between 0 and 364"),
    '#required' => TRUE,
  );
	
	$form['merge_comments_field']['merge_comments_adv_hours'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of hours between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_hours', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Values between 0 and 23"),
    '#required' => TRUE,
  );
	
	$form['merge_comments_field']['merge_comments_adv_mins'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of minutes between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_mins', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Values between 0 and 59"),
    '#required' => TRUE,
  );
	
	$form['merge_comments_field']['merge_comments_adv_secs'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of seconds between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_secs', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Values between 0 and 59"),
    '#required' => TRUE,
  );
	
  $form['merge_comments_field1'] = array(
		'#type' => 'fieldset',
		'#title' => t('Define a format for merging the comments'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
		'#tree' => FALSE,
	);

 	$form['merge_comments_field1']['merge_comments_format'] = array(
    '#type' => 'textarea',
    '#title' => t('The format used to merge the comments'),
    '#description' => t(
      "Define the merge format any way you wish, using normal characters as well as these replaceable values(this won't make much sense if you don't include at least the old and new text variables):
      <ul>
      <li>@username = the name of the user who commented the comment</li>
      <li>@new_text = the text of the newly commented comment</li>
      <li>@new_subj = the subject of the newly commented comment</li>
			<li>@old_text = the text of the previously commented comment</li>
      <li>@old_subj = the subject of the previously commented comment</li>
      <li>@old_date = the date of the previous comment in the specified format</li>
			<li>@new_date = the date of the new comment in the specified format</li>
			</ul>"
    ),
    '#default_value' => variable_get('merge_comments_format', t(DEFAULT_FORMAT)),
    '#return_value' => 1,
    '#cols' => 80,
    '#rows' => 5
  );
	
	$form['merge_comments_field1']['merge_comments_default_date_size'] = array(
    '#type' => 'radios',
    '#title' => t('The size of your dates'),
    '#default_value' => variable_get('merge_comments_default_date_size', 1),
    '#options' => array(t('Small'),t('Medium'),t('Large')),
    '#description' => t('Choose which of the three default date sizes you would like to use, this only works if you are using the default date format.')
	);
	
	$form['merge_comments_field1']['merge_comments_field2'] = array(
		'#type' => 'fieldset',
		'#title' => t('Define a custom date format'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
		'#tree' => FALSE,
	);
	
	$form['merge_comments_field1']['merge_comments_field2']['merge_comments_custom_date'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use a custom date format'),
    '#default_value' => variable_get('merge_comments_custom_date', 0),
    '#description' => t('Define your own date format, as opposed to using the default format seen throughout your site')
	);
	
	$form['merge_comments_field1']['merge_comments_field2']['merge_comments_date_format'] = array(
    '#type' => 'textarea',
    '#title' => t('The format used for the dates'),
    '#description' => t(
			'Above is an example of a custom date. You can define it any way you wish using normal characters as well as the following replaceable variables:
      <ul>
      <li>@seconds = numeric representation of seconds, 0 to 59</li>
			<li>@minutes = numeric representation of minutes,	0 to 59</li>
			<li>@hours = numeric representation of hours, 0 to 23</li>
			<li>@mday = numeric representation of the day of the month, 1 to 31</li>
			<li>@wdayS = numeric representation of the day of the week, starting with Sunday, 0 (for Sunday) through 6 (for Saturday)</li>
			<li>@wdayM = numeric representation of the day of the week, starting with Monday, 0 (for Monday) through 6 (for Sunday)</li>
			<li>@mon = numeric representation of a month, 1 through 12</li>
			<li>@year = a full numeric representation of a year, 4 digits, Examples: 1999 or 2003</li>
			<li>@yday = numeric representation of the day of the year, 0 through 365</li>
			<li>@weekday = a full textual representation of the day of the week, Sunday through Saturday</li>
			<li>@month = a full textual representation of a month, January through December</li>
			</ul>'
    ),
    '#default_value' => variable_get('merge_comments_date_format', t(DEFAULT_DATE_FORMAT)),
    '#return_value' => 1,
    '#cols' => 80,
    '#rows' => 5
  );
	
	$form['merge_comments_op'] = array(
		'#type' => 'checkbox',
		'#title' => t('Enable original comment merging'),
		'#description' => t("If this is checked then it is also possible to merge the first comment on a node into the original comment. Otherwise merge comments is dissabled for that comment."),
		'#default_value' => variable_get('merge_comments_op', 0),
  );
	
  return system_settings_form($form);
}

/**
 * Validating the user's inputs in the admin form
 */
function merge_comments_admin_validate($form, &$form_state) {
  $maxchars = $form_state['values']['merge_comments_maxchars'];
  if (!is_numeric($maxchars)) {
    form_set_error('merge_comments_maxchars', t('You must enter an integer for the maximum number of characters.'));
  }
  else if ($maxchars < 0) {
    form_set_error('merge_comments_maxchars', t('Maximum number of characters must be positive or zero.'));
  }
  
  $maxsecs = $form_state['values']['merge_comments_maxsecs'];
  if (!is_numeric($maxsecs)) {
    form_set_error('merge_comments_maxsecs', t('You must enter an integer for the maximum number of seconds.'));
  }
  else if ($maxsecs < 0) {
    form_set_error('merge_comments_maxsecs', t('Maximum number of seconds must be positive or zero.'));
  }
	
	 $advsecs = $form_state['values']['merge_comments_adv_secs'];
  if (!is_numeric($advsecs)) {
    form_set_error('merge_comments_adv_secs', t('You must enter an integer for the maximum number of seconds.'));
  }
  else if ($advsecs < 0 || $advsecs > 59) {
    form_set_error('merge_comments_adv_secs', t('Maximum number of seconds must be between 0 and 59.'));
  }
	
	 $advmins = $form_state['values']['merge_comments_adv_mins'];
  if (!is_numeric($advmins)) {
    form_set_error('merge_comments_adv_mins', t('You must enter an integer for the maximum number of minutes.'));
  }
  else if ($advmins < 0 || $advmins > 59) {
    form_set_error('merge_comments_adv_mins', t('Maximum number of minutes must be between 0 and 59.'));
  }
	
	 $advhours = $form_state['values']['merge_comments_adv_hours'];
  if (!is_numeric($advhours)) {
    form_set_error('merge_comments_adv_hours', t('You must enter an integer for the maximum number of hours.'));
  }
  else if ($advhours < 0 || $advhours > 23) {
    form_set_error('merge_comments_adv_hours', t('Maximum number of hours must be between 0 and 23.'));
  }
	
	 $advdays = $form_state['values']['merge_comments_adv_days'];
  if (!is_numeric($advdays)) {
    form_set_error('merge_comments_adv_days', t('You must enter an integer for the maximum number of days.'));
  }
  else if ($advdays < 0 || $advdays > 364) {
    form_set_error('merge_comments_adv_days', t('Maximum number of days must be between 0 and 364.'));
  }
	
	 $advyears = $form_state['values']['merge_comments_adv_years'];
  if (!is_numeric($advyears)) {
    form_set_error('merge_comments_adv_years', t('You must enter an integer for the maximum number of years.'));
  }
  else if ($advyears < 0) {
    form_set_error('merge_comments_adv_years', t('Maximum number of years must be positive or zero.'));
  }
}


/**
 * Implementation of hook_comment(&$a1, $op).
 */
function merge_comments_comment(&$a1, $op)
{
	// when submitting a new comment
	if($op == "insert")
	{ 	
		// Only continue if this is an enabled content type
    $node = node_load($a1['nid']);
    $enabled_types = variable_get('merge_comments_node_types', drupal_map_assoc(array($node->type)));
    if (empty($enabled_types[$node->type])) {
      return;
    }
		//flag showing wether we are dealing with the first comment in a node that need to be merged with the node original comment
		$origcomment = false;
		// check the last comment made on this node
		$myNid = $a1['nid'];
		$myCid = $a1['cid'];
		$result = db_fetch_object(db_query("SELECT uid,cid,comment,timestamp,subject FROM {comments} WHERE timestamp IN (SELECT MAX(timestamp) FROM {comments} WHERE nid = $myNid AND cid <> $myCid)"));
		
		// If the query didn't get any results than this is the first comment on a node
		// If the user enables the object, attempt to merge the comment into the node's original comment
		if(!$result && variable_get('merge_comments_op',0))
		{
			$result = db_fetch_object(db_query("SELECT n.title AS subject,n.nid,n.uid,nr.timestamp,nr.body AS comment FROM {node} n, {node_revisions} nr WHERE n.nid = $myNid AND n.nid = nr.nid"));
			//set the flag
			$origcomment=true;
		}
		
		// continue if the last comment on this node was made by the same user that's submitting a comment now
		if(!$result || $result->uid != $a1['uid']){
			return;
		}
		
		// format the new, merged, comment
		$currentComment = t(
			variable_get('merge_comments_format',DEFAULT_FORMAT),
			array(
				'@username' => $a1['auhor'],
				'@new_text' => $a1['comment'],
				'@new_subj' => $a1['subject'],
				'@old_text' => $result->comment,
				'@old_subj' => $result->subject,
				'@old_date' => merge_comments_get_date($result->timestamp),
				'@new_date' => merge_comments_get_date($a1['timestamp'])
			)
		);
		
		$currentComment = addslashes($currentComment);
			
		//Check if the user specified conditions apply
		$maxchars = variable_get('merge_comments_maxchars',0);
		
		if(variable_get('merge_comments_adv_form',0)) // calculate the number of seconds from the advanced form
			$maxsecs= variable_get(merge_comments_adv_secs,0) + variable_get(merge_comments_adv_mins,0)*60 + variable_get(merge_comments_adv_hours,0)*3600 + variable_get(merge_comments_adv_days,0)*86400 + variable_get(merge_comments_adv_years,0)*31536000;
		else // use the simple form
			$maxsecs = variable_get('merge_comments_maxsecs',0);
						
		if((strlen($currentComment) <= $maxchars || $maxchars == 0) && ($a1['timestamp'] - $result->timestamp <= $maxsecs || $maxsecs == 0))
		{
			if(!$origcomment)
				db_query("UPDATE {comments} SET comment = '$currentComment' WHERE cid = $result->cid");
			else
				db_query("UPDATE {node_revisions} SET body = '$currentComment' WHERE nid = $result->nid");
				
			// delete the comment he just submitted(it has been merged)
			$myCid = $a1['cid'];
			db_query("DELETE FROM {comments} WHERE cid = $myCid");
		}
	}
	
}
 
 
/**
 * Helper function, determines what kind of date the admin wants and makes it so ...
 */ 
function merge_comments_get_date($timestamp)
{
	if(!merge_comments_custom_date) // we use the default date format
	{
		$size = variable_get('merge_comments_default_date_size',1); // get the desired date size
		if($size == 0)
			return format_date($timestamp,"small");
		if($size == 1)
			return format_date($timestamp,"medium");
		if($size == 2)
			return format_date($timestamp,"large");
	}
	else // we use a custom format
		return t(variable_get('merge_comments_date_format',DEFAULT_DATE_FORMAT),merge_comments_custom_date_args($timestamp));
}

				
/**
 * Helper function, returns an array of date arguments needed to format the custom date provided by the admin
 */
function merge_comments_custom_date_args($timestamp)
{
	$type="custom";
	$args = array(
		'@seconds' => format_date($timestamp,$type,'s'),
		'@minutes' => format_date($timestamp,$type,'i'),
		'@hours' => format_date($timestamp,$type,'H'),
		'@mday' => format_date($timestamp,$type,'d'),
		'@wdayS' => format_date($timestamp,$type,'w'),
		'@wdayM' => (format_date($timestamp,$type,'w')+6)%7,
		'@mon' => format_date($timestamp,$type,'m'),
		'@year' => format_date($timestamp,$type,'Y'),
		'@yday' => format_date($timestamp,$type,'z'),
		'@weekday' => format_date($timestamp,$type,'l'),
		'@month' => format_date($timestamp,$type,'F'),
		);
		
	return $args;
}
		