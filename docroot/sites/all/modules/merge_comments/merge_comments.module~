<?php

/**
 * @file
 * Automatically merges two consecutive comments made by the same user on the same node.
 *
 * The merging of the two comments is done under certain conditions. It can be enabled/disabled
 * for every content type. A maximum time limit between the creation dates of the two comments and
 * a maximum character limit for the merged comment can be set. The format used to merge two comments
 * can be customized, and certain roles can decide whether to disable merge_comments on a specific comment.
 */

define('MERGE_COMMENTS_DEFAULT_FORMAT',
"@old_text

------- comment titled:'@new_subj' was added on @new_create_date -------

@new_text"
);

define('MERGE_COMMENTS_DEFAULT_DATE_FORMAT',
'@weekday, @mon/@mday/@year - @hours:@minutes'
);

 /**
 * Implements hook_help().
 */
function merge_comments_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#merge_comments":
      $output .= '<p>' . t("The merge comments module provides the option of automatically merging two consecutive comments made by the same user in the same node. If enabled this can eliminate accidental double posts as well as serve as a last ditch measure against flooding.") . '</p>';
      $output .= '<p>' . t("You can decide under which conditions the comments will be merged, what format the newly merged comment will have and which users can disable the merge comments module from merging a specific comment. The customizable conditions are comprised of a maximum time limit between two comments that should be merged(so that you don't merge comments made a month apart), and a maximum character limit(so that you don't get a merged comment that is too long).") . '</p>';
      $output .= '<p>' . t("Additionally this module will take into account your comment hierarchy. So, if you have threaded comments enabled, they will be merged only if they have the same parent, or if a user is replying to his own comment.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function merge_comments_permission() {
  return array(
    'administer merge_comments' => array(
      'title' => t('Administer merge_comments'),
      'description' => t('Set the administrative settings for the merge comments module.'),
    ),
    'disable merge_comments' => array(
      'title' => t('Disable merge_comments'),
      'description' => t('Get a checkbox on your comment submit form which gives you the choice of disabling the merge_comments module for that specific comment.'),
    ),
  );
}


/**
 * Implements hook_menu().
 *
 * Creating an admin form for site-wide customization.
 */
function merge_comments_menu() {

  $items = array();

  $items['admin/config/system/merge_comments'] = array(
    'title' => 'Configure merge comments',
    'description' => 'Define when and how merge comments should work.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('merge_comments_admin'),
    'access arguments' => array('administer merge_comments'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for comment_form().
 *
 * Adds a checkbox when submitting a comment, allowing the user to enable/disable merge_comments
 */
function merge_comments_form_comment_form_alter(&$form, &$form_state) {
  // don't display the checkbox on edit forms
  if (isset($form_state['build_info']['args']['0']->cid)) {
    return;
  }
  global $user;
  // Only continue if user has permission.
  if (!(user_access('disable merge_comments'))) {
    return;
  }

  // Only continue if this is an enabled content type.
  $node = node_load($form['nid']['#value'] ? $form['nid']['#value'] : $form['nid']['#default_value']);
  $enabled_types = variable_get('merge_comments_node_types', drupal_map_assoc(array($node->type)));
  if (empty($enabled_types[$node->type])) {
    return;
  }

  // Add the checkbox.
  $form['merge_comments_disable'] = array(
    '#type' => 'checkbox',
    '#title' => t('disable merge_comments'),
    '#description' => t('Disable the use of merge_comments on this particular comment.'),
    '#default_value' => variable_get('merge_comments_disable', 0),
  );
}


/**
 * The page argument for the admin form
 *
 * Gives the admin the option of setting site-wide settings such as: which content_types to use
 * merge_comments on, the maximum time and character limits, and how to format the newly merged comment
 *
 * @return $form
 *    The form with all the elements that will be displayed on the merge_comments admin page
 */
function merge_comments_admin() {
  $form = array();

  // Only enable merge_comments for certain node types (by default all)
  $enabled_types = variable_get('comment_notify_node_types', FALSE);
  foreach (node_type_get_names() as $type => $name) {
    $checkboxes[$type] = check_plain($name);
    $default[] = $type;
  }

  $form['merge_comments_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types on which merge comments is enabled'),
    '#default_value' => variable_get('merge_comments_node_types', $default),
    '#options' => $checkboxes,
    '#description' => t('Content types which are enabled here will utilize the merge comments module by default.'),
  );

  $form['merge_comments_maxchars'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of characters of the merged comment'),
    '#default_value' => variable_get('merge_comments_maxchars', 0),
    '#size' => 10,
    '#maxlength' => 9,
    '#description' => t("The maximum number of characters the merged comment can have, if it would have more than this number of characters, the two comments won't be merged. Leave 0 for no limit."),
    '#required' => TRUE,
  );

  $form['merge_comments_maxsecs'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum elapsed time between the two comments, in seconds - Simple form'),
    '#default_value' => variable_get('merge_comments_maxsecs', 0),
    '#size' => 10,
    '#maxlength' => 9,
    '#description' => t("The maximum number of seconds between the comment dates of the two comments to be merged. If a larger number of seconds has elapsed, the comments won't be merged. Leave 0 for no limit."),
    '#required' => TRUE,
  );

  $form['merge_comments_field'] = array(
    '#type' => 'fieldset',
    '#title' => t('Maximum elapsed time between the two comments - Advanced form'),
    '#description' => t('Use this for large time intervals, the previous field will be ignored.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );

  $form['merge_comments_field']['merge_comments_adv_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the advanced form'),
    '#default_value' => variable_get('merge_comments_adv_form', 0),
    '#description' => t('Enable the advanced form and ignore the simple one.')
  );

  $form['merge_comments_field']['merge_comments_adv_years'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of years between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_years', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Insert values between 0 and 99."),
    '#required' => TRUE,
  );

  $form['merge_comments_field']['merge_comments_adv_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of days between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_days', 0),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("Insert values between 0 and 364."),
    '#required' => TRUE,
  );

  $form['merge_comments_field']['merge_comments_adv_hours'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of hours between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_hours', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Insert values between 0 and 23."),
    '#required' => TRUE,
  );

  $form['merge_comments_field']['merge_comments_adv_mins'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of minutes between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_mins', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Insert values between 0 and 59."),
    '#required' => TRUE,
  );

  $form['merge_comments_field']['merge_comments_adv_secs'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of seconds between the two comments'),
    '#default_value' => variable_get('merge_comments_adv_secs', 0),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Insert values between 0 and 59."),
    '#required' => TRUE,
  );

  $form['merge_comments_field1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Define a format for merging the comments'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );

  $form['merge_comments_field1']['merge_comments_format'] = array(
    '#type' => 'textarea',
    '#title' => t('The format used to merge the comments'),
    '#description' => t(
      "Define the merge format any way you wish, using normal characters as well as these replaceable values(this won't make much sense if you don't include at least the old and new text variables):
      <ul>
      <li>@username = the name of the user who commented the comment</li>
      <li>@new_text = the text of the newly commented comment</li>
      <li>@new_subj = the subject of the newly commented comment</li>
			<li>@old_text = the text of the previously commented comment</li>
      <li>@old_subj = the subject of the previously commented comment</li>
      <li>@old_create_date = the date of the previous comment in the specified format</li>
      <li>@old_edit_date = the date the previous comment was last edited, in the specified format</li>
			<li>@new_create_date = the date of the new comment in the specified format</li>
			</ul>"
    ),
    '#default_value' => variable_get('merge_comments_format', MERGE_COMMENTS_DEFAULT_FORMAT),
    '#return_value' => 1,
    '#cols' => 80,
    '#rows' => 5
  );

  $form['merge_comments_field1']['merge_comments_default_date_size'] = array(
    '#type' => 'radios',
    '#title' => t('The size of your dates'),
    '#default_value' => variable_get('merge_comments_default_date_size', 1),
    '#options' => array(t('Small'), t('Medium'), t('Large')),
    '#description' => t('Choose which of the three default date sizes you would like to use, this only works if you are using the default date format.')
  );

  $form['merge_comments_field1']['merge_comments_field2'] = array(
    '#type' => 'fieldset',
    '#title' => t('Define a custom date format'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );

  $form['merge_comments_field1']['merge_comments_field2']['merge_comments_custom_date'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use a custom date format'),
    '#default_value' => variable_get('merge_comments_custom_date', 0),
    '#description' => t('Define your own date format, as opposed to using the default format seen throughout your site.')
  );

  $form['merge_comments_field1']['merge_comments_field2']['merge_comments_date_format'] = array(
    '#type' => 'textarea',
    '#title' => t('The format used for the dates'),
    '#description' => t(
      'Above is an example of a custom date. You can define it any way you wish using normal characters as well as the following replaceable variables:
      <ul>
      <li>@seconds = numeric representation of seconds, 0 to 59</li>
			<li>@minutes = numeric representation of minutes,	0 to 59</li>
			<li>@hours = numeric representation of hours, 0 to 23</li>
			<li>@mday = numeric representation of the day of the month, 1 to 31</li>
			<li>@wdayS = numeric representation of the day of the week, starting with Sunday, 0 (for Sunday) through 6 (for Saturday)</li>
			<li>@wdayM = numeric representation of the day of the week, starting with Monday, 0 (for Monday) through 6 (for Sunday)</li>
			<li>@mon = numeric representation of a month, 1 through 12</li>
			<li>@year = a full numeric representation of a year, 4 digits, Examples: 1999 or 2003</li>
			<li>@yday = numeric representation of the day of the year, 0 through 365</li>
			<li>@weekday = a full textual representation of the day of the week, Sunday through Saturday</li>
			<li>@month = a full textual representation of a month, January through December</li>
			</ul>'
    ),
    '#default_value' => variable_get('merge_comments_date_format', MERGE_COMMENTS_DEFAULT_DATE_FORMAT),
    '#return_value' => 1,
    '#cols' => 80,
    '#rows' => 5
  );

  return system_settings_form($form);
}

/**
 * Validating the user's inputs in the admin form
 *
 * Some inputs won't be accepted, for instance negative maximum characters or time limit.
 *
 * @param $form
 *    Nested array of form elements that comprise the form.
 * @param $form_state
 *    A keyed array containing the current state of the form.
 */
function merge_comments_admin_validate($form, &$form_state) {
  $maxchars = $form_state['values']['merge_comments_maxchars'];
  if (!is_numeric($maxchars)) {
    form_set_error('merge_comments_maxchars', t('You must enter an integer for the maximum number of characters.'));
  }
  elseif ($maxchars < 0) {
    form_set_error('merge_comments_maxchars', t('Maximum number of characters must be positive or zero.'));
  }

  $maxsecs = $form_state['values']['merge_comments_maxsecs'];
  if (!is_numeric($maxsecs)) {
    form_set_error('merge_comments_maxsecs', t('You must enter an integer for the maximum number of seconds.'));
  }
  elseif ($maxsecs < 0) {
    form_set_error('merge_comments_maxsecs', t('Maximum number of seconds must be positive or zero.'));
  }

  $advsecs = $form_state['values']['merge_comments_adv_secs'];
  if (!is_numeric($advsecs)) {
    form_set_error('merge_comments_adv_secs', t('You must enter an integer for the maximum number of seconds.'));
  }
  elseif ($advsecs < 0 || $advsecs > 59) {
    form_set_error('merge_comments_adv_secs', t('Maximum number of seconds must be between 0 and 59.'));
  }

  $advmins = $form_state['values']['merge_comments_adv_mins'];
  if (!is_numeric($advmins)) {
    form_set_error('merge_comments_adv_mins', t('You must enter an integer for the maximum number of minutes.'));
  }
  elseif ($advmins < 0 || $advmins > 59) {
    form_set_error('merge_comments_adv_mins', t('Maximum number of minutes must be between 0 and 59.'));
  }

  $advhours = $form_state['values']['merge_comments_adv_hours'];
  if (!is_numeric($advhours)) {
    form_set_error('merge_comments_adv_hours', t('You must enter an integer for the maximum number of hours.'));
  }
  elseif ($advhours < 0 || $advhours > 23) {
    form_set_error('merge_comments_adv_hours', t('Maximum number of hours must be between 0 and 23.'));
  }

  $advdays = $form_state['values']['merge_comments_adv_days'];
  if (!is_numeric($advdays)) {
    form_set_error('merge_comments_adv_days', t('You must enter an integer for the maximum number of days.'));
  }
  elseif ($advdays < 0 || $advdays > 364) {
    form_set_error('merge_comments_adv_days', t('Maximum number of days must be between 0 and 364.'));
  }

  $advyears = $form_state['values']['merge_comments_adv_years'];
  if (!is_numeric($advyears)) {
    form_set_error('merge_comments_adv_years', t('You must enter an integer for the maximum number of years.'));
  }
  elseif ($advyears < 0) {
    form_set_error('merge_comments_adv_years', t('Maximum number of years must be positive or zero.'));
  }
}

/**
 * Implements hook_comment_presave().
 *
 * Decides whether this comment needs to be merged and, if so, modifies the $comment parameter
 * so that the previous comment is edited instead of a new one being creating.
 */
function merge_comments_comment_presave($comment) {
  //If the comment is being edited stop here.
  if (isset($comment->cid)) {
    return;
  }

  // Only continue if this is an enabled content type.
  $node = node_load($comment->nid);
  $enabled_types = variable_get('merge_comments_node_types', drupal_map_assoc(array($node->type)));
  if (empty($enabled_types[$node->type])) {
    return;
  }

  // If user has permission to disable merge_comments see if he has done so, and if yes, exit.
  global $user;
  if (user_access('disable merge_comments')) {
    if ($comment->merge_comments_disable) {
      return;
    }
  }
  $result = 0;
  // get the type of the current node
  $record = db_query("SELECT type FROM {node} WHERE nid = :n", array(':n' => $comment->nid));
  // Get the result as an object.
  foreach ($record as $r) {
    $result = $r;
  }

  // Check if threaded comments are disabled for this content type, or the comment is in reply to the node.
  if (!variable_get ('comment_default_mode_' . $result->type, 1)) {
    // Threading isn't enabled, check the last comment made on this node.
    $record = db_query("SELECT uid,cid,created,changed,subject,pid,status FROM {comment} WHERE created IN (SELECT MAX(created) FROM {comment} WHERE nid = :nid)", array(':nid' => $comment->nid));
    foreach ($record as $r)
      $result = $r;

    // If the query didn't get any results then this is the first comment on a node and, thus, can't be merged
    if (!$result) {
      return;
    }
  }
  else {
    // If the pid is 0 then this is a reply to the node
    if (!$comment->pid) {
      $record = db_query("SELECT uid,cid,created,changed,subject,pid,status FROM {comment} WHERE created IN (SELECT MAX(created) FROM {comment} WHERE pid = :pid AND nid = :nid)", array(':pid' => '0', ':nid' => $comment->nid));
      foreach ($record as $r)
        $result = $r;
    }
    else {
      // Check if the user has replied to his own comment.
      $record = db_query("SELECT uid,cid,created,changed,subject,pid,status FROM {comment} WHERE cid = :pid", array(':pid' => $comment->pid));
      foreach ($record as $r) {
        $result = $r;
      }

      if ($result->uid != $comment->uid) {
        //If the user didn't reply to his own comment, we get the last comment made with the same parent as his comment.
        $record = db_query("SELECT uid,cid,created,changed,subject,pid,status FROM {comment} WHERE created IN (SELECT MAX(created) FROM {comment} WHERE pid = :pid)", array(':pid' => $comment->pid));
        foreach ($record as $r) {
          $result = $r;
        }
      }
    }
  }

  // Continue if the comment we should merge with was made by the same user that's submitting a comment now.
  if ($result->uid != $comment->uid) {
    return;
  }
  // Get the body of the comment we are merging with.
  $record = db_query("SELECT comment_body_value FROM {field_data_comment_body} WHERE entity_id = :eid AND etid IN (SELECT etid FROM {field_config_entity_type} WHERE type = 'comment')", array(':eid' => $result->cid));
  foreach ($record as $r) {
    $oldComment = $r;
  }

  // Format the new, merged, comment.
  $currentComment = str_replace(
    array(
      '@username',
      '@new_text',
      '@new_subj',
      '@old_text',
      '@old_subj',
      '@old_create_date',
      '@old_edit_date',
      '@new_create_date',
    ),
    array(
      $comment->name,
      $comment->comment_body[$comment->language][0]['value'],
      $comment->subject,
      $oldComment->comment_body_value,
      $result->subject,
      merge_comments_get_date($result->created),
      merge_comments_get_date($result->changed),
      merge_comments_get_date($comment->created)
    ),
    variable_get('merge_comments_format', MERGE_COMMENTS_DEFAULT_FORMAT)
  );

  $currentComment = drupal_html_to_text($currentComment);

  //Get the user specified character limit.
  $maxchars = variable_get('merge_comments_maxchars', 0);

  //Check if the user is using the advanced time form and if yes calculate the result.
  if (variable_get('merge_comments_adv_form', 0)) {
    $maxsecs= variable_get('merge_comments_adv_secs', 0) + variable_get('merge_comments_adv_mins', 0)*60 + variable_get('merge_comments_adv_hours', 0)*3600 + variable_get('merge_comments_adv_days', 0)*86400 + variable_get('merge_comments_adv_years', 0)*31536000;
  }

  // Otherwise get the result from the simple time form.
  else {
    $maxsecs = variable_get('merge_comments_maxsecs', 0);
  }

  //Check if the user specified conditions apply, and if yes modify the comment
  if ((drupal_strlen($currentComment) <= $maxchars || $maxchars == 0) && ($comment->created - $result->created <= $maxsecs || $maxsecs == 0)) {
    $comment->cid = $result->cid;
    $comment->subject = $result->subject;
    $comment->created = $result->created;
    $comment->pid = $result->pid;
    $comment->status = $result->status;
    $comment->comment_body[$comment->language][0]['value'] = $currentComment;
  }
}


/**
 * Helper function, used to set date format
 *
 * If we are using the standard date format, it determines what size to make it, otherwise
 * it makes the date format according to user specifications.
 *
 * @param $timestamp
 *    The timestamp of the date we are formatting.
 *
 * @return $date
 *    The formatted date.
 */
function merge_comments_get_date($timestamp) {
  // If the admin has selected the default date format set the size.
  if (!variable_get('merge_comments_custom_date', 0)) {
    $size = variable_get('merge_comments_default_date_size', 1);
    if ($size == 0) {
      $date = format_date($timestamp, 'small');
    }
    if ($size == 1) {
      $date = format_date($timestamp, 'medium');
    }
    if ($size == 2) {
      $date = format_date($timestamp, 'large');
    }
  }
  // Otherwise set the custom date format.
  else
    $date = str_replace(
      array(
        '@seconds',
        '@minutes',
        '@hours',
        '@mday',
        '@wdayS',
        '@wdayM',
        '@mon',
        '@year',
        '@yday',
        '@weekday',
        '@month',
      ),
      merge_comments_custom_date_args($timestamp),
      variable_get('merge_comments_date_format', MERGE_COMMENTS_DEFAULT_DATE_FORMAT)
    );
return $date;
}


/**
 * Helper function, used to set a custom date
 *
 * Returns an array of date arguments needed to format the custom date provided by the admin.
 *
 * @param $timestamp
 *    The timestamp of the date we are formatting.
 *
 * @return $args
 *    The date arguments, based on the provided timestamp, needed to create the custom date.
 */
function merge_comments_custom_date_args($timestamp) {
  $type='custom';
  $args = array(
    format_date($timestamp, $type, 's'),
    format_date($timestamp, $type, 'i'),
    format_date($timestamp, $type, 'H'),
    format_date($timestamp, $type, 'd'),
    format_date($timestamp, $type, 'w'),
    (format_date($timestamp, $type, 'w')+6)%7,
    format_date($timestamp, $type, 'm'),
    format_date($timestamp, $type, 'Y'),
    format_date($timestamp, $type, 'z'),
    format_date($timestamp, $type, 'l'),
    format_date($timestamp, $type, 'F'),
    );
  return $args;
}
