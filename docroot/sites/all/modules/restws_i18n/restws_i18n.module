<?php

/**
 * @file
 * RESTful web services support for translations.
 */

/**
 * Implements hook_restws_request_alter().
 *
 * Add a source translation.
 *
 * @see restws_handle_request()
 */
function restws_i18n_restws_request_alter(array &$request) {
  $resource_name = $request['resource']->resource();
  $op = $request['op'];
  $format = $request['format'];

  // Intercept payload and convert for manipulation.
  $payload_obj = json_decode($request['payload']);

  if (!user_access('access resource ' . $resource_name) || !$request['resource']->access($request['op'], $request['id'])) {
    // Anticipate security access check in restws.module and return without
    // further processing if it won't pass.
    return;
  }

  if (isset($payload_obj->source)) {
    $message = $status_message = "";

    $source = (array) $payload_obj->source;
    unset($payload_obj->source);
    $new_payload = json_encode($payload_obj);

    try {
      $method = $op . 'Resource';
      if ($op == 'create') {
        $target_resource_json = $format->$method($request['resource'], $new_payload);
        $status_message = '201 Created';
      }
      elseif ($op == 'query') {
        // This condition of querying and sending a source in the payload
        // should not happen, but returning a proper payload anyway.
        $request['payload'] = $new_payload;
        return;
      }
      else {
        $target_resource_json = $format->$method($request['resource'], $request['id'], $new_payload);
      }
      $target_resource = json_decode($target_resource_json);
      if (isset($target_resource->id)) {
        $nid = $target_resource->id;
        watchdog('restws_i18n', "target_resource: " . print_r($target_resource, TRUE), NULL, WATCHDOG_DEBUG);
      }
      else {
        $nid = $request['id'];
      }
      watchdog('restws_i18n', "target nid: $nid", NULL, WATCHDOG_DEBUG);

      $node = node_load($nid);
      restws_i18n_select_translation($node, $source);

      print $target_resource_json;
      drupal_add_http_header('Content-Type', $format->mimeType());
    }
    catch (RestWSException $e) {
      $message = check_plain($e->getHTTPError()) . ': ' . check_plain($e->getMessage());
      $status_message = $e->getHTTPError();
    }
    catch (Exception $e) {
      $message = check_plain($e->getMessage());
    }

    // Then forced exit.
    restws_terminate_request($status_message, $message);
  }
}

/**
 * Update/delete the translation set.
 *
 * @see i18n_node_select_translation_submit()
 */
function restws_i18n_select_translation($node, $tnid_form) {
  $current = $remove = array();
  $tnid = reset($tnid_form);

  if (!empty($tnid_form) && is_array($tnid_form) && empty($tnid)) {
    $remove[] = $node->nid;
  }

  $translations = $tnid ? translation_node_get_translations($tnid) : array(
    $node->language => $node);
  foreach ($translations as $trans) {
    $current[$trans->language] = $trans->nid;
  }
  $create = array($node->language => $node->nid) + $tnid_form;
  // Compute the difference to see which are the new translations and which ones
  // to remove.
  $update = array_diff_assoc($create, $current);

  // The tricky part: If the existing source is not in the new set, we need to
  // create a new tnid.
  if ($tnid) {
    $update_db = $update;
  }
  else {
    // Create new tnid, which is the source node.
    $tnid = $node->nid;
    $update_db = $create;
  }
  // Now update values for all nodes.
  if (!empty($update_db)) {
    db_update('node')->fields(array('tnid' => $tnid))->condition('nid', $update_db)->execute();
    entity_get_controller('node')->resetCache($update_db);
    if (count($update)) {
      watchdog('restws_i18n', format_plural(count($update), 'Added a node to the translation set.', 'Added @count nodes to the translation set.'), NULL, WATCHDOG_INFO);
    }
  }
  if (!empty($remove)) {
    db_update('node')->fields(array('tnid' => 0))->condition('nid', $remove)->execute();
    entity_get_controller('node')->resetCache($remove);
    watchdog('restws_i18n', 'Removed node @nid from the translation set.', array(
      '@nid' => reset($remove)), WATCHDOG_INFO);
  }
}
