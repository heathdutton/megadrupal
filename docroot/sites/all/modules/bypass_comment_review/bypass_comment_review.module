<?php
/**
 * @file
 * Allows enable bypass comment review for certain nodes.
 */

/**
 * Default sitewide value.
 */
define('BYPASS_COMMENT_REVIEW_DEFAULT', 0);

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bypass_comment_review_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $form['comment']['bypass_comment_review'] = array(
      '#type' => 'checkbox',
      '#title' => t('Post comment without approval'),
      '#default_value' => variable_get('bypass_comment_review_' . $form['#node_type']->type, BYPASS_COMMENT_REVIEW_DEFAULT),
      '#description' => t('Allow post comments without approval for all users.'),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function bypass_comment_review_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];
  $form['comment_settings']['bypass_comment_review'] = array(
    '#type' => 'checkbox',
    '#title' => t('Post comment without approval'),
    '#default_value' => bypass_comment_review_get_node_value($node->nid, $node->type),
    '#description' => t('Allow post comments without approval for all users.'),
    '#states' => array(
      'visible' => array(
        ':input[name="comment"]' => array('value' => COMMENT_NODE_OPEN),
      ),
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function bypass_comment_review_node_insert($node) {
  bypass_comment_review_node_action($node);
}


/**
 * Implements hook_node_update().
 */
function bypass_comment_review_node_update($node) {
  bypass_comment_review_node_action($node);
}

/**
 * Implements hook_node_delete().
 */
function bypass_comment_review_node_delete($node) {
  bypass_comment_review_remove_node_value($node->nid);
}

/**
 * Update or add bypass comment review value.
 */
function bypass_comment_review_node_action($node) {
  if (!isset($node->bypass_comment_review)) {
    return;
  }

  bypass_comment_review_set_node_value($node->nid, $node->bypass_comment_review);
}


/**
 * Implements hook_module_implements_alter().
 */
function bypass_comment_review_module_implements_alter(&$implementations, $hook) {
  // Name of the hook.
  if ($hook != 'form_alter') {
    return;
  }
  $module = 'bypass_comment_review';
  $group = $implementations[$module];
  unset($implementations[$module]);
  $implementations[$module] = $group;
}

/**
 * Set node value.
 */
function bypass_comment_review_set_node_value($nid, $status) {
  db_merge('bypass_comment_review')
    ->key(array('nid' => $nid))
    ->fields(
      array(
        'nid' => $nid,
        'status' => $status,
      )
    )
    ->execute();
}

/**
 * Remove node value.
 */
function bypass_comment_review_remove_node_value($nid) {
  db_delete('bypass_comment_review')
    ->condition('nid', $nid)
    ->execute();
}

/**
 * Set node value.
 */
function bypass_comment_review_get_node_value($nid, $type) {
  $default_value = variable_get('bypass_comment_review_' . $type, BYPASS_COMMENT_REVIEW_DEFAULT);

  $status = db_select('bypass_comment_review', 'b')
    ->fields('b', array('status'))
    ->condition('b.nid', $nid)
    ->execute()
    ->fetchField();

  // Return default value when no values in database.
  return $status === FALSE ? $default_value : $status;
}

/**
 * Implements hook_comment_presave().
 */
function bypass_comment_review_comment_presave($comment) {
  $node = node_load($comment->nid);
  $access = bypass_comment_review_get_node_value($node->nid, $node->type);

  if (!empty($access)) {
    $comment->status = COMMENT_PUBLISHED;
  }
}
