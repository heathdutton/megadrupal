<?php

/**
 * @file
 * Link icons module file.
 */

/**
 * Implements hook_init().
 *
 * Add css on pages except administration theme.
 */
function linkmeta_init() {
  global $conf;
  global $theme_info;

  // Add css if administration theme is not active theme.
  if ($conf['admin_theme'] != $theme_info->name) {
    module_load_include('inc', 'linkmeta', 'linkmeta.generate_css');

    drupal_add_css(linkmeta_generate_css(), 'inline');
  }
}

/**
 * Implements hook_menu().
 */
function linkmeta_menu() {
  $items = array();

  $items['admin/structure/linkmeta'] = array(
    'title' => 'Link meta display filter',
    'description' => 'Put links behind icons.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('linkmeta_admin_page', NULL),
    'access arguments' => array('administer link meta display filter'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'linkmeta.admin.inc',
  );

  $items['linkmeta/css'] = array(
    'title' => 'Link meta display filter css',
    'page callback' => 'linkmeta_css_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'linkmeta.generate_css.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function linkmeta_permission() {
  return array(
    'administer link meta display filter' => array(
      'title' => t('Administer link meta display filter'),
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function linkmeta_filter_info() {
  $filters = array();

  $filters['linkmeta'] = array(
    'title' => t('Link meta display filter'),
    'process callback' => '_linkmeta_process',
  );

  return $filters;
}

/**
 * Scan for images and insert corresponding classes.
 */
function _linkmeta_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $base_url;

  $dom = new DOMDocument();
  $dom->loadHTML('<?xml encoding="UTF-8">' . $text);
  foreach ($dom->childNodes as $item) {
    if ($item->nodeType == XML_PI_NODE) {
      $dom->removeChild($item);
    }
  }
  $dom->encoding = 'UTF-8';

  $a_tags = $dom->getElementsByTagName('a');
  foreach ($a_tags as $a) {

    // Get url and class attributes from a tag.
    $url = $a->getAttribute('href');
    $class = $a->getAttribute('class');
    $url_host = parse_url($url, PHP_URL_HOST);
    $base_url_host = parse_url($base_url, PHP_URL_HOST);
    $url_scheme = drupal_strtolower(parse_url($url, PHP_URL_SCHEME));

    // If only hash then skip.
    if (drupal_substr($url, 0, 1) === '#') {
      continue;
    }

    // Skip if not http://, https://, //, relative or absolute path.
    if (!empty($url_scheme) && $url_scheme !== 'http' && $url_scheme !== 'https') {
      continue;
    }

    // If link attatched to an image then skip.
    $img_tags = $a->getElementsByTagName('img');
    if ($img_tags->length > 0) {
      continue;
    }

    // Detect if link is internal or external.
    $internal = (($url_host == $base_url_host || empty($url_host)) ? TRUE : FALSE);
    if ($internal) {
      if (strpos($class, 'icon-internal') === FALSE) {
        $class .= ' icon-internal';
      }
    }
    else {
      if (strpos($class, 'icon-external') === FALSE) {
        $class .= ' icon-external';
      }
    }

    // Look for different kinds of link extensions.
    $current_url = pathinfo(strtok($url, '?'));
    $extension = '';
    if (isset($current_url['extension'])) {
      $extension = preg_replace('/[^a-z]/i', '', drupal_strtolower($current_url['extension']));
      $types = variable_get('linkmeta_types', array());
      if (!in_array($extension, $types)) {
        $types[] = $extension;
        variable_set('linkmeta_types', $types);
      }

      if (strpos($class, 'icon-' . $extension) === FALSE) {
        $class .= ' icon-' . $extension;
      }
    }

    // Set class variable as class attribute for a tag.
    $a->setAttribute('class', $class);

    // Enrichments.
    $enrichments = array();
    // File size.
    if ((bool) variable_get('linkmeta_file_size', 0) && $internal) {
      $size = filesize(trim($a->getAttribute('href'), '/'));
      if ($size) {
        $enrichments[] = drupal_strtoupper(format_size($size));
      }
    }

    // File extension.
    if ((bool) variable_get('linkmeta_file_extension', 0) && !empty($extension)) {
      $enrichments[] = drupal_strtoupper($extension);
    }

    if (!empty($enrichments)) {
      $enrichment = $dom->createElement('span', ' (' . implode(', ', $enrichments) . ')');
      $enrichment->setAttribute('class', 'file-enrichments');
      $a->parentNode->insertBefore($enrichment, $a->nextSibling);
    }

  }

  return preg_replace('~<(?:!DOCTYPE|/?(?:html|head|body))[^>]*>\s*~i', '', $dom->saveHTML());
}
