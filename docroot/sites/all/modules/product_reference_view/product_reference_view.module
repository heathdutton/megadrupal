<?php

/**
 * @file
 * A module letting the field type commerce_product_reference be able to use views as it's source.
 *
 * Specifically product_reference_view provides a widget for the commerce_product_reference  
 * called 'product_reference_view'. Upon activation of the widget, it does the following things:
 * 
 * a. instantiate a corresponding viewfield field_name field_rsrvd_prdct_rfrnc_srcview
 * b. creates/updates a record on schema product_reference_view to track its relation. see schema @file product_reference_view.install
 * c. for this module purposes all instances of field_rsrvd_prdct_rfrnc_srcview defaults to hidden , user can still change the display settings
 * d. on the node edit/create form the result set (array of product ids) of the field_rsrvd_prdct_rfrnc_srcview will be transferred to its
 * corresponding commerce_product_reference field. Remember commerce_product_reference field expects product ids.
 */
module_load_include('inc', 'product_reference_view');

/**
 * Implements hook_field_widget_info().
 */
function product_reference_view_field_widget_info() {
  return array(
    'product_reference_view_select' => array(
      'label' => 'Use A Viewfield Source',
      'field types' => array('commerce_product_reference'),
    ),
  );
}

/**
 * Implements hook_field_update_instance().
 * Assumption: one entity only has one commerce_product_reference field instance.
 * @link http://drupal.org/node/1260046#comment-4907274
 * @link http://drupal.org/node/1260046#comment-4931008
 * @param type $instance
 * @param type $prior_instance 
 */
function product_reference_view_field_update_instance($instance, $prior_instance) {
  if ( ( $instance['widget']['type'] != 'product_reference_view_select' ) ) {
    return;
  }    
  /* get all the other field instances attached to this entity
   * @link http://api.drupal.org/api/drupal/modules--field--field.info.inc/function/_field_info_collate_fields/7
   * field_info_instances only return non-deleted instances; for now create another instance for field viewsource
   * watchout ramifications on issue queue.
   */
  $field_info_instances = field_info_instances($instance['entity_type'], $instance['bundle']);
  // if there is "no" corresponding viewsource reserved field "field_rsrvd_prdref_srcview" in the entity; add one
  if ( @empty($field_info_instances['field_rsrvd_prdref_srcview']) ) {
    // add new corresponding viewfield instance here. $corresponding_viewfield_instance
    foreach ( _product_reference_view_viewfield_scaffold_instance($instance['entity_type'], $instance['bundle'], $instance['label']) as $corresponding_viewfield_instance ) {
      $corresponding_viewfield_instance = field_create_instance($corresponding_viewfield_instance);
    }    
  } 
}

/**
 * Implements hook_entity_presave($entity, $type)
 * @todo does our module need to enforce cardinality of core field api already does that?
 */
function product_reference_view_entity_presave($entity, $type) {  
  // criteria done to prevent resource waste.
  if (@empty($entity->field_rsrvd_prdref_srcview)) {
    return;    
  }
  $commerce_product_reference_field = '';
  $entity_type = $type;
  $bundle_name = $entity->type;    
  $temp_source_products = array();
  $source_products = array();
  $view_sources = field_get_items($entity_type, $entity, 'field_rsrvd_prdref_srcview', $entity->language);
  if (empty($view_sources)) {
    return;
  }  
  $field_info_instances = field_info_instances($entity_type, $bundle_name);
  foreach ( $field_info_instances as $field_name => $field_instance ) {
    if ( $field_instance['widget']['type'] == 'product_reference_view_select' ) {
      $commerce_product_reference_field = $field_name;
    }
  }
  if (empty($commerce_product_reference_field)) {
    return;
  }  
  if (@!isset($entity->$commerce_product_reference_field)) {
    return;
  }
  foreach ( $view_sources as $item ) {
    $result = array();
    // @internal watchout for viewfield module api changes here.
    list($view_name, $view_display) = explode('|', $item['vname'], 2);
    $view_arguments = _viewfield_get_view_args($item['vargs'], $entity_type, $entity);
    $result = views_get_view_result($view_name, $view_display, $view_arguments);    
    // we expect a list of products here. if the result set is not a product id, we ignore.
    foreach ( $result as $product ) {
      if ( @!empty($product->product_id) ) {
        $temp_source_products[] = $product->product_id;
      }
    }
  }
  // get rid of the dups
  $temp_source_products = array_unique($temp_source_products);
  // parse to comerce_product_reference expected array
  foreach ( $temp_source_products as $product_id ) {
    $source_products[] = array('product_id' => $product_id );
  }
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $wrapper->$commerce_product_reference_field = $source_products;
}