<?php

/**
 * @file
 */

function bot_weather_menu() {
  $items['admin/config/bot/weather'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure the weather API.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_weather_settings'),
    'title'             => 'Bot Weather',
  );
  return $items;
}

function bot_weather_settings() {
  // We should just switch between APIs here.
  $form['bot_weather_units'] = array(
    '#type' => 'select',
    // @see https://developer.forecast.io/docs/v2
    '#options' => array('auto' => t('Based on location'), 'si' => t('SI'), 'us' => t('US')),
    '#title' => t('Units'),
    '#description' => t('Define what units to report in'),
    '#default_value' => variable_get('bot_weather_units', 'auto'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_help().
 */
function bot_weather_help($path, $args) {
  switch ($path) {
    case 'irc:features':
      return array(t('Weather'));
    case 'irc:features#weather':
      return t('Get weather forecast on IRC. Syntax: <botname> weather in <address> (optional: at <date>)');
  }
}

function bot_weather_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;
  $addressed = bot_name_regexp();

  // Bot: weather at Boston
  if (preg_match("/^$addressed weather at (\w+)/i", trim($data->message), $matches)) {
    bot_weather_respond($to, $matches[2]);
  }
  // Bot: weather Boston
  else if (preg_match("/^$addressed weather (\w+)/i", trim($data->message), $matches)) {
    bot_weather_respond($to, $matches[2]);
  }
  // Bot: weather at Boston on 4rd of June
  else if (preg_match_all("/^$addressed weather at (\w+) on (.*)/i", trim($data->message), $matches)) {
  }
}

/**
 * All responses are available via a query.
 */
function bot_weather_irc_msg_query($data) {
  bot_weather_irc_msg_channel($data, TRUE);
}

function bot_weather_respond($to, $city) {
  if (($library = libraries_load('forecast.io-php-api')) && !empty($library['loaded'])) {
    $temperature = bot_weather_retreive_weather($city);
    $unit = variable_get('bot_weather_units', 'si') == 'si' ? '˚C' : '˚F';

    bot_message($to, t('Currently its @degrees@unit in @city',
      array('@degrees' => $temperature, '@unit' => $unit, '@city' => $city)));
  }
  else {
    bot_message($to, t('I am sorry, the weather API has not been set up correctly.'));
  }
}

function bot_weather_retreive_weather($address) {
  // First geo-decode the city.
  $point = geocoder('google', $address);
  $coordinates = $point->coords;

  //@TODO Ask which API we should use once thats implemented.
  // Then get the API
  $api_key = variable_get('forecastio_api_key', '');
  $forecast = new ForecastIO($api_key);

  $condition = $forecast->getCurrentConditions($coordinates[1], $coordinates[0]);

  if (!$condition) {
    return FALSE;
  }
  else {
    return $condition->getTemperature();
  }
}
