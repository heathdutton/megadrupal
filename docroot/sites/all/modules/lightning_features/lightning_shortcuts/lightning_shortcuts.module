<?php
/**
 * @file
 * Code for the lightning_shortcuts feature.
 */

/**
 * Implements hook_user_role_insert.
 * It's possible that some roles will not be available on install, this hook handles that case.
 */
function lightning_shortcuts_user_role_insert($role) {
  // Get defined shortcut sets
  $shortcut_sets = lightning_shortcuts_get_shortcut_sets();

  // Check to see if this role is part of that set
  if (isset($shortcut_sets[$role->name])) {
    // Add this role/set to the shortcutperrole variable
    $shortcutperrole = variable_get('shortcutperrole', array());

    // Save the relevant shortcut set
    $shortcut_set = lightning_shortcuts_save_shortcut_set($role->name, $shortcut_sets[$role->name]);

    // Associate this role id with our shortcut set and save
    $shortcutperrole[$role->rid] = $shortcut_set->set_name;
    variable_set('shortcutperrole', $shortcutperrole);
  }
}

/**
 * Helper function to programmatically save a shortcut set
 *
 * @param string $title The shortcut title
 * @param array $shortcuts An associative array of shortcuts in the format $path => $display_name
 *
 * @return Object The new shortcut set
 */
function lightning_shortcuts_save_shortcut_set($title, $shortcuts) {
  // Create the shortcut set class
  $shortcut_set = new stdClass();
  $shortcut_set->title = ucfirst($title);
  $shortcut_set->links = array();

  // For each path/title pair, create a new link
  foreach ($shortcuts as $path => $name) {
    $shortcut_set->links[] = array(
      'link_path' => $path,
      'link_title' => $name
    );
  }

  // Save the shortcut set
  shortcut_set_save($shortcut_set);
  return $shortcut_set;
}

/**
 * Helper function to return all shortcutperrole shortcut sets included with the module.
 *
 * @return array An array representing role-based shortcut sets
 */
function lightning_shortcuts_get_shortcut_sets() {
  $shortcut_sets = array(
    'administrator' => array(
      'node/add' => 'Add Content',
      'admin/reports/status' => 'Status Report',
      'admin/config/development/performance' => 'Performance',
      'admin/config/lightning/clear-cache' => 'Clear Caches'
    ),
    'curator' => array(
      'node/add' => 'Add Content',
      'admin/content' => 'Find Content',
    ),
    'reviewer' => array(
      'node/add' => 'Add Content',
      'admin/content' => 'Find Content',
    ),
    'marketer' => array(
      'node/add' => 'Add Content',
      'admin/content' => 'Find Content',
    ),
  );

  // Add some other shortcuts accordingly.
  foreach ($shortcut_sets as $role => $shortcuts) {
    // Add Landing Page shortcut where applicable.
    if (module_exists('lightning_landing')) {
      $shortcut_sets[$role]['node/add/landing'] = 'Add Landing Page';
    }
    // Add Workbench shortcuts where applicable.
    if (module_exists('lightning_moderation')) {
      $shortcut_sets[$role]['admin/workbench/needs-review'] = 'Needs Review';
      $shortcut_sets[$role]['admin/workbench/drafts'] = 'My Drafts';
      $shortcut_sets[$role]['admin/workbench/content/all'] = 'Recent Content';
    }
    // Add Views shortcut where applicable.
    if (module_exists('lightning_views')) {
      $shortcut_sets[$role]['admin/structure/views'] = 'Views';
    }
  }

  return $shortcut_sets;
}

/**
 * Implements hook_menu().
 */
function lightning_shortcuts_menu() {
  // Add a new page callback to clear caches from a GET request
  $items['admin/config/lightning/clear-cache'] = array(
    'page callback' => 'lightning_shortcuts_clear_cache',
    'access arguments' => array('administer site configuration') ,
  );
  return $items;
}

/**
 * Page callback - Clear all caches and redirect to homepage
 */
function lightning_shortcuts_clear_cache() {
  drupal_flush_all_caches();
  drupal_set_message('All caches have been cleared.');
  drupal_goto('<front>');
}

/**
 * Implements hook_navbar_alter() to merge shortut sets for users with multiple roles.
 */
function lightning_shortcuts_navbar_alter(&$items) {
  // This variable will track paths we already have links to
  $hrefs = array();

  // Load the default set
  $shortcut_set = shortcut_current_displayed_set();
  $merged_set = menu_tree($shortcut_set->set_name);

  // Set initial values for the $href variable
  foreach (element_children($merged_set) as $id) {
    $link = $merged_set[$id];
    $hrefs[] = $link['#href'];
  }

  // Load all shortcuts associated with this account
  if ($shortcutperrole = variable_get('shortcutperrole')) {
    global $user;
    // For each role, merge in the associated shortcut set (if one exists)
    foreach ($user->roles as $rid => $title) {
      // Check to see if this shortcut_set exists
      if (isset($shortcutperrole[$rid])) {
        // Check to see if each shortcut doesn't already exist in our set
        $shortcut_set = menu_tree($shortcutperrole[$rid]);
        foreach (element_children($shortcut_set) as $id) {
          $link = $shortcut_set[$id];
          // Make sure duplicate links aren't added
          if (!in_array($link['#href'], $hrefs)) {
            // Log this path for future links
            $hrefs[] = $link['#href'];
            $merged_set[$id] = $link;
          }
        }
      }
    }
  }

  // Update the shortcut tray with our new set
  $items['shortcuts']['tray']['shortcuts'] = $merged_set;
}
