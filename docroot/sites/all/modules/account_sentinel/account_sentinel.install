<?php

/**
 * @file
 * Installation and requirements for Account Sentinel module.
 */

/**
 * Implements hook_schema().
 */
function account_sentinel_schema() {
  $schema['account_sentinel_logs'] = array(
    'description' => "Stores Account Sentinel's events.",
    'fields' => array(
      'eid' => array(
        'description' => 'The primary identifier for an event.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => "Subject account's {users}.uid.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'origin' => array(
        'description' => 'From where the event was detected.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Type of the event.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Additional event data.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'by_uid' => array(
        'description' => 'The {users}.uid of the user who triggered the event.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ip' => array(
        'description' => 'The IP of the user who triggered the event.',
        'type' => 'varchar',
        'length' => 45,
        'default' => NULL,
      ),
      'timestamp' => array(
        'description' => 'Unix timestamp of when the event occurred.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'origin' => array('origin'),
      'type' => array('type'),
      'by_uid' => array('by_uid'),
      'ip' => array('ip'),
      'timestamp' => array('timestamp'),
    ),
    'primary key' => array('eid'),
  );

  $schema['account_sentinel_users'] = array(
    'description' => "Stores a copy of monitored users' data from the users table.",
    'fields' => array(
      'uid' => array(
        'description' => 'Primary Key: Unique user ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'Unique user name.',
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
      ),
      'pass' => array(
        'description' => "User's password (hashed).",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail' => array(
        'description' => "User's e-mail address.",
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Whether the user is active(1) or blocked(0).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'checksum' => array(
        'description' => "Checksum calculated with site-specific hash-key.",
        'type' => 'varchar',
        'length' => 43,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('uid'),
  );

  $schema['account_sentinel_users_roles'] = array(
    'description' => 'Maps monitored users to monitored roles.',
    'fields' => array(
      'uid' => array(
        'description' => 'Primary Key: {users}.uid for user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rid' => array(
        'description' => 'Primary Key: {role}.rid for role.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'checksum' => array(
        'description' => "Checksum calculated with site-specific hash-key.",
        'type' => 'varchar',
        'length' => 43,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('uid', 'rid'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function account_sentinel_requirements($phase) {
  $t = get_t();

  $requirements = array();
  if ($phase == 'runtime') {
    // Warn if it's been a while since the last database audit.
    $warn_after = variable_get('account_sentinel_audit_warn_after', 3 * 24 * 60 * 60);
    $last = variable_get('account_sentinel_audit_last', 0);
    $enabled_on = variable_get('account_sentinel_enabled_on', 0);
    if (REQUEST_TIME - max($last, $enabled_on) > $warn_after) {
      $requirements[] = array(
        'title' => $t('Account Sentinel database audit'),
        'value' => $t(
          'Last run @ago ago',
          array('@ago' => format_interval(REQUEST_TIME - $last))
        ),
        'description' => $t("It's been a while since the last database audit run of Account Sentinel. It is highly recommended that you run it frequently either via cron or Drush. For more information check README.txt in the module's directory."),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function account_sentinel_install() {
  $t = get_t();
  account_sentinel_reset_cron_key();
  drupal_set_message($t(
    'Account Sentinel successfully installed! Please head over <a href="!configure">here</a> to configure it.',
    array('!configure' => url('admin/config/system/account-sentinel'))
  ));
}

/**
 * Implements hook_enable().
 */
function account_sentinel_enable() {
  variable_set('account_sentinel_enabled_on', REQUEST_TIME);

  // Reset snapshot tables to prevent false detections after enabling the
  // module.
  db_truncate('account_sentinel_users')->execute();
  db_truncate('account_sentinel_users_roles')->execute();
  $roles = account_sentinel_get_monitored_roles();
  account_sentinel_rebuild_snapshots(array(), $roles);
}

/**
 * Implements hook_uninstall().
 */
function account_sentinel_uninstall() {
  variable_del('account_sentinel_audit_last');
  variable_del('account_sentinel_audit_warn_after');
  variable_del('account_sentinel_cron_key');
  variable_del('account_sentinel_cron_method');
  variable_del('account_sentinel_email_to');
  variable_del('account_sentinel_enabled_on');
  variable_del('account_sentinel_monitored_roles');
}
