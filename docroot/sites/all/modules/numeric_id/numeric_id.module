<?php

/**
 * @file
 * The Numeric ID module main file.
 */

/**
 * Implements hook_field_info().
 */
function numeric_id_field_info() {
  return array(
    'numeric_id' => array(
      'label' => t('Numeric ID'),
      'description' => t('Unique, random, fixed-digit number field.'),
      'settings' => array('digits' => 10),
      'default_widget' => 'numeric_id',
      'default_formatter' => 'numeric_id_default',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function numeric_id_field_widget_info() {
  return array(
    'numeric_id' => array(
      'label' => t('Generated'),
      'field types' => array('numeric_id'),
    ),
  );
}

/**
 * Implements hook_field_widget().
 */
function numeric_id_field_widget(&$form, &$form_state, $field, $instance, $items, $delta = 0) {
  return array(
    'value' => array(
      '#type' => 'hidden',
      '#default_value' => $items[$delta]['value'],
    )
  );
}

/**
 * Implements hook_field_settings_form().
 */
function numeric_id_field_settings_form($field, $instance, $has_data) {
  $form = array();

  $form['digits'] = array(
    '#type' => 'textfield',
    '#title' => t('Digits'),
    '#default_value' => 10,
    '#required' => TRUE,
    '#element_validate' => array('numeric_id_field_settings_form_validate'),
    '#description' => t('The length of numbers to generate. Must fall between 2 and 100.'),
    '#disabled' => $has_data,
  );

  return $form;
}

/**
 * Defines the #element_validate callback for numeric_id_field_settings_form().
 */
function numeric_id_field_settings_form_validate($element, &$form_state) {
  $value = $element['#value'];

  // Now we check if the entered digits is an integer and it falls between
  // 2 and 100.
  $options = array(
    'options' => array(
      'min_range' => 2,
      'max_range' => 100,
    ),
  );
  if (!filter_var($value, FILTER_VALIDATE_INT, $options)) {
    form_error($element, t('%name must be an integer between 2 and 100.', array('%name' => $element['#title'])));
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function numeric_id_field_formatter_info() {
  return array(
    'numeric_id_default' => array(
      'label' => t('Default'),
      'field types' => array('numeric_id'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function numeric_id_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'numeric_id_default') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array('#markup' => strip_tags($item['value']));
    }
  }

  return $element;
}

/**
 * Implements hook_field_presave().
 */
function numeric_id_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (empty($items)) {
    $numeric_id = _numeric_id_generate($entity_type, $entity, $field);
    $items = array(array('value' => $numeric_id));
  }
}

function _numeric_id_generate($entity_type, $entity, $field, $retry = 0) {
  // Our maximum retry is 5. If it's larger than that it probably means
  // something is going wrong.
  // @todo Make retry times configurable.
  if ($retry <= 3) {
    // Let's generate a new ID.
    $digits = $field['settings']['digits'];
    $numeric_id = str_pad(rand(0, pow(10, $digits) - 1), $digits, '0', STR_PAD_LEFT);
    if (_numeric_id_value_exists($field, $numeric_id)) {
      // Uh oh. An entity with the same ID already exists. Let's try again
      // with the updated retry times.
      $retry++;
      _numeric_id_generate($entity_type, $entity, $field, $retry);
    }
    else {
      // Great. We generated an ID that has not been used before. Done.
      return $numeric_id;
    }
  }
  $message = 'Maximum retry times of %retry exceeded when generating %field';
  $message .= ' field value for %entity_type %entity.';
  $variables = array(
    '%retry' => '3',
    '%field' => $field['field_name'],
    '%entity_type' => $entity_type,
    '%entity' => $entity['title'],
  );
  watchdog('numeric_id', $message, $variables, WATCHDOG_ERROR);
  return;
}

function _numeric_id_value_exists($field, $value) {
  $query = new EntityFieldQuery();
  $query->fieldCondition($field['field_name'], 'value', $value);
  $query->count();
  if ($query->execute() > 0) {
    return TRUE;
  }
  return FALSE;
}
