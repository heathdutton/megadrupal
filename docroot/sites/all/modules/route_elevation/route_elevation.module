<?php

/**
 * @file
 * Route Elevation module file.
 *
 * This module allows to retrieve a elevation profile from a GPX file.
 */

require_once 'route_elevation.admin.inc';

/**
 * Implements hook_block_info().
 */
function route_elevation_block_info() {
  $blocks = array();
  $blocks['route_elevation_block'] = array(
    'info' => t('Route Elevation Block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function route_elevation_block_view($delta = '') {
  $block = array();

  // /-{ To check the node type, instead of exploiting context
  // $node = menu_get_object();
  // $nid = $node->nid;
  // if ($node->type != 'my_node_type') return;
  switch ($delta) {
    case 'route_elevation_block':
      $block_content = route_elevation_get_elevations();
      $block['content'] = '<div id="route-elevation">' . $block_content . '</div>';
      break;
  }

  return $block;
}

/**
 * Returns the HTML block with an elevation profile and a map.
 *
 * The map can be hidden. This method exploits Google APIs.
 *
 * @return string
 *   A rendering of the path on map and the elevation profile
 */
function route_elevation_get_elevations() {
  $field_gpx = variable_get('route_elevation_field_gpx', 'field_gpx');
  $show_map = variable_get('route_elevation_show_map', TRUE);
  $map_zoom = intval(variable_get('route_elevation_map_zoom', 10));

  $node = menu_get_object();
  if (!isset($node)) {
    // A warning, the block has maybe been loaded in the form page.
    watchdog('route_elevation', t('Trying to retrieve an elevation profile from a page without node.'), NULL, WATCHDOG_WARNING);
    return;
  }
  if (!isset($node->{$field_gpx})) {
    // An error, the block has been loaded in page with no field gpx.
    watchdog('route_elevation', t('Trying to retrieve an elevation profile from a node without field GPX.'), NULL, WATCHDOG_ERROR);
    return;
  }
  if (count($node->{$field_gpx}) < 1) {
    // No file in the field.
    return;
  }
  $file = file_load($node->{$field_gpx}[LANGUAGE_NONE][0]['fid']);
  $my_locs = route_elevation_retrieve_gpx_coordinates($file);
  if (is_null($my_locs)) {
    // An error, the GPX file can't be parsed.
    watchdog('route_elevation', t('Error parsing the GPX file'), NULL, WATCHDOG_ERROR);
    return;
  }

  $map_center = route_elevation_find_center($my_locs);
  $label_popup = variable_get('route_elevation_label_popup', t('Elevation (m)'));
  $label_xaxis = variable_get('route_elevation_label_xaxis', t('Elevation (meters)'));
  $label_yaxis = variable_get('route_elevation_label_yaxis', t('Distance (meters)'));

  $my_settings = array(
    'basePath' => '/',
    'map_center' => $map_center,
    'map_zoom' => $map_zoom,
    'my_locs' => $my_locs,
    'label_popup' => $label_popup,
    'label_xaxis' => $label_xaxis,
    'label_yaxis' => $label_yaxis,
  );
  drupal_add_js(array('route_elevation' => $my_settings), 'setting');
  drupal_add_js("https://www.google.com/jsapi");
  drupal_add_js("https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false");
  drupal_add_js(drupal_get_path('module', 'route_elevation') . '/js/google_elevation.js');

  $height = "0px";
  if ($show_map) {
    $height = "250px";
  }

  $my_content = '<div>
      <div id="map-canvas" style="height:' . $height . ';"></div>
      <div id="elevation_chart"></div>
    </div>';

  return $my_content;
}

/**
 * The array of coordinates corresponding to the GPX file.
 *
 * Given the file containing the GPX returns an array of cordinates.
 * Coordinates are represented as flat array in the form
 * [lat0, lon0, lat1, lon1, ...].
 *
 * @param file|gpx $file
 *   The GPX file.
 */
function route_elevation_retrieve_gpx_coordinates($file) {
  // $file_name = str_replace(' ', '%20', $file->uri); Doesn't work.
  // $file_name = 'public://' . urlencode($file->filename); Doesn't work.
  // $prova = realpath(dirname(__FILE__) . $file->filename); Doesn't work.
  $file_name = file_create_url($file->uri);

  $use_errors = libxml_use_internal_errors(true);
  $xml = simplexml_load_file($file_name);
  if (!$xml) {
    return NULL;
  }
  libxml_clear_errors();
  libxml_use_internal_errors($use_errors);  $array_latlon = array();
  
  // Google allows less than 512 points for query, and for some reason,
  // sometimes is even less, so the total will be reduced if larger.
  $samples_limit = variable_get('route_elevation_samples_number', 100);

  $source_length = count($xml->trk->trkseg->trkpt);
  $mod_div = ceil($source_length / $samples_limit);
  $counter = 0;
  $count_effective = 0;

  foreach ($xml->trk->trkseg->trkpt as $b) {
    // Was foreach ($xml->trk->trkseg->trkpt as $a => $b) {
    if ((++$counter % $mod_div) !== 0) {
      continue;
    }
    ++$count_effective;
    $at = $b->attributes();
    $lat = $at['lat'] . '';
    $lon = $at['lon'] . '';
    $array_latlon[] = floatval($lat);
    $array_latlon[] = floatval($lon);
  }

  return $array_latlon;
}

/**
 * Retrieves the center of the array, to center the map.
 *
 * @param array|float $my_locs
 *   Locations in for of [lat0, lon0, lat1, lon1, ...].
 *
 * @return array|float
 *   Latidude and Longitude of the map center
 */
function route_elevation_find_center($my_locs) {
  $count = count($my_locs);
  $lat_total = 0;
  $lon_total = 0;

  for ($i = 0; $i < $count; $i += 2) {
    $lat_total += floatval($my_locs[$i]);
    $lon_total += floatval($my_locs[$i + 1]);
  }

  $lat = $lat_total / (float) $count * 2.0;
  $lon = $lon_total / (float) $count * 2.0;
  return array($lat, $lon);
}
