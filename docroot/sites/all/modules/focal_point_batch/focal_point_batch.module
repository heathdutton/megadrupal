<?php
/**
 * @file
 * Menu, form, batch functions for the focal_point_batch module.
 */

/**
 * Implements hook_menu().
 */
function focal_point_batch_menu() {
  $items = array();
  $items['admin/config/media/focal_point_batch'] = array(
    'title' => 'Focal Point Batch',
    'description' => 'Batch process all images that have not been processed by Focal Point',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('focal_point_batch_trigger_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Form to trigger Focal Point batch processing.
 */
function focal_point_batch_trigger_form($form, &$form_state) {
  $unprocessed = count(focal_point_batch_all_images()) - count(focal_point_batch_processed());
  $form['actions']['submit']['#submit'][] = '_focal_point_batch_process_images';
  $form['focal_point_batch_description'] = array(
    '#markup' => t("Calculate focal point on all unprocessed images. %numimages unprocessed.", array('%numimages' => $unprocessed)),
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );
  $form['focal_point_batch_button'] = array(
    '#type' => 'submit',
    '#value' => t('Batch Process Images'),
  );
  return $form;
}

/**
 * Submit handler for focal_point_batch_trigger_form.
 *
 * Find image files that have not been processed for focal point.
 */
function focal_point_batch_trigger_form_submit($form, &$form_state) {
  module_load_include('module', 'focal_point');
  // Get all processed images.
  $fids = focal_point_batch_processed();
  $processed = array();
  // Make new array with keys so we can use array_key_exists().
  foreach ($fids as $fid) {
    $processed[$fid] = $fid;
  }
  // Get all images.
  $fids = focal_point_batch_all_images();

  // Loop through all images to see if any have not been processed.
  // Create batch operations for images that have not been processed.
  $count = 0;
  $operations = array();
  foreach ($fids as $fid) {
    if (!array_key_exists($fid, $processed)) {
      $count++;
      $operations[] = array(
        '_focal_point_batch_process_single',
        array(
          $fid,
          t('(Operation @operation)', array('@operation' => $count)),
        ),
      );
    }
  }
  $batch = array(
    'operations' => $operations,
    'finished' => '_focal_point_batch_process_batch_finished',
    'title' => t('Processing Image Focal Points'),

  );
  batch_set($batch);
  return $batch;
}

/**
 * Get images already processed.
 */
function focal_point_batch_processed() {
  // Get all images already processed.
  $query = db_select('focal_point', 'fp');
  $query->fields('fp', array('fid', 'focal_point'));
  $fids = $query->execute()->fetchCol();
  $processed = array();
  foreach ($fids as $fid) {
    $processed[$fid] = $fid;
  }
  return $processed;
}

/**
 * Get all images.
 */
function focal_point_batch_all_images() {
  $query = db_select('file_managed', 'fm');
  $or = db_or();
  $or->condition('fm.filemime', 'image/jpeg', '=');
  $or->condition('fm.filemime', 'image/png', '=');
  $or->condition('fm.filemime', 'image/gif', '=');
  $query->condition($or);
  $query->fields('fm', array('fid', 'uri', 'filemime'));
  $fids = $query->execute()->fetchCol();
  return $fids;
}

/**
 * Batch function for estimating focal point.
 * @param File ID
 */
function _focal_point_batch_process_single($fid) {
  module_load_include('module', 'focal_point');
  $focal_point_estimate = _focal_point_guess_default($fid);
  $images = array(
    'fid' => $fid,
    'focal_point' => $focal_point_estimate,
  );
  _focal_point_images_save($images);
}

/**
 * Batch finished function.
 */
function _focal_point_batch_process_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = t('Focal Point processing completed.');
    drupal_set_message(check_plain($message));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments',
      array(
        '%error_operation' => $error_operation[0],
        '@arguments' => print_r($error_operation[1], TRUE),
      )
    );
    drupal_set_message($message, 'error');
  }
}
