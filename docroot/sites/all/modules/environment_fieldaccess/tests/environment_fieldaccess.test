<?php
/**
 * @file
 * Environment Field Access (Test).
 */

/**
 * Class EnvironmentFieldAccessTestCase.
 */
class EnvironmentFieldAccessTestCase extends \DrupalWebTestCase {

  /**
   * Name of module for testing. Also used as field name.
   */
  const TEST_MODULE = 'environment_fieldaccess_test';

  /**
   * @var \EnvironmentFieldAccessFields
   */
  private $fieldsManager;

  /**
   * {@inheritdoc}
   */
  public function __construct($test_id = NULL) {
    // Prevent wrong execution.
    if (strpos($GLOBALS['base_url'], 'default') !== FALSE) {
      throw new \RuntimeException('Test cannot be run from CLI if $base_url variable not set.');
    }

    parent::__construct($test_id);
  }

  /**
   * Delete created fields.
   */
  public function __destruct() {
    $this->fieldsManager->delete();
  }

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return [
      'name' => 'Environment Field Access',
      'group' => 'Field API',
      'description' => 'Testing field access depending on environment.',
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(self::TEST_MODULE);

    $fieldaccess = [];

    foreach (environment_fieldaccess_fieldaccess_info() as $name => $info) {
      $fieldaccess[$info['type']] = [
        'access_name' => $name,
        'individual' => 0,
        'settings' => [
          'not' => 0,
          'environment' => [
            'test_show' => 'test_show',
          ],
        ],
      ];
    }

    $this->fieldsManager = new \EnvironmentFieldAccessFields([
      self::TEST_MODULE => [
        'type' => 'text',
        'label' => self::TEST_MODULE,
        'settings' => [
          'fieldaccess' => $fieldaccess,
          'user_register_form' => TRUE,
        ],
      ],
    ]);

    // Create fields for testing.
    $this->fieldsManager->create();
    // Attach field to "user" entity.
    $this->fieldsManager->attach('user', 'user');
  }

  /**
   * Access allowed in current environment.
   */
  public function testAccessAllowed() {
    // Set an environment to "test_show", go to "user/register" and
    // try to find the field on a page.
    $this->assertEnvironment('test_show');
    $this->assertFieldByXPath($this->fieldXpath());
  }

  /**
   * Access disallowed in another environment.
   */
  public function testAccessDisallowed() {
    // Set an environment to "test_hide", go to "user/register" and
    // make sure that field does not exist on a page.
    $this->assertEnvironment('test_hide');
    $this->assertNoFieldByXPath($this->fieldXpath());
  }

  /**
   * Access disallowed in current environment ("not" option selected).
   */
  public function testNotAccessAllowed() {
    // Set an environment to "test_show", go to "user/register" and
    // make sure that field does not exist on a page, because "not"
    // option is selected.
    $instances =& $this->fieldsManager->getInstances();

    foreach ($instances[self::TEST_MODULE]['settings']['fieldaccess'] as $type => &$info) {
      $info['settings']['not'] = 1;
    }

    $this->fieldsManager->saveInstances();

    $this->assertEnvironment('test_show');
    $this->assertNoFieldByXPath($this->fieldXpath());
  }

  /**
   * Switch the environment.
   *
   * @param string $environment
   *   Environment name.
   */
  private function assertEnvironment($environment) {
    $this->assertTrue(environment_switch($environment));
    $this->assertTrue(environment_current() === $environment);

    $this->drupalGet('user/register');
    $this->assertResponse(200);
  }

  /**
   * Build XPath of field.
   *
   * @return string
   *   Field XPath.
   */
  private function fieldXpath() {
    return $this->buildXPathQuery('//label[text()[starts-with(., :text)]]', [
      ':text' => self::TEST_MODULE,
    ]);
  }

}
