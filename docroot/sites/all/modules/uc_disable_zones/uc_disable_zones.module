<?php
/**
 * @file
 * Allows disabling of zones in the "State/Province" dropdown on the checkout
 * page.
 */

/**
 * Implements hook_menu().
 */
function uc_disable_zones_menu() {
  $items = array();

  $items['admin/store/settings/zones'] = array(
    'title' => 'Disable Zones',
    'description' => 'Disable zones on checkout page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_disable_zones_settings_form', 'delivery'),
    'access arguments' => array('administer store'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_disable_zones.admin.inc',
  );
  $items['admin/store/settings/zones/delivery'] = array(
    'title' => 'delivery',
    'description' => 'Disable zones in delivery pane on checkout page.',
    'access arguments' => array('administer store'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_disable_zones.admin.inc',
  );
  $items['admin/store/settings/zones/billing'] = array(
    'title' => 'Billing',
    'description' => 'Disable zones in billing pane on checkout page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_disable_zones_settings_form', 'billing'),
    'access arguments' => array('administer store'),
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_disable_zones.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_element_info_alter().
 */
function uc_disable_zones_element_info_alter(&$type) {
  $type['uc_address']['#process'][] = 'uc_disable_zones_disable_zones';
  $type['uc_address']['#element_validate'][] = 'uc_disable_zones_disable_zones_validate';
}

/**
 * Hide disabled zones in delivery/billing zone selections.
 */
function uc_disable_zones_disable_zones($element, &$form_state) {
  $key = $element['#key_prefix'] ? ($element['#key_prefix'] . '_') : '';
  $disabled_zones = variable_get('uc_disable_zones_' . $element['#key_prefix'], array());
  $country = $element[$key . 'country']['#default_value'];

  // Exit early if no disabled zones for this $key and $country.
  if (count($disabled_zones) == 0 || !isset($disabled_zones[$country])) {
    return $element;
  }

  foreach($element[$key . 'zone']['#options'] as $zone_id => $zone_name) {
    if (in_array($zone_id, $disabled_zones[$country])) {
      unset($element[$key . 'zone']['#options'][$zone_id]);
    }
  }

  return $element;
}

/**
 * Ensure disabled zones in delivery/billing weren't selected by mistake
 * or other (nefarious) means.
 */
function uc_disable_zones_disable_zones_validate($element, &$form_state) {
  $key = $element['#key_prefix'] ? ($element['#key_prefix'] . '_') : '';
  $disabled_zones = variable_get('uc_disable_zones_' . $element['#key_prefix'], array());
  $country = $element[$key . 'country']['#value'];

  // Exit early if no disabled zones for this $key and $country.
  if (count($disabled_zones) == 0 || !isset($disabled_zones[$country])) {
    return;
  }

  if (in_array($element[$key . 'zone']['#value'], $disabled_zones[$country])) {
    form_error($element, ucwords($element['#key_prefix']) . ' to that ' . $element[$key . 'zone']['#title'] . ' is not allowed.');
  }
}

/**
 * Implements hook_form_alter().
 */
function uc_disable_zones_form_alter(&$form, &$form_state, $form_id) {
  // Figure out how 'my billing info is the same' works
  return;
  dpm('test');
  if ($form_id == 'uc_cart_checkout_form') {
    // Override ubercart copy address functions.
    drupal_add_js(drupal_get_path('module', 'uc_disable_zones') . '/uc_disable_zones.js');

    if (isset($form['panes']['delivery']['copy_address'])) {
      unset($form['panes']['delivery']['copy_address']['#attributes']['onclick']);
    }

    if (isset($form['panes']['billing']['copy_address'])) {
      unset($form['panes']['billing']['copy_address']['#attributes']['onclick']);
    }
  }
}

/**
 * Helper function to return an array of countries and their zones.
 */
function _uc_disable_zones_get_country_zone_list() {
  // Get list of countries.
  $results = db_query("SELECT * FROM {uc_countries} WHERE version > 0 ORDER BY country_name");

  $countries = array();
  foreach ($results as $result) {
    $countries[$result->country_id] = array('name' => $result->country_name);
  }

  // Get list of zones for each country.
  foreach ($countries as $country_id => $country_name) {
    $results = db_query("SELECT * FROM {uc_zones} WHERE zone_country_id = :zone_country_id ORDER BY zone_name", array(':zone_country_id' => $country_id));

    $zones = array();
    foreach ($results as $result) {
      $zones[$result->zone_id] = $result->zone_name;
    }

    $countries[$country_id]['zones'] = $zones;
  }

  return $countries;
}
