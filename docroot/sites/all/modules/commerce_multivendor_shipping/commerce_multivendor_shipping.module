<?php

/**
 * @file
 * commerce_multivendor_shipping_vendor module
 */

module_load_include('inc', 'commerce_multivendor_shipping', 'commerce_multivendor_shipping.entity');

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_multivendor_shipping_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['multivendor_shipping'] = array(
    'name' => t('Shipping'),
    'description' => t('References a shipping method.'),
    'add_form_submit_value' => t('Add shipping'),
    'base' => 'commerce_multivendor_shipping_line_item',
  );

  return $line_item_types;
}

/**
 * Implements hook_commerce_customer_profile_type_info().
 */
function commerce_multivendor_shipping_commerce_customer_profile_type_info() {
  $profile_types = array();

  $profile_types['shipping'] = array(
    'type' => 'shipping',
    'name' => t('Shipping information'),
    'description' => t('The profile used to collect shipping information on the checkout and order forms.'),
    'help' => '',
    'checkout_pane_weight' => 0,
  );

  return $profile_types;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_multivendor_shipping_commerce_price_component_type_info() {
  $components = array();

  // Define a generic shipping price component type.
  $components['multivendor_shipping'] = array(
    'title' => t('Shipping'),
    'weight' => 20,
  );

  return $components;
}

/**
 * Calculate the shipping rate.
 */
function commerce_multivendor_shipping_service_add_line_item(&$order, $amount) {

  $line_item = commerce_multivendor_shipping_get_line_item($order);
  $is_new_item = FALSE;

  // If no line item was found, create a new one.
  if (!$line_item) {
    $is_new_item = TRUE;
    $line_item = commerce_line_item_new('multivendor_shipping', $order->order_id);
    $line_item->quantity = 1;
    $line_item->line_item_label = t('Shipping');
  }

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  $loaded_price_component = commerce_price_component_load(
    $line_item_wrapper->commerce_unit_price->value(), 'multivendor_shipping'
  );

  $line_item_wrapper->commerce_unit_price->amount = $amount;
  $line_item_wrapper->commerce_unit_price->currency_code = commerce_default_currency();
  // Only one shipping line is created. Update this or create new.
  if (!empty($loaded_price_component)) {
    $loaded_price_component[0]['price']['amount'] = $amount;
    $loaded_price_component[0]['price']['currency_code'] = commerce_default_currency();
    // Place in components to ensure correct data structure.
    $price_component['components'] = $loaded_price_component;
  }
  else {
    $price_component = commerce_price_component_add(
      $line_item_wrapper->commerce_unit_price->value(),
      'multivendor_shipping',
      $line_item_wrapper->commerce_unit_price->value(),
      TRUE,
      FALSE
    );
  }

  $line_item_wrapper->commerce_unit_price->data = $price_component;
  // Save the line item now so we get its ID.
  commerce_line_item_save($line_item);

  // Add it to the order's line item reference value if the line item is new.
  if ($is_new_item) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->commerce_line_items[] = $line_item;
  }

  commerce_order_calculate_total($order);
}

/**
 * Returns the title of a shipping line item.
 */
function commerce_multivendor_shipping_line_item_title($line_item) {
  return $line_item->line_item_label;
}

/**
 * Get the shipping line item if it exists.
 * 
 * @param (object) $order
 *   The current order
 *
 * @return (object)
 *   The shipping line item or FALSE if none is found
 */
function commerce_multivendor_shipping_get_line_item($order) {
  // Check if shipping line item exists on the order and return it.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_line_item')
    ->propertyCondition('order_id', $order->order_id, '=')
    ->propertyCondition('type', 'multivendor_shipping', '=');
  $result = $query->execute();
  if (isset($result['commerce_line_item'])) {
    $lids = array_keys($result['commerce_line_item']);
    $line_item = commerce_line_item_load($lids[0]);
    return $line_item;
  }
  return FALSE;
}

/**
 * Get the shipping line item if it exists.
 *
 * @param (object) $vendor
 *   The vendor object
 *
 * @return (object)
 *   The shipping cost for this vendor
 */
function commerce_multivendor_shipping_rate_calculate($vendor) {
  $amount = $vendor->base_amount;
  $amount += ceil($vendor->quantity / $vendor->package_size) * $vendor->package_amount;
  return $amount;
}


/**
 * Returns an initialized multivendor shipping array for forms.
 */
function commerce_multivendor_shipping_vendor_new() {
  return array(
    'name' => '',
    'label' => '',
    'description' => '',
    'base_amount' => 0,
    'package_size' => 1,
    'package_amount' => 0,
    'is_new' => TRUE,
  );
}

/**
 * Returns a single multivendor shipping array.
 *
 * @param (string) $name
 *   The machine-name of the vendor to return.
 *
 * @return (object)
 *   TRUE if the vendor exists or FALSE if it did not exist.
 */
function commerce_multivendor_shipping_exists($name) {
  $result = db_select('{commerce_multivendor_shipping_vendor}', 'c')
              ->fields('c', array('name'))
              ->condition('name', $name)
              ->execute();
  return $result->rowCount() > 0 ? TRUE : FALSE;
}

/**
 * Get all multivendor shipping vendors.
 *
 * @return (object)
 *   Array with all multivendor shipping vendors.
 */
function commerce_multivendor_shipping_vendors() {
  return db_select('{commerce_multivendor_shipping_vendor}', 'c')
    ->fields('c')
    ->execute();
}

/**
 * Load multivendor shipping vendor.
 */
function commerce_multivendor_shipping_vendor_load($name) {
  $vendor = db_select('{commerce_multivendor_shipping_vendor}', 'c')
    ->fields('c')
    ->condition('name', $name)
    ->execute()
    ->fetchAssoc();
  return $vendor;
}

/**
 * Save multivendor shipping vendor.
 */
function commerce_multivendor_shipping_vendor_save($vendor) {
  $op = drupal_write_record('commerce_multivendor_shipping_vendor', $vendor, empty($vendor['is_new']) ? 'name' : array());
  return $op;
}

/**
 * Deletes a multivendor shipping vendor.
 *
 * @param (array) $vendor
 *   The machine-name of shipping vendor.
 */
function commerce_multivendor_shipping_delete($vendor) {
  db_delete('commerce_multivendor_shipping_vendor')
    ->condition('name', $vendor['name'])
    ->execute();
}

/**
 * Implements hook_permission().
 */
function commerce_multivendor_shipping_permission() {
  return array(
    'administer multivendorshipping' => array(
      'title' => t('Administer multivendor shipping'),
      'description' => t('Allows users to configure multivendor shipping.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_multivendor_shipping_menu() {
  $items = array();

  $items['admin/commerce/config/multivendorshipping'] = array(
    'title' => 'Multivendor shipping',
    'description' => 'Manage multivendor shipping.',
    'page callback' => 'commerce_multivendor_shipping_overview',
    'access arguments' => array('administer multivendorshipping'),
    'file' => 'commerce_multivendor_shipping.admin.inc',
  );

  $items['admin/commerce/config/multivendorshipping/add'] = array(
    'title' => 'Add a shipping vendor',
    'description' => 'Create a new shipping vendor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_multivendor_shipping_vendor_form', 'is_new'),
    'access arguments' => array('administer multivendorshipping'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_multivendor_shipping.admin.inc',
  );

  $items['admin/commerce/config/multivendorshipping/%/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit shipping vendor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_multivendor_shipping_vendor_form', 4),
    'access arguments' => array('administer multivendorshipping'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_multivendor_shipping.admin.inc',
  );

  $items['admin/commerce/config/multivendorshipping/%/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete shipping vendor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_multivendor_shipping_delete_form', 4),
    'access arguments' => array('administer multivendorshipping'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_multivendor_shipping.admin.inc',
  );

  return $items;
}
