<?php

/**
 * @file
 * Module for displaying galeries on OpenLayer maps.
 */

/**
 * Implements hook_menu().
 */
function galerie_geoloc_menu() {
  return array(
    'node/%galerie_geoloc_menu/map' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Map',
      'page callback' => 'galerie_geoloc_map',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
    ),
    'node/%galerie_geoloc_edit_menu/map-edit' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Edit map',
      'page callback' => 'galerie_geoloc_map_edit',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
    ),
    'galerie/ajax/galerie_geoloc/update/%galerie_geoloc_menu/%' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'drupal_json_output',
      'page callback' => 'galerie_geoloc_update_geolocation',
      'page arguments' => array(4, 5),
      'access callback' => 'node_access',
      'access arguments' => array('update', 4),
    ),
  );
}

/**
 * Implements hook_load() for wildcards.
 */
function galerie_geoloc_menu_load($nid) {
  if ($node = node_load($nid) and $node->type == 'galerie' and  _galerie_geoloc_enabled($nid)) {
    return $node;
  }

  return FALSE;
}

/**
 * Implements hook_load() for wildcards.
 * Only allow edition for modules that do not supply
 * geolocation information themselves or modules that
 * implement hook_galerie_geoloc_update().
 */
function galerie_geoloc_edit_menu_load($nid) {
  if ($node = node_load($nid) and $node->type == 'galerie' and  _galerie_geoloc_enabled($nid)) {
    $module = _galerie_module($node);
    $info = module_invoke($module, 'galerie_geoloc_info');
    if (isset($info) and is_array($info) and isset($info['has geolocation information']) and $info['has geolocation information']) {
      if (module_hook($module, 'galerie_geoloc_update')) {
        return $node;
      } else {
        // Let's assume that the module takes care of this itself.
        return FALSE;
      }
    } else {
      return $node;
    }
  }

  return FALSE;
}

/**
 * Returns true if geolocation is enabled for this node
 * If geolocation has been enabled or disabled in the
 * edit form, return this value, otherwise return TRUE
 * if the galerie module pretends to supply geolocation
 * information, FALSE if it does not.
 */
function _galerie_geoloc_enabled($nid) {
  if ($node = node_load($nid) and $node->type == 'galerie') {
    $result = db_select('galerie_geoloc')->fields('galerie_geoloc', array('enabled'))->condition('nid', $nid)->execute()->fetchField();
    if ($result !== FALSE) {
      return $result;
    } else {
      $module = _galerie_module($node);
      $info = module_invoke($module, 'galerie_geoloc_info');
      if (isset($info) and is_array($info) and isset($info['has geolocation information']) and $info['has geolocation information']) {
        $enabled = 1;
      } else {
        $enabled = 0;
      }

      db_insert('galerie_geoloc')->fields(array('nid' => $nid, 'enabled' => $enabled))->execute();
      return $enabled;
    }
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function galerie_geoloc_theme($existing, $type, $theme, $path) {
  return array(
    'galerie_geoloc_map' => array(
      'template' => 'galerie-geoloc-map',
      'render element' => 'elements',
    ),
  );
}

/**
 * Process variables for galerie-geoloc-map.tpl.php.
 *
 * @see galerie-geoloc-map.tpl.php
 */
function template_preprocess_galerie_geoloc_map(&$variables) {

  $variables['node'] = $variables['elements']['#node'];
  $variables['galerie_type'] = $variables['elements']['#node']->galerie_type;
}

/**
 * Implements hook_galerie_load_images()
 * Adds geolocation information to images in the passed array
 */
function galerie_geoloc_galerie_load_images($node, &$images) {
  $ids = array();
  foreach ($images as $id => $image) {
    $ids[$image['id']] = $id;
  }

  if (count($ids)) {
    $result = db_select('galerie_geoloc_images')
      ->fields('galerie_geoloc_images', array('iid', 'latitude', 'longitude'))
      ->condition('nid', $node->nid)
      ->condition('iid', array_keys($ids))
      ->execute();
    while ($row = $result->fetchAssoc()) {
      $id = $ids[$row['iid']];
      $images[$id]['geolocation'] = array(
        'latitude' => $row['latitude'],
        'longitude' => $row['longitude']
      );
    }
  }
}

/**
 * Main geolocation map
 */
function galerie_geoloc_map($node) {
  $images = galerie_images($node, 0, 2000);

  drupal_add_css(drupal_get_path('module', 'galerie') . '/galerie.css');
  drupal_add_css(drupal_get_path('module', 'galerie_geoloc') . '/galerie_geoloc.css');
  drupal_add_js('http://maps.google.com/maps/api/js?v=3.6&sensor=false');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/openlayers/OpenLayers.js');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/jquery.quicksand.js');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/galerie_geoloc.js');

  $images_json = array();
  foreach ($images as $image) {
    $thumbnail = array(
      '#theme' => 'galerie_thumbnail',
      '#image' => $image,
    );
    $image['thumbnail'] = drupal_render($thumbnail);
    $images_json[$image['id']] = $image;
  }

  drupal_add_js(array(
    'galerie' => array(
       'galerie-' . $node->nid => array(
        'imageInfoUrl' => url('galerie/ajax/image_info/' . $node->nid),
        'imageListUrl' => url('galerie/ajax/image_list/' . $node->nid),
        'baseUrl' => url('node/' . $node->nid),
        'markerUrl' => url(drupal_get_path('module', 'galerie_geoloc') . '/marker.png'),
        'markerHighlightUrl' => url(drupal_get_path('module', 'galerie_geoloc') . '/marker-highlight.png'),
        'images' => $images_json,
      ),
    ),
  ), 'setting');

  return theme('galerie_geoloc_map', array(
    'elements' =>
      array(
        '#theme' => 'galerie_geoloc_map',
        '#images' => $images,
        '#node' => $node,
      ),
    )
  );
}

/**
 * Geolocation edition map
 */
function galerie_geoloc_map_edit($node) {
  $images = galerie_images($node, 0, 2000);

  drupal_add_css(drupal_get_path('module', 'galerie') . '/galerie.css');
  drupal_add_css(drupal_get_path('module', 'galerie_geoloc') . '/galerie_geoloc.css');
  drupal_add_js('http://maps.google.com/maps/api/js?v=3.6&sensor=false');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/openlayers/OpenLayers.js');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/jquery.quicksand.js');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/jquery-ui.custom.js');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/galerie_geoloc.js');
  drupal_add_js(drupal_get_path('module', 'galerie_geoloc') . '/galerie_geoloc.edit.js');

  $images_json = array();
  foreach ($images as $image) {
    $thumbnail = array(
      '#theme' => 'galerie_thumbnail',
      '#image' => $image,
    );
    $image['thumbnail'] = drupal_render($thumbnail);
    $images_json[$image['id']] = $image;
  }

  drupal_add_js(array(
    'galerie' => array(
       'galerie-' . $node->nid => array(
        'imageInfoUrl' => url('galerie/ajax/image_info/' . $node->nid),
        'imageListUrl' => url('galerie/ajax/image_list/' . $node->nid),
        'baseUrl' => url('node/' . $node->nid),
        'markerUrl' => url(drupal_get_path('module', 'galerie_geoloc') . '/marker.png'),
        'markerHighlightUrl' => url(drupal_get_path('module', 'galerie_geoloc') . '/marker-highlight.png'),
        'updateGeolocationUrl' => url('galerie/ajax/galerie_geoloc/update/' . $node->nid),
        'images' => $images_json,
      ),
    ),
  ), 'setting');

  return theme('galerie_geoloc_map', array(
    'elements' =>
      array(
        '#theme' => 'galerie_geoloc_map',
        '#images' => $images,
        '#node' => $node,
      ),
    )
  );
}

/**
 * Implements hook_image_info().
 * Called everytime an image info array is built, which means
 * it can be called 250 times at once when initially displaying
 * a gallery. Better be efficient here. Though after some testing
 * I find this is relatively fast even on my cheap server.
 */
function galerie_geoloc_galerie_image_info($node, $image) {
  if (_galerie_geoloc_enabled($node->nid)) {
    $image['actions'][] = l(t('see on map'), 'node/' . $node->nid . '/map/' . $image['id']);
    return $image;
  }
}

/**
 * Implements hook_galerie_form().
 */
function galerie_geoloc_galerie_form($node, $form_state) {
  $form = array(
    'galerie_geoloc_details' => array(
      '#weight' => 2,
      '#type' => 'fieldset',
      '#title' => t('Geolocation'),

      'galerie_geoloc_enable' => array(
        '#type' => 'checkbox',
        '#default_value' => _galerie_geoloc_enabled(isset($node->nid) ? $node->nid : 0),
        '#title' => t('Enable geolocation'),
      ),

      '#submit' => array('_galerie_geoloc_galerie_form_submit'),
    ),
  );

  return $form;
}

/**
 * Implements hook_node_update().
 */
function galerie_geoloc_node_update($node) {
  if ($node->type == 'galerie') {
    db_update('galerie_geoloc')
      ->fields(array(
        'enabled' => (int)$node->galerie_geoloc_enable,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Update geolocation information for an image.
 */
function galerie_geoloc_update_geolocation($galerie, $image_id) {
  $module = _galerie_module($galerie);
  if (module_hook($module, 'galerie_geoloc_update')) {
    if (isset($_REQUEST['delete']) and $_REQUEST['delete']) {
      module_invoke($module, 'galerie_geoloc_update', $galerie, $image_id);
    } else {
      $coordinates = array(
        'latitude' => $_REQUEST['lat'],
        'longitude' => $_REQUEST['lon'],
      );
      module_invoke($module, 'galerie_geoloc_update', $galerie, $image_id, $coordinates);
    }
  } else {
    if (isset($_REQUEST['delete']) and $_REQUEST['delete']) {
      db_delete('galerie_geoloc_images')
        ->condition('nid', $galerie->nid)
        ->condition('iid', $image_id)
        ->execute();
    } else {
      $latitude = $_REQUEST['lat'];
      $longitude = $_REQUEST['lon'];

      db_merge('galerie_geoloc_images')
        ->key(array(
          'nid' => $galerie->nid,
          'iid' => $image_id,
        ))
        ->fields(array(
          'latitude' => $latitude,
          'longitude' => $longitude,
          'place' => '',
        ))
        ->execute();
    }
  }

  return array(
    'galerie' => $galerie,
    'image_id' => $image_id,
  );
}

