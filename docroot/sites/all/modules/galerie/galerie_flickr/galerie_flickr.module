<?php

/**
 * @file
 * The module that manages galleries created from Flickr images.
 */

/**
 * Implements hook_galerie_types().
 */
function galerie_flickr_galerie_types() {
  return array(
    'flickr_tags' => array(
      'title' => t('Flickr tags'),
      'description' => t('A gallery with the Flickr images having choosen tags.'),
      'module' => 'galerie_flickr',
    ),
    'flickr_user' => array(
      'title' => t('Flickr user'),
      'description' => t('A gallery with the Flickr images of an user.'),
      'module' => 'galerie_flickr',
    ),
    'flickr_set' => array(
      'title' => t('Flickr set'),
      'description' => t('A gallery with the Flickr images of a set.'),
      'module' => 'galerie_flickr',
    ),
  );
}

/**
 * Implements hook_galerie_form().
 */
function galerie_flickr_galerie_form($node, $form_state) {
  if (isset($node->galerie_type) and !array_key_exists($node->galerie_type, galerie_flickr_galerie_types())) {
    return NULL;
  }

  $form = array(
    'galerie_flickr_details' => array(
      '#weight' => 2,
      '#type' => 'fieldset',
      '#title' => t('Flickr details'),

      'galerie_api_key' => array(
        '#type' => 'textfield',
        '#title' => t('API key'),
        '#description' => t('Flickr API key, ask for one !url', array('!url' => l(t('here'), 'http://www.flickr.com/services/api/misc.api_keys.html'))),
        '#default_value' => isset($node->galerie_api_key) ? $node->galerie_api_key : '',
        '#maxlength' => 32,
        '#required' => TRUE,
      ),
    ),
  );

  if (isset($node->galerie_type)) switch ($node->galerie_type) {
    case 'flickr_tags':
      $form['galerie_flickr_details'] += array(
        'galerie_tags' => array(
          '#type' => 'textfield',
          '#title' => t('Tags'),
          '#description' => t('Comma-delimited list of tags of which to display the images.'),
          '#default_value' => isset($node->galerie_tags) ? $node->galerie_tags : '',
          '#maxlength' => 255,
          '#required' => TRUE,
        ),
        'galerie_tags_operator' => array(
          '#type' => 'radios',
          '#title' => t('Operator'),
          '#description' => t('Display images with all of these tags, or with any of these tags.'),
          '#default_value' => isset($node->galerie_tags_operator) ? $node->galerie_tags_operator : 'any',
          '#options' => array(
            'any' => t('any'),
            'all' => t('all'),
          ),
          '#required' => FALSE,
        ),
      );
      break;
    case 'flickr_user':
      $form['galerie_flickr_details'] += array(
        'galerie_nsid' => array(
          '#type' => 'textfield',
          '#title' => t('User'),
          '#description' => t('ID of the user of which to display the pictures. This is an "NSID" that looks like "47178441@N00".'),
          '#default_value' => isset($node->galerie_nsid) ? $node->galerie_nsid : '',
          '#maxlength' => 255,
          '#required' => TRUE,
        ),
        'galerie_tags' => array(
          '#type' => 'textfield',
          '#title' => t('Tags'),
          '#description' => t('Comma-delimited list of tags that will be used to filter the user\'s images.'),
          '#default_value' => isset($node->galerie_tags) ? $node->galerie_tags : '',
          '#maxlength' => 255,
          '#required' => FALSE,
        ),
        'galerie_tags_operator' => array(
          '#type' => 'radios',
          '#title' => t('Operator'),
          '#description' => t('Display images with all of these tags, or with any of these tags.'),
          '#default_value' => isset($node->galerie_tags_operator) ? $node->galerie_tags_operator : 'any',
          '#options' => array(
            'any' => t('any'),
            'all' => t('all'),
          ),
          '#required' => FALSE,
        ),
      );
      break;
    case 'flickr_set':
      $form['galerie_flickr_details'] += array(
        'galerie_set_id' => array(
          '#type' => 'textfield',
          '#title' => t('Set ID'),
          '#description' => t('ID of the set of which to display the pictures. This set id looks like "72157629016070649".'),
          '#default_value' => isset($node->galerie_set_id) ? $node->galerie_set_id : '',
          '#maxlength' => 255,
          '#required' => TRUE,
        ),
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_node_prepare().
 * We need to add our javascript in the galerie form just in case our
 * type is used. There might be better ways but this will do for now.
 */
function galerie_flickr_node_prepare($node) {
  if ($node->type == 'galerie') {
    drupal_add_js(drupal_get_path('module', 'galerie_flickr') . '/galerie_flickr.js');
  }
}

/**
 * Implements hook_node_insert().
 */
function galerie_flickr_load($nodes) {
  $result = db_query('SELECT nid, api_key, set_id, nsid, tags, tags_operator FROM {galerie_flickr} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->galerie_api_key = $record->api_key;
    $nodes[$record->nid]->galerie_set_id = $record->set_id;
    $nodes[$record->nid]->galerie_nsid = $record->nsid;
    $nodes[$record->nid]->galerie_tags = $record->tags;
    $nodes[$record->nid]->galerie_tags_operator = $record->tags_operator;
  }
}

/**
 * Implements hook_node_insert().
 */
function galerie_flickr_node_insert($node) {
  if ($node->type == 'galerie') switch ($node->galerie_type) {
    case 'flickr_tags':
      db_insert('galerie_flickr')
        ->fields(array(
          'nid' => $node->nid,
          'api_key' => $node->galerie_api_key,
          'set_id' => '',
          'nsid' => '',
          'tags' => $node->galerie_tags,
          'tags_operator' => $node->galerie_tags_operator,
        ))
        ->execute();
      break;
    case 'flickr_user':
      db_insert('galerie_flickr')
        ->fields(array(
          'nid' => $node->nid,
          'api_key' => $node->galerie_api_key,
          'set_id' => '',
          'nsid' => $node->galerie_nsid,
          'tags' => $node->galerie_tags,
          'tags_operator' => $node->galerie_tags_operator,
        ))
        ->execute();
      break;
    case 'flickr_set':
      db_insert('galerie_flickr')
        ->fields(array(
          'nid' => $node->nid,
          'api_key' => $node->galerie_api_key,
          'set_id' => $node->galerie_set_id,
          'nsid' => '',
          'tags' => '',
          'tags_operator' => '',
        ))
        ->execute();
      break;
  }
}

/**
 * Implements hook_node_update().
 */
function galerie_flickr_node_update($node) {
  if ($node->type == 'galerie') switch ($node->galerie_type) {
    case 'flickr_tags':
      db_update('galerie_flickr')
        ->fields(array(
          'nid' => $node->nid,
          'api_key' => $node->galerie_api_key,
          'set_id' => '',
          'nsid' => '',
          'tags' => $node->galerie_tags,
          'tags_operator' => $node->galerie_tags_operator,
        ))
        ->condition('nid', $node->nid)
        ->execute();
      break;
    case 'flickr_user':
      db_update('galerie_flickr')
        ->fields(array(
          'nid' => $node->nid,
          'api_key' => $node->galerie_api_key,
          'set_id' => '',
          'nsid' => $node->galerie_nsid,
          'tags' => $node->galerie_tags,
          'tags_operator' => $node->galerie_tags_operator,
        ))
        ->condition('nid', $node->nid)
        ->execute();
      break;
    case 'flickr_set':
      db_update('galerie_flickr')
        ->fields(array(
          'nid' => $node->nid,
          'api_key' => $node->galerie_api_key,
          'set_id' => $node->galerie_set_id,
          'nsid' => '',
          'tags' => '',
          'tags_operator' => '',
        ))
        ->condition('nid', $node->nid)
        ->execute();
      break;
  }
}

/**
 * Turns offset + count into Flickr's idea of "pages" with count results each.
 */
function _galerie_flickr_offset_count_to_results_page($offset, $count) {
  $results = $offset + $count;
  $page = 1;
  $results_offset = $offset;

  if ($offset > $count) for ($i = $count; $i <= $offset ; $i++) {
    if ($offset%$i == 0) {
      $results = $i;
      $page = $offset/$i + 1;
      $results_offset = 0;
      break;
    }
  }

  return array($results, $page, $results_offset);
}

/**
 * Implements hook_node_delete().
 */
function galerie_flickr_node_delete($node) {
  if ($node->type == 'galerie') switch ($node->galerie_type) {
    case 'flickr_tags':
    case 'flickr_user':
      db_delete('galerie_flickr')
        ->condition('nid', $node->nid)
        ->execute();
      break;
  }
}

/**
 * Implements hook_galerie_list().
 */
function galerie_flickr_galerie_list($node, $offset, $count) {
  $images = array();

  if ($node->galerie_set_id) {
    $url  = 'https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos';
    $url .= '&format='  . 'php_serial';
    $url .= '&extras='  . 'description,last_update,date_taken,owner_name,url_sq,url_m,url_l,url_o,owner,path_alias,geo';
    $url .= '&api_key=' . urlencode($node->galerie_api_key);
    $url .= '&photoset_id=' . urlencode($node->galerie_set_id);
  } else {
    $url  = 'https://api.flickr.com/services/rest/?method=flickr.photos.search';
    $url .= '&format='  . 'php_serial';
    $url .= '&extras='  . 'description,last_update,date_taken,owner_name,url_sq,url_m,url_l,url_o,owner,geo';
    $url .= '&api_key=' . urlencode($node->galerie_api_key);
    $url .= '&tag_mode='. urlencode($node->galerie_tags_operator);
    $url .= '&tags='    . urlencode($node->galerie_tags);
    if (isset($node->galerie_nsid)) {
      $url .= '&user_id=' . urlencode($node->galerie_nsid);
    }
  }

  // Now is the annoying thing. We need $count images after $offset and Flickr's
  // API sees results as a number of pages all having the same $count of images,
  // one query returns one page of results. I can't understand this dumb choice.
  list($results, $page, $offset) = _galerie_flickr_offset_count_to_results_page($offset, $count);
  $url .= '&per_page=' . urlencode($results);
  $url .= '&page='     . urlencode($page);
  // The result will contain *at least* $count results (unless there are simply
  // less matching images), with the first *requested* result being at $offset.

  $result = drupal_http_request($url, array('timeout' => 3));

  if (isset($result->error) and $result->error) {
    drupal_set_message(t('Cannot retrieve images from Flickr: !error', array('!error' => $result->error)), 'error');
    return array();
  }

  if (!$data = unserialize($result->data)) {
    drupal_set_message(t('Cannot retrieve images from Flickr'), 'error');
    return array();
  }

  if ($data['stat'] == 'fail' and !($node->galerie_set_id && $page > 1)) {
    // Flickr returns "Photoset not found" when asking for the second page
    // of a set when the page would be empty, instead of some useful code.
    drupal_set_message(t('Cannot retrieve images from Flickr for gallery !title: !error', array('!error' => $data['message'], '!title' => $node->title)), 'error');
    return array();
  }

  if ($node->galerie_set_id) foreach (array_slice($data['photoset']['photo'], $offset) as $item) {
    $images[] = _galerie_flickr_photoset_item_to_image($item, $data['photoset']['owner']);
  } else foreach (array_slice($data['photos']['photo'], $offset) as $item) {
    $images[] = _galerie_flickr_search_item_to_image($item);
  }

  return $images;
}

/**
 * Returns the image info for a Flickr photoset item
 */
function _galerie_flickr_photoset_item_to_image($item, $owner) {
  if (isset($item['latitude']) and $item['latitude'] and isset($item['longitude']) and $item['longitude']) {
    $geolocation = array('latitude' => $item['latitude'], 'longitude' => $item['longitude']);
  } else {
    $geolocation = FALSE;
  }
  return array(
    'title' => $item['title'],
    'src' => isset($item['url_m']) ? $item['url_m'] : (isset($item['url_o']) ? $items['url_o'] : ''),
    'description' => (isset($item['description']) and is_array($item['description'])) ? $item['description']['_content'] : '',
    'date' => strtotime($item['datetaken']),
    'id' => $item['id'],
    'link' => 'http://www.flickr.com/photos/' . $owner . '/' . $item['id'],
    'thumb-src' => $item['url_sq'],
    'geolocation' => $geolocation,
  );
}

/**
 * Returns the image info for a Flickr search result item
 */
function _galerie_flickr_search_item_to_image($item) {
  if (isset($item['latitude']) and $item['latitude'] and isset($item['longitude']) and $item['longitude']) {
    $geolocation = array('latitude' => $item['latitude'], 'longitude' => $item['longitude']);
  } else {
    $geolocation = FALSE;
  }
  return array(
    'title' => $item['title'],
    'src' => isset($item['url_m']) ? $item['url_m'] : (isset($item['url_o']) ? $item['url_o'] : ''),
    'large-src' => isset($item['url_o']) ? $item['url_o'] : (isset($item['url_l']) ? $item['url_l'] : ''),
    'description' => (isset($item['description']) and is_array($item['description'])) ? $item['description']['_content'] : '',
    'date' => strtotime($item['datetaken']),
    'id' => $item['id'],
    'link' => 'http://www.flickr.com/photos/' . $item['owner'] . '/' . $item['id'],
    'thumb-src' => $item['url_sq'],
    'geolocation' => $geolocation,
  );
}

/**
 * Implements hook_galerie_image().
 */
function galerie_flickr_galerie_image($node, $image_id) {
  $url  = 'https://api.flickr.com/services/rest/?method=flickr.photos.getInfo';
  $url .= '&format='   . 'php_serial';
  $url .= '&api_key='  . urlencode($node->galerie_api_key);
  $url .= '&photo_id=' . urlencode($image_id);

  $result = drupal_http_request($url, array('timeout' => 3));

  if (isset($result->error) and $result->error) {
    drupal_set_message(t('Cannot retrieve image from Flickr: !error', array('!error' => $result->error)), 'error');
    return array();
  }

  if (!$data = unserialize($result->data)) {
    drupal_set_message(t('Cannot retrieve image from Flickr'), 'error');
    return array();
  }

  return _galerie_flickr_getInfo_to_image($data['photo']);
}

/**
 * Returns the image info for a Flickr getInfo result
 */
function _galerie_flickr_getInfo_to_image($item) {
  if (isset($item['latitude']) and $item['latitude'] and isset($item['longitude']) and $item['longitude']) {
    $geolocation = array('latitude' => $item['latitude'], 'longitude' => $item['longitude']);
  } else {
    $geolocation = FALSE;
  }
  return array(
    'title' => (isset($item['title']) and is_array($item['title'])) ? $item['title']['_content'] : '',
    'src' => 'http://farm' . $item['farm'] . '.static.flickr.com/' . $item['server'] . '/' . $item['id'] . '_' . $item['secret'] . '.jpg',
    'description' => (isset($item['description']) and is_array($item['description'])) ? $item['description']['_content'] : '',
    'date' => strtotime($item['dates']['taken']),
    'id' => $item['id'],
    'link' => 'http://www.flickr.com/photos/' . $item['owner']['nsid'] . '/' . $item['id'],
    'thumb-src' => 'http://farm' . $item['farm'] . '.static.flickr.com/' . $item['server'] . '/' . $item['id'] . '_' . $item['secret'] . '_s.jpg',
    'geolocation' => $geolocation,
  );
}

/**
 * Implements hook_galerie_geoloc_info().
 */
function galerie_flickr_galerie_geoloc_info() {
  return array(
    'has geolocation information' => TRUE,
  );
}

