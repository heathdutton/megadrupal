<?php

/**
 * @file
 * The module that manages galleries created from Imgur images.
 */

/**
 * Implements hook_galerie_types().
 */
function galerie_imgur_galerie_types() {
  return array(
    'imgur' => array(
      'title' => t('Imgur'),
      'description' => t('A gallery from an Imgur gallery.'),
      'module' => 'galerie_imgur',
    ),
  );
}

/**
 * Implements hook_galerie_form().
 */
function galerie_imgur_galerie_form($node, $form_state) {
  if (isset($node->galerie_type) and !array_key_exists($node->galerie_type, galerie_imgur_galerie_types())) {
    return NULL;
  }

  $form = array(
    'galerie_imgur_details' => array(
      '#weight' => 2,
      '#type' => 'fieldset',
      '#title' => t('Imgur details'),
    ),
    'galerie_url' => array(
      '#type' => 'textfield',
      '#title' => t('URL'),
      '#description' => t('URL of the gallery on Imgur.com.'),
      '#default_value' => isset($node->galerie_url) ? $node->galerie_url : 'http://imgur.com/gallery',
      '#maxlength' => 255,
      '#required' => TRUE,
    ),
    'galerie_terms' => array(
      '#type' => 'textfield',
      '#title' => t('Search terms'),
      '#description' => t('Search terms within the gallery. Some galleries might not support search (subreddits, for instance).'),
      '#default_value' => isset($node->galerie_terms) ? $node->galerie_terms : '',
      '#maxlength' => 255,
      '#required' => FALSE,
    ),
  );

  return $form;
}

/**
 * Implements hook_node_insert().
 */
function galerie_imgur_load($nodes) {
  $result = db_query('SELECT nid, url, terms FROM {galerie_imgur} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->galerie_url = $record->url;
    $nodes[$record->nid]->galerie_terms = $record->terms;
  }
}

/**
 * Implements hook_node_insert().
 */
function galerie_imgur_node_insert($node) {
  if ($node->type == 'galerie') {
    db_insert('galerie_imgur')
      ->fields(array(
        'nid' => $node->nid,
        'url' => $node->galerie_url,
        'terms' => $node->galerie_terms,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function galerie_imgur_node_update($node) {
  if ($node->type == 'galerie') {
    db_update('galerie_imgur')
      ->fields(array(
        'nid' => $node->nid,
        'url' => $node->galerie_url,
        'terms' => $node->galerie_terms,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Turns offset + count into Imgur's idea of "pages" with count results each.
 */
function _galerie_imgur_offset_count_to_results_page($offset, $count) {
  $perpage = 56;

  $page = floor($offset/$perpage);
  $results_offset = $offset % $perpage;

  return array($page, $results_offset);
}

/**
 * Implements hook_node_delete().
 */
function galerie_imgur_node_delete($node) {
  if ($node->type == 'galerie') {
    db_delete('galerie_imgur')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_galerie_list().
 */
function galerie_imgur_galerie_list($node, $offset, $count) {
  $images = array();

  $url = $node->galerie_url . '/top';
  list($page, $offset) = _galerie_imgur_offset_count_to_results_page($offset, $count);
  $url .= '/page/' . $page . '.json';

  if ($node->galerie_terms) {
    $url .= '?q=' . urlencode($node->galerie_terms);
  }

  // We need $count images after $offset and Imgur's API sees results as a number
  // of pages all having the same $count of images (56), one query returns one
  // page of results. I can't understand this dumb choice but it's also Flickr's.

  // The result will contain 56 results (unless there are less matching images)
  // with the first *requested* result being at $offset. We might end up with
  // only a few interesting results in the end.

  $result = drupal_http_request($url, array('timeout' => 3));

  if (isset($result->error) and $result->error) {
    drupal_set_message(t('Cannot retrieve images from Imgur: !error', array('!error' => $result->error)), 'error');
    return array();
  }

  if (!$data = drupal_json_decode($result->data)) {
    drupal_set_message(t('Cannot retrieve images from Imgur'), 'error');
    return array();
  }

  foreach (array_slice($data['data'], $offset) as $item) {
    $images[] = _galerie_imgur_item_to_image($item);
  }

  return $images;
}

/**
 * Returns the image info for an Imgur item
 */
function _galerie_imgur_item_to_image($item) {
  return array(
    'title' => $item['title'],
    'src' => 'http://i.imgur.com/' . $item['hash'] . $item['ext'],
    'description' => '',
    'date' => strtotime($item['datetime']),
    'id' => $item['hash'],
    'link' => 'http://reddit.com' . $item['permalink'],
    'thumb-src' => 'http://i.imgur.com/' . $item['hash'] . 's' . $item['ext'],
    'geolocation' => FALSE,
  );
}

/**
 * Returns the image info for an Imgur item
 * What a shitty API. This is barely usable.
 */
function _galerie_imgur_item_detail_to_image($item) {
  return array(
    'title' => $item['id'],
    'src' => $item['link'],
    'description' => '',
    'date' => $item['datetime'],
    'id' => $item['id'],
    'link' => $item['link'],
    'thumb-src' => $item['link'],
    'geolocation' => FALSE,
  );
}

/**
 * Implements hook_galerie_image().
 * This is getting weird - json for galleries ans searchs is
 * accessible from anyone, but details on an image need
 * a client id. This one was registered for this module.
 */
function galerie_imgur_galerie_image($node, $image_id) {
  $url = 'https://api.imgur.com/3/image/' . $image_id;

  $result = drupal_http_request($url,
    array(
      'timeout' => 3,
      'headers' => array(
        'Authorization' => 'Client-ID dfa20e079e41425',
      ),
    )
  );

  if (isset($result->error) and $result->error) {
    drupal_set_message(t('Cannot retrieve image from Imgur: !error', array('!error' => $result->error)), 'error');
    return array();
  }

  if (!$data = drupal_json_decode($result->data)) {
    drupal_set_message(t('Cannot retrieve image from Imgur'), 'error');
    return array();
  }

  return _galerie_imgur_item_detail_to_image($data['data']);
}

