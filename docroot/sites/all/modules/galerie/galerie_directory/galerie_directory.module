<?php

/**
 * @file
 * The core module that manages all common galerie operations
 */

/**
 * Implements hook_galerie_types().
 */
function galerie_directory_galerie_types() {
  return array(
    'directory' => array(
      'title' => t('Directory'),
      'description' => t('A gallery based on the contents of a directory.'),
      'module' => 'galerie_directory',
    ),
  );
}

/**
 * Implements hook_node_prepare().
 * We need to add our javascript in the galerie form just in case our
 * type is used. There might be better ways but this will do for now.
 */
function galerie_directory_node_prepare($node) {
  if ($node->type == 'galerie') {
    drupal_add_js(drupal_get_path('module', 'galerie_directory') . '/galerie_directory.js');
  }
}

/**
 * Implements hook_theme().
 */
function galerie_directory_theme($existing, $type, $theme, $path) {
  return array(
    'galerie_directory_exif' => array(
      'template' => 'galerie-directory-exif',
      'variables' => array('data' => array()),
    ),
  );
}

function template_preprocess_galerie_directory_exif(&$variables) {
  $variables['exif'] = $variables['data'];
}

/**
 * Implements hook_galerie_form().
 */
function galerie_directory_galerie_form($node, $form_state) {
  if (isset($node->galerie_type) and !array_key_exists($node->galerie_type, galerie_directory_galerie_types())) {
    return NULL;
  }

  $form = array(
    'galerie_directory_details' => array(
      '#weight' => 2,
      '#type' => 'fieldset',
      '#title' => t('Directory details'),

      'galerie_directory' => array(
        '#type' => 'textfield',
        '#title' => t('Path'),
        '#description' => t('Path to the directory that will be displayed in this gallery.'),
        '#default_value' => isset($node->galerie_directory) ? $node->galerie_directory : '',
        '#required' => FALSE,
      ),
      'galerie_recursive' => array(
        '#type' => 'checkbox',
        '#title' => t('Recursive'),
        '#description' => t('If this box is checked, all images in sub-directories will be displayed.'),
        '#default_value' => isset($node->galerie_recursive) ? $node->galerie_recursive : FALSE,
      ),
      'galerie_exif' => array(
        '#type' => 'checkbox',
        '#title' => t('Show EXIF'),
        '#description' => t('If this box is checked, EXIF data (date taken, etc) of pictures will be shown if it exists. This feature needs the EXIF extension enabled on your PHP installation.'),
        '#default_value' => isset($node->galerie_exif) ? $node->galerie_exif : function_exists('exif_read_data'),
        '#readonly' => function_exists('exif_read_data') ? FALSE : TRUE,
      ),
    ),
  );

  if (!isset($node->nid) or !$node->nid) {
    $form['galerie_create_directory'] = array(
      '#weight' => 1,
      '#type' => 'checkbox',
      '#title' => t('Create a new directory'),
      '#description' => t('If checked, an empty directory will automatically be created for this gallery, otherwise you will have to choose a directory to use.'),
      '#default_value' => TRUE,
    );

    $form['galerie_directory_details']['#attributes'] = array('style' => 'display: none');
  }

  return $form;
}

/**
 * Implements hook_node_load().
 */
function galerie_directory_load($nodes) {
  $result = db_select('galerie_directory')
    ->fields('galerie_directory')
    ->condition('nid', array_keys($nodes))
    ->execute();
  while ($record = $result->fetchAssoc()) {
    $nodes[$record['nid']]->galerie_directory = $record['directory'];
    $nodes[$record['nid']]->galerie_recursive = $record['recursive'];
    $nodes[$record['nid']]->galerie_exif = $record['exif'];
  }
}

/**
 * Implements hook_node_insert().
 */
function galerie_directory_node_insert($node) {
  if ($node->type == 'galerie' and $node->galerie_type == 'directory') {
    if ($node->galerie_create_directory) {
      $node->galerie_directory = file_build_uri('galerie-' . $node->nid);

      for ($try = 1 ; file_exists($node->galerie_directory) ; $try++) {
        // just in case it already exists
        $node->galerie_directory = file_build_uri('galerie-' . $node->nid . '-' . $try);
      }

      if (drupal_mkdir($node->galerie_directory)) {
        drupal_set_message(t('A new directory was created for this gallery: !directory.', array('!directory' => $node->galerie_directory)), 'status');
      } else {
        drupal_set_message(t('A new directory (!directory) could not be created for this gallery, you may have to create it yourself.', array('!directory' => $node->galerie_directory)), 'error');
      }

      $node->galerie_recursive = TRUE;
    }

    db_insert('galerie_directory')
      ->fields(array(
        'nid' => $node->nid,
        'directory' => $node->galerie_directory,
        'recursive' => $node->galerie_recursive,
        'exif' => $node->galerie_exif,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function galerie_directory_node_update($node) {
  if ($node->type == 'galerie' and $node->galerie_type == 'directory') {
    db_update('galerie_directory')
      ->fields(array(
        'nid' => $node->nid,
        'directory' => $node->galerie_directory,
        'recursive' => $node->galerie_recursive,
        'exif' => $node->galerie_exif,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function galerie_directory_node_delete($node) {
  if ($node->type == 'galerie' and $node->galerie_type == 'directory') {
    db_delete('galerie_directory')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_galerie_image().
 */
function galerie_directory_galerie_image($node, $image_id) {
  $file = _galerie_directory_image_path($node, $image_id);
  return _galerie_directory_image_info($node, $file);
}

/**
 * Implements hook_galerie_list().
 */
function galerie_directory_galerie_list($node, $offset, $count) {
  $images = array();

  if (!file_exists($node->galerie_directory) or !is_dir($node->galerie_directory)) {
    drupal_set_message(t('The directory for this galerie (!directory) does not exist.', array('!directory' => $node->galerie_directory)), 'error');
    return array();
  }

  $files = _galerie_directory_scandir($node->galerie_directory, $node->galerie_recursive);
  foreach ($files as $n => $file) {
    if ($n < $offset) {
      continue;
    } else if ($n >= $count + $offset) {
      break;
    }

    if ($image = _galerie_directory_image_info($node, $file)) {
      $image['thumb-src'] = _galerie_directory_thumbnail_src($node, $image['id']);
      $images[] = $image;
    }
  }

  return $images;
}

/**
 * Turns a filepath into a human-readable title.
 */
function _galerie_directory_image_path_to_title($path) {
  $title = preg_replace('/\.[a-z]+$/', '', basename($path));
  $title = strtr($title, array(
    '_' => ' ',
  ));
  return check_plain($title);
}

/**
 * Returns a plain alphanumeric unique id for an image based on its path
 * @param $path The path to the image.
 * @return A string id from which the path can be guessed.
 *
 * If the file is already known, use these information. Otherwise, make it
 * known and give it an id and a title from it filename.
 */
function _galerie_directory_image_id($node, $path) {
  $result = db_select('galerie_directory_images')->fields('galerie_directory_images', array('iid'))->condition('path', $path)->execute()->fetchField();
  if (!$result and file_exists($path)) {
    db_insert('galerie_directory_images')
      ->fields(array(
        'path' => $path,
        'title' => _galerie_directory_image_path_to_title($path),
        'description' => '',
        'link' => '',
        'exif' => serialize(_galerie_directory_image_exif($path)),
      ))
      ->execute();
    $result = db_select('galerie_directory_images')->fields('galerie_directory_images', array('iid'))->condition('path', $path)->execute()->fetchField();
  }
  return $result;
}

/**
 * Returns the path of an image from its id
 */
function _galerie_directory_image_path($node, $id) {
  $path = db_select('galerie_directory_images')->fields('galerie_directory_images', array('path'))->condition('iid', $id)->execute()->fetchField();

  if (file_exists($path)) {
    return $path;
  } else {
    db_query('DELETE FROM {galerie_directory_images} WHERE iid IN (:iid)', array(':iid' => $id));
  }
}

function galerie_directory_file_download($uri) {
  $result = db_select('galerie_directory_images')->fields('galerie_directory_images', array('iid'))->condition('path', $uri)->execute()->fetchField();
  if ($result && $image_object = image_load($uri)) {
    return array('Content-Type' => $image_object->info['mime_type']);
  } else {
    return FALSE;
  }
}

/**
 * Update an image's EXIF data.
 * There are several possible states for EXIF data:
 * Not set yet (NULL)
 * Exif extension not enabled (NULL)
 * No data in the picture (empty array)
 * Exif tags present (array)
 *
 * I made the decision to always check for EXIF tags
 * and update them when the data is NULL, since this
 * allows tags to be loaded and displayed as soon as
 * the EXIF extension is enabled even on preexisting
 * site installations.
 */
function _galerie_directory_image_update_exif($node, $iid, $file) {
  if (function_exists('exif_read_data')) {
    $exif = _galerie_directory_image_exif($file);

    db_update('galerie_directory_images')
      ->fields(array(
        'exif' => serialize($exif),
      ))
      ->condition('iid', $iid)
      ->execute();

    return $exif;
  } else {
    return array();
  }
}

/**
 * Retrieves EXIF data from a file and returns an array containing
 * nicely formatted human readable label => human readable value
 * rows as well as a 'data' row with some of the original EXIF data.
 */
function _galerie_directory_image_exif($file) {
  if (function_exists('exif_read_data')) {
    $exif = array();
    $data = @exif_read_data(drupal_realpath($file), 'EXIF');

    $fields = array(
      'Make' => array(
        'label' => t('Make'),
        'parse' => 'trim',
      ),
      'Model' => array(
        'label' => t('Model'),
        'parse' => 'trim',
      ),
      'Software' => array(
        'label' => t('Software'),
        'parse' => 'trim',
      ),
      'DateTimeOriginal' => array(
        'label' => t('Date and time'),
        'parse' => function($data) {
          $date = DateTime::createFromFormat('Y:m:d H:i:s', $data);
          return format_date($date->getTimestamp());
        },
      ),
      'ExposureTime' => array(
        'label' => t('Exposure time'),
        'parse' => function($data) {
          if (strpos($data, '/') !== NULL) {
            list($top, $bottom) = explode('/', $data);

            // This comes from stackoverflow:
            // http://stackoverflow.com/questions/3049998/parsing-exifs-exposuretime-using-php
            if (($bottom % $top) == 0) {
              $exposure = '1/' . round($bottom/$top, 0) . ' s';
            } else {
              if ($bottom == 1) {
                $exposure = $top . ' s';
              } else {
                $exposure = $top . '/' . $bottom . ' s';
              }
            }

            return $exposure;
          } else {
            return $data;
          }
        },
      ),
      'FNumber' => array(
        'label' => t('F-number'),
        'parse' => function($data) {
          if (strpos($data, '/') !== NULL) {
            list($top, $bottom) = explode('/', $data);

            // Yes this is an <i> tag, it is completely appropriate
            // and valid here, the 'f' of a f-number is to be specifically
            // italicised and not just emphasised.
            return '<i>f</i>/' . round($top/$bottom, 2);
          } else {
            return $data;
          }
        },
      ),
      'ISOSpeedRatings' => array(
        'label' => t('ISO speed ratings'),
        'parse' => function($data) {
          return (string)$data;
        },
      ),
      'FocalLength' => array(
        'label' => t('Focal length'),
        'parse' => function($data) {
          if (strpos($data, '/') !== NULL) {
            list($top, $bottom) = explode('/', $data);

            return round($top/$bottom, 0) . ' mm';
          } else {
            return $data;
          }
        },
      ),
      'Flash' => array(
        'label' => t('Flash'),
        'parse' => function($data) {
          return ($data & 1) ? t('Fired') : t('Did not fire');
        },
      ),
    );

    $keep = array(
      'GPSLatitude' => TRUE,
      'GPSLongitude' => TRUE,
      'GPSLatitudeRef' => TRUE,
      'GPSLongitudeRef' => TRUE,
      'Orientation' => TRUE,
    );

    if (is_array($data)) foreach ($data as $key => $value) {
      if (isset($fields[$key])) {
        $field = $fields[$key];
        $exif[$field['label']] = $field['parse']($value);
      } else if (!isset($keep[$key])) {
        // Remove uninteresting fields from stored data.
        unset($data[$key]);
      }
    }

    $exif['data'] = $data;

    return $exif;
  } else {
    return array();
  }
}

/**
 * Returns an array defining the image information of a file.
 */
function _galerie_directory_image_info($node, $file) {
  $id = _galerie_directory_image_id($node, $file);

  $info = db_select('galerie_directory_images')->fields('galerie_directory_images')->condition('path', $file)->execute()->fetchAssoc();
  $info['classes'] = array();

  if ($info['exif'] === NULL and $node->galerie_exif) {
    $info['exif'] = _galerie_directory_image_update_exif($node, $id, $file);
  } else {
    $info['exif'] = unserialize($info['exif']);
  }

  $geolocation = NULL;
  if ($info['longitude'] && $info['latitude']) {
    // Sorry, if you manage to place an image *exactly* at 0,0
    // its location will be ignored.
    $geolocation = array('latitude' => $info['latitude'], 'longitude' => $info['longitude']);
  } else if (!empty($info['exif'])) {
    // Just in case EXIF tags contain this information.
    if (isset($info['exif']['data']['GPSLatitude']) and isset($info['exif']['data']['GPSLongitude'])) {

      // Geotags are stored in a wicked wicked way.
      $to_coordinate = function($array) {
        $to_float = function($fraction) {
          list($nominator, $denominator) = explode('/', $fraction);
          return isset($denominator) ? $nominator/$denominator : $fraction;
        };

        return $to_float($array[0]) + $to_float($array[1]) / 60 + $to_float($array[2]) / 3600;
      };

      $lat = $to_coordinate($info['exif']['data']['GPSLatitude']);
      if ($info['exif']['data']['GPSLatitudeRef'] != 'N') {$lat = -1*$lat;}
      $lon = $to_coordinate($info['exif']['data']['GPSLongitude']);
      if ($info['exif']['data']['GPSLongitudeRef'] != 'W') {$lon = -1*$lon;}

      $geolocation = array('latitude' => $lat, 'longitude' => $lon);
    }
  }

  if (isset($info['exif']['data']['Orientation'])) {
    $info['classes'][] = 'galerie-exif-orientation-' . (int)$info['exif']['data']['Orientation'];
  }

  $actions = array();

  if (node_access('update', $node)) {
    $actions += array(
      l(t('edit'), 'node/' . $node->nid . '/edit/' . $id),
      l(t('delete'), 'node/' . $node->nid . '/delete/' . $id),
    );
  }

  $info = array(
    'title' => $info['title'],
    'src' => _galerie_directory_medium_src($node, $id),
    'large-src' => file_create_url($file),
    'description' => $info['description'],
    'date' => filemtime($file),
    'id' => $id,
    'link' => $info['link'] ?: file_create_url($file),
    'extra' => $node->galerie_exif ? theme('galerie_directory_exif', array('data' => $info['exif'])) : '',
    'classes' => $info['classes'],
    'actions' => $actions,
    'geolocation' => $geolocation,
  );

  return $info;
}

/**
 * Returns the thumbnails directory.
 */
function _galerie_directory_thumbnails_directory_base() {
  $directory = file_build_uri('galerie-directory');
  if (!file_exists($directory)) {
    drupal_mkdir($directory, 0777, TRUE);
  }
  return $directory;
}

/**
 * Returns the thumbnails directory to use for an image.
 */
function _galerie_directory_thumbnails_directory($node) {
  $directory = _galerie_directory_thumbnails_directory_base().'/'.$node->nid;
  if (!file_exists($directory)) {
    drupal_mkdir($directory, 0777, TRUE);
  }
  return $directory;
}

/**
 * Returns the thumbnails directory.
 */
function _galerie_directory_medium_directory_base() {
  $directory = file_build_uri('galerie-directory/medium');
  if (!file_exists($directory)) {
    drupal_mkdir($directory, 0777, TRUE);
  }
  return $directory;
}

/**
 * Returns the thumbnails directory to use for an image.
 */
function _galerie_directory_medium_directory($node) {
  $directory = _galerie_directory_medium_directory_base().'/'.$node->nid;
  if (!file_exists($directory)) {
    drupal_mkdir($directory, 0777, TRUE);
  }
  return $directory;
}

/**
 * Returns the thumbnail of an image.
 */
function galerie_directory_thumbnail($node, $image_id) {
  $thumbnail_path = _galerie_directory_thumbnails_directory($node).'/'.$image_id;

  $image_path = _galerie_directory_image_path($node, $image_id);

  if (!file_exists($thumbnail_path) or filemtime($thumbnail_path) < filemtime($image_path)) {
    copy($image_path, $thumbnail_path);
    $image_object = image_load($thumbnail_path);
    image_scale_and_crop($image_object, 75, 75);
    image_save($image_object, $thumbnail_path);
  } else {
    $image_object = image_load($thumbnail_path);
  }

  header('Content-Length: ' . filesize($thumbnail_path));
  if (is_object($image_object)) {
    header('Content-Type: ' . $image_object->info['mime_type']);
  }
  readfile($thumbnail_path);
  exit();
}

/**
 * Returns the medium size of an image.
 */
function galerie_directory_medium($node, $image_id) {
  $medium_path = _galerie_directory_medium_directory($node).'/'.$image_id;

  $image_path = _galerie_directory_image_path($node, $image_id);

  if (!file_exists($medium_path) or filemtime($medium_path) < filemtime($image_path)) {
    copy($image_path, $medium_path);
    $image_object = image_load($medium_path);
    image_scale($image_object, 600, NULL, FALSE);
    image_save($image_object, $medium_path);
  } else {
    $image_object = image_load($medium_path);
  }

  header('Content-Length: ' . filesize($medium_path));
  if (is_object($image_object)) {
    header('Content-Type: ' . $image_object->info['mime_type']);
  }
  readfile($medium_path);
  exit();
}

/**
 * Returns the thumbnail src of an image. This will be either a physical file
 * if it already exists, or a menu entry that will generate it if it does not.
 */
function _galerie_directory_thumbnail_src($node, $image_id) {
  $file = file_build_uri(_galerie_directory_thumbnails_directory($node).'/'.$image_id);

  if (!file_exists($file) or filemtime($file) < filemtime(_galerie_directory_image_path($node, $image_id))) {
    return url('galerie/directory/thumbnail/'.$node->nid.'/'.$image_id);
  } else {
    return file_create_url($file);
  }
}

/**
 * Returns the medium size src of an image. This will be either a physical file
 * if it already exists, or a menu entry that will generate it if it does not.
 */
function _galerie_directory_medium_src($node, $image_id) {
  $file = file_build_uri(_galerie_directory_medium_directory($node).'/'.$image_id);

  if (!file_exists($file) or filemtime($file) < filemtime(_galerie_directory_image_path($node, $image_id))) {
    return url('galerie/directory/medium/'.$node->nid.'/'.$image_id);
  } else {
    return file_create_url($file);
  }
}

/**
 * Returns a list of files in a directory, recursively or not.
 */
function _galerie_directory_scandir($dir, $recursive = FALSE) {
  $files = array_keys(file_scan_directory($dir, ':\.(jpg|jpeg|gif|png)$:i', array('recurse' => $recursive)));
  natsort($files);
  return array_values($files);
}

/**
 * Implements hook_menu().
 */
function galerie_directory_menu() {
  return array(
    'galerie/directory/thumbnail/%galerie_directory_menu/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'galerie_directory_thumbnail',
      'page arguments' => array(3, 4),
      'access arguments' => array('access content'),
    ),
    'galerie/directory/medium/%galerie_directory_menu/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'galerie_directory_medium',
      'page arguments' => array(3, 4),
      'access arguments' => array('access content'),
    ),
    'node/%galerie_directory_menu/upload-directory' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Upload',
      'page callback' => 'galerie_directory_upload',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
    ),
    'node/%galerie_directory_menu/upload-directory-multiple' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Upload multiple images',
      'page callback' => 'galerie_directory_upload_multiple',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
    ),
    'node/%galerie_directory_menu/edit/%' => array(
      'type' => MENU_CALLBACK,
      'title' => 'Edit image',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('galerie_directory_edit_image', 1, 3),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
    ),
    'node/%galerie_directory_menu/delete/%' => array(
      'type' => MENU_CALLBACK,
      'title' => 'Delete image',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('galerie_directory_delete_image', 1, 3),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
    ),
  );
}

/**
 * Page for deleting an image
 */
function galerie_directory_delete_image($form, $form_state, $node, $image_id) {
  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[] = l($node->title, 'node/' . $node->nid);
  drupal_set_breadcrumb($breadcrumb);

  $image = galerie_directory_galerie_image($node, $image_id);

  return array(
    'node' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
    'image_id' => array(
      '#type' => 'value',
      '#value' => $image_id,
    ),

    'confirm' => array(
      '#markup' => '<p>' . t('Are you sure you want to delete this image, %title?', array('%title' => $image['title'])) . '</p>',
    ),

    'submit' => array(
      '#type' => 'submit',
      '#title' => t('Delete'),
      '#value' => t('Delete'),
    ),

    '#submit' => array('galerie_directory_delete_image_submit'),
  );
}

/**
 * Deletes an image from disk.
 */
function galerie_directory_delete_image_submit($form, $form_state) {
  $node = $form['node']['#value'];
  $image_id = $form['image_id']['#value'];

  $path = _galerie_directory_image_path($node, $image_id);

  if (!file_unmanaged_delete($path)) {
    drupal_set_message(t('The image could not be deleted.'), 'error');
  } else {
    db_query('DELETE FROM {galerie_directory_images} WHERE iid IN (:iid)', array(':iid' => $image_id));
    drupal_set_message(t('The image was successfuly deleted.'));
  }

  drupal_goto('node/' . $node->nid);
}

/**
 * Page for editing an image
 */
function galerie_directory_edit_image($form, $form_state, $node, $image_id) {
  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[] = l($node->title, 'node/' . $node->nid);
  drupal_set_breadcrumb($breadcrumb);

  $image = galerie_directory_galerie_image($node, $image_id);
  $path = _galerie_directory_image_path($node, $image_id);

  return array(
    'node' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
    'image_id' => array(
      '#type' => 'value',
      '#value' => $image_id,
    ),
    'path' => array(
      '#type' => 'value',
      '#value' => $path,
    ),

    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t('Edit an image: !title', array('!title' => $image['title'])),

      'thumbnail' => array(
        '#markup' => '<a href="' . file_create_url(_galerie_directory_image_path($node, $image_id)) . '"><img style="float: right;" src="' . _galerie_directory_thumbnail_src($node, $image_id) . '" /></a>',
      ),

      'title' => array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => $image['title'],
        '#required' => TRUE,
      ),
      'description' => array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#default_value' => $image['description'],
        '#required' => FALSE,
      ),
      'link' => array(
        '#type' => 'textfield',
        '#title' => t('Link to a full version of the image, or any other page.'),
        '#default_value' => $image['link'],
        '#required' => FALSE,
      ),
      'file' => array(
        '#title' => t('Replace with another image'),
        '#type' => 'file',
        '#upload_location' => 'public://',
      ),

      'submit' => array(
        '#type' => 'submit',
        '#title' => t('Save'),
        '#value' => t('Save'),
      ),
    ),

    '#validate' => array('galerie_directory_edit_image_validate'),
    '#submit' => array('galerie_directory_edit_image_submit'),
  );
}

/**
 * Validates input for image edit form.
 */
function galerie_directory_edit_image_validate($form, $form_state) {
}

/**
 * Saves the new title of an image (renaming it).
 */
function galerie_directory_edit_image_submit($form, $form_state) {
  $node = $form['node']['#value'];
  $image_id = $form['image_id']['#value'];
  $path = $form['path']['#value'];

  $new_title = $form['fieldset']['title']['#value'];
  $new_description = $form['fieldset']['description']['#value'];
  $new_link = $form['fieldset']['link']['#value'];

  $fields = array(
    'title' => $new_title,
    'description' => $new_description,
    'link' => $new_link,
  );

  if ($file = file_save_upload('file')) {
    file_move($file, $path, FILE_EXISTS_REPLACE);
    $fields['exif'] = NULL;
    // Reset EXIF data if the file has changed.
  }

  db_update('galerie_directory_images')
    ->fields($fields)
    ->condition('iid', $image_id)
    ->execute();

  drupal_goto('node/' . $node->nid, array('fragment' => $image_id));
}

/**
 * Implements hook_load() for wildcards.
 * I do not really feel like digging further into this but this usage of
 * wildcards seems to collide with hook_load() taking and returning arrays.
 */
function galerie_directory_menu_load($nid) {
  if ($node = node_load($nid) and $node->type == 'galerie' and $node->galerie_type == 'directory') {
    return $node;
  } else {
    return FALSE;
  }
}

/**
 * Page for adding an image to a gallery.
 */
function galerie_directory_upload_multiple($node) {
  return drupal_get_form('galerie_directory_upload_form_multiple', $node);
}

/**
 * Form for adding an image to a gallery.
 */
function galerie_directory_upload_form_multiple($form, $form_state, $node) {
  $form = array(
    'from-disk' => array(
      '#type' => 'fieldset',
      '#title' => t('Upload from your computer'),

      'galerie-file-upload' => array(
        '#type' => 'file',
        '#title' => t('File'),
        '#description' => t('Choose the images to add to this gallery (use your CTRL key to select several files at once).'),
        '#attributes' => array('multiple' => 'multiple'),
        '#name' => 'galerie-file-upload[]',
      ),

      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Upload files'),
        '#validate' => array('galerie_directory_upload_form_multiple_files_validate'),
        '#submit' => array('galerie_directory_upload_form_multiple_files_submit'),
      ),
    ),

    'from-url' => array(
      '#type' => 'fieldset',
      '#title' => t('Download from external website'),

      'galerie-file-url' => array(
        '#type' => 'textarea',
        '#title' => t('URL'),
        '#description' => t('Enter the URLs of the images, one on each line.'),
      ),

      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Save images'),
        '#validate' => array('galerie_directory_upload_form_multiple_urls_validate'),
        '#submit' => array('galerie_directory_upload_form_multiple_urls_submit'),
      ),
    ),

    'galerie' => array(
      '#type' => 'value',
      '#value' => $node,
    ),

    '#attributes' => array('enctype' => "multipart/form-data"),
  );

  return $form;
}

/**
 * Validates form input.
 */
function galerie_directory_upload_form_multiple_urls_validate($form, &$form_state) {
  foreach (explode("\n", $form_state['values']['galerie-file-url']) as $line) {
    $line = trim($line);
    if ($line) {
      if (!valid_url($line)) {
        form_set_error('galerie-file-url', t('This does not look like a URL: !url', array('!url' => $line)));
      }
    }
  }
}

/**
 * Add images to a gallery.
 */
function galerie_directory_upload_form_multiple_urls_submit($form, $form_state) {
  $batch = array(
    'title' => t('Importing'),
    'progress_message' => t('Downloading images...'),
    'operations' => array(),
  );

  $node = $form_state['values']['galerie'];
  foreach (explode("\n", $form_state['values']['galerie-file-url']) as $line) {
    $line = trim($line);
    if ($line) {
      $batch['operations'][] = array('galerie_directory_create_from_url', array($node, $line));
    }
  }

  batch_set($batch);
  batch_process();
}

function galerie_directory_create_from_url($node, $line, &$context) {
  $result = drupal_http_request($line);

  if (isset($result->error) and $result->error) {
    drupal_set_message(t($result->error), 'error');
  } else {
    $file = file_save_data($result->data);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    if (!$file) {
      drupal_set_message(t('The image from !url could not be saved.', array('!url' => $file)), 'error');
    } else {
      $title = _galerie_directory_image_path_to_title($line);
      galerie_directory_attach_file($file, $node, $title, '', $line);
    }
  }
}

/**
 * Attach a file to a gallery
 */
function galerie_directory_attach_file($file, $node, $title = '', $description = '', $link = '') {
  $errors = file_validate_is_image($file);
  if (count($errors)) {
    foreach ($errors as $error) {
      drupal_set_message($error, 'error');
    }
    return false;
  }

  $mimetypes = file_mimetype_mapping();

  if ($file->filemime == 'application/octet-stream') {
    // try some better detection
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $file->filemime = @finfo_file($finfo, $file->uri);
    finfo_close($finfo);
  }

  if ($fkey = array_search($file->filemime, $mimetypes['mimetypes'])) {
    $typeid = $mimetypes['mimetypes'][$fkey];
    $extension = array_search($fkey, $mimetypes['extensions']);
  } else {
    // that's a safe bet
    $extension = 'jpg';
  }

  if (!in_array(strtolower($extension), array('jpg', 'jpeg', 'gif', 'png'))) {
    drupal_set_message(t('Only jpg, gif or png images are allowed.'), 'error');
    return false;
  }

  $filename = md5_file($file->uri);

  $destination = $node->galerie_directory . '/' . $filename . '.' . $extension;

  if (!$file = file_move($file, $destination)) {
    drupal_set_message(t('The image could not be saved.'), 'error');
    return false;
  } else {
    $iid = db_insert('galerie_directory_images')
      ->fields(array(
        'path' => $destination,
        'title' => $title,
        'description' => $description,
        'link' => $link,
        'exif' => serialize(_galerie_directory_image_exif($destination)),
      ))
      ->execute();
    $id = str_pad($iid, 4, '0', STR_PAD_LEFT);
    $destination = $node->galerie_directory . '/' . $id . '-' . $filename . '.' . $extension;
    $file = file_move($file, $destination);
    db_update('galerie_directory_images')
      ->fields(array(
        'path' => $destination,
      ))
      ->condition('iid', $iid, '=')
      ->execute();

    global $base_url;
    cache_clear_all(url('node/' . $node->nid, array('absolute' => TRUE)), 'cache_page');
    cache_clear_all($base_url . 'node/' . $node->nid , 'cache_page' );
    cache_clear_all('field:node:' . $node->nid, 'cache_field');

    drupal_set_message(t('Image !file has been added to the gallery, you can edit its title and description on this !link', array('!file' => $title, '!link' => l(t('page'), 'node/'.$node->nid.'/edit/'.$iid))), 'status');
    return $file;
  }
}

/**
 * Validates form input.
 */
function galerie_directory_upload_form_multiple_files_validate($form, &$form_state) {
  if (isset($_FILES['galerie-file-upload'])) {
    foreach ($_FILES['galerie-file-upload']['name'] as $index => $filename) {
      $file = _galerie_directory_file_save_upload_multiple('galerie-file-upload', $index);

      if (!$file) {
        form_set_error('galerie-file-upload', t('You must at least select one file.'));
      } else {
        $errors = file_validate_is_image($file);

        if (count($errors)) foreach ($errors as $error) {
          form_set_error('galerie-file-upload', $error);
        }
      }
    }
  }
}

/**
 * Add images to a gallery.
 */
function galerie_directory_upload_form_multiple_files_submit($form, $form_state) {
  if (isset($_FILES['galerie-file-upload'])) {
    $node = $form_state['values']['galerie'];
    foreach ($_FILES['galerie-file-upload']['name'] as $index => $filename) {
      if ($file = _galerie_directory_file_save_upload_multiple('galerie-file-upload', $index)) {
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        $title = _galerie_directory_image_path_to_title($filename);
        galerie_directory_attach_file($file, $node, $title);
      }
    }
  }
}


/**
 * This function is based on standard file_save_upload() but should handle
 * HTML5 multiple file uploads through a single input field
 */
function _galerie_directory_file_save_upload_multiple($field_name, $index, $validators = array(), $destination = FALSE, $replace = FILE_EXISTS_RENAME) {
  global $user;
  static $upload_cache;

  $source = $field_name.'['.$index.']';

  // Return cached objects without processing since the file will have
  // already been processed and the paths in _FILES will be invalid.
  if (isset($upload_cache[$source])) {
    return $upload_cache[$source];
  }

  // Make sure there's an upload to process.
  if (empty($_FILES[$field_name]['name'][$index])) {
    return NULL;
  }

  // Check for file upload errors and return FALSE if a lower level system
  // error occurred. For a complete list of errors:
  // See http://php.net/manual/en/features.file-upload.errors.php.
  switch ($_FILES[$field_name]['error'][$index]) {
    case UPLOAD_ERR_INI_SIZE:
    case UPLOAD_ERR_FORM_SIZE:
      drupal_set_message(t('The file %file could not be saved, because it exceeds %maxsize, the maximum allowed size for uploads.', array('%file' => $_FILES[$field_name]['name'][$index], '%maxsize' => format_size(file_upload_max_size()))), 'error');
      return FALSE;

    case UPLOAD_ERR_PARTIAL:
    case UPLOAD_ERR_NO_FILE:
      drupal_set_message(t('The file %file could not be saved, because the upload did not complete.', array('%file' => $_FILES[$field_name]['name'][$index])), 'error');
      return FALSE;

    case UPLOAD_ERR_OK:
      // Final check that this is a valid upload, if it isn't, use the
      // default error handler.
      if (is_uploaded_file($_FILES[$field_name]['tmp_name'][$index])) {
        break;
      }

    // Unknown error
    default:
      drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $_FILES[$field_name]['name'][$index])), 'error');
      return FALSE;
  }

  // Begin building file object.
  $file = new stdClass();
  $file->uid      = $user->uid;
  $file->status   = 0;
  $file->filename = trim(basename($_FILES[$field_name]['name'][$index]), '.');
  $file->uri      = $_FILES[$field_name]['tmp_name'][$index];
  $file->filemime = file_get_mimetype($file->filename);
  $file->filesize = $_FILES[$field_name]['size'][$index];

  $extensions = '';
  if (isset($validators['file_validate_extensions'])) {
    if (isset($validators['file_validate_extensions'][0])) {
      // Build the list of non-munged extensions if the caller provided them.
      $extensions = $validators['file_validate_extensions'][0];
    }
    else {
      // If 'file_validate_extensions' is set and the list is empty then the
      // caller wants to allow any extension. In this case we have to remove the
      // validator or else it will reject all extensions.
      unset($validators['file_validate_extensions']);
    }
  }
  else {
    // No validator was provided, so add one using the default list.
    // Build a default non-munged safe list for file_munge_filename().
    $extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
    $validators['file_validate_extensions'] = array();
    $validators['file_validate_extensions'][0] = $extensions;
  }

  if (!empty($extensions)) {
    // Munge the filename to protect against possible malicious extension hiding
    // within an unknown file type (ie: filename.html.foo).
    $file->filename = file_munge_filename($file->filename, $extensions);
  }

  // Rename potentially executable files, to help prevent exploits (i.e. will
  // rename filename.php.foo and filename.php to filename.php.foo.txt and
  // filename.php.txt, respectively). Don't rename if 'allow_insecure_uploads'
  // evaluates to TRUE.
  if (!variable_get('allow_insecure_uploads', 0) && preg_match('/\.(php|pl|py|cgi|asp|js)(\.|$)/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
    $file->filemime = 'text/plain';
    $file->uri .= '.txt';
    $file->filename .= '.txt';
    // The .txt extension may not be in the allowed list of extensions. We have
    // to add it here or else the file upload will fail.
    if (!empty($extensions)) {
      $validators['file_validate_extensions'][0] .= ' txt';
      drupal_set_message(t('For security reasons, your upload has been renamed to %filename.', array('%filename' => $file->filename)));
    }
  }

  // If the destination is not provided, use the temporary directory.
  if (empty($destination)) {
    $destination = 'temporary://';
  }

  // Assert that the destination contains a valid stream.
  $destination_scheme = file_uri_scheme($destination);
  if (!$destination_scheme || !file_stream_wrapper_valid_scheme($destination_scheme)) {
    drupal_set_message(t('The file could not be uploaded, because the destination %destination is invalid.', array('%destination' => $destination)), 'error');
    return FALSE;
  }

  $file->source = $source;
  // A URI may already have a trailing slash or look like "public://".
  if (substr($destination, -1) != '/') {
    $destination .= '/';
  }
  $file->destination = file_destination($destination . $file->filename, $replace);
  // If file_destination() returns FALSE then $replace == FILE_EXISTS_ERROR and
  // there's an existing file so we need to bail.
  if ($file->destination === FALSE) {
    drupal_set_message(t('The file %source could not be uploaded because a file by that name already exists in the destination %directory.', array('%source' => $source, '%directory' => $destination)), 'error');
    return FALSE;
  }

  // Add in our check of the the file name length.
  $validators['file_validate_name_length'] = array();

  // Call the validation functions specified by this function's caller.
  $errors = file_validate($file, $validators);

  // Check for errors.
  if (!empty($errors)) {
    $message = t('The specified file %name could not be uploaded.', array('%name' => $file->filename));
    if (count($errors) > 1) {
      $message .= theme('item_list', array('items' => $errors));
    }
    else {
      $message .= ' ' . array_pop($errors);
    }
    form_set_error($source, $message);
    return FALSE;
  }

  // Move uploaded files from PHP's upload_tmp_dir to Drupal's temporary
  // directory. This overcomes open_basedir restrictions for future file
  // operations.
  $file->uri = $file->destination;
  if (!drupal_move_uploaded_file($_FILES[$field_name]['tmp_name'][$index], $file->uri)) {
    form_set_error($source, t('File upload error. Could not move uploaded file.'));
    watchdog('file', 'Upload error. Could not move uploaded file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->uri));
    return FALSE;
  }

  // Set the permissions on the new file.
  drupal_chmod($file->uri);

  // If we are replacing an existing file re-use its database record.
  if ($replace == FILE_EXISTS_REPLACE) {
    $existing_files = file_load_multiple(array(), array('uri' => $file->uri));
    if (count($existing_files)) {
      $existing = reset($existing_files);
      $file->fid = $existing->fid;
    }
  }

  // If we made it this far it's safe to record this file in the database.
  if ($file = file_save($file)) {
    // Add file to the cache.
    $upload_cache[$source] = $file;
    return $file;
  }
  return FALSE;
}

/**
 * Page for adding an image to a gallery.
 */
function galerie_directory_upload($node) {
  return drupal_get_form('galerie_directory_upload_form', $node);
}

/**
 * Form for adding an image to a gallery.
 */
function galerie_directory_upload_form($form, $form_state, $node) {
  $form = array(
    'title' => array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#required' => TRUE,
    ),
    'description' => array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#required' => FALSE,
    ),
    'link' => array(
      '#type' => 'textfield',
      '#title' => t('Link to a full version of the image, or any other page.'),
      '#required' => FALSE,
    ),

    'from-disk' => array(
      '#type' => 'fieldset',
      '#title' => t('Upload from your computer'),
      '#description' => t('Use this method to add an image which resides on your computer.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,

      'galerie-file-upload' => array(
        '#type' => 'file',
        '#title' => t('File'),
        '#description' => t('Choose the image to add to this gallery.'),
      ),
    ),

    'from-url' => array(
      '#type' => 'fieldset',
      '#title' => t('Download from external website'),
      '#description' => t('Using this method, an image will be downloaded from an external website and added to the gallery.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,

      'galerie-file-url' => array(
        '#type' => 'textfield',
        '#title' => t('URL'),
        '#description' => t('Enter the URL of the image.'),
      ),
    ),

    'galerie' => array(
      '#type' => 'value',
      '#value' => $node,
    ),

    '#attributes' => array('enctype' => "multipart/form-data"),

    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Upload'),
    ),

    '#validate' => array('galerie_directory_upload_form_validate'),
    '#submit' => array('galerie_directory_upload_form_submit'),
  );

  return $form;
}

/**
 * Validates form input.
 */
function galerie_directory_upload_form_validate($form, &$form_state) {
  if (empty($form_state['values']['galerie-file-url'])) {
    if (!$file = file_save_upload('galerie-file-upload')) {
      form_set_error('galerie-file-upload', t('You must at least select a file or specify a URL.'));
    } else {
      $errors = file_validate_is_image($file);

      if (count($errors)) foreach ($errors as $error) {
        form_set_error('galerie-file-upload', $error);
      }
    }
  } else {
    if (!valid_url($form_state['values']['galerie-file-url'], TRUE)) {
      form_set_error('galerie-file-url', t('This does not look like a URL: !url', array('!url' => $form_state['values']['galerie-file-url'])));
    }
  }

  if (trim($form_state['values']['link']) && !valid_url($form_state['values']['link'], TRUE)) {
    form_set_error('link', t('This does not look like a URL: !url', array('!url' => $form_state['values']['galerie-file-url'])));
  }
}

/**
 * Add images to a gallery.
 */
function galerie_directory_upload_form_submit($form, $form_state) {
  $node = $form_state['values']['galerie'];

  $file = NULL;

  if (!empty($form_state['values']['galerie-file-url'])) {
    $result = drupal_http_request($form_state['values']['galerie-file-url']);

    if (isset($result->error) and $result->error) {
      drupal_set_message(t($result->error), 'error');
    } else {
      $file = file_save_data($result->data);

      if (!$file) {
        drupal_set_message(t('The image from !url could not be saved.', array('!url' => $form_state['values']['galerie-file-url'])), 'error');
      }
    }
  }

  if (!$file) {
    $file = file_save_upload('galerie-file-upload');
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }

  if ($file) {
    $title = trim($form_state['values']['title']);
    $description = trim($form_state['values']['description']);
    $link = trim($form_state['values']['link']);
    galerie_directory_attach_file($file, $node, $title, $description, $link);
  } else {
    drupal_set_message(t('The image could not be saved.'), 'error');
  }
}

/**
 * Implements hook_galerie_geoloc_info().
 */
function galerie_directory_galerie_geoloc_info() {
  // Taking care of it ourselves will make it easier to use
  // EXIF tags. It's not even worth the trouble of checking
  // here wether the extension is installed or not, because
  // it would take some special casing when it gets enabled
  // and a gallery already exists, or the contrary.  So, we
  // will just do everything ourselves.  It's just one hook
  // and two database columns anyway, really not much.
  return array(
    'has geolocation information' => TRUE,
  );
}

/**
 * Implements hook_galerie_geoloc_update().
 */
function galerie_directory_galerie_geoloc_update($node, $image_id, $coordinates = array('longitude' => 0, 'latitude' => 0)) {
  db_merge('galerie_directory_images')
    ->key(array(
      'iid' => $image_id,
    ))
    ->fields(array(
      'latitude' => $coordinates['latitude'],
      'longitude' => $coordinates['longitude'],
    ))
    ->execute();
}


