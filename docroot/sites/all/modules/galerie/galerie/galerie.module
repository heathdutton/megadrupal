<?php

/**
 * @file
 * The core module that manages all common galerie operations
 */

/**
 * Implements hook_node_info().
 */
function galerie_node_info() {
  return array(
    'galerie' => array(
      'base' => 'galerie',
      'name' => t('Galerie'),
      'description' => t('An image gallery.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function galerie_theme($existing, $type, $theme, $path) {
  return array(
    'galerie' => array(
      'template' => 'galerie',
      'render element' => 'elements',
    ),
    'galerie_slideshow' => array(
      'template' => 'galerie-slideshow',
      'render element' => 'elements',
    ),
    'galerie_thumbnail' => array(
      'template' => 'galerie-thumbnail',
      'render element' => 'elements',
    ),
    'galerie_image' => array(
      'template' => 'galerie-image',
      'variables' => array('info' => NULL),
    ),
  );
}

/**
 * Returns a list of images in a gallery.
 */
function galerie_images($node, $offset, $count) {
  $module = _galerie_module($node);
  $images = module_invoke($module, 'galerie_list', $node, $offset, $count);

  foreach (module_implements('galerie_load_images') as $module) {
    $function = $module . '_galerie_load_images';
    $function($node, $images);
  }

  foreach ($images as $key => $image) {
    if ($modified = module_invoke_all('galerie_image_info', $node, $image) and is_array($modified)) {
      $image = $modified;
    }

    $image += array(
      'title' => '',
      'description' => '',
      'date' => '',
      'extra' => '',
      'actions' => array(),
      'classes' => array(),
      'thumb-link' => url('node/' . $node->nid . '/' . $image['id']),
    );

    $images[$key] = $image;
  }

  return $images;
}

/**
 * Implements hook_node_view_alter().
 */
function galerie_view($node, $view_mode = 'full') {
  $count = 120;

  if ($view_mode == 'full') {
    $page = isset($_GET['page']) ? $_GET['page'] : 0;
    $offset = $count * $page;

    $images = galerie_images($node, $offset, $count);

    $node->content['galerie'] = array(
      '#theme' => 'galerie',
      '#images' => $images,
      '#node' => $node,
      '#page' => $page,
      '#view_mode' => $view_mode,
    );

    if (arg(2)) {
      $node->content['galerie']['#image'] = galerie_image_info($node, arg(2));
    }
  } else if ($view_mode == 'teaser') {
    $offset = 0;
    $count = 30;

    $images = galerie_images($node, $offset, $count);

    $node->content['galerie'] = array(
      '#theme' => 'galerie',
      '#images' => $images,
      '#node' => $node,
      '#view_mode' => $view_mode,
    );
  } else {
    $offset = 0;
    $count = 5;

    $images = galerie_images($node, $offset, $count);

    $node->content['galerie'] = array(
      '#theme' => 'galerie',
      '#images' => $images,
      '#node' => $node,
      '#view_mode' => $view_mode,
    );
  }

  drupal_add_css(drupal_get_path('module', 'galerie') . '/galerie.css');
  drupal_add_js(drupal_get_path('module', 'galerie') . '/galerie.js');
  drupal_add_js(array(
    'galerie' => array(
       'galerie-' . $node->nid => array(
        'imageInfoUrl' => url('galerie/ajax/image_info/' . $node->nid),
        'imageListUrl' => url('galerie/ajax/image_list/' . $node->nid),
        'offset' => $count,
        'count' => 30,
        'style' => $node->galerie_style,
        'baseUrl' => url('node/' . $node->nid),
      ),
    ),
  ), 'setting');

  return $node;
}

/**
 * Process variables for galerie.tpl.php.
 *
 * @see galerie.tpl.php
 */
function template_preprocess_galerie(&$variables) {
  $variables['images'] = array();
  $variables['thumbnails'] = '';
  foreach ($variables['elements']['#images'] as $image) {
    $thumbnail = array(
      '#theme' => 'galerie_thumbnail',
      '#image' => $image,
      '#style' =>  $variables['elements']['#node']->galerie_style,
    );
    $variables['images'][] = $image;
    $variables['thumbnails'] .= drupal_render($thumbnail);
  }

  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['node'] = $variables['elements']['#node'];
  $variables['galerie_type'] = $variables['elements']['#node']->galerie_type;
  $variables['galerie_style'] = $variables['elements']['#node']->galerie_style;

  if (isset($variables['elements']['#page'])) {
    $variables['page'] = $variables['elements']['#page'];
    $variables['more_link'] = l(t('more'), 'node/' . $variables['node']->nid, array('query' => array('page' => $variables['page'] + 1)));
  } else {
    $variables['page'] = '';
    $variables['more_link'] = '';
  }

  if (isset($variables['elements']['#image'])) {
    $variables['image'] = $variables['elements']['#image']['markup'];
  } else {
    $variables['image'] = '';
  }
}

/**
 * Process variables for galerie-thumbnail.tpl.php.
 *
 * @see galerie-thumbnail.tpl.php
 */
function template_preprocess_galerie_thumbnail(&$variables) {
  $variables['image'] = $variables['elements']['#image'];
  $variables['class'] = join(' ', $variables['elements']['#image']['classes']);
  $variables['rel'] = '';
  if ($variables['elements']['#style'] == 'colorbox') {
    $variables['class'] .= ' colorbox';
    $variables['image']['thumb-link'] = $variables['image']['large-src'] ? $variables['image']['large-src'] : $variables['image']['src'];
    $variables['rel'] = 'galerie-colorbox';

    // When using colorbox, actions need to be present next to the thumbnail to be displayed in the colorbox
    $variables['actions'] = '<div class="galerie-image-actions"><ul class="galerie-colorbox-actions"><li>' . implode('</li><li>', $variables['image']['actions']) . '</li></ul></div>';
  } else {
    // Otherwise, they'll be displayed another way, from galerie-image.tpl.php
    $variables['actions'] = '';
  }
}

/**
 * Process variables for galerie-image.tpl.php.
 *
 * @see galerie-image.tpl.php
 */
function template_preprocess_galerie_image(&$variables) {
  $variables['actions'] = theme('item_list', array(
    'items' => $variables['actions'],
    'type' => 'ul',
  ));
  $variables['class'] = join(' ', $variables['classes']);
}

/**
 * Process variables for galerie-slideshow.tpl.php.
 *
 * @see galerie-slideshow.tpl.php
 */
function template_preprocess_galerie_slideshow(&$variables) {
  $variables['images'] = array();
  $variables['thumbnails'] = '';
  foreach ($variables['elements']['#images'] as $image) {
    $thumbnail = array(
      '#theme' => 'galerie_thumbnail',
      '#image' => $image,
    );
    $variables['images'][] = $image;
    $variables['thumbnails'] .= drupal_render($thumbnail);
  }

  $variables['node'] = $variables['elements']['#node'];
  $variables['galerie_type'] = $variables['elements']['#node']->galerie_type;

  if (isset($variables['elements']['#page'])) {
    $variables['page'] = $variables['elements']['#page'];
    $variables['more_link'] = l(t('more'), 'node/' . $variables['node']->nid, array('query' => array('page' => $variables['page'] + 1)));
  } else {
    $variables['page'] = '';
    $variables['more_link'] = '';
  }

  if (isset($variables['elements']['#image'])) {
    $variables['image'] = $variables['elements']['#image']['markup'];
  } else {
    $variables['image'] = '';
  }
}

/**
 * Returns all types provided by installed modules.
 */
function galerie_types() {
  return module_invoke_all('galerie_types');
}

/**
 * Returns list of available styles.
 */
function galerie_styles() {
  $styles = array();

  if (module_exists('colorbox')) {
    $styles['colorbox'] = t('Colorbox');
  }
  $styles['multiple'] = t('Browser');
  $styles['single'] = t('Browser - one at a time');

  return $styles;
}

/**
 * Implements hook_form().
 */
function galerie_form($node, $form_state) {
  $options = array();
  foreach (galerie_types() as $type => $info) {
    $options[$type] = $info['title'];
  }

  $type = node_type_get_type($node);

  $styles = galerie_styles();

  $form = array(
    'node' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
    'title' => array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
    ),
    'galerie' => array(
      '#type' => 'fieldset',
      '#title' => t('Gallery settings'),
      'galerie_slideshow' => array(
        '#type' => 'checkbox',
        '#title' => t('Slideshow'),
        '#description' => t('Enables slideshow mode for this gallery.'),
        '#required' => FALSE,
        '#default_value' => isset($node->galerie_slideshow) ? $node->galerie_slideshow : TRUE,
      ),
      'galerie_style' => array(
        '#type' => 'select',
        '#title' => t('Gallery style'),
        '#description' => t('How the gallery will be displayed.'),
        '#required' => TRUE,
        '#default_value' => isset($node->galerie_style) ? $node->galerie_style : NULL,
        '#options' => $styles,
      ),
      'galerie_type' => array(
        '#type' => 'radios',
        '#title' => t('Type'),
        '#options' => $options,
        '#default_value' => isset($node->galerie_type) ? $node->galerie_type : FALSE,
        '#required' => TRUE,
        '#ajax' => array(
          'path' => 'galerie/ajax/type_form',
          'wrapper' => 'galerie-type-ajax-wrapper',
        ),
      ),
    ),
  );

  if (!empty($node->nid)) {
    $form['galerie']['settings'] = module_invoke_all('galerie_form', $node, $form_state);
  } else {
    $form['galerie']['settings'] = array();
  }

  $form['galerie']['settings']['#prefix'] = '<div id="galerie-type-ajax-wrapper">';
  $form['galerie']['settings']['#suffix'] = '</div>';

  return $form;
}

/**
 * Implements hook_insert().
 */
function galerie_load($nodes) {
  $types = galerie_types();
  $result = db_query('SELECT nid, type, slideshow, style FROM {galerie} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->galerie_type = $record->type;
    $nodes[$record->nid]->galerie_slideshow = $record->slideshow;
    $nodes[$record->nid]->galerie_style = $record->style;

    $module = $types[$record->type]['module'];
    module_invoke($module, 'load', array($record->nid => $nodes[$record->nid]));
  }
}

/**
 * Implements hook_insert().
 */
function galerie_insert($node) {
  db_insert('galerie')
    ->fields(array(
      'nid' => $node->nid,
      'type' => $node->galerie_type,
      'slideshow' => $node->galerie_slideshow,
      'style' => $node->galerie_style,
    ))
    ->execute();
}

/**
 * Implements hook_update().
 */
function galerie_update($node) {
  db_update('galerie')
    ->fields(array(
      'nid' => $node->nid,
      'type' => $node->galerie_type,
      'slideshow' => $node->galerie_slideshow,
      'style' => $node->galerie_style,
    ))
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_menu().
 */
function galerie_menu() {
  return array(
    'galerie/ajax/type_form' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'ajax_deliver',
      'page callback' => 'galerie_type_form',
      'access arguments' => array('access content'),
    ),
    'galerie/ajax/image_info/%galerie_menu/%' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'drupal_json_output',
      'page callback' => 'galerie_image_info',
      'page arguments' => array(3, 4),
      'access arguments' => array('access content'),
    ),
    'galerie/ajax/image_list/%galerie_menu/%/%' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'drupal_json_output',
      'page callback' => 'galerie_image_list_ajax',
      'page arguments' => array(3, 4, 5),
      'access arguments' => array('access content'),
    ),
    'node/%galerie_menu/slideshow' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Slideshow',
      'page callback' => 'galerie_slideshow',
      'page arguments' => array(1),
      'access callback' => 'galerie_node_slideshow_access_callback',
      'access arguments' => array(1),
    ),
  );
}

/**
 * Used as a callback for menu
 */
function galerie_node_slideshow_access_callback($node) {
  return $node && $node->type == 'galerie' && $node->galerie_slideshow;
}

/**
 * Used as a callback for menu
 */
function galerie_node_is_galerie($node) {
  return $node && $node->type == 'galerie';
}

/**
 * Displays a slideshow of the galerie.
 */
function galerie_slideshow($node) {
  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $count = 120;
  $offset = $count * $page;

  $images = galerie_images($node, $offset, $count);

  drupal_add_css(drupal_get_path('module', 'galerie') . '/galerie.slideshow.css');
  drupal_add_js(drupal_get_path('module', 'galerie') . '/galerie.slideshow.js');
  drupal_add_js(array(
    'galerie' => array(
       'galerie-' . $node->nid => array(
        'imageInfoUrl' => url('galerie/ajax/image_info/' . $node->nid),
        'imageListUrl' => url('galerie/ajax/image_list/' . $node->nid),
        'offset' => $count,
        'count' => 60,
        'baseUrl' => url('node/' . $node->nid),
      ),
    ),
  ), 'setting');

  return theme('galerie_slideshow', array(
        'elements' =>
          array(
            '#theme' => 'galerie_slideshow',
            '#images' => $images,
            '#node' => $node,
            '#page' => $page,
          ),
        )
      );
}

/**
 * Returns form elements for use in galerie settings forms.
 */
function galerie_type_form() {
  list($form, $form_state, $form_id, $form_build_id) = ajax_get_form();
  $cached_form = form_get_cache($form_build_id, $form_state);

  $type = $_POST['galerie_type'];
  $module = _galerie_module($type);

  $node = $form['node']['#value'];
  $node->galerie_type = $type;
  $node->galerie_slideshow = $_POST['slideshow'];
  $node->galerie_style = $_POST['style'];

  $form_array = module_invoke($module, 'galerie_form', $node, $form_state);
  $form = drupal_get_form('_galerie_type_form', $module, $node);
  $form['#prefix'] = '<div id="galerie-type-ajax-wrapper">';
  $form['#suffix'] = '</div>';
  unset($form['#theme_wrappers']);

  $cached_form['galerie']['settings'] = $form_array;

  form_set_cache($form_build_id, $cached_form, $form_state);

  return $form;
}

/**
 * Helper for building the type-specific settings form.
 */
function _galerie_type_form($form, $form_state, $module, $node) {
  return module_invoke($module, 'galerie_form', $node, $form_state);
}

/**
 * Returns the module that handles a galerie type.
 *
 * @param $type Can be either a "galerie_type" or a node object.
 * @return Name of the module that handles the given type.
 */
function _galerie_module($type) {
  if (is_object($type)) {
    $type = $type->galerie_type;
  }
  $types = galerie_types();
  return $types[$type]['module'];
}

/**
 * Returns information on an image.
 *
 * @param $node A node of type "galerie".
 * @param $image_id ID of the image of which to retrieve information.
 * @return An array to be rendered by drupal_json_output.
 */
function galerie_image_info($node, $image_id) {
  $module = _galerie_module($node);

  $info = module_invoke($module, 'galerie_image', $node, $image_id) + array(
    'title' => '',
    'description' => '',
    'date' => '',
    'extra' => '',
    'actions' => array(),
    'classes' => array(),
    'thumb-link' => url('node/' . $node->nid . '/' . $image_id),
  );
  if ($modified = module_invoke_all('galerie_image_info', $node, $info) and is_array($modified)) {
    $info = $modified;
  }


  if ($info) {
    if (!isset($info['markup'])) {
      $info['markup'] = theme('galerie_image', $info);
    }
    return $info;
  } else {
    return NULL;
  }
}

/**
 * Returns a list of images, for AJAX use.
 *
 * @param $node A node of type "galerie".
 * @param $offset Number of images to skip.
 * @param $count Maximum number of images to return.
 * @return An array of image information arrays containing at most $count elements.
 */
function galerie_image_list_ajax($node, $offset, $count) {
  $images = galerie_images($node, $offset, $count);

  $list = array(
    'markup' => '',
    'request' => array(
      'offset' => $offset,
      'count' => $count,
    ),
    'count' => count($images),
  );

  foreach ($images as $image) {
    $image += array(
      'title' => '',
      'description' => '',
      'date' => '',
      'extra' => '',
      'actions' => array(),
      'classes' => array(),
      'thumb-link' => url('node/' . $node->nid . '/' . $image['id']),
    );

    $list['markup'] .= theme('galerie_thumbnail', array('elements' => array('#image' => $image, '#style' =>  $node->galerie_style)));
  }

  return $list;
}

/**
 * Handles menu wildcards
 */
function galerie_menu_load($nid) {
  $node = node_load($nid);
  
  return $node->type == 'galerie' ? $node : NULL;
}

function galerie_views_api() {
  return array(
    'api' => 3,
  );
}

