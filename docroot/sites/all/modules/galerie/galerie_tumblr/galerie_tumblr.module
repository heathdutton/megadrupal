<?php

/**
 * @file
 * The core module that manages all common galerie operations
 */

/**
 * Implements hook_menu().
 */
function galerie_tumblr_menu() {
  return array(
    'node/%galerie_tumblr_menu/upload-tumblr' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Upload',
      'page callback' => 'galerie_tumblr_upload',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
    ),
    'node/%galerie_tumblr_menu/delete-tumblr/%' => array(
      'type' => MENU_CALLBACK,
      'title' => 'Delete image',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('galerie_tumblr_delete_image', 1, 3),
      'access callback' => 'node_access',
      'access arguments' => array('update', 1),
    ),
  );
}

/**
 * Page for deleting an image
 */
function galerie_tumblr_delete_image($form, $form_state, $node, $image_id) {
  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[] = l($node->title, 'node/' . $node->nid);
  drupal_set_breadcrumb($breadcrumb);

  $image = galerie_tumblr_galerie_image($node, $image_id);

  return array(
    'node' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
    'image_id' => array(
      '#type' => 'value',
      '#value' => $image_id,
    ),

    'login' => array(
      '#type' => 'textfield',
      '#title' => t('Your Tumblr email address'),
      '#required' => TRUE,
    ),
    'password' => array(
      '#type' => 'password',
      '#title' => t('Your Tumblr password'),
      '#required' => TRUE,
    ),

    'confirm' => array(
      '#markup' => '<p>' . t('Are you sure you want to delete this image from your tumblelog?') . '</p>',
    ),

    'submit' => array(
      '#type' => 'submit',
      '#title' => t('Delete'),
      '#value' => t('Delete'),
    ),

    '#submit' => array('galerie_tumblr_delete_image_submit'),
  );
}

/**
 * Deletes an image from disk.
 */
function galerie_tumblr_delete_image_submit($form, $form_state) {
  $node = $form['node']['#value'];
  $image_id = $form['image_id']['#value'];

  $url  = 'http://www.tumblr.com/api/delete';

  $result = drupal_http_request($url, array(
    'method' => 'POST',
    'data' => http_build_query(array(
      'email' => $form_state['values']['login'],
      'password' => $form_state['values']['password'],
      'post-id' => $image_id,
    )),
    'headers' => array(
      'Content-Type' => 'application/x-www-form-urlencoded',
    ),
  ));

  if (isset($result->error) and $result->error) {
    drupal_set_message(t('Cannot post image to Tumblr: !error', array('!error' => $result->error)), 'error');
    return array();
  }

  drupal_goto('node/' . $node->nid);
}

/**
 * Implements hook_load() for wildcards.
 */
function galerie_tumblr_menu_load($nid) {
  if ($node = node_load($nid) and $node->type == 'galerie' and $node->galerie_type == 'tumblr') {
    return $node;
  } else {
    return NULL;
  }
}

/**
 * Page for adding an image to a gallery.
 */
function galerie_tumblr_upload($node) {
  return drupal_get_form('galerie_tumblr_upload_form', $node);
}

/**
 * Form for adding an image to a gallery.
 */
function galerie_tumblr_upload_form($form, $form_state, $node) {
  $form = array(
    'login' => array(
      '#type' => 'textfield',
      '#title' => t('Your Tumblr email address'),
      '#required' => TRUE,
    ),
    'password' => array(
      '#type' => 'password',
      '#title' => t('Your Tumblr password'),
      '#required' => TRUE,
    ),

    'caption' => array(
      '#type' => 'textarea',
      '#title' => t('Caption'),
      '#required' => FALSE,
    ),
    'link' => array(
      '#type' => 'textfield',
      '#title' => t('Link to a full version of the image, or any other page.'),
      '#required' => FALSE,
    ),

    'from-disk' => array(
      '#type' => 'fieldset',
      '#title' => t('Upload from your computer'),
      '#description' => t('Use this method to add an image which resides on your computer.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,

      'galerie-file-upload' => array(
        '#type' => 'file',
        '#title' => t('File'),
        '#description' => t('Choose the image to add to this gallery.'),
      ),
    ),

    'from-url' => array(
      '#type' => 'fieldset',
      '#title' => t('Download from external website'),
      '#description' => t('Using this method, an image will be downloaded from an external website and added to the gallery.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,

      'galerie-file-url' => array(
        '#type' => 'textfield',
        '#title' => t('URL'),
        '#description' => t('Enter the URL of the image.'),
      ),
    ),

    'galerie' => array(
      '#type' => 'value',
      '#value' => $node,
    ),

    '#attributes' => array('enctype' => "multipart/form-data"),

    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Upload'),
    ),

    '#validate' => array('galerie_tumblr_upload_form_validate'),
    '#submit' => array('galerie_tumblr_upload_form_submit'),
  );

  return $form;
}

/**
 * Validates form input.
 */
function galerie_tumblr_upload_form_validate($form, &$form_state) {
  if (empty($form_state['values']['galerie-file-url'])) {
    if (!$file = file_save_upload('galerie-file-upload')) {
      form_set_error('galerie-file-upload', t('You must at least select a file or specify a URL.'));
    } else {
      $errors = file_validate_is_image($file);

      if (count($errors)) foreach ($errors as $error) {
        form_set_error('galerie-file-upload', $error);
      }
    }
  } else {
    if (!valid_url($form_state['values']['galerie-file-url'], TRUE)) {
      form_set_error('galerie-file-url', t('This does not look like a URL: !url', array('!url' => $form_state['values']['galerie-file-url'])));
    }
  }

  if (trim($form_state['values']['link']) && !valid_url($form_state['values']['link'], TRUE)) {
    form_set_error('link', t('This does not look like a URL: !url', array('!url' => $form_state['values']['galerie-file-url'])));
  }
}

/**
 * Add images to a gallery.
 */
function galerie_tumblr_upload_form_submit($form, $form_state) {
  $node = $form_state['values']['galerie'];

  $file = NULL;

  if (!empty($form_state['values']['galerie-file-url'])) {
    $url  = 'http://www.tumblr.com/api/write';

    $result = drupal_http_request($url, array(
      'method' => 'POST',
      'data' => http_build_query(array(
        'email' => $form_state['values']['login'],
        'password' => $form_state['values']['password'],
        'type' => 'photo',
        'source' => $form_state['values']['galerie-file-url'],
        'caption' => $form_state['values']['caption'],
        'click-through-url' => $form_state['values']['link'],
      )),
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
      ),
    ));

    if ($result->code != 201) {
      drupal_set_message(t('Cannot post image to Tumblr: !error', array('!error' => $result->error)), 'error');
      return array();
    }
  } else {
    $url  = 'http://www.tumblr.com/api/write';

    $file = file_save_upload('galerie-file-upload');
    $filedata = file_get_contents($file->uri);

    $result = drupal_http_request($url, array(
      'method' => 'POST',
      'data' => http_build_query(array(
        'email' => 'see.tumblr@seos.fr',
        'password' => 'aequalis',
        'type' => 'photo',
        'data' => $filedata,
        'caption' => $form_state['values']['caption'],
        'click-through-url' => $form_state['values']['link'],
      )),
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
      ),
    ));

    if ($result->code != 201) {
      drupal_set_message(t('Cannot post image to Tumblr: !error', array('!error' => $result->error)), 'error');
      return array();
    }
  }

  drupal_set_message(t('Image posted to Tumblr!'));
  return array();
}

/**
 * Implements hook_galerie_types().
 */
function galerie_tumblr_galerie_types() {
  return array(
    'tumblr' => array(
      'title' => t('Tumblr'),
      'description' => t('A gallery with the photo posts of a Tumblr user.'),
      'module' => 'galerie_tumblr',
    ),
  );
}

/**
 * Implements hook_galerie_form().
 */
function galerie_tumblr_galerie_form($node, $form_state) {
  if (isset($node->galerie_type) and !array_key_exists($node->galerie_type, galerie_tumblr_galerie_types())) {
    return NULL;
  }

  return array(
    'galerie_tumblr_details' => array(
      '#weight' => 2,
      '#type' => 'fieldset',
      '#title' => t('Tumblr details'),

      'galerie_user' => array(
        '#type' => 'textfield',
        '#title' => t('User'),
        '#description' => t('Username of the Tumblr user'),
        '#default_value' => isset($node->galerie_user) ? $node->galerie_user : '',
        '#maxlength' => 32,
        '#required' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function galerie_tumblr_load($nodes) {
  $result = db_query('SELECT nid, user FROM {galerie_tumblr} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->galerie_user = $record->user;
  }
}

/**
 * Implements hook_node_insert().
 */
function galerie_tumblr_node_insert($node) {
  if ($node->type == 'galerie') switch ($node->galerie_type) {
    case 'tumblr':
      db_insert('galerie_tumblr')
        ->fields(array(
          'nid' => $node->nid,
          'user' => $node->galerie_user,
        ))
        ->execute();
      break;
  }
}

/**
 * Implements hook_node_update().
 */
function galerie_tumblr_node_update($node) {
  if ($node->type == 'galerie') switch ($node->galerie_type) {
    case 'tumblr':
      db_update('galerie_tumblr')
        ->fields(array(
          'nid' => $node->nid,
          'user' => $node->galerie_user,
        ))
        ->condition('nid', $node->nid)
        ->execute();
      break;
  }
}

/**
 * Implements hook_node_delete().
 */
function galerie_tumblr_node_delete($node) {
  if ($node->type == 'galerie') switch ($node->galerie_type) {
    case 'tumblr':
      db_delete('galerie_tumblr')
        ->condition('nid', $node->nid)
        ->execute();
      break;
  }
}

/**
 * Implements hook_galerie_list().
 */
function galerie_tumblr_galerie_list($node, $offset, $count) {
  $images = array();

  $url  = 'http://' . urlencode($node->galerie_user) . '.tumblr.com/api/read/json?';
  $url .= '&start='  . $offset;
  $url .= '&num='    . max($count, 50);
  $url .= '&type='   . 'photo';
  $url .= '&filter=' . 'html';

  $result = drupal_http_request($url);

  if (isset($result->error) and $result->error) {
    drupal_set_message(t('Cannot retrieve images from Tumblr: !error', array('!error' => $result->error)), 'error');
    return array();
  }

  $data = preg_replace('/.+?({.+}).+/','$1',$result->data);
  if (!$data = json_decode($data)) {
    drupal_set_message(t('Cannot retrieve images from Tumblr'), 'error');
    return array();
  }

  foreach ($data->posts as $post) {
    $images[] = _galerie_tumblr_post_to_image($post, $node);
  }

  return $images;
}

/**
 * Implements hook_galerie_image().
 */
function galerie_tumblr_galerie_image($node, $image_id) {
  $url  = 'http://' . urlencode($node->galerie_user) . '.tumblr.com/api/read/json?';
  $url .= '&id='  . $image_id;

  $result = drupal_http_request($url);

  if (isset($result->error) and $result->error) {
    drupal_set_message(t('Cannot retrieve image from Flickr: !error', array('!error' => $result->error)), 'error');
    return array();
  }

  $data = preg_replace('/.+?({.+}).+/','$1',$result->data);
  if (!$data = json_decode($data)) {
    drupal_set_message(t('Cannot retrieve images from Tumblr'), 'error');
    return array();
  }

  return _galerie_tumblr_post_to_image($data->posts[0], $node);
}

/**
 * Returns the image info for a Tumblr post
 */
function _galerie_tumblr_post_to_image($post, $node) {
  $actions = array();

  if (node_access('update', $node)) {
    $actions += array(
      l(t('delete'), 'node/' . $node->nid . '/delete-tumblr/' . $post->id),
    );
  }

  return array(
    'title' => '',
    'src' => $post->{'photo-url-500'},
    'large-src' => $post->{'photo-url-1280'},
    'description' => $post->{'photo-caption'},
    'date' => strtotime($post->{'date-gmt'}),
    'id' => $post->{'id'},
    'link' => $post->{'url-with-slug'},
    'thumb-src' => $post->{'photo-url-75'},
    'actions' => $actions,
  );
}

/**
 * Implements hook_node_view().
 * Let's add our CSS to make Tumblr's output prettier
 */
function galerie_tumblr_node_view($node) {
  if ($node->type == 'galerie' and $node->galerie_type == 'tumblr') {
    drupal_add_css(drupal_get_path('module', 'galerie_tumblr') . '/galerie_tumblr.css');
  }
}

