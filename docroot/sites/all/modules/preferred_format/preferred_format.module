<?php

/**
 * Implements hook_form_alter().
 */
function preferred_format_form_alter(&$form, &$form_state, $form_id)
{
	if ($form_id == 'field_ui_field_edit_form') {
		$field = $form['#field'];
		$types = array(
			'text',
			'text_long',
			'text_with_summary',
		);
		if (in_array($field['type'], $types)) {
			$formats = filter_formats();
			$format_types = array(
				'global' => 'global',
				'per-role' => 'per-role',
			);
			$options = array();
			foreach ($formats as $format) {
				$options[$format->format] = $format->name;
			}
			$type_options = array(
				'global' => t('Global'),
				'per-role' => t('Per role'),
			);

			if (isset($form['#instance']['settings']['preferred_formats'])) {
				$current_setting = $form['#instance']['settings']['preferred_formats'];
			} else {
				$current_setting = array_keys($formats);
				$current_setting = reset($current_setting);
			}
			$current_setting = (array)$current_setting; //(array) is for back compatibility

			if (isset($form['#instance']['settings']['preferred_formats_type'])) {
				$current_type_setting = $form['#instance']['settings']['preferred_formats_type'];
			} else {
				$current_type_setting = array_keys($format_types);
				$current_type_setting = reset($current_type_setting);
			}

			$form['instance']['settings']['text_processing']['#weight'] = 1;
			$form['instance']['settings']['preferred_formats_type'] = array(
				'#type' => 'radios',
				'#title' => t('Preferred format type'),
				'#default_value' => $current_type_setting,
				'#options' => $type_options,
				'#weight' => 2,
				'#states' => array(
					'visible' => array(
						'input[name="instance[settings][text_processing]"]' => array('value' => 1)
					)
				)
			);
			$form['instance']['settings']['preferred_formats'] = array(
				'#type' => 'checkboxes',
				'#title' => t('Preferred format'),
				'#default_value' => $current_setting,
				'#options' => $options,
				'#element_validate' => array('_preferred_format_element_validate'),
				'#weight' => 3,
				'#states' => array(
					'visible' => array(
						'input[name="instance[settings][preferred_formats_type]"]' => array('value' => 'global'),
						'input[name="instance[settings][text_processing]"]' => array('value' => 1)
					)
				)
			);

			$all_formats = filter_formats();
			$all_roles = user_roles();
			$header[] = '';
			foreach ($all_roles as $rid => $role) {
				$header[] = $role;
			}
			$form['instance']['settings']['preferred_formats_by_role'] = array(
				'#theme' => 'preferred_format_table',
				'#header' => $header,
				'#type' => 'fieldset',
				'#title' => t('Preferred formats per user role'),
				'#weight' => 4,
				'#input' => TRUE,
				'#tree' => TRUE,
				'#states' => array(
					'visible' => array(
						'input[name="instance[settings][preferred_formats_type]"]' => array('value' => 'per-role'),
						'input[name="instance[settings][text_processing]"]' => array('value' => 1)
					)
				)
			);

			foreach ($all_formats as $format) {
				$form['instance']['settings']['preferred_formats_by_role']['#formats'][$format->format] = $format->name;
				foreach ($all_roles as $rid => $role) {
					$role_formats = filter_get_formats_by_role($rid);
					$default_value = isset($form['#instance']['settings']['preferred_formats_by_role'][$format->format][$rid]) ?
						$form['#instance']['settings']['preferred_formats_by_role'][$format->format][$rid] : 0;
					if (in_array($format->format, array_keys($role_formats))) {
						$form['instance']['settings']['preferred_formats_by_role'][$format->format][$rid] = array(
							'#type' => 'checkbox',
							'#title' => $role . ' ' . $format->name,
							'#title_display' => 'invisible',
							'#default_value' => $default_value,
						);
					} else {
						$form['instance']['settings']['preferred_formats_by_role'][$format->format][$rid] = array(
							'#markup' => ''
						);
					}
				}
			}
		}
	}
}

/**
 * Implements hook_element_info_alter().
 */
function preferred_format_element_info_alter(&$types)
{
	if (isset($types['text_format'])) {
		$types['text_format']['#process'][] = 'preferred_format_process_format';
	}
}

/**
 * Element process function.
 * Modifies element format select if list of allowed formats is provided.
 * @param $element
 * @return
 */
function preferred_format_process_format($element)
{
	if (isset($element['#entity_type']) && isset($element['#field_name']) && isset($element['#bundle'])) {
		$instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
		if ($instance) {
			if ($instance['settings']['text_processing'] == 1) {
				//Check for format type
				if (isset($instance['settings']['preferred_formats_type']) && $instance['settings']['preferred_formats_type']) {
					$preferred_formats_type = $instance['settings']['preferred_formats_type'];
				} else {
					$preferred_formats_type = 'global';
				}
				//Check for format
				if (isset($instance['settings']['preferred_formats']) && $instance['settings']['preferred_formats']) {
					$preferred_formats = $instance['settings']['preferred_formats'];
				} else {
					$preferred_formats = isset($element['format']['format']['#default_value'])
						? $element['format']['format']['#default_value'] : 'plain_text';
				}
				$preferred_formats = (array)$preferred_formats; //(array) is for back compatibility
				//Check for role
				if (isset($instance['settings']['preferred_formats_by_role']) && $instance['settings']['preferred_formats_by_role']) {
					$preferred_role = $instance['settings']['preferred_formats_by_role'];
				} else {
					$preferred_role = 1;
				}
				if (is_array($preferred_formats) || is_array($preferred_role)) {
					$element = _preferred_format_element_process($element, $preferred_formats, $preferred_formats_type, $preferred_role);
				}
			}
		}
	}
	return $element;
}

/**
 * Helper function to clean or filter field elements (hide format selector and info).
 */
function _preferred_format_element_process($element, $preferred_formats = array('plain_text' => 'plain_text'), $preferred_format_type = 'global', $preferred_by_role = array('1'))
{
	$preferred_formats = (array)$preferred_formats; //(array) is for back compatibility
	global $user;
	if ($preferred_format_type == 'global') {
		$allowed_formats = $preferred_formats;
	} else {
		foreach ($preferred_by_role as $format => $roles) {
			foreach ($user->roles as $key => $name) {
				if (isset($roles[$key]) && $roles[$key]) {
					$allowed_formats[] = $format;
				}
			}
		}
	}

	if (isset($allowed_formats) && count($allowed_formats)) {
		$options = array_intersect_key($element['format']['format']['#options'], array_flip($allowed_formats));

		if (!in_array($element['#format'], array_keys($options))) {
			$opt_keys = array_keys($options);
			$element['#format'] = reset($opt_keys);
		}
		$element['format']['format'] = array(
			'#type' => 'select',
			'#title' => t('Text format'),
			'#options' => $options,
			'#default_value' => $element['#format'],
			'#access' => 1,
			'#weight' => 10,
			'#attributes' => array('class' => array('filter-list')),
			'#parents' => array_merge($element['#parents'], array('format')),
		);
		if (count($options) <= 1) {
			$element['format']['#access'] = 0;
			unset($element['format']['guidelines']);
			unset($element['format']['help']);
			$element['format']['#type'] = 'container';
		}
	}
	return $element;
}

/**
 * Element validation handler
 * @param $element
 * @param $form_state
 * @return void
 */
function _preferred_format_element_validate($element, &$form_state)
{
	if (is_array($form_state['values']['instance']['settings']['preferred_formats'])) {
		foreach ($form_state['values']['instance']['settings']['preferred_formats'] as $formats => $format) {
			if ($format == '0') {
				unset($form_state['values']['instance']['settings']['preferred_formats'][$formats]);
			}
		}
	}
}

/**
 * Implements hook_theme().
 * @return array
 */
function preferred_format_theme()
{
	$items['preferred_format_table'] = array(
		'render element' => 'element'
	);
	return $items;
}

/**
 * Theming function implementation. Renders list of chackboxes format -> role in table.
 * @param $variables
 * @return string
 */
function theme_preferred_format_table($variables)
{
	$element = $variables['element'];
	$rows = array();
	foreach (element_children($element) as $format) {
		$row = array(array('data' => $element['#formats'][$format]));
		foreach (element_children($element[$format]) as $checkbox) {
			$row[] = array('data' => drupal_render($element[$format][$checkbox]));
		}
		$rows[] = $row;
	}
	return theme('table', array('header' => $element['#header'], 'rows' => $rows, 'attributes' => array('id' => 'formats-per-role')));
}
