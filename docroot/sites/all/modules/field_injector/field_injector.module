<?php

/**
 * @file
 * Allows other fields to be injected into other text fields.
 */

/**
 * Implements hook_hook_info().
 */
function field_injector_hook_info() {
  $hooks = array(
    'field_injector_position_info',
    'field_injector_position_info_alter',
  );

  return array_fill_keys($hooks, array('group' => 'field_injector'));
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_injector_field_formatter_info_alter(&$info) {
  foreach ($info as $formatter_key => &$formatter) {
    // Fix formatters that have an invalid definition by not defining the
    // settings property or the settings property is not set to an array.
    if (!isset($formatter['settings']) || !is_array($formatter['settings'])) {
      $formatter['settings'] = array();
    }
    $formatter['settings'] += array(
      'field_injector_field' => '',
      'field_injector_position' => '',
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_injector_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if (!empty($summary)) {
    $summary .= '<br />';
  }

  if (!empty($settings['field_injector_field'])) {
    $summary .= t('Injected into @field', array('@field' => $settings['field_injector_field']));
  }
  else {
    $summary .= t('Not injected');
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_injector_field_formatter_settings_form_alter(&$settings_form, $context) {
  // Doesn't make sense to show any field injector settings if there aren't
  // multiple fields.
  if (!isset($context['form']['#fields'])) {
    return;
  }

  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $field_options = drupal_map_assoc($context['form']['#fields']);
  $this_field_name = $context['field']['field_name'];
  $instances = field_info_instances($context['instance']['entity_type'], $context['instance']['bundle']);
  $field_options = array();
  foreach ($context['form']['#fields'] as $field_name) {
    if ($field_name == $this_field_name) {
      continue;
    }
    elseif ($instances[$field_name]['widget']['module'] != 'text') {
      continue;
    }
    $field_options[$field_name] = $instances[$field_name]['label'];
  }
  $settings_form['field_injector_field'] = array(
    '#type' => 'select',
    '#title' => t('Injection field'),
    '#options' => $field_options,
    '#default_value' => $settings['field_injector_field'],
    '#empty_value' => '',
  );

  $position_info = field_injector_get_position_info();
  $position_options = array();
  foreach (array_keys($position_info) as $position) {
    $position_options[$position] = $position_info[$position]['label'];
  }
  $settings_form['field_injector_position'] = array(
    '#type' => 'select',
    '#title' => t('Position in field'),
    '#options' => $position_options,
    '#default_value' => $settings['field_injector_position'],
    '#states' => array(
      'invisible' => array(
        'select[name="fields[' . $this_field_name . '][settings_edit_form][settings][field_injector_field]"]' => array('value' => ''),
      ),
    ),
  );
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Perform the injection callback if requested and hide the current field.
 */
function field_injector_field_attach_view_alter(&$output, $context) {
  // Extract the bundle type into the context array.
  list(, , $context['bundle']) = entity_extract_ids($context['entity_type'], $context['entity']);

  $injection_info = field_injector_get_position_info();
  $injected_positions = array();

  // Loop though each of the fields and check if the field will be injected.
  foreach (element_children($output) as $field_name) {
    if (!isset($output[$field_name]['#field_type'])) {
      continue;
    }

    $info = field_injector_formatter_info($field_name, $context['entity_type'], $context['bundle'], $context['view_mode']);

    if (!empty($info['field_injector_field'])
        && !empty($info['field_injector_position'])
        && !empty($output[$info['field_injector_field']]) // Field to inject into exists.
        && empty($output[$field_name]['#injected']) // Field has not already been injected.
        && function_exists($injection_info[$info['field_injector_position']]['process callback'])) {

      // Record the injection information for use in the second loop below.
      $output[$field_name]['#formatter_info'] = $info;

      // Keep track of this field's position when it will be injected so we can add first/last classes.
      $injected_positions[$info['field_injector_field'] . ":" . $info['field_injector_position']][] = $field_name;
    }
  }

  // Perform the actual field injection.
  foreach ($injected_positions as $fields) {
    foreach ($fields as $index => $field_name) {
      $info = $output[$field_name]['#formatter_info'];

      // Add classes prior to the field being rendered.
      $output[$field_name]['#attributes']['class'][] = 'field-inline';
      if ($index == 0) {
        $output[$field_name]['#attributes']['class'][] = 'first';
      }
      if ($index == (count($fields) - 1)) {
        $output[$field_name]['#attributes']['class'][] = 'last';
      }

      $callback = $injection_info[$info['field_injector_position']]['process callback'];
      $callback($output[$field_name], $output[$info['field_injector_field']], $info);
      hide($output[$field_name]);
      $output[$field_name]['#injected'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function field_injector_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  if (!empty($element['#attributes']['class'])) {
    // Add classes to the classes array.
    // Why do we have to do this manually? This is stupid.
    $variables['classes_array'] = array_unique(array_merge($variables['classes_array'], $element['#attributes']['class']));
  }
}

/**
 * Get the formatter settings for a field instance and display.
 *
 * @param string $field_name
 * @param string $display
 * @param string $bundle
 * @param string $display
 *
 * @return array
 */
function field_injector_formatter_info($field_name, $entity_type, $bundle, $display) {
  $info =_field_info_collate_fields();

  // There is no bundle for this entity type so the bundle name in the
  // entity_type name.
  if (empty($bundle)) {
    $bundle = $entity_type;
  }

  if (!isset($info['instances'][$entity_type][$bundle][$field_name])) {
    return array();
  }

  $field_display = $info['instances'][$entity_type][$bundle][$field_name]['display'];
  $default = $field_display['default']['settings'];
  if (isset($field_display[$display]['settings'])) {
    return $field_display[$display]['settings'] + $default;
  }
  return $default;
}

/**
 * Implements hook_field_injector_position_info().
 */
function field_injector_field_injector_position_info() {
  //$info['beginning'] = array(
  //  'label' => t('Beginning'),
  //  'process callback' => 'field_injector_process',
  //);

  foreach (range(1, 6) as $i) {
    $info['before_paragraph_' . $i] = array(
      'label' => t('Before paragraph @number', array('@number' => $i)),
      'process callback' => 'field_injector_process_paragraph',
    );
  }
  return $info;
}

function field_injector_get_position_info() {
  $info = module_invoke_all('field_injector_position_info');
  drupal_alter('field_injector_position_info', $info);
  return $info;
}

/**
 * Process callback for injecting into a field's paragraphs.
 */
function field_injector_process_paragraph(&$injected_field, &$injector_field, $info) {
  // $i will be the paragraph to insert 'after'.
  $i = substr($info['field_injector_position'], -1);

  // Split the paragraphs by any p tag at the beginning of a line.
  $paragraphs = preg_split('/^<p>/m', trim($injector_field[0]['#markup']), NULL, PREG_SPLIT_NO_EMPTY);
  foreach ($paragraphs as $index => $paragraph) {
    // Re-add the beginning <p> tag to each paragraph.
    $paragraphs[$index] = '<p>' . trim($paragraph);
  }

  // If the position requested is greater than the number of paragraphs found,
  // then set the field to be injected into the last paragraph.
  // @todo How can we fix first/last classes in this case?
  $num_paragraphs = count($paragraphs);
  if ($i > $num_paragraphs) {
    $i = $num_paragraphs;
  }

  // Render the field to be injected.
  $rendered_field = drupal_render($injected_field);

  // Insert the injected field before the desired paragraph.
  array_splice($paragraphs, $i - 1, 0, $rendered_field);

  // Join the paragraphs back together.
  $injector_field[0]['#markup'] = implode("\n", $paragraphs);
}
