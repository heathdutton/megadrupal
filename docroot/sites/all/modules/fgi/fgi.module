<?php

/**
 * @file
 * Add an image to a field group.
 */

/**
 * Implements hook_fgi_allowed_format_types().
 */
function fgi_fgi_allowed_format_types() {
  return array(
    'html-element',
    'div',
    'html5',
    'fieldset',
    'tab',
    'htab',
    'multipage',
    'accordion-item',
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function fgi_field_group_format_settings($group) {
  // Whitelist policy. Explicitly define which group format types
  // support image uploads.
  $allowed_types = module_invoke_all('fgi_allowed_format_types');

  if (!in_array($group->format_type, $allowed_types)) {
    return array();
  }

  $settings = isset($group->format_settings['fgi']) ? $group->format_settings['fgi'] : array();
  $form['fgi'] = array(
    '#type' => 'container',
    '#weight' => 20,
  );

  $form['fgi']['image'] = array(
    '#type' => 'managed_file',
    '#title' => t('Group image'),
    '#description' => t('Upload an image to be displayed with the group.'),
    '#upload_location' => 'public://',
    '#default_value' => isset($settings['image']) ? $settings['image'] : 0,
  );

  if (!empty($settings['image'])) {
    $form['fgi']['current_image'] = array(
      '#type' => 'value',
      '#value' => $settings['image'],
    );
  }

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $form['fgi']['style'] = array(
    '#type' => 'select',
    '#title' => t('Image style'),
    '#options' => $image_styles,
    '#default_value' => isset($settings['style']) ? $settings['style'] : '',
    '#empty_option' => t('None (original image)'),
  );

  $form['fgi']['position'] = array(
    '#type' => 'select',
    '#title' => t('Image position'),
    '#required' => TRUE,
    '#description' => t('The position of the image in relation to other fields.'),
    '#options' => array(
      'above' => t('Above'),
      'below' => t('Below'),
      'left' => t('Left'),
      'right' => t('Right'),
    ),
    '#default_value' => isset($settings['position']) ? $settings['position'] : 'above',
  );

  return $form;
}

/**
 * Implements hook_field_group_update_field_group().
 */
function fgi_field_group_update_field_group($group) {
  // Save the file.
  $settings = isset($group->format_settings['fgi']) ? $group->format_settings['fgi'] : array();
  if (!empty($settings['image']) && !isset($settings['current_image'])) {
    $file = file_load($settings['image']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'fgi', 'field_group', $group->id);
  }
  elseif (!empty($settings['image']) && isset($settings['current_image'])) {
    if ($settings['image'] != $settings['current_image']) {
      // Delete the old one.
      $file = file_load($settings['current_image']);
      file_usage_delete($file, 'fgi', 'field_group', $group->id);
      file_delete($file);

      // Add the new one.
      $file = file_load($settings['image']);
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
      file_usage_add($file, 'fgi', 'field_group', $group->id);
    }
  }
  elseif (isset($settings['current_image'])) {
    $file = file_load($settings['current_image']);
    file_usage_delete($file, 'fgi', 'field_group', $group->id);
    file_delete($file);
  }

  // Remove the current image from saved format settings.
  unset($group->data['format_settings']['fgi']['current_image']);
}

/**
 * Implements hook_field_group_format_summary().
 */
function fgi_field_group_format_summary($group) {
  $output = '';
  $settings = isset($group->format_settings['fgi']) ? $group->format_settings['fgi'] : array();
  $fields = array(
    'image' => t('Group image'),
    'style' => t('Image style'),
    'position' => t('Image position'),
  );
  foreach ($fields as $field => $label) {
    if (!empty($settings[$field])) {
      $output .= '<br />';
      $output .= '<strong>' . $label . '</strong> ';

      if ($field == 'image') {
        $file = file_load($settings['image']);
        $value = $file->filename;
      }
      else {
        $value = $settings[$field];
      }

      // Shorten the string.
      if (drupal_strlen($value) > 38) {
        $value = truncate_utf8($value, 50, TRUE, TRUE);
      }
      $output .= check_plain($value);
    }
  }

  return $output;
}

/**
 * Implements hook_field_group_pre_render().
 */
function fgi_field_group_pre_render(&$element, $group, &$form) {
  $settings = isset($group->format_settings['fgi']) ? $group->format_settings['fgi'] : array();
  if (isset($settings['image']) && $file = file_load($settings['image'])) {
    $styles = array_keys(image_styles());
    if (isset($settings['style']) && in_array($settings['style'], $styles)) {
      $element['fgi_image'] = array(
        '#theme' => 'image_style',
        '#style_name' => $settings['style'],
        '#path' => $file->uri,
      );
    }
    else {
      $element['fgi_image'] = array(
        '#theme' => 'image',
        '#path' => file_create_url($file->uri),
      );
    }

    $element['fgi_image']['#weight'] = $settings['position'] == 'below' ? 9999 : -9999;
    $element['fgi_image']['#attributes']['class'] = array(
      'field-group-image',
      'fgi-' . $settings['position'],
    );
  }
}
