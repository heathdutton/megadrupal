<?php

/**
 * Implements hook_help().
 */
function fivestar_rec_help($path, $args) {
  $output = '';
  switch ($path) {
    case "admin/help#fivestar_rec":
      $output = '<p>'.  t("This module provides content recommendations based on Fivestar voting") .'</p>';
      break;
  }
  return $output;
}


/**
 * Implements hook_views_api().
 */
function fivestar_rec_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_recommender_data().
 */
function fivestar_rec_recommender_data() {
  return array(
    'fivestar_rec_default' => array(
      'title' => t('Fivestar Recommender'),
      'description' => t('Run recommender on users browsing history using the item-item algorithm. Only works for "node" (or "Content") entity type.'),
      'algorithm' => 'item2item',
      'data structure' => array(
        'preference' => array(
          'type' => 'table',
          'name' => 'fivestar_rec_vote',
        ),
        'item similarity' => array(
          'type' => 'table',
          'name' => 'fivestar_rec_similarity', // using the default table structure, no need to specify more.
        ),
        'prediction' => array(
          'type' => 'table',
          'name' => 'fivestar_rec_prediction', // using the default table structure, no need to specify more.
        ),
        'item entity type' => 'node',
      ),
      'cron callback' => 'fivestar_rec_process_vote',
      'upkeep callback' => 'fivestar_rec_purge_vote'
    ),
  );
}


function fivestar_rec_process_vote($curr) {
  $prev = variable_get('fivestar_rec_last_cron', 0);

  // here we only take "entity_type" = 'node' and "value_type" = 'percent' and "tag" = 'vote'.
  // if you need to customize the module to work on other cases, change it here.
  $rows = db_query("SELECT uid, entity_id, value, timestamp FROM {votingapi_vote} WHERE timestamp BETWEEN :prev AND :curr AND entity_type = 'node' AND value_type = 'percent' AND tag = 'vote'", array(':prev' => $prev, ':curr' => $curr))->fetchAll();

  // use db_merge to take care of changed data.
  // another alternative is to move 'update' to "upkeep" to increase performance here.
  foreach ($rows as $row) {
    db_merge('fivestar_rec_vote')->key(array('uid' => $row->uid, 'eid' => $row->entity_id))
      ->insertFields(array('uid' => $row->uid, 'eid' => $row->entity_id, 'score' => $row->value, 'updated' => $row->timestamp))
      ->updateFields(array('score' => $row->value, 'updated' => $row->timestamp))
      ->execute();
  }

  variable_set('fivestar_rec_last_cron', $curr);
}


function fivestar_rec_purge_vote($timestamp) {
  // remove obsolete votes if users remove them.
  db_query("DELETE FROM {fivestar_rec_vote} WHERE (uid, eid) NOT IN (SELECT uid, entity_id FROM {votingapi_vote} WHERE entity_type = 'node' AND value_type = 'percent' AND tag = 'vote')");
}
