<?php
/**
 * @file
 * Enables the ability to edit recent user revisions.
 */

/**
 * Implements hook_views_api().
 */
function user_revision_edit_views_api() {

  // Registers with views api.
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'user_revision_edit') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function user_revision_edit_menu() {

  // Creates menu hook for editing user revisions.
  $items['user/%user_revision/revisions/%/edit'] = array(
    'title' => 'Edit this revision',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_revision_edit_form', 1),
    'access callback' => '_user_revision_edit_link_access',
    'access arguments' => array(1),
    'file' => 'user_revision_edit.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function user_revision_edit_menu_alter(&$items) {

  // Alters the menu hook of user_revision module.
  // and overrides the callback to add edit link.
  $items['user/%user/revisions']['page callback']
    = 'user_revision_edit_overview';
  $items['user/%user/revisions']['file']
    = 'user_revision_edit.admin.inc';
  $items['user/%user/revisions']['file path']
    = drupal_get_path('module', 'user_revision_edit');
  return $items;
}

/**
 * Implements hook_permission().
 */
function user_revision_edit_permission() {

  // Adds permission items for editing revisions.
  return array(
    'edit user revisions' => array(
      'title' => t('Edit revisions'),
      'restrict access' => TRUE,
    ),
    'edit own user revisions' => array(
      'title' => t('Edit own revisions'),
      'description' => t('Allow users to edit their own user revisions'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function user_revision_edit_admin_paths() {

  // Enables the edit from to use admin theme.
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'user/*/revisions/*/edit' => TRUE,
    );
    return $paths;
  }
}

/**
 * Access callback.
 */
function _user_revision_edit_link_access($account) {
  global $user;

  // Checks if user has permissions.
  $access = user_access('edit user revisions')
    || user_access('edit own user revisions')
    && $account->uid == $user->uid;

  // Checks if at least 2 revisions exist.
  $count = db_query("
    SELECT COUNT(*) AS expression
    FROM (
      SELECT 1 AS expression
      FROM user_revision ur
      WHERE (ur.uid = {$account->uid})
    ) subquery
  ")->fetchField();

  // Displays revisions tab only if both are true.
  return $access && ($count > 1);
}


/**
 * Save record to the database.
 */
function _user_revision_edit_save(&$revision, $edits) {
  global $user;

  // Applies edits to revision.
  foreach ($edits as $type => $value) {
    if (isset($revision->$type) && $revision->$type != $value) {

      // Resets empty strings to NULL to avoid database exceptions.
      if ((array) $value === $value && $value[LANGUAGE_NONE][0]['value'] === '') {
        $value[LANGUAGE_NONE][0]['value'] = NULL;
      }
      $revision->$type = $value;
    }
  }

  // Updates revision object.
  $revision->authorid = $user->uid;
  $revision->timestamp = REQUEST_TIME;

  $picture = NULL;
  if (isset($edits['picture_delete']) && $edits['picture_delete'] == 1) {

    // Deletes picture from disk.
    file_delete($revision->picture);
    $revision->picture = 0;
  }
  elseif (isset($edits['picture_upload'])
    && is_object($edits['picture_upload'])) {
    $picture = $edits['picture_upload'];
    $revision->picture = $picture->fid;
  }
  elseif (isset($revision->picture) && is_object($revision->picture)) {
    $revision->picture = $revision->picture->fid;
  }

  // Updates the database record.
  drupal_write_record('user_revision', $revision, 'vid');

  // Uploads the picture.
  if (is_object($picture)) {
    file_usage_add($picture, 'user_revision', 'user', $revision->vid);
    $revision->picture = $picture;
  }

  // Updates the FAPI fields for the selected revision and restores the user.
  $restore = user_load($revision->uid);
  field_attach_update('user', $revision);
  field_attach_update('user', $restore);
  entity_get_controller('user')->resetCache(array($revision->uid));
}
