<?php

/**
 * Tests for restricted_home_link module
 */
class RestrictedHomeLinkTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Restricted Home Link',
      'description' => 'Test that we can prevent menu items pointing at the front page from being created/edited/deleted/moved',
      'group' => 'Restricted Home Link'
    );
  }

  private $user_allowed;
  private $user_disallowed;

  function setUp() {
    parent::setUp('restricted_home_link');
    // Set up users
    $this->user_allowed = $this->drupalCreateUser(array(
      'access administration pages',
      'administer menu',
      'create/edit/delete/move menu items pointing at front page',
    ));
    $this->user_disallowed = $this->drupalCreateUser(array(
      'access administration pages',
      'administer menu',
    ));
  }

  /**
   * Test on non-<front> menu items.
   *
   * 1) Test that    allowed users can create/edit/delete non-<front> menu items.
   * 2) Test that disallowed users can create/edit/delete non-<front> menu items.
   */
  function testNonFront() {
    // Create menu link with path different from <front>.
    $menu_link = array('link_title' => 'Node', 'link_path' => drupal_get_normal_path('node'));
    $mlid = menu_link_save($menu_link);

    // Allowed users.
    $this->drupalLogin($this->user_allowed);
    $this->assertCreateMenuLink(TRUE, 'node');
    $this->assertEditMenuLink  (TRUE, $mlid);
    $this->assertDeleteMenuLink(TRUE, $mlid);

    // Disallowed users.
    $this->drupalLogin($this->user_disallowed);
    $this->assertCreateMenuLink(TRUE, 'node');
    $this->assertEditMenuLink  (TRUE, $mlid);
    $this->assertDeleteMenuLink(TRUE, $mlid);
  }

  /**
   * Test on <front> menu items.
   *
   * 1) Test that    allowed users can    create/edit/delete <front> menu items.
   * 2) Test that disallowed users cannot create/edit/delete <front> menu items.
   */
  function testFront() {
    // Create menu link with path pointing at <front>.
    $menu_link = array('link_title' => 'Home', 'link_path' => drupal_get_normal_path('<front>'));
    $mlid = menu_link_save($menu_link);

    // Allowed users.
    $this->drupalLogin($this->user_allowed);
    $this->assertCreateMenuLink(TRUE, '<front>');
    $this->assertEditMenuLink  (TRUE, $mlid);
    $this->assertDeleteMenuLink(TRUE, $mlid);

    // Disallowed users.
    $this->drupalLogin($this->user_disallowed);
    $this->assertCreateMenuLink(FALSE, '<front>');
    $this->assertEditMenuLink  (FALSE, $mlid);
    $this->assertDeleteMenuLink(FALSE, $mlid);
  }


  /**
   * Helper - Assert that a user can/cannot create a menu link
   *
   * @param $allowed
   *   if TRUE, the user is expected to be able to create a menu link. FALSE otherwise.
   * @param $link_path
   *  Path to new menu link.
   * @param $menu_name
   *   The menu name in which the menu link can / cannot be created. Defaults to 'navigation'.
   * @param $message
   *   The message to display along with the assertion
   * @param $group
   *   The type of assertion - examples are 'Browser', 'PHP'
   */
  function assertCreateMenuLink($allowed, $link_path, $menu_name = 'navigation', $message = '', $group = 'Restricted Home Link') {
    // Create menu item through form
    $link_title = $this->randomName(8);
    $this->drupalGet("admin/structure/menu/manage/$menu_name/add");
    $this->assertResponse(200);
    $edit = array(
      'link_title' => $link_title,
      'link_path'  => $link_path,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertResponse(200);
    // Assert new menu item shows up on overview page
    $this->drupalGet("admin/structure/menu/manage/$menu_name");
    $this->assertResponse(200);
    if ($allowed) {
      $this->assertText($link_title);
    }
    else {
      $this->assertNoText($link_title);
    }
  }

  /**
   * Helper - Assert that a user can/cannot edit a menu link
   *
   * @param $allowed
   *   if TRUE, the user is expected to be able to edit the menu link. FALSE otherwise.
   * @param $mlid
   *   Menu link ID
   * @param $menu_name
   *   The menu name in which the menu link can / cannot be created. Defaults to 'navigation'.
   * @param $message
   *   The message to display along with the assertion
   * @param $group
   *   The type of assertion - examples are 'Browser', 'PHP'
   */
  function assertEditMenuLink($allowed, $mlid, $menu_name = 'navigation', $message = '', $group = 'Restricted Home Link') {
    // edit link on menu overview
    $this->drupalGet("admin/structure/menu/manage/$menu_name");
    $this->assertResponse(200);
    if ($allowed) {
      $this->assertLinkByHref("admin/structure/menu/item/$mlid/edit");
    }
    else {
      $this->assertNoLinkByHref("admin/structure/menu/item/$mlid/edit");
    }
    // Direct access to edit page
    $this->drupalGet("admin/structure/menu/item/$mlid/edit");
    $this->assertResponse($allowed ? 200 : 403);
  }

  /**
   * Helper - Assert that a user can/cannot delete a menu link
   *
   * @param $allowed
   *   if TRUE, the user is expected to be able to delete the menu link. FALSE otherwise.
   * @param $mlid
   *   Menu link ID
   * @param $menu_name
   *   The menu name in which the menu link can / cannot be created. Defaults to 'navigation'.
   * @param $message
   *   The message to display along with the assertion
   * @param $group
   *   The type of assertion - examples are 'Browser', 'PHP'
   */
  function assertDeleteMenuLink($allowed, $mlid, $menu_name = 'navigation', $message = '', $group = 'Restricted Home Link') {
    // delete link on menu overview
    $this->drupalGet("admin/structure/menu/manage/$menu_name");
    $this->assertResponse(200);
    if ($allowed) {
      $this->assertLinkByHref("admin/structure/menu/item/$mlid/delete");
    }
    else {
      $this->assertNoLinkByHref("admin/structure/menu/item/$mlid/delete");
    }
    // Direct access to delete page
    $this->drupalGet("admin/structure/menu/item/$mlid/delete");
    $this->assertResponse($allowed ? 200 : 403);
  }

}
