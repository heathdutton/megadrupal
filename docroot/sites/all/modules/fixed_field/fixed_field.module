<?php
/**
 * @file
 * Displays a field with fixed content
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param $path
 *   Which path of the site we're using to display help.
 * @param $arg
 *   Array that holds the current path as returned from arg() function.
 */
function fixed_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#fixed_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Fixed Field module defines a field that displays the same content for all entities the field is attached to. This provides the user with a powerful way to attach content to entities. Using this module in combination with other features such as tokens and filters as well as HTML markup or PHP scripting makes static and dynamic, entity-wide attachments possible See the <a href="@field-help">Field module help page</a> for more information about fields', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 */
function fixed_field_field_info() {
  return array(
    'fixed_field' => array(
      'label' => t('Fixed'),
      'settings' => array('content' => ''),
      'description' => t('A fixed field'),
      'default_formatter' => 'fixed_field_formatter',
      'default_widget' => 'field_extrawidgets_hidden',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function fixed_field_field_formatter_info() {
  return array(
    'fixed_field_formatter' => array(
      'label' => t('Default'),
      'field types' => array('fixed_field'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function fixed_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form['content'] = array(
    '#type' => 'textarea',
    '#title' => t('Content'),
    '#default_value' => $settings['content'],
    '#required' => FALSE,
    '#description' => t('The fixed content to display.'),
  );

  // Get a list of text formats that the user has access to.
  global $user;
  $formats = filter_formats($user);
  $options = array();
  foreach ($formats as $format) {
    $options[$format->format] = $format->name;
  }

  $form['text_format'] = array(
    '#type' => 'select',
    '#title' => t('Text Format'),
    '#options' => $options,
    '#default_value' => isset($settings['text_format']) ? $settings['text_format'] : NULL,
  );

  // Show a token tree
  if (module_exists('token')) {
    $form['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('user', 'node', 'global')
    );
  }

  return $form;
}

/**
 * Implements hook_field_prepare_view().
 */
function fixed_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  // Create a dummy entry to make sure hook_field_formatter_view() is called.
  foreach ($entities as $id => $entity) {
    if (empty($items[$id]) && $field['settings']['content']) {
      $items[$id][0] = array();
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function fixed_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $field['settings'];

  // run check_markup first? what is the usual order?
  $text = check_markup($settings['content'], $format_id = $settings['text_format']);

  if (module_exists('token')) {
    // Depending on the entity type, populate token values.
    global $user;
    $node = $entity_type == 'node' ? $entity : NULL;
    $account = $entity_type == 'user' ? $entity : $user;
    $text = token_replace($text, array('node' => $node, 'user' => $account));
  }

  if ($display['type'] == 'fixed_field_formatter') {
    $element = array(array('#markup' => $text));
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 *
 * Since this field does not actually contain any data, make sure it is displayed and not
 * regarded as empty.
 */
function fixed_field_field_is_empty($item, $field) {
  return FALSE;
}
