<?php

/**
 * @file
 * nice_taxonomy_menu.module: Implements the necessary hooks for 
 * Nice Taxonomy Menu block to work properly.
 */

/**
 * Implements hook_block_info().
 */
function nice_taxonomy_menu_block_info() {
  $count = variable_get('ntm-count', 1);

  for ($i = 1; $i <= $count; $i++) {
    $blocks['ntm_' . $i] = array(
      'info' => t('Nice Taxonomy Menu -  #@number', array('@number' => $i)),
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function nice_taxonomy_menu_block_view($delta = '') {
  $block = array();

  if (substr($delta, 0, 3) == 'ntm') {
    $ntm_number = substr($delta, 4);
    $block['subject'] = t('Nice Taxonomy Menu #@number', array('@number' => $ntm_number));
    $block['content'] = nice_taxonomy_menu_contents($ntm_number);
  }
  return $block;
}

/**
 * Callback.
 */
function nice_taxonomy_menu_admin_page($form, &$form_state) {
  // List vocabularies.
  $vocabularies = taxonomy_get_vocabularies();
  $vocabulay_options = array();
  foreach ($vocabularies as $vocabulay) {
    $vocabulay_options[$vocabulay->vid] = $vocabulay->name;
  }
  // List node types.
  $node_types = node_type_get_types();
  $node_type_options = array();
  foreach ($node_types as $node_type) {
    $node_type_options[$node_type->type] = $node_type->name;
  }

  $count = variable_get('ntm-count', 0);

  $form['ntm-count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Nice Taxonomy Menus'),
    '#size' => 2,
    '#maxlength' => 2,
    '#default_value' => $count,
    '#description' => t('Number of Nice Taxonomy Menus active in this Drupal installation.'),
    '#required' => TRUE,
  );

  if ($count > 0) {
    for ($i = 1; $i <= $count; $i++) {
      $form['ntm-' . $i] = array(
        '#type' => 'fieldset',
        '#title' => 'Nice Taxonomy Menu #' . $i,
        '#name' => 'ntm-' . $i,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['ntm-' . $i]['ntm-vid-' . $i] = array(
        '#type' => 'select',
        '#title' => t('Vocabulary'),
        '#name' => 'ntm-vid-' . $i,
        '#options' => $vocabulay_options,
        '#default_value' => variable_get('ntm-vid-' . $i),
        '#description' => t('vid of the taxonomy vocabulary to present.'),
        '#required' => TRUE,
      );

      $form['ntm-' . $i]['ntm-node-type-' . $i] = array(
        '#type' => 'select',
        '#title' => t('Node type'),
        '#name' => 'ntm-node-type-' . $i,
        '#options' => $node_type_options,
        '#default_value' => variable_get('ntm-node-type-' . $i),
        '#description' => t('The node type of the nodes to show in the list.'),
        '#required' => TRUE,

        '#ajax' => array(
          'callback' => 'nice_taxonomy_menu_callback',
          'wrapper' => 'checkboxes-div-' . $i,
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );

      // List node type's fields.
      $type = empty($form_state['values']['ntm-node-type-' . $i]) ? variable_get('ntm-node-type-' . $i) : $form_state['values']['ntm-node-type-' . $i];

      $fields = field_info_instances("node", $type);

      $field_options = array();

      foreach ($fields as $key => $field) {
        if (isset($field['label'])) {
          $field_options[$key] = $field['label'];
        }
      }
      $form['ntm-' . $i]['ntm-field-' . $i] = array(
        '#type' => 'select',
        '#title' => t('Field name'),
        '#name' => 'ntm-field-' . $i,
        '#options' => $field_options,
        '#prefix' => '<div id="checkboxes-div-' . $i . '">',
        '#suffix' => '</div>',
        '#default_value' => variable_get('ntm-field-' . $i),
        '#description' => t('The taxonomy field that links node type to taxonomy vocabulary.'),
        '#required' => TRUE,
      );

      $form['ntm-' . $i]['ntm-view-url-' . $i] = array(
        '#type' => 'textfield',
        '#title' => t('Link URL'),
        '#name' => 'ntm-view-url-' . $i,
        '#size' => 50,
        '#maxlength' => 50,
        '#default_value' => variable_get('ntm-view-url-' . $i),
        '#description' => t('The URL to link in every element of the list. Clicking on a leaf element in the tree of the Nice Taxonomy Menu, this link will be called passing the term id as parameter this way: #Link URL#/term_id'),
        '#required' => TRUE,
      );
    }
  }

  return system_settings_form($form);
}

/**
 * Callback.
 */
function nice_taxonomy_menu_callback($form, $form_state) {
  $i = substr(strstr($form_state['triggering_element']['#array_parents'][0], '-'), 1);
  // List node type's fields.
  $fields = field_info_instances("node", $form['ntm-' . $i]['ntm-node-type-' . $i]['#value']);

  $field_options = array();

  foreach ($fields as $key => $field) {
    if (isset($field['label'])) {
      $field_options[$key] = $field['label'];
    }
  }
  $array_keys = array_keys($field_options);
  $default = array_shift($array_keys);

  return
    $form['ntm-' . $i]['ntm-field-' . $i] = array(
      '#type' => 'select',
      '#title' => t('Field name'),
      '#name' => 'ntm-field-' . $i,
      '#options' => $field_options,
      '#prefix' => '<div id="checkboxes-div-' . $i . '">',
      '#suffix' => '</div>',
      '#default_value' => $default,
      '#description' => t('The taxonomy field that links node type to taxonomy vocabulary.'),
      '#required' => TRUE,
    );
}

/**
 * Internal function.
 */
function nice_taxonomy_menu_has_son($taxonomy_tree, $parent_element) {
  $son = 0;
  foreach ($taxonomy_tree as $element) {
    if ($element->parents[0] == $parent_element->tid) {
      $son++;
    }
  }
  return $son;
}

/**
 * Internal recoursive function.
 */
function nice_taxonomy_menu_recoursive_print_menu($taxonomy_tree, $root_element, $deep, $parents, $this_tid, $view_url, $tid, &$active, $tids_used, &$empty) {
  global $language;
  $lang = $language->language;

  $_body = '';

  $active = FALSE;

  if ($this_tid == $tid) {
    $class = 'active';
    $li_class = ' active-trail';

    $active = TRUE;
  }

  foreach ($taxonomy_tree as $element) {
    if ($element->parents[0] == $root_element->tid) {
      $url = base_path() . $view_url . '/' . $element->tid;

      $link = "";
      $class = "";
      $li_class = "";

      if ($element->tid == $tid) {
        $class = 'active';
        $li_class = ' active-trail';

        $active = TRUE;
      }
      $has_son = nice_taxonomy_menu_has_son($taxonomy_tree, $element);

      if (!$has_son) {
        if (!in_array($element->tid, $tids_used)) {
          $empty = TRUE;
        }
        else {
          $empty = FALSE;
        }
      }

      if (!$has_son) {
        if ($empty) {
          $li_class .= " empty";
        }
        $link = '<a class="' . $class . '" href="' . $url . '">' . $element->name . '</a>';
      }
      else {
        $link = '<a class="' . $class . '" href="javascript:void(0)" onclick="jQuery(\'#ntm-menu-' . $element->tid . '\').toggle(200); jQuery(\' . ntm-top-element\').removeClass(\'active-trail\'); jQuery(this).parent().parent().addClass(\'active-trail\');">' . $element->name . '</a>';
      }

      if ($has_son == 0) {
        $_body .= '<li class="ntm-link' . $li_class . '"><div class="ntm-list-element"><span class="ntm-list-spacer">&nbsp;</span>' . $link . '</div></li>';
      }
      else {
        $display = 'none';
        if (in_array($element->tid, $parents)) {
          $display = 'block';
        }
        $_body .= '<li class="ntm-link ' . $li_class . '"><div class="ntm-list-element"><span class="ntm-list-spacer">&nbsp;</span>' . $link . '</div><ul id="ntm-menu-' . $element->tid . '" class="ntm-categ-list ntm-subcat-list ntm-categ-list-' . $deep . '" style="display:' . $display . ';">';
        $_body .= nice_taxonomy_menu_recoursive_print_menu($taxonomy_tree, $element, $deep + 1, $parents, $this_tid, $view_url, $tid, $active, $tids_used, $empty);
        $_body .= '</ul></li>';
      }
    }
  }

  return $_body;
}

/**
 * Custom html block.
 */
function nice_taxonomy_menu_contents($ntm_number) {

  $parents = array();
  $body = '<ul id="ntm-categ-list" class="ntm-categ-list">';

  $vid_catalogo = variable_get('ntm-vid-' . $ntm_number);
  $view_url = variable_get('ntm-view-url-' . $ntm_number);
  $node_type = variable_get('ntm-node-type-' . $ntm_number);
  $field_name = variable_get('ntm-field-' . $ntm_number);

  // SELECT DISTINCT field_data_field_categoria_soluzioni_arr.
  // field_categoria_soluzioni_arr_tid FROM
  // field_data_field_categoria_soluzioni_arr.
  $records = db_select('field_data_' . $field_name, 'f')
    ->fields('f', array($field_name . '_tid'))
    ->execute();

  // $tids_used contiene la lista dei tid effettivamente utilizzati
  // nell'ambito del tipo di contenuto.
  $tids_used = array();
  while ($record = $records->fetchAssoc()) {
    $tids_used[] = $record[$field_name . '_tid'];
  }

  $taxonomy_tree = taxonomy_get_tree($vid_catalogo, 0);

  // Carica il valore del tid del termine di tassonomia attualmente
  // visualizzato.
  $tid = 0;
  $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
  $path = str_replace($view_url, 'view_url', $path);
  $path_elements = explode('/', $path);

  if (($path_elements[0] == 'view_url') && (isset($path_elements[1]))) {
    $i = strpos($path_elements[1], '+');
    if ($i == 0) {
      $tid = $path_elements[1];
    }
    else {
      $tid = substr($path_elements[1], 0, $i);
    }
  }
  else {
    // Se quello che si sta visualizzando non è una tassonomia ma un nodo,
    // identifica il tid del termine di tassonomia collegato al nodo stesso.
    if (($path_elements[0] == 'node') && isset($path_elements[1]) &&
      (is_numeric($path_elements[1]))) {
      $node = node_load($path_elements[1]);

      if (isset($node) && ($node->type == $node_type) &&
      (isset($node->{$field_name}['und'][0]['tid']))) {
        $tid = $node->{$field_name}['und'][0]['tid'];
      }
    }
  }

  // Seleziona tutti i parents della tassonomia selezionata.
  $antiloop = 100;

  $direct_parent = NULL;

  foreach ($taxonomy_tree as $element) {
    if ($element->tid == $tid) {
      $direct_parent = $element;
    }
  }

  if ($direct_parent != NULL) {
    $parents[] = $direct_parent->tid;
    $current_parent = $direct_parent;

    while (($current_parent->parents[0] != 0) && ($antiloop > 0)) {
      $antiloop--;

      foreach ($taxonomy_tree as $element) {
        if ($element->tid == $current_parent->parents[0]) {
          $current_parent = $element;
          $parents[] = $current_parent->tid;
        }
      }
    }
  }

  global $language;
  $lang = $language->language;

  // Seleziona gli elementi radice.
  $base_list = array();

  foreach ($taxonomy_tree as $element) {
    if ($element->depth == 0) {
      $base_list[] = $element;
    }
  }

  foreach ($base_list as $base_element) {
    $active = FALSE;
    $empty = FALSE;

    $url = base_path() . $view_url . '/' . $base_element->tid;

    $display = 'none';
    if (in_array($base_element->tid, $parents)) {
      $display = 'block';
    }

    if (nice_taxonomy_menu_has_son($taxonomy_tree, $base_element)) {
      $recoursive = nice_taxonomy_menu_recoursive_print_menu($taxonomy_tree, $base_element, 2, $parents, $base_element->tid, $view_url, $tid, $active, $tids_used, $empty);

      $class = "";
      $li_class = "";

      if ($active) {
        $class = "active";
        $li_class .= " active-trail";
      }

      $body .= '<li class="ntm-top-element ntm-link' . $li_class . '"><div class="ntm-list-element"><span class="ntm-list-spacer">&nbsp;</span><a href="javascript:void(0)" onclick="jQuery(\'#ntm-menu-' . $base_element->tid . '\').toggle(200); jQuery(\' . ntm-top-element\').removeClass(\'active-trail\'); jQuery(this).parent().parent().addClass(\'active-trail\');" class="' . $class . '">' . $base_element->name . '</a></div></li><ul id="ntm-menu-' . $base_element->tid . '" class="ntm-categ-list ntm-subcat-list ntm-categ-list-1" style="display:' . $display . ';">' . $recoursive . '</ul>';
    }
    else {
      $class = "";
      $li_class = "";

      if ($base_element->tid == $tid) {
        $class = "active";
        $li_class .= " active-trail";
      }

      if (!in_array($element->tid, $tids_used)) {
        $empty = TRUE;
      }

      if ($empty) {
        $li_class .= " empty";
      }

      $url = base_path() . $view_url . '/' . $base_element->tid;

      $body .= '<li class="ntm-top-element ntm-link' . $li_class . '"><div class="ntm-list-element"><span class="ntm-list-spacer">&nbsp;</span><a class="' . $class . '" href="' . $url . '">' . $base_element->name . '</a></div></li>';
    }
  }

  return $body;
}

/**
 * Implements hook_menu().
 */
function nice_taxonomy_menu_menu() {

  $items = array();

  $items['admin/structure/taxonomy/nice_taxonomy_menu'] = array(
    'title' => 'Nice Taxonomy Menu',
    'description' => 'Define for Nice Taxonomy Menus',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nice_taxonomy_menu_admin_page'),
    'access arguments' => array('administer nice taxonomy menu'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function nice_taxonomy_menu_permission() {
  return array(
    'administer nice taxonomy menu' => array(
      'title' => 'Administer Nice Taxonomy Menu',
      'description' => t('Perform administration of Nice Taxonomy Menu settings.'),
    ),
  );
}
