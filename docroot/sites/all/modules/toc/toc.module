<?php
/**
 * @file
 * Main module file for the toc module.
 */

/**
 * Implementats hook_menu().
 */
function toc_menu() {
  $items = array();

  $items['admin/config/user-interface/toc'] = array(
    'title' => 'Table of contents',
    'descriptions' => t('Configure jQuery table of contents module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('toc_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function toc_settings_form() {
  $form = array();

  $form['toc_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types'),
    '#description' => t('Allow table of content generation on content of the selected node types.'),
    '#options' => node_type_get_names(),
    '#default_value' => variable_get('toc_node_types', array()),
  );

  $form['toc_start_level'] = array(
    '#type' => 'select',
    '#title' => t('Start level'),
    '#description' => t('Starting from which heading level you want to generate the table of contents.'),
    '#options' => array(1 => 'h1', 2 => 'h2', 3 => 'h3', 4 => 'h4', 5 => 'h5', 6 => 'h6', 8 => 'h7'),
    '#default_value' => variable_get('toc_start_level', 2),
  );

  $form['toc_depth'] = array(
    '#type' => 'select',
    '#title' => t('Depth'),
    '#description' => t('How deep from the start level do you want to generate the table of contents.'),
    '#options' => range(1, 6),
    '#default_value' => variable_get('toc_depth', 1),
  );
  
  $form['toc_topLinks'] = array(
    '#type' => 'textfield',
    '#title' => t('topLinks'),
    '#description' => t('Leave empty if you dont want links to the top of the document inside each H tag.'),
    '#default_value' => variable_get('toc_topLinks', ''),
  );

  $form['toc_scope'] = array(
    '#type' => 'textfield',
    '#title' => t('Scope'),
    '#description' => t('jQuery selector defining the scope of the table of contents.'),
    '#default_value' => variable_get('toc_scope', '.node .content:eq(0)'),
  );

  $form['toc_dest'] = array(
    '#type' => 'textfield',
    '#title' => t('Destination'),
    '#description' => t("jQuery selector defining the destination of the table of contents. Usually this would be the same value as the Scope setting."),
    '#default_value' => variable_get('toc_dest', '.node .content:eq(0)'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_extra_fields().
 */
function toc_field_extra_fields() {
  $extra = array();
  foreach (toc_allowed_node_types() as $type) {
    $extra['node'][$type]['form'] = array(
      'toc' => array(
        'label' => t('Table of contents'),
        'description' => t('Show table of contents'),
        'weight' => 3,      
      ),
    );
  }
  return $extra; 
}

/**
 * Implements hook_form_alter().
 */
function toc_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!in_array($form['#node']->type, toc_allowed_node_types())) return;
  $form['toc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Table of contents'),
    '#collapsible' => TRUE,
    '#collapsed' => isset($form['#node']->toc) ? $form['#node']->toc : TRUE,
  );
  $form['toc']['toc'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show table of contents.'),
    '#default_value' => isset($form['#node']->toc) ? $form['#node']->toc : FALSE,
  );
}

/**
 * Implements hook_node_insert().
 */
function toc_node_insert($node) {
  if (!in_array($node->type, toc_allowed_node_types())) return;
  if ($node->toc) {
    db_insert('toc')
    ->fields(array('nid' => $node->nid))
    ->execute();    
  }
}

/**
 * Implements hook_node_update().
 */
function toc_node_update($node) {
  if (!in_array($node->type, toc_allowed_node_types())) return;
  db_delete('toc')
  ->condition('nid', $node->nid)
  ->execute();
  toc_node_insert($node);
}

/**
 * Implements hook_node_delete().
 */
function toc_node_delete($node) {
  if (!in_array($node->type, toc_allowed_node_types())) return;
  db_delete('toc')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_node_load().
 */
function toc_node_load($nodes, $types) {
 if (count(array_intersect(toc_allowed_node_types(), $types))) {
  foreach ($nodes as $node) {
    if (!in_array($node->type, toc_allowed_node_types())) return;
      $toc = db_select('toc', 'toc')
      ->fields('toc', array('nid'))
      ->condition('nid', $node->nid, '=')
      ->execute()
      ->fetch();
      $node->toc = $toc ? TRUE : FALSE;
    }   
  }
}

/**
 * Implements hook_node_view().
 */
function toc_node_view($node, $view_mode) {
  if (!in_array($node->type, toc_allowed_node_types())) return;
    if ($view_mode == 'full' && isset($node->toc) && $node->toc) {
      $settings = array(
        'toc_start_level' => variable_get('toc_start_level', 2),
        'toc_depth' => variable_get('toc_depth', 1),
        'toc_topLinks' => variable_get('toc_topLinks' , ''),
        'toc_scope' => variable_get('toc_scope', ' .node .content:eq(0)'),
        'toc_dest' => variable_get('toc_dest', ' .node .content:eq(0)'),
      );
      drupal_add_js($settings, 'setting');
      drupal_add_js(libraries_get_path('jquery.tableofcontents') . '/jquery.tableofcontents.min.js');
      drupal_add_js(libraries_get_path('jquery.scrollTo') . '/jquery.scrollTo.min.js');
      drupal_add_js(libraries_get_path('jquery.localScroll') . '/jquery.localScroll.min.js');
      drupal_add_js(drupal_get_path('module', 'toc') . '/js/toc.js');
    }
}


function toc_allowed_node_types() {
  return array_keys(array_filter(variable_get('toc_node_types', array())));
}