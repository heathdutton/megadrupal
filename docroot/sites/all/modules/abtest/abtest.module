<?php

/**
 * @file
 * Implements hooks and main API for the 'abtest' module.
 */

define('ABTEST_COOKIE_EXPIRES', 31556926); // 1 year in seconds

/**
 * Starts an A/B test.
 */
function abtest($test_name, $alternatives = NULL, $options = array()) {
  $test = ABTest::getTest($test_name, $alternatives, $options);
  return $test->getAlternativeForParticipant()->value;
}

/**
 * Tracks a conversion event.
 *
 * Use this to mark successful conversion of a test.
 */
function abtest_track_conversion($event_name) {
  foreach (ABTest::getTestsForConversionEvent($event_name) as $test) {
    $test->trackConversionForParticipant();
  }
}

// Internal function to generate a new identity for a given user.
function _abtest_generate_identity($account) {
  if ($account->uid) {
    return 'user_' . $account->uid;
  }

  // generate a random 15 character string
  return user_password(15);
}

// Bootstrap identity for users that don't have one (in the case where
// there're already users on the site before enabling the 'abtest' module)
function _abtest_bootstrap_identity(&$account) {
  $obj = (object)array(
    'uid' => $account->uid,
    'abtest_identity' => _abtest_generate_identity($account),
  );
  drupal_write_record('abtest_user_identity', $obj);
  $account->abtest_identity = $obj->abtest_identity;
}

/**
 * Returns a string used to identify the current user.
 */
function abtest_get_identity() {
  global $user;

  if ($user->uid) {
    if (empty($user->abtest_identity)) {
      $user = user_load($user->uid);
    }
    if (empty($user->abtest_identity)) {
      _abtest_bootstrap_identity($user);
    }
    return $user->abtest_identity;
  }
  elseif (!empty($_SESSION['abtest_identity'])) {
    return $_SESSION['abtest_identity'];
  }

  $identity = _abtest_generate_identity($user);
  //$params = session_get_cookie_params();
  //setcookie('abtest_identity', $identity, time() + ABTEST_COOKIE_EXPIRES,
  //  $params['path'], $params['domain']);
  $_SESSION['abtest_identity'] = $identity;

  return $identity;
}

/**
 * Implements hook_user_load().
 */
function abtest_user_load($users) {
  $result = db_query("SELECT uid, abtest_identity FROM {abtest_user_identity}
    WHERE uid IN (:uids)", array(':uids' => array_keys($users)));

  $identities = array();
  foreach ($result as $obj) {
    $identities[$obj->uid] = $obj->abtest_identity;
  }

  foreach ($users as $uid => &$account) {
    if (isset($identities[$uid])) {
      $account->abtest_identity = $identities[$uid];
    }
    else {
      _abtest_bootstrap_identity($account);
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function abtest_user_insert(&$edit, $account, $category) {
  if (!empty($_SESSION['abtest_identity'])) {
    $identity = $_SESSION['abtest_identity'];
    unset($_SESSION['abtest_identity']);
  }
  else {
    $identity = _abtest_generate_identity($account);
  }

  // clear the cookie
  /*
  $params = session_get_cookie_params();
  $twodaysago = time() - (86400 * 2);
  setcookie('abtest_identity', '', $twodaysago,
    $params['path'], $params['domain']);
   */

  // Set the identity for the new user.
  $obj = (object)array(
    'uid' => $account->uid,
    'abtest_identity' => $identity,
  );
  drupal_write_record('abtest_user_identity', $obj);
}

/**
 * Implements hook_user_delete().
 */
function abtest_user_delete($account) {
  db_delete('abtest_user_identity')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_views_api().
 */
function abtest_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'abtest') . '/views',
  );
}

