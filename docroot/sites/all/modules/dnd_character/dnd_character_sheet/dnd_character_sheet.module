<?php

/**
 * @file dnd_character_sheet.module
 * 
 */

define('DND_CHARACTER_SHEET_UNDERLINE_WIDTH', 0.6);
define('DND_CHARACTER_SHEET_UNDERLINE_HEADER', 6.0);
define('DND_CHARACTER_SHEET_UNDERLINE_TEXT', 9.0);
define('DND_CHARACTER_SHEET_UNDERLINE_TEXT_SMALL', 8.0);
define('DND_CHARACTER_SHEET_FILLED_HEADER', 8.0);
define('DND_CHARACTER_SHEET_LINE_HEIGHT', 11.0);
define('DND_CHARACTER_SHEET_HEADER_HEIGHT', 7.0);

/**
 * Implementation of hook_menu().
 */
function dnd_character_sheet_menu() { 
  $items['node/%node/sheet'] = array(
    'title' => 'D&D character sheet',
    'description' => 'The full character sheet for this PC',
    'page callback' => 'dnd_character_sheet_sheet',
    'page arguments' => array(1),
    'access arguments' => array('access content'), 
    'weight' => 0,
    'type' => MENU_CALLBACK,
    'file' => 'dnd_character_sheet.pdf.inc',
  );

  return $items;
}


function dnd_character_sheet_sheet($node) {
  $node->field_dnd_character_alignment[$node->language][0]['value'] = _dnd_character_sheet_sheet_alignment($node->field_dnd_character_alignment[$node->language][0]['value']);
  $node->field_dnd_character_feats[$node->language] = _dnd_character_sheet_feats($node->field_dnd_character_feats[$node->language]);
  _dnd_character_sheet_attributes($node);
  dnd_character_sheet_display($node);
  exit;
}

/**
 * Helper function to return the full name of the alignment based on the
 * value stored in the node
 */
function _dnd_character_sheet_sheet_alignment($value) {
  $alignments = array(
    'lg' => t('Lawful Good'),
    'ln' => t('Lawful Neutral'),
    'le' => t('Lawful Evil'),
    'ng' => t('Neutral Good'),
    'tn' => t('True Neutral'),
    'ne' => t('Neutral Evil'),
    'cg' => t('Chaotic Good'),
    'cn' => t('Chaotic Neutral'),
    'ce' => t('Chaotic Evil'),
  );
  return $alignments[$value];
}

/**
 * Helper function to turn feats into something human-readable.
 */
function _dnd_character_sheet_feats($values) {
  module_load_include('inc', 'dnd_character', 'dnd_character.features.field');
  $data = dnd_character_field_default_fields();
  $output = array();
  foreach ($values as $value) {
    $output[]['value'] = $data['node-dnd_character-field_dnd_character_feats']['field_config']['settings']['allowed_values'][$value['value']];
  }
  return $output;
}

/**
 * Helper function to handle miscellaneous attributes.
 */
function _dnd_character_sheet_attributes(&$node) {
  $gender = array('male' => t('Male'), 'female' => t('female'));
  $node->field_dnd_character_gender[$node->language][0]['value'] = $gender[$node->field_dnd_character_gender[$node->language][0]['value']];

  module_load_include('inc', 'dnd_character', 'dnd_character.features.field');
  $data = dnd_character_field_default_fields();
  $classes = array();
  
  // Human readable class data
  $temp = explode("\n", $data['node-dnd_character-field_dnd_character_class_level']['field_config']['settings']['class']);
  $class_data = array();
  foreach ($temp as $temp_data) {
    $temp_data = explode('|', $temp_data);
    $class_data[$temp_data[0]] = $temp_data[1];
  }

  foreach ($node->field_dnd_character_class_level[$node->language] as $key => $node_class_data) {
    $node->field_dnd_character_class_level[$node->language][$key]['class'] = $class_data[$node_class_data['class']];
  }

  // Human readable race data
  $node->field_dnd_character_race[$node->language][0]['value'] = $data['node-dnd_character-field_dnd_character_race']['field_config']['settings']['allowed_values'][$node->field_dnd_character_race[$node->language][0]['value']];

  // Human readable size data
  $node->field_dnd_character_size[$node->language][0]['value'] = $data['node-dnd_character-field_dnd_character_size']['field_config']['settings']['allowed_values'][$node->field_dnd_character_size[$node->language][0]['value']];
  print_r($node->field_dnd_character_size[$node->language][0]['value']);

}











