<?php

/**
 * Implements hook_field_info().
 */
function dnd_fields_field_info() {
  return array(
    'dnd_fields_armor' => array(
      'label' => t('D&D armor'),
      'description' => t("This field stores armor values"),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'dnd_fields_armor',
      'default_formatter' => 'dnd_fields_armor', // This doesn't *have* to be the same name as default_widget's value, this is only coincidence
    ),
    'dnd_fields_skill' => array(
      'label' => t('D&D skill'),
      'description' => t("This field stores PC skill values"),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'dnd_fields_skill',
      'default_formatter' => 'dnd_fields_skill',
    ),
    'dnd_fields_ability' => array(
      'label' => t('D&D ability'),
      'description' => t("This field stores PC ability scores"),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'dnd_fields_ability',
      'default_formatter' => 'dnd_fields_ability',
    ),
    'dnd_fields_save' => array(
      'label' => t('D&D saving throw'),
      'description' => t("This field stores saving throw scores"),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'dnd_fields_save',
      'default_formatter' => 'dnd_fields_save',
    ),
    'dnd_fields_weapon' => array(
      'label' => t('D&D weapon'),
      'description' => t("This field stores weapon values"),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'dnd_fields_weapon',
      'default_formatter' => 'dnd_fields_weapon',
    ),
    'dnd_fields_class' => array(
      'label' => t('D&D class/level'),
      'description' => t("This field stores class and levels"),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'dnd_fields_class',
      'default_formatter' => 'dnd_fields_class',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function dnd_fields_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  /*
  foreach ($items as $delta => $item) {

  }
  */
}

/**
 * Implements hook_fields_field_is_empty().
 */
function dnd_fields_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  //$empty = empty($item[$key]);
  return empty($item[$key]);
}

/**
 * Implements hook_fields_field_formatter_info().
 */
function dnd_fields_field_formatter_info() {
  return array(
    // This formatter just displays the armor values in the armor indicated.
    'dnd_fields_armor' => array(
      'label' => t('Armor fields'), 
      'field types' => array('dnd_fields_armor'),
    ),
    'dnd_fields_skill' => array(
      'label' => t('Skill fields'), 
      'field types' => array('dnd_fields_skill'),
    ),
    'dnd_fields_ability' => array(
      'label' => t('Ability scores'), 
      'field types' => array('dnd_fields_ability'),
    ),
    'dnd_fields_save' => array(
      'label' => t('Saving throws'), 
      'field types' => array('dnd_fields_save'),
    ),
    'dnd_fields_weapon' => array(
      'label' => t('Weapons'), 
      'field types' => array('dnd_fields_weapon'),
    ),
    'dnd_fields_class' => array(
      'label' => t('Class/Level'), 
      'field types' => array('dnd_fields_class'),
    ),
  );
}

/**
 * Implements hook_fields_formatter_fiew().
 */
function dnd_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'dnd_fields_armor':
      // TODO: Find a way to pull these header values from the original widget.
      $headers = array(
        t('Armor or protection'),
        t('Armor bonus'),
        t('Max dex modifier'),
        t('Check penalty'),
        t('Spell failure'),
        t('Speed'),
        t('Weight'),
      );

      // Normally, we would loop through the deltas and use those instead of $element[0]. But since
      // we want a single themed table that contains all possible rows, this is good enough of a hack.
      $element[0]['#markup'] = theme('table', array('header' => $headers, 'rows' => $items));
      break;
    case 'dnd_fields_skill':
      // Set the skill name to the human readable name instead of the internal machine name.
      $skills = dnd_fields_skill_list_array(explode("\n", $field['settings']['skill']));
      foreach ($items as $delta => $item) {
        $items[$delta]['skill'] = $skills[$item['skill']];
      }

      $headers = array(
        t('Skill'),
        t('Ranks'),
      );
      
      // Ditto from above...
      // Normally, we would loop through the deltas and use those instead of $element[0]. But since
      // we want a single themed table that contains all possible rows, this is good enough of a hack.
      $element[0]['#markup'] = theme('table', array('header' => $headers, 'rows' => $items));
      break;
    case 'dnd_fields_ability':
      $headers = array(
        t('Skill'),
        t('Score'),
        t('Modifier'),
        t('Temp score'),
        t('Temp modifier'),
      );
      
      // Ditto from above...
      // Normally, we would loop through the deltas and use those instead of $element[0]. But since
      // we want a single themed table that contains all possible rows, this is good enough of a hack.
      $element[0]['#markup'] = theme('table', array('header' => $headers, 'rows' => $items));
      break;
    case 'dnd_fields_save':
      $headers = array(
        t('Save'),
        t('Total'),
        t('Base save'),
        t('Ability mod'),
        t('Magic modifier'),
        t('Misc modifier'),
        t('Temp score'),
      );
      
      // Ditto from above...
      // Normally, we would loop through the deltas and use those instead of $element[0]. But since
      // we want a single themed table that contains all possible rows, this is good enough of a hack.
      $element[0]['#markup'] = theme('table', array('header' => $headers, 'rows' => $items));
      break;
    case 'dnd_fields_weapon':
      $headers = array(
        t('Weapon'),
        t('Attack bonus'),
        t('Damage'),
        t('Critical'),
        t('Range'),
        t('Size'),
        t('Type'),
        t('Weight'),
        t('Notes and related feats'),
      );
      
      // Ditto from above...
      // Normally, we would loop through the deltas and use those instead of $element[0]. But since
      // we want a single themed table that contains all possible rows, this is good enough of a hack.
      $element[0]['#markup'] = theme('table', array('header' => $headers, 'rows' => $items));
      break;
    case 'dnd_fields_class':
      $headers = array(
        t('Class'),
        t('Level'),
      );
      
      // Ditto from above...
      // Normally, we would loop through the deltas and use those instead of $element[0]. But since
      // we want a single themed table that contains all possible rows, this is good enough of a hack.
      $element[0]['#markup'] = theme('table', array('header' => $headers, 'rows' => $items));
      break;
  }
  return $element;
}

/**
 * Implements hook_fields_widget_info().
 */
function dnd_fields_field_widget_info() {
  return array(
    'dnd_fields_armor' => array(
      'label' => t('D&D armor values'), 
      'field types' => array('dnd_fields_armor'),
    ),
    'dnd_fields_skill' => array(
      'label' => t('D&D skill values'), 
      'field types' => array('dnd_fields_skill'),
    ),
    'dnd_fields_ability' => array(
      'label' => t('D&D ability score'), 
      'field types' => array('dnd_fields_ability'),
    ),
    'dnd_fields_save' => array(
      'label' => t('D&D saving throws'), 
      'field types' => array('dnd_fields_save'),
    ),
    'dnd_fields_weapon' => array(
      'label' => t('D&D weapons'), 
      'field types' => array('dnd_fields_weapon'),
    ),
    'dnd_fields_class' => array(
      'label' => t('D&D class/level'), 
      'field types' => array('dnd_fields_class'),
    ),
  );
}

/**
 * Implements hook_fields_field_widget_form().
 */
function dnd_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {
    case 'dnd_fields_armor':
      $value = isset($items[$delta]['armor']) ? $items[$delta]['armor'] : '';
      $element['armor'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-armor'), 'title' => t('The name of this piece of armor or protection.')),
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 128,
        '#title' => t('Armor or protection'),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.css'),
          'js' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.js'),
        ),
      );
      $element['bonus'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-bonus'), 'title' => t('The bonus that applies to the player character\'s overall armor class.')),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Bonus'),
      );
      $element['max_dex'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-max-dex'), 'title' => t('The maximum dexterity bonus that can be applied while wearing this piece of armor.')),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Max dex bonus'),
      );
      $element['check_pen'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-check-pen'), 'title' => t('Any armor heavier than leather hurts a character\'s ability to use some skills. An armor check penalty number is the penalty that applies to Balance, Climb, Escape Artist, Hide, Jump, Move Silently, Sleight of Hand, and Tumble checks by a character wearing a certain kind of armor.')),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Check penalty'),
      );
      $element['spell_fail'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-spell-fail'), 'title' => t('Chance of arcane spell failure (percentage).')),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Spell failure'),
      );
      $element['speed'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-speed'), 'title' => t('The maximum speed the player character can move while wearing this piece of armor.')),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Speed'),
      );
      $element['weight'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-weight'), 'title' => t('The weight (in pounds) of this piece of armor. This can affect the player character\'s speed beyond the speed value, if the character is already heavily encumbered.')),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Weight'),
      );
      
      // Loop through all the element children and set a default value if we have one. Then set HTML wrappers.
      foreach (element_children($element) as $element_key) {
        $value = isset($items[$delta][$element_key]) ? $items[$delta][$element_key] : '';
        $element[$element_key]['#default_value'] = $value;
        $element[$element_key]['#prefix'] = '<div class="dnd-fields-armor-field dnd-fields-armor-' . $element_key . '-field">';
        $element[$element_key]['#suffix'] = '</div>';
      }
      break;
      
    case 'dnd_fields_skill':
      $settings = $form_state['field'][$instance['field_name']][$langcode]['field']['settings'];

      // Get the list of skills broken into an array, and split those elements into a 
      // multi-dimensional arrays
      $skills_temp = (!empty($settings['skill'])) ? preg_split('/(\r\n?|\n)/', $settings['skill']) : array();
      $skills = array(0 => t('-Choose a skill-'));
      foreach ($skills_temp as $skill) {
        if(strpos($skill, '|') === FALSE) {
          $skills[] = array($skill);
        }
        else {
          $temp = explode('|', $skill);
          $skills[$temp[0]] = $temp[1];
        }
      }

      $element['skill'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-skill'), 'title' => ''),
        '#type' => 'select',
        '#options' => $skills,
        '#title' => t('Skill name'),
        '#description' => t('Choose a skill you wish to allocate ranks to.'),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.css'),
          'js' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.js'),
        ),
        '#prefix' => '<div class="dnd-fields-skill-field dnd-fields-skill-skill-field">',
        '#suffix' => '</div>',
      );
      $element['ranks'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-ranks'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Skill ranks'),
        //'#description' => t('If you buy a class skill, your character gets 1 rank (equal to a +1 bonus on checks with that skill) for each skill point. If you buy other classes\' skills (cross-class skills), you get ½ rank per skill point.'),
        '#prefix' => '<div class="dnd-fields-skill-field dnd-fields-skill-ranks-field">',
        '#suffix' => '</div>',
      );
      // Loop through all the element children and set a default value if we have one. Then set HTML wrappers.
      foreach (element_children($element) as $element_key) {
        $value = isset($items[$delta][$element_key]) ? $items[$delta][$element_key] : '';
        $element[$element_key]['#default_value'] = $value;
      }
      break;
      
    case 'dnd_fields_ability':
      $settings = $form_state['field'][$instance['field_name']][$langcode]['field']['settings'];

      $fields = array(
        'ability' => t('Ability'),
        'score' => t('Score'),
        'mod' => t('Modifier'),
        'tempscore' => t('Temp score'),
        'tempmod' => t('Temp modifier'),
      );

      $abilities = (!empty($field['settings']['abilities'])) ? explode("\n", $field['settings']['abilities']) : array();

      foreach ($fields as $key => $label) {
        $value = isset($items[$delta][$key]) ? $items[$delta][$key] : '';
        if (empty($value) && $key == 'ability') {
          $value = $abilities[$delta];
        }
        
        $element[$key] = array(
          '#attributes' => array('class' => array('edit-dnd-fields-ability'), 'title' => '', 'rel' => strtolower($abilities[$delta])),
          '#type' => 'textfield',
          '#size' => 3,
          '#maxlength' => 3,
          '#title' => $label,
          '#default_value' => $value,
          '#attached' => array(
            'css' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.css'),
            'js' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.js'),
            ),
          '#prefix' => '<div class="dnd-fields-ability-field dnd-fields-ability-' . $key . '-field dnd-fields-ability-' . $key . '-' . strtolower($abilities[$delta]) . '-field">',
          '#suffix' => '</div>',
        );
        if ($key == 'ability') {
          $element[$key]['#size'] = 10;
          $element[$key]['#maxlength'] = 32;
          if (arg(0) != 'admin') {
            $element[$key]['#attributes'] = array('readonly' => 'readonly');
          }
        }
      }
      break;
      
    case 'dnd_fields_save':
      $settings = $form_state['field'][$instance['field_name']][$langcode]['field']['settings'];
      
      $saves = explode("\n", $field['settings']['saves']);

      $element['save'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-save'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 10,
        '#maxlength' => 32,
        '#title' => t('Saving Throw'),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.css'),
          'js' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.js'),
        ),
      );
      $element['total'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-total'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Total'),
      );
      $element['base'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-base'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Base save'),
      );
      $element['abilitymod'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-abilitymod'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Ability modifier'),
      );
      $element['magicmod'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-magicmod'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Magic modifier'),
      );
      $element['miscmod'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-miscmod'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Misc modifier'),
      );
      $element['temp'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-temp'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Temp score'),
      );
      // Loop through all the element children and set a default value if we have one. Then set HTML wrappers.
      foreach (element_children($element) as $element_key) {
        $value = isset($items[$delta][$element_key]) ? $items[$delta][$element_key] : '';
        if (empty($value) && $element_key == 'save') {
          $value = $saves[$delta];
        }
        $element[$element_key]['#default_value'] = $value;
        $element[$element_key]['#prefix'] = '<div class="dnd-fields-save-field dnd-fields-save-' . $element_key . '-field">';
        $element[$element_key]['#suffix'] = '</div>';
      }
      break;
      
    case 'dnd_fields_weapon':
      $settings = $form_state['field'][$instance['field_name']][$langcode]['field']['settings'];
      
      $element['weapon'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-weapon'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 64,
        '#title' => t('Weapon'),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.css'),
          'js' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.js'),
        ),
      );
      $element['bonus'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-bonus'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Attack bonus'),
      );
      $element['damage'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-damage'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 10,
        '#title' => t('Damage'),
      );
      $element['critical'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-critical'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 32,
        '#title' => t('Critical'),
      );
      $element['range'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-range'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 10,
        '#title' => t('Range'),
      );
      $element['size'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-size'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 32,
        '#title' => t('Size'),
      );
      $element['type'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-type'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 32,
        '#title' => t('Type'),
      );
      $element['weight'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-weight'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 6,
        '#title' => t('Weight'),
      );
      $element['notes'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-notes'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 40,
        '#maxlength' => 255,
        '#title' => t('Notes and related feats'),
      );
      // Loop through all the element children and set a default value if we have one. Then set HTML wrappers.
      foreach (element_children($element) as $element_key) {
        $value = isset($items[$delta][$element_key]) ? $items[$delta][$element_key] : '';
        $element[$element_key]['#default_value'] = $value;
        $element[$element_key]['#prefix'] = '<div class="dnd-fields-weapon-field dnd-fields-weapon-' . $element_key . '-field">';
        $element[$element_key]['#suffix'] = '</div>';
      }
      break;
      
    case 'dnd_fields_class':
      $settings = $form_state['field'][$instance['field_name']][$langcode]['field']['settings'];

      // Get the list of classes broken into an array, and split those elements into a 
      // multi-dimensional arrays
      $classes_temp = (!empty($settings['class'])) ? preg_split('/(\r\n?|\n)/', $settings['class']) : array();
      $classes = array(0 => t('-Choose a class-'));
      foreach ($classes_temp as $class) {
        if(strpos($class, '|') === FALSE) {
          $classes[] = array($class);
        }
        else {
          $temp = explode('|', $class);
          $classes[$temp[0]] = $temp[1];
        }
      }

      $element['class'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-class'), 'title' => ''),
        '#type' => 'select',
        '#options' => $classes,
        '#title' => t('Class name'),
        '#description' => t('Choose a character class.'),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.css'),
          'js' => array(drupal_get_path('module', 'dnd_fields') . '/dnd_fields.js'),
        ),
        '#prefix' => '<div class="dnd-fields-class-field dnd-fields-class-class-field">',
        '#suffix' => '</div>',
      );
      $element['level'] = array(
        '#attributes' => array('class' => array('edit-dnd-fields-level'), 'title' => ''),
        '#type' => 'textfield',
        '#size' => 3,
        '#maxlength' => 3,
        '#title' => t('Class level'),
        '#description' => t('The levels for this class <em>only</em>.'),
      );
      // Loop through all the element children and set a default value if we have one. Then set HTML wrappers.
      foreach (element_children($element) as $element_key) {
        $value = isset($items[$delta][$element_key]) ? $items[$delta][$element_key] : '';
        $element[$element_key]['#default_value'] = $value;
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_fields_field_formatter_settings_form().
 */
function dnd_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  return $element;
}

/**
 * Implements hook_fields_field_settings_form().
 */
function dnd_fields_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  if ($field['type'] == 'dnd_fields_skill') {
    $value = (!empty($settings['skill'])) ? $settings['skill'] : implode(dnd_fields_skill_list(), "\n");
    $form['skill'] = array(
      '#type' => 'textarea',
      '#title' => t('Skills'),
      '#default_value' => $value,
      '#required' => TRUE,
      '#description' => t('List of skills to make available. Put one skill on a new line.'),
      '#disabled' => $has_data,
    );
  }

  elseif ($field['type'] == 'dnd_fields_ability') {
    $abilities = array(
      t('Strength'),
      t('Dexterity'),
      t('Constitution'),
      t('Intelligence'),
      t('Wisdom'),
      t('Charisma'),
    );

    $form['abilities'] = array(
      '#type' => 'textarea',
      '#title' => t('Abilities'),
      '#default_value' => implode("\n", $abilities),
      '#required' => TRUE,
      '#description' => t('List of abilities to make available. Put one ability on a new line.'),
      '#disabled' => $has_data,
    );
  }

  elseif ($field['type'] == 'dnd_fields_save') {
    $abilities = array(
      t('Fortitude'),
      t('Will'),
      t('Reflex'),
    );

    $form['saves'] = array(
      '#type' => 'textarea',
      '#title' => t('Saving throws'),
      '#default_value' => implode("\n", $abilities),
      '#required' => TRUE,
      '#rows' => count($abilities),
      '#description' => t('List of saving throws to make available. Put one saving throw on a new line.'),
      '#disabled' => $has_data,
    );
  }

  if ($field['type'] == 'dnd_fields_class') {
    $value = (!empty($settings['class'])) ? $settings['class'] : implode(dnd_fields_class_list(), "\n");
    $form['class'] = array(
      '#type' => 'textarea',
      '#title' => t('Classes'),
      '#default_value' => $value,
      '#required' => TRUE,
      '#description' => t('List of available character classes.'),
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_fields_field _presave().
 */
function dnd_fields_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if(!empty($item['armor']) || !empty($item['skill']) || !empty($item['ability']) || !empty($item['save']) || !empty($item['class'])) {
      foreach ($item as $key => $value) {
        if ($key == 'armor' || $key == 'skill' || $key == 'ability' || $key == 'save' || $key == 'class') continue;
        $items[$delta][$key] = (int)$value;
      }
    }
    elseif(!empty($item['weapon'])) {
      foreach ($item as $key => $value) {
        if ($key == 'weapon') continue;
        $items[$delta][$key] = (string)$value;
      }
    }
  }
}

/**
 * Implements hook_fields_form_FORM_ID_alter().
 */
function dnd_fields_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if (!empty($form['field']['settings']['abilities'])) {
    $abilities = explode("\n", $form['field']['settings']['abilities']['#default_value']);
    $count = count($abilities);
    $form['field']['cardinality']['#default_value'] = ($count) ? $count : 1;
  }
  elseif (!empty($form['field']['settings']['saves'])) {
    $saves = explode("\n", $form['field']['settings']['saves']['#default_value']);
    $count = count($saves);
    $form['field']['cardinality']['#default_value'] = ($count) ? $count : 1;
  }
  elseif (!empty($form['field']['settings']['skill'])) {
    $skills = explode("\n", $form['field']['settings']['skill']['#default_value']);
    $count = count($skills);
    $form['field']['cardinality']['#default_value'] = ($count) ? -1 : 1;
  }
  elseif (!empty($form['field']['settings']['class'])) {
    $classes = explode("\n", $form['field']['settings']['class']['#default_value']);
    $count = count($classes);
    $form['field']['cardinality']['#default_value'] = ($count) ? -1 : 1;
  }
}


/**
 * Helper function that returns an array of default skill lists.
 */
function dnd_fields_skill_list() {
  return array(
    'appraise|' . t('Appraise'),
    'autohypnosis|' . t('Autohypnosis'),
    'balance|' . t('Balance'),
    'bluff|' . t('Bluff'),
    'climb|' . t('Climb'),
    'concentration|' . t('Concentration'),
    'concentration|' . t('Concentration'),
    'craft_general|' . t('Craft: General'),
    'craft_alchemy|' . t('Craft: Alchemy'),
    'craft_armorsmithing|' . t('Craft: Armorsmithing'),
    'craft_blacksmithing|' . t('Craft: Blacksmithing'),
    'craft_dreamweaving|' . t('Craft: Dreamweaving'),
    'craft_gemcutting|' . t('Craft: Gemcutting'),
    'craft_leatherworking|' . t('Craft: Leatherworking'),
    'craft_metalworking|' . t('Craft: Metalworking'),
    'craft_painting|' . t('Craft: Painting'),
    'craft_sculpting|' . t('Craft: Sculpting'),
    'craft_shipmaking|' . t('Craft: Shipmaking'),
    'craft_stonemasonry|' . t('Craft: Stonemasonry'),
    'craft_stoneworking|' . t('Craft: Stoneworking'),
    'craft_trapmaking|' . t('Craft: Trapmaking'),
    'craft_weaponsmithing|' . t('Craft: Weaponsmithing'),
    'decipher_script|' . t('Decipher Script'),
    'diplomacy|' . t('Diplomacy'),
    'disable_device|' . t('Disable Device'),
    'disguise|' . t('Disguise'),
    'escape_artist|' . t('Escape Artist'),
    'forgery|' . t('Forgery'),
    'gather_information|' . t('Gather Information'),
    'handle_animal|' . t('Handle Animal'),
    'heal|' . t('Heal'),
    'hide|' . t('Hide'),
    'intimidate|' . t('Intimidate'),
    'jump|' . t('Jump'),
    'knowledge_general|' . t('Knowledge: General'),
    'knowledge_arcana|' . t('Knowledge: Arcana'),
    'knowledge_architecture_and_engineering|' . t('Knowledge: Architecture and Engineering'),
    'knowledge_dungeoneering|' . t('Knowledge: Dungeoneering'),
    'knowledge_geography|' . t('Knowledge: Geography'),
    'knowledge_history|' . t('Knowledge: History'),
    'knowledge_local|' . t('Knowledge: Local'),
    'knowledge_nature|' . t('Knowledge: Nature'),
    'knowledge_nobility_and_royalty|' . t('Knowledge: Nobility and Royalty'),
    'knowledge_psionics|' . t('Knowledge: Psionics'),
    'knowledge_religion|' . t('Knowledge: Religion'),
    'knowledge_the_planes|' . t('Knowledge: The Planes'),
    'listen|' . t('Listen'),
    'move_silently|' . t('Move Silently'),
    'open_lock|' . t('Open Lock'),
    'perform_general|' . t('Perform: General'),
    'perform_act|' . t('Perform: Act'),
    'perform_comedy|' . t('Perform: Comedy'),
    'perform_dance|' . t('Perform: Dance'),
    'perform_keyboard_instruments|' . t('Perform: Keyboard Instruments'),
    'perform_oratory|' . t('Perform: Oratory'),
    'perform_percussion_instruments|' . t('Perform: Percussion Instruments'),
    'perform_sing|' . t('Perform: Sing'),
    'perform_string_instruments|' . t('Perform: String Instruments'),
    'perform_wind_instruments|' . t('Perform: Wind Instruments'),
    'profession_general|' . t('Profession: General'),
    'profession_bookkeeper|' . t('Profession: Bookkeeper'),
    'profession_hunter|' . t('Profession: Hunter'),
    'profession_miner|' . t('Profession: Miner'),
    'profession_siege_engineer|' . t('Profession: Siege Engineer'),
    'psicraft|' . t('Psicraft'),
    'ride|' . t('Ride'),
    'search|' . t('Search'),
    'sense_motive|' . t('Sense Motive'),
    'sleight_of_hand|' . t('Sleight of Hand'),
    'speak_language_general|' . t('Speak Language: General'),
    'speak_language_abyssal|' . t('Speak Language: Abyssal'),
    'speak_language_aquan|' . t('Speak Language: Aquan'),
    'speak_language_auran|' . t('Speak Language: Auran'),
    'speak_language_celestial|' . t('Speak Language: Celestial'),
    'speak_language_common|' . t('Speak Language: Common'),
    'speak_language_draconic|' . t('Speak Language: Draconic'),
    'speak_language_drow_sign_language|' . t('Speak Language: Drow Sign Language'),
    'speak_language_druidic|' . t('Speak Language: Druidic'),
    'speak_language_dwarven|' . t('Speak Language: Dwarven'),
    'speak_language_elven|' . t('Speak Language: Elven'),
    'speak_language_formian|' . t('Speak Language: Formian'),
    'speak_language_giant|' . t('Speak Language: Giant'),
    'speak_language_gnoll|' . t('Speak Language: Gnoll'),
    'speak_language_gnome|' . t('Speak Language: Gnome'),
    'speak_language_goblin|' . t('Speak Language: Goblin'),
    'speak_language_grimlock|' . t('Speak Language: Grimlock'),
    'speak_language_halfling|' . t('Speak Language: Halfling'),
    'speak_language_ignan|' . t('Speak Language: Ignan'),
    'speak_language_infernal|' . t('Speak Language: Infernal'),
    'speak_language_maenad|' . t('Speak Language: Maenad'),
    'speak_language_orc|' . t('Speak Language: Orc'),
    'speak_language_sphinx|' . t('Speak Language: Sphinx'),
    'speak_language_sylvan|' . t('Speak Language: Sylvan'),
    'speak_language_terran|' . t('Speak Language: Terran'),
    'speak_language_undercommon|' . t('Speak Language: Undercommon'),
    'speak_language_worg|' . t('Speak Language: Worg'),
    'speak_language_xeph|' . t('Speak Language: Xeph'),
    'spellcraft|' . t('Spellcraft'),
    'spot|' . t('Spot'),
    'survival|' . t('Survival'),
    'swim|' . t('Swim'),
    'tumble|' . t('Tumble'),
    'use_magic_device|' . t('Use Magic Device'),
    'use_psionic_device|' . t('Use Psionic Device'),
    'use_rope|' . t('Use Rope'),
  );
}

function dnd_fields_skill_list_array($list = NULL) {
  $list = ($list) ? dnd_fields_skill_list() : $list;
  $skills = array();
  foreach($list as $skill) {
    list($machine_name, $skill_name) = explode('|', $skill);
    $skills[$machine_name] = $skill_name;
  }
  return $skills;
}

function dnd_fields_class_list() {
  return array(
    'adept|' . t('Adept'),
    'agent_retriever|' . t('Agent Retriever'),
    'arcane_archer|' . t('Arcane Archer'),
    'arcane_trickster|' . t('Arcane Trickster'),
    'archmage|' . t('Archmage'),
    'aristocrat|' . t('Aristocrat'),
    'assassin|' . t('Assassin'),
    'barbarian|' . t('Barbarian'),
    'bard|' . t('Bard'),
    'blackguard|' . t('Blackguard'),
    'cerebremancer|' . t('Cerebremancer'),
    'cleric|' . t('Cleric'),
    'commoner|' . t('Commoner'),
    'cosmic_descryer|' . t('Cosmic Descryer'),
    'divine_emissary|' . t('Divine Emissary'),
    'dragon_disciple|' . t('Dragon Disciple'),
    'druid|' . t('Druid'),
    'duelist|' . t('Duelist'),
    'diskblade|' . t('Duskblade'),
    'dwarven_defender|' . t('Dwarven Defender'),
    'eldritch_knight|' . t('Eldritch Knight'),
    'elocater|' . t('Elocater'),
    'epic_infiltrator|' . t('Epic Infiltrator'),
    'expert|' . t('Expert'),
    'fighter|' . t('Fighter'),
    'guardian_paramount|' . t('Guardian Paramount'),
    'hierophant|' . t('Hierophant'),
    'high_proselytizer|' . t('High Proselytizer'),
    'horizon_walker|' . t('Horizon Walker'),
    'legendary_dreadnought|' . t('Legendary Dreadnought'),
    'loremaster|' . t('Loremaster'),
    'metamind|' . t('Metamind'),
    'monk|' . t('Monk'),
    'mystic_theurge|' . t('Mystic Theurge'),
    'paladin|' . t('Paladin'),
    'perfect_wight|' . t('Perfect Wight'),
    'psion|' . t('Psion'),
    'psion_uncarnate|' . t('Psion Uncarnate'),
    'psionic_fist|' . t('Psionic Fist'),
    'psychic_warrior|' . t('Psychic Warrior'),
    'pyrokineticist|' . t('Pyrokineticist'),
    'ranger|' . t('Ranger'),
    'rogue|' . t('Rogue'),
    'shadowdancer|' . t('Shadowdancer'),
    'slayer|' . t('Slayer'),
    'sorcerer|' . t('Sorcerer'),
    'soulknife|' . t('Soulknife'),
    'thaumaturgist|' . t('Thaumaturgist'),
    'thrallherd|' . t('Thrallherd'),
    'union_sentinel|' . t('Union Sentinel'),
    'war_mind|' . t('War Mind'),
    'warrior|' . t('Warrior'),
    'wilder|' . t('Wilder'),
    'wizard|' . t('Wizard'),
  );
}
