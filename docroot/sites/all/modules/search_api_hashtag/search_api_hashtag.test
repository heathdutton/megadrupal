<?php

/**
 * @file
 * Class SearchApiHashtagTestCase
 */

/**
 * Basic test coverage for Search API Hashtag module.
 */
class SearchApiHashtagTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Search API Hashtag data extract',
      'description' => 'Test how hashtags are being extracted',
      'group' => 'Search API',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('search_api', 'search_api_hashtag'));
  }

  /**
   * Tests if the image style is well calculated from image size.
   */
  public function testHashtagExtraction() {
    $options = array('fields' => drupal_map_assoc(array('field_1', 'field_2')), 'lowercase' => 0);
    $form = array();
    $alter = new SearchApiHashtagAlterCallback(new SearchApiIndex(), $options);

    $items = array(
      (object) array(
        'field_1' => 'This is a test without hashtag',
        'field_2' => 'This is a test without hashtag',
        'field_3' => 'This is a test without hashtag',
      ),
      (object) array(
        'field_1' => 'This is a test without hashtag',
        'field_2' => 'This is a test without hashtag',
        'field_3' => '#hashtag field #not #selected',
      ),
      (object) array(
        'field_1' => '#Valid #hashtag #another_valid #dash-not',
        'field_2' => 'adding another #field to the #index1 using #hashtag, but #valid',
        'field_3' => 'This is a test without hashtag',
      ),
    );
    $alter->alterItems($items);

    $this->assertTrue(empty($items[0]->hashtag));
    $this->assertTrue(empty($items[1]->hashtag));
    $this->assertEqual(count($items[2]->hashtag), 7);
    debug($items[2]);
    $this->assertEqual($items[2]->hashtag[0], 'Valid');
    $this->assertEqual($items[2]->hashtag[1], 'hashtag');
    $this->assertEqual($items[2]->hashtag[2], 'another_valid');
    $this->assertEqual($items[2]->hashtag[3], 'dash');
    $this->assertEqual($items[2]->hashtag[4], 'field');
    $this->assertEqual($items[2]->hashtag[5], 'index1');
    $this->assertEqual($items[2]->hashtag[6], 'valid');

    $options['lowercase'] = 1;
    $alter->configurationFormSubmit(array(), $options, $form);
    $alter->alterItems($items);

    $this->assertTrue(empty($items[0]->hashtag));
    $this->assertTrue(empty($items[1]->hashtag));
    $this->assertEqual(count($items[2]->hashtag), 6);
    debug($items[2]);
    $this->assertEqual($items[2]->hashtag[0], 'valid');
    $this->assertEqual($items[2]->hashtag[1], 'hashtag');
    $this->assertEqual($items[2]->hashtag[2], 'another_valid');
    $this->assertEqual($items[2]->hashtag[3], 'dash');
    $this->assertEqual($items[2]->hashtag[4], 'field');
    $this->assertEqual($items[2]->hashtag[5], 'index1');


    $options['fields'] = drupal_map_assoc(array('field_3'));
    $alter->configurationFormSubmit(array(), $options, $form);
    $alter->alterItems($items);

    $this->assertTrue(empty($items[0]->hashtag));
    $this->assertTrue(empty($items[2]->hashtag));
    $this->assertEqual(count($items[1]->hashtag), 3);
    $this->assertEqual($items[1]->hashtag[0], 'hashtag');
    $this->assertEqual($items[1]->hashtag[1], 'not');
    $this->assertEqual($items[1]->hashtag[2], 'selected');
  }
}
