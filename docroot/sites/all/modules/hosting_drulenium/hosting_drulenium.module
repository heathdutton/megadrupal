<?php

/**
 * Implementation of hook_perm()
 */
function hosting_drulenium_perm() {
  return array(
    'create dr_pre_code_deploy task',
    'create dr_post_code_deploy task',
  );
}

/**
 * Implementation of hook_hosting_tasks()
 */
function hosting_drulenium_hosting_tasks() {
  $tasks = array();

  $tasks['site']['dr_pre_code_deploy'] = array(
    'title' => t('Drulenium - Create'),
    'description' => t('Create baseline screenshots before deployment.'),
    'dialog' => TRUE,
    'task_permitted' => TRUE,
  );
  $tasks['site']['dr_post_code_deploy'] = array(
    'title' => t('Drulenium - Diff'),
    'description' => t('Create screenshots & Diff after deployment.'),
    'dialog' => TRUE,
    'task_permitted' => TRUE,
  );

  return $tasks;
}

/**
 * Implements hosting_task_TASK_TYPE_form().
 */
function hosting_task_dr_pre_code_deploy_form($node) {
  // Gather a list of operations to execute.
  $value = '<div>The following operations will be executed on <em>' . $node->title . '</em>:<br /><ul>';
  $value .= '<li>Database from stage will be copied to <em>' . $node->title . '</em>. (TODO)</li>';
  $value .= '<li>Cache will be cleared on <em>' . $node->title . '</em>. (TODO)</li>';
  $value .= '<li>Drulenium module will be enabled on <em>' . $node->title . '</em>. (TODO)</li>';
  $value .= '<li>Baseline screenshots will be generated on <em>' . $node->title . '</em>.</li>';
  $value .= '</ul></div>';
  $form['operations'] = array(
    '#value' => $value,
  );
  return $form;
}

/**
 * Implements hook_hosting_task_TASK_TYPE_ops().
 *
 * @see: hosting_task_drulenium_pre_code_deploy_form().
 */
function hosting_drulenium_hosting_task_dr_pre_code_deploy_ops() {
  return array(
    'site drulenium pre code deploy' => array(
      '#description' => 'Drulenium - Baseline creation process .',
      '#weight' => 0,
    )
  );
}

/**
 * Implements hosting_task_TASK_TYPE_form().
 */
function hosting_task_dr_post_code_deploy_form($node) {
  // Gather a list of operations to execute.
  $value = '<div>The following operations will be executed on <em>' . $node->title . '</em>:<br /><ul>';
  $value .= '<li>screenshots will be generated on <em>' . $node->title . '</em>.</li>';
  $value .= '<li>New screenshots will be compared with previous version of screenshots.</li>';
  $value .= '</ul></div>';
  $form['operations'] = array(
    '#value' => $value,
  );
  return $form;
}

/**
 * Implements hook_hosting_task_TASK_TYPE_ops().
 *
 * @see: hosting_task_drulenium_pre_code_deploy_form().
 */
function hosting_drulenium_hosting_task_dr_post_code_deploy_ops() {
  return array(
    'site drulenium post code deploy' => array(
      '#description' => 'Drulenium - Snapshots creation & diff process .',
      '#weight' => 0,
    )
  );
}

/**
 * Implements hook_form_alter().
 */
function hosting_drulenium_form_alter(&$form, &$form_state, $form_id) {
  // If it's the site (environment) form, it is the override.
  if ($form_id == 'site_node_form') {
    if (!isset($form['#node']->project)) {
      return;
    }
    
    // Add to deploy hooks.
    $form['environment']['settings']['deploy']['drulenium-pre'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run Drulenium pre deployment steps'),
      '#description' => t('Run baseline screenshots generation before every code deploy.'),
      '#weight' => 100,
      '#default_value' => $form['#node']->environment->settings->deploy['drulenium-pre'],
    );
    $form['environment']['settings']['deploy']['drulenium-post'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run Drulenium post deployment steps'),
      '#description' => t('Run screenshots generation & diff after every code deploy.'),
      '#weight' => 100,
      '#default_value' => $form['#node']->environment->settings->deploy['drulenium-post'],
    );
  }
}

function hosting_drulenium_nodeapi_task_load(&$node, $a3, $a4) {
  if ($node->type == 'task' && !empty($node->task_args['test_results'])) {
    $output = "in hosting_drulenium_nodeapi_task_load - Drulenium";
    $node->test_results_formatted = '<div class="test-results" style="background-color: black; padding: 2em; font-family: Consolas, Bitstream Vera Sans Mono, Courier New, Courier, monospace;">' . $output . '</div>';
  }
}

function hosting_drulenium_nodeapi_task_view(&$node, $a3, $a4) {
  if ($node->type == 'task' && !empty($node->task_args['test_results'])) {
    $node->content['results'] = array(
      '#type' => 'item',
      '#value' => $node->test_results_formatted,
      '#weight' => -100,
    );
  }
}

/**
 * Implements hook_devshop_environment_actions().
 *
 * Defines the list of tasks that appear under the gear icon.
 */
function hosting_drulenium_devshop_environment_actions($environment) {
  return array(
    'dr_pre_code_deploy',
    'dr_post_code_deploy',
  );
}
