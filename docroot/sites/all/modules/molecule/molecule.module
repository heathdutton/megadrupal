<?php
/**
 * @file
 * Module that makes molecule displaying possible.
 */

/**
 * Implements hook_filter_info().
 */
function molecule_filter_info() {
  $filters = array();
  $filters['molecule'] = array(
    'title' => t('Molecule applet filter'),
    'description' => t('Replaces references to molecule files with JMol and/or JSpecView applets.'),
    'prepare callback' => '_molecule_prepare',
    'process callback' => '_molecule_process',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Implements hook_filter_prepare().
 */
function _molecule_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = preg_replace('#<molecule (.+?)\s*(?:/>|>*</molecule>)#', '[molecule-molecule $1 ]', $text);
  $text = preg_replace('#<spectrum (.+?)\s*(?:/>|>*</spectrum>)#', '[molecule-spectrum $1 ]', $text);
  $text = preg_replace('#<moleculedraw (.+?)\s*(?:/>|>*</moleculedraw>)#', '[molecule-draw $1 ]', $text);
  $text = preg_replace('#<moleculewithspectrum (.+?)\s*(?:/>|>*</moleculewithspectrum>)#', '[molecule-combined $1 ]', $text);
  return $text;
}

/**
 * Implements hook_filter_process().
 */
function _molecule_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Match all molecule occurences.
  preg_match_all('#\[molecule-molecule (.+?) \]#', $text, $molecule_matches);
  if (count($molecule_matches[0])) {
    // There are jMol applets present add jmol code.
    $jmol_present = TRUE;
  } else {
    $jmol_present = FALSE;
  }

  // Match all spectrum occurences.
  preg_match_all('#\[molecule-spectrum (.+?) \]#', $text, $spectrum_matches);
  if (count($spectrum_matches[0])) {
    // There are jSpecView applets present, add jspecview code.
    $jspecview_present = TRUE;
  } else {
    $jspecview_present = FALSE;
  }

  // Match all draw occurences
  preg_match_all('#\[molecule-draw (.+?) \]#', $text, $draw_matches);
  if (count($draw_matches[0])) {
    // There are jSpecView applets present, add jspecview code.
    $jsme_present = TRUE;
  } else {
    $jsme_present = FALSE;
  }

  // Match all combined occurence.
  preg_match_all('#\[molecule-combined (.+?) \]#', $text, $combined_matches);
  if (count($combined_matches[0])) {
    // The jSpecView and Jmol are applets present, add both.
    $jmol_present = TRUE;
    $jspecview_present = TRUE;
  }

  $script = "";
  global $base_url;

  // Create the javascript references if required.
  if ($jmol_present | $jspecview_present | $jsme_present) {
    //drupal_add_js(drupal_get_path('module', 'molecule') . '/molecule.js');
    //drupal_add_js(drupal_get_path('module', 'molecule') . '/jsmol/js/JSmol.full.js');
    // To work around caching problems in Drupal 7 we add the required javascript references inline.
    $script .= '<script src="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/molecule.js' . '"></script>';
    $script .= '<script src="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/jsmol/js/JSmol.full.js' . '"></script>';
  }

  if ($jspecview_present) {
    //drupal_add_js(drupal_get_path('module', 'molecule') . '/jsmol/js/JSmolJSV.js');
    // To work around caching problems in Drupal 7 we add the required javascript references inline.
    $script .= '<script src="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/jsmol/js/JSmolJSV.js' . '"></script>';
  }

  if($jsme_present) {
    // To work around caching problems in Drupal 7 we add the required javascript references inline.
    $script .= '<script src="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/jsmol/js/JSmolJME.js' . '"></script>';
    $script .= '<script src="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/jsmol/jsme/jsme/jsme.nocache.js' . '"></script>';
    $script .= '<link rel="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/jsmol/jsme/jsme/jsa.css">';
    $script .= '<link rel="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/jsmol/jsme/jsme/gwt/chrome/chrome.css">';
    $script .= '<link rel="' . $base_url . '/' . drupal_get_path('module', 'molecule') . '/jsmol/jsme/jsme/gwt/chrome/mosaic.css">';
  }

  // Add molecule applets.
  $applets = _molecule_create_molecule_applets($molecule_matches);
  $text = _molecule_str_replace_once($molecule_matches[0], $applets, $text);

  // Add spectrum applets.
  $applets = _molecule_create_spectrum_applets($spectrum_matches);
  $text = _molecule_str_replace_once($spectrum_matches[0], $applets, $text);

  // Add draw applets
  $applets = _molecule_create_draw_applets($draw_matches);
  $text = _molecule_str_replace_once($draw_matches[0], $applets, $text);

  // Add combined applets.
  $applets = _molecule_create_combined_applets($combined_matches);
  $text = _molecule_str_replace_once($combined_matches[0], $applets, $text);

  return $script . $text;
}

/**
 * Create molecule applets for the matches.
 */
function _molecule_create_molecule_applets($matches) {
  $applets = array();
  foreach ($matches[0] as $index => $whole_match) {
    // Get the attributes/
    $attributes_text = $matches[1][$index];
    $attributes = _molecule_parse_attributes($attributes_text);

    // Check if the required file attribute exists, otherwise return error.
    if (!array_key_exists('file', $attributes)) {
      $applets[$index] = t("Molecule Error: File attribute missing.");
      continue;
    }

    // Set the index.
    $attributes['index'] = $index;

    // Fill defaults for attributes not present.
    $attributes = _molecule_fill_molecule_applet_defaults($attributes);

    // Everything went fine, create the code required to create an molecule
    // applet.
    $applets[$index] = _molecule_create_molecule_applet_code($attributes);
  }

  return $applets;
}

/**
 * Fill default values for molecule applet attributes.
 */
function _molecule_fill_molecule_applet_defaults($attributes) {
  // Check for optional attributes and set them if they don't exist.
  if (!array_key_exists('width', $attributes)) {
    $attributes['width'] = '400';
  }
  if (!array_key_exists('height', $attributes)) {
    $attributes['height'] = $attributes['width'];
  }
  if (!array_key_exists('background', $attributes)) {
    $attributes['background'] = 'white';
  }
  if (!array_key_exists('vibration', $attributes)) {
    $attributes['vibration'] = 'off';
  }
  if (!array_key_exists('disablemenu', $attributes)) {
    $attributes['disablemenu'] = 'true';
  }
  return $attributes;
}

/**
 * Create html-code for molecule applet.
 */
function _molecule_create_molecule_applet_code($attributes) {
  $code = '';

  // Create javascript section.
  $code .= '<script type="text/javascript">';

  $options = array();
  $options["j2sPath"] = $GLOBALS['base_path'] . drupal_get_path('module', 'molecule') . "/jsmol/j2s";
  $options['disableJ2SLoadMonitor'] = true;
  $options["disableInitialConsole"] = true;
  $options['width'] = $attributes['width'];
  $options['height'] = $attributes['height'];

  // Add script
  $script = 'load ' . $attributes['file'] . '; ';
  $script .= 'background ' . $attributes['background'] . '; ';
  $script .= 'vibration ' . $attributes['vibration'] . '; ';
  $script .= 'sync on; set synccallback "molecule_syncCallback"; ';

  if (strtoupper($attributes["disablemenu"]) == "TRUE") {
    $script .= 'set disablePopupMenu TRUE';
  }
  else {
    $script .= 'set disablePopupMenu FALSE';
  }

  // If raw parameters exist add them.
  if (array_key_exists('parameters', $attributes)) {
    $script .= '; ';
    $script .= $attributes['parameters'];
  }

  $options["script"] = $script;

  // Create call the jmolApplet function.
  $code .= 'Jmol.getApplet("jmolApplet' . $attributes['index'] . '", ' . json_encode($options);

  // Close the call.
  $code .= ');';

  // If closedquestion_sync is set the sync function to sync the selected peak.
  if (array_key_exists('closedquestionsync', $attributes)) {
    $code .= 'molecule_setSyncClosedQuestion("jmolApplet' . $attributes['index'] . '", "' . $attributes['closedquestionsync'] . '");';
  }

  // Close the javascript section.
  $code .= '</script>';

  return $code;
}

/**
 * Create spectrum applets for the matches.
 */
function _molecule_create_spectrum_applets($matches) {
  $applets = array();
  foreach ($matches[0] as $index => $whole_match) {
    // Get the attributes.
    $attributes_text = $matches[1][$index];
    $attributes = _molecule_parse_attributes($attributes_text);

    // Check if the required file attribute exists, otherwise return error.
    if (!array_key_exists('file', $attributes)) {
      $applets[$index] = t("Molecule Error: File attribute missing.");
      continue;
    }

    // Set the index.
    $attributes['index'] = $index;

    // Fill defaults for attributes not present.
    $attributes = _molecule_fill_spectrum_applet_defaults($attributes);

    // Everything went fine, create the code required to create an molecule
    // applet.
    $applets[$index] = _molecule_create_spectrum_applet_code($attributes);
  }

  return $applets;
}

/**
 * Fill default attributs for a spectrum applet.
 */
function _molecule_fill_spectrum_applet_defaults($attributes) {
  if (!array_key_exists('width', $attributes)) {
    $attributes['width'] = '500';
  }
  if (!array_key_exists('height', $attributes)) {
    $attributes['height'] = '400';
  }
  if (!array_key_exists('disablemenu', $attributes)) {
    $attributes['disablemenu'] = 'true';
  }

  return $attributes;
}

/**
 * Create html-code for a spectrum applet.
 */
function _molecule_create_spectrum_applet_code($attributes) {
  $code = '';
  $code .= '<script type="text/javascript">';

  $script = '';
  $script .= 'load ' . $attributes['file'] . '; set synccallbackfunctionname molecule_syncCallback';

  if (array_key_exists('peak', $attributes)) {
    $script .= '; peak ' . $attributes['peak'];
  }

  if (array_key_exists('parameters', $attributes)) {
    $script .= '; ' . $attributes['parameters'];
  }


  $options = array();
  $options["j2sPath"] = $GLOBALS['base_path'] . drupal_get_path('module', 'molecule') . "/jsmol/j2s";
  $options['script'] = $script;
  $options['width'] = $attributes['width'];
  $options['height'] = $attributes['height'];
  $options['disableJ2SLoadMonitor'] = true;
  $options["disableInitialConsole"] = true;

  $code .= 'Jmol.getJSVApplet("JSVApplet' . $attributes['index'] . '", ' . json_encode($options) . ');';


  // If closedquestion_sync is set the sync function to sync the selected peak.
  if (array_key_exists('closedquestionsync', $attributes)) {
    $code .= 'molecule_setSyncClosedQuestion("JSVApplet' . $attributes['index'] . '", "' . $attributes['closedquestionsync'] . '");';
  }

  $code .= '</script>';
  return $code;
}

/**
 * Create draw applets for the matches
 */
function _molecule_create_draw_applets($matches) {
  $applets = array();
  foreach ($matches[0] as $index => $whole_match) {
    // Get the attributes.
    $attributes_text = $matches[1][$index];
    $attributes = _molecule_parse_attributes($attributes_text);

    // Set the index.
    $attributes['index'] = $index;

    // Fill defaults for attributes not present.
    $attributes = _molecule_fill_draw_applet_defaults($attributes);

    // Everything went fine, create the code required to create an molecule
    // applet.
    $applets[$index] = _molecule_create_draw_applet_code($attributes);
  }

  return $applets;
}

/**
 * Fill default attributes for draw applets
 */
function _molecule_fill_draw_applet_defaults($attributes) {
  if (!array_key_exists('width', $attributes)) {
    $attributes['width'] = '500';
  }
  if (!array_key_exists('height', $attributes)) {
    $attributes['height'] = '400';
  }
  return $attributes;
}

/**
 * Create html-code for a draw applet
 */
function _molecule_create_draw_applet_code($attributes) {
  $code = '';
  $code .= '<div id="JMEApplet' . $attributes['index'] . '" style="position:relative;width:' . $attributes['width'] . 'px;height:' . $attributes['height'] . 'px;"></div>';
  $code .= '<script type="text/javascript">';

  $options = array();
  $options['use'] = "HTML5";
  $options['visible'] = TRUE;
  $options['divId'] = 'JMEApplet' . $attributes['index'];

  $code .= 'Jmol.getJMEApplet("JMEApplet' . $attributes['index'] . '", ' . json_encode($options) . ');';
  $code .= 'molecule_waitReadyDraw("JMEApplet' . $attributes['index'] . '");';

  // If closedquestion_sync is set, set the sync function to sync the smiles formule.
  if (array_key_exists('closedquestionsync', $attributes)) {
    $code .= 'molecule_setSyncClosedQuestion("JMEApplet' . $attributes['index'] . '", "' . $attributes['closedquestionsync'] . '");';
  }

  // If closedquestiondatasync is set, set the sync function to sync the applet data
  if (array_key_exists('closedquestiondatasync', $attributes)) {
    $code .= 'molecule_setSyncDataClosedQuestion("JMEApplet' . $attributes['index'] . '", "' . $attributes['closedquestiondatasync'] . '");';
  }

  $code .= '</script>';
  return $code;
}

/**
 * Create combined applets for the matches.
 */
function _molecule_create_combined_applets($matches) {
  $applets = array();
  foreach ($matches[0] as $index => $whole_match) {
    // Get the attributes.
    $attributes_text = $matches[1][$index];
    $attributes = _molecule_parse_attributes($attributes_text);

    // Check if the required file attribute exists, otherwise return error.
    if (!array_key_exists('file', $attributes)) {
      $applets[$index] = t("Molecule Error: File attribute missing.");
      continue;
    }

    // Set the index.
    $attributes['index'] = "C" . $index;

    // Fill defaults for attributes not present.
    $attributes = _molecule_fill_combined_applet_defaults($attributes);

    // Everything went fine, create the code required to create an molecule
    // applet.
    $applets[$index] = _molecule_create_combined_applet_code($attributes);
  }

  return $applets;
}

/**
 * Fill the default attributes for the combined applet.
 */
function _molecule_fill_combined_applet_defaults($attributes) {
  return $attributes;
}

/**
 * Create html-code for a combined applet.
 */
function _molecule_create_combined_applet_code($attributes) {
  $code = '';
  $code .= '<table width="99%" border="0" >';
  $code .= '<tr>';
  $code .= '<td>';

  // Copy attributes for spectrum applet.
  $spectrum_attributes['file'] = $attributes['file'];
  $spectrum_attributes['index'] = $attributes['index'];
  if (array_key_exists('closedquestionsync', $attributes)) {
    $spectrum_attributes['closedquestionsync'] = $attributes['closedquestionsync'];
  }
  if (array_key_exists('spectrumwidth', $attributes)) {
    $spectrum_attributes['width'] = $attributes['spectrumwidth'];
  }
  if (array_key_exists('spectrumheight', $attributes)) {
    $spectrum_attributes['height'] = $attributes['spectrumheight'];
  }
  $spectrum_attributes = _molecule_fill_spectrum_applet_defaults($spectrum_attributes);
  $code .= _molecule_create_spectrum_applet_code($spectrum_attributes);

  $code .= '</td>';
  $code .= '<td>';

  $molecule_attributes['file'] = $attributes['file'];
  $molecule_attributes['index'] = $attributes['index'];
  if (array_key_exists('moleculewidth', $attributes)) {
    $molecule_attributes['width'] = $attributes['moleculewidth'];
  }
  $molecule_attributes = _molecule_fill_molecule_applet_defaults($molecule_attributes);
  $code .= _molecule_create_molecule_applet_code($molecule_attributes);

  $code .= '<script type="text/javascript">';
  $code .= 'molecule_setSyncApplets("JSVApplet' . $attributes['index'] . '", "jmolApplet' . $attributes['index'] . '");';
  $code .= '</script>';

  $code .= '</td>';
  $code .= '</tr>';
  $code .= '</table>';
  return $code;
}


/**
 * Create an attribute array from text representation of xml attributes.
 */
function _molecule_parse_attributes($attributes_text) {
  $attributes = array();
  preg_match_all('/([a-z]+)[ ]*=[ ]*"([^"]*)"/i', $attributes_text, $attributes_matches);
  foreach ($attributes_matches[0] as $index => $match) {
    $attribute_key = $attributes_matches[1][$index];
    $attribute_value = $attributes_matches[2][$index];
    $attributes[$attribute_key] = $attribute_value;
  }

  return $attributes;
}

/**
 * Modified str_replace script to limit replacements to one replacement.
 */
function _molecule_str_replace_once($search, $replace, $subject) {
  // Check if both search and replace are arrays if they are walk through them
  // and do single replacement.
  if (is_array($search) && is_array($replace)) {
    foreach ($search as $index => $search_value) {
      $subject = _molecule_str_replace_once($search_value, $replace[$index], $subject);
    }
  }
  // Check if both search and replace are strings, if the are replace the first
  // occurence in the subject string.
  elseif (is_string($search) && is_string($replace)) {
    // Find begin and end of the first occurence.
    $begin = strpos($subject, $search);
    $end = $begin + strlen($search);

    // Replace the occurence with the new value.
    $subject = substr_replace($subject, $replace, $begin, $end - $begin);

  }

  return $subject;

}
