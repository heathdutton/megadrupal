<?php

define('QUIZ_MULTI_CHOICE', '2 - quiz_multi_choice');

/**
 * Implements hook_quiz_option().
*/
function multi_choice_quiz_option() {
  $option[] = array(
    'key' => QUIZ_MULTI_CHOICE,
    'prompt' => t('Multi-choice (Easiest quiz type)'),
  );

  return $option;
}

/**
 * Implements hook_view_quiz_question().
 */
function multi_choice_view_quiz_question($quiz_type, $node, $tid) {
  global $user;

  $form = array();

  if ($quiz_type == QUIZ_MULTI_CHOICE) {
    // To be able to find out whether the right answer was clicked, we need to
    // be able to get exactly the same question (the values on each button). Since
    // the question generation shuffles the order of the question at each generation
    // we cannot simply regenerate the question and look at which button was
    // clicked. Hence we save exactly the question which was asked before
    $saved_question = variable_get("multi_choice_question_" . $user->uid,  FALSE);
    if ($saved_question) {
      $form = $saved_question;
      
      variable_del("multi_choice_question_" . $user->uid);
    }
    else {
      $form = node_view($node, "question_thai_to_english");
      $form['instructions'] = array(
        '#type' => 'item',
        '#prefix' => '<p>',
        '#description' =>
        "Listen to the following recording and select what you think the English translation is:",
        '#suffix' => '</p>',
        '#weight' => -40
      );

      $answers = 5;

      // Store the real nid
      $correct_nid = $node->nid;
      $nids[] = $node->nid;
      // Get some random nids
      for ($answer=1; $answer<$answers; $answer++) {
        $nid = multi_choice_get_random_nid($tid, $nids);

        if ($nid <> FALSE) {
          $nids[] =  $nid;
        }
      }
      shuffle($nids);

      $answers = count($nids);
      for ($answer=0; $answer<$answers; $answer++) {
        $node = node_load($nids[$answer]);
        if ($nids[$answer] == $correct_nid) {
          $submit_handler = 'multi_choice_answer_clicked_right';
        }
        else {
          $submit_handler = 'multi_choice_answer_clicked_wrong';
        }
        $form['answer_' . $answer] = array(
          '#type' => 'submit',
          '#value' => $node->title,
          '#submit' => array($submit_handler),
          '#weight' => 5 + $answer
        );
      }
      
      variable_set("multi_choice_question_" . $user->uid,  $form);
    }
  }

  return $form;
}

/**
 * Implements hook_view_quiz_answer().
 */
function multi_choice_view_quiz_answer($quiz_type, $node) {
  global $user;

  $form = array();
  if ($quiz_type == QUIZ_MULTI_CHOICE) {
    $form = node_view($node, "answer_thai_to_english");

    global $user;
    $word_no = variable_get('flipcard_word_no_' . $user->uid, 0);
    $form['prompt'] = array(
      '#type' => 'item',
      '#description' => 'The answer to question ' . $word_no . ' is:',
      '#weight' => -10);

    $form['ok'] = array(
      '#type' => 'submit',
      '#value' => t('OK'),
      '#submit' => array('multi_choice_correct_answer_displayed'),
      '#weight' => 2.5
    );

    $form['set_finished'] = array(
      '#type' => 'submit',
      '#value' => t('Exit quiz'),
      '#submit' => array('flipcard_exit_quiz'),
      '#weight' => 2.6
    );

    if (variable_get('flipcard_multi_choice_correct_' . $user->uid, FALSE)) {
      flipcard_add_move_to_level_10_checkbox($form);
    }
  }

  return $form;
}

/**
 * Handle the 'OK' pressed from the full correct word details displayed.
 */
function multi_choice_correct_answer_displayed($form, &$form_state) {
  global $user;

  $values = $form_state['values'];

  if (isset($values['move_to_level_10'])) {
    if ($values['move_to_level_10']) {
      flipcard_move_to_top_level($user->uid, $values['nid']);
    }
  }
  variable_del('flipcard_multi_choice_correct_' . $user->uid);
  variable_del('flipcard_shown_nid_' . $user->uid);
  flipcard_end_question_branch($values['tid']);
}

/**
 * Process the users multi-choice answer, when they clicked the right answer.
 *
 * This function processes the actual clicking on a particular answer button.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function multi_choice_answer_clicked_right(&$form, &$form_state) {
  global $user;

  $real_answer = $form_state['values']['hidden_title'];
  $tid = $form_state['values']['tid'];

  $nid = $form_state['values']['hidden_nid'];
  $node = node_load($nid);

  $the_word_means = '"' . $node->field_thai['und'][0]['value'] . '" means "' .
    $real_answer . '".';
  $form = node_view($node, "answer_thai_to_english");

  drupal_set_message("Correct! " . $the_word_means);
  variable_set('flipcard_multi_choice_correct_' . $user->uid, TRUE);

  flipcard_answer_right_display_level_change($user->uid, $form['#node']->nid);

  drupal_goto('flipcard/quiz/' . $tid . '/answer');
}

/**
 * Process the users multi-choice answer, when they clicked the wrong answer.
 *
 * This function processes the actual clicking on a particular answer button.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function multi_choice_answer_clicked_wrong(&$form, &$form_state) {
  global $user;

  $real_answer = $form_state['values']['hidden_title'];
  $tid = $form_state['values']['tid'];

  $nid = $form_state['values']['hidden_nid'];
  $node = node_load($nid);

  $the_word_means = '"' . $node->field_thai['und'][0]['value'] . '" means "' .
    $real_answer . '".';
  $form = node_view($node, "answer_thai_to_english");

  drupal_set_message('Wrong! ' . $the_word_means, 'error');
  variable_set('flipcard_multi_choice_correct_' . $user->uid, FALSE);

  flipcard_answer_wrong_display_level_change($user->uid, $form['#node']->nid);

  drupal_goto('flipcard/quiz/' . $tid . '/answer');
}

/**
 * Get a random node id.
 *
 * We try to find a nid which is not the same as the correct answer as
 * well as not the same as all the current false answers.
 */
function multi_choice_get_random_nid($tid, $nids) {
  // We need to make sure we are not selecting a homonym. In order to do this
  // we get the answer text and check that the answer text of the new picked
  // node is not the same as the answer text of any of the currently selected
  // nodes.
  foreach ($nids as $nid) {
    $node = node_load($nid);
    $translations[] = flipcard_get_translation($node);
  }

  // Remove the correct answer and all selected wrong answers
  $sql = "SELECT nid FROM {taxonomy_index}
    WHERE {taxonomy_index}.tid = :tid
    AND nid NOT IN (" . implode(',', $nids) . ")
      ORDER BY RAND()";

  $result = db_query_range($sql, 0, 1, array(':tid' => $tid));

  $nid = $result->fetchField();

  // See if there is a translation clash
  $node = node_load($nid);
  $translation = flipcard_get_translation($node);
  if (in_array($translation, $translations)) {
    // Add the newly selected nid to the list of ineligible nids and try again
    $nids[] = $nid;
    $nid = multi_choice_get_random_nid($tid, $nids);
  }

  return $nid;
}
