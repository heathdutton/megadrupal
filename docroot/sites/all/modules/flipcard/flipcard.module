<?php

require_once("flipcard.admin.inc");
require_once("flipcard.log.inc");
require_once("box.inc");
require_once("boxes.inc");
require_once("card.inc");

// The following may be different for your setup

// This is the taxonomy id for the 'words' set
define('FLIPCARD_WORDS_TID', 38);
define('FLIPCARD_PHRASES_TID', 39);
define('FLIPCARD_DIALOGUES_TID', 55);

/**
 * Implements hook_menu().
 */
function flipcard_menu() {
  $items = array();

  // Tab pages for starting a quiz
  $items['flipcard/quiz/%'] = array(
    'title' => 'Lesson',
    'page callback' => 'drupal_get_form',
    // Parameter 2 is taxonomy id
    'page arguments' => array('flipcard_start_quiz', 2),
    'access arguments' => array('flipcard anonymous user'),
    'description' => 'Study a set of flipcards.',
  );

  $items['flipcard/quiz/%/summary'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Lesson Summary',
    'weight' => -5,
  );

  // Lesson Progress tab
  $items['flipcard/quiz/%/progress'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Lesson Progress',
    'page callback' => 'flipcard_levels',
    // Parameter 2 is taxonomy id
    'page arguments' => array(2, "level-0"),
    'access arguments' => array('flipcard authenticated user'),
    'description' => 'Display the lesson progress.',
    'weight' => 10
  );

  // Each of the Level N words secondary level tabs
  for ($level = (FLIPCARD_UNSTARTED_LEVEL + 1); $level <= FLIPCARD_TOP_LEVEL; $level++) {
    if ($level == (FLIPCARD_UNSTARTED_LEVEL + 1)) {
      $type = MENU_DEFAULT_LOCAL_TASK;
    }
    else {
      $type = MENU_LOCAL_TASK;
    }
    if ($level == FLIPCARD_UNSTARTED_LEVEL) {
      $title = "Unstarted";
    }
    else {
      $title = 'Level ' . $level;
    }
    $items['flipcard/quiz/%/progress/level-' . $level] = array(
      'type' => $type,
      'title' => $title,
      'page callback' => 'flipcard_levels',
      // Parameter 2 is taxonomy id
      // Parameter 4 is the level text
      'page arguments' => array(2, 4),
      'access arguments' => array('flipcard authenticated user'),
      'weight' => $level,
    );
  }

  // The content for this tab will come via a function pulling in the view contents
  $items['flipcard/quiz/%/words'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Lesson Words',
    'page callback' => 'drupal_get_form',
    // Parameter 2 is taxonomy id
    'page arguments' => array('flipcard_words', 2),
    'access arguments' => array('flipcard anonymous user'),
    'description' => 'Get the words for a set of flipcards.',
  );

  $items['flipcard/quiz/%/knowledge-score'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Mastery',
    'page callback' => 'flipcard_knowledge_score',
    // Parameter 2 is taxonomy id
    'page arguments' => array(2),
    'access arguments' => array('flipcard authenticated user'),
    'description' => 'Display the knowledge for a set of flipcards.',
    'weight' => 20,
  );

  // Reset the statistics for this set
  $items['flipcard/quiz/%/reset'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Lesson Statistics Reset',
    'page callback' => 'drupal_get_form',
    // Parameter 2 is taxonomy id
    'page arguments' => array('flipcard_reset_stats_form', 2),
    'access arguments' => array('flipcard admin'),
    'description' => 'Reset the statistics for a set of flipcards.',
    'weight' => 10
  );

  $items['flipcard/quiz/%/question'] = array(
    'title' => 'Lesson Quiz Question',
    'page callback' => 'drupal_get_form',
    // 2 = taxonomy id
    'page arguments' => array('flipcard_quiz_question', 2),
    'access arguments' => array('flipcard authenticated user'),
    'description' => 'Get a random flipcard from a taxonomy set.',
  );

  $items['flipcard/quiz/%/answer'] = array(
    'title' => 'Lesson Quiz Answer',
    'page callback' => 'drupal_get_form',
    // Parameter 2 is taxonomy id
    'page arguments' => array('flipcard_quiz_answer', 2),
    'access arguments' => array('flipcard authenticated user'),
    'description' => 'Get a random flipcard from a taxonomy set.',
  );

  $items['flipcard/quiz/%/end'] = array(
    'title' => 'End of quiz results',
    'page callback' => 'drupal_get_form',
    // Parameter 2 is taxonomy id
    'page arguments' => array('flipcard_end_quiz', 2),
    'access arguments' => array('flipcard authenticated user'),
    'description' => 'Study a set of flipcards.',
  );

  $items['flipcard/taxonomy_stats/%'] = array(
    'title' => 'Word Set Statistics',
    'page callback' => 'flipcard_taxonomy_stats',
    'page arguments' => array(2), // Parameter 2 is taxonomy id
    'access arguments' => array('flipcard anonymous user'),
  );

  $items['flipcard/vocab_table/%'] = array(
    'title' => 'Lesson Summary',
    'page callback' => 'flipcard_vocab_table',
    'page arguments' => array(2), // Parameter 2 is vid (vocab id)
    'access arguments' => array('flipcard anonymous user'),
  );

  $items['admin/config/flipcard'] = array(
    'title' => 'Flipcard Admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flipcard_prepare_nodes'),
    'access arguments' => array('flipcard admin'),
    'description' => 'Administer flipcard.',
    'file' => 'flipcard.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/flipcard'] = array(
    'title' => 'Flipcard Admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flipcard_admin'),
    'access arguments' => array('flipcard admin'),
    'description' => 'Administer flipcard.',
    'file' => 'flipcard.admin.inc',
  );
  
  $items['admin/config/system/flipcard/prepare_nodes'] = array(
    'title' => 'Flipcard Prepare Nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flipcard_prepare_nodes'),
    'access arguments' => array('flipcard admin'),
    'description' => 'Administer flipcard.',
    'file' => 'flipcard.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/flipcard/student_summary'] = array(
    'title' => 'Flipcard Student Summary',
    'page callback' => 'flipcard_student_summary',
    'access arguments' => array('flipcard admin'),
    'description' => 'Administer flipcard.',
    'file' => 'flipcard.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/flipcard_card_stats'] = array(
    'title' => 'Flipcard statistics',
    'page callback' => 'flipcard_card_stats',
    'page arguments' => array(1),  // %user
    'access arguments' => array('flipcard admin'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  $items['user/%user/flipcard_word_stats'] = array(
    'title' => 'Flipcard word statistics',
    'page callback' => 'flipcard_word_stats',
    'page arguments' => array(1),  // %user
    'access arguments' => array('flipcard admin'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 101,
  );

  return $items;
}

/**
 * Display the flipcard knowledge score for a particular lesson.
 */
function flipcard_knowledge_score($tid) {
  $score = 0;
  
  $path = current_path();
  $alias = drupal_get_path_alias($path);
  
  // Ensure that if the alias has not yet been set, that it is set now
  if ($path == $alias) {
    $source_base = 'flipcard/quiz/' . $tid;
  
    $lang_name = flipcard_lang_name();
    $term_name = flipcard_clean_name(flipcard_taxonomy_name($tid));
    $alias_base = 'online-lessons/' . $term_name;
  
    lingopolo_set_alias($source_base . '/knowledge-score', 
      $alias_base . '/knowledge-score');
  }

  $boxes = new Boxes($tid);
  $words = 0;
  for ($box_no = FLIPCARD_UNSTARTED_LEVEL + 1; $box_no <= FLIPCARD_TOP_LEVEL; $box_no++) {
    $box = $boxes->get_box($box_no);

    $knowledge[$box_no]['count'] = $box->count();
    $knowledge[$box_no]['score'] = $box->count() * $box_no;

    $score += $knowledge[$box_no]['score'];
    $words += $knowledge[$box_no]['count'];
  }
  $average_level = round($score / $words, 2);
  
  $html = "";
  $html .= '<b>Your current mastery of this lesson is:</b><br />';
  
  $mastered = $score / 10;
  $html .= '<p><span class="words-known">' . $mastered . '</span><span class="points">mastered words</span> = ';
  $html .= '<span class="words-known">' . $words . "</span> words ";
  $html .= 'x <span class="words-known">' . $average_level . "</span> average word level<br />";

  return $html;
}

/**
 * Display the flipcard statistics for a user
 */
function flipcard_card_stats($user) {
  $stats = "uid=" . $user->uid . "<br />";
  $stats .= "flipcard count=" . flipcard_get_flipcard_count($user->uid);

  return $stats;
}


/**
 * Callback for displaying a quiz answer.
 */
function flipcard_quiz_answer($form, &$form_state, $tid) {
  global $user;

  $nid = flipcard_get_question_nid($user->uid, $tid);

  $node = node_load($nid);

  $quiz_type = flipcard_get_quiz_type();
  $form = module_invoke_all('view_quiz_answer', $quiz_type, $node);
  
  $form['tid'] = array(
    '#type' => 'hidden',
    '#value' => $tid
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid
  );

  // Mark the fact that this is the answer being shown
  $form['flipcard_answer'] = array(
    '#type' => 'hidden',
    '#value' => TRUE
  );
 
  // 	$stats = flipcard_get_stats($user->uid, $nid);

  // 	if ($stats) {
  // 		$form['stats'] = array(
  // 				'#type' => 'fieldset',
  // 				'#title' => t('Statistics'),
  // 		);

  // 		$form['stats']['stats_shown'] = array(
  // 				'#type' => 'item',
  // 				'#weight' => 20,
  // 				'#title' => "Times shown: " . $stats->shown
  // 		);
  // 		$form['stats']['stats_correct'] = array(
  // 				'#type' => 'item',
  // 				'#weight' => 30,
  // 				'#title' => "Times correct: " . $stats->correct
  // 		);
  // 	}

  drupal_set_title(flipcard_taxonomy_name($tid) . " quiz answer");

  return $form;
}

/**
 * Add the "Mark this word as fully known (i.e. move it to level 10)" checkbox.
 *
 * It is the callers responsibility to make sure that this is not called when
 * the start level of the current question is 9 or 10.
 *
 * @param unknown_type $nid
 */
function flipcard_add_move_to_level_10_checkbox(&$form) {
  $form['move_to_level_10'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mark this word as fully known (i.e. move it to level 10).'),
    '#default_value' => 0,
    '#weight' => 2.7
  );
}

/**
 * Find which level a card is at
 */
function flipcard_get_card_level($nid) {
  $card = new Card($nid);
  $level = $card->box();

  return $level;
}

/**
 * Add the "I was right" and "I was wrong" buttons to the form.
 */
function flipcard_add_i_was_right_wrong_buttons(&$form) {
  // #weight 0 => title
  // #weight 1 => Thai
  // #weight 2 => Recording
  $form['button_right'] = array(
    '#type' => 'submit',
    '#value' => t('I was right!'),
    '#submit' => array('flipcard_right_submit'),
    '#weight' => 2.5
  );

  $form['button_wrong'] = array(
    '#type' => 'submit',
    '#value' => t('I was wrong!'),
    '#submit' => array('flipcard_wrong_submit'),
    '#weight' => 2.6
  );
}

/**
 * Get the current quiz type
 */
function flipcard_get_quiz_type() {
  global $user;

  $quiz_type = variable_get('user_' . $user->uid . "_quiz_type",
    QUIZ_THAI_TO_ENGLISH);

  return $quiz_type;
}


/**
 * Callback for displaying a quiz question
 */
function flipcard_quiz_question($form, &$form_state, $tid) {
  global $user;

  $nid = flipcard_get_question_nid($user->uid, $tid);

  $node = node_load($nid);

  $quiz_type = flipcard_get_quiz_type();
  $form = module_invoke_all("view_quiz_question", $quiz_type, $node, $tid);

  $card = new Card($nid);
  $shown = $card->shown();
  if ($shown == 0) {
    $recording_types = flipcard_get_recording_types($nid);
    $type_text = '';
    if (sizeof($recording_types) == 2) {
      $type_text = 'word/phrase';
      $known_text =
      flipcard_flipcards_known(FLIPCARD_WORDS_TID) . " " .
      flipcard_lang_name() . " word(s)" .
      ' and ' .
      flipcard_flipcards_known(FLIPCARD_PHRASES_TID) . " " .
      flipcard_lang_name() . " phrase(s).";
    }
    else {
      if ($recording_types[0] == FLIPCARD_PHRASES_TID) {
        $type_text .= 'phrase';
      }
      else {
        $type_text .= 'word';
      }
      $known_text = flipcard_flipcards_known($recording_types[0]) . " " .
        flipcard_lang_name() . " " . $type_text . "(s).";
    }

    $form['new_word_marker'] = array(
      '#type' => 'item',
      '#prefix' => '<div class="new-word">',
      '#description' => "<p class='congratulations'>Congratulations!  You are adding a NEW " .
        $type_text . " to those you know. " .
        "As this is the first time you have been asked this " .
        $type_text . ", you probably don't yet know the answer, but you soon will.</p>" .
        "<p>You now know (to some degree): " . $known_text,
      '#suffix' => '</div>',
      '#weight' => -50
    );
  }

  $form['hidden_nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid
  );
  $form['hidden_title'] = array(
    '#type' => 'hidden',
    '#value' => $node->title
  );
  $form['title'] = array(
    '#type' => 'item',
    '#value' => 'Title test'
  );

  // Mark the fact that this is the question being shown
  $form['flipcard_question'] = array(
    '#type' => 'hidden',
    '#value' => TRUE
  );
  $form['tid'] = array(
    '#type' => 'hidden',
    '#value' => $tid
  );

  $form['set_finished'] = array(
    '#type' => 'submit',
    '#value' => t('Exit quiz'),
    '#submit' => array('flipcard_exit_quiz'),
    '#weight' => 15
  );

  drupal_set_title(flipcard_taxonomy_name($tid) . " quiz question");

  return $form;
}

/**
 * Handle the user having selected "OK, studied" for a new word
 */
function flipcard_question_studied($form, $form_state) {
  global $user;

  // Move it to the back of the first box
  flipcard_record_answer_wrong($user->uid, $form_state['values']['nid']);

  // Ensure the word is not yet asked again
  variable_del('flipcard_shown_nid_' . $user->uid);
}

/**
 * Handler for "Show Answer" from the question page.
 */
function flipcard_quiz_question_submit($form, $form_state) {
  drupal_goto("flipcard/quiz/" . $form_state['values']['tid'] . "/answer");
}

/**
 * Display a table of a set of vocabulary items.
 *
 * $vid
 *   Taxonomy vid (vocabulary id), e.g. vid 3 => "Parts of speech" vocabulary
 */
function flipcard_vocab_table($vid) {
  $html = "";

  $rows = array();

  $header = array(
    'lesson' => array('data' => 'Lesson Title'),
    'cards' => array('data' => 'Items', 'class' => 'cards'),
    'knowledge' => array('data' => 'Knowledge (%)', 'class' => 'knowledge'));

  $sql = "SELECT tid, name FROM {taxonomy_term_data} WHERE vid = :vid ORDER by name";

  $result = db_query($sql, array(':vid' => $vid));

  foreach ($result as $row) {
    $stats = flipcard_get_set_stats($row->tid);

    $boxes_set = new Boxes($row->tid);
    $rows[] = array(
      'data' => array(
        'title' => array(
          'data' => "<a href='" . url('flipcard/quiz/' . $row->tid) . "'>" .
          $row->name . "</a>",$row->name,
        ),
        'cards' => array(
          'data' => "<a href='" . url('flipcard/quiz/' . $row->tid) . "'>" . $stats['cards']['#description'] . "</a>",
          'class' => 'cards'),
        'knowledge' => array(
          'data' => round($boxes_set->average_level() * 10, 1),
          'class' => 'knowledge'
        )
      )
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => false,
    'empty' => ''
  );

  $html .= theme_table($variables);

  return $html;
}

/**
 * Reset the stats for a given taxonomy id (for the current user).
 *
 * This function is for use with the anonymous id who has the statistics reset
 * every time the set is tried.
 */
function flipcard_reset_stats($tid) {
  $rows = array();

  $sql = "SELECT nid FROM {taxonomy_index} WHERE tid = :tid ORDER by nid";

  $result = db_query($sql, array(':tid' => $tid));

  foreach ($result as $row) {
    $card = new Card($row->nid);
    $card->reset_stats();
  }
}

/**
 * Display the taxonomy statistics.
 */
function flipcard_taxonomy_stats($tid) {
  $html = "";

  $rows = array();

  $sql = "SELECT nid FROM {taxonomy_index} WHERE tid = :tid ORDER by nid";

  $result = db_query($sql, array(':tid' => $tid));

  foreach ($result as $row) {
    $node = node_load($row->nid);
    $card = new Card($row->nid);

    $rows[] = array($node->title, $card->box());
  }

  $header = array('Title', 'Level');

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => false,
    'empty' => ''
  );

  $html .= "<button>" . l("Start set", 'flipcard/quiz/' . $tid) . "</button>";
  $html .= theme_table($variables);

  return $html;
}

/**
 * Get the language name
 */
function flipcard_lang_name() {
  $lang_name = variable_get('lingopolo_subsite_language');

  return $lang_name;
}

/**
 * Get the taxonomy name from a term id
 */
function flipcard_taxonomy_name($tid) {
  $name = "";

  $sql = "SELECT name FROM {taxonomy_term_data} WHERE tid = :tid";

  $result = db_query($sql, array(':tid' => $tid));

  foreach ($result as $row) {
    $name = $row->name;
  }

  return $name;
}

/**
 * Implements hook_node_view().
 */
function flipcard_node_view($node) {
  if ($node->type == 'media_page') {
    $card = new Card($node->nid);
    if ($card->box() == 0) {
      $level = "Not started";
    }
    else {
      $level = $card->box();
    }
    $node->content['level'] = array(
      '#type' => 'item',
      '#title' => 'Level',
      '#description' => $level,
      '#weight' => 100
    );
  }
}

/**
 * Implements hook_permission().
 */
function flipcard_permission() {
  return array(
    'flipcard anonymous user' => array(
      'title' => t('Flipcard basic activity'),
      'description' => t('This permission is for things which even anonymous users can do: e.g. viewing the flipcard statistics. It is safe to give everybody this permission - both anonymous and authenticated users.'),
    ),
    'flipcard authenticated user' => array(
      'title' => t('Flipcard tracked activity'),
      'description' => t('This permission is for things which require the user to be logged in, since results are recorded against the users userid.  This is basically doing a study set.  Only users with a userid (i.e. authenticated users) should be given this authority.'),
    ),
    'flipcard admin' => array(
      'title' => t('Flipcard admin'),
      'description' => t('Permission for admin of flipcard'),
    ),
  );
}

/**
 * Start a set of flipcards.
 *
 * $tid
 *   Taxonomy id
 */
function flipcard_start_quiz($form, &$form_state, $tid) {
  global $user;

  $path = current_path();
  $alias = drupal_get_path_alias($path);

  // Ensure that if the alias has not yet been set, that it is set now
  if ($path == $alias) {
    $source_base = 'flipcard/quiz/' . $tid;

    $lang_name = flipcard_lang_name();
    $term_name = flipcard_clean_name(flipcard_taxonomy_name($tid));
    $alias_base = 'online-lessons/' . $term_name;

    lingopolo_set_online_lessons_aliases($source_base, $alias_base);
  }

  // Ensure no left-over messages are shown
  drupal_get_messages();

  flipcard_clean_set_start();

  $form = array();

  $quiz_options = module_invoke_all('quiz_option');

  $options = array();
  foreach ($quiz_options as $quiz_option) {
    $options[$quiz_option['key']] = $quiz_option['prompt'];
  }
  ksort($options);

  // Use the first key as the default option
  reset($options);
  $first_key = key($options);

  $form['quiz_type'] = array(
    '#type' => 'radios',
    '#title' => t('Quiz type'),
    '#options' => $options,
    '#default_value' => $first_key,
  );

  $form['ok'] = array(
    '#type' => 'submit',
    '#value' => t('Begin Quiz'),
  );

  $form['exit_lesson'] = array(
    '#type' => 'submit',
    '#value' => t('Exit lesson'),
    '#validate' => array('flipcard_exit_lesson'),
  );

  $form = array_merge_recursive(flipcard_get_set_stats($tid), $form);

  variable_set('flipcard_start_level_' . $user->uid, flipcard_get_average_level($tid));
  variable_set('flipcard_knowledge_score_' . $user->uid, flipcard_get_knowledge_score($tid));
  variable_set('flipcard_right_tally_' . $user->uid, 0);

  flipcard_set_lesson_title($tid);

  return $form;
}

/**
 * Clean the taxonomy name of things like spaces.
 */
function flipcard_clean_name($name) {
  $clean_name = $name;

  $clean_name = strtolower($clean_name);

  $clean_name = str_replace(array('"', "'", '?', '(', ')', '.', ','), '', $clean_name);

  $clean_name = str_replace(' ', '-', $clean_name);
  $clean_name = str_replace('---', '-', $clean_name);

  return $clean_name;
}

/**
 * Exit lesson
 */
function flipcard_exit_lesson() {
  // Ensure all message now cleared
  drupal_get_messages();

  // This is the page of "Online Thai Quizzes"
  drupal_goto("node/1172");
}

/**
 * Form to reset the statistics for a given quiz
 */
function flipcard_reset_stats_form($form, &$form_state, $tid) {
  global $user;

  $form = array();

  $form['tid'] = array(
    '#type' => 'hidden',
    '#value' => $tid);

  $form['instructions'] = array(
    '#type' => 'item',
    '#description' => 'Click the button below to reset this lessons statistics for this user:',
  );

  $form['ok'] = array(
    '#type' => 'submit',
    '#value' => t('Reset Stats'),
  );

  return $form;
}

/**
 * Process the submit of the form requesting the reset of flipcard statistics.
 */
function flipcard_reset_stats_form_submit($form, &$form_state) {
  flipcard_reset_stats($form_state['values']['tid']);

  drupal_set_message("Statistics have been reset");
}


/**
 * Set the lesson title
 */
function flipcard_set_lesson_title($tid) {
  $taxonomy_name = flipcard_taxonomy_name($tid);
  $lang_name = flipcard_lang_name();
  drupal_set_title($taxonomy_name . ' ' . $lang_name . ' lesson');
}

/**
 * Get the average level for a particular taxonomy id.
 */
function flipcard_get_average_level($tid) {
  $average_level = 0;
  
  $boxes = new Boxes($tid);
  
  $average_level = round($boxes->average_level() * 10, 1);
  
  return $average_level;
}

/**
 * Get the opening/closing stats for a set
 *
 * $tid
 *   Taxonomy id
 */
function flipcard_get_set_stats($tid) {
  $boxes = new Boxes($tid);

  $total = $boxes->cards_count();

  $form['cards'] = array(
    '#type' => 'item',
    '#title' => 'Number of words in this lesson:',
    '#description' => l($total, "flipcard/quiz/$tid/words")
  );

  $form['words_summary'] = array(
    '#type' => 'item',
    '#title' => 'Lesson words:',
    '#markup' => views_embed_view('lesson_words_summary', 'page', $tid)
  );

  if (user_is_anonymous()) {
    $description = '0 ';
  }
  else {
    $description = l(flipcard_get_knowledge_score($tid) / 10 . " mastered words",
      "flipcard/quiz/$tid/knowledge-score");
  }
  $form['knowledge_score'] = array(
    '#type' => 'item',
    '#title' => 'Your current mastery of this lesson:',
    '#description' => $description,
  );

  $form['average_level'] = array(
    '#type' => 'item',
    '#title' => 'Your current completion of this lesson:',
    '#description' => round($boxes->average_level() * 10, 1) . '%'
  );

  $form['tid'] = array(
    '#type' => 'hidden',
    '#value' => $tid
  );

  $level_info = flipcard_get_level_info($tid);

  $form['lesson_progress'] = array(
    '#type' => 'item',
    '#title' => 'Lesson progress:',
    '#description' => implode($level_info)
  );

  return $form;
}

/**
 * Get the level info information.
 */
function flipcard_get_level_info($tid) {
	$boxes = new Boxes($tid);
	
	$total = $boxes->cards_count();
	
	$started = 0;
	$first_started_level = FLIPCARD_UNSTARTED_LEVEL;
	for ($box_no=FLIPCARD_UNSTARTED_LEVEL; $box_no <= FLIPCARD_TOP_LEVEL; $box_no++) {
		if ($box_no == FLIPCARD_UNSTARTED_LEVEL) {
			$text = "Unstarted words: ";
		}
		else {
			$text = 'Level ' . $box_no . " words: ";
		}
		$cards = $boxes->get_box($box_no)->count();
		if ($cards > 0 && $box_no != FLIPCARD_UNSTARTED_LEVEL) {
			$link = l($text . $cards,
					"flipcard/quiz/$tid/progress/level-" . $box_no);
			$first_started_level = $box_no;
		}
		else {
			$link = $text . $cards;
		}
		$level_info[] = $link . "<br />";
		if ($box_no != FLIPCARD_UNSTARTED_LEVEL) {
			$started += $cards;
		}
	}
	
	$unstarted = $total - $started;
	
	array_unshift($level_info, "<br />");
	array_unshift($level_info, l('Total words: ' . $total,
	"flipcard/quiz/$tid/words") . "<br />");
	
	array_unshift($level_info, 'Started words: ' . $started . "<br />");
	
	array_unshift($level_info, 'Unstarted words: ' . $unstarted . "<br />");
	
	return $level_info;
}

/**
 * Compute the knowledge score
 */
function flipcard_get_knowledge_score($tid) {
  $score = 0;

  $boxes = new Boxes($tid);
  for ($box_no = FLIPCARD_UNSTARTED_LEVEL + 1; $box_no <= FLIPCARD_TOP_LEVEL; $box_no++) {
    $box = $boxes->get_box($box_no);

    $score += $box->count() * $box_no;
  }

  return $score;
}

/**
 * Process the user clicking on the "Begin Quiz" button.
 */
function flipcard_start_quiz_submit($form, &$form_state) {
  global $user;

  // Give modules chance to override the default behaviour
  module_invoke_all("quiz_start");

  if ($user->uid == 0) {
    // Non-logged in users go to the login page
    drupal_goto("user");
  }
  else {
    variable_set('user_' . $user->uid . "_quiz_type",
    $form_state['values']['quiz_type']);

    $quiz_log = new QuizLog();
    $quizid = $quiz_log->start($form_state['values']['tid'],
      $form_state['values']['quiz_type']);
    variable_set('user_' . $user->uid . "_quizid", $quizid);

    // Logged in users go to the quiz question page
    drupal_goto('flipcard/quiz/' . $form_state['values']['tid'] . '/question');
  }
}

/**
 * Count how many flipcards are known at all
 */
function flipcard_flipcards_known($recording_type) {
  global $user;

  $sql = "SELECT count(nid) AS known
    FROM {flipcard_cards}, {field_data_field_recording_type}
    WHERE nid = {field_data_field_recording_type}.entity_id
    AND box > :min_box_level
    AND uid = :uid
    AND field_recording_type_tid = :recording_type";

  $result = db_query($sql, array(':uid' => $user->uid,
    ':min_box_level' => FLIPCARD_UNSTARTED_LEVEL + 1,
    ':recording_type' => $recording_type));

  $known = $result->fetchField();

  return $known;
}

/**
 * Get the recording type of a particular node
 */
function flipcard_get_recording_types($nid) {
  $recording_types = array();

  $sql = "SELECT field_recording_type_tid AS recording_type
    FROM {field_data_field_recording_type}
    WHERE entity_id = :nid ";

  $result = db_query($sql, array(':nid' => $nid));

  while ($recording_type = $result->fetchField()) {
    $recording_types[] = $recording_type;
  }

  return $recording_types;
}

/**
 * Get stats for a particular taxonomy_id.
 */
function flipcard_cards_tid($tid) {
  $count = 0;

  $sql = "SELECT COUNT(*) FROM {node}, {taxonomy_index}
    WHERE {node}.nid = {taxonomy_index}.nid
    AND type = 'thai_word'
    AND {taxonomy_index}.tid = :tid";
  $result = db_query($sql, array(
    ':tid' => $tid));
  if ($result) {
    $count = $result->fetchField();
  }

  return $count;
}

/**
 * Page callback for when the word was wrong.
 */
function flipcard_wrong_submit($form, &$form_state) {
  global $user;

  $values = $form_state['values'];

  flipcard_answer_wrong_display_level_change($user->uid, $values['nid']);
  flipcard_end_question_branch($values['tid']);
}

/**
 * Display the change in levels based on a wrong answer.
 */
function flipcard_answer_wrong_display_level_change($uid, $nid) {
  $card = new Card($nid);
  $start_box = $card->box();

  flipcard_record_answer_wrong($uid, $nid);

  $first_level = FLIPCARD_UNSTARTED_LEVEL + 1;
//   if ($start_box == $first_level) {
//     drupal_set_message("The word '". $card->title() . "' stays as level " . 
//       $first_level, 'error');
//   }
//   else {
//     drupal_set_message("The word '". $card->title() . "' has been reset from level " .
//       $start_box . " to level " . $first_level . ".", 'error');
//   }
  
  $end_box = $first_level;

  flipcard_save_result($uid, $nid, $card->title(), FALSE, $start_box, $end_box);
}

/**
 * Page callback for when the user clicked "I was right".
 */
function flipcard_right_submit($form, &$form_state) {
  global $user;

  $values = $form_state['values'];
  flipcard_answer_right_display_level_change($user->uid, $values['nid'],
  $values['move_to_level_10']);

  flipcard_end_question_branch($values['tid']);
}

/**
 * Handle going to next question or ending quiz based on number of Qs asked.
 */
function flipcard_end_question_branch($tid) {
  global $user;

  // When the question is complete we can remove the variable to say which one
  // it was. The rules for picking the next question
  // nid should ensure this nid is not chosen again directly afterwards.
  variable_del('flipcard_shown_nid_' . $user->uid);

  if (variable_get('flipcard_word_no_' . $user->uid, 0) >= variable_get('flipcard_words_per_quiz')) {
    drupal_goto('flipcard/quiz/' . $tid . '/end');
  }
  else {
    drupal_goto('flipcard/quiz/' . $tid . '/question');
  }
}


/**
 * Record the fact that the flipcard was answered correctly.
 */
function flipcard_answer_right_display_level_change($uid, $nid, $move_to_top_level=FALSE) {
  $card = new Card($nid);
  $start_box = $card->box();

  flipcard_record_answer_right($uid, $nid);

  if ($move_to_top_level) {
    flipcard_move_to_top_level($uid, $nid);
  }

  $card = new Card($nid);
  $end_box = $card->box();

//   if ($start_box == $end_box && $end_box == FLIPCARD_TOP_LEVEL) {
//     drupal_set_message("Fantastic!  Your knowledge of '" . $card->title() .
//     "' has stayed at the top level " . $end_box . ".");
//   }
//   else {
//     $start_level = "Level " . $start_box;
//     drupal_set_message("Great!  Your knowledge of '" . $card->title() .
//       "' has gone from " . $start_level .
//       " to Level " . $card->box() . ".");
//   }

  variable_set('flipcard_right_tally_' . $uid,
  variable_get('flipcard_right_tally_' . $uid, 0) + 1);

  flipcard_save_result($uid, $nid, $card->title(), TRUE, $start_box, $end_box);
}

/**
 * Save information about the question result.
 */
function flipcard_save_result($uid, $nid, $title, $correct, $start_box, $end_box) {
  $log = variable_get('flipcard_quiz_log_' . $uid, array());
  $log[] = array(
    'nid' => $nid,
    'title' => $title,
    'correct' => $correct,
    'start_box' => $start_box,
    'end_box' => $end_box
  );
  variable_set('flipcard_quiz_log_' . $uid, $log);

  $quizid = variable_get('user_' . $uid . "_quizid", 0);
  $number = count($log);
  $quiz_log = new QuizLog($quizid);
  $quiz_log->log_question($number, $nid, $correct, $start_box, $end_box);
}

/**
 * Page callback for another word
 */
function flipcard_another_word() {
  global $user;

  variable_del('flipcard_shown_nid_' . $user->uid);
}

/**
 * Prepare a list of words for a given lesson
 */
function flipcard_words($form, &$form_state, $tid) {
  global $user;

  $form = array();

  $form['words'] = array(
    '#type' => 'item',
    '#markup' => views_embed_view('lesson_words', 'page', $tid)
  );

  flipcard_set_lesson_title($tid);

  return $form;
}

/**
 * Prepare a list of words for a given level.
 */
function flipcard_levels($tid, $level_text) {
  global $user;

  $form = array();

  $level = str_replace("level-", "", $level_text);

  flipcard_set_lesson_title($tid);

  $form['words'] = array(
    '#type' => 'item',
    '#markup' => views_embed_view('level_n_words', 'level-' . $level,
      $user->uid, $tid)
  );

  return $form;
}

/**
 * Get the node id for the current quiz question.
 */
function flipcard_get_question_nid($uid, $tid) {
  // See if we need a new question or not
  if (variable_get('flipcard_shown_nid_' . $uid, 0) == 0) {
    // This is a new question/nid
    $boxes = new Boxes($tid);
    $nid = $boxes->get_next_card()->nid();
    
    $pre_reqs = flipcard_check_prereqs($nid);
    
    variable_set('flipcard_shown_nid_' . $uid, $nid);

    // Prepare the "Question 3 of 10..." message
    flipcard_display_question_x_of_n($uid);
  }
  else {
    // We are already in the middle of a question.  Return that nid.
    $nid = variable_get('flipcard_shown_nid_' . $uid);
  }

  return $nid;
}

/**
 * Check whether there are any prerequisiste nodes.
 * 
 * A prerequisite node is part of the breakdown of a word/phrase, and which has
 * a current level less than the given word/phrase. For example, if the phrase
 * is "Man bites dog" and this phrase is at level 2, all the words in
 * the breakdown (i.e. "man", "bites", "dog") should have a level which is at
 * least level 3, so that the level of phrase never gets ahead of the level of
 * the component words.
 * 
 * @param integer $nid
 * 	 Node id of the word/phrase to check.
 * @return array
 * 	 Returns an array of nodes which need to be studied before we can progress
 *   on the given node. 
 */
function flipcard_check_prereqs($nid) {
	$node = entity_load('node', array($nid));
	$node_level = flipcard_get_card_level($nid);
	$breakdown_nids = lingopolo_get_breakdown_nids($nid);
}

/**
 * Display the "Question 3 of 10..." message.
 */
function flipcard_display_question_x_of_n($uid) {
  $word_no = variable_get('flipcard_word_no_' . $uid, 0);
  $word_no++;
  variable_set('flipcard_word_no_' . $uid, $word_no);
  drupal_set_message("Question " . $word_no . " of " . variable_get('flipcard_words_per_quiz') . "...");
}

/**
 * Display the results at the end of a quiz.
 */
function flipcard_end_quiz($form, &$form_state, $tid) {
  $form = array();

  $form = flipcard_get_set_stats($tid);

  $questions_answered = flipcard_questions_answered();

  global $user;
  
  drupal_set_message("You have now completed this quiz. You got " .
    variable_get("flipcard_right_tally_" . $user->uid) .
    " out of " . $questions_answered . " correct.");

//   drupal_set_message("Your " . 
//     l("knowledge score for this lesson", "flipcard/quiz/$tid/knowledge-score") . 
//     " has gone from " .
//     variable_get('flipcard_knowledge_score_' . $user->uid) .
//     " to " . flipcard_get_knowledge_score($tid) . ".");
    
//   drupal_set_message("Your completion of this lesson has gone from " .
//     variable_get('flipcard_start_level_' . $user->uid) .
//     "% to " . flipcard_get_average_level($tid) . "%.");

  $form['end_quiz_table'] = array(
    '#type' => 'item',
    '#title' => '',
    '#markup' => flipcard_get_end_quiz_table(),
    '#weight' => -10,
  );
  $form['ok'] = array(
    '#type' => 'submit',
    '#value' => t('OK'),
  );

  drupal_set_title(flipcard_taxonomy_name($tid) . " quiz results");

  return $form;
}

/**
 * Find out how many questions were answered in the current quiz.
 */
function flipcard_questions_answered() {
  $answered = 0;

  global $user;
  $uid = $user->uid;
  $quizid = variable_get('user_' . $uid . "_quizid", 0);
  $quiz_log = new QuizLog($quizid);

  $answered = $quiz_log->questionsAnswered();

  return $answered;
}

/**
 * End quiz, by going back to the start page for this lesson.
 */
function flipcard_end_quiz_validate($form, &$form_state) {
  global $user;

  flipcard_clean_set_start();

  $set_stats = flipcard_get_set_stats($form['tid']['#value']);

  variable_set('flipcard_start_level_' . $user->uid,
    flipcard_get_average_level($form['tid']['#value']));
  variable_set('flipcard_knowledge_score_' . $user->uid,
    flipcard_get_knowledge_score($form['tid']['#value']));
  variable_set('flipcard_right_tally_' . $user->uid, 0);

  // Clear the drupal_set_message() queue
  drupal_get_messages();

  drupal_goto("/flipcard/quiz/" . $form['tid']['#value']);
}

/**
 * This gets a table of how well each word was answered in the last set.
 */
function flipcard_get_end_quiz_table() {
  global $user;

  $html = "";

  $rows = array();

  $header = array(
    'question' => array('data' => 'Question'),
    'title' => array('data' => 'Word or phrase'),
    'correct' => array('data' => 'Correct?'),
//    'start_box' => array('data' => 'Start Level', 'class' => 'cards'),
//    'end_box' => array('data' => 'End Level', 'class' => 'knowledge')
  );

  //   $result = variable_get('flipcard_quiz_log_' . $user->uid, array());
  $uid = $user->uid;
  $quizid = variable_get('user_' . $uid . "_quizid", 0);
  $quiz_log = new QuizLog($quizid);
  $result = $quiz_log->getResults();

  foreach ($result as $row_no => $row) {
    if ($row['correct'] == 1) {
      $correct = "yes";
    }
    else {
      $correct = "no";
    }
    if ($row['start_level'] == FLIPCARD_UNSTARTED_LEVEL) {
      $row['start_level'] = 'Unstarted';
    }
    if ($row['end_level'] == FLIPCARD_UNSTARTED_LEVEL) {
      $row['end_level'] = 'Unstarted';
    }

    $node = node_load($row['nid']);
    $rows[] = array(
      'data' => array(
        'question' => array(
          'data' => $row_no + 1
        ),
        'title' => array(
          'data' => "<a href='" . url('node/' . $row['nid']) . "'>" . $node->title . "</a>",
        ),
        'correct' => array(
          'data' => $correct
        ),
//         'start_box' => array(
//           'data' => $row['start_level'],
//           'class' => 'start_box_col'
//         ),
//         'end_box' => array(
//           'data' => $row['end_level'],
//           'class' => 'end_box_col'
//         )
      ),
      'class' => array("correct_" . $correct)
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => false,
    'empty' => ''
  );

  $html .= theme_table($variables);

  return $html;
}


/**
 * Perform initialisation of a set before starting.
 */
function flipcard_clean_set_start() {
  global $user;

  // Ensure we are not forced to show the previous flashcard
  variable_del('flipcard_shown_nid_' . $user->uid);
  variable_del('flipcard_word_no_' . $user->uid);
  variable_del('flipcard_quiz_log_' . $user->uid);
}

/**
 * Process user clicking OK at end of a quiz
 */
// function flipcard_end_quiz_submit() {
//   // Ensure all message now cleared
//   drupal_get_messages();

//   // This is the page of "Online Thai Quizzes"
//   drupal_goto("node/1172");
// }

/**
 * Handles submit button 'Exit quiz'.
 *
 * Exit from a quiz
 */
function flipcard_exit_quiz($form, $form_state) {
  drupal_goto("flipcard/quiz/" . $form['tid']['#value'] . '/end');
}

/**
 * Get a random node id (nid).
 *
 * @return
 *   A node id (nid)
 */
function flipcard_random_nid() {
  global $user;

  $sql = "SELECT nid from {flipcard_cards} ";

  // Try to never give the same nid twice in a row
  $last_nid = variable_get('flipcard_current_nid_' . $user->uid, 0);
  if ($last_nid <> 0) {
    $sql .= "WHERE nid <> " . $last_nid;
  }
  $sql .= " ORDER BY box ASC, RAND() ";

  $result = db_query_range($sql, 0, 1);

  $record = $result->fetchAssoc();

  variable_set('flipcard_current_nid_' . $user->uid, $record['nid']);

  return $record['nid'];
}

/**
 * Get a random node id (nid) from a particular taxonomy set
 *
 * @return
 *   A node id (nid)
 */
function flipcard_current_nid_in_set($tid) {
  global $user;

  $sql = "SELECT stats.nid FROM {flipcard_cards} AS stats, {taxonomy_index} AS taxonomy ";

  // Try to never give the same nid twice in a row
  $last_nid = variable_get('flipcard_current_nid_' . $user->uid, 0);
  if ($last_nid <> 0) {
    $sql .= "WHERE stats.nid <> " . $last_nid . " ";
    $sql .= "AND taxonomy.tid = " . $tid . " ";
    $sql .= "AND stats.nid = taxonomy.nid ";
  }
  $sql .= " ORDER BY box ASC, RAND() ";

  $result = db_query_range($sql, 0, 1);

  $record = $result->fetchAssoc();

  variable_set('flipcard_current_nid_' . $user->uid, $record['nid']);

  return $record['nid'];
}

/**
 * Move the flipcard directly to level 10.
 */
function flipcard_move_to_top_level($uid, $nid) {
  $card = new Card($nid, $uid);

  $card->setBox(10);
  $card->save();

  $quizid = variable_get('user_' . $uid . "_quizid", 0);
  $quiz_log = new QuizLog($quizid);
  $quiz_log->set_current_question_to_level_10();

  drupal_set_message("'" . $card->title() .
  "' has been marked as fully known: moved to Level 10.");
}

/**
 * Record the fact that the flipcard was answered correctly.
 */
function flipcard_record_answer_right($uid, $nid) {
  $card = new Card($nid, $uid);

  $card->setShown($card->shown() + 1);
  $card->setCorrect($card->correct() + 1);
  $card->setBox($card->box() + 1);
  $card->save();
}

/**
 * Record the fact that the flipcard was answered incorrectly.
 */
function flipcard_record_answer_wrong($uid, $nid) {
  $card = new Card($nid, $uid);

  $card->setShown($card->shown() + 1);
  $card->setBox(FLIPCARD_UNSTARTED_LEVEL + 1);
  $card->save();
}


/**
 * Implements hook_pathauto().
 */
function flipcard_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'flipcard';
      $settings['token_type'] = 'term';
      $settings['groupheader'] = t('Flipcard paths');
      $settings['patterndescr'] = t('Pattern for flipcard quiz pages');
      $settings['patterndefault'] = '[term:vocabulary]/[term:name]';
      $settings['batch_update_callback'] = 'flipcard_pathauto_bulk_update_batch_process';
      //       $settings['batch_file'] = drupal_get_path('module', 'pathauto') . '/pathauto.pathauto.inc';
      return (object) $settings;
    default:
      break;
  }
}

/**
 * Batch processing callback; Generate aliases for flipcard.
 */
function flipcard_pathauto_bulk_update_batch_process(&$context) {
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }

  // Flipcard quizzes use the taxonomy term id
  $query = db_select('taxonomy_term_data', 'td');
  $query->leftJoin('url_alias', 'ua', "CONCAT('taxonomy/term/', td.tid) = ua.source");
  $query->addField('td', 'tid');
  $query->isNull('ua.source');
  $query->condition('td.tid', $context['sandbox']['current'], '>');
  // Exclude the forums terms.
  if ($forum_vid = variable_get('forum_nav_vocabulary', '')) {
    $query->condition('td.vid', $forum_vid, '<>');
  }
  $query->orderBy('td.tid');
  $query->addTag('pathauto_bulk_update');
  $query->addMetaData('entity', 'taxonomy_term');

  // Get the total amount of items to process.
  if (!isset($context['sandbox']['total'])) {
    $context['sandbox']['total'] = $query->countQuery()->execute()->fetchField();

    // If there are no nodes to update, the stop immediately.
    if (!$context['sandbox']['total']) {
      $context['finished'] = 1;
      return;
    }
  }

  $query->range(0, 25);
  $tids = $query->execute()->fetchCol();

  flipcard_term_update_alias_multiple($tids, 'bulkupdate');
  $context['sandbox']['count'] += count($tids);
  $context['sandbox']['current'] = max($tids);
  $context['message'] = t('Updated alias for term @tid.', array('@tid' => end($tids)));

  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}


/**
 * Update the URL aliases for multiple taxonomy terms.
 *
 * @param $tids
 *   An array of term IDs.
 * @param $op
 *   Operation being performed on the nodes ('insert', 'update' or
 *   'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function flipcard_term_update_alias_multiple(array $tids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $terms = taxonomy_term_load_multiple($tids);
  foreach ($terms as $term) {
    flipcard_term_update_alias($term, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($tids), 'Updated URL alias for 1 term.', 'Updated URL aliases for @count terms.'));
  }
}

/**
 * Update the URL aliases for an individual flipcard quiz.
 *
 * @param $term
 *   A taxonomy term object.
 * @param $op
 *   Operation being performed on the term ('insert', 'update' or 'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function flipcard_term_update_alias(stdClass $term, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the term.
  if (isset($term->path['pathauto']) && empty($term->path['pathauto'])) {
    return;
  }

  $module = 'flipcard';

  // Check that the term has its bundle, which is the vocabulary's machine name.
  if (!isset($term->vocabulary_machine_name)) {
    $vocabulary = taxonomy_vocabulary_load($term->vid);
    $term->vocabulary_machine_name = $vocabulary->machine_name;
  }

  $options += array(
    'alias children' => FALSE,
    'language' => pathauto_entity_language('taxonomy_term', $term),
  );

  // Skip processing if the term has no pattern.
  if (!pathauto_pattern_load_by_entity($module, $term->vocabulary_machine_name)) {
    return;
  }

  module_load_include('inc', 'pathauto');
  //   $uri = entity_uri('taxonomy_term', $term);
  $source = 'flipcard/quiz/' . $term->tid;
  pathauto_create_alias($module, $op, $source, array('term' => $term),
  $term->vocabulary_machine_name, $options['language']);
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function flipcard_block_view($delta = '') {
  $block = array();

  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'flipcard_cards_block':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Flipcard statistics');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = flipcard_student_summary();
      break;
  }
  return $block;
}

/**
 * Display a page of the number of words known.
 */
function flipcard_word_stats($user) {
  $boxes = new Boxes(FLIPCARD_WORDS_TID, $user->uid);
  $content = "Number of words started: " . $boxes->cards_started();

  return $content;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function flipcard_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  $blocks['flipcard_cards_block'] = array(
    'info' => t('Flipcard student stats'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function flipcard_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  $form = array();
  if ($delta == 'flipcard_cards_block') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['flipcard_example_string'] = array(
      '#type' => 'textfield',
      '#title' => t('Block contents'),
      '#size' => 60,
      '#description' => t('This text is for the flipcard block.'),
      '#default_value' => variable_get('block_example_string',  t('Some example content.')),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function flipcard_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'flipcard_cards_block') {
    // Have Drupal save the string to the database.
    variable_set('flipcard_example_string', $edit['block_example_string']);
  }
  return;
}

/**
 * Get the foreign translation from a node.
 */
function flipcard_get_translation($node) {
  $translation = "";
  if (isset($node->field_thai['und'][0]['value'])){
    $translation = $node->field_thai['und'][0]['value'];
  }
  return ($translation);
}

/**
 * Set the Thai for a node.
 */
function flipcard_set_translation($node, $translation) {
  $node->field_thai['und'][0]['value'] = $translation;
}

