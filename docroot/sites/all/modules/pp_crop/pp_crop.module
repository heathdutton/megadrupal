<?php

/**
 * Implements hook_permission().
 */
function pp_crop_permission() {
  return array(
    'administer crop styles' =>  array(
      'title' => t('Administer image crop styles for wysiwyg.'),
      'description' => t('Set styles that will be used for image croping with wysiwyg.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pp_crop_menu() {
  $items = array();

  $items['admin/config/media/pp_crop'] = array(
    'title' => 'PP Crop',
    'description' => 'Set styles that will be used for image croping with wysiwyg.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pp_crop_wysiwyg_settings_form'),
    'access arguments' => array('administer crop styles'),
  );

  $items['js/pp_crop/manage_thumbnails/%/%'] = array(
    'title' => 'AJAX callback to load thumbnails preview',
    'page arguments' => array(3, 4),
    'page callback' => 'pp_crop_ajax_manage_thumbnails',
    'access arguments' => array('administer crop styles'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Form callback for image cropping feature in wysiwyg.
 */
function pp_crop_wysiwyg_settings_form($form, &$form_state) {
  $style_options = array();
  foreach (_epsacrop_load_styles() as $key => $style) {
    $style_label = $style['name'] . ' <small>' . '(' . _pp_crop_get_imagestyle_size($style) . ')' . '</small>';
    $style_options[$key] = $style_label;
  }

  $form['pp_crop_wysiwyg_settings'] = array(
    '#type' => 'checkboxes',
    '#title' => t('WYSIWYG cropping settings'),
    '#description' => t('Set styles that will be used for image croping with wysiwyg.'),
    '#options' => $style_options,
    '#default_value' => variable_get('pp_crop_wysiwyg_settings', array()),
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'pp_crop_wysiwyg_settings_form_clear_caches';

  return $form;
}

/**
 * Clear caches so File displays will be updated.
 */
function pp_crop_wysiwyg_settings_form_clear_caches() {
  drupal_flush_all_caches();
}

/**
 * Implements hook_entity_info_alter().
 */
function pp_crop_entity_info_alter(&$entity_info) {
  $wysiwyg_styles = variable_get('pp_crop_wysiwyg_settings', array());
  foreach (_epsacrop_load_styles() as $image_style) {
    if (!in_array($image_style['name'], $wysiwyg_styles)) {
      continue;
    }
    $entity_info['file']['view modes']['crop_' . $image_style['name']] = array(
      'label' => t('Crop ' . $image_style['name']),
      'custom settings' => TRUE,
    );
  }
}

/**
 * Implements hook_element_info_alter.
 *
 * Adds link to manage thumbnails for media asset widget form element.
 */
function pp_crop_element_info_alter(&$type) {
  $type['managed_file']['#process'][] = 'pp_crop_element_process';
  $type['media']['#process'][] = 'pp_crop_element_process';
}


/**
 * Helper function that add a link in image widget field to open a dialog with
 * images thumbnails.
 */
function pp_crop_element_process($element, $form_state, $form) {
  if (!isset($element['#field_name']) && !isset($element['#pp_crop_styles']) || !_epsacrop_access()) {
    return $element;
  }

  // Unset epsacrop element.
  // Instead of epsacrop element will be used "Manage thumbnails" element.
  if (isset($element['epsacrop'])) {
    unset($element['epsacrop']);
  }

  _epsacrop_include_header_html();
  // If styles defined in element use them.
  if (isset($element['#pp_crop_styles'])) {
    $styles = array('styles' => $element['#pp_crop_styles']);
    $hash = md5(serialize($element['#pp_crop_styles']));
    cache_set('pp_crop:' . $hash, $element['#pp_crop_styles']);
    $element['#field_name'] = 'pp_crop:' . $hash;
    $element['#entity_type'] = '_pp_crop';
    $element['#bundle'] = '_pp_crop';
  }
  else {
    $styles = _epsacrop_load_styles_by_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  }

  if (count($styles) == 0) {
    return $element;
  }

  $theme_variables = array(
    'entity_type' => $element['#entity_type'],
    'field_name' => $element['#field_name'],
    'bundle' => $element['#bundle'],
    'styles' => $styles['styles'],
  );

  drupal_add_library('system', 'ui.dialog');
  drupal_add_js(drupal_get_path('module', 'pp_crop') . '/js/pp_crop_field.js');

  $element['manage_thumbnails'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="theme-variables" data-theme-variables="' . urlencode(json_encode($theme_variables)) . '"></div>'
      . '<div class="manage-thumbnails-popup"></div>',
  );

  return $element;
}


/**
 * Implements hook_media_wysiwyg_format_form_prepare_alter().
 *
 * Alter media image selection view_mode form. Add cropping button.
 *
 * @param $form
 * @param $form_state
 * @param $file
 */
function pp_crop_media_wysiwyg_format_form_prepare_alter(&$form, $form_state, $file) {
  if ($file->type != 'image') {
    return;
  }

  $options = array();
  $styles = variable_get('pp_crop_wysiwyg_settings', array());
  $thumbnail_options = pp_crop_get_images_thumbnails($form, $file);

  foreach ($thumbnail_options as $image_preset => $image_element) {
    $preset = substr($image_preset, 5);
    if (!isset($styles[$preset])) {
      continue;
    }
    if ($styles[$preset] != '0') {
      $options[$image_preset] = $image_element;
    }
  }

  $form['options']['thumbnails'] = array(
    '#type' => 'radios',
    '#title' => t('Thumbnail'),
    '#options' => $options,
  );

  _epsacrop_include_header_html();
  $form['#attached']['js'][] = drupal_get_path('module', 'pp_crop') . '/js/pp_crop.js';

  $file_info = image_get_info($file->uri);
  $markup = "<a href=\"javascript:Drupal.EPSACrop.dialog('all', '"
    . 'all' . "', '"
    . 'all' . "', '"
    . $file->fid . "', '"
    . image_style_url('epsacrop_thumb', $file->uri) . "', ["
    . $file_info['width']  . ","
    . $file_info['height']  . "]);\">" . t("manage image crops") . "</a><br><br>";

  $form['crop'] = array(
    '#type' => 'markup',
    '#markup' => $markup
  );
}

/**
 * Implements hook_media_token_to_markup_alter().
 *
 * Needed to display thumbnails properly in WYSIWYG on inserting.
 */
function pp_crop_media_token_to_markup_alter(&$element, $tag_info, &$settings) {
  if (strpos($tag_info['view_mode'], 'crop_') === FALSE) {
    return;
  }
  $image_style = substr($tag_info['view_mode'], strlen('crop_'));

  // In WYSIWYG and during viewing node $element has different structure so in
  // order proper thumbnail displayed we need to check the structure.
  if (isset($element['content']['file'])) {
    $element_alter = &$element['content']['file'];
  }
  else {
    $element_alter = &$element;
  }

  $element_alter['#theme'] = 'image_style';
  $element_alter['#style_name'] = $image_style;
  $element_alter['#path'] = $element_alter['#file']->uri;
}

/**
 * Implements hook_theme().
 */
function pp_crop_theme() {
  return array(
    'images_thumbnails_list' => array(
      'variables' => array(
        'thumbnail_options' => array(),
        'file' => NULL,
        'entity_type' => 'all',
        'field_name' => 'all',
        'bundle' => 'all',
        'styles' => array(),
      )
    )
  );
}

function theme_images_thumbnails_list($variables) {
  if (empty($variables['thumbnail_options']) || $variables['file'] == NULL) {
    return;
  }

  $file = file_load($variables['file']);
  $file_info = image_get_info($file->uri);

  $manage_crop_link = "<span class=\"manage-link-wrapper\"></br><a class=\"button manage-crop-link\" href=\"javascript:Drupal.PPCrop.dialog("
    . "'" . $variables['entity_type'] . "',"
    . "'" . $variables['field_name'] . "' ,"
    . "'" . $variables['bundle'] . "' , '"
    . $file->fid . "', '"
    . image_style_url('epsacrop_thumb', $file->uri) . "', ["
    . $file_info['width'] . ","
    . $file_info['height'] . "]);\">" . t("Change thumbnails") . "</a> <a class=\"button dialog-close\" href=\"#\"> " . t('Close preview') . " </a></br></br></span>";

  $thumbnail_options = $variables['thumbnail_options'];

  // Create a table with thumbnails.
  $rows = array();
  foreach ($thumbnail_options as $image_preset => $image_element) {
    $rows[] = array(
      array('data' => $image_preset),
      array('data' => $image_element)
    );
  }
  $header = array(t('Image preset'), t('Image thumbnail'));
  $images_table = theme('table', array('header' => $header, 'rows' => $rows));

  return '<div id="view-thumbnails-' . $file->fid . '-block" title="Manage image thumbnails">' . $manage_crop_link . $images_table . $manage_crop_link . '</div>';
}


/**
 * Implements hook_file_displays_alter().
 *
 * Set the image style preset for file display. This is needed for displaying
 * thumbnails properly in WYSIWYG on inserting the image.
 */
function pp_crop_file_displays_alter(&$displays, $file, $view_mode) {
  if (strpos($view_mode, 'crop_') === FALSE || $file->type != 'image') {
    return;
  }
  $image_style = substr($view_mode, strlen('crop_'));
  $displays['file_field_image']['settings']['image_style'] = $image_style;
  $displays['file_field_image']['weight'] = -1;
}

/**
 * Returns an array with crop image style as key and image html element as value.
 */
function pp_crop_get_images_thumbnails(&$form, $file) {
  if (!$file) {
    return;
  }

  $thumbnail_options = array();
  // Add default so it will be unset.
  $view_mode_settings = field_view_mode_settings('file', $file->type) + array('default' => 'default');
  foreach ($view_mode_settings as $view_mode_name => $view_mode_info) {
    if (strpos($view_mode_name, 'crop_') === 0) {
      $image_style_name = substr($view_mode_name, strlen('crop_'));
      $style = image_style_load($image_style_name);
      $rendered_image = theme('image_style', array(
        'style_name' => $image_style_name,
        'path' => $file->uri,
        'title' => _pp_crop_get_imagestyle_size($style),
        'attributes' => array('class' => 'pp-crop-thumbnail'),
      ));
      $thumbnail_options[$view_mode_name] = $rendered_image;
      continue;
    }
    if (isset($form['options']['format']['#options'][$view_mode_name])) {
      unset($form['options']['format']['#options'][$view_mode_name]);
    }
  }
  return $thumbnail_options;
}

/**
 * AJAX callback to load thumbnails
 *
 * @param $settings
 */
function pp_crop_ajax_manage_thumbnails($settings, $fid) {
  $settings = urldecode($settings);
  $theme_variables = json_decode($settings, TRUE);

  $file = file_load($fid);

  $styles = $theme_variables['styles'];
  foreach ($styles as $image_style) {
    $thumbnail_options[$image_style] = theme('image_style', array('style_name' => $image_style, 'path' => $file->uri, 'attributes' => array('class' => 'pp-crop-thumbnail')));
  }

  $theme_variables += array(
    'thumbnail_options' => $thumbnail_options,
    'file' => $file->fid,
  );

  $images_thumbnails = theme('images_thumbnails_list', $theme_variables);

  print $images_thumbnails;
  ajax_footer();
  exit();
}

/**
 * Implements hook_epsacrop_load_styes_alter().
 *
 * If we are loading 'all' styles for cropping dialog this means we are using it in WYSIWYG.
 * So lets limit styles to styles that are in the settings of pp_crop module.
 */
function pp_crop_epsacrop_load_styles_alter(&$styles, $entity_name, $field_name, $bundle) {
  if ($entity_name == 'all' && $field_name == 'all' && $bundle == 'all') {
    $wysiwyg_styles = variable_get('pp_crop_wysiwyg_settings', array());
    $styles['styles'] = array_filter($wysiwyg_styles);
  }
  elseif (substr($field_name, 0, 7) == 'pp_crop' && $entity_name == '_pp_crop' && $bundle == '_pp_crop') {
    $cache = cache_get('pp_crop:' . substr($field_name, 8));
    $styles['styles'] = $cache->data;
  }
}

/**
 * Implements hook_js_alter().
 */
function pp_crop_js_alter(&$js) {
  $wysiwyg_media = drupal_get_path('module', 'media_wysiwyg'). '/js/wysiwyg-media.js';
  if (isset($js[$wysiwyg_media])) {
    $pp_crop_wysiwyg = drupal_get_path('module', 'pp_crop'). '/js/pp_crop-wysiwyg-media.js';
    $js[$pp_crop_wysiwyg] = array_merge($js[$wysiwyg_media], array('data' => $pp_crop_wysiwyg, 'weight' => 0.9));
  }
}

function _pp_crop_get_imagestyle_size($style) {
  // Set width and height to auto by default.
  $sizes = array('width' => 'auto', 'height' => 'auto');
  foreach ($style['effects'] as $single_effect) {
    if (isset($single_effect['data']['width']) || isset($single_effect['data']['height'])) {
      $sizes = $single_effect['data'];
    }
  }
  // Get width and height of last image style effect.
  $style_width = isset($sizes['width']) ? $sizes['width'] : 'auto';
  $style_height = isset($sizes['height']) ? $sizes['height'] : 'auto';
  // Add image style sizes to label.
  return $style_width . 'x' . $style_height;
}
