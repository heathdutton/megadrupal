<?php

/**
 * @file
 * This file implements the main functions to have Ubercart Module with Webpay
 * as Gateway.
 *
 * This module implements most functions that are defined on the main module.
 * For more information:
 * @see webpay.module
 */


/**
 * Implements hook_form_alter().
 */
function uc_webpay_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form') {
    $order_id = intval($_SESSION['cart_order']);
    $order = uc_order_load($order_id);

    if ($order->payment_method == 'webpay') {
      unset($form['actions']['submit']);
      $values = array(
        'amount' => $order->order_total,
        'currency' => variable_get('uc_currency_code', 'USD'),
        'order_number' => $order->order_id,
        'session' => $order->uid,
        'commerce' => 'webpay_ubercart',
      );
      $params = webpay_get_params($values);
      $curr_code = variable_get('uc_currency_code', 'USD');
      $msg = t('Go to Webpay');
      $uc_webpay_form = drupal_get_form('webpay_redirect_form', $params, $msg, $curr_code);

      $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
      $form['#suffix'] = '</td><td>' . drupal_render($uc_webpay_form) . '</td></tr></table>';
    }
  }
}


/**
 * Implements hook_uc_payment_method().
 */
function uc_webpay_uc_payment_method() {
  $methods = array();
  $path_webpay = base_path() . drupal_get_path('module', 'webpay');
  $path = drupal_get_path('module', 'commerce_webpay');
  drupal_add_css($path . '/css/uc_webpay.css');
  $title = theme('image', array(
    'path' => $path_webpay . '/images/logo.png',
    'alt' => t('Webpay logo'),
    'attributes' => array(
      'class' => array('uc-webpay-logo'),
    ),
  ));

  if (user_access('webpay user') || user_access('webpay administer')) {
    $methods['webpay'] = array(
      'name' => t('WebPay'),
      'title' => $title,
      'desc' => t('Redirect to Webpay to pay.'),
      'callback' => 'uc_webpay_uc_payment_method_webpay',
      'weight' => 3,
      'checkout' => TRUE,
      'no_gateway' => TRUE,
    );
  }

  return $methods;
}


/**
 * Adds settings to the payment method settings form.
 *
 * Depending on the operation it can attach the voucher to the order view or
 * attach transaction's information to the order.
 */
function uc_webpay_uc_payment_method_webpay($op, &$order) {
  if ($op == 'settings') {
    $params = array('!here' => l(t('here'), 'admin/config/webpay/configure'));
    $form['help'] = array(
      '#markup' => t('To settings Webpay, go !here', $params),
    );

    return $form;
  }
  elseif ($op == 'order-view' || $op == 'customer-view') {
    $output = '';
    $build = array();
    if (!empty($order->webpay_info)) {
      $voucher = webpay_prepare_for_voucher(array(
        'order_id' => $order->order_id,
        'webpay_transaction' => $order->webpay_info,
        'client_name' => $order->billing_first_name . ' ' . $order->billing_last_name,
        'products' => theme('uc_webpay_products', array('order' => $order)),
      ));
      $output .= theme('webpay_voucher', $voucher);
    }
    $build['#markup'] = $output;

    return $build;
  }
  elseif ($op == 'order-load') {
    if ($order->payment_method == 'webpay') {
      $order->webpay_info = webpay_get_transaction_by_order($order->order_id, 'webpay_ubercart');
    }
  }
}


/**
 * Implements hook_webpay_commerce_system().
 */
function uc_webpay_webpay_commerce_system() {
  $currency = variable_get('uc_currency_code', 'USD');
  $webpay_settings = webpay_get_settings_kcc();

  $option_translate = array('!currency' => $currency);
  $msg = t('You can use webpay as gateway for Ubercart with !currency', $option_translate);
  $description = '<div class="messages status">' . $msg . '</div>';

  if (!isset($webpay_settings[$currency])) {
    $msg = t('The system does not support !currency', $option_translate);
    $description = '<div class="messages error">' . $msg . '</div>';
  }
  elseif ($webpay_settings[$currency]['webpay_ROOT_CGI'] == '') {
    $msg = t('You must configure Ubercart for !currency', $option_translate);
    $description = '<div class="messages warning">' . $msg . '</div>';
  }

  $info = array();
  $info['webpay_ubercart'] = array(
    'title'          => 'Ubercart',
    'description'    => $description,
    'success'        => 'uc_webpay_success',
    'failure'        => 'uc_webpay_failure',
    'close validate' => 'uc_webpay_validate_close',
    'order load'     => 'uc_webpay_order_load',
    /*'save transaction' => 'uc_webpay_save_transaction',*/
    'accept transaction' => 'uc_webpay_accept_transaction',
  );

  return $info;
}


/**
 * Implements hook_theme().
 */
function uc_webpay_theme() {
  return array(
    'uc_webpay_products' => array(
      'variables' => array('order' => NULL),
    ),
  );
}


/**
 * Theme function for a product. Used to generate the invoice on success page.
 *
 * @return string
 *   themed product
 */
function theme_uc_webpay_products($variables) {
  $order = $variables['order'];
  $rows = array();
  foreach ($order->products as $product) {
    $rows[] = array(
      $product->qty . ' x ',
      uc_webpay_products_details($product),
    );
  }

  $output = theme('table', array('rows' => $rows));

  return $output;
}


/**
 * Theme helper for product details.
 *
 * Adds attributes to the product display, if they exist.
 *
 * @param mixed $product
 *   product object from ubercart
 *
 * @return string
 *   themed product detail table
 */
function uc_webpay_products_details($product) {
  $output = $product->title;
  $output .= ' - '. theme('uc_price', array('price' => $product->price));

  $attr_extra = TRUE;
  /* there is extra data in the product*/
  $attr_extra = $attr_extra && isset($product->data['attributes']);

  /* the extra data must be an array */
  if ($attr_extra) {
    $attr_extra = $attr_extra && is_array($product->data['attributes']);
  }
  else {
    $attr_extra = FALSE;
  }

  // The array must have elements.
  if ($attr_extra) {
    $attr_extra = $attr_extra && !empty($product->data['attributes']);
  }
  else {
    $attr_extra = FALSE;
  }

  if ($attr_extra) {
    $items = array();
    foreach ($product->data['attributes'] as $attribute => $option) {
      $items[] = t('@attribute: @options', array(
        '@attribute' => $attribute,
        '@options'   => implode(', ', (array) $option)));
    }
    $output .= theme('item_list', array('items' => $items));
  }

  return $output;
}


/**
 * Callback for success case.
 *
 * @param int $order_id
 *   the id of the order in the commerce
 *
 * @return string
 *   a themed page of success
 */
function uc_webpay_success($order_id) {
  if (is_null($order_id)) {
    drupal_goto('cart');
  }

  $order = uc_order_load($order_id);
  if (intval($_SESSION['cart_order']) != $order->order_id) {
    drupal_set_message(t('Thank you for your order!'));
    drupal_goto('cart');
  }

  if ($order->payment_method != 'webpay') {
    drupal_goto('cart');
  }
  $new_customer = variable_get('uc_new_customer_login', FALSE);
  $output = drupal_render(uc_cart_complete_sale($order, $new_customer));

  $voucher = webpay_prepare_for_voucher(array(
    'order_id' => $order->order_id,
    'webpay_transaction' => $order->webpay_info,
    'client_name' => $order->billing_first_name . ' ' . $order->billing_last_name,
    'products' => theme('uc_webpay_products', array('order' => $order)),
  ));
  $output .= theme('webpay_voucher', $voucher);

  $url = url('user/' . $order->uid . '/orders/' . $order->order_id . '/invoice/print');
  drupal_add_js("function open_invoice() { window.open('$url', '". t('Invoice') .
  "', 'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,".
  "width=600,height=480,left=50,top=50'); }", 'inline');

  $contents = '<a href="#" onclick="open_invoice();">';
  $contents .= uc_store_get_icon('file:print') . ' ';
  $contents .= t('Click to open a window with a printable invoice.') . '</a>';
  $output .= '<div class="order-pane">' . $contents . '</div>';

  return $output;
}


/**
 * Callback for failure case.
 *
 * @param int $order_id
 *   the id of the order in the commerce
 *
 * @param mixed $transaction
 *   this parameter is unused here, but it is mandatory for Webpay module since
 *   other commerce module might use it.
 *
 * @return string
 *   a themed page of failure
 */
function uc_webpay_failure($order_id, $transaction) {
  $output = '';

  $params = array(
    'order_id' => $order_id,
    'redirection' => 'cart',
    'title_redirection' => t('Back to my shopping cart'),
  );
  $output .= theme('webpay_failure', $params);
  uc_order_update_status($order_id, 'canceled');

  return $output;
}


/**
 * Callback for order load.
 */
function uc_webpay_order_load(&$order) {
  $uc_order = uc_order_load($order['order_id']);

  $order['order_total'] = $uc_order->order_total;
  $order['status'] = $uc_order->order_status;
}


/**
 * Callback for close validate.
 */
function uc_webpay_validate_close($order) {
  if ($order['status'] != 'in_checkout') {
    return FALSE;
  }
  return TRUE;
}


/**
 * Callback for accept transaction.
 */
function uc_webpay_accept_transaction($order) {
  uc_order_update_status($order['order_id'], 'completed');
  uc_order_comment_save($order['order_id'], 0, t('Transaction completed'), 'admin');
}
