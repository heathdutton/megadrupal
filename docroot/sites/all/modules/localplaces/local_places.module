<?php
/**
 * @file
 * A pagemodule that displays listings from Google Places.
 */

/**
 * Loads Help Contents.
 */
function local_places_help($path, $arg) {
  switch ($path) {
    case 'admin/help#local-places':
      return '<p>' . t('Displays local places, using the Google Places API.') . '</p><p>' . t('You must get a Google Places API Key before attempting to use this module. It will not work without one. Once you have a Google Places API Key, please enter it in the configuration form, before attempting to view any local places. After completeing the configuration form, please browse to [YOURSITE}/local-places/.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function local_places_permission() {
  return array(
    'access local_places content' => array(
      'title' => t('Access content for the Local Places module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function local_places_menu() {
  // Module settings.
  $items['admin/config/content/local-places'] = array(
    'title' => 'Local Places Settings',
    'description' => 'Configuration for the Local Places module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('local_places_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'local_places.admin.inc',
    'file path' => drupal_get_path('module', 'local_places'),
  );
  $items['local-places'] = array(
    'title' => check_plain(variable_get('local_places_title', 'Local Places')),
    'page callback' => '_local_places_page',
    'access arguments' => array('access local_places content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['local-places/details'] = array(
    'title' => 'Details',
    'page callback' => '_local_places_details',
    'access arguments' => array('access local_places content'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function local_places_theme($existing, $type, $theme, $path) {
  return array(
    'local_places_details' => array(
      'template' => 'details',
      'type' => 'theme',
      'variables' => array(
        'name' => NULL,
        'type' => NULL,
        'lat' => NULL,
        'lon' => NULL,
        'mapurl' => NULL,
        'mapimg' => NULL,
        'icon' => NULL,
        'address' => NULL,
        'tel' => NULL,
        'website' => NULL,
        'googleurl' => NULL,
        'reviews' => array(NULL),
      ),
    ),
    'local_places_maplist' => array(
      'template' => 'maplist',
      'type' => 'theme',
      'variables' => array(
        'description' => NULL,
        'mapimg' => NULL,
        'nexturl' => NULL,
        'results' => array(array(
          'letter' => NULL,
          'name' => NULL,
          'type' => NULL,
          'icon' => NULL,
          'address' => NULL,
          'detailsurl' => NULL,
          'rating' => NULL,
          ),
        ),
      ),
    ),
  );
}

/**
 * Custom page callback function, for Home/Results pages.
 */
function _local_places_page() {
  if ($local_places_contents = local_places_contents()) {
    $page_array['local_places_arguments'] = array(
      '#title' => t('Local Places'),
      '#markup' => theme('local_places_maplist', local_places_contents()),
    );
  }
  else {
    // No places found.
    $page_array['local_places_arguments'] = array(
      '#title' => t('Local Places'),
      '#markup' => t('Sorry, no results found'),
    );
  }
  return $page_array;
}

/**
 * Custom page callback function, See local_places_menu(). FOR DETAILS PAGE.
 */
function _local_places_details() {
  if ($local_places_details = local_places_content_details()) {
    drupal_set_title(check_plain($_GET['name'] . ' | ' . variable_get('local_places_title', 'Local Places')));
    $page_array['local_places_arguments'] = array(
      '#title' => t('Local Place Details'),
      '#markup' => theme('local_places_details', local_places_content_details()),
    );
  }
  else {
    // No place found.
    $page_array['local_places_arguments'] = array(
      // Title serves as page subtitle.
      '#title' => t('Local Place Details'),
      '#markup' => t('Sorry, invalid place. Please go back and try again.'),
    );
  }
  return $page_array;
}

/**
 * Get Contents for the home/results page to load.
 */
function local_places_contents() {
  $vars = array();
  $vars['description'] = check_plain(variable_get('local_places_desc', ''));
  // Loads the results xml file.
  $xml = simplexml_load_file(local_places_xmlfile('list'));
  if ($xml->status == 'OK') {
    $location = variable_get('local_places_location', '51.5073,0.1276');
    // Get current URL without the query string, for next page results.
    $currenturl = explode('?', request_uri());
    $currenturl = $currenturl[0];
    // If the last character of the url is not '/' add a '/' to it.
    if (substr($currenturl, -1) !== '/') {
      $currenturl = $currenturl . '/';
    }
    $mapbaseurl = variable_get('local_places_mapurl', 'http://maps.googleapis.com/maps/api/staticmap?type=roadmap&sensor=false') . '&size=' . variable_get('local_places_lmapsize', '600x600') . '&zoom=' . variable_get('local_places_lmapzoom', 15) . '&center=' . $location;
    $markers = '&markers=color:red%7C' . $location;
    $i = 'A';
    $vars['results'] = array();
    $vars['results'][$i] = array();
    foreach ($xml->children() as $child) {
      // Loops through every child that has a name field (the results nodes).
      if (isset($child->name)) {
        $vars['results'][$i]['letter'] = $i;
        $name = $child->name;
        $vars['results'][$i]['name'] = $name;
        $ref = $child->reference;
        // Get place type from icon name.
        $icon = $child->icon;
        $vars['results'][$i]['icon'] = $icon;
        $rstring = 'http://maps.gstatic.com/mapfiles/place_api/icons/';
        $type = str_replace($rstring, '', $icon);
        $type = str_replace('-71.png', '', $type);
        $type = ucfirst($type);
        $vars['results'][$i]['type'] = $type;
        $lat = $child->geometry->location->lat;
        $lon = $child->geometry->location->lng;
        $vars['results'][$i]['detailsurl'] = $currenturl . 'details?name=' . $name . '&reference=' . $ref . '&type=' . $type . '&lat=' . $lat . '&lon=' . $lon;
        $vars['results'][$i]['address'] = $child->vicinity;
        if (isset($child->rating)) {
          $vars['results'][$i]['rating'] = $child->rating;
        }
        $markers = $markers . '&markers=color:blue%7Clabel:' . $i . '%7C' . $lat . ',' . $lon;
        $i++;
      }
      else {
        // If it is not a result, if it is the next token, get next link.
        if ($child->getName() === 'next_page_token') {
          $vars['nexturl'] = $currenturl . '?pagetoken=' . $child;
        }
      }
    }
    $vars['mapimg'] = $mapbaseurl . $markers;
    return $vars;
  }
  return FALSE;
}

/**
 * Gets Place Details contents for details page.
 */
function local_places_content_details() {
  // Loads the details xml file.
  $xml = simplexml_load_file(local_places_xmlfile('detail'));
  if ($xml->status == 'OK') {
    $mapbaseurl = variable_get('local_places_mapurl', 'http://maps.googleapis.com/maps/api/staticmap?type=roadmap&sensor=false') . '&size=' . variable_get('local_places_smapsize', '300x200') . '&zoom=' . variable_get('local_places_smapzoom', 16);
    $fullmapurl = 'https://maps.google.com/maps?hl=en&&q=';
    $name = $_GET['name'];
    $type = $_GET['type'];
    $lat = $_GET['lat'];
    $lon = $_GET['lon'];
    $fullmapurl = $fullmapurl . $lat . ',' . $lon;
    $fullmapurl = check_plain($fullmapurl);
    $markers = '&markers=color:red%7C' . variable_get('local_places_location', '51.5073,0.1276') . '&markers=color:blue%7C' . $lat . ',' . $lon . '&center=' . $lat . ',' . $lon;
    $mapimage = check_plain($mapbaseurl . $markers);
    $vars = array();
    $vars['name'] = $name;
    $vars['type'] = $type;
    $vars['lat'] = $lat;
    $vars['lon'] = $lon;
    $vars['mapurl'] = $fullmapurl;
    $vars['mapimg'] = $mapimage;
    foreach ($xml->children() as $child) {
      if (isset($child->name)) {
        $vars['icon'] = $child->icon;
        $vars['address'] = $child->formatted_address;
        if (isset($child->formatted_phone_number)) {
          $vars['tel'] = $child->formatted_phone_number;
        }
        if (isset($child->website)) {
          $vars['website'] = $child->website;
        }
        $vars['googleurl'] = $child->url;
        if (isset($child->review)) {
          $vars['reviews'] = array();
          $i = 1;
          foreach ($child->children() as $granchild) {
            if ($granchild->getName() === 'review') {
              if ($i <= 5 && $granchild->text !== '') {
                $vars['reviews'][$i] = array();
                if ($granchild->author_url != '') {
                  $vars['reviews'][$i]['author'] = '<a href="' . $granchild->author_url . '" target="_blank" title="Author\'s Google Plus Page (new window)">' . $granchild->author_name . '</a>';
                }
                else {
                  $vars['reviews'][$i]['author'] = $granchild->author_name;
                }
                $vars['reviews'][$i]['text'] = $granchild->text;
                $i++;
              }
            }
          }
        }
      }
    }
    return $vars;
  }
  return FALSE;
}

/**
 * Build URL for Google Places XML File.
 */
function local_places_xmlfile($display) {
  $baseurl = variable_get('local_places_url', 'https://maps.googleapis.com/maps/api/place/nearbysearch/xml?sensor=false');
  $api_key = variable_get('local_places_key', 'Enter your API Key');
  $location = variable_get('local_places_location', '51.5073,0.1276');
  $radius = variable_get('local_places_radius', 50000);
  $types = variable_get('local_places_types', 'cafe|restaurant');
  $xmlurl = $baseurl . '&key=' . $api_key . '&location=' . $location . '&radius=' . $radius . '&types=' . $types;
  // Gets the page token from the query string if on results page 2 or 3.
  if (isset($_GET['pagetoken'])) {
    $xmlurl = $xmlurl . '&pagetoken=' . $_GET['pagetoken'];
  }
  if ($display === 'detail') {
    $baseurl = 'https://maps.googleapis.com/maps/api/place/details/xml?sensor=false';
    $xmlurl = $baseurl . '&key=' . $api_key . '&reference=' . $_GET['reference'];
  }
  return $xmlurl;
}
