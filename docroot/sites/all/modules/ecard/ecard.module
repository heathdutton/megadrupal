<?php

/**
 * @file
 * Main module file for the ecard module.
 */
module_load_include('inc', 'ecard', '/includes/ecard.entity');
module_load_include('inc', 'ecard', '/includes/ecard.field');
module_load_include('inc', 'ecard', '/includes/ecard.mail');
module_load_include('inc', 'ecard', '/includes/ecard.token');
module_load_include('inc', 'ecard', '/includes/ecard.theme');

// Defining constants for binary operations.
define('ECARD_NO_HASH_SET', 1);
define('ECARD_HASH_SET', 2);
define('ECARD_ECARD_FIELD', 4);
define('ECARD_IMAGE_FIELD', 8);

/**
 * Implements hook_admin_paths().
 */
function ecard_admin_paths() {
  return array(
    'ecard/resend/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function ecard_permission() {
  $perms = array(
    'create ecard' => array(
      'title' => t('Create ecards'),
      'description' => t('Create ecards by using the ecard field.'),
      'restrict access' => TRUE,
    ),
    'view ecard' => array(
      'title' => t('View ecards'),
      'description' => t('View the value of a created ecard.'),
      'restrict access' => TRUE,
    ),
    'administer ecard' => array(
      'title' => t('Administer ecards'),
      'description' => t('Create, view, edit and delete ecards.'),
      'restrict access' => TRUE,
    ),
  );

  return $perms;
}

/**
 * Implements hook_menu().
 */
function ecard_menu() {
  $items = array();

  $items['ecard'] = array(
    'title' => 'View your ecard!',
    'description' => 'View your ecard',
    'page callback' => 'ecard_view',
    'access callback' => 'ecard_access',
  );

  $items['ecard/resend/%'] = array(
    'title' => 'Resend an ecard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecard_resend_form', 2),
    'access arguments' => array('administer ecard'),
  );

  return $items;
}

/**
 * Menu access callback for /ecard.
 */
function ecard_access() {

  // Check we have a valid hash.
  if (empty($_GET['ecard']) || !ecard_check_hash(array('hash' => $_GET['ecard']))) {
    return FALSE;
  }

  $hash = $_GET['ecard'];

  // Find all matching ecards.
  $ecards = ecard_read(array($hash));

  // Can only render one, so use the first.
  $ecard = array_shift($ecards);

  // Initialize some variables we'll need.
  $entities = entity_load($ecard->entity_type, array($ecard->entity_id));
  $entity = array_shift($entities);

  // Check access.
  return entity_access('view', $ecard->entity_type, $entity);
}

/**
 * Menu callback to view ecard at /ecard.
 */
function ecard_view() {
  global $language;

  // We already know the hash is valid from ecard_access().
  $hash = $_GET['ecard'];

  // Find all matching ecards.
  $ecards = ecard_read(array($hash));

  // Can only render one, so use the first.
  $ecard = array_shift($ecards);

  // Initialize some variables we'll need.
  $entities = entity_load($ecard->entity_type, array($ecard->entity_id));
  return entity_view($ecard->entity_type, $entities, 'ecard');
}

/**
 * Menu callback to resend an ecard at /ecard/resend/%
 */
function ecard_resend_form($form, $form_state, $hash) {
  $form['hash'] = array(
    '#type' => 'value',
    '#value' => $hash,
  );

  $ecard = db_query("SELECT mail_to FROM {ecard} WHERE hash = :hash", array(':hash' => $hash))->fetchObject();
  $form['mail_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Resend the ecard to'),
    '#default_value' => $ecard->mail_to,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Resend'),
  );

  return $form;
}

/**
 * Validation handler for resending ecards.
 */
function ecard_resend_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail_to'])) {
    form_set_error('mail_to', t('Please enter a valid email address.'));
  }

  $ecard = db_query("SELECT * FROM {ecard} WHERE hash = :hash", array(':hash' => $form_state['values']['hash']))->fetchObject();
  if (empty($ecard)) {
    form_set_error('hash', t('No matching ecard found.'));
  }
}


/**
 * Submit handler for resending ecards.
 */
function ecard_resend_form_submit($form, &$form_state) {
  $ecards = ecard_read($form_state['values']['hash']);
  if (!empty($ecards)) {
    foreach ($ecards as $ecard) {
      // Configure some useful variables used when sending the ecard.
      $ecard_entity = entity_load($ecard->entity_type, array($ecard->entity_id));
      $entity = array_shift($ecard_entity);
      $entity_uri = entity_uri($ecard->entity_type, $entity);
      $field = field_info_instance($ecard->entity_type, $ecard->field_name, $ecard->bundle);
      $ecard->mail = $field['settings'];
      $ecard->base_path = $entity_uri['path'];
      if ($field['settings']['ecard_settings']['ecard_base_path'] == 'ecard') {
        $ecard->base_path = 'ecard';
      }
      $ecard->ecard_url = url($ecard->base_path, array(
        'query' => array('ecard' => $ecard->hash),
        'absolute' => TRUE
      ));
      $ecard->ecard_copy_url = url($ecard->base_path, array(
        'query' => array(
          'ecard' => $ecard->hash,
          'preview' => 1
        ),
        'absolute' => TRUE
      ));
      $ecard->site_name = variable_get('site_name', 'Default site name');
      ecard_mail_send_ecard($ecard);
      drupal_set_message(t('Ecard resent to %recipient', array('%recipient' => $ecard->mail_to)));
    }
  }

  $form_state['redirect'] = 'admin/reports/ecards';
}

/**
 * Implements hook_entity_info_alter().
 */
function ecard_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $type => $settings) {
    $entity_info[$type]['view modes']['ecard'] = array(
      'label' => t('Ecard'),
      'custom settings' => TRUE,
    );
  }
}

/**
 * Implements hook_cron().
 */
function ecard_cron() {
  $hashes = db_select('ecard', 'e')
    ->fields('e', array('hash'))
    ->condition('e.sent', 0)
    ->condition('e.scheduled_time', 0, '<>')
    ->condition('e.scheduled_time', REQUEST_TIME, '<')
    ->orderBy('e.scheduled_time', 'ASC')
    ->orderBy('e.created', 'ASC')
    ->range(0, 50) // @todo - make this configurable?
    ->execute()
    ->fetchCol();
  if (empty($hashes)) {
    return;
  }

  $ecards = ecard_read($hashes);
  if (!empty($ecards)) {
    $queue = DrupalQueue::get('ecard_scheduled_mails');
    foreach ($ecards as $ecard) {
      // Configure some useful variables used when sending the ecard.
      $ecard_entity = entity_load($ecard->entity_type, array($ecard->entity_id));
      $entity = array_shift($ecard_entity);
      $entity_uri = entity_uri($ecard->entity_type, $entity);
      $field = field_info_instance($ecard->entity_type, $ecard->field_name, $ecard->bundle);
      $ecard->mail = $field['settings'];
      $ecard->entity_path = $entity_uri['entity_path'];
      $ecard->base_path = $entity_uri['path'];
      if ($field['settings']['ecard_settings']['ecard_base_path'] == 'ecard') {
        $ecard->base_path = 'ecard';
      }
      $ecard->ecard_url = url($ecard->base_path, array(
        'query' => array('ecard' => $ecard->hash),
        'absolute' => TRUE
      ));
      $ecard->ecard_copy_url = url($ecard->base_path, array(
        'query' => array(
          'ecard' => $ecard->hash,
          'preview' => 1
        ),
        'absolute' => TRUE
      ));
      $ecard->site_name = variable_get('site_name', 'Default site name');

      // Queue the ecard for sending.
      $queue->createItem($ecard);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function ecard_cron_queue_info() {
  $queues['ecard_scheduled_mails'] = array(
    'worker callback' => 'ecard_mail_send_ecard',
  );
  return $queues;
}

/**
 * Implements views_api().
 */
function ecard_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ecard') . '/views',
  );
}

/**
 * Default text for the ecard letter.
 */
function _ecard_letter() {
  $output = t("Hi [ecard:name_to],

[ecard:name_from] made an ecard for you.
At any time you may see your card by clicking this link:

[ecard:ecard_url]

(if your email client doesn't allow you to click on the site link,
then just copy and paste the URL into your browser)

admin");
  return $output;
}

/**
 * Default text for the ecard copy notice letter.
 */
function _ecard_copy() {
  $output = t("Hi [ecard:name_from],
Here is the copy of your message you sent to [ecard:name_to]

[ecard:ecard_copy_url]

(if your email client doesn't allow you to click on the site link,
then just copy and paste the URL into your browser)

admin");
  return $output;
}

/**
 * Default text for the ecard pickup notification.
 */
function _ecard_notice() {
  $output = t("Hi,

[ecard:name_to] has picked up your e-card today.
Here is the url to your e-card
[ecard:ecard_url]

(if your email client doesn't allow you to click on the site link,
then just copy and paste the URL into your browser)

admin");
  return $output;
}

/**
 * Implements hook_mollom_form_list().
 */
function ecard_mollom_form_list() {
  $forms['ecard_form_create_ecard'] = array(
    'title' => t('E-Card creation form'),
  );
  return $forms;
}

/**
 * Helper function to clean sender and receiver name.
 */
function ecard_clean_name($name) {
  $name = check_plain($name);
  $name = str_replace(array(',', '<', '>'), '', $name);
  return $name;
}