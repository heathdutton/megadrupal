<?php
// $Id: offers_wants.module,v 1.9 2010/10/02 15:54:27 matslats Exp $

function offers_wants_import_menu() {
  $items['admin/content/im_offers'] = array(
    'title' => 'Import offers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_propositions_form', '0'),
    'access arguments' => array('administer nodes'),
    'file' => 'offers_wants.install',
    'type' => MENU_LOCAL_ACTION,
    'weight' => 4,
  );
  $items['admin/content/im_wants'] = array(
    'title' => 'Import wants',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_propositions_form', '1'),
    'access arguments' => array('administer nodes'),
    'file' => 'offers_wants.install',
    'type' => MENU_LOCAL_ACTION,
    'weight' => 5,
  );
  return $items;
}

function offers_wants_import_help($path, $args) {
  if ($args[2] == 'im_offers') $wants = 0;
  elseif ($args[2] == 'im_wants') $wants = 1;
  else return;
  return t("This page allows you to import users' @type for users already on the system.", array('@type' => $wants ? t('Wants') : t('Offers'))) .
    t("There are various methods for importing nodes but this is designed to be simple simple.") .
    //t("If you have 'goods & services' enabled or 'local vs offical' money then it assumes this is a service in local money.") . '<br />' .
    t("Use a spreadsheet program (or views) to prepare a table with of some or all of the following headings:").'<br />' .
    '"uid" OR "mail", "title", "categories", "body", "created", "changed", "status", "expires"<br />' .
    t("Open the csv file using a text editor and copy-paste below.") . '<br />' .
    t("Try importing one or two first.");
}

function import_propositions_form($form, $form_state, $wants) {
  //I don't know why the title didn't set, perhaps to do with it being a MENU_LOCAL_ACTION
  $title = $wants ? t('Import wants') : t('Import offers');
  drupal_set_title($title);
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => @$form_state['values']['data'],
    '#required' => TRUE,
    '#rows' => 15,
    '#weight' => 1
  );
  $form['vocab'] = array(
    '#title' => t('Vocabulary for newly created terms'),
    '#type' => 'radios',
    '#options' => array(
      'offers_wants_categories' => t('Categories'),
      'offers_wants_types' => t('Types'),
    ),
    '#default_value' => 'offers_wants_categories',
    '#weight' => 2
  );
  $form['test'] = array(
    '#title' => t('Test mode'),
    '#type' => 'checkbox',
    '#default_value' => TRUE,
    '#weight' => 3
  );
  $form['want'] = array(
    '#type' => 'hidden',
    '#value' => $wants
  );
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => 'import',
    '#weight' => 4
  );
  $form['#redirect'] = $wants ? 'wants' : 'offers';
  $form['#validate'][] = 'import_propositions_form_validate';
  return $form;
}

function import_propositions_form_validate($form, &$form_state) {
  $rows = ow_getcsv($form_state['values']['data']);
  $incoming_terms = array();

  foreach ($rows as $rownum => $row) {
    //check that all the users are valid
    if (!ow_import_row_get_user($row)) {
      form_set_error('data', t('Unknown user in row @num: @row', array('@num' => $rownum + 1, '@row' => print_r($row, 1))));
    }
    foreach (array('created', 'changed', 'expires') as $time) {
      if (array_key_exists($time, $row) && !is_numeric($row[$time])) {
        $int = strtotime($row[$time]);
        if (!$int) form_set_error('data', t('invalid @type on row @num', array('@type' => $time, '@num' => $rownum + 1)));
      }
    }
    if (array_key_exists('status', $row)) {
      if (!in_array($row['status'], array('', '0', '1'))) {
        drupal_set_message('status column must be 1 or 0 in line $rownum');
      }
    }
    //check for new categories that will need creating
    if (array_key_exists('categories', $row) && strlen($row['categories'])) {
      $incoming_terms = array_merge($incoming_terms, explode('|', strtolower($row['categories'])));
    }
  }
  foreach ($incoming_terms as $key => $term) {
    $incoming_terms[$key] = trim($term);
  }
  $all_terms = db_query("SELECT LOWER(name) FROM {taxonomy_term_data}")->fetchCol();
  $new_terms = array_diff(array_unique($incoming_terms), $all_terms);

  if ($form_state['values']['test']) {
    form_set_error('', t('Submission blocked: Test Mode in ON'));
    if (count($new_terms)) {
      drupal_set_message(t('The following new terms would be created: @terms', array('@terms' => implode(', ', $new_terms))), 'warning');
    }
  }
}

function ow_import_row_get_user(array $row) {
  if (array_key_exists('uid', $row) && is_numeric($row['uid'])) {
    $account = user_load($row['uid']);
  }
  elseif (array_key_exists('mail', $row)) {
    $account = user_load_by_mail($row['mail']);
  }
  else return;//this should never happen because all the users were shown to have existed in the validation stage
  if (is_object($account) && $account->uid)return $account;
}


function import_propositions_form_submit($form, &$form_state) {
  global $language;
  if (count(language_list()) > 1) $lang = $language->language;
  else $lang = LANGUAGE_NONE;
  //get the terms so we can lookup the ids
  $all_terms = db_query("
    SELECT d.tid, d.vid, d.name, LOWER(d.name) as term_name, v.name, v.machine_name
    FROM {taxonomy_term_data} d
    LEFT JOIN {taxonomy_vocabulary} v ON d.vid = v.vid
    WHERE d.vid > 0 AND v.machine_name IN ('offers_wants_categories', 'offers_wants_types')")
  ->FetchAllAssoc('term_name');
  $imported = 0;

  foreach (ow_getcsv($form_state['values']['data']) as $row) {
    $account = ow_import_row_get_user($row);
    $term_names = drupal_explode_tags($row['categories']);
    $taxonomy = array();
    foreach (array_filter($term_names) as $name) {
      if (!array_key_exists(strtolower($name), $all_terms)) {
        $new_term = (object)array(
          'vid' => taxonomy_vocabulary_machine_name_load($form_state['values']['vocab'])->vid,
          'name' => $name,
          'description' => '',
          'weight' => 0,
          'format' => 'plain_text'
        );
        taxonomy_term_save($new_term);
        $new_term->machine_name = $form_state['values']['vocab'];
        $all_terms[strtolower($name)] = $new_term;
      }
      $term = $all_terms[strtolower($name)];
      $taxonomy[$term->machine_name][LANGUAGE_NONE][]['tid'] = $term->tid;
    }
    if (isset($row['expires'])) {
      $expires = is_numeric($row['expires']) ? $row['expires'] : strtotime($row['expires']);
    }

    $node = new stdClass();
    $node->title = $row['title'];
    $node->type = 'proposition';
    $node->status = array_key_exists('status', $row) ? intval($row['status']) : 1;
    $node->language = $lang;
    $node->uid = $account->uid;
    $node->name = $account->name;
    $node->want = $form_state['values']['want'];
    $node->end = isset($expires) ? $expires : 0;
    if (array_key_exists('created', $row)) {
      $node->created = is_numeric($row['created']) ? $row['created'] : strtotime($row['created']);
    }

    if (array_key_exists('body', $row) && strlen($row['body'])) {
      $node->body[LANGUAGE_NONE][0] = array(
        'value' => str_replace(array("\r", "\r\n", "\n"), "\n", $row['body']),
        'format' => 'plain_text'
      );
    }
    foreach ($taxonomy as $vocab_name => $field) { //assumes the fieldname is the same as the vocab name
      $node->{$vocab_name} = $field;
    }
    node_save($node);
    if (array_key_exists('created', $row)) {
      db_query(
        "UPDATE {node} SET changed = :changed where nid = $node->nid",
        array('changed' => is_numeric($row['created']) ? $row['created'] : strtotime($row['created']))
      );
    }
    $imported++;
  }
  drupal_set_message(t("imported @count nodes", array('@count' => $imported)));
}


function ow_getcsv($string) {
  $data = explode("\n", $string); //parse the rows
  $firstline = array_shift($data);

  foreach (_ow_get_fields_from_stringline($firstline) as $key => $field) {
    $headers[] = strtolower(trim($field));
  }
  foreach($data as $key => &$row) {
    $nextrow = str_getcsv($row);
    if (count($nextrow) != count($headers)) {
      debug($row);
      debug($nextrow);
      debug($headers);
      form_set_error('data', t('Number of fields does not match header in row @num',  array('@num' => $key + 1)));
      continue;
    }
    $row = array_combine($headers, str_getcsv($row));
  }
  return array_filter($data);
}

function _ow_get_fields_from_stringline($string) {
  $fields = explode(',', $string);
  foreach ($fields as $key => $field) {
    $fields[$key] = trim($field, '" ');
  }
  return $fields;
}

