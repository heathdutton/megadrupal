<?php

/**
 * @file
 * Code for the User IP Address module.
 */

/**
 * Implements hook_help().
 */
function user_ip_address_help($path, $arg) {
  switch ($path) {
    case 'admin/help#user_ip_address':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module allows to add field to content types containing author IP address')  . '</p>';
      return $output;
  }
}


/**
 * Implements hook_field_info().
 */
function user_ip_address_field_info() {
  return array(
    'field_user_ip_address' => array(
      'label' => t('User IP address'),
      'description' => t('Field store user ip address.'),
      'default_widget' => 'user_ip_address_text',
      'default_formatter' => 'user_ip_address_text',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function user_ip_address_form_alter(&$form, &$form_state, $form_id) {
  // Disable required and number of values options in field settings form.
  if ($form_id == 'field_ui_field_edit_form') {
    if ($form['#field']['type'] == 'field_user_ip_address') {
      $form['instance']['required']['#disabled'] = TRUE;
      $form['field']['cardinality']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function user_ip_address_field_widget_info() {
  return array(
    'user_ip_address_text' => array(
      'label' => t('Hidden'),
      'field types' => array('field_user_ip_address')),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function user_ip_address_field_is_empty($item, $field) {
  return empty($item['user_ip_address']);
}


/**
 * Implements hook_field_formatter_info().
 */
function user_ip_address_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'user_ip_address_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('field_user_ip_address'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function user_ip_address_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'user_ip_address_text') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('@ip', array('@ip' => $item['user_ip_address'])),
      );
    }
  }

  return $element;
}

/**
 * Implements hook_field_presave().
 */
function user_ip_address_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'field_user_ip_address') {
    // If create entity we will get ip_address.
    if ($entity_type == 'comment') {
      if (empty($entity->cid)) {
        $items = array(
          array(
            'user_ip_address' => ip_address(),
          ),
        );
      }
    }
    elseif (empty($entity->changed)) {
      $items = array(
        array(
          'user_ip_address' => ip_address(),
        ),
      );
    }
  }
}
