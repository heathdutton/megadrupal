<?php

/**
 * @file
 * Provides reports containing where image styles are used.
 */

/**
 * Implements hook_help().
 */
function image_styles_mapping_help($path, $arg) {
  switch ($path) {
    case "admin/help#image_styles_mapping":
      $help = '<p>' . t('This module allows you to have reports listing
          the image styles per image fields and per view modes on all
          entities.') . '</p>';

      return $help;
  }
}

/**
 * Implements hook_permission().
 */
function image_styles_mapping_permission() {
  return array(
    'access image styles mapping reports' => array(
      'title' => t('View image styles mapping reports'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function image_styles_mapping_menu() {
  $items = array();

  $items['admin/reports/image_styles_mapping'] = array(
    'title' => 'Image styles mapping reports',
    'description' => 'All the reports in one place.',
    'page callback' => 'image_styles_mapping_report_all',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access image styles mapping reports'),
    'file' => 'includes/image_styles_mapping.all.inc',
  );

  $items['admin/reports/image_styles_mapping/all'] = array(
    'title' => 'All',
    'access arguments' => array('access image styles mapping reports'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/reports/image_styles_mapping/fields'] = array(
    'title' => 'Fields',
    'description' => 'Provides image fields report.',
    'page callback' => 'image_styles_mapping_fields_report',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('access image styles mapping reports'),
    'file' => 'includes/image_styles_mapping.fields.inc',
  );

  if (module_exists('views')) {
    $items['admin/reports/image_styles_mapping/views'] = array(
      'title' => 'Views',
      'description' => 'Provides views fields report.',
      'page callback' => 'image_styles_mapping_views_fields_report',
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('access image styles mapping reports'),
      'file' => 'includes/image_styles_mapping.views.inc',
    );
  }

  if (module_exists('atom_reference') && module_exists('scald_image')) {
    $items['admin/reports/image_styles_mapping/scald_image'] = array(
      'title' => 'Scald image',
      'description' => 'Provides scald image report.',
      'page callback' => 'image_styles_mapping_scald_image_report',
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('access image styles mapping reports'),
      'file' => 'includes/image_styles_mapping.scald_image.inc',
    );

    if (module_exists('views')) {
      $items['admin/reports/image_styles_mapping/views_scald'] = array(
        'title' => 'Views scald',
        'description' => 'Provides scald image in views report.',
        'page callback' => 'image_styles_mapping_views_scald_image_report',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('access image styles mapping reports'),
        'file' => 'includes/image_styles_mapping.views_scald.inc',
      );
    }
  }

  return $items;
}

/**
 * Helper function to get the image styles.
 *
 * @return array
 *   An array of image style labels with the image style names as key.
 */
function image_styles_mapping_get_image_styles() {
  $image_styles = &drupal_static(__FUNCTION__);

  if (!isset($image_styles)) {
    $image_styles_info = image_styles();
    $image_styles = array();
    foreach ($image_styles_info as $image_style) {
      $image_styles[$image_style['name']] = $image_style['label'];
    }
  }

  return $image_styles;
}

/**
 * Helper function to get the image fields.
 *
 * @return array
 *   An array of image field machine name.
 */
function image_styles_mapping_get_image_fields() {
  $image_fields = &drupal_static(__FUNCTION__);

  if (!isset($image_fields)) {
    $fields_info = field_info_fields();
    $image_fields = array();
    foreach ($fields_info as $field_machine_name => $field_info) {
      if ($field_info['type'] == 'image') {
        $image_fields[] = $field_machine_name;
      }
    }
  }

  return $image_fields;
}

/**
 * Helper function to get the atom reference fields.
 *
 * @return array
 *   An array of atom reference field machine name.
 */
function image_styles_mapping_get_atom_reference_fields() {
  $atom_reference_fields = &drupal_static(__FUNCTION__);

  if (!isset($atom_reference_fields)) {
    $fields_info = field_info_fields();
    $atom_reference_fields = array();
    foreach ($fields_info as $field_machine_name => $field_info) {
      if ($field_info['type'] == 'atom_reference') {
        $atom_reference_fields[] = $field_machine_name;
      }
    }
  }

  return $atom_reference_fields;
}

/**
 * Helper function to get the picture mappings.
 *
 * @return array
 *   An array of picture mapping labels with the picture mapping names as key.
 */
function image_styles_mapping_get_picture_mappings() {
  $picture_mappings = &drupal_static(__FUNCTION__);

  if (!isset($picture_mappings)) {
    $picture_mappings_info = picture_mapping_load_all();
    $picture_mappings = array();
    foreach ($picture_mappings_info as $picture_mapping_name => $picture_mapping_object) {
      $picture_mappings[$picture_mapping_name] = $picture_mapping_object->label();
    }
  }

  return $picture_mappings;
}

/**
 * Helper function.
 *
 * Checks if a needle is used in an array.
 */
function image_styles_mapping_search_recursive($needle, $haystack, &$result) {
  if (!is_array($haystack)) {
    return;
  }

  foreach ($haystack as $value) {
    if (is_array($value)) {
      image_styles_mapping_search_recursive($needle, $value, $result);
    }
    elseif ($needle === $value) {
      $result = TRUE;
    }
  }
}

/**
 * Helper function.
 *
 * Check if a field_machine_name corresponds to an image field machine name.
 *
 * Used because if the same field is used twice (or more) in a view, the
 * second field machine name will be field_image_1.
 */
function image_styles_mapping_field_is_in_fields($field_searched, $fields) {
  $check = FALSE;

  // Check if an image field is used.
  foreach ($fields as $field) {
    $pattern = '/^' . $field . '(_([\d])+)?$/';
    if (preg_match($pattern, $field_searched)) {
      $check = TRUE;
      break;
    }
    else {
      $check = FALSE;
      break;
    }
  }

  return $check;
}

/**
 * Helper function.
 *
 * Get the image_styles associated with a scald_context.
 */
function image_styles_mapping_get_scald_context_image_styles($scald_context) {
  // Get the image styles.
  $image_styles = image_styles_mapping_get_image_styles();

  $scald_context_config = scald_context_config_load($scald_context);

  // Check if an image style is used. If yes, extract it.
  $pattern = '/^style-(.+)/';
  if (preg_match($pattern, $scald_context_config->transcoder['image']['*'], $matches)) {
    $view_mode_image_styles = image_styles_mapping_display_image_style_link($image_styles[$matches[1]], $matches[1]);
  }
  else {
    $view_mode_image_styles = t('No image style used for this context.');
  }

  return $view_mode_image_styles;
}

/**
 * Helper function.
 *
 * Display a link to image style edit page if user has permission.
 *
 * If no argument is given, display a link to the image styles list.
 */
function image_styles_mapping_display_image_style_link($image_style_label = FALSE, $image_style_name = FALSE) {
  if (user_access('administer image styles')) {
    if ($image_style_label && $image_style_name) {
      return l($image_style_label, 'admin/config/media/image-styles/edit/' . $image_style_name);
    }
    else {
      return l(t('Image styles: (not sortable)'), 'admin/config/media/image-styles');
    }
  }
  else {
    return $image_style_label;
  }
}

/**
 * Helper function.
 *
 * Display a link to scald image context edit page if user has permission.
 */
function image_styles_mapping_display_scald_image_context_link() {
  if (user_access('administer scald')) {
    return l(t('Scald context: (not sortable)'), 'admin/structure/scald/image/contexts');
  }
  else {
    return t('Scald context');
  }
}

/**
 * Helper function.
 *
 * Display a link to picture edit page if user has permission.
 *
 * If no argument is given, display a link to the picture list.
 */
function image_styles_mapping_display_picture_mapping_link($picture_label = FALSE, $picture_name = FALSE) {
  if (user_access('administer pictures')) {
    if ($picture_label && $picture_name) {
      return l($picture_label, 'admin/config/media/picture/list/' . $picture_name . '/edit');
    }
    else {
      return l(t('Picture mappings: (not sortable)'), 'admin/config/media/picture');
    }
  }
  else {
    return $picture_label;
  }
}

/**
 * Helper function.
 *
 * Display a link to bundle's view mode page if user has permission.
 */
function image_styles_mapping_display_view_mode_link($entity_type, $bundle, $view_mode = 'default') {
  switch ($entity_type) {
    case 'node':
      $display = image_styles_mapping_display_node_view_mode_link($bundle, $view_mode);
      break;

    case 'user':
      $display = image_styles_mapping_display_user_view_mode_link($view_mode);
      break;

    case 'taxonomy_term':
      $display = image_styles_mapping_display_taxonomy_term_view_mode_link($bundle, $view_mode);
      break;

    default:
      $display = $view_mode;
  }
  return $display;
}

/**
 * Helper function.
 *
 * Display a link to node's view mode page if user has permission.
 */
function image_styles_mapping_display_node_view_mode_link($bundle, $view_mode = 'default') {
  if (user_access('administer content types')) {
    return l($view_mode, 'admin/structure/types/manage/' . $bundle . '/display/' . $view_mode);
  }
  else {
    return $view_mode;
  }
}

/**
 * Helper function.
 *
 * Display a link to user's view mode page if user has permission.
 */
function image_styles_mapping_display_user_view_mode_link($view_mode = 'default') {
  if (user_access('administer users')) {
    return l($view_mode, 'admin/config/people/accounts/display/' . $view_mode);
  }
  else {
    return $view_mode;
  }
}

/**
 * Helper function.
 *
 * Display a link to taxonomy term's view mode page if user has permission.
 */
function image_styles_mapping_display_taxonomy_term_view_mode_link($bundle, $view_mode = 'default') {
  if (user_access('administer taxonomy')) {
    return l($view_mode, 'admin/structure/taxonomy/' . $bundle . '/display/' . $view_mode);
  }
  else {
    return $view_mode;
  }
}

/**
 * Helper function.
 *
 * Display a link to view display edit page if user has permission.
 */
function image_styles_mapping_view_display_link($view_name, $display_id, $display_title) {
  if (module_exists('views_ui') && user_access('administer views')) {
    if ($display_title == 'Master') {
      return l($display_title, 'admin/structure/views/view/' . $view_name . '/edit');
    }
    else {
      return l($display_title, 'admin/structure/views/view/' . $view_name . '/edit/' . $display_id);
    }
  }
  else {
    return $display_title;
  }
}

/**
 * Helper function to sort rows.
 *
 * @param array $header
 *   The table's header.
 * @param array $rows
 *   Array of rows.
 *
 * @return array
 *   Array of sorted rows.
 */
function image_styles_mapping_sort_rows(array $header, array $rows) {
  if (!empty($rows)) {
    // Get selected order from the request or the default one.
    $order = tablesort_get_order($header);
    // Please note that we do not run any sql query against the database. The
    // 'sql' key is simply there for tablesort needs.
    $order = $order['sql'];

    // Get the field we sort by from the request if any.
    $sort = tablesort_get_sort($header);

    // Obtain the column we need to sort by.
    foreach ($rows as $key => $value) {
      $order_column[$key] = $value[$order];
    }
    // Sort data.
    if ($sort == 'asc') {
      array_multisort($order_column, SORT_ASC, $rows);
    }
    elseif ($sort == 'desc') {
      array_multisort($order_column, SORT_DESC, $rows);
    }
  }
  return $rows;
}
