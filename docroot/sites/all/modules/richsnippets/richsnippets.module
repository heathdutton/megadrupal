<?php
// $Id$

/**
 * Implements hook_theme().
 */
function richsnippets_theme($existing, $type, $theme, $path) {
  return array(
    'richsnippets_image_formatter' => array(
      'variables' => array('item' => array(), ),
    )
  );
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Because the image_formatter theme function does not pass attributes along to
 * theme_image(), we must override it.
 */
function richsnippets_theme_registry_alter(&$theme_registry) {
  $theme_registry['image_formatter']['theme path'] = drupal_get_path('module', 'richsnippets');
  $theme_registry['image_formatter']['function'] = 'theme_richsnippets_image_formatter';
}

/**
 * Theme function to replace theme_image_formatter().
 *
 * We simply add one line to pass attributes along to theme_image().
 */
function theme_richsnippets_image_formatter(&$variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
    // This is the single line we add. This will hopefully be fixed in core.
    'attributes' => $item['attributes'],
  );
  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }

  if ($variables['path']) {
    $path = $variables['path']['path'];
    $options = $variables['path']['options'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  return $output;
}

/**
 * Implements hook_preprocess_node().
 *
 * Google requires that the title be declared within the Rich Snippet element.
 * We copy the meta tag from the head and place it within the node body.
 */
function richsnippets_preprocess_node(&$variables) {
  $head = drupal_add_html_head();
  $head['rdf_node_title']['#tag'] = 'span';
  $head['rdf_node_title']['#weight'] = -50;
  $variables['content'][] = $head['rdf_node_title'];
}

/**
 * Implements hook_preprocess_field().
 *
 * Google requires the relationship be on the image itself.
 *
 * In rdf_preprocess_field(), the image is handled like all other fields. In
 * order to make this work for images, the image URI is placed within the
 * containing div as a resource. We unset that resource and move the attributes
 * from the containing div to the image tag itself.
 */
function richsnippets_preprocess_field(&$variables) {
  $element = $variables['element'];
  if ($element['#formatter'] == 'image') {
    $mapping = rdf_mapping_load($element['#entity_type'], $element['#bundle']);
    $field_name = $element['#field_name'];
    if (!empty($mapping) && !empty($mapping[$field_name])) {
      foreach ($element['#items'] as $delta => $item) {
        // Google requires the relationship be on the image itself, so we
        // add the item attributes directly to the img tag and remove them
        // from the surrounding div.
        $variables['items'][0]['#item']['attributes'] = $variables['item_attributes_array'][$delta];
        unset($variables['item_attributes_array'][$delta]);
        // The resource attribute is no longer necessary.
        unset($variables['items'][0]['#item']['attributes']['resource']);
      }
    }
  }
}

/**
 * Implements hook_process_image().
 * 
 * Google penalizes type on the image for no apparent reason, so we remove the
 * typeof that is set in rdf_preprocess_image().
 */
function richsnippets_process_image(&$variables) {
  unset($variables['attributes']['typeof']);
}