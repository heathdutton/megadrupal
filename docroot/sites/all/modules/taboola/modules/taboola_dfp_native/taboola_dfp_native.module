<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_context_registry().
 */
function taboola_dfp_native_context_registry() {
  return array(
    'reactions' => array(
      'taboola_dfp_native' => array(
        'title' => t('Taboola DFP native'),
        'plugin' => 'taboola_dfp_native_context_reaction',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function taboola_dfp_native_context_plugins() {
  $plugins = array();
  $plugins['taboola_dfp_native_context_reaction'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'taboola_dfp_native') . '/plugins',
      'file' => 'taboola_dfp_native_context_reaction.inc',
      'class' => 'TaboolaDFPNativeContextReaction',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}


/**
 * Implements hook_page_build().
 *
 * Get all needed settings and add it to the JavaScript which will appended
 * the rendered dfp tag in specified location.
 * All the visibility rules should be controlled by the context.
 *
 * @note: *We don't need multiple DFP support per page, so we'll break after
 *    the first found.
 */
function taboola_dfp_native_page_build(&$page) {

  // Check for parent module configurations.
  if (path_is_admin(current_path()) || !taboola_get_setting('taboola_enabled') || !taboola_get_setting('taboola_service_path')) {
    return;
  }

  $taboola_dfp_native_tags = array();

  // Execute taboola_dfp_native plugin.
  if ($plugin = context_get_plugin('reaction', 'taboola_dfp_native')) {
    $plugin->execute();

    if (!empty($plugin->taboola_dfp_native_tags)) {
      foreach ($plugin->taboola_dfp_native_tags as $machinename => $values) {
        // Just one value is not required (position). So, check for values.
        if (count(array_filter($values)) < count($values) - 1) {
          continue;
        }

        // Add the loader_identifier to the page vars,
        // in order to be used in the parent module hook taboola_page_alter().
        $page['taboola']['vars']['loader_identifier'] = !empty($values['loader_identifier']) ? $values['loader_identifier'] : 'article';

        // Load the DFP tag.
        $tag = dfp_tag_load($values['ad_tag']);

        if (empty($tag->disabled) && !empty($tag->targeting)) {
          $dfp_tag = dfp_tag($values['ad_tag']);
          $taboola_dfp_native_tags[$machinename] = $values;
          $taboola_dfp_native_tags[$machinename]['targeting'] = $tag->targeting;
          // Render the tag.
          $taboola_dfp_native_tags[$machinename]['renderedDfp'] = render($dfp_tag);

          // *Break after the first found one.
          break;
        }
      }
    }
  }

  // Add the javascript.
  _taboola_dfp_native_add_js($taboola_dfp_native_tags);
}

/**
 * Helper to add the javascript code for Taboola DFP Native.
 */
function _taboola_dfp_native_add_js($tags) {

  if (empty($tags)) {
    return;
  }

  // Add collected JS configuration.
  drupal_add_js(array(
    'taboolaDfpNative' => array(
      'tags' => $tags,
    ),
  ), 'setting');

  // Drupal.settings.taboolaDfpNative.aaa = "test "; alert("testtt");
  $js = array();
  $js[] = 'googletag.pubads().addEventListener("slotRenderEnded", function(event) {';
  $js[] = ' try {';

  foreach ($tags as $name => $values) {

    // Minimum required targets.
    if (empty($values['targeting']) || count($values['targeting']) < 3) {
      continue;
    }

    // Correct the targeting keys.
    $targeting = _taboola_dfp_native_prepare_targets($values['targeting']);

    $js[] = '  if (googletag.slots.' . $values['ad_tag'] . ' == event.slot && event.isEmpty === true) {';
    $js[] = '    window._taboola = window._taboola || [];';
    $js[] = '    _taboola.push({';

    /*
     * e.g:
     * mode:'thumbnails-j',
     * container: 'dpf-taboolanative1',
     * placement: 'main-column'
     */
    foreach ($targeting as $item) {
      $js[] = $item['target'] . ':"' . $item['value'] . '",';
    }

    $js[] = '    });';
    $js[] = '  }';
  }

  $js[] = ' } catch (e) {';
  $js[] = ' }';
  $js[] = '});';

  drupal_add_js(implode(PHP_EOL, $js), array(
    'type' => 'inline',
    'group' => JS_DEFAULT,
    'every_page' => TRUE,
    'force header' => TRUE,
    'weight' => 9, // Hardcoded weigh value (Before _dfp_js_global_settings()).
  ));

  drupal_add_js(drupal_get_path('module', 'taboola_dfp_native') . '/js/taboola_dfp_native.js');
}

/**
 * Helper function.
 *
 * Clean up targeting keys and values.
 *
 * @param $targeting
 * @return array
 */
function _taboola_dfp_native_prepare_targets($targeting) {
  $map = array(
    'tabContainer' => 'container',
    'tabPlacement' => 'placement',
    'tabMode' => 'mode',
  );

  return array_map(function ($item) use ($map) {
    $item = array_map('trim', $item);
    // Check for mapped key.
    if (isset($map[$item['target']])) {
      $item['target'] = $map[$item['target']];
    }
    // Clean-up the targets.
    $item['target'] = preg_replace('/[^a-z\d]/i', '', drupal_strtolower(check_plain($item['target'])));
    $item['value'] = preg_replace('/[^a-z\d]/i', '-', drupal_strtolower(check_plain($item['value'])));

    return $item;
  }, $targeting);
}
