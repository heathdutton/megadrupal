<?php
// $Id$

/**
 * @file
 * 2 Way Video Chat Integration Module
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Display help and module information
 *
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 *
 * @return help text for the path
 */
function v2wvc_help($path = 'admin/help#v2wvc', $arg) {
  $output = '';	
  switch ($path) {
    case "admin/help#v2wvc":
      $output = '<p>' . t("2 Way Video Chat Script integration module details, installation instructions, updates") . ': <a href="http://www.videowhisper.com/?p=Drupal+2+Way+Video+Chat+Module">http://www.videowhisper.com/?p=Drupal+2+Way+Video+Chat+Module</a></p>';
      break;
  }
  return $output;
}
// function v2wvc_help

/**
 * Valid permissions for this module
 *
 * @return array An array of valid permissions for the v2wvc_module module
 */
function v2wvc_modules_enabled() {
  // Set default permissions.	
	$myroom = db_query("SELECT * FROM {role_permission} WHERE rid = '1' AND permission = 'access 2wayvideochat room';");
	if ($myroom !== false) {
			foreach ($myroom as $row) {
				$module=$row->module;
			}
	} 
	if (!isset($module)) {
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'access 2wayvideochat room', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'access 2wayvideochat room', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'create 2wayvideochat room', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit 2wayvideochat room', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'delete 2wayvideochat room', 'module' => 'v2wvc',))->execute();
  
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit welcome message', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit instantaccess', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit credits', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit cleanup', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit availability', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit bandwidth', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit maxbandwidth', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit filterregex', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit filterreplace', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit micrate', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit camfps', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit camheight', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit camwidth', 'module' => 'v2wvc',))->execute();
  
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit enablebuzz', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit emoticons', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit verbose level', 'module' => 'v2wvc',))->execute();  
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit enablep2p', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit showtimer', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit sendtextchat', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit enableserver', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit showtextchat', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit enabledvideo', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit enabledsound', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit configuresource', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit showcamsettings', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit enablesoundfx', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit enablenext', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'edit configureconnection', 'module' => 'v2wvc',))->execute();
  
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use enablebuzz', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use emoticons', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use enablep2p', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use showtimer', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use sendtextchat', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use enableserver', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use showtextchat', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use enabledvideo', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use enabledsound', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use configuresource', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use showcamsettings', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use enablesoundfx', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use enablenext', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 2, 'permission' => 'use configureconnection', 'module' => 'v2wvc',))->execute();

  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use enablebuzz', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use emoticons', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use enablep2p', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use showtimer', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use sendtextchat', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use enableserver', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use showtextchat', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use enabledvideo', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use enabledsound', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use configuresource', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use showcamsettings', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use enablesoundfx', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use enablenext', 'module' => 'v2wvc',))->execute();
  db_insert('role_permission')->fields(array('rid' => 1, 'permission' => 'use configureconnection', 'module' => 'v2wvc',))->execute();
	}
}

function v2wvc_permission() {
  return array(
    'administer 2wayvideochat' =>  array(
      'title' => t('Administer 2wayvideochat'),
      'restrict access' => TRUE,
			'description' => t("Generally an administrative permission."),
    ),
    'create 2wayvideochat room' => array(
      'title' => t('Create rooms'),
      'restrict access' => TRUE,
			'description' => t("Allows creating of room"),
    ),
    'edit 2wayvideochat room' => array(
      'title' => t('Edit rooms'),
			'description' => t("Allows editing of room"),
    ),
    'delete 2wayvideochat room' => array(
      'title' => t('Delete rooms'),
			'description' => t("Allows deleting of room"),
    ),
    'access 2wayvideochat room' => array(
      'title' => t('Access rooms'),
      'description' => t('Grants access to the room'),
    ),
		'edit welcome message' => array(
      'title' => t('edit welcome message'),
			'description' => t("Allows editing of welcome message"),
    ),
		'edit instantaccess' => array(
      'title' => t('edit instantaccess'),
			'description' => t("Allows editing of instantaccess"),
    ),
		'edit credits' => array(
      'title' => t('edit credits'),
			'description' => t("Allows editing of credits"),
    ),
		'edit cleanup' => array(
      'title' => t('edit cleanup'),
			'description' => t("Allows editing of cleanup"),
    ),
		'edit availability' => array(
      'title' => t('edit availability'),
			'description' => t("Allows editing of availability"),
    ),
		'edit bandwidth' => array(
      'title' => t('edit bandwidth'),
			'description' => t("Allows editing of bandwidth"),
    ),
		'edit maxbandwidth' => array(
      'title' => t('edit maxbandwidth'),
			'description' => t("Allows editing of maxbandwidth"),
    ),
		'edit filterregex' => array(
      'title' => t('edit filterregex'),
			'description' => t("Allows editing of filterregex"),
    ),
		'edit filterreplace' => array(
      'title' => t('edit filterreplace'),
			'description' => t("Allows editing of filterreplace"),
    ),
		'edit micrate' => array(
      'title' => t('edit micrate'),
			'description' => t("Allows editing of micrate"),
    ),
		'edit camfps' => array(
      'title' => t('edit camfps'),
			'description' => t("Allows editing of camfps"),
    ),
		'edit camheight' => array(
      'title' => t('edit camheight'),
			'description' => t("Allows editing of camheight"),
    ),
		'edit camwidth' => array(
      'title' => t('edit camwidth'),
			'description' => t("Allows editing of camwidth"),
    ),
		
		'edit enablebuzz' => array(
      'title' => t('edit enablebuzz'),
			'description' => t("Allows editing of enablebuzz's parameter"),
    ),
		'edit emoticons' => array(
      'title' => t('edit emoticons'),
			'description' => t("Allows editing of emoticons's parameter"),
    ),
		'edit verbose level' => array(  
      'title' => t('edit verbose level'),
			'description' => t("Allows editing of verbose level's parameter"),
    ),
		'edit enablep2p' => array(
      'title' => t('Edit enablep2p'),
			'description' => t("Allows editing of enablep2p's parameter"),
    ),
		'edit showtimer' => array(
      'title' => t('edit showtimer'),
			'description' => t("Allows editing of showtimer's parameter"),
    ),
		'edit sendtextchat' => array(
      'title' => t('edit sendtextchat'),
			'description' => t("Allows editing of sendtextchat's parameter"),
    ),
		'edit enableserver' => array(
      'title' => t('edit enableserver'),
			'description' => t("Allows editing of enableserver's parameter"),
    ),
		'edit showtextchat' => array(
      'title' => t('edit showtextchat'),
			'description' => t("Allows editing of enablenext's parameter"),
    ),
		'edit enabledvideo' => array(
      'title' => t('edit enabledvideo'),
			'description' => t("Allows editing of enabledvideo's parameter"),
    ),
		'edit enabledsound' => array(
      'title' => t('edit enabledsound'),
			'description' => t("Allows editing of enabledsound's parameter"),
    ),
		'edit configuresource' => array(
      'title' => t('edit configuresource'),
			'description' => t("Allows editing of configuresource's parameter"),
    ),
		'edit showcamsettings' => array(
      'title' => t('edit showcamsettings'),
			'description' => t("Allows editing of showcamsettings's parameter"),
    ),
		'edit enablesoundfx' => array(
      'title' => t('edit enablesoundfx'),
			'description' => t("Allows editing of enablesoundfx's parameter"),
    ),
		'edit enablenext' => array(
      'title' => t('edit enablenext'),
			'description' => t("Allows editing of enablenext's parameter"),
    ),
		'use enablebuzz' => array(
      'title' => t('use enablebuzz'),
			'description' => t("Allows using of enablebuzz's parameter"),
    ),
		'use emoticons' => array(
      'title' => t('use emoticons'),
			'description' => t("Allows using of emoticons's parameter"),
    ),
		'use enablep2p' => array(
      'title' => t('use enablep2p'),
			'description' => t("Allows using of enablep2p's parameter"),
    ),
		'use showtimer' => array(
      'title' => t('use showtimer'),
			'description' => t("Allows using of showtimer's parameter"),
    ),
		'use sendtextchat' => array(
      'title' => t('use sendtextchat'),
			'description' => t("Allows using of sendtextchat's parameter"),
    ),
		'use enableserver' => array(
      'title' => t('use enableserver'),
			'description' => t("Allows using of enableserver's parameter"),
    ),
		'use showtextchat' => array(
      'title' => t('use showtextchat'),
			'description' => t("Allows using of showtextchat's parameter"),
    ),
		'use enabledvideo' => array(
      'title' => t('use enabledvideo'),
			'description' => t("Allows using of enabledvideo's parameter"),
    ),
		'use enabledsound' => array(
      'title' => t('use enabledsound'),
			'description' => t("Allows using of enabledsound's parameter"),
    ),
		'use configuresource' => array(
      'title' => t('use configuresource'),
			'description' => t("Allows using of configuresource's parameter"),
    ),
		'use showcamsettings' => array(
      'title' => t('use showcamsettings'),
			'description' => t("Allows using of showcamsettings's parameter"),
    ),
		'use enablesoundfx' => array(
      'title' => t('use enablesoundfx'),
			'description' => t("Allows using of enablesoundfx's parameter"),
    ),
		'use enablenext' => array(
      'title' => t('use enablenext'),
			'description' => t("Allows using of enablenext's parameter"),
    ),
		'use configureconnection' => array(
      'title' => t('use configureconnection'),
			'description' => t("Allows using of configureconnection's parameter"),
    ),
  );
}

/**
 * Menu for this module
 *
 * @return array An array with this module's menus.
 */
function v2wvc_menu() {
  $items = array();
  
  $items['admin/config/content/v2wvc'] = array(
    'title' => '2 Way Video Chat',
    'description' => '2 Way Video Chat admin interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('v2wvc_admin'),
    'access arguments' => array('administer 2wayvideochat'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['v2wvc'] = array(
    'title' => 'Video Chats',
    'description' => 'My 2 way video chat rooms.',
    'page callback' => 'v2wvc_roomlist',
    'access arguments' => array('edit 2wayvideochat room'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Room list page
 *
 * @return page contents.
 */
function v2wvc_roomlist() {
  global $user;
  v2wvc_cleanup();

  $page_content = "";

  $sql = 'SELECT n.nid, title, room FROM {node} n, {v2wvc_rooms} vw WHERE n.type = :type AND n.status = :status AND n.uid = :userid';
  $result = db_query($sql,
    array(
      ':type' => 'v2wvc',
      ':status' => 1,
			':userid' => $user->uid,
    )
  );
	$page_content .= "<UL>";
  foreach ($result as $row) {
		$options = array("attributes" => array("title" => $row->room, 'target' => '_blank'));
		$link = l("$row->title ($row->room)", "node/$row->nid", $options);
		$page_content .= "<LI>$link</LI>";
  }
	$page_content .= "</UL>";
	if (isset($options)) {
  $link = l(t('Create new instant video chat room'), "node/add/v2wvc", $options);
  $page_content .= "<BR><h3>$link</h3>";
	} else {
  $link = l(t('Create new instant video chat room'), "node/add/v2wvc", array("attributes" => array("title" => '', 'target' => '_blank')));
  $page_content .= "<BR><h3>$link</h3>";
	}
  return $page_content;
}

/**
 * Rooms cleanup
 */
function v2wvc_cleanup() {
  //cleanup
  $ztime = time();
  db_query("DELETE FROM {v2wvc_rooms} WHERE ((timeexpire>0) AND (timeexpire<$ztime)) OR ((timeout>0) AND (($ztime-timelastaccess)>timeout))");
}

/**
 * Admin page
 *
 * @return page contents.
 */
function v2wvc_admin() {
  $form = array();

  $form['v2wvc_rtmp3'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMP application address'),
    '#default_value' => variable_get('v2wvc_rtmp3', "rtmp://server-domain-or-ip/videowhisper"),
    '#size' => 48,
    '#maxlength' => 255,
    '#description' => t("RTMP application address on a rtmp server."),
    '#required' => TRUE,
  );

  $form['v2wvc_rtmfp3'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMFP application address'),
    '#default_value' => variable_get('v2wvc_rtmfp3', "rtmfp://server-domain-or-ip/application/"),
    '#size' => 48,
    '#maxlength' => 255,
    '#description' => t('RTMFP application address on a rtmfp server (required for P2P). Register an <a target="_blank" href="https://www.adobe.com/cfusion/entitlement/index.cfm?e=cirrus">Adobe Cirrus</a> developer key (former Stratus) to get a rtmfp address for your site.'),
    '#required' => TRUE,
  );

  $form['v2wvc_amf3'] = array(
    '#type' => 'textfield',
    '#title' => t('RTMP AMF'),
    '#default_value' => variable_get('v2wvc_amf3', "AMF3"),
    '#size' => 48,
    '#maxlength' => 10,
    '#description' => t("RTMP AMF (AMF3 : Red5, Wowza, FMIS3, FMIS3.5)"),
    '#required' => TRUE,
  );

  $form['v2wvc_room_prefix3'] = array(
    '#type' => 'textfield',
    '#title' => t('Default room name'),
    '#default_value' => variable_get('v2wvc_room_prefix3', "InstantChat"),
    '#size' => 24,
    '#maxlength' => 48,
    '#description' => t("Default room name. A hash code is added if not changed by room creator."),
    '#required' => TRUE,
  );

  $found = "";
  $path = variable_get('v2wvc_path', "/2wvc/");
  if (file_exists("." . $path)) {
    $found = t('Application folder detected: ') . $path;
  }
  else $found = t('Please <a target="_blank" href="@url-download">download 2 Way Video Chat application</a>. Application folder NOT detected: %path', array('@url-download' => 'http://www.videowhisper.com/?p=Drupal+2+Way+Video+Chat+Module', '%path' => $path));

  $form['v2wvc_path'] = array(
    '#type' => 'textfield',
    '#title' => t('2 Way Video Chat path'),
    '#default_value' => variable_get('v2wvc_path', "/2wvc/"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Path for the 2 Way Video Chat application folder.") . " " . $found,
    '#required' => TRUE,
  );

  $form['v2wvc_cammaxbandwidth3'] = array(
    '#type' => 'textfield',
    '#title' => t('camMaxBandwidth'),
    '#default_value' => variable_get('v2wvc_cammaxbandwidth3', "81920"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set camMaxBandwidth parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_bufferlive3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferLive'),
    '#default_value' => variable_get('v2wvc_bufferlive3', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferLive parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_bufferfull3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferFull'),
    '#default_value' => variable_get('v2wvc_bufferfull3', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferFull parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_bufferliveplayback3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferLivePlayback'),
    '#default_value' => variable_get('v2wvc_bufferliveplayback3', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferLivePlayback parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_bufferfullplayback3'] = array(
    '#type' => 'textfield',
    '#title' => t('bufferFullPlayback'),
    '#default_value' => variable_get('v2wvc_bufferfullplayback3', "0.1"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set bufferFullPlayback parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_disablebandwidthdetection3'] = array(
    '#type' => 'radios',
    '#title' => t('disableBandwidthDetection'),
    '#default_value' => variable_get('v2wvc_disablebandwidthdetection3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set disableBandwidthDetection parameters'),
  );

  $form['v2wvc_limitbybandwidth3'] = array(
    '#type' => 'radios',
    '#title' => t('limitBybandwidth'),
    '#default_value' => variable_get('v2wvc_limitbybandwidth3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set limitBybandwidth parameters'),
  );

  $form['v2wvc_autosnapshots3'] = array(
    '#type' => 'radios',
    '#title' => t('Autosnapshots'),
    '#default_value' => variable_get('v2wvc_autosnapshots3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set autosnapshots parameters'),
  );

  $form['v2wvc_requestsnapshot3'] = array(
    '#type' => 'radios',
    '#title' => t('requestSnapshot'),
    '#default_value' => variable_get('v2wvc_requestsnapshot3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set requestSnapshot parameters'),
  );

  $form['v2wvc_snapshotstime3'] = array(
    '#type' => 'textfield',
    '#title' => t('snapshotsTime'),
    '#default_value' => variable_get('v2wvc_snapshotstime3', "20000"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set snapshotsTime parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_adserver3'] = array(
    '#type' => 'textfield',
    '#title' => t('adServer'),
    '#default_value' => variable_get('v2wvc_adserver3', "2_ads.php"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set adServer parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_adsinterval3'] = array(
    '#type' => 'textfield',
    '#title' => t('adsInterval'),
    '#default_value' => variable_get('v2wvc_adsinterval3', "600000"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set adsInterval parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_adstimeout3'] = array(
    '#type' => 'textfield',
    '#title' => t('adsTimeout'),
    '#default_value' => variable_get('v2wvc_adstimeout3', "20000"),
    '#size' => 48,
    '#maxlength' => 48,
    '#description' => t("Set adsTimeout parameters."),
    '#required' => TRUE,
  );

  $form['v2wvc_enableserver3'] = array(
    '#type' => 'radios',
    '#title' => t('enableServer'),
    '#default_value' => variable_get('v2wvc_enableserver3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enableServer parameters'),
  );

  $form['v2wvc_enablep2p3'] = array(
    '#type' => 'radios',
    '#title' => t('enableP2P'),
    '#default_value' => variable_get('v2wvc_enablep2p3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enableP2P parameters'),
  );

  $form['v2wvc_showtimer3'] = array(
    '#type' => 'radios',
    '#title' => t('showTimer'),
    '#default_value' => variable_get('v2wvc_showtimer3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set showTimer parameters'),
  );

  $form['v2wvc_showtextchat3'] = array(
    '#type' => 'radios',
    '#title' => t('showTextchat'),
    '#default_value' => variable_get('v2wvc_showtextchat3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set showTextchat parameters'),
  );

  $form['v2wvc_sendtextchat3'] = array(
    '#type' => 'radios',
    '#title' => t('sendTextchat'),
    '#default_value' => variable_get('v2wvc_sendtextchat3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set sendTextchat parameters'),
  );

  $form['v2wvc_enabledvideo3'] = array(
    '#type' => 'radios',
    '#title' => t('enabledVideo'),
    '#default_value' => variable_get('v2wvc_enabledvideo3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enabledVideo parameters'),
  );

  $form['v2wvc_enabledsound3'] = array(
    '#type' => 'radios',
    '#title' => t('enabledSound'),
    '#default_value' => variable_get('v2wvc_enabledsound3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enabledSound parameters'),
  );

  $form['v2wvc_configuresource3'] = array(
    '#type' => 'radios',
    '#title' => t('configureSource'),
    '#default_value' => variable_get('v2wvc_configuresource3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set configureSource parameters'),
  );

  $form['v2wvc_configureconnection3'] = array(
    '#type' => 'radios',
    '#title' => t('configureConnection'),
    '#default_value' => variable_get('v2wvc_configureconnection3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set configureConnection parameters'),
  );

  $form['v2wvc_showcamsettings3'] = array(
    '#type' => 'radios',
    '#title' => t('showCamsettings'),
    '#default_value' => variable_get('v2wvc_showcamsettings3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set showCamsettings parameters'),
  );

  $form['v2wvc_enablesoundfx3'] = array(
    '#type' => 'radios',
    '#title' => t('enableSoundfx'),
    '#default_value' => variable_get('v2wvc_enablesoundfx3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enableSoundfx parameters'),
  );

  $form['v2wvc_enablenext3'] = array(
    '#type' => 'radios',
    '#title' => t('enableNext'),
    '#default_value' => variable_get('v2wvc_enablenext3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enableNext parameters'),
  );

  $form['v2wvc_enablebuzz3'] = array(
    '#type' => 'radios',
    '#title' => t('enableBuzz'),
    '#default_value' => variable_get('v2wvc_enablebuzz3', 1),
    '#options' => array(t('No'), t('Yes')),
    '#description' => t('Set enableBuzz parameters'),
  );

  return system_settings_form($form);
}

function v2wvc_node_info() {
  return array(
    'v2wvc' => array(
      'name' => t('2 Way Video Chat room'),
      'module' => 'v2wvc',
      'description' => t("A <i>room</i> that can be used for customized 2 way video chat."),
      'has_title' => TRUE,
      'title_label' => t('2 Way Video Chat'),
      'has_body' => TRUE,
      'body_label' => t('Room Description'),
    ),
  );
}

function v2wvc_access($op, $node, $account) {

  if ($op == 'access') {
    return user_access('access 2wayvideochat room', $account);
  }

  if ($op == 'create') {
    return user_access('create 2wayvideochat room', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any 2wayvideochat room', $account) || (user_access('edit 2wayvideochat room', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any 2wayvideochat room', $account) || (user_access('delete 2wayvideochat room', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_forms().
 */
function v2wvc_form_alter(&$form, $form_state, $form_id) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  global $user; // this added by keeperprancis
	
  if (isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form' && in_array($form['#node']->type, variable_get('v2wvc_node_types', array('v2wvc')) )) {
		$form['v2wvc']['room'] = array(
			'#type' => 'textfield',
			'#title' => t('New room name'),
			'#default_value' => isset($form['#node']->room) ? $form['#node']->room : variable_get('v2wvc_room_prefix3', 'InstantChat'),
			'#size' => 32,
			'#maxlength' => 64,
			'#description' => t("Label that will be used to access the room. Leave as it is to generate one."),
		);

		$form['v2wvc']['advanced'] = array(
			'#type' => 'fieldset',
			'#title' => t('Advanced room settings'),
			'#tree' => TRUE,
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);

		if (user_access('edit welcome message')) {
			$form['v2wvc']['advanced']['welcome'] = array(
			'#type' => 'textarea',
			'#title' => t('Welcome message'),
			'#default_value' => isset($form['#node']->welcome) ? $form['#node']->welcome : 'Welcome!',
			'#cols' => 32,
			'#rows' => 2,
			'#description' => t("Welcome message displayed when entering room."),
			);
		} else {
			$form['v2wvc']['advanced']['welcome'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->welcome) ? $form['#node']->welcome : 'Welcome!',
			);
		}
		
		if (user_access('edit filterregex')) {
			$form['v2wvc']['advanced']['filterregex'] = array(
			'#type' => 'textfield',
			'#title' => t('Filter regex'),
			'#default_value' => isset($form['#node']->filterregex) ? $form['#node']->filterregex : "(?i)(fuck|cunt)(?-i)",
			'#size' => 50,
			'#maxlength' => 255,
			'#description' => t("Filter regex."),
			);
		} else {
			$form['v2wvc']['advanced']['filterregex'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->filterregex) ? $form['#node']->filterregex : "(?i)(fuck|cunt)(?-i)",
			);
		}

		if (user_access('edit filterreplace')) {
			$form['v2wvc']['advanced']['filterreplace'] = array(
				'#type' => 'textfield',
				'#title' => t('Filter replace'),
				'#default_value' => isset($form['#node']->filterreplace) ? $form['#node']->filterreplace : " ** ",
				'#size' => 50,
				'#maxlength' => 255,
				'#description' => t("Filter replace."),
			);
		} else {
			$form['v2wvc']['advanced']['filterreplace'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->filterreplace) ? $form['#node']->filterreplace : " ** ",
			);
		}

		if (user_access('edit verbose level')) {
			$options = array("1" => "1", "2" => "2", "3" => "3", "4" => "4");
			$form['v2wvc']['advanced']['verbose'] = array(
			'#type' => 'select',
			'#title' => t('Verbose level'),
			'#default_value' => isset($form['#node']->verbose) ? $form['#node']->verbose : 4,
			'#options' => $options,
			'#description' => t('Messaging and debug: verbose level.'),
			);
		} else {
			$form['v2wvc']['advanced']['verbose'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->verbose) ? $form['#node']->verbose : 4,
			);
		}

		if (user_access('edit instantaccess')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['visitors'] = array(
				'#type' => 'select',
				'#title' => t('Instant access'),
				'#default_value' => isset($form['#node']->visitors) ? $form['#node']->visitors : "1",
				'#options' => $options,
				'#description' => t('Allow non registered users to access chat. If disabled people will not be able to access chat instantly, without having and account and beeing logged in.'),
			);
		} else {
			$form['v2wvc']['advanced']['visitors'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->visitors) ? $form['#node']->visitors : '1',
			);
		}

		if (user_access('edit credits')) {
			$form['v2wvc']['advanced']['credits'] = array(
				'#type' => 'textfield',
				'#title' => t('Credits'),
				'#default_value' => isset($form['#node']->credits) ? $form['#node']->credits : 0,
				'#size' => 5,
				'#maxlength' => 6,
				'#description' => t("Maximum total number of streaming minutes this room can be used for. Usage of all users is added up (i.e. 2 users chatting for 10 minutes will require 20 credits). Leave 0 for unlimited usage time."),
			);
		} else {
			$form['v2wvc']['advanced']['credits'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->credits) ? $form['#node']->credits : 0,
			);
		}

		if (isset($form['#node']->timeexpire)) {
			if ($form['#node']->timeexpire > 0) {
				$form['#node']->expire = floor(($form['#node']->timeexpire - time())  / 3600);
			}
		}
		
		if (user_access('edit availability2', $user)) {
			$form['v2wvc']['advanced']['expire'] = array(
				'#type' => 'textfield',
				'#title' => t('Availability'),
				'#default_value' => isset($form['#node']->expire) ? ($form['#node']->expire+1) : 0,
				'#size' => 5,
				'#maxlength' => 6,
				'#description' => t("Number of hours this room will be accessible (i.e. 720 for 1 month). Leave 0 to make permanent room."),
			);
		} else {
			$form['v2wvc']['advanced']['expire'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->expire) ? ($form['#node']->expire+1) : 0,
			);
		}

		if (isset($form['#node']->timeout)) {
			$form['#node']->cleanup = floor($form['#node']->timeout / 3600);
		}
		if (user_access('edit cleanup')) {
			$form['v2wvc']['advanced']['cleanup'] = array(
				'#type' => 'textfield',
				'#title' => t('Cleanup'),
				'#default_value' => isset($form['#node']->cleanup) ? $form['#node']->cleanup : 0,
				'#size' => 5,
				'#maxlength' => 6,
				'#description' => t("If room is not used for this number of hours will be deleted. Leave 0 for no cleanup."),
			);
		} else {
			$form['v2wvc']['advanced']['cleanup'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->cleanup) ? $form['#node']->cleanup : 0,
			);
		}

		$form['v2wvc']['advanced']['webcam'] = array(
			'#type' => 'fieldset',
			'#title' => t('Streaming'),
			'#tree' => TRUE,
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		
		if (isset($form['#node']->camwidth) && (isset($form['#node']->camheight))) {
			$form['#node']->resolution = $form['#node']->camwidth . "x" . $form['#node']->camheight;
		}
		if (user_access('edit camwidth') && user_access('edit camheight')) {
			$options = array("320x240" => "320x240", "160x120" => "160x120", "176x144" => "176x144", "352x288" => "352x288", "640x480" => "640x480");
			$form['v2wvc']['advanced']['webcam']['resolution'] = array(
				'#type' => 'select',
				'#title' => t('Resolution'),
				'#default_value' => isset($form['#node']->resolution) ? $form['#node']->resolution : "320x240",
				'#options' => $options,
				'#description' => t('Camera desired mode: resolution.'),
			);
		} else {
			$form['v2wvc']['advanced']['webcam']['resolution'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->resolution) ? $form['#node']->resolution : "320x240",
			);
		}

		if (user_access('edit camfps')) {
			$options = array("15" => "15", "10" => "10", "12" => "12", "20" => "20", "25" => "25", "30" => "30");
			$form['v2wvc']['advanced']['webcam']['camfps'] = array(
				'#type' => 'select',
				'#title' => t('FPS'),
				'#default_value' => isset($form['#node']->camfps) ? $form['#node']->camfps : 15,
				'#options' => $options,
				'#description' => t('Camera desired  mode: frames per second.'),
			);
		} else {
			$form['v2wvc']['advanced']['webcam']['camfps'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->camfps) ? $form['#node']->camfps : 15,
			);
		}

		if (user_access('edit micrate')) {
			$options = array("22" => "22", "11" => "11", "44" => "44", "48" => "48");
			$form['v2wvc']['advanced']['webcam']['micrate'] = array(
				'#type' => 'select',
				'#title' => t('Micrate'),
				'#default_value' => isset($form['#node']->micrate) ? $form['#node']->micrate : 22,
				'#options' => $options,
				'#description' => t('Camera desired  mode: micrate.'),
			);
		} else {
			$form['v2wvc']['advanced']['webcam']['micrate'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->micrate) ? $form['#node']->micrate : 22,
			);
		}

		if (user_access('edit bandwidth')) {
			$form['v2wvc']['advanced']['webcam']['bandwidth'] = array(
			'#type' => 'textfield',
			'#title' => t('Bandwidth'),
			'#default_value' => isset($form['#node']->bandwidth) ? $form['#node']->bandwidth : 40960,
			'#size' => 6,
			'#maxlength' => 8,
			'#description' => t("Default bandwidth per video stream in bytes per second."),
			);
		} else {
			$form['v2wvc']['advanced']['webcam']['bandwidth'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->bandwidth) ? $form['#node']->bandwidth : 40960,
			);
		}

		if (user_access('edit maxbandwidth')) {
			$form['v2wvc']['advanced']['webcam']['maxbandwidth'] = array(
			'#type' => 'textfield',
			'#title' => t('Maximum bandwidth'),
			'#default_value' => isset($form['#node']->maxbandwidth) ? $form['#node']->maxbandwidth : 65536,
			'#size' => 6,
			'#maxlength' => 8,
			'#description' => t("Maximum bandwidth per video stream in bytes per second."),
			);
		} else {
			$form['v2wvc']['advanced']['webcam']['maxbandwidth'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->maxbandwidth) ? $form['#node']->maxbandwidth : 65536,
			);
		}

		$form['v2wvc']['advanced']['param'] = array(
			'#type' => 'fieldset',
			'#title' => t('Permissions'),
			'#tree' => TRUE,
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);

		if (user_access('edit emoticons')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['emoticons'] = array(
			'#type' => 'select',
			'#title' => t('Disabled emoticons'),
			'#default_value' => isset($form['#node']->emoticons) ? $form['#node']->emoticons : variable_get('v2wvc_emoticons3', "1"),
			'#options' => $options,
			'#description' => t('Disabled emoticons.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['emoticons'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->emoticons) ? $form['#node']->emoticons : variable_get('v2wvc_emoticons3', "1"),
			);
		}

		if (user_access('edit enablep2p')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['enablep2p'] = array(
			'#type' => 'select',
			'#title' => t('enableP2P'),
			'#default_value' => isset($form['#node']->enablep2p) ? $form['#node']->enablep2p : variable_get('v2wvc_enablep2p3', "1"),
			'#options' => $options,
			'#description' => t('enableP2P.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['enablep2p'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->enablep2p) ? $form['#node']->enablep2p : variable_get('v2wvc_enablep2p3', "1"),
			);
		}

		if (user_access('edit showtimer')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['showtimer'] = array(
			'#type' => 'select',
			'#title' => t('showTimer'),
			'#default_value' => isset($form['#node']->showtimer) ? $form['#node']->showtimer : variable_get('v2wvc_showtimer3', "1"),
			'#options' => $options,
			'#description' => t('showTimer.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['showtimer'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->showtimer) ? $form['#node']->showtimer : variable_get('v2wvc_showtimer3', "1"),
			);
		}

		if (user_access('edit sendtextchat')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['sendtextchat'] = array(
			'#type' => 'select',
			'#title' => t('sendTextchat'),
			'#default_value' => isset($form['#node']->sendtextchat) ? $form['#node']->sendtextchat : variable_get('v2wvc_sendtextchat3', "1"),
			'#options' => $options,
			'#description' => t('sendTextchat.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['sendtextchat'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->sendtextchat) ? $form['#node']->sendtextchat : variable_get('v2wvc_sendtextchat3', "1"),
			);
		}

		if (user_access('edit enableserver')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['enableserver'] = array(
			'#type' => 'select',
			'#title' => t('enableServer'),
			'#default_value' => isset($form['#node']->enableserver) ? $form['#node']->enableserver : variable_get('v2wvc_enableserver3', "1"),
			'#options' => $options,
			'#description' => t('enableServer.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['enableserver'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->enableserver) ? $form['#node']->enableserver : variable_get('v2wvc_enableserver3', "1"),
			);
		}

		if (user_access('edit showtextchat')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['showtextchat'] = array(
			'#type' => 'select',
			'#title' => t('showTextchat'),
			'#default_value' => isset($form['#node']->showtextchat) ? $form['#node']->showtextchat : variable_get('v2wvc_showtextchat3', "1"),
			'#options' => $options,
			'#description' => t('showTextchat.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['showtextchat'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->showtextchat) ? $form['#node']->showtextchat : variable_get('v2wvc_showtextchat3', "1"),
			);
		}

		if (user_access('edit enabledvideo')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['enabledvideo'] = array(
			'#type' => 'select',
			'#title' => t('enabledVideo'),
			'#default_value' => isset($form['#node']->enabledvideo) ? $form['#node']->enabledvideo : variable_get('v2wvc_enabledvideo3', "1"),
			'#options' => $options,
			'#description' => t('enabledVideo.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['enabledvideo'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->enabledvideo) ? $form['#node']->enabledvideo : variable_get('v2wvc_enabledvideo3', "1"),
			);
		}

		if (user_access('edit enabledsound')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['enabledsound'] = array(
			'#type' => 'select',
			'#title' => t('enabledSound'),
			'#default_value' => isset($form['#node']->enabledsound) ? $form['#node']->enabledsound : variable_get('v2wvc_enabledsound3', "1"),
			'#options' => $options,
			'#description' => t('enabledSound.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['enabledsound'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->enabledsound) ? $form['#node']->enabledsound : variable_get('v2wvc_enabledsound3', "1"),
			);
		}

		if (user_access('edit configuresource')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['configuresource'] = array(
			'#type' => 'select',
			'#title' => t('configureSource'),
			'#default_value' => isset($form['#node']->configuresource) ? $form['#node']->configuresource : variable_get('v2wvc_configuresource3', "1"),
			'#options' => $options,
			'#description' => t('configureSource.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['configuresource'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->configuresource) ? $form['#node']->configuresource : variable_get('v2wvc_configuresource3', "1"),
			);
		}

		if (user_access('edit configureconnection')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['configureconnection'] = array(
			'#type' => 'select',
			'#title' => t('configureConnection'),
			'#default_value' => isset($form['#node']->configureconnection) ? $form['#node']->configureconnection : variable_get('v2wvc_configureconnection3', "1"),
			'#options' => $options,
			'#description' => t('configureConnection.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['configureconnection'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->configureconnection) ? $form['#node']->configureconnection : variable_get('v2wvc_configureconnection3', "1"),
			);
		}

		if (user_access('edit showcamsettings')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['showcamsettings'] = array(
			'#type' => 'select',
			'#title' => t('showcamSettings'),
			'#default_value' => isset($form['#node']->showcamsettings) ? $form['#node']->showcamsettings : variable_get('v2wvc_showcamsettings3', "1"),
			'#options' => $options,
			'#description' => t('showcamSettings.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['showcamsettings'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->showcamsettings) ? $form['#node']->showcamsettings : variable_get('v2wvc_showcamsettings3', "1"),
			);
		}

		if (user_access('edit enablesoundfx')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['enablesoundfx'] = array(
			'#type' => 'select',
			'#title' => t('enableSoundFX'),
			'#default_value' => isset($form['#node']->enablesoundfx) ? $form['#node']->enablesoundfx : variable_get('v2wvc_enablesoundfx3', "1"),
			'#options' => $options,
			'#description' => t('enableSoundFX.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['enablesoundfx'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->enablesoundfx) ? $form['#node']->enablesoundfx : variable_get('v2wvc_enablesoundfx3', "1"),
			);
		}

		if (user_access('edit enablenext')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['enablenext'] = array(
			'#type' => 'select',
			'#title' => t('enableNext'),
			'#default_value' => isset($form['#node']->enablenext) ? $form['#node']->enablenext : variable_get('v2wvc_enablenext3', "1"),
			'#options' => $options,
			'#description' => t('enableNext.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['enablenext'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->enablenext) ? $form['#node']->enablenext : variable_get('v2wvc_enablenext3', "1"),
			);
		}

		if (user_access('edit enablebuzz')) {
			$options = array("1" => t('Yes'), "0" => t('No'));
			$form['v2wvc']['advanced']['param']['enablebuzz'] = array(
			'#type' => 'select',
			'#title' => t('enableBuzz'),
			'#default_value' => isset($form['#node']->enablebuzz) ? $form['#node']->enablebuzz : variable_get('v2wvc_enablebuzz3', "1"),
			'#options' => $options,
			'#description' => t('enableBuzz.'),
			);
		} else {
			$form['v2wvc']['advanced']['param']['enablebuzz'] = array(
			'#type' => 'hidden',
			'#default_value' => isset($form['#node']->enablebuzz) ? $form['#node']->enablebuzz : variable_get('v2wvc_enablebuzz3', "1"),
			);
		}
	} 
}


/**
 * Implementation of hook_delete().
 */
function v2wvc_node_delete($node) {
	global $user;
  if (!in_array($node->type, variable_get('v2wvc_node_types', array('v2wvc')))) {
    return;
  }
  // Notice that we're matching all revision, by using the node's nid.
	if (user_access('delete 2wayvideochat room', $user)) {
  db_delete('v2wvc_rooms')->condition('nid', $node->nid)->execute();
	}
}

/**
 * Implementation of hook_node_insert().
 */
function v2wvc_node_insert($node) {
	if (isset($node->advanced['param']['enablebuzz'])) {
		$room = check_plain($node->room);
		if ($room == variable_get('v2wvc_room_prefix', 'InstantChat')) {
			$room = variable_get('v2wvc_room_prefix', 'InstantChat') . "_" . base_convert((time() - 1225500000) . rand(0, 10), 10, 36);
		}

		$cam = explode("x", $node->advanced['webcam']['resolution']);
		$expiration = 0;
		if ($node->advanced['expire']) {
			$expiration = $node->advanced['expire'] * 3600 + time();
		}
		$welcome = nl2br($node->advanced['welcome']);
		$ztime = time();

		$id = db_insert('v2wvc_rooms')
		->fields(array(
			'vid' => $node->vid,
			'timecreated' => $ztime,
			'timelastaccess' => $ztime,
			'timeexpire' => $expiration,
			'timeout' => ($node->advanced['cleanup'] * 3600), 
			'credits' => $node->advanced['credits'], 
			'bandwidth' => $node->advanced['webcam']['bandwidth'], 
			'maxbandwidth' => $node->advanced['webcam']['maxbandwidth'], 
			'camwidth' => $cam[0], 
			'camheight' => $cam[1], 
			'camfps' => $node->advanced['webcam']['camfps'], 
			'visitors' => $node->advanced['visitors'], 
			'micrate' => $node->advanced['webcam']['micrate'],
			'filterregex' => addslashes($node->advanced['filterregex']),
			'filterreplace' => addslashes($node->advanced['filterreplace']),
			'verbose' => $node->advanced['verbose'],
			'emoticons' => $node->advanced['param']['emoticons'],
			'enablep2p' => $node->advanced['param']['enablep2p'],
			'showtimer' => $node->advanced['param']['showtimer'],
			'sendtextchat' => $node->advanced['param']['sendtextchat'],
			'enableserver' => $node->advanced['param']['enableserver'],
			'showtextchat' => $node->advanced['param']['showtextchat'],
			'enabledvideo' => $node->advanced['param']['enabledvideo'],
			'enabledsound' => $node->advanced['param']['enabledsound'],
			'configuresource' => $node->advanced['param']['configuresource'],
			'configureconnection' => $node->advanced['param']['configureconnection'],
			'showcamsettings' => $node->advanced['param']['showcamsettings'],
			'enablesoundfx' => $node->advanced['param']['enablesoundfx'],
			'enablenext' => $node->advanced['param']['enablenext'],
			'enablebuzz' => $node->advanced['param']['enablebuzz'],
			'nid' => $node->nid,
			'room' => $room,
			'welcome' => $welcome,
		))
		->execute();
		
		$options = array("attributes" => array("title" => $node->room, 'target' => '_blank'));
		$link = l($room, "node/" . $node->nid, $options);
		drupal_set_message(t('Use this link to access this 2 Way Video Chat room and invite the other participant: ') . "<BR>" . $link);
	}	
}

/**
 * Implementation of hook_node_update().
 */
function v2wvc_node_update($node) {
	if (isset($node->advanced['param']['enablebuzz'])) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    v2wvc_insert($node);
  }
  else {
		if (isset($node->room)) {
    $room = check_plain($node->room);
    if ($room == variable_get('v2wvc_room_prefix', 'InstantChat')) {
      $room = variable_get('v2wvc_room_prefix', 'InstantChat') . "_" . base_convert((time() - 1225500000) . rand(0, 10), 10, 36);
    }

    $cam = explode("x", $node->advanced['webcam']['resolution']);
    $expiration = 0;
    if ($node->advanced['expire']) {
      $expiration = $node->advanced['expire'] * 3600 + time();
    }
    $welcome = nl2br($node->advanced['welcome']);
    $ztime = time();

		$id = db_update('v2wvc_rooms')
		->fields(array(
			'timecreated' => $ztime,
			'timelastaccess' => $ztime,
			'timeexpire' => $expiration,
			'timeout' => ($node->advanced['cleanup'] * 3600), 
			'credits' => $node->advanced['credits'], 
			'bandwidth' => $node->advanced['webcam']['bandwidth'], 
			'maxbandwidth' => $node->advanced['webcam']['maxbandwidth'], 
			'camwidth' => $cam[0], 
			'camheight' => $cam[1], 
			'camfps' => $node->advanced['webcam']['camfps'], 
			'visitors' => $node->advanced['visitors'], 
			'micrate' => $node->advanced['webcam']['micrate'],
			'filterregex' => addslashes($node->advanced['filterregex']),
			'filterreplace' => addslashes($node->advanced['filterreplace']),
			'verbose' => $node->advanced['verbose'],
			'emoticons' => $node->advanced['param']['emoticons'],
			'enablep2p' => $node->advanced['param']['enablep2p'],
			'showtimer' => $node->advanced['param']['showtimer'],
			'sendtextchat' => $node->advanced['param']['sendtextchat'],
			'enableserver' => $node->advanced['param']['enableserver'],
			'showtextchat' => $node->advanced['param']['showtextchat'],
			'enabledvideo' => $node->advanced['param']['enabledvideo'],
			'enabledsound' => $node->advanced['param']['enabledsound'],
			'configuresource' => $node->advanced['param']['configuresource'],
			'configureconnection' => $node->advanced['param']['configureconnection'],
			'showcamsettings' => $node->advanced['param']['showcamsettings'],
			'enablesoundfx' => $node->advanced['param']['enablesoundfx'],
			'enablenext' => $node->advanced['param']['enablenext'],
			'enablebuzz' => $node->advanced['param']['enablebuzz'],
			'room' => $room,
			'welcome' => $welcome,
		))
		->condition('nid', $node->nid)
		->execute();
		}
  }
	}
}

/**
 * Implementation of hook_load().
 */
function v2wvc_node_load($nodes, $types) {
  $result = db_query('SELECT * FROM {v2wvc_rooms} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->room = $record->room;
    $nodes[$record->nid]->welcome = $record->welcome;
    $nodes[$record->nid]->camfps = $record->camfps;
    $nodes[$record->nid]->camwidth = $record->camwidth;
    $nodes[$record->nid]->camheight = $record->camheight;
    $nodes[$record->nid]->bandwidth = $record->bandwidth;
    $nodes[$record->nid]->maxbandwidth = $record->maxbandwidth;
    $nodes[$record->nid]->timeused = $record->timeused;
    $nodes[$record->nid]->credits = $record->credits;
    $nodes[$record->nid]->timecreated = $record->timecreated;
    $nodes[$record->nid]->timelastaccess = $record->timelastaccess;
    $nodes[$record->nid]->timeexpire = $record->timeexpire;
    $nodes[$record->nid]->timeout = $record->timeout;
    $nodes[$record->nid]->micrate = $record->micrate;
    $nodes[$record->nid]->visitors = $record->visitors;
    $nodes[$record->nid]->filterregex = $record->filterregex;
    $nodes[$record->nid]->filterreplace = $record->filterreplace;
    $nodes[$record->nid]->verbose = $record->verbose;
    $nodes[$record->nid]->emoticons = $record->emoticons;
    $nodes[$record->nid]->enablep2p = $record->enablep2p;
    $nodes[$record->nid]->showtimer = $record->showtimer;
    $nodes[$record->nid]->sendtextchat = $record->sendtextchat;
    $nodes[$record->nid]->enableserver = $record->enableserver;
    $nodes[$record->nid]->showtextchat = $record->showtextchat;
    $nodes[$record->nid]->enabledvideo = $record->enabledvideo;
    $nodes[$record->nid]->enabledsound = $record->enabledsound;
    $nodes[$record->nid]->configuresource = $record->configuresource;
    $nodes[$record->nid]->configureconnection = $record->configureconnection;
    $nodes[$record->nid]->showcamsettings = $record->showcamsettings;
    $nodes[$record->nid]->enablenext = $record->enablenext;
    $nodes[$record->nid]->enablebuzz = $record->enablebuzz;
  }
}

/**
 * Implementation of hook_view().
 */
function v2wvc_node_view($node, $view_mode) {
  global $base_url, $user;
  $url = $base_url . variable_get('v2wvc_path', "/2wvc/") . "2wvideochat.php";
	
	if (isset($node->enablebuzz) && $view_mode == 'full' && node_is_page($node)) {
		if (!$node->visitors && !isset($user->name)) {
			$disabled_content = t('Instant access to visitors is disabled. You need to be registered and logged into this website to access this room.');
			// Add the output to the node.
			$node->content['body'] = array(
				'#value' => $disabled_content,
			);
			$node->content['v2wvc'] = array(
				'#markup' => $disabled_content,
			);

		} else {
		$options        = array("attributes" => array("title" => $node->room, 'target' => '_blank'));
		$link           = l($node->room, "node/". $node->nid, $options);
		$access_content = t('Use this link to access this 2 Way Video Chat room and invite the other participant: ') ."<BR>". $link;

		$stats_content = t('Resolution') .": ". $node->camwidth ."x". $node->camheight . "@" . $node->camfps . "<BR>" . t('Bandwidth') . ": " . $node->bandwidth . "/" . $node->maxbandwidth . t(' bytes/s') . "<BR>" . t('Streaming time used') . ": " . floor($node->timeused / 60000) . t(' minutes') . "<BR>" . t('Credits') . ": " . ($node->credits ? ($node->credits . t(' minutes')) : t('unlimited'));
		$form = $access_content . "<BR />" . $stats_content. "<br /><br />";
		
		$form .= '<form enctype="multipart/form-data" id="v2wvc-start-form" method="post" accept-charset="UTF-8" action="'.$url.'">
		<div><div id="edit-username-wrapper" class="form-item">
		 <label for="edit-username">Username: </label>
		 <input type="text" class="form-text" value="'.(isset($user->name) ? $user->name : "Guest").'" size="24" id="edit-username" name="username" maxlength="64">
		 <div class="description">Username as you want it displayed within the chat.</div>
		</div>
		<input type="hidden" value="'.$node->room.'" id="edit-r" name="r">
		<input type="submit" class="form-submit" value="Enter Video Chat" id="edit-submit" name="op">

		</div></form>';

		// Add the output to the node.
		$node->content['v2wvc'] = array(
			'#markup' => $form,
		);
		}
	} else {
		return false;
	}
}

