<?php

/**
 * @file
 * Defines etrans shipping method and service for Drupal commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_etrans_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/methods/etrans/edit'] = array(
    'title' => 'Edit',
    'description' => 'Adjust Etrans shipping settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_etrans_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'includes/commerce_etrans.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function commerce_etrans_libraries_info() {
  $libraries = array();

  $libraries['etrans'] = array(
    'name' => 'Etrans PHP SDK',
    'vendor url' => 'http://www.etrans.com.ar',
    'download url' => 'http://www.etrans.com.ar',
    'version arguments' => array(
      'file' => 'etrans.php',
      'pattern' => '@const version = "([0-9\.]+)";@',
      'lines' => 30,
    ),
    'files' => array(
      'php' => array(
        'etrans.php',
      ),
    ),
    'integration files' => array(
      'commerce_etrans' => array(
        'php' => array(
          'includes/commerce_etrans.service.inc',
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_etrans_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['etrans'] = array(
    'title' => t('Etrans'),
    'description' => t('Etrans ships packages from and to CABA and GBA, visit !url for more info.', array('!url' => '<a href="http://www.etrans.com.ar">etrans</a>')),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_etrans_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['etrans_home_delivery'] = array(
    'title' => t('Home delivery'),
    'description' => t('Direct delivery with various possible delivery time windows.'),
    'display_title' => t('Area 54 Home delivery'),
    'shipping_method' => 'etrans',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'commerce_etrans_service_rate',
      'details_form' => 'commerce_etrans_service_details_form',
      'details_form_validate' => 'commerce_etrans_service_details_form_validate',
      'details_form_submit' => 'commerce_etrans_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_etrans_service_rate($shipping_service, $order) {
  if (($library = libraries_load('etrans')) && !empty($library['loaded'])) {
    try {
      $etrans = new CommerceEtransConnector();
      $shipment = $etrans->crearParametros($order);
      return array(
        'amount' => $shipment['amount'],
        'currency_code' => $shipment['currency'],
        'data' => array(),
      );
    }
    catch (CommerceEtransUnsupportedDestinationException $e) {
      return FALSE;
    }
    catch (Exception $e) {
      watchdog_exception('commerce_etrans', $e);
    }
  }
}

/**
 * Shipping service callback: returns the example shipping service details form.
 */
function commerce_etrans_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();

  // Set defaults for our fields.
  $pane_values['service_details'] += array(
    'delivery_time' => '',
  );

  $form['delivery_time'] = array(
    '#type' => 'select',
    '#title' => t('Delivery time'),
    '#description' => t('Choose the desired delivery time window.'),
    '#empty_value' => '',
    '#empty_option' => t('Please select'),
    '#options' => commerce_etrans_delivery_times(),
    '#default_value' => $pane_values['service_details']['delivery_time'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Returns an array with possible delivery times.
 */
function commerce_etrans_delivery_times() {
  return array(
    '1' => t('Between @from and @to.', array('@from' => '8:00', '@to' => '13:00hs')),
    '2' => t('Between @from and @to.', array('@from' => '13:00', '@to' => '18:00hs')),
    '3' => t('Between @from and @to.', array('@from' => '18:00', '@to' => '23:00hs')),
  );
}

/**
 * Returns an array with possible pickup times.
 */
function commerce_etrans_pickup_times() {
  return array(
    '1' => t('Between @from and @to.', array('@from' => '8:00', '@to' => '13:00hs')),
    '2' => t('Between @from and @to.', array('@from' => '13:00', '@to' => '18:00hs')),
  );
}

/**
 * Returns an array with possible insurance types.
 */
function commerce_etrans_insurance_types() {
  return array(
    '0' => t('No insurance'),
    '1' => t('Self-insurance'),
    '2' => t('Etrans'),
  );
}

/**
 * Returns the shipping address of the order.
 */
function commerce_etrans_get_order_shipping_address($order) {
  $shipping_address = array();
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the shipping profile reference field name for the order.
  $field_name = commerce_physical_order_shipping_field_name($order);

  // Prepare the shipping address for use in the request.
  if (!empty($order_wrapper->{$field_name}->commerce_customer_address)) {
    $shipping_address = $order_wrapper->{$field_name}->commerce_customer_address->value();
  }

  return $shipping_address;
}

/**
 * Returns the shipping details for $order if the shipping method is etrans,
 * FALSE otherwise.
 */
function commerce_etrans_get_order_shipping_details($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if ($line_item_wrapper->type->value() == 'shipping') {
      $data = $line_item_wrapper->value()->data;
      if ($data['shipping_service']['shipping_method'] == 'etrans') {
        return $data['service_details'];
      }
    }
  }
  return FALSE;
}

/**
 * Determines the weight for a product.
 *
 * The weight returned is always in kg (the unit expected by etrans).
 */
function commerce_etrans_product_weight($product) {
  $weight = NULL;

  if (!empty($product)) {
    // If the product has a valid weight field...
    $field_name = commerce_physical_entity_weight_field_name('commerce_product', $product);

    if (!empty($field_name) && !empty($product->{$field_name})) {
      // Extract the weight value from the product.
      $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
      $weight = $product_wrapper->{$field_name}->value();

      // Convert to kg.
      $weight = physical_weight_convert($weight, 'kg');
    }
  }

  return $weight;
}

/**
 * Determines the dimensions for a product.
 *
 * The dimensions returned are always in cm (the unit expected by etrans).
 */
function commerce_etrans_product_dimensions($product) {
  $dimensions = NULL;

  if (!empty($product)) {
    // If the product has a valid dimensions field...
    $field_name = commerce_physical_entity_dimensions_field_name('commerce_product', $product);

    if (!empty($field_name) && !empty($product->{$field_name})) {
      // Extract the dimensions value from the product.
      $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
      $dimensions = $product_wrapper->{$field_name}->value();

      // Convert to cm.
      $dimensions = physical_dimensions_convert($dimensions, 'cm');
    }
  }

  return $dimensions;
}

/**
 * Determines the price for a product.
 *
 * The price returned is always in ARS (the currency expected by etrans).
 */
function commerce_etrans_product_price($product) {
  $price = NULL;

  if (!empty($product)) {
    if (!empty($product->commerce_price)) {
      // Extract the dimensions value from the product.
      $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
      $price = $product_wrapper->commerce_price->value();

      // Convert to ARS.
      $price['amount'] = commerce_currency_convert($price['amount'], $price['currency_code'], 'ARS');
      $price['currency_code'] = 'ARS';
    }
  }

  return $price;
}
