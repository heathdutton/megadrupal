<?php

/**
 * @file
 * Provides integration with the xCSS library.
 */
 
/**
 * Implements hook_libraries_info().
 */
function xcss_libraries_info() {
  $libraries['xcss'] = array(
    'name' => 'xCSS',
    'vendor url' => 'http://xcss.antpaw.org/',
    'download url' => 'http://xcss.antpaw.org/current_version',
    // Automated downloading of the library via Drush Make.
    'download' => array(
      'type' => 'get',
      'url' => 'http://xcssframework.googlecode.com/files/xcss-1.0.1.zip',
    ),
    // Version:  v1.0.1
    'version arguments' => array(
      'file' => 'README.txt',
      'pattern' => '@Version:\tv([0-9].[0-9].[0-9])@',
      'lines' => 4,
      'cols' => 50,
    ),
    'files' => array(
      'php' => array(
        // Note that before loading this library, you are required to define a
        // XCSSCLASS constant.
        'xcss-class.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_help().
 */
function xcss_help($path, $arg) {
 switch ($path) {
    // Main module help for the block module
    case 'admin/config/development/xcss':
      $output = '<p>' . t('The <a href="@xcss">xCSS Framework</a> empowers a straightforward and object-oriented workflow when developing complex style cascades. Using xCSS means a dramatic cut down to your development time by: having a intuitive overview of the overall CSS structure, using variables, re-using existing style cascades and many other handy features. This module processes all *.xcss files through the framework.', array('@xcss' => 'http://xcss.antpaw.org')) . '</p>';
      $output .= '<p class="specialClass">If this text has a red background, then xCSS is <em class="mathselector">working properly</em>.</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function xcss_menu() {
  $items['admin/config/development/xcss'] = array(
    'title' => 'xCSS',
    'description' => 'Configure how the xCSS library compiles cascading stylesheet across your website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xcss_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'xcss.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_css_alter().
 */
function xcss_css_alter(&$css) {
  static $loaded = NULL;

  // xCSS only works if we can create new public files.
  $directory = 'public://xcss';
  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS)) {
    // Retrieve a list of all xCSS files that need processing.
    $files = array();
    foreach ($css as $data => $options) {
      // Only act on .xcss files.
      if ($options['type'] == 'file' && substr($data, -5) == '.xcss') {
        // Swap out the CSS file with the xCSS generated file.
        $destination = variable_get('file_public_path', conf_path() . '/files') . '/xcss/' . basename($data, '.xcss') . '.css';
        $css[$data]['data'] = $destination;
        // Tell xCSS to generate the file if it doesn't exist yet.
        if (!file_exists($destination)) {
          $files[$data] = $destination;
        }
      }
    }
    // Process the xCSS files if there are any to process.
    if (!empty($files)) {
      // Generate relative from the Drupal root directory.
      $config['path_to_css_dir'] = './';
      $config['minify_output'] = variable_get('xcss_minify_output', FALSE);
      $config['debugmode'] = variable_get('xcss_debugmode', FALSE);
      $config['use_master_file'] = FALSE;
      $config['compress_output_to_master'] = FALSE;
      $config['master_filename'] = variable_get('file_public_path', conf_path() . '/files') . '/xcss/master.css';
      $config['xCSS_files'] = $files;
      define('XCSSCLASS', TRUE);

      // Try to load xCSS.
      if (!isset($loaded)) {
        // Try loading via Composer first.
        $loaded = @include_once(__DIR__ . '/vendor/autoload.php');
        // If it failed loading through Composer, then try with Libraries API.
        if ($loaded === FALSE) {
          $library = libraries_load('xcss');
          $loaded = $library['loaded'] > 0;
        }
      }

      // If it succeeded to load, then process the xCSS.
      if ($loaded) {
        $xcss = new xCSS($config);
        $xcss->compile();
      }
    }
  }
}

/**
 * Implement hook_flush_caches().
 */
function xcss_flush_caches() {
  // Clear the public://xcss directory.
  file_unmanaged_delete_recursive('public://xcss/');
}
