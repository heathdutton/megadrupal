<?php

/**
 * @file
 * Main file for observer module.
 */

/**
 * Implements hook_init().
 */
function observer_init() {
  observer_register_observers();
}

// Helpers
// -----------------------------------------------------------------------------

/**
 * Registers observers to the global observable.
 */
function observer_register_observers() {
  $observable = observer_observable();
  $observers = module_invoke_all('observer_info');

  drupal_alter('observer_info', $observers);

  foreach ($observers as $observer) {
    $observable->registerObserver($observer);
  }
}

/**
 * Gets the global observable instance.
 *
 * @return ObserverObservable
 */
function observer_observable() {
  $observable = &drupal_static(__FUNCTION__, FALSE);

  if (!$observable) {
    $observable = new ObserverObservable();
  }

  return $observable;
}

/**
 * Notify all observers in the global observable.
 *
 * @param $type
 *  The event type.
 * @param $data
 *  The event data.
 */
function observer_notify($type, $data) {
  $event = new ObserverEvent($type, $data);

  observer_observable()->notifyObservers($event);
}

// Notification Triggers
// -----------------------------------------------------------------------------

/**
 * Implements hook_entity_insert().
 */
function observer_entity_insert($entity, $type) {
  observer_notify("{$type}:inserted", $entity);
}

/**
 * Implements hook_entity_update().
 */
function observer_entity_update($entity, $type) {
  observer_notify("{$type}:updated", $entity);
}

/**
 * Implements hook_entity_delete().
 */
function observer_entity_delete($entity, $type) {
  observer_notify("{$type}:deleted", $entity);
}

/**
 * Implements hook_user_login().
 */
function observer_user_login(&$edit, $login) {
  observer_notify(ObserverEventTypes::USER_LOGIN, $login);
}

/**
 * Implements hook_user_logout().
 */
function observer_user_logout($account) {
  observer_notify(ObserverEventTypes::USER_LOGOUT, $account);
}

/**
 * Implements hook_flag().
 */
function observer_flag($op, $flag, $content_id, $account, $fcid) {
  $data = array(
    'flag' => $flag,
    'content_id' => $content_id,
    'account' => $account,
    'fcid' => $fcid
  );

  switch ($op) {
    case 'flag':
      observer_notify(ObserverEventTypes::FLAG_FLAG, $data);

      break;

    case 'unflag':
      observer_notify(ObserverEventTypes::FLAG_UNFLAG, $data);

      break;
  }
}
