<?php
/**
 * @file
 * Let Drupal show the last page of comments of a node.
 *
 * Defaults to the last page of comments of a node (instead of the first) if
 * a more specific page is not requested.
 */

define('GOTOLASTPAGE_FRAGMENT', 'comments');
define('GOTOLASTPAGE_MAXPAGE', '99999999');


/**
 * Implements hook_menu().
 */
function gotolastpage_menu() {

  // Admin config item.
  $items['admin/config/system/gotolastpage'] = array(
    'title' => 'Last Comments Page',
    'description' => 'Configure module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gotolastpage_admin_settings', NULL),
    'access arguments' => array('administer gotolastpage'),
    'file' => 'gotolastpage.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function gotolastpage_permission() {
  return array(
    'administer gotolastpage' => array(
      'title' => t('Administer Redir to last page module'),
    ),
  );
}


/**
 * Implements hook_module_implements_alter().
 *
 * Ensure that this module's hooks are executed as first.
 */
function gotolastpage_module_implements_alter(&$implementations, $hook) {
  // Move this module hook_node_view implementation to top of execution order.
  if ($hook == 'node_view') {
    $hook = $implementations['gotolastpage'];
    unset($implementations['gotolastpage']);
    $implementations = array('gotolastpage' => $hook) + $implementations;
  }
}


/**
 * Implements hook_node_view().
 *
 * Intercept node loading and add the "page" query parameter if missing,
 * only on enabled node types.
 *
 * Drupal considers a missing 'page' query parameter like the first page
 * (page 0). The only way to change this behavior without patching core files is
 * to fool pager and ask it to return a very large page number by adding it
 * to the URI (only if no page parameter already exists).
 *
 * There's no need to set the right (last) page number, because pager will limit
 * it to the max page count when needed. Again, at this point we can't know how
 * many records/pages will be rendered.
 */
function gotolastpage_node_view($node, $view_mode, $langcode) {

  // Exit if this node type is not enabled.
  $enabled_types = variable_get('gotolastpage_nodetypes', FALSE);
  if ($enabled_types && !in_array($node->type, $enabled_types)) {
    return;
  }

  // Set static flag to tell the subsequent function we're active.
  $active = &drupal_static('gotolastpage_active');
  $active = TRUE;

  // Edit requested URI adding a large page number if no 'page'
  // parameter already exists. This hack will lead the pager functions act as
  // the user requested the last page.
  if (!isset($_GET['page'])) {
    // Page number will be truncated to max page count later by pager.
    $_GET['page'] = GOTOLASTPAGE_MAXPAGE;
  }

}


/**
 * Implements hook_node_view_alter().
 *
 * Alters the pagers being rendered adding an additional post_render function.
 * This function will add a custom fragment to rendered pager links.
 */
function gotolastpage_node_view_alter(&$build) {

  // Test if we're active for this node.
  if (drupal_static('gotolastpage_active', FALSE)) {

    // Now test if a fragment must be added.
    $fragment = variable_get('gotolastpage_fragment', GOTOLASTPAGE_FRAGMENT);
    if (!empty($fragment) && !empty($build['comments'])) {

      // Add our custom post_render function to all pagers.
      $children = _gotolastpage_get_pagers($build['comments']);
      foreach ($children as &$pager) {
        $pager['#post_render'][] = 'gotolastpage_pager_link_append_fragment';
      }

    }

  }

}


/**
 * Patch pager output to add our custom fragment.
 *
 * Sadly theme_pager_link() gives no possibility to callers to set URI fragment
 * part because the only argument passed to uri() call is 'query'.
 * So we need to add this #post_render function to all pagers being rendered
 * by current request (see gotolastpage_node_view()) and add the fragment with
 * a preg_replace() call.
 *
 * @param string $children
 *   Content of the pager element (rendered HTML).
 * @param array $element
 *   The pager element.
 *
 * @return string
 *   Patched HTML content with custom fragment added.
 */
function gotolastpage_pager_link_append_fragment($children, $element) {
  // Patch theme output to add our custom fragment.
  $fragment = variable_get('gotolastpage_fragment', GOTOLASTPAGE_FRAGMENT);
  return preg_replace(
    '/(href\s*=\s*[\"\'].*)([\"\'])/',
    '$1#' . check_plain($fragment) . '$2',
    $children
  );
}


/**
 * Implements hook_url_outbound_alter().
 *
 * Remove our fake page number from query parameters of outbound URLs.
 * Since we patched $_GET array to let Drupal (and its pager) think the user
 * requested the last page, URLs rendered by url() and l() calls will contain
 * this fake page number too.
 * This function will remove it.
 */
function gotolastpage_url_outbound_alter(&$path, &$options, $original_path) {
  if (drupal_static('gotolastpage_active', FALSE)
      && isset($options['query']['page'])
      && $options['query']['page'] == GOTOLASTPAGE_MAXPAGE) {
    unset($options['query']['page']);
  }
}


/**
 * Add the now-required page=0 to pager "first page" link.
 *
 * Drupal pager won't add the 'page' parameter to first page links, because by
 * default "no page" means "first page".
 * Since we changed this behavior, now first page needs to have an explicit
 * page=0 parameter added.
 */
function gotolastpage_preprocess_pager_first(&$variables) {
  if (drupal_static('gotolastpage_active', FALSE)) {
    $variables['parameters']['page'] = 0;
  }
}


/**
 * Returns all children with #theme='pager' of the given element.
 *
 * @param array $element
 *   Render element to search into.
 *
 * @return array
 *   Pager elements found.
 */
function _gotolastpage_get_pagers(&$element) {

  $results = array();
  $children = element_children($element);

  foreach ($children as $key) {
    $child = &$element[$key];
    if (is_array($child)) {
      if (!empty($child['#theme']) && $child['#theme'] == 'pager') {
        $results[] = &$child;
      }
      $results = array_merge($results, _gotolastpage_get_pagers($child));
    }
  }

  return $results;

}
