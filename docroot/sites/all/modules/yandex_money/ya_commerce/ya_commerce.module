<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function ya_commerce_commerce_payment_method_info() {
  $payment_methods = array();

  $icon = theme('image', array(
    'path' => drupal_get_path('module', 'ya_commerce') . '/images/yandex-logo.png',
    'attributes' => array('class' => array('ya-commerce-logo')),
  ));
  $display_title = t('Yandex.Kassa') . '<br/>' . $icon;

  $payment_methods['ya_commerce'] = array(
    'base' => 'ya_commerce',
    'title' => t('Yandex.Money'),
    'short_title' => t('Yandex'),
    'display_title' => $display_title,
    'description' => t('Integration with Yandex.Money.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_method_settings_form().
 */
function ya_commerce_settings_form($settings = array()) {
  $form['widget'] = array(
    '#type' => 'radios',
    '#title' => t('Widget type'),
    '#default_value' => isset($settings['widget']) ? $settings['widget'] : 'select',
    '#options' => array(
      'select' => 'Select list',
      'radios' => 'Radio buttons',
      'images' => 'Images',
    ),
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function ya_commerce_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $disabled = FALSE;
  $methods = yamoney_get_enabled_payment_methods();
  if (count($methods) === 1) {
    $disabled = TRUE;
  }

  $default_value = variable_get('yamoney_default_payment_method', YAMONEY_DEFAULT_PAYMENT_METHOD);
  if (isset($pane_values['payment_details']['payment_method'])) {
    $default_value = $pane_values['payment_details']['payment_method'];
  }

  if (!isset($payment_method['settings']['widget'])) {
    $payment_method['settings']['widget'] = 'select';
  }

  switch ($payment_method['settings']['widget']) {
    case 'select':
      $form['payment_method'] = array(
        '#type' => 'select',
        '#title' => t('Select your payment type:'),
        '#default_value' => $default_value,
        '#options' => $methods,
        '#disabled' => $disabled,
      );
      break;

    case 'radios':
      $options = array();
      foreach ($methods as $key => $title) {
        $options[$key] = '<span class="ya-commerce__method ya-commerce__method_'.$key.'">'.$title.'</span>';
      }
      $form['payment_method'] = array(
        '#type' => 'radios',
        '#title' => t('Select your payment type:'),
        '#default_value' => $default_value,
        '#options' => $options,
        '#disabled' => $disabled,
      );
      break;

    case 'images':
      $options = array();
      $path = drupal_get_path('module', 'ya_commerce') . '/images/';
      foreach ($methods as $key => $title) {
        $options[$key] = '';

        $options[$key] = '<span class=" ya-commerce__method_'.$key.'">';

        $options[$key] = theme('image', array(
            'path' => $path . 'icon-'.$key.'.png',
            'attributes' => array(
              'class' => array('ya-commerce__method-icon')
            ),
          ));

        $options[$key] .= '<span class="ya-commerce__method-title">'.$title.'</span>';

        $options[$key] .= '</span>';
      }
      $form['payment_method'] = array(
        '#type' => 'radios',
        '#title' => t('Select your payment type:'),
        '#default_value' => $default_value,
        '#options' => $options,
        '#disabled' => $disabled,
      );
      break;
  }

  return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function ya_commerce_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['ya_commerce'] = $pane_values;
}


/**
 * Payment method callback: redirect form.
 *
 * A wrapper around the module's general use function for building a submit form.
 */
function ya_commerce_redirect_form($form, &$form_state, $order, $payment_method) {
  global $user;

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $amount = $order_wrapper->commerce_order_total->amount->value();
  $amount = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

  $transaction = new YAMoneyTransaction();
  $transaction->uid = isset($user->uid) ? $user->uid : 0;
  $transaction->uid = isset($user->uid) ? $user->uid : '';
  $transaction->amount = $amount;
  $transaction->mail = isset($user->mail) ? $user->mail : '';
  $transaction->order_id = $order->order_id;
  if (!yamoney_transaction_save($transaction)) {
    $error_message = t('Can not save transaction.');

    // create failure commerce transaction
    ya_commerce_create_commerce_transaction($transaction, COMMERCE_PAYMENT_STATUS_FAILURE, '');

    // show message to the user
    drupal_set_message(t('Payment failed: %message', array('%message' => $error_message)), 'error');

    // log error to watchdog
    watchdog('ya_commerce', 'Payment failed: %message', array('%message' => $error_message), WATCHDOG_WARNING);

    // redirect back to checkout
    $cancel_url = ya_commerce_get_checkout_url($order, false);
    drupal_goto($cancel_url);
  }

  $target_url = yamoney_get_order_submission_url();
  $params = yamoney_get_order_submission_params($transaction);

  $form = array();
  $form['#action'] = $target_url;
  foreach ($params as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit order'),
  );

  return $form;
}

/**
 * Payment method callback: redirect form return validation.
 */
function ya_commerce_redirect_form_validate($order, $payment_method) {
  return TRUE;
}

/**
 * Implements hook_yamoney_shop_params_alter().
 * @param $params
 */
function ya_commerce_yamoney_shop_params_alter(&$params) {
  $order = commerce_order_load($params['order_id']);

  // Selected payment method
  $params['paymentType'] = $order->data['ya_commerce']['payment_method'];

  // Return to the payment redirect page for processing successful payments
  $params['shopSuccessURL'] = ya_commerce_get_checkout_url($order, true);

  // Return to the previous page when payment is canceled
  $params['shopFailURL'] = ya_commerce_get_checkout_url($order, false);
}

/**
 * Implements hook_yamoney_quick_params_alter().
 * @param $params
 */
function ya_commerce_yamoney_quick_params_alter(&$params) {
  $order = commerce_order_load($params['order_id']);

  // Selected payment method
  $params['paymentType'] = $order->data['ya_commerce']['payment_method'];
}

/**
 * Process successful payment to update Commerce entities.
 * Implements hook_yamoney_process_payment_alter().
 * @param array $payment
 */
function ya_commerce_yamoney_process_payment_alter(&$payment) {
  /** @var YAMoneyTransaction $transaction */
  $transaction = $payment['transaction'];
  $order = commerce_order_load($transaction->order_id);
  if ($order) {
    ya_commerce_create_commerce_transaction($transaction, COMMERCE_PAYMENT_STATUS_SUCCESS, '', array(), $payment['request']);
    $payment['success'] = TRUE;
  }
  else {
    $payment['success'] = FALSE;
    $payment['error'] = 'Can not find order with id ' . $transaction->order_id;
  }
}

/**
 * @param YAMoneyTransaction $transaction
 * @param string $status
 * @param string $message
 * @param array $message_params
 * @param null $request
 * @return bool
 */
function ya_commerce_create_commerce_transaction(YAMoneyTransaction $transaction, $status, $message = '', $message_params = array(), $request = null) {
  $order = commerce_order_load($transaction->order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $payment_method_instance_id = 'ya_commerce|commerce_payment_ya_commerce';

  // Prepare a transaction object to log the API response.
  $commerce_transaction = commerce_payment_transaction_new('ya_commerce', $order->order_id);
  $commerce_transaction->instance_id = $payment_method_instance_id;
  $commerce_transaction->uid = $transaction->uid;
  $commerce_transaction->remote_id = $transaction->ymid;
  $commerce_transaction->message = $message;
  $commerce_transaction->message_variables = $message_params;
  $commerce_transaction->amount = $transaction->amount * 100;
  $commerce_transaction->currency_code = $currency_code;
  $commerce_transaction->status = $status;
  $commerce_transaction->remote_status = $transaction->status;

  if ($request) {
    $commerce_transaction->payload[REQUEST_TIME] = $request;
  }

  // Save the transaction information.
  return !!commerce_payment_transaction_save($commerce_transaction);
}

/**
 * @param stdClass $order
 * @param bool $success
 * @return string
 */
function ya_commerce_get_checkout_url($order, $success = true) {
  return url('checkout/' . $order->order_id . '/payment/'.($success ? 'return' : 'back').'/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
}

/**
 * Implements hook_yamoney_complete();
 */
function ya_commerce_yamoney_complete() {
  if (isset($_GET['shopSuccessURL'])) {
    drupal_goto($_GET['shopSuccessURL']);
  }
}

/**
 * Implements hook_yamoney_fail();
 */
function ya_commerce_yamoney_fail() {
  if (isset($_GET['shopFailURL'])) {
    drupal_goto($_GET['shopFailURL']);
  }
}
