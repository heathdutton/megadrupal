<?php

/**
 * @file
 * Performs a availability checks on servers as defined.
 */

define('SERVER_MONITOR_DATE_FORMAT', 'Y-m-d H:i:s');
define('SERVER_MONITOR_DEFAULT_TIMEOUT', 3);

/**
 * Implements hook_cron().
 */
function server_monitor_cron() {
  if (variable_get('server_monitor_cron', 1)) {
    server_monitor_check_all();
  }
}

/**
 * Implements hook_theme().
 */
function server_monitor_theme($existing, $type, $theme, $path) {
  return array(
    'server_monitor_admin_form_table' => array(
      'render element' => 'element',
    ),
    'server_monitor_status' => array(
      'attributes' => array('status' => NULL, 'tooltip' => NULL, 'absolute_url' => NULL, 'timestamp' => NULL),
    ),
  );
}

/**
 * Theme the server monitor status.
 */
function theme_server_monitor_status($attributes = array()) {
  $date_time = date(SERVER_MONITOR_DATE_FORMAT, $attributes['timestamp']);
  $attributes['absolute_url'] = !isset($attributes['absolute_url']) ? TRUE : $attributes['absolute_url'];

  if ($attributes['status'] == 1) {
    $image_title = $image_alt = t('Server status is up. Last checked: @date', array(
      '@date' => $date_time,
    ));
    $image_path = $attributes['absolute_url'] ?
      url(drupal_get_path('module', 'server_monitor') . '/images/up.png', array(
        'absolute' => TRUE,
      )) : drupal_get_path('module', 'server_monitor') . '/images/up.png';
  }
  elseif ($attributes['status'] == -1) {
    if ($attributes['timestamp']) {
      $image_title = $image_alt = t('Server status is unknown. Last checked: @date', array(
        '@date' => $date_time,
      ));
    }
    else {
      $image_title = $image_alt = t('Server status is unknown. Server status has never been checked.');
    }
    $image_path = $attributes['absolute_url'] ?
      url(drupal_get_path('module', 'server_monitor') . '/images/unknown.png', array(
        'absolute' => TRUE,
      )) : drupal_get_path('module', 'server_monitor') . '/images/unknown.png';
  }
  else {
    $image_title = $image_alt = t('Server status is down. Last checked: @date', array(
      '@date' => $date_time,
    ));
    $image_alt = t('Server status is down');
    $attributes['alt'] = t('Server status is down');
    $image_path = $attributes['absolute_url'] ?
      url(drupal_get_path('module', 'server_monitor') . '/images/down.png', array(
        'absolute' => TRUE,
      )) : drupal_get_path('module', 'server_monitor') . '/images/down.png';
  }
  return theme('image', array(
    'path' => $image_path,
    'alt' => $image_alt,
    'title' => $image_alt,
    ));
}

/**
 * Theme the administration form (for draggable table).
 */
function theme_server_monitor_admin_form_table($vars) {
  $element = $vars['element'];
  $output = '';
  $table_rows = array();

  foreach ($element as $id => $row) {
    // This will skip the row,if $id is not an integer.
    if (is_numeric($id) !== FALSE) {
      $cols = array();
      // Rendering the elements into the table.
      $cols[] = drupal_render($row['name']);
      $cols[] = drupal_render($row['address']);
      $cols[] = drupal_render($row['method']);
      $cols[] = drupal_render($row['status']);
      $cols[] = drupal_render($row['action']);
      $cols[] = drupal_render($row['weight']);
      $table_rows[] = array('data' => $cols, 'class' => array('draggable'));
    }
  }

  if (!count($table_rows)) {
    $table_rows[][] = array('data' => t('No Servers are currently configured.'), 'colspan' => 6);
  }
  // Headers for the table.
  $header = array(
    t('Name'),
    t('Address'),
    t('Method'),
    t('Status'),
    t('Action'),
    t('Weight'),
  );
  // Set the table id.
  $table_id = 'serverlist_drag_drop';

  // Get the table drag and drop javascript behaviour.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'rank-weight');

  // Generates the theme for the table.

  return theme('table', array(
    'header' => $header,
    'rows' => $table_rows,
    'attributes' => array('id' => $table_id),
  ));
}

/**
 * Implements hook_permission().
 */
function server_monitor_permission() {
  return array(
    'administer server monitor' => array(
      'title' => t('Administer server monitor'),
      'description' => t('Administer Server Monitor module configuration'),
    ),
    'add/edit server monitor' => array(
      'title' => t('Add/edit server monitor'),
      'description' => t('Add or Edit a server monitor.'),
    ),
    'delete server monitor' => array(
      'title' => t('Delete server monitor'),
      'description' => t('Delete a server monitor.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function server_monitor_menu() {
  $menu_base = 'admin/config/services/server_monitor';
  $menu_offset = count(explode('/', $menu_base));
  $items = array();
  $items['server_monitor/status.json'] = array(
    'title' => 'Server Monitor',
    'description' => 'Configure the Server Monitor.',
    'page callback' => 'server_monitor_json_status',
    'page arguments' => array('server_monitor_admin_form'),
    'access arguments' => array('access content'),
  );
  $items[$menu_base] = array(
    'title' => 'Server Monitor',
    'description' => 'Configure the Server Monitor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_monitor_admin_form'),
    'access arguments' => array('administer server monitor'),
    'file' => 'server_monitor.admin.inc',
  );
  $items[$menu_base . '/list'] = array(
    'title' => 'Settings',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$menu_base . '/add'] = array(
    'title' => 'Add Monitor',
    'description' => 'Add another server to the monitor pool.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_monitor_form', $menu_offset),
    'access arguments' => array('add/edit server monitor'),
    'file' => 'server_monitor.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items[$menu_base . '/edit/%'] = array(
    'title' => 'Edit Monitor',
    'description' => 'Edit an existing server monitor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_monitor_form', $menu_offset, $menu_offset+1),
    'access arguments' => array('add/edit server monitor'),
    'file' => 'server_monitor.admin.inc',
    'weight' => 3,
  );
  $items[$menu_base . '/delete'] = array(
    'title' => 'Delete Monitor',
    'description' => 'Delete an existing server monitor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_monitor_delete_form', $menu_offset+1),
    'access arguments' => array('delete server monitor'),
    'file' => 'server_monitor.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function server_monitor_block_info() {
  $block = array();
  $block['server_monitor_status'] = array(
    'info' => t('Server Monitor status'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function server_monitor_block_view($delta = '') {
  $block = array('title' => NULL);
  switch ($delta) {
    case 'server_monitor_status':
      $servers = array();
      $header = array(
        t('Service'),
        t('Status'),
      );
      if (variable_get('server_monitor_use_json_block', 0)) {
        $count = db_select('server_monitor')
          ->fields('server_monitor')
          ->orderBy('weight', 'ASC')
          ->countQuery()
          ->execute()
          ->fetchField();
        // If there is no servers configured, we don't bother generating block.
        if ($count) {
          $servers[0]['Service']['data'] = t('Loading, please wait...');
          $servers[0]['Service']['colspan'] = 2;
          $block['content'] = theme('table', array(
            'header' => $header,
            'rows' => $servers,
            'attributes' => array('id' => array('server-monitor-status-table')),
          ));
          drupal_add_js(drupal_get_path('module', 'server_monitor') . '/js/server_monitor.js');
        }
      }
      else {
        $status = array(-1 => t('N/A'), 0 => t('Down'), 1 => t('Up'));
        $result = db_select('server_monitor')
          ->fields('server_monitor')
          ->orderBy('weight', 'ASC')
          ->execute();
        while ($row = $result->fetchAssoc()) {
          $servers[$row['sid']]['Service']['data'] = ($row['status'] && $row['method'] == 'curl' || $row['method'] == 'http') ?
            l($row['name'], $row['address'], array('attributes' => array('target' => '_blank'))) : $row['name'];
          
          $servers[$row['sid']]['Status']['data'] = theme('server_monitor_status', array(
            'status' => $row['status'],
            'tooltip' => NULL,
            'absolute_url' => FALSE,
            'timestamp' => $row['timestamp'],
            ));

          $servers[$row['sid']]['Status']['class'] = array('status', 'status-' . $row['status']);
        }
        if (count($servers)) {
          $block['content'] = theme('table', array(
            'header' => $header,
            'rows' => $servers,
            'attributes' => array('id' => array('server-monitor-status-table')),
            ));
        }
      }
      break;
  }

  return isset($block) ? $block : NULL;
}

/**
 * Implements hook_help().
 */
function server_monitor_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/server_monitor':
      return t('The Server Monitor module will display the status of a number of servers which will be polled by a ping or by retrieving a URL (drupal_http_request or cURL). The status checks can be configured to run during cron.');
  }
}

/**
 * Check all configured server statuses.
 */
function server_monitor_check_all() {
  $result = db_select('server_monitor')
    ->fields('server_monitor')
    ->orderBy('weight', 'ASC')
    ->execute();
  $servers = array();
  $status_change = FALSE;
  while ($row = $result->fetchAssoc()) {
    $servers[$row['sid']] = $row;
    $servers[$row['sid']]['configuration'] = unserialize($row['configuration']);
  }
  foreach ($servers as $sid => $server) {
    $status_change = server_monitor_check_server($sid, $server);
  }
  variable_set('server_monitor_last_run', time());
  // If Varnish cache is enabled.
  if (module_exists('varnish')) {
    if (function_exists('varnish_expire_cache')) {
      // Expire the cache for our status.json page to ensure it's up to date.
      varnish_expire_cache(array('server_monitor/status.json'));
    }
  }
}

/**
 * Check a single server, as defined.
 */
function server_monitor_check_server($sid = 0, $server = FALSE) {
  if (!$server) {
    $server = db_select('server_monitor')
      ->fields('server_monitor')
      ->orderBy('weight', 'ASC')
      ->execute()
      ->fetchAssoc();
    $server['configuration'] = unserialize($server['configuration']);
  }
  switch ($server['method']) {
    case 'ping':
      $server['new_status'] = _server_monitor_ping($server);
      break;

    case 'curl':
      $server['new_status'] = _server_monitor_curl_request($server);
      break;

    case 'http':
    default:
      $server['new_status'] = _server_monitor_http_request($server);
      break;

  }
}

/**
 * Ping the server directly using exec.
 */
function _server_monitor_ping($server = FALSE) {
  $server_status = FALSE;
  if ($server) {
    // @TODO: Make # of requests configurable.
    $command = 'ping -n';
    $timeout = isset($server['configuration']['timeout']) ? $server['configuration']['timeout'] : SERVER_MONITOR_DEFAULT_TIMEOUT;
    $number_of_requests = 3;
    $nix = TRUE;
    $average_latency = 0;
    // Accept WINNT or Windows from PHP_OS.
    if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
      $command .= ' ' . $number_of_requests . ' -i ' . $timeout . ' ' . $server['address'];
      $nix = FALSE;
    }
    else {
      $command .= ' -c ' . $number_of_requests . ' -t ' . $timeout . ' ' . $server['address'];
    }
    $request = exec($command, $output, $return);
    // If this is a Windows server.
    if (!$nix) {
      $stats = end($output);
      // Windows Format: Minimum = Xms, Maximum = Xms, Average = Xms.
      $average_latency = floatval(str_replace('ms', '', end(explode('Average = ', $stats))));
      // If the time is less than 1ms on Windows, 0ms is shown, good response.
      if (strpos($stats, 'Average') !== FALSE) {
        drupal_set_message(t('Server %server is up (ping).', array('%server' => $server['name'])));
        _server_monitor_record_status($server['sid'], 1);
        return TRUE;
      }
    }
    else {
      $result = explode(' ', end($output));
      if (count($result) > 1) {
        // *Nix Format: rtt min/avg/max/mdev = x.xxx/x.xxx/x.xxx/x.xxx ms.
        $average_latency = explode('/', $result[3]);
        $average_latency = floatval($average_latency[1]);
        if ($average_latency > 0.0) {
          drupal_set_message(t('Server %server is up (ping).', array('%server' => $server['name'])));
          _server_monitor_record_status($server['sid'], 1);
          return TRUE;
        }
      }
    }
  }
  drupal_set_message(t('Server %server is down (ping).', array('%server' => $server['name'])));
  _server_monitor_record_status($server['sid'], 0);
  return FALSE;
}

/**
 * Complete the request using a cURL request.
 */
function _server_monitor_curl_request($server = FALSE) {
  if ($server) {
    $curl = curl_init();
    $timeout = isset($server['configuration']['timeout']) ? $server['configuration']['timeout'] : SERVER_MONITOR_DEFAULT_TIMEOUT;
    // @TODO: Make protocol configurable.
    curl_setopt($curl, CURLOPT_VERBOSE, FALSE);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_HEADER, TRUE);
    curl_setopt($curl, CURLOPT_AUTOREFERER, TRUE);
    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, $timeout);
    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'GET');
    curl_setopt($curl, CURLOPT_URL, $server['address']);
    $data = curl_exec($curl);
    $request_headers = (object) curl_getinfo($curl);
    curl_close($curl);
    if (isset($request_headers->http_code) && $request_headers->http_code < 400) {
      drupal_set_message(t('Server %server is up (cURL).', array('%server' => $server['name'])));
      _server_monitor_record_status($server['sid'], 1);
      return TRUE;
    }
    else {
      // @TODO: Log downtime.
      drupal_set_message(t('Server %server is down (cURL).', array('%server' => $server['name'])));
      _server_monitor_record_status($server['sid'], 0);
    }
  }
  return FALSE;
}

/**
 * Complete the request using drupal_http_request.
 */
function _server_monitor_http_request($server = FALSE) {
  if ($server) {
    // @TODO: Make protocol configurable.
    $timeout = isset($server['configuration']['timeout']) ? $server['configuration']['timeout'] : SERVER_MONITOR_DEFAULT_TIMEOUT;
    $request_headers = drupal_http_request($server['address'], array(), 'GET', NULL, 3, $timeout);
    if (isset($request_headers->status_message) && $request_headers->status_message == 'OK') {
      drupal_set_message(t('Server %server is up (http).', array('%server' => $server['name'])));
      _server_monitor_record_status($server['sid'], 1);
      return TRUE;
    }
    else {
      // @TODO: Log downtime.
      drupal_set_message(t('Server %server is down (http).', array('%server' => $server['name'])));
      _server_monitor_record_status($server['sid'], 0);
    }
  }
  return FALSE;
}

/**
 * Record the new server status.
 */
function _server_monitor_record_status($sid = 0, $status = 0) {
  if ($sid) {
    db_update('server_monitor')
      ->fields(array(
        'status' => $status,
        'timestamp' => time(),
      ))
      ->condition('sid', $sid, '=')
      ->execute();
  }
}

/**
 * Generate the JSON file for current server statuses.
 */
function server_monitor_json_status() {
  $result = db_select('server_monitor')
    ->fields('server_monitor')
    ->orderBy('weight', 'ASC')
    ->execute();
  while ($row = $result->fetchAssoc()) {
    $server = $row;
    $server['link'] = ($row['method'] == 'curl' || $row['method'] == 'http') ?
      l($server['name'], $server['address'], array('attributes' => array('target' => '_blank'))) : $server['name'];
    $server['status_graphical'] = theme('server_monitor_status', array(
      'status' => $row['status'],
      'tooltip' => NULL,
      'absolute_url' => TRUE,
      'timestamp' => $row['timestamp'],
    ));
    unset($server['configuration']);
    $servers[] = $server;
  }
  drupal_json_output($servers);
}
