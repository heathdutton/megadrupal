<?php

/**
 * @file
 * Main file for Entity Documentation Taxonomy module.
 */

/**
 * Implements hook_ed_type().
 */
function entity_documentation_taxonomy_ed_type($types) {

  // Get vocabularies.
  $vocabularies = taxonomy_get_vocabularies();

  $types['taxonomy_term'] = array(
    'name' => 'Taxonomy',
    'bundles' => array(),
  );

  foreach ($vocabularies as $key => $bundle) {
    $types['taxonomy_term']['bundles'][$bundle->machine_name] = array(
      'name' => $bundle->name,
      'description' => $bundle->description,
      'entity' => 'taxonomy_term',
    );
  }

  return $types;
}

/**
 * Implements hook_ed_bundle_documentation().
 */
function entity_documentation_taxonomy_ed_bundle_documentation($documentation_array, $entity, $bundle) {

  // Return documentation only for node.
  if ($entity == 'taxonomy_term') {
    $vocabulary = taxonomy_vocabulary_machine_name_load($bundle);
    $fields = field_info_instances('taxonomy_term', $bundle);

    // Language.
    if (isset($vocabulary->i18n_mode)) {
      $language = $vocabulary->i18n_mode;
      if ($language == 0) {
        $language = t('Disabled');
      }
      elseif ($language == 1) {
        $language
          = t('Localize. Terms are common for all languages, but their name and description may be localized.');
      }
      elseif ($language == 2) {
        $language
          = t('Fixed Language. Terms will have a global language and they will only show up for pages in that language.')
          . ' [' . $vocabulary->language . ']';
      }
      elseif ($language == 4) {
        $language
          = t('Translate. Different terms will be allowed for each language and they can be translated.');
      }
    }
    else {
      $language = t('Disabled');
    }

    // Vocabulary parameters.
    $documentation_array[$entity][$bundle]['params'] = array(
      'name' => $vocabulary->name,
      'description' => $vocabulary->description,
      'properties' => array(
        'language' => array(
          'name' => t('Multilingual support'),
          'value' => $language,
        ),
      ),
    );

    // Field columns.
    $documentation_array[$entity][$bundle]['field_columns'] = array(
      'field' => t('Field'),
      'name' => t('Name'),
      'description' => t('Description'),
      'required' => t('Required'),
    );

    // Fields.
    // Title.
    $documentation_array[$entity][$bundle]['fields']['name'] = array(
      'field' => 'name',
      'name' => t('Name'),
      'description' => '',
      'required' => t('Yes'),
    );

    // Description.
    $documentation_array[$entity][$bundle]['fields']['description'] = array(
      'field' => 'description',
      'name' => t('Description'),
      'description' => '',
      'required' => t('No'),
    );

    foreach ($fields as $field_key => $field) {
      $documentation_array[$entity][$bundle]['fields'][$field_key] = array(
        'field' => $field_key,
        'name' => $fields[$field_key]['label'],
        'description' => $fields[$field_key]['description'],
        'required' => $fields[$field_key]['required'] ? t('Yes') : t('No'),
      );
    }
  }

  return $documentation_array;
}
