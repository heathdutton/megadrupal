<?php
/**
 * @file example_entity.module
 * Contains core hooks.
 */

/**
 * Implements hook_entity_info().
 */
function example_entity_entity_info() {
  $return = array(
    'example_entity' => array(
      'label' => t('Example Entity'),
      'plural label' => t('Example Entities'),
      // Use the Entity API controller.
      'controller class' => 'EntityAPIController',
      'base table' => 'example_entity',
      // Generic callback: one less callback to define.
      'uri callback' => 'entity_operations_entity_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
        'label' => 'title',
      ),
      'bundle keys' => array(
      ),
      'bundles' => array(
        'example_entity' => array(
          'label' => t('Example Entity'),
          'admin' => array(
            'path' => 'admin/structure/example_entity/',
            // TODO: access callback!
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      // Entity API properties.
      'module' => 'example_entity',
      'entity class' => 'Entity',
      'access callback' => 'example_entity_access',
      'admin ui' => array(
        'path' => 'admin/structure/example_entity',
        // We need our own controller for this, because we're using generic
        // entity form operations.
        'controller class' => 'EntityOperationsDefaultAdminUIController',
      ),
      // Entity Operations API
      'operations ui' => array(
        // The base path for your entities. This is the same as your entity's URI
        // but without the ID suffix. (In fact, you can set
        // entity_operations_entity_uri() as your URI callback, which will use the
        // value here).
        'path' => 'example_entity',
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_operation_info().
 */
function example_entity_entity_operation_info() {
  $info = array(
    'example_entity' => array(
      'add' => array(
        'handler' => 'EntityOperationsOperationAddGeneric',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'view' => array(
        // Or try EntityOperationsOperationEntityViewOperations!
        'handler' => 'EntityOperationsOperationEntityView',
        'provision' => array(
          'menu' => array(
            'default' => TRUE,
          ),
          'views field' => TRUE,
        ),
      ),
      'edit' => array(
        'handler' => 'EntityOperationsOperationEditGeneric',
        'provision' => array(
          'menu' => TRUE,
          'views field' => TRUE,
        ),
      ),
      'devel/devel' => array(
        'handler' => 'EntityOperationsOperationDevel',
        'provision' => array(
          'menu' => array(
            'default secondary' => TRUE,
          ),
        ),
      ),
      'devel/token' => array(
        // Note this only shows if you have Entity Token module enabled.
        'handler' => 'EntityOperationsOperationToken',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'devel/metadata' => array(
        'handler' => 'EntityOperationsOperationMetadata',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'publish' => array(
        'handler' => 'EntityOperationsOperationPublish',
        'provision' => array(
          'menu' => array(
          ),
          'entity view' => TRUE,
        ),
      ),
      'unpublish' => array(
        'handler' => 'EntityOperationsOperationUnPublish',
        'provision' => array(
          'menu' => TRUE,
          'entity view' => TRUE,
        ),
      ),
      'author' => array(
        'handler' => 'EntityOperationsOperationSetOwner',
        'provision' => array(
          'menu' => TRUE,
          //'entity view' => TRUE,
        ),
      ),
    ),
  );
  return $info;
}

/**
 * Implements callback_entity_access().
 */
function example_entity_access($op, $entity, $account, $entity_type) {
  // TODO: add access control here.
  return TRUE;
}
