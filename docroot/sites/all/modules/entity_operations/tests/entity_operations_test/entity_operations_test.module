<?php

/**
 * @file entity_operations_test.module
 * Provides a test entity type for testing operations.
 */

/**
 * Implements hook_entity_operation_info().
 */
function entity_operations_test_entity_operation_info() {
  $info = array(
    'entity_operations_test' => array(
      'view' => array(
        'handler' => 'EntityOperationsOperationEntityView',
        'provision' => array(
          'menu' => array(
            'default' => TRUE,
            'menu item' => array(
              'title' => 'Main',
            ),
          ),
          'views field' => TRUE,
        ),
      ),
      'edit' => array(
        'handler' => 'EntityOperationsOperationEdit',
        'provision' => array(
          'menu' => TRUE,
          'views field' => TRUE,
        ),
      ),
      'add' => array(
        'handler' => 'EntityOperationsOperationAdd',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'delete' => array(
        'handler' => 'EntityOperationsOperationDelete',
        'provision' => array(
          'menu' => TRUE,
          'views field' => TRUE,
        ),
      ),
      // Test handlers for changing the title of the entity.
      'red' => array(
        'handler' => 'EntityOperationsTestOperationTitleRed',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'blue' => array(
        'handler' => 'EntityOperationsTestOperationTitleBlue',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'green' => array(
        'handler' => 'EntityOperationsTestOperationTitleGreen',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      // Test handler for form validation.
      'swordfish' => array(
        'handler' => 'EntityOperationsTestOperationSwordfish',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      // Test handlers for changing the status of the entity.
      'publish' => array(
        'handler' => 'EntityOperationsOperationPublish',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'unpublish' => array(
        'handler' => 'EntityOperationsOperationUnPublish',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_info().
 */
function entity_operations_test_entity_info() {
  $return = array(
    'entity_operations_test' => array(
      'label' => t('Test Entity'),
      'plural label' => t('Test Entities'),
      'description' => t('An entity type used by the Entity Operations tests.'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'entity_operations_test',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
        'bundle' => 'type',
        'label' => 'title',
      ),
      'label callback' => 'entity_operations_test_label',
      'uri callback' => 'entity_operations_entity_uri',
      'operations ui' => array(
        'path' => 'entity_operations_test',
      ),
      'access callback' => 'entity_operations_test_access',
      'bundles' => array(
        // Provide two bundles so we can test bundle-related things.
        'alpha' => array(
          'label' => t('Alpha'),
        ),
        'beta' => array(
          'label' => t('Beta'),
        ),
      ),
      // We need view modes for our Views entity operation display plugin to work.
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'module' => 'entity_operations_test',
      // Admin UI provided by Entity API.
      'admin ui' => array(
        'controller class' => 'EntityOperationsDefaultAdminUIController',
        'file' => 'entity_operations_test.admin.inc',
        'path' => 'admin/structure/entity_operations_test',
      ),
      // This allows quick generation of entities with Devel Contrib module,
      // which is useful when developing tests.
      'devel contrib generator class' => 'DevelContribGeneratorDefault',
    ),
  );

  return $return;
}

/**
 * Implements callback_entity_info_label().
 */
function entity_operations_test_label($entity, $entity_type) {
  return empty($entity->title) ? 'Untitled entity' : $entity->title;
}

/**
 * Entity API access callback.
 */
function entity_operations_test_access($op, $entity, $account, $entity_type) {
  // TODO!
  return TRUE;
}

/**
 * Implements hook_views_api().
 */
function entity_operations_test_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'entity_operations_test'),
    'template path' => drupal_get_path('module', 'entity_operations_test'),
  );
}

/**
 * Implements hook_menu().
 */
function entity_operations_test_menu() {
  $items['entity_operations_test-multiple'] = array(
    'title' => 'Multiple operations page',
    'page callback' => 'entity_operations_test_multiple',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Page callback for showing multiple operation form.
 *
 * @param $entity_id
 *  An entity ID to show.
 */
function entity_operations_test_multiple($entity_id) {
  $entity = entity_load_single('entity_operations_test', $entity_id);
  $operation_names = array('red', 'green', 'blue', 'swordfish');

  $build = drupal_get_form('entity_operations_multiple_operation_form', 'entity_operations_test', $entity, $operation_names);

  return $build;
}
