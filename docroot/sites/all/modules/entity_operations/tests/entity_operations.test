<?php

/**
 * @file
 * Contains tests for the Entity operations module.
 */

/**
 * Abstract base class for tests involving entity CRUD forms.
 */
abstract class EntityOperationsEntityFormsBase extends DrupalWebTestCase {

  /**
   * Test basic CRUD operations for the test entity type.
   *
   * This test provides common testing of CRUD forms for an entity type. Child
   * classes wishing to make use of it should set the following properties in
   * their setUp():
   *  - $this->entity_type
   *  - $this->entity_base_path
   */
  function testCRUDOperations() {
    $entity_info = entity_get_info($this->entity_type);
    // Argh we have two cases of label floating around!
    $entity_label = $entity_info['label'];
    $entity_label_lower = drupal_strtolower($entity_info['label']);
    $bundle_label_alpha = drupal_strtolower($entity_info['bundles']['alpha']['label']);
    $bundle_label_beta  = drupal_strtolower($entity_info['bundles']['beta']['label']);

    // Test add operation.
    $this->drupalGet($this->entity_base_path . '/add');

    debug("Add $entity_label | Drupal");
    $this->assertTitle("Add $entity_label_lower | Drupal", 'The add operation page is displayed.');
    $this->assertText('Add Alpha', "The add operation page shows a link to add an entity of bundle 'alpha'.");
    $this->assertText('Add Beta', "The add operation page shows a link to add an entity of bundle 'beta'.");

    $this->drupalGet($this->entity_base_path . '/add/alpha');
    $this->assertTitle("Add $bundle_label_alpha $entity_label_lower | Drupal", "The add form title is shown for a specific entity bundle.");
    $this->assertFieldByName('title', NULL, 'The title field is shown on the entity add form.');

    // Don't use randomString(), it causes wacky issues with funny characters.
    $entity_title = $this->randomName();
    $edit = array(
      'title' => $entity_title,
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    $this->assertTitle("$entity_title | Drupal", "The user was redirected to the entity after saving the add form.");
    $this->assertText("The $entity_label $entity_title has been saved.", "The user is shown a status message.");

    // Load the newly created entity by its title.
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', $this->entity_type)
      ->propertyCondition('title', $entity_title);
    $result = $query->execute();
    $this->assertTrue(isset($result[$this->entity_type]), t('The entity was saved.'));

    $entity_stub = array_pop($result[$this->entity_type]);
    $entity = entity_load_single($this->entity_type, $entity_stub->eid);

    // Test view operation.
    $this->drupalGet($this->entity_base_path . '/' . $entity->eid);
    $this->assertTitle("$entity_title | Drupal", "The entity title is shown.");

    // Test edit operation.
    $this->drupalGet($this->entity_base_path . '/' . $entity->eid . '/edit');

    $this->assertTitle("Edit $entity_title | Drupal", "The edit form title is shown.");
    $this->assertFieldByName('title', $entity_title, 'The title field is shown on the entity edit form and shows the entity title.');

    $entity_title_changed = $this->randomName();
    $edit = array(
      'title' => $entity_title_changed,
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    $this->assertTitle("$entity_title_changed | Drupal", "The user was redirected to the entity after saving the edit form.");
    $this->assertText("The $entity_label $entity_title_changed has been saved.", "The status message is shown.");

    // Clear the cache so we can load fresh entities.
    entity_get_controller($this->entity_type)->resetCache();
    $entity = entity_load_single($this->entity_type, $entity_stub->eid);

    $this->assertEqual($entity->title, $entity_title_changed, "The entity title was changed.");

    // Test delete operation.
    $this->drupalGet($this->entity_base_path . '/' . $entity->eid . '/delete');
    $this->assertTitle("Delete $entity_title_changed? | Drupal", "The delete form title is shown.");
    $this->assertText("Are you sure you want to delete the $entity_label $entity_title_changed?",
      "The confirmation message is shown.");
    $this->assertText("Cancel", "The cancel link is shown.");

    $this->drupalPost(NULL, array(), t("Delete $entity_label"));

    // Check status message
    $this->assertText("The $entity_label $entity_title_changed has been deleted.", "The status message is shown.");

    // Clear the cache so we can load fresh entities.
    entity_get_controller($this->entity_type)->resetCache();
    $entity = entity_load_single($this->entity_type, $entity_stub->eid);

    $this->assertFalse($entity, "The entity has been deleted.");
  }

}

/**
 * Test case for Entity Operations on an entity using entity form handlers.
 */
class EntityOperationsEntityFormsTestCase extends EntityOperationsEntityFormsBase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Entity forms'),
      'description' => t('Test built-in operations on entity type using the entity form handlers.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test'));

    $this->entity_base_path = 'entity_operations_test';
    $this->entity_type = 'entity_operations_test';
  }

  function testCRUDOperations() {
    // The test method is in the parent base class. This is here just for DX.
    parent::testCRUDOperations();
  }

}

/**
 * Test case for Entity Operations on an entity using generic form handlers.
 */
class EntityOperationsGenericFormsTestCase extends EntityOperationsEntityFormsBase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Entity generic forms'),
      'description' => t('Test built-in operations on entity type using the generic form handlers.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_generic_test'));

    $this->entity_base_path = 'entity_operations_generic_test';
    $this->entity_type = 'entity_operations_generic_test';
  }

  function testCRUDOperations() {
    // The test method is in the parent base class. This is here just for DX.
    parent::testCRUDOperations();
  }

}

/**
 * Test form validation for operation forms.
 */
class EntityOperationsFormValidationTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Form validation'),
      'description' => t('Test form validation for operations.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test'));
  }

  /**
   * Test the form validation.
   */
  function testFormValidation() {
    // Create a test entity.
    $values = array(
      'title' => 'Foobar',
      'type' => 'alpha',
      'status' => TRUE,
    );
    $entity = entity_create('entity_operations_test', $values);
    $entity->save();

    // View the swordfish operation tab on the entity.
    $this->drupalGet('entity_operations_test/' . $entity->eid . '/swordfish');

    $this->assertText("Do you know the password is 'Swordfish'?", "The 'Swordfish' form is shown.");

    // Submit the wrong password to fail the form's validation.
    $edit = array(
      'password' => 'Mary',
    );
    $this->drupalPost(NULL, $edit, t("Swordfish?"));

    $this->assertText("'At's-a no fish!", "The form fails validation with an incorrect password.");

    // Check the entity is unchanged.
    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertNotEqual($entity->title, 'Swordfish', 'The entity title was not changed.');

    // Submit the right password.
    $edit = array(
      'password' => 'swordfish',
    );
    $this->drupalPost(NULL, $edit, t("Swordfish?"));

    $this->assertText("You guess it", "The form passes validation with a correct password.");


    // Check the entity is now changed.
    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertEqual($entity->title, 'Swordfish', 'The entity title was changed.');
  }

}

/**
 * Test the extras that we provide for Entity API's entity admin UI.
 */
class EntityOperationsAdminUITestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Entity Admin UI'),
      'description' => t('Test entity admin UI for both generic and Entity API form entity types.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test', 'entity_operations_generic_test'));
  }

  function testAdminUI() {
    $this->drupalGet('admin/structure/entity_operations_test');

    $this->assertLink('Add test entity', 0, "The admin link to create a new entity is shown.");

    $this->drupalGet('admin/structure/entity_operations_generic_test');

    $this->assertLink('Add test entity generic', 0, "The admin link to create a new entity is shown.");

    // TODO: test further aspects of the admin UI such as 'edit' links on
    // entities.
  }

}

/**
 * Test case for Entity Operations permissions helper.
 */
class EntityOperationsPermissionsTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Operation permissions'),
      'description' => t('Test generation of permissions based on entity operations.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test'));
  }

  function testPermissions() {
    $entity_operation_info = entity_operations_get_operation_info('entity_operations_test');

    // Check basic permissions.
    $permissions = entity_operations_get_entity_permissions('entity_operations_test');

    // We should get the same number of permissions as of operations.
    $this->assertEqual(count($permissions), 4, "The right number of permissions are generated.");
    $this->assertTrue(isset($permissions['create entity_operations_tests']), "The 'create' permission is generated.");
    $this->assertTrue(isset($permissions['edit entity_operations_tests']), "The 'edit' permission is generated.");
    $this->assertTrue(isset($permissions['view entity_operations_tests']), "The 'view' permission is generated.");
    $this->assertTrue(isset($permissions['delete entity_operations_tests']), "The 'delete' permission is generated.");

    // Check 'own' permissions.
    $permissions = entity_operations_get_entity_permissions('entity_operations_test', array('edit', 'delete'));

    $this->assertEqual(count($permissions), 6, "The right number of permissions are generated.");
    $this->assertTrue(isset($permissions['create entity_operations_tests']), "The 'create' permission is generated.");
    $this->assertTrue(isset($permissions['edit entity_operations_tests']), "The 'edit' permission is generated.");
    $this->assertTrue(isset($permissions['edit own entity_operations_tests']), "The 'edit own' permission is generated.");
    $this->assertTrue(isset($permissions['view entity_operations_tests']), "The 'view' permission is generated.");
    $this->assertTrue(isset($permissions['delete entity_operations_tests']), "The 'delete' permission is generated.");
    $this->assertTrue(isset($permissions['delete own entity_operations_tests']), "The 'delete own' permission is generated.");
  }

}

/**
 * Test case for operation access using Publish/Unpublish handlers.
 */
class EntityOperationsPublishTestCase extends DrupalWebTestCase {


  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Operation access'),
      'description' => t('Test access of operations using the publish and unpublish handlers.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test'));
  }

  function testPublish() {
    // Create a test entity, initially published.
    $values = array(
      'title' => 'Foobar',
      'type' => 'alpha',
      'status' => TRUE,
    );
    $entity = entity_create('entity_operations_test', $values);
    $entity->save();

    // View the entity.
    $this->drupalGet('entity_operations_test/' . $entity->eid);

    $this->assertText('Unpublish', "The unpublish tab is shown when the entity is viewed.");

    // Go to the unpublish tab and unpublish it.
    $this->drupalGet("entity_operations_test/$entity->eid/unpublish");

    $this->assertText("Are you sure you want to unpublish this Test Entity?", "The unpublish tab shows a confirmation question.");

    $this->drupalPost(NULL, array(), 'Unpublish');

    // Clear the cache and reload the entity.
    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertEqual($entity->status, FALSE, "The entity was unpublished.");

    // TODO: assert we got redirected?

    $this->assertText('Publish', "The publish tab is shown when the entity is viewed.");

    $this->drupalGet("entity_operations_test/$entity->eid/publish");

    $this->assertText("Are you sure you want to publish this Test Entity?", "The publish tab shows a confirmation question.");

    $this->drupalPost(NULL, array(), 'Publish');

    // Clear the cache and reload the entity.
    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertEqual($entity->status, TRUE, "The entity was published.");
  }

}

/**
 * Test case for Entity Operations Views display plugin.
 */
class EntityOperationsViewsDisplayPluginTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Views display plugin'),
      'description' => t('Test use of the Views display plugin that provides an operation.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test', 'views', 'entityreference', 'entity_operations_test_views'));

    $this->user = $this->drupalCreateUser(array(
      'administer nodes',
    ));
    $this->drupalLogin($this->user);
  }

  function testViewsDisplayPlugin() {
    // Create two test entities.
    // One will have nodes pointing to it, the other will not.
    $entities = array();
    $values = array(
      'title' => 'Foobar',
      'type' => 'alpha',
    );
    $entity = entity_create('entity_operations_test', $values);
    $entity->save();
    $entities['has_nodes'] = $entity;

    $values = array(
      'title' => 'Bizbax',
      'type' => 'alpha',
    );
    $entity = entity_create('entity_operations_test', $values);
    $entity->save();
    $entities['has_no_nodes'] = $entity;

    // Create three test nodes.
    // Points to the test entity and is promoted.
    $node = (object) array(
      'type' => 'entity_operations_node_test',
      // Use meaningful rather than random titles to help with debugging.
      // We're not testing node title functionality, so a random string doesn't
      // help with anything.
      'title' => 'is promoted',
      'uid' => $this->user->uid,
      'created' => strtotime('2014-09-07 12:00'),
      'promote' => 1,
    );
    $node->field_test_test_entities[LANGUAGE_NONE][]['target_id'] = $entities['has_nodes']->eid;

    node_save($node);
    $nodes['promote'] = $node;

    // Points to the test entity and is not promoted.
    $node = (object) array(
      'type' => 'entity_operations_node_test',
      'title' => 'not promoted',
      'uid' => $this->user->uid,
      'created' => strtotime('2014-09-07 12:00'),
      'promote' => 0,
    );
    $node->field_test_test_entities[LANGUAGE_NONE][]['target_id'] = $entities['has_nodes']->eid;

    node_save($node);
    $nodes['normal'] = $node;

    // Does not point to the test entity.
    $node = (object) array(
      'type' => 'entity_operations_node_test',
      'title' => 'unrelated',
      'uid' => $this->user->uid,
      'created' => strtotime('2014-09-07 12:00'),
    );

    node_save($node);
    $nodes['unrelated'] = $node;

    debug($nodes);

    // Check the output on each of the test entities.
    $this->drupalGet('entity_operations_test/' . $entities['has_no_nodes']->eid . '/test-view-nodes');
    $this->assertText("No results were found.", "No nodes were found on the entity's views-provided operation.");

    $this->drupalGet('entity_operations_test/' . $entities['has_nodes']->eid . '/test-view-nodes');
    $this->assertText($nodes['promote']->title, "The related promoted node is listed on the entity's views-provided operation.");
    $this->assertText($nodes['normal']->title, "The related normal node is listed on the entity's views-provided operation.");
    $this->assertNoText($nodes['unrelated']->title, "The unrelated node is not listed on the entity's views-provided operation.");

    // Views uses GET not POST forms. This means we can't simulate clicking the
    // button with drupalPost. Instead we have to check the raw HTML for the
    // form action directly, and then build the paths to pass to drupalGet().
    $form_url = url('entity_operations_test/' . $entities['has_nodes']->eid . '/test-view-nodes');
    $this->assertRaw('<form action="' . $form_url . '"', "View form action has the correct URL.");

    // Get the view with the exposed filter.
    // Views uses GET rather than POST for exposed forms.
    $this->drupalGet('entity_operations_test/' . $entities['has_nodes']->eid . '/test-view-nodes', array(
      'query' => array(
        'promote' => 1,
      ),
    ));

    $this->assertText($nodes['promote']->title, "The related promoted node is listed on the entity's views-provided operation.");
    $this->assertNoText($nodes['normal']->title, "The related normal node is not listed on the entity's views-provided operation.");
    $this->assertNoText($nodes['unrelated']->title, "The unrelated node is not listed on the entity's views-provided operation.");
  }

}

/**
 * Test case for Entity Operations VBO support.
 */
class EntityOperationsViewsBulkOperationsTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Operations in VBO'),
      'description' => t('Test use of entity operations as operations supplied to Views Bulk Operations.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test', 'views', 'views_bulk_operations'));
  }

  function testVBO() {
    // Create some test entities.
    $entities = array();
    $values = array(
      'title' => 'Foobar',
      'type' => 'alpha',
    );
    $entity = entity_create('entity_operations_test', $values);
    $entity->save();
    $entities[$entity->eid] = $entity;

    $values = array(
      'title' => 'Bizbax',
      'type' => 'alpha',
    );
    $entity = entity_create('entity_operations_test', $values);
    $entity->save();
    $entities[$entity->eid] = $entity;

    $this->drupalGet('entity_operations_test_vbo');

    $this->assertText("Foobar", "The first entity's title is shown.");
    $this->assertText("Bizbax", "The second entity's title is shown.");

    // Perform the 'blue' action on the first entity.
    $edit = array(
      'views_bulk_operations[0]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Make it blue'));

    // Clear the cache so we can load fresh entities.
    entity_get_controller('entity_operations_test')->resetCache();
    $entities = entity_load('entity_operations_test', array_keys($entities));

    $this->assertEqual($entities[1]->title, 'Blue', "The first entity's title was changed by the bulk operation.");

    $this->assertText("Blue", "The first entity's title is shown.");
    $this->assertText("Bizbax", "The second entity's title is shown.");

    // Perform the 'red' action on the second entity.
    $edit = array(
      'views_bulk_operations[1]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Make it red'));

    // Clear the cache so we can load fresh entities.
    entity_get_controller('entity_operations_test')->resetCache();
    $entities = entity_load('entity_operations_test', array_keys($entities));

    $this->assertEqual($entities[2]->title, 'Red', "The second entity's title was changed by the bulk operation.");

    $this->assertText("Blue", "The first entity's title is shown.");
    $this->assertText("Red", "The second entity's title is shown.");
  }

}


/**
 * Test case for Entity Operations multiple operations form.
 */
class EntityOperationsMultipleFormTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Multiple operations form'),
      'description' => t('Test form showing multiple operations.'),
      'group' => t('Entity Operations'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('entity_operations', 'entity_operations_test'));

    // TODO: user with permissions.
  }

  function testMultipleOperationsForm() {
    $values =  array(
      'type' => 'alpha',
      'title' => $this->randomName(),
    );
    $entity = entity_create('entity_operations_test', $values);
    $entity->save();

    $this->drupalGet('entity_operations_test-multiple/' . $entity->eid);

    // Click the button for the 'red' operation.
    $this->drupalPost(NULL, array(), t('Make it red'));

    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertEqual($entity->title, 'Red', "The entity title is changed to 'Red'.");

    // The operations will redirect to the entity, so return to our test form.
    $this->drupalGet('entity_operations_test-multiple/' . $entity->eid);

    // Click the button for the 'blue' operation.
    $this->drupalPost(NULL, array(), t('Make it blue'));

    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertEqual($entity->title, 'Blue', "The entity title is changed to 'Blue'.");

    // Click the button for the 'swordfish' operation, with no password.
    $this->drupalPost(NULL, array(), t('Swordfish?'));

    $this->assertText("'At's-a no fish!", "The form fails validation with a blank password.");

    // Check the entity is unchanged.
    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertNotEqual($entity->title, 'Swordfish', 'The entity title was not changed.');

    // Click the button for the 'swordfish' operation, with the wrong password.
    $this->drupalPost(NULL, array(
      'password' => 'Mary',
    ), t('Swordfish?'));

    $this->assertText("'At's-a no fish!", "The form fails validation with an incorrect password.");

    // Check the entity is unchanged.
    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertNotEqual($entity->title, 'Swordfish', 'The entity title was not changed.');

    // Click the button for the 'swordfish' operation, with the right password.
    $this->drupalPost(NULL, array(
      'password' => 'swordfish',
    ), t('Swordfish?'));

    // Check the entity was changed.
    entity_get_controller('entity_operations_test')->resetCache();
    $entity = entity_load_single('entity_operations_test', $entity->eid);

    $this->assertEqual($entity->title, 'Swordfish', "The entity title is changed to 'Swordfish'.");
  }

}
