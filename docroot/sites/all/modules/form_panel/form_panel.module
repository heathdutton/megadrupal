<?php

/**
 * @file 
 *   Turn weighted form elements into rows of DIVs, or a table.
 */

// Set to a non-zero value to enable test code at admin/form_panel_test
define('FORM_PANEL_TEST', 0);

/**
 * Implementation of hook_theme().
 */
function form_panel_theme() {
  return array(
    'form_panel_table' => array(
      'render element' => 'form',
    ),
    'form_panel_div' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function form_panel_menu() {
  $items = array();
  if (FORM_PANEL_TEST) {
    $items['admin/form_panel_test'] = array(
      'title' => 'Test form_panel',
      'file' => 'form_panel_test.inc',
      'access callback' => TRUE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('form_panel_test'));
  }
  return $items;
}

function theme_form_panel_div($variables) {
  return theme_form_panel_table($variables, TRUE);
}

function theme_form_panel_table($variables, $use_div = FALSE) {
  $rows = array();
  $cols = array();
  $form = &$variables['form'];
  $kids = array_diff(element_children($form), array('form_id', 'form_build_id', 'form_token'));

  $defaults = array(
    '#form_panel_div_attributes' => array(),
    '#form_panel_number_cols' => FALSE,
    '#form_panel_number_rows' => FALSE,
    '#form_panel_odd_even' => FALSE,
    '#form_panel_table_attributes' => array(),
    '#form_panel_table_filler' => '&nbsp;',
    '#form_panel_table_span_rows' => FALSE,
    '#form_panel_td_attributes' => array(),
    '#form_panel_tr_attributes' => array(),
  );
  $form = array_merge($defaults, $form);

  // First, find all rows and columns that are used.
  foreach ($kids as $kid) {
    $row = $col = 0;
    if (isset($form[$kid]['#form_panel_row']) && isset($form[$kid]['#form_panel_col'])) {
      $row = $form[$kid]['#form_panel_row'];
      $col = $form[$kid]['#form_panel_col'];
    }
    else if (isset($form[$kid]['#weight'])) {
      if (!empty($form['#form_panel_weights_decimal'])) {
        // The weight must be a float, and must be >= 1.001
        if (round(abs($form[$kid]['#weight']) * 1000) >= 1001) {
          $row = intval($form[$kid]['#weight']);
          // round() is needed here, because the result may contain a tiny
          // fraction
          $col = round(abs($form[$kid]['#weight'] - $row) * 1000);
        }
      }
      else if (!empty($form['#form_panel_weights_hex'])) {
        if ($form[$kid]['#weight'] >= 0x101) {
          $row = $form[$kid]['#weight'] >> 8;
          $col = $form[$kid]['#weight'] & 0xFF;
        }
      }
      else {
        // integer mode
        $row = intval($form[$kid]['#weight'] / 1000);
        $col = $form[$kid]['#weight'] % 1000;
      }
    }

    if ($row >= 1 && $col >= 1) {
      $form[$kid]['#form_panel_row'] = $row;
      $form[$kid]['#form_panel_col'] = $col;
      // Update the list of what columns are in use in each row.
      $rows[$row][$col] = 1;
      // Update the list of all column numbers in use.
      $cols[$col] = 1;
      if ($row > 1 && (!isset($first_non_header_row) || $row < $first_non_header_row)) {
        $first_non_header_row = $row;
      }

      if (isset($form[$kid]['#weight']) && (!isset($lowest_weight) || $form[$kid]['#weight'] < $lowest_weight)) {
        $lowest_weight = $form[$kid]['#weight'];
      }
    }
  }

  // Here, we need to use row and column indices that are 0-based and without
  // gaps. But the incoming rows/columns are 1-based and might have gaps, so a
  // couple of translation arrays need to be built.

  // Make sure the $rows array is sorted correctly at the top level.
  ksort($rows);
  // Each row in $irows will contain a sorted array listing the columns that
  // are used in that row. It's indexed starting at 0.
  $irows = array();
  foreach($rows as $index => $data) {
    $keys = array_keys($data);
    sort($keys);
    $irows[] = $keys;
  }
  // $xlate_row translates user-supplied row numbers into 0-based indices.
  $xlate_row = array_flip(array_keys($rows));

  // Same thing for the column numbers
  ksort($cols);
  $icols = array_keys($cols);
  $xlate_col = array_flip($icols);

  if ($use_div) {
    $cell_attributes = $form['#form_panel_div_attributes'];
    _form_panel_add_attribute($cell_attributes, 'class', 'form-panel-div');

    $row_tag = 'div';
    $cell_tag = 'div';
  }
  else {
    $tr_attributes = $form['#form_panel_tr_attributes'];
    _form_panel_add_attribute($tr_attributes, 'class', 'form-panel-row');
  
    $cell_attributes = $form['#form_panel_td_attributes'];
    _form_panel_add_attribute($cell_attributes, 'class', 'form-panel-cell');

    $row_tag = 'tr';
    $cell_tag = 'td';
  }

  $in_header = FALSE;
  $pre = $post = $header = $body = '';

  $non_hdr_start_fillers = $row_start_fillers = $row_end_fillers = '';
  $mid_row_fillers = count($xlate_col) ? array_fill(0, count($xlate_col), '') : array();
  // Pre-calculate the fillers for the first non-header row, if necessary
  if (!$use_div && $form['#form_panel_table_span_rows'] && isset($first_non_header_row)) {
    $row = $xlate_row[$first_non_header_row];

    // Find the unused cells in the first non-header row
    $unused_cells = array_diff($icols, $irows[$row]);
    $last_used_cell = -1;
    foreach ($unused_cells as $cell) {
      $rowspan = 1;
      while ($row + $rowspan < count($irows) && array_search($cell, $irows[$row + $rowspan]) === FALSE) {
        $rowspan++;
      }
      $attributes = $cell_attributes;
      if ($rowspan != 1) $attributes['rowspan'] = $rowspan;
      $filler = "<$cell_tag" . drupal_attributes($attributes) . '>' . $form['#form_panel_table_filler'] . "</$cell_tag>";
      if ($cell < $irows[$row][0]) {
        $non_hdr_start_fillers .= $filler;
      }
      else {
        while ($last_used_cell < count($irows[$row])-1 && $irows[$row][$last_used_cell + 1] < $cell) {
          $last_used_cell++;
        }
        $mid_row_fillers[$xlate_col[$irows[$row][$last_used_cell]]] .= $filler;
      }
    }
  }

  // Use "while" here, instead of "foreach", so that each() can be used later.
  reset($kids);
  while (list(,$kid) = each($kids)) {
    if (isset($form[$kid]['#form_panel_row'])) {
      $col = $xlate_col[$form[$kid]['#form_panel_col']];
      $row = $xlate_row[$form[$kid]['#form_panel_row']];

      if (!$use_div) {
        $colspan = $rowspan = 1;

        if ($form[$kid]['#form_panel_row'] != 1 && $form['#form_panel_table_span_rows']) {
          while ($row + $rowspan < count($irows) && array_search($form[$kid]['#form_panel_col'], $irows[$row + $rowspan]) === FALSE) {
            $rowspan++;
          }
        }
        else {
          // Find the column index of the current cell within its row.
          $this_col = array_search($form[$kid]['#form_panel_col'], $irows[$row]);
          // See if we need a filler before this cell.
          if ($this_col == 0 && $col >= 1) {
            $attributes = $cell_attributes;
            if ($col != 1) $attributes['colspan'] = $col;
            $tag = $form[$kid]['#form_panel_row'] == 1 ? 'th' : $cell_tag;
            $row_start_fillers = "<$tag" . drupal_attributes($attributes) . '>' . $form['#form_panel_table_filler'] . "</$tag>";
          }
  
          // Find the next column used in this row.
          $next_col = $this_col + 1;
          if ($next_col >= count($irows[$row])) {
            // Off the end, so set the colspan to the max.
            $colspan = count($xlate_col) - $col;
          }
          else {
            $colspan = $xlate_col[$irows[$row][$next_col]] - $col;
          }
        }
      }

      // Either the very first row, or the start of a new row
      if (!isset($last_row) || $row != $last_row) {
        if ($form[$kid]['#form_panel_row'] != 1) {
          if ($in_header) {
            $in_header = FALSE;
          }
          else if (isset($last_row)) {
            $body .= "$row_end_fillers</$row_tag>";
            $row_end_fillers = '';
          }
        }
        else if (!$use_div) {
          $in_header = TRUE;
        }

        $attributes = $use_div ? array() : $tr_attributes;
        if ($form['#form_panel_odd_even']) {
          _form_panel_add_attribute($attributes, 'class', ($row % 2) ? 'odd' : 'even');
        }
        if ($form['#form_panel_number_rows']) {
          _form_panel_add_attribute($attributes, 'class', sprintf('form-panel-row-%03d', $row + 1));
        }

        $row_html = "\n<$row_tag" . drupal_attributes($attributes) . '>' . $row_start_fillers;
        $row_start_fillers = '';
        if ($in_header) {
          $header .= $row_html;
        }
        else {
          $body .= $row_html . $non_hdr_start_fillers;
          $non_hdr_start_fillers = '';
        }
      }

      $attributes = $cell_attributes;
      if (!$use_div) {
        if ($rowspan != 1) $attributes['rowspan'] = $rowspan;
        if ($colspan != 1) $attributes['colspan'] = $colspan;
      }
      if ($form['#form_panel_number_cols']) {
        _form_panel_add_attribute($attributes, 'class', sprintf('form-panel-col-%03d', $col + 1));
      }
      $html = drupal_attributes($attributes) . '>' . drupal_render($form[$kid]);
      // Add on any other elements with this same row/column.
      // "current($kids)" actually contains the *next* value.
      $next_kid = current($kids);
      while ($next_kid !== FALSE && $form[$next_kid]['#form_panel_row'] == $form[$kid]['#form_panel_row'] && $form[$next_kid]['#form_panel_col'] == $form[$kid]['#form_panel_col']) {
        $html .= drupal_render($form[$next_kid]);
        $next_kid = next($kids);
      }

      if ($in_header) {
        $header .= '<th' . $html . '</th>';
      }
      else {
        $body .= "<$cell_tag" . $html . $mid_row_fillers[$col] . "</$cell_tag>";
        $mid_row_fillers[$col] = '';
      }

      $last_row = $row;
    }
    else if (!$rows || $form[$kid]['#weight'] < $lowest_weight) {
      // Render a form item appearing before the table.
      $pre .= drupal_render($form[$kid]);
    }
    else {
      // Render a form item appearing after the table.
      $post .= drupal_render($form[$kid]);
    }
  }

  if (!$use_div && ($header != '' || $body != '')) {
    $caption = '';
    if (isset($form['#form_panel_table_caption'])) {
      $caption = '<caption>'. $form['#form_panel_table_caption'] ."</caption>\n";
    }

    $attributes = $form['#form_panel_table_attributes'];
    if ($header != '' ) {
      $header .= "</$row_tag>";
      // Add sticky headers.
      drupal_add_js('misc/tableheader.js');
      _form_panel_add_attribute($attributes, 'class', 'sticky-enabled');
    }

    if ($body != '' ) {
      $body .= "$row_end_fillers</$row_tag>";
    }

    _form_panel_add_attribute($attributes, 'class', 'form-panel');
    $body = '<table' . drupal_attributes($attributes) . ">$caption<thead>$header</thead>\n<tbody>$body</tbody></table>";
  }

  return $pre . $body . $post;
}

function _form_panel_add_attribute(&$attributes, $type, $data) {
  if (isset($attributes[$type])) {
    $attributes[$type] .= ' '. $data;
  }
  else {
    $attributes[$type] = $data;
  }
}
