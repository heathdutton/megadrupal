<?php
/**
 * @file
 * Main SN DCP Drupal File
 *
 * This file holds the main Drupal hook functions, and API functions.
 *
 * @SNDCP sn_fb_dynamic_cover_photo SN DCP: Cover Photo for Facebook page.
 */

define('SN_FB_DYNAMIC_COVER_PHOTO_SCOPE', 'export_stream,share_item,create_event,publish_stream,read_stream,video_upload,create_note,photo_upload,status_update,manage_pages,friends_about_me,friends_birthday,friends_status,friends_groups,friends_likes,friends_photos,friends_relationships,friends_activities,friends_religion_politics,user_photos,user_relationships,publish_actions,create_note');
define('SN_FB_DYNAMIC_COVER_PHOTO_IMAGE_MAX_WIDTH', 851);
define('SN_FB_DYNAMIC_COVER_PHOTO_IMAGE_MAX_HEIGHT', 315);
/**
 * Implements hook_help().
 */
function sn_fb_dynamic_cover_photo_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sn_fb_dynamic_cover_photo':
      $output = '<p>' . t('The SN DCP module to create Facebook Dynamic Cover Photo. This module makes site admin avilable choice to show images from the content as its facebook cover photo') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function sn_fb_dynamic_cover_photo_menu() {
  $items = array();

  $items['admin/config/system/sn-dcp'] = array(
    'title' => 'SN DCP Config',
    'description' => t('Main settings for SN DCP.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sn_fb_dynamic_cover_photo_admin_settings_form'),
    'access arguments' => array('administer sn_dcp'),
    'file' => 'sn_fb_dynamic_cover_photo.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function sn_fb_dynamic_cover_photo_permission() {
  return array(
    'administer sn_dcp' => array(
      'title' => t('Administer SN DCP settings'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function sn_fb_dynamic_cover_photo_cron() {
  $access_token = sn_fb_dynamic_cover_photo_get_access_token_from_db();
  if(isset ($access_token) && $access_token == FALSE) {
    return FALSE;
  }

  $facebook = new Facebook(array(
      'appId' => variable_get('sn_fb_dynamic_cover_photo_app_id'), 'secret' => variable_get('sn_fb_dynamic_cover_photo_secret')));

  $facebook->setAccessToken($access_token);

  // Facebook api request.
  $page_name = "'" . variable_get('sn_fb_dynamic_cover_photo_brand_page') . "'";
  $accounts = $facebook->api(array('method' => 'fql.query', 'query' => "SELECT page_id, username, access_token FROM page WHERE page_id in (SELECT page_id FROM page where username=$page_name)"));
  if (!empty($accounts)) {
    $page = array_shift($accounts);
    $time_latest = db_select('sn_fb_dcp_last_updated', 'di')
            ->fields('di', array('fb_id', 'updated'))
            ->orderBy('di.updated', 'DESC')
            ->range(0, 1)
            ->execute()
            ->fetchAssoc();
   
    // Getting a random number from database to mark image as cover.
    $images = db_select('sn_fb_dcp_images', 'di')->fields('di', array('fb_id', 'cover_id'));
    $images->join('sn_fb_dcp_last_updated', 'dlu', 'di.fb_id = dlu.fb_id');
    $images = $images->condition('di.fb_id', $time_latest['fb_id'], '<>')
            ->orderBy('RAND()')
            ->execute()
            ->fetchAssoc();

    // If this is first time then get any random image.
    if (empty($images)) {
      $images = db_select('sn_fb_dcp_images', 'di')
              ->fields('di', array('fb_id', 'cover_id'))
              ->orderBy('RAND()')
              ->execute()
              ->fetchAssoc();
    }

    // Checking if images are not empty.
    if (!empty($images) && isset($images['fb_id'])) {
      // Setting up a photo as cover.
      $ch = curl_init();
      $access_token = $page['access_token'];
      $graph_url = "https://graph.facebook.com/testsocialbank?access_token=" . $access_token;

      $image_id = (!empty($images['cover_id'])) ? $images['cover_id'] : $images['fb_id'];
      $params = array(
        'cover' => $image_id,
        'offset_y' => 0,
        'offset_x' => 0,
        'no_feed_story' => TRUE);

      $decoded = sn_fb_dynamic_cover_photo_curl_request($graph_url, $params);

      if ($decoded) {
        watchdog('sn_fb_dynamic_cover_photo_cron', "Dynamic cover photo has been updated.", array(), WATCHDOG_NOTICE);
        db_truncate('sn_fb_dcp_last_updated');
        db_insert('sn_fb_dcp_last_updated')
          ->fields(array(
            'fb_id' => $images['fb_id'],
            'updated' => time(),
          ))
          ->execute();

        // Get Cover photo id.
        $cover = $facebook->api('/' . $page['page_id'] . '?fields=cover');
        $cover_id = number_format($cover['cover']['cover_id'], 0, '.', '');

        // Table name no longer needs {}
        db_update('sn_fb_dcp_images')
        ->fields(array(
           'cover_id' => $cover_id,
            ))
        ->condition('fb_id', $images['fb_id'], '=')
        ->execute();
      }
    }
  }
}

/**
 * Function to get access token from database.
 *
 * @return string
 *   String of access token.
 */
function sn_fb_dynamic_cover_photo_get_access_token_from_db() {
  // Include facebook files.
  $fb_file_include = sn_fb_dynamic_cover_photo_include_fb_files();
  if(isset ($fb_file_include) && $fb_file_include == FALSE) {
    return FALSE;
  }
  // Get current time.
  $now = time();
  $facebook = new FacebookApiException(array(
      'appId' => variable_get('sn_fb_dynamic_cover_photo_app_id'),
      'secret' => variable_get('sn_fb_dynamic_cover_photo_secret'),
      ));

  // Files which have been uploaded get it from db.
  $query = db_select('sn_fb_dcp_config', 'dc')
      ->fields('dc', array('access_token', 'expires'))
      ->condition('expires', 0, '<>')
      ->execute();
  $access_token = '';

  while ($row = $query->fetchAssoc()) {
    $access_token = $row['access_token'];
    $expires = $row['expires'];
  }

  if (isset($row['expires']) && strtotime($expires) <= strtotime('60 days')) {
    $expiry = mktime(0, 0, 0, date('m') + 2, date('d'), date('Y'));
    $access_token = $facebook->getExtendedAccessToken($access_token);
    if (!empty($access_token)) {
      $result = db_truncate('sn_fb_dcp_config')->execute();
      db_insert('sn_fb_dcp_config')
        ->fields(array('access_token', 'expires'))
        ->values(array(
            'access_token' => $access_token,
            'expires' => $expiry,
            ))
        ->execute();
    }
  }

  return !empty($access_token) ? $access_token : '';
}

/**
 * Implements hook_node_submit().
 */
function sn_fb_dynamic_cover_photo_node_submit($node, $form, $form_state) {
  $node_type = variable_get('sn_node_type');
  $field_name = variable_get('sn_image_field');
  $page_name = "'" . variable_get('sn_fb_dynamic_cover_photo_brand_page') . "'";
  if (isset($node_type) && isset($field_name)) {
    if ($node->type == $node_type) {
      $field = $node->$field_name;
      $access_token = sn_fb_dynamic_cover_photo_get_access_token_from_db();
      $facebook = new Facebook(array(
          'appId' => variable_get('sn_fb_dynamic_cover_photo_app_id'),
          'secret' => variable_get('sn_fb_dynamic_cover_photo_secret'),
          ));

      $facebook->setAccessToken($access_token);
      $field = array_shift($field);
      
      foreach ($field as $image_info) {
        $fid = $image_info['fid'];
        $file_data = file_load($fid);
        $style_name = 'dcp_images';
        $derivative_uri = image_style_path($style_name, $file_data->uri);

        // Load image from file data.
        $image = image_load($file_data->uri);
        image_scale_and_crop($image, SN_FB_DYNAMIC_COVER_PHOTO_IMAGE_MAX_WIDTH, SN_FB_DYNAMIC_COVER_PHOTO_IMAGE_MAX_HEIGHT);
        if (!image_gd_save($image, $derivative_uri)) {
          if (file_exists($derivative_uri)) {
            watchdog('image', 'Cached image file %destination already exists. There may be an issue with your rewrite configuration.', array('%destination' => $derivative_uri), WATCHDOG_ERROR);
          }
          return FALSE;
        }

        $file_data->uri = $derivative_uri;
        $d_url = file_build_uri(DIRECTORY_SEPARATOR . 'DCP' . DIRECTORY_SEPARATOR);
        // Copy file to DCP folder.
        file_copy($file_data, $d_url);

        $accounts = $facebook->api(array('method' => 'fql.query', 'query' => "SELECT page_id, username,access_token FROM page WHERE page_id in (SELECT page_id FROM page where username=$page_name)"));
        $uri = file_build_uri(DIRECTORY_SEPARATOR . 'DCP' . DIRECTORY_SEPARATOR);
        $images_dir = drupal_realpath($uri);
        $dir_images_type = glob($images_dir . "*{JPG,PNG,GIF,JPEG,jpg,jpeg,gif,png}", GLOB_BRACE);

        // Files which have been uploaded get it from db.
        $db_images_query = db_select('sn_fb_dcp_images', 'di')
            ->fields('di', array('image_name'))
            ->execute();

        $db_images = array();
        while ($row = $db_images_query->fetchAssoc()) {
          $db_images[] = $row['image_name'];
        }

        // Get images from DCP directory.
        $dir_images = file_scan_directory(
                $uri,
                '/^.*\.(JPG|PNG|GIF|JPEG|jpg|jpeg|gif|png)$/');
        $dir_files = array();
        foreach ($dir_images as $data_image) {
          $dir_files[] = $data_image->filename;
        }

        // Files which needs to be uploded.
        $images = array_diff($dir_files, $db_images);
        if (!empty($images)) {
          $accounts = $facebook->api(array('method' => 'fql.query', 'query' => "SELECT page_id, username,access_token FROM page WHERE page_id in (SELECT page_id FROM page where username=$page_name)"));

          if (!empty($accounts)) {
            $page = array_shift($accounts);
            if (!isset($page['access_token'])) {
              watchdog('sn_fb_access_token', "Access token couldn't be acquired.");
            }

          // Getting default album id.
          $album_details = $facebook->api(array('method' => 'fql.query',
            'query' => "SELECT object_id FROM album WHERE owner='" . $page['page_id'] . "' AND name='DCP'"));

            if (!empty($album_details)) {
              $album_details = array_shift($album_details);
              $upload_image = array_shift($images);

              $params['source'] = "@" . drupal_realpath($uri . DIRECTORY_SEPARATOR . $upload_image);
              $access_token = $page['access_token'];

              $graph_url = "https://graph.facebook.com/$album_details[object_id]/photos?access_token=" . $access_token;

              // Curl request to push image as photo album.
              $decoded = sn_fb_dynamic_cover_photo_curl_request($graph_url, $params);

              if (!empty($decoded)) {
                db_insert('sn_fb_dcp_images')
                  ->fields(array(
                      'fb_id' => $decoded['id'],
                      'image_name' => $upload_image,
                      'created' => time(),
                    ))
                  ->execute();
                watchdog('sn_fb_dynamic_cover_photo_image', "DCP image to upload to facebook.", array(), WATCHDOG_NOTICE);
              }
            }
          }
        }
        else {
          watchdog('sn_fb_dynamic_cover_photo_image', "DCP don't have any image to upload.", array(), WATCHDOG_NOTICE);
        }
      }
    }
  }
}

/**
 * Function to get data from curl request.
 * 
 *
 * @param string $graph_url
 *   Url for curl request.
 * @param array $params
 *   Parameters for curl request.
 *
 * @return array
 *   Array data of curl reqquest.
 */

//File Upload using drupal_http_request() creating issue.
//Other facebook modules,already in stable state use curl for their facebook request.

function sn_fb_dynamic_cover_photo_curl_request($graph_url, $params) {
  $decoded = array();
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $graph_url);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
  $result = curl_exec($ch);
  curl_close($ch);
  $decoded = json_decode($result, TRUE);

  return $decoded;
}

/**
 * Function for including facebook file paths from libraries.
 */
function sn_fb_dynamic_cover_photo_include_fb_files(){
  $library_path = libraries_get_path('facebook-php-sdk-master');
  if (function_exists('drupal_get_path')) {
    $base_facebook_file = DRUPAL_ROOT . DIRECTORY_SEPARATOR . $library_path . DIRECTORY_SEPARATOR . 'src/base_facebook.php';
    $facebook_file = DRUPAL_ROOT . DIRECTORY_SEPARATOR . $library_path . DIRECTORY_SEPARATOR . 'src/facebook.php';
    if (is_file($base_facebook_file) && is_file($facebook_file)) {
      require_once $base_facebook_file;
      require_once $facebook_file;
    }
    else {
      // Added condition if fb php sdk does not exists.
      drupal_set_message(t("To enable SN FB Dynamic Cover Photo please download <a href='https://github.com/facebook/facebook-php-sdk' target='_blank'> facebook php sdk master </a> extract and placed it in libraries folder : sites\all\libraries"), 'error');
      return FALSE;
    }
  }
}
