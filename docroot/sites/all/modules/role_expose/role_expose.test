<?php

/**
 * @file
 * Tests for Role Expose module (role_expose).
 */

/**
 * Testi for hook_help() implemention.
 */
class RoleExposeHelpTestCase extends DrupalWebTestCase {

  // Don't need most of default core modules.
  protected $profile = 'minimal';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Role Expose help page test',
      'description' => 'Make sure help page text populates',
      'group' => 'Role Expose',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp('role_expose', 'help');
    $perms_simple = array(
      'access content',
    );
    $this->basic_user = $this->drupalCreateUser($perms_simple);
    $this->admin_user = $this->drupalCreateUser(array('access administration pages'));
  }

  /**
   * Make sure admin can read help text.
   */
  public function testAdminUserCanReadHelp() {
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/help');
    $this->assertLink(t('Role Expose'), 0, t('Check Help page has module name as link.'), t('Role Expose'));
    $this->clickLink(t('Role Expose'));
    $this->assertText(t('Role Expose -module gives site administrators ability to expose user their own user roles.'), t('Check Help page has module help test (check beginning of text).'));

    $this->drupalLogin($this->basic_user);
    $this->drupalGet('admin/help');
    $this->assertNoLink(t('Role Expose'), 0, t('Check Help page has module name as link.'), t('Role Expose'));
    $this->assertText(t('Access denied'), t('Check Help page access is denied if user is underprivileged.'));
  }

}

/**
 * Test for hook_permission() implemention.
 */
class RoleExposePermissionsAvailableTestCase extends DrupalWebTestCase {

  // Don't need most of default core modules.
  protected $profile = 'minimal';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Role Expose permission grantable test',
      'description' => 'Make sure all grant\'s are available in <em>admin/config/people</em>.',
      'group' => 'Role Expose',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp('role_expose');
    $perms_simple = array(
      'access content',
    );
    $this->basic_user = $this->drupalCreateUser($perms_simple);

    $perms_admin = array(
      'administer permissions',
      'administer users',
    );
    $this->user_admin = $this->drupalCreateUser($perms_admin);
  }

  /**
   * Test that permissions are in place in permission granting page.
   */
  public function testRoleExposeUserPermissionsGrantable() {
    $this->drupalLogin($this->user_admin);
    $this->drupalGet('user');
    $this->assertText(t('Log out'), t('Make sure user Log out -text is printed, ie. user is logged in.'));

    $this->drupalGet('user/1/edit');
    $this->drupalGetHeaders(200, t('Make sure user can edit other users.'));

    $this->drupalGet('admin/people/permissions');
    $this->drupalGetHeaders(200, t('Make sure user can edit user permissions.'));

    $this->assertText(t('View own exposed roles'), t('"View own exposed roles" -grant available'));
    $this->assertText(t('View exposed roles for all users'), t('"View exposed roles for all users" -grant available'));
  }

}

/**
 * Test for hook_permission() implemention.
 */
class RoleExposeGrantPermissionsTestCase extends DrupalWebTestCase {

  // Don't need most of default core modules.
  protected $profile = 'minimal';
  protected $morePrivilegedRole;
  protected $lessPrivilegedRole;
  protected $morePrivilegedUser;
  protected $lessPrivilegedUser;

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Role Expose permission test',
      'description' => 'Grant correct permission to users / roles.',
      'group' => 'Role Expose',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp('role_expose');
  }

  /**
   * Testing creating user roles with proper permissions.
   *
   * One role with 'view own roles' permission another without the same
   * permission.
   *
   * @staticvar array $role (query caching)
   */
  public function testRoleExposeCreateUserRoles() {

    static $role = array();

    $rids = $this->roleExposeCreateTestRoles();
    $perms = user_role_permissions($rids);
    foreach ($rids as $rid) {
      if (!isset($role[$rid])) {
        $role[$rid] = user_role_load($rid);
      }
    }

    $this->assertTrue(user_role_load($this->morePrivilegedRole), t('Created "more privileged" role'), t('Role Expose'));
    $this->assertTrue(user_role_load($this->lessPrivilegedRole), t('Created "less privileged" role'), t('Role Expose'));

    $this->assertTrue(array_search('view own roles', $perms[$this->morePrivilegedRole]), t('Check role !role to have correct perms', array(
      '!role' => $role[$this->morePrivilegedRole]->name,
        )), t('Role Expose'));
    $this->assertFalse(array_search('view own roles', $perms[$this->lessPrivilegedRole]), t('Check role !role to have correct perms', array(
      '!role' => $role[$this->lessPrivilegedRole]->name,
        )), t('Role Expose'));
  }

  /**
   * Test creating of user roles with correct permissions.
   *
   * One user with 'view own roles' and another with NOT having the same
   * permission.
   *
   * @staticvar array $roles (query cache)
   * @staticvar array $accounts (query cache)
   */
  public function testRoleExposeCreateUsers() {

    static $roles = array();
    static $accounts = array();

    $rids = $this->roleExposeCreateTestRoles();
    $account_array = $this->roleExposeCreateUsersToTestRoles($rids);

    foreach ($rids as $rid => $array) {
      if (!isset($roles[$rid])) {
        $roles[$rid] = user_role_load($rid);
      }
    }

    foreach ($account_array as $rid => $uid_array) {
      foreach ($uid_array as $key => $val) {
        if (!isset($accounts[$key])) {
          $accounts[$val] = user_load($val);
        }
      }
    }
    $this->assertTrue(user_load($this->morePrivilegedUser), t('Create USER with permission to see own roles'), t('Role Expose'));
    $this->assertTrue(user_load($this->lessPrivilegedUser), t('Create USER with NO permission to see own roles'), t('Role Expose'));

    $this->assertTrue(user_access('view own roles', $accounts[$this->morePrivilegedUser]), t('Check USER !user to have correct perms', array(
      '!user' => $accounts[$this->morePrivilegedUser]->name,
        )), t('Role Expose'));
    $this->assertFalse(user_access('view own roles', $accounts[$this->lessPrivilegedUser]), t('Check USER !user to have correct perms', array(
      '!user' => $accounts[$this->lessPrivilegedUser]->name,
            )
        ), t('Role Expose'));
  }

  /**
   * Create some test users to giver role id's.
   *
   * Default count is 4. Default role id's is none.
   *
   * @param array $rids
   *   Role id's to add to test users.
   * @param int $count
   *   Amount of test users to be created.
   *
   * @return array
   *   Return array of users/roles in for $array[rid][uid].
   */
  protected function roleExposeCreateUsersToTestRoles(array $rids, $count = 4) {
    $this->assertTrue(is_array($rids), t('Make sure function %func got an array as param 1.', array(
      '%func' => __FUNCTION__,
        )), t('Role Expose'));
    $this->assertTrue(count($rids), t('Make sure function %func has stuff in it (count: !count).', array(
      "%func" => __FUNCTION__,
      "!count" => count($rids),
        )), t('Role Expose'));
    if (!$rids) {
      return array();
    }
    $users_final = array();
    $usercount = 0;
    foreach ($rids as $rid) {
      $userlist = array();
      $role = user_role_load($rid);
      for ($i = 0; $i < $count; $i++) {
        $tmp_account = $this->drupalCreateUser();
        $userlist[$rid][$tmp_account->uid] = (int) $tmp_account->uid;
        $usercount++;
      }

      switch ($role->name) {
        case 'see_my_roles':
          $this->morePrivilegedUser = $tmp_account->uid;
          break;

        case 'hide_my_roles':
          $this->lessPrivilegedUser = $tmp_account->uid;
          break;
      }
      $this->pass(t('Adding role !role to users !users.', array(
        '!role' => $rid,
        '!users' => $this->roleExposeListArrayValues($userlist[$rid], FALSE))), t('Role Expose'));
      $this->assertTrue(is_array($userlist[$rid]), t('Make sure $userlist[$rid] is an array'), t('Role Expose'));
      $this->assertTrue(is_numeric($userlist[$rid][$tmp_account->uid]), t('Make sure last added user-id in $userlist[$rid][uid] is an numeric. uid = !uid, type = !type', array(
        "!uid" => $tmp_account->uid,
        "!type" => gettype($tmp_account->uid),
          )), t('Role Expose'));

      user_multiple_role_edit($userlist[$rid], 'add_role', $rid);
      $users_final = array_merge($users_final, $userlist);
    }
    $this->assertTrue(count($userlist[$rid]), t('Created !count users with role !role.', array(
      "!count" => count($userlist[$rid]),
      "!role" => user_role_load($rid)->name,
        )), t('Role Expose')
    );
    $this->pass(t('Created list of users, total count !total_usercount, users per role !per_role.', array(
      '!total_usercount' => $usercount,
      '!per_role' => $count)), t('Role Expose'));
    return $users_final;
  }

  /**
   * Change given array values to a string, hierarchy optionally flatten.
   *
   * Return $separator separated values of array or FALSE if $array is not
   * an array.
   * NOTE: if $flatten = FALSE, use multilevel arrays 1st level keys only.
   *
   * @param array $array
   *   Any array, can be multilevel array as well.
   * @param bool $flatten
   *   Flatten multilevel array; TRUE -> list all values on all levels or
   *   FALSE -> list only 1st level array *keys* as string.
   * @param string $separator
   *   Which separator to use in concatenated @return string.
   *
   * @return string
   *   String of values separated by $separator.
   */
  protected function roleExposeListArrayValues(array $array, $flatten = TRUE, $separator = ', ') {
    $return = NULL;
    foreach ($array as $key => $value) {
      if (is_array($value) && $flatten == TRUE) {
        $this->roleExposeListArrayValues($value, TRUE, $separator);
      }
      elseif (is_array($value) && $flatten == FALSE) {
        $return .= $key . $separator;
      }
      elseif (is_object($value) && $flatten == TRUE) {
        $this->roleExposeListArrayValues((array) $value, TRUE, $separator);
      }
      elseif (is_object($value) && $flatten == FALSE) {
        $return .= $key . $separator;
      }
      else {
        $return .= $value . $separator;
      }
    }
    return substr($return, 0, -(strlen($separator)));
  }

  /**
   * Create two test roles.
   *
   * Create roles to see_my_roles and hide_my_roles, permissions to be setup
   * accordingly ('view own roles').
   *
   * @return array
   *   Array including user roles in an array (key = value)
   */
  protected function roleExposeCreateTestRoles() {
    $this->morePrivilegedRole = $this->roleExposeCreateUserRoleWithPermissionsToViewOwnRoles(array(), 'see_my_roles');
    $this->lessPrivilegedRole = $this->roleExposeCreateUserRoleWithoutPermissionsToViewOwnRoles(array(), 'hide_my_roles');
    $this->pass(t("Passing array of role-id's: !more, !less", array(
      "!more" => $this->morePrivilegedRole,
      "!less" => $this->lessPrivilegedRole,
        )), t('Role Expose')
    );
    return array(
      $this->morePrivilegedRole => $this->morePrivilegedRole,
      $this->lessPrivilegedRole => $this->lessPrivilegedRole,
    );
  }

  /**
   * Create role with permission to view own roles.
   *
   * @param array $perms
   *   Array of permissions. By default 'view own roles'.
   * @param string $role_name
   *   Role readable name.
   *
   * @return int
   *   Drupal role id.
   */
  protected function roleExposeCreateUserRoleWithPermissionsToViewOwnRoles(array $perms, $role_name = NULL) {
    if (empty($perms)) {
      $perms[] = 'view own roles';
    }
    return $this->drupalCreateRole($perms, $role_name);
  }

  /**
   * Create role with no permission to view own roles.
   *
   * This user role does not allow user to view Roles-tab.
   *
   * @param array $perms
   *   Array of permissions. Permission 'view own roles' will be removed if
   *   exists in $perms array.
   * @param string $role_name
   *   Role readable name.
   *
   * @return int
   *   Drupal role id.
   */
  protected function roleExposeCreateUserRoleWithoutPermissionsToViewOwnRoles(array $perms, $role_name = NULL) {
    $perms_array_key = array_search('view own roles', $perms);
    if ($perms_array_key !== FALSE) {
      unset($perms[$perms_array_key]);
    }

    return $this->drupalCreateRole($perms, $role_name);
  }

}

/**
 * Test for hook_page() implemention.
 */
class RoleExposeRolePageTestCase extends DrupalWebTestCase {

  // Don't need most of default core modules.
  protected $profile = 'minimal';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Role Expose section test',
      'description' => 'Make sure content exists on logged in user profile page.',
      'group' => 'Role Expose',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp('role_expose');
    $perms_simple = array(
      // Role expose permission.
      'access content',
      'view own roles',
    );
    $this->restricted_user = $this->drupalCreateUser();
    $this->basic_user = $this->drupalCreateUser($perms_simple);
    $perms_roles = array(
      'administer users',
      // Required to alter user roles:
      'administer permissions',
      'access administration pages',
    );
    $this->admin_user = $this->drupalCreateUser($perms_roles);
  }

  /**
   * Make sure all user roles are listed in config page.
   */
  protected function testListUserRoles() {

    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/people/permissions/roles');
    $edit = array();
    // Check administrator -role, by form element name.
    $edit['role_expose[3]'] = TRUE;
    $this->drupalPost('admin/people/permissions/roles', $edit, t('Save exposed roles'));
    $this->assertText(t('Exposed roles have been saved.'));
    // Administrator role, by element id:
    $this->assertFieldChecked('edit-role-expose-3');

    $this->drupalLogin($this->restricted_user);
    $this->drupalGet('user');
    $this->assertNoText(t('Your site roles'));

    $this->drupalLogin($this->basic_user);
    $this->drupalGet('user');
    $this->assertText(t('Your site roles'));

    $this->drupalLogin($this->admin_user);
    $this->drupalGet('user/' . $this->basic_user->uid . '/edit');
    $this->assertText(t('Roles'), t('Check that admin user can edit test-account and see Roles role checkboxes'));
    $this->assertText(t('authenticated user'), t('Check that admin user can VIEW test-account (see authenticated user -checkbox)'));
    // 'authenticated user' box is checked.
    $this->assertFieldChecked('edit-roles-2');
    // 'testuser role' box is not yet checked.
    $this->assertNoFieldChecked('edit-roles-4');

    $this->drupalGet('admin/people/permissions/roles');
    $edit = array();
    // Check a checkbox, by form element name.
    $edit['role_expose[4]'] = TRUE;
    $this->drupalPost('admin/people/permissions/roles', $edit, t('Save exposed roles'));
    $this->assertText(t('Exposed roles have been saved.'));
    // Authenticated role, by element id.
    $this->assertFieldChecked('edit-role-expose-4');
    $this->drupalGet('admin/people/permissions/roles');
    $this->pass('Role 4 is now enabled. All other roles are hidden.');

    // Add test role and verify it is visible on user profile after that.
    $this->drupalGet('user/' . $this->basic_user->uid . '/edit');
    $this->assertNoFieldChecked('edit-roles-4');
    $edit = array();
    $edit['roles[4]'] = TRUE;
    $this->drupalPost('user/' . $this->basic_user->uid . '/edit', $edit, t('Save'));
    $this->drupalLogin($this->basic_user);
    $this->assertText(user_role_load(4)->name, t('Check first test-role name (@name) exists on user role.', array(
      '@name' => user_role_load(4)->name,
    )));
    $this->assertNoText(user_role_load(2)->name, t('Authenticated user -role is still hidden.'));
  }

}

/**
 * Test for module configuration page and make sure it's working correctly.
 */
class RoleExposeConfigurationPageTestCase extends DrupalWebTestCase {

  // Don't need most of default core modules.
  protected $profile = 'minimal';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Role Expose configuration section in Roles page exists',
      'description' => 'Make sure module has configuration section in Roles page and test it works as expected.',
      'group' => 'Role Expose',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp('role_expose');
    $perms_roles = array(
      'administer permissions',
    );
    $this->basic_user = $this->drupalCreateUser();
    $this->admin_user = $this->drupalCreateUser($perms_roles);
    $this->basic_role = $this->drupalCreateRole(array());
    $this->admin_role = $this->drupalCreateRole($perms_roles);
  }

  /**
   * Make sure module configuration page exists.
   */
  public function testConfigurationPageExists() {
    $this->drupalLogin($this->basic_user);
    $this->clickLink(t('Edit'));
    $this->drupalGet('admin/people/permissions/roles');
    $this->assertText(t('Access denied'), 0, t("Make sure basic user can't access Role expose roles page."), t('Role Expose'));

    $this->drupalLogin($this->admin_user);
    $this->drupalGet('user');
    $this->clickLink(t('Edit'));
    $this->drupalGet('admin/people/permissions');
    $this->drupalGet('admin/people/permissions/roles');
    $this->assertText(t('Expose roles in user profile page'), 0, t('Make sure Roles page has fieldset title for Role expose.'), t('Role Expose'));
    $this->assertText(t('Check all roles you want users to see in their profile page.'), 0, t('Make sure Roles page has info text for Role expose.'), t('Role Expose'));
  }

  /**
   * Test config page functions.
   */
  public function testSaveConfigurationWorksAsExpected() {
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/people/permissions/roles');
    // Authenticated role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-2');
    // Administrator role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-3');
    // Other test role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-4');

    $edit = array();
    // Check a checkbox, by form element name.
    $edit['role_expose[2]'] = TRUE;
    // Check a checkbox, by form element name.
    $edit['role_expose[3]'] = TRUE;

    $this->drupalPost('admin/people/permissions/roles', $edit, t('Save exposed roles'));
    $this->assertText(t('Exposed roles have been saved.'));
    // Authenticated role, by element id.
    $this->assertFieldChecked('edit-role-expose-2');
    // Administrator role, by element id.
    $this->assertFieldChecked('edit-role-expose-3');
    // Other test role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-4');

    $this->drupalGet('admin/people/permissions/roles');
    // Authenticated role, by element id.
    $this->assertFieldChecked('edit-role-expose-2');
    // Administrator role, by element id.
    $this->assertFieldChecked('edit-role-expose-3');
    // Other test role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-4');

    $edit = array();
    // Check a checkbox, by form element name.
    $edit['role_expose[3]'] = FALSE;

    $this->drupalPost('admin/people/permissions/roles', $edit, t('Save exposed roles'));
    $this->assertText(t('Exposed roles have been saved.'));
    // Authenticated role, by element id.
    $this->assertFieldChecked('edit-role-expose-2');
    // Administrator role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-3');
    // Other test role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-4');

    $this->drupalGet('admin/people/permissions/roles');
    // Authenticated role, by element id.
    $this->assertFieldChecked('edit-role-expose-2');
    // Administrator role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-3');
    // Other test role, by element id.
    $this->assertNoFieldChecked('edit-role-expose-4');
  }

}
