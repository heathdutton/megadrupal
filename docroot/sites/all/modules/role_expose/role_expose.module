<?php

/**
 * @file
 * Allows users to see their own roles and other user in admin defined roles.
 */

/**
 * Implements hook_help().
 */
function role_expose_help($path, $arg) {
  switch ($path) {
    case 'admin/help#role_expose':
      return '<p>' . t('Role Expose -module gives site administrators ability to expose user their own user roles.') .
          t('Users may be granted an option to view own roles or all users roles.') . '<p>' .
          '</p>' . t('By default all roles are unchecked ie. not visible.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function role_expose_permission() {
  return array(
    'view own roles' => array(
      'title' => t('View own exposed roles'),
      'description' => t('View own exposed roles in user profile. Applies only to logged in users.'),
    ),
    'view roles of all users' => array(
      'title' => t('View exposed roles for all users'),
      'description' => t('View exposed roles for all users in user profile page.'),
    ),
  );
}

/**
 * Implements hook_user_view_alter().
 *
 * Alter user profile page by injecting information about exposed roles.
 */
function role_expose_user_view_alter(&$build) {
  if (role_expose_user_access($build['#account']->uid)) {
    global $user;
    $account_id = $build['#account']->uid;
    if ($user->uid == $account_id) {
      $account = $user;
    }
    else {
      $account = user_load($account_id);
    }

    $list = role_expose_exposed_list($account);
    if (count($list)) {
      $build['role_expose_user_role'] = array(
        '#items' => $list,
        '#theme' => 'item_list',
        '#title' => t('Your site roles'),
        '#weight' => 1,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter admin-section Roles-page by adding a form to control exposed roles
 * below Role management section.
 */
function role_expose_form_user_admin_roles_alter(&$form, &$form_state) {
  $form['role_expose_fieldset'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Expose roles in user profile page'),
    '#description' => t('Check all roles you want users to see in their profile page.'),
  );
  // Array $form includes roles, so do re-execute sql-query using user_roles().
  foreach ($form['roles'] as $role) {
    // Always skip anonymous role.
    if (isset($role['#role']->rid) && $role['#role']->rid > 1) {
      $roles[$role['#role']->rid] = $role['#role']->name;
    }
  }
  $form['role_expose_fieldset']['role_expose'] = array(
    '#type' => 'checkboxes',
    '#options' => $roles,
    '#default_value' => variable_get('role_expose_show_roles', array()),
    '#title' => t('Roles'),
  );
  $form['role_expose_fieldset']['save_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save exposed roles'),
    '#submit' => array('role_expose_user_admin_roles_submit'),
  );
}

/**
 * Submit handler for role_expose_form_user_admin_roles_alter().
 */
function role_expose_user_admin_roles_submit($form, &$form_state) {
  $rids = array_filter($form_state['values']['role_expose']);
  variable_set('role_expose_show_roles', $rids);
  drupal_set_message(t('Exposed roles have been saved.'));
}

/**
 * Content for user profile page.
 *
 * This function does not (re-)verify permission to view content.
 *
 * @param int $uid
 *   User account id for exposed roles listing.
 *
 * @return array
 *   Return list of roles in a renderable array.
 *
 * @see role_expose_user_view_alter()
 */
function role_expose_user_role_list($uid) {
  global $user;
  if ($user->uid == $uid) {
    $account = $user;
  }
  else {
    $account = user_load($uid);
  }

  $list = role_expose_exposed_list($account);
  if (count($list)) {
    return array(
      'role_expose_user_role' => array(
        '#items' => $list,
        '#theme' => 'item_list',
        '#title' => t('Your site roles'),
        '#weight' => 1,
      ),
    );
  }
}

/**
 * Access callback for multiple permission checking.
 *
 * @param int $account_id
 *   Account id which is being viewed.
 *
 * @return bool
 *   Does user have permission to view $account_id account roles or not.
 */
function role_expose_user_access($account_id) {
  if (!is_numeric($account_id)) {
    return FALSE;
  }
  else {
    $account = user_load($account_id);
  }
  global $user;
  if ((user_access('view roles of all users') &&
      user_access('access user profiles')) || user_access('administer users')) {
    return TRUE;
  }
  elseif ($account->uid == $user->uid && user_access('view own roles')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to list viewable roles for an account.
 *
 * @param object $account
 *   User account object.
 *
 * @return array
 *   List of role id's.
 */
function role_expose_exposed_list($account) {
  $exposed = variable_get('role_expose_show_roles', array());

  // Exposed roles stored with gid only, so compare role id's (ie. flip array).
  $list = array_intersect(array_flip($account->roles), $exposed);

// Flip array back to gid => role_name
  $list = array_flip ($list);

  // Sanitize role names for UI
  $list = array_map('check_plain', $list);

  return $list;
}
