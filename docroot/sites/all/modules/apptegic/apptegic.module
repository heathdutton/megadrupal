<?php

/**
 * @file
 * Apptegic integration with Drupal.
 */

/**
 * Implements hook_help().
 */
function apptegic_help($path, $arg) {
  switch ($path) {
    case 'admin/help#apptegic':
      return t("Analyze your customers' detailed actions, business metrics, and visit patterns so that you can understand what leads to success and incent those behaviors.");

    case 'admin/config/services/apptegic':
      $output = '';
      $output .= '<p>' . t("!apptegic analyzes your customers' detailed actions, business metrics, and visit patterns so that you can understand what leads to success and incent those behaviors.", array(
        '!apptegic' => l('Apptegic', 'http://apptegic.com'),
      ));
      // Provide additional information when Rules is available.
      if (module_exists('rules')) {
        $output .= t(' Setting up <a href="@rules">Rules</a> reactions will allow overriding certain Apptegic parameters.', array(
          '@rules' => url('admin/config/workflow/rules/reaction'),
        ));
      }
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function apptegic_menu() {
  // Module settings.
  $items['admin/config/services/apptegic'] = array(
    'title' => 'Apptegic',
    'description' => "Analyze your visitor's detailed actions, business metrics, and visit patterns so that you can understand what leads to success and incent those behaviors.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apptegic_admin_settings'),
    'access arguments' => array('administer apptegic'),
    'file' => 'apptegic.admin.inc',
    'file path' => drupal_get_path('module', 'apptegic'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function apptegic_permission() {
  return array(
    'administer apptegic' => array(
      'title' => t('Administer Apptegic settings'),
      'description' => t('Perform administration tasks on Apptegic.'),
    ),
  );
}

/**
 * Returns an array of available parameters to be sent over to Apptegic.
 *
 * @param $array
 *   Tells the function to return the fields as an array. If set to false,
 *   will return the string index of the values.
 */
function apptegic_parameters($array = TRUE, $variablename = 'apptegic_parameters', $defaults = "setDataset|text\nsetAccount|text\nsetUser|text\nsetCompany|text\nsetAccountType|text\nsetAction|text") {
  static $fieldsarray = array();
  // The default available fields.
  $string = variable_get($variablename, $defaults);
  // Check if we are to return it as a string, or an array.
  if ($array) {
    // Use that staticly cached version, if it's available.
    if (!empty($fieldsarray)) {
      return $fieldsarray;
    }
    // Each field is a new line.
    $array = explode("\n", $string);
    foreach ($array as $field) {
      // Each field has a name and a type, seperated by a |.
      $info = explode('|', $field);
      $name = trim(isset($info[0]) ? $info[0] : '');
      $type = trim(isset($info[1]) ? $info[1] : 'text');
      // Only accept fields with proper names.
      if (!empty($name)) {
        $fieldsarray[$name] = $type;
      }
    }
    return $fieldsarray;
  }
  return $string;
}

/**
 * Add an action to send off to Apptegic.
 *
 * @param string $action
 *   The action to send to Apptegic.
 * @param array $params
 *   A set of parameters to send to Apptegic.
 *
 * @return array
 *   The parameters which are to be sent to Apptegic.
 */
function apptegic_add_action($action = NULL, array $params = array(), $uid = NULL) {
  global $user;
  // Merge in the new values, only overwriting if something is set.
  $finalaction = apptegic_defaultparameters($action, $user);
  foreach ($params as $key => $value) {
    if (!empty($value)) {
      $finalaction[$key] = $value;
    }
  }

  // Queue the action.
  db_insert('apptegic')
    ->fields(array(
      'uid' => !isset($uid) ? $user->uid : $uid,
      'actionset' => serialize($finalaction),
    ))
    ->execute();
}

/**
 * Get the default parameters to be passed to Apptegic.
 */
function apptegic_defaultparameters($action = NULL, $account = NULL) {
  static $default_parameters = array();
  if (!isset($account)) {
    global $user;
    $account = $user;
  }

  // Load the default parameters.
  if (empty($default_parameters)) {
    $default_parameters['setDataset'] = variable_get('apptegic_dataset', '');
    $default_parameters['setAccount'] = variable_get('apptegic_account', '');
    if (variable_get('apptegic_setusesiteconfig', TRUE)) {
      $default_parameters['setUseSiteConfig'] = TRUE;
    }

    // Make sure the required fields are available.
    if (empty($default_parameters['setDataset'])  || empty($default_parameters['setAccount'])) {
      return $default_parameters;
    }

    // Inject the default parameters.
    $default_parameters['setUser'] = isset($account->name) ? $account->name : variable_get('anonymous', t('Anonymous'));
    $default_parameters['setCompany'] = isset($account->roles) ? implode(',', $account->roles) : 'anonymous';
    $default_parameters['setAction'] = $action;

    // Set up the Cookie Domain.
    $domain = variable_get('apptegic_cookiedomain', '');
    if (!empty($domain)) {
      $default_parameters['setCookieDomain'] = $domain;
    }

    // Retrieve the company from the user object.
    $company = variable_get('apptegic_company', '');
    if (!empty($company)) {
      // Load the user entity.
      $accounts = entity_load('user', array($account->uid));
      // Make sure the entity is complete.
      $account = array_pop($accounts);
      if (isset($account)) {
        // Safely load the company field.
        $items = field_get_items('user', $account, $company);
        if ($items) {
          // Use the safe value to pass over to Apptegic.
          $item = array_pop($items);
          if (isset($item) && isset($item['safe_value'])) {
            $default_parameters['setCompany'] = $item['safe_value'];
          }
        }
      }
    }
  }

  return $default_parameters;
}

/**
 * Get the default custom variables to be passed to Apptegic.
 */
function apptegic_defaultcustomvariables($account = NULL) {
  $custom = array();
  if (!isset($account)) {
    global $user;
    $account = $user;
  }
  // Send in the roles.
  if (isset($account->roles)) {
    $i = 1;
    foreach ($account->roles as $role) {
      $custom['role' . $i] = $role;
      $i++;
    }
  }
  return $custom;
}

function apptegic_add_javascript() {
  // Retrieve the actions.
  global $user;
  $result = db_select('apptegic', 'a')
    ->fields('a', array('actionset', 'aid'))
    ->condition('uid', $user->uid, '=')
    ->execute();

  // Only add the Apptegic JavaScript on the first round.
  static $i = 1;
  $actions = array();
  if ($i == 1) {
    // Allow for OnMessage support.
    $onmessage = variable_get('apptegic_onmessage', FALSE);
    if ($onmessage) {
      drupal_add_js(array(
        'apptegic' => array(
          'onmessage' => TRUE,
        ),
      ), 'setting');
    }
    drupal_add_js(drupal_get_path('module', 'apptegic') . '/apptegic.js');

    // Add the account information.
    drupal_add_js(array(
      'apptegic' => array(
        'account' => variable_get('apptegic_account', ''),
      ),
    ), 'setting');
    $accountset = TRUE;

    // Make sure the initial View action is available.
    $params = apptegic_defaultparameters('View');

    // Provide the encrypted User ID if possible.
    $apitoken = variable_get('apptegic_apitoken', '');
    if (!empty($apitoken)) {
      // Load the encrypted user id utility.
      module_load_include('php', 'apptegic', 'EncryptedUserIdUtility');
      $encrypt = new EncryptedUserIdUtility(variable_get('apptegic_account', ''), $apitoken);
      drupal_add_js(array(
        'apptegic' => array(
          'encrypteduserid' => $encrypt->encrypt($params['setUser']),
        ),
      ), 'setting');
    }

    unset($params['setAction']);
    $actions[] = array(
      'action' => 'View',
      'custom' => apptegic_defaultcustomvariables(),
      'params' => $params,
    );
  }

  $recordstodelete = array();

  while ($record = $result->fetchAssoc()) {
    $finalaction = unserialize($record['actionset']);
    $recordstodelete[] = $record['aid'];

    // Retrieve the action and remove it from the parameters.
    $action = empty($finalaction['setAction']) ? FALSE : $finalaction['setAction'];
    unset($finalaction['setAction']);

    // Split out the custom variables.
    $custom = apptegic_defaultcustomvariables();
    foreach ($finalaction as $name => $value) {
      // See if this is a custom variable.
      if (substr($name, 0, 3) != 'set') {
        $custom[$name] = $value;
        unset($finalaction[$name]);
      }
    }

    $actions[] = array(
      'action' => $action,
      'custom' => $custom ,
      'params' => $finalaction,
    );
  }

  foreach ($actions as $a) {
    $i = $i + 1;
    // Add all the parameters to Drupal.settings.
    drupal_add_js(array(
      'apptegic' => array(
        'actions' => array(
          $i => $a,
        ),
      ),
    ), 'setting');
  }

  // Delete all processed entries.
  foreach ($recordstodelete as $aid) {
    db_delete('apptegic')
      ->condition('aid', $aid)
      ->execute();
  }
}

/**
 * Implements hook_page_alter().
 */
function apptegic_page_alter($js) {
  // Add the JavaScript if it's required.
  apptegic_add_javascript();
}

/**
 * Actions
 */

/**
 * Implements hook_user_insert().
 */
function apptegic_user_insert($account) {
  apptegic_add_action('User: Register', array(
    'uid' => $account['uid'],
    'userId' => $account['name'],
    'mail' => $account['mail'],
  ));
}

/**
 * Implements hook_comment_insert().
 */
function apptegic_comment_insert($comment) {
  apptegic_add_action('Comment: Add', array(
    'cid' => $comment->cid,
    'nid' => $comment->nid,
    'title' => $comment->subject,
  ));
}

/**
 * Implements hook_comment_delete().
 */
function apptegic_comment_delete($comment) {
  apptegic_add_action('Comment: Delete', array(
    'cid' => $comment->cid,
    'nid' => $comment->nid,
    'title' => $comment->subject,
  ));
}

/**
 * Implements hook_flag().
 */
function apptegic_flag($op, $flag, $content_id, $account, $fcid) {
  if ($op == 'flag') {
    apptegic_add_action('Flag: Add', array(
      'fid' => $flag->fid,
      'content_type' => $flag->content_type,
      'flag_type' => $flag->name,
    ));
  }
}

/**
 * Implements hook_node_insert().
 */
function apptegic_node_insert($node) {
  apptegic_add_action('Node: Insert', array(
    'nid' => $node->nid,
    'type' => $node->type,
    'title' => $node->title,
    'vid' => isset($node->vid) ? $node->vid : 0,
  ));
}

/**
 * Implements hook_node_update().
 */
function apptegic_node_update($node) {
  apptegic_add_action('Node: Update', array(
    'nid' => $node->nid,
    'type' => $node->type,
    'title' => $node->title,
    'vid' => isset($node->vid) ? $node->vid : 0,
  ));
}

/**
 * Implements hook_node_delete().
 */
function apptegic_node_delete($node) {
  apptegic_add_action('Node: Delete', array(
    'nid' => $node->nid,
    'type' => $node->type,
    'title' => $node->title,
    'vid' => isset($node->vid) ? $node->vid : 0,
  ));
}

/**
 * Implements hook_user_login().
 */
function apptegic_user_login(&$edit, $account) {
  apptegic_add_action('User: Login', array(
    'uid' => $account->uid,
    'userId' => $account->name,
    'mail' => $account->mail,
  ), $account->uid);
}

/**
 * Implements hook_user_logout().
 */
function apptegic_user_logout($account) {
  apptegic_add_action('User: Logout', array(
    'uid' => $account->uid,
    'userId' => $account->name,
    'mail' => $account->mail,
  ), 0);
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function apptegic_taxonomy_term_insert($term) {
  apptegic_add_action('Taxonomy: Term - Insert', array(
    'taxonomy_name' => $term->name,
    'taxonomy_description' => $term->description,
    'tid' => $term->tid,
    'vid' => $term->vid,
  ));
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function apptegic_taxonomy_term_delete($term) {
  apptegic_add_action('Taxonomy: Term - Delete', array(
    'taxonomy_name' => $term->name,
    'taxonomy_description' => $term->description,
    'tid' => $term->tid,
    'vid' => $term->vid,
  ));
}
