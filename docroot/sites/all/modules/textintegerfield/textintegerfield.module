<?php

/**
 * @file
 * Defines compound text and integer field type.
 */

/**
 * Maximum text length - needs to match value in textintegerfield.install.
 */
define('TEXTINTEGERFIELD_TEXT_MAX_LENGTH', 2048);

/**
 * Implements hook_field_info().
 */
function textintegerfield_field_info() {
  return array(
    'textintegerfield' => array(
      'label' => t('Text and integer'),
      'description' => t('Store text and an associated integer in the database.'),
      'instance_settings' => array(
        'text_label' => t('Text'),
        'integer_label' => t('Integer'),
      ),
      'default_widget' => 'textintegerfield',
      'default_formatter' => 'textintegerfield',
      // Support hook_entity_property_info() from contrib "Entity API".
      'property_type' => 'field_item_textintegerfield',
      'property_callbacks' => array('textintegerfield_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function textintegerfield_field_instance_settings_form($field, $instance) {
  $form = array();

  $settings = $instance['settings'];
  $form['text_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Text label'),
    '#default_value' => $settings['text_label'],
    '#description' => t('The label shown to people entering data for the text form element.'),
    '#size' => 60,
  );
  $form['integer_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Integer label'),
    '#default_value' => $settings['integer_label'],
    '#description' => t('The label shown to people entering data for the integer form element.'),
    '#size' => 60,
  );

  return $form;
}

/**
 * Implement hook_field_is_empty().
 */
function textintegerfield_field_is_empty($item, $field) {
  return empty($item['text']) && empty($item['integer']);
}

/**
 * Implements hook_field_validate().
 *
 * Must also implement hook_field_widget_error() to present message correctly.
 */
function textintegerfield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    $value = $item['integer'];
    // Strange there's no way to use Drupal's element_validate_integer() here,
    // but we can steal integer-checking code from it.
    if ($value !== '' && (!is_numeric($value) || intval($value) != $value)) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'integer',
        'message' => t('The %label of field %field must be an integer.', array(
          '%label' => $instance['settings']['integer_label'],
          '%field' => $instance['label'],
        )),
      );
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function textintegerfield_field_widget_error($element, $error, $form, &$form_state) {
  // To do... more exactitude?
  form_error($element['rank'], $error['message']);
}

/**
 * Implements hook_field_widget_info().
 */
function textintegerfield_field_widget_info() {
  return array(
    'textintegerfield' => array(
      'label' => 'Text and integer field',
      'field types' => array('textintegerfield'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * This is not a true hook, but a callback that applies only to module-defined widgets.
 */
function textintegerfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch($instance['widget']['type']) {
    case 'textintegerfield':
      $element['text'] = array(
        '#title' => $instance['settings']['text_label'],
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['text']) ? $items[$delta]['text'] : NULL,
        '#size' => 32,
        '#maxlength' => TEXTINTEGERFIELD_TEXT_MAX_LENGTH,
        '#attributes' => array('class' => array('textintegerfield-text')),
      );
      $element['integer'] = array(
        '#title' => $instance['settings']['integer_label'],
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['integer']) ? $items[$delta]['integer'] : NULL,
        '#size' => 16,
        '#maxlength' => 20,
        '#attributes' => array('class' => array('textintegerfield-integer')),
      );
      // Validate we are getting an integer and prepare it for the database.
      // $element['#element_validate'][] = 'textintegerfield_widget_validate';
      // Above would seem to be handled already by textintegerfield_field_validate()?
      $element['#theme'] = 'textintegerfield_widget';
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function textintegerfield_theme() {
  return array(
    'textintegerfield_formatter_textintegerfield' => array(
      'variables' => array('element' => NULL),
    ),
    'textintegerfield_widget' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_textintegerfield_widget($vars) {
  drupal_add_css(drupal_get_path('module', 'textintegerfield') .'/textintegerfield.css');

  $element = $vars['element'];

  $output = '';
  $output .= '<div class="textintegerfield-subrow clearfix">';
  $output .= '<div class="textintegerfield-text textintegerfield-column">'. drupal_render($element['text']) .'</div>';
  $output .= '<div class="textintegerfield-integer textintegerfield-column'. drupal_render($element['integer']) .'</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function textintegerfield_field_formatter_info() {
  return array(
    'textintegerfield' => array(
      'label' => t('Text and integer (default)'),
      'field types' => array('textintegerfield'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function textintegerfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('textintegerfield_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for default text and integer field formatter.
 *
 * This handles one text and integer field combination at a time.  If we want
 * to put multiple values together in a table, we'll need a #theme_wrappers?
 * That was on the input side though, and this is on the output.  Hmm.
 */
function theme_textintegerfield_formatter_textintegerfield($vars) {
  $output = '';
  $output = check_plain($vars['element']['text']);
  if (!empty($vars['element']['integer'])) {
    $output .= $vars['element']['integer'];
  }
  return $output;
}

/**
 * Theme function for linked text and integer field formatter.
 */
function theme_textintegerfield_formatter_textintegerfield_linktext($vars) {
  $output = '';
  $text = check_plain($vars['element']['text']);
  $output = l($text, 'http://duckduckgo.com/q?=' . $text);
  if (!empty($vars['element']['integer'])) {
    $output .= $vars['element']['integer'];
  }
  return $output;
}

/**
 * @TODO Implements hook_views_api().
function textintegerfield_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'textintegerfield') .'/views',
  );
}
 */

/**
 * Implements hook_field_settings_form().
 */
function textintegerfield_field_settings_form() {
  return array();
}

/**
 * Additional callback to adapt the property info of link fields.
 *
 * For Entity API module.
 * @see entity_metadata_field_entity_property_info().
 */
function textintegerfield_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  // Define a data structure so it's possible to deal with both the link title
  // and URL.
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';

  // Auto-create the field item as soon as a property is set.
  $property['auto creation'] = 'textintegerfield_item_create';

  $property['property info'] = textintegerfield_item_property_info();
  // See link_field_item_property_info() for an example with 'required' logic.

  unset($property['query callback']);
}

/**
 * Callback for creating a new, empty link field item.
 *
 * @see textintegerfield_field_property_info_callback()
 */
function textintegerfield_item_create() {
  return array('text' => NULL, 'integer' => NULL);
}

/**
 * Defines info for the properties of the link-field item data structure.
 */
function textintegerfield_item_property_info() {
  $properties['text'] = array(
    'type' => 'text',
    'label' => t('Text.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['integer'] = array(
    'type' => 'integer',
    'label' => t('Integer.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $properties;
}
