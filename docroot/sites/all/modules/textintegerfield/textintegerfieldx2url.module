<?php

/**
 * @file
 * Defines compound text, text, url, integer, and integer field type.
 *
 * Initial use is for search result ranking (words, rank, url, title, and a
 * unique identifier (the second integer) but all labels can be overridden.
 */

/**
 * Maximum text lengths (match values in textintegerfield2xurl.install).
 */
define('TEXTINTEGERFIELDX2URL_WORDS_MAX_LENGTH', 2048);
define('TEXTINTEGERFIELDX2URL_URL_MAX_LENGTH', 1024);
define('TEXTINTEGERFIELDX2URL_TITLE_MAX_LENGTH', 512);

/**
 * An array defining the subfields in this compound field.
 *
 * Default widget size (as used later) is 32.
 */
function textintegerfieldx2url_subfields() {
  return array(
    'words' => array(
      'label' => t('Search words'),
      'maxlength' => TEXTINTEGERFIELDX2URL_WORDS_MAX_LENGTH,
    ),
    'rank' => array(
      'label' => t('Rank'),
      'widget_size' => 16,
    ),
    'url' => array(
      'label' => t('URL'),
      'widget_size' => 64,
      'maxlength' => TEXTINTEGERFIELDX2URL_URL_MAX_LENGTH,
    ),
    'title' => array('label' => t('Title')),
    'id' => array(
      'label' => t('Unique identifier'),
      'widget_size' => 16,
      'maxlength' => TEXTINTEGERFIELDX2URL_TITLE_MAX_LENGTH,
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function textintegerfieldx2url_field_info() {
  return array(
    'textintegerfieldx2url' => array(
      'label' => t('Text, text, integer, integer, and URL'),
      'description' => t('Store two text values, two integers, and a URL together in the database.  The initial use case was for search result rankings, but all labels can be overridden.'),
      // Could replace with loop of textintegerfieldx2url_subfields().
      'instance_settings' => array(
        'words_label' => t('Search words'),
        'rank_label' => t('Rank'),
        'url_label' => t('URL'),
        'title_label' => t('Title'),
        'id_label' => t('Unique identifier'),
      ),
      'default_widget' => 'textintegerfieldx2url',
      'default_formatter' => 'textintegerfieldx2url',
      // Support hook_entity_property_info() from contrib "Entity API".
      'property_type' => 'field_item_textintegerfieldx2url',
      'property_callbacks' => array('textintegerfieldx2url_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function textintegerfieldx2url_field_instance_settings_form($field, $instance) {
  $form = array();
  $settings = $instance['settings'];
  $subfields = textintegerfieldx2url_subfields();
  foreach ($subfields as $subfield => $info) {
    $form[$subfield . '_label'] = array(
      '#type' => 'textfield',
      '#title' => t($info['label'] . ' label'),
      '#default_value' => $settings[$subfield . '_label'],
      '#description' => t('The label shown to people entering data for the %subfield form element.', array('%subfield' => $subfield)),
      '#size' => 60,
    );
  }
  return $form;
}

/**
 * Implement hook_field_is_empty().
 */
function textintegerfieldx2url_field_is_empty($item, $field) {
  return empty($item['words']) && empty($item['rank']) && empty($item['url']);
}

/**
 * Implements hook_field_validate().
 *
 * Must also implement hook_field_widget_error() to present message correctly.
 */
function textintegerfieldx2url_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // Check that our integers are indeed integers (if filled in at all).
    foreach (array('rank', 'id') as $subfield) {
      $value = $item[$subfield];
      // Strange there's no way to use Drupal's element_validate_integer() here,
      // but we can steal integer-checking code from it.
      if ($value !== '' && (!is_numeric($value) || intval($value) != $value)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => $subfield,
          'message' => t('The %label of field %field must be an integer.', array(
            '%label' => $instance['settings'][$subfield . '_label'],
            '%field' => $instance['label'],
          )),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function textintegerfieldx2url_field_widget_error($element, $error, $form, &$form_state) {
  $subfield = $error['error'];
  form_error($element[$subfield], $error['message']);
}

/**
 * Implements hook_field_widget_info().
 */
function textintegerfieldx2url_field_widget_info() {
  return array(
    'textintegerfieldx2url' => array(
      'label' => 'Text and integer (twice) and URL field',
      'field types' => array('textintegerfieldx2url'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * This is not a true hook, but a callback that applies only to module-defined widgets.
 */
function textintegerfieldx2url_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch($instance['widget']['type']) {
    case 'textintegerfieldx2url':
      foreach (textintegerfieldx2url_subfields() as $subfield => $info) {
        $size = isset($info['widget_size']) ? $info['widget_size'] : 32;
        $element[$subfield] = array(
          '#title' => $instance['settings'][$subfield . '_label'],
          '#type' => 'textfield',
          '#default_value' => isset($items[$delta][$subfield]) ? $items[$delta][$subfield] : NULL,
          '#size' => $size,
          '#maxlength' => isset($info['maxlength']) ? $info['maxlength'] : $size,
          '#attributes' => array('class' => array('textintegerfield-' . $subfield)),
        );
      }
      $element['#theme'] = 'textintegerfieldx2url_widget';
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function textintegerfieldx2url_theme() {
  return array(
    'textintegerfieldx2url_formatter_textintegerfieldx2url' => array(
      'variables' => array('element' => NULL),
    ),
    'textintegerfieldx2url_widget' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_textintegerfieldx2url_widget($vars) {
  $output = '';
  $output .= '<div class="textintegerfieldx2url-subrow clearfix">';
  $subfields = $vars['element'];
  foreach ($subfields as $subfield => $element) {
    $output .= '<div class="textintegerfieldx2url-' . $subfield . ' textintegerfieldx2url-column">'. drupal_render($element) .'</div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function textintegerfieldx2url_field_formatter_info() {
  return array(
    'textintegerfieldx2url' => array(
      'label' => t('Text, text, integer, integer, and URL (default)'),
      'field types' => array('textintegerfieldx2url'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function textintegerfieldx2url_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('textintegerfieldx2url_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for default textintegerfieldx2url field formatter.
 *
 * This handles one text, text, integer, integer, and URL field combination at
 * a time.  If we want to put multiple values together in a table, we'll need to
 * do that in textintegerfield2xurl_field_formatter_view().
 */
function theme_textintegerfieldx2url_formatter_textintegerfieldx2url($vars) {
  $output = '';

  $subfields = $vars['element'];
  $output .= '<div class="textintegerfieldx2url-row">';
  foreach ($subfields as $subfield => $element) {
    $output .= '<span class="textintegerfieldx2url-item">';
    $output .= check_plain($element);
    $output .= '</span>';
  }
  return $output;
}

/**
 * Theme function for compound text and integer (x2) and URL field formatter.
 */
function theme_textintegerfieldx2url_formatter_textintegerfield_linktext($vars) {
  $output = '';
  $words = check_plain($vars['element']['words']);
  $title = check_plain($vars['element']['title']);
  $url = check_plain($vars['element']['url']);
  $output .= l($words, 'http://duckduckgo.com/q?=' . $words);
  if (!empty($vars['element']['rank'])) {
    $output .= ' Search rank: ';
    $output .= $vars['element']['rank'];
  }
  $output .= l($title, $url);
  return $output;
}

/**
 * Implements hook_field_settings_form().
 */
function textintegerfieldx2url_field_settings_form() {
  return array();
}

/**
 * Additional callback to adapt the property info of link fields.
 *
 * For Entity API module.
 * @see entity_metadata_field_entity_property_info().
 */
function textintegerfieldx2url_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  // Define a data structure so it's possible to deal with both the link title
  // and URL.
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';

  // Auto-create the field item as soon as a property is set.
  $property['auto creation'] = 'textintegerfield2xurl_item_create';

  $property['property info'] = textintegerfieldx2url_item_property_info();
  // See link_field_item_property_info() for an example with 'required' logic.

  unset($property['query callback']);
}

/**
 * Callback for creating a new, empty link field item.
 *
 * @see textintegerfieldx2url_field_property_info_callback()
 */
function textintegerfieldx2url_item_create() {
  $item = array();
  foreach (textintegerfieldx2url_subfields() as $subfield => $info) {
    $item[$subfield] = NULL;
  }
  return $item;
}

/**
 * Defines info for the properties of the link-field item data structure.
 */
function textintegerfieldx2url_item_property_info() {
  $properties = array();
  foreach (textintegerfieldx2url_subfields() as $subfield => $info) {
    $properties[$subfield] = array(
      'type' => $subfield, // 'text', ?
      'label' => $info['label'],
      'setter callback' => 'entity_property_verbatim_set',
    );
  }
  return $properties;
}
