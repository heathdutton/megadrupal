<?php

define('COMMERCE_PAGONLINE_URL', 'http://pagamenti.unicredito.it/initInsert.do');

/**
 * Implementation of hook_menu().
 *
 * @return array
 */
function commerce_pagonline_menu() {
  $items['commerce/pagonline/notification'] = array(
    'title' => 'PagOnline notification',
    'page callback' => '_commerce_pagonline_handle_notification',
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_commerce_payment_method_info().
 *
 * @return array
 */
function commerce_pagonline_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_pagonline_carte'] = array(
    'method_id' => 'commerce_pagonline_carte',
    'display_title' => t('PagOnline'),
    'title' => t('Unicredit PagOnline Carte'),
    'description' => t('Redirect users to submit payments through Unicredit PagOnline.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return array A form snippet.
 */
function commerce_pagonline_carte_settings_form($settings = NULL) {

  $settings += array(
    'numeroCommerciante' => '',
    'stabilimento' => '',
    'userID' => '',
    'password' => '',
    'valuta' => '',
    'flagRiciclaOrdine' => '',
    'flagDeposito' => '',
    'tipoRispostaApv' => '',
    'urlOk' => '',
    'urlKo' => '',
    'stringaSegreta' => '',
    'tipoPagamento' => '',
  );


  $form['numeroCommerciante'] = array(
    '#type' => 'textfield',
    '#title' => t('Numero Commerciante'),
    '#default_value' => $settings['numeroCommerciante'],
    '#required' => TRUE
  );

  $form['stabilimento'] = array(
    '#type' => 'textfield',
    '#title' => t('Stabilimento'),
    '#default_value' => $settings['stabilimento'],
    '#required' => TRUE
  );

  $form['userID'] = array(
    '#type' => 'textfield',
    '#title' => t('UserID'),
    '#default_value' => $settings['userID'],
    '#required' => TRUE
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => $settings['password'],
    '#required' => TRUE
  );

  $form['stringaSegreta'] = array(
    '#type' => 'textfield',
    '#title' => t('Stringa segreta'),
    '#default_value' => $settings['stringaSegreta'],
    '#required' => TRUE
  );

  $form['valuta'] = array(
    '#type' => 'select',
    '#title' => t('Valuta'),
    '#options' => array(
      '978' => t('Euro'),
    ),
    '#default_value' => $settings['valuta'],
    '#required' => TRUE
  );

  $form['flagRiciclaOrdine'] = array(
    '#type' => 'select',
    '#title' => t('Flag Ricicla Ordine'),
    '#options' => array(
      'Y' => t('Yes'),
      'N' => t('No'),
    ),
    '#default_value' => $settings['flagRiciclaOrdine'],
    '#required' => TRUE
  );

  $form['flagDeposito'] = array(
    '#type' => 'select',
    '#title' => t('Flag Deposito'),
    '#options' => array(
      'Y' => t('Yes'),
      'N' => t('No'),
    ),
    '#default_value' => $settings['flagDeposito'],
    '#required' => TRUE
  );

  $form['tipoRispostaApv'] = array(
    '#type' => 'select',
    '#title' => t('Tipo Risposta Apv'),
    '#options' => array(
      'wait' => t('Wait'),
      'click' => t('Click'),
    ),
    '#default_value' => $settings['tipoRispostaApv'],
    '#required' => TRUE
  );

  $form['tipoPagamento'] = array(
    '#type' => 'select',
    '#title' => t('Tipo Pagamento'),
    '#options' => array(
      '' => t('Nessuno - l\'utente lo sceglie sul gateway'),
      'CartCred' => t('CartCred'),
      'ContoCorr' => t('ContoCorr'),
    ),
    '#default_value' => $settings['tipoPagamento'],
    '#required' => FALSE
  );

  return $form;

}

/**
 * Payment method callback; generation callback for the payment submission form.
 *
 * @param $payment_method
 *   An array of the current settings.
 * @param $pane_values
 *   The current values of the pane.
 * @param $checkout_pane
 *   The checkout pane array. The checkout pane will be NULL if the payment is
 *   being added through the administration form.
 * @param $order
 *   The order object.
 * @return array A form snippet for the checkout pane.
 */
function commerce_pagonline_carte_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['commerce_pagonline_information'] = array(
    '#markup' => '<span class="commerce-pagonline-info">' . t('(Continue with checkout to complete payment via PagOnline.)') . '</span>',
  );

  return $form;
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 *
 * Returns form elements that should be submitted to the redirected payment
 * service; because of the array merge that happens upon return, the serviceâ€™s
 * URL that should receive the POST variables should be set in the #action
 * property of the returned form array.
 *
 * @param $form
 * @param $form_state
 * @param $order
 * @param $payment_method
 * @return array
 */
function commerce_pagonline_carte_redirect_form($form, &$form_state, $order, $payment_method) {
  global $language;

  // gets settings from rule configuration
  $settings = $payment_method['settings'];

  // get total amount
  $total = field_get_items('commerce_order', $order, 'commerce_order_total');

  // build return urls
  $urlOK = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $urlKO = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  // compute mac value
  $mac = _commerce_pagonline_compute_mac($settings, $order->order_id, $total, $urlOK, $urlKO);

  // build form
  $form['#action'] = COMMERCE_PAGONLINE_URL;
  $form['#method'] = 'get';

  $form['numeroCommerciante'] = array(
    '#type' => 'hidden',
    '#value' => $settings['numeroCommerciante'],
  );

  $form['userID'] = array(
    '#type' => 'hidden',
    '#value' => $settings['userID'],
  );

  $form['password'] = array(
    '#type' => 'hidden',
    '#value' => 'Password',
  );

  $form['numeroOrdine'] = array(
    '#type' => 'hidden',
    '#value' => $order->order_id,
  );

  $form['totaleOrdine'] = array(
    '#type' => 'hidden',
    '#value' => $total[0]['amount'],
  );

  $form['valuta'] = array(
    '#type' => 'hidden',
    '#value' => $settings['valuta'],
  );

  $form['flagDeposito'] = array(
    '#type' => 'hidden',
    '#value' => $settings['flagDeposito'],
  );

  $form['urlOk'] = array(
    '#type' => 'hidden',
    '#value' => $urlOK,
  );

  $form['urlKo'] = array(
    '#type' => 'hidden',
    '#value' => $urlKO,
  );

  $form['tipoRispostaApv'] = array(
    '#type' => 'hidden',
    '#value' => $settings['tipoRispostaApv'],
  );

  $form['flagRiciclaOrdine'] = array(
    '#type' => 'hidden',
    '#value' => $settings['flagRiciclaOrdine'],
  );

  $form['stabilimento'] = array(
    '#type' => 'hidden',
    '#value' => $settings['stabilimento'],
  );

  $form['mac'] = array(
    '#type' => 'hidden',
    '#value' => $mac,
  );

  $form['langCompratore'] = array(
    '#type' => 'hidden',
    '#value' => $language->language,
  );

  if ($settings['tipoPagamento'] != '') {
    $form['tipoPagamento'] = array(
      '#type' => 'hidden',
      '#value' => $settings['tipoPagamento'],
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PagOnline'),
    '#weight' => 50,
  );
  return $form;
}

/**
 * Payment method callback; validation callback for redirected payments.
 *
 * Upon return from a redirected payment service, this callback provides the
 * payment method an opportunity to validate any returned data before proceeding
 * to checkout completion; should return TRUE or FALSE indicating whether or not
 * the customer should proceed to checkout completion or go back a step in the
 * checkout process from the payment page.
 *
 * @param $order
 *   The order object.
 * @param $payment_method
 *   The payment method array.
 * @return void TRUE if the customer should proceed to checkout completion or FALSE to go
 */
function commerce_pagonline_carte_redirect_form_validate($order, $payment_method) {
  $numeroOrdine = $_POST['numeroOrdine'];
  $numeroCommerciante = $_POST['numeroCommerciante'];
  $stabilimento = $_POST['stabilimento'];
  $esito = $_POST['esito'];
  $mac = $_POST['mac'];

  $settings = $payment_method['settings'];

  $inputMac = "numeroOrdine=" . trim($numeroOrdine);
  $inputMac .= "&numeroCommerciante=" . trim($numeroCommerciante);
  $inputMac .= "&stabilimento=" . trim($stabilimento);
  $inputMac .= "&esito=" . trim($esito);

  if ($esito == 'ok') {
    $dataApprovazione = $_POST['dataApprovazione'];
    $inputMac .= "&dataApprovazione=" . trim($dataApprovazione);
  }

  $MAC = md5($inputMac . "&" . $settings['stringaSegreta']);
  $MACtemp = "";
  for ($i = 0; $i < strlen($MAC); $i = $i + 2) {
    $MACtemp .= chr(hexdec(substr($MAC, $i, 2)));
  }
  $MAC = $MACtemp;
  $MACcode = base64_encode($MAC);

  if ($mac != $MACcode) {
    return FALSE;
  }
}

/** private functions **/

/**
 * Compute mac value
 *
 * @param $settings
 * @param $order_id
 * @param $total
 * @param $urlOK
 * @param $urlKO
 * @return string
 */
function _commerce_pagonline_compute_mac($settings, $order_id, $total, $urlOK, $urlKO) {
  $str = 'numeroCommerciante=' . trim($settings['numeroCommerciante']) . '&';
  $str .= 'userID=' . trim($settings['userID']) . '&';
  $str .= 'password=' . trim($settings['password']) . '&';
  $str .= 'numeroOrdine=' . trim($order_id) . '&';
  $str .= 'totaleOrdine=' . trim($total[0]['amount']) . '&';
  $str .= 'valuta=' . trim($settings['valuta']) . '&';
  $str .= 'flagDeposito=' . trim($settings['flagDeposito']) . '&';
  $str .= 'urlOk=' . trim($urlOK) . '&';
  $str .= 'urlKo=' . trim($urlKO) . '&';
  $str .= 'tipoRispostaApv=' . trim($settings['tipoRispostaApv']) . '&';
  $str .= 'flagRiciclaOrdine=' . trim($settings['flagRiciclaOrdine']) . '&';
  $str .= 'stabilimento=' . trim($settings['stabilimento']) . '&';
  $str .= trim($settings['stringaSegreta']);
  $MAC = md5($str);
  $MACtemp = "";
  for ($i = 0; $i < strlen($MAC); $i = $i + 2) {
    $MACtemp .= chr(hexdec(substr($MAC, $i, 2)));
  }
  $MAC = $MACtemp;
  $MACcode = base64_encode($MAC);
  return $MACcode;
}

/**
 * Server to server notification callback.
 * For this to work you have to add a listener in PagOnline backoffice with url:
 * http://www.example.com/commerce/pagonline/notification
 *
 */
function _commerce_pagonline_handle_notification() {
  $payment_method = commerce_payment_method_instance_load('commerce_pagonline_carte|commerce_payment_commerce_pagonline_carte');
  $settings = $payment_method['settings'];

  $statoattuale = $_GET['statoattuale'];
  $tipomessaggio = $_GET['tipomessaggio'];
  $totaledepositato = $_GET['totaledepositato'];
  $datacreazione = $_GET['datacreazione'];
  $stabilimento = $_GET['stabilimento'];
  $descrizione = $_GET['descrizione'];
  $valuta = $_GET['valuta'];
  $importototale = $_GET['importototale'];
  $datamodifica = $_GET['datamodifica'];
  $statoprecedente = $_GET['statoprecedente'];
  $tipopagamento = $_GET['tipopagamento'];
  $numeroOrdine = $_GET['numeroOrdine'];
  $numeroCommerciante = $_GET['numeroCommerciante'];
  $residuoapprovazione = $_GET['residuoapprovazione'];
  $datagenerazione = $_GET['datagenerazione'];
  $mac = $_GET['mac'];

  // mac validation
  $querystring = '';
  if (_commerce_pagonline_notification_validate_mac($settings, $querystring)) {
    $data = array(
      'statoattuale' => $statoattuale,
      'tipomessaggio' => $tipomessaggio,
      'totaledepositato' => $totaledepositato,
      'datacreazione' => $datacreazione,
      'stabilimento' => $stabilimento,
      'descrizione' => $descrizione,
      'valuta' => $valuta,
      'importototale' => $importototale,
      'datamodifica' => $datamodifica,
      'statoprecedente' => $statoprecedente,
      'tipopagamento' => $tipopagamento,
      'numeroOrdine' => $numeroOrdine,
      'numeroCommerciante' => $numeroCommerciante,
      'residuoapprovazione' => $residuoapprovazione,
      'datagenerazione' => $datagenerazione,
    );

    switch ($statoattuale) {
      case 'ON':
        break;
      case 'AB':
        break;
      case 'RO':
        break;
      case 'IN':
        break;
      case 'IC':
        $order = commerce_order_load($numeroOrdine);
        _commerce_pagonline_transaction_save($payment_method, $order, $data, COMMERCE_PAYMENT_STATUS_SUCCESS, 'The payment has completed.');
        commerce_payment_redirect_pane_next_page($order);
        break;
      case 'OK':
        break;
      case 'CO':
        break;
      case 'ST':
        break;
      case 'EX':
        break;
      case 'KO':
        break;
    }
  }
}

/**
 * @param $settings
 * @param $querystring
 * @return bool
 */
function _commerce_pagonline_notification_validate_mac($settings, $querystring) {
  $stringaSegreta = $settings['stringaSegreta'];
  $stringToBeMacVerified = substr($querystring, 0, strpos($querystring, "mac=", 0) - 1);

  $MAC = md5($stringToBeMacVerified . "&" . $stringaSegreta);
  $MACtemp = "";
  for ($i = 0; $i < strlen($MAC); $i = $i + 2) {
    $MACtemp .= chr(hexdec(substr($MAC, $i, 2)));
  }
  $MAC = $MACtemp;
  $MACcode = base64_encode($MAC);

  $macURL = substr($querystring, strpos($querystring, "mac=", 0) + 4, 24);

  if ($macURL == $MACcode) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Save a transaction.
 *
 * @param $payment_method
 * @param $order
 * @param $data
 * @param $status
 * @param string $message
 */
function _commerce_pagonline_transaction_save($payment_method, $order, $data, $status, $message = '') {
  $total = field_get_items('commerce_order', $order, 'commerce_order_total');

  $transaction = _commerce_pagonline_get_transaction($order);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $total[0]['amount'];
  $transaction->currency_code = $total[0]['currency_code'];
  $transaction->status = $status;
  $transaction->remote_status = $data['statoattuale'];
  $transaction->remote_id = $order->order_id;
  $transaction->payload[REQUEST_TIME] = $data;
  $transaction->message = t($message);

  commerce_payment_transaction_save($transaction);
}

/**
 * Create or retrieve a transaction.
 *
 * @param $order
 * @param bool $create
 * @return bool|mixed|null
 */
function _commerce_pagonline_get_transaction($order, $create = TRUE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('order_id', $order->order_id)
    ->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    return commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
  }
  else {
    if ($create) {
      // Create a new payment transaction for the order.
      return commerce_payment_transaction_new('commerce_pagonline_carte', $order->order_id);
    }
    else {
      return NULL;
    }
  }
}