<?php
/**
 * @file
 * Contains functions used to install/uninstall tripal_core.
 */

/**
 * Implementation of hook_install().
 *
 * @ingroup tripal_core
 */
function tripal_core_install() {

  // The foreign key specification doesn't really add one to the
  // Drupal schema, it is just used internally, but we want one.
  db_query('
      ALTER TABLE {tripal_custom_tables}
      ADD CONSTRAINT tripal_custom_tables_fk1
      FOREIGN KEY (mview_id) REFERENCES {tripal_mviews} (mview_id)
      ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
  ');
}
/**
 * Implementation of hook_schema().
 *
 * @ingroup tripal_core
 */
function tripal_core_schema() {

  // get the schemas defined by this install file
  $schema = tripal_core_get_schemas();

  // if this module is already installed and enabled, then we want to provide
  // the schemas for all of the custom tables.  This will allow Views to
  // see the schemas.  We check if the module is installed because during
  // installation we don't want to make these custom tables available as we don't
  // want them created in the Drupal database.  The custom tables go in the
  // Chado database.
  if (db_table_exists('tripal_custom_tables')) {
    $sql = 'SELECT * FROM {tripal_custom_tables}';
    $results = db_query($sql);
    foreach ($results as $custom) {
      $schema[$custom->table_name] = unserialize($custom->schema);
    }
  }

  return $schema;
}

/**
 * Implementation of hook_uninstall().
 *
 * @ingroup tripal_core
 */
function tripal_core_uninstall() {

  // drop the foreign key between tripal_custom_tables and tripal_mviews
  // so that Drupal can then drop the tables
  db_query('
    ALTER TABLE {tripal_custom_tables}
    DROP CONSTRAINT tripal_custom_tables_fk1 CASCADE
  ');
}

/**
 * This function simply defines all tables needed for the module to work
 * correctly.  By putting the table definitions in a separate function we
 * can easily provide the entire list for hook_install or individual
 * tables for an update.
 *
 * @ingroup tripal_core
 */
function tripal_core_get_schemas() {
  $schema = array();

  // get all the various schema parts and join them together
  $temp = tripal_core_get_jobs_schema();
  foreach ($temp as $table => $arr) {
    $schema[$table] = $arr;
  }
  $temp = tripal_core_get_mviews_schema();
  foreach ($temp as $table => $arr) {
    $schema[$table] = $arr;
  }
  $temp = tripal_core_get_custom_tables_schema();
  foreach ($temp as $table => $arr) {
    $schema[$table] = $arr;
  }
  $temp = tripal_core_get_tripal_token_schema();
  foreach ($temp as $table => $arr) {
    $schema[$table] = $arr;
  }
  $temp = tripal_core_get_tripal_toc_schema();
  foreach ($temp as $table => $arr) {
    $schema[$table] = $arr;
  }
  $temp = tripal_core_get_tripal_vars_schema();
  foreach ($temp as $table => $arr) {
    $schema[$table] = $arr;
  }

  return $schema;
}

/**
 * Describes the Tripal Materialized View (tripal_mviews) table
 * This table keeps track of all materialized views created by Tripal and stored in chado
 *
 * @ingroup tripal_core
 */
function tripal_core_get_mviews_schema() {
  $schema = array();

  $schema['tripal_mviews'] = array(
    'fields' => array(
      'mview_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not NULL' => TRUE
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not NULL' => TRUE
      ),
      'modulename' => array(
        'type' => 'varchar',
        'length' => 50,
        'not NULL' => TRUE,
        'description' => 'The module name that provides the callback for this job'
      ),
      'mv_table' => array(
        'type' => 'varchar',
        'length' => 128,
        'not NULL' => FALSE
      ),
      'mv_specs' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
      'mv_schema' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
      'indexed' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
      'query' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => TRUE
      ),
      'special_index' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
      'last_update' => array(
        'type' => 'int',
        'not NULL' => FALSE,
        'description' => 'UNIX integer time'
      ),
      'status'        => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
      'comment' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
    ),
    'indexes' => array(
      'mview_id' => array('mview_id')
    ),
    'unique keys' => array(
      'mv_table' => array('mv_table'),
      'mv_name' => array('name'),
    ),
    'primary key' => array('mview_id'),
  );

  return $schema;
}

/**
 * Describes the Tripal Jobs (tripal_jobs) table
 * This table keeps track of all tripal jobs including their current status and is used
 * by tripal_launch_jobs to determine which jobs need to be run
 *
 * @ingroup tripal_core
 */
function tripal_core_get_jobs_schema() {
  $schema = array();
  $schema['tripal_jobs'] = array(
    'fields' => array(
      'job_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not NULL' => TRUE
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => TRUE,
        'description' => 'The Drupal userid of the submitee'
      ),
      'job_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not NULL' => TRUE
      ),
      'modulename' => array(
        'type' => 'varchar',
        'length' => 50,
        'not NULL' => TRUE,
        'description' => 'The module name that provides the callback for this job'
      ),
      'callback' => array(
        'type' => 'varchar',
        'length' => 255,
        'not NULL' => TRUE
      ),
      'arguments' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
      'progress' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not NULL' => FALSE,
        'description' => 'a value from 0 to 100 indicating percent complete'
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 50,
        'not NULL' => TRUE
      ),
      'submit_date' => array(
        'type' => 'int',
        'not NULL' => TRUE,
        'description' => 'UNIX integer submit time'
      ),
      'start_time' => array(
        'type' => 'int',
        'not NULL' => FALSE,
        'description' => 'UNIX integer start time'
      ),
      'end_time' => array(
        'type' => 'int',
        'not NULL' => FALSE,
        'description' => 'UNIX integer end time'
      ),
      'error_msg' => array(
        'type' => 'text',
        'size' => 'normal',
        'not NULL' => FALSE
      ),
      'pid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => FALSE,
        'description' => 'The process id for the job'
      ),
      'priority' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => TRUE,
        'default' => '0',
        'description' => 'The job priority'
      ),
      'mlock' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => FALSE,
        'description' => 'If set to 1 then all jobs for the module are held until this one finishes'
      ),
      'lock' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => FALSE,
        'description' => 'If set to 1 then all jobs are held until this one finishes'
      ),
    ),
    'indexes' => array(
      'job_id' => array('job_id'),
      'job_name' => array('job_name')
    ),
    'primary key' => array('job_id'),
  );

  return $schema;
}

/**
 * Describes the Tripal Custom Tables (tripal_custom_tables) table
 * This keeps track of tables created by Tripal and stored in chado that may or may not
 * also be materialized views.
 *
 * @ingroup tripal_core
 */
function tripal_core_get_custom_tables_schema() {
  $schema = array();
  $schema['tripal_custom_tables'] = array(
    'fields' => array(
      'table_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not NULL' => TRUE
      ),
      'table_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not NULL' => TRUE
      ),
      'schema' => array(
        'type' => 'text',
        'not NULL' => TRUE
      ),
      'mview_id' => array(
        'type' => 'int',
        'not NULL' => FALSE
      )
    ),
    'indexes' => array(
      'table_id' => array('table_id'),
    ),
    'primary key' => array('table_id'),
    'foreign keys' => array(
      'tripal_mviews' => array(
        'table' => 'tripal_mviews',
        'columns' => array(
          'mview_id' => 'mview_id'
        ),
      ),
    ),
  );

  return $schema;
}

function tripal_core_get_tripal_token_schema() {
  $schema = array();
  $schema['tripal_token_formats'] = array(
    'fields' => array(
      'tripal_format_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'content_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'application' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'format' => array(
        'type' => 'text',
        'not null' => TRUE
      ),
      'tokens' => array(
        'type' => 'text',
        'not null' => TRUE
      ),
    ),
    'unique keys' => array(
      'type_application' => array('content_type', 'application'),
    ),
    'primary key' => array('tripal_format_id'),
  );

  return $schema;
}

/**
 *
 *
 */
function tripal_core_get_tripal_toc_schema() {
  $schema = array();
  $schema['tripal_toc'] = array(
    'fields' => array(
      'toc_item_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'node_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE
      ),
      'key' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => FALSE
      ),
      'hide' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => FALSE,
      )
    ),
    'indexes' => array(
      'tripal_toc_idx1' => array('node_type', 'key'),
      'tripal_toc_idx2' => array('node_type', 'key', 'nid'),
    ),
    'unique keys' => array(
      'tripal_toc_uq1' => array('node_type', 'key', 'nid'),
    ),
    'primary key' => array('toc_item_id'),
  );

  return $schema;
}

/**
 *
 */
function tripal_core_get_tripal_vars_schema() {
  $schema = array();
  $schema['tripal_variables'] = array(
    'description' => 'This table houses a list of unique variable names that ' .
      'can be used in the tripal_node_variables table.',
    'fields' => array(
      'variable_id' => array (
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array (
        0 => 'variable_id',
    ),
    'unique keys' => array (
      'tripal_variables_c1' => array (
        0 => 'name',
      ),
    ),
    'indexes' => array (
      'tripal_variable_names_idx1' => array (
        0 => 'variable_id',
      ),
    ),
  );

  $schema['tripal_node_variables'] = array(
    'description' => 'This table is used for storing any type of variable such as ' .
      'a property or setting that should be associated with a Tripal managed Drupal node.  This table is '.
      'meant to store non-biological information only. All biological data should be housed ' .
      'in the Chado tables. Be aware that any data stored here will not be made visible ' .
      'through services such as Tripal Web Services and therefore can be a good place to ' .
      'hide application specific settings.',
    'fields' => array (
      'node_variable_id' => array (
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'nid' => array (
        'type' => 'int',
        'not null' => TRUE,
      ),
      'variable_id' => array (
        'type' => 'int',
        'not null' => TRUE,
      ),
      'value' => array (
        'type' => 'text',
        'not null' => FALSE,
      ),
      'rank' => array (
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array (
      0 => 'node_variable_id',
    ),
    'unique keys' => array (
      'tripal_node_variables_c1' => array (
        0 => 'nid',
        1 => 'variable_id',
        2 => 'rank',
      ),
    ),
    'indexes' => array (
      'tripal_node_variables_idx1' => array (
        0 => 'variable_id',
      ),
    ),
    'foreign keys' => array (
      'tripal_variables' => array (
        'table' => 'tripal_variables',
        'columns' => array (
          'variable_id' => 'variable_id',
        ),
      ),
    ),
  );

  return $schema;
}

/**
 * Adds an mview_id column to the tripal_custom_tables table and makes an assocation between the mview and the custom table
 *
 */
function tripal_core_update_7200() {
  try {
    // add an mview column to the tripal_custom_tables table so we
    // can associate which of the custom tables are also mviews
    if (!db_field_exists('tripal_custom_tables', 'mview_id')) {
      $spec = array(
        'type' => 'int',
        'not NULL' => FALSE
      );
      $keys = array(
        'foreign keys' => array(
          'tripal_mviews' => array(
            'table' => 'tripal_mviews',
            'columns' => array(
              'mview_id' => 'mview_id'
            ),
          ),
        ),
      );
      db_add_field('tripal_custom_tables', 'mview_id', $spec, $keys);

      // the foreign key specification doesn't really add one to the
      // Drupal schema, it is just used internally, but we want one
      db_query('
        ALTER TABLE {tripal_custom_tables}
        ADD CONSTRAINT tripal_custom_tables_fk1
        FOREIGN KEY (mview_id) REFERENCES {tripal_mviews} (mview_id)
        ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
      ');
    }

    // now link the materialized view to it's custom table entry
    $mviews = db_select('tripal_mviews', 'tmv')
      ->fields('tmv', array('mview_id', 'mv_table'))
      ->execute();
    foreach ($mviews as $mview) {
      db_update('tripal_custom_tables')
       ->fields(array(
         'mview_id' => $mview->mview_id
       ))
       ->condition('table_name', $mview->mv_table)
       ->execute();
    }
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not update tripal_mviews table and link to custom tables: '. $error);
  }
}

/**
 * Fixes missing language for nodes and URL aliases. This may take awhile...
 *
 */
function tripal_core_update_7201() {

  try {
    $sql = "UPDATE {node} SET language = :language WHERE language = ''";
    db_query($sql, array(':language' => LANGUAGE_NONE));
    $sql = "UPDATE {url_alias} SET language = :language WHERE language = ''";
    db_query($sql, array(':language' => LANGUAGE_NONE));
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not reset language for nodes and url aliases: '. $error);
  }
}


/**
 * Adds a tripal_token_formats table for custom page titles and URL paths
 */
function tripal_core_update_7202() {
  try {
    $schema = drupal_get_schema_unprocessed('tripal_core', 'tripal_token_formats');
    db_create_table('tripal_token_formats', $schema);
  }
  catch (Exception $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not add tripal_token_formats table: '. $error);
  }
}

/**
 * Adds a tripal_toc table for customizing the table of contents on each Tripal page.
 */
function tripal_core_update_7203() {
  try {
    $schema = drupal_get_schema_unprocessed('tripal_core', 'tripal_toc');
    db_create_table('tripal_toc', $schema);
  }
  catch (Exception $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not add tripal_toc table: '. $error);

  }
}

/**
 * Adds the tripal_variable_terms and a tripal_node_variables tables
 */
function tripal_core_update_7204() {
  try {
    $schema = drupal_get_schema_unprocessed('tripal_core', 'tripal_variables');
    db_create_table('tripal_variables', $schema);
    $schema = drupal_get_schema_unprocessed('tripal_core', 'tripal_node_variables');
    db_create_table('tripal_node_variables', $schema);
  }
  catch (Exception $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not add new tables table: '. $error);

  }
}