<?php

/**
 * Implements hook_menu().
 */
function commerce_recurring_bonus_menu() {
  $items = array();

  // Load for title function
  module_load_include('inc', 'entity', 'entity.ui');

  // This is a parent item placeholder - but does not work currently... access denied!
  $items['admin/commerce/recurring-entities/add'] = array(
    'title callback' => 'entity_ui_get_action_title',
    'title arguments' => array('add', 'commerce_recurring'),
    'page callback' => 'entity_ui_bundle_add_page',
    'page arguments' => array('commerce_recurring'),
    'access arguments' => array('create commerce_recurring entities'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_recurring_ui.admin.inc',
    'file path' => drupal_get_path('module', 'commerce_recurring_ui') . '/',
  );

  // This would the normal, locical path
  $items['admin/commerce/recurring-entities/add/product'] = array(
    'title callback' => 'entity_ui_get_action_title',
    'title arguments' => array('add', 'commerce_recurring'),
    'page callback' => 'entity_ui_get_bundle_add_form',
    'page arguments' => array('commerce_recurring', 'product'),
    'access arguments' => array('create commerce_recurring entities of bundle product'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_recurring_ui.admin.inc',
    'file path' => drupal_get_path('module', 'commerce_recurring_ui') . '/',
  );

  $items['admin/commerce/recurring-entities/product/add'] = $items['admin/commerce/recurring-entities/add/product'];

  return $items;
}

/**
 * Implements hook_rules_action_info().
 *
 * TODO: Wird spaeter hoffentlich Bestandteil von commerce_recurring: https://drupal.org/node/2102757#comment-7924861
 */
function commerce_recurring_bonus_rules_action_info() {
  $actions = array();

  $actions['commerce_recurring_bonus_get_expired_items'] = array(
    'label' => t('Get the recurring entities that expired.'),
    'parameter' => array(
      'number_items' => array(
        'type' => 'decimal',
        'label' => t('Number of items'),
        'description' => t('Restrict the number of items to retrieve'),
        'default value' => 0,
      ),
      'timestamp' => array(
        'type' => 'date',
        'label' => t('Expiration date'),
      ),
    ),
    'provides' => array(
      'commerce_recurring_entities' => array(
        'label' => t('Commerce recurring entities'),
        'type' => 'list<commerce_recurring>',
      ),
    ),
    'group' => t('Commerce Recurring Bonus'),
    'callbacks' => array(
      'execute' => 'commerce_recurring_bonus_rules_get_expired_items',
    ),
  );

  $actions['commerce_recurring_bonus_rules_start_recurring'] = array(
    'label' => t('Activate the recurring entity'),
    'description' => t('Activate the recurring entity. You can activate from any entity type, most common are cancelling the recurring entity from the order or from the same recurring entity.'),
    'parameter' => array(
      'data' => array(
        'type' => 'entity',
        'label' => t('Entity'),
        'description' => t('Specifies the entity to activate the recurring from.'),
        'restriction' => 'selector',
        'wrapped' => TRUE,
      ),
    ),
    'group' => t('Commerce Recurring Bonus'),
    'callbacks' => array(
      'execute' => 'commerce_recurring_bonus_rules_start_recurring',
    ),
  );

  $actions['commerce_recurring_bonus_get_unprocessed_due_items'] = array(
    'label' => t('Get the recurring entities about to due (plus BONUS options)'),
    'parameter' => array(
      'number_items' => array(
        'type' => 'decimal',
        'label' => t('Number of items'),
        'description' => t('Restrict the number of items to retrieve'),
        'default value' => 0,
      ),
      'timestamp' => array(
        'type' => 'date',
        'label' => t('Due date'),
      ),
      'skip_due_equals_start' => array(
        'type' => 'boolean',
        'label' => t('Skip entries where due_date equals start_date'),
        'description' => t('Removes entries from the result list where the $due_date == $start_date. That is helpful e.g. for trial purchases which never renew.'),
        'default value' => 0,
      ),
    ),
    'provides' => array(
      'commerce_recurring_entities' => array(
        'label' => t('Commerce recurring entities'),
        'type' => 'list<commerce_recurring>',
      ),
    ),
    'group' => t('Commerce Recurring Bonus'),
    'callbacks' => array(
      'execute' => 'commerce_recurring_bonus_get_unprocessed_due_items',
    ),
  );

  return $actions;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_recurring_bonus_entity_info_alter(&$entity_info) {
  // @TODO: Add order bundle support when it's time for it.
  $entity_info['commerce_recurring']['bundles']['product']['admin']['controller class'] = 'EntityBundleableUIController';

  // Enable the entity API's admin UI.
  $entity_info['commerce_recurring']['admin ui']['controller class'] = 'EntityDefaultUIController';
}

/**
 * Return active recurring entities with expired end dates.
 *
 * TODO: Wird spaeter hoffentlich Bestandteil von commerce_recurring: https://drupal.org/node/2102757#comment-7924861
 */
function commerce_recurring_bonus_rules_get_expired_items($number_items = 0, $end_date = NULL) {
  if (empty($end_date)) {
    $end_date = new DateObject();
    $end_date = $end_date->getTimestamp();
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_recurring', '=');
  $query->propertyCondition('status', TRUE, '=');
  $query->propertyCondition('end_date', 'NULL', '!=');
  $query->propertyCondition('end_date', $end_date, '<');
  if ($number_items > 0) {
    $query->range(0, $number_items);
  }
  $result = $query->execute();

  $recurring_entities = array();
  if (!empty($result['commerce_recurring'])) {
    foreach ($result['commerce_recurring'] as $recurring_entity) {
      $recurring_entities[] = entity_load_single('commerce_recurring', $recurring_entity->id);
    }
  }

  return array('commerce_recurring_entities' => $recurring_entities);
}

/**
 * React to disable the recurring entity associated to a given entity.
 */
function commerce_recurring_bonus_rules_start_recurring($wrapper) {
  switch ($wrapper->type->value()) {
    case 'commerce_order':
      $recurring_entities = commerce_recurring_load_by_order($wrapper->value());
      // It's very unlikely that there's more than one recurring entity
      // associated with the order but take care of that case as well.
      foreach ($recurring_entities as $recurring_entity) {
        commerce_recurring_bonus_start_recurring($recurring_entity);
      }
      break;
    case 'commerce_recurring':
      $recurring_entity = $wrapper->value();
      commerce_recurring_bonus_start_recurring($recurring_entity);
      break;
  }
}

/**
 * Mark a recurring entity as active.
 *
 * @param $recurring_entity
 *   A commerce recurring entity.
 */
function commerce_recurring_bonus_start_recurring($recurring_entity) {
  $recurring_entity->status = 1;
  entity_save('commerce_recurring', $recurring_entity);
}

/**
 * Extends commerce_recurring_rules_get_due_items by an additional check if the returned
 * recurring_entities have already been processed by the overdue-rules.
 * A recurring_entity is understood as "processed" if it already contains an
 * order that has a creation date equal or higher than the due date.
 *
 * @param int $number_items
 * @param int $due_date Timestamp
 * @return array
 */
function commerce_recurring_bonus_get_unprocessed_due_items($number_items = 0, $due_date = NULL, $skip_due_equals_start = FALSE) {
  module_load_include('inc', 'commerce_recurring', 'commerce_recurring.rules');
  $due_items_array = commerce_recurring_rules_get_due_items($number_items, $due_date);
  $recurring_entities = $due_items_array['commerce_recurring_entities'];
  $due_items_unprocessed = array();

  if (!empty($recurring_entities)) {
    foreach ($recurring_entities as $recurring_entity) {
      if (!empty($recurring_entity->commerce_recurring_order['und'])) {
        $recurring_orders = $recurring_entity->commerce_recurring_order['und'];
        // Only check the last order for performance reasons! (This might not be 100% secure)
        $last = end($recurring_orders);
        $order_id = $last['target_id'];
        if (!empty($order_id)) {
          $order_entity = commerce_order_load($order_id);
          // Unprocessed if the created-date of the order is later than the last XX days of the abonnement
          // For example if $due_date is today PLUS 1 month, then the order is only unprocessed if there is no order in the last month of the abonnement.
          if ($order_entity !== false && $order_entity->created < ($recurring_entity->due_date - ($due_date - time()))) {
            // No due order has been created yet. => unprocessed!
            if (!$skip_due_equals_start || $recurring_entity->due_date != $recurring_entity->start_date) {
              // No skip.
              $due_items_unprocessed[] = $recurring_entity;
            }
          }
        }
      }
    }
  }
  return array('commerce_recurring_entities' => $due_items_unprocessed);
}