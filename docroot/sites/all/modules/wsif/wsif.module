<?php

/**
 * @file
 * A general purpose Drupal API integration module. This allows
 * other modules a set of standard tools for integrating third
 * party services into Drupal.
 */

/**
 * Retrieve an array of all APIs supported via the wsif module.
 *
 * @return array
 *   An array of info details for all apis supported
 *   by wsif.
 */
function wsif_get_apis_info() {
  $wsif_infos = &drupal_static(__FUNCTION__, array());

  if (empty($wsif_infos)) {
    $cached = cache_get('wsif_infos');
    if (!empty($cached)) {
      $wsif_infos = $cached->data;
    }
    else {
      $wsif_infos = module_invoke_all('wsif_info');
      cache_set('wsif_infos', $wsif_infos);
    }
  }

  return $wsif_infos;
}

/**
 * Lazy load the api interface.
 *
 * @param string $api_name
 *   The machine name of the api to connect to. Typically
 *   this will be the module name.
 * @param bool $reset
 *   If the API is in an offline state, this function will
 *   not try and reconnect unless this is set to TRUE.
 *   CRON will periodically try and reconnect so generally
 *   no need to set this variable.
 *
 * @return WSIFInterface
 *   Access object to talk to the API.
 *   This will be empty if connection failed.
 *
 * @throws WSIFUnavailableException
 *   If the API is unavaliable then this function will
 *   throw this exception which should be caught in all
 *   instances this function is called.
 */
function wsif_get_api($api_name, $reset = FALSE) {
  $apis = &drupal_static(__FUNCTION__, array());

  // Do not do anything if service has been killed.
  if (variable_get("wsif-{$api_name}-kill", FALSE)) {
    throw new WSIFUnavailableException($api_name, $api_name . ' has been killed. To use this service set the corresponding kill variable to FALSE.', FALSE);
  }

  // Check on the availability of the service.
  if (!$reset && variable_get("wsif-{$api_name}-unavailable", FALSE)) {
    throw new WSIFUnavailableException($api_name, $api_name . ' is currently unavailable', FALSE);
  }

  if (empty($apis[$api_name])) {
    try {
      $apis[$api_name] = module_invoke($api_name, 'wsif');
    }
    catch (Exception $e) {
      watchdog_exception('wsif', $e);
      throw new WSIFUnavailableException($api_name, $e->getMessage());
    }
  }

  return $apis[$api_name];
}

/**
 * Determine if an API is available.
 *
 * Only use this function when you don't need a connection to the API, for
 * example on a status page. If you do need it, then use a try/catch construct
 * and the wsif_get_api() function instead.
 *
 * @param string $api_name
 *   The machine name of the api to connect to. Typically
 *   this will be the module name.
 *
 * @param bool $check_connection
 *   As well as checking locally to see if the API is available, also perform a
 *   test query the with the API.
 *
 * @param bool $reset
 *   (internal use) Ignore the local connection status and only check remotely.
 *   Only use this if you are cron and you are about to call wsif_available.
 *
 * @return bool
 *   TRUE if the API is reported as available, FALSE otherwise.
 */
function wsif_is_available($api_name, $check_connection = FALSE, $reset = FALSE) {
  try {
    $api = wsif_get_api($api_name, $reset);
    if ($check_connection && $api->wsifCheckConnection() === FALSE) {
      return FALSE;
    }
    return TRUE;
  }
  catch (WSIFUnavailableException $ex) {
    return FALSE;
  }
}

/**
 * Mark a service as unavailable.
 */
function wsif_unavailable($api_name, $extra = 'None') {
  // If the API is already unavailable, don't bother with this.
  if (variable_get("wsif-{$api_name}-unavailable", FALSE)) {
    return;
  }

  variable_set("wsif-{$api_name}-unavailable", TRUE);

  // Log the problem.
  watchdog($api_name, '@api_name has been marked as unavailable with a fail count of :fails', array(
    '@api_name' => $api_name,
    ':fails' => variable_get("wsif-{$api_name}-fail-count", 0)), WATCHDOG_ERROR);

  // Inform the powers that be.
  _wsif_send_status_email($api_name, $extra);
}

/**
 * Mark a service as available.
 */
function wsif_available($api_name, $extra = 'None') {
  // Mark this API as available to allow future connection attempts.
  variable_set("wsif-{$api_name}-unavailable", FALSE);

  // Log this triumph.
  watchdog($api_name, '@api_name is back again. It was switched off after recording :fails fails', array(
    '@api_name' => $api_name,
    ':fails' => variable_get("wsif-{$api_name}-fail-count", 0),
  ), WATCHDOG_NOTICE);

  // Inform the powers that be.
  _wsif_send_status_email($api_name, $extra);
}

/**
 * Send an email to admin when enabling or disabling the api.
 *
 * @param string $api_name
 *   The name of the api
 * @param string $extra
 *   Extra details to add to the email.
 */
function _wsif_send_status_email($api_name, $extra = '') {

  // Determine the current status of the api.
  $status = variable_get("wsif-{$api_name}-unavailable", FALSE) ? 'unavailable' : 'available';

  // Decide who to email to tell them about this.
  $email = variable_get("wsif-{$api_name}-fail-email", NULL);
  if (empty($email)) {
    // Use user 1's email.
    $email = user_load(1)->mail;
  }

  // Send an email.
  $details = array(
    'fails' => variable_get("wsif-{$api_name}-fail-count", 0),
    'api_name' => $api_name,
    'extra' => $extra,
  );
  drupal_mail('wsif', "wsif_api_{$status}", $email, language_default(), $details);
}

/**
 * Implements hook_mail().
 */
function wsif_mail($key, &$message, $params) {
  if ($key == 'wsif_api_unavailable' || $key == 'wsif_api_available') {

    $state = ($key == 'wsif_api_unavailable') ? t('unavailable') : t('available');

    $message['subject'] = "The API '{$params['api_name']}' has been marked as {$state}";
    $message['body'][] = "The API '{$params['api_name']}' has been marked as {$state}.";
    $message['body'][] = "Fails recorded: {$params['fails']}";
    $message['body'][] = "Site URL: " . url('<front>', array('absolute' => TRUE));
    $message['body'][] = "Extra info: {$params['extra']}";

  }
}

/**
 * Implements hook_cron().
 *
 * Check all disabled apis and switch them on if they are OK.
 */
function wsif_cron() {
  foreach (wsif_get_apis_info() as $api_name => $api_info) {
    if (variable_get("wsif-{$api_name}-unavailable", FALSE)) {
      try {
        if (wsif_is_available($api_name, TRUE, TRUE)) {
          wsif_available($api_name, "CRON switched {$api_name} on.");
        }
      }
      catch (Exception $e) {
        watchdog_exception('wsif', $e, 'CRON tried to switch on @api_name but failed with message: !message', array('@api_name' => $api_name, '!message' => nl2br($e->getMessage())), WATCHDOG_ERROR);
      }
    }

    // Reset the fail counter every cron run.
    variable_set("wsif-{$api_name}-fail-count", 0);

  }
}

/**
 * WSIFUnavailableException thrown when there is a
 * timeout connecting to the db.
 */
class WSIFUnavailableException extends Exception {

  /**
   * WSIFUnavailableException.
   *
   * This exception occurs when there are problems communicating with
   * a service. If the fault counter is incremented past the global maximum
   * the service is marked as unavailabe and no PHP threads will try and
   * communicate with it until it comes back.
   *
   * @param string $api_name
   *   The name of the API.
   * @param string $message
   *   The message for the exception.
   * @param bool $increment_fault_counter
   *   TRUE if this should increment the fault counter.
   * @param Exception $previous
   *   PHP 5.3 and above supports chainable exceptions. It is always safe to
   *   pass this in but it will be ignored if you don't have at least PHP 5.3.
   *   If the API that you are wrapping throws exceptions then this allows you
   *   to track them whilst still throwing proper WSIF exceptions.
   */
  public function __construct($api_name, $message = '', $increment_fault_counter = TRUE, Exception $previous = NULL) {
    if ($increment_fault_counter) {
      $fails = variable_get("wsif-{$api_name}-fail-count", 0);
      $fails++;
      variable_set("wsif-{$api_name}-fail-count", $fails);
      if ($fails > variable_get("wsif-{$api_name}-fail-cutoff", 5)) {
        wsif_unavailable($api_name, $message);
      }
    }

    if (version_compare(PHP_VERSION, '5.3.0') >= 0) {
      parent::__construct($message, NULL, $previous);
    }
    else {
      parent::__construct($message);
    }
  }
}
