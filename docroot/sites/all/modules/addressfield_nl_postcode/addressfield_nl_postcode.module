<?php

/**
 * Implements HOOK_ctools_plugin_directory().
 */
function addressfield_nl_postcode_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements HOOK_field_attach_load().
 *
 * Add huisnummer and huisnummer_addition to a field.
 * Those subvalues are stored in #data.
 */
function addressfield_nl_postcode_field_attach_load($entity_type, $entities, $age, $options) {
  // fields to process
  $process_fields = array();

  // instances to check
  $field_info = field_info_instances($entity_type);
  $info = reset($field_info);
  foreach ($info as $key => $value) {
    if (isset($value['widget']['settings']['format_handlers']['addressfield_nl_postcode']) &&
        'addressfield_nl_postcode' == $value['widget']['settings']['format_handlers']['addressfield_nl_postcode']) {
      $process_fields[] = $key;
    }
  }

  // do we have something to process?
  if (count($process_fields)) {
    // loop through entities
    foreach ($entities as &$entity) {
      // loop through fields
      foreach ($process_fields as $process_field) {
        if (isset($entity->{$process_field})) {
          // loop through languages
          foreach ($entity->{$process_field} as $language => &$values) {
            // loop through deltas
            foreach ($values as $delta => &$value) {
              if (isset($value['data']) && strpos($value['data'], 'huisnummer')) {
                $data = unserialize($value['data']);
                // finally set the values.
                if (isset($data['huisnummer']) && !isset($value['huisnummer'])) {
                  $value['huisnummer'] = $data['huisnummer'];
                }
                if (isset($data['huisnummer_addition']) && !isset($value['huisnummer_addition'])) {
                  $value['huisnummer_addition'] = $data['huisnummer_addition'];
                }
              }
            }
          }
        }
      }
    }
  }
}


/**
 * Implements HOOK_menu().
 */
function addressfield_nl_postcode_menu() {
  $items = array();

  $items['admin/config/services/addressfield-nl-postcode'] = array(
    'title' => 'Address Field NL Postcode Settings',
    'description' => 'Configure the NL Postcode Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('addressfield_nl_postcode_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'addressfield_nl_postcode.admin.inc',
  );

  $items['addressfield-nl-postcode'] = array(
    'title' => 'Address Field NL Postcode',
    'access arguments' => array('access content'),
    'page callback' => 'addressfield_nl_postcode_ajax_callback',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback; Returns the results after a ajax call.
 */
function addressfield_nl_postcode_ajax_callback() {
  $base_id = isset($_POST['base_id'])?filter_xss($_POST['base_id']):NULL;
  $postcode = isset($_POST['postcode'])?filter_xss($_POST['postcode']):NULL;
  $huisnummer = isset($_POST['huisnummer'])?filter_xss($_POST['huisnummer']):NULL;
  $huisnummer_addition = isset($_POST['huisnummer_addition'])?filter_xss($_POST['huisnummer_addition']):NULL;

  $commands = array();
  if (empty($base_id) || empty($postcode) || empty($huisnummer)) {
    // Pretend it never happened...
    return array('#type' => 'ajax', '#commands' => $commands);
  }
  // Remove previous errors.
  $commands[] = ajax_command_remove('#' . $base_id . '-messages');

  $return = addressfield_nl_postcode_lookup($postcode, $huisnummer, $huisnummer_addition);
  if (!isset($return['error']) || !$return['error']) {
    $commands[] = ajax_command_invoke('#' . $base_id, 'NlPostcode_injectValues', array($return));
  } else {
    // inform user of error.
    if (!isset($return['error_str'])) {
      $return['error_str'] = 'Could not lookup address.';
    }
    drupal_set_message(t($return['error_str']), 'error');
    $commands[] = ajax_command_before('#' . $base_id, '<div id="' . $base_id . '-messages">' . theme('status_messages') . '</div>');
    // Inject empty values to clear out the address field.
    $commands[] = ajax_command_invoke('#' . $base_id, 'NlPostcode_injectValues', array(array('street' => '', 'city' => '')));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Lookup the values on the rest endpoint.
 */
function addressfield_nl_postcode_lookup($postcode, $huisnummer, $huisnummer_addition = NULL) {
  $postcode = preg_replace('/[^a-z0-9]/i', '', $postcode);
  $cache_key = 'addressfield_nl_postcode:' . $postcode . ':' . $huisnummer;
  if (!empty($huisnummer_addition)) {
    $cache_key .= ':' . $huisnummer_addition;
  }
  $return = &drupal_static($cache_key, array());
  if (!count($return) && $data = cache_get($cache_key)) {

    // Cron could not have been run, since errors are stored 5 min.
    if (REQUEST_TIME < $data->expire) {
      $return = $data->data;
    }
  }

  // Got it by cache or static cache.
  if (count($return)) {
    return $return;
  }

  $uri = 'https://';
  $uri .= variable_get('addressfield_nl_postcode_key');
  $uri .= ':';
  $uri .= variable_get('addressfield_nl_postcode_secret');
  $uri .= '@';
  $uri .= 'api.postcode.nl/rest/addresses/';
  $uri .= rawurlencode($postcode);
  $uri .= '/';
  $uri .= rawurlencode($huisnummer);
  if (!empty($huisnummer_addition)) {
    $uri .= '/' . rawurlencode($huisnummer_addition);
  }

  $request = drupal_http_request($uri);
  if ($request->code == 200) {
    $return = (array)drupal_json_decode($request->data);
  }
  elseif ($request->code > 0 && isset($request->data)) {
    $return = (array)drupal_json_decode($request->data);
    if (isset($return['exception'])) {
      $return['error'] = TRUE;
      $return['error_str'] = $return['exception'];
    }
  } elseif ($request->code == 404) {
    $return['error'] = TRUE;
    $return['error_str'] = 'No address found.';
  }


  if (!count($return)) {
    $return['error'] = TRUE;
    $return['error_str'] = 'No address found.';
  } elseif((!isset($return['error']) || (isset($return['error']) && !$return['error'])) && !empty($huisnummer_addition) && (!isset($return['houseNumberAddition']) || empty($return['houseNumberAddition']))) {
    $return['error'] = TRUE;
    $return['error_str'] = 'House Number Addition is not valid.';
  }

  if (isset($return['error']) && $return['error']) {
    cache_set($cache_key, $return, 'cache', (REQUEST_TIME + 300)); // errors are stored for 5 min
  } else {
    cache_set($cache_key, $return, 'cache', (REQUEST_TIME + 86400)); // results are stored for a day
  }

  return $return;
}
