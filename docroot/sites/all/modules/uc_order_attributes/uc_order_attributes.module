<?php

/**
 * @file
 * Ubercart Order Attributes
 */

/*************************************************************************
 * Drupal hooks
 * ***********************************************************************/

/**
 * Implements hook_permission().
 */
function uc_order_attributes_permission() {

  // Provide a permission that allows users to arbitrarily edit a product's attributes and options.
  // This means they can change the text to anything they want, and are not restricted to attributes/options
  // available to the specific product.
  return array(
    'arbitrarily edit attribute data' => array(
      'title' => t('Arbitrarily edit attribute data'),
      'description' => t('Allow users to arbitrarily edit a product\'s attribute and option labels in an order.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function uc_order_attributes_menu() {
  $items = array();

  // Attribute editing form modal.
  $items['admin/store/uc_order_attributes/%ctools_js/%/%'] = array(
    'page callback' => 'uc_order_attributes_modal',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('edit orders'),
    'type' => MENU_CALLBACK,
  );

  // Attribute options autocomplete.
  $items['uc_order_attributes/%/options'] = array(
    'page callback' => 'uc_order_attributes_options_autocomplete',
    'page arguments' => array(1),
    'access arguments' => array('edit orders'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function uc_order_attributes_form_alter(&$form, &$form_state, $form_id) {

  // Alter the list of products in an order to add the "Attributes" column.
  if ($form_id == 'uc_order_edit_form') {

    // Add CTools modal includes and JS.
    ctools_include('plugins');
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();

    // Add custom CTools modal style.
    $custom_style = array(
      'uc-order-attributes-modal' => array(
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 700,
          'height' => 500,
        ),
        'animation' => 'fadeIn',
      ),
    );
    drupal_add_js($custom_style, 'setting');

    // Add custom CSS.
    drupal_add_css(drupal_get_path('module', 'uc_order_attributes') . '/uc_order_attributes.css');

    // Add a column to the products table for attributes.
    $form['products']['#columns']['attributes'] = array('cell' => t('Attributes'), 'weight' => 4);

    // If there are no products, bail.
    $products = element_children($form['products']);
    if (empty($products)) {
      return;
    }

    // If there are products, loop through the products.
    foreach ($form['products'] as $key => $product) {

      // If the $key is an integer (not a form property or other element).
      if (is_int($key)) {

        // Start a div to put the output in
        $output = '<div id="attributes-' . $product['order_product_id']['#value'] . '">';

        // Unserialize the product data to get at the attributes.
        $data = unserialize($product['data']['#value']);

        // Loop through the attributes, if there are any.
        if (!empty($data['attributes'])) {
          foreach ($data['attributes'] as $attribute => $option) {

            // Implode the list of options.
            $options = implode(', ', $option);

            // Add the attribute and it's option as a line in the output.
            $output .= $attribute . ': ' . $options . "<br />";
          }
        }

        // Close #attributes-[order_product_id] the div.
        $output .= '</div>';

        // Add a link to the attribute editor (as a CTools modal).
        $output .= ctools_modal_text_button(t('Edit attributes'), 'admin/store/uc_order_attributes/nojs/' . $product['order_product_id']['#value'] . '/' . $key, t('Edit Attributes'), 'ctools-modal-uc-order-attributes-modal');

        // Stick the output into the column.
        $form['products'][$key]['attributes'] = array(
          '#type' => 'markup',
          '#markup' => $output,
          '#name' => 'products[' . $key . '][attributes]',
        );

        // Copy the product's 'data' #value to #default_value, and unset #value.
        // This is so we can alter the hidden data field via Javascript.
        $form['products'][$key]['data']['#default_value'] = $form['products'][$key]['data']['#value'];
        unset($form['products'][$key]['data']['#value']);
      }
    }
  }

  // Alter the order settings form.
  elseif ($form_id == 'uc_order_settings_form') {

    // Add a fieldset for order attribute settings.
    $form['invoice'] = array(
      '#type' => 'fieldset',
      '#title' => t('Order attributes'),
      '#group' => 'order-settings',
      '#weight' => 10,
    );

    $form['invoice']['uc_order_attributes_arbitrary'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow permitted users to arbitrarily edit attribute data'),
      '#description' => t('If this box is checked, users with the "arbitrarily edit attribute data" permission will be able to edit attribute and option text for any product, regardless of the product\'s available options. They will also be able to add any attribute to a product, even if the attribute isn\'t enabled for the product.'),
      '#default_value' => variable_get('uc_order_attributes_arbitrary', 0),
    );
  }
}

/**
 * Implements hook_theme().
 */
function uc_order_attributes_theme() {
  return array(

    // The product attributes form
    'uc_order_attributes_form' => array(
      'render element' => 'form',
    ),
  );
}

/*************************************************************************
 * Menu callbacks
 * ***********************************************************************/

/**
 * Modal page callback.
 */
function uc_order_attributes_modal($js = NULL, $order_product_id, $product_key) {

  // Degrade to no js.
  if (!$js) {
    return drupal_get_form('uc_order_attributes_form', $order_product_id, $product_key);
  }

  // Load CTools includes.
  ctools_include('modal');
  ctools_include('ajax');

  // Set up the form state.
  $form_state = array(
    'title' => t('Edit Attributes'),
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array(
        $order_product_id,
        $product_key,
      ),
    ),
  );

  // Load the form.
  $commands = ctools_modal_form_wrapper('uc_order_attributes_form', $form_state);

  // If the form was submitted...
  if (!empty($form_state['executed'])) {

    // If the form was completed or canceled...
    if (!empty($form_state['completed']) || !empty($form_state['canceled'])) {

      // Clear out any existing commands.
      $commands = array();

      // If there's an order product id and product key.
      if (!empty($form_state['values']['order_product_id']) && isset($form_state['values']['product_key'])) {

        // Load the updated product record from the database.
        $order_product = _uc_order_attributes_load_product($order_product_id);

        // Loop through that attributes and prepare them to be passed back to the order edit page (the parent window if the form is opened in a modal).
        $attribute_list = array();
        if (!empty($order_product->data['attributes'])) {
          foreach ($order_product->data['attributes'] as $attribute => $option) {

            // Implode the list of options.
            $options = implode(', ', $option);

            // Format the attribute and add it to the list for the order edit page.
            $attribute_list[] = $attribute . ': ' . $options;
          }
        }

        // Implode the list of attributes into a string, separated by HTML breaks.
        $attributes_html = implode('<br />', $attribute_list);

        // Update the attributes column with text.
        $commands[] = ajax_command_html('#attributes-' . $form_state['values']['order_product_id'], $attributes_html);

        // Update the product's serialized data hidden field.
        $commands[] = ajax_command_invoke('input[name="products\\[' . $form_state['values']['product_key'] . '\\]\\[data\\]"]', 'val', array(serialize($order_product->data)));
      }

      // Close the modal.
      $commands[] = ctools_modal_command_dismiss();
    }

    // Otherwise, rebuild the form.
    else {
      $form = drupal_get_form('uc_order_attributes_form', $form_state);
      $commands = ctools_modal_form_render($form_state, $form);
    }
  }

  // Execute the commands and exit.
  print ajax_render($commands);
  exit;
}

/**
 * Menu callback for attribute options autocomplete
 */
function uc_order_attributes_options_autocomplete($aid, $string='') {
  $matches = array();
  if ($aid && $string) {
    $query = db_select('uc_attribute_options', 'uao');
    $query->addfield('uao', 'name');
    $query->condition('aid', $aid);
    $query->condition('name', '%%' . $string . '%%', 'LIKE');
    $result = $query->execute();
    foreach ($result as $row) {
      $matches[$row->name] = $row->name;
    }
  }
  drupal_json_output($matches);
}

/*************************************************************************
 * Form callbacks
 * ***********************************************************************/

/**
 * Form callback for the product attributes edit form.
 */
function uc_order_attributes_form($form, &$form_state, $order_product_id, $product_key) {
  $form = array();

  // Load the product record from the {uc_order_products} table.
  $order_product = _uc_order_attributes_load_product($order_product_id);

  // Store the Order ID for later use
  $order_id = $order_product->order_id;

  // If the product is a node, get all the attributes configured for it.
  if (!empty($order_product->nid)) {
    $node = node_load($order_product->nid);
    $store_attributes = _uc_attribute_alter_form('uc_order_attributes', $node, FALSE);
  }

  // Set the page title
  drupal_set_title(t('Edit attributes for @title', array('@title' => $order_product->title)), PASS_THROUGH);

  // Process the form as a tree to preserve it's array structure.
  $form['#tree'] = TRUE;

  // Store the order_product_id and key in a hidden field.
  $form['order_product_id'] = array(
    '#type' => 'hidden',
    '#name' => 'order_product_id',
    '#value' => $order_product_id
  );
  $form['product_key'] = array(
    '#type' => 'hidden',
    '#name' => 'key',
    '#value' => $product_key,
  );

  $i = 0;
  if (!empty($order_product->data['attributes'])) {

    foreach ($order_product->data['attributes'] as $attribute => $options) {

      $form['attributes'][$i]['delete'] = array(
        '#type' => 'checkbox',
      );

      // If the user has permission to edit attribute titles, display a texfield.
      if (variable_get('uc_order_attributes_arbitrary', 0) && user_access('arbitrarily edit attribute data')) {
        $form['attributes'][$i]['attribute'] = array(
          '#type' => 'textfield',
          '#size' => 30,
          '#default_value' => $attribute,
          '#required' => TRUE,
        );
      }

      // Otherwise, just display the attributes name.
      else {
        $form['attributes'][$i]['attribute'] = array(
          '#type' => 'hidden',
          '#value' => $attribute,
        );
      }

      // Implode the list of options.
      $options_text = implode(', ', $options);

      // Options form item (defaults to a textfield).
      $form['attributes'][$i]['option'] = array(
        '#type' => 'textfield',
        '#size' => 40,
        '#default_value' => $options_text,
        '#required' => TRUE,
      );

      // If the user does not have permission to arbitrarily edit the option text, attempt to display Ubercart's normal option editing form.
      if (!variable_get('uc_order_attributes_arbitrary', 0) || !user_access('arbitrarily edit attribute data')) {

        // Set a default title of the option field. This will be overridden by the default Ubercart form, if available.
        $form['attributes'][$i]['option']['#title'] = $attribute;

        // Since attributes in UC orders are not saved by aid, loop through the product attributes to find a possible match.
        foreach (element_children($store_attributes) as $aid) {

          // First look for a store attribute by title.
          if ($attribute == $store_attributes[$aid]['#title']) {

            // Make sure all of the options that are currently selected for the attribute exist in the attribute's option list.
            if (!empty($options)) {
              foreach ($options as $oid => $option) {

                // First, if the attribute is a textfield, skip this step.
                if ($store_attributes[$aid]['#type'] == 'textfield') {
                  break;
                }

                // If there are selected options that aren't in the list of attribute options, we'll simply display the attribute as a textfield, to avoid losing any old option data.
                elseif (empty($store_attributes[$aid]['#options']) || !array_key_exists($oid, $store_attributes[$aid]['#options'])) {
                  break 2;
                }
              }
            }

            // Assign Ubercart's default form to the option field.
            $form['attributes'][$i]['option'] = $store_attributes[$aid];

            // Set the default value depending on the type of form item.
            switch ($form['attributes'][$i]['option']['#type']) {
              case 'select':
              case 'checkboxes':
                $form['attributes'][$i]['option']['#default_value'] = array_keys($options);
                break;
              case 'radios':
                $form['attributes'][$i]['option']['#default_value'] = key($options);
                break;
              case 'textfield':
                $form['attributes'][$i]['option']['#default_value'] = $options_text;
                break;
            }

            // Stop searching when a match is found.
            break;
          }
        }
      }

      $form['attributes'][$i]['weight'] = array(
        '#type' => 'weight',
        '#delta' => count($order_product->data['attributes']),
        '#default_value' => $i,
        '#attributes' => array(
          'class' => array('weight'),
        ),
      );

      $i++;
    }
  }

  // Add some fields for adding a new attribute+option.
  $form['add'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Attribute'),
    '#prefix' => '<div id="add">',
    '#suffix' => '</div>',
  );

  // Query the database for attributes.
  // If the user has permission to edit attributes arbitrarily, display all attributes.
  if (variable_get('uc_order_attributes_arbitrary', 0) && user_access('arbitrarily edit attribute data')) {
    $query = db_select('uc_attributes', 'ua');
    $query->fields('ua', array('aid', 'name', 'label'));
    $query->orderBy('ordering', 'ASC');
    $result = $query->execute();
  }

  // Otherwise, only load attributes that are enabled for the product.
  else {
    $query = db_select('uc_attributes', 'ua');
    $query->fields('ua', array('aid', 'name', 'label'));
    $query->join('uc_product_attributes', 'upa', 'upa.aid = ua.aid');
    $query->condition('upa.nid', $order_product->nid);
    $query->orderBy('ua.ordering', 'ASC');
    $result = $query->execute();
  }

  // If a result was returned...
  if ($result) {

    // Format the attributes as select list options.
    $options = array(
      0 => 'Please select...',
    );
    foreach ($result as $row) {
      $options[$row->aid] = $row->name;
    }

    // Check if we found any attributes to add.
    if (count($options) > 1) {
      $form['add']['attribute'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => !empty($form_state['values']['add']['attribute']) ? $form_state['values']['add']['attribute'] : 0,
        '#ajax' => array(
          'callback' => 'uc_order_attributes_ajax_callback',
          'wrapper' => 'add',
        ),
      );
    }

    // If no attributes were found, leave a message.
    else {
      $form['add']['attribute'] = array(
        '#value' => t('There are no new attributes to add.'),
      );
    }
  }

  // The option field can be an Ubercart field or an autocomplete that looks for options in the attribute chosen in the attributes dropdown (above).
  // This is only visible when an attribute has been chosen above.
  if (!empty($form_state['values']['add']['attribute'])) {

    // If the user has permission to add attributes arbitrarily, display an autocomplete field.
    if (variable_get('uc_order_attributes_arbitrary', 0) && user_access('arbitrarily edit attribute data')) {
      $form['add']['option'] = array(
        '#type' => 'textfield',
        '#default_value' => '',
        '#autocomplete_path' => 'uc_order_attributes/' . $form_state['values']['add']['attribute'] . '/options',
      );
    }

    // Otherwise, display Ubercart's normal option selection field.
    else {
      $form['add']['option'] = $store_attributes[$form_state['values']['add']['attribute']];
    }

    // Submit button
    $form['add']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
      '#submit' => array('uc_order_attributes_add'),
    );
  }

  // Apply button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
    '#submit' => array('uc_order_attributes_form_submit'),
  );

  // Cancel button
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('uc_order_attributes_form_cancel'),
  );

  return $form;
}

/**
 * Product form submit
 */
function uc_order_attributes_form_submit(&$form, &$form_state) {

  // Load the order product record from the database
  if (!empty($form_state['values']['order_product_id']) && !empty($form_state['values']['attributes'])) {

    // Load the order_product record from the database
    $order_product = _uc_order_attributes_load_product($form_state['values']['order_product_id']);

    // If there are attributes...
    if (!empty($order_product->data['attributes'])) {

      // Clear the attributes array because we're going to replace it.
      $order_product->data['attributes'] = array();

      // Create an index of the attributes sorted by their weight.
      foreach ($form_state['values']['attributes'] as $i => $attribute) {

        // Use a helper function to organize the options into an array.
        // Pass in the option's form type, the value of the option field from the form, and the list of form options that were originally made available to select from.
        // Form options will only be available if the field wasn't a 'textfield'.
        $form_options = isset($form['attributes'][$i]['option']['#options']) ? $form['attributes'][$i]['option']['#options'] : array();
        $attribute['options'] = _uc_order_attributes_save_options_data($form['attributes'][$i]['option']['#type'], $attribute['option'], $form_options);

        // Create a new array of attributes sorted in their new order (if they've been rearranged).
        $attributes_by_weight[$attribute['weight']] = $attribute;
      }
      ksort($attributes_by_weight);  // Sort the array by it's key, low-to-high.

      // Loop through the attributes in the form.
      foreach ($attributes_by_weight as $attribute) {

        // Only add this attribute if it's "Remove" checkbox is not checked.
        if (!$attribute['delete']) {

          // Add the attribute to the order_product's data array.
          $order_product->data['attributes'][$attribute['attribute']] = $attribute['options'];
        }
      }

      // Save the order_product record back to the database.
      drupal_write_record('uc_order_products', $order_product, array('order_product_id'));
    }
  }

  // Mark the form as 'completed'.
  $form_state['completed'] = TRUE;
}

/**
 * Form submit callback for the cancel button.
 */
function uc_order_attributes_form_cancel(&$form, &$form_state) {

  // Mark the form as 'canceled'.
  $form_state['canceled'] = TRUE;
}

/**
 * Form submit callback for the attribute add button.
 */
function uc_order_attributes_add($form, &$form_state) {

  // If an order_product_id, a new attribute ID, and a new option name are set in the form...
  if (!empty($form_state['values']['order_product_id']) && !empty($form_state['values']['add']['attribute']) && !empty($form_state['values']['add']['option'])) {

    // Load the order_product record from the database
    $order_product = _uc_order_attributes_load_product($form_state['values']['order_product_id']);

    // Load the attribute information
    $attribute = uc_attribute_load($form_state['values']['add']['attribute']);

    // Use a helper function to organize the options into an array.
    // Pass in the option's form type, the value of the option field from the form, and the list of form options that were originally made available to select from.
    // Form options will only be available if the field wasn't a 'textfield'.
    $form_options = isset($form['add']['option']['#options']) ? $form['add']['option']['#options'] : array();
    $options = _uc_order_attributes_save_options_data($form['add']['option']['#type'], $form_state['values']['add']['option'], $form_options);

    // Set the attribute name, using the 'label' if available, and name otherwise.
    $name = !empty($attribute->label) ? $attribute->label : $attribute->name;

    // Add the new attribute+option to the product's data array.
    $order_product->data['attributes'][$name] = $options;

    // Save the order_product record back to the database.
    drupal_write_record('uc_order_products', $order_product, array('order_product_id'));

    // Unset the value of the selected attribute, so that the "Add attribute" form resets to a select list again.
    unset($form_state['values']['add']['attribute']);
  }
}

/**
 * Ajax form callback for adding attributes.
 */
function uc_order_attributes_ajax_callback($form, $form_state) {
  return $form['add'];
}

/**
 * Helper function for loading an order product object from the database.
 *
 * @param $order_product_id
 *   The id of the order product to load.
 *
 * @return
 *   Returns an order product object loaded from the database.
 */
function _uc_order_attributes_load_product($order_product_id) {

  // Load the order_product record from the database
  $query = db_select('uc_order_products', 'uop');
  $query->fields('uop');
  $query->condition('order_product_id', $order_product_id);
  $order_product = $query->execute()->fetchObject();

  // Unserialize the data array.
  $order_product->data = unserialize($order_product->data);

  // Return it.
  return $order_product;
}

/**
 * Helper function for organizing a single attribute's option(s) into an array for saving to the $product->data['attributes'] array.
 *
 * @param $type
 *   The type of form element the option is being selected with. Should be one of the following: textfield, select, checkboxes, radios.
 * @param $option
 *   The value of the option field in the form, which indicates what option was selected.
 *   If $type is 'textfield,' this will be a string value to be saved as-is.
 *   Otherwise, it's an option id, or an array of ids. These will be converted to strings based on the content of the $form_options parameter.
 * @param $form_options
 *   The #options array that was used in the form to present a list of possible options. This is only used if $type is not 'textfield'.
 *
 * See uc_order_attributes_add(), uc_order_attributes_form_submit()
 */
function _uc_order_attributes_save_options_data($type, $option, $form_options = array()) {
  $options = array();

  // If the attribute is a textfield, save the option text as is.
  if ($type == 'textfield') {
    $options[0] = $option;
  }

  // Otherwise, assume that the option is an option id (or array of option ids).
  else {

    // If the option isn't an array, make it one.
    if (!is_array($option)) {
      $option = array($option => $option);
    }

    // Loop through the options to generate the list.
    foreach ($option as $key => $oid) {

      // Only add options that have been selected (in a checkbox, unchecked options will be present, but will be set to 0).
      if ($oid) {
        $options[$oid] = $form_options[$oid];
      }
    }
  }

  // Return the array of options to save.
  return $options;
}

/*************************************************************************
 * Theme functions
 * ***********************************************************************/

/**
 * Theme function for the attribute/option form
 */
function theme_uc_order_attributes_form($variables) {
  $output = '';

  // Explain to the user that updating attributes with this form will not update the product pricing.
  $output .= '<p><strong>PLEASE NOTE</strong>: Editing the attributes of this product will not automatically update the product\'s price, cost, or weight in the order. You must do this manually in the order editor or add the product to the order again from scratch.</p><br />';

  // Alias the form variable.
  $form = $variables['form'];

  // If there are attributes, render them.
  if (!empty($form['attributes'])) {
    $attributes = element_children($form['attributes']);
  }
  if (!empty($attributes)) {

    // Give the existing attributes a title.
    $output .= '<h3>Existing Attributes</h3>';

    // Create a table for the existing attributes and options.
    $table = array(
      'header' => array(),
      'rows' => array(),
      'attributes' => array(
        'id' => 'attributes-table'
      ),
    );

    // Add table headers.
    if (variable_get('uc_order_attributes_arbitrary', 0) && user_access('arbitrarily edit attribute data')) {
      $table['header']['attribute'] = t('Attribute');
    }
    $table['header']['option'] = t('Option');
    $table['header']['remove'] = t('Remove');
    $table['header']['order'] = t('Order');

    // Output the list of attributes/options as table rows.
    foreach ($attributes as $key) {
      $data = array();
      if (variable_get('uc_order_attributes_arbitrary', 0) && user_access('arbitrarily edit attribute data')) {
        $data[] = drupal_render($form['attributes'][$key]['attribute']);
      }
      $data[] = drupal_render($form['attributes'][$key]['option']);
      $data[] = drupal_render($form['attributes'][$key]['delete']);
      $data[] = drupal_render($form['attributes'][$key]['weight']);
      $table['rows'][] = array(
        'data' => $data,
        'class' => array('draggable'),
      );
    }

    // Theme the table
    $output .= theme('table', $table);
  }

  // Render the rest of the form
  $output .= drupal_render_children($form);

  // Give the user the ability to rearrange the attributes.
  drupal_add_tabledrag('attributes-table', 'order', 'sibling', 'weight');

  return $output;
}
