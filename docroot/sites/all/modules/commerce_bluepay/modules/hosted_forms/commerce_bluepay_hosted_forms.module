<?php
/**
 * @file
 * Provides a BluePay Hosted Forms payment method for Drupal Commerce.
 */

// BluePay transaction mode definitions.
define('COMMERCE_BLUEPAY_HOSTED_FORMS_MODE_LIVE', 'LIVE');
define('COMMERCE_BLUEPAY_HOSTED_FORMS_MODE_TEST', 'TEST');

/**
 * Implements hook_commerce_payment_method_info().
 *
 * Provides information about this payment plugin to the Drupal core for use and
 * display throughout the Drupal interface.  For instance, display title is used
 * to identify the payment module on the customer checkout flows, when they
 * select their payment method.
 */
function commerce_bluepay_hosted_forms_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['bluepay_hosted_forms'] = array(
    'base' => 'commerce_bluepay_hosted_forms',
    'title' => t('BluePay - Hosted Forms'),
    'short_title' => t('BluePay Hosted Forms'),
    'display_title' => t('Credit card'),
    'description' => t('Integration with BluePay using Hosted Forms method.'),
    'active' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_form_alter().
 */
function commerce_bluepay_hosted_forms_form_alter(&$form, &$form_state, $form_id) {
  // Since the BluePay redirect doesn't really know (or care) about being
  // embedded in an iframe, we have to do a bit of work to make sure that the
  // hosted form works correctly.
  //
  // Here, we check to see if there are messages on the review page. If there
  // are, then we copy them on to an internal stack so that when the review page
  // reloads the second time (breaking out of the iframe) then those messages
  // will be presented.
  if ($form_id == 'commerce_checkout_form_review' && isset($form_state['order']->data['commerce_bluepay_hosted_forms'])) {
    if (!empty($_SESSION['bluepay_messages'])) {
      $_SESSION['messages'] = array_merge_recursive($_SESSION['messages'], $_SESSION['bluepay_messages']);
      unset($_SESSION['bluepay_messages']);
    }
    elseif (!empty($_SESSION['messages']) && empty($_SESSION['bluepay_messages'])) {
      $_SESSION['bluepay_messages'] = $_SESSION['messages'];
      unset($_SESSION['messages']);
    }
    // Attach this JavaScript snippet to the page so that it will break out of
    // the iframe.
    $form['#attached']['js'][] = drupal_get_path('module', 'commerce_bluepay_hosted_forms') . '/commerce_bluepay_hosted_forms.js';
  }
  if ($form_id == 'commerce_checkout_form_complete' && isset($form_state['order']->data['commerce_bluepay_hosted_forms'])) {
    // Break out of the iframe on the complete page.
    $form['#attached']['js'][] = drupal_get_path('module', 'commerce_bluepay_hosted_forms') . '/commerce_bluepay_hosted_forms.js';
  }
}

/**
 * Settings form for BluePay Hosted Forms payment method.
 */
function commerce_bluepay_hosted_forms_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'vendor_name' => variable_get('site_name', 'website'),
    'account_id' => '',
    'enc_key' => '',
    'order_description' => 'Your order from ' . variable_get('site_name', 'website'),
    'form_id' => 'defaultiV5',
    'profile' => '',
    'txn_mode' => COMMERCE_BLUEPAY_HOSTED_FORMS_MODE_TEST,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'log' => array('request' => '0', 'response' => '0'),
    'accept_discover' => 0,
    'accept_amex' => 0,
    'custom_form' => array(
      'form_id_custom' => '',
      'form_id_custom_iframe' => 0,
    ),
  );

  $form['vendor_name'] = array(
    '#type' => 'textfield',
    '#title' => t('BluePay Merchant Name'),
    '#description' => t('Vendor Name from BluePay account Info.'),
    '#default_value' => $settings['vendor_name'],
    '#required' => TRUE,
    '#maxlength' => 25,
  );

  $form['account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#description' => t('The Account ID found in BluePay account info.'),
    '#default_value' => $settings['account_id'],
    '#required' => TRUE,
    '#maxlength' => 225,
  );

  $form['enc_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Secret Key found in BluePay account info.'),
    '#default_value' => $settings['enc_key'],
    '#required' => TRUE,
    '#maxlength' => 225,
  );

  $form['order_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Order Description'),
    '#description' => t('Order description for the BluePay Transaction.'),
    '#default_value' => $settings['order_description'],
    '#required' => TRUE,
  );

  $form['form_id'] = array(
    '#type' => 'select',
    '#title' => t('Payment Type'),
    '#description' => t('Which payment form would you like to show?'),
    '#default_value' => $settings['form_id'],
    '#options' => array(
      'defaultiV5' => t('Credit Card Only - Embedded iframe'),
      'mobileform01D' => t('Credit Card Only - White Vertical (mobile capable)'),
      'default1v5' => t('Credit Card Only - Gray Horizontal'),
      'donateV5' => t('Credit Card Only - Gray Horizontal Donation'),
      'default7Dv5R' => t('Credit Card Only - Gray Horizontal Donation with Recurring'),
      'default3v4' => t('Credit Card Only - Blue Vertical with card swipe'),
      'defaultiV5ACH' => t('Credit Card &amp; ACH - Embedded iframe'),
      'mobileform02D' => t('Credit Card &amp; ACH - White Vertical (mobile capable)'),
      'mobileform02RD' => t('Credit Card &amp; ACH - White Vertical with recurring (mobile capable)'),
      'default8Dv5' => t('Credit Card &amp; ACH - Gray Horizontal Donation'),
      'default8Dv5R' => t('Credit Card &amp; ACH - Gray Horizontal Donation with Recurring'),
      'mobileform03D' => t('ACH Only - White Vertical (mobile capable)'),
      'custom' => t('Custom...'),
    ),
    '#required' => TRUE,
  );

  $form['custom_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom Hosted Form'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[form_id]"]' => array('value' => 'custom'),
      )
    )
  );

  $form['custom_form']['form_id_custom'] = array(
    '#type' => 'textfield',
    '#default_value' => $settings['custom_form']['form_id_custom'],
    '#title' => t('Custom Form ID'),
    '#description' => t('Enter the custom form ID that was provided to you by BluePay.'),
  );

  $form['custom_form']['form_id_custom_iframe'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed the custom form in an iframe'),
    '#default_value' => $settings['custom_form']['form_id_custom_iframe'],
    '#description' => t('If unselected, the customer\'s browser will be redirected to the BluePay hosted payment site.'),
  );

  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Transaction mode.  Switch to Live when ready.'),
    '#options' => array(
      COMMERCE_BLUEPAY_HOSTED_FORMS_MODE_LIVE => t('Live transactions'),
      COMMERCE_BLUEPAY_HOSTED_FORMS_MODE_TEST => t('Test transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction Type'),
    '#description' => t('Adjust the type of transaction to run.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Sale'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['accept_discover'] = array(
    '#type' => 'radios',
    '#title' => t('Accept Discover?'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#default_value' => $settings['accept_discover'],
  );

  $form['accept_amex'] = array(
    '#type' => 'radios',
    '#title' => t('Accept American Express?'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#default_value' => $settings['accept_amex'],
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Implements hook_redirect_form().
 */
function commerce_bluepay_hosted_forms_redirect_form($form, &$form_state, $order, $payment_method) {
  // Guard Condition:  Prevent payment form being used if the payment methods
  // settings are not yet setup.
  if (empty($payment_method['settings']['vendor_name'])) {
    drupal_set_message(t('BluePay Hosted Forms Integration is not configured for use.'), 'error');
    return array();
  }

  // Get customer data.
  $customer_user = user_load($order->uid);
  $order->data['commerce_bluepay_hosted_forms'] = array();
  commerce_order_save($order);

  // Wrap the order, and get the totals.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = commerce_line_items_total($wrapper->commerce_line_items);

  // Load customer profile.
  $profile = commerce_customer_profile_load(
    $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);

  // Get user billing address.
  $address = $profile->commerce_customer_address[LANGUAGE_NONE][0];

  // Convert prices to decimal.
  $amount = commerce_currency_amount_to_decimal($total['amount'],
    $total['currency_code']);
  $order_amount = number_format($amount, 2);

  if ((empty($address['first_name']) || empty($address['last_name'])) &&
      !empty($address['name_line'])) {
    $names = explode(' ', $address['name_line']);
    $address['first_name'] = implode(' ', array_slice($names, 0,
      count($names) - 1));
    $address['last_name'] = $names[count($names) - 1];
  }

  $shpf_form_id = $payment_method['settings']['form_id'] == 'custom' ?
    $payment_method['settings']['custom_form']['form_id_custom'] :
    $payment_method['settings']['form_id'];

  // Create the request that will be fed to the hosted form.
  $parameters = array(
    'SHPF_FORM_ID' => $shpf_form_id,
    'SHPF_ACCOUNT_ID' => $payment_method['settings']['account_id'],
    'MERCHANT' => $payment_method['settings']['account_id'],
    'MODE' => $payment_method['settings']['txn_mode'],
    'TRANSACTION_TYPE' => ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_CAPTURE ? 'AUTH' : 'SALE'),
    'DBA' => $payment_method['settings']['vendor_name'],
    'AMOUNT' => $order_amount,
    'AMEX_IMAGE' => ($payment_method['settings']['accept_amex']) ? 'amex.gif' : 'spacer.gif',
    'DISCOVER_IMAGE' => ($payment_method['settings']['accept_discover']) ? 'discvr.gif' : 'spacer.gif',
    'NAME1' => substr(commerce_bluepay_hosted_forms_valid_chars($address['first_name'], 'name'), 0, 20),
    'NAME2' => substr(commerce_bluepay_hosted_forms_valid_chars($address['last_name'], 'name'), 0, 20),
    'ADDR1' => substr(commerce_bluepay_hosted_forms_valid_chars($address['thoroughfare'], 'add'), 0, 100),
    'CITY' => substr(commerce_bluepay_hosted_forms_valid_chars($address['locality'], 'add'), 0, 40),
    'STATE' => substr(commerce_bluepay_hosted_forms_valid_chars($address['administrative_area'], 'add'), 0, 40),
    'ZIPCODE' => substr(commerce_bluepay_hosted_forms_valid_chars($address['postal_code'], 'pc'), 0, 10),
    'COUNTRY' => $address['country'],
    'EMAIL' => $customer_user->mail,
    'CUSTOM_ID' => '',
    'CUSTOM_ID2' => $payment_method['instance_id'],
    'CUSTOM_HTML' => '',
    'RESPONSEVERSION' => 2,
    'ORDER_ID' => $order->order_id,
  );

  // Create the Tamper Proof Seal. We're using the defaults, but since many of
  // the parameters are blank, we are leaving them out from here.
  $parameters['TAMPER_PROOF_SEAL'] = md5($payment_method['settings']['enc_key'] .
    $parameters['MERCHANT'] . $parameters['TRANSACTION_TYPE'] . $parameters['AMOUNT'] .
    $parameters['MODE']);

  // Post back to the original payment return.
  $parameters['REDIRECT_URL'] = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  $query_string = http_build_query($parameters, '', '&');
  $server_url = 'https://secure.bluepay.com/interfaces/shpf?' . $query_string;

  if ($payment_method['settings']['log']['request'] == 'request') {
    watchdog('commerce_bluepay_hf',
      'BluePay Hosted Forms request: <br />Request URL: !url <br />!param', array(
        '!url' => $server_url,
        '!param' => '<pre>' . print_r($parameters, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG
    );
  }

  $iframe_compatible = array('defaultiV5', 'defaultiV5ACH');
  if (in_array($payment_method['settings']['form_id'], $iframe_compatible) || ($payment_method['settings']['form_id'] == 'custom' && $payment_method['settings']['custom_form']['form_id_custom_iframe'])) {
    $form['#attributes']['target'] = 'commerce-bluepay-iframe';

    $attributes = array(
      'src' => $server_url,
      'name' => 'commerce-bluepay-iframe',
      'scrolling' => 'no',
      'frameborder' => 0,
      'class' => array(
        'commerce-bluepay-hosted-forms-iframe',
      ),
      'id' => 'commerce-bluepay-iframe',
      'width' => '600px',
      'height' => '945px',
    );

    drupal_alter('commerce_bluepay_hosted_forms_iframe_attributes', $attributes, $payment_method, $order);

    $form['iframe_bluepay'] = array(
      '#markup' => '<iframe' . drupal_attributes($attributes) . '></iframe>',
    );

    return $form;
  }
  else {
    drupal_goto($server_url);
  }
}

/**
 * Implements hook_commerce_payment_method_redirect_form_validate().
 */
function commerce_bluepay_hosted_forms_redirect_form_validate($order, $payment_method) {
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_bluepay_hf',
      'BluePay Hosted Forms response: !param', array(
        '!param' => '<pre>' . print_r($_GET, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG
    );
  }

  $response = new BluePay10Response($_GET);

  if ($response->getStatus() == '0') {
    $transaction = commerce_bluepay_transaction_new('bluepay_hosted_forms', $response, $order, $payment_method);
    commerce_payment_transaction_save($transaction);
    drupal_set_message(t('Error: !error', array('!error' => $response->getMessage())), 'error');
    return FALSE;
  }

  if ($response->getStatus() == 'E') {
    $formatted_message = ucfirst(strtolower($response->getMessage()));
    drupal_set_message(t('There was a problem processing your payment. Please try again later.<br />Message from the payment processor: !message',
      array('!message' => $formatted_message)), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_commerce_payment_method_redirect_form_submit().
 */
function commerce_bluepay_hosted_forms_redirect_form_submit($order, $payment_method) {
  // Just get the response and create a transaction.
  $response = new BluePay10Response($_GET);
  $transaction = commerce_bluepay_transaction_new('bluepay_hosted_forms', $response, $order, $payment_method);
  commerce_payment_transaction_save($transaction);
}

/**
 * Custom validation function for cleaning up strings.
 */
function commerce_bluepay_hosted_forms_valid_chars($text, $type = 'add') {
  $accents = '/&([A-Za-z]{1,2})(grave|acute|circ|cedil|uml|lig);/';
  $text_encoded = htmlentities($text, ENT_NOQUOTES, 'UTF-8');
  $text = preg_replace($accents, '$1', $text_encoded);
  switch ($type) {
    case 'name':
      $pat = '/[^(A-Za-z& \/\.\'\-)]*/';
      break;

    case 'add':
      $pat = '/[^(A-Za-z0-9&:, \/\.\'\+\-\{\})]*/';
      break;

    case 'pc':
      $pat = '/[^(A-Za-z0-9 \-)]*/';
      break;
  }
  return preg_replace($pat, '', $text);
}
