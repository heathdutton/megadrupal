<?php
/**
 * @file
 * Level 3 transaction support module for BluePay.
 */

define('COMMERCE_BLUEPAY_LEVEL3_COMMODITY_CODE_FIELD', 'bluepay_commodity_code');

/**
 * Implements hook_commerce_payment_method_info_alter().
 */
function commerce_bluepay_level3_commerce_payment_method_info_alter(&$payment_methods) {
  if (isset($payment_methods['bluepay'])) {
    $payment_methods['bluepay']['callbacks']['settings_form'] = 'commerce_bluepay_level3_settings_form';
  }
}

/**
 * Implements hook_menu().
 */
function commerce_bluepay_level3_settings_form($settings = NULL) {
  $form = commerce_bluepay_settings_form($settings);
  $form['log']['#weight'] = 15;

  $settings = (array) $settings['level3'] + array(
    'enabled' => FALSE,
    'product_code_sku' => TRUE,
    'product_code_field' => '',
    'item_descriptor' => module_exists('title') ? 'title_field' : 'title',
    'measure_unit' => 'EA',
    'commodity_code_custom' => TRUE,
    'commodity_code_field' => '',
  );

  $fields_on_product_entities['title'] = 'Product Title (entity property)';

  $product_fields = field_info_instances('commerce_product');

  foreach ($product_fields as $fields) {
    foreach ($fields as $field) {
      $fields_on_product_entities[$field['field_name']] = $field['label'] . ' (' . $field['field_name'] . ')';
    }
  }

  $form['level3'] = array(
    '#type' => 'fieldset',
    '#title' => t('Level 3 Transaction Support'),
    '#weight' => 10,
  );

  $form['level3']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Level 3 Transaction support'),
    '#default_value' => $settings['enabled'],
    '#description' => t('Level 3 Transactions include more information to secure better rates for transactions.'),
  );

  $form['level3']['product_code_sku'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SKU for Level 3 Product Code'),
    '#description' => t('If selected, the SKU on the product will be used for the Level 3 Product Code. Any SKUs over 12 characters long will be truncated. If unchecked, you will need to choose a field that will be used to populate this data.'),
    '#default_value' => $settings['product_code_sku'],
    '#states' => array(
      'visible' => array(
        ':input[name$="level3][enabled]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['level3']['product_code_field'] = array(
    '#title' => t('Field to use for Product Code'),
    '#type' => 'select',
    '#options' => $fields_on_product_entities,
    '#default_value' => $settings['product_code_field'],
    '#states' => array(
      'visible' => array(
        ':input[name$="product_code_sku]"]' => array('checked' => FALSE),
      ),
      'required' => array(
        ':input[name$="product_code_sku]"]' => array('checked' => FALSE),
      ),
    ),
  );

  $form['level3']['item_descriptor'] = array(
    '#title' => t('Field to use for Item Descriptor'),
    '#type' => 'select',
    '#options' => $fields_on_product_entities,
    '#default_value' => $settings['item_descriptor'],
    '#states' => array(
      'visible' => array(
        ':input[name$="level3][enabled]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['level3']['measure_unit'] = array(
    '#title' => t('Measure Unit'),
    '#type' => 'select',
    '#options' => commerce_bluepay_level3_measure_unit_options(),
    '#default_value' => $settings['measure_unit'],
    '#description' => t('The Measure Unit field expresses the unit of measure for a given item. This defaults to "EA" for each.'),
    '#states' => array(
      'visible' => array(
        ':input[name$="level3][enabled]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['level3']['commodity_code_custom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use custom field for Level 3 Product Code'),
    '#description' => t('If selected, a Commodity Code field will be added to all of your existing product types. If you wish to use an existing field, uncheck this box to select an existing field.'),
    '#default_value' => $settings['commodity_code_custom'],
    '#states' => array(
      'visible' => array(
        ':input[name$="level3][enabled]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['level3']['commodity_code_field'] = array(
    '#title' => t('Field to use for Commodity Code'),
    '#type' => 'select',
    '#default_value' => $settings['commodity_code_custom'],
    '#options' => $fields_on_product_entities,
    '#description' => t('Commodity Codes are required for all line items. You can use an existing field or use a custom field which needs to be filled out for every item. Usually these commodity codes follow !unspsc_link or !sctg_link guidelines.',
      array(
        '!unspsc_link' => l(t('United Nations Standard Products and Services Code&reg;'), 'http://www.unspsc.org/', array(
          'html' => TRUE,
        )),
        '!sctg_link' => l(t('Standard Classification of Transported Goods'), 'http://www.rita.dot.gov/bts/sites/rita.dot.gov.bts/files/publications/commodity_flow_survey/html/classification.html', array(
          'html' => TRUE,
        )),
      )
    ),
    '#states' => array(
      'visible' => array(
        ':input[name$="commodity_code_custom]"]' => array('checked' => FALSE),
      ),
      'required' => array(
        ':input[name$="commodity_code_custom]"]' => array('checked' => FALSE),
      ),
    ),
  );

  return $form;
}

/**
 * All of the available Level 3 Measure Unit options.
 */
function commerce_bluepay_level3_measure_unit_options() {
  return array(
    '5B'  => 'Batch',
    'ACT' => 'Activity',
    'ANN' => 'Year',
    'AU'  => 'Activity Unit',
    'DAY' => 'Day',
    'DZN' => 'Dozen',
    'E49' => 'Working Day',
    'EA'  => 'Each',
    'FOT' => 'Foot',
    'FTQ' => 'Cubic Foot',
    'GLL' => 'Gallon',
    'GRM' => 'Gram',
    'HUR' => 'Hour',
    'INH' => 'Inch',
    'KGM' => 'Kilogram',
    'KMT' => 'Kilometer',
    'LBR' => 'Pound',
    'LTR' => 'Liter',
    'MIN' => 'Minute',
    'MMT' => 'Millimeter',
    'MON' => 'Month',
    'MTQ' => 'Cubic Meter',
    'MTR' => 'Meter',
    'ONZ' => 'Ounce',
    'SEC' => 'Second',
    'SMI' => 'Mile',
    'STN' => 'Ton',
    'TNE' => 'Metric Ton',
    'WEE' => 'Week',
    'XBG' => 'Bag',
    'XBX' => 'Box',
    'XCR' => 'Crate',
    'XCS' => 'Case',
    'XCT' => 'Carton',
    'XPK' => 'Package',
    'XPX' => 'Pallet',
    'XSX' => 'Set',
    'YRD' => 'Yard',
  );
}

/**
 * Ensure that the base field and instances are set.
 */
function commerce_bluepay_level3_ensure_custom_fields() {
  if (variable_get('commerce_bluepay_commodity_code_custom', FALSE)) {
    commerce_bluepay_level3_create_commodity_code_field();
    commerce_bluepay_level3_create_commodity_code_instances();
  }
}

/**
 * Create the Commodity Code base field.
 *
 * @throws Exception
 *   Inherited from field_create_field().
 * @throws FieldException
 *   Inherited from field_create_field().
 *
 * @see field_create_field()
 */
function commerce_bluepay_level3_create_commodity_code_field() {
  if (!field_info_field(COMMERCE_BLUEPAY_LEVEL3_COMMODITY_CODE_FIELD)) {
    $field = array(
      'field_name' => COMMERCE_BLUEPAY_LEVEL3_COMMODITY_CODE_FIELD,
      'type' => 'text',
      'cardinality' => 1,
      'locked' => 1,
      'settings' => array('max_length' => 8),
    );
    field_create_field($field);
  }
}

/**
 * Implements hook_modules_enabled().
 */
function commerce_bluepay_level3_modules_enabled($modules) {
  if (variable_get('commerce_bluepay_commodity_code_custom', FALSE)) {
    commerce_bluepay_level3_ensure_custom_fields();
  }
}

/**
 * Implements hook_commerce_product_type_insert().
 */
function commerce_bluepay_level3_commerce_product_type_insert($product_type, $skip_reset) {
  if (variable_get('commerce_bluepay_commodity_code_custom', FALSE)) {
    commerce_bluepay3_level3_create_commodity_code_instance($product_type['type']);
  }
}


/**
 * Create instances for all products.
 */
function commerce_bluepay_level3_create_commodity_code_instances() {
  $product_bundles = field_info_bundles('commerce_product');

  // Go through each product and ensure we are here.
  foreach ($product_bundles as $bundle => $bundle_info) {
    // Only add if it does not exist.
    if (field_info_instance('commerce_product', COMMERCE_BLUEPAY_LEVEL3_COMMODITY_CODE_FIELD, $bundle) == NULL) {
      commerce_bluepay_level3_create_commodity_code_field_instance($bundle);
    }
  }
}

/**
 * Create a single instance of the Commodity Code field.
 *
 * @param string $bundle
 *   The bundle for which to create the instance.
 *
 * @throws FieldException
 *   If there a problem creating the field.
 */
function commerce_bluepay_level3_create_commodity_code_field_instance($bundle) {
  $instance = array(
    'field_name' => COMMERCE_BLUEPAY_LEVEL3_COMMODITY_CODE_FIELD,
    'entity_type' => 'commerce_product',
    'bundle' => $bundle,
    'label' => 'Commodity Code',
    'description' => t('Enter the Commodity Code for this product.'),
    'required' => FALSE,
    'locked' => TRUE,
    'widget' => array(
      'module' => 'text',
      'settings' => array(
        'size' => 8,
      ),
    ),
    'commerce_cart_settings' => array(
      'attribute_field' => FALSE,
    ),
  );
  field_create_instance($instance);
  drupal_set_message(t('Automatically added Commodity Code field to !bundle', array('!bundle' => $bundle)));
}

/**
 * Implements hook_form_alter().
 */
function commerce_bluepay_level3_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'rules_ui_edit_element' &&
    isset($form['parameter']['payment_method']['settings']['payment_method']['method_id']['#value']) &&
    $form['parameter']['payment_method']['settings']['payment_method']['method_id']['#value'] == 'bluepay') {
    $form['#submit'][] = 'commerce_bluepay_level3_save_settings';
  }
}

/**
 * Records if the custom commodity code is in use.
 */
function commerce_bluepay_level3_save_settings($form, $form_state) {
  $level3_settings = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['level3'];

  if ($level3_settings['enabled'] == 1) {
    if ($level3_settings['commodity_code_custom'] == 1) {
      variable_set('commerce_bluepay_commodity_code_custom', TRUE);
      commerce_bluepay_level3_ensure_custom_fields();
    }
    else {
      variable_set('commerce_bluepay_commodity_code_custom', FALSE);
    }
  }
}

/**
 * Implements hook_commerce_bluepay_request_alter().
 */
function commerce_bluepay_level3_commerce_bluepay_request_alter(CommerceBluePay20Post $request, $order, $payment_method) {
  if ($payment_method['settings']['level3']['enabled'] != 1) {
    return;
  }

  // Create an order wrapper and grab the currency code.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $order_wrapper->commerce_order_total->value();
  $currency_code = $order_total['currency_code'];
  $settings = $payment_method['settings']['level3'];
  $product_line_item_types = commerce_product_line_item_types();

  // Loop over each line item. If an element needed for Level 3 is not found,
  // then we abandon the line item instead of including it so that the rest can
  // be sent.
  foreach ($order_wrapper->commerce_line_items as $line_item) {
    // If a line item isn't a product, then bypass it.
    if (!in_array($line_item->type->value(), $product_line_item_types)) {
      continue;
    }

    // Grab the price data from the unit price.
    $price_data = $line_item->commerce_unit_price->value();

    // Grab the base price.
    $base_price = commerce_price_component_load($price_data, 'base_price');
    $base_price = reset($base_price);

    $line_item_total = $line_item->commerce_total->value();

    // Set defaults.
    $data = array(
      'product_code' => '',
      'unit_cost' => commerce_currency_amount_to_decimal($base_price['price']['amount'], $currency_code),
      'quantity' => $line_item->quantity->value(),
      'description' => '',
      'unit' => $settings['measure_unit'],
      'commodity_code' => '',
      'tax_amount' => 0,
      'tax_rate' => 0,
      'discount' => 0,
      'total' => commerce_currency_amount_to_decimal($line_item->commerce_total->amount->value(), $currency_code),
    );

    // If the SKU is the 'product_code' then use that.
    if ($settings['product_code_sku']) {
      $data['product_code'] = substr($line_item->commerce_product->sku->value(), 0, 12);
    }
    else {
      if (isset($line_item->commerce_product->{$settings['product_code_field']})) {
        $data['product_code'] = substr($line_item->commerce_product->{$settings['product_code_field']}->value(), 0, 12);
      }
    }

    // Check for add add the product descriptor field.
    if (isset($line_item->commerce_product->{$settings['item_descriptor']})) {
      $data['description'] = $line_item->commerce_product->{$settings['item_descriptor']}->value();
    }

    // Are we using our field, or some custom field?
    $cc_field = $settings['commodity_code_custom'] ? COMMERCE_BLUEPAY_LEVEL3_COMMODITY_CODE_FIELD : $settings['commodity_code_field'];

    if (isset($line_item->commerce_product->{$cc_field})) {
      $data['commodity_code'] = $line_item->commerce_product->{$cc_field}->value();
    }

    // Add tax information, if it exists.
    if (module_exists('commerce_tax')) {
      $data['tax_amount'] = commerce_currency_amount_to_decimal(commerce_tax_total_amount($line_item_total['data']['components'], FALSE, $currency_code), $currency_code);
    }

    // Add discounts, if they exist.
    if (module_exists('commerce_discount')) {
      $discount_price = $line_item_total;

      foreach ($discount_price['data']['components'] as $key => $component) {
        if (strpos($component['name'], 'discount|') !== 0) {
          unset($discount_price['data']['components'][$key]);
        }
      }

      if (count($discount_price['data']['components']) > 0) {
        $discount_total = commerce_price_component_total($discount_price);
        $data['discount'] = abs(commerce_currency_amount_to_decimal($discount_total['amount'], $currency_code));
      }
    }

    // Reach out to any other module.
    drupal_alter('commerce_bluepay_level3_data', $data, $line_item, $order);

    // Apply the Level 3 Data to the request.
    call_user_func_array(array($request, 'addLevel3ItemData'), $data);
  }
}
