<?php
/**
 * @file
 * Implements BluePay payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_bluepay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['bluepay'] = array(
    'base' => 'commerce_bluepay',
    'title' => t('BluePay - Credit Card'),
    'short_title' => t('BluePay CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates BluePay 2.0 Post Method for card not present CC transactions.'),
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the BluePay payment method.
 */
function commerce_bluepay_default_settings() {
  return array(
    'login' => '',
    'tran_key' => '',
    'txn_mode' => 'TEST',
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'log' => array('request' => '0', 'response' => '0'),
    'card_types' => array(),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_bluepay_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_bluepay_default_settings();

  $form = array();

  $form['login'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#description' => t('Your numeric account id.'),
    '#default_value' => $settings['login'],
    '#required' => TRUE,
  );

  $form['tran_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Your secret key generated for your account.'),
    '#default_value' => $settings['tran_key'],
    '#required' => TRUE,
  );

  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      'LIVE' => t('Live transactions in a live account'),
      'TEST' => t('Test transactions in a live account'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Sale'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_bluepay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

  if (!empty($card_types)) {
    $fields['type'] = $card_types;
  }

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_bluepay_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_bluepay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    // Prevent the transaction except under limited circumstances.
    $prevent_transaction = TRUE;

    // Allow 0 amount authorizations on Visa cards.
    if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY && $card_type == 'visa') {
      $prevent_transaction = FALSE;
    }

    // If the transaction should still be prevented...
    if ($prevent_transaction) {
      // Create a transaction to log the skipped transaction and display a
      // helpful message to the customer.
      $transaction = commerce_payment_transaction_new('bluepay', $order->order_id);
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
      commerce_payment_transaction_save($transaction);

      drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
      return FALSE;
    }
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the default transaction type from the payment method settings.
  $txn_type = $payment_method['settings']['txn_type'];

  // If txn_type has been specified in the pane values array, such as through
  // the special select element we alter onto the payment terminal form, use
  // that instead.
  if (!empty($pane_values['txn_type'])) {
    $txn_type = $pane_values['txn_type'];
  }

  // Translate transaction type to what BluePay wants.
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      $transaction_type = 'SALE';
      break;

    case COMMERCE_CREDIT_AUTH_ONLY:
      $transaction_type = 'AUTH';
      break;

    case COMMERCE_CREDIT_CAPTURE_ONLY:
      $transaction_type = 'CAPTURE';
      break;

    case COMMERCE_CREDIT_CREDIT:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
      $transaction_type = 'REFUND';
      break;

    default:
      $transaction_type = 'SALE';
  }

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'TRANS_TYPE' => $transaction_type,
    'PAYMENT_TYPE' => 'CREDIT',
    'AMOUNT' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'PAYMENT_ACCOUNT' => $pane_values['credit_card']['number'],
    'CARD_EXPIRE' => $pane_values['credit_card']['exp_month'] . $pane_values['credit_card']['exp_year'],
  );

  if (isset($pane_values['credit_card']['code'])) {
    $nvp['CARD_CVV2'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Add additional transaction invormation to the request array.
  $nvp += array(
    // Order Information.
    'INVOICE_ID' => $order->order_number,
    'MEMO' => substr(implode(', ', $description), 0, 255),
    'EMAIL' => substr($order->mail, 0, 255),
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $nvp += array(
      // Add billing address.
      'NAME1' => substr($billing_address['first_name'], 0, 50),
      'NAME2' => substr($billing_address['last_name'], 0, 50),
      'ADDR1' => substr($billing_address['thoroughfare'], 0, 60),
      'ADDR2' => substr($billing_address['premise'], 0, 60),
      'CITY' => substr($billing_address['locality'], 0, 40),
      'STATE' => substr($billing_address['administrative_area'], 0, 40),
      'ZIP' => substr($billing_address['postal_code'], 0, 20),
      'COUNTRY' => $billing_address['country'],
    );
  }
  else {
    $billing_address = array();
  }

  // Submit the request to BluePay.
  $response = commerce_bluepay_request($payment_method, $nvp);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('bluepay', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response['trans_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response['status'] != '1') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($txn_type) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;

    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $response['status'];

  // Build a meaningful response message.
  $message = array(
    '<b>' . ($response['status'] != '1' ? t('Rejected') : t('Accepted')) . ':</b> (' . $response['message'] . ')',
    'AVS response: @avs',
  );

  $transaction->message_variables = array('@avs' => commerce_bluepay_avs_response_message($response['avs']));

  // Add the CVV response if enabled.
  if (isset($nvp['CARD_CVV2'])) {
    $message[] = 'CVV match: @cvv';
    $transaction->message_variables['@cvv'] = commerce_bluepay_cvv2_match_message($response['cvv2']);
  }

  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response['status'] != '1') {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response['message']), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_bluepay_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state) {
  // If the payment terminal is displayed for an bluepay transaction...
  if (!empty($form['payment_terminal']) && $form_state['payment_method']['method_id'] == 'bluepay') {
    // Add a select list to let the administrator choose a different transaction
    // type than the payment method's default.
    $form['payment_terminal']['payment_details']['txn_type'] = array(
      '#type' => 'select',
      '#title' => t('Transaction type'),
      '#options' => array(
        COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only'),
        COMMERCE_CREDIT_AUTH_CAPTURE => t('Sale'),
      ),
      '#default_value' => $form_state['payment_method']['settings']['txn_type'],
    );
  }
}

/**
 * Submits an BP 2.0 request to BluePay.
 *
 * @param array $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_bluepay_request($payment_method, $nvp = array()) {
  module_load_include('inc', 'commerce_bluepay', 'includes/commerce_bluepay.classes');

  // Construct the payment object.
  $bp = new CommerceBluePay20Post(
    $payment_method['settings']['login'],
    $payment_method['settings']['tran_key'],
    $payment_method['settings']['txn_mode']
  );

  // Set the actual transaction type.
  switch ($nvp['TRANS_TYPE']) {
    case 'AUTH':
      $bp->auth($nvp['AMOUNT']);
      break;

    case 'SALE':
    default:
      $bp->sale($nvp['AMOUNT']);
  }

  $bp->setCustInfo(
    $nvp['PAYMENT_ACCOUNT'],
    $nvp['CARD_CVV2'],
    $nvp['CARD_EXPIRE'],
    $nvp['NAME1'],
    $nvp['NAME2'],
    $nvp['ADDR1'],
    $nvp['CITY'],
    $nvp['STATE'],
    $nvp['ZIP'],
    $nvp['COUNTRY'],
    // PHONE:
    NULL,
    $nvp['EMAIL'],
    // CUSTOM_ID1:
    NULL,
    // CUSTOM_ID2:
    NULL,
    // ADDR2:
    NULL,
    $nvp['MEMO']
  );
  // Attaches commerce order id to the charge.
  $bp->addLevel2Qual(
    NULL,
    $nvp['INVOICE_ID']
  );
  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    watchdog('commerce_bluepay',
      'BluePay request: !param', array(
        '!param' => '<pre>' . print_r($bp->safeRequest(), TRUE) . '</pre>',
      ), WATCHDOG_DEBUG
    );
  }
  // Processes the transaction.
  $bp->process();

  // Gets the responses.
  $response = array(
    'response' => $bp->getResponse(),
    'trans_id' => $bp->getTransId(),
    'status' => $bp->getStatus(),
    'avs' => $bp->getAvsResp(),
    'cvv2' => $bp->getCvv2Resp(),
    'auth_code' => $bp->getAuthCode(),
    'message' => $bp->getMessage(),
  );
  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_bluepay',
      'BluePay response: !param',
      array(
        '!param' => '<pre>' . print_r($response, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG
    );
  }

  return $response;
}

/**
 * Translate AVS response code into a readable string.
 *
 * @param string $code
 *   A single-character AVS response indicator.
 *
 * @return string
 *   Human-readable message based on the code given.
 */
function commerce_bluepay_avs_response_message($code) {
  $values = array(
    '_' => 'Unsupported on this network or transaction type',
    'A' => 'Partial match - Street Address matches, ZIP Code does not',
    'B' => 'International street address match, postal code not verified due to incompatible formats',
    'C' => 'International street address and postal code not verified due to incompatible formats',
    'D' => 'International street address and postal code match',
    'E' => 'Not a mail or phone order',
    'F' => 'Address and Postal Code match (UK only)',
    'G' => 'Service Not supported, non-US Issuer does not participate',
    'I' => 'Address information not verified for international transaction',
    'M' => 'Address and Postal Code match',
    'N' => 'No match - No Address or ZIP Code match',
    'P' => 'International postal code match, street address not verified due to incompatible format',
    'Q' => 'Bill to address did not pass edit checks/Card Association can\'t verify the authentication of an address',
    'R' => 'Retry - Issuer system unavailable, retry later',
    'S' => 'Service not supported',
    'W' => 'Partial match - ZIP Code matches, Street Address does not',
    'U' => 'Unavailable - Address information is unavailable for that account number, or the card issuer does not support',
    'X' => 'Exact match, 9 digit zip - Street Address, and 9 digit ZIP Code match',
    'Y' => 'Exact match, 5 digit zip - Street Address, and 5 digit ZIP Code match',
    'Z' => 'Partial match - 5 digit ZIP Code match only',
    '1' => 'Cardholder name matches',
    '2' => 'Cardholder name, billing address, and postal code match',
    '3' => 'Cardholder name and billing postal code match',
    '4' => 'Cardholder name and billing address match',
    '5' => 'Cardholder name incorrect, billing address and postal code match',
    '6' => 'Cardholder name incorrect, billing postal code matches',
    '7' => 'Cardholder name incorrect, billing address matches',
    '8' => 'Cardholder name, billing address, and postal code are all incorrect',
  );
  if (array_key_exists($code, $values)) {
    return $values[$code];
  }

  return 'Unknown';
}


/**
 * Translate CVV2 match code into a readable string.
 *
 * @param string $code
 *   Single character code from the payment gateway. One of '_', 'M', 'N', 'P',
 *   'S', 'U', 'X'.
 *
 * @return string
 *   Human-readable message based on the code given.
 */
function commerce_bluepay_cvv2_match_message($code) {
  $values = array(
    '_' => 'Unsupported on this network or transaction type',
    'M' => 'CVV2 Match',
    'N' => 'CVV2 did not match',
    'P' => 'CVV2 was not processed',
    'S' => 'CVV2 exists but was not input',
    'U' => 'Card issuer does not provide CVV2 service',
    'X' => 'No response from association',
  );

  if (array_key_exists($code, $values)) {
    return $values[$code];
  }

  return 'Unknown';
}
