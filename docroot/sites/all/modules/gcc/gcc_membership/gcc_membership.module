<?php

/**
 * @file
 * TODO.
 */

require_once __DIR__ . '/gcc_membership.field.inc';

/* Form API */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gcc_membership_form_gcc_admin_member_alter(&$form, &$form_state) {

  if ($form_state['storage']['op'] != 'default') {
    return;
  }

  $entity = $form['#entity'];

  list(,,$bundle) = entity_extract_ids($form['#entity_type'], $entity);

  $features = gcc_features_get_bundle_info($form['#entity_type'], $bundle);
  if (!isset($features['membership_type']['enabled']) || !$features['membership_type']['enabled']) {
    return;
  }

  if (!isset($entity->field_gcc_membership_type[LANGUAGE_NONE][0])) {
    return;
  }

  if ($entity->field_gcc_membership_type[LANGUAGE_NONE][0]['entity_type'] == 'none'
    || $entity->field_gcc_membership_type[LANGUAGE_NONE][0]['bundle'] == 'none') {
    return;
  }

  $uids = array_keys($form['results']['#options']);

  if (empty($uids)) {
    return;
  }

  $type = $entity->field_gcc_membership_type[LANGUAGE_NONE][0]['entity_type'];

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $type);
  $query->entityCondition('bundle', $entity->field_gcc_membership_type[LANGUAGE_NONE][0]['bundle']);

  $query->propertyCondition('uid', $uids);

  $query->fieldCondition(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP, 'entity_type', $form['#entity_type']);
  $query->fieldCondition(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP, 'entity_id', $form['#entity_id']);

  $results = $query->execute() + array($type => array());

  if (empty($results[$type])) {
    return;
  }

  $informations = array();
  $results = entity_load($type, array_keys($results[$type]));

  foreach ($results as $result) {
    $informations[$result->uid] = $result;
  }

  $form['results']['#header']['membership']['data'] = t('Membership Information');

  foreach ($form['results']['#options'] as $uid => &$data) {

    $data['membership'] = '';
    if (isset($informations[$uid])) {

      $uri = entity_uri($type, $informations[$uid]);
      $data['membership'] = l(t('View informations'), $uri['path'], array(

        'attributes' => array(

          'target' => '_blank',
        ),
      ));
    }
  }
}

/* GCC Hooks Implementations */

/**
 * Implements hook_gcc_features_info().
 */
function gcc_membership_gcc_features_info() {

  $features = array();

  $features['membership_type'] = array(

    'label' => t('Enable the membership type features'),
    'explaination' => t('Can choose a membership type'),
  );

  $features['membership_content'] = array(

    'label' => t('Enable the membership content features'),
    'explaination' => t('Can be used as a membership content'),
  );

  return $features;
}

/**
 * Implements hook_gcc_features_is_enabled().
 */
function gcc_membership_gcc_features_is_enabled($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'membership_type':
      return is_array(field_read_instance($entity_type, GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE, $bundle));

    case 'membership_content':
      return is_array(field_read_instance($entity_type, GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP, $bundle));
  }
}

/**
 * Implements hook_gcc_features_enabled().
 */
function gcc_membership_gcc_features_enable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'membership_type':
      gcc_field_create_field_instance(GCC_MEMBERSHIP_FIELD_TYPE_MEMBERSHIP_TYPE, GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE, t('Membership information set'), $entity_type, $bundle);
      break;

    case 'membership_content':
      gcc_field_create_field_instance(GCC_MEMBERSHIP_FIELD_TYPE_MEMBERSHIP_GROUP, GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP, t('Use as a group membership information set'), $entity_type, $bundle);
      break;
  }
}

/**
 * Implements hook_gcc_features_disabled().
 */
function gcc_membership_gcc_features_disable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'membership_type':
      gcc_field_delete_field_instance(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE, $entity_type, $bundle);
      break;

    case 'membership_content':
      gcc_field_delete_field_instance(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP, $entity_type, $bundle);
      break;
  }
}

/**
 * Retrive a list of all the membership type.
 */
function gcc_membership_get_membership_type() {

  static $list = NULL;

  if (!isset($list)) {

    $list = array(

      array(
        'entity_type' => 'none',
        'bundle' => 'none',
        'label' => '- None -',
      ),
    );

    $field_info = field_info_field(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP);
    if (is_array($field_info)) {
      foreach ($field_info['bundles'] as $entity_type => $bundles) {

        $entity_info = entity_get_info($entity_type);
        foreach ($bundles as $bundle) {
          $list[] = array(

            'entity_type' => $entity_type,
            'bundle' => $bundle,
            'label' => $entity_info['bundles'][$bundle]['label'],
          );
        }
      }
    }
  }

  return $list;
}

/**
 * Implements hook_gcc_membership_delete().
 */
function gcc_membership_gcc_membership_delete($entity_type, $entity_id, $uid) {

  if (!field_info_field(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP)) {
    return;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->propertyCondition('uid', $uid);
  $query->fieldCondition(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP, 'entity_type', $entity_type);
  $query->fieldCondition(GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP, 'entity_id', $entity_id);
  $result = $query->execute() + array('node' => array());

  node_delete_multiple(array_keys($result['node']));
}

/* GCC Subscription API */

/**
 * Implements gcc_membership_add_form().
 */
function gcc_membership_gcc_membership_add_form($account, $entity_type, $entity, &$form, &$form_state) {

  if (!isset(
    $entity->{GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE}[LANGUAGE_NONE][0]['entity_type'],
    $entity->{GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE}[LANGUAGE_NONE][0]['bundle']
  )) {
    return;
  }

  if (!gcc_membership_gcc_features_is_enabled(
    'membership_content',
    $entity->{GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE}[LANGUAGE_NONE][0]['entity_type'],
    $entity->{GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE}[LANGUAGE_NONE][0]['bundle']
  )) {
    return;
  }

  $label = entity_label($entity_type, $entity);

  $node = new stdClass();
  $node->type = $entity->{GCC_MEMBERSHIP_FIELD_MEMBERSHIP_TYPE}[LANGUAGE_NONE][0]['bundle'];
  node_object_prepare($node);
  $node->title = format_string('Membership information of @user in group @group', array('@user' => $account->name, '@group' => $label));

  $form['gcc_membership'] = array(

    '#type' => 'fieldset',
    '#title' => t('Membership Complementary informations'),
    '#parents' => array('gcc_membership'),
    '#node' => $node,
    '#tree' => TRUE,
  );

  field_attach_form('node', $node, $form['gcc_membership'], $form_state);
}

/**
 * Implements gcc_membership_add_form_validate().
 */
function gcc_membership_gcc_membership_add_form_validate($account, $entity_type, $entity, &$form, &$form_state) {

  if (isset($form['gcc_membership'])) {
    field_attach_form_validate('node', $form['gcc_membership']['#node'], $form['gcc_membership'], $form_state);
  }
}

/**
 * Implements gcc_membership_add_form_submit().
 */
function gcc_membership_gcc_membership_add_form_submit($account, $entity_type, $entity, &$form, &$form_state, $membership) {

  if (isset($form['gcc_membership'])) {

    $node = $form['gcc_membership']['#node'];
    $entity_id = gcc_get_entity_id($entity_type, $entity);

    field_attach_submit('node', $node, $form['gcc_membership'], $form_state);

    $node->uid = $account->uid;
    $node->{GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP}[LANGUAGE_NONE][0]['entity_type'] = $entity_type;
    $node->{GCC_MEMBERSHIP_FIELD_MEMBERSHIP_GROUP}[LANGUAGE_NONE][0]['entity_id'] = $entity_id;
    node_save($node);
  }
}
