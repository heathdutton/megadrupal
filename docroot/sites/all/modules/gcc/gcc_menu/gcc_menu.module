<?php

/**
 * @file
 * TODO.
 */

// Include the gcc menu functions.
require_once __DIR__ . '/gcc_menu.inc';

// Include the fields definitions.
require_once __DIR__ . '/gcc_menu.field.inc';

define('GCC_MENU_DEFAULT_ONLY', 1);
define('GCC_MENU_ALL_MENU', 0);
define('GCC_MAGIC_MENU', '__gcc_magic_menu');

/* Core Hooks Implementations */

/**
 * Implements hook_menu().
 */
function gcc_menu_menu() {

  $items = array();

  $entity_info = entity_get_info();
  foreach ($entity_info as $entity_type => $info) {

    // Skip non GCC Entity.
    if (!isset($info['gcc'])) {
      continue;
    }

    $base = count(explode('/', $info['gcc']['path']));

    $items[$info['gcc']['path'] . '/gcc/menu'] = array(

      'title' => 'Menu',
      'page callback' => 'gcc_menu_overview_page',
      'page arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_TASK,
      'file' => 'gcc_menu.admin.inc',
      'weight' => 5,
    );

    $items[$info['gcc']['path'] . '/gcc/menu/add'] = array(

      'title' => 'Add a menu',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_menu_edit_menu',
        'add',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'gcc_menu.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/menu/%gcc_menu'] = array(

      'title callback' => 'menu_overview_title',
      'title arguments' => array($base + 2),
      'page callback' => 'gcc_menu_overview_form',
      'page arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
        $base + 2,
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_CALLBACK,
      'file' => 'gcc_menu.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/menu/%gcc_menu/list'] = array(
      'title' => 'List links',
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    $items[$info['gcc']['path'] . '/gcc/menu/%gcc_menu/edit'] = array(

      'title' => 'Edit menu',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_menu_edit_menu',
        'edit',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
        $base + 2,
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'gcc_menu.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/menu/%gcc_menu/delete'] = array(

      'title' => 'Delete menu',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_menu_delete_menu',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
        $base + 2,
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_CALLBACK,
      'file' => 'gcc_menu.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/menu/%gcc_menu/add'] = array(

      'title' => 'Add link',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_menu_edit_item',
        'add',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
        array(),
        $base + 2,
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'gcc_menu.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/menu/item/%menu_link/edit'] = array(

      'title' => 'Add link',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_menu_edit_item',
        'edit',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
        $base + 3,
        NULL,
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'gcc_menu.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/menu/item/%menu_link/delete'] = array(

      'title' => 'Add link',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_menu_delete_item',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
        $base + 3,
      ),
      'access callback' => 'gcc_menu_access_admin',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'gcc_menu.admin.inc',
    );

  }

  return $items;
}

/**
 * Implements hook_block_info().
 */
function gcc_menu_block_info() {

  $blocks = array();

  $blocks['gcc_menu'] = array(

    'info' => t('GCC Menu'),
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function gcc_menu_block_configure($delta = '') {

  $form = array();

  switch ($delta) {

    case 'gcc_menu':
      $form['gcc_menu_mode'] = array(
        '#type' => 'select',
        '#options' => array(

          GCC_MENU_DEFAULT_ONLY => t('Show only the group default menu'),
          GCC_MENU_ALL_MENU => t('Show all the group menus'),
        ),
        '#default_value' => variable_get('gcc_menu_mode', GCC_MENU_DEFAULT_ONLY),
        '#required' => TRUE,
        '#title' => t('GCC Menu mode'),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function gcc_menu_block_save($delta = '', $edit = array()) {

  $form = array();

  switch ($delta) {

    case 'gcc_menu':
      variable_set('gcc_menu_mode', $edit['gcc_menu_mode']);
      break;
  }
  return $form;
}

/**
 * Implements hook_block_view().
 */
function gcc_menu_block_view($delta = '') {

  $block = array();

  switch ($delta) {

    case 'gcc_menu':
      $context = gcc_context_get_context();
      if ($context) {

        $entity = entity_load($context['entity_type'], array($context['entity_id']));
        $entity = isset($entity[$context['entity_id']]) ? $entity[$context['entity_id']] : FALSE;

        if ($entity) {

          $menus = gcc_menu_extract_menu($entity, variable_get('gcc_menu_mode', GCC_MENU_DEFAULT_ONLY));
          if ($menus) {
            switch (variable_get('gcc_menu_mode', GCC_MENU_DEFAULT_ONLY)) {

              case GCC_MENU_DEFAULT_ONLY:
                $menu = array_pop($menus);
                $block['subject'] = check_plain($menu['title']);
                $block['content'] = menu_tree($menu['menu_name']);
                break;

              case GCC_MENU_ALL_MENU:
                $block['subject'] = t('Menus');
                foreach ($menus as $menu) {
                  $block['content'][] = array(
                    'title' => array('#markup' => '<h3>' . check_plain($menu['title']) . '</h3>'),
                    'menu' => menu_tree($menu['menu_name']),
                  );
                }
                break;
            }
          }
        }
      }
      break;
  }

  return $block;
}

/* Access Callbacks */

/**
 * Access callback.
 */
function gcc_menu_access_admin($entity_type, $entity) {

  if (!isset($entity->{GCC_MENU_FIELD_MENU})) {
    return FALSE;
  }

  return gcc_user_access('administer group', $entity_type, $entity) || gcc_user_access('administer menu', $entity_type, $entity);
}

/* GCC Hooks Implementations */

/**
 * Implements hook_gcc_features_info().
 */
function gcc_menu_gcc_features_info() {

  $features = array();

  $features['menu'] = array(

    'label' => t('Enable the menu features'),
    'explaination' => t('Can create menu'),
  );

  return $features;
}

/**
 * Implements hook_gcc_features_is_enabled().
 */
function gcc_menu_gcc_features_is_enabled($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'menu':
      return is_array(field_read_instance($entity_type, GCC_MENU_FIELD_MENU, $bundle));
  }
}

/**
 * Implements hook_gcc_features_enabled().
 */
function gcc_menu_gcc_features_enable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'menu':
      gcc_field_create_field_instance(GCC_MENU_FIELD_TYPE_MENU, GCC_MENU_FIELD_MENU, t('Create menu'), $entity_type, $bundle, array(

        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'locked' => TRUE,
      ));
      break;
  }
}

/**
 * Implements hook_gcc_features_disabled().
 */
function gcc_menu_gcc_features_disable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'menu':
      gcc_field_delete_field_instance(GCC_MENU_FIELD_MENU, $entity_type, $bundle);
      break;
  }
}

/**
 * Implements hook_gcc_permission().
 */
function gcc_menu_gcc_permission() {

  $perm = array();

  $perm['administer menu'] = array(

    'title' => t('Administer menus'),
    'group' => t('Administration'),
  );

  return $perm;
}

/* Menu Block Hooks */

/**
 * Implements hook_menu_block_get_menus().
 */
function gcc_menu_menu_block_get_menus() {

  return array(GCC_MAGIC_MENU => t('GCC Magic Menu'));
}

/**
 * Implements hook_menu_block_tree_alter().
 */
function gcc_menu_menu_block_tree_alter(&$tree, $config) {

  if ($config['menu_name'] != GCC_MAGIC_MENU) {
    return;
  }

  $context = gcc_context_get_context();
  if (!$context) {
    return;
  }

  $entity = entity_load($context['entity_type'], array($context['entity_id']));
  $entity = isset($entity[$context['entity_id']]) ? $entity[$context['entity_id']] : FALSE;

  if (!$entity) {
    return;
  }

  $menus = gcc_menu_extract_menu($entity, TRUE);
  if (!$menus) {
    return;
  }

  $menu = array_pop($menus);

  if ($config['expanded'] || $config['parent_mlid']) {
    // Get the full, un-pruned tree.
    $tree = menu_tree_all_data($menu['menu_name']);
    // And add the active trail data back to the full tree.
    menu_tree_add_active_path($tree);
  }
  else {
    // Get the tree pruned for just the active trail.
    $tree = menu_tree_page_data($menu['menu_name']);
  }
}
