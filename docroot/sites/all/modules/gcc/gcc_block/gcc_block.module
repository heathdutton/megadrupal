<?php

/**
 * @file
 * TODO.
 */

define('GCC_BLOCK_ANYTIME', '__anytime');

/**
 * Implements hook_block_info().
 */
function gcc_block_block_info() {

  $items = array();

  $items['gcc_block_subscription'] = array(

    'info' => t('GCC Subscription block'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $items['gcc_block_add_content'] = array(

    'info' => t('GCC Add content block'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $items;
}

/**
 * Implements hook_block_configure().
 */
function gcc_block_block_configure($delta = '') {

  $form = array();

  switch ($delta) {

    case 'gcc_block_subscription':
    case 'gcc_block_add_content':
      $form['context_type'] = array(

        '#type' => 'select',
        '#options' => array(
          GCC_BLOCK_ANYTIME => t('Show the block anytime the group context is detected'),
          GCC_CONTEXT_DIRECT => t('Show the block only on the group page.'),
          GCC_CONTEXT_INDIRECT => t('Show the block only on the group content page.'),
        ),
        '#required' => TRUE,
        '#title' => t('Context Type'),
        '#default_value' => variable_get('gcc_block_context_type_' . $delta, GCC_BLOCK_ANYTIME),
        '#description' => t('This setting allow you to decide when the block is visible.'),
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function gcc_block_block_save($delta = '', $edit = array()) {

  if (isset($edit['context_type'])) {
    variable_set('gcc_block_context_type_' . $delta, $edit['context_type']);
  }
}

/**
 * Implements hook_block_view().
 */
function gcc_block_block_view($delta = '') {

  // First match the context setting for block which requires it.
  $context = FALSE;
  switch ($delta) {

    case 'gcc_block_subscription':
    case 'gcc_block_add_content':
      $context = gcc_context_get_context();
      if (!$context) {
        return array();
      }

      $type = variable_get('gcc_block_context_type_' . $delta, GCC_BLOCK_ANYTIME);
      if ($type != GCC_BLOCK_ANYTIME && $type != $context['type']) {
        return array();
      }
      break;
  }

  $entity = entity_load($context['entity_type'], array($context['entity_id']));
  $entity = reset($entity);

  // If we cannot load the group entity, it's no use.
  if (!$entity) {
    return array();
  }

  $entity_info = entity_get_info($context['entity_type']);
  $path = gcc_translate_path($context['entity_type'], $context['entity_id'], $entity_info['gcc']['path']);

  switch ($delta) {

    case 'gcc_block_subscription':
      return _gcc_block_subscription($context, $entity, $path);

    case 'gcc_block_add_content':
      return _gcc_block_add_content($context, $entity, $path);
  }

  return array();
}

/* Block Building Functions */

/**
 * Build the block subscription.
 */
function _gcc_block_subscription($context, $entity, $path) {

  global $user;

  $block = array();

  $block['subject'] = t('Group Subscription');
  $membership = gcc_membership_load($context['entity_type'], $context['entity_id'], $user->uid);

  // If not a member and not the owner of the group.
  if (!$membership && gcc_group_get_owner($entity) != $user->uid) {

    $block['content']['status'] = array(
      '#type' => 'item',
      '#markup' => t('You are currently not a member of %label', array('%label' => entity_label($context['entity_type'], $entity))),
    );

    if (user_is_anonymous()) {

      $destination = array('destination' => $_GET['q']);

      if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
        $block['content']['link'] = array(
          '#type' => 'item',
          '#markup' => t('<a href="@login">Log in</a> or <a href="@register">register</a> to subscribe', array(
            '@login' => url('user/login', array('query' => $destination)),
            '@register' => url('user/register', array('query' => $destination)),
          )),
        );
      }
      else {
        $block['content']['link'] = array(
          '#type' => 'item',
          '#markup' => t('<a href="@login">Log in</a> to subscribe', array('@login' => url('user/login', array('query' => $destination)))),
        );
      }
    }
    elseif (gcc_user_access('subscribe', $context['entity_type'], $entity)) {
      $block['content']['link'] = array(
        '#type' => 'item',
        '#markup' => l(t('Subscribe'), $path . '/gcc/subscribe/' . $user->uid),
      );
    }
  }
  elseif ($membership) {

    $block['content']['status'] = array(
      '#type' => 'item',
      '#markup' => t('You are a member of %label', array('%label' => entity_label($context['entity_type'], $entity))),
    );

    switch ($membership->state) {

      case GCC_PENDING:
        $block['content']['status_info'] = array(
          '#type' => 'item',
          '#markup' => t('Your membership still need to be validated by an administrator.'),
        );
        break;

      case GCC_BLOCKED:
        $block['content']['status_info'] = array(
          '#type' => 'item',
          '#markup' => t('Your membership has been blocked by an administrator.'),
        );
        break;
    }

    if (gcc_user_access('unsubscribe', $context['entity_type'], $entity)) {
      $block['content']['link'] = array(
        '#type' => 'item',
        '#markup' => l(t('Unsubscribe'), $path . '/gcc/unsubscribe/' . $user->uid),
      );
    }
  }

  return $block;
}

/**
 * Build the block add content.
 */
function _gcc_block_add_content($context, $entity, $path) {

  $block = array();
  $links = array();

  $bundles = gcc_features_get_enabled_bundles('group_content');
  if (isset($bundles['node'])) {
    foreach ($bundles['node'] as $bundle => $label) {

      $access = TRUE;

      if (!node_access('create', $bundle)) {
        $access = FALSE;
      }

      if (module_exists('gcc_node_access') && variable_get('gcc_node_access_association', FALSE)) {
        if (!gcc_user_access('associate ' . $bundle, $context['entity_type'], $entity)) {
          $access = FALSE;
        }
      }

      if ($access) {
        $links[] = array(

          'href' => 'node/add/' . str_replace('_', '-', $bundle),
          'title' => $label,
          'query' => array(
            'gcc_audience[]' => $context['entity_type'] . ':' . $context['entity_id'],
          ),
        );
      }
    }
  }

  if ($links) {

    $block['subject'] = t('Add content');
    $block['content'] = theme('links', array('links' => $links));
  }

  return $block;
}
