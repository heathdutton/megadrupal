<?php

/**
 * @file
 * Groupe Taxonomy module.
 */

/**
 * Implements hook_entity_info_alter().
 */
function gcc_taxonomy_entity_info_alter(&$entity_info) {

  $entity_info['taxonomy_term']['gcc'] = array(

    'path' => 'taxonomy/term/%taxonomy_term',
    'entity position' => 2,
    'group' => TRUE,
    'group content' => TRUE,
  );
}

/* GCC Core Implementation */

/**
 * Implements hook_gcc_entity_info().
 */
function gcc_taxonomy_gcc_entity_info() {

  $entity_types = array();

  $entity_types['taxonomy_term'] = array(

    'path' => 'taxonomy/term/%taxonomy_term',
    'entity position' => 2,
    'group' => TRUE,
    'group content' => TRUE,
  );

  return $entity_types;
}

/**
 * Implements hook_gcc_entity_features().
 */
function gcc_taxonomy_gcc_entity_features($entity_type, $bundle) {

  $features = array();

  if ($entity_type == 'taxonomy_term') {

    $features['group'] = array(

      'description' => t('When enabled, %entity_type : %bundle can be used as group.', array('%entity_type' => $entity_type, '%bundle' => $bundle)),
    );

    $features['group_content'] = array(

      'description' => t('When enabled, %entity_type : %bundle can be associated to one or more existing groups as group content', array('%entity_type' => $entity_type, '%bundle' => $bundle)),
    );

    $features['membership_type'] = array(

      'description' => t('When enabled, group of type %entity_type : %bundle can choose what set of membership informations to use for their new member.', array('%entity_type' => $entity_type, '%bundle' => $bundle)),
    );

    $features['theme'] = array(

      'description' => t('When enabled, entity of type %entity_type : %bundle can choose a custom theme to display their pages.', array('%entity_type' => $entity_type, '%bundle' => $bundle)),
    );

    $features['menu'] = array(

      'description' => t('When enabled, entity of type %entity_type : %bundle can create menu.', array('%entity_type' => $entity_type, '%bundle' => $bundle)),
    );

    $features['contextual_block'] = array(

      'description' => t('When enabled, entity of type %entity_type : %bundle can configure the block layout.', array('%entity_type' => $entity_type, '%bundle' => $bundle)),
    );

    $features['domain'] = array(

      'description' => t('When enabled, %entity_type : %bundle can choose a custom domain.', array('%entity_type' => $entity_type, '%bundle' => $bundle)),
    );
  }

  return $features;
}

/* GCC Context Implementation */

/**
 * Implements hook_gcc_context_entity_detector().
 */
function gcc_taxonomy_gcc_context_entity_detector() {

  $detectors = array();

  $detectors['taxonomy'] = array(

    'title' => t('Taxonomy Term'),
    'description' => t('Allow to detecte taxonomy term entity.'),
    'callback' => 'gcc_taxonomy_gcc_context_taxonomy_detector',
  );

  return $detectors;
}

/**
 * Entity detector for nodes.
 */
function gcc_taxonomy_gcc_context_taxonomy_detector($menu_item) {

  $path = substr($menu_item['path'], 0, strlen('taxonomy/term/%'));

  if ($path == 'taxonomy/term/%') {

    $taxonomy_term = taxonomy_term_load($menu_item['original_map'][2]);
    if ($taxonomy_term) {
      return array(

        'entity_type' => 'taxonomy_term',
        'entity' => $taxonomy_term,
      );
    }
  }
}
