<?php

/**
 * @file
 * TODO.
 */

require_once __DIR__ . '/gcc_theme.field.inc';

/* Core Hooks Implementations */

/**
 * Implements hook_custom_theme().
 */
function gcc_theme_custom_theme() {

  if ($context = gcc_context_get_context()) {

    $entity = entity_load($context['entity_type'], array($context['entity_id']));
    $entity = reset($entity);

    if (!empty($entity->{GCC_THEME_FIELD_THEME}[LANGUAGE_NONE][0]['value'])) {
      return $entity->{GCC_THEME_FIELD_THEME}[LANGUAGE_NONE][0]['value'];
    }
  }
}

/* GCC Hooks Implementations */

/**
 * Implements hook_gcc_features_info().
 */
function gcc_theme_gcc_features_info() {

  $features = array();

  $features['theme'] = array(

    'label' => t('Enable the theme features'),
    'explaination' => t('Can choose a theme'),
  );

  return $features;
}

/**
 * Implements hook_gcc_features_is_enabled().
 */
function gcc_theme_gcc_features_is_enabled($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'theme':
      return is_array(field_read_instance($entity_type, GCC_THEME_FIELD_THEME, $bundle));
  }
}

/**
 * Implements hook_gcc_features_enabled().
 */
function gcc_theme_gcc_features_enable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'theme':
      gcc_field_create_field_instance(GCC_THEME_FIELD_TYPE_THEME, GCC_THEME_FIELD_THEME, t('Custom Theme'), $entity_type, $bundle);
      break;
  }
}

/**
 * Implements hook_gcc_features_disabled().
 */
function gcc_theme_gcc_features_disable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'theme':
      gcc_field_delete_field_instance(GCC_THEME_FIELD_THEME, $entity_type, $bundle);
      break;
  }
}
