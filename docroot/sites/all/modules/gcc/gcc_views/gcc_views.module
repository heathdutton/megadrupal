<?php

/**
 * @file
 * GCC Views module.
 */

/**
 * Implements hook_views_api().
 */
function gcc_views_views_api() {

  return array(

    'api' => '3.0',
  );
}

/* GCC Context Implementation */

/**
 * Implements hook_gcc_context_entity_detector().
 */
function gcc_views_gcc_context_entity_detector() {

  $detectors = array();

  $detectors['views'] = array(

    'title' => t('Views'),
    'description' => t('Allow to detecte entities from views arguments.'),
    'callback' => 'gcc_views_entity_detector',
  );

  return $detectors;
}

/**
 * Entity detector for nodes.
 */
function gcc_views_entity_detector($menu_item) {

  if ($menu_item['page_callback'] != 'views_page') {
    return;
  }

  $args = $menu_item['page_arguments'];
  if (!is_array($args)) {
    $args = @unserialize($args);
  }

  if (count($args) < 2) {
    return;
  }

  $view = views_get_view($args[0]);
  if (!$view) {
    return;
  }

  $view->set_display($args[1]);
  $view->init_handlers();

  if (!isset($view->header)) {
    return;
  }

  foreach ($view->header as $handler) {
    if ($handler instanceof views_handler_area_gcc_context) {

      $entity_type = $handler->options['entity_type'];
      $pos = $handler->options['arg_position'];

      if (isset($menu_item['original_map'][$pos])) {

        $entity = entity_load($entity_type, array($menu_item['original_map'][$pos]));
        if (isset($entity[$menu_item['original_map'][$pos]])) {

          return array(

            'entity_type' => $entity_type,
            'entity' => $entity[$menu_item['original_map'][$pos]],
          );
        }
      }
    }
  }
}
