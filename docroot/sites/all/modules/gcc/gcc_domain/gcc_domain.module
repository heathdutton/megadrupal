<?php

/**
 * @file
 * TODO.
 */

// Define the maximum length of a domain.
define('GCC_DOMAIN_MAX_LENGTH', 1024);

// Include the fields definitions.
require_once __DIR__ . '/gcc_domain.field.inc';

/* Core Hooks Implementations */

/**
 * Implements hook_url_inbound_alter().
 */
function gcc_domain_url_inbound_alter(&$path, $original_path, $path_language) {

  global $base_url;

  if ($_GET['q'] != variable_get('site_front', 'node')) {
    return;
  }

  // Exit if the domain feature is not enabled.
  if (!field_info_field(GCC_DOMAIN_FIELD_DOMAIN)) {
    return;
  }

  $query = new EntityFieldQuery();
  $query->fieldCondition(GCC_DOMAIN_FIELD_DOMAIN, 'domain', $base_url);
  $query->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
  $groups = $query->execute();

  $group = FALSE;
  $entity_type = FALSE;
  foreach ($groups as $type => $entities) {

    $entity_type = $type;
    foreach ($entities as $id => $entity) {

      $group = entity_load($type, array($id));
      if (!empty($group)) {

        $group = reset($group);
        break;
      }
    }
  }

  if ($group && gcc_is_group($group)) {

    $uri = entity_uri($entity_type, $group);
    $path = $uri['path'];
    return;
  }
}

/**
 * Implements hook_init().
 */
function gcc_domain_init() {

  global $base_url;

  if ($context = gcc_context_get_context()) {

    $entity = entity_load($context['entity_type'], array($context['entity_id']));
    $entity = reset($entity);

    if (!empty($entity->{GCC_DOMAIN_FIELD_DOMAIN}[LANGUAGE_NONE][0]['domain'])) {

      $domain = $entity->{GCC_DOMAIN_FIELD_DOMAIN}[LANGUAGE_NONE][0]['domain'];
      if ($domain != $base_url) {

        drupal_goto($_GET['q'], array(
          'base_url' => $domain,
        ), 301);
      }
    }
  }
}

/* GCC Hooks Implementations */

/**
 * Implements hook_gcc_features_info().
 */
function gcc_domain_gcc_features_info() {

  $features = array();

  $features['domain'] = array(

    'label' => t('Enable the domain features'),
    'explaination' => t('Can choose a domain'),
  );

  return $features;
}

/**
 * Implements hook_gcc_features_is_enabled().
 */
function gcc_domain_gcc_features_is_enabled($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'domain':
      return is_array(field_read_instance($entity_type, GCC_DOMAIN_FIELD_DOMAIN, $bundle));
  }
}

/**
 * Implements hook_gcc_features_enabled().
 */
function gcc_domain_gcc_features_enable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'domain':
      gcc_field_create_field_instance(GCC_DOMAIN_FIELD_TYPE_DOMAIN, GCC_DOMAIN_FIELD_DOMAIN, t('Choose a domain'), $entity_type, $bundle);
      break;
  }
}

/**
 * Implements hook_gcc_features_disabled().
 */
function gcc_domain_gcc_features_disable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'domain':
      gcc_field_delete_field_instance(GCC_DOMAIN_FIELD_DOMAIN, $entity_type, $bundle);
      break;
  }
}
