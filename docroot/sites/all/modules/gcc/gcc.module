<?php

/**
 * @file
 * This file contains all the hook implementations.
 */

// Include the gcc functions.
require_once __DIR__ . '/gcc.inc';

// Include the fields definitions.
require_once __DIR__ . '/gcc.field.inc';

// Role defines.
define('GCC_NON_MEMBER', 'non_member');
define('GCC_MEMBER', 'member');
define('GCC_ADMIN', 'admin');

// Group defines.
define('GCC_GLOBAL_TYPE', 'global');
define('GCC_GLOBAL_BUNDLE', 'global');
define('GCC_GLOBAL_ID', '0');

// Status defines.
define('GCC_PENDING', 1);
define('GCC_ACTIVE', 2);
define('GCC_BLOCKED', 3);

/* Core Hooks Implementations */

/**
 * Implements hook_permission().
 */
function gcc_permission() {

  $permissions = array();

  $permissions['administer gcc configuration'] = array(

    'title' => t('Administer GCC configuration'),
    'description' => t('Allow to administer the configuration of GCC.'),
  );

  $permissions['administer all groups'] = array(

    'title' => t('Administer all groups'),
    'description' => t('Allow to administer every groups.'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function gcc_menu() {

  $items = array();

  // Global admin.
  $items['admin/config/gcc'] = array(

    'title' => 'GCC Configuration',
    'page callback' => 'gcc_admin_overview',
    'access arguments' => array('administer gcc configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gcc.admin.inc',
  );

  $items['admin/config/gcc/overview'] = array(

    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/gcc/role'] = array(

    'title' => 'Roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(

      'gcc_admin_role',
      GCC_GLOBAL_TYPE,
      GCC_GLOBAL_ID,
      'admin/config',
    ),
    'access arguments' => array('administer gcc configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gcc.admin.inc',
  );

  $items['admin/config/gcc/role/%gcc_role/edit'] = array(

    'title' => 'Edit role',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(

      'gcc_admin_role_edit',
      4,
      GCC_GLOBAL_TYPE,
      GCC_GLOBAL_ID,
      'admin/config',
    ),
    'access arguments' => array('administer gcc configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'gcc.admin.inc',
  );

  $items['admin/config/gcc/role/%gcc_role/delete'] = array(

    'title' => 'Delete role',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(

      'gcc_admin_role_delete_confirm',
      4,
      GCC_GLOBAL_TYPE,
      GCC_GLOBAL_ID,
      'admin/config',
    ),
    'access arguments' => array('administer gcc configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'gcc.admin.inc',
  );

  $items['admin/config/gcc/permissions'] = array(

    'title' => 'Permissions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array(

      'gcc_admin_permissions',
      GCC_GLOBAL_TYPE,
      GCC_GLOBAL_ID,
    ),
    'access arguments' => array('administer gcc configuration'),
    'file' => 'gcc.admin.inc',
    'weight' => 1,
  );

  $entity_info = entity_get_info();
  foreach ($entity_info as $entity_type => $info) {

    // Skip non GCC Entity.
    if (!isset($info['gcc'])) {
      continue;
    }

    // Bundle admin.
    foreach ($info['bundles'] as $bundle => $bundle_info) {
      if (isset($bundle_info['admin'])) {

        $path = $bundle_info['admin']['path'];
        $bundle_arg = $bundle;

        if (isset($bundle_info['admin']['bundle argument'])) {
          $bundle_arg = $bundle_info['admin']['bundle argument'];
        }

        $items[$path . '/gcc'] = array(

          'title' => 'Configure GCC',
          'page callback' => 'drupal_get_form',
          'page arguments' => array(

            'gcc_admin_bundle',
            $entity_type,
            $bundle_arg,
          ),
          'type' => MENU_LOCAL_TASK,
          'weight' => 1,
          'file' => 'gcc.admin.inc',
          'access callback' => 'user_access',
          'access arguments' => array('administer gcc configuration'),
        );
      }
    }

    $base = count(explode('/', $info['gcc']['path']));

    // Group admin.
    $items[$info['gcc']['path'] . '/gcc'] = array(

      'title' => 'Group',
      'page callback' => 'gcc_admin_group_overview',
      'page arguments' => array($entity_type, $info['gcc']['entity position']),
      'access callback' => 'gcc_access_admin_group',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_TASK,
      'file' => 'gcc.admin.inc',
      'weight' => 1,
    );

    $items[$info['gcc']['path'] . '/gcc/overview'] = array(

      'title' => 'Overview',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
    );

    $items[$info['gcc']['path'] . '/gcc/content'] = array(

      'title' => 'Content',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_content',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_access_admin_group',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_TASK,
      'file' => 'gcc.admin.inc',
      'weight' => 3,
    );

    $items[$info['gcc']['path'] . '/gcc/members'] = array(

      'title' => 'Members',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_member',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_access_admin_group',
      'access arguments' => array(

        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_TASK,
      'file' => 'gcc.admin.inc',
      'weight' => 3,
    );

    $items[$info['gcc']['path'] . '/gcc/role'] = array(

      'title' => 'Roles',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_role',
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_user_access',
      'access arguments' => array(

        'administer group',
        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_LOCAL_TASK,
      'file' => 'gcc.admin.inc',
      'weight' => 3,
    );

    $items[$info['gcc']['path'] . '/gcc/role/%gcc_role/edit'] = array(

      'title' => 'Edit role',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_role_edit',
        $base + 2,
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_user_access',
      'access arguments' => array(

        'administer group',
        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_CALLBACK,
      'file' => 'gcc.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/role/%gcc_role/delete'] = array(

      'title' => 'Delete role',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_role_delete_confirm',
        $base + 2,
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_user_access',
      'access arguments' => array(

        'administer group',
        $entity_type,
        $info['gcc']['entity position'],
      ),
      'type' => MENU_CALLBACK,
      'file' => 'gcc.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/permissions'] = array(

      'title' => 'Permissions',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_permissions',
        $entity_type,
        $info['gcc']['entity position'],
      ),
      'access callback' => 'gcc_user_access',
      'access arguments' => array(

        'administer group',
        $entity_type,
        $info['gcc']['entity position'],
      ),
      'file' => 'gcc.admin.inc',
      'weight' => 4,
    );

    $items[$info['gcc']['path'] . '/gcc/subscribe/%user'] = array(

      'title' => 'Subscribe',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_subscribe',
        $base + 2,
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_subscription_access',
      'access arguments' => array(

        $base + 2,
        $entity_type,
        $info['gcc']['entity position'],
        'subscribe',
      ),
      'type' => MENU_CALLBACK,
      'file' => 'gcc.admin.inc',
    );

    $items[$info['gcc']['path'] . '/gcc/unsubscribe/%user'] = array(

      'title' => 'Subscribe',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(

        'gcc_admin_unsubscribe',
        $base + 2,
        $entity_type,
        $info['gcc']['entity position'],
        $info['gcc']['path'],
      ),
      'access callback' => 'gcc_subscription_access',
      'access arguments' => array(

        $base + 2,
        $entity_type,
        $info['gcc']['entity position'],
        'unsubscribe',
      ),
      'type' => MENU_CALLBACK,
      'file' => 'gcc.admin.inc',
    );
  }

  return $items;
}

/**
 * Access callback for the group admin overview page.
 */
function gcc_admin_group_overview_access($entity_type, $entity) {

  if (!gcc_is_group($entity)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_admin_paths().
 */
function gcc_admin_paths() {

  $paths = array();

  $entity_info = entity_get_info();
  foreach ($entity_info as $entity_type => $info) {

    // Skip non GCC Entity.
    if (!isset($info['gcc'])) {
      continue;
    }

    $info['gcc']['path'] = preg_replace('#(%.*/)#U', '*/', $info['gcc']['path']);
    $info['gcc']['path'] = preg_replace('#(%.*)$#U', '*', $info['gcc']['path']);

    $paths[$info['gcc']['path'] . '/gcc'] = TRUE;
    $paths[$info['gcc']['path'] . '/gcc/*'] = TRUE;
  }

  return $paths;
}

/**
 * Implements hook_theme().
 */
function gcc_theme() {

  $items = array();

  $items['gcc_admin_permissions'] = array(

    'render element' => 'form',
    'file' => 'gcc.admin.inc',
  );

  $items['gcc_admin_member_filters'] = array(

    'render element' => 'form',
    'file' => 'gcc.admin.inc',
  );

  $items['gcc_admin_member_operations'] = array(

    'render element' => 'form',
    'file' => 'gcc.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_delete().
 */
function gcc_entity_delete($entity, $entity_type) {

  $entity_id = gcc_get_entity_id($entity_type, $entity);

  db_delete('gcc_membership')
  ->condition('entity_type', $entity_type)
  ->condition('entity_id', $entity_id)
  ->execute();

  db_delete('gcc_role')
  ->condition('entity_type', $entity_type)
  ->condition('entity_id', $entity_id)
  ->execute();

  db_delete('gcc_role_permission')
  ->condition('entity_type', $entity_type)
  ->condition('entity_id', $entity_id)
  ->execute();

  db_delete('gcc_users_roles')
  ->condition('entity_type', $entity_type)
  ->condition('entity_id', $entity_id)
  ->execute();
}

/**
 * Implements hook_mail().
 */
function gcc_mail($key, &$message, $params) {

  switch ($key) {

    case 'operation_email':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function gcc_entity_info_alter(&$entity_info) {

  if (module_exists('gcc_node')) {
    $entity_info['node']['view modes']['gcc content'] = array(

      'label' => t('GCC Content'),
      'custom settings' => TRUE,
    );
  }
}

/* Access Callbacks */

/**
 * Access callback.
 */
function gcc_access_admin_group($entity_type, $entity) {

  return gcc_user_access('administer group', $entity_type, $entity) || gcc_user_access('administer group members', $entity_type, $entity);
}

/**
 * Access callbacks for the subscription/unsubscription page.
 */
function gcc_subscription_access($account, $entity_type, $entity, $op) {

  global $user;

  // Anonymous user cannot access to subscription whatsoever.
  if (!user_is_logged_in()) {
    return FALSE;
  }

  $entity_id = gcc_get_entity_id($entity_type, $entity);
  $membership = gcc_membership_load($entity_type, $entity_id, $account->uid);

  if ($op == 'subscribe' && $membership) {
    return FALSE;
  }

  if ($op == 'unsubscribe' && $membership === FALSE) {
    return FALSE;
  }

  // If having the administration permission, access allowed.
  if (gcc_user_access('administer group members', $entity_type, $entity)) {
    return TRUE;
  }

  // If trying to subsribe/unsubscribe himself, need the permission.
  if ($user->uid == $account->uid) {
    return gcc_user_access($op, $entity_type, $entity);
  }

  // If trying to subscribe/unsubscribe someone else and not admin.
  // Access denied !
  return FALSE;
}

/* GCC Hooks Implementations */

/**
 * Implements hook_gcc_features_info().
 */
function gcc_gcc_features_info() {

  $features = array();

  $features['group'] = array(

    'label' => t('Enable the group features'),
    'explaination' => t('Can be used as a group'),
  );

  $features['group_content'] = array(

    'label' => t('Enable the group content features'),
    'explaination' => t('Can be used as a group content'),
  );

  return $features;
}

/**
 * Implements hook_gcc_features_is_enabled().
 */
function gcc_gcc_features_is_enabled($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'group':
      return is_array(field_read_instance($entity_type, GCC_FIELD_ENABLE, $bundle));

    case 'group_content':
      return is_array(field_read_instance($entity_type, GCC_FIELD_AUDIENCE, $bundle));
  }
}

/**
 * Implements hook_gcc_features_enabled().
 */
function gcc_gcc_features_enable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'group':
      gcc_field_create_field_instance(GCC_FIELD_TYPE_ENABLE, GCC_FIELD_ENABLE, t('Enable the group'), $entity_type, $bundle, array(), array('default_value_function' => 'gcc_field_gcc_enable_default_value'));
      break;

    case 'group_content':
      gcc_field_create_field_instance(GCC_FIELD_TYPE_AUDIENCE, GCC_FIELD_AUDIENCE, t('Associate with the following groups'), $entity_type, $bundle);
      break;
  }
}

/**
 * Implements hook_gcc_features_disabled().
 */
function gcc_gcc_features_disable($feature, $entity_type, $bundle) {

  switch ($feature) {

    case 'group':
      gcc_field_delete_field_instance(GCC_FIELD_ENABLE, $entity_type, $bundle);
      break;

    case 'group_content':
      gcc_field_delete_field_instance(GCC_FIELD_AUDIENCE, $entity_type, $bundle);
      break;
  }
}

/**
 * Implements hook_gcc_permission().
 */
function gcc_gcc_permission() {

  $perm = array();

  $perm['subscribe'] = array(

    'title' => t('Subscribe'),
    'group' => t('Subscription'),
  );

  $perm['skip approval'] = array(

    'title' => t('Skip approval when subscribing'),
    'group' => t('Subscription'),
  );

  $perm['unsubscribe'] = array(

    'title' => t('Unsubscribe'),
    'group' => t('Subscription'),
  );

  $perm['administer group'] = array(

    'title' => t('Administer the group'),
    'group' => t('Administration'),
    'global' => array(
      'administer all groups',
    ),
  );

  $perm['administer group members'] = array(

    'title' => t('Administer the group members'),
    'group' => t('Administration'),
    'global' => array(
      'administer all groups',
    ),
  );

  return $perm;
}

/**
 * Implements hook_gcc_operation().
 */
function gcc_gcc_operation($entity_type, $entity_id) {

  $operations = array();

  $operations['delete'] = array(

    'title' => t('Delete the membership'),
    'callback' => 'gcc_operation_delete',
    'file' => drupal_get_path('module', 'gcc') . '/gcc.operation.inc',
    'group' => t('Membership'),
    'form callback' => 'gcc_operation_delete_form',
  );

  $operations['change_status'] = array(

    'title' => t('Change membership status'),
    'callback' => 'gcc_operation_change_status',
    'file' => drupal_get_path('module', 'gcc') . '/gcc.operation.inc',
    'group' => t('Membership'),
    'form callback' => 'gcc_operation_change_status_form',
  );

  $operations['email'] = array(

    'title' => t('Send an email'),
    'callback' => 'gcc_operation_email',
    'file' => drupal_get_path('module', 'gcc') . '/gcc.operation.inc',
    'group' => t('Misc'),
    'form callback' => 'gcc_operation_email_form',
  );

  $roles = gcc_role_get_list($entity_type, $entity_id);
  unset($roles[GCC_NON_MEMBER]);
  unset($roles[GCC_MEMBER]);

  foreach ($roles as $rid => $role) {

    $operations['role_add_' . $rid] = array(

      'title' => $role->name,
      'callback' => 'gcc_operation_add_role',
      'params' => array($rid),
      'file' => drupal_get_path('module', 'gcc') . '/gcc.operation.inc',
      'group' => t('Add a role'),
    );

    $operations['role_remove_' . $rid] = array(

      'title' => $role->name,
      'callback' => 'gcc_operation_remove_role',
      'params' => array($rid),
      'file' => drupal_get_path('module', 'gcc') . '/gcc.operation.inc',
      'group' => t('Remove a role'),
    );
  }

  return $operations;
}
