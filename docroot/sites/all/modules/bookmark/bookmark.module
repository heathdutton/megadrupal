<?php

/**
 * Bookmark is private.
 */
define('BOOKMARK_PRIVATE', 0);

/**
 * Bookmark is public.
 */
define('BOOKMARK_PUBLIC', 1);

/**
 * Modules should return this value from hook_bookmark_access() to allow access to a bookmark.
 */
define('BOOKMARK_ACCESS_ALLOW', 'allow');

/**
 * Modules should return this value from hook_bookmark_access() to deny access to a bookmark.
 */
define('BOOKMARK_ACCESS_DENY', 'deny');

/**
 * Modules should return this value from hook_bookmark_access() to not affect bookmark access.
 */
define('BOOKMARK_ACCESS_IGNORE', NULL);

/**
 * Implements hook_permission().
 */
function bookmark_permission() {
  $permissions['bypass bookmark access'] = array(
    'title' => t('Bypass bookmark access control'),
    'description' => t('View, edit and delete all bookmarks regardless of permission restrictions.'),
    'restrict access' => TRUE,
  );
  $permissions['administer bookmarks'] = array(
    'title' => t('Administer bookmarks'),
    'restrict access' => TRUE,
  );
  $permissions['access bookmarks'] = array(
    'title' => t('View public bookmarks'),
  );
  $permissions['view own private bookmarks'] = array(
    'title' => t('View own private bookmarks'),
  );
  $permissions['use bookmark lookup'] = array(
    'title' => t('Lookup bookmarked URLs'),
  );
  $permissions['create bookmarks'] = array(
    'title' => t('Create new bookmarks'),
  );
  $permissions['edit own bookmarks'] = array(
    'title' => t('Edit own bookmarks'),
  );
  $permissions['edit any bookmarks'] = array(
    'title' => t('Edit any bookmarks'),
  );
  $permissions['delete own bookmarks'] = array(
    'title' => t('Delete own bookmarks'),
  );
  $permissions['delete any bookmarks'] = array(
    'title' => t('Delete any bookmarks'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function bookmark_menu() {
  $items['bookmark/%bookmark'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('bookmark', 1),
    'page callback' => 'bookmark_page_view',
    'page arguments' => array(1),
    'access callback' => 'bookmark_access',
    'access arguments' => array(1, 'view'),
    'file' => 'bookmark.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['bookmark/%bookmark/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['bookmark/%bookmark/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmark_form', 1),
    'access callback' => 'bookmark_access',
    'access arguments' => array(1, 'update'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'bookmark.pages.inc',
    'modal' => TRUE,
  );
  $items['bookmark/%bookmark/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmark_delete_form', 1),
    'access callback' => 'bookmark_access',
    'access arguments' => array(1, 'delete'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'bookmark.pages.inc',
    'modal' => TRUE,
  );

  $items['bookmarks'] = array(
    'title' => 'Bookmarks',
    'page callback' => 'bookmark_user_page',
    'access arguments' => array('access bookmarks'),
    'file' => 'bookmark.pages.inc',
  );
  $items['bookmarks/add'] = array(
    'title' => 'Add bookmark',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmark_form'),
    'access callback' => 'bookmark_access',
    'access arguments' => array('bookmark', 'create'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'bookmark.pages.inc',
    'modal' => TRUE,
  );
  $items['bookmarks/popular/feed'] = array(
    'page callback' => 'bookmark_popular_feed',
    'access arguments' => array('access bookmarks'),
    'type' => MENU_CALLBACK,
  );

  // Admin UI
  $items['admin/content/bookmark'] = array(
    'title' => 'Bookmarks',
    'description' => 'Manage bookmark settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmark_settings_form'),
    'access arguments' => array('administer bookmarks'),
    'file' => 'bookmark.admin.inc',
  );
  $items['admin/content/bookmark/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // User profile pages.
  $items['user/%user/bookmarks'] = array(
    'title' => 'Bookmarks',
    'page callback' => 'bookmark_user_page',
    'page arguments' => array(1),
    'access arguments' => array('access bookmarks'),
    'file' => 'bookmark.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['user/%user/bookmarks/feed'] = array(
    'page callback' => 'bookmark_user_feed',
    'access arguments' => array('access bookmarks'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function bookmark_menu_breadcrumb_alter(&$active_trail, $item) {
  //dpm($active_trail);
  //dpm($item);
}
/**
 * Implements hook_entity_info().
 */
function bookmark_entity_info() {
  $info['bookmark'] = array(
    'label' => t('Bookmark'),
    'base table' => 'bookmark',
    'fieldable' => TRUE,
    'label callback' => 'bookmark_label',
    'entity keys' => array(
      'id' => 'bid',
      'label' => 'title',
    ),
    'bundles' => array(
      'bookmark' => array(
        'label' => t('Bookmark'),
        'admin' => array(
          'path' => 'admin/content/bookmark',
          'access arguments' => array('administer bookmarks'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
      'list' => array(
        'label' => t('Listed'),
        'custom settings' => FALSE,
      ),
      'rss' => array(
        'label' => t('RSS'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}

function bookmark_label($bookmark) {
  return !empty($bookmark->title) ? $bookmark->title : $bookmark->url;
}

/**
 * Load bookmark entities from the database.
 *
 * This function should be used whenever you need to load more than one
 * bookmark from the database. Bookmarks are loaded into memory and will not
 * require database access if loaded again during the same page request.
 *
 * @see entity_load()
 * @see EntityFieldQuery
 *
 * @param $bids
 *   An array of bookmark IDs.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the {bookmark}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   Whether to reset the internal bookmark_load cache.
 *
 * @return
 *   An array of bookmark objects indexed by bid.
 */
function bookmark_load_multiple($bids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('bookmark', $bids, $conditions, $reset);
}

/**
 * Load a bookmark object from the database.
 *
 * @param $bid
 *   The bookmark ID.
 * @param $reset
 *   Whether to reset the bookmark_load_multiple cache.
 *
 * @return
 *   A fully-populated bookmark object.
 */
function bookmark_load($bid = NULL, $reset = FALSE) {
  $bids = (isset($bid) ? array($bid) : array());
  $bookmark = bookmark_load_multiple($bids, array(), $reset);
  return $bookmark ? reset($bookmark) : FALSE;
}

/**
 * Determine whether the current user may perform the given operation on the
 * specified bookmark.
 *
 * @param $bookmark
 *   The node object on which the operation is to be performed, or node type
 *   (e.g. 'forum') for "create" operation.
 * @param $op
 *   The operation to be performed on the node. Possible values are:
 *   - "view"
 *   - "update"
 *   - "delete"
 *   - "create"
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 * @return
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function bookmark_access($bookmark, $op, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!$bookmark || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
    // If there was no bookmark to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  // $bookmark may be either an object or bookmark type. Since bookmark types
  // acannot be an integer, use either bid or type as the static cache id.
  $cid = is_object($bookmark) ? $bookmark->bid : $bookmark;

  // If we've already checked access for this bookmark, user and op, return
  // from cache.
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  if (user_access('bypass bookmark access', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }
  if (!user_access('access bookmarks', $account)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }

  // Grant access to the bookmark if both of the following conditions are met:
  // - No modules say to deny access.
  // - At least one module says to grant access.
  $access = module_invoke_all('bookmark_access', $bookmark, $op, $account);
  if (in_array(BOOKMARK_ACCESS_DENY, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }
  elseif (in_array(BOOKMARK_ACCESS_ALLOW, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  // Check default view access.
  if ($op == 'view') {
    // Users may have permission to view their own private bookmarks.
    if ($bookmark->status == BOOKMARK_PRIVATE && $account->uid == $bookmark->uid && !empty($account->uid) && user_access('view own private bookmarks', $account)) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
    // Otherwise the default is all users can view all public bookmarks.
    elseif ($bookmark->status == BOOKMARK_PUBLIC) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  //$rights[$account->uid][$cid][$op] = FALSE;
  return FALSE;
}

/**
 * Implements hook_bookmark_access().
 */
function bookmark_bookmark_access($bookmark, $op, $account) {
  if ($op == 'create' && user_access('create bookmarks', $account)) {
    return BOOKMARK_ACCESS_ALLOW;
  }
  if ($op == 'update' && (user_access('edit any bookmarks', $account) || ($bookmark->uid == $account->uid && user_access('edit own bookmarks', $account)))) {
    return BOOKMARK_ACCESS_ALLOW;
  }
  if ($op == 'delete' && (user_access('delete any bookmarks', $account) || ($bookmark->uid == $account->uid && user_access('delete own bookmarks', $account)))) {
    return BOOKMARK_ACCESS_ALLOW;
  }

  return BOOKMARK_ACCESS_IGNORE;
}

/**
 * Implements hook_query_TAG_alter().
 */
function bookmark_query_bookmark_access_alter(QueryAlterableInterface $query) {
  global $user;

  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = $user;
  }
  if (!$op = $query->getMetaData('op')) {
    $op = 'view';
  }

  // If $account can bypass node access, or there are no node access modules,
  // or the operation is 'view' and the $acount has a global view grant (i.e.,
  // a view grant for node ID 0), we don't need to alter the query.
  if (user_access('bypass bookmark access', $account)) {
    return;
  }
  if ($op == 'view' && $user->uid != $account->uid) {
    $query->condition('status', BOOKMARK_PUBLIC);
  }
}

function bookmark_object_prepare($bookmark) {
  // If this is a bookmark node, fill in the default values.
  if (!isset($bookmark->bid) || isset($bookmark->is_new)) {
    if (!isset($bookmark->status)) {
      $bookmark->status = BOOKMARK_PUBLIC;
    }
    $bookmark->uid = $GLOBALS['user']->uid;
    $bookmark->created = REQUEST_TIME;
  }

  module_invoke_all('bookmark_prepare', $bookmark);
}

/**
 * Save changes to a bookmark or add a new bookmark.
 *
 * @param $bookmark
 *   The $bookmark object to be saved. If $bookmark->bid is omitted (or
 *   $bookmark->is_new is TRUE), a new bookmark will be added.
 */
function bookmark_save($bookmark) {
  $transaction = db_transaction();

  try {
    // Load the stored entity, if any.
    if (!empty($bookmark->bid) && !isset($bookmark->original)) {
      $bookmark->original = entity_load_unchanged('bookmark', $bookmark->bid);
    }

    field_attach_presave('bookmark', $bookmark);

    // Determine if we will be inserting a new bookmark.
    if (!isset($bookmark->is_new)) {
      $bookmark->is_new = empty($bookmark->bid);
    }

    // Set the timestamp fields.
    if (empty($bookmark->created)) {
      $bookmark->created = REQUEST_TIME;
    }

    // The changed timestamp is always updated for bookkeeping purposes.
    $bookmark->changed = REQUEST_TIME;

    // Let modules modify the node before it is saved to the database.
    module_invoke_all('bookmark_presave', $bookmark);
    module_invoke_all('entity_presave', $bookmark, 'bookmark');

    // Save the bookmark.
    if ($bookmark->is_new) {
      drupal_write_record('bookmark', $bookmark);
      field_attach_insert('bookmark', $bookmark);
      module_invoke_all('bookmark_insert', $bookmark);
      module_invoke_all('entity_insert', $bookmark, 'bookmark');
    }
    else {
      drupal_write_record('bookmark', $bookmark, array('bid'));
      field_attach_update('bookmark', $bookmark);
      module_invoke_all('bookmark_update', $bookmark);
      module_invoke_all('entity_update', $bookmark, 'bookmark');
    }

    // Clear internal properties.
    unset($bookmark->is_new);
    unset($bookmark->original);
    // Clear the static loading cache.
    entity_get_controller('bookmark')->resetCache(array($bookmark->bid));

    // Ignore slave server temporarily to give time for the
    // saved node to be propagated to the slave.
    db_ignore_slave();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('bookmark', $e);
    throw $e;
  }
}

function bookmark_view_multiple($bookmarks, $view_mode = 'list', $weight = 0, $langcode = NULL) {
  field_attach_prepare_view('bookmark', $bookmarks, $view_mode);
  entity_prepare_view('bookmark', $bookmarks);
  $build = array();
  foreach ($bookmarks as $bookmark) {
    $build['bookmarks'][$bookmark->bid] = bookmark_view($bookmark, $view_mode, $langcode);
    $build['bookmarks'][$bookmark->bid]['#weight'] = $weight;
    $weight++;
  }
  $build['bookmarks']['#sorted'] = TRUE;
  return $build;
}

function bookmark_view($bookmark, $view_mode = 'list', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  // Populate $bookmark->content with a render() array.
  bookmark_build_content($bookmark, $view_mode, $langcode);

  $build = $bookmark->content;
  // We don't need duplicate rendering info in node->content.
  unset($bookmark->content);

  $build += array(
    '#theme' => 'bookmark',
    '#node' => $bookmark,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  // Add contextual links for this bookmark, except when the bookmark is
  // already being displayed on its own page. Modules may alter this behavior
  // (for example, to restrict contextual links to certain view modes) by
  // implementing hook_bookmark_view_alter().
  if (!empty($bookmark->bid) && $view_mode != 'full' && !bookmark_is_page($bookmark)) {
    $build['#contextual_links']['bookmark'] = array('bookmark', array($bookmark->bid));
  }

  // Allow modules to modify the structured node.
  $type = 'bookmark';
  drupal_alter(array('bookmark_view', 'entity_view'), $build, $type);

  return $build;
}

function bookmark_is_page($bookmark) {
  $page_bookmark = menu_get_object('bookmark');
  return (!empty($page_bookmark) ? $page_bookmark->bid == $bookmark->bid : FALSE);
}

function bookmark_build_content($bookmark, $view_mode = 'list', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  // Remove previously built content, if exists.
  $bookmark->content = array();
  $bookmark->content['url'] = array('#markup' => l(bookmark_url_get_brief($bookmark->url), $bookmark->url, array('attributes' => array('rel' => 'nofollow'))));

  // Build fields content.
  // In case of a multiple view, bookmark_view_multiple() already ran the
  // 'prepare_view' step. An internal flag prevents the operation from running
  // twice.
  field_attach_prepare_view('bookmark', array($bookmark->bid => $bookmark), $view_mode);
  entity_prepare_view('bookmark', array($bookmark->bid => $bookmark));
  $bookmark->content += field_attach_view('bookmark', $bookmark, $view_mode, $langcode);

  $links = array();
  if (bookmark_access($bookmark, 'update')) {
    $links['bookmark-edit'] = array(
      'title' => t('Edit'),
      'href' => "bookmark/{$bookmark->bid}/edit",
    );
  }
  if (bookmark_access($bookmark, 'delete')) {
    $links['bookmark-delete'] = array(
      'title' => t('Delete'),
      'href' => "bookmark/{$bookmark->bid}/delete",
    );
  }
  $bookmark->content['links'] = array(
    '#theme' => 'links__bookmark',
    '#pre_render' => array('drupal_pre_render_links'),
    '#attributes' => array('class' => array('links', 'inline')),
  );
  $bookmark->content['links']['bookmark'] = array(
    '#theme' => 'links__bookmark__bookmark',
    '#links' => $links,
    '#attributes' => array('class' => array('links', 'inline')),
  );

  // Allow modules to make their own additions to the bookmark.
  module_invoke_all('bookmark_view', $bookmark, $view_mode, $langcode);
  module_invoke_all('entity_view', $bookmark, 'bookmark', $view_mode, $langcode);
}

/**
 * Implements hook_theme().
 */
function bookmark_theme() {
  $theme['bookmark'] = array(
    'template' => 'bookmark',
    'render element' => 'elements',
  );

  return $theme;
}

function template_preprocess_bookmark(&$variables) {
  $bookmark = $variables['elements']['#bookmark'];
  $account = user_load($bookmark->uid);

  $variables['bookmark']  = $bookmark;
  $variables['author']    = theme('username', array('account' => $account));
  $variables['created']   = format_date($bookmark->created);
  $variables['changed']   = format_date($bookmark->changed);

  $variables['title']     = l(entity_label('bookmark', $bookmark), $bookmark->url, array('attributes' => array('rel' => 'nofollow')));
  $brief = bookmark_url_get_brief($bookmark->url);
  $variables['url']       = l($brief, $bookmark->url, array('attributes' => array('rel' => 'nofollow')));
  $variables['url_brief'] = check_plain($brief);
  $variables['submitted'] = REQUEST_TIME - $bookmark->created > 86400 ? $variables['created'] : t('!interval ago', array('!interval' => format_interval(REQUEST_TIME - $bookmark->created)));

  // Preprocess fields.
  field_attach_preprocess('bookmark', $bookmark, $variables['elements'], $variables);

  // Helpful $content variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Set status to a string representation of $bookmark->status.
  $variables['status'] = ($bookmark->status == BOOKMARK_PRIVATE) ? 'bookmark-private' : 'bookmark-public';

  // Gather comment classes.
  $variables['classes_array'][] = $variables['status'];
}

/**
 * Delete a bookmark.
 *
 * @param $bid
 *   A bookmark ID.
 */
function bookmark_delete($bid) {
  bookmark_delete_multiple(array($bid));
}

/**
 * Delete multiple bookmark.
 *
 * @param $bids
 *   An array of bookmark IDs.
 */
function bookmark_delete_multiple($bids) {
  if (empty($bids)) {
    return;
  }

  $transaction = db_transaction();

  try {
    $bookmarks = bookmark_load_multiple($bids, array());

    foreach ($bookmarks as $bid => $bookmark) {
      module_invoke_all('bookmark_delete', $bookmark);
      module_invoke_all('entity_delete', $bookmark, 'bookmark');
      field_attach_delete('bookmark', $bookmark);

      // Remove this bookmark from the search index if needed.
      // This code is implemented in bookmark module rather than in search
      // module, because bookmark module is implementing search module's API,
      // not the other way around.
      if (module_exists('search')) {
        search_reindex($bid, 'bookmark');
      }
    }

    // Delete after calling hooks so that they can query bookmark tables as needed.
    db_delete('bookmark')
      ->condition('bid', $bids, 'IN')
      ->execute();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('bookmark', $e);
    throw $e;
  }

  // Clear the page and block and node_load_multiple caches.
  entity_get_controller('bookmark')->resetCache();
}

/**
 * Implements hook_field_extra_fields().
 */
function bookmark_field_extra_fields() {
  $extra['bookmark']['bookmark'] = array(
    'form' => array(
      'url' => array(
        'label' => t('URL'),
        'description' => t('Bookmark module element'),
        'weight' => 0,
      ),
      'title' => array(
        'label' => t('Title'),
        'description' => t('Bookmark module element'),
        'weight' => 5,
      ),
      'public' => array(
        'label' => t('Public'),
        'description' => t('Bookmark module element'),
        'weight' => 50,
      ),
    ),
    'display' => array(
      'url' => array(
        'label' => t('URL'),
        'description' => t('URL'),
        'weight' => 0,
      ),
      //'title' => array(
      //  'label' => t('Title'),
      //  'description' => t('Title'),
      //  'weight' => 5,
      //),
    ),
  );

  return $extra;
}
function bookmark_url_get_brief($url) {
  return preg_replace(array('!^https?://!', '!/$!'), '', $url);
}

function bookmark_url_get_hash($url) {
  return md5($url);
}

function bookmark_url_lookup($url) {
  $hash = bookmark_url_get_hash($url);

  if (FALSE && $cache = cache_get('url:' . $hash)) {
    return $cache->data;
  }
  else {
    $request = drupal_http_request($url);
    $cache = new stdClass();
    $cache->cid = 'url:' . $hash;
    $cache->data = array();
    $cache->data['code'] = $request->code;
    $cache->data['headers'] = $request->headers;
    $cache->data['url'] = isset($request->redirect_url) ? $request->redirect_url : $url;
    $cache->expire = CACHE_PERMANENT;
    $cache->created = REQUEST_TIME;

    if ($cache->data['code'] == 200 && !empty($request->data)) {
      $doc = new DOMDocument();
      @$doc->loadHTML($request->data);

      // Grab the content in the <title> tag
      $titles = $doc->getElementsByTagName('title');
      $cache->data['title'] = $titles->item(0)->nodeValue;

      // Grab the content in the <meta name="description"> tag.
      $metas = $doc->getElementsByTagName('meta');
      for ($i = 0; $i < $metas->length; $i++) {
        $meta = $metas->item($i);
        if($meta->getAttribute('name') == 'description') {
          $cache->data['description'] = $meta->getAttribute('content');
        }
      }
    }

    cache_set($cache->cid, $cache->data);
    return $cache->data;
  }
}

function elements_form_bookmark_form_alter(&$form, $form_state) {
  $form['url']['#type'] = 'urlfield';
}
/**
 * @name mollom_bookmark Bookmark module integration for Mollom.
 * @{
 */

/**
 * Implements hook_mollom_form_list().
 */
function bookmark_mollom_form_list() {
  $forms['bookmark_form'] = array(
    'title' => t('Bookmark form'),
    'entity' => 'bookmark',
    'bundle' => 'bookmark',
    'delete form' => 'bookmark_delete_form',
    'entity delete multiple callback' => 'bookmark_delete_multiple',
  );
  return $forms;
}

/**
 * Implements hook_mollom_form_info().
 */
function bookmark_mollom_form_info($form_id) {
  /*// Retrieve internal type from $form_id.
  $nodetype = drupal_substr($form_id, 0, -10);

  $type = node_type_get_type($nodetype);
  $form_info = array(
    // @todo This is incompatible with node access.
    'bypass access' => array('bypass node access'),
    'bundle' => $type->type,
    'moderation callback' => 'node_mollom_form_moderation',
    'elements' => array(),
    'mapping' => array(
      'post_id' => 'nid',
      'author_name' => 'name',
    ),
  );
  // @see node_permission()
  if (in_array($type->type, node_permissions_get_configured_types())) {
    $form_info['bypass access'][] = 'edit any ' . $type->type . ' content';
    $form_info['bypass access'][] = 'delete any ' . $type->type . ' content';
  }
  // @see node_content_form()
  if ($type->has_title) {
    $form_info['elements']['title'] = check_plain($type->title_label);
    $form_info['mapping']['post_title'] = 'title';
  }

  // Add text fields.
  $fields = field_info_fields();
  foreach (field_info_instances('node', $type->type) as $field_name => $field) {
    if (in_array($fields[$field_name]['type'], array('text', 'text_long', 'text_with_summary'))) {
      $form_info['elements'][$field_name . '][' . LANGUAGE_NONE . '][0][value'] = check_plain(t($field['label']));
    }
  }*/

  return $form_info;
}

/**
 * @} End of "name mollom_bookmark".
 */
