<?php

/**
 * @file
 * Hook implementations for Derivate Generator.
 */

/**
 * Implements hook_cron_queue_info().
 */
function derivative_generator_cron_queue_info() {
  $queues['derivative_generator'] = array(
    'worker callback' => 'derivative_generator_generate',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_entity_insert().
 */
function derivative_generator_entity_insert($entity, $entity_type) {
  $instances = derivative_generator_get_image_instances($entity, $entity_type);
  foreach ($instances as $instance) {
    $image_styles = array_filter($instance['settings']['generate_derivatives']);
    if (isset($entity->{$instance['field_name']})) {
      foreach ($entity->{$instance['field_name']} as $lang => $values) {
        foreach ($values as $value) {
          derivative_generator_queue_generation($value['fid'], $image_styles);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function derivative_generator_entity_update($entity, $entity_type) {
  $instances = derivative_generator_get_image_instances($entity, $entity_type);
  $original = $entity->original;
  foreach ($instances as $instance) {
    $image_styles = array_filter($instance['settings']['generate_derivatives']);
    foreach ($entity->{$instance['field_name']} as $lang => $values) {
      foreach ($values as $delta => $value) {
        $original_value = isset($original->{$instance['field_name']}[$lang][$delta]) ? $original->{$instance['field_name']}[$lang][$delta] : array('fid' => 0);
        if ($value['fid'] != $original_value['fid']) {
          derivative_generator_queue_generation($value['fid'], $image_styles);
        }
      }
    }
  }
}

/**
 * Implements hook_field_info_alter().
 */
function derivative_generator_field_info_alter(&$info) {
  if (isset($info['image'])) {
    $info['image'] += array('instance_settings' => array());
    $info['image']['instance_settings'] += array(
      'generate_derivatives' => array(),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkboxes for the 'generate_derivatives' instance settings on the
 * 'Edit field instance' form.
 */
function derivative_generator_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $instance = $form['#instance'];
  if ($form['#field']['type'] == 'image' && !$form['#field']['locked']) {
    $form['instance']['settings']['generate_derivatives'] = array(
      '#type' => 'checkboxes',
      '#options' => image_style_options(FALSE),
      '#title' => t('Generate derivatives'),
      '#description' => t("Select the image styles to auto-generate for images in this field."),
      '#default_value' => $instance['settings']['generate_derivatives'],
    );
  }
}

/**
 * Get all field instances of type 'image' for an entity.
 *
 * @param mixed $entity
 *   The entity object to get the instances for.
 * @param string $entity_type
 *   The entity type of the passed entity.
 *
 * @return array
 *   The relevant instances as returned by field_read_instances().
 */
function derivative_generator_get_image_instances($entity, $entity_type) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  // Get all image fields.
  $field_names = array_keys(field_read_fields(array('type' => 'image')));
  $instances = array();
  if ($field_names) {
    $conditions = array(
      'field_name' => $field_names,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
    );
    $instances = field_read_instances($conditions);
    foreach ($instances as $key => $instance) {
      $filtered = isset($instance['settings']['generate_derivatives']) ? array_filter($instance['settings']['generate_derivatives']) : NULL;
      if (empty($filtered)) {
        unset($instances[$key]);
      }
    }
  }
  return $instances;
}

/**
 * Queue the generation of derivatives for a file.
 *
 * @param int $fid
 *   The file id of the image to create the derivatives for.
 * @param array $image_styles
 *   An array of image styles to generate for this image.
 */
function derivative_generator_queue_generation($fid, $image_styles) {
  $queue = DrupalQueue::get('derivative_generator');
  $queue->createQueue();
  foreach ($image_styles as $image_style) {
    $queue->createItem(array('fid' => $fid, 'image_style' => $image_style));
  }
}

/**
 * Implements hook_field_update_instance().
 */
function derivative_generator_field_update_instance($instance, $prior_instance) {
  // Check which styles were added.
  $instance['settings'] += array('generate_derivatives' => array());
  $prior_instance['settings'] += array('generate_derivatives' => array());
  $styles = array_filter($instance['settings']['generate_derivatives']);
  $prior_styles = array_filter($prior_instance['settings']['generate_derivatives']);
  $generate_styles = array_diff_key($styles, $prior_styles);
  if ($generate_styles) {
    // Loading all the entities would be too heavy here, so we query the
    // database.
    $table = _field_sql_storage_tablename(field_info_field($instance['field_name']));
    $fids = db_select($table, 'f')
      ->fields('f', array(_field_sql_storage_columnname($instance['field_name'], 'fid')))
      ->distinct()
      ->condition('f.entity_type', $instance['entity_type'])
      ->condition('f.bundle', $instance['bundle'])
      ->condition('f.deleted', 0)
      ->execute()
      ->fetchCol();
    foreach ($fids as $fid) {
      derivative_generator_queue_generation($fid, $generate_styles);
    }
  }
}

/**
 * Implements hook_image_style_flush().
 */
function derivative_generator_image_style_flush($style) {
  $processed = &drupal_static(__FUNCTION__, array());
  if (!isset($processed[$style['name']])) {
    $processed[$style['name']] = TRUE;
    $field_names = array_keys(field_read_fields(array('type' => 'image')));
    $conditions = array(
      'field_name' => $field_names,
    );
    $instances = field_read_instances($conditions);
    foreach ($instances as $instance) {
      $instance['settings'] += array('generate_derivatives' => array());
      $generate_styles = array_filter($instance['settings']['generate_derivatives']);
      if ($generate_styles && isset($generate_styles[$style['name']])) {
        // Loading all the entities would be too heavy here, so we query the
        // database.
        $table = _field_sql_storage_tablename(field_info_field($instance['field_name']));
        $fids = db_select($table, 'f')
          ->fields('f', array(_field_sql_storage_columnname($instance['field_name'], 'fid')))
          ->distinct()
          ->condition('f.entity_type', $instance['entity_type'])
          ->condition('f.bundle', $instance['bundle'])
          ->condition('f.deleted', 0)
          ->execute()
          ->fetchCol();
        foreach ($fids as $fid) {
          derivative_generator_queue_generation($fid, array($style['name']));
        }
      }
    }
  }
}

/**
 * Queue worker callback. Generates the derivatives.
 *
 * @param array $queue_item
 *   An array with the following keys:
 *     - fid: The file id to generate the derivative for.
 *     - image_style: The image style to generate.
 */
function derivative_generator_generate($queue_item) {
  $style_name = $queue_item['image_style'];
  $image_style = image_style_load($style_name);
  if (!$image_style) {
    return;
  }
  $file = file_load($queue_item['fid']);
  if (!$file) {
    return;
  }
  $destination = image_style_path($style_name, $file->uri);
  if (!file_exists($destination)) {
    image_style_create_derivative($image_style, $file->uri, $destination);
  }
}

/**
 * Implements hook_action_info().
 */
function derivative_generator_action_info() {
  return array(
    'derivative_generator_generate_action' => array(
      'type' => 'entity',
      'label' => t('Generate image derivatives for all image fields'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Views bulk operations form callback.
 */
function derivative_generator_generate_action_views_bulk_operations_form($options, $entity_type) {
  $field_names = array_keys(field_read_fields(array('type' => 'image')));
  $conditions = array(
    'field_name' => $field_names,
    'entity_type' => $entity_type,
  );
  $instances = field_read_instances($conditions);
  $field_options = array();
  $entity_info = entity_get_info($entity_type);
  foreach ($instances as $instance) {
    $filtered = isset($instance['settings']['generate_derivatives']) ? array_filter($instance['settings']['generate_derivatives']) : NULL;
    if (!empty($filtered)) {
      $bundle_label = $entity_info['bundles'][$instance['bundle']]['label'];
      $field_options[$instance['field_name'] . '|' . $instance['bundle']] = $bundle_label . ': ' . $instance['label'];
    }
  }
  $form = array();
  $form['fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Fields'),
    '#description' => t('Select the fields to generate derivatives for.'),
    '#options' => $field_options,
    '#default_value' => isset($options['fields']) ? $options['fields'] : array_keys($field_options),
  );
  return $form;
}

/**
 * Action callback.
 */
function derivative_generator_generate_action(&$entity, $context) {
  if (!isset($context['settings']['fields']) || !$context['settings']['fields']) {
    return;
  }
  $selected = $context['settings']['fields'];
  $instances = array();
  foreach (array_filter($selected) as $selection) {
    list($field_name, $instance_bundle) = explode('|', $selection);
    $instances[$instance_bundle][$field_name] = $field_name;
  }
  list(, , $bundle) = entity_extract_ids($context['entity_type'], $entity);
  foreach ($instances[$bundle] as $field_name) {
    $instance = field_info_instance($context['entity_type'], $field_name, $bundle);
    $image_styles = array_filter($instance['settings']['generate_derivatives']);
    foreach ($entity->{$field_name} as $lang => $values) {
      foreach ($values as $delta => $value) {
        derivative_generator_queue_generation($value['fid'], $image_styles);
      }
    }
  }
}
