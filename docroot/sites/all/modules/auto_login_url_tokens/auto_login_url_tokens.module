<?php

/**
 * @file
 * Main file for auto_login_url_tokens module.
 */

/**
 * Implements hook_menu().
 */
function auto_login_url_tokens_menu() {

  $items = array();

  $items['admin/config/people/autologinurl/tokens'] = array(
    'title' => 'Auto Login URL Tokens',
    'description' => 'Auto Login URL tokens',
    'page callback' => '_auto_login_url_tokens_form',
    'access arguments' => array('administer auto login url'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Get form.
 *
 * @return object
 *   Auto Login URL Tokens form.
 */
function _auto_login_url_tokens_form() {
  return drupal_get_form('auto_login_url_tokens_form');
}

/**
 * Tokens form for Auto Login URL.
 *
 * @return object
 *   Auto Login URL Tokens form.
 */
function auto_login_url_tokens_form($form_state) {
  $form = array();

  // Token list.
  $form['auto_login_url_token_list'] = array(
    '#type' => 'markup',
    '#markup' => _auto_login_url_tokens_list(),
  );

  $form['auto_login_url_token_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add new Auto Login URL Token'),
    '#collapsible' => FALSE,
  );

  // Token title.
  $form['auto_login_url_token_fieldset']['auto_login_url_token_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#description' => t('Token title'),
  );

  // Token URL.
  $form['auto_login_url_token_fieldset']['auto_login_url_token_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Token URL'),
    '#required' => TRUE,
    '#description' => t('Auto Login URL. You may use %uid for the user id. E.g. user/%uid/edit'),
  );

  // Submit.
  $form['auto_login_url_token_fieldset']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  // Notice.
  $form['auto_login_url_token_fieldset']['notice'] = array(
    '#type' => 'item',
    '#markup' => t('Warning! Remember to clear cache after adding new tokens.'),
  );

  return $form;
}

/**
 * Submit handler.
 *
 * @param array $form
 *   Existing form.
 * @param array $form_state
 *   Current form state.
 */
function auto_login_url_tokens_form_submit(array $form, array &$form_state) {
  global $user;

  /**
   * $node = new stdClass();
   * $node->title = $form_state['values']['auto_login_url_token_title'];
   * $node->type = 'auto_login_url_token';
   * node_object_prepare($node);
   * $node->language = LANGUAGE_NONE;
   * $node->uid = $user->uid;
   * $node->status = 1;
   * $node->promote = 0;
   * $node->comment = 0;
   *
   * // Token URL.
   * $node->field_alu_token_url[LANGUAGE_NONE][]['value'] = $form_state['values']['auto_login_url_token_url'];
   *
   * // Save node.
   * node_save($node);
   */

  // Create new token as content.
  $values = array(
    'type' => 'auto_login_url_token',
    'uid' => $user->uid,
  );
  $entity = entity_create('node', $values);
  $entity = entity_metadata_wrapper('node', $entity);
  $entity->language(LANGUAGE_NONE);
  $entity->title = $form_state['values']['auto_login_url_token_title'];

  // Token URL.
  $entity->field_alu_token_url = $form_state['values']['auto_login_url_token_url'];
  $entity->save();

}

/**
 * Get Token URLs list.
 *
 * @return string
 *   Markup of tokens list.
 */
function _auto_login_url_tokens_list() {
  $title = t('Token URLs');
  $type = 'ul';

  // The following attributes apply to the list tag (e.g., <ol> or <ul>)
  $attributes = array(
    'id' => 'token_url_listing',
    'class' => 'token-url-listing',
  );

  // Load existing token URLs.
  $token_urls = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'auto_login_url_token')
    ->execute()
    ->fetchCol();

  if (isset($token_urls) && count($token_urls)) {
    $items = array();

    foreach ($token_urls as $token_url) {
      $token_url_entity = entity_metadata_wrapper('node', $token_url);


      $item = $token_url_entity->title->value() . ' -> ' . $token_url_entity->field_alu_token_url->value();
      $item = l($item, 'node/' . $token_url . '/edit', array('query' => array('destination' => 'admin/config/people/autologinurl/tokens')));
      $items[] = array(
        'data' => $item,
        'id' => $token_url,
      );
    }
    $list = theme('item_list',
      array(
        'items' => $items,
        'title' => $title,
        'type' => $type,
        'attributes' => $attributes,
      )
    );

    return $list;
  }
  else {
    return t('Token URLs list is empty.');
  }
}

/**
 * Implements hook_node_access().
 */
function auto_login_url_tokens_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ($type == 'auto_login_url_token') {
    if (user_access('administer auto login url', $account)) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_token_info().
 */
function auto_login_url_tokens_token_info() {

  // Add new tokens.
  $info = array();

  // Load existing token URLs.
  $token_urls = node_load_multiple(array(), array('type' => 'auto_login_url_token'));

  foreach ($token_urls as $token_url) {
    // Define token.
    $info['tokens']['user']['auto-login-url-tokens-' . $token_url->nid] = array(
      'name' => $token_url->title,
      'description' => t('Auto Login URL Token') . ': ' . $token_url->title,
    );
  }

  return $info;
}

/**
 * Implements hook_tokens().
 */
function auto_login_url_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'user') {
    $user = $data['user'];

    // Load existing token URLs.
    $token_urls = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'auto_login_url_token')
      ->execute()
      ->fetchCol();

    foreach ($token_urls as $token_url) {
      $token_url_entity = entity_metadata_wrapper('node', $token_url);
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'auto-login-url-tokens-' . $token_url:
            $url = str_replace('%uid', $user->uid, $token_url_entity->field_alu_token_url->value());
            $replacements[$original] = auto_login_url_create($user->uid, $url, TRUE);
            break;

        }
      }
    }
  }

  return $replacements;
}
