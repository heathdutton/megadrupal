<?php
/**
 * @file
 * Panels content type that can AJAX load/reload mini-panels.
 * */

/**
 * Implements hook_menu().
 */
function panels_mini_ajax_menu() {
  $items = array();
  $items['panels_mini_ajax/ajax/%'] = array(
    'access arguments' => array('access content'),
    'page callback' => '_panels_mini_ajax_render_mini_panel',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * @see hook_ctools_plugin_directory
 * */
function panels_mini_ajax_ctools_plugin_directory($owner, $plugin_type) {
  // file IO is expensive, only scan what we know we have
  $types = array('content_types');
  if ($owner == 'ctools' && in_array($plugin_type, $types)) {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_page_manager_variant_operations_alter().
 */
function panels_mini_ajax_page_manager_variant_operations_alter(&$operations, &$handler) {
  $operations['children']['panels_mini_ajax'] = array(
    'title' => t('AJAX Mini Panels'),
    'description' => t('Edit AJAX Mini Panel Settings'),
    'form' => 'panels_mini_ajax_variant_panels_mini_ajax_form',
  );
}

/**
 * Implements hook_ctools_render_alter().
 *
 * When a Page Manager page is rendered, set the breadcrumb
 */
function panels_mini_ajax_ctools_render_alter($info, $page, $context) {
  $conf = $context['handler']->conf;
  if (!isset($conf['panels_mini_ajax_enabled']) or !$conf['panels_mini_ajax_enabled']) {
    return;
  }
  drupal_add_js( drupal_get_path('module', 'panels_mini_ajax') . '/assets/js/panels_mini_ajax.js', 'file');
  drupal_add_js( array('panelsMiniAjax' => $conf['panels_mini_ajax_targets']), 'setting');
}

/**
 * Callback for operation form
 */
function panels_mini_ajax_variant_panels_mini_ajax_form($form, &$form_state) {
//  dpm(array($form, $form_state));
  $handler = $form_state['handler'];
//  dpm($handler);
  if (empty($handler->conf['panels_mini_ajax_enabled'])) {
    $handler->conf['panels_mini_ajax_enabled'] = '0';
  }
  if (empty($handler->conf['panels_mini_ajax_targets'])) {
    $handler->conf['panels_mini_ajax_targets'] = array();
  }

  $form['settings']['panels_mini_ajax_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable AJAX Panels mini'),
    '#default_value' => $handler->conf['panels_mini_ajax_enabled'],
  );

  $panel_minis = panels_mini_load_all();
  $options = array();
  foreach ($panel_minis as $panel_mini) {
    $options[$panel_mini->name] = $panel_mini->admin_title;
  }

  $form['settings']['panels_mini_ajax_targets'] = array(
    '#type' => 'select',
    '#title' => t('Mini-panels to AJAX reload'),
    '#options' => $options,
    '#multiple' => TRUE,
    '#default_value' => $handler->conf['panels_mini_ajax_targets'],
  );

  return $form;
}

/**
 * Form submit
 */
function panels_mini_ajax_variant_panels_mini_ajax_form_submit($form, &$form_state) {
  $form_state['handler']->conf['panels_mini_ajax_enabled'] = $form_state['values']['panels_mini_ajax_enabled'];
  $form_state['handler']->conf['panels_mini_ajax_targets'] = $form_state['values']['panels_mini_ajax_targets'];
}

/**
 * Callback that renders a mini panel.
 */
function _panels_mini_ajax_render_mini_panel($subtype) {
  ctools_include('context');
  $mini = panels_mini_load($subtype);
  if (!$mini) {
    return FALSE;
  }
  if (empty($mini) || !empty($mini->disabled)) {
    return;
  }
  $contexts = array();
  // Load up any contexts we might be using.
  $context = ctools_context_match_required_contexts($mini->requiredcontexts, $contexts);
  $mini->context = $mini->display->context = ctools_context_load_contexts($mini, FALSE, $context);

  if (empty($mini) || !empty($mini->disabled)) {
    return;
  }

  $mini->display->css_id = panels_mini_get_id($subtype);
  $mini->display->owner = $mini;
  // unique ID of this mini.
  $mini->display->owner->id = $mini->name;

  print panels_render_display($mini->display);
  drupal_exit();
}
