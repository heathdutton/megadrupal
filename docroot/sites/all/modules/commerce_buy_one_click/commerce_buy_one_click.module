<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_init().
 */
function commerce_buy_one_click_init() {
  if (!path_is_admin(current_path()) && arg(0) != 'ajax' && arg(1) != 'ajax' && (empty($_SERVER['HTTP_X_REQUESTED_WITH']) || strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) != 'xmlhttprequest')) {
    $path = drupal_get_path('module', 'commerce_buy_one_click');
    drupal_add_js($path . '/commerce_buy_one_click.js');
    drupal_add_js('misc/jquery.form.js');
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_js(array('commerce_buy_one_click' => array(
      'commerce_buy_one_click_respect_quantity_widget' => variable_get('commerce_buy_one_click_respect_quantity_widget', FALSE),
      'commerce_buy_one_click_quantity_input_selector' => variable_get('commerce_buy_one_click_quantity_input_selector', "input[name='quantity']"),
      )), array('type' => 'setting'));
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function commerce_buy_one_click_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  // Add one click button to product page.
  if (variable_get('commerce_buy_one_click_button_show', TRUE)) {
    $form['commerce_buy_one_click_button'] = array(
      '#type' => 'submit',
      '#value' => t('Buy now with 1-Click'),
      '#weight' => 51,
      '#prefix' => _commerce_buy_one_click_add_to_cart_form_prefix($form, $form_state),
      '#suffix' => '</div>',
      '#attributes' => array('class' => array('commerce-buy-one-click-button')),
    );
    
    // Disable 1-click button if product is out of stock.
    if (variable_get('commerce_buy_one_click_respect_stock_module', TRUE) && module_exists('commerce_stock')) {
      $qty = 1;
      if (!empty($form['quantity']['#default_value'])) {
        $qty = $form['quantity']['#default_value'];
      }
      $form['commerce_buy_one_click_button']['#disabled'] = !commerce_buy_one_click_stock_product_amount_possible_to_add($form['product_id']['#value'], $qty);
    }
  }
}

/**
 * Get html wrapper prefix for one click button.
 */
function _commerce_buy_one_click_add_to_cart_form_prefix($form, $form_state) {
  if (isset($form['product_id']['#value'])) {
    $product_id = $form['product_id']['#value'];
  }
  else {
    $product_id = $form['product_id']['#default_value'];
  }
  $prefix_html = '<div class="commerce-buy-one-click-button-wrapper">';
  $prefix_html .= '<div class="commerce-buy-one-click-button-product-id element-hidden">' . htmlspecialchars($product_id) . '</div>';
  $prefix_html .= '<div class="commerce-buy-one-click-button-add-product-to-cart element-hidden">1</div>';
  $prefix_html .= '<div class="commerce-buy-one-click-button-quantity element-hidden">1</div>';
  drupal_alter('commerce_buy_one_click_add_to_cart_form_prefix', $prefix_html, $form, $form_state);
  return $prefix_html;
}

/**
 * Implements hook_menu().
 */
function commerce_buy_one_click_menu() {
  $items['commerce_buy_one_click'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'commerce_buy_one_click',
    'access arguments' => array('access content'),
  );
  $items['admin/commerce/config/commerce_buy_one_click'] = array(
    'title' => 'Commerce Buy One Click Settings',
    'description' => 'Settings of "Buy now with 1-Click" button',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_buy_one_click_settings_form'),
    'file' => 'commerce_buy_one_click.admin.inc',
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Return popup with form.
 */
function commerce_buy_one_click() {
  $form_data = drupal_get_form('commerce_buy_one_click_form');
  $form = drupal_render($form_data);
  print $form;
  drupal_exit();
}

/**
 * Form builder.
 */
function commerce_buy_one_click_form($form, &$form_state) {
  $form = array();

  global $user;
  $user_name = '';
  $user_email = '';
  if ($user->uid) {
    $user_name = $user->name;
    $user_email = $user->mail;
  }

  $form['form_wrapper']  = array(
    '#tree' => FALSE,
    '#prefix' => '<div id="popup-info-box"></div>',
  );

  $form['form_wrapper']['commerce_buy_one_click_title'] = array(
    '#type' => 'markup',
    '#weight' => 10,
    '#markup' => '<h1 class="title">' . t('Buy now with 1-Click') . '</h1>',
  );
  
  // Disable 1-click button if product is out of stock.
  if (variable_get('commerce_buy_one_click_respect_stock_module', TRUE) && module_exists('commerce_stock')) {
    if (!commerce_buy_one_click_stock_product_amount_possible_to_add($_REQUEST['product_id'], $_REQUEST['quantity'])) {
      $product = commerce_product_load($_REQUEST['product_id']);
      $error_message = commerce_buy_one_click_stock_amount_error_message($product);
      $form['commerce_buy_one_click_error_text'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="messages error">' . $error_message . '</div>',
        '#weight' => 0,
      );
      $form['form_wrapper']['#type'] = 'hidden';
    }
  }

  if (variable_get('commerce_buy_one_click_name_show', TRUE)) {
    $form['form_wrapper']['commerce_buy_one_click_name'] = array(
      '#title' => t('Your name'),
      '#type' => 'textfield',
      '#weight' => 20,
      '#default_value' => $user_name,
    );
  }

  if (variable_get('commerce_buy_one_click_email_show', TRUE)) {
    $form['form_wrapper']['commerce_buy_one_click_email'] = array(
      '#title' => t('Your email'),
      '#type' => 'textfield',
      '#weight' => 30,
      '#default_value' => $user_email,
    );
    if (variable_get('commerce_buy_one_click_email_required', TRUE)) {
      $form['form_wrapper']['commerce_buy_one_click_email']['#required'] = TRUE;
    }
  }

  $form['form_wrapper']['commerce_buy_one_click_product_id'] = array(
    '#type' => 'value',
    '#value' => (string) htmlspecialchars($_REQUEST['product_id']),
  );

  $form['form_wrapper']['commerce_buy_one_click_add_product_to_cart'] = array(
    '#type' => 'value',
    '#value' => (string) htmlspecialchars($_REQUEST['add_product_to_cart']),
  );

  $form['form_wrapper']['commerce_buy_one_click_quantity'] = array(
    '#type' => 'value',
    '#value' => (string) htmlspecialchars($_REQUEST['quantity']),
  );

  drupal_alter('commerce_buy_one_click_form', $form);

  $form['form_wrapper']['submit'] = array(
    '#value' => t('Make an order'),
    '#type' => 'submit',
    '#weight' => 100,
    '#attributes' => array('class' => array('use-ajax-submit')),
  );

  return $form;
}

/**
 * Validate form.
 */
function commerce_buy_one_click_form_validate($form, &$form_state) {
  if (variable_get('commerce_buy_one_click_email_show', TRUE)) {
    if (strlen(trim($form_state['values']['commerce_buy_one_click_email'])) == 0 && variable_get('commerce_buy_one_click_email_required', TRUE)) {
      $errors = t('Email must not be empty.');
    }
    if (strlen(trim($form_state['values']['commerce_buy_one_click_email'])) != 0 && !filter_var($form_state['values']['commerce_buy_one_click_email'], FILTER_VALIDATE_EMAIL)) {
      $errors = t('Email validation error.');
    }
  }
  $product = commerce_product_load($form_state['values']['commerce_buy_one_click_product_id']);
  if (!$product && !empty($form_state['values']['commerce_buy_one_click_add_product_to_cart'])) {
    $errors = t('Error: add_product_to_cart option is enabled but product which shall be added to cart not specified.');
  }
  
  // Disable 1-click button if product is out of stock.
  if (variable_get('commerce_buy_one_click_respect_stock_module', TRUE) && module_exists('commerce_stock')) {
    if (!commerce_buy_one_click_stock_product_amount_possible_to_add($product->product_id, $form_state['values']['commerce_buy_one_click_quantity'])) {
      $errors = commerce_buy_one_click_stock_amount_error_message($product);
    }
  }

  drupal_alter('commerce_buy_one_click_form_validate', $errors, $form, $form_state);

  if (!empty($errors)) {
    $commands = array();
    $commands[] = ajax_command_replace(
      '#popup-info-box',
      '<div class="messages error">' . $errors . '</div>'
    );
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    drupal_exit();
  }
}

/**
 * Popup submit handler.
 */
function commerce_buy_one_click_form_submit($form, &$form_state) {
  // Collect initial data.
  global $user;
  $name = t('Buy one click');
  if (!empty($form_state['values']['commerce_buy_one_click_name'])) {
    $name = $form_state['values']['commerce_buy_one_click_name'];
  }
  $email = '';
  if (!empty($form_state['values']['commerce_buy_one_click_email'])) {
    $email = $form_state['values']['commerce_buy_one_click_email'];
  }
  $product_id = $form_state['values']['commerce_buy_one_click_product_id'];
  $add_product_to_cart = $form_state['values']['commerce_buy_one_click_add_product_to_cart'];
  $quantity = $form_state['values']['commerce_buy_one_click_quantity'];

  // Try to load user account by email, create account for anonymous user if necessary.
  $order_user = $user;
  if ($user->uid == 0 && !empty($email)) {
    $email_user = user_load_by_mail($email);
    if ($email_user) {
      $order_user = $email_user;
    }
    else {
      // Check if user name unique.
      $username = $email;
      $counter = 1;
      while ($name_user = user_load_by_name($username)) {
        $username = $email . ' ' . $counter;
      }
      $account = new stdClass();
      $account->is_new = TRUE;
      $account->name = $username;
      $account->pass = user_password();
      $account->mail = $email;
      $account->init = $email;
      $account->status = TRUE;
      $account->roles = array(DRUPAL_AUTHENTICATED_RID => TRUE);
      $account->timezone = variable_get('date_default_timezone', '');
      $order_user = user_save($account);
    }
  }

  // Load user order.
  $order = commerce_cart_order_load($user->uid);
  if (empty($order)) {
    $order = commerce_order_new($user->uid, 'cart');
    // Save the order to get its ID.
    commerce_order_save($order);
  }
  
  // Add product to cart of the user if necessary.
  if (!empty($add_product_to_cart)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $new_line_item = TRUE;
    foreach ($wrapper->commerce_line_items as $matching_line_item_wrapper) {
      if (!_commerce_buy_one_click_li_product_exists($matching_line_item_wrapper)) {
        continue;
      }
      
      if ($matching_line_item_wrapper->commerce_product->product_id->value() == $product_id) {
        $new_quantity = $matching_line_item_wrapper->quantity->value() + $quantity;
        $matching_line_item = $matching_line_item_wrapper->value();
        $matching_line_item->quantity = $new_quantity;
        $new_line_item = FALSE;
        commerce_line_item_save($matching_line_item);
        $product = $matching_line_item_wrapper->commerce_product->value();
        rules_invoke_all('commerce_cart_product_add', $order, $product, $quantity, $matching_line_item);
        break;
      }
    }
    if ($new_line_item) {
      $line_item = commerce_product_line_item_new(commerce_product_load($product_id), $quantity, $order->order_id);
      drupal_alter('commerce_product_calculate_sell_price_line_item', $line_item);
      rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
      commerce_line_item_save($line_item);
      $wrapper->commerce_line_items[] = $line_item;
      $product = commerce_product_load($product_id);
      rules_invoke_all('commerce_cart_product_add', $order, $product, $quantity, $line_item);
    }
  }

  // Fill order info of the user, change order status, save the order.
  if (!empty($email)) {
    $order->mail = $email;
  }
  else {
    $order->mail = variable_get('commerce_buy_one_click_default_empty_email', "example@example.com");
  }
  
  $order->status = 'pending';
  $order->uid = $order_user->uid;
  drupal_alter('commerce_buy_one_click_form_submit', $order, $order_user, $form, $form_state);
  commerce_order_save($order);
  if (module_exists('commerce_discount')) {
    rules_invoke_all('commerce_discount_order', $order);
  }

  // Send message to admin if necessary.
  if (variable_get('commerce_buy_one_click_send_admin_email', TRUE)) {
    $admin_email = variable_get('commerce_buy_one_click_admin_email_address', '');
    $admin_email_data = array(
    'commerce-order' => $order,
    'commerce_buy_one_click' => array(
      'commerce-buy-one-click-name' => $name,
      'commerce-buy-one-click-email' => $email,
    ),
    );
    drupal_alter('commerce_buy_one_click_admin_email_data', $admin_email_data, $form, $form_state);
    drupal_mail('commerce_buy_one_click', 'commerce_buy_one_click_admin_mail', $admin_email, language_default(), $admin_email_data);
  }

  // Invoke "Completing the checkout process" rules event.
  rules_invoke_all('commerce_checkout_complete', $order);
  
  // Invoke custom rules events.
  $order_completed_rules_args = array('commerce_buy_one_click_order_completed', $order, $name, $email);
  drupal_alter('commerce_buy_one_click_order_completed_rules_args', $order_completed_rules_args);
  call_user_func_array("rules_invoke_event", $order_completed_rules_args);

  // Show final popup message.
  $final_message = t('Your order was successfully created.') . '<br/>';
  $final_message .= t('The order number is') . ' <strong>' . $order->order_id . '</strong>.' . '<br/>';
  $final_message .= t('Our manager will contact you shortly.');
  drupal_alter('commerce_buy_one_click_order_completed_final_message', $final_message, $order, $order_user, $form_state);
  $form_state['rebuild'] = TRUE;
  $commands = array();
  $commands[] = ajax_command_replace(
    '#commerce-buy-one-click-form',
    '<div class="messages status">' . $final_message . '</div>'
  );
  $commands[] = ajax_command_invoke(NULL, "commerceBuyOneClickOrderCompletedCallback", array($order, $name, $email));
  ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  drupal_exit();
}

/**
 * Implements hook_rules_event_info().
 */
function commerce_buy_one_click_rules_event_info() {
  $items = array(
    'commerce_buy_one_click_order_completed' => array(
      'label' => t('After 1-click order is completed'),
      'group' => t('Commerce Buy One Click'),
      'variables' => array(
		'order' => array(
		  'type' => 'commerce_order',
		  'label' => t('Commerce order'),
		),
		'user_name' => array(
		  'type' => 'text',
		  'label' => t('User name from 1-click form'),
		),
		'user_email' => array(
		  'type' => 'text',
		  'label' => t('User email from 1-click form'),
		),
      ),
    ),
  );
  return $items;
}

/**
 * Implements hook_mail().
 */
function commerce_buy_one_click_mail($key, &$message, $params) {
  switch ($key) {
    case 'commerce_buy_one_click_admin_mail':
      $subject = variable_get('commerce_buy_one_click_admin_email_title', '[site:name]. "Buy with 1-Click" order [commerce-order:order-number].');
      $admin_mail_body = variable_get('commerce_buy_one_click_admin_email_body', _commerce_buy_one_click_settings_get_default_admin_email_body());
      $message['subject'] = token_replace($subject, $params);
      $message['body'][] = token_replace($admin_mail_body, $params);
      break;

    default:
      break;
  }
}

/**
 * Check if line item has commerce_product field.
 */
function _commerce_buy_one_click_li_product_exists($line_item_wrapper) {
  if (!$line_item_wrapper->__isset('commerce_product') || !$line_item_wrapper->commerce_product->__isset('commerce_price')) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_tokens().
 */
function commerce_buy_one_click_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'commerce-order') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'commerce-buy-one-click-items':
          $order_items_result = '';
          $order = $data['commerce-order'];
          $wrapper = entity_metadata_wrapper('commerce_order', $order);
          foreach ($wrapper->commerce_line_items as $line_item_wrapper) {
            if (!_commerce_buy_one_click_li_product_exists($line_item_wrapper)) {
              continue;
            }
            
            // Calculate product price.
            $price = $line_item_wrapper->commerce_product->commerce_price->value();
            $price_display = commerce_currency_format($price['amount'], $price['currency_code'], $line_item_wrapper->commerce_product->value());

            // Add data to token result.
            $order_items_result .= t('SKU') . ': ' . $line_item_wrapper->commerce_product->sku->value() . PHP_EOL;
            $order_items_result .= t('Title') . ': ' . $line_item_wrapper->commerce_product->title->value() . PHP_EOL;
            $order_items_result .= t('Price (of one item)') . ': ' . $price_display . PHP_EOL;
            $order_items_result .= t('Quantity') . ': ' . $line_item_wrapper->quantity->value() . PHP_EOL;
            $order_items_result .= '===' . PHP_EOL;
          }
          $order_items_result = trim($order_items_result, '=' . PHP_EOL);
          $replacements[$original] = $order_items_result;
          break;
      }
      if (isset($data['commerce_buy_one_click'][$name])) {
        $replacements[$original] = $data['commerce_buy_one_click'][$name];
      }
    }
  }
  return $replacements;
}

/**
 * Get default body of email sent to admin when new fast order created.
 */
function _commerce_buy_one_click_settings_get_default_admin_email_body() {
  $admin_mail_body_default_text = '<p>New buy with 1-Click order on [site:name].</p>' . PHP_EOL;
  $admin_mail_body_default_text .= '<p>' . PHP_EOL;
  $admin_mail_body_default_text .= '<strong>User name:</strong> [commerce-order:commerce-buy-one-click-name]<br />' . PHP_EOL;
  $admin_mail_body_default_text .= '<strong>User email:</strong>  [commerce-order:commerce-buy-one-click-email]<br />' . PHP_EOL;
  $admin_mail_body_default_text .= '</p>' . PHP_EOL;
  $admin_mail_body_default_text .= '<p>Ordered products:</p>' . PHP_EOL;
  $admin_mail_body_default_text .= '[commerce-order:commerce-buy-one-click-items]<br />' . PHP_EOL;
  return $admin_mail_body_default_text;
}

/**
 * Get quantity of specific product on cart of current user.
 */
function commerce_buy_one_click_get_product_current_cart_quantity($product_id) {
  $qty_current = 0;
  global $user;
  $order = commerce_cart_order_load($user->uid);
  if (!empty($order)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach ($wrapper->commerce_line_items as $li_wrapper) {
      if (!_commerce_buy_one_click_li_product_exists($li_wrapper)) {
        continue;
      }
      
      if ($li_wrapper->commerce_product->product_id->value() == $product_id) {
        $qty_current = $li_wrapper->quantity->value();
        break;
      }
    }
  }
  return $qty_current;
}

/**
 * Check is it possible to add specific amount of specific product to cart of current user.
 */
function commerce_buy_one_click_stock_product_amount_possible_to_add($product_id, $qty_to_add) {
  if (!module_exists('commerce_stock')) {
    return TRUE;
  }
  $qty_current = commerce_buy_one_click_get_product_current_cart_quantity($product_id);
  $product = commerce_product_load($product_id);
  commerce_stock_check_product_rule($product, $qty_current, $qty_to_add, $stock_state, $message);
  if ($stock_state != 1) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Get error message which is shown when it is not possible to order such amount
 * of specific product with 1-click button.
 */
function commerce_buy_one_click_stock_amount_error_message($product) {
  $error_message = t('The maximum quantity for') . ' [commerce-product:title] ' . t('that can be ordered is') . ' [commerce-product:commerce-stock-int]' . '.<br/>';
  $error_message .= t('Exit this window and change amount of [commerce-product:title] you want to order.');
  return token_replace($error_message, array('commerce-product' => $product));
}