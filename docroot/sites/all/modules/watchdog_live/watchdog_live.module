<?php

/**
 *  @file
 *  Adds auto update functionality to the watchdog table.
 */

/**
 * Implements hook_menu().
 */
function watchdog_live_menu() {
  $items = array();
  $items['admin/logs/watchdog/live/callback'] = array(
    'page callback' => 'watchdog_live_callback',
    'access arguments' => array('access site reports'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/logs/watchdog/live/settings'] = array(
    'page callback' => 'watchdog_live_settings',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function watchdog_live_help($path, $arg) {
  switch ($path) {
    case 'admin/help#watchdog_live':
      $module_path = drupal_get_path('module', 'watchdog_live');
      drupal_add_css($module_path . '/watchdog_live.css');
      $if_bt_exists = module_exists('beautytips');
      $if_file_bt_js = is_file($module_path . '/bt/jquery.bt.min.js');
      $if_file_hover_js = is_file($module_path . '/bt/jquery.hoverIntent.minified.js');
      $if_file_bt_css = is_file($module_path . '/bt/jquery.bt.css');

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Wathcdog Live module enables auto-update functionality on the watchdog table. For more information, see the online project page of <a href="@watchdog">Watchdog Live</a>.', array('@watchdog' => url('http://drupal.org/project/watchdog_live'))) . '</p>';
      $output .= '<h3>' . t('Optional features') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Tooltips') . '</dt>';
      $output .= '<dd>' . t('When hovering over a log entry, a tooltip displays its content without leaving the log overview page. The feature is automatically enabled, if the corresponding soft dependecies are fulfilled.') . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Soft dependencies') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Tooltips feature (BeautyTips Module OR jQuery Plugin required)') . '</dt>';
      $output .= '<dd>';
      if ($if_bt_exists || ($if_file_bt_css && $if_file_bt_js && $if_file_hover_js)) {
        $output .= '<strong class="green">';
        $output .= t('ENABLED');
      }
      else {
        $output .= '<strong class="red">';
        $output .= t('DISABLED');
      }
      $output .= '</strong>';
      $output .= '<ul>';

      $output .= '<li>' . t('<a href="@bt_module">BeautyTips Module</a>', array('@bt_module' => url('http://drupal.org/project/beautytips'))) . ' - ';
      if ($if_bt_exists) {
        $output .= '<strong class="green">';
        $output .= t('enabled');
      }
      else {
        if ($if_file_bt_css && $if_file_bt_js && $if_file_hover_js) {
          $output .= '<strong class="gray">';
          $output .= t('BeautyTips jQuery plugin is available');
        }
        else {
          $output .= '<strong class="red">';
          $output .= t('not installed and/or disabled');
        }
      }
      $output .= '</strong>';
      $output .= '</li>';

      $output .= '<li>' . t('<a href="@bt_plugin">BeautyTips and HoverIntent jQuery Plugin</a>', array('@bt_plugin' => url('http://www.lullabot.com/files/bt/bt-latest/DEMO/index.html'))) . ' - ';
      if ($if_bt_exists) {
        $output .= '<strong class="gray">';
        $output .= t('BeautyTips Module is installed');
      }
      else {
        if ($if_file_bt_css && $if_file_bt_js && $if_file_hover_js) {
          $output .= '<strong class="green">';
          $output .= t('all required files are available');
        }
        else {
          $output .= '<strong class="red">';
          $output .= t('some required files are missing');
        }
      }

      $output .= '</strong>';
      $output .= '<ul>';
      $output .= '<li>' . '<strong>/bt/jquery.bt.min.js</strong>' . ' - ';
      if ($if_bt_exists) {
        $output .= '<strong class="gray">';
        $output .= t('not needed');
      }
      else {
        if ($if_file_bt_js) {
          $output .= '<strong class="green">';
          $output .= t('available');
        }
        else {
          $output .= '<strong class="red">';
          $output .= t('missing');
        }
      }
      $output .= '</strong>';
      $output .= '</li>';
      $output .= '<li>' . '<strong>/bt/jquery.hoverIntent.minified.js</strong>' . ' - ';
      if ($if_bt_exists) {
        $output .= '<strong class="gray">';
        $output .= t('not needed');
      }
      else {
        if ($if_file_hover_js) {
          $output .= '<strong class="green">';
          $output .= t('available');
        }
        else {
          $output .= '<strong class="red">';
          $output .= t('missing');
        }
      }
      $output .= '</strong>';
      $output .= '</li>';
      $output .= '<li>' . '<strong>/bt/jquery.bt.css</strong>' . ' - ';
      if ($if_bt_exists) {
        $output .= '<strong class="gray">';
        $output .= t('not needed');
      }
      else {
        if ($if_file_bt_css) {
          $output .= '<strong class="green">';
          $output .= t('available');
        }
        else {
          $output .= '<strong class="red">';
          $output .= t('missing');
        }
      }
      $output .= '</strong>';
      $output .= '</li>';
      $output .= '</ul>';
      $output .= '</li>';

      $output .= '</ul>';
      $output .= '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function watchdog_live_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'dblog_filter_form' && empty($_GET['page'])) {

    $if_bt_exists = module_exists('beautytips');

    // Include needed JavaScript.
    $path = array(
      'callback_url' => url('admin/logs/watchdog/live/callback'),
      'setting_url' => url('admin/logs/watchdog/live/settings'),
      'beautytips_module' => $if_bt_exists
    );

    $module_path = drupal_get_path('module', 'watchdog_live');

    drupal_add_js(array('watchdogLive' => $path), array('type' => 'setting', 'scope' => JS_DEFAULT));
    drupal_add_js($module_path . '/watchdog_live.js');

    if (!$if_bt_exists) {
      if (is_file($module_path . '/bt/jquery.bt.min.js')
          && is_file($module_path . '/bt/jquery.hoverIntent.minified.js')
          && is_file($module_path . '/bt/jquery.bt.css')) {
        drupal_add_js($module_path . '/bt/jquery.bt.min.js');
        drupal_add_js($module_path . '/bt/jquery.hoverIntent.minified.js');
        drupal_add_css($module_path . '/bt/jquery.bt.css');
      }
    }
    else {
      $options['bt_drupal_watchdoglive'] = array(
        'cssSelect' => 'table#admin-dblog tr a:not([class])',
        'ajaxPath' => array("$(this).attr('href')", 'table.dblog-event'),
        'ajaxCache' => FALSE,
        'trigger' => 'hover',
        'width' => 'auto',
        'fill' => '#F7F7F7',
        'strokeStyle' => '#B7B7B7',
        'spikeLength' => 10,
        'spikeGirth' => 10,
        'padding' => 8,
        'windowMargin' => 70,
        'cornerRadius' => 0,
        'positions' => array('top', 'bottom')
      );
      beautytips_add_beautytips($options);
    }

    // Keep record of the newest log they have seen.
    $_SESSION['watchdog_live_latest_wid'] = watchdog_live_latest_wid();
    $intervals = drupal_map_assoc(array(0, 500, 1000, 2000, 3000, 5000, 10000), create_function('$a', 'return $a/1000 . " ' . t('seconds') . '";'));

    // Add configurable options right on the watchdog page so we can update instantly.. just for kicks.
    $form['watchdog_live'] = array(
      '#type' => 'fieldset',
      '#title' => t('Live settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 0,
      '#tree' => TRUE);
    $form['watchdog_live']['interval'] = array(
      '#type' => 'select',
      '#title' => t('Update interval'),
      '#options' => $intervals,
      '#default_value' => (isset($_SESSION['watchdog_live_interval']) ? $_SESSION['watchdog_live_interval'] : 2000)
    );
    $form['watchdog_live']['disabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable'),
      '#default_value' => (isset($_SESSION['watchdog_live_disabled']) ? $_SESSION['watchdog_live_disabled'] : FALSE)
    );
  }
}

/**
 * Callback used to retrieve the updated table.
 */
function watchdog_live_callback() {

  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'dblog') . '/dblog.admin.inc';

  // Make sure we need to update the table.
  $latest_wid = watchdog_live_latest_wid();
  if ($_SESSION['watchdog_live_latest_wid'] < $latest_wid) {
    $_SESSION['watchdog_live_latest_wid'] = $latest_wid;

    $output['content'] = dblog_overview();

    $output['content']['dblog_clear_log_form'] = '';
    $output['content']['dblog_filter_form'] = '';

    $output['content'] = drupal_render($output['content']);

    // Fix url.
    $output['content'] = preg_replace('#admin/logs/watchdog/live/callback#', 'admin/reports/dblog', $output['content']);
  }
  else {
    $output['error'] = TRUE;
  }

  print drupal_json_encode($output);
  drupal_exit();
}

/**
 * Update the interval time.
 */
function watchdog_live_settings() {
  // Handle interval.
  if (isset($_POST['interval']) && intval($_POST['interval'])) {
    $_SESSION['watchdog_live_interval'] = $_POST['interval'];
  }

  // Allow users to turn off live updating for a session.
  if (isset($_POST['disabled'])) {
    if ($_POST['disabled'] === 'true') {
      $_SESSION['watchdog_live_disabled'] = TRUE;
    }
    elseif ($_POST['disabled'] === 'false') {
      $_SESSION['watchdog_live_disabled'] = FALSE;
    }
  }

  // Give it something.
  return;
}

/**
 * Latest id value in the watchdog table.
 */
function watchdog_live_latest_wid() {
  return db_query_range("SELECT wid FROM {watchdog} ORDER BY wid DESC", 0, 1)->fetchField();
}