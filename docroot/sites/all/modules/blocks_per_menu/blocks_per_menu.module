<?php

/**
 * @file
 * This module extends the block visibility interface in Drupal 7.
 *
 * It allows the user to control block visibility based on the menu links.
 */

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds menu link specific visibility options to add block form.
 *
 * @see block_add_block_form()
 */
function blocks_per_menu_form_block_add_block_form_alter(&$form, &$form_state, $form_id) {
  blocks_per_menu_form_block_admin_configure_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds menu link specific visibility options to add block form.
 *
 * @see block_admin_configure()
 */
function blocks_per_menu_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['module']['#value']) && $form['module']['#value'] != 'menu_block') {
    $menu_options = menu_get_menus();
    $parent = array();
    $child = array();
    if (!empty($form_state['values']['menu_options'])) {
      foreach ($form_state['values']['menu_options'] as $value) {
        if ($value != '0') {
          $parent[$value] = $value;
        }
      }
    }
    else {
      $menu_option_default = db_select('blocks_per_menu', 'bpm')
        ->condition('bpm.module', $form['module']['#value'], '=')
        ->condition('bpm.delta', $form['delta']['#value'], '=')
        ->fields('bpm', array('menu_name', 'mlid'))
        ->execute()
        ->fetchAll();
      foreach ($menu_option_default as $value) {
        if (!in_array($value->menu_name, $parent)) {
          $parent[$value->menu_name] = $value->menu_name;
        }
        $child[] = $value->menu_name . ':' . $value->mlid;
      }
    }
    $form['visibility']['#attached']['js'][] = drupal_get_path('module', 'blocks_per_menu') . '/blocks_per_menu.js';
    $form['visibility']['menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menus'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 10,
      '#group' => 'additional_settings',
      '#description' => t('If a parent menu is selected and no child items are selected, then the restriction is applied to all the child menu links.'),
    );
    $form['visibility']['menu']['menu_options'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Available parent menus'),
      '#default_value' => $parent,
      '#options' => $menu_options,
      '#description' => t('Show this block only on selected menu links.'),
      '#ajax' => array(
        'callback' => 'blocks_per_menu_rebuild_child_menu',
        'wrapper' => 'menu-child-wrapper',
      ),
    );
    $form['visibility']['menu']['menu_child'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Child menu item'),
      '#default_value' => $child,
      '#options' => blocks_per_menu_get_child_menus($parent),
      '#prefix' => '<div id ="menu-child-wrapper">',
      '#suffix' => '</div>',
      '#description' => t('Choose the menu items in which block needs to be displayed.'),
    );
    $form['#submit'][] = 'blocks_per_menu_form_block_admin_configure_submit';
  }
}

/**
 * AJAX callback to rebuild child menu links.
 */
function blocks_per_menu_rebuild_child_menu($form, &$form_state) {
  return $form['visibility']['menu']['menu_child'];
}

/**
 * Returns the child menu links based on the parent selected.
 */
function blocks_per_menu_get_child_menus($parent) {
  if (empty($parent)) {
    return array();
  }
  else {
    $options = _menu_get_options(menu_get_menus(), $parent, array('mlid' => 0));
    foreach ($options as $key => $value) {
      $key_explode = explode(':', $key);
      if ($key_explode['1'] != '0') {
        $build_checkboxes[$key] = str_replace('-', '', $value);
      }
    }
    return $build_checkboxes;
  }
}

/**
 * Form submit handler for block configuration form.
 *
 * @see blocks_per_menu_form_block_admin_configure_alter()
 */
function blocks_per_menu_form_block_admin_configure_submit($form, &$form_state) {
  $parent_menu = array();
  $child_menu = array();
  foreach ($form_state['values']['menu_options'] as $key => $value) {
    if ($value != '0') {
      $parent_menu[$key] = $value;
    }
  }
  foreach ($form_state['values']['menu_child'] as $key => $value) {
    if ($value != '0') {
      $child_menu[$key] = $value;
    }
  }
  if (!empty($parent_menu) && empty($child_menu)) {
    foreach ($form_state['values']['menu_child'] as $key => $value) {
      $child_menu[$key] = $key;
    }
  }
  db_delete('blocks_per_menu')
    ->condition('module', $form_state['values']['module'])
    ->condition('delta', $form_state['values']['delta'])
    ->execute();
  if (!empty($child_menu)) {
    $query = db_insert('blocks_per_menu')
      ->fields(array('mlid', 'menu_name', 'module', 'delta'));
    foreach ($child_menu as $value) {
      $menu = explode(':', $value);
      $query->values(array(
        'mlid' => is_numeric($menu['1']) ? $menu['1'] : '0',
        'menu_name' => $menu['0'],
        'module' => $form_state['values']['module'],
        'delta' => $form_state['values']['delta'],
      ));
    }
    $query->execute();
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds node specific submit handler to delete custom block form.
 *
 * @see block_custom_block_delete()
 */
function blocks_per_menu_form_block_custom_block_delete_alter(&$form, &$form_state) {
  $form['#submit'][] = 'blocks_per_menu_form_block_custom_block_delete_submit';
}

/**
 * Submit handler for blocks_per_menu_form_block_custom_block_delete_alter().
 */
function blocks_per_menu_form_block_custom_block_delete_submit($form, &$form_state) {
  db_delete('blocks_per_menu')
    ->condition('module', 'block')
    ->condition('delta', $form_state['values']['bid'])
    ->execute();
}

/**
 * Implements hook_block_list_alter().
 */
function blocks_per_menu_block_list_alter(&$blocks) {
  global $theme_key;
  $current_menu_trail = menu_get_active_trail();
  $active_menu = end($current_menu_trail);
  $menu_option_default = db_select('blocks_per_menu', 'bpm')
    ->fields('bpm', array('mlid', 'module', 'delta'))
    ->execute()
    ->fetchAll();
  foreach ($menu_option_default as $blck) {
    $blocks_menu[$blck->module][$blck->delta][$blck->mlid] = TRUE;
  }
  foreach ($blocks as $key => $block) {
    if (!isset($block->theme) || !isset($block->status) || $block->theme != $theme_key || $block->status != 1) {
      // This block was added by a contrib module, leave it in the list.
      continue;
    }
    if (isset($blocks_menu[$block->module][$block->delta]) && isset($active_menu['mlid'])) {
      if (!isset($blocks_menu[$block->module][$block->delta][$active_menu['mlid']])) {
        unset($blocks[$key]);
        continue;
      }
    }
  }
}
