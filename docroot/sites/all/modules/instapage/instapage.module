<?php

define('INSTAPAGE_ENDPOINT', 'http://app.myinstapage.com');
define('INSTAPAGE_VERSION', '1.6.6');

/**
 * Implements hook_permission().
 */
function instapage_permission() {
  return array(
    'administer instapage settings' => array(
      'title' => t('Administer Instapage settings'),
      'description' => t('Allow users to administer Instapage settings.'),
    ),
    'administer instapage landing pages' => array(
      'title' => t('Administer Instapage'),
      'description' => t('Allow users to administer Instapage landing pages.'),
    ),
    'access instapage landing pages' => array(
      'title' => t('Access Instapage landing pages'),
      'description' => t('Allow users to access Instapage landing pages.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function instapage_menu() {
  $items = array();

  $items['admin/config/services/instapage'] = array(
    'title' => 'Instapage',
    'description' => 'Administer Instapage settings.',
    'access arguments' => array('administer instapage settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instapage_admin_settings_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/instapage'] = array(
    'title' => 'Instapage landing pages',
    'description' => 'Manage Instapage landing pages.',
    'access arguments' => array('administer instapage landing pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instapage_pages_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implement hook_menu_alter().
 */
function instapage_menu_alter(&$callbacks) {
  $pages = variable_get('instapage_pages', NULL);

  if (!empty($pages)) {
    foreach ($pages as $instapage_id => $path) {
      $callbacks[$path] = array(
        'title' => 'Title',
        'access arguments' => array('access instapage landing pages'),
        'page callback' => 'instapage_page_callback',
        'page arguments' => array((string)$instapage_id),
        'type' => MENU_CALLBACK,
      );
    }
  }
}

/**
 * Page callback.
 */
function instapage_page_callback($instapage_page_id) {
  $url = INSTAPAGE_ENDPOINT .'/server/view-by-id/'. $instapage_page_id;
  $result = drupal_http_request($url);
  print $result->data;
}

/**
 * Form to edit Instapage pages.
 */
function instapage_admin_settings_form($form_state) {
  $form = array();

  $instapage_user_id = variable_get('instapage_user_id', false);
  $plugin_hash = variable_get('instapage_plugin_hash', false);

  if ($instapage_user_id && $plugin_hash) {
    $data = array(
      'id' => $instapage_user_id,
      'plugin_hash' => $plugin_hash,
    );
    $result = instapage_api_call('get-user', $data, 'GET');

    if ( isset( $result->error ) && $result->error == 1 ) {
      form_set_error('form', t('Error from Instapage API: @instapage_msg', array('@instapage_msg' => $result->error_message)));

      // Clear variables on form error to match the initial state.
      variable_set('instapage_user_id', false);
      variable_set('instapage_plugin_hash', false);

      $form['instapage_user_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#required' => TRUE,
      );

      $form['instapage_user_password'] = array(
        '#type' => 'password',
        '#title' => t('Password'),
        '#required' => TRUE,
      );
      $form['#validate'][] = 'instapage_admin_settings_form_login_validate';
      $form['#submit'][] = 'instapage_admin_settings_form_login_submit';
      $form['actions']['#type'] = 'actions';
      $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));
      return $form;
    }

    $form['info']['#markup'] = t('You are logged in as @user.', array('@user' => $result->user));
    $form['info']['#markup'] .= '<p>' . t('Administer your pages <a href="@link">here</a>.', array('@link' => url('admin/structure/instapage'))) . '</p>';
    $form['#submit'][] = 'instapage_admin_settings_form_disconnect_submit';
    $form['actions']['#type'] = 'actions';
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Disconnect'));
  }
  else {
    $form['instapage_user_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#required' => TRUE,
    );

    $form['instapage_user_password'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#required' => TRUE,
    );
    $form['#validate'][] = 'instapage_admin_settings_form_login_validate';
    $form['#submit'][] = 'instapage_admin_settings_form_login_submit';
    $form['actions']['#type'] = 'actions';
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));
  }

  return $form;
}

/**
 * Validate Instapage username and password.
 */
function instapage_admin_settings_form_login_validate($form, &$form_state) {
  $data = array(
    'email' => base64_encode(trim($form_state['values']['instapage_user_email'])),
    'password' => base64_encode(trim($form_state['values']['instapage_user_password'])),
  );
  $result = instapage_api_call('user-login', $data);

  if ($result) {
    if (isset($result->success)) {
      $validate_results = array();
      $validate_results['user_id'] = $result->data->user_id;
      $validate_results['plugin_hash'] = $result->data->plugin_hash;
      $form_state['values']['validate_results'] = $validate_results;
    }
    else {
      if (isset($result->error) && $result->error == true) {
        form_set_error('form', t('Error from Instapage API: @instapage_msg', array('@instapage_msg' => $result->error_message)));
      }
      else {
        form_set_error('form', $result->error_message);
      }
    }

  }
}

/**
 * Disconnect Instapage user account.
 */
function instapage_admin_settings_form_disconnect_submit($form, &$form_state) {
  variable_set('instapage_user_id', false);
  variable_set('instapage_plugin_hash', false);
}

/**
 * Save the User ID and Plugin hash
 */
function instapage_admin_settings_form_login_submit($form, &$form_state) {
  if (isset($form_state['values']['validate_results'])) {
    variable_set('instapage_user_id', $form_state['values']['validate_results']['user_id']);
    variable_set('instapage_plugin_hash', $form_state['values']['validate_results']['plugin_hash']);
  }
}

/**
 * Form for setting up Instapage account.
 */
function instapage_pages_form($form_state) {
  global $base_url;

  $form = array();

  $instapage_user_id = variable_get('instapage_user_id', false);
  $plugin_hash = variable_get('instapage_plugin_hash', false);

  if (!$instapage_user_id && !$plugin_hash) {
    $form['notice']['#markup'] = '<p>' . t('You don\'t have the Instapage account setup yet.') . '</p>';
    $form['notice']['#markup'] .= '<p>' . t('Please connect your account <a href="@link">here</a>.', array('@link' => url('admin/config/services/instapage'))) . '</p>';
    return $form;
  }

  $data = array(
    'user_id' => $instapage_user_id,
    'plugin_hash' => $plugin_hash,
  );
  $result = instapage_api_call('my-pages/drupal', $data);

  if (isset($result->success)) {
    if (empty($result->data->pages)){
      $form['#prefix'] = '<p>' . t('The list of pages is empty. Add a page on Instapage first.') . '</p>';
    }
    else {
      $form['#prefix'] = '<p>' . t('This is the list of all pages on Instapage. Type the path on which you want to show Instapage page.') . '</p>';
      $form['#prefix'] .= '<p>' . t('If you want to show Instapage as a front page, choose a path (for example: front) and then change default front page path <a href="@link">here</a>.', array('@link' => url('admin/config/system/site-information'))) . '</p>';
      $pages = variable_get('instapage_pages', array());
      $form['instapage_pages'] = array(
        '#tree' => TRUE
      );
      foreach ($result->data->pages as $page) {
        $page_url = explode( '/', $page->url );
        if ( isset( $page_url[1] ) && strpos( $page->url, 'server/view-by-id' ) === false ) {
          $page_url = $page_url[1];
        } else {
          $page_url = '';
        }
        $form['instapage_pages'][$page->id] = array(
          '#type' => 'textfield',
          '#title' => $page->title,
          '#field_prefix' => $base_url . '/',
          '#default_value' => isset($pages[$page->id]) ? $pages[$page->id] : $page_url,
        );
      }
      $form['actions']['#type'] = 'actions';
      $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
    }
  }

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

/**
 * Checks if URLs are avaliable.
 */
function instapage_pages_form_validate($form, &$form_state) {
  if (isset($form_state['values']['instapage_pages'])) {
    $paths = array();
    $pages = variable_get('instapage_pages', NULL);
    foreach ($form_state['values']['instapage_pages'] as $instapage_id => $path) {
      $error_field_name = 'instapage_pages][' . $instapage_id;
      $menu_item = menu_get_item($path);
      if ($menu_item && !in_array($path, $pages)) {
        form_set_error($error_field_name, t('The path @path is already used.', array('@path' => $path)));
      }
      if (in_array($path, $paths)) {
        if ($path != ''){
          form_set_error($error_field_name, t('Path @path is not unique on the list.', array('@path' => $path)));
        }
      }
      $paths[] = $path;
    }
  }
  else {
    form_set_error('form', t('Values are missing.'));
  }
}

/**
 * Saves Instapage entries to a variable.
 */
function instapage_pages_form_submit($form, &$form_state) {
  $pages = array();
  if (isset($form_state['values']['instapage_pages'])) {
    foreach ($form_state['values']['instapage_pages'] as $instapage_id => $path) {
      if ($path != '') {
        $pages[$instapage_id] = $path;

        // Let Instapage know about the path.
        $instapage_user_id = variable_get('instapage_user_id', false);
        $plugin_hash = variable_get('instapage_plugin_hash', false);
        global $base_url;
        $url = $base_url . '/' . $path;

        $data = array(
          'user_id' => $instapage_user_id,
          'plugin_hash' => $plugin_hash,
          'page_id' => $instapage_id,
          'url' => str_replace('http://', '', $url)
        );
        
        instapage_api_call('update-page', $data);
      }
    }
  }
  variable_set('instapage_pages', $pages);
  menu_rebuild();
  drupal_set_message(t('All pages have been saved.'));
}

/**
 * Instapage API call.
 */
function instapage_api_call($service, $data, $method = 'POST') {
  $url = INSTAPAGE_ENDPOINT .'/ajax/services/' . $service . '/';

  if ($method == 'GET' && !empty( $data )) {
    foreach($data as $param_key => $param_value) {
      $params[] = $param_key . '=' . $param_value;
    }

    if (!empty( $params )) {
      $url .= '?' . implode( '&', $params );
    }
  }

  $request_body = array(
    'service-type' => 'Drupal',
    'service' => $_SERVER['SERVER_NAME'],
    'version' => INSTAPAGE_VERSION,
    'user_id' => variable_get('instapage_user_id', false),
    'data' => $data,
  );

  $data_query = http_build_query($request_body, null, '&');
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL,$url);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data_query);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $server_output = curl_exec($ch);
  curl_close ($ch);

  if ($server_output) {
    return json_decode($server_output);
  }
  else {
    return false;
  }
}