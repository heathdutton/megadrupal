<?php

/**
 * @file
 * Definition of ViewsHandlerFilterDateTest.
 */

/**
 * Tests the core views_handler_filter_date handler.
 */
class RoomsViewsTest extends DrupalWebTestCase {

  /**
   * @var array
   *   Array containing some random units for testing purposes.
   */
  public $units;

  public static function getInfo() {
    return array(
      'name' => 'Rooms Views Basic tests',
      'description' => 'Test the core Rooms Views features.',
      'group' => 'Rooms Views',
    );
  }

  function setUp() {
    variable_set('rooms_price_calculation', ROOMS_PER_NIGHT);
    parent::setUp('rooms_views');
    views_include_handlers(TRUE);
    registry_rebuild();
    drupal_flush_all_caches();
    views_fetch_data(NULL, TRUE, TRUE);

    // Add some basic bookable units.
    $this->createRandomUnits();
  }

  /**
   * Tests generic filter behavior.
   */
  function testNonExposedFilter() {
    $count = count($this->units);
    $this->assertBookableUnitsCount($count);

    foreach ($this->units as $index => $unit) {
      $event = new BookingEvent($unit->unit_id, ROOMS_ANON_BOOKED, new Datetime('2016-10-01'), New DateTime('2016-11-01'));
      $uc = new UnitCalendar($unit->unit_id);
      $uc->updateCalendar(array($event));
      $count--;
      $this->assertBookableUnitsCount($count);
    }
  }

  /**
   * Tests filter behavior using exposed filter.
   */
  function testExposedFilter() {
    $count = count($this->units);
    $this->assertBookableUnitsCount($count);

    foreach ($this->units as $index => $unit) {
      $event = new BookingEvent($unit->unit_id, ROOMS_ANON_BOOKED, new Datetime('2016-' . $unit->unit_id . '-01'), New DateTime('2016-' . $unit->unit_id . '-28'));
      $uc = new UnitCalendar($unit->unit_id);
      $uc->updateCalendar(array($event));
      $this->assertBookableUnitsCount($count - 1, new Datetime('2016-' . $unit->unit_id . '-10'), New DateTime('2016-' . $unit->unit_id . '-15'));
    }

    $expected_count = 0;
    for ($month = $count; $month > 0; $month--) {
      $this->assertBookableUnitsCount($expected_count, new Datetime('2016-01-10'), New DateTime('2016-' . $month . '-15'));
      $expected_count++;
    }
  }

  /**
   * Tests that Availability filter is required for Booking form field.
   */
  function testFieldRequiresFilter() {
    $view = $this->roomsViewsTestOnlyFieldView();
    $view->set_display('default');
    $view->init_handlers();
    $result = $view->execute_display('default');
    $error_text = 'This field requires the Rooms Availability filter enabled';
    $pos = strpos($result, $error_text);
    $this->assertTrue($pos !== FALSE, 'Booking field is not available if availability filter is not enabled');
    $view->destroy();
  }

  /**
   * Tests booking field behavior.
   */
  function testBookingField() {
    module_enable(array('rooms_views_test'));
    $this->resetAll();
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'access checkout',
    ));
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet('rooms-views-test-default-view');
    $this->assertRaw('Book this awesome room', 'Label displayed properly');
    $this->assertText('700', 'Price calculated properly');
    $this->drupalPost(NULL, array(), 'Book this awesome room');
    $start_date = new Datetime();
    $end_date = new Datetime('+1 week');
    $this->assertText('Review your reservation');
    $this->assertText('Booking for Villa (7 Nights; Arrival: ' . $start_date->format('d-m-Y') . ' Departure: ' . $end_date->format('d-m-Y') . ')');
    $this->assertFieldByXPath('//td[@class="component-total"]', '$700.00', 'Total price calculates properly on checkout page');
  }

  /**
   * Provides a simple view displaying only Booking form field.
   */
  function roomsViewsTestOnlyFieldView() {
    $view = new view();
    $view->name = 'rooms_views_test_booking_field';
    $view->description = '';
    $view->tag = 'default';
    $view->base_table = 'rooms_units';
    $view->human_name = 'rooms_views_test_booking_field';
    $view->core = 7;
    $view->api_version = '3.0';
    $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

    /* Display: Master */
    $handler = $view->new_display('default', 'Master', 'default');
    $handler->display->display_options['use_more_always'] = FALSE;
    $handler->display->display_options['access']['type'] = 'none';
    $handler->display->display_options['cache']['type'] = 'none';
    $handler->display->display_options['query']['type'] = 'views_query';
    $handler->display->display_options['exposed_form']['type'] = 'basic';
    $handler->display->display_options['pager']['type'] = 'full';
    $handler->display->display_options['style_plugin'] = 'default';
    $handler->display->display_options['row_plugin'] = 'fields';
    /* Field: Bookable Units: Bookable units ID */
    $handler->display->display_options['fields']['unit_id']['id'] = 'unit_id';
    $handler->display->display_options['fields']['unit_id']['table'] = 'rooms_units';
    $handler->display->display_options['fields']['unit_id']['field'] = 'unit_id';
    /* Field: Bookable Units: Booking form */
    $handler->display->display_options['fields']['booking']['id'] = 'booking';
    $handler->display->display_options['fields']['booking']['table'] = 'rooms_units';
    $handler->display->display_options['fields']['booking']['field'] = 'booking';
    $handler->display->display_options['fields']['booking']['label'] = '';
    $handler->display->display_options['fields']['booking']['element_label_colon'] = FALSE;

    return $view;
  }

  /**
   * Provides a simple view containing an availability filter.
   */
  public function roomsViewsTestNonExposedFilterView() {
    $view = new view();
    $view->name = 'rooms_views_test_non_exposed';
    $view->description = '';
    $view->tag = 'default';
    $view->base_table = 'rooms_units';
    $view->human_name = 'rooms_views_test_non_exposed';
    $view->core = 7;
    $view->api_version = '3.0';
    $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

    /* Display: Master */
    $handler = $view->new_display('default', 'Master', 'default');
    $handler->display->display_options['use_more_always'] = FALSE;
    $handler->display->display_options['access']['type'] = 'none';
    $handler->display->display_options['cache']['type'] = 'none';
    $handler->display->display_options['query']['type'] = 'views_query';
    $handler->display->display_options['exposed_form']['type'] = 'basic';
    $handler->display->display_options['pager']['type'] = 'full';
    $handler->display->display_options['style_plugin'] = 'default';
    $handler->display->display_options['row_plugin'] = 'fields';
    /* Field: Bookable Units: Bookable units ID */
    $handler->display->display_options['fields']['unit_id']['id'] = 'unit_id';
    $handler->display->display_options['fields']['unit_id']['table'] = 'rooms_units';
    $handler->display->display_options['fields']['unit_id']['field'] = 'unit_id';
    /* Field: Bookable Units: Booking form */
    $handler->display->display_options['fields']['booking']['id'] = 'booking';
    $handler->display->display_options['fields']['booking']['table'] = 'rooms_units';
    $handler->display->display_options['fields']['booking']['field'] = 'booking';
    $handler->display->display_options['fields']['booking']['text'] = 'Book This Unit';
    /* Filter criterion: Bookable Units: Rooms Availability */
    $handler->display->display_options['filters']['availability']['id'] = 'availability';
    $handler->display->display_options['filters']['availability']['table'] = 'rooms_units';
    $handler->display->display_options['filters']['availability']['field'] = 'availability';
    $handler->display->display_options['filters']['availability']['value'] = array(
      'rooms_start_date' => DateTime::__set_state(array(
        'date' => '2016-10-24 00:00:00',
        'timezone_type' => 3,
        'timezone' => 'Europe/Madrid',
      )),
      'rooms_end_date' => DateTime::__set_state(array(
        'date' => '2016-10-29 00:00:00',
        'timezone_type' => 3,
        'timezone' => 'Europe/Madrid',
      )),
    );

    return $view;
  }

  /**
   * Provides a simple view containing an exposed availability filter.
   */
  public function roomsViewsTestExposedFilterView() {
    $view = new view();
    $view->name = 'rooms_views_test_non_exposed';
    $view->description = '';
    $view->tag = 'default';
    $view->base_table = 'rooms_units';
    $view->human_name = 'rooms_views_test_non_exposed';
    $view->core = 7;
    $view->api_version = '3.0';
    $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

    /* Display: Master */
    $handler = $view->new_display('default', 'Master', 'default');
    $handler->display->display_options['use_more_always'] = FALSE;
    $handler->display->display_options['access']['type'] = 'none';
    $handler->display->display_options['cache']['type'] = 'none';
    $handler->display->display_options['query']['type'] = 'views_query';
    $handler->display->display_options['exposed_form']['type'] = 'basic';
    $handler->display->display_options['pager']['type'] = 'full';
    $handler->display->display_options['style_plugin'] = 'default';
    $handler->display->display_options['row_plugin'] = 'fields';
    /* Field: Bookable Units: Bookable units ID */
    $handler->display->display_options['fields']['unit_id']['id'] = 'unit_id';
    $handler->display->display_options['fields']['unit_id']['table'] = 'rooms_units';
    $handler->display->display_options['fields']['unit_id']['field'] = 'unit_id';
    /* Field: Bookable Units: Booking form */
    $handler->display->display_options['fields']['booking']['id'] = 'booking';
    $handler->display->display_options['fields']['booking']['table'] = 'rooms_units';
    $handler->display->display_options['fields']['booking']['field'] = 'booking';
    $handler->display->display_options['fields']['booking']['text'] = 'Book This Unit';
    /* Filter criterion: Bookable Units: Rooms Availability */
    $handler->display->display_options['filters']['availability']['id'] = 'availability';
    $handler->display->display_options['filters']['availability']['table'] = 'rooms_units';
    $handler->display->display_options['filters']['availability']['field'] = 'availability';
    $handler->display->display_options['filters']['availability']['value'] = array(
      'rooms_start_date' => DateTime::__set_state(array(
        'date' => '2016-10-24 00:00:00',
        'timezone_type' => 3,
        'timezone' => 'Europe/Madrid',
      )),
      'rooms_end_date' => DateTime::__set_state(array(
        'date' => '2016-10-29 00:00:00',
        'timezone_type' => 3,
        'timezone' => 'Europe/Madrid',
      )),
    );
    $handler->display->display_options['filters']['availability']['exposed'] = TRUE;
    $handler->display->display_options['filters']['availability']['expose']['operator_id'] = '';
    $handler->display->display_options['filters']['availability']['expose']['label'] = 'Rooms Availability';
    $handler->display->display_options['filters']['availability']['expose']['operator'] = 'availability_op';
    $handler->display->display_options['filters']['availability']['expose']['identifier'] = 'availability';
    $handler->display->display_options['filters']['availability']['expose']['required'] = TRUE;
    $handler->display->display_options['filters']['availability']['expose']['remember_roles'] = array(
      2 => '2',
      1 => 0,
      3 => 0,
      4 => 0,
    );

    return $view;
  }

  /**
   * Helper function to assert the number of Availability filter results.
   *
   * @param int $count
   *   The expected count of result values.
   * @param DateTime $start_date
   *   OPTIONAL The start date for exposed filter.
   * @param DateTime $end_date
   *   OPTIONAL The end date for exposed filter.
   */
  function assertBookableUnitsCount($count, $start_date = NULL, $end_date = NULL) {
    $view = (!isset($start_date) || !isset($end_date)) ? $this->roomsViewsTestNonExposedFilterView() : $this->roomsViewsTestExposedFilterView();
    $view->set_display('default');
    $view->init_handlers();

    if (isset($start_date) && isset($end_date)) {
      $view->set_exposed_input(array(
        'rooms_start_date' => array(
          'date' => $start_date->format('d/m/Y'),
        ),
        'rooms_end_date' => array(
          'date' => $end_date->format('d/m/Y'),
        ),
      ));
    }
    $view->set_display('default');
    $view->init_handlers();
    $view->execute_display('default');
    $this->assertTrue(count($view->result) == $count, format_string('View returns @count bookable units, as expected', array('@count' => $count)));
    $view->destroy();
  }

  /**
   * Creates a bunch of random unit to perform operations.
   */
  function createRandomUnits() {
    $this->units = array();
    $unit_type = rooms_unit_type_create(array(
      'type' => 'villa',
      'label' => 'Villa',
      'min_sleeps' => 1,
      'max_sleeps' => 2,
      'base_price' => 100,
    ));
    $unit_type->save();
    $number_of_units = rand(2, 10);
    for ($i = 0; $i < $number_of_units; $i++) {
      $unit = rooms_unit_create(array(
        'type' => 'villa',
        'name' => $this->randomName(),
        'default_state' => 1,
        'base_price' => 100,
      ));
      $unit->save();
      $this->units[] = $unit;
    }
  }

}
