<?php

/**
 * @file
 * Allows users to create a new order from their order history.
 */

/**
 * Implementation of hook_menu
 */
function commerce_reorder_menu() {
  $items = array();

  // Reorder tab on orders.
  $items['admin/commerce/orders/%commerce_order/reorder'] = array(
    'title' => 'Reorder',
    'page callback' => 'commerce_reorder_reorder_tab',
    'page arguments' => array(3),
    'access arguments' => array('commerce_reorder_access'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function commerce_reorder_permission() {
  return array(
    'commerce_reorder_access' => array(
      'title' => t('Reorder a previous order'),
      'description' => t('Add contents of an order to a new cart.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_reorder_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'commerce_reorder') . '/includes/views',
  );
}

/**
 * Dynamically add a CSRF-protection token to the reorder-links usin a 
 * preprocess function.
 * 
 * @see http://drupal.org/node/755584 for a reference to CSRF tokens for menus.
 */
function commerce_reorder_preprocess_link(&$variables) {
  $path = explode('/', $variables['path']);
  if (strpos($variables['path'], 'admin/commerce/orders/') === 0 && array_pop($path) == 'reorder') {
    $variables['options']['query']['token'] = drupal_get_token('commerce_reorder:' . $path[3]);
  }
}

/**
 * Perform the reorder action for the operations menu
 * */
function commerce_reorder_reorder_tab($order) {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], 'commerce_reorder:' . $order->order_id) || !commerce_order_access('view', $order)) {
    return MENU_ACCESS_DENIED;
  }
  
  commerce_reorder_helper($order);

  drupal_set_message(t('Order copied to your cart.'));
  // Redirect to the checkout with the new cart.
  drupal_goto('cart');
}

/**
 * Helper function to reorder a previous order.
 */
function commerce_reorder_helper($order = NULL, $account = NULL) {
  if (!isset($order)) {
    return;
  }

  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // Get the line items of the order.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product = $line_item_wrapper->commerce_product->value();
      if ($product->status) {
        $line_item = $line_item_wrapper->value();

        // Generate a line item product based in the current one.
        $new_line_item = commerce_product_line_item_new($product, $line_item->quantity, $line_item->order_id, $line_item->data, $line_item->type);

        // Merge both line items to get the fields (if any).
        $new_line_item = (object) array_merge((array) $line_item, (array) $new_line_item);

        // @TODO Add option to combine / add sepparately.
        // See @commerce_cart_product_add
        commerce_cart_product_add($account->uid, $new_line_item);
      }
      else {
        drupal_set_message(t('Some products weren\'t copied to the cart as they aren\'t currently available'), 'status', FALSE);
      }
    }
    else {
      drupal_set_message(t('Some products weren\'t copied to the cart as they aren\'t currently available'), 'status', FALSE);
    }
  }
}
