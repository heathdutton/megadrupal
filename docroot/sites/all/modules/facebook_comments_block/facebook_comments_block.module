<?php
/**
 * @file
 * Code for the Facebook Comments Block module.
 */

/**
 * Implements hook_block_info().
 */
function facebook_comments_block_block_info() {
  $blocks = array();
  $blocks['fb_comments'] = array(
    'info' => t('Facebook Comments'),
  );

  return $blocks;
}

/**
 * Implements hook_block_info().
 */
function facebook_comments_block_help($path, $arg) {
  switch ($path) {
    case 'admin/help#facebook_comments_block':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module allows users to comment using Facebook\'s commenting box with as little configuration as possible. It adds a new block "Facebook Comments" which acts as a Facebook commenting widget.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t("This block can be enabled and configured on the <a href='@admin-block'>Blocks administration page</a>.", array('@admin-block' => url('admin/structure/block'))) . '</dt>';
      $output .= '<dd>' . t("Find 'Facebook Comments' block and click on configure.") . '</a></dd>';
      $output .= '<dt>' . t('Under the "FACEBOOK COMMENTS BOX SETTINGS" you can configure the following.') . '</dt>';
      $output .= '<dd>' . t('Facebook Application ID: (Optional).') . '</dd>';
      $output .= '<dd>' . t('Main domain: (Optional) If you have more than one domain you can set the main domain for facebook comments box to use the same commenting widget across all other domains.') . '</dd>';
      $output .= '<dd>' . t('Color Scheme: Set the color schema of facebook comments box.') . '</dd>';
      $output .= '<dd>' . t('Number of posts: Select how many posts tou want to display by default.') . '</dd>';
      $output .= '<dd>' . t('Width: Set width of facebook comments box.') . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Troubleshooting') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('If the block did not appear:') . '</dt>';
      $output .= '<dd>' . t("check if you have entered a correct FACEBOOK APP ID, leave it blank in case you don't have a Facebook app.") . '</a></dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_block_configure().
 */
function facebook_comments_block_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'fb_comments':
      $form['facebook_comments_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Facebook comments box settings'),
        '#description' => t('Configure facebook comments box.'),
        '#collapsible' => FALSE,
      );
      $form['facebook_comments_settings']['facebook_comments_block_settings_app_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Facebook Application ID'),
        '#default_value' => variable_get('facebook_comments_block_settings_app_id', ''),
        '#maxlength' => 20,
        '#description' => t('Optional: Enter Facebook App ID.'),
      );
      $form['facebook_comments_settings']['facebook_comments_block_settings_domain'] = array(
        '#type' => 'textfield',
        '#title' => t('Main domain'),
        '#default_value' => variable_get('facebook_comments_block_settings_domain', ''),
        '#maxlength' => 75,
        '#description' => t('Optional: If you have more than one domain you can set the main domain for facebook comments box to use the same commenting widget across all other domains.<br />ex: <i>http://www.mysite.com</i>'),
        '#element_validate' => array('facebook_comments_block_validate_absolute_url'),
        '#required' => FALSE,
      );
      $form['facebook_comments_settings']['facebook_comments_block_settings_color_schema'] = array(
        '#type' => 'select',
        '#title' => t('Color scheme'),
        '#options' => array(
          'light' => t('Light'),
          'dark' => t('Dark'),
        ),
        '#default_value' => variable_get('facebook_comments_block_settings_color_schema', 'light'),
        '#description' => t('Set the color schema of facebook comments box.'),
        '#required' => TRUE,
      );
      $form['facebook_comments_settings']['facebook_comments_block_settings_number_of_posts'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of posts'),
        '#default_value' => variable_get('facebook_comments_block_settings_number_of_posts', '5'),
        '#maxlength' => 1,
        '#description' => t('Select how many posts you want to display by default.'),
        '#required' => TRUE,
      );
      $form['facebook_comments_settings']['facebook_comments_block_settings_width'] = array(
        '#type' => 'textfield',
        '#title' => t('Width'),
        '#default_value' => variable_get('facebook_comments_block_settings_width', '500'),
        '#maxlength' => 3,
        '#description' => t('Set width of facebook comments box.'),
        '#required' => TRUE,
      );
      break;
  }

  return $form;
}

/**
 * Helper function to validate absolute URL.
 */
function facebook_comments_block_validate_absolute_url($element, &$form_state) {
  // trim trailing slash from the URL.
  $value = rtrim(rtrim($element['#value']), '/');
  if ($value !== '' && (!valid_url($value, TRUE))) {
    form_error($element, t('%name must be a valid absolute URL.', array('%name' => $element ['#title'])));
  }
}

/**
 * Implements hook_block_save().
 */
function facebook_comments_block_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'fb_comments':
      variable_set('facebook_comments_block_settings_app_id', $edit['facebook_comments_block_settings_app_id']);
      variable_set('facebook_comments_block_settings_domain', rtrim(rtrim($edit['facebook_comments_block_settings_domain']), '/'));
      variable_set('facebook_comments_block_settings_color_schema', $edit['facebook_comments_block_settings_color_schema']);
      variable_set('facebook_comments_block_settings_width', $edit['facebook_comments_block_settings_width']);
      variable_set('facebook_comments_block_settings_number_of_posts', $edit['facebook_comments_block_settings_number_of_posts']);
      break;
  }
}

/**
 * Implements hook_theme().
 */
function facebook_comments_block_theme() {
  return array(
    'facebook_comments__block' => array(
      'template' => 'templates/facebook-comments--block',
      'variables' => array(
        'facebook' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function facebook_comments_block_block_view($delta = '') {
  global $base_url;
  $main_domain = $base_url;

  if (variable_get('facebook_comments_block_settings_domain', '') !== '') {
    $main_domain = variable_get('facebook_comments_block_settings_domain', '');
  }

  $block = array();
  switch ($delta) {
    case 'fb_comments':
      $url = $main_domain . '/' . current_path();

      $facebook_app_id = variable_get('facebook_comments_block_settings_app_id', '');
      $facebook_app_id_script = ($facebook_app_id != '') ? "&appId=$facebook_app_id" : '';

      $js_vars = array(
        'facebook_app_id' => $facebook_app_id,
        'facebook_app_id_script' => $facebook_app_id_script,
      );

      $theme_vars = array(
        'facebook' => array(
          'data_attributes' => array(
            'href' => $url,
            'data-width' => variable_get('facebook_comments_block_settings_width', '500'),
            'data-numposts' => variable_get('facebook_comments_block_settings_number_of_posts', '5'),
            'data-colorscheme' => variable_get('facebook_comments_block_settings_color_schema', 'light'),
          ),
        ),
      );

      $block = array(
        'subject' => t('Facebook comments'),
        'content' => theme('facebook_comments__block', $theme_vars),
      );
      drupal_add_js(array('facebook_comments_block' => array('facebook_settings' => $js_vars)), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'facebook_comments_block') . '/js/facebook_comments_block.js', array('scope' => 'footer', 'type' => 'file'));
      break;
  }
  return $block;
}
