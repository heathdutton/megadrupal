<?php

/**
 * @file
 */

/**
 * Implements hook_init()
 */
function beautytips_node_init() {
  // add Js settings
  $settings = array(
    'viewMode' => variable_get('beautytips_node_view_mode', 'beautytips_node'),
    'defaultStyle' => variable_get('beautytips_node_viewmode_default_style', 'plain'),
    'triggerOn' => variable_get('beautytips_trigger_on', 'hover'),
    'triggerOff' => variable_get('beautytips_trigger_off', 'hover'),
  );
  drupal_add_js(array('beautyTipsNode' => $settings), 'setting');
}

/**
 * Implements hook_menu()
 */
function beautytips_node_menu() {
  $items['admin/config/user-interface/beautytips/node-settings'] = array(
    'title' => 'BeautyTips node settings',
    'description' => 'Settings for the BeautyTips node submodule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beautytips_node_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['beautytips/%beautytips_node_path'] = array(
    'page callback' => 'beautytips_node_beautytips_node_output',
    'page arguments' => array(1),
    'load arguments' => array('%map'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Load the menu token
 */
function beautytips_node_path_load($arg, $path = array()) {
  array_shift($path);
  // Lets determine if we have a prefix from our languages.
  if (module_exists('locale') && function_exists('language_url_split_prefix')) {
    // Get our language list to pass into our url splitter.
    $languages = language_list();
    // Turn the path into a string so we can then remove our prefix.
    $path_string = implode('/', $path);
    $language_path = language_url_split_prefix($path_string, $languages);
    // Separate out the returned path and language.  We should always
    // have two indexes, the first is the language, second is the path.
    $language = $language_path[0] ? $language_path[0]->language : '';
    $final_path = $language_path[1];
    // Lets find our path based on the current translation.
    return drupal_get_normal_path($final_path, $language);
  }
  // Now lets buld our path to return our system path,
  return drupal_get_normal_path(implode('/', $path));
}

/*
 * Displays a node view without the page template.
 */
function beautytips_node_beautytips_node_output($path) {
  $node = menu_get_object("node", 1, $path);
  // If we have a node, lets display it
  if ($node) {
    // @TODO : Use a settings page
    print drupal_render(node_view($node, 'beautytips_node'));
  }
  else {
    // This isn't a node or the node failed to load.
    watchdog('BeautyTips', t('Failed to load a node while attempting to display it through a BeautyTips. !node', array('!node' => $node->title)));
  }
  exit();
}

/**
 * Implements hook_entity_info_alter().
 */
function beautytips_node_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['beautytips_node'] = array(
    'label' => t('BeautyTips display'),
    'custom settings' => TRUE,
  );
}

/**
 * Callback to the admin settings form
 */
function beautytips_node_admin_settings() {
  $form        = array();
  $entity_info = entity_get_info('node');
  $view_modes  = $entity_info['view modes'];
  $options     = array();
  foreach ($view_modes as $machine_name => $view_mode) {
    $options[$machine_name] = $view_mode['label'];
  }
  $form['beautytips_node_view_mode'] = array(
    '#type' => 'select',
    '#title' => t('BeautyTip view mode'),
    '#options' => $options,
    '#default_value' => variable_get('beautytips_node_view_mode', 'beautytips_node'),
    '#description' => t('This view mode will be used to render the node inside the BeautyTips tooltip.'),
  );
  $styles = beautytips_get_styles(TRUE);
  $options = array();
  foreach ($styles as $style => $styles_opt) {
    $options[$style] = $style;
  }
  $form['beautytips_node_viewmode_default_style'] = array(
    '#type' => 'select',
    '#title' => t('Choose a default style'),
    '#options' => $options,
    '#default_value' => variable_get('beautytips_node_viewmode_default_style', 'plain'),
  );
  $triggers = beautytips_manager_get_triggers();
  $form['beautytips_trigger_on'] = array(
    '#type' => 'select',
    '#title' => t('BeautyTip On'),
    '#options' => $triggers,
    '#default_value' => variable_get('beautytips_trigger_on', 'hover'),
  );
  $form['beautytips_trigger_off'] = array(
    '#type' => 'select',
    '#title' => t('BeautyTip Off'),
    '#options' => $triggers,
    '#default_value' => variable_get('beautytips_trigger_off', 'hover'),
  );
  return system_settings_form($form);
}

