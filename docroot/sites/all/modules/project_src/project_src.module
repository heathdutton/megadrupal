<?php

/**
 * @file
 * Hooks and functions for the Project Alternate Source module.
 */


/**
 * Includes private/helpers file. Do not use functions contained here in your
 * module.
 */
require_once(dirname(__FILE__) . '/includes/project_src.private.inc');


/**
 * Defines the pass-through URL back to Drupal's main project repository.
 */
define('PROJECT_SRC_PASSTHROUGH', 'https://updates.drupal.org/release-history');


/**
 * Implements hook_menu().
 */
function project_src_menu() {
  // Primary release history XML callback.
  $items['drupal/release-history/%/%'] = array(
    'title' => 'Alternate Drupal project release history',
    'delivery callback' => 'project_src_deliver_clean_page',
    'page callback' => 'project_src_get_project',
    'page arguments' => array(2, 3),
    'file' => 'project_src.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Primary admin UI.
  $items['admin/config/development/project-src'] = array(
    'title' => 'Project Source',
    'description' => 'Configure options for the Project Source module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_src_settings'),
    'access arguments' => array('administer project src'),
    'file' => 'includes/project_src.admin.inc',
  );

  // Default local task so other modules can add UIs as local tasks.
  $items['admin/config/development/project-src/settings'] = array(
    'title' => 'Global settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}


/**
 * Implements hook_hook_info().
 */
function project_src_hook_info() {
  $hooks = array(
    'project_src_info',
    'project_src_info_alter',
    'project_src_releases',
    'project_src_releases_alter',
    'project_src_terms',
    'project_src_terms_alter',
    'project_src_settings',
    'project_src_settings_alter',
  );

  return array_fill_keys($hooks, array('group' => 'project_src'));
}


/**
 * Implements hook_permission().
 */
function project_src_permission() {
  return array(
    'administer project src' => array(
      'title' => t('Administer Project Source'),
      'description' => t('Perform administration tasks for Project Source'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements hook_theme().
 */
function project_src_theme($existing, $type, $theme, $path) {
  $pm_path = drupal_get_path('module', 'project_src');

  // Primary project XML.
  $items['project_src_xml'] = array(
    'variables' => array(
      'title' => '',
      'short_name' => '',
      'creator' => '',
      'type' => 'project_module',
      'api_version' => '',
      'recommended_major' => '',
      'supported_majors' => '',
      'default_major' => '',
      'project_status' => 'published',
      'link' => '',
      'terms' => '',
      'releases' => '',
    ),
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'template' => 'project.xml',
  );

  // Project releases.
  $items['project_src_releases'] = array(
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'function' => 'project_src_theme_releases',
  );

  // Project release XML.
  $items['project_src_release'] = array(
    'variables' => array(
      'name' => '',
      'version' => '',
      'tag' => '',
      'version_major' => '',
      'version_patch' => '',
      'version_extra' => '',
      'status' => 'published',
      'terms' => '',
      'release_link' => '',
      'download_link' => '',
      'date' => '',
      'mdhash' => '',
      'filesize' => '',
      'archive_type' => 'tar.gz',
    ),
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'template' => 'release.xml',
  );

  // Project terms template.
  $items['project_src_terms'] = array(
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'function' => 'project_src_theme_terms',
  );

  // Project term template.
  $items['project_src_term'] = array(
    'variables' => array(
      'name' => '',
      'value' => '',
    ),
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'template' => 'term.xml',
  );

  // Error XML.
  $items['project_src_xml_error'] = array(
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'function' => 'project_src_theme_error',
  );

  // Admin settings table.
  $items['project_src_settings_table'] = array(
    'render element' => 'form',
    'file' => 'includes/project_src.admin.inc',
  );

  return $items;
}


/**
 * Delivers a page without running through any additional processing.
 *
 * @param $page_callback_result
 *   A string containing the result output of the page.
 */
function project_src_deliver_clean_page($page_callback_result) {
  print $page_callback_result;
  drupal_page_footer();
}


/**
 * Returns an array of custom projects. If an API version is specified, then the
 * returned array is keyed by project short name. If no API version is given,
 * the value returned is keyed by API version.
 *
 * @param string $api_version
 *   (Optional) The API version of projects to return. Projects will be returned
 *   and keyed by API version.
 *
 * @param string $module
 *   (Optional) The name of the module that declared the project. If no module
 *   is specified, projects belonging to any module will be returned.
 *
 * @param bool $include_hidden
 *   (Optional) Whether or not to include projects configured to be hidden. By
 *   default, only projects configured to be visible will be returned.
 *
 * @return array
 *   An array of projects if those meeting the above criteria were met, or an
 *   empty array of none were found. The returned array's keys will appear like
 *   the following, based on whether or not API version was specified:
 *   -API version specified: $projects[project_name][definition];
 *   -API version omitted: $projects[api_version][project_name][definition];
 */
function project_src_get_projects($api_version = NULL, $module = NULL, $include_hidden = FALSE) {
  // This may be called frequently; we should statically cache the results.
  $projects = &drupal_static(__FUNCTION__, array());
  $already_ran = &drupal_static(__FUNCTION__ . '_ran', array());
  $all = '-all-';

  // Check that we haven't already loaded projects for this module/hidden combo.
  $key = serialize(array($module, $include_hidden));
  if (!isset($already_ran[$key])) {
    $projects[$include_hidden][$all] = array();

    // We must always run module_implements() in order to guarantee all project
    // source inc files have been lazy loaded; however, if explicitly given a
    // module, there's no reason to run every single module's implementation.
    $modules = module_implements('project_src_info');
    $modules = $module ? array($module) : $modules;

    // Iterate through project_src_info() implementers and store separately.
    foreach ($modules as $implementer) {
      // Construct and check the function.
      $function = $implementer . '_project_src_info';
      if (function_exists($function)) {
        // Save the result to the static cache.
        $projects[$include_hidden][$implementer] = $function();

        // Ensure that we always supply an array (in the event nothing returns).
        if (empty($projects[$include_hidden][$implementer]) && !is_array($projects[$include_hidden][$implementer])) {
          $projects[$include_hidden][$implementer] = array();
        }

        // Apply settings.
        project_src_apply_settings($projects[$include_hidden][$implementer], $include_hidden);

        // Allow modifications to project definitions.
        drupal_alter('project_src_info', $projects[$include_hidden][$implementer]);

        // Ensure that the project is also added to the "all" key.
        if (is_array($projects[$include_hidden][$implementer])) {
          $projects[$include_hidden][$all] = array_merge_recursive($projects[$include_hidden][$all], $projects[$include_hidden][$implementer]);
        }
      }
    }

    // Mark this module/hidden combo as having already run.
    $already_ran[$key] = TRUE;
  }

  // Ensures that if no module was specified, it loads projects for all modules.
  $module = $module ? $module : $all;

  // If an API version was specified, only return those projects
  if ($api_version) {
    return isset($projects[$include_hidden][$module][$api_version]) ? $projects[$include_hidden][$module][$api_version] : array();
  }
  // Otherwise, return all projects keyed by API version.
  else {
    return isset($projects[$include_hidden][$module]) ? $projects[$include_hidden][$module] : array();
  }
}


/**
 * Returns an array of project settings; a specific project can be specified by
 * providing a project short name.
 *
 * @param string $project_name
 *   (Optional) The short name of the project whose configurations are desired.
 *
 * @return array
 *   An array of configurations if any were found; an empty array, otherwise.
 */
function project_src_get_project_settings($project_name = NULL) {
  $settings = variable_get('project_src_project_settings', array());

  if ($project_name) {
    return isset($settings[$project_name]) ? $settings[$project_name] : array();
  }
  else {
    return $settings;
  }
}


/**
 * Saves an array of project settings, either as a whole, or for a specified
 * project based on the project's short name.
 *
 * @param $project_name
 *   The short name of the project whose configuration we should save.
 *
 * @param string $setting
 *   The name of the configuration to set (e.g. "type").
 *
 * @param mixed $value
 *   The value to be saved for the given project and setting.
 */
function project_src_set_project_settings($project_name = NULL, $setting, $value) {
  $settings = project_src_get_project_settings();

  // If a name was specified, simply add/replace the value in the original.
  if ($project_name) {
    if ($setting) {
      $settings[$project_name][$setting] = $value;
    }
    else {
      $settings[$project_name] = $value;
    }
  }
  // Otherwise, the whole array needs to be replaced. This is probably only used
  // by this module. Would not recommend.
  else {
    $settings = $value;
  }

  variable_set('project_src_project_settings', $settings);
}
