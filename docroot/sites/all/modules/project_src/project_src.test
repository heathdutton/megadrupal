<?php

/**
 * @file
 * SimpleTest tests for the Project Source module.
 */


/**
 * Helper class with some added functions and properties for testing.
 */
class ProjectSrcBaseCase extends DrupalWebTestCase {

  /**
   * The admin config page for Project Source.
   */
  protected $admin_path = 'admin/config/development/project-src';

  /**
   * The project info array for our test module.
   */
  protected $project_src_info = array();

  /**
   * Sample data for testing the settings API.
   */
  protected $settings_payload = array(
    'drewpaul_inc_module' => array(
      'type' => 'project_module',
      'hidden' => FALSE,
      '6.x' => array(
        'status' => 'unsupported',
      ),
      '7.x' => array(
        'status' => 'published',
        'recommended_major' => 2,
        'supported_majors' => array(1, 2),
      ),
    ),
    'drewpaul_inc_theme' => array(
      'type' => 'project_theme',
      'hidden' => TRUE,
    ),
  );

  function setUp(array $modules = array()) {
    $modules[] = 'project_src';
    $modules[] = 'project_src_test';
    parent::setUp($modules);

    // Set info for our tests.
    $this->project_src_info = module_invoke('project_src_test', 'project_src_info');
  }
}


/**
 * Tests Project Source admin configuration.
 */
class ProjectSrcAdminTests extends ProjectSrcBaseCase {

  /**
   * @return array
   */
  protected $admin_payload = array(
    'project_src_project_settings[drewpaul_inc_module][hidden]' => TRUE,
    'project_src_project_settings[drewpaul_inc_module][type]' => 'project_module',
    'project_src_project_settings[drewpaul_inc_module][6.x][status]' => 'unsupported',
    'project_src_project_settings[drewpaul_inc_module][7.x][recommended_major]' => 2,
    'project_src_project_settings[drewpaul_inc_module][7.x][supported_majors][]' => 1,
    'project_src_project_settings[drewpaul_inc_theme][type]' => 'project_theme',
  );

  public static function getInfo() {
    return array(
      'name' => 'Project Source: Admin',
      'description' => 'Tests the Project Source administrative interface.',
      'group' => 'Project Source',
    );
  }

  function setUp(array $modules = array()) {
    parent::setUp($modules);

    // Create a user and log it in.
    $this->admin_user = $this->drupalCreateUser(array(
      'access administration pages',
      'administer site configuration',
      'administer project src',
    ));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Tests that the admin interface displays existing config properly.
   */
  public function testAdminFormSettingsInterface() {
    // Visit the admin page.
    $this->drupalGet($this->admin_path);

    // Loop through our all project API versions..
    foreach ($this->project_src_info as $api => $projects) {
      // Ensure that the API version has its own column.
      $this->assertRaw('<th>' . $api . '</th>', format_string('API version !api has its own config table column.', array(
        '!api' => $api,
      )));

      // Loop through all projects.
      foreach ($projects as $short_name => $project) {
        // Ensure that the project provided by the API is listed.
        $this->assertText($project['title'], format_string('Project !project is listed.', array(
          '!project' => $project['title'],
        )));

        // Ensure a field exists for this project's "type."
        $name = 'project_src_project_settings[' . $short_name . '][type]';
        $this->assertFieldByName($name, NULL, format_string('Type field found for !project', array(
          '!project' => $project['title'],
        )));

        // Ensure a field exists for this project's "hidden" value.
        $name = 'project_src_project_settings[' . $short_name . '][hidden]';
        $this->assertFieldByName($name, NULL, format_string('Hidden field found for !project', array(
          '!project' => $project['title'],
        )));

        // Ensure a field exists for this project/API version's project status.
        $name = 'project_src_project_settings[' . $short_name . '][' . $api . '][status]';
        $this->assertFieldByName($name, NULL, format_string('Project status field found for !project', array(
          '!project' => $project['title'] . ' (' . $api . ')',
        )));

        // Ensure a field exists for this project/API version's rec. major.
        $name = 'project_src_project_settings[' . $short_name . '][' . $api . '][recommended_major]';
        $this->assertFieldByName($name, NULL, format_string('Recommended major version field found for !project', array(
          '!project' => $project['title'] . ' (' . $api . ')',
        )));

        // Ensure a field exists for this project/API version's sup. majors.
        $name = 'project_src_project_settings[' . $short_name . '][' . $api . '][supported_majors][]';
        $this->assertFieldByName($name, NULL, format_string('Supported major versions field found for !project', array(
          '!project' => $project['title'] . ' (' . $api . ')',
        )));
      }
    }

    // Disable the test module and ensure the empty message is shown properly.
    module_disable(array('project_src_test'));
    $this->drupalGet($this->admin_path);
    $empty_text = 'No projects were found! Please install and configure a Project Source integration module to get started.';
    $this->assertText($empty_text, 'Empty text shown when no projects exist.');
  }

  /**
   * Tests that the admin interface works when saving project settings.
   */
  public function testAdminFormSettingsFunctionality() {
    // Visit the admin page and post our sample payload.
    $this->drupalGet($this->admin_path);
    $this->drupalPost(NULL, $this->admin_payload, 'Save configuration');

    // Loop through our sample payload and ensure the values are now reflected.
    foreach ($this->admin_payload as $name => $value) {
      $this->assertFieldByName($name, $value, format_string('Properly saved value %value for the %field field.', array(
        '%value' => $value,
        '%field' => $name,
      )));
    }
  }
}


/**
 * Tests Project Source API functionality.
 */
class ProjectSrcAPITests extends ProjectSrcBaseCase {

  /**
   * The Drupal variable name that backs the project settings API.
   */
  protected $variable_name = 'project_src_project_settings';

  public static function getInfo() {
    return array(
      'name' => 'Project Source: API',
      'description' => 'Tests Project Source API.',
      'group' => 'Project Source',
    );
  }

  /**
   * Tests project_src_get_project_settings().
   */
  public function testProjectSrcGetProjectSettings() {
    // Set our payload.
    variable_set($this->variable_name, $this->settings_payload);

    // Check the response of project_src_get_project_settings with no arguments.
    $response = project_src_get_project_settings();
    $this->assertEqual($response, $this->settings_payload, 'Settings API loaded full configuration as expected.');

    // Iterate through settings and check project-specific responses.
    foreach ($this->settings_payload as $project => $settings) {
      $response = project_src_get_project_settings($project);
      $this->assertEqual($response, $settings, format_string('Settings API loaded configuration for !project as expected.', array(
        '!project' => $project,
      )));
    }
  }

  /**
   * Tests project_src_set_project_settings().
   */
  public function testProjectSrcSetProjectSettings() {
    // Ensure the settings configuration variable is empty.
    variable_set($this->variable_name, array());

    // Set the configuration globally and ensure that it's saved properly.
    project_src_set_project_settings(NULL, NULL, $this->settings_payload);
    $response = project_src_get_project_settings();
    $this->assertEqual($response, $this->settings_payload, 'Settings API set configuration as expected.');

    // Ensure the settings configuration variable is empty.
    variable_set($this->variable_name, array());
    $this->assertEqual(project_src_get_project_settings(), array(), 'Settings cleared');

    // Iterate through our payload and set configurations per project.
    foreach ($this->settings_payload as $project => $settings) {
      // Try setting a project's full configuration.
      project_src_set_project_settings($project, NULL, $settings);

      // Ensure that the get settings API returns the expected response.
      $response = project_src_get_project_settings($project);
      $this->assertEqual($response, $settings, format_string('Settings API set configuration for !project as expected.', array(
        '!project' => $project,
      )));
    }

    // Ensure the settings configuration variable is empty.
    variable_set($this->variable_name, array());
    $this->assertEqual(project_src_get_project_settings(), array(), 'Settings cleared');

    // Iterate through our payload and set configurations per project setting.
    foreach ($this->settings_payload as $project => $settings) {
      foreach ($settings as $name => $value) {
        // Try setting this individual setting.
        project_src_set_project_settings($project, $name, $value);

        // Ensure that the get settings API returns the expected response.
        $response = project_src_get_project_settings($project);
        $this->assertEqual($response[$name], $value, format_string('Settings API set %name to %value for !project as expected.', array(
          '%name' => $name,
          '%value' => is_string($value) ? $value : 'the correct value',
          '!project' => $project,
        )));
      }
    }
  }

  /**
   * Tests project_src_get_projects() basic functionality.
   */
  public function testProjectSrcGetProjectsBasic() {
    // Run the function with no settings/alters.
    $response = project_src_get_projects();

    // The call above, with no setting configs/alters, should be identical.
    $this->assertEqual($response, $this->project_src_info, 'Project getter with no arguments returned valid response.');

    // Set configurations and reload project info response.
    project_src_set_project_settings(NULL, NULL, $this->settings_payload);
    drupal_static_reset('project_src_get_projects_ran');
    $response = project_src_get_projects();

    // Ensure our dummy theme is no longer returned; 6.x module is unsupported.
    $this->assertTrue(!isset($response['7.x']['drewpaul_inc_theme']), 'Project getter with settings payload and no arguments returned valid response.');
    $this->assertEqual($response['6.x']['drewpaul_inc_module']['project_status'], 'unsupported', 'Project getter with settings payload and no arguments returned valid response.');

    // Enable the test alter module and reload project info response.
    module_enable(array('project_src_test_alter'));
    project_src_set_project_settings(NULL, NULL, array());
    drupal_static_reset('project_src_get_projects_ran');
    $response = project_src_get_projects();

    // Ensure our 7.x theme title has been altered.
    $this->assertEqual($response['7.x']['drewpaul_inc_theme']['title'], 'Drew Paul Inc. Theme Altered', 'Project getter with alter module enabled and no arguments returned valid response.');
  }

  /**
   * Tests project_src_get_projects() with a supplied API version.
   */
  public function testProjectSrcGetProjectsApiVersion() {
    // Ensure that filtering down to a specific API version returns as expected.
    $response = project_src_get_projects('6.x');
    $this->assertEqual($response, $this->project_src_info['6.x'], 'Project getter with returned valid response for 6.x.');

    // Ensure that filtering down to a specific API version returns as expected.
    $response = project_src_get_projects('7.x');
    $this->assertEqual($response, $this->project_src_info['7.x'], 'Project getter with returned valid response for 7.x.');
  }

  /**
   * Tests project_src_get_projects() with a supplied module.
   */
  public function testProjectSrcGetProjectsModule() {
    // Ensure that filtering down to a specific module returns as expected.
    $response = project_src_get_projects(NULL, 'project_src_test');
    $this->assertEqual($response, $this->project_src_info, 'Project getter with returned valid response for module project_src_test.');
    $response = project_src_get_projects('6.x', 'project_src_test');
    $this->assertEqual($response, $this->project_src_info['6.x'], 'Project getter with returned valid response for module project_src_test.');

    // Ensure that filtering down to a specific API version returns as expected.
    $response = project_src_get_projects(NULL, 'project_src_test_doesnt_exist');
    $this->assertEqual($response, array(), 'Project getter with returned valid response for non-existent module.');
    $response = project_src_get_projects('7.x', 'project_src_test_doesnt_exist');
    $this->assertEqual($response, array(), 'Project getter with returned valid response for non-existent module.');
  }

  /**
   * Tests project_src_get_projects() hidden functionality.
   */
  public function testProjectSrcGetProjectsHidden() {
    // Ensure that no projects have been hidden yet.
    $response = project_src_get_projects(NULL, NULL, FALSE);
    $this->assertTrue(isset($response['7.x']['drewpaul_inc_theme']), 'Verifying that all projects are returned.');

    // Set our settings payload.
    project_src_set_project_settings(NULL, NULL, $this->settings_payload);
    drupal_static_reset('project_src_get_projects_ran');

    // Assert that default behavior is correct.
    $response = project_src_get_projects(NULL, NULL, FALSE);
    $this->assertTrue(!isset($response['7.x']['drewpaul_inc_theme']), 'Project getter did not return hidden projects when called to do so.');

    // Our expected result will be modified slightly.
    $expected = $this->project_src_info['7.x']['drewpaul_inc_theme'];
    $expected['type'] = $this->settings_payload['drewpaul_inc_theme']['type'];

    // Attempt to do the same again, but loading the hidden project.
    $response = project_src_get_projects(NULL, NULL, TRUE);
    $this->assertTrue(isset($response['7.x']['drewpaul_inc_theme']), 'Project getter returned hidden projects when called to do so.');
    $this->assertEqual($response['7.x']['drewpaul_inc_theme'], $expected, 'Project getter returned hidden project as expected.');

    // Attempt to do the same, but also when specifying an API version.
    $response = project_src_get_projects('7.x', NULL, TRUE);
    $this->assertTrue(isset($response['drewpaul_inc_theme']), 'Project getter returned hidden projects when called to do so (with API version).');
    $this->assertEqual($response['drewpaul_inc_theme'], $expected, 'Project getter returned hidden project as expected (with API version).');

    // Attempt to do the same, but also when specifying a module.
    $response = project_src_get_projects(NULL, 'project_src_test', TRUE);
    $this->assertTrue(isset($response['7.x']['drewpaul_inc_theme']), 'Project getter returned hidden projects when called to do so (with module).');
    $this->assertEqual($response['7.x']['drewpaul_inc_theme'], $expected, 'Project getter returned hidden project as expected (with module).');

    // Attempt to do the same, but when specifying both a module and API version.
    $response = project_src_get_projects('7.x', 'project_src_test', TRUE);
    $this->assertTrue(isset($response['drewpaul_inc_theme']), 'Project getter returned hidden projects when called to do so (with API version and module).');
    $this->assertEqual($response['drewpaul_inc_theme'], $expected, 'Project getter returned hidden project as expected (with API version and module).');
  }
}



/**
 * Tests Project Source XML generation.
 */
class ProjectSrcXmlTests extends ProjectSrcBaseCase {

  /**
   * Redefining sample settings data for testing XML.
   */
  protected $settings_payload = array(
    'drewpaul_inc_module' => array(
      'type' => 'project_module',
      'hidden' => FALSE,
      '6.x' => array(
        'status' => 'unsupported',
      ),
      '7.x' => array(
        'status' => 'published',
        'recommended_major' => 2,
        'supported_majors' => array(1, 2),
      ),
    ),
    'drewpaul_inc_theme' => array(
      'type' => 'project_theme',
      'hidden' => FALSE,
      '7.x' => array(
        'status' => 'published',
        'recommended_major' => 1,
        'supported_majors' => array(1),
      ),
    ),
  );

  public static function getInfo() {
    return array(
      'name' => 'Project Source: XML',
      'description' => 'Tests Project Source XML generation.',
      'group' => 'Project Source',
    );
  }

  function setUp(array $modules = array()) {
    $modules[] = 'project_src_test_alter';
    parent::setUp($modules);

    // Set our test configurations.
    project_src_set_project_settings(NULL, NULL, $this->settings_payload);
  }

  /**
   * Compares the provided project XML values with those provided by our test
   * modules.
   *
   * @param SimpleXMLElement|array $xml
   *   The SimpleXMLElement as returned by the xpath query (or an array that
   *   contains a SimpleXMLElement as its first item).
   * @param string $api
   *   The API version of the requested project XML.
   * @param string $project
   *   The short name of the project for which we are validating XML.
   */
  protected function validateProjectXml($xml, $api, $project) {
    $projects = project_src_get_projects();
    $project = $projects[$api][$project];

    // We may be handed an array.
    if (is_array($xml)) {
      $xml = $xml[0];
    }

    $this->assertEqual($xml->title, $project['title'], format_string('Returned the expected project title %arg.', array('%arg' => $project['title'])));
    $this->assertEqual($xml->short_name, $project['short_name'], format_string('Returned the expected project short name %arg.', array('%arg' => $project['short_name'])));
    $this->assertEqual($xml->creator, $project['creator'], format_string('Returned the expected project creator %arg.', array('%arg' => $project['creator'])));
    $this->assertEqual($xml->type, $project['type'], format_string('Returned the expected project type %arg', array('%arg' => $project['type'])));
    $this->assertEqual($xml->api_version, $api, format_string('Returned the expected API version %arg.', array('%arg' => $api)));
    $this->assertRaw('<link>' . $project['link'] . '</link>', format_string('Returned the expected link %arg.', array('%arg' => $project['link'])));

    // Expected project status is conditional.
    $project_status = isset($project['project_status']) ? $project['project_status'] : 'published';
    $this->assertEqual($xml->project_status, $project_status, format_string('Returned the expected status %arg.', array('%arg' => $project_status)));

    // Expected supported majors is conditional.
    $supported_majors = isset($project['supported_majors']) ? $project['supported_majors'] : '';
    $this->assertEqual($xml->supported_majors, $supported_majors, format_string('Returned the expected supported majors %arg.', array('%arg' => $supported_majors)));

    // Expected recommended major is conditional.
    $recommended_major = isset($project['recommended_major']) ? $project['recommended_major'] : '';
    $this->assertEqual($xml->recommended_major, $recommended_major, format_string('Returned the expected recommended major %arg.', array('%arg' => $recommended_major)));

    // Check project type term.
    $this->assertRaw('<name>Projects</name>', 'Returned a "projects" term.');
    $this->assertRaw('<value>' . _project_src_type_to_string($project['type'], 'term') . '</value>', format_string('Returned the expected project type term for type %arg', array('%arg' => $project['type'])));
  }

  /**
   * Compares the provided release XML values with those provided by our test
   * modules.
   *
   * @param SimpleXMLElement|array $xml
   *   The SimpleXMLElement as returned by the xpath query (or an array that
   *   contains a SimpleXMLElement as its first item).
   * @param string $api
   *   The API version of the requested project XML.
   * @param string $project
   *   The short name of the project for which we are validating XML.
   */
  protected function validateReleaseXml($xml, $api, $name) {
    // Tests if we're dealing with a dev release.
    if (substr($xml->version, -4) == '-dev') {
      $expected_extra = 'dev';
      $real_tag = substr($xml->version, 0, -4);
    }
    // Test if we're dealing with an unstable release.
    elseif (preg_match_all('/.*?((unstable|alpha|beta|rc)\\d+)/is', $xml->version, $matches)) {
      $expected_extra = $matches[1][0];
      $real_tag = $xml->version;
    }
    else {
      $expected_extra = NULL;
      $real_tag = $xml->version;
    }

    // @todo A good sign to abstract away to project_src_get_project_releases().
    $info = array();
    $releases = module_invoke_all('project_src_releases', $name, $api, $info);
    drupal_alter('project_src_releases', $releases, $info);
    $release = $releases[(string) $real_tag];

    $this->assertEqual($xml->name, $release['name'], format_string('Returned the expected release name %arg.', array('%arg' => $release['name'])));
    $this->assertEqual($xml->version, $release['version'], format_string('Returned the expected release version %arg.', array('%arg' => $release['version'])));
    $this->assertEqual($xml->tag, $release['tag'], format_string('Returned the expected release tag %arg.', array('%arg' => $release['tag'])));
    $this->assertEqual($xml->date, $release['date'], format_string('Returned the expected release date %arg.', array('%arg' => $release['date'])));
    $this->assertEqual($xml->version_major, $release['version_major'], format_string('Returned the expected major version %arg.', array('%arg' => $release['version_major'])));
    $this->assertEqual($xml->version_patch, $release['version_patch'], format_string('Returned the expected patch version %arg.', array('%arg' => $release['version_patch'])));
    $this->assertEqual($xml->status, $release['status'], format_string('Returned the expected status %arg.', array('%arg' => $release['status'])));
    $this->assertEqual($xml->release_link, $release['release_link'], format_string('Returned the expected release link %arg.', array('%arg' => $release['release_link'])));
    $this->assertTrue(strpos($xml->download_link, $release['download_link']) !== FALSE, format_string('Returned the expected release download link %arg.', array('%arg' => $release['download_link'])));
    $this->assertEqual($xml->filesize, $release['filesize'], format_string('Returned the expected file size %arg.', array('%arg' => $release['filesize'])));
    $this->assertEqual($xml->mdhash, $release['mdhash'], format_string('Returned the expected mdhash %arg.', array('%arg' => $release['mdhash'])));

    // If this release corresponds to a dev/alpha/beta/etc. release, test it.
    if (!empty($expected_extra)) {
      $this->assertEqual($xml->version_extra, $expected_extra, format_string('Returned expected extra version metadata %arg.', array('%arg' => $xml->version_extra)));
    }
  }

  /**
   * Compares provided term XML values with those provided by our test modules.
   */
  protected function validateTermXml() {
    // @todo A good sign to abstract away to project_src_get_terms().
    $info = array();
    $type = 'project';
    $terms = module_invoke_all('project_src_terms', $type, '', '', $info);
    drupal_alter('project_src_terms', $terms, $info, $type);

    foreach ($terms as $term) {
      $this->assertRaw('<name>' . $term[0] . '</name>', format_string('Found term name %arg', array('%arg' => $term[0])));
      $this->assertRaw('<value>' . $term[1] . '</value>', format_string('Found term value %arg', array('%arg' => $term[1])));
    }
  }

  /**
   * Tests overall Project release XML.
   */
  public function testProjectSrcProjectXml() {
    // Iterate through all projects declared by the test module by API.
    foreach($this->project_src_info as $api => $projects) {
      // Iterate through every project.
      foreach ($projects as $name => $project) {
        // Get the project XML, verify headers.
        $this->drupalGet('drupal/release-history/' . $name . '/' . $api);

        $headers = $this->drupalGetHeaders();
        $this->assertEqual($headers[':status'], 'HTTP/1.1 200 OK', 'Project XML returned a 200.');
        $this->assertEqual($headers['content-type'], 'text/xml; charset=utf-8', 'Found valid XML.');

        // Validate project XML.
        $this->validateProjectXml($this->xpath('//project'), $api, $name);

        // Iterate through all releases for this project and validate the XML.
        foreach ($this->xpath('//release') as $release) {
          $this->validateReleaseXml($release, $api, $name);
        }

        // Validate term XML.
        $this->validateTermXml();
      }
    }
  }
}
