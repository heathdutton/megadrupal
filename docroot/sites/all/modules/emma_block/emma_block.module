<?php

/**
 * @file
 * This is the module for creating a block to take MyEmma newsletter
 * registrations.
 */

/**
 * Implementation of hook_menu().
 */
function emma_block_menu() {
  $items = array();
  $items['admin/config/emma_block'] = array(
    'title' => 'Emma block',
    'description' => 'The index of all available lists.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_block_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer emma block settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/emma_block/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configuration Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_block_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer emma block settings'),
    'weight' => -2,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/emma_block/list'] = array(
    'title' => 'Mailing list index',
    'description' => 'The index of all available lists.',
    'page callback' => 'emma_block_list_grid',
    'access callback' => 'user_access',
    'access arguments' => array('administer emma block lists'),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/emma_block/add'] = array(
    'title' => 'Add mailing list',
    'description' => 'Add a mailing list to the database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_block_list_form'),
    'access callback' => 'user_access',
    'access arguments' => array('add new emma block list'),
    'weight' => -0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/emma_block/edit/%emma_block_list'] = array(
    'title' => 'Edit mailing list',
    'description' => 'Make modifications to an existing mailing list.',
    'page callback' => 'emma_block_edit_list',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('edit emma block lists'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/emma_block/delete/%emma_block_list'] = array(
    'title' => 'Delete mailing list',
    'description' => 'Remove a mailing list from the repertoire.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('emma_block_delete_confirm', 4),
    'access callback' => 'user_access',
    'access arguments' => array('delete emma block lists'),
    'type' => MENU_CALLBACK,
  );
  $items[variable_get('emma_block_mailing_list_page_url','mailing-list/register')] = array(
    'title' => 'Sign up for our Mailing List',
    'page callback' => 'emma_block_mailing_list_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Argument load hook. Returns the emma block object if the id matches a list we have
 * and a page not found if it doesn't find one.
 */
function emma_block_list_load($id) {
  if (is_numeric($id)) {
    $result = db_query("SELECT * FROM {emma_block} WHERE id=:id", array(':id' => $id));
    $list = $result->fetchObject();
    return $list;
  } 
  else {
    return FALSE;
  }
}

/**
 * Display the mailing list page if we have one configured. This never worked until now
 * and that is pretty embarassing
 */
function emma_block_mailing_list_page() {
  $form = drupal_render(drupal_get_form('emma_block_subscribe_form'));
  $output = theme('emma_block_mailing_list', array('form' => $form));
  return $output;
} 

/**
 * Implements hook_theme()
 */
function emma_block_theme($existing, $type, $theme, $path) {
  return array(
    'emma_block_mailing_list' => array(
      'variables' => array('form' => NULL),
      'template' => 'emma-block-mailing-list',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function emma_block_permission() {
  return array(
    'administer emma block lists' => array(
      'title' => t('Administer Emma Mailing Lists.'),
    ), 
    'add new emma block list' => array(
      'title' => t('Add new Emma mailing lists to list.'),
    ), 
    'edit emma block lists' => array(
      'title' => t('Edit existing Emma mailing lists.'),
    ), 
    'delete emma block lists' => array(
      'title' => t('Delete Emma mailing lists.'),
    ), 
    'administer emma block settings' => array(
      'title' => t('Administer Emma Block module settings.'),
    ),
  );
}

/**
 * this is our interface for listing all of the available mailing lists (that have been added)
 */
function emma_block_list_grid() {
  $i = 0;
  $rows = array();
  $header = array(t('List name'), t('Account ID'), t('Public API'), t('Private API'), t('Group ID'), t('Edit'), t('Delete'));
  
  $result = db_query('SELECT * FROM {emma_block} ORDER BY list_name ASC');
  while ($data = $result->fetchObject()) {
    $row = array();
    $row[] = $data->list_name;
    $row[] = $data->account_id;
    $row[] = $data->public_api_key;
    $row[] = $data->private_api_key;
    $row[] = $data->group_id;
    $row[] = l(t('Edit'), 'admin/config/emma_block/edit/' . $data->id);
    $row[] = l(t('Delete'), 'admin/config/emma_block/delete/' . $data->id);
    $rows[] = $row;
  }
  
  if (count($rows) == 0) {
    $rows = array(
      array(
        'data' => array(array('align' => 'center', 'colspan' => 7, 'data' => t('THERE ARE CURRENTLY NO CONFIGURED MAILING LISTS')))
      ),
    );
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

/**
 * callback function for handling the form that takes detailed Emma list
 * information for each mailing list
 */
function emma_block_list_form($form, &$form_state) {
  /* prepopulated form fields if we are coming to the table with a populated list object */
  if (isset($form_state['build_info']['args'][0])) {  
    $list = $form_state['build_info']['args'][0];
    $list_id = (isset($list->id) && $list->id) ? $list->id : NULL;
    $list_name = (isset($list->list_name) && $list->list_name) ? $list->list_name : NULL;
    $list_account_id = (isset($list->account_id) && $list->account_id) ? $list->account_id : NULL;
    $list_public_api_key = (isset($list->public_api_key) && $list->public_api_key) ? $list->public_api_key : NULL;
    $list_private_api_key = (isset($list->private_api_key) && $list->private_api_key) ? $list->private_api_key : NULL;
    $list_group_id = (isset($list->group_id) && $list->group_id) ? $list->group_id : NULL;
  } else {
    $list = $list_id = $list_name = $list_account_id = $list_public_api_key = NULL;
    $list_private_api_key = $list_group_id = NULL;
  }
  
  $form['list'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Mailing list information')
  );
  $form['list']['id'] = array(
    '#type' => 'hidden',
    '#default_value' => $list_id,
  );
  $form['list']['emma_block_list_name'] = array(
    '#type' => 'textfield',
    '#title' => t('List name'),
    '#default_value' => $list_name,
    '#max_length' => 32,
    '#required' => TRUE,
  );
  $form['list']['emma_block_account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Emma account ID'),
    '#default_value' => $list_account_id,
    '#max_length' => 10,
    '#required' => TRUE,
  );
  $form['list']['emma_block_public_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public API Key'),
    '#default_value' => $list_public_api_key,
    '#max_length' => 32,
    '#required' => TRUE,
  );
  $form['list']['emma_block_private_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private API Key'),
    '#default_value' => $list_private_api_key,
    '#max_length' => 32,
    '#required' => TRUE,
  );
  $form['list']['emma_block_group_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Group ID'),
    '#default_value' => $list_group_id,
    '#max_length' => 16,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function emma_block_list_form_submit($form, &$form_state) {

  $array = array(
    'list_name' => $form_state['values']['emma_block_list_name'],
    'account_id' => $form_state['values']['emma_block_account_id'],
    'public_api_key' => $form_state['values']['emma_block_public_api_key'],
    'private_api_key' => $form_state['values']['emma_block_private_api_key'],
    'group_id' => $form_state['values']['emma_block_group_id'],
  );

  if ($form_state['values']['id'] > 0) {
    $array['id'] = $form_state['values']['id'];
    $result = drupal_write_record('emma_block', $array, 'id');
  }
  else {
    $result = drupal_write_record('emma_block', $array);
  }

  if ($result == FALSE) {
    drupal_set_message(t('The Emma mailing list information provided could not be saved.'), 'error');
  }
  else {
    drupal_set_message(t('Emma mailing list successfully added.'));
  }

  /* not the solution I like, but $form['#redirect'] does not exist in Drupal 7 and I have not */
  /* yet found an elegant work-around */
  drupal_goto('admin/config/emma_block/list');
}

function emma_block_edit_list($list) {
  return drupal_get_form('emma_block_list_form', $list);
}

function emma_block_delete_confirm($form, &$form_state) {
  $list = $form_state['build_info']['args'][0];
  $form = array();
  $form['list'] = array('#type' => 'hidden', '#value' => $list->id);
  return confirm_form( $form,
                       t('Are you sure you wish to delete the list %list?', array('%list' => $list->list_name)),
                       'admin/config/emma_block',
                       t('This action cannot be undone.'),
                       t('Delete'),
                       t('Cancel')
                     );
}

function emma_block_delete_confirm_submit($form, &$form_state) {
  $list = emma_block_list_load((int) $form_state['values']['list']);
  db_query("DELETE FROM {emma_block} WHERE id=:id", array(':id' => (int) $form_state['values']['list']));
  drupal_set_message(t('%list successfully deleted', array('%list' => $list->list_name)));
  drupal_goto('admin/config/emma_block');
}

/** 
 * implementation of hook_form_alter()
 */
function emma_block_form_alter(&$form, $form_state, $form_id) {
  if (variable_get('emma_block_module_enabled',1) == 1 &&
    variable_get('emma_block_account_creation_enabled',1) == 1) {
    switch($form_id) {
      case 'user_register_form':
        /* initialize our arrays */
        $lists = array();
        $result = db_query('SELECT id,list_name FROM {emma_block} ORDER BY list_name');
          while ($data = $result->fetchObject()) {
            $list_name = $data->list_name;
            $list_value = $data->id;
            $list = array( $list_value => $list_name );
            $lists += $list;
          }
        $form['mailing_list'] = array(
          '#type' => 'fieldset',
          '#title' => variable_get('emma_block_mailing_list_header','Mailing lists'),
        );
        $form['mailing_list']['list'] = array(
          '#title' => t(''),
          '#description' => variable_get('emma_block_mailing_list_description','Sign up for one of our mailing lists by checking the appropriate box above'),
          '#type' => 'checkboxes',
          '#options' => $lists,
        );
        break;
      default:
        break;
    }
  }
}

/**
 * implementation of hook_user_insert()
 * iterate through the lists and only register the user for the ones that have been checked.
 */
function emma_block_user_insert(&$edit, $account, $category) {
  if (is_array($edit['list'])) {  
  	foreach( $edit['list'] as $lid => $lv ) {
  	  if ($lv > 0) {
        emma_block_subscribe_member( $lid, $edit['mail'], NULL, NULL );
    	}
    }
  }  
}

/**
 * implementation of hook_block_info()
 */
function emma_block_block_info() {
  $blocks = array();
  $blocks['emma'] = array(
    'info' => t('Emma Mailing List Block'),
    'status' => 0,
    'cache' => DRUPAL_NO_CACHE,
  );  
  return $blocks;
}

/**
 * implementation of hook_block_view()
 */
function emma_block_block_view($delta = NULL) {
  $block = array();
  if ($delta == 'emma' && variable_get('emma_block_module_enabled',1) == 1) {
    /* if we have no configured mailing lists, we need to return an empty block */
    $number_of_rows = db_query('SELECT COUNT(*) AS number_of_rows FROM {emma_block}')->fetchField();
    if ($number_of_rows > 0) {
      $block['content'] = drupal_get_form('emma_block_subscribe_form');
    } else {
      $block['content'] = NULL;
    }
  }
  return $block;
}

function emma_block_settings($form, &$form_state) {
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#weight' => 0,
  );
  $form['variables'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional variable settings'),
    '#weight' => 1,
  );
  $form['registration'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Subscription on registration settings'),
    '#weight' => 2,
  );
  $form['general']['emma_block_module_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Emma registrations'),
    '#default_value' => variable_get('emma_block_module_enabled',1),
    '#weight' => 1,
  );
  $form['general']['emma_block_mailing_list_page_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL for registration page.'),
    '#default_value' => variable_get('emma_block_mailing_list_page_url','mailing-list/register'),
    '#weight' => 2,
  );
  $form['variables']['emma_block_first_name_flag'] = array(
    '#type' => 'select',
    '#title' => t('First Name Field Flag'),
    '#options' => array(
      '0' => t('disabled'),
      '1' => t('enabled / not required'),
      '2' => t('enabled / required'),
    ),
    '#default_value' => variable_get('emma_block_first_name_flag',2),
    '#weight' => 1,
  );
  $form['variables']['emma_block_last_name_flag'] = array(
    '#type' => 'select',
    '#title' => t('Last Name Field Flag'),
    '#options' => array(
      '0' => t('disabled'),
      '1' => t('enabled / not required'),
      '2' => t('enabled / required'),
    ),
    '#default_value' => variable_get('emma_block_last_name_flag',2),
    '#weight' => 2,
  );
  $form['variables']['emma_block_destination_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL or Drupal path to page after successfull registration submission'),
    '#default_value' => variable_get('emma_block_destination_url',NULL),
    '#weight' => 3,
  );
  $form['registration']['emma_block_account_creation_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable mailing list sign up during account creation.'),
    '#default_value' => variable_get('emma_block_account_creation_enabled',1),
    '#weight' => 1,
  );
  $form['registration']['emma_block_mailing_list_header'] = array(
    '#type' => 'textfield',
    '#title' => t('Block header title for mailing list section on account creation page'),
    '#default_value' => variable_get('emma_block_mailing_list_header','Mailing lists'),
    '#size' => 60,
    '#maxlength' => 64,
    '#required' => FALSE,
    '#weight' => 2,
  );
  $form['registration']['emma_block_mailing_list_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description of mailing lists on account creation page'),
    '#default_value' => variable_get('emma_block_mailing_list_description','Sign up for one of our mailing lists by checking the appropriate box above'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
    '#weight' => 3,
  );
  
  $form = system_settings_form($form);
  $form['#submit'][] = 'emma_block_settings_cache_clear';
  return $form;
}

/**
 * A function to perform after saving the settings form to update our page URL for the
 * mailing list sign up 
 */
function emma_block_settings_cache_clear() {
  menu_rebuild();
}

/**
 * the subscription form to be placed inside the block
 */
function emma_block_subscribe_form($form_state) {
  $form = array();
  
  /* determine if the first name and last name fields are required based on our settings */
  $first_name_required = (variable_get('emma_block_first_name_flag',2) == 2) ? TRUE : FALSE;
  $last_name_required = (variable_get('emma_block_last_name_flag',2) == 2) ? TRUE : FALSE;
  
  /* only display the first name field if it is enabled */
  if (variable_get('emma_block_first_name_flag',2) != 0) { 
    $form['first_name'] = array(
      '#title' => t('First name'),
      '#type' => 'textfield',
      '#size' => '20',
      '#required' => $first_name_required,
      '#maxlength' => 32,
    );
  }
  
  /* only display the last name field if it is enabled */
  if (variable_get('emma_block_last_name_flag',2) != 0) { 
    $form['last_name'] = array(
      '#title' => t('Last name'),
      '#type' => 'textfield',
      '#size' => '20',
      '#required' => $last_name_required,
      '#maxlength' => 32,
    );
  }
  
  $form['email_address'] = array(
    '#title' => t('Email address'),
    '#type' => 'textfield',
    '#size' => '20',
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  
  /* initialize our arrays */
  $lists = array();
  $list = array();
    
  /**
   * cycle through the lists. if we only have one list, then don't display the checkbox
   * mechanism for selecting list(s)
   */
  $result = db_query('SELECT id,list_name FROM {emma_block} ORDER BY list_name');
  if ($result->rowCount() > 1) {
    while ($data = $result->fetchObject()) {
      $list_name = $data->list_name;
      $list_value = $data->id;
      $list = array( $list_value => $list_name );
      $lists += $list;
    }
    $form['list'] = array(
      '#title' => variable_get('emma_block_mailing_list_header',t('Mailing list')),
      '#type' => 'checkboxes',
      '#options' => $lists,
    );
  }
  else {
    $list = $result->fetchObject();
    $form['list'] = array(
      '#type' => 'hidden',
      '#value' => $list->id
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * handle form submissions, check to make sure an email address has been
 * provided and if so, subscribe them to the selected list.
 */
function emma_block_subscribe_form_submit($form, &$form_state) {

  /* since first and last name could now be optional, we need to handle it if they */
  /* are not part of the form and hence not part of our array */
  $first_name = (isset($form_state['values']['first_name'])) ? $form_state['values']['first_name'] : NULL;
  $last_name = (isset($form_state['values']['last_name'])) ? $form_state['values']['last_name'] : NULL;
  
  if ($form_state['values']['email_address']) {
    if (is_array( $form_state['values']['list'] ) ) {
      foreach ($form_state['values']['list'] as $list_id => $list_value) {
        if (isset($list_value) && $list_value > 0) {
          $result = emma_block_subscribe_member($list_value, $form_state['values']['email_address'], $first_name, $last_name);
        }
      }
    }
    else {
      $result = emma_block_subscribe_member($form_state['values']['list'], $form_state['values']['email_address'], $first_name, $last_name);
    }
  }

  $destination_url = variable_get('emma_block_destination_url', NULL);
  if (empty($destination_url) || $result == FALSE) {
    return;
  } 
  else {
    drupal_goto($destination_url);
  }
}

/**
 * do the actual subscription based on the id of the list we're using
 */
function emma_block_subscribe_member($list, $email, $first_name, $last_name) {
  // Get the list information so we have the right API data
  $list = emma_block_list_load($list);
  
  // Construct the URL to Emma
  $url = "https://api.e2ma.net/".$list->account_id."/members/add";
  
  // This data will be json sncoded as the payload of our request
  $member_data = array(
    "email" => $email,
    "fields" => array(
      "first_name" => $first_name,
      "last_name" => $last_name
    ),
    "group_ids" => array($list->group_id),
  );
  
  // Replacing our cURL calls with the standard way of doing it with Drupal since Emma
  // now has a URL that Drupal can handle in this function call.
  $options = array(
    'method' => 'POST',
    'data' => json_encode($member_data),
    'headers' => array(
      'Content-Type' => 'application/json',
      'Authorization' => 'Basic ' . base64_encode($list->public_api_key . ":" . $list->private_api_key),
    ),
  );
  $result = drupal_http_request($url, $options);
    
  // Determine our outcome. If we have an error, we need to 
  // return TRUE so we do not re-direct.
  $state = FALSE;
  if($result->code != 200) {
    $message = t('Your subscription to '.$list->list_name.' could not be processed.');
  } else {
    $data = json_decode($result->data);
    if ($data->status == 'a') {
      $message = t('Your subscription to '.$list->list_name.' was successfully processed.');
      $state = TRUE;
    }
    if ($data->status == 'e') {
      $message = t('Your subscription to '.$list->list_name.' could not be processed.');
    }
    if ($data->status == 'o') {
      $message = t('Your subscription to '.$list->list_name.' could not be processed due to a previous opt-out.');
    }
  }
  $type = ($state == TRUE) ? 'status' : 'error';
  drupal_set_message($message, $type);
  return $state;
}
