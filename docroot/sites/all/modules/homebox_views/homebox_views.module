<?php

/**
 * Implements hook_views_plugins().
 */
function homebox_views_views_plugins() {
  return array(
    'display' => array(
      'homebox' => array(
        'title' => t('Homebox'),
        'help' => t('Display the view as a homebox block.'),
        'handler' => 'views_plugin_display_homebox',
        'parent' => 'block',
        'theme' => 'views_view',
        'uses homebox' => TRUE,
        'use ajax' => TRUE,
        'use pager' => TRUE,
        'use more' => TRUE,
        'accept attachments' => TRUE,
        'admin' => t('Homebox'),
        'help topic' => 'display-homebox',
        'path' => drupal_get_path('module', 'homebox_views'),
      ),
    ),
    'exposed_form' => array(
      'homebox' => array(
        'title' => t('Homebox'),
        'help' => t('Homebox exposed form to setup specific homebox settings'),
        'handler' => 'views_plugin_exposed_form_homebox',
        'uses fields' => TRUE,
        'uses options' => TRUE,
        'help topic' => 'exposed-form-basic',
        'type' => 'normal',
        'parent' => 'basic',
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 *
 * Copypasta :( from views_block_info().
 */
function homebox_views_block_info() {
  // Try to avoid instantiating all the views just to get the blocks info.
  views_include('cache');
  $cache = views_cache_get('homebox_views_block_items', TRUE);
  if ($cache && is_array($cache->data)) {
    return $cache->data;
  }

  $items = array();
  $views = views_get_all_views();
  foreach ($views as $view) {
    // disabled views get nothing.
    if (!empty($view->disabled)) {
      continue;
    }

    $view->init_display();
    foreach ($view->display as $display_id => $display) {
      if (isset($display->handler) && !empty($display->handler->definition['uses homebox'])) {
        $result = $display->handler->execute_hook_block_list();
        if (is_array($result)) {
          $items = array_merge($items, $result);
        }
      }

      if (isset($display->handler) && $display->handler->get_option('exposed_block')) {
        $result = $display->handler->get_special_blocks();
        if (is_array($result)) {
          $items = array_merge($items, $result);
        }
      }
    }
  }

  // block.module has a delta length limit of 32, but our deltas can
  // unfortunately be longer because view names can be 32 and display IDs
  // can also be 32. So for very long deltas, change to md5 hashes.
  $hashes = array();

  // get the keys because we're modifying the array and we don't want to
  // confuse PHP too much.
  $keys = array_keys($items);
  foreach ($keys as $delta) {
    if (strlen($delta) >= 32) {
      $hash = md5($delta);
      $hashes[$hash] = $delta;
      $items[$hash] = $items[$delta];
      unset($items[$delta]);
    }
  }

  // Only save hashes if they have changed.
  $old_hashes = variable_get('homebox_views_block_hashes', array());
  if ($hashes != $old_hashes) {
    variable_set('homebox_views_block_hashes', $hashes);
  }
  // Save memory: Destroy those views.
  foreach ($views as $view) {
    $view->destroy();
  }

  views_cache_set('homebox_views_block_items', $items, TRUE);

  return $items;
}

/**
 * Implements hook_block_view().
 *
 * Copypasta :( from views_block_view().
 */
function homebox_views_block_view($delta, $block) {
  $start = microtime(TRUE);
  // if this is 32, this should be an md5 hash.
  if (strlen($delta) == 32) {
    $hashes = variable_get('homebox_views_block_hashes', array());
    if (!empty($hashes[$delta])) {
      $delta = $hashes[$delta];
    }
  }

  // This indicates it's a special one.
  if (substr($delta, 0, 1) == '-') {
    list($nothing, $type, $name, $display_id) = explode('-', $delta);
    // Put the - back on.
    $type = '-' . $type;
    if ($view = views_get_view($name)) {
      if ($view->access($display_id)) {
        $view->set_display($display_id);
        if (isset($view->display_handler)) {
          $output = $view->display_handler->view_special_blocks($type);
          // Before returning the block output, convert it to a renderable
          // array with contextual links.
          views_add_block_contextual_links($output, $view, $display_id, 'special_block_' . $type);
          $view->destroy();
          return $output;
        }
      }
      $view->destroy();
    }
  }

  // If the delta doesn't contain valid data return nothing.
  $explode = explode('-', $delta);
  if (count($explode) != 2) {
    return;
  }
  list($name, $display_id) = $explode;
  // Load the view
  if ($view = views_get_view($name)) {
    if ($view->access($display_id)) {
      // Line below is the only change for homebox. We need to pass the
      // saved settings from the homebox block.
      $view->set_exposed_input((array) $block);
      $output = $view->execute_display($display_id);
      // Before returning the block output, convert it to a renderable array
      // with contextual links.
      views_add_block_contextual_links($output, $view, $display_id);
      $view->destroy();
      return $output;
    }
    $view->destroy();
  }
}

/**
 * Provide a list of all exposed values.
 */
function homebox_views_homebox_block_keys($block) {
  $keys = array();
  $form = homebox_views_homebox_block_edit_form($block, TRUE);
  if ($form['exposed']) {
    foreach (element_children($form['exposed']) as $key) {
      $keys = array_merge($keys, element_children($form['exposed'][$key]));
    }
    return array_values($keys);
  }
  else {
    return array();
  }
}

/**
 * Get exposed form from views block hash.
 */
function homebox_views_homebox_block_edit_form($block) {
  // Static cache disabled, this function runs for a lot of different blocks!
  static $form = array();

  if (TRUE) {

    // Find the view name and display from the block hash.
    if (strlen($block->delta) == 32) {
      $hashes = variable_get('homebox_views_block_hashes', array());
      if (!empty($hashes[$block->delta])) {
        $delta = $hashes[$block->delta];
      }
    }
    else {
      $delta = $block->delta;
    }

    list($view_name, $display_id) = explode('-', $delta);

    $view = views_get_view($view_name);
    $view->set_display($display_id);

    // The panels code below is expecting $conf['exposed'].
    $conf['exposed'] = (array) $block;

    // BEGIN COPY FROM views_panes.inc:487
    //
    // If the exposed form is part of pane configuration, get the exposed
    // form re-tool it for our use.
    $exposed_form_state = array(
      'view' => &$view,
      'display' => &$view->display[$display_id],
    );

    $view->set_exposed_input($conf['exposed']);

    if (version_compare(views_api_version(), '3', '>=')) {
      $exposed_form_state['exposed_form_plugin'] = $view->display_handler->get_plugin('exposed_form');
    }
    $view->init_handlers();
    $exposed_form = array();
    $exposed_form = views_exposed_form($exposed_form, $exposed_form_state);

    $form['exposed'] = array(
      '#tree' => TRUE,
    );

    $exposed_config = $view->display_handler->get_option('exposed_form');

    foreach ($exposed_form['#info'] as $id => $info) {
      if (empty($exposed_config['options']['homebox_filters'][str_replace('filter-', '', $id)])) {
        // Not a homebox filter, don't give a config form.
        continue;
      }
      $form['exposed'][$id] = array(
        '#type' => 'item',
        '#id' => 'views-exposed-pane',
      );

      if (!empty($info['label'])) {
        $form['exposed'][$id]['#title'] = $info['label'];
      }

      if (!empty($info['operator']) && !empty($exposed_form[$info['operator']])) {
        $form['exposed'][$id][$info['operator']] = $exposed_form[$info['operator']];
        $form['exposed'][$id][$info['operator']]['#parents'] = array(
          'exposed',
          $info['operator']
        );
        $form['exposed'][$id][$info['operator']]['#default_value'] = isset($conf['exposed'][$info['operator']]) ? $conf['exposed'][$info['operator']] : '';
      }
      $form['exposed'][$id][$info['value']] = $exposed_form[$info['value']];
      $form['exposed'][$id][$info['value']]['#parents'] = array(
        'exposed',
        $info['value']
      );
      $form['exposed'][$id][$info['value']]['#default_value'] = isset($conf['exposed'][$info['value']]) ? $conf['exposed'][$info['value']] : '';
    }

    // The exposed sort stuff doesn't fall into $exposed_form['#info'] so we
    // have to handle it separately.
    if (isset($exposed_form['sort_by'])) {
      $form['exposed']['sort_by'] = $exposed_form['sort_by'];
    }

    if (isset($exposed_form['sort_order'])) {
      $form['exposed']['sort_order'] = $exposed_form['sort_order'];
    }

    // END COPY TO views_panes.inc:537

    $form['#validate'][] = 'homebox_views_block_edit_form_validate';
  }

  return $form;
}

/**
 * Copy exposed values to form values.
 */
function homebox_views_block_edit_form_validate(&$form, &$form_state) {
  if ($form_state['values']['exposed']) {
    $form_state['values'] += $form_state['values']['exposed'];
    unset($form_state['values']['exposed']);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Hide homebox-enabled filters from normal views exposed filters.
 */
function homebox_views_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $show_submit = FALSE;
    $view = $form_state['view'];
    $config = $view->display_handler->get_option('exposed_form');

    if (!empty($config['options']['homebox_filters'])) {
      $homebox_filters = $config['options']['homebox_filters'];

      foreach ($homebox_filters as $key => $enabled) {
        if ($enabled) {
          // Set type of exposed filter to hidden, this configuration is in the
          // homebox block.
          $form[$key]['#type'] = 'hidden';
          $form['#info']["filter-$key"]['label'] = '';
        }
        else {
          if (isset($view->filter[$key]) && $view->filter[$key]->options['exposed']) {
            // All exposed filters are not enabled. Show the views exposed filter submit.
            $show_submit = TRUE;
          }
        }
      }

      if (!$show_submit) {
        $form['submit']['#attributes']['class'][] = 'js-hide';
      }
    }
  }
}
