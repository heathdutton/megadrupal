<?php

/**
 * @file
 *   Adds a toolbar to the bottom of the page for site users.
 */

//============================
//DRUPAL HOOK IMPLEMENTATIONS.
//============================

/**
 * Implements hook_menu().
 */
function appbar_menu() {
  $items['admin/config/user-interface/appbar'] = array(
    'title' => 'Appbar',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('appbar_admin'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to adjust certain display settings for Appbar.',
    'file' => 'appbar.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function appbar_permission() {
  return array(
    'use appbar' => array(
      'title' => t('View the application toolbar'),
    ),
  );
}

/**
 * Implements hook_page_build().
 */
function appbar_page_build(&$page) {
  //The _appbar_show() check is in the theme function.
  $page['page_bottom']['appbar'] = array(
    '#type' => 'markup',
    '#markup' => theme('appbar_bar'),
  );
}

/**
 * Implementation of hook_system_info_alter().
 */
function appbar_system_info_alter(&$info, $file, $type) {
  if ($type == 'theme' && isset($info['regions'])) {
    $info['regions'] += array(
      'appbar-left' => t('Appbar (left side)'),
      //'appbar-right' => t('Appbar (right side)'),
    );
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function appbar_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  $module = arg(4);
  $delta = arg(5);
  $form['settings']['appbar'] = array(
    '#type' => 'fieldset',
    '#title' => t('Appbar settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 1,
    '#tree' => TRUE,
  );
  $form['settings']['appbar']['info'] = array(
    '#markup' => '<p>' . t('These settings only apply if this block appears in the Application Toolbar.') . '</p>',
  );
  $form['settings']['appbar']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Display type'),
    '#default_value' => variable_get('appbar_block_display_type_' . $module . '_' . $delta, 'popup'),
    '#required' => TRUE,
    '#options' => array(
      'popup' => t('Popup (block content appears above bar when title is clicked)'),
      'inline' => t('Inline (block content appears directly on the toolbar)'),
      'hover' => t('Hover (block content appears above bar when mouse hovers over it)'),
    ),
  );
  $form['settings']['appbar']['key'] = array(
    '#type' => 'value',
    '#value' => $module . '_' . $delta,
  );
  $form['#submit'][] = 'appbar_block_settings_submit';
}

/**
 * The submit callback to save the block settings.
 */
function appbar_block_settings_submit($form, $form_state) {
  $key = $form_state['values']['appbar']['key'];
  variable_set('appbar_block_display_type_' . $key, $form_state['values']['appbar']['type']);
}

/**
 * Implementation of hook_appbar_css().
 */
function appbar_appbar_css() {
  $path = drupal_get_path('module', 'appbar');
  $blue_path = $path . '/blue.appbar.css';
  $dark_path = $path . '/dark.appbar.css';
  $wunderbar_path = $path . '/wunderbar.appbar.css';
  return array(
    $blue_path => t('Blue (@path)', array('@path' => $blue_path)),
    $dark_path => t('Dark (@path)', array('@path' => $dark_path)),
    $wunderbar_path => t('Wunderbar (@path)', array('@path' => $wunderbar_path)),
  );
}

/**
 * Implementation of hook_theme().
 */
function appbar_theme($existing, $type, $theme, $path) {
  return array(
    'appbar_bar' => array(
      'arguments' => array(
      ),
    ),
  );
}

//================
//THEME FUNCTIONS.
//================

/**
 * Themes the Appbar.
 */
function theme_appbar_bar() {
  if (!user_access('use appbar')) {
    return;
  }
  _appbar_prepare();
  // Update the 'blocks' DB table with the blocks currently exported by modules.
  _block_rehash();
  // Get a list of blocks in the appbar region (from the Context module if necessary).
  $block_list = array();
  if (module_exists('context') && function_exists('context_get_plugin')) {
    $block_list = context_get_plugin('reaction', 'block')->block_list('appbar-left');
  }
  else {
    $block_list = block_list('appbar-left');
  }
  $blocks = '';
  foreach ($block_list as $block) {
    if (!isset($block->content) || !$block->content) {
      continue;
    }
    $key = $block->module . '_' . $block->delta;
    $display_type = variable_get('appbar_block_display_type_'. $key, 'popup');
    if ($display_type == 'inline') {
      // Title is ignored.
      // Don't use normal block markup to avoid awkward styles from the theme.
      $blocks .= '<div class="appbar-block appbar-block-inline" id="appbar-block-' . $key . '">' . render($block->content) . '</div>';
    }
    elseif ($display_type == 'popup') {
      $blocks .= '<div class="appbar-block appbar-block-popup" id="appbar-block-' . $key . '">';
      $blocks .= '<div class="appbar-block-content">' .
        '<div class="appbar-block-controls">';
      if (user_access('administer blocks')) {
        $blocks .= '<span class="appbar-block-configure">' .
          l(t('configure'), 'admin/structure/block/manage/' . $block->module . '/' . $block->delta) .
        '</span>';
      }
      $blocks .= '<span class="appbar-minimize">-</span>' .
        '</div>' .
        '<div>' . render($block->content) . '</div>' .
      '</div>';
      $blocks .= '<span class="appbar-block-title">';
      if (!empty($block->subject)) {
        // $block->subject is sanitized already.
        $blocks .= $block->subject;
      }
      else {
        // There is nothing we could say here that is useful to users, so
        // let's go with something helpful to admin instead.
        $blocks .= t('<no title>');
      }
      $blocks .= '</span>';
      $blocks .= '</div>';
    }
    elseif ($display_type == 'hover') {
      $blocks .= '<div class="appbar-block appbar-block-hover" id="appbar-block-' . $key . '">
        <div class="appbar-block-content">' . render($block->content) .'</div>
        <span class="appbar-block-title">' .
          // $block->subject is sanitized already.
          (empty($block->subject) ? t('<no title>') : $block->subject) .
        '</span>
      </div>';
    }
  }
  $existing = array(
    'appbar-blocks-left' => $blocks,
    'appbar-blocks-right' => '',
  );
  $regions = '';
  foreach ($existing as $name => $region) {
    if (!empty($region)) {
      $regions .= '<div id="' . $name . '" class="appbar-region">' . $region . '</div>';
    }
  }
  return '<div id="appbar-container"><div id="appbar-sub"><div id="appbar">' . $regions . '</div></div></div>';
}

//=================
//HELPER FUNCTIONS.
//=================

/**
 * Adds the CSS and JS to the page.
 */
function _appbar_prepare() {
  _appbar_add_css();
  drupal_add_js(drupal_get_path('module', 'appbar') . '/appbar.js');
}

/**
 * Determines which style to use.
 *
 * @param $list
 *   If TRUE, returns an associative array of filepaths to CSS files.
 *   If FALSE, adds the appropriate CSS to the page.
 */
function _appbar_add_css($list = FALSE) {
  drupal_add_css(drupal_get_path('module', 'appbar') . '/appbar.css');
  if (!$list && variable_get('appbar_css', 'default') != 'default' && file_exists(variable_get('appbar_css', 'default'))) {
    drupal_add_css(variable_get('appbar_css', 'default'));
  }
  if ($list) {
    $css = array('default' => t('Default'));
    $filedir = _appbar_add_style_by_dir(variable_get('file_public_path', conf_path() . '/files') . '/appbar');
    $appbardir = _appbar_add_style_by_dir('sites/all/appbar');
    $imported = module_invoke_all('appbar_css');
    return array_merge($css, $filedir, $appbardir, $imported);
  }
}

/**
 * Finds Appbar styles by directory.
 *
 * @param $filedir
 *   The directory in which to search for styles.
 */
function _appbar_add_style_by_dir($filedir) {
  if (file_exists($filedir)) {
    $files = scandir($filedir);
    foreach ($files as $file) {
      if (drupal_substr($file, -4) == '.css') {
        $name = drupal_ucfirst(drupal_substr($file, 0, -11));
        return array("$filedir/$file" => "$name ($file)");
      }
    }
  }
  return array();
}
