<?php

/**
 * @file
 * Allows users to create a Civicrm dashlet with an embedded Drupal View.
 */

/**
 * Implements hook_help().
 */
function views_civicrm_dashlets_help($path, $arg) {
  switch ($path) {
    case 'admin/help#views_civicrm_dashlets':
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_views_api().
 */
function views_civicrm_dashlets_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_form_alter().
 */
function views_civicrm_dashlets_form_alter(&$form, &$form_state, $form_id) {

  // When on Home > Administration > Structure > Views, set a handler.
  if ($form_id == 'ctools_export_ui_list_form') {
    _views_civicrm_dashlets_view_save_handle($form, $form_state);
  }

  // When view is saved, set a handler.
  if ($form_id == 'views_ui_edit_form') {
    array_unshift($form['actions']['save']['#submit'], '_views_civicrm_dashlets_display_save_prehandle');
  }

  // When view is being deleted, set a handler.
  if ($form_id == 'ctools_export_ui_delete_confirm_form') {
    $form['#submit'][] = '_views_civicrm_dashlets_view_delete_handle';
  }
}

/**
 * Iterate though each dashlet_view display and run display_save_handle on it.
 */
function _views_civicrm_dashlets_display_save_prehandle(&$form, &$form_state) {

  $view = $form_state['view'];

  if (isset($view->changed_display)) {
    foreach ($view->changed_display as $current_display => $value) {
      if (isset($form_state['view']->display[$current_display]) &&
        $form_state['view']->display[$current_display]->display_plugin == 'dashlet_view'
      ) {
        _views_civicrm_dashlets_display_save_handle($form, $form_state, $current_display);
      }
    }
  }
}

/**
 * Whenever a view is disabled/enabled, disable/enable all dashlets.
 */
function _views_civicrm_dashlets_view_save_handle(&$form, &$form_state) {
  // Iterate through each view.
  foreach ($form_state['object']->items as $view) {

    // Set a variable to test whether it is the first time run.
    // If so, set a variable to the value of it's 'disable' field.
    if (variable_get('disabled-run-' . $view->name) != 1) {
      variable_set('disabled-' . $view->name, $view->disabled);
      variable_set('disabled-run-' . $view->name, 1);
    }

    // If a disable/enable has been selected.
    if ($view->disabled != variable_get('disabled-' . $view->name)) {
      if ($view->disabled == '') {
        // Iterate through each display.
        foreach ($view->display as $display) {
          // If the the display is a dashlet_view and the dashlet was active
          // before being disabled.
          if ($display->display_plugin == 'dashlet_view' && variable_get('active-' . $view->name . '-' . $display->id) == 'Yes') {
            // Enable the dashlet.
            _views_civicrm_dashlets_dashlet_event_handler(array(
                'id' => $display->display_options['id'],
              ), 'enable');
          }
        }
        // Set variable of the 'disable' field for later use.
        variable_set('disabled-' . $view->name, $view->disabled);
      }
      else {
        // Iterate through each display.
        foreach ($view->display as $display) {
          // If the the display is a dashlet_view.
          if ($display->display_plugin == 'dashlet_view') {
            // Set the activity of the dashlet for later use.
            variable_set('active-' . $view->name . '-' . $display->id, $display->display_options['is_active']);
            // Disable the dashlet.
            _views_civicrm_dashlets_dashlet_event_handler(array(
                'id' => $display->display_options['id'],
              ), 'disable');
          }
        }
        // Set variable of the 'disable' field for later use.
        variable_set('disabled-' . $view->name, $view->disabled);
      }
    }
  }
}

/**
 * When a view is deleted, delete all dashlets inside.
 */
function _views_civicrm_dashlets_view_delete_handle(&$form, &$form_state) {
  foreach ($form_state['item']->display as $display) {
    if ($display->display_plugin == 'dashlet_view' && isset($display->display_options['id'])) {
      $id = $display->display_options['id'];
      _views_civicrm_dashlets_dashlet_event_handler(array('id' => $id), 'delete');
    }
  }
}

/**
 * Submit handler to set up dashlet manipulation on dashlet-display save.
 */
function _views_civicrm_dashlets_display_save_handle(&$form, &$form_state, &$current_display) {

  $view = $form_state['view'];

  // If display is set to be deleted, delete dashlet.
  if (isset($view->display[$current_display]->deleted) && $view->display[$current_display]->deleted) {
    $id = $view->display[$current_display]->display_options['id'];
    _views_civicrm_dashlets_dashlet_event_handler(array('id' => $id), 'delete');
    return;
  }

  // If all settings aren't set, return message stating need to set all
  // settings.
  if (!(isset($view->display[$current_display]->display_options['is_fullscreen']) &&
      isset($view->display[$current_display]->display_options['is_active']) &&
      isset($view->display[$current_display]->display_options['weight'])
    )) {
    drupal_set_message(t('Please set all Dashlet Settings first.'), 'error');
    return;
  }

  // Check and store if dashlet display is enabled.
  $active = isset($view->display[$current_display]->display_options['enabled']) ? $view->display[$current_display]->display_options['enabled'] : TRUE;
  $id = isset($view->display[$current_display]->display_options['id']) ? $view->display[$current_display]->display_options['id'] : "";

  // Set args to be passed to dashlet-manipulation handler.
  $args = array(
    'id' => $id,
    'label' => $view->display[$current_display]->display_title,
    'name' => $view->vid . '-' . $view->display[$current_display]->id,
    'fullscreen' => $view->display[$current_display]->display_options['is_fullscreen'],
    'active' => $view->display[$current_display]->display_options['is_active'],
    'weight' => $view->display[$current_display]->display_options['weight'],
    'path' => $view->display[$current_display]->display_options['path'],
  );

  // If id is not set for this display then $action = 'create'.
  if (empty($args['id'])) {
    unset($args['id']);
  }
  else {

    // Get the dashlet being manipulated.
    try {
      civicrm_initialize();
      $dashlet = civicrm_api3('dashboard', 'get', array(
          'id' => $args['id'],
        ));
    }
    catch (CiviCRM_API3_Exception $e) {
      // Handle error here.
      $error_message = $e->getMessage();
      $error_code = $e->getErrorCode();
      $error_data = $e->getExtraParams();
      return array(
        'error' => $error_message,
        'error_code' => $error_code,
        'error_data' => $error_data,
      );
    }

    // Check for if the dashlet still exists.
    // If not, set the id field of the dashlet display to '' and remove the 'id'
    // key from $args.
    if (!empty($dashlet['values'])) {

      // Cases to check and set is_active.
      if ($dashlet['values'][$args['id']]['is_active'] != $active) {
        switch ($active) {
          case 0:
            $args['active'] = 'No';
            $view->display_handler->set_option('is_active', 'No');
            break;

          case 1:
            $args['active'] = 'Yes';
            $view->display_handler->set_option('is_active', 'Yes');
            break;
        }
      }
    }
    else {
      $view->display_handler->set_option('id', '');
      unset($args['id']);
    }
  }

  // Manipulate a dashlet.
  _views_civicrm_dashlets_dashlet_event_handler($args, 'create', $view);
}

/**
 * Use the CiviCRM API to manipulate a dashlet.
 */
function _views_civicrm_dashlets_dashlet_event_handler($args, $action, &$view = NULL) {

  switch ($action) {

    // Create a dashlet.
    case 'create':
      global $base_url;

      // Read $args and create dashlet-accepting arguments.
      $args['fullscreen'] == 'Yes' ? $fullscreen_url = '?reset=1&snippet=5&context=dashletFullscreen' : $fullscreen_url = '';
      $is_fullscreen = $fullscreen_url == '' ? 0 : 1;
      $args['active'] == 'Yes' ? $is_active = 1 : $is_active = 0;
      $path = $base_url . '/' . $args['path'];

      // Initialize dashlet array.
      $dashlet = array(
        'label' => $args['label'],
        'name' => $args['name'],
        'is_active' => $is_active,
        'url' => $path,
        'fullscreen_url' => $path . $fullscreen_url,
        'is_fullscreen' => $is_fullscreen,
        'weight' => $args['weight'],
        'permission' => 'access CiviCRM',
      );

      if (isset($args['id'])) {
        $dashlet['id'] = $args['id'];
      }

      // Create a dashlet.
      try {
        civicrm_initialize();
        $returnarray = civicrm_api3('dashboard', 'create', $dashlet);
      }
      catch (CiviCRM_API3_Exception $e) {
        // Handle error here.
        $error_message = $e->getMessage();
        $error_code = $e->getErrorCode();
        $error_data = $e->getExtraParams();
        return array(
          'error' => $error_message,
          'error_code' => $error_code,
          'error_data' => $error_data,
        );
      }

      // Set id field of display to the id returned from the create function.
      if (!isset($dashlet['id'])) {
        $view->display_handler->set_option('id', $returnarray['id']);
      }

      $view->save();
      break;

    // Delete a dashlet.
    case 'delete':
      try {
        civicrm_initialize();
        civicrm_api3('dashboard', 'delete', array(
            'id' => $args['id'],
          ));
      }
      catch (CiviCRM_API3_Exception $e) {
        // Handle error here.
        $error_message = $e->getMessage();
        $error_code = $e->getErrorCode();
        $error_data = $e->getExtraParams();
        return array(
          'error' => $error_message,
          'error_code' => $error_code,
          'error_data' => $error_data,
        );
      }
      break;

    // Disable a dashlet.
    case 'disable':
      try {
        civicrm_initialize();
        civicrm_api3('dashboard', 'create', array(
            'id' => $args['id'],
            'is_active' => 0,
          ));
      }
      catch (CiviCRM_API3_Exception $e) {
        // Handle error here.
        $error_message = $e->getMessage();
        $error_code = $e->getErrorCode();
        $error_data = $e->getExtraParams();
        return array(
          'error' => $error_message,
          'error_code' => $error_code,
          'error_data' => $error_data,
        );
      }
      break;

    // Enable a dashlet.
    case 'enable':
      try {
        civicrm_initialize();
        civicrm_api3('dashboard', 'create', array(
            'id' => $args['id'],
            'is_active' => 1,
          ));
      }
      catch (CiviCRM_API3_Exception $e) {
        // Handle error here.
        $error_message = $e->getMessage();
        $error_code = $e->getErrorCode();
        $error_data = $e->getExtraParams();
        return array(
          'error' => $error_message,
          'error_code' => $error_code,
          'error_data' => $error_data,
        );
      }
      break;
  }
}

/**
 * Callback function for $items[$path] that creates the view passed.
 */
function _views_civicrm_dashlets_menu_callback($name, $display_id) {
  // Create the view passed.
  print views_embed_view($name, $display_id);
}

/**
 * Delivery callback function for $items[$path] that renders the view passed.
 */
function _views_civicrm_dashlets_menu_delivery_callback($page_callback_result) {
  $content = drupal_render($page_callback_result);
  print $content;

  // Add CSS ans JS files, add some markup.
  $html = '<html><head><title></title>' . drupal_get_css() . drupal_get_js() . '</head><body class="dashlet-ajax-load">' . $content . '</body></html>';
  print $html;

  // Perform end-of-request tasks.
  drupal_page_footer();
}
