<?php

/**
 * @file
 * Install, update and uninstall functions for affiliate store module.
 */

/**
 * Implements hook_requirements().
 */
function affiliate_store_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase === 'runtime') {
    $requirements['affiliate_store_hmac'] = array();
    $requirements['affiliate_store_json'] = array();
    $has_libraries = module_exists('libraries');
    $libraries = $has_libraries ? libraries_get_libraries() : array();

    if (!function_exists('hash_hmac') && !isset($libraries['phpseclib'])) {
      $requirements['affiliate_store_hmac'] = array(
        'value' => $t('Not supported'),
        'description' => $t(
          'Your PHP version does not support HMAC generation. You must ' .
          'install !libraries and !phpseclib. See Affiliate Store module ' .
          'README.txt for details.',
          array(
            '!libraries' => l(
              $t('Libraries API module'),
              'http://drupal.org/project/libraries'
            ),
            '!phpseclib' => l(
              $t('PHP Secure Communications Library'),
              'http://phpseclib.sourceforge.net'
            ),
          )
        ),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    if (!function_exists('json_decode') && !isset($libraries['Services_JSON'])
    ) {
      $requirements['affiliate_store_json'] = array(
        'value' => $t('Not supported'),
        'description' => $t(
          'Your PHP version does not support JSON decoding. You must install ' .
          '!libraries and !services_json. See Affiliate Store module ' .
          'README.txt for details.',
          array(
            '!libraries' => l(
              $t('Libraries API module'),
              'http://drupal.org/project/libraries'
            ),
            '!services_json' => l(
              $t('Services_JSON PEAR library'),
              'http://pear.php.net/package/Services_JSON'
            ),
          )
        ),
        'severity' => REQUIREMENT_ERROR,
      );
    }

    $requirements['affiliate_store_hmac'] += array(
      'title' => $t('Affiliate Store HMAC generation'),
      'value' => $t('Supported'),
      'severity' => REQUIREMENT_OK,
    );
    $requirements['affiliate_store_json'] += array(
      'title' => $t('Affiliate Store JSON decoding'),
      'value' => $t('Supported'),
      'severity' => REQUIREMENT_OK,
    );
  }
  return $requirements;
}

/**
 * Implements hook_enable().
 */
function affiliate_store_enable() {
  // Make sure term reference field type is available.
  field_associate_fields('taxonomy');

  // Initialize or restore node type default settings. This is needed as
  // comment settings and vocabularies association will be deleted by comment
  // and taxonomy module whenever this module is disabled.
  // Default affiliate store product comment settings is disable comment.
  if (variable_get('comment_affiliate_store_product') === NULL) {
    variable_set('comment_affiliate_store_product', 0);
  }
  // Default affiliate store product workflow settings is publish node only.
  if (variable_get('node_options_affiliate_store_product') === NULL) {
    variable_set('node_options_affiliate_store_product', array('status'));
  }

  // Create or update necessary vocabularies, so that module managed
  // vocabularies are correctly associated with affiliate store product.
  // Ensure the affiliate store product node type is available.
  node_types_rebuild();
  $types = node_type_get_types();
  affiliate_store_include('common');
  foreach (array_keys(affiliate_store_vocabularies()) as $vocab) {
    $vid = variable_get("affiliate_store_vid_$vocab", 0);
    affiliate_store_save_vocabulary($vocab, $vid);
  }
  // Add body field to affiliate store product after term reference fields.
  node_add_body_field($types['affiliate_store_product'], t('Description'));

  // Grant access affiliate store product permission to anonymous and
  // authenticated users by default if they do not have the permission.
  $rids = array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID);
  $roles = array_diff_key(
    array_intersect_key(user_roles(), array_flip($rids)),
    user_roles(FALSE, 'access affiliate store product')
  );
  foreach ($roles as $rid => $role) {
    user_role_grant_permissions($rid, array('access affiliate store product'));
    $message = t(
      'Affiliate store: @role has been granted permission to view affiliate ' .
      'store product.',
      array('@role' => $role)
    );
    drupal_set_message($message);
  }
}

/**
 * Implements hook_install().
 */
function affiliate_store_install() {
  $message = st(
    'Affiliate store module has been installed. Configure module settings at ' .
    '<a href="@settings">Administration > Structure > Affiliate store</a>.',
    array('@settings' => url('admin/structure/affiliate-store'))
  );
  drupal_set_message($message);
}

/**
 * Implements hook_uninstall().
 */
function affiliate_store_uninstall() {
  // Make sure required modules are loaded.
  drupal_load('module', 'taxonomy');
  drupal_load('module', 'affiliate_store');

  // Delete all affiliate store nodes.
  $nids = db_query("SELECT DISTINCT nid FROM {affiliate_store_product}")
    ->fetchCol();
  node_delete_multiple($nids);

  // Remove body field from affiliate store product.
  $instance = field_info_instance('node', 'body', 'affiliate_store_product');
  if ($instance) {
    field_delete_instance($instance);
  }

  // Delete all affiliate store vocabularies and terms, and their associated
  // fields.
  $vocabs = array_keys(affiliate_store_vocabularies());
  foreach ($vocabs as $vocab) {
    $vid = variable_get("affiliate_store_vid_$vocab", 0);
    if ($vid) {
      taxonomy_vocabulary_delete($vid);
    }
    field_delete_field("affiliate_store_$vocab");
  }
  field_delete_field('affiliate_store_synonym');
  // Purge field data now to allow Taxonomy module to be uninstalled if these
  // are the only fields remaining.
  field_purge_batch(10);

  // Delete variables.
  variable_del('affiliate_store_api_key');
  variable_del('affiliate_store_auto_update');
  variable_del('affiliate_store_last_update');
  variable_del('affiliate_store_message');
  variable_del('affiliate_store_product_call_to_action');
  variable_del('affiliate_store_product_use_general');
  variable_del('affiliate_store_retrieve_limit');
  variable_del('affiliate_store_smartcase_stop_words');
  variable_del('affiliate_store_term_case');
  variable_del('affiliate_store_title');
  variable_del('affiliate_store_update_throttle');
  foreach ($vocabs as $vocab) {
    variable_del("affiliate_store_vid_$vocab");
  }
  variable_del('comment_affiliate_store_product');
  variable_del('node_options_affiliate_store_product');

  drupal_set_message(st('Affiliate store module has been uninstalled.'));
}

/**
 * Implements hook_schema().
 */
function affiliate_store_schema() {
  $schema['affiliate_store_batch'] = array(
    'description' => 'Affiliate store batch queue.',
    'fields' => array(
      'bid' => array(
        'description' => 'Batch ID.',
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Batch type for identifying its function group.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'hash' => array(
        'description' => 'MD5 hash of initial batch data.',
        'type' => 'char',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'batch' => array(
        'description' => 'Batch data.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'start_time' => array(
        'description' => 'Timestamp when the batch will be active.',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('bid'),
    'indexes' => array(
      'type' => array('type'),
      'hash' => array('hash'),
      'start_time' => array('start_time'),
    ),
  );

  $schema['affiliate_store_network'] = array(
    'description' => 'Map of permanent network titles to term IDs.',
    'fields' => array(
      'nwtid' => array(
        'description' => 'Network term ID from {taxonomy_term_data}.tid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'Permanent network title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nwtid'),
    'unique keys' => array(
      'title' => array('title'),
    ),
    'foreign_keys' => array(
      'term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('nwtid' => 'tid'),
      ),
    ),
  );

  $schema['affiliate_store_merchant'] = array(
    'description' => 'Map of permanent merchant titles to term IDs.',
    'fields' => array(
      'mtid' => array(
        'description' => 'Merchant term ID from {taxonomy_term_data}.tid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'Permanent merchant title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('mtid'),
    'unique keys' => array(
      'title' => array('title'),
    ),
    'foreign_keys' => array(
      'term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('mtid' => 'tid'),
      ),
    ),
  );

  $schema['affiliate_store_category'] = array(
    'description' => 'Map of permanent product category titles to term IDs.',
    'fields' => array(
      'ctid' => array(
        'description' => (
          'Product category term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'Permanent product category title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('ctid'),
    'unique keys' => array(
      'title' => array('title'),
    ),
    'foreign_keys' => array(
      'term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('ctid' => 'tid'),
      ),
    ),
  );

  $schema['affiliate_store_subcategory'] = array(
    'description' => 'Map of permanent product subcategory titles to term IDs.',
    'fields' => array(
      'sctid' => array(
        'description' => (
          'Product subcategory term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'Permanent product subcategory title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('sctid'),
    'unique keys' => array(
      'title' => array('title'),
    ),
    'foreign_keys' => array(
      'term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('sctid' => 'tid'),
      ),
    ),
  );

  $schema['affiliate_store_subsubcategory'] = array(
    'description' => (
      'Map of permanent product subsubcategory titles to term IDs.'
    ),
    'fields' => array(
      'ssctid' => array(
        'description' => (
          'Product subsubcategory term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'Permanent product subsubcategory title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('ssctid'),
    'unique keys' => array(
      'title' => array('title'),
    ),
    'foreign_keys' => array(
      'term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('ssctid' => 'tid'),
      ),
    ),
  );

  $schema['affiliate_store_subscription'] = array(
    'description' => (
      "Map of Hub subscription IDs to module's network, merchant, category, " .
      "subcategory, and subsubcategory term IDs."
    ),
    'fields' => array(
      'ssnid' => array(
        'description' => 'Subscription ID from Hub.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nwtid' => array(
        'description' => 'Network term ID from {taxonomy_term_data}.tid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'mtid' => array(
        'description' => 'Merchant term ID from {taxonomy_term_data}.tid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ctid' => array(
        'description' => (
          'Product category term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sctid' => array(
        'description' => (
          'Product subcategory term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ssctid' => array(
        'description' => (
          'Product subsubcategory term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rev' => array(
        'description' => 'Subscription local revision number.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'hub_rev' => array(
        'description' => 'Hub revision number when subscription last updated.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'refetch' => array(
        'description' => 'Whether the subscription is to be refetched.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('ssnid'),
    'indexes' => array(
      'refetch_rev' => array('refetch', 'rev', 'hub_rev'),
    ),
    'foreign_keys' => array(
      'network_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('nwtid' => 'tid'),
      ),
      'merchant_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('mtid' => 'tid'),
      ),
      'category_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('ctid' => 'tid'),
      ),
      'subcategory_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('sctid' => 'tid'),
      ),
      'subsubcategory_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('ssctid' => 'tid'),
      ),
    ),
  );

  // Product does not use ssnid from subscription table, this allows user
  // to customize product's associated terms or create custom products.
  $schema['affiliate_store_product'] = array(
    'description' => 'Affiliate store product.',
    'fields' => array(
      'vid' => array(
        'description' => 'Product node revision ID from {node_revision}.vid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'Product node ID from {node}.nid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nwtid' => array(
        'description' => 'Network term ID from {taxonomy_term_data}.tid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'mtid' => array(
        'description' => 'Merchant term ID from {taxonomy_term_data}.tid.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ctid' => array(
        'description' => (
          'Product category term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sctid' => array(
        'description' => (
          'Product subcategory term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ssctid' => array(
        'description' => (
          'Product subsubcategory term ID from {taxonomy_term_data}.tid.'
        ),
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'Product ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'price' => array(
        'description' => 'Product price.',
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'currency' => array(
        'description' => 'Product price currency',
        'type' => 'char',
        'length' => 3,
        'not null' => TRUE,
        'default' => 'USD',
      ),
      'url' => array(
        'description' => 'Product URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'thumb_url' => array(
        'description' => 'Product thumbnail URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'image_url' => array(
        'description' => 'Product image URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'nid' => array('nid'),
      'category' => array('ctid', 'sctid', 'ssctid'),
      'subscription_pid' => array(
        'nwtid', 'mtid', 'ctid', 'sctid', 'ssctid', 'pid',
      ),
    ),
    'foreign_keys' => array(
      'node_revision' => array(
        'table' => 'node_revision',
        'columns' => array('vid' => 'vid'),
      ),
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'network_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('nwtid' => 'tid'),
      ),
      'merchant_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('mtid' => 'tid'),
      ),
      'category_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('ctid' => 'tid'),
      ),
      'subcategory_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('sctid' => 'tid'),
      ),
      'subsubcategory_term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('ssctid' => 'tid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Remove extra fields created automatically during Drupal update.
 *
 * These extra fields hold term association info that can be recreated more
 * cleanly from table {affiliate_store_product} after update.
 */
function affiliate_store_update_7000() {
  drupal_load('module', 'taxonomy');
  $vocabs = array(
    'network', 'merchant', 'category', 'subcategory', 'subsubcategory',
  );
  foreach ($vocabs as $name) {
    $vid = variable_get("affiliate_store_vid_$name");
    $vocab = taxonomy_vocabulary_load($vid);
    if (!$vocab) {
      continue;
    }

    // Remove the automatically created field for holding term association.
    field_delete_field("taxonomy_$vocab->machine_name");
  }

  // Remove taxonomyextra field instance from affiliate store product that
  // holds any extra terms.
  $instance = field_read_instance(
    'node', 'taxonomyextra', 'affiliate_store_product',
    array('include_inactive' => TRUE)
  );
  if ($instance) {
    field_delete_instance($instance);
  }
}

/**
 * Assign machine names to vocabularies managed by module.
 */
function affiliate_store_update_7001() {
  drupal_load('module', 'taxonomy');
  $vocabs = array(
    'network' => 'networks',
    'merchant' => 'merchants',
    'category' => 'categories',
    'subcategory' => 'subcategories',
    'subsubcategory' => 'subsubcategories',
  );
  foreach ($vocabs as $name => $plural) {
    $vid = variable_get("affiliate_store_vid_$name");
    $vocab = taxonomy_vocabulary_load($vid);
    if (!$vocab) {
      continue;
    }

    // Rename the automatically assigned machine name to be nicer.
    $vocab->machine_name = "affiliate_store_$plural";
    taxonomy_vocabulary_save($vocab);
  }
}

/**
 * Add term synonym fields to vocabularies managed by module.
 */
function affiliate_store_update_7002() {
  drupal_load('module', 'taxonomy');
  $field_name = 'affiliate_store_synonym';
  $entity_type = 'taxonomy_term';

  // Create synonym field.
  if (!field_read_field($field_name, array('include_inactive' => TRUE))) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'entity_types' => array($entity_type),
    );
    field_create_field($field);
  }

  $vocabs = array('category', 'subcategory', 'subsubcategory');
  foreach ($vocabs as $name) {
    $vid = variable_get("affiliate_store_vid_$name");
    $vocab = taxonomy_vocabulary_load($vid);
    if (!$vocab) {
      continue;
    }

    $bundle = $vocab->machine_name;

    // Create synonym instance.
    $instance = field_read_instance(
      $entity_type, $field_name, $bundle,
      array('include_inactive' => TRUE)
    );
    if (!$instance) {
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'label' => t('Synonym'),
        'display' => array(
          'default' => array('label' => 'hidden', 'type' => 'hidden'),
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Add term reference fields to affiliate store product node type.
 */
function affiliate_store_update_7003() {
  drupal_load('module', 'taxonomy');
  $entity_type = 'node';
  $bundle = 'affiliate_store_product';
  $vocabs = array(
    'network', 'merchant', 'category', 'subcategory', 'subsubcategory',
  );
  foreach ($vocabs as $name) {
    $vid = variable_get("affiliate_store_vid_$name");
    $vocab = taxonomy_vocabulary_load($vid);
    if (!$vocab) {
      continue;
    }

    $field_name = "affiliate_store_$name";

    // Create term reference field.
    if (!field_read_field($field_name, array('include_inactive' => TRUE))) {
      $field = array(
        'field_name' => $field_name,
        'type' => 'taxonomy_term_reference',
        'entity_types' => array($entity_type),
        'settings' => array(
          'allowed_values' => array(
            array(
              'vocabulary' => $vocab->machine_name,
              'parent' => 0,
            ),
          ),
        ),
      );
      field_create_field($field);
    }

    // Create term reference instance.
    $instance = field_read_instance(
      $entity_type, $field_name, $bundle,
      array('include_inactive' => TRUE)
    );
    if (!$instance) {
      $instances = array(
        'network' => array(
          'required' => TRUE,
          'display' => array(
            'default' => array('label' => 'hidden', 'type' => 'hidden'),
            'teaser' => array('label' => 'hidden', 'type' => 'hidden'),
          ),
        ),
        'merchant' => array(
          'required' => TRUE,
          'display' => array(
            'default' => array('label' => 'hidden', 'type' => 'hidden'),
            'teaser' => array('label' => 'hidden', 'type' => 'hidden'),
          ),
        ),
        'category' => array('required' => FALSE),
        'subcategory' => array('required' => FALSE),
        'subsubcategory' => array('required' => FALSE),
      );
      $instance_base = array(
        'field_name' => $field_name,
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'label' => $vocab->name,
        'display' => array(
          'default' => array('label' => 'hidden'),
          'teaser' => array('label' => 'hidden'),
        ),
      );
      field_create_instance($instances[$name] + $instance_base);
    }
  }

  // Remove old variable that records IDs of vocabulary whose terms to hide.
  // Deprecated via field display settings.
  variable_del('affiliate_store_product_hide_vocabularies');
}

/**
 * Convert term synonyms to field storage.
 */
function affiliate_store_update_7004(&$sandbox) {
  drupal_load('module', 'taxonomy');
  if (!isset($sandbox['progress'])) {
    if (!db_table_exists('taxonomy_term_synonym')) {
      // Skip if the old table does not exist.
      return;
    }

    $sandbox['data'] = array();
    $vocabs = array(
      'category' => 'ctid',
      'subcategory' => 'sctid',
      'subsubcategory' => 'ssctid',
    );
    foreach ($vocabs as $name => $col) {
      $vid = variable_get("affiliate_store_vid_$name");
      $vocab = taxonomy_vocabulary_load($vid);
      if (!$vocab) {
        continue;
      }

      $result = db_query(
        "SELECT ts.tid, ts.name FROM {taxonomy_term_synonym} AS ts
        JOIN {affiliate_store_$name} AS v ON v.$col = ts.tid"
      );
      foreach ($result as $synonym) {
        // Only retain the first defined synonym for each term.
        if (!isset($sandbox['data'][$synonym->tid])) {
          $synonym->vocab_machine_name = $vocab->machine_name;
          $sandbox['data'][$synonym->tid] = $synonym;
        }
      }
    }
    $sandbox['progress'] = 0;
    $sandbox['total'] = count($sandbox['data']);
    if (!$sandbox['total']) {
      return;
    }
  }

  $synonym = current($sandbox['data']);
  $field_name = 'affiliate_store_synonym';
  $fields = array(
    'entity_type' => 'taxonomy_term',
    'bundle' => $synonym->vocab_machine_name,
    'entity_id' => $synonym->tid,
    'revision_id' => $synonym->tid,
    'language' => LANGUAGE_NONE,
    'delta' => 0,
  );
  db_insert("field_data_$field_name")
    ->fields($fields + array("{$field_name}_value" => $synonym->name))
    ->execute();
  db_insert("field_revision_$field_name")
    ->fields($fields + array("{$field_name}_value" => $synonym->name))
    ->execute();
  // Remove from old table once converted.
  db_delete('taxonomy_term_synonym')
    ->condition('tid', $synonym->tid)
    ->execute();
  array_shift($sandbox['data']);
  ++$sandbox['progress'];

  $sandbox['#finished'] = $sandbox['data'] ?
    $sandbox['progress'] / $sandbox['total'] : 1;
}

/**
 * Re-associate affiliate store product nodes with terms.
 */
function affiliate_store_update_7005(&$sandbox) {
  $terms = array(
    'network' => 'nwtid',
    'merchant' => 'mtid',
    'category' => 'ctid',
    'subcategory' => 'sctid',
    'subsubcategory' => 'ssctid',
  );
  if (!isset($sandbox['progress'])) {
    // The is_current field is used to determine whether a given node is the
    // latest revision.
    $cols = array('p.nid', 'p.vid', 'n.nid AS is_current');
    foreach ($terms as $col) {
      $cols[] = "p.$col";
    }
    $cols = implode(', ', $cols);
    $sandbox['data'] = db_query(
      "SELECT $cols FROM {affiliate_store_product} AS p
      LEFT JOIN {node} AS n ON n.vid = p.vid"
    )->fetchAllAssoc('vid');
    $sandbox['progress'] = 0;
    $sandbox['total'] = count($sandbox['data']);
    if (!$sandbox['total']) {
      return;
    }
  }

  $product = current($sandbox['data']);
  $fields = array(
    'entity_type' => 'node',
    'bundle' => 'affiliate_store_product',
    'entity_id' => $product->nid,
    'revision_id' => $product->vid,
    'language' => LANGUAGE_NONE,
    'delta' => 0,
  );
  foreach ($terms as $vocab => $col) {
    $field_name = "affiliate_store_$vocab";
    if ($product->$col) {
      if ($product->is_current) {
        db_insert("field_data_$field_name")
          ->fields($fields + array("{$field_name}_tid" => $product->$col))
          ->execute();
      }

      db_insert("field_revision_$field_name")
        ->fields($fields + array("{$field_name}_tid" => $product->$col))
        ->execute();
    }
  }
  array_shift($sandbox['data']);
  ++$sandbox['progress'];

  $sandbox['#finished'] = $sandbox['data'] ?
    $sandbox['progress'] / $sandbox['total'] : 1;
}

/**
 * Remove unused variable after lightbox integration is moved into submodule.
 */
function affiliate_store_update_7100() {
  // If the variable value has been set, transfer it to the new variable.
  $value = variable_get('affiliate_store_lightbox', NULL);
  if ($value !== NULL) {
    variable_set('affiliate_store_lightbox_for_product', $value);
  }

  variable_del('affiliate_store_lightbox');
}
