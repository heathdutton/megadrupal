<?php

/**
 * Implements hook_menu().
 * @return array
 */
function pickadate_menu() {
  $items = array();

  $items['admin/config/system/pickadate'] = array(
    'title' => 'Pickadate.js',
    'description' => 'Administer basic settings for the Pickadate.js module.',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pickadate_admin_settings'),
    'file' => 'includes/pickadate.admin.inc',
  );

  return $items;
}

/**
 * Implements of hook_theme().
 */
function pickadate_theme() {
  return array(
    'pickadate' => array(
      'variables' => array(
        'items'   => NULL,
        'options' => NULL,
        'entity'  => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 * @return array
 */
function pickadate_libraries_info() {
  $libraries['pickadate'] = array(
    'name' => 'Pickadate',
    'vendor url' => 'https://github.com/amsul/pickadate.js',
    'download url' => 'https://github.com/amsul/pickadate.js',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'lib/picker.date.js',
      'pattern' => '@v([0-9]+.[0-9]+.[0-9])@',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'picker.js',
        'picker.date.js',
        'picker.time.js',
      ),
      'css' => array(
        'themes/classic.css',
        'themes/classic.date.css',
        'themes/classic.time.css',
        'themes/default.css',
        'themes/default.date.css',
        'themes/default.time.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'compressed/picker.js',
            'compressed/picker.date.js',
            'compressed/picker.time.js',
          ),
          'css' => array(
            'compressed/themes/classic.css',
            'compressed/themes/classic.date.css',
            'compressed/themes/classic.time.css',
            'compressed/themes/default.css',
            'compressed/themes/default.date.css',
            'compressed/themes/default.time.css',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_info().
 */
function pickadate_field_info() {
  return array(
    'pickadate' => array(
      'label' => t('Pickadate'),
      'description' => t('This field stores a license plate number in the database.'),
      'default_widget' => 'pickadate_field',
      'default_formatter' => 'pickadate_default',
    ),
  );
}

/**
 * Implements of hook_field_widget_info().
 * @return array
 */
function pickadate_field_widget_info() {
  return array(
    'pickadate_field' => array(
      'label' => t('Pickadate'),
      'field types' => array('pickadate', 'datetime'),
      'settings' => pickadate_date_default_settings(),
    ),
  );
}

/**
 * Implements of hook_field_widget_settings_form().
 * @param $field
 * @param $instance
 * @return array
 */
function pickadate_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings']['pickadate'];

  $form = '';
  $options = array();

  #if ($field['type'] == 'pickadate') {
    $form['pickadate'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#title' => t('Pickadate.js Settings'),
    );

    $form['pickadate']['format'] = array(
      '#type' => 'textfield',
      '#title' => t('Date Format'),
      '#default_value' => $settings['format'],
      '#description' => t('Choose the date format you want to display the input value as, after the user selects a date. Note that this format must be in a !link, not PHP formats.', array('!link' => l('compatible Javascript format', 'http://amsul.ca/pickadate.js/date.htm#formatting-rules', array('external' => TRUE, 'attributes' => array('target' => '_blank'))))),
    );

    $form['pickadate']['showMonthsShort'] = array(
      '#type' => 'select',
      '#title' => t('Show Short Months'),
      '#default_value' => $settings['showMonthsShort'],
      '#options' => array(FALSE => 'No', TRUE => 'Yes'),
      '#description' => t('Show short months at the top of the pickadate popup?'),
      '#weight' => 3,
    );
  #}

  return $form;
}

/**
 * Implements hook_field_widget_form().
 * @param $form
 * @param $form_state
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 * @param $delta
 * @param $element
 * @return array
 */
function pickadate_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $pickadate_lib = libraries_get_path('pickadate') . '/lib/compressed';
  $form['#attached']['js'][] = $pickadate_lib . '/picker.js';
  $form['#attached']['js'][] = $pickadate_lib . '/picker.date.js';
  $form['#attached']['js'][] = $pickadate_lib . '/picker.time.js';

  $is_default = FALSE;
  if (!empty($instance['widget']['is_new']) && !isset($items[$delta]['value'])) {
    $items = date_default_value($field, $instance, $langcode);
    $is_default = TRUE;
  }

  $element += array(
    '#type' => 'textfield',
    '#title' => t('Date'),
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
    '#autocomplete_path' => FALSE,
    '#process' => array('pickadate_date_process'),
    '#settings' => $instance['widget']['settings']['pickadate'],
    #'#element_validate' => array('pickadate_date_widget_validate'),
  );

  return array('value' => $element);
}

function pickadate_date_widget_validate() {
  return true;
}

/**
 * Implements hook_field_presave().
 * Convert the value to a unix timestamp before saving.
 */
function pickadate_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['pickadate']['date'])) {
      $items[$delta]['date'] = strtotime($item['pickadate']['date']);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function pickadate_field_is_empty($item, $field) {
  if (empty($item['pickadate']['date'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_element_info().
 * @return mixed
 */
function pickadate_element_info() {
  $types = array();

  $types['pickadate_date'] = array(
    '#input' => TRUE,
    '#element_validate' => array('pickadate_date_validate'),
    '#process' => array('pickadate_date_process'),
    '#autocomplete_path' => FALSE,
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
    '#settings' => pickadate_date_default_settings(),
    '#attributes' => array(
      'class' => array('datepicker', 'picker__input'),
    ),
  );

  $types['pickadate_time'] = array(
    '#input' => TRUE,
    '#element_validate' => array('pickadate_time_validate'),
    '#process' => array('pickadate_time_process'),
    '#autocomplete_path' => FALSE,
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
    '#settings' => pickadate_time_default_settings(),
    '#attributes' => array(
      'class' => array('timepicker', 'picker__input'),
    ),
  );

  // @todo: need one for date & time

  return $types;
}

/**
 * Element validate callback for Pickadate date form field.
 * @param array $element
 */
function pickadate_date_validate($element) {
  // form_error($element, t('Please enter a valid date.'));
}

/**
 * Element process callback for Pickadate date entry.
 * @param $element
 * @param $form_state
 * @param $form
 * @return mixed
 */
function pickadate_date_process($element, &$form_state, $form) {
  if (isset($element['#settings'])) {
    drupal_add_js(array('pickadate' => array('dateSettings' => array($element['#id'] => json_encode($element['#settings'])))), array('type' => 'setting'));
  }

  return $element;
}

/**
 * Element validate callback for Pickadate time form field.
 * @param array $element
 */
function pickadate_time_validate($element) {
  // form_error($element, t('Please enter a valid time.'));
}

/**
 * Element process callback for Pickadate time entry.
 * @param $element
 * @param $form_state
 * @param $form
 * @return mixed
 */
function pickadate_time_process($element, &$form_state, $form) {
  if (isset($element['#settings'])) {
    drupal_add_js(array('pickadate' => array('timeSettings' => array($element['#id'] => json_encode($element['#settings'])))), array('type' => 'setting'));
  }

  return $element;
}

/**
 * Return default settings for the Pickadate date field. Pass in values to override defaults.
 * @param $values
 * @return array
 */
function pickadate_date_default_settings(array $values = array()) {
  $settings = array(
    'monthsFull' => array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),
    'monthsShort' => array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'),
    'weekdaysFull' => array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),
    'weekdaysShort' => array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'),
    'showMonthsShort' => NULL,
    'showWeekdaysFull' => NULL,

    // Buttons
    'today' => 'Today',
    'clear' => 'Clear',

    // Formats
    'format' => 'd mmmm, yyyy',
    'formatSubmit' => NULL,
    'hiddenSuffix' => '_submit',

    // Dropdown selectors
    'selectYears' => NULL,
    'selectMonths' => NULL,

    // First day of the week
    'firstDay' => NULL,

    // Date limits
    'min' => NULL,
    'max' => NULL,

    // Disable dates
    'disable' => NULL,

    // Root container
    'container' => NULL,

    // Events
    'onStart' => NULL,
    'onRender' => NULL,
    'onOpen' => NULL,
    'onClose' => NULL,
    'onSet' => NULL,
    'onStop' => NULL,

    // Classes
    'klass' => array(
      // The element states
      'input' => 'picker__input',
      'active' => 'picker__input--active',

      // The root picker and states *
      'picker' => 'picker',
      'opened' => 'picker--opened',
      'focused' => 'picker--focused',

      // The picker holder
      'holder' => 'picker__holder',

      // The picker frame, wrapper, and box
      'frame' => 'picker__frame',
      'wrap' => 'picker__wrap',
      'box' => 'picker__box',

      // The picker header
      'header' => 'picker__header',

      // Month navigation
      'navPrev' => 'picker__nav--prev',
      'navNext' => 'picker__nav--next',
      'navDisabled' => 'picker__nav--disabled',

      // Month & year labels
      'month' => 'picker__month',
      'year' => 'picker__year',

      // Month & year dropdowns
      'selectMonth' => 'picker__select--month',
      'selectYear' => 'picker__select--year',

      // Table of dates
      'table' => 'picker__table',

      // Weekday labels
      'weekdays' => 'picker__weekday',

      // Day states
      'day' => 'picker__day',
      'disabled' => 'picker__day--disabled',
      'selected' => 'picker__day--selected',
      'highlighted' => 'picker__day--highlighted',
      'now' => 'picker__day--today',
      'infocus' => 'picker__day--infocus',
      'outfocus' => 'picker__day--outfocus',

      // The picker footer
      'footer' => 'picker__footer',

      // Today & clear buttons
      'buttonClear' => 'picker__button--clear',
      'buttonToday' => 'picker__button--today'
    ),
  );

  return array_merge($settings, $values);
}

/**
 * Return default settings for the Pickadate time field. Pass in values to override defaults.
 * @param $values
 * @return array
 */
function pickadate_time_default_settings(array $values = array()) {
  $settings = array(
    // Buttons
    'clear' => 'Clear',

    // Formats
    'format' => 'h:i A',
    'formatLabel' => NULL,
    'formatSubmit' => NULL,
    'hiddenSuffix' => '_submit',

    // Time intervals
    'interval' => 30,

    // Time limits
    'min' => NULL,
    'max' => NULL,

    // Disable times
    'disable' => NULL,

    // Root container
    'container' => NULL,

    // Events
    'onStart' => NULL,
    'onRender' => NULL,
    'onOpen' => NULL,
    'onClose' => NULL,
    'onSet' => NULL,
    'onStop' => NULL,

    // Classes
    'klass' => array(
      // The element states
      'input' => 'picker__input',
      'active' => 'picker__input--active',

      // The root picker and states *
      'picker' => 'picker',
      'opened' => 'picker--opened',
      'focused' => 'picker--focused',

      // The picker holder
      'holder' => 'picker__holder',

      // The picker frame, wrapper, and box
      'frame' => 'picker__frame',
      'wrap' => 'picker__wrap',
      'box' => 'picker__box',

      // List of times
      'list' => 'picker__list',
      'listItem' => 'picker__list-item',

      // Time states
      'disabled' => 'picker__list-item--disabled',
      'selected' => 'picker__list-item--selected',
      'highlighted' => 'picker__list-item--highlighted',
      'viewset' => 'picker__list-item--viewset',
      'now' => 'picker__list-item--now',

      // Clear button
      'buttonClear' => 'picker__button--clear',
    ),
  );

  return array_merge($settings, $values);
}

/**
 * Attach Pickadate.js library CSS/JS to the form.
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function pickadate_form_alter(&$form, &$form_state, $form_id) {
  $skin = variable_get('pickadate_skin', 'default');
  $form['#attached']['js'][] = libraries_get_path('pickadate') . '/lib/picker.js';
  $form['#attached']['js'][] = libraries_get_path('pickadate') . '/lib/picker.date.js';
  $form['#attached']['js'][] = libraries_get_path('pickadate') . '/lib/picker.time.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'pickadate') . '/js/pickadate.js';
  $form['#attached']['css'][] = libraries_get_path('pickadate') . '/lib/themes/' . $skin . '.css';
  $form['#attached']['css'][] = libraries_get_path('pickadate') . '/lib/themes/' . $skin . '.date.css';
  $form['#attached']['css'][] = libraries_get_path('pickadate') . '/lib/themes/' . $skin . '.time.css';
}

/**
 * Map JS date part formats to their PHP equivalent for form field formatting.
 * @param $format
 * @return mixed
 */
function pickadate_convert_date_format($format) {
  $dateparts = array(
    // Day
    'dd' => 'd',
    'd' => 'j',
    'ddd' => 'D',
    'dddd' => 'l',

    // Month
    'mmmm' => 'F',
    'm' => 'm',
    'mmm' => 'M',
    'mm' => 'n',

    // Year
    'yyyy' => 'Y',
    'yy' => 'yy',

    // Time
    'a' => '',
    'A' => '',
    'B' => '',
    'g' => '',
    'G' => '',
    'h' => '',
    'H' => '',
    'i' => '',
    's' => '',
    'u' => ''
  );

  $php_format = $format;

  foreach ($dateparts as $key => $part) {
    if (preg_match('/' . $key . '/', $format)) {
      $php_format = str_replace($key, $dateparts[$key], $php_format);
    }
  }

  return $php_format;
}