<?php

/**
 * @file
 * Automated unit and functional tests for the Mockable Time Demo module.
 */

/**
 * Tests the functionality of the Mockable Time Demo module.
 */
class MockableTimeDemoTestCase extends DrupalWebTestCase {

  /**
   * Info about this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Mockable Time demo functionality',
      'description' => 'Tests the Mockable Time demo module.',
      'group' => 'Mockable',
    );
  }

  /**
   * Basic setup for all test cases.
   */
  public function setUp() {
    parent::setUp(array('mockable_time_example', 'mockable'));
    // Use mock objects as of now.
    mockable_set();
  }

  /**
   * Main test case.
   *
   * Define a few transition cases and test them.
   */
  public function testMockableTimeDemo() {
    // Using mock object is a good opportunity to think about transition cases,
    // that is, exactly at what point does your module's behaviour change?
    // In this case, what do we mean by "between 1 and 2 a.m."? Do we mean
    // exclusively or inclusively? The fact of defining the transition cases
    // here makes sure that our understanding as developers of the business
    // logic is well understood.
    $cases = array(
      // our understanding is that we should start the module's behaviour at
      // 1 a.m.
      '1:00:00' => TRUE,
      // at 1:59:59 we should still display our message
      '1:59:59' => TRUE,
      // but at 2:00:00 we should stop
      '2:00:00' => FALSE,
    );

    foreach ($cases as $time => $string_present) {
      variable_set('mockable_time_example_time', strtotime('Wed Nov 09 2011 ' . $time));
      // go to the mockable_time_example page to see the output of our module.
      // Because mockable_set() has been called in the setUp() method, the
      // mock time as defined in the above variable, and not the real time,
      // are being used by our module's code.
      $this->drupalGet('mockable_time_example');
      if ($string_present) {
        $this->assertText('We\'re closed; please come back later', format_string('The message should be present at @time', array('@time' => $time)));
      }
      else {
        $this->assertNoText('We\'re closed; please come back later', format_string('The message should not be present at @time', array('@time' => $time)));
      }
    }
  }

  /**
   * Tear down by making sure all added variables have been removed
   */
  function tearDown() {
    module_disable(array('mockable', 'mockable_time_example'));
    drupal_uninstall_modules(array('mockable', 'mockable_time_example'));

    // get all variables and make sure none begin with 'representative_image'
    global $conf;

    $var_exists = FALSE;
    foreach ($conf as $var => $value) {
      if (drupal_substr($var, 0, drupal_strlen('mockable')) == 'mockable') {
        $var_exists = TRUE;
        $this->assert('fail', format_string('The variable @v should not exist after mockable and time example modules have been uninstalled (its value is @value).', array('@v' => $var, '@value' => serialize($value))));
      }
    }
    $this->assertFalse($var_exists, 'After uninstalling mockable and time example modules, no variables beginning with "mockable" remain.');

    parent::tearDown();
  }
}
