<?php

/**
 * @file
 * A very simple CRM interface meant to showcase how Mockable works.
 * This module does not actually implement a CRM, but is meant to
 * connect with a fictional external CRM whose interface is
 * defined here.
 */

/**
 * Implements hook_menu().
 */
function mockable_crm_example_menu() {
  $items['mockable_crm_example_simple_crm'] = array(
    'title' => 'Mockable CRM Demo',
    'page callback' => 'mockable_crm_example',
    'access arguments' => array('access content'),
    'file' => 'includes/mockable_crm_example.simple_real_crm.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_mockable_info().
 */
function mockable_crm_example_mockable_info() {
  return array(
    'mockable_crm_example_crm' => array(
      'title' => t('Simulate a mock CRM provider'),
      'settings' => array(
        'mockable_crm_example_mock_password' => array(
          '#title' => t('Set whether to use a valid or invalid password'),
          '#type' => 'select',
          '#options' => array(
            'valid_password' => t('Valid password'),
            'invalid_password' => t('Invalid password'),
          ),
          '#default_value' => variable_get('mockable_crm_example_mock_password', TRUE)
        ),
      ),
    ),
  );
}

/**
 * Implements hook_mockable_info_validate().
 */
function mockable_crm_example_mockable_info_validate($form, &$form_state) {
  // validation of the form can go here. See mockable_time_example module
  // for a working example.
  if ($form_state['complete form']['mockable_crm_example_crm_main']['#value']) {
    // validation, if there is any, should only occur if we are mocking
    // the data.
  }
}

/**
 * Implements hook_mockable_info_submit().
 */
function mockable_crm_example_mockable_info_submit($form, &$form_state) {
  if ($form_state['complete form']['mockable_crm_example_crm_main']['#value']) {
    $password_type = $form_state['complete form']['mockable_crm_example_crm_fieldset']['mockable_crm_example_mock_password']['#value'];
    $old_password_type = $form_state['complete form']['mockable_crm_example_crm_fieldset']['mockable_crm_example_mock_password']['#default_value'];
    if ($password_type != $old_password_type) {
      variable_set('mockable_crm_example_mock_password', $password_type);
      $message = $password_type == 'valid_password' ? t('Mock CRM now simulating a valid password') : t('Mock CRM now simulating an invalid password');
      drupal_set_message($message);
    }
  }
}

/**
 * Add a record with name and email to the CRM
 *
 * @param $name
 *   The name to put in the new record.
 *
 * @param $email
 *   The email to put in the new record.
 *
 * @return
 *   The id of new record on the external system.
 *
 * @throws Exception
 */
function mockable_crm_example_mockable_crm_add($name, $email) {
  return mockable_crm_example_mockable_crm()->add($name, $email);
}

/**
 * Get a record from its id on the external system.
 *
 * @param $record_id
 *   The record id on the external system.
 *
 * @return
 *   NULL if no such record exists.
 *   an associative array with name and email components of the record
 *   if it exists.
 *
 * @throws Exception
 */
function mockable_crm_example_mockable_crm_get($record_id) {
  return mockable_crm_example_mockable_crm()->get($record_id);
}

/**
 * Return a CRM object
 *
 * Passes the call through mockable() if the Mockable module is active.
 * Otherwise fetches the real object directly.
 *
 * @return
 *   Object representing the CRM.
 */
function mockable_crm_example_mockable_crm() {
  if (module_exists('mockable')) {
    return mockable('mockable_crm_example_crm');
  }
  else {
    return mockable_crm_example_crm();
  }
}

/**
 * Fetches a real object representing the CRM.
 *
 * @return
 *   Object representing the real CRM.
 */
function mockable_crm_example_crm() {
  static $object;
  if (!$object) {
    $object = new mockable_crm_exampleRealCRM;
  }
  return $object;
}

/**
 * Fetches a mock object representing the CRM.
 *
 * @return
 *   Object representing the mock CRM.
 */
function mockable_crm_example_crm_mock() {
  static $object;
  if (!$object) {
    $object = new mockable_crm_exampleMockCRM;
  }
  return $object;
}

/**
 * Abstract object representing the CRM.
 *
 * This base object defines abstract functions which are
 * then instantiated as real or mock.
 */
abstract class mockable_crm_exampleCRMBase {

  /**
   * Add a record with name and email to the CRM
   *
   * @param $name
   *   The name to put in the new record.
   *
   * @param $email
   *   The email to put in the new record.
   *
   * @return
   *   The id of new record on the external system.
   *
   * @throws Exception
   */
  function add($name, $email) {
    $command = array(
      'password' => $this->getPassword(),
      'name' => check_plain($name),
      'email' => check_plain($email),
      'action' => 'add',
    );

    return $this->formattedRequest($command);
  }

  /**
   * Request something from the server.
   *
   * Note that this calls $this->drupal_http_request(), not
   * drupal_http_request(). This is normal execution. However, when
   * using a mock object for testing or providing a demo to the client,
   * $this->drupal_http_request() will map, via a subclass, to a function
   * which simulates drupal_http_request() behaviour.
   */
  function request($request) {
    $url = $this->getUrl();
    return $this->drupal_http_request($url, $request);
  }

  /**
   * Retrieve the password which will be used to query the CRM.
   *
   * @return
   *   A password which will be added to the query.
   */
  abstract function getPassword();

  /**
   * Retrieve the URL to POST to, in order to query the CRM.
   *
   * @return
   *   An URL where the dummy or real CRM is located.
   */
  abstract function getUrl();

  /**
   * Retrieve the URL to POST to, in order to query the CRM.
   *
   * Subclasses must either call Drupal's drupal_http_request(), to
   * access the real CRM, or simulate that behavior in the case of a mock
   * object.
   *
   * See https://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_http_request/7.
   */
  abstract function drupal_http_request($url, $request);

  /**
   * Prepare and make a request to the CRM, and interpret its results.
   *
   * @param $command
   *   An associative array comprising the command to send the CRM.
   *
   * @return
   *   Formatted result from the CRM.
   *
   * @throws
   *   Exception
   */
  function formattedRequest($command) {
    $options = array(
      'method' => 'POST',
      'data' => 'data=' . drupal_json_encode($command),
      'timeout' => 15,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );

    $response = $this->request($options);
    $server_response = drupal_json_decode($response->data);

    if (isset($server_response['status']) && $server_response['status'] == 'ok') {
      if (isset($server_response['data'])) {
        return $server_response['data'];
      }
      else {
        throw new Exception('The server did not return a "data" element even though "status" is "ok"');
      }
    }
    else {
      if (isset($server_response['error'])) {
        throw new Exception('The server responded with ' . $server_response['error']);
      }
      else {
        throw new Exception('The server responded unexpectedly with ' . serialize($server_response));
      }
    }
  }

  /**
   * Get a record from its id on the external system.
   *
   * @param $record_id
   *   The record id on the external system.
   *
   * @return
   *   NULL if no such record exists.
   *   an associative array with name and email components of the record
   *   if it exists.
   *
   * @throws Exception
   */
  function get($record_id) {
    $command = array(
      'password' => $this->getPassword(),
      'record_id' => check_plain($record_id),
      'action' => 'get',
    );

    return $this->formattedRequest($command);
  }
}

/**
 * Object representing the REAL CRM.
 *
 * Note that your real object is never tested in your controlled
 * environment, so to limit errors which can creep in here, it is
 * best to limit methods herein to a mapping system: each method
 * should ideally have exactly one line.
 *
 * Your real object should be as small as possible!
 */
class mockable_crm_exampleRealCRM extends mockable_crm_exampleCRMBase {

  /**
   * Implements mockable_crm_exampleCRMBase::request().
   */
  function drupal_http_request($url, $options) {
    return drupal_http_request($url, $options);
  }

  /**
   * Implements mockable_crm_exampleCRMBase::getUrl().
   */
  function getUrl() {
    global $base_url;

    return variable_get('mockable_crm_example', $base_url . '/mockable_crm_example_simple_crm');
  }

  /**
   * Implements mockable_crm_exampleCRMBase::getPassword().
   */
  function getPassword() {
    $password = variable_get('mockable_crm_example_real_password', rand('1000000', '9999999'));
    variable_set('mockable_crm_example_real_password', $password);
    return $password;
  }
}

/**
 * Mock Object representing the mock CRM.
 *
 * Your mock object is used in testing so there is no limit
 * to the amount of code that can go in here.
 */
class mockable_crm_exampleMockCRM extends mockable_crm_exampleCRMBase {

  /**
   * Implements mockable_crm_exampleCRMBase::getPassword().
   */
  function getPassword() {
    return variable_get('mockable_crm_example_mock_password', 'valid_password');
  }

  /**
   * Implements mockable_crm_exampleCRMBase::getUrl().
   */
  function getUrl() {
    $url = variable_get('mockable_crm_example_mock_url', 'http://whatever-this-is-a-mock-object.example.com');
  }

  /**
   * Implements mockable_crm_exampleCRMBase::request()
   */
  function drupal_http_request($url, $options) {
    // ignore the URL, unless if we're simulating a timeout or a wrong site
    switch ($url) {
      // Simulate a site that does not exist
      case 'http://does-not-exist.example.com':
        $return = new stdClass();
        $return->code = 0;
        $return->error = 'php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known';
        return $return;
        break;

      // Simulate a site that times out
      case 'http://time-out.example.com':
        $return = new stdClass();
        $return->code = -1;
        $return->error = 'request timed out';
        return $return;
        break;

      case 'http://wrong-site.example.com':
        $return = new stdClass();
        $return->code = 200;
        $return->status_message = 'ok';
        $return->data = '<html><body>This is not json</body></html>';
        break;

      default:
        $return = new stdClass();
        $return->code = 200;
        $return->status_message = 'ok';

        if ($options['method'] == 'POST') {
          $post_data = drupal_json_decode(drupal_substr($options['data'], drupal_strlen('data=')));
          if ($post_data) {
            if ($post_data['password'] == 'valid_password') {
              switch ($post_data['action']) {
                case 'add':
                  if ($post_data['email'] && $post_data['name']) {
                    // Remember, this is a mock object, we are not actually
                    // interested in storing records and retrieving record_id's
                    // but we want to provide minimum functionality in order to
                    // test how drupal interacts with this system. In this case,
                    // that minimum functionality is that a pseudo-record id
                    // should be returned when a valid add request is made. The
                    // fact that that id does not really exist is irrelevant.
                    $return->data = drupal_json_encode(array(
                      'status' => 'ok',
                      'data' => rand(100, 200),
                    ));
                  }
                  else {
                    $return->data = drupal_json_encode(array(
                      'status' => 'error',
                      'error' => 'both email and name are required to create a new record',
                    ));
                  }
                  break;
                case 'get':
                  if ($post_data['record_id']) {
                    $return->data = drupal_json_encode(array(
                      'status' => 'ok',
                      'data' => array(
                        'name' => 'Whatever Name',
                        'email' => 'whatever@example.com',
                      ),
                    ));
                  }
                  else {
                    $return->data = drupal_json_encode(array(
                      'status' => 'error',
                      'error' => 'valid record id is required',
                    ));
                  }
                  break;
                default:
                  $return->data = drupal_json_encode(array(
                    'status' => 'error',
                    'error' => 'only get or add are accepted actions',
                  ));
                  break;
              }
            }
            else {
              $return->data = drupal_json_encode(array(
                'status' => 'error',
                'error' => 'oops, invalid password',
              ));
            }
          }
          else {
            // In many cases when programming your mock object, questions arise.
            // For example, how will the server react if you don't POST valid
            // json? In all probability, you were given specifications about how
            // the CRM (or whatever external system with which you are
            // interacting) functions in _normal_ circumstances. You may have no
            // documentation about how the system will react to invalid json,
            // and of course the external server is down right now and your
            // contact just left for the long week-end. In such circumstances,
            // you can _assume_ a logical response by the external server, and
            // open an issue on your issue tracker requesting to confirm that
            // behaviour, at which point you can change the code of your mock
            // object.
            $return->data = 'You need to valid json in the data parameter by POST.';
          }
        }
        else {
          // Again, we might not know how the real system reacts to requests
          // without POST data. See also the comment above.
          $return->data = 'You need to POST data';
        }
        return $return;
        break;
    }
  }
}
