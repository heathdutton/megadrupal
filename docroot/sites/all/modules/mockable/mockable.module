<?php

/**
 * @file
 * API and helper functions for the Mockable module.
 */

/**
 * Implements hook_menu().
 */
function mockable_menu() {
  $items = array();

  $items['admin/config/development/mockable'] = array(
    'title' => 'Mockable: administer mock objects',
    'description' => 'Set whether or not to use mock objects for certain operations on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mockable_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'mockable.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function mockable_init() {
  if (current_path() != 'admin/config/development/mockable' && user_access('administer site configuration') && mockable_get() && variable_get('mockable_warn_every_page', TRUE)) {
    // This text will appear when performing drush operations and on when
    // visiting actual pages. On drush on the command line, hyperlinks
    // don't appear, which is why we are displaying the text to the user.
    drupal_set_message(t('You are using Mock objects for at least some of the data on this website. Manage them at !manage.', array('!manage' => l('admin/config/development/mockable', 'admin/config/development/mockable'))), 'warning', FALSE);
  }
}

/**
 * Returns the mock function associated with a function, or the function itself.
 *
 * Normally used internally by mockable() to determine whether a mock function
 * exists.
 *
 * @param string $function
 *   The function name which presumably exists and can be mocked.
 *
 * @return string
 *   A function name which is known to exist if $function can be mocked,
 *   or $function itself if $function can't be mocked.
 *
 * @status Tested in tests/mockable.test
 */
function mockable_function($function) {
  $candidate = $function . '_mock';
  if (function_exists($candidate)) {
    return $candidate;
  }
  return $function;
}

/**
 * Checks whether a function has been set to mockable, or returns all rules.
 *
 * For example,
 *  - if "*" has been set to mockable, then "function" is
 *    mockable.
 *  - if "func*" has been set to mockable, then "function" is
 *    mockable, but "other_function" is not.
 *
 * @param $function = NULL
 *   If is set, the return is TRUE or FALSE depending on whether function is
 *   mockable.
 *
 * @return
 *   If $function is set, returns TRUE or FALSE depending on whether function
 *   is mockable. If $function is NULL, returns all the rules.
 *
 * @throws
 *   Exception
 */
function mockable_get($function = NULL) {
  $rules = variable_get('mockable_rules', array());
  // Return TRUE if any of the patterns set with mockable_set matches the
  // function.
  if (!$function) {
    return $rules;
  }
  foreach ($rules as $rule) {
    if (mockable_rule_applies($function, $rule)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Return whether a rule applies to a function
 *
 * @param $function
 *   A function name, for example "example"
 *
 * @param $rule
 *   A rule pattern, for example "exa*"
 *
 * @throws
 *   Exception
 */
function mockable_rule_applies($function, $rule) {
  if (!(is_string($function) && is_string($rule))) {
    throw new Exception('mockable_rule_applies expects function and rule to both be strings');
  }
  return preg_match('/^' . str_replace('*', '.*', $rule) . '$/', $function);
}

/**
 * Calls the result of a function or its mockable version if it exists .
 */
function mockable($function) {
  // This should call either the function itself or a mock version of
  // the function if such exists.
  $call = $function;
  if (mockable_get($function)) {
    $call = mockable_function($function);
  }
  $args = func_get_args();
  return call_user_func_array($call, array_splice($args, 1));
}

/**
 * Adds a rule to unset mockable state of $pattern.
 *
 * @param string $pattern
 *   The name of a function, with * being a wildcard.
 *
 * @throws
 *   Exception
 *
 * @status Tested in tests/mockable.test
 */
function mockable_set($pattern = '*') {
  $rules = variable_get('mockable_rules', array());
  if (is_string($pattern)) {
    if (!in_array($pattern, $rules)) {
      $rules[] = $pattern;
      variable_set('mockable_rules', $rules);
    }
  }
  else {
    throw new Exception('Only strings can be added as mockable patterns');
  }
}

/**
 * Adds a rule to unset mockable state of $pattern.
 *
 * @status Tested in tests/mockable.test
 */
function mockable_unset() {
  variable_set('mockable_rules', array());
}
