<?php

/**
 * @file
 * Automated functional tests for the Mockable module's GUI.
 */

/**
 * Tests the functionality of the Mockable module's GUI.
 */
class MockableBaseGUITestCase extends DrupalWebTestCase {

  /**
   * Return the config path for this module.
   *
   * We are retrieving it from the .info file, which has the benefit
   * of always testing that the .info file is up to date.
   */
  static function getConfigPath() {
    static $config_path;
    if (!$config_path) {
      $info = drupal_parse_info_file(drupal_get_path('module', 'mockable') . '/mockable.info');
      $config_path = $info['configure'];
    }
    return $config_path;
  }

  /**
   * Tear down by making sure all added variables have been removed
   */
  function tearDown() {
    module_disable(array('mockable', 'mockable_time_example', 'mockable_crm_example'));
    drupal_uninstall_modules(array('mockable', 'mockable_time_example', 'mockable_crm_example'));

    // get all variables and make sure none begin with 'representative_image'
    global $conf;

    $var_exists = FALSE;
    foreach ($conf as $var => $value) {
      if (drupal_substr($var, 0, drupal_strlen('mockable')) == 'mockable') {
        $var_exists = TRUE;
        $this->assert('fail', format_string('The variable @v should not exist after mockable and example modules have been uninstalled (its value is @value).', array('@v' => $var, '@value' => serialize($value))));
      }
    }
    $this->assertFalse($var_exists, 'After uninstalling mockable and example modules, no variables beginning with "mockable" remain.');

    parent::tearDown();
  }
}

/**
 * Tests the functionality of the Mockable module's GUI.
 */
class MockableGUISimpleTestCase extends MockableBaseGUITestCase {

  /**
   * Info about this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Mockable GUI functionality out of the box.',
      'description' => 'Mockable GUI functionality when no modules are defining a GUI to manage mock objects.',
      'group' => 'Mockable',
    );
  }

  /**
   * Basic setup for all test cases.
   */
  public function setUp() {
    parent::setUp(array('mockable'));
  }

  /**
   * Main test case.
   */
  public function testMockable() {
    $this->drupalLogin($this->drupalCreateUser(array('administer site configuration')));
    $configure_path = $this->getConfigPath();
    $edit = array(
      'mockable_use' => TRUE,
    );
    $this->drupalPost($configure_path, $edit, 'Save changes');
    $this->assertTrue(mockable_get() == array('*'), 'Checking "Use mock objects" in the UI causes mock objects to be used throughout.');
  }
}

/**
 * Tests the functionality of the Mockable module's GUI.
 */
class MockableGUITestCase extends MockableBaseGUITestCase {

  /**
   * Info about this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Mockable GUI functionality',
      'description' => 'Tests the Mockable module\'s graphical user interface (GUI).',
      'group' => 'Mockable',
    );
  }

  /**
   * Basic setup for all test cases.
   */
  public function setUp() {
    parent::setUp(array('mockable', 'mockable_time_example', 'mockable_crm_example'));
  }

  /**
   * Main test case.
   */
  public function testMockable() {
    $configure_path = $this->getConfigPath();
    $this->drupalGet($configure_path);
    $this->assertText('Access denied', 'Anonymous users should not have access to the admin path.');
    $this->drupalLogin($this->drupalCreateUser(array('administer site configuration')));
    $this->drupalGet('/');
    $this->assertNoText('You are using Mock objects for at least some of the data on this website', 'Not using mock objects, no warning should appear.');
    $this->drupalGet($configure_path);
    $this->assertRaw('<input type="checkbox" id="edit-mockable-use" name="mockable_use" value="1" class="form-checkbox" />', 'The GUI reflects that by default we are not using mock objects.');
    $this->drupalPost(NULL, array('mockable_use' => TRUE), 'Save changes');
    $this->assertNoText('You are using Mock objects for at least some of the data on this website', 'Using mock objects but already on the config page, no warning should appear.');
    $this->assertTrue(mockable_get() == array('*'), 'Setting mock objects to on enables the universal pattern *');
    $this->drupalGet('/');
    $this->assertText('You are using Mock objects for at least some of the data on this website', 'Using mock objects, warning should appear.');
    $this->drupalLogout();
    $this->assertNoText('You are using Mock objects for at least some of the data on this website', 'Using mock objects but not logged in, no warning should appear.');
    $this->drupalLogin($this->drupalCreateUser(array('administer site configuration')));
    $edit = array(
      'mockable_use' => TRUE,
      'mockable_crm_example_crm_main' => FALSE,
      'mockable_time_example_time_main' => FALSE,
      'mock_use_specific' => '',
    );
    $this->drupalPost($configure_path, $edit, 'Save changes');
    $this->assertText('Mock objects cannot be on unless at least one pattern is set to use mock objects');
    $edit = array(
      'mockable_use' => TRUE,
      'mockable_crm_example_crm_main' => FALSE,
      'mockable_time_example_time_main' => TRUE,
    );
    $this->drupalPost($configure_path, $edit, 'Save changes');
    $this->assertTrue(mockable_get() == array('mockable_time_example_time'), 'Setting only the time checkbox sets the only pattern to mockable_time_example_time');
    $edit = array(
      'mockable_use' => TRUE,
      'mockable_crm_example_crm_main' => TRUE,
      'mockable_time_example_time_main' => FALSE,
    );
    $this->drupalPost($configure_path, $edit, 'Save changes');
    $this->assertTrue(mockable_get() == array('mockable_crm_example_crm'), 'Setting only the CRM checkbox sets the only pattern to mockable_crm_example_crm');
    $edit = array(
      'mockable_use' => TRUE,
      'mockable_crm_example_crm_main' => TRUE,
      'mockable_time_example_time_main' => FALSE,
      'mock_use_specific' => 'mockable_time_example_time',
    );
    $this->drupalPost($configure_path, $edit, 'Save changes');
    $this->assertText('The pattern mockable_time_example_time could not be added because the associated checkbox is not selected', 'Setting a pattern which contradictory to a checkbox causes it not to be added.');
    $edit = array(
      'mockable_use' => TRUE,
      'mockable_warn_every_page' => FALSE,
    );
    $this->drupalPost($configure_path, $edit, 'Save changes');
    $this->drupalGet('/');
    $this->assertNoText('You are using Mock objects for at least some of the data on this website', 'Using mock objects, but set the warning to be off.');
  }

}
