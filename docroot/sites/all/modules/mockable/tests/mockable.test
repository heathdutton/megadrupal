<?php

/**
 * @file
 * Automated unit and functional tests for the Mockable module..
 */

/**
 * Tests the functionality of the Mockable module.
 */
class MockableTestCase extends DrupalWebTestCase {

  /**
   * Info about this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Mockable functionality',
      'description' => 'Tests the Mockable module.',
      'group' => 'Mockable',
    );
  }

  /**
   * Basic setup for all test cases.
   */
  public function setUp() {
    parent::setUp(array('mockable_test'));
  }

  /**
   * Main test case.
   */
  public function testMockable() {
    // Test mockable_function().
    $this->assertTrue(mockable_function('mockable_test_real_with_mock') == 'mockable_test_real_with_mock_mock', 'mockable_function() figures out the mock funcion for mockable_test_real_with_mock() because mockable_test_real_with_mock_mock() exists.');
    $this->assertTrue(mockable_function('mockable_test_real_no_mock') == 'mockable_test_real_no_mock', 'mockable_function() figures out that mockable_test_real_no_mock() has no mock function, because mockable_test_real_no_mock_mock() does not exist.');

    // Test mockable_set() and mockable_unset().
    // Start by setting mock functions for everything.
    mockable_set();
    // At this point all mockable functions with a mockable
    // implementation should return mock data.
    $expected = array(
      'mockable_test_real_with_mock' => 'mockable_test_real_with_mock_mock',
      'mockable_test_real2_with_mock' => 'mockable_test_real2_with_mock_mock',
      'mockable_test_third_real_with_mock' => 'mockable_test_third_real_with_mock_mock',
    );
    $this->assertExpected('All functions should return mock data', $expected);

    // Unset everything.
    mockable_unset();
    $expected = array(
      'mockable_test_real_with_mock' => 'mockable_test_real_with_mock',
      'mockable_test_real2_with_mock' => 'mockable_test_real2_with_mock',
      'mockable_test_third_real_with_mock' => 'mockable_test_third_real_with_mock',
    );
    $this->assertExpected('All functions should return real data', $expected);

    // Set only those beginning with mockable_test_real*.
    mockable_set('mockable_test_real*');
    $expected = array(
      'mockable_test_real_with_mock' => 'mockable_test_real_with_mock_mock',
      'mockable_test_real2_with_mock' => 'mockable_test_real2_with_mock_mock',
      'mockable_test_third_real_with_mock' => 'mockable_test_third_real_with_mock',
    );
    $this->assertExpected('All functions beginning with "mockable_test_real" should return mock data', $expected);

    // Make sure mockable_set and drush_mockable_set work identically
    module_load_include('inc', 'mockable', 'mockable.drush');
    $patterns = array(
      $this->randomString(),
      $this->randomString(),
    );
    $functions = array(
      'mockable_set' => '',
      'drush_mockable_set' => '',
    );
    foreach ($functions as $function => $info) {
      mockable_unset();
      foreach ($patterns as $pattern) {
        $function($pattern);
      }
      $functions[$function] = mockable_get();
    }
    $this->assertTrue($functions['mockable_set'] == $functions['drush_mockable_set'], 'mockable_set() and drush_mockable_set() have the same effect on the system. ' . serialize($functions['mockable_set']) . ' and ' . serialize($functions['drush_mockable_set']));
  }

  /**
   * Helper function asserting that mockable() returns expected values.
   *
   * @param string $string
   *   A description of this assertion, will appear in the test results.
   * @param array $expected
   *   An associative array in the format
   *   function => expected result.
   */
  protected function assertExpected($string, $expected) {
    foreach ($expected as $function => $return) {
      $this->assertTrue(mockable($function) == $return, $string . '. mockable(' . $function . ') has returned ' . mockable($function) . ' and was expected to return ' . $return);
    }
  }

  /**
   * Tear down by making sure all added variables have been removed
   */
  function tearDown() {
    module_disable(array('mockable_test', 'mockable'));
    drupal_uninstall_modules(array('mockable_test', 'mockable'));

    // get all variables and make sure none begin with 'representative_image'
    global $conf;

    $var_exists = FALSE;
    foreach ($conf as $var => $value) {
      if (drupal_substr($var, 0, drupal_strlen('mockable')) == 'mockable') {
        $var_exists = TRUE;
        $this->assert('fail', format_string('The variable @v should not exist after mockable has been uninstalled (its value is @value).', array('@v' => $var, '@value' => serialize($value))));
      }
    }
    $this->assertFalse($var_exists, 'After uninstalling mockable, no variables beginning with "mockable" remain.');

    parent::tearDown();
  }
}
