<?php

/**
 * Implements hook_menu()
 */
function blackbaud_netcommuniy_sso_menu() {
  $items = array();
  $items['bbuser'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'blackbaud_netcommuniy_sso_user_info',
    'access callback' => TRUE,
  );
  $items['admin/config/content/blackbaud'] = array(
    'title' => 'Blackbaud Login',
    'description' => 'Configure required settings for Blackbaud login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blackbaud_netcommuniy_sso_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'blackbaud_netcommuniy_sso.admin.inc',
  );
  $items['callback/blackbaud'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'blackbaud callback response',
    'page callback' => 'blackbaud_netcommuniy_sso_user_callback',
    'access callback' => 'blackbaud_netcommuniy_sso_permitted_user',
  );
  $items['callback/loginblackbaud'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Callback fo already linked user',
    'page callback' => 'blackbaud_netcommuniy_sso_user_login_linked',
    'access callback' => 'user_is_anonymous',
  );
  $items['blackbaud/redirect'] = array(
    'type' => MENU_CALLBACK,
    'description' => 'Login an already existing user',
    'page callback' => 'blackbaud_netcommuniy_sso_login_existing_user',
    'access callback' => 'user_is_anonymous',
  );
  return $items;
}

/**
 * definition of permitted user access callback
 */
function blackbaud_netcommuniy_sso_permitted_user() {
  if (isset($_SESSION['bbuser_information']) && !empty($_SESSION['bbuser_information'])) {
    return true;
  } else {
    return false;
  }
}

/**
 * function to initial details of user for registration.
 */
function blackbaud_netcommuniy_sso_user_info() {
  $_SESSION['bbuser_information'] = serialize($_GET);
  blackbaud_netcommuniy_sso_authenticated_details();
}

/**
 * functon redirect onto the blackbaud site.
 */
function blackbaud_netcommuniy_sso_registration_page($userinfo) {
  if (!empty($userinfo['username']) && !empty($userinfo['email'])) {
    $form_state['values']['username'] = $userinfo['username'];
    $form_state['values']['email'] = $userinfo['email'];
    if (form_get_errors()) {
      drupal_goto('');
    } else {
      drupal_form_submit('blackbaud_netcommuniy_sso_registration_form', $form_state);
    }
  } else {
    drupal_set_message(t('You are not logged in with Blackbaud'), 'error');
    drupal_goto('user');
  }
}

/**
 * functon redirect onto the blackbaud site.
 */
function blackbaud_netcommuniy_sso_registration_form() {
  global $base_url;
  $form = array();
  $form['username'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Username'),
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Email address'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Blackbaud registration form submit
 */
function blackbaud_netcommuniy_sso_registration_form_submit(&$form, $form_values) {
  if (isset($_SESSION['blackbaud_userid'])) {
    $role = 'authenticated user';
    $rs = db_select('role', 'role')
        ->fields('role', array('rid'))
        ->condition('name', $role, '=')
        ->execute()->fetchAll();
    $roles[$rs['0']->rid] = $role;
    $new_user = array(
      'name' => blackbuad_sso_username_check($form_values['values']['username']),
      'pass' => user_password(),
      'mail' => $form_values['values']['email'],
      'init' => $form_values['values']['email'],
      'status' => 1,
      'access' => REQUEST_TIME,
      'roles' => $roles,
    );
    $account = user_save(null, $new_user);
    $id = db_insert('blackbaud_users')->fields(array('uid' => $account->uid,
        'buid' => $_SESSION['blackbaud_userid']))->execute();
    // converting object to array
    if (is_object($account)) {
      foreach ($account as $key => $value) {
        $array[$key] = $value;
      }
    } else {
      $array = $object;
    }
    user_login_submit(array(), $array);
    drupal_goto('user');
  } else {
    drupal_set_message(t('You are not logged in with Blackbaud'), 'error');
    drupal_goto('user');
  }
}

/**
 * functon redirect onto the blackbaud site.
 */
function blackbaud_netcommuniy_sso_authenticated_details() {
  global $base_url;
  $url = variable_get('blackbaud_netcommuniy_sso_site_url', "");
  $blackbaud_url = $url;
  $body = "redirect=" . $base_url . "/callback/blackbaud&requireLogin=1";
  blackbaud_netcommuniy_sso_gethttpresponsebyget($blackbaud_url, $body);
}

/**
 * call back function to be called on authentication callback
 */
function blackbaud_netcommuniy_sso_user_callback() {
  $userauthdetails = $_GET;
  $userinfodetails = unserialize($_SESSION['bbuser_information']);
  $userinfodetails['userid'] = $userauthdetails['userid'];
  blackbaud_netcommuniy_sso_user_authentication($userauthdetails, $userinfodetails);
}

/**
 * function to authenticate user details 
 */
function blackbaud_netcommuniy_sso_user_authentication($userinfo, $userinfodetails) {
  $time_stamp = $userinfo['ts'];
  $userid = $userinfo['userid'];
  $hash_code = $userinfo['sig'];
  $secret = variable_get('blackbaud_netcommuniy_sso_secret_key', "");
  if ($secret == "") {
    drupal_set_message(t('Site is not configured to login through blackbaud'), 'error');
    drupal_goto('user');
  }
  $hash_string = $userid . $time_stamp . $secret;
  $hased_string = md5($hash_string);
  blackbaud_netcommuniy_sso_signin($hased_string, $hash_code, $userid, $userinfodetails);
}

/**
 * Sign in using blackbaud api.
 */
function blackbaud_netcommuniy_sso_signin($signature, $in_sig, $userid, $userinfodetails) {
  if ($in_sig == $signature) {
    $user_exist = user_load_by_mail($userinfodetails['email']);
    if ($user_exist) {
      $result_pre = db_select('blackbaud_users', 'buser')
          ->fields('buser', array('uid'))
          ->condition('buid', $userid, '=')
          ->condition('uid', $user_exist->uid, '=')
          ->execute()->fetchAll();

      if (!isset($result_pre[0]->uid)) {
        db_insert('blackbaud_users')
          ->fields(array(
            'buid' => $userid,
            'uid' => $user_exist->uid,
          ))
          ->execute();
      }
    }
    $result = db_select('blackbaud_users', 'buser')
        ->fields('buser', array('uid'))
        ->condition('buid', $userid, '=')
        ->execute()->fetchAll();
    if (isset($result[0]->uid)) {
      $result_uid = db_select('users', 'user')
          ->fields('user', array('uid'))
          ->condition('uid', $result[0]->uid, '=')
          ->execute()->fetchAll();
      if (!isset($result_uid[0]->uid)) {
        drupal_set_message(t('Cannot use that account to login.Please use another account'), 'error');
        drupal_goto('');
      }
      $account_pre = user_load($result[0]->uid);
      $account_pre->status = 1;
      $account_pre->mail = $userinfodetails['email'];
      $account_pre->name = $userinfodetails['username'];
      user_save($account_pre);
      $account = user_load($result[0]->uid);
      if (is_object($account)) {
        foreach ($account as $key => $value) {
          $array[$key] = $value;
        }
      } else {
        $array = $object;
      }
      user_login_submit(array(), $array);
      drupal_goto('user');
    } else {
      $_SESSION['blackbaud_userid'] = $userid;
      if ($userinfodetails) {
        blackbaud_netcommuniy_sso_registration_page($userinfodetails);
      } else {
        drupal_set_message(t('Login Error'), 'error');
        drupal_goto('');
      }
    }
  }
}

/**
 * Implementation of hook_form_alter.
 */
function blackbaud_netcommuniy_sso_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;
  if ($form_id == "user_login" || $form_id == 'user_login_block') {
    $blackbaud_rediect = l(t('Sign in with blackbaud NetCommunity'), $base_url . '/blackbaud/redirect');
    $form['blackbaud_login_link'] = array(
      '#type' => 'item',
      '#weight' => 9999999,
      '#description' => t('!login', array('!login' => $blackbaud_rediect)),
    );
  }
}

/**
 * Implements hook_user_delete().
 */
function blackbaud_netcommuniy_sso_user_delete($account) {
  $result = db_select('blackbaud_users', 'buser')
      ->fields('buser', array('uid'))
      ->condition('uid', $account->uid, '=')
      ->execute()->fetchAll();
  if (isset($result[0]->uid)) {
    db_delete('blackbaud_users')
      ->condition('uid', $account->uid, '=')
      ->execute();
  }
}

/**
 * Function to get user info 
 */
function blackbaud_netcommuniy_sso_user_profile_info($userinfodetails) {
  if (isset($userinfodetails['username']) && isset($userinfodetails['email'])) {
    $userinfo['username'] = $userinfodetails['username'];
    $userinfo['email'] = $userinfodetails['email'];
    return $userinfo;
  } else {
    return false;
  }
}

/**
 * function to get Get authentication response.
 */
function blackbaud_netcommuniy_sso_gethttpresponsebyget($url, $body) {
  $blackbaud_url = $url . '?' . $body;
  drupal_goto($blackbaud_url);
}

/**
 * function to login already existing user
 */
function blackbaud_netcommuniy_sso_login_existing_user() {
  global $base_url;
  $url = variable_get('blackbaud_netcommuniy_sso_site_url', "");
  $blackbaud_url = $url;
  $body = "redirect=" . $base_url . "/callback/loginblackbaud&requireLogin=1";
  blackbaud_netcommuniy_sso_gethttpresponsebyget($blackbaud_url, $body);
}

/**
 * function to login already linked user
 */
function blackbaud_netcommuniy_sso_user_login_linked() {
  if (isset($_GET['userid']) && is_numeric($_GET['userid']) && isset($_GET['ts']) && $_GET['ts'] != "" && isset($_GET['sig']) && $_GET['sig']) {
    $time_stamp = $_GET['ts'];
    $userid = $_GET['userid'];
    $in_sig = $_GET['sig'];
    $secret = variable_get('blackbaud_netcommuniy_sso_secret_key', "");
    if ($secret == "") {
      drupal_set_message(t('Site is not configured to login through blackbaud'), 'error');
      drupal_goto('user');
    }
    $hash_string = $userid . $time_stamp . $secret;
    $signature = md5($hash_string);
    if ($in_sig == $signature) {
      $result = db_select('blackbaud_users', 'buser')
          ->fields('buser', array('uid'))
          ->condition('buid', $userid, '=')
          ->execute()->fetchAll();
      if (isset($result[0]->uid)) {
        $result_uid = db_select('users', 'user')
            ->fields('user', array('uid'))
            ->condition('uid', $result[0]->uid, '=')
            ->execute()->fetchAll();
        if (!isset($result_uid[0]->uid)) {
          drupal_set_message(t('Cannot use that account to login. Please use another account'), 'error');
          drupal_goto('user/login');
        }
        $account = user_load($result[0]->uid);
        if (is_object($account)) {
          foreach ($account as $key => $value) {
            $array[$key] = $value;
          }
        } else {
          $array = $object;
        }
        user_login_submit(array(), $array);
        drupal_goto('user');
      } else {
        drupal_set_message(t('Login Error'), 'error');
        drupal_goto('');
      }
    }
  } else {
    drupal_goto('user');
  }
}

/**
 * function to add 1,2,3,4 if username on badges already exists
 */
function blackbuad_sso_username_check($username) {
  $i = '';
  $s = '';
  $result = db_select('users', 'u')->condition('name', $username . $s, '=')->fields('u', array('uid'))->execute()->fetchAll();
  if (count($result) > 0) {
    while ($result[0]->uid) {
      if ($i == '') {
        $i = 1;
      } else {
        $i++;
      }
      $s = $i;
      $result = db_select('users', 'u')->condition('name', $username . $s, '=')->fields('u', array('uid'))->execute()->fetchAll();
    }
  }
  return $username . $i;
}

