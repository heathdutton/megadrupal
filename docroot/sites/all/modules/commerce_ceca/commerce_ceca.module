<?php

/**
 * @file
 * Implements CECA Standard in Drupal Commerce checkout.
 */

define('COMMERCE_CECA_OFFLINE', 1);
define('COMMERCE_CECA_ONLINE', 2);

define('COMMERCE_CECA_CARD_IN_GATEWAY', 1);
define('COMMERCE_CECA_CARD_IN_DRUPAL', 2);

/**
 * Implements hook_menu().
 */
function commerce_ceca_menu() {

  $items = array();

  $items['ceca/callback'] = array(
    'page callback' => 'commerce_ceca_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_ceca_commerce_payment_method_info() {

  $payment_methods = array();

  $payment_methods['commerce_ceca'] = array(
    'base' => 'commerce_ceca',
    'title' => t('CECA'),
    'description' => t('CECA'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;

}

/**
 * Returns the default settings for the CECA payment method.
 */
function commerce_ceca_default_settings() {

  return array(
    'server' => 'devel',
    'merchant_id' => '',
    'acquirer_bin' => '',
    'terminal_id' => '',
    'key' => '',
    'method' => COMMERCE_CECA_OFFLINE,
    'card' => COMMERCE_CECA_CARD_IN_GATEWAY,
  );

}

/**
 * Payment method callback: settings form.
 */
function commerce_ceca_settings_form($settings = array()) {

  $settings = (array) $settings + commerce_ceca_default_settings();

  $form = array();
  $form['server'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => t('CECA server'),
    '#options' => array(
      'devel' => t('Development - use for testing'),
      'live' => t('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Merchant ID'),
    '#default_value' => $settings['merchant_id'],
  );
  $form['acquirer_bin'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Acquirer BIN'),
    '#default_value' => $settings['acquirer_bin'],
  );
  $form['terminal_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Terminal ID'),
    '#default_value' => $settings['terminal_id'],
  );
  $form['key'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Key'),
    '#default_value' => $settings['key'],
  );
  $form['method'] = array(
    '#type' => 'radios',
    '#title' => t('Payment method'),
    '#required' => TRUE,
    '#default_value' => !empty($settings['method']) ? $settings['method'] : COMMERCE_CECA_OFFLINE,
    '#options' => array(
      COMMERCE_CECA_OFFLINE => t('Offline'),
      COMMERCE_CECA_ONLINE => t('Online'),
    ),
    '#description' => t('Online method is the recommended method. With offline methods, clients should click "OK" button after paying to go back to the commerce: otherwise payment won\'t be registered in Drupal. In order to use online method, you will need to set "On-line communication" to "Yes" in your CECA control panel, and set %url in "On-line URL" field.',
      array(
        '%url' => url('ceca/callback', array('absolute' => TRUE)),
      )
    ),
  );
  $form['card'] = array(
    '#type' => 'radios',
    '#title' => t('Show credit card form in Drupal site'),
    '#options' => array(
      COMMERCE_CECA_CARD_IN_GATEWAY => t('No'),
      COMMERCE_CECA_CARD_IN_DRUPAL => t('Yes'),
    ),
    '#default_value' => !empty($settings['card']) ? $settings['card'] : COMMERCE_CECA_CARD_IN_GATEWAY,
    '#description' => t('In order to use this option, you need to contact with your bank.'),
  );

  return $form;

}

/**
 * Payment method callback: checkout form.
 */
function commerce_ceca_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $payment_method['settings'] += commerce_ceca_default_settings();

  $form = array();
  if ($payment_method['settings']['card'] == COMMERCE_CECA_CARD_IN_DRUPAL) {
    $fields = array(
      'code' => '',
    );
    $form += commerce_payment_credit_card_form($fields);
  }
  return $form;

}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_ceca_submit_form_validate($payment_method, $pane_form, &$pane_values, $order, $form_parents = array()) {

  if ($payment_method['settings']['card'] == COMMERCE_CECA_CARD_IN_DRUPAL) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $settings = array(
      'form_parents' => array_merge($form_parents, array('credit_card')),
    );
    if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
      return FALSE;
    }
  }

}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_ceca_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  if ($payment_method['settings']['card'] == COMMERCE_CECA_CARD_IN_DRUPAL) {
    $order->data['ceca_credit_card'] = $pane_values['credit_card'];
  }

}

/**
 * Payment method callback: redirect form.
 */
function commerce_ceca_redirect_form($form, &$form_state, $order, $payment_method) {

  $wrapper_order = entity_metadata_wrapper('commerce_order', $order);

  $payment_method['settings'] += commerce_ceca_default_settings();
  if ($payment_method['settings']['server'] == 'live') {
    $form['#action'] = 'https://pgw.ceca.es/cgi-bin/tpv';
  }
  else {
    $form['#action'] = 'http://tpv.ceca.es:8000/cgi-bin/tpv';
  }
  $form['#method'] = 'POST';
  $form['#attributes'] = array(
    'enctype' => 'application/x-www-form-urlencoded',
  );

  $lang_op = commerce_ceca_get_language();
  list($url_ok, $url_no_ok) = commerce_ceca_get_urls($order);
  $total = $wrapper_order->commerce_order_total->amount->value();
  $currency = commerce_ceca_get_numeric_currency_code($wrapper_order->commerce_order_total->currency_code->value());

  $signature = commerce_ceca_get_signature(
    array(
      'key' => $payment_method['settings']['key'],
      'merchant_id' => $payment_method['settings']['merchant_id'],
      'acquirer_bin' => $payment_method['settings']['acquirer_bin'],
      'terminal_id' => $payment_method['settings']['terminal_id'],
      'order_id' => $order->order_number,
      'total' => $total,
      'currency' => $currency,
      'url_ok' => $url_ok,
      'url_no_ok' => $url_no_ok,
    ),
    FALSE
  );

  $data = array(
    'MerchantID' => $payment_method['settings']['merchant_id'],
    'AcquirerBIN' => $payment_method['settings']['acquirer_bin'],
    'TerminalID' => $payment_method['settings']['terminal_id'],
    'Num_operacion' => $order->order_number,
    'Importe' => $total,
    'TipoMoneda' => $currency,
    'Exponente' => 2,
    'URL_OK' => $url_ok,
    'URL_NOK' => $url_no_ok,
    'Firma' => $signature,
    'Cifrado' => 'SHA1',
    'Idioma' => $lang_op,
    'Pago_soportado' => 'SSL',
  );

  if ($payment_method['settings']['card'] == COMMERCE_CECA_CARD_IN_DRUPAL) {
    $data['Pago_elegido'] = 'SSL';
    $data['PAN'] = $order->data['ceca_credit_card']['number'];
    $data['Caducidad'] = $order->data['ceca_credit_card']['exp_year'] . $order->data['ceca_credit_card']['exp_month'];
    $data['CVV2'] = $order->data['ceca_credit_card']['code'];
    unset($order->data['ceca_credit_card']);
    commerce_order_save($order);
  }

  foreach ($data as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['Comprar'] = array(
    '#type' => 'submit',
    '#value' => 'Comprar',
  );

  return $form;

}

/**
 * Payment method callback: redirect form back.
 */
function commerce_ceca_redirect_form_back($order, $payment_method) {

  drupal_set_message(t('Operation was canceled.'), 'warning');

}

/**
 * Payment method callback: redirect form validation.
 */
function commerce_ceca_redirect_form_validate($order, $payment_method) {

  if ((arg(1) != $order->order_id) || (arg(4) != $order->data['payment_redirect_key'])) {
    return FALSE;
  }

}

/**
 * Payment method callback: redirect form submission.
 */
function commerce_ceca_redirect_form_submit($order, $payment_method) {

  $payment_method['settings'] += commerce_ceca_default_settings();
  if ($payment_method['settings']['method'] == COMMERCE_CECA_OFFLINE) {
    commerce_ceca_generate_payment($order, $payment_method);
  }

}

/**
 * Generates a CECA commerce payment transaction attached to an order.
 *
 * @param object $order
 *   The commerce order to pay.
 * @param array $payment_method
 *   The payment method selected.
 * @param string $reference
 *   Optional. External ID from remote account.
 */
function commerce_ceca_generate_payment($order, $payment_method, $reference = NULL) {

  $wrapper_order = entity_metadata_wrapper('commerce_order', $order);
  $transaction = commerce_payment_transaction_new('commerce_ceca', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $wrapper_order->commerce_order_total->amount->value();
  $transaction->currency_code = $wrapper_order->commerce_order_total->currency_code->value();
  if ($reference) {
    $transaction->remote_id = $reference;
  }
  else {
    $transaction->remote_id = $order->order_id;
  }
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  commerce_payment_transaction_save($transaction);

}

/**
 * Returns the ISO-4217 numeric code from the currency code.
 *
 * @param string $currency
 *   The currency code.
 *
 * @return int
 *   The numeric code, 840 (from USD) if the currency code is invalid.
 */
function commerce_ceca_get_numeric_currency_code($currency) {

  module_load_include('inc', 'commerce', 'includes/commerce.currency');
  $currency_options = commerce_commerce_currency_info();
  if (isset($currency_options[$currency]['numeric_code'])) {
    $currency = $currency_options[$currency]['numeric_code'];
  }
  else {
    $currency = 840;
  }
  return $currency;

}

/**
 * Generates a CECA signature from given parameters.
 *
 * @param array $options
 *   The CECA parameters used to generate the signature.
 * @param bool $response
 *   Algorithm used to generate signature (TRUE = receiving / FALSE = sending).
 *
 * @return string
 *   A string with the signature.
 */
function commerce_ceca_get_signature($options, $response = FALSE) {

  if (!$response) {
    return sha1(
      $options['key'] . $options['merchant_id'] .
      $options['acquirer_bin'] . $options['terminal_id'] .
      $options['order_id'] . $options['total'] .
      $options['currency'] . 2 . 'SHA1' .
      $options['url_ok'] . $options['url_no_ok']
    );
  }
  else {
    return sha1(
      $options['key'] . $options['merchant_id'] .
      $options['acquirer_bin'] . $options['terminal_id'] .
      $options['order_id'] . $options['total'] .
      $options['currency'] . 2 . $options['reference']
    );
  }

}

/**
 * Generates CECA urls for OK/Not OK transaction.
 *
 * @param object $order
 *   The order used to generate OK/Not OK URLs.
 *
 * @return string
 *   An indexed array with the OK url in the first element, and the
 *   Not OK URL in the second.
 */
function commerce_ceca_get_urls($order) {

  $url_ok = url(
    'checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'],
    array(
      'absolute' => TRUE,
    )
  );
  $url_no_ok = url(
    'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'],
    array(
      'absolute' => TRUE,
    )
  );
  return array($url_ok, $url_no_ok);

}

/**
 * Gets current language in CECA convention.
 *
 * @return int
 *   A number indicating the current language, used by CECA gateway.
 */
function commerce_ceca_get_language() {

  global $language;
  $langs = array(
    'es' => 1,
    'ca' => 2,
    'eu' => 3,
    'gl' => 4,
    'va' => 5,
    'en' => 6,
    'en-gb' => 6,
    'fr' => 7,
    'de' => 8,
    'gsw-berne' => 8,
    'pt' => 9,
    'pt-pt' => 9,
    'pt-br' => 9,
    'it' => 10,
  );
  if (isset($langs[$language->language])) {
    $lang_op = $langs[$language->language];
  }
  else {
    $lang_op = 6;
  }
  return $lang_op;

}

/**
 * Menu callback: Callback URL for CECA online payment method.
 */
function commerce_ceca_callback() {

  $ok = FALSE;
  if (!empty($_POST) && !empty($_POST['Num_operacion']) && !empty($_POST['Referencia'])) {
    $payment_method = commerce_payment_method_instance_load('commerce_ceca|commerce_payment_commerce_ceca');
    $payment_method['settings'] += commerce_ceca_default_settings();
    $order = commerce_order_load($_POST['Num_operacion']);
    $wrapper_order = entity_metadata_wrapper('commerce_order', $order);
    if ($order) {
      $lang_op = commerce_ceca_get_language();
      $total = $wrapper_order->commerce_order_total->amount->value();
      $total = str_pad($total, 12, '0', STR_PAD_LEFT);
      $currency = commerce_ceca_get_numeric_currency_code($wrapper_order->commerce_order_total->currency_code->value());
      $signature = commerce_ceca_get_signature(
        array(
          'key' => $payment_method['settings']['key'],
          'merchant_id' => $payment_method['settings']['merchant_id'],
          'acquirer_bin' => $payment_method['settings']['acquirer_bin'],
          'terminal_id' => $payment_method['settings']['terminal_id'],
          'order_id' => $order->order_number,
          'total' => $total,
          'currency' => $currency,
          'reference' => $_POST['Referencia'],
        ),
        TRUE
      );
      if (
        isset($_POST['MerchantID']) && ($payment_method['settings']['merchant_id'] == $_POST['MerchantID'])
        &&
        isset($_POST['AcquirerBIN']) && ($payment_method['settings']['acquirer_bin'] == $_POST['AcquirerBIN'])
        &&
        isset($_POST['TerminalID']) && ($payment_method['settings']['terminal_id'] == $_POST['TerminalID'])
        &&
        isset($_POST['Importe']) && ($total == $_POST['Importe'])
        &&
        isset($_POST['TipoMoneda']) && ($currency == $_POST['TipoMoneda'])
        &&
        isset($_POST['Exponente']) && ($_POST['Exponente'] == 2)
        &&
        isset($_POST['Firma']) && ($signature == $_POST['Firma'])
        &&
        isset($_POST['Idioma']) && ($lang_op == $_POST['Idioma'])
        &&
        (isset($_POST['Referencia'])) && (isset($_POST['Num_aut']))
      ) {
        $order->data['commerce_ceca_reference'] = $_POST['Referencia'];
        $order->data['commerce_ceca_num_aut'] = $_POST['Num_aut'];
        commerce_order_save($order);
        commerce_ceca_generate_payment($order, $payment_method, $_POST['Referencia']);
        $ok = TRUE;
        echo '$*$OKY$*$';
      }
    }
  }
  if (!$ok) {
    $txt = t('Bad request');
    header($txt, TRUE, 400);
    echo $txt;
  }
  die;

}
