<?php

/**
 * @file
 * Primarily Drupal hooks and taxonomy replacement functions
 * @author domdic
 * @author reptilex
 * @author rkeppner
 *
 * Original Drupal 6 version by domidc; Drupal 7 port by reptilex;
 * additional features by rkeppner.
 */

/**
 *  Implementation hook_menu()
 */
function taxonomy_autocomplete_settings_menu() {
  $items = array();
  $items['admin/config/content/taxonomy-autocomplete-settings'] = array(
    'title' => t('Taxonomy autocomplete'),
    'description' => 'Configure taxonomy autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_autocomplete_settings_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer taxonomy autocomplete settings'),
  );

  return $items;
}

/**
 * settings form
 */
function taxonomy_autocomplete_settings_settings() {
  $result = db_query("SELECT vid, name FROM {taxonomy_vocabulary}");
  $list = array(t('match anything'), t('match the beginning'));
  if ($result !== null) {
    foreach ($result as $row) {
      $form['vocab_'. $row->vid] = array(
        '#type' => 'fieldset',
        '#title' => t('Vocabulary: %vocab', array('%vocab' => $row->name)),
        '#tree' => FALSE,
      );
      $form['vocab_'. $row->vid]['taxonomy_autocomplete_settings_'. $row->vid] = array(
        '#type' => 'select',
        '#options' => $list,
        '#title' => t('Matching behavior'),
        '#default_value' => variable_get('taxonomy_autocomplete_settings_'. $row->vid, array()),
      );
      $form['vocab_'. $row->vid]['taxonomy_autocomplete_settings_results_'. $row->vid] = array(
        '#type' => 'textfield',
        '#title' => t('Number of results to show'),
        '#size' => 8,
        '#maxlength' => 5,
        '#default_value' => variable_get('taxonomy_autocomplete_settings_results_'. $row->vid, 10),
      );
      $form['vocab_'. $row->vid]['taxonomy_autocomplete_settings_second_search_'. $row->vid] = array(
        '#type' => 'checkbox',
        '#title' => t('Fill results with "match anything" results'),
        '#description' => t('If there are not enough returned results from a "match the beginning" search to equal the "number of results to show", fill the rest of the results with additional "match anything" results.'),
        '#default_value' => variable_get('taxonomy_autocomplete_settings_second_search_'. $row->vid, FALSE),
        '#states' => array(
          'visible' => array(
            ':input[name=taxonomy_autocomplete_settings_'. $row->vid .']'
              => array('value' => 1),
          ),
        ),
      );
    }
  }

  return system_settings_form($form);
}

/**
 * Implementation hook_perm()
 */
function taxonomy_autocomplete_settings_perm() {
  return array('administer taxonomy autocomplete settings');
}

/**
 * Implementation of hook_menu_alter().
 *
 * Take over the taxonomy autocompletion
 */
function taxonomy_autocomplete_settings_menu_alter(&$items) {
  $items['taxonomy/autocomplete']['module'] = 'taxonomy_autocomplete_settings';
  $items['taxonomy/autocomplete']['file'] = '';
  if (module_exists('i18n_taxonomy')) {
    $items['taxonomy/autocomplete']['page callback']['page callback'] = 'taxonomy_autocomplete_settings_i18ntaxonomy_autocomplete';
  }
  else {
    $items['taxonomy/autocomplete']['page callback']['page callback'] = 'taxonomy_autocomplete_settings_taxonomy_autocomplete';
  }

  if (module_exists('views')) {
    $items['admin/views/ajax/autocomplete/taxonomy']['module'] = 'taxonomy_autocomplete_settings';
    $items['admin/views/ajax/autocomplete/taxonomy']['file'] = '';
    if (module_exists('i18n_taxonomy')) {
      $items['admin/views/ajax/autocomplete/taxonomy']['page callback'] = 'taxonomy_autocomplete_settings_i18ntaxonomy_autocomplete';
    } else {
      $items['admin/views/ajax/autocomplete/taxonomy']['page callback'] = 'taxonomy_autocomplete_settings_taxonomy_autocomplete';
    }
  }
}

/**
 * Custom function that handles a setting to complete or
 *
 * Helper function for autocompletion.
 *
 * @ TODO Optimized localization. We cannot just tt() huge lists of terms.
 */
function taxonomy_autocomplete_settings_i18ntaxonomy_autocomplete($vid, $tags_typed = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($tags_typed);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  global $language;

  $matches = array();
  $autocomplete = '';
  if ($tag_last != '') {
    $num_results = (int) variable_get('taxonomy_autocomplete_settings_results_'. $vid, 10);
    if (variable_get('taxonomy_autocomplete_settings_'. $vid, 0) == 0) {
      $autocomplete = '%%'; // Search with any string in front.
    }
    $query = db_select('taxonomy_term_data', 't');
    $query->addTag('translatable');
    $query->addTag('term_access');

    // Do not select already entered terms.
    if (!empty($tags_typed)) {
      $query->condition('t.name', $tags_typed, 'NOT IN');
    }
    // Select rows that match by term name.
    $tags_return = $query
      ->fields('t', array('tid', 'name'))
      ->condition('t.vid', $vid)
      ->condition('t.name', $autocomplete . db_like($tag_last) .'%%', 'LIKE')
      ->condition('t.language', $language->language)
      ->range(0, $num_results)
      ->execute()
      ->fetchAllKeyed();

    $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) .', ' : '';

    $term_matches = array();
    foreach ($tags_return as $tid => $name) {
      $n = $name;
      // Term names containing commas or quotes must be wrapped in quotes.
      if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
        $n = '"'. str_replace('"', '""', $name) .'"';
      }
      // Add term name to list of matches.
      $term_matches[$prefix . $n] = check_plain($name);
    }

    // If less than max matches, add second search with middle string in terms.
    if (variable_get('taxonomy_autocomplete_settings_second_search_'. $vid, FALSE)) {
      $amount_matches = count($term_matches);
      if ($amount_matches < $num_results) {

        $query = db_select('taxonomy_term_data', 't');
        $query->addTag('translatable');
        $query->addTag('term_access');

        // Do not select already entered terms.
        if (!empty($tags_typed)) {
          $query->condition('t.name', $tags_typed, 'NOT IN');
        }
        // Select rows that match by term name.
        $tags_return = $query
        ->fields('t', array('tid', 'name'))
        ->condition('t.vid', $vid)
        ->condition('t.name', '%%'. db_like($tag_last) .'%%', 'LIKE')
        ->condition('t.language', $language->language)
        ->range(0, $num_results - $amount_matches)
        ->execute()
        ->fetchAllKeyed();

        $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) .', ' : '';

        foreach ($tags_return as $tid => $name) {
          $n = $name;
          // Term names containing commas or quotes must be wrapped in quotes.
          if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
            $n = '"'. str_replace('"', '""', $name) .'"';
          }
          // Add term name to list of matches.
          $term_matches[$prefix . $n] = check_plain($name);
        }
      }
    }
  }

  drupal_json_output($term_matches);
}

/**
 * Helper function for autocompletion
 */
function taxonomy_autocomplete_settings_taxonomy_autocomplete($vid, $tags_typed = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($tags_typed);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  $matches = array();
  $autocomplete = '';
  if ($tag_last != '') {
    $num_results = (int) variable_get('taxonomy_autocomplete_settings_results_'. $vid, 10);
    if (variable_get('taxonomy_autocomplete_settings_'. $vid, 0) == 0) {
      $autocomplete = '%%'; // Search with any string in front.
    }
    $query = db_select('taxonomy_term_data', 't');
    $query->addTag('translatable');
    $query->addTag('term_access');

    // Do not select already entered terms.
    if (!empty($tags_typed)) {
      $query->condition('t.name', $tags_typed, 'NOT IN');
    }
    // Select rows that match by term name.
    $tags_return = $query
      ->fields('t', array('tid', 'name'))
      ->condition('t.vid', $vid)
      ->condition('t.name', $autocomplete . db_like($tag_last) .'%%', 'LIKE')
      ->range(0, $num_results)
      ->execute()
      ->fetchAllKeyed();

    $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) .', ' : '';

    $term_matches = array();
    foreach ($tags_return as $tid => $name) {
      $n = $name;
      // Term names containing commas or quotes must be wrapped in quotes.
      if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
        $n = '"'. str_replace('"', '""', $name) .'"';
      }
      // Add term name to list of matches.
      $term_matches[$prefix . $n] = check_plain($name);
    }

    // If less than max matches, add second search with middle string in terms.
    if (variable_get('taxonomy_autocomplete_settings_second_search_'. $vid, FALSE)) {
      $amount_matches = count($term_matches);
      if ($amount_matches < $num_results) {

        $query = db_select('taxonomy_term_data', 't');
        $query->addTag('translatable');
        $query->addTag('term_access');

        // Do not select already entered terms.
        if (!empty($tags_typed)) {
          $query->condition('t.name', $tags_typed, 'NOT IN');
        }
        // Select rows that match by term name.
        $tags_return = $query
        ->fields('t', array('tid', 'name'))
        ->condition('t.vid', $vid)
        ->condition('t.name', '%%'. db_like($tag_last) .'%%', 'LIKE')
        ->range(0, $num_results - $amount_matches)
        ->execute()
        ->fetchAllKeyed();

        $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) .', ' : '';

        foreach ($tags_return as $tid => $name) {
          $n = $name;
          // Term names containing commas or quotes must be wrapped in quotes.
          if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
            $n = '"'. str_replace('"', '""', $name) .'"';
          }
          // Add term name to list of matches.
          $term_matches[$prefix . $n] = check_plain($name);
        }
      }
    }
  }

  drupal_json_output($term_matches);
}

function taxonomy_autocomplete_settings_taxonomy($op, $type, $array = NULL) {
  if ($op == 'delete' && $type == 'vocabulairy') {
    variable_del('taxonomy_autocomplete_settings_'. $array['vid']);
    variable_del('taxonomy_autocomplete_settings_results_'. $array['vid']);
  }
}