<?php

/**
 * @file
 * Menu, form_alter, Mail template and mail functions for the node module.
 */

/**
 * Implements hook_menu().
 */
function webform_confirmation_menu() {
  $items = array();
  $items['admin/config/webform-confirmation'] = array(
    'title' => 'Webform Confirmation',
    'description' => 'Configure the webform so that user could send conformation.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_confirmation_form'),
    'access arguments' => array('webform configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'webform_confirmation.admin.inc',
  );
  $items['admin/config/webform-confirmation/setting'] = array(
    'title' => 'Settings',
    'description' => 'Configure the webform so that user could send conformation ',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/webform-confirmation/template'] = array(
    'title' => 'Email Template',
    'description' => 'Configure the webform mail being sent',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_confirmation_form_template'),
    'access arguments' => array('webform configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'webform_confirmation.admin.inc',
  );
  $items['admin/config/webform-confirmation/search'] = array(
    'title' => 'Submissions',
    'description' => 'List of all Submissions',
    'page callback' => 'webform_confirmation_search',
    'access arguments' => array('webform configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'webform_confirmation.admin.inc',
  );
  $items['webform_confirmation/verify'] = array(
    'title' => 'Confirming Verification',
    'page callback' => 'webform_confirmation_confirming_verification',
    'access arguments' => array('verification configuration'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function webform_confirmation_permission() {
  return array(
    'webform configuration' => array(
      'title' => t('Email Configuration for webform'),
      'description' => t('Select the email confirmation'),
    ),
    'verification configuration' => array(
      'title' => t('Verification request'),
      'description' => t('Provides verification'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function webform_confirmation_form_alter(&$form, &$form_state, $form_id) {
  $webform_confirmation = variable_get('webform_confirmation_config', array());
  if (in_array($form_id, $webform_confirmation)) {
    $form['#submit'][] = 'webform_confirmation_submit';
  }
}

/**
 * Implements a new submit handler.
 */
function webform_confirmation_submit($form, &$form_state) {
  global $base_url;
  $webform_id = $form['#node']->nid;
  $webform_name = $form['#node']->title;
  $mail_id = $form_state['complete form']['submitted']['email']['#value'];
  $hash = md5(rand(0, 1000));
  $sid = $form_state['values']['details']['sid'];
  db_insert("webform_confirmation")
    ->fields(array(
      'hash' => $hash,
      'sender_email' => $mail_id,
      'webform_id' => $webform_id,
      'sid' => $sid,
      'webform_name' => $webform_name,
      'status' => 0))
    ->execute();
  $module = 'webform_confirmation';
  $key = 'Confirmation';
  $from = variable_get('webform_confirmation_email_address');
  $body = variable_get('webform_confirmation_body_start', '') . "\n\n";
  if(!variable_get('webform_confirmation_no_verfication_link')) {
    $confirmation_link = $base_url . '/webform_confirmation/verify?email=' . $mail_id . '&hash=' . $hash;
    if (variable_get('webform_confirmation_shorten_url', 0)) {
      $login = variable_get('webform_confirmation_login', '');
      $api_key = variable_get('webform_confirmation_api_key', '');
      $body .= webform_confirmation_bitly_shorten($confirmation_link, $login, $api_key) . "\n\n";
    }
    else {
      $body .= $confirmation_link . "\n\n";
    }
  }
  else {
    db_update('webform_confirmation')
      ->fields(array(
        'status' => 1
      ))
      ->condition('hash', $hash)
      ->condition('sender_email', $mail_id)
      ->execute();
  }
  $subject = variable_get('webform_confirmation_subject_name', '');
  $body .= variable_get('webform_confirmation_body_end', '');
  $params = array(
    'subject' => $subject,
    'body' => $body,
  );
  $result = drupal_mail($module, $key, $mail_id, 'en', $params, $from);
  if ($result) {
    drupal_set_message(t("Mail sent successfully"));
  }
}

/**
 * Implements hook_mail().
 */
function webform_confirmation_mail($key, &$message, $params) {
  switch ($key) {
    case 'Confirmation':
      $message['subject'] = $params['subject'];
      $message['body'] = array($params['body']);
  }
}

/**
 * Implements a custom function for confirming verification.
 */
function webform_confirmation_confirming_verification() {
  $mail_id = $_GET['email'];
  $hash_code = $_GET['hash'];
  global $base_url;
  $result = db_select('webform_confirmation', 'wc')
    ->fields('wc', array('hash', 'sender_email', 'status', 'webform_id'))
    ->condition('sender_email', $mail_id)
    ->condition('hash', $hash_code)
    ->execute()->fetchAll();
  if ($result[0]->status == 1) {
    drupal_set_message(t("You have already confirmed the submission."));
  }
  else {
    db_update('webform_confirmation')
      ->fields(array(
        'status' => 1,
      ))
      ->condition('sender_email', $mail_id)
      ->condition('hash', $hash_code)
      ->execute();
  }
  $webform_confirmation_redirect = variable_get('webform_confirmation_redirect');
  if (!empty($webform_confirmation_redirect)) {
    $webform_confirmation_redirect_link = $base_url . '/' . $webform_confirmation_redirect;
    drupal_goto($webform_confirmation_redirect_link);
  }
  else {
    drupal_goto();
  }
}

/**
 * Implements custom function to shorten url.
 */
function webform_confirmation_bitly_shorten($url, $login, $api_key) {
  $query = array(
    "version" => "2.0.1",
    "longUrl" => $url,
    "login" => $login,
    "apiKey" => $api_key,
  );

  $query = http_build_query($query);

  $request = drupal_http_request("http://api.bit.ly/shorten?" . $query);
  $response = json_decode($request->data);

  if ($response->errorCode == 0 && $response->statusCode == "OK") {
    return $response->results->{$url}->shortUrl;
  }
  else {
    return NULL;
  }
}

/**
 * Implements hook_views_api().
 */
function webform_confirmation_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'webform_confirmation'),
  );
}
