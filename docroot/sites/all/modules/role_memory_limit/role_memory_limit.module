<?php

/**
 * @file
 * Set PHP memory limit by role.
 */

/**
 * Implements hook_init().
 */
function role_memory_limit_init() {
  // If module is enabled.
  if (variable_get('role_memory_limit_status', 0)) {
    global $user;

    $memory_limits = array();

    // If command line (drush).
    if (php_sapi_name() == 'cli') {
      $memory_limits[] = variable_get('role_memory_limit_role_cli', 0);
    }
    // If superadmin.
    elseif ($user->uid == 1) {
      $memory_limits[] = variable_get('role_memory_limit_role_admin', 0);
    }
    // Else check the users roles.
    elseif ($user->roles) {
      foreach ($user->roles as $rid => $role) {
        $memory_limits[] = variable_get('role_memory_limit_role_' . $rid, 0);
      }
    }

    // If an image cach path
    // See routes as defined in image_menu()
    $public_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
    $image_paths = array(
      $public_path . '/styles/',
      'system/files/styles/',
    );
    $current_path = current_path();
    foreach ($image_paths as $path){
      if (strpos($current_path, $path) === 0){
        $memory_limits[] = variable_get('role_memory_limit_role_image', 0);
      }
    }

    // Take the highest memory limit
    $mb = min($memory_limits) < 0 ? -1 : max($memory_limits);

    if ($mb) {
      if ($mb != '-1') {
        $mb .= 'M';
      }

      ini_set('memory_limit', $mb);
    }
  }
}

/**
 * Implements hook_permission().
 */
function role_memory_limit_permission() {
  return array(
    'administer role_memory_limit' => array(
      'title' => t('Administer Role memory limit'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function role_memory_limit_menu() {
  $items['admin/config/development/role_memory_limit'] = array(
    'title' => 'Role memory limit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_memory_limit_settings_form'),
    'file' => 'role_memory_limit.admin.inc',
    'access arguments' => array('administer role_memory_limit'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_user_role_delete().
 */
function role_memory_limit_user_role_delete($role) {
  variable_del('role_memory_limit_role_' . $role->rid);
}
