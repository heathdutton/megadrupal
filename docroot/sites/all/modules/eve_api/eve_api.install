<?php
/**
 * @file
 * Install, update, and uninstall functions for the Omni EVE API module.
 */

/**
 * Implements hook_schema().
 */
function eve_api_schema() {
  $tiny_int = array(
    'type' => 'int',
    'size' => 'tiny',
    'length' => 1,
    'not null' => FALSE,
    'default' => 0,
  );

  $small_int = array(
    'type' => 'int',
    'size' => 'small',
    'length' => 3,
    'not null' => FALSE,
    'default' => 0,
  );

  $int = array(
    'type' => 'int',
    'length' => 10,
    'not null' => FALSE,
    'default' => 0,
  );

  $big_int = array(
    'type' => 'int',
    'size' => 'big',
    'length' => 20,
    'not null' => FALSE,
    'default' => 0,
  );

  $varchar = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => '',
  );

  $date = array(
    'type' => 'datetime',
    'mysql_type' => 'DATETIME',
    'pgsql_type' => 'timestamp without time zone',
    'sqlite_type' => 'VARCHAR',
    'sqlsrv_type' => 'smalldatetime',
    'not null' => FALSE,
    'sortable' => TRUE,
    'views' => TRUE,
    'default' => '1970-01-01 00:00:00',
  );

  $numeric = array(
    'type' => 'numeric',
    'precision' => 17,
    'scale' => 2,
    'unsigned' => FALSE,
    'not null' => FALSE,
    'default' => 0.0,
  );

  $double = array(
    'type' => 'float',
    'size' => 'big',
    'precision' => 17,
    'scale' => 2,
    'unsigned' => FALSE,
    'not null' => FALSE,
    'default' => 0.0,
  );

  $schema = array();

  $schema['eve_api_keys'] = array(
    'description' => 'List of API Keys associated with each drupal user.',
    'fields' => array(
      'apiID' => array(
        'description' => 'Unique API ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Drupal user ID.',
        'not null' => TRUE,
      ) + $int,
      'keyID' => array(
        'description' => 'API key ID.',
        'not null' => TRUE,
      ) + $big_int,
      'vCode' => array(
        'description' => 'API verification code.',
        'length' => 64,
        'not null' => TRUE,
      ) + $varchar,
      'errorCode' => array(
        'description' => 'Error code to identify status of last API pull.',
        'not null' => TRUE,
      ) + $int,
      'errorText' => array(
        'description' => 'Error message returned with errorCode from last API pull.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'updated' => array(
        'description' => 'When the API was last updated.',
        'not null' => TRUE,
      ) + $date,
      'created' => array(
        'description' => 'When the API was created.',
        'not null' => TRUE,
      ) + $date,
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'keyID' => array('keyID'),
      'errorCode' => array('errorCode'),
    ),
    'unique keys' => array('keyID_vCode' => array('keyID', 'vCode')),
    'primary key' => array('apiID'),
  );

  $schema['eve_api_characters'] = array(
    'description' => 'API data pulled from /account/APIKeyInfo.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'uid' => array(
        'description' => 'Drupal user ID.',
        'not null' => TRUE,
      ) + $int,
      'apiID' => array(
        'description' => 'API ID.',
        'not null' => TRUE,
      ) + $int,
      'characterName' => array(
        'description' => 'Character name',
        'not null' => TRUE,
      ) + $varchar,
      'corporationID' => array(
        'description' => 'Corporation id character belongs to.',
        'not null' => TRUE,
      ) + $big_int,
      'corporationName' => array(
        'description' => 'Corporation name character belongs to.',
        'not null' => TRUE,
      ) + $varchar,
      'corporationTicker' => array(
        'description' => 'Corporation ticker character belongs to.',
        'not null' => TRUE,
      ) + $varchar,
      'allianceID' => array(
        'description' => 'Alliance id character belongs to.',
      ) + $big_int,
      'allianceName' => array(
        'description' => 'Alliance name character belongs to.',
      ) + $varchar,
      'allianceTicker' => array(
        'description' => 'Alliance ticker character belongs to.',
      ) + $varchar,
      'accessMask' => array(
        'description' => 'API key access mask retrieved from last API pull.',
        'not null' => TRUE,
      ) + $big_int,
      'errorCode' => array(
        'description' => 'Error code to identify status of last API pull.',
        'not null' => TRUE,
      ) + $int,
      'errorText' => array(
        'description' => 'Error message returned with errorCode from last API pull.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'deleted' => array(
        'description' => 'Indicates if character exists to an API key any longer.',
        'length' => 2,
        'not null' => TRUE,
      ) + $tiny_int,
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'apiID' => array('apiID'),
      'errorCode' => array('errorCode'),
      'deleted' => array('deleted'),
    ),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_character_sheet'] = array(
    'description' => 'API data pulled from /char/CharacterSheet.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'name' => array(
        'description' => 'Character name.',
        'not null' => TRUE,
      ) + $varchar,
      'corporationID' => array(
        'description' => 'Corporation id character belongs to.',
        'not null' => TRUE,
      ) + $big_int,
      'corporationName' => array(
        'description' => 'Corporation name character belongs to.',
        'not null' => TRUE,
      ) + $varchar,
      'allianceID' => array(
        'description' => 'Alliance id character belongs to.',
      ) + $big_int,
      'allianceName' => array(
        'description' => 'Alliance name character belongs to.',
      ) + $varchar,
      'DoB' => array(
        'description' => 'Date of birth of the character.',
        'not null' => TRUE,
      ) + $date,
      'race' => array(
        'description' => 'Race of the character.',
        'not null' => TRUE,
      ) + $varchar,
      'bloodLine' => array(
        'description' => 'Blood line of the character.',
        'not null' => TRUE,
      ) + $varchar,
      'ancestry' => array(
        'description' => 'Ancestry of the character.',
        'not null' => TRUE,
      ) + $varchar,
      'gender' => array(
        'description' => 'Gender of the character.',
        'not null' => TRUE,
      ) + $varchar,
      'factionID' => array(
        'description' => 'Faction id character belongs to.',
      ) + $big_int,
      'factionName' => array(
        'description' => 'Faction name character belongs to.',
      ) + $varchar,
      'cloneName' => array(
        'description' => 'Clone name of the character.',
        'not null' => TRUE,
      ) + $varchar,
      'cloneSkillPoints' => array(
        'description' => 'Skill points the clone will protect when character dies.',
        'not null' => TRUE,
      ) + $big_int,
      'balance' => array(
        'description' => 'ISK balance.',
        'not null' => TRUE,
      ) + $numeric,
      'intelligence' => array(
        'description' => 'Intelligence attribute of the character.',
        'length' => 2,
        'not null' => TRUE,
      ) + $tiny_int,
      'memory' => array(
        'description' => 'Memory attribute of the character.',
        'length' => 2,
        'not null' => TRUE,
      ) + $tiny_int,
      'charisma' => array(
        'description' => 'Charisma attribute of the character.',
        'length' => 2,
        'not null' => TRUE,
      ) + $tiny_int,
      'perception' => array(
        'description' => 'Perception attribute of the character.',
        'length' => 2,
        'not null' => TRUE,
      ) + $tiny_int,
      'willpower' => array(
        'description' => 'Willpower attribute of the character.',
        'length' => 2,
        'not null' => TRUE,
      ) + $tiny_int,
      'errorCode' => array(
        'description' => 'Error code to identify status of last API pull.',
        'not null' => TRUE,
      ) + $int,
      'errorText' => array(
        'description' => 'Error message returned with errorCode from last API pull.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ) + _eve_api_phoebe_fields($small_int, $big_int, $date),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_character_sheet_attribute_enhancers'] = array(
    'description' => 'API data pulled from /char/CharacterSheet.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'bonusName' => array(
        'description' => 'Attribute bonus name.',
        'length' => 100,
        'not null' => TRUE,
      ) + $varchar,
      'augmentatorName' => array(
        'description' => 'Attribute augmentator name.',
        'length' => 100,
        'not null' => TRUE,
      ) + $varchar,
      'augmentatorValue' => array(
        'description' => 'Attribute augmentator value.',
        'length' => 2,
      ) + $int,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
    ),
  );

  $schema['eve_api_character_sheet_certificates'] = array(
    'description' => 'API data pulled from /char/CharacterSheet.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'certificateID' => array(
        'description' => 'Certificate ID.',
        'not null' => TRUE,
      ) + $big_int,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
      'certificateID' => array('certificateID'),
    ),
    'primary key' => array('characterID', 'certificateID'),
  );

  $schema['eve_api_character_sheet_titles'] = array(
    'description' => 'API data pulled from /char/CharacterSheet.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'titleID' => array(
        'description' => 'Title ID.',
        'not null' => TRUE,
      ) + $big_int,
      'titleName' => array(
        'description' => 'Title name.',
        'not null' => TRUE,
      ) + $varchar,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
    ),
    'primary key' => array('characterID', 'titleID'),
  );

  $schema['eve_api_character_sheet_skills'] = array(
    'description' => 'API data pulled from /char/CharacterSheet.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'typeID' => array(
        'description' => 'Skill type ID.',
        'not null' => TRUE,
      ) + $big_int,
      'skillpoints' => array(
        'description' => 'Total Skill points accumulated for the skill.',
        'not null' => TRUE,
      ) + $big_int,
      'level' => array(
        'description' => 'Current level of the skill.',
        'not null' => TRUE,
      ) + $tiny_int,
      'published' => array(
        'description' => 'Is skill published.',
        'not null' => TRUE,
      ) + $tiny_int,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
      'typeID' => array('typeID'),
      'level' => array('level'),
    ),
    'primary key' => array('characterID', 'typeID'),
  );

  $schema['eve_api_character_sheet_roles'] = array(
    'description' => 'API data pulled from /char/CharacterSheet.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'type' => array(
        'description' => 'Role type.',
        'not null' => TRUE,
      ) + $varchar,
      'roleID' => array(
        'description' => 'Role ID.',
        'not null' => TRUE,
      ) + $big_int,
      'roleName' => array(
        'description' => 'Role name.',
        'not null' => TRUE,
      ) + $varchar,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
      'type' => array('type'),
      'roleID' => array('roleID'),
    ),
  );

  $schema['eve_api_character_info'] = array(
    'description' => 'API data pulled from /eve/CharacterInfo.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'characterName' => array(
        'description' => 'Character name.',
        'not null' => TRUE,
      ) + $varchar,
      'race' => array(
        'description' => 'Race of the character.',
        'not null' => TRUE,
      ) + $varchar,
      'bloodLine' => array(
        'description' => 'Blood line of the character.',
        'not null' => TRUE,
      ) + $varchar,
      'accountBalance' => array(
        'description' => 'ISK balance.',
        'not null' => TRUE,
      ) + $numeric,
      'skillPoints' => array(
        'description' => 'Total skill points.',
        'not null' => TRUE,
      ) + $big_int,
      'nextTrainingEnds' => array(
        'description' => 'When the training ends.',
      ) + $date,
      'shipName' => array(
        'description' => 'Last known ship name.',
        'not null' => TRUE,
      ) + $varchar,
      'shipTypeID' => array(
        'description' => 'Last known ship type ID.',
        'not null' => TRUE,
      ) + $big_int,
      'shipTypeName' => array(
        'description' => 'Last known ship type name.',
        'not null' => TRUE,
      ) + $varchar,
      'corporationID' => array(
        'description' => 'Corporation ID character belongs to.',
        'not null' => TRUE,
      ) + $big_int,
      'corporation' => array(
        'description' => 'Corporation name character belongs to.',
        'not null' => TRUE,
      ) + $varchar,
      'corporationDate' => array(
        'description' => 'When character joined the corporation.',
        'not null' => TRUE,
      ) + $date,
      'allianceID' => array(
        'description' => 'Alliance ID character belongs to.',
      ) + $big_int,
      'alliance' => array(
        'description' => 'Alliance name character belongs to.',
      ) + $varchar,
      'allianceDate' => array(
        'description' => 'When corporation joined the alliance.',
      ) + $date,
      'lastKnownLocation' => array(
        'description' => 'Last known location.',
        'not null' => TRUE,
      ) + $varchar,
      'securityStatus' => array(
        'description' => 'Characters security status.',
        'not null' => TRUE,
        'precision' => 32,
        'scale' => 8,
      ) + $double,
      'errorCode' => array(
        'description' => 'Error code to identify status of last API pull.',
        'not null' => TRUE,
      ) + $int,
      'errorText' => array(
        'description' => 'Error message returned with errorCode from last API pull.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_character_info_corporation_history'] = array(
    'description' => 'API data pulled from /eve/CharacterInfo.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'recordID' => array(
        'description' => 'Unique record ID.',
        'not null' => TRUE,
      ) + $big_int,
      'corporationID' => array(
        'description' => 'Corporation ID.',
        'not null' => TRUE,
      ) + $big_int,
      'startDate' => array(
        'description' => 'Date the character joined the corporation.',
        'not null' => TRUE,
      ) + $date,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
      'recordID' => array('recordID'),
    ),
    'primary key' => array('characterID', 'recordID'),
  );

  $schema['eve_api_skill_in_training'] = array(
    'description' => 'API data pulled from /char/SkillInTraining.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'currentTQTime' => array(
        'description' => 'EVE Tranquility time.',
      ) + $date,
      'trainingEndTime' => array(
        'description' => 'Time until training completes.',
      ) + $date,
      'trainingStartTime' => array(
        'description' => 'Time when training started.',
      ) + $date,
      'trainingTypeID' => array(
        'description' => 'Type ID of skill in training.',
      ) + $big_int,
      'trainingStartSP' => array(
        'description' => 'Skill points of the skill when training started.',
      ) + $big_int,
      'trainingDestinationSP' => array(
        'description' => 'Skill points of the skill when training ends.',
      ) + $big_int,
      'trainingToLevel' => array(
        'description' => 'Level of the skill being trained.',
      ) + $tiny_int,
      'skillInTraining' => array(
        'description' => 'Indicates if the character is training.',
        'not null' => TRUE,
      ) + $tiny_int,
      'errorCode' => array(
        'description' => 'Error code to identify status of last API pull.',
        'not null' => TRUE,
      ) + $int,
      'errorText' => array(
        'description' => 'Error message returned with errorCode from last API pull.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'trainingTypeID' => array('trainingTypeID'),
    ),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_mail_messages'] = array(
    'description' => 'API data pulled from /char/MailMessages.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'messageID' => array(
        'description' => 'Unique message ID.',
        'not null' => TRUE,
      ) + $big_int,
      'senderID' => array(
        'description' => 'Character ID or mailing list ID of the message originator.',
        'not null' => TRUE,
      ) + $big_int,
      'senderName' => array(
        'description' => 'The Senders Name.',
        'not null' => TRUE,
      ) + $varchar,
      'sentDate' => array(
        'description' => 'Date & time message sent.',
        'not null' => TRUE,
      ) + $date,
      'title' => array(
        'description' => 'Title of the message.',
        'not null' => TRUE,
      ) + $varchar,
      'toCorpOrAllianceID' => array(
        'description' => 'Corporate or Alliance ID.',
        'not null' => TRUE,
      ) + $big_int,
      'toCharacterIDs' => array(
        'description' => 'Comma-separated list of character IDs of the characters that received the message.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'toListID' => array(
        'description' => 'Comma-separated list of mailing lists that the mail was sent to.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'senderTypeID' => array(
        'description' => 'Character ID or mailing list ID type.',
      ) + $big_int,
    ),
    'indexes' => array(
      'messageID' => array('messageID'),
      'characterID' => array('characterID'),
      'senderID' => array('senderID'),
      'toCorpOrAllianceID' => array('toCorpOrAllianceID'),
    ),
    'primary key' => array('characterID', 'messageID'),
  );

  $schema['eve_api_mail_bodies'] = array(
    'description' => 'API data pulled from /char/MailBodies.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'messageID' => array(
        'description' => 'Unique message ID.',
        'not null' => TRUE,
      ) + $big_int,
      'message' => array(
        'description' => 'Mail message body.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'messageID' => array('messageID'),
      'characterID' => array('characterID'),
    ),
    'primary key' => array('characterID', 'messageID'),
  );

  $schema['eve_api_contracts'] = array(
    'description' => 'API data pulled from /char/Contracts.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'contractID' => array(
        'description' => 'Unique contract ID.',
        'not null' => TRUE,
      ) + $big_int,
      'issuerID' => array(
        'description' => 'Character ID who created contract.',
        'not null' => TRUE,
      ) + $big_int,
      'issuerCorpID' => array(
        'description' => 'Corporation ID who created contract.',
        'not null' => TRUE,
      ) + $big_int,
      'assigneeID' => array(
        'description' => 'Character ID to whom the contract was discharged.',
      ) + $big_int,
      'acceptorID' => array(
        'description' => 'Who will accept the contract. If assigneeID is same as acceptorID then CharacterID else CorporationID.',
      ) + $big_int,
      'startStationID' => array(
        'description' => 'Start station ID.',
      ) + $big_int,
      'endStationID' => array(
        'description' => 'End station ID.',
      ) + $big_int,
      'type' => array(
        'description' => 'Type of the contract.',
        'not null' => TRUE,
      ) + $varchar,
      'status' => array(
        'description' => 'Status of the the contract.',
        'not null' => TRUE,
      ) + $varchar,
      'title' => array(
        'description' => 'Title of the contract.',
        'not null' => TRUE,
      ) + $varchar,
      'forCorp' => array(
        'description' => '1 if the contract was issued on behalf of the issuers corporation, 0 otherwise.',
      ) + $tiny_int,
      'availability' => array(
        'description' => 'Public or Private.',
        'not null' => TRUE,
      ) + $varchar,
      'dateIssued' => array(
        'description' => 'Сreation date of the contract.',
        'not null' => TRUE,
      ) + $date,
      'dateExpired' => array(
        'description' => 'Expiration date of the contract.',
        'not null' => TRUE,
      ) + $date,
      'dateAccepted' => array(
        'description' => 'Date of confirmation of contract.',
      ) + $date,
      'numDays' => array(
        'description' => 'Number of days to perform the contract.',
      ) + $small_int,
      'dateCompleted' => array(
        'description' => 'Date contract was completed.',
      ) + $date,
      'price' => array(
        'description' => 'Price of contract (for ItemsExchange and Auctions)',
      ) + $double,
      'reward' => array(
        'description' => 'Remuneration for contract (for Couriers only).',
      ) + $double,
      'collateral' => array(
        'description' => 'Collateral price (for Couriers only).',
      ) + $double,
      'buyout' => array(
        'description' => 'Buyout price (for Auctions only).',
      ) + $double,
      'volume' => array(
        'description' => 'Volume of items in the contract.',
      ) + $big_int,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
      'contractID' => array('contractID'),
    ),
    'primary key' => array('characterID', 'contractID'),
  );

  $schema['eve_api_wallet_journal'] = array(
    'description' => 'API data pulled from /char/WalletJournal.xml.aspx.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'refID' => array(
        'description' => 'Unique reference ID.',
        'not null' => TRUE,
      ) + $big_int,
      'date' => array(
        'description' => 'Date & time of the transaction.',
        'not null' => TRUE,
      ) + $date,
      'refTypeID' => array(
        'description' => 'Transaction type.',
        'not null' => TRUE,
      ) + $small_int,
      'ownerName1' => array(
        'description' => 'Name of first party in the transaction.',
        'not null' => TRUE,
      ) + $varchar,
      'ownerID1' => array(
        'description' => 'Character or corporation ID of the first party.',
        'not null' => TRUE,
      ) + $big_int,
      'ownerName2' => array(
        'description' => 'Name of second party in the transaction.',
        'not null' => TRUE,
      ) + $varchar,
      'ownerID2' => array(
        'description' => 'Character or corporation ID of the second party.',
        'not null' => TRUE,
      ) + $big_int,
      'argName1' => array(
        'description' => 'Depending on the RefTypeID, this row will change.',
      ) + $varchar,
      'argID1' => array(
        'description' => 'The value of argName1.',
      ) + $big_int,
      'amount' => array(
        'description' => 'The amount transferred between parties',
        'not null' => TRUE,
      ) + $double,
      'balance' => array(
        'description' => 'The overall balance in this wallet, after this transaction.',
        'not null' => TRUE,
      ) + $double,
      'reason' => array(
        'description' => 'Either empty or a message related to the transaction.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'taxReceiverID' => array(
        'description' => 'If the row is related to taxation, then this is the CorporationID of who recieved the tax.',
      ) + $big_int,
      'taxAmount' => array(
        'description' => 'If the row is related to taxation, then this is the amount of tax paid.',
      ) + $double,
      'owner1TypeID' => array(
        'description' => 'Character or corporation Type ID of the first party.',
      ) + $big_int,
      'owner2TypeID' => array(
        'description' => 'Character or corporation Type ID of the second party.',
      ) + $big_int,
    ),
    'indexes' => array(
      'characterID' => array('characterID'),
      'refTypeID' => array('refTypeID'),
      'refID' => array('refID'),
    ),
    'primary key' => array('characterID', 'refID'),
  );

  $schema['eve_api_role_ceo_director'] = array(
    'description' => 'List of manually created CEO and Directors.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'isCEO' => array(
        'description' => 'Indicate if the character is a CEO.',
        'not null' => TRUE,
      ) + $tiny_int,
      'isDirector' => array(
        'description' => 'Indicate if the character is a Director.',
        'not null' => TRUE,
      ) + $tiny_int,
      'memo' => array(
        'description' => 'Short description of why character was added.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'isCEO' => array('isCEO'),
      'isDirector' => array('isDirector'),
    ),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_whitelist'] = array(
    'description' => 'Whitelist of characters that are only required to enter a limited API Key.',
    'fields' => array(
      'characterID' => array(
        'description' => 'Unique character ID.',
        'not null' => TRUE,
      ) + $big_int,
      'characterName' => array(
        'description' => 'Character name',
        'not null' => TRUE,
      ) + $varchar,
      'memo' => array(
        'description' => 'Short description of why character was added.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('characterID'),
  );

  $schema['eve_api_skill_tree_groups'] = array(
    'description' => 'API data pulled from /eve/SkillTree.xml.aspx.',
    'fields' => array(
      'groupID' => array(
        'description' => 'Skill group ID.',
        'not null' => TRUE,
      ) + $big_int,
      'groupName' => array(
        'description' => 'Skill group name.',
        'not null' => TRUE,
      ) + $varchar,
    ),
    'primary key' => array('groupID'),
  );

  $schema['eve_api_skill_tree'] = array(
    'description' => 'API data pulled from /eve/SkillTree.xml.aspx.',
    'fields' => array(
      'typeID' => array(
        'description' => 'Skill type ID.',
        'not null' => TRUE,
      ) + $big_int,
      'typeName' => array(
        'description' => 'Skill type name.',
        'not null' => TRUE,
      ) + $varchar,
      'groupID' => array(
        'description' => 'Skill group ID.',
        'not null' => TRUE,
      ) + $big_int,
    ),
    'indexes' => array(
      'groupID' => array('groupID'),
    ),
    'primary key' => array('typeID'),
  );

  $schema['eve_api_call_list_groups'] = array(
    'description' => 'API data pulled from /api/calllist.xml.aspx.',
    'fields' => array(
      'groupID' => array(
        'description' => 'Unique group ID.',
        'not null' => TRUE,
      ) + $big_int,
      'name' => array(
        'description' => 'Access mask group name.',
        'not null' => TRUE,
      ) + $varchar,
      'description' => array(
        'description' => 'Access mask group description.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('groupID'),
  );

  $schema['eve_api_call_list'] = array(
    'description' => 'API data pulled from /api/calllist.xml.aspx.',
    'fields' => array(
      'accessmask' => array(
        'description' => 'Access mask.',
        'not null' => TRUE,
      ) + $big_int,
      'type' => array(
        'description' => 'Access mask type.',
        'not null' => TRUE,
      ) + $varchar,
      'name' => array(
        'description' => 'Access mask name.',
        'not null' => TRUE,
      ) + $varchar,
      'groupID' => array(
        'description' => 'Unique group ID.',
        'not null' => TRUE,
      ) + $big_int,
      'description' => array(
        'description' => 'Access mask description.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'type' => array('type'),
      'groupID' => array('groupID'),
      'accessmask' => array('accessmask'),
    ),
    'primary key' => array('accessmask', 'type'),
  );

  $schema['eve_api_error_list'] = array(
    'description' => 'API data pulled from /api/ErrorList.xml.aspx.',
    'fields' => array(
      'errorCode' => array(
        'description' => 'Error Code.',
        'not null' => TRUE,
      ) + $big_int,
      'errorText' => array(
        'description' => 'Error Message.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('errorCode'),
  );

  $schema['eve_api_contact_list'] = array(
    'description' => 'API data pulled from /corp/ContactList.xml.aspx.',
    'fields' => array(
      'contactID' => array(
        'description' => 'Unique contact ID.',
        'not null' => TRUE,
      ) + $big_int,
      'contactName' => array(
        'description' => 'Contact name.',
        'not null' => TRUE,
      ) + $varchar,
      'standing' => array(
        'description' => 'Contact standing.',
        'size' => 'small',
        'not null' => TRUE,
        'precision' => 3,
        'scale' => 1,
      ) + $double,
      'contactTypeID' => array(
        'description' => 'The TypeID of the contact.',
        'not null' => TRUE,
      ) + $big_int,
      'manual' => array(
        'description' => 'Indicate if manually added.',
        'not null' => TRUE,
      ) + $tiny_int,
      'checked' => array(
        'description' => 'Temporary indicator for removing expired contacts.',
        'not null' => TRUE,
      ) + $tiny_int,
      'memo' => array(
        'description' => 'Short description of why standing was added.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'standing' => array('standing'),
      'manual' => array('manual'),
      'checked' => array('checked'),
    ),
    'primary key' => array('contactID'),
  );

  $schema['eve_api_alliance_list_corporations'] = array(
    'description' => 'API data pulled from /eve/AllianceList.xml.aspx.',
    'fields' => array(
      'corporationID' => array(
        'description' => 'The Corporation ID.',
        'not null' => TRUE,
      ) + $big_int,
      'rid' => array(
        'description' => 'The Drupal role ID.',
        'not null' => TRUE,
      ) + $int,
      'corporationName' => array(
        'description' => 'The Corporation Name.',
        'not null' => TRUE,
      ) + $varchar,
      'corporationTicker' => array(
        'description' => 'The Corporation Ticker.',
        'not null' => TRUE,
      ) + $varchar,
      'ceoID' => array(
        'description' => 'The CEO ID.',
        'not null' => TRUE,
      ) + $big_int,
      'ceoName' => array(
        'description' => 'The CEO Name.',
        'not null' => TRUE,
      ) + $varchar,
      'manual' => array(
        'description' => 'Identifies if the corporation was manually added.',
        'not null' => TRUE,
      ) + $tiny_int,
      'checked' => array(
        'description' => 'Used to check for updates.',
        'not null' => TRUE,
      ) + $tiny_int,
      'memo' => array(
        'description' => 'Short description of why corporation was added.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'ceoID' => array('ceoID'),
      'manual' => array('manual'),
      'checked' => array('checked'),
    ),
    'primary key' => array('corporationID'),
  );

  $schema['eve_api_alliance_list_tickers'] = array(
    'description' => 'API data pulled from /eve/AllianceList.xml.aspx.',
    'fields' => array(
      'allianceID' => array(
        'description' => 'Unique alliance ID.',
        'not null' => TRUE,
      ) + $big_int,
      'allianceTicker' => array(
        'description' => 'Unique alliance Ticker.',
        'not null' => TRUE,
      ) + $varchar,
      'allianceName' => array(
        'description' => 'Unique alliance Name.',
        'not null' => TRUE,
      ) + $varchar,
    ),
    'primary key' => array('allianceID'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function eve_api_install() {
  db_add_field('users', 'characterID', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'length' => 11,
    'description' => 'Main EVE Character ID',
  ));

  $roles = array(
    'eve_api_blue_role' => 'Alliance Blue',
    'eve_api_alliance_role' => 'Alliance Member',
    'eve_api_unverified_role' => 'Unverified',
    'eve_api_ceo_role' => 'CEO',
    'eve_api_director_role' => 'Director',
  );

  foreach ($roles as $variable => $role) {
    if ($role_data = user_role_load_by_name($role)) {
      variable_set($variable, (int) $role_data->rid);
    }
    else {
      $user_role = new stdClass();
      $user_role->name = $role;
      user_role_save($user_role);
      $role_data = user_role_load_by_name($role);
      variable_set($variable, (int) $role_data->rid);
    }
  }

  variable_set('eve_api_enable', FALSE);
  variable_set('eve_api_first_run', FALSE);

  // We set this because we use 128x128 for EVE avatar's.
  variable_set('user_picture_dimensions', '128x128');

  $queue = DrupalQueue::get('eve_api_cron_api_user_sync');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_fetch');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_mask_sync');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_sync');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_skill_tree');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_error_list');
  $queue->createQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_user_wallet_journal');
  $queue->createQueue();
}

/**
 * Implements hook_uninstall().
 */
function eve_api_uninstall() {
  db_drop_field('users', 'characterID');

  variable_del('eve_api_version');
  variable_del('eve_api_user_picture_dimensions');
  variable_del('eve_api_avatar_https');
  variable_del('eve_api_avatar_http');
  variable_del('eve_api_enable');
  variable_del('eve_api_enable_cron');
  variable_del('eve_api_debug');
  variable_del('eve_api_first_run');
  variable_del('eve_api_nag_user');
  variable_del('eve_api_alliance_role');
  variable_del('eve_api_unverified_role');
  variable_del('eve_api_blue_role');
  variable_del('eve_api_ceo_role');
  variable_del('eve_api_director_role');
  variable_del('eve_api_corp_keyid');
  variable_del('eve_api_corp_vcode');
  variable_del('eve_api_access_mask');
  variable_del('eve_api_require_blue');
  variable_del('eve_api_require_expires');
  variable_del('eve_api_require_type');
  variable_del('eve_api_required_standing');
  variable_del('eve_api_allianceID');
  variable_del('eve_api_corporationID');
  variable_del('eve_api_cron_api_alliance_fetch_next');
  variable_del('eve_api_cron_api_alliance_sync_next');
  variable_del('eve_api_cron_api_mask_next');
  variable_del('eve_api_cron_api_users_next');
  variable_del('eve_api_cron_api_user_wallet_journal_next');
  variable_del('eve_api_cron_import_contracts_next');
  variable_del('eve_api_cron_import_mail_next');
  variable_del('eve_api_cron_error_count_limit');
  variable_del('eve_api_cron_error_time_limit');
  variable_del('eve_api_cron_error_count');
  variable_del('eve_api_cron_error_time');

  $queue = DrupalQueue::get('eve_api_cron_api_user_sync');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_fetch');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_mask_sync');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_sync');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_skill_tree');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_error_list');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_user_wallet_journal');
  $queue->deleteQueue();
}

/**
 * Implements hook_requirements().
 */
function eve_api_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {
    $has_curl = function_exists('curl_init');
    $open_basedir = ini_get('open_basedir');

    $requirements['curl'] = array(
      'title' => $t('cURL'),
      'value' => $has_curl ? $t('Enabled') : $t('Not found'),
    );

    if (!$has_curl) {
      $requirements['curl']['severity'] = REQUIREMENT_WARNING;
      $requirements['curl']['description'] = $t('EVE API prefers cURL, please install the PHP <a href="@curl_url">cURL</a> library.', array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
    }

    $requirements['php_open_basedir'] = array(
      'title' => $t('PHP open_basedir restriction'),
      'value' => $open_basedir ? $t('Enabled') : $t('Disabled'),
    );

    if ($open_basedir) {
      $requirements['php_open_basedir']['severity'] = REQUIREMENT_WARNING;
      $requirements['php_open_basedir']['description'] = $t('EVE API prefers cURL, cURL requires the PHP <a href="@open_basedir-url">open_basedir</a> restriction to be disabled. Check your webserver configuration or contact your web host.', array('@open_basedir-url' => 'http://php.net/manual/en/ini.core.php#ini.open-basedir'));
    }

    // Report Omni EVE API version.
    $requirements['eve_api'] = array(
      'title' => $t('Omni EVE API'),
      'value' => eve_api_version(),
      'severity' => REQUIREMENT_INFO,
    );
  }

  return $requirements;
}

/**
 * Update from RC3 to RC4.
 */
function eve_api_update_7200(&$sandbox) {
  variable_del('eve_api_cron_api_alliance_fetch_time');
  variable_del('eve_api_cron_api_alliance_sync_time');
  variable_del('eve_api_cron_api_mask_time');
  variable_del('eve_api_cron_api_users_time');
  variable_del('eve_api_teamspeak_cron_role_time');
  variable_del('eve_api_teamspeak_cron_user_time');
  variable_del('eve_api_jabber_cron_role_time');
  variable_del('eve_api_jabber_cron_user_time');

  $queue = DrupalQueue::get('eve_api_cron_import_contracts');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_import_mail');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_import_character_sheet');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_import_character_info');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_import_skill_in_training');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_import_wallet_journal');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_import_mail');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_import_contracts');
  $queue->deleteQueue();

  $queue = DrupalQueue::get('eve_api_cron_api_user_wallet_journal');
  $queue->createQueue();

  db_drop_unique_key('eve_api_keys', 'apiID');
  db_drop_unique_key('eve_api_keys', 'keyID_vCode');
  db_add_unique_key('eve_api_keys', 'keyID_vCode', array('keyID', 'vCode'));

  db_drop_unique_key('eve_api_characters', 'characterID');

  db_drop_unique_key('eve_api_character_sheet', 'characterID');

  db_drop_index('eve_api_character_sheet_certificates', 'certificateID');
  db_drop_primary_key('eve_api_character_sheet_certificates');
  db_add_index('eve_api_character_sheet_certificates', 'certificateID', array('certificateID'));
  db_add_primary_key('eve_api_character_sheet_certificates', array('characterID', 'certificateID'));

  db_drop_primary_key('eve_api_character_sheet_titles');
  db_add_primary_key('eve_api_character_sheet_titles', array('characterID', 'titleID'));

  db_drop_primary_key('eve_api_character_sheet_skills');
  db_add_primary_key('eve_api_character_sheet_skills', array('characterID', 'typeID'));

  db_drop_unique_key('eve_api_character_info', 'characterID');

  db_drop_index('eve_api_character_info_corporation_history', 'recordID');
  db_drop_primary_key('eve_api_character_info_corporation_history');
  db_add_index('eve_api_character_info_corporation_history', 'recordID', array('recordID'));
  db_add_primary_key('eve_api_character_info_corporation_history', array('characterID', 'recordID'));

  db_drop_unique_key('eve_api_skill_in_training', 'characterID');

  db_drop_index('eve_api_mail_messages', 'messageID');
  db_drop_unique_key('eve_api_mail_messages', 'messageID');
  db_drop_primary_key('eve_api_mail_messages');
  db_add_index('eve_api_mail_messages', 'messageID', array('messageID'));
  db_add_primary_key('eve_api_mail_messages', array('characterID', 'messageID'));

  db_drop_index('eve_api_contracts', 'contractID');
  db_drop_unique_key('eve_api_contracts', 'contractID');
  db_drop_primary_key('eve_api_contracts');
  db_add_index('eve_api_contracts', 'contractID', array('contractID'));

  db_drop_primary_key('eve_api_wallet_journal');
  db_add_primary_key('eve_api_wallet_journal', array('characterID', 'refID'));

  db_drop_unique_key('eve_api_role_ceo_director', 'characterID');

  db_drop_unique_key('eve_api_whitelist', 'characterID');

  db_drop_unique_key('eve_api_skill_tree_groups', 'groupID');

  db_drop_unique_key('eve_api_skill_tree', 'typeID');

  db_drop_unique_key('eve_api_call_list_groups', 'groupID');

  db_drop_primary_key('eve_api_call_list');
  db_drop_index('eve_api_call_list', 'accessmask');
  db_add_index('eve_api_call_list', 'accessmask', array('accessmask'));
  db_add_primary_key('eve_api_call_list', array('accessmask', 'type'));

  db_drop_unique_key('eve_api_contact_list', 'contactID');

  db_drop_unique_key('eve_api_alliance_list_corporations', 'corporationID');

  db_drop_unique_key('eve_api_alliance_list_tickers', 'allianceID');

  $date = array(
    'type' => 'datetime',
    'mysql_type' => 'DATETIME',
    'pgsql_type' => 'timestamp without time zone',
    'sqlite_type' => 'VARCHAR',
    'sqlsrv_type' => 'smalldatetime',
    'not null' => FALSE,
    'sortable' => TRUE,
    'views' => TRUE,
  );

  db_change_field('eve_api_keys', 'updated', 'updated', array(
    'description' => 'When the API was last updated.',
  ) + $date);
  db_change_field('eve_api_keys', 'created', 'created', array(
    'description' => 'When the API was created.',
  ) + $date);

  db_change_field('eve_api_character_info', 'nextTrainingEnds', 'nextTrainingEnds', array(
    'description' => 'When the training ends.',
  ) + $date);
  db_change_field('eve_api_character_info', 'corporationDate', 'corporationDate', array(
    'description' => 'When character joined the corporation.',
  ) + $date);
  db_change_field('eve_api_character_info', 'allianceDate', 'allianceDate', array(
    'description' => 'When corporation joined the alliance.',
  ) + $date);

  db_change_field('eve_api_character_info_corporation_history', 'startDate', 'startDate', array(
    'description' => 'Date the character joined the corporation.',
  ) + $date);

  db_change_field('eve_api_skill_in_training', 'currentTQTime', 'currentTQTime', array(
    'description' => 'EVE Tranquility time.',
  ) + $date);
  db_change_field('eve_api_skill_in_training', 'trainingEndTime', 'trainingEndTime', array(
    'description' => 'Time until training completes.',
  ) + $date);
  db_change_field('eve_api_skill_in_training', 'trainingStartTime', 'trainingStartTime', array(
    'description' => 'Time when training started.',
  ) + $date);

  db_change_field('eve_api_mail_messages', 'sentDate', 'sentDate', array(
    'description' => 'Date & time message sent.',
  ) + $date);

  db_change_field('eve_api_contracts', 'dateIssued', 'dateIssued', array(
    'description' => '?reation date of the contract.',
  ) + $date);
  db_change_field('eve_api_contracts', 'dateExpired', 'dateExpired', array(
    'description' => 'Expiration date of the contract.',
  ) + $date);
  db_change_field('eve_api_contracts', 'dateAccepted', 'dateAccepted', array(
    'description' => 'Date of confirmation of contract.',
  ) + $date);
  db_change_field('eve_api_contracts', 'dateCompleted', 'dateCompleted', array(
    'description' => 'Date contract was completed.',
  ) + $date);

  db_change_field('eve_api_wallet_journal', 'date', 'date', array(
    'description' => 'Date & time of the transaction.',
  ) + $date);
}

/**
 * Update from RC4 to RC5.
 */
function eve_api_update_7201(&$sandbox) {
  $big_int = array(
    'type' => 'int',
    'size' => 'big',
    'length' => 20,
    'not null' => FALSE,
    'default' => 0,
  );

  $int = array(
    'type' => 'int',
    'length' => 10,
    'not null' => FALSE,
    'default' => 0,
  );

  db_create_table('eve_api_error_list', array(
    'description' => 'API data pulled from /api/ErrorList.xml.aspx.',
    'fields' => array(
      'errorCode' => array(
        'description' => 'Error Code.',
        'not null' => TRUE,
      ) + $big_int,
      'errorText' => array(
        'description' => 'Error Message.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('errorCode'),
  ));

  db_drop_index('eve_api_keys', 'errorID');
  db_change_field('eve_api_keys', 'errorID', 'errorCode', array(
      'description' => 'Error code to identify status of last API pull.',
      'not null' => TRUE,
    ) + $int,
    array('indexes' => array('errorCode' => array('errorCode'))));
  db_add_field('eve_api_keys', 'errorText', array(
      'description' => 'Error message returned with errorCode from last API pull.',
      'type' => 'text',
      'not null' => FALSE,
    ));

  db_drop_index('eve_api_characters', 'errorID');
  db_change_field('eve_api_characters', 'errorID', 'errorCode', array(
      'description' => 'Error code to identify status of last API pull.',
      'not null' => TRUE,
    ) + $int,
    array('indexes' => array('errorCode' => array('errorCode'))));
  db_add_field('eve_api_characters', 'errorText', array(
      'description' => 'Error message returned with errorCode from last API pull.',
      'type' => 'text',
      'not null' => FALSE,
    ));

  db_change_field('eve_api_character_sheet', 'errorID', 'errorCode', array(
      'description' => 'Error code to identify status of last API pull.',
      'not null' => TRUE,
    ) + $int);
  db_add_field('eve_api_character_sheet', 'errorText', array(
      'description' => 'Error message returned with errorCode from last API pull.',
      'type' => 'text',
      'not null' => FALSE,
    ));

  db_change_field('eve_api_character_info', 'errorID', 'errorCode', array(
      'description' => 'Error code to identify status of last API pull.',
      'not null' => TRUE,
    ) + $int);
  db_add_field('eve_api_character_info', 'errorText', array(
      'description' => 'Error message returned with errorCode from last API pull.',
      'type' => 'text',
      'not null' => FALSE,
    ));

  db_change_field('eve_api_skill_in_training', 'errorID', 'errorCode', array(
      'description' => 'Error code to identify status of last API pull.',
      'not null' => TRUE,
    ) + $int);
  db_add_field('eve_api_skill_in_training', 'errorText', array(
      'description' => 'Error message returned with errorCode from last API pull.',
      'type' => 'text',
      'not null' => FALSE,
    ));

  $queue = DrupalQueue::get('eve_api_cron_api_skill_tree');
  $queue->createQueue();
  $queue->createItem(1);
}

/**
 * Update from RC7 to RC8.
 */
function eve_api_update_7202(&$sandbox) {
  $big_int = array(
    'type' => 'int',
    'size' => 'big',
    'length' => 20,
    'not null' => FALSE,
    'default' => 0,
  );

  $varchar = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => '',
  );

  db_add_field('eve_api_mail_messages', 'senderName', array(
      'description' => 'The Senders Name.',
    )+ $varchar);

  db_add_field('eve_api_character_sheet', 'factionID', array(
      'description' => 'Faction id character belongs to.',
    )+ $big_int);
  db_add_field('eve_api_character_sheet', 'factionName', array(
      'description' => 'Faction name character belongs to.',
    ) + $varchar);
}

/**
 * Update from RC8 to RC9.
 */
function eve_api_update_7203(&$sandbox) {
  $big_int = array(
    'type' => 'int',
    'size' => 'big',
    'length' => 20,
    'not null' => FALSE,
    'default' => 0,
  );

  db_add_field('eve_api_contact_list', 'contactTypeID', array(
      'description' => 'The TypeID of the contact.',
      'not null' => TRUE,
    )+ $big_int);

  db_update('eve_api_contact_list')->fields(array('contactTypeID' => 1377))->execute();

  $queue = DrupalQueue::get('eve_api_cron_api_alliance_fetch');
  $queue->createItem(1);

  variable_set('eve_api_cron_error_count_limit', 10);
}

/**
 * Define Phoebe fields.
 *
 * @param array $small_int field data type
 * @param array $big_int   field data type
 * @param array $date      field data type
 *
 * @return array fields
 *
 * @see http://community.eveonline.com/news/patch-notes/patch-notes-for-phoebe/
 *
 */
function _eve_api_phoebe_fields($small_int, $big_int, $date) {

  return array(
    // See http://goo.gl/10C7Kg
    'homeStationID' => array(
      'description' => 'Home Station.',
    ) + $big_int,
    'lastRespecDate' => array(
      'description' => 'Is the date of the last respec including free.',
      'not null' => TRUE,
    ) + $date,
    'lastTimedRespec' => array(
      'description' => 'Is the date of the last timed respec.',
      'not null' => TRUE,
    ) + $date,
    'freeRespecs' => array(
      'description' => 'The number of free respecs.',
    ) + $small_int,
    'freeSkillPoints' => array(
      'description' => 'The number of unallocated skillpoints that a character has.',
    ) + $big_int,
    'cloneJumpDate' => array(
      'description' => 'This is the time the last jump was made.',
      'not null' => TRUE,
    ) + $date,
    'cloneTypeID' => array(
      'description' => 'The identifier of clone type.',
    ) + $big_int,
    // See http://goo.gl/YgDazn
    'remoteStationDate' => array(
      // Maybe the description is incorrect
      'description' => 'The time of free move clone.',
      'not null' => TRUE,
    ) + $date,
    'jumpActivation' => array(
      'description' => 'The time of next available jump.',
      'not null' => TRUE,
    ) + $date,
    'jumpFatigue' => array(
      'description' => 'The time of fatigue expire.',
      'not null' => TRUE,
    ) + $date,
    'jumpLastUpdate' => array(
      'description' => 'Is when the last jump occurred by that character.',
      'not null' => TRUE,
    ) + $date,
  );

}

/**
 * Update RC9 to RC9p1. Update 'eve_api_character_sheet' table.
 */
function eve_api_update_7204(&$sandbox) {

  $small_int = array(
    'type' => 'int',
    'size' => 'small',
    'length' => 3,
    'not null' => FALSE,
    'default' => 0,
  );

  $big_int = array(
    'type' => 'int',
    'size' => 'big',
    'length' => 20,
    'not null' => FALSE,
    'default' => 0,
  );

  $date = array(
    'type' => 'datetime',
    'mysql_type' => 'DATETIME',
    'pgsql_type' => 'timestamp without time zone',
    'sqlite_type' => 'VARCHAR',
    'sqlsrv_type' => 'smalldatetime',
    'not null' => FALSE,
    'sortable' => TRUE,
    'views' => TRUE,
    'default' => '1970-01-01 00:00:00',
  );

  $new_fields = _eve_api_phoebe_fields($small_int, $big_int, $date);

  foreach ($new_fields as $field => $spec) {
    db_add_field('eve_api_character_sheet', $field, $spec);
  }

  $queue = DrupalQueue::get('eve_api_cron_api_user_sync');
  $result = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('uid', 0, '<>')
    ->execute();
  while ($record = $result->fetchAssoc()) {
    $queue->createItem(array(
      'uid' => $record['uid'],
      'runs' => 1,
    ));
  }
  variable_set('eve_api_cron_api_users_next', time() + (59 * 60));
}
