<?php
/**
 * @file
 * Provides replication of commerce products.
 */

/**
 * Implements hook_replicate_entity_ENTITY_TYPE().
 */
function replicate_commerce_replicate_entity_commerce_product($entity) {
  $entity->revision_id = NULL;
  $entity->revision_timestamp = NULL;
  $entity->product_id = NULL;
}

/**
 * Implements hook_replicate_field_FIELD_TYPE().
 */
function replicate_commerce_replicate_field_commerce_product_reference(&$entity, $entity_type, $field_name) {
  foreach ($entity->$field_name as $language => $values) {
    replicate_commerce_clone_items($entity, $entity_type, $field_name, $language);
  }
}

/**
 * Replicate a commerce product reference.
 *
 * @param object $entity
 *   Entity to be modified.
 * @param string $entity_type
 *   Entity type.
 * @param string $field_name
 *   Name of the field.
 * @param string $language
 *   Language of the field.
 */
function replicate_commerce_clone_items($entity, $entity_type, $field_name, $language) {
  if (!isset($entity->{$field_name}[$language]) || count($entity->{$field_name}[$language]) === 0) {
    return;
  }
  $new_field = array();
  foreach ($entity->{$field_name}[$language] as $old_field) {
    $loaded_product = commerce_product_load($old_field['product_id']);
    $new_product = replicate_clone_entity('commerce_product', $loaded_product);
    commerce_product_save($new_product);
    $new_field[] = array(
      'product_id' => $new_product->product_id,
    );
  }
  $entity->{$field_name}[$language] = $new_field;
}
