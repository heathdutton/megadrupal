<?php

/**
 * @file
 * General functionality of the plus gallery module.
 */

// Load all Field module hooks for Plus Gallery.
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'plus_gallery_field') . '/plus_gallery_field.field.inc';
// Load all constants for Plus Gallery.
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'plus_gallery') . '/plus_gallery.const.inc';

/**
 * Implements hook_help().
 */
function plus_gallery_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#plus_gallery_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module allows you to easily incorporate <a href="@plus-gallery" target="_blank" title="+Gallery">+Gallery</a>, created by Jeremiah Martin, into your site.',
                            array('@plus-gallery' => url('http://www.plusgallery.net/'))) . '</p>';
      $output .= '<p>' . t('The module currently supports the following sites') . ':</p>';
      $output .= '<ul>';
      $output .= '<li><strong>' . t('Facebook') . '</strong><br /><em>' . t('Requirements') . ':</em> ' . t('User ID') . ', ' . t('Access Token') . '</li>';
      $output .= '<li><strong>' . t('Google+') . '</strong><br /><em>' . t('Requirements') . ':</em> ' . t('User ID') . '</li>';
      $output .= '<li><strong>' . t('Flickr') . '</strong><br /><em>' . t('Requirements') . ':</em> ' . t('User ID') . ', ' . t('API Key') . '</li>';
      $output .= '<li><strong>' . t('Instagram') . '</strong><br /><em>' . t('Requirements') . ':</em> ' . t('User ID') . ', ' . t('Access Token') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('More info on how to get the required data, visit the <a href="@plus-gallery" target="_blank" title="+Gallery">+Gallery</a> website.',
                            array('@plus-gallery' => url('http://www.plusgallery.net/'))) . '</p>';
      return $output;
  }
}

/**
 * Validate the gallery_mode setting.
 */
function plus_gallery_field_validate_mode($element, &$form_state) {
  if ($element['#value'] == PLUS_GALLERY_MODE_ALBUM_MODE && $form_state['values']['field']['settings']['instagram']) {
    form_error($element, t("Instagram doesn't have albums! Choose another gallery mode or disable Instagram."));
  }
}

/**
 * Validate the general information like userid, album id, etc.
 
 * @param (array) $item
 *   The values of the field elements.
 * @param (array) $errors
 *   The array keeping track of all the errors of the field.
 * @param (array) $field
 *   The field structure.
 * @param (string) $langcode
 *   The language code of the field.
 * @param (int) $delta
 *   The delta of the field.
 * @param (boolean) $flickr
 *   TRUE if the gallery type is Flickr, this means there is an extra
 *   restriction on the data_limit.
 */
function plus_gallery_field_validate_general($item, $errors, $field, $langcode, $delta, $flickr = false) {
  plus_gallery_field_validate_userid($item, $errors, $field['field_name'], $langcode, $delta);
  if ($field['settings']['gallery_mode'] == PLUS_GALLERY_MODE_GALLERY_OVERVIEW) {
    plus_gallery_field_validate_limit($item, 'optional', 'album_limit', t('Album limit'), $errors, $field['field_name'], $langcode, $delta);
    $required = $item['optional']['data_incl_excl'] != PLUS_GALLERY_BEHAVIOUR_ALL;
    plus_gallery_field_validate_string($item, 'optional', 'data_incl_excl', t('Album IDs'), $errors, $field['field_name'], $langcode, $delta, $required, 16384);
  }
  else {
    plus_gallery_field_validate_string($item, NULL, 'album_id', t('Album ID'), $errors, $field['field_name'], $langcode, $delta);
    plus_gallery_field_validate_data_limit($item, $errors, $field['field_name'], $langcode, $delta, $flickr);
  }
}

/**
 * Validate the userid.
 
 * @param (array) $item
 *   The values of the field elements.
 * @param (array) $errors
 *   The array keeping track of all the errors of the field.
 * @param (string) $field_name
 *   The name of the field.
 * @param (string) $langcode
 *   The language code of the field.
 * @param (int) $delta
 *   The delta of the field.
 */
function plus_gallery_field_validate_userid($item, $errors, $field_name, $langcode, $delta) {
  plus_gallery_field_validate_string($item, NULL, 'userid', t('User ID'), $errors, $field_name, $langcode, $delta, TRUE);
}

/**
 * Validate the data-limit.
 
 * @param (array) $item
 *   The values of the field elements.
 * @param (array) $errors
 *   The array keeping track of all the errors of the field.
 * @param (string) $field_name
 *   The name of the field.
 * @param (string) $langcode
 *   The language code of the field.
 * @param (int) $delta
 *   The delta of the field.
 * @param (boolean) $flickr
 *   TRUE if the gallery type is Flickr, this means there is an extra
 *   restriction on the data_limit.
 */
function plus_gallery_field_validate_data_limit($item, $errors, $field_name, $langcode, $delta, $flickr = FALSE) {
  plus_gallery_field_validate_limit($item, 'optional', 'data_limit', t('Image Limit'), $errors, $field_name, $langcode, $delta, $flickr);
}

/**
 * Validate the access token used for Facebook and Instagram.
 
 * @param (array) $item
 *   The values of the field elements.
 * @param (array) $errors
 *   The array keeping track of all the errors of the field.
 * @param (string) $field_name
 *   The name of the field.
 * @param (string) $langcode
 *   The language code of the field.
 * @param (int) $delta
 *   The delta of the field.
 */
function plus_gallery_field_validate_access_token($item, $errors, $field_name, $langcode, $delta) {
  plus_gallery_field_validate_string($item, NULL, 'access_token', t('Access token'), $errors, $field_name, $langcode, $delta, TRUE, PLUS_GALLERY_ACCESS_TOKEN_LENGTH);
}

/**
 * Validate the User ID, Access token, API key, Album ID or Album IDs.
 *
 * @param (array) $item
 *   The values of the field elements.
 * @param (string) $fieldset
 *   The name of the fieldset the field element is located in.
 *   NULL if the field isn't located in a fieldset.
 * @param (string) $element_name
 *   The name of the field element. E.g. data_type, incl_excl, ...
 * @param (string) $name
 *   The human readible name of the element. The name should already have been
 *   translated. E.g. Album limit, ...
 * @param (array) $errors
 *   The array keeping track of all the errors of the field.
 * @param (string) $field_name
 *   The name of the field.
 * @param (string) $langcode
 *   The language code of the field.
 * @param (int) $delta
 *   The delta of the field.
 * @param (boolean) $required
 *   TRUE if the field is required, FALSE otherwise. Default is FALSE.
 * @param (int) $length
 *   The maximum length of the value. Default is 63 characters.
 */
function plus_gallery_field_validate_string($item, $fieldset, $element_name, $name, &$errors, $field_name, $langcode, $delta, $required = FALSE, $length = PLUS_GALLERY_FIELD_LENGTH) {
  $value = $fieldset == NULL ? $item[$element_name] : $item[$fieldset][$element_name];
  if (!empty($value) && drupal_strlen($value) > $length) {
    $errors[$field_name][$langcode][$delta][] = array(
      'error' => 'text_length_' . $element_name,
      'name' => $element_name,
      'fieldset' => $fieldset,
      'message' => t('The maximum length of the %name is %length characters.', array('%name' => $name, '%length' => $length)),
    );
  }
  elseif ($required && empty($value)) {
    $errors[$field_name][$langcode][$delta][] = array(
      'error' => 'required_' . $element_name,
      'name' => $element_name,
      'fieldset' => $fieldset,
      'message' => t('The %name field is required.', array('%name' => $name)),
    );
  }
  elseif ($required && $name == 'data_incl_excl' && strstr($value, ' ') !== FALSE) {
    $errors[$field_name][$langcode][$delta][] = array(
      'error' => 'invalid_char_' . $element_name,
      'name' => $element_name,
      'fieldset' => $fieldset,
      'message' => t("Space( ) isn't a allowed in the %name field.", array('%name' => $name)),
    );
  }
}

/**
 * Validate data_limit or album_limit, data_limit must be <= 30 for Flickr.
 *
 * @param (array) $item
 *   The values of the field elements.
 * @param (string) $fieldset
 *   The name of the fieldset the field element is located in.
 *   NULL if the field isn't located in a fieldset.
 * @param (string) $element_name
 *   The name of the field element. E.g. data_type, incl_excl, ...
 * @param (string) $name
 *   The human readible name of the element. The name should already have been
 *   translated. E.g. Album limit, ...
 * @param (array) $errors
 *   The array keeping track of all the errors of the field.
 * @param (string) $field_name
 *   The name of the field.
 * @param (string) $langcode
 *   The language code of the field.
 * @param (int) $delta
 *   The delta of the field.
 * @param (boolean) $flickr
 *   TRUE if the gallery type is Flickr, this means there is an extra
 *   restriction on the data_limit.
 */
function plus_gallery_field_validate_limit($item, $fieldset, $element_name, $name, &$errors, $field_name, $langcode, $delta, $flickr = FALSE) {
  $value = $fieldset == NULL ? $item[$element_name] : $item[$fieldset][$element_name];
  $max = 999;
  if ($value !== '' && !empty($value) && (!is_numeric($value) || intval($value) != $value || $value <= 0)) {
    $errors[$field_name][$langcode][$delta][] = array(
      'error' => 'invalid_limit_' . $element_name,
      'name' => $element_name,
      'fieldset' => $fieldset,
      'message' => t('%name must be a positive integer.', array('%name' => $name)),
    );
  }
  elseif ($value > $max) {
    $errors[$field_name][$langcode][$delta][] = array(
      'error' => 'limit_size_' . $element_name,
      'name' => $element_name,
      'fieldset' => $fieldset,
      'message' => t('The maximum amount for %name is %max!', array('%name' => $name, '%max' => $max)),
    );
  }
  elseif ($flickr && $name == 'data_limit' && $value > PLUS_GALLERY_FLICKR_MAX_IMAGES) {
    $errors[$field_name][$langcode][$delta][] = array(
      'error' => 'limit_size_' . $element_name,
      'name' => $element_name,
      'message' => t("Flickr doens't allow you to load more than %i images at once!", array('%i' => PLUS_GALLERY_FLICKR_MAX_IMAGES)),
    );
  }
}

/**
 * Get the array containing all the gallery modes.
 */
function plus_gallery_field_modes() {
  return array(
    PLUS_GALLERY_MODE_GALLERY_OVERVIEW => t('Gallery overview'),
    PLUS_GALLERY_MODE_ALBUM_MODE => t('Album mode'),
  );
}

/**
 * Get the array containing all the gallery behaviours.
 */
function plus_gallery_field_behaviours() {
  return array(
    PLUS_GALLERY_BEHAVIOUR_ALL => t('All'),
    PLUS_GALLERY_BEHAVIOUR_INCLUDE => t('Include'),
    PLUS_GALLERY_BEHAVIOUR_EXCLUDE => t('Exclude'),
  );
}

/**
 * Get the array containing the allowed data_type options.
 */
function plus_gallery_field_options($settings) {
  $options = array(PLUS_GALLERY_NONE => t('None'));
  if ($settings['fb']) {
    $options[PLUS_GALLERY_FACEBOOK] = t('Facebook');
  }
  if ($settings['gplus']) {
    $options[PLUS_GALLERY_GOOGLEPLUS] = t('Google+');
  }
  if ($settings['flickr']) {
    $options[PLUS_GALLERY_FLICKR] = t('Flickr');
  }
  if ($settings['instagram']) {
    $options[PLUS_GALLERY_INSTAGRAM] = t('Instagram');
  }
  return $options;
}

/**
 * Returns a jQuery selector that Drupal will use to test for states conditions.
 */
function _plus_gallery_field_jquery_selector($field_name, $langcode, $delta, $item_name, $fieldset = NULL) {
  if ($fieldset == NULL) {
    return ':input[name="' . $field_name . '[' . $langcode . '][' . $delta . '][' . $item_name . ']"], ' .
      ':input[name$="[' . $field_name . '][' . $langcode . '][' . $delta . '][' . $item_name . ']"]';
  }
  else {
    return ':input[name="' . $field_name . '[' . $langcode . '][' . $delta . '][' . $fieldset . '][' . $item_name . ']"], ' .
      ':input[name$="[' . $field_name . '][' . $langcode . '][' . $delta . '][' . $fieldset . '][' . $item_name . ']"]';
  }
}
