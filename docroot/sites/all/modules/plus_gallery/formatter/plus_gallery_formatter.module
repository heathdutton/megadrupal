<?php

/**
 * @file
 * Formatter functions for the image field.
 */
 
// Load all constants for Plus Gallery.
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'plus_gallery') . '/plus_gallery.const.inc';

/**
 * Implements hook_help().
 */
function plus_gallery_formatter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#plus_gallery_formatter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module creates a formatter for the Image Field and the Plus Gallery Field. It represents the images using <a href="@plus-gallery" target="_blank" title="+Gallery">+Gallery</a>, a library created by Jeremiah Martin.',
                            array('@plus-gallery' => url('http://www.plusgallery.net/'))) . '</p>';
      $output .= '<p>' . t('For more info about +Gallery, visit the <a href="@plus-gallery" target="_blank" title="+Gallery">+Gallery</a> website.',
                            array('@plus-gallery' => url('http://www.plusgallery.net/'))) . '</p>';
                            
      $output .= '<h3>' . t('Plus Gallery Field') . '</h3>';
      $output .= '<p>' . t('For more information about the Plus Gallery Field, go to the <a href="@url" title="Plus Gallery Field help page">help</a> of the Plus Gallery Field module.',
                            array('@url' => url('/admin/help/plus_gallery_field'))) . '</p>';
      
      $output .= '<h3>' . t('Image Field') . '</h3>';
      $output .= '<p>' . t('You can display the images as a list of albums or as a list of images.') . '</p>';
      $output .= '<p>' . t('You can group the images into albums by typing the title of the album into the title fields of the images. The title has to be <strong>exactly</strong> the same for all the images of the album.') . '</p>';
      $output .= '<p>' . t('If you don\'t want the images to appear in albums, leave the title fields empty.') . '</p>';
      $output .= '<p>' . t('The content of the alt field will be displayed underneath the fullscreen image.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_image_default_styles().
 */
function plus_gallery_formatter_image_default_styles() {
  $styles = array();
  
  $styles['plus_gallery_thumb'] = array(
    'label' => 'Plus Gallery Thumbnail',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 150, 'height' => 150),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_field_formatter_info().
 */
function plus_gallery_formatter_field_formatter_info() {
  return array(
    'plus_gallery_formatter_field_formatter' => array(
      'label' => t('Plus Gallery'),
      'field types' => array('image', 'plus_gallery_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function plus_gallery_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $data_types = plus_gallery_data_types();
  
  // Plus Gallery Field
  if($field['type'] == 'plus_gallery_field') {
    foreach ($items as $delta => $item) {
			// Add optional values to the item array
			_plus_gallery_formatter_optional_values($item);
			
      // Add image path attribute.
      $attributes = array(
        'id' => 'plusgallery',
        'class' => 'plusgallery-' . $delta,
        'data-type' => $data_types[$item['data_type']],
        'data-image-path' => libraries_get_path('plusgallery', TRUE) . '/images/plusgallery',
        'data-credit' => $field['settings']['credit'] ? 'true' : 'false',
      );
  
      switch ($item['data_type']) {
        case PLUS_GALLERY_FLICKR:
          _plus_gallery_formatter_add_general($attributes, $item, $field);
          _plus_gallery_formatter_add_attribute($attributes, 'data-api-key', $item['api_key']);
          break;
  
        case PLUS_GALLERY_FACEBOOK:
          _plus_gallery_formatter_add_general($attributes, $item, $field);
          _plus_gallery_formatter_add_access_token($attributes, $item);
          break;
  
        case PLUS_GALLERY_GOOGLEPLUS:
          _plus_gallery_formatter_add_general($attributes, $item, $field);
          break;
  
        case PLUS_GALLERY_INSTAGRAM:
          _plus_gallery_formatter_add_userid($attributes, $item);
          _plus_gallery_formatter_add_access_token($attributes, $item);
          _plus_gallery_formatter_add_data_limit($attributes, $item);
          break;
  
        default:
          break;
  
      }
  
      $element[$delta] = array(
        '#markup' => '<div' . drupal_attributes($attributes) . '></div>',
      );
    }
  }
  // Image Field
  else if($field['type'] == 'image' && !empty($items)) {
    $album = array();
    // Add image path attribute.
    $attributes = array(
      'id' => 'plusgallery',
      'class' => 'plusgallery-0',
      'data-type' => 'local',
      'data-image-path' => libraries_get_path('plusgallery', TRUE) . '/images/plusgallery',
      'data-credit' => 'false',
    );
		
    foreach ($items as $delta => $item) {			
      $image = array(
        'th' => _plus_gallery_formatter_thumb_url('plus_gallery_thumb', $item['uri']),
        'src' => file_create_url($item['uri']),
        'caption' => isset($item['alt']) ? $item['alt'] : '',
      );
      if(isset($item['title'])) {
        $album[$item['title']][] = $image;
      }
      else {
        $album[''][] = $image;
      }
    }
    $json = _plus_gallery_formatter_json_image_data($album);
    $element[0] = array(
      '#markup' => '<div data-image-data=\''.$json.'\'' . drupal_attributes($attributes) . '></div>',
    );
  }
  
  // If there is at least once gallery add the +Gallery files.
  if (count($element) > 0) {
    $plusgallery = libraries_load('plusgallery');
    if (!$plusgallery['loaded']) {
      drupal_set_message($plusgallery['error message'], 'error');
    }
    $selectors = '';
    foreach ($element as $delta => $item) {
      $selectors .= '$(".plusgallery-' . $delta . '", context).plusGallery();';
    }
    drupal_add_js('
      (function($) {
        Drupal.behaviors.plusGallery = {
          attach: function(context, settings) {
            ' . $selectors . '
          }
        };
      })(jQuery);', 'inline');
  }
  return $element;
}

/**
 * Creates the url for the thumbnail of the image.
 *
 * @param string $style
 *   The style used for the thumbnail.
 * @param string $uri
 *   The uri of the image.
 *
 * @return string
 *   The url of the thumbnail.
 */
function _plus_gallery_formatter_thumb_url($style, $uri) {
  // Get the url
  $url = image_style_path($style, $uri);
  // Create image if it doesnt exist yet.
  if(!file_exists($url)) {
    $styles = image_styles();
    image_style_create_derivative($styles[$style], $uri, $url);
  }
  return file_create_url($url);
}

/**
 * Converts the array to the corresponding JSON string.
 *
 * @param array $data
 *   All the data of the album or gallery.
 *
 * @return string
 *   JSON string for the gallery.
 */
function _plus_gallery_formatter_json_image_data($data) {
  reset($data);
  
  // Determine if single album or Gallery.
  // Gallery if number of albums is more then 1
  // or when key of album isn't empty.
  // Single album otherwise.
  
  // Gallery
  if(count($data) > 1 || key($data) != '') {
    $json = '{"albums":[';
    $last_album = end($data);
    $j = 1;
    foreach($data as $title => $album) {
      $json .= '{';
      $json .= '"title":"'._convertToJSONCompatible($title).'",';
      $json .= '"images":[';
      $last_index = end($album);
      $i = 1;
      foreach($album as $index => $image) {
        $json .= '{';
        $json .= '"th":"'.$image['th'].'",';
        $json .= '"src":"'.$image['src'].'",';
        $json .= '"caption":"'._convertToJSONCompatible($image['caption']).'"';
        $json .= '}';
        if($i < count($album)) {
          $json .= ',';
        }
        ++$i;
      }
      $json .= ']}';
      if($j < count($data)) {
        $json .= ',';
      }
      ++$j;
    }
    $json .= ']}';
  }
  // Single album
  else {
    $json = '{"images":[';
    $i = 1;
    foreach($data[''] as $index => $image) {
      $json .= '{';
      $json .= '"th":"'.$image['th'].'",';
      $json .= '"src":"'.$image['src'].'",';
      $json .= '"caption":"'._convertToJSONCompatible($image['caption']).'"';
      $json .= '}';
      if($i < count($data[''])) {
        $json .= ',';
      }
      ++$i;
    }
    $json .= ']}';
  }
  
  return $json;
}

/**
 * Convert the given string to a valid JSON compatible string.
 *
 * @param string $string
 *   The string that needs to be converted.
 *
 * @return string
 *   The JSON compatible string.
 */
function _convertToJSONCompatible($string) {
	$string = htmlentities($string, ENT_QUOTES);
	$string = htmlspecialchars($string, ENT_QUOTES);
	return $string;
}

/**
 * Add the given attribute if the value isn't empty.
 *
 * @param array $attributes
 *   Reference to the array containing the attributes that are already added.
 * @param string $key
 *   The key of the attrribute we want to add.
 * @param string $value
 *   The value of the attribute we want to add.
 */
function _plus_gallery_formatter_add_attribute(&$attributes, $key, $value) {
  if (!empty($value) && $value != NULL) {
    $attributes[$key] = $value;
  }
}

/**
 * Add the general attributes for Facebook, Flickr and Google+.
 *
 * @param array $attributes
 *   Reference to the array containing the attributes that are already added.
 * @param (array) $item
 *   The values of the field elements.
 * @param (array) $field
 *   The field structure.
 */
function _plus_gallery_formatter_add_general(&$attributes, $item, $field) {
  _plus_gallery_formatter_add_userid($attributes, $item);
  // Album id is set? This means there is an overview of a specific album.
  if ($field['settings']['gallery_mode'] == PLUS_GALLERY_MODE_ALBUM_MODE) {
    _plus_gallery_formatter_add_attribute($attributes, 'data-album-id', $item['album_id']);
    _plus_gallery_formatter_add_attribute($attributes, 'data-album-title', $item['album_title'] ? 'true' : 'false');
    _plus_gallery_formatter_add_data_limit($attributes, $item);
  }
  // Album id isn't set? This means there is an album overview.
  else {
    _plus_gallery_formatter_add_attribute($attributes, 'data-album-limit', $item['album_limit']);
    if ($item['incl_excl'] == PLUS_GALLERY_BEHAVIOUR_INCLUDE) {
      _plus_gallery_formatter_add_attribute($attributes, 'data-include', $item['data_incl_excl']);
    }
    elseif ($item['incl_excl'] == PLUS_GALLERY_BEHAVIOUR_EXCLUDE) {
      _plus_gallery_formatter_add_attribute($attributes, 'data-exclude', $item['data_incl_excl']);
    }
  }
}

/**
 * Add the optional values to the item array.
 *
 * @param (array) $item
 *   Reference to the array containing the values of the field elements.
 */
function _plus_gallery_formatter_optional_values(&$item) {
	// Album
  _plus_gallery_formatter_optional_value($item, 'album_title');
  _plus_gallery_formatter_optional_value($item, 'data_limit');
	// Gallery
  _plus_gallery_formatter_optional_value($item, 'album_limit');
  _plus_gallery_formatter_optional_value($item, 'data-access-token');
  _plus_gallery_formatter_optional_value($item, 'incl_excl');
  _plus_gallery_formatter_optional_value($item, 'data_incl_excl');
}

/**
 * Add the optional value with the given key to the item array.
 *
 * @param (array) $item
 *   Reference to the array containing the values of the field elements.
 * @param (string) $key
 *   The key of the optional value that needs to be added to the item array.
 */
function _plus_gallery_formatter_optional_value(&$item, $key) {
	if(!isset($item[$key]) && isset($item['optional'][$key])) {
		$item[$key] = $item['optional'][$key];
	}
}

/**
 * Add the userid attribute.
 *
 * @param array $attributes
 *   Reference to the array containing the attributes that are already added.
 * @param (array) $item
 *   The values of the field elements.
 */
function _plus_gallery_formatter_add_userid(&$attributes, $item) {
  _plus_gallery_formatter_add_attribute($attributes, 'data-userid', $item['userid']);
}

/**
 * Add the data-limit attribute.
 *
 * @param array $attributes
 *   Reference to the array containing the attributes that are already added.
 * @param (array) $item
 *   The values of the field elements.
 */
function _plus_gallery_formatter_add_data_limit(&$attributes, $item) {
  _plus_gallery_formatter_add_attribute($attributes, 'data-limit', $item['data_limit']);
}

/**
 * Add the access-token attribute.
 *
 * @param array $attributes
 *   Reference to the array containing the attributes that are already added.
 * @param (array) $item
 *   The values of the field elements.
 */
function _plus_gallery_formatter_add_access_token(&$attributes, $item) {
  _plus_gallery_formatter_add_attribute($attributes, 'data-access-token', $item['access_token']);
}
