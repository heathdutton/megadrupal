<?php
/**
 * @file
 * Integrate Profile2 with XML sitemap
 */


/**
 * Implements hook_entity_info_alter().
 */
function profile2_xmlsitemap_entity_info_alter(array &$entity_info) {
  $entity_info['profile2']['bundle label'] = $entity_info['profile2']['label'];
  $entity_info['profile2']['xmlsitemap'] = array(
    'process callback' => 'profile2_xmlsitemap_process_profile2_links',
  );
}

/**
 * Implements hook_cron().
 */
function profile2_xmlsitemap_cron() {
  profile2_xmlsitemap_xmlsitemap_index_links(xmlsitemap_var('batch_limit'));
}

/**
 * Implements hook_xmlsitemap_index_links().
 */
function profile2_xmlsitemap_xmlsitemap_index_links($limit) {
  if ($types = xmlsitemap_get_link_type_enabled_bundles('profile2')) {
    $pids = db_query_range("SELECT p.pid FROM {profile} p LEFT JOIN {xmlsitemap} x ON x.type = 'profile2' AND p.pid = x.id WHERE x.id IS NULL AND p.type IN (:types) ORDER BY p.pid DESC", 0, $limit, array(':types' => $types))->fetchCol();
    profile2_xmlsitemap_process_profile2_links($pids);
  }
}

/**
 * Process profile2 sitemap links.
 *
 * @param array $pids
 *   An array of profile IDs.
 */
function profile2_xmlsitemap_process_profile2_links(array $pids) {
  $profiles = entity_load('profile2', $pids);
  foreach ($profiles as $profile) {
    $link = profile2_xmlsitemap_create_link($profile);
    xmlsitemap_link_save($link);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function profile2_xmlsitemap_form_profile2_type_form_alter(array &$form, array $form_state) {
  module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
  $bundle = $form_state['profile2_type']->type;
  xmlsitemap_add_link_bundle_settings($form, $form_state, 'profile2', $bundle);
}

/**
 * Implements hook_entity_insert().
 */
function profile2_xmlsitemap_entity_insert($entity, $type) {
  if ($type != 'profile2') {
    return;
  }
  profile2_xmlsitemap_entity_update($entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function profile2_xmlsitemap_entity_update($entity, $type) {
  if ($type != 'profile2') {
    return;
  }
  $link = profile2_xmlsitemap_create_link($entity);
  xmlsitemap_link_save($link);
}

/**
 * Implements hook_entity_delete().
 */
function profile2_xmlsitemap_entity_delete($entity, $type) {
  if ($type != 'profile2') {
    return;
  }
  xmlsitemap_link_delete('profile2', $entity->pid);
}

/**
 * Create a sitemap link from a profile.
 *
 * The link will be saved as $entity->xmlsitemap.
 *
 * @param object $entity
 *   A profile object.
 */
function profile2_xmlsitemap_create_link($entity) {
  if (!isset($entity->xmlsitemap)) {
    $entity->xmlsitemap = array();
    if ($entity->pid && $link = xmlsitemap_link_load('profile2', $entity->pid)) {
      $entity->xmlsitemap = $link;
    }
  }

  $settings = xmlsitemap_link_bundle_load('profile2', $entity->type);
  $uri = entity_uri('profile2', $entity);

  $entity->xmlsitemap += array(
    'id' => $entity->pid,
    'type' => 'profile2',
    'subtype' => $entity->type,
    'status' => $settings['status'],
    'status_default' => $settings['status'],
    'status_override' => 0,
    'priority' => $settings['priority'],
    'priority_default' => $settings['priority'],
    'priority_override' => 0,
  );

  $entity->xmlsitemap['loc'] = $uri['path'];
  $entity->xmlsitemap['access'] = profile2_access('view', $entity, drupal_anonymous_user());
  $entity->xmlsitemap['language'] = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
  $entity->xmlsitemap['lastmod'] = $entity->changed;

  return $entity->xmlsitemap;
}
