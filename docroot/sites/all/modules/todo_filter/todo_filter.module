<?php

/**
 * Implements hook_menu()
 */
function todo_filter_menu() {
  $items = array();
  $items['todo/toggle/%/%'] = array(
    'title'            => t('Todo Toggle'),
    'description'      => t('Ajax callback for todo toggle'),
    'page callback'    => 'todo_filter_toggle',
    'page arguments'   => array(2, 3),
    'access callback'  => '_todo_node_access',
    'access arguments' => array(2, 3),
    'type'             => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_filter_info().
 */
function todo_filter_filter_info() {
  $filters['filter_todo_filter'] = array(
    'title'             => t('Todo Filter'),
    'description'       => t('Allows Todo checkboxes in content.'),
    'process callback'  => '_todo_filter_process',
    // 'settings callback' => '_todo_filter_settings',
    'tips callback'     => '_todo_filter_tips',
  );

  return $filters;
}

/**
 * Simply returns a little bit of information about the filter.
 */
function _filter_example_information() {
  return t('To use these filters, go to !link and configure one of the input formats.',
    array('!link' => l('admin/config/content/formats', 'admin/config/content/formats'))
  );
}

/**
 * Filter process callback.
 */
function _todo_filter_process($text, $filter, $format) {
  // Set up a static variable since this function is called for each field
  static $index = 0;

  if (!empty($text)) {
    preg_match_all('/\[(_|\/)\](.*)/', $text, $out);
    foreach ($out[0] as $i => $item) {
      $checked = $out[1][$i] == '/' ? TRUE : FALSE;
      $replace = '<span class="todo-item'. ($checked ? ' checked' : '') .'"><input id="todo_'. $index .'" type="checkbox" class="todo-check" rel="'. $i .'"'. ($checked ? ' checked="checked"' : '') .' /><label for="todo_'. $index .'">'. $out[2][$i] .'</label></span>';
      $index++;
      $text = str_replace($item, $replace, $text);
    }
  }
  return $text;
}

/**
 * Returns the todo input filter tips
 */
function _todo_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('Todo Filter'). ':<ul>
      <li>'. t('!task - Displays a checkbox that is not checked', array('!task' => '[_]')) .'</li>
      <li>'. t('!completed - Displays a checkbox that is checked', array('!completed' => '[/]')) .'</li>
    </ul>';
  }
  else {
    return t('!task Todo task - !completed Todo completed task', array('!task' => '[_]', '!completed' => '[/]'));
  }
}

/**
 * Implements hook_help()
 */
function todo_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#todo_filter':
      return '<p>'. t('This module provides syntax to display a "todo style" checkbox with toggle feature. '.
                      'The toggled state is saved even from the node view.'). '</p>';
      break;
  }
}

/**
 * Implements hook_block_view()
 */
function todo_filter_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'todo_filter_help':
      $block['title']   = t('Todo filter tips');
      $block['content'] = _todo_filter_help_block();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_info()
 */
function todo_filter_block_info() {
  $blocks = array();
  $blocks['todo_filter_help'] = array(
    'info' => t('Todo filter tips'),
  );

  return $blocks;
}

/**
 * Provides content for the todo filter help block.
 */
function _todo_filter_help_block() {
  return '<pre>'. t('@task Todo task
  Displays a checkbox that is not checked

  @completed Todo completed task
  Displays a checkbox that is checked',
    array('@task' => '[_]', '@completed' => '[/]')) .'</pre>';
}

/**
 * Ajax function that toggles the checked state of the Todo task
 *
 * @todo Figure out how to save without using node_save()
 */
function todo_filter_toggle($token, $code) {
  // Check for valid token
  if (!drupal_valid_token($token, 'todo-filter')) {
    drupal_access_denied();
    exit;
  }

  list($field, $nid, $i) = explode('-', $code);

  // Check for empty data
  if (empty($nid) || !is_numeric($nid) || !is_numeric($i)) {
    drupal_access_denied();
    exit;
  }

  $node = node_load($nid);

  if (preg_match('/(.*?)\[(\d+)\]/', $field, $matches)) {
    $value = &$node->{$matches[1]}[LANGUAGE_NONE][$matches[2]]['value'];

    if (preg_match_all('/\[(_|\/)\](.*)/', $value, $out)) {
      $change_to = ($out[1][$i] == '_') ? '/' : '_';
      $value = str_replace($out[0][$i], "[$change_to] ". trim($out[2][$i]), $value);
      node_save($node);
    }
  }
  exit;
}

/**
 * Access callback for todo_filter_toggle()
 *
 * @see todo_filter_toggle
 * @param  string $token
 * @param  string $code
 * @return boolean
 */
function _todo_node_access($token, $code) {
  // Check for valid token
  if (!drupal_valid_token($token, 'todo-filter')) {
    return FALSE;
  }

  list($field, $nid, $i) = explode('-', $code);

  // Check for empty data
  if (empty($nid) || !is_numeric($nid) || !is_numeric($i)) {
    return FALSE;
  }

  $node = node_load($nid);
  if (node_access('update', $node)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Replaces the todo checkbox with a [field_name]-[field_index]-[node_id] key
 */
function todo_filter_field_attach_view_alter(&$output, $context) {
  $token = drupal_get_token('todo-filter');

  if ($context['entity_type'] == 'node' && count($output)) {
    foreach ($output as $field_name => $field) {
      if (isset($field['#object']) && is_object($field['#object'])) {
        $node = $field['#object'];
        $instances = $node->{$field_name}[$field['#language']];
        foreach ($instances as $delta => $instance) {
          if (isset($instance['format'])) {
            $filters = filter_list_format($instance['format']);
            if (array_key_exists('filter_todo_filter', $filters)) {
              drupal_add_js(drupal_get_path('module', 'todo_filter') .'/todo_filter.js');
              drupal_add_css(drupal_get_path('module', 'todo_filter') .'/todo_filter.css');
              $markup = &$output[$field_name][$delta]['#markup'] ;
              if (node_access('update', $node)) {
                $markup = str_replace('class="todo-check" rel="', 'class="todo-check" rel="'. $token .'/'. $field_name .'['. $delta .']-'. $node->nid .'-', $markup);
              }
              else {
                $markup = str_replace('class="todo-check" rel="', 'disabled="disabled" class="todo-check" rel="', $markup);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Settings callback for Todo filter
 */
function _todo_filter_settings($form, $form_state, $filter, $format, $defaults) {
  /*
  $settings['filter_todo'] = array(
    '#type' => 'textfield',
    '#title' => t('todo_filter'),
  */
  return $settings;
}
