<?php
/**
 * Implements hook_views_api().
 */
function node_noindex_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'node_noindex'),
  );
}

/**
 * Implements hook_permission().
 */
function node_noindex_permission() {
  return array(
    'administer node_noindex' => array(
      'title' => t('administer node_noindex'),
      'description' => t('Administer node noindex'),
    ),
  );
}



/**
 * Implements hook_node_load().
 */
function node_noindex_node_load($nodes, $types) {
  $result = db_query('SELECT nid, noindex FROM {node_noindex} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->noindex = $record->noindex;
  }
}

/**
 * Implements hook_node_view().
 */
function node_noindex_node_view($node, $view_mode = 'full') {
  // We make sure we are on the node page.
  if (_node_noindex_node_has_noindex($node) && $view_mode == 'full' && ($node_mgo = menu_get_object()) && $node->nid == $node_mgo->nid) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'robots',
        'content' => 'noindex',
      ),
    );
    drupal_add_html_head($element, 'node_noindex');
  }
}

/**
 * Implements hook_node_insert().
 */
function node_noindex_node_insert($node) {
  _node_noindex_node_set_noindex($node);
}

/**
 * Implements hook_node_update().
 */
function node_noindex_node_update($node) {
  _node_noindex_node_set_noindex($node);
}

/**
 * Implements hook_node_delete().
 */
function node_noindex_node_delete($node) {
  _node_noindex_node_delete_noindex($node);
}


/**
 * Implements hook_form_alter().
 */
function node_noindex_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    if (user_access('administer node_noindex') && variable_get('node_noindex_' . $form['type']['#value'], 0)) {
      $node = $form['#node'];
      $form['node_noindex'] = array(
        '#type' => 'fieldset',
        '#title' => t('Search engine settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#access' => user_access('administer node_noindex'),
        '#weight' => 20,
        '#group' => 'additional_settings',
      );
      $form['node_noindex']['noindex'] = array(
        '#type' => 'checkbox',
        '#title' => t('Exclude from searchengines'),
        '#description' => t('If enabled a "noindex"-header will be set on this node. This should mean that this node will not be indexed and not occur in search engine results'),
        '#default_value' => isset($node->noindex) ? $node->noindex : variable_get('node_noindex_default_' . $form['type']['#value'], 0),
        '#weight' => 5,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_noindex_form_node_type_form_alter(&$form, $form_state) {
  $form['node_noindex'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search engine settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  $form['node_noindex']['node_noindex'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable noindex option.'),
    '#default_value' => variable_get('node_noindex_' . $form['#node_type']->type, 0),
    '#description' => t('Should this node type display the noindex setting in the node edit form?'),
  );
  $form['node_noindex']['node_noindex_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set noindex as default'),
    '#default_value' => variable_get('node_noindex_default_' . $form['#node_type']->type, 0),
    '#description' => t('Should this node type display have noindex as default?'),
    '#states' => array(
      'visible' => array(
        ':input[name="node_noindex"]' => array('checked' => TRUE),
      ),
    ),
  );
}


/**
 * @return
 *  true if the node has the noindex setting.
 */
function _node_noindex_node_has_noindex($node) {
  if (!isset($node->nid)) {
    return FALSE;
  }
  if (isset($node->noindex)) {
    return $node->noindex;
  }
  return db_query("SELECT noindex FROM {node_noindex} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
}

/**
 * Sets the noindex option to true on the node.
 *
 * @param
 *  object $node
 */
function _node_noindex_node_set_noindex($node) {
  _node_noindex_node_delete_noindex($node);
  if (isset($node->noindex) && $node->noindex) {
    $fields = array('nid' => $node->nid, 'noindex' => $node->noindex);
    db_insert('node_noindex')->fields($fields)->execute();
  }
}

/**
 * Removes the noindex option from the node.
 *
 * @param
 *  object $node
 */
function _node_noindex_node_delete_noindex($node) {
  db_delete('node_noindex')
  ->condition('nid', $node->nid)
  ->execute();
}
