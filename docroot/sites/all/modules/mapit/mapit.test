<?php
/**
 * @file
 * Tests for mapit.module.
 */

/**
 * Provides common helper methods for Mapit module tests.
 * The entity type used in these tests shall be article.
 */
class MapitWebTestCase extends DrupalWebTestCase {
  protected $user;
  protected $anonymoususer;
  protected $authenticateduser;
  protected $vocabulary;
  protected $article;


  /**
   * Function that creates an admin user.
   */
  public function drupalCreateAdminUser(array $permissions = array()) {
    $roles = user_roles();
    $index = array_search('administrator', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'administrator';
    return user_save($user);
  }
  /**
   * Function that creates an authenticated user.
   */
  public function drupalCreateAuthUser(array $permissions = array()) {
    $roles = user_roles();
    $index = array_search('authenticated user', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'authenticated user';
    return user_save($user);
  }
  /**
   * Function that creates a vocabulary.
   */
  public function createVocabulary() {
    $vocabulary = new stdClass();
    $vocabulary->name = 'mapitexample';
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = 'mapitexample';
    taxonomy_vocabulary_save($vocabulary);
    return $vocabulary;
  }
  /**
   * Function that creates a field.
   */
  public function addNewField($label, $type, $widget, $bundle, $entity_type) {
    $field_structure = array(
      'field_name' => 'field_' . $label,
      'type' => $type,
      'settings' => array(
        'max_length' => 255,
      ),
    );
    field_create_field($field_structure);
    $field_instance = array(
      'field_name' => 'field_' . $label,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'widget' => array(
        'type' => $widget,
      ),
    );
    field_create_instance($field_instance);
  }
  /**
   * Function to set mapit configuration.
   */
  public function setMapitConfig() {
    // Navigate to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Set the Vocabularies option.
    $options['mapit_vocabulary'] = '2';
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    // Set the rest of the options .
    $options['mapit_osm_id'] = '5';
    $options['mapit_osm_rel'] = '6';
    $options['mapit_geofield'] = '8';
    $options['mapit_osm_type'] = '7';
    $options['mapit_flag'] = '11';
    $options['mapit_wikipedia'] = '9';
    $options['mapit_longname'] = '10';
    // Save the configuration.
    $this->drupalPost(NULL, $options, t('Save configuration'));
    $this->assertText("The configuration options have been saved.", "Mapit configurations have been successfully set.");
  }
  /**
   * Function that adds the mapit field to an article.
   */
  public function addMapitField() {
    // Create geofield and mapit fields(label-type-widget-bundle-entity_type)
    // and add them to the article.
    $this->addNewField('artgeo', 'geofield', 'geofield_latlon', 'article', 'node');
    // Test creation and addition of the mapit field to the node using the ui.
    $this->drupalGet("admin/structure/types/manage/article/fields");
    $fields = array(
      'fields[_add_new_field][label]' => 'mapitfield',
      'fields[_add_new_field][field_name]' => 'mapitfield',
      'fields[_add_new_field][type]' => 'taxonomy_term_reference',
      // Assign the mapit widget to the corresponding mapit field.
      'fields[_add_new_field][widget_type]' => 'mapit',
    );
    $this->drupalPost("admin/structure/types/manage/article/fields", $fields, t('Save'));
    // Set the vocabulary of the mapitfield to the vocabulary created earlier.
    $fieldvocab['field[settings][allowed_values][0][vocabulary]'] = 'mapitexample';
    $this->drupalPost(NULL, $fieldvocab, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText('Updated field ' . $fields['fields[_add_new_field][label]'] . ' field settings.', 'Field settings have been saved');
    // Set the geofield field.
    $instancevalues['instance[widget][settings][mapit_setting_geofield]'] = 12;
    $this->drupalPost(NULL, $instancevalues, t('Save settings'));
  }
  /**
   * Return the term id for a given term name.
   */
  public function getTidFromTermName($term_name) {
    $vocabulary = 'mapitexample';
    $arr_terms = taxonomy_get_term_by_name($term_name, $vocabulary);
    if (!empty($arr_terms)) {
      $arr_terms = array_values($arr_terms);
      $tid = $arr_terms[0]->tid;
    }
    else {
      return NULL;
    }
    return $tid;
  }


  /**
   * Function that fetches the ids of the parent terms of a taxonomy term.
   */
  public function taxonomyGetParentsAll($tid) {
    $ids = array();
    $parents = taxonomy_get_parents_all($tid);
    foreach ($parents as &$parent) {
      array_push($ids, $parent->tid);
    }
    return $ids;
  }


}


/**
 * Tests whether mapit configurations can be set successfully.
 * The user must be an administrator.
 */
class MapitConfigurationTestCase extends MapitWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapit Configuration',
      'description' => 'Test the whether mapit configurations can be set successfully',
      'group' => 'Mapit');
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('mapit'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
    // Create a vocabulary.
    $this->vocabulary = $this->createVocabulary();
    $this->assertResponse(200, "Vocabulary created");
    // Create fields label-type-widget-bundle-entity_type.
    $this->addNewField('osmid', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('osmref', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('osmtype', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('geometry', 'geofield', 'geofield_wkt', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('wikilink', 'link_field', 'link_field', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('longname', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('flag', 'text_long', 'text_textarea', $this->vocabulary->machine_name, 'taxonomy_term');
    // Ensure the fields actually show up in the fields list of the vocabulary.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->machine_name . "/fields");
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->machine_name . "/add");
  }
  /**
   * Test whether an admin user can set the mapit configurations.
   */
  public function testMapitConfiguration() {
    // Navigate to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Assert that the required fields are displayed on the page.
    $this->assertField('mapit_vocabulary', 'Field mapit_vocabulary found');
    $this->assertField('mapit_osm_id', 'Field mapit_osm_id found');
    $this->assertField('mapit_osm_rel', 'Field mapit_osm_rel found');
    $this->assertField('mapit_geofield', 'Field mapit_geofield found');
    $this->assertField('mapit_osm_type', 'mapit_osm_type found');
    $this->assertField('mapit_flag', 'Field mapit_flag found');
    $this->assertField('mapit_wikipedia', 'Field mapit_wikipedia found');
    $this->assertField('mapit_longname', 'Field mapit_longname found');
    // Set the Vocabularies option.
    $options['mapit_vocabulary'] = '2';
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    // Set the rest of the options .
    $options['mapit_osm_id'] = '5';
    $options['mapit_osm_rel'] = '6';
    $options['mapit_geofield'] = '8';
    $options['mapit_osm_type'] = '7';
    $options['mapit_flag'] = '11';
    $options['mapit_wikipedia'] = '9';
    $options['mapit_longname'] = '10';
    // Save the configuration.
    $this->drupalPost(NULL, $options, t('Save configuration'));
    $this->assertText("The configuration options have been saved.", "Mapit configurations have been successfully set.");
  }
  /**
   * Test that an admin user cannot set duplicate configurations.
   */
  public function testMapitConfigurationDuplicates() {
    // Navigate to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Assert that the required fields are displayed on the page.
    $this->assertField('mapit_vocabulary', 'Field mapit_vocabulary found');
    $this->assertField('mapit_osm_id', 'Field mapit_osm_id found');
    $this->assertField('mapit_osm_rel', 'Field mapit_osm_rel found');
    $this->assertField('mapit_geofield', 'Field mapit_geofield found');
    $this->assertField('mapit_osm_type', 'mapit_osm_type found');
    $this->assertField('mapit_flag', 'Field mapit_flag found');
    $this->assertField('mapit_wikipedia', 'Field mapit_wikipedia found');
    $this->assertField('mapit_longname', 'Field mapit_longname found');
    // Set the Vocabularies option.
    $options['mapit_vocabulary'] = '2';
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    // Set the rest of the options .
    $options['mapit_osm_id'] = '5';
    $options['mapit_osm_rel'] = '5';
    $options['mapit_geofield'] = '8';
    $options['mapit_osm_type'] = '10';
    $options['mapit_flag'] = '11';
    $options['mapit_wikipedia'] = '9';
    $options['mapit_longname'] = '10';
    // Save the configuration.
    $this->drupalPost(NULL, $options, t('Save configuration'));
    // Assert that the user can not save the configurations.
    $this->assertText("OSM id : Field cant be selected more than once.", "Duplicate entry error reported to user.");
    $this->assertText("OSM relation id : Field cant be selected more than once.", "Duplicate entry error reported to user.");
    $this->assertText("OSM Type : Field cant be selected more than once.", "Duplicate entry error reported to user.");
    $this->assertText("Longname of the location : Field cant be selected more than once.", "Duplicate entry error reported to user.");
  }
  /**
   * Test that an admin user cannot set null configurations.
   */
  public function testMapitNullConfigurations() {
    // Navigate to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Assert that the required fields are displayed on the page.
    $this->assertField('mapit_vocabulary', 'Field mapit_vocabulary found');
    $this->assertField('mapit_osm_id', 'Field mapit_osm_id found');
    $this->assertField('mapit_osm_rel', 'Field mapit_osm_rel found');
    $this->assertField('mapit_geofield', 'Field mapit_geofield found');
    $this->assertField('mapit_osm_type', 'mapit_osm_type found');
    $this->assertField('mapit_flag', 'Field mapit_flag found');
    $this->assertField('mapit_wikipedia', 'Field mapit_wikipedia found');
    $this->assertField('mapit_longname', 'Field mapit_longname found');
    // Set the Vocabularies option.
    $options['mapit_vocabulary'] = '2';
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    // Set the rest of the options leaving out osmid.
    $options['mapit_osm_rel'] = '6';
    $options['mapit_geofield'] = '8';
    $options['mapit_osm_type'] = '7';
    $options['mapit_flag'] = '11';
    $options['mapit_wikipedia'] = '9';
    $options['mapit_longname'] = '10';
    // Save the configuration.
    $this->drupalPost(NULL, $options, t('Save configuration'));
    // Assert that the user can not save the configurations.
    $this->assertText("OSM id field is required.", "An error is reported when an administrator tries to save mapit configurations when one of the required fields is not set.");
  }
  /**
   * Test that an admin user can set mapit configurations only once.
   */
  public function testSetMapitConfigurationsOnce() {
    // Set the mapit configurations.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Run cron.
    $this->cronRun();
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert return values for Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe.
    $returnarea = "Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe";
    $this->assertLink($returnarea, 0, 'An area was retrieved by the module');
    // Navigate back to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Assert that each of the configuration fields is disabled.
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-vocabulary" name="mapit_vocabulary" class="form-select required">', 'The Vocabularies field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-osm-id" name="mapit_osm_id" class="form-select required">', 'The OSM Id field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-osm-rel" name="mapit_osm_rel" class="form-select required">', 'The OSM relation Id field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-geofield" name="mapit_geofield" class="form-select required">', 'The Geofield field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-osm-type" name="mapit_osm_type" class="form-select required">', 'The OSM type field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-flag" name="mapit_flag" class="form-select">', 'The Flag field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-wikipedia" name="mapit_wikipedia" class="form-select">', 'The Wikilink field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<select disabled="disabled" id="edit-mapit-longname" name="mapit_longname" class="form-select">', 'The Longname field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<textarea disabled="disabled" id="edit-mapit-discard-ids" name="mapit_discard_ids" cols="60" rows="5" class="form-textarea">', 'The Ids to Discard field is disabled and it\'s value can\'t be changed by the user');
    $this->assertRaw('<textarea disabled="disabled" id="edit-mapit-discard-types" name="mapit_discard_types" cols="60" rows="5" class="form-textarea">', 'The Types to Discard field is disabled and it\'s value can\'t be changed by the user');
  }
  /**
   * Test that an anonymous  user cannot access mapit configurations.
   */
  public function testMapitConfigurationAccessibiltyToAnonymousUser() {
    $this->drupalLogout();
    // Navigate to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An anonymous user can not acces the configuration page");
  }
  /**
   * Test that an authenticated user cannot access mapit configurations.
   */
  public function testMapitConfigurationAccessibiltyToAuthUser() {
    $user = $this->drupalCreateAuthUser();
    $this->drupalLogin($user);
    // Navigate to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Assert that the user cannot access the page.
    $this->assertResponse(403);
    $this->assertText("You are not authorized to access this page.", "An authenticated user can not acces the configuration page");
  }
  /**
   * Test that a user with adequate permissions can access mapit configurations.
   */
  public function testMapitConfigurationAccessibiltyToAuthUserWithPermission() {
    $user = $this->drupalCreateAuthUser(array('administer mapit settings'));
    $this->drupalLogin($user);
    // Navigate to the mapit configuration page.
    $this->drupalGet("admin/config/mapit");
    // Assert that the user cannot access the page.
    $this->assertResponse(200, "An authenticated user with adequate permissions can acces the configuration page");
  }
}

/**
 * Tests behaviour of an entity that has the additional mapit fields.
 * The user must have permissions to create and edit the entity.
 */
class MapitEntityBehaviourTestCase extends MapitWebTestCase {

  /**
   * GetInfo function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapit Entity Behaviour',
      'description' => 'Test the behaviour of an entity that has mapit fields',
      'group' => 'Mapit');
  }

  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('mapit'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
    // Create a vocabulary.
    $this->vocabulary = $this->createVocabulary();
    $this->assertResponse(200, "Vocabulary created");
    // Create fields label-type-widget-bundle-entity_type.
    $this->addNewField('osmid', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('osmref', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('osmtype', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('geometry', 'geofield', 'geofield_wkt', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('wikilink', 'link_field', 'link_field', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('longname', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('flag', 'text_long', 'text_textarea', $this->vocabulary->machine_name, 'taxonomy_term');
    // Ensure the fields actually show up in the fields list of the vocabulary.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->machine_name . "/fields");
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->machine_name . "/add");
  }
  /**
   * Test whether mapit fields can be added to a node.
   */
  public function testAddMapitFieldsToNode() {
    // Set the mapit configuration.
    $this->setMapitConfig();
    // Create geofield field (label-type-widget-bundle-entity_type).
    // And add it to the article node.
    $this->addNewField('artgeo', 'geofield', 'geofield_latlon', 'article', 'node');
    // Test creation and addition of the mapit field to the node using the ui.
    $this->drupalGet("admin/structure/types/manage/article/fields");
    $fields = array(
      'fields[_add_new_field][label]' => 'mapitfield',
      'fields[_add_new_field][field_name]' => 'mapitfield',
      'fields[_add_new_field][type]' => 'taxonomy_term_reference',
      // Assign the mapit widget to the corresponding mapit field.
      'fields[_add_new_field][widget_type]' => 'mapit',
    );
    $this->drupalPost("admin/structure/types/manage/article/fields", $fields, t('Save'));
    // Set the vocabulary of the mapitfield to the vocabulary created earlier.
    $fieldvocab['field[settings][allowed_values][0][vocabulary]'] = 'mapitexample';
    $this->drupalPost(NULL, $fieldvocab, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText('Updated field ' . $fields['fields[_add_new_field][label]'] . ' field settings.', 'Field settings have been saved');
    // Set the geofield field.
    $instancevalues['instance[widget][settings][mapit_setting_geofield]'] = 12;
    $this->drupalPost(NULL, $instancevalues, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText('Saved ' . $fields['fields[_add_new_field][label]'] . ' configuration.', 'Field configurations have been saved');
    // Assert that the mapit field widget is a Mapit Autofill widget.
    $this->drupalGet("admin/structure/types/manage/article/fields");
    $this->assertLink('Mapit Autofill', 0, 'Mapit Autofill is the chosen widget');
    $this->drupalGet("node/add/article");
    $this->assertText("mapitfield", "The mapit field label has been found");
  }
  /**
   * Test whether mapit fields can be added to a comment.
   */
  public function testAddMapitFieldsToComment() {
    // Set the mapit configuration.
    $this->setMapitConfig();
    // And add it to the article comment.
    $this->drupalGet("admin/structure/types/manage/article/comment/fields");
    $fields = array(
      'fields[_add_new_field][label]' => 'comment_geo',
      'fields[_add_new_field][field_name]' => 'comment_geo',
      'fields[_add_new_field][type]' => 'geofield',
      'fields[_add_new_field][widget_type]' => 'geofield_latlon',
    );
    $this->drupalPost("admin/structure/types/manage/article/comment/fields", $fields, t('Save'));
    // Set the storage backend.
    $backend['field[settings][backend]'] = 'default';
    $this->drupalPost(NULL, $backend, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText('Updated field ' . $fields['fields[_add_new_field][label]'] . ' field settings.', 'Field settings have been saved');
    $this->drupalPost(NULL, NULL, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText('Saved ' . $fields['fields[_add_new_field][label]'] . ' configuration.', 'Field configurations have been saved');
    // Test addition of the mapit field to the comment using the ui.
    $this->drupalGet("admin/structure/types/manage/article/comment/fields");
    $fields = array(
      'fields[_add_new_field][label]' => 'comment_mapitfield',
      'fields[_add_new_field][field_name]' => 'comment_mapitfield',
      'fields[_add_new_field][type]' => 'taxonomy_term_reference',
      // Assign the mapit widget to the corresponding mapit field.
      'fields[_add_new_field][widget_type]' => 'mapit',
    );
    $this->drupalPost("admin/structure/types/manage/article/comment/fields", $fields, t('Save'));
    // Set the vocabulary of the mapitfield to the vocabulary created earlier.
    $fieldvocab['field[settings][allowed_values][0][vocabulary]'] = 'mapitexample';
    $this->drupalPost(NULL, $fieldvocab, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText('Updated field ' . $fields['fields[_add_new_field][label]'] . ' field settings.', 'Field settings have been saved');
    // Set the geofield field.
    $instancevalues['instance[widget][settings][mapit_setting_geofield]'] = 12;
    $this->drupalPost(NULL, $instancevalues, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText('Saved ' . $fields['fields[_add_new_field][label]'] . ' configuration.', 'Field configurations have been saved');
    // Assert that the mapit field widget is a Mapit Autofill widget.
    $this->drupalGet("admin/structure/types/manage/article/comment/fields");
    $this->assertLink('Mapit Autofill', 0, 'Mapit Autofill is the chosen widget');
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $this->drupalGet("node/1");
    $this->assertFieldByName("field_comment_geo[und][0][geom][lat]", NULL, "The geofield latitude field has been found");
    $this->assertFieldByName("field_comment_geo[und][0][geom][lon]", NULL, "The geofield longitude field has been found");
    $this->assertFieldByName("field_comment_mapitfield[und][0][tid]", NULL, "The mapit field has been found");
  }
  /**
   * Test whether mapit fields can be added to a user.
   */
  public function testAddMapitFieldsToUser() {
    // Set the mapit configuration.
    $this->setMapitConfig();
    // Create and add geofield to the user profile using the ui.
    $this->drupalGet("admin/config/people/accounts/fields");
    $fields = array(
      'fields[_add_new_field][label]' => 'user_geo',
      'fields[_add_new_field][field_name]' => 'user_geo',
      'fields[_add_new_field][type]' => 'geofield',
      'fields[_add_new_field][widget_type]' => 'geofield_latlon',
    );
    $this->drupalPost("admin/config/people/accounts/fields", $fields, t('Save'));
    // Set the storage backend.
    $backend['field[settings][backend]'] = 'default';
    $this->drupalPost(NULL, $backend, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText('Updated field ' . $fields['fields[_add_new_field][label]'] . ' field settings.', 'Field settings have been saved');
    // Set the user registration field.
    $instancevalues['instance[settings][user_register_form]'] = 1;
    $this->drupalPost(NULL, $instancevalues, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText('Saved ' . $fields['fields[_add_new_field][label]'] . ' configuration.', 'Field configurations have been saved');
    // Create and add the mapit field to the account settings using the ui.
    $fields = array(
      'fields[_add_new_field][label]' => 'mapitfield',
      'fields[_add_new_field][field_name]' => 'mapitfield',
      'fields[_add_new_field][type]' => 'taxonomy_term_reference',
      // Assign the mapit widget to the corresponding mapit field.
      'fields[_add_new_field][widget_type]' => 'mapit',
    );
    $this->drupalPost("admin/config/people/accounts/fields", $fields, t('Save'));
    // Set the vocabulary of the mapitfield to the vocabulary created earlier.
    $fieldvocab['field[settings][allowed_values][0][vocabulary]'] = 'mapitexample';
    $this->drupalPost(NULL, $fieldvocab, t('Save field settings'));
    // Assert that the field settings have been saved.
    $this->assertText('Updated field ' . $fields['fields[_add_new_field][label]'] . ' field settings.', 'Field settings have been saved');
    // Set the geofield and user registration fields.
    $instancevalues['instance[widget][settings][mapit_setting_geofield]'] = 12;
    $instancevalues['instance[settings][user_register_form]'] = 1;
    $this->drupalPost(NULL, $instancevalues, t('Save settings'));
    // Assert that the field configuration has been saved.
    $this->assertText('Saved ' . $fields['fields[_add_new_field][label]'] . ' configuration.', 'Field configurations have been saved');
    // Assert de:that the mapit field widget is a Mapit Autofill widget.
    $this->drupalGet("admin/config/people/accounts/fields");
    $this->assertLink('Mapit Autofill', 0, 'Mapit Autofill is the chosen widget');
    $this->drupalGet("admin/people/create");
    $this->assertFieldByName("field_user_geo[und][0][geom][lat]", NULL, "The geofield latitude field has been found");
    $this->assertFieldByName("field_user_geo[und][0][geom][lon]", NULL, "The geofield longitude field has been found");
    $this->assertFieldByName("field_mapitfield[und][0][tid]", NULL, "The mapit field has been found");
  }
  /**
   * Test whether an article with the null geofield values can be created.
   *
   * And whether it will return any values after cron is run.
   */
  public function testCreateArticleNullGeoField() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Navigate to the content page.
    // And assert that the article is listed as site content.
    $this->drupalGet("admin/content");
    $this->assertLink($title, 0, 'The node link appears on the page');
    // Navigate to the articles page.
    // And assert that geofield and mapit fields show.
    $this->clickLink($title, 0);
    $this->assertNoText('artgeo', 'Label for artgeo not found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Undefined Area', 0, 'Default value for mapitfield found');
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertNoText('artgeo', 'Label for artgeo not found');
    $this->assertText('mapitfield', 'Label for mapitfield found.');
    $this->assertLink('Undefined Area', 0, 'Default value for mapitfield found');
  }
  /**
   * Test whether an article with the ideal values can be created.
   *
   * And whether it will return any values after cron is run.
   */
  public function testCreateArticleIDEAL() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '0.296898',
      'field_artgeo[und][0][geom][lon]' => '32.615028',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Navigate to the content page.
    // And assert that the article is listed as site content.
    $this->drupalGet("admin/content");
    $this->assertLink($title, 0, 'The node link appears on the page');
    // Navigate to the articles page.
    // And assert that geofield and mapit fields show.
    $this->clickLink($title, 0);
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (32.615028 0.296898)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Undefined Area', 0, 'Default value for mapitfield found');
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (32.615028 0.296898)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found. (If no field found, check your network connection and rerun test.)');
    $this->assertLink('Kampala', 0, 'Correct value for mapitfield found.  (If no value found, check your network connection and rerun test.)');
  }
  /**
   * Test if an article with known negative lat & lon values can be created.
   */
  public function testCreateArticleWithKnownNegativeValues() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '-62.115446',
      'field_artgeo[und][0][geom][lon]' => '-155.135193',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Navigate to the content page.
    // And assert that the article is listed as site content.
    $this->drupalGet("admin/content");
    $this->assertLink($title, 0, 'The node link appears on the page');
    // Navigate to the articles page.
    // And assert that geofield and mapit fields show.
    $this->clickLink($title, 0);
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (-155.135193 -62.115446)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Undefined Area', 0, 'Default value for mapitfield found');
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (-155.135193 -62.115446)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Ross Dependency', 0, 'Correct value for mapitfield found');
  }
  /**
   * Test if an article with unknown mapit values can be created.
   */
  public function testCreateArticleWithUnknownValues() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '-1.113669',
      'field_artgeo[und][0][geom][lon]' => '-133.789530',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Navigate to the content page.
    // And assert that the article is listed as site content.
    $this->drupalGet("admin/content");
    $this->assertLink($title, 0, 'The node link appears on the page');
    // Navigate to the articles page.
    // And assert that geofield and mapit fields show.
    $this->clickLink($title, 0);
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (-133.78953 -1.113669)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Undefined Area', 0, 'Default value for mapitfield found');
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (-133.78953 -1.113669)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Unknown Area', 0, 'No value for mapitfield returned since there is no data about the coordinates submitted');
  }
  /**
   * Test if proper taxonomy term is the selected option on the node/edit page.
   */
  public function testArticleMapitfield() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Navigate to the content page.
    // And assert that the article is listed as site content.
    $this->drupalGet("admin/content");
    $this->assertLink($title, 0, 'The node link appears on the page');
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Click Edit link to view the edit page of the node.
    $this->clickLink("Edit", 0);
    // Assert that the option selected for mapitfield is the correct area.
    $this->assertOptionSelected('edit-field-mapitfield-und-0-tid', '5', 'Correct value is selected for Mapit Autofill widget.');
  }
  /**
   * Test if user can change the coordinates of a pre-existing article.
   */
  public function testEditArticleGeoCoordinates() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '-0.790000',
      'field_artgeo[und][0][geom][lon]' => '29.925000',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Navigate to the content page.
    // And assert that the article is listed as site content.
    $this->drupalGet("admin/content");
    $this->assertLink($title, 0, 'The node link appears on the page');
    // Navigate to the articles page.
    // And assert that geofield and mapit fields show.
    $this->clickLink($title, 0);
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (29.925 -0.79)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Undefined Area', 0, 'Default value for mapitfield found');
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Test that a correct term was added to the taxonomy.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    $returnarea = "Uganda";
    $this->assertLink($returnarea, 0, 'A area was retrieved by the module');
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (29.925 -0.79)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Rukungiri', 0, 'Correct value for mapitfield found');
    // Click Edit link to view the edit page of the node.
    $this->clickLink("Edit", 0);
    $newvalues = array(
      'field_artgeo[und][0][geom][lat]' => '50',
      'field_artgeo[und][0][geom][lon]' => '5',
    );
    $this->drupalPost(NULL, $newvalues, t('Save'));
    $this->assertText("Article " . $title . " has been updated.", "");
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field and its values don't appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (5 50)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Undefined Area', 0, 'Default value for mapitfield found');
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Test that a correct term was added to the taxonomy.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    $returnarea = "Bièvre";
    $this->assertLink($returnarea, 0, 'A area was retrieved by the module');
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (5 50)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Bièvre', 0, 'Correct value for mapitfield found');
  }
  /**
   * Test whether an article with invalid values can be created.
   */
  public function testCreateArticleNotIDEAL() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Try creating an article with an invalid latitude.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '162',
      'field_artgeo[und][0][geom][lon]' => '5',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Assert that the user is notified of the mistake.
    $this->assertText("artgeo: Latitude is out of bounds.", "Out of bounds error reported to user");
    // Try creating an article with an invalid longitude.
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50',
      'field_artgeo[und][0][geom][lon]' => '227',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Assert that the user is notified of the mistake.
    $this->assertText("artgeo: Longitude is out of bounds.", "Out of bounds error reported to user");
    // Try creating an article with an invalid latitude and longitude.
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '162',
      'field_artgeo[und][0][geom][lon]' => '227',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Assert that the user is notified of the mistakes.
    $this->assertText("artgeo: Latitude is out of bounds.", "Out of bounds error reported to user");
    $this->assertText("artgeo: Longitude is out of bounds.", "Out of bounds error reported to user");
  }
  /**
   * Test whether an anonymous user can view values of mapit fields.
   */
  public function testFieldVisibilityToAnonymousUser() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '0.296898',
      'field_artgeo[und][0][geom][lon]' => '32.615028',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Run cron.
    $this->drupalGet("admin/config/system/cron");
    $this->drupalPost(NULL, NULL, t('Run cron'));
    $this->assertResponse(200);
    $this->assertText('Cron run successfully.', 'Cron run successfully');
    // Log the current user out.
    $this->drupalLogout();
    // Navigate to the articles page.
    $this->drupalGet("node/1");
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('POINT (32.615028 0.296898)', 'Correct value for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found. (If no field found, check your network connection and rerun test.)');
    $this->assertLink('Kampala', 0, 'Correct value for mapitfield found.  (If no value found, check your network connection and rerun test.)');
  }
}
/**
 * Tests values returned for mapit fields of taxonomy terms.
 * The user must have permissions to create and edit the entity.
 */
class MapitTaxonomyTermValuesTestCase extends MapitWebTestCase {
  /**
   * GetInfo Function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapit Taxonomy Term Returned Values',
      'description' => 'Test whether the mapit module returns the correct values and hierarchies',
      'group' => 'Mapit',
    );
  }
  /**
   * Setup Function.
   */
  public function setUp() {
    // Enable modules.
    parent::setUp(array('mapit'));
    $user = $this->drupalCreateAdminUser();
    $this->drupalLogin($user);
    // Create a vocabulary.
    $this->vocabulary = $this->createVocabulary();
    $this->assertResponse(200, "Vocabulary created");
    // Create fields label-type-widget-bundle-entity_type.
    $this->addNewField('osmid', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('osmref', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('osmtype', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('geometry', 'geofield', 'geofield_wkt', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('wikilink', 'link_field', 'link_field', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('longname', 'text', 'text_textfield', $this->vocabulary->machine_name, 'taxonomy_term');
    $this->addNewField('flag', 'text_long', 'text_textarea', $this->vocabulary->machine_name, 'taxonomy_term');
    // Ensure the fields actually show up in the fields list of the vocabulary.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->machine_name . "/fields");
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->machine_name . "/add");
  }
  /**
   * Test if the values assigned to a term by the mapit module are correct.
   */
  public function testReturnValues() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Run cron.
    $this->cronRun();
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    // Click the area link to navigate to the taxonomy page.
    // Testing return values for Woluwe-Saint-Lambert area.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    $returnarea = "Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe";
    $this->assertLink($returnarea, 0, 'A area was retrieved by the module');
    $this->clickLink($returnarea, 0);
    // Click Edit link to view the edit page of the taxonomy term.
    $this->clickLink("Edit", 0);
    // Check that each of the fields has a correct value.
    // Name field.
    $this->assertFieldByName("name", $returnarea, "name is correct");
    // Osmid field.
    $this->assertFieldByName("field_osmid[und][0][value]", NULL, "osmid field is present");
    $this->assertNoFieldByName("field_osmid[und][0][value]", "", "osmid has a value");
    $this->assertFieldByName("field_osmid[und][0][value]", 596675, "osmid field is correct");
    // Osmref field.
    $this->assertFieldByName("field_osmref[und][0][value]", NULL, "osmref field is present");
    $this->assertNoFieldByName("field_osmref[und][0][value]", "", "osmref has a value");
    $this->assertFieldByName("field_osmref[und][0][value]", 60167, "osmref field is correct");
    // Osmtype field.
    $this->assertFieldByName("field_osmtype[und][0][value]", NULL, "osmtype field is present");
    $this->assertNoFieldByName("field_osmtype[und][0][value]", "", "osmtype has a value");
    $this->assertFieldByName("field_osmtype[und][0][value]", 'O08', "osmtype field is correct");
    // Locationname field.
    $this->assertFieldByName("field_geometry[und][0][geom]", NULL, "geometry field is present");
    $this->assertNoFieldByName("field_geometry[und][0][geom]", " ", "geometry has a value");
    // Wikilink field.
    $this->assertFieldByName("field_wikilink[und][0][url]", NULL, "wikilink field is present");
    $this->assertNoFieldByName("field_wikilink[und][0][url]", "", "wikilink url has a value");
    $this->assertFieldByName("field_wikilink[und][0][url]", "http://fr.wikipedia.org/wiki/fr:Woluwe-Saint-Lambert", "wikilink field is correct");
    // Testing return values for Brussels-Capital area.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    $returnarea = "Brussels-Capital";
    $this->assertLinkByHref("taxonomy/term/4", 0, 'An area was retrieved by the module');
    // Click Edit link to view the edit page of the taxonomy term.
    $this->drupalGet("taxonomy/term/4/edit");
    // Check that each of the fields has a correct value.
    // Name field.
    $this->assertFieldByName("name", $returnarea, "name is correct");
    // Osmid field.
    $this->assertFieldByName("field_osmid[und][0][value]", NULL, "osmid field is present");
    $this->assertNoFieldByName("field_osmid[und][0][value]", "", "osmid has a value");
    $this->assertFieldByName("field_osmid[und][0][value]", 528332, "osmid field is correct");
    // Osmref field.
    $this->assertFieldByName("field_osmref[und][0][value]", NULL, "osmref field is present");
    $this->assertNoFieldByName("field_osmref[und][0][value]", "", "osmref has a value");
    $this->assertFieldByName("field_osmref[und][0][value]", 2404020, "osmref field is correct");
    // Osmtype field.
    $this->assertFieldByName("field_osmtype[und][0][value]", NULL, "osmtype field is present");
    $this->assertNoFieldByName("field_osmtype[und][0][value]", "", "osmtype has a value");
    $this->assertFieldByName("field_osmtype[und][0][value]", 'O07', "osmtype field is correct");
    // Locationname field.
    $this->assertFieldByName("field_geometry[und][0][geom]", NULL, "geometry field is present");
    $this->assertNoFieldByName("field_geometry[und][0][geom]", " ", "geometry has a value");
    // Wikilink field.
    $this->assertFieldByName("field_wikilink[und][0][url]", NULL, "wikilink field is present");
    $this->assertNoFieldByName("field_wikilink[und][0][url]", "", "wikilink url has a value");
    $this->assertFieldByName("field_wikilink[und][0][url]", "http://fr.wikipedia.org/wiki/fr:Arrondissement administratif de Bruxelles-Capitale", "wikilink field is correct");
    // Testing return values for Brussels-Capital area.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    $returnarea = "Brussels-Capital";
    $this->assertLink($returnarea, 0, 'An area was retrieved by the module');
    $this->clickLink($returnarea, 0);
    // Click Edit link to view the edit page of the taxonomy term.
    $this->clickLink("Edit", 0);
    // Check that each of the fields has a correct value.
    // Name field.
    $this->assertFieldByName("name", $returnarea, "name is correct");
    // Osmid field.
    $this->assertFieldByName("field_osmid[und][0][value]", NULL, "osmid field is present");
    $this->assertNoFieldByName("field_osmid[und][0][value]", "", "osmid has a value");
    $this->assertFieldByName("field_osmid[und][0][value]", 509886, "osmid field is correct");
    // Osmref field.
    $this->assertFieldByName("field_osmref[und][0][value]", NULL, "osmref field is present");
    $this->assertNoFieldByName("field_osmref[und][0][value]", "", "osmref has a value");
    $this->assertFieldByName("field_osmref[und][0][value]", 54094, "osmref field is correct");
    // Osmtype field.
    $this->assertFieldByName("field_osmtype[und][0][value]", NULL, "osmtype field is present");
    $this->assertNoFieldByName("field_osmtype[und][0][value]", "", "osmtype has a value");
    $this->assertFieldByName("field_osmtype[und][0][value]", 'O04', "osmtype field is correct");
    // Locationname field.
    $this->assertFieldByName("field_geometry[und][0][geom]", NULL, "geometry field is present");
    $this->assertNoFieldByName("field_geometry[und][0][geom]", " ", "geometry has a value");
    // Wikilink field.
    $this->assertFieldByName("field_wikilink[und][0][url]", NULL, "wikilink field is present");
    $this->assertNoFieldByName("field_wikilink[und][0][url]", "", "wikilink url has a value");
    $this->assertFieldByName("field_wikilink[und][0][url]", "http://wikipedia.org/wiki/Région de Bruxelles-Capitale", "wikilink field is correct");
    // Testing return values for Belgium area.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    $returnarea = "Belgium";
    $this->assertLink($returnarea, 0, 'An area was retrieved by the module');
    $this->clickLink($returnarea, 0);
    // Click Edit link to view the edit page of the taxonomy term.
    $this->clickLink("Edit", 0);
    // Check that each of the fields has a correct value.
    // Name field.
    $this->assertFieldByName("name", $returnarea, "name is correct");
    // Osmid field.
    $this->assertFieldByName("field_osmid[und][0][value]", NULL, "osmid field is present");
    $this->assertNoFieldByName("field_osmid[und][0][value]", "", "osmid has a value");
    $this->assertFieldByName("field_osmid[und][0][value]", 662071, "osmid field is correct");
    // Osmref field.
    $this->assertFieldByName("field_osmref[und][0][value]", NULL, "osmref field is present");
    $this->assertNoFieldByName("field_osmref[und][0][value]", "", "osmref has a value");
    $this->assertFieldByName("field_osmref[und][0][value]", 52411, "osmref field is correct");
    // Osmtype field.
    $this->assertFieldByName("field_osmtype[und][0][value]", NULL, "osmtype field is present");
    $this->assertNoFieldByName("field_osmtype[und][0][value]", "", "osmtype has a value");
    $this->assertFieldByName("field_osmtype[und][0][value]", 'O02', "osmtype field is correct");
    // Locationname field.
    $this->assertFieldByName("field_geometry[und][0][geom]", NULL, "geometry field is present");
    $this->assertNoFieldByName("field_geometry[und][0][geom]", " ", "geometry has a value");
    // Wikilink field.
    $this->assertFieldByName("field_wikilink[und][0][url]", NULL, "wikilink field is present");
    $this->assertNoFieldByName("field_wikilink[und][0][url]", "", "wikilink url has a value");
    $this->assertFieldByName("field_wikilink[und][0][url]", "http://wikipedia.org/wiki/Belgique", "wikilink field is correct");
    // Flag field.
    $this->assertFieldByName("field_flag[und][0][value]", NULL, "flag field is present");
    $this->assertNoFieldByName("field_flag[und][0][value]", " ", "flag has a value. This test might fail since not every area, such as a district, has a flag.");
  }
  /**
   * Test if the values assigned to the longname field are correct.
   */
  public function testReturnValuesLongName() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      //'field_artgeo[und][0][geom][lat]' => '51.165691',
      //'field_artgeo[und][0][geom][lon]' => '10.451526',
      'field_artgeo[und][0][geom][lat]' => '15.120142',
      'field_artgeo[und][0][geom][lon]' => '-23.605172',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Run cron.
    $this->cronRun();
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    $this->assertLink('Cape Verde', 0, 'An area was retrieved by the module');
    // Click the area link to navigate to the taxonomy page.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    $returnarea = "Cape Verde";
    $this->clickLink($returnarea, 0);
    // Click Edit link to view the edit page of the taxonomy term.
    $this->clickLink("Edit", 0);
    // Longname field.
    $this->assertFieldByName("field_longname[und][0][value]", NULL, "longname field is present");
    $this->assertNoFieldByName("field_longname[und][0][value]", "", "longname has a value.");
    $this->assertFieldByName("field_longname[und][0][value]", 'República de Cabo Verde', "longname field is correct");
  }
  /**
   * Test which values are assigned to a term when area is unknown.
   */
  public function testReturnValuesForUnknownArea() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '0',
      'field_artgeo[und][0][geom][lon]' => '0',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    $title = $testarticle['title'];
    // Run cron.
    $this->cronRun();
    // Navigate to the articles page.
    $this->drupalGet("admin/content");
    $this->clickLink($title, 0);
    // Assert that the mapit field as well as its values appear on the page.
    $this->assertText('artgeo', 'Label for artgeo found');
    $this->assertText('mapitfield', 'Label for mapitfield found');
    // Click the area link to navigate to the taxonomy page.
    // Testing return values for Unknown area.
    $returnarea = "Unknown Area";
    $this->assertLink($returnarea, 0, 'The default term for unknown areas was retrieved by the module');
    $this->clickLink($returnarea, 0);
    // Click Edit link to view the edit page of the taxonomy term.
    $this->clickLink("Edit", 0);
    // Check that each of the mapit fields has a correct value.
    // Name field.
    $this->assertFieldByName("name", $returnarea, "name is correct");
    // Description field.
    $this->assertFieldByName("description[value]", "No matching areas found for coordinates supplied.", "Description is correct");
  }
  /**
   * Function to test whether a hierarchy is created by the mapit module.
   */
  public function testReturnHierarchy() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->setMapitConfig();
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Run cron.
    $this->cronRun();
    // Navigate to the Taxonomy Structure page.
    // Check that each parent term in the areas hierarchy is displayed.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    // Assign each expected area name to a variable.
    $term1 = "Belgium";
    $term2 = "Brussels-Capital";
    $term3 = "Brussels-Capital";
    $term4 = "Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe";
    // Assert that there's a link for each term on the page.
    $this->assertLink($term1, 0, "Term 1 present in the hierarchy");
    $this->assertLink($term2, 0, "Term 2 present in the hierarchy");
    $this->assertLink($term3, 0, "Term 3 present in the hierarchy");
    $this->assertLink($term4, 0, "Term 4 present in the hierarchy");
    // Get the term ids of each area.as
    $term4id = $this->getTidFromTermName($term4);
    $term3id = 4;
    $term2id = $this->getTidFromTermName($term2);
    $term1id = $this->getTidFromTermName($term1);
    // Get the id of each of the parents of the term.
    $parent_terms_ids = $this->taxonomyGetParentsAll($term4id);
    // Test that each parent is in its correct position in the hierarchy.
    $hierarchytrue = FALSE;
    $condition1 = $parent_terms_ids[0] == $term4id;
    $condition2 = $parent_terms_ids[1] == $term3id;
    $condition3 = $parent_terms_ids[2] == $term2id;
    $condition4 = $parent_terms_ids[3] == $term1id;
    if ($condition1 && $condition2 && $condition3 && $condition4) {
      $hierarchytrue = TRUE;
    }
    $this->assertTrue($hierarchytrue, "A hierarchy was created for the term");
  }
  /**
   * Test whether the types to discard filter works with Multiple Types.
   */
  public function testReturnHierarchywithMultipleTypesDiscarded() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->drupalGet("admin/config/mapit");
    $options['mapit_vocabulary'] = 2;
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    $options['mapit_osm_id'] = 5;
    $options['mapit_osm_rel'] = 6;
    $options['mapit_geofield'] = 8;
    $options['mapit_osm_type'] = 7;
    $options['mapit_flag'] = 11;
    $options['mapit_wikipedia'] = 9;
    $options['mapit_longname'] = 10;
    // Discard areas with the OLC and O02 OSM type.
    $options['mapit_discard_types'] = 'OLC, O02';
    $this->drupalPost(NULL, $options, t('Save configuration'));
    $this->assertText("The configuration options have been saved.", "Mapit configurations have been successfully set.");
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Run cron.
    $this->cronRun();
    // Navigate to the Taxonomy Structure page.
    // Check that each parent term in the areas hierarchy is displayed.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    // Assign each expected area name to a variable.
    $term1 = "Belgium";
    $term2 = "Brussels-Capital";
    $term3 = "Brussels-Capital";
    $term4 = "Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe";
    // Assert that there's a link for each term on the page.
    $this->assertNoLink($term1, "Term 1(Belgium) not present in the hierarchy");
    $this->assertLink($term2, 0, "Term 2 present in the hierarchy");
    $this->assertLink($term3, 0, "Term 3 present in the hierarchy");
    $this->assertLink($term4, 0, "Term 4 present in the hierarchy");
    // Get the term ids of each area.
    $term4id = $this->getTidFromTermName($term4);
    $term3id = 3;
    $term2id = $this->getTidFromTermName($term2);
    // Get the id of each of the parents of the term.
    $parent_terms_ids = $this->taxonomyGetParentsAll($term4id);
    // Test that each parent is in its correct position in the hierarchy.
    $hierarchytrue = FALSE;
    $condition1 = $parent_terms_ids[0] == $term4id;
    $condition2 = $parent_terms_ids[1] == $term3id;
    $condition3 = $parent_terms_ids[2] == $term2id;
    if ($condition1 && $condition2 && $condition3) {
      $hierarchytrue = TRUE;
    }
    $this->assertTrue($hierarchytrue, "A hierarchy was created for the term and it did not to contain the OSM types that were discarded.");
  }
  /**
   * Function to test whether the ids to discard filter works.
   */
  public function testReturnHierarchywithIdsDiscarded() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->drupalGet("admin/config/mapit");
    $options['mapit_vocabulary'] = 2;
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    $options['mapit_osm_id'] = 5;
    $options['mapit_osm_rel'] = 6;
    $options['mapit_geofield'] = 8;
    $options['mapit_osm_type'] = 7;
    $options['mapit_flag'] = 11;
    $options['mapit_wikipedia'] = 9;
    $options['mapit_longname'] = 10;
    // Discard the area with the given id.
    $options['mapit_discard_ids'] = '662071';
    $this->drupalPost(NULL, $options, t('Save configuration'));
    $this->assertText("The configuration options have been saved.", "Mapit configurations have been successfully set.");
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Run cron.
    $this->cronRun();
    // Navigate to the Taxonomy Structure page.
    // Check that each parent term in the areas hierarchy is displayed.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    // Assign each expected area name to a variable.
    $term1 = "Belgium";
    $term2 = "Brussels-Capital";
    $term3 = "Brussels-Capital";
    $term4 = "Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe";
    // Assert that there's a link for each term on the page.
    $this->assertNoLink($term1, "Term 1 not present in the hierarchy");
    $this->assertLink($term2, 0, "Term 2 present in the hierarchy");
    $this->assertLink($term3, 0, "Term 3 present in the hierarchy");
    $this->assertLink($term4, 0, "Term 4 present in the hierarchy");
    // Get the term ids of each area.
    $term4id = $this->getTidFromTermName($term4);
    $term3id = 3;
    $term2id = $this->getTidFromTermName($term2);
    // Get the id of each of the parents of the term.
    $parent_terms_ids = $this->taxonomyGetParentsAll($term4id);
    // Test that each parent is in its correct position in the hierarchy.
    $hierarchytrue = FALSE;
    $condition1 = $parent_terms_ids[0] == $term4id;
    $condition2 = $parent_terms_ids[1] == $term3id;
    $condition3 = $parent_terms_ids[2] == $term2id;
    if ($condition1 && $condition2 && $condition3) {
      $hierarchytrue = TRUE;
    }
    $this->assertTrue($hierarchytrue, "A hierarchy was created for the term. And the term with the excluded id was excluded.");
  }
  /**
   * Function to test whether the ids to discard filter works with multiple Ids.
   */
  public function testReturnHierarchywithMultipeIdsDiscarded() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->drupalGet("admin/config/mapit");
    $options['mapit_vocabulary'] = 2;
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    $options['mapit_osm_id'] = 5;
    $options['mapit_osm_rel'] = 6;
    $options['mapit_geofield'] = 8;
    $options['mapit_osm_type'] = 7;
    $options['mapit_flag'] = 11;
    $options['mapit_wikipedia'] = 9;
    $options['mapit_longname'] = 10;
    // Discard the areas with the given ids.
    $options['mapit_discard_ids'] = '662071 , 596675';
    $this->drupalPost(NULL, $options, t('Save configuration'));
    $this->assertText("The configuration options have been saved.", "Mapit configurations have been successfully set.");
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Run cron.
    $this->cronRun();
    // Navigate to the Taxonomy Structure page.
    // Check that each parent term in the areas hierarchy is displayed.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    // Assign each expected area name to a variable.
    $term1 = "Belgium";
    $term2 = "Brussels-Capital";
    $term3 = "Brussels-Capital";
    $term4 = "Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe";
    // Assert that there's a link for each term on the page.
    $this->assertNoLink($term1, "Term 1(Belgium) not present in the hierarchy");
    $this->assertLink($term2, 0, "Term 2 present in the hierarchy");
    $this->assertLink($term3, 0, "Term 3 present in the hierarchy");
    $this->assertNoLink($term4, "Term 4(Woluwe) not present in the hierarchy");
    // Get the term ids of each area.
    $term3id = 3;
    $term2id = $this->getTidFromTermName($term2);
    // Get the id of each of the parents of the term.
    $parent_terms_ids = $this->taxonomyGetParentsAll($term3id);
    // Test that each parent is in its correct position in the hierarchy.
    $hierarchytrue = FALSE;
    $condition1 = $parent_terms_ids[0] == $term3id;
    $condition2 = $parent_terms_ids[1] == $term2id;
    if ($condition1 && $condition2) {
      $hierarchytrue = TRUE;
    }
    $this->assertTrue($hierarchytrue, "A hierarchy was created for the term. And the terms with the excluded ids were excluded.");
  }
  /**
   * Test if the ids and types to discard filters work with invalid delimiters.
   */
  public function testReturnHierarchywithIdsAndTypesDiscardedInvalidDelimiter() {
    // Set the mapit configuration and add a mapit field to an article.
    $this->drupalGet("admin/config/mapit");
    $options['mapit_vocabulary'] = 2;
    $this->drupalPostAJAX(NULL, $options, 'mapit_vocabulary');
    $options['mapit_osm_id'] = 5;
    $options['mapit_osm_rel'] = 6;
    $options['mapit_geofield'] = 8;
    $options['mapit_osm_type'] = 7;
    $options['mapit_flag'] = 11;
    $options['mapit_wikipedia'] = 9;
    $options['mapit_longname'] = 10;
    // Discard areas with the OLC OSM type.
    $options['mapit_discard_types'] = 'OLC : O02';
    // Discard the areas with the given id.
    $options['mapit_discard_ids'] = '662071 ; 596675';
    $this->drupalPost(NULL, $options, t('Save configuration'));
    $this->assertText("The configuration options have been saved.", "Mapit configurations have been successfully set.");
    $this->addMapitField();
    // Create an article.
    $this->drupalGet("node/add/article");
    $testarticle = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(256),
      'field_artgeo[und][0][geom][lat]' => '50.842365',
      'field_artgeo[und][0][geom][lon]' => '4.423892',
    );
    $this->drupalPost(NULL, $testarticle, t('Save'));
    // Run cron.
    $this->cronRun();
    // Navigate to the Taxonomy Structure page.
    // Check that each parent term in the areas hierarchy is displayed.
    $this->drupalGet("admin/structure/taxonomy/" . $this->vocabulary->name);
    // Assign each expected area name to a variable.
    $term1 = "Belgium";
    $term2 = "Brussels-Capital";
    $term3 = "Brussels-Capital";
    $term4 = "Woluwe-Saint-Lambert - Sint-Lambrechts-Woluwe";
    $term5 = "Flemish Community";
    // Assert that there's a link for each term on the page.
    $condition1 = $this->assertLink($term1, 0, "Term 1 present in the hierarchy");
    $this->assertLink($term2, 0, "Term 2 present in the hierarchy");
    $this->assertLink($term3, 0, "Term 3 present in the hierarchy");
    $condition2 = $this->assertLink($term4, 0, "Term 4 present in the hierarchy");
    $condition3 = $this->assertLink($term5, 0, "Term 5 present in the hierarchy");
    // Test whether each link appears on the page.
    $hierarchytrue = FALSE;
    if ($condition1 && $condition2 && $condition3) {
      $hierarchytrue = TRUE;
    }
    $this->assertTrue($hierarchytrue, "A hierarchy was created for the term. No term with the discarded types or ids was excluded because the delimiters in both fields were invalid.");
  }
}
