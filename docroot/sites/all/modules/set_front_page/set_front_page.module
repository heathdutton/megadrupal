<?php
/**
 * @file
 * Primary hook implementations for Set Front Page.
 */

/**
 * Implements hook_permission().
 */
function set_front_page_permission() {
  return array(
    'set front page' => array(
      'title' => t('Set front page'),
      'description' => t('Assign the current page as the front page.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function set_front_page_menu() {
  $defaults = array(
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'set_front_page.pages.inc',
  );

  // Add a menu item for each of the supported entities.
  foreach (set_front_page_supported_entities() as $entity_type => $entity_info) {
    if (module_exists($entity_info['module'])) {
      $position = count(explode('/', $entity_info['path'])) - 1;
      $items[$entity_info['path'] . '/set-front-page'] = array(
        'title' => 'Front page',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('set_front_page_front_form', $position, $entity_type),
        'access callback' => 'set_front_page_front_access',
        'access arguments' => array($position, $entity_type),
      ) + $defaults;
    }
  }

  // Admin settings page.
  $items['admin/config/system/set-front-page'] = array(
    'title' => 'Set Front Page',
    'description' => 'Control which content types and vocabularies can be set as the homepage.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('set_front_page_config_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'set_front_page.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function set_front_page_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array();
    foreach (set_front_page_supported_entities() as $entity_type => $entity_info) {
      $paths[str_replace('%' . $entity_type, '*', $entity_info['path']) . '/set-front-page'] = TRUE;
    }
    return $paths;
  }
}

/**
 * Menu access callback.
 */
function set_front_page_front_access($entity, $entity_type) {

  if (empty($entity) || empty($entity_type)) {
    return FALSE;
  }

  if (!user_access('set front page')) {
    return FALSE;
  }

  if (!array_key_exists($entity_type, set_front_page_supported_entities())) {
    return FALSE;
  }

  // Load the entity's specs.
  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);

  // This entity can be enabled & disabled as needed.
  $variable_name = 'set_front_page_' . $entity_type . '__' . $bundle;
  return variable_get($variable_name, FALSE);
}

/**
 * List of supported entities.
 *
 * @return array
 */
function set_front_page_supported_entities() {
  $entity_types = &drupal_static(__FUNCTION__, array());

  if (empty($entity_types)) {
    $entity_types = array(
      'node' => array(
        'label' => 'Node',
        'bundle label' => 'Content type',
        'bundle label plural' => 'Content types',
        'module' => 'node',
        'path' => 'node/%node',
      ),
      'taxonomy_term' => array(
        'label' => 'Taxonomy',
        'bundle label' => 'Vocabulary',
        'bundle label plural' => 'Vocabularies',
        'module' => 'taxonomy',
        'path' => 'taxonomy/term/%taxonomy_term',
      ),
    );

    // Add the bundle details for the supported entities.
    foreach (entity_get_info() as $entity_type => $entity_info) {
      if (array_key_exists($entity_type, $entity_types)) {
        foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
          $entity_types[$entity_type]['bundles'][$bundle] = $bundle_info['label'];
        }
      }
    }
  }

  return $entity_types;
}
