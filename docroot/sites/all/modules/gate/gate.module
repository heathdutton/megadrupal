<?php
/**
 * @file
 * Provides functionality to login- and mail-processes.
 */

/**
 * Implements hook_cron().
 */
function gate_cron() {
  $gate_globaltimelimit = variable_get('gate_globaltimelimit', '720') * 60;
  $time = time() - $gate_globaltimelimit;
  db_query("DELETE
    FROM {gate_login}
    WHERE changed < :time",
    array(':time' => $time));
}

/**
 * Implements hook_user_login().
 */
function gate_user_login(&$edit, $account) {
  $direct_login = variable_get('gate_direct_login', 1);

  if ($direct_login == 0) {
    $login_blocker = TRUE;

    $uid = $account->uid;
    $gate_login = _gate_login_search($uid);

    if (module_exists('gate_rules')) {
      rules_invoke_event('gate_rules_user_login', $account, $gate_login);
      $gate_login = _gate_login_search($uid);
    }

    if (isset($gate_login->access) && ($gate_login->access == 1)) {
      $gate_token = '';
      if (isset($_GET['gate-token'])) {
        $gate_token = $_GET['gate-token'];
      }
      if (isset($_SESSION['gate_rules_login_token'])) {
        $gate_token = $_SESSION['gate_rules_login_token'];
        unset($_SESSION['gate_rules_login_token']);
      }
      if (isset($gate_login->token) && ($gate_login->token == $gate_token)) {
        $login_blocker = FALSE;
        _gate_login_db($gate_login, 'delete');
      }
    }

    if ($login_blocker == TRUE) {
      global $user;
      module_invoke_all('user_logout', $user);
      session_destroy();
      $user = drupal_anonymous_user();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function gate_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_pass') {
    $form['#validate'][] = '_gate_user_pass_validate';
  }
  if ($form_id == 'user_login') {
    $form['#validate'][] = '_gate_user_login_validate';
  }
  if ($form_id == 'user_login_block') {
    $form['#validate'][] = '_gate_user_login_validate';
  }
}

/**
 * Validation callback for user_pass.
 */
function _gate_user_pass_validate(&$form, &$form_state) {
  // User object is loaded by validation of user.module (core).
  $account = $form_state['values']['account'];

  if (isset($account->uid)) {
    $pass = TRUE;

    $uid = $account->uid;
    $onetimelink_user1 = variable_get('gate_onetimelink_user1', 1);
    $onetimelink_adminrole = variable_get('gate_onetimelink_adminrole', 1);

    if (($onetimelink_user1 == 0) && ($uid == 1)) {
      $pass = FALSE;
    }

    if (($pass == TRUE) && ($onetimelink_adminrole == 0) && ($uid != 1)) {
      $rid = variable_get('user_admin_role', 0);
      $userroles = array_keys($account->roles);
      if (($rid != 0) && (in_array($rid, $userroles))) {
        $pass = FALSE;
      }
    }

    if (($pass == TRUE) && (module_exists('gate_rules'))) {
      $_SESSION['gate_rules_onetimelink'] = 1;
      rules_invoke_event('gate_rules_onetimelink', $account);
      if ($_SESSION['gate_rules_onetimelink'] == 0) {
        $pass = FALSE;
      }
    }

    if ($pass == FALSE) {
      form_set_error('name', t('Sorry, account is not allowed for requesting onetime login link with this form.'));
    }
  }
}

/**
 * Validation callback for user_login and user_login_block.
 */
function _gate_user_login_validate($form, &$form_state) {
  if (isset($form_state['uid'])) {
    $pass = TRUE;

    $uid = $form_state['uid'];
    $account = user_load($uid);
    $pwlogin_user1 = variable_get('gate_pwlogin_user1', 1);
    $pwlogin_adminrole = variable_get('gate_pwlogin_adminrole', 1);

    if (($pwlogin_user1 == 0) && ($uid == 1)) {
      $pass = FALSE;
    }

    if (($pass == TRUE) && ($pwlogin_adminrole == 0) && ($uid != 1)) {
      $rid = variable_get('user_admin_role', 0);
      $userroles = array_keys($account->roles);
      if (($rid != 0) && (in_array($rid, $userroles))) {
        $pass = FALSE;
      }
    }

    if (($pass == TRUE) && (module_exists('gate_rules'))) {
      $_SESSION['gate_rules_pwlogin'] = 1;

      rules_invoke_event('gate_rules_pwlogin', $account);
      if ($_SESSION['gate_rules_pwlogin'] == 0) {
        $pass = FALSE;
      }
    }

    if ($pass == FALSE) {
      form_set_error('pass', t('Sorry, account is not allowed for password login with this form.'));
    }
  }
}

/**
 * Internal search function to retrieve login data.
 */
function _gate_login_search($uid = 0) {
  $data = new stdClass();
  $data->uid = (int) $uid;
  $gate_login = _gate_login_db($data, 'search');
  if (!isset($gate_login->uid)) {
    $gate_login->uid = $uid;
  }
  return $gate_login;
}

/**
 * Internal function to init or reset login data.
 */
function _gate_login_init($uid = 0) {
  if (is_int($uid) && ($uid > 0)) {
    $gate_login = _gate_login_search($uid);

    $op = 'create';
    if (isset($gate_login->created)) {
      $op = 'update';
    }

    $gate_login->access = 0;
    $gate_login->level = 0;
    $gate_login->token = user_password(24);
    $gate_login->pass = '';

    _gate_login_db($gate_login, $op);
  }
  $gate_login = _gate_login_search($uid);
  return $gate_login;
}

/**
 * Internal DB API for operation on gate_login table.
 */
function _gate_login_db($data, $op = '') {
  $return = new stdClass();
  $uid = $data->uid;
  $table = 'gate_login';
  if (($op == 'create') || ($op == 'update')) {
    $time = time();
    $data->changed = $time;
  }
  if (($op == 'delete') || ($op == 'search')) {

  }
  switch ($op) {
    case 'create':
      $data->created = $time;
      $return->op = drupal_write_record($table, $data);
      break;

    case 'update':
      $return->op = drupal_write_record($table, $data, array('uid'));
      break;

    case 'delete':
      $return->op = db_query("DELETE
        FROM {" . $table . "}
        WHERE uid = :uid",
        array(':uid' => $uid));
      break;

    case 'search':
      $result = array();
      $query = db_select($table, 'g');
      $query->fields('g');
      $query->condition('g.uid', $uid, '=');
      $result = $query->execute();
      foreach ($result as $record) {
        $return = $record;
      }

      break;

  }
  return $return;
}

/**
 * Implements hook_mail_alter().
 */
function gate_mail_alter(&$message) {
  $direct_mail = variable_get('gate_direct_mail', 1);
  if ($direct_mail == 0) {
    $mail_blocker = TRUE;

    if (isset($message['params']['gate'])) {
      $mail_gate = $message['params']['gate'];
      if (isset($mail_gate['send']) && ($mail_gate['send'] == 1)) {
        $mail_blocker = FALSE;
      }
    }
    else {
      if (module_exists('gate_rules')) {
        $addresses = _gate_mail_parse_recipients($message['to']);
        rules_invoke_event('gate_rules_mail_init', $message, $addresses);
      }
    }

    if ($mail_blocker == TRUE) {
      $message['send'] = FALSE;
    }

  }
}

/**
 * Helper function to parse email adresses from "to"-string.
 */
function _gate_mail_parse_recipients($to) {
  $addresses = array();
  foreach (is_array($to) ? $to : explode(',', $to) as $recipient) {
    $addresses[] = trim(preg_match('/<([^>]+)>/', $recipient, $matches) ? $matches[1] : $recipient);
  }
  return $addresses;
}
