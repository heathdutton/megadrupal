<?php
/**
 * @file
 * Gate rules integration.
 */

/**
 * Rules action 'gate_rules_mail_init_send' execution callback .
 */
function _gate_rules_mail_init_send($mail_data, $to, $from) {
  $message = $mail_data;

  if (isset($from)) {
    $message['from'] = $from;
  }

  if (isset($to)) {
    $message['to'] = $to;
  }

  $message['params']['gate']['send'] = 1;

  drupal_mail(
    $message['module'],
    $message['key'],
    $message['to'],
    $message['language'],
    $message['params'],
    $message['from'],
    $message['send']
  );
}

/**
 * Rules action 'gate_rules_mail_lists' execution callback.
 */
function _gate_rules_mail_lists($mail_data, $mail_addresses) {
  $users = array();
  $mail_addresses_other = array();

  $count = count($mail_addresses);

  if ($count == 1) {
    $account = _gate_rules_mail_lists_user_module($mail_data);
    if ($account) {
      $users[] = $account;
      return (array(
        'mail_users' => $users,
        'mail_addresses_other' => $mail_addresses_other,
       )
      );
    }
  }
  foreach ($mail_addresses as $mail_address) {
    $account = user_load_by_mail($mail_address);
    if ($account) {
      $users[] = $account;
    }
    else {
      $mail_addresses_other[] = $mail_address;
    }
  }

  return (array(
    'mail_users' => $users,
    'mail_addresses_other' => $mail_addresses_other,
   )
  );
}

/**
 * Helper function to extract existing user object from mail_data.
 */
function _gate_rules_mail_lists_user_module($mail_data) {
  $account = FALSE;

  switch ($mail_data['id']) {
    case 'user_register_admin_created':
    case 'user_register_no_approval_required':
    case 'user_register_pending_approval':
    case 'user_password_reset':
    case 'user_status_activated':
    case 'user_status_blocked':
    case 'user_status_deleted':
      $account = $mail_data['params']['account'];
      break;

    case 'contact_user_mail':
      $account = $mail_data['params']['recipient'];
      break;

    case 'contact_user_copy':
      $account = $mail_data['params']['user'];
      break;

  }
  return $account;
}

/**
 * Rules action 'gate_rules_login_data_set' execution callback.
 */
function _gate_rules_login_data_set($data) {
  $gate_login = _gate_login_search($data['uid']);
  if (!isset($gate_login->created)) {
    $gate_login = _gate_login_init((int) $data['uid']);
  }

  if (isset($data['level'])) {
    $gate_login->level = $data['level'];
  }

  if (isset($data['access'])) {
    $gate_login->access = $data['access'];
  }

  if (isset($data['token'])) {
    $token = $data['token'];
    if ($token == 'RESET') {
      $token = user_password(24);
    }
    $gate_login->token = $token;
  }
  if (isset($data['pass'])) {
    $gate_login->pass = $data['pass'];
  }

  _gate_login_db($gate_login, 'update');
}


/**
 * Rules action 'gate_rules_login_token_session' execution callback.
 */
function _gate_rules_login_token_session($uid) {
  $gate_login = _gate_login_search($uid);
  $_SESSION['gate_rules_login_token'] = $gate_login->token;
}

/**
 * Rules action 'gate_rules_onetimelink_block' execution callback.
 */
function _gate_rules_onetimelink_block() {
  $_SESSION['gate_rules_onetimelink'] = 0;
}

/**
 * Rules action 'gate_rules_pwlogin_block' execution callback.
 */
function _gate_rules_pwlogin_block() {
  $_SESSION['gate_rules_pwlogin'] = 0;
}

/**
 * Rules action 'gate_rules_user_login_direcly' execution callback.
 */
function _gate_rules_user_login_directly($account) {
  global $user;

  $report = 0;
  if ($user->uid != 0) {
    drupal_set_message(t('You are already logged in.'), 'warning');
    $report = 1;
  }
  elseif ($account->status == 0) {
    drupal_set_message(t('User account not active.'), 'error');
  }
  else {
    $login_blocker = FALSE;
    $direct_login = variable_get('gate_direct_login', 1);

    if ($direct_login == 0) {
      $gate_login = _gate_login_search($account->uid);
      if (isset($gate_login->access) && $gate_login->access == 1) {
        $_SESSION['gate_rules_login_token'] = $gate_login->token;
      } else {
        $login_blocker = TRUE;
      }
    }

    if (($account != FALSE) && ($login_blocker == FALSE)) {
      $report = 2;
      $loginargs['uid'] = $account->uid;
      user_login_submit(array(), $loginargs);
    }
  }
  $return = array(
    'user_login_report' => $report,
  );
  return $return;
}

/**
 * Loads data from Server variable.
 *
 * @param string $data_key
 *   Key in $_SERVER variable.
 *
 * @return array
 *   Returns the server variable data.
 */
function _gate_rules_load_server_variable($data_key) {
  if (isset($_SERVER[$data_key])) {
    return array('loaded_server_variable_data' => $_SERVER[$data_key]);
  }
  return FALSE;
}
