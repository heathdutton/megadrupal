<?php

function webform2sugar_menu() {
  $items = array();

  $items['node/%webform_menu/webform/webform2sugar'] = array(
    'title' => 'SugarCRM',
    'page callback' => 'webform2sugar_manage',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform2sugar.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%webform_menu/webform/webform2sugar/add'] = array(
    'title' => 'Add Sugar CRM Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform2sugar_component_add', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform2sugar.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['node/%webform_menu/webform/webform2sugar/delete/%'] = array(
    'title' => 'Add Sugar CRM Mapping',
    'page callback' => 'webform2sugar_component_delete',
    'page arguments' => array(1, 5),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform2sugar.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Respond to a Webform submission being inserted.
 *
 * Webform2Sugar will take the webform that is now stored in the local db and sent it to sugarcrm
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that was just inserted into the database.
 */
function webform2sugar_webform_submission_insert($node, $submission) {
  //Lookup our webform2sugar settings for this webform from the db
  $select = db_select('webform2sugar_webform', 'sugar_webform');
  $select->fields('sugar_webform');
  $select->condition('nid', $node->nid);
  $sugar_webform = $select->execute()->fetchAll();
  if ($sugar_webform) {
    $sugar_webform = $sugar_webform[0];
  }
  
  //Make sure the webform is active if, it is not, then we have nothing to do.
  if ($sugar_webform && $sugar_webform->active) {
    
    //Setup the SugarCRM URL
    $sugarcrmurl = $sugar_webform->url . '/index.php';
    
    //Start off our data list with the two items we know will always exist
    $data = 'entryPoint=WebToLeadCapture';

    
    
    //Lookup all of our individual webform component mappings to sugar
    $select = db_select('webform2sugar_component', 'sugar_component');
    $select->fields('sugar_component');
    $select->condition('nid', $node->nid);
    $sugar_components_results = $select->execute()->fetchAll();
    
    // Sort all the components by their sugar key, so that we can append elements with the same
    // key when we send the items to sugar.  We have to do this because we
    // can map more than one webform field to a single sugar field
    $sugar_components_sorted = array();
    foreach ($sugar_components_results as $sugar_component) {
      $sugar_components_sorted[$sugar_component->sugarkey][] = $sugar_component;
    }
    
    // Now by sugarCRM key go through all webform components mapped to each SugarCRM
    foreach ($sugar_components_sorted as $key => $sugar_components) {
      $value = '';
      
      //Usually there will just be 1, but it is possible to map more than one field
      // to a single sugar field
      foreach ($sugar_components as $sugar_component) {
				
				//Webform version 7.3 wraps the form values in an element 'value'. 7.4 should be accessed directly.
				if (array_key_exists('value', $submission->data[$sugar_component->cid])) {
					$formvalues = $submission->data[$sugar_component->cid]['value'];
				} else {
					$formvalues = $submission->data[$sugar_component->cid];
				}
        
        //Usually there will just be one value, per field, but this could also be
        //a multi-value field so we need to loop through in case there is more than one
        foreach ($formvalues as $formvalue) {
          //Seperate out each multiple value with a space and append to our value after checking
          //to make sure there is no 'safe-key' mapping.
          $value .= ' ' . webform2sugar_check_safe_key($sugar_component, $formvalue, $node);
        }
      }
      
      
      //Only include key if it has a valid value.
      //Blank values (Such as opt-out checkboxes that were NOT checked) should not be sent.
      if (trim($value)) {
        //Now trim it up , and urlencode it.
        $data .= '&' . $key . '=' . urlencode(ltrim($value));
      } else if ($key == 'email_opt_in' && !$formvalue) {
        //If the value was blank, AND it was email_opt_in, AND the safe_key was blank, we need a special case to actually send the opt_out flag!
        $data .= '&email_opt_out=1';
      }
    }
    
    //Check to see if the default campaign_id was overriden in the form.  If not, use the default one.
    if (strpos ($data, 'campaign_id') === FALSE) {
      $data .= '&campaign_id=' . $sugar_webform->campaign;
    }
    
    //Setup Headers for Posting to SugarCRM
    $url_headers = array(
      'Content-Type' => 'application/x-www-form-urlencoded',
      'User-Agent' => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.9) Gecko/20071025 Firefox/2.0.0.9'
    );
    
    $result = drupal_http_request($sugarcrmurl, array('headers' => $url_headers,
                                                      'data' => $data,
                                                      'method' => 'POST'));
       
    // Check Result.  Blank is good.
    if ($result->code==200) {
      $message = t('Valid response recieved from SugarCRM<br /><br />Data posted : !posted<br /><br />Content of response (an empty response is a good thing!): !response',
                      array('!posted' => $data, '!response' => $result->data));
      watchdog('SugarCRM', $message, WATCHDOG_DEBUG);  
    }
    else{
      $message = t('Failed to send request to !url response code was !code', array('url' => $sugarcrmurl, 'code' => $result->code));
      watchdog('SugarCRM', $message, WATCHDOG_ERROR);  
    }
  }
}

/**
 * Check for a safe_key mapping for a webform value.
 *
 * This method will check the node and safekey value given and will attempt to lookup a mapping for this value.
 * 
 * @param $sugar_component
 *   The Webform2Sugar component from which this value vame from
 * @param $value
 *   The actual value from the form which may be a safe_key
 * @param $node
 *   The Webform node on which this submission was made.
 *
 * @return Returns either the original value passed in as $value, or if a safe_key for this node and componenet was found
 * then returns the actual value that this safe_key refers to.
 */
function webform2sugar_check_safe_key($sugar_component, $value, $node) {
  //Speed up the case where value is blank
  if (!$value) {
    return $value;
  }

  if (array_key_exists('components', $node->webform) && array_key_exists($sugar_component->cid, $node->webform['components']) ) {
    $component = $node->webform['components'][$sugar_component->cid];
    
    //If there is an extra 'items' then we need to check those values.
    if (array_key_exists('extra', $component) && array_key_exists('items', $component['extra'])) {
      $items = explode("\n", $component['extra']['items']);
          
      //Check each item until our key matches
      foreach ($items as $item) {
        $position = strpos($item, '|');
        if ($position) {
          $key = substr($item, 0, $position);
          if ($key == $value) {
            $value = trim(substr($item, $position + 1));
            break; //We matched we can stop
          }
        }
      }
    }
  }
  //Return either the original value, or if a safe_key mapping was found, return the value it was mapped to.
  return $value;
}

/**
 * Respond to a Webform component being deleted.
 */
function webform2sugar_webform_component_delete($component) {
  db_delete('webform2sugar_component')
    ->condition('nid', $component['nid'])
    ->condition('cid', $component['cid'])
    ->execute();
}


/**
 * Respond to a Webform node deleted.
 */
function webform2sugar_node_delete($node) {
  
  //If the node is a webform we have some rows to delete first
  if ($node->type == 'webform') {
    db_delete('webform2sugar_component')
      ->condition('nid', $node->nid)
      ->execute();
      
    db_delete('webform2sugar_webform')
      ->condition('nid', $node->nid)
      ->execute();
  }
}
