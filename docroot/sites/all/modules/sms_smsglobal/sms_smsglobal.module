<?php

/**
 * @file
 * Adds support for sending SMS via the SMSGlobal gateway.
 */

define('SMS_SMSGLOBAL_DEFAULT_IP', "203.89.193.162\n203.89.199.54");

/**
 * Implements hook_gateway_info().
 */
function sms_smsglobal_gateway_info() {
  return array(
    'smsglobal' => array(
      'name' => 'SMSGlobal',
      'configure form' => 'sms_smsglobal_admin_form',
      'receive' => TRUE,
      'send' => 'sms_smsglobal_send',
      'send form' => 'sms_smsglobal_send_form',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sms_smsglobal_menu() {
  $incoming_path = 'sms/smsglobal/incoming';
  $includes_path = drupal_get_path('module', 'sms_smsglobal') . '/includes';

  $items[$incoming_path] = array(
    'title' => 'Incoming SMSGlobal SMS',
    'page callback' => 'sms_smsglobal_incoming',
    'access callback' => 'sms_smsglobal_incoming_access',
    'file' => 'sms_smsglobal.inc',
    'file path' => $includes_path,
    'type' => MENU_CALLBACK,
  );

  // Variable used if sms_bootstrap is enabled and included in settings.php
  // See smsframework/bootstrap/README.txt for more information.
  $routes = variable_get('sms_bootstrap_routes', array());
  if (!isset($routes[$incoming_path])) {
    $routes[$incoming_path] = array(
      'inc' => $includes_path . '/sms_smsglobal.parser.inc',
      'parser class' => 'SmsSmsglobalParser',
    );
    variable_set('sms_bootstrap_routes', $routes);
  }

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function sms_smsglobal_libraries_info() {
  $libraries['smsglobal'] = array(
    'name' => 'SMSGlobal PHP REST Client',
    'vendor url' => 'https://github.com/smsglobal/rest-api-client-php',
    'download url' => 'https://github.com/smsglobal/rest-api-client-php/archive/master.zip',
    'version' => '1.0.0',
    'version arguments' => array(
      'file' => 'Smsglobal/RestApiClient/Version.php',
      // SMSGlobal Rest API Client Version 1.0.0.
      'pattern' => '/const VERSION = \'(\d+\.\d+\.\d+)/',
      'lines' => 19,
    ),
    'xautoload' => '_sms_smsglobal_autoload',
  );

  return $libraries;
}

/**
 * The admin settings form builder for this gateway.
 *
 * @param array $configuration
 *   An array describing gateway settings (similar to form_state).
 *
 * @return array
 *   An array describing the built admin settings form.
 */
function sms_smsglobal_admin_form($configuration) {
  $form = array();
  $prefix = 'sms_smsglobal';

  // Load helper functions.
  module_load_include('inc', 'sms_smsglobal', 'includes/sms_smsglobal');

  $form[$prefix . '_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#description' => t('Your SMSGlobal REST API key, you can find this on your <a href="@mxturl">MXT dashboard</a>.', array(
      '@mxturl' => 'https://mxt.smsglobal.com/api-key',
    )),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => isset($configuration[$prefix . '_api_key']) ? $configuration[$prefix . '_api_key'] : '',
  );

  $form[$prefix . '_api_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('API secret'),
    '#description' => t('Your SMSGlobal REST API secret, you can find this on your <a href="@mxturl">MXT dashboard</a>.', array(
      '@mxturl' => 'https://mxt.smsglobal.com/api-key',
    )),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => isset($configuration[$prefix . '_api_secret']) ? $configuration[$prefix . '_api_secret'] : '',
  );

  $form[$prefix . '_sender_id_type'] = array(
    '#type' => 'select',
    '#title' => t('Sender ID type'),
    '#description' => t('The type of <a href="@senderid">sender ID</a> you have. Do note, you need a <a href="@dedicated">dedicated number</a> in order to receive incoming SMSes.<br />The default "shared numbers" shared pool provided by SMSGlobal is not supported by their API (and hence this module) yet.', array(
      '@senderid' => 'http://support.smsglobal.com/customer/portal/articles/630636-how-do-i-change-the-name-or-number-my-sms-comes-from-what-is-a-sender-id-',
      '@dedicated' => 'http://support.smsglobal.com/customer/portal/articles/1108901-ordering-and-setting-up-a-dedicated-number',
    )),
    '#options' => _sms_smsglobal_get_sender_id_types(),
    '#default_value' => isset($configuration[$prefix . '_sender_id_type']) ? $configuration[$prefix . '_sender_id_type'] : '',
  );

  $form[$prefix . '_sender_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender ID'),
    '#description' => t('The sender ID of each message.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => isset($configuration[$prefix . '_sender_id']) ? $configuration[$prefix . '_sender_id'] : '',
    '#required' => TRUE,
  );

  $form[$prefix . '_ip_restrict'] = array(
    '#type' => 'checkbox',
    '#title' => t('IP restrict the incoming SMS callback'),
    '#description' => t('If checked, the incoming SMS callback URL will only be accessible to a shortlist of IPs (below).'),
    '#default_value' => isset($configuration[$prefix . '_ip_restrict']) ? $configuration[$prefix . '_ip_restrict'] : FALSE,
  );

  $form[$prefix . '_allowed_ips'] = array(
    '#type' => 'textarea',
    '#title' => t('Allowed IPs'),
    '#description' => t('A set of IPs that are allowed to send a POSTback request with an incoming SMS. Enter one per line.<br />See the <a href="@doc">SMSGlobal documentation</a> for more info.', array(
      '@doc' => 'http://www.smsglobal.com/support/',
    )),
    '#default_value' => isset($configuration[$prefix . '_allowed_ips']) ? $configuration[$prefix . '_allowed_ips'] : SMS_SMSGLOBAL_DEFAULT_IP,
  );

  // Add javascript.
  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'sms_smsglobal') . '/js/sms_smsglobal.admin.js',
    ),
  );

  // Hook on our validate, unfortunately this isn't automatic as it's going
  // through the sms framework.
  $form['#validate'] = array(
    'sms_smsglobal_admin_form_validate',
  );

  return $form;
}

/**
 * Validation handler for the settings forn.
 *
 * @param array $form
 *   Fully built and submitted form.
 * @param array $form_state
 *   The submitted form state.
 */
function sms_smsglobal_admin_form_validate($form, &$form_state) {
  // Load helper functions.
  module_load_include('inc', 'sms_smsglobal', 'includes/sms_smsglobal');

  // Make sure a dedicated number is entered if that number type is selected.
  if ($form_state['values']['sms_smsglobal_sender_id_type'] === '2') {
    // Check if the number is numeric first.
    if (!is_numeric($form_state['values']['sms_smsglobal_sender_id'])) {
      form_set_error('sms_smsglobal_sender_id', t('This dedicated number is in the wrong format, please enter one without spaces or puncuations (e.g. 61431234567).'));
    }
    else {
      // Validate number using the API.
      // Use the newly entered config instead of the stored one.
      $config = array(
        'sms_smsglobal_api_key' => $form_state['values']['sms_smsglobal_api_key'],
        'sms_smsglobal_api_secret' => $form_state['values']['sms_smsglobal_api_secret'],
      );
      $rest = _sms_smsglobal_get_rest_client($config);

      try {
        // Attempt to load this dedicated number.
        $rest->get('dedicated-number', $form_state['values']['sms_smsglobal_sender_id']);
      }
      catch (\Exception $e) {
        $exception_base = "Smsglobal\\RestApiClient\\Exception\\";

        switch (get_class($e)) {
          case "{$exception_base}AuthorizationException":
            form_set_error('sms_smsglobal_api_key', t('Invalid API details, please check your API key and secret.'));
            break;

          case "{$exception_base}InvalidDataException":
          case "{$exception_base}ResourceNotFoundException":
            form_set_error('sms_smsglobal_sender_id', t('This dedicated number is not valid, are you sure you purchased it?'));
            break;

          default:
            // If the exception isn't one of the known ones above, we've got
            // bigger problems, bubble this up.
            throw $e;
        }
      }
    }
  }
  elseif ($form_state['values']['sms_smsglobal_sender_id_type'] === '1') {
    // Remove any possible whitepsace.
    $sender_id = trim($form_state['values']['sms_smsglobal_sender_id']);
    $form_state['values']['sms_smsglobal_sender_id'] = $sender_id;

    // Make sure that the 'custom word' string length is between 4 and 11
    // characters.
    $sender_id_length = strlen($sender_id);
    if ($sender_id_length < 4 || $sender_id_length > 11) {
      form_set_error('sms_smsglobal_sender_id', t('The custom word entered for the sender ID must be between 4 and 11 characters in length.'));
    }
  }
}

/**
 * Add custom additions onto the send form.
 *
 * @param bool $required
 *   Whether user input is required.
 *
 * @return array
 *   A form with the custom additions tacked on.
 */
function sms_smsglobal_send_form($required = FALSE) {
  // Add country code (Australia is the default because SMSGlobal is
  // Australian).
  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#multiple' => FALSE,
    '#options' => sms_country_codes(),
    '#default_value' => 61,
    '#required' => $required,
  );

  return $form;
}

/**
 * Send a message.
 *
 * @param int $number
 *   The number to send the message too.
 * @param string $message
 *   The content of the message.
 * @param array $options
 *   Any extra options from the send form. @see sms_smsglobal_send_form().
 *
 * @return array
 *   An array containing the status and a message if there was an error, keys:
 *     - status: bool, whether the send succeeded or not.
 *     - message: string, the error message if the send did not succeed.
 *   For more info @see sms_handle_result()
 */
function sms_smsglobal_send($number, $message, $options) {
  // Load helper functions.
  module_load_include('inc', 'sms_smsglobal', 'includes/sms_smsglobal');

  // Sanitise number.
  $country_code = (empty($options['country'])) ? NULL : $options['country'];
  $number = _sms_smsglobal_get_clean_number($number, $country_code);

  // Send this message.
  return sms_smsglobal_execute_send('send-sms', array(
    'number' => $number,
    'message' => $message,
  ));
}

/**
 * Handle access to the incoming callback page.
 *
 * @return bool
 *   TRUE if access conditions are met, FALSE otherwise.
 */
function sms_smsglobal_incoming_access() {
  // Check this using the incoming parser class.
  $access = SmsSmsglobalParser::checkAccess(ip_address(), $_REQUEST);
  return $access === TRUE ? TRUE : FALSE;
}

/**
 * X autoload callback for the SMSGlobal REST library.
 * @see https://gist.github.com/donquixote/4018045
 * @see hook_xautoload()
 */
function _sms_smsglobal_autoload($api) {
  // Make sure it's not looking in '/lib' (which is the default).
  $api->namespaceRoot('Smsglobal\RestApiClient', '');
}
