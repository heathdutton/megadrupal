<?php

/**
 * @file
 * Implements language definitons for Lingwo.
 */

// get our API functions
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'lingwo_language') . '/' . 'lingwo_language.api.inc';

/**
 * Implements hook_help().
 */
function lingwo_language_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lingwo_language':
      return '<p>' . t('Allows each language to have seperate definitions of some Lingwo\'s settings.  Create a new <em>Language definition</em> node to get started.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function lingwo_language_permission() {
  return array(
    'create Lingwo language definition' => array(
      'title' => t('Create language definition for dictionary'),
    ),
    'delete own Lingwo language definition' => array(
      'title' => t('Delete own language definition for dictionary'),
    ),
    'delete any normal Lingwo language definition' => array(
      'title' => t('Delete any normal language definition for dictionary'),
    ),
    'delete official Lingwo language definition' => array(
      'title' => t('Delete official language definition for dictionary'),
    ),
    'edit own Lingwo language definition' => array(
      'title' => t('Edit own language definition for dictionary'),
    ),
    'edit official Lingwo language definition' => array(
      'title' => t('Edit official language definition for dictionary'),
    ),
    'edit any normal Lingwo language definition' => array(
      'title' => t('Edit any normal language definition for dictionary'),
    ),
    'assign Lingwo language defintion to language' => array(
      'title' => t('Assign language defintion to language for dictionary'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function lingwo_language_node_info() {
  $type_name = LingwoLanguage::$settings->content_type;
  $info[$type_name] = array(
    'name' => 'Language definition',
    'base' => 'lingwo_language',
    'description' => 'A language definition.',
    'has_title' => TRUE,
    'title_label' => 'Title',
    'has_body' => FALSE,
    'locked' => FALSE,
  );
  return $info;
}

/**
 * Implements hook_node_type_update().
 */
function lingwo_language_node_type_update($info) {
  // allow the user to rename our content type
  if (!empty($info->old_type) && $info->old_type == LingwoLanguage::$settings->content_type && $info->old_type != $info->type) {
    LingwoLanguage::$settings->content_type = $info->type;
  }
}

// Internal function for implementing hook_node_access().
function _lingwo_language_node_access($node, $op, $account) {
  if ($op == 'create') {
    return user_access('create Lingwo language definition', $account);
  }

  if (is_object($node)) {
    $own = ($account->uid == $node->uid);
    $official = db_query("SELECT language FROM {lingwo_language} WHERE nid = :nid", array(':nid' => $node->nid))->fetch()->language;
    $official = !empty($official);

    if ($op == 'update') {
      if ($official) {
        return user_access('edit official Lingwo language definition', $account);
      }
      else {
        return user_access('edit any normal Lingwo language definition', $account) ||
               ($own && user_access('edit own Lingwo language definition', $account));
      }
    }

    if ($op == 'delete') {
      if ($official) {
        return user_access('delete official Lingwo language definition', $account);
      }
      else {
        return user_access('delete any normal Lingwo language definition', $account) ||
               ($own && user_access('delete own Lingwo language definition', $account));
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function lingwo_language_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if ($type == LingwoLanguage::$settings->content_type) {
    return _lingwo_language_node_access($node, $op, $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form().
 */
function lingwo_language_form(&$node, $form_state) {
  // use the default implementation from node.module
  $form = node_content_form($node, $form_state);

  if (!isset($node->lingwo_language)) {
    $node->lingwo_language = array();
  }

  $element = array('#tree' => TRUE);

  if (user_access('assign Lingwo language definition to language')) {
    $languages = language_list('enabled');
    $languages = $languages[1];
    $options = array();
    foreach ($languages as $language) {
      $options[$language->language] = t($language->name);
    }

    $element['language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#options' => array('' => t('none')) + $options,
      '#default_value' => isset($node->lingwo_language['language']) ? $node->lingwo_language['language'] : '',
      '#weight' => -10,
      '#description' => t('Assign this language definition to a system language.  This will cause this definition to be used by the system for everything concerning this language.'),
    );
  }

  $language = LingwoLanguage::fromNode($node);
  foreach (module_implements('lingwo_language_form') as $module) {
    $func = $module . '_lingwo_language_form';
    $result = $func($language);
    if (isset($result) && is_array($result)) {
      $element = array_merge($element, $result);
    }
  }

  $form['lingwo_language'] = $element;
  $form['#submit'][] = 'lingwo_language_form_submit';
  $form['#validate'][] = 'lingwo_language_form_validate';

  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_language_form_validate($form, &$form_state) {
  $oldvalues = $form_state['values'];
  $form_state['values'] = $form_state['values']['lingwo_language'];

  foreach (module_implements('lingwo_language_form_validate') as $module) {
    $func = $module . '_lingwo_language_form_validate';
    $func($form, $form_state);
  }

  $oldvalues['lingwo_language'] = $form_state['values'];
  $form_state['values'] = $oldvalues;

  // if there are errors, we need to rewrite the $name portion
  if ($form_errors = form_get_errors()) {
    $messages = drupal_get_messages();

    form_set_error(NULL, '', TRUE);
    foreach ($form_errors as $name => $message) {
      if (!empty($name)) {
        $name = 'lingwo_language][' . $name;
      }
      form_set_error($name, $message);

      // remove from our cache of the messages
      $index = array_search($message, $messages['error']);
      unset($messages['error'][$index]);
    }

    // reset any remaining messages
    foreach ($messages as $type => $message) {
      drupal_set_message($message, $type);
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function lingwo_language_form_submit($form, &$form_state) {
  $oldvalues = $form_state['values'];
  $form_state['values'] = $form_state['values']['lingwo_language'];

  foreach (module_implements('lingwo_language_form_submit') as $module) {
    $func = $module . '_lingwo_language_form_submit';
    $func($form, $form_state);
  }

  $oldvalues['lingwo_language'] = $form_state['values'];
  $form_state['values'] = $oldvalues;

  // rebuilds the node with the values on $form_state -- necessary when we aren't submitting, but
  // just modifying the form.
  // TODO: commented out in Drupal 7 port -- is it still necessary?
  //_lingwo_form_to_node($form, $form_state);
}

/**
 * Implements hook_field_extra_fields().
 */
function lingwo_language_field_extra_fields() {
  $type = LingwoLanguage::$settings->content_type;

  $extra['node'][$type] = array(
    'form' => array(
      'lingwo_language' => array(
        'label' => t('Language definition'),
        'description' => t('Lingwo language definition field.'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_load().
 */
function lingwo_language_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    // read all the values for this revision
    $res = db_query("SELECT name, value FROM {lingwo_language_revisions} WHERE vid = :vid", array(':vid' => $node->vid));
    $value = array();
    foreach ($res as $obj) {
      $value[$obj->name] = unserialize($obj->value);
    }

    // get the language it's assigned to
    $res = db_query("SELECT language FROM {lingwo_language} WHERE nid = :nid", array(':nid' => $node->nid));
    foreach ($res as $obj) {
      $value['language'] = $obj->language;
    }

    $node_additions = array('lingwo_language' => $value);
    foreach ($node_additions as $property => &$value) {
      $node->$property = $value;
    }
  }
}

/**
 * Implements hook_insert().
 */
function lingwo_language_insert($node) {
  lingwo_language_update($node);
}

/**
 * Implements hook_update().
 */
function lingwo_language_update($node) {
  $language_perms = user_access('assign Lingwo language definition to language');
  if (empty($node->lingwo_language['language']) && ($language_perms || $node->is_new)) {
    // if the language is empty, assign it to NULL (even without permissions, on node creation,
    // we will set this value to NULL)
    db_query("REPLACE INTO {lingwo_language} (nid, language) VALUES (:nid, NULL)",
      array(':nid' => $node->nid));
  }
  elseif ($language_perms) {
    // update to the appropriate value (only do if we have permission)
    db_query("REPLACE INTO {lingwo_language} (nid, language) VALUES (:nid, :language)", array(
      ':nid' => $node->nid,
      ':language' => $node->lingwo_language['language']
    ));
  }

  // store everything except language as part of the revision
  $values = $node->lingwo_language;
  unset($values['language']);
  foreach ($values as $name => $value) {
    db_query("REPLACE INTO {lingwo_language_revisions} (vid, nid, name, value) VALUES (:vid, :nid, :name, :value)", array(
      ':vid' => $node->vid,
      ':nid' => $node->nid,
      ':name' => $name,
      ':value' => serialize($value)
    ));
  }

  module_invoke_all('lingwo_language_save', LingwoLanguage::fromNode($node));
}

/**
 * Implements hook_delete().
 */
function lingwo_language_delete($node) {
  db_delete('lingwo_language_revisions')
    ->condition('nid', $node->nid)
    ->execute();

  db_delete('lingwo_language')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_revision_delete().
 */
function lingwo_language_node_revision_delete($node) {
  db_delete('lingwo_language_revisions')
    ->condition('vid', $node->vid)
    ->execute();
}

