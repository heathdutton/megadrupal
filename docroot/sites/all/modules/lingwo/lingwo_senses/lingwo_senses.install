<?php

/**
 * @file
 * Install file for lingwo_senses.
 */

/**
 * Implements hook_schema().
 */
function lingwo_senses_schema() {
  $schema['lingwo_senses_revisions'] = array(
    'description' => 'Stores the sense data for a revision of a given entry',
    'fields' => array(
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'The {node} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'delta' => array(
        'description' => 'The sequence number for this sense on this entry.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Serialized data representing the senses.',
        'type' => 'text',
        'size' => 'normal',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
    ),
    'primary key' => array('vid', 'delta'),
  );

  return $schema;
}

// Goes through all the existing entries and adds default senses to them
function _lingwo_senses_install_default_senses() {
  $res = db_query("SELECT nid FROM {node} WHERE type = :type AND (tnid = 0 OR tnid = nid OR tnid IS NULL)", array(':type' => LingwoEntry::$settings->content_type));

  foreach ($res as $obj) {
    $nids = array($obj->nid);
    if (module_exists('translation')) {
      $trans = translation_node_get_translations($obj->nid);
      if (!is_null($trans)) {
        foreach (array_values($trans) as $tnode) {
          $nids[] = $tnode->nid;
        }
      }
    }
    _lingwo_senses_install_default_senses_one($nids);
  }
}

// Sets up default senses for one entry with a list of nids
function _lingwo_senses_install_default_senses_one($nids) {
  $data = serialize(array('id' => _lingwo_make_uuid()));
  $res = db_query("SELECT nid, vid FROM {node_revision} WHERE nid IN (:nids)", array(':nids' => $nids));
  foreach ($res as $obj) {
    $id = db_insert('lingwo_senses_revisions')
      ->fields(array(
        'vid' => $obj->vid,
        'nid' => $obj->nid,
        'delta' => 0,
        'data' => $data,
      ))
      ->execute();
  }
}

/**
 * Implements hook_install().
 */
function lingwo_senses_install() {
  // give existing entries default senses
  _lingwo_senses_install_default_senses();
}

/**
 * Implements hook_uninstall().
 */
function lingwo_senses_uninstall() {
  // TODO: ARG! How can we use our code to do the uninstall if the module is
  // already disabled? This is probably a job for the 'variable' module.
  /*
  foreach (LingwoSenses::$settings->getNames() as $name) {
    variable_del($name);
  }
  */
}

/**
 * Update functions.
 */

/**
 * Adds the delta column.
 */
function lingwo_senses_update_7001(&$sandbox) {
  db_rename_table('lingwo_senses_revisions', 'lingwo_senses_revisions_old');
  db_create_table('lingwo_senses_revisions', array(
    'description' => 'Stores the sense data for a revision of a given entry',
    'fields' => array(
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'The {node} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'delta' => array(
        'description' => 'The sequence number for this sense on this entry.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Serialized data representing the senses.',
        'type' => 'text',
        'size' => 'normal',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
    ),
    'primary key' => array('vid', 'delta'),
  ));

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_vid'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT vid) FROM {lingwo_senses_revisions_old}')->fetchField();
  }

  // we do them 100 at a time!
  $old_sense_list = db_select('lingwo_senses_revisions_old', 's')
    ->fields('s', array('nid', 'vid', 'data'))
    ->condition('vid', $sandbox['current_vid'], '>')
    ->range(0, 100)
    ->orderBy('vid', 'ASC')
    ->execute();

  foreach ($old_sense_list as $old_senses) {
    $old_senses->data = unserialize($old_senses->data);
    foreach ($old_senses->data as $delta => $data) {
      db_insert('lingwo_senses_revisions')
        ->fields(array(
          'nid' => $old_senses->nid,
          'vid' => $old_senses->vid,
          'delta' => $delta,
          'data' => serialize($data),
        ))
        ->execute();
    }

    $sandbox['progress']++;
    $sandbox['current_vid'] = $old_senses->vid;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  if ($sandbox['#finished']) {
    db_drop_table('lingwo_senses_revisions_old');
  }
}

