<?php

/**
 * Implements hook_ctools_plugin_api().
 */
/*function commerce_drupalgap_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'commerce_drupalgap.services.inc',
    );
  }
}*/

/**
 * Implements hook_enable()
 */
function commerce_drupalgap_enable() {
    db_update('system')
    ->fields(array('weight' => 1001))
    ->condition('type', 'module')
    ->condition('name', 'commerce_drupalgap')
    ->execute();
}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function commerce_drupalgap_services_request_postprocess_alter($controller, $args, &$result) {
  if ($controller['callback'] == '_system_resource_connect') {
    $result->commerce = array(
      'commerce_product_types' => commerce_product_types(),
      'commerce_product_reference_node_types' => commerce_product_reference_node_types()
    );
    $result->field_info_instances['commerce_product'] = field_info_instances('commerce_product');
  }
  // When retrieving a product display...
  else if ($controller['callback'] == 'commerce_services_product_display_retrieve') {
    // Iterate over each referenced product entity, then for each taxonomy term
    // reference field on the referenced product, grab the taxonomy term name
    // and add it to the result.
    if (!isset($result->field_product_entities)) { return; }
    $tids = array();
    foreach($result->field_product_entities as $product_id => $product) {
      $instances = field_info_instances('commerce_product', $product->type);
      foreach($instances as $field => $instance) {
        if (
          $instance['widget']['module'] == 'taxonomy' ||
          ($instance['widget']['module'] == 'options' && $instance['display']['default']['module'] == 'taxonomy')
        ) {
          $tid = $product->{$field};
          if (is_numeric($tid) && !in_array($tid, $tids)) { $tids[] = $tid; }
        }
      }
    }
    if (empty($tids)) { return; }
    $sql = "SELECT t.tid, t.name FROM {taxonomy_term_data} t WHERE t.tid IN (:tids)";
    $terms = db_query($sql, array(':tids' => $tids))->fetchAll();
    if (empty($terms)) { continue; }
    foreach($result->field_product_entities as $product_id => $product) {
      $instances = field_info_instances('commerce_product', $product->type);
      foreach($instances as $field => $instance) {
        if (
          $instance['widget']['module'] == 'taxonomy' ||
          ($instance['widget']['module'] == 'options' && $instance['display']['default']['module'] == 'taxonomy')
        ) {
          $tid = $product->{$field};
          foreach($terms as $_term) {
            if ($tid == $_term->tid) {
              $field_name = $field . '_taxonomy_term_name';
              $result->field_product_entities[$product_id]->{$field_name} = $_term->name;
              break;
            }
          }
        }
      }
    }
  }
}

