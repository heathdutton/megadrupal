<?php

/**
 * @file
 * Developer controls installation related stuff. 
 */

/**
 * Implements hook_requirements().
 */
function devcontrol_requirements($phase) {

  if ('runtime' !== $phase || module_exists('performance')) {
    return array();
  }

  $requirements = array();

  if (75 == ($value = variable_get('locale_cache_length', 75))) {
    $requirements['performance_locale_cache'] = array(
      'title' => t("Locale cache length"),
      'value' => t("Not set"),
      'severity' => REQUIREMENT_WARNING,
      'description' => t("The <em>locale_cache_length</em> variable is set to default value, all strings bigger than 75 characters will be excluded from locale cache, triggering a lot of SQL queries on the locales tables, set this variable into your settings.php to a higer value depending on measurements made on your site. 256 should be fine. <strong>Notice that this may cause excessive memory usage."),
    );
  } else {  
    $requirements['performance_locale_cache'] = array(
      'title' => t("Locale cache length"),
      'value' => $value,
      'severity' => REQUIREMENT_OK,
    );
  }

  if (null === variable_get('blocked_ips', null)) {
    $requirements['performance_blocked_ips'] = array(
      'title' => t("Blocked IP list variable"),
      'value' => t("Not set"),
      'severity' => REQUIREMENT_WARNING,
      'description' => t("The <em>blocked_ips</em> variable if not used functionnaly should always be set to an empty array, in order to avoid one useless SQL query per page hit. Consider decommenting it in your settings.php file."),
    );
  } else {
    $requirements['performance_blocked_ips'] = array(
      'title' => t("Blocked IP list variable"),
      'value' => $value,
      'severity' => REQUIREMENT_OK,
    );
  }

  $blacklist = array(
      'diff', 'shortcut', 'views_ui', 'context_ui', 'developer', 'devel',
      'devel_generate', 'admin_menu', 'migrate_ui');

  foreach ($blacklist as $module) {
    if (module_exists($module)) {
      $requirements['performance_module_' . $module] = array(
        'title' => t("%module module", array('%module' => $module)),
        'value' => t("Enabled"),
        'severity' => REQUIREMENT_WARNING,
        'description' => t("Please disable this module, it is useless and will trigger a lot of SQL queries or is just useless on a production site."),
      );
    }
  }

  if (module_exists('contextual')) {
    $wrong = db_query("SELECT 1 FROM {role_permission} WHERE module = 'contextual' AND rid IN (0, 1)")->fetchField();
    if ($wrong) {
      $requirements['performance_module_contextual'] = array(
        'title' => t("Contextual module"),
        'value' => t("Enabled and set to either anonymous or authentified roles"),
        'severity' => REQUIREMENT_WARNING,
        'description' => t("Contextual links module will trigger a lot of SQL queries while doing menu router lookups, disabled it or ensure this is restricted to a few roles only."),
      );
    } else {
      $requirements['performance_module_contextual'] = array(
        'title' => t("Contextual module"),
        'value' => t("Enabled for some roles only"),
        'severity' => REQUIREMENT_OK,
        'description' => t("Contextual links module will trigger a lot of SQL queries while doing menu router lookups, disabled it or ensure this is restricted to a few roles only."),
      );
    }
  } else {
    $requirements['performance_module_contextual'] = array(
      'title' => t("Contextual module"),
      'value' => t("Disabled"),
      'severity' => REQUIREMENT_OK,
    );
  }

  // This one is a bit I/O heavy, but it might help a lot of people.
  $list = db_query("SELECT name,filename FROM {system}")->fetchAllKeyed();
  $missing = array();
  foreach ($list as $name => $filename) {
    if (!file_exists($filename)) {
      $missing[] = $name;
    }
  }
  if (!empty($missing)) {
    $requirements['performance_missing_modules'] = array(
      'title' => t("Missing modules"),
      'value' => implode(', ', $missing),
      'severity' => REQUIREMENT_WARNING,
      'description' => t("Missing modules from the database will force the core to trigger file system scan on each page hit, this behavior is an auto-fix attempt from core, and can only be avoided by removing those modules row entries from the 'system' database table."),
    );
  }

  if (module_exists('dblog')) {
    $requirements['performance_module_dblog'] = array(
      'title' => t("Database logging module"),
      'value' => t("Enabled"),
      'severity' => REQUIREMENT_WARNING,
      'description' => t("Weither you like it or not, database logging will log an awful lot of data into the watchdog table and slow down your site. Disable it, and switch to alternatives such as the syslog module."),
    );
  } else {
    $requirements['performance_module_dblog'] = array(
      'title' => t("Database logging module"),
      'value' => t("Disabled"),
      'severity' => REQUIREMENT_OK,
    );
  }

  if (extension_loaded('apc')) {
    $requirements['performance_apc'] = array(
      'title' => t("APC extension"),
      'value' => t("Enabled"),
      'severity' => REQUIREMENT_OK,
    );
  } else {
    $requirements['performance_apc'] = array(
      'title' => t("APC extension"),
      'value' => t("Disabled"),
      'severity' => REQUIREMENT_WARNING,
      'description' => t("You must enable APC. Drupal without APC is not an option."),
    );
  }

  return $requirements;
}

/**
 * Adds the developer menu.
 */
function _devcontrol_install_menu() {
  // Menu module might not exists.
  if (!function_exists('menu_save')) {
    module_load_include('module', 'menu');
  }
  // <strike>Sometimes</strike> Drupal is stupid.
  if (!function_exists('menu_save')) {
    return;
  }

  menu_save(array(
    'menu_name'   => 'devcontrol',
    'title'       => "Developer menu",
    'description' => "Developer tools tree.",
  ));
}

/**
 * Implements hook_install().
 */
function devcontrol_install() {
  _devcontrol_install_menu();
}

/**
 * Implements hook_uninstall().
 */
function devcontrol_uninstall() {
  if (!function_exists('menu_delete')) {
    module_load_include('module', 'menu');
  }
  menu_delete(array(
    'menu_name'   => 'devcontrol',
    'title'       => "Developer menu",
    'description' => "Developer tools tree.",
  ));
}

/**
 * Adds the developer menu.
 */
function devcontrol_update_7001() {
  _devcontrol_install_menu();
} 
