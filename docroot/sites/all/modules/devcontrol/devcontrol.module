<?php

/**
 * @file
 * Developer controls module.
 */

/**
 * Developer anonymous access feature cookie name.
 */
const DEVCONTROL_COOKIE_NAME = 'developer-access';

/**
 * Cookie cache name for cache bin selection in admin.
 */
const DEVCONTROL_CACHE_COOKIE = 'dccache';

/**
 * Cookie cache name for cache bin selection in admin.
 */
const DEVCONTROL_IMPERSONATE_COOKIE = 'dcimp';

/**
 * Bar theme variable name.
 */
const DEVCONTROL_VAR_BAR_THEME = 'devcontrol_bar_theme';

/**
 * Environment name variable name.
 */
const DEVCONTROL_VAR_ENV = 'devcontrol_env';

/**
 * Implements hook_menu().
 */
function devcontrol_menu() {

  $items = array();

  // For cookie users, come back as original user.
  $items['developer/user/relog'] = array(
    'page callback'   => 'devcontrol_user_relog_page',
    'access callback' => 'devcontrol_access',
    'file'            => 'devcontrol.user.inc',
    'type'            => MENU_CALLBACK,
  );
  // For cookie users, drop the cookie.
  $items['developer/user/dropcookie'] = array(
    'page callback'   => 'devcontrol_user_dropcookie_page',
    'access callback' => 'devcontrol_access',
    'file'            => 'devcontrol.user.inc',
    'type'            => MENU_CALLBACK,
  );
  // For cookie users, impersonate another user.
  $items['developer/user/impersonate'] = array(
    'page callback'   => 'devcontrol_user_impersonate_page',
    'access callback' => 'devcontrol_access',
    'file'            => 'devcontrol.user.inc',
    'type'            => MENU_CALLBACK,
  );
  $items['developer/user/autocomplete'] = array(
    'page callback'   => 'devcontrol_user_automcomplete',
    'access callback' => 'devcontrol_access',
    'file'            => 'devcontrol.user.inc',
    'type'            => MENU_CALLBACK,
  );

  // Admin pages.
  $items['developer'] = array(
    'title' => "Developer",
    'description' => "Advanced developer information and features shortcuts.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer-cache/clear/%devcontrol_cache'] = array(
    'page callback' => 'devcontrol_clear_cache_page',
    'page arguments' => array(2),
    'access callback' => 'devcontrol_access',
    'type' => MENU_CALLBACK,
  );
  $items['developer/actions'] = array(
    'title' => "Actions",
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['developer/settings'] = array(
    'title' => "Settings",
    'description' => "Site-wide developer parameters and behaviors.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_settings_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Queue administration.
  $items['developer/queue'] = array(
    'title' => "Queues",
    'description' => "Manage Drupal queues.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_queue_list_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.queue.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/queue/%'] = array(
    'title' => "Queue",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_queue_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.queue.inc',
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );

  // Search and explore Drupal internal registries.
  $items['developer/search'] = array(
    'title' => "Search",
    'description' => "Explore various system registries.",
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => 'devcontrol_access',
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/search/hook-search'] = array(
    'title' => "Hook search",
    'description' => "Browse and search into hook registry.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_hook_search_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.search.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/search/fields-explore'] = array(
    'title' => "Explore fields",
    'description' => "Display an overview of all existing fields.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_field_explore_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.search.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/search/entity-search'] = array(
    'title' => "Entity search",
    'description' => "Browse entity info registry.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_entity_search_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.search.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/search/tokens'] = array(
    'title' => "Tokens",
    'description' => "Display and browse through all known tokens.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_tokens_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.search.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/search/cache-explore'] = array(
    'title' => "Explore cache",
    'description' => "Browse existing cache backends and their entries.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_cache_explore_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.search.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  // Autocomplete callbacks for search.
  $items['developer/search/hook-search/autocomplete/%'] = array(
    'page callback' => 'devcontrol_admin_hook_search_autocomplete',
    'page arguments' => array(4),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.search.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/search/entity-search/autocomplete/%'] = array(
    'page callback' => 'devcontrol_admin_entity_search_autocomplete',
    'page arguments' => array(4),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.search.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Mailing and other stuff.
  $items['developer/mailing'] = array(
    'title' => "Mail output",
    'description' => "Display all mail output catched by the developer fake mail backend.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_mail_ouput_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/field-create'] = array(
    'title' => "Create field",
    'description' => "Create and export a new field using an advanced form.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_field_wizzard'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.field.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['developer/export-variables'] = array(
    'title' => "Variables export",
    'description' => "Export any variables as code.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devcontrol_admin_export_variables_form'),
    'access callback' => 'devcontrol_access',
    'file' => 'devcontrol.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  foreach ($items as $path => &$item) {
    $item['menu_name'] = 'devcontrol';
    $item['theme callback'] = 'devcontrol_theme_callback';
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function devcontrol_theme() {
  return array(
    'devcontrol_bar' => array(
      'render element' => 'element',
      'template' => 'devcontrol-bar',
    ),
    'devcontrol_admin_bins' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Get list of known themes.
 */
function devcontrol_bar_theme_list() {
  return array(
    'blue' => t("Blue (legacy)"),
    'nice' => t("Nice"),
  );
}

/**
 * Get current theme to use.
 */
function devcontrol_bar_theme_get() {
  return variable_get(DEVCONTROL_VAR_BAR_THEME, 'nice');
}

/**
 * Implements hook_hook_info().
 */
function devcontrol_hook_info() {
  return array(
    'cache_clear_info' => array(
      'group' => 'cache',
    ),
  );
}

/**
 * Get clearable caches info.
 *
 * Attention: this is not cached, and will possibly extensive file_exists()
 * calls, do not use it during normal runtime.
 *
 * @return array
 *   Specific business cache definition that can be emptied.
 */
function devcontrol_cache_clear_info_get() {
  $ret = &drupal_static(__FUNCTION__);

  if (!$ret) {
    foreach (module_implements('cache_clear_info') as $module) {
      foreach ((array)module_invoke($module, 'cache_clear_info') as $key => $info) {

        if (empty($info['callback'])) {
          continue; // Failsafe.
        }
        if (!is_callable($info['callback'])) {
          continue; // Failsafe.
        }

        if (empty($info['title'])) {
          $info['title'] = $key;
        }
        $info['module'] = $module;

        $ret[$key] = $info;
      }
    }
    drupal_alter('cache_clear_info', $ret);
  }

  return $ret;
}

/**
 * Set cookie.
 *
 * @param string $name
 *   Cookie name.
 * @param string $value
 *   Value, must already be encoded if complex.
 * @param boolean $secure
 *   True for HTTP only.
 * @param int $lifetime
 *   Default is one week.
 */
function devcontrol_cookie_set($name, $value, $secure = true, $lifetime = 604800) {
  $params = session_get_cookie_params();
  setcookie(
    $name,
    $value,
    time() + $lifetime,
    $params['path'],
    null,                 // Domain
    $GLOBALS['is_https'], // Secure
    $secure
  );
}

/**
 * Drop cookie
 *
 * @param string $name
 */
function devcontrol_cookie_drop($name) {
  $params = session_get_cookie_params();
  setcookie($name, "", time() - 3600, $params['path']);
}

/**
 * Menu helper.
 *
 * This will explicitely allow non admin users to use the admin theme when they
 * have the developer cookie.
 */
function devcontrol_theme_callback() {
  if (devcontrol_access() && ($admin_theme = variable_get('admin_theme'))) {
    return $admin_theme;
  }
}

/**
 * Tell if the current user has a valid cookie for using devcontrol as a non
 * admin user.
 *
 * @return mixed
 *   False if no cookie found, original UID if a cookie was found.
 */
function devcontrol_access_has_cookie() {

  static $hascookie;

  if (!isset($hascookie)) {
    if (isset($_COOKIE[DEVCONTROL_COOKIE_NAME])) {

      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
      $iv      = mcrypt_create_iv($iv_size, MCRYPT_RAND);
      $key     = substr(drupal_get_private_key(), 0, 32);
      $encoded = $_COOKIE[DEVCONTROL_COOKIE_NAME];

      // trim() seem mandatory because PHP will give Zero Padding in the decrypted
      // text to fit decrypted block size. 
      $decoded = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256,
        $key, base64_decode($encoded), MCRYPT_MODE_ECB, $iv));

      if (!empty($decoded) && strpos($decoded, ':')) {
        list($uid, $hashed_pass) = explode(':', $decoded, 2);

        // The whole goal of devcontrol cookie is to be able to use the
        // developer advanced interface with changing sessions. Because of that
        // particular need, we cannot rely upon session set password and must
        // use the user one instead, thus this query being run. Hopefully, this
        // will happen only when the user indeed has the cookie set.
        $hascookie = (bool)db_query("SELECT 1 FROM {users} WHERE uid = :uid AND pass = :pass", array(
          ':uid' => (int)$uid,
          ':pass' => $hashed_pass,
        ))->fetchField();

        if ($hascookie) {
          $hascookie = $uid; 
        }
      }
    } else {
      $hascookie = false;
    }
  }

  return $hascookie;
}

/**
 * Specific access callback that checks if the current user has access to
 * developer features.
 */
function devcontrol_access() {
  return user_access('administer site configuration') || devcontrol_access_has_cookie() || variable_get('devcontrol_free_access', false);
}

function devcontrol_access_give_cookie() {
  global $user;

  $account = user_load($user->uid);
  $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
  $iv      = mcrypt_create_iv($iv_size, MCRYPT_RAND);
  $key     = substr(drupal_get_private_key(), 0, 32);
  $decoded = $account->uid . ':' . $account->pass;
  $encoded = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $decoded, MCRYPT_MODE_ECB, $iv));

  devcontrol_cookie_set(DEVCONTROL_COOKIE_NAME, $encoded);
}

/**
 * Implements hook_mail().
 */
function devcontrol_mail($key, &$message, $params) {
  switch ($key) {
    case 'test':
      $message['subject'] = sprintf("Test mail from %s", variable_get('site_mail'));
      $message['body'][]  = sprintf("Test mail body from %s", variable_get('site_mail'));
      break;
  }
}

/**
 * Get environment name.
 *
 * @return string
 */
function devcontrol_env_get() {
  return variable_get(DEVCONTROL_VAR_ENV, php_uname('n'));
}

function devcontrol_cache_load($key) {
  $info = devcontrol_cache_clear_info_get();

  if (isset($info[$key])) {
    return $info[$key];
  } else {
    return false;
  }
}

function devcontrol_clear_cache_page($cache) {
  if (isset($cache['callback']) && is_callable($cache['callback'])) {
    call_user_func($cache['callback']);
  }
  if (isset($_GET['destination'])) {
    drupal_goto($_GET['destination']);
  }
}

/**
 * Get devcontrol bar content
 *
 * @return array
 *   Bar items
 */
function devcontrol_bar_get_menus() {
  global $user;

  $data    = array();
  $options = array('query' => array('destination' => current_path()));

  // Clear cache menu.
  $data['cache'] = array(
    'name' => t("Cache"),
    'children' => array(
      array(
        '#prefix' => '<div class="title">',
        '#suffix' => '</div>',
        '#markup' => t("Caches"),
      ),
    ),
  );
  foreach (devcontrol_cache_clear_info_get() as $key => $cache) {
    $data['cache']['children'][] = array(
      '#markup' => l($cache['title'], 'developer-cache/clear/' . $key, $options),
    );
  }

  // Impersonate menu.
  if (devcontrol_access()) {
    $data['impersonate'] = array(
      'name' => t("Impersonate"),
      'children' => array(
        array(
          '#prefix' => '<div class="title">',
          '#suffix' => '</div>',
          '#markup' => t("Impersonate"),
        ),
      ),
    );
    require_once __DIR__ . '/devcontrol.user.inc';
    $data['impersonate']['children'][] = drupal_get_form('devcontrol_user_impersonate_form');
  }

  // User menu.
  $data['account'] = array(
    'name' => t("Account"),
    'children' => array(
      array(
        '#prefix' => '<div class="title">',
        '#suffix' => '</div>',
        '#markup' => t("Account"),
      ),
    ),
  );
  $info = array();
  if (($uid = devcontrol_access_has_cookie()) && ($account = user_load($uid)) && $uid != $user->uid) {
    $info[] = '<strong><div id="i-have-a-cookie">' . t("I have a cookie!") . '</div></strong>';
    $info[] = l(t("Come back as @name", array('@name' => $account->name)), 'developer/user/relog');
  }
  if (user_is_logged_in()) {
    $info[] = l(t("Logout"), 'user/logout', $options);
  } else {
    $info[] = l(t("Go to login form"), 'user', $options);
  }
  if (1 != $user->uid && !(isset($uid) && $uid == 1)) {
    $info[] = l(t("Become super user!"), 'developer/user/relog', $options);
  }
  if (devcontrol_access_has_cookie()) {
    $info[] = l(t("Drop cookie (logout)"), 'developer/user/dropcookie', $options);
  }
  foreach ($info as $item) {
    $data['account']['children'][] = array('#markup' => $item);
  }

  // Various links.
  $data['misc'] = array(
    'name' => t("Misc"),
    'children' => array(
      array(
        '#prefix' => '<div class="title">',
        '#suffix' => '</div>',
        '#markup' => t("Misc."),
      ),
    ),
  );
  $info = array();
  $info[] = format_interval(time() - variable_get('install_time'));
  if (devcontrol_access()) {
    $info[] = l(t("Developer"), 'developer/advanced');
  }
  if (user_access('administer site configuration')) {
    $info[] = l(t("Performance"), 'admin/config/development/performance');
  }
  if (user_access('access site reports') && module_exists('dblog')) {
    $info[] = l(t("Logs"), 'admin/reports/dblog');
  }
  if (1 == $user->uid) {
    $info[] = l("update.php", 'update.php', array('absolute' => true));
  }
  if (devcontrol_access()) {
    $info[] = l("cron.php", 'cron.php', array('absolute' => true, 'query' => array('cron_key' => variable_get('cron_key', 'drupal'))));
  }
  foreach ($info as $item) {
    $data['misc']['children'][] = array('#markup' => $item);
  }

  return $data;
}

/**
 * Get cache bin names list.
 *
 * @return array
 *   List of bin names.
 */
function devcontrol_cache_bins_list_get() {

  $cached = cache_get('cache_bins');

  if ($cached && $cached->data) {
    $bins = $cached->data;
  } else {
    foreach (drupal_get_schema() as $name => $table) {
      if (0 === strpos($name, 'cache')) {
        $bins[] = $name;
      }
    }
    cache_set('cache_bins', $bins);
  }

  return $bins;
}

/**
 * Implements hook_html_head_alter().
 */
function devcontrol_html_head_alter(&$elements) {
  if (0 === strpos(current_path(), 'developer')) {
    // For devcontrol pages, alters the favicon.
    foreach ($elements as $key => &$element) {
      // WTF?
      if (false !== strpos($key, 'shortcut icon')) {
        $path = drupal_get_path('module', 'devcontrol') . '/assets/favicon.ico';
        $element['#attributes']['href'] = url($path, array('absolute' => true));
        break;
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function devcontrol_page_alter(&$page) {
  if (0 === strpos(current_path(), 'developer')) {

    // Ensure we have a main content so we can wrap it in our two
    // columns layout.
    $main_content_display = &drupal_static('system_main_content_added', false);

    // Minor display customizations.
    drupal_add_css(drupal_get_path('module', 'devcontrol') . '/devcontrol.menu.css');
    module_load_include('inc', 'system', 'system.admin');

    $menu = system_admin_menu_block_page();
    if (strlen($menu) < 120) {
      return;
    }

    if (!$main_content_display) {
      $page['content']['system_main'] = drupal_set_page_content();
    } if (isset($page['content']['system_main'])) {
      $content = $page['content']['system_main'];
    } else {
      $content = array();
    }

    $page['content'] = array(
      'right' => array(
        '#prefix' => '<div id="devcontrol-page-right">',
        '#suffix' => '</div>',
        '#markup' => $menu,
      ),
      'left' => array(
        '#prefix' => '<div id="devcontrol-page-left">',
        '#suffix' => '</div>',
      ) + $content,
    );
  }
}

/**
 * Implements hook_preprocess_TEMPLATE().
 */
function devcontrol_preprocess_html(&$variables) {
  // In certain specific edge cases (media popups for example) there is no
  // page_top. In most cases this means we actually are working in a popup
  // which means that setting our stuff in here is stupid and useless.
  if (isset($variables['page']['page_top'])) {
    drupal_add_css(drupal_get_path('module', 'devcontrol') . '/assets/devcontrol.css');
    drupal_add_css(drupal_get_path('module', 'devcontrol') . '/assets/theme/' . devcontrol_bar_theme_get() . '.css');
    drupal_add_js(drupal_get_path('module', 'devcontrol') . '/assets/devcontrol.js');
    array_unshift($variables['page']['page_top'], array(
      '#theme' => 'devcontrol_bar',
      '#menus' => devcontrol_bar_get_menus(),
    ));
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_devcontrol_bar(&$variables) {
  $variables['text']  = devcontrol_env_get();
  $variables['menus'] = &$variables['element']['#menus'];
}
