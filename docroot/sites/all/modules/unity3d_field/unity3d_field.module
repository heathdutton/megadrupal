<?php
/**
 * @file
 * Module file for theming Unity3D player content in a web player.
 */

/**
 * Implements hook_menu().
 */
function unity3d_field_menu() {
  // The Unity3D Field settings page.
  $items['admin/config/system/unity3d_field'] = array(
    'title' => 'Unity3D Field Settings',
    'description' => 'Configure Unity3D module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unity3d_field_settings_form'),
    'access arguments' => array('access administration pages'),
  );
  return $items;
}

/**
 * Form constructor for the Unity3D Settings form.
 *
 * Path: admin/config/system/unity3d_field
 *
 * @see unity3d_field_menu()
 * @see unity3d_settings_form_validate()
 * @see unity3d_settings_form_submit()
 * @ingroup forms
 */
function unity3d_field_settings_form($form, $form_state) {
  $form = array();
  // Get the default dimensions.
  $dimensions = variable_get('unity3d_field_dimensions', array(640, 450));
  // Convert the dimensions to a readable string.
  $text_dimensions = $dimensions[0] . 'x' . $dimensions[1];
  // Set the dimensions form item.
  $form['unity3d_field_dimensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Web Player Dimensions'),
    '#size' => 10,
    '#required' => TRUE,
    '#default_value' => $text_dimensions,
    '#description' => t('The default pixel dimensions of the web player (e.g. 640x450). (This may be overridden in the widget formatter for a specific content type.)'),
  );
  // Create a fieldset for default image form items.
  $default_image_path = drupal_get_path('module', 'unity3d_field');
  $default_image_path .= '/images/default_logo.png';
  $image_path = variable_get('unity3d_field_default_image', $default_image_path);
  $alt_text = variable_get('unity3d_field_alt_text', t('Play it!'));
  $form['image'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default image'),
  );
  // Show a preview of the current default image.
  $image = array(
    'path' => file_create_url($image_path),
    'alt' => $alt_text,
    'title' => $alt_text,
    'attributes' => array(),
  );
  $image = theme_image($image);
  $form['image']['unity3d_field_preview'] = array(
    '#type' => 'markup',
    '#markup' =>  $image,
    '#title' => t('Preview'),
  );
  // Set the default image form item.
  $form['image']['unity3d_field_default_image'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Image File Location'),
    '#default_value' => $image_path,
  );
  // Set the alternative text form item.
  $form['image']['unity3d_field_alt_text'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $alt_text,
    '#title' => 'Alternative and Title Text',
  );
  // Set the submit form item.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Form validation for the Unity3D Settings form.
 *
 * @see unity3d_field_menu()
 * @see unity3d_settings_form()
 * @see unity3d_settings_form_submit()
 * @ingroup forms
 */
function unity3d_field_settings_form_validate($form, &$form_state) {
  // Convert the dimensions to an array.
  $dimensions = explode('x', $form_state['values']['unity3d_field_dimensions']);
  // Make sure that the dimensions are valid.
  if ((count($dimensions) != 2) || !is_numeric($dimensions[0]) || !is_numeric($dimensions[1])) {
    $error_msg = t('You must enter valid dimensions to continue.');
    form_set_error('unity3d_field_dimensions', $error_msg);
  }
  else {
    // Set the dimensions value as the array.
    $form_state['values']['unity3d_field_dimensions'] = $dimensions;
  }
  // Make sure that the default image is valid.
  $allowed_extensions = array('image/png', 'image/gif', 'image/jpg');
  if (file_exists($form_state['values']['unity3d_field_default_image'])) {
    $default_image = $form_state['values']['unity3d_field_default_image'];
    if (!in_array(mime_content_type($default_image), $allowed_extensions)) {
      form_set_error('unity3d_field_default_image', t('That is not a valid file type.'));
    }
  }
  else {
    form_set_error('unity3d_field_default_image', t('That file does not exist.'));
  }
}

/**
 * Form submission for the Unity3D Settings form.
 *
 * @see unity3d_field_menu()
 * @see unity3d_settings_form()
 * @see unity3d_settings_form_validate()
 * @ingroup forms
 */
function unity3d_field_settings_form_submit($form, $form_state) {
  // Set module variables to reflect submitted items.
  system_settings_form_submit($form, $form_state);
  // Clear the field cache so that formatter items will be updated.
  cache_clear_all('*', 'cache_field', TRUE);
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function unity3d_field_file_mimetype_mapping_alter(&$mapping) {
  // Map .unity3d files properly so that they can be viewed in the web player.
  if (!isset($mapping['mimetypes']['unity3d'])) {
    $mapping['mimetypes']['unity3d'] = 'application/vnd.unity';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function unity3d_field_preprocess_unity3d_logo(&$variables, $hook) {
  // Load settings for the field.
  $logo_type = $variables['settings']['logo'];
  if ($logo_type == 1) {
    $logo_path = $variables['settings']['image_path'];
  }
  else {
    $default_image = drupal_get_path('module', 'unity3d_field');
    $default_image .= '/images/default_logo.png';
    $logo_path = variable_get('unity3d_field_default_image', $default_image);
  }
  $image_url = file_create_url($logo_path);
  $entity_type = $variables['settings']['entity_type'];
  $entity = $variables['settings']['entity'];
  drupal_add_css('img.unity3d_field_logo_image {clear: both; margin: 4px 8px;}', 'inline');
  foreach ($variables['items'] as &$item) {
    $paths = array();
    // Set the proper url depending upon the entity type.
    // @todo Add other "link to" options in addition to the entity page.
    $uri = entity_uri($entity_type, $entity);
    $paths[0] = $uri['path'];
    $path = $paths[$variables['settings']['link_to']];
    $image = array(
      'path' => $image_url,
      'alt' => $variables['settings']['alt_text'],
      'title' => $variables['settings']['alt_text'],
      'attributes' => array(
        'class' => array('unity3d_field_logo_image'),
      ),
    );
    $image = theme_image($image);
    $image = l(t($image), $path, array('html' => TRUE));
    $item['image'] = $image;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function unity3d_field_preprocess_unity3d_field(&$variables, $hook) {
  // Load settings for the field.
  $x = $variables['settings']['dimensions_x'];
  $y = $variables['settings']['dimensions_y'];
  // Load the necessary JavaScript file from Unity.
  $js_properties = array('type' => 'external', 'weight' => -2);
  drupal_add_js($variables['js_url'], $js_properties);
  // Disable right-clicking in the player.
  $params = '{disableContextMenu: true, disableExternalCall: true, disableFullscreen: true}';
  foreach ($variables['items'] as &$item) {
    // Set the player ID to match the field ID.
    $item['player_id'] = 'unity3d_field_player_window_' . $item['fid'];
    $item['url'] = file_create_url($item['uri']);
    // Add JavaScript to load this instance of the web player.
    $js = 'unityObject.embedUnity("' . $item['player_id'] . '", "' . $item['url'] . '", ';
    $js .= $x . ', ' . $y . ', ' . $params . ', null, null)';
    drupal_add_js($js, 'inline');
  }
}

/**
 * Implements hook_theme().
 */
function unity3d_field_theme($existing, $type, $theme, $path) {
  // Create theme entries for the two Unity3D widgets.
  $js_url = 'http://webplayer.unity3d.com/download_webplayer-3.x/3.0/uo/UnityObject.js';
  return array(
    // Displays the .unity3d file in a web player.
    'unity3d_field' => array(
      'variables' => array(
        'items' => NULL,
        'player_id' => NULL,
        'js_url' => $js_url,
        'attributes' => NULL,
        'settings' => NULL,
      ),
      'template' => 'theme/unity3d_field',
    ),
    // Displays a logo image instead of the web player.
    'unity3d_logo' => array(
      'variables' => array(
        'items' => NULL,
        'player_id' => NULL,
        'attributes' => NULL,
        'settings' => NULL,
      ),
      'template' => 'theme/unity3d_logo',
    ),
  );
}

/**
 * Verifies that an image file exists for the formatter.
 *
 * Checks to see if an image location is a valid path.
 *
 * @param array $element
 *   The file path element.
 * @param array $form_state
 *   The submitted form.
 */
function unity3d_field_validate_image($element, &$form_state) {
  // Make sure that the image exists and is a valid format.
  $value = $element['#value'];
  $allowed_extensions = array(
    'image/png',
    'image/gif',
    'image/jpg',
    'image/jpeg',
  );
  if ($value != '') {
    if (file_exists($value)) {
      if (!in_array(mime_content_type($value), $allowed_extensions)) {
        form_error($element, t('The file is not a valid image.'));
      }
    }
    else {
      form_error($element, t('The file does not exist.'));
    }
  }
}

/**
 * Verifies that a dimension for the web player is within constraints.
 *
 * @param array $element
 *   The file path element.
 * @param array $form_state
 *   The submitted form.
 */
function unity3d_field_element_validate_integer_positive($element, &$form_state) {
  $value = $element['#value'];
  $min = 100;
  $max = 1920;
  if ($value && is_numeric($value) && $value >= $min && $value <= $max) {
    return;
  }
  $values = array(
    '!min' => $min,
    '!max' => $max,
  );
  $error_msg = t('All dimensions must be between !min and !max.', $values);
  form_error($element, check_plain($error_msg));
}


/**
 * Implements hook_field_formatter_view().
 */
function unity3d_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Set necessary variables for the widget to be passed to the themer.
  $element = array();
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  switch ($display['type']) {
    case 'unity3d_display':
      $id = 'unity3d_field-' . $id . '-';
      $id .= str_replace('_', '-', $instance['field_name']);
      $element = array(
        '#theme' => 'unity3d_field',
        '#items' => $items,
        '#player_id' => $id,
        '#settings' => $display['settings'],
      );
      break;

    case 'unity3d_logo':
      $id = 'unity3d_field-' . $id . '-';
      $id .= str_replace('_', '-', $instance['field_name']);
      $display['settings']['entity'] = $entity;
      $display['settings']['entity_type'] = $entity_type;
      $element = array(
        '#theme' => 'unity3d_logo',
        '#settings' => $display['settings'],
        '#player_id' => $id,
        '#items' => $items,
      );
      break;

  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function unity3d_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // Create form for optional field settings.
  $display = $instance['display'][$view_mode];
  $type = $display['type'];
  $settings = $display['settings'];
  $element = array();
  switch ($type) {
    // Options for the web player widget display.
    case 'unity3d_display':
      // Set the width of the web player.
      $element['dimensions_x'] = array(
        '#title' => t('Width'),
        '#type' => 'textfield',
        '#size' => 4,
        '#default_value' => $settings['dimensions_x'],
        '#element_validate' => array('unity3d_field_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      // Set the height of the web player.
      $element['dimensions_y'] = array(
        '#title' => t('Height'),
        '#type' => 'textfield',
        '#size' => 4,
        '#default_value' => $settings['dimensions_y'],
        '#element_validate' => array('unity3d_field_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      break;

    // Options for the logo image widget display.
    case 'unity3d_logo':
      // Set the logo image.
      $default_path = drupal_get_path('module', 'unity3d_field');
      $default_path .= '/images/default_logo.png';
      $image = array(
        'path' => file_create_url($default_path),
        'alt' => t('Launch Unity Player'),
        'title' => t('Launch Unity Player'),
        'attributes' => array(),
      );
      $image = theme_image($image);
      $element['logo'] = array(
        '#title' => t('Image to Display'),
        '#type' => 'radios',
        '#default_value' => $settings['logo'],
        '#options' => array(
          0 => $image,
          1 => t('Use custom image'),
        ),
      );
      // Set the path for a custom image.
      $element['image_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Custom Image Location'),
        '#default_value' => $settings['image_path'],
        '#element_validate' => array('unity3d_field_validate_image'),
      );
      // Decide what you would like the image to link to when clicked.
      $element['link_to'] = array(
        '#title' => t('Link to'),
        '#type' => 'select',
        '#options' => array(
          0 => t('Entity Page'),
        ),
      );
      // Set the alternative text and title of the image for accessibility.
      $description = t('The text to display when someone hovers on the link.');
      $element['alt_text'] = array(
        '#title' => t('Alternate text'),
        '#type' => 'textfield',
        '#default_value' => $settings['alt_text'],
        '#description' => $description,
      );
      break;

  }
  return $element;
}

/**
 * Implements  hook_field_formatter_settings_summary().
 */
function unity3d_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  // Show settings choices for the user to view.
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  // If the web player widget is selected, set the dimension variables (x & y).
  if ($display['type'] == 'unity3d_display') {
    $summary = t('Player Dimensions: @x x @y px', array(
      '@x' => $settings['dimensions_x'],
      '@y' => $settings['dimensions_y'],
    ));
  }
  // If the logo image widget is selected, set the logo path, etc.
  elseif ($display['type'] == 'unity3d_logo') {
    $summary = t('<p>Current logo: </p>');
    $default_image = drupal_get_path('module', 'unity3d_field');
    $default_image .= '/images/default_logo.png';
    $image = variable_get('unity3d_field_default_image', $default_image);
    if ($settings['logo'] == 1) {
      if ($settings['image_path'] !== '') {
        $image = $settings['image_path'];
      }
    }
    $image = array(
      'path' => file_create_url($image),
      'alt' => 'Launch Unity Player',
      'title' => 'Launch Unity Player',
      'attributes' => array(),
    );
    $image = theme_image($image);
    $summary .= '<p>' . $image . '</p>';
    $options = array(
      0 => t('Entity Page'),
    );
    $link_to = array('!link_to' => $options[$settings['link_to']]);
    $summary .= '<p>' . t('Link to: !link_to', $link_to) . '</p>';
    $alt_text = array('!alt_text' => $settings['alt_text']);
    $summary .= '<p>' . t('Alternate text: !alt_text', $alt_text) . '</p>';
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_info().
 */
function unity3d_field_field_formatter_info() {
  // Load default dimensions, logo image, etc.
  $dimensions = variable_get('unity3d_field_dimensions', array(640, 450));
  $default_image_path = drupal_get_path('module', 'unity3d_field');
  $default_image_path .= '/images/default_logo.png';
  $image_path = variable_get('unity3d_field_default_image', $default_image_path);
  return array(
    // Set the default options for the web player widget.
    'unity3d_display' => array(
      'label' => t('Unity3D Player'),
      'field types' => array('file'),
      'description' => t('Display a .unity3d file in a Unity3D player.'),
      'settings' => array(
        'dimensions_x' => $dimensions[0],
        'dimensions_y' => $dimensions[1],
      ),
    ),
    // Set the default options for the logo image widget.
    'unity3d_logo' => array(
      'label' => t('Unity3D Logo'),
      'field types' => array('file'),
      'description' => t('Display the Unity3D logo (useful on teasers).'),
      'settings' => array(
        'logo' => 0,
        'link_to' => 0,
        'alt_text' => variable_get('unity3d_field_alt_text', t('Play it!')),
        'image_path' => $image_path,
      ),
    ),
  );
}
