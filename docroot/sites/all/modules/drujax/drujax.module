<?php

/**
 * @file
 * Drujax module
 *
 * Drujax adds a seperate page--drujax.tpl.php file which is rendered
 * on ajax requests without html.tpl.php and page.tpl.php.
 * Everything stays the same on normal page requests.
 */

/**
 * Implements hook_help().
 */
function drujax_help($path) {
  switch ($path) {
    case 'admin/help#drujax':
      // Return a line-break version of the module README.txt.
      return check_markup(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_menu().
 */
function drujax_menu() {
  $items['admin/config/user-interface/drujax'] = array(
    'title' => 'Drujax settings',
    'description' => 'Configure settings related to drujax',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drujax_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID().
 */
function drujax_settings_form() {
  $form['drujax_wrapper'] = array(
    '#type' => 'textfield',
    '#title' => 'Content wrapper id',
    '#default_value' => variable_get('drujax_wrapper', 'drujax-main'),
  );
  $form['drujax_link_selector'] = array(
    '#type' => 'textfield',
    '#title' => 'Link selector',
    '#description' => 'Value for the jquery link selector. For example "a" for all links and a more specific selector could be "#nav a.my-class:not(.dont-select-this), a.link".',
    '#default_value' => variable_get('drujax_link_selector', 'a'),
  );
  $form['drujax_filter_type'] = array(
    '#type' => 'radios',
    '#title' => t('Load drujax js on specific pages'),
    '#options' => array(
      '0' => t('All pages except those listed'),
      '1' => t('Only the listed pages'),
    ),
    '#default_value' => variable_get('drujax_filter_type', '0'),
  );
  $form['drujax_paths'] = array(
    '#type' => 'textarea',
    '#default_value' => variable_get('drujax_paths', ''),
    '#description' => t('Specify pages by using their paths. Enter one path per line. The "*" character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog. <front> is the front page.'),
  );
  $form['drujax_handler'] = array(
    '#type' => 'select',
    '#title' => t('Animation presets'),
    '#options' => array(
      'none' => t('No animation'),
      'from_top' => t('Slide from top'),
      'from_bottom' => t('Slide from bottom'),
      'from_left' => t('Slide from left'),
      'from_right' => t('Slide from right'),
      'fade' => t('Fade'),
    ),
    '#default_value' => variable_get('drujax_handler', 'none'),
    '#description' => t('Select a preset or create your own js ajax handler with Drujax.setHandler()'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function drujax_theme() {
  return array(
    'html__drujax' => array(
      'variables' => array('content' => NULL, 'messages' => NULL),
      'template' => 'theme/html--drujax',
    ),
    'page__drujax' => array(
      'variables' => array('content' => NULL, 'messages' => NULL),
      'template' => 'theme/page--drujax',
    ),
    'content' => array(
      'variables' => array('content' => NULL, 'messages' => NULL),
      'template' => 'theme/content',
    ),
  );
}

/**
 * Implements hook_preprocess_html().
 */
function drujax_preprocess_html(&$vars) {
  // Add the custom ajax variables.
  $vars['drujax_vars'] = drujax_var();
  // Pass the wrapper id selector to the html.tpl.
  $vars['drujax_wrapper'] = '#' . variable_get('drujax_wrapper', 'drujax-main');

  // If is ajax request use the html--drujax.tpl.php.
  // Json encoding happens in html-drujax.tpl.php.
  if (drujax_is_ajax()) {
    $vars['theme_hook_suggestions'] = array('html__drujax');
  }
}

/**
 * Implements hook_process_page().
 */
function drujax_process_page(&$vars) {
  // If is ajax request use the page--drujax.tpl.php.
  // Page--drujax.tpl.php only prints out the $content variable.
  if (drujax_is_ajax()) {
    // Use the correct content-type for json.
    drupal_add_http_header('Content-type', 'application/json');
    $vars['theme_hook_suggestions'] = array('page__drujax');
  }

  if (module_exists('libraries')) {
    $address_path = libraries_get_path('jquery_address');
    if ($address_path) {
      if (file_exists($address_path . '/jquery.address.min.js')) {
        $address_include = $address_path . '/jquery.address.min.js';
      }
    }
  }

  if (!empty($address_include) && drujax_is_restricted()) {
    // Add path restrictions as js var.
    $restricted = json_encode(array(
        'type' => variable_get('drujax_filter_type'),
        'patterns' => drujax_pathpatterns(),
    ));
    // Get the wrapper selector.
    $wrapper = variable_get('drujax_wrapper', 'drujax-main');
    // Add jquery address.
    drupal_add_js($address_include);
    // Add Drujax library.
    drupal_add_js(drupal_get_path('module', 'drujax') . '/js/drujax.js');
    // Configure Drujax library.
    drupal_add_js(array(
      'drujax' => array(
        'wrapper' => '#' . $wrapper,
        'restricted' => $restricted,
        'handler' => variable_get('drujax_handler', 'none'),
        'link' => variable_get('drujax_link_selector', 'a'),
      ),
    ), 'setting');
  }

  // Tell user to add jquery.address if it's not in libraries.
  if (empty($address_include)) {
    drupal_set_message(t('Add jquery.address.min.js to /sites/all/libraries/jquery_address/'));
  }

  // Render the content.tpl.php file and wrap it in a drujax-main container.
  $vars['content'] = drujax_wrap(theme('content', $vars));
}

/**
 * Add or read vars that will be passed to the json response.
 *
 * @params string $var_name
 *   The key for the variable you want to add.
 *
 * @param {string|array] $new_val
 *   The value for the variable you want to add.
 *
 * @return array
 *   The array that will be parsed as a json object in the html-drujax.tpl.php.
 */
function drujax_var($var_name = NULL, $new_val = NULL) {
  $vars = &drupal_static(__FUNCTION__, array());

  // If a new value has been passed.
  if ($var_name && $new_val) {
    $vars[$var_name] = $new_val;
  }

  return $vars;
}

/**
 * Check if the current request is an ajax request.
 *
 * @return bool
 *   Returns true if ajax request
 */
function drujax_is_ajax() {
  return isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
}

/**
 * Get pathpatterns as array.
 *
 * @return array
 *   Returns all path patterns as an array
 */
function drujax_pathpatterns() {
  $paths = variable_get('drujax_paths', '');
  return preg_split('/\n|\r/', $paths, -1, PREG_SPLIT_NO_EMPTY);
};

/**
 * Check if drujax is restricted for the current page.
 *
 * @return bool
 *   Retruns true if drujax is restricted on the current path
 */
function drujax_is_restricted() {
  // Split paths string on line endings.
  $patterns = drujax_pathpatterns();

  // Get the current path.
  $path = request_uri();

  // Check the page restriction type.
  $filter_type = variable_get('drujax_filter_type', '0') == '0';

  // Set default Boolean value base on filter_type
  $path_restricted = $filter_type;
  // Check $patterns against the current path.
  foreach ($patterns as $path_pattern) {
    $path_pattern = str_replace('<front>', '', $path_pattern);
    if (drupal_match_path($path, '/' . $path_pattern)) {
      // Match set value based on the $filter_type.
      $path_restricted = !$filter_type;
    }
  }
  return $path_restricted;
}

/**
 * Add wrapper div to the content.
 *
 * @param string $content
 *   The content to be wrapped.
 *
 * @return string
 *   The wrapped content
 */
function drujax_wrap($content) {
  $id = str_replace('#', '', variable_get('drujax_wrapper', '#drujax-main'));
  return '<div id="' . $id . '">' . $content . '</div>';
}
