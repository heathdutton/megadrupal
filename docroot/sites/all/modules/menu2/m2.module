<?php

require_once 'm2.constants.inc';
require_once 'm2.api.inc';

/**
 * Implements hook_menu
 */

function m2_menu() {
  $items[M2_PATH_ADM_MENU2] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Menu2',
    'page callback' => 'm2_admin_manage_tab',
    'page arguments' => array(4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2, 4),
    'description' => 'Add new menu2 to your site, edit existing menu2, and rename and reorganize menu2 items.',
    'file' => 'm2.admin.tab.manage.inc',
    'm2_body_class' => array('m2-page'),
  );
  $items[M2_PATH_ADM_MENU2_TAB_MANAGE] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Manage',
    'm2_body_class' => array('m2-page'),
  );
  $items[M2_PATH_ADM_MENU2_TAB_GARBAGE] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Garbage',
    'page callback' => 'm2_admin_garbage_tab',
    'page arguments' => array(4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_TAB_GARBAGE, 4),
    'file' => 'm2.admin.tab.garbage.inc',
    'm2_body_class' => array('m2-page'),
    'weight' => 1,
  );
  $items[M2_PATH_ADM_MENU2_TAB_SECURITY] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Security',
    'page callback' => 'm2_admin_security_page',
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_TAB_SECURITY),
    'file' => 'm2.admin.tab.security.inc',
    'm2_body_class' => array('m2-page'),
    'weight' => 2,
  );
  $items[M2_PATH_ADM_MENU2_TAB_SETTINGS] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Settings',
    'page callback' => 'm2_admin_settings_page',
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_TAB_SETTINGS),
    'file' => 'm2.admin.tab.settings.inc',
    'm2_body_class' => array('m2-page'),
    'weight' => 3,
  );
  $items[M2_PATH_ADM_MENU2_MANAGE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Manage Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_menu_manage_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_MANAGE, 4),
    'file' => 'm2.admin.tab.manage.inc',
    'm2_body_class' => array('m2-page'),
  );
  $items[M2_PATH_ADM_MENU2_REMOVE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Remove Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_menu_remove_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_REMOVE, 4),
    'file' => 'm2.admin.tab.manage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_REMOVE_TO_GARBAGE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Remove Menu to Garbage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_garbage_menu_remove_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_REMOVE_TO_GARBAGE, 4),
    'file' => 'm2.admin.tab.garbage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_RESTORE_FROM_GARBAGE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Restore Menu from Garbage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_garbage_menu_restore_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_RESTORE_FROM_GARBAGE, 4),
    'file' => 'm2.admin.tab.garbage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_ITEM_MANAGE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Manage Item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_item_manage_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_ITEM_MANAGE, 4),
    'file' => 'm2.admin.tab.manage.inc',
    'm2_body_class' => array('m2-page'),
  );
  $items[M2_PATH_ADM_MENU2_ITEM_REMOVE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Remove Item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_item_remove_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_ITEM_REMOVE, 4),
    'file' => 'm2.admin.tab.manage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_ITEM_REMOVE_TO_GARBAGE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Remove Item to Garbage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_garbage_item_remove_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_ITEM_REMOVE_TO_GARBAGE, 4),
    'file' => 'm2.admin.tab.garbage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_ITEM_RESTORE_FROM_GARBAGE] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Restore Item from Garbage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_garbage_item_restore_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_ITEM_RESTORE_FROM_GARBAGE, 4),
    'file' => 'm2.admin.tab.garbage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_CLEAR_MENUS] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Clear Garbage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_garbage_clear_menus_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_CLEAR_MENUS),
    'file' => 'm2.admin.tab.garbage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_CLEAR_ITEMS] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Clear Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('m2_admin_garbage_clear_items_confirm_form', 4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_CLEAR_ITEMS, 4),
    'file' => 'm2.admin.tab.garbage.inc',
    'm2_body_class' => array('m2-page', 'm2-confirmation-page'),
  );
  $items[M2_PATH_ADM_MENU2_ITEM_ON_OFF] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'On/Off Item',
    'page callback' => 'm2_admin_item_on_off_page',
    'page arguments' => array(4),
    'access callback' => 'm2_check_access',
    'access arguments' => array(M2_PATH_ADM_MENU2_ITEM_ON_OFF, 4),
    'file' => 'm2.admin.tab.manage.inc',
    'm2_body_class' => array('m2-page'),
  );
  return $items;
}


function m2_check_access($url, $object_id = null) {
  switch ($url) {
    case M2_PATH_ADM_MENU2 /* + _TAB_MANAGE */       : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && $object_id == null) || (user_access('manage own menu2') && m2_check_ownership('m', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_TAB_GARBAGE               : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && $object_id == null) || (user_access('manage own menu2') && m2_check_ownership('m', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_TAB_SECURITY              : if (user_access('administer menu2')) return true; break;
    case M2_PATH_ADM_MENU2_TAB_SETTINGS              : if (user_access('administer menu2')) return true; break;
    case M2_PATH_ADM_MENU2_MANAGE                    : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('m', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_REMOVE                    : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('m', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_REMOVE_TO_GARBAGE         : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('m', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_RESTORE_FROM_GARBAGE      : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('m', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_CLEAR_MENUS               : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2'))) return true; break;
    case M2_PATH_ADM_MENU2_CLEAR_ITEMS               : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('m', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_ITEM_MANAGE               : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('i', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_ITEM_REMOVE               : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('i', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_ITEM_REMOVE_TO_GARBAGE    : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('i', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_ITEM_RESTORE_FROM_GARBAGE : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('i', $object_id))) return true; break;
    case M2_PATH_ADM_MENU2_ITEM_ON_OFF               : if (user_access('administer menu2') || user_access('manage all menu2') || (user_access('manage own menu2') && m2_check_ownership('i', $object_id))) return true; break;
  }
}


function m2_check_ownership($object_type, $object_id) {
  switch ($object_type) {
    case 'm':
      $m_info = m2_api_menu_select_by_name($object_id);
      if (isset($m_info->owner_uid) && $GLOBALS['user']->uid == $m_info->owner_uid) {
        return true;
      }
    case 'i':
      $i_info = m2_api_item_select($object_id);
      if (isset($i_info->m2_name)) {
        $m_info = m2_api_menu_select_by_name($i_info->m2_name);
        if (isset($m_info->owner_uid) && $GLOBALS['user']->uid == $m_info->owner_uid) {
          return true;
        }
      }
  }
}


/**
 * Implements hook_permission
 */

function m2_permission() {
  return array(
    'administer menu2' => array(
      'title' => t('Administer Menu2'),
      'security_warning_for_anonymous'     => true,
      'security_warning_for_authenticated' => true,
      'description' => t('This permission give you access to all Menu2 administer pages.').M2_HTM_TAG_NEW_LINE.
                       t('Only this role can access to tabs Security and Settings.'),
    ),
    'manage all menu2' => array(
      'title' => t('Manage All Menu2'),
      'security_warning_for_anonymous'     => true,
      'security_warning_for_authenticated' => true,
      'description' => t('This permission give you access to Manage All Menu2. You can:').M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('insert new Menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('update all Menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('remove all Menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('insert Items in all menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('update Items in all menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('remove Items in all menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('disable/enable Items in all menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('restore all Menus from garbage').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('restore all Items from garbage (for all Menus)').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('clearing all garbage').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('view build time').'.',
    ),
    'manage own menu2' => array(
      'title' => t('Manage Own Menu2'),
      'security_warning_for_anonymous'     => true,
      'security_warning_for_authenticated' => true,
      'description' => t('This permission give you access to Manage Own Menu2. You can:').M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('insert new Menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('update own Menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('remove own Menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('insert Items in own menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('update Items in own menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('remove Items in own menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('disable/enable Items in own menus').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('restore own Menus from garbage').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('restore all Items from garbage (for own Menus)').';'.M2_HTM_TAG_NEW_LINE.
                       M2_HTM_EM_DASH.' '.t('clearing own garbage').'.',
    ),
  );
}


/**
 * Implements hook_help
 */

function m2_help($path, $arg) {
  $permissions = m2_permission();
  switch ($path) {
    case M2_PATH_ADM_MENU2_CLEAR_MENUS:
      if (user_access('administer menu2')) {
        return t('You have permission %permission and you can clear Garbage for ALL Menus!', array('%permission' => $permissions['administer menu2']['title']));
      }
      if (user_access('manage all menu2')) {
        return t('You have permission %permission and you can clear Garbage for ALL Menus!', array('%permission' => $permissions['manage all menu2']['title']));
      }
   }
}


/**
 * Implements hook_theme
 */

function m2_theme() {
  return array(
    'm2_tree_simple' => array(
      'variables' => array('flat_tree' => array()),
    ),
    'm2_tree' => array(
      'variables' => array('flat_tree', 'm2_name' => null),
    ),
    'm2_tree_levels_recursive' => array(
      'variables' => array('tree', 'options' => array()),
    ),
    'm2_title' => array(
      'variables' => array('type' => 'div', 'class' => array(), 'title' => '', 'markup' => ''),
      'path' => drupal_get_path('module', 'm2').'/templates',
      'template' => 'm2-title',
    ),
    'm2_meta_info' => array(
      'variables' => array('owner_name', 'date_created'),
      'path' => drupal_get_path('module', 'm2').'/templates',
      'template' => 'm2-meta-info',
    ),
    'm2_content_wrapper' => array(
      'variables' => array('type' => 'div', 'class' => array(), 'markup' => ''),
      'path' => drupal_get_path('module', 'm2').'/templates',
      'template' => 'm2-content-wrapper',
    ),
  );
}


/**
 * Implements hook_preprocess_html
 */

function m2_preprocess_html(&$vars) {
  $all_items = m2_menu();
  $active_item = menu_get_item();
  $is_m2_page = false;
  $is_m2_block_configure_page = isset($active_item['path'])              && $active_item['path'] == 'admin/structure/block/manage/%/%/configure' &&
                                isset($active_item['page_arguments'][1]) && $active_item['page_arguments'][1] == 'm2';
  if (isset($active_item['path'])) {
    foreach ($all_items as $path => $item_info) {
      if ($path == $active_item['path']) {
        if (isset($item_info['m2_body_class'])) {
          if (is_array($vars['classes_array']) == false) $vars['classes_array'] = array();
          $vars['classes_array'] = array_merge($vars['classes_array'], $item_info['m2_body_class']);
        }
        $is_m2_page = true;
        break;
      }
    }
  }
  if ($is_m2_page || $is_m2_block_configure_page) {
    $module_path = drupal_get_path('module', 'm2');
    drupal_add_css("$module_path/css/m2_Manage.css");
    drupal_add_css("$module_path/css/m2_Manage-ie-7.css", array('group' => CSS_THEME, 'browsers' => array('IE' => 'IE 7', '!IE' => false), 'preprocess' => false));
    drupal_add_css("$module_path/css/m2_Manage-ie-8.css", array('group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => false), 'preprocess' => false));
    drupal_add_js("$module_path/js/m2_Shared.js");
    drupal_add_js("$module_path/js/m2_Manage.js");
  }
}


/**
 * Implements hook_preprocess_page
 */

function m2_preprocess_page(&$vars) {
  if (variable_get('m2_hide_built_in_breadcrumb', false)) {
    $vars['breadcrumb'] = '';
  }
}


/**
 * Implements hook_preprocess_block
 */

function m2_preprocess_block(&$vars) {
  if ($vars['block']->module == 'm2') {
    list($block_type, $block_id) = explode('__', $vars['block']->delta);
    $vars['classes_array'][]= "block-m2-$block_type";
  }
}


/**
 * Implements hook_init
 */

function m2_init() {
  $external_attributes = m2_get_external_attributes();
  foreach ($external_attributes as $module_name => $c_schema) {
    if (isset($c_schema['m2_items']['fields'])) {
      foreach (array_keys($c_schema['m2_items']['fields']) as $field_name) {
        if (!in_array($field_name, $GLOBALS['M2_ITEM_FIELDS'])) {
          $GLOBALS['M2_ITEM_FIELDS'][]= $field_name;
        }
      }
    }
    if (isset($c_schema['m2']['fields'])) {
      foreach (array_keys($c_schema['m2']['fields']) as $field_name) {
        if (!in_array($field_name, $GLOBALS['M2_FIELDS'])) {
          $GLOBALS['M2_FIELDS'][]= $field_name;
        }
      }
    }
  }
/* database update warning */
  if (m2_get_schema_version() < M2_CURRENT_SCHEMA_VERSION) {
    drupal_set_message(t('Menu2 module needs updating database!'), 'warning');
    $_SESSION['messages']['warning'] = array_unique($_SESSION['messages']['warning']);
  }
}


/**
 * Implements hook_block_info
 * Implements hook_block_configure
 * Implements hook_block_save
 * Implements hook_block_view
 * m2_source_parse
 */

function m2_block_info() {
  $blocks = array();
/* blocks for menus */
  for ($i = 1; $i <= variable_get('m2_block_menu_num', M2_BLOCK_MENU_DEFAULT_NUM); $i++) {
    $description = variable_get("m2_block_menu_description_$i");
    $source = variable_get("m2_block_menu_source_$i");
    $source_info = m2_source_parse($source);
    $states = array();
    if ($source_info->m2) {
      if ($source_info->m2->is_system)   $states[] = t('system');
      if ($source_info->m2->is_disabled) $states[] = t('disabled');
      if ($source_info->m2->is_removed)  $states[] = t('removed');
    };
    $blocks["menu__$i"]['cache'] = DRUPAL_NO_CACHE;
    $blocks["menu__$i"]['info'] = $source_info->m2 ?
      t('Menu2 block #!num (source = !src | states = !states)', array('!num' => $i, '!src' => $source, '!states' => count($states) ? implode(', ', $states) : t(M2_TXT_NA))) :
      t('Menu2 block #!num', array('!num' => $i));
    if ($description) {
      $blocks["menu__$i"]['info'].= " --- $description";
    }
  }
/* blocks for multiple menus */
  for ($i = 1; $i <= variable_get('m2_block_menu_multi_num', M2_BLOCK_MENU_MULTI_DEFAULT_NUM); $i++) {
    $description = variable_get("m2_block_menu_multi_description_$i");
    $source = variable_get("m2_block_menu_multi_source_$i");
    $blocks["menu_multi__$i"]['cache'] = DRUPAL_NO_CACHE;
    $blocks["menu_multi__$i"]['info'] =
      t('Menu2-multi block #!num (is init = !txt_init_state)', array('!num' => $i, '!txt_init_state' => $source ? t('yes') : t('no')));
    if ($description) {
      $blocks["menu_multi__$i"]['info'].= " --- $description";
    }
  }
/* blocks for previous and next links */
  for ($i = 1; $i <= variable_get('m2_block_prev_next_links_num', M2_BLOCK_PREV_NEXT_LINKS_DEFAULT_NUM); $i++) {
    $description = variable_get("m2_block_prev_next_links_description_$i");
    $source = variable_get("m2_block_prev_next_links_source_$i");
    $source_info = m2_source_parse($source);
    $states = array();
    if ($source_info->m2) {
      if ($source_info->m2->is_system)   $states[] = t('system');
      if ($source_info->m2->is_disabled) $states[] = t('disabled');
      if ($source_info->m2->is_removed)  $states[] = t('removed');
    };
    $blocks["prev_next_links__$i"]['cache'] = DRUPAL_NO_CACHE;
    $blocks["prev_next_links__$i"]['info'] = $source_info->m2 ?
      t('Menu2 Previous and Next links block #!num (source = !src | states = !states)', array('!num' => $i, '!src' => $source, '!states' => count($states) ? implode(', ', $states) : t(M2_TXT_NA))) :
      t('Menu2 Previous and Next links block #!num', array('!num' => $i));
    if ($description) {
      $blocks["prev_next_links__$i"]['info'].= " --- $description";
    }
  }
/* breadcrumbs for menus */
  for ($i = 1; $i <= variable_get('m2_block_breadcrumb_num', M2_BLOCK_BREADCRUMB_DEFAULT_NUM); $i++) {
    $description = variable_get("m2_block_breadcrumb_description_$i");
    $source = variable_get("m2_block_breadcrumb_source_$i");
    $source_info = m2_source_parse($source);
    $states = array();
    if ($source_info->m2) {
      if ($source_info->m2->is_system)   $states[] = t('system');
      if ($source_info->m2->is_disabled) $states[] = t('disabled');
      if ($source_info->m2->is_removed)  $states[] = t('removed');
    };
    $blocks["breadcrumb__$i"]['cache'] = DRUPAL_NO_CACHE;
    $blocks["breadcrumb__$i"]['info'] = $source_info->m2 ?
      t('Menu2 Breadcrumb block #!num (source = !src | states = !states)', array('!num' => $i, '!src' => $source, '!states' => count($states) ? implode(', ', $states) : t(M2_TXT_NA))) :
      t('Menu2 Breadcrumb block #!num', array('!num' => $i));
    if ($description) {
      $blocks["breadcrumb__$i"]['info'].= " --- $description";
    }
  }
  return $blocks;
}


function m2_block_configure($full_id) {
  $form['m2_block_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu2 block settings'),
  );
  list($block_type, $block_id) = explode('__', $full_id);
  $link_to_create_page = l(t('Create new one!'), M2_PATH_ADM_MENU2_TAB_MANAGE, array('attributes' => array('target' => '_blank')));
  switch ($block_type) {
    case 'menu':
      $form['m2_block_settings']['m2_block_description'] = array(
        '#type' => 'textfield',
        '#title' => t('Small description for administrator'),
        '#default_value' => variable_get("m2_block_menu_description_$block_id"),
        '#description' => t('Maximum !num characters.', array('!num' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH)),
        '#maxlength' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH,
      );
      $items = m2_form_get_root_options();
      if (count($items)) {
        $form['m2_block_settings']['is_can_save_menu_settings'] = array(
          '#type' => 'value',
          '#value' => true,
        );
        $form['m2_block_settings']['m2_block_menu_source'] = array(
          '#type' => 'select', 
          '#title' => t('Root item'), 
          '#options' => $items,
          '#default_value' => variable_get("m2_block_menu_source_$block_id"),
          '#required' => true,
        );
        $form['m2_block_settings']['m2_block_menu_depth'] = array(
          '#type' => 'select',
          '#title' => t('Menu Depth'),
          '#options' => drupal_map_assoc(range(0, M2_BLOCK_MENU_MAX_DEPTH)),
          '#default_value' => variable_get("m2_block_menu_depth_$block_id", 0),
          '#description' => t('If = 0, then ignored depth restrictions.'),
          '#required' => true,
        );
      } else {
        $form['m2_block_settings']['m2_block_no_items_message'] = array(
          '#markup' => t('No menus. !link', array('!link' => $link_to_create_page)),
        );
      }
      break;
    case 'menu_multi':
      $form['m2_block_settings']['m2_block_description'] = array(
        '#type' => 'textfield',
        '#title' => t('Small description for administrator'),
        '#default_value' => variable_get("m2_block_menu_multi_description_$block_id"),
        '#description' => t('Maximum !num characters.', array('!num' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH)),
        '#maxlength' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH,
      );
      $menu_all = m2_api_menu_select_all(null, M2_WITH_SYSTEM_ON, M2_WITH_REMOVED_ON);
      if (count($menu_all)) {
        $items = array();
        foreach ($menu_all as $c_menu) {
          $states = array();
          if ($c_menu->is_disabled) $states[] = t('disabled');
          if ($c_menu->is_removed)  $states[] = t('removed');
          $items[$c_menu->m2_name] = $c_menu->title.(count($states) ? ' | '.implode(', ', $states) : '');
        }
        $form['m2_block_settings']['is_can_save_menu_settings'] = array(
          '#type' => 'value',
          '#value' => true,
        );
        $form['m2_block_settings']['m2_block_menu_multi_source'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Menus to show'),         
          '#options' => $items,
          '#default_value' => variable_get("m2_block_menu_multi_source_$block_id", array()),
          '#description' => count($items) == 0 ? t('No menus. !link', array('!link' => $link_to_create_page)) : '',
        );
        $form['m2_block_settings']['m2_block_menu_multi_source_is_invert'] = array(
          '#type' => 'checkbox',
          '#title' => t('invert values (will show not selected items)'),         
          '#default_value' => variable_get("m2_block_menu_multi_source_is_invert_$block_id"),
        );
      } else {
        $form['m2_block_settings']['m2_block_no_items_message'] = array(
          '#markup' => t('No menus. !link', array('!link' => $link_to_create_page)),
        );
      }
      break;
    case 'prev_next_links':
      $form['m2_block_settings']['m2_block_description'] = array(
        '#type' => 'textfield',
        '#title' => t('Small description for administrator'),
        '#default_value' => variable_get("m2_block_prev_next_links_description_$block_id"),
        '#description' => t('Maximum !num characters.', array('!num' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH)),
        '#maxlength' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH,
      );
      $root_options = m2_form_get_root_options(false);
      if (count($root_options)) {
        $form['m2_block_settings']['is_can_save_menu_settings'] = array(
          '#type' => 'value',
          '#value' => true,
        );
        $form['m2_block_settings']['m2_block_prev_next_links_source'] = array(
          '#type' => 'select', 
          '#title' => t('Source Menu'), 
          '#options' => $root_options,
          '#default_value' => variable_get("m2_block_prev_next_links_source_$block_id"),
          '#required' => true,
        );
      } else {
        $form['m2_block_settings']['m2_block_no_items_message'] = array(
          '#markup' => t('No menus. !link', array('!link' => $link_to_create_page)),
        );
      }
      break;
    case 'breadcrumb':
      $form['m2_block_settings']['m2_block_description'] = array(
        '#type' => 'textfield',
        '#title' => t('Small description for administrator'),
        '#default_value' => variable_get("m2_block_breadcrumb_description_$block_id"),
        '#description' => t('Maximum !num characters.', array('!num' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH)),
        '#maxlength' => M2_BLOCK_ADMIN_DESCRIPTION_MAX_LENGTH,
      );
      $root_options = m2_form_get_root_options(false);
      if (count($root_options)) {
        $form['m2_block_settings']['is_can_save_menu_settings'] = array(
          '#type' => 'value',
          '#value' => true,
        );
        $form['m2_block_settings']['m2_block_breadcrumb_source'] = array(
          '#type' => 'select', 
          '#title' => t('Source Menu'), 
          '#options' => $root_options,
          '#default_value' => variable_get("m2_block_breadcrumb_source_$block_id"),
          '#required' => true,
        );
      } else {
        $form['m2_block_settings']['m2_block_no_items_message'] = array(
          '#markup' => t('No menus. !link', array('!link' => $link_to_create_page)),
        );
      }
      break;
  }
  return $form;
}


function m2_block_save($full_id, $edit) {
  list($block_type, $block_id) = explode('__', $full_id);
  switch ($block_type) {
    case 'menu':
      variable_set("m2_block_menu_description_$block_id", $edit['m2_block_description']);
      if (isset($edit['is_can_save_menu_settings'])) {
        variable_set("m2_block_menu_source_$block_id", $edit['m2_block_menu_source']);
        variable_set("m2_block_menu_depth_$block_id", $edit['m2_block_menu_depth']);
      }
      break;
    case 'menu_multi':
      variable_set("m2_block_menu_multi_description_$block_id", $edit['m2_block_description']);
      if (isset($edit['is_can_save_menu_settings'])) {
        variable_set("m2_block_menu_multi_source_$block_id", array_filter($edit['m2_block_menu_multi_source']));
        variable_set("m2_block_menu_multi_source_is_invert_$block_id", $edit['m2_block_menu_multi_source_is_invert']);
      }
      break;
    case 'prev_next_links':
      variable_set("m2_block_prev_next_links_description_$block_id", $edit['m2_block_description']);
      if (isset($edit['is_can_save_menu_settings'])) {
        variable_set("m2_block_prev_next_links_source_$block_id", $edit['m2_block_prev_next_links_source']);
      }
      break;
    case 'breadcrumb':
      variable_set("m2_block_breadcrumb_description_$block_id", $edit['m2_block_description']);
      if (isset($edit['is_can_save_menu_settings'])) {
        variable_set("m2_block_breadcrumb_source_$block_id", $edit['m2_block_breadcrumb_source']);
      }
      break;
  }
}


function m2_block_view($full_id) {
  $output = '';
  list($block_type, $block_id) = explode('__', $full_id);
  $time_0 = microtime(true);
  switch ($block_type) {
    case 'menu':
      if ($block_id <= variable_get('m2_block_menu_num', M2_BLOCK_MENU_DEFAULT_NUM)) {
        $source = variable_get("m2_block_menu_source_$block_id");
        $source_info = m2_source_parse($source);
        $depth = variable_get("m2_block_menu_depth_$block_id", M2_BLOCK_MENU_MAX_DEPTH);
        if ($source_info->m2 &&
            $source_info->m2->is_disabled == false &&
            $source_info->m2->is_removed == false) {
          if ($source_info->m2_item) {
            $flat_tree = m2_api_item_select_children($source_info->m2_item->item_id, $depth, $source_info->m2_item->depth + 1);
          } else {
            $flat_tree = m2_api_item_select_by_menu_all($source_info->m2->m2_name, $depth);
          }
          if (count($flat_tree)) {
            $output.= theme('m2_tree', array('flat_tree' => $flat_tree, 'm2_name' => $source_info->m2->m2_name));
          }
          if (user_access('administer menu2') ||
              user_access('manage all menu2') ||
             (user_access('manage own menu2') && m2_check_ownership('m', $source_info->m2->m2_name))) {
            $output.= l(t('edit menu'), M2_PATH_ADM_MENU2_TAB_MANAGE.'/'.$source_info->m2->m2_name, array('attributes' => array('class' => array('link-menu-edit'))));
          }
          $block['subject'] = $source_info->m2->title;
        }
      }
      break;
    case 'menu_multi':
      if ($block_id <= variable_get('m2_block_menu_multi_num', M2_BLOCK_MENU_MULTI_DEFAULT_NUM)) {
        $source = variable_get("m2_block_menu_multi_source_$block_id");
        $source_is_invert = variable_get("m2_block_menu_multi_source_is_invert_$block_id");
        $menu_all = array();
        if (count($source)) {
          $menu_all = m2_api_menu_select_universal(array(array('field' => 'm.m2_name',     'value' => array_keys($source), 'condition' => $source_is_invert ? 'not in' : 'in'),
                                                         array('field' => 'm.is_disabled', 'value' => 0),
                                                         array('field' => 'm.is_removed',  'value' => 0)));
        } else if ($source_is_invert) {
          $menu_all = m2_api_menu_select_universal(array(array('field' => 'm.is_disabled', 'value' => 0),
                                                         array('field' => 'm.is_removed',  'value' => 0)));
        }
        foreach ($menu_all as $c_menu) {
          if ($c_menu->total_items_num) {
            $flat_tree = m2_api_item_select_by_menu_all($c_menu->m2_name);
            if (count($flat_tree)) {
              $output.= theme('m2_content_wrapper', array('class' => array('m2'), 'markup' => 
                theme('m2_title', array('type' => 'h2', 'class' => array('m2-title'), 'markup' => $c_menu->title)).
                theme('m2_tree', array('flat_tree' => $flat_tree, 'm2_name' => $c_menu->m2_name))              
              ));
            }
          }
        }
      }
      break;
    case 'prev_next_links':
      if ($block_id <= variable_get('m2_block_prev_next_links_num', M2_BLOCK_PREV_NEXT_LINKS_DEFAULT_NUM)) {
        $source = variable_get("m2_block_prev_next_links_source_$block_id");
        $source_info = m2_source_parse($source);
        if ($source_info->m2 &&
            $source_info->m2->is_disabled == false &&
            $source_info->m2->is_removed == false) {
          $active_item = m2_api_item_select_active($source_info->m2->m2_name);
          if ($active_item) {
            $item_prev = m2_api_item_select_prev($active_item->item_id, M2_WITH_REMOVED_OFF, M2_WITH_DISABLED_OFF, M2_SKIP_WITHOUT_URL_ON);
            $item_next = m2_api_item_select_next($active_item->item_id, M2_WITH_REMOVED_OFF, M2_WITH_DISABLED_OFF, M2_SKIP_WITHOUT_URL_ON);
            $link_prev = $item_prev ? l($item_prev->title ? $item_prev->title : M2_TXT_NA, $item_prev->url, array('html' => true, 'attributes' => array('class' => array('link-prev')))) : '';
            $link_next = $item_next ? l($item_next->title ? $item_next->title : M2_TXT_NA, $item_next->url, array('html' => true, 'attributes' => array('class' => array('link-next')))) : '';
            if ($link_prev || $link_next) {
              $output.= theme('m2_content_wrapper', array('class' => array('link-prev-next-wrapper', 'clearfix'), 'markup' =>
                theme('m2_content_wrapper', array('class' => array('link-prev-wrapper'), 'markup' => $link_prev)).
                theme('m2_content_wrapper', array('class' => array('link-next-wrapper'), 'markup' => $link_next))
              ));
            }
          }
        }
      }
      break;
    case 'breadcrumb':
      if ($block_id <= variable_get('m2_block_breadcrumb_num', M2_BLOCK_BREADCRUMB_DEFAULT_NUM)) {
        $source = variable_get("m2_block_breadcrumb_source_$block_id");
        $source_info = m2_source_parse($source);
        if ($source_info->m2 &&
            $source_info->m2->is_disabled == false &&
            $source_info->m2->is_removed == false) {
          $active_item = m2_api_item_select_active($source_info->m2->m2_name);
          if ($active_item) {
            $active_item->url = '';
            $breadcrumb = array_reverse(m2_api_item_select_parent_all($active_item), true) + array($active_item->item_id => $active_item);
            $breadcrumb_html = array();
            foreach ($breadcrumb as $item) {
              if ($item->is_disabled_grp) break;
              $breadcrumb_html[] = $item->url ? l(t($item->title), $item->url, array('html' => true)) : t($item->title);
            }
            $output.= implode(' > ', $breadcrumb_html);
          }
        }
      }
      break;
  }
  $time_1 = microtime(true);
  if ($output) {
    if (variable_get('m2_block_show_time_to_select', true) && user_access('administer menu2')) {
      $output.= theme('m2_content_wrapper', array('class' => array('build-time'), 'markup' => t('Build time: @time sec.', array('@time' => number_format($time_1 - $time_0, 7)))));
    }
  }
  $block['content'] = $output;
  return $block;
}


function m2_source_parse($source) {
  $info = (object)array('m2' => null, 'm2_item' => null);
  if ($source) {
    list($source_type, $source_id) = explode(':', $source);
    switch ($source_type) {
      case 'm':
        $info->m2 = m2_api_menu_select_by_name($source_id);
        break;
      case 'i':
        $info->m2_item = m2_api_item_select($source_id);
        $info->m2 = isset($info->m2_item->m2_name) ? m2_api_menu_select_by_name($info->m2_item->m2_name) : null;
        break;
    }
  }
  return $info;
}


/**
 * m2_form_confirm
 * m2_form_confirm_validate_ok
 * m2_form_confirm_validate_cancel
 */

function m2_form_confirm($form, $options = array()) {
  $form['#attributes']['class'] = array('m2-confirmation-form');
  $form['#title']              = isset($options['title'])              ? $options['title']              : '';
  $form['#path_ok']            = isset($options['path_ok'])            ? $options['path_ok']            : '';
  $form['#path_cancel']        = isset($options['path_cancel'])        ? $options['path_cancel']        : '';
  $form['#description_ok']     = isset($options['description_ok'])     ? $options['description_ok']     : t('this action cannot be undone');
  $form['#description_cancel'] = isset($options['description_cancel']) ? $options['description_cancel'] : '';
  $form['#text_ok']            = isset($options['text_ok'])            ? $options['text_ok']            : t('Confirm');
  $form['#text_cancel']        = isset($options['text_cancel'])        ? $options['text_cancel']        : t('Cancel');
  $form['buttons'] = array('#type' => 'container', '#weight' => 100);
  $form['buttons']['button_ok_wrapper']                           = array('#type' => 'container');
  $form['buttons']['button_ok_wrapper']['button_ok']              = array('#type' => 'submit', '#value' => $form['#text_ok'], '#validate' => array('m2_form_confirm_validate_ok'));
  $form['buttons']['button_ok_wrapper']['description_ok']         = array('#type' => 'item', '#markup' => $form['#description_ok']);
  $form['buttons']['button_cancel_wrapper']                       = array('#type' => 'container');
  $form['buttons']['button_cancel_wrapper']['button_cancel']      = array('#type' => 'submit', '#value' => $form['#text_cancel'], '#validate' => array('m2_form_confirm_validate_cancel'));
  $form['buttons']['button_cancel_wrapper']['description_cancel'] = array('#type' => 'item', '#markup' => $form['#description_cancel']);
  drupal_set_title($form['#title'], PASS_THROUGH);
  return $form;
}


function m2_form_confirm_validate_cancel($form, &$form_state) {
 /* unset error message when clicked to cancel button with empty required fileds */
    unset($_SESSION['messages']['error']);
 /* go to destination in url or #path_cancel by default */
    drupal_goto($form['#path_cancel']);
}


function m2_form_confirm_validate_ok($form, &$form_state) {
 /* go to destination in url or #path_ok by default */
    $form_state['redirect'] = $form['#path_ok'];
}


/**
 * m2_form_get_root_options
 * m2_form_theme_menu_list
 * m2_form_render - wrapper for php 5.4
 */

function m2_form_get_root_options($all_items = true) {
  $items = array();
  foreach (m2_api_menu_select_all(null, M2_WITH_SYSTEM_ON, M2_WITH_REMOVED_ON) as $c_menu) {
    $m2_states = array();
    if ($c_menu->is_disabled) $m2_states[] = t('disabled');
    if ($c_menu->is_removed)  $m2_states[] = t('removed');
    $items["m:$c_menu->m2_name"] = "<$c_menu->title>".(count($m2_states) ? ' | '.implode(', ', $m2_states) : '');
    if ($all_items) {
      foreach (m2_api_item_select_by_menu_all($c_menu->m2_name, 0, 0, M2_WITH_REMOVED_OFF, M2_WITH_DISABLED_ON) as $c_item) {
        $item_states = array();
        if ($c_item->is_disabled) $item_states[] = t('disabled');
        if ($c_item->is_removed)  $item_states[] = t('removed');
        $items["i:$c_item->item_id"] = str_repeat(M2_HTM_EM_DASH_OPTION, $c_item->depth + 1).' '.$c_item->title.(count($item_states) ? ' | '.implode(', ', $item_states) : '');
      }
    }
  }
  return $items;
}


function m2_form_theme_menu_list($menu_list, $page_path) {
  $output = '';
  foreach ($menu_list as $c_item) {
    $states = array();
    $class = array();
    if ($c_item->is_system)   {$states[] = t('system');   $class[] = 'system';}
    if ($c_item->is_disabled) {$states[] = t('disabled'); $class[] = 'disabled';}
    if ($c_item->is_removed)  {$states[] = t('removed');  $class[] = 'removed';}    
    $item_title = t('menu id = !m2_name | owner = !owner', array('!m2_name' => $c_item->m2_name, '!owner' => $c_item->owner_name ? $c_item->owner_name : t(M2_TXT_NA)));
    $output.= theme('m2_content_wrapper', array('class' => $class,
      'markup' => M2_HTM_EM_DASH.' '.l(t('Menu "!title"', array('!title' => truncate_utf8($c_item->title, 70, false, true))), "$page_path/$c_item->m2_name", array('attributes' => array('title' => $item_title))).
      (count($states) ? ' | '.implode(', ', $states) : '')
    ));
  }
  return theme('m2_content_wrapper', array('class' => array('m2-list'), 'markup' => $output));
}


function m2_form_render() {
  $args = func_get_args();
  $form = call_user_func_array('drupal_get_form', $args);
  return drupal_render($form);
}


/**
 * m2_report
 * m2_report_changes_render
 */

function m2_report($message, $args = array(), $wd_type, $dsm_type = 'status', $wd_severity = WATCHDOG_INFO) {
  $args['!nl'] = M2_HTM_TAG_NEW_LINE;
  drupal_set_message(t($message, $args), $dsm_type);
  watchdog($wd_type, $message, $args, $wd_severity);
}


function m2_report_changes_render($changes) {
  $changes_res = array();
  foreach ($changes as $key => $value) {
    switch (gettype($value)) {
      case 'integer': $changes_res[] = "$key = $value"; break;
      case 'boolean': $changes_res[] = "$key = ".($value ? 'true' : 'false'); break;
      default: $changes_res[] = "$key = \"$value\""; break;
    }
  }
  return implode(M2_HTM_TAG_NEW_LINE, $changes_res);
}


/**
 * Implements hook_modules_installed
 * Implements hook_modules_uninstalled
 * m2_get_modules_all
 * m2_get_external_attributes
 */

function m2_modules_installed($modules) {
  foreach ($modules as $c_module) {
    $hook_name = $c_module.'_schema_extend';
    if (function_exists($hook_name)) {
      $c_schema = call_user_func($hook_name);
      foreach ($c_schema as $table_name => $table_info) {
     /* add new fields */
        foreach ($table_info['fields'] as $field_name => $field_info) {
          if (db_field_exists($table_name, $field_name) == false) {
            db_add_field($table_name, $field_name, $field_info);
            if (db_field_exists($table_name, $field_name)) {
              m2_report('New Field !field_name was added to Table !table_name', array('!field_name' => $field_name, '!table_name' => $table_name), 'm2_admin');
            }
          }
        }
     /* add new unique keys */
        if (isset($table_info['unique keys'])) {
          foreach ($table_info['unique keys'] as $key_name => $key_fields) {
            if (db_index_exists($table_name, $key_name) == false) {
              db_add_unique_key($table_name, $key_name, $key_fields);
              if (db_index_exists($table_name, $key_name)) {
                m2_report('New Unique Key !key_name for Table !table_name was added', array('!key_name' => $key_name, '!table_name' => $table_name), 'm2_admin');
              }
            }
          }
        }
     /* add new indexes */
        if (isset($table_info['indexes'])) {
          foreach ($table_info['indexes'] as $idx_name => $idx_fields) {
            if (db_index_exists($table_name, $idx_name) == false) {
              db_add_index($table_name, $idx_name, $idx_fields);
              if (db_index_exists($table_name, $key_name)) {
                m2_report('New Index !idx_name for Table !table_name was added', array('!idx_name' => $idx_name, '!table_name' => $table_name), 'm2_admin');
              }
            }
          }
        }
      }
    }
  }
}


function m2_modules_uninstalled($modules) {
  foreach ($modules as $c_module) {
    $hook_name = $c_module.'_schema_extend';
    if (function_exists($hook_name)) {
      $c_schema = call_user_func($hook_name);
      foreach ($c_schema as $table_name => $table_info) {
     /* remove fields */
        foreach ($table_info['fields'] as $field_name => $field_info) {
          if (db_field_exists($table_name, $field_name)) {
            db_drop_field($table_name, $field_name, $field_info);
            if (db_field_exists($table_name, $field_name) == false) {
              m2_report('Field !field_name was removed from Table !table_name', array('!field_name' => $field_name, '!table_name' => $table_name), 'm2_admin');
            }
          }
        }
      }
    }
  }
}


function m2_get_modules_all() {
  system_rebuild_module_data();
  $query = db_select('system', 's');
  $query->addField('s', 'name');
  $query->addField('s', 'filename', 'module_path');
  $query->addField('s', 'status', 'is_active');
  $query->addExpression('if (schema_version = -1, 0, 1)', 'is_installed');
  $query->condition('s.type', 'module');
  $query->orderby('name');
  return $query->execute()->fetchAllAssoc('name');
}


function m2_get_external_attributes() {
  $cache = &drupal_static(__FUNCTION__);
  if (isset($cache)) {
    return $cache;
  } else {
    $ext_attrs = array();
    $all_modules = m2_get_modules_all();
    foreach ($all_modules as $c_module) {
      $module_dir = substr($c_module->module_path, 0, -strlen(strrchr($c_module->module_path, '/')));
      $module_install = "$module_dir/$c_module->name.install";
      if (is_file($module_install)) {
        require_once $module_install;
        $hook_name = $c_module->name.'_schema_extend';
        if (function_exists($hook_name)) {
          $c_schema = call_user_func($hook_name);
          $ext_attrs[$c_module->name] = $c_schema;
        }
      }
    }
    $cache = $ext_attrs;
    return $ext_attrs;
  }
}


/**
 * m2_get_schema_version
 */

function m2_get_schema_version() {
  $info = db_select('system', 's')->fields('s', array('schema_version'))->condition('name', 'm2')->condition('type', 'module')->execute()->fetchObject();
  return (int)$info->schema_version;
}

