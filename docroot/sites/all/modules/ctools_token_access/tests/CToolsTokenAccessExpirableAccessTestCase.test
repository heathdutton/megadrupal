<?php

/**
 * @file
 * Contains CToolsTokenAccessAccessTestCase.
 */

class CToolsTokenAccessExpirableAccessTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Expirable Access',
      'description' => 'Test the access with the token and expiration rules.',
      'group' => 'CTools Token Access',
    );
  }

  public function setUp() {
    parent::setUp('ctools_token_access_test');
  }

  /**
   * Test access.
   */
  public function testAccess() {
    ctools_include('export');
    $record = ctools_export_crud_load('access_token_export', 'cta-test');

    // Make the token to be fresh new and not expired.
    $record->updated = REQUEST_TIME;
    ctools_export_crud_save('access_token_export', $record);
    $code = $this->drupalGetResponseCode('cta-expirable-test', array('query' => array(
      'expirable' => '5R9vlMk6PbYnYPKbPmtoFsXjdoMzWaQjncxy9YPDLCY',
    )));
    $this->assertEqual($code, 410, 'Access granted with unexpired valid token.');

    // Make the token to be old and expired.
    $record->updated = strtotime('-2 weeks');
    ctools_export_crud_save('access_token_export', $record);
    $code = $this->drupalGetResponseCode('cta-expirable-test', array('query' => array(
      'expirable' => '5R9vlMk6PbYnYPKbPmtoFsXjdoMzWaQjncxy9YPDLCY',
    )));
    $this->assertEqual($code, 403, 'Access denied with expired invalid token.');
  }

  /**
   * Return the response code for a GET request.
   */
  public function drupalGetResponseCode($url, $options = array()) {
    $this->drupalGet($url, $options);
    return curl_getinfo($this->curlHandle, CURLINFO_HTTP_CODE);
  }

}
