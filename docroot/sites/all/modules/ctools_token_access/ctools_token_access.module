<?php

/**
 * @file
 * Module implementation file.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function ctools_token_access_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_post_alter().
 */
function ctools_token_access_ctools_plugin_post_alter(&$plugin, &$info) {
  // Add default options for access plugins that implement the interface.
  if ($info['type'] == 'access') {
    if ($plugin['name'] == 'token_access' || $plugin['name'] == 'expirable_token_access') {
      // If the class has not been loaded, then load it.
      if (!class_exists('CToolsTokenAccess')) {
        // All subclasses depend on CToolsTokenAccess to be loaded first.
        $directory = ctools_token_access_ctools_plugin_directory('ctools', 'access');
        module_load_include('class.php', 'ctools_token_access', $directory . '/CToolsTokenAccess');
      }
      if (!class_exists($plugin['class'])) {
        $directory = ctools_token_access_ctools_plugin_directory('ctools', 'access');
        module_load_include('class.php', 'ctools_token_access', $directory . '/' . $plugin['class']);
      }
    }
  }
}

/**
 * Helper function to execute the access method.
 */
function ctools_token_access_access_callback($conf, $context, $plugin) {
  return ctools_token_access_execute_method($plugin['name'], $conf, $context, 'access');
}

/**
 * Helper function to get the settings form.
 */
function ctools_token_access_settings_form($form, $form_state, $settings) {
  $values = empty($settings) ? $form_state['plugin']['default'] : $settings;
  $form = array_merge_recursive(ctools_token_access_execute_method($form_state['plugin']['name'], $values, $form_state['contexts'], 'settingsForm'), $form);
  return $form;
}

/**
 * Helper function to get the settings summary.
 */
function ctools_token_access_summary($conf, $context, $plugin) {
  return ctools_token_access_execute_method($plugin['name'], $conf, $context, 'settingsSummary');
}

/**
 * Helper function to get the handler object and execute a method from it.
 *
 * @param $plugin_name
 *   The name of the plugin.
 * @param $conf
 *   The CTools configuration array.
 * @param $context
 *   The CTools context.
 * @param $method_name
 *   Name of the method of the handler to execute.
 * @return mixed
 *   It depends on the executed method.
 */
function ctools_token_access_execute_method($plugin_name, $conf, $context, $method_name) {
  /** @var CToolsAccessInterface $handler */
  $class = ctools_token_access_get_handler_class_by_name($plugin_name);
  $handler = new $class($conf, $context);
  return $handler->{$method_name}();
}

/**
 * Helper function to get the access handler class name by plugin name.
 */
function ctools_token_access_get_handler_class_by_name($plugin_name) {
  ctools_include('plugins');
  return ctools_plugin_load_class('ctools', 'access', $plugin_name, 'class');
}
