<?php
/**
 * @file
 * Allows Node Reference fields to use other field formatters.
 */

/**
 * Implements hook_field_formatter_info().
 */
function formatters4nodereference_field_formatter_info() {
  $formatters = array();

  $formatters['formatters4nodereference'] = array(
    'label' => "Formatters for Node Reference fields",
    'field types' => array(
      'node_reference'
    ),
    'settings' => array(
      'data' => array(),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function formatters4nodereference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  $element['data'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="formatters4nodereference-settings-form">',
    '#suffix' => '</div>',
  );

  // Reference field.
  $options = array();
  foreach ($field['settings']['referenceable_types'] as $bundle) {
    foreach (field_info_instances('node', $bundle) as $reference_field) {
      if ($reference_field['widget']['module'] != 'node_reference') {
        // @TODO - Bundle label
        $options["{$bundle}-{$reference_field['field_name']}"] = "{$bundle}: {$reference_field['label']}";
      }
    }
  }
  if (!empty($options)) {
    $element['data']['field'] = array(
      '#title' => t('Reference field'),
      '#type' => 'select',
      '#empty_value' => '',
      '#options' => $options,
      '#default_value' => isset($settings['data']['field']) ? $settings['data']['field'] : '',
      '#ajax' => array(
        'callback' => 'formatters4nodereference_js',
        'wrapper' => 'formatters4nodereference-settings-form',
        'method' => 'replace',
      ),
    );

    // Formatter.
    $field_identifier = isset($form_state['input']['fields'][$field['field_name']]['settings_edit_form'])
      ? $form_state['input']['fields'][$field['field_name']]['settings_edit_form']['settings']['data']['field']
      : $element['data']['field']['#default_value'];
    if (!empty($field_identifier)) {
      list($bundle_name, $field_name) = explode('-', $field_identifier);
      $reference_field = field_info_field($field_name);
      $element['data']['formatter'] = array(
        '#title' => t('Formatter'),
        '#type' => 'select',
        '#options' => field_ui_formatter_options($reference_field['type']),
        '#default_value' => isset($settings['data']['formatter']) && in_array($settings['data']['formatter'], element_children(field_ui_formatter_options($reference_field['type']))) ? $settings['data']['formatter'] : '',
        '#ajax' => array(
          'callback' => 'formatters4nodereference_js',
          'wrapper' => 'formatters4nodereference-settings-form',
          'method' => 'replace',
        ),
      );

      // Formatter settings.
      $formatter_type = isset($form_state['input']['fields'][$field['field_name']]['settings_edit_form'])
        ? $form_state['input']['fields'][$field['field_name']]['settings_edit_form']['settings']['data']['formatter']
        : $element['data']['formatter']['#default_value'];
      $formatter_type = !in_array($formatter_type, array_keys($element['data']['formatter']['#options'])) ? key($element['data']['formatter']['#options']) : $formatter_type;
      $formatter = field_info_formatter_types($formatter_type);
      if (function_exists($function = "{$formatter['module']}_field_formatter_settings_form")) {
        $reference_instance = field_info_instance('node', $field_name, $bundle_name, $view_mode);
        $reference_instance['display'][$view_mode]['type'] = $formatter_type;
        $reference_instance['display'][$view_mode]['settings'] = isset($settings['data']['formatter_settings']) ? $settings['data']['formatter_settings'] : array();

        $element['data']['formatter_settings'] = array(
          '#type' => 'container',
        ) + $function($reference_field, $reference_instance, $view_mode, $form, $form_state);
      }
    }
  }

  // No fields available.
  else {
    $element['data'] = array(
      '#type' => 'value',
      '#value' => '',
    );
    $element['markup'] = array(
      '#markup' => '<p>' . t('No fields available to reference, please check the configuration of your !field.', array('!field' => l(t('field'), "admin/structure/types/manage/{$instance['bundle']}/fields/{$field['field_name']}"))) . '</p>',
    );
  }

  return $element;
}

/**
 * Ajax callback for Formatter settings form.
 */
function formatters4nodereference_js($form, $form_state) {
  return $form['fields'][$form_state['formatter_settings_edit']]['format']['settings_edit_form']['settings'];
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function formatters4nodereference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = 'Not setup';

  if (!empty($settings['data'])) {
    $summary = t('Reference field: !field', array('!field' => $settings['data']['field'])) . '<br />';
    $summary .= t('Formatter: !formatter', array('!formatter' => $settings['data']['formatter']));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function formatters4nodereference_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings']['data'];

  if (!empty($settings)) {
    list($bundle_name, $field_name) = explode('-', $settings['field']);
    $formatter = field_info_formatter_types($settings['formatter']);
    $function = "{$formatter['module']}_field_formatter_view";
    $field = field_info_field($field_name);
    $instance = field_info_instance('node', $field_name, $bundle_name);
    $display['type'] = $settings['formatter'];
    $display['settings'] = $settings['formatter_settings'];
    $display['module'] = $formatter['module'];

    $nids = array();
    foreach ($items as $item) {
      $nids[] = $item['nid'];
    }
    foreach (node_load_multiple($nids) as $node) {
      $items = field_get_items('node', $node, $field_name);
      if (!empty($items)) {
        $langcode = field_language('node', $node, $field_name);

        // @TODO - Use cardinality.
        $element[] = array(
          '#markup' => render($function('node', $node, $field, $instance, $langcode, array($items[0]), $display)),
        );
      }

      // Error, no items available.
      else {
        watchdog('formatters4nodereference', 'Referenced node (nid:!nid) field (!field) has no referencable items.', array('!nid' => $node->nid, '!field' => $field_name));
      }
    }
  }

  // Error, not setup correctly.
  else {
    watchdog('formatters4nodereference', 'Formatter for !bundle-!field not setup correctly.', array('!bundle' => $object->type, '!field' => $field['field_name']));
  }

  return $element;
}
