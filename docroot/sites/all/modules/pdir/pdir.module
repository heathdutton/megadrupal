<?php

/**
 * @file
 * Determines the directionaliy of a paragraph.
 */

/**
 * Implements of hook_filter_info().
 */
function pdir_filter_info() {
  $filters = array(
    'pdir' => array(
      'title' => t('Auto set paragraphs directionality to RTL or LTR'),
      'description' => t('Sets the directionality of a paragraph, according to it\'s first alphabetic chracter. <strong>This filter should be generally used after the Line break converter filter</strong> in order for it to work.'),
      'process callback' => '_pdir_pdir',
      'tips callback' => '_pdir_tips',
    ),
  );
  return $filters;
}

/**
 * Filter tips callback for Paragraph Directionality filter.
 */
function _pdir_tips($filter, $format, $long = FALSE) {
  return t('Paragraphs directionality will be automatically set to RTL or LTR.');
}

/**
 * Processer for text chunks tp add directionality based on first alphabetic chracter.
 */
function _pdir_pdir($text) {
  // Find first text within a paragraph (ignore html inside paragraphs)
  $chunks = preg_split('@(</?[^>]*>)@i', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  // Find block level elements, and check the next chunk
  $block_elements = array('<p>', '<ol>', '<ul>', '<li>', '<div>');
  $i = 0;
  $output = '';
  while ($i < count($chunks)) {
    if (in_array($chunks[$i], $block_elements)) {
      $text_chunk = _pdir_text_chuck($chunks, $i+1);
      if ($text_chunk) {
        $dir = _pdir_determine_dir($chunks[$text_chunk]);
        $chunks[$i] = '<' . trim($chunks[$i], '<>')  . ' style="direction:' . $dir . '">';
        $output .= $chunks[$i];
      }
    }
    else {
      $output .= $chunks[$i];
    }
    $i++;
  }
  return $output;
}

function _pdir_text_chuck($chunks, $i) {
  // If the current chunk is a valid text, return it, otherwise, keep digging.
  if (preg_match('@^<[^>]*>@u', $chunks[$i]) || empty($chunks[$i])) {
    if (isset($chunks[$i+1])) {
      $next = _pdir_text_chuck($chunks, $i+1);
      return $next;
    }
  }
  else {
    return $i;
  }
}

function _pdir_determine_dir($chunk) {
  // Check wehther the first alphabethic character is an RTL one (e.g., belongs to an RTL language)
  // The following line means: anything which is NOT a Letter, or digit. Pattern strings are treated as UTF-8.
  // See: http://il2.php.net/manual/en/regexp.reference.php and http://il2.php.net/manual/en/reference.pcre.pattern.modifiers.php for details.
  $neutral_chars = array('@\PL@u', '@\d@u');
  $chunk = preg_replace($neutral_chars, '', $chunk);
  if (preg_match('@(^[\x{0590}-\x{05f4}])@u', $chunk) || // Hebrew
      preg_match('@(^[\x{0600}-\x{06ff}])@u', $chunk) || // Arabic
      preg_match('@(^rlm)@u', $chunk)) { // &rlm; HTML entity (with & and ; filtered out)
    return 'rtl';
  }
  else return 'ltr';
}