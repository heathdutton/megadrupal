<?php

/**
 * @file
 * Adds a handler for Ted videos to Video Embed Field.
 *
 * @see video_embed_field.api.php
 */

/**
 * Implements hook_video_embed_handler_info().
 */
function video_embed_ted_video_embed_handler_info() {
  $handlers = array();
  $handlers['ted'] = array(
    'title' => 'TED Video',
    'function' => 'video_embed_ted_handle_video',
    'thumbnail_function' => 'video_embed_ted_handle_thumbnail',
    'thumbnail_default' => drupal_get_path('module', 'video_embed_ted') . '/img/ted.png',
    'form' => 'video_embed_ted_form',
    'form_validate' => 'video_embed_ted_field_handler_ted_form_validate',
    'domains' => array(
      'ted.com',
      'embed.ted.com',
      'embed-ssl.ted.com',
    ),
    'defaults' => array(
      'width' => 640,
      'height' => 360,
    ),
  );

  return $handlers;
}


/**
 * Defines the form elements for the Ted videos configuration form.
 *
 * @param array $defaults
 *   The form default values.
 *
 * @return array
 *   The provider settings form array.
 */
function video_embed_ted_form(array $defaults) {
  $form = array();

  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Width'),
    '#description' => t('The width of the player.'),
    '#default_value' => $defaults['width'],
  );

  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Height'),
    '#description' => t('The height of the player.'),
    '#default_value' => $defaults['height'],
  );

  return $form;
}


/**
 * Validates the form elements for the Ted video configuration form.
 *
 * @param array $element
 *   The form element to validate.
 * @param array $form_state
 *   The form to validate state.
 * @param array $form
 *   The form to validate structure.
 */
function video_embed_ted_field_handler_ted_form_validate(array $element, array &$form_state, array $form) {
  video_embed_field_validate_dimensions($element);
}


/**
 * Handler for Ted videos.
 *
 * @param string $url
 *   The video URL.
 * @param array $settings
 *   The settings array.
 *
 * @return array|bool
 *   The video iframe, or FALSE in case the ID can't be retrieved from the URL.
 */
function video_embed_ted_handle_video($url, array $settings) {
  $id = _video_embed_ted_get_video_id($url);

  if ($id) {
    $video = array(
      '#theme' => 'video_embed_ted',
      '#url' => 'https://embed-ssl.ted.com/talks/' . $id . '.html',
      '#width' => $settings['width'],
      '#height' => $settings['height'],
    );
    return $video;
  }

  return FALSE;
}


/**
 * Gets the thumbnail url for Ted videos.
 *
 * @param string $url
 *   The video URL.
 *
 * @return array
 *   The video thumbnail information.
 */
function video_embed_ted_handle_thumbnail($url) {
  $id = _video_embed_ted_get_video_id($url);

  $image_url = video_embed_ted_get_thumbnail_url($id);
  if ($image_url) {
    return array(
      'id' => $id,
      'url' => $image_url,
    );
  }
  return FALSE;
}


/**
 * Helper to get image url, downloads embed iframe content and parses it.
 *
 * @param string $id
 *   The video ID.
 *
 * @return array|bool
 *   The video thumbnail url, or FALSE in case something failes
 */
function video_embed_ted_get_thumbnail_url($id) {
  $matches = array();
  $url = 'https://embed-ssl.ted.com/talks/' . $id . '.html';
  $result = drupal_http_request($url);
  if (!empty($result->data)) {
    preg_match("/posterUrl\s=\s\'(.+)?\'/", $result->data, $matches);
  }
  else {
    return FALSE;
  }

  if (!empty($matches[1])) {
    return $matches[1];
  }
  else {
    return FALSE;
  }

}


/**
 * Helper function to get the Ted video's id. We support current /talks urls.
 *
 * @param string $url
 *   The video URL.
 *
 * @return string|bool
 *   The video ID, or FALSE in case the ID can't be retrieved from the URL.
 */
function _video_embed_ted_get_video_id($url) {
  $matches = array();
  preg_match('#/talks/([A-Za-z0-9_-]+)(\.html)?#', $url, $matches);
  if ($matches && !empty($matches[1])) {
    // Security check, this is the only place where we use user input.
    return check_plain($matches[1]);
  }
  // Otherwise return FALSE.
  return FALSE;
}


/**
 * Implements hook_theme().
 *
 * Using video_embed_ted.tpl.php as template.
 */
function video_embed_ted_theme() {
  return array(
    'video_embed_ted' => array(
      'template' => 'video_embed_ted',
      'variables' => array(
        'url' => NULL,
        'width' => NULL,
        'height' => NULL,
      ),
    ),
  );
}
