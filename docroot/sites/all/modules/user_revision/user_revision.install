<?php

/**
 * @file
 * Install, update and uninstall functions for the user_revision module.
 */

/**
 * Implements hook_schema().
 */
function user_revision_schema() {
  $schema['user_revision'] = array(
    'description' => 'Stores user_revision data.',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique user ID.',
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'timestamp' => array(
        'description' => 'A Unix timestamp indicating when this version was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'authorid' => array(
        'description' => 'The {users}.uid that created this version.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique user name.',
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
        'description' => "User's e-mail address.",
      ),
      'theme' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's default theme.",
      ),
      'signature' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's signature.",
      ),
      'signature_format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The {filter_format}.format of the signature.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether the user is active(1) or blocked(0).',
      ),
      'timezone' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'description' => "User's time zone.",
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's default language.",
      ),
      'picture' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Foreign key: {file_managed}.fid of user's picture.",
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
      ),
      'ip' => array(
        'type' => 'varchar',
        'description' => 'The users\'s ip address.',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'primary key' => array('vid'),
    'foreign keys' => array(
      'versioned_user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'version_author' => array(
        'table' => 'users',
        'columns' => array('authorid' => 'uid'),
      ),
      'signature_format' => array(
        'table' => 'filter_format',
        'columns' => array('signature_format' => 'format'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function user_revision_install() {
  $schema['users'] = array();
  include_once('user_revision.module');
  user_revision_schema_alter($schema);
  foreach ($schema['users']['fields'] as $name => $spec) {
    db_add_field('users', $name, $spec);
  }
  db_update('users')
    ->expression('vid', 'uid')
    ->execute();

  // Handle anon user first.
  db_insert('user_revision')
    ->fields(array(
      'uid' => 0,
      'vid' => 0,
      'log' => '',
      'timestamp' => 0,
      'authorid' => 0,
      'name' => '',
      'mail' => '',
      'theme' => '',
      'signature' => '',
      'status' => 0,
      'language' => '',
      'picture' => 0,
    ))
  ->execute();

  // Make sure data is correct for anon user
  db_update('user_revision')
    ->condition('uid', 0)
    ->fields(array('vid' => 0))
    ->execute();

  // Add all users to the revision table
  $users = db_select('users', 'u')
    ->fields('u', array('uid', 'vid', 'name', 'mail', 'theme', 'signature', 'signature_format', 'status', 'timezone', 'language', 'picture', 'data'))
    ->condition('u.uid', 0, '!=')
    ->execute()
    ->fetchAll();
  foreach ($users as $user) {
    db_insert('user_revision')
      ->fields(array(
        'uid' => $user->uid,
        'vid' => $user->vid,
        'log' => '',
        'timestamp' => REQUEST_TIME,
        'authorid' => $user->uid,
        'name' => $user->name,
        'mail' => $user->mail,
        'theme' => $user->theme,
        'signature' => $user->signature,
        'signature_format' => $user->signature_format,
        'status' => $user->status,
        'timezone' => $user->timezone,
        'language' => $user->language,
        'picture' => $user->picture,
        'data' => $user->data,
      ))
    ->execute();
  }

  db_update('system')->fields(array('weight' => 99))->condition('name', 'user_revision', '=')->execute();
}

/**
* Implementation of hook_uninstall().
*/
function user_revision_uninstall() {
  module_load_include('module', 'user_revision');
  $schema['users'] = array();
  user_revision_schema_alter($schema);
  foreach ($schema['users']['unique keys'] as $name => $spec) {
    db_drop_unique_key('users', $name);
  }
  foreach ($schema['users']['fields'] as $name => $spec) {
    db_drop_field('users', $name);
  }
}

/**
 * Change the weight of User Revision Module so all user hooks are executed last.
 * This way all changes made in hook_user_presave etc. won't be lost.
 */
function user_revision_update_7001() {
  db_update('system')->fields(array('weight' => 99))->condition('name', 'user_revision', '=')->execute();
}
