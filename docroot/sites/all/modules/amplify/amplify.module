<?php

/**
 * The main file for amplify.
 *
 * The amplify_get_* functions are the ones intended for developers to use.
 * Common data can be retrieved using the convenience functions here. But 
 * more advanced data combinations may be retrieved using amplify_get_qp() 
 * and then running your own queries on the returned data.
 *
 * Polarity and asking/offering guidance is not returned by the convenience 
 * functions here, though it can be easily retrieved using QueryPath. 
 *
 * You will probably want to look at the developer documentation at 
 * http://openamplify.com to understand what the returned data means.
 *
 * This module handles the amplification of nodes.
 * @file
 */

/**
 * Implementation of hook_help().
 */
function amplify_help($path, $args) {
  if ($path == 'admin/help#amplify') {
    return t('The Amplify module is a semantic analysis tool. It submits node contents to a remote web service that analyzes the content and provides useful information.');
  }
}

/**
 * Get top topics.
 *
 * @param $node
 *   Node whose topics you want.
 * @return
 *   An associative array of topics to rankings.
 */
function amplify_get_top_topics($node) {
  $topics = array();
  $qp = amplify_get_qp($node);
  foreach ($qp->top()->find('TopTopics>TopicResult>Topic') as $topic) {
    $topics[$topic->find('Name')->text()] = $topic->next('Value')->text();
  }
  return $topics;
}

/**
 * Get education level.
 *
 * @param $node
 *   Node whose data you want.
 * @return
 *   An associative array of names and values.
 */
function amplify_get_education($node) {
  $qp = amplify_get_qp($node);
  $return = array();
  foreach ($qp->top()->find('Demographics>Education') as $topic) {
    $return[$topic->find('Name')->text()] = $topic->next('Value')->text();
  }
  return $return;
}

/**
 * Get flamboyance level.
 *
 * @param $node
 *   Node whose data you want.
 * @return
 *   An associative array of names and values.
 */
function amplify_get_flamboyance($node) {
  $qp = amplify_get_qp($node);
  $return = array();
  foreach ($qp->top()->find('Styles>Flamboyance') as $topic) {
    $return[$topic->find('Name')->text()] = $topic->next('Value')->text();
  }
  return $return;
}

/**
 * Get slang level.
 *
 * @param $node
 *   Node whose data you want.
 * @return
 *   An associative array of names and values.
 */
function amplify_get_slang($node) {
  $qp = amplify_get_qp($node);
  $return = array();
  foreach ($qp->top()->find('Styles>Slang') as $topic) {
    $return[$topic->find('Name')->text()] = $topic->next('Value')->text();
  }
  return $return;
}

/**
 * Get proper nouns.
 *
 * @param $node
 *   Node whose data you want.
 * @return
 *   An associative array of names and values.
 */
function amplify_get_proper_nouns($node) {
  $qp = amplify_get_qp($node);
  $return = array();
  foreach ($qp->top()->find('ProperNouns>TopicResult>Topic') as $topic) {
    $return[$topic->find('Name')->text()] = $topic->next('Value')->text();
  }
  return $return;
}

/**
 * Get a mood cloud for this document.
 *
 * @param $node
 *   The node.
 * @todo
 *   Refactor this to use theme system. Need to find a way to make Drupal's
 *   theme system play nice with QueryPath. The markup here is pretty purely
 *   semantic, though.
 */
function amplify_get_mood_cloud($node) {
  $qp = amplify_get_qp($node);
  
  // If no cached doc was found, we skip.
  if (empty($qp)) {
    return '';//'Empty mood cloud for ' . $node;
  }
  
  // This contains the styling for this module.
  drupal_add_css(drupal_get_path('module', 'amplify') . '/moods.css');
  
  $out = qp('<?xml version="1.0"?><div class="tagcloud"/>', 'div');
  foreach ($qp->find('TopTopics>TopicResult')->slice(0, 15) as $topic) {
    $name = check_plain($topic->find('Topic>Name')->text());
    $polarity = check_plain($topic->end()->find('Polarity>Mean>Name')->text());
    $guidance = check_plain($topic->end()->find('OfferingGuidance>Name')->text());
    
    $pol_class = 'polarity-' . strtolower($polarity);
    $guid_class = 'guidance-' . strtr(strtolower($guidance), ' ', '-');
    $classes = $pol_class . ' ' . $guid_class . ' amplified-tags';
    
    $out->append('<span class="' . $classes . '">' . $name . '</span> ');
  }
  return $out->top()->html();
}

/**
 * Get the document from the cache.
 *
 * Returns a QueryPath object wrapping the amplify document. This is the main
 * method used to get OpenAmplify data about a node.
 *
 * @return 
 *  A QueryPath object.
 */
function amplify_get_qp($node, $reset = FALSE) {
  // Based on issue #1801506, make sure QP classes are loaded completely
  if (function_exists('querypath_include_code')) {
    querypath_include_code();
  }

  static $doc = array();
  
  // The reset anti-pattern
  if ($reset) {
    $doc = array();
    return;
  }
  if (empty($node)) {
    return;
  }
  
  $nid = (is_object($node) ? $node->nid : $node);
  
  if (!isset($doc[$nid])) {
    $data = QPCache::get(amplify_cache_key($nid));
    if (empty($data)) {
      //drupal_set_message('No doc for ' . amplify_cache_key($nid), 'status');
      watchdog('amplify', 'No amplification for %doc', array('%doc' => $nid), WATCHDOG_DEBUG);
      return;
    }
    
    $dom = new DOMDocument();
    $dom->loadXML($data->xml);
    $doc[$nid] = qp($dom);
  }
  return $doc[$nid]->branch();
}

/**
 * Get an XML representation of the Amplify XML.
 *
 * @param $node
 *  The node to get amplification info for.
 * @return
 *  A string of XML.
 */
function amplify_get_xml($node) {
  return amplify_get_qp($node)->xml();
}

/**
 * Get basic info about a doc.
 * @param $node
 *   The node to check.
 * @todo
 *   Need to refactor with theming.
 */
function amplify_get_basic_info($node) {
  $qp = amplify_get_qp($node);
  if (empty($qp)) {
    _amplify_dpm(__FUNCTION__ . ' : empty($qp)');
    return '';
  }
  
  // Since we are doing massive queries, we do fastest 
  // search possible: Lots of direct children.
  $v = array();
  
  // Pull domain list
  $tmp_domains = $qp->find('Domains>DomainResult>Domain>Name');
  $domains = array();
  foreach ($tmp_domains as $domain) {
    $domains[] = $domain->text();
  }
  $v['Domain'] = implode(', ', array_unique($domains));
  
  // Pull subdomain list
  $tmp_subdomains = $qp->top()->find('Domains>DomainResult>Subdomains>DomainResult>Domain>Name');
  $subdomains = array();
  foreach ($tmp_subdomains as $subdomain) {
    $subdomains[] = $subdomain->text();
  }
  $v['Subdomain'] = implode(', ', array_unique($subdomains));
  
  // Pull topic list
  $dtopics = $qp->top()->find('TopTopics>TopicResult>Topic>Name');
  $topics = array();
  foreach ($dtopics as $topic) {
    $topics[] = $topic->text();
  }
  $v['Topics'] = implode(', ', array_unique($topics));
  
  // Pull locations list
  $locations = array();
  foreach ($qp->top()->find('Locations>Result>Name') as $loc) {
    $locations[] = $loc->text();
  }
  $v['Locations'] = implode(', ', array_unique($locations));

  // Extract single-value results
  $v['Education'] = $qp->top()->find('Demographics>Education>Name')->text();
  $v['Slang'] = $qp->top()->find('Styles>Slang>Name')->text();
  $v['Flamboyance'] = $qp->top()->find('Styles>Flamboyance>Name')->text();

  // Build output
  $out = qp('<?xml version="1.0" ?><ul/>');
  foreach ($v as $label => $value) {
    $value = check_plain($value);
    $t = '<li><strong>' . $label . '</strong>: ' . $value . '</li>';
    $out->append($t);
  }
  
  return $out->top()->html(); // This might need to be xml()
}

/*
 * Blocks
 */
 
/**
 * Implements hook_block_info
 */
function amplify_block_info() {
  $blocks = array();
  
  $blocks['mood_cloud'] = array(
    'info' => t('Amplify Mood Cloud'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['basic_info'] = array(
    'info' => t('Amplify Basic Info'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function amplify_block_view($delta) {
  $block = array();
  
  $function = '_' . __FUNCTION__ . '_' . $delta;
  // Ignore unknown deltas, as core mods do.
  if (function_exists($function)) {
    $block = $function();
  }
  
  return $block;
}

/**
 * Block helper function for hook.
 */
function _amplify_block_view_mood_cloud() {
  $block = array();
  
  // Only build the block if we are on a node page  
  if (arg(0) == 'node' && ctype_digit(arg(1))) {
    $block['subject'] = t('Mood Cloud');
    $block['content'] = amplify_get_mood_cloud(arg(1));
  }
  
  //_amplify_dpm($block);
  return $block;
}

/**
 * Block helper function for hook.
 */
function _amplify_block_view_basic_info() {
  $block = array();

  // Only build the block if we are on a node page  
  if (arg(0) == 'node' && ctype_digit(arg(1))) {
    $block['subject'] = t('Basic Info');
    $block['content'] = amplify_get_basic_info(arg(1));
  } 
  
  //_amplify_dpm($block);
  return $block;
}


/*
 * INTERNAL FUNCTIONS
 */
 

/**
 * Generate the cache key for OpenAmplify docs.
 *
 * @param $nid 
 *  The node ID of the node to fetch. If an object is passed, this will
 *  assume that the object has a nid property.
 * @param $modifier
 *  Optional param to allow multiple versions of the same document to be stored.
 */
function amplify_cache_key($nid, $modifier = '') {
  if (is_object($nid)) {
    $nid = $nid->nid;
  }
  $base = 'amplify:node/' . $nid;
  if (strlen($modifier) > 0) {
    $base .= '/' . $modifier;
  }
  return $base;
}

/**
 * Implements hook_node_insert
 */
function amplify_node_insert($node) {
  _amplify_process_node($node);
}

/**
 * Implements hook_node_update
 */
function amplify_node_update($node) {
  _amplify_process_node($node);
}

/**
 * Util function used bu both hook_node_insert and hook_node_update
 */
function _amplify_process_node($node) {
  $amp_types = array_keys(array_filter(variable_get('amplify_node_types', array())));
  if (in_array($node->type, $amp_types)) {
    drupal_set_message(t('Amplifying this document.'), 'status');
    amplify_amplify_text($node);
  }
}

/**
 * Given a URL, get the amplified results.
 *
 * This requests that OpenAmplify amplify the content found at the given
 * URL, and then return the resulting data. This information is returned
 * wrapped in a QueryPath wrapper.
 *
 * @param $url
 *  The URL to amplify.
 * @return
 *  The QueryPath object containing the amplified results.
 */
function amplify_amplify_url($url) {
  // OA "charges" one usage credit to retrieve the URL for us; that could cut 
  // daily limits nearly in half in some cases.  Let's go ahead and retrieve 
  // the article now...
  $http_res = drupal_http_request($url);
  if (200 == $http_res->code) {
    // Got a good HTTP response, now strip tags to get size down (OA will 
    // strip 'em on receive anyway) as we get dinged ANOTHER usage credit if 
    // the content is over 2500 bytes
    $content = strip_tags($http_res->data);
    $lines = explode("\n", $content);
    $newlines = array();
    foreach ($lines as $line) {
      $line = trim($line);
      if (!empty($line)) {
        $newlines[] = $line;
      }
    }
    $content = implode("\n", $newlines);
    return _amplify_do_request(array(), $content);
  }
  else {
    watchdog('amplify', 'Request to load %url failed at HTTP request level', array('%url' => $url), WATCHDOG_ERROR);
  }
}

/**
 * Send data to a remote OpenAmplify server.
 *
 * The returned data is stored.
 *
 * @param $node
 *  The node (passed by reference) to be amplified. Amplified data is stored
 *  in the querypath cache for later retrieval.
 */
function amplify_amplify_text(&$node) {
  // To generate the content, we first want to run the node through the normal
  // rendering process. This allows filters to be run, etc. But OpenAmplify
  // engineers report that plain text amplifies better than marked-up text
  // (and it probably has performance ramifications for them, too). So we
  // strip out markup befor submitting.
  $node_view = node_view($node);
  $content = strip_tags(drupal_render($node_view));
  $key = amplify_cache_key($node->nid);
  $qp = _amplify_do_request(array(), $content);
  
  // If nothing came back, return without invoking the hooks.
  if (empty($qp) || $qp->size() == 0) {
    return;
  }
  // This calls
  // hook_amplify_before_save()
  // WARNING: Modifying the $qp will modify the data stored in the
  // table.
  module_invoke_all('amplify_before_save', $qp);

  QPCache::set($key, $qp->xml());
  
}

/**
 * Performs a request against the remote OpenAmplify server.
 *
 * @param $params
 *  An associative array of HTTP GET params.
 * @param $content
 *  String content that should be sent to the remote server to be 
 *  analyzed. If this is not specified, the $params array should contain
 *  an entry of the form 'sourceurl' => 'http://example.com'.
 */
function _amplify_do_request($params, $content = NULL) {
  // Based on issue #1801506, make sure QP classes are loaded completely
  if (function_exists('querypath_include_code')) {
    querypath_include_code();
  }

  $url = 'http://portaltnx20.openamplify.com/AmplifyWeb_v21/AmplifyThis'; // v2.1 API

  // HTTP parameters
  $params += array(
    'apiKey' => variable_get('amplify_api_key', ''),
    'analysis' => 'all',
    'outputformat' => 'xml', // explicitly set in case default changes in future API versions
    'optimiseresptime' => 'enable',  // this option tends to prevent 503 errors, per OA support
  );
  
  if (!empty($content)) {
    $params['inputtext'] = $content;
  }
  
  // Switched to cURL instead of stream contexts as apparently tighter server 
  // restrictions are often causing file_get_contents calls using stream 
  // contexts to fail.  cURL calls or straight socket calls appear to work 
  // most reliably.  Google "file_get_contents 406" to see the scoop.
  // -arpieb
  
  // Also switched to straight POST as it reduces issues with over-long input 
  // text and URLs - otherwise the OpenAmplify API is documented to be 
  // identical for GET or POST.  Also simplifies code to not switch modes 
  // based on params passed in.
  // -arpieb
  
  // Build and execute POST
  $ch = curl_init();
  if ($ch) {
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    
    $postdata = array();
    foreach ($params as $name => $val) {
      $postdata[] = $name . '=' . urlencode($val);
    }
    $postdata = implode('&', $postdata);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);

    //watchdog('amplify', 'Calling OpenAmplify with the following params:<br />!data', array('!data' => '<pre>' . print_r($params, TRUE) . '</pre>'), WATCHDOG_INFO);
    //watchdog('amplify', 'Calling OpenAmplify with the following data:<br />!data', array('!data' => $postdata), WATCHDOG_INFO);
    
    $result = curl_exec($ch);
    curl_close($ch);
    if (!empty($result)) {
      //watchdog('amplify', 'OpenAmplify returned the following data:<br />!data', array('!data' => $result), WATCHDOG_INFO);
      try {
        $qp = qp($result);
      }
      catch (Exception $e) {
        drupal_set_message(t('Could not amplify the document. The remote server did not return the expected data.'), 'error');
        //drupal_set_message($e->getMessage(), 'status');
        watchdog('amplify', 'Error: @err', array('@err' => $e->getMessage()), WATCHDOG_ERROR);
        return;
      }
      
      return $qp;
    }
  }
}

/**
 * Implement hook_menu().
 */
function amplify_menu() {
  $items = array();

  $items['admin/config/search/amplify'] = array(
    'title' => 'Amplify settings',
    'description' => 'Configure the Amplify module to contact an OpenAmplify server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amplify_admin_form'),
    'type' => MENU_NORMAL_ITEM, 
    'access arguments' => array('administer amplify'),
    'file' => 'amplify.admin.inc',
  );  
  
  $items['admin/config/search/amplify/test'] = array(
    'title' => 'Test OpenAmplify services',
    'description' => 'Submit a URL or a node to OpenAmplify to test configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amplify_test_url_form'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer amplify'),
    'file' => 'amplify.admin.inc'
  );
  
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function amplify_permission() {
  return array(
    'administer amplify' => array(
      'title' => t('Administer OpenAMplify settings'),
      'description' => t('Administer settings for OpenAmplify integration'),
    ),
  );
}

/**
 * Custom wrapper for devel:dpm so we don't accidentally break anything on checkin, and easy to disable dpm-based logging in one place
 */
function _amplify_dpm($data) {
  if (function_exists('dpm')) {
    dpm($data);
  }
}
