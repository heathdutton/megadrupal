<?php
/**
 * @file
 * Functions that help Drupal developers when working with fields.
 *
 * This is an API module. Only use if another module tells you to or when
 * developing yourself.
 */

define('FIELDHELP_LABEL_HIDDEN', 'hidden');
define('FIELDHELP_LABEL_INLINE', 'inline');
define('FIELDHELP_LABEL_ABOVE', 'above');

/**
 * Image field widget settings possible values.
 */
define('FIELDHELP_IMAGE_PROGRESS_INDICATOR_THROBBER', 'throbber');
define('FIELDHELP_IMAGE_PROGRESS_INDICATOR_BAR', 'bar');

/**
 * Implements hook_menu().
 */
function fieldhelp_menu() {
  $items = array();
  $items['admin/reports/fields/list'] = array(
    'title' => "List",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/reports/fields/export'] = array(
    'title' => "Export",
    'description' => "Export individual field and field instance configurations.",
    'page callback' => 'fieldhelp_field_export_list',
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'fieldhelp.admin.inc',
  );
  $items['admin/reports/fields/export/instance/%/%/%'] = array(
    'title' => "Field instance export array",
    'description' => "Export individual field instance configuration.",
    'page callback' => 'fieldhelp_field_export_instance_page',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('administer content types'),
    'file' => 'fieldhelp.admin.inc',
  );
  $items['admin/reports/fields/export/field/%'] = array(
    'title' => "Field definition export array",
    'description' => "Export individual field configuration.",
    'page callback' => 'fieldhelp_field_export_field_page',
    'page arguments' => array(5),
    'access arguments' => array('administer content types'),
    'file' => 'fieldhelp.admin.inc',
  );
  return $items;
}

/**
 * Set field items analog to field_get_items().
 *
 * Also, flag that the entity needs to be updated/saved.  This is preferable
 * to running field_attach_update($entity_type, $entity); repeatedly.
 */
function fieldhelp_field_set_items($entity, $field_name, $items) {
  foreach ($items as $index => $item) {
    $entity->{$field_name}[LANGUAGE_NONE][$index] = $item;
  }
  $entity->needs_save = TRUE;
}

/**
 * Set field items for a single value given an array of single values.
 *
 * @param object $entity
 * @param string $field_name
 * @param array $values
 * @param string $index
 *   The index to use for the single values; defaults to 'value'.
 */
function fieldhelp_field_set_single_value_items($entity, $field_name, $values, $index = 'value') {
  $items = array();
  $i = 0;
  foreach ($values as $value) {
    $items[$i] = array($index => $value);
    $i++;
  }
  fieldhelp_field_set_items($entity, $field_name, $items);
}

/**
 * Set a single normal item.
 */
function fieldhelp_field_set_item($entity, $field_name, $value) {
  if (!is_array($value)) {
    $item = array('value' => $value);
  }
  else {
    $item = $value;
  }
  $items = array(0 => $item);
  fieldhelp_field_set_items($entity, $field_name, $items);
}

/**
 * Get a single item.
 */
function fieldhelp_field_get_item($entity, $field_name, $entity_type = 'node') {
  if (!isset($entity->entity_type)) {
    $entity->entity_type = $entity_type;
  }
  $items = field_get_items($entity->entity_type, $entity, $field_name);
  if ($items) {
    return $items[0];
  }
  else {
    return NULL;
  }
}

/**
 * Get a single item's value.
 */
function fieldhelp_field_get_item_value($entity, $field_name, $index = 'value', $entity_type = 'node') {
  if ($item = fieldhelp_field_get_item($entity, $field_name, $entity_type)) {
    return $item[$index];
  }
  else {
    return NULL;
  }
}

/**
 * Create a field.
 *
 * @param $field_name
 *   A string with the name of the field.  By custom, Field UI-managed fields
 *   are prefixed with 'field_' but this is not a requirement.
 * @param $type
 *   A string providing the type of field.  The core-included field types are:
 *     - text
 *     - text_long
 *     - taxonomy_term_reference
 *     - @TODO complete documentation
 * @param $cardinality
 *   Number of values the field can have.  Defaults to 1, for unlimited values
 *   use FIELD_CARDINALITY_UNLIMITED.
 * @param $translatable
 *   Boolean, defaults to FALSE.
 * @param $locked
 *   Boolean, defaults to FALSE.
 * @param $settings
 *   Array which varies by field type; see the appropriate hook_field_info().
 * @param $entity_types
 *   Array of entity types which this field is allowed to be attached to.
 *   Defaults to an empty array which means all entity types are allowed.
 * @param $indexes
 *   Array to add to or replace indexes in field type's hook_field_schema().
 * @param $storage
 *   Array with keys 'type' (storage backend specified in field_storage_default
 *   variable) and 'settings' (see the appropriate hook_field_storage_info()).
 */
function fieldhelp_create_field($field_name, $type, $cardinality = 1, $translatable = FALSE, $locked = FALSE, $settings = array(), $entity_types = array(), $indexes = array(), $storage = array()) {
  $field = array(
    'field_name' => $field_name,
    'type' => $type,
    'cardinality' => $cardinality,
    'translatable' => $translatable,
    'locked' => $locked,
    'settings' => $settings,
    'entity_types' => $entity_types,
    'indexes' => $indexes,
    'storage' => $storage,
  );
  return field_create_field($field);
}

/**
 * Create a field instance.
 *
 * See field_create_instance().
 */
function fieldhelp_create_instance($field_name, $bundle, $entity_type = 'node', $label = NULL, $description = '', $required = FALSE, $default_value_function = '', $settings = array(), $widget = array(), $display = array(), $instance_additional = array()) {
  $instance = array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => $label,
    'description' => $description,
    'required' => $required,
    'default_value_function' => $default_value_function,
    'settings' => $settings,
    'widget' => $widget,
    'display' => $display,
  ) + $instance_additional;
  return field_create_instance($instance);
}

/**
 * Sets the instance's label.
 *
 * @param array &$instance
 * @param string $label
 */
function fieldhelp_instance_set_label(&$instance, $label) {
  $instance['label'] = $label;
}

/**
 * Sets the instance's description.
 *
 * @param array &$instance
 * @param string $description
 */
function fieldhelp_instance_set_description(&$instance, $description) {
  $instance['description'] = $description;
}

/**
 * Sets whether the instance is required or not on the entity.
 *
 * @param array &$instance
 * @param bool $required
 */
function fieldhelp_instance_set_required(&$instance, $required = TRUE) {
  $instance['required'] = $required;
}

/**
 * Sets the widget's type.
 *
 * @param array &$instance
 * @param string $type
 */
function fieldhelp_instance_widget_set_type(&$instance, $type) {
  $field_info = field_info_field($instance['field_name']);
  $widget_types = field_info_widget_types();
  if (!in_array($type, array_keys($widget_types))) {
    throw new Exception(t('Unknown widget @type.', array('@type' => $type)));
  }
  if (!in_array($field_info['type'], $widget_types[$type]['field types'])) {
    throw new Exception(t('Invalid widget @type on @field_type field.', array('@type' => $type, '@field_type' => $field_info['type'])));
  }
  $instance['widget']['type'] = $type;
}

/**
 * Sets the widget's weight.
 *
 * @param array &$instance
 * @param int $weight
 */
function fieldhelp_instance_widget_set_weight(&$instance, $weight) {
  $instance['widget']['weight'] = $weight;
}

/**
 * Hides an instance in the given view mode.
 *
 * @param array &$instance
 * @param string $view_mode
 */
function fieldhelp_instance_display_hide(&$instance, $view_mode) {
  fieldhelp_assert_valid_view_mode($instance, $view_mode);
  $instance['display'][$view_mode]['type'] = 'hidden';
}

/**
 * Sets the display's type.
 *
 * @param array &$instance
 * @param string $view_mode
 * @param string $type
 * @throws Exception
 */
function fieldhelp_instance_display_set_type(&$instance, $view_mode, $type) {
  fieldhelp_assert_valid_view_mode($instance, $view_mode);
  $field_info = field_info_field($instance['field_name']);
  $formatter_type = field_info_formatter_types($type);
  if (!$formatter_type) {
    throw new Exception(t('Unknown formatter @type.', array('@type' => $type)));
  }
  if (!in_array($field_info['type'], $formatter_type['field types'])) {
    throw new Exception(t('Invalid formatter @type on @field_type field.', array('@type' => $type, '@field_type' => $field_info['type'])));
  }
  $instance['display'][$view_mode]['type'] = $type;
}

/**
 * Updates settings with given settings.
 *
 * @param array $instance
 * @param string $view_mode
 * @param array $settings
 * @throws Exception
 */
function fieldhelp_instance_display_update_settings(&$instance, $view_mode, $settings) {
  fieldhelp_assert_valid_view_mode($instance, $view_mode);
  array_merge($instance['display'][$view_mode]['settings'], $settings);
}

/**
 * Sets the display's weight.
 *
 * @param array &$instance
 * @param string $view_mode
 * @param int $weight
 * @throws Exception
 */
function fieldhelp_instance_display_set_weight(&$instance, $view_mode, $weight) {
  fieldhelp_assert_valid_view_mode($instance, $view_mode);
  $instance['display'][$view_mode]['weight'] = $weight;
}

/**
 * Shows the display's label above or inline.
 *
 * @param array &$instance
 * @param string $view_mode
 * @param string $where
 * @throws Exception
 */
function fieldhelp_instance_display_show_label(&$instance, $view_mode, $where) {
  fieldhelp_assert_valid_view_mode($instance, $view_mode);
  if (!in_array($where, array('inline', 'above'))) {
    throw new Exception(t('Invalid label position @position. Allowed values: inline, above.', array('@position' => $where)));
  }
  $instance['display'][$view_mode]['label'] = $where;
}

/**
 * Hides the display's label.
 *
 * @param array &$instance
 * @param string $view_mode
 * @throws Exception
 */
function fieldhelp_instance_display_hide_label(&$instance, $view_mode) {
  fieldhelp_assert_valid_view_mode($instance, $view_mode);
  $instance['display'][$view_mode]['label'] = 'hidden';
}

/**
 * Throws an exception if the view mode does not exist in this instance.
 *
 * @param array $instance
 * @param string $view_mode
 * @throws Exception
 */
function fieldhelp_assert_valid_view_mode($instance, $view_mode) {
  $view_modes = array_keys($instance['display']);
  if (!in_array($view_mode, $view_modes)) {
    throw new Exception(t('Invalid view mode @view_mode. Allowed values: @allowed.', array('@view_mode' => $view_mode, '@allowed' => implode(', ', $view_modes))));
  }
}

/**
 * Adds a text field (single line) to an entity.
 *
 * Returns the instance.
 */
function fieldhelp_text_add($entity_type, $field_name, $bundle, $label, $weight = 0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($field)) {
    fieldhelp_text_create_field($field_name);
  }
  if (empty($instance)) {
    $instance = fieldhelp_text_create_instance($entity_type, $field_name, $bundle, $label, $weight);
  }
  return $instance;
}

/**
 * Adds a textarea to an entity.
 */
function fieldhelp_text_long_add($entity_type, $field_name, $bundle, $label, $description = NULL, $weight = 0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($field)) {
    fieldhelp_text_long_create_field($field_name);
  }
  if (empty($instance)) {
    fieldhelp_text_long_create_instance($field_name, $bundle, $entity_type, $label, $description, $weight);
  }
}

/**
 * Create a text field.
 *
 * Pass through to fieldhelp_create_field; the default values are copied from
 * there just to help in IDE autocompletion.
 */
function fieldhelp_text_create_field($field_name, $cardinality = 1, $translatable = FALSE, $locked = FALSE, $settings = array(), $entity_types = array(), $indexes = array(), $storage = array()) {
  return fieldhelp_create_field($field_name, 'text', $cardinality, $translatable, $locked, $settings, $entity_types, $indexes, $storage);
}

/**
 * Attach (create an instance of) a text field to an entity.
 */
function fieldhelp_text_create_instance($entity_type, $field_name, $bundle, $label, $weight = 0, $description = '', $settings = array(), $instance_additional = array()){
  $widget = array(
    'type' => 'text_textfield',
    'weight' => $weight,
  );
  // Set sensible display defaults.  @TODO loop through all view modes.
  $display = array(
    'default' => array(
      'label' => 'hidden',
      'type' => 'text_default',
    ),
    'teaser' => array(
      'label' => 'hidden',
      'type' => 'text_default',
    ),
  );
  $required = FALSE;
  $default_value_function = '';
  return fieldhelp_create_instance($field_name, $bundle, $entity_type, $label, $description, $required, $default_value_function, $settings, $widget, $display, $instance_additional);
}

/**
 * Create a textarea field.
 */
function fieldhelp_text_long_create_field($field_name, $allowed_entity_types = array()) {
  $field = array(
    'field_name' => $field_name,
    'type' => 'text_long',
  );
  if (!empty($allowed_entity_types)) {
    $field['entity_types'] = $allowed_entity_types;
  }
  return field_create_field($field);
}

/**
 * Attach (create an instance of) a textarea field to an entity type.
 */
function fieldhelp_text_long_create_instance($field_name, $bundle_name, $entity_type, $label, $description = NULL, $weight = 0, $settings = array()) {
  $widget = array(
    'type' => 'text_textarea',
    'weight' => $weight,
  );
  $display = array(
    'default' => array(
      'label' => 'hidden',
      'type' => 'text_default',
    ),
    'teaser' => array(
      'label' => 'hidden',
      'type' => 'text_default',
    ),
  );
  $required = FALSE;
  $default_value_function = NULL;
  $instance_additional = array();
  return fieldhelp_create_instance($field_name, $bundle_name, $entity_type, $label, $description, $required, $default_value_function, $settings, $widget, $display, $instance_additional);
}

/**
 * Adds a url field to an entity.
 *
 * Note this is https://www.drupal.org/project/url not the more widely used
 * Link module.
 */
function fieldhelp_url_add($entity_type, $field_name, $bundle, $label, $description = NULL, $weight = 0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($field)) {
    fieldhelp_url_create_field($field_name);
  }
  if (empty($instance)) {
    fieldhelp_url_create_instance($field_name, $bundle, $entity_type, $label, $description, $weight);
  }
}

/**
 * Create a URL field.
 */
function fieldhelp_url_create_field($field_name, $allowed_entity_types = array()) {
  $field = array(
    'field_name' => $field_name,
    'type' => 'url',
  );
  if (!empty($allowed_entity_types)) {
    $field['entity_types'] = $allowed_entity_types;
  }
  return field_create_field($field);
}

/**
 * Attach (create an instance of) a URL field to an entity type.
 */
function fieldhelp_url_create_instance($field_name, $bundle_name, $entity_type, $label, $description = NULL, $weight = 0, $settings = array()) {
  $widget = array(
    'type' => 'url',
    'weight' => $weight,
  );
  $display = array(
    'default' => array(
      'label' => 'hidden',
      'type' => 'url_default',
    ),
    'teaser' => array(
      'label' => 'hidden',
      'type' => 'url_default',
    ),
  );
  $required = FALSE;
  $default_value_function = NULL;
  $instance_additional = array();
  return fieldhelp_create_instance($field_name, $bundle_name, $entity_type, $label, $description, $required, $default_value_function, $settings, $widget, $display, $instance_additional);
}

/**
 * Create an integer field.
 *
 * Pass through to fieldhelp_create_field; the default values are copied from
 * there just to help in IDE autocompletion.
 */
function fieldhelp_integer_create_field($field_name, $cardinality = 1, $translatable = FALSE, $locked = FALSE, $settings = array(), $entity_types = array(), $indexes = array(), $storage = array()) {
  return fieldhelp_create_field($field_name, 'number_integer', $cardinality, $translatable, $locked, $settings, $entity_types, $indexes, $storage);
}

/**
 * Attach (create an instance of) an integer field to an entity.
 */
function fieldhelp_integer_create_instance($entity_type, $field_name, $bundle_name, $label, $weight = 0, $settings = array(), $instance_additional = array()) {
  $instance = array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle_name,
    'label' => $label,
    'widget' => array(
      'type' => 'number',
      'weight' => $weight,
    ),
    'settings' => $settings,
    // @TODO if we are going to set sensible defaults, which is nice, should
    // cycle through all defined view modes.
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'number_integer',
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'number_integer',
      ),
    ),
  ) + $instance_additional;
  return field_create_instance($instance);
}

/**
 * Create a taxonomy field.
 *
 * Cardinality options are a number 1 or more or FIELD_CARDINALITY_UNLIMITED.
 */
function fieldhelp_taxonomy_create_field($field_name, $cardinality, $vocab_machine_name, $parent = 0) {
  $field = array(
    'field_name' => $field_name,
    'type' => 'taxonomy_term_reference',
    'cardinality' => $cardinality,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocab_machine_name,
          'parent' => $parent,
        ),
      ),
    ),
  );
  return field_create_field($field);
}

/**
 * Attach a taxonomy field to a bundle.
 */
function fieldhelp_taxonomy_create_instance($entity_type, $field_name, $bundle_name, $vocabulary, $label = NULL) {
  if (!$label) {
    $label = $vocabulary->name;
  }
  $instance = array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'label' => $label,
    'bundle' => $bundle_name,
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'label' => 'hidden',
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'label' => 'hidden',
      ),
    ),
  );
  return field_create_instance($instance);
}

/**
 * Create an options select term reference field allowing only one value.
 *
 * @param string $entity_type
 * @param string $bundle_name
 * @param string $vocabulary
 * @param string $label
 */
function fieldhelp_taxonomy_single_select_add($entity_type, $bundle_name, $vocabulary, $label = NULL) {
  $field_name = 'field_' . $vocabulary->machine_name;
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  if (empty($field)) {
    fieldhelp_taxonomy_create_field($field_name, 1, $vocabulary->machine_name);
  }
  if (empty($instance)) {
    $instance = fieldhelp_taxonomy_create_instance($entity_type, $field_name, $bundle_name, $vocabulary, $label);
    fieldhelp_instance_widget_set_type($instance, 'options_select');
    fieldhelp_instance_widget_set_weight($instance, -4);
    field_update_instance($instance);
  }
}

/**
 * Add a userreference field.
 */
function fieldhelp_userreference_add($entity_type, $field_name, $bundle, $label = NULL, $weight = 0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($field)) {
    fieldhelp_userreference_create_field($field_name);
  }
  if (empty($instance)) {
    fieldhelp_userreference_create_instance($entity_type, $field_name, $bundle, $label, $weight);
  }
}

/**
 * Create a userreference field.
 *
 * @TODO: Is creating a field really always the same, and we should just pass
 * the 'type' in to the same function?
 */
function fieldhelp_userreference_create_field($field_name, $cardinality = 1, $allowed_entity_types = array()) {
  $field = array(
    'field_name' => $field_name,
    'type' => 'user_reference',
    'cardinality' => $cardinality,
  );
  if (!empty($allowed_entity_types)) {
    $field['entity_types'] = $allowed_entity_types;
  }
  return field_create_field($field);
}

/**
 * Attach (create an instance of) a userreference instance to an entity.
 *
 * @TODO Allow setting alternate widget type options_select, options_buttons etc.
 */
function fieldhelp_userreference_create_instance($entity_type, $field_name, $bundle_name, $label = NULL, $widget_type = 'user_reference_default', $weight = 0, $settings = array(), $display = array()) {
  $label = ($label) ? $label : ucfirst($field_name);
  // If no display properties handed in give a default (also useful as a model).
  if (empty($display)) {
    $display = array(
      'default' => array(
        'label' => 'hidden',
        'type' => $widget_type,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => $widget_type,
      ),
    );
  }
  $instance = array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle_name,
    'label' => $label,
    'widget' => array(
      'type' => 'user_reference_autocomplete',
      'weight' => $weight,
    ),
    'settings' => $settings,
    'display' => $display,
  );
  return field_create_instance($instance);
}

/**
 * Creates a date field.
 *
 * @param string $field_name
 * @param int $cardinality
 * @param array $entity_types
 * @return array
 */
function fieldhelp_date_create_field($field_name, $cardinality = 1, $entity_types = array()) {
  $field = array(
    'field_name' => $field_name,
    'type' => 'datetime',
    'cardinality' => $cardinality,
    'entity_types' => $entity_types,
    'settings' => array(
      'granularity' => drupal_map_assoc(array('year', 'month', 'day', 'hour', 'minute')),
      'todate' => '',
    ),
  );
  return field_create_field($field);
}

/**
 * Creates a date field instance.
 *
 * @param string $entity_type
 * @param string $field_name
 * @param string $bundle_name
 * @param string $label
 * @param int $weight
 * @return array
 */
function fieldhelp_date_create_instance($entity_type, $field_name, $bundle_name, $label, $weight = 1) {
  $instance = array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle_name,
    'label' => $label,
    'widget' => array(
      'type' => 'date_select',
      'weight' => $weight,
    ),
    'display' => array(
      'default' => array(
        'type' => 'date_default',
        'label' => 'hidden',
        'settings' => array(
          'format_type' => 'long',
          'multiple_number' => '',
          'multiple_from' => '',
          'multiple_to' => '',
          'fromto' => 'both',
        ),
      ),
    ),
  );
  return field_create_instance($instance);
}

/**
 * Creates a file field.
 *
 * @param string $field_name
 * @param int $cardinality
 * @param array $entity_types
 *
 * @return array
 */
function fieldhelp_file_create_field($field_name, $cardinality = 1, $entity_types = array()) {
  $field = array(
    'field_name' => $field_name,
    'type' => 'file',
    'cardinality' => $cardinality,
    'entity_types' => $entity_types,
    'settings' => array(
      'uri_scheme' => variable_get('file_default_scheme', 'public'),
    ),
  );
  return field_create_field($field);
}

/**
 * Creates a file field instance.
 *
 * @param string $entity_type
 * @param string $field_name
 * @param string $bundle_name
 * @param string $label
 * @param int $weight
 *
 * @return array
 */
function fieldhelp_file_create_instance($entity_type, $field_name, $bundle_name, $label, $weight = 1) {
  $instance = array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle_name,
    'label' => $label,
    'settings' => array(
      'file_extensions' => '',
      'file_directory' => '',
      'max_filesize' => '',
      'description_field' => 0,
    ),
    'widget' => array(
      'type' => 'file_generic',
      'weight' => $weight,
    ),
    'display' => array(
      'default' => array(
        'type' => 'file_default',
        'label' => 'hidden',
      ),
    ),
  );
  return field_create_instance($instance);
}

/**
 * Creates an image field.
 *
 * Accept optional default image file ID and add image-unique settings and pass
 * through to fieldhelp_create_field().
 */
function fieldhelp_image_create_field($field_name, $default_image_fid = NULL, $cardinality = 1, $translatable = FALSE, $locked = FALSE, $settings = array(), $entity_types = array(), $indexes = array(), $storage = array()) {
  $settings += array(
    'uri_scheme' => variable_get('file_default_scheme', 'public'),
  );
  if ($fid) {
    $settings['default_image'] = $fid;
  }
  return fieldhelp_create_field($field_name, 'image', $cardinality, $translatable, $locked, $settings, $entity_types, $indexes, $storage);
}

/**
 * Creates an image instance.
 *
 * Accept optional default image file ID and add image-unique settings and pass
 * through to fieldhelp_create_instance().
 *
 * Note that $settings['file_extensions'] = 'png gif jpg jpeg' cannot be
 * extended (only limited) as those are the formats image module accepts.
 */
function fieldhelp_image_create_instance($field_name, $bundle, $entity_type = 'node', $fid = NULL, $label = NULL, $description = '', $required = FALSE, $default_value_function = '', $settings = array(), $widget = array(), $display = array(), $instance_additional = array()) {
  $settings += array(
    'file_directory' => $field_name,
    'alt_field' => 0,
  );
  if ($fid) {
    $settings['default_image'] = $fid;
  }
  return fieldhelp_create_instance($field_name, $bundle, $entity_type, $label, $description, $required, $default_value_function, $settings, $widget, $display, $instance_additional);
}

/**
 * Sets referenceable user roles on a user_reference field.
 *
 * Only users having those roles can be referenced by the given field.
 *
 * This function replaces the current values with the given roles. Any role not
 * present in the array will be unset.
 *
 * @param string $field_name
 *   The field's name.
 * @param array $roles
 *   This can be an array of role IDs or names to make referenceable.
 */
function fieldhelp_user_reference_set_referenceable_roles($field_name, array $roles) {
  $field = field_info_field($field_name);
  $field['settings']['referenceable_roles'] = array();
  // Build the array structure expected by field_update_field.
  foreach ($roles as $role) {
    if (!is_numeric($role)) {
      $rid = user_role_load_by_name($role)->rid;
    }
    else {
      $rid = $role;
    }
    $field['settings']['referenceable_roles'][$rid] = $rid;
  }
  field_update_field($field);
}

/**
 * Sets the referenceable status.
 *
 * Only users having an enabled status can be referenced by the given field.
 *
 * @param string $field_name
 *   The field's name.
 * @param bool $active
 *   Active users can be referenced if TRUE.
 * @param bool $blocked
 *   Blocked users can be referenced if TRUE.
 */
function fieldhelp_user_reference_set_referenceable_status($field_name, $active, $blocked = FALSE) {
  $field = field_info_field($field_name);
  $field['settings']['referenceable_status'][1] = $active;
  $field['settings']['referenceable_status'][0] = $blocked;
  field_update_field($field);
}
