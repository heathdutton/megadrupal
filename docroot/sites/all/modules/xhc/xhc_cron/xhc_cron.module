<?php

/**
 * @file XML sitemap Http Cache cron's module.
 */

/**
 * Implements hook_cron().
 *
 * @return array $items
 */
function xhc_cron_menu() {
  $items['admin/config/search/xmlsitemap/http-cache/cron'] = array(
    'title' => 'Add a cron for XML sitemap Http Caching',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xhc_cron_admin_form'),
    'access arguments' => array('administer xmlsitemap'),
    'type' => MENU_LOCAL_ACTION,
    'modal' => TRUE,
  );
  $items['admin/config/search/xmlsitemap/http-cache/cron/delete/%'] = array(
    'title' => 'Add a cron for XML sitemap Http Caching',
    'page callback' => 'xhc_cron_delete',
    'page arguments' => array(7),
    'access arguments' => array('administer xmlsitemap'),
    'modal' => TRUE,
  );
  return $items;
}

/**
 * xhc_cron add action form.
 *
 * @return array $form
 */
function xhc_cron_admin_form() {
  $options = array();
  $sitemaps = xmlsitemap_sitemap_load_multiple(FALSE);
  $xhc_cron_tasks = variable_get('xhc_cron_tasks', array());
  foreach ($sitemaps as $sitemap) {
    if (!isset($xhc_cron_tasks[$sitemap->smid])) {
      $admin_smid = $sitemap->smid;
      $sitemap_url = url($sitemap->uri['path'], $sitemap->uri['options']);
      $options[$admin_smid] = $sitemap_url;
    }
  }
  if (count($options)) {
    $form['smid'] = array(
      '#type' => 'select',
      '#title' => t('Available xml sitemaps for http-caching with Elysia cron:'),
      '#options' => $options,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit')
    );
  }
  else {
    $form['message'] = array(
      '#markup' => 'No new xmlsitemap available for Elysia cron.'
    );
  }
  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * @param type $form_id
 * @param array $form_state
 */
function xhc_cron_admin_form_submit($form_id, &$form_state) {
  $xhc_cron_tasks = variable_get('xhc_cron_tasks');
  $smid = $form_state['values']['smid'];
  $xhc_cron_tasks[$smid] = $form_id['smid']['#options'][$smid];
  variable_set('xhc_cron_tasks', $xhc_cron_tasks);
  $form_state['redirect'] = array('admin/config/search/xmlsitemap/http-cache');
}

/**
 * xhc_cron tasks list form.
 *
 * @return array $form
 */
function xhc_cron_form_list() {
  global $base_url;
  // Poormancron must be disabled because xhc_cron takes a long time to execute.
  $cron_safe_threshold = variable_get('cron_safe_threshold');
  if ($cron_safe_threshold !== '0') {
    $err = t('Please visit !elysia to disable the poormanscron, or users triggering crons will experience excessive loading time due to xhc_cron.', array(
      '!elysia' => l('Elysia cron installation settings', 'admin/config/system/cron/settings', array('fragment' => 'edit-installation')),
    ));
    $help_items = array($err);
    drupal_set_message($err, 'error');
  }
  else {
    $cron_link = 'cron.php?cron_key=' . variable_get('cron_key');
    $sample_cron_code = '<pre># webserver\'s crontab (e.g. nginx user)
0 3 * * * /path/to/webroot/scripts/fast-cgi-cache-purge.sh

#!/bin/sh
# webroot/scripts/fast-cgi-cache-purge.sh
rm -rf /var/cache/nginx/website/*
curl ' . $base_url . '/' . $cron_link . '
</pre>';
    $help_items = array(
      'reset_link' => t('Reset your cron statistics to ensure the first cron run on schedule: !reset_link.', array(
        '!reset_link' => l('admin/config/system/cron/maintenance', 'admin/config/system/cron/maintenance')
      )),
      'cron_link' => t('Trigger your xhc_cron jobs by visiting !cron_link', array(
        '!cron_link' => l($cron_link, $cron_link)
      )),
      'cron_status' => t('Visit !cron_status page to verify that your cron ran and its execution time.', array(
        '!cron_status' => l('Elysia cron status', 'admin/config/system/cron')
      )),
      'cron_example' => t('Here is an example unix webserver\'s cron script for refreshing the nginx fast-cgi http cache every 24hours at 4am : !sample_code You will need to adapt the !xhc_cron <strong>Schedule rule setting</strong> accordingly.', array(
        '!sample_code' => $sample_cron_code,
        '!xhc_cron' => l('xhc_cron Elysia cron', 'admin/config/system/cron/settings')
      ))
    );
  }
  $header = array(
    'sitemap_link' => array('data' => t('Sitemap Link')),
    'smid' => array('data' => t('SMID')),
    'delete' => array('data' => t('Cron')),
  );
  $xhc_cron_tasks = variable_get('xhc_cron_tasks', array());
  $rows = array();
  foreach ($xhc_cron_tasks as $smid => $sitemap_link) {
    $row = array();
    $row['sitemap_link'] = l($sitemap_link, $sitemap_link);
    $row['smid'] = $smid;
    $row['operations'] = l('Remove', 'admin/config/search/xmlsitemap/http-cache/cron/delete/' . $smid, array('attributes' => array(
      'onclick' => 'return confirm(\'Are you sure you want to remove this task from Elysia cron ?\')'))
    );
    $rows[] = $row;
  }
  if (count($rows)) {
    $build['title'] = array('#markup' => '<h3>Elysia cron tasks:</h3><br/>');
    $build['xmlsitemap_custom_table'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    );
    $build['cron_infos'] = array(
      '#title' => 'Tips:',
      '#theme' => 'item_list',
      '#items' => $help_items,
    );
    return $build;
  }
}

/**
 * Callback for 'admin/config/search/xmlsitemap/http-cache/cron/delete/%'
 *
 * @param type $smid
 * @return array $form
 */
function xhc_cron_delete($smid) {
  $xhc_cron_tasks = variable_get('xhc_cron_tasks', array());
  unset($xhc_cron_tasks[$smid]);
  variable_set('xhc_cron_tasks', $xhc_cron_tasks);
  drupal_goto('admin/config/search/xmlsitemap/http-cache/');
}

/**
 * Implements hook_cronapi().
 */
function xhc_cron_cronapi($op, $job = NULL) {
  $xhc_cron_tasks = variable_get('xhc_cron_tasks');
  $items = array();
  $id = 0;
  foreach ($xhc_cron_tasks as $smid => $sitemap_link) {
    $items['xhc_cron_' . $id] = array(
      'description' => t('Http Cache generation from !sitemap_link', array(
        '!sitemap_link' => $sitemap_link
      )),
      'weight' => $id,
      'rule' => '0 3 * * *',
      'callback' => 'xhc_generate',
      'arguments' => array($smid, TRUE),
    );
    $id++;
  }
  return $items;
}