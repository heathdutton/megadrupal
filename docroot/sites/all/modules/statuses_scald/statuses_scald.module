<?php

/**
 * @file
 * Allows users to easily attach Scald atoms into statuses.
 */

/**
 * Implements hook_permission().
 */
function statuses_scald_permission() {
  $permissions = array();

  foreach (scald_types() as $type) {
    $permissions['attach ' . $type->type . ' atoms into statuses'] = array(
      'title' => t('Attach %type atoms into statuses', array('%type' => $type->type)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function statuses_scald_menu() {
  $items = array();
  $items['admin/config/statuses/scald'] = array(
    'title' => 'Scald integration for Statuses',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('statuses_scald_admin_form'),
    'description' => 'Configure the Scald integration for Statuses.',
    'access arguments' => array('administer Statuses settings'),
  );
  return $items;
}

/**
 * Provides the main Statuses Scald settings form.
 */
function statuses_scald_admin_form() {
  $options = array();
  foreach (scald_contexts() as $name => $context) {
    if (empty($context['hidden'])) {
      $options[$name] = $context['title'];
    }
  }

  $form['statuses_scald_default_context'] = array(
    '#type' => 'select',
    '#title' => t('Default context'),
    '#options' => $options,
    '#default_value' => variable_get('statuses_scald_default_context', 'full'),
    '#description' => t('The default context to use for rendering attached Scald atoms.'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_library().
 */
function statuses_scald_library() {
  $path = drupal_get_path('module', 'statuses_scald');
  $libraries = array();

  $libraries['library'] = array(
    'title' => 'Statuses Scald library',
    'website' => 'http://drupal.org/project/statuses_scald',
    'version' => '1.x',
    'dependencies' => array(
      array('dnd', 'library'),
    ),
    'js' => array(
      $path . '/statuses_scald.js' => array(),
    ),
  );

  return $libraries;
}

/**
 * Load the attachied atom for a particular status.
 *
 * @param $sid
 *   The SID of the status.
 *
 * @return
 *   Either atom id or NULL.
 */
function statuses_scald_load($sid) {
  return db_query("SELECT atom_id FROM {statuses_scald} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function statuses_scald_form_statuses_edit_alter(&$form, &$form_state) {
  if ($attachment = statuses_scald_load($form['sid']['#value'])) {
    if ($function = statuses_scald_load_function($attachment->type, 'edit_form')) {

      $info = statuses_scald_get_plugin($attachment->type);
      $name = $info['name'] ? $info['name'] : $attachment->type;

      $form['statuses_scald'] = array(
        '#weight' => -25.1,
      );
      $form['statuses_scald']['open'] = array(
        '#markup' => '<div class="statuses_scald-edit-wrapper-outer"><span class="fbsmp-edit-text"></span>' .
          '<h3 class="statuses_scald-edit-plugin-header fbsmp-edit-' . $attachment->type . '-header">' . $name . '</h3><div class="fbsmp-edit-form-box">',
      );
      $form['statuses_scald'] += $function($attachment, $form, $form_state);
      $form['statuses_scald']['attachment'] = array(
        '#type' => 'value',
        '#value' => $attachment,
      );
      $form['statuses_scald']['close'] = array(
        '#markup' => '</div></div>',
      );

      $form['#validate'][] = 'statuses_scald_edit_status_validate';

      $key = array_search('statuses_edit_submit', $form['#submit']);
      unset($form['#submit'][$key]);
      $form['#submit'][] = 'statuses_scald_edit_status_submit';
    }
    else {
      $form['statuses_scald_message'] = array(
        '#markup' => '<strong>' . t('The attachment to this status cannot be edited.') . '</strong>',
      );
    }
  }
}

/**
 * Render the attached atom.
 */
function statuses_scald_render_attachment($atom_id, $context = NULL) {
  if ($atom_id && ($atom = scald_atom_load($atom_id))) {
    if (!$context) {
      $context = variable_get('statuses_scald_default_context', 'full');
    }
    return scald_render($atom, $context);
  }
}

/**
 * Implements hook_preprocess_statuses_item().
 */
function statuses_scald_preprocess_statuses_item(&$vars) {
  if (($atom_id = statuses_scald_load($vars['status']->sid)) && ($attachment = statuses_scald_render_attachment($atom_id))) {
    $vars['attachment'] = $attachment;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function statuses_scald_form_statuses_box_alter(&$form, &$form_state) {
  $form['fbss-status']['#description'] = t('You can drag and drop Scald atom into the below textarea as attachment.');
  $form['scald_atom'] = array(
    'atom_sid' => array(
      '#type' => 'textfield',
      '#name' => 'atom_sid',
      '#attributes' => array(
        'data-scald-context' => variable_get('statuses_scald_default_context', 'full'),
      ),
    ),
    'atom_preview' => array(
      '#markup' => '<div class="atom-preview"/>',
    ),
    '#weight' => -5,
    '#attached' => array(
      'library' => array(array('statuses_scald', 'library')),
    ),
  );
}

/**
 * Implements hook_statuses_save().
 */
function statuses_scald_statuses_save($object, $context, $edit, $options) {
  $sas = $options['form_state']['values']['atom_sid'];
  $sids = scald_included($sas);
  $sid = reset($sids);

  if ($sid) {
    db_merge('statuses_scald')
      ->key(array('sid' => $object->sid))
      ->fields(array(
        'atom_id' => $sid,
      ))
      ->execute();
  }
  else {
    db_delete('statuses_scald', array('sid' => $object->sid));
  }
}

/**
 * Implements hook_statuses_form_ahah_alter().
 */
function statuses_scald_statuses_form_ahah_alter(&$new_form, $form) {
  $new_form['scald_atom'] = $form['scald_atom'];
}

/**
 * The JavaScript form callback.
 */
function statuses_scald_form_js($form, $form_state) {
  return $form['scald_atom'];
}

/**
 * Implements hook_views_api().
 */
function statuses_scald_views_api() {
  return array('api' => 3);
}
