<?php
/**
 * @file
 * Code for the Logo Doodle feature.
 */

include_once 'logo_doodle.features.inc';

/**
 * Implements hook_file_url_alter().
 */
function logo_doodle_file_url_alter(&$uri) {
  // This behaviour seems odd.
  // Whenever you request a theme setting of the item which has been passed
  // to the alter hook, the return is null.
  if (is_null(theme_get_setting('logo'))) {

    $site_active_doodle = logo_doodle_get_site_active_doodle();
    if (!is_null($site_active_doodle)) {
      $uri = image_style_path(variable_get('logo_doodle_image_style', 'thumbnail'), $site_active_doodle);
    }

    if (module_exists('birthdays')) {
      $user_active_doodle = logo_doodle_birthdays_get_user_birthday_doodle();
      if (!is_null($user_active_doodle)) {
        $uri = image_style_path(variable_get('logo_doodle_image_style', 'thumbnail'), $user_active_doodle);
      }
    }
  }
}

/**
 * Returns the url of a scheduled doodle.
 *
 * @return null|string
 *   The url of a scheduled doodle.
 */
function logo_doodle_get_site_active_doodle() {
  static $current_doodle;
  if (!isset($current_doodle)) {
    if (($cache = cache_get('logo_doodle')) && !empty($cache->data)) {
      $current_doodle = $cache->data;
    }
    else {
      $now = date_now(date_default_timezone());
      $query = new EntityFieldQuery();
      $entities = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'logo_doodle')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_logo_doodle_duration', 'value', $now->format('Y-m-d H:i:s'), '<=')
        ->fieldCondition('field_logo_doodle_duration', 'value2', $now->format('Y-m-d H:i:s'), '>=')
        ->execute();
      if (empty($entities) or is_null($entities['node'])) {
        return NULL;
      }
      $node = node_load(current($entities['node'])->nid);
      $image = current(field_get_items('node', $node, 'field_logo_doodle_image'));
      $expiry = current(field_get_items('node', $node, 'field_logo_doodle_duration'));
      $current_doodle = $image['uri'];
      cache_set('logo_doodle', $current_doodle, 'cache', strtotime($expiry['value2']));
    }
  }
  return $current_doodle;
}

/**
 * Returns the url of a birthday doodle (if configured).
 *
 * @return null|string
 *   The url of the birthday doodle.
 */
function logo_doodle_birthdays_get_user_birthday_doodle() {
  global $user;
  $current_doodle = NULL;
  $now = date_now(date_default_timezone());
  $user = user_load($user->uid);
  if (is_null(variable_get('logo_doodle_birthday_field'))) {
    return $current_doodle;
  }
  $birth_date = field_get_items('user', $user, variable_get('logo_doodle_birthday_field'));
  if (!$birth_date) {
    return $current_doodle;
  }
  $birth_date = current($birth_date);
  if ($birth_date['month'] == $now->format('m') and $birth_date['day'] == $now->format('d')) {
    $current_doodle = file_load(variable_get('logo_doodle_birthday_filename'))->uri;
  }
  return $current_doodle;
}

/**
 * Implements hook_form_alter().
 */
function logo_doodle_form_logo_doodle_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_logo_doodle_duration']['#element_validate'][] = 'logo_doodle_form_logo_doodle_node_form_validate';
}

/**
 * Validation to ensure that there are no overlapping time-frames.
 *
 * @param array $element
 *   The element being ajax-validated.
 * @param array $form_state
 *   The submitted values of the form.
 * @param array $form
 *   The drupal form of which the element is a part of.
 */
function logo_doodle_form_logo_doodle_node_form_validate($element, &$form_state, $form) {
  $input_values = drupal_array_get_nested_value($form_state, array(
    'values',
    'field_logo_doodle_duration',
    LANGUAGE_NONE,
    0,
  ));

  // A regular query was simpler to the EntityFieldQuery alternative due to the
  // OR condition.
  $query = db_select('field_data_field_logo_doodle_duration', 'duration');
  $query->join('node', 'node', 'node.nid = duration.entity_id');
  $count = $query
    ->condition('duration.deleted', 0, '=')
    ->condition('node.type', 'logo_doodle', '=')
    ->condition('node.status', 1, '=')
    ->condition('duration.entity_type', 'node', '=')
    ->condition('duration.entity_id', isset($form['#node']->nid) ? $form['#node']->nid : 0, '<>')
    ->condition(db_or()
        ->condition('duration.field_logo_doodle_duration_value', array($input_values['value'], $input_values['value2']), 'BETWEEN')
        ->condition('duration.field_logo_doodle_duration_value2', array($input_values['value'], $input_values['value2']), 'BETWEEN')
    )
    ->fields('node', array('nid'))
    ->execute()
    ->rowCount();

  if ($count) {
    form_set_error('field_logo_doodle_duration', "There are currently $count doodle(s) that have an overlapping duration");
  }
}

/**
 * Implements hook_menu().
 */
function logo_doodle_menu() {
  return array(
    'admin/config/system/logo_doodle' => array(
      'title' => 'Logo Doodles',
      'description' => 'Configure logo doodles for the site',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('logo_doodle_configure_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'logo_doodle.admin.inc',
    ),
  );
}
