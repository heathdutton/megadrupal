<?php

// change menu active item
function _node_breadcrumb_set_location($mid) {
  $item = menu_link_load($mid);
  if (variable_get('node_breadcrumb_add_active_class', FALSE)) {
    $GLOBALS['node_breadcrumb_active_item'] = $mid;
  }
  // based on code from module https://www.drupal.org/project/context
  menu_tree_set_path($item['menu_name'], $item['link_path']);
  $trail = array();
  while($item) {
    array_unshift($trail, $item);
    $item = menu_link_load($item['plid']);
  }
  array_unshift($trail, array(
    'title' => t('Home'),
    'href' => '<front>',
    'link_path' => '',
    'localized_options' => array(),
    'type' => 0,
  ));
  menu_set_active_trail($trail);
}

// set "active" class for menu item
function node_breadcrumb_preprocess_menu_link(&$vars) {
	$mid = @$GLOBALS['node_breadcrumb_active_item'];
	if ($mid && $vars['element']['#original_link']['mlid'] == $mid) {
		$vars['element']['#localized_options']['attributes']['class'][] = 'active';
	}
}

function node_breadcrumb_node_view($node, $view_mode, $langcode) {
	if ($view_mode == 'full' && !drupal_is_front_page()) {
		//_node_breadcrumb_set_location(300);
    $db_rules = db_query("select * from {node_breadcrumb_rule} order by weight, rid");
    foreach ($db_rules as $rule) {
      // check node type
      if ($rule->node_type != '' && $node->type != $rule->node_type) continue;
      // check terms
      foreach (array($rule->tid1, $rule->tid2) as $tid) {
        if ($tid > 0) {
          if (empty($node->taxonomy[$tid])) continue 2;
        }
        elseif ($tid < 0) {
          foreach ($node->taxonomy as $term) {
            if ($term->vid == -$tid) continue 2;
          }
          continue 2;
        }
      }
      // check php condition
      if ($rule->condition != '') {
        eval("\$condition=$rule->condition;");
        if (!$condition) {
          continue;
        }
      }
      // apply menu location
      _node_breadcrumb_set_location($rule->mid);
      break;
    }
    module_invoke_all("node_breadcrumb", $node);
  }
}

function node_breadcrumb_menu() {
  $items = array();
  $items['admin/config/user-interface/node_breadcrumb'] = array(
    'title' => 'Node breadcrumb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_breadcrumb_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function _node_breadcrumb_rule_form($fieldset_title, $node_type, $tids, $condition, $mid, $weight, $weight_delta, $submit) {
  $form = array('#type' => 'fieldset', '#title' => $fieldset_title);

  // node type
  $types = node_type_get_types();
  $types_select = array(
    '#type' => 'select',
    '#title' => t('Content type'),
    '#options' => array('' => "<". t('none') .">")
  );
  foreach ($types as $type) {
    $types_select['#options'][$type->type] = $type->name;
  }
  if ($type) {
    $types_select['#default_value'] = $node_type;
  }
  $form['node_type'] = $types_select;

  // term
  if (module_exists('taxonomy') && FALSE) {
    $form['tid'] = array('#type' => 'fieldset', '#title' => t('Categories'), '#attributes' => array('class' => 'node_breadcrumb_categories'));
    $vocabularies = taxonomy_get_vocabularies();
    $none_option = "<". t('none') .">";
    $vid2tid = array();
    if (is_array($tids)) {
      foreach ($tids as $tid) {
        if ($tid > 0) {
          $term = taxonomy_get_term($tid);
          $vid2tid[$term->vid] = $tid;
        }
        elseif ($tid < 0) {
          $vid2tid[-$tid] = $tid;
        }
      }
    }
    foreach ($vocabularies as $vocabulary) {
      $taxonomy_form = taxonomy_form($vocabulary->vid);
      unset($taxonomy_form['#options']['']);
      $taxonomy_form['#multiple'] = FALSE;
      $taxonomy_form['#default_value'] = $vid2tid[$vocabulary->vid] ? $vid2tid[$vocabulary->vid] : 0;
      unset($taxonomy_form['#size']);
      unset($all_option);
      $all_option->option = array(-$vocabulary->vid => "<". t("any") .">");
      array_unshift($taxonomy_form['#options'], $all_option);
      array_unshift($taxonomy_form['#options'], $none_option);
      $form['tid']["vid_$vocabulary->vid"] = $taxonomy_form;
    }
  }

  // php condition
  $form['condition'] = array(
    '#type' => 'textarea',
    '#rows' => 1,
    '#title' => t('Condition'),
    '#description' => t('Additional PHP expression, e. g., $node->type == \'story\' || $node->type == \'news\''),
    '#default_value' => $condition,
  );

  // menu item
  $menu_item = menu_link_load($mid);
  $form['mid'] = array(
    '#type' => 'select',
    '#title' => t('Menu item'),
    '#required' => TRUE,
    '#options' => menu_parent_options(menu_get_menus(), array('mlid' => 0)),
    '#default_value' => "$menu_item[menu_name]:$mid",
  );

  // weight
  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $weight,
    '#required' => TRUE,
    '#delta' => $weight_delta,
  );

  // submit
  $form['submit'] = array('#type' => 'submit', '#value' => $submit);

  return $form;
}

function node_breadcrumb_admin_settings($form, &$form_state, $rid = NULL) {
  drupal_add_css(drupal_get_path('module', 'node_breadcrumb') .'/node_breadcrumb.css');

  $weight_delta = max(5, db_query("select max(abs(weight)) from {node_breadcrumb_rule}")->fetchField() + 1);
  if (module_exists('taxonomy') && FALSE) $vocabularies = taxonomy_get_vocabularies();
  $types = node_type_get_types();
  
  // add rule
  $form['add'] = _node_breadcrumb_rule_form(t('Add rule'), NULL, NULL, NULL, NULL, 0, $weight_delta, t('Add rule'));
  
  // edit rule
  if ($rid) {
    $db_rule = db_query("SELECT * FROM {node_breadcrumb_rule} WHERE rid=:rid", array(':rid' => $rid));
    $rule = $db_rule->fetchObject();
    if ($rule->rid) {
      $form['edit'] = _node_breadcrumb_rule_form(t('Edit rule'), $rule->node_type, array($rule->tid1, $rule->tid2), $rule->condition, $rule->mid, $rule->weight, $weight_delta, t('Save rule'));
      $form['edit']['rid'] = array('#type' => 'hidden', '#value' => $rid);
      $form['edit']['cancel'] = array('#type' => 'submit', '#value' => t('Cancel'));
      unset($form['add']);
    }
  }

  // rules
  $db_rules = db_query("select * from {node_breadcrumb_rule} order by weight, rid");
  $rids = array();
  foreach ($db_rules as $rule) {
    $menu_item = menu_link_load($rule->mid);
    $terms = array();
    if (module_exists('taxonomy') && FALSE) {
      if ($rule->tid1) {
        $term = taxonomy_get_term($rule->tid1);
        $terms[] = $rule->tid1 > 0 ? l($term->name, "taxonomy/term/$rule->tid1") : (t("any of") ." &lt;". $vocabularies[-$rule->tid1]->name ."&gt;");
      }
      if ($rule->tid2) {
        $term = taxonomy_get_term($rule->tid2);
        $terms[] = l($term->name, "taxonomy/term/$rule->tid2");
      }
    }
    $condition = '';
    if ($rule->condition != '') {
      $condition = check_plain($rule->condition);
      $js_condition = check_plain(str_replace("'", "\\'", $rule->condition));
      $condition = "<a title=\"$condition\" href=\"javascript:prompt('". t('Condition') ."','$js_condition');void(0);\">PHP</a>";
    }
    $rids[$rule->rid] = '';
    $form['rules']['node_type'][$rule->rid] = array('#type' => 'markup', '#markup' => $types[$rule->node_type]->name);
    $form['rules']['tid'][$rule->rid] = array('#type' => 'markup', '#markup' => empty($terms) ? "<". t('none') .">" : join(", ", $terms));
    $form['rules']['condition'][$rule->rid] = array('#type' => 'markup', '#markup' => $condition);
    $form['rules']['mid'][$rule->rid] = array('#type' => 'markup', '#markup' => l($menu_item['title'], $menu_item['href']));
    $form['rules']['weight']["weight_$rule->rid"] = array('#type' => 'weight', '#default_value' => $rule->weight, '#required' => TRUE, '#delta' => $weight_delta);
    $form['rules']['edit'][$rule->rid] = array('#type' => 'markup', '#markup' => l(t('edit'), "admin/config/user-interface/node_breadcrumb/$rule->rid"));
  }
  $form['rules']['delete'] = array('#type' => 'checkboxes', '#options' => $rids);
  if (isset($form['rules']['node_type'])) {
    $form['rules']['submit'] = array('#type' => 'submit', '#value' => t('Delete rule'));
    $form['rules']['save']   = array('#type' => 'submit', '#value' => t('Save weights'));
  }
  
  // more options
  $form['more'] = array('#type' => 'fieldset', '#title' => 'More options');
  $form['more']['add_active_class'] = array('#type' => 'checkbox', '#title' => 'Add <strong>active</strong> class for menu item', '#default_value' => variable_get('node_breadcrumb_add_active_class', FALSE));
  $form['more']['save'] = array('#type' => 'submit', '#value' => t('Save options'));

  return $form;
}

function node_breadcrumb_theme() {
  return array(
    'node_breadcrumb_admin_settings' => array(
      'render element' => 'form',
    ),
  );
}

function theme_node_breadcrumb_admin_settings($vars) {
  $form = $vars['form'];
  $output = "";
  if (!empty($form['rules']['node_type'])) {
    $header = array(/*theme('table_select_header_cell')*/'x', t('Type'), t('Term'), t('Condition'), t('Menu item'), t('Weight'), t('Operations'));
    foreach (element_children($form['rules']['node_type']) as $rid) {
      $rows[] = array(
        drupal_render($form['rules']['delete'][$rid]),
        drupal_render($form['rules']['node_type'][$rid]),
        drupal_render($form['rules']['tid'][$rid]),
        drupal_render($form['rules']['condition'][$rid]),
        drupal_render($form['rules']['mid'][$rid]),
        drupal_render($form['rules']['weight']["weight_$rid"]),
        drupal_render($form['rules']['edit'][$rid]),
      );
    }
    $rows[] = array(
      array('data' => drupal_render($form['rules']['submit']), 'colspan' => 5),
      array('data' => drupal_render($form['rules']['save'])),
      array('data' => ''),
    );
    $rules = theme('table', array('header' => $header, 'rows' => $rows));
    $output .= "<fieldset><legend>". t("Rules") ."</legend>$rules</fieldset>";
  }
  $output .= drupal_render_children($form);
  return $output;
}

/*
function node_breadcrumb_admin_settings_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Delete rule') || $form_state['values']['op'] == t('Save weights') || $form_state['values']['op'] == t('Save options')) {
    return;
  }

  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 4) == 'vid_' && $value != 0) $tids++;
  }
  if ($tids > 2) {
    form_set_error('tid', t('You may select not more than 2 terms.'));
  }
  elseif ($form_state['values']['node_type'] == '' && $tids == 0 && empty($form_state['values']['condition'])) {
    form_set_error('', t('Fill the form below.'));
  }
}
*/

function node_breadcrumb_admin_settings_submit($form, &$form_state) {
  if (isset($form_state['values']['mid'])) {
    $mid = $form_state['values']['mid'];
    $mid_colon = strpos($mid, ":");
    $mid = $mid_colon === FALSE ? NULL : substr($mid, $mid_colon + 1);
  }
  if ($form_state['values']['op'] == t('Delete rule')) {
    foreach ($form_state['values']['delete'] as $value) {
      if ($value) {
        $rids[] = $value + 0;
      }
    }
    if ($rids) {
      db_query("DELETE FROM {node_breadcrumb_rule} WHERE rid IN (" . join(",", $rids) . ")");
      drupal_set_message(t('Rule(s) has been deleted.'));
    }
  }
  elseif ($form_state['values']['op'] == t('Save weights')) {
    foreach ($form_state['values'] as $key => $weight) {
      if (substr($key, 0, 7) == 'weight_') {
        $rid = substr($key, 7);
        db_query("update {node_breadcrumb_rule} set weight=:weight where rid=:rid", array(':weight' => $weight, ':rid' => $rid));
      }
    }
    drupal_set_message(t("Weights has been applied."));
  }
  elseif ($form_state['values']['op'] == t('Add rule')) {
    $tid = array();
    foreach ($form_state['values'] as $key => $value) {
      if (substr($key, 0, 4) == 'vid_' && $value != 0) $tid[] = $value;
    }
    db_query("INSERT INTO {node_breadcrumb_rule} (node_type, tid1, tid2, mid, weight, `condition`) VALUES (:node_type, :tid1, :tid2, :mid, :weight, :condition)",
      array(':node_type' => $form_state['values']['node_type'], ':tid1' => @$tid[0], ':tid2' => @$tid[1], ':mid' => $mid, ':weight' => $form_state['values']['weight'], ':condition' => $form_state['values']['condition'])
    );
    drupal_set_message(t('Rule has been added.'));
  }
  elseif ($form_state['values']['op'] == t('Save rule')) {
    $tid = array();
    foreach ($form_state['values'] as $key => $value) {
      if (substr($key, 0, 4) == 'vid_' && $value != 0) $tid[] = $value;
    }
    db_query("UPDATE {node_breadcrumb_rule} SET node_type=:node_type, tid1=:tid1, tid2=:tid2, mid=:mid, weight=:weight, `condition`=:condition WHERE rid=:rid",
      array(':node_type' => $form_state['values']['node_type'], ':tid1' => @$tid[0], ':tid2' => @$tid[1], ':mid' => $mid, ':weight' => $form_state['values']['weight'], ':condition' => $form_state['values']['condition'], ':rid' => $form_state['values']['rid'])
    );
    drupal_set_message(t('Rule has been saved.'));
    $form_state['redirect'] = "admin/config/user-interface/node_breadcrumb";
  }
  elseif ($form_state['values']['op'] == t('Cancel')) {
    $form_state['redirect'] = "admin/config/user-interface/node_breadcrumb";
  }
  elseif ($form_state['values']['op'] == t('Save options')) {
    variable_set('node_breadcrumb_add_active_class', $form_state['values']['add_active_class'] ? TRUE : FALSE);
    drupal_set_message(t('Options have been saved.'));
  }
}

//function _d($var) {if ($GLOBALS['user']->uid == 1) drupal_set_message("<pre>" . print_r($var, 1) . "</pre>");}
