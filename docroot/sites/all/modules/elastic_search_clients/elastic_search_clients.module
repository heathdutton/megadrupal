<?php

/**
 * @file
 * PHP Elastic search client libraries
 *
 * This module uses the composer to download the
 * php elastic search client libraries.
 */

/**
 * Implements hook_help().
 */
function elastic_search_clients_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#elastic_search_clients':
      // Display the introduction paragraph.
      $php_clients_link = l(t('Elasticsearch Clients'), 'http://www.elasticsearch.org/guide/clients/');
      $output .= '<p><b>' . t('Elastic search client libraries') . '</b></p>';
      $output .= '<p>' . t('This module provides download of a collection of all PHP
                elastic search client libraries listed in ');
      $output .= $php_clients_link . t(' using composer.
                First time installation will download elastica, elasticsearch and sherlock,
                however later if you want to keep only the specific ones you can do it using admin settings.') . '</p>';
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function elastic_search_clients_menu() {
  $items['admin/config/development/elastic-search-clients'] = array(
    'title' => 'Elastic Search Client Settings',
    'description' => 'Elastic Search Client Library Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elastic_search_clients_settings_form'),
    'access arguments' => array('administer elastic_search_clients'),
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function elastic_search_clients_settings_form() {
  // Build the list of php elastic search client libraries.
  // With corresponding status.
  $form = array();
  $installed_libraries_json_path = variable_get('composer_manager_vendor_dir', 'sites/all/vendor') . '/composer/installed.json';
  $installed_libraries_json = json_decode(file_get_contents($installed_libraries_json_path));
  $esc_json = json_decode(file_get_contents(drupal_get_path('module', 'elastic_search_clients') . '/composer.json'));
  $esc_libraries = array_keys(get_object_vars($esc_json->require));
  $esc_installed_libraries = array();
  foreach ($installed_libraries_json as $installed_library) {
    if (in_array($installed_library->name, $esc_libraries)) {
      $esc_installed_libraries[] = $installed_library->name;
    }
  }
  // If there is nothing to install then default
  // it to the installed list.
  $esc_libraries_to_install = variable_get('elastic_search_clients_install', $esc_installed_libraries);

  // Crete the tabular list to display.
  $header = array(t('Library'), t('Status'));
  $esc_libraries_status = array();
  foreach ($esc_libraries as $library) {
    $checkbox = array(
      '#name' => str_replace('/', '_', $library),
      '#title' => $library,
      '#type' =>'checkbox',
    );
    if (in_array($library, $esc_installed_libraries) && in_array($library, $esc_libraries_to_install)) {
      $checkbox['#value'] = 1;
      $checkbox['#attributes'] = array('checked' => 'checked');
      $status = t('Installed');
    }
    elseif (!in_array($library, $esc_installed_libraries) && in_array($library, $esc_libraries_to_install)) {
      $checkbox['#value'] = 1;
      $checkbox['#attributes'] = array('checked' => 'checked');
      $status = t("Under Installation (Please run 'drush composer-manager update' from the console)");
    }
    elseif (in_array($library, $esc_installed_libraries) && !in_array($library, $esc_libraries_to_install)) {
      $status = t("Under Un-Installation (Please run 'drush composer-manager update' from the console)");
    }
    else {
      $status = t('Not Installed');
    }
    $esc_libraries_status[] = array(drupal_render($checkbox), $status);
  }

  $form['ecs_libraries'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $esc_libraries_status,
    '#empty' =>t('List of libraries not available'),
  );

  $form['ecs_libraries_list'] = array(
    '#type' => 'hidden',
    '#value' => implode(',', $esc_libraries),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Rebuild composer.json',
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function elastic_search_clients_settings_form_submit(&$form, &$form_state) {
  $esc_libraries = explode(',', $form_state['values']['ecs_libraries_list']);
  $esc_libraries_to_install = array();
  $esc_remove_libraries = array();
  foreach ($esc_libraries as $library) {
    if (!isset($form_state['input'][str_replace('/', '_', $library)])) {
      $esc_remove_libraries[] = $library;
    }
    else {
      $esc_libraries_to_install[] = $library;
    }
  }
  variable_set('elastic_search_clients_remove', $esc_remove_libraries);
  variable_set('elastic_search_clients_install', $esc_libraries_to_install);

  // Rebuild the composer.json.
  composer_manager_write_file();

  drupal_set_message("Now just run 'drush composer-manager update' from the console.", 'warning');
}

/**
 * Implements hook_composer_json_alter().
 */
function elastic_search_clients_composer_json_alter(&$combined) {
  // Get the list of libraries to remove
  $esc_remove_libraries = variable_get('elastic_search_clients_remove', array());
  // Remove the libraries from the final build list.
  foreach ($combined['require'] as $key => $library) {
    if (in_array($key, $esc_remove_libraries)) {
      unset($combined['require'][$key]);
    }
  }
}



