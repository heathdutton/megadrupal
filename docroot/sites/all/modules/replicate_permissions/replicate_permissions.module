<?php
/**
 * @file
 *
 * Provides a fine-grain access control for Replicate UI
 */


/**
 * Implements hook_help()
 */
function replicate_permissions_help($path, $arg) {

  switch ($path) {

    case 'admin/help#replicate_permissions':

      $output = '';
      $output .= '<h3>' . t('About this module') . '</h3>';
      $output .= '<p>' . t('The Replicate Permissions module allows users with appropriate permissions to choose which roles are allowed to replicate which content types, as well as to make specific nodes replicable. The Replicate UI module only allows all content types to be replicable, which could cause issues in cases where site admins would like editors to be able to replicate only certain content types / nodes. This module can fill the gap nicely by providing a granular access control over the replication feature.') . '</p><p>&nbsp;</p>';

      $output .= '<h3>' . t('Available options') . '</h3>';
      $output .= '<p>' . t('There are two ways to control the way users replicate content with this module. These can be enabled / disabled in the module\'s <a href="@settings">settings page</a>:<br/>
                     <dl>
                      <dt><strong>Per-content type permissions</strong></dt>
                      <dd>The module generates a permission to replicate the content per content type, such as <em>"Replicate nodes of content type Article"</em>. By assigning this permission to a role, users of the role can create clones of the content type, while leaving nodes of other content types unavailable for replication.</dd>
                      <dt><strong>Per-node permissions</strong></dt>
                      <dd>The module adds a checkbox to the node edit form that determines whether a node is replicable. Users with <em>"Configure per-node replication option"</em> are able to see and change this setting. If this option is enabled on a node, users with the permission <em>"Replicate replicable nodes"</em> are able to replicate them.</dd>
                    </dl>
                     ', array('@settings' => url('admin/config/content/replicate_permissions'))) . '</p><p>&nbsp;</p>';

      $output .= '<h3>' . t('How permissions work') . '</h3>';
      $output .= '<p>' . t('The table below shows how the options work. <strong>Note:</strong> node access permissions take precedence so if you don\'t have the permission to view/create a certain content type, you will not be able to replicate a node of that content type.') .'</p>';
      $output .= '<table><thead><tr><td>&nbsp;</td><td>Permitted to bypass Replicate Permissions</td><td>Permitted to replicate any Article nodes</td><td>Permitted to replicate a specific Article node (node/42)</td></tr></thead>';
      $output .= '<tr><td>Can replicate any Article node</td><td>&#10004;</td><td>&#10004;</td><td>&#10007;</td></tr>';
      $output .= '<tr><td>Can replicate a specific Article node (node/42)</td><td>&#10004;</td><td>&#10004;</td><td>&#10004;</td></tr>';
      $output .= '<tr><td>Can replicate any Page node</td><td>&#10004;</td><td>&#10007;</td><td>&#10007;</td></tr>';
      $output .= '</table><p>&nbsp;</p>';

      return $output;

    case 'admin/config/content/replicate_permissions':
      return '<p>' . t('<p>The Replicate Permissions module allows users with appropriate permissions to choose which roles are allowed to replicate which content types, as well as to make specific nodes replicable. See <a href="@help">the help page</a> for more details.</p>', array('@help' => url('admin/help/replicate_permissions'))) . '</p>';

  }
}


/**
 * Implements hook_menu().
 */
function replicate_permissions_menu() {
  $items['admin/config/content/replicate_permissions'] = array(
    'title' => 'Replicate admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('replicate_permissions_admin_form'),
    'access arguments' => array('administer replicate_permissions module'),
    'file' => 'replicate_permissions.admin.inc',
  );
  return $items;
}


/**
 * Implements hook_menu_alter()
 */
function replicate_permissions_menu_alter(&$items) {
  //TODO: Allow access control per entity type
//  $items['replicate/%/%']['access callback'] = 'replicate_permissions_access';
//  $items['replicate/%/%']['access arguments'] = array(1, 2);
  $items['node/%node/replicate']['access callback'] = 'replicate_permissions_access';
  $items['node/%node/replicate']['access arguments'] = array(0, 1);
}


/**
 * Access control for access to replicate.
 */
function replicate_permissions_access($type, $entity) {

  $replicatePermissions = new replicatePermissions;

  //TODO: check if $etid is a string or object, then handle it accordingly in the following code

  // If the user has no access to Replicate UI, the node can't be replicated
  if ($replicatePermissions->checkReplicateUiAccess($type, $entity->nid) === TRUE) {

    // Ensure 'replicate per-content-type is enabled AND the user has access
    // permission to replicate the node type
    if (variable_get('replicate_permissions_per_content_type') == TRUE && $replicatePermissions->checkReplicateCtAccess($entity) == TRUE) {
      return TRUE;
    }


    // Check if this user can replicate nodes that are marked as replicable
    if ($replicatePermissions->checkReplicateNodePerm() == TRUE) {

      // Check if this node is replicable
      $flag = $replicatePermissions->nodeIsReplicable($entity->nid);
      if ($flag !== FALSE && is_numeric($flag)) {
        return TRUE;
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function replicate_permissions_permission() {

  $perms = array(
    'bypass replicate_permissions' => array(
      'title' => t('Bypass Replicate Permissions'),
      'description' => t('Bypass permissions set by Replicate Permissions module'),
    ),
    'administer replicate_permissions module' => array(
      'title' => t('Administer Replicate Permissions module'),
    ),
  );

  //TODO: Generate access permissions for all entity types apart from node

  // Generate access permissions for all node types.
  // First check if 'replicate per-content-type is enabled.
  if (variable_get('replicate_permissions_per_content_type') == TRUE) {
    foreach (replicate_permissions_permissions_get_configured_types() as $type) {
      $perms += replicate_permissions_list_permissions($type);
    }
  }
  if (variable_get('replicate_permissions_per_node') == TRUE) {
    $perms += array(
      'configure per-node replication option' => array(
        'title' => t('Configure per-node replication option'),
        'description' => t('If per-node replication permission option is enabled in the
          <a href="@replicate_permissions">Replicate Permissions</a> configuation page,
          roles with this permission can mark individual nodes as replicatable.',
          array('@replicate_permissions' => url('admin/config/content/replicate_permissions'))),
      ),
    );
    $perms += array(
      'replicate replicable node' => array(
        'title' => t('Replicate replicable node'),
        'description' => t('Users with this permission can replicate content that are marked as replicable. They also need
          to have the permission to create respective content. For example, if a role has this permission granted while having
          no permissions to create Story type, then the role cannot create a replica of Story content type node.'),
      ),
    );
  }
  return $perms;
}


/**
 * Implements hook_form_alter().
 */
function replicate_permissions_form_alter(&$form, &$form_state, $form_id) {

  // Add a checkbox to en/disable per-node replication
  if (strpos($form_id, 'node_form')) {
    $node_type = str_replace($form_id, '', 'node_form');

    $replicatePermissions = new replicatePermissions;

    // Only display this option if:
    //   - per-node replication is enabled
    //   - the user has the permission to configure per-node replication option
    if (variable_get('replicate_permissions_per_node') == TRUE && $replicatePermissions->checkConfigurePerNodeReplicationOption() == TRUE) {

      // Set the default value to TRUE if the nid exists in the table 'replicable_node'
      $is_replicable = $replicatePermissions->nodeIsReplicable($form['nid']['#value']);

      $form['replicate_permission_allow_replicate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Replicable'),
        '#default_value' => !empty($is_replicable) ? TRUE : FALSE,
        '#description' => t('If this is checked, users with "Replicate replicable node" permission can replicate this node.'),
      );
      $form['#submit'][] = 'replicate_permissions_save_pref';
    }
  } // end of per-node replication
}

/**
 * Save the per-node replication preference
 * The input value is not stored in the DB / displayed to users so no validations are put in place
 */
function replicate_permissions_save_pref($form, $form_state) {

  $replicatePermissions = new replicatePermissions;

  $nid = $form_state['values']['nid'];
  $enabled = $replicatePermissions->nodeIsReplicable($nid);

  // If the checkbox is ticked AND the nid is not found in the table, insert the nid
  if (!empty($form_state['values']['replicate_permission_allow_replicate']) && empty($enabled)) {
    $replicatePermissions->makeNodeReplicable($nid);
  }
  // If the checkbox is unticked AND the nid is found in the table, remove the nid from the table
  elseif (empty($form_state['values']['replicate_permission_allow_replicate']) && !empty($enabled)) {
    $replicatePermissions->makeNodeUnreplicable($nid);
  }
  // The rest of the combinations mean no changes have taken place and can be ignored
}


/**
 * Helper function to list all available node types
 *
 * @return array
 *   A list of available node types
 */
function replicate_permissions_permissions_get_configured_types() {

  $configured_types = array();

  foreach (node_type_get_types() as $type => $info) {
      $configured_types[] = $type;
  }

  return $configured_types;
}


/**
 * Helper function to generate standard replicate permission list for a given type.
 *
 * @param $type
 *   The machine-readable name of the node type.
 *
 * @return array
 *   An array of permission names and descriptions.
 */
function replicate_permissions_list_permissions($type) {
  $info = node_type_get_type($type);

  // Build standard list of node permissions for this type.
  $perms = array(
    "replicate $type content" => array(
      'title' => t('Replicate nodes of content type %type_name', array('%type_name' => $info->name)),
    ),
  );

  return $perms;
}

/**
 * Class replicatePermissions
 * Class for handling basic tasks
 */
class replicatePermissions {

  /**
   * Check if a given node is configured as replicable
   *
   * @param $nid
   * @return int
   *   Returns nid if a value is found. FALSE otherwise.
   */
  public function nodeIsReplicable($nid) {
    $sql = "SELECT nid from {replicable_node} WHERE nid = :nid";
    $result = db_query($sql, array(':nid' => $nid))->fetchField();
    if (empty($result)) {
      return FALSE;
    }
    else {
      return $result;
    }
  }

  /**
   * Allow privileged users to replicate a specific node by adding its nid to
   * the table
   * @param $nid
   */
  public function makeNodeReplicable($nid) {
    db_insert('replicable_node') // Table name no longer needs {}
    ->fields(array(
      'nid' => $nid
    ))
      ->execute();
  }

  /**
   * Disallow privileged users to replicate this node by removing the nid from
   * the table
   * @param $nid
   */
  public function makeNodeUnreplicable($nid) {
    db_delete('replicable_node')
      ->condition('nid', $nid)
      ->execute();
  }

  /**
   * Access check by the Replicate UI module
   *
   * @param string
   *   node type
   * @param int
   *   nid
   * @return bool
   */
  public function checkReplicateUiAccess($type, $nid) {
    return replicate_ui_access($type, $nid);
  }

  /**
   * Check if the user has access permission to bypass Replicate Permissions
   *
   * @return bool
   */
  public function checkReplicateBypass() {
    return user_access('bypass replicate_permissions');
  }

  /**
   * Check if the user has access permission to replicate the node type
   *
   * @param $node
   * @return bool
   */
  public function checkReplicateCtAccess($node) {
    if (user_access("replicate $node->type content") == TRUE || $this->checkReplicateBypass() !== FALSE) {
      return TRUE;
    }
  }

  /**
   * Check if the user has access permission to replicate nodes that are marked as replicable
   *
   * @return bool
   */
  public function checkReplicateNodePerm() {
    if (user_access('replicate replicable node') == TRUE || $this->checkReplicateBypass() !== FALSE) {
      return TRUE;
    }
  }

  /**
   * Check if the user has access permission to mark nodes as replicable
   *
   * @return bool
   */
   public function checkConfigurePerNodeReplicationOption() {
     return user_access('configure per-node replication option');
   }

}
