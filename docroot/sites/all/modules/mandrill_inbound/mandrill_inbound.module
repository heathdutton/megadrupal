<?php

/**
 * @file
 * Handle mandrill incoming webhooks.
 */

/**
 * Implements hook_menu().
 */
function mandrill_inbound_menu() {
  $items = array();

  $items['admin/config/services/mandrill/inbound'] = array(
    'title' => 'Inbound',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_inbound_settings_form'),
    'access arguments' => array('administer mandrill'),
    'description' => 'Handles Mandrill Incoming Webhooks',
    'file' => 'mandrill_inbound.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['mandrill/webhook/inbound'] = array(
    'title' => 'Mandrill Inbound',
    'description' => 'Inbound email via Mandrill',
    'page callback' => 'mandrill_inbound_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback for Inbound email via Mandrill.
 */
function mandrill_inbound_callback() {
  $events = json_decode($_POST['mandrill_events']);

  // The URL at which we are to receive events.
  $url = url('mandrill/webhook/inbound', array('absolute' => TRUE));

  // Mandrill can have several keys with same url address.
  // What's why we have to check all of them.
  $calculated_signatures = array();
  // Mandrill webhook keys corresponding to canonical URL.
  foreach (_mandrill_inbound_get_keys($url) as $webhook_key) {
    $calculated_signatures[] = _mandrill_inbound_generate_signature($url, $webhook_key, $_POST);
  }

  $received_signature = $_SERVER['HTTP_X_MANDRILL_SIGNATURE'];

  // Check signature.
  if (in_array($received_signature, $calculated_signatures)) {
    foreach ($events as $event) {
      $args = array(
        'from_email' => $event->msg->from_email ?: '',
        'from_name' => $event->msg->from_name ?: '',
        'to_mail' => $event->msg->email ?: '',
        'subject' => $event->msg->subject ?: '',
        'text' => array(
          'value' => $event->msg->text ?: '',
        ),
        'raw_msg' => array(
          'value' => $event->msg->raw_msg ?: '',
        ),
      );

      // Load anonymous user if not exist.
      $args['from_account'] = user_load_by_mail($args['from_email']) ?: user_load(0);

      // Add type & ID.
      $args += _mandrill_inbound_parse_address($args['to_mail']);

      drupal_alter('mandrill_inbound', $args);

      rules_invoke_event_by_args('mandrill_webhook_inbound', $args);

      watchdog('mandrill_inbound', 'Message from %from_email to %to_email has been received', array(
        '%from_email' => $args['from_email'],
        '%to_email' => $args['to_mail'],
      ));
    }
  }
  else {
    watchdog('mandrill_inbound', 'Failed signature validation calculated="%calculated", received="%received",
    md5(mandrill_events)="%md5", strlen(mandrill_events)=%length, post=<pre>@post</pre>', array(
      '%calculated' => print_r($calculated_signatures, TRUE),
      '%received' => $received_signature,
      '%length' => strlen($_POST['mandrill_events']),
      '%md5' => md5($_POST['mandrill_events']),
      '@post' => print_r($_POST, TRUE),
    ), WATCHDOG_WARNING);
  }
}

/**
 * Make email address with type & argument.
 *
 * @param string $type
 *  Type of inbound message.
 *  - Type should not include dots in name.
 * @param integer $id
 *  Id of inbound message.
 *
 * @return string
 *  Valid email address.
 */
function mandrill_inbound_make_email_address($type, $id) {
  $domain = variable_get('mandrill_inbound_email_domain', 'example.co.uk');

  return "$type.$id@$domain";
}

/**
 * Implements hook_mandrill_inbound_alter.
 */
function mandrill_inbound_mandrill_inbound_alter(&$args) {
  // Cleanup message bellow.

  // Delete signature.
  $text = explode('--', $args['text']['value']);
  $text = $text[0];

  // Delete quotes.
  $args['text']['value'] = preg_replace("/(?<=^|\n)>.*\r?\n|\r?\n>.*/", '', $text);
}

/**
 * Parse email address to get arguments for rules.
 *
 * @param string $email
 *  The email address.
 *
 * @return array
 *  Arguments: type & id.
 */
function _mandrill_inbound_parse_address($email = '') {
  $mail = explode('@', $email);
  $data = explode('.', $mail[0]);

  return array(
    'type' => $data[0] ?: '',
    'id' => $data[1] ?: '',
  );
}

/**
 * Generates a base64-encoded signature for a Mandrill webhook request.
 * Verbatim from http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests
 *
 * @param string $url the webhook url
 * @param string $webhook_key the webhook's authentication key
 * @param array $params the request's POST parameters
 *
 * @return string
 */
function _mandrill_inbound_generate_signature($url, $webhook_key, $params) {
  $signed_data = $url;
  ksort($params);
  foreach ($params as $key => $value) {
    $signed_data .= $key;
    $signed_data .= $value;
  }

  return base64_encode(hash_hmac('sha1', $signed_data, $webhook_key, TRUE));
}

/**
 * Mandrill webhook key corresponding to canonical URL.
 *
 * @param string $url
 *
 * @return array
 */
function _mandrill_inbound_get_keys($url = '') {
  $keys = array();
  foreach (mandrill_get_api_object()->webhooks_list() as $list) {
    if ($url == $list['url']) {
      $keys[] = $list['auth_key'];
    }
  }

  return $keys;
}
