<?php

/**
 * @file
 * Implements Virtual Merchant payment services for use in Drupal Commerce.
 */

// Virtual Merchant transaction mode definitions:
define('VM_TXN_MODE_LIVE', 'live');
define('VM_TXN_MODE_LIVE_TEST', 'live_test');
define('VM_TXN_MODE_DEVELOPER', 'developer');


/**
 * Implements hook_menu().
 */
function commerce_virtualmerchant_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/virtualmerchant-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_virtualmerchant_capture_form', 3, 5),
    'access callback' => 'commerce_virtualmerchant_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_virtualmerchant.admin.inc',
  );

  // Add a menu item for voiding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/virtualmerchant-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_virtualmerchant_void_form', 3, 5),
    'access callback' => 'commerce_virtualmerchant_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_virtualmerchant.admin.inc',
  );

  // Add a menu item for issuing credits.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/virtualmerchant-credit'] = array(
    'title' => 'Credit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_virtualmerchant_credit_form', 3, 5),
    'access callback' => 'commerce_virtualmerchant_credit_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_virtualmerchant.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for Virtual Merchant credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_virtualmerchant_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Virtual Merchant or isn't
  // awaiting capture.
  if ($transaction->payment_method != 'virtualmerchant' || empty($transaction->remote_id) ||
    strtoupper($transaction->remote_status) != 'AUTH_ONLY') {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the void form for Virtual Merchant credit card
 * transactions
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be voided.
 *
 * @return
 *   TRUE or FALSE indicating void access.
 */
function commerce_virtualmerchant_void_access($order, $transaction) {
  if ($transaction->payment_method != 'virtualmerchant' || empty($transaction->remote_id) ||
    !in_array(strtoupper($transaction->remote_status), array('AUTH_ONLY', 'PRIOR_AUTH_CAPTURE', 'AUTH_CAPTURE'))) {
    return FALSE;
  }

  // Return FALSE if it is more than 24 hours since the last update to the
  // transaction, as it will already have been settled.
  if (time() - $transaction->changed > 2600 * 24) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the credit form for successful Virtual Merchant credit
 * card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be credited.
 *
 * @return
 *   TRUE or FALSE indicating credit access.
 */
function commerce_virtualmerchant_credit_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Virtual Merchant, doesn't have a
  // success status or has an amount of 0 or less.
  if ($transaction->payment_method != 'virtualmerchant' || $transaction->status != 'success' || $transaction->amount <= 0) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_virtualmerchant_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['virtualmerchant'] = array(
    'base' => 'commerce_virtualmerchant',
    'title' => t('Virtual Merchant - Credit Card'),
    'short_title' => t('Virtual Merchant CC'),
    'display_title' => t('Credit card'),
    'description' => t('Process credit card transactions through Virtual Merchant.'),
    'cardonfile' => array(
      'update callback' => 'commerce_virtualmerchant_cim_cardonfile_update',
      'delete callback' => 'commerce_virtualmerchant_cim_cardonfile_delete',
    ),
  );

  return $payment_methods;
}



/**
 * Returns the default settings for the Virtual Merchant payment method.
 */
function commerce_virtualmerchant_default_settings() {
  return array(
    'virtualmerchant_merchant_id' => '',
    'virtualmerchant_user_id' => '',
	'virtualmerchant_pin' => '',
    'txn_mode' => VM_TXN_MODE_LIVE_TEST,
	'virtualmerchant_ship_to' => FALSE,
    'card_types' => array(),
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'log' => array('request' => '0', 'response' => '0'),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_virtualmerchant_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_virtualmerchant_default_settings();

  $form = array();

  $form['virtualmerchant_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Virtual Merchant Merchant ID'),
    '#description' => t('Your merchant ID is the Account number you use to login at Virtual Merchant.'),
    '#default_value' => $settings['virtualmerchant_merchant_id'],
    '#required' => TRUE,
  );
  $form['virtualmerchant_user_id'] = array(
    '#type' => 'textfield',
    '#title' => t('User ID'),
    '#description' => t('Same as the user ID you use to login at Virtual Merchant.'),
    '#default_value' => $settings['virtualmerchant_user_id'],
    '#required' => TRUE,
  );
  $form['virtualmerchant_pin'] = array(
    '#type' => 'textfield',
    '#title' => t('PIN'),
    '#description' => t('Found through the User > Change PIN menu item at Virtual Merchant.'),
    '#default_value' => $settings['virtualmerchant_pin'],
    '#required' => TRUE,
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      VM_TXN_MODE_LIVE => t('Live transactions in a live account'),
      VM_TXN_MODE_LIVE_TEST => t('Test transactions in a live account'),
      VM_TXN_MODE_DEVELOPER => t('Developer test account transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_virtualmerchant_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

  if (!empty($card_types)) {
    $fields['type'] = $card_types;
  }

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_virtualmerchant_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_virtualmerchant_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    // Prevent the transaction except under limited circumstances.
    $prevent_transaction = TRUE;

	// Allow 0 amount authorizations on Visa cards.
    if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY && $card_type == 'visa') {
      $prevent_transaction = FALSE;
    }
	
    // If the transaction should still be prevented...
    if ($prevent_transaction) {
      // Create a transaction to log the skipped transaction and display a
      // helpful message to the customer.
      $transaction = commerce_payment_transaction_new('virtualmerchant', $order->order_id);
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
      commerce_payment_transaction_save($transaction);

      drupal_set_message('We encountered an error processing your transaction. Please contact us to resolve the issue.', 'error');
      return FALSE;
    }
  }
  
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the default transaction type from the payment method settings.
  $txn_type = $payment_method['settings']['txn_type'];

  // If txn_type has been specified in the pane values array, such as through
  // the special select element we alter onto the payment terminal form, use
  // that instead.
  if (!empty($pane_values['txn_type'])) {
    $txn_type = $pane_values['txn_type'];
  }

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'ssl_transaction_type' => commerce_virtualmerchant_txn_type($txn_type),
    'ssl_amount' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
	'ssl_salestax' => '0', // Always passed as 0 for the merchant provided form.
    'ssl_card_number' => $pane_values['credit_card']['number'],
    'ssl_exp_date' => $pane_values['credit_card']['exp_month'] . substr($pane_values['credit_card']['exp_year'], -2),
  );

  if (isset($pane_values['credit_card']['code'])) {
    $nvp['ssl_cvv2cvc2_indicator'] = '1';
    $nvp['ssl_cvv2cvc2'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = theme('virtualmerchant_line_item_description', array(
        'order' => $order_wrapper,
        'line_item' => $line_item_wrapper,
      ));
    }
  }

  // Add additional transaction information to the request array.
  $nvp += array(
    // Order Information
    'ssl_invoice_number' => $order->order_number,
    'ssl_description' => substr(implode(', ', $description), 0, 255),

    // Customer Information
    'ssl_email' => substr($order->mail, 0, 255),
    'ssl_customer_code' => substr($order->uid, 0, 20),
    'ssl_cardholder_ip' => substr(ip_address(), 0, 15),
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()){
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $nvp += array(
      // Customer Billing Address
      'ssl_first_name' => substr($billing_address['first_name'], 0, 50),
      'ssl_last_name' => substr($billing_address['last_name'], 0, 50),
      'ssl_company' => substr($billing_address['organisation_name'], 0, 50),
      'ssl_avs_address' => substr($billing_address['thoroughfare'], 0, 60),
      'ssl_city' => substr($billing_address['locality'], 0, 40),
      'ssl_state' => substr($billing_address['administrative_area'], 0, 40),
      'ssl_avs_zip' => substr($billing_address['postal_code'], 0, 20),
      'ssl_country' => $billing_address['country'],
    );
  }
  else {
    $billing_address = array();
  }

  // Submit the request to Virtual Merchant.
  $response = commerce_virtualmerchant_request($payment_method, $order, $nvp);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('virtualmerchant', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response['ssl_txn_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response['ssl_result'] != '0') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($txn_type) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;

      case COMMERCE_CREDIT_CAPTURE_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = commerce_virtualmerchant_txn_type($txn_type);

  // Build a meaningful response message.
  $message = array(
    '<b>' . commerce_virtualmerchant_txn_type($txn_type) . '</b>',
    '<b>' . ($response['ssl_result'] != '0' ? t('REJECTED') : t('ACCEPTED')) . ':</b> ' . check_plain($response['ssl_result_message']),
    t('AVS response: @avs', array('@avs' => commerce_virtualmerchant_avs_response($response['ssl_avs_response']))),
  );

  // Add the CVV response if enabled.
  if (isset($nvp['ssl_cvv2cvc2'])) {
    $message[] = t('CVV match: @cvv', array('@cvv' => commerce_virtualmerchant_cvv_response($response['ssl_cvv2_response'])));
  }

  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response['ssl_result'] != '0') {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response['errorMessage']), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_virtualmerchant_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state) {
  // If the payment terminal is displayed for a virtualmerchant transaction...
  if (!empty($form['payment_terminal']) && $form_state['payment_method']['method_id'] == 'virtualmerchant') {
    // Add a select list to let the administrator choose a different transaction
    // type than the payment method's default.
    $form['payment_terminal']['payment_details']['txn_type'] = array(
        '#type' => 'select',
        '#title' => t('Transaction type'),
        '#options' => array(
            COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only'),
            COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
        ),
        '#default_value' => $form_state['payment_method']['settings']['txn_type'],
    );
  }
}

/**
 * Submits a transaction request to Virtual Merchant.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 * @param object $order The commerce order object that is being paid for.
 * @param array $nvp The name value pairs containing order info that is passed to the VirtualMerchant API.
 * @return bool
 */
function commerce_virtualmerchant_request($payment_method, $order, $nvp = array()) {
  // Get the API endpoint URL for the method's transaction mode.
  $url = commerce_virtualmerchant_server_url($payment_method['settings']['txn_mode']);

  // Add the default name-value pairs to the array.
  $nvp += array(
    // API credentials
    'ssl_merchant_id' => $payment_method['settings']['virtualmerchant_merchant_id'],
    'ssl_pin' => $payment_method['settings']['virtualmerchant_pin'],
	'ssl_user_id' => $payment_method['settings']['virtualmerchant_user_id'],

    // Extra administrative values
    'ssl_test_mode' => $payment_method['settings']['txn_mode'] == VM_TXN_MODE_LIVE_TEST ? 'TRUE' : 'FALSE',
    // Payment configuration.
    'ssl_show_form' => 'FALSE',
    // 'ssl_receipt_link_method' => 'GET',
    'ssl_result_format' => 'ASCII',
    // 'ssl_receipt_link_url' => url('<front>', array('absolute' => TRUE)),
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_virtualmerchant_request', $nvp, $order);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_nvp = $nvp;
    $log_nvp['ssl_merchant_id'] = str_repeat('X', strlen($log_nvp['ssl_merchant_id']));
    $log_nvp['ssl_pin'] = str_repeat('X', strlen($log_nvp['ssl_pin']));
	$log_nvp['ssl_user_id'] = str_repeat('X', strlen($log_nvp['ssl_user_id']));

    if (!empty($log_nvp['ssl_card_number'])) {
      $log_nvp['ssl_card_number'] = str_repeat('X', strlen($log_nvp['ssl_card_number']) - 4) . substr($log_nvp['ssl_card_number'], -4);
    }

    if (!empty($log_nvp['ssl_cvv2cvc2'])) {
      $log_nvp['ssl_cvv2cvc2'] = str_repeat('X', strlen($log_nvp['ssl_cvv2cvc2']));
    }

    watchdog('commerce_virtualmerchant', 'Virtual Merchant request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_nvp, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();

  foreach ($nvp as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  // Allow CURLOPT_SSL_VERIFYPEER to be altered via drupal variables, default to "true".
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,
    variable_get('CURLOPT_SSL_VERIFYPEER', TRUE) !== TRUE
      ? FALSE
      : TRUE);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_virtualmerchant', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Put the results into an associative array.
  parse_str(str_replace(array("\r", "\n"), array('', '&'), trim($result)), $response);

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_virtualmerchant', 'Virtual Merchant response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  return $response;
}

/**
 * Returns the URL to the Virtual Merchant server determined by transaction mode.
 *
 * @param $txn_mode
 *   The transaction mode that relates to the live or test server.
 *
 * @return
 *   The URL to use to submit requests to the Virtual Merchant server.
 */
function commerce_virtualmerchant_server_url($txn_mode) {
  switch ($txn_mode) {
    case VM_TXN_MODE_LIVE:
    case VM_TXN_MODE_LIVE_TEST:
      return 'https://www.myvirtualmerchant.com/VirtualMerchant/process.do';
    case VM_TXN_MODE_DEVELOPER:
      return 'https://demo.myvirtualmerchant.com/VirtualMerchantDemo/process.do';
  }
}

/**
 * Returns the transaction type string for Virtual Merchant that corresponds to the
 *   Drupal Commerce constant.
 *
 * @param $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function commerce_virtualmerchant_txn_type($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'CCAUTHONLY';
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'CCSALE';
  }
}

/**
 * Returns the description of an Virtual Merchant transaction type.
 *
 * @param $txn_type
 *   An Virtual Merchant transaction type string.
 */
function commerce_virtualmerchant_reverse_txn_type($txn_type) {
  switch (strtoupper($txn_type)) {
    case 'CCAUTHONLY':
      return t('Authorization only');
    case 'CCSALE':
      return t('Authorization and capture');
  }
}

/**
 * Implements hook_theme().
 */
function commerce_virtualmerchant_theme($existing, $type, $theme, $path) {
  $theme = array();

  // Define a custom theme process for constructing the line item description provided to
  // Virtual Merchant for a transaction.
  $theme['virtualmerchant_line_item_description'] = array(
    'variables' => array(
      'order' => NULL,
      'line_item' => NULL,
    ),
  );
  return $theme;
}

/**
 * Theme function to construct a description for a order line item that is to be passed to the Virtual Merchant API.
 *
 * @param object $order Commerce Order
 * @param object $line_item  Commerce Order Line Item
 * @return string
 */
function theme_virtualmerchant_line_item_description($variables) {
  $order = $variables['order'];
  $line_item = $variables['line_item'];
  $description = round($line_item->quantity->value(), 2) . 'x ' . $line_item->line_item_label->value();
  return $description;
}

/**
 * Returns the message text for an AVS response code.
 */
function commerce_virtualmerchant_avs_response($code) {
  switch ($code) {
    case 'A':
      return t('Address matches - Zip Code does not match.');
    case 'B':
      return t('Street address match, Postal code in wrong format (International issuer)');
    case 'C':
      return t('Street address and postal code in wrong formats');
    case 'D':
      return t('Street address and postal code match (international issuer)');
    case 'E':
      return t('AVS Error');
    case 'G':
      return t('Service not supported by non-US issuer');
    case 'I':
      return t('Address information not verified by international issuer.');
    case 'M':
      return t('Street Address and Postal code match (international issuer)');
    case 'N':
      return t('No Match on Address (Street) or Zip');
    case 'O':
      return t('No Response sent');
    case 'P':
      return t('Postal codes match, Street address not verified due to incompatible formats.');
    case 'R':
      return t('Retry, System unavailable or Timed out');
    case 'S':
      return t('Service not supported by issuer');
	case 'U':
      return t('Address information is unavailable');
	case 'W':
      return t('9 digit Zip matches, Address (Street) does not match.');
	case 'X':
      return t('Exact AVS Match');
	case 'Y':
      return t('Address (Street) and 5 digit Zip match.');
	case 'Z':
      return t('5 digit Zip matches, Address (Street) does not match.');
  }

  return '-';
}

/**
 * Returns the message text for a CVV match.
 */
function commerce_virtualmerchant_cvv_response($code) {
  switch ($code) {
    case 'M':
      return t('CVV2 Match');
    case 'N':
      return t('CVV2 No match');
    case 'P':
      return t('Not Processed');
    case 'S':
      return t('Issuer indicates that CVV2 data should be present on the card, but the merchant has indicated that the CVV2 data is not resent on the card');
    case 'U':
      return t('Issuer has not certified for CVV2 or Issuer has not provided Visa with the CVV2 encryption keys');
  }

  return '-';
}
