<?php

/**
 * @file
 * Relation Group Display module file.
 */

/**
 * Implements hook_theme().
 */
function rel_group_display_theme() {
  return array(
    'rel_group_display' => array(
      'variables' => array('group_label' => NULL, 'links' => NULL, 'separator' => ''),
    ),
    'rel_multiple_group_display' => array(
      'variables' => array('group_label' => NULL, 'subgroups' => NULL, 'separator' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function rel_group_display_field_formatter_info() {
  return array(
    'relation_list_field_group_display' => array(
      'label' => t('Relation grouped by list field'),
      'field types' => array('relation_add'),
      'settings' => array(
        'group_by_sort' => 'asc',
        'group_by_sort_type' => 'value',
        'group_by_field_name' => '',
        'group_by_separator' => '',
      ),
    ),
    'relation_entity_group_display' => array(
      'label' => t('Relation grouped by entity bundle'),
      'field types' => array('relation_add'),
      'settings' => array(
        'group_by_separator' => '',
      ),
    ),
    'relation_endpoints_by_term' => array(
      'label' => t('Relation grouped by term'),
      'field types' => array('relation_add'),
      'settings' => array(
        'group_by_type' => 'vocab_term',
        'group_by_sort' => 'asc',
        'group_by_separator' => '',
        'group_by_terms' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function rel_group_display_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'relation_list_field_group_display':
      $element['group_by_sort'] = array(
        '#type' => 'radios',
        '#required' => TRUE,
        '#title' => t('Sort'),
        '#default_value' => $settings['group_by_sort'],
        '#options' => array(
          'asc' => t('Ascending'),
          'desc' => t('Descending'),
          'none' => t('None'),
        ),
      );

      $element['group_by_sort_type'] = array(
        '#type' => 'radios',
        '#required' => TRUE,
        '#title' => t('Sort by'),
        '#default_value' => $settings['group_by_sort_type'],
        '#options' => array(
          'key' => t('Field key'),
          'value' => t('Field value'),
        ),
      );

      $options = array();

      // If ctools calls this settings then it hasn't got real instance parameter.
      _rel_group_display_ctools_instance($field, $instance);

      $relation_types = _rel_group_display_get_relation_types($instance['settings']['relation_type']);

      foreach ($relation_types as $relation_type) {
        $rel_field_instances = field_info_instances('relation', $relation_type);
        foreach ($rel_field_instances as $rel_field_instance) {
          $rel_field_setting = field_info_field($rel_field_instance['field_name']);
          if (drupal_substr($rel_field_setting['type'], 0, 5) == 'list_') {
            $options[$rel_field_instance['field_name']] = $rel_field_instance['label']
              . ' (' . $rel_field_instance['field_name'] . ')';
          }
        }
      }

      $element['group_by_field_name'] = array(
        '#type' => 'select',
        '#required' => TRUE,
        '#title' => t('Field name'),
        '#default_value' => $settings['group_by_field_name'],
        '#empty_option' => t('- Select -'),
        '#options' => $options,
      );

    case 'relation_entity_group_display':
      $element['group_by_separator'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('Separator'),
        '#description' => t(''),
        '#default_value' => $settings['group_by_separator'],
      );
    break;

    case 'relation_endpoints_by_term':
      $element['group_by_type'] = array(
        '#type' => 'radios',
        '#required' => TRUE,
        '#title' => t('Group by type'),
        '#default_value' => $settings['group_by_type'],
        '#options' => array(
          'vocab' => t('Vocabulary'),
          'term' => t('Term'),
          'vocab_term' => t('Vocabulary and term'),
        ),
      );

      $element['group_by_sort'] = array(
        '#type' => 'radios',
        '#required' => TRUE,
        '#title' => t('Sort'),
        '#default_value' => $settings['group_by_sort'],
        '#options' => array(
          'asc' => t('Ascending'),
          'desc' => t('Descending'),
          'none' => t('None'),
        ),
      );

      $element['group_by_separator'] = array(
        '#type' => 'textfield',
        '#required' => FALSE,
        '#title' => t('Separator'),
        '#description' => t(''),
        '#default_value' => $settings['group_by_separator'],
      );

      // If ctools calls this settings then it hasn't got real instance parameter.
      _rel_group_display_ctools_instance($field, $instance);

      $relation_types = _rel_group_display_get_relation_types($instance['settings']['relation_type']);

      $vocab_count = 0;
      $element['group_by_terms'] = array(
        '#type' => 'container',
        '#tree' => TRUE,
      );
      foreach ($relation_types as $relation_type) {
        $field_instances = field_info_instances('relation', $relation_type);

        foreach ($field_instances as $field_name => $fi) {
          $field_info = field_info_field($field_name);

          if ('taxonomy_term_reference' == $field_info['type']) {
            $vocab = _rel_group_display_get_vocab_by_name($field_info['settings']['allowed_values'][0]['vocabulary']);
            $terms = taxonomy_get_tree($vocab->vid);

            if ($terms) {
              $vocab_count++;
              $wrapper = 'vocab_wrapper_' . $vocab->vid;
              $element['group_by_terms'][$wrapper] = array(
                '#type' => 'fieldset',
                '#title' => t('Terms in %vocab vocabulary', array('%vocab' => $vocab->name)),
              );
              $element['group_by_terms'][$wrapper]['all'] = array(
                '#title' => t('All'),
                '#type' => 'checkbox',
                '#default_value' => $settings['group_by_terms'][$wrapper]['all'],
              );

              $element['group_by_terms'][$wrapper]['terms_' . $vocab->vid] = array(
                '#type' => 'checkboxes',
                '#size' => 20,
                '#default_value' => isset($settings['group_by_terms'][$wrapper]['terms_' . $vocab->vid])
                  ? $settings['group_by_terms'][$wrapper]['terms_' . $vocab->vid] : array(),
              );

              foreach ($terms as $term) {
                $element['group_by_terms'][$wrapper]['terms_' . $vocab->vid]['#options'][$term->tid] = $term->name;
              }
            }
          }
        }
      }

      if (!$vocab_count) {
        unset($element['group_by_terms']);
      }
    break;
  }

  return $element;
}

/**
 * Returns all field instances.
 */
function _rel_group_display_ctools_instance($field, &$instance) {
  if ('ctools' == $instance['entity_type'] && 'ctools' == $instance['bundle']) {
    foreach ($field['bundles'] as $entity => $bundles) {
      foreach ($bundles as $bundle) {
        $real_instance = field_info_instance($entity, $field['field_name'], $bundle);
        foreach ($real_instance['settings']['relation_type'] as $key => $value) {
          $instance['settings']['relation_type'][$key] = $value;
        }
      }
    }
  }
}

/**
 * Returns the relation type machine name.
 */
function _rel_group_display_get_relation_types($base_relation_types) {
  foreach ($base_relation_types as $type) {
    $type_array = explode(':', $type);
    $relation_types[$type_array[0]] = $type_array[0];
  }

  return $relation_types;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function rel_group_display_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $output = '';
  $group_by_sort = array(
    'asc' => t('Ascending'),
    'desc' => t('Descending'),
    'none' => t('None'),
  );
  switch ($display['type']) {
    case 'relation_list_field_group_display':
      $output .= t('Sort: @sort', array('@sort' => $group_by_sort[$settings['group_by_sort']])) . '<br />';
      $output .= t('Field name: @field_name', array('@field_name' => $settings['group_by_field_name'])) . '<br />';

    case 'relation_entity_group_display':
      $output .= t('Separator: @separator', array('@separator' => $settings['group_by_separator'])) . '<br />';
    break;

    case 'relation_endpoints_by_term':
      $output .= t('Displaying related elements by terms.') . '<br />';

      $group_by_type = array(
        'vocab' => t('Vocabulary'),
        'term' => t('Term'),
        'vocab_term' => t('Vocabulary and term'),
      );
      $output .= t('Group by type: @type', array('@type' => $group_by_type[$settings['group_by_type']])) . '<br />';

      $output .= t('Sort: @sort', array('@sort' => $group_by_sort[$settings['group_by_sort']])) . '<br />';
      $output .= t('Separator: @separator', array('@separator' => $settings['group_by_separator'])) . '<br />';
    break;
  }

  return $output;
}

/**
 * Implements hook_field_formatter_view().
 */
function rel_group_display_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'relation_entity_group_display':
      $element = rel_group_display_field_formatter_view_entity($entity_type, $entity, $field, $instance, $langcode, $items, $display);
    break;

    case 'relation_list_field_group_display':
      $element = rel_group_display_field_formatter_view_list_fields($entity_type, $entity, $field, $instance, $langcode, $items, $display);
    break;
    case 'relation_endpoints_by_term':
      $element = rel_group_display_field_formatter_view_term($entity_type, $entity, $field, $instance, $langcode, $items, $display);
    break;
  }
  return $element;
}

function rel_group_display_field_formatter_view_entity($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $entity_info = entity_get_info($entity_type);
  $entity_ids = array();

  foreach ($items as $delta => $item) {
    foreach ($item['endpoints'][LANGUAGE_NONE] AS $endpoint) {
      if ($endpoint['entity_type'] != $entity_type || $endpoint['entity_id'] != $entity->{$entity_info['entity keys']['id']}) {
        $entity_ids[$endpoint['entity_type']][$endpoint['entity_id']] = $endpoint['entity_id'];
      }
    }
  }

  if (!empty($entity_ids)) {
    $rel_entity_infos = entity_get_info();
    foreach ($entity_ids as $rel_entity_type => $ids) {
      $rel_entitys = entity_load($rel_entity_type, $ids);

      foreach ($rel_entitys as $id => $rel_entity) {
        $bundle = $rel_entity->{$rel_entity_infos[$rel_entity_type]['entity keys']['bundle']};
        $uri = entity_uri($rel_entity_type, $rel_entity);
        $rel_group[$rel_entity_type][$bundle][$id] = array(
          '#type' => 'link',
          '#title' => entity_label($rel_entity_type, $rel_entity),
          '#href' => $uri['path'],
        );
      }
    }

    foreach ($rel_group as $rel_entity_type => $bundles) {
      foreach ($bundles as $bundle => $rel_entity_links) {
        $element[] = array(
          '#theme' => 'rel_group_display',
          '#group_label' => $rel_entity_infos[$rel_entity_type]['bundles'][$bundle]['label'] . '(s)',
          '#links' => $rel_entity_links,
          '#separator' => $display['settings']['group_by_separator'],
        );
      }
    }
  }
  return $element;
}

function rel_group_display_field_formatter_view_list_fields($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (!empty($display['settings']['group_by_field_name'])) {
    $entity_info = entity_get_info($entity_type);
    $group_field_name = $display['settings']['group_by_field_name'];
    $rel_group = array();
    $emptys = array();
    $element = array();

    foreach ($items as $delta => $item) {
      $relation = (object) $item;

      $values = field_get_items('relation', $relation, $group_field_name);
      if (!empty($values)) {
        foreach ($values as $value) {
          foreach ($relation->endpoints[LANGUAGE_NONE] AS $endpoint) {
            if ($endpoint['entity_type'] != $entity_type || $endpoint['entity_id'] != $entity->{$entity_info['entity keys']['id']}) {
              if (!isset($rel_group[$value['value']][$endpoint['entity_type'] . ' ### ' . $endpoint['entity_id']])) {
                $rel_entity = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
                if (!empty($rel_entity)) {
                  $rel_entity = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
                  if ($rel_entity) {
                    // create links
                    $rel_entity = $rel_entity[$endpoint['entity_id']];
                    $uri = entity_uri($endpoint['entity_type'], $rel_entity);
                    $rel_group[$value['value']][$endpoint['entity_type'] . ' ### ' . $endpoint['entity_id']] = array(
                      '#type' => 'link',
                      '#title' => entity_label($endpoint['entity_type'], $rel_entity),
                      '#href' => $uri['path'],
                    );
                  }
                }
              }
            }
          }
        }
      }
      else {
        foreach ($relation->endpoints[LANGUAGE_NONE] AS $endpoint) {
          if ($endpoint['entity_type'] != $entity_type || $endpoint['entity_id'] != $entity->{$entity_info['entity keys']['id']}) {
            if (!isset($emptys[$endpoint['entity_type'] . ' ### ' . $endpoint['entity_id']])) {
              $rel_entity = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
              if (!empty($rel_entity)) {
                $rel_entity = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
                if ($rel_entity) {
                  // create links
                  $rel_entity = $rel_entity[$endpoint['entity_id']];
                  $uri = entity_uri($endpoint['entity_type'], $rel_entity);
                  $emptys[$endpoint['entity_type'] . ' ### ' . $endpoint['entity_id']] = array(
                    '#type' => 'link',
                    '#title' => entity_label($endpoint['entity_type'], $rel_entity),
                    '#href' => $uri['path'],
                  );
                }
              }
            }
          }
        }
      }
    }

    $group_field = field_info_field($group_field_name);

    $allowed_values = $group_field['settings']['allowed_values'];
    switch ($display['settings']['group_by_sort_type']) {
      case 'key':
        if ('asc' == $display['settings']['group_by_sort']) {
          ksort($allowed_values);
        }
        elseif ('desc' == $display['settings']['group_by_sort']) {
          krsort($allowed_values);
        }
      break;

      default:
        if ('asc' == $display['settings']['group_by_sort']) {
          asort($allowed_values);
        }
        elseif ('desc' == $display['settings']['group_by_sort']) {
          arsort($allowed_values);
        }
    }

    if (!empty($rel_group)) {
      foreach ($allowed_values as $av_key => $av_value) {
        if (isset($rel_group[$av_key])) {
          $element[] = array(
            '#theme' => 'rel_group_display',
            '#group_label' => $av_value,
            '#links' => $rel_group[$av_key],
            '#separator' => $display['settings']['group_by_separator'],
          );
        }
      }
    }

    if (!empty($emptys)) {
      $element[] = array(
        '#theme' => 'rel_group_display',
        '#group_label' => '',
        '#separator' => $display['settings']['group_by_separator'],
        '#links' => $emptys,
      );
    }

    return $element;
  }
}

function rel_group_display_field_formatter_view_term($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $vocab_settings_cache = &drupal_static(__FUNCTION__);
  $term_fields = array();
  $sort = array();
  $rel_group = array();
  $element = array();

  $entity_info = entity_get_info($entity_type);

  $add_tid = TRUE;
  $base_group =& $rel_group;
  if ('vocab' == $display['settings']['group_by_type']) {
    $add_tid = FALSE;
  }

  $relation_types = _rel_group_display_get_relation_types($instance['settings']['relation_type']);

  if (isset($vocab_settings_cache[$instance['entity_type']][$instance['bundle']])) {
    $vocab_settings = $vocab_settings_cache[$instance['entity_type']][$instance['bundle']]['settings'];
    $term_fields = $vocab_settings_cache[$instance['entity_type']][$instance['bundle']]['term_fields'];
    $sort = $vocab_settings_cache[$instance['entity_type']][$instance['bundle']]['sort'];
  }
  else {
    $vocab_settings = array();
    foreach ($relation_types as $relation_type) {
      // get fields of the relation type (relation bundle)
      $field_instances = field_info_instances('relation', $relation_type);
      foreach ($field_instances as $field_name => $fi) {
        $field_info = field_info_field($field_name);
        // working only with the taxonomy_term_references
        if ('taxonomy_term_reference' == $field_info['type']) {
          $vocab = _rel_group_display_get_vocab_by_name($field_info['settings']['allowed_values'][0]['vocabulary']);

          // Add vocabulary in the sort list
          $sort['vocab'][$vocab->vid] = $vocab->name;

          // collecting vocabulary settings
          $vocab_settings[$field_name] = array(
            'name' => $vocab->name,
            'vid' => $vocab->vid,
            'terms' => NULL,
            'all' => TRUE,
          );

          if (isset($display['settings']['group_by_terms']['vocab_wrapper_' . $vocab->vid])) {
            $vocab_settings[$field_name]['terms'] = $display['settings']['group_by_terms']['vocab_wrapper_' . $vocab->vid]['terms_' . $vocab->vid];
            if (isset($display['settings']['group_by_terms']['vocab_wrapper_' . $vocab->vid]['all'])) {
              $vocab_settings[$field_name]['all'] = $display['settings']['group_by_terms']['vocab_wrapper_' . $vocab->vid]['all'] ;
            }
            elseif (!empty($vocab_settings[$field_name]['terms'])) {
              $vocab_settings[$field_name]['all'] = TRUE;
            }
          }
          // collecting taxonomy_term_references fields
          $term_fields[] = $field_name;
        }
      }
    }

    $vocab_settings_cache[$instance['entity_type']][$instance['bundle']]['settings'] = $vocab_settings;
    $vocab_settings_cache[$instance['entity_type']][$instance['bundle']]['term_fields'] = $term_fields;
    $vocab_settings_cache[$instance['entity_type']][$instance['bundle']]['sort'] = $sort;
  }

  if ($term_fields) {
    // we have taxonomy_term_reference
    foreach ($items as $delta => $item) {
      $relation = (object) $item;
      // work with taxonomy_term_reference fields only
      foreach ($term_fields as $field_name) {
        if ('vocab_term' == $display['settings']['group_by_type']) {
            if (!isset($rel_group[$vocab_settings[$field_name]['vid']])) {
              $rel_group[$vocab_settings[$field_name]['vid']] = array();
            }
            $base_group =& $rel_group[$vocab_settings[$field_name]['vid']];
        }

        $term_items = field_get_items('relation', $relation, $field_name);
        if (!empty($term_items)) {
          foreach ($term_items as $tid) {
            if ($vocab_settings[$field_name]['all'] || in_array($tid['tid'], $vocab_settings[$field_name]['terms'])) {
              if (isset($tid['tid'])) {
                // Add term name in the sort list.
                $term = taxonomy_term_load($tid['tid']);
                $sort['term'][$tid['tid']] = $term->name;
              }

              // process only selected terms
              foreach ($item['endpoints'][LANGUAGE_NONE] AS $endpoint) {
                if ($endpoint['entity_type'] != $entity_type ||  $endpoint['entity_id'] != $entity->{$entity_info['entity keys']['id']}) {
                  // create links
                  if ($add_tid) {
                    $id = $tid['tid'];
                  }
                  else {
                    $id = $vocab_settings[$field_name]['vid'];
                  }

                  if (!isset($base_group[$id][$endpoint['entity_type'] . ' ### ' . $endpoint['entity_id']])) {
                    $rel_entity = entity_load($endpoint['entity_type'], array($endpoint['entity_id']));
                    if ($rel_entity) {
                      $rel_entity = $rel_entity[$endpoint['entity_id']];
                      $uri = entity_uri($endpoint['entity_type'], $rel_entity);
                      $base_group[$id][$endpoint['entity_type'] . ' ### ' . $endpoint['entity_id']] = array(
                        '#type' => 'link',
                        '#title' => entity_label($endpoint['entity_type'], $rel_entity),
                        '#href' => $uri['path'],
                      );
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (!empty($rel_group)) {
    // Sort vocabulary
    if ('vocab' == $display['settings']['group_by_type']
      || 'vocab_term' == $display['settings']['group_by_type']) {

      if ('asc' == $display['settings']['group_by_sort']) {
        asort($sort['vocab']);
      }
      elseif ('desc' == $display['settings']['group_by_sort']) {
        arsort($sort['vocab']);
      }
    }

    // Sort term
    if ('term' == $display['settings']['group_by_type']
      || 'vocab_term' == $display['settings']['group_by_type']) {

      if ('asc' == $display['settings']['group_by_sort']) {
        asort($sort['term']);
      }
      elseif ('desc' == $display['settings']['group_by_sort']) {
        arsort($sort['term']);
      }
    }

    if ('term' == $display['settings']['group_by_type']
      || 'vocab' == $display['settings']['group_by_type']) {
      foreach ($sort[$display['settings']['group_by_type']] as $av_key => $av_value) {
        if (!empty($rel_group[$av_key])) {
          $element[] = array(
            '#theme' => 'rel_group_display',
            '#group_label' => $av_value,
            '#links' => $rel_group[$av_key],
            '#separator' => $display['settings']['group_by_separator'],
          );
        }
      }
    }
    elseif ('vocab_term' == $display['settings']['group_by_type']) {
      foreach ($sort['vocab'] as $vocab_key => $vocab_value) {
        if (!empty($rel_group[$vocab_key])) {
          $subgroups = array();
          foreach ($sort['term'] as $term_key => $term_value) {
            if (!empty($rel_group[$vocab_key][$term_key])) {
              $subgroups[] = array(
                '#theme' => 'rel_group_display',
                '#group_label' => $term_value,
                '#links' => $rel_group[$vocab_key][$term_key],
                '#separator' => $display['settings']['group_by_separator'],
              );
            }
          }

          $element[] = array(
            '#theme' => 'rel_multiple_group_display',
            '#group_label' => $vocab_value,
            '#subgroups' => $subgroups,
          );
        }
      }
    }
  }
  return $element;
}

function theme_rel_group_display($variables) {
  if (!empty($variables['group_label'])) {
    $variables['group_label'] .= ':';
  }

  if (!isset($variables['attributes'])) {
    $variables['attributes'] = array();
  }
    $variables['attributes']['class'][] = "field-label field-group-label";

  $output = '<div ' . drupal_attributes($variables['attributes']) . '>' . $variables['group_label'] . ' </div>';

  $count = 0;
  if ($variables['links']) {
    $count = count($variables['links']);
  }

  $i = 0;
  foreach ($variables['links'] as $link) {
    ++$i;
    $sep = '';
    if ($count != $i) {
      $sep = $variables['separator'];
    }
    $output .= '<div class="field-entity-link">' . drupal_render($link) . $sep . '</div>';
  }
  return $output;
}

function theme_rel_multiple_group_display($variables) {
  if (!empty($variables['group_label'])) {
    $variables['group_label'] .= ':';
  }

  if (!isset($variables['attributes'])) {
    $variables['attributes'] = array();
  }
    $variables['attributes']['class'][] = "field-label field-main-group-label";

  $output = '<div ' . drupal_attributes($variables['attributes']) . '>' . $variables['group_label'] . ' </div>';

  foreach ($variables['subgroups'] as $subgroup) {
    $output .= '<div class="field-subgroup">' . drupal_render($subgroup) . '</div>';
  }
  return $output;
}

function _rel_group_display_get_vocab_by_name($name) {
  $names = &drupal_static(__FUNCTION__);

  if (empty($names)) {
    $names = taxonomy_vocabulary_get_names();
  }

  return isset($names[$name]) ? $names[$name] : NULL;
}
