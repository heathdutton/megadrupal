<?php

/**
 * @file
 * Display a dynamic horizontal menu which degrades gracefully if Javascript is not present
 */
/**
 * Implements hook_block_info().
 */
function dynamic_persistent_menu_block_info() {
  $block = array();
  $result = db_query('SELECT dpmid, root, timeout FROM {dynamic_persistent_menu}');
  foreach ($result as $record) {
    $block[$record->dpmid]['info'] = t('Dynamic persistent menu #@dpmid', array('@dpmid' => $record->dpmid));
    $block[$record->dpmid]['cache'] = DRUPAL_NO_CACHE;
  }
  return $block;
}

/**
 * Implements hook_block_view().
 */
function dynamic_persistent_menu_block_view($delta = 0) {
  $dpm = dynamic_persistent_menu_load($delta);
  $params = explode(':', $dpm->root);
  $block['content'] = theme('dynamic_persistent_menu', array('id' => $delta, 'menu' => $params[0], 'parent' => $params[1], 'timeout' => $dpm->timeout), NULL, NULL);
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function dynamic_persistent_menu_block_configure($delta = 0) {
  if (user_access('administer dynamic persistent menu')) {
    $dpm = dynamic_persistent_menu_load($delta);
    $form = dynamic_persistent_menu_setting_base_form($dpm);
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function dynamic_persistent_menu_block_save($delta = 0, $edit = array()) {
  if (user_access('administer dynamic persistent menu')) {
    $dpm = dynamic_persistent_menu_load($delta);
    $form = dynamic_persistent_menu_setting_base_form($dpm);
    return $form;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function dynamic_persistent_menu_init() {
   drupal_add_css(drupal_get_path('module', 'dynamic_persistent_menu') .'/dynamic-persistent-menu.css', 'module', 'all', TRUE);

}

/**
 * Implementation of hook_menu
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function dynamic_persistent_menu_menu() {
  $items['admin/config/user-interface/dynamic_persistent_menu'] = array(
    'title' => 'Dynamic persistent menu',
    'page callback' => 'dynamic_persistent_menu_settings',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer dynamic persistent menu'),
    'file' => 'dynamic_persistent_menu.admin.inc',
  );
  $items['admin/config/user-interface/dynamic_persistent_menu/list'] = array(
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer dynamic persistent menu'),
  );
  $items['admin/config/user-interface/dynamic_persistent_menu/add'] = array(
    'title' => 'New',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dynamic_persistent_menu_settings_form'),
    'access arguments' => array('administer dynamic persistent menu'),
    'file' => 'dynamic_persistent_menu.admin.inc',
  );

  $items['admin/config/user-interface/dynamic_persistent_menu/%dynamic_persistent_menu/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dynamic_persistent_menu_settings_form', 3),
    'access arguments' => array('administer dynamic persistent menu'),
    'file' => 'dynamic_persistent_menu.admin.inc',
  );

  $items['admin/config/user-interface/dynamic_persistent_menu/%dynamic_persistent_menu/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dynamic_persistent_menu_delete_form', 3),
    'access arguments' => array('administer dynamic persistent menu'),
    'file' => 'dynamic_persistent_menu.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_permission
 */
function dynamic_persistent_menu_permission() {
  return array(
    'administer dynamic persistent menu' => array(
      'title' => t('administer dynamic persistent menu'),
      'description' => t('TODO Add a description for \'administer dynamic persistent menu\''),
    ),
  );
}

/**
 * Implementation of hook_theme
 */
function dynamic_persistent_menu_theme() {
  return array(
    'dynamic_persistent_menu' => array(
      'arguments' => array(
          'id' => NULL,
          'menu' => NULL,
          'parent' => NULL,
          'timeout' => NULL,
        ),
    ),
    'dynamic_persistent_menu_menu_item' => array(
        'arguments' => array(
            'link' => NULL,
            'extra_class' => NULL,
            'id' => NULL
          )
      ),
    'dynamic_persistent_menu_settings_list' => array(
      'arguments' => array('menus' => array()),
    ),
  );
}

/**
 * Callback functions
 */

function dynamic_persistent_menu_setting_base_form($dpm = NULL) {
  $options = menu_parent_options(menu_get_menus(), array('mlid' => 0));
  $form['dpmid'] = array(
    '#type' => 'hidden',
    '#value' => (isset($dpm->dpmid) ? $dpm->dpmid : NULL)
  );
  $form['root'] = array(
    '#type' => 'select',
    '#title' => t('Menu root'),
    '#default_value' => (isset($dpm->root) ? $dpm->root : 0),
    '#options' => $options,
    '#description' => t('Choose the menu you wish to display in the block')
  );
  $form['timeout'] = array(
      '#type' => 'textfield',
      '#title' => t('Sub-menu timeout'),
      '#default_value' => (isset($dpm->timeout)?$dpm->timeout:0),
      '#description' => t('Time before menu hiding when the mouse pointer leaves the parent menu (in milliseconds)')
    );
  return $form;
}

function dynamic_persistent_menu_load($dpmid) {
  return db_query('SELECT dpmid, root, timeout FROM {dynamic_persistent_menu} WHERE dpmid = :dpmid', array(':dpmid' => $dpmid))->fetchObject();
}

function dynamic_persistent_menu_delete($pid) {
  db_delete('dynamic_persistent_menu')
  ->condition('dpmid', $pid)
  ->execute();
}

/**
 * Theme functions
 */

function theme_dynamic_persistent_menu($args) {
  $id = $args['id'];
  $menu_name = $args['menu'];
  $mlid = $args['parent'];
  $timeout = $args['timeout'];
  $submenu = '';

  global $language;
  static $settings;

  if (!isset($settings)) {
    $settings = array(
      "menus" => array()
    );
    $settings_js = drupal_json_encode($settings);
    // #D7UP Why do we need that drupal_add_js call?
    //drupal_add_js("DynamicPersistentMenu =  $settings_js;", array('type' => 'inline', 'scope' => JS_DEFAULT));
  }
  $item_class = "dynamic-persistent-menu-menu-item";
  $sub_item_class = "dynamic-persistent-menu-sub-menu-item";
  
  // Find menu item in the menu tree

  $tree = dynamic_persistent_menu_tree_page_data($menu_name, $mlid);
  
  // Pull out just the menu items we are going to render so that we
  // get an accurate count for the first/last classes.
  
  foreach ($tree as $data) {
    if (!$data['link']['hidden']) {
      $menu_tree[] = $data;
    }
  }
  
  $menu_link = menu_link_load($mlid);

  // Don't display anything if the selected menu has no children
  if (!isset($menu_tree) || !$menu_tree) {
    return;
  }
 
  // Build the menus
  $output = '<ul id="dynamic-persistent-menu-'. $id .'" style="display:block" class="dynamic-persistent-menu-menu">';
  
  $num_items = count($menu_tree);
  $k = 0;

  foreach($menu_tree as $menu_item) {
    $link = $menu_item['link'];
    if ($link['hidden'] == 0 && (empty($link['options']['langcode']) || $link['options']['langcode'] == $language->language)) {
      if($link['has_children']) {
        if ($link['in_active_trail']) {
          $display = 'block';
          $over_menu_default = $link['mlid'];
        }
        else {
          $display = 'none';
        }
      }
      
      if ($k == 0) {
        $extra_class = 'first';
      }
      if ($k == $num_items - 1) {
        $extra_class = 'last';
      }

      $output .= theme('dynamic_persistent_menu_menu_item', array('link' => $link, 'extra_class' => 'dynamic-persistent-menu-menu-item ' . $extra_class, 'id' => 'dynamic-persistent-menu-menu'.$link['mlid']));
      $extra_class = '';
       
      if ($menu_item['link']['has_children'] && is_array($menu_item['below'])) {
        $submenu_items ='';
        
        $num_sub_items = 0;
        foreach ($menu_item['below'] as $submenu_item) {
          if ($submenu_item['link']['hidden'] == 0) {
            $num_sub_items++;
          }
        }
        $i = 0;
        
        foreach($menu_item['below'] as $submenu_item) {
          $link2 = $submenu_item['link'];
          if ($link2['hidden'] == 0) {
            if ($i == 0) {
              $extra_class = 'first';
            }
            if ($i == $num_sub_items - 1) {
              $extra_class = 'last';
            }
            $submenu_items .= theme('dynamic_persistent_menu_menu_item', array('link' => $link2, 'extra_class' => 'dynamic-persistent-menu-sub-menu-item ' . $extra_class, 'id' => 'dynamic-persistent-menu-sub-menu-item'.$link2['mlid']));
            $i++;
          }
          $extra_class = '';
        }

        if ($submenu_items !='') {
          $submenu .= '<ul class="dynamic-persistent-menu-sub-menu" id="dynamic-persistent-menu-sub-menu'. $link['mlid'] .'" style="display:'. $display  .'">';
          $submenu .= $submenu_items;
          $submenu .= '</ul>';
        }
      }
    }
    $k++;
  }
  $output .= '</ul>';
  $output .= $submenu;
  $menu = array(
    'default' => isset($over_menu_default) ? $over_menu_default : NULL,
    'over' => isset($over_menu_default) ? $over_menu_default : NULL,
    'timeout' => $timeout,
  );
  drupal_add_js(array("dynamic_persistent_menu" => array("menus" => array($id => $menu))), 'setting');
  drupal_add_js(drupal_get_path('module', 'dynamic_persistent_menu') .'/dynamic_persistent_menu.js');
  return $output;
}

/**
* Generate the HTML output for a menu item and submenu item.
*
* @ingroup themeable
*/
function theme_dynamic_persistent_menu_menu_item($args) {
  $link = $args['link'];
  $extra_class = $args['extra_class'];
  $id = $args['id'];
  $class = '';
  if (!empty($extra_class)) {
   $class .= ' '. $extra_class;
  } else {
   $class = '';
  }
  
  if ($link['in_active_trail']) {
   $link['localized_options']['attributes']['class'] = array('active');
  }
  $ret = theme('menu_link', array('element' => array('#title' => $link['title'], '#below' => NULL, '#href' => $link['href'], '#localized_options' => $link['localized_options'], '#attributes' => array('class' => $class, 'id' => $id)))) ."\n";
  return $ret;
}

/**
 * Get the data structure representing a named menu tree, based on the current page.
 *
 * The tree order is maintained by storing each parent in an individual
 * field, see http://drupal.org/node/141866 for more.
 *
 * @param $menu_name
 *   The named menu links to return
 * @return
 *   An array of menu links, in the order they should be rendered. The array
 *   is a list of associative arrays -- these have two keys, link and below.
 *   link is a menu item, ready for theming as a link. Below represents the
 *   submenu below the link if there is one, and it is a subtree that has the
 *   same structure described for the top-level array.
 */
function dynamic_persistent_menu_tree_page_data($menu_name, $mlid) {
  static $tree = array();
  // #D7UP $cid is never defined
  $cid = '';
  // Load the menu item corresponding to the current page.
  if ($item = menu_get_item()) {
    if (!isset($tree[$cid])) {
      // If the static variable doesn't have the data, check {cache_menu}.
      $cache = cache_get($cid, 'cache_menu');

      // If the tree data was not in the cache, $data will be NULL.
      if (!isset($cache->data)) {
        // Build and run the query, and build the tree.
        if ($item['access']) {
          // Check whether a menu link exists that corresponds to the current path.
          $args = array($item['href']);
          
          if (drupal_is_front_page()) {
            $args[] = '<front>';
          }
          // TODO Please convert this statement to the D7 database API syntax.
          $parents = db_query("SELECT p1, p2, p3, p4, p5, p6, p7, p8 FROM {menu_links}
            WHERE menu_name = :menu_name AND link_path IN (:args)",
            array(':menu_name' => $menu_name, ':args' => $args))->fetchAssoc();

          if (empty($parents)) {
            // If no link exists, we may be on a local task that's not in the links.
            // TODO: Handle the case like a local task on a specific node in the menu.
            $parents = db_query("SELECT p1, p2, p3, p4, p5, p6, p7, p8 FROM {menu_links}
              WHERE menu_name = :menu_name AND link_path = :link_path",
              array(':menu_name' => $menu_name, ':link_path' => $item['tab_root']))->fetchAssoc();
          }

          // We always want all the top-level links with plid == 0.
          $parents[] = '0';
          // Use array_values() so that the indices are numeric for array_merge().

          $args = array($mlid);

          for ($i = 0; $i < 2; $i++) {
            $result = db_query("SELECT * FROM {menu_links} WHERE plid in (:args)", array(':args' => $args));

            foreach ($result as $row) {
              $args[] = $row->mlid;
            }
          }

          array_shift($args);
        }
        else {
          // Show only the top-level menu items when access is denied.
          $args = array(0);
          $parents = array();
        }

        // Select the links from the table, and recursively build the tree. We
        // LEFT JOIN since there is no match in {menu_router} for an external
        // link.
        $i = 0;
        $args_array_inner = array();
        $args_array_assoc = array();
        foreach($args as $arg) {
          $args_array_inner[$i] = ':arg_' . $i;
          $args_array_assoc[$args_array_inner[$i]] = $arg;
          $i++;
        }
        $args_array_assoc[':menu_name'] = $menu_name;
        if (!count($args)) {
          return array();
        }
        $result = db_query('
          SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*
          FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path
          WHERE ml.menu_name = :menu_name AND ml.mlid IN (' . implode(', ', $args_array_inner) . ')
          ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC', $args_array_assoc);
        $list = array();
        foreach ($result as $item) {
          $list[] = (array) $item;
        }
        
        $data['tree'] = menu_tree_data($list, $parents);
        $data['node_links'] = array();
        menu_tree_collect_node_links($data['tree'], $data['node_links']);
      }
      // Check access for the current user to each item in the tree.
      menu_tree_check_access($data['tree'], $data['node_links']);
      $tree = $data['tree'];
    }

    return $tree;
  }

  return array();
}
