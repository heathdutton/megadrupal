<?php
/**
 * @file
 * Main module file allowing to create and take personality tests.
 */

/**
 * Implements hook_node_info().
 */
function personality_test_node_info() {
  return array(
    'personality_test' => array(
      'name' => t('Personality test'),
      'base' => 'personality_test',
      'description' => t('Create a bunch of questions and define a score for each possible answer, the total score will result in a personality type.'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function personality_test_form($node, &$form_state) {
  $form = array();

  $type = node_type_get_type($node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => (isset($node->title) ? $node->title : ''),
    '#required' => TRUE,
    '#weight' => -5,
  );

  if (!isset($node->questions)) {
    $node->questions = array();

    $node->questions[] = (object) array(
      'answers' => array(
        0 => (object) array(),
        1 => (object) array(),
      ),
    );
  }

  $form['questions'] = array(
    '#tree' => TRUE,
  );

  $qcount = 1;
  foreach ($node->questions as $qkey => $question) {
    // Create a question wrapper.
    $qwrap = array(
      '#type' => 'fieldset',
      '#title' => t('Question @count', array('@count' => $qcount)),
      '#collapsible' => TRUE,
      '#collapsed' => isset($question->qid),
      '#attributes' => array('id' => 'personality-test-question-' . $qkey),
    );

    $qwrap['qid'] = array(
      '#type' => 'value',
      '#value' => (isset($question->qid) ? $question->qid : ''),
    );

    $qwrap['question'] = array(
      '#type' => 'text_format',
      '#title' => t('Question'),
      '#default_value' => (isset($question->question) ? $question->question : ''),
      '#required' => TRUE,
      '#format' => (isset($question->format) ? $question->format : NULL),
    );

    $qwrap['answers'] = array();

    $acount = 1;
    foreach ($question->answers as $akey => $answer) {
      // Create an answer wrapper.
      $awrap = array(
        '#type' => 'fieldset',
        '#title' => t('Answer @count', array('@count' => $acount)),
        '#collapsible' => TRUE,
        '#collapsed' => isset($answer->aid),
        '#attributes' => array('id' => 'personality-test-question-' . $qkey . '-answer-' . $akey),
      );

      $awrap['aid'] = array(
        '#type' => 'value',
        '#value' => (isset($answer->aid) ? $answer->aid : ''),
      );

      $awrap['answer'] = array(
        '#type' => 'text_format',
        '#title' => t('Answer'),
        '#default_value' => (isset($answer->answer) ? $answer->answer : ''),
        '#required' => TRUE,
        '#format' => (isset($answer->format) ? $answer->format : NULL),
      );

      $awrap['score'] = array(
        '#type' => 'textfield',
        '#title' => t('Score'),
        '#default_value' => (isset($answer->score) ? $answer->score : ''),
        '#required' => TRUE,
      );

      $awrap['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete answer'),
        '#name' => 'delete_answer-' . $qkey . '-' . $akey,
        '#limit_validation_errors' => array(),
        '#submit' => array('personality_test_form_submit'),
        '#ajax' => array(
          'callback' => 'personality_test_form_js',
          'wrapper' => 'personality-test-question-' . $qkey . '-answer-' . $akey,
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );

      $qwrap['answers'][$akey] = $awrap;
      $acount++;
    }

    $qwrap['actions'] = array(
      '#prefix' => '<div id="personality-test-question-' . $qkey . '-actions">',
      '#suffix' => '</div>',
    );

    $qwrap['actions']['add_answer'] = array(
      '#type' => 'submit',
      '#value' => t('Add answer'),
      '#name' => 'add_answer-' . $qkey,
      '#limit_validation_errors' => array(),
      '#submit' => array('personality_test_form_submit'),
      '#ajax' => array(
        'callback' => 'personality_test_form_js',
        'wrapper' => 'personality-test-question-' . $qkey . '-actions',
        'method' => 'before',
        'effect' => 'fade',
      ),
    );

    $qwrap['actions']['delete_question'] = array(
      '#type' => 'submit',
      '#name' => 'delete_question-' . $qkey,
      '#value' => t('Delete question'),
      '#limit_validation_errors' => array(),
      '#submit' => array('personality_test_form_submit'),
      '#ajax' => array(
        'callback' => 'personality_test_form_js',
        'wrapper' => 'personality-test-question-' . $qkey,
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    $form['questions'][$qkey] = $qwrap;
    $qcount++;
  }

  $form['add_question'] = array(
    '#type' => 'submit',
    '#name' => 'add_question',
    '#value' => t('Add question'),
    '#limit_validation_errors' => array(),
    '#submit' => array('personality_test_form_submit'),
    '#ajax' => array(
      'callback' => 'personality_test_form_js',
      'wrapper' => 'personality-test-add-question',
      'method' => 'before',
      'effect' => 'fade',
    ),
    '#prefix' => '<div id="personality-test-add-question">',
    '#suffix' => '</div>',
  );

  if (!isset($node->personalities)) {
    $node->personalities = array((object) array(), (object) array());
  }

  $form['personalities'] = array(
    '#tree' => TRUE,
  );

  $pcount = 1;
  foreach ($node->personalities as $pkey => $personality) {
    // Create a personality wrapper.
    $pwrap = array(
      '#type' => 'fieldset',
      '#title' => ((isset($personality->min_score) && ctype_digit((string) $personality->min_score)) ? t('Personality with a score above @min', array('@min' => $personality->min_score)) : t('Personality @count', array('@count' => $pcount))),
      '#collapsible' => TRUE,
      '#collapsed' => isset($personality->pid),
      '#attributes' => array('id' => 'personality-test-personality-' . $pkey),
    );

    $pwrap['pid'] = array(
      '#type' => 'value',
      '#value' => (isset($personality->pid) ? $personality->pid : ''),
    );

    $pwrap['min_score'] = array(
      '#type' => 'textfield',
      '#title' => t('Minimum score'),
      '#default_value' => (isset($personality->min_score) ? $personality->min_score : ''),
      '#required' => TRUE,
    );

    $pwrap['description'] = array(
      '#type' => 'text_format',
      '#title' => t('Description'),
      '#default_value' => (isset($personality->description) ? $personality->description : ''),
      '#required' => TRUE,
      '#format' => (isset($personality->format) ? $personality->format : NULL),
    );

    $pwrap['delete_personality'] = array(
      '#type' => 'submit',
      '#name' => 'delete_personality-' . $pkey,
      '#value' => t('Delete score'),
      '#limit_validation_errors' => array(),
      '#submit' => array('personality_test_form_submit'),
      '#ajax' => array(
        'callback' => 'personality_test_form_js',
        'wrapper' => 'personality-test-personality-' . $pkey,
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    $form['personalities'][$pkey] = $pwrap;
    $pcount++;
  }

  $form['add_personality'] = array(
    '#type' => 'submit',
    '#name' => 'add_personality',
    '#value' => t('Add personality'),
    '#limit_validation_errors' => array(),
    '#submit' => array('personality_test_form_submit'),
    '#ajax' => array(
      'callback' => 'personality_test_form_js',
      'wrapper' => 'personality-test-add-personality',
      'method' => 'before',
      'effect' => 'fade',
    ),
    '#prefix' => '<div id="personality-test-add-personality">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Ajax callback; returns the part of the form that needs to be rendered
 * and returned to the visitor.
 */
function personality_test_form_js($form, $form_state) {
  $button = explode('-', $form_state['clicked_button']['#name']);

  switch ($button[0]) {
    case 'add_answer':
      end($form_state['node']->questions[$button[1]]->answers);
      $key = key($form_state['node']->questions[$button[1]]->answers);
      return $form['questions'][$button[1]]['answers'][$key];
    case 'add_question':
      end($form_state['node']->questions);
      $key = key($form_state['node']->questions);
      return $form['questions'][$key];
    case 'add_personality':
      end($form_state['node']->personalities);
      $key = key($form_state['node']->personalities);
      return $form['personalities'][$key];
    case 'delete_answer':
    case 'delete_question':
    case 'delete_personality':
      return '';
  }
}

/**
 * Form submit handler; adds additional questions, answers and personalities.
 */
function personality_test_form_submit($form, &$form_state) {
  $button = explode('-', $form_state['clicked_button']['#name']);

  // Handle the button action.
  switch ($button[0]) {
    case 'add_answer':
      $form_state['node']->questions[$button[1]]->answers[] = (object) array();
      break;
    case 'delete_answer':
      unset($form_state['input']['questions'][$button[1]]['answers'][$button[2]]);
      unset($form_state['node']->questions[$button[1]]->answers[$button[2]]);
      break;
    case 'add_question':
      $form_state['node']->questions[] = (object) array(
        'answers' => array(
          0 => (object) array(),
          1 => (object) array(),
        ),
      );
      break;
    case 'delete_question':
      unset($form_state['input']['questions'][$button[1]]);
      unset($form_state['node']->questions[$button[1]]);
    case 'add_personality':
      $form_state['node']->personalities[] = (object) array();
      break;
    case 'delete_personality':
      unset($form_state['input']['personalities'][$button[1]]);
      unset($form_state['node']->personalities[$button[1]]);
      break;
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_validate().
 */
function personality_test_validate($node, $form, &$form_state) {
  if (empty($node->questions)) {
    form_set_error('questions', t('A personality test must have at least one question.'));
  }
  else {
    $qcount = 1;
    foreach ($node->questions as $qkey => $question) {
      // Check if there are at least 2 answers.
      if (empty($question['answers']) || count($question['answers']) < 2) {
        form_set_error('questions][' . $qkey, t('Question @count should have at least two possible answers.', array('@count' => $qcount)));
      }
      else {
        $acount = 1;
        foreach ($question['answers'] as $akey => $answer) {
          // Validate the score of each answer.
          if (!is_numeric($answer['score']) || intval($answer['score']) != $answer['score']) {
            form_set_error('questions][' . $qkey . '][answers][' . $akey . '][score', t('The score of answer @acount of question @qcount should be an integer.', array('@acount' => $acount, '@qcount' => $qcount)));
          }

          $acount++;
        }
      }

      $qcount++;
    }
  }

  // Check if there are at least 2 personalities.
  if (empty($node->personalities) || count($node->personalities) < 2) {
    form_set_error('personalities', t('A personality test must have at least two personalities.'));
  }
  else {
    $pcount = 1;
    $scores = array();
    foreach ($node->personalities as $pkey => $personality) {
      // Validate the minimum score of each score.
      if (!is_numeric($personality['min_score']) || intval($personality['min_score']) != $personality['min_score']) {
        form_set_error('personalities][' . $pkey, t('The minimum score of personality @count should be an integer.', array('@count' => $pcount)));
      }
      elseif (in_array($personality['min_score'], $scores)) {
        form_set_error('personalities][' . $pkey, t('The minimum score of @minscore is already being useda.', array('@minscore' => $personality['min_score'])));
      }
      else {
        $scores[] = $personality['min_score'];
      }

      $pcount++;
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function personality_test_node_presave($node) {
  if ($node->type == 'personality_test') {
    foreach ($node->questions as &$question) {
      settype($question, 'object');

      // Get the question format and value.
      $question->format = $question->question['format'];
      $question->question = $question->question['value'];

      foreach ($question->answers as &$answer) {
        settype($answer, 'object');

        // Get the answer format and value.
        $answer->format = $answer->answer['format'];
        $answer->answer = $answer->answer['value'];
      }
    }

    foreach ($node->personalities as &$personality) {
      settype($personality, 'object');

      // Get the score description format and value.
      $personality->format = $personality->description['format'];
      $personality->description = $personality->description['value'];
    }
  }
}

/**
 * Implements hook_insert().
 */
function personality_test_insert($node) {
  _personality_test_save_node($node);
}

/**
 * Implements hook_update().
 */
function personality_test_update($node) {
  _personality_test_save_node($node, TRUE);
}

/**
 * Helper function to save a personality test node object.
 *
 * @param $node
 *    Personality test node object.
 * @param $cleanup
 *    Set to TRUE to remove missing questions, answers and personalities from
 *    the database.
 */
function _personality_test_save_node($node, $cleanup = FALSE) {
  $saved_qid = array();
  $saved_aid = array();
  $saved_pid = array();

  foreach ($node->questions as $question) {
    $question->nid = $node->nid;

    if ($question->qid) {
      // Update existing question.
      drupal_write_record('personality_test_questions', $question, 'qid');
    }
    else {
      // Insert new question.
      drupal_write_record('personality_test_questions', $question);
    }

    $saved_qid[] = $question->qid;

    foreach ($question->answers as $answer) {
      $answer->qid = $question->qid;

      if ($answer->aid) {
        // Update existing answer.
        drupal_write_record('personality_test_answers', $answer, 'aid');
      }
      else {
        // Insert new answer.
        drupal_write_record('personality_test_answers', $answer);
      }

      $saved_aid[] = $answer->aid;
    }
  }

  foreach ($node->personalities as $personality) {
    $personality->nid = $node->nid;

    if ($personality->pid) {
      // Update existing score.
      drupal_write_record('personality_test_personalities', $personality, 'pid');
    }
    else {
      // Insert new score.
      drupal_write_record('personality_test_personalities', $personality);
    }

    $saved_pid[] = $personality->pid;
  }

  if ($cleanup) {
    // Select all missing question ids.
    $missing_qid = db_select('personality_test_questions', 'q')
      ->fields('q', array('qid'))
      ->condition('qid', $saved_qid, 'NOT IN')
      ->condition('nid', $node->nid)
      ->execute()
      ->fetchAll(PDO::FETCH_COLUMN, 0);

    // Delete all missing questions.
    if ($missing_qid) {
      db_delete('personality_test_questions')
        ->condition('qid', $missing_qid)
        ->execute();
    }

    // Delete all missing answers.
    $delete = db_delete('personality_test_answers');

    if ($missing_qid) {
      $delete->condition(db_or()
        ->condition('qid', $missing_qid)
        ->condition(db_and()
          ->condition('aid', $saved_aid, 'NOT IN')
          ->condition('qid', $saved_qid)
        )
      );
    }
    else {
      $delete->condition('aid', $saved_aid, 'NOT IN')
        ->condition('qid', $saved_qid);
    }

    $delete->execute();

    // Delete all missing personalities.
    db_delete('personality_test_personalities')
      ->condition('pid', $saved_pid, 'NOT IN')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_load().
 */
function personality_test_load($nodes) {
  // Load all questions.
  $questions = db_select('personality_test_questions', 'q')
    ->fields('q')
    ->condition('nid', array_keys($nodes))
    ->addTag('translatable')
    ->execute();

  // Add the questions to the node objects.
  $qids = array();
  foreach ($questions as $question) {
    $qids[$question->qid] = $question->nid;
    $question->answers = array();

    if (!isset($nodes[$question->nid]->questions)) {
      $nodes[$question->nid]->questions = array();
    }

    $nodes[$question->nid]->questions[$question->qid] = $question;
  }

  // Load all answers.
  $answers = db_select('personality_test_answers', 'a')
    ->fields('a')
    ->condition('qid', array_keys($qids))
    ->addTag('translatable')
    ->execute();

  // Add the answers to the questions.
  foreach ($answers as $answer) {
    $nodes[$qids[$question->qid]]->questions[$answer->qid]->answers[$answer->aid] = $answer;
  }

  // Load all personalities.
  $personalities = db_select('personality_test_personalities', 'a')
    ->fields('a')
    ->condition('nid', array_keys($nodes))
    ->addTag('translatable')
    ->execute();

  // Add the personalities to the questions.
  foreach ($personalities as $personality) {
    if (!isset($nodes[$personality->nid]->personalities)) {
      $nodes[$personality->nid]->personalities = array();
    }

    $nodes[$personality->nid]->personalities[$personality->pid] = $personality;
  }
}

/**
 * Implements hook_delete().
 */
function personality_test_delete($node) {
  // Select all question ids that will be deleted.
  $qids = db_select('personality_test_questions', 'q')
    ->fields('q', array('qid'))
    ->condition('nid', $node->nid)
    ->execute()
    ->fetchAll(PDO::FETCH_COLUMN, 0);

  if ($qids) {
    // Delete all questions.
    db_delete('personality_test_questions')
      ->condition('nid', $node->nid)
      ->execute();

    // Delete all answers.
    db_delete('personality_test_answers')
      ->condition('qid', $qids)
      ->execute();
  }

  // Delete all personalities.
  db_delete('personality_test_personalities')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_view().
 */
function personality_test_view($node, $view_mode) {
  if ($view_mode == 'full') {
    // The full node view isn't cachable because of the form element.
    drupal_page_is_cacheable(FALSE);

    // Get the personality test form.
    $form = drupal_get_form('personality_test_do_test_form', $node);

    // Render the form as element.
    $node->content['personality_test'] = array(
      '#markup' => drupal_render($form),
      '#weight' => 99,
    );
  }

  return $node;
}

/**
 * Form builder; builds the form to present the personality test to the visitor.
 *
 * @param $node
 *    Personality test node.
 * @param $form_state
 *    Form state array.
 */
function personality_test_do_test_form($form, &$form_state, $node) {
  if (!isset($form_state['personality_test_score'])) {
    $form['questions'] = array();

    foreach ($node->questions as $question) {
      $form['questions'][$question->qid] = array();
      $wrapper = &$form['questions'][$question->qid];

      $wrapper['question'] = array(
        '#markup' => check_markup($question->question, $question->format),
      );

      $wrapper['answer'] = array(
        '#type' => 'radios',
        '#options' => array(),
        // Skip validation if no option has been checked, this way the "invalid option
        // has been checked" error won't be set; see core issue http://drupal.org/node/811542
        '#required' => FALSE,
        '#parents' => array('questions', $question->qid),
        '#process' => array('form_process_radios', 'personality_test_process_question'),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'personality_test') . '/personality_test.css',
          ),
        ),
      );

      foreach ($question->answers as $answer) {
        $wrapper['answer']['#options'][$answer->aid] = check_markup($answer->answer, $answer->format);
      }
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }
  else {
    $personalities = array();
    foreach ($node->personalities as $personality) {
      $personalities[$personality->min_score] = $personality;
    }

    ksort($personalities);
    $result = reset($personalities);

    foreach ($personalities as $personality) {
      if ($form_state['personality_test_score'] >= $personality->min_score) {
        $result = $personality;
      }
      else {
        break;
      }
    }

    $form['personality'] = array(
      '#markup' => check_markup($result->description, $result->format),
    );
  }

  return $form;
}

/**
 * Form validation handler; sets a form error when not all fields are completed.
 *
 * @param $form
 *    Form structure array.
 * @param $form_state
 *    Form state array.
 */
function personality_test_do_test_form_validate($form, &$form_state) {
  if (count(array_filter($form_state['values']['questions'])) < count($form_state['values']['questions'])) {
    form_set_error('questions', t('Please answer all questions.'));
  }
}

/**
 * Form submit handler; calculate the personality test score.
 *
 * @param $form
 *    Form structure array.
 * @param $form_state
 *    Form state array.
 */
function personality_test_do_test_form_submit($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];

  if (!isset($form_state['personality_test_score'])) {
    $form_state['personality_test_score'] = 0;

    foreach ($node->questions as $question) {
      $aid = $form_state['values']['questions'][$question->qid];
      $form_state['personality_test_score'] += $question->answers[$aid]->score;
    }

    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Replace the radio description by its title for each question answer.
 *
 * @param $element
 *    Form radios element with expanded radios.
 * @return
 *    Processed radios element.
 */
function personality_test_process_question($element) {
  foreach (element_children($element) as $key) {
    $element[$key]['#description'] = $element[$key]['#title'];
    $element[$key]['#title_display'] = 'none';
    $element[$key]['#prefix'] = '<div class="personality-test-answer clearfix">';
    $element[$key]['#suffix'] = '</div>';
  }

  return $element;
}
