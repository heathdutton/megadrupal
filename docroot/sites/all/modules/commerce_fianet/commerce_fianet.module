<?php

/**
 * Implements hook_menu().
 */
function commerce_fianet_menu() {
  return array(
    'admin/commerce/fianet' => array(
      'title' => 'FIA-NET settings',
      'description' => 'Configure the site ID, login and password',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_fianet_admin_form_settings'),
      'access arguments' => array('configure fianet settings'),
    ),
  );
}

/**
 * Implements hook_permission()
 */
function commerce_fianet_permission() {
  return array(
    'configure fianet settings' => array(
      'title' => 'Configure FIA-NET settings',
      'description' => 'Allow the user to configure the FIA-NET settings.',
    ),
  );
}

/**
 * Admin settings form to configure the FIA-NET API attributes.
 */
function commerce_fianet_admin_form_settings($form, &$form_state) {
  $form['commerce_fianet_markup'] = array(
    '#markup' => '<p>Configure the settings for the FIA-NET API. Right now, only the SAC method is available.</p>',
  );
  $form['commerce_fianet_sac'] = array(
    '#type' => 'fieldset',
    '#title' => t('SAC configuration'),
  );
  $form['commerce_fianet_sac']['commerce_fianet_sac_site_id'] = array(
    '#default_value' => variable_get('commerce_fianet_sac_site_id', ''),
    '#required' => TRUE,
    '#size' => 20,
    '#type' => 'textfield',
    '#title' => t('Site ID'),
  );
  $form['commerce_fianet_sac']['commerce_fianet_sac_login'] = array(
    '#default_value' => variable_get('commerce_fianet_sac_login', ''),
    '#required' => TRUE,
    '#size' => 20,
    '#type' => 'textfield',
    '#title' => t('Login'),
  );
  $form['commerce_fianet_sac']['commerce_fianet_sac_pwd'] = array(
    '#default_value' => variable_get('commerce_fianet_sac_pwd', ''),
    '#required' => TRUE,
    '#size' => 20,
    '#type' => 'textfield',
    '#title' => t('Password'),
  );
  $form['commerce_fianet_order_process_count'] = array(
    '#default_value' => variable_get('commerce_fianet_order_process_count', 50),
    '#description' => t('Indicates how many orders should be sent to the FIA-NET API per cron run. Use 0 to send every orders.'),
    '#size' => 3,
    '#type' => 'textfield',
    '#title' => t('Orders to process'),
  );
  $form['commerce_fianet_api_mode'] = array(
    '#default_value' => variable_get('commerce_fianet_api_mode', 'test'),
    '#description' => t('Use test mode while your site is not live. Use production mode when you publish the site.'),
    '#options' => array(
      'test' => t('Test'),
      'production' => t('Production'),
    ),
    '#type' => 'radios',
    '#title' => t('API mode'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_cron().
 */
function commerce_fianet_cron() {
  // Fetch the queue of orders to send to the FIA-NET API.
  $queue = new SystemQueue('commerce_fianet_orders_verification');
  $queue_items_count = $queue->numberOfItems();
  $default_process_items_count = variable_get('commerce_fianet_order_process_count', 50);

  $process_items_count = $default_process_items_count;
  if ($queue_items_count < $default_process_items_count || $default_process_items_count == 0) {
    $process_items_count = $queue_items_count;
  }
  // Find eligable orders.
  $orders = array();
  for ($i = 0 ; $i < $process_items_count ; $i++) {
    $item = $queue->claimItem(3);
    if ($item) {
      $orders[$item->data] = $item->data;
      $orders_items[$item->data] = $item;
    }
  }
  // Process orders if we have some.
  if (count($orders)) {
    // Load FIA-NET files and convert the orders as an XML to send.
    _commerce_fianet_setup_files();

    // Prepare the XML to send.
    $xml_orders = _commerce_fianet_load_xml_orders($orders);

    // Send the XML orders to the API.
    $results = _commerce_fianet_send_orders_to_api($xml_orders);
    if ($results) {
      foreach($results as $result) {
        if ($result['etat'] == 'encours') {
          $queue->deleteItem($orders_items[$result['refid']]);
          $order_link = l('#' . $result['refid'], 'admin/commerce/orders/' . $result['refid']);
          watchdog('Commerce FIA-NET', 'The order !order has been sent to FIA-NET.', array('!order' => $order_link));
        }
        elseif ($result['etat'] == 'error') {
          $order_link = l('#' . $result['refid'], 'admin/commerce/orders/' . $result['refid']);
          $error = $result['details'];
          watchdog('Commerce FIA-NET', 'The order !order could not be sent to FIA-NET: @error', array('!order' => $order_link, '@error' => $error), WATCHDOG_ERROR);
        }
      }
    }
  }
}

/**
 * Load files used by the FIA-NET API to work.
 */
function _commerce_fianet_setup_files() {
  define('FIANET_ENCODING', 'UTF-8');
  define('RELATIVE_PATH', drupal_get_path('module', 'commerce_fianet') . '/fianet/');

  define('FIANET_SAC_SITE_ID',  variable_get('commerce_fianet_sac_site_id', ''));
  define('FIANET_SAC_LOGIN',    variable_get('commerce_fianet_sac_login', ''));
  define('FIANET_SAC_PWD',      variable_get('commerce_fianet_sac_pwd', ''));

  define('FIANET_RNP_SITE_ID', '');
  define('FIANET_RNP_LOGIN', '');
  define('FIANET_RNP_PWD', '');
  define('FIANET_RNP_KEY', '');

  require_once(RELATIVE_PATH . 'to_implement/implement.php');
  require_once(RELATIVE_PATH . 'const/fianet.php');
  require_once(RELATIVE_PATH . 'const/url_sac.php');
  require_once(RELATIVE_PATH . 'const/url_rnp.php');

  require_once(RELATIVE_PATH . 'includes/debug.php');
  require_once(RELATIVE_PATH . 'includes/general.php');
  require_once(RELATIVE_PATH . 'includes/xml2array.php');

  require_once(RELATIVE_PATH . 'classes/fianet_key_64bits.php');
  require_once(RELATIVE_PATH . 'classes/fianet_sender.php');
  require_once(RELATIVE_PATH . 'classes/fianet_socket.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_adress_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_billing_adress_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_delivery_adress_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_appartment_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_user_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_billing_user_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_delivery_user_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_info_order_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_payment_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_product_list_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_product_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_transport_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_user_siteconso_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_order_xml.php');

  require_once(RELATIVE_PATH . 'classes/order/fianet_rnp_order_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_rnp_info_order_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_rnp_wallet_xml.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_xml_paracallback_builder.php');
  require_once(RELATIVE_PATH . 'classes/order/fianet_paraobject_xml.php');
}

/**
 * Transform the orders ids array as an XML document to send to the FIA-NET API.
 * @param $orders
 *   Array of commerce order ids.
 * @return
 *   Array of XML orders ready to be sent to the FIA-NET API.
 */
function _commerce_fianet_load_xml_orders($orders) {
  $xml_orders = array();
  $commerce_orders = commerce_order_load_multiple($orders);

  // Format and populate each commerce order as an XML order for FIA-NET API.
  foreach ($commerce_orders as $commerce_order) {
    // Prepare data helpers.
    $order = new fianet_order_xml();
    $commerce_order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
    $commerce_customer_billing = $commerce_order_wrapper->commerce_customer_billing->value();
    $customer_billing = entity_metadata_wrapper('commerce_customer_profile', $commerce_customer_billing);
    $billing_address = $customer_billing->commerce_customer_address->value();
    $order_total = $commerce_order_wrapper->commerce_order_total->value();

    // We have to provide a last name, if we don't have one, fallback on the
    // name of the address.
    $customer_name = $billing_address['last_name'];
    if ($billing_address['last_name'] == '') {
      $customer_name = $billing_address['name_line'];
    }
    // Set the billing customer information.
    $order->billing_user->set_quality_nonprofessional();
    $order->billing_user->nom         = $customer_name;
    $order->billing_user->prenom      = $billing_address['first_name'];
    $order->billing_user->societe     = $billing_address['organisation_name'];

    if ($commerce_customer_billing->uid > 0) {
      $account = user_load($commerce_customer_billing->uid);
      $order->billing_user->email     = $account->mail;
    }

    // Set the billing address information.
    $order->billing_adress->rue1      = $billing_address['thoroughfare'];
    $order->billing_adress->rue2      = $billing_address['premise'];
    $order->billing_adress->cpostal   = $billing_address['postal_code'];
    $order->billing_adress->ville     = $billing_address['locality'];
    $order->billing_adress->pays      = $billing_address['country'];

    // Order global data.
    $order->info_commande->siteid     = variable_get('commerce_fianet_sac_site_id', '');
    $order->info_commande->refid      = $commerce_order_wrapper->order_id->value();
    $order->info_commande->montant    = floatval((int)$order_total['amount'] / 100);
    $order->info_commande->devise     = $order_total['currency_code'];
    $order->info_commande->ip         = $_SERVER['REMOTE_ADDR'];
    $order->info_commande->timestamp	= date("Y-m-d H:i:s");

    // (Optional) Add products to the order.
    if (count($commerce_order->commerce_line_items) > 0) {
      foreach ($commerce_order_wrapper->commerce_line_items as $line_item) {
        // Prepare data.
        $product = new fianet_product_xml();
        $commerce_product = $line_item->commerce_product;
        $commerce_line_item_unit_price = $line_item->commerce_unit_price->value();

        // Set values.
        $product->ref       = $commerce_product->sku->value();
        $product->nb        = $line_item->quantity->value();
        $product->prixunit  = floatval((int)$commerce_line_item_unit_price['amount'] / 100);
        $product->name      = $commerce_product->title->value();

        // Add product.
        $order->info_commande->list->add_product($product);
      }
    }

    // Give the opportunity to modules to add extra data to each order
    // before stacking the order.
    drupal_alter('commerce_fianet_stack_order', $order);

    // Stack the order.
    $xml_orders[] = $order;
  }
  return $xml_orders;
}

/**
 * Implements hook_commerce_fianet_stack_order().
 */
function commerce_fianet_commerce_fianet_stack_order_alter(&$order, $commerce_order) {
  // The delivery mode and the payment method are mandatory to be able to
  // send the orders to the FIA-NET API.
  // You should implement this hook to set the appropriate values according
  // to your products.

  // Delivery mode.
  $order->info_commande->transport->type      = 4;
  $order->info_commande->transport->nom       = "La poste";
  $order->info_commande->transport->rapidite	= 2;

  // Payment method.
  $order->payment->type = 'carte';
}

/**
 * Send the array of FIA-NET orders XML to the API.
 * @param $xml_orders
 *   Array of XML orders formatted by the FIA-NET classes.
 * @return
 *   Return an array of debug data coming from the API.
 */
function _commerce_fianet_send_orders_to_api($xml_orders) {
  // Configure sender.
  $sender = new fianet_sender();
  $sender->mode = variable_get('commerce_fianet_api_mode', 'test');
  $sender->add_order($xml_orders);

  // Send orders to the FIA-NET API.
  $results = $sender->send_orders_stacking();
  return $results;
}

