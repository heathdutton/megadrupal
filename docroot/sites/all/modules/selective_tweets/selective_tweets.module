<?php
/**
 * @file
 * Main module file.
 */

define('SELECTIVE_TWEETS_API_VERSION', '1.1');
define('SELECTIVE_TWEETS_EMBED', 'embed');
define('SELECTIVE_TWEETS_RAW', 'raw');
define('SELECTIVE_TWEETS_LIGHT', 'light');
define('SELECTIVE_TWEETS_DARK', 'dark');
define('ST_SELECTION_MODE_LIVE', 1);
define('ST_SELECTION_MODE_FAVORITES', 2);
define('ST_SELECTION_MODE_SEARCH', 3);

/**
 * Implements hook_menu().
 */
function selective_tweets_menu() {
  $items = array();

  $items['admin/config/services/selective-tweets'] = array(
    'title' => 'Selective Tweets',
    'description' => t('Configure the Selective Tweets Twitter feed.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('selective_tweets_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/selective_tweets.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Ajax callback for loading new Tweets.
  $items['selective-tweets/feed/load/%selective_tweets_block/%'] = array(
    'page callback' => 'selective_tweets_twitter_feed_build',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'file' => 'includes/selective_tweets.pages.inc',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'selective_tweets_ajax_deliver',
  );

  // Create an array of block settings.
  $settings = array(
    'title' => 'Add Selective Tweets block',
    'description' => 'Add a new Selective Tweets block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('selective_tweets_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/selective_tweets.admin.inc',
  );

  // Add a local action to the block configuration page.
  $items['admin/structure/block/add-selective-tweets-block'] = array(
    'access arguments' => array('administer blocks'),
  ) + $settings;

  // Get the default site theme.
  $default_theme = variable_get('theme_default', 'bartik');

  // Add a local action to the per-theme block configuration pages.
  foreach (list_themes() as $key => $theme) {
    if ($key != $default_theme) {
      $items['admin/structure/block/list/' . $key . '/add-selective-tweets-block'] = array(
        'access callback' => '_selective_tweets_themes_access',
        'access arguments' => array($theme),
      ) + $settings;
    }
  }

  $items['admin/structure/block/administer/selective-tweets/%/delete'] = array(
    'title' => 'Delete Selective Tweets block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('selective_tweets_block_delete', 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/selective_tweets.admin.inc',
  );

  return $items;
}

/**
 * Menu item access callback - only admin or enabled themes can be accessed.
 */
function _selective_tweets_themes_access($theme) {
  return user_access('administer blocks') && drupal_theme_access($theme);
}

/**
 * Implements hook_theme().
 */
function selective_tweets_theme($existing, $type, $theme, $path) {
  return array(
    'selective_tweet_raw' => array(
      'variables' => array(
        'tweet' => NULL,
      ),
      'template' => 'templates/selective-tweet-raw',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function selective_tweets_form_block_admin_display_form_alter(&$form, &$form_state, $form_id) {
  $result = db_query('SELECT bid FROM {selective_tweets_block}');

  // Add delete links to Selective Tweets blocks.
  foreach ($result as $block) {
    $form['blocks']['selective_tweets_' . $block->bid]['delete'] = array(
      '#type' => 'link',
      '#title' => t('delete'),
      '#href' => 'admin/structure/block/administer/selective-tweets/' . $block->bid . '/delete',
    );
  }
}

/**
 * Implements hook_block_info().
 */
function selective_tweets_block_info() {
  $blocks = array();

  $result = db_query('SELECT bid, info FROM {selective_tweets_block} ORDER BY info');
  foreach ($result as $block) {
    $blocks[$block->bid]['info'] = $block->info;
    $blocks[$block->bid]['cache'] = DRUPAL_CACHE_CUSTOM;
  }

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function selective_tweets_block_configure($delta='') {
  if ($delta) {
    // Load the block configuration.
    $config = selective_tweets_block_load($delta);

    // Unserialize the timeline settings.
    $data = $config['data'];
    // Remove the serialized timeline settings.
    unset($config['data']);
    // Add the timeline settings to the block settings.
    $selective_tweets_block = $config + $data;
  }
  else {
    $selective_tweets_block = array();
  }

  module_load_include('inc', 'selective_tweets', 'includes/selective_tweets.admin');

  return selective_tweets_custom_block_form($selective_tweets_block);
}

/**
 * Implements hook_block_save().
 */
function selective_tweets_block_save($delta = '', $edit = array()) {
  module_load_include('inc', 'selective_tweets', 'includes/selective_tweets.admin');
  selective_tweets_custom_block_save($edit, $delta);
}

/**
 * Implements hook_block_view().
 */
function selective_tweets_block_view($delta = '') {
  // Load the configuration.
  $config = selective_tweets_block_load($delta);

  $throbber = '<div class="ajax-progress"><span class="throbber"></span>' . t($config['data']['loading_text']) . '</div>';

  $block = array();
  $block['subject'] = check_plain($config['info']);
  module_load_include('inc', 'selective_tweets', 'includes/selective_tweets.pages');
  $block['content'] = array(
    '#markup' => '<div id="selective-tweets-async-load-' . $delta . '" class="selective-tweets-async-load">' . $throbber . '</div>'
  );

  $block['content']['#attached']['library'][] = array('system', 'drupal.ajax');

  // Add style settings to javascript.
  $style = array(
    'theme' => $config['data']['theme'],
  );
  drupal_add_js(array('selective_tweets' => array('block-selective-tweets-' . $delta => $style)), 'setting');

  // Attach the Twitter widget script.
  $block['content']['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'selective_tweets') . '/js/widgets.js',
    'type' => 'file',
    'scope' => 'header',
    'weight' => 0,
  );

  // Attach the script to load the initial content in the block.
  $block['content']['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'selective_tweets') . '/js/selective_tweets.js',
    'type' => 'file',
    'scope' => 'header',
    'weight' => 1,
  );

  return $block;
}

/**
 * Implements hook_preprocess_block().
 */
function selective_tweets_preprocess_block(&$variables) {
  if ($variables['block']->module == 'selective_tweets') {
    $variables['classes_array'][] = drupal_html_class('selective-tweets-block');
  }
}

/**
 * Packages and sends the result of a page callback to the browser as HTML.
 *
 * @param $page_callback_result
 *   The result of a page callback. Can be one of:
 *   - NULL: to indicate no content.
 *   - An integer menu status constant: to indicate an error condition.
 *   - A string of HTML content.
 *   - A renderable array of content.
 */
function selective_tweets_ajax_deliver($page_callback_result) {
  // Only render content
  print drupal_render($page_callback_result);
}

/**
 * Returns information from database about
 * a user-created (Selective Tweets) block.
 *
 * @param $bid
 *   ID of the block to get information for.
 *
 * @return
 *   Associative array of information stored in the database for this block.
 */
function selective_tweets_block_load($bid) {
  $result = &drupal_static(__FUNCTION__);

  if (!isset($result[$bid])) {
    $result[$bid] = db_query("SELECT * FROM {selective_tweets_block} WHERE bid = :bid", array(':bid' => $bid))->fetchAssoc();
    if ($result[$bid]) {
      $result[$bid]['data'] = unserialize($result[$bid]['data']);
      $default_properties = _selective_tweets_block_properties();
      $result[$bid]['data'] = array_merge($default_properties, $result[$bid]['data']);
    }
    else {
      return FALSE;
    }
  }

  return $result[$bid];
}

/**
 * Helper function to set up a connection to the Twitter API.
 *
 * @return
 *   Object representing the Twitter connection.
 */
function selective_tweets_twitter_connect() {
  module_load_include('inc', 'selective_tweets', 'includes/selective_tweets.twitter_oauth');

  $consumer_key = variable_get('selective_tweets_consumer_key', NULL);
  $consumer_secret = variable_get('selective_tweets_consumer_secret', NULL);
  $oauth_token = variable_get('selective_tweets_oauth_token', NULL);
  $oauth_token_secret = variable_get('selective_tweets_oauth_token_secret', NULL);

  if (!isset($consumer_key)
    || !isset($consumer_secret)
    || !isset($oauth_token)
    || !isset($oauth_token_secret)
  ) {
    throw new Exception(t('Twitter API settings are missing.'));
  }

  $connection = new TwitterOAuth($consumer_key, $consumer_secret, $oauth_token, $oauth_token_secret);

  return $connection;
}

/**
 * Helper function to retrieve the block properties and their defaults.
 *
 * @return
 *   An array of block properties.
 */
function _selective_tweets_block_properties() {
  return array(
    'render_mode' => SELECTIVE_TWEETS_EMBED,
    'screen_name' => '',
    'display_mode' => ST_SELECTION_MODE_LIVE,
    'from_account' => '',
    'to_account' => '',
    'user_mentions' => '',
    'hashtags' => '',
    'include_retweets' => TRUE,
    'initial_count' => 10,
    'count' => 10,
    'insert_links' => TRUE,
    'theme' => SELECTIVE_TWEETS_LIGHT,
    'hide_media' => FALSE,
    'hide_thread' => TRUE,
    'maxwidth' => 550,
    'loading_text' => 'Loading Tweets',
    'pull_cached_time' => 5,
    'stack_cached_time' => 180,
    'tweet_stack_max' => 250,
    'cache_rendered_tweet' => TRUE,
  );
}
