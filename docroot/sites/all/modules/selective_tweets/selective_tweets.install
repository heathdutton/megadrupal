<?php
/**
 * @file
 * selective_tweets.install
 */

/**
 * Implements hook_requirements().
 */
function selective_tweets_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $required_settings = array(
      'selective_tweets_consumer_key',
      'selective_tweets_consumer_secret',
      'selective_tweets_oauth_token',
      'selective_tweets_oauth_token_secret',
    );

    $requirements['selective_tweets_settings'] = array(
      'title' => t('Selective Tweets settings'),
      'value' => t('Settings are present.'),
      'severity' => REQUIREMENT_OK,
    );

    foreach ($required_settings as $setting) {
      $setting_value = variable_get($setting, NULL);
      if (empty($setting_value)) {
        $requirements['selective_tweets_settings']['value'] = t('Settings are missing. (<a href="@url">Settings</a>)', array(
          '@url' => url('admin/config/services/selective-tweets'),
        ));
        $requirements['selective_tweets_settings']['severity'] = REQUIREMENT_ERROR;

        break;
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function selective_tweets_schema() {
  $schema['selective_tweets_block'] = array(
    'description' => 'The table for storing Selective Tweets blocks.',
    'fields' => array(
      'bid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The block's {block}.bid.",
      ),
      'info' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Block description.',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized data containing the timeline properties.',
      ),
      'pull_cache_expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX timestamp of the time when cached tweets need to be supplemented with new Tweets.',
      ),
      'stack_cache_expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX timestamp of the time when cached tweets need to be dropped before adding new Tweets.',
      ),
    ),
    'unique keys' => array(
      'info' => array('info'),
    ),
    'primary key' => array('bid'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function selective_tweets_uninstall() {
  // Remove blocks.
  db_delete('block')
    ->condition('module', 'selective_tweets')
    ->execute();
  db_delete('block_role')
    ->condition('module', 'selective_tweets')
    ->execute();

  // Remove variables.
  variable_del('selective_tweets_api_version');
  variable_del('selective_tweets_consumer_key');
  variable_del('selective_tweets_consumer_secret');
  variable_del('selective_tweets_oauth_token');
  variable_del('selective_tweets_oauth_token_secret');

  // Delete cache.
  cache_clear_all('selective_tweets', 'cache', TRUE);
}

/**
 * Rename cache_expire table field to pull_cache_expire and add new table field
 * stack_cache_expire.
 */
function selective_tweets_update_7001(&$sandbox) {
  db_change_field('selective_tweets_block', 'cache_expire', 'pull_cache_expire', array(
    'type' => 'int',
    'not null' => TRUE,
    'description' => 'UNIX timestamp of the time when cached tweets need to be supplemented with new Tweets.',
  ));

  db_add_field('selective_tweets_block', 'stack_cache_expire', array(
    'type' => 'int',
    'not null' => TRUE,
    'description' => 'UNIX timestamp of the time when cached tweets need to be dropped before adding new Tweets.',
    'default' => REQUEST_TIME,
  ));
}
