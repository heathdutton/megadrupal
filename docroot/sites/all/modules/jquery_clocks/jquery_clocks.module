<?php

/**
 * @file
 * In this file we extend the drupal functionality with the help of hooks.
 *
 * Here we will implement  drupal menu hook and drupal block hooks to meet our
 * requirements . We will also implement drupal hook_theme to falicate the
 * developers to override output results if they needed. 
 */

/**
 * Implements hook_menu().
 */
function jquery_clocks_menu() {
  $items = array();
  $items['admin/config/user-interface/jquery-clocks'] = array(
    'title' => 'Jquery Clocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jquery_clocks_config_page'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Add different styles of clocks.',
    'file' => 'jquery_clocks.admin.inc',
  );
  $items['admin/config/user-interface/jquery-clocks/manage'] = array(
    'title' => 'Jquery Clocks',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => 'Add different styles of clocks.',
    'weight' => -10,
  );
  return $items;
}

/**
 * This drupal hook function for display different types of clocks into blocks.
 *
 * Implements hook_block_info().
 */
function jquery_clocks_block_info() {
  $blocks = array();
  $options = variable_get('jquery_clocks_styles', array());
  $sel_options = array_diff($options, array(0));
  foreach ($sel_options as $key => $val) {
    $blocks[$key] = array(
      'info' => jquery_clocks_styles_list($key),
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function jquery_clocks_block_view($delta = '') {
  $block = array();
  $options = variable_get('jquery_clocks_styles', array());
  $sel_options = array_diff($options, array(0));
  if (in_array($delta, $sel_options)) {
    // The subject is displayed at the top of the block. Note that it
    // should be passed through t() for translation. The title configured
    // for the block using Drupal UI supercedes this one.
    $block['subject'] = jquery_clocks_styles_list($delta);
    // The content of the block is typically generated by calling a custom
    // function.
    $block['content'] = jquery_clocks_block_view_contents($delta);
  }
  return $block;
}

/**
 * Get dynamic clocks according to appropriate  configurations.
 *
 * Callback for jquery_clocks_block_view().
 *
 * @param string $key
 *   Pass key for getting option label.
 *
 * @return array
 *   retrn array if $key is not pass otherwise return string
 */
function jquery_clocks_styles_list($key = '') {
  drupal_add_css(drupal_get_path('module', 'jquery_clocks') . '/css/jquery_clocks.css');
  $options = array(
    'jquery-clock-plugin-analog' => t('Jquery-clock-plugin:analog'),
    'jquery-clock-plugin-digital' => t('Jquery-clock-plugin:digital'),
    'jclocksgmt-without-digital' => t('jClocksGMT without digital'),
    'jclocksgmt-with-digital-12' => t('jClocksGMT digital 12 hour'),
    'jclocksgmt-with-digital-24' => t('jClocksGMT digital 24 hour'),
    'jquery-clock-digital-12' => t('jQuery-Clock-Plugin-master 12 hour'),
    'jquery-clock-digital-24' => t('jQuery-Clock-Plugin-master 24 hour'),
  );
  if (!empty($key)) {
    return $options[$key];
  }
  return $options;
}

/**
 * This function return different type of contents.
 *
 * Callback for jquery_clocks_block_view().
 *
 * @param string $delta
 *   Block delta/id string
 *
 * @return string
 *   Return different styles of clocks.
 */
function jquery_clocks_block_view_contents($delta) {
  $funcs = array(
    'jquery-clock-plugin-analog' => 'jquery_clocks_plugin_function_callback',
    'jquery-clock-plugin-digital' => 'jquery_clocks_plugin_function_callback',
    'jclocksgmt-without-digital' => 'jquery_clocks_jclocksgmt_function_callback',
    'jclocksgmt-with-digital-12' => 'jquery_clocks_jclocksgmt_function_callback',
    'jclocksgmt-with-digital-24' => 'jquery_clocks_jclocksgmt_function_callback',
    'jquery-clock-digital-12' => 'jquery_clocks_plugin_master_function_callback',
    'jquery-clock-digital-24' => 'jquery_clocks_plugin_master_function_callback');
  return call_user_func($funcs[$delta], $delta);
}

/**
 * This function returns two type of clocks.
 *
 * Callback jquery_clocks_block_view_contents()
 *
 * @param string $delta
 *   Block delta/id string.
 *
 * @return string
 *   Return appropriate clock html.
 */
function jquery_clocks_plugin_function_callback($delta) {
  $offset = jquery_clocks_get_time_zone_offset();
  $library = drupal_get_library('jquery_clocks', 'jquery-clock-plugin');
  if (!is_dir(jquery_clocks_get_library_path('jquery-clock-plugin'))) {
    return array(
      '#markup' => theme('jquery_clocks_missing_msg',
          array(
            'name' => t('jquery-clock-plugin'),
            'link' => $library['website'],
          )));
  }
  drupal_add_library('jquery_clocks', 'jquery-clock-plugin');
  switch ($delta) {
    case 'jquery-clock-plugin-analog':
      drupal_add_js(array('jquery_clocks' => array('timezon_offset' => $offset)), 'setting');
      drupal_add_js('jQuery(document).ready(function() {
   jQuery("#jquery-clock-plugin-analog").clock({offset:Drupal.settings.jquery_clocks.timezon_offset, type: "analog"}); });', 'inline');
      $output = theme('jquery_clocks_plugin_analog');
      break;

    case 'jquery-clock-plugin-digital':
      drupal_add_js('jQuery(document).ready(function() {
   jQuery("#jquery-clock-plugin-digital").clock({offset:Drupal.settings.jquery_clocks.timezon_offset, type: "digital"}); });', 'inline');
      $output = theme('jquery_clocks_plugin_digital');
      break;
  }
  return array('#markup' => $output);
}

/**
 * This function returns three types of clocks.
 *
 * Callback for jquery_clocks_block_view_contents().
 *
 * @param string $delta
 *   Block delta/id string.
 *
 * @return string
 *   Return different styles of clocks.
 */
function jquery_clocks_jclocksgmt_function_callback($delta) {
  $library = drupal_get_library('jquery_clocks', 'jClocksGMT-master');
  if (!is_dir(jquery_clocks_get_library_path('jClocksGMT-master'))) {
    return array(
      '#markup' => theme('jquery_clocks_missing_msg',
          array(
            'name' => 'jClocksGMT-master',
            'link' => $library['website'],
          )));
  }
  drupal_add_library('jquery_clocks', 'jClocksGMT-master');
  $offset = jquery_clocks_get_time_zone_offset();
  drupal_add_js(array('jquery_clocks' => array('timezon_offset' => $offset)), 'setting');
  switch ($delta) {
    case 'jclocksgmt-without-digital':
      drupal_add_js('jQuery(document).ready(function() {
        jQuery("#clock_dc").jClocksGMT({offset:Drupal.settings.jquery_clocks.timezon_offset, digital: false}); });', 'inline');
      $output = theme('jquery_clocks_jclocksgmt_without_digital');
      break;

    case 'jclocksgmt-with-digital-12':
      drupal_add_js('jQuery(document).ready(function() {
        jQuery("#clock_hou").jClocksGMT({offset:Drupal.settings.jquery_clocks.timezon_offset}); });', 'inline');
      $output = theme('jquery_clocks_jclocksgmt_digital_12');
      break;

    case 'jclocksgmt-with-digital-24':
      drupal_add_js('jQuery(document).ready(function() {
        jQuery("#clock_india").jClocksGMT({offset:Drupal.settings.jquery_clocks.timezon_offset, hour24: true}); });', 'inline');
      $output = theme('jquery_clocks_jclocksgmt_digital_24');
      break;
  }
  return array('#markup' => $output);
}

/**
 * This function returns two types of digital clocks.
 *
 * Callback for jquery_clocks_block_view_contents().
 *
 * @param string $delta
 *   Block delta/id string.
 *
 * @return string
 *   Return different styles of digital clocks.
 */
function jquery_clocks_plugin_master_function_callback($delta) {
  $library = drupal_get_library('jquery_clocks', 'jQuery-Clock-Plugin-master');
  if (!is_dir(jquery_clocks_get_library_path('jClocksGMT-master'))) {
    return theme('jquery_clocks_missing_msg', array('name' => 'jQuery-Clock-Plugin-master', 'link' => $library['website']));
  }
  drupal_add_library('jquery_clocks', 'jQuery-Clock-Plugin-master');
  $offset = jquery_clocks_get_time_zone_offset();
  drupal_add_js(array('jquery_clocks' => array('timezon_offset' => $offset)), 'setting');
  switch ($delta) {
    case 'jquery-clock-digital-12':
      drupal_add_js('jQuery(document).ready(function() {
        var now = new Date();
        var now_utc = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),
                  now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());
        var customtimestamp = now_utc.getTime() + Drupal.settings.jquery_clocks.timezon_offset*3600*1000;
        jQuery("#clock1").jqClock({"timestamp":customtimestamp, "format":"12","calendar":"false"}); });', 'inline');
      $output = theme('jquery_clocks_plugin_master_12');
      break;

    case 'jquery-clock-digital-24':
      drupal_add_js('jQuery(document).ready(function() {
        var now = new Date();
        var now_utc = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),
                  now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());
        var customtimestamp = now_utc.getTime() + Drupal.settings.jquery_clocks.timezon_offset*3600*1000;
        jQuery("#clock2").jqClock({"timestamp":customtimestamp, "format":"24","calendar":"false"}); });', 'inline');
      $output = theme('jquery_clocks_plugin_master_24');
      break;
  }
  return array('#markup' => $output);
}

/**
 * Get timezon offset value regarding to drupal settings.
 *
 * @return int
 *   Return +ve or -ve integer value
 */
function jquery_clocks_get_time_zone_offset() {
  $this_tz_str = date_default_timezone_get();
  $this_tz = new DateTimeZone($this_tz_str);
  $now = new DateTime("now", $this_tz);
  $offset = $this_tz->getOffset($now) / 3600;
  $offset = $offset < 0 ? $offset : "+" . $offset;
  return $offset;
}

/**
 * Implements hook_theme().
 */
function jquery_clocks_theme() {
  return array(
    'jquery_clocks_plugin_digital' => array(
      'variables' => array(),
    ),
    'jquery_clocks_plugin_analog' => array(
      'variables' => array(),
    ),
    'jquery_clocks_jclocksgmt_without_digital' => array(
      'variables' => array(),
    ),
    'jquery_clocks_jclocksgmt_digital_12' => array(
      'variables' => array(),
    ),
    'jquery_clocks_jclocksgmt_digital_24' => array(
      'variables' => array(),
    ),
    'jquery_clocks_plugin_master_12' => array(
      'variables' => array(),
    ),
    'jquery_clocks_plugin_master_24' => array(
      'variables' => array(),
    ),
    'jquery_clocks_missing_msg' => array(
      'variables' => array(
        'link' => NULL,
        'name' => NULL,
      ),
    ),
  );
}

/**
 * Show message when jquery library missing.
 */
function theme_jquery_clocks_missing_msg($vars) {
  return t('It seems that  @name is missing please download  from <a href="@link">here</a>.', array("@name" => $vars['name'], "@link" => $vars['link']));
}

/**
 * Jquery-clock-plugin html for digital clock.
 *
 * @return string
 *   Return htmls.
 */
function theme_jquery_clocks_plugin_digital() {
  $output = '
    <ul id="jquery-clock-plugin-digital" class="digital">
	   	  <li class="hour"></li>
	     	<li class="min"></li>
        <li class="sec"></li>
     	</ul>';
  return $output;
}
/**
 * Jquery-clock-plugin html for analog clock.
 *
 * @return string
 *   Return htmls.
 */
function theme_jquery_clocks_plugin_analog() {
  $output = '
    <ul id="jquery-clock-plugin-analog" class="analog">
	   	  <li class="hour"></li>
	     	<li class="min"></li>
        <li class="sec"></li>
     	</ul>';
  return $output;
}
/**
 * JClocksGMT-master html for without digital analog clock.
 *
 * @return string
 *   Return htmls.
 */
function theme_jquery_clocks_jclocksgmt_without_digital() {
  $output = '
          <div id="clock_dc" class="clock_container jclocksgmt-master-clock">
            <div class="clockHolder">
                <div class="rotatingWrapper"><img class="hour" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_hour.png" /></div>
                <div class="rotatingWrapper"><img class="min" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_min.png" /></div>
                <div class="rotatingWrapper"><img class="sec" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_sec.png" /></div>
                <img class="clock" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_face.png" />
            </div>
            <div class="digital">
                <span class="hr"></span><span class="minute"></span> <span class="period"></span>
            </div>
         </div>';
  return $output;
}
/**
 * JClocksGMT-master html for with digital 12 hour analog clock.
 *
 * @return string
 *   Return htmls.
 */
function theme_jquery_clocks_jclocksgmt_digital_12() {
  $output = '
          <div id="clock_hou" class="clock_container jclocksgmt-master-clock">
            <div class="clockHolder">
                <div class="rotatingWrapper"><img class="hour" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_hour.png" /></div>
                <div class="rotatingWrapper"><img class="min" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_min.png" /></div>
                <div class="rotatingWrapper"><img class="sec" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_sec.png" /></div>
                <img class="clock" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_face.png" />
            </div>
            <div class="digital">
                <span class="hr"></span><span class="minute"></span> <span class="period"></span>
            </div>
         </div>';
  return $output;
}
/**
 * JClocksGMT-master html for with digital 24 hour analog clock.
 *
 * @return string
 *   Return htmls.
 */
function theme_jquery_clocks_jclocksgmt_digital_24() {
  $output = '
          <div id="clock_india" class="clock_container jclocksgmt-master-clock">
            <div class="clockHolder">
                <div class="rotatingWrapper"><img class="hour" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_hour.png" /></div>
                <div class="rotatingWrapper"><img class="min" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_min.png" /></div>
                <div class="rotatingWrapper"><img class="sec" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_sec.png" /></div>
                <img class="clock" src="' . file_create_url(jquery_clocks_get_library_path('jClocksGMT-master')) . '/images/clock_face.png"/>
            </div>
            <div class="digital">
                <span class="hr"></span><span class="minute"></span> <span class="period"></span>
            </div>
         </div>';
  return $output;
}

/**
 * JQuery-Clock-Plugin-master digital 12 hour html.
 *
 * @return string
 *   Return htmls.
 */
function theme_jquery_clocks_plugin_master_12() {
  $output = '<div id="clock1">This div will be turned into a dynamic clock</div>';
  return $output;
}

/**
 * JQuery-Clock-Plugin-master digital 24 hour html.
 *
 * @return string
 *   Return htmls.
 */
function theme_jquery_clocks_plugin_master_24() {
  $output = '<div id="clock2">This div will be turned into a dynamic clock</div>';
  return $output;
}

/**
 * Implements hook_library().
 */
function jquery_clocks_library() {
  $libraries = array();
  // For jquery-clock-plugin
  $libraries['jquery-clock-plugin'] = array(
    'title' => 'Jquery Clock Plugin',
    'website' => 'http://joaquinnunez.cl/jquery-clock-plugin/#download',
    'version' => '0.1',
    'js' => array(
      jquery_clocks_get_library_path('jquery-clock-plugin') . '/js/jquery.clock.js' => array(),
    ),
    'css' => array(
      jquery_clocks_get_library_path('jquery-clock-plugin') . '/css/analog.css' => array(),
      jquery_clocks_get_library_path('jquery-clock-plugin') . '/css/digital.css' => array(),
    ),
  );
  // For jClocksGMT-master
  $libraries['jClocksGMT-master'] = array(
    'title' => 'jClocksGMT',
    'website' => 'http://www.mcmastermind.com/jclocksgmt-js',
    'version' => '1.1',
    'js' => array(
      jquery_clocks_get_library_path('jClocksGMT-master') . '/js/jClocksGMT.js' => array(),
      jquery_clocks_get_library_path('jClocksGMT-master') . '/js/jquery.rotate.js' => array(),
    ),
    'css' => array(
      jquery_clocks_get_library_path('jClocksGMT-master') . '/css/jClocksGMT.css' => array(),
    ),
  );
  // For jQuery-Clock-Plugin-master
  $libraries['jQuery-Clock-Plugin-master'] = array(
    'title' => 'jQuery-Clock-Plugin-master',
    'website' => 'https://github.com/Lwangaman/jQuery-Clock-Plugin',
    'version' => '1.0',
    'js' => array(
      jquery_clocks_get_library_path('jQuery-Clock-Plugin-master') . '/jqClock.js' => array('weight' => -100),
      // Solved jquery conflict.
      'jQuery.fn.jqClock = jQuery.fn.clock; delete jQuery.fn.clock;' => array('type' => 'inline', 'weight' => -99),
    ),
    'css' => array(
      jquery_clocks_get_library_path('jQuery-Clock-Plugin-master') . '/jqClock.css' => array(),
    ),
  );
  return $libraries;
}
/**
 * Get library path.
 * 
 * @param string $lib
 *   $lib is the library name.
 *
 * @return string
 *   Return whole path of the library.
 */
function jquery_clocks_get_library_path($lib) {
  return module_exists('libraries') ? libraries_get_path($lib) : 'sites/all/libraries/' . $lib;
}
