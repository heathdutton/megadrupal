<?php



/******************************* FIELD FORMATTERS ***************************** */

/**
* Implements hook_field_formatter_info().
*/
function foundation_formatters_field_formatter_info() {
  $info = array(
    'image_style_url' => array(
      'label' => t('URL to image style'),
      'field types' => array('file', 'image'),
      'settings'  => array(
        'image_style' => '',
      ),
    ),
    'image_super' => array(
      'label' => t('Super Image'),
      'field types' => array('file', 'image'),
      'settings'  => array(
        'image_style' => '',
        'link_field' => '',
        'hide_if_field' => '',
        'image_style_medium' => '',
        'image_style_large' => '',
        'image_style_retina' => '',
        'placeholder_dimensions' => '',
        'placeholder_text' => '',
      ),
    ),
    'image_link' => array(
      'label' => t('Image linking to another field'),
      'field types' => array('file', 'image'),
      'settings'  => array(
        'image_style' => '',
        'link_field' => '',
      ),
    ),
    'file_click_to_play' => array(
      'label' => t('Click-to-play'),
      'field types' => array('file'),
      'settings'  => array(
        'format' => 'inline',
        'image_field' => 'thumb',
        'image_style' => '',
        'autoplay' => TRUE,
        'class' => '',
        'play_class' => 'button icon-play',
      ),
    ),
    'text_link' => array(
      'label' => t('Text linking to another field'),
      'field types' => array('text'),
      'settings'  => array(
        'link_field' => '',
      ),
    ),
    'text_linebreaks' => array(
      'label' => t('Text with line-breaks'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings'  => array(
        'character' => '',
      ),
    ),
    'link_title_autoclass' => array(
      'label' => t('Title, with unique class'),
      'field types' => array('link_field'),
      'settings'  => array(
        'prefix' => 'link-',
        'additional_class' => '',
      ),
    ),
    'taxonomy_link' => array(
      'label' => t('Taxonomy Term Link'),
      'field types' => array('entityreference', 'term_reference'),
      'settings'  => array(
        'path' => '',
        'query' => '',
      ),
    ),
  );
  return $info;
}


function foundation_formatters_field_info_alter(&$info) {
  //dpm($info);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function foundation_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Add fields
  switch ($display['type']) {
    case 'image_link':
      $element['link_field'] = array(
        '#title' => t('Link field'),
        '#type' => 'select',
        '#default_value' => $settings['link_field'],
        '#options' => _foundation_formatters_fields('link_field'),
      );
      break;

    case 'file_click_to_play':
      $element['format'] = array(
        '#title' => t('format'),
        '#type' => 'radios',
        '#default_value' => $settings['format'],
        '#options' => array(
          'inline' => 'Play video in-place',
          'modal' => 'Play video in a Foundation Modal.'
        ),
      );
      $element['image_field'] = array(
        '#title' => t('Thumbnail image field'),
        '#type' => 'select',
        '#default_value' => $settings['image_field'],
        '#options' => _foundation_formatters_fields(array('file', 'image'), array('oembed' => t('- Use oEmbed thumbnail -'))),
        '#description' => t('Select the image field to use for the static thumbnail image. If you would like to use the thubnail from the 3rd party service (Youtube, etc), select "Use oEmbed thumbnail".'),
      );
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style'] = array(
        '#title' => t('Thumbnail image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (do not include this)'),
        '#options' => $image_styles,
        '#description' => t('This is only relevant if a Thumbnail image field is selected above.'),
      );
      $element['autoplay'] = array(
        '#title' => t('Autoplay'),
        '#type' => 'checkbox',
        '#default_value' => $settings['autoplay'],
        '#description' => t('Attempt to autoplay the video when clicked. Currently only works with Youtube.'),
      );
      $element['class'] = array(
        '#title' => t('Class'),
        '#type' => 'textfield',
        '#default_value' => $settings['class'],
        '#description' => t('Additonal class to go on the video when played. For modals, this can be used to adjust the size of the modal (and video, because it is wrapped in flex-video). See the !docs.', array('!docs' => l('Foundation reveal docs under Advanced', 'http://foundation.zurb.com/docs/components/reveal.html'))),
      );
      $element['play_class'] = array(
        '#title' => t('Play button class(es)'),
        '#type' => 'textfield',
        '#default_value' => $settings['play_class'],
      );
      break;

    case 'image_super':
      $element['markup'] = array(
        '#markup' => '<div>' . t('For details, see the !docs.', array('!docs' => l('Foundation docs', 'http://foundation.zurb.com/docs/components/interchange.html'))) . '</div>',
        '#weight' => -2,
      );
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style_medium'] = array(
        '#title' => t('Medium image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style_medium'],
        '#empty_option' => t('None (do not include this)'),
        '#options' => $image_styles,
      );
      $element['image_style_large'] = array(
        '#title' => t('Large image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style_large'],
        '#empty_option' => t('None (do not include this)'),
        '#options' => $image_styles,
      );
      $element['image_style_retina'] = array(
        '#title' => t('Retina image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style_retina'],
        '#empty_option' => t('None (do not include this)'),
        '#options' => $image_styles,
      );
      $element['link_field'] = array(
        '#title' => t('Link field'),
        '#type' => 'select',
        '#default_value' => $settings['link_field'],
        '#options' => _foundation_formatters_fields('link_field', array('' => t('- None -'))),
      );
      $element['hide_if_field'] = array(
        '#title' => t('Hide if this field has a value'),
        '#type' => 'select',
        '#default_value' => $settings['hide_if_field'],
        '#options' => _foundation_formatters_fields(array('file', 'image'), array('' => t('- None -'))),
        '#description' => T('Only show this image if this field does not have a value.  This is useful to ensure that two media items never get displayed on the same page, or to use this field as a Thumbnail field for a Click-to-play media item.'),
      );
      $element['placeholder_dimensions'] = array(
        '#title' => t('Placeholder dimensions'),
        '#type' => 'textfield',
        '#default_value' => $settings['placeholder_dimensions'],
        '#description' => T('For example: 200x100'),
      );
      $element['placeholder_text'] = array(
        '#title' => t('Placeholder text'),
        '#type' => 'textfield',
        '#default_value' => $settings['placeholder_text'],
        '#description' => 'For example: " "',
      );
      break;

    case 'text_link':
      $element['link_field'] = array(
        '#title' => t('Link field'),
        '#type' => 'select',
        '#default_value' => $settings['link_field'],
        '#options' => _foundation_formatters_fields('link_field'),
      );
      break;

    case 'text_linebreaks':
      $element['character'] = array(
        '#title' => t('Additional character to use as line-break'),
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => $settings['character'],
        '#description' => t('Enter a character (such as "|") in this field to allow users to create line breaks in a textfield that doesn\'t allow the return character. This is especially helpful for title fields'),
      );
      break;

    case 'link_title_autoclass':
      $element['prefix'] = array(
        '#title' => t('Class prefix'),
        '#type' => 'textfield',
        '#default_value' => $settings['prefix'],
        '#description' => t('The prefix will be added before the title to create the unique class. For example, if the prefix is left as "link-", a link with the title "Home Page" would get the class, "link-home-page".'),
      );
      $element['additional_class'] = array(
        '#title' => t('Additional class'),
        '#type' => 'textfield',
        '#default_value' => $settings['additional_class'],
        '#description' => t('Enter any additional classes you would like to add to the <a> tag.'),
      );
      break;
      
    case 'taxonomy_link':
      $element['path'] = array(
        '#title' => t('Path'),
        '#type' => 'textfield',
        '#default_value' => $settings['path'],
        '#description' => t('Enter the querystring parameters to use. Use [tid] for the taxonomy term tid. For example, research.'),
      );
      $element['query'] = array(
        '#title' => t('Querystring'),
        '#type' => 'textfield',
        '#default_value' => $settings['query'],
        '#description' => t('Enter the querystring parameters to use. Use [tid] for the taxonomy term tid. For example, category=[tid].'),
      );
      break;
  }

  // Add the image style select to those fields that need it
  if (
    $display['type'] === 'image_link' || 
    $display['type'] === 'image_video_popup' || 
    $display['type'] === 'image_link' || 
    $display['type'] === 'image_super'
  ) {
    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
      '#weight' => -1,
    );
  }
  
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 * @todo
 */
function foundation_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  foreach ($settings as $key => $value) {
    $summary[] = $key . ': ' . $value;
  }
  /*$image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }*/

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function foundation_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
    
  foreach ($items as $delta => $item) {
    
    switch ($display['type']) {
      case 'image_style_url':
        $uri = array(
          'path' => file_create_url(),
          'options' => array(),
        );
        $element[$delta] = array(
          '#markup' =>  $item['uri'] ?  image_style_url($settings['image_style'], $item['uri']) : '',
        );
        break;

      case 'image_link':
        if ($item['uri']) {
          $item['path'] = $item['uri'];
          $item['style_name'] = $settings['image_style'];
          $markup = theme('image_style', $item);
          if (!empty($entity->{$settings['link_field']})) {
            $wrapper = entity_metadata_wrapper($entity_type, $entity);
            $markup = l($value, $wrapper->{$settings['link_field']}->url->value(), array('html' => TRUE));
          }
        }
        else {
          $markup = '';
        }
        $element[$delta] = array(
          '#markup' => $markup,
        );
        break;

      case 'image_super':
        if ($item['uri']) {
          if (empty($settings['hide_if_field']) || empty($entity->{$settings['hide_if_field']})) {
            $markup = theme('image_interchange_style', array_merge($item, array(
              'path' => $item['uri'], 
              'image_style' => $settings['image_style'],
              'image_style_medium' => $settings['image_style_medium'],
              'image_style_large' => $settings['image_style_large'],
              'image_style_retina' => $settings['image_style_retina'],
            )));
            if (!empty($settings['link_field']) && !empty($entity->{$settings['link_field']})) {
              $wrapper = entity_metadata_wrapper($entity_type, $entity);
              $markup = l($markup, $wrapper->{$settings['link_field']}->url->value(), array('html' => TRUE));
            }
          }
        }
        if (!empty($markup)) {
          $element[$delta] = array(
            '#markup' => $markup,
          );
        }
        break;

      case 'file_click_to_play':
        // We currently only support oembed fields
        // @todo: Generalize this to add support for video fields too.
        if (
          !empty($item['metadata']['oembed'])
          && (!empty($item['metadata']['oembed']['thumbnail_url']) || (!empty($settings['link_field']) && !empty($entity->{$settings['link_field']} )))
        ) {
          // Get the output of the thumbnail from the image field
          if (!empty($settings['image_field']) && !empty($entity->{$settings['image_field']})) {
            // @todo support multilingual (use $wrapper?)
            $markup = theme('image_interchange_style', array_merge($entity->{$settings['image_field']}[LANGUAGE_NONE][0], array(
              'path' => $entity->{$settings['image_field']}[LANGUAGE_NONE][0]['uri'], 
              'image_style' => $settings['image_style'],
              'image_style_medium' => $settings['image_style_medium'],
              'image_style_large' => $settings['image_style_large'],
              'image_style_retina' => $settings['image_style_retina'],
            )));
          }
          // Get the output of the thumbnail from the oembed thumbnail field
          else {
            $item['attributes']['src'] = $item['metadata']['oembed']['thumbnail_url'];
            $markup = theme('html_tag', array('element' => array(
              '#tag' => 'img',
              '#attributes' => $item['attributes'],
            )));
          }
          // Now build out the tags
          if (!empty($markup)) {
            $content = $item['metadata']['oembed']['html'];
            $content = $settings['autoplay'] ? str_replace('oembed"', 'oembed&autoplay=1"', $content) : $content;
            $element[$delta] = array(
              '#theme' => 'foundation_formatters_clicktoplay_' . $settings['format'],
              '#placeholder' => $markup,
              '#play_class' => $settings['play_class'],
              '#content' => htmlentities($content),
              '#class' => $settings['class'],
              '#id' => 'file-' . $item['fid'],
              //@todo: render this field (in the future--give them the option?)
              //$item['attributes']['data-clicktoplay-content'] = drupal_render(field_view_value($entity_type, $entity, $field['field_name'], $item, array(
              //  'type' => 'file_rendered',
              //)));
            );
            // @todo: this shouldn't be necessary. Would prefer to use a render array
            $element[$delta] = array(
              '#markup' => drupal_render($element[$delta]),
            );
          }
          //if ($item);
        }
        // Gracefully degrade to a normal File Render.
        if (empty($element[$delta])) {
          // render as normal
          $element[$delta] = field_view_value($entity_type, $entity, $field['field_name'], $item, array(
            'type' => 'file_rendered',
          ));
        }
        break;

      case 'text_link':
        // @todo;
        break;

      case 'text_linebreaks':
        $element[$delta] = array(
         '#markup' => str_replace(array("\n", $settings['character']), '<br/>', $item['value']),
        );
        break;

      case 'link_title_autoclass':
        $item['attributes']['class'] = empty($item['attributes']['class']) ? '' : $item['attributes']['class'] . ' ';
        $item['attributes']['class'] .= !empty($settings['additional_class']) ? $settings['additional_class'] . ' ' : '';
        $item['attributes']['class'] .= drupal_clean_css_identifier(strtolower($settings['prefix'] . $item['title']));
        $element[$delta] = array(
          '#theme' => 'link_formatter_link_default',
          '#element' => $item,
          '#field' => $instance,
          '#display' => $display,
        );
        break;
        
      case 'taxonomy_link':
        $tid = !empty($item['target_id']) ? $item['target_id'] : (!empty($item['tid']) ? $item['tid'] : NULL);
        $term = taxonomy_term_load($tid);
        $label = entity_label('taxonomy_term', $term);
        $options = array();
        if (!empty($settings['query'])) {
          $query = str_replace('[tid]', $tid, $settings['query']);
          parse_str($query, $options['query']);
        }
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => l($label, str_replace('[tid]', $tid, $settings['path']), $options),
        );
        break;
      
    }

  } // foreach

  // Add a default image to image_super formats
  // @todo: this isn't working...does drupal hide a field if it is empty?
  if (empty($items) && $display['type'] === 'image_super' && !empty($settings['placeholder_dimensions'])) {
    $url = 'http://placehold.it/' . $settings['placeholder_dimensions'];
    $options = array(
      'query' => array(),
      'absolute' => TRUE
    );
    if (!empty($settings['placeholder_text'])) {
      $options['query']['text'] = $settings['placeholder_text'];
    }
    $element[0] = array(
      '#markup' => '<img src="' . url($url, $options) . '" />',
    );
    //dpm(drupal_render($element));
  }

  return $element;
}



/******************************* DISPLAY SUITE ***************************** */

/**
 * Implements hook_ds_fields_info().
 */
function foundation_formatters_ds_fields_info($entity_type) {
  $fields = array();

  $default_view = '';
  
  $fields[$entity_type] = array(

    // Text linked to a field.  This is especially useful for titles.
    'foundation_formatters_text_link_field' => array(
      'title' => t('Text field linking to another field'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_foundation_formatters_text_link',
      'properties' => array(
        'settings' => array(
          'text_field' => array('type' => 'select'),
          'link_field' => array('type' => 'select'),
        ),
        'default' => array(
          'text_field' => '',
          'link_field' => '',
        ),
      ),
    ),

    // Text with line breaks.  This is especially useful for titles.
    'foundation_formatters_text_linebreak_field' => array(
      'title' => t('Text field with line-breaks'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_foundation_formatters_text_linebreaks',
      'properties' => array(
        'settings' => array(
          'text_field' => array('type' => 'select'),
          'character' => array('type' => 'textfield'),
        ),
        'default' => array(
          'text_field' => '',
          'character' => '',
        ),
      ),
    ),

    // An additonal date display field (useful for event displays that separate the date and time)
    'foundation_formatters_datetime_field' => array(
      'title' => t('Additional date display'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_foundation_formatters_ds_datetime_field',
      'properties' => array(
        'settings' => array(
          'date_field' => array('type' => 'select'),
          'format_type' => array('type' => 'select'),
        ),
        'default' => array(
          'date_field' => 'field_date',
          'format_type' => 'medium',
        ),
      ),
    ),

    // Views field simple renders a view
    'foundation_formatters_views_field' => array(
      'title' => t('Views display'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_foundation_formatters_ds_views_field',
      'properties' => array(
        'settings' => array(
          'views_display' => array('type' => 'select'),
          'use_entity' => array('type' => 'boolean'),
          'views_argument' => array('type' => 'textfield'),
        ),
        'default' => array(
          'views_display' => '',
          'use_entity' => 1,
          'views_argument' => '',
        ),
      ),
    ),

  );

  return $fields;
}


/**
 * Implements hook_ds_field_format_summary().
 */
function foundation_formatters_ds_field_format_summary($field) {
  // Saved formatter settings are on $field['formatter_settings'];
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];

  // @todo
  switch ($field['name']) {
    /*case 'foundation_formatters_text_link_field':
      break;
    case 'foundation_formatters_text_linebreak_field':
      break;
    case 'foundation_formatters_datetime_field':
      break;*/
    case 'foundation_formatters_views_field':
      $argument = ($settings['use_entity']) ? t('Using value from entity') : $settings['views_argument'];
      $summary = t('View: !view !brArgument: !argument!br', array(
        '!view' => $settings['views_display'],
        '!argument' => $argument,
        '!br' => '<br/>',
      ));
      break;

    default:
      $summary = array();
      foreach ($settings as $key => $value) {
        $summary[] = $key . ': ' . $value;
      }
      $summary = implode('<br />', $summary) . '<br/>';
  }

  return $summary;  
}

/**
 * Implements hook_ds_field_settings_form().
 */
function foundation_formatters_ds_field_settings_form($field) {
  $form = array();
  // Saved formatter settings are on $field['formatter_settings'];
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];

  switch($field['name']) {

    case 'foundation_formatters_text_link_field':
      // Text field
      $form['text_field'] = array(
        '#type' => 'select',
        '#title' => t('Text field'),
        '#options' => _foundation_formatters_fields(array('text', 'long_text', 'text_with_summary'), array('' => t('- None -'), 'title' => t('Entity Title'))),
        '#description' => t('Select the text field to use.'),
        '#default_value' => $settings['text_field'],
        '#required' => true,
      );
      // Link field
      $form['link_field'] = array(
        '#type' => 'select',
        '#title' => t('Link field'),
        '#options' => _foundation_formatters_fields('link_field'),
        '#default_value' => $settings['link_field'],
        '#description' => t('Select the link field to use.')
      );
      break;

    case 'foundation_formatters_text_linebreak_field':
      // Text field
      $form['text_field'] = array(
        '#type' => 'select',
        '#title' => t('Text field'),
        '#options' => _foundation_formatters_fields(array('text', 'long_text', 'text_with_summary'), array('' => t('- None -'), 'title' => t('Entity Title'))),
        '#description' => t('Select the text field to use.'),
        '#default_value' => $settings['text_field'],
        '#required' => true,
      );
      // Character
      $form['character'] = array(
        '#title' => t('Additional character to use as line-break'),
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => $settings['character'],
        '#description' => t('Enter a character (such as "|") in this field to allow users to create line breaks in a textfield that doesn\'t allow the return character. This is especially helpful for title fields'),
      );
      break;

    case 'foundation_formatters_datetime_field':
      // Date field
      $form['date_field'] = array(
        '#type' => 'select',
        '#title' => t('Date field'),
        '#options' => _foundation_formatters_fields('date'),
        '#default_value' => $settings['date_field'],
        '#description' => t('Select the date field to use.')
      );
      // Date format
      $form['format_type'] = array(
        '#type' => 'select',
        '#title' => t('Date format'),
        '#options' => system_get_date_types(),
        '#default_value' => $settings['format_type'],
        '#description' => t('Select the date format to use.')
      );
      break;

    case 'foundation_formatters_views_field':
      // View to use
      $form['views_display'] = array(
        '#type' => 'select',
        '#title' => t('Select the view to use'),
        '#options' => views_get_views_as_options(),
        '#default_value' => $settings['views_display'],
        '#description' => t('The view/display chosen will be used to render the display.')
      );
      // Use entity id?
      $form['use_entity'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use this entity as the views argument?'),
        '#default_value' => $settings['use_entity'],
        '#description' => t('If checked, the entity id will be passed to views as the argument.')
      );
      // Custom argument(s)
      $form['views_argument'] = array(
        '#type' => 'textfield',
        '#title' => t('Views argument to pass.'),
        '#default_value' => $settings['views_argument'],
        '#description' => t('Enter custom views argument(s). The token %entity_id may be used for the entity id.')
      );
      // Assign defaults
      foreach($field['properties']['settings'] as $key => $value) {
        $form[$key]['#default_value'] = isset($settings[$key]) ? $settings[$key] : '';
      }
      // State for view argument
      $form['views_argument']['#states'] = array(
        'visible' => array(
          "#edit-fields-flight-config-views-field-settings-edit-form-settings-use-entity" => array('checked' => FALSE),
        ),
      );
      break;
  }

  if(!empty($form)) {
    return $form;
  }
}





/**
 * DS callback for text link field.
 */
function _foundation_formatters_text_link(array $field) {
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];
  $entity = $field['entity'];
  $wrapper = entity_metadata_wrapper($field['entity_type'], $entity);
  if (empty($settings['text_field']) || ($settings['text_field'] !== 'title' && empty($wrapper->{$settings['text_field']}))) {
    return '';
  }
  elseif (!empty($settings['link_field']) && !empty($wrapper->{$settings['link_field']})) {
    $value = $settings['text_field'] === 'title' ? $entity->title : $wrapper->{$settings['text_field']}->value();
    return l($value, $wrapper->{$settings['link_field']}->url->value(), array('html' => TRUE));
  }
  else {
    return $wrapper->{$settings['text_field']}->value();
  } 
}


/**
 * DS callback for text with linebreaks field.
 */
function _foundation_formatters_text_linebreaks(array $field) {
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];
  $wrapper = entity_metadata_wrapper($field['entity_type'], $field['entity']);
  if (empty($settings['text_field']) || ($settings['text_field'] !== 'title' && empty($wrapper->{$settings['text_field']}))) {
    return '';
  }
  else {
    // @todo: sanitize
    $value = $settings['text_field'] === 'title' ? $field['entity']->title : $wrapper->{$settings['text_field']}->raw();
    return str_replace(array("\r", $settings['character']), '<br/>', $value);
  }
}

/**
 * DS callback for datetime field.
 */
function _foundation_formatters_ds_datetime_field(array $field) {
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];
  //dpm($field);
  // @todo: implement
  $entity = $field['entity'];
  $date = field_get_items('node', $entity, 'field_date');
  $output = field_view_value('node', $entity, 'field_date', $date[0], array(
    'type' => 'date_default',
    'settings' => array(
      // @todo: this isn't working correctly
      'format_type' => $settings['format_type'],
    ),
  ));
  return drupal_render($output);
}


/**
 * Field returns date in "custom time" format.
 */
function _foundation_formatters_ds_views_field(array $field) {
  // Saved formatter settings are on $field['formatter_settings'];
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : $field['properties']['default'];

  // we have some settings
  if(!empty($settings['views_display'])) {
    // grab the view name +  display
    $views_options = explode(':', $settings['views_display']);
    $argument;
    // using the entity id as argument
    if(!empty($settings['use_entity'])) {
      $argument = foundation_formatters_get_entity_id($field['entity_type'], $field['entity']);
    }
    // see if any custom argument has been set
    else if(!empty($settings['views_argument'])) {
      // token present
      if(strpos($settings['views_argument'], '%entity_id') !== FALSE) {
        $id = foundation_formatters_get_entity_id($field['entity_type'], $field['entity']);
        $argument = str_replace($argument, $id);
      }
      else {
        $argument = $settings['views_argument'];
      }
    }
    // build view
    return views_embed_view($views_options[0], $views_options[1], $argument);
  }

}


/******************************* HELPER FUNCTIONS ***************************** */


/**
 * Helper function.
 * Returns all of the fields of a specific type for a select list
 */
function _foundation_formatters_fields($types, $unshift = array()) {
  $fields = $unshift;
  $types = is_array($types) ? $types : array($types);
  foreach (field_info_fields() as $index => $field) {
    if (in_array($field['type'], $types)) {
      $fields[$index] = $index;
    }
  }
  return $fields;
}    


/******************************* THEME ***************************** */

/**
 * Implements hook_theme().
 */
function foundation_formatters_theme($existing, $type, $theme, $path) {
  $path = 'templates/';
  return array(
    'image_interchange_style' => array(
      'variables' => array(
        'image_style' => NULL,
        'image_style_medium' => NULL,
        'image_style_large' => NULL,
        'image_style_retina' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
    'image_interchange' => array(
      'variables' => array(
        'image_style' => NULL,
        'image_style_medium' => NULL,
        'image_style_large' => NULL,
        'image_style_retina' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
    'foundation_formatters_clicktoplay_inline' => array(
      'template' => $path . 'clicktoplay-inline',
      'variables' => array(
        'placeholder' => '',
        'play_class' => 'button-play',
        'content' => '',
        'id' => 'clicktoplay',
      ),
    ),
    'foundation_formatters_clicktoplay_modal' => array(
      'template' => $path . 'clicktoplay-modal',
      'variables' => array(
        'placeholder' => '',
        'play_class' => 'button-play',
        'content' => '',
        'class' => '',
        'id' => 'clicktoplay',
      ),
    ),
  );
}


function theme_image_interchange_style($variables) {
  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  image_style_transform_dimensions($variables['image_style'], $dimensions);

  $variables['width'] = $dimensions['width'];
  $variables['height'] = $dimensions['height'];

  // Determine the URL for the styled image.
  foreach (array('medium', 'large', 'retina') as $key) {
    if (!empty($variables['image_style_' . $key])) {
      $variables['image_url_' . $key] = image_style_url($variables['image_style_' . $key], $variables['path']);
    }
  }
  $variables['path'] = image_style_url($variables['image_style'], $variables['path']);
  return theme('image_interchange', $variables);
}


function theme_image_interchange($variables) {
  $attributes = $variables['attributes'];
  $attributes['src'] = file_create_url($variables['path']);

  $interchange = array();
  foreach (array('medium', 'large', 'retina') as $key) {
    if (!empty($variables['image_style_' . $key])) {
      $interchange[] = '[' . $variables['image_url_' . $key] .', ('. $key .')]';
    }
  }
  $interchange = implode(',', $interchange);
  if (!empty($interchange)) {
    $interchange = '['. $attributes['src'] .', (default)], ' . $interchange;
    $attributes['data-interchange'] = $interchange;
    unset($attributes['src']);
  }

  foreach (array('alt', 'title') as $key) {
    if (isset($variables[$key])) {
      $attributes[$key] = $variables[$key];
    }
  }

  return theme('html_tag', array('element' => array(
    '#tag' => 'img',
    '#attributes' => $attributes,
  )));
  //<img ' . drupal_attributes($attributes) . ' />';
}
