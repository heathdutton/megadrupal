<?php

/**
 * @file Create and manage secure links for private downloads
 * @author "Ahmad Hesamzadeh" <mngafa@gmail.com>
 */

/**
 * Default settings used in admin forms.
 */
define('NGINX_SECURELINK_DEADLINE_DEFAULT', 36000);
define('NGINX_SECURELINK_HASH_FORMAT_DEFAULT', '<expire><url>/<ip> <passwd>');
define('NGINX_SECURELINK_SECRET_DEFAULT', '');
define('NGINX_SECURELINK_MD5_ARG_NAME_DEFAULT', 'md5');
define('NGINX_SECURELINK_EXPIRES_ARG_NAME_DEFAULT', 'expires');
define('NGINX_SECURELINK_BASE_URL_DEFAULT', '');

define('NGINX_SECURELINK_NGINX_IP_DEFAULT', '*');
define('NGINX_SECURELINK_NGINX_PORT_DEFAULT', '80');
define('NGINX_SECURELINK_NGINX_SERVERNAME_DEFAULT', '');
define('NGINX_SECURELINK_NGINX_ROOT_DIR_DEFAULT', '');

define('NGINX_SECURELINK_NGINX_ACCESS_LOG_DEFAULT', '/var/log/nginx/ngsl.accesslog.log');
define('NGINX_SECURELINK_NGINX_ACCESS_LOG_BYTES_DEFAULT', '/var/log/nginx/ngsl.accesslog.bytes');
define('NGINX_SECURELINK_NGINX_ERROR_LOG_DEFAULT', '/var/log/nginx/ngsl.errorlog.log');

/**
 * Access grant types
 */
define('NGINX_SECURELINK_ACCESS_ENCOURAGE', TRUE);
define('NGINX_SECURELINK_ACCESS_DENY', FALSE);
define('NGINX_SECURELINK_ACCESS_DONT_CARE', NULL);

/**
 * Implements hook_menu().
 */
function nginx_securelink_menu() {
  $items = array();

  $items['admin/config/media/nginx-securelink'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Nginx securelink',
    'description' => 'configure Nginx securelink options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nginx_securelink_options_form'),
    'access arguments' => array('configure nginx securelink'),
    'file' => 'nginx_securelink.admin.inc',
  );

  $items['admin/config/media/nginx-securelink/options'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Options',
    'description' => 'configure Nginx securelink options',
    'access arguments' => array('configure nginx securelink'),
    'weight' => 0,
  );

  $items['admin/config/media/nginx-securelink/generator'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Nginx Config',
    'description' => 'Nginx config generation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nginx_securelink_config_generation_settings_form'),
    'access arguments' => array('configure nginx securelink'),
    'file' => 'nginx_securelink.admin.inc',
    'weight' => 2,
  );

  $items['admin/config/media/nginx-securelink/generator/options'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Generator options',
    'description' => 'Nginx config generation settings',
    'access arguments' => array('configure nginx securelink'),
    'weight' => 0,
  );

  $items['admin/config/media/nginx-securelink/generator/generate'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Generate',
    'description' => 'Generate nginx config',
    'page callback' => 'nginx_securelink_config_generator_page',
    'access arguments' => array('configure nginx securelink'),
    'file' => 'nginx_securelink.admin.inc',
    'weight' => 1,
  );

  $items['requestlink'] = array(
    // the rest of URL is file path.
    // A fake .html extension is added to end of file name (To avoid unwanted download prompts)
    'type' => MENU_CALLBACK,
    'description' => 'Request download of a file.',
    'access callback' => TRUE,
    'page callback' => 'nginx_securelink_requestlink',
    // Allthough this manu doesn't have wildcards, this array is needed for the page callback to work correctly.
    'page arguments' => array(1),
  );

  $items['admin/config/media/nginx-securelink/handlers'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Access handlers',
    'description' => 'Manage access handlers',
    'page callback' => 'nginx_securelink_access_handlers_page',
    'access arguments' => array('configure nginx securelink'),
    'file' => 'nginx_securelink.admin.inc',
    'weight' => 1,
  );

  $items['admin/config/media/nginx-securelink/handlers/about'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'About',
    'description' => 'About access handlers',
    'access arguments' => array('configure nginx securelink'),
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function nginx_securelink_permission() {
  return array(
    'configure nginx securelink' => array(
      'title' => t('Configure nginx securelink'),
      'description' => t('Configure nginx-securelink options'),
    ),
  );
}

/**
 * Page callback: Request download link
 */
function nginx_securelink_requestlink() {
  global $user;

  // Merge remainder of arguments from GET['q'], into relative file path.
  $args = func_get_args();
  array_shift($args);
  $target = implode('/', $args);

  // Remove .html extension to get actual target
  $pattern = "/^(.*)(\.html)$/";
  $matches = array();
  $res = preg_match($pattern, $target, $matches);

  if ($res) {
    $target = $matches[1];
  }
  else {
    // Target is invalid.
    drupal_set_message(t('Your URL should end with .html extension.'), 'error');
    drupal_not_found();
    drupal_exit();
  }

  // Set title of the page
  drupal_set_title(t('Download file: @target', array('@target' => $target)));

  // Check if the user can access this file
  // We use a hook for this: hook_nginx_securelink_access_grants
  $grants = module_invoke_all('nginx_securelink_access_grants', $user, $target);

  // All grants should be NGINX_SECURELINK_ACCESS_ENCOURAGE or NGINX_SECURELINK_ACCESS_DONT_CARE
  // By default, deny
  $access = FALSE;
  foreach ($grants as $grant) {
    if ($grant === NGINX_SECURELINK_ACCESS_ENCOURAGE) {
      $access = TRUE;
    }
    elseif ($grant === NGINX_SECURELINK_ACCESS_DENY) {
      $access = FALSE;
      break;
    }
  }

  // For development in localhost
  // I have to set my public IP here. so I put it in a separate file
  $nginx_securelink_developer_ip = NULL;
  $developer_ip_path = dirname(__FILE__) . '/developer_ip.php';
  if (file_exists($developer_ip_path)) {
    require_once $developer_ip_path;
  }

  if ($access) {
    $url = nginx_securelink_create($target, $nginx_securelink_developer_ip);
    return l($url, $url);
  }
  else {
    return t('You don\'t have access to download this file.');
  }
}

/**
 * Create secure download link for a URL
 *
 * Uses the settings defined in module configuration.
 *
 * @param $filepath The path of the file related to
 *   document root (SHOULD NOT begin with a slash)
 * @param $ip Allowed IP. NULL means "use current user's IP address."
 *
 * @return Created link
 */
function nginx_securelink_create($filepath, $ip = NULL) {
  if (!$ip) {
    $ip = $_SERVER['REMOTE_ADDR'];
  }

  $deadline = (int) variable_get('nginx_securelink_deadline', NGINX_SECURELINK_DEADLINE_DEFAULT);
  $expire_timestamp = time() + $deadline;
  $secret = variable_get('nginx_securelink_secret', NGINX_SECURELINK_SECRET_DEFAULT);

  // Create the hash
  $hash_format = variable_get('nginx_securelink_hash_format', NGINX_SECURELINK_HASH_FORMAT_DEFAULT);
  $hash = strtr($hash_format, array(
    '<expire>' => $expire_timestamp,
    '<url>' => '/' . $filepath,
    '<ip>' => $ip,
    '<passwd>' => $secret,
  ));

  // binary MD5 crypt
  $hash = md5($hash, TRUE);
  // Convert to text using base64 format
  $hash = base64_encode($hash);

  // Replace special characters (Required by nginx_securelink extension)
  // This is according to rfc4648 "Base 64 Encoding with URL and Filename Safe Alphabet"
  // @see http://tools.ietf.org/html/rfc4648#section-5
  // @see http://nginx.org/en/docs/http/nginx_http_secure_link_module.html
  $hash = strtr($hash, array(
    '+' => '-',
    '/' => '_',
    '=' => '',
  ));

  // Create the secure downdload link
  $base_url = variable_get('nginx_securelink_base_url', NGINX_SECURELINK_BASE_URL_DEFAULT);
  $md5_arg_name = variable_get('nginx_securelink_md5_arg_name', NGINX_SECURELINK_MD5_ARG_NAME_DEFAULT);
  $expires_arg_name = variable_get('nginx_securelink_expires_arg_name', NGINX_SECURELINK_EXPIRES_ARG_NAME_DEFAULT);

  $link = "{$base_url}{$filepath}?{$md5_arg_name}={$hash}&{$expires_arg_name}={$expire_timestamp}";

  return $link;
}
