<?php

/**
 * @file Grant access to files according to confiurations set in conf files
 * @author "Ahmad Hesamzadeh" <mngafa@gmail.com>
 */

/**
 * Implements hook_menu().
 */
function ngsl_access_byfile_menu() {
  $items = array();

  $items['admin/config/media/nginx-securelink/handlers/byfile'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Access By file',
    'description' => 'Configure access by file settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ngsl_access_byfile_admin_form'),
    'access arguments' => array('configure nginx securelink'),
    'file' => 'ngsl_access_byfile.admin.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_nginx_securelink_access_grants
 */
function ngsl_access_byfile_nginx_securelink_access_grants($account, $path) {
  // Check if filesystem path is configured correctly
  $filesystem_path = variable_get('ngsl_access_byfile_filesystem_path', '');
  if (!is_dir($filesystem_path)) {
    drupal_set_message(t('Filesystem path is not set correctly for Access By File handler.'), 'error');
    watchdog('nginx_securelink', 'Filesystem path is not set correctly for Access By File handler.', array(), WATCHDOG_ERROR);

    return NGINX_SECURELINK_ACCESS_DONT_CARE;
  }

  // Look for config file
  $config_file_path = _ngsl_access_byfile_find_config_file($filesystem_path, $path);

  if (!$config_file_path) {
    // .ngslaccess Config file not found
    return NGINX_SECURELINK_ACCESS_DONT_CARE;
  }

  // Now we should read the .ngslacess file and check access according to its settings.
  $settings = _ngsl_access_byfile_parse_ngslaccess_file($config_file_path);

  if (!$settings) {
    // Error parsing
    return NGINX_SECURELINK_ACCESS_DONT_CARE;
  }

  // Call handler
  $result = call_user_func_array($settings['handler_func'], $settings['arguments']);

  return $result ? NGINX_SECURELINK_ACCESS_ENCOURAGE : NGINX_SECURELINK_ACCESS_DENY;
}

/**
 * Find the .ngslaccess config file which applies to a given file
 *
 * @param $filesystem_path Absolute path of the directory which holds .ngslaccess config files.
 * @param $path Path of the taget file (relative to filesystem path)
 *
 * @return If the config file is found, return its path. Otherwise return FALSE.
 */
function _ngsl_access_byfile_find_config_file($filesystem_path, $path) {
  $fullpath = $filesystem_path . '/' . $path;
  //dpm($fullpath);

  $path_info = pathinfo($fullpath);

  // First look for .BASENAME.ngslaccess beside the target file
  $confpath = "{$path_info['dirname']}/.{$path_info['basename']}.ngslaccess";
  if (is_readable($confpath)) {
    return $confpath;
  }

  // Look for ".ngslaccess" files in directories
  // First look in current directory, then parent directories in hierarchy until we meed the filesystem's base dir
  $tree = explode('/', $path);
  $tree_count = count($tree);

  for ($i = 1; $i <= $tree_count; $i++) {
    // Go to parent directory.
    // First pop, removes file name. Subsequent pops, will remove parent directories from the list
    array_pop($tree);

    // Join tree parts
    $tree_joined = implode('/', $tree);

    // This if statement is here to avoid double slashes in created path
    if ($tree_joined == '') {
      $confpath = "{$filesystem_path}/.ngslaccess";
    }
    else {
      $confpath = "{$filesystem_path}/{$tree_joined}/.ngslaccess";
    }

    // Check if this path is a valid file (exists) and is readable
    if (is_readable($confpath)) {
      // We have found the config file. Don't look any further.
      return $confpath;
    }
  }

  // We did not find the config file. Return FALSE.
  return FALSE;
}

/**
 * Parse .ngslaccess config file, and load the corresponding handler.
 *
 * @param $path Path to .ngslaccess file
 *
 * @return An associative array with the following keys:
 *   - handler: The hanler name which should handle the access check
 *   - handler_func: The handler function name to call. (it's loaded and is in scope)
 *   - arguments: An array of arguments to be passed to the handler function
 *   If there is and error, returns FALSE
 */
function _ngsl_access_byfile_parse_ngslaccess_file($path) {
  $settings = @parse_ini_file($path, TRUE);

  if (!$settings) {
    // Failed to load ini file
    watchdog('nginx_securelink', 'ngsl_access_byfile: error loading ini file at @path', array('@path' => $path), WATCHDOG_ERROR);

    return FALSE;
  }

  if (!isset($settings['ngslaccess']) || !is_array($settings['ngslaccess'])) {
    watchdog('nginx_securelink', 'ngsl_access_byfile: no [ngslaccess] section in .ngslaccess file at @path', array('@path' => $path), WATCHDOG_ERROR);

    return FALSE;
  }

  if (!isset($settings['ngslaccess']['handler'])) {
    watchdog('nginx_securelink', 'ngsl_access_byfile: no handler found in .ngslaccess file at @path', array('@path' => $path), WATCHDOG_ERROR);

    return FALSE;
  }

  if (!isset($settings['ngslaccess']['arguments']) || !is_array($settings['ngslaccess']['arguments'])) {
    watchdog('nginx_securelink', 'ngsl_access_byfile: no valid arguments found in .ngslaccess file at @path', array('@path' => $path), WATCHDOG_ERROR);

    return FALSE;
  }

  $handler = $settings['ngslaccess']['handler'];
  $arguments = $settings['ngslaccess']['arguments'];

  // Check if the handler exits
  $handler_path = dirname(__FILE__) . '/handlers/ngsl_access_handler_' . $handler . '.inc';
  if (file_exists($handler_path)) {
    require_once $handler_path;
  }
  else {
    watchdog('nginx_securelink', 'ngsl_access_byfile: handler file not found: @path', array('@path' => $handler_path), WATCHDOG_ERROR);

    return FALSE;
  }

  $handler_func = 'ngsl_access_byfile_handler_' . $handler;
  if (!function_exists($handler_func)) {
    watchdog('nginx_securelink', 'ngsl_access_byfile: handler function not found: @name at @path', array('@name' => $handler_func, '@path' => $handler_path), WATCHDOG_ERROR);

    return FALSE;
  }

  return array(
    'handler' => $handler,
    'handler_func' => $handler_func,
    'arguments' => $arguments,
  );
}
