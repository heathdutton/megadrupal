<?php
/**
 * @file
 * Creates on-the-fly images for responsive sites.
 */

/**
 * Implements hook_menu().
 */
function imgfly_menu() {
  $items['imgfly'] = array(
    'page callback' => 'imgfly_generate',
    'access arguments' => array('access content'),
  );

  $items['admin/config/media/imgfly'] = array(
    'title' => 'Imgfly',
    'description' => 'Adjust Imgfly settings.',
    'file' => 'imgfly.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imgfly_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function imgfly_preprocess_page() {
  if (!path_is_admin(current_path())) {
    drupal_add_js(
      array(
        'imgfly' => array(
          'lazyload' => variable_get('imgfly_lazyload', '0'),
          'loadvalue' => variable_get('imgfly_loadvalue', '0'),
        ),
      ), 
      'setting'
    );
    drupal_add_js(drupal_get_path('module', 'imgfly') . '/imgfly.js');
  }
}

/**
 * Implemets hook_theme_registry_alter().
 *
 * Get drupal to use our theme_image_styles function.
 */
function imgfly_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'imgfly');
  $theme_registry['image_style']['theme path'] = $path;
  $theme_registry['image_style']['function'] = 'imgfly_image_styles';
}

/**
 * Custom theme_image_styles function to produce our own image markup.
 */
function imgfly_image_styles(&$vars) {
  $suffix = variable_get('imgfly_suffix', '_imgfly');
  $apply_imgfly = TRUE;

  // Conditions to check if imgfly can be applied.
  if (path_is_admin(current_path())) {
    // Do not apply under admin pages.
    $apply_imgfly = FALSE;
  }
  elseif (module_exists('media') && arg(0) == 'media') {
    // Do not apply under media paths.
    $apply_imgfly = FALSE;
  }
  elseif (strpos($vars['style_name'], $suffix) === FALSE) {
    // Do not apply if suffix required is not found.
    $apply_imgfly = FALSE;
  }

  if ($apply_imgfly) {
    // Get the URL to the image style.
    $url = image_style_url($vars['style_name'], $vars['path']);
    // Generate the image to use in noscript tags.
    $img = theme_image_style($vars);

    // Find the aspect ratio of the image.
    $aspect = 0;
    $style_path = image_style_path($vars['style_name'], $vars['path']);
    if (!file_exists($style_path)) {
      $style_path = image_style_url($vars['style_name'], $vars['path']);
    }
    if (list($width, $height, $type, $attributes) = @getimagesize($style_path)) {
      $aspect = round($width / $height, 2);
    }

    // Return the image with imgfly theming.
    return '<img src="/' . drupal_get_path('module', 'imgfly') . '/1px.png" data-src="' . $url . '" data-aspect="' . $aspect . '" class="imgfly-placeholder" /><noscript>' . $img . '</noscript>';
  }
  else {
    // Return with default themeing.
    return theme_image_style($vars);
  }
}

/**
 * Callback function that generates the image.
 *
 * @param int $width
 *   Width of the image
 * @param int $height
 *   Height of the image
 */
function imgfly_generate($width = 0, $height = 0) {
  // Check the maximum allowed dimension.
  $maxdim = explode('x', variable_get('imgfly_max_dim', '1000x1000'));

  // Check the incoming parameters.
  if (!is_numeric($width) || !is_numeric($height) || $width > $maxdim[0] || $height > $maxdim[1]) {
    watchdog('imgfly', 'Width and height parameters not supported!', WATCHDOG_ERROR);
    drupal_access_denied();
    return;
  }

  // Get token value from image URL.
  $itok = isset($_GET['itok']) ? trim($_GET['itok']) : '';

  if (drupal_validate_utf8($itok) && drupal_strlen($itok) == 8) {
    preg_match("/imgfly\/$width\/$height\/styles\/(\w+)\/" . file_default_scheme() . '(.+)/', current_path(), $matches);
    $uri = file_build_uri($matches[2]);

    // Get original style name.
    $styles = image_style_load($matches[1]);

    // Array of all size manipulation effects in Drupal.
    $size_effects = array('image_resize', 'image_scale', 'image_scale_and_crop');

    // Load the original image.
    $img = image_load($uri);

    // Apply all non-size manipulation effects.
    if (!empty($styles)) {
      foreach ($styles['effects'] as $effect) {
        if (!in_array($effect['name'], $size_effects)) {
          image_effect_apply($img, $effect);
        }
      }
    }

    // If height is ignored, calculate from original image.
    if ($height == 0) {
      $height = ($width * $img->info['height']) / $img->info['width'];
    }

    // Use the default image toolkit to resize.
    if (image_scale_and_crop($img, $width, $height)) {
      header('Content-Type: ' . $img->info['mime_type']);
      // Supporting only GD at the moment.
      imagejpeg($img->resource, NULL, variable_get('image_jpeg_quality', 75));
      imagedestroy($img->resource);
      // Add Imagemagick handling here when support is necessary.
      return;
    }
    else {
      watchdog('imgfly', 'Image resizing failed.', WATCHDOG_ERROR);
      return;
    }

  }
  else {
    watchdog('imgfly', 'Image token not validated!', WATCHDOG_ERROR);
    drupal_access_denied();
    return;
  }
}
