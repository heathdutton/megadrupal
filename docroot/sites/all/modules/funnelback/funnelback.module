<?php

/**
 * @file
 * Provides Funnelback search integration.
 */

define('FUNNELBACK_DEFAULT_NUM_PAGES', 10);
define('FUNNELBACK_BEST_BETS_CLICK_TYPE', 'FP');
define('FUNNELBACK_URL_MAX_LENGTH', 80);
define('FUNNELBACK_DESC_MAX_LENGTH', 180);
define('FUNNELBACK_TITLE_MAX_LENGTH', 80);

define('FUNNELBACK_API_HTML', 1);
define('FUNNELBACK_API_XML', 2);
define('FUNNELBACK_API_JSON', 3);

define('FUNNELBACK_DEBUG_NONE', 'none');
define('FUNNELBACK_DEBUG_LOG', 'log');
define('FUNNELBACK_DEBUG_VERBOSE', 'verbose');

define('FUNNELBACK_UI_CLASSIC', 1);
define('FUNNELBACK_UI_MODERN', 11);

/**
 * Implements hook_menu().
 */
function funnelback_menu() {
  $items = array();
  $items['funnelback/search'] = array(
    'title' => 'Search',
    'description' => 'Search using Funnelback',
    'page callback' => 'funnelback_search_view',
    'access arguments' => array('use funnelback search'),
  );
  $items['admin/config/search/funnelback'] = array(
    'title' => 'Funnelback search',
    'description' => 'Configure funnelback settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('funnelback_admin_form'),
    'access arguments' => array('administer funnelback'),
    'file' => 'funnelback.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page().
 */
function funnelback_preprocess_html($theme = NULL) {
  drupal_add_css(drupal_get_path('module', 'funnelback') . '/funnelback.css');
}

/**
 * Implements hook_permission().
 */
function funnelback_permission() {
  return array(
    'use funnelback search' => array(
      'title'       => t('Use Funnelback search'),
      'description' => t('Use the Funnelback search block to make searches and display matching results'),
    ),
    'administer funnelback' => array(
      'title'       => t('Administer Funnelback search settings'),
      'description' => t('Allows access to change the Funnelback API connection parameters'),
    ),
  );
}

/**
 * Page callback for funnelback search.
 */
function funnelback_search_view() {

  $query   = filter_xss($_GET['query']);
  $start   = (!empty($_GET['start'])) ? filter_xss($_GET['start']) : 0;
  $results = funnelback_do_query($query, NULL, $start);
  $summary = $results['summary'];
  $pager = theme('funnelback_pager', array('summary' => $summary));
  $output = theme('funnelback_results', array('results' => $results, 'pager' => $pager));

  return $output;
}

/**
 * Cache search results.
 *
 * Need to keep a cache of the search results for the entire page duration,
 * so blocks can access it.
 */
function funnelback_static_results_cache($results = NULL) {
  static $_results = NULL;
  if (is_array($results)) {
    $_results = $results;
  }

  return $_results;
}

/**
 * Semaphore that indicates whether a search has been done.
 *
 * Blocks use this later to decide whether they should load or not.
 *
 * @param bool|null $searched
 *   A boolean indicating whether a search has been executed.
 *
 * @return bool
 *   TRUE if a search has been executed.
 */
function funnelback_has_searched($searched = NULL) {
  static $_searched = FALSE;
  if (is_bool($searched)) {
    $_searched = $searched;
  }

  return $_searched;
}

/**
 * Implements hook_theme().
 */
function funnelback_theme() {
  return array(
    'funnelback_results' => array(
      'arguments' => array('results' => NULL, 'pager' => NULL),
      'template' => 'funnelback_results',
    ),
    'funnelback_contextual_nav_block' => array(
      'arguments' => array('summary' => NULL, 'contextual_nav' => NULL),
      'template' => 'funnelback_contextual_nav_block',
    ),
    'funnelback_pager' => array(
      'arguments' => array('summary' => NULL),
      'template' => 'funnelback_pager',
    ),
  );
}

/**
 * Preprocess function for the funnelback_results template.
 */
function funnelback_preprocess_funnelback_results(&$vars) {
  $results           = $vars['results'];
  $vars['summary']   = $results['summary'];
  $vars['spell']     = $results['spell'];
  $vars['items']     = $results['results'];
  $vars['best_bets'] = $results['best_bets'];
}

/**
 * Preprocess function for the funnelback_results pager.
 */
function funnelback_preprocess_funnelback_pager(&$vars) {
  $summary      = $vars['summary'];
  $page_size    = intval($summary['page_size']);
  $start        = intval($summary['start']);
  $i            = 0;
  $pager_end    = FUNNELBACK_DEFAULT_NUM_PAGES;
  // If we get bigger than 10 pages, offset the pager numbers.
  if ($start > $page_size * FUNNELBACK_DEFAULT_NUM_PAGES) {
    // Round to the nearest 10.
    $pager_offset = floor($start / FUNNELBACK_DEFAULT_NUM_PAGES / FUNNELBACK_DEFAULT_NUM_PAGES) * FUNNELBACK_DEFAULT_NUM_PAGES;
    $i            = $pager_offset;
    $pager_end    = $i + FUNNELBACK_DEFAULT_NUM_PAGES;
  }
  $pager = array();
  $pages = array();
  while ($i < $pager_end && $i * $page_size < $summary['total']) {
    // Create the pager title and link.
    $page          = array();
    $page['title'] = strval($i + 1);
    $page['link']  = '?query=' . urlencode($summary['query']) . '&start=' . strval($i * $page_size + 1);

    // Flag the current page.
    $current = FALSE;
    if ($start == ($i * $page_size + 1)) {
      $current = TRUE;
    }
    $page['current'] = $current;

    // Create the previous/next links.
    if ($current) {
      $pager['prev_link'] = '?query=' . urlencode($summary['query']) . '&start=' . strval(($i - 1) * $page_size + 1);
      $pager['next_link'] = '?query=' . urlencode($summary['query']) . '&start=' . strval(($i + 1) * $page_size + 1);
    }

    $pages[] = $page;

    $i++;
  }

  $pager['pages'] = $pages;

  // Flag if we're on the first page.
  $pager['first'] = (intval($summary['start']) == 1);

  // Flag if we're more than the first lot of pages.
  if (intval($summary['start']) > $page_size * FUNNELBACK_DEFAULT_NUM_PAGES) {
    $pager['first_link'] = '?query=' . urlencode($summary['query']) . '&start=1';
  }

  $vars['pager'] = $pager;
}

/**
 * Calls the appropriate Funnelback web service interface.
 *
 * @param string $query
 *   The query.
 * @param int $api
 *   The API type.
 * @param int $start
 *   A start value.
 *
 * @return array|null
 *   An array of results when successful or NULL on failure.
 */
function funnelback_do_query($query, $api = NULL, $start = 1) {

  if (empty($api)) {
    $api = variable_get('funnelback_api_format', FUNNELBACK_API_XML);
  }
  $ui_version = variable_get('funnelback_ui_version', FUNNELBACK_UI_CLASSIC);

  $base_url = funnelback_get_base_url();
  $api_path       = variable_get('funnelback_api_path', NULL);
  $collection     = variable_get('funnelback_collection', 'example-collection');
  $profile        = variable_get('funnelback_profile', NULL);

  // Create an array of query params.
  $request_params = array(
    'remote_ip' => ip_address(),
    'query' => $query,
    'start_rank' => $start,
    'collection' => $collection,
  );

  if (!empty($profile)) {
    $request_params['profile'] = $profile;
  }

  // Allow modules to modify the query parameters.
  drupal_alter('funnelback_query', $request_params);

  // Set API paths.
  if (empty($api_path)) {
    $api_path = funnelback_get_api_path($api, $ui_version);

    if ($api_path == FALSE) {
      return FALSE;
    }
  }

  // Do the request.
  $response = funnelback_request($base_url, $api_path, $request_params);

  if ($response->code == 200) {
    switch ($api) {
      case FUNNELBACK_API_HTML:
        $result = funnelback_html_query($response, $base_url);
        break;

      default:
      case FUNNELBACK_API_XML:
        $result = funnelback_xml_query($response, $base_url);
        break;

      case FUNNELBACK_API_JSON:
        $result = funnelback_json_query($response, $base_url);
        break;
    }
  }
  else {
    funnelback_debug('The search query failed due to "%error".', array(
      '%error' => $response->code . ' ' . $response->error,
    ), WATCHDOG_WARNING);
    return NULL;
  }

  // Allow modules to modify the query result.
  drupal_alter('funnelback_result', $result);

  return $result;
}

/**
 * Return the base URL.
 *
 * @return string|null
 *   The base URL.
 */
function funnelback_get_base_url() {

  $base_url = variable_get('funnelback_base_url', 'https://example.funnelback.com/search/');
  $base_url = rtrim($base_url, '/');

  return $base_url . '/';
}

/**
 * Make a request.
 *
 * @param string $base_url
 *   The base URL for the request.
 * @param string $api_path
 *   The api path from the base URL.
 * @param string $request_params
 *   The request parameters.
 *
 * @return object
 *   The response object.
 */
function funnelback_request($base_url, $api_path, $request_params) {

  // Build the search URL with query params.
  $url = $base_url . $api_path . '?' . drupal_http_build_query($request_params);

  // Make the request.
  $response = drupal_http_request($url);

  funnelback_debug('Requesting url: %url. Response %response', array(
    '%url' => $url,
    '%response' => $response->code,
  ));

  return $response;
}

/**
 * Get an API path.
 *
 * @param int $response_type
 *   The API response type requested.
 * @param int $ui_version
 *   The UI version to use.
 *
 * @return bool|string
 *   The API Path, or FALSE.
 */
function funnelback_get_api_path($response_type = FUNNELBACK_API_XML, $ui_version = FUNNELBACK_UI_CLASSIC) {

  $api_path = FALSE;

  // Classic UI paths.
  if ($ui_version == FUNNELBACK_UI_CLASSIC) {
    if ($response_type == FUNNELBACK_API_XML) {
      $api_path = 'xml.cgi';
    }
    if ($response_type == FUNNELBACK_API_JSON) {
      funnelback_debug('The Funnelback JSON API requires the Modern UI', array(), WATCHDOG_ERROR);
    }
    if ($response_type == FUNNELBACK_API_HTML) {
      $api_path = 'search.cgi';
    }
  }
  else {
    // Modern UI paths.
    if ($response_type == FUNNELBACK_API_XML) {
      $api_path = 's/search.xml';
    }
    if ($response_type == FUNNELBACK_API_JSON) {
      $api_path = 's/search.json';
    }
    if ($response_type == FUNNELBACK_API_HTML) {
      $api_path = 's/search.html';
    }
  }

  return $api_path;
}

/**
 * Helper to log debug messages.
 *
 * @param string $message
 *   A message, suitable for watchdog().
 * @param array $args
 *   (optional) An array of arguments, as per watchdog().
 * @param int $log_level
 *   (optional) The watchdog() log level. Defaults to WATCHDOG_DEBUG.
 */
function funnelback_debug($message, $args = array(), $log_level = WATCHDOG_DEBUG) {

  $debug = variable_get('funnelback_debug_mode', FUNNELBACK_DEBUG_NONE);
  if ($debug == FUNNELBACK_DEBUG_LOG) {
    watchdog('funnelback', $message, $args, $log_level);
  }
  elseif ($debug == FUNNELBACK_DEBUG_VERBOSE) {
    $string = format_string($message, $args);
    if ($log_level >= WATCHDOG_ERROR) {
      $message_level = 'error';
    }
    else {
      $message_level = 'status';
    }
    drupal_set_message($string, $message_level);
  }
}

/**
 * Calls the Funnelback HTML web service interface.
 *
 * @todo: Incompatible with current build method.
 *
 * Because this returns a fully rendered HTML page, it is currently
 * incompatible with the funnelback_do_query() workflow, and needs to be
 * rewritten.
 *
 * @param object $response
 *   A HTML response object.
 * @param string $base_url
 *   The base URL of this search.
 *
 * @return NULL
 *   No return.
 */
function funnelback_html_query($response, $base_url) {

  if (isset($response->data)) {
    return $response->data;
  }

  return NULL;
}

/**
 * Calls the Funnelback XML web service interface.
 *
 * @param object $response
 *   A HTML response object.
 * @param string $base_url
 *   The base URL of this search.
 *
 * @return array
 *   An array containing results data.
 */
function funnelback_xml_query($response, $base_url) {
  // Parse the data.
  $xml = simplexml_load_string($response->data);

  // Load up the results summary.
  $summary = array();
  $summary['start'] = (int) $xml->results_summary->currstart;
  $summary['end'] = (int) $xml->results_summary->currend;
  $summary['page_size'] = (int) $xml->results_summary->num_ranks;
  $summary['total'] = (int) $xml->results_summary->fully_matching;
  $summary['query'] = (string) $xml->query_as_processed;
  $summary['base_url'] = $base_url;

  $spell = array();
  if ($xml->spell && $xml->spell != '') {
    $suggestion         = array();
    $suggestion['url']  = (string) $xml->spell->url;
    $suggestion['text'] = (string) $xml->spell->text;
    $spell[]            = $suggestion;
  }

  $best_bets = array();
  if (!empty($xml->featured_pages)) {
    foreach ($xml->featured_pages->fp as $fp) {
      $best_bet = array();
      $fp_link = (string) $fp->fp_link;
      $best_bet['live_url'] = $fp_link;
      $best_bet['title'] = (string) $fp->fp_title;
      $best_bet['desc'] = (string) $fp->fp_desc;

      $best_bet['click_url'] = $base_url . 'click.cgi?' . drupal_http_build_query(array(
          'url' => $fp_link,
          'collection' => variable_get('funnelback_collection', 'example-collection'),
          'type' => FUNNELBACK_BEST_BETS_CLICK_TYPE,
      ));

      $best_bets[] = $best_bet;
    }
  }

  $items = array();
  foreach ($xml->results->result as $result) {
    $item = array();
    $title = (string) $result->title;
    if (strlen($title) > FUNNELBACK_TITLE_MAX_LENGTH) {
      $title = substr_replace($title, '&hellip;', FUNNELBACK_TITLE_MAX_LENGTH);
    }
    $item['title']     = $title;
    $item['date']      = (string) $result->date;
    $item['summary']   = (string) $result->summary;
    $live_url          = (string) $result->live_url;
    $item['live_url']  = _funnelback_truncate_url($live_url);
    $item['cache_url'] = (string) $result->cache_url;

    // We only want to do the following if the result is a non web file
    // (.xls, .pdf, etc).
    if (_funnelback_check_filetype($result->filetype)) {
      $item['filetype'] = (string) $result->filetype;
      $item['filesize'] = (int) $result->filesize;
      $item = _funnelback_format_label($item);
      $item['filesize_formatted'] = format_size($item['filesize']);
    }

    $item['click_url'] = $base_url . (string) $result->click_tracking_url;
    $items[] = $item;
  }

  // Load up the contextual navigation.
  $contextual_nav = array();
  if (!empty($xml->fluster->category)) {
    foreach ($xml->fluster->category as $category) {
      $nav_item         = array();
      $nav_item['name'] = (string) $category['name'];
      $more_link        = (string) $category->more_link;
      if (!empty($more_link)) {
        $nav_item['more_link'] = $more_link;
      }

      $clusters = array();
      foreach ($category->cluster as $cluster) {
        $clusters[] = array(
          'title' => (string) $cluster,
          'count' => (int) $cluster['count'],
          'link' => (string) $cluster['href'],
        );
      }
      $nav_item['clusters'] = $clusters;

      $contextual_nav[] = $nav_item;
    }
  }

  // Return the results.
  $results = array(
    'summary' => $summary,
    'spell' => $spell,
    'best_bets' => $best_bets,
    'results' => $items,
    'contextual_nav' => $contextual_nav,
  );

  $nav_results = array(
    'summary' => $summary,
    'contextual_nav' => $contextual_nav,
  );

  funnelback_has_searched(TRUE);
  funnelback_static_results_cache($nav_results);

  return $results;
}

/**
 * Calls the Funnelback JSON web service interface.
 *
 * @param object $response
 *   A HTML response object.
 * @param string $base_url
 *   The base URL of this search.
 *
 * @return array
 *   An array containing results data.
 */
function funnelback_json_query($response, $base_url) {

  // Parse the data.
  $json = drupal_json_decode($response->data);
  $result = $json['response']['resultPacket'];
  $facets = $json['response']['facets'];

  // Load up the results summary.
  $summary = array();
  $summary['start']     = (int) $result['resultsSummary']['currStart'];
  $summary['end']       = (int) $result['resultsSummary']['currEnd'];
  $summary['page_size'] = (int) $result['resultsSummary']['numRanks'];
  $summary['total']     = (int) $result['resultsSummary']['fullyMatching'];
  $summary['query']     = (string) $result['queryAsProcessed'];
  $summary['base_url']  = $base_url;

  $spell = array();
  if (!empty($result['spell'])) {
    $suggestion         = array();
    $suggestion['url']  = $result['spell']['url'];
    $suggestion['text'] = $result['spell']['text'];
    $spell[]            = $suggestion;
  }

  $best_bets = array();
  if (!empty($json['featuredPages'])) {
    foreach ($json['featuredPages']['fp'] as $fp) {
      $best_bet = array();
      $fp_link = (string) $fp['fpLink'];
      $best_bet['live_url'] = $fp_link;
      $best_bet['title'] = (string) $fp['fpTitle'];
      $best_bet['desc'] = (string) $fp['fpDesc'];

      $best_bet['click_url'] = $base_url . 'click.cgi?' . drupal_http_build_query(array(
          'url' => $fp_link,
          'collection' => variable_get('funnelback_collection', 'example-collection'),
          'type' => FUNNELBACK_BEST_BETS_CLICK_TYPE,
        ));

      $best_bets[] = $best_bet;
    }
  }

  $items = array();
  if (!empty($results)) {
    foreach ($result['results'] as $result) {
      $item = array();
      // $title = (string)$result['title'];
      $title = (string) $result['metaData'][1];
      if (strlen($title) > FUNNELBACK_TITLE_MAX_LENGTH) {
        $title = substr_replace($title, '&hellip;', FUNNELBACK_TITLE_MAX_LENGTH);
      }
      $item['title'] = $title;
      $item['date'] = (string) $result['date'];
      $item['summary'] = (string) $result['summary'];
      $live_url = (string) $result['liveUrl'];
      $item['live_url'] = _funnelback_truncate_url($live_url);
      $item['cache_url'] = (string) $result['cacheUrl'];

      // We only want to do the following if the result is a non web file
      // (.xls, .pdf, etc).
      if (_funnelback_check_filetype($result['fileType'])) {
        $item['filetype'] = (string) $result['fileType'];
        $item['filesize'] = (int) $result['fileSize'];
        $item = _funnelback_format_label($item);
        $item['filesize_formatted'] = format_size($item['fileSize']);
      }

      $item['click_url'] = $base_url . (string) $result['clickTrackingUrl'];
      $items[] = $item;
    }
  }

  // Load up the contextual navigation.
  $contextual_nav = array();

  // Return the results.
  $results = array(
    'summary' => $summary,
    'spell' => $spell,
    'best_bets' => $best_bets,
    'results' => $items,
    'contextual_nav' => $contextual_nav,
  );

  $nav_results = array(
    'summary' => $summary,
    'contextual_nav' => $contextual_nav,
  );

  funnelback_has_searched(TRUE);
  funnelback_static_results_cache($nav_results);

  return $results;
}

/**
 * Format a label.
 *
 * @param array $item
 *   The item.
 *
 * @return array
 *   The item
 */
function _funnelback_format_label($item) {

  $item['filetype_label_short'] = '[' . strtoupper($item['filetype']) . ']';

  switch ($item['filetype']) {
    case 'pdf':
      $item['filetype_label_long'] = 'PDF';
      break;

    case 'xls':
      $item['filetype_label_long'] = 'Microsoft Excel';
      break;

    case 'ppt':
      $item['filetype_label_long'] = 'Microsoft Powerpoint';
      break;

    case 'rtf':
      $item['filetype_label_long'] = 'Rich Text';
      break;

    case 'doc':
    case 'docx':
      $item['filetype_label_long'] = 'Microsoft Word';
      break;
  }

  return $item;
}

/**
 * Make sure we only have non web files being displayed as file types.
 *
 * I.e. not html, cfm, etc.
 */
function _funnelback_check_filetype($type) {
  $accepted_types = array('pdf', 'xls', 'ppt', 'rtf', 'doc', 'docx');
  if (in_array($type, $accepted_types)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Truncate the display url so it displays on one line.
 */
function _funnelback_truncate_url($url) {
  // Split the url into bits so we can choose what to keep.
  $url_arr = parse_url($url);
  $host = $url_arr['host'];
  // Always keep the host.
  $max_len = FUNNELBACK_URL_MAX_LENGTH - strlen($host);
  $path    = $url_arr['path'];
  $query   = (!empty($url_arr['query'])) ? $url_arr['query'] : NULL;
  if (!empty($query)) {
    $path = $path . '?' . $query;
  }
  // Put elipsis in the middle of the path.
  $path_len = strlen($path);
  if ($path_len > $max_len) {
    $start = $max_len / 2;
    $trunc = $path_len - $max_len;
    $path  = substr_replace($path, '&hellip;', $start, $trunc);
  }

  return $host . $path;
}

/**
 * Implements hook_block_info().
 */
function funnelback_block_info() {

  // Search block.
  $blocks['search_form'] = array(
    'info' => t('Funnelback search block'),
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'administrative' => TRUE,
    ),
  );

  // Provide 'have you tried?' block.
  $blocks['contextual'] = array(
    'info' => t('Funnelback Contextual Nav'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function funnelback_block_view($delta = '') {

  $block = array();
  switch ($delta) {
    case 'search_form':
      if (user_access('use funnelback search')) {
        $block['subject'] = t('');
        $block['content'] = drupal_get_form('funnelback_search_block_form');
      }
      break;

    case 'contextual':
      if (user_access('use funnelback search')) {
        $block['subject'] = t('');
        $block['content'] = funnelback_contextual_nav_view();
      }
      break;
  }

  return $block;
}

/**
 * Search block form.
 */
function funnelback_search_block_form($form, &$form_state) {

  $form['funnelback_search_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => '',
    '#attributes' => array('title' => t('Enter the terms you wish to search for.')),
  );

  $form['funnelback_search_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Submit callback for search block form.
 */
function funnelback_search_block_form_submit($form, &$form_state) {

  $query = check_plain(filter_xss($form_state['values']['funnelback_search_field']));

  // Fixes issues where drupal_goto may not work.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Redirect to the search page.
  drupal_goto('funnelback/search', array(
    'query' => array('query' => $query),
  ));
}

/**
 * Block callback for contextual navigation.
 */
function funnelback_contextual_nav_view() {

  $results = funnelback_static_results_cache();
  $contextual_nav = $results['contextual_nav'];
  $summary = $results['summary'];
  $output = theme('funnelback_contextual_nav_block', array(
    'summary' => $summary,
    'contextual_nav' => $contextual_nav,
  ));

  return $output;
}
