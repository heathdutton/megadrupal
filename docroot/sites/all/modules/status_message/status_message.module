<?php


/* Hooks
 * ========================================================================== */

/**
 * Implementation of hook_init().
 */
function status_message_init() {
  $enabled = variable_get('status_message_enabled', FALSE);
  $type = variable_get('status_message_type', 'status');
  $text = variable_get('status_message_text', '');
  $filter = variable_get('status_message_filter', FALSE);
  if ($enabled && $text) {
    $path = drupal_get_path('module', 'status_message');
    drupal_add_js($path . '/js/status_message.js');
    // Add CSS for the close button
    drupal_add_css($path . '/css/status_message.css');
    
    $show_message = TRUE;
    // Do not show the message if the logged user has dismissed the message
    if (user_is_logged_in()) {
      global $user;
      $result = db_select('status_message_dismiss', 'sm')
          ->fields('sm')
          ->condition('user_id', $user->uid, '=')
          ->execute()
          ->fetchAssoc();
      if ($result) {
        $show_message = FALSE;
      }
    }
    // Do not show the message if the anonymous user has dismissed the message
    else if (isset($_COOKIE['status_message_dismiss_id']) && ($_COOKIE['status_message_dismiss_id'] != '')) {
      $result = db_select('status_message_dismiss', 'sm')
          ->fields('sm')
          ->condition('id', intval($_COOKIE['status_message_dismiss_id']), '=')
          ->execute()
          ->fetchAssoc();
      if ($result) {
        $show_message = FALSE;
      }
    }
    
    /**
     * @TODO Check if _status_message_remove() can replace $filter in this context
     */
    if ($show_message) {
      if ($filter) {
        // check that the message isn't already in the queue.
        $messages = drupal_get_messages($type, FALSE);
        if (($messages) && is_array($messages[$type])) {
          // there is an array, now check it for the message we're about to add.
          if (in_array($text, $messages[$type]))
            return;
        }
      }
      // Add close button
      $text .= theme('status_message_close_button', array('button' => ''));
      drupal_set_message($text, $type);
    }
    else {
      // The message is shown once after the user has dismissed it, because it is
      // still in the SESSION. We have to active remove the message here if 
      // $show_message is FALSE.
      _status_message_remove();
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function status_message_theme($existing, $type, $theme, $path) {
  return array(
    'status_message_close_button' => array(
      'variables' => array('button' => NULL),
    ),
  );
}

/**
 * Implementation of hook_permission().
 */
function status_message_permission() {
  return array(
    'set status message' => array(
      'title' => t('Set Status Message'),
      'description' => t('Set the site wide status message.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function status_message_menu() {
  $items['admin/config/system/status_message'] = array(
    'title' => t('Status message'),
    'description' => t('Set a Drupal message.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_status_message_settings'),
    'access arguments' => array('set status message'),
  );
  $items['status_message/dismiss'] = array(
    'title' => 'Dismiss Status Message',
    'page callback' => '_status_message_dismiss',
    'access callback' => TRUE,
  );
  return $items;
}


/* Preprocesses and theme functions
 * ========================================================================== */

/**
 * Preprocess variables for status_message_close_button template.
 */
function template_preprocess_status_message_close_button(&$vars) {
  $vars['button'] = '<div id="status_message_close_button" title="' . t('Close this message') . '">' . $vars['button'] . '</div>';
}

/**
 * Theme function for status_message_close_button template.
 */
function theme_status_message_close_button($vars) {
  return $vars['button'];
}


/* Help functions
 * ========================================================================== */

/**
 * Admin settings form.
 */
function _status_message_settings() {
  $form['status_message_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show message"),
    '#description' => t('Enable the message.'),
    '#default_value' => variable_get('status_message_enabled', FALSE),
  );

  $form['status_message_filter'] = array(
    '#type' => 'checkbox',
    '#title' => t("Filter duplicates"),
    '#description' => t('Filter out duplicate messages.'),
    '#default_value' => variable_get('status_message_filter', TRUE),
  );

  $form['status_message_type'] = array(
    '#type' => 'select',
    '#title' => t('Message type'),
    '#options' => array(
      'status' => t('Status'),
      'error' => t('Error'),
      'warning' => t('Warning'),
    ),
    '#default_value' => variable_get('status_message_type', 'status'),
  );

  $form['status_message_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Message to show'),
    '#default_value' => variable_get('status_message_text', ''),
    '#size' => 100,
  );

  $form['#submit'][] = '_status_message_settings_submit';

  return system_settings_form($form);
}

/**
 * Submit function for status_message_settings form.
 */
function _status_message_settings_submit($form, &$form_state) {
  $result = db_truncate('status_message_dismiss')->execute();
}

/**
 * Dismiss a Status Message and store the information in a cookie.
 */
function _status_message_dismiss() {
  // Set dismiss for logged user
  if (user_is_logged_in()) {
    global $user;
    $result = db_insert('status_message_dismiss')
        ->fields(array(
          'user_id' => $user->uid,
          'created' => REQUEST_TIME,
        ))
        ->execute();
  }
  // Set dismiss for anonymous user
  else {
    $result = db_insert('status_message_dismiss')
        ->fields(array(
          'created' => REQUEST_TIME,
        ))
        ->execute();
    setcookie('status_message_dismiss_id', $result, 9999999999, '/');
  }
  print 'ok';
}

/**
 * Remove the status message from SESSION.
 * @return boolean TRUE if the message was found and removed from SESSION.
 */
function _status_message_remove() {
  $type = variable_get('status_message_type', 'status');
  $text = variable_get('status_message_text', '');
  if (isset($_SESSION['messages'][$type]) && is_array($_SESSION['messages'][$type])) {
    // Loop through the messages and unset the status message if it is found
    foreach ($_SESSION['messages'][$type] as $key => $message) {
      preg_match_all("/" . $text . "/", $message, $matches, PREG_SET_ORDER);
      if (isset($matches[0][0])) {
        unset($_SESSION['messages'][$type][$key]);
        // Unset the whole message type, if there is no message left
        if (count($_SESSION['messages'][$type]) < 1) {
          unset($_SESSION['messages'][$type]);
        }
        return TRUE;
      }
    }
  }
  return FALSE;
}

