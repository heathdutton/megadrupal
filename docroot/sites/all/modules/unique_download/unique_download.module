<?php
/**
 * @file
 * Enables Unique-download URL generation capability for public files.
 */

/**
 * Implements hook_help().
 */
function unique_download_help($path, $arg) {

  switch ($path) {
    // Main module help for the block module.
    case 'admin/help#unique_download':
      return '<p>' . t(
        'This module used to create the unique download links
        for the attachments with nodes'
      );
  }
}

/**
 * Implements hook_permission().
 */
function unique_download_permission() {

  return array(
    'administer unique download' => array(
      'title' => t('Administer unique download'),
      'description' => t(
        'Perform administration tasks 
        for unique download.'
      ),
    ),
    'access unique download' => array(
      'title' => t('Access unique download'),
      'description' => t(
        'Allow user to access unique download URL.'
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function unique_download_menu() {

  $items = array();

  $items['admin/config/system/unique'] = array(
    'title' => 'Unique URL settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unique_download_settings'),
    'access arguments' => array('administer unique download'),
    'description' => 'Configuration page for unique Download module.',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/unique/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unique_download_settings'),
    'access arguments' => array('administer unique download'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/unique/generate'] = array(
    'title' => 'Generate unique URL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unique_download_generate'),
    'access arguments' => array('administer unique download'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/unique/download'] = array(
    'title' => 'Show unique URLs',
    'page callback' => 'unique_download_links',
    'access arguments' => array('administer unique download'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['unique/key/%'] = array(
    'title' => 'Your download link',
    'page callback' => 'unique_download_key',
    'page arguments' => array(2),
    'access arguments' => array('access unique download'),
    'type' => MENU_CALLBACK,
  );

  $items['unique/sendkey/%'] = array(
    'title' => 'Your download link',
    'page callback' => 'unique_download_sendkey',
    'page arguments' => array(2),
    'access arguments' => array('access unique download'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function unique_download_settings($form, &$form_state) {

  $types = node_type_get_types();
  $ctypes = array();
  foreach ($types as $key => $value) {
    $ctypes[$key] = $value->name;
  }

  $default = NULL;
  // Get default values for the settings.
  $multiple = variable_get('unique_download_multidownload', $default);
  $content_types_allowed = variable_get(
        'unique_download_allowed_content_types',
        array()
    );
  $email_subject = variable_get(
        "unique_download_email_subject",
        "Your Unique Download Link is in E-mail."
    );

  $form['multiple_allowed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multiple Download'),
    '#default_value' => $multiple,
  );

  $form['content_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed Content types'),
    '#options' => $ctypes,
    '#default_value' => $content_types_allowed,
  );

  $form['email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Subject for Unique Download.'),
    '#description' => t(
          "This field contains the Email Subject for unique download module."
    ),
    '#default_value' => $email_subject,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function unique_download_settings_submit($form, &$form_states) {

  $multiple = $form_states['values']['multiple_allowed'];
  $content_types_allowed = $form_states['values']['content_type'];
  $email_subject = $form_states['values']['email_subject'];

  // Unique download configration variables.
  variable_set('unique_download_multidownload', $multiple);
  variable_set('unique_download_allowed_content_types', $content_types_allowed);
  variable_set('unique_download_email_subject', $email_subject);

  drupal_set_message('settings updated successfully.');
}

/**
 * Implements hook_form().
 */
function unique_download_generate($form, &$form_states) {

  $form['node_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Node id to which file is associated.'),
    '#required' => TRUE,
  );

  $form['user_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the email associated.'),
    '#required' => TRUE,
  );

  $form['expiry_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the url expiry time in terms of days.'),
    '#required' => TRUE,
    '#size' => 10,
    '#maxlength' => 3,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function unique_download_generate_submit($form, &$form_states) {

  $nodedetails = node_load($form_states['values']['node_id']);
  $filedetails = array();

  if (!empty($nodedetails) && count($nodedetails->field_image['und']) > 1) {
    $counter = 0;
    $imagearray = $nodedetails->field_image['und'];
    foreach ($imagearray as $row) {
      $filedetails[$counter]['fid'] = $row['fid'];
      $filedetails[$counter]['uid'] = $row['uid'];
      $filedetails[$counter]['email'] = $form_states['values']['user_email'];
      $filedetails[$counter]['expiry'] = $form_states['values']['expiry_time'];
      $counter++;
    }
  }
  else {
    $strkey = unique_download_createkey();
    $fid = db_insert('unique_download')
               ->fields(
                 array(
                   'fid' => $nodedetails->field_image['und'][0]['fid'],
                   'uid' => $nodedetails->field_image['und'][0]['uid'],
                   'email' => $form_states['values']['user_email'],
                   'downloadkey' => $strkey,
                   'downloads' => 0,
                   'expiry' => time() + (60 * 60 * 24 * $form_states['values']['expiry_time']),
                 )
               )->execute();
  }

  if (count($filedetails) > 1) {
    foreach ($filedetails as $key => $value) {
      $strkey = unique_download_createkey();
      $fid = db_insert('unique_download')
                     ->fields(
                     array(
                       'fid' => $value['fid'],
                       'uid' => $value['uid'],
                       'email' => $form_states['values']['email'],
                       'downloadkey' => $strkey,
                       'downloads' => 0,
                       'expiry' => time() + (60 * 60 * 24 * $value['expiry']),
                     )
                     )->execute();
    }
  }
  drupal_set_message('Download link successfully created.');
}

/**
 * Function to generate the unique download key.
 */
function unique_download_createkey() {

  // Create a random key.
  $strkey = md5(microtime());
  $args = array(':downloadkey' => $strkey);
  // Check to make sure this key isnt already in use.
  $rescheck = db_query_range("
    SELECT count(*) as counter 
    FROM {unique_download} 
    WHERE downloadkey = :downloadkey", 0, 1, $args);
  $counter = 0;
  foreach ($rescheck as $values) {
    $counter = $values->counter;
  }
  if ($counter) {
    // Key already in use.
    return unique_download_createkey();
  }
  else {
    // Key is OK.
    return $strkey;
  }
}

/**
 * Function to show the unique download links.
 */
function unique_download_links() {

  global $base_url;
  $results = db_select('unique_download', 'u')
                 ->fields('u')
                 ->execute()
                 ->fetchAll();
  $header = array('uniqueid', 'fileid', 'Email', 'Downloaded', 'Expiry',
    'User', 'Downloadlink', 'Send E-mail',
  );
  $data = array();
  foreach ($results as $values) {
    $fileuser = user_load($values->uid);
    $data[$values->ufid] = (array) $values;
    $data[$values->ufid]['user'] = $fileuser->name;
    // Build unique URL.
    $uniqueurl = $base_url . "/unique/key/" . $values->downloadkey;
    $data[$values->ufid]['downloadlink'] = l(t('Unique-URL'), $uniqueurl);
    $data[$values->ufid]['expiry'] = date('m/d/Y', $values->expiry);
    // Build URL to call mail function.
    $sendurl = $base_url . "/unique/sendkey/" . $values->ufid;
    $data[$values->ufid]['send'] = l(t("Send E-Mail"), $sendurl);
    unset($data[$values->ufid]['downloadkey']);
    unset($data[$values->ufid]['uid']);
  }

  // Default output for tables.
  $output = t("No data to show.");

  if (!empty($data)) {
    $output = theme('table', array('header' => $header, 'rows' => $data));
  }

  return $output;
}

/**
 * Function to send email to intended person for Unique URL.
 */
function unique_download_sendkey($ufid) {

  // Initialize $message.
  $message = "";
  $mail = $to = "";
  global $base_url;

  // Fetch the unique id from the unique key generated.
  $results = db_query("
    SELECT * FROM {unique_download} WHERE ufid = :ufid",
    array(":ufid" => $ufid)
  );

  // Find the parameters to send email.
  foreach ($results as $values) {
    $uniqueurl = $base_url . "/unique/key/" . $values->downloadkey;
    $fileuser = user_load($values->uid);
    $mail = $fileuser->mail;
    $to = $values->email;
    unset($fileuser);
    // This will get replaced with email template in next version.
    $message = "Hi,<br>";
    $message .= "Your Unique Download URL is " . $uniqueurl . "<br><br><br>";
    $message .= "Thank you,<br>";
    $message .= "Administrator";
  }

  // Get the subject of email for unique download.
  $subject = variable_get('unique_download_email_subject');
  unique_download_drupal_mail($mail, $to, $subject, $message);

  // Validate for array before calling drupal_mail_send.
  if (!empty($message)) {
    drupal_set_message("Email sent successfully.");
  }
  else {
    drupal_set_error("Something went wrong.");
  }
  drupal_goto($base_url . "/admin/config/system/unique/download");
}

/**
 * Wrapper function to send email of unique-download to your users.
 */
function unique_download_drupal_mail($from, $to, $subject, $message) {

  $custom_module = 'unique_download';
  $custom_mail_token = microtime();
  if (empty($from)) {
    // Default 'from' email address i.e. site_mail.
    $from = variable_get('site_mail', 'Site Email <noreply@yoursite.com>');
  }
  $message = array(
    'id' => $custom_module . '_' . $custom_mail_token,
    'to' => $to,
    'subject' => $subject,
    'body' => array($message),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
    ),
  );
  $system = drupal_mail_system($custom_module, $custom_mail_token);
  $message = $system->format($message);
  if ($system->mail($message)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Function to get the key from URL.
 */
function unique_download_key($downloadkey) {

  if (!isset($downloadkey)) {
    return drupal_set_message("The key entered is invalid");
  }
  else {
    unique_download_verifykey($downloadkey);
  }
}

/**
 * Function to verify the key and allow user to download.
 */
function unique_download_verifykey($key) {

  global $base_url;
  // Get default values for the settings.
  $multiple = variable_get('unique_download_multidownload', '');
  $content_types_allowed = variable_get('
    unique_download_allowed_content_types', ''
  );

  $filearray = array();
  $rescheck = db_select('unique_download', 'ul')
    ->fields('ul')
    ->condition('downloadkey', $key, '=')
    ->execute()
    ->fetchObject();

  if (!empty($rescheck)) {
    $filearray = (array) $rescheck;
    $fileobject = file_load($filearray['fid']);
    $filearray = $filearray + (array) $fileobject;
  }
  // Check for file name.
  if (!empty($filearray['filename'])) {
    // Check that the download time hasnt expired.
    if ($filearray['expiry'] >= time()) {
      if (!$filearray['downloads'] OR $multiple) {
        // Check the file exists.
        if (file_exists($filearray['uri'])) {
          // Get the file content.
          $strfile = file_get_contents($filearray['uri']);
          // Get the file name from URL.
          $patharray = explode("/", $filearray['uri']);
          $filename = array_pop($patharray);

          // Give proper file name to download.
          $newfilename = str_replace(" ", "_", $filename);
          // Set the headers to force a download.
          header("Content-type: application/force-download");
          header("Content-Disposition: attachment; filename=\""
               . $newfilename . "\"");
          // Echo the file to the user.
          echo $strfile;
          // Update the DB to say this file has been downloaded.
          db_update('unique_download')
            ->expression('downloads', 'downloads + :downloads',
                       array(':downloads' => 1))
            ->condition('downloadkey', $key, '=')
            ->execute();
          exit();
        }
        else {
          drupal_set_message("We couldn't find the file to download.");
          $num_deleted = db_delete('unique_download')
            ->condition('downloadkey', $key, '=')
            ->execute();
          drupal_goto($base_url);
        }
      }
      else {
        // Multi download of same file is disabled, unless enabled in setings.
        drupal_set_message("This file has already been downloaded.");
        drupal_goto($base_url);
      }
    }
    else {
      // This download has passed its expiry date.
      drupal_set_message("This download has expired. Please contact Administrator.");
      drupal_goto($base_url);
    }
  }
  else {
    // The download key given didnt match anything in the DB.
    drupal_set_message("No file was found to download. Please contact Administrator.");
    drupal_goto($base_url);
  }

}
