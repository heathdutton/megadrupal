<?php

/**
 * @file
 * functions for the Node Revision Restrict module.
 * @Author: Shivendu kumar
 */


/**
 * Implements hook_help().
 */
function node_revision_restrict_help($path, $arg) {
  switch ($path) {
    case 'admin/help#node_revision_restrict':
      $output = '<p>' . t('Node revision restrict allows you to restrict node revision after create node.') . '</p>';
      $output .= '<p>' . t('Setup node revision restrict <a href="@url">here</a>.', array('@url' => url('admin/config/content/node_revision_restrict'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function node_revision_restrict_menu() {
  $items = array();
  $items['admin/config/content/node_revision_restrict'] = array(
    'title' => 'Node Revision Restrict',
    'description' => 'Configuration for Node Revision Restrict for Each Content Type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_revision_restrict_form'),
    'access arguments' => array('administer node restrict'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function node_revision_restrict_permission() {
  return array(
    'administer node restrict' => array(
      'title' => t('Administer Node Revision Restrict'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function node_revision_restrict_form($form, &$form_state) {
  $content_types = node_type_get_types();
  $form['revision_restrict_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node revision restrict configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach ($content_types as $content_type_name) {
    $restrict_content_type_default_value = variable_get('restrict_node_revision_number_for_' . $content_type_name->type);
    $form['revision_restrict_group']['node_revision_restrict_content_type_' . $content_type_name->type] = array(
      '#type' => 'checkbox',
      '#title' => t('Content Type : <b>:content_type_title </b>', array(':content_type_title' => $content_type_name->name)),
      '#default_value' => isset($restrict_content_type_default_value) ? 1 : 0,
    );
    $form['revision_restrict_group']['node_revision_restrict_number_for_content_type_' . $content_type_name->type] = array(
      '#type' => 'textfield',
      '#size' => 10,
      '#description' => t('Enter number to restrict revisions or leave blank for no restrictions.'),
      '#title' => t('Revision limit for :content_type_title ?', array(':content_type_title' => $content_type_name->name)),
      '#default_value' => isset($restrict_content_type_default_value) ? $restrict_content_type_default_value : '',
      '#maxlength' => 128,
    );
  }
  $form['revision_restrict_group']['actions'] = array('#type' => 'actions');
  $form['revision_restrict_group']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Implements hook_form_validation().
 */
function node_revision_restrict_form_validate(&$form, &$form_state) {
  $content_types = node_type_get_types();
  foreach ($content_types as $content_type_name) {
    if (isset($form_state['values']['node_revision_restrict_content_type_' . $content_type_name->type])) {
      if ($form_state['values']['node_revision_restrict_content_type_' . $content_type_name->type] == 1 && $form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type] == '') {
        $form['node_revision_restrict_number_for_content_type_' . $content_type_name->type]['#required'] = TRUE;
        form_set_error('node_revision_restrict_number_for_content_type_' . $content_type_name->type, t('Please enter numeric value you want to keep restrict number of revision for :content_type_name !', array(':content_type_name' => $content_type_name->name)));
      }
      elseif ($form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type] != '' && !is_numeric($form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type])) {
        form_set_error('node_revision_restrict_number_for_content_type_' . $content_type_name->type, t('Please enter numeric value for text field <b>how many revisions do you want to keep for :content_type_name ?</b>', array(':content_type_name' => $content_type_name->name)));
      }
      elseif ($form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type] != '' && $form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type] < 1) {
        form_set_error('node_revision_restrict_number_for_content_type_' . $content_type_name->type, t('Please enter more than 0 for text field <b>how many revisions do you want to keep for :content_type_name ?</b>', array(':content_type_name' => $content_type_name->name)));
      }
    }
    if (isset($form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type]) && !empty($form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type])) {
      if ($form_state['values']['node_revision_restrict_content_type_' . $content_type_name->type] != 1) {
        $form['node_revision_restrict_content_type_' . $content_type_name->type]['#required'] = TRUE;
        form_set_error('node_revision_restrict_content_type_' . $content_type_name->type, t('Please checked :content_type_name checkbox!', array(':content_type_name' => $content_type_name->name)));
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 */
function node_revision_restrict_form_submit($form, &$form_state) {
  $selected_content_types_and_value = array();
  $content_types = node_type_get_types();
  foreach ($content_types as $content_type_name) {
    if ($form_state['values']['node_revision_restrict_content_type_' . $content_type_name->type] == 1) {
      $selected_content_types_and_value[$content_type_name->type] = $form_state['values']['node_revision_restrict_number_for_content_type_' . $content_type_name->type];
    }
    else {
      $not_selected_content_types[$content_type_name->type] = $content_type_name->type;
    }
  }
  foreach ($selected_content_types_and_value as $content_type => $restrict_number) {
    variable_set('restrict_node_revision_number_for_' . $content_type, $restrict_number);
  }
  foreach ($not_selected_content_types as $content_type) {
    $prvious_set_variable = variable_get('restrict_node_revision_number_for_' . $content_type);
    if ($prvious_set_variable) {
      variable_del('restrict_node_revision_number_for_' . $content_type);
    }
  }
  drupal_set_message(t('The restrict node revision settings have been updated.'));
}

/**
 * Implements of hook_presave().
 */
function node_revision_restrict_node_presave($node) {
  $node_type = $node->type;
  $count_to_restrict_set_value = variable_get('restrict_node_revision_number_for_' . $node_type);
  if (isset($count_to_restrict_set_value)) {
    $nid = $node->nid;
    $node_data = db_query('SELECT * FROM {node} WHERE nid = :nid', array(':nid' => $nid));
    foreach ($node_data as $node) {
      $revision_data = node_revision_list($node);
      foreach ($revision_data as $revision) {
        $revision_ids[] = $revision->vid;
      }
      $node_to_restrict = array_slice($revision_ids, $count_to_restrict_set_value, count($revision_ids));
      foreach ($node_to_restrict as $revision_id) {
        node_revision_delete($revision_id);
      }
    }
  }
}
