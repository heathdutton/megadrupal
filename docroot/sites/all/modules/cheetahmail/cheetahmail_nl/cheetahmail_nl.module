<?php
/**
 * @file
 * Cheetahmail NL Module (Management of NEWSLETER).
 */

define('CHEETAHMAIL_NL_SEND_TEST', 0);
define('CHEETAHMAIL_NL_SEND_RIGHTNOW', 1);
define('CHEETAHMAIL_NL_SEND_SCHEDULED', 9);
define('CHEETAHMAIL_NL_SEND_STOP', -1);

define('CHEETAHMAIL_NL_CONTENT_POSTS', 0);
define('CHEETAHMAIL_NL_CONTENT_PAGES', 1);
define('CHEETAHMAIL_NL_CONTENT_POSTSANDPAGES', 2);

define('CHEETAHMAIL_NL_NEWSLETTER_CONTENT_VIEW', 'cheetahmail_newsletter');

/**
 * Implements hook_help().
 */
function cheetahmail_nl_help($path, $arg) {
  if ($path == 'admin/help#cheetahmail_nl') {
    return t('Experian Cheetahmail Newsletter allows to manage a single NEWSLETTER being sent periodically.');
  }

  if ($path == 'admin/reports/cheetahmail') {
    return t('Cheetahmail Campaign log shows the campaign created in EMS.');
  }
}

/**
 * Implements hook_menu().
 */
function cheetahmail_nl_menu() {
  $items = array();

  $items['admin/config/cheetahmail/nlconfigs'] = array(
    'title' => 'Newsletters',
    'description' => 'Newsletters Campaign configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' =>  array('cheetahmail_nl_admin_menu_configs_form'),
    'access callback' => 'cheetahmail_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'cheetahmail_nl.admin.inc',
    'type' =>  MENU_NORMAL_ITEM,
  );
  $items['admin/config/cheetahmail/nlconfigs/sending'] = array(
    'title' => 'Newsletters settings',
    'description' => 'General Newsletters configuration.',
    'type' =>  MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/cheetahmail/nlconfigs/campaign'] = array(
    'title' => 'Newsletters campaign',
    'description' => 'Newsletters Campaign configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' =>  array('cheetahmail_nl_admin_menu_configs_campaign_form'),
    'access callback' => 'cheetahmail_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'cheetahmail_nl.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/cheetahmail'] = array(
    'title' => 'Cheetahmail log',
    'description' => 'Cheetahmail campaigns log.',
    'page callback' => 'cheetahmail_nl_admin_menu_reports_campaign_list',
    'access callback' => 'cheetahmail_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'cheetahmail_nl.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/cheetahmail/nl-list'] = array(
    'title' => 'Newsletters log',
    'description' => 'Newsletters history log.',
    'type' =>  MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Return aggregated NL Campaign configuration.
 */
function cheetahmail_nl_get_campaign_configs() {
  $message_params = variable_get('experian/cheetahmail/nl/message_params', $default = array());
  $config_id = variable_get('experian/cheetahmail/nl/config_id');

  $configs = (array) cheetahmail_api_get_helper()->ems_configs_GetConfig($config_id);
  $list_unsubscribe = cheetahmail_api_get_helper()->_get_default_listUnsubscribe($config_id);

  // Email Message content.
  $configs['messageParams'] = $message_params;

  return array_merge($configs, $list_unsubscribe);
}

/**
 * Implements hook_views_api().
 */
function cheetahmail_nl_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Send NL thorugh Cheetahmail EMS
 */
function cheetahmail_nl_send_campaign($campaign_id, $update_lasttime_sent = FALSE) {
  module_load_include('inc', 'cheetahmail', 'cheetahmail.api');

  $request_time = time();

  if (empty($campaign_id) || !is_numeric($campaign_id)) {
    // watchdog();
    return FALSE;
  }

  // Check if the campaign is finished.
  if (cheetahmail_api_get_helper()->_is_campaign_finished($campaign_id)) {
    // Duplicate campaign.
    $campaign_id = cheetahmail_api_get_helper()->ems_campaigns_DuplicateCampaign($campaign_id);
  }

  // Get new message.
  $message = variable_get('experian/cheetahmail/nl/message_params', array());
  // Prepeare and validate the message.
  if (!cheetahmail_nl_prepeare_campaign_message($message)) {
    drupal_set_message(t("Can't prepeare Newsletter content. Please check configuration."), $type = 'error');
    return;
  }

  // Update Campaing message.
  $res = cheetahmail_api_get_helper()->ems_campaigns_UpdateMessage($campaign_id, $message);
  if (empty($res)) {
    drupal_set_message(t("Unknown error: Can't update Newsletter message in Cheetahmail EMS."), $type = 'error');
    return;
  }

  // Start Campaign.
  $res = cheetahmail_api_get_helper()->ems_campaigns_Start($campaign_id);
  if (empty($res)) {
    drupal_set_message(t("Unknown error: Can't start Newsletter campaign."), $type = 'error');
    return;
  }

  if ($update_lasttime_sent) {
    variable_set('cheetahmail_nl_sent_lasttime', $request_time);
  }
  drupal_set_message(t("The Newsletter was sent."), $type = 'status');
  return $res;
}

/**
 * Prepeare content of the NL canpaign message
 */
function cheetahmail_nl_prepeare_campaign_message(&$message) {
  global $base_url;

  module_load_include('inc', 'cheetahmail', 'cheetahmail.api');

  $base_tag = format_string('<base href="!base/" target="_blank" />', array('!base' => $base_url));

  if (!is_array($message)) {
    return FALSE;
  }

  $default_message = array(
    'subject'  => '',
    'format'   => 1,
    'priority' => 3,
    'htmlSrc'  => '',
    'txtSrc'   => '',
  );

  $message = array_merge($default_message, $message);

  $content = cheetahmail_nl_get_content($type = variable_get('cheetahmail_nl_contenttype'), $items_per_page = variable_get('cheetahmail_nl_numitems'));

  if (empty($content) && (FALSE !== strpos($message['htmlSrc'], '[view:CHEETAHMAIL_NL_CONTENT]'))) {
    watchdog('cheetahmail_nl', 'Error on NL Campaign Scheduling: There is no new content to send in Newsletter.', array(), WATCHDOG_DEBUG);
    drupal_set_message(t("There is no new content to send in Newsletter now."), $type = 'warning');
    return FALSE;
  }

  $content = _filter_htmlcorrector($content);
  $html_src = _filter_htmlcorrector($message['htmlSrc']);
  $content = strtr($html_src, array('[view:CHEETAHMAIL_NL_CONTENT]' => $content));

  // Protect against XSS.
  $html_content = filter_xss_admin($content);
  $message['htmlSrc'] = cheetahmail_api_get_helper()->trackBody($html_content, $is_html = TRUE);

  // TXT version is automatically generated based on the HTML version.
  $content_txt = $content;
  // Replace <a href="$link">$title</a> by '$title $link'.
  $content_txt = preg_replace_callback('/<a(( \w+=("|\')[^"\']*(\"|\'))*)>([^<]+)<\/a>/i', 'cheetahmail_nl_replace_links_with_plaintext', $content_txt);
  // Replace <br/> by '\r\n'.
  $content_txt = strtr($content_txt, array('<br/>' => "\r\n", '<br>' => "\r\n"));
  // Strip HTML tags.
  $content_txt = check_plain(decode_entities(strip_tags($content_txt)));

  $message['txtSrc'] = cheetahmail_api_get_helper()->trackBody($content_txt, $is_html = FALSE);
  $message['subject'] .= date("Y-m-d H:i");

  return TRUE;
}

/**
 * Renders NL inserted content (token [view:CHEETAHMAIL_NL_CONTENT])
 */
function cheetahmail_nl_get_content($type = CHEETAHMAIL_NL_CONTENT_POSTS, $items_per_page = 10) {
  $view = views_get_view(CHEETAHMAIL_NL_NEWSLETTER_CONTENT_VIEW);
  $view->init();

  $display = 'block';
  $type = intval($type);
  if (in_array($type, array(CHEETAHMAIL_NL_CONTENT_PAGES, CHEETAHMAIL_NL_CONTENT_POSTSANDPAGES))) {
    $display .= '_' . $type;
  }

  $view->set_display($display);

  if (!empty($items_per_page)) {
    if ($items_per_page == -1) {
      // Simulate Unlimited.
      $items_per_page = 9999;
    }
    $view->set_items_per_page($items_per_page);
  }

  // $view->set_arguments($args);
  $view->hide_admin_links = TRUE;
  $content = $view->render();

  if (empty($view->result) || 0 == count($view->result)) {
    // CHEETAHMAIL_NL_NEWSLETTER_CONTENT_VIEW has no new content to send.
    return NULL;
  }

  return $content;
}

/**
 * Implements hook_token_info().
 */
function cheetahmail_nl_token_info() {
  $types['cheetahmail-nl'] = array(
    'name' => t('Cheetahmail Newsletter'),
    'description' => t('Tokens related to the newsletter content'),
    // 'needs-data' => 'cheetahmail_nl',
  );

  // Tokens for simplenews subscriber.
  $nl_tokens['cheetahmail-nl:embedded-view-content'] = array(
    'name' => t('Cheetahmail Newsletter view content'),
    'description' => t('The content of the `Cheetahmail Newsletter` view embedded accoring to NL configuration into the Campaign content.'),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'cheetahmail-nl' => $nl_tokens,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function cheetahmail_nl_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }

  switch ($type) {
    case 'cheetahmail-nl':
      foreach ($tokens as $name => $original) {
        switch ($name) {
          // Simple key values on the node.
          case 'cheetahmail-nl:embedded-view-content':
            $replacements[$original] = cheetahmail_nl_get_content($type = variable_get('cheetahmail_nl_contenttype'), $items_per_page = variable_get('cheetahmail_nl_numitems'));
            break;
        }
      }

      if (($user_tokens = token_find_with_prefix($tokens, 'user')) && !empty($subscriber->uid)) {
        $replacements += token_generate('user', $user_tokens, array('user' => user_load($subscriber->uid)), $options);
      }

      break;
  }

  return $replacements;
}

/**
 * Implements hook_cron().
 *
 * Check if scheduling is enabled and if it comes the time to send new NL.
 */
function cheetahmail_nl_cron() {
  $interval = variable_get('cheetahmail_nl_sending_interval');
  if (variable_get('cheetahmail_nl_send') != CHEETAHMAIL_NL_SEND_SCHEDULED || empty($interval) || !variable_get('experian/cheetahmail/isactivated', FALSE)) {
    // Scheduling is disabled.
    return;
  }

  // Get the newsletters that need to be sent at this time.
  $now_time = REQUEST_TIME;

  // Get the time when the next sending is scheduled.
  $campaign_id = variable_get('experian/cheetahmail/nl/campaign_id');
  $record = db_select('cheetahmail_campaigns', 'cc_list')
    ->fields('cc_list', array(
      'campaign_id',
      'status',
      'startedat',
      'is_finished',
      ))
    ->condition('parent_id', $campaign_id, '=')
    ->condition('is_finished', 1, '=')
    ->orderBy('startedat', 'DESC')
    ->execute()
    ->fetchAssoc();
  if (empty($record['startedat'])) {
    watchdog('cheetahmail_nl', 'Error on NL Campaign Scheduling: Nor campaign has started yet.', array(), WATCHDOG_DEBUG);
    return;
  }

  $scheduled_timestamp = $record['startedat'] + variable_get('cheetahmail_nl_sending_interval') * 24 * 3600;

  $cheetahmail_nl_start = array(
    'month_day' => NULL,
    'week_day'=> NULL,
    'start_hour' => NULL,
  );
  $cheetahmail_nl_start = array_merge($cheetahmail_nl_start, variable_get('cheetahmail_nl_start', array()));
  $wish_date = $now_time;
  $week_days = date_week_days();
  switch (variable_get('cheetahmail_nl_sending_interval')) {
    case '1':
      $wish_date = mktime($cheetahmail_nl_start['start_hour'], 0, 0, date("m"), date("d"), date("Y"));
      break;

    case '7':
      $wish_date = strtotime("last " . $week_days[$cheetahmail_nl_start['week_day'] - 1] . " " . $cheetahmail_nl_start['start_hour'] . ":00:00");
      break;

    case '30':
      $wish_date = mktime($cheetahmail_nl_start['start_hour'], 0, 0, date("m"), $cheetahmail_nl_start['start_hour'], date("Y"));
      break;
  }

  if (($now_time > $wish_date) && ($record['startedat'] < $wish_date)) {
    // Send it.
    cheetahmail_nl_send_campaign($campaign_id = variable_get('experian/cheetahmail/nl/campaign_id'), TRUE);
  }
}

/**
 * Stop sending NL campaign.
 */
function cheetahmail_nl_campaign_stop($campaign_id) {
  $result = db_select('cheetahmail_campaigns', 'cc_list')
      ->fields('cc_list', array(
        'campaign_id',
        'status',
        'startedat',
        'is_finished',
        ))
      ->condition('parent_id', $campaign_id, '=')
      ->condition('status', EMS_CHEETAHMAIL_CAMPAIGN_TERMINE_STATE, '=')
      ->execute();
  while ($record = $result->fetchAssoc()) {
    // Do smthng if required.
  }
  drupal_set_message(t("The Newsletter campaign has been stopped."), $type = 'status');
}

/**
 * Implements hook_cheetahmail_activated().
 * This hook is called from cheetahmail module
 * when the module API settings are set-up.
 */
function cheetahmail_nl_cheetahmail_activated() {
  if (!variable_get('experian/cheetahmail/isactivated', FALSE)) {
    return FALSE;
  }

  // Default NewsLetter content.
  $message_params = variable_get('experian/cheetahmail/nl/message_params', NULL);
  // Translation function.
  $t = function_exists('t') ? 't' : 'st';
  if (empty($message_params)) {
    $message_params = array(
      'subject' => $t('NewsLetter (@site)', array('@site' => variable_get('site_name'))),
      'format' => 1,
      'priority' => 3,
      'htmlSrc' => $t('<h1>Newsletter <a href="!url">@site</a></h1><br/>[view:CHEETAHMAIL_NL_CONTENT]', array(
        '!url' => url('<front>', array('absolute' => TRUE)),
        '@site' => variable_get('site_name'),
        )),
      'txtSrc' => '',
    );
    variable_set('experian/cheetahmail/nl/message_params', $message_params);
  }

  $config_id = variable_get('experian/cheetahmail/nl/config_id', FALSE);
  if (empty($config_id)) {
    $config_id = cheetahmail_api_get_helper()->create_campaign_configs();
    variable_set('experian/cheetahmail/nl/config_id', $config_id);
  }

  $domains = cheetahmail_api_get_helper()->ems_configs_ListDomain();
  $domain_id = key($domains);

  // Set Config's Domain.
  cheetahmail_api_get_helper()->ems_configs_SetDomain($config_id, $domain_id);

  $list_unsubscribe = cheetahmail_api_get_helper()->_get_default_listUnsubscribe($config_id, TRUE);

  $filter_id = variable_get('experian/cheetahmail/nl/filter_id', FALSE);
  if (empty($filter_id)) {
    $filter_id = cheetahmail_api_get_helper()->create_filter();
    variable_set('experian/cheetahmail/nl/filter_id', $filter_id);
  }

  // NL Campaign.
  $campaign_id = variable_get('experian/cheetahmail/nl/campaign_id', NULL);
  if (empty($campaign_id)) {
    $campaign_id = cheetahmail_api_get_helper()->ems_campaigns_Create($description = 'NL Campaign (' . url('<front>', array('absolute' => TRUE)) . ')',
      $filter_id,
      $config_id,
      $message_params
    );
    variable_set('experian/cheetahmail/nl/campaign_id', $campaign_id);
  }

  // NL Campaign for testing.
  $test_filter_id = variable_get('experian/cheetahmail/nl/test_filter_id', NULL);
  if (empty($test_filter_id)) {
    $test_filter_id = cheetahmail_api_get_helper()->create_filter($filter_fields = array(
      'IdField' => EMS_CHEETAHMAIL_SUBSCRIBER_IDUSER_FIELD_ID,
      'Operation' => 'EQUAL',
      'Value' => EMS_CHEETAHMAIL_DEFAULT_SUBSCRIBER,
      ));
    variable_set('experian/cheetahmail/nl/test_filter_id', $test_filter_id);
  }
  $test_campaign_id = variable_get('experian/cheetahmail/nl/test_campaign_id', NULL);
  if (empty($test_campaign_id)) {
    $test_campaign_id = cheetahmail_api_get_helper()->ems_campaigns_Create($description = 'TEST-NL Campaign (' . url('<front>', array('absolute' => TRUE)) . ')',
      $test_filter_id,
      $config_id,
      $message_params
    );
    variable_set('experian/cheetahmail/nl/test_campaign_id', $test_campaign_id);
  }
}

/**
 * Helper for preg_replace_callback
 * to replace links in html text with $label ( $href )
 */
function cheetahmail_nl_replace_links_with_plaintext($regs) {
  $attributes = $regs[1];
  $label = end($regs);
  if (preg_match('/href=("|\')([^"\']*)("|\')/i', $attributes, $regs)) {
      $href = $regs[2];
      return "$label ( $href )";
  }
  else {
      // No href available.
      return "$label (no link!)";
  }
}
