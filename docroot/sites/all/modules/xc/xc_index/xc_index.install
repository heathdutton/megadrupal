<?php
/**
 * @file
 * Installation functions for the XC Index module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_install().
 */
function xc_index_install() {
  variable_set('xc_index_facet_defaults_installed', XC_INSTALLED);
  variable_set('xc_index_field_to_facet_defaults_installed', XC_INSTALLED);
  variable_set('xc_index_attribute_to_field_defaults_installed', XC_INSTALLED);
  variable_set('xc_index_field_type_defaults_installed', XC_INSTALLED);
  variable_set('xc_index_super_location_defaults_installed', XC_INSTALLED);
  variable_set('xc_index_sortable_field_defaults_installed', XC_INSTALLED);
  variable_set('xc_index_definition_modification_time', time());
}

/**
 * Implements hook_uninstall().
 */
function xc_index_uninstall() {
  variable_del('xc_index_facet_defaults_installed');
  variable_del('xc_index_field_to_facet_defaults_installed');
  variable_del('xc_index_attribute_to_field_defaults_installed');
  variable_del('xc_index_field_type_defaults_installed');
  variable_del('xc_index_super_location_defaults_installed');
  variable_del('xc_index_sortable_field_defaults_installed');
  variable_del('xc_index_definition_modification_time');
}

/**
 * Implements hook_schema().
 */
function xc_index_schema() {

  // xc_index_field_type
  $schema['xc_index_field_type'] = array(
    'description' => 'Field - Solr type connection.',
    'fields' => array(
      'field_type_id' => array(
        'description' => 'The identifier of field type map.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'metadata_schema' => array(
        'description' => 'The name of the metadata schema.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'field' => array(
        'description' => 'The name of field.',
        'type' => 'varchar',
        'length' => '98',
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type of field.',
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'field_type_id' => array('field_type_id'),
      'metadata_schema' => array('metadata_schema'),
      'mf' => array('metadata_schema', 'field'),
      'mft' => array('metadata_schema', 'field', 'type'),
    ),
    'primary key' => array('field_type_id'),
  );

  // xc_index_attribute_to_field
  $schema['xc_index_attribute_to_field'] = array(
    'description' => 'Solr Field - schema attribute connection.',
    'fields' => array(
      'atof_id' => array(
        'description' => 'The identifier of schema attribute - Solr field map.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'metadata_schema' => array(
        'description' => 'The name of the metadata schema.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'entity' => array(
        'description' => 'The name of the entity.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'schema_field' => array(
        'description' => 'The name of field.',
        'type' => 'varchar',
        'length' => '98',
        'not null' => TRUE,
        'default' => '',
      ),
      'attribute' => array(
        'description' => 'The name of attribute.',
        'type' => 'varchar',
        'length' => '98',
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type of attribute handling.',
        'type' => 'varchar',
        'length' => '20',
        'not null' => TRUE,
        'default' => '',
      ),
      'solr_field' => array(
        'description' => 'The name of field in Solr.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'field_type_id' => array('atof_id'),
      'type' => array('type'),
      'me' => array('metadata_schema', 'entity'),
      'mesa' => array('metadata_schema', 'entity', 'schema_field', 'attribute'),
    ),
    'primary key' => array('atof_id'),
  );

  // xc_index_facet
  $schema['xc_index_facet'] = array(
    'description' => 'A facet',
    'fields' => array(
      'facet_id' => array(
        'description' => 'The identifier of facet.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine name of facet.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The human readable name of facet.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'A Solr dynamic type of facet.',
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
        'default' => '',
      ),
      'is_conditional' => array(
        'description' => 'Is the facet based on conditions?',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'conditions' => array(
        'description' => 'The appliable conditions',
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
      ),
      'enabled' => array(
        'description' => 'Is the facet enabled?',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'facet_id' => array('facet_id'),
      'name' => array('name'),
      'is_conditional' => array('is_conditional'),
      'ni' => array('name', 'is_conditional'),
      'enabled' => array('enabled'),
    ),
    'primary key' => array('facet_id'),
  );

  // xc_index_field_to_facet
  $schema['xc_index_field_to_facet'] = array(
    'description' => 'Mapping of field to facet.',
    'fields' => array(
      'ftof_id' => array(
        'description' => 'The identifier of a mapping.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'field' => array(
        'description' => 'Field name.',
        'type' => 'varchar',
        'length' => '98',
        'not null' => TRUE,
        'default' => '',
      ),
      'facet' => array(
        'description' => 'Facet name.',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'ftof_id' => array('ftof_id'),
      'facet' => array('facet'),
      'field' => array('field'),
      'ff' => array('facet', 'field'),
    ),
    'primary key' => array('ftof_id'),
  );

  // xc_index_super_location
  $schema['xc_index_super_location'] = array(
    'description' => 'Mapping holding records super location abbreviation codes and labels.',
    'fields' => array(
      'id' => array(
        'description' => 'The identifier of a mapping.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'code' => array(
        'description' => 'Location code',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The display name',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
      'code' => array('code'),
    ),
    'primary key' => array('id'),
  );

  // xc_index_sortable_field
  $schema['xc_index_sortable_field'] = array(
    'description' => 'Sortable fields.',
    'fields' => array(
      'field' => array(
        'description' => 'Field name.',
        'type' => 'varchar',
        'length' => '98',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'field' => array('field'),
    ),
    'primary key' => array('field'),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 *
 * Runs when the user enable the module
 */
function xc_index_enable() {

  $run_update_message = FALSE;
  if (module_exists('xc_util')) {
    $path = drupal_get_path('module', 'xc_index') . '/import/';

    if (variable_get('xc_index_facet_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      if (variable_get('xc_search_facet_defaults_installed', XC_UNINSTALLED) == XC_LOADED) {
        $run_update_message = TRUE;
        $sql = 'INSERT INTO {xc_index_facet} SELECT * FROM {xc_search_facet}';
        // TODO Please convert this statement to the D7 database API syntax.
        /* db_query($sql) */
        $result = NULL;
      }
      else {
        $filename = $path . 'xc_index_facet.xml';
        xc_util_bulk_insert('xc_index_facet', xc_util_xmldump_to_records($filename));
      }
      variable_set('xc_index_facet_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_index_field_to_facet_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      if (variable_get('xc_search_field_to_facet_defaults_installed', XC_UNINSTALLED) == XC_LOADED) {
        $run_update_message = TRUE;
        $sql = 'INSERT INTO {xc_index_field_to_facet} SELECT * FROM {xc_search_field_to_facet}';
        // TODO Please convert this statement to the D7 database API syntax.
        /* db_query($sql) */
        $result = NULL;
      }
      else {
        $table = 'xc_index_field_to_facet';
        xc_util_bulk_insert($table, xc_util_csv2objects($path . $table . '.csv'));
      }
      variable_set('xc_index_field_to_facet_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_index_attribute_to_field_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      if (variable_get('xc_search_attribute_to_field_defaults_installed', XC_UNINSTALLED) == XC_LOADED) {
        $run_update_message = TRUE;
        $sql = 'INSERT INTO {xc_index_attribute_to_field} SELECT * FROM
          {xc_search_attribute_to_field}';
        // TODO Please convert this statement to the D7 database API syntax.
        /* db_query($sql) */
        $result = NULL;
      }
      else {
        $table = 'xc_index_attribute_to_field';
        xc_util_bulk_insert($table, xc_util_csv2objects($path . $table . '.csv'));
      }
      variable_set('xc_index_attribute_to_field_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_index_field_type_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      if (variable_get('xc_search_field_type_defaults_installed', XC_UNINSTALLED) == XC_LOADED) {
        $run_update_message = TRUE;
        $sql = 'INSERT INTO {xc_index_field_type} SELECT * FROM {xc_search_field_type}';
        // TODO Please convert this statement to the D7 database API syntax.
        /* db_query($sql) */
        $result = NULL;
      }
      else {
        $table = 'xc_index_field_type';
        xc_util_bulk_insert($table, xc_util_csv2objects($path . $table . '.csv'));
      }
      variable_set('xc_index_field_type_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_index_super_location_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $table = 'xc_index_super_location';
      xc_util_bulk_insert($table, xc_util_csv2objects($path . $table . '.csv'));
      variable_set('xc_index_super_location_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_index_sortable_field_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $table = 'xc_index_sortable_field';
      xc_util_bulk_insert($table, xc_util_csv2objects($path . $table . '.csv'));
      variable_set('xc_index_sortable_field_defaults_installed', XC_LOADED);
    }
  }
  if ($run_update_message === TRUE) {
    drupal_set_message(t('Please run update.php, because we should update the XC Search module in order to run smoothly.'), 'warning');
  }
}
