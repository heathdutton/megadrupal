<?php
/**
 * @file
 * XC OAI-DC schema functions
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implementation of hook_help()
 * @param $path
 * @param $arg
 * @return unknown_type
 */
function xc_oai_dc_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#xc_oai_dc" :
      $output = '<p>'. t('This module helps importing Dublin Core (oai_dc) schema records into eXtensible Catalog (XC) System') .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_xc_build()
 */
function xc_oai_dc_xc_build(&$object, $format, $params = array()) {
  switch ($format) {
    case 'oai_dc':
      // Make sure XML and metadata arrays are always arrays
      $array = $metadata = array();

      require_once drupal_get_path('module', 'xc_metadata') . '/includes/xml_to_array.inc';
      if (is_string($object->raw)) {
        $array = xml_to_array($object->raw);
      }
      elseif ($object->raw instanceof DOMElement) {
        require_once drupal_get_path('module', 'xc_metadata') . '/includes/dom_to_array.inc';
        $array = dom_to_array($object->raw);
      }
//      else {
//        // would like to not use this method eventually
//        $object->metadata = $params['metadata'];
//        $metadata         = $object->metadata; //isset($array[0])        ? $array[0]        : $array;
//      }
//
//      $elements = find_array_element_by_key('oai_dc:dc', $array);
//      $metadata = isset($elements[0]) ? $elements[0] : $elements;

      $entities = find_array_element_by_key('oai_dc:dc', $array);
      if (empty($entities)) {
        $metadata = $array;
      }
      else {
        $metadata = isset($entities[0]) ? $entities[0] : $entities;
      }

      $object->metadata_type = 'oai_dc';

      // Clean up metadata array of all root element attributes
      if (is_array($metadata)) {
        foreach ($metadata as $key => $value) {
//          if ($key == '@type' || $key == '@id') {
//            continue;
//          } else
          if (substr($key, 0, 1) == '@') {
            unset($metadata[$key]);
          }
        }
      }

      // If identifier is empty, try to assign it as the DC identifier field
      if (empty($object->identifier)) {
        $object->identifier = is_array($metadata['dc:identifier'])
                            ? $metadata['dc:identifier'][0]['#value']
                            : $metadata['dc:identifier']['#value'];
      }

      $object->built = TRUE;
      return $metadata;
      break;
  }
}

/**
 * Implementation of hook_xc_transform()
 */
function xc_oai_dc_xc_transform(&$object, $format, $params = array()) {
  switch ($format) {
    case 'oai_dc':
      $metadata = $object->metadata;
      require_once drupal_get_path('module', 'xc_metadata') . '/includes/xc_metadata.format.inc';
      $_format = xc_format_get($format);
      $definition = xc_metadata_entity_get($object->metadata_type);
      $namespaces = $definition->get_namespaces();
      $namespaces[] = xc_metadata_namespace_get('xsi');
      foreach ($namespaces as $namespace) {
        $attr = 'xmlns:'. $namespace->prefix;
        $metadata["@$attr"] = $namespace->uri;
      }

      $metadata["@xsi:schemaLocation"] = $_format['schemaLocation'];
      $metadata["@xmlns:oai_dc"] = $_format['namespaceURI'];

      // removing 'type' and 'id' from root DC XML because they don't
      // belong there
      unset($metadata["@type"]);
      unset($metadata["@id"]);

      require_once drupal_get_path('module', 'xc_metadata') . '/includes/xml_to_array.inc';
      $xml = array_to_xml($metadata, 'oai_dc:dc');
      return $xml;
      break;
  }
}

/**
 * Implementation of hook_xc_format()
 * It gives information about the implemented format
 */
function xc_oai_dc_xc_format() {
  $format['oai_dc'] = array(
    'name'               => t('Dublin Core'),
    'description'        => t('Dublin Core schema in XML'),
    'entities'           => array('oai_dc'),
    'module'             => 'xc_oai_dc',
    'help'               => t(''),
    'download'           => TRUE,
    'upload'             => TRUE,
    'file extension'     => 'xml',
    'content type'       => 'text/xml',
    'namespaceURI'       => 'http://www.openarchives.org/OAI/2.0/oai_dc',
    'schemaLocation'     => 'http://www.openarchives.org/OAI/2.0/oai_dc/'
                          . ' http://www.openarchives.org/OAI/2.0/oai_dc.xsd',
    'root element'       => 'oai_dc:dc',
  );
  return $format;
}

/**
 * Implementation of hook_xc_schema()
 */
function xc_oai_dc_xc_schema() {
  $schema['oai_dc'] = array(
    'title' => t('Dublin Core'),
    'description' => t('OAI implementation of <em>Dublin Core</em>, a vocabulary of fifteen properties for use in resource description.'),
    'fields' => array(
      'dc:title' => array(),
      'dc:creator' => array(),
      'dc:subject' => array(),
      'dc:description' => array(),
      'dc:publisher' => array(),
      'dc:contributor' => array(),
      'dc:date' => array(),
      'dc:type' => array(),
      'dc:format' => array(),
      'dc:identifier' => array(),
      'dc:source' => array(),
      'dc:language' => array(),
      'dc:relation' => array(),
      'dc:coverage' => array(),
      'dc:rights' => array(),
    ),
    'namespaces' => array(
      'oai_dc' => array(
        'uri' => 'http://www.openarchives.org/OAI/2.0/oai_dc/',
        'title' => t(''),
        'description' => t('')
      ),
      'dc' => array(
        'uri' => 'http://purl.org/dc/elements/1.1/',
        'title' => t(''),
        'description' => t('')
      ),
      'xsi' => array(
        'uri' => 'http://www.w3.org/2001/XMLSchema-instance',
        'title' => t(''),
        'description' => t('')
      ),
    ),
  );

  return $schema;
}
