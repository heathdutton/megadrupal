<?php
/**
 * @file
 * Drupal install file for OAI-PMH harvester module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_schema().
 *
 * Descripbes the database structure
 */
function oaiharvester_schema() {

  $schema['oaiharvester_providers'] = array(
    'description' => t('Table that holds information about remote OAI-PHM data providers'),
    'fields' => array(
      'provider_id' => array(
        'description' => t('The primary identifier for the repository'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'name' => array(
        'description' => t('The name of the repository.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'server_name' => array(
        'description' => t('The name of the repository given by the provider itself.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'oai_provider_url' => array(
        'description' => t('URL of the server.'),
        'type' => 'text',
        'size' => 'small',
        'not null' => TRUE
      ),
      'description' => array(
        'description' => t('Textual description of the repository, the nature of content.'),
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE
      ),
      'admin_email' => array(
        'description' => t('Email of server administrator.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'admin_phone' => array(
        'description' => t('Phone number of server administrator.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'is_service_ready' => array(
        'description' => t('Is the service ready to harvest?'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'created_at' => array(
        'description' => t('When this provider were created'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'updated_at' => array(
        'description' => t('When this provider were updated.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'last_harvest_end_time' => array(
        'description' => t('Latest end date of a successfull selective harvest.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'earliest_start_date_harvested' => array(
        'description' => t('Earliest start date of a successfull selective harvest.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'last_harvest_date' => array(
        'description' => t('Last date when this provider were harvested.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'last_validated' => array(
        'description' => t('The last time the provider was validated.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'protocol_version' => array(
        'description' => t('Which OAI-PMH protocol does the provider support.'),
        'type' => 'varchar',
        'length' => 10,
        'not null' => FALSE
      ),
      'granularity' => array(
        'description' => t('The finest harvesting granularity supported by the repository (the pattern of from and until parameters).'),
        'type' => 'varchar',
        'length' => 22,
        'not null' => FALSE,
        'default' => 'YYYY-MM-DDThh:mm:ssZ',
      ),
      'deleted_record' => array(
        'description' => t('The manner in which the repository supports the notion of deleted records (no, transient, or persistent).'),
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
      ),
      'has_identify' => array(
        'description' => t('Flag to indicate whether was the Identify verb request successful.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'has_list_metadata_formats' => array(
        'description' => t('Flag to indicate whether was the ListMetadataFormats verb request successful.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'has_list_sets' => array(
        'description' => t('Flag to indicate whether was the ListSets verb request successfull.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'records_added' => array(
        'description' => t('The number of new records harvested from the provider accross all harvest events.'),
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
        'default' => 0
      ),
      'records_added' => array(
        'description' => t('The the number of updated or deleted records which were harvested.'),
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
        'default' => 0
      ),
      'errors' => array(
        'description' => t('The the number of error messages.'),
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
        'default' => 0
      ),
      'warnings' => array(
        'description' => t('The the number of warning messages.'),
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
        'default' => 0
      ),
      'user_id' => array(
        'description' => t('The user, who added this provider.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'last_oai_request' => array(
        'description' => t('The last OAI-PMH request.'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE
      ),
      'oai_identifier' => array(
        'description' => t('Content of the Identify verb\'s oai-identifier element. It includes scheme, repositoryIdentifier, delimiter, sampleIdentifier keys.'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE
      ),
      'type' => array(
        'description' => t('Repository type.'),
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
        'default' => 'server'
      ),
    ),
    'indexes' => array(
      'provider_id' => array('provider_id'),
    ),
    'primary key' => array('provider_id'),
  );

  $schema['oaiharvester_formats_to_providers'] = array(
    'description' => t('The connector table between the OAI data provider (oaiharvester_providers) and the harvestable metadata formats (oaiharvester_formats).'),
    'fields' => array(
      'id' => array(
        'description' => t('The identifier of the format-data provider binding.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'format_id' => array(
        'description' => t('The id of the metadata format.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'provider_id' => array(
        'description' => t('The id of data provider.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
    ),
    'primary key' => array('id'),
  );

  $schema['oaiharvester_formats'] = array(
    'description' => t('Information about the harvestable metadata formats.'),
    'fields' => array(
      'format_id' => array(
        'description' => t('The primary identifier of a metadata format.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'name' => array(
        'description' => t('The name of supported format.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => ''
      ),
      'namespace' => array(
        'description' => t('The namespace of metadata format.'),
        'type' => 'text',
        'size' => 'tiny',
        'not null' => FALSE
      ),
      'schema_location' => array(
        'description' => t('The url of schema location.'),
        'type' => 'text',
        'size' => 'tiny',
        'not null' => FALSE
      ),
    ),
    'indexes' => array(
      'format_id' => array('format_id'),
    ),
    'primary key' => array('format_id'),
  );

  $schema['oaiharvester_harvester_schedules'] = array(
    'description' => t('Table that holds information about harvesting information (schedule)'),
    'fields' => array(
      'harvest_schedule_id' => array(
        'description' => t('The primary identifier for a schedule'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'schedule_name' => array(
        'description' => t('The name of the schedule.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'provider_id' => array(
        'description' => t('ID of the harvested server.'),
        'type' => 'int',
        'not null' => TRUE
      ),
      'recurrence' => array(
        'description' => t('Cron expression of the launch times.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'minute' => array(
        'description' => t('The minute part of the time.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE
      ),
      'hour' => array(
        'description' => t('The hour part of the time.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE
      ),
      'day_of_week' => array(
        'description' => t('The day of week part of the time.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE
      ),
      'start_date' => array(
        'description' => t('Minimal date of the harvestable records.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'end_date' => array(
        'description' => t('Maximal date of the harvestable records.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'notify_email_address' => array(
        'description' => t('The mail address to sent notifications.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'parsing_mode' => array(
        'description' => t('The mode of parsing OAI responses. There are two modes: dom and regex.'),
        'type' => 'varchar',
        'length' => '10',
        'not null' => FALSE,
        'default' => 'dom'
      ),
      'is_cacheable' => array(
        'description' => t('Do harvester chache responses?'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE
      ),
      'max_request' => array(
        'description' => t('The maximum number of OAI-PMH request. 0 means no limit. Use only for testing reasons.'),
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE
      ),
      'created_by' => array(
        'description' => t('The user, who created the schedule.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => ''
      ),
      'created_date' => array(
        'description' => t('The time when this schedule was created.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'status' => array(
        'description' => t('The state of schedule.'),
        'type' => 'varchar',
        'length' => '20',
        'not null' => FALSE,
        'default' => 'passive'
      ),
      'skip_main_task' => array(
        'description' => t('Skip main task, and run only additional steps (if any)'),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE
      ),
    ),
    'indexes' => array(
      'harvest_schedule_id' => array('harvest_schedule_id'),
    ),
    'primary key' => array('harvest_schedule_id'),
  );

  $schema['oaiharvester_sets'] = array(
    'description' => t('Information about the harvestable sets.'),
    'fields' => array(
      'set_id' => array(
        'description' => t('The unique identifier of the harvestable set.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'display_name' => array(
        'description' => t('The displayable name of the set.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'description' => array(
        'description' => t('The short description about the set\'s content.'),
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE
      ),
      'set_spec' => array(
        'description' => t('The OAI standard\'s set specification.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'is_provider_set' => array(
        'description' => t('Flag to indicate whether it is a provider set.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1
      ),
      'is_record_set' => array(
        'description' => t('Flag to indicate whether it is a record set.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'indexes' => array(
      'set_id' => array('set_id'),
    ),
    'primary key' => array('set_id'),
  );

  $schema['oaiharvester_sets_to_providers'] = array(
    'description' => t('The connector table between the OAI data provider (oaiharvester_providers) and the harvestable metadata formats (oaiharvester_sets).'),
    'fields' => array(
      'id' => array(
        'description' => t('The identifier of a set-provider pair.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'set_id' => array(
        'description' => t('The identifier of a set to harvest.'),
        'type' => 'int',
        'not null' => FALSE
      ),
      'provider_id' => array(
        'description' => t('The identifier of a data provider to harvest from.'),
        'type' => 'int',
        'not null' => FALSE
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
    ),
    'primary key' => array('id'),
  );

  $schema['oaiharvester_harvest_schedule_steps'] = array(
    'description' => t('The connector table between the OAI schedules (oaiharvester_providers), the formats (oaiharvester_formats) and the metadata sets (oaiharvester_sets). Gives information about the last run of the current step.'),
    'fields' => array(
      'step_id' => array(
        'description' => t('The identifier of a set-provider pair.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'schedule_id' => array(
        'description' => t('The identifier of a schedule.'),
        'type' => 'int',
        'not null' => TRUE
      ),
      'format_id' => array(
        'description' => t('The identifier of a format to harvest.'),
        'type' => 'int',
        'not null' => TRUE
      ),
      'set_id' => array(
        'description' => t('The identifier of a set to harvest.'),
        'type' => 'int',
        'not null' => FALSE
      ),
      'last_ran' => array(
        'description' => t('The time of last schedule finished.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
    ),
    'indexes' => array(
      'step_id' => array('step_id'),
    ),
    'primary key' => array('step_id'),
  );

  $schema['oaiharvester_harvest_queue'] = array(
    'description' => t('Information about the actual harvest schedules.'),
    'fields' => array(
      'harvest_id' => array(
        'description' => t('The identifier of the queue row.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'inserted_at' => array(
        'description' => t('When this item were created'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'provider_url' => array(
        'description' => t('The base URL of OAI service.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'set_name' => array(
        'description' => t('The actual set to harvest.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'metadata_prefix' => array(
        'description' => t('The actual metadata format to harvest.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'from_date' => array(
        'description' => t('The selective harvesting\'s form parameter (the modification date of the oldest record to harvest).'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'until_date' => array(
        'description' => t('The selective harvesting\'s until parameter (the modification date of the latest record to harvest).'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'start_time' => array(
        'description' => t('The start time of harvesting.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'end_time' => array(
        'description' => t('The end time of harvesting.'),
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => FALSE
      ),
      'harvest_schedule_id' => array(
        'description' => t('The identifier of the correspondent schedule.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE
      ),
      'status' => array(
        'description' => t('The status of the queue item: passive (=0) or active (=1).'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'parsing_mode' => array(
        'description' => t('The mode of parsing OAI responses. There are two modes: dom and regex.'),
        'type' => 'varchar',
        'length' => '10',
        'not null' => FALSE,
        'default' => 'dom'
       ),
    ),
    'indexes' => array(
      'harvest_id' => array('harvest_id'),
    ),
    'primary key' => array('harvest_id'),
  );

  $schema['oaiharvester_logs'] = array(
    'description' => t('Logging the harvester process.'),
    'fields' => array(
      'log_id' => array(
        'description' => t('The identifier of the log entry.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'harvest_id' => array(
        'description' => t('The identifier of the connected harvest in the queue.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'log_type' => array(
        'description' => t('The type of the log entry.'),
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE
      ),
      'log_level' => array(
        'description' => t('The severity level of the log entry.'),
        'type' => 'varchar',
        'length' => '10',
        'not null' => FALSE,
        'default' => 'INFO'
      ),
      'message' => array(
        'description' => t('The content of the enrty.'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE
      ),
    ),
    'indexes' => array(
      'log_id' => array('log_id'),
    ),
    'primary key' => array('log_id'),
  );

  $schema['oaiharvester_batch'] = array(
    'description' => t('Logging the harvester process.'),
    'fields' => array(
      'id' => array(
        'description' => t('The identifier of the batch entry.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'sets' => array(
        'description' => t('The serialized array of operations.'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE
      ),
      'reports' => array(
        'description' => t('The serialized content of reports.'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE
      ),
      'schedule_id' => array(
        'description' => t('The corresponding schedule identifier.'),
        'type' => 'int',
        'size' => 'medium',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => FALSE
      ),
      'status' => array(
        'description' => t('The status of batch.'),
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE
      ),
      'timestamp' => array(
        'description' => t('The time the record were created'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
    ),
    'indexes' => array(
      'log_id' => array('id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 *
 * Checking the requirements, and notify the user about different settings.
 *
 * @param $phase (String)
 */
function oaiharvester_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $has_curl = function_exists('curl_init');
    $has_domdocument = class_exists('DOMDocument');

    $requirements['oaiharvester_curl'] = array(
      'title' => t('cURL'),
      'value' => $has_curl ? t('Enabled') : t('Not found'),
    );
    if (!$has_curl) {
      $requirements['oaiharvester_curl']['severity'] = REQUIREMENT_ERROR;
      $requirements['oaiharvester_curl']['description'] = t('OAI harvester could not be installed because the PHP <a href="@curl_url">cURL</a> library is not available.',
        array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
    }

    $requirements['oaiharvester_php_domdocument'] = array(
      'title' => t('PHP DOMDocument class'),
      'value' => $has_domdocument ? t('Enabled') : t('Not found'),
    );
    if (!$has_domdocument) {
      $requirements['oaiharvester_php_domdocument']['severity'] = REQUIREMENT_ERROR;
      $requirements['oaiharvester_php_domdocument']['description'] = t('OAI harvester requires the DOMDocument class to be available. Please check the configure command at the <a href="@link-phpinfo">PHP info page</a>.',
        array('@link-phpinfo' => url('admin/reports/status/php')));
    }
    $provider_count = count(oaiharvester_provider_get_all_names());
    if ($provider_count == 0) {
      $requirements['oaiharvester'] = array(
        'title' => t('OAI-PMH providers'),
        'value' => t('No instances of OAI-PMH repository are on this system. Before harvesting you must first !add an OAI-PMH provider.',
          array('!add' => l(t('add'), 'admin/xc/harvester/repository/add'))),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function oaiharvester_install() {
  variable_set('oaiharvester_processing_cron', 'NOT_RUNNING');
}

/**
 * Implements hook_uninstall().
 */
function oaiharvester_uninstall() {
  variable_del('oaiharvester_processing_cron');
}

/**
 * Renaming variable processing_cron to oaiharvester_processing_cron
 */
function oaiharvester_update_7001() {
  $processing_cron = variable_get('processing_cron', 'NOT_RUNNING');
  variable_set('oaiharvester_processing_cron', $processing_cron);
  variable_del('processing_cron');
}
