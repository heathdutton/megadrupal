<?php
/**
 * @file
 * Installation file for NCIP module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_install().
 */
function ncip_install() {
  // Add NCIP connection timeouts
  variable_set('ncip_debugging', 0);
  variable_set('ncip_stateless_timeout', 600);
  variable_set('ncip_idle_timeout', 600);
  variable_set('ncip_waiting_timeout', 600);
  variable_set('ncip_processsing_timeout', 600);
}

/**
 * Implements hook_unistall().
 */
function ncip_uninstall() {
  // Remove connection timeouts
  variable_del('ncip_debugging');
  variable_del('ncip_stateless_timeout');
  variable_del('ncip_idle_timeout');
  variable_del('ncip_waiting_timeout');
  variable_del('ncip_processsing_timeout');
  variable_del('ncip_use_proxy');
  variable_del('ncip_proxy_type');
  variable_del('ncip_proxy_host');
  variable_del('ncip_proxy_port');
  variable_del('ncip_proxy_auth');
  variable_del('ncip_proxy_username');
  variable_del('ncip_proxy_password');
}

/**
 * Implements hook_schema().
 */
function ncip_schema() {
  $schema['ncip_application'] = array(
    'description' => 'NCIP application',
    'fields' => array(
      'namespace' => array(
        'type' => 'varchar',
        'description' => 'NCIP application namespace and primary identifier',
        'length' => 32,
        'not null' => TRUE,
      ),
      'profile' => array(
        'type' => 'varchar',
        'description' => 'NCIP implementation profile',
        'length' => 32,
      ),
      'version' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'NCIP protocol version supported',
        'length' => 2,
      ),
      'module' => array(
        'type' => 'varchar',
        'description' => 'Drupal module',
        'length' => 32,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'description' => 'NCIP application title',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'text',
        'description' => 'NCIP application description',
        'not null' => TRUE,
      ),
      'from_system_id' => array(
        'type' => 'text',
        'description' => 'NCIP system identifier for header',
        'size' => 'medium',
      ),
      'from_system_authentication' => array(
        'type' => 'varchar',
        'description' => 'NCIP system authentication for header',
        'length' => 255,
      ),
      'from_agency_id' => array(
        'type' => 'text',
        'description' => 'NCIP agency identifier for header',
        'size' => 'medium',
      ),
      'from_agency_authentication' => array(
        'type' => 'varchar',
        'description' => 'NCIP agency authentication for header',
        'length' => 255,
      ),
      'on_behalf_of_agency' => array(
        'type' => 'text',
        'description' => 'NCIP OnBehalfOfAgency information for header',
        'size' => 'medium',
      ),
      'application_profile_type' => array(
        'type' => 'text',
        'description' => 'NCIP ApplicaitonProfileType for header',
        'size' => 'medium',
      ),
    ),
    'primary key' => array('namespace'),
  );

  $schema['ncip_connection'] = array(
    'description' => 'NCIP connection',
    'fields' => array(
      'connection_id' => array(
        'type' => 'serial',
        'description' => 'Primary identifier for an NCIP connection',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'int',
        'description' => 'Describes whether this is an initiating or responding connection',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'protocol' => array(
        'type' => 'varchar',
        'description' => 'Describes whether this is an HTTP, HTTPS, or TCP connection',
        'length' => 5,
        'not null' => TRUE,
      ),
      'application' => array(
        'type' => 'varchar',
        'description' => 'Application namespace',
        'length' => 32,
        'not null' => TRUE,
      ),
      'state' => array(
        'type' => 'int',
        'description' => 'Describes whether this is idle, waiting, or processing',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'host' => array(
        'type' => 'varchar',
        'description' => 'Connecting application\'s hostname',
        'length' => 255,
        'not null' => TRUE,
      ),
      'port' => array(
        'type' => 'int',
        'description' => 'Connecting application\'s port',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'path' => array(
        'type' => 'text',
        'description' => 'Connecting application\'s path',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'timeout' => array(
        'type' => 'int',
        'description' => 'Request timeout',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'type' => 'int',
        'description' => 'Last connection activity timestamp',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'session' => array(
        'type' => 'text',
        'description' => 'Stored session variables and other information',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'cookies' => array(
        'type' => 'text',
        'description' => 'Stored cookies variables and other information',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'to_system_id' => array(
        'type' => 'varchar',
        'description' => 'NCIP system identifier for header',
        'length' => 255,
      ),
      'to_agency_id' => array(
        'type' => 'varchar',
        'description' => 'NCIP agency identifier for header',
        'length' => 255,
      ),
      'use_session' => array(
        'type' => 'int',
        'description' => 'Describes whether to store session data for this connection',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'use_cookies' => array(
        'type' => 'int',
        'description' => 'Describes whether to store cookies for this connection',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'last_modification' => array(
        'type' => 'int',
        'description' => 'Last modification of the connection object',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('connection_id'),
    'unique keys' => array(
      'connection_id_application' => array('connection_id', 'application'),
      'application_connection_id' => array('application', 'connection_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function ncip_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $has_curl = function_exists('curl_init');
    $has_domdocument = class_exists('DOMDocument');
    $has_simplexml = class_exists('SimpleXMLElement');

    $requirements['ncip_curl'] = array(
      'title' => t('cURL'),
      'value' => $has_curl ? t('Enabled') : t('Not found'),
    );
    if (!$has_curl) {
      $requirements['ncip_curl']['severity'] = REQUIREMENT_ERROR;
      $requirements['ncip_curl']['description'] = t('NCIP could not be installed because the PHP <a href="@curl_url">cURL</a> library is not available.',
        array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
    }

    $requirements['ncip_php_domdocument'] = array(
      'title' => t('PHP DOMDocument class'),
      'value' => $has_domdocument ? t('Enabled') : t('Not found'),
    );
    if (!$has_domdocument) {
      $requirements['ncip_php_domdocument']['severity'] = REQUIREMENT_ERROR;
      $requirements['ncip_php_domdocument']['description'] = t('NCIP requires the DOMDocument class to be available. Please check the configure command at the <a href="@link-phpinfo">PHP info page</a>.',
        array('@link-phpinfo' => url('admin/reports/status/php')));
    }

    $requirements['ncip_php_simplexml'] = array(
      'title' => t('PHP SimpleXMLElement class'),
      'value' => $has_simplexml ? t('Enabled') : t('Not found'),
    );
    if (!$has_simplexml) {
      $requirements['ncip_php_simplexml']['severity'] = REQUIREMENT_ERROR;
      $requirements['ncip_php_simplexml']['description'] = t('NCIP requires the SimpleXMLElement class to be available. Please check the configure command at the <a href="@link-phpinfo">PHP info page</a>.',
        array('@link-phpinfo' => url('admin/reports/status/php')));
    }
  }
  return $requirements;
}
