<?php
/**
 * @file
 * Implementation of the NISO Circulation Interchange Protocol (NCIP/Z39.83)
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_permission().
 */
function ncip_permission() {
  return array(
    'administer ncip' => array(
      'title' => t('administer ncip'),
      'description' => t('TODO Add a description for \'administer ncip\''),
    ),
  );
}

require_once ('lib/NCIPApplication.php');
require_once ('lib/NCIPConnection.php');
require_once ('lib/NCIPMessage.php');

define('NCIP_NO_MESSAGE', 0x0000);
define('NCIP_INITIATION_MESSAGE', 0x0001);
define('NCIP_RESPONSE_MESSAGE', 0x0002);

define('NCIP_EMPTY_ELEMENT', 0x0000);
define('NCIP_COMPLEX_ELEMENT', 0x0001);
define('NCIP_OPEN_SCHEME', 0x0002);
define('NCIP_CLOSED_SCHEME', 0x0003);

define('NCIP_DATETIME', 'dateTime');
define('NCIP_INTEGER', 'integer');
define('NCIP_NON_NEGATIVE_INTEGER', 'nonNegativeInteger');
define('NCIP_POSITIVE_INTEGER', 'positiveInteger');
define('NCIP_STRING', 'string');

define('NCIP_NO_SERVICE', 0x0000);
define('NCIP_LOOKUP_SERVICE', 0x0001);
define('NCIP_UPDATE_SERVICE', 0x0002);
define('NCIP_NOTIFICATION_SERVICE', 0x0003);

define('NCIP_USAGE_NONE', 0x0000);
define('NCIP_USAGE_ONE_AND_ONLY_ONE', 0x0001);
define('NCIP_USAGE_ONE_OR_MORE', 0x0002);
define('NCIP_USAGE_ZERO_OR_ONE', 0x0003);
define('NCIP_USAGE_ZERO_OR_MORE', 0x0004);
define('NCIP_USAGE_OR', 0x0005);
define('NCIP_USAGE_AND_OR', 0x0006);

/**
 * Implements hook_boot().
 */
function ncip_boot() {
  if (db_table_exists('{ncip_connection}')) {
    _ncip_destroy_inactive_connection();
  }
}

/**
 * Load profile include file
 */
function _ncip_include_profile($profile) {
  if (module_load_include('inc', 'ncip', 'profiles/' . $profile) === FALSE) {
    drupal_set_message(
      t('Cannot find NCIP profile. Check that the file %file exists in /xc/ncip/profiles.',
        array('%file' => $profile . '.inc')),
      'error'
    );
    return FALSE;
  }
  return TRUE;
}

/**
 * Load an NCIP profile type and all its dependency type's supported services,
 * data elements, and schemes into an array
 *
 * @param $profile
 *    Profile typename
 * @return
 *    An array containing basic information, services, data elements,
 *    and schemes supported by the NCIP profile
 */
function _ncip_load_profile($profile = 'ncip') {
  if (!_ncip_include_profile($profile)) {
    return FALSE;
  }

  $services = array();
  $data_elements = array();
  $schemes = array();

  // Get profile information
  // calling hook_ncip_info()
  // implementations: xc_ncip_info(), ncip_ncip_info()
  // $info may contains keys: name, description, required
  $info = call_user_func($profile . '_ncip_info');

  // Load all required profiles to get all dependencies
  $profiles = $info[$profile]['required'];
  $profiles[] = $profile;

  // Get services, data elements, and scheme definitions, first from
  // dependencies and then from the profile
  $types = array('services', 'data_elements', 'schemes');
  foreach ($profiles as $name) {
    if (!_ncip_include_profile($name)) {
      break;
    }

    foreach ($types as $type) {
      $function = $name . '_ncip_' . $type;
      if (function_exists($function)) {
        $array = $function($$type);
        $$type = array_merge($$type, $array[$name]);
      }
    }
  }

  // Place everything into the information array and return
  $info['services'] = $services;
  $info['data elements'] = $data_elements;
  $info['schemes'] = $schemes;

  return $info;
}

/**
 * Stream from resource directory
 *
 * @param $version
 *    NCIP version number
 * @param $type
 *    Resource type; either DTD or XSD
 */
function ncip_resource_load($filename) {
  $version = number_format($version, 1, '_', '_');
  $type = strtolower($type);

  if (!in_array($type, array('xml', 'dtd', 'xsd', 'scm'))) {
    return FALSE;
  }

  switch ($type) {
    case 'xml':
    case 'xsd':
    case 'dtd':
      header('Content-type: application/xml');
    case 'scm':
    default:
      header('Content-length: ' . strlen($resource));
  }

  echo $resource;
}

/**
 * Stream DOCTYPE or XML schema definition from resource directory
 *
 * @param $filename
 *    Resource file name
 */
function ncip_schema_load($filename) {
  if (preg_match('/^ncip_v([\d_]+)\.(dtd|xsd)$/', $filename)) {
    $resource = file_get_contents(drupal_get_path('module', 'ncip') . "/resources/$filename");
  }
}

/**
 * Stream schemes from resource directory
 *
 * @param $filename
 *    Resource filename
 */
function ncip_scheme_load($filename) {
  if (preg_match('/^\w+\.scm$/', $filename)) {
    $resource = file_get_contents(drupal_get_path('module', 'ncip') . "/resources/$filename");
  }
}

/**
 * Load NCIP profile information into object
 */
function ncip_profile_load($profile) {
  return (object) ncip_profile_get_info($profile);
}

/**
 * Get information from NCIP profile
 */
function ncip_profile_get_info($profile) {
  if (!_ncip_include_profile($profile)) {
    return FALSE;
  }
  $info = call_user_func($profile . '_ncip_info');
  return $info[$profile];
}

/**
 * Get information for all NCIP profiles
 */
function ncip_profile_get_all_info() {
  $profiles = array();
  $directory = drupal_get_path('module', 'ncip') . '/profiles';

  foreach (array_diff(scandir($directory), array('.', '..')) as $file) {
    if (is_file($directory . '/' . $file)
         && strtolower(substr($file, -4)) == '.inc') {
      $profile = drupal_substr($file, 0, -4);
      $profiles[$profile] = ncip_profile_get_info($profile);
    }
  }
  return $profiles;
}

/**
 * Check the timestamp for each connection and destroy the connection if it
 * has timed out
 */
function _ncip_destroy_inactive_connection() {
  $ncip_stateless_timeout =   variable_get('ncip_stateless_timeout', 600);
  $ncip_idle_timeout =        variable_get('ncip_idle_timeout', 600);
  $ncip_waiting_timeout =     variable_get('ncip_waiting_timeout', 600);
  $ncip_processsing_timeout = variable_get('ncip_processsing_timeout', 600);
  // TODO From Tom, need to check these queries
/*
  $sql = 'DELETE FROM {ncip_connection} WHERE state = %d AND (%d - timestamp) > %d';
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  // db_query($sql, NCIPConnection::NCIP_STATELESS, time(), $ncip_stateless_timeout)
  db_delete('ncip_connection')->where('state = %d AND (%d - timestamp) > %d')->execute();
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  // db_query($sql, NCIPConnection::NCIP_IDLE_STATE, time(), $ncip_idle_timeout)
  db_delete('ncip_connection')
    ->where('state = %d AND (%d - timestamp) > %d')->execute();
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  // db_query($sql, NCIPConnection::NCIP_WAITING_STATE, time(), $ncip_waiting_timeout)
  db_delete('ncip_connection')
    ->where('state = %d AND (%d - timestamp) > %d')->execute();
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  // db_query($sql, NCIPConnection::NCIP_PROCESSING_STATE, time(), $ncip_processsing_timeout)
  db_delete('ncip_connection')
    ->where('state = %d AND (%d - timestamp) > %d')->execute();
**/
// TODO: Need to convert this to D7
/*
$sql = 'DELETE FROM {ncip_connection} WHERE state = %d AND (%d - timestamp) > %d';
  db_query($sql, NCIPConnection::NCIP_STATELESS,        time(), $ncip_stateless_timeout);
  db_query($sql, NCIPConnection::NCIP_IDLE_STATE,       time(), $ncip_idle_timeout);
  db_query($sql, NCIPConnection::NCIP_WAITING_STATE,    time(), $ncip_waiting_timeout);
  db_query($sql, NCIPConnection::NCIP_PROCESSING_STATE, time(), $ncip_processsing_timeout);
*/
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ncip_menu() {

  $items['ncip/schemas/%'] = array(
    'title' => 'Delete',
    'description' => 'NCIP XML Schema or DTD',
    'page callback' => 'ncip_schema_load',
    'page arguments' => array(2),
    'access arguments' => FALSE,
    'type' => MENU_CALLBACK,
  );

  $items['ncip/schemes/%'] = array(
    'title' => 'Delete',
    'description' => 'NCIP Schemes',
    'page callback' => 'ncip_scheme_load',
    'page arguments' => array(2),
    'access arguments' => FALSE,
    'type' => MENU_CALLBACK,
  );

  $items['ncip/resource/%/%'] = array(
    'title' => 'Delete',
    'description' => 'NCIP Resource',
    'page callback' => 'ncip_resource_load',
    'page arguments' => array(2, 3),
    'access arguments' => FALSE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/xc'] = array(
    'title' => 'eXtensible Catalog (XC)',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer xc'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/xc/ncip'] = array(
    'title' => 'NCIP Servers',
    'description' => 'Administer NCIP connected servers',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer ncip'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 7,
  );

  $items['admin/xc/ncip/settings'] = array(
    'title' => 'Advanced NCIP Settings',
    'description' => 'Turn debugging on and off and manage connection timeouts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ncip_settings'),
    'access arguments' => array('administer ncip'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );

  $items['admin/xc/ncip/application'] = array(
    'title' => 'NCIP applications',
    'description' => 'Configure NCIP applications and their properties',
    'page callback' => 'ncip_application_list',
    'page arguments' => array(),
    'access arguments' => array('administer ncip'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );

  $items['admin/xc/ncip/application/list'] = array(
    'title' => 'List',
    'access arguments' => array('administer ncip'),
    'page callback' => 'ncip_application_list',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/xc/ncip/application/add'] = array(
    'title' => 'Add NCIP application',
    'access arguments' => array('administer ncip'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ncip_application_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/xc/ncip/application/%ncip_application'] = array(
    'title callback' => 'ncip_application_title',
    'title arguments' => array(4),
    'page callback' => 'ncip_application_view',
    'page arguments' => array(4),
    'access arguments' => array('administer ncip'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/xc/ncip/application/%ncip_application/view'] = array(
    'title' => 'View',
    'page callback' => 'ncip_application_view',
    'page arguments' => array(4),
    'access arguments' => array('administer ncip'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/xc/ncip/application/%ncip_application/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ncip_application_form', 4),
    'access arguments' => array('administer ncip'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/application/%ncip_application/delete'] = array(
    'title' => 'Delete NCIP application',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ncip_application_delete_form', 4),
    'access arguments' => array('administer ncip'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/xc/ncip/test'] = array(
    'title' => 'Delete NCIP application',
    'page callback' => 'ncip_testcall',
    'access arguments' => array('administer ncip'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * NCIP settings form
 */
function ncip_settings($form, &$form_state) {
  // TODO: move timeouts to NCIP providers
  $form['ncip_debugging'] = array(
    '#type' => 'radios',
    '#title' => t('NCIP Request and Response Debugging'),
    '#options' => array(
      1 => t('On'),
      0 => t('Off'),
    ),
    '#default_value' => variable_get('ncip_debugging', 0),
  );

  $form['proxy'] = array(
    '#type' => 'fieldset',
    '#title' => t('NCIP proxy'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Connect to NCIP via a HTTP or SOCKS proxy'),
  );

  $form['proxy']['ncip_use_proxy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use proxy to connect'),
    '#default_value' => variable_get('ncip_use_proxy', FALSE),
  );

  $form['proxy']['ncip_proxy_type'] = array(
    '#type' => 'radios',
    '#title' => t('Proxy type'),
    '#options' => array(
      'http' => t('HTTP'),
      'socks' => t('SOCKS'),
    ),
    '#default_value' => variable_get('ncip_proxy_type', 'http'),
  );

  $form['proxy']['ncip_proxy_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#default_value' => variable_get('ncip_proxy_host', 'localhost'),
  );

  $form['proxy']['ncip_proxy_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#default_value' => variable_get('ncip_proxy_port', '8080'),
  );

  $form['proxy']['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Proxy authenication'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['proxy']['auth']['ncip_proxy_auth'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#options' => array(
      '' => t('None'),
      'basic' => t('Basic'),
    ),
    '#default_value' => variable_get('ncip_proxy_auth', ''),
  );

  $form['proxy']['auth']['ncip_proxy_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('ncip_proxy_username', ''),
  );

  $form['proxy']['auth']['ncip_proxy_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('ncip_proxy_password', ''),
  );

  $form['timeouts'] = array(
    '#type' => 'fieldset',
    '#title' => t('NCIP timeouts'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['timeouts']['ncip_stateless_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Stateless timeout'),
    '#description' => t('For when NCIP connection has no state'),
    '#default_value' => variable_get('ncip_stateless_timeout', 600),
    '#size' => 20,
  );

  $form['timeouts']['ncip_idle_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Idle timeout'),
    '#description' => t('For when the NCIP connection is idle'),
    '#default_value' => variable_get('ncip_idle_timeout', 600),
    '#size' => 20,
  );

  $form['timeouts']['ncip_waiting_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Waiting timeout'),
    '#description' => t('For when NCIP connection is waiting'),
    '#default_value' => variable_get('ncip_waiting_timeout', 600),
    '#size' => 20,
  );

  $form['timeouts']['ncip_processsing_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Processing timeout'),
    '#description' => t('For when NCIP connection is processing a request or response'),
    '#default_value' => variable_get('ncip_processsing_timeout', 600),
    '#size' => 20,
  );

  return system_settings_form($form);
}

/**
 * NCIP application add form
 */
function ncip_application_form($form, &$form_state, $application = NULL) {
  $application = empty($application) ? new stdClass() : $application;

  $from_agency_id = $application instanceof NCIPApplication && is_array($application->get_from_agency_id())
                  ? $application->get_from_agency_id()
                  : array();
  $from_agency_authentication = $application instanceof NCIPApplication
                              ? $application->get_from_agency_authentication()
                              : NULL;
  $from_system_id = $application instanceof NCIPApplication && is_array($application->get_from_system_id())
                  ? $application->get_from_system_id()
                  : array();
  $from_system_authentication = $application instanceof NCIPApplication
                              ? $application->get_from_system_authentication()
                              : NULL;
  $on_behalf_of_agency = $application instanceof NCIPApplication && is_array($application->get_on_behalf_of_agency())
                       ? $application->get_on_behalf_of_agency()
                       : array();
  $application_profile_type = $application instanceof NCIPApplication && is_array($application->get_application_profile_type())
                            ? $application->get_application_profile_type()
                            : array();

  if ($application instanceof NCIPApplication) {
    $form['namespace'] = array(
      '#type' => 'hidden',
      '#value' => $application->get_namespace(),
      '#required' => TRUE,
    );

    $form['update'] = array(
      '#type' => 'hidden',
      '#value' => TRUE,
    );
  }
  else {
    $profile_options = array();
    foreach (ncip_profile_get_all_info() as $key => $profile) {
      $profile_options[$key] = $profile['name'];
    }

    $form['namespace'] = array(
      '#type' => 'textfield',
      '#title' => t('Namespace'),
      '#required' => TRUE,
    );

    $form['profile'] = array(
      '#type' => 'select',
      '#title' => t('Profile'),
      '#options' => $profile_options,
      '#default_value' => 'ncip',
      '#required' => TRUE,
    );

    $form['update'] = array(
      '#type' => 'hidden',
      '#value' => FALSE,
    );
  }

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $application->title,
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $application->description,
  );

  $form['from_agency_id'] = array(
    '#type' => 'fieldset',
    '#title' => t('From Agency Id'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['from_agency_id']['scheme'] = array(
    '#type' => 'textfield',
    '#title' => t('Scheme'),
    '#default_value' => isset($from_agency_id['scheme']) ? $from_agency_id['scheme'] : '',
  );

  $form['from_agency_id']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => isset($from_agency_id['value']) ? $from_agency_id['value'] : '',
    '#required' => TRUE,
  );

  $form['from_agency_authentication'] = array(
    '#type' => 'fieldset',
    '#title' => t('From Agency Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['from_agency_authentication']['from_agency_authentication'] = array(
    '#title' => t('From Agency Authentication'),
    '#type' => 'textfield',
    '#default_value' => $from_agency_authentication,
  );

  $form['from_system_id'] = array(
    '#type' => 'fieldset',
    '#title' => t('From System Id'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $form['from_system_id']['scheme'] = array(
    '#type' => 'textfield',
    '#title' => t('Scheme'),
    '#default_value' => isset($from_system_id['scheme']) ? $from_system_id['scheme'] : '',
  );

  $form['from_system_id']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => isset($from_system_id['value']) ? $from_system_id['value'] : '',
  );

  $form['from_system_authentication'] = array(
    '#type' => 'fieldset',
    '#title' => t('From System Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['from_system_authentication']['from_system_authentication'] = array(
    '#title' => t('From System Authentication'),
    '#type' => 'textfield',
    '#default_value' => $from_system_authentication,
  );

  $form['on_behalf_of_agency'] = array(
    '#type' => 'fieldset',
    '#title' => t('On Behalf of Agency'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $form['on_behalf_of_agency']['scheme'] = array(
    '#type' => 'textfield',
    '#title' => t('Scheme'),
    '#default_value' => isset($on_behalf_of_agency['scheme']) ? $on_behalf_of_agency['scheme'] : '',
  );

  $form['on_behalf_of_agency']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => isset($on_behalf_of_agency['value']) ? $on_behalf_of_agency['value'] : '',
  );

  $form['application_profile_type'] = array(
    '#type' => 'fieldset',
    '#title' => t('Application Profile Type'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $form['application_profile_type']['scheme'] = array(
    '#type' => 'textfield',
    '#title' => t('Scheme'),
    '#default_value' => isset($application_profile_type['scheme']) ? $application_profile_type['scheme'] : '',
  );

  $form['application_profile_type']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => isset($application_profile_type['value']) ? $application_profile_type['value'] : '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => ($application instanceof NCIPApplication) ? t('Save') : t('Add application'),
  );

  return $form;
}

/**
 * NCIP application add form validation
 */
function ncip_application_form_validate($form, &$form_state) { }

/**
 * NCIP application add form submission
 */
function ncip_application_form_submit($form, &$form_state) {
  $update = (boolean) $form_state['values']['update'];
  $namespace = check_plain($form_state['values']['namespace']);

  if (!$update) {
    $profile = $form_state['values']['profile'];
    $application = NCIPApplication::install($namespace, $profile, 'ncip', $title, $description);
  }
  if (!$application = NCIPApplication::load($form_state['values']['namespace'])) {
    form_set_error(NULL, t('Unexpected error. Cannot create or update NCIP application.'));
    return FALSE;
  }

  // Add new properties to application object
  $application->title = check_plain($form_state['values']['title']);
  $application->description = check_plain($form_state['values']['description']);

  $application->set_from_agency_id(
    check_plain($form_state['values']['from_agency_id']['scheme']),
    check_plain($form_state['values']['from_agency_id']['value'])
  );
  $application->set_from_agency_authentication(
    check_plain($form_state['values']['from_agency_authentication'])
  );
  $application->set_from_system_id(
    check_plain($form_state['values']['from_system_id']['scheme']),
    check_plain($form_state['values']['from_system_id']['value'])
  );
  $application->set_from_system_authentication(
    check_plain($form_state['values']['from_system_authentication'])
  );
  $application->set_on_behalf_of_agency(
    check_plain($form_state['values']['on_behalf_of_agency']['scheme']),
    check_plain($form_state['values']['on_behalf_of_agency']['value'])
  );
  $application->set_application_profile_type(
    check_plain($form_state['values']['application_profile_type']['scheme']),
    check_plain($form_state['values']['application_profile_type']['value'])
  );

  // Update application
  $application->update();

  // Go back to page afterwards
  $form_state['redirect'] = 'admin/xc/ncip/application';
}

/**
 * Load NCIP application object
 */
function ncip_application_load($namespace) {
  return NCIPApplication::load($namespace);
}

/**
 * Get NCIP application object
 * @see ncip_application_load()
 */
function ncip_application_get($namespace) {
  return ncip_application_load($namespace);
}

/**
 * Retrieve all NCIP applications
 */
function ncip_application_get_all($update = FALSE) {
  $sql = 'SELECT namespace FROM {ncip_application}';
  $result = db_query($sql);

  $applications = array();
  //while ($application = db_fetch_object($result)) {
  while ($application = $result->fetchObject()) {
    $applications[$application->namespace] = NCIPApplication::load($application->namespace);
  }
  return $applications;
}

/**
 * Return NCIP application title for page
 */
function ncip_application_title($application) {
  return $application->title;
}

/**
 * List all NCIP applications
 */
function ncip_application_list() {
  $header = array(t('Title'), t('NCIP version'), array(
      'data' => t('Operations'),
      'colspan' => 3,
    ));
  $rows = array();
  $applications = ncip_application_get_all();

  foreach ($applications as $namespace => $application) {
    // $profile = ncip_profile_get_info($application->get_profile());
    $rows[] = array(
      $application->title,
      $application->get_version(),
      // $profile['name']
      l(t('view'), 'admin/xc/ncip/application/' . $namespace),
      l(t('edit'), 'admin/xc/ncip/application/' . $namespace . '/edit'),
      $application->get_module() == 'ncip'
        ? l(t('delete'), 'admin/xc/ncip/application/' . $namespace . '/delete') : '',
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * View a single NCIP application
 */
function ncip_application_view($application) {
  $header = array(t('Property'), t('Value'));
  $rows = array();
  $output = '';

  // $profile = ncip_profile_get_info($application->get_profile());

  $rows[] = array(t('Title'), $application->title);
  if (!empty($application->description)) {
    $rows[] = array(t('Description'), $application->description);
  }
  // $rows[] = array(t('Profile'), $profile['name']);
  $rows[] = array(t('NCIP version'), $application->get_version());
  $rows[] = array(t('From Agency Id'), theme('ncip_scheme_row', array('field' => $application->get_from_agency_id())));
  $rows[] = array(t('From Agency Authentication'), $application->get_from_agency_authentication());
  $rows[] = array(t('From System Id'), theme('ncip_scheme_row', array('field' => $application->get_from_system_id())));
  $rows[] = array(t('From System Authentication'), $application->get_from_system_authentication());
  $rows[] = array(t('On Behalf of Agency'), theme('ncip_scheme_row', array('field' => $application->get_on_behalf_of_agency())));
  $rows[] = array(t('Application Profile Type'), theme('ncip_scheme_row', array('field' => $application->get_application_profile_type())));

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

/**
 * Theme NCIP applicaiton view
 *
 * @param $scheme
 *    Theme a NCIP application view row for scheme/value paris
 *
 * @return
 *    HTML output
 */
function theme_ncip_scheme_row($variables) {
  $scheme = $variables['field'];
  // TODO Number of parameters in this theme funcion does not match number of parameters found in hook_theme.
  $output = '';

  if ($scheme['scheme']) {
    $output .= '<div class="ncip-scheme">' . $scheme['scheme'] . '</div>';
  }

  if ($scheme['value']) {
    $output .= '<div class="ncip-scheme-value">' . $scheme['value'] . '</div>';
  }

  return $output;
}

/**
 * NCIP application delete form
 */
function ncip_application_delete_form($form, &$form_state, $application) {
  if ($application->get_module() != 'ncip') {
    drupal_goto('admin/xc/ncip/application');
    return FALSE;
  }

  $form['namespace'] = array(
    '#type' => 'value',
    '#value' => $application->get_namespace(),
  );

  return confirm_form($form,
    t('Are you sure you want to delete the %name NCIP application?', array('%name' => $application->title)),
    'admin/xc/ncip/application',
    '',
    t('Delete'),
    t('Cancel')
  );
}

/**
 * NCIP application delete form submission
 */
function ncip_application_delete_form_submit($form, &$form_state) {
  $namespace = $form_state['values']['namespace'];
  NCIPApplication::uninstall($namespace);

  $form_state['redirect'] = 'admin/xc/ncip/application';
  drupal_set_message(t('NCIP application deleted.'));
}

/**
 * Implements hook_theme().
 */
function ncip_theme() {
  return array(
    'ncip_scheme_row' => array(
      'variables' => array(
        'field' => NULL,
        'data' => NULL,
      ),
    ),
  );
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ncip_testcall() {

  $bibid = 21236;
  $item_ids = array(
    'bib' => array(
      'id' => $bibid,
      'agency_id' => array('value' => 'NRU'),
    ),
  );

  $ncip_provider = xc_ncip_provider_load(1);
  $ncip_provider_application = xc_ncip_provider_application($ncip_provider->version);
  $connection = $ncip_provider_application->create_connection($ncip_provider->host,
      $ncip_provider->port, $ncip_provider->path);
  $connection->set_to_agency_id($ncip_provider->to_agency_id['scheme'],
        $ncip_provider->to_agency_id['value']);
  $connection->set_to_system_id($ncip_provider->to_system_id['scheme'],
        $ncip_provider->to_system_id['value']);
  $connection->update(); // THIS NEEDS TO BE HERE
  $connection->connect();

  $request = new NCIPMessage($connection, 'LookupItemSet', TRUE);
  $version = 2;
  $unique = '';
  $type = 'item'; // type is always item

  /*
   $request->insert_scheme(
   array($unique . 'ItemId', $unique . 'AgencyId'),
   $ncip_provider->to_agency_id['value'],
   $ncip_provider->to_agency_id['scheme']
   );
   */

  // TODO: add support for ItemIdentifierType, however we don't know what should go in there
  /*
   $request->insert_string(
   array($unique . 'ItemId', 'ItemIdentifierValue'),
   trim($bibid)
   );
   */
  /*
   $request->insert_scheme(
   array('BibliographicId', 'BibliographicRecordIdentifier'),
   'bibliographic ID'
   );
   */
  $request->insert_string(
    array('BibliographicId', 'BibliographicRecordId', 'BibliographicRecordIdentifier'),
    trim($bibid)
  );
  $request->insert_string(
    array('BibliographicId', 'BibliographicRecordId', 'AgencyId'),
    'NRU'
  );

  $data = array('Circulation Status', 'Location');
  $i = 0;
  foreach ($data as $value) {
    $request->insert_scheme(
      array(array('name' => 'ItemElementType', 'delta' => $i)),
      $value
    );
    $i++;
  }

  return "NCIP test message created.";
}
