<?php
/**
 * @file
 * Installation functions for the XC Search module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_install().
 */
function xc_search_install() {
  // ALTER TABLE  `watchdog` CHANGE  `referer`  `referer` TEXT NOT NULL
  // ALTER TABLE  `watchdog` CHANGE  `link`  `link` TEXT NOT NULL

  variable_set('xc_search_display_template_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_display_template_element_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_mlt_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_highlighter_defaults_installed', XC_INSTALLED);

  variable_set('xc_search_date_facet_properties_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_field_facet_properties_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_facet_group_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_facet_field_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_ui_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_ui_boosting_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_sortoption_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_location_defaults_installed', XC_INSTALLED);
  variable_set('xc_search_full_record_display_defaults_installed', XC_INSTALLED);

  // booba's code
  // $weight_of_og = db_result(db_query("SELECT weight FROM {system} WHERE name = 'og_access'"));
  // db_query("UPDATE {system} SET weight = %d WHERE name = 'ctog'", $weight_of_og + 1);
}

/**
 * Implements hook_uninstall().
 */
function xc_search_uninstall() {
  variable_del('xc_search_display_template_defaults_installed');
  variable_del('xc_search_display_template_element_defaults_installed');
  variable_del('xc_search_mlt_defaults_installed');
  variable_del('xc_search_highlighter_defaults_installed');
  variable_del('xc_search_date_facet_properties_defaults_installed');
  variable_del('xc_search_field_facet_properties_defaults_installed');
  variable_del('xc_search_facet_group_defaults_installed');
  variable_del('xc_search_facet_field_defaults_installed');
  variable_del('xc_search_ui_defaults_installed');
  variable_del('xc_search_ui_boosting_defaults_installed');
  variable_del('xc_search_sortoption_defaults_installed');
  variable_del('xc_search_location_defaults_installed');
  variable_del('xc_search_full_record_display_defaults_installed');
  variable_del('xc_search_frd_show_search_form');
  variable_del('xc_search_frd_show_browse_form');
  variable_del('xc_search_ui_min');
}

/**
 * Implements hook_schema().
 */
function xc_search_schema() {

  $schema['xc_search_facet_group'] = array(
    'description' => 'Facet group settings.',
    'fields' => array(
      'facet_id' => array(
        'description' => 'The identifier of facet field.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Display name of the attribute set.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Longer text describing the purpose of this facet.',
        'type' => 'text',
        'length' => '255',
        'not null' => FALSE,
      ),
      'metadata_schema' => array(
        'description' => 'The name of the metadata schema upon which the group is based.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'attribute_set_id' => array(
        'description' => 'Display name of the attribute set.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'facet_id' => array('facet_id'),
    ),
    'primary key' => array('facet_id'),
  );

  $schema['xc_search_facet_field'] = array(
    'description' => 'Field-type facet.',
    'fields' => array(
      'field_id' => array(
        'description' => 'The identifier of facet field.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Display name of the attribute set.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'Display name of the attribute set.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'facet_id' => array(
        'description' => 'The id of the corresponding facet.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'attribute_set_id' => array(
        'description' => 'The id of the corresponding attribute set.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'is_collapsed' => array(
        'description' => 'Is the facet collapsed by default when displayed?',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Block weight within region.',
      ),
    ),
    'indexes' => array(
      'field_id' => array('field_id'),
      'name' => array('name'),
      'facet_id' => array('facet_id'),
      'nf' => array('name', 'facet_id'),
    ),
    'primary key' => array('field_id'),
  );

  $schema['xc_search_field_facet_properties'] = array(
    'description' => 'An attribute set for facets.',
    'fields' => array(
      'set_id' => array(
        'description' => 'The identifier of the attribute set.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Display name of the attribute set.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Longer text describing the purpos of this facet.',
        'type' => 'text',
        'length' => '255',
        'not null' => FALSE,
      ),
      'prefix' => array(
        'description' => 'Limits the terms on which to facet to those starting with the given string prefix.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'sort' => array(
        'description' => 'This param determines the ordering of the facet field constraints. count or index',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'limitation' => array(
        'description' => 'The size of the facet (how many terms included). Negative number means unlimited.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => '100',
      ),
      'offset' => array(
        'description' => 'The offset of the first element. When we would like to paginate the terms, we should set an offset value for every pages except the first.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => '0',
      ),
      'mincount' => array(
        'description' => 'The minimum number of items in facet (default is 0).',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => '0',
      ),
      'missing' => array(
        'description' => 'Sets whether Solr show the number of docs which miss the facet.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => '0',
      ),
      'method' => array(
        'description' => 'Choose the method used in facet calculation (enum: count on all documents, fc: on documents in cache (default value))',
        'type' => 'varchar',
        'length' => '5',
        'not null' => FALSE,
        'default' => 'fc',
      ),
    ),
    'indexes' => array(
      'set_id' => array('set_id'),
    ),
    'primary key' => array('set_id'),
  );

  $schema['xc_search_query_facet_properties'] = array(
    'description' => 'An attribute set for query facets.',
    'fields' => array(
      'set_id' => array(
        'description' => 'The identifier of the attribute set.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Display name of the attribute set.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Longer text describing the purpos of this facet.',
        'type' => 'text',
        'length' => '255',
        'not null' => FALSE,
      ),
      'query' => array(
        'description' => 'The query to apply to facet terms.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'set_id' => array('set_id'),
    ),
    'primary key' => array('set_id'),
  );

  $schema['xc_search_date_facet_properties'] = array(
    'description' => 'An attribute set for date facets.',
    'fields' => array(
      'set_id' => array(
        'description' => 'The identifier of the properties set.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Display name of the properties set.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Longer text describing the purpos of this facet.',
        'type' => 'text',
        'length' => '255',
        'not null' => FALSE,
      ),
      'start' => array(
        'description' => 'Starting date.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'end' => array(
        'description' => 'Ending date.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'gap' => array(
        'description' => 'Interval between two dates.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'hardend' => array(
        'description' => 'The last gap can override the end date.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'other' => array(
        'description' => 'Other date values to compute (possible: before, after, between, none, all).',
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'set_id' => array('set_id'),
    ),
    'primary key' => array('set_id'),
  );

  $schema['xc_search_date_facet_properties_additional'] = array(
    'description' => 'An attribute set for date facets.',
    'fields' => array(
      'id' => array(
        'description' => 'The identifier of the properties set.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'query' => array(
        'description' => 'The query belongs to the additional date.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'gap' => array(
        'description' => 'The gap value for zooming the facet.',
        'type' => 'text',
        'length' => '255',
        'not null' => FALSE,
      ),
      'label' => array(
        'description' => 'The display label.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'position' => array(
        'description' => 'Position of the additional date facet term.',
        'type' => 'varchar',
        'length' => '20',
        'not null' => TRUE,
        'default' => 'after',
      ),
      'weight' => array(
        'description' => 'The weight of the additional value for positioning.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'Parent set ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
      'pid' => array('pid'),
    ),
    'primary key' => array('id'),
  );

  $schema['xc_search_highlighter'] = array(
    'description' => 'An attribute set for highlighter.',
    'fields' => array(
      'highlighter_id' => array(
        'description' => 'The identifier of the highlighter.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Display name of the attribute set.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Longer text describing the purpos of this facet.',
        'type' => 'text',
        'length' => '255',
        'not null' => FALSE,
      ),
      'fieldlist' => array(
        'description' => 'A comma or space separated list of fields that will be highlighted. You may use an asterisk wildcard to conveniently highlight on all of the text fields, such as * or r_*.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'require_field_match' => array(
        'description' => 'If set to true, then a field will not be highlighted for a result unless the query also matched against that field.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => '0',
      ),
      'use_phrase_highlighter' => array(
        'description' => 'If the query contained a phrase (it was quoted), then this will ensure that only the phrase is highlighted and not the words out of context of the queried phrase.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
      ),
      'highlight_multiterm' => array(
        'description' => 'If any wildcard or fuzzy queries are used, then this will ensure that the highlighting matches such terms correctly.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'snippets' => array(
        'description' => 'This is the maximum number of highlighted snippets (aka fragments) that will be generated per field.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'fragsize' => array(
        'description' => 'The maximum number of characters returned in each snippet (aka fragment), measured in characters.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 100,
      ),
      'merge_contiguous' => array(
        'description' => 'If set to true, then overlapping snippets are merged.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_analyzed_chars' => array(
        'description' => 'The maximum number of characters in a field that will be sought for highlighting.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 51200,
      ),
      'alternate_field' => array(
        'description' => 'If a snippet couldn\'t be generated (no terms matched) for a field, then this parameter refers to a field that will be returned as the snippet.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'max_alternate_field_length' => array(
        'description' => 'The maximum number of characters to return for alternate field. 0 means unlimited.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'formatter' => array(
        'description' => 'This is an extension point to supply alternate formatting algorithms.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => 'simple',
      ),
      'pre' => array(
        'description' => 'The text that will be inserted immediately before matched terms in the snippet in order to demarcate them from the surrounding text.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '<em>',
      ),
      'post' => array(
        'description' => 'The text that will be inserted immediately after matched terms in the snippet in order to demarcate them from the surrounding text.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '</em>',
      ),
      'fragmenter' => array(
        'description' => 'This is an extension point in Solr to specify the fragmenting algorithm.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => 'gap', // can be regex
      ),
      'regex_pattern' => array(
        'description' => 'This is a regular expression matching a block of text that will serve as the snippet/fragment to subsequently be highlighted.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '[-\w ,/\n\"\\\']{20,200}',
      ),
      'regex_slop' => array(
        'description' => 'The factor to which fragsize can vary to accommodate the regular expression.',
        'type' => 'float',
        'unsigned' => TRUE,
        'size' => 'medium',
        'not null' => FALSE,
        'default' => 0.6,
      ),
      'increment' => array(
        'description' => 'Sets the minimum lucene position increment gap from one term to the next to trigger a new fragment.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 50,
      ),
      'regex_max_analyzed_chars' => array(
        'description' => 'For performance reasons, this puts a limit on the number of leading characters of the field that are fragmented based on the regular expression.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'medium',
        'not null' => FALSE,
        'default' => 10000,
      ),
    ),
    'indexes' => array(
      'highlighter_id' => array('highlighter_id'),
    ),
    'primary key' => array('highlighter_id'),
  );

  $schema['xc_search_display_template'] = array(
    'description' => 'Display template.',
    'fields' => array(
      'template_id' => array(
        'description' => 'The identifier of facet field.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'metadata_schema' => array(
        'description' => 'The name of the metadata schema.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_type' => array(
        'description' => 'The entity type (record type).',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'display_type' => array(
        'description' => 'The display type (\'title\', \'snippet\').',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'template' => array(
        'description' => 'The display template.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'highlighter_id' => array(
        'description' => 'The connected highlighter.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
    ),
    'indexes' => array(
      'template_id' => array('template_id'),
      'entity_type' => array('entity_type'),
      'display_type' => array('display_type'),
      'ed' => array('entity_type', 'display_type'),
    ),
    'primary key' => array('template_id'),
  );

  $schema['xc_search_display_template_element'] = array(
    'description' => 'Display template element settings.',
    'fields' => array(
      'element_id' => array(
        'description' => 'The identifier of display template element.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'element_name' => array(
        'description' => 'The name of the display type element.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'metadata_schema' => array(
        'description' => 'The name of the metadata schema.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_type' => array(
        'description' => 'The entity type (record type).',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'template' => array(
        'description' => 'The display template.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'element_id' => array('element_id'),
      'entity_type' => array('entity_type'),
      'element_name' => array('element_name'),
      'ee' => array('entity_type', 'element_name'),
    ),
    'primary key' => array('element_id'),
  );

  $schema['xc_search_mlt'] = array(
    'description' => 'Solr\'s MoreLikeThis (mlt) request parameters.',
    'fields' => array(
      'mlt_id' => array(
        'description' => 'The identifier of mlt parameters.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The name of this MLT setting.',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'fl' => array(
        'description' => 'The fields to use for similarity. NOTE: if possible, these should have a stored TermVector.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'mintf' => array(
        'description' => 'Minimum Term Frequency - the frequency below which terms will be ignored in the source doc.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 1,
      ),
      'mindf' => array(
        'description' => 'Minimum Document Frequency - the frequency at which words will be ignored which do not occur in at least this many docs.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 2,
      ),
      'minwl' => array(
        'description' => 'Minimum word length below which words will be ignored.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'maxwl' => array(
        'description' => 'Maximum word length above which words will be ignored.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'maxqt' => array(
        'description' => 'Maximum number of query terms that will be included in any generated query.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'maxntp' => array(
        'description' => 'Maximum number of tokens to parse in each example doc field that is not stored with TermVector support.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'boost' => array(
        'description' => 'set if the query will be boosted by the interesting term relevance.',
        'type' => 'varchar',
        'length' => '6',
        'default' => 'true',
      ),
      'qf' => array(
        'description' => 'Query fields and their boosts using the same format as that used in DisMaxRequestHandler. These fields must also be specified in mlt.fl.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'count' => array(
        'description' => 'The number of similar documents to return for each result.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 10,
      ),
      'match_include' => array(
        'description' => 'Should the response include the matched document? If false, the response will look exactly like a normal /select response.',
        'type' => 'varchar',
        'length' => '6',
        'default' => 'false',
      ),
      'match_offset' => array(
        'description' => 'By default, the MoreLikeThis query operates on the first result for \'q\'.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'interestingTerms' => array(
        'description' => 'One of: "list", "details", "none" -- this will show what "interesting" terms are used for the MoreLikeThis query. These are the top tf/idf terms. NOTE: if you select "details", this shows you the term and boost used for each term. Unless mlt.boost=true all terms will have boost=1.0.',
        'type' => 'varchar',
        'length' => '10',
        'default' => 'none',
      ),
    ),
    'indexes' => array(
      'mlt_id' => array('mlt_id'),
    ),
    'primary key' => array('mlt_id'),
  );

  $schema['xc_search_ui'] = array(
    'description' => 'Definition of a search user interface, container of search properties',
    'fields' => array(
      'sui_id' => array(
        'description' => 'The identifier of search UI.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The name of this search UI.',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'facet_id' => array(
        'description' => 'The identifier of a facet group.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'highlighter_id' => array(
        'description' => 'The identifier of a highlighter.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'do_prepopulate_facets' => array(
        'description' => 'Do prepopulate facets?',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'authors_count' => array(
        'description' => 'How many authors does the toolkit display in search result list?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => -1,
      ),
      'display_bookmark_action' => array(
        'description' => 'Whether or not to display bookmark action button?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'display_email_action' => array(
        'description' => 'Whether or not to display email action button?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'display_text_action' => array(
        'description' => 'Whether or not to display text action button?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'display_print_action' => array(
        'description' => 'Whether or not to display print action button?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'display_share_action' => array(
        'description' => 'Whether or not to display share action button?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'use_distinct_search' => array(
        'description' => 'Use distinct Solr requests for search and facets?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'handle_synonyms' => array(
        'description' => 'How to display synonyms?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'handle_suggestions' => array(
        'description' => 'How to display suggestions?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'use_post_method' => array(
        'description' => 'Which method should be used to send search form?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'online_link_strategy' => array(
        'description' => 'Which record type to use as the source of online link?',
        'type' => 'varchar',
        'length' => '30',
        'not null' => TRUE,
        'default' => 'holdings_manifestation',
      ),
      'display_abstract_strategy' => array(
        'description' => 'When to display the abstract on search result page?',
        'type' => 'varchar',
        'length' => '30',
        'not null' => TRUE,
        'default' => 'always',
      ),
    ),
    'indexes' => array(
      'sui_id' => array('sui_id'),
      'facet_id' => array('facet_id'),
      'highlighter_id' => array('highlighter_id'),
      'fh' => array('facet_id', 'highlighter_id'),
    ),
    'primary key' => array('sui_id'),
  );

  $schema['xc_search_ui_boosting'] = array(
    'description' => 'Definition of boosting factore belonging to a search user interface',
    'fields' => array(
      'id' => array(
        'description' => 'The identifier of boost factor.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sui_id' => array(
        'description' => 'The identifier of search UI.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'solr_field' => array(
        'description' => 'The Solr field name.',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'factor' => array(
        'description' => 'The boosing factor.',
        'type' => 'float',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
      'sui_id' => array('sui_id'),
    ),
    'primary key' => array('id'),
  );

  $schema['xc_search_sortoption'] = array(
    'description' => 'Sorting options.',
    'fields' => array(
      'id' => array(
        'description' => 'The identifier of sorting option.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'primary_field' => array(
        'description' => 'The primary sorting field.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'primary_direction' => array(
        'description' => 'The direction: descending or ascending?',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'secondary_field' => array(
        'description' => 'The secondary sorting field.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'secondary_direction' => array(
        'description' => 'The direction: Descending or ascending?',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'label' => array(
        'description' => 'Label for the option.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Weight of option.',
      ),
      'is_enabled' => array(
        'description' => 'Enable or disable this sort option',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
    ),
    'primary key' => array('id'),
  );

  // xc_index_location
  $schema['xc_search_location'] = array(
    'description' => 'Mapping holding records location abbreviation codes and labels.',
    'fields' => array(
      'id' => array(
        'description' => 'The identifier of a mapping.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'code' => array(
        'description' => 'Location code',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The display name',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
      'code' => array('code'),
    ),
    'primary key' => array('id'),
  );

  $schema['xc_search_full_record_display'] = array(
    'description' => 'The full record display options',
    'fields' => array(
      'id' => array(
        'description' => 'The identifier of search UI.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'show_search_form' => array(
        'description' => 'Display the search form above the content.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'show_browse_form' => array(
        'description' => 'Display the browse form above the content.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'show_navigation' => array(
        'description' => 'Display the navigation bar above the content.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'mlt_ajax' => array(
        'description' => 'More Like This display option.',
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
        'default' => 'normal',
      ),
      'holdings_use_table' => array(
        'description' => 'Use table-like display for textual holdings.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'holdings_list_all' => array(
        'description' => 'How many textual holdings to be display?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 * Runs when the user enable the module
 */
function xc_search_enable() {

  if (module_exists('xc_util')) {
    $mpath = drupal_get_path('module', 'xc_search');
    if (variable_get('xc_search_display_template_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_display_template.xml';
      xc_util_bulk_insert('xc_search_display_template',
        xc_util_xmldump_to_records($filename));
      variable_set('xc_search_display_template_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_display_template_element_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_display_template_element.xml';
      xc_util_bulk_insert('xc_search_display_template_element',
        xc_util_xmldump_to_records($filename));
      variable_set('xc_search_display_template_element_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_mlt_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_mlt.csv';
      xc_util_bulk_insert('xc_search_mlt', xc_util_csv2objects($filename));
      variable_set('xc_search_mlt_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_highlighter_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_highlighter.csv';
      xc_util_bulk_insert('xc_search_highlighter', xc_util_csv2objects($filename));
      variable_set('xc_search_highlighter_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_date_facet_properties_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_date_facet_properties.csv';
      xc_util_bulk_insert('xc_search_date_facet_properties', xc_util_csv2objects($filename));
      variable_set('xc_search_date_facet_properties_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_field_facet_properties_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_field_facet_properties.csv';
      xc_util_bulk_insert('xc_search_field_facet_properties', xc_util_csv2objects($filename));
      variable_set('xc_search_field_facet_properties_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_facet_group_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_facet_group.csv';
      xc_util_bulk_insert('xc_search_facet_group', xc_util_csv2objects($filename));
      variable_set('xc_search_facet_group_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_facet_field_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_facet_field.csv';
      xc_util_bulk_insert('xc_search_facet_field', xc_util_csv2objects($filename));
      variable_set('xc_search_facet_field_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_ui_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_ui.csv';
      xc_util_bulk_insert('xc_search_ui', xc_util_csv2objects($filename));
      variable_set('xc_search_ui_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_ui_boosting_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_ui_boosting.csv';
      xc_util_bulk_insert('xc_search_ui_boosting', xc_util_csv2objects($filename));
      variable_set('xc_search_ui_boosting_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_sortoption_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_sortoption.csv';
      xc_util_bulk_insert('xc_search_sortoption', xc_util_csv2objects($filename));
      variable_set('xc_search_sortoption_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_location_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_location.csv';
      xc_util_bulk_insert('xc_search_location', xc_util_csv2objects($filename));
      variable_set('xc_search_location_defaults_installed', XC_LOADED);
    }

    if (variable_get('xc_search_full_record_display_defaults_installed', XC_UNINSTALLED) == XC_INSTALLED) {
      $filename = $mpath . '/import/xc_search_full_record_display.csv';
      xc_util_bulk_insert('xc_search_full_record_display', xc_util_csv2objects($filename));
      variable_set('xc_search_full_record_display_defaults_installed', XC_LOADED);
    }

  }
}
