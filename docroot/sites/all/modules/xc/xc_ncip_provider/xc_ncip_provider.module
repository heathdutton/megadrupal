<?php
/**
 * @file
 * XC NCIP provider functions
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

require_once ('includes/xc_ncip_provider.auth.inc');
require_once ('includes/xc_ncip_provider.account.inc');
#require_once ('includes/xc_ncip_provider.auth.inc');

define('ADMINISTER_NCIP_PROVIDERS', 'administer ncip providers');
define('TEST_NCIP_PROVIDERS', 'test ncip providers');

/**
 * Implements hook_permission().
 */
function xc_ncip_provider_permission() {
  return array(
    ADMINISTER_NCIP_PROVIDERS => array(
      'title' => t(ADMINISTER_NCIP_PROVIDERS),
      'description' => t('Administering NCIP providers'),
    ),
    TEST_NCIP_PROVIDERS => array(
      'title' => t(TEST_NCIP_PROVIDERS),
      'description' => t('Testing NCIP providers'),
    ),
  );
}

/**
 * Implements hook_init().
 *
 * Load all connections from the current user's session
 */
function xc_ncip_provider_init() {
  if (!isset($_SESSION['xc_ncip_provider_connections'])
      || !is_array($_SESSION['xc_ncip_provider_connections'])) {
    $_SESSION['xc_ncip_provider_connections'] = array();
  }
}

/**
 * Loads an installed NCIP aplication
 *
 * @param $version
 *   The NCIP version number
 */
function xc_ncip_provider_application($version = 2) {
  switch ($version) {
    case 1:
    case 1.01:
      return NCIPApplication::load('xc_ncip_provider');
    case 2:
    case 2.01:
    default:
      return NCIPApplication::load('xc_ncip2_provider');
  }
}

/**
 * NCIP providers add form
 */
function xc_ncip_provider_form($form, &$form_state, $ncip_provider = NULL) {

  if (empty($ncip_provider)) {
    $ncip_provider = new stdClass();
  }

  $form['ncip_provider_id'] = array(
    '#type' => 'hidden',
    '#value' => isset($ncip_provider->ncip_provider_id) ? $ncip_provider->ncip_provider_id : '',
  );

  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => isset($ncip_provider->name) ? $ncip_provider->name : '',
    '#required' => TRUE,
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => isset($ncip_provider->description) ? $ncip_provider->description : '',
  );

  $form['version'] = array(
    '#type' => 'select',
    '#title' => t('NCIP version'),
    '#options' => array(
      '1' => 'XC NCIP Toolkit 1',
      // not supported ==> '1.01' => 'NCIP 1.01',
      '2' => 'XC NCIP Toolkit 2',
      '2.01' => 'NCIP 2.x',
    ),
    '#multiple' => FALSE,
    '#default_value' => isset($ncip_provider->version) ? $ncip_provider->version : 2,
    '#required' => TRUE,
  );

  $form['host'] = array(
    '#title' => t('Host'),
    '#type' => 'textfield',
    '#default_value' => isset($ncip_provider->host) ? $ncip_provider->host : '',
    '#required' => TRUE,
  );

  $form['port'] = array(
    '#title' => t('Port'),
    '#type' => 'textfield',
    '#default_value' => isset($ncip_provider->port) ? $ncip_provider->port : '',
    '#required' => TRUE,
  );

  $form['path'] = array(
    '#title' => t('Path'),
    '#type' => 'textfield',
    '#description' => 'Make sure to include leading and trailing slash (/) if required',
    '#default_value' => isset($ncip_provider->path) ? $ncip_provider->path : '',
    '#required' => TRUE,
  );

  $form['to_agency_id'] = array(
    '#type' => 'fieldset',
    '#title' => t('To Agency Id'),
    '#description' => t('Default AgencyId only used in NCIP message header. Leave blank if not required.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#required' => TRUE,
  );

  $form['to_agency_id']['scheme'] = array(
    '#type' => 'textfield',
    '#title' => t('Scheme'),
    '#default_value' => isset($ncip_provider->to_agency_id['scheme']) ? $ncip_provider->to_agency_id['scheme'] : '',
  );

  $form['to_agency_id']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => isset($ncip_provider->to_agency_id['value']) ? $ncip_provider->to_agency_id['value'] : '',
  );

  $form['to_system_id'] = array(
    '#type' => 'fieldset',
    '#title' => t('To System Id'),
    '#description' => t('Default SystemId only used in NCIP message header. Leave blank if not required.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $form['to_system_id']['scheme'] = array(
    '#type' => 'textfield',
    '#title' => t('Scheme'),
    '#default_value' => isset($ncip_provider->to_system_id['scheme']) ? $ncip_provider->to_system_id['scheme'] : '',
  );

  $form['to_system_id']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => isset($ncip_provider->to_system_id['value']) ? $ncip_provider->to_system_id['value'] : '',
  );

  $form['properties'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['properties']['is_ncip_toolkit'] = array(
    '#type' => 'checkbox',
    '#title' => t('NCIP Toolkit'),
    '#description' => t('Check if NCIP server is an instance of the NCIP Toolkit'),
    '#default_value' => isset($ncip_provider->properties['auth']['allow_authentication'])
        ? $ncip_provider->properties['auth']['allow_authentication']
        : TRUE,
  );

  if (module_exists('xc_auth')) {
    $form['properties']['auth'] = array(
      '#tree' => TRUE,
    );
    $form['properties']['auth']['allow_authentication'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow authentication'),
      '#description' => t('Check if NCIP server can be used for authentication'),
      '#default_value' => isset($ncip_provider->properties['auth']['allow_authentication'])
        ? $ncip_provider->properties['auth']['allow_authentication']
        : TRUE,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => empty($ncip_provider->ncip_provider_id) ? t('Add NCIP server') : t('Save'),
  );

  return $form;
}

/**
 * NCIP provider add form submission
 */
function xc_ncip_provider_form_submit($form, &$form_state) {
  $ncip_provider = new stdClass();
  $word = 'create';
  if (!empty($form_state['values']['ncip_provider_id'])) {
    $ncip_provider->ncip_provider_id = check_plain(
      $form_state['values']['ncip_provider_id']);
    $word = 'update';
  }

  $to_agency_id = array(
    'scheme' => check_plain($form_state['values']['to_agency_id']['scheme']),
    'value' => check_plain($form_state['values']['to_agency_id']['value']),
  );
  $to_system_id = array(
    'scheme' => check_plain($form_state['values']['to_system_id']['scheme']),
    'value' => check_plain($form_state['values']['to_system_id']['value']),
  );

  $ncip_provider->name = check_plain($form_state['values']['name']);
  $ncip_provider->description = check_plain($form_state['values']['description']);
  $ncip_provider->version = check_plain($form_state['values']['version']);
  $ncip_provider->host = check_plain($form_state['values']['host']);
  $ncip_provider->port = check_plain($form_state['values']['port']);
  $ncip_provider->path = check_plain($form_state['values']['path']);
  $ncip_provider->to_agency_id = serialize($to_agency_id);
  $ncip_provider->to_system_id = serialize($to_system_id);
  $ncip_provider->properties = serialize($form_state['values']['properties']);
  $ncip_provider->last_modification = time();

  // Go back to page afterwards
  $form_state['redirect'] = 'admin/xc/ncip/provider';

  if (empty($ncip_provider->ncip_provider_id)) {
    $result = drupal_write_record('xc_ncip_provider', $ncip_provider);
  }
  else {
    $result = drupal_write_record('xc_ncip_provider', $ncip_provider, 'ncip_provider_id');
  }

  if (!$result) {
    drupal_set_message(t('Unexpected error. Unable to $word an instance of the NCIP server.'));
  }
}

/**
 * Load NCIP provider object
 *
 * @param $ncip_provider_id (int)
 *   The NCIP provider ID
 * @param $update (Boolean)
 *   If FALSE it try to read from cache, otherwise it request from database
 *
 * @return (Object)
 *   NCIP provider object. Its properties: ncip_provider_id, name, description,
 *   host, port, path, to_agency_id, to_system_id
 */
function xc_ncip_provider_load($ncip_provider_id, $update = FALSE) {
  static $cache;

  if (empty($cache[$ncip_provider_id]) || $update) {
    $sql = 'SELECT ncip_provider_id, name, description, profile, version, host,
              port, path, to_agency_id, to_system_id, properties, last_modification
            FROM {xc_ncip_provider}
            WHERE ncip_provider_id = :ncip_provider_id';
    $result = db_query($sql, array(':ncip_provider_id' => $ncip_provider_id));
    $object = $result->fetchObject();

    $object->to_agency_id = unserialize($object->to_agency_id);
    $object->to_system_id = unserialize($object->to_system_id);
    $object->properties   = unserialize($object->properties);

    $cache[$ncip_provider_id] = $object;
  }

  return $cache[$ncip_provider_id];
}

/**
 * Get NCIP provider object
 *
 * @see xc_ncip_provider_load()
 */
function xc_ncip_provider_get($ncip_provider_id) {
  return xc_ncip_provider_load($ncip_provider_id);
}

/**
 * Returns the name of a NCIP provider
 *
 * @param $ncip_provider_id
 *   NCIP provider identifier
 */
function xc_ncip_provider_get_name($ncip_provider_id) {
  $provider = xc_ncip_provider_load($ncip_provider_id);
  if ($provider) {
    return $provider->name;
  }
  return FALSE;
}

/**
 * Retrieve all NCIP provider objects
 *
 * @see xc_ncip_provider_load()
 */
function xc_ncip_provider_get_all($update = FALSE) {
  static $cache;

  if (empty($cache) || $update) {
    $cache = array();
    $sql = 'SELECT ncip_provider_id, name, description, profile, version, host,
              port, path, to_agency_id, to_system_id, properties
            FROM {xc_ncip_provider}';
    $result = db_query($sql);

    foreach ($result as $object) {
      $object->to_agency_id = unserialize($object->to_agency_id);
      $object->to_system_id = unserialize($object->to_system_id);
      $object->properties = unserialize($object->properties);

      $cache[$object->ncip_provider_id] = $object;
    }
  }

  return $cache;
}

/**
 * Display NCIP provider name for page title
 */
function xc_ncip_provider_title($ncip_provider) {
  return $ncip_provider->name;
}

/**
 * List all NCIP providers
 */
function xc_ncip_provider_list() {
  $header = array(
    t('Name'),
    t('NCIP version'),
    t('Host'),
    t('Port'),
    t('Path'),
    array(
      'data' => t('Operations'),
      'colspan' => 4,
    ),
  );
  $rows = array();
  $ncip_providers = xc_ncip_provider_get_all();

  if (empty($ncip_providers)) {
    drupal_set_message(
      t('No instances of the NCIP server are on this system. You must first !add an NCIP server.',
        array('!add' => l(t('add'), 'admin/xc/ncip/provider/add'))),
      'warning');
    return '';
  }

  foreach ($ncip_providers as $ncip_provider_id => $ncip_provider) {
    $rows[] = array(
      $ncip_provider->name,
      $ncip_provider->version,
      $ncip_provider->host,
      $ncip_provider->port,
      $ncip_provider->path,
      l(t('view'), 'admin/xc/ncip/provider/' . $ncip_provider_id),
      l(t('edit'), 'admin/xc/ncip/provider/' . $ncip_provider_id . '/edit'),
      l(t('test'), 'admin/xc/ncip/provider/' . $ncip_provider_id . '/test'),
      l(t('delete'), 'admin/xc/ncip/provider/' . $ncip_provider_id . '/delete'),
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * View a specific NCIP provider
 */
function xc_ncip_provider_view($ncip_provider) {
  $header = array(t('Property'), t('Value'));
  $rows = array();
  $output = '';

  $rows[] = array(t('Name'), $ncip_provider->name);
  if (!empty($ncip_provider->description)) {
    $rows[] = array(t('Description'), $ncip_provider->description);
  }
  $rows[] = array(t('Version'), $ncip_provider->version);
  $rows[] = array(t('Host'), $ncip_provider->host);
  $rows[] = array(t('Port'), $ncip_provider->port);
  $rows[] = array(t('Path'), $ncip_provider->path);
  $rows[] = array(t('To Agency Id'), theme('ncip_scheme_row', array('field' => $ncip_provider->to_agency_id)));
  $rows[] = array(t('To System Id'), theme('ncip_scheme_row', array('field' => $ncip_provider->to_system_id)));

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

/**
 * Delete NCIP provider form
 */
function xc_ncip_provider_delete_form($form, &$form_state, $ncip_provider) {
  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return confirm_form($form,
    t('Are you sure you want to delete the %name instance of the NCIP server?',
      array('%name' => $ncip_provider->name)),
    'admin/xc/ncip/provider', '', t('Delete'), t('Cancel'));
}

/**
 * Delete NCIP provider form submission handler
 */
function xc_ncip_provider_delete_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  db_delete('xc_ncip_provider')
    ->condition('ncip_provider_id', $ncip_provider->ncip_provider_id)
    ->execute();

  $form_state['redirect'] = 'admin/xc/ncip/provider';
  drupal_set_message(t('%name instance of the NCIP server deleted.',
    array('%name' => $ncip_provider->name)));
}

/**
 * Test form helper
 */
function _xc_ncip_provider_test_form($ncip_provider) {
  $form['name'] = array(
    '#type' => 'item',
    '#title' => t('NCIP Server'),
    '#markup' => $ncip_provider->name,
  );

  if ($ncip_provider->properties['is_ncip_toolkit']) {
    switch ($ncip_provider->version) {
      case 1:
      case 1.01:
        $path = $ncip_provider->path;
        break;
      case 2:
      case 2.01:
      default:
        $path = substr($ncip_provider->path, 0, strpos($ncip_provider->path, '/NCIPResponder'));
        break;
    }
    $url = 'http://' . $ncip_provider->host . (empty($ncip_provider->port) ? '' : ':' . $ncip_provider->port) . $path;
    $form['ncip_toolkit'] = array(
      '#type' => 'item',
      '#title' => t('NCIP Toolkit Test Interface'),
      '#markup' => l($url, $url),
    );
  }

  return $form;
}

/**
 * Test NCIP provider form
 */
function xc_ncip_provider_test_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['xml'] = array(
    '#type' => 'textarea',
    '#title' => t('NCIP Request'),
    '#rows' => 30,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test NCIP provider form submission
 */
function xc_ncip_provider_test_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  $xml = $form_state['values']['xml'];
  $response = xc_ncip_provider_request($ncip_provider->ncip_provider_id, $xml, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test XC Get Availability service form
 */
function xc_ncip_provider_test_xc_get_availability_form($form, &$form_state, $ncip_provider) {
  if ((int) $ncip_provider->version != 1) {
    drupal_set_message(t('XC Get Availability service not supported with this version'), 'error');
    return array();
  }

  $identifier_type_options = array(
    'item' => t('Item ID'),
    'bib' => t('Bibliographic ID'),
    'holdings' => t('Holdings ID'),
  );

  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['ids'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifiers'),
    '#description' => t('Comma separated list of identifiers'),
    '#required' => TRUE,
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Identifier Type'),
    '#options' => $identifier_type_options,
    '#default_value' => 'bib',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test XC Get Availability service form submisison
 */
function xc_ncip_provider_test_xc_get_availability_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  $type = $form_state['values']['type'];
  $ids[$type] = explode(',', $form_state['values']['ids']);
  $response = xc_ncip_provider_xc_get_availability(
    $ncip_provider->ncip_provider_id, $ids, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Lookup Item service form
 */
function xc_ncip_provider_test_lookup_item_form($form, &$form_state, $ncip_provider) {
  $identifier_type_options = array(
    'item' => t('Item ID'),
    'bib' => t('Bibliographic ID'),
    'holdings' => t('Holdings ID'),
  );

  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['id'] = array(
    '#type' => 'textfield',
    '#title' => 'Identifier',
    '#required' => TRUE,
  );

  if ((int) $ncip_provider->version == 1) {
    $form['type'] = array(
      '#type' => 'select',
      '#title' => 'Identifier Type',
      '#options' => $identifier_type_options,
      '#default_value' => 'bib',
      '#required' => TRUE,
    );
  }
  else {
    $form['type'] = array(
      '#type' => 'value',
      '#value' => 'item',
    );
  }

  $data_options = array(
    'Bibliographic Description' => t('Bibliographic Description'),
    'Circulation Status' => t('Circulation Status'),
    'Electronic Resource' => t('Electronic Resource'),
    'Hold Queue Length' => t('Hold Queue Length'),
    'Item Description' => t('Item Description'),
    'Item Use Restriction Type' => t('Item Use Restriction Type'),
    'Location' => t('Location'),
    'Physical Condition' => t('Physical Condition'),
    'Security Marker' => t('Security Marker'),
    'Sensitization Flag' => t('Sensitization Flag'),
  );

  $data_options_default = array('Circulation Status', 'Location');

  $form['data'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Item Data Desired'),
    '#options' => $data_options,
    '#default_value' => $data_options_default,
    '#required' => TRUE,
  );

  $current_borrower_requesters_desired_options = array(
    1 => t('Yes'),
    0 => t('No'),
  );

  $form['current_borrower_desired'] = array(
    '#type' => 'radios',
    '#title' => t('Current Borrower Desired'),
    '#options' => $current_borrower_requesters_desired_options,
    '#default_value' => 0,
    '#required' => TRUE,
  );

  if ((int) $ncip_provider->version == 2) {
    $form['current_requesters_desired'] = array(
      '#type' => 'radios',
      '#title' => t('Current Requesters Desired'),
      '#options' => $current_borrower_requesters_desired_options,
      '#default_value' => 0,
      '#required' => TRUE,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Lookup Item service form submission
 */
function xc_ncip_provider_test_lookup_item_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  $id = $form_state['values']['id'];
  $type = $form_state['values']['type'];
  $data = array_filter($form_state['values']['data'], 'is_string');
  $current_borrower_desired = $form_state['values']['current_borrower_desired'];
  $current_requesters_desired = $form_state['values']['current_requesters_desired'];
  $response = xc_ncip_provider_lookup_item($ncip_provider->ncip_provider_id,
    $id, $agency_id, $type, $code, $data, $current_borrower_desired,
    $current_requesters_desired, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Lookup Item Set service form
 */
function xc_ncip_provider_test_lookup_item_set_form($form, &$form_state, $ncip_provider) {
  if ((int) $ncip_provider->version != 2) {
    drupal_set_message(t('Service not supported with this version'), 'error');
    return array();
  }

  $identifier_type_options = array(
    'item' => t('Item ID'),
    'bib' => t('Bibliographic ID'),
  );

  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['id'] = array(
    '#type' => 'textfield',
    '#title' => 'Identifier',
    '#required' => TRUE,
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => 'Identifier Type',
    '#options' => $identifier_type_options,
    '#default_value' => 'bib',
    '#required' => TRUE,
  );

  $data_options = array(
    'Bibliographic Description' => t('Bibliographic Description'),
    'Circulation Status' => t('Circulation Status'),
    'Electronic Resource' => t('Electronic Resource'),
    'Hold Queue Length' => t('Hold Queue Length'),
    'Item Description' => t('Item Description'),
    'Item Use Restriction Type' => t('Item Use Restriction Type'),
    'Location' => t('Location'),
    'Physical Condition' => t('Physical Condition'),
    'Security Marker' => t('Security Marker'),
    'Sensitization Flag' => t('Sensitization Flag'),
  );

  $data_options_default = array('Circulation Status', 'Location');

  $form['data'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Item Data Desired'),
    '#options' => $data_options,
    '#default_value' => $data_options_default,
    '#required' => TRUE,
  );

  $current_borrower_requesters_desired_options = array(
    1 => t('Yes'),
    0 => t('No'),
  );

//  $form['current_borrower_desired'] = array(
//    '#type' => 'radios',
//    '#title' => t('Current Borrower Desired'),
//    '#options' => $current_borrower_requesters_desired_options,
//    '#default_value' => 0,
//    '#required' => TRUE
//  );
  //
//  $form['current_requesters_desired'] = array(
//    '#type' => 'radios',
//    '#title' => t('Current Requesters Desired'),
//    '#options' => $current_borrower_requesters_desired_options,
//    '#default_value' => 0,
//    '#required' => TRUE
//  );

  $form['next_item_token'] = array(
    '#type' => 'textfield',
    '#title' => 'Next Item Token',
  );

  $form['maximum_items_count'] = array(
    '#type' => 'textfield',
    '#title' => 'Maximum Items Count',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Lookup Item Set service form submission
 */
function xc_ncip_provider_test_lookup_item_set_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];

  $data = array_filter($form_state['values']['data'], 'is_string');
  $current_borrower_desired = $form_state['values']['current_borrower_desired'];
  $current_requesters_desired = $form_state['values']['current_requesters_desired'];
  $next_item_token = $form_state['values']['next_item_token'];
  $maximum_items_count = $form_state['values']['maximum_items_count'];
  $type = $form_state['values']['type'];
  $item_array[$type][] = array(
    'id' => (int) $form_state['values']['id'],
    'agency_id' => array(
      'value' => 'NRU',
      'scheme' => 'http://www.nru.org',
    ),
  );
  $response = xc_ncip_provider_lookup_item_set($ncip_provider->ncip_provider_id,
    $item_array, $data, $current_borrower_desired, $current_requesters_desired, $next_item_token,
    $maximum_items_count, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Lookup User service form
 */
function xc_ncip_provider_test_lookup_user_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['user_id'] = array(
    '#type' => 'textfield',
    '#title' => 'User Id',
  );
  if ((int) $ncip_provider->version == 1) {
    $form['user_id']['#required'] = TRUE;
  }

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['auth']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
  );

  $form['auth']['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
  );

  if ((int) $ncip_provider->version == 1) {
    $data_options = array(
      'Authentication Input' => t('Authentication Input'),
      'Block Or Trap' => t('Block Or Trap'),
      'Visible User Id' => t('Visible User Id'),
    );
    $data_options_default[] = 'Visible User Id';
  }
  elseif ((int) $ncip_provider->version == 2) {
    $data_options = array(
      'Block Or Trap' => t('Block Or Trap'),
      'Date Of Birth' => t('Date Of Birth'),
      'Name Information' => t('Name Information'),
      'User Address Information' => t('User Address Information'),
      'User Language' => t('User Language'),
      'User Privilege' => t('User Privilege'),
      'User Id' => t('User Id'),
      'Previous User Id' => t('Previous User Id'),
    );
    $data_options_default = array('Name Information', 'User Address Information');
  }

  $form['data'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User Data Desired'),
    '#options' => $data_options,
    '#default_value' => $data_options_default,
  );

  $form['loaned_items_desired'] = array(
    '#type' => 'radios',
    '#title' => t('Loaned Items Desired'),
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
    '#default_value' => 1,
    '#required' => TRUE,
  );

  $form['requested_items_desired'] = array(
    '#type' => 'radios',
    '#title' => t('Requested Items Desired'),
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
    '#default_value' => 1,
    '#required' => TRUE,
  );

  $form['user_fiscal_account_desired'] = array(
    '#type' => 'radios',
    '#title' => t('User Fiscal Account Desired'),
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
    '#default_value' => 1,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Lookup User service form submission
 */
function xc_ncip_provider_test_lookup_user_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $ncip_provider               = $values['ncip_provider'];
  $user_id                     = $values['user_id'];
  $data                        = array_filter($values['data'], 'is_string');
  $loaned_items_desired        = $values['loaned_items_desired'];
  $requested_items_desired     = $values['requested_items_desired'];
  $user_fiscal_account_desired = $values['user_fiscal_account_desired'];
  $auth                        = $values['auth'];
  $response = xc_ncip_provider_lookup_user($ncip_provider->ncip_provider_id,
    $user_id, $data, $loaned_items_desired, $requested_items_desired,
    $user_fiscal_account_desired, $auth, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Lookup Version service form
 */
function xc_ncip_provider_test_lookup_version_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['info'] = array(
    '#type' => 'item',
    '#title' => t('Information'),
    '#description' => t('No input is required for LookupVersion service. Simply click submit.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Lookup User service form submission
 */
function xc_ncip_provider_test_lookup_version_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  $response = xc_ncip_provider_lookup_version($ncip_provider->ncip_provider_id,
    'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Check Out Item service form
 */
function xc_ncip_provider_test_check_out_item_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['auth']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
  );

  $form['auth']['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
  );

  $form['id'] = array(
    '#type' => 'textfield',
    '#title' => 'Identifier',
    '#required' => TRUE,
  );

  $form['desired_date_due'] = array(
    '#type' => 'date',
    '#title' => t('Desired Date Due'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Check Out Item service form submission
 */
function xc_ncip_provider_test_check_out_item_form_submit($form, &$form_state) {
  $values           = $form_state['values'];
  $ncip_provider    = $values['ncip_provider'];
  $id               = $values['id'];
  $agency_id        = $values['agency_id'];
  $type             = NULL;
  $code             = NULL;
  $desired_date_due = $values['desired_date_due'];
  $auth             = $values['auth'];

  $response = xc_ncip_provider_check_out_item($ncip_provider->ncip_provider_id,
    $id, $agency_id, $type, $code, $desired_date_due, $auth, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Check In Item service form
 */
function xc_ncip_provider_test_check_in_item_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['auth']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
  );

  $form['auth']['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
  );

  $form['id'] = array(
    '#type' => 'textfield',
    '#title' => 'Identifier',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Check In Item service form submission
 */
function xc_ncip_provider_test_check_in_item_form_submit($form, &$form_state) {
  $values           = $form_state['values'];
  $ncip_provider    = $values['ncip_provider'];
  $id               = $values['id'];
  $agency_id        = $values['agency_id'];
  $type             = NULL;
  $code             = NULL;
  $auth             = $values['auth'];

  $response = xc_ncip_provider_check_in_item($ncip_provider->ncip_provider_id,
    $id, $agency_id, $type, $code, $auth, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Request Item service form
 */
function xc_ncip_provider_test_request_item_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['auth']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
  );

  $form['auth']['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
  );

  $item_identifier_type_options = array(
    'item' => t('Item ID'),
    'bib' => t('Bibliographic ID'),
  );

  $form['item_id'] = array(
    '#type' => 'textfield',
    '#title' => 'Item Identifier',
    '#required' => TRUE,
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => 'Item Identifier Type',
    '#options' => $item_identifier_type_options,
    '#default_value' => 'item',
    '#required' => TRUE,
  );

  $request_type_options = array(
    'Hold' => t('Hold'),
    'Callslip' => t('Callslip'),
  );

  $form['request_type'] = array(
    '#type' => 'select',
    '#title' => 'Request Type',
    '#options' => $request_type_options,
    '#default_value' => 'Hold',
    '#required' => TRUE,
  );

  $form['pickup_expiry_date'] = array(
    '#type' => 'date',
    '#title' => t('Pickup Expiry Date'),
    '#required' => TRUE,
  );

  $form['shipping_information_instructions'] = array(
    '#type' => 'textarea',
    '#title' => t('Shipping Instructions'),
  );

  $form['shipping_information_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipping Information Address'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Request Item service form submission
 */
function xc_ncip_provider_test_request_item_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $ncip_provider                     = $values['ncip_provider'];
  $item_id                           = $values['item_id'];
  $type                              = $values['type'];
  $request_type                      = $values['request_type'];
  $pickup_expiry_date                = $values['pickup_expiry_date'];
  $shipping_information_instructions = $values['shipping_information_instructions'];
  $shipping_information_address      = $values['shipping_information_address'];
  $auth                              = $values['auth'];

  $response = xc_ncip_provider_request_item($ncip_provider->ncip_provider_id,
    $item_id, $agency_id, $type, $code, $request_type, $pickup_expiry_date,
    $shipping_information_instructions, $shipping_information_address, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Request Item service form
 */
function xc_ncip_provider_test_recall_item_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['auth']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
  );

  $form['auth']['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
  );

  $form['item_id'] = array(
    '#type' => 'textfield',
    '#title' => 'Item Identifier',
    '#required' => TRUE,
  );

  $form['desired_due_date'] = array(
    '#type' => 'date',
    '#title' => t('Desired Due Date'),
    '#required' => TRUE,
  );

  $form['shipping_information_instructions'] = array(
    '#type' => 'textarea',
    '#title' => t('Shipping Instructions'),
  );

  $form['shipping_information_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipping Address'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Recall Item service form submission
 */
function xc_ncip_provider_test_recall_item_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  $user_id = $form_state['values']['user_id'];
  $item_id = $form_state['values']['item_id'];
  $desired_due_date = $form_state['values']['desired_due_date'];
  $shipping_information_address =
    $form_state['values']['shipping_information_address'];
  $response = xc_ncip_provider_recall_item($ncip_provider->ncip_provider_id,
    $item_id, $agency_id, $type, $desired_due_date, $shipping_information_address, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Request Item service form
 */
function xc_ncip_provider_test_renew_item_form($form, &$form_state, $ncip_provider) {
  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $form['auth']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
  );

  $form['auth']['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
  );

  $form['item_id'] = array(
    '#type' => 'textfield',
    '#title' => 'Item Identifier',
    '#required' => TRUE,
  );

  $form['desired_date_for_return'] = array(
    '#type' => 'date',
    '#title' => t('Desired Date for Return'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Renew Item service form submission
 */
function xc_ncip_provider_test_renew_item_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $ncip_provider                = $values['ncip_provider'];
  $user_id                      = $values['user_id'];
  $item_id                      = $values['item_id'];
  $desired_date_for_return      = $values['desired_date_for_return'];
  $shipping_information_address = $values['shipping_information_address'];
  $auth                         = $values['auth'];

  $response = xc_ncip_provider_renew_item($ncip_provider->ncip_provider_id,
    $item_id, $agency_id, $type, $code, $desired_date_for_return, $auth, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Test Authenticate User service form
 */
function xc_ncip_provider_test_authenticate_user_form($form, &$form_state, $ncip_provider) {
  if ((int) $ncip_provider->version != 1) {
    drupal_set_message(t('Authenticate User service not supported with this version'), 'error');
    return array();
  }

  $form = _xc_ncip_provider_test_form($ncip_provider);

  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Authentication type'),
    '#options' => array(
      'default' => t('Default username and password'),
      'ldap' => t('LDAP username and password'),
    ),
    '#default_value' => 'default',
    '#required' => TRUE,
  );

  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => 'Username',
    '#required' => TRUE,
  );

  $form['pass'] = array(
    '#type' => 'password',
    '#title' => 'Password',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );

  return $form;
}

/**
 * Test Authenticate User service form submission
 */
function xc_ncip_provider_test_authenticate_user_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  $type = $form_state['values']['type'];
  $user = $form_state['values']['user'];
  $pass = $form_state['values']['pass'];
  $credentials = array(
    'user' => $user,
    'pass' => $pass,
  );
  $response = xc_ncip_provider_authenticate_user(
    $ncip_provider->ncip_provider_id, $credentials, $type, 'xml');

  header('Content-Type: application/xml');
  header('Content-Length: ' . strlen($response));

  exit($response);
}

/**
 * Implementation of hook Menu
 */
function xc_ncip_provider_menu() {
  $items['admin/xc/ncip/provider'] = array(
    'title' => 'NCIP Servers',
    'description' => 'Point to your NCIP-compliant ILS interface (or to an XC NCIP Toolkit installed alongside your ILS).  You can add multiple ILSs.  You can set timeout values for server connections here as well.',
    'page callback' => 'xc_ncip_provider_list',
    'page arguments' => array(),
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );

  $items['admin/xc/ncip/provider/list'] = array(
    'title' => 'List',
    'description' => 'List NCIP servers',
    'page callback' => 'xc_ncip_provider_list',
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/xc/ncip/provider/add'] = array(
    'title' => 'Add NCIP server',
    'description' => 'Add a new NCIP server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_form'),
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider'] = array(
    'title callback' => 'xc_ncip_provider_title',
    'title arguments' => array(4),
    'description' => 'View the properties of a NCIP server',
    'page callback' => 'xc_ncip_provider_view',
    'page arguments' => array(4),
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_CALLBACK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/renew'] = array(
    'title callback' => 'xc_ncip_provider_title',
    'title arguments' => array(4),
    'description' => 'Renew an item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_renew_item_form', 4, 6, 7, 8, 9),
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_CALLBACK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/view'] = array(
    'title' => 'View',
    'description' => 'View the properties of a NCIP server',
    'page callback' => 'xc_ncip_provider_view',
    'page arguments' => array(4),
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit the properties of a NCIP server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_form', 4),
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/delete'] = array(
    'title' => 'Delete NCIP server',
    'description' => 'Delete a NCIP server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_delete_form', 4),
    'access arguments' => array(ADMINISTER_NCIP_PROVIDERS),
    'type' => MENU_CALLBACK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test'] = array(
    'title' => 'Test',
    'description' => 'Test a NCIP server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/request'] = array(
    'title' => 'Request',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/xc-get-availability'] = array(
    'title' => 'XC Get Availability',
    'description' => 'Test NCIP server against Get Availability verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_xc_get_availability_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/lookup-version'] = array(
    'title' => 'Lookup Version',
    'description' => 'Test NCIP server against Lookup Version verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_lookup_version_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/lookup-item'] = array(
    'title' => 'Lookup Item',
    'description' => 'Test NCIP server against Lookup Item verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_lookup_item_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/lookup-item-set'] = array(
    'title' => 'Lookup Item Set',
    'description' => 'Test NCIP server against Lookup Item Set verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_lookup_item_set_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/lookup-user'] = array(
    'title' => 'Lookup User',
    'description' => 'Test NCIP server against Lookup User verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_lookup_user_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/check-out-item'] = array(
    'title' => 'Check Out Item',
    'description' => 'Test NCIP server against Check Out Item verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_check_out_item_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/check-in-item'] = array(
    'title' => 'Check In Item',
    'description' => 'Test NCIP server against Check In Item verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_check_in_item_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/request-item'] = array(
    'title' => 'Request Item',
    'description' => 'Test NCIP server against Request Item verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_request_item_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/recall-item'] = array(
    'title' => 'Recall Item',
    'description' => 'Test NCIP server against Recall Item verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_recall_item_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/renew-item'] = array(
    'title' => 'Renew Item',
    'description' => 'Test NCIP server against Renew Item verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_renew_item_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/xc/ncip/provider/%xc_ncip_provider/test/authenticate-user'] = array(
    'title' => 'Authenticate User',
    'description' => 'Test NCIP server against Authenticate User verb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ncip_provider_test_authenticate_user_form', 4),
    'access arguments' => array(TEST_NCIP_PROVIDERS),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Creates or loads an NCIP connection for the current user to the requested
 * NCIP provider
 *
 * @param $ncip_provider_id (int)
 *   The NCIP provider's identifier
 * @param $timeout (boolean)
 *   Whether or not apply timeout (default: TRUE
 */
function xc_ncip_provider_connect($ncip_provider_id, $timeout = FALSE) {
  // Current NCIP provider properties
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);

  $ncip_provider_application = xc_ncip_provider_application($ncip_provider->version);

  // Load or create the NCIP connection object, setting it up with the correct
  // properties
  $create_connection = FALSE;
  if (!isset($_SESSION['xc_ncip_provider_connections'][$ncip_provider_id])) {
    $create_connection = TRUE;
  }
  else {
    $connection_id = $_SESSION['xc_ncip_provider_connections'][$ncip_provider_id];
    if (!$connection_id) {
      $create_connection = TRUE;
    }
    else {
      $connection = $ncip_provider_application->load_connection($connection_id);
      if (!$connection || $ncip_provider->last_modification > $connection->get_last_modification()) {
        $create_connection = TRUE;
      }
    }
  }

  if ($create_connection) {
    $connection = $ncip_provider_application->create_connection($ncip_provider->host,
      $ncip_provider->port, $ncip_provider->path);
    if ($connection) {
      $connection->set_to_agency_id($ncip_provider->to_agency_id['scheme'],
        $ncip_provider->to_agency_id['value']);
      $connection->set_to_system_id($ncip_provider->to_system_id['scheme'],
        $ncip_provider->to_system_id['value']);
      $connection->update(); // THIS NEEDS TO BE HERE
    }
  }

  if (!$timeout) {
    $connection->set_timeout(0);
  }

  if ($connection) {
    // Store correct connection_id into session
    $_SESSION['xc_ncip_provider_connections'][$ncip_provider_id] = $connection->get_connection_id();

    // Connect and return the connection object
    $connection->connect();
    return $connection;
  }
}

/**
 * Destroys the NCIP connection for the current user to the specified NCIP
 * Provider
 */
function xc_ncip_provider_disconnect($ncip_provider_id) {
  // Make sure NCIP provider is launched
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $ncip_provider_application = xc_ncip_provider_application($ncip_provider->version);

  // Destroy the NCIP connection object, if it exists
  $connection_id = $_SESSION['xc_ncip_provider_connections'][$ncip_provider_id];
  if ($connection = $ncip_provider_application->load_connection($connection_id)) {
    $ncip_provider_application->destroy_connection($connection_id);
  }

  // Remove connection from user session
  unset($_SESSION['xc_ncip_provider_connections'][$ncip_provider_id]);
}

/**
 * Authenticate session with NCIP
 *
 * @param $ncip_provider_id
 *    NCIP server/provider ID, if not applicable, it should be NULL
 * @param $message
 *    NCIP message, if not applicable, it should be NULL
 * @param $user
 *    Username as a string
 * @param $password
 *    Password as a string
 * @param $type
 *    Type of NCIP authentication ('ldap' or 'default')
 * @return
 *    TRUE if authentication has succeeded, FALSE otherwise
 */
function xc_ncip_provider_authenticate($ncip_provider_id, &$message, $user, $password, $type) {
  if ($message instanceof NCIPMessage) {
    $version = $message->get_version();
  }
  if (!$version) {
    $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
    $version = $ncip_provider->version;
  }

  switch ($version) {
    case 1:
    case 1.01:
      $credentials = array(
        'user' => $user,
        'pass' => $password,
      );
      $result = xc_ncip_provider_authenticate_user($ncip_provider_id, $credentials, $type);
      if (!($result['results'] && $unique_user_id = current($result['results']))) {
        return FALSE;
      }
      $message->insert_string(
        array('UniqueUserId', 'UserIdentifierValue'),
        trim($unique_user_id)
      );
      return TRUE;
    case 2:
    case 2.01:
    default:
      // username
      $message->insert_string(
        array(array('name' => 'AuthenticationInput', 'delta' => 0), 'AuthenticationInputData'),
        $user
      );
      $message->insert_string(
        array(array('name' => 'AuthenticationInput', 'delta' => 0), 'AuthenticationDataFormatType'),
        'text'
      );
      $message->insert_string(
        array(array('name' => 'AuthenticationInput', 'delta' => 0), 'AuthenticationInputType'),
        $type == 'ldap' ? 'LDAPUsername' : 'Username'
      );

      // password
      $message->insert_string(
        array(array('name' => 'AuthenticationInput', 'delta' => 1), 'AuthenticationInputData'),
        $password
      );
      $message->insert_string(
        array(array('name' => 'AuthenticationInput', 'delta' => 1), 'AuthenticationDataFormatType'),
        'text'
      );
      $message->insert_string(
        array(array('name' => 'AuthenticationInput', 'delta' => 1), 'AuthenticationInputType'),
        $type === 'ldap' ? 'LDAPPassword' : 'Password'
      );
      return TRUE;
  }
}

/**
 * Send a request to the NCIP provider and return the result
 *
 * @param $ncip_provider_id
 *    NCIP provider identifier to connect to
 * @param $data
 *    Either NCIPMessage or DOMDocument object or an XML string
 * @param $return_xml
 *    'xml' to return an XML string, 'dom' to return a DOMDocument object,
 *    or 'message' to return the NCIPMessage object (the default option)
 * @return
 *    Either XML string, DOMDocument object, or NCIPMessage object as specified
 *    in the $return_type
 */
function xc_ncip_provider_request($ncip_provider_id, $data, $return_type = 'message') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  if ($data instanceof NCIPMessage) {
    $request = $data;
  }
  elseif ($data instanceof DOMDocument) {
    $request = NCIPMessage::from_dom($data, $connection);
  }
  elseif ($data instanceof SimpleXMLElement) {
    $request = NCIPMessage::from_simplexml($data, $connection);
  }
  elseif ($data = (string) $data) {
    $request = NCIPMessage::from_xml($data, $connection);
  }
  else {
    return;
  }

  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // do nothing
    }
  }
  if ($response->has_problem()) {
    return $return_type == 'boolean' ? FALSE : array('error' => $response->get_problem());
  }
  else {
    return $return_type == 'boolean' ? TRUE : array('results' => TRUE);
  }
}

/**
 * Authenticate a user via NCIP provider
 *
 * @param $ncip_provider_id
 *    NCIP provider identifier to connect to
 * @param $credentials
 *    Array of credentials, username and password
 * @param $type
 *    Either 'default' or 'ldap' for type of authentication
 * @param $return_type
 *    Type of array or object return, can be either 'results' for an associative
 *    array of results, 'xml' for the XML message, 'dom' to return a
 *    DOMDocument object, or 'message' to return the NCIPMessage object
 *
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_authenticate_user($ncip_provider_id,
    $credentials = array(), $type = 'default', $return_type = 'results') {

  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'AuthenticateUser');
  if ((int) $request->get_version() != 1) {
    drupal_set_message(t('Authenticate User service not supported with this version'), 'error');
    return NULL;
  }

  foreach ($credentials as $key => $value) {
    switch ($key) {
      case 'username':
      case 'user':
        if (empty($user)) {
          $user = $value;
        }
        break;
      case 'password':
      case 'pass':
        if (empty($pass)) {
          $pass = $value;
        }
        break;
    }
  }

  // Username and Password
  switch ($type) {
    case 'ldap':
      $user_type = 'LDAPUsername';
      $pass_type = 'LDAPPassword';
      break;
    case 'default':
    default:
      $user_type = 'Username';
      $pass_type = 'Password';
      break;
  }

  // Insert username credentials into request message
  $request->insert_string(
    array(array('name' => 'AuthenticationInput', 'delta' => 0), 'AuthenticationInputData'),
    $user
  );
  $request->insert_scheme(
    array(array('name' => 'AuthenticationInput', 'delta' => 0), 'AuthenticationDataFormatType'),
    'Text'
  );
  $request->insert_scheme(
    array(array('name' => 'AuthenticationInput', 'delta' => 0), 'AuthenticationInputType'),
    $user_type
  );

  // Insert password credentials into request message
  $request->insert_string(
    array(array('name' => 'AuthenticationInput', 'delta' => 1), 'AuthenticationInputData'),
    $pass
  );
  $request->insert_scheme(
    array(array('name' => 'AuthenticationInput', 'delta' => 1), 'AuthenticationDataFormatType'),
    'Text'
  );
  $request->insert_scheme(
    array(array('name' => 'AuthenticationInput', 'delta' => 1), 'AuthenticationInputType'),
    $pass_type
  );

  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
        break;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return $return_type == 'boolean' ? FALSE : array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    $id = (string) $response->message->{$response->get_service()}->UniqueUserId->UserIdentifierValue;
    return array('results' => array($id => $id));
  }
  else {
    if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
      $msg = t('Unable to send message to remote NCIP application at !url', array('!url' => $connection->get_url()));
    }
    drupal_set_message($msg, 'error');
    xc_log_error('NCIP', $msg);
  }
}

/**
 * Get the availability and other information for multiple items
 *
 * @param $ncip_provider_id
 *    NCIP provider identifier to connect to
 * @param $item_set
 *    Associative array containing arrays of bibliographical (possible keys: 'bib', 'biblio',
 *    'bibliographic'), item ('item'), and holdings ('holding', 'holdings') IDs
 * @param $return_type
 *    Type of array or object return, can be either 'results' for an associative
 *    array of results, 'xml' for the XML message, 'dom' to return a
 *    DOMDocument object, or 'message' to return the NCIPMessage object
 * @param $timeout (Boolean)
 *   If FALSE (which is the default value) NCIP request will not apply timeout
 *   for the request. Otherwise if the NCIP server will not reply in a given
 *   amount of time, the connection will broken, and the return value will
 *   contain an error message reflecting to the connection timeout.
 *
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_xc_get_availability($ncip_provider_id,
   $item_set = array(), $return_type = 'results', $timeout = FALSE) {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id, $timeout);
  if (!$connection) {
    return NULL;
  }

  $request = new NCIPMessage($connection, 'XCGetAvailability');
  if ((int) $request->get_version() != 1) {
    drupal_set_message(t('XC Get Availability service not supported with this version (%version)', array('%version' => $request->get_version())), 'error');
    return NULL;
  }

  $i = $j = $k = 0;
  foreach ($item_set as $type => $array) {
    switch ($type) {
      case 'bib':
      case 'biblio':
      case 'bibliographic':
        foreach ($array as $item) {
          if (!is_array($item)) {
            $item = array('id' => $item);
          }
          $request->insert_scheme(
            // path
            array(
              array('name' => 'VisibleItemId', 'delta' => $i),
              'VisibleItemIdentifierType',
            ),
            // value
            'bibliographic ID'
          );
          $request->insert_string(
            // path
            array(
              array('name' => 'VisibleItemId', 'delta' => $i),
              'VisibleItemIdentifier',
            ),
            // value
            trim($item['id'])
          );
          $i++;
        }
        break;
      case 'holding':
      case 'holdings':
        foreach ($array as $item) {
          if (!is_array($item)) {
            $item = array('id' => $item);
          }
          $request->insert_scheme(
            array(
              array('name' => 'VisibleItemId', 'delta' => $j),
              'VisibleItemIdentifierType',
            ),
            'holdings ID'
          );
          $request->insert_string(
            array(
              array('name' => 'VisibleItemId', 'delta' => $j),
              'VisibleItemIdentifier',
            ),
            trim($item['id'])
          );
          $j++;
        }
        break;
      case 'item':
      default:
        foreach ($array as $item) {
          if (!is_array($item)) {
            $item = array('id' => $item);
          }
          $request->insert_scheme(
            array(
              array('name' => 'UniqueItemId', 'delta' => $k),
              'UniqueAgencyId',
            ),
            $ncip_provider->to_agency_id['value'],
            $ncip_provider->to_agency_id['scheme']
          );
          $request->insert_string(
            array(
              array('name' => 'UniqueItemId', 'delta' => $k),
              'ItemIdentifierValue',
            ),
            trim($item['id'])
          );
          $k++;
        }
        break;
    }
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request)) {
    if ($connection->send($request)) {
      $response = $connection->receive();
      if (!is_a($response, 'NCIPMessage')) {
        xc_log_info('ncip', '$response is not NCIPMessage, but class '
          . get_class($response) . ' and ' . gettype($response));
        return array('error' => array('ErrorMessage' => 'Unkown problem'));
      }

      switch ($return_type) {
        case 'xml':
        case 'string':
          return $response->to_xml();
          break;
        case 'dom':
        case 'domdocument':
          return $response->to_dom();
          break;
        case 'simplexml':
          return $response->message;
          break;
        case 'message':
          return $response;
          break;
        case 'boolean':
        case 'results':
        default:
          // Do nothing
          break;
      }

      if ($response->has_problem()) {
        return $return_type == 'boolean' ? FALSE : array('error' => $response->get_problem());
      }
      elseif ($return_type == 'boolean') {
        return TRUE;
      }

      $item_ids = array();
      $bib_ids = array();
      $holdings_ids = array();

      $items = $response->message->{$response->get_service()}->XCItemAvailability;
      foreach ($items as $_item) {
        $item_id = (string) $_item->ItemId;
        $bib_id = (string) $_item->BibId;
        $holdings_id = (string) $_item->HoldingsId;

        if ($_item->BibId) {
          if (!$_item->ItemId) {
            xc_log_error('NCIP', 'No ItemId for bib id: ' . $_item->BibId);
            continue;
          }
          elseif (count($_item->ItemId) > 1) {
            xc_log_error('NCIP', 'Multiple ItemIds (' . var_export($_item, TRUE) . ') for bib id: ' . $_item->BibId);
            continue;
          }
        }

        // Parse optional fields
        if (isset($_item->ItemOptionalFields)) {
          $_item = _xc_ncip_provider_item_optional_fields($_item->ItemOptionalFields->children());
        }

        // Add additional IDs
        if ($item_id && !$_item['ItemId']) {
          $_item['ItemId'] = $item_id;
        }
        if ($bib_id && !$_item['BibId']) {
          $_item['BibId'] = $bib_id;
        }
        if ($holdings_id && !$_item['HoldingsId']) {
          $_item['HoldingsId'] = $holdings_id;
        }

        // Place into arrays
        if ($_item) {
          if ($item_id) {
            $item_ids[$item_id][] = $_item;
          }
          if ($bib_id) {
            $bib_ids[$bib_id][] = $_item;
          }
          if ($holdings_id) {
            $holdings_ids[$holdings_id][] = $_item;
          }
        }
      }

      // Different aliases for the same set of item ID items
      if (!empty($item_set)) {
        $return['item'] = &$item_set;
      }

      // Different aliases for the same set of bibliographic ID items
      if (!empty($bib_ids)) {
        $return['bib'] = &$bib_ids;
        $return['biblio'] = &$bib_ids;
        $return['bibliographic'] = &$bib_ids;
      }

      // Different aliases for the same set of holdings ID items
      if (!empty($holdings_ids)) {
        $return['holding'] = &$holdings_ids;
        $return['holdings'] = &$holdings_ids;
      }

      return array('results' => $return);
    }
    else {
      $errormsg = $connection->get_errormsg();
      if (!empty($errormsg)) {
        // send mail if necessary
        $admin_alerted = xc_settings_get('xc_ncip_provider_admin_alerted', 0);
        if ($admin_alerted == 0) {
          // send mail message to admin
          xc_settings_set('xc_ncip_provider_admin_alerted', 1);
          xc_ncip_provider_sendmail($errormsg);
        }

        // return as array
        return array('error' => array('ErrorMessage' => $errormsg));
      }
      else {
        xc_log_error('ncip', t('Unable to send message to remote NCIP application'));
      }
    }
  }
}

/**
 * Look up NCIP version
 *
 * @param $ncip_provider_id
 *    NCIP provider identifier to connect to
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_lookup_version($ncip_provider_id, $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'LookupVersion');

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
        break;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return $return_type == 'boolean' ? FALSE : array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    $return['VersionSupported'] = (string) $response->message->{$response->get_service()}->VersionSupported;

    return array('results' => $return);
  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

/**
 * Look up an item
 *
 * @param $ncip_provider_id
 *    NCIP provider identifier to connect to
 * @param $item_id
 *    The bib, item, or holdings ID
 * @param $type
 *    Either 'bib', 'item', or 'holdings'
 * @param $data
 *    ItemElementType data to return
 * @param $current_borrower_desired
 *    TRUE to return information about the current borrower
 * @param $current_requesters_desired
 *    TRUE to return information about the current requesters
 * @param $return_type
 *    Type of array or object return, can be either 'results' for an associative
 *    array of results, 'xml' for the XML message, 'dom' to return a
 *    DOMDocument object, or 'message' to return the NCIPMessage object
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_lookup_item($ncip_provider_id, $item_id, $agency_id = NULL,
    $type = 'bib', $code = NULL, $data = array('Circulation Status', 'Location'),
    $current_borrower_desired = FALSE, $current_requesters_desired = FALSE,
    $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'LookupItem');
  switch ($request->get_version()) {
    case 1:
    case 1.01:
      $version = 1;
      $unique = 'Unique';
      break;
    case 2:
    case 2.01:
    default:
      $version = 2;
      $unique = '';
      $type = 'item'; // type is always item
      break;
  }

  switch ($type) {
    case 'bib':
    case 'biblio':
    case 'bibliographic':
      $request->insert_scheme(
        array('VisibleItemId', 'VisibleItemIdentifierType'),
        'bibliographic ID'
      );
      $request->insert_string(
        array('VisibleItemId', 'VisibleItemIdentifier'),
        trim($item_id)
      );
      break;
    case 'holding':
    case 'holdings':
      $request->insert_scheme(
        array('VisibleItemId', 'VisibleItemIdentifierType'),
        'holdings ID'
      );
      $request->insert_string(
        array('VisibleItemId', 'VisibleItemIdentifier'),
        trim($item_id)
      );
      break;
    case 'item':
    default:
      $request->insert_scheme(
        array($unique . 'ItemId', $unique . 'AgencyId'),
        $ncip_provider->to_agency_id['value'],
        $ncip_provider->to_agency_id['scheme']
      );
      // TODO: add support for ItemIdentifierType, however we don't know what
      // should go in there
      $request->insert_string(
        array($unique . 'ItemId', 'ItemIdentifierValue'),
        trim($item_id)
      );
      break;
  }

  $i = 0;
  foreach ($data as $value) {
    $request->insert_scheme(
      array(array('name' => 'ItemElementType', 'delta' => $i)),
      $value
    );
    $i++;
  }

  // Current borrower
  if ($current_borrower_desired) {
    $request->insert_element('CurrentBorrowerDesired');
  }

  // Current requesters
  if ($current_requesters_desired && ((int) $version) == 2) {
    $request->insert_element('CurrentRequestersDesired');
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return $return_type == 'boolean' ? FALSE : array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    $return = _xc_ncip_provider_item_optional_fields($response->message->{$response->get_service()}->ItemOptionalFields->children());

    // Current borrower
    if ($response->message->{$response->get_service()}->CurrentBorrower) {
      $return['CurrentBorrower'] = (string) $response->message->{$response->get_service()}->CurrentBorrower->UserIdentifierValue;
    }

    return array('results' => array($item_id => $return));
  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

/**
 * Look up a set of items
 *
 * @param $ncip_provider_id
 *    NCIP provider identifier to connect to
 * @param $item_set
 *    Associative array containing arrays of bibliographical (possible keys: 'bib', 'biblio',
 *    'bibliographic'), item ('item'), and holdings ('holding', 'holdings') IDs
 * @param $data
 *    ItemElementType data to return
 * @param $current_borrower_desired
 *    TRUE to return information about the current borrower
 * @param $current_requesters_desired
 *    TRUE to return information about the current requesters
 * @param $next_item_token
 *    Text string from previous response used to retrieve next set of items
 * @param $maximum_items_count
 *    Maximum number of items to return in response
 * @param $return_type
 *    Type of array or object return, can be either 'results' for an associative
 *    array of results, 'xml' for the XML message, 'dom' to return a
 *    DOMDocument object, or 'message' to return the NCIPMessage object
 * @see xc_ncip_provider_xc_get_availability()
 * @see xc_ncip_provider_lookup_item()
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_lookup_item_set($ncip_provider_id, $item_set,
    $data = array('Circulation Status', 'Location'),
    $current_borrower_desired = FALSE,
    $current_requesters_desired = FALSE,
    $next_item_token = NULL,
    $maximum_items_count = NULL,
    $return_type = 'results',
    $timeout = FALSE) {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id, $timeout);
  if (!$connection) {
    return NULL;
  }

  $request = new NCIPMessage($connection, 'LookupItemSet', TRUE);
  if ((int) $request->get_version() != 2) {
    drupal_set_message(t('Lookup Item Set service not supported with this version'), 'error');
    return NULL;
  }

  $bib_delta = 0;
  $item_delta = 0;

  foreach ($item_set as $type => $array) {
    switch ($type) {
      case 'bib':
      case 'bib_record':
      case 'biblio':
      case 'biblio_record':
      case 'bibliographic':
      case 'bibliographic_record':
        foreach ($array as $item) {
          if (!is_array($item)) {
            $item = array('id' => $item);
          }

          $request->insert_scheme(
            array(
              array('name' => 'BibliographicId', 'delta' => $bib_delta),
              'BibliographicRecordId',
              'BibliographicRecordIdentifier',
            ),
            trim($item['id'])
          );

          if (isset($item['code'])) {
            $request->insert_scheme(
              array(
                array('name' => 'BibliographicId', 'delta' => $bib_delta),
                'BibliographicRecordId',
                'BibliographicRecordIdentifierCode',
              ),
              $item['code']['value'],
              $item['code']['scheme']
            );
          }
          else {
            if (isset($item['agency_id']) && !is_array($item['agency_id'])) {
              $item['agency_id']['value'] = $item['agency_id'];
            }
            $request->insert_scheme(
              array(
                array('name' => 'BibliographicId', 'delta' => $bib_delta),
                'BibliographicRecordId',
                'AgencyId',
              ),
              isset($item['agency_id']['value']) ? $item['agency_id']['value'] : $ncip_provider->to_agency_id['value'],
              isset($item['agency_id']['scheme']) ? $item['agency_id']['scheme'] : $ncip_provider->to_agency_id['scheme']
            );
          }
          $bib_delta++;
        }
        break;

      case 'bib_item':
      case 'biblio_item':
      case 'bibliographic_item':
        foreach ($array as $item) {
          if (!is_array($item)) {
            $item = array('id' => $item);
          }

          $request->insert_scheme(
            array(
              array('name' => 'BibliographicId', 'delta' => $bib_delta),
              'BibliographicItemId',
              'BibliographicItemIdentifier',
            ),
            trim($item['id'])
          );

          if ($item['code']) {
            $request->insert_scheme(
              array(
                array('name' => 'BibliographicId', 'delta' => $bib_delta),
                'BibliographicItemId',
                'BibliographicItemIdentifierCode',
              ),
              $item['code']['value'],
              $item['code']['scheme']
            );
          }
          if ($item['agency_id'] && !is_array($item['agency_id'])) {
            $item['agency_id']['value'] = $item['agency_id'];
          }
          $request->insert_scheme(
            array(
              array('name' => 'BibliographicId', 'delta' => $bib_delta),
              'BibliographicItemId',
              'AgencyId',
            ),
            $item['agency_id'] ? $item['agency_id']['value'] : $ncip_provider->to_agency_id['value'],
            $item['agency_id'] ? $item['agency_id']['scheme'] : $ncip_provider->to_agency_id['scheme']
          );
          $bib_delta++;
        }
        break;

      case 'item':
      default:
        foreach ($array as $item) {
          if (!is_array($item)) {
            $item = array('id' => $item);
          }

          // TODO: add support for ItemIdentifierType, however we don't know what
          // should go in there
          $request->insert_string(
            array(array('name' => 'ItemId', 'delta' => $item_delta), 'ItemIdentifierValue'),
            trim($item['id'])
          );
          if ($item['agency_id'] && !is_array($item['agency_id'])) {
            $item['agency_id']['value'] = $item['agency_id'];
          }
          $request->insert_scheme(
            array(array('name' => 'ItemId', 'delta' => $item_delta), 'AgencyId'),
              $item['agency_id'] ? $item['agency_id']['value'] : $ncip_provider->to_agency_id['value'],
              $item['agency_id'] ? $item['agency_id']['scheme'] : $ncip_provider->to_agency_id['scheme']
          );
          ++$item_delta;
        }
        break;
    } // switch
  } // foreach

  $i = 0;
  foreach ($data as $value) {
    $request->insert_scheme(
      array(array('name' => 'ItemElementType', 'delta' => $i)),
      $value,
      'http://www.niso.org/ncip/v1_0/schemes/itemelementtype/itemelementtype.scm'
    );
    $i++;
  }

  // Current borrower (possibly illegal)
  if ($current_borrower_desired) {
    $request->insert_element('CurrentBorrowerDesired');
  }

  // Current requesters (possibly illegal)
  if ($current_requesters_desired) {
    $request->insert_element('CurrentRequestersDesired');
  }

  // Next Item Token
  if ($next_item_token) {
    $request->insert_string('NextItemToken', $next_item_token);
  }

  // Maximum Items Count
  if ($maximum_items_count) {
    $request->insert_string('MaximumItemsCount', $maximum_items_count);
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    $root = $response->has_ext()
      ? $response->message->Ext->{$response->get_service()}
      : $response->message->{$response->get_service()};
    if ($response->has_problem()) {
      return array('error' => $response->get_problem());
    }
    elseif ($response->get_service() == 'Problem') {
      return array('error' => (string) $root->ProblemType);
    }
    elseif (isset($root->BibInformation->Problem)) {
      // special case if Problem element is within BibInformation
      return array(
        'error' => $response->get_problem(
          $root->BibInformation->Problem
        ),
      );
    }
    elseif (isset($root->BibInformation->HoldingsSet->Problem)) {
      // special case if Problem element is within HoldingsSet
      return array(
        'error' => $response->get_problem(
          $root->BibInformation->HoldingsSet->Problem
        ),
      );
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    $return = array();

    if ($root->BibInformation->NextItemToken) {
      $return['NextItemToken'] = (string) $root->BibInformation->NextItemToken;
    }

    $item_ids = array();
    $bib_ids = array();
    $holdings_ids = array();

    $bib_informations = $response->message->Ext->{$response->get_service()}->BibInformation;
    if ($bib_informations) {
      foreach ($bib_informations as $bib_information) {
        // get bib id
        // $bib = array();
        $bib_id = (string) $bib_information->BibliographicId->BibliographicRecordId->BibliographicRecordIdentifier;

        // $bib['bibid'] = $bib_id;

        // get bib description
        if (in_array('Bibliographic Description', $data)) {
          $desc = $bib_information->BibliographicDescription;
          if ($desc != null && $desc->count() > 0) {
            $children = $desc->children('ns1', TRUE);
            foreach ($children as $child) {
              $bib['BibliographicDescription'][$child->getName()] = (string) $child;
            }
          }
        }

        // holdings
        // $bib['HoldingsSet'] = array();
        $holdings_set = $bib_information->HoldingsSet;
        foreach ($holdings_set as $holding) {
          $holdings_id = (string) $holding->HoldingsSetId;
          // $holdings_call_number = (string) $holding->CallNumber;

          $items = $holding->ItemInformation;
          $_items = array();
          foreach ($items as $item_object) {
            $item_id = (string) $item_object->ItemId->ItemIdentifierValue;
            /*
             if ($item_object->BibliographicDescription->ItemOptionalFields->BibliographicDescription->BibliographicRecordId) {
             $bib_id = (int) $item_object->BibliographicDescription->ItemOptionalFields->BibliographicDescription->BibliographicRecordIdentifier;
             }
             */
//          elseif ($item_object->BibliographicDescription->ItemOptionalFields->BibliographicDescription->BibliographicItemId) {
//            $bib_id = (string) $item_object->BibliographicDescription->ItemOptionalFields->BibliographicDescription->BibliographicItemIdentifier;
//          }


            if ($item_object->BibId) {
              if (!$item_id->ItemId) {
                xc_log_error('NCIP', 'No ItemId for bib id: ' . $item_object->BibId);
                continue;
              }
              elseif (count($item_object->BibliographicDescription->ItemOptionalFields->BibliographicDescription->BibliographicItemId) > 1) {
                xc_log_error('NCIP', 'Multiple ItemIds (' . var_export($item_id, TRUE) . ') for bib id: ' . $item_object['BibId']);
                continue;
              }
            }

            // Parse optional fields
            // TODO: find more appropriate way to parse item information
            // $_item = _xc_ncip_provider_parse_item_optional_fields($item_object->BibliographicDescription->ItemOptionalFields->children());

            $optional_fields = $item_object->ItemOptionalFields;
            $_item = array(
              'ItemId' => $item_id,
              'CirculationStatus' => (string) $optional_fields->CirculationStatus,
              'HoldQueueLength' => (string) $optional_fields->HoldQueueLength,
              'ItemDescription' => array(
                'CallNumber' => (string) $optional_fields->ItemDescription->CallNumber,
              ),
              'Location' => (string) $optional_fields->Location->LocationName->LocationNameInstance->LocationNameValue,
            );

            // TODO: UnstructuredHoldingsData???
            if (isset($optional_fields->ItemDescription->HoldingsInformation)) {
              $_item['ItemDescription']['HoldingsInformation'] = (string) $optional_fields->ItemDescription->HoldingsInformation->UnstructuredHoldingsData;
            }

            // Add additional IDs
            if ($item_id && !isset($_item['ItemId'])) {
              $_item['ItemId'] = $item_id;
            }
            if ($bib_id && !isset($_item['BibId'])) {
              $_item['BibId'] = $bib_id;
            }
            if ($holdings_id && !isset($_item['HoldingsId'])) {
              $_item['HoldingsId'] = $holdings_id;
            }

            // Place into arrays
            if ($_item) {
              if ($item_id) {
                $item_ids[$item_id][] = $_item;
              }
              if ($bib_id) {
                $bib_ids[$bib_id][] = $_item;
              }
              if ($holdings_id) {
                $holdings_ids[$holdings_id][] = $_item;
              }

              $_items[$item_id] = $_item;
            }
          }

//          $bib['HoldingsSet'][$holdings_id] = array(
//            'CallNumber' => $holdings_call_number,
//            'ItemInformation' => $_items,
//          );
        }


        // foreach holdings
//        $return['BibInformation'][$bib['bibid']] = $bib;
      } // foreach bibs
    }

    // Different aliases for the same set of item ID items
    if (!empty($item_ids)) {
      $return['item'] = &$item_ids;
    }


    // Different aliases for the same set of bibliographic ID items
    if (!empty($bib_ids)) {
      $return['bib'] = &$bib_ids;
      // $return['biblio'] = &$bib_ids;
      // $return['bibliographic'] = &$bib_ids;
    }

    // Different aliases for the same set of holdings ID items
    if (!empty($holdings_ids)) {
      $return['holding'] = &$holdings_ids;
    }

    return array('results' => $return);
  }
  else {
    $errormsg = $connection->get_errormsg();
    if (!empty($errormsg)) {
      // send mail if necessary
      $admin_alerted = xc_settings_get('xc_ncip_provider_admin_alerted', 0);
      if ($admin_alerted == 0) {
        // send mail message to admin
        xc_settings_set('xc_ncip_provider_admin_alerted', 1);
        xc_ncip_provider_sendmail($errormsg);
      }

      // return as array
      return array('error' => array('ErrorMessage' => $errormsg));
    }
    else {
      xc_log_error('ncip', t('Unable to send message to remote NCIP application'));
    }
  }
}

/**
 * Lookup a user via NCIP provider
 *
 * @param $ncip_provider_id
 *    NCIP provider identifier to connect to
 * @param $user_id
 *    User ID to look up
 * @param $data
 *    Array of UserElementType data to return
 * @param $loaned_items_desired
 *    TRUE if a list of the user's loaned items is desired
 * @param $requested_items_desired
 *    TRUE if a list of the user's requested items is desired
 * @param $user_fiscal_account_desired
 *    TRUE if user fiscal account is desired
 * @param $return_type
 *    Type of array or object return, can be either 'results' for an associative
 *    array of results, 'xml' for the XML message, 'dom' to return a
 *    DOMDocument object, or 'message' to return the NCIPMessage object
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_lookup_user($ncip_provider_id, $user_id,
    $data = array('Visible User Id', 'User Address Information'),
    $loaned_items_desired = FALSE, $requested_items_desired = FALSE,
    $user_fiscal_account_desired = FALSE, $auth = NULL,
    $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'LookupUser');
  switch ($request->get_version()) {
    case 1:
    case 1.01:
      $version = 1;
      $unique = 'Unique';
      break;
    case 2:
    case 2.01:
    default:
      $version = 2;
      $unique = '';
      break;
  }

  // Authentication
  if (array_filter($auth)
      && !xc_ncip_provider_authenticate($ncip_provider_id, $request, $auth['user'], $auth['pass'], $auth['type'])) {
    return $return_type == 'results'
      ? array('error' => t('Failed attempt to authenticate user'))
      : NULL;
  }

  // User ID
  // FIXME: Until IDs are properly worked out, cannot accept for version 2
  if ((int) $request->get_version() == 1 && $user_id) {
    $request->insert_scheme(
      array($unique . 'UserId', $unique . 'AgencyId'),
      $ncip_provider->to_agency_id['value'],
      $ncip_provider->to_agency_id['scheme']
    );
    if (!strval($request->message->{$request->get_service()}->{$unique . 'UserId'})) {
      // user id may have already been set in the authentication process; this is
      // primarily true for version 1 since in version 2, NCIP Toolkit behaves
      // differently
      $request->insert_string(
        array($unique . 'UserId', 'UserIdentifierValue'),
        trim($user_id)
      );
    }
  }

  $i = 0;
  foreach ($data as $array_value) {
    $request->insert_scheme(
      array(array('name' => 'UserElementType', 'delta' => $i)),
      $array_value
    );
    $i++;
  }

  // Desired elements
  if ($loaned_items_desired) {
    $request->insert_element('LoanedItemsDesired');
  }

  if ($requested_items_desired) {
    $request->insert_element('RequestedItemsDesired');
  }

  if ($user_fiscal_account_desired) {
    $request->insert_element('UserFiscalAccountDesired');
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    $user = array();

    $UserOptionalFields = $response->message->{$response->get_service()}->UserOptionalFields;
    // VisibleUserId
    if (isset($UserOptionalFields) && $visible_user_id = $UserOptionalFields->VisibleUserId) {
      $cleared_type = preg_replace('/\s+/', '', (string) $visible_user_id->VisibleUserIdentifierType->Value);
      $user[$cleared_type] = (string) $visible_user_id->VisibleUserIdentifier;
      if (!$user_id) {
        $user_id = $user[$cleared_type];
      }
    }

    // UserId
    if ($user_identifier = $response->message->{$response->get_service()}->UserId) {
      $user['UserId'] = (string) $user_identifier->UserIdentifierValue;
      if (!$user_id) {
        $user_id = $user['UserId'];
      }
    }

    // User name
    if (isset($UserOptionalFields->NameInformation) && isset($UserOptionalFields->NameInformation->PersonalNameInformation)) {
      $PersonalNameInformation = $UserOptionalFields->NameInformation->PersonalNameInformation;
      if (isset($PersonalNameInformation->StructuredPersonalUserName)) {
        $StructuredPersonalUserName = $PersonalNameInformation->StructuredPersonalUserName;
        $user['FullName'] = '';
        if (isset($StructuredPersonalUserName->GivenName)) {
          $user['FullName'] .= (string) $StructuredPersonalUserName->GivenName;
        }
        if (isset($StructuredPersonalUserName->Initials)) {
          if ($user['FullName'] != '') {
            $user['FullName'] .= ' ';
          }
          $user['FullName'] .= (string) $StructuredPersonalUserName->Initials;
        }
        if (isset($StructuredPersonalUserName->Surname)) {
          if ($user['FullName'] != '') {
            $user['FullName'] .= ' ';
          }
          $user['FullName'] .= (string) $StructuredPersonalUserName->Surname;
        }
      }
      elseif (isset($PersonalNameInformation->UnstructuredPersonalUserName)) {
        $user['FullName'] .= (string) $PersonalNameInformation->UnstructuredPersonalUserName;
      }
    }

    // Addresses
    $user['Address'] = array();
    if (isset($UserOptionalFields) && $addresses = $UserOptionalFields->UserAddressInformation) {
      foreach ($addresses as $address) {
        $_address['Type'] = $address->UserAddressRoleType->Value
                          ? (string) $address->UserAddressRoleType->Value
                          : (string) $address->UserAddressRoleType;

        if (isset($address->PhysicalAddress)) {
          if ((int) $request->get_version() == 1) {
            // In XC/NCIP version 1, this element is a string, which is
            // incorrect, but there is nothing we can do about it (yet)
            $_address['Address'] = (string) $address->PhysicalAddress;
          }
          elseif ((int) $request->get_version() == 2) {
            // In NCIP in version 2, hopefully this issue from before is
            // corrected, meaning full support requires a lot of complexity;
            // all of this also applies to the ElectronicAddress element, and
            // the logic is below
            if ($address->PhysicalAddress->PhysicalAddressType) {
              $_address['Type'] .= ' (' . (string) $address->PhysicalAddress->PhysicalAddressType . ')';
            }
            if ($address->PhysicalAddress->UnstructuredAddress) {
              $_address['Address'] = (string) $address->PhysicalAddress->UnstructuredAddress->UnstructuredAddressData;
            }
            elseif ($address->PhysicalAddress->StructuredAddress) {
              if ($address->PhysicalAddress->StructuredAddress->Line1) {
                $_address['Address'][] = (string) $address->PhysicalAddress->StructuredAddress->Line1;
                if ($address->PhysicalAddress->StructuredAddress->Line2) {
                  $_address['Address'][] = (string) $address->PhysicalAddress->StructuredAddress->Line2;
                }
              }
              elseif ($parts = $address->PhysicalAddress->StructuredAddress->children()) {
                $strt_addr_keys = array(
                  'Care Of',
                  'Country',
                  'District',
                  'House Name',
                  'Locality',
                  'Location Within Building',
                  'Post Office Box',
                  'Postal Code',
                  'Region',
                  'Street'
                );
                foreach ($parts as $k => $v) {
                  if (in_array($k, $strt_addr_keys)) {
                    $_address[$k] = (string) $v;
                  }
                }
              }
            }
          }
          $user['Address']['Physical'][] = $_address;
        }
        elseif (isset($address->ElectronicAddress)) {
          if ((int) $request->get_version() == 1) {
            $_address['Address'] = (string) $address->ElectronicAddress;
          }
          elseif ((int) $request->get_version() == 2) {
            if ($address->ElectronicAddress->ElectronicAddressType) {
              $_address['Type'] .= ' (' . (string) $address->ElectronicAddress->ElectronicAddressType . ')';
            }
            if ($address->ElectronicAddress->ElectronicAddressData) {
              $_address['Address'] = (string) $address->ElectronicAddress->ElectronicAddressData;
            }
          }
          $user['Address']['Electronic'][] = $_address;
        }
      }
    }

    // Loaned and requested items
    $information_types = array('LoanedItem', 'RequestedItem');
    foreach ($information_types as $information_type) {
      $user[$information_type . 's'] = array();

      if ((int) $request->get_version() == 1) {
        $user_transaction = $response->message->{$response->get_service()}->UserTransaction;
      }
      elseif ((int) $request->get_version() == 2) {
        $user_transaction = $response->message->{$response->get_service()};
      }

      if ($array_items = $user_transaction->$information_type) {
        foreach ($array_items as $array_item) {
          $item['ItemId'] = (string) $array_item->{$unique . 'ItemId'}->ItemIdentifierValue;
          if (isset($array_item->Ext)) {
            $item['BibId'] = (string) $array_item->Ext->BibliographicDescription->BibliographicRecordId->BibliographicRecordIdentifier;
          }
          if ($array_item->DateDue) {
            $item['DateDue'] = (string) $array_item->DateDue;
          }
          if ($array_item->DatePlaced) {
            $item['DatePlaced'] = (string) $array_item->DatePlaced;
          }
          if ($array_item->Title) {
            $item['Title'] = (string) $array_item->Title;
          }

          $user[$information_type . 's'][] = $item;
        }
      }
    }

    // Fiscal account balance
    $user['FiscalAccount'] = array();
    if ($fiscal_account = $response->message->{$response->get_service()}->UserFiscalAccount) {
      $user['FiscalAccount']['Balance']['CurrencyCode']
        = $fiscal_account->AccountBalance->CurrencyCode->Value
        ? (string) $fiscal_account->AccountBalance->CurrencyCode->Value
        : (string) $fiscal_account->AccountBalance->CurrencyCode;
      // Correction for bad spelling of "MonetaryValue" in XC/NCIP version 1
      $user['FiscalAccount']['Balance']['MonetaryValue']
        = $fiscal_account->AccountBalance->MonitaryValue
        ? (string) $fiscal_account->AccountBalance->MonitaryValue
        : (string) $fiscal_account->AccountBalance->MonetaryValue;
    }

    // Fiscal account details
    if (isset($response->message->{$response->get_service()}->UserFiscalAccount)
        && $fiscal_account_details = $response->message->{$response->get_service()}->UserFiscalAccount->AccountDetails) {
      foreach ($fiscal_account_details as $fiscal_account_detail) {
        // Date
        $account_detail['Date'] = (string) $fiscal_account_detail->AccrualDate;

        // Fiscal Transcation Information
        $fiscal_transaction_info = $fiscal_account_detail->FiscalTransactionInformation;

        // Amount
        $account_detail['Amount']['CurrencyCode']
          = $fiscal_transaction_info->Amount->CurrencyCode
          ? (string) $fiscal_transaction_info->Amount->CurrencyCode
          : (string) $fiscal_transaction_info->Amount;
        $account_detail['Amount']['MonetaryValue']
          = (string) $fiscal_transaction_info->Amount->MonetaryValue;

        // Description
        $account_detail['Description'] = (string) $fiscal_transaction_info->FiscalTransactionDescription;

        // Bibliographic Information
        $account_detail['ItemDetails']['BibliographicDescription'] = _xc_ncip_provider_bibliographic_description($fiscal_transaction_info->ItemDetails->BibliographicDescription);
        $account_detail['ItemDetails']['ItemId'] = (string) $fiscal_transaction_info->ItemDetails->{$unique . 'ItemId'}->ItemIdentifierValue;

        // Transaction type
        $fiscal_transaction_type = $fiscal_transaction_info->FiscalTransactionType->Value
                                 ? (string) $fiscal_transaction_info->FiscalTransactionType->Value
                                 : (string) $fiscal_transaction_info->FiscalTransactionType;

        // Add to user
        $user['FiscalAccount'][$fiscal_transaction_type][] = $account_detail;
      }
    }

    // Return results
    $return = array('results' => array($user_id => $user));
    if (array_filter($auth)) {
      // User was authenticated
      $return['auth'] = array('user_id' => $user_id);
    }

    return $return;
  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

/**
 * Request an item via NCIP provider
 *
 * @param $user_id
 *    Unique User Id
 * @param $item_id
 *    Item identifier or bibliographic ID for whichever $type
 * @param $agency_id
 *    Agency identifier
 * @param $type
 *    Either 'item' (default) to request and item by ItemID or 'bib' to do so by
 *    bibliogrpahic ID
 * @param $code
 *    Code (default = NULL; not used)
 * @param $request_type
 *    Either 'Hold' or 'Callslip' for type of request
 * @param $pickup_expiry_date
 *    Date and time that pickup should be done by. Strings which will be
 *    converted automatically to ISO 8601, but UNIX timestamp also accepted
 * @param $shipping_information_instructions
 *    Shipping instructions
 * @param $shipping_information_address
 *    String used by ILS to identify pickup location
 * @param $auth
 *    Authentication inputs
 * @param $return_type (String)
 *   The type of the return value. Possible values: 'xml', and 'string' return
 *   an XML string, 'dom', and 'domdocument' return DOM object, 'message'
 *   returns the original message, and 'results' (default value) an array
 *
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_request_item($ncip_provider_id, $item_id,
    $agency_id = NULL, $type = 'bib', $code = NULL, $request_type = 'Hold',
    $pickup_expiry_date = NULL, $shipping_information_instructions = NULL,
    $shipping_information_address = NULL, $auth = NULL, $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'RequestItem');
  switch ($request->get_version()) {
    case 1:
    case 1.01:
      $version = 1;
      $unique = 'Unique';
      break;
    case 2:
    case 2.01:
    default:
      $version = 2;
      $unique = '';
      $type = 'item'; // type is always item
      break;
  }

  // Authentication
  if (array_filter($auth) && !xc_ncip_provider_authenticate($ncip_provider_id, $request, $auth['user'], $auth['pass'], $auth['type'])) {
    return $return_type == 'results' ? array('error' => t('Failed attempt to authenticate user')) : NULL;
  }

  switch ($type) {
    case 'bib':
      // Unique Bibliographic Id
      $request->insert_scheme(
        array($unique . 'BibliographicId', 'BibliographicItemId', 'BibliographicItemIdentifierCode'),
        'bibliographic ID'
      );
      $request->insert_string(
        array($unique . 'BibliographicId', 'BibliographicItemId', 'BibliographicItemIdentifier'),
        trim($item_id)
      );
      break;
    case 'item':
    default:
      // Unique Item ID
      $request->insert_scheme(
        array($unique . 'ItemId', $unique . 'AgencyId'),
        $ncip_provider->to_agency_id['value'],
        $ncip_provider->to_agency_id['scheme']
      );
      $request->insert_string(
        array($unique . 'ItemId', 'ItemIdentifierValue'),
        trim($item_id)
      );
      break;
  }

  // Request Type
  $request->insert_scheme(
    array('RequestType'),
    $request_type
  );

  // Request Scope Type
  $request->insert_scheme(
    array('RequestScopeType'),
    'Item'
  );

  // Pickup Expiry Date
  if ($pickup_expiry_date) {
    $request->insert_datetime(
      array('PickupExpiryDate'),
      $pickup_expiry_date
    );
  }

  // Shipping Information's Physical Address
  if ($shipping_information_instructions) {
    $request->insert_string(
      array('ShippingInformation', 'ShippingInstructions'),
      $shipping_information_instructions
    );
  }
  if ($shipping_information_address) {
    $request->insert_string(
      array('ShippingInformation', 'ShippingNote', 'PhysicalAddress'),
      $shipping_information_address
    );
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    if ($response->message->{$response->get_service()}->{$unique . 'ItemId'}) {
      $return['Requested'] = TRUE;
      $return['DateAvailable'] = (string) $response->message->{$response->get_service()}->DateAvailable;
    }
    else {
      $return['Requested'] = FALSE;
    }

    // Return results
    return array('results' => array($item_id => $return));

  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

/**
 * Recall an item via NCIP provider
 *
 * @param $ncip_provider_id
 *   NCIP provider identifier
 * @param $user_id
 *   Unique User Id
 * @param $item_id
 *   Item identifier
 * @param $agency_id
 *    Agency identifier
 * @param $type
 *    Type (default = 'item'; not used)
 * @param $code
 *    Code (default = NULL; not used)
 * @param $desired_due_date
 *    Date and time that pickup should be done by. Strings which will be
 *    converted automatically to ISO 8601, but UNIX timestamp also accepted
 * @param $shipping_information_instructions
 *    Shipping instructions
 * @param $shipping_information_address
 *   String used by ILS to identify pickup location
 * @param $auth
 *    Authentication inputs
 * @param $return_type (String)
 *   The type of the return value. Possible values: 'xml', and 'string' return
 *   an XML string, 'dom', and 'domdocument' return DOM object, 'message'
 *   returns the original message, and 'results' (default value) an array
 *
 * @return
 *   Complex multi-dimensional array
 */
function xc_ncip_provider_recall_item($ncip_provider_id, $item_id,
    $agency_id = NULL, $type = 'item', $code = NULL, $desired_due_date = NULL,
    $shipping_information_instructions = NULL, $shipping_information_address = NULL,
    $auth = NULL, $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'RecallItem');
  switch ($request->get_version()) {
    case 1:
    case 1.01:
      $version = 1;
      $unique = 'Unique';
      break;
    case 2:
    case 2.01:
    default:
      $version = 2;
      $unique = '';
      break;
  }

  // Authentication
  if (array_filter($auth) && !xc_ncip_provider_authenticate($ncip_provider_id, $request, $auth['user'], $auth['pass'], $auth['type'])) {
    return $return_type == 'results' ? array('error' => t('Failed attempt to authenticate user')) : NULL;
  }

  // Unique Item ID
  $request->insert_scheme(
    array($unique . 'ItemId', $unique . 'AgencyId'),
    $ncip_provider->to_agency_id['value'],
    $ncip_provider->to_agency_id['scheme']
  );
  $request->insert_string(
    array($unique . 'ItemId', 'ItemIdentifierValue'),
    trim($item_id)
  );

  // Desired Due Date
  if ($desired_due_date) {
    $request->insert_datetime(
      array('DesiredDueDate'),
      $desired_due_date
    );
  }

  // Shipping Information
  if ($shipping_information_instructions) {
    $request->insert_string(
      array('ShippingInformation', 'ShippingInstructions'),
      $shipping_information_instructions
    );
  }
  if ($shipping_information_address) {
    $request->insert_string(
      array('ShippingInformation', 'ShippingNote', 'PhysicalAddress'),
      $shipping_information_address
    );
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    // Recall successful
    if ($response->message->{$response->get_service()}->{$unique . 'ItemId'}) {
      $return['Recalled'] = TRUE;
      $return['DateDue'] = (string) $response->message->{$response->get_service()}->DateDue;
    }
    else {
      $return['Recalled'] = FALSE;
    }

    // Return results
    return array('results' => array($item_id => $return));

  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

/**
 * Renew an item via NCIP provider
 *
 * @param $user_id
 *    Unique User Id
 * @param $item_id
 *    Item identifier
 * @param $auth
 *    Authentication inputs
 * @param $desired_date_for_return
 *    Date and time that you would like to renew the item. Strings which will be
 *    converted automatically to ISO 8601, but UNIX timestamp also accepted
 *
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_renew_item($ncip_provider_id, $item_id, $agency_id = NULL,
    $type = 'item', $code = NULL, $desired_date_for_return = NULL, $auth = NULL,
    $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'RenewItem');
  switch ($request->get_version()) {
    case 1:
    case 1.01:
      $version = 1;
      $unique = 'Unique';
      break;
    case 2:
    case 2.01:
    default:
      $version = 2;
      $unique = '';
      break;
  }

  // Authentication
  if (array_filter($auth) && !xc_ncip_provider_authenticate($ncip_provider_id, $request, $auth['user'], $auth['pass'], $auth['type'])) {
    return $return_type == 'results' ? array('error' => t('Failed attempt to authenticate user')) : NULL;
  }

  // Unique Item ID
  $request->insert_scheme(
    array($unique . 'ItemId', $unique . 'AgencyId'),
    $ncip_provider->to_agency_id['value'],
    $ncip_provider->to_agency_id['scheme']
  );
  $request->insert_string(
    array($unique . 'ItemId', 'ItemIdentifierValue'),
    trim($item_id)
  );

  // Desired Date For Return
  if ($desired_date_for_return) {
    $request->insert_datetime(array('DesiredDateForReturn'),
      $desired_date_for_return
    );
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    // Renew successful
    if ($response->message->{$response->get_service()}->{$unique . 'ItemId'}) {
      $return['Renewed'] = TRUE;
      $return['DateDue'] = (string) $response->message->{$response->get_service()}->DateDue;
    }
    else {
      $return['Renewed'] = FALSE;
    }

    // Return results
    return array('results' => $return);

  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

/**
 * Check out an item via NCIP provider
 *
 * @param $user_id
 *    Unique User Id
 * @param $item_id
 *    Item identifier
 * @param $agency_id
 *    Agency identifier
 * @param $type
 *    Type (default = 'item'; not used)
 * @param $desired_date_due
 *    Date and time that you would like to return the item. Strings which will be
 *    converted automatically to ISO 8601, but UNIX timestamp also accepted
 * @param $auth
 *    Authentication inputs
 *
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_check_out_item($ncip_provider_id, $item_id, $agency_id = NULL,
    $type = 'item', $code = NULL, $desired_date_due = NULL, $auth = NULL,
    $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'CheckOutItem');
  switch ($request->get_version()) {
    case 1:
    case 1.01:
      $version = 1;
      $unique = 'Unique';
      break;
    case 2:
    case 2.01:
    default:
      $version = 2;
      $unique = '';
      break;
  }

  // Authentication
  if (array_filter($auth) && !xc_ncip_provider_authenticate($ncip_provider_id, $request, $auth['user'], $auth['pass'], $auth['type'])) {
    return $return_type == 'results' ? array('error' => t('Failed attempt to authenticate user')) : NULL;
  }

  // Item ID
  $request->insert_scheme(
    array($unique . 'ItemId', $unique . 'AgencyId'),
    $ncip_provider->to_agency_id['value'],
    $ncip_provider->to_agency_id['scheme']
  );
  $request->insert_string(
    array($unique . 'ItemId', 'ItemIdentifierValue'),
    trim($item_id)
  );

  // Desired Date Due
  if ($desired_date_due) {
    $request->insert_datetime(array('DesiredDateDue'),
      $desired_date_due
    );
  }

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    // Renew successful
    if ($response->message->{$response->get_service()}->{$unique . 'ItemId'}) {
      $return['CheckedOut'] = TRUE;
      $return['DateDue'] = (string) $response->message->{$response->get_service()}->DateDue;
    }
    else {
      $return['CheckedOut'] = FALSE;
    }

    // Return results
    return array('results' => $return);
  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

/**
 * Check in an item via NCIP provider
 *
 * @param $user_id
 *    Unique User Id
 * @param $item_id
 *    Item identifier
 * @param $agency_id
 *    Agency identifier
 * @param $type
 *    Type (default = 'item'; not used)
 * @param $code
 *    Code (default = NULL; not used)
 * @param $auth
 *    Authentication inputs
 *
 * @return
 *    Complex multi-dimensional array
 */
function xc_ncip_provider_check_in_item($ncip_provider_id, $item_id, $agency_id = NULL,
    $type = 'item', $code = NULL, $auth = NULL, $return_type = 'results') {
  $ncip_provider = xc_ncip_provider_load($ncip_provider_id);
  $connection = xc_ncip_provider_connect($ncip_provider_id);

  $request = new NCIPMessage($connection, 'CheckInItem');
  switch ($request->get_version()) {
    case 1:
    case 1.01:
      $version = 1;
      $unique = 'Unique';
      break;
    case 2:
    case 2.01:
    default:
      $version = 2;
      $unique = '';
      break;
  }

  // Authentication
  if (array_filter($auth) && !xc_ncip_provider_authenticate($ncip_provider_id, $request, $auth['user'], $auth['pass'], $auth['type'])) {
    return $return_type == 'results' ? array('error' => t('Failed attempt to authenticate user')) : NULL;
  }

  // Item ID
  $request->insert_scheme(
    array($unique . 'ItemId', $unique . 'AgencyId'),
    $ncip_provider->to_agency_id['value'],
    $ncip_provider->to_agency_id['scheme']
  );
  $request->insert_string(
    array($unique . 'ItemId', 'ItemIdentifierValue'),
    trim($item_id)
  );

  // Send NCIP message over connection and receive response
  if (!is_null($request) && $connection->send($request)) {
    $response = $connection->receive();

    switch ($return_type) {
      case 'xml':
      case 'string':
        return $response->to_xml();
      case 'dom':
      case 'domdocument':
        return $response->to_dom();
      case 'simplexml':
        return $response->message;
      case 'message':
        return $response;
      case 'boolean':
      case 'results':
      default:
        // Do nothing
    }

    if ($response->has_problem()) {
      return array('error' => $response->get_problem());
    }
    elseif ($return_type == 'boolean') {
      return TRUE;
    }

    // Renew successful
    if ($response->message->{$response->get_service()}->{$unique . 'ItemId'}) {
      $return['CheckedIn'] = TRUE;
    }
    else {
      $return['CheckedIn'] = FALSE;
    }

    // Return results
    return array('results' => $return);
  }
  else if (user_access(ADMINISTER_NCIP_PROVIDERS)) {
    drupal_set_message(t('Unable to send message to remote NCIP application'), 'error');
  }
}

function xc_ncip_provider_renew_item_form($form, &$form_state, $ncip_provider, $user_id, $item_id,
    $desired_date_for_return = NULL, $shipping_information_address = NULL) {

  $form['ncip_provider'] = array(
    '#type' => 'value',
    '#value' => $ncip_provider,
  );
  $form['user_id'] = array(
    '#type' => 'value',
    '#value' => $user_id,
  );
  $form['item_id'] = array(
    '#type' => 'value',
    '#value' => $item_id,
  );
  $form['desired_date_for_return'] = array(
    '#type' => 'value',
    '#value' => $desired_date_for_return,
  );
  $form['shipping_information_address'] = array(
    '#type' => 'value',
    '#value' => $shipping_information_address,
  );

  return confirm_form($form,
    t('Are you sure you want to renew this item?'),
    'admin/xc/ncip/provider', '', t('Renew'), t('Cancel'));
}

function xc_ncip_provider_renew_item_form_submit($form, &$form_state) {
  $ncip_provider = $form_state['values']['ncip_provider'];
  $user_id = $form_state['values']['user_id'];
  $item_id = $form_state['values']['item_id'];
  $desired_date_for_return = $form_state['values']['desired_date_for_return'];
  $shipping_information_address = $form_state['values']['shipping_information_address'];

  xc_ncip_provider_renew_item_page($ncip_provider, $user_id, $item_id,
    $desired_date_for_return, $shipping_information_address);
}

/**
 * Renew item page
 *
 * @param $ncip_provider (Object)
 *   The NCIP provider
 * @param $user_id (int)
 *   The identifier of the user
 * @param $agency_id
 *    Agency identifier
 * @param $type
 *    Type (default = 'item'; not used)
 * @param $code
 *    Code (default = NULL; not used)
 * @param $desired_date_for_return
 *   Date and time that pickup should be done by. Strings which will be
 *   converted automatically to ISO 8601, but UNIX timestamp also accepted
 * @param $auth
 *    Authentication inputs
 * @param $shipping_information_address (String)
 *   String used by ILS to identify pickup location
 */
function xc_ncip_provider_renew_item_page($ncip_provider, $user_id, $item_id,
    $desired_date_for_return = NULL, $shipping_information_address = NULL) {

  $results = xc_ncip_provider_renew_item($ncip_provider->ncip_provider_id,
    $item_id, $agency_id, 'item', NULL, $desired_date_for_return, $auth, 'xml');
  if ($results['error']) {
    drupal_set_message(t('Unable to renew item.'), 'error');
  }
  else {
    drupal_set_message(t('Item renewed'));
  }

  $destination = '';
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $destination = $_GET['destination'];
  }
  drupal_goto($destination);
}

/**
 * Theme structured physical address
 */
function theme_xc_ncip_provider_structured_physical_address($variables) {
  $physical_address = $variables['0'];
  foreach ($physical_address as $key => $value) {
    if (!is_numeric($key)) {
      $out .= "$key: $value<br />";
    }
  }
  return $out;
}

/**
 * Implements hook_theme().
 */
function xc_ncip_provider_theme() {
  $themes = array(
    'xc_ncip_provider_structured_physical_address' => array(
      'variables' => array('physical_address'),
    ),
  );
  return $themes;
}

/**
 * Parse optional fields to return item information
 */
function _xc_ncip_provider_item_optional_fields($fields) {
  if (!$fields) {
    return array();
  }

  if (empty($fields)) {
    return $return;
  }
  foreach ($fields as $field => $value) {
    switch ($field) {
      case 'CirculationStatus':
        $return[$field] = $value->Value ? (string) $value->Value : (string) $value;
        break;
      case 'HoldQueueLength':
      case 'Location':
        $return[$field] = (string) $value;
        break;
      case 'BibliographicDescription':
        $return[$field] = _xc_ncip_provider_bibliographic_description($value);
        break;
      case 'ItemDescription':
        $return['ItemDescription'] = _xc_ncip_provider_parse_item_description($value);
        break;
    }
  }

  return $return;
}

/**
 * Parse bibliographic description
 */
function _xc_ncip_provider_bibliographic_description($bibliographic_description) {
  if (!$bibliographic_description) {
    return array();
  }

  // Array to return
  $return = array();

  // Parse elements that are strings
  $strings = array(
    'Author',
    'AuthorOfComponent',
    'Edition',
    'Pagination',
    'PlaceOfPublication',
    'PublicationDate',
    'PublicationDateOfComponent',
    'Publisher',
    'SeriesTitleNumber',
    'SponsoringBody',
    'Title',
    'TitleOfComponent',
  );
  foreach ($strings as $k) {
    if (isset($bibliographic_description->$k)) {
      $return[$k] = (string) $bibliographic_description->$k;
    }
  }

  // Parse elements that are enumerated types (schemes)
  $schemes = array(
    'ElectronicDataFormatType',
    'MediumType',
    'Language',
    'BibliographicLevel',
  );
  foreach ($schemes as $k) {
    if (isset($bibliographic_description[$k])) {
      $return[$k] = $bibliographic_description->$k->Value
                  ? (string) $bibliographic_description->$k->Value
                  : (string) $bibliographic_description->$k;
    }
  }

  // Parse bibliogrpahic item and record elements
  $bibs = array('BibliographicItem', 'BibliographicRecord');
  foreach ($bibs as $k) {
    $id = $k . 'Id';
    $identifier = $k . 'Identifier';
    $code = $k . 'IdentifierCode';
    if (is_array($bibliographic_description->$id)) {
      $key = $bibliographic_description->$id->$code->Value
           ? (string) $bibliographic_description->$id->$code->Value
           : (string) $bibliographic_description->$id->$code;
      $return[$key] = (string) $bibliographic_description->$id->$identifier;
    }
  }

  // Parse component id
  if (isset($bibliographic_description->ComponentId)) {
    $key = $bibliographic_description->ComponentId->ComponentIdentifierType->Value
         ? (string) $bibliographic_description->ComponentId->ComponentIdentifierType->Value
         : (string) $bibliographic_description->ComponentId->ComponentIdentifierType;
    $return[$key] = (string) $bibliographic_description->ComponentId->ComponentIdentifier;
  }

  // Parase item id
  if (isset($bibliographic_description->UniqueItemId)) {
    $return['ItemId'] = (string) $bibliographic_description->UniqueItemId->ItemIdentifierValue;
  }
  elseif (isset($bibliographic_description->ItemId)) {
    $return['ItemId'] = (string) $bibliographic_description->ItemId->ItemIdentifierValue;
  }

  return $return;
}

/**
 * Parse item description.
 *
 * It transform a SimpleXMLElement object into an array.
 *
 * @param (SimpleXMLElement)
 *   The ItemDescription element in the NCIP response
 *
 * @return (array)
 *   An array contains the values of the XML element
 */
function _xc_ncip_provider_parse_item_description($item_description_object) {
  static $keys = array('CallNumber', 'CopyNumber', 'HoldingsInformation');

  // Array to return
  $item_description = array();

  // Parse elements that are strings
  foreach ($keys as $key) {
    if (isset($item_description_object->$key)) {
      $item_description[$key] = (string) $item_description_object->$key;
    }
  }

  // Parse elements that are enumerated types (schemes)
  $schemes = array('ItemDescriptionLevel');
  foreach ($schemes as $key) {
    if (isset($item_description_object->$key)) {
      $item_description[$key] = $item_description_object->$key->Value
                  ? (string) $item_description_object->$key->Value
                  : (string) $item_description_object->$key;
    }
  }

  // Parse the visible item id
  if (isset($item_description_object->VisibleItemId)) {
    $type       = (string) $item_description_object->VisibleItemId->VisibleItemIdentifierType->Value;
    $identifier = (string) $item_description_object->VisibleItemId->VisibleItemIdentifier;
    $item_description[$type] = $identifier;
  }

  return $item_description;
}

/**
 * Sending notification mail to admin about NCIP problem
 *
 * @param $errormsg (string)
 *   The error message
 */
function xc_ncip_provider_sendmail($errormsg) {
  $admin = user_load(1);
  $to = $admin->mail;
  $from = variable_get('site_mail', $to);
  $lang = user_preferred_language($admin);
  $key = 'ncip_connection_problem';
  $params = array(
    'subject' => t('Unable to communicate with NCIP server'),
    'body' => t("The !site had a problem with communicating the NCIP server.

The error message is:

  \"!msg\"

Please log in, analyze the log messages, and fix the problem.  If you fixed it, set the field go to this page: !url, and turn on alerts again.",
      array(
        '!site' => variable_get('site_name', ''),
        '!msg' => $errormsg,
        '!url' => url('admin/xc/common/turn_on_alerts', array('absolute' => TRUE)),
      )
    ),
  );

  // module, key, destination, language, params
  $sent_message = drupal_mail('xc_ncip_provider', $key, $to, $lang, $params, $from);
  return $sent_message;
}

/**
 * Implements hook_mail().
 */
function xc_ncip_provider_mail($key, &$message, $params) {
  if ($key == 'ncip_connection_problem') {
    $message['subject'] = $params['subject'];
    $message['body']    = $params['body'];
    xc_log_info('xc_ncip_provider', 'Email sent to %to with subject "%subject"', array(
      '%to' => $message['to'],
      '%subject' => $message['subject'])
    );
  }
}

/**
 *
 * @param $currency_code
 *    Currency code, for exmaple: USD
 * @param $monetary_value
 *    Monetary value of amount, for example: 400
 * @param $symbol
 *    TRUE to include the currency symbol
 * @return String for display of amount
 */
function xc_ncip_provider_display_amount($currency_code, $monetary_value, $symbol = TRUE) {
  switch ($currency_code) {
    case 'USD':
      $value = sprintf("%.2f", round($monetary_value / 100, 2));
      return $symbol ? '$' . $value : $value;
      break;
  }
}
