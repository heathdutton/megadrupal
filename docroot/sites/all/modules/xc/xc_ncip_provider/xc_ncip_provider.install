<?php
/**
 * @file
 * Installation functions for XC NCIP provider module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_enable().
 */
function xc_ncip_provider_enable() {
  if (NCIPApplication::install('xc_ncip_provider', 'xc', 1, 'xc_ncip_provider', 'XC NCIP Version 1 Client', 'Connects to NCIP providers')
      && NCIPApplication::install('xc_ncip2_provider', 'xc', 2, 'xc_ncip_provider', 'XC NCIP Version 2 Client', 'Connects to NCIP providers')) {
    drupal_set_message(t('%client installed. You should !configure the NCIP application that will communicate with !added NCIP providers.',
      array(
      '%client' => t('NCIP Client'),
      '!configure' => l(t('configure'), 'admin/xc/ncip/application/list'),
      '!added' => l(t('added'), 'admin/xc/ncip/provider/add'),
    )));
  }
}

/**
 * Implements hook_uninstall().
 */
function xc_ncip_provider_uninstall() {
  NCIPApplication::uninstall('xc_ncip_provider');
  NCIPApplication::uninstall('xc_ncip2_provider');
}

/**
 * Implements hook_requirements().
 *
 * @param $phase
 */
function xc_ncip_provider_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $ncip_providers = xc_ncip_provider_get_all();

    if (empty($ncip_providers)) {
      $requirements['xc_ncip_providers'] = array(
        'title' => t('XC NCIP Provider'),
        'value' => t('No instances of the NCIP provider are on this system.'),
        'description' => t('You should register an NCIP provider !here, if you would like to retrieve circulation data through NCIP protocol!',
          array('!here' => l(t('here'), 'admin/xc/ncip/provider'))),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_disable().
 */
function xc_ncip_provider_disable() {
  unset($_SESSION['xc_ncip_provider_connections']);
}

/**
 * Implements hook_schema().
 */
function xc_ncip_provider_schema() {
  $schema['xc_ncip_provider'] = array(
    'description' => 'NCIP providers',
    'fields' => array(
      'ncip_provider_id' => array(
        'type' => 'serial',
        'description' => 'Primary identifier for an NCIP provider',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'NCIP provider name',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'text',
        'description' => 'NCIP provider description',
        'not null' => TRUE,
      ),
      'profile' => array(
        'type' => 'varchar',
        'description' => 'NCIP implementation profile',
        'length' => 32,
      ),
      'version' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'NCIP protocol version supported',
        'length' => 2,
      ),
      'host' => array(
        'type' => 'varchar',
        'description' => 'NCIP provider host',
        'length' => 255,
        'not null' => TRUE,
      ),
      'port' => array(
        'type' => 'int',
        'description' => 'NCIP provider port',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'path' => array(
        'type' => 'text',
        'description' => 'NCIP provider path',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'to_system_id' => array(
        'type' => 'varchar',
        'description' => 'NCIP system identifier for header',
        'length' => 255,
      ),
      'to_agency_id' => array(
        'type' => 'varchar',
        'description' => 'NCIP agency identifier for header',
        'length' => 255,
      ),
      'properties' => array(
        'description' => 'Additional entity properities',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'last_modification' => array(
        'type' => 'int',
        'description' => 'Last modification of the NCIP provider object',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('ncip_provider_id'),
  );

  return $schema;
}
