<?php
/**
 * @file
 * XC schema functions
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_xc_build().
 *
 * Constructs objects from XC schema in raw XML format if the raw input format is 'xc' by:
 *
 * <ol>
 * <li>Parsing the raw input for entity instances</li>
 * <li>Constructing XCEntity objects</li>
 * <li>Calling xc_build_xc() for each object</li>
 * </ol>
 *
 * @see _xc_build
 *
 * @param $xc_entity (Object)
 *   XCEntity object
 * @param $format (String)
 *   Must be 'xc'
 * @param $params (Array)
 *   Additional arguments, like
 *   - identifier_prefix: the OAI identifier prefix, if any
 *   - caller
 *   - use_insert
 *
 * @return (array)
 *   The metadata part of the XCEntity object
 */
function xc_schema_xc_build(&$xc_entity, $format, $params = array()) {
  global $_oaiharvester_statistics;
  static $metadata_module_path;
  $t_start = microtime(TRUE);
  $caller = isset($params['caller']) ? $params['caller'] : '';
  if ($format == 'xc') {

    if (!isset($metadata_module_path)) {
      $metadata_module_path = drupal_get_path('module', 'xc_metadata');
      require_once $metadata_module_path . '/includes/xml_to_array.inc';
      require_once $metadata_module_path . '/includes/dom_to_array.inc';
    }

    // Make sure XML and metadata arrays are always arrays
    $array = $metadata = array();
    $use_insert = isset($params['use_insert']) ? $params['use_insert'] : 0;

    $t_dom = microtime(TRUE);
    if ($xc_entity->raw instanceof DOMElement) {
      $array = dom_to_array($xc_entity->raw);
    }
    elseif (is_string($xc_entity->raw)) {
      $array = xml_to_array($xc_entity->raw);
    }
    $t_find = microtime(TRUE);
    xc_oaiharvester_statistics_set($caller . '/04 xc_schema/01 dom', abs($t_find - $t_dom));

    $entities = find_array_element_by_key('xc:entity', $array);
    $t_find2 = microtime(TRUE);
    xc_oaiharvester_statistics_set($caller . '/04 xc_schema/02 find in array', abs($t_find2 - $t_find));
    if (empty($entities)) {
      $metadata = $array;
    }
    else {
      $metadata = isset($entities[0]) ? $entities[0] : $entities;
    }

    // Clean up metadata array of all root element attributes
    if (is_array($metadata)) {
      foreach ($metadata as $key => $value) {
        if ($key == "@type" || $key == "@id") {
          continue;
        }
        elseif (substr($key, 0, 1) == "@") {
          unset($metadata[$key]);
        }
      }
    }

    if (!empty($metadata["@type"])) {
      $xc_entity->metadata_type  = $metadata["@type"];
    }

    $t_relationships = microtime(TRUE);
    xc_schema_set_relationships(
      $xc_entity->metadata_type,
      $xc_entity->identifier_int,
      $metadata,
      $params['identifier_prefix'],
      $use_insert
    );
    $t_relationships2 = microtime(TRUE);
    xc_oaiharvester_statistics_set($caller . '/04 xc_schema/relationships', abs($t_relationships2 - $t_relationships));
    $xc_entity->built = TRUE;
  }
  $t_stop = microtime(TRUE);
  xc_oaiharvester_statistics_set($caller . '/04 xc_schema', abs($t_stop - $t_start));
  return $metadata;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function xc_schema_set_relationships($metadata_type, $identifier_int, $metadata, $prefix, $use_insert) {
  // Fetch relationships and place them
  switch ($metadata_type) {
    case 'work':
      if (isset($metadata['xc:expressionOfWork'])) {
        xc_entity_set_child_identifiers($identifier_int, $metadata['xc:expressionOfWork'], $prefix, $use_insert, $metadata_type);
      }
      break;
    case 'expression':
      if (isset($metadata['xc:manifestationOfExpression'])) {
        xc_entity_set_child_identifiers($identifier_int, $metadata['xc:manifestationOfExpression'], $prefix, $use_insert, $metadata_type);
      }
      if (isset($metadata['xc:workExpressed'])) {
        xc_entity_set_parent_identifiers($metadata['xc:workExpressed'], $identifier_int, $prefix, $use_insert, $metadata_type);
      }
      break;
    case 'manifestation':
      if (isset($metadata['xc:holdingsOfManifestation'])) {
        xc_entity_set_child_identifiers($identifier_int, $metadata['xc:holdingsOfManifestation'], $prefix, $use_insert, $metadata_type);
      }
      if (isset($metadata['xc:expressionManifested'])) {
        xc_entity_set_parent_identifiers($metadata['xc:expressionManifested'], $identifier_int, $prefix, $use_insert, $metadata_type);
      }
      break;
    case 'holdings':
      if (isset($metadata['xc:itemOfHoldings'])) {
        xc_entity_set_child_identifiers($identifier_int, $metadata['xc:itemOfHoldings'], $prefix, $use_insert, $metadata_type);
      }
      if (isset($metadata['xc:manifestationHeld'])) {
        xc_entity_set_parent_identifiers($metadata['xc:manifestationHeld'], $identifier_int, $prefix, $use_insert, $metadata_type);
      }
      break;
    case 'item':
      if (isset($metadata['xc:holdingsExemplified'])) {
        xc_entity_set_parent_identifiers($metadata['xc:holdingsExemplified'], $identifier_int, $prefix, $use_insert, $metadata_type);
      }
      break;
  }
}

/**
 * Implements hook_xc_transform() to convert each XCEntity objects().
 * metadata into XC schema in XML format if the format is 'xc' by
 * returns an array of XML strings.
 *
 * @see _xc_transform
 * @param $xc_entity
 *    Array of XCEntity objects
 * @param $format
 *    For export, must equal 'xc:xml'
 * @param $params
 *    Additional arguments
 */
function xc_schema_xc_transform(&$xc_entity, $format, $params = array()) {
  switch ($format) {
    case 'xc':
      $metadata = $xc_entity->metadata;
      require_once drupal_get_path('module', 'xc_metadata') . '/includes/xc_metadata.format.inc';
      $_format = xc_format_get($format);
      $definition = xc_metadata_entity_get($xc_entity->metadata_type);
      $namespaces = $definition->get_namespaces();
      $namespaces[] = xc_metadata_namespace_get('xsi');
      foreach ($namespaces as $namespace) {
        $attr = 'xmlns:' . $namespace->prefix;
        $metadata["@$attr"] = $namespace->uri;
      }
      $metadata["@xsi:schemaLocation"] = $_format['schemaLocation'];
      $metadata["@xmlns:xc"] = $_format['namespaceURI'];

      require_once drupal_get_path('module', 'xc_metadata') . '/includes/xml_to_array.inc';
      $xml = array_to_xml($metadata, 'xc:entity');
      return $xml;
      break;
  }
}

/**
 * Implements hook_xc_format().
 */
function xc_schema_xc_format() {
  $format['xc'] = array(
    'name' => t('XC'),
    'description' => t('XC schema in XML'),
    'entities' => array('work', 'expression', 'manifestation', 'holdings', 'item'),
    'module' => 'xc',
    'help' => t(''),
    'download' => TRUE,
    'upload' => TRUE,
    'file extension' => 'xml',
    'content type' => 'text/xml',
    'namespaceURI' => 'http://www.extensiblecatalog.info/Elements',
    'schemaLocation' => 'http://www.openarchives.org/OAI/2.0/ ' .
                            'http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd ' .
                            'http://purl.org/dc/elements/1.1/ http://dublincore.org/schemas/xmls/qdc/2008/02/11/dc.xsd ' .
                            'http://purl.org/dc/terms/ ' .
                            'http://dublincore.org/schemas/xmls/qdc/2008/02/11/dcterms.xsd ' .
                            'http://purl.org/dc/dcmitype/ ' .
                            'http://dublincore.org/schemas/xmls/qdc/2008/02/11/dcterms.xsd',
    'root element' => 'xc:frbr',
  );
  return $format;
}

/**
 * Implements hook_xc_schema().
 */
function xc_schema_xc_schema() {
  $schema['work'] = array(
    'title' => t('XC Work'),
    'description' => t('XC implementation of a <em>work</em>; a distinct intellectual or artistic creation.'),
    'group' => 'xc_schema',
    'fields' => array(
      'dcterms:abstract' => array(
        //        'title' => t(''), //        'description' => t(''), //        'type' => '', //        'size' => 0, //        'max_size' => 0, //        'required' => false, //        'default value' => '', //        'possible values' => array(),
      ),
      'dcterms:audience' => array(),
      'dcterms:coverage' => array(
        'attributes' => array(
          'xsi:type' => array(
            //          'title' => t(''), //          'description' => t(''), //          'type' => '', //          'size' => 0, //          'max_size' => 0, //          'required' => false, //          'default value' => '', //          'possible values' => array(),
          ),
        ),
      ),
      'dcterms:creator' => array(),
      'dcterms:isReplacedBy' => array(
        'attributes' => array(
          'dcterms:ISSN' => array(),
        ),
      ),
      'dcterms:relation' => array(),
      'dcterms:replaces' => array(
        'attributes' => array(
          'dcterms:ISSN' => array(),
        ),
      ),
      'dcterms:spatial' => array(
        'attributes' => array(
          'xsi:type' => array(),
        ),
      ),
      'dcterms:subject' => array(
        'attributes' => array(
          'xsi:type' => array(
            'possible values' => array('dcterms:DDC', 'dcterms:LCC', 'dcterms:NLM', 'aat'),
          ),
        ),
      ),
      'dcterms:temporal' => array(),
      'dcterms:type' => array(
        'attributes' => array(
          'xsi:type' => array(
            'possible values' => array('DCMIType'),
          ),
        ),
      ),
      'rdarole:artist' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:author' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:compiler' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:composer' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:speaker' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdvocab:coordinatesOfCartographicContent' => array(),
      'rdvocab:dissertationOrThesesInformation' => array(),
      'rdvocab:identifierForTheWork' => array(
        'attributes' => array(
          'xsi:type' => array(),
        ),
      ),
      'rdvocab:natureOfTheContent' => array(),
      'rdvocab:workTitle' => array(),
      'xc:coverage' => array(
        'attributes' => array(
          'xsi:type' => array(),
          'geoID' => array(),
        ),
      ),
      'xc:creator' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'xc:expressionOfWork' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:relation' => array(
        'attributes' => array(
          'workID' => array(),
        ),
      ),
      'xc:spatial' => array(
        'attributes' => array(
          'xsi:type' => array(
            'possible values' => array(
              '$2',
              'LCSH',
              'MESH',
              'bidex',
              'gtt',
              'lcac',
              'nasat',
              'ram',
              'rasuqam',
              'rvm',
              'sears',
              'swd',
            ),
          ),
          'geoID' => array(),
        ),
      ),
      'xc:subject' => array(
        'attributes' => array(
          'xsi:type' => array(
            'possible values' => array(
              'LCSH',
              'MESH',
              'aat',
              'bidex',
              'cash',
              'colper',
              'gsafd',
              'gtt',
              'jhpk',
              'jlabsh/3',
              'larpcal', // 'gtt --',
              'lcac',
              'lemb',
              'local',
              'migfg',
              'nasat',
              'ram',
              'rasuqam',
              'rbgenr',
              'renib',
              'reo',
              'rvm',
              'sears',
              'sigle',
              'swd',
            ),
          ),
          'subjID' => array(),
        ),
      ),
      'xc:temporal' => array(
        'attributes' => array(
          'type' => array(
            'possible values' => array(
              'LCSH',
              'aat',
              'bidex',
              'cash',
              'gmgpc',
              'jhpk',
              'lcac',
              'ram',
              'rbgenr',
              'rvm',
              'sears',
              'swd',
            ),
          ),
          'chronID' => array(),
        ),
      ),
      'xc:thesisAdvisor' => array(),
      'xc:type' => array(
        'attributes' => array(
          'xsi:type' => array(
            'possible values' => array(
              '\$2',
              '2UR',
              '2migfg',
              'LCSH',
              'MESH',
              'NRU',
              'UR',
              'aat.',
              'aat',
              'act',
              'bidex',
              'cash',
              'comedy',
              'gmgpc',
              'gsadfd',
              'gsafd',
              'gsafd',
              'gtlm',
              'gtt',
              'jhpk',
              'lcac',
              'lcoal',
              'lcsh ',
              'lcsh.',
              'lcsh',
              'lctgm',
              'lemb',
              'locaL',
              'local.',
              'local',
              'locla',
              'lsch',
              'mesh',
              'mgfg',
              'mgifg',
              'migfg.',
              'migfg',
              'mim',
              'ram',
              'rasuqam',
              'rbbin',
              'rbgenr',
              'rbpub',
              'rvm',
              'sears',
              'swd',
            ),
          ),
          'subjID' => array(),
        ),
      ),
    ),
    'parents' => array(),
    'children' => array('expression'),
    'namespaces' => array(
      'dcterms' => array(
        'uri' => 'http://purl.org/dc/terms/',
        'title' => t('DCMI Metadata Terms'),
        'description' => t(''),
      ),
      'dcmitype' => array(
        'uri' => 'http://purl.org/dc/dcmitype/',
        'title' => t('DCMI Type Vocabulary'),
        'description' => t(''),
      ),
      'dc' => array(
        'uri' => 'http://purl.org/dc/elements/1.1/',
        'title' => t('Dublin Core'),
        'description' => t(''),
      ),
      'rdarole' => array(
        'uri' => 'http://rdvocab.info/roles',
        'title' => t('RDA Roles'),
        'description' => t(''),
      ),
      'rdvocab' => array(
        'uri' => 'http://rdvocab.info/Elements',
        'title' => t('RDA Group 1 Elements '),
        'description' => t(''),
      ),
      'marcrel' => array(
        'uri' => 'http://www.loc.gov/loc.terms/relators',
        'title' => t('MARC Code List for Relators'),
        'description' => t('Relator terms and their associated codes designate the relationship between a name and a bibliographic resource. The relator codes are three-character lowercase alphabetic strings that serve as identifiers. Either the term or the code may be used as controlled values.'),
      ),
      'xc' => array(
        'uri' => 'http://www.extensiblecatalog.info/Elements',
        'title' => t('eXtensible Catalog elements'),
        'description' => t(''),
      ),
      'xsi' => array(
        'uri' => 'http://www.w3.org/2001/XMLSchema-instance',
        'title' => t('XML Schema instance namespace'),
        'description' => t(''),
      ),
    ),
  );

  $schema['expression'] = array(
    'title' => t('XC Expression'),
    'description' => t('XC implementation of an <em>expression</em>; the intellectual or artistic realization of a <em>work</em> in the form of alpha-numeric, musical, or choreographic notation, sound, image, object, movement, etc., or any combination of such forms.'),
    'group' => 'xc_schema',
    'fields' => array(
      'dcterms:available' => array(),
      'dcterms:bibliographicCitation' => array(),
      'dcterms:conformsTo' => array(),
      'dcterms:contributor' => array(),
      'dcterms:dateAccepted' => array(),
      'dcterms:dateCopyrighted' => array(),
      'dcterms:description' => array(),
      'dcterms:educationLevel' => array(),
      'dcterms:hasFormat' => array(),
      'dcterms:hasVersion' => array(),
      'dcterms:instructionMethod' => array(),
      'dcterms:isFormatOf' => array(),
      'dcterms:isReferencedBy' => array(),
      'dcterms:isRequiredBy' => array(),
      'dcterms:isVersionOf' => array(),
      'dcterms:language' => array(
        'attributes' => array(
          'xsi:type' => array(),
        ),
      ),
      'dcterms:mediator' => array(),
      'dcterms:references' => array(),
      'dcterms:relation' => array(),
      'dcterms:requires' => array(),
      'dcterms:source' => array(),
      'dcterms:type' => array(
        'attributes' => array(
          'xsi:type' => array(),
        ),
      ),
      'dcterms:version' => array(),
      'rdarole:director' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:editor' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:illustrator' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:performer' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:producer' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdarole:translator' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'rdvocab:artisticAndOrTechnicalCredits' => array(),
      'rdvocab:awards' => array(),
      'rdvocab:identifierForTheExpression' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'rdvocab:illustration' => array(),
      'rdvocab:performerNarratorAndOrPresenter' => array(),
      'rdvocab:placeAndDateOfCapture' => array(),
      'rdvocab:scale' => array(),
      'xc:contributor' => array(
        'attributes' => array(
          'agentID' => array(),
        ),
      ),
      'xc:expressionTitle' => array(),
      'xc:ISO639-3LanguageName' => array(),
      'xc:manifestationOfExpression' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:workExpressed' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
    ),
    'parents' => array('work'),
    'children' => array('manifestation'),
    'namespaces' => array(
      'dcterms' => array(
        'uri' => 'http://purl.org/dc/terms/',
        'title' => t('DCMI Metadata Terms'),
        'description' => t(''),
      ),
      'rdarole' => array(
        'uri' => 'http://rdvocab.info/roles',
        'title' => t('RDA Roles'),
        'description' => t(''),
      ),
      'rdvocab' => array(
        'uri' => 'http://rdvocab.info/Elements',
        'title' => t('RDA Group 1 Elements '),
        'description' => t(''),
      ),
      'xc' => array(
        'uri' => 'http://www.extensiblecatalog.info/Elements',
        'title' => t('eXtensible Catalog elements'),
        'description' => t(''),
      ),
    ),
  );

  $schema['manifestation'] = array(
    'title' => t('XC Manifestation'),
    'description' => t('XC implementation of a <em>manifestation</em>; the physical embodiment of an <em>expression</em> of a <em>work</em>.'),
    'group' => 'xc_schema',
    'fields' => array(
      'dcterms:accessRights' => array(),
      'dcterms:accrualMethod' => array(),
      'dcterms:accrualPeriodicity' => array(),
      'dcterms:accrualPolicy' => array(),
      'dcterms:alternative' => array(),
      'dcterms:created' => array(),
      'dcterms:date' => array(),
      'dcterms:dateSubmitted' => array(),
      'dcterms:description' => array(),
      'dcterms:extent' => array(),
      'dcterms:format' => array(),
      'dcterms:hasPart' => array(),
      'dcterms:identifier' => array(
        'attributes' => array(
          'type' => array(
            'possible values' => array('ISBN'),
          ),
        ),
      ),
      'dcterms:isPartOf' => array(),
      'dcterms:issued' => array(),
      'dcterms:license' => array(),
      'dcterms:medium' => array(),
      'dcterms:modified' => array(),
      'dcterms:provenance' => array(),
      'dcterms:publisher' => array(),
      'dcterms:rights' => array(),
      'dcterms:rightsHolder' => array(),
      'dcterms:tableOfContents' => array(),
      'dcterms:title' => array(),
      'dcterms:valid' => array(),
      'rdvocab:dimensions' => array(),
      'rdvocab:editionStatement' => array(),
      'rdvocab:frequency' => array(),
      'rdvocab:modeOfIssuance' => array(),
      'rdvocab:numberingOfSerials' => array(),
      'rdvocab:placeOfProduction' => array(),
      'rdvocab:plateNumber' => array(),
      'rdvocab:publisherNumber' => array(),
      'rdvocab:soundCharacteristics' => array(),
      'rdvocab:statementOfResponsibilityRelatingToTitle' => array(),
      'xc:expressionManifested' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:holdingsOfManifestation' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:identifier' => array(
        'attributes' => array(
          'xsi:type' => array(
            'possible values' => array(
              'CODEN',
              'DNLM',
              'GPOItem',
              'GPO',
              'GyFmDB',
              'IAN',
              'ISMN',
              'ISRC',
              'ISSN',
              'JTNDL',
              'LAC',
              'SICI',
              'SoundNr',
              'SuDoc',
              'UPC',
              'Uk',
              'VideoNr',
              'YBP',
              'bccb',
              'bnb',
              'dnb',
              'gtin-14',
              'gtin',
            ),
          ),
        ),
      ),
      'xc:isPartOf' => array(
        'attributes' => array(
          'workID' => array(),
        ),
      ),
      'xc:otherPhysicalDetails' => array(),
      'xc:recordID' => array(
        'attributes' => array(
          'type' => array(
            'possible values' => array(
              'CStRLIN',
              'DLC',
              'GPO',
              'HOL',
              'IBatF',
              'III',
              'LCCN',
              'MWT',
              'NOTISUF',
              'NOTIS',
              'NRU',
              'OCLC',
              'OCoLC',
              'OColC',
              'PWmBRO',
              'UnM',
              'hol',
              'CaPaEBR',
              'WaSeSS',
            ),
          ),
        ),
      ),
      'xc:type007' => array(),
      'xc:typeLeader06' => array(),
      'xc:typeSMD' => array(),
    ),
    'parents' => array('expression'),
    'children' => array('holdings'),
    'namespaces' => array(
      'dcterms' => array(
        'uri' => 'http://purl.org/dc/terms/',
        'title' => t('DCMI Metadata Terms'),
        'description' => t(''),
      ),
      'rdvocab' => array(
        'uri' => 'http://rdvocab.info/Elements',
        'title' => t('RDA Group 1 Elements '),
        'description' => t(''),
      ),
      'xc' => array(
        'uri' => 'http://www.extensiblecatalog.info/Elements',
        'title' => t('eXtensible Catalog elements'),
        'description' => t(''),
      ),
    ),
  );


  $schema['holdings'] = array(
    'title' => t('XC Holdings'),
    'description' => t('XC implementation that is equivalent to the <em>MARC 21 Holdings Format</em>; contains data that may be mapped from MARC Holdings records from a library\'s ILS or from MARC holdings data contained within a MARC bibliographic record.'),
    'group' => 'xc_schema',
    'fields' => array(
      'xc:callNumber' => array(),
      'xc:itemOfHoldings' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:location' => array(),
      'xc:manifestationHeld' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:recordID' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:RestrictionsOnUse' => array(),
      'xc:textualHoldings' => array(),
    ),
    'parents' => array('manifestation'),
    'children' => array('item'),
    'namespaces' => array(
      'xc' => array(
        'uri' => 'http://www.extensiblecatalog.info/Elements',
        'title' => t('eXtensible Catalog elements'),
        'description' => t(''),
      ),
    ),
  );

  $schema['item'] = array(
    'title' => t('XC Item'),
    'description' => t('XC implementation of an <em>item</em>; a single exemplar of a <em>manifestation</em>.'),
    'group' => 'xc_schema',
    'fields' => array(
      'xc:chronology' => array(),
      'xc:copyNumber' => array(),
      'xc:enumeration' => array(),
      'xc:holdingsExemplified' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:location' => array(),
      'xc:marksInscriptions' => array(),
      'xc:pieceDesignation' => array(),
      'xc:recordID' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:serviceProvider' => array(
        'attributes' => array(
          'type' => array(),
        ),
      ),
      'xc:status' => array(),
      'xc:tempLocation' => array(),
    ),
    'parents' => array('holdings'),
    'children' => array(),
    'namespaces' => array(
      'xc' => array(
        'uri' => 'http://www.extensiblecatalog.info/Elements',
        'title' => t('eXtensible Catalog elements'),
        'description' => t(''),
      ),
    ),
  );

  return $schema;
}
