<?php
/**
 * @file
 * A WordNet integration module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Permission for administering XC Search module
 * @var String
 */
define('ADMINISTER_XC_WORDNET', 'administer xc wordnet');

/**
 * Implements hook_permission().
 */
function xc_wordnet_permission() {
  return array(
    ADMINISTER_XC_WORDNET => array(
      'title' => t(ADMINISTER_XC_WORDNET),
      'description' => t('ADMINISTER_XC_WORDNET'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function xc_wordnet_menu() {
  $items['admin/xc/wordnet'] = array(
    'title' => 'Wordnet integration',
    'description' => 'Integration WordNet lexical database into XC Drupal Toolkit.',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array(ADMINISTER_XC_WORDNET),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );

  $items['admin/xc/wordnet/settings'] = array(
    'title' => 'Database Settings',
    'description' => 'Set the attributes of the special Apache Solr index specific for the WordNet. Do cont confuse with the main bibliographic index.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_wordnet_admin_settings'),
    'access arguments' => array(ADMINISTER_XC_WORDNET),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_xc_synonyms().
 *
 * @param $op (String)
 *   The opreation to run.
 *   - css: only add css
 *   - ajax: only results
 *   - normal: everything
 * @param $query (String)
 *   The search query the user entered
 */
function xc_wordnet_xc_synonyms($op = 'normal', $query) {
  global $_xc_wordnet;

  if (strstr($query, ' ') || $query == '*' || $query == '*:*') {
    return;
  }

  if ($op == 'css') {
    drupal_add_css(drupal_get_path('module', 'xc_wordnet') . '/xc_wordnet.css', array('preprocess' => FALSE));
    return;
  }

  if (!isset($_xc_wordnet)) {
    xc_wordnet_init_solr();
  }

  try {
    $response = $_xc_wordnet->search('word_s:' . $query, 0, 20, array('debugQuery' => 'on'));
  }
  catch (Exception $e) {
    return;
  }

  $items = array();
  $params = xc_search_get_params();
  unset($params['os']);
  $url_params = array('query' => drupal_query_string_encode($params));
  foreach ($response->response->docs as $doc) {
    $text = 'as ' . str_replace('.', ', ', $doc->lexdict_s) . ': ';
    $words = $links = array();
    if (!is_array($doc->word_s)) {
      $doc->word_s = (array) $doc->word_s;
    }
    foreach ($doc->word_s as $word) {
      if (strstr($word, ' ')) {
        $word = '"' . $word . '"';
      }
      $words[] = $word;
      $links[] = l($word, 'xc/search/' . $word, $url_params);
    }
    $text .= join(', ', $links);

    // if there are multiple words, print out an [all] link as well
    if (count($words) > 1) {
      $text .= ' ' . l('[all]', 'xc/search/' . join(' OR ', $words), $url_params);
    }

    // the glossa
    $text .= ' &mdash; <em>&#145;' . $doc->gloss_t . '&#146;</em>';
    $items[] = $text;
  }

  $keys = array_keys(get_object_vars($response->debug->timing->prepare));
  $GLOBALS['timers']['wordnet/time'] = array(
    'counter' => 1,
    'time' => $response->debug->timing->time,
  );
  $types = array('prepare', 'process');
  foreach ($types as $type) {
    foreach ($keys as $key) {
      if ($key == 'time') {
        $value = $response->debug->timing->$type->$key;
      }
      else {
        $value = $response->debug->timing->$type->$key->time;
      }
      if ($value != 0) {
        $GLOBALS['timers']['wordnet/' . $type . '/' . $key] = array(
          'counter' => 1,
          'time' => $value,
        );
      }
    }
  }

  $output = '';

  if (!empty($items)) {
    if ($op == 'normal') {
      drupal_add_css(drupal_get_path('module', 'xc_wordnet') . '/xc_wordnet.css', array('preprocess' => FALSE));
    }

    $output = '<div id="xc-wordnet-synonyms">'
      . theme('item_list', array('items' => $items, 'title' => t('Synonyms of %query:', array('%query' => $query)), 'type' => 'ol'))
      . '</div>';
  }

  return $output;
}

/**
 * Initializes the Solr handling object (Apache_Solr_ServiceXc)
 */
function xc_wordnet_init_solr() {
  global $_xc_wordnet;

  $host = variable_get('xc_wordnet_host', 'localhost');
  $port = variable_get('xc_wordnet_port', '8983');
  $path = variable_get('xc_wordnet_path', 'solr/wordnet');
  try {
    $_xc_wordnet = new Apache_Solr_ServiceXc($host, $port, $path);
  }
  catch (Exception $e) {
    xc_log_error('wordnet', $e->getMessage());
  }
}

/**
 * Admin settings form
 */
function xc_wordnet_admin_settings($form, &$form_state) {

  $form['description'] = array(
    '#type' => 'item',
    '#markup' => '<p>'
      .   t('Set the attributes of the special Apache Solr index specific for the WordNet. Do not confuse this Solr index with the main bibliographic index.')
      . '</p>'
      . '<p>'
      .   t(' First you have to setup the WordNet index. You can download the XML source of the Solr index and the detailed manual from eXtensibleCatalog.org.')
      . '</p>'
      . '<p>'
      .   t('We suggest to use a multicore settings, when one Solr core (or Solr index) is the main (bibliographic) database, and you set another core for WordNet database. An alternative solution is to run two Solr instances on different ports.')
      . '</p>',
  );

  $form['xc_wordnet_host'] = array(
    '#type' => 'textfield',
    '#title' => t('host'),
    '#default_value' => variable_get('xc_wordnet_host', 'localhost'),
    '#size' => 30,
  );

  $form['xc_wordnet_port'] = array(
    '#type' => 'textfield',
    '#title' => t('port'),
    '#default_value' => variable_get('xc_wordnet_port', '8983'),
    '#size' => 30,
  );

  $form['xc_wordnet_path'] = array(
    '#type' => 'textfield',
    '#title' => t('path'),
    '#default_value' => variable_get('xc_wordnet_path', 'solr/wordnet'),
    '#size' => 30,
  );

  return system_settings_form($form);
}
