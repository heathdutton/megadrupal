<?php
/**
 * @file
 * ezProxy URL Rewrite module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * @addtogroup global variables
 * @{
 */

/**
 * Flag indicates whether the EZproxy URL rewrite is active or not.
 * @var boolean
 */
global $_ezproxy_url_rewrite_active;
/**
 * @} End of "addtogroup global variables".
 */

/**
 * Implements hook_permission().
 */
function ezproxy_url_rewrite_permission() {
  return array(
    'administer ezproxy' => array(
      'title' => t('administer ezproxy'),
      'description' => t('TODO Add a description for \'administer ezproxy\''),
    ),
    'administer ezproxy url rewrite' => array(
      'title' => t('administer ezproxy url rewrite'),
      'description' => t('TODO Add a description for \'administer ezproxy url rewrite\''),
    ),
  );
}

/**
 * Implements hook_init().
 */
function ezproxy_url_rewrite_init() {
  global $_ezproxy_url_rewrite_active;
  $_ezproxy_url_rewrite_active = FALSE;

  drupal_add_css(drupal_get_path('module', 'ezproxy_url_rewrite')
    . '/ezproxy_url_rewrite.css');

  if (!function_exists('custom_url_rewrite_outbound')) {
    function custom_url_rewrite_outbound(&$path, &$options, $original_path) {
      ezproxy_url_rewrite_url_outbound_alter($path, $options, $original_path);
    }
  }

  // Defined here for rewriting external links with patch
  function custom_url_rewrite_outbound_external(&$path, &$options, $original_path) {
    ezproxy_url_rewrite_url_outbound_alter($path, $options, $original_path);
  }

  // Check if rewriting is necessary
  ezproxy_url_rewrite_rewrite_check();

  // Rewrite with JavaScript if enabled for all URLs and active, otherwise let
  // Drupal do the rewriting later with the custom_url_rewrite... functions
  if ((variable_get('ezproxy_url_rewrite_enabled', 0) == 2)
       && $_ezproxy_url_rewrite_active
       && variable_get('ezproxy_url_rewrite_javascript_enabled', 0)) {
    global $base_url;
    $_base_url = parse_url($base_url);

    $vars = array(
      'enabled' => (int) variable_get('ezproxy_url_rewrite_enabled', 0),
      'javascript_enabled' => variable_get('ezproxy_url_rewrite_javascript_enabled', 0) ? TRUE : FALSE,
      'active' => $_ezproxy_url_rewrite_active,
      'prefix' => variable_get('ezproxy_url_rewrite_prefix', ''),
      'infix' => variable_get('ezproxy_url_rewrite_infix', ''),
      'suffix' => variable_get('ezproxy_url_rewrite_suffix', ''),
      'roles' => variable_get('ezproxy_url_rewrite_roles', array()),
      'ip_ranges' => variable_get('ezproxy_url_rewrite_ip_ranges', array()),
      'pages' => variable_get('ezproxy_url_rewrite_pages', ''),
      'pages_option' => (int) variable_get('ezproxy_url_rewrite_pages_option', 1),
      'url_type' => variable_get('ezproxy_url_rewrite_url_type', array('external')),
      'protocol_regex' => variable_get('ezproxy_url_rewrite_protocol_regex', ''),
      'host_regex' => variable_get('ezproxy_url_rewrite_host_regex',
        '^(?!' . $_base_url['host'] . ')'),
      'port_regex' => variable_get('ezproxy_url_rewrite_port_regex', ''),
      'path_regex' => variable_get('ezproxy_url_rewrite_path_regex', ''),
      'query_string_regex' => variable_get('ezproxy_url_rewrite_query_string_regex', ''),
      'fragment_regex' => variable_get('ezproxy_url_rewrite_fragment_regex', ''),
    );

    drupal_add_js(array('ezproxy_url_rewrite' => $vars), array('type' => 'setting', 'scope' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'ezproxy_url_rewrite')
      . '/parseuri.js');
    drupal_add_js(drupal_get_path('module', 'ezproxy_url_rewrite')
    . '/ezproxy_url_rewrite.js');
  }
}

/**
 * EZProxy URL rewriting settings form
 */
function ezproxy_url_rewrite_settings($form, &$form_state) {
  $roles = array(); 
  $result = db_query('SELECT rid, name FROM {role}');
  foreach ($result as $role) {
    $roles[$role->rid] = t($role->name);
  }

  $form['instructions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Instructions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['instructions']['text'] = array(
    '#type' => 'item',
    '#markup' => t(<<<EOF
EZProxy URL rewriting supports three type of additions to the URL string:
prefix, infix, and suffix, respectively adding text to the beginning,
middle (immediately after the hostname), or end of a URL string.
Consider the following examples:
<ul>
<li><em>http://ezproxy.prefix.edu/login?url=</em>http://original.database.com/resource</li>
<li>http://original.database.com<em>.ezproxy.infix.edu</em>/resource</li>
<li>http://original.database.com/resource<em>?ezproxy=ezproxy.suffix.edu</em></li>
</ul>
The first uses a prefix, the second uses an infix, and the third uses a suffix.
Keep in mind that you may combine as needed to acheive the desired result.
EOF
),
  );

  $form['important'] = array(
    '#type' => 'fieldset',
    '#title' => t('Basic settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['important']['ezproxy_url_rewrite_enabled'] = array(
    '#type' => 'radios',
    '#title' => t('URL rewriting'),
    '#options' => array(
      0 => t('Disabled'),
      1 => t('Enabled for EZProxy URLs'),
      2 => t('Enabled for all URLs'),
    ),
    '#default_value' => variable_get('ezproxy_url_rewrite_enabled', 0),
    '#description' => t('Enable to rewrite URLs. Note that rewriting all URLs without the proper configuration will result in a huge performance loss.'),
  );

  $form['important']['ezproxy_url_rewrite_javascript_enabled'] = array(
    '#type' => 'radios',
    '#title' => t('Use JavaScript'),
    '#options' => array(
      1 => t('Enabled'),
      0 => t('Disabled'),
    ),
    '#default_value' => variable_get('ezproxy_url_rewrite_javascript_enabled', 0),
    '#description' => t('Although this option is <strong>not recommended</strong> because of the limitations of JavaScript, due to a bug in Drupal 6 that prevents modules from rewriting all external URLs, this option is available. Those who cannot or choose not to patch Drupal to fix the bug should enable this setting only if they would like to rewrite all URLs, otherwise leave JavaScript disabled.'),
  );

  $form['ezproxy_url_rewrite_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Prefix'),
    '#description' => t('Insert at the beginning of the rewritten URL string'),
    '#default_value' => variable_get('ezproxy_url_rewrite_prefix', ''),
  );

  $form['ezproxy_url_rewrite_infix'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Infix'),
    '#description' => t('Insert in the middle of the rewritten URL string'),
    '#default_value' => variable_get('ezproxy_url_rewrite_infix', ''),
  );

  $form['ezproxy_url_rewrite_suffix'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Suffix'),
    '#description' => t('Insert at the end of the rewritten URL string'),
    '#default_value' => variable_get('ezproxy_url_rewrite_suffix', ''),
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );

  $form['advanced']['ezproxy_url_rewrite_url_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Rewrite for specific types of URLs'),
    '#options' => array(
      'internal' => t('Internal -- relative Drupal paths'),
      'external' => t('External -- absolute URLs'),
    ),
    '#default_value' => variable_get('ezproxy_url_rewrite_url_type', array('external')),
    '#description' => t('Rewrite URLs only for the selected URL types. You must select at least one type.'),
    '#required' => TRUE,
  );

  $form['advanced']['ezproxy_url_rewrite_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Rewrite for specific roles'),
    '#options' => $roles,
    '#default_value' => variable_get('ezproxy_url_rewrite_roles', array()),
    '#description' => t('Rewrite URLs only for the selected role(s). If you select no roles, URL rewriting will be occur for all users.'),
  );

  $form['advanced']['ezproxy_url_rewrite_pages_option'] = array(
    '#type' => 'radios',
    '#title' => t('Rewrite on specific pages'),
    '#options' => array(
      1 => t('Rewrite URLs only on the listed pages.'),
      0 => t('Rewrite URLs on every page except the listed pages.'),
    ),
    '#default_value' => variable_get('ezproxy_url_rewrite_pages_option', 1),
  );

  $form['advanced']['ezproxy_url_rewrite_pages'] = array(
    '#type' => 'textarea',
    '#title' => t('Pages'),
    '#default_value' => variable_get('ezproxy_url_rewrite_pages', ''),
    '#description' => t(check_plain("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog. <front> is the front page. If the PHP-mode is chosen, enter PHP code between <?php ?>. Note that executing incorrect PHP-code can break your Drupal site.")),
  );

  $form['regex'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced regular expression matching'),
    '#description' => t('<b>Use with extreme caution and care</b>. Rewrite URL based on regular expression pattern matching for the protocol, host, port, path, query string, and/or fragment. This results in a call to preg_match("/{$pattern}/i", $subject). All text is case-insensitive. Do not add leading or trailing slashes. If left blank, no matching pattern is required and all values of the subject will be excepted for the URL rewriting.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );

  $form['regex']['ezproxy_url_rewrite_protocol_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Protocol Regex'),
    '#default_value' => variable_get('ezproxy_url_rewrite_protocol_regex', ''),
    '#description' => t('Protocol, or scheme, will not include colon (:) or slashes (/); for example, the protocol may be "http" or "ftp".'),
  );

  global $base_url;
  $_base_url = parse_url($base_url);

  $form['regex']['ezproxy_url_rewrite_host_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Host Regex'),
    '#default_value' => variable_get('ezproxy_url_rewrite_host_regex', '^(?!' . $_base_url['host'] . ')'),
    '#description' => t('Host name will include subdomains; for example "domain.edu" and "sub.home.domain.edu" are both posssible.'),
  );

  $form['regex']['ezproxy_url_rewrite_port_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Port Regex'),
    '#default_value' => variable_get('ezproxy_url_rewrite_port_regex', ''),
    '#description' => t('Port will include the number alone. Keep in mind that common ports, such as 80, may not be in the URL.'),
  );

  $form['regex']['ezproxy_url_rewrite_path_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Path Regex'),
    '#default_value' => variable_get('ezproxy_url_rewrite_path_regex', ''),
    '#description' => t('Path begins with a slash (/) and will include the directories and file name as well as the path parameters, not to be confused with query parameters.'),
  );

  $form['regex']['ezproxy_url_rewrite_query_string_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Query String Regex'),
    '#default_value' => variable_get('ezproxy_url_rewrite_query_string_regex', ''),
    '#description' => t('Query string includes key and value pairs joined by an equal sign, but will not include a leading question mark (?).'),
  );

  $form['regex']['ezproxy_url_rewrite_fragment_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Fragment Regex'),
    '#default_value' => variable_get('ezproxy_url_rewrite_fragment_regex', ''),
    '#description' => t('Fragment will not include the leading number sign, also called an hash or pound (#).'),
  );

  return system_settings_form($form);
}

/**
 * List IP address ranges
 */
function ezproxy_url_rewrite_ip_list() {
  $header = array(array(
      'data' => t('IP address range'),
      'colspan' => 4,
    ), t('Operations'));
  $row = array();
  $ip_ranges = variable_get('ezproxy_url_rewrite_ip_ranges', array());

  if (empty($ip_ranges)) {
    drupal_set_message(t('No IP address ranges found. If URL rewriting is enabled, all IP addresses would be subject to rewriting rules.'),
      'warning');
  }

  foreach ($ip_ranges as $delta => $ip) {
    $row = array();
    foreach ($ip as $range) {
      $row[] = $range[0] == $range[1] ? $range[0] : $range[0] . '-' . $range[1];
    }
    $row[] = l(t('remove'), 'admin/xc/ezproxy/ip/' . $delta . '/remove');
    $rows[] = $row;
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Add IP address range form
 */
function ezproxy_url_rewrite_ip_form($form, &$form_state) {
  $form['instructions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Instructions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['instructions']['text'] = array(
    '#type' => 'item',
    '#markup' => t(<<<EOF
Use the fields below to create a range of IP addresses to exclude from EZProxy
URL rewriting. You may enter a positive integer, a range of positive integers,
the word ALL, or an asterisk (*). The following examples are all valid:
<ul>
<li>52</li>
<li>0-128</li>
<li>ALL</li>
<li>*</li>
</ul>
IP address ranges are inclusive. If a space is left blank, the assumed value is
ALL or an asterisk (*), which are both equivalent to the range 0-255.
EOF
),
  );

  $form['ip'] = array(
    '#type' => 'fieldset',
    '#title' => t('IP address range'),
    '#prefix' => '<div class="ezproxy-url-rewrite-form-ip">',
    '#suffix' => '</div>',
    '#description' => t('The IP address range to exclude from URL rewriting'),
    '#tree' => TRUE,
  );

  $form['ip']['a'] = array(
    '#type' => 'textfield',
    '#size' => 10,
  );

  $form['ip']['b'] = array(
    '#type' => 'textfield',
    '#size' => 10,
  );

  $form['ip']['c'] = array(
    '#type' => 'textfield',
    '#size' => 10,
  );

  $form['ip']['d'] = array(
    '#type' => 'textfield',
    '#size' => 10,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add IP address range'),
  );

  return $form;
}

/**
 * Add IP address range validation
 */
function ezproxy_url_rewrite_ip_form_validate($form, &$form_state) {
  $ip = $form_state['values']['ip'];

  if (empty($ip['a']) && empty($ip['b']) && empty($ip['c'])
       && empty($ip['d'])) {
    form_set_error('ip', t('IP address cannot be empty'));
  }

  foreach ($ip as $key => $value) {
    $array = explode('-', $value);
    switch (count($array)) {
      case 0:
      case 1:
        $part = strtoupper($array[0]);
        if (empty($part) || $part == 'ALL' || $part == '*' || is_numeric($part)) {
        }
        else {
          form_set_error($key, t('%key Invalid value entered for portion of IP address range.', array('%key' => $key)));
        }
        break;
      case 2:
        if (is_numeric($array[0]) && is_numeric($array[1])
           && ($array[0] < $array[1])) {
        }
        else {
          form_set_error($key, t('%key Invalid value entered for portion of IP address range.', array('%key' => $key)));
        }
        break;
    }
  }
}

/**
 * Add IP address range submission
 */
function ezproxy_url_rewrite_ip_form_submit($form, &$form_state) {
  $ip = $form_state['values']['ip'];
  foreach ($ip as $key => $value) {
    $array = explode('-', $value);
    switch (count($array)) {
      case 0:
        $$key = array(0, 255);
        break;
      case 1:
        if (is_numeric($array[0])) {
          $num = min(array(255, $array[0]));
          $$key = array($num, $num);
        }
        else {
          $$key = array(0, 255);
        }
        break;
      case 2:
        $$key = array($array[0], $array[1]);
        break;
    }
  }

  $ip_ranges = variable_get('ezproxy_url_rewrite_ip_ranges', array());
  $ip_ranges[] = array(
    'a' => $a,
    'b' => $b,
    'c' => $c,
    'd' => $d,
  );

  variable_set('ezproxy_url_rewrite_ip_ranges', $ip_ranges);
  $form_state['redirect'] = 'admin/xc/ezproxy/ip';
  drupal_set_message(t('New IP address range added.'));
}

/**
 * Remove IP address range form
 */
function ezproxy_url_rewrite_ip_remove_form($form, &$form_state, $delta) {
  $form['delta'] = array(
    '#type' => 'value',
    '#value' => $delta,
  );
  return confirm_form($form,
    t('Are you sure you want to remove this IP address range?'),
    'admin/xc/ezproxy/ip', '', t('Remove'), t('Cancel'));
}

/**
 * Remove IP address range submission
 */
function ezproxy_url_rewrite_ip_remove_form_submit($form, &$form_state) {
  $delta = $form_state['values']['delta'];
  $ip_ranges = variable_get('ezproxy_url_rewrite_ip_ranges', array());

  unset($ip_ranges[$delta]);
  variable_set('ezproxy_url_rewrite_ip_ranges', $ip_ranges);

  $form_state['redirect'] = 'admin/xc/ezproxy/ip';
  drupal_set_message(t('IP address range removed.'));
}

/**
 * Implements hook_menu().
 */
function ezproxy_url_rewrite_menu() {
  $items['admin/xc/ezproxy'] = array(
    'title' => 'EZProxy',
    'description' => 'Register your institutions ezproxy server in Drupal.  Prerequisite: Your institution has it\'s own ezproxy server and it is up and running.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer ezproxy'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );

  $items['admin/xc/ezproxy/rewrite'] = array(
    'title' => 'URL rewriting settings',
    'description' => 'Configure URL rewriting settings based on the user\'s IP address to forward IP-protected content to an EZProxy or another proxy referral server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ezproxy_url_rewrite_settings'),
    'access arguments' => array('administer ezproxy url rewrite'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );

  $items['admin/xc/ezproxy/ip'] = array(
    'title' => 'IP address ranges',
    'description' => 'List or add IP address ranges to exclude from EZProxy URL rewriting',
    'page callback' => 'ezproxy_url_rewrite_ip_list',
    'access arguments' => array('administer ezproxy url rewrite'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );

  $items['admin/xc/ezproxy/ip/list'] = array(
    'title' => 'List',
    'access arguments' => array('administer ezproxy url rewrite'),
    'page callback' => 'ezproxy_url_rewrite_ip_list',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/xc/ezproxy/ip/add'] = array(
    'title' => 'Add IP address range',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ezproxy_url_rewrite_ip_form'),
    'access arguments' => array('administer ezproxy url rewrite'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/xc/ezproxy/ip/%/remove'] = array(
    'title' => 'Remove IP address range',
    'access arguments' => array('administer ezproxy url rewrite'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ezproxy_url_rewrite_ip_remove_form', 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Get the user's IP address
 */
function ezproxy_url_rewrite_get_ip() {
  if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
    return $_SERVER['HTTP_CLIENT_IP'];
  }
  elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    return $_SERVER['HTTP_X_FORWARDED_FOR'];
  }
  else {
    return $_SERVER['REMOTE_ADDR'];
  }
}

/**
 * Checks if URL links on the page should be rewritten
 */
function ezproxy_url_rewrite_rewrite_check() {
  global $_ezproxy_url_rewrite_active;
  if (variable_get('ezproxy_url_rewrite_enabled', 0)) {
    // If IP address is out of ranges
    $user_ip = explode('.', ezproxy_url_rewrite_get_ip());
    $ip_ranges = variable_get('ezproxy_url_rewrite_ip_ranges', array());
    foreach ($ip_ranges as $range) {
      if ($range['a'][0] <= $user_ip[0] && $user_ip[0] <= $range['a'][1] &&
          $range['b'][0] <= $user_ip[1] && $user_ip[1] <= $range['b'][1] &&
          $range['c'][0] <= $user_ip[2] && $user_ip[2] <= $range['c'][1] &&
          $range['d'][0] <= $user_ip[3] && $user_ip[3] <= $range['d'][1]) {
        return;
      }
    }

    // Rewrites
    $prefix = variable_get('ezproxy_url_rewrite_prefix', '');
    $infix = variable_get('ezproxy_url_rewrite_infix', '');
    $suffix = variable_get('ezproxy_url_rewrite_suffix', '');

    // If there is no text to replace, then do nothing
    if (empty($prefix) && empty($infix) && empty($suffix)) {
      return;
    }

    // Settings
    $roles = variable_get('ezproxy_url_rewrite_roles', array());
    $pages_option = variable_get('ezproxy_url_rewrite_pages_option', 'include');
    $pages = variable_get('ezproxy_url_rewrite_pages', '');

    // User role
    global $user;
    $valid_roles = array();
    foreach ($roles as $role) {
      if ($role) {
        $valid_roles[] = $role;
      }
    }
    $user_valid_roles = array_intersect_key($user->roles, $valid_roles);
    if (!empty($valid_roles) && empty($user_valid_roles)) {
      return;
    }

    // Page
    $page = drupal_get_path_alias($_GET['q']);
    // Compare with the internal and path alias (if any).
    $page_match = drupal_match_path($page, $pages);
    if ($page != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
    }
    // When $pages_option has a value of 0, the block is displayed on
    // all pages except those listed in $pages. When set to 1, it
    // is displayed only on those pages listed in $pages.
    if ($pages_option xor $page_match) {
      return;
    }

    // If you made it this far, then you can rewrite URLs
    $_ezproxy_url_rewrite_active = TRUE;
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function ezproxy_url_rewrite_url_outbound_alter(&$path, &$options, $original_path) {
  global $_ezproxy_url_rewrite_active;

  // Only use this function if rewriting is enabled for all URLs, is active
  // for this IP address, user, and page, and has JavaScript disabled
  if (variable_get('ezproxy_url_rewrite_enabled', 0) && $_ezproxy_url_rewrite_active
       && !variable_get('ezproxy_url_rewrite_javascript_enabled', 0)) {

    // If rewriting is enabled for EZProxy URLs only and the URL has not already
    // been rewritten or is not an EZProxy URL, then exit
    if (variable_get('ezproxy_url_rewrite_enabled', 0) == 1) {
      if (empty($options['ezproxy-incomplete'])) {
        return;
      }
      else {
        unset($options['ezproxy-incomplete']);
        $options['ezproxy-complete'] = TRUE;
      }
    }

    // Rewrites
    $prefix = variable_get('ezproxy_url_rewrite_prefix', '');
    $infix = variable_get('ezproxy_url_rewrite_infix', '');
    $suffix = variable_get('ezproxy_url_rewrite_suffix', '');

    // Base URL
    global $base_url;
    $_base_url = parse_url($base_url);

    // Fix an issue with Drupal not understanding that external links are
    // absolute links as well
    if ($options['external']) {
      $options['absolute'] = TRUE;
    }

    // External or internal link
    $url_type = variable_get('ezproxy_url_rewrite_url_type', array('external'));
    if (($options['external'] && !$url_type['external']) ||
       (!$options['external'] && !$url_type['internal'])) {
      return;
    }

    // Regular expressions
    $protocol_regex = variable_get('ezproxy_url_rewrite_protocol_regex', '');
    $host_regex = variable_get('ezproxy_url_rewrite_host_regex',
      '^(?!' . $_base_url['host'] . ')');
    $port_regex = variable_get('ezproxy_url_rewrite_port_regex', '');
    $path_regex = variable_get('ezproxy_url_rewrite_path_regex', '');
    $query_string_regex = variable_get('ezproxy_url_rewrite_query_string_regex', '');
    $fragment_regex = variable_get('ezproxy_url_rewrite_fragment_regex', '');

    // Finally, regular expression matching requires the URL to be broken
    // into parts. Since Drupal can have the query string as a string or array,
    // check for both
    if (is_array($options['query'])) {
      $query = '';
      foreach ($options['query'] as $key => $value) {
        $query .= $key . '=' . $value;
      }
    }
    else {
      $query = $options['query'];
    }

    // Now get the absolute URL from the Drupal URL, which may be relative
    // and parse the full URL into chunks for the matching below
    $absolute = $options['absolute']
      ? $path
      : $options['base_url'] . '/' . $path
        . (empty($query)
          ? ''
          : '?' . $query);
    $url = parse_url($absolute);

    // Regular expression pattern matching against parts of the URL
    if ((!empty($protocol_regex) && !preg_match("/$protocol_regex/i", $url['scheme']))
         || (!empty($host_regex) && !preg_match("/$host_regex/i", $url['host']))
         || (!empty($port_regex) && !preg_match("/$port_regex/i", $url['port']))
         || (!empty($path_regex) && !preg_match("/$path_regex/i", $url['path']))
         || (!empty($query_string_regex) && !preg_match("/$query_string_regex/i",
          $url['query']))
         || (!empty($fragment_regex) && !preg_match("/$fragment_regex/i",
          $url['fragment']))) {
      return;
    }

    // Finally, if you made it this far, do the rewriting
    // Break new absolute URL into parts and form a new absolute URL, including
    // the new prefix, infix, and suffix
    $_absolute = $prefix . (empty($url['scheme']) ? '' : $url['scheme'] . '://') . $url['host'] . $infix . (empty($url['port']) ? '' : ':' . $url['port']) . $url['path'] . (empty($url['query']) ? '' : '?' . $url['query']) . (empty($url['fragment']) ? '' : '#' . $url['fragment']) . $suffix;
    $_url = parse_url($_absolute);

    // Finally, turn the new rewritten URL back into the format necessary
    // for the Drupal url() function
    if ($options['external']) {
      $path = (empty($_url['scheme']) ? '' : $_url['scheme'] . '://')
        . $_url['host']
        . (empty($_url['port']) ? '' : ':' . $_url['port'])
        . $_url['path']
        . (empty($_url['query']) ? '' : '?' . $_url['query']);
      $options['fragment'] = (empty($_url['fragment']) ? ''
        : '#' . $_url['fragment']);
      $options['absolute'] = TRUE;
    }
    else {
      $path = ltrim($_url['path'], '/');
      $options['base_url'] = $_url['scheme'] . '://' . $_url['host']
        . (empty($_url['port']) ? '' : ':' . $_url['port']);
      $options['query'] = $_url['query'];
      $options['fragment'] = (empty($_url['fragment']) ? ''
        : '#' . $_url['fragment']);
      $options['absolute'] = TRUE;
    }
  }
}

/**
 * Wrapper function to ensure EZProxy rewriting for a URLs
 *
 * @see url()
 */
function ezproxy_url($path = NULL, $options = array()) {
  $original_path = $path;
  $options['ezproxy-incomplete'] = TRUE;
  $options['external'] = (
    $colonpos !== FALSE
    && !preg_match('![/?#]!', drupal_substr($path, 0, $colonpos))
    && filter_xss_bad_protocol($path, FALSE) == check_plain($path)
  );

  ezproxy_url_rewrite_url_outbound_alter($path, $options, $original_path);
  // TODO The second parameter to this function call should be an array.
  return url($path, $options);
}

/**
 * Wrapper function to ensure EZProxy rewriting for a link tag
 *
 * @see l()
 */
function ezproxy_l($text, $path, $options = array()) {
  $original_path = $path;
  $options['ezproxy-incomplete'] = TRUE;
  $options['external'] = (
    $colonpos !== FALSE
    && !preg_match('![/?#]!', drupal_substr($path, 0, $colonpos))
    && filter_xss_bad_protocol($path, FALSE) == check_plain($path)
  );

  ezproxy_url_rewrite_url_outbound_alter($path, $options, $original_path);
  return l($text, $path, $options);
}
