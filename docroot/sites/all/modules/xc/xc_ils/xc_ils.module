<?php
/**
 * @file
 * The XC ILS is a small mmodule which helps to use ILS-specific settings in the Drupal Toolkit.
 *
 * We currently use only one of the possible settings: mapping the bibliographic
 * record identifier to an NCIP server. When the DT display an XC record, the
 * XC ILS module give the name of the identifier field, and the content of that
 * field will be used by the NCIP protocol.
 *
 * The module use the xc_ils_settings table, which have the following fields:
 * - <code>settings_id</code> The identifier of the record
 * - <code>ncip_provider_id</code> The identifier of the NCIP server record in database
 * - <code>book_id_field<code> The name of the bibliographical identifier field
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Permission for administering ILS
 * @var String
 */
define('ADMINISTER_ILS', 'administer ils');

/**
 * Implements hook_permission().
 * @return (Array)
 *   The array of permissions in this module
 */
function xc_ils_permission() {
  return array(
    ADMINISTER_ILS => array(
      'title' => t(ADMINISTER_ILS),
      'description' => t('TODO Add a description for ADMINISTER_ILS'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function xc_ils_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/xc/ils':
    case 'admin/xc/ils/list':
    case 'admin/xc/ils/add':
    case 'admin/xc/ils/%/edit':
    case 'admin/xc/ils/%':
      $output .= '<p>';
      $output .= t('The Integrated Library System (ILS) setting maps metadata records by their bibliographical identifier (shortly, "bibID") to circulation status and other information (availability, call number, etc.) from an ILS, fetched through the NCIP protocol. One bibliographical record in XC may contain multiple bibIDs for different library units, since the Metadata Services Toolkit (the data source of XC schema records) aggregates the collections of a library consortia. In XC schema it is the !em xc:recordID !me element which contains bibliographical identifiers, and its !em type !me attribute contains the organizational code identifying the library unit within the consortia. We would like to call your attention, that an organizational code may refers to not just library units, but to service providers, like OCLC, which are not available through NCIP calls. Drupal will first extracts the bib ID value and the organizational code from the record, then calls NCIP to receive the status information, and finally display it.', array('!em' => '<em>', '!me' => '</em>'));
      $output .= '</p>';

      $output .= '<p>';
      $output .= t('The structure of the <emBib identifier field</em> input:<br />[field name]|@[attribute name]=[attribute value]');
      $output .= '</p>';

      $output .= '<p>';
      $output .= t('For example:<br />xc:recordID|@type=NRU');
      $output .= '</p>';

      $output .= '</p>';
      $output .= t('Usually the field is xc:recordID, the attribute name is type, and the attribute value is the organizational code.');
      $output .= '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_menu().
 * @return (Array)
 *   The menu array
 */
function xc_ils_menu() {
  $items['admin/xc/ils'] = array(
    'title' => 'Integrated Library Systems',
    'description' => 'Provide ILS specific information to connect XC schema records with NCIP lookups by bib/holding IDs. Prerequisites: Setup Metadata Harvester and ILS (NCIP) Server(s) using the other admin menus.',
    'page callback' => 'xc_ils_list',
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 8,
  );
  $items['admin/xc/ils/list'] = array(
    'title' => 'List',
    'description' => 'Create, modify, and view ILS settings',
    'page callback' => 'xc_ils_list',
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/xc/ils/add'] = array(
    'title' => 'Add',
    'description' => 'Add new ILS setting',
    'page callback' => 'xc_ils_add',
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/xc/ils/%xc_ils_settings'] = array(
    'title' => 'Show ILS setting',
    'description' => 'Show ILS setting',
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_NORMAL_ITEM,
    'title callback' => 'xc_ils_title',
    'title arguments' => array(3),
    'page callback' => 'xc_ils_view',
    'page arguments' => array(3),
  );
  $items['admin/xc/ils/%xc_ils_settings/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/xc/ils/%xc_ils_settings/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit ILS setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ils_edit_form', 3),
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/xc/ils/%xc_ils_settings/disable'] = array(
    'title' => 'Disable',
    'description' => 'Disable ILS setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ils_disable_form', 3),
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'xc_ils.admin.inc',
  );
  $items['admin/xc/ils/%xc_ils_settings/enable'] = array(
    'title' => 'Enable',
    'description' => 'Enable ILS setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ils_enable_form', 3),
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'xc_ils.admin.inc',
  );
  $items['admin/xc/ils/%xc_ils_settings/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete ILS setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_ils_delete_form', 3),
    'access arguments' => array(ADMINISTER_ILS),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'xc_ils.admin.inc',
  );

  return $items;
}

/**
 * Get the availability of items from the NCIP provider
 *
 * @param $ncip_provider_id (int)
 *    NCIP provider identifier, where the records are harvested from
 * @param $item_ids (Array)
 *    Array of ItemId's. An example:
 *    <code>array('bib' => array('id' => 14151, 'agency_id' => 'NRU'))</code>
 *    Where 'bib' is a list of bib IDs. It is an array of associated arrays. The
 *    assoc array should have an 'id' which is the bib ID, and an optional organizational
 *    code.
 *
 * @return
 *    Array with ItemId's as keys and availabiity as value, for example:
 *    array(123456 => 'Possibly Available');
 *    If there's no NCIP connected to the OAI provider, returns an empty array.
 */
function xc_ils_get_availability($ncip_provider_id, $item_ids = array(), $org_code = array(), $timeout = FALSE) {
  if (!empty($ncip_provider_id) && !empty($item_ids)) {
    $ncip_provider = xc_ncip_provider_load($ncip_provider_id);

    // version 1, 1.01
    if ($ncip_provider->version == 1 || $ncip_provider->version == 1.01) {
      if (!is_array($item_ids)) {
        $item_ids = array($item_ids);
      }
      if (!isset($item_ids['bib'])) {
        $item_ids = array('bib' => $item_ids);
      }
      $response = xc_ncip_provider_xc_get_availability($ncip_provider_id, $item_ids, 'results', $timeout);
      /*
       * results
       *   bib
       *     [bib_id]
       *       ItemId
       *       CirculationStatus
       *       ItemDescription
       *         CallNumber
       *         HoldingsInformation
       *       Location
       */
    }
    // version 2, 2.01
    else {
      $bibs = array();
      if (!is_array($item_ids)) {
        $item_ids = array($item_ids);
      }
      if (!is_array($org_code)) {
        $org_code = array($org_code);
      }

      for ($i = 0; $i < count($item_ids); $i++) {
        $bib = array('id' => $item_ids[$i]);
        if (isset($org_code[$i])) {
          $bib['agency_id'] = array('value' => $org_code[$i]);
        }
        $bibs[] = $bib;
      }
      $item_ids = array('bib' => $bibs);
      $response = xc_ncip_provider_lookup_item_set($ncip_provider_id, $item_ids, array('Circulation Status', 'Location', 'Bibliographic Description'));
      /*
       * results
       *   BibInformation
       *     [bibid]
       *       bibid
       *       BibliographicDescription
       *         Author
       *         Title
       *       HoldingsSet
       *         [holdings_id]
       *           CallNumber
       *           ItemInformation
       *             [item_id]
       *               ItemId
       *               CirculationStatus
       *               HoldQueueLength
       *               ItemDescription
       *                 CallNumber
       *                 HoldingsInformation
       *               Location
       */
    }
    return $response;
  }
  return NULL;
}

/**
 * Get the record by identifier
 *
 * @param $id (int)
 *   The identifier of the record
 * @param $from_cache (boolean)
 *   If TRUE (default), it uses the cache, otherwise it freshly request the
 *   record
 *
 * @return (Object)
 *   The record, if there is
 */
function xc_ils_settings_load($id, $from_cache = TRUE) {
  static $cache;
  if (!$from_cache || !isset($cache[$id])) {
    $result = db_query('SELECT * FROM {xc_ils_settings} WHERE settings_id = :settings_id', array(':settings_id' => $id));
    $data = $result->fetchObject();
    $cache[$id] = $data;
  }
  return $cache[$id];
}

/**
 * Get the record identifier field's name (the field by wich the NCIP can
 * identify a bib record) by the id of OAI provider
 *
 * @param $ncip_provider_id (int)
 *   The NCIP identifier
 *
 * @return (String)
 *   The schema field, which contains the record identifier
 */
function xc_ils_field_by_provider($ncip_provider_id) {
  static $cache;
  if (!isset($cache[$ncip_provider_id])) {
    $result = db_query('SELECT * FROM {xc_ils_settings} WHERE ncip_provider_id = :ncip_provider_id', array(':ncip_provider_id' => $ncip_provider_id));
    $data = $result->fetchObject();
    $cache[$ncip_provider_id] = $data->book_id_field;
  }
  return $cache[$ncip_provider_id];
}

/**
 * Return the title of a page
 * @param $record
 * @return (String)
 *   The title of a page
 */
function xc_ils_title($record) {
  if (!is_int($record->ncip_provider_id)) {
    $record = xc_ils_settings_load($record->settings_id, FALSE);
  }
  $options = xc_ils_options();
  $title = $options['ncip_provider_id'][$record->ncip_provider_id];
  return $title;
}

/**
 * Get the name and label of fields in the xc_ils_settings table
 * @return (Array)
 *   The array of fields and its labels in the xc_ils_settings table
 */
function xc_ils_fieldset() {
  return array(
    'ncip_provider_id' => t('NCIP server'),
    'book_id_field' => t('Bib identifier field'),
    'is_enabled' => t('Enable?'),
  );
}

/**
 * Get the list of possible options in the NCIP server field dropdown box
 *
 * @return (Array)
 *   The list of NCIP server identifier--name pairs
 */
function xc_ils_ncip_options() {
  static $ncips;

  if (!isset($ncips) && function_exists('xc_ncip_provider_get_all')) {
    $ncips_raw = xc_ncip_provider_get_all();
    $ncips = array();
    foreach ($ncips_raw as $ncip_raw) {
      $ncips[$ncip_raw->ncip_provider_id] = $ncip_raw->name;
    }
  }

  return $ncips;
}

/**
 * Return the list of options in the fields of the table
 * @return (Array)
 *   The list of options as fieldname--array of options pairs
 */
function xc_ils_options() {
  return array(
    'ncip_provider_id' => xc_ils_ncip_options(),
    'is_enabled' => array(
      '1' => t('Yes'),
      '0' => t('No'),
    ),
  );
}

/**
 * Display the properties of a XC ILS setting
 *
 * @param $record (Object)
 *   The record as come from the database
 *
 * @return (String)
 *   The themed version of the record
 */
function xc_ils_view($record) {
  $options = xc_ils_options();
  $record2 = $record; // otherwise it overwrites the original $record
  $record2->ncip_provider_id = l(
    $options['ncip_provider_id'][$record->ncip_provider_id],
    'admin/xc/harvester/repository/' . $record->ncip_provider_id
  );
  return xc_util_view($record2, xc_ils_fieldset());
}

/**
 * List of all XC ILS settings
 *
 * @return (String)
 *   The themed list
 */
function xc_ils_list() {
  $options = xc_ils_options();
  $headers = array(
    t('NCIP server'),
    t('Bib identifier field'),
    t('Enabled?'),
    array(
      'data' => t('Operations'),
      'colspan' => 3,
    ),
  );
  $rows = array();

  $sql = 'SELECT * FROM {xc_ils_settings}';
  $result = db_query($sql);
  //while ($data = db_fetch_object($result)) {
  foreach($result as $data) {

    $rows[] = array(
      l($options['ncip_provider_id'][$data->ncip_provider_id],
        'admin/xc/ncip/provider/' . $data->ncip_provider_id),
      $data->book_id_field,
      ($data->is_enabled ? t('Yes') : t('No')),
      l(t('edit'), 'admin/xc/ils/' . $data->settings_id . '/edit'),
      ($data->is_enabled == 1
        ? l(t('disable'), 'admin/xc/ils/' . $data->settings_id . '/disable')
        : l(t('enable'), 'admin/xc/ils/' . $data->settings_id . '/enable')
      ),
      l(t('delete'), 'admin/xc/ils/' . $data->settings_id . '/delete'),
    );
  }
  if (empty($rows)) {
    drupal_set_message(t('No ILS settings are on this system. You must first !add an ILS setting.',
      array('!add' => l(t('add'), 'admin/xc/ils/add'))),
      'warning');
  }
  return theme('table', array('header' => $headers, 'rows' => $rows));
}

/**
 * Add a new server
 * @return (String)
 *   The add server page with a form
 */
function xc_ils_add() {
  drupal_set_title(t('ILS settings'));
  return drupal_get_form('xc_ils_form');
}

/**
 * Get the form for adding a new server
 * @return (Array)
 *   The form according to FAPI
 */
function xc_ils_form($form) {
  $schema = drupal_get_schema_unprocessed('xc_ils', 'xc_ils_settings');
  drupal_set_title($schema['description']);
  $options = array(
    'omit' => array('settings_id'),
    'select' => xc_ils_options(),
    'label' => xc_ils_fieldset(),
  );
  $form = xc_util_build_autoform($schema, $options);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Get the form for editing an existing server
 *
 * @param $form_state (Array)
 * @param $record (Object)
 *
 * @return (Array)
 *   The form according to FAPI
 */
function xc_ils_edit_form($form, &$form_state, $record) {
  $form = xc_ils_form();
  $form['settings_id'] = array(
    '#type' => 'hidden',
    '#value' => $record->settings_id,
  );

  foreach (xc_ils_fieldset() as $name => $label) {
    $form[$name]['#default_value'] = $record->$name;
  }

  $form['submit']['#value']      = t('Save');
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  return $form;
}

/**
 * Handler function for submitting the new record form
 * @param $form (Array)
 * @param $form_state (Array)
 */
function xc_ils_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $record = new stdClass();
  foreach (xc_ils_fieldset() as $name => $label) {
    $record->$name = $values[$name];
  }

  $ret_val = drupal_write_record('xc_ils_settings', $record);
  if ($ret_val == SAVED_NEW) {
    drupal_set_message(t('Thank you for adding ILS settings'));
    $form_state['redirect'] = 'admin/xc/ils/' . $record->settings_id;
  }
  else {
    drupal_set_message(t('Unexpected error. Failed to create new ILS settings.'));
  }
}

/**
 * Handler function for submitting an existing record form
 * @param $form (Array)
 * @param $form_state (Array)
 */
function xc_ils_edit_form_submit($form, &$form_state) {
  $values = $form_state['clicked_button']['#post'];
  $record = new stdClass();
  $record->settings_id = $values['settings_id'];
  $record->name   = $values['name'];

  if ($form_state['clicked_button']['#value'] == t('Delete')) {
    $result = db_delete('xc_ils_settings')
              ->condition('settings_id', $record->settings_id)
              ->execute();
    if ($result == 1) { // repository is deleted
      drupal_set_message(t('ISL settings removed'));
      $form_state['redirect'] = 'admin/xc/ils/list';
    }
    else {
      drupal_set_message(t('Unexpected error. Deletion removed %count ILS settings.',
        array('%count' => $result)));
    }
  }
  elseif ($form_state['clicked_button']['#value'] == t('Save')) {
    foreach (xc_ils_fieldset() as $name => $label) {
      $record->$name = $values[$name];
    }

    $result = drupal_write_record('xc_ils_settings', $record, 'settings_id');
    if ($result == SAVED_UPDATED) { // repository is updated
      drupal_set_message(t('ILS settings modified'));
      $form_state['redirect'] = 'admin/xc/ils/' . $record->settings_id . '/view';
    }
    else {
      drupal_set_message(t('Unexpected error. Failed to modify ILS settings.'));
    }
  }
  else {
    drupal_set_message(t('Unexpected error. Something else happened.'));
  }
}

/**
 * Return all registered mappings as fieldname => array of NCIP IDs
 *
 * @return (Array)
 */
function xc_ils_get_all_mappings($only_enabled = TRUE) {
  $sql = 'SELECT * FROM {xc_ils_settings}';
  if ($only_enabled) {
    $sql .= ' WHERE is_enabled = 1';
  }

  $result = db_query($sql);
  $mappings = array();
  //while ($data = db_fetch_object($result)) {
  foreach ($result as $data) {
    if (strstr($data->book_id_field, '|')) {
      list($field, $attrib) = explode('|', $data->book_id_field);
      list($name, $value) = explode('=', $attrib);
      $mappings[$field][] = array(
        'ncip_provider_id' => $data->ncip_provider_id,
        'filter' => array($name => $value),
      );
    }
    else {
      $mappings[$data->book_id_field][] = array('ncip_provider_id' => $data->ncip_provider_id);
    }
  }

  return $mappings;
}
