<?php
/**
 * @file
 * Install file for the XC-OAI Harvester Bridge module
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

/**
 * Implements hook_uninstall().
 */
function xc_oaiharvester_bridge_uninstall() {
  variable_del('xc_oaiharvester_bridge_max_metadata_id');
}

/**
 * Implements hook_schema().
 */
function xc_oaiharvester_bridge_schema() {

  $schema['xc_oaiharvester_bridge_header'] = array(
    'description' => 'Information about the harvested records header.',
    'fields' => array(
      'header_id' => array(
        'description' => 'The primary identifier of a metadata format.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'oai_identifier' => array(
        'description' => 'The oai identifier.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''),
      'datestamp' => array(
        'description' => 'The datestamp of record.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => TRUE
      ),
    ),
    // TODO: add index
    // ALTER TABLE `xc_oaiharvester_bridge_header`  DROP INDEX `format_id`,  ADD INDEX `header_id` (`header_id`);
    // ALTER TABLE `xc_oaiharvester_bridge_header`  ADD INDEX `oai_identifier` (`oai_identifier`);
    'indexes' => array(
      'header_id' => array('header_id'),
      'oai_identifier' => array('oai_identifier'),
    ),
    'primary key' => array('header_id'),
  );

  $schema['xc_oaiharvester_bridge_set'] = array(
    'description' => 'Information about the record\'s sets.',
    'fields' => array(
      'set_to_header_id' => array(
        'description' => 'The primary identifier of a metadata format.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'header_id' => array(
        'description' => 'The primary identifier of a metadata format.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'set_spec' => array(
        'description' => 'The OAI standard\'s set specification.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'indexes' => array(
      'set_to_header_id' => array('set_to_header_id'),
      'header_id' => array('header_id'),
    ),
    'primary key' => array('set_to_header_id'),
  );

  $schema['xc_oaiharvester_bridge_schedule_source'] = array(
    'description' => 'Link table between schedule ID and source ID',
    'fields' => array(
      'schedule_id' => array(
        'description' => 'Related schedule ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'source_id' => array(
        'description' => 'Related source ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      )
    ),
    'unique keys' => array(
      'source_id_schedule_id' => array('source_id', 'schedule_id')
    ),
    'primary key' => array('schedule_id', 'source_id')
  );

  $schema['xc_oaiharvester_bridge_schedule_info'] = array(
    'description' => 'Link table between schedule ID and source ID',
    'fields' => array(
      'schedule_id' => array(
        'description' => 'Related schedule ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'do_defrbrize' => array(
        'description' => "Do 'preparing metadata for search' step after harvest?",
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE
       ),
      'use_insert' => array(
        'description' => "Use MySQL INSERT method for creating records in batch mode instead of default LOAD DATA INFILE?",
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE
       ),
     ),
    'indexes' => array(
      'schedule_id' => array('schedule_id'),
    ),
    'primary key' => array('schedule_id')
  );

  $schema['xc_oaiharvester_bridge_changes'] = array(
    'description' => 'The changes of harvest (updated, deleted, new records)',
    'fields' => array(
      'metadata_id' => array(
        'description' => 'The metadata ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'identifier_int' => array(
        'description' => 'The integer version of OAI identifier',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE
      ),
      'metadata_type' => array(
        'description' => 'Metadata type',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE
      ),
      'type' => array(
        'description' => 'Type of change',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE
       ),
     ),
    'indexes' => array(
      'metadata' => array('metadata_id', 'type'),
      'metadata_id' => array('metadata_id'),
      'metadata_type' => array('metadata_type'),
      'type' => array('type'),
     ),
  );

  return $schema;
}

/**
 * Implementation of hook_update_N().
 * Adding xc_oaiharvester_bridge_changes.identifier_int
 */
function xc_oaiharvester_bridge_update_7000() {
  $schema = xc_oaiharvester_bridge_schema();
  $table = 'xc_oaiharvester_bridge_changes';
  $fields = array('identifier_int');
  foreach ($fields as $field) {
    if (!db_field_exists($table, $field)) {
      db_add_field($table, $field, $schema[$table]['fields'][$field]);
    }
  }
  return t('New field added: xc_oaiharvester_bridge_changes.identifier_int');
}