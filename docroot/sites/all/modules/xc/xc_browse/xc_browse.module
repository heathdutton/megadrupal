<?php
/**
 * @file
 * XC Browse make it available for administrators to create browse interfaces.
 *
 * The user can browse the records according to predefined categories, like
 * by title, or by name of genres.
 * For more details see http://drupal.org/node/716998.
 *
 * @copyright (c) 2010-2011 eXtensible Catalog Organization
 */

include_once 'admin/xc_browse_ui.inc';
include_once 'admin/xc_browse_tab.inc';
include_once 'admin/xc_browse_element.inc';
include_once 'admin/xc_browse_list.inc';

/**
 * Permissions for administering XC Browse
 * @var String
 */
define('ADMINISTER_XC_BROWSE', 'administer xc_browse');

/**
 * Implements hook_permission().
 *
 * Returns the list of permission types.
 *
 * @return (Array)
 *   The list of permissions used in the XC Browse module
 */
function xc_browse_permission() {
  return array(
    ADMINISTER_XC_BROWSE => array(
      'title' => t(ADMINISTER_XC_BROWSE),
      'description' => t('TODO Add a description for ADMINISTER_XC_BROWSE'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * @return (Array)
 *   The array of menu items
 */
function xc_browse_menu() {
  $items['xc_browse'] = array(
    'title' => 'Browse pages',
    'description' => 'List of browse interfaces.',
    'page callback' => 'xc_browse_list_uis',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
  $uis = xc_browse_ui_get_all(TRUE);
  foreach ($uis as $ui) {
    $items['xc_browse/' . $ui->name] = array(
      'title' => $ui->label,
      'description' => 'Show a browse interface with the default tab.',
      'page callback' => 'xc_browse_show_ui',
      'page arguments' => array($ui->name),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
      'weight' => 0,
    );
    $tabs_count = 0;
    $tabs = xc_browse_tab_get_by_ui($ui->bid);
    foreach ($tabs as $tab) {
      $items['xc_browse/' . $ui->name . '/' . $tab->tab_id] = array(
        'title' => $tab->label,
        'description' => 'Show browse interface with a given tab.',
        'page callback' => 'xc_browse_show_ui',
        'page arguments' => array($ui->name, $tab->tab_id),
        'access callback' => TRUE,
        'type' => $tabs_count ? MENU_LOCAL_TASK : MENU_DEFAULT_LOCAL_TASK,
        'weight' => $tab->weight,
      );
      $items['xc_browse/' . $ui->name . '/' . $tab->tab_id . '/%'] = array(
        'title' => $tab->label,
        'description' => 'Show browse interface with search result.',
        'page callback' => 'xc_browse_show_ui',
        'page arguments' => array($ui->name, $tab->tab_id, 3),
        'access callback' => TRUE,
        'type' => MENU_LOCAL_TASK,
        'weight' => $tab->weight,
      );
      $tabs_count++;
    } // foreach tabs
  } // foreach UI
  $items['admin/xc/browse'] = array(
    'title' => 'Browse Interface Builder',
    'description' => 'Enables you to setup pre-built browse interfaces using web forms.',
    'page callback' => 'xc_browse_ui_list',
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );
  $items['admin/xc/browse/list'] = array(
    'title' => 'List',
    'description' => 'List browse UIs',
    //'file' => 'browse/xc_browse_ui.inc',
    'page callback' => 'xc_browse_ui_list',
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/xc/browse/add'] = array(
    'title' => 'Add browse UIs',
    'description' => 'Add a browse UI',
    //'file' => 'browse/xc_browse_ui.inc',
    'page callback' => 'xc_browse_ui_add',
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/xc/browse/%xc_browse_ui'] = array(
    'title' => 'Show display template',
    'description' => 'Show a browse UI',
    //'file' => 'browse/xc_browse_ui.inc',
    'title callback' => 'xc_browse_ui_title',
    'title arguments' => array(3),
    'page callback' => 'xc_browse_admin_ui_view',
    'page arguments' => array(3),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/xc/browse/%xc_browse_ui/view'] = array(
    'title' => 'View',
    'description' => 'Show a browse UI',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/xc/browse/%xc_browse_ui/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a browse UI',
    //'file' => 'browse/xc_browse_ui.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_browse_ui_edit_form', 3),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  // browse UI tab
  $items['admin/xc/browse/%xc_browse_ui/tab_add'] = array(
    'title' => 'Add a content pane',
    'description' => 'Add a tab',
    'page callback' => 'xc_browse_tab_add',
    'page arguments' => array(3),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab'] = array(
    'title' => 'View a content pane',
    'description' => 'View a content pane',
    'page callback' => 'xc_browse_tab_view',
    'page arguments' => array(3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/view'] = array(
    'title' => 'View a content pane',
    'description' => 'View a content pane',
    'page callback' => 'xc_browse_tab_view',
    'page arguments' => array(3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/edit'] = array(
    'title' => 'Edit a content pane',
    'description' => 'Edit a content pane',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_browse_tab_edit_form', 3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/delete'] = array(
    'title' => 'Delete a content pane',
    'description' => 'Delete a content pane',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_browse_tab_delete_form', 3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // browse UI form elements
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/el'] = array(
    'title' => 'Form elements',
    'description' => 'List form elements',
    'page callback' => 'xc_browse_element_list',
    'page arguments' => array(3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/el_list'] = array(
    'title' => 'Form elements',
    'description' => 'List form elements',
    'page callback' => 'xc_browse_element_list',
    'page arguments' => array(3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/el_add'] = array(
    'title' => 'View a form element',
    'description' => 'View a form element',
    'page callback' => 'xc_browse_element_add',
    'page arguments' => array(3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_element/el'] = array(
    'title' => 'View a form element',
    'description' => 'View a form element',
    'page callback' => 'xc_browse_element_view',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_element/el_view'] = array(
    'title' => 'View a form element',
    'description' => 'View a form element',
    'page callback' => 'xc_browse_element_view',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_element/el_edit'] = array(
    'title' => 'Edit a form element',
    'description' => 'Edit a form element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_browse_element_edit_form', 3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_element/el_delete'] = array(
    'title' => 'Delete a form element',
    'description' => 'Delete a form element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_browse_element_delete_form', 3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );

  // browse UI form elements
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/list_add'] = array(
    'title' => 'Add a navigation list',
    'description' => 'Add a navigation list',
    'page callback' => 'xc_browse_list_add',
    'page arguments' => array(3, 4),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_list/list'] = array(
    'title' => 'View a navigation list',
    'description' => 'View a navigation list',
    'page callback' => 'xc_browse_list_view',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_list/list_view'] = array(
    'title' => 'View a navigation list',
    'description' => 'Add a navigation list',
    'page callback' => 'xc_browse_list_view',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_list/list_edit'] = array(
    'title' => 'Edit a navigation list',
    'description' => 'Edit a navigation list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_browse_list_edit_form', 3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/xc/browse/%xc_browse_ui/%xc_browse_tab/%xc_browse_list/list_delete'] = array(
    'title' => 'Delete a navigation list',
    'description' => 'Delete a navigation list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xc_browse_list_delete_form', 3, 4, 5),
    'access arguments' => array(ADMINISTER_XC_BROWSE),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function xc_browse_block_info() {
  if (TRUE) {
    $pages = array(
      'node/*',
      'xc_browse/*',
    );

    $blocks['abc_list'] = array(
      'info' => t('XC browse: ABC list'),
      'region' => 'header',
      'status' => 1,
      'visibility' => 1,
      'pages' => join("\n", $pages),
      'cache' => DRUPAL_NO_CACHE,
    );

    $blocks['search_form'] = array(
      'info' => t('XC browse: search form'),
      'region' => 'header',
      'status' => 1,
      'visibility' => 1,
      'pages' => join("\n", $pages),
      'cache' => DRUPAL_NO_CACHE,
    );

    return $blocks;
  }
}

/**
 * Implements hook_block_view().
 */
function xc_browse_block_view($delta) {
  if (TRUE) {
    $block = array();
    if (arg(0) == 'node') {
      if (isset($_GET['caller']) && $_GET['caller'] == 'xc-browse') {
        if (!isset($prepare_node)) {
          $browse_commons = new stdClass();
          $browse_commons->browse_page = urldecode(urldecode($_SESSION['xc_search_query']['xc_browse']['search_page']));

          $browse_commons->browse_url = parse_url($browse_commons->browse_page);
          parse_str($browse_commons->browse_url['query'], $browse_commons->browse_params);

          if (isset($browse_commons->browse_params['q'])) {
            $browse_commons->path = $browse_commons->browse_params['q'];
          }
          else {
            $browse_commons->path = $browse_commons->browse_url['path'];
          }

          $browse_commons->args = explode('/', $browse_commons->path);
        }

        if ($browse_commons->args[0] != 'xc_browse') {
          $prepare_node = TRUE;
          return;
        }
      }
      else {
        $prepare_node = TRUE;
        return;
      }

      if (!isset($prepare_node)) {
        xc_browse_cache('browse_commons', $browse_commons);
        // other common tasks requred for /node/123 URLs
        drupal_add_css(drupal_get_path('module', 'xc_browse') . '/xc_browse.css', array('preprocess' => FALSE));
        if (xc_browse_cache('tabs_primary') === FALSE) {
          $tabs_primary = xc_cache_get_data('xc_browse:menu_primary_local_tasks:' . $browse_commons->path, NULL);
          xc_browse_cache('tabs_primary', $tabs_primary);
        }
        $prepare_node = TRUE;
      }
    }

    if ($delta == 'abc_list') {
      if (arg(0) == 'node') {
        $ui_name = $browse_commons->args[1];
        $tab_id = (int) $browse_commons->args[2];
      }
      else {
        $ui_name = arg(1);
        $tab_id = (int) arg(2);
      }

      if ($tab_id == 0) {
        $ui_and_tab = xc_browse_get_ui_with_tabs($ui_name);
        if (!is_array($ui_and_tab)) {
          return;
        }
        list($ui, $tabs) = $ui_and_tab;
        $tab_id = $tabs[0]->tab_id;
      }

      $items = array();
      $path = 'xc_browse/' . $ui_name . '/' . $tab_id;
      $tab = xc_browse_tab_load($tab_id);
      $tab->default_query = preg_replace_callback("/\{(\w+:[\w-]+)\}/", '_xc_browse_field_replace', $tab->default_query);

      $bars = xc_browse_list_get_by_tab($tab_id);

      $items = array();
      foreach ($bars as $bar) {
        if ($bar->type == 'ABC') {
          $solr_field = xc_browse_get_solr_field($bar->field, 'phrase', FALSE);
          $abc = xc_browse_list_get_ABC();
          foreach ($abc as $letter) {
            if ($letter == '0-9') {
              $queries = array();
              foreach (range('0', '9') as $number) {
                $queries[] = $bar->field . ':' . $number . '*';
              }

              $query_expression = array($tab->default_query, join(' OR ', $queries));
              $items[] = array(
                'data' => l(
                  $letter,
                  $path . '/*',
                  array(
                  'query' => array(
                    'search_type' => 'browse',
                    'filter' => $query_expression,
                    '?sort' => 'dcterms__title_min_ss asc',
                  ),
                )
                ),
              );
            }
            else {
              $items[] = array(
                'data' => xc_browse_make_link(
                  $solr_field,          // solr_field
                  $letter,              // value
                  $bar->query_type,     // query_type
                  $path,                // path
                  $tab->default_query, // $default_query
                  $letter,              // label
                  array(// $url_params
                  '?sort' => 'dcterms__title_min_ss asc',
                  'qid' => 1,
                )
                ), //
              );
            }
          }
          $block = array(
            'subject' => '<none>',
            'content' => theme('xc_browse_render_bar', array('id' => $bar->lid, 'label' => '', 'items' => $items, 'type' => 'abc')),
          );
        }
      }
    } // end of ABC list
    elseif ($delta == 'search_form') {
      // display it only if admin wants to
      $xc_search_frd = xc_search_get_full_record_display_options();
      if (arg(0) == 'node' && $xc_search_frd->show_browse_form == 1) {

        $ui_name = $browse_commons->args[1];
        $tab_id = (int) $browse_commons->args[2];
        $query = $browse_commons->args[3];

        $tab = xc_browse_tab_load($tab_id);
        $tab->default_query = preg_replace_callback("/\{(\w+:[\w-]+)\}/", '_xc_browse_field_replace', $tab->default_query);

        $stored_form_key = array();
        if ($query != '*') {
          $stored_form_key = array($query);
        }

        if (isset($browse_commons->browse_params['filter'])) {
          $filters = $browse_commons->browse_params['filter'];
          if (is_array($filters)) {
            $stored_form_key = array_merge($stored_form_key, $filters);
          }
          else {
            $stored_form_key = array_merge($stored_form_key, array($filters));
          }
        }
        $cid = 'xc_browse:form_vals:' . md5(join(' ', $stored_form_key));
        xc_browse_render_tab($tab, $ui_name, xc_cache_get_data($cid, array()));
      }

      $block = array(
        'subject' => '<none>',
        'content' => xc_browse_form_cache(), // see xc_browse_render_tab()
      );
    } // end of search form

    return $block;
  }
}

/**
 * Implements hook_block().
 */
function xc_browse_block_OLD($op = 'list', $delta = 0, $edit = array()) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  static $prepare_node, $browse_commons;
}

/**
 * Implements hook_simpletest().
 */
function xc_browse_simpletest() {
  $dir = drupal_get_path('module', 'xc_browse') . '/tests';
  $tests = file_scan_directory($dir, '/\.test$/');
  return array_keys($tests);
}

/**
 * List of browse UIs
 *
 * @return (String)
 *   The list of browse UIs
 */
function xc_browse_list_uis() {
  xc_log_info('xc browse', 'xc_browse_list_uis');
  $browse_uis = xc_browse_ui_get_all();
  if (empty($browse_uis)) {
    return 'No browse interface defined';
  }
  $items = array();
  foreach ($browse_uis as $ui) {
    $items[] = l($ui->label, 'xc_browse/' . $ui->name);
  }
  $output = theme('item_list', array('items' => $items, 'title' => t('You can browse records by these pages:')));

  return $output;
}

/**
 * Show the page. If there is a tab_id defined, it shows that tab, otherwise the
 * first one. If there is a query, it shows the results of that query as well.
 *
 * @param $ui_name (String)
 *   The machine name of search UI.
 * @param $tab_id (int)
 *   The ID of the tab to show
 * @param $query (String)
 *   The Solr query to search
 *
 * @return (String) The rendered form of the page including tab selector,
 *   the actual search for and/or navigation bars, and the results (if there is
 *   a query string)
 */
function xc_browse_show_ui($ui_name, $tab_id = NULL, $query = NULL) {
  $result = xc_browse_get_ui_with_tabs($ui_name);
  if (!is_array($result)) {
    return $result;
  }
  list($ui, $tabs) = $result;
  drupal_set_title($ui->label);

  // get, prepare and render tab
  $tab = (is_null($tab_id)) ? $tabs[0] : xc_browse_tab_load($tab_id);
  $tab->default_query = preg_replace_callback("/\{(\w+:[\w-]+)\}/", '_xc_browse_field_replace', $tab->default_query);

  $tabs_primary = xc_cache_get_data('xc_browse:menu_primary_local_tasks:' . $_GET['q'], NULL);
  if (is_null($tabs_primary)) {
    if ($primary = menu_primary_local_tasks()) {
      $tabs_primary = "<ul class=\"tabs primary\">\n" . drupal_render($primary) . "</ul>\n";
      cache_set('xc_browse:menu_primary_local_tasks:' . $_GET['q'], $tabs_primary);
    }
  }

  if (isset($_GET['qid']) && $_GET['qid'] == 1) {
    $query = '*';
  }

  $stored_form_key = array();
  if ($query != '*') {
    $stored_form_key = array_merge($stored_form_key, array($query));
  }
  if (isset($_GET['filter'])) {
    if (is_array($_GET['filter'])) {
      $stored_form_key = array_merge($stored_form_key, $_GET['filter']);
    }
    else {
      $stored_form_key = array_merge($stored_form_key, array($_GET['filter']));
    }
  }
  $cid = 'xc_browse:form_vals:' . md5(join(' ', $stored_form_key));
  $output = xc_browse_render_tab($tab, $ui_name, xc_cache_get_data($cid, array()));

  // search results
  if (!is_null($query)) {
    $output .= xc_browse_do_search($query);
  }

  return $output;
}

/**
 * Replace a schema field name with Solr field name
 * @param $matches (Array)
 *   The array of regex matches
 * @return (String)
 *   The Solr field name
 */
function _xc_browse_field_replace($matches) {
  return xc_solr_schema2solr($matches[1], TRUE);
}

/**
 * Get the tabs inside a UI
 *
 * @param $ui_name (String)
 *   The name of UI
 *
 * @return (Array)
 *   The UI object, and corresponding tab objects.
 */
function xc_browse_get_ui_with_tabs($ui_name) {
  $ui = xc_browse_ui_get_by_name($ui_name);
  if (empty($ui)) {
    return 'No such browse interface defined';
  }
  $tabs = xc_browse_tab_get_by_ui($ui->bid);
  return array($ui, $tabs);
}

/**
 * List of tabs
 * @param $tabs (Array)
 *   List of tab objects
 * @param $ui_name (String)
 *   The name of UI
 * @param $current_tab_id (int)
 *   The ID of the current tab
 * @return (String)
 *   The list of tabs
 */
function xc_browse_list_tabs($tabs, $ui_name, $current_tab_id = NULL) {
  $items = array();
  $i = 0;
  foreach ($tabs as $tab) {
    $is_current = FALSE;
    if ((is_null($current_tab_id) && $i == 0) || ($current_tab_id == $tab->tab_id)) {
      $is_current = TRUE;
    }
    $items[] = array(
      'data' => $is_current
        ? $tab->label
        : l($tab->label, 'xc_browse/' . $ui_name . '/' . $tab->tab_id),
      // 'style' => 'display:inline',
      'class' => $is_current ? 'active' : 'passive',
    );
    $i++;
  }
  $output = theme('item_list', array('items' => $items, 'title' => NULL, 'type' => 'ul', 'attributes' => array('class' => 'xc-browse-tab')));

  return $output;
}

/**
 * Render a tab
 * @param $tab (stdClass) The tab object
 * @param $ui_name (String) The machine name of parent browse UI
 * @return (String) The content of the tab (content pane)
 */
function xc_browse_render_tab($tab, $ui_name, $stored_form_values) {
  // el_id, tab_id, type, facet_name, search_field, query_type, ui_effect, weight

  drupal_add_css(drupal_get_path('module', 'xc_browse') . '/xc_browse.css', array('preprocess' => FALSE));

  // form
  $elements = xc_browse_element_get_by_tab($tab->tab_id);
  $form = '';
  if (!empty($elements)) {
    $form = drupal_render(drupal_get_form('xc_browse_form', $ui_name, $tab, $elements, $stored_form_values));
  }

  // navigation bars
  $path = 'xc_browse/' . $ui_name . '/' . $tab->tab_id;
  $bars = xc_browse_list_get_by_tab($tab->tab_id);

  $show_bar = (isset($_GET['show_bar']) && $_GET['show_bar'] == 1) ? TRUE : FALSE;
  $lists = '';
  foreach ($bars as $bar) {
    if (isset($bar->is_enabled) && $bar->is_enabled == 0) {
      continue;
    }
    $data = xc_browse_prepare_bar_data($bar, $path, $tab->default_query);
    if (!empty($data['items'])) {
      $lists .= theme('xc_browse_render_bar2', array('id' => $data['id'], 'label' => $data['label'], 'items' => $data['items'], 'type' => NULL, 'show_bar' => $show_bar));
    }
  }
  $output = '<div id="xc-browse-control">' . $form . $lists . '</div>';
  xc_browse_form_cache($output);

  return ''; //$output;
}

/**
 * The browse form
 * @param $form (Array)
 *   The form array (FAPI)
 * @param $ui_name (String)
 *   The name of UI
 * @param $tab (stdClass)
 *   The tab
 * @param $elements (Array)
 *   The list of navigation elements
 * @param $stored_form_values (Array)
 *   The stored value of the form
 * @return (Array)
 *   The form
 */
function xc_browse_form($form, &$form_state, $ui_name, $tab, $elements, $stored_form_values = array()) {
  global $_xc_search_server;

  $form = array(
    '#action' => url('/xc_browse/' . $ui_name . '/' . $tab->tab_id),
  );

  $form['ui'] = array(
    '#type' => 'hidden',
    '#value' => $ui_name,
  );
  $form['tab'] = array(
    '#type' => 'hidden',
    '#value' => $tab->tab_id,
  );
  $form['default_query'] = array(
    '#type' => 'hidden',
    '#value' => $tab->default_query,
  );

  $ids = array();
  // xc_browse_element table: el_id, tab_id, type, facet_name, search_field,
  // query_type, ui_effect, weight

  foreach ($elements as $el) {
    if (!$el->is_enabled) {
      continue;
    }
    $ids[] = $el->el_id;
    $form['n-' . $el->el_id] = array(
      '#title' => $el->label,
      '#type' => $el->type,
    );
    $previous_list_offset = $next_list_offset = FALSE;
    $options = array();
    // facet_name
    if (     preg_match('/^values:(.*?)$/', $el->facet_name, $matches)) {
      $values = $matches[1]; // drupal_substr($el->facet_name, 7);
      $items = explode('|', $values);
      foreach ($items as $item) {
        list($key, $value) = explode('=', $item);
        $options[$key] = $value;
      }
    }
    elseif (preg_match('/^(field|facet):(.*?)$/', $el->facet_name, $matches)) {
      $key = $tab->tab_id . '/' . $el->el_id;
      $xc_browse_stored_lists = xc_cache_get_data('xc_browse:stored_lists', array());
      if (!isset($xc_browse_stored_lists[$key])) {
        $facet_name = $matches[2]; // drupal_substr($el->facet_name, 6);
        if ($matches[1] == 'facet') {
          $facet_name .= '_fc';
        }
        elseif ($matches[1] == 'field') {
          $facet_name .= '_s';
        }
        $default_queries = preg_split("/\r?\n\r?/", $tab->default_query);
        $params = array(
          'facet' => 'on',
          'facet.field' => $facet_name,
          'facet.limit' => -1,
          'facet.missing' => 'on',
          'facet.mincount' => $el->mincount,
        );
        if (!empty($default_queries)) {
          foreach ($default_queries as $default_query) {
            $params['fq'][] = $default_query;
          }
        }
        if ((int) $el->mincount > 1) {
          $params['facet.mincount'] = $el->mincount;
        }
        if (isset($el->sorting) && ($el->sorting == 'true' || $el->sorting == 'false')) {
          $params['facet.sort'] = $el->sorting;
        }
        $response = $_xc_search_server->search('type:manifestation', 0, 0, $params, TRUE);
        $xc_browse_stored_lists[$key] = $response->facet_counts->facet_fields->$facet_name;
        cache_set('xc_browse:stored_lists', $xc_browse_stored_lists);
      }
      if (!empty($xc_browse_stored_lists[$key])) {
        foreach ($xc_browse_stored_lists[$key] as $tid => $count) {
          if ($tid != '_empty_') {
            $options[$tid] = $tid . ' (' . $count . ')';
          }
          else {
            $docs_without_facet = $count;
          }
        }
        $total = count($options);
        $limit = isset($el->page_limit) ? intval($el->page_limit) : 50;
        // limit == 0, means no limit
        if ($limit > 0 && $total > $limit) {
          $offset_key = 'el_' . $el->el_id . '_offset';
          $offset = !empty($_GET[$offset_key]) ? intval($_GET[$offset_key]) : 0;
          $options = array_slice($options, $offset, $limit);

          $previous_list_offset = $next_list_offset = FALSE;
          if ($offset > 0) {
            $previous_list_offset = ($offset - $limit);
            $options = array_merge(array('#prev' => t('More&hellip;')), $options);
          }
          if ($total > ($limit + $offset)) {
            $next_list_offset = ($offset + $limit);
            $options = array_merge($options, array('#next' => t('More&hellip;')));
          }
        }
      }
    }
    // bind options
    if (isset($options) && $el->type != 'textfield') {
      $form['n-' . $el->el_id]['#options']  = $options;
      if ($previous_list_offset !== FALSE || $next_list_offset !== FALSE) {
        $offset_key = 'el_' . $el->el_id . '_offset';
        $params = xc_search_get_params();
        unset($params[$offset_key]);
        $js = '';
        if ($previous_list_offset !== FALSE) {
          $params[$offset_key] = $previous_list_offset;
          $url = url($_GET['q'], array('query' => $params));
          $js .= "if (this.value == '#prev') {document.location = '$url';}";
        }
        if ($next_list_offset !== FALSE) {
          $params[$offset_key] = $next_list_offset;
          $url = url($_GET['q'], array('query' => $params));
          $js .= "if (this.value == '#next') {document.location = '$url';}";
        }
        $form['n-' . $el->el_id]['#attributes'] = array('onchange' => $js);

        // the field to search for
        $form['n-' . $el->el_id . '_offset'] = array(
          '#type' => 'hidden',
          '#value' => $offset,
        );
      }
    }

    // notify the user if not every records has this field
    if (isset($docs_without_facet) && $docs_without_facet > 0) {
      $form['n-' . $el->el_id]['#description'] =
        t('%field information is not available for %count items in the collection.',
        array(
        '%field' => $tab->label,
        '%count' => $docs_without_facet,
      )
      );
    }

    // set default value
    if (isset($stored_form_values[$el->el_id])) {
      $form['n-' . $el->el_id]['#default_value'] = $stored_form_values[$el->el_id];
    }

    // the field to search for
    $form['n-' . $el->el_id . '_search_field'] = array(
      '#type' => 'hidden',
      '#value' => $el->search_field,
    );

    // the Solr query type
    $form['n-' . $el->el_id . '_query_type'] = array(
      '#type' => 'hidden',
      '#value' => $el->query_type,
    );

    unset($docs_without_facet);
    unset($options);
  }

  $form['ids'] = array(
    '#type' => 'hidden',
    '#value' => serialize($ids),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Handling the form submission. Redirects to a search result page
 *
 * @param $form (Array)
 *   The form
 * @param $form_state (Array)
 *   The state of form
 */
function xc_browse_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $ids = unserialize($values['ids']);
  $queries = array();
  $values_to_store = array();
  foreach ($ids as $id) {
    $value = $values['n-' . $id];
    $values_to_store[$id] = $value;

    $input_type = $form['n-' . $id]['#type'];

    if ($value != '') {
      $field = $values['n-' . $id . '_search_field'];
      if ($field == 'none') {
        $field = '';
      }

      // special case: modifier_field=[number] -> refers to a modifiable field
      if (preg_match('/^modifier_field=(\d+)$/', $field, $matches)) {
        $modifier_field = $matches[1];
        $queries[$modifier_field]['type'] = $value;
        continue;
      }
      $query_type = $values['n-' . $id . '_query_type'];

      if (xc_index_facet_exists($field)) {
        $solr_field = $field . '_fc';
      }
      else {
        $solr_field = ($field == '') ? '' : xc_solr_schema2solr($field, TRUE, $query_type);
      }
      if ($field != '' && $solr_field == '') {
        $solr_field = $field;
      }

      $queries[$id] = array(
        'field' => $solr_field,
        'value' => $value,
        'type' => $query_type,
        'input_type' => $input_type,
      );
      if (isset($values['n-' . $id . '_offset'])) {
        $params['el_' . $id . '_offset'] = $values['n-' . $id . '_offset'];
      }
    }
  }

  $search_ui_id = !empty($_GET['search_ui']) ? intval($_GET['search_ui']) : NULL;
  $search_ui = xc_search_ui_get($search_ui_id);
  $solr_filter_queries = array($values['default_query']);
  $solr_queries = array();

  foreach ($queries as $i => $query) {
    $solr_query = xc_solr_make_query($query['field'], $query['value'], $query['type']);
    if ($query['input_type'] == 'textfield') {
      $solr_queries[] = $solr_query;
    }
    else {
      if ($query['field'] == '' && $solr_query != '') {
        $boosting_query = xc_search_field_boosting($solr_query, $search_ui);
        if ($boosting_query != '') {
          $solr_query .= ' OR ' . $boosting_query;
        }
      }
      $solr_filter_queries[] = $solr_query;
    }
  }
  $cid = 'xc_browse:form_vals:' . md5(join(' ', array_merge($solr_queries, $solr_filter_queries)));
  cache_set($cid, $values_to_store);

  // redirect form
  $params['search_type'] = 'browse';
  $params['filter'] = $solr_filter_queries;
  $url_query = $params;

  $path = 'xc_browse/' . $values['ui'] . '/' . $values['tab'] . '/';
  if (!empty($solr_queries)) {
    $path .= join(' AND ', $solr_queries);
  }
  else {
    $path .= '*';
  }

  $form_state['redirect'] = array($path, array('query' => $url_query));
}

/**
 * Prepare data for a navigation bar
 *
 * @param $bar (stdClass)
 *   The DB representation of the bar
 * @param $path (String)
 *   The basic link path (the Drupal path without the actual query expression)
 * @param $default_query (String)
 *   Default Solr query
 *
 * @return (Array)
 *   The associative array containing the prepared data need to display in theme:
 *   - id - The id of the bar
 *   - lable - The label of the bar
 *   - items (array) - The list of displayable items (the content of the bar)
 */
function xc_browse_prepare_bar_data($bar, $path, $default_query = NULL) {
  global $_xc_search_server;

  // xc_browse_list table fields: lid, tab_id, label, type, field, query_type, weight

  $items = array();
  if ($bar->type == 'ABC') {
    // do nothing
  }

  elseif ($bar->type == 'facet') {
    $facet_name = $bar->field;
    $facet_name .= '_fc';
    $limit = !empty($bar->page_limit) ? $bar->page_limit : 50;
    $default_queries = preg_split("/\r?\n\r?/", $default_query);
    $params = array(
      'facet' => 'on',
      'facet.field' => $facet_name,
      'facet.limit' => $limit,
      'facet.missing' => 'on',
      'facet.mincount' => 1,
    );
    if (!empty($default_queries)) {
      foreach ($default_queries as $fq) {
        $params['fq'][] = $fq;
      }
    }

    if ((int) $bar->mincount > 1) {
      $params['facet.mincount'] = $bar->mincount;
    }
    if (isset($bar->sorting) && ($bar->sorting == 'true' || $bar->sorting == 'false')) {
      $params['facet.sort'] = $bar->sorting;
    }

    $response = $_xc_search_server->search('type:manifestation', 0, 0, $params);

    if (isset($response->facet_counts->facet_fields->$facet_name)) {
      $solr_field = xc_browse_get_solr_field($facet_name, 'text', FALSE);

      $items = array();
      foreach ($response->facet_counts->facet_fields->$facet_name as $tid => $count) {
        if ($tid != '_empty_') {
          $label = $tid . ' (' . $count . ')';
          $items[] = array(
            'data' => xc_browse_make_link(
              $solr_field,       // field
              $tid,              // value
              $bar->query_type, // query_type
              $path,             // path
              $default_query,    // default_query
              $label,            // label
              array('show_bar' => 1) // url_params
            ),
            // 'style' => 'list-style-type:none;background:none;padding:0;'
          );
        }
        else {
          $docs_without_facet = $count;
        }
      }
    }
  }

  return array(
    'id' => $bar->lid,
    'label' => $bar->label,
    'items' => $items,
  );
}

/**
 * Creates a query link
 *
 * @param $solr_field (String)
 *   The Solr field name to search for
 * @param $value (String)
 *   The query term
 * @param $query_type (String)
 *   The type of query (keyword, proximity, phrase, truncation)
 * @param $path (String)
 *   The basic link path (the Drupal path without the actual query expression)
 * @param $default_query (String)
 *   The default query which should be AND-ed to this new query, like
 *   field=actor value=John, default query=type:DVD will create a search link
 *   to those DVD-s, which have 'John' actors
 * @param $label (String)
 *   The label/text of the link. If it is not given, the
 *   function use the value parameter. Default: NULL
 * @param $url_params (Array)
 *   Other URL parameters
 *
 * @return A search link
 */
function xc_browse_make_link($solr_field, $value, $query_type = 'keyword', $path,
    $default_query = NULL, $label = NULL, $url_params = array()) {

  if (is_null($label)) {
    $label = $value;
  }

  if (!isset($url_params['search_type'])) {
    $url_params['search_type'] = 'browse';
  }

  // it is a query link
  if (!isset($url_params['ql'])) {
    $url_params['ql'] = '1';
  }

  // add Solr query filters
  $filters = array();
  $filters[] = xc_solr_make_query($solr_field, $value, $query_type);

  if (!is_null($default_query)) {
    $default_queries = preg_split("/\r?\n\r?/", $default_query);
    $filters = array_merge($filters, $default_queries);
  }

  $url_params['filter'] = $filters;

  return l($label, $path . '/' . $value, array('query' => $url_params)); // $query_expression
}

/**
 * Gets the Solr field
 *
 * @param $field (String)
 *   The schema field
 * @param $field_type (String)
 *   The label of the Solr field type. Possible values are the actual values
 *   in xc_solr_field_type table. Currently: sortable integer, phrase, sortable
 *   long, text (this is the default value), boolean, sortable float, sortable
 *   double, date, string facet, date facet.
 * @param $do_transform_field (Boolean)
 *   If true (default) it transform the schema field name into Solr field name,
 *   otherwise it leave it as is. Default: TRUE.
 *
 * @return (String)
 *   The Solr field name
 */
function xc_browse_get_solr_field($field, $field_type, $do_transform_field = TRUE) {
  if ($field == '') {
    $solr_field = '';
  }
  else {
    if ($do_transform_field) {
      $solr_field = xc_solr_schema2solr($field, TRUE, $field_type);
    }
    else {
      $solr_field = $field;
    }
  }

  return $solr_field;
}

/**
 * Searching and theming the result
 *
 * A wrapper function to XC Search's xc_search_do_search and theme_xc_search_search_results
 *
 * @param $query (String)
 *   A Solr query
 *
 * @return (String)
 *   The search result as HTML
 */
function xc_browse_do_search($query) {
  $meta = new stdClass();
  $results = xc_search_do_search($query, 'xc_browse', $meta);
  include_once drupal_get_path('module', 'xc_search') . '/xc_search.pages.inc';
  xc_search_meta($meta);

  return theme('xc_search_search_results', array('results' => $results, 'meta' => $meta));
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function xc_browse_theme() {

  $themes = array(
    'xc_browse_render_bar' => array(
      'variables' => array(
        'id' => NULL,
        'label' => NULL,
        'items' => NULL,
        'type' => NULL,
      ),
      'template' => 'templates/xc-browse-render-bar',
    ),
    'xc_browse_render_bar2' => array(
      'variables' => array(
        'id' => NULL,
        'label' => NULL,
        'items' => NULL,
        'type' => NULL,
        'show_bar' => FALSE,
      ),
      'template' => 'templates/xc-browse-render-bar2',
    ),
    'xc_browse_admin_ui' => array(
      'variables' => array('ui' => NULL, 'options' => NULL),
      'template' => 'templates/xc-browse-admin-ui',
    ),
    'xc_browse_admin_tab' => array(
      'variables' => array(
        'tab' => NULL,
        'ui_id' => NULL,
      ),
      'template' => 'templates/xc-browse-admin-tab',
    ),
    'xc_browse_admin_element' => array(
      'variables' => array(
        'tab' => NULL,
        'element' => NULL,
      ),
      'template' => 'templates/xc-browse-admin-element',
    ),
    'xc_browse_admin_bar' => array(
      'variables' => array(
        'tab' => NULL,
        'bar' => NULL,
      ),
      'template' => 'templates/xc-browse-admin-bar',
    ),
  );
  return $themes;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function xc_browse_form_cache($form = NULL) {
  static $cache;

  if (!is_null($form)) {
    $cache = $form;
  }

  return $cache;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function xc_browse_cache($key, $value = NULL) {
  static $cache;

  if (!is_null($value)) {
    $cache[$key] = $value;
  }

  if (isset($cache[$key])) {
    return $cache[$key];
  }
  else {
    return FALSE;
  }
}
