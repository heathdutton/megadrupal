<?php

/**
 * @file
 * Tests for the Entityinfo module.
 */

/**
 * Test for title and fieldsets
 */

class EntityInfoOverallWebTestCase extends DrupalWebTestCase {

  protected $profile = 'testing'; //this is needed to trigger tests using simpletest 1.0

  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'EntityInfo Overall Test',
      'description' => 'Ensure that the EntityInfo module provides the proper Overall information on the EntityInfo page',
      'group' => 'EntityInfo',
    );
  }

  public function setUp() {
    parent::setUp(array('entityinfo'));

    $this->privileged_user = $this->drupalCreateUser(array(
      'access entityinfo information',
      'administer site configuration',
    ));

    $this->drupalLogin($this->privileged_user);
  }
  
  public function testEntityInfoPageTitle() {
    $this->drupalGet('admin/config/development/entity_type_info');
    $this->assertText('EntityType Technical Information', 'The title on the page is EntityType Technical Information', 'EntityInfo Page Data');
  }

  public function testEntityInfoFieldsetLinks() {
    $this->drupalGet('admin/config/development/entity_type_info');
    $this->assertRaw('Node (node)', NULL, 'The Node fieldset link is found', 'EntityInfo Fieldsets');
    $this->assertRaw('File (file)', NULL, 'The File fieldset link is found', 'EntityInfo Fieldsets');
    $this->assertRaw('Taxonomy term (taxonomy_term)', NULL, 'The Taxonomy term fieldset link is found', 'EntityInfo Fieldsets');
    $this->assertRaw('Taxonomy vocabulary (taxonomy_vocabulary)', NULL, 'The Taxonomy vocabulary fieldset link is found', 'EntityInfo Fieldsets');
    $this->assertRaw('User (user)', NULL, 'The User fieldset link is found', 'EntityInfo Fieldsets');
  }

}

class EntityInfoNodeWebTestCase extends DrupalWebTestCase {

  protected $profile = 'testing'; //this is needed to trigger tests using simpletest 1.0

  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'EntityInfo Node Test',
      'description' => 'Ensure that the EntityInfo module provides the proper Node Entity information on the EntityInfo page',
      'group' => 'EntityInfo',
    );
  }

  public function setUp() {
    parent::setUp(array('entityinfo'));

    $this->privileged_user = $this->drupalCreateUser(array(
      'access entityinfo information',
      'administer site configuration',
    ));

    $this->drupalLogin($this->privileged_user);
  }

  public function testNodeInformationIsPresent() {
    $this->drupalGet('admin/config/development/entity_type_info');
    $this->assertRaw('NodeController', 'The node controller is listed', 'EntityInfo Node Info');
    $this->assertRaw('This entity is fieldable', 'The node entity is fieldable', 'EntityInfo Node Info');
    $this->assertRaw('Base Table Schema: node', 'The Base Table Schema is shown', 'EntityInfo Node Info');
    $this->assertRaw('<td>nid, vid, type, language, title, uid, status, created, changed, comment, promote, sticky, tnid, translate</td>', 'The base table fields for Nodes are present', 'EntityInfo Node Info');
    $this->assertRaw('Revision Table Schema: node_revision', 'The Revision Table Schema is shown', 'EntityInfo Node Info');
    $this->assertRaw('<td>nid, vid, uid, title, log, timestamp, status, comment, promote, sticky</td>', 'The revision table fields for Nodes are present', 'EntityInfo Node Info');

    $this->assertRaw('node_revision', 'The node_revision foreign key is present', 'EntityInfo Node Info');
    $this->assertRaw('node_author', 'The node_author foreign key is present', 'EntityInfo Node Info');

    $this->assertRaw('node_changed', 'The node_changed index is present', 'EntityInfo Node Info');
    $this->assertRaw('node_created', 'The node_created index is present', 'EntityInfo Node Info');
    $this->assertRaw('node_frontpage', 'The node_frontpage index is present', 'EntityInfo Node Info');
    $this->assertRaw('node_status_type', 'The node_status_type index is present', 'EntityInfo Node Info');
    $this->assertRaw('node_title_type', 'The node_title_type index is present', 'EntityInfo Node Info');
    $this->assertRaw('node_type', 'The node_type index is present', 'EntityInfo Node Info');
    $this->assertRaw('uid', 'The uid index is present', 'EntityInfo Node Info');
    $this->assertRaw('tnid', 'The tnid index is present', 'EntityInfo Node Info');
    $this->assertRaw('translate', 'The translate index is present', 'EntityInfo Node Info');
    $this->assertRaw('language', 'The language index is present', 'EntityInfo Node Info');

    $this->assertRaw('versioned_node', 'The versioned_node foreign key is present', 'EntityInfo Node Info');
    $this->assertRaw('version_author', 'The version_author foreign key is present', 'EntityInfo Node Info');

    $this->assertRaw('nid', 'The nid index is present', 'EntityInfo Node Info');
    $this->assertRaw('vid', 'The vid index is present', 'EntityInfo Node Info');
  }

}

class EntityInfoFileWebTestCase extends DrupalWebTestCase {

  protected $profile = 'testing'; //this is needed to trigger tests using simpletest 1.0

  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'EntityInfo File Test',
      'description' => 'Ensure that the EntityInfo module provides the proper File Entity information on the EntityInfo page',
      'group' => 'EntityInfo',
    );
  }

  public function setUp() {
    parent::setUp(array('entityinfo'));

    $this->privileged_user = $this->drupalCreateUser(array(
      'access entityinfo information',
      'administer site configuration',
    ));

    $this->drupalLogin($this->privileged_user);
  }

  public function testFileInformationIsPresent() {
    $this->drupalGet('admin/config/development/entity_type_info');

    $this->assertRaw('DrupalDefaultEntityController', 'The file controller is listed', 'EntityInfo File Info');
    $this->assertRaw('file_load', 'The file load hook is listed', 'EntityInfo File Info');

    $this->assertRaw('This entity is not fieldable', 'The file entity is not fieldable', 'EntityInfo File Info');

    $this->assertRaw('Base Table Schema: file_managed', 'The Base Table Schema is shown', 'EntityInfo File Info');
    $this->assertRaw('<td>fid, uid, filename, uri, filemime, filesize, status, timestamp</td>', 'The base table fields for File is present', 'EntityInfo File Info');

    $this->assertRaw('file_owner', 'The file_owner foreign key is present', 'EntityInfo File Info');

    $this->assertRaw('uid', 'The file index is present', 'EntityInfo File Info');
    $this->assertRaw('status', 'The status index is present', 'EntityInfo File Info');
    $this->assertRaw('timestamp', 'The timestamp index is present', 'EntityInfo File Info');

    $this->assertraw('Machine name: file', 'The File Entity Bundles are present', 'EntityInfo File Info');
  }

}

class EntityInfoTaxonomyTermWebTestCase extends DrupalWebTestCase {

  protected $profile = 'testing'; //this is needed to trigger tests using simpletest 1.0

  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'EntityInfo Taxonomy Term Test',
      'description' => 'Ensure that the EntityInfo module provides the proper Taxonomy Term Entity information on the EntityInfo page',
      'group' => 'EntityInfo',
    );
  }

  public function setUp() {
    parent::setUp(array('entityinfo'));

    $this->privileged_user = $this->drupalCreateUser(array(
      'access entityinfo information',
      'administer site configuration',
    ));

    $this->drupalLogin($this->privileged_user);
  }

  public function testTaxonomyTermInformationIsPresent() {
    $this->drupalGet('admin/config/development/entity_type_info');

    $this->assertRaw('TaxonomyTermController', 'The taxonomy term controller is listed', 'EntityInfo TaxonomyTerm Info');
    $this->assertRaw('taxonomy_term_load', 'The taxonomy term load hook is listed', 'EntityInfo TaxonomyTerm Info');

    $this->assertRaw('This entity is fieldable', 'The taxonomy term entity is fieldable', 'EntityInfo TaxonomyTerm Info');

    $this->assertRaw('Base Table Schema: taxonomy_term_data', 'The Base Table Schema is shown', 'EntityInfo TaxonomyTerm Info');
    $this->assertRaw('<td>tid, vid, name, description, format, weight</td>', 'The base table fields for Taxonomy Term is present', 'EntityInfo TaxonomyTerm Info');

    $this->assertRaw('vocabulary', 'The vocabulary foreign key is present', 'EntityInfo TaxonomyTerm Info');

    $this->assertRaw('taxonomy_tree', 'The taxonomy_tree index is present', 'EntityInfo TaxonomyTerm Info');
    $this->assertRaw('vid_name', 'The vid_name index is present', 'EntityInfo TaxonomyTerm Info');
    $this->assertRaw('name', 'The name index is present', 'EntityInfo TaxonomyTerm Info');

    $this->assertraw('No Entity Bundles currently exist for the entity type Taxonomy term', 'No Bundles are present', 'EntityInfo TaxonomyTerm Info');
  }

}

class EntityInfoTaxonomyVocabularyWebTestCase extends DrupalWebTestCase {

  protected $profile = 'testing'; //this is needed to trigger tests using simpletest 1.0

  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'EntityInfo Taxonomy Vocabulary Test',
      'description' => 'Ensure that the EntityInfo module provides the proper Taxonomy Vocabulary Entity information on the EntityInfo page',
      'group' => 'EntityInfo',
    );
  }

  public function setUp() {
    parent::setUp(array('entityinfo'));

    $this->privileged_user = $this->drupalCreateUser(array(
      'access entityinfo information',
      'administer site configuration',
    ));

    $this->drupalLogin($this->privileged_user);
  }

  public function testTaxonomyTermInformationIsPresent() {
    $this->drupalGet('admin/config/development/entity_type_info');

    $this->assertRaw('TaxonomyVocabularyController', 'The taxonomy vocabulary controller is listed', 'EntityInfo TaxonomyVocabulary Info');
    $this->assertRaw('taxonomy_vocabulary_load', 'The taxonomy vocabulary load hook is listed', 'EntityInfo TaxonomyVocabulary Info');

    $this->assertRaw('This entity is not fieldable', 'The taxonomy vocabulary entity is not fieldable', 'EntityInfo TaxonomyVocabulary Info');

    $this->assertRaw('Base Table Schema: taxonomy_vocabulary', 'The Base Table Schema is shown', 'EntityInfo TaxonomyVocabulary Info');
    $this->assertRaw('<td>vid, name, machine_name, description, hierarchy, module, weight</td>', 'The base table fields for Taxonomy Vocabulary are present', 'EntityInfo TaxonomyVocabulary Info');

    $this->assertRaw('list', 'The list index is present', 'EntityInfo TaxonomyVocabulary Info');

    $this->assertraw('Machine name: taxonomy_vocabulary', 'Taxonomy Vocabulary Bundle is present', 'EntityInfo TaxonomyVocabulary Info');
  }

}

class EntityInfoUserWebTestCase extends DrupalWebTestCase {

  protected $profile = 'testing'; //this is needed to trigger tests using simpletest 1.0

  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'EntityInfo User Test',
      'description' => 'Ensure that the EntityInfo module provides the proper User Entity information on the EntityInfo page',
      'group' => 'EntityInfo',
    );
  }

  public function setUp() {
    parent::setUp(array('entityinfo'));

    $this->privileged_user = $this->drupalCreateUser(array(
      'access entityinfo information',
      'administer site configuration',
    ));

    $this->drupalLogin($this->privileged_user);
  }

  public function testTaxonomyTermInformationIsPresent() {
    $this->drupalGet('admin/config/development/entity_type_info');

    $this->assertRaw('UserController', 'The user controller is listed', 'EntityInfo User Info');
    $this->assertRaw('user_load', 'The user load hook is listed', 'EntityInfo User Info');

    $this->assertRaw('This entity is fieldable', 'The user entity is fieldable', 'EntityInfo User Info');

    $this->assertRaw('Base Table Schema: users', 'The Base Table Schema is shown', 'EntityInfo User Info');
    $this->assertRaw('<td>uid, name, pass, mail, theme, signature, signature_format, created, access, login, status, timezone, language, picture, init, data</td>', 'The base table fields for Users are present', 'EntityInfo User Info');

    $this->assertRaw('signature_format', 'The signature_format foreign key is present', 'EntityInfo User Info');

    $this->assertRaw('access', 'The access foreign key is present', 'EntityInfo User Info');
    $this->assertRaw('created', 'The created foreign key is present', 'EntityInfo User Info');
    $this->assertRaw('mail', 'The mail foreign key is present', 'EntityInfo User Info');
    $this->assertRaw('picture', 'The picture foreign key is present', 'EntityInfo User Info');

    $this->assertraw('Machine name: user', 'User Bundle is present', 'EntityInfo User Info');
  }

}
