<?php
/**
 * @file
 * EntityInfo module file
 */

/**
 * Implements hook_permission().
 */
function entityinfo_permission() {
  return array(
    'access entityinfo information' => array(
      'title' => t('Access EntityType Technical Information'),
      'description' => t('Access the EntityType Technical Information page'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entityinfo_menu() {
  $items['admin/config/development/entity_type_info'] = array(
    'page callback' => 'entityinfo_page_admin',
    'access callback' => 'user_access',
    'access arguments' => array('access entityinfo information'),
    'title' => 'EntityType Technical Information',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function entityinfo_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['entityinfo_page'] = array(
    'variables' => array(
      'infoobject' => NULL,
      'entity' => NULL,
      'database_info' => NULL,
    ),
  );
  $themes['entityinfo_controller_data'] = array(
    'variables' => array(
      'entity' => NULL,
    ),
  );
  $themes['entityinfo_bundles'] = array(
    'variables' => array(
      'bundle' => NULL,
      'entitytype' => NULL,
      'fieldinfo' => NULL,
    ),
  );
  $themes['entityinfo_database_info'] = array(
    'variables' => array(
      'base_table' => t('N/A'),
      'base_table_schema' => t('N/A'),
      'revision_table' => t('N/A'),
      'rev_table_schema' => t('N/A'),
      'entity' => t('not specified'),
      'fieldable' => FALSE,
    ),
  );
  $themes['entityinfo_fields'] = array(
    'variables' => array(
      'fields' => NULL,
      'bundles' => NULL,
      'entity' => NULL,
    ),
  );
  $themes['entityinfo_bundle_fields'] = array(
    'variables' => array(
      'fields' => NULL,
      'bundles' => NULL,
      'entity' => NULL,
    ),
  );

  $themes['entityinfo_technical_info'] = array(
    'variables' => array(
    ),
  );
  $themes['entityinfo_other_info'] = array(
    'variables' => array(

    ),
  );
  $themes['entityinfo_master'] = array(
    'variables' => array(
      'infoobject' => NULL,
      'entityinfo_list' => NULL,
      'pages' => NULL,
    ),
  );
  $themes['entityinfo_tableschema'] = array(
    'variables' => array(
      'table_type' => NULL,
      'table_schema' => NULL,
    ),
  );
  return $themes;
}

/**
 * Callback function for hook_menu() admin/config/development/entity_type_info
 */

function entityinfo_page_admin() {
  drupal_add_library('system', 'drupal.collapse');
  $infoobject = new stdClass();
  $infoobject->entities = $entities = entity_get_info();
  $infoobject->bundles = $bundles = field_info_bundles();
  $infoobject->fields = $fields = field_info_instances();
  $infoobject->tableschema = $tables = drupal_get_schema();
  $tablekeyindex = array();
  foreach ($tables as $index => $table) {
    $tableidx = array_keys($table);
    $tablekeyindex = array_unique(array_merge($tablekeyindex, $tableidx));
  }
  $entityinfo_list = array_keys($entities);

  _entityinfo_build_entity_array_titles($entities);

  $output = NULL;

  $pageoutput = NULL;
  _entityinfo_build_tableschema_info($infoobject, $entities, $entityinfo_list, $entityschema, $pageoutput);

  //outputting it on one page.
  $output .= theme('entityinfo_master', array('infoobject' => $infoobject, 'entityinfo_list' => $entityinfo_list, 'pages' => $pageoutput));
  return $output;
}

/**
 * Theming function for overall page.
 */
function theme_entityinfo_master($variables) {
  $output = NULL;
  $output .= '<h2>' . t('Entity Information') . '</h2>';
  $output .= '<p>' . t('The data units listed below are defined as Drupal Entities by your Drupal installation. This list includes all activated core entities as well as any entities provided by contributed or custom modules that conform to the coding for a standard Drupal entity.') . '</p>';
  $output .= $variables['pages'];
  return $output;
}

/**
 * Theming function for entity information.
 */
function theme_entityinfo_page($variables) {
  $output = NULL;
  $output .= '<fieldset class="collapsible collapsed">';
  $output .= '<legend><span class="fieldset-legend">' . $variables['entity']['title'] . '</span></legend><div class="fieldset-wrapper">';
  $output .= '<h3>' . $variables['entity']['title'] . '</h3>';
  if (isset($variables['entity']['description'])) {
    $output .= '<p>' . $variables['entity']['description'] . '</p>';
  }
  $output .= theme('entityinfo_controller_data', $variables['entity']);
  $output .= $variables['database_info'];
  $output .= $variables['bundle_info'];
  $output .= '</div></fieldset>';

  return $output;
}

/**
 * Theming function for base database information.
 */
function theme_entityinfo_database_info($variables) {
  $output = NULL;
  $output .= '<h4>' . t('Database Structures Overview') . '</h4>';
  $output .= '<p>Listed below is information about the root tables for entity bundles  of the type ' . $variables['entity'] . '.</p>';
  if ($variables['fieldable']) {
    $output .= '<p>';
    $output .= t('This entity is fieldable, which means that Drupal Fields can be added through the admin user interface to the entity bundles derived from this base entity.');
    $output .= '</p>';
  }
  else {
    $output .= '<p>';
    $output .= t('This entity is not fieldable, which means there are no additional Drupal Fields attached to the entity bundles derived from this base entity.');
    $output .= '</p>';
  }
  $output .= '<table>';
  $output .= '<tr><th>' . t('Database table') . '</th><th>' . t('Database fields') . '</th></tr>';

  if (isset($variables['base_table'])) {
    $output .= '<tr><td>' . $variables['base_table'] . '</td>';
      $output .= '<td>';
        $fields = NULL;
        foreach ($variables['base_table_schema'] as $element) {
          $fields .= $element . ', ';
        }
        $fields = drupal_substr($fields, 0, drupal_strlen($fields) - 2);
      $output .= $fields;
      $output .= '</td></tr>';
      if (isset($variables['revision_table'])) {
        $output .= '<tr><td>' . $variables['revision_table'] . '</td>';
        $output .= '<td>';
          $fields = NULL;
          foreach ($variables['rev_table_schema'] as $element) {
            $fields .= $element . ', ';
          }
          $fields = drupal_substr($fields, 0, drupal_strlen($fields) - 2);
        $output .= $fields;
        $output .= '</td></tr>';
      }
  }
  else {
    $output .= '<tr><td colspan="2"><em>' . t('This entity is not stored in your Drupal database table.  Perhaps it\'s from an externally stored source?') . '</em></td></tr>';
  }
  $output .= '</table>';
  if (count($variables['entity_table_schema']) > 0) {
    foreach ($variables['entity_table_schema'] as $table_type => $table_schema) {
      $output .= theme('entityinfo_tableschema', array('table_type' => $table_type, 'table_schema' => $table_schema));
    }
  }
  return $output;

}

/**
 * Theming function for entity bundles
 */
function theme_entityinfo_bundles($variables) {
  $output = NULL;
  $revisionspossible = FALSE;
  if (isset($variables['entity']['revision table'])) $revisionspossible = TRUE;
  $output .= '<h4>' . t('Entity Bundles') . '</h4>';
  if (empty($variables['bundle'])) {
     $output .= '<p>No Entity Bundles currently exist for the entity type ' . $variables['entitytype'] . '.</p>';
  }
  else {
    $output .= '<p>Listed below are the Entity Bundles derived from the entity type ' . $variables['entitytype'] . '.</p>';

    foreach ($variables['bundle'] as $key => $value) {
      $output .= '<fieldset class="collapsible collapsed">';
      $output .= '<legend><span class="fieldset-legend">' . $value['label'] . '</span></legend><div class="fieldset-wrapper">';
      $output .= '<h3>' . $value['label'] . '</h3>';
      $output .= '<p>' . t('Machine name') . ": " . $key . '</p>';
      if (isset($value['admin'])) {
        if (isset($value['admin']['real path'])) {
          $output .= '<p>' . t('Path for administrative pages to manage this entity\'s structure') . ": " . l($value['admin']['real path'], $value['admin']['real path']) . '</p>';
        }
      }
      if (count($variables['fields'][$key]) != 0) {
        $output .= theme('entityinfo_fields', array('fields' => $variables['fields'][$key], /* 'bundle' => $variables['bundle'][$key], */ /* 'entity' => $variables['entity'], */ 'parent_entity' => $variables['parent_entity'], 'revisionsflag' => $revisionspossible, 'parentbundle' => $key, 'bundlelabel' => $variables['bundle'][$key]['label'], 'all_table_schema' => $variables['all_table_schema']));
      }
      $output .= '</div></fieldset>';
    }
  }

  return $output;
}

/**
 * Theming function for entity fields
 */
function theme_entityinfo_fields($variables) {
  $fieldtables = array();
  $output = NULL;
  $output .= '<h5>' . t('Fields for') . ' ' . $variables['bundlelabel'] . '</h5>';
  $output .= '<table>';
  $output .= '<tr><th>' . t('Field Machine Name (used for EntityFieldQueries)') . '</th><th>' . t('Field Name') . '</th><th>' . t('Description (if provided)') . '</th><th>' . t('Drupal Field Type / Module') . '</th><th>' . t('Database Table Names') . '</th><th>' . t('Required Field') . '</th></tr>';
  foreach ($variables['fields'] as $key => $field) {
    $fieldstopass = array();
    $output .= '<tr>';
    $output .= '<td>' . $key . '</td><td>' . $field['label'] . '</td>';
    $output .= '<td>' . (drupal_strlen($field['description']) > 0 ? $field['description'] : "N/A") . '</td>';
    $output .= '<td>' . $field['widget']['type'] . '/' . $field['widget']['module'] . '</td>';
    $basefieldname = 'field_data_' . $field['field_name'];
    $output .= '<td>' . $basefieldname;
    $fieldstopass[$basefieldname] = $variables['all_table_schema'][$basefieldname];
    if ($variables['revisionsflag']) {
      $revisionfieldname = 'field_revision_' . $field['field_name'];
      $output .= '<br/>' . $revisionfieldname;
      $fieldstopass[$revisionfieldname] = $variables['all_table_schema'][$revisionfieldname];
    }
    $output .= '</td>';
    $output .= '<td>';
      if ($field['required']) {
        $output .= "TRUE";
      }
      else {
        $output .= "FALSE";
      }
    $output .= '</td>';
    $output .= '</tr>';
    $fieldtables[$key] = $fieldstopass;
  }
  $output .= '</table>';
  $output .= theme('entityinfo_bundle_fields', array('fieldtables' => $fieldtables));
  return $output;
}

/**
 * Theming function for entity tableschema info
 */
function theme_entityinfo_tableschema($variables) {
  $output = NULL;

  if ($variables['table_type'] == 'base_table_schema') {
    $output .= '<fieldset class="collapsible collapsed">';
    $output .= '<legend><span class="fieldset-legend">' . t('Base Table Schema') . ": " . $variables['table_schema']['name'] . '</span></legend><div class="fieldset-wrapper">';
    $output .= '<h5>' . t('Base Table Schema') . ": " . $variables['table_schema']['name'] . '</h5>';
  }
  elseif ($variables['table_type'] == 'rev_table_schema') {
    $output .= '<fieldset class="collapsible collapsed">';
    $output .= '<legend><span class="fieldset-legend">' . t('Revision Table Schema') . ": " . $variables['table_schema']['name'] . '</span></legend><div class="fieldset-wrapper">';
    $output .= '<h5>' . t('Revision Table Schema') . ": " . $variables['table_schema']['name'] . '</h5>';
  }
  if (isset($variables['table_schema']['module'])) {
    $output .='<em>' . t('Defined by the module') . ' -- ' . $variables['table_schema']['module'] . '</em>';
  }
  $output .= '<p>+ - ' . t('primary key') . '</p>';
  $output .= '<p>& - ' . t('unique key') . '</p>';
  $output .= '<p>* - ' . t('required field') . '</p>';
  $output .= '<table>';
  $output .= '<tr><th>' . t('Field Name') . '</th><th>' . t('Type and Size') . '</th><th>' . t('Default Value') . '</th><th>' . t('Serialized') . '</th><th>' . t('Translatable') . '</th><th>' . t('Description') . '</th></tr>';
  foreach ($variables['table_schema']['fields'] as $key => $value) {
    //start duplicate code
    $name = $key;
    if (isset($value['not null'])) {
      if ($value['not null']) {
        $name .= " *";
      }
    }
    if (isset($variables['table_schema']['primary key'])) {
      if ($variables['table_schema']['primary key'][0] == $key) {
        $name = "+ " . $name;
      }
    }
    if (isset($variables['table_schema']['unique keys'])) {
      foreach ($variables['table_schema']['unique keys'] as $kkey => $vvalue) {
        if ($key == $kkey) {
          $name = "& " . $name;
        }
      }
    }

    $literaltype = _entityinfo_get_field_info_literaltype($value);
    $output .= _entityinfo_theme_field_info_tablerow($name, $literaltype, $value);
    //end duplicate code
  }
  $output .= '</table>';

  $output .= _entityinfo_get_foreign_key_info($variables);
  $output .= _entityinfo_get_indices_info($variables);

  $output .= '</div></fieldset>';

  return $output;
}

function _entityinfo_get_foreign_key_info($variables) {
  $output = NULL;
  if (isset($variables['table_schema']['foreign keys'])) {
    $output .= '<h6>' . t('Foreign Key') . '</h6>';
    $output .= '<table>';
    $output .= '<tr><th>' . t('Key Name') . '</th><th>' . t('Table') . '</th><th>' . t('Relationship') . '</th></tr>';
    foreach ($variables['table_schema']['foreign keys'] as $fkey => $fvalue) {
      $ftable = $fvalue['table'];
      foreach ($fvalue['columns'] as $lkey => $rkey) {
        $fcolumns = $lkey . ":" . $rkey;
      }
      $output .= '<tr><td>' . $fkey . '</td><td>' . $ftable . '</td><td>' . $fcolumns . '</td></tr>';
    }
    $output .= '</table>';
  }
  return $output;
}

function _entityinfo_get_indices_info($variables) {
  $output = NULL;

  if (isset($variables['table_schema']['indexes'])) {
    $output .= '<h6>' . t('Indices') . '</h6>';
    $output .= '<table>';
    $output .= '<tr><th>' . t('Name') . '</th><th>' . t('Fields') . '</th></tr>';
    foreach ($variables['table_schema']['indexes'] as $ikey => $ivalue) {
      $ival = NULL;
      foreach ($ivalue as $iikey => $iivalue) {
        if (is_string($iivalue)) {
          $ival .= $iivalue . '/';
        }
        else {
          if (is_array($iivalue)) {
            $ival .= $iivalue[0] . '/';
          }
        }
      }
      $ival = drupal_substr($ival, 0, drupal_strlen($ival) - 1);
      $output .= '<tr><td>' . $ikey . '</td><td>' . $ival . '</td></tr>';
    }
  }
  $output .= '</table>';

  return $output;
}
/**
 * Theming for bundle fields info.
 */
function theme_entityinfo_bundle_fields($variables) {
  $output = NULL;
  $output .= '<fieldset class="collapsible collapsed">';
  $output .= '<legend><span class="fieldset-legend">' . t('Attached Fields') . '</span></legend><div class="fieldset-wrapper">';

  $output .= '<h6>' . t('Attached Fields') . '</h6>';
      $output .= '<p>+ - ' . t('primary key') . '</p>';
      $output .= '<p>& - ' . t('unique key') . '</p>';
      $output .= '<p>* - ' . t('required field') . '</p>';

  foreach ($variables['fieldtables'] as $fieldname => $tableobject) {
    foreach ($tableobject as $tablename => $table) {
      $output .= '<fieldset class="collapsible collapsed">';
      $output .= '<legend><span class="fieldset-legend">' . $fieldname . ' (' . $tablename . ')' . '</span></legend><div class="fieldset-wrapper">';
      $output .= '<em>' . $fieldname . ' (' . $tablename . ')</em>';
      $output .= '<table>';
      $output .= '<tr><th>' . t('Field Name') . '</th><th>' . t('Type and Size') . '</th><th>' . t('Default Value') . '</th><th>' . t('Serialized') . '</th><th>' . t('Translatable') . '</th><th>' . t('Description') . '</th></tr>';

      foreach ($table['fields'] as $key => $value) {
        if (!in_array($key, array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta'))) {

          $name = $key;
          if (isset($value['not null'])) {
            if ($value['not null']) {
              $name .= " *";
            }
          }
          if (isset($variables['fieldtables'][$fieldname][$tablename]['primary key'])) {
            if ($variables['fieldtables'][$fieldname][$tablename]['primary key'][0] == $key) {
              $name = "+ " . $name;
            }
          }
          if (isset($variables['fieldtables'][$fieldname][$tablename]['unique keys'])) {
            foreach ($variables['fieldtables'][$fieldname][$tablename]['unique keys'] as $kkey => $vvalue) {
              if ($key == $kkey) {
                $name = "& " . $name;
              }
            }
          }
          $literaltype = _entityinfo_get_field_info_literaltype($value);
          $output .= _entityinfo_theme_field_info_tablerow($name, $literaltype, $value);
        }
      }
      $output .= '</table>';

      if (isset($variables['fieldtables'][$fieldname][$tablename]['foreign keys'])) {
        $output .= '<em>' . t('Foreign Key for') . ' ' . $tablename . '</em>';
        $output .= '<table>';
        $output .= '<tr><th>' . t('Key Name') . '</th><th>' . t('Table') . '</th><th>' . t('Relationship') . '</th></tr>';
        foreach ($variables['fieldtables'][$fieldname][$tablename]['foreign keys'] as $fkey => $fvalue) {
          $ftable = $fvalue['table'];
          foreach ($fvalue['columns'] as $lkey => $rkey) {
            $fcolumns = $lkey . ":" . $rkey;
          }
          $output .= '<tr><td>' . $fkey . '</td><td>' . $ftable . '</td><td>' . $fcolumns . '</td></tr>';
        }
        $output .= '</table>';
      }
      $output .='</div></fieldset>';
    }
  }
  $output .='</div></fieldset>';
  return $output;
}

/**
 * Theming for controller data
 */
function theme_entityinfo_controller_data($variables) {
  $output = NULL;
  $output .= '<h4>' . t('Controller Information') . '</h4>';
  $output .= '<table>';
  $output .= '<tr><th>' . t('Code Structure') . '</th><th>' . t('Item') . '</th></tr>';

  $controllers = array(
    'controller class' => t('Controller Class'),
    'entity class' => t('Entity Class'),
    'metadata controller class' => t('Metadata Controller Class'),
    'views controller class' => t('Views Controller Class'),
    'rules controller class' => t('Rules Controller Class'),
    'features controller class' => t('Features Controller Class'),
    'i18n controller class' => t('Internationalization Controller Class'),
  );
  foreach ($controllers as $controller => $label) {
    if (isset($variables[$controller])) {
      $output .= '<tr><td>' . $label . '</td><td>' . $variables[$controller] . '</td></tr>';
    }
  }
  
  if (isset($variables['admin ui']) && isset($variables['admin ui']['controller class'])) {
    $output .= '<tr><td>' . t('Admin UI Controller Class') . '</td><td>' . $variables['admin ui']['controller class'] . '</td></tr>';
  }
  
  if (isset($variables['fieldable'])) {
    if ($variables['fieldable']) {
      $value = t("TRUE");
    }
    else {
      $value = t("FALSE");
    }
    $output .= '<tr><td>' . t('fieldable') . '</td><td>' . $value . '</td></tr>';
  }

  if (isset($variables['exportable'])) {
    if ($variables['exportable']) {
      $value = t("TRUE");
    }
    else {
      $value = t("FALSE");
    }
    $output .= '<tr><td>' . t('exportable') . '</td><td>' . $value . '</td></tr>';
    if (isset($variables['export']['default hook'])) {
      $output .= '<tr><td> - ' . t('default export hook') . '</td><td>' . $variables['export']['default hook'] . '</td></tr>';
    }
  }

  $values_to_check = array('load hook', 'access callback', 'creation callback', 'save callback', 'deletion callback', 'revision deletion callback', 'view callback', 'form callback');
  foreach ($values_to_check as $value)
  if (isset($variables[$value])) {
    $output .= '<tr><td>' . $value . '</td><td>' . $variables[$value] . '</td></tr>';
  }
  $output .= '</table>';
  return $output;
}

function _entityinfo_theme_field_info_tablerow($name, $literaltype, $value = array()) {

  $defaultvalue = isset($value['default']) ? $value['default'] : NULL;
  $serialize = isset($value['serialize']) ? ($value['serialize'] ? "TRUE" : "FALSE") : NULL;
  $translatable = isset($value['translatable']) ? ($value['translatable'] ? "TRUE" : "FALSE") : NULL;
  $description = isset($value['description']) ? $value['description'] : NULL;

  return '<tr><td>' . $name . '</td><td>' . $literaltype . '</td><td>' . $defaultvalue . '</td><td>' . $serialize . '</td><td>' . $translatable . '</td><td>' . $description . '</td></tr>';
}


function _entityinfo_get_field_info_literaltype($value = array()) {
  $literaltype = NULL;

  if (isset($value['type'])) {
    $type = $value['type'];
    $literaltype = $value['type'];
    if (isset($value['size'])) {
      if (!in_array($value['size'], array('normal'))) {
        $literaltype .= "/" . $value['size'];
      }
    }
    if (in_array($type, array('int', 'float', 'numeric'))) {
      if (isset($value['unsigned'])) {
        if ($value['unsigned']) {
          $literaltype .= '(unsigned)';
        }
      }
    }
    if (in_array($type, array('char', 'varchar', 'text'))) {
      if (isset($value['length'])) {
        $literaltype .= '(' . $value['length'] . ')';
      }
    }
    if (in_array($type, array('numeric'))) {
      $literaltype .= '(' . $value['precision'] . ":" . $value['scale'] . ')';
    }
  }
  else {
    $type = $literaltype = "error";
  }

  return $literaltype;
}

function _entityinfo_build_entity_array_titles(&$entities = array()) {
  foreach ($entities as $entitykey => $entity) {
    $title = $entity['label'];
    if (isset($entity['plural label'])) {
      $title .= " " . t("or") . " " . $entity['plural label'];
    }
    $title .= " (" . $entitykey . ")";
    $entities[$entitykey]['title'] = $title;
  }
}

function _entityinfo_build_tableschema_info($infoobject, $entities, $entityinfo_list, &$entityschema, &$pageoutput) {
  foreach ($entityinfo_list as $entity) {
    //Database information for this entity
    $entityschema = array();

    _entityinfo_get_base_table_schema_info($infoobject, $entity, $entityschema);
    _entityinfo_get_revision_table_schema_info($infoobject, $entity, $entityschema);

    $databaseinfo = theme('entityinfo_database_info', array(
      'base_table' => isset($infoobject->entities[$entity]['base table']) ? $infoobject->entities[$entity]['base table'] : NULL,
      'base_table_schema' => isset($infoobject->entities[$entity]['schema_fields_sql']['base table']) ? $infoobject->entities[$entity]['schema_fields_sql']['base table'] : NULL,
      'revision_table' => isset($infoobject->entities[$entity]['revision table']) ? $infoobject->entities[$entity]['revision table'] : NULL,
      'rev_table_schema' => isset($infoobject->entities[$entity]['schema_fields_sql']['revision table']) ? $infoobject->entities[$entity]['schema_fields_sql']['revision table'] : NULL,
      'entity_table_schema' => $entityschema,
      'entity' => $entity,
      'fieldable' => $infoobject->entities[$entity]['fieldable'],
    ));
    $bundleinfo = theme('entityinfo_bundles', array('bundle' => $infoobject->bundles[$entity], 'entitytype' => $infoobject->entities[$entity]['label'], 'fields' => (isset($infoobject->fields[$entity]) ? $infoobject->fields[$entity] : NULL), 'entity' => $infoobject->entities[$entity], 'all_table_schema' => $infoobject->tableschema, 'parent_entity' => $entity));
    //gathering it all together fore each entity type
    $pageoutput .= theme('entityinfo_page', array('infoobject' => $infoobject, 'entity' => $entities[$entity], 'database_info' => $databaseinfo, 'bundle_info' => $bundleinfo));
  }
}

function _entityinfo_get_base_table_schema_info($infoobject, $entity, &$entityschema) {
  if (isset($infoobject->entities[$entity]['base table'])) {
    $base_table_schema = isset($infoobject->tableschema[$infoobject->entities[$entity]['base table']]) ? $infoobject->tableschema[$infoobject->entities[$entity]['base table']] : NULL;
    if ($base_table_schema) {
      $entityschema['base_table_schema'] = $base_table_schema;
    }
  }
}

function _entityinfo_get_revision_table_schema_info($infoobject, $entity, &$entityschema) {
  if (isset($infoobject->entities[$entity]['revision table'])) {
    $rev_table_schema = isset($infoobject->tableschema[$infoobject->entities[$entity]['revision table']]) ? $infoobject->tableschema[$infoobject->entities[$entity]['revision table']] : NULL;
    if ($rev_table_schema) {
      $entityschema['rev_table_schema'] = $rev_table_schema;
    }
  }
}
