<?php

/**
 * @file
 * User Disk Quota: limit user uploads total size to a specific disk space quota.
 *
 */

/**
 * Implements hook_help().
 */
function user_disk_quota_help($path, $arg) {
  switch ($path) {
    case 'admin/help#user_disk_quota':
      // Return a line-break version of the module README.txt.
      return _filter_autop(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_menu().
 */
function user_disk_quota_menu() {
  $items = array();
  $items['admin/people/disk-quota'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_disk_quota_role_form'),
    'title' => 'Disk Quota',
    'description' => 'Find and manage roles disk quota.',
    'access arguments' => array('administer user roles disk quota'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'user_disk_quota.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permissions().
 */
function user_disk_quota_permission() {
  $permissions = array(
    'view own user disk quota' => array(
      'title' => t('View own user disk quota'),
    ),
    'edit own user disk quota' => array(
      'title' => t('Edit own user disk quota'),
    ),
    'edit any user disk quota' => array(
      'title' => t('Edit any user disk quota'),
    ),
    'create user disk quota' => array(
      'title' => t('Create user disk quota'),
    ),
    'administer user roles disk quota' => array(
      'title' => t('Administer user roles disk quota'),
    ),
  );
  $roles = user_roles();
  foreach ($roles as $rid => $role) {
    $permissions['edit ' . $rid . ' role disk quota'] = array(
      'title' => t('Edit role %role users disk quota', array('%role' => check_plain($role))),
    );
  }
  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_disk_quota_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['user_disk_quota'] = array(
    '#type' => 'fieldset',
    '#title' => t('Disk quota'),
    '#access' => _user_disk_quota_can_user_edit_disk_quota($form['#user']),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $quota = _user_disk_quota_get_user_user_quota($form['#user']);
  if (!empty($quota)) {
    $quota = format_size($quota);
  }
  $form['user_disk_quota']['user_disk_quota_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Quota limit'),
    '#default_value' => $quota,
    '#element_validate' => array('_user_disk_quota_form_quota_validate')
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_disk_quota_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['user_disk_quota'] = array(
    '#type' => 'fieldset',
    '#title' => t('Disk quota'),
    '#access' => _user_disk_quota_can_user_create_disk_quota($form['#user']),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['user_disk_quota']['user_disk_quota_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Quota limit'),
    '#element_validate' => array('_user_disk_quota_form_quota_validate')
  );
}

/**
 * Implements hook_user_insert().
 */
function user_disk_quota_user_insert(&$edit, $account, $category) {
  _user_disk_quota_user_set_value($edit, $account, $category);
}

/**
 * Implements hook_user_update().
 */
function user_disk_quota_user_update(&$edit, $account, $category) {
  _user_disk_quota_user_set_value($edit, $account, $category);
}

/**
 * Implements hook_user_delete().
 */
function user_disk_quota_user_delete($account) {
  db_delete('user_disk_quota_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_user_delete().
 */
function user_disk_quota_user_view($account, $view_mode, $langcode) {
  global $user;
  if (user_access('edit any user disk quota') ||
    ($user->uid == $account->uid && user_access('view own user disk quota', $account))) {
    $account->content['summary']['user_disk_quota'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('User disk quota'),
      '#markup' => theme('user_disk_quota', array('account' => $account)),
      '#attributes' => array('class' => array('user-disk-quota')),
    );
  }
}

/**
 * Implements hook_views_api().
 */
function user_disk_quota_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'user_disk_quota') . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function user_disk_quota_theme() {
  return array(
    'user_disk_quota' => array(
      'variables' => array('account' => NULL),
      'file' => 'user_disk_quota.theme.inc',
    ),
  );
}

/**
 * Implements hook_file_validate().
 */
function user_disk_quota_file_validate($file) {
  global $user;
  $errors = array();
  // Bypass validation for uid  = 1.
  if ($user->uid != 1) {
    $quota = _user_disk_quota_get_user_disk_quota($user);
    $max = _user_disk_quota_get_user_max_quota($user);
    if ($max && $quota >= $max) {
        $errors[] = t('Your current disk usage has exceeded allowed max quota size (currently used @quota of @max)',
              array(
                  '@quota' => format_size($quota),
                  '@max' => format_size($max),
              ));
    }
    else if ($max && $file->filesize + $quota > $max) {
      $errors[] = t('The file is %filesize which would exceed your disk quota of %quota.', array('%filesize' => format_size($file->filesize), '%quota' => format_size($max)));
    }
  }
  return $errors;
}

/**
 * Implements hook_element_info_alter().
 */
function user_disk_quota_element_info_alter(&$type) {
  if (isset($type['managed_file'])) {
    $type['managed_file']['#process'][] = 'user_disk_quota_file_field_process';
  }
  if (isset($type['plupload'])) {
    $type['plupload']['#process'][] = 'user_disk_quota_file_field_process';
  }
}

/**
 * Element process callback for file-based fields.
 *
 * @param array &$element
 *   The form element to be processed.
 * @param array &$form_state
 *   The form state containing form values.
 * @param array $form
 *   The form element belongs to.
 *
 * @return array
 *   The processed element.
 */
function user_disk_quota_file_field_process(&$element, &$form_state, $form) {

    // If the upload forms haven't been submitted show quota warning status
    if(!isset($element['#needs_validation']) && !isset($form_state['clicked_button'])){
        _user_disk_quota_get_user_disk_quota_warning();
    }
    return $element;
}
/**
 * Get user quota limit.
 *
 * If user has no specific limit, it uses user's role limit.
 *
 * @param object $account
 *   The user. If NULL, current user will be used.
 *
 * @return int
 *   The user quota limit, in Bytes.
 */
function _user_disk_quota_get_user_max_quota($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  $max_upload_size = _user_disk_quota_get_user_user_quota($account);
  if (!$max_upload_size) {
    $max_upload_size = _user_disk_quota_get_user_role_max_quota($account);
  }
  return $max_upload_size;
}

/**
 * Get user specific quota limit.
 *
 * @param object $account
 *   The user. If NULL, current user will be used.
 *
 * @return int
 *   The user quota limit, in Bytes.
 */
function _user_disk_quota_get_user_user_quota($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  $query = db_select('user_disk_quota_user', 'u')
    ->fields('u', array('quota_limit'))
    ->condition('u.uid', $account->uid, '=');
  $max_upload_size = $query->execute()->fetchField();
  return $max_upload_size;
}

/**
 * Get user's role quota limit.
 *
 * @param object $account
 *   The user. If NULL, current user will be used.
 * @param bool $parsed
 *   If TRUE, the return value will be formatted in human readable way.
 *   Otherwise the return value will be expressed in Byte.
 *
 * @return string|int
 *   The user's role quota limit, as a Bytes number (i.e. 4194304) or as a
 *   human readable string (i.e. '4 MB').
 */
function _user_disk_quota_get_user_role_max_quota($account = NULL, $parsed = TRUE) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  $max_upload_size = '';
  foreach ($account->roles as $rid => $role) {
    $upload_size = variable_get('user_disk_quota_role_' . $rid, '');
    if (!$max_upload_size) {
      $max_upload_size = $upload_size;
    }
    elseif (parse_size($max_upload_size) < parse_size($upload_size)) {
      $max_upload_size = $upload_size;
    }
  }
  if (!$parsed) {
    return $max_upload_size;
  }
  return parse_size($max_upload_size);
}

/**
 * Get user current uploaded files quota.
 *
 * @param object $account
 *   The user. If NULL, current user will be used.
 *
 * @return int
 *   The user current uploaded files quota, in Bytes.
 */
function _user_disk_quota_get_user_disk_quota($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  return user_disk_quota_file_space_used($account->uid);
  //return file_space_used($account->uid, 0);
}

/**
 * Display a message to the user when is current disk usage exceeds the warning
 * level.
 *
 * @param object $account
 *   The user. If NULL, current user will be used.
 *
 */
function _user_disk_quota_get_user_disk_quota_warning($account = NULL) {
  static $displayed;
  if ($displayed) {
    return;
  }
  $max = _user_disk_quota_get_user_max_quota($account);
  if (empty($max)) {
    return;
  }
  $quota = _user_disk_quota_get_user_disk_quota($account);
  $percent = variable_get('user_disk_quota_warning_percentage', '100');
  $warning = ($max/100)*$percent;
  if ($quota >= $max) {
    drupal_set_message(t('Your current disk usage has exceeded allowed max quota size (currently used @quota of @max)', 
      array(
        '@quota' => format_size($quota),
        '@max' => format_size($max),
      )), 'error');
    $displayed = TRUE;
  }
  elseif ($quota > $warning) {
    drupal_set_message(t('Your current disk usage has almost exceeded allowed max quota size (currently used @quota of @max)', 
      array(
        '@quota' => format_size($quota),
        '@max' => format_size($max),
      )), 'warning');
    $displayed = TRUE;
  }
}

/**
 * Get current user disk usage.
 *
 * @param int $uid
 *   The id of the user. If NULL, current user id will be used.
 * @param string|int $status
 *   Only the file having the status passed as parameter will be included on
 *   disk quota calculation.
 *   Allowed status:
 *    - 'all': temporary and permanent file will be included in result.
 *    - 0: only temporary files will be included. Temporary files older than
 *         DRUPAL_MAXIMUM_TEMP_FILE_AGE will be removed during cron runs.
 *    - 1: only permanent files will be included in result.
 *
 * @return int
 *   The user current uploaded files quota, in Bytes.
 */
function user_disk_quota_file_space_used($uid = NULL, $status = 'all') {
  $query = db_select('file_managed', 'f');
  if ($status != 'all') { 
    $query->condition('f.status', $status);
  }
  $query->addExpression('SUM(f.filesize)', 'filesize');
  if (isset($uid)) {
    $query->condition('f.uid', $uid);
  }
  $query->addTag('user_disk_quota_get_user_quota');
  return $query->execute()->fetchField();
}

/**
 * Set user quota limit.
 *
 * Callback for hook_user_insert() and hook_user_update().
 *
 * @param array &$edit
 *   The array of form values submitted by the user.
 * @param object $account
 *   The user object on which the operation is performed.
 * @param bool $category
 *   The active category of user information being edited.
 *
 * @see hook_user_insert()
 * @see hook_user_update()
 */
function _user_disk_quota_user_set_value(&$edit, $account, $category) {
  if (!$account || $account->uid==0) {
    return;
  }
  if (isset($edit['user_disk_quota_limit'])) {
    if (!empty($edit['user_disk_quota_limit'])) {
      $quota = parse_size(check_plain($edit['user_disk_quota_limit']));
      _user_disk_quota_set_user_quota($account->uid, $quota);
    }
    else {
      db_delete('user_disk_quota_user')
        ->condition('uid', $account->uid)
        ->execute();
    }
  }
}

/**
 * Check if current user can edit a user quota.
 *
 * @param object $account
 *   The user to be edited by current user.
 *
 * @return bool
 *   TRUE if user can edit, FALSE otherwise.
 */
function _user_disk_quota_can_user_edit_disk_quota($account) {
  global $user;
  if (user_access('edit any user disk quota') ||
    (user_access('edit own user disk quota') && $account->uid == $user->uid)) {
    return TRUE;
  }
  if ($account->roles) {
    foreach ($account->roles as $rid => $role) {
      if (user_access('edit ' . $rid . ' role disk quota')) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Set user quota limit.
 *
 * @param int $uid
 *   The id of users to set limit for.
 * @param int $quota
 *   The limit to be set.
 */
function _user_disk_quota_set_user_quota($uid, $quota) {
  $query = db_select('user_disk_quota_user', 'u')
    ->fields('u')
    ->condition('u.uid', $uid, '=');
  $result = $query->execute()->fetchField();
  if (!$result) {
    db_insert('user_disk_quota_user')->fields(array(
      'uid' => $uid,
      'quota_limit' => $quota,
    ))->execute();
  }
  else {
    db_update('user_disk_quota_user')->fields(array(
      'uid' => $uid,
      'quota_limit' => $quota,
    ))
    ->condition('uid', $uid, '=')
    ->execute();
  }
}

/**
 * Check if current user can add a user quota to a new user.
 *
 * @param object $account
 *   The user that is trying to add a user quota. If null, current user will be
 *   used.
 *
 * @return bool
 *   TRUE if user can add user quota, FALSE otherwise.
 */
function _user_disk_quota_can_user_create_disk_quota($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  if (user_access('create user disk quota', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Form element validation callback for fields containing a quota.
 *
 * @param array &$element
 *   The form element to be processed.
 * @param array &$form_state
 *   The form state containing form values.
 */
function _user_disk_quota_form_quota_validate($element, &$form_state) {
  if (empty($element['#value'])) {
    // Empty means no size restrictions, so don't throw an error.
    return;
  }
  $max_size = parse_size(check_plain($element['#value']));
  if (is_null($max_size) || !is_numeric($max_size) || $max_size <= 0) {
    $err_message = t('The "@field" option must contain a valid value.', array('@field' => field_filter_xss($element['#title'])));
    $err_message .= ' ' . t('You can either leave the text field empty or enter a string like "512" (bytes), "80 KB" (kilobytes) or "50 MB" (megabytes).');
    form_error($element, $err_message);
  }
}
