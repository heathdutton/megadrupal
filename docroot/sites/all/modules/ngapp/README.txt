Overview
========
You may have already read a lot about using AngularJS with "headless Drupal".
Which makes for an awesome project, but can potentially be a pretty big
undertaking and "sell" up the food chain when an organization has already sunk
a lot of time/effort in to building out an existing Drupal site.

This module presents a middle-ground approach - it allows you to quickly
co-mingle Drupal stuff with Angular stuff, wrapping the "headless" concept up
via its packaged drupalServices factory. Using this mod, you can almost think of
AngularJS as a wholesale replacement of Drupal's theme layer for parts of your
site, which is often where a lot of overhead (processing and dev time) is
incurred in Drupal.

Example modules
===============
To get the most out of the example modules, do the following before enabling:

* drush dl ctools libraries views features services services_views
  views_datasource restws
* In a vanilla D7 installation, add "Term 1", "Term 2", "Term 3" to the Tags
  vocabulary.
* Use devel_generate to create some Article nodes.
* Observed behavior: the example modules are simple Features exports - as such,
  Views they include are not saved to the database until a change is actually
  made. Particularly with the Views JSON example, be sure to make some nominal
  change to the "ngapp_example_views_json" View to force a db write after
  enabling; ngapp depends on the views_view and views_display tables having
  data to generate its JS functions.

Registering Angular components
==============================
Really quick HOWTO on creating your first component:

* Copy examples/app/basic dir to the sites/all/libraries/ngapp dir.
* Find all occurrences of "Basic" and "basic" (including file/folder names)
  and replace with "Test" and "test".
* Clear Drupal caches; you should now have a block called
  "ngApp: Test example" available for region assignment in your theme.

If files[] are set a block will be created; otherwise only scripts[] will be
registered. This is to accommodate registration of Angular components that
may not have UI elements, or that output only partial UI elements. Move the
examples/app/directives directory to the configured component directory for
an example.

drupalServices
==============
Below are pros/cons, lessons learned, etc. when using supported contrib modules
with ngApp's drupalServices factory.

Services (3.x) REST server
--------------------------
* De facto standard for D7 sites.
* Views can be exposed through Services Views contrib.
* Entities can be exposed through Services Entity API contrib, or by simply
  using Services Views to query entities.
  * Per Services Entity API - the "propertyQueryOperation" appears to be very
    similar to what's in the restws contrib mod and suffers from the same lack
    of functionality.

Views Datasource
----------------
* Low barrier to entry; very easy to set up and use.
* No built-in X-CSRF-Token support.
* An ngApp user could create 1 dedicated View, and use several well-named
  displays to get data from their entire site.
  * E.g. "Nodes" display would equate to drupalServices.getNodes(), "Terms"
    display name would equate to drupalServices.getTerms(), etc.
  * Add any number of exposed filters to these displays to provide richer
    queries.
* The View machine name + View display machine name yielded some fairly
  cumbersome JS function names, so only the display's machine names are used for
  function names. Be sure to create unique names if you are creating multiple
  Views that have displays using the Views JSON style plugin.

RESTful Web Services
--------------------
* Allows you to query any entity right out of the box.
* Requires some know-how with Drupal entities and schema.
* JS promise function names generated by ngApp are very succinct; e.g.
  getNodes(), getTaxonomyTerms(), etc.
* Part of D8 core - this mod will probably be the standard/best-supported
  RESTful implementation as it matures.
* Not feature-complete. E.g. The inability to handle an array of values and
  AND/OR filtering on a field or property.
  https://www.drupal.org/node/2308939

Why ngApp and not the existing AngularJS contrib mod?
=====================================================
* Just my opinions/observations here!
* Goals are different:
  * https://www.drupal.org/project/angularjs
    AngularJS contrib provides a lot of hooks, config utilities and theming
    functionality to developers that want to use Drupal code to output
    Angular-enabled elements.
  * https://www.drupal.org/project/ngapp
    ngApp contrib tries to focus on plugging pure Angular developers in to an
    existing Drupal site, who likely have/want very little Drupal know-how;
    Drupal know-how is very separated from Angular know-how.
* AngularJS seems to require that a Drupal dev first write a module to start
  outputting Angular stuff on a site - that should not be.
* AngularJS is not future-proof - new Angular versions and scripts require that
  the contrib be updated before devs can start using them; ngApp is wide open
  as far as setting your stack goes.
* Using custom minified builds of an Angular stack is easier with ngApp.
* ngApp has working examples and an accessible demo site; AngularJS does not.
* ngApp has a much lower barrier to entry than AngularJS - you can actively
  be using Angular on your site in ~15m or less with ngApp.
