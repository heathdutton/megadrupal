<?php
/**
 * @file
 * Code for the ngApp module.
 */

/**
 * Helper function to manage JS grouping and weight.
 */
function _ngapp_add_js(&$target, $data, $options = array()) {
  $weight = &drupal_static(__FUNCTION__);
  if (empty($weight)) {
    $weight = 999;
  }

  $options = array_merge(array(
    'group' => JS_DEFAULT,
    'type' => 'file',
    'weight' => $weight,
    'scope' => 'footer',
    'data' => $data,
  ), $options);

  $target['ngapp']['#attached']['js'][] = $options;

  $weight++;
}
/**
 * Helper function to centralize variable defaults.
 */
function _ngapp_variable_get($name) {

  $paths_angular = <<<SCRIPTS
//ajax.googleapis.com/ajax/libs/angularjs/1.3.10/angular.min.js
//ajax.googleapis.com/ajax/libs/angularjs/1.3.10/angular-animate.min.js
//ajax.googleapis.com/ajax/libs/angularjs/1.3.10/angular-sanitize.min.js
SCRIPTS;

  $variables = array(
    'ngapp_name' => 'drupalApp',
    'ngapp_path_registrations' => 'sites/all/libraries/ngapp',
    'ngapp_services_endpoint' => 'dogfood',
    'ngapp_path_angular_loader_async' => '//ajax.googleapis.com/ajax/libs/angularjs/1.3.10/angular-loader.min.js',
    'ngapp_path_angular' => $paths_angular,
    'ngapp_factory' => array(
      'drupalLocalStorage' => array(),
      'drupalServices' => array(),
    ),
  );

  return variable_get($name, $variables[$name]);
}
/**
 * Helper method to format an drupalServices JS function name.
 */
function _ngapp_js_set_funcname($verb, $str) {
  $js_funcname = ucwords(str_ireplace(array('-', '_', '/'), ' ', $str));
  $js_funcname = implode('', explode(' ', $js_funcname));
  $js_funcname = drupal_strtolower($verb) . $js_funcname;

  return $js_funcname;
}
/**
 * Helper function to to build Drupal.settings.ngApp.
 */
function _ngapp_js_settings($help = FALSE) {
  global $user, $base_url;

  // Pare down fields exposed in drupalUser.
  $user_pruned = (array) $user;
  foreach ($user_pruned as $key => &$meta) {
    if (!in_array($key, array(
      'uid',
      'name',
      'mail',
    ))) {
      unset($user_pruned[$key]);
    }
  }

  $settings = array(
    // $drupalApp Angular module name.
    'name' => _ngapp_variable_get('ngapp_name'),
    'path' => $base_url . '/' . _ngapp_variable_get('ngapp_path_registrations'),
    // drupalUser Angular factory.
    'factory' => array_merge(_ngapp_variable_get('ngapp_factory'), array(
      'drupalUser' => $user_pruned,
    )),
  );

  // drupalServices Angular factory integrations with contrib mods.
  $supported = array(
    'rest_server',
    'views_json',
    'restws',
  );
  foreach ($supported as $module) {
    if (empty($settings['services']) && module_exists($module)) {
      $settings['services'] = array(
        'tokens' => array(),
        'resources' => array(),
      );
    }
  }

  // Set rest_server stubs for drupalServices.
  if (module_exists('rest_server')) {
    $endpoint = $settings['factory']['drupalServices']['rest_server'];

    if (!empty($endpoint)) {
      $endpoint = services_endpoint_load($endpoint);
      $settings['services']['tokens']['rest_server'] = drupal_get_token('services');

      $resources = services_get_resources_apply_settings($endpoint->name);
      $operations_supported = array(
        'index',
        'retrieve',
      );

      foreach ($resources as $alias => $resource) {
        $operations = array_keys($resource['operations']);
        $operations = array_intersect($operations, $operations_supported);

        foreach ($operations as $operation) {
          if (in_array($operation, $operations)) {
            // Set JS func name to getScrubbedKeyOperation.
            $js_funcname = _ngapp_js_set_funcname('GET', $resource['key'] . '_' . $operation);

            $settings['services']['resources']['GET'][$js_funcname] = array(
              'source' => 'rest_server',
              'path' => $base_url . '/' . $endpoint->path . '/' . $alias,
            );

            if ($help === TRUE) {
              $parts_path = array();
              $parts_query = array();
              foreach ($resource['operations'][$operation]['args'] as $key => $arg) {
                if (!empty($arg['source'])) {
                  if (array_key_exists('path', $arg['source'])) {
                    $parts_path[] = '{' . $key . '}';
                  }
                  elseif (array_key_exists('param', $arg['source'])) {
                    $parts_query[] = $arg['name'] . '={' . $key . '}';
                  }
                }
              }

              $settings['services']['resources']['GET'][$js_funcname]['arg'] = implode('/', $parts_path) . (!empty($parts_query) ? '?' . implode('&', $parts_query) : '');
              $settings['services']['resources']['GET'][$js_funcname]['help'] = (object) $resource['operations'][$operation]['args'];
            }
          }
        }
      }
    }
  }

  // Set views_json stubs for drupalServices.
  if (module_exists('views_json')) {

    // Get all Views page displays.
    $views_pages = db_select('views_display', 'vd')
      ->fields('v', array(
        'name',
      ))
      ->fields('vd', array(
        'id',
        'vid',
        'display_title',
        'display_options',
      ))
      ->condition('vd.display_plugin', 'page');
    $views_pages
      ->leftJoin('views_view', 'v', 'v.vid = vd.vid');
    $views_pages = $views_pages
      ->execute()
      ->fetchAll();

    // Group pages by vid then JS func name, set path, arg, help per func name.
    $pages = array();
    $pages_check_master = array();
    foreach ($views_pages as $display) {
      $display_options = unserialize($display->display_options);

      // Set JS func name to getScrubbedTitle.
      $js_funcname = _ngapp_js_set_funcname('GET', $display->id);

      $pages[$display->vid][$js_funcname] = array(
        'source' => 'views_json',
        'path' => $base_url . '/' . $display_options['path'],
      );

      if (!empty($display_options['style_plugin'])) {
        // Page display has no defined views_json style plugin; remove it.
        if ($display_options['style_plugin'] != 'views_json') {
          unset($pages[$display->vid][$js_funcname]);
        }
      }
      else {
        // This page needs to check Master display for views_json style plugin.
        $pages_check_master[] = $display->vid;
      }

      if ($help === TRUE) {
        $pages[$display->vid][$js_funcname]['arg'] = '';
        $pages[$display->vid][$js_funcname]['help'] = (object) array();

        if (!empty($display_options['filters'])) {
          $parts_help = array();
          $parts_query = array();
          foreach ($display_options['filters'] as $filter) {
            if (!empty($filter['exposed'])) {
              $parts_query[] = $filter['expose']['identifier'] . '={0}';
              $parts_help[] = $filter['expose'];
            }
          }

          $pages[$display->vid][$js_funcname]['arg'] = (!empty($parts_query) ? ('?' . implode('&', $parts_query)) : '');
          $pages[$display->vid][$js_funcname]['help'] = (object) $parts_help;
        }
      }
    }

    // Pages found with no views_json style plugin defined; check the Master
    // display for presence.
    if (!empty($pages_check_master)) {
      $pages_check_master = array_unique($pages_check_master);

      $views_json_check = db_select('views_display', 'vd')
        ->fields('vd', array(
          'vid',
          'display_options',
        ))
        ->condition('vd.display_plugin', 'page', '!=')
        ->condition('vd.id', 'default')
        ->condition('vd.vid', $pages_check_master, 'IN')
        ->execute()
        ->fetchAll();

      foreach ($views_json_check as $display) {
        $display_options = unserialize($display->display_options);

        // Master display has no defined views_json style plugin; remove it.
        if ($display_options['style_plugin'] != 'views_json') {
          unset($pages[$display->vid]);
        }
      }
    }

    // Add views_json pages to services resources settings.
    foreach ($pages as &$resources) {
      $fns = array_keys($resources);
      foreach ($fns as $fn) {
        $settings['services']['resources']['GET'][$fn] = $resources[$fn];
      }
    }
  }

  // Set restws stubs for drupalServices.
  if (module_exists('restws')) {
    $settings['services']['tokens']['restws'] = drupal_get_token('restws');
    $resources = restws_get_resource_info();

    foreach ($resources as $key => $resource) {
      $js_funcname = _ngapp_js_set_funcname('GET', $key);
      $js_funcname_plural = _ngapp_js_set_funcname('GET', $key . 's');

      // Oh yes, this is happening...
      $pluraly = substr($js_funcname, strlen($js_funcname) - 1);
      if ($pluraly == 'y') {
        $js_funcname_plural = substr($js_funcname, 0, strlen($js_funcname) - 1) . 'ies';
      }

      $settings['services']['resources']['GET'][$js_funcname_plural] = array(
        'source' => 'restws',
        'path' => $base_url . '/' . $key,
      );

      if ($help === TRUE) {
        $info = entity_get_all_property_info($key);

        $parts_query = array();
        foreach ($info as $property => &$meta) {
          $parts_query[] = $property . '={' . $property . '}';
        }

        $settings['services']['resources']['GET'][$js_funcname_plural]['arg'] = (!empty($parts_query) ? ('?' . implode('&', $parts_query)) : '');
        $settings['services']['resources']['GET'][$js_funcname_plural]['help'] = (object) $info;
      }
    }
  }

  return $settings;
}
/**
 * Helper function to create or append the registry per path provided.
 */
function _ngapp_build_registry($path, $reset = FALSE) {

  // Register our AngularJS components.
  $registry = &drupal_static(__FUNCTION__);
  if (empty($registry) || $reset == TRUE) {
    $files = drupal_system_listing('/^' . DRUPAL_PHP_FUNCTION_PATTERN . '\.info$/', $path);
    foreach ($files as $name => $file) {
      $item = array();
      $item['path'] = drupal_dirname($file->uri);
      $info = drupal_parse_info_file($file->uri);
      $item = array_merge($item, $info);

      $errors = array();
      if (empty($info['scripts'])) {
        $errors[] = t('No scripts found in ngApp "%name"; add "scripts[]" to your .info file.', array(
          '%name' => $name,
        ));
      }

      foreach ($errors as $error) {
        drupal_set_message($error, 'error', FALSE);
      }

      if (count($errors) == 0) {
        // If this is an example path, make sure the
        // corresponding module actually exists.
        $exclude = FALSE;
        $example = stripos($path, 'ngapp/examples/app');
        if ($example > 0 && !module_exists('ngapp_example_' . $name)) {
          $exclude = TRUE;
        }

        // Add component to the registry.
        if (!$exclude) {
          $registry[$name] = $item;
        }
      }
    }
  }

}

/**
 * Implements hook_init().
 */
function ngapp_init($help = FALSE) {

  // Build component registry.
  _ngapp_build_registry(_ngapp_variable_get('ngapp_path_registrations'));

  // Check for example modules and append registration paths if found.
  $examples = array(
    'ngapp_example_basic',
    'ngapp_example_rest_server',
    'ngapp_example_services_views',
    'ngapp_example_views_json',
    'ngapp_example_restws',
  );
  $register_examples = FALSE;
  foreach ($examples as $example) {
    if (module_exists($example)) {
      $register_examples = TRUE;
    }
  }
  if ($register_examples) {
    _ngapp_build_registry(drupal_get_path('module', 'ngapp') . '/examples/app', TRUE);
  }

  // Set registered scripts; these will be output in template_preprocess_html.
  $scripts = &drupal_static('ngapp_registered_scripts');
  if (empty($scripts)) {
    $registry = &drupal_static('_ngapp_build_registry');
    $scripts = array();

    if (!empty($registry)) {
      foreach ($registry as $info) {
        foreach ($info['scripts'] as $script) {
          $scripts[] = $info['path'] . '/' . $script;
        }
      }
    }
  }

  // If this is the first request from our Angular app, set the XSRF-TOKEN for
  // the current user so that Angular sets its $http X-XSRF-TOKEN header.
  // @see _ngapp_request()
  // @see https://docs.angularjs.org/api/ng/service/$http#cross-site-request-forgery-xsrf-protection
  if (empty($_SERVER['HTTP_X_XSRF_TOKEN'])) {
    if (!empty($_COOKIE['XSRF-TOKEN'])) {
      setcookie('XSRF-TOKEN', '', 0);
    }

    $expire_days = 30;
    $token = drupal_get_token('ngapp');
    setcookie('XSRF-TOKEN', $token, time() + ($expire_days * 3600 * 24), '/');
  }

}
/**
 * Implements hook_block_info().
 */
function ngapp_block_info() {

  $items = array();

  $registry = &drupal_static('_ngapp_build_registry');
  if (empty($registry)) {
    return $items;
  }

  foreach ($registry as $name => $info) {
    if (!empty($info['files'])) {
      $items[$name] = array(
        'info' => 'ngApp: ' . $info['name'],
        'properties' => array(
          'files' => array(),
          'css' => array(),
        ),
      );

      foreach ($info['files'] as $file) {
        $items[$name]['properties']['files'][] = $info['path'] . '/' . $file;
      }

      if (!empty($info['stylesheets'])) {
        foreach ($info['stylesheets'] as $stylesheets) {
          foreach ($stylesheets as $media => $stylesheet) {
            $items[$name]['properties']['css'][$media] = $info['path'] . '/' . $stylesheet;
          }
        }
      }
    }
  }

  return $items;
}
/**
 * Implements hook_block_view().
 */
function ngapp_block_view($delta) {

  $block = NULL;
  $block_info = ngapp_block_info();

  if (!empty($block_info[$delta])) {
    // Add component templates and styles.
    $block['subject'] = $block_info[$delta]['info'];
    $block['content'] = array(
      '#attached' => array(
        'css' => $block_info[$delta]['properties']['css'],
      ),
    );

    foreach ($block_info[$delta]['properties']['files'] as $file) {
      $block['content']['templates'][] = array(
        '#markup' => file_get_contents($file),
      );
    }
  }

  return $block;
}
/**
 * Implements template_preprocess_html().
 */
function ngapp_preprocess_html(&$vars) {
  global $base_url;

  // Don't Angular-ify admin paths.
  $path = drupal_get_path_alias();
  $is_admin = path_is_admin($path);
  if ($is_admin) {
    return;
  }

  $ngapp_name = _ngapp_variable_get('ngapp_name');
  $vars['attributes_array']['ng-app'] = $ngapp_name;
  $vars['attributes_array']['ng-strict-di'] = '';
  $vars['attributes_array']['ng-view'] = '';
  // Required for IE8 support in v1.2.x.
  // @see https://code.angularjs.org/1.2.27/docs/guide/ie
  $vars['attributes_array']['id'] = $ngapp_name;

  $element = array(
    '#tag' => 'base',
    '#attributes' => array(
      'href' => '/',
    ),
  );

  drupal_add_html_head($element, 'ngapp_base');

  $vars['page']['page_top']['ngapp']['#attached']['css'][] = drupal_get_path('module', 'ngapp') . '/ngapp.css';

  // Init AngularJS app.
  _ngapp_add_js($vars['page']['page_top'], array(
    'ngApp' => _ngapp_js_settings(),
  ), array(
    'type' => 'setting',
  ));

  $js_angular = _ngapp_variable_get('ngapp_path_angular');
  $js_angular = preg_split('/(\r\n?|\n)/', $js_angular);
  $js_main = drupal_get_path('module', 'ngapp') . '/ngapp.js';
  $js_registry = &drupal_static('ngapp_registered_scripts');
  $js_async = FALSE;

  // TODO: Finish async loading option.
  // @see https://github.com/angular/angular-seed/blob/master/app/index-async.html
  if ($js_async) {
    _ngapp_add_js($vars['page']['page_top'], _ngapp_variable_get('ngapp_path_angular_loader_async'), array(
      'scope' => 'header',
    ));

    $js_async = array();
  }

  foreach ($js_angular as $path) {
    if (is_array($js_async)) {
      $js_async[] = $path;
    }
    else {
      $options = array(
        'scope' => 'header',
      );
      if (stripos($path, '//') !== FALSE) {
        $options['group'] = JS_LIBRARY;
        $options['type'] = 'external';
      }
      else {
        $path = $base_url . '/' . trim($path, '/');
      }

      _ngapp_add_js($vars['page']['page_top'], $path, $options);
    }
  }

  if (is_array($js_async)) {
    $js_async[] = $js_main;
  }
  else {
    _ngapp_add_js($vars['page']['page_bottom'], $js_main);
  }

  if (!empty($js_registry)) {
    foreach ($js_registry as $path) {
      if (is_array($js_async)) {
        $js_async[] = $path;
      }
      else {
        _ngapp_add_js($vars['page']['page_bottom'], $path);
      }
    }
  }

  // TODO: Finish async loading option.
  // @see https://github.com/angular/angular-seed/blob/master/app/index-async.html
  if (is_array($js_async)) {
    $js_async = "'" . implode("',\n'", $js_async) . "'";
  }

}

/**
 * Implements hook_permission().
 */
function ngapp_permission() {
  return array(
    'administer ngapp' => array(
      'title' => t('Administer ngApp'),
      'description' => t('Perform administration for ngApp'),
    ),
  );
}
/**
 * Implements hook_block_menu().
 */
function ngapp_menu() {

  $items['admin/config/development/ngapp'] = array(
    'title' => 'ngApp',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'ngapp_settings_form',
    ),
    'access arguments' => array(
      'administer ngapp',
    ),
    'description' => 'Configure settings related to the ngApp module.',
  );

  // Set standard handler when ngapp is behaving as a REST server.
  // Allow for $key arg to be fully variable, so modules can implement
  // hook_ngapp_response() and return whatever data they want to be JSON-ified.
  $items['ngapp/%'] = array(
    'page callback' => '_ngapp_request',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Implements hook_flush_caches().
 */
function ngapp_flush_caches() {
  $factories = _ngapp_variable_get('ngapp_factory');

  // Value is stored in the same format as JS Date.getTime().
  $factories['drupalLocalStorage']['flush'] = REQUEST_TIME . '000';

  variable_set('ngapp_factory', $factories);

  return array();
}
/**
 * Admin settings form.
 */
function ngapp_settings_form($form, &$form_state) {

  $form = system_settings_form($form);

  array_unshift($form['#submit'], 'ngapp_settings_form_submit');

  $form['ngapp_description'] = array(
    '#markup' => t('This module turns your site in to an AngularJS application.'),
  );

  $form['ngapp_name'] = array(
    '#type' => 'textfield',
    '#title' => t('AngularJS app name'),
    '#maxlength' => 20,
    '#description' => t('The name of the app registered on the theme\'s body tag, e.g. <code>ng-app="@name"</code>.', array(
      '@name' => _ngapp_variable_get('ngapp_name'),
    )),
    '#default_value' => _ngapp_variable_get('ngapp_name'),
    '#required' => TRUE,
  );

  $form['ngapp_path_registrations'] = array(
    '#type' => 'textfield',
    '#title' => t('AngularJS app component path'),
    '#description' => t('The path where registered component directories will be added, e.g. <code>sites/all/libraries/ngapp</code>.'),
    '#default_value' => _ngapp_variable_get('ngapp_path_registrations'),
    '#required' => TRUE,
  );

  $form['ngapp_path_angular'] = array(
    '#type' => 'textarea',
    '#title' => 'AngularJS library paths',
    '#default_value' => _ngapp_variable_get('ngapp_path_angular'),
    '#description' => t('Specify the paths to the AngularJS libraries; enter one path per line. The module will treat a script as external if "//" is found in the path.'),
    '#required' => TRUE,
  );

  $factories = _ngapp_variable_get('ngapp_factory');

  $form['ngapp_factory'] = array(
    '#type' => 'fieldset',
    '#title' => t('Factories'),
    '#collapsible' => TRUE,
  );

  $form['ngapp_factory']['local_storage_save'] = array(
    '#type' => 'checkbox',
    '#title' => t("Send <code>drupalLocalStorage</code> client-side data back to the server."),
    '#description' => t('Modules can implement <code>hook_ngapp_local_storage_save()</code> to access this data.'),
    '#default_value' => (!empty($factories['drupalLocalStorage']['save']) ? $factories['drupalLocalStorage']['save'] : FALSE),
  );

  // Services rest_server options.
  if (module_exists('rest_server')) {
    $options = array('');
    $endpoints = services_endpoint_load_all();
    foreach ($endpoints as &$meta) {
      if (stripos($meta->server, 'rest') >= 0) {
        $options[] = $meta->name;
      }
    }
    $options = drupal_map_assoc($options);

    $form['ngapp_factory']['rest_server'] = array(
      '#type' => 'select',
      '#title' => t('Services endpoint'),
      '#description' => t('The name of the !services that <code>drupalServices</code> will use in your app.', array(
        '!services' => l(t('Services REST endpoint'), 'admin/structure/services'),
      )),
      '#options' => $options,
      '#default_value' => (!empty($factories['drupalServices']['rest_server']) ? $factories['drupalServices']['rest_server'] : ''),
    );
  }

  return $form;
}
/**
 * Extra settings form submit handler.
 */
function ngapp_settings_form_submit($form, &$form_state) {
  // Restructure vars so ngapp_factory variable is saved as a single value.
  $factories = _ngapp_variable_get('ngapp_factory');

  $factories['drupalLocalStorage']['save'] = $form_state['values']['local_storage_save'];
  unset($form_state['values']['local_storage_save']);

  if (isset($form_state['values']['rest_server'])) {
    $factories['drupalServices']['rest_server'] = $form_state['values']['rest_server'];
    unset($form_state['values']['rest_server']);
  }

  $form_state['values']['ngapp_factory'] = $factories;
}

/**
 * Menu callback for ngapp/%.
 *
 * Validates that Angular request headers include token value matching the
 * cookie we've set earlier. Otherwise a 403 is returned.
 *
 * For valid requests, invoke hook_ngapp_response() so modules may generate a
 * response based on $key.
 * 
 * @see ngapp_init()
 * @see https://docs.angularjs.org/api/ng/service/$http#cross-site-request-forgery-xsrf-protection
 */
function _ngapp_request($key) {
  $is_safe_method = (in_array($_SERVER['REQUEST_METHOD'], array('GET', 'HEAD', 'OPTIONS', 'TRACE', 'POST')));
  $is_valid_token = (!empty($_SERVER['HTTP_X_XSRF_TOKEN']) && !empty($_COOKIE['XSRF-TOKEN']) && $_SERVER['HTTP_X_XSRF_TOKEN'] == $_COOKIE['XSRF-TOKEN']);
  if (!$is_safe_method || !$is_valid_token) {
    return _ngapp_response(NULL, 403);
  }

  $request_body = NULL;
  if (in_array($_SERVER['REQUEST_METHOD'], array('POST', 'PUT', 'DELETE'))) {
    $mime = explode(';', $_SERVER['CONTENT_TYPE'], 2);
    $mime = $mime[0];
    if ($mime !== 'application/json') {
      return _ngapp_response(NULL, 400);
    }

    $request_body = file_get_contents('php://input');
    $request_body = drupal_json_decode($request_body);
  }

  // Allow modules to generate response based on $key.
  $data = NULL;
  if ($key) {
    $data = module_invoke_all('ngapp_response', $key, $request_body);
  }

  return _ngapp_response($data, 200);
}
/**
 * Helper function to output JSON response to clients.
 */
function _ngapp_response($data = NULL, $status = 200) {
  drupal_add_http_header('Status', $status);
  drupal_json_output($data);
  drupal_exit();
}
/**
 * Implements hook_ngapp_response().
 */
function ngapp_ngapp_response($key, $payload) {
  $response = NULL;

  switch ($key) {
    case 'help':
      $response = _ngapp_js_settings(TRUE);
      break;

    case 'context':
      $args = drupal_get_query_parameters();
      $context = array();

      // Path is set by drupalServices.context function.
      if (!empty($args['path'])) {
        $path = trim($args['path'], '/');
        $path = drupal_lookup_path('source', $path);

        $menu_item = menu_get_item($path);
        if (!empty($menu_item['page_arguments'])) {
          foreach ($menu_item['page_arguments'] as &$arg) {
            if (is_object($arg)) {
              $context[] = $arg;
            }
          }
        }
      }

      $response = $context;
      break;

    case 'factory':
      $response = module_invoke_all('ngapp_local_storage_save', $payload);
      break;
  }

  return $response;
}
