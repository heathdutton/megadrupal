<?php

/**
 * @file
 * Drush integration for the salsa entity module.
 */

/**
 * Implements hook_drush_command().
 */
function salsa_entity_drush_command() {
  $items['salsa-entity-generate-translatables'] = array(
    'description' => dt('Generates a file with all translatable strings.'),
  );
  $items['salsa-entity-export'] = array(
    'description' => dt('Export all objects of the given type'),
    'arguments' => array(
      'type' => dt('The salsa type, e.g. donate_page'),
    )
  );
  $items['salsa-entity-import'] = array(
    'description' => dt('Import all salsa entities from the provided export'),
    'arguments' => array(
      'file' => dt('The file that should be imported.'),
    )
  );
  return $items;
}

/**
 * Export salsa entities.
 */
function drush_salsa_entity_export($type = NULL) {
  if (!$type) {
    return drush_set_error(dt('You need to provide a salsa type.'));
  }

  $entities[$type] = array();
  foreach (entity_load('salsa_' . $type) as $entity) {
    // Extract all relevant properties, filter out empty ones.
    $entities[$type][$entity->identifier()] = array_filter(get_object_vars($entity));
  }

  $header = '<?php
// Exported Salsa entities for ' . $type . "\n\n";

  drush_print($header);

  // Export data.
  drush_print('$entities = ' . var_export($entities, TRUE) . ';');
}

function drush_salsa_entity_import($file = NULL) {
  if (!$file) {
    return drush_set_error(dt('You need to provide a file to import from.'));
  }

  if (!file_exists($file)) {
    // Drush changes the current working directory to the drupal root directory.
    // Also check the current directory.
    if (!file_exists(drush_cwd() . '/' . $file)) {
      return drush_set_error(dt('@name does not exists or is not accessible.', array('@name' => $file)));
    }
    else {
      // The path is relative to the current directory, update the variable.
      $file = drush_cwd() . '/' . $file;
    }
  }

  include $file;
  if (empty($entities)) {
    return drush_set_error(dt('Provided file is not valid'));
  }

  $mappings = variable_get('salsa_entity_id_mappings', array());
  $new_mapping_definitions = array();

  foreach ($entities as $type => $entities_type) {
    drush_log(dt('Starting to process @type.', array('@type' => $type)));
    foreach ($entities_type as $id => $values) {
      // Check if this is a new entity.
      $existing = FALSE;
      $old_key = NULL;
      if (isset($mappings[$type][$id])) {
        drush_log(dt('Entity @id exists already with local mapped id @local_id.', array('@id' => $id, '@local_id' => $mappings[$type][$id])));

        // Replace key with local mapping to update the existing record.
        $values[$type . '_KEY'] = $mappings[$type][$id];
        $values['key'] = $mappings[$type][$id];
        $existing = TRUE;
      }
      else {
        drush_log(dt('Entity @id is new.', array('@id' => $id)));
        // Save as a new entity.
        unset($values[$type . '_KEY']);
        unset($values['key']);
      }

      // Remove the organization_KEY
      unset($values['organization_KEY']);

      $entity = entity_create('salsa_' . $type, $values);
      $entity->save();

      drush_log(dt('Saved entity with id @id.', array('@id' => $entity->identifier())), 'success');

      // Add a new mapping line if this is a new object.
      if (!$existing) {
        $new_mapping_definitions[] = "\$conf['salsa_entity_id_mappings']['$type'][$id] = " . $entity->identifier() . ';';
      }
    }
  }
  drush_log(dt('Created @count new objects, add the following mapping definitions to local.settings.php', array('@count' => count($new_mapping_definitions))), 'success');
  drush_print(implode("\n", $new_mapping_definitions));
}

/**
 * Generate a file with all translatable strings.
 */
function drush_salsa_entity_generate_translatables() {
  $types = salsa_entity_object_types();

  $file = fopen(DRUPAL_ROOT . '/' .  drupal_get_path('module', 'salsa_entity') . '/salsa_entity.translatables.inc', 'w');

  $header = '<?php
/**
 * @file
 * This file is automatically generated with drush salsa-generate-translatables.
 */';
  fwrite($file, $header);
  fwrite($file, "\n");
  fwrite($file, "\n");

  foreach ($types as $name => $type) {
    fwrite($file, "// Schema strings for $name.\n");

    $cid = 'describe2:' . $name;
    if (!($salsa_info = salsa_entity_load_cache_item($cid))) {
      $query_info = array(
        '#script' => 'describe2.sjs',
        '#tables' => $name,
      );
      if ($salsa_info = salsa_api_query($query_info)) {
        salsa_entity_save_cache_item($cid, $salsa_info);
      }
    }
    foreach ($salsa_info[$name]['item'] as $item) {
     // Skip some internal/technical things.
     foreach (array('READONLY', 'PRIVATE', 'KEY') as $ignore_pattern) {
       if (strpos($item['name'], $ignore_pattern) !== FALSE) {
         continue 2;
       }
     }
     fwrite($file, "t('" . $item['label'] . "');\n");

     // Write out enum values.
     if ((strpos($item['type'], 'enum') === 0 || strpos($item['type'], 'set') === 0) && !empty($item['values'])) {
       foreach (explode(',', $item['values']) as $value) {
         // Ignore empty values, those with underscores and uppercase values.
         if (!empty($value) && strpos($value, '_') === FALSE && $value != strtoupper($value)) {
           fwrite($file, "t('" . $value . "');\n");
         }
       }
     }
    }
    fwrite($file, "\n");
  }
  fclose($file);
}
