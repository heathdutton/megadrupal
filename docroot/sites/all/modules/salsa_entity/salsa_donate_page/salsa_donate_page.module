<?php

/**
 * @file
 */

/**
 * Implements hook_salsa_object_type_info().
 */
function salsa_donate_page_salsa_object_type_info() {
  return array(
    'donate_page' => array(
      'label' => t('Salsa Donate Page'),
      'entity class' => 'SalsaEntityDonatePage',
      'entity keys' => array(
        'label' => 'Reference_Name',
      ),
      'cache' => TRUE,
    ),
    'donation' => array(
      'label' => t('Salsa Donation'),
    ),
    'recurring_donation' => array(
      'label' => t('Salsa Recurring Donation'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function salsa_donate_page_menu() {
  $items['admin/config/services/salsa/donate_page'] = array(
    'title' => 'Salsa Donate Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_donate_page_system_settings'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function salsa_donate_page_theme() {
  return array(
    'salsa_donate_page_progress_bar' => array(
      'variables' => array(
        'goal' => NULL,
        'value' => NULL,
        'total' => NULL,
      ),
    ),
    'salsa_donate_page_donors_list' => array(
      'variables' => array(
        'row_values' => array(),
      ),
    ),
  );
}

/**
 * Donate Page form.
 *
 * @todo State / Province should be dynamic.
 */
function salsa_donate_page_form($form, &$form_state, $donate_page, $view_mode) {
  if ($donate_page->Disabled == 'true') {
    drupal_goto($donate_page->redirect_path);
  }

  $form_state['salsa_object'] = $donate_page;
  $form_state['supporter'] = salsa_entity_get_supporter();
  $form_state['view_mode'] = $view_mode;

  // Flash message JS.
  $form['flash_message_js'] = array(
    '#markup' => '<script type="text/javascript" src="' . variable_get('salsa_api_url') . '/api/flashMessageJS.sjs"></script>',
  );

  // Add drupal behavior.
  $form['#attached'] = array(
    'js' => array(
      array(
        'data' => drupal_get_path('module', 'salsa_entity') . '/salsa_donate_page/js/salsa_donate_page.behaviors.js',
      ),
    ),
    'css' => array(
      array(
        'data' => drupal_get_path('module', 'salsa_donate_page') . '/includes/salsa_donate_page.css'
      ),
    ),
  );

  // Add default required fields for a donation.
  $default_required = variable_get('salsa_entity_default_donate_fields', array(
      'First_Name',
      'Last_Name',
      'Street',
      'Zip',
      'City',
      'State',
    ));
  $required = array_merge(explode(',', $form_state['salsa_object']->Required), $default_required);

  // Remove all unnecessary fields from the required ones.
  $hidden_fields = variable_get('salsa_entity_hidden_required_donate_fields', array());
  if (!empty($hidden_fields)) {
    foreach ($required as $k => $v) {
      if (in_array($v, $hidden_fields)) {
        unset($required[$k]);
      }
    }
  }
  $form_state['salsa_object']->Required = implode(',', array_unique($required));

  // Supporter fieldset.
  salsa_entity_supporter_fieldset($form, $form_state, 'salsa_donate_page_form');

  // Remove (hide) all unnecessary fields from the form.
  foreach ($hidden_fields as $field) {
    if (isset($form['Supporter_Info'][$field])) {
      $form['Supporter_Info'][$field]['#access'] = FALSE;
    }
  }

  if ($donate_page->Include_In_Honor_Of == 'true' || $donate_page->Include_In_Memory_Of == 'true') {
    $form['Supporter_Info']['honor_memory_pre_text'] = array(
      '#markup' => t('This donation is...'),
    );
  }

  if ($donate_page->Include_In_Honor_Of == 'true') {
    $form['Supporter_Info']['In_Honor']['In_Honor_Of_Enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Make this donation in honor of:'),
    );
    $form['Supporter_Info']['In_Honor']['In_Honor_Name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#states' => array(
        'visible' => array(
          ':input[name="In_Honor_Of_Enabled"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['Supporter_Info']['In_Honor']['In_Honor_Email'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail'),
      '#states' => array(
        'visible' => array(
          ':input[name="In_Honor_Of_Enabled"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['Supporter_Info']['In_Honor']['In_Honor_Address'] = array(
      '#type' => 'textarea',
      '#title' => t('Address'),
      '#states' => array(
        'visible' => array(
          ':input[name="In_Honor_Of_Enabled"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  if ($donate_page->Include_In_Memory_Of == 'true') {
    $form['Supporter_Info']['In_Memory']['In_Memory_Name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#prefix' => '<p><strong>' . t('in memory of') . '&nbsp;</strong><em>' . t('Keep blank if none') . '</em></p>',
    );
  }

  if ($donate_page->Include_Designation_Code == 'true') {
    $form['Supporter_Info']['In_Memory']['Designation_Code'] = array(
      '#type' => 'textfield',
      '#title' => t('Designate this gift for a specific purpose'),
      '#attributes' => array('id' => array('Designation_Code')),
    );
  }

  $form['Donation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Donation Amount'),
  );

  $form['Donation']['progress'] = array(
    '#markup' => salsa_donate_page_get_barometer($donate_page),
  );

  if (variable_get('salsa_donations_donors_list_row_count', 0)) {
    $form['Donation']['donors_list'] = salsa_donate_page_get_donors_list($donate_page);
  }

  if (!empty($donate_page->Custom_Donation_HTML)) {
    $form['Donation']['Custom_Donation_HTML'] = array(
      '#markup' => $donate_page->Custom_Donation_HTML,
      '#weight' => 0,
    );
  }
  else {
    if (!empty($donate_page->Pre_Donation_Text)) {
      $form['Donation']['Pre_Donation_Text'] = array(
        '#markup' => $donate_page->Pre_Donation_Text,
        '#weight' => 5,
      );
    }

    // Recurring payment settings.
    $default = 0;
    $options = array(0 => t('One-time contribution'));
    if ($donate_page->Include_Only_Recurring_Payments == 'true') {
      $default = 1;
      $options = array(
        1 => t('I want to make a recurring donation'),
      );
    }
    elseif ($donate_page->Include_Recurring_Payments == 'true') {
      $options += array(
        1 => t('I want to make a recurring donation'),
      );
    }

    if ($donate_page->Include_Only_Recurring_Payments == 'true' || $donate_page->Include_Recurring_Payments == 'true') {
      $form['Donation']['recurring'] = array(
        '#type' => 'radios',
        '#title' => t('Donation Amount ($)'),
        '#options' => $options,
        '#default_value' => $default,
        '#weight' => 10,
      );

      $form['Donation']['payperiod'] = array(
        '#type' => 'select',
        '#states' => array(
          'visible' => array(
            ':input[name=recurring]' => array('value' => 1),
          ),
        ),
        '#options' => array(
          'MONT' => t('Every Month'),
          'WEEK' => t('Every Week'),
          'QTER' => t('Every 3 Months'),
          'SMYR' => t('Every 6 Months'),
          'YEAR' => t('Every Year'),
        ),
        '#default_value' => 'MONT',
        '#title' => t('Choose frequency'),
        '#weight' => 15,
      );

      $form['Donation']['term'] = array(
        '#type' => 'select',
        '#states' => array(
          'visible' => array(
            ':input[name=recurring]' => array('value' => 1),
          ),
        ),
        '#options' => array(
          '9999' => t('Unlimited'),
        ) + drupal_map_assoc(range(2, 36)),
        '#default_value' => '9999',
        '#field_prefix' => t('for'),
        '#field_suffix' => t('times'),
        '#weight' => 20,
      );
    }

    // Donation Amount
    if ($donate_page->Comma_delimited_Amounts) {
      $amounts = array_map('trim', explode(',', $donate_page->Comma_delimited_Amounts));
    }
    else {
      $amounts = variable_get('salsa_entity_default_amounts', salsa_entity_default_amounts());
    }

    $form['Donation']['amount'] = array(
      '#type' => 'radios',
      '#options' => drupal_map_assoc($amounts) + array('' => t('other')),
      '#weight' => 25,
      '#title' => t('Choose amount'),
    );

    // Define some useful classes on the single radios, this will be merged in
    // form_process_radios();
    $i = 0;
    foreach ($form['Donation']['amount']['#options'] as $key => $option) {
      $form['Donation']['amount'][$key]['#attributes']['class'] = array('donation-amount-index', 'amount-index-' . $i++);
    }
    $form['Donation']['amount']['']['#attributes']['class'][] = 'amount-last';
    $form['Donation']['amount'][reset($amounts)]['#attributes']['class'][] = 'amount-first';

    $form['Donation']['other_amount'] = array(
      '#type' => 'textfield',
      '#weight' => 30,
      '#attributes' => array('class' => array('donation-amount-other')),
    );

    if ($donate_page->Include_Soft_Credit == 'true') {
      // In honor of someone checkbox ******************************************
      $form['Donation']['reason1'] = array(
        '#type' => 'checkbox',
        '#title' => t("I'm making this donation in honor of someone."),
        '#weight' => 35,
      );
      $form['Donation']['container1'] = array(
        '#type' => 'container',
        '#states' => array(
          'invisible' => array(
            'input[name="reason1"]' => array('checked' => FALSE),
          ),
        ),
        '#prefix' => '<div id="container1">',
        '#suffix' => '</div>',
        '#weight' => 40,
      );
      $in_honor_howmany = isset($form_state['in_honor_howmany']) ? $form_state['in_honor_howmany'] : 0;
      if (isset($form_state['clicked_button'])) {
        if ($form_state['clicked_button']['#name'] == 'in_honor_add') {
          $in_honor_howmany++;
        }
        elseif ($form_state['clicked_button']['#name'] == 'in_honor_remove') {
          $in_honor_howmany--;
        }
        $form_state['in_honor_howmany'] = $in_honor_howmany;
      }
      for ($i = 0; $i <= $in_honor_howmany; $i++) {
        $form['Donation']['container1']['scIHFirst_Name_' . $i] = array(
          '#type' => 'textfield',
          '#title' => t('Name'),
          '#default_value' => t('First'),
          '#attributes' => array(
            'onfocus' => "if (this.value == '" . t('First') . "') {this.value = '';}",
            'onblur' => "if (this.value == '') {this.value = '" . t('First') . "';}",
          ),
        );
        $form['Donation']['container1']['scIHMiddle_' . $i] = array(
          '#type' => 'textfield',
          '#default_value' => t('Middle'),
          '#attributes' => array(
            'onfocus' => "if (this.value == '" . t('Middle') . "') {this.value = '';}",
            'onblur' => "if (this.value == '') {this.value = '" . t('Middle') . "';}",
          ),
        );
        $form['Donation']['container1']['scIHLast_Name_' . $i] = array(
          '#type' => 'textfield',
          '#default_value' => t('Last'),
          '#attributes' => array(
            'onfocus' => "if (this.value == '" . t('Last') . "') {this.value = '';}",
            'onblur' => "if (this.value == '') {this.value = '" . t('Last') . "';}",
          ),
        );
        $form['Donation']['container1']['scIHEmail_' . $i] = array(
          '#type' => 'textfield',
          '#title' => t('E-mail'),
          '#default_value' => t('E-mail'),
          '#attributes' => array(
            'onfocus' => "if (this.value == '" . t('E-mail') . "') {this.value = '';}",
            'onblur' => "if (this.value == '') {this.value = '" . t('E-mail') . "';}",
          ),
        );
      }
      $form['Donation']['container1']['in_honor_add'] = array(
        '#name' => 'in_honor_add',
        '#type' => 'button',
        '#value' => t('Add someone else'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
          'callback' => 'salsa_donate_page_add_remove_links_callback',
          'wrapper' => 'container1',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
      if ($in_honor_howmany > 0) {
        $form['Donation']['container1']['in_honor_remove'] = array(
          '#name' => 'in_honor_remove',
          '#type' => 'button',
          '#value' => t('Remove'),
          '#limit_validation_errors' => array(),
          '#ajax' => array(
            'callback' => 'salsa_donate_page_add_remove_links_callback',
            'wrapper' => 'container1',
            'method' => 'replace',
            'effect' => 'fade',
          ),
        );
      }
      // ***********************************************************************

      // In memory of someone checkbox *****************************************
      $form['Donation']['reason2'] = array(
        '#type' => 'checkbox',
        '#title' => t("I'm making this donation in memory of someone."),
        '#weight' => 45,
      );
      $form['Donation']['container2'] = array(
        '#type' => 'container',
        '#states' => array(
          'invisible' => array(
            'input[name="reason2"]' => array('checked' => FALSE),
          ),
        ),
        '#prefix' => '<div id="container2">',
        '#suffix' => '</div>',
        '#weight' => 50,
      );
      $in_memory_howmany = isset($form_state['in_memory_howmany']) ? $form_state['in_memory_howmany'] : 0;
      if (isset($form_state['clicked_button'])) {
        if ($form_state['clicked_button']['#name'] == 'in_memory_add') {
          $in_memory_howmany++;
        }
        elseif ($form_state['clicked_button']['#name'] == 'in_memory_remove') {
          $in_memory_howmany--;
        }
        $form_state['in_memory_howmany'] = $in_memory_howmany;
      }
      for ($i = 0; $i <= $in_memory_howmany; $i++) {
        $form['Donation']['container2']['scIMFirst_Name_' . $i] = array(
          '#type' => 'textfield',
          '#title' => t('Name'),
          '#default_value' => t('First'),
          '#attributes' => array(
            'onfocus' => "if (this.value == '" . t('First') . "') {this.value = '';}",
            'onblur' => "if (this.value == '') {this.value = '" . t('First') . "';}",
          ),
        );
        $form['Donation']['container2']['scIMMiddle_' . $i] = array(
          '#type' => 'textfield',
          '#default_value' => t('Middle'),
          '#attributes' => array(
            'onfocus' => "if (this.value == '" . t('Middle') . "') {this.value = '';}",
            'onblur' => "if (this.value == '') {this.value = '" . t('Middle') . "';}",
          ),
        );
        $form['Donation']['container2']['scIMLast_Name_' . $i] = array(
          '#type' => 'textfield',
          '#default_value' => t('Last'),
          '#attributes' => array(
            'onfocus' => "if (this.value == '" . t('Last') . "') {this.value = '';}",
            'onblur' => "if (this.value == '') {this.value = '" . t('Last') . "';}",
          ),
        );
      }
      $form['Donation']['container2']['in_memory_add'] = array(
        '#name' => 'in_memory_add',
        '#type' => 'button',
        '#value' => t('Add someone else'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
          'callback' => 'salsa__add_remove_links_callback',
          'wrapper' => 'container2',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
      if ($in_memory_howmany > 0) {
        $form['Donation']['container2']['in_memory_remove'] = array(
          '#name' => 'in_memory_remove',
          '#type' => 'button',
          '#value' => t('Remove'),
          '#limit_validation_errors' => array(),
          '#ajax' => array(
            'callback' => 'salsa_donate_page_add_remove_links_callback',
            'wrapper' => 'container2',
            'method' => 'replace',
            'effect' => 'fade',
          ),
        );
      }
      // ***********************************************************************

      // Employer checkbox *****************************************************
      $form['Donation']['reason3'] = array(
        '#type' => 'checkbox',
        '#title' => t('My employer is matching all or part of my donation.'),
        '#weight' => 55,
      );
      $form['Donation']['container3'] = array(
        '#type' => 'container',
        '#states' => array(
          'invisible' => array(
            'input[name="reason3"]' => array('checked' => FALSE),
          ),
        ),
        '#weight' => 60,
      );
      $form['Donation']['container3']['EMGpercent'] = array(
        '#type' => 'radios',
        '#options' => array(
          100 => '100%',
          75 => '75%',
          50 => '50%',
          25 => '25%',
          'custom' => t('Custom percent'),
          'directamount' => t('Direct amount'),
          'notsure' => t('Not sure')),
      );
      $form['Donation']['container3']['EMGCustompercent'] = array(
        '#type' => 'textfield',
        '#title' => t('Custom percent'),
        '#field_suffix' => '%',
        '#states' => array(
          'visible' => array(
            ':input[name=EMGpercent]' => array('value' => 'custom'),
          ),
        ),
      );
      $form['Donation']['container3']['EMGDirectAmount'] = array(
        '#type' => 'textfield',
        '#title' => t('Direct amount'),
        '#field_prefix' => '$',
        '#states' => array(
          'visible' => array(
            ':input[name=EMGpercent]' => array('value' => 'directamount'),
          ),
        ),
      );
      $form['Donation']['container3']['scCoName'] = array(
        '#type' => 'textfield',
        '#title' => t('Employer'),
        '#default_value' => t('Company Name'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Company Name') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Company Name') . "';}",
        ),
      );
      $form['Donation']['container3']['scAddress'] = array(
        '#type' => 'textfield',
        '#default_value' => t('Street Address'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Street Address') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Street Address') . "';}",
        ),
      );
      $form['Donation']['container3']['scAddress2'] = array(
        '#type' => 'textfield',
        '#default_value' => t('Street Address2'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Street Address2') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Street Address2') . "';}",
        ),
      );

      $form['Donation']['container3']['scCity'] = array(
        '#type' => 'textfield',
        '#default_value' => t('City'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('City') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('City') . "';}",
        ),
      );
      $form['Donation']['container3']['scState'] = array(
        '#type' => 'textfield',
        '#default_value' => t('State'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('State') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('State') . "';}",
        ),
      );
      $form['Donation']['container3']['scZip'] = array(
        '#type' => 'textfield',
        '#default_value' => t('Zip'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Zip') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Zip') . "';}",
        ),
      );
      $form['Donation']['container3']['scAreaCode'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone'),
        '#default_value' => t('Area Code'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Area Code') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Area Code') . "';}",
        ),
      );
      $form['Donation']['container3']['scPhone'] = array(
        '#type' => 'textfield',
        '#default_value' => t('Phone'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Phone') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Phone') . "';}",
        ),
      );
      $form['Donation']['container3']['scContactName'] = array(
        '#type' => 'textfield',
        '#title' => t('Contact'),
        '#default_value' => t('Contact Name'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Contact Name') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Contact Name') . "';}",
        ),
      );
      $form['Donation']['container3']['scContactEmail'] = array(
        '#type' => 'textfield',
        '#default_value' => t('Contact E-mail Address'),
        '#attributes' => array(
          'onfocus' => "if (this.value == '" . t('Contact E-mail Address') . "') {this.value = '';}",
          'onblur' => "if (this.value == '') {this.value = '" . t('Contact E-mail Address') . "';}",
        ),
      );
      // ***********************************************************************
    }

    if (variable_get('salsa_donations_donors_list_row_count', 0)) {
      // Donation message field.
      $field_name = variable_get('salsa_donations_message_field');
      if (!empty($field_name)) {
        $form['Donation'][$field_name] = array(
          '#type' => 'textfield',
          '#title' => t('Comment'),
          '#description' => t('Enter an optional comment that will be shown in the donors list.'),
          '#attributes' => array('id' => array($field_name)),
          '#weight' => 100,
        );
      }
      // Publish donation checkbox.
      $field_name = variable_get('salsa_donations_public_donation_field');
      if (!empty($field_name)) {
        $form['Donation'][$field_name] = array(
          '#type' => 'checkbox',
          '#title' => t('Display my donation anonymously'),
          '#attributes' => array('id' => array($field_name)),
          '#weight' => 101,
        );
      }
    }
  }

  // Credit Card Information
  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
  );

  $form['credit_card']['cc_type'] = array(
    '#type' => 'select',
    '#title' => t('Card Type'),
    '#options' => array(
      '' => '',
      'visa' => t('Visa'),
      'mc' => t('MasterCard'),
      'amex' => t('American Express'),
      'disc' => t('Discover'),
    ),
    '#default_value' => '',
  );

  $form['credit_card']['cc'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Number'),
    '#description' => t('Please enter your card number with no spaces or dashes.'),
  );

  $form['credit_card']['ccExpMonth'] = array(
    '#type' => 'select',
    '#title' => t('Expires'),
    '#options' => array(
      '' => '',
    ),
    '#default_value' => '',
  );
  $months = range(1, 12);
  foreach ($months as $month) {
    if ($month < 10) {
      $month = '0' . $month;
    }
    $form['credit_card']['ccExpMonth']['#options'][$month] = $month;
  }

  $currentYear = date('Y', time());
  $years = range($currentYear, $currentYear + 10);
  $form['credit_card']['ccExpYear'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => '',
    ),
    '#default_value' => '',
  );
  foreach ($years as $year) {
    $form['credit_card']['ccExpYear']['#options'][substr($year, -2)] = $year;
  }

  $form['credit_card']['CVV2'] = array(
    '#type' => 'textfield',
    '#title' => t('Security Code'),
    '#size' => 5,
    '#maxlength' => 4,
  );

  if (isset($donate_page->Confirm_Box_Text)) {
    $form['eligibility'] = array(
      '#type' => 'checkbox',
      '#title' => check_plain(t($donate_page->Confirm_Box_Text)),
      '#attributes' => array('id' => array('eligibility')),
    );
  }
  else {
    $form['eligibility'] = array(
      '#type' => 'hidden',
      '#value' => 1,
    );
  }

  if (!empty($donate_page->PreSubmit_Footer)) {
    $form['PreSubmit_Footer'] = array(
      '#markup' => '<p>' . t($donate_page->PreSubmit_Footer) . '</p>',
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['donate'] = array(
    '#type' => 'submit',
    '#value' => t('Donate now'),
    '#suffix' => t('Please click the submit button only once.'),
    '#attributes' => array(
      'id' => array('submitContribution'),
      'alt' => array(t('Submit Contribution')),
    ),
  );

  $form['#action'] = variable_get('salsa_api_url') . '/salsa/shop/processDonate.jsp';
  salsa_donate_page_hidden_fields($form, $form_state);

  return $form;
}

/**
 * Ajax callback.
 */
function salsa_donate_page_add_remove_links_callback($form, $form_state) {
  return $form['donation'][$form_state['clicked_button']['#ajax']['wrapper']];
}

/**
 * Helper function that returns the hidden fields used on donate page.
 */
function salsa_donate_page_hidden_fields(&$form, $form_state) {
  $donate_page = $form_state['salsa_object'];

  $form['table'] = array(
    '#type' => 'hidden',
    '#value' => 'supporter',
  );

  $form['key'] = array(
    '#type' => 'hidden',
    '#value' => 0,
  );

  if (!isset($donate_page->redirect_path)) {
    $redirect_path = variable_get('salsa_api_url') . '/o/' . $donate_page->organization_KEY . '/p/salsa/web/common/public/thankYou.sjs?donate_page_KEY=' . $donate_page->donate_page_KEY . '&donation_KEY=[[donation_KEY]]&recurring_donation_KEY=[[recurring_donation_KEY]]';
  }
  $form['redirect'] = array(
    '#type' => 'hidden',
    '#value' => !isset($donate_page->redirect_path) ? $redirect_path : $donate_page->redirect_path,
  );

  $form['email_trigger_KEYS'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->email_trigger_KEYS,
  );

  $form['merchant_account_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->merchant_account_KEY,
    '#attributes' => array('id' => array('merchant_account_KEY')),
  );

  $form['donate_page_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->donate_page_KEY,
  );

  $form['organization_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->organization_KEY,
  );

  $form['Tax_Status'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->Tax_Status,
  );

  $form['Transaction_Type'] = array(
    '#type' => 'hidden',
    '#value' => 'Donation',
  );

  $form['Tracking_Code'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->Default_Tracking_Code,
  );

  $form['amountLimit'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->Donation_Limit,
  );

  $form['amountMinimum'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->Donation_Minimum,
  );

  $form['feed_archetype'] = array(
    '#type' => 'hidden',
    '#value' => '26',
  );

  $form['required'] = array(
    '#type' => 'hidden',
    '#value' => implode(',', $form_state['form_fields_required']),
  );

  $form['customfields'] = array(
    '#type' => 'hidden',
    '#value' => 'donation',
  );

  $form['linkRequired'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->linkRequired,
  );

  $form['linkRequest'] = array(
    '#type' => 'hidden',
    '#value' => $donate_page->linkRequest,
  );

  $form['scAmount'] = array(
    '#type' => 'hidden',
    '#value' => '',
    '#attributes' => array('id' => array('scAmount')),
  );

  $form['scCredit_Type'] = array(
    '#type' => 'hidden',
    '#value' => '',
    '#attributes' => array('id' => array('scCredit_Type')),
  );

  $form['updateRowValues'] = array(
    '#type' => 'hidden',
    '#value' => 'true',
  );

  $groups = explode(',', $donate_page->groups_KEYS);
  if (!empty($groups)) {
    foreach ($groups as $groupID) {
      $form[$groupID]['link'] = array(
        '#type' => 'hidden',
        '#value' => 'groups',
      );
      $form[$groupID]['linkKey'] = array(
        '#type' => 'hidden',
        '#value' => $groupID,
      );
    }
  }
}

/**
 * Form callback for system settings of donate pages.
 */
function salsa_donate_page_system_settings($form, &$form_state) {
  $custom_fields = salsa_entity_custom_fields('donate_page');
  if (!empty($custom_fields)) {
    foreach ($custom_fields as $field_name => $field) {
      $options[$field_name] = $field['label'];
    }
    $form['salsa_donations_goal_field'] = array(
      '#type' => 'select',
      '#title' => t('Salsa Donations Goal Field'),
      '#description' => t('Salsa custom field that contains the donations goal.'),
      '#options' => $options,
      '#default_value' => variable_get('salsa_donations_goal_field'),
      '#empty_option' => t('- None -'),
    );
  }

  $form['salsa_donations_donors_list_row_count'] = array(
    '#type' => 'select',
    '#title' => t('Row count donors list'),
    '#description' => t('Select the number of recent donators that should be displayed.'),
    '#options' => array(0 => t('Disabled')) + drupal_map_assoc(array(5, 10, 20, 30)),
    '#default_value' => variable_get('salsa_donations_donors_list_row_count', 0),
  );

  $custom_fields = salsa_entity_custom_fields('donation');
  if (!empty($custom_fields)) {
    $options = array();
    foreach ($custom_fields as $field_name => $field) {
      $options[$field_name] = $field['label'];
    }
    $form['salsa_donations_message_field'] = array(
      '#type' => 'select',
      '#title' => t('Salsa donation message'),
      '#description' => t('Field for an optional message that will be associated with a donation.'),
      '#options' => $options,
      '#default_value' => variable_get('salsa_donations_message_field'),
      '#empty_option' => t('- None -'),
    );
    $form['salsa_donations_public_donation_field'] = array(
      '#type' => 'select',
      '#title' => t('Salsa public donation'),
      '#description' => t('Salsa custom field that determines whether a donation will be published.'),
      '#options' => $options,
      '#default_value' => variable_get('salsa_donations_public_donation_field'),
      '#empty_option' => t('- None -'),
    );
  }
  return system_settings_form($form);
}

/**
 * Calculates donations total for a given donation page.
 *
 * @param int $donate_page_key
 *   The key of the donate page to summarize for.
 *
 * @return int
 *   The calculated donations total.
 *
 * @todo maybe make this function more flexible using arguments for query
 *   conditions.
 * @todo salsa returns only 100 records per query, so we need to load the
 *   total rows and then load totals until we reached the rowcount. This also
 *   should use getObject calls, that way we can only load the amount field.
 */
function salsa_donate_page_total_donation_amount($donate_page_key) {
  $cache = cache_get('salsa_donate_page:donations_total:' . $donate_page_key);
  if ($cache && REQUEST_TIME < $cache->expire) {
    return $cache->data;
  }
  // Load the donations made through the given donate page.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'salsa_donation')
    ->propertyCondition('donate_page_KEY', $donate_page_key)
    ->propertyCondition('Status', 'Donation Only')
    ->propertyCondition('Transaction_Type', 'Donation')
    ->execute();

  // No results, cancel.
  if (empty($result['salsa_donation'])) {
    return FALSE;
  }

  $total = 0;
  // Iterate over donations and add summarize to total.
  foreach ($result['salsa_donation'] as $donation) {
    $total += $donation->amount;
  }
  cache_set('salsa_donate_page:donations_total:' . $donate_page_key, $total, 'cache', REQUEST_TIME + 3600);
  return $total;
}

/**
 * Gets the latest donations.
 *
 * @param int $donate_page_key
 *   The key of the donate page to summarize for.
 * @param int $limit
 *   The limit for the retrieved records.
 *
 * @return array
 *   Array of salsa donations objects.
 */
function salsa_donate_page_get_latest_donations($donate_page_key, $limit) {
  // Load the latest donations donated using the given donate page.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'salsa_donation')
    ->propertyCondition('donate_page_KEY', $donate_page_key)
    ->propertyCondition('Status', 'Donation Only')
    ->propertyCondition('Transaction_Type', 'Donation')
    ->range(0, $limit)
    ->propertyOrderBy('Transaction_Date', 'DESC')
    ->execute();

  $entities = reset($result);
  // No results, cancel.
  if (empty($entities)) {
    return FALSE;
  }
  return $entities;
}

/**
 * Theme function for the donation barometer.
 */
function theme_salsa_donate_page_progress_bar($vars) {
  $output =  '<div class="donate-page-barometer-wrapper">';
  $output .=   '<div class="donate-page-donation-goal">' . t('Donation goal:') . '&nbsp;' . $vars['goal'] . '</div>';
  $output .=   '<div class="donate-page-barometer">';
  $output .=     '<span class="donate-page-barometer-label">' . t('Donated:') . '&nbsp;' . $vars['total'] . '</span>';
  $output .=     '<div class="donate-page-barometer-progress" style="width:' . $vars['value'] . '%;"></div>';
  $output .=   '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Theme function for the donors list.
 */
function theme_salsa_donate_page_donors_list($vars) {
  if (!empty($vars['row_values'])) {
    $field_name = variable_get('salsa_donations_public_donation_field');
    $msg_field_name = variable_get('salsa_donations_message_field', NULL);
    $header = array(
      t('Amount'),
      t('Name'),
    );
    if (!empty($msg_field_name)) {
      $header[] = t('Message');
    }
    $header[] = t('Date');
    $rows = array();
    foreach ($vars['row_values'] as $values) {
      $condition = (!empty($values['supporter']) && !empty($values['donation']->{$field_name})) && ($values['donation']->{$field_name} == 'false');
      $msg = (!empty($values['donation']->{$msg_field_name})) ? $values['donation']->{$msg_field_name} : '';
      $date = new DateTime($values['donation']->Transaction_Date);
      // Anonymize donations of donors that checked the option.
      $name_row = $condition ? $values['supporter']->First_Name . '&nbsp;' . $values['supporter']->Last_Name : t('Anonymous', array(), array('context' => 'donors_list'));
      $row = array(
        salsa_entity_get_amount($values['donation']->amount, TRUE),
        $name_row,
      );
      if (!empty($msg_field_name)) {
        $row[] = $msg;
      }
      $row[] = format_date($date->getTimestamp(), 'medium');
      $rows[] = $row;
    }
    return theme('table', array('header' => $header, 'rows' => $rows));
  }
}

/**
 * Wrapper function to get the markup of the barometer.
 *
 * @param object $donate_page
 *   The salsa donation object.
 *
 * @return string
 *   The markup of the barometer.
 */
function salsa_donate_page_get_barometer($donate_page) {
  $field_name = variable_get('salsa_donations_goal_field');
  // Return an empty string if the goal isn't set.
  if (empty($donate_page->{$field_name})) {
    return '';
  }
  $total = salsa_donate_page_total_donation_amount($donate_page->donate_page_KEY);
  $goal = $donate_page->{$field_name};
  $value = (($total / $goal) < 1) ? ($total / $goal) : 1;
  return theme('salsa_donate_page_progress_bar', array(
    'goal' => salsa_entity_get_amount($goal, TRUE),
    'value' => round($value * 100),
    'total' => salsa_entity_get_amount(salsa_donate_page_total_donation_amount($donate_page->donate_page_KEY), TRUE),
  ));
}

/**
 * Wrapper that prints the markup for the donors list.
 *
 * @param object $donate_page
 *   The salsa donation object.
 *
 * @return string
 *   The markup of the donors list table.
 */
function salsa_donate_page_get_donors_list($donate_page) {
  $cache = cache_get('salsa_donate_page:donors_list_values:' . $donate_page->donate_page_KEY);
  if ($cache && REQUEST_TIME < $cache->expire) {
    $rows = $cache->data;
  }
  else {
    $donations = salsa_donate_page_get_latest_donations($donate_page->donate_page_KEY, variable_get('salsa_donations_donors_list_row_count', 0));
    if (!empty($donations)) {
      $rows = array();
      $supporter_keys = array();
      foreach ($donations as $donation) {
        if (!empty($donation->supporter_KEY)) {
          $supporter_keys[] = $donation->supporter_KEY;
        }
      }
      $supporters = entity_load('salsa_supporter', $supporter_keys);
      foreach ($donations as $donation) {
        $rows[] = array(
          'supporter' => !empty($supporters[$donation->supporter_KEY]) ? $supporters[$donation->supporter_KEY] : NULL,
          'donation' => $donation,
        );
      }
      cache_set('salsa_donate_page:donors_list_values:' . $donate_page->donate_page_KEY, $rows, 'cache', REQUEST_TIME + 3600);
    }
  }
  return array(
    '#theme' => 'salsa_donate_page_donors_list',
    '#row_values' => $rows,
  );
}
