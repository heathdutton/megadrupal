<?php

/**
 * @file
 */
define('SALSA_ACTION_EMPTY', 'SALSA_ACTION_EMPTY');

/**
 * Implements hook_salsa_object_type_info().
 */
function salsa_advocacy_salsa_object_type_info() {
  return array(
    'action' => array(
      'label' => t('Salsa Action'),
      'entity class' => 'SalsaEntityAdvocacy',
      'entity keys' => array(
        'label' => 'Reference_Name',
      ),
    ),
    'action_target' => array(
      'label' => t('Salsa Action Target'),
    ),
    'action_content' => array(
      'label' => t('Salsa Action Content'),
    ),
    'action_content_detail' => array(
      'label' => t('Salsa Action Content Detail'),
    ),
    'supporter_action' => array(
      'label' => t('Salsa Supporter Action'),
    ),
    'supporter_action_target' => array(
      'label' => t('Salsa Supporter Action Target'),
    ),
    'supporter_action_comment' => array(
      'label' => t('Salsa Supporter Action Comment'),
    ),
    'recipient' => array(
      'label' => t('Salsa Recipient'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function salsa_advocacy_block_info() {
  $blocks = array();

  $action_pages = entity_load('salsa_action');
  if (is_array($action_pages)) {
    foreach ($action_pages as $action_page) {
      $blocks[$action_page->action_KEY] = array(
        'info' => $action_page->Reference_Name,
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function salsa_advocacy_block_view($delta = '') {
  $block = array();
  $action_page = entity_load_single('salsa_action', $delta);

  $block['subject'] = is_object($action_page) ? $action_page->Reference_Name : t('Error loading page');
  $block['content'] = is_object($action_page) ? $action_page->buildContent() : t('Content is currently not available. Please click !reload_link to refresh the page.', array('!reload_link' => l(t('here'), current_path())));

  return $block;
}

/**
 * Implements hook_menu().
 */
function salsa_advocacy_menu() {
  $items['salsa/actions'] = array(
    'title' => 'Current Actions',
    'page callback' => 'salsa_advocacy_actions_list',
    'page arguments' => array(),
    'access arguments' => array('view salsa_action'),
  );
  $items['salsa/targeted_actions/list'] = array(
    'title' => 'Targeted Actions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_advocacy_targeted_actions_form'),
    'access arguments' => array('view salsa_action'),
  );
  $items['admin/config/services/salsa/advocacy'] = array(
    'title' => 'Salsa Advocacy Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_advocacy_settings_form'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['salsa/action/index.sjs'] = array(
    'page callback' => 'salsa_advocacy_redirect_index',
    'page arguments' => array(),
    'access arguments' => array('view salsa_action'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Page callback for the index page, Salsa does a redirect to this page in case
 * of an error.
 */
function salsa_advocacy_redirect_index() {
  drupal_goto('salsa/action/' . $_GET['action_KEY']);
}

/**
 * Implements hook_theme().
 */
function salsa_advocacy_theme() {
  return array(
    'salsa_advocacy_actions_list' => array(
      'template' => 'salsa_advocacy_actions_list',
      'path' => drupal_get_path('module', 'salsa_advocacy') . '/theme',
      'variables' => array(
        'actions' => NULL,
      ),
    ),
    'salsa_advocacy_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Page callback that displays a list of active petitions.
 */
function salsa_advocacy_actions_list() {
  return theme('salsa_advocacy_actions_list', array('actions' => array_reverse(entity_load('salsa_action'))));
}

/**
 * Salsa petition form callback.
 */
function salsa_advocacy_petition_form($form, &$form_state, $action) {
  $form_state['salsa_object'] = $action;
  $form_state['supporter'] = salsa_entity_get_supporter();

  // Petition content
  $action_content = entity_load('salsa_action_content', FALSE, array('action_KEY' => $action->action_KEY));
  $action_content = reset($action_content);
  if (!$action_content) {
    return array();
  }
  $action_content_detail = entity_load('salsa_action_content_detail', FALSE, array('action_content_KEY' => $action_content->action_content_KEY));
  $action_content_detail = reset($action_content_detail);
  if ($action_content_detail->Recommended_Content) {
    // @todo For some reason petition content are highlighted on public page,
    // so I added the prefix and suffix, but it can be removed if there is no need.
    $form['Recommended_Content'] = array(
      '#type' => 'item',
      '#markup' => $action_content_detail->Recommended_Content,
      '#prefix' => '<div class="petitionContent">',
      '#suffix' => '</div>',
    );
  }

  salsa_entity_supporter_fieldset($form, $form_state, 'salsa_advocacy_petition_form');

  // Groups checkboxes.
  $optionally_add_to_groups_KEYS = salsa_entity_string_explode($action->optionally_add_to_groups_KEYS);
  if (!empty($optionally_add_to_groups_KEYS)) {
    $groups = entity_load('salsa_groups', $optionally_add_to_groups_KEYS);
    $groups_options = array();
    foreach ($groups as $key => $group) {
      $groups_options[$key] = $group->Group_Name;
    }

    $groups_default_value = array();
    if (isset($form_state['supporter']->supporter_KEY)) {
      $supporter_groups = entity_load('salsa_supporter_groups', FALSE, array('supporter_KEY' => $form_state['supporter']->supporter_KEY));
      foreach ($supporter_groups as $supporter_group) {
        $groups_default_value[] = $supporter_group->groups_KEY;
      }
    }
    else {
      $groups_default_value = array_keys($groups_options);
    }

    $form['Groups']['optionally_add_to_groups_KEYS'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Add me to the following list(s):'),
      '#options' => $groups_options,
      '#default_value' => $groups_default_value,
    );
  }

  // Comment Question.
  if ($action->Allow_Comments == 'true') {
    $comment_title = $action->Comment_Question ? t($action->Comment_Question) : '';
    $form['Comment'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($comment_title),
    );
  }

  // Allow Anonymous petitions.
  if ($action->Allow_Anonymous == 'true') {
    $form['Anonymous'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display in list as Anonymous'),
    );
  }

  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  // Signature Goal
  if ($action->Signature_Goal) {
    $form['Signature_Goal'] = array(
      '#type' => 'item',
      '#markup' => t('This petition has a goal of !Signature_Goal signatures', array('!Signature_Goal' => '<strong>' . $action->Signature_Goal . '</strong>')),
    );
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'salsa_supporter_action');
  $query->propertyCondition('action_KEY', $action->action_KEY);
  $query->propertyOrderBy('Date_Created', 'DESC');
  $query->pager(25);
  $signatures = $query->execute();
  $signatures = $signatures['salsa_supporter_action'];

  // Signatures list.
  global $pager_total_items, $pager_page_array;
  $total = $pager_total_items[$query->pager['element']];
  if (!empty($signatures) && (empty($action->Signature_Minimum_for_Display) || $action->Signature_Minimum_for_Display < $total)) {
    if ($action->Signatures == 'Show number of signers' || $action->Signatures == 'Show number and most recent signers') {
      $form['Signatures_Count'] = array(
        '#type' => 'item',
        '#markup' => format_plural($total, '@count total signer.', '@count total signers.'),
        '#prefix' => '<div class="signer-count">',
        '#suffix' => '</div>',
      );
    }
    if ($action->Signatures == 'Show number and most recent signers') {
      $supporters = array();
      $supporter_action_comments = array();
      foreach ($signatures as &$signature) {
        if ($signature->supporter_KEY && !array_key_exists($signature->supporter_KEY, $supporters)) {
          $supporters[$signature->supporter_KEY] = $signature->supporter_KEY;
        }
        if ($signature->supporter_action_comment_KEY) {
          $supporter_action_comments[$signature->supporter_action_comment_KEY] = $signature->supporter_action_comment_KEY;
        }
      }

      $supporters = entity_load('salsa_supporter', $supporters);
      $supporter_action_comments = entity_load('salsa_supporter_action_comment', $supporter_action_comments);

      // Calculate the starting number to count down.
      $number = $total - $pager_page_array[$query->pager['element']] * 25;
      $form['Signatures'] = array(
        '#type' => 'item',
        '#markup' => salsa_advocacy_build_signatures_table($signatures, $supporters, $supporter_action_comments, $number),
      );

      $form['pager']['#markup'] = theme('pager');
    }
  }

  return $form;
}

/**
 * A function that returns the signatures table.
 */
function salsa_advocacy_build_signatures_table($signatures, $supporters, $supporter_action_comments, $number) {
  $header = array(t('Number'), t('Date'), t('Name'), t('Location'), t('Comment Question'));
  $rows = array();

  foreach ($signatures as $signature) {
    // Prepare row data.
    $date = t('@timespan ago', array('@timespan' => format_interval(REQUEST_TIME - strtotime($signature->Last_Modified), 1)));
    $name = $signature->Anonymous || !isset($supporters[$signature->supporter_KEY]) ? t('Anonymous') : $supporters[$signature->supporter_KEY]->First_Name . ' ' . $supporters[$signature->supporter_KEY]->Last_Name;
    $location = '';
    if (isset($supporters[$signature->supporter_KEY])) {
      $location_delimiter = $supporters[$signature->supporter_KEY]->City && $supporters[$signature->supporter_KEY]->State ? ', ' : '';
      $location = $supporters[$signature->supporter_KEY]->City . $location_delimiter . $supporters[$signature->supporter_KEY]->State;
    }
    $comment = isset($supporter_action_comments[$signature->supporter_action_comment_KEY]->Comment) ? $supporter_action_comments[$signature->supporter_action_comment_KEY]->Comment : '';

    $rows[] = array($number, $date, $name, $location, $comment);
    $number--;
  }

  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => ('No signers yet.')));
}

/**
 * Salsa Petition form validate callback.
 */
function salsa_advocacy_petition_form_validate($form, &$form_state) {
  // Email validation
  if (isset($form['Supporter_Info']['Email']) && !valid_email_address($form_state['values']['Email'])) {
    form_set_error('Email', t('The e-mail address you specified is not valid.'));
  }
}

/**
 * Salsa Petition form submit callback.
 */
function salsa_advocacy_petition_form_submit($form, &$form_state) {
  // Create a new one or update existing supporter.
  salsa_entity_supporter_fieldset_submit($form, $form_state);

  // Save comments, if any.
  if (!empty($form_state['values']['Comment'])) {
    $supporter_action_comment = new SalsaEntity(array(), 'salsa_supporter_action_comment');
    $supporter_action_comment->organization_KEY = $form_state['salsa_object']->organization_KEY;
    $supporter_action_comment->action_KEY = $form_state['salsa_object']->action_KEY;
    $supporter_action_comment->Comment = $form_state['values']['Comment'];
    $supporter_action_comment->save();
  }

  // Connect supporter with action and comment.
  $supporter_action = new SalsaEntity(array(), 'salsa_supporter_action');
  $supporter_action->organization_KEY = $form_state['salsa_object']->organization_KEY;
  $supporter_action->supporter_KEY = $form_state['supporter']->supporter_KEY;
  $supporter_action->action_KEY = $form_state['salsa_object']->action_KEY;
  if (isset($supporter_action_comment->supporter_action_comment_KEY)) {
    $supporter_action->supporter_action_comment_KEY = $supporter_action_comment->supporter_action_comment_KEY;
  }
  if (!empty($form_state['values']['Anonymous'])) {
    $supporter_action->Anonymous = '1';
  }
  $supporter_action->save();

  // Subscribe supporter to the groups.
  $groups = entity_load('salsa_supporter_groups', FALSE, array('supporter_KEY' => $_SESSION['salsa_entity']['supporter_KEY']));
  $petition_groups = array_merge(salsa_entity_string_explode($form_state['salsa_object']->add_to_groups_KEYS), salsa_entity_string_explode($form_state['salsa_object']->optionally_add_to_groups_KEYS));
  $groups_to_delete = array();
  foreach ($groups as $group) {
    if (in_array($group->groups_KEY, $petition_groups)) {
      $groups_to_delete[] = $group->supporter_groups_KEY;
    }
  }

  $add_to_groups_KEYS = (array)salsa_entity_string_explode($form_state['salsa_object']->add_to_groups_KEYS);
  $optionally_add_to_groups_KEYS = isset($form_state['values']['optionally_add_to_groups_KEYS']) ? array_filter($form_state['values']['optionally_add_to_groups_KEYS']) : array();
  $group_KEYS = array_unique(array_merge($add_to_groups_KEYS, $optionally_add_to_groups_KEYS));
  if (!empty($group_KEYS)) {
    salsa_entity_add_supporter_groups($form_state['supporter'], $group_KEYS);
  }

  // Redirect to the appropriate page.
  if ($form_state['salsa_object']->redirect_path) {
    if (strpos($form_state['salsa_object']->redirect_path, 'tell_a_friend_KEY') !== FALSE) {
      $tmp = explode('=', substr($form_state['salsa_object']->redirect_path, strpos($form_state['salsa_object']->redirect_path, 'tell_a_friend_KEY')));
      $form_state['redirect'] = 'salsa/tell_a_friend/' . $tmp[1];
    }
    elseif (strpos($form_state['salsa_object']->redirect_path, 'donate_page_KEY') !== FALSE) {
      $tmp = explode('=', substr($form_state['salsa_object']->redirect_path, strpos($form_state['salsa_object']->redirect_path, 'donate_page_KEY')));
      $form_state['redirect'] = 'salsa/donate_page/' . $tmp[1];
    }
    else {
      $form_state['redirect'] = $form_state['salsa_object']->redirect_path;
    }
  }
  elseif ($form_state['salsa_object']->Thank_You_Text) {
    $_SESSION['Thank_You_Text'] = $form_state['salsa_object']->Thank_You_Text;
  }
  else {
    $_SESSION['Thank_You_Text'] = t('Thank you for taking action!');
  }
}

/**
 * Salsa targeted action form callback.
 */
function salsa_advocacy_targeted_form($form, &$form_state, $action) {
  $action_content = reset(entity_load('salsa_action_content', FALSE, array('action_KEY' => $action->action_KEY)));
  $action_content_detail = reset(entity_load('salsa_action_content_detail', FALSE, array('action_content_KEY' => $action_content->key)));
  $action_target = reset(entity_load('salsa_action_target', FALSE, array('action_KEY' => $action->action_KEY)));
  $action_target_keys = salsa_entity_string_explode($action_target->target_KEYS);

  // Recipients.
  if (!empty($action_target_keys)) {

    // Flash message JS.
    $form['flash_message_js'] = array(
      '#markup' => '<script type="text/javascript" src="' . variable_get('salsa_api_url') . '/api/flashMessageJS.sjs"></script>',
    );

    $form['recipients'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('recipients_list')
      ),
    );

    $recipients = entity_load('salsa_recipient', $action_target_keys);
    foreach ($action_target_keys as $item) {
      // Add target hidden fields.
      $form[$item]['target_type'] = array(
        '#type' => 'hidden',
        '#value' => $recipients[$item]->object,
      );

      $form[$item]['target_key'] = array(
        '#type' => 'hidden',
        '#value' => $recipients[$item]->recipient_KEY,
      );

      $form[$item]['target_method'] = array(
        '#type' => 'hidden',
        '#value' => $action_target->method,
      );

      $form[$item]['target_subjectName'] = array(
        '#type' => 'hidden',
        '#value' => 'Subject' . $action_content->key,
      );

      $form[$item]['target_contentName'] = array(
        '#type' => 'hidden',
        '#value' => 'Content' . $action_content->key,
      );

      if ($recipients[$item]->image_url) {
        $image_vars = array(
          'path' => $recipients[$item]->image_url,
          'attributes' => array('class' => 'photo'),
        );
        $form['recipients']['image_url'] = array(
          '#type' => 'item',
          '#markup' => theme('image', $image_vars),
        );
      }

      if ($recipients[$item]->given_name || $recipients[$item]->family_name) {
        $form['recipients']['Name' . $recipients[$item]->recipient_KEY] = array(
          '#type' => 'item',
          '#markup' => '<h3>' . trim($recipients[$item]->given_name . ' ' . $recipients[$item]->family_name) . '</h3>',
        );
      }

      if ($recipients[$item]->organization) {
        $form['recipients']['Organization' . $recipients[$item]->recipient_KEY] = array(
          '#type' => 'item',
          '#markup' => '<div class="organization">' . $recipients[$item]->organization . '</div>',
        );
      }

      if ($recipients[$item]->phone) {
        $form['recipients']['Phone' . $recipients[$item]->recipient_KEY] = array(
          '#type' => 'item',
          '#markup' => '<div class="phone">' . t('Phone:') . '&nbsp;' . $recipients[$item]->phone . '</div>',
        );
      }

      if ($recipients[$item]->email) {
        $form['recipients']['Email' . $recipients[$item]->recipient_KEY] = array(
          '#type' => 'item',
          '#markup' => '<div class="email">' . t('E-mail:') . '&nbsp;' . $recipients[$item]->email . '</div>',
        );
      }

      if ($recipients[$item]->fax) {
        $form['recipients']['Fax' . $recipients[$item]->recipient_KEY] = array(
          '#type' => 'item',
          '#markup' => '<div class="fax">' . t('Fax:') . '&nbsp;' . $recipients[$item]->fax . '</div>',
        );
      }
    }

    // Action content fieldset.
    $form['action_content'] = array(
      '#type' => 'fieldset',
      '#title' => $action_content->Name,
    );

    $form['action_content']['Subject' . $action_content->key] = array(
      '#type' => 'textfield',
      '#title' => t('Subject:'),
      '#default_value' => $action_content_detail->Recommended_Subject,
    );

    $form['action_content']['Content' . $action_content->key] = array(
      '#type' => 'textarea',
      '#title' => t('Your Letter:'),
      '#default_value' => $action_content_detail->Recommended_Content,
    );

    // Supporter info fieldset.
    $form_state['salsa_object'] = $action;
    $form_state['supporter'] = salsa_entity_get_supporter();

    salsa_entity_supporter_fieldset($form, $form_state, 'salsa_advocacy_targeted_form');

    // Groups.
    $optionally_add_to_groups_KEYS = salsa_entity_string_explode($action->optionally_add_to_groups_KEYS);
    if (!empty($optionally_add_to_groups_KEYS)) {
      $all_groups = entity_load('salsa_groups');
      $groups_options = array();
      foreach ($all_groups as $key => $group) {
        if (in_array($key, $optionally_add_to_groups_KEYS)) {
          $groups_options[$key] = $group->Group_Name;
        }
      }

      $groups_default_value = array();
      if (isset($form_state['supporter']->supporter_KEY)) {
        $supporter_groups = entity_load('salsa_supporter_groups', FALSE, array('supporter_KEY' => $form_state['supporter']->supporter_KEY));
        foreach ($supporter_groups as $supporter_group) {
          $groups_default_value[] = $supporter_group->groups_KEY;
        }
      }
      else {
        $groups_default_value = array_keys($groups_options);
      }

      $form['Groups'] = array(
        '#type' => 'fieldset',
        '#title' => t('Groups'),
      );

      $form['Groups']['groups_KEYS'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Add me to the following list(s):'),
        '#options' => $groups_options,
        '#default_value' => $groups_default_value,
      );
    }

    // Add hidden fields.
    salsa_advocacy_targeted_form_hidden_fields($form, $form_state);

    // Submit this form directly to salsa page.
    $form['#action'] = variable_get('salsa_api_url') . '/o/' . $action->organization_KEY . '/action/wrapperProcessAction2.jsp';

    // Submit button.
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send'),
    );
  }
  else {
    $form['No_Targets'] = array(
      '#type' => 'item',
      '#markup' => t('Sorry, there are no targets available in your area.'),
    );
  }

  return $form;
}

/**
 * Hidden fields for targeted actions form.
 */
function salsa_advocacy_targeted_form_hidden_fields(&$form, $form_state) {
  $form['action_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->action_KEY,
  );

  $form['organization_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->organization_KEY,
  );

  $form['chapter_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->chapter_KEY,
  );

  $form['table'] = array(
    '#type' => 'hidden',
    '#value' => 'supporter',
  );

  $form['key'] = array(
    '#type' => 'hidden',
    '#value' => isset($form_state['supporter']->supporter_KEY) ? $form_state['supporter']->supporter_KEY : 0,
  );

  $form['required'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->Required,
  );

  $form['PRIVATE_Zip_Plus_4'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );

  $form['email_trigger_KEYS'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->email_trigger_KEYS,
  );

  $form['link'] = array(
    '#type' => 'hidden',
    '#value' => 'action',
  );

  $form['linkKey'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->action_KEY,
  );

  $form['redirect'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->redirect_path,
  );
}

/**
 * Targeted actions list.
 */
function salsa_advocacy_targeted_actions_form($form, &$form_state) {
  // Fetch filters.
  if ($cache = cache_get('salsa_advocacy_filters')) {
    $filters = $cache->data;
  }
  else {
    $filters = salsa_advocacy_build_filter_array();
    cache_set('salsa_advocacy_filters', $filters, 'cache');
  }

  // Fetch mapping array.
  if ($cache = cache_get('salsa_advocacy_mapping')) {
    $mapping = $cache->data;
  }
  else {
    $mapping = salsa_advocacy_fetch_mapping_array();
    cache_set('salsa_advocacy_mapping', $mapping, 'cache');
  }

  $filtered_actions = salsa_advocacy_fetch_filtered_actions($filters, $mapping);
  $form_state['filters'] = $filters;

  if (!empty($filters)) {
    foreach ($filters as $name => $filter) {
      $form[$name] = array(
        '#type' => 'select',
        '#title' => $filter['label'],
        '#options' => $filter['options'],
        '#default_value' => isset($_SESSION['salsa_advocacy_filter'][$name]) && isset($filter['options'][$_SESSION['salsa_advocacy_filter'][$name]]) ? $_SESSION['salsa_advocacy_filter'][$name] : $filter['default_value'],
        '#access' => count($filter['options']) > 1,
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Apply'),
    );

    $form['actions_list'] = array(
      '#type' => 'item',
      '#markup' => salsa_advocacy_build_actions_table($filters, $filtered_actions),
    );
  }
  else {
    $form['no_filter'] = array(
      '#type' => 'item',
      '#markup' => t('There is no filter enabled.'),
    );
  }

  return $form;
}

/**
 * Submit handler for targeted actions form.
 */
function salsa_advocacy_targeted_actions_form_submit($form, &$form_state) {
  $_SESSION['salsa_advocacy_filter'] = array();
  foreach ($form_state['filters'] as $name => $filters) {
    $_SESSION['salsa_advocacy_filter'][$name] = $form_state['values'][$name];
  }
}

/**
 * Function that returns a specific type of actions.
 *
 * @param $type
 *   String that we looking for in style_path (petition or targeted).
 * @return $actions
 *   Array of actions.
 */
function salsa_advocacy_fetch_actions($type) {
  $actions = &drupal_static(__FUNCTION__, array());

  if (empty($actions)) {
    if ($cache = cache_get('salsa_advocacy_' . $type . '_actions')) {
      $actions = $cache->data;
    }
    else {
      $all_actions = entity_load('salsa_action');
      if (!empty($all_actions)) {
        foreach ($all_actions as $action) {
          if (strpos($action->style_path, $type) !== FALSE) {
            $actions[] = $action;
          }
        }
      }
      cache_set('salsa_advocacy_' . $type . '_actions', $actions, 'cache');
    }
  }

  return $actions;
}

/**
 * Function that returns TA custom fields.
 */
function salsa_advocacy_fetch_custom_fields($actions = array()) {
  $custom_fields = &drupal_static(__FUNCTION__, array());

  if (empty($custom_fields)) {
    if ($cache = cache_get('salsa_advocacy_custom_fields')) {
      $custom_fields = $cache->data;
    }
    else {
      if ($actions_custom_fields = salsa_entity_fetch_custom_fields('action')) {
        $custom_fields_settings = variable_get('salsa_advocacy_custom_fields', array());

        // Default settings.
        if (empty($custom_fields_settings)) {
          $weight = 1;
          foreach ($actions_custom_fields as $custom_field) {
            $custom_fields_settings[$custom_field->name] = array(
              'weight' => $weight,
              'fixed_value' => $custom_field->type == 'enum' ? FALSE : TRUE,
              'default_value' => '',
              'default_value_callback' => '',
              'enabled' => FALSE,
            );
            $weight++;
          }
          variable_set('salsa_advocacy_custom_fields', $custom_fields_settings);
        }

        $custom_fields = array();
        foreach ($actions_custom_fields as $custom_field) {
          if (isset($custom_fields_settings[$custom_field->name])) {
            $settings = $custom_fields_settings[$custom_field->name];
          }
          else {
            // It is necessary to add default params for new custom field items,
            // which was added through salsa backend, to prevent illegal operation error.
            $custom_fields_settings[$custom_field->name] = array(
              'weight' => 0,
              'fixed_value' => $custom_field->type == 'enum' ? FALSE : TRUE,
              'default_value' => '',
              'default_value_callback' => '',
              'enabled' => FALSE,
            );

            // Update configuration.
            variable_set('salsa_advocacy_custom_fields', $custom_fields_settings);

            $settings = $custom_fields_settings[$custom_field->name];
          }

          $custom_fields[$custom_field->name] = array(
            'key' => $custom_field->key,
            'label' => $custom_field->label,
            'options' => $custom_field->type == 'enum' ? salsa_advocacy_fetch_custom_field_options($custom_field->custom_column_KEY) : array(),
            ) + $settings;
        }

        // Sort array by weight.
        uasort($custom_fields, 'drupal_sort_weight');

        if (empty($actions)) {
          $actions = salsa_advocacy_fetch_actions('targeted');
        }

        // Display only custom fields that are attached to actions.
        foreach ($custom_fields as $name => $custom_field) {
          $used = FALSE;
          foreach ($actions as $action) {
            if (isset($action->$name)) {
              $used = TRUE;
            }
          }
          if (!$used) {
            unset($custom_fields[$name]);
          }
        }

        // Display only custom field options that are attached to actions.
        foreach ($custom_fields as $name => &$custom_field) {
          foreach ($custom_field['options'] as $key => $value) {
            $used_option = FALSE;
            foreach ($actions as $action) {
              if ($action->$name == $key) {
                $used_option = TRUE;
              }
            }
            if (!$used_option) {
              unset($custom_field['options'][$key]);
            }
          }
        }
      }
      cache_set('salsa_advocacy_custom_fields', $custom_fields, 'cache');
    }
  }

  return $custom_fields;
}

/**
 * Function that returns TA custom field options.
 */
function salsa_advocacy_fetch_custom_field_options($custom_column_KEY) {
  $options = array();
  $field_options = entity_load('salsa_custom_column_option', FALSE, array('custom_column_KEY' => $custom_column_KEY));
  if (!empty($field_options)) {
    foreach ($field_options as $option) {
      if ($option->isDisplayed == 'true') {
        $options[$option->value] = $option->label;
      }
    }
  }
  return $options;
}

/**
 * Function that builds and returns filter array.
 */
function salsa_advocacy_build_filter_array() {
  $actions = salsa_advocacy_fetch_actions('targeted');
  $custom_fields = salsa_advocacy_fetch_custom_fields($actions);

  $filter = array();
  if (!empty($custom_fields)) {
    foreach ($custom_fields as $name => $custom_field) {
      if (!$custom_field['fixed_value'] && $custom_field['enabled']) {
        $filter[$name] = array(
          'label' => $custom_field['label'],
          'options' => salsa_advocacy_fetch_used_options($name, $custom_field['options'], $actions),
          'default_value' => $custom_field['default_value'],
        );
      }
    }
  }
  return $filter;
}

/**
 * Function that returns only option values that matching actions.
 */
function salsa_advocacy_fetch_used_options($name, $options, $actions) {
  $matching_options = array();
  foreach ($actions as $action) {
    foreach ($options as $key => $label) {
      if ($action->$name == $key) {
        $matching_options[$key] = $label;
      }
    }
  }
  return $matching_options;
}

/**
 * Function that builds mapping array.
 */
function salsa_advocacy_fetch_mapping_array() {
  $actions = salsa_advocacy_fetch_actions('targeted');
  $custom_fields = salsa_advocacy_fetch_custom_fields($actions);

  $mapping = array();
  if (!empty($custom_fields) && !empty($actions)) {
    foreach ($actions as $action) {
      foreach ($custom_fields as $name => $custom_field) {
        if ($custom_field['fixed_value'] && isset($action->$name) && $action->$name == $custom_field['default_value']) {
          $mapping['fixed'][$name][] = $action->action_KEY;
        }
        if (!empty($custom_field['options'])) {
          foreach ($custom_field['options'] as $key => $value) {
            if (isset($action->$name) && $action->$name == $key) {
              $mapping[$name][$key][] = $action->action_KEY;
            }
          }
        }
      }
    }
  }
  return $mapping;
}

/**
 * Function that returns a search result.
 */
function salsa_advocacy_fetch_filtered_actions($filters, $mapping) {
  $intersect = array();
  if (!empty($filters) && !empty($mapping)) {
    // @todo This should be checked, I'm not sure about project request (confuses me).
    if (!empty($mapping['fixed'])) {
      foreach ($mapping['fixed'] as $fixed) {
        $intersect[] = $fixed;
      }
    }

    foreach ($filters as $name => $filter) {
      if (isset($_SESSION['salsa_advocacy_filter'][$name])) {
        $intersect[] = $mapping[$name][$_SESSION['salsa_advocacy_filter'][$name]];
      }
      else {
        $intersect[] = $mapping[$name][$filter['default_value']];
      }
    }
    return call_user_func_array('array_intersect', $intersect);
  }
  return $intersect;
}

/**
 * Function that builds actions list table.
 */
function salsa_advocacy_build_actions_table($filters, $action_KEYs) {
  $actions = salsa_advocacy_fetch_actions('targeted');
  $filtered_actions = array();
  foreach ($actions as $action) {
    if (in_array($action->action_KEY, $action_KEYs)) {
      $filtered_actions[$action->action_KEY] = $action;
    }
  }

  // Build header array.
  $header[] = t('Recipients');
  foreach ($filters as $filter) {
    $header[] = t(ucfirst($filter['label']));
  }
  $header[] = '';

  // Build rows array.
  $index = 1;
  $rows = array();
  foreach ($action_KEYs as $action_KEY) {
    $rows[$index][] = array(
      'data' => salsa_advocacy_fetch_action_targets($action_KEY),
      'class' => array('col-recipient'),
    );
    foreach ($filters as $name => $filter) {
      $rows[$index][] = array(
        'data' => $filter['options'][$filtered_actions[$action_KEY]->$name],
        'class' => array('col-filter-' . $name),
      );
    }
    $rows[$index][] = array(
      'data' => l(t('Take action'), 'salsa/action/' . $filtered_actions[$action_KEY]->action_KEY),
      'class' => array('col-link')
    );
    $index++;
  }

  // Build table.
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Function that returns targets for specified action.
 */
function salsa_advocacy_fetch_action_targets($action_key) {
  $action_target = reset(entity_load('salsa_action_target', FALSE, array('action_KEY' => $action_key)));
  $action_target_keys = salsa_entity_string_explode($action_target->target_KEYS);

  $targets = '';
  if (!empty($action_target_keys)) {
    $recipients = entity_load('salsa_recipient', $action_target_keys);
    foreach ($action_target_keys as $target_key) {
      if (isset($recipients[$target_key])) {
        $name_delimiter = isset($recipients[$target_key]->given_name) && isset($recipients[$target_key]->family_name) ? ' ' : '';
        $targets .= '<strong>' . $recipients[$target_key]->given_name . $name_delimiter . $recipients[$target_key]->family_name . '</strong>';
        if (isset($recipients[$target_key]->organization)) {
          $targets .= ' (' . $recipients[$target_key]->organization . ')';
        }
        $targets .= "<br />";
      }
    }
  }
  return $targets;
}

/**
 * Advocacy settings form.
 *
 * @return
 *   A form array set for theming by theme_salsa_advocacy_settings_form()
 */
function salsa_advocacy_settings_form($form, &$form_state) {
  $form['items']['#tree'] = TRUE;

  // Fetch custom fields.
  $result = salsa_advocacy_fetch_custom_fields();

  // Iterate through each item.
  $index = 1;
  foreach ($result as $name => $item) {
    // Create a form entry for this item.
    $form['items'][$index] = array(
      'label' => array(
        '#markup' => $name,
      ),
      'fixed_value' => array(
        '#type' => 'item',
        '#markup' => $item['fixed_value'] ? t('Yes') : t('No'),
      ),
      'weight' => array(
        '#type' => 'weight',
        '#default_value' => $item['weight'],
        '#delta' => 10,
        '#title-display' => 'invisible',
      ),
      'enabled' => array(
        '#type' => 'checkbox',
        '#default_value' => $item['enabled'],
      ),
    );

    if ($item['fixed_value']) {
      $form['items'][$index] += array(
        'default_value' => array(
          '#type' => 'textfield',
          '#default_value' => $item['default_value'],
        ),
      );
    }
    else {
      $form['items'][$index] += array(
        'default_value' => array(
          '#type' => 'select',
          '#options' => $item['options'],
          '#default_value' => $item['default_value'],
        ),
      );
    }

    // Add hidden fileds.
    $form['items'][$index] += array(
      'name' => array(
        '#type' => 'hidden',
        '#value' => $name,
      ),
      'fixed' => array(
        '#type' => 'hidden',
        '#value' => $item['fixed_value'],
      ),
    );

    $index++;
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save Changes'));

  return $form;
}

/**
 * Theme callback for the salsa_advocacy_settings_form form.
 */
function theme_salsa_advocacy_settings_form($variables) {
  $form = $variables['form'];

  $rows = array();
  foreach (element_children($form['items']) as $id) {
    $form['items'][$id]['weight']['#attributes']['class'] = array('item-weight');

    $class = array('draggable');
    $indent = theme('indentation', array('size' => 0));

    $rows[] = array(
      'data' => array(
        $indent . drupal_render($form['items'][$id]['label']),
        drupal_render($form['items'][$id]['fixed_value']),
        drupal_render($form['items'][$id]['weight']),
        drupal_render($form['items'][$id]['default_value']),
        drupal_render($form['items'][$id]['enabled']),
      ),
      'class' => $class,
    );
  }

  $header = array(t('Name'), t('Fixed'), t('Weight'), t('Default value'), t('Enabled'));
  $table_id = 'actions-list-table';

  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id)));
  $output .= drupal_render_children($form);

  drupal_add_tabledrag($table_id, 'order', 'sibling', 'item-weight');

  return $output;
}

/**
 * Submit handler for advocacy settings form.
 */
function salsa_advocacy_settings_form_submit($form, &$form_state) {
  $custom_fields_settings = array();
  foreach ($form_state['values']['items'] as $item) {
    $custom_fields_settings[$item['name']] = array(
      'weight' => $item['weight'],
      'fixed_value' => $item['fixed'],
      'default_value' => $item['default_value'],
      'default_value_callback' => '',
      'enabled' => $item['enabled'] ? TRUE : FALSE,
    );
  }
  variable_set('salsa_advocacy_custom_fields', $custom_fields_settings);
  cache_clear_all('salsa_advocacy_mapping', 'cache');
  cache_clear_all('salsa_advocacy_filters', 'cache');
  cache_clear_all('salsa_advocacy_custom_fields', 'cache');
  drupal_set_message(t('Settings have been saved.'));
}
