<?php

/**
 * @file
 * Module that allow users to manage their own supporter account.
 */

define('EMAIL_PREFERENCE_NONE', FALSE);
define('EMAIL_PREFERENCE_HTML', 'HTML Email');
define('EMAIL_PREFERENCE_TEXT', 'Text Email');

define('SALSA_PROFILE_SETTINGS_URL', 'admin/config/services/salsa/profile');

/**
 * Implements hook_permission().
 */
function salsa_profile_permission() {
  return array(
    'edit own supporter profile' => array(
      'title' => t('Edit Own Supporter Profile'),
    ),
    'edit all supporter profiles' => array(
      'title' => t('Edit All supporter Profiles'),
    ),
  );
}

/**
 * Implements hook_access().
 */
function salsa_profile_access($account) {
  if (!user_access('edit all supporter profiles')) {
    global $user;
    if ($account->uid == $user->uid) {
      return user_access('edit own supporter profile');
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_field_access().
 */
function salsa_profile_field_access($op, $field, $entity_type, $entity) {
  // Same for both operations (view/edit).
  if ($field['field_name'] == 'field_salsa_supporter_key') {
    return user_access('administer salsa');
  }
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function salsa_profile_menu() {
  $items['user/%user/salsa_profile'] = array(
    'title' => 'Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_profile_form', 1),
    'access callback' => 'salsa_profile_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items[SALSA_PROFILE_SETTINGS_URL] = array(
    'title' => 'Salsa Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_profile_system_settings'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_LOCAL_TASK,
  );
  $items[SALSA_PROFILE_SETTINGS_URL . '/custom_fields/add'] = array(
    'title' => 'Add a custom field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_profile_custom_field_form'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_CALLBACK,
  );
  $items[SALSA_PROFILE_SETTINGS_URL . '/custom_fields/edit'] = array(
    'title' => 'Edit custom field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_profile_custom_field_form'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_CALLBACK,
  );
  $items[SALSA_PROFILE_SETTINGS_URL . '/custom_fields/delete'] = array(
    'title' => 'Confirm delete custom fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_profile_custom_field_delete_form'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_CALLBACK,
  );
  $items[SALSA_PROFILE_SETTINGS_URL . '/custom_fields/option'] = array(
    'title' => 'Enable / Disable custom field option',
    'page callback' => 'salsa_profile_custom_field_option_action',
    'page arguments' => array(),
    'access arguments' => array('administer salsa'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Salsa profile form.
 */
function salsa_profile_form($form, &$form_state, $account) {
  $form_state['account'] = $account;
  $form_state['supporter'] = $supporter = salsa_profile_get_supporter($account);

  // Contact Informations.
  $form['contact_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contact Information'),
  );
  $form['contact_information']['Title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $supporter->Title,
  );
  $form['contact_information']['First_Name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#default_value' => $supporter->First_Name,
  );
  $form['contact_information']['Last_Name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#default_value' => $supporter->Last_Name,
  );
  $form['contact_information']['Phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $supporter->Phone,
  );
  $form['contact_information']['Cell_Phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Cell Phone'),
    '#default_value' => $supporter->Cell_Phone,
  );

  // Address Informations.
  $form['address_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Address Information'),
  );
  $form['address_information']['Street'] = array(
    '#type' => 'textfield',
    '#title' => t('Street'),
    '#default_value' => $supporter->Street,
  );
  $form['address_information']['Street_2'] = array(
    '#type' => 'textfield',
    '#title' => t('Street 2'),
    '#default_value' => $supporter->Street_2,
  );
  $form['address_information']['Street_3'] = array(
    '#type' => 'textfield',
    '#title' => t('Street 3'),
    '#default_value' => $supporter->Street_3,
  );
  $form['address_information']['City'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $supporter->City,
  );
  // @todo Use select list for Country/State/Province fields.
  $form['address_information']['Country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#default_value' => $supporter->Country,
    '#options' => country_get_list(),
    '#empty_value' => '',
    '#empty_option' => t('- Choose country -'),
    '#required' => TRUE,
  );
  $form['address_information']['State'] = array(
    '#type' => 'textfield',
    '#title' => t('State/Province'),
    '#default_value' => $supporter->State,
  );
  $form['address_information']['Zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip/Postal Code'),
    '#default_value' => $supporter->Zip,
  );
  $form['address_information']['PRIVATE_Zip_Plus_4'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Extension'),
    '#description' => t('(only enter the 4 number zip extension.)'),
    '#default_value' => $supporter->PRIVATE_Zip_Plus_4,
  );
  $form['address_information']['Organization'] = array(
    '#type' => 'textfield',
    '#title' => t('Organization'),
    '#default_value' => $supporter->Organization,
  );
  $form['address_information']['Occupation'] = array(
    '#type' => 'textfield',
    '#title' => t('Occupation'),
    '#default_value' => $supporter->Occupation,
  );

  // Other Information
  salsa_profile_custom_fields($form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit changes'),
  );

  return $form;
}

/**
 * A function that adds custom fields to the form.
 *
 * @todo Custom fields should be sorted.
 * @todo Add datepicker for date, datetime and timestamp fields.
 */
function salsa_profile_custom_fields(&$form, &$form_state) {
  $entities = entity_load('salsa_database_table', FALSE, array('table_name' => 'supporter'));
  $database_table = reset($entities);
  $custom_fields = entity_load('salsa_custom_column', FALSE, array('database_table_KEY' => $database_table->database_table_KEY));
  $form_state['custom_fields'] = array();
  foreach ($custom_fields as $field) {
    if ($field->Display_To_Supporters == 'true') {
      $form_state['custom_fields'][] = $field;
    }
  }

  if (!empty($form_state['custom_fields'])) {
    $form['other_information'] = array(
      '#type' => 'fieldset',
      '#title' => t('Other Information'),
    );

    foreach ($form_state['custom_fields'] as $field) {
      if ($field->type == 'varchar' || $field->type == 'enum') {
        $options = entity_load('salsa_custom_column_option', FALSE, array('custom_column_KEY' => $field->custom_column_KEY));
        $field_options = array();
        if (!empty($options)) {
          foreach ($options as $option) {
            $field_options[$option->label] = $option->value;
          }
        }
      }

      $display_name = isset($field->Display_Name) ? $field->Display_Name : $field->label;
      $form['other_information'][$field->name] = array(
        '#title' => $display_name,
        '#default_value' => $form_state['supporter']->{$field->name},
      );

      if ($field->type == 'text' || $field->type == 'mediumtext') {
        $form['other_information'][$field->name] += array(
          '#type' => 'textarea',
        );
      }
      elseif ($field->type == 'enum' || ($field->type == 'varchar' && (!empty($field_options)))) {
        $form['other_information'][$field->name] += array(
          '#type' => 'select',
          '#options' => $field_options,
        );
      }
      elseif ($field->type == 'bool') {
        $form['other_information'][$field->name] += array(
          '#type' => 'checkbox',
        );
      }
      else if ($field->type == 'date' || $field->type == 'datetime' || $field->type == 'timestamp') {
        $form['other_information'][$field->name] += array(
          '#type' => 'date',
        );
      }
      else {
        $form['other_information'][$field->name] += array(
          '#type' => 'textfield',
        );
      }
    }
  }
}

/**
 * Salsa profile form submit.
 */
function salsa_profile_form_submit($form, &$form_state) {
  $account = $form_state['account'];
  $supporter = $form_state['supporter'];

  $supporter_info = entity_get_all_property_info('salsa_supporter');
  foreach ($supporter_info as $key => $property) {
    if (isset($form_state['values'][$key])) {
      $supporter->$key = $form_state['values'][$key];
    }
  }

  // Save custom fields.
  if (!empty($form_state['custom_fields'])) {
    foreach ($form_state['custom_fields'] as $field) {
      $key = $field->name;
      $supporter->$key = $form_state['values'][$key];
    }
  }

  $supporter->save();
}

/**
 * This function attempts to load supporter by KEY or E-mail.
 */
function salsa_profile_get_supporter($account = NULL) {
  if (!$account) {
    $account = user_load($GLOBALS['user']->uid);
  }

  if ($account->uid > 0) {
    $account = user_load($account->uid);
    if (isset($account->field_salsa_supporter_key[LANGUAGE_NONE][0]['value'])) {
      // Try to load supporter by KEY.
      $supporter = entity_load('salsa_supporter', array($account->field_salsa_supporter_key[LANGUAGE_NONE][0]['value']));
      return reset($supporter);
    }
    else {
      // Try to load supporter by email address.
      $supporter = entity_load('salsa_supporter', FALSE, array('Email' => $account->mail));
      return reset($supporter);
    }
  }
  return FALSE;
}

/**
 * Function that connects Drupal user and salsa supporter object.
 */
function salsa_profile_set_supporter($supporter, $account) {
  if ($account->uid > 0) {
    // Save drupal UID to the supporter object if enabled.
    $profile_custom_field = variable_get('salsa_profile_custom_field');
    if ($profile_custom_field && (!isset($supporter->$profile_custom_field) || $supporter->$profile_custom_field != $account->uid)) {
      $supporter->$profile_custom_field = $account->uid;
      $supporter->save();
    }

    // Add supporter_KEY to the user account if not yet.
    $account->field_salsa_supporter_key[LANGUAGE_NONE][0]['value'] = $supporter->supporter_KEY;
    user_save($account);
  }
}

/**
 * Implements hook_entity_current_supporter().
 */
function salsa_profile_salsa_entity_current_supporter() {
  global $user;
  if ($user->uid > 0) {
    return salsa_profile_get_supporter($user);
  }
}

/**
 * Implements hook_salsa_entity_supporter_set().
 */
function salsa_profile_salsa_entity_supporter_set($supporter, $account) {
  if ($account) {
    salsa_profile_set_supporter($supporter, $account);
  }
}

/**
 * Implements hook_sytem_settings().
 */
function salsa_profile_system_settings($form, &$form_state) {
  $custom_fields = salsa_entity_custom_fields('supporter');
  if ($custom_fields) {
    $options = array();
    foreach ($custom_fields as $field_name => $field) {
      $options[$field_name] = $field['label'];
    }

    $form['salsa_profile_custom_field'] = array(
      '#type' => 'select',
      '#title' => t('Drupal UID Field'),
      '#description' => t('Salsa custom field you want to use to store Drupal UID.'),
      '#options' => $options,
      '#default_value' => variable_get('salsa_profile_custom_field'),
      '#empty_option' => t('- None -'),
    );
  }

  $form['salsa_profile_read_only_supporter_fields'] = array(
    '#type' => 'checkbox',
    '#description' => t('Make all supporter fields as read only, when user is logged in and salsa supporter is assigned.'),
    '#default_value' => variable_get('salsa_profile_read_only_supporter_fields'),
  );

  // Show a list of custom fields.
  /* $form['custom_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom Fields'),
    '#collapsible' => TRUE,
  );
  $form['custom_fields']['table'] = array(
    '#type' => 'item',
    '#markup' => salsa_profile_custom_fields_table($custom_fields),
  );*/

  return system_settings_form($form);
}

/**
 * The function that builds custom fields table.
 */
function salsa_profile_custom_fields_table($custom_fields) {
  $header = array(t('Name'), t('Field Type'), t('API Name'), t('Description'), array('data' => 'Operations', 'colspan' => 2));
  $rows = array();

  foreach ($custom_fields as $field) {
    $rows[] = array($field->label, salsa_profile_get_label_of_custom_field_type($field->type), $field->name, $field->Description, l(t('edit'), SALSA_PROFILE_SETTINGS_URL . '/custom_fields/edit/' . $field->custom_column_KEY), l(t('delete'), SALSA_PROFILE_SETTINGS_URL . '/custom_fields/delete/' . $field->custom_column_KEY));
  }

  $output  = l(t('Add a custom field'), SALSA_PROFILE_SETTINGS_URL . '/custom_fields/add');
  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  return $output;
}

/**
 * Function that returns all custom field types.
 */
function salsa_profile_custom_field_types() {
  return array(
    'varchar'     => t('One line of text'),
    'text'        => t('Multiple lines of text'),
    'mediumtext'  => t('Very large text(>65,000 characters)'),
    'int'         => t('Integer (0,1,2,3....)'),
    'bool'        => t('Yes/No or True/False'),
    'float'       => t('Decimal number (1.3, 124.34)'),
    'date'        => t('Date'),
    'time'        => t('Time'),
    'datetime'    => t('Date and Time'),
    'timestamp'   => t('Date,Time, & milliseconds'),
    'enum'        => t('Picklist/List of values'),
    'percent'     => t('Percentage'),
    'currency'    => t('Currency'),
  );
}

/**
 * A function that returns the label for a specific field type.
 */
function salsa_profile_get_label_of_custom_field_type($type = FALSE) {
  if ($type) {
    $types = salsa_profile_custom_field_types();
    return $types[$type];
  }
}

/**
 * Create/Edit custom fields form callback.
 */
function salsa_profile_custom_field_form($form, &$form_state, $field_id = FALSE) {
  global $user;

  $form_state['is_full_form'] = $field_id;
  $form_state['salsa_object'] = $field_id ? entity_load_single('salsa_custom_column', $field_id) : new SalsaEntity(array(), 'salsa_custom_column');
  $form_state['supporter']    = salsa_profile_get_supporter($user);

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Reference Name'),
    '#description' => t('The internal label of the field, visible only to campaign managers.'),
    '#required' => TRUE,
    '#default_value' => isset($form_state['salsa_object']->label) ? $form_state['salsa_object']->label : '',
  );

  if ($field_id) {
    $form['name'] = array(
      '#type' => 'item',
      '#title' => t('API Name'),
      '#description' => t('The unique name of the field, used in SalsaScript and API calls. Can only contain letters, numbers, and underscores. This is non-editable once created.'),
      '#markup' => $form_state['salsa_object']->name,
    );

    $form['type'] = array(
      '#type' => 'item',
      '#title' => t('Field Type'),
      '#markup' => salsa_profile_get_label_of_custom_field_type($form_state['salsa_object']->type) . ' (' . $form_state['salsa_object']->type . ')',
    );
  }
  else {
    $form['name'] = array(
      '#type' => 'machine_name',
      '#title' => t('API Name'),
      '#description' => t('The unique name of the field, used in SalsaScript and API calls. Can only contain letters, numbers, and underscores. This is non-editable once created.'),
      '#machine_name' => array(
        'exists' => 'salsa_profile_check_name_if_exist',
        'source' => array('label'),
      ),
      '#required' => TRUE,
    );

    $form['type'] = array(
      '#type' => 'select',
      '#title' => t('Field Type'),
      '#description' => t('The type of data in the field.'),
      '#options' => array('' => '') + salsa_profile_custom_field_types(),
      '#default_value' => '',
      '#required' => TRUE,
    );
  }

  if ($field_id) {
    $form['properties'] = array(
      '#type' => 'fieldset',
      '#title' => t('Properties'),
      '#collapsible' => TRUE,
    );

    $form['properties']['Display_To_Supporters'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display in profile manager'),
      '#description' => t('Make this field editable in the public Profile Manager.'),
      '#default_value' => $form_state['salsa_object']->Display_To_Supporters == 'true' ? TRUE : FALSE,
    );

    $form['properties']['Display_Name'] = array(
      '#type' => 'textarea',
      '#title' => t('Public Display Name'),
      '#description' => t('Field name used in public pages.'),
      '#default_value' => $form_state['salsa_object']->Display_Name,
    );

    $form['properties']['Description'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#description' => t('Internal description -- not public.'),
      '#default_value' => $form_state['salsa_object']->Description,
    );

    $form['properties']['_Order'] = array(
      '#type' => 'textfield',
      '#title' => t('Order'),
      '#description' => t('Numerical sort order, lowest first.'),
      '#default_value' => $form_state['salsa_object']->_Order,
    );

    if ($form_state['salsa_object']->type == 'varchar' || $form_state['salsa_object']->type == 'enum') {
      $form['allowed_values'] = array(
        '#type' => 'fieldset',
        '#title' => t('Allowed values'),
        '#collapsible' => TRUE,
      );

      $form['allowed_values']['option_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Option Label'),
        '#description' => t('Displayed in selections and reports.'),
        '#attributes' => array(
          'onkeyup' => array('document.getElementById("edit-option-value").value = document.getElementById("edit-option-label").value')
        ),
      );

      $form['allowed_values']['option_value'] = array(
        '#type' => 'textfield',
        '#title' => t('Option Value'),
        '#description' => t('Stored in the database and used in imports -- often the same as the label.'),
        '#attributes' => array(
          'onkeyup' => array('document.getElementById("edit-option-label").removeAttribute("onkeyup")'),
        ),
      );

      $form['allowed_values']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add Option'),
        '#submit' => array('salsa_profile_add_custom_column_option'),
        '#limit_validation_errors' => array(),
      );

      $form['allowed_values']['custom_column_option_table'] = array(
        '#type' => 'item',
        '#markup' => salsa_profile_custom_column_option_table($form_state['salsa_object']->custom_column_KEY),
      );

      $form['allowed_values']['save_order'] = array(
        '#type' => 'submit',
        '#value' => t('Save Order'),
        '#submit' => array('salsa_profile_save_custom_column_option_order'),
        '#limit_validation_errors' => array(),
      );
    }
  }

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('salsa_profile_custom_field_form_submit'),
  );

  return $form;
}

/**
 * Callback method that checks whether the API Name field already exists.
 */
function salsa_profile_check_name_if_exist($value) {
  $database_table = reset(entity_load('salsa_database_table', FALSE, array('table_name' => 'supporter')));
  $custom_fields  = entity_load('salsa_custom_column', FALSE, array('database_table_KEY' => $database_table->database_table_KEY));

  // @todo Find a way to add multiple conditions instead of using foreach.
  if (!empty($custom_fields)) {
    foreach ($custom_fields as $field) {
      if ($field->name == $value) {
        return TRUE;
      }
    }
    return FALSE;
  }
  return FALSE;
}

/**
 * Custom fields - form submit callback.
 */
function salsa_profile_custom_field_form_submit($form, &$form_state) {
  $database_table = reset(entity_load('salsa_database_table', FALSE, array('table_name' => 'supporter')));

  $form_state['salsa_object']->organization_KEY = $form_state['supporter']->organization_KEY;
  $form_state['salsa_object']->database_table_KEY = $database_table->database_table_KEY;
  $form_state['salsa_object']->label = $form_state['values']['label'];
  $form_state['salsa_object']->name  = $form_state['values']['name'];
  $form_state['salsa_object']->type  = $form_state['values']['type'];

  if ($form_state['is_full_form']) {
    $form_state['salsa_object']->Display_To_Supporters  = $form_state['values']['Display_To_Supporters'];
    $form_state['salsa_object']->Display_Name  = $form_state['values']['Display_Name'];
    $form_state['salsa_object']->Description  = $form_state['values']['Description'];
    $form_state['salsa_object']->_Order  = $form_state['values']['_Order'];
  }

  $form_state['salsa_object']->save();

  drupal_set_message(t('Successfully added column.'));
  drupal_goto(SALSA_PROFILE_SETTINGS_URL);
}

/**
 * The function that builds options table.
 */
function salsa_profile_custom_column_option_table($custom_column_KEY) {
  if ($options = entity_load('salsa_custom_column_option', FALSE, array('custom_column_KEY' => $custom_column_KEY))) {
    $header = array(t('Label'), t('Value'), t('Displayed'), t('Order'), t('Operations'));
    $rows = array();

    foreach ($options as $option) {
      $isDisplayed = $option->isDisplayed == 'true' ? 'Yes' : 'No';
      $link = $option->isDisplayed == 'true' ? l(t('Disable'), SALSA_PROFILE_SETTINGS_URL . '/custom_fields/option/0/' . $option->custom_column_option_KEY, array('query' => array('destination' => SALSA_PROFILE_SETTINGS_URL . '/custom_fields/edit/' . $custom_column_KEY))) : l(t('Enable'), SALSA_PROFILE_SETTINGS_URL . '/custom_fields/option/1/' . $option->custom_column_option_KEY, array('query' => array('destination' => SALSA_PROFILE_SETTINGS_URL . '/custom_fields/edit/' . $custom_column_KEY)));

      $order = array(
        '#type' => 'textfield',
        '#name' => 'option_order_' . $option->custom_column_option_KEY,
        '#size' => 3,
        '#maxlength' => 3,
        '#value' => $option->_Order ? $option->_Order : 0,
      );

      $rows[] = array($option->label, $option->value, $isDisplayed, render($order), $link);
    }

    return theme('table', array('header' => $header, 'rows' => $rows));
  }

  return t('There are currently no allowed values.');
}

/**
 * Delete confirmation form callback.
 */
function salsa_profile_custom_field_delete_form($form, &$form_state, $field_id = FALSE) {
  if ($field_id) {
    $custom_field = entity_load_single('salsa_custom_column', $field_id);

    $form['custom_field_ID'] = array(
      '#type' => 'value',
      '#value' => $field_id,
    );

    return confirm_form(
      $form,
      t('Are you sure you want to delete the field %field?', array('%field' => $custom_field->label)),
      SALSA_PROFILE_SETTINGS_URL,
      t('If you have any content left in this field, it will be lost. This action cannot be undone.'),
      t('Delete'), t('Cancel'),
      'confirm'
    );
  }
}

/**
 * Delete custom field callback function.
 * @todo Check why can not delete fields that are created from module?
 */
function salsa_profile_custom_field_delete_form_submit($form, &$form_state) {
  // Delete options.
  if ($options = entity_load('salsa_custom_column_option', FALSE, array('custom_column_KEY' => $form['custom_field_ID']['#value']))) {
    $keys = array();
    foreach ($options as $option) {
      $keys[] = $option->custom_column_option_KEY;
    }
    entity_delete_multiple('salsa_custom_column_option', $keys);
  }

  // Delete custom field.
  entity_delete('salsa_custom_column', $form['custom_field_ID']['#value']);

  drupal_set_message('Successfully deleted.');
  drupal_goto(SALSA_PROFILE_SETTINGS_URL);
}

/**
 * Callback function that we use to add custom filed options.
 */
function salsa_profile_add_custom_column_option($form, &$form_state) {
  $database_table = reset(entity_load('salsa_database_table', FALSE, array('table_name' => 'supporter')));

  $new_option = new SalsaEntity(array(), 'salsa_custom_column_option');
  $new_option->organization_KEY = $form_state['supporter']->organization_KEY;
  $new_option->database_table_KEY = $database_table->database_table_KEY;
  $new_option->custom_column_KEY = $form_state['salsa_object']->custom_column_KEY;
  $new_option->label = $form_state['input']['option_label'];
  $new_option->value = $form_state['input']['option_value'];
  $new_option->isDisplayed = 1;

  $new_option->save();
}

/**
 * A function that records the order of options.
 */
function salsa_profile_save_custom_column_option_order($form, &$form_state) {
  foreach ($form_state['input'] as $key => $value) {
    if (strpos($key, 'option_order_') !== FALSE) {
      $custom_field_option = entity_load_single('salsa_custom_column_option', substr($key, 13));
      $custom_field_option->_Order = $value;
      $custom_field_option->save();
    }
  }
}

/**
 * Callback function that enable/disable option.
 */
function salsa_profile_custom_field_option_action($is_displayed, $key) {
  $custom_field_option = entity_load_single('salsa_custom_column_option', $key);
  $custom_field_option->isDisplayed = $is_displayed;
  $custom_field_option->save();
  drupal_goto();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function salsa_profile_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $form_state['supporter'] = salsa_profile_get_supporter($form_state['user']);
    if (!module_exists('mimemail') && salsa_profile_access($form_state['user'])) {
      $form['Email_Preference'] = array(
        '#type' => 'select',
        '#title' => t('Email Preference'),
        '#default_value' => !empty($form_state['supporter']->Email_Preference) ? $form_state['supporter']->Email_Preference: '',
        '#options' => array(
          EMAIL_PREFERENCE_NONE => '',
          EMAIL_PREFERENCE_HTML => t('HTML Email'),
          EMAIL_PREFERENCE_TEXT => t('Text Email'),
        ),
      );
    }

    // Additional callbacks.
    $form['#submit'][] = 'salsa_profile_email_preference_update';
    $form['#submit'][] = 'salsa_profile_email_update';
  }
}

/**
 * Additional edit form callback that updates Email_Preference field.
 */
function salsa_profile_email_preference_update($form, $form_state) {
  if (is_object($form_state['supporter'])) {
    if (module_exists('mimemail')) {
      $form_state['supporter']->Email_Preference = $form_state['values']['mimemail_textonly'] ? EMAIL_PREFERENCE_TEXT : EMAIL_PREFERENCE_HTML;
      $form_state['supporter']->save();
    }
    else {
      $form_state['supporter']->Email_Preference = $form_state['values']['Email_Preference'];
      $form_state['supporter']->save();
    }
  }
}

/**
 * Additional edit form callback that sync drupal and salsa email address.
 */
function salsa_profile_email_update($form, $form_state) {
  // Current password is required fields when user wants to change
  // E-mail address, so it's a way to know when to update salsa email?
  if (isset($form_state['values']['current_pass']) && !empty($form_state['supporter'])) {
    $form_state['supporter']->Email = $form_state['values']['mail'];
    $form_state['supporter']->save();
  }
}

/**
 * Implements hook_TYPE_alter().
 */
function salsa_profile_salsa_entity_supporter_fieldset_alter(&$form, $form_state, $form_id) {
  global $user;

  $has_profile = salsa_profile_get_supporter($user) ? TRUE : FALSE;

  if ($has_profile) {
    unset($form['reset_link']);
    if (variable_get('salsa_profile_read_only_supporter_fields')) {
      $supporter_fields = element_children($form['Supporter_Info']);
      foreach ($supporter_fields as $field) {
        $form['Supporter_Info'][$field]['#disabled'] = TRUE;
      }

      $form['Supporter_Info']['edit_profile_link'] = array(
        '#type' => 'item',
        '#markup' => t('These fields can be changed in the !profile_link.', array('!profile_link' => l(t('profile'), 'user/' . $user->uid . '/salsa_profile'))),
        '#weight' => -1,
      );
    }
  }
}
