<?php

/**
 * @file
 * Salsa signup page test methods.
 */


/**
 * Test case that covers only signup page, without integration with the registration form.
 */
class SalsaSignupPageTestCase extends SalsaEntityBaseTestCase {

  public function setUp() {
    parent::setUp(array('salsa_signup_page'));
  }

  public static function getInfo() {
    return array(
      'name' => t('Signup page'),
      'description' => t('Test case that covers only signup page, without integration with the registration form.'),
      'group' => t('Salsa API'),
    );
  }

  function testSignupPage() {
    // Create an admin user.
    $permissions = array(
      'access administration pages',
      'administer permissions',
      'administer salsa',
    );

    $admin_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($admin_user);

    // Set signup page permissions so that anonymous users can access.
    $signup_permissions = array(
      '1[view salsa_signup_page]' => 'view salsa_signup_page',
      '2[view salsa_signup_page]' => 'view salsa_signup_page',
    );

    $this->drupalPost('admin/people/permissions', $signup_permissions, t('Save permissions'));

    // Try to sign in as anonymous user.
    $this->drupalLogout();
    $signup_page = array(
      'First_Name' => 'First Name',
      'Last_Name' => 'Last Name',
      'Email' => 'example@example.com',
      'Receive_Email' => 1,
    );
    $this->drupalPost('salsa/signup_page/1', $signup_page, t('Submit'));

    // Verify that values were stored.
    $this->drupalGet('salsa/signup_page/1');
    $this->assertFieldByName('First_Name', $signup_page['First_Name']);
    $this->assertFieldByName('Last_Name', $signup_page['Last_Name']);
    $this->assertFieldByName('Email', $signup_page['Email']);

    // Register a new user and try to sign in as registered user.
    $this->drupalGet('salsa/supporter/reset');
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);
    $this->drupalPost('salsa/signup_page/1', $signup_page, t('Submit'));

    // Verify that values were stored.
    $this->drupalGet('salsa/signup_page/1');
    $this->assertFieldByName('First_Name', $signup_page['First_Name']);
    $this->assertFieldByName('Last_Name', $signup_page['Last_Name']);
    $this->assertFieldByName('Email', $signup_page['Email']);
  }
}

/**
 * Test case that covers the integration of signup page and drupal registration form.
 */
class SalsaSignupPageIntegrationTestCase extends SalsaEntityBaseTestCase {

  public function setUp() {
    parent::setUp(array('salsa_signup_page', 'salsa_profile'));
  }

  public static function getInfo() {
    return array(
      'name' => t('Signup page integration'),
      'description' => t('Test case that covers the integration of signup page and drupal registration form.'),
      'group' => t('Salsa API'),
    );
  }

  function testSignupPageIntegration() {
    // Create an admin user.
    $permissions = array(
      'access administration pages',
      'administer salsa',
    );

    $admin_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($admin_user);

    // Select signup page to be integrated with Drupal registration form.
    $signup_page_settings = array(
      'signup_page_registration_form' => 1,
    );
    $this->drupalPost('admin/config/services/salsa/signup_page', $signup_page_settings, t('Save configuration'));

    // Select custom field to store Drupal UID.
    $profile_settings = array(
      'salsa_profile_custom_field' => 'uid',
    );
    $this->drupalPost('admin/config/services/salsa/profile', $profile_settings, t('Save configuration'));
    $this->drupalLogout();

    // Register a new user.
    $registration_form_fields = array(
      'name' => 'signup',
      'mail' => 'example@example.com',
      'Supporter_Info[First_Name]' => 'First Name',
      'Supporter_Info[Last_Name]' => 'Last Name',
      'Supporter_Info[Zip]' => 1000,
      'Supporter_Info[Receive_Email]' => 1,
    );
    $this->drupalPost('user/register', $registration_form_fields, t('Create new account'));

    // Check that supporter KEY is assigned to the Drupal user.
    $user = user_load_by_mail($registration_form_fields['mail']);
    $this->assertTrue(isset($user->field_salsa_supporter_key[LANGUAGE_NONE][0]['value']), t('Supporter KEY is assigned to the Drupal user.'));

    // Check that Drupal UID is assigned to the supporter object.
    $profile_custom_field = variable_get('salsa_profile_custom_field');
    $supporter = entity_load_single('salsa_supporter', $user->field_salsa_supporter_key[LANGUAGE_NONE][0]['value']);
    $this->assertTrue($supporter->$profile_custom_field == $user->uid, t('Drupal UID is assigned to the supporter object.'));
  }
}
