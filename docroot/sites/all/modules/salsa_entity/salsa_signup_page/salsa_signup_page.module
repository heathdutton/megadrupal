<?php

/**
 * @file
 */

/**
 * Implements hook_salsa_object_type_info().
 */
function salsa_signup_page_salsa_object_type_info() {
  return array(
    'signup_page' => array(
      'label' => t('Salsa SignUp Page'),
      'entity class' => 'SalsaSignUpPage',
      'entity keys' => array(
        'label' => 'Reference_Name',
      ),
      'cache' => TRUE,
    ),
    'tag' => array(
      'label' => t('Salsa Tags'),
    ),
    'tag_data' => array(
      'label' => t('Salsa Tag Data'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function salsa_signup_page_block_info() {
  $blocks = array();
  $signup_pages = entity_load('salsa_signup_page');
  if (is_array($signup_pages)) {
    foreach ($signup_pages as $page) {
      $blocks[$page->signup_page_KEY] = array(
        'info' => $page->Reference_Name,
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function salsa_signup_page_block_view($delta = '') {
  $block = array();
  $signup_page = entity_load_single('salsa_signup_page', $delta);

  $block['subject'] = is_object($signup_page) ? $signup_page->Reference_Name : t('Error loading page');
  $block['content'] = is_object($signup_page) ? $signup_page->buildContent() : t('Content is currently not available. Please click !reload_link to refresh the page.', array('!reload_link' => l(t('here'), current_path())));

  return $block;
}

/**
 * Implements hook_menu().
 */
function salsa_signup_page_menu() {
  $items = array();
  $items['admin/config/services/salsa/signup_page'] = array(
    'title' => 'Salsa Signup Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_signup_page_settings'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function salsa_signup_page_permission() {
  return array(
    'reset salsa supporter' => array(
      'title' => t('Reset/Unlink Salsa Supporter'),
    ),
  );
}

/**
 * SignUp Page form.
 */
function salsa_signup_page_form($form, &$form_state, $signup_page) {
  global $user;

  $form_state['salsa_object'] = $signup_page;
  $form_state['supporter'] = salsa_entity_get_supporter();

  salsa_entity_supporter_fieldset($form, $form_state, 'salsa_signup_page_form');

  // Confirmation checkbox.
  if (isset($signup_page->Opt_in_Text)) {
    $form['Supporter_Info']['Receive_Email'] = array(
      '#type' => 'checkbox',
      '#title' => check_plain(t($signup_page->Opt_in_Text)),
      '#required' => TRUE,
    );
  }

  // Groups checkboxes.
  $optionally_add_to_groups_KEYS = salsa_entity_string_explode($signup_page->optionally_add_to_groups_KEYS);
  if (!empty($optionally_add_to_groups_KEYS)) {
    $all_groups = entity_load('salsa_groups');
    $groups_options = array();
    foreach ($all_groups as $key => $group) {
      if (in_array($key, $optionally_add_to_groups_KEYS)) {
        $groups_options[$key] = $group->Group_Name;
      }
    }

    $groups_default_value = array();
    if (isset($form_state['supporter']->supporter_KEY)) {
      $supporter_groups = entity_load('salsa_supporter_groups', FALSE, array('supporter_KEY' => $form_state['supporter']->supporter_KEY));
      foreach ($supporter_groups as $supporter_group) {
        $groups_default_value[] = $supporter_group->groups_KEY;
      }
    }
    else {
      $groups_default_value = array_keys($groups_options);
    }

    // Groups fieldset.
    $form['Groups'] = array(
      '#type' => 'fieldset',
      '#title' => t('Groups'),
      '#prefix' => $signup_page->PreGroup_Text,
    );

    $form['Groups']['groups_KEYS'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Add me to the following list(s):'),
      '#options' => $groups_options,
      '#default_value' => $groups_default_value,
    );
  }

  // Tags.
  $tag_KEYS = salsa_entity_string_explode($signup_page->tag_KEYS);
  if (!empty($tag_KEYS)) {
    $all_tags = entity_load('salsa_tag');
    $tag_options = array();
    foreach ($all_tags as $key => $tag) {
      if (in_array($key, $tag_KEYS)) {
        $tag_options[$tag->tag] = $tag->tag;
      }
    }

    if (!empty($tag_options)) {
      $form['Tags'] = array(
        '#type' => 'fieldset',
        '#title' => t('Tags'),
        '#prefix' => $signup_page->PreInterest_Text,
      );

      $form['Tags']['tags'] = array(
        '#type' => 'checkboxes',
        '#options' => $tag_options,
      );
    }
  }

  $form['PreFooter'] = array(
    '#markup' => '<div>' . $signup_page->PreFooter . '</div>',
  );

  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['Footer'] = array(
    '#markup' => '<div>' . $signup_page->Footer . '</div>',
  );

  // Add additional submit handler that creates / updates supporter.
  $form['#submit'] = array(
    'salsa_entity_supporter_fieldset_submit',
    'salsa_signup_page_form_submit',
  );

  return $form;
}

/**
 * SignUp Page form validate.
 */
function salsa_signup_page_form_validate($form, &$form_state) {
  // E-mail check.
  if (!valid_email_address($form_state['values']['Email'])) {
    form_set_error('Email', t('Please enter a valid E-mail address.'));
  }

  // Check that supporter is already connected?
  global $user;
  if ($user->uid > 0 && $user->mail != $form_state['values']['Email']) {
    $supporter = reset(entity_load('salsa_supporter', FALSE, array('Email' => $form_state['values']['Email'])));
    $profile_custom_field = variable_get('salsa_profile_custom_field');
    if ($supporter && isset($supporter->$profile_custom_field) && $supporter->$profile_custom_field != $user->uid) {
      form_set_error('Email', t('Salsa supporter that you are trying to assign is already assigned to other drupal user.'));
    }
  }
}

/**
 * SignUp Page form submit.
 */
function salsa_signup_page_form_submit($form, &$form_state) {
  // Delete supporter groups in case that supporter already exists.
  salsa_entity_delete_supporter_groups($form_state['salsa_object']->add_to_groups_KEYS, $form_state['salsa_object']->optionally_add_to_groups_KEYS);

  // Assign supporter to the groups if any.
  $groups_KEYS = array();
  if (!empty($form_state['salsa_object']->add_to_groups_KEYS)) {
    // Default groups (auto assign).
    $groups_KEYS = salsa_entity_string_explode($form_state['salsa_object']->add_to_groups_KEYS);
  }
  // Add checked optional groups.
  if (isset($form_state['values']['groups_KEYS'])) {
    $groups_KEYS = array_unique(array_merge($groups_KEYS, array_filter($form_state['values']['groups_KEYS'])));
  }

  if (!empty($groups_KEYS)) {
    foreach ($groups_KEYS as $key) {
      $supporter_groups[$key] = new SalsaEntity(array(), 'salsa_supporter_groups');
      $supporter_groups[$key]->organization_KEY = $form_state['salsa_object']->organization_KEY;
      $supporter_groups[$key]->supporter_KEY = $form_state['supporter']->supporter_KEY;
      $supporter_groups[$key]->groups_KEY = $key;
      $supporter_groups[$key]->save();
    }
  }

  // Save tags.
  if (!empty($form_state['values']['tags'])) {
    $form_state['supporter']->additional['tag'] = implode(',', $form_state['values']['tags']);
    $form_state['supporter']->save();
  }

  // If redirect path is defined go there.
  if (isset($form_state['salsa_object']->redirect_path)) {
    drupal_goto($form_state['salsa_object']->redirect_path);
  }

  drupal_goto('<front>');
}

/**
 * SignUp Page settings form.
 */
function salsa_signup_page_settings($form, $form_state) {
  // @todo Show only public pages, currently unpublished signup pages will be
  // listed too.
  $signup_pages = array();
  $pages = entity_load('salsa_signup_page');
  if (!empty($pages)) {
    foreach ($pages as $page) {
      $signup_pages[$page->signup_page_KEY] = $page->Reference_Name;
    }
  }

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('SignUp Page settings'),
  );

  $form['settings']['signup_page_registration_form'] = array(
    '#type' => 'select',
    '#title' => t('Select a signup page that will be used on the registration form'),
    '#options' => $signup_pages,
    '#default_value' => variable_get('signup_page_registration_form'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function salsa_signup_page_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if ($signup_page_KEY = variable_get('signup_page_registration_form')) {
    $signup_page = entity_load_single('salsa_signup_page', $signup_page_KEY);
    $form_state['salsa_object'] = $signup_page;
    $form_state['supporter'] = FALSE;

    salsa_entity_supporter_fieldset($form, $form_state, 'user_register_form');

    $form['Supporter_Info']['#title'] = '';
    $form['Supporter_Info']['#tree'] = TRUE;

    unset($form['Supporter_Info']['Email']);

    // Confirmation checkbox.
    if (isset($signup_page->Opt_in_Text)) {
      $form['Supporter_Info']['Receive_Email'] = array(
        '#type' => 'checkbox',
        '#title' => check_plain(t($signup_page->Opt_in_Text)),
        '#required' => TRUE,
      );
    }

    // Groups checkboxes.
    $optionally_add_to_groups_KEYS = salsa_entity_string_explode($signup_page->optionally_add_to_groups_KEYS);
    if (!empty($optionally_add_to_groups_KEYS)) {
      $all_groups = entity_load('salsa_groups');
      $groups_options = array();
      foreach ($all_groups as $key => $group) {
        if (in_array($key, $optionally_add_to_groups_KEYS)) {
          $groups_options[$key] = $group->Group_Name;
        }
      }

      // Groups fieldset.
      $form['Groups'] = array(
        '#type' => 'fieldset',
        '#title' => t('Groups'),
        '#prefix' => $signup_page->PreGroup_Text,
      );

      $form['Groups']['groups_KEYS'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Add me to the following list(s):'),
        '#options' => $groups_options,
        '#default_value' => array_keys($groups_options),
      );
    }

    // Tags.
    $tag_KEYS = salsa_entity_string_explode($signup_page->tag_KEYS);
    if (!empty($tag_KEYS)) {
      $all_tags = entity_load('salsa_tag');
      $tag_options = array();
      foreach ($all_tags as $key => $tag) {
        if (in_array($key, $tag_KEYS)) {
          $tag_options[$tag->tag] = $tag->tag;
        }
      }

      if (!empty($tag_options)) {
        $form['Tags'] = array(
          '#type' => 'fieldset',
          '#title' => t('Tags'),
          '#prefix' => $signup_page->PreInterest_Text,
        );

        $form['Tags']['tags'] = array(
          '#type' => 'checkboxes',
          '#options' => $tag_options,
        );
      }
    }

    $form['#submit'][] = 'salsa_signup_page_register_submit';
    $form['#submit'][] = 'salsa_signup_page_form_submit';
  }
}

/**
 * Additional submit callback for the user register form.
 */
function salsa_signup_page_register_submit($form, &$form_state) {
  $form_state['values']['Email'] = $form_state['values']['mail'];
  salsa_entity_supporter_fieldset_submit($form, $form_state);
}
