<?php

/**
 * @file
 * Module that allows sending e-mails to friends.
 */

/**
 * Implements hook_salsa_object_type_info().
 */
function salsa_tell_a_friend_salsa_object_type_info() {
  return array(
    'tell_a_friend' => array(
      'label' => t('Salsa Tell A Friend'),
      'entity class' => 'SalsaEntityTellAFriend',
      'entity keys' => array(
        'label' => 'Reference_Name',
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function salsa_tell_a_friend_block_info() {
  $blocks = array();

  $tell_a_friend_pages = entity_load('salsa_tell_a_friend');
  if (is_array($tell_a_friend_pages)) {
    foreach ($tell_a_friend_pages as $tell_a_friend_page) {
      $blocks[$tell_a_friend_page->tell_a_friend_KEY] = array(
        'info' => $tell_a_friend_page->Reference_Name,
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function salsa_tell_a_friend_block_view($delta = '') {
  $block = array();
  $tell_a_friend_page = entity_load_single('salsa_tell_a_friend', $delta);

  $block['subject'] = is_object($tell_a_friend_page) ? $tell_a_friend_page->Reference_Name : t('Error loading page');
  $block['content'] = is_object($tell_a_friend_page) ? $tell_a_friend_page->buildContent() : t('Content is currently not available. Please click !reload_link to refresh the page.', array('!reload_link' => l(t('here'), current_path())));

  return $block;
}

/**
 * Tell A Friend form callback.
 */
function salsa_tell_a_friend_form($form, &$form_state, $tell_a_friend) {
  $form_state['tell_a_friend'] = $tell_a_friend;

  $supporter = salsa_entity_get_supporter();

  $form['Title'] = array(
    '#markup' => '<h2>' . $tell_a_friend->Title . '</h2>',
  );

  $form['HTML_Content'] = array(
    '#markup' => $tell_a_friend->HTML_Content,
  );

  $form['Address_Book_Link'] = array(
    '#markup' => '<div>' . l(t('Send mail from your own address book'), '#') . '</div>',
  );

  $form['Required_Info_Text'] = array(
    '#markup' => '<div>' . t("Even though you are logged in, we still require all information marked with '<span class=\"required\">*</span>'") . '</div>',
  );

  $form['Email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $supporter ? $supporter->Email : '',
    '#required' => TRUE,
  );

  $form['First_Name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#default_value' => $supporter ? $supporter->First_Name : '',
  );

  $form['Last_Name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#default_value' => $supporter ? $supporter->Last_Name : '',
  );

  $form['Subject_HTML'] = array(
    '#markup' => '<div>' . t('Subject:') . '<br />' . $tell_a_friend->Letter_Subject . '</div>',
  );

  $form['subject'] = array(
    '#type' => 'hidden',
    '#value' => $tell_a_friend->Letter_Subject,
  );

  $form['content'] = array(
    '#type' => 'textarea',
    '#title' => t('Customize your message'),
    '#default_value' => $tell_a_friend->Letter_Body,
  );

  $form['Uneditable_Content'] = array(
    '#markup' => '<div>' . t('Here is the message that we are going to append:') . '<br />' . $tell_a_friend->Uneditable_Content . '</div>',
  );

  $form['content2'] = array(
    '#type' => 'hidden',
    '#value' => $tell_a_friend->Uneditable_Content,
  );

  $form['Emails_Limit_Msg'] = array(
    '#markup' => '<p style="font-weight: bold; color: #990000;">' . t('No more than 20 emails can be sent through this page at any one time.') . '</p>',
  );

  $form['to_container'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="to_container">',
    '#suffix' => '</div>',
  );

  $emails_howmany = isset($form_state['emails_howmany']) ? $form_state['emails_howmany'] : 5;
  if (isset($form_state['clicked_button'])) {
    if ($form_state['clicked_button']['#name'] == 'add_email_address') {
      $emails_howmany++;
    }
    $form_state['emails_howmany'] = $emails_howmany;
  }

  for ($i = 0; $i < $emails_howmany; $i++) {
    $form['to_container']['to_email_' . $i] = array(
      '#type' => 'textfield',
    );
  }

  $form['to_container']['add_email_address'] = array(
    '#name' => 'add_email_address',
    '#type' => 'button',
    '#value' => t('Add Email Address'),
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'salsa_tell_a_friend_add_email_callback',
      'wrapper' => 'to_container',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Spread the Word!'),
  );

  return $form;
}

/**
 * Ajax callback.
 */
function salsa_tell_a_friend_add_email_callback($form, $form_state) {
  return $form['to_container'];
}

/**
 * Tell A Frien form validate callback.
 */
function salsa_tell_a_friend_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['Email'])) {
    form_set_error('Email', t('@email E-mail address is not valid.', array('@email' => $form_state['values']['Email'])));
  }

  $to_email_exists = FALSE;
  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 8) == 'to_email' && $value != '') {
      $to_email_exists = TRUE;
      if (!valid_email_address($value)) {
        form_set_error($key, t('@email E-mail address is not valid.', array('@email' => $value)));
      }
    }
  }

  if (!$to_email_exists) {
    form_set_error('to_email_exists', t('You have not specified anyone to send an email to.'));
  }
}

/**
 * Tell A Friend form submit callback.
 */
function salsa_tell_a_friend_form_submit($form, &$form_state) {
  $to_emails = '';
  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 8) == 'to_email' && $value != '') {
      $to_emails .= $value . ';';
    }
  }
  $to_emails = rtrim($to_emails, ';');

  $query = array(
    '#script' => 'email',
    '#fields' => array(
      'tell_a_friend_KEY' => $form_state['tell_a_friend']->tell_a_friend_KEY,
      'to' => urlencode($to_emails),
      'from' => urlencode($form_state['values']['Email']),
      'subject' => urlencode($form_state['values']['subject']),
      'content' => urlencode($form_state['values']['content'] . "\n\n" . $form_state['values']['content2']),
    ),
  );

  // @todo It seems that the API doesn't return any message,
  // check once again if we can get a message status.
  $response = salsa_api_query($query);
  drupal_set_message(t('The message was successfully sent.'));

  if ($form_state['tell_a_friend']->redirect_path) {
    drupal_goto($form_state['tell_a_friend']->redirect_path);
  }
}
