<?php

/**
 * @file
 * Salsa Entity test classes.
 */

/**
 * Base class for salsa entity tests.
 */
class SalsaEntityBaseTestCase extends DrupalWebTestCase {

  public $profile = 'testing';

  protected $salsaAPIClass = 'SalsaAPIMock';

  public function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules = array_merge(array('salsa_entity'), $modules);
    parent::setUp($modules);

    variable_set('salsa_api_class', $this->salsaAPIClass);

    entity_info_cache_clear();
    entity_property_info_cache_clear();
    menu_rebuild();
    // Refresh permissions and clear caches.
    $this->checkPermissions(array(), TRUE);
  }
}

/**
 * Tests basic API
 */
class SalsaEntityAPITestCase extends SalsaEntityBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Get Supporter'),
      'description' => t('Check if the supporter data loaded correctly.'),
      'group' => t('Salsa API'),
    );
  }

  /**
   * Check if the supporter data loaded correctly.
   */
  function testGetSupporter() {
    // Request for a user that exists.
    $supporter = entity_load_single('salsa_supporter', '1');
    $this->assertTrue(is_object($supporter), t('Supporter is loaded successfully.'));
    $this->assertEqual($supporter->First_Name, 'First Name', t('Supporter name is: @name', array('@name' => 'First Name')));
    $this->assertEqual($supporter->Email, 'example@example.com', t('Supporter Email is: @email', array('@email' => 'example@example.com')));

    // Request for users that do not exist.
    $supporter = entity_load_single('salsa_supporter', '00000002');
    $this->assertFalse($supporter, t('Supporter with supporter_KEY @key does not exist.', array('@key' => '00000002')));
  }
}
