<?php

/**
 * @file
 */

/**
 * Implements hook_salsa_object_type_info().
 */
function salsa_my_donate_page_salsa_object_type_info() {
  return array(
    'my_donate_page' => array(
      'label' => t('Salsa My Donate Page'),
      'entity class' => 'SalsaEntityMyDonatePage',
      'entity keys' => array(
        'label' => 'Title',
      ),
    ),
    'supporter_my_donate_page' => array(
      'label' => t('Salsa Supporter My Donate Page'),
      'entity class' => 'SalsaEntitySupporterMyDonatePage',
    ),
    'supporter_my_donate_page_donation' => array(
      'label' => t('Salsa My Donate Page Donation'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function salsa_my_donate_page_menu() {
  $items['user/%user/salsa_my_donations'] = array(
    'title' => 'Donations & Fundraising',
    'page callback' => 'salsa_my_donate_page_home',
    'page arguments' => array(1),
    'access callback' => 'salsa_my_donate_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  );
  $items['salsa/campaigns'] = array(
    'title' => 'Select a fundraising campaign',
    'page callback' => 'salsa_my_donate_page_campaigns_list',
    'access callback' => 'salsa_my_donate_page_access',
  );
  $items['salsa/my_donate_page/%salsa_my_donate_page/create'] = array(
    'title' => 'Create a new fundraising page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_my_donate_page_create_form', 2),
    'access callback' => 'salsa_my_donate_page_access',
  );
  $items['salsa/my_donate_page/%salsa_my_donate_page/edit/%salsa_supporter_my_donate_page'] = array(
    'title' => 'Edit your fundraising page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_my_donate_page_edit_form', 2, 4),
    'access callback' => 'salsa_my_donate_page_access',
  );
  $items['salsa/my_donate_page/%salsa_my_donate_page/delete/%salsa_supporter_my_donate_page'] = array(
    'title' => 'Delete fundraising page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_my_donate_page_delete_form', 2, 4),
    'access callback' => 'salsa_my_donate_page_access',
  );
  return $items;
}

/**
 * Wrapper to load a my donate page.
 */
function salsa_my_donate_page_load($my_donate_page_KEY) {
  return entity_load_single('salsa_my_donate_page', $my_donate_page_KEY);
}

/**
 * Wrapper to load a my donate page.
 */
function salsa_supporter_my_donate_page_load($supporter_my_donate_page_KEY) {
  return entity_load_single('salsa_supporter_my_donate_page', $supporter_my_donate_page_KEY);
}

/**
 * Implements hook_access().
 */
function salsa_my_donate_page_access($account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }
  // Allow access to own donations only except when the user has administer
  // users permissions.
  return user_access('view salsa_my_donate_page', $account) && ($GLOBALS['user']->uid == $account->uid || user_access('administer users'));

}

/**
 * Implements hook_theme().
 */
function salsa_my_donate_page_theme() {
  return array(
    'salsa_my_donate_page_home' => array(
      'template' => 'salsa_my_donate_page_home',
      'path' => drupal_get_path('module', 'salsa_my_donate_page') . '/theme',
      'variables' => array('account' => NULL, 'my_donate_pages' => NULL, 'donations' => NULL, 'recurring_donations' => NULL),
    ),
    'salsa_my_donate_page_list' => array(
      'template' => 'salsa_my_donate_page_list',
      'path' => drupal_get_path('module', 'salsa_my_donate_page') . '/theme',
      'variables' => array('account' => NULL, 'my_donate_page' => NULL, 'pages' => NULL, 'donors' => NULL, 'money_raised' => NULL),
    ),
    'salsa_my_donate_page_campaigns_list' => array(
      'template' => 'salsa_my_donate_page_campaigns_list',
      'path' => drupal_get_path('module', 'salsa_my_donate_page') . '/theme',
      'variables' => array('account' => NULL, 'my_donate_pages' => NULL),
    ),
    'salsa_my_donate_page_progressbar' => array(
      'variables' => array('goal' => 0, 'current' => 0, 'percent' => 0),
    )
  );
}

/**
 * Page callback (Select a fundraising campaign).
 */
function salsa_my_donate_page_campaigns_list() {
  return theme('salsa_my_donate_page_campaigns_list', array(
    'account' => $GLOBALS['user'],
    'my_donate_pages' => entity_load('salsa_my_donate_page'),
  ));
}

/**
 * Page callback (Donations & Fundraising).
 */
function salsa_my_donate_page_home($account) {
  $supporter = salsa_profile_get_supporter($account);

  // Load campaigns.
  $my_donate_pages = entity_load('salsa_my_donate_page');

  $donations = entity_load('salsa_donation', FALSE, array('supporter_KEY' => $supporter->supporter_KEY));
  $recurring_donations = entity_load('salsa_recurring_donation', FALSE, array('supporter_KEY' => $supporter->supporter_KEY));

  return theme('salsa_my_donate_page_home', array(
    'account' => $account,
    'my_donate_pages' => $my_donate_pages,
    'donations' => $donations,
    'recurring_donations' => $recurring_donations,
  ));
}

/**
 * Page callback (Fundraising Pages).
 */
function salsa_my_donate_page_list($my_donate_page) {
  // Load pages.
  $supporter = salsa_profile_get_supporter();
  $supporter_my_donate_pages = entity_load('salsa_supporter_my_donate_page', FALSE, array('supporter_KEY' => $supporter->supporter_KEY, 'my_donate_page_KEY' => $my_donate_page->my_donate_page_KEY));

  $pages = array();
  $donations = array();
  foreach ($supporter_my_donate_pages as $supporter_my_donate_page) {
    $pages[] = $supporter_my_donate_page;
    $donations[$supporter_my_donate_page->supporter_my_donate_page_KEY] = entity_load('salsa_supporter_my_donate_page_donation', FALSE, array('supporter_my_donate_page_KEY' => $supporter_my_donate_page->supporter_my_donate_page_KEY));
  }

  // Get donors.
  $donors = array();
  $supporter_donors = array();
  $hide_last_name = variable_get('salsa_my_donate_page_hide_last_name_field_name', 'hide_last_name');
  foreach ($donations as $page_donations) {
    if (!empty($page_donations)) {
      foreach ($page_donations as $donation) {
        if (!array_key_exists($donation->supporter_KEY, $supporter_donors)) {
          $supporter_donors[$donation->supporter_KEY] = entity_load_single('salsa_supporter', $donation->supporter_KEY);
        }
        $salsa_donation = entity_load_single('salsa_donation', $donation->donation_KEY);
        $donors[$donation->supporter_my_donate_page_KEY][$salsa_donation->donation_KEY] = array(
          'First_Name' => $salsa_donation->First_Name,
          'Last_Name' => $salsa_donation->Last_Name,
          'Email' => $salsa_donation->Email,
          'Amount' => $salsa_donation->amount,
          'Currency_Code' => $salsa_donation->Currency_Code ?: '$',
          'Hide_Last_Name' => isset($supporter_donors[$donation->supporter_KEY]->$hide_last_name) && $supporter_donors[$donation->supporter_KEY]->$hide_last_name == 'false' ? FALSE  : TRUE,
        );
      }
    }
  }

  // Calculate "Money raised".
  $money_raised = array();
  foreach ($donors as $key => $value) {
    $total = 0;
    foreach ($value as $donor) {
      $total += $donor['Amount'];
    }
    $money_raised[$key] = $total;
  }

  return theme('salsa_my_donate_page_list', array(
    'my_donate_page' => $my_donate_page,
    'pages' => $pages,
    'donors' => $donors,
    'money_raised' => $money_raised)
  );
}

/**
 * My Donate Page - create form callback.
 *
 * @todo Salsa does not validate any of these fields.
 */
function salsa_my_donate_page_create_form($form, &$form_state, $my_donate_page) {
  $account = $GLOBALS['user'];

  $form_state['account'] = $account;
  $form_state['supporter'] = salsa_profile_get_supporter($account);
  $form_state['supporter_my_donate_page'] = FALSE;
  $form_state['my_donate_page'] = $my_donate_page;

  $form['Creation_Page_Description'] = array(
    '#type' => 'item',
    '#markup' => '<p>' . $form_state['my_donate_page']->Create_Description . '</p>',
  );

  salsa_my_donate_page_customize_form($form, $form_state);

  // If there is no supporter entity yet, make sure we create a supporter with
  // the minimally required elements.
  if (!$form_state['supporter']) {
    $form_state['salsa_object'] = (object) variable_get('salsa_my_donate_form_supporter_elements', array(
      'Request' => 'First_Name,Last_Name,Email',
      'Required' => 'First_Name,Last_Name,Email',
    ));
    $form_state['supporter'] = entity_create('salsa_supporter', array('Email' => $account->mail));
    salsa_entity_supporter_fieldset($form, $form_state, 'salsa_my_donate_page_create_form');
  }
  return $form;
}

/**
 * My Donate Page - edit form callback.
 */
function salsa_my_donate_page_edit_form($form, &$form_state, $my_donate_page, $supporter_my_donate_page) {
  $account = $GLOBALS['user'];

  $form_state['account'] = $account;
  $form_state['supporter'] = salsa_profile_get_supporter($account);
  $form_state['supporter_my_donate_page'] = $supporter_my_donate_page;
  $form_state['my_donate_page'] = $my_donate_page;

  $form['View_This_Donation_Page_Link'] = array(
    '#type' => 'item',
    '#markup' => '<div>' . l(t('View this donation page'), 'salsa/supporter_my_donate_page/' . $supporter_my_donate_page->supporter_my_donate_page_KEY) . '</div>',
  );

  $form['Delete_This_Page_Link'] = array(
    '#type' => 'item',
    '#markup' => '<br /><div>' . l(t('Delete this page'), 'salsa/my_donate_page/' . $my_donate_page->my_donate_page_KEY . '/delete/' . $supporter_my_donate_page->supporter_my_donate_page_KEY) . '</div>',
  );

  $form['Select_Another_Page_Link'] = array(
    '#type' => 'item',
    '#markup' => '<div>' . l(t('Select another page'), 'salsa/campaigns') . '</div>',
  );

  salsa_my_donate_page_customize_form($form, $form_state);


  return $form;
}

/**
 * Function that groups common fields for create / edit form.
 */
function salsa_my_donate_page_customize_form(&$form, &$form_state) {
  $form['#attributes'] = array('enctype' => "multipart/form-data");

  $form['Title'] = array(
    '#type' => 'item',
    '#markup' => '<h2>' . t('Customize your fundraising page') . '</h2>',
  );

  $form['Title_suffix'] = array(
    '#type' => 'item',
    '#markup' => t('You can always make changes later!'),
  );

  if (isset($form_state['supporter_my_donate_page']->Image)) {
    $image_vars = array(
      'path' => variable_get('salsa_api_url') . $form_state['supporter_my_donate_page']->Image,
      'alt' => $form_state['supporter_my_donate_page']->Page_Title,
    );
    $form['file_preview'] = array(
      '#type' => 'item',
      '#markup' => theme('image', $image_vars),
    );
  }

  $form['file'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload a new image for this page:'),
  );

  $form['Page_Title'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Title'),
    '#default_value' => isset($form_state['supporter_my_donate_page']->Page_Title) ? $form_state['supporter_my_donate_page']->Page_Title : $form_state['my_donate_page']->Suggested_Title,
  );

  $form['Description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('Please enter a helpful description for your friends.'),
    '#default_value' => isset($form_state['supporter_my_donate_page']->Description) ? $form_state['supporter_my_donate_page']->Description : $form_state['my_donate_page']->Suggested_Description,
  );

  $form['Donation_Goal_Title'] = array(
    '#type' => 'item',
    '#markup' => '<strong>' . t('How much do you want to raise?') . '</strong>',
  );

  $form['Donation_Goal'] = array(
    '#type' => 'textfield',
    '#field_prefix' => '$',
    '#title' => t('Donation Goal'),
    '#default_value' => isset($form_state['supporter_my_donate_page']->Donation_Goal) ? $form_state['supporter_my_donate_page']->Donation_Goal : '',
    '#description' => t('The goal needs to be between $@min and $@max.', array('@min' => $form_state['my_donate_page']->Min_Donation_Goal, '@max' => $form_state['my_donate_page']->Max_Donation_Goal)),
    '#required' => TRUE,
  );

  $form['Privacy_Title'] = array(
    '#type' => 'item',
    '#markup' => '<h2>' . t('Privacy and Searches') . '</h2>',
  );

  $form['Status'] = array(
    '#type' => 'radios',
    '#options' => array(
      'Public' => t('Please make this page public, so anyone may search for it and donate.'),
      'Private' => t('Please make this page private, so it will not show up in any public listings.'),
    ),
    '#default_value' => isset($form_state['supporter_my_donate_page']->Status) ? $form_state['supporter_my_donate_page']->Status : 'Public',
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['Submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save This Page'),
  );

  $form['#validate'] = array('salsa_my_donate_page_customize_form_validate');
  $form['#submit'] = array('salsa_my_donate_page_customize_form_submit');
}

/**
 * Custom validate callback method.
 */
function salsa_my_donate_page_customize_form_validate($form, &$form_state) {
  if (is_numeric($form_state['values']['Donation_Goal']) != 1) {
    form_set_error('Donation_Goal', t('Donation Goal field must be numeric'));
  }
  elseif ((isset($form_state['my_donate_page']->Min_Donation_Goal) && $form_state['values']['Donation_Goal'] < $form_state['my_donate_page']->Min_Donation_Goal)
    || (isset($form_state['my_donate_page']->Max_Donation_Goal) && $form_state['values']['Donation_Goal'] > $form_state['my_donate_page']->Max_Donation_Goal)) {
    form_set_error('Donation_Goal', t('Please limit your goal to between $@min and $@max.', array('@min' => $form_state['my_donate_page']->Min_Donation_Goal, '@max' => $form_state['my_donate_page']->Max_Donation_Goal)));
  }
}

/**
 * Custom submit callback method.
 */
function salsa_my_donate_page_customize_form_submit($form, &$form_state) {
  // Create or update the supporter if this is a new page, provide the values
  // for the mail tokens.
  if (!$form_state['supporter_my_donate_page']) {
    $form_state['additional']['Page_Title'] = $form_state['values']['Page_Title'];
    $form_state['additional']['Description'] = $form_state['values']['Description'];
    $form_state['additional']['Donation_Goal'] = $form_state['values']['Donation_Goal'];

    // Fake the salsa object.
    $form_state['salsa_object'] = (object) array(
      'email_trigger_KEYS' => $form_state['my_donate_page']->email_trigger_KEYS,
    );
    salsa_entity_supporter_fieldset_submit($form, $form_state);

    $supporter_my_donate_page = new SalsaEntity(array(), 'salsa_supporter_my_donate_page');
    $supporter_my_donate_page->organization_KEY = $form_state['my_donate_page']->organization_KEY;
    $supporter_my_donate_page->supporter_KEY = $form_state['supporter']->supporter_KEY;
    $supporter_my_donate_page->my_donate_page_KEY = $form_state['my_donate_page']->my_donate_page_KEY;

    drupal_set_message(t('Great! Your page was created.'));
  }
  else {
    $supporter_my_donate_page = $form_state['supporter_my_donate_page'];

    drupal_set_message(t('Your page was successfully edited.'));
  }

  $supporter_my_donate_page->Page_Title = $form_state['values']['Page_Title'];
  $supporter_my_donate_page->Description = $form_state['values']['Description'];
  $supporter_my_donate_page->Donation_Goal = $form_state['values']['Donation_Goal'];
  $supporter_my_donate_page->Status = $form_state['values']['Status'];
  $supporter_my_donate_page->save();

  // Upload image file.
  if ($form_state['values']['file'] != 0) {
    $file = file_load($form_state['values']['file']);

    $properties = array(
      'object' => 'supporter_my_donate_page',
      'key' => $supporter_my_donate_page->key,
      'subdirectory' => 'images/my',
      'Image' => '[[path]]',
      'supporter_KEY' => $form_state['supporter']->supporter_KEY,
      'my_donate_page_KEY' => $form_state['my_donate_page']->my_donate_page_KEY,
      'organization_KEY' => $form_state['my_donate_page']->organization_KEY,
    );

    salsa_api()->upload($file, $properties);
  }

  $uri = $supporter_my_donate_page->uri();
  $form_state['redirect'] = $uri['path'];
}

/**
 * My Donate Page - delete form callback.
 */
function salsa_my_donate_page_delete_form($form, &$form_state, $my_donate_page, $salsa_supporter_my_donate_page) {
  $form_state['salsa_supporter_my_donate_page'] = $salsa_supporter_my_donate_page;

  return confirm_form(
    $form,
    t('Are you sure you want to delete %title?', array('%title' => $salsa_supporter_my_donate_page->Page_Title)),
    isset($_GET['destination']) ? $_GET['destination'] : 'salsa/my_donate_page/' . $salsa_supporter_my_donate_page->my_donate_page_KEY,
    NULL,
    t('Delete'),
    t('Cancel')
  );
}

/**
 * My Donate Page - delete form submit callback.
 */
function salsa_my_donate_page_delete_form_submit($form, &$form_state) {
  entity_delete('salsa_supporter_my_donate_page', $form_state['salsa_supporter_my_donate_page']->supporter_my_donate_page_KEY);
  drupal_set_message(t('Page deleted successfully.'));
  $uri = $form_state['my_donate_page']->uri();
  $form_state['redirect'] = $uri['path'];
}

/**
 * My Donate Page - public form.
 */
function salsa_my_donate_page_form($form, &$form_state, $supporter_my_donate_page, $my_donate_page, $view_mode) {
  global $user;

  $form_state['supporter_my_donate_page'] = $supporter_my_donate_page;
  $form_state['salsa_object'] = $my_donate_page;
  $form_state['supporter'] = salsa_entity_get_supporter($user);
  $form_state['view_mode'] = $view_mode;

  // Flash message JS.
  $form['flash_message_js'] = array(
    '#markup' => '<script type="text/javascript" src="' . variable_get('salsa_api_url') . '/api/flashMessageJS.sjs"></script>',
  );

  $page_owner = entity_load_single('salsa_supporter', $supporter_my_donate_page->supporter_KEY);
  $form['page_by'] = array(
    '#type' => 'item',
    '#markup' => '<div>' . t('A fundraising page by @full_name', array('@full_name' => $page_owner->First_Name . ' ' . $page_owner->Last_Name)) . '</div>',
  );

  if ($form_state['supporter'] && $form_state['supporter']->supporter_KEY == $page_owner->supporter_KEY) {
    $uri = $supporter_my_donate_page->uri();
    $create_your_own_page_link = l(t('Modify this page'), 'salsa/my_donate_page/' . $my_donate_page->my_donate_page_KEY . '/edit/' . $supporter_my_donate_page->supporter_my_donate_page_KEY, array('query' => array('destination' => $uri['path'])));
  }
  elseif ($user->uid) {
    $create_your_own_page_link = l(t('Create a page of your own'), 'salsa/my_donate_page/' . $my_donate_page->my_donate_page_KEY . '/create');
  }
  else {
    $create_your_own_page_link = l(t('Create a page of your own'), 'user/register', array('query' => array('destination' => 'salsa/my_donate_page/' . $my_donate_page->my_donate_page_KEY . '/create')));
  }

  $form['create_your_own_page_link'] = array(
    '#type' => 'item',
    '#markup' => '<div class="create_your_own_page_link">' . $create_your_own_page_link . '</div>',
  );

  if (!$user->uid) {
    $form['login_link'] = array(
      '#type' => 'item',
      '#markup' => '<div class="login_link">' . t('Is this your page?') . ' ' . l(t('Login here.'), 'user/login', array('query' => array('destination' => current_path()))) . '</div>',
    );
  }

  if (!empty($supporter_my_donate_page->Image)) {
    $image_vars = array(
      'path' => variable_get('salsa_api_url') . $supporter_my_donate_page->Image,
      'alt' => $supporter_my_donate_page->Page_Title,
    );

    $form['Image'] = array(
      '#type' => 'item',
      '#markup' => '<div>' . theme('image', $image_vars) . '</div>',
    );
  }

  $form['description'] = array(
    '#type' => 'item',
    '#markup' => check_plain($supporter_my_donate_page->Description),
  );

  $form['progress'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('donation-progress'))
  );
  $form['progress']['donation_goal'] = array(
    '#type' => 'item',
    '#title' => t('Donation goal'),
    '#markup' => '<span class="donation-goal">' . $supporter_my_donate_page->Donation_Goal . '</span>',
  );

  // Collect donation amounts for this page.
  $current = array();
  $result = salsa_api()->getLeftJoin('supporter_my_donate_page_donation(donation_KEY)donation', array('supporter_my_donate_page_KEY' => $supporter_my_donate_page->supporter_my_donate_page_KEY), NULL, array('amount', 'donation.donation_KEY'));
  if (!empty($result)) {
    foreach ($result as $donation) {
      // Salsa seems to save the supporter_my_donate_page_donation object twice,
      // group on donation_KEY to avoid counting duplicates.
      $current[$donation->donation_KEY] = $donation->amount;
    }
  }
  $current = array_sum($current);

  $form['progress']['donation_progress'] = array(
    '#type' => 'item',
    '#title' => t('Current amount'),
    '#markup' => '<span class="current-amount">' . $current . '</span>',
  );

  $percent = $supporter_my_donate_page->Donation_Goal ? round(100 / $supporter_my_donate_page->Donation_Goal * $current, 0) : 0;
  $form['progress']['progressbar'] = array(
    '#theme' => 'salsa_my_donate_page_progressbar',
    '#goal' => $supporter_my_donate_page->Donation_Goal,
    '#current' => $current,
    '#percent' => $percent,
  );

  // Supporter fieldset.
  salsa_entity_supporter_fieldset($form, $form_state, 'salsa_my_donate_page_form');

  // Payment Information
  $form['Donation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment Information'),
  );

  $form['Donation']['Pre_Donation_Text'] = array(
    '#type' => 'item',
    '#markup' => $my_donate_page->Pre_Donation_Text,
    '#access' => !empty($my_donate_page->Pre_Donation_Text),
  );

  if ($my_donate_page->Include_Recurring_Payments == 'true') {
    $form['Donation']['recurring'] = array(
      '#type' => 'radios',
      '#title' => t('Donation Amount ($)'),
      '#options' => array(
        0 => t('This is a one-time donation.'),
        1 => t('I want to make a recurring donation.'),
      ),
      '#default_value' => 0,
    );

    $form['Donation']['PAYPERIOD'] = array(
      '#type' => 'select',
      '#states' => array(
        'visible' => array(
          ':input[name=recurring]' => array('value' => 1),
        ),
      ),
      '#options' => array(
        'MONT' => t('Every Month'),
        'WEEK' => t('Every Week'),
        'QTER' => t('Every 3 Months'),
        'SMYR' => t('Every 6 Months'),
        'YEAR' => t('Every Year'),
      ),
      '#default_value' => 'MONT',
    );

    $form['Donation']['TERM'] = array(
      '#type' => 'select',
      '#states' => array(
        'visible' => array(
          ':input[name=recurring]' => array('value' => 1),
        ),
      ),
      '#options' => array(
        '9999' => t('Unlimited'),
      ) + drupal_map_assoc(range(2, 36)),
      '#default_value' => '9999',
      '#field_prefix' => t('for'),
      '#field_suffix' => t('total donations') . ' ' . l(t('help'), '#'),
    );
  }

  if ($my_donate_page->Comma_delimited_Amounts) {
    $amounts = explode(',', $my_donate_page->Comma_delimited_Amounts);
    // Make sure the amounts are trimmed.
    foreach ($amounts as &$amount) {
      $amount = trim($amount);
    }
  }
  else {
    $amounts = variable_get('salsa_entity_default_amounts', salsa_entity_default_amounts());
  }
  $form['Donation']['amount'] = array(
    '#type' => 'radios',
    '#options' => drupal_map_assoc($amounts) + array(NULL => t('other')),
  );

  // Define some useful classes on the single radios, this will be merged in
  // form_process_radios();
  $i = 0;
  foreach ($form['Donation']['amount']['#options'] as $key => $option) {
    $form['Donation']['amount'][$key]['#attributes']['class'] = array('amount-index-' . $i++);
  }
  $form['Donation']['amount']['']['#attributes']['class'][] = 'amount-last';
  $form['Donation']['amount'][reset($amounts)]['#attributes']['class'][] = 'amount-first';

  $form['Donation']['amountOther'] = array(
    '#type' => 'textfield',
    '#field_suffix' => t("(Do not enter '$')"),
  );

  // Credit Card Information
  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
  );

  $form['credit_card']['cc_type'] = array(
    '#type' => 'radios',
    '#title' => t('Card Type'),
    '#options' => array(
      'visa' => t('Visa'),
      'mc' => t('MasterCard'),
      'amex' => t('American Express'),
      'disc' => t('Discover'),
    ),
    '#default_value' => 'visa',
  );

  $form['credit_card']['cc'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Number'),
    '#description' => t('Please enter your card number with no spaces or dashes.'),
  );

  $form['credit_card']['ccExpMonth'] = array(
    '#type' => 'select',
    '#title' => t('Expires'),
    '#options' => array(
      '' => '',
    ),
  );

  $months = range(1, 12);
  foreach ($months as $month) {
    if ($month < 10) {
      $month = '0' . $month;
    }
    $form['credit_card']['ccExpMonth']['#options'][$month] = $month;
  }

  $currentYear = date('Y', time());
  $years = range($currentYear, $currentYear + 10);
  $form['credit_card']['ccExpYear'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => '',
    ),
    '#default_value' => '',
  );
  foreach ($years as $year) {
    $form['credit_card']['ccExpYear']['#options'][substr($year, -2)] = $year;
  }

  $form['credit_card']['CVV2'] = array(
    '#type' => 'textfield',
    '#title' => t('Security Code'),
    '#field_suffix' => l(t("What's This?"), '#'),
    '#size' => 5,
    '#maxlength' => 4,
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['donate'] = array(
    '#type' => 'submit',
    '#value' => t('Donate now'),
    '#suffix' => t('Note: Only click this button once, otherwise your payment may be processed twice.'),
  );

  $form['#action'] = variable_get('salsa_api_url') . '/dia/processDonate.jsp';
  salsa_my_donate_page_hidden_fields($form, $form_state);

  return $form;
}

/**
 * Helper function that returns the hidden fields used on My Donate Page.
 */
function salsa_my_donate_page_hidden_fields(&$form, $form_state) {
  global $user;

  $form['donate_page_KEY'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );

  $form['supporter_my_donate_page_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['supporter_my_donate_page']->supporter_my_donate_page_KEY,
  );

  $form['table'] = array(
    '#type' => 'hidden',
    '#value' => 'supporter',
  );

  $form['key'] = array(
    '#type' => 'hidden',
    '#value' => empty($form_state['supporter']->supporter_KEY) ? 0 : $form_state['supporter']->supporter_KEY,
  );

  $form['merchant_account_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->merchant_account_KEY,
  );

  $form['Tax_Status'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->Tax_Status,
  );

  $form['Status'] = array(
    '#type' => 'hidden',
    '#value' => 'Donation_Only',
  );

  $form['amountMinimum'] = array(
    '#type' => 'hidden',
    '#value' => '0.0',
  );

  $form['eligibility'] = array(
    '#type' => 'hidden',
    '#value' => 1,
  );

  $form['redirect'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->Donation_Redirect,
  );

  $form['email_trigger_KEYS'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->email_trigger_KEYS,
  );

  $groups = salsa_entity_string_explode($form_state['salsa_object']->groups_KEYS);
  if (!empty($groups)) {
    foreach ($groups as $groupID) {
      $form[$groupID]['link'] = array(
        '#type' => 'hidden',
        '#value' => 'groups',
      );
      $form[$groupID]['linkKey'] = array(
        '#type' => 'hidden',
        '#value' => $groupID,
      );
    }
  }

  $form['organization_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->organization_KEY,
  );

  $form['Transaction_Type'] = array(
    '#type' => 'hidden',
    '#value' => 'Donation',
  );

  $form['errorPage'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );
}

/**
 * Theme function that renders a progressbar.
 *
 * @todo remove this function and switch to
 *   theme_salsa_donate_page_progress_bar().
 */
function theme_salsa_my_donate_page_progressbar(array $variables) {
  $return = '<p class="progress">' . t('Progress: @percent%', array('@percent' => $variables['percent'])) . '</p>';
  $return .= '<progress max="' .$variables['goal'] .'" value="' . $variables['current'] . '"></progress>';
  $return = '<div class="my-donate-progress">' . $return . '</div>';
  return $return;
}
