<?php

/**
 * @file
 * Main module file for salsa entity.
 */

/**
 * Standard format that is accepted by Salsa API for dates.
 *
 * @todo: This format does not support timezones.
 */
define('SALSA_ENTITY_DATE_FORMAT', 'Y-m-d H:i:s');

/**
 * Implements hook_permission().
 */
function salsa_entity_permission() {
  $types = salsa_entity_object_types();

  $permissions = array();
  foreach ($types as $name => $type) {
    $permissions['view salsa_' . $name] = array(
      'title' => t('View @label', array('@label' => $type['label'])),
    );
  }

  return $permissions;
}

/**
 * Implements hook_access().
 */
function salsa_entity_access($op, $entity = NULL, $account = NULL, $entity_type) {
  if ($op == 'view') {
    return user_access('view ' . $entity_type, $account);
  }
  else {
    return user_access('administer salsa', $account);
  }
}

/**
 * Implements hook_menu().
 */
function salsa_entity_menu() {
  $items = array();
  $items['admin/config/services/salsa/entity'] = array(
    'title' => 'Salsa Entity Objects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_entity_objects'),
    'access arguments' => array('administer salsa'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['salsa/supporter/reset'] = array(
    'title' => 'Reset/Unlink Supporter',
    'page callback' => 'salsa_entity_reset_supporter',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function salsa_entity_theme() {
  return array(
    'salsa_entity_page_title' => array(
      'template' => 'salsa_entity_page_title',
      'path' => drupal_get_path('module', 'salsa_entity') . '/theme',
      'variables' => array(
        'title' => NULL,
      ),
    ),
  );
}

/**
 * The form that we use to enable salsa objects.
 */
function salsa_entity_objects($form, $form_state) {
  // Cache fieldset.
  $form['salsa_cache'] = array(
    '#type' => 'fieldset',
    '#title' => t('Salsa cache'),
  );

  $form['salsa_cache']['clear'] = array(
    '#type' => 'submit',
    '#value' => t('Clear all Salsa caches'),
    '#submit' => array(
      'salsa_entity_truncate_cache',
      'salsa_entity_cache_clear',
    ),
  );
  return $form;
}

/**
 * Additional submit handler to clear entity cache.
 */
function salsa_entity_cache_clear() {
  entity_info_cache_clear();
  cache_clear_all('entity_property_info:', 'cache', TRUE);
  menu_rebuild();
}

/**
 * Function used to truncate the salsa_entity_cache table.
 */
function salsa_entity_truncate_cache() {
  db_truncate('salsa_entity_cache')->execute();
  drupal_set_message(t('Salsa caches cleared.'));
}

/**
 * Implements hook_entity_info().
 */
function salsa_entity_entity_info() {
  $objects = salsa_entity_object_types();

  // Stop-gap to avoid trying to build entity information in test runs
  // before the mock class is set.
  if (variable_get('install_profile') == 'testing' && variable_get('salsa_api_class') == NULL) {
    return array();
  }

  $entities = array();
  foreach ($objects as $name => $object) {
    $entities['salsa_' . $name] = $object + array(
      'module' => 'salsa_entity',
      'entity class' => 'SalsaEntity',
      'controller class' => 'SalsaController',
      'metadata controller class' => 'SalsaEntityMetadataController',
      'views controller class' => FALSE,
      'entity keys' => array(),
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'admin ui' => array(
        'controller class' => 'SalsaEntityUIController',
        'path' => 'salsa/' . $name,
      ),
      'access callback' => 'salsa_entity_access',
      // Disable metatags integration, seems to result in crazy bugs.
      'metatags' => FALSE,
    );

    $entities['salsa_' . $name]['entity keys'] += array(
      'id' => $name . '_KEY',
    );

    // Make use of the entity cache module if it is enabled and the object
    // suggests to use it.
    if (module_exists('entitycache') && !empty($object['cache'])) {
      $entities['salsa_' . $name]['entity cache'] = TRUE;
      $entities['salsa_' . $name]['field cache'] = FALSE;

      // Make sure that the cache table exists.
      // @todo: Does this belong somewhere else?
      if (!db_table_exists('cache_entity_salsa_' . $name)) {
        $cache_schema = drupal_get_schema_unprocessed('system', 'cache');
        $cache_schema['description'] = "Cache table used to store salsa_$name entity records.";

        db_create_table('cache_entity_salsa_' . $name, $cache_schema);
      }
    }

  }
  return $entities;
}

/**
 * Returns an array of defined object types.
 *
 * @return
 *   Array of salsa entity object types
 * @see salsa_entity_object_type_info()
 */
function salsa_entity_object_types() {
  $types = &drupal_static(__FUNCTION__);

  if ($types === NULL) {
    $types = module_invoke_all('salsa_object_type_info');
    if (!is_array($types)) {
      $types = array();
    }
    drupal_alter('salsa_object_type_info', $types);
  }
  return $types;
}

/**
 * Implements hook_salsa_object_type_info().
 */
function salsa_entity_salsa_object_type_info() {
  return array(
    'supporter' => array(
      'label' => t('Salsa Supporter'),
      'cache' => TRUE,
    ),
    'supporter_groups' => array(
      'label' => t('Salsa Supporter Groups'),
    ),
    'distributed_event' => array(
      'label' => t('Salsa Distributed Event'),
    ),
    'groups' => array(
      'label' => t('Salsa Groups'),
    ),
    'database_table' => array(
      'label' => t('Salsa Database Table'),
    ),
    'custom_column' => array(
      'label' => t('Salsa Custom Column'),
    ),
    'custom_column_option' => array(
      'label' => t('Salsa Custom Column Option'),
    ),
    'publish' => array(
      'label' => t('Salsa Publish'),
    ),
  );
}

/**
 * A callback that returns at list of possible values for the property.
 */
function salsa_entity_property_info_options($name, $info) {
  if (isset($info['options'])) {
    return $info['options'];
  }
}

/**
 * Simple page callback for viewing entity.
 *
 * @param SalsaEntity $entity
 *   The viewed entity.
 *
 * @return array
 *   A renderable array.
 */
function salsa_entity_view(SalsaEntity $entity) {
  return entity_view($entity->entityType(), array($entity), 'full', NULL, TRUE);
}

/**
 * Returns the currently logged in supporter.
 *
 * @return $supporter
 *   Salsa Supporter if one is found, FALSE otherwise.
 */
function salsa_entity_get_supporter() {
  // If supporter KEY is stored in the session, just load and return supporter
  // entity.
  if (isset($_SESSION['salsa_entity']['supporter_KEY'])) {
    if ($supporter = entity_load_single('salsa_supporter', $_SESSION['salsa_entity']['supporter_KEY'])) {
      return $supporter;
    }
  }

  // Implement hook to allows other modules to suggest a supporter.
  foreach (module_implements('salsa_entity_current_supporter') as $module) {
    $function = $module . '_salsa_entity_current_supporter';
    if ($supporter = $function()) {
      salsa_entity_set_supporter($supporter);
     return $supporter;
    }
  }

  // If still no supporter, return FALSE.
  return FALSE;
}

/**
 * Assigns the supporter entity to the current session.
 *
 * @param $supporter
 *   Salsa supporter entity.
 *
 * @param $account
 *   Currently logged in user.
 */
function salsa_entity_set_supporter($supporter, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }
  $_SESSION['salsa_entity']['supporter_KEY'] = $supporter->supporter_KEY;
  module_invoke_all('salsa_entity_supporter_set', $supporter, user_load($account->uid));
}

/**
 * Simple function that unset supporter KEY.
 */
function salsa_entity_reset_supporter() {
  unset($_SESSION['salsa_entity']['supporter_KEY']);
  drupal_goto();
}

/**
 * Implements hook_entity_query_alter().
 */
function salsa_entity_entity_query_alter(&$query) {
  $salsa_object_types = array_keys(salsa_entity_object_types());
  if (!empty($query->entityConditions['entity_type'])
    && in_array(substr($query->entityConditions['entity_type']['value'], 6), $salsa_object_types)) {
      $query->executeCallback = 'salsa_entity_field_storage_query';
  }
}

/**
 * Implements hook_field_storage_query().
 */
function salsa_entity_field_storage_query(EntityFieldQuery $query) {
  $conditions = array();

  $salsa_type = str_replace('salsa_', '', $query->entityConditions['entity_type']['value']);

  $efq_conditions = $query->propertyConditions;
  // If there is a entity_id entity condition, add it to the conditions.
  if (!empty($query->entityConditions['entity_id'])) {
    $efq_conditions[$salsa_type . '_KEY'] = $query->entityConditions['entity_id'];
  }

  foreach ($efq_conditions as $key => $efq_condition) {
    if (isset($efq_condition['column'])) {
      $key = $efq_condition['column'];
    }

    switch ($efq_condition['operator']) {
      case 'CONTAINS':
        $conditions[$key] = '%' . $efq_condition['value'] . '%';
        break;

      case 'IN':
        $conditions[$key] = $efq_condition['value'];
        break;

      default:
        $conditions[$key] = array(
          '#value' => $efq_condition['value'],
          '#operator' => !empty($efq_condition['operator']) ? $efq_condition['operator'] : '=',
        );
        break;
    }
  }

  // Build a count query if requested.
  if ($query->count) {
    return salsa_api()->getCount($salsa_type, $conditions);
  }

  // @todo: Consider using the salsa API directly here, and only load the ids
  // to simulate the default EFQ behavior.
  if (isset($query->range['start'])) {
    $conditions['#limit'] = $query->range['start'] . ',' . $query->range['length'];
  }

  // Convert order by definition.
  $orderBy = array();
  foreach ($query->order as $order) {
    // Descending order is specified as a leading -.
    $orderBy[] = ($order['direction'] == 'DESC' ? '-' : '') . $order['specifier'];
  }
  if (!empty($orderBy)) {
    $conditions['#order'] = $orderBy;
  }
  $entities = entity_load($query->entityConditions['entity_type']['value'], FALSE, $conditions);
  if ($entities) {
    return array($query->entityConditions['entity_type']['value'] => $entities);
  }
  return array();
}

/**
 * Helper function that returns default supporter fields.
 *
 * @todo Try to find a way to get a real default values for Request and Required
 * fields for any salsa type that we use (event, questionnaire, donate page...)
 */
function salsa_entity_default_supporter_fields() {
  return array(
    'Request' => array(
      'First_Name',
      'Last_Name',
      'Street',
      'Street_2',
      'City',
      'State',
      'Zip',
      'Email',
    ),
    'Required' => array(
      'First_Name',
      'Last_Name',
      'Street',
      'City',
      'State',
      'Zip',
      'Email',
    )
  );
}

/**
 * Helper function that returns default amounts.
 */
function salsa_entity_default_amounts() {
  return array(35, 50, 75, 100, 250, 1000, 2500);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function salsa_entity_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $module . '/' . $plugin;
  }
}

/**
 * The function that builds a supporter fieldset that is used
 * in various forms (SignUp Page, Questionnaire, Donate Page ...).
 */
function salsa_entity_supporter_fieldset(&$form, &$form_state, $form_id) {
  if (empty($form_state['salsa_object']->Request)) {
    $default_fields = variable_get('salsa_entity_default_supporter_fields', salsa_entity_default_supporter_fields());
    $form_state['form_fields'] = $default_fields['Request'];
    $form_state['form_fields_required'] = $default_fields['Required'];
  }
  else {
    $form_state['form_fields'] = salsa_entity_string_explode($form_state['salsa_object']->Request);
    $form_state['form_fields_required'] = salsa_entity_string_explode($form_state['salsa_object']->Required);
  }

  if (!empty($form_state['supporter']->supporter_KEY)) {
    $form['welcome_back'] = array(
      '#type' => 'item',
      '#markup' => '<div><strong>' . t('Welcome back!') . '</strong></div>',
    );

    $form['reset_link'] = array(
      '#type' => 'item',
      '#markup' => '<div>' . t('Not @email? !reset_link. Thank you!', array('@email' => $form_state['supporter']->Email, '!reset_link' => l(t('Please click here'), 'salsa/supporter/reset', array('query' => array('destination' => current_path()))))) . '</div>',
    );
  }

  // Supporter fieldset.
  $form['Supporter_Info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Your Information'),
    '#description' => isset($form_state['Supporter_Fieldset_Desc']) ? $form_state['Supporter_Fieldset_Desc'] : '',
  );

  // Supporter Fields
  $supporter_info = entity_get_all_property_info('salsa_supporter');
  $weight = -50;
  foreach ($form_state['form_fields'] as $field) {
    $field = trim($field);
    if (isset($supporter_info[$field])) {

      // Pre custom fields text, if any.
      $pre_custom_fields_text = FALSE;
      if (isset($form_state['salsa_object']->Pre_Custom_Text) && isset($supporter_info[$field]['#salsa_custom']) && !$pre_custom_fields_text) {
        $pre_custom_fields_text = TRUE;
        $form['Supporter_Info']['Pre_Custom_Text'] = array(
          '#markup' => '<div>' . $form_state['salsa_object']->Pre_Custom_Text . '</div>',
          '#weight' => $weight - 1,
        );
      }

      // Form fields.
      $form['Supporter_Info'][$field] = array(
        '#title' => check_plain($supporter_info[$field]['label']),
        '#required' => in_array($field, $form_state['form_fields_required']),
        '#default_value' => isset($form_state['supporter']->$field) ? $form_state['supporter']->$field : '',
        '#weight' => $weight,
      );
      $weight += 5;

      if ($field == 'Email') {
        $form['Supporter_Info'][$field]['#element_validate'] = array('salsa_entity_email_validation');
      }
      if (isset($supporter_info[$field]['options list'])) {
        $callback = $supporter_info[$field]['options list'];
        $form['Supporter_Info'][$field]['#type'] = 'select';
        $form['Supporter_Info'][$field]['#empty_option'] = t('- Please select -');
        $form['Supporter_Info'][$field]['#options'] = $callback($field, $supporter_info[$field]);
      }
      elseif ($supporter_info[$field]['type'] == 'boolean') {
        $form['Supporter_Info'][$field]['#type'] = 'checkbox';
        $form['Supporter_Info'][$field]['#default_value'] = isset($form_state['supporter']->$field) && $form_state['supporter']->$field == 'true' ? 1 : 0;
      }
      // Special case for country field, use a select with list of countries.
      elseif ($field == 'Country') {
        // Necessary for country_get_list().
        require_once DRUPAL_ROOT . '/includes/locale.inc';
        $form['Supporter_Info'][$field]['#type'] = 'select';
        $form['Supporter_Info'][$field]['#options'] = country_get_list();
        $form['Supporter_Info'][$field]['#empty_option'] = t('- Choose country -');
      }
      else if (($supporter_info[$field]['salsa_type'] == 'text') || ($supporter_info[$field]['salsa_type'] == 'blob')) {
        $form['Supporter_Info'][$field]['#type'] = 'textarea';
      }
      else {
        $form['Supporter_Info'][$field]['#type'] = 'textfield';
      }
    }
  }

  // Allow other modules to alter supporter fieldset.
  drupal_alter('salsa_entity_supporter_fieldset', $form, $form_state, $form_id);
}

/**
 * Validate callback for e-mail field.
 */
function salsa_entity_email_validation($element, &$form_state) {
  if(!empty($element['#value']) && !valid_email_address($element['#value'])) {
    form_error($element, t('E-mail address is not valid.'));
  }
}

/**
 * Custom submit handler that creates / updates supporter.
 */
function salsa_entity_supporter_fieldset_submit($form, &$form_state) {
  // Update existing or create new supporter.
  $supporter = is_object($form_state['supporter']) ? $form_state['supporter'] : entity_create('salsa_supporter', array());

  // If the E-mail of the supporter changed, save it as a new supporter to
  // prevent accidental overwrites.
  $mail = NULL;
  if (isset($form_state['values']['Supporter_Info']['Email'])) {
    $mail = $form_state['values']['Supporter_Info']['Email'];
  }
  elseif (isset($form_state['values']['Email'])) {
    $mail = $form_state['values']['Email'];
  }
  if (!empty($supporter->Email) && $mail && $mail != $supporter->Email) {
    // E-Mail address changed, create a new supporter.
    $supporter = entity_create('salsa_supporter', array());
  }

  foreach ($form_state['form_fields'] as $field) {
    if (isset($form_state['values'][$field])) {
      $supporter->$field = $form_state['values'][$field];
    }
    elseif (isset($form_state['values']['Supporter_Info'][$field])) {
      $supporter->$field = $form_state['values']['Supporter_Info'][$field];
    }
  }

  // Allow to add more data the supporter, e.g. values for mail trigger tokens.
  if (!empty($form_state['additional'])) {
    if (empty($supporter->additional)) {
      $supporter->additional = array();
    }
    $supporter->additional = array_merge($supporter->additional, $form_state['additional']);
  }

  if (!empty($form_state['salsa_object']->email_trigger_KEYS) && empty($form_state['delay_mail_triggers'])) {
    // Pass email trigger keys as additional fields to the save callback.
    $supporter->additional['email_trigger_KEYS'] = $form_state['salsa_object']->email_trigger_KEYS;
  }

  // Add tags if there are any assigned.
  if ($form_state['salsa_object'] instanceof SalsaEntity && $tags = $form_state['salsa_object']->getTags()) {
    $supporter->additional['tag'] = implode(',', $tags);
  }

  $supporter->save();
  $form_state['supporter'] = $supporter;
  salsa_entity_set_supporter($supporter, user_load_by_mail($form_state['values']['Email']));
}

/**
 * Returns entity property info for custom fields of a salsa object.
 *
 * @param string $salsa_object
 *   The salsa object name, e.g. 'supporter'.
 *
 * @return array
 *   List of custom properties, empty array if there are none.
 */
function salsa_entity_custom_fields($salsa_object) {
  $properties = entity_get_all_property_info('salsa_' . $salsa_object);
  $custom_fields = array();
  foreach ($properties as $property => $field) {
    if (!empty($field['#salsa_custom'])) {
      $custom_fields[$property] = $field;
    }
  }
  return $custom_fields;
}

/**
 * Implements hook_preprocess_ELEMENT().
 */
function salsa_entity_preprocess_entity(&$variables) {
  // entity.module does not correctly set the url variable if the page is set.
  $entity_type = $variables['elements']['#entity_type'];
  if (strpos($entity_type, 'salsa') !== FALSE) {
    $entity = $variables['elements']['#entity'];
    $uri = entity_uri($entity_type, $entity);
    $variables['url'] = $uri ? url($uri['path'], $uri['options']) : FALSE;
  }
}

/**
 * Getter function for salsa entity cache records.
 *
 * @param $cid
 *   A string representing the unique identifier of they cache item.
 *
 * @return
 *   If one is found a cache item, otherwise FALSE.
 */
function salsa_entity_load_cache_item($cid) {
  $result = db_select('salsa_entity_cache', 's')
    ->fields('s', array('data'))
    ->condition('s.cid', $cid)
    ->execute()
    ->fetchField();

  if ($result) {
    return unserialize($result);
  }
  return FALSE;
}

/**
 * Setter function for salsa entity cache records.
 *
 * @param $cid
 *   A string representing the unique identifier of they cache item.
 * @param $cid
 *   Data about the cached entity.
 */
function salsa_entity_save_cache_item($cid, $data) {
  $record = array(
    'cid' => $cid,
    'data' => !is_string($data) ? serialize($data) : $data,
    'timestamp' => REQUEST_TIME,
  );
  drupal_write_record('salsa_entity_cache', $record);
}

/**
 * The function that returns custom fields for the corresponding table (object).
 *
 * @param $table_name
 *   Table name of the custom fields that we need (supporter, action...).
 * @param $reset
 *   TRUE to reload custom fields through the API, FALSE to load from cache.
 *
 * @return
 *   Array of custom fields or FALSE.
 */
function salsa_entity_fetch_custom_fields($table_name, $reset = FALSE) {
  $custom_fields = &drupal_static(__FUNCTION__, array());

  if (empty($custom_fields)) {
    if (!$reset && $cache = cache_get('salsa_entity_' . $table_name . '_custom_fields')) {
      $custom_fields = $cache->data;
    }
    elseif ($database_table = reset(entity_load('salsa_database_table', FALSE, array('table_name' => $table_name)))) {
      $custom_fields = entity_load('salsa_custom_column', FALSE, array('database_table_KEY' => $database_table->database_table_KEY));
      cache_set('salsa_entity_' . $table_name . '_custom_fields', $custom_fields, 'cache');
    }
  }

  return $custom_fields;
}

/**
 * Helper function that can be used to delete supporter groups.
 *
 * @param string $add_to_groups_KEYS
 * @param string $optionally_add_to_groups_KEYS
 */
function salsa_entity_delete_supporter_groups($add_to_groups_KEYS = '', $optionally_add_to_groups_KEYS = '') {
  $groups = entity_load('salsa_supporter_groups', FALSE, array('supporter_KEY' => $_SESSION['salsa_entity']['supporter_KEY']));
  $page_groups = array_merge(salsa_entity_string_explode($add_to_groups_KEYS), salsa_entity_string_explode($optionally_add_to_groups_KEYS));

  $groups_to_delete = array();
  foreach ($groups as $group) {
    if (in_array($group->groups_KEY, $page_groups)) {
      $groups_to_delete[] = $group->supporter_groups_KEY;
    }
  }
  entity_delete_multiple('salsa_supporter_groups', $groups_to_delete);
}

/**
 * Adds a supporter to all provided groups where is not yet in.
 *
 * @param SalsaEntity $supporter
 *   The supporter entity.
 * @param $groups_keys
 *   Array of salsa group keys.
 */
function salsa_entity_add_supporter_groups($supporter, array $groups_keys) {
  // Load existing groups.
  $existing_groups = entity_load('salsa_supporter_groups', FALSE, array('supporter_KEY' => $supporter->supporter_KEY));
  foreach ($groups_keys as $key) {
    // check if the user has that group already.
    foreach ($existing_groups as $existing_group) {
      if ($existing_group->groups_KEY == $key) {
        // Supporter is already in this group already, skip.
        continue 2;
      }
    }

    $supporter_groups = entity_create('salsa_supporter_groups', array());
    $supporter_groups->supporter_KEY = $supporter->supporter_KEY;
    $supporter_groups->groups_KEY = $key;
    $supporter_groups->save();
  }
}

/**
 * Helper function that explodes and filters given string.
 *
 * @param string $string
 *   The input string.
 * @param string $delimiter
 *   The boundary string.
 */
function salsa_entity_string_explode($string, $delimiter = ',') {
  return array_filter(explode($delimiter, $string));
}

/**
 * Convert date to a format that is accepted by the save API.
 *
 * Respects the timezone if provided.
 *
 * @param $date
 *   The date in any format understood by DateTime.
 * @param string $timezone
 *   To enforce the target timezone and convert the value,
 * @return string
 */
function salsa_entity_convert_date($date, $timezone = NULL, $format = SALSA_ENTITY_DATE_FORMAT) {
  $date = new DateTime($date);
  if ($timezone) {
    $date->setTimezone(new DateTimeZone($timezone));
  }
  return $date->format($format);
}

/**
 * Returns the formatted currency amount.
 *
 * By default, the provided fee is not altered but
 * hook_salsa_entity_amount_alter() can be used to e.g. append the currency.
 *
 * @param float $amount
 *   The currency amount as a float.
 *
 * @return float
 *   The possibly altered amount.
 */
function salsa_entity_get_amount($amount, $formatted = FALSE) {
  drupal_alter('salsa_entity_amount', $amount, $formatted);
  return $amount;
}
